(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){(function (){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":367,"util/":4}],2:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],3:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],4:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":3,"_process":384,"inherits":2}],5:[function(require,module,exports){
(function (global){(function (){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"core-js/fn/regexp/escape":8,"core-js/shim":336,"regenerator-runtime/runtime":385}],6:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],7:[function(require,module,exports){
(function (global,Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"base64-js":6,"buffer":7,"ieee754":342,"isarray":343}],8:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/_core":30,"../../modules/core.regexp.escape":138}],9:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],10:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":25}],11:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":50,"./_wks":136}],12:[function(require,module,exports){
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":113}],13:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],14:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":59}],15:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":121,"./_to-length":125,"./_to-object":126}],16:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":121,"./_to-length":125,"./_to-object":126}],17:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":46}],18:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":121,"./_to-iobject":124,"./_to-length":125}],19:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":22,"./_ctx":32,"./_iobject":55,"./_to-length":125,"./_to-object":126}],20:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":9,"./_iobject":55,"./_to-length":125,"./_to-object":126}],21:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":57,"./_is-object":59,"./_wks":136}],22:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":21}],23:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":9,"./_invoke":54,"./_is-object":59}],24:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":25,"./_wks":136}],25:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],26:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":13,"./_ctx":32,"./_descriptors":36,"./_for-of":46,"./_iter-define":63,"./_iter-step":65,"./_meta":73,"./_object-create":78,"./_object-dp":79,"./_redefine-all":98,"./_set-species":107,"./_validate-collection":133}],27:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_array-from-iterable":17,"./_classof":24}],28:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":13,"./_an-object":14,"./_array-methods":19,"./_for-of":46,"./_has":49,"./_is-object":59,"./_meta":73,"./_redefine-all":98,"./_validate-collection":133}],29:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":13,"./_export":40,"./_fails":42,"./_for-of":46,"./_global":48,"./_inherit-if-required":53,"./_is-object":59,"./_iter-detect":64,"./_meta":73,"./_redefine":99,"./_redefine-all":98,"./_set-to-string-tag":108}],30:[function(require,module,exports){
var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],31:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":79,"./_property-desc":97}],32:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":9}],33:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":42}],34:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":14,"./_to-primitive":127}],35:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],36:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":42}],37:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":48,"./_is-object":59}],38:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],39:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":85,"./_object-keys":88,"./_object-pie":89}],40:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":30,"./_ctx":32,"./_global":48,"./_hide":50,"./_redefine":99}],41:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":136}],42:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],43:[function(require,module,exports){
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":35,"./_fails":42,"./_hide":50,"./_redefine":99,"./_regexp-exec":101,"./_wks":136,"./es6.regexp.exec":233}],44:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":14}],45:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":32,"./_is-array":57,"./_is-object":59,"./_to-length":125,"./_wks":136}],46:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":14,"./_ctx":32,"./_is-array-iter":56,"./_iter-call":61,"./_to-length":125,"./core.get-iterator-method":137}],47:[function(require,module,exports){
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":110}],48:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],49:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],50:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":36,"./_object-dp":79,"./_property-desc":97}],51:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":48}],52:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":36,"./_dom-create":37,"./_fails":42}],53:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":59,"./_set-proto":106}],54:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],55:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":25}],56:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":66,"./_wks":136}],57:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":25}],58:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":59}],59:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],60:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":25,"./_is-object":59,"./_wks":136}],61:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":14}],62:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":50,"./_object-create":78,"./_property-desc":97,"./_set-to-string-tag":108,"./_wks":136}],63:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":40,"./_hide":50,"./_iter-create":62,"./_iterators":66,"./_library":67,"./_object-gpo":86,"./_redefine":99,"./_set-to-string-tag":108,"./_wks":136}],64:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":136}],65:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],66:[function(require,module,exports){
module.exports = {};

},{}],67:[function(require,module,exports){
module.exports = false;

},{}],68:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],69:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":72}],70:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],71:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],72:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],73:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":42,"./_has":49,"./_is-object":59,"./_object-dp":79,"./_uid":131}],74:[function(require,module,exports){
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./_export":40,"./_shared":110,"./es6.map":168,"./es6.weak-map":275}],75:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":25,"./_global":48,"./_task":120}],76:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":9}],77:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

},{"./_descriptors":36,"./_fails":42,"./_iobject":55,"./_object-gops":85,"./_object-keys":88,"./_object-pie":89,"./_to-object":126}],78:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":14,"./_dom-create":37,"./_enum-bug-keys":38,"./_html":51,"./_object-dps":80,"./_shared-key":109}],79:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":14,"./_descriptors":36,"./_ie8-dom-define":52,"./_to-primitive":127}],80:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":14,"./_descriptors":36,"./_object-dp":79,"./_object-keys":88}],81:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_fails":42,"./_global":48,"./_library":67}],82:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":36,"./_has":49,"./_ie8-dom-define":52,"./_object-pie":89,"./_property-desc":97,"./_to-iobject":124,"./_to-primitive":127}],83:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":84,"./_to-iobject":124}],84:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":38,"./_object-keys-internal":87}],85:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],86:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":49,"./_shared-key":109,"./_to-object":126}],87:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":18,"./_has":49,"./_shared-key":109,"./_to-iobject":124}],88:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":38,"./_object-keys-internal":87}],89:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],90:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":30,"./_export":40,"./_fails":42}],91:[function(require,module,exports){
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

},{"./_descriptors":36,"./_object-keys":88,"./_object-pie":89,"./_to-iobject":124}],92:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":14,"./_global":48,"./_object-gopn":84,"./_object-gops":85}],93:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":48,"./_string-trim":118,"./_string-ws":119}],94:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":48,"./_string-trim":118,"./_string-ws":119}],95:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],96:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":14,"./_is-object":59,"./_new-promise-capability":76}],97:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],98:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":99}],99:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":30,"./_function-to-string":47,"./_global":48,"./_has":49,"./_hide":50,"./_uid":131}],100:[function(require,module,exports){
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":24}],101:[function(require,module,exports){
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":44}],102:[function(require,module,exports){
module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

},{}],103:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],104:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};

},{"./_a-function":9,"./_ctx":32,"./_export":40,"./_for-of":46}],105:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};

},{"./_export":40}],106:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":14,"./_ctx":32,"./_is-object":59,"./_object-gopd":82}],107:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":36,"./_global":48,"./_object-dp":79,"./_wks":136}],108:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":49,"./_object-dp":79,"./_wks":136}],109:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":110,"./_uid":131}],110:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":30,"./_global":48,"./_library":67}],111:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":9,"./_an-object":14,"./_wks":136}],112:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":42}],113:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":35,"./_to-integer":123}],114:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":35,"./_is-regexp":60}],115:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":35,"./_export":40,"./_fails":42}],116:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":35,"./_string-repeat":117,"./_to-length":125}],117:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":35,"./_to-integer":123}],118:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":35,"./_export":40,"./_fails":42,"./_string-ws":119}],119:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],120:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":25,"./_ctx":32,"./_dom-create":37,"./_global":48,"./_html":51,"./_invoke":54}],121:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":123}],122:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":123,"./_to-length":125}],123:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],124:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":35,"./_iobject":55}],125:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":123}],126:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":35}],127:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":59}],128:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":13,"./_array-copy-within":15,"./_array-fill":16,"./_array-includes":18,"./_array-methods":19,"./_classof":24,"./_ctx":32,"./_descriptors":36,"./_export":40,"./_fails":42,"./_global":48,"./_has":49,"./_hide":50,"./_is-array-iter":56,"./_is-object":59,"./_iter-detect":64,"./_iterators":66,"./_library":67,"./_object-create":78,"./_object-dp":79,"./_object-gopd":82,"./_object-gopn":84,"./_object-gpo":86,"./_property-desc":97,"./_redefine-all":98,"./_set-species":107,"./_species-constructor":111,"./_to-absolute-index":121,"./_to-index":122,"./_to-integer":123,"./_to-length":125,"./_to-object":126,"./_to-primitive":127,"./_typed":130,"./_typed-buffer":129,"./_uid":131,"./_wks":136,"./core.get-iterator-method":137,"./es6.array.iterator":149}],129:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":13,"./_array-fill":16,"./_descriptors":36,"./_fails":42,"./_global":48,"./_hide":50,"./_library":67,"./_object-dp":79,"./_object-gopn":84,"./_redefine-all":98,"./_set-to-string-tag":108,"./_to-index":122,"./_to-integer":123,"./_to-length":125,"./_typed":130}],130:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":48,"./_hide":50,"./_uid":131}],131:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],132:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":48}],133:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":59}],134:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":30,"./_global":48,"./_library":67,"./_object-dp":79,"./_wks-ext":135}],135:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":136}],136:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":48,"./_shared":110,"./_uid":131}],137:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":24,"./_core":30,"./_iterators":66,"./_wks":136}],138:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });

},{"./_export":40,"./_replacer":102}],139:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":11,"./_array-copy-within":15,"./_export":40}],140:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":19,"./_export":40,"./_strict-method":112}],141:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":11,"./_array-fill":16,"./_export":40}],142:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":19,"./_export":40,"./_strict-method":112}],143:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":11,"./_array-methods":19,"./_export":40}],144:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":11,"./_array-methods":19,"./_export":40}],145:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":19,"./_export":40,"./_strict-method":112}],146:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":31,"./_ctx":32,"./_export":40,"./_is-array-iter":56,"./_iter-call":61,"./_iter-detect":64,"./_to-length":125,"./_to-object":126,"./core.get-iterator-method":137}],147:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":18,"./_export":40,"./_strict-method":112}],148:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":40,"./_is-array":57}],149:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":11,"./_iter-define":63,"./_iter-step":65,"./_iterators":66,"./_to-iobject":124}],150:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":40,"./_iobject":55,"./_strict-method":112,"./_to-iobject":124}],151:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":40,"./_strict-method":112,"./_to-integer":123,"./_to-iobject":124,"./_to-length":125}],152:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":19,"./_export":40,"./_strict-method":112}],153:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":31,"./_export":40,"./_fails":42}],154:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":20,"./_export":40,"./_strict-method":112}],155:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":20,"./_export":40,"./_strict-method":112}],156:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":25,"./_export":40,"./_fails":42,"./_html":51,"./_to-absolute-index":121,"./_to-length":125}],157:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":19,"./_export":40,"./_strict-method":112}],158:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":9,"./_export":40,"./_fails":42,"./_strict-method":112,"./_to-object":126}],159:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":107}],160:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":40}],161:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":33,"./_export":40}],162:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":40,"./_fails":42,"./_to-object":126,"./_to-primitive":127}],163:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":34,"./_hide":50,"./_wks":136}],164:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":99}],165:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":23,"./_export":40}],166:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":59,"./_object-dp":79,"./_object-gpo":86,"./_wks":136}],167:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":36,"./_object-dp":79}],168:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":29,"./_collection-strong":26,"./_validate-collection":133}],169:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":40,"./_math-log1p":70}],170:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":40}],171:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":40}],172:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":40,"./_math-sign":72}],173:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":40}],174:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":40}],175:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":40,"./_math-expm1":68}],176:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":40,"./_math-fround":69}],177:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":40}],178:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":40,"./_fails":42}],179:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":40}],180:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":40,"./_math-log1p":70}],181:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":40}],182:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":40,"./_math-sign":72}],183:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":40,"./_fails":42,"./_math-expm1":68}],184:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":40,"./_math-expm1":68}],185:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":40}],186:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":25,"./_descriptors":36,"./_fails":42,"./_global":48,"./_has":49,"./_inherit-if-required":53,"./_object-create":78,"./_object-dp":79,"./_object-gopd":82,"./_object-gopn":84,"./_redefine":99,"./_string-trim":118,"./_to-primitive":127}],187:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":40}],188:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":40,"./_global":48}],189:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":40,"./_is-integer":58}],190:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":40}],191:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":40,"./_is-integer":58}],192:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":40}],193:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":40}],194:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":40,"./_parse-float":93}],195:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":40,"./_parse-int":94}],196:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_a-number-value":10,"./_export":40,"./_fails":42,"./_string-repeat":117,"./_to-integer":123}],197:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":10,"./_export":40,"./_fails":42}],198:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":40,"./_object-assign":77}],199:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":40,"./_object-create":78}],200:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":36,"./_export":40,"./_object-dps":80}],201:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":36,"./_export":40,"./_object-dp":79}],202:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":59,"./_meta":73,"./_object-sap":90}],203:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":82,"./_object-sap":90,"./_to-iobject":124}],204:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":83,"./_object-sap":90}],205:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":86,"./_object-sap":90,"./_to-object":126}],206:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":59,"./_object-sap":90}],207:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":59,"./_object-sap":90}],208:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":59,"./_object-sap":90}],209:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":40,"./_same-value":103}],210:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":88,"./_object-sap":90,"./_to-object":126}],211:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":59,"./_meta":73,"./_object-sap":90}],212:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":59,"./_meta":73,"./_object-sap":90}],213:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":40,"./_set-proto":106}],214:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":24,"./_redefine":99,"./_wks":136}],215:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":40,"./_parse-float":93}],216:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":40,"./_parse-int":94}],217:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":9,"./_an-instance":13,"./_classof":24,"./_core":30,"./_ctx":32,"./_export":40,"./_for-of":46,"./_global":48,"./_is-object":59,"./_iter-detect":64,"./_library":67,"./_microtask":75,"./_new-promise-capability":76,"./_perform":95,"./_promise-resolve":96,"./_redefine-all":98,"./_set-species":107,"./_set-to-string-tag":108,"./_species-constructor":111,"./_task":120,"./_user-agent":132,"./_wks":136}],218:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":9,"./_an-object":14,"./_export":40,"./_fails":42,"./_global":48}],219:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":9,"./_an-object":14,"./_bind":23,"./_export":40,"./_fails":42,"./_global":48,"./_is-object":59,"./_object-create":78}],220:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":14,"./_export":40,"./_fails":42,"./_object-dp":79,"./_to-primitive":127}],221:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":14,"./_export":40,"./_object-gopd":82}],222:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":14,"./_export":40,"./_iter-create":62}],223:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":14,"./_export":40,"./_object-gopd":82}],224:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":14,"./_export":40,"./_object-gpo":86}],225:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":14,"./_export":40,"./_has":49,"./_is-object":59,"./_object-gopd":82,"./_object-gpo":86}],226:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":40}],227:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":14,"./_export":40}],228:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":40,"./_own-keys":92}],229:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":14,"./_export":40}],230:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":40,"./_set-proto":106}],231:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":14,"./_export":40,"./_has":49,"./_is-object":59,"./_object-dp":79,"./_object-gopd":82,"./_object-gpo":86,"./_property-desc":97}],232:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":36,"./_fails":42,"./_flags":44,"./_global":48,"./_inherit-if-required":53,"./_is-regexp":60,"./_object-dp":79,"./_object-gopn":84,"./_redefine":99,"./_set-species":107,"./_wks":136}],233:[function(require,module,exports){
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_export":40,"./_regexp-exec":101}],234:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":36,"./_flags":44,"./_object-dp":79}],235:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_advance-string-index":12,"./_an-object":14,"./_fix-re-wks":43,"./_regexp-exec-abstract":100,"./_to-length":125}],236:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_advance-string-index":12,"./_an-object":14,"./_fix-re-wks":43,"./_regexp-exec-abstract":100,"./_to-integer":123,"./_to-length":125,"./_to-object":126}],237:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":14,"./_fix-re-wks":43,"./_regexp-exec-abstract":100,"./_same-value":103}],238:[function(require,module,exports){
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_advance-string-index":12,"./_an-object":14,"./_fails":42,"./_fix-re-wks":43,"./_is-regexp":60,"./_regexp-exec":101,"./_regexp-exec-abstract":100,"./_species-constructor":111,"./_to-length":125}],239:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":14,"./_descriptors":36,"./_fails":42,"./_flags":44,"./_redefine":99,"./es6.regexp.flags":234}],240:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":29,"./_collection-strong":26,"./_validate-collection":133}],241:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":115}],242:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":115}],243:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":115}],244:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":115}],245:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":40,"./_string-at":113}],246:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":40,"./_fails-is-regexp":41,"./_string-context":114,"./_to-length":125}],247:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":115}],248:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":115}],249:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":115}],250:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":40,"./_to-absolute-index":121}],251:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":40,"./_fails-is-regexp":41,"./_string-context":114}],252:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":115}],253:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":63,"./_string-at":113}],254:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":115}],255:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":40,"./_to-iobject":124,"./_to-length":125}],256:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":40,"./_string-repeat":117}],257:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":115}],258:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":40,"./_fails-is-regexp":41,"./_string-context":114,"./_to-length":125}],259:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":115}],260:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":115}],261:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":115}],262:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":118}],263:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":14,"./_descriptors":36,"./_enum-keys":39,"./_export":40,"./_fails":42,"./_global":48,"./_has":49,"./_hide":50,"./_is-array":57,"./_is-object":59,"./_library":67,"./_meta":73,"./_object-create":78,"./_object-dp":79,"./_object-gopd":82,"./_object-gopn":84,"./_object-gopn-ext":83,"./_object-gops":85,"./_object-keys":88,"./_object-pie":89,"./_property-desc":97,"./_redefine":99,"./_set-to-string-tag":108,"./_shared":110,"./_to-iobject":124,"./_to-object":126,"./_to-primitive":127,"./_uid":131,"./_wks":136,"./_wks-define":134,"./_wks-ext":135}],264:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":14,"./_export":40,"./_fails":42,"./_global":48,"./_is-object":59,"./_set-species":107,"./_species-constructor":111,"./_to-absolute-index":121,"./_to-length":125,"./_typed":130,"./_typed-buffer":129}],265:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":40,"./_typed":130,"./_typed-buffer":129}],266:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],267:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],268:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],269:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],270:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],271:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],272:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],273:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":128}],274:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":128}],275:[function(require,module,exports){
'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":19,"./_collection":29,"./_collection-weak":28,"./_global":48,"./_is-object":59,"./_meta":73,"./_object-assign":77,"./_redefine":99,"./_validate-collection":133}],276:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":29,"./_collection-weak":28,"./_validate-collection":133}],277:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":9,"./_add-to-unscopables":11,"./_array-species-create":22,"./_export":40,"./_flatten-into-array":45,"./_to-length":125,"./_to-object":126}],278:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

require('./_add-to-unscopables')('flatten');

},{"./_add-to-unscopables":11,"./_array-species-create":22,"./_export":40,"./_flatten-into-array":45,"./_to-integer":123,"./_to-length":125,"./_to-object":126}],279:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":11,"./_array-includes":18,"./_export":40}],280:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"./_cof":25,"./_export":40,"./_global":48,"./_microtask":75}],281:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

},{"./_cof":25,"./_export":40}],282:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":40,"./_global":48}],283:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":104}],284:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":105}],285:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_collection-to-json":27,"./_export":40}],286:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

},{"./_export":40}],287:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

},{"./_export":40}],288:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

},{"./_export":40}],289:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

},{"./_export":40,"./_math-fround":69,"./_math-scale":71}],290:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

},{"./_export":40}],291:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

},{"./_export":40}],292:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

},{"./_export":40}],293:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

},{"./_export":40}],294:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

},{"./_export":40}],295:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { scale: require('./_math-scale') });

},{"./_export":40,"./_math-scale":71}],296:[function(require,module,exports){
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });

},{"./_export":40}],297:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

},{"./_export":40}],298:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":9,"./_descriptors":36,"./_export":40,"./_object-dp":79,"./_object-forced-pam":81,"./_to-object":126}],299:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":9,"./_descriptors":36,"./_export":40,"./_object-dp":79,"./_object-forced-pam":81,"./_to-object":126}],300:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":40,"./_object-to-array":91}],301:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":31,"./_export":40,"./_object-gopd":82,"./_own-keys":92,"./_to-iobject":124}],302:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":36,"./_export":40,"./_object-forced-pam":81,"./_object-gopd":82,"./_object-gpo":86,"./_to-object":126,"./_to-primitive":127}],303:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":36,"./_export":40,"./_object-forced-pam":81,"./_object-gopd":82,"./_object-gpo":86,"./_to-object":126,"./_to-primitive":127}],304:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":40,"./_object-to-array":91}],305:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

require('./_set-species')('Observable');

},{"./_a-function":9,"./_an-instance":13,"./_an-object":14,"./_core":30,"./_export":40,"./_for-of":46,"./_global":48,"./_hide":50,"./_microtask":75,"./_redefine-all":98,"./_set-species":107,"./_wks":136}],306:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":30,"./_export":40,"./_global":48,"./_promise-resolve":96,"./_species-constructor":111}],307:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":40,"./_new-promise-capability":76,"./_perform":95}],308:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });

},{"./_an-object":14,"./_metadata":74}],309:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });

},{"./_an-object":14,"./_metadata":74}],310:[function(require,module,exports){
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":14,"./_array-from-iterable":17,"./_metadata":74,"./_object-gpo":86,"./es6.set":240}],311:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":14,"./_metadata":74,"./_object-gpo":86}],312:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":14,"./_metadata":74}],313:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":14,"./_metadata":74}],314:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":14,"./_metadata":74,"./_object-gpo":86}],315:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":14,"./_metadata":74}],316:[function(require,module,exports){
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });

},{"./_a-function":9,"./_an-object":14,"./_metadata":74}],317:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":104}],318:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":105}],319:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_collection-to-json":27,"./_export":40}],320:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export');
var $at = require('./_string-at')(true);
var $fails = require('./_fails');

var FORCED = $fails(function () {
  return '𠮷'.at(0) !== '𠮷';
});

$export($export.P + $export.F * FORCED, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

},{"./_export":40,"./_fails":42,"./_string-at":113}],321:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

},{"./_defined":35,"./_export":40,"./_flags":44,"./_is-regexp":60,"./_iter-create":62,"./_to-length":125}],322:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":40,"./_string-pad":116,"./_user-agent":132}],323:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":40,"./_string-pad":116,"./_user-agent":132}],324:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":118}],325:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":118}],326:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":134}],327:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":134}],328:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.S, 'System', { global: require('./_global') });

},{"./_export":40,"./_global":48}],329:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":104}],330:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":105}],331:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":104}],332:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":105}],333:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":48,"./_hide":50,"./_iterators":66,"./_object-keys":88,"./_redefine":99,"./_wks":136,"./es6.array.iterator":149}],334:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":40,"./_task":120}],335:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":40,"./_global":48,"./_user-agent":132}],336:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.exec');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/_core":30,"./modules/es6.array.copy-within":139,"./modules/es6.array.every":140,"./modules/es6.array.fill":141,"./modules/es6.array.filter":142,"./modules/es6.array.find":144,"./modules/es6.array.find-index":143,"./modules/es6.array.for-each":145,"./modules/es6.array.from":146,"./modules/es6.array.index-of":147,"./modules/es6.array.is-array":148,"./modules/es6.array.iterator":149,"./modules/es6.array.join":150,"./modules/es6.array.last-index-of":151,"./modules/es6.array.map":152,"./modules/es6.array.of":153,"./modules/es6.array.reduce":155,"./modules/es6.array.reduce-right":154,"./modules/es6.array.slice":156,"./modules/es6.array.some":157,"./modules/es6.array.sort":158,"./modules/es6.array.species":159,"./modules/es6.date.now":160,"./modules/es6.date.to-iso-string":161,"./modules/es6.date.to-json":162,"./modules/es6.date.to-primitive":163,"./modules/es6.date.to-string":164,"./modules/es6.function.bind":165,"./modules/es6.function.has-instance":166,"./modules/es6.function.name":167,"./modules/es6.map":168,"./modules/es6.math.acosh":169,"./modules/es6.math.asinh":170,"./modules/es6.math.atanh":171,"./modules/es6.math.cbrt":172,"./modules/es6.math.clz32":173,"./modules/es6.math.cosh":174,"./modules/es6.math.expm1":175,"./modules/es6.math.fround":176,"./modules/es6.math.hypot":177,"./modules/es6.math.imul":178,"./modules/es6.math.log10":179,"./modules/es6.math.log1p":180,"./modules/es6.math.log2":181,"./modules/es6.math.sign":182,"./modules/es6.math.sinh":183,"./modules/es6.math.tanh":184,"./modules/es6.math.trunc":185,"./modules/es6.number.constructor":186,"./modules/es6.number.epsilon":187,"./modules/es6.number.is-finite":188,"./modules/es6.number.is-integer":189,"./modules/es6.number.is-nan":190,"./modules/es6.number.is-safe-integer":191,"./modules/es6.number.max-safe-integer":192,"./modules/es6.number.min-safe-integer":193,"./modules/es6.number.parse-float":194,"./modules/es6.number.parse-int":195,"./modules/es6.number.to-fixed":196,"./modules/es6.number.to-precision":197,"./modules/es6.object.assign":198,"./modules/es6.object.create":199,"./modules/es6.object.define-properties":200,"./modules/es6.object.define-property":201,"./modules/es6.object.freeze":202,"./modules/es6.object.get-own-property-descriptor":203,"./modules/es6.object.get-own-property-names":204,"./modules/es6.object.get-prototype-of":205,"./modules/es6.object.is":209,"./modules/es6.object.is-extensible":206,"./modules/es6.object.is-frozen":207,"./modules/es6.object.is-sealed":208,"./modules/es6.object.keys":210,"./modules/es6.object.prevent-extensions":211,"./modules/es6.object.seal":212,"./modules/es6.object.set-prototype-of":213,"./modules/es6.object.to-string":214,"./modules/es6.parse-float":215,"./modules/es6.parse-int":216,"./modules/es6.promise":217,"./modules/es6.reflect.apply":218,"./modules/es6.reflect.construct":219,"./modules/es6.reflect.define-property":220,"./modules/es6.reflect.delete-property":221,"./modules/es6.reflect.enumerate":222,"./modules/es6.reflect.get":225,"./modules/es6.reflect.get-own-property-descriptor":223,"./modules/es6.reflect.get-prototype-of":224,"./modules/es6.reflect.has":226,"./modules/es6.reflect.is-extensible":227,"./modules/es6.reflect.own-keys":228,"./modules/es6.reflect.prevent-extensions":229,"./modules/es6.reflect.set":231,"./modules/es6.reflect.set-prototype-of":230,"./modules/es6.regexp.constructor":232,"./modules/es6.regexp.exec":233,"./modules/es6.regexp.flags":234,"./modules/es6.regexp.match":235,"./modules/es6.regexp.replace":236,"./modules/es6.regexp.search":237,"./modules/es6.regexp.split":238,"./modules/es6.regexp.to-string":239,"./modules/es6.set":240,"./modules/es6.string.anchor":241,"./modules/es6.string.big":242,"./modules/es6.string.blink":243,"./modules/es6.string.bold":244,"./modules/es6.string.code-point-at":245,"./modules/es6.string.ends-with":246,"./modules/es6.string.fixed":247,"./modules/es6.string.fontcolor":248,"./modules/es6.string.fontsize":249,"./modules/es6.string.from-code-point":250,"./modules/es6.string.includes":251,"./modules/es6.string.italics":252,"./modules/es6.string.iterator":253,"./modules/es6.string.link":254,"./modules/es6.string.raw":255,"./modules/es6.string.repeat":256,"./modules/es6.string.small":257,"./modules/es6.string.starts-with":258,"./modules/es6.string.strike":259,"./modules/es6.string.sub":260,"./modules/es6.string.sup":261,"./modules/es6.string.trim":262,"./modules/es6.symbol":263,"./modules/es6.typed.array-buffer":264,"./modules/es6.typed.data-view":265,"./modules/es6.typed.float32-array":266,"./modules/es6.typed.float64-array":267,"./modules/es6.typed.int16-array":268,"./modules/es6.typed.int32-array":269,"./modules/es6.typed.int8-array":270,"./modules/es6.typed.uint16-array":271,"./modules/es6.typed.uint32-array":272,"./modules/es6.typed.uint8-array":273,"./modules/es6.typed.uint8-clamped-array":274,"./modules/es6.weak-map":275,"./modules/es6.weak-set":276,"./modules/es7.array.flat-map":277,"./modules/es7.array.flatten":278,"./modules/es7.array.includes":279,"./modules/es7.asap":280,"./modules/es7.error.is-error":281,"./modules/es7.global":282,"./modules/es7.map.from":283,"./modules/es7.map.of":284,"./modules/es7.map.to-json":285,"./modules/es7.math.clamp":286,"./modules/es7.math.deg-per-rad":287,"./modules/es7.math.degrees":288,"./modules/es7.math.fscale":289,"./modules/es7.math.iaddh":290,"./modules/es7.math.imulh":291,"./modules/es7.math.isubh":292,"./modules/es7.math.rad-per-deg":293,"./modules/es7.math.radians":294,"./modules/es7.math.scale":295,"./modules/es7.math.signbit":296,"./modules/es7.math.umulh":297,"./modules/es7.object.define-getter":298,"./modules/es7.object.define-setter":299,"./modules/es7.object.entries":300,"./modules/es7.object.get-own-property-descriptors":301,"./modules/es7.object.lookup-getter":302,"./modules/es7.object.lookup-setter":303,"./modules/es7.object.values":304,"./modules/es7.observable":305,"./modules/es7.promise.finally":306,"./modules/es7.promise.try":307,"./modules/es7.reflect.define-metadata":308,"./modules/es7.reflect.delete-metadata":309,"./modules/es7.reflect.get-metadata":311,"./modules/es7.reflect.get-metadata-keys":310,"./modules/es7.reflect.get-own-metadata":313,"./modules/es7.reflect.get-own-metadata-keys":312,"./modules/es7.reflect.has-metadata":314,"./modules/es7.reflect.has-own-metadata":315,"./modules/es7.reflect.metadata":316,"./modules/es7.set.from":317,"./modules/es7.set.of":318,"./modules/es7.set.to-json":319,"./modules/es7.string.at":320,"./modules/es7.string.match-all":321,"./modules/es7.string.pad-end":322,"./modules/es7.string.pad-start":323,"./modules/es7.string.trim-left":324,"./modules/es7.string.trim-right":325,"./modules/es7.symbol.async-iterator":326,"./modules/es7.symbol.observable":327,"./modules/es7.system.global":328,"./modules/es7.weak-map.from":329,"./modules/es7.weak-map.of":330,"./modules/es7.weak-set.from":331,"./modules/es7.weak-set.of":332,"./modules/web.dom.iterable":333,"./modules/web.immediate":334,"./modules/web.timers":335}],337:[function(require,module,exports){
module.exports.structure = require('./src/structure');

},{"./src/structure":341}],338:[function(require,module,exports){
var fieldSize = require('./fieldsize');

var types = {
    string: 'C',
    number: 'N',
    boolean: 'L',
    // type to use if all values of a field are null
    null: 'C'
};

module.exports.multi = multi;
module.exports.bytesPer = bytesPer;
module.exports.obj = obj;

function multi(features) {
    var fields = {};
    features.forEach(collect);
    function collect(f) { inherit(fields, f); }
    return obj(fields);
}

/**
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */
function inherit(a, b) {
    for (var i in b) {
        var isDef = typeof b[i] !== 'undefined' && b[i] !== null;
        if (typeof a[i] === 'undefined' || isDef) {
          a[i] = b[i];
        }
    }
    return a;
}

function obj(_) {
    var fields = {}, o = [];
    for (var p in _) fields[p] = _[p] === null ? 'null' : typeof _[p];
    for (var n in fields) {
        var t = types[fields[n]];
        if(t){
             o.push({
                name: n,
                type: t,
                size: fieldSize[t]
            });
        }
    }
    return o;
}

/**
 * @param {Array} fields
 * @returns {Array}
 */
function bytesPer(fields) {
    // deleted flag
    return fields.reduce(function(memo, f) { return memo + f.size; }, 1);
}

},{"./fieldsize":339}],339:[function(require,module,exports){
module.exports = {
    // string
    C: 254,
    // boolean
    L: 1,
    // date
    D: 8,
    // number
    N: 18,
    // number
    M: 18,
    // number, float
    F: 18,
    // number
    B: 8,
};

},{}],340:[function(require,module,exports){
/**
 * @param {string} str
 * @param {number} len
 * @param {string} char
 * @returns {string}
 */
module.exports.lpad = function lpad(str, len, char) {
    while (str.length < len) { str = char + str; } return str;
};

/**
 * @param {string} str
 * @param {number} len
 * @param {string} char
 * @returns {string}
 */
module.exports.rpad = function rpad(str, len, char) {
    while (str.length < len) { str = str + char; } return str;
};

/**
 * @param {object} view
 * @param {number} fieldLength
 * @param {string} str
 * @param {number} offset
 * @returns {number}
 */
module.exports.writeField = function writeField(view, fieldLength, str, offset) {
    for (var i = 0; i < fieldLength; i++) {
        view.setUint8(offset, str.charCodeAt(i)); offset++;
    }
    return offset;
};

},{}],341:[function(require,module,exports){
var fieldSize = require('./fieldsize'),
    lib = require('./lib'),
    fields = require('./fields');

/**
 * @param {Array} data
 * @param {Array} meta
 * @returns {Object} view
 */
module.exports = function structure(data, meta) {

    var field_meta = meta || fields.multi(data),
        fieldDescLength = (32 * field_meta.length) + 1,
        bytesPerRecord = fields.bytesPer(field_meta), // deleted flag
        buffer = new ArrayBuffer(
            // field header
            fieldDescLength +
            // header
            32 +
            // contents
            (bytesPerRecord * data.length) +
            // EOF marker
            1
    ),
        now = new Date(),
        view = new DataView(buffer);

    // version number - dBase III
    view.setUint8(0, 0x03);
    // date of last update
    view.setUint8(1, now.getFullYear() - 1900);
    view.setUint8(2, now.getMonth());
    view.setUint8(3, now.getDate());
    // number of records
    view.setUint32(4, data.length, true);

    // length of header
    var headerLength = fieldDescLength + 32;
    view.setUint16(8, headerLength, true);
    // length of each record
    view.setUint16(10, bytesPerRecord, true);

    // Terminator
    view.setInt8(32 + fieldDescLength - 1, 0x0D);

    field_meta.forEach(function(f, i) {
        // field name
        f.name.split('').slice(0, 8).forEach(function(c, x) {
            view.setInt8(32 + i * 32 + x, c.charCodeAt(0));
        });
        // field type
        view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));
        // field length
        view.setInt8(32 + i * 32 + 16, f.size);
        if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 3);
    });

    offset = fieldDescLength + 32;

    data.forEach(function(row, num) {
        // delete flag: this is not deleted
        view.setUint8(offset, 32);
        offset++;
        field_meta.forEach(function(f) {
            var val = row[f.name];
            if (val === null || typeof val === 'undefined') val = '';

            switch (f.type) {
                // boolean
                case 'L':
                    view.setUint8(offset, val ? 84 : 70);
                    offset++;
                    break;

                // date
                case 'D':
                    offset = lib.writeField(view, 8,
                        lib.lpad(val.toString(), 8, ' '), offset);
                    break;

                // number
                case 'N':
                    offset = lib.writeField(view, f.size,
                        lib.lpad(val.toString(), f.size, ' ').substr(0, 18),
                        offset);
                    break;

                // string
                case 'C':
                    offset = lib.writeField(view, f.size,
                        lib.rpad(val.toString(), f.size, ' '), offset);
                    break;

                default:
                    throw new Error('Unknown field type');
            }
        });
    });

    // EOF flag
    view.setUint8(offset, 0x1A);

    return view;
};

},{"./fields":338,"./fieldsize":339,"./lib":340}],342:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],343:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],344:[function(require,module,exports){
'use strict';
// private property
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


// public method for encoding
exports.encode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    while (i < input.length) {

        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        }
        else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

    }

    return output;
};

// public method for decoding
exports.decode = function(input, utf8) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }

    }

    return output;

};

},{}],345:[function(require,module,exports){
'use strict';
function CompressedObject() {
    this.compressedSize = 0;
    this.uncompressedSize = 0;
    this.crc32 = 0;
    this.compressionMethod = null;
    this.compressedContent = null;
}

CompressedObject.prototype = {
    /**
     * Return the decompressed content in an unspecified format.
     * The format will depend on the decompressor.
     * @return {Object} the decompressed content.
     */
    getContent: function() {
        return null; // see implementation
    },
    /**
     * Return the compressed content in an unspecified format.
     * The format will depend on the compressed conten source.
     * @return {Object} the compressed content.
     */
    getCompressedContent: function() {
        return null; // see implementation
    }
};
module.exports = CompressedObject;

},{}],346:[function(require,module,exports){
'use strict';
exports.STORE = {
    magic: "\x00\x00",
    compress: function(content, compressionOptions) {
        return content; // no compression
    },
    uncompress: function(content) {
        return content; // no compression
    },
    compressInputType: null,
    uncompressInputType: null
};
exports.DEFLATE = require('./flate');

},{"./flate":351}],347:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var table = [
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
];

/**
 *
 *  Javascript crc32
 *  http://www.webtoolkit.info/
 *
 */
module.exports = function crc32(input, crc) {
    if (typeof input === "undefined" || !input.length) {
        return 0;
    }

    var isArray = utils.getTypeOf(input) !== "string";

    if (typeof(crc) == "undefined") {
        crc = 0;
    }
    var x = 0;
    var y = 0;
    var b = 0;

    crc = crc ^ (-1);
    for (var i = 0, iTop = input.length; i < iTop; i++) {
        b = isArray ? input[i] : input.charCodeAt(i);
        y = (crc ^ b) & 0xFF;
        x = table[y];
        crc = (crc >>> 8) ^ x;
    }

    return crc ^ (-1);
};
// vim: set shiftwidth=4 softtabstop=4:

},{"./utils":364}],348:[function(require,module,exports){
'use strict';
var utils = require('./utils');

function DataReader(data) {
    this.data = null; // type : see implementation
    this.length = 0;
    this.index = 0;
}
DataReader.prototype = {
    /**
     * Check that the offset will not go too far.
     * @param {string} offset the additional offset to check.
     * @throws {Error} an Error if the offset is out of bounds.
     */
    checkOffset: function(offset) {
        this.checkIndex(this.index + offset);
    },
    /**
     * Check that the specifed index will not be too far.
     * @param {string} newIndex the index to check.
     * @throws {Error} an Error if the index is out of bounds.
     */
    checkIndex: function(newIndex) {
        if (this.length < newIndex || newIndex < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
        }
    },
    /**
     * Change the index.
     * @param {number} newIndex The new index.
     * @throws {Error} if the new index is out of the data.
     */
    setIndex: function(newIndex) {
        this.checkIndex(newIndex);
        this.index = newIndex;
    },
    /**
     * Skip the next n bytes.
     * @param {number} n the number of bytes to skip.
     * @throws {Error} if the new index is out of the data.
     */
    skip: function(n) {
        this.setIndex(this.index + n);
    },
    /**
     * Get the byte at the specified index.
     * @param {number} i the index to use.
     * @return {number} a byte.
     */
    byteAt: function(i) {
        // see implementations
    },
    /**
     * Get the next number with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {number} the corresponding number.
     */
    readInt: function(size) {
        var result = 0,
            i;
        this.checkOffset(size);
        for (i = this.index + size - 1; i >= this.index; i--) {
            result = (result << 8) + this.byteAt(i);
        }
        this.index += size;
        return result;
    },
    /**
     * Get the next string with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {string} the corresponding string.
     */
    readString: function(size) {
        return utils.transformTo("string", this.readData(size));
    },
    /**
     * Get raw data without conversion, <size> bytes.
     * @param {number} size the number of bytes to read.
     * @return {Object} the raw data, implementation specific.
     */
    readData: function(size) {
        // see implementations
    },
    /**
     * Find the last occurence of a zip signature (4 bytes).
     * @param {string} sig the signature to find.
     * @return {number} the index of the last occurence, -1 if not found.
     */
    lastIndexOfSignature: function(sig) {
        // see implementations
    },
    /**
     * Get the next date.
     * @return {Date} the date.
     */
    readDate: function() {
        var dostime = this.readInt(4);
        return new Date(
        ((dostime >> 25) & 0x7f) + 1980, // year
        ((dostime >> 21) & 0x0f) - 1, // month
        (dostime >> 16) & 0x1f, // day
        (dostime >> 11) & 0x1f, // hour
        (dostime >> 5) & 0x3f, // minute
        (dostime & 0x1f) << 1); // second
    }
};
module.exports = DataReader;

},{"./utils":364}],349:[function(require,module,exports){
'use strict';
exports.base64 = false;
exports.binary = false;
exports.dir = false;
exports.createFolders = false;
exports.date = null;
exports.compression = null;
exports.compressionOptions = null;
exports.comment = null;
exports.unixPermissions = null;
exports.dosPermissions = null;

},{}],350:[function(require,module,exports){
'use strict';
var utils = require('./utils');

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2binary = function(str) {
    return utils.string2binary(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Uint8Array = function(str) {
    return utils.transformTo("uint8array", str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.uint8Array2String = function(array) {
    return utils.transformTo("string", array);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.string2Blob = function(str) {
    var buffer = utils.transformTo("arraybuffer", str);
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.arrayBuffer2Blob = function(buffer) {
    return utils.arrayBuffer2Blob(buffer);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.transformTo = function(outputType, input) {
    return utils.transformTo(outputType, input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.getTypeOf = function(input) {
    return utils.getTypeOf(input);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.checkSupport = function(type) {
    return utils.checkSupport(type);
};

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;

/**
 * @deprecated
 * This value will be removed in a future version without replacement.
 */
exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;


/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.pretty = function(str) {
    return utils.pretty(str);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.findCompression = function(compressionMethod) {
    return utils.findCompression(compressionMethod);
};

/**
 * @deprecated
 * This function will be removed in a future version without replacement.
 */
exports.isRegExp = function (object) {
    return utils.isRegExp(object);
};


},{"./utils":364}],351:[function(require,module,exports){
'use strict';
var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

var pako = require("pako");
exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";

exports.magic = "\x08\x00";
exports.compress = function(input, compressionOptions) {
    return pako.deflateRaw(input, {
        level : compressionOptions.level || -1 // default compression
    });
};
exports.uncompress =  function(input) {
    return pako.inflateRaw(input);
};

},{"pako":368}],352:[function(require,module,exports){
'use strict';

var base64 = require('./base64');

/**
Usage:
   zip = new JSZip();
   zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
   zip.folder("images").file("smile.gif", base64Data, {base64: true});
   zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
   zip.remove("tempfile");

   base64zip = zip.generate();

**/

/**
 * Representation a of zip file in js
 * @constructor
 * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
 * @param {Object=} options the options for creating this objects (optional).
 */
function JSZip(data, options) {
    // if this constructor is used without `new`, it adds `new` before itself:
    if(!(this instanceof JSZip)) return new JSZip(data, options);

    // object containing the files :
    // {
    //   "folder/" : {...},
    //   "folder/data.txt" : {...}
    // }
    this.files = {};

    this.comment = null;

    // Where we are in the hierarchy
    this.root = "";
    if (data) {
        this.load(data, options);
    }
    this.clone = function() {
        var newObj = new JSZip();
        for (var i in this) {
            if (typeof this[i] !== "function") {
                newObj[i] = this[i];
            }
        }
        return newObj;
    };
}
JSZip.prototype = require('./object');
JSZip.prototype.load = require('./load');
JSZip.support = require('./support');
JSZip.defaults = require('./defaults');

/**
 * @deprecated
 * This namespace will be removed in a future version without replacement.
 */
JSZip.utils = require('./deprecatedPublicUtils');

JSZip.base64 = {
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    encode : function(input) {
        return base64.encode(input);
    },
    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    decode : function(input) {
        return base64.decode(input);
    }
};
JSZip.compressions = require('./compressions');
module.exports = JSZip;

},{"./base64":344,"./compressions":346,"./defaults":349,"./deprecatedPublicUtils":350,"./load":353,"./object":356,"./support":360}],353:[function(require,module,exports){
'use strict';
var base64 = require('./base64');
var ZipEntries = require('./zipEntries');
module.exports = function(data, options) {
    var files, zipEntries, i, input;
    options = options || {};
    if (options.base64) {
        data = base64.decode(data);
    }

    zipEntries = new ZipEntries(data, options);
    files = zipEntries.files;
    for (i = 0; i < files.length; i++) {
        input = files[i];
        this.file(input.fileName, input.decompressed, {
            binary: true,
            optimizedBinaryString: true,
            date: input.date,
            dir: input.dir,
            comment : input.fileComment.length ? input.fileComment : null,
            unixPermissions : input.unixPermissions,
            dosPermissions : input.dosPermissions,
            createFolders: options.createFolders
        });
    }
    if (zipEntries.zipComment.length) {
        this.comment = zipEntries.zipComment;
    }

    return this;
};

},{"./base64":344,"./zipEntries":365}],354:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
module.exports = function(data, encoding){
    return new Buffer(data, encoding);
};
module.exports.test = function(b){
    return Buffer.isBuffer(b);
};

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":7}],355:[function(require,module,exports){
'use strict';
var Uint8ArrayReader = require('./uint8ArrayReader');

function NodeBufferReader(data) {
    this.data = data;
    this.length = this.data.length;
    this.index = 0;
}
NodeBufferReader.prototype = new Uint8ArrayReader();

/**
 * @see DataReader.readData
 */
NodeBufferReader.prototype.readData = function(size) {
    this.checkOffset(size);
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = NodeBufferReader;

},{"./uint8ArrayReader":361}],356:[function(require,module,exports){
'use strict';
var support = require('./support');
var utils = require('./utils');
var crc32 = require('./crc32');
var signature = require('./signature');
var defaults = require('./defaults');
var base64 = require('./base64');
var compressions = require('./compressions');
var CompressedObject = require('./compressedObject');
var nodeBuffer = require('./nodeBuffer');
var utf8 = require('./utf8');
var StringWriter = require('./stringWriter');
var Uint8ArrayWriter = require('./uint8ArrayWriter');

/**
 * Returns the raw data of a ZipObject, decompress the content if necessary.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getRawData = function(file) {
    if (file._data instanceof CompressedObject) {
        file._data = file._data.getContent();
        file.options.binary = true;
        file.options.base64 = false;

        if (utils.getTypeOf(file._data) === "uint8array") {
            var copy = file._data;
            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
            file._data = new Uint8Array(copy.length);
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            if (copy.length !== 0) {
                file._data.set(copy, 0);
            }
        }
    }
    return file._data;
};

/**
 * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
 * @param {ZipObject} file the file to use.
 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
 */
var getBinaryData = function(file) {
    var result = getRawData(file),
        type = utils.getTypeOf(result);
    if (type === "string") {
        if (!file.options.binary) {
            // unicode text !
            // unicode string => binary string is a painful process, check if we can avoid it.
            if (support.nodebuffer) {
                return nodeBuffer(result, "utf-8");
            }
        }
        return file.asBinary();
    }
    return result;
};

/**
 * Transform this._data into a string.
 * @param {function} filter a function String -> String, applied if not null on the result.
 * @return {String} the string representing this._data.
 */
var dataToString = function(asUTF8) {
    var result = getRawData(this);
    if (result === null || typeof result === "undefined") {
        return "";
    }
    // if the data is a base64 string, we decode it before checking the encoding !
    if (this.options.base64) {
        result = base64.decode(result);
    }
    if (asUTF8 && this.options.binary) {
        // JSZip.prototype.utf8decode supports arrays as input
        // skip to array => string step, utf8decode will do it.
        result = out.utf8decode(result);
    }
    else {
        // no utf8 transformation, do the array => string step.
        result = utils.transformTo("string", result);
    }

    if (!asUTF8 && !this.options.binary) {
        result = utils.transformTo("string", out.utf8encode(result));
    }
    return result;
};
/**
 * A simple object representing a file in the zip file.
 * @constructor
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
 * @param {Object} options the options of the file
 */
var ZipObject = function(name, data, options) {
    this.name = name;
    this.dir = options.dir;
    this.date = options.date;
    this.comment = options.comment;
    this.unixPermissions = options.unixPermissions;
    this.dosPermissions = options.dosPermissions;

    this._data = data;
    this.options = options;

    /*
     * This object contains initial values for dir and date.
     * With them, we can check if the user changed the deprecated metadata in
     * `ZipObject#options` or not.
     */
    this._initialMetadata = {
      dir : options.dir,
      date : options.date
    };
};

ZipObject.prototype = {
    /**
     * Return the content as UTF8 string.
     * @return {string} the UTF8 string.
     */
    asText: function() {
        return dataToString.call(this, true);
    },
    /**
     * Returns the binary content.
     * @return {string} the content as binary.
     */
    asBinary: function() {
        return dataToString.call(this, false);
    },
    /**
     * Returns the content as a nodejs Buffer.
     * @return {Buffer} the content as a Buffer.
     */
    asNodeBuffer: function() {
        var result = getBinaryData(this);
        return utils.transformTo("nodebuffer", result);
    },
    /**
     * Returns the content as an Uint8Array.
     * @return {Uint8Array} the content as an Uint8Array.
     */
    asUint8Array: function() {
        var result = getBinaryData(this);
        return utils.transformTo("uint8array", result);
    },
    /**
     * Returns the content as an ArrayBuffer.
     * @return {ArrayBuffer} the content as an ArrayBufer.
     */
    asArrayBuffer: function() {
        return this.asUint8Array().buffer;
    }
};

/**
 * Transform an integer into a string in hexadecimal.
 * @private
 * @param {number} dec the number to convert.
 * @param {number} bytes the number of bytes to generate.
 * @returns {string} the result.
 */
var decToHex = function(dec, bytes) {
    var hex = "",
        i;
    for (i = 0; i < bytes; i++) {
        hex += String.fromCharCode(dec & 0xff);
        dec = dec >>> 8;
    }
    return hex;
};

/**
 * Merge the objects passed as parameters into a new one.
 * @private
 * @param {...Object} var_args All objects to merge.
 * @return {Object} a new object with the data of the others.
 */
var extend = function() {
    var result = {}, i, attr;
    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
        for (attr in arguments[i]) {
            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                result[attr] = arguments[i][attr];
            }
        }
    }
    return result;
};

/**
 * Transforms the (incomplete) options from the user into the complete
 * set of options to create a file.
 * @private
 * @param {Object} o the options from the user.
 * @return {Object} the complete set of options.
 */
var prepareFileAttrs = function(o) {
    o = o || {};
    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
        o.binary = true;
    }
    o = extend(o, defaults);
    o.date = o.date || new Date();
    if (o.compression !== null) o.compression = o.compression.toUpperCase();

    return o;
};

/**
 * Add a file in the current folder.
 * @private
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
 * @param {Object} o the options of the file
 * @return {Object} the new file.
 */
var fileAdd = function(name, data, o) {
    // be sure sub folders exist
    var dataType = utils.getTypeOf(data),
        parent;

    o = prepareFileAttrs(o);

    if (typeof o.unixPermissions === "string") {
        o.unixPermissions = parseInt(o.unixPermissions, 8);
    }

    // UNX_IFDIR  0040000 see zipinfo.c
    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {
        o.dir = true;
    }
    // Bit 4    Directory
    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {
        o.dir = true;
    }

    if (o.dir) {
        name = forceTrailingSlash(name);
    }

    if (o.createFolders && (parent = parentFolder(name))) {
        folderAdd.call(this, parent, true);
    }

    if (o.dir || data === null || typeof data === "undefined") {
        o.base64 = false;
        o.binary = false;
        data = null;
        dataType = null;
    }
    else if (dataType === "string") {
        if (o.binary && !o.base64) {
            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
            if (o.optimizedBinaryString !== true) {
                // this is a string, not in a base64 format.
                // Be sure that this is a correct "binary string"
                data = utils.string2binary(data);
            }
        }
    }
    else { // arraybuffer, uint8array, ...
        o.base64 = false;
        o.binary = true;

        if (!dataType && !(data instanceof CompressedObject)) {
            throw new Error("The data of '" + name + "' is in an unsupported format !");
        }

        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
        if (dataType === "arraybuffer") {
            data = utils.transformTo("uint8array", data);
        }
    }

    var object = new ZipObject(name, data, o);
    this.files[name] = object;
    return object;
};

/**
 * Find the parent folder of the path.
 * @private
 * @param {string} path the path to use
 * @return {string} the parent folder, or ""
 */
var parentFolder = function (path) {
    if (path.slice(-1) == '/') {
        path = path.substring(0, path.length - 1);
    }
    var lastSlash = path.lastIndexOf('/');
    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
};


/**
 * Returns the path with a slash at the end.
 * @private
 * @param {String} path the path to check.
 * @return {String} the path with a trailing slash.
 */
var forceTrailingSlash = function(path) {
    // Check the name ends with a /
    if (path.slice(-1) != "/") {
        path += "/"; // IE doesn't like substr(-1)
    }
    return path;
};
/**
 * Add a (sub) folder in the current folder.
 * @private
 * @param {string} name the folder's name
 * @param {boolean=} [createFolders] If true, automatically create sub
 *  folders. Defaults to false.
 * @return {Object} the new folder.
 */
var folderAdd = function(name, createFolders) {
    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;

    name = forceTrailingSlash(name);

    // Does this folder already exist?
    if (!this.files[name]) {
        fileAdd.call(this, name, null, {
            dir: true,
            createFolders: createFolders
        });
    }
    return this.files[name];
};

/**
 * Generate a JSZip.CompressedObject for a given zipOject.
 * @param {ZipObject} file the object to read.
 * @param {JSZip.compression} compression the compression to use.
 * @param {Object} compressionOptions the options to use when compressing.
 * @return {JSZip.CompressedObject} the compressed result.
 */
var generateCompressedObjectFrom = function(file, compression, compressionOptions) {
    var result = new CompressedObject(),
        content;

    // the data has not been decompressed, we might reuse things !
    if (file._data instanceof CompressedObject) {
        result.uncompressedSize = file._data.uncompressedSize;
        result.crc32 = file._data.crc32;

        if (result.uncompressedSize === 0 || file.dir) {
            compression = compressions['STORE'];
            result.compressedContent = "";
            result.crc32 = 0;
        }
        else if (file._data.compressionMethod === compression.magic) {
            result.compressedContent = file._data.getCompressedContent();
        }
        else {
            content = file._data.getContent();
            // need to decompress / recompress
            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
        }
    }
    else {
        // have uncompressed data
        content = getBinaryData(file);
        if (!content || content.length === 0 || file.dir) {
            compression = compressions['STORE'];
            content = "";
        }
        result.uncompressedSize = content.length;
        result.crc32 = crc32(content);
        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);
    }

    result.compressedSize = result.compressedContent.length;
    result.compressionMethod = compression.magic;

    return result;
};




/**
 * Generate the UNIX part of the external file attributes.
 * @param {Object} unixPermissions the unix permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :
 *
 * TTTTsstrwxrwxrwx0000000000ADVSHR
 * ^^^^____________________________ file type, see zipinfo.c (UNX_*)
 *     ^^^_________________________ setuid, setgid, sticky
 *        ^^^^^^^^^________________ permissions
 *                 ^^^^^^^^^^______ not used ?
 *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only
 */
var generateUnixExternalFileAttr = function (unixPermissions, isDir) {

    var result = unixPermissions;
    if (!unixPermissions) {
        // I can't use octal values in strict mode, hence the hexa.
        //  040775 => 0x41fd
        // 0100664 => 0x81b4
        result = isDir ? 0x41fd : 0x81b4;
    }

    return (result & 0xFFFF) << 16;
};

/**
 * Generate the DOS part of the external file attributes.
 * @param {Object} dosPermissions the dos permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * Bit 0     Read-Only
 * Bit 1     Hidden
 * Bit 2     System
 * Bit 3     Volume Label
 * Bit 4     Directory
 * Bit 5     Archive
 */
var generateDosExternalFileAttr = function (dosPermissions, isDir) {

    // the dir flag is already set for compatibility

    return (dosPermissions || 0)  & 0x3F;
};

/**
 * Generate the various parts used in the construction of the final zip file.
 * @param {string} name the file name.
 * @param {ZipObject} file the file content.
 * @param {JSZip.CompressedObject} compressedObject the compressed object.
 * @param {number} offset the current offset from the start of the zip file.
 * @param {String} platform let's pretend we are this platform (change platform dependents fields)
 * @return {object} the zip parts.
 */
var generateZipParts = function(name, file, compressedObject, offset, platform) {
    var data = compressedObject.compressedContent,
        utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
        comment = file.comment || "",
        utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
        useUTF8ForComment = utfEncodedComment.length !== comment.length,
        o = file.options,
        dosTime,
        dosDate,
        extraFields = "",
        unicodePathExtraField = "",
        unicodeCommentExtraField = "",
        dir, date;


    // handle the deprecated options.dir
    if (file._initialMetadata.dir !== file.dir) {
        dir = file.dir;
    } else {
        dir = o.dir;
    }

    // handle the deprecated options.date
    if(file._initialMetadata.date !== file.date) {
        date = file.date;
    } else {
        date = o.date;
    }

    var extFileAttr = 0;
    var versionMadeBy = 0;
    if (dir) {
        // dos or unix, we set the dos dir flag
        extFileAttr |= 0x00010;
    }
    if(platform === "UNIX") {
        versionMadeBy = 0x031E; // UNIX, version 3.0
        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
    } else { // DOS or other, fallback to DOS
        versionMadeBy = 0x0014; // DOS, version 2.0
        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
    }

    // date
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html

    dosTime = date.getHours();
    dosTime = dosTime << 6;
    dosTime = dosTime | date.getMinutes();
    dosTime = dosTime << 5;
    dosTime = dosTime | date.getSeconds() / 2;

    dosDate = date.getFullYear() - 1980;
    dosDate = dosDate << 4;
    dosDate = dosDate | (date.getMonth() + 1);
    dosDate = dosDate << 5;
    dosDate = dosDate | date.getDate();

    if (useUTF8ForFileName) {
        // set the unicode path extra field. unzip needs at least one extra
        // field to correctly handle unicode path, so using the path is as good
        // as any other information. This could improve the situation with
        // other archive managers too.
        // This field is usually used without the utf8 flag, with a non
        // unicode path in the header (winrar, winzip). This helps (a bit)
        // with the messy Windows' default compressed folders feature but
        // breaks on p7zip which doesn't seek the unicode path extra field.
        // So for now, UTF-8 everywhere !
        unicodePathExtraField =
            // Version
            decToHex(1, 1) +
            // NameCRC32
            decToHex(crc32(utfEncodedFileName), 4) +
            // UnicodeName
            utfEncodedFileName;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x70" +
            // size
            decToHex(unicodePathExtraField.length, 2) +
            // content
            unicodePathExtraField;
    }

    if(useUTF8ForComment) {

        unicodeCommentExtraField =
            // Version
            decToHex(1, 1) +
            // CommentCRC32
            decToHex(this.crc32(utfEncodedComment), 4) +
            // UnicodeName
            utfEncodedComment;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x63" +
            // size
            decToHex(unicodeCommentExtraField.length, 2) +
            // content
            unicodeCommentExtraField;
    }

    var header = "";

    // version needed to extract
    header += "\x0A\x00";
    // general purpose bit flag
    // set bit 11 if utf8
    header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
    // compression method
    header += compressedObject.compressionMethod;
    // last mod file time
    header += decToHex(dosTime, 2);
    // last mod file date
    header += decToHex(dosDate, 2);
    // crc-32
    header += decToHex(compressedObject.crc32, 4);
    // compressed size
    header += decToHex(compressedObject.compressedSize, 4);
    // uncompressed size
    header += decToHex(compressedObject.uncompressedSize, 4);
    // file name length
    header += decToHex(utfEncodedFileName.length, 2);
    // extra field length
    header += decToHex(extraFields.length, 2);


    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;

    var dirRecord = signature.CENTRAL_FILE_HEADER +
    // version made by (00: DOS)
    decToHex(versionMadeBy, 2) +
    // file header (common to file and central directory)
    header +
    // file comment length
    decToHex(utfEncodedComment.length, 2) +
    // disk number start
    "\x00\x00" +
    // internal file attributes TODO
    "\x00\x00" +
    // external file attributes
    decToHex(extFileAttr, 4) +
    // relative offset of local header
    decToHex(offset, 4) +
    // file name
    utfEncodedFileName +
    // extra field
    extraFields +
    // file comment
    utfEncodedComment;

    return {
        fileRecord: fileRecord,
        dirRecord: dirRecord,
        compressedObject: compressedObject
    };
};


// return the actual prototype of JSZip
var out = {
    /**
     * Read an existing zip and merge the data in the current JSZip object.
     * The implementation is in jszip-load.js, don't forget to include it.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
     * @param {Object} options Options for loading the stream.
     *  options.base64 : is the stream in base64 ? default : false
     * @return {JSZip} the current JSZip object
     */
    load: function(stream, options) {
        throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
    },

    /**
     * Filter nested files/folders with the specified function.
     * @param {Function} search the predicate to use :
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     * @return {Array} An array of matching elements.
     */
    filter: function(search) {
        var result = [],
            filename, relativePath, file, fileClone;
        for (filename in this.files) {
            if (!this.files.hasOwnProperty(filename)) {
                continue;
            }
            file = this.files[filename];
            // return a new object, don't let the user mess with our internal objects :)
            fileClone = new ZipObject(file.name, file._data, extend(file.options));
            relativePath = filename.slice(this.root.length, filename.length);
            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
            search(relativePath, fileClone)) { // and the file matches the function
                result.push(fileClone);
            }
        }
        return result;
    },

    /**
     * Add a file to the zip file, or search a file.
     * @param   {string|RegExp} name The name of the file to add (if data is defined),
     * the name of the file to find (if no data) or a regex to match files.
     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
     * @param   {Object} o     File options
     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
     * a file (when searching by string) or an array of files (when searching by regex).
     */
    file: function(name, data, o) {
        if (arguments.length === 1) {
            if (utils.isRegExp(name)) {
                var regexp = name;
                return this.filter(function(relativePath, file) {
                    return !file.dir && regexp.test(relativePath);
                });
            }
            else { // text
                return this.filter(function(relativePath, file) {
                    return !file.dir && relativePath === name;
                })[0] || null;
            }
        }
        else { // more than one argument : we have data !
            name = this.root + name;
            fileAdd.call(this, name, data, o);
        }
        return this;
    },

    /**
     * Add a directory to the zip file, or search.
     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
     */
    folder: function(arg) {
        if (!arg) {
            return this;
        }

        if (utils.isRegExp(arg)) {
            return this.filter(function(relativePath, file) {
                return file.dir && arg.test(relativePath);
            });
        }

        // else, name is a new folder
        var name = this.root + arg;
        var newFolder = folderAdd.call(this, name);

        // Allow chaining by returning a new object with this folder as the root
        var ret = this.clone();
        ret.root = newFolder.name;
        return ret;
    },

    /**
     * Delete a file, or a directory and all sub-files, from the zip
     * @param {string} name the name of the file to delete
     * @return {JSZip} this JSZip object
     */
    remove: function(name) {
        name = this.root + name;
        var file = this.files[name];
        if (!file) {
            // Look for any folders
            if (name.slice(-1) != "/") {
                name += "/";
            }
            file = this.files[name];
        }

        if (file && !file.dir) {
            // file
            delete this.files[name];
        } else {
            // maybe a folder, delete recursively
            var kids = this.filter(function(relativePath, file) {
                return file.name.slice(0, name.length) === name;
            });
            for (var i = 0; i < kids.length; i++) {
                delete this.files[kids[i].name];
            }
        }

        return this;
    },

    /**
     * Generate the complete zip file
     * @param {Object} options the options to generate the zip file :
     * - base64, (deprecated, use type instead) true to generate base64.
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
     */
    generate: function(options) {
        options = extend(options || {}, {
            base64: true,
            compression: "STORE",
            compressionOptions : null,
            type: "base64",
            platform: "DOS",
            comment: null,
            mimeType: 'application/zip'
        });

        utils.checkSupport(options.type);

        // accept nodejs `process.platform`
        if(
          options.platform === 'darwin' ||
          options.platform === 'freebsd' ||
          options.platform === 'linux' ||
          options.platform === 'sunos'
        ) {
          options.platform = "UNIX";
        }
        if (options.platform === 'win32') {
          options.platform = "DOS";
        }

        var zipData = [],
            localDirLength = 0,
            centralDirLength = 0,
            writer, i,
            utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));

        // first, generate all the zip parts.
        for (var name in this.files) {
            if (!this.files.hasOwnProperty(name)) {
                continue;
            }
            var file = this.files[name];

            var compressionName = file.options.compression || options.compression.toUpperCase();
            var compression = compressions[compressionName];
            if (!compression) {
                throw new Error(compressionName + " is not a valid compression method !");
            }
            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};

            var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);

            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);
            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
            centralDirLength += zipPart.dirRecord.length;
            zipData.push(zipPart);
        }

        var dirEnd = "";

        // end of central dir signature
        dirEnd = signature.CENTRAL_DIRECTORY_END +
        // number of this disk
        "\x00\x00" +
        // number of the disk with the start of the central directory
        "\x00\x00" +
        // total number of entries in the central directory on this disk
        decToHex(zipData.length, 2) +
        // total number of entries in the central directory
        decToHex(zipData.length, 2) +
        // size of the central directory   4 bytes
        decToHex(centralDirLength, 4) +
        // offset of start of central directory with respect to the starting disk number
        decToHex(localDirLength, 4) +
        // .ZIP file comment length
        decToHex(utfEncodedComment.length, 2) +
        // .ZIP file comment
        utfEncodedComment;


        // we have all the parts (and the total length)
        // time to create a writer !
        var typeName = options.type.toLowerCase();
        if(typeName==="uint8array"||typeName==="arraybuffer"||typeName==="blob"||typeName==="nodebuffer") {
            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
        }else{
            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
        }

        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].fileRecord);
            writer.append(zipData[i].compressedObject.compressedContent);
        }
        for (i = 0; i < zipData.length; i++) {
            writer.append(zipData[i].dirRecord);
        }

        writer.append(dirEnd);

        var zip = writer.finalize();



        switch(options.type.toLowerCase()) {
            // case "zip is an Uint8Array"
            case "uint8array" :
            case "arraybuffer" :
            case "nodebuffer" :
               return utils.transformTo(options.type.toLowerCase(), zip);
            case "blob" :
               return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip), options.mimeType);
            // case "zip is a string"
            case "base64" :
               return (options.base64) ? base64.encode(zip) : zip;
            default : // case "string" :
               return zip;
         }

    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    crc32: function (input, crc) {
        return crc32(input, crc);
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8encode: function (string) {
        return utils.transformTo("string", utf8.utf8encode(string));
    },

    /**
     * @deprecated
     * This method will be removed in a future version without replacement.
     */
    utf8decode: function (input) {
        return utf8.utf8decode(input);
    }
};
module.exports = out;

},{"./base64":344,"./compressedObject":345,"./compressions":346,"./crc32":347,"./defaults":349,"./nodeBuffer":354,"./signature":357,"./stringWriter":359,"./support":360,"./uint8ArrayWriter":362,"./utf8":363,"./utils":364}],357:[function(require,module,exports){
'use strict';
exports.LOCAL_FILE_HEADER = "PK\x03\x04";
exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
exports.DATA_DESCRIPTOR = "PK\x07\x08";

},{}],358:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');
var utils = require('./utils');

function StringReader(data, optimizedBinaryString) {
    this.data = data;
    if (!optimizedBinaryString) {
        this.data = utils.string2binary(this.data);
    }
    this.length = this.data.length;
    this.index = 0;
}
StringReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
StringReader.prototype.byteAt = function(i) {
    return this.data.charCodeAt(i);
};
/**
 * @see DataReader.lastIndexOfSignature
 */
StringReader.prototype.lastIndexOfSignature = function(sig) {
    return this.data.lastIndexOf(sig);
};
/**
 * @see DataReader.readData
 */
StringReader.prototype.readData = function(size) {
    this.checkOffset(size);
    // this will work because the constructor applied the "& 0xff" mask.
    var result = this.data.slice(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = StringReader;

},{"./dataReader":348,"./utils":364}],359:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to a string.
 * @constructor
 */
var StringWriter = function() {
    this.data = [];
};
StringWriter.prototype = {
    /**
     * Append any content to the current string.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        input = utils.transformTo("string", input);
        this.data.push(input);
    },
    /**
     * Finalize the construction an return the result.
     * @return {string} the generated string.
     */
    finalize: function() {
        return this.data.join("");
    }
};

module.exports = StringWriter;

},{"./utils":364}],360:[function(require,module,exports){
(function (Buffer){(function (){
'use strict';
exports.base64 = true;
exports.array = true;
exports.string = true;
exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
// contains true if JSZip can read/generate nodejs Buffer, false otherwise.
// Browserify will provide a Buffer implementation for browsers, which is
// an augmented Uint8Array (i.e., can be used as either Buffer or U8).
exports.nodebuffer = typeof Buffer !== "undefined";
// contains true if JSZip can read/generate Uint8Array, false otherwise.
exports.uint8array = typeof Uint8Array !== "undefined";

if (typeof ArrayBuffer === "undefined") {
    exports.blob = false;
}
else {
    var buffer = new ArrayBuffer(0);
    try {
        exports.blob = new Blob([buffer], {
            type: "application/zip"
        }).size === 0;
    }
    catch (e) {
        try {
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            exports.blob = builder.getBlob('application/zip').size === 0;
        }
        catch (e) {
            exports.blob = false;
        }
    }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":7}],361:[function(require,module,exports){
'use strict';
var DataReader = require('./dataReader');

function Uint8ArrayReader(data) {
    if (data) {
        this.data = data;
        this.length = this.data.length;
        this.index = 0;
    }
}
Uint8ArrayReader.prototype = new DataReader();
/**
 * @see DataReader.byteAt
 */
Uint8ArrayReader.prototype.byteAt = function(i) {
    return this.data[i];
};
/**
 * @see DataReader.lastIndexOfSignature
 */
Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
    var sig0 = sig.charCodeAt(0),
        sig1 = sig.charCodeAt(1),
        sig2 = sig.charCodeAt(2),
        sig3 = sig.charCodeAt(3);
    for (var i = this.length - 4; i >= 0; --i) {
        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
            return i;
        }
    }

    return -1;
};
/**
 * @see DataReader.readData
 */
Uint8ArrayReader.prototype.readData = function(size) {
    this.checkOffset(size);
    if(size === 0) {
        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
        return new Uint8Array(0);
    }
    var result = this.data.subarray(this.index, this.index + size);
    this.index += size;
    return result;
};
module.exports = Uint8ArrayReader;

},{"./dataReader":348}],362:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * An object to write any content to an Uint8Array.
 * @constructor
 * @param {number} length The length of the array.
 */
var Uint8ArrayWriter = function(length) {
    this.data = new Uint8Array(length);
    this.index = 0;
};
Uint8ArrayWriter.prototype = {
    /**
     * Append any content to the current array.
     * @param {Object} input the content to add.
     */
    append: function(input) {
        if (input.length !== 0) {
            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
            input = utils.transformTo("uint8array", input);
            this.data.set(input, this.index);
            this.index += input.length;
        }
    },
    /**
     * Finalize the construction an return the result.
     * @return {Uint8Array} the generated array.
     */
    finalize: function() {
        return this.data;
    }
};

module.exports = Uint8ArrayWriter;

},{"./utils":364}],363:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var support = require('./support');
var nodeBuffer = require('./nodeBuffer');

/**
 * The following functions come from pako, from pako/lib/utils/strings
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Array(256);
for (var i=0; i<256; i++) {
  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start

// convert string to array (typed, when possible)
var string2buf = function (str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    if (support.uint8array) {
        buf = new Uint8Array(buf_len);
    } else {
        buf = new Array(buf_len);
    }

    // convert
    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
        } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | (c >>> 6);
            buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | (c >>> 12);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        } else {
            /* four bytes */
            buf[i++] = 0xf0 | (c >>> 18);
            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        }
    }

    return buf;
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = function(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max-1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

// convert array to string
var buf2string = function (buf) {
    var str, i, out, c, c_len;
    var len = buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len*2);

    for (out=0, i=0; i<len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
            c = (c << 6) | (buf[i++] & 0x3f);
            c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
            utf16buf[out++] = c;
        } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
    }

    // shrinkBuf(utf16buf, out)
    if (utf16buf.length !== out) {
        if(utf16buf.subarray) {
            utf16buf = utf16buf.subarray(0, out);
        } else {
            utf16buf.length = out;
        }
    }

    // return String.fromCharCode.apply(null, utf16buf);
    return utils.applyFromCharCode(utf16buf);
};


// That's all for the pako functions.


/**
 * Transform a javascript string into an array (typed if possible) of bytes,
 * UTF-8 encoded.
 * @param {String} str the string to encode
 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
 */
exports.utf8encode = function utf8encode(str) {
    if (support.nodebuffer) {
        return nodeBuffer(str, "utf-8");
    }

    return string2buf(str);
};


/**
 * Transform a bytes array (or a representation) representing an UTF-8 encoded
 * string into a javascript string.
 * @param {Array|Uint8Array|Buffer} buf the data de decode
 * @return {String} the decoded string.
 */
exports.utf8decode = function utf8decode(buf) {
    if (support.nodebuffer) {
        return utils.transformTo("nodebuffer", buf).toString("utf-8");
    }

    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

    // return buf2string(buf);
    // Chrome prefers to work with "small" chunks of data
    // for the method buf2string.
    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
    var result = [], k = 0, len = buf.length, chunk = 65536;
    while (k < len) {
        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
        if (support.uint8array) {
            result.push(buf2string(buf.subarray(k, nextBoundary)));
        } else {
            result.push(buf2string(buf.slice(k, nextBoundary)));
        }
        k = nextBoundary;
    }
    return result.join("");

};
// vim: set shiftwidth=4 softtabstop=4:

},{"./nodeBuffer":354,"./support":360,"./utils":364}],364:[function(require,module,exports){
'use strict';
var support = require('./support');
var compressions = require('./compressions');
var nodeBuffer = require('./nodeBuffer');
/**
 * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
 * @param {string} str the string to transform.
 * @return {String} the binary string.
 */
exports.string2binary = function(str) {
    var result = "";
    for (var i = 0; i < str.length; i++) {
        result += String.fromCharCode(str.charCodeAt(i) & 0xff);
    }
    return result;
};
exports.arrayBuffer2Blob = function(buffer, mimeType) {
    exports.checkSupport("blob");
	mimeType = mimeType || 'application/zip';

    try {
        // Blob constructor
        return new Blob([buffer], {
            type: mimeType
        });
    }
    catch (e) {

        try {
            // deprecated, browser only, old way
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            return builder.getBlob(mimeType);
        }
        catch (e) {

            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
        }
    }


};
/**
 * The identity function.
 * @param {Object} input the input.
 * @return {Object} the same input.
 */
function identity(input) {
    return input;
}

/**
 * Fill in an array with a string.
 * @param {String} str the string to use.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
 */
function stringToArrayLike(str, array) {
    for (var i = 0; i < str.length; ++i) {
        array[i] = str.charCodeAt(i) & 0xFF;
    }
    return array;
}

/**
 * Transform an array-like object to a string.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
 * @return {String} the result.
 */
function arrayLikeToString(array) {
    // Performances notes :
    // --------------------
    // String.fromCharCode.apply(null, array) is the fastest, see
    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
    // but the stack is limited (and we can get huge arrays !).
    //
    // result += String.fromCharCode(array[i]); generate too many strings !
    //
    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
    var chunk = 65536;
    var result = [],
        len = array.length,
        type = exports.getTypeOf(array),
        k = 0,
        canUseApply = true;
      try {
         switch(type) {
            case "uint8array":
               String.fromCharCode.apply(null, new Uint8Array(0));
               break;
            case "nodebuffer":
               String.fromCharCode.apply(null, nodeBuffer(0));
               break;
         }
      } catch(e) {
         canUseApply = false;
      }

      // no apply : slow and painful algorithm
      // default browser on android 4.*
      if (!canUseApply) {
         var resultStr = "";
         for(var i = 0; i < array.length;i++) {
            resultStr += String.fromCharCode(array[i]);
         }
    return resultStr;
    }
    while (k < len && chunk > 1) {
        try {
            if (type === "array" || type === "nodebuffer") {
                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
            }
            else {
                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
            }
            k += chunk;
        }
        catch (e) {
            chunk = Math.floor(chunk / 2);
        }
    }
    return result.join("");
}

exports.applyFromCharCode = arrayLikeToString;


/**
 * Copy the data from an array-like to an other array-like.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
 */
function arrayLikeToArrayLike(arrayFrom, arrayTo) {
    for (var i = 0; i < arrayFrom.length; i++) {
        arrayTo[i] = arrayFrom[i];
    }
    return arrayTo;
}

// a matrix containing functions to transform everything into everything.
var transform = {};

// string to ?
transform["string"] = {
    "string": identity,
    "array": function(input) {
        return stringToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["string"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return stringToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": function(input) {
        return stringToArrayLike(input, nodeBuffer(input.length));
    }
};

// array to ?
transform["array"] = {
    "string": arrayLikeToString,
    "array": identity,
    "arraybuffer": function(input) {
        return (new Uint8Array(input)).buffer;
    },
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// arraybuffer to ?
transform["arraybuffer"] = {
    "string": function(input) {
        return arrayLikeToString(new Uint8Array(input));
    },
    "array": function(input) {
        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
    },
    "arraybuffer": identity,
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodeBuffer(new Uint8Array(input));
    }
};

// uint8array to ?
transform["uint8array"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return input.buffer;
    },
    "uint8array": identity,
    "nodebuffer": function(input) {
        return nodeBuffer(input);
    }
};

// nodebuffer to ?
transform["nodebuffer"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["nodebuffer"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": identity
};

/**
 * Transform an input into any type.
 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
 * If no output type is specified, the unmodified input will be returned.
 * @param {String} outputType the output type.
 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
 * @throws {Error} an Error if the browser doesn't support the requested output type.
 */
exports.transformTo = function(outputType, input) {
    if (!input) {
        // undefined, null, etc
        // an empty string won't harm.
        input = "";
    }
    if (!outputType) {
        return input;
    }
    exports.checkSupport(outputType);
    var inputType = exports.getTypeOf(input);
    var result = transform[inputType][outputType](input);
    return result;
};

/**
 * Return the type of the input.
 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
 * @param {Object} input the input to identify.
 * @return {String} the (lowercase) type of the input.
 */
exports.getTypeOf = function(input) {
    if (typeof input === "string") {
        return "string";
    }
    if (Object.prototype.toString.call(input) === "[object Array]") {
        return "array";
    }
    if (support.nodebuffer && nodeBuffer.test(input)) {
        return "nodebuffer";
    }
    if (support.uint8array && input instanceof Uint8Array) {
        return "uint8array";
    }
    if (support.arraybuffer && input instanceof ArrayBuffer) {
        return "arraybuffer";
    }
};

/**
 * Throw an exception if the type is not supported.
 * @param {String} type the type to check.
 * @throws {Error} an Error if the browser doesn't support the requested type.
 */
exports.checkSupport = function(type) {
    var supported = support[type.toLowerCase()];
    if (!supported) {
        throw new Error(type + " is not supported by this browser");
    }
};
exports.MAX_VALUE_16BITS = 65535;
exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

/**
 * Prettify a string read as binary.
 * @param {string} str the string to prettify.
 * @return {string} a pretty string.
 */
exports.pretty = function(str) {
    var res = '',
        code, i;
    for (i = 0; i < (str || "").length; i++) {
        code = str.charCodeAt(i);
        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
    }
    return res;
};

/**
 * Find a compression registered in JSZip.
 * @param {string} compressionMethod the method magic to find.
 * @return {Object|null} the JSZip compression object, null if none found.
 */
exports.findCompression = function(compressionMethod) {
    for (var method in compressions) {
        if (!compressions.hasOwnProperty(method)) {
            continue;
        }
        if (compressions[method].magic === compressionMethod) {
            return compressions[method];
        }
    }
    return null;
};
/**
* Cross-window, cross-Node-context regular expression detection
* @param  {Object}  object Anything
* @return {Boolean}        true if the object is a regular expression,
* false otherwise
*/
exports.isRegExp = function (object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
};


},{"./compressions":346,"./nodeBuffer":354,"./support":360}],365:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var NodeBufferReader = require('./nodeBufferReader');
var Uint8ArrayReader = require('./uint8ArrayReader');
var utils = require('./utils');
var sig = require('./signature');
var ZipEntry = require('./zipEntry');
var support = require('./support');
var jszipProto = require('./object');
//  class ZipEntries {{{
/**
 * All the entries in the zip file.
 * @constructor
 * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntries(data, loadOptions) {
    this.files = [];
    this.loadOptions = loadOptions;
    if (data) {
        this.load(data);
    }
}
ZipEntries.prototype = {
    /**
     * Check that the reader is on the speficied signature.
     * @param {string} expectedSignature the expected signature.
     * @throws {Error} if it is an other signature.
     */
    checkSignature: function(expectedSignature) {
        var signature = this.reader.readString(4);
        if (signature !== expectedSignature) {
            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
        }
    },
    /**
     * Read the end of the central directory.
     */
    readBlockEndOfCentral: function() {
        this.diskNumber = this.reader.readInt(2);
        this.diskWithCentralDirStart = this.reader.readInt(2);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
        this.centralDirRecords = this.reader.readInt(2);
        this.centralDirSize = this.reader.readInt(4);
        this.centralDirOffset = this.reader.readInt(4);

        this.zipCommentLength = this.reader.readInt(2);
        // warning : the encoding depends of the system locale
        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
        // On a windows machine, this field is encoded with the localized windows code page.
        this.zipComment = this.reader.readString(this.zipCommentLength);
        // To get consistent behavior with the generation part, we will assume that
        // this is utf8 encoded.
        this.zipComment = jszipProto.utf8decode(this.zipComment);
    },
    /**
     * Read the end of the Zip 64 central directory.
     * Not merged with the method readEndOfCentral :
     * The end of central can coexist with its Zip64 brother,
     * I don't want to read the wrong number of bytes !
     */
    readBlockZip64EndOfCentral: function() {
        this.zip64EndOfCentralSize = this.reader.readInt(8);
        this.versionMadeBy = this.reader.readString(2);
        this.versionNeeded = this.reader.readInt(2);
        this.diskNumber = this.reader.readInt(4);
        this.diskWithCentralDirStart = this.reader.readInt(4);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
        this.centralDirRecords = this.reader.readInt(8);
        this.centralDirSize = this.reader.readInt(8);
        this.centralDirOffset = this.reader.readInt(8);

        this.zip64ExtensibleData = {};
        var extraDataSize = this.zip64EndOfCentralSize - 44,
            index = 0,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;
        while (index < extraDataSize) {
            extraFieldId = this.reader.readInt(2);
            extraFieldLength = this.reader.readInt(4);
            extraFieldValue = this.reader.readString(extraFieldLength);
            this.zip64ExtensibleData[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Read the end of the Zip 64 central directory locator.
     */
    readBlockZip64EndOfCentralLocator: function() {
        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
        this.disksCount = this.reader.readInt(4);
        if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
        }
    },
    /**
     * Read the local files, based on the offset read in the central part.
     */
    readLocalFiles: function() {
        var i, file;
        for (i = 0; i < this.files.length; i++) {
            file = this.files[i];
            this.reader.setIndex(file.localHeaderOffset);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            file.readLocalPart(this.reader);
            file.handleUTF8();
            file.processAttributes();
        }
    },
    /**
     * Read the central directory.
     */
    readCentralDir: function() {
        var file;

        this.reader.setIndex(this.centralDirOffset);
        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
            file = new ZipEntry({
                zip64: this.zip64
            }, this.loadOptions);
            file.readCentralPart(this.reader);
            this.files.push(file);
        }
    },
    /**
     * Read the end of central directory.
     */
    readEndOfCentral: function() {
        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
        if (offset === -1) {
            // Check if the content is a truncated zip or complete garbage.
            // A "LOCAL_FILE_HEADER" is not required at the beginning (auto
            // extractible zip for example) but it can give a good hint.
            // If an ajax request was used without responseType, we will also
            // get unreadable data.
            var isGarbage = true;
            try {
                this.reader.setIndex(0);
                this.checkSignature(sig.LOCAL_FILE_HEADER);
                isGarbage = false;
            } catch (e) {}

            if (isGarbage) {
                throw new Error("Can't find end of central directory : is this a zip file ? " +
                                "If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
            } else {
                throw new Error("Corrupted zip : can't find end of central directory");
            }
        }
        this.reader.setIndex(offset);
        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
        this.readBlockEndOfCentral();


        /* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
            this.zip64 = true;

            /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */

            // should look for a zip64 EOCD locator
            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            if (offset === -1) {
                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator();

            // now the zip64 EOCD record
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
        }
    },
    prepareReader: function(data) {
        var type = utils.getTypeOf(data);
        if (type === "string" && !support.uint8array) {
            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
        }
        else if (type === "nodebuffer") {
            this.reader = new NodeBufferReader(data);
        }
        else {
            this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
        }
    },
    /**
     * Read a zip file and create ZipEntries.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
     */
    load: function(data) {
        this.prepareReader(data);
        this.readEndOfCentral();
        this.readCentralDir();
        this.readLocalFiles();
    }
};
// }}} end of ZipEntries
module.exports = ZipEntries;

},{"./nodeBufferReader":355,"./object":356,"./signature":357,"./stringReader":358,"./support":360,"./uint8ArrayReader":361,"./utils":364,"./zipEntry":366}],366:[function(require,module,exports){
'use strict';
var StringReader = require('./stringReader');
var utils = require('./utils');
var CompressedObject = require('./compressedObject');
var jszipProto = require('./object');

var MADE_BY_DOS = 0x00;
var MADE_BY_UNIX = 0x03;

// class ZipEntry {{{
/**
 * An entry in the zip file.
 * @constructor
 * @param {Object} options Options of the current file.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntry(options, loadOptions) {
    this.options = options;
    this.loadOptions = loadOptions;
}
ZipEntry.prototype = {
    /**
     * say if the file is encrypted.
     * @return {boolean} true if the file is encrypted, false otherwise.
     */
    isEncrypted: function() {
        // bit 1 is set
        return (this.bitFlag & 0x0001) === 0x0001;
    },
    /**
     * say if the file has utf-8 filename/comment.
     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
     */
    useUTF8: function() {
        // bit 11 is set
        return (this.bitFlag & 0x0800) === 0x0800;
    },
    /**
     * Prepare the function used to generate the compressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
     */
    prepareCompressedContent: function(reader, from, length) {
        return function() {
            var previousIndex = reader.index;
            reader.setIndex(from);
            var compressedFileData = reader.readData(length);
            reader.setIndex(previousIndex);

            return compressedFileData;
        };
    },
    /**
     * Prepare the function used to generate the uncompressed content from this ZipFile.
     * @param {DataReader} reader the reader to use.
     * @param {number} from the offset from where we should read the data.
     * @param {number} length the length of the data to read.
     * @param {JSZip.compression} compression the compression used on this file.
     * @param {number} uncompressedSize the uncompressed size to expect.
     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
     */
    prepareContent: function(reader, from, length, compression, uncompressedSize) {
        return function() {

            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
            var uncompressedFileData = compression.uncompress(compressedFileData);

            if (uncompressedFileData.length !== uncompressedSize) {
                throw new Error("Bug : uncompressed data size mismatch");
            }

            return uncompressedFileData;
        };
    },
    /**
     * Read the local part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readLocalPart: function(reader) {
        var compression, localExtraFieldsLength;

        // we already know everything from the central dir !
        // If the central dir data are false, we are doomed.
        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
        // The less data we get here, the more reliable this should be.
        // Let's skip the whole header and dash to the data !
        reader.skip(22);
        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
        // Strangely, the filename here is OK.
        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
        // the internet.
        //
        // I think I see the logic here : the central directory is used to display
        // content and the local directory is used to extract the files. Mixing / and \
        // may be used to display \ to windows users and use / when extracting the files.
        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
        this.fileNameLength = reader.readInt(2);
        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
        this.fileName = reader.readString(this.fileNameLength);
        reader.skip(localExtraFieldsLength);

        if (this.compressedSize == -1 || this.uncompressedSize == -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
        }

        compression = utils.findCompression(this.compressionMethod);
        if (compression === null) { // no compression found
            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
        }
        this.decompressed = new CompressedObject();
        this.decompressed.compressedSize = this.compressedSize;
        this.decompressed.uncompressedSize = this.uncompressedSize;
        this.decompressed.crc32 = this.crc32;
        this.decompressed.compressionMethod = this.compressionMethod;
        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);

        // we need to compute the crc32...
        if (this.loadOptions.checkCRC32) {
            this.decompressed = utils.transformTo("string", this.decompressed.getContent());
            if (jszipProto.crc32(this.decompressed) !== this.crc32) {
                throw new Error("Corrupted zip : CRC32 mismatch");
            }
        }
    },

    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readCentralPart: function(reader) {
        this.versionMadeBy = reader.readInt(2);
        this.versionNeeded = reader.readInt(2);
        this.bitFlag = reader.readInt(2);
        this.compressionMethod = reader.readString(2);
        this.date = reader.readDate();
        this.crc32 = reader.readInt(4);
        this.compressedSize = reader.readInt(4);
        this.uncompressedSize = reader.readInt(4);
        this.fileNameLength = reader.readInt(2);
        this.extraFieldsLength = reader.readInt(2);
        this.fileCommentLength = reader.readInt(2);
        this.diskNumberStart = reader.readInt(2);
        this.internalFileAttributes = reader.readInt(2);
        this.externalFileAttributes = reader.readInt(4);
        this.localHeaderOffset = reader.readInt(4);

        if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
        }

        this.fileName = reader.readString(this.fileNameLength);
        this.readExtraFields(reader);
        this.parseZIP64ExtraField(reader);
        this.fileComment = reader.readString(this.fileCommentLength);
    },

    /**
     * Parse the external file attributes and get the unix/dos permissions.
     */
    processAttributes: function () {
        this.unixPermissions = null;
        this.dosPermissions = null;
        var madeBy = this.versionMadeBy >> 8;

        // Check if we have the DOS directory flag set.
        // We look for it in the DOS and UNIX permissions
        // but some unknown platform could set it as a compatibility flag.
        this.dir = this.externalFileAttributes & 0x0010 ? true : false;

        if(madeBy === MADE_BY_DOS) {
            // first 6 bits (0 to 5)
            this.dosPermissions = this.externalFileAttributes & 0x3F;
        }

        if(madeBy === MADE_BY_UNIX) {
            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;
            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);
        }

        // fail safe : if the name ends with a / it probably means a folder
        if (!this.dir && this.fileName.slice(-1) === '/') {
            this.dir = true;
        }
    },

    /**
     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
     * @param {DataReader} reader the reader to use.
     */
    parseZIP64ExtraField: function(reader) {

        if (!this.extraFields[0x0001]) {
            return;
        }

        // should be something, preparing the extra reader
        var extraReader = new StringReader(this.extraFields[0x0001].value);

        // I really hope that these 64bits integer can fit in 32 bits integer, because js
        // won't let us have more.
        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
            this.uncompressedSize = extraReader.readInt(8);
        }
        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
            this.compressedSize = extraReader.readInt(8);
        }
        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
            this.localHeaderOffset = extraReader.readInt(8);
        }
        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
            this.diskNumberStart = extraReader.readInt(4);
        }
    },
    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readExtraFields: function(reader) {
        var start = reader.index,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;

        this.extraFields = this.extraFields || {};

        while (reader.index < start + this.extraFieldsLength) {
            extraFieldId = reader.readInt(2);
            extraFieldLength = reader.readInt(2);
            extraFieldValue = reader.readString(extraFieldLength);

            this.extraFields[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Apply an UTF8 transformation if needed.
     */
    handleUTF8: function() {
        if (this.useUTF8()) {
            this.fileName = jszipProto.utf8decode(this.fileName);
            this.fileComment = jszipProto.utf8decode(this.fileComment);
        } else {
            var upath = this.findExtraFieldUnicodePath();
            if (upath !== null) {
                this.fileName = upath;
            }
            var ucomment = this.findExtraFieldUnicodeComment();
            if (ucomment !== null) {
                this.fileComment = ucomment;
            }
        }
    },

    /**
     * Find the unicode path declared in the extra field, if any.
     * @return {String} the unicode path, null otherwise.
     */
    findExtraFieldUnicodePath: function() {
        var upathField = this.extraFields[0x7075];
        if (upathField) {
            var extraReader = new StringReader(upathField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the filename changed, this field is out of date.
            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
        }
        return null;
    },

    /**
     * Find the unicode comment declared in the extra field, if any.
     * @return {String} the unicode comment, null otherwise.
     */
    findExtraFieldUnicodeComment: function() {
        var ucommentField = this.extraFields[0x6375];
        if (ucommentField) {
            var extraReader = new StringReader(ucommentField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the comment changed, this field is out of date.
            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
                return null;
            }

            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
        }
        return null;
    }
};
module.exports = ZipEntry;

},{"./compressedObject":345,"./object":356,"./stringReader":358,"./utils":364}],367:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],368:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":369,"./lib/inflate":370,"./lib/utils/common":371,"./lib/zlib/constants":374}],369:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":371,"./utils/strings":372,"./zlib/deflate":376,"./zlib/messages":381,"./zlib/zstream":383}],370:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":371,"./utils/strings":372,"./zlib/constants":374,"./zlib/gzheader":377,"./zlib/inflate":379,"./zlib/messages":381,"./zlib/zstream":383}],371:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],372:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":371}],373:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],374:[function(require,module,exports){
'use strict';


module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],375:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],376:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":371,"./adler32":373,"./crc32":375,"./messages":381,"./trees":382}],377:[function(require,module,exports){
'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],378:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],379:[function(require,module,exports){
'use strict';


var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":371,"./adler32":373,"./crc32":375,"./inffast":378,"./inftrees":380}],380:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":371}],381:[function(require,module,exports){
'use strict';

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],382:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":371}],383:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],384:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],385:[function(require,module,exports){
(function (global){(function (){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],386:[function(require,module,exports){
module.exports.download = require('./src/download')
module.exports.write = require('./src/write')
module.exports.zip = require('./src/zip')

},{"./src/download":387,"./src/write":395,"./src/zip":396}],387:[function(require,module,exports){
var zip = require('./zip');

module.exports = function(gj, options) {
    var content = zip(gj, options);
    location.href = 'data:application/zip;base64,' + content;
};

},{"./zip":396}],388:[function(require,module,exports){
module.exports.enlarge = function enlargeExtent(extent, pt) {
    if (pt[0] < extent.xmin) extent.xmin = pt[0];
    if (pt[0] > extent.xmax) extent.xmax = pt[0];
    if (pt[1] < extent.ymin) extent.ymin = pt[1];
    if (pt[1] > extent.ymax) extent.ymax = pt[1];
    return extent;
};

module.exports.enlargeExtent = function enlargeExtent(extent, ext) {
    if (ext.xmax > extent.xmax) extent.xmax = ext.xmax;
    if (ext.xmin < extent.xmin) extent.xmin = ext.xmin;
    if (ext.ymax > extent.ymax) extent.ymax = ext.ymax;
    if (ext.ymin < extent.ymin) extent.ymin = ext.ymin;
    return extent;
};

module.exports.blank = function() {
    return {
        xmin: Number.MAX_VALUE,
        ymin: Number.MAX_VALUE,
        xmax: -Number.MAX_VALUE,
        ymax: -Number.MAX_VALUE
    };
};

},{}],389:[function(require,module,exports){
var types = require('./types').jstypes;

module.exports.geojson = geojson;
module.exports.obj = obj;

function geojson(features) {
    var fields = {};
    features.forEach(collect);
    function collect(f) { inherit(fields, f.properties); }
    return obj(fields);
}

function inherit(a, b) {
    for (var i in b) { a[i] = b[i]; }
    return a;
}

function obj(_) {
    var fields = {}, o = [];
    for (var p in _) fields[p] = typeof _[p];
    for (var n in fields) {
        o.push({
            name: n,
            type: types[fields[n]]
        });
    }
    return o;
}

},{"./types":394}],390:[function(require,module,exports){
module.exports.point = justType('Point', 'POINT');
module.exports.line = justType('LineString', 'POLYLINE');
module.exports.polygon = justType('Polygon', 'POLYGON');

function justType(type, TYPE) {
    return function(gj) {
        var oftype = gj.features.filter(isType(type));
        return {
            geometries: (TYPE === 'POLYGON' || TYPE === 'POLYLINE') ? [oftype.map(justCoords)] : oftype.map(justCoords),
            properties: oftype.map(justProps),
            type: TYPE
        };
    };
}

function justCoords(t) {
    if (t.geometry.coordinates[0] !== undefined &&
        t.geometry.coordinates[0][0] !== undefined &&
        t.geometry.coordinates[0][0][0] !== undefined) {
        return t.geometry.coordinates[0];
    } else {
        return t.geometry.coordinates;
    }
}

function justProps(t) {
    return t.properties;
}

function isType(t) {
    return function(f) { return f.geometry.type === t; };
}

},{}],391:[function(require,module,exports){
var ext = require('./extent');

module.exports.write = function writePoints(coordinates, extent, shpView, shxView) {

    var contentLength = 28, // 8 header, 20 content
        fileLength = 100,
        shpI = 0,
        shxI = 0;

    coordinates.forEach(function writePoint(coords, i) {
        // HEADER
        // 4 record number
        // 4 content length in 16-bit words (20/2)
        shpView.setInt32(shpI, i);
        shpView.setInt32(shpI + 4, 10);

        // record
        // (8 + 8) + 4 = 20 content length
        shpView.setInt32(shpI + 8, 1, true); // POINT=1
        shpView.setFloat64(shpI + 12, coords[0], true); // X
        shpView.setFloat64(shpI + 20, coords[1], true); // Y

        // index
        shxView.setInt32(shxI, fileLength / 2); // length in 16-bit words
        shxView.setInt32(shxI + 4, 10);

        shxI += 8;
        shpI += contentLength;
        fileLength += contentLength;
    });
};

module.exports.extent = function(coordinates) {
    return coordinates.reduce(function(extent, coords) {
        return ext.enlarge(extent, coords);
    }, ext.blank());
};

module.exports.parts = function parts(geometries, TYPE) {
    return geometries.length;
};

module.exports.shxLength = function(coordinates) {
    return coordinates.length * 8;
};

module.exports.shpLength = function(coordinates) {
    return coordinates.length * 28;
};

},{"./extent":388}],392:[function(require,module,exports){
var ext = require('./extent'),
    types = require('./types');

module.exports.write = function writePoints(geometries, extent, shpView, shxView, TYPE) {

    var shpI = 0,
        shxI = 0,
        shxOffset = 100;

    geometries.forEach(writePolyLine);

    function writePolyLine(coordinates, i) {

        var flattened = justCoords(coordinates),
            noParts = parts([coordinates], TYPE),
            contentLength = (flattened.length * 16) + 48 + (noParts - 1) * 4;

        var featureExtent = flattened.reduce(function(extent, c) {
            return ext.enlarge(extent, c);
        }, ext.blank());

        // INDEX
        shxView.setInt32(shxI, shxOffset / 2); // offset
        shxView.setInt32(shxI + 4, contentLength / 2); // offset length

        shxI += 8;
        shxOffset += contentLength + 8;

        shpView.setInt32(shpI, i + 1); // record number
        shpView.setInt32(shpI + 4, contentLength / 2); // length
        shpView.setInt32(shpI + 8, TYPE, true); // POLYLINE=3
        shpView.setFloat64(shpI + 12, featureExtent.xmin, true); // EXTENT
        shpView.setFloat64(shpI + 20, featureExtent.ymin, true);
        shpView.setFloat64(shpI + 28, featureExtent.xmax, true);
        shpView.setFloat64(shpI + 36, featureExtent.ymax, true);
        shpView.setInt32(shpI + 44, noParts, true);
        shpView.setInt32(shpI + 48, flattened.length, true); // POINTS
        shpView.setInt32(shpI + 52, 0, true); // The first part - index zero

        var onlyParts = coordinates.reduce(function (arr, coords) {
            if (Array.isArray(coords[0][0])) {
                arr = arr.concat(coords);
            } else {
                arr.push(coords);
            }
            return arr;
        }, []);
        for (var p = 1; p < noParts; p++) {
            shpView.setInt32( // set part index
                shpI + 52 + (p * 4),
                onlyParts.reduce(function (a, b, idx) {
                    return idx < p ? a + b.length : a;
                }, 0),
                true
            );
        }

        flattened.forEach(function writeLine(coords, i) {
            shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4, coords[0], true); // X
            shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4 + 8, coords[1], true); // Y
        });

        shpI += contentLength + 8;
    }
};

module.exports.shpLength = function(geometries) {
    return (geometries.length * 56) +
        // points
        (justCoords(geometries).length * 16);
};

module.exports.shxLength = function(geometries) {
    return geometries.length * 8;
};

module.exports.extent = function(coordinates) {
    return justCoords(coordinates).reduce(function(extent, c) {
        return ext.enlarge(extent, c);
    }, ext.blank());
};

function parts(geometries, TYPE) {
    var no = 1;
    if (TYPE === types.geometries.POLYGON || TYPE === types.geometries.POLYLINE)  {
        no = geometries.reduce(function (no, coords) {
            no += coords.length;
            if (Array.isArray(coords[0][0][0])) { // multi
                no += coords.reduce(function (no, rings) {
                    return no + rings.length - 1; // minus outer
                }, 0);
            }
            return no;
        }, 0);
    }
    return no;
}

module.exports.parts = parts;

function totalPoints(geometries) {
    var sum = 0;
    geometries.forEach(function(g) { sum += g.length; });
    return sum;
}

function justCoords(coords, l) {
    if (l === undefined) l = [];
    if (typeof coords[0][0] == 'object') {
        return coords.reduce(function(memo, c) {
            return memo.concat(justCoords(c));
        }, l);
    } else {
        return coords;
    }
}


},{"./extent":388,"./types":394}],393:[function(require,module,exports){
module.exports = 'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]]';

},{}],394:[function(require,module,exports){
module.exports.geometries = {
    NULL: 0,
    POINT: 1,
    POLYLINE: 3,
    POLYGON: 5,
    MULTIPOINT: 8,
    POINTZ: 11,
    POLYLINEZ: 13,
    POLYGONZ: 15,
    MULTIPOINTZ: 18,
    POINTM: 21,
    POLYLINEM: 23,
    POLYGONM: 25,
    MULTIPOINTM: 28,
    MULTIPATCH: 31,
};

},{}],395:[function(require,module,exports){
var types = require('./types'),
    dbf = require('dbf'),
    prj = require('./prj'),
    ext = require('./extent'),
    getFields = require('./fields'),
    assert = require('assert'),
    pointWriter = require('./points'),
    polyWriter = require('./poly');

var writers = {
    1: pointWriter,
    5: polyWriter,
    3: polyWriter
};

var recordHeaderLength = 8;

module.exports = write;

// Low-level writing interface
function write(rows, geometry_type, geometries, callback) {

    var TYPE = types.geometries[geometry_type],
        writer = writers[TYPE],
        parts = writer.parts(geometries, TYPE),
        shpLength = 100 + (parts - geometries.length) * 4 + writer.shpLength(geometries),
        shxLength = 100 + writer.shxLength(geometries),
        shpBuffer = new ArrayBuffer(shpLength),
        shpView = new DataView(shpBuffer),
        shxBuffer = new ArrayBuffer(shxLength),
        shxView = new DataView(shxBuffer),
        extent = writer.extent(geometries);

    writeHeader(shpView, TYPE);
    writeHeader(shxView, TYPE);
    writeExtent(extent, shpView);
    writeExtent(extent, shxView);

    writer.write(geometries, extent,
        new DataView(shpBuffer, 100),
        new DataView(shxBuffer, 100),
        TYPE);

    shpView.setInt32(24, shpLength / 2);
    shxView.setInt32(24, (50 + geometries.length * 4));

    var dbfBuf = dbf.structure(rows);

    callback(null, {
        shp: shpView,
        shx: shxView,
        dbf: dbfBuf,
        prj: prj
    });
}

function writeHeader(view, TYPE) {
    view.setInt32(0, 9994);
    view.setInt32(28, 1000, true);
    view.setInt32(32, TYPE, true);
}

function writeExtent(extent, view) {
    view.setFloat64(36, extent.xmin, true);
    view.setFloat64(44, extent.ymin, true);
    view.setFloat64(52, extent.xmax, true);
    view.setFloat64(60, extent.ymax, true);
}

},{"./extent":388,"./fields":389,"./points":391,"./poly":392,"./prj":393,"./types":394,"assert":1,"dbf":337}],396:[function(require,module,exports){
(function (process){(function (){
var write = require('./write'),
    geojson = require('./geojson'),
    prj = require('./prj'),
    JSZip = require('jszip');

module.exports = function(gj, options) {

    var zip = new JSZip(),
        layers = zip.folder(options && options.folder ? options.folder : 'layers');

    [geojson.point(gj), geojson.line(gj), geojson.polygon(gj)]
        .forEach(function(l) {
        if (l.geometries.length && l.geometries[0].length) {
            write(
                // field definitions
                l.properties,
                // geometry type
                l.type,
                // geometries
                l.geometries,
                function(err, files) {
                    var fileName = options && options.types[l.type.toLowerCase()] ? options.types[l.type.toLowerCase()] : l.type;
                    layers.file(fileName + '.shp', files.shp.buffer, { binary: true });
                    layers.file(fileName + '.shx', files.shx.buffer, { binary: true });
                    layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });
                    layers.file(fileName + '.prj', prj);
                });
        }
    });

    var generateOptions = { compression:'STORE' };

    if (!process.browser) {
      generateOptions.type = 'nodebuffer';
    }

    return zip.generate(generateOptions);
};

}).call(this)}).call(this,require('_process'))
},{"./geojson":390,"./prj":393,"./write":395,"_process":384,"jszip":352}],397:[function(require,module,exports){
var inserted = exports.cache = {}

function noop () {}

exports.insert = function (css) {
  if (inserted[css]) return noop
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return function () {
    document.getElementsByTagName('head')[0].removeChild(elem)
    inserted[css] = false
  }
}

},{}],398:[function(require,module,exports){
var _constant = require('./constant');

var _constant2 = _interopRequireDefault(_constant);

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var g3w = g3w || {};
//set G3W-CLIENT application constant

// api file interface for external plugin
g3w.constant = _constant2.default;
//set core api method and objects
g3w.core = {
  G3WObject: require('core/g3wobject'),
  utils: require('core/utils/utils'),
  geoutils: require('core/utils/geo'),
  ApplicationService: require('core/applicationservice'),
  ApplicationState: _applicationstate2.default,
  ApiService: require('core/apiservice'),
  Router: require('core/router'),
  i18n: require('core/i18n/i18n.service'),
  task: {
    TaskService: require('core/task/service')
  },
  data: {
    DataRouterService: require('core/data/routerservice')
  },
  iframe: {
    IFrameRouterService: require('core/iframe/routerservice')
  },
  errors: {
    parsers: {
      Server: require('core/errors/parser/servererrorparser')
    }
  },
  editing: {
    Session: require('core/editing/session'),
    SessionsRegistry: require('core/editing/sessionsregistry'),
    Editor: require('core/editing/editor'),
    ChangesManager: require('core/editing/changesmanager')
  },
  geometry: {
    Geom: require('core/geometry/geom'),
    Geometry: require('core/geometry/geometry')
  },
  project: {
    ProjectsRegistry: require('core/project/projectsregistry'),
    Project: require('core/project/project')
  },
  map: {
    MapLayersStoreRegistry: require('core/map/maplayersstoresregistry')
  },
  catalog: {
    CatalogLayersStoresRegistry: require('core/catalog/cataloglayersstoresregistry')
  },
  layer: {
    LayersStoreRegistry: require('core/layers/layersstoresregistry'), //nel caso un plugin volesse instanziare un layersstoreregistry proprio
    LayersStore: require('core/layers/layersstore'),
    Layer: require('core/layers/layer'),
    LayerFactory: require('core/layers/layerfactory'),
    TableLayer: require('core/layers/tablelayer'),
    VectorLayer: require('core/layers/vectorlayer'),
    ImageLayer: require('core/layers/imagelayer'),
    WmsLayer: require('core/layers/map/wmslayer'),
    XYZLayer: require('core/layers/map/xyzlayer'),
    MapLayer: require('core/layers/map/maplayer'),
    geometry: {
      Geometry: require('core/geometry/geometry'),
      geom: require('core/geometry/geom')
    },
    features: {
      Feature: require('core/layers/features/feature'),
      FeaturesStore: require('core/layers/features/featuresstore'),
      OlFeaturesStore: require('core/layers/features/olfeaturesstore')
    },
    filter: {
      Filter: require('core/layers/filter/filter'),
      Expression: require('core/layers/filter/expression')
    }
  },
  relations: {
    RelationsService: require('core/relations/relationsservice')
  },
  interaction: {
    PickCoordinatesInteraction: require('g3w-ol/src/interactions/pickcoordinatesinteraction'),
    PickFeatureInteraction: require('g3w-ol/src/interactions/pickfeatureinteraction')
  },
  plugin: {
    Plugin: require('core/plugin/plugin'),
    PluginsRegistry: require('core/plugin/pluginsregistry'),
    PluginService: require('core/plugin/pluginservice')
  },
  workflow: {
    Task: require('core/workflow/task'),
    Step: require('core/workflow/step'),
    Flow: require('core/workflow/flow'),
    Workflow: require('core/workflow/workflow'),
    WorkflowsStack: require('core/workflow/workflowsstack')
  }
};

g3w.gui = {
  GUI: require('gui/gui'),
  Panel: require('gui/panel'),
  ControlFactory: require('gui/map/control/factory'),
  ComponentsFactory: require('gui/componentsfactory'),
  vue: {
    Component: require('gui/vue/component'),
    Panel: require('gui/panel'),
    MetadataComponent: require('gui/metadata/vue/metadata'),
    SearchComponent: require('gui/search/vue/search'),
    SearchPanel: require('gui/search/vue/panel/searchpanel'),
    PrintComponent: require('gui/print/vue/print'),
    CatalogComponent: require('gui/catalog/vue/catalog'),
    MapComponent: require('gui/map/vue/map'),
    ToolsComponent: require('gui/tools/vue/tools'),
    QueryResultsComponent: require('gui/queryresults/vue/queryresults'),
    // main Form Component
    FormComponent: require('gui/form/vue/form'),
    // Form Components
    FormComponents: {
      Body: require('gui/form/components/body/vue/body'),
      Footer: require('gui/form/components/footer/vue/footer')
    },
    Inputs: {
      InputsComponents: require('gui/inputs/inputs')
    },
    Charts: {
      ChartsFactory: require('gui/charts/chartsfactory'),
      c3: {
        lineXY: require('gui/charts/vue/c3/line/lineXY')
      }
    },
    Fields: require('gui/fields/fields'),
    Mixins: require('gui/vue/vue.mixins'),
    services: {
      SearchPanel: require('gui/search/vue/panel/searchservice')
    }
  }
};

g3w.ol = {
  interactions: {
    PickFeatureInteraction: require('g3w-ol/src/interactions/pickfeatureinteraction'),
    PickCoordinatesInteraction: require('g3w-ol/src/interactions/pickcoordinatesinteraction'),
    DeleteFeatureInteraction: require('g3w-ol/src/interactions/deletefeatureinteraction')
  },
  controls: {},
  utils: require('g3w-ol/src/utils/utils')
};

g3w.test = {};

module.exports = {
  core: g3w.core,
  gui: g3w.gui,
  ol: g3w.ol,
  test: g3w.test
};

},{"./constant":399,"core/apiservice":400,"core/applicationservice":401,"core/applicationstate":402,"core/catalog/cataloglayersstoresregistry":403,"core/data/routerservice":406,"core/editing/changesmanager":409,"core/editing/editor":410,"core/editing/session":412,"core/editing/sessionsregistry":413,"core/errors/parser/servererrorparser":414,"core/g3wobject":415,"core/geometry/geom":416,"core/geometry/geometry":417,"core/i18n/i18n.service":418,"core/iframe/routerservice":419,"core/layers/features/feature":434,"core/layers/features/featuresstore":435,"core/layers/features/olfeaturesstore":436,"core/layers/filter/expression":437,"core/layers/filter/filter":438,"core/layers/imagelayer":442,"core/layers/layer":443,"core/layers/layerfactory":444,"core/layers/layersstore":445,"core/layers/layersstoresregistry":446,"core/layers/map/maplayer":452,"core/layers/map/wmslayer":454,"core/layers/map/xyzlayer":455,"core/layers/tablelayer":464,"core/layers/vectorlayer":465,"core/map/maplayersstoresregistry":466,"core/plugin/plugin":470,"core/plugin/pluginservice":471,"core/plugin/pluginsregistry":472,"core/project/project":477,"core/project/projectsregistry":478,"core/relations/relationsservice":481,"core/router":482,"core/task/service":483,"core/utils/geo":484,"core/utils/utils":485,"core/workflow/flow":494,"core/workflow/step":496,"core/workflow/task":497,"core/workflow/workflow":498,"core/workflow/workflowsstack":499,"g3w-ol/src/interactions/deletefeatureinteraction":523,"g3w-ol/src/interactions/pickcoordinatesinteraction":526,"g3w-ol/src/interactions/pickfeatureinteraction":527,"g3w-ol/src/utils/utils":534,"gui/catalog/vue/catalog":541,"gui/charts/chartsfactory":548,"gui/charts/vue/c3/line/lineXY":550,"gui/componentsfactory":552,"gui/fields/fields":557,"gui/form/components/body/vue/body":567,"gui/form/components/footer/vue/footer":569,"gui/form/vue/form":574,"gui/gui":575,"gui/inputs/inputs":594,"gui/map/control/factory":630,"gui/map/vue/map":636,"gui/metadata/vue/metadata":646,"gui/panel":653,"gui/print/vue/print":659,"gui/queryresults/vue/queryresults":675,"gui/search/vue/panel/searchpanel":687,"gui/search/vue/panel/searchservice":688,"gui/search/vue/search":691,"gui/tools/vue/tools":710,"gui/vue/component":718,"gui/vue/vue.mixins":731}],399:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * It contains all contants values used on application to
 * manage in easy way all constant values
 */
var G3W_FID = exports.G3W_FID = 'g3w_fid'; //fid name field referred of fid feature
//default editing capabilities
var DEFAULT_EDITING_CAPABILITIES = exports.DEFAULT_EDITING_CAPABILITIES = ['create', 'update_geometry', 'update_attributes', 'delete'];

exports.default = {
  G3W_FID: G3W_FID,
  DEFAULT_EDITING_CAPABILITIES: DEFAULT_EDITING_CAPABILITIES
};

},{}],400:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    reject = _require.reject;

var G3WObject = require('core/g3wobject');

// Class Api Service
function ApiService() {
  this._config = null;
  this._baseUrl = null;
  this.init = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var d = $.Deferred();
    this._config = config;
    // prende l'url base delle api dal config dell'applicazione
    this._baseUrl = config.urls.api;
    this._apiEndpoints = config.urls.apiEndpoints;
    d.resolve();
    return d.promise();
  };
  var howManyAreLoading = 0;
  this._incrementLoaders = function () {
    howManyAreLoading === 0 && this.emit('apiquerystart');
    howManyAreLoading += 1;
  };

  this._decrementLoaders = function () {
    howManyAreLoading -= 1;
    howManyAreLoading === 0 && this.emit('apiqueryend');
  };
  this.get = function (api, options) {
    var _this = this;

    var apiEndPoint = this._apiEndpoints[api];
    if (apiEndPoint) {
      var completeUrl = this._baseUrl + '/' + apiEndPoint;
      if (options.request) completeUrl = completeUrl + '/' + options.request;
      var params = options.params || {};
      this.emit(api + 'querystart');
      this._incrementLoaders();
      return $.get(completeUrl, params).done(function (response) {
        _this.emit(api + 'queryend', response);
        return response;
      }).fail(function (error) {
        _this.emit(api + 'queryfail', error);
        return error;
      }).always(function () {
        return _this._decrementLoaders();
      });
    } else return reject();
  };
  base(this);
}

inherit(ApiService, G3WObject);

module.exports = new ApiService();

},{"core/g3wobject":415,"core/utils/utils":485}],401:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _config = require('config');

var _config2 = _interopRequireDefault(_config);

var _applicationstate = require('./applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/i18n/i18n.service'),
    i18ninit = _require.init,
    changeLanguage = _require.changeLanguage;

var _require2 = require('core/utils/utils'),
    base = _require2.base,
    inherit = _require2.inherit,
    XHR = _require2.XHR,
    uniqueId = _require2.uniqueId;

var G3WObject = require('core/g3wobject');
var ApiService = require('core/apiservice');
var RouterService = require('core/router');
var RouterDataService = require('core/data/routerservice');
var ProjectsRegistry = require('core/project/projectsregistry');
var PluginsRegistry = require('core/plugin/pluginsregistry');
var ClipboardService = require('core/clipboardservice');
var GUI = require('gui/gui');
var G3W_VERSION = "1628084303444";
//timeout value
var TIMEOUT = 60000; // 1 minute

//Manage Application
var ApplicationService = function ApplicationService() {
  var production = false;
  this.version = G3W_VERSION.indexOf("G3W_VERSION") === -1 ? G3W_VERSION : "";
  _applicationstate2.default.iframe = window.top !== window.self;
  _applicationstate2.default.online = navigator.onLine;
  _applicationstate2.default.ismobile = isMobile.any;
  this.complete = false;
  this.baseurl = '/'; // set base url
  this.download_caller_id = null;
  // store all services sidebar etc..
  this._applicationServices = {};
  this.config = {};
  this._initConfigUrl = null;
  this._initConfig = null;
  this._groupId = null;
  this._gid = null;
  this.setters = {
    changeProject: function changeProject() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          gid = _ref.gid,
          host = _ref.host;

      return this._changeProject({ gid: gid, host: host });
    },
    online: function online() {
      this.setOnline();
    },
    offline: function offline() {
      this.setOffline();
    },
    setFilterToken: function setFilterToken(filtertoken) {
      this._setFilterToken(filtertoken);
    }
  };
  base(this);
  // init application
  this.init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var config, browserLng, language;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return this.createApplicationConfig();

          case 3:
            config = _context.sent;

            this.setConfig(config);
            _context.next = 7;
            return this.bootstrap();

          case 7:
            return _context.abrupt('return', _context.sent);

          case 10:
            _context.prev = 10;
            _context.t0 = _context['catch'](0);
            browserLng = navigator && navigator.language || 'en';
            language = _config2.default.supportedLng.find(function (lng) {
              return browserLng.indexOf(lng) !== -1;
            });
            return _context.abrupt('return', Promise.reject({
              error: _context.t0,
              language: language
            }));

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 10]]);
  }));

  /**
   * setup Internalization
   */
  this.setupI18n = function () {
    var lngConfig = this._config._i18n;
    this.setApplicationLanguage(lngConfig.lng);
    //setup internalization for translation
    i18ninit(lngConfig);
    this._groupId = this._config.group.slug || this._config.group.name.replace(/\s+/g, '-').toLowerCase();
    // set accept-language reuest header based on config language
    var userLanguage = this._config.user.i18n || 'en';
    $.ajaxSetup({
      beforeSend: function beforeSend(jqXHR) {
        jqXHR.setRequestHeader('Accept-Language', userLanguage);
      }
    });
  };

  this.getCurrentProject = function () {
    return ProjectsRegistry.getCurrentProject();
  };

  this.setDownload = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var download_caller_id = arguments[1];

    if (!bool && download_caller_id && this.download_caller_id === download_caller_id) {
      _applicationstate2.default.download = false;
      this.download_caller_id = null;
    } else if (bool && this.download_caller_id === null) {
      _applicationstate2.default.download = bool;
      this.download_caller_id = uniqueId();
    }
    return this.download_caller_id;
  };

  this.getDownload = function () {
    return _applicationstate2.default.download;
  };

  this.loadingPlugin = function (plugin) {
    _applicationstate2.default.plugins.push(plugin);
  };

  /*
  * plugin: name of plugin
  * ready: Boolen - true if loaded and ready otherwise non ready - TO DO
  * */
  this.loadedPlugin = function (plugin, ready) {
    _applicationstate2.default.plugins = _applicationstate2.default.plugins.filter(function (_plugin) {
      return _plugin !== plugin;
    });
  };

  this._setFilterToken = function (filtertoken) {
    _applicationstate2.default.tokens.filtertoken = filtertoken;
  };

  this.getFilterToken = function () {
    return _applicationstate2.default.tokens.filtertoken;
  };

  this.changeLanguage = function (lng) {
    changeLanguage(lng);
    _applicationstate2.default.lng = lng;
    var pathname = window.location.pathname;
    var pathArray = pathname.split('/');
    pathArray[1] = lng;
    history.replaceState(null, null, pathArray.join('/'));
  };

  this.registerOnlineOfflineEvent = function () {
    var _this = this;

    this.registerWindowEvent({
      evt: 'online',
      cb: function cb() {
        return _this.online();
      }
    });

    this.registerWindowEvent({
      evt: 'offline',
      cb: function cb() {
        return _this.offline();
      }
    });
  };

  this.getBaseLayerId = function () {
    return _applicationstate2.default.baseLayerId;
  };

  this.setBaseLayerId = function (baseLayerId) {
    _applicationstate2.default.baseLayerId = baseLayerId;
  };

  this.registerLeavePage = function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$bool = _ref3.bool,
        bool = _ref3$bool === undefined ? false : _ref3$bool,
        _ref3$message = _ref3.message,
        message = _ref3$message === undefined ? '' : _ref3$message;

    var _return = !bool ? undefined : bool;
    window.onbeforeunload = function (event) {
      return _return;
    };
  };

  this.unregisterOnlineOfflineEvent = function () {
    window.removeEventListener('online');
    window.removeEventListener('offline');
  };

  this.getState = function () {
    return _applicationstate2.default;
  };

  this.disableApplication = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _applicationstate2.default.gui.app.disabled = bool;
  };

  this.setApplicationLanguage = function () {
    var lng = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';

    _applicationstate2.default.lng = lng;
  };

  this.getApplicationLanguage = function () {
    return _applicationstate2.default.lng;
  };

  this.setOnline = function () {
    _applicationstate2.default.online = true;
  };

  this.setOffline = function () {
    _applicationstate2.default.online = false;
  };

  this.isOnline = function () {
    return _applicationstate2.default.online;
  };

  this.setOfflineItem = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.setLocalItem({
                id: id,
                data: data
              });

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x7) {
      return _ref4.apply(this, arguments);
    };
  }();

  this.setLocalItem = function () {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        id = _ref5.id,
        data = _ref5.data;

    try {
      var item = JSON.stringify(data);
      window.localStorage.setItem(id, item);
    } catch (error) {
      return error;
    }
  };

  this.removeLocalItem = function (id) {
    window.localStorage.removeItem(id);
  };

  this.getLocalItem = function (id) {
    var item = window.localStorage.getItem(id);
    if (item) return JSON.parse(item);else return undefined;
  };

  this.getOfflineItem = function (id) {
    return this.getLocalItem(id);
  };

  this.removeOfflineItem = function (id) {
    this.removeLocalItem(id);
  };

  //check if is in Iframe
  this.isIframe = function () {
    return _applicationstate2.default.iframe;
  };

  // get config
  this.getConfig = function () {
    return this._config;
  };

  this.setConfig = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this._config = config;
  };

  // router service
  this.getRouterService = function () {
    return RouterService;
  };

  // clipboard service
  this.getClipboardService = function () {
    return ClipboardService;
  };

  /**
   * Create application config object
   * @param initConfig
   * @returns {Promise<string|{terms_of_use_link, projects: ([{gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}], type: string}, {gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}, {qgs_layer_id: string, fields: [string]}, {qgs_layer_id: string, fields: [string]}], type: string}, {gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}, {qgs_layer_id: string, fields: [string]}], type: string}]|{gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}], type: string}|[]), maxscale: (null|ProjectsRegistry.setProjects.config.maxscale), mediaurl: *, plugins: *, mapcontrols: *, tools: *, resourcesurl: *, initproject, urls: *, credits: *, getWmsUrl(*): string, _i18n: ({resources: {se: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, no_data: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}, fi: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, no_data: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}, en: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, no_data: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}, it: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {title: string, error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {zoom_to_features_extent: string, download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}}}|{resources: *}), views: (*|{}), group: *, vectorurl: *, debug: boolean, crs: *, apptitle: (string), header_custom_links, i18n: *, overviewproject: (*|null), layout: (*|{}), logo_img: *, baselayers: (string|vueComponentOptions.computed.baselayers|{count: number}|*), logo_link: *, background_color, terms_of_use_text: *, main_map_title: *, getProjectConfigUrl(*): string, user: (*|null), minscale: ProjectsRegistry.setProjects.config.minscale}>}
   */
  this.createApplicationConfig = function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(initConfig) {
      var config;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              config = _extends({}, _config2.default);
              _context3.prev = 1;

              if (!initConfig) {
                _context3.next = 6;
                break;
              }

              _context3.t0 = initConfig;
              _context3.next = 9;
              break;

            case 6:
              _context3.next = 8;
              return this.obtainInitConfig({
                initConfigUrl: '' + _config2.default.server.urls.initconfig
              });

            case 8:
              _context3.t0 = _context3.sent;

            case 9:
              initConfig = _context3.t0;

              // write urls of static files and media url (base url and vector url)
              this.baseurl = initConfig.baseurl;
              config.server.urls.baseurl = initConfig.baseurl;
              config.server.urls.frontendurl = initConfig.frontendurl;
              config.server.urls.staticurl = initConfig.staticurl;
              config.server.urls.clienturl = initConfig.staticurl + initConfig.client;
              config.server.urls.mediaurl = initConfig.mediaurl;
              config.server.urls.vectorurl = initConfig.vectorurl;
              config.main_map_title = initConfig.main_map_title;
              config.group = initConfig.group;
              config.user = initConfig.user;
              config.credits = initConfig.credits;
              config.i18n = initConfig.i18n;
              // get language from server
              config._i18n.lng = config.user.i18n;
              // create application configuration
              // check if is inside a iframe
              config.group.layout.iframe = window.top !== window.self;
              return _context3.abrupt('return', {
                apptitle: config.apptitle || '',
                logo_img: config.group.header_logo_img,
                logo_link: config.group.header_logo_link,
                terms_of_use_text: config.group.header_terms_of_use_text,
                terms_of_use_link: config.group.terms_of_use_link,
                header_custom_links: config.group.header_custom_links,
                debug: config.client.debug || false,
                group: config.group,
                urls: config.server.urls,
                mediaurl: config.server.urls.mediaurl,
                resourcesurl: config.server.urls.clienturl,
                vectorurl: config.server.urls.vectorurl,
                projects: config.group.projects,
                initproject: config.group.initproject,
                overviewproject: config.group.overviewproject && config.group.overviewproject.gid ? config.group.overviewproject : null,
                baselayers: config.group.baselayers,
                mapcontrols: config.group.mapcontrols,
                background_color: config.group.background_color,
                crs: config.group.crs,
                minscale: config.group.minscale,
                maxscale: config.group.maxscale,
                main_map_title: config.main_map_title,
                credits: config.credits,
                _i18n: config._i18n,
                i18n: config.i18n,
                layout: config.group.layout || {},
                // needed by ProjectService
                getWmsUrl: function getWmsUrl(project) {
                  return config.server.urls.baseurl + config.server.urls.ows + '/' + config.group.id + '/' + project.type + '/' + project.id + '/';
                },

                // needed by ProjectsRegistry to get informations about project configuration
                getProjectConfigUrl: function getProjectConfigUrl(project) {
                  return config.server.urls.baseurl + config.server.urls.config + '/' + config.group.id + '/' + project.type + '/' + project.id + '?_t=' + project.modified;
                },

                plugins: config.group.plugins,
                tools: config.tools,
                views: config.views || {},
                user: config.user || null
              });

            case 27:
              _context3.prev = 27;
              _context3.t1 = _context3['catch'](1);
              return _context3.abrupt('return', Promise.reject(_context3.t1));

            case 30:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this, [[1, 27]]);
    }));

    return function (_x10) {
      return _ref6.apply(this, arguments);
    };
  }();

  this.obtainInitConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        initConfigUrl = _ref8.initConfigUrl,
        url = _ref8.url,
        host = _ref8.host;

    var projectPath, queryTuples, locationsearch, type_id, _url, _initConfig;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!this._initConfigUrl) this._initConfigUrl = initConfigUrl;else this.clearInitConfig();
            // if exist a global initiConfig (in production)

            if (!window.initConfig) {
              _context4.next = 8;
              break;
            }

            production = true;
            this._initConfig = window.initConfig;
            this.setInitVendorKeys(initConfig);
            return _context4.abrupt('return', window.initConfig);

          case 8:
            // LOAD DEVELOPMENT CONFIGURATION
            require('../dev/index');
            projectPath = void 0;
            queryTuples = void 0;
            locationsearch = url ? url.split('?')[1] : location.search ? location.search.substring(1) : null;

            if (locationsearch) {
              queryTuples = locationsearch.split('&');
              queryTuples.forEach(function (queryTuple) {
                //check if exist project in url
                if (queryTuple.indexOf("project") > -1) {
                  projectPath = queryTuple.split("=")[1];
                }
              });
            } else {
              type_id = this._gid.split(':').join('/');

              projectPath = this._groupId + '/' + type_id;
            }

            if (!projectPath) {
              _context4.next = 33;
              break;
            }

            _url = '' + (host || '') + this.baseurl + this._initConfigUrl + '/' + projectPath;
            // get configuration from server (return a promise)

            _context4.prev = 15;
            _context4.next = 18;
            return this.getInitConfig(_url);

          case 18:
            _initConfig = _context4.sent;

            //group, mediaurl, staticurl, user
            _initConfig.staticurl = "../dist/"; // in development force  asset
            _initConfig.clienturl = "../dist/"; // in development force  asset
            this._initConfig = _initConfig;
            // set initConfig
            window.initConfig = _initConfig;
            this.setInitVendorKeys(_initConfig);
            return _context4.abrupt('return', _initConfig);

          case 27:
            _context4.prev = 27;
            _context4.t0 = _context4['catch'](15);
            return _context4.abrupt('return', Promise.reject(_context4.t0));

          case 30:
            _context4.prev = 30;

            this.emit('initconfig');
            return _context4.finish(30);

          case 33:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this, [[15, 27, 30, 33]]);
  }));

  // method to get initial application configuration
  this.getInitConfig = function (url) {
    var _this2 = this;

    return new Promise(function (resolve, reject) {
      if (_this2._initConfig) resolve(_this2._initConfig);else XHR.get({ url: url }).then(function (initConfig) {
        return resolve(initConfig);
      }).catch(function (error) {
        return reject(error);
      });
    });
  };

  this.getInitConfigUrl = function () {
    return this._initConfigUrl;
  };

  this.setInitConfigUrl = function (initConfigUrl) {
    this._initConfigUrl = initConfigUrl;
  };

  // post boostratp
  this.postBootstrap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (this.complete) {
              _context5.next = 13;
              break;
            }

            _context5.prev = 1;

            RouterService.init();
            // once the projects are inizilized and also api service
            // register  plugins
            _context5.next = 5;
            return this._bootstrapPlugins();

          case 5:
            _context5.next = 9;
            break;

          case 7:
            _context5.prev = 7;
            _context5.t0 = _context5['catch'](1);

          case 9:
            _context5.prev = 9;

            this.complete = true;
            this.emit('complete');
            return _context5.finish(9);

          case 13:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[1, 7, 9, 13]]);
  }));

  //boostrap plugins
  this._bootstrapPlugins = function () {
    return PluginsRegistry.init({
      pluginsBaseUrl: this._config.urls.staticurl,
      pluginsConfigs: this._config.plugins,
      otherPluginsConfig: ProjectsRegistry.getCurrentProject().getState()
    });
  };

  //set EPSG of Application is usefule for example to wms request for table layer
  this.setEPSGApplication = function (project) {
    _applicationstate2.default.map.epsg = project.state.crs.epsg;
  };

  //  bootstrap (when called init)
  this.bootstrap = function () {
    var _this3 = this;

    return new Promise(function (resolve, reject) {
      // setup All i18n configuration
      _this3.setupI18n();
      // run Timeout
      var timeout = setTimeout(function () {
        reject('Timeout');
      }, TIMEOUT);
      //first time l'application service is not ready
      if (!_applicationstate2.default.ready) {
        $.when(
        // register project
        ProjectsRegistry.init(_this3._config),
        // inizialize api service
        ApiService.init(_this3._config)).then(function () {
          // clear TIMEOUT
          clearTimeout(timeout);
          //clear
          _this3.registerOnlineOfflineEvent();
          _this3.emit('ready');
          _applicationstate2.default.ready = _this3.initialized = true;
          // set current project gid
          var project = ProjectsRegistry.getCurrentProject();
          _this3._gid = project.getGid();
          //sett
          _this3.setEPSGApplication(project);
          //IFRAME CHECK
          _applicationstate2.default.iframe && _this3.startIFrameService({
            project: project
          });
          // initilize routerdataservice
          RouterDataService.init();
          resolve(true);
        }).fail(function (error) {
          return reject(error);
        });
      }
    });
  };

  //iframeservice
  this.startIFrameService = function () {
    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        project = _ref10.project;

    var iframeService = require('core/iframe/routerservice');
    iframeService.init({ project: project });
  };

  this.registerWindowEvent = function () {
    var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        evt = _ref11.evt,
        cb = _ref11.cb;

    window.addEventListener(evt, cb);
  };

  this.unregisterWindowEvent = function () {
    var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        evt = _ref12.evt,
        cb = _ref12.cb;

    window.removeEventListener(evt, cb);
  };

  this.registerService = function (element, service) {
    this._applicationServices[element] = service;
  };

  this.unregisterService = function (element) {
    delete this._applicationServices[element];
  };

  this.getApplicationService = function (type) {
    return this._applicationServices[type];
  };

  this.getService = function (element) {
    return this._applicationServices[element];
  };

  this.errorHandler = function (error) {};

  /**
   * clear initConfig
   */
  this.clearInitConfig = function () {
    window.initConfig = null;
    this._initConfig = null;
  };

  this.setInitVendorKeys = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var vendorkeys = config.group.vendorkeys || {};
    config.group.baselayers.forEach(function (baselayer) {
      if (baselayer.apikey) {
        var type = baselayer.servertype ? baselayer.servertype.toLowerCase() : null;
        vendorkeys[type] = baselayer.apikey;
      }
    });
    this.setVendorKeys(vendorkeys);
  };

  this.setVendorKeys = function () {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    Object.keys(keys).forEach(function (key) {
      _applicationstate2.default.keys.vendorkeys[key] = keys[key];
    });
  };

  this.reloadCurrentProject = function () {
    return this.changeProject({
      gid: ProjectsRegistry.getCurrentProject().getGid()
    });
  };

  /**
   * Change project method that do all request and rebuild interface
   * @param gid
   * @param host
   * @returns {JQuery.Promise<any, any, any>}
   * @private
   */
  this._changeProject = function () {
    var _this4 = this;

    var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gid = _ref13.gid,
        host = _ref13.host;

    var d = $.Deferred();
    var reload = this._gid === gid;
    this._gid = gid;
    var aliasUrl = ProjectsRegistry.getProjectAliasUrl(gid);
    var mapUrl = ProjectsRegistry.getProjectUrl(gid);
    // change url using history
    production && aliasUrl && history.replaceState(null, null, aliasUrl) || history.replaceState(null, null, mapUrl);
    //remove tools
    this.obtainInitConfig({
      host: host
    }).then(function (initConfig) {
      // run Timeout
      var timeout = setTimeout(function () {
        reject('Timeout');
      }, TIMEOUT);
      ProjectsRegistry.setProjects(initConfig.group.projects);
      ProjectsRegistry.getProject(gid, {
        reload: reload // force to reload configuration
      }).then(function (project) {
        //clearTimeout
        clearTimeout(timeout);
        ///
        GUI.closeUserMessage();
        GUI.closeContent().then(function () {
          // remove all tools
          ProjectsRegistry.onceafter('setCurrentProject', function () {
            GUI.getComponent('tools').getService().reload();
            // reload metadati
            GUI.getComponent('metadata').getService().reload();
            // reload plugins
            PluginsRegistry.reloadPlugins(initConfig, project).then(function () {}).catch(function () {}).finally(function () {
              // reload components
              GUI.reloadComponents();
              d.resolve(project);
            });
          });
          // change current project project
          ProjectsRegistry.setCurrentProject(project);
          _this4.setEPSGApplication(project);
          _applicationstate2.default.download = false;
        }).fail(function (err) {
          return console.log;
        });
      }).fail(function () {
        return d.reject();
      });
    }).catch(function (error) {
      return d.reject(error);
    });
    return d.promise();
  };

  this.clear = function () {
    this.unregisterOnlineOfflineEvent();
  };
};

inherit(ApplicationService, G3WObject);

module.exports = new ApplicationService();

},{"../dev/index":500,"./applicationstate":402,"config":737,"core/apiservice":400,"core/clipboardservice":404,"core/data/routerservice":406,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/iframe/routerservice":419,"core/plugin/pluginsregistry":472,"core/project/projectsregistry":478,"core/router":482,"core/utils/utils":485,"gui/gui":575}],402:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
// state of application reactive
var STATE = Vue.observable({
  ready: false, // true whe application is ready
  iframe: false, // true if is loaded inside an iframe
  online: false, // true if is connected
  ismobile: false, // true if application is loaded on mobile device
  download: false, // true if there is a downloaded that is waiting
  upload: false, // upload
  baseLayerId: null,
  lng: 'en', // language default
  plugins: [],
  map: {
    epsg: ''
  },
  gui: {
    app: {
      disabled: false // if application is disable non cliccable (in waiting)
    },
    sidebar: {
      disabled: false // true if sidebar is disabled (not responsive)
    }
  },
  keys: {
    vendorkeys: {
      google: undefined,
      bing: undefined
    }
  },
  tokens: {
    filtertoken: undefined
  }
});

exports.default = STATE;

},{}],403:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var LayersStoresRegistry = require('core/layers/layersstoresregistry');

function CatalogLayersStoresRegistry() {
  base(this);
}

inherit(CatalogLayersStoresRegistry, LayersStoresRegistry);

module.exports = new CatalogLayersStoresRegistry();

},{"core/layers/layersstoresregistry":446,"core/utils/utils":485}],404:[function(require,module,exports){
function ClipboardService() {
  this._data = {};
  this.set = function (formId, data) {
    var formLayer = formId.split('form')[0];
    this._data[formLayer] = data;
  };

  this.get = function (formLayer) {
    var data = this._data[formLayer] || {};
    this._data[formLayer] = {};
    return data;
  };
}
module.exports = new ClipboardService();

},{}],405:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var BaseService = require('core/data/service');

var _require3 = require('core/utils/geo'),
    getQueryLayersPromisesByCoordinates = _require3.getQueryLayersPromisesByCoordinates,
    getQueryLayersPromisesByGeometry = _require3.getQueryLayersPromisesByGeometry,
    getQueryLayersPromisesByBBOX = _require3.getQueryLayersPromisesByBBOX,
    getMapLayersByFilter = _require3.getMapLayersByFilter;

function QueryService() {
  base(this);
  /**
   *
   * @type {{filtrable: {ows: string}}}
   */
  this.condition = {
    filtrable: { ows: 'WFS' }
  };

  /**
   *
   * @param geometry
   * @param feature_count
   * @param multilayers
   * @param condition
   * @param excludeLayers
   * @returns {Promise<unknown>}
   */
  this.polygon = function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        geometry = _ref.geometry,
        fid = _ref.fid,
        _ref$feature_count = _ref.feature_count,
        feature_count = _ref$feature_count === undefined ? this.project.getQueryFeatureCount() : _ref$feature_count,
        _ref$filterConfig = _ref.filterConfig,
        filterConfig = _ref$filterConfig === undefined ? {} : _ref$filterConfig,
        _ref$multilayers = _ref.multilayers,
        multilayers = _ref$multilayers === undefined ? false : _ref$multilayers,
        _ref$condition = _ref.condition,
        condition = _ref$condition === undefined ? this.condition : _ref$condition,
        _ref$excludeLayers = _ref.excludeLayers,
        excludeLayers = _ref$excludeLayers === undefined ? [] : _ref$excludeLayers;

    var polygonLayer = excludeLayers[0];
    // in case no geometry on polygon layer response
    if (!geometry) return this.returnExceptionResponse({
      usermessage: {
        type: 'warning',
        message: polygonLayer.getName() + ' - ' + t('sdk.mapcontrols.querybypolygon.no_geometry'),
        messagetext: true,
        autoclose: false
      }
    });
    var layerFilterObject = {
      ALLNOTSELECTED: true,
      FILTERABLE: true,
      VISIBLE: true
    };
    var layers = getMapLayersByFilter(layerFilterObject, condition).filter(function (layer) {
      return excludeLayers.indexOf(layer) === -1;
    });
    var request = getQueryLayersPromisesByGeometry(layers, {
      geometry: geometry,
      multilayers: multilayers,
      bbox: false,
      feature_count: feature_count,
      filterConfig: filterConfig,
      projection: this.project.getProjection()
    });
    return this.handleRequest(request, {
      geometry: geometry,
      fid: fid,
      name: polygonLayer.getName()
    });
  };

  /**
   *
   * @param bbox
   * @param feature_count
   * @param multilayers
   * @param condition
   * @param layersFilterObject
   * @returns {Promise<unknown>}
   */
  this.bbox = function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        bbox = _ref2.bbox,
        _ref2$feature_count = _ref2.feature_count,
        feature_count = _ref2$feature_count === undefined ? this.project.getQueryFeatureCount() : _ref2$feature_count,
        _ref2$multilayers = _ref2.multilayers,
        multilayers = _ref2$multilayers === undefined ? false : _ref2$multilayers,
        _ref2$condition = _ref2.condition,
        condition = _ref2$condition === undefined ? this.condition : _ref2$condition,
        _ref2$layersFilterObj = _ref2.layersFilterObject,
        layersFilterObject = _ref2$layersFilterObj === undefined ? { SELECTEDORALL: true, FILTERABLE: true, VISIBLE: true } : _ref2$layersFilterObj;

    var layers = getMapLayersByFilter(layersFilterObject, condition);
    var request = getQueryLayersPromisesByBBOX(layers, {
      bbox: bbox,
      feature_count: feature_count,
      multilayers: multilayers
    });
    return this.handleRequest(request, {
      bbox: bbox
    });
  };

  /**
   *
   * @param map
   * @param coordinates
   * @param multilayers
   * @param feature_count
   * @returns {Promise<unknown>}
   */
  this.coordinates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        coordinates = _ref4.coordinates,
        _ref4$layerIds = _ref4.layerIds,
        layerIds = _ref4$layerIds === undefined ? [] : _ref4$layerIds,
        _ref4$multilayers = _ref4.multilayers,
        multilayers = _ref4$multilayers === undefined ? false : _ref4$multilayers,
        feature_count = _ref4.feature_count;

    var layersFilterObject, layers, request;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            layersFilterObject = {
              QUERYABLE: true,
              SELECTEDORALL: true,
              VISIBLE: true
            };

            Array.isArray(layerIds) && layerIds.forEach(function (layerId) {
              if (!layersFilterObject.IDS) layersFilterObject.IDS = [];
              layersFilterObject.IDS.push(layerId);
            });
            layers = getMapLayersByFilter(layersFilterObject);
            request = getQueryLayersPromisesByCoordinates(layers, {
              multilayers: multilayers,
              feature_count: feature_count,
              coordinates: coordinates
            });
            return _context.abrupt('return', this.handleRequest(request, {
              coordinates: coordinates
            }));

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  /**
   *
   * @param request is a Promise(jquery promise at moment
   * @returns {Promise<unknown>}
   */
  this.handleRequest = function (request) {
    var _this = this;

    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      request.then(function (response) {
        var results = _this.handleResponse(response, query);
        resolve(results);
      }).fail(function (error) {
        return reject(error);
      });
    });
  };

  /**
   *
   * @param response
   * @returns {Promise<{result: boolean, data: [], query: (*|null)}>}
   */
  this.handleResponse = function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var layersResults, results;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              layersResults = response;
              results = {
                query: query,
                type: 'ows',
                data: [],
                result: true // set result to true
              };

              layersResults.forEach(function (result) {
                return result.data && result.data.forEach(function (data) {
                  results.data.push(data);
                });
              });
              return _context2.abrupt('return', results);

            case 4:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x6) {
      return _ref5.apply(this, arguments);
    };
  }();

  /**
   * Exxception response has user message attribute
   */
  this.returnExceptionResponse = function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref6) {
      var usermessage = _ref6.usermessage;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt('return', {
                data: [],
                usermessage: usermessage,
                result: true,
                error: true
              });

            case 1:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x7) {
      return _ref7.apply(this, arguments);
    };
  }();
}

inherit(QueryService, BaseService);

module.exports = new QueryService();

},{"core/data/service":408,"core/i18n/i18n.service":418,"core/utils/geo":484,"core/utils/utils":485}],406:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var queryService = require('core/data/query/service');
var searchService = require('core/data/search/service');
var IFrameRouterService = require('core/iframe/routerservice');

var _require = require('core/utils/utils'),
    splitContextAndMethod = _require.splitContextAndMethod;

var GUI = require('gui/gui');

function Routerservice() {
  //set deafult outputplace
  this.defaultoutputplaces = ['gui'];
  // set current outputplaces
  this.currentoutputplaces = [].concat(_toConsumableArray(this.defaultoutputplaces)); // array contains all

  /**
   * Object contain outplut function to show results
   * @type {{gui(*=, *=): void, iframe(*=, *=): void}}
   */
  this.ouputplaces = {
    gui: function gui(dataPromise) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      GUI.outputDataPlace(dataPromise, options);
    },
    iframe: function iframe(dataPromise) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      IFrameRouterService.outputDataPlace(dataPromise, options);
    }
  };

  /**
   *
   * @returns {Promise<void>}
   */
  this.init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            this.services = {
              query: queryService,
              search: searchService
            };

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  /**
   *
   * @param contextAndMethod 'String contain type of service(search or query): method'
   * @param options
   * @returns {Promise<void>}
   */
  this.getData = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(contextAndMethod) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _splitContextAndMetho, context, method, service, _options$inputs, inputs, _options$outputs, outputs, dataPromise, data;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _splitContextAndMetho = splitContextAndMethod(contextAndMethod), context = _splitContextAndMetho.context, method = _splitContextAndMetho.method;
              service = this.getService(context);
              _options$inputs = options.inputs, inputs = _options$inputs === undefined ? {} : _options$inputs, _options$outputs = options.outputs, outputs = _options$outputs === undefined ? {} : _options$outputs;
              //return a promise and not the data

              dataPromise = service[method](inputs);

              outputs && this.currentoutputplaces.forEach(function (place) {
                _this.ouputplaces[place](dataPromise, outputs);
              });
              //return always data
              _context2.next = 7;
              return dataPromise;

            case 7:
              data = _context2.sent;
              _context2.next = 10;
              return data;

            case 10:
              return _context2.abrupt('return', _context2.sent);

            case 11:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  /**
   * Set a costum datapromiseoutput to applicationa outputs settede
   * @param dataPromise
   */
  this.showCustomOutputDataPromise = function (dataPromise) {
    var _this2 = this;

    this.currentoutputplaces.forEach(function (place) {
      _this2.ouputplaces[place](dataPromise, {});
    });
  };

  /**
   *
   * @param serviceName
   * @returns {*}
   */
  this.getService = function (serviceName) {
    return this.services[serviceName];
  };

  /*
  * */
  this.setOutputPlaces = function () {
    var places = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    this.currentoutputplaces = places;
  };

  /**
   *
   * @param place
   */
  this.addCurrentOutputPlace = function (place) {
    place && this.currentoutputplaces.indexOf(place) === -1 && this.currentoutputplaces.push(place);
  };

  /**
   *
   * @param place
   * @param method has to get two parameters data (promise) and options (Object)
   * ex {
   * place: <newplace>
   * method: function(dataPromise, options={}){}
   *   }
   */
  this.addNewOutputPlace = function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        place = _ref3.place,
        _ref3$method = _ref3.method,
        method = _ref3$method === undefined ? function () {} : _ref3$method;

    var added = false;
    if (this.ouputplaces[place] === undefined) {
      this.ouputplaces[place] = method;
      added = true;
    }
    return added;
  };

  // reset default configuration
  this.resetDefaultOutput = function () {
    this.currentoutputplaces = [].concat(_toConsumableArray(this.defaultoutputplaces));
  };
}

module.exports = new Routerservice();

},{"core/data/query/service":405,"core/data/search/service":407,"core/iframe/routerservice":419,"core/utils/utils":485,"gui/gui":575}],407:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var BaseService = require('core/data/service');

function SearchService() {
  base(this);
  // method to searchfeature features
  this.features = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { layer: layer, search_endpoint: search_endpoint, filter: filter, raw: false, queryUrl: queryUrl, feature_count: feature_count };
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var promisesSearch, layer, params, _options$raw, raw, dataSearch, layers, provider, promise, responses;

              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      promisesSearch = [];
                      layer = options.layer, params = _objectWithoutProperties(options, ['layer']);
                      _options$raw = options.raw, raw = _options$raw === undefined ? false : _options$raw;
                      dataSearch = {
                        data: [],
                        type: params.search_endpoint
                      };
                      // check if layer is array

                      layers = Array.isArray(layer) ? layer : [layer];
                      //check if filter is array

                      params.filter = Array.isArray(params.filter) ? params.filter : [params.filter];
                      // if api or ows search_endpoint
                      if (params.search_endpoint === 'api') layers.forEach(function (layer, index) {
                        return promisesSearch.push(layer.searchFeatures(_extends({}, params, {
                          filter: params.filter[index]
                        })));
                      });else {
                        // need to get query provider for get one request only
                        provider = layers[0].getProvider('search');
                        promise = new Promise(function (resolve, reject) {
                          provider.query(_extends({}, params, {
                            layers: layers
                          }, layers[0].getSearchParams()) // nee to get search params
                          ).then(function (data) {
                            resolve({
                              data: data
                            });
                          }).fail(reject);
                        });

                        promisesSearch.push(promise);
                      }
                      _context.next = 9;
                      return Promise.allSettled(promisesSearch);

                    case 9:
                      responses = _context.sent;


                      responses.forEach(function () {
                        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                            status = _ref3.status,
                            value = _ref3.value;

                        if (raw) {
                          dataSearch.data.push(value);
                        } else {
                          var _value$data = value.data,
                              data = _value$data === undefined ? [] : _value$data;

                          params.search_endpoint === 'api' ? data.length && dataSearch.data.push(data[0]) : dataSearch.data = data;
                        }
                      });
                      return _context.abrupt('return', dataSearch);

                    case 12:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }))());

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
}

inherit(SearchService, BaseService);

module.exports = new SearchService();

},{"core/data/service":408,"core/utils/utils":485}],408:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var ProjectsRegistry = require('core/project/projectsregistry');

function BaseService() {
  var _this = this;

  ProjectsRegistry.onbefore('setCurrentProject', function (project) {
    return _this.project = project;
  });
  this.project = ProjectsRegistry.getCurrentProject();
}

var proto = BaseService.prototype;

/**
 *
 * @param request is a Promise(jquery promise at moment
 * @returns {Promise<unknown>}
 */
proto.handleRequest = function (request) {
  //  OVERWRITE TO SERVICE
};

proto.handleResponse = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = BaseService;

},{"core/project/projectsregistry":478}],409:[function(require,module,exports){
//lass that is usefult to apply changes to features (undo/redo) singleton
function ChangesManager() {
  this.execute = function (object, items, reverse) {
    var fnc = void 0;
    var feature = void 0;
    items.forEach(function (item) {
      feature = item.feature;
      if (reverse) {
        // change to opposite
        feature[ChangesManager.Actions[feature.getState()].opposite]();
      }
      // get method from object
      fnc = ChangesManager.Actions[feature.getState()].fnc;
      object[fnc](feature);
    });
  };
}

// know actions
ChangesManager.Actions = {
  'add': {
    fnc: 'addFeature',
    opposite: 'delete'
  },
  'delete': {
    fnc: 'removeFeature',
    opposite: 'add'
  },
  'update': {
    fnc: 'updateFeature',
    opposite: 'update'
  }
};

module.exports = new ChangesManager();

},{}],410:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var G3WObject = require('core/g3wobject');
var FeaturesStore = require('core/layers/features/featuresstore');
var OlFeaturesStore = require('core/layers/features/olfeaturesstore');
var Layer = require('core/layers/layer');
var ChangesManager = require('./changesmanager');

// class Editor bind editor to layer to do main actions
function Editor() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.setters = {
    save: function save() {
      this._save();
    },
    addFeature: function addFeature(feature) {
      this._addFeature(feature);
    },
    updateFeature: function updateFeature(feature) {
      this._updateFeature(feature);
    },
    deleteFeature: function deleteFeature(feature) {
      this._deleteFeature(feature);
    },
    setFeatures: function setFeatures() {
      var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this._setFeatures(features);
    },
    getFeatures: function getFeatures() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this._getFeatures(options);
    }
  };
  base(this);
  // filter to getFeaturerequest
  this._filter = {
    bbox: null
  };

  this._allfeatures = false;
  // referred layer
  this._layer = options.layer;
  // editing featurestore
  this._featuresstore = this._layer.getType() === Layer.LayerTypes.TABLE ? new FeaturesStore() : new OlFeaturesStore();
  // editor is active or not
  this._started = false;
  // not editable fields
  this._noteditablefileds = this._layer.getEditingNotEditableFields() || [];
}

inherit(Editor, G3WObject);

var proto = Editor.prototype;

proto._canDoGetFeaturesRequest = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var doRequest = true;
  if (this._layer.getType() === Layer.LayerTypes.VECTOR) {
    var _ref = options.filter || {},
        bbox = _ref.bbox;

    if (bbox) {
      if (!this._filter.bbox) this._filter.bbox = bbox;else if (!ol.extent.containsExtent(this._filter.bbox, bbox)) {
        this._filter.bbox = ol.extent.extend(this._filter.bbox, bbox);
      } else doRequest = false;
    }
  }
  return doRequest;
};

proto.getEditingSource = function () {
  return this._featuresstore;
};

proto.getSource = function () {
  this._layer.getSource();
};

proto._applyChanges = function () {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  ChangesManager.execute(this._featuresstore, items, reverse);
};

proto.setChanges = function (items, reverse) {
  this._applyChanges(items, reverse);
};

proto.getLayer = function () {
  return this._layer;
};

proto.setLayer = function (layer) {
  this._layer = layer;
  return this._layer;
};

proto.removeNotEditablePropriertiesFromFeature = function (feature) {
  this._noteditablefileds.forEach(function (field) {
    feature.unset([field]);
  });
};

//clone features method
proto._cloneFeatures = function (features) {
  return features.map(function (feature) {
    return feature.clone();
  });
};

proto._addFeaturesFromServer = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  features = this._cloneFeatures(features);
  this._featuresstore.addFeatures(features);
};

proto._doGetFeaturesRequest = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var doRequest = _applicationstate2.default.online && !this._allfeatures;
  return doRequest && this._canDoGetFeaturesRequest(options);
};

// fget features methods
proto._getFeatures = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var doRequest = this._doGetFeaturesRequest(options);
  if (!doRequest) d.resolve();else this._layer.getFeatures(options).then(function (promise) {
    promise.then(function (features) {
      _this._addFeaturesFromServer(features);
      _this._allfeatures = !options.filter;
      return d.resolve(features);
    }).fail(function (err) {
      return d.reject(err);
    });
  }).fail(function (err) {
    d.reject(err);
  });
  return d.promise();
};

// method to revert (cancel) all changes in history and clean session
proto.revert = function () {
  var d = $.Deferred();
  var features = this._cloneFeatures(this._layer.readFeatures());
  this._featuresstore.setFeatures(features);
  d.resolve();
  return d.promise();
};

proto.rollback = function () {
  var changes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var d = $.Deferred();
  this._applyChanges(changes, true);
  d.resolve();
  return d.promise();
};

proto.applyChangesToNewRelationsAfterCommit = function (relationsResponse) {
  for (var relationLayerId in relationsResponse) {
    var response = relationsResponse[relationLayerId];
    var layer = this.getLayerById(relationLayerId);
    var editingLayerSource = this.getEditingLayer(relationLayerId).getEditingSource();
    var features = editingLayerSource.readFeatures();
    features.forEach(function (feature) {
      feature.clearState();
    });
    layer.getSource().setFeatures(features);
    layer.applyCommitResponse({
      response: response,
      result: true
    });
    editingLayerSource.setFeatures(layer.getSource().readFeatures());
  }
};

proto.setFieldValueToRelationField = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      relationId = _ref2.relationId,
      ids = _ref2.ids,
      field = _ref2.field,
      _ref2$values = _ref2.values,
      values = _ref2$values === undefined ? [] : _ref2$values;

  var SessionsRegistry = require('./sessionsregistry');
  var editingLayerSource = SessionsRegistry.getSession(relationId).getEditor().getEditingSource();
  ids.forEach(function (id) {
    var feature = editingLayerSource.getFeatureById(id);
    if (feature) {
      var fieldvalue = feature.get(field);
      fieldvalue == values[0] && feature.set(field, values[1]);
    }
  });
};

// apply response data from server in case of new inserted feature
proto.applyCommitResponse = function () {
  var _this2 = this;

  var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var relations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (response && response.result) {
    var data = response.response;

    var ids = data.new;
    var lockids = data.new_lockids;
    ids.forEach(function (idobj) {
      var feature = _this2._featuresstore.getFeatureById(idobj.clientid);
      feature.setId(idobj.id);
      feature.setProperties(idobj.properties);
      relations.forEach(function (relation) {
        Object.entries(relation).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              relationId = _ref4[0],
              options = _ref4[1];

          var value = feature.get(options.fatherField);
          _this2.setFieldValueToRelationField({
            relationId: relationId,
            ids: options.ids,
            field: options.childField,
            values: [idobj.clientid, value]
          });
        });
      });
    });
    var features = this._featuresstore.readFeatures();
    features.forEach(function (feature) {
      return feature.clearState();
    });
    this._layer.setFeatures(features);
    this._layer.getSource().addLockIds(lockids);
  }
};

proto.getLockIds = function () {
  return this._layer.getSource().getLockIds();
};

// run after server apply changed to origin resource
proto.commit = function (commitItems) {
  var _this3 = this;

  var d = $.Deferred();
  // in case of relations bind to new feature
  var relations = commitItems.add.length ? Object.keys(commitItems.relations).map(function (relationId) {
    var layerRelation = _this3._layer.getRelations().getRelationByFatherChildren(_this3._layer.getId(), relationId);
    var updates = commitItems.relations[relationId].update.map(function (relation) {
      return relation.id;
    });
    var add = commitItems.relations[relationId].add.map(function (relation) {
      return relation.id;
    });
    return _defineProperty({}, relationId, {
      ids: [].concat(_toConsumableArray(add), _toConsumableArray(updates)),
      fatherField: layerRelation.getFatherField(),
      childField: layerRelation.getChildField()
    });
  }) : [];
  this._layer.commit(commitItems).then(function (promise) {
    promise.then(function (response) {
      _this3.applyCommitResponse(response, relations);
      d.resolve(response);
    }).fail(function (err) {
      return d.reject(err);
    });
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

//start editing function
proto.start = function () {
  var _this4 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  // load features of layer based on filter type
  this.getFeatures(options).then(function (promise) {
    promise.then(function (features) {
      // the features are already inside featuresstore
      d.resolve(features);
      //if all ok set to started
      _this4._started = true;
    }).fail(function (err) {
      return d.reject(err);
    });
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

//action to layer

proto._addFeature = function (feature) {
  this._featuresstore.addFeature(feature);
};

proto._deleteFeature = function (feature) {
  this._featuresstore.deleteFeature(feature);
};

proto._updateFeature = function (feature) {
  this._featuresstore.updateFeature(feature);
};

proto._setFeatures = function (features) {
  this._featuresstore.setFeatures(features);
};

proto.readFeatures = function () {
  return this._layer.readFeatures();
};

proto.readEditingFeatures = function () {
  return this._featuresstore.readFeatures();
};

// stop editor
proto.stop = function () {
  var _this5 = this;

  var d = $.Deferred();
  this._layer.unlock().then(function (response) {
    _this5.clear();
    d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

//run save layer
proto._save = function () {
  this._layer.save();
};

proto.isStarted = function () {
  return this._started;
};

proto.clear = function () {
  this._started = false;
  this._filter.bbox = null;
  this._allfeatures = false;
  this._featuresstore.clear();
  this._layer.getFeaturesStore().clear();
  this._layer.getType() === Layer.LayerTypes.VECTOR && this._layer.resetEditingSource(this._featuresstore.getFeaturesCollection());
};

module.exports = Editor;

},{"./changesmanager":409,"./sessionsregistry":413,"core/applicationstate":402,"core/g3wobject":415,"core/layers/features/featuresstore":435,"core/layers/features/olfeaturesstore":436,"core/layers/layer":443,"core/utils//utils":485,"core/utils/utils":485}],411:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var G3WObject = require('core/g3wobject');

function History() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.id = options.id;
  base(this);
  // registered all changes
  /*
  *{
  * _states: [
  *     {
  *       id: unique key
  *       state: [state] // example: history contsins features state
  *                      // array because a tool can apply changes to more than one features at time (split di una feature)
  *     },
  *     {
  *       id: unique key
  *       state: [state]
  *     },
  *   ]
  *     ....
  *
  *  _current: unique key // usefult to undo redo
  *
  *
  * */
  // set maximun "buffer history" lenght for  undo redo
  this._maxSteps = 10;
  this._states = [];
  // reactive state of histrory
  this.state = {
    commit: false,
    undo: false,
    redo: false
  };
  this._current = null; // store the current state of history (useful for undo /redo)
}

inherit(History, G3WObject);

var proto = History.prototype;

proto.add = function (uniqueId, items) {
  var _this = this;

  //state object is an array of feature/features changed in a transaction
  var d = $.Deferred();
  // before insert an item into the history
  // check if are at last state step (no redo was done)
  // in this way avoid starge barch in the history
  //If we are in the middle of undo, delete all changes in the histroy from the current "state"
  // so i can create a new history

  if (this._current === null) {
    this._states = [{
      id: uniqueId,
      items: items
    }];
  } else {
    if (this._states.length && this._current < this.getLastState().id) this._states = this._states.filter(function (state) {
      return state.id <= _this._current;
    });
    this._states.push({
      id: uniqueId,
      items: items
    });
  }

  this._current = uniqueId;
  this._setState();
  // return unique id key
  // it can be used in save relation
  d.resolve(uniqueId);
  return d.promise();
};

proto.getRelationStates = function (layerId) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$clear = _ref.clear,
      clear = _ref$clear === undefined ? false : _ref$clear;

  var relationStates = [];
  for (var _i = 0; _i < this._states.length; _i++) {
    var state = this._states[_i];
    var relationItems = state.items.filter(function (item) {
      var _layerId = Array.isArray(item) ? item[0].layerId : item.layerId;
      return _layerId === layerId;
    });
    relationItems.length && relationStates.push({
      id: state.id,
      items: relationItems
    });
  }
  return relationStates;
};

proto.insertState = function (state) {
  var stateId = state.id;
  var index = this._states.length;
  for (var _i2 = 0; _i2 < this._states.length; _i2++) {
    var _state = this._states[_i2];
    if (_state.id > stateId) {
      index = _i2;
      break;
    } else if (_state.id === stateId) index = -1;
    break;
  }
  if (index > -1) {
    if (this._current < stateId) this._current = stateId;
    this._states.splice(index, 0, state);
  }
};

proto.removeState = function (stateId) {
  var index = void 0;
  for (i = 0; i < this._states.length; i++) {
    var state = this._states[i];
    if (state.id === stateId) {
      index = i;
      break;
    }
  }
  if (this._current === stateId) this._current = this._states.length > 1 ? this._states[index - 1].id : null;
  this._states.splice(index, 1);
};

proto.removeStates = function () {
  var stateIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  for (var _i3 = 0; _i3 < stateIds.length; _i3++) {
    var stateId = stateIds[_i3];
    this.removeState(stateId);
  }
};

proto.insertStates = function () {
  var states = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  for (var _i4 = 0; _i4 < states.length; _i4++) {
    this.insertState(states[_i4]);
  }
  this.canCommit();
};

// internal method to change the state of the  history when we check
// a call to a function that modify the hsitory state
proto._setState = function () {
  this.canUndo();
  this.canCommit();
  this.canRedo();
};

//check if was did an update (update are array contains two items , old e new value)
proto._checkItems = function (items, action) {
  var _this2 = this;

  /**
   * action: <reffererd to array index>
   *  0: undo;
   *  1: redo;
   **/
  var newItems = {
    own: [], //array of changes of layer of the current session
    dependencies: {} // dependencies
  };
  items.forEach(function (item) {
    if (Array.isArray(item)) item = item[action];
    // check if belong to session
    if (_this2.id === item.layerId) {
      newItems.own.push(item);
    } else {
      if (!newItems.dependencies[item.layerId]) newItems.dependencies[item.layerId] = {
        own: [],
        dependencies: {}
      };
      newItems.dependencies[item.layerId].own.push(item);
    }
  });
  return newItems;
};

// method undo
proto.undo = function () {
  var _this3 = this;

  var items = void 0;
  if (this._current === this.getFirstState().id) {
    this._current = null;
    items = this._states[0].items;
  } else {
    this._states.find(function (state, idx) {
      if (state.id === _this3._current) {
        items = _this3._states[idx].items;
        _this3._current = _this3._states[idx - 1].id;
        return true;
      }
    });
  }
  items = this._checkItems(items, 0);
  this._setState();
  return items;
};

//method redo
proto.redo = function () {
  var _this4 = this;

  var items = void 0;
  // if not set get first state
  if (!this._current) {
    items = this._states[0].items;
    // set current to first
    this._current = this._states[0].id;
  } else {
    this._states.find(function (state, idx) {
      if (_this4._current === state.id) {
        _this4._current = _this4._states[idx + 1].id;
        items = _this4._states[idx + 1].items;
        return true;
      }
    });
  }
  items = this._checkItems(items, 1);
  this._setState();
  return items;
};

proto.setItemsFeatureIds = function () {
  var _this5 = this;

  var unsetnewids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  unsetnewids.forEach(function (unsetnewid) {
    var id = unsetnewid.id,
        clientid = unsetnewid.clientid;

    _this5._states.forEach(function (state) {
      var items = state.items;

      items.forEach(function (item) {
        var feature = item.feature.getId() === clientid && item.feature;
        if (feature) {
          feature.setId(id);
        }
      });
    });
  });
};

proto.clear = function (ids) {
  var _this6 = this;

  if (ids) this._states.forEach(function (state, idx) {
    if (ids.indexOf(state.id) !== -1) {
      if (_this6._current && _this6._current === state.id()) _this6.undo();
      _this6._states.splice(idx, 1);
    }
  });else this._clearAll();
};

proto._clearAll = function () {
  this._states = [];
  this._current = null;
  this.state.commit = false;
  this.state.redo = false;
  this.state.undo = false;
};

proto.getState = function (id) {
  return this._states.find(function (state) {
    return state.id === id;
  });
};

proto.getFirstState = function () {
  return this._states.length ? this._states[0] : null;
};

proto.getLastState = function () {
  var length = this._states.length;
  return length ? this._states[length - 1] : null;
};

proto.getCurrentState = function () {
  var _this7 = this;

  var currentState = null;
  if (this._current && this._states.length) {
    currentState = this._states.find(function (state) {
      return _this7._current === state.id;
    });
  }
  return currentState;
};

// funzione che mi permette di ricavarel'indice dello stato corrente
proto.getCurrentStateIndex = function () {
  var _this8 = this;

  var currentStateIndex = null;
  if (this._current && this._states.length) {
    this._states.forEach(function (state, idx) {
      if (_this8._current === state.id) {
        currentStateIndex = idx;
        return false;
      }
    });
  }
  return currentStateIndex;
};

// funzione che mi dice se ci sono cose da committare
proto.canCommit = function () {
  var checkCommitItems = this.commit();
  var canCommit = false;
  for (var layerId in checkCommitItems) {
    var commitItem = checkCommitItems[layerId];
    canCommit = canCommit || !!commitItem.length;
  }
  this.state.commit = canCommit;
  return this.state.commit;
};

//funzione che mi dice se posso fare l'undo sulla history
proto.canUndo = function () {
  var steps = this._states.length - 1 - this.getCurrentStateIndex();
  this.state.undo = !_.isNull(this._current) && this._maxSteps > steps;
  return this.state.undo;
};

// funzione che mi dice se posso fare il redo sulla history
proto.canRedo = function () {
  this.state.redo = this.getLastState() && this.getLastState().id != this._current || _.isNull(this._current) && this._states.length > 0;
  return this.state.redo;
};

proto._getStatesToCommit = function () {
  var _this9 = this;

  return this._states.filter(function (state) {
    return state.id <= _this9._current;
  });
};

//get all changes to send to server (mandare al server)
proto.commit = function () {
  var commitItems = {};
  var statesToCommit = this._getStatesToCommit();
  statesToCommit.forEach(function (state) {
    state.items.forEach(function (item) {
      var add = true;
      if (Array.isArray(item)) item = item[1];
      commitItems[item.layerId] && commitItems[item.layerId].forEach(function (commitItem, index) {
        // check if already inserted feature
        if (commitItem.getUid() === item.feature.getUid()) {
          if (item.feature.isNew() && !commitItem.isDeleted() && item.feature.isUpdated()) {
            var _item = item.feature.clone();
            _item.add();
            commitItems[item.layerId][index] = _item;
          } else if (item.feature.isNew() && item.feature.isDeleted()) {
            commitItems[item.layerId].splice(index, 1);
          } else if (item.feature.isUpdated() || item.feature.isDeleted()) commitItems[item.layerId][index] = item.feature;
          add = false;
          return false;
        }
      });
      if (add) {
        var feature = item.feature;
        var layerId = item.layerId;
        if (!(!feature.isNew() && feature.isAdded())) {
          if (!commitItems[layerId]) commitItems[layerId] = [];
          commitItems[layerId].push(feature);
        }
      }
    });
  });
  return commitItems;
};

module.exports = History;

},{"core/g3wobject":415,"core/utils//utils":485,"core/utils/utils":485}],412:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var History = require('./history');
var SessionsRegistry = require('./sessionsregistry');

function Session() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.setters = {
    start: function start() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this._start(options);
    },
    getFeatures: function getFeatures() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this._getFeatures(options);
    },
    stop: function stop() {
      this._stop();
    },
    saveChangesOnServer: function saveChangesOnServer(commitItems) {} // hook to get informed that are saved on server

  };
  base(this, options);

  this.state = {
    id: options.id,
    started: false,
    getfeatures: false
  };
  // editor
  this._editor = options.editor;
  this._history = new History({
    id: this.state.id
  });
  this._temporarychanges = [];
  this.register();
}

inherit(Session, G3WObject);

var proto = Session.prototype;

proto.getId = function () {
  return this.state.id;
};

proto.getLastStateId = function () {
  return this._history.getLastState().id;
};

proto.deleteState = function (stateId) {
  this._history.removeState(stateId);
};

proto.register = function () {
  SessionsRegistry.register(this);
};

proto.unregister = function () {
  SessionsRegistry.unregister(this.getId());
};

proto._start = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  this._editor.start(options).then(function (features) {
    _this.state.started = true;
    d.resolve(features);
  }).fail(function (err) {
    d.reject(err);
  });
  return d.promise();
};

//method to getFeature from server by editor
proto._getFeatures = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  if (!this._allfeatures) {
    this._allfeatures = !options.filter;
    this._editor.getFeatures(options).then(function (promise) {
      promise.then(function (features) {
        _this2.state.getfeatures = true;
        d.resolve(features);
      }).fail(function (err) {
        d.reject(err);
      });
    });
  } else d.resolve([]);

  return d.promise();
};

proto.isStarted = function () {
  return this.state.started;
};

proto.getEditor = function () {
  return this._editor;
};

proto.setEditor = function (editor) {
  this._editor = editor;
};

// it used to save temporary changes to the layer
// in history instance and feature store
proto.save = function () {
  var _this3 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  //fill history
  var d = $.Deferred();
  // add temporary modify to history
  if (this._temporarychanges.length) {
    var uniqueId = options.id || Date.now();
    this._history.add(uniqueId, this._temporarychanges).then(function () {
      // clear to temporary changes
      _this3._temporarychanges = [];
      // resolve if uniqeu id
      d.resolve(uniqueId);
    });
  } else {
    d.resolve(null);
  }
  return d.promise();
};

proto.updateTemporaryChanges = function (feature) {
  this._temporarychanges.forEach(function (change) {
    change.feature.setProperties(feature.getProperties());
  });
};

// method to add temporary feature
proto.pushAdd = function (layerId, feature) {
  this._editor.removeNotEditablePropriertiesFromFeature(feature);
  var newFeature = feature.clone();
  this.push({
    layerId: layerId,
    feature: newFeature.add()
  });
  return newFeature;
};

// delete temporary feature
proto.pushDelete = function (layerId, feature) {
  this.push({
    layerId: layerId,
    feature: feature.delete()
  });
  return feature;
};

// add temporary feature changes
proto.pushUpdate = function (layerId, newFeature, oldFeature) {
  // in case of change attribute immediately after create feature
  if (newFeature.isNew()) {
    var temporarynewfeatureIndex = this._temporarychanges.findIndex(function (change) {
      return change.layerId === layerId && change.feature.getId() === newFeature.getId();
    });
    if (temporarynewfeatureIndex !== -1) {
      var feature = newFeature.clone();
      feature.add();
      this._temporarychanges[temporarynewfeatureIndex].feature = feature;
      return;
    }
  }
  this.push({
    layerId: layerId,
    feature: newFeature.update()
  }, {
    layerId: layerId,
    feature: oldFeature.update()
  });
};

proto.removeChangesFromHistory = function () {
  var changeIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this._history.removeStates(changeIds);
};

proto.moveRelationStatesOwnSession = function () {
  var statesIds = {};

  var _getCommitItems = this.getCommitItems(),
      relationItems = _getCommitItems.relations;

  for (var relationLayerId in relationItems) {
    var relationStates = this._history.getRelationStates(relationLayerId);
    var relationSession = SessionsRegistry.getSession(relationLayerId);
    relationSession._history.insertStates(relationStates);
    statesIds[relationLayerId] = relationStates.map(function (state) {
      return state.id;
    });
  }
  return statesIds;
};

// it used to add temporary features
// that will be added with save method
proto.push = function (New, Old) {
  /*
  New e Old saranno oggetti contenti {
      layerId: xxxx,
      feature: feature
    }
   */
  // check is set old (edit)
  var feature = Old ? [Old, New] : New;
  this._temporarychanges.push(feature);
};

// method to revert (cancel) all changes in history and clean session
proto.revert = function () {
  var _this4 = this;

  var d = $.Deferred();
  this._editor.revert().then(function () {
    _this4._history.clear();
    d.resolve();
  });
  return d.promise();
};

// handle temporary changes of layer
proto._filterChanges = function () {
  var id = this.getId();
  var changes = {
    own: [],
    dependencies: {}
  };
  this._temporarychanges.forEach(function (temporarychange) {
    var change = Array.isArray(temporarychange) ? temporarychange[0] : temporarychange;
    if (change.layerId === id) changes.own.push(change);else {
      if (!changes.dependencies[change.layerId]) changes.dependencies[change.layerId] = [];
      // FILO
      changes.dependencies[change.layerId].unshift(change);
    }
  });
  return changes;
};

proto.rollback = function (changes) {
  if (changes) {
    return this._editor.rollback(changes);
  } else {
    var d = $.Deferred();
    var _changes = this._filterChanges();
    this._editor.rollback(_changes.own).then(function () {
      var dependencies = _changes.dependencies;

      for (var id in dependencies) {
        SessionsRegistry.getSession(id).rollback(dependencies[id]);
      }
      d.resolve(dependencies);
    });
    this._temporarychanges = [];
    return d.promise();
  }
};

proto.rollbackDependecies = function () {
  var _this5 = this;

  var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  ids.forEach(function (id) {
    var changes = [];
    _this5._temporarychanges = _this5._temporarychanges.filter(function (temporarychange) {
      if (temporarychange.layerId !== id) {
        changes.push(temporarychange);
        return true;
      }
      changes.length && SessionsRegistry.getSession(id).rollback(changes);
    });
  });
};

// method undo
proto.undo = function (items) {
  items = items || this._history.undo();
  this._editor.setChanges(items.own, true);
  this._history.canCommit();
  return items.dependencies;
};

// method redo
proto.redo = function (items) {
  items = items || this._history.redo();
  this._editor.setChanges(items.own, true);
  this._history.canCommit();
  return items.dependencies;
};

proto._serializeCommit = function (itemsToCommit) {
  var id = this.getId();
  var state = void 0;
  var layer = void 0;
  var commitObj = {
    add: [],
    update: [],
    delete: [],
    relations: {}
  };
  for (var key in itemsToCommit) {
    var isRelation = false;
    var items = itemsToCommit[key];
    if (key !== id) {
      isRelation = true;
      var sessionRelation = SessionsRegistry.getSession(key);
      var lockids = sessionRelation ? sessionRelation.getEditor().getLockIds() : [];
      commitObj.relations[key] = {
        lockids: lockids,
        add: [],
        update: [],
        delete: []
      };
      layer = commitObj.relations[key];
    } else layer = commitObj;
    items.forEach(function (item) {
      state = item.getState();
      var GeoJSONFormat = new ol.format.GeoJSON();
      switch (state) {
        case 'delete':
          if (!item.isNew()) layer.delete.push(item.getId());
          break;
        default:
          var value = GeoJSONFormat.writeFeatureObject(item);
          var childs_properties = item.getProperties();
          for (var _key in value.properties) {
            if (value.properties[_key] && _typeof(value.properties[_key]) === 'object' && value.properties[_key].constructor === Object) value.properties[_key] = value.properties[_key].value;
            if (value.properties[_key] === undefined && childs_properties[_key]) value.properties[_key] = childs_properties[_key];
          }
          var action = item.isNew() ? 'add' : item.getState();
          // in case of add i have to remove non editable properties
          layer[action].push(value);
          break;
      }
    });
    // check in case of no edit remove relation key
    if (isRelation && !layer.add.length && !layer.update.length && !layer.delete.length) {
      delete commitObj.relations[key];
    }
  }
  return commitObj;
};

proto.getCommitItems = function () {
  var commitItems = this._history.commit();
  return this._serializeCommit(commitItems);
};

proto.commit = function () {
  var _this6 = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$ids = _ref.ids,
      ids = _ref$ids === undefined ? null : _ref$ids,
      items = _ref.items,
      _ref$relations = _ref.relations,
      relations = _ref$relations === undefined ? true : _ref$relations;

  var d = $.Deferred();
  var commitItems = void 0;
  if (ids) {
    commitItems = this._history.commit(ids);
    this._history.clear(ids);
  } else {
    if (items) {
      commitItems = items;
    } else {
      commitItems = this._history.commit();
      commitItems = this._serializeCommit(commitItems);
    }
    if (!relations) commitItems.relations = {};
    this._editor.commit(commitItems).then(function (response) {
      if (response && response.result) {
        var data = response.response;
        var _data$new_relations = data.new_relations,
            new_relations = _data$new_relations === undefined ? {} : _data$new_relations;

        for (var id in new_relations) {
          var session = SessionsRegistry.getSession(id);
          session.getEditor().applyCommitResponse({
            response: new_relations[id],
            result: true
          });
        }
        _this6._history.clear();
        _this6.saveChangesOnServer(commitItems);
      }
      d.resolve(commitItems, response);
    }).fail(function (err) {
      return d.reject(err);
    });
  }
  return d.promise();
};

proto._canStop = function () {
  return this.state.started || this.state.getfeatures;
};

//stop session
proto._stop = function () {
  var _this7 = this;

  var d = $.Deferred();
  if (this._canStop()) this._editor.stop().then(function () {
    _this7.clear();
    d.resolve();
  }).fail(function (err) {
    return d.reject(err);
  });else d.resolve();
  return d.promise();
};

// clear all things bind to session
proto.clear = function () {
  this._allfeatures = false;
  this.state.started = false;
  this.state.getfeatures = false;
  this.clearHistory();
  this._editor.clear();
};

//return l'history
proto.getHistory = function () {
  return this._history;
};

// clear history
proto.clearHistory = function () {
  this._history.clear();
};

module.exports = Session;

},{"./history":411,"./sessionsregistry":413,"core/g3wobject":415,"core/utils/utils":485}],413:[function(require,module,exports){
var SessionsRegistry = function SessionsRegistry() {
  this._sessions = {};

  this.register = function (session) {
    var id = session.getId();
    this._sessions[id] = session;
  };

  this.unregister = function (id) {
    delete this._sessions[id];
  };

  this.getSession = function (id) {
    return this._sessions[id];
  };

  this.setSession = function (id, session) {
    this._sessions[id] = session;
  };

  this.getSessions = function () {
    return this._sessions;
  };

  this.clear = function () {
    this._sessions = {};
  };
};

module.exports = new SessionsRegistry();

},{}],414:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var t = require('core/i18n/i18n.service').t;

var serverErrorParser = function serverErrorParser() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._error = options.error;
};

var proto = serverErrorParser.prototype;

proto.parse = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'responseJSON' : _ref$type;

  var error_message = "server_saver_error";
  function traverseErrorMessage(errorObject) {
    var entries = Object.entries(errorObject);
    var entry = entries.find(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];

      return key === 'fields';
    });
    if (entry) {
      var _entry = _slicedToArray(entry, 2),
          value = _entry[1];

      try {
        if (typeof value === 'string') {
          var _entries$find = entries.find(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
                key = _ref5[0],
                value = _ref5[1];

            return key !== 'fields';
          }),
              _entries$find2 = _slicedToArray(_entries$find, 1),
              field = _entries$find2[0];

          error_message = '[' + field + '] ' + value;
        } else {
          error_message = '';
          Object.entries(value).forEach(function (_ref6) {
            var _ref7 = _slicedToArray(_ref6, 2),
                field = _ref7[0],
                error = _ref7[1];

            error_message = '' + error_message + field + ' ' + error[0] + ' ';
          });
        }
      } catch (err) {}
      return error_message.replace(/\:|\./g, '');
    } else {
      var _entries$ = _slicedToArray(entries[0], 2),
          _value = _entries$[1];

      if (!Array.isArray(_value) && (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object') return traverseErrorMessage(_value);
    }
  }
  if (type === 'responseJSON') return this._error && this._error.responseJSON && this._error.responseJSON.error.message ? this._error.responseJSON.error.message : t("server_saver_error");else if (type === 'String') {
    if (typeof this._error === 'string') return this._error;else return traverseErrorMessage(this._error);
  } else return t("server_saver_error");
};

module.exports = serverErrorParser;

},{"core/i18n/i18n.service":418}],415:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    noop = _require.noop,
    debounce = _require.debounce,
    throttle = _require.throttle;

/**
 * Base object to handle a setter and its listeners.
 * @constructor
 */


var G3WObject = function G3WObject() {
  //check if setters property is set. Register the chain of events
  this.setters && this._setupListenersChain(this.setters);
  // check debounces
  this.debounces && this._setupDebounces(this.debounces);
  //check throttles
  this.throttles && this._setupThrottles(this.throttles);
};

inherit(G3WObject, EventEmitter);

var proto = G3WObject.prototype;

/**
 * Insert a listener on afeter setter was executed
 * @param {string} setter - IMethod name to register a listener function
 * @param {function} listener - listener function (only syncron)
 * @param {number} priority - Priorità di esecuzione: valore minore viene eseuito prima
 */
proto.onafter = function (setter, listener, priority) {
  return this._onsetter('after', setter, listener, false, priority);
};

proto.onceafter = function (setter, listener, priority) {
  return this._onsetter('after', setter, listener, false, priority, true);
};

/**
 * Listern before cal sesster
 * @param {string} setter - Method name setter
 * @param {function} listener - function to call
 * @param {number} priority - Priority
 */
proto.onbefore = function (setter, listener, priority) {
  return this._onsetter('before', setter, listener, false, priority);
};

// once before
proto.oncebefore = function (setter, listener, priority) {
  return this._onsetter('before', setter, listener, false, priority, true);
};

/**
 * @param {string} setter - Method name setter
 * @param {function} listener - function to call
 * @param {number} priority - Priority
 */
proto.onbeforeasync = function (setter, listener, priority) {
  return this._onsetter('before', setter, listener, true, priority);
};

proto.un = function (setter, key) {
  // cicle on after before (key) and for each settersListeners (array) find key
  Object.entries(this.settersListeners).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        _key = _ref2[0],
        settersListeners = _ref2[1];

    if (key === undefined) settersListeners[setter].splice(0);else settersListeners[setter].forEach(function (setterListener, idx) {
      if (setterListener.key === key) {
        settersListeners[setter].splice(idx, 1);
      }
    });
  });
};

// base function to handle onafter or before listeners
/*
  when=before|after,
  type=sync|async
*/
proto._onsetter = function (when, setter, listener, async) {
  var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var once = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

  var settersListeners = this.settersListeners[when];
  var listenerKey = '' + (Math.floor(Math.random() * 1000000) + Date.now());
  var settersListeneres = settersListeners[setter];
  settersListeneres.push({
    key: listenerKey,
    fnc: listener,
    async: async,
    priority: priority,
    once: once
  });
  // reader array based on priority
  settersListeners[setter] = _.sortBy(settersListeneres, function (setterListener) {
    return setterListener.priority;
  });
  // return key
  return listenerKey;
};

proto._setupListenersChain = function (setters) {
  var _this = this;

  // initialize all methods inside object "setters" of child class.
  this.settersListeners = {
    after: {},
    before: {}
  };

  var _loop = function _loop(setter) {
    var setterOption = setters[setter];
    var setterFnc = noop;
    var setterFallback = noop;
    if (_.isFunction(setterOption)) setterFnc = setterOption;else {
      setterFnc = setterOption.fnc;
      setterFallback = setterOption.fallback || noop; // method called in case of error
    }
    // create array to push before and after subscribers
    _this.settersListeners.after[setter] = [];
    _this.settersListeners.before[setter] = [];
    // assign the property settern name to the object as own method
    _this[setter] = function () {
      var _this2 = this;

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var deferred = $.Deferred();
      var returnVal = null;
      var counter = 0;
      // function to call original function(setter function)
      var callSetter = function callSetter() {
        // run setter function
        returnVal = setterFnc.apply(_this2, args);
        // resolve promise
        deferred.resolve(returnVal);
        //call all subscribed methods afet setter
        var onceListenerKeys = [];
        var afterListeners = _this2.settersListeners.after[setter];
        afterListeners.forEach(function (listener) {
          listener.fnc.apply(_this2, args);
          listener.once && onceListenerKeys.push(listener.key);
        });
        onceListenerKeys.forEach(function (key) {
          return _this2.un(setter, key);
        });
      };
      //  abort function
      var abort = function abort() {
        setterFallback.apply(_this2, args);
        deferred.reject();
      };
      // get all before listeners functions of setter
      var beforeListeners = this.settersListeners['before'][setter];
      // listener counter
      counter = 0;
      var next = function next(bool) {
        // initilize cont to true (continue)
        var cont = true;
        // check if bool is Boolean
        if (_.isBoolean(bool)) cont = bool;
        // check if count is false or we are arrived to the end of onbefore subscriber
        if (cont === false) {
          // found an error so we can abort
          abort.apply(_this2, args);
        } else if (counter === beforeListeners.length) {
          // call complete method methods
          var completed = callSetter();
          //verifico che cosa ritorna
          if (completed === undefined || completed === true) {
            _this2.emitEvent('set:' + setter, args);
          }
        } else if (cont) {
          var listenerObj = beforeListeners[counter];
          var currentCounter = counter;
          // if is async functtion
          if (beforeListeners[counter].async) {
            //add function next to argument of listnerFunction
            args.push(next);
            // update counter
            counter += 1;
            listenerObj.fnc.apply(_this2, args);
          } else {
            // return or undefine or a boolen to tell if ok(true) can conitnue or not (false)
            var _bool = listenerObj.fnc.apply(_this2, args);
            //update counter
            counter += 1;
            next(_bool);
          }
          listenerObj.once && beforeListeners.splice(currentCounter, 1);
        }
      };
      // run next to start to run all the subscribers and setrer its self
      next();
      // retun a promise
      return deferred.promise();
    };
  };

  for (var setter in setters) {
    _loop(setter);
  }
  return this.settersListeners;
};

proto._setupDebounces = function (debounces) {
  for (var name in debounces) {
    var delay = debounces[name].delay;
    var fnc = debounces[name].fnc;
    this[name] = debounce(fnc, delay);
  }
};

proto._setupThrottles = function (throttles) {
  for (var name in throttles) {
    var delay = throttles[name].delay;
    var fnc = throttles[name].fnc;
    this[name] = throttle(fnc, delay);
  }
};

//method get
proto.get = function (key) {
  return this[key] && !(this[key] instanceof Function) ? this[key] : null;
};

//method set
proto.set = function (key, value) {
  this[key] = value;
};

module.exports = G3WObject;

},{"core/utils/utils":485}],416:[function(require,module,exports){
var geom = {
  distance: function distance(c1, c2) {
    return Math.sqrt(geom.squaredDistance(c1, c2));
  },
  squaredDistance: function squaredDistance(c1, c2) {
    var x1 = c1[0];
    var y1 = c1[1];
    var x2 = c2[0];
    var y2 = c2[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    return dx * dx + dy * dy;
  },
  closestOnSegment: function closestOnSegment(coordinate, segment) {
    var x0 = coordinate[0];
    var y0 = coordinate[1];
    var start = segment[0];
    var end = segment[1];
    var x1 = start[0];
    var y1 = start[1];
    var x2 = end[0];
    var y2 = end[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);
    var x = void 0,
        y = void 0;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }
};

module.exports = geom;

},{}],417:[function(require,module,exports){
var Geometry = {
  GeometryTypes: {
    POINT: "Point",
    POINTZ: "PointZ",
    POINTM: "PointM",
    POINTZM: "PointZM",
    POINT25D: "Point25D",
    MULTIPOINT: "MultiPoint",
    MULTIPOINTZ: "MultiPointZ",
    MULTIPOINTM: "MutliPointM",
    MULTIPOINTZM: "MultiPointZM",
    MULTIPOINT25D: "MultiPoint25D",
    LINESTRING: "LineString", // QGis definition .GeometryType, Line intead di Linestring.
    LINESTRINGZ: "LineStringZ",
    LINESTRINGM: "LineStringM",
    LINESTRINGZM: "LineStringZM",
    LINESTRING25D: "LineString25D",
    LINE: "Line",
    LINEZ: "LineZ",
    LINEM: "LineM",
    LINEZM: "LineZM",
    LINE25D: "Line25D",
    MULTILINESTRING: "MultiLineString",
    MULTILINESTRINGZ: "MultiLineStringZ",
    MULTILINESTRINGM: "MultiLineStringM",
    MULTILINESTRINGZM: "MultiLineStringZM",
    MULTILINESTRING25D: "MultiLineString25D",
    MULTILINE: "MultiLine",
    MULTILINEZ: "MultiLineZ",
    MULTILINEM: "MultiLineM",
    MULTILINEZM: "MultiLineZM",
    MULTILINE25D: "MultiLine25D",
    POLYGON: "Polygon",
    POLYGONZ: "PolygonZ",
    POLYGONM: "PolygonM",
    POLYGONZM: "PolygonZM",
    POLYGON25D: "Polygon25D",
    MULTIPOLYGON: "MultiPolygon",
    MULTIPOLYGONZ: "MultiPolygonZ",
    MULTIPOLYGONM: "MultiPolygonM",
    MULTIPOLYGONZM: "MultiPolygonZM",
    MULTIPOLYGON25D: "MultiPolygon25D",
    GEOMETRYCOLLECTION: "GeometryCollection",
    GEOMETRYCOLLECTIONZ: "GeometryCollectionZ",
    GEOMETRYCOLLECTIONM: "GeometryCollectionM",
    GEOMETRYCOLLECTIONZM: "GeometryCollectionZM",
    GEOMETRYCOLLECTION25D: "GeometryCollection25D"
  },
  addZValueToOLFeatureGeometry: function addZValueToOLFeatureGeometry() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        feature = _ref.feature,
        geometryType = _ref.geometryType;

    var geometry = feature.getGeometry();
    geometryType = geometryType || geometry.getType();
    var originalFeatureCoordinates = geometry.getCoordinates();
    switch (geometryType) {
      //POINT //[x,y]
      case this.GeometryTypes.POINTZ:
      case this.GeometryTypes.POINTM:
      case this.GeometryTypes.POINTZM:
      case this.GeometryTypes.POINT25D:
        originalFeatureCoordinates.push(0);
        feature.getGeometry().setCoordinates(originalFeatureCoordinates);
        break;
      //MULTIPOINT [[x1, y1], [x2, y2]]
      case this.GeometryTypes.MULTIPOINTZ:
      case this.GeometryTypes.MULTIPOINTM:
      case this.GeometryTypes.MULTIPOINTZM:
      case this.GeometryTypes.MULTIPOINT25D:
      //LINE [[x1, y1], [x2, y2]]
      case this.GeometryTypes.LINESTRINGZ:
      case this.GeometryTypes.LINESTRINGM:
      case this.GeometryTypes.LINESTRINGZM:
      case this.GeometryTypes.LINESTRING25D:
      case this.GeometryTypes.LINEZ:
      case this.GeometryTypes.LINEM:
      case this.GeometryTypes.LINEZM:
      case this.GeometryTypes.LINE25D:
        originalFeatureCoordinates.forEach(function (coordinates) {
          return coordinates.push(0);
        });
        feature.getGeometry().setCoordinates(originalFeatureCoordinates);
        break;
      //MULTILINE [
      // [[x1, y1],[x2, y2]],
      // [[x3, y3], [x4, y4]]
      // ]
      case this.GeometryTypes.MULTILINESTRINGZ:
      case this.GeometryTypes.MULTILINESTRINGM:
      case this.GeometryTypes.MULTILINESTRINGZM:
      case this.GeometryTypes.MULTILINESTRING25D:
      case this.GeometryTypes.MULTILINEZ:
      case this.GeometryTypes.MULTILINEM:
      case this.GeometryTypes.MULTILINEZM:
      case this.GeometryTypes.MULTILINE25D:
        originalFeatureCoordinates.forEach(function (singleLine) {
          singleLine.forEach(function (coordinates) {
            return coordinates.push(0);
          });
        });
        feature.getGeometry().setCoordinates(originalFeatureCoordinates);
        break;
      //POLYGON [
      //[[x1, y1], [x2, y2], [x3, y3], [x1, y1]]
      // ]
      case this.GeometryTypes.POLYGONZ:
      case this.GeometryTypes.POLYGONM:
      case this.GeometryTypes.POLYGONZM:
      case this.GeometryTypes.POLYGON25D:
        originalFeatureCoordinates[0].forEach(function (coordinates) {
          return coordinates.push(0);
        });
        feature.getGeometry().setCoordinates(originalFeatureCoordinates);
        break;
      //MULTIPOLYGON  [
      //       [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
      //       [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]
      //       ]
      case this.GeometryTypes.MULTIPOLYGONZ:
      case this.GeometryTypes.MULTIPOLYGONM:
      case this.GeometryTypes.MULTIPOLYGOZM:
      case this.GeometryTypes.MULTIPOLYGON25D:
        originalFeatureCoordinates.forEach(function (singlePolygon) {
          singlePolygon[0].forEach(function (coordinates) {
            return coordinates.push(0);
          });
        });
        feature.getGeometry().setCoordinates(originalFeatureCoordinates);
        break;
    }
    return feature;
  },
  getOLGeometry: function getOLGeometry(geometryType) {
    switch (geometryType) {
      case this.GeometryTypes.LINESTRINGZ:
      case this.GeometryTypes.LINESTRINGM:
      case this.GeometryTypes.LINESTRINGZM:
      case this.GeometryTypes.LINESTRING25D:
      case this.GeometryTypes.LINE:
      case this.GeometryTypes.LINEZ:
      case this.GeometryTypes.LINEM:
      case this.GeometryTypes.LINEZM:
      case this.GeometryTypes.LINE25D:
        geometryType = 'LineString';
        break;
      case this.GeometryTypes.MULTILINESTRINGZ:
      case this.GeometryTypes.MULTILINESTRINGM:
      case this.GeometryTypes.MULTILINESTRINGZM:
      case this.GeometryTypes.MULTILINESTRING25D:
      case this.GeometryTypes.MULTILINE:
      case this.GeometryTypes.MULTILINEZ:
      case this.GeometryTypes.MULTILINEM:
      case this.GeometryTypes.MULTILINEZM:
      case this.GeometryTypes.MULTILINE25D:
        geometryType = 'MultiLineString';
        break;
      case this.GeometryTypes.POINTZ:
      case this.GeometryTypes.POINTM:
      case this.GeometryTypes.POINTZM:
      case this.GeometryTypes.POINT25D:
        geometryType = 'Point';
        break;
      case this.GeometryTypes.MULTIPOINTZ:
      case this.GeometryTypes.MULTIPOINTM:
      case this.GeometryTypes.MULTIPOINTZM:
      case this.GeometryTypes.MULTIPOINT25D:
        geometryType = 'MultiPoint';
        break;
      case this.GeometryTypes.POLYGONZ:
      case this.GeometryTypes.POLYGONM:
      case this.GeometryTypes.POLYGONZM:
      case this.GeometryTypes.POLYGON25D:
        geometryType = 'Polygon';
        break;
      case this.GeometryTypes.MULTIPOLYGONZ:
      case this.GeometryTypes.MULTIPOLYGONM:
      case this.GeometryTypes.MULTIPOLYGONZM:
      case this.GeometryTypes.MULTIPOLYGON25D:
        geometryType = 'MultiPolygon';
        break;
    }
    return geometryType;
  },
  isMultiGeometry: function isMultiGeometry(geometryType) {
    return [this.GeometryTypes.MULTIPOINT, this.GeometryTypes.MULTIPOINTZ, this.GeometryTypes.MULTIPOINTZM, this.GeometryTypes.MULTIPOINTM, this.GeometryTypes.MULTIPOINT25D, this.GeometryTypes.MULTILINESTRING, this.GeometryTypes.MULTILINESTRINGZ, this.GeometryTypes.MULTILINESTRINGM, this.GeometryTypes.MULTILINESTRINGZM, this.GeometryTypes.MULTILINESTRING25D, this.GeometryTypes.MULTILINE, this.GeometryTypes.MULTILINEZ, this.GeometryTypes.MULTILINEM, this.GeometryTypes.MULTILINEZM, this.GeometryTypes.MULTILINE25D, this.GeometryTypes.MULTIPOLYGON, this.GeometryTypes.MULTIPOLYGONZ, this.GeometryTypes.MULTIPOLYGONM, this.GeometryTypes.MULTIPOLYGONZM, this.GeometryTypes.MULTIPOLYGON25D].indexOf(geometryType) !== -1;
  },
  getAllPointGeometryTypes: function getAllPointGeometryTypes() {
    return [Geometry.GeometryTypes.POINT, Geometry.GeometryTypes.POINTZ, Geometry.GeometryTypes.POINTM, Geometry.GeometryTypes.POINTZM, Geometry.GeometryTypes.POINT25D, Geometry.GeometryTypes.MULTIPOINT, Geometry.GeometryTypes.MULTIPOINTZ, Geometry.GeometryTypes.MULTIPOINTM, Geometry.GeometryTypes.MULTIPOINTZM, Geometry.GeometryTypes.MULTIPOINT25D];
  },
  isPointGeometryType: function isPointGeometryType(geometryType) {
    return Geometry.getAllPointGeometryTypes().indexOf(geometryType) !== -1;
  },
  getAllLineGeometryTypes: function getAllLineGeometryTypes() {
    return [Geometry.GeometryTypes.LINESTRING, Geometry.GeometryTypes.LINESTRINGZ, Geometry.GeometryTypes.LINESTRINGM, Geometry.GeometryTypes.LINESTRINGZM, Geometry.GeometryTypes.LINESTRING25D, Geometry.GeometryTypes.MULTILINESTRING, Geometry.GeometryTypes.MULTILINESTRINGZ, Geometry.GeometryTypes.MULTILINESTRINGM, Geometry.GeometryTypes.MULTILINESTRINGZM, Geometry.GeometryTypes.MULTILINESTRING25D, Geometry.GeometryTypes.LINE, Geometry.GeometryTypes.LINEZ, Geometry.GeometryTypes.LINEM, Geometry.GeometryTypes.LINEZM, Geometry.GeometryTypes.LINE25D, Geometry.GeometryTypes.MULTILINE, Geometry.GeometryTypes.MULTILINEZ, Geometry.GeometryTypes.MULTILINEM, Geometry.GeometryTypes.MULTILINEZM, Geometry.GeometryTypes.MULTILINE25D];
  },
  isLineGeometryType: function isLineGeometryType(geometryType) {
    return Geometry.getAllLineGeometryTypes().indexOf(geometryType) !== -1;
  },
  getAllPolygonGeometryTypes: function getAllPolygonGeometryTypes() {
    return [Geometry.GeometryTypes.POLYGON, Geometry.GeometryTypes.POLYGONZ, Geometry.GeometryTypes.POLYGONM, Geometry.GeometryTypes.POLYGONZM, Geometry.GeometryTypes.POLYGON25D, Geometry.GeometryTypes.MULTIPOLYGON, Geometry.GeometryTypes.MULTIPOLYGONZ, Geometry.GeometryTypes.MULTIPOLYGONM, Geometry.GeometryTypes.MULTIPOLYGONZM, Geometry.GeometryTypes.MULTIPOLYGON25D];
  },
  isPolygonGeometryType: function isPolygonGeometryType(geometryType) {
    return Geometry.getAllPolygonGeometryTypes().indexOf(geometryType) !== -1;
  }
};

module.exports = Geometry;

},{}],418:[function(require,module,exports){
// main object content for i18n
var plugins18nConfig = {
  it: {
    plugins: {}
  },
  en: {
    plugins: {}
  },
  fi: {
    plugins: {}
  },
  se: {
    plugins: {}
  }
};

function init(config) {
  i18next.use(i18nextXHRBackend).init({
    lng: config.lng,
    ns: 'app',
    fallbackLng: 'en',
    resources: config.resources
  });
  return new Promise(function (resolve, reject) {
    jqueryI18next.init(i18next, $, {
      tName: 't', // --> appends $.t = i18next.t
      i18nName: 'i18n', // --> appends $.i18n = i18next
      handleName: 'localize', // --> appends $(selector).localize(opts);
      selectorAttr: 'data-i18n', // selector for translating elements
      targetAttr: 'data-i18n-target', // element attribute to grab target element to translate (if diffrent then itself)
      optionsAttr: 'data-i18n-options', // element attribute that contains options, will load/set if useOptionsAttr = true
      useOptionsAttr: false, // see optionsAttr
      parseDefaultValueFromContent: true // parses default values from content ele.val or ele.text
    });
    addI18n(plugins18nConfig);
    resolve();
  });
}
var getAppLanguage = function getAppLanguage() {
  var ApplicationService = require('core/applicationservice');
  var config = ApplicationService.getConfig();
  return config.user.i18n || "en";
};

// function to translate
var t = function t(text) {
  return i18next.t(text);
};

// function to translate plugins
var tPlugin = function tPlugin(text) {
  return i18next.t('plugins.' + text);
};

var tPrefix = function tPrefix(filter) {
  return function (text) {
    return i18next.t(filter + '.' + text);
  };
};

var addI18nPlugin = function addI18nPlugin(_ref) {
  var name = _ref.name,
      config = _ref.config;

  for (var language in config) {
    plugins18nConfig[language].plugins[name] = config[language];
  }
  addI18n(plugins18nConfig);
};

var addI18n = function addI18n(i18nObject) {
  for (var lng in i18nObject) {
    var lngObj = i18nObject[lng];
    for (var key in lngObj) {
      i18next.addResource(lng, 'translation', key, lngObj[key]);
    }
  }
};

var changeLanguage = function changeLanguage(lng) {
  i18next.changeLanguage(lng);
};

module.exports = {
  init: init,
  t: t,
  tPlugin: tPlugin,
  tPrefix: tPrefix,
  addI18n: addI18n,
  addI18nPlugin: addI18nPlugin,
  changeLanguage: changeLanguage,
  getAppLanguage: getAppLanguage
};

},{"core/applicationservice":401}],419:[function(require,module,exports){
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    splitContextAndMethod = _require.splitContextAndMethod,
    uniqueId = _require.uniqueId;

var GUI = require('gui/gui');

function IframePluginService() {
  var _this3 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  //project is current project send by application service
  this.pendingactions = {};
  this.init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _this = this;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        project = _ref2.project;

    var layers, serviceNames, i, service;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return GUI.isReady();

          case 2:
            this.services = require('./services/index');
            //set eventResponse handler to alla services
            this.eventResponseServiceHandler = function (_ref3) {
              var action = _ref3.action,
                  response = _ref3.response;

              _this.postMessage({
                id: null,
                action: action,
                response: response
              });
            };
            /*
            get layer attributes from project layers state
             */
            layers = project.state.layers.map(function (layer) {
              return {
                id: layer.id,
                name: layer.name
              };
            });
            //initialize all service

            serviceNames = Object.keys(this.services);
            i = 0;

          case 7:
            if (!(i < serviceNames.length)) {
              _context.next = 16;
              break;
            }

            service = this.services[serviceNames[i]];
            // set common layer attribute service just one time

            service.getLayers() === undefined && service.setLayers(layers);
            _context.next = 12;
            return service.init();

          case 12:
            service.on('response', this.eventResponseServiceHandler);

          case 13:
            i++;
            _context.next = 7;
            break;

          case 16:
            /**
             * Send post message is ready
             */
            this.postMessage({
              id: null,
              action: "app:ready",
              response: {
                result: true,
                data: {
                  layers: layers
                }
              }
            });

            if (window.addEventListener) window.addEventListener("message", this.getMessage, false);else window.attachEvent("onmessage", this.getMessage);

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  /**
   * Outputplace iframe get by DataRouteService
   * @param dataPromise
   * @param options
   * @returns {Promise<void>}
   */
  this.outputDataPlace = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dataPromise) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _options$action, action, _ref5, result, _ref5$data, data, parser, outputData;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _options$action = options.action, action = _options$action === undefined ? 'app:results' : _options$action;
              _context2.next = 3;
              return dataPromise;

            case 3:
              _ref5 = _context2.sent;
              result = _ref5.result;
              _ref5$data = _ref5.data;
              data = _ref5$data === undefined ? [] : _ref5$data;
              parser = new ol.format.GeoJSON();
              outputData = [];

              try {
                outputData = data.map(function (_ref6) {
                  var layer = _ref6.layer,
                      features = _ref6.features;
                  return _defineProperty({}, layer.getId(), {
                    features: parser.writeFeatures(features)
                  });
                });
              } catch (err) {
                result: false;
                outputData: err;
              }
              this.postMessage({
                id: null,
                action: action,
                response: {
                  result: result,
                  data: outputData
                }
              });

            case 11:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }();

  // method to post message to parent
  this.postMessage = function () {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (window.parent) window.parent.postMessage(message, "*");
  };

  this.stopPendingActions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var _this2 = this;

    var promises;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            promises = [];

            Object.keys(this.pendingactions).forEach(function (id) {
              var context = _this2.pendingactions[id].context;

              promises.push(_this2.services[context].stop());
              delete _this2.pendingactions[id];
            });
            return _context3.abrupt('return', Promise.allSettled(promises));

          case 3:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  // method to handle all message from window
  this.getMessage = function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(evt) {
      var _evt$data, _evt$data$id, id, _evt$data$single, single, action, params, _splitContextAndMetho, context, method, result, data;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(evt && evt.data)) {
                _context4.next = 24;
                break;
              }

              _evt$data = evt.data, _evt$data$id = _evt$data.id, id = _evt$data$id === undefined ? uniqueId() : _evt$data$id, _evt$data$single = _evt$data.single, single = _evt$data$single === undefined ? true : _evt$data$single, action = _evt$data.action, params = _evt$data.data;
              _splitContextAndMetho = splitContextAndMethod(action), context = _splitContextAndMetho.context, method = _splitContextAndMetho.method;
              result = false;
              data = void 0;
              _context4.prev = 5;

              if (!_this3.services[context].getReady()) {
                _context4.next = 16;
                break;
              }

              _context4.t0 = single;

              if (!_context4.t0) {
                _context4.next = 11;
                break;
              }

              _context4.next = 11;
              return _this3.stopPendingActions();

            case 11:
              _this3.pendingactions[id] = {
                context: context
              };
              _context4.next = 14;
              return _this3.services[context][method](params);

            case 14:
              data = _context4.sent;

              result = true;

            case 16:
              _context4.next = 22;
              break;

            case 18:
              _context4.prev = 18;
              _context4.t1 = _context4['catch'](5);

              result = false;
              data = _context4.t1;

            case 22:
              _this3.postMessage({
                id: id,
                action: action,
                response: {
                  result: result,
                  data: data
                }
              });
              delete _this3.pendingactions[id];

            case 24:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this3, [[5, 18]]);
    }));

    return function (_x6) {
      return _ref9.apply(this, arguments);
    };
  }();

  // Called when change map or clear
  this.clear = function () {
    var serviceNames = Object.keys(this.services);
    for (var i = 0; i < serviceNames.length; i++) {
      var service = this.services[serviceNames[i]];
      service.off('response', this.eventResponseServiceHandler);
    }
    this.stopPendingActions();
    if (window.removeEventListener) window.removeEventListener("message", this.getMessage, false);else window.detachEvent("onmessage", this.getMessage);
  };
}

module.exports = new IframePluginService();

},{"./services/index":422,"core/utils/utils":485,"gui/gui":575}],420:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var BaseService = require('../baseservice');
var DataRouterService = require('core/data/routerservice');

function AppService() {
  base(this);
  this.mapControls = {
    screenshot: {
      control: null
    },
    changeMap: {
      control: null
    }
  };

  this.init = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.mapService.once('ready', function () {
        _this._map = _this.mapService.getMap();
        _this._mapCrs = _this.mapService.getCrs();
        _this.mapControls.screenshot.control = _this.mapService.getMapControlByType({
          type: 'screenshot'
        });
        _this.setReady(true);
        resolve();
      });
    });
  };
  /**
   *
   * @returns {Promise<void>}
   */
  this.results = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
      var _ref$capture = _ref.capture,
          capture = _ref$capture === undefined ? true : _ref$capture;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              capture ? DataRouterService.setOutputPlaces(['iframe']) : DataRouterService.resetDefaultOutput();
              return _context.abrupt('return', []);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  this.screenshot = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3) {
      var _this2 = this;

      var _ref3$capture = _ref3.capture,
          capture = _ref3$capture === undefined ? true : _ref3$capture;
      var action;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              action = 'app:screenshot';

              capture ? this.mapControls.screenshot.control.overwriteOnClickEvent(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var blob;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return _this2.mapService.createMapImage();

                      case 3:
                        blob = _context2.sent;

                        _this2.emit('response', {
                          action: action,
                          response: {
                            result: true,
                            data: blob
                          }
                        });
                        _context2.next = 10;
                        break;

                      case 7:
                        _context2.prev = 7;
                        _context2.t0 = _context2['catch'](0);

                        _this2.emit('response', {
                          action: action,
                          response: {
                            result: false,
                            data: _context2.t0
                          }
                        });

                      case 10:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, _this2, [[0, 7]]);
              }))) : this.mapControls.screenshot.control.resetOriginalOnClickEvent();

            case 2:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x2) {
      return _ref4.apply(this, arguments);
    };
  }();

  /**
   * Eventually send as param the projection in which we would like get center of map
   * @param params
   * @returns {Promise<void>}
   */
  this.getcenter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt('return', this.mapService.getCenter());

          case 1:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  /**
   * Zoom to coordinates
   * @param params
   * @returns {Promise<[]>}
   */
  this.zoomtocoordinates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _params$coordinates, coordinates, _params$highlight, highlight;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _params$coordinates = params.coordinates, coordinates = _params$coordinates === undefined ? [] : _params$coordinates, _params$highlight = params.highlight, highlight = _params$highlight === undefined ? false : _params$highlight;

            if (!(coordinates && Array.isArray(coordinates) && coordinates.length === 2)) {
              _context5.next = 6;
              break;
            }

            this.mapService.zoomTo(coordinates);
            return _context5.abrupt('return', coordinates);

          case 6:
            return _context5.abrupt('return', Promise.reject(coordinates));

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  /**
   * Eventually send as param the projection in which we would like get center of map
   * @param params
   * @returns {Promise<void>}
   */
  this.getextent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt('return', this.mapService.getMapExtent());

          case 1:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  /**
   *
   * @param params
   * @returns {Promise<[]>}
   */
  this.zoomtoextent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _params$extent, extent;

    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _params$extent = params.extent, extent = _params$extent === undefined ? [] : _params$extent;

            if (!(extent && Array.isArray(extent) && extent.length === 4)) {
              _context7.next = 6;
              break;
            }

            this.mapService.goToBBox(extent);
            return _context7.abrupt('return', extent);

          case 6:
            return _context7.abrupt('return', Promise.reject(extent));

          case 7:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  //method to zoom to features
  this.zoomtofeature = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
    var _this3 = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            return _context9.abrupt('return', new Promise(function () {
              var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(resolve, reject) {
                var qgs_layer_id, feature, _params$highlight2, highlight, response;

                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        qgs_layer_id = params.qgs_layer_id, feature = params.feature, _params$highlight2 = params.highlight, highlight = _params$highlight2 === undefined ? false : _params$highlight2;

                        qgs_layer_id = _this3.getQgsLayerId({
                          qgs_layer_id: qgs_layer_id
                        });

                        _context8.next = 4;
                        return _this3.findFeaturesWithGeometry({
                          qgs_layer_id: qgs_layer_id,
                          feature: feature,
                          zoom: true,
                          highlight: highlight
                        });

                      case 4:
                        response = _context8.sent;


                        resolve(response.qgs_layer_id);

                      case 6:
                      case 'end':
                        return _context8.stop();
                    }
                  }
                }, _callee8, _this3);
              }));

              return function (_x8, _x9) {
                return _ref11.apply(this, arguments);
              };
            }()));

          case 1:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
}

inherit(AppService, BaseService);

module.exports = new AppService();

},{"../baseservice":421,"core/data/routerservice":406,"core/utils/utils":485}],421:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    createFilterFormField = _require.createFilterFormField;

var ProjectsRegistry = require('core/project/projectsregistry');
var DataRouterService = require('core/data/routerservice');
var GUI = require('gui/gui');

var G3WObject = require('core/g3wobject');

function BaseIframeService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this.ready = false;
  this.init = function () {
    //overwrite each service
  };
}

inherit(BaseIframeService, G3WObject);

var proto = BaseIframeService.prototype;

/**
 * Common mapService attribute
 */
proto.mapService = GUI.getComponent('map').getService();

/**
 * Common current project attribute
 */
proto.project = ProjectsRegistry.getCurrentProject();

/**
 *
 * @type {null}
 */
proto.layers = undefined;

/**
 * Return a qgs_layer_id array based on passed qgis_layer_id
 * @param qgs_layer_id : String , Array of Strings or null/undefined)
 * @returns Array oa qgs_layer_id strings
 * @private
 */
proto.getQgsLayerId = function (_ref) {
  var qgs_layer_id = _ref.qgs_layer_id,
      _ref$noValue = _ref.noValue,
      noValue = _ref$noValue === undefined ? this.layers.map(function (layer) {
    return layer.id;
  }) : _ref$noValue;

  return qgs_layer_id ? Array.isArray(qgs_layer_id) ? qgs_layer_id : [qgs_layer_id] : noValue;
};

/**
 * Method to getFeature from DataProvider
 * @private
 */
proto.searchFeature = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
    var layer = _ref2.layer,
        feature = _ref2.feature;

    var search_endpoint, field, value, _ref4, _ref4$data, data;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            search_endpoint = this.project.getSearchEndPoint();
            field = feature.field, value = feature.value;
            _context.next = 4;
            return DataRouterService.getData('search:features', {
              inputs: {
                layer: layer,
                search_endpoint: search_endpoint,
                filter: createFilterFormField({
                  layer: layer,
                  search_endpoint: search_endpoint,
                  field: field,
                  value: value
                })
              },
              outputs: false
            });

          case 4:
            _ref4 = _context.sent;
            _ref4$data = _ref4.data;
            data = _ref4$data === undefined ? [] : _ref4$data;
            return _context.abrupt('return', data);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * Comme method to search feature/s by field and value
 * @param qgs_layer_id
 * @param feature
 * @param zoom
 * @param highlight
 * @returns {Promise<{qgs_layer_id: null, features: [], found: boolean}>}
 */
proto.findFeaturesWithGeometry = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$qgs_layer_id = _ref6.qgs_layer_id,
      qgs_layer_id = _ref6$qgs_layer_id === undefined ? [] : _ref6$qgs_layer_id,
      feature = _ref6.feature,
      _ref6$zoom = _ref6.zoom,
      zoom = _ref6$zoom === undefined ? false : _ref6$zoom,
      _ref6$highlight = _ref6.highlight,
      highlight = _ref6$highlight === undefined ? false : _ref6$highlight;

  var response, layersCount, i, layer, data, features;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          response = {
            found: false,
            features: [],
            qgs_layer_id: null
          };
          layersCount = qgs_layer_id.length;
          i = 0;

        case 3:
          if (!(!response.found && i < layersCount)) {
            _context2.next = 20;
            break;
          }

          layer = this.project.getLayerById(qgs_layer_id[i]);
          _context2.prev = 5;
          _context2.t0 = layer;

          if (!_context2.t0) {
            _context2.next = 11;
            break;
          }

          _context2.next = 10;
          return this.searchFeature({
            layer: layer,
            feature: feature
          });

        case 10:
          _context2.t0 = _context2.sent;

        case 11:
          data = _context2.t0;

          if (data.length) {
            features = data[0].features;

            response.found = features.length > 0 && !!features.find(function (feature) {
              return feature.getGeometry();
            });
            if (response.found) {
              response.features = features;
              response.qgs_layer_id = qgs_layer_id[i];
              zoom && this.mapService.zoomToFeatures(features, {
                highlight: highlight
              });
            } else i++;
          } else i++;
          _context2.next = 18;
          break;

        case 15:
          _context2.prev = 15;
          _context2.t1 = _context2['catch'](5);
          i++;

        case 18:
          _context2.next = 3;
          break;

        case 20:
          // in case of no response zoom too initial extent
          !response.found && this.mapService.zoomToProjectInitExtent();

          return _context2.abrupt('return', response);

        case 22:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this, [[5, 15]]);
}));

/**
 * Set layer function
 * @param layers
 */
proto.setLayers = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  proto.layers = layers;
};

proto.getLayers = function () {
  return proto.layers;
};

/**
 * Method to set ready the service
 * @param bool
 */
proto.setReady = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.ready = bool;
};

proto.getReady = function () {
  return this.ready;
};

/**
 * Method overwrite single service: Usefult to sto eventually running action
 * * @returns {Promise<void>}
 */
proto.stop = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this);
}));

/**
 * Overwrite each single service
 */
proto.clear = function () {
  //overwrite single service
};

module.exports = BaseIframeService;

},{"core/data/routerservice":406,"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/gui":575}],422:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var appService = require('./app/service');
//return an object contains key plugin name  and related service
var pluginsServices = require('./plugins/index');

module.exports = _extends({
  app: appService
}, pluginsServices);

},{"./app/service":420,"./plugins/index":424}],423:[function(require,module,exports){
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var BasePluginService = require('../service');
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var GUI = require('gui/gui');

function EditingService() {
  var _this2 = this;

  base(this);
  this.pluginName = 'editing';
  this.subscribevents = [];
  this.isRunning = false;
  this.responseObject = {
    cb: null, // resolve or reject promise method
    qgs_layer_id: null,
    error: null
  };
  this.config = {
    tools: {
      add: {
        disabled: [{
          id: 'deletefeature'
        }, {
          id: 'copyfeatures'
        }, {
          id: 'editmultiattributes'
        }, {
          id: 'deletePart'
        }, {
          id: 'splitfeature'
        }, {
          id: 'mergefeatures'
        }]
      },
      update: {
        disabled: [{
          id: 'addfeature'
        }, {
          id: 'copyfeatures'
        }, {
          id: 'deletefeature'
        }, {
          id: 'editmultiattributes'
        }, {
          id: 'deletePart'
        }, {
          id: 'splitfeature'
        }, {
          id: 'mergefeatures'
        }]
      },
      delete: {
        enabled: [{
          id: 'deletefeature',
          options: {
            active: true
          }
        }]
      }
    }
  };

  // METHODS CALLED FROM EACH ACTION METHOD
  // run before each action
  this.startAction = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
      var _this = this;

      var toolboxes = _ref.toolboxes,
          resolve = _ref.resolve,
          reject = _ref.reject;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.responseObject.cb = reject;
              // set same mode autosave
              this.dependencyApi.setSaveConfig({
                cb: {
                  done: function done(toolbox) {
                    //set toolbox id
                    _this.responseObject.cb = resolve;
                    _this.responseObject.qgs_layer_id = toolbox.getId();
                    _this.responseObject.error = null;
                    // close panel that fire closeediting panel event
                    _this.dependencyApi.hidePanel();
                  }, // called when commit changes is done successuffly
                  error: function error(toolbox, _error) {
                    _this.responseObject.cb = reject;
                    _this.responseObject.qgs_layer_id = toolbox.getId();
                    _this.responseObject.error = _error;
                  } // called whe commit change receive an error
                }
              });
              // set toolboxes visible base on value of qgs_layer_id
              this.dependencyApi.showPanel({
                toolboxes: toolboxes
              });
              this.isRunning = true;

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  //run after each action
  this.stopAction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var qgs_layer_id;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            qgs_layer_id = options.qgs_layer_id;
            _context2.t0 = qgs_layer_id;

            if (!_context2.t0) {
              _context2.next = 5;
              break;
            }

            _context2.next = 5;
            return this.stopEditing(qgs_layer_id);

          case 5:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  //// subscribers handlers
  this.subscribersHandlers = {
    canUndo: function canUndo(_ref4) {
      var activeTool = _ref4.activeTool,
          _ref4$disableToolboxe = _ref4.disableToolboxes,
          disableToolboxes = _ref4$disableToolboxe === undefined ? [] : _ref4$disableToolboxe;
      return function (bool) {
        //set currenttoolbocx id in editing to null
        if (bool === false) {
          _this2.responseObject.qgs_layer_id = null;
          _this2.responseObject.error = null;
        }
        activeTool.setEnabled(!bool);
        disableToolboxes.forEach(function (toolbox) {
          return toolbox.setEditing(!bool);
        });
      };
    },
    canRedo: function canRedo() {},
    cancelform: function cancelform(cb) {
      return function () {
        cb();
      };
    }, //run callback
    addfeature: function addfeature() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          properties = _ref5.properties,
          toolboxes = _ref5.toolboxes;

      return function (feature) {
        Object.keys(properties).forEach(function (property) {
          return feature.set(property, properties[property]);
        });
        var activeTool = void 0;
        var disableToolboxes = [];
        toolboxes.forEach(function (toolbox) {
          var addFeatureTool = toolbox.getToolById('addfeature');
          if (addFeatureTool.isActive()) {
            addFeatureTool.setEnabled(false);
            activeTool = addFeatureTool;
          } else {
            toolbox.setEditing(false);
            disableToolboxes.push(toolbox);
          }
        });
        //just one time
        if (_this2.subscribevents.find(function (eventObject) {
          return eventObject.event !== 'canUndo';
        })) {
          var handler = _this2.addSubscribeEvents('canUndo', {
            activeTool: activeTool,
            disableToolboxes: disableToolboxes
          });
          _this2.addSubscribeEvents('cancelform', handler);
        }
      };
    },
    closeeditingpanel: function closeeditingpanel(_ref6) {
      var qgs_layer_id = _ref6.qgs_layer_id;
      return function () {
        // response to router service
        _this2.responseObject.cb({
          qgs_layer_id: _this2.responseObject.qgs_layer_id,
          error: _this2.responseObject.error
        });
        // stop action
        _this2.stopAction({ qgs_layer_id: qgs_layer_id });
      };
    }
  };

  // method to add subscribe refenrence
  this.addSubscribeEvents = function (event) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var handler = this.subscribersHandlers[event](options);
    this.dependencyApi.subscribe(event, handler);
    this.subscribevents.push({
      event: event,
      handler: handler
    });
    return handler;
  };

  /**
   * Reset subscriber editing plugin events
   */
  this.resetSubscribeEvents = function () {
    var _this3 = this;

    this.subscribevents.forEach(function (_ref7) {
      var event = _ref7.event,
          handler = _ref7.handler;

      _this3.dependencyApi.unsubscribe(event, handler);
    });
  };

  /**
   * Method called whe we want add a feature
   * @param options
   * @returns {Promise<void>}
   */
  this.add = function () {
    var _this4 = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return new Promise(function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(resolve, reject) {
        var configQglLayerId, data, properties, qgs_layer_id, options, toolboxes, toolbox;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this4.isRunning) {
                  _context3.next = 4;
                  break;
                }

                reject();
                _context3.next = 19;
                break;

              case 4:
                // extract qgslayerid from configuration message
                configQglLayerId = config.qgs_layer_id, data = _objectWithoutProperties(config, ['qgs_layer_id']);
                properties = data.properties;
                qgs_layer_id = _this4.getQgsLayerId({
                  qgs_layer_id: configQglLayerId,
                  noValue: _this4.dependencyApi.getEditableLayersId()
                });
                //call method common

                _context3.next = 9;
                return _this4.startAction({
                  toolboxes: qgs_layer_id,
                  resolve: resolve,
                  reject: reject
                });

              case 9:

                // create options
                options = {
                  tools: _this4.config.tools.add,
                  startstopediting: false,
                  action: 'add',
                  selected: qgs_layer_id.length === 1
                };
                // return all toolboxes

                _context3.next = 12;
                return _this4.startEditing(qgs_layer_id, options);

              case 12:
                toolboxes = _context3.sent;

                toolboxes = toolboxes.filter(function (toolboxPromise) {
                  return toolboxPromise.status === 'fulfilled';
                }).map(function (toolboxPromise) {
                  return toolboxPromise.value;
                });
                !GUI.isSidebarVisible() && GUI.showSidebar();
                toolbox = toolboxes.length === 1 && toolboxes[0];

                toolbox && toolbox.setActiveTool(toolbox.getToolById('addfeature'));
                // // in case of no feature add avent subscribe
                _this4.addSubscribeEvents('addfeature', { properties: properties, toolboxes: toolboxes });
                _this4.addSubscribeEvents('closeeditingpanel', { qgs_layer_id: qgs_layer_id });

              case 19:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, _this4);
      }));

      return function (_x6, _x7) {
        return _ref8.apply(this, arguments);
      };
    }());
  };

  /**
   * Method called when we want update a know feature field
   * @param config
   * @returns {Promise<unknown>}
   */
  this.update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var _this5 = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt('return', new Promise(function () {
              var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(resolve, reject) {
                var configQglLayerId, data, feature, qgs_layer_id, response, found, options;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!_this5.isRunning) {
                          _context4.next = 4;
                          break;
                        }

                        reject();
                        _context4.next = 22;
                        break;

                      case 4:
                        configQglLayerId = config.qgs_layer_id, data = _objectWithoutProperties(config, ['qgs_layer_id']);
                        feature = data.feature;
                        qgs_layer_id = _this5.getQgsLayerId({
                          qgs_layer_id: configQglLayerId,
                          noValue: _this5.dependencyApi.getEditableLayersId()
                        });
                        _context4.next = 9;
                        return _this5.findFeaturesWithGeometry({
                          qgs_layer_id: qgs_layer_id,
                          feature: feature,
                          zoom: true,
                          highlight: true,
                          selected: qgs_layer_id.length === 1 // set selected toolbox
                        });

                      case 9:
                        response = _context4.sent;
                        found = response.found;

                        if (!found) {
                          _context4.next = 21;
                          break;
                        }

                        _context4.next = 14;
                        return _this5.startAction({
                          toolboxes: [response.qgs_layer_id],
                          resolve: resolve,
                          reject: reject
                        });

                      case 14:

                        // create options
                        options = {
                          feature: feature,
                          tools: _this5.config.tools.update,
                          startstopediting: false,
                          action: 'update'
                        };

                        // return all toolboxes

                        _context4.next = 17;
                        return _this5.startEditing([response.qgs_layer_id], options);

                      case 17:
                        !GUI.isSidebarVisible() && GUI.showSidebar();
                        _this5.addSubscribeEvents('closeeditingpanel', {
                          qgs_layer_id: [response.qgs_layer_id]
                        });
                        _context4.next = 22;
                        break;

                      case 21:
                        reject();

                      case 22:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this5);
              }));

              return function (_x9, _x10) {
                return _ref10.apply(this, arguments);
              };
            }()));

          case 1:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  this.delete = function () {};

  /**
   * Start editing called when we want to start editing
   * @param qgs_layer_id
   * @param options
   * @returns {Promise<unknown|void>}
   */
  this.startEditing = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
    var _this6 = this;

    var qgs_layer_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _options$action, action, feature, filter, startEditingPromise;

    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _options$action = options.action, action = _options$action === undefined ? 'add' : _options$action, feature = options.feature;
            filter = {};

            options.filter = filter;
            _context6.t0 = action;
            _context6.next = _context6.t0 === 'add' ? 6 : _context6.t0 === 'update' ? 8 : 10;
            break;

          case 6:
            filter.nofeatures = true;
            return _context6.abrupt('break', 10);

          case 8:
            filter.field = feature.field + '|eq|' + feature.value;
            return _context6.abrupt('break', 10);

          case 10:
            startEditingPromise = [];

            qgs_layer_id.forEach(function (layerid) {
              startEditingPromise.push(_this6.dependencyApi.startEditing(layerid, options));
            });
            _context6.next = 14;
            return Promise.allSettled(startEditingPromise);

          case 14:
            return _context6.abrupt('return', _context6.sent);

          case 15:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  /**
   * Stop editing
   * @param qgs_layer_id
   * @returns {Promise<unknown>}
   */
  this.stopEditing = function () {
    var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(qgs_layer_id) {
      var _this7 = this;

      var stopEditingPromises;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              stopEditingPromises = [];

              qgs_layer_id.forEach(function (layerid) {
                stopEditingPromises.push(_this7.dependencyApi.stopEditing(layerid));
              });
              _context7.next = 4;
              return Promise.allSettled(stopEditingPromises);

            case 4:
              this.clear();

            case 5:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    return function (_x13) {
      return _ref12.apply(this, arguments);
    };
  }();

  this.stop = function () {
    var _this8 = this;

    return new Promise(function (resolve, reject) {
      _this8.dependencyApi.hidePanel();
      GUI.hideSidebar();
      _this8.once('clear', resolve);
    });
  };

  /**
   * Method called wen we want to reset default editing plugin behaviour
   *
   * */
  this.clear = function () {
    this.dependencyApi.resetDefault();
    this.isRunning = false;
    this.responseObject = {
      cb: null, // resolve or reject promise method
      qgs_layer_id: null,
      error: null
    };
    this.resetSubscribeEvents();
    this.emit('clear');
  };
}

inherit(EditingService, BasePluginService);

module.exports = new EditingService();

},{"../service":425,"gui/gui":575}],424:[function(require,module,exports){
var editingService = require('./editing/service');

module.exports = {
  editing: editingService
};

},{"./editing/service":423}],425:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var PluginsRegistry = require('core/plugin/pluginsregistry');
var BaseService = require('../baseservice');

function BasePluginService() {
  base(this);
  // common attributes between plugin service
  this.pluginName;
  this.dependencyApi = {};
  this.init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _this = this;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$layers = _ref2.layers,
        layers = _ref2$layers === undefined ? {} : _ref2$layers;

    var plugin;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            this.layers = layers;
            // check if the plugin in in configuration
            if (PluginsRegistry.isPluginInConfiguration(this.pluginName)) {
              plugin = PluginsRegistry.getPlugin(this.pluginName);

              if (plugin) {
                this.setDependencyApi(plugin.getApi());
                this.setReady(true);
              } else {
                PluginsRegistry.onafter('registerPlugin', function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(plugin) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return plugin.isReady();

                          case 2:
                            if (plugin.getName() === _this.pluginName) {
                              _this.setDependencyApi(plugin.getApi());
                              _this.setReady(true);
                            }

                          case 3:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this);
                  }));

                  return function (_x2) {
                    return _ref3.apply(this, arguments);
                  };
                }());
              }
            }

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  this.clear = function () {
    //TO OVERWRITE
  };
}

inherit(BasePluginService, BaseService);

var proto = BasePluginService.prototype;

proto.setDependencyApi = function () {
  var api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.dependencyApi = api;
};

proto.getDependecyApi = function () {
  return this.dependencyApi;
};

module.exports = BasePluginService;

},{"../baseservice":421,"core/plugin/pluginsregistry":472,"core/utils/utils":485}],426:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var BaseLayer = require('core/layers/baselayers/baselayer');
var BasesLayers = require('g3w-ol/src/layers/bases');

function ARCGISMAPSERVERLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.config = config;
  base(this, config, options);
}

inherit(ARCGISMAPSERVERLayer, BaseLayer);

var proto = ARCGISMAPSERVERLayer.prototype;

proto._makeOlLayer = function () {
  // here configuration to create TMS
  var _config = this.config,
      url = _config.url,
      attributions = _config.attributions,
      crs = _config.crs;

  var projection = this.getProjectionFromCrs(crs);
  var olLayer = BasesLayers.TMS.get({
    url: url,
    source_type: 'arcgismapserver',
    projection: projection,
    attributions: attributions
  });
  return olLayer;
};

module.exports = ARCGISMAPSERVERLayer;

},{"core/layers/baselayers/baselayer":427,"core/utils/utils":485,"g3w-ol/src/layers/bases":528}],427:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Projections = require('g3w-ol/src/projection/projections');
var WMSLayer = require('../map/wmslayer');
var ImageLayer = require('core/layers/imagelayer');

function BaseLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  base(this, config, options);
  if (this.isWMS()) {
    var _config = {
      url: this.getWmsUrl(),
      id: this.state.id,
      tiled: this.state.tiled
    };
    this._mapLayer = new WMSLayer(_config);
    this._mapLayer.addLayer(this);
  } else this._mapLayer = this;
}

inherit(BaseLayer, ImageLayer);

var proto = BaseLayer.prototype;

proto.getProjectionFromCrs = function () {
  var crs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  crs.epsg = crs.epsg ? crs.epsg : "EPSG:3857";
  return Projections.get(crs);
};

proto._makeOlLayer = function () {
  //TO OVERWRITE
};

proto._registerLoadingEvent = function () {
  var _this = this;

  this._olLayer.getSource().on('imageloadstart', function () {
    _this.emit("loadstart");
  });
  this._olLayer.getSource().on('imageloadend', function () {
    _this.emit("loadend");
  });
};

proto.getSource = function () {
  return this.getOLLayer().getSource();
};

proto.toggleLayer = function () {
  this._updateLayers();
};

proto.update = function (mapState, extraParams) {
  this._updateLayer(mapState, extraParams);
};

proto.getOLLayer = function () {
  var olLayer = this._olLayer;
  if (!olLayer) {
    olLayer = this._olLayer = this._makeOlLayer();
    this._registerLoadingEvent();
    if (this._mapLayer.config.attributions) {
      this._olLayer.getSource().setAttributions(this._mapLayer.config.attributions);
    }
    olLayer.setVisible(this._mapLayer.state.visible);
  }
  return olLayer;
};

proto._updateLayer = function (mapState, extraParams) {
  if (this.isWMS()) {
    this._mapLayer.update(mapState, extraParams);
  }
};

proto.setVisible = function (bool) {
  this.getOLLayer().setVisible(bool);
};

proto.getMapLayer = function () {
  return this._mapLayer;
};

module.exports = BaseLayer;

},{"../map/wmslayer":454,"core/layers/imagelayer":442,"core/utils/utils":485,"g3w-ol/src/projection/projections":532}],428:[function(require,module,exports){
var BaseLayers = {
  'OSM': require('./osmlayer'),
  'Bing': require('./binglayer'),
  'TMS': require('./tmslayer'),
  'ARCGISMAPSERVER': require('./arcgislayer'),
  'WMTS': require('./wmtslayer'),
  'WMS': require('./wmslayer')
};

module.exports = BaseLayers;

},{"./arcgislayer":426,"./binglayer":429,"./osmlayer":430,"./tmslayer":431,"./wmslayer":432,"./wmtslayer":433}],429:[function(require,module,exports){
var _keys = require('config/keys');

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var BaseLayer = require('core/layers/baselayers/baselayer');
var BasesLayers = require('g3w-ol/src/layers/bases');

function BingLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  base(this, config, options);
}

inherit(BingLayer, BaseLayer);

var proto = BingLayer.prototype;

proto._makeOlLayer = function () {
  var olLayer = void 0;
  var key = _applicationstate2.default.keys.vendorkeys.bing || _keys.BING_API_KEY;
  var subtype = this.config.source ? this.config.source.subtype : null;
  switch (subtype) {
    case 'streets':
      olLayer = BasesLayers.BING.get({
        imagerySet: 'Road',
        key: key
      });
      break;
    case 'aerial':
      olLayer = BasesLayers.BING.get({
        imagerySet: 'Aerial',
        key: key
      });
      break;
    case 'aerialwithlabels':
      olLayer = BasesLayers.BING.get({
        imagerySet: 'AerialWithLabels',
        key: key
      });
      break;
    default:
      olLayer = BasesLayers.BING.get({
        imagerySet: 'Aerial',
        key: key
      });
  }
  return olLayer;
};

module.exports = BingLayer;

},{"config/keys":738,"core/applicationstate":402,"core/layers/baselayers/baselayer":427,"core/utils/utils":485,"g3w-ol/src/layers/bases":528}],430:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var BaseLayer = require('core/layers/baselayers/baselayer');
var BasesLayers = require('g3w-ol/src/layers/bases');

function OSMLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  base(this, config, options);
}

inherit(OSMLayer, BaseLayer);

var proto = OSMLayer.prototype;

proto._makeOlLayer = function () {
  var olLayer = BasesLayers.OSM.get({
    id: this.config.name,
    title: this.config.title,
    url: this.config.url
  });
  return olLayer;
};

module.exports = OSMLayer;

},{"core/layers/baselayers/baselayer":427,"core/utils/utils":485,"g3w-ol/src/layers/bases":528}],431:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var BaseLayer = require('core/layers/baselayers/baselayer');
var BasesLayers = require('g3w-ol/src/layers/bases');

function TMSLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.config = config;
  base(this, config, options);
}

inherit(TMSLayer, BaseLayer);

var proto = TMSLayer.prototype;

proto._makeOlLayer = function () {
  // here configuration to create TMS
  var _config = this.config,
      url = _config.url,
      attributions = _config.attributions,
      minZoom = _config.minZoom,
      maxZoom = _config.maxZoom,
      crs = _config.crs;

  var projection = this.getProjectionFromCrs(crs);
  var olLayer = BasesLayers.TMS.get({
    url: url,
    minZoom: minZoom,
    maxZoom: maxZoom,
    attributions: attributions,
    projection: projection
  });
  return olLayer;
};

module.exports = TMSLayer;

},{"core/layers/baselayers/baselayer":427,"core/utils/utils":485,"g3w-ol/src/layers/bases":528}],432:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var BaseLayer = require('core/layers/baselayers/baselayer');
var BasesLayers = require('g3w-ol/src/layers/bases');

function WMSLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.config = config;
  base(this, config, options);
}

inherit(WMSLayer, BaseLayer);

var proto = WMSLayer.prototype;

proto._makeOlLayer = function () {
  //use this config to get params
  var _config = this.config,
      url = _config.url,
      layers = _config.layers,
      singleTile = _config.singleTile,
      attributions = _config.attributions,
      crs = _config.crs,
      opacity = _config.opacity;

  var projection = this.getProjectionFromCrs(crs);
  var olLayer = BasesLayers.WMS.get({
    url: url,
    layers: layers,
    singleTile: singleTile,
    attributions: attributions,
    projection: projection,
    opacity: opacity
  });
  return olLayer;
};

module.exports = WMSLayer;

},{"core/layers/baselayers/baselayer":427,"core/utils/utils":485,"g3w-ol/src/layers/bases":528}],433:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var BaseLayer = require('core/layers/baselayers/baselayer');
var BasesLayers = require('g3w-ol/src/layers/bases');

function WMTSLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.config = config;
  base(this, config, options);
}

inherit(WMTSLayer, BaseLayer);

var proto = WMTSLayer.prototype;

proto._makeOlLayer = function () {
  //use this config to get params
  var _config = this.config,
      url = _config.url,
      layer = _config.layer,
      attributions = _config.attributions,
      matrixSet = _config.matrixSet,
      format = _config.format,
      style = _config.style,
      requestEncoding = _config.requestEncoding,
      crs = _config.crs;

  var projection = this.getProjectionFromCrs(crs);
  var olLayer = BasesLayers.WMTS.get({
    url: url,
    layer: layer,
    attributions: attributions,
    format: format,
    projection: projection,
    requestEncoding: requestEncoding,
    matrixSet: matrixSet,
    style: style
  });
  return olLayer;
};

module.exports = WMTSLayer;

},{"core/layers/baselayers/baselayer":427,"core/utils/utils":485,"g3w-ol/src/layers/bases":528}],434:[function(require,module,exports){
var uniqueId = require('core/utils/utils').uniqueId;

var _require = require('core/utils/geo'),
    geometryFields = _require.geometryFields;

var Feature = function Feature() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  ol.Feature.call(this);
  this._uid = uniqueId();
  this._newPrefix = '_new_';
  this._geometry = false;
  var feature = options.feature;
  if (feature) {
    this.setProperties(feature.getProperties());
    this.setId(feature.getId());
    this.setGeometryName(feature.getGeometryName());
    var geometry = feature.getGeometry();
    this._geometry = !!geometry;
    geometry && this.setGeometry(geometry);
    var style = this.getStyle();
    style && this.setStyle(style);
  }
  this.state = {
    new: false,
    state: null
  };
};

ol.inherits(Feature, ol.Feature);

var proto = Feature.prototype;

//change constructor
proto.constructor = 'Feature';

proto.getUid = function () {
  return this._uid;
};

proto._setUid = function (uid) {
  this._uid = uid;
};

proto.isGeometry = function () {
  return this._geometry;
};

proto.cloneNew = function () {
  var clone = this.clone();
  var uid = uniqueId();
  clone._setUid(uid);
  clone.setTemporaryId();
  return clone;
};

proto.clone = function () {
  var feature = ol.Feature.prototype.clone.call(this);
  feature.setId(this.getId());
  this.isGeometry() && feature.setGeometry(feature.getGeometry().clone());
  var clone = new Feature({
    feature: feature
  });
  var uid = this.getUid();
  clone._setUid(uid);
  clone.setState(this.getState());
  this.isNew() && clone.setNew();
  return clone;
};

proto.setTemporaryId = function () {
  var newValue = this._newPrefix + Date.now();
  this.setId(newValue);
  this.setNew();
};

proto.setNew = function () {
  this.state.new = true;
};

// setta la feature a state 2 delete
proto.delete = function () {
  this.state.state = 'delete';
  return this;
};

//setta lo stato a feature aggiornata
proto.update = function () {
  this.state.state = 'update';
  return this;
};

// setta lo stato a nuovo 0
proto.add = function () {
  this.state.state = 'add';
  return this;
};

proto.isNew = function () {
  return this.state.new;
};

proto.isAdded = function () {
  return this.state.state === 'add';
};

proto.isUpdated = function () {
  return this.state.state === 'update';
};

proto.isDeleted = function () {
  return this.state.state === 'delete';
};

proto.setFullState = function (state) {
  this.state = state;
};

proto.getFullState = function () {
  return this.state;
};

proto.setState = function (state) {
  this.state.state = state;
};

proto.getState = function () {
  return this.state.state;
};

proto.getAlphanumericProperties = function () {
  var properties = this.getProperties();
  var alphanumericproperties = {};
  for (var name in properties) {
    if (geometryFields.indexOf(name) === -1) alphanumericproperties[name] = properties[name];
  }
  return alphanumericproperties;
};

//clean state of the features
proto.clearState = function () {
  this.state.state = null;
  this.state.new = false;
};

module.exports = Feature;

},{"core/utils/geo":484,"core/utils/utils":485}],435:[function(require,module,exports){
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var G3WObject = require('core/g3wobject');

// Object to store and handle features of layer
function FeaturesStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._features = options.features || [];
  this._provider = options.provider || null;
  this._loadedIds = []; // store loeckedids
  this._lockIds = []; // store locked features
  this.setters = {
    addFeatures: function addFeatures(features) {
      var _this = this;

      features.forEach(function (feature) {
        _this._addFeature(feature);
      });
    },
    addFeature: function addFeature(feature) {
      this._addFeature(feature);
    },
    removeFeature: function removeFeature(feature) {
      this._removeFeature(feature);
    },
    updateFeature: function updateFeature(feature) {
      this._updateFeature(feature);
    },
    clear: function clear() {
      this._clearFeatures();
    },
    getFeatures: function getFeatures() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this._getFeatures(options);
    },
    commit: function commit(commitItems, featurestore) {
      return this._commit(commitItems, featurestore);
    }
  };

  base(this);
}

inherit(FeaturesStore, G3WObject);

var proto = FeaturesStore.prototype;

proto.clone = function () {
  return _.cloneDeep(this);
};

proto.setProvider = function (provider) {
  this._provider = provider;
};

proto.getProvider = function () {
  return this._provider;
};

// method unlock features
proto.unlock = function () {
  var d = $.Deferred();
  this._provider.unlock().then(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

// method get all features from server or attribute _features
proto._getFeatures = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  if (this._provider) {
    this._provider.getFeatures(options).then(function (options) {
      var features = _this2._filterFeaturesResponse(options);
      _this2.addFeatures(features);
      d.resolve(features);
    }).fail(function (err) {
      return d.reject(err);
    });
  } else d.resolve(this._readFeatures());
  return d.promise();
};

//filter features to add
proto._filterFeaturesResponse = function () {
  var _this3 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$features = options.features,
      features = _options$features === undefined ? [] : _options$features,
      _options$featurelocks = options.featurelocks,
      featurelocks = _options$featurelocks === undefined ? [] : _options$featurelocks;

  var featuresToAdd = features.filter(function (feature) {
    var featureId = feature.getId();
    var added = _this3._loadedIds.indexOf(featureId) !== -1;
    if (!added) _this3._loadedIds.push(featureId);
    return !added;
  });
  this._filterLockIds(featurelocks);
  return featuresToAdd;
};

// method cget fetaures locked
proto._filterLockIds = function (featurelocks) {
  var _lockIds = this._lockIds.map(function (lockid) {
    return lockid.featureid;
  });
  var toAddLockId = featurelocks.filter(function (featurelock) {
    return _lockIds.indexOf(featurelock.featureid) === -1;
  });
  this._lockIds = [].concat(_toConsumableArray(this._lockIds), _toConsumableArray(toAddLockId));
};

proto.addLoadedIds = function (id) {
  this._loadedIds.push(id);
};

proto.getLockIds = function () {
  return this._lockIds;
};

//method to add new lockid
proto.addLockIds = function (lockIds) {
  var _this4 = this;

  this._lockIds = _.union(this._lockIds, lockIds);
  this._lockIds.forEach(function (lockId) {
    return _this4._loadedIds.push(lockId.featureid);
  });
};

proto._readFeatures = function () {
  return this._features;
};

proto._commit = function (commitItems) {
  var d = $.Deferred();
  if (commitItems && this._provider) {
    commitItems.lockids = this._lockIds;
    this._provider.commit(commitItems).then(function (response) {
      d.resolve(response);
    }).fail(function (err) {
      d.reject(err);
    });
  } else {
    d.reject();
  }
  return d.promise();
};

// get feature from id
proto.getFeatureById = function (featureId) {
  return this._features.find(function (feature) {
    return feature.getId() == featureId;
  });
};

proto.getFeatureByUid = function (uid) {
  return this._features.find(function (feature) {
    return feature.getUid() === uid;
  });
};

proto._addFeature = function (feature) {
  this._features.push(feature);
};

//substitute feature after update
proto._updateFeature = function (feature) {
  var _this5 = this;

  this._features.find(function (feat, idx) {
    if (feat.getUid() === feature.getUid()) {
      _this5._features[idx] = feature;
      return true;
    }
  });
};

proto.setFeatures = function (features) {
  this._features = features;
};

proto._removeFeature = function (feature) {
  this._features = this._features.filter(function (feat) {
    return feature.getUid() !== feat.getUid();
  });
};

proto._clearFeatures = function () {
  this._features = null;
  this._features = [];
  this._lockIds = [];
  this._loadedIds = [];
};

proto.getDataProvider = function () {
  return this._provider;
};

// only read downloaded features
proto.readFeatures = function () {
  return this._features;
};

module.exports = FeaturesStore;

},{"core/g3wobject":415,"core/utils//utils":485,"core/utils/utils":485}],436:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var FeaturesStore = require('./featuresstore');

// Storage of the feature in vector layer
function OlFeaturesStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._features = options.features || new ol.Collection([]);
}

inherit(OlFeaturesStore, FeaturesStore);

var proto = OlFeaturesStore.prototype;

proto.getLength = function () {
  return this._features.getLength();
};

//overwrite
proto.setFeatures = function () {
  var _this = this;

  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  features.forEach(function (feature) {
    _this._features.push(feature);
  });
};
// overwrite
proto.readFeatures = function () {
  return this._features.getArray();
};

proto.getFeaturesCollection = function () {
  return this._features;
};

proto.getFeatureById = function (featureId) {
  return this._features.getArray().find(function (feature) {
    return feature.getId() == featureId;
  });
};

proto.getFeatureByUid = function (uid) {
  return this._features.getArray().find(function (feature) {
    return feature.getUid() === uid;
  });
};

proto._addFeature = function (feature) {
  this._features.push(feature);
  // useful for ol.source.Vector
  this._features.dispatchEvent('change');
};

//sobtitute the feature after modify
proto._updateFeature = function (feature) {
  // set index at -1
  var index = -1;
  var featuresArray = this._features.getArray();
  for (var i = 0; featuresArray.length; i++) {
    var _feature = featuresArray[i];
    if (_feature.getUid() === feature.getUid()) {
      index = i;
      break;
    }
  }
  if (index >= 0) {
    this._features.removeAt(index);
    this._features.insertAt(index, feature);
    this._features.dispatchEvent('change');
  }
};

// remove feature from store
proto._removeFeature = function (feature) {
  var featuresArray = this._features.getArray();
  for (var i = 0; i < featuresArray.length; i++) {
    var feat = featuresArray[i];
    if (feature.getUid() === feat.getUid()) {
      this._features.removeAt(i);
      break;
    }
  }
  this._features.dispatchEvent('change');
};

proto._clearFeatures = function () {
  try {
    this._features.clear();
  } catch (err) {}
  this._features = null;
  this._features = new ol.Collection([]);
};

module.exports = OlFeaturesStore;

},{"./featuresstore":435,"core/utils//utils":485,"core/utils/utils":485}],437:[function(require,module,exports){
var _operators = require('./operators');

//Expression
function Expression() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._layerName = options.layerName;
  var filter = options.filter;
  this._expression = filter && filter || '';
}

var proto = Expression.prototype;

proto.and = function (field, value) {
  this._expression = this._expression ? this._expression + ' AND ' : this._expression;
  if (field && value) {
    this.eq(field, value);
  }
  return this;
};

proto.or = function () {
  if (field && value) {
    this._expression = this._expression ? this._expression + ' OR ' : this._expression;
    this.eq(field, value);
  }
  return this;
};

proto.eq = function (field, value) {
  this._expression = this._expression + this._build('eq', field, value);
  return this;
};

proto.like = function (field, value) {
  this._expression = this._expression + this._build('LIKE', field, value);
  return this;
};

proto.ilike = function (field, value) {
  this._expression = this._expression + this._build('ILIKE', field, value);
  return this;
};

proto.not = function (field, value) {
  this._expression = this._expression + this._build('NOT', field, value);
  return this;
};

proto.gt = function (field, value) {
  this._expression = this._expression + this._build('gt', field, value);
  return this;
};

proto.gte = function (field, value) {
  this._expression = this._expression + this._build('gte', field, value);
  return this;
};

proto.lt = function (field, value) {
  this._expression = this._expression + this._build('lt', field, value);
  return this;
};

proto.lte = function (field, value) {
  this._expression = this._expression + this._build('lte', field, value);
  return this;
};

proto.clear = function () {
  this._expression = '';
  return this;
};

// get expression method to get the realt value of the expression
proto.get = function () {
  return this._layerName ? this._layerName + ': ' + this._expression : this._expression;
};

proto._build = function (operator, field, value) {
  return ['"' + field + '"', _operators.EXPRESSION_OPERATORS[operator], '' + value].join(' ');
};

proto.createSingleExpressionElement = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      value = _ref.value,
      attribute = _ref.attribute,
      operator = _ref.operator,
      logicop = _ref.logicop;

  var filterElement = void 0;
  var valueExtra = operator === 'LIKE' || operator === 'ILIKE' ? "%" : "";
  var filterOp = _operators.EXPRESSION_OPERATORS[operator];
  var filterLogicOperator = logicop && ' ' + logicop + ' ' || '';
  if (operator === 'IN') {
    var _value = Array.isArray(value) ? value : [value];
    var filterValue = '( ' + _value.map(function (value) {
      return '\'' + value + '\'';
    }).join(',').replace(/,/g, ' , ') + ' )';
    filterElement = '"' + attribute + '" ' + filterOp + ' ' + filterValue + filterLogicOperator;
  } else if (value !== null && value !== undefined && !(Number.isNaN(value) || !value.toString().trim())) {
    var singolequote = typeof value !== 'number' ? value.split("'") : [];
    if (singolequote.length > 1) {
      var _filterElements = [];
      for (var i = 0; i < singolequote.length; i++) {
        var _value2 = singolequote[i];
        if (!_value2) continue;
        var _filterOp = 'ILIKE';
        var _filterValue = ('%' + _value2 + '%').trim();
        var _filterElement = '"' + attribute + '" ' + _filterOp + ' \'' + _filterValue + '\'';
        _filterElements.push(_filterElement);
      }
      filterElement = '' + _filterElements.join(' AND ') + filterLogicOperator;
    } else filterElement = '"' + attribute + '" ' + filterOp + ' \'' + valueExtra + value + valueExtra + '\'' + filterLogicOperator;
  }
  return filterElement;
};

proto.createExpressionFromFilterObject = function () {
  var _this = this;

  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var filterElements = [];
  var rootFilter = void 0;
  for (var operator in filter) {
    rootFilter = _operators.EXPRESSION_OPERATORS[operator];
    var inputs = filter[operator];
    inputs.forEach(function (input) {
      for (var _operator in input) {
        var _value3 = input[_operator];
        if (Array.isArray(_value3)) {
          _this.createExpressionFromFilterObject(input);
        } else {
          var _field = input[_operator];
          for (var attribute in _field) {
            var _value4 = _field[attribute];
            var fieldElement = _this.createSingleExpressionElement({
              value: _value4,
              operator: _operator,
              attribute: attribute
            });
            filterElements.push(fieldElement);
          }
        }
      }
    });
    rootFilter = filterElements.length > 0 ? filterElements.join(" " + rootFilter + " ") : false;
  }
  return rootFilter;
};

proto.createExpressionFromField = function (_ref2) {
  var layerName = _ref2.layerName,
      field = _ref2.field,
      value = _ref2.value,
      _ref2$operator = _ref2.operator,
      operator = _ref2$operator === undefined ? 'eq' : _ref2$operator;

  var filter = this.createSingleExpressionElement({
    attribute: field,
    value: value,
    operator: operator
  });
  this._expression = layerName + ':' + filter;
  return this;
};

proto.createExpressionFromFilterArray = function () {
  var _this2 = this;

  var inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var filter = '';
  // set logicop of last element to null
  var inputsLength = inputs.length ? inputs.length - 1 : inputs.length;
  inputs.forEach(function (input, index) {
    var filterElement = _this2.createSingleExpressionElement(input);
    filter = '' + filter + (input.logicop && index === inputsLength ? filterElement.substring(0, filterElement.length - (input.logicop.length + 1)) : filterElement);
  });
  return filter || undefined;
};

proto.createExpressionFromFilter = function (filter, layerName) {
  var filterParam = Array.isArray(filter) ? this.createExpressionFromFilterArray(filter) : this.createExpressionFromFilterObject(filter);
  if (filterParam) this._expression = layerName + ':' + filterParam;
  return this;
};

module.exports = Expression;

},{"./operators":439}],438:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// class Filter to build filter
// useful by provider providers to get data
function Filter() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._filter = null;
  this._type = null;
  this.config = config;
}

var proto = Filter.prototype;

/**
 * Config methods
 */

proto.getConfig = function () {
  return this.config;
};

proto.setConfig = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = config;
};

proto.mergeConfig = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = _extends({}, this.config, config);
};

/***
 *  end config methods
 */

proto.getAll = function () {
  this._type = Filter.TYPES.all;
  this._filter = null;
};

// to create complex filter
proto.setExpression = function (expression) {
  this._type = Filter.TYPES.expression;
  this._filter = expression;
};

proto.setGeometry = function (geometry) {
  this._type = Filter.TYPES.geometry;
  this._filter = geometry;
  return this;
};

proto.setBBOX = function (bbox) {
  this._type = Filter.TYPES.bbox;
  this._filter = bbox;
  return this;
};

proto.setFids = function (ids) {
  this._type = Filter.TYPES.fids;
  this._filter = ids;
  return this;
};

proto.serialize = function () {
  return JSON.stringify(this);
};

// get filter value
proto.get = function () {
  return this._filter;
};

proto.getType = function () {
  return this._type;
};

proto.clear = function () {
  this._filter = null;
};

Filter.TYPES = {
  bbox: 'bbox',
  geometry: 'geometry',
  expression: 'expression',
  fids: 'fids',
  all: 'all'
};

module.exports = Filter;

},{}],439:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var OPERATORS = exports.OPERATORS = {
  gte: '>=',
  lte: '<=',
  NOT: '!=',
  eq: '=',
  gt: '>',
  lt: '<',
  IN: 'IN',
  'NOT IN': 'NOT IN',
  LIKE: 'LIKE',
  ILIKE: 'ILIKE',
  AND: 'AND',
  OR: 'OR'
};

var EXPRESSION_OPERATORS = exports.EXPRESSION_OPERATORS = _extends({
  'lte=': '<=',
  ltgt: '!=',
  ilike: 'ILIKE',
  like: 'LIKE'
}, OPERATORS);

},{}],440:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var VectorLayer = require('./vectorlayer');
var GeojsonMapLayer = require('./map/geojson');

function GeojsonLayer(config, options) {
  base(this, config, options);
  this.config.style = config.style;
  this.setup(config);
}

inherit(GeojsonLayer, VectorLayer);

var proto = GeojsonLayer.prototype;

proto.getMapLayer = function () {
  if (this._mapLayer) return this._mapLayer;
  var url = this.get('source').url;
  var name = this.getName();
  var id = this.getId();
  var style = this.get('style');
  var provider = this.getProvider('data');
  var options = {
    url: url,
    projection: this.getProjection().getCode(),
    id: id,
    name: name,
    style: style,
    provider: provider
  };
  this._mapLayer = new GeojsonMapLayer(options);
  return this._mapLayer;
};

module.exports = GeojsonLayer;

},{"./map/geojson":451,"./vectorlayer":465,"core/utils/utils":485}],441:[function(require,module,exports){
var Projections = require('g3w-ol/src/projection/projections');

var _require = require('g3w-ol/src/utils/utils'),
    getScaleFromResolution = _require.getScaleFromResolution;

var _require2 = require('core/utils/utils'),
    sanitizeUrl = _require2.sanitizeUrl;

var _require3 = require('core/utils/geo'),
    createFeatureFromGeometry = _require3.createFeatureFromGeometry;

var GUI = require('gui/gui');
var RESERVERDPARAMETRS = {
  wms: ['VERSION', 'REQUEST', 'BBOX', 'LAYERS', 'WIDTH', 'HEIGHT', 'DPI', 'FORMAT', 'CRS']
};

function GeoLayerMixin() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
}

var proto = GeoLayerMixin.prototype;

proto.setup = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!this.config) {
    console.log("GeoLayerMixin must be used from a valid (geo) Layer instance");
    return;
  }
  var project = options.project;

  this.config.map_crs = project.getProjection().getCode();
  this.config.multilayerid = config.multilayer;
  // Features that contain
  this.olSelectionFeatures = {}; // key id / fid of feature and values is an object with feature and added
  // state extend of layer setting geolayer property to true
  // and adding informations of bbox
  _.extend(this.state, {
    geolayer: config.geometrytype !== "NoGeometry",
    legend: {
      url: null,
      loading: false,
      error: false,
      show: true
    },
    external: config.source && config.source.external || false,
    bbox: config.bbox || null,
    visible: config.visible || false,
    checked: config.visible || false,
    epsg: config.crs.epsg,
    hidden: config.hidden || false,
    scalebasedvisibility: config.scalebasedvisibility || false,
    minscale: config.minscale,
    maxscale: config.maxscale,
    ows_method: config.ows_method,
    exclude_from_legend: typeof config.exclude_from_legend == 'boolean' ? config.exclude_from_legend : true
  });
  if (config.projection) this.config.projection = config.projection.getCode() === config.crs.epsg ? config.projection : Projections.get(config.crs);
  if (config.attributions) this.config.attributions = config.attributions;
  config.source && config.source.url && this._sanitizeSourceUrl();
};

/**
 * Clear all selection openlayer features
 */
proto.clearOlSelectionFeatures = function () {
  this.olSelectionFeatures = null;
};

/**
 * Get openlayer selection feature by feature id
 * @param id
 * @returns {*}
 */
proto.getOlSelectionFeature = function (id) {
  return this.olSelectionFeatures[id];
};

proto.updateOlSelectionFeature = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref.id,
      geometry = _ref.geometry;

  var featureObject = this.olSelectionFeatures[id];
  if (featureObject) {
    geometry = new ol.geom[geometry.type](geometry.coordinates);
    var feature = featureObject.feature;
    var _mapService = GUI.getComponent('map').getService();
    feature.setGeometry(geometry);
    _mapService.setSelectionFeatures('update', {
      feature: feature
    });
  }
};

/**
 * Delete openlayer feature selection by feature id
 * @param id
 */
proto.deleteOlSelectionFeature = function (id) {
  var featureObject = this.olSelectionFeatures[id];
  if (featureObject) {
    mapService.setSelectionFeatures('remove', {
      feature: featureObject.feature
    });
    delete this.olSelectionFeatures[id];
  }
};

/**
 * Get all openlyare feature selection
 * @returns {{}|null}
 */
proto.getOlSelectionFeatures = function () {
  return this.olSelectionFeatures;
};

proto.addOlSelectionFeature = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref2.id,
      geometry = _ref2.geometry;

  this.olSelectionFeatures[id] = this.olSelectionFeatures[id] || {
    feature: createFeatureFromGeometry({ id: id, geometry: geometry }),
    added: false
  };
  return this.olSelectionFeatures[id];
};

proto.showAllOlSelectionFeatures = function () {
  var mapService = GUI.getComponent('map').getService();
  Object.values(this.olSelectionFeatures).forEach(function (featureObject) {
    !featureObject.added && mapService.setSelectionFeatures('add', {
      feature: featureObject.feature
    });
    featureObject.added = true;
  });
};

proto.setInversionOlSelectionFeatures = function () {
  var mapService = GUI.getComponent('map').getService();
  Object.values(this.olSelectionFeatures).forEach(function (featureObject) {
    mapService.setSelectionFeatures(featureObject.added ? 'remove' : 'add', {
      feature: featureObject.feature
    });
    featureObject.added = !featureObject.added;
  });
};

proto.setOlSelectionFeatureByFid = function (fid, action) {
  var feature = this.olSelectionFeatures[fid] && this.olSelectionFeatures[fid].feature;
  return feature && this.setOlSelectionFeatures({ id: fid, feature: feature }, action);
};

proto.setOlSelectionFeatures = function (feature) {
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'add';

  var mapService = GUI.getComponent('map').getService();
  if (!feature) {
    Object.values(this.olSelectionFeatures).forEach(function (featureObject) {
      featureObject.added && mapService.setSelectionFeatures('remove', {
        feature: featureObject.feature
      });
      featureObject.added = false;
    });
  } else {
    var featureObject = this.olSelectionFeatures[feature.id] || this.addOlSelectionFeature(feature);
    if (action === 'add') {
      !featureObject.added && mapService.setSelectionFeatures(action, {
        feature: featureObject.feature
      });
      featureObject.added = true;
    } else {
      mapService.setSelectionFeatures(action, {
        feature: featureObject.feature
      });
      featureObject.added = false;
    }
  }
  return !Object.values(this.olSelectionFeatures).find(function (featureObject) {
    return featureObject.added;
  });
};

/**
 * Create a get parameter url right
 * @param type
 * @private
 */
proto._sanitizeSourceUrl = function () {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wms';

  var sanitizedUrl = sanitizeUrl({
    url: this.config.source.url,
    reserverParameters: RESERVERDPARAMETRS[type]
  });
  this.config.source.url = sanitizedUrl;
};

proto.setChecked = function (bool) {
  this.state.checked = bool;
};

proto.isChecked = function () {
  return this.state.checked;
};

proto.setVisible = function (visible) {
  this.state.visible = visible;
};

//get syle form layer
proto.getStyles = function () {
  return this.config.source.external ? this.config.source.styles : this.config.styles;
};

proto.getStyle = function () {
  return this.config.source.external ? this.config.source.styles : this.config.styles ? this.config.styles.find(function (style) {
    return style.current;
  }).name : '';
};

proto.isDisabled = function () {
  return this.state.disabled;
};

proto.isPrintable = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      scale = _ref3.scale;

  var visible = !this.state.groupdisabled;
  return this.isChecked() && visible && (!this.state.scalebasedvisibility || scale >= this.state.maxscale && scale <= this.state.minscale);
};

/**
 * Disable layer by check scalevisibility configuration value
 * @param resolution
 * @param mapUnits
 */
proto.setDisabled = function (resolution) {
  var mapUnits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'm';

  if (this.state.scalebasedvisibility) {
    var mapScale = getScaleFromResolution(resolution, mapUnits);
    this.state.disabled = !(mapScale >= this.state.maxscale && mapScale <= this.state.minscale);
    this.state.disabled = this.state.minscale === 0 ? !(mapScale >= this.state.maxscale) : this.state.disabled;
  } else this.state.disabled = this.state.groupdisabled;
};

proto.getMultiLayerId = function () {
  return this.config.multilayerid;
};

proto.getGeometryType = function () {
  return this.config.geometrytype;
};

proto.getOwsMethod = function () {
  return this.config.ows_method;
};

proto.setProjection = function () {
  var crs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config.projection = Projections.get(crs);
};

proto.getProjection = function () {
  return this.config.projection;
};

proto.getEpsg = function () {
  return this.config.crs.epsg;
};

proto.getCrs = function () {
  return this.config.projection && this.config.projection.getCode() || null;
};

proto.getMapCrs = function () {
  return this.config.map_crs;
};

proto.isCached = function () {
  return this.config.cache_url && this.config.cache_url !== '';
};

proto.getCacheUrl = function () {
  if (this.isCached()) return this.config.cache_url;
};

// return if layer has inverted axis
proto.hasAxisInverted = function () {
  var projection = this.getProjection();
  var axisOrientation = projection.getAxisOrientation ? projection.getAxisOrientation() : "enu";
  return axisOrientation.substr(0, 2) === 'ne';
};

proto.getMapLayer = function () {
  console.log('overwrite by single layer');
};

proto.setMapProjection = function (mapProjection) {
  this._mapProjection = mapProjection;
};

proto.getMapProjection = function () {
  return this._mapProjection;
};

module.exports = GeoLayerMixin;

},{"core/utils/geo":484,"core/utils/utils":485,"g3w-ol/src/projection/projections":532,"g3w-ol/src/utils/utils":534,"gui/gui":575}],442:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    mixin = _require.mixin;

var Layer = require('core/layers/layer');
var VectorLayer = require('./vectorlayer');
var WMSLayer = require('./map/wmslayer');
var ARCGISMAPSERVERLayer = require('./map/arcgismapserverlayer');
var XYZLayer = require('./map/xyzlayer');
var LegendService = require('./legend/legendservice');
var GeoLayerMixin = require('./geolayermixin');

function ImageLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /*{
    id,
    title,
    name,
    origname,
    multilayerid,
    servertype,
    source,
    crs,
    projection,
    bbox,
    capabilities,
    cache_url,
    baselayer,
    geometrytype,
    editops,
    expanded,
    fields,
    wmsUrl,
    infoformat,
    infourl,
    maxscale,
    minscale,
    visible,
    scalebasedvisibility,
    wfscapabilities
    ows_method
    wms_use_layer_ids,
    styles
  }*/
  this.setters = {
    change: function change() {}
  };

  base(this, config, options);
  this.config.baselayer = config.baselayer || false;
  this.type = Layer.LayerTypes.IMAGE;
  this.legendUrl = null;
  this.customParams = {};
  this.setup(config, options);
}

inherit(ImageLayer, Layer);

mixin(ImageLayer, GeoLayerMixin);

var proto = ImageLayer.prototype;

proto.getLayerForEditing = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$force = _ref2.force,
      force = _ref2$force === undefined ? false : _ref2$force,
      vectorurl = _ref2.vectorurl,
      project_type = _ref2.project_type,
      project = _ref2.project;

  var _project, editableLayer, editingLayer;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(this.isEditable() || force)) {
            _context.next = 16;
            break;
          }

          _project = _project || require('core/project/projectsregistry').getCurrentProject();
          editableLayer = new VectorLayer(this.config, {
            vectorurl: vectorurl,
            project_type: project_type,
            project: _project
          });
          // set editing layer

          _context.prev = 3;
          _context.next = 6;
          return editableLayer.layerForEditing;

        case 6:
          editingLayer = _context.sent;

          this.setEditingLayer(editingLayer);
          return _context.abrupt('return', editingLayer);

        case 11:
          _context.prev = 11;
          _context.t0 = _context['catch'](3);
          return _context.abrupt('return', Promise.reject(_context.t0));

        case 14:
          _context.next = 17;
          break;

        case 16:
          return _context.abrupt('return', null);

        case 17:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this, [[3, 11]]);
}));

proto.isBaseLayer = function () {
  return this.config.baselayer;
};

proto.isWMS = function () {
  return ImageLayer.WMSServerTypes.indexOf(this.config.servertype) > -1;
};

proto.isLayerProjectionASMapProjection = function () {
  return this.config.crs.epsg === this.config.map_crs;
};

proto.getCrs = function () {
  return this.config.crs.epsg;
};

proto.isExternalWMS = function () {
  return !!(this.config.source && this.config.source.external && this.config.source.url);
};

proto.isArcgisMapserver = function () {
  return this.isExternalWMS() && this.config.source.type === Layer.SourceTypes.ARCGISMAPSERVER;
};

proto._getBaseLayerName = function () {
  return this.isWmsUseLayerIds() ? this.getId() : this.getName();
};

proto.getWMSLayerName = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$type = _ref3.type,
      type = _ref3$type === undefined ? 'map' : _ref3$type;

  var legendMapBoolean = type === 'map' ? this.isExternalWMS() && this.isLayerProjectionASMapProjection() : true;
  var layerName = this._getBaseLayerName();
  if (legendMapBoolean && this.config.source && (type === 'legend' || this.config.source.external) && (this.config.source.layers || this.config.source.layer)) {
    layerName = this.config.source.layers || this.config.source.layer;
  }
  return layerName;
};

proto.getWFSLayerName = function () {
  return this.getQueryLayerName().replace(/[/\s]/g, '_');
};

proto.getWMSInfoLayerName = function () {
  return this._getBaseLayerName();
};

proto.getPrintLayerName = function () {
  return this.isWmsUseLayerIds() ? this.getId() : this.getName();
};

proto.getStringBBox = function () {
  var bbox = this.config.bbox;
  return bbox.minx + ',' + bbox.miny + ',' + bbox.maxx + ',' + bbox.maxy;
};

proto.getFullWmsUrl = function () {
  var ProjectsRegistry = require('core/project/projectsregistry');
  var metadata_wms_url = ProjectsRegistry.getCurrentProject().getState().metadata.wms_url;
  return this.isExternalWMS() || !metadata_wms_url ? this.getWmsUrl() : metadata_wms_url;
};

// values: map, legend
proto.getWmsUrl = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$type = _ref4.type,
      type = _ref4$type === undefined ? 'map' : _ref4$type;

  var legendMapBoolean = type === 'map' ? this.isExternalWMS() && this.isLayerProjectionASMapProjection() : true;
  return legendMapBoolean && this.config.source && (type === 'legend' || this.config.source.external) && this.config.source.type === 'wms' && this.config.source.url ? this.config.source.url : this.config.wmsUrl;
};

proto.getQueryUrl = function () {
  var url = base(this, 'getQueryUrl');
  if (this.getServerType() === Layer.ServerTypes.QGIS && this.isExternalWMS() && this.isLayerProjectionASMapProjection()) {
    url = url + 'SOURCE=' + this.config.source.type;
  }
  return url;
};

proto.getIconUrlFromLegend = function () {
  return this.getLegendUrl({
    layertitle: false
  });
};

proto.getLegendUrl = function () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.legendUrl = LegendService.get({
    layer: this,
    params: _extends({}, params, this.customParams)
  });
  return this.legendUrl;
};

proto.setMapParamstoLegendUrl = function (_ref5) {
  var bbox = _ref5.bbox,
      crs = _ref5.crs;

  this.customParams = _extends({}, this.customParams, {
    bbox: bbox,
    crs: crs
  });
};

proto.getWfsCapabilities = function () {
  return this.config.wfscapabilities || this.config.capabilities === 1;
};

proto.getMapLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments[1];

  var ApplicationService = require('core/applicationservice');
  var iframe_internal = ApplicationService.isIframe() && !this.isExternalWMS();
  options.iframe_internal = iframe_internal;
  var mapLayer = void 0;
  var method = this.isExternalWMS() ? 'GET' : this.getOwsMethod();
  if (this.isCached()) {
    options.extent = this.config.bbox ? [this.config.bbox.minx, this.config.bbox.miny, this.config.bbox.maxx, this.config.bbox.maxy] : null;
    mapLayer = new XYZLayer(options, method);
  } else {
    if (this.isExternalWMS() && this.config.source && this.config.source.type === Layer.SourceTypes.ARCGISMAPSERVER) {
      options = _extends({}, options, this.config.source);
      mapLayer = new ARCGISMAPSERVERLayer(options, extraParams);
    } else {
      options.url = options.url || this.getWmsUrl();
      mapLayer = new WMSLayer(options, extraParams, method);
    }
  }
  return mapLayer;
};

ImageLayer.WMSServerTypes = [Layer.ServerTypes.QGIS, Layer.ServerTypes.Mapserver, Layer.ServerTypes.Geoserver, Layer.ServerTypes.OGC];

module.exports = ImageLayer;

},{"./geolayermixin":441,"./legend/legendservice":448,"./map/arcgismapserverlayer":450,"./map/wmslayer":454,"./map/xyzlayer":455,"./vectorlayer":465,"core/applicationservice":401,"core/layers/layer":443,"core/project/projectsregistry":478,"core/utils/utils":485}],443:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('core/i18n/i18n.service').t;

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    base = _require.base,
    XHR = _require.XHR;

var G3WObject = require('core/g3wobject');
var Filter = require('core/layers/filter/filter');

var _require2 = require('core/utils/geo'),
    geometryFields = _require2.geometryFields;

var Relations = require('core/relations/relations');
var ProviderFactory = require('core/layers/providers/providersfactory');

// Base Class of all Layer
function Layer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var ProjectsRegistry = require('core/project/projectsregistry');
  this.config = config;
  // assign some attribute
  config.id = config.id || 'Layer';
  config.title = config.title || config.name;
  config.download = !!config.download;
  config.geolayer = false;
  config.baselayer = !!config.baselayer;
  config.fields = config.fields || {};
  config.urls = _extends({
    query: config.infourl && config.infourl !== '' ? config.infourl : config.wmsUrl
  }, config.urls || {});
  var _options$project = options.project,
      project = _options$project === undefined ? ProjectsRegistry.getCurrentProject() : _options$project;

  this.config.search_endpoint = project.getSearchEndPoint();
  var projectRelations = project.getRelations();
  // create relations
  this._relations = this._createRelations(projectRelations);
  if (!this.isBaseLayer()) {
    //filtertoken
    //set url to get varios type of data
    var projectType = project.getType();
    var projectId = project.getId();
    var suffixUrl = projectType + '/' + projectId + '/' + config.id + '/';
    var vectorUrl = project.getVectorUrl();
    this.config.urls.filtertoken = vectorUrl + 'filtertoken/' + suffixUrl;
    this.config.urls.data = vectorUrl + 'data/' + suffixUrl;
    this.config.urls.shp = vectorUrl + 'shp/' + suffixUrl;
    this.config.urls.csv = vectorUrl + 'csv/' + suffixUrl;
    this.config.urls.xls = vectorUrl + 'xls/' + suffixUrl;
    this.config.urls.gpx = vectorUrl + 'gpx/' + suffixUrl;
    this.config.urls.gpkg = vectorUrl + 'gpkg/' + suffixUrl;
    this.config.urls.editing = vectorUrl + 'editing/' + suffixUrl;
    this.config.urls.commit = vectorUrl + 'commit/' + suffixUrl;
    this.config.urls.config = vectorUrl + 'config/' + suffixUrl;
    this.config.urls.unlock = vectorUrl + 'unlock/' + suffixUrl;
    this.config.urls.widget = {
      unique: vectorUrl + 'widget/unique/data/' + suffixUrl
    };
    //set custom parameters based on project qgis version
    this.config.searchParams = {
      I: 0,
      J: 0
    };
  }

  // dinamic layer values useful for layerstree
  var defaultstyle = config.styles && config.styles.find(function (style) {
    return style.current;
  }).name;
  this.state = {
    id: config.id,
    title: config.title,
    selected: config.selected || false,
    disabled: config.disabled || false,
    metadata: config.metadata,
    metadata_querable: this.isBaseLayer() ? false : this.isQueryable({ onMap: false }),
    openattributetable: this.isBaseLayer() ? false : this.canShowTable(),
    removable: config.removable || false,
    downloadable: this.isDownloadable(),
    source: config.source,
    styles: config.styles,
    defaultstyle: defaultstyle,
    infoformat: this.getInfoFormat(),
    geolayer: false,
    selection: {
      active: false
    },
    filter: {
      active: false
    },
    attributetable: {
      pageLength: null
    },
    visible: config.visible || false,
    tochighlightable: false
  };

  // add selectionFids
  this.selectionFids = new Set();

  // referred to (layersstore);
  this._layersstore = config.layersstore || null;
  /*
    Providers that layer can use
     Three type of provider:
      1 - query
      2 - filter
      3 - data -- raw data del layer (editing)
   */
  // server type
  var serverType = this.config.servertype;
  // source layer
  var sourceType = this.config.source ? this.config.source.type : null;
  if (serverType && sourceType) {
    this.providers = {
      query: ProviderFactory.build('query', serverType, sourceType, {
        layer: this
      }),
      filter: ProviderFactory.build('filter', serverType, sourceType, {
        layer: this
      }),
      filtertoken: ProviderFactory.build('filtertoken', serverType, sourceType, {
        layer: this
      }),
      search: ProviderFactory.build('search', serverType, sourceType, {
        layer: this
      }),
      data: ProviderFactory.build('data', serverType, sourceType, {
        layer: this
      })
    };
  }
  base(this);
}

inherit(Layer, G3WObject);

var proto = Layer.prototype;

proto.getSearchParams = function () {
  return this.config.searchParams;
};

/**
 *
 * @returns {*}
 */
proto.getSearchEndPoint = function () {
  return this.getType() !== Layer.LayerTypes.TABLE ? this.config.search_endpoint : "api";
};

//relations
proto._createRelations = function (projectRelations) {
  var layerId = this.getId();
  var relations = projectRelations.filter(function (relation) {
    return [relation.referencedLayer, relation.referencingLayer].indexOf(layerId) !== -1;
  });
  return new Relations({
    relations: relations
  });
};

// return relations of layer
proto.getRelations = function () {
  return this._relations;
};

proto.getRelationById = function (id) {
  return this._relations.getArray().find(function (relation) {
    return relation.getId() === id;
  });
};

proto.getRelationAttributes = function (relationName) {
  var relation = this._relations.find(function (relation) {
    return relation.name === relationName;
  });
  return relation ? relation.fields : [];
};

proto.getRelationsAttributes = function () {
  var fields = {};
  this.state.relations.forEach(function (relation) {
    return fields[relation.name] = relation.fields;
  });
  return fields;
};

proto.isChild = function () {
  if (!this.getRelations()) return false;
  return this._relations.isChild(this.getId());
};

proto.isFather = function () {
  if (!this.getRelations()) return false;
  return this._relations.isFather(this.getId());
};

proto.getChildren = function () {
  if (!this.isFather()) return [];
  return this._relations.getChildren(this.getId());
};

proto.getFathers = function () {
  if (!this.isChild()) return [];
  return this._relations.getFathers(this.getId());
};

proto.hasChildren = function () {
  if (!this.hasRelations()) return false;
  return this._relations.hasChildren(this.getId());
};

proto.hasFathers = function () {
  if (!this.hasRelations()) return false;
  return this._relations.hasFathers(this.getId());
};

proto.hasRelations = function () {
  return !!this._relations;
};
//end relations


// global state
proto.setAttributeTablePageLength = function (pageLength) {
  this.state.attributetable.pageLength = pageLength;
};

proto.getAttributeTablePageLength = function () {
  return this.state.attributetable.pageLength;
};

// end global state

//filter token
proto.setFilter = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.filter.active = bool;
};

proto.getFilterActive = function () {
  return this.state.filter.active;
};

proto.toggleFilterToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          this.state.filter.active = !this.state.filter.active;
          _context.next = 3;
          return this.activeFilterToken(this.state.filter.active);

        case 3:
          return _context.abrupt('return', this.state.filter.active);

        case 4:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this);
}));

proto.activeFilterToken = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(bool) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return bool;

          case 2:
            if (!_context2.sent) {
              _context2.next = 6;
              break;
            }

            this.createFilterToken();
            _context2.next = 7;
            break;

          case 6:
            this.deleteFilterToken();

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x4) {
    return _ref2.apply(this, arguments);
  };
}();

proto.deleteFilterToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var ApplicationService;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ApplicationService = require('core/applicationservice');

          if (!this.providers['filtertoken']) {
            _context3.next = 12;
            break;
          }

          _context3.prev = 2;
          _context3.next = 5;
          return this.providers['filtertoken'].deleteFilterToken();

        case 5:
          ApplicationService.setFilterToken(null);
          this.emit('filtertokenchange', {
            layerId: this.getId()
          });
          _context3.next = 12;
          break;

        case 9:
          _context3.prev = 9;
          _context3.t0 = _context3['catch'](2);

          console.log('Error deleteing filtertoken');

        case 12:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this, [[2, 9]]);
}));

proto.createFilterToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
  var ApplicationService, filtertoken, params;
  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          ApplicationService = require('core/applicationservice');

          if (!this.providers['filtertoken']) {
            _context4.next = 22;
            break;
          }

          filtertoken = null;
          _context4.prev = 3;

          if (!(this.selectionFids.size > 0)) {
            _context4.next = 17;
            break;
          }

          if (!this.selectionFids.has(Layer.SELECTION_STATE.ALL)) {
            _context4.next = 10;
            break;
          }

          _context4.next = 8;
          return this.providers['filtertoken'].deleteFilterToken();

        case 8:
          _context4.next = 15;
          break;

        case 10:
          params = {};

          if (this.selectionFids.has(Layer.SELECTION_STATE.EXCLUDE)) params.fidsout = Array.from(this.selectionFids).filter(function (id) {
            return id !== Layer.SELECTION_STATE.EXCLUDE;
          }).join(',');else params.fidsin = Array.from(this.selectionFids).join(',');
          _context4.next = 14;
          return this.providers['filtertoken'].getFilterToken(params);

        case 14:
          filtertoken = _context4.sent;

        case 15:
          ApplicationService.setFilterToken(filtertoken);
          this.emit('filtertokenchange', {
            layerId: this.getId()
          });

        case 17:
          _context4.next = 22;
          break;

        case 19:
          _context4.prev = 19;
          _context4.t0 = _context4['catch'](3);

          console.log('Error create update token');

        case 22:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee4, this, [[3, 19]]);
}));
// end filter token
//selection Ids layer methods

proto.setSelectionFidsAll = function () {
  this.selectionFids.clear();
  this.selectionFids.add(Layer.SELECTION_STATE.ALL);
  this.isGeoLayer() && this.showAllOlSelectionFeatures();
  this.setSelection(true);
  this.state.filter.active && this.createFilterToken();
};

proto.getSelectionFids = function () {
  return this.selectionFids;
};

proto.invertSelectionFids = function () {
  if (this.selectionFids.has(Layer.SELECTION_STATE.EXCLUDE)) this.selectionFids.delete(Layer.SELECTION_STATE.EXCLUDE);else if (this.selectionFids.has(Layer.SELECTION_STATE.ALL)) this.selectionFids.delete(Layer.SELECTION_STATE.ALL);else if (this.selectionFids.size > 0) this.selectionFids.add(Layer.SELECTION_STATE.EXCLUDE);
  this.isGeoLayer() && this.setInversionOlSelectionFeatures();
  this.state.filter.active && this.createFilterToken();
  this.setSelection(this.selectionFids.size > 0);
};

proto.hasSelectionFid = function (fid) {
  if (this.selectionFids.has(Layer.SELECTION_STATE.ALL)) return true;else if (this.selectionFids.has(Layer.SELECTION_STATE.EXCLUDE)) return !this.selectionFids.has(fid);else return this.selectionFids.has(fid);
};

proto.includeSelectionFid = function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(fid) {
    var createToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (this.selectionFids.has(Layer.SELECTION_STATE.EXCLUDE) && this.selectionFids.has(fid)) {
              this.selectionFids.delete(fid);
              this.selectionFids.size === 1 && this.setSelectionFidsAll();
            } else {
              this.selectionFids.add(fid);
              !this.isSelectionActive() && this.setSelection(true);
            }
            this.isGeoLayer() && this.setOlSelectionFeatureByFid(fid, 'add');
            _context5.t0 = createToken && this.state.filter.active;

            if (!_context5.t0) {
              _context5.next = 6;
              break;
            }

            _context5.next = 6;
            return this.createFilterToken();

          case 6:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function (_x6) {
    return _ref5.apply(this, arguments);
  };
}();

proto.includeSelectionFids = function () {
  var _this = this;

  var fids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  fids.forEach(function (fid) {
    return _this.includeSelectionFid(fid);
  });
};

proto.excludeSelectionFid = function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(fid) {
    var isLastFeatureSelected;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (this.selectionFids.has(Layer.SELECTION_STATE.ALL) || this.selectionFids.size === 0) {
              this.selectionFids.clear();
              this.selectionFids.add(Layer.SELECTION_STATE.EXCLUDE);
            }
            this.selectionFids[this.selectionFids.has(Layer.SELECTION_STATE.EXCLUDE) ? 'add' : 'delete'](fid);
            if (this.selectionFids.size === 1 && this.selectionFids.has(Layer.SELECTION_STATE.EXCLUDE)) this.setselectionFidsAll();
            isLastFeatureSelected = this.isGeoLayer() && this.setOlSelectionFeatureByFid(fid, 'remove');
            _context6.t0 = this.state.filter.active;

            if (!_context6.t0) {
              _context6.next = 8;
              break;
            }

            _context6.next = 8;
            return this.createFilterToken();

          case 8:
            if (this.selectionFids.size === 0 || isLastFeatureSelected) {
              this.selectionFids.clear();
              this.setSelection(false);
            }

          case 9:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function (_x8) {
    return _ref6.apply(this, arguments);
  };
}();

proto.excludeSelectionFids = function () {
  var _this2 = this;

  var fids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  fids.forEach(function (fid) {
    return _this2.excludeSelectionFid(fid);
  });
};

proto.clearSelectionFids = function () {
  this.selectionFids.clear();
  this.isGeoLayer() && this.setOlSelectionFeatures();
  this.setSelection(false);
};
// end selection ids methods

proto.getWMSLayerName = function () {
  return this.isWmsUseLayerIds() ? this.getId() : this.getName();
};

proto.isWmsUseLayerIds = function () {
  return this.config.wms_use_layer_ids;
};

proto.getXls = function () {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      data = _ref7.data;

  var url = this.getUrl('xls');
  return XHR.fileDownload({
    url: url,
    data: data,
    httpMethod: "GET"
  });
};

proto.getShp = function () {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      data = _ref8.data;

  var url = this.getUrl('shp');
  return XHR.fileDownload({
    url: url,
    data: data,
    httpMethod: "GET"
  });
};

proto.getGpx = function () {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      data = _ref9.data;

  var url = this.getUrl('gpx');
  return XHR.fileDownload({
    url: url,
    data: data,
    httpMethod: "GET"
  });
};

proto.getGpkg = function () {
  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      data = _ref10.data;

  var url = this.getUrl('gpkg');
  return XHR.fileDownload({
    url: url,
    data: data,
    httpMethod: "GET"
  });
};

proto.getCsv = function () {
  var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      data = _ref11.data;

  var url = this.getUrl('csv');
  return XHR.fileDownload({
    url: url,
    data: data,
    httpMethod: "GET"
  });
};

proto.getSourceType = function () {
  return this.config.source ? this.config.source.type : null;
};

proto.isGeoLayer = function () {
  return this.state.geolayer;
};

proto.getDataTable = function () {
  var _this3 = this;

  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref12$page = _ref12.page,
      page = _ref12$page === undefined ? null : _ref12$page,
      _ref12$page_size = _ref12.page_size,
      page_size = _ref12$page_size === undefined ? null : _ref12$page_size,
      _ref12$ordering = _ref12.ordering,
      ordering = _ref12$ordering === undefined ? null : _ref12$ordering,
      _ref12$search = _ref12.search,
      search = _ref12$search === undefined ? null : _ref12$search,
      field = _ref12.field,
      _ref12$suggest = _ref12.suggest,
      suggest = _ref12$suggest === undefined ? null : _ref12$suggest,
      _ref12$formatter = _ref12.formatter,
      formatter = _ref12$formatter === undefined ? 0 : _ref12$formatter,
      in_bbox = _ref12.in_bbox;

  var d = $.Deferred();
  var provider = void 0;
  var params = {
    field: field,
    page: page,
    page_size: page_size,
    ordering: ordering,
    search: search,
    formatter: formatter,
    suggest: suggest,
    in_bbox: in_bbox,
    filtertoken: _applicationstate2.default.tokens.filtertoken
  };
  if (!(this.getProvider('filter') || this.getProvider('data'))) {
    d.reject();
  } else {
    if (this.state.openattributetable) {
      provider = this.getProvider('data');
      provider.getFeatures({ editing: false }, params).done(function (response) {
        var data = response.data;
        var count = response.count;
        var title = _this3.getTitle();
        var features = data.features && data.features || [];
        var headers = features.length ? features[0].properties : [];
        headers = provider._parseAttributes(_this3.getAttributes(), headers);
        var dataTableObject = {
          headers: headers,
          features: features,
          title: title,
          count: count
        };
        d.resolve(dataTableObject);
      }).fail(function (err) {
        return d.reject(err);
      });
    } else if (this.isFilterable()) {
      provider = this.getProvider('filter');
      var filter = new Filter();
      filter.getAll();
      provider.query({
        filter: filter
      }).done(function (response) {
        var data = provider.digestFeaturesForLayers(response.data);
        var dataTableObject = {
          headers: data[0].attributes,
          features: data[0].features,
          title: _this3.getTitle()
        };
        d.resolve(dataTableObject);
      }).fail(function (err) {
        return d.reject(err);
      });
    } else d.reject();
  }
  return d.promise();
};

//search Features methods
proto.searchFeatures = function () {
  var _this4 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$search_endpo = options.search_endpoint,
      search_endpoint = _options$search_endpo === undefined ? this.config.search_endpoint : _options$search_endpo;

  return new Promise(function () {
    var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(resolve, reject) {
      var _options$raw, raw, field, _options$suggest, suggest, unique, queryUrl, response;

      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = search_endpoint;
              _context7.next = _context7.t0 === 'ows' ? 3 : _context7.t0 === 'api' ? 5 : 17;
              break;

            case 3:
              _this4.search(options, params).then(function (results) {
                results = {
                  data: results
                };
                resolve(results);
              }).fail(function (error) {
                return reject(error);
              });
              return _context7.abrupt('break', 17);

            case 5:
              _options$raw = options.raw, raw = _options$raw === undefined ? false : _options$raw, field = options.filter, _options$suggest = options.suggest, suggest = _options$suggest === undefined ? {} : _options$suggest, unique = options.unique, queryUrl = options.queryUrl;
              _context7.prev = 6;
              _context7.next = 9;
              return _this4.getFilterData({
                queryUrl: queryUrl,
                raw: raw,
                field: field,
                suggest: suggest,
                unique: unique
              });

            case 9:
              response = _context7.sent;

              resolve(response);
              _context7.next = 16;
              break;

            case 13:
              _context7.prev = 13;
              _context7.t1 = _context7['catch'](6);

              reject(_context7.t1);

            case 16:
              return _context7.abrupt('break', 17);

            case 17:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, _this4, [[6, 13]]);
    }));

    return function (_x18, _x19) {
      return _ref13.apply(this, arguments);
    };
  }());
};

/*
* getFilterData is a function to get data feature based on fields and suggets
* params:
* - suggest (mandatory): object with key is a field of layer and value is value of the field to filter
* - fields: Array of object with type of suggest (see above)
* */
proto.getFilterData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref15.field,
      _ref15$raw = _ref15.raw,
      raw = _ref15$raw === undefined ? false : _ref15$raw,
      _ref15$suggest = _ref15.suggest,
      suggest = _ref15$suggest === undefined ? {} : _ref15$suggest,
      unique = _ref15.unique,
      _ref15$formatter = _ref15.formatter,
      formatter = _ref15$formatter === undefined ? 1 : _ref15$formatter,
      queryUrl = _ref15.queryUrl;

  var provider, response;
  return regeneratorRuntime.wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          provider = this.getProvider('data');
          _context8.next = 3;
          return provider.getFilterData({
            queryUrl: queryUrl,
            field: field,
            raw: raw,
            suggest: suggest,
            formatter: formatter,
            unique: unique
          });

        case 3:
          response = _context8.sent;
          return _context8.abrupt('return', response);

        case 5:
        case 'end':
          return _context8.stop();
      }
    }
  }, _callee8, this);
}));

// search method
proto.search = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // check option feature_count
  options.feature_count = options.feature_count || 10;
  options = _extends({}, options, this.config.searchParams, params);
  var d = $.Deferred();
  var provider = this.getProvider('search');
  if (provider) provider.query(options).done(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });else d.reject(t('sdk.search.layer_not_searchable'));
  return d.promise();
};

//Info from layer (only for querable layers)
proto.query = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var filter = options.filter;

  var provider = this.getProvider(filter ? 'filter' : 'query');
  if (provider) provider.query(options).done(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });else d.reject(t('sdk.search.layer_not_querable'));
  return d.promise();
};

// generel way to get an attribute
proto.get = function (property) {
  return this.config[property] ? this.config[property] : this.state[property];
};

proto.getFields = function () {
  return this.config.fields;
};

proto.getEditingFields = function () {
  return this.config.editing.fields;
};

proto.getTableFields = function () {
  return this.config.fields.filter(function (field) {
    return field.show;
  });
};

proto.getTableHeaders = function () {
  return this.getTableFields().filter(function (field) {
    return geometryFields.indexOf(field.name) === -1;
  });
};

proto.getProject = function () {
  return this.config.project;
};

proto.getConfig = function () {
  return this.config;
};

proto.getEditorFormStructure = function () {
  var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref16$all = _ref16.all,
      all = _ref16$all === undefined ? false : _ref16$all;

  return this.config.editor_form_structure && !all ? this.config.editor_form_structure.filter(function (structure) {
    return !structure.field_name;
  }) : this.config.editor_form_structure;
};

proto.getFieldsOutOfFormStructure = function () {
  return this.config.editor_form_structure ? this.config.editor_form_structure.filter(function (structure) {
    return structure.field_name;
  }) : [];
};

proto.hasFormStructure = function () {
  return !!this.config.editor_form_structure;
};

//get custom style for future implementation
proto.getCustomStyle = function () {
  return this.config.customstyle;
};

proto.getState = function () {
  return this.state;
};

proto.getSource = function () {
  return this.state.source;
};

proto.getSourceType = function () {
  return this.state.source ? this.state.source.type : null;
};

proto.isDownloadable = function () {
  return this.isShpDownlodable() || this.isXlsDownlodable() || this.isGpxDownlodable() || this.isGpkgDownlodable() || this.isCsvDownlodable();
};

proto.isShpDownlodable = function () {
  return !this.isBaseLayer() && this.config.download;
};

proto.isXlsDownlodable = function () {
  return !this.isBaseLayer() && this.config.download_xls;
};

proto.isGpxDownlodable = function () {
  return !this.isBaseLayer() && this.config.download_gpx;
};

proto.isGpkgDownlodable = function () {
  return !this.isBaseLayer() && this.config.download_gpkg;
};

proto.isCsvDownlodable = function () {
  return !this.isBaseLayer() && this.config.download_csv;
};

proto.getEditingLayer = function () {
  return this._editingLayer;
};

proto.setEditingLayer = function (editingLayer) {
  this._editingLayer = editingLayer;
};

proto.isHidden = function () {
  return this.state.hidden;
};

proto.setHidden = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.state.hidden = bool;
};

proto.isModified = function () {
  return this.state.modified;
};

proto.getId = function () {
  return this.config.id;
};

proto.getMetadata = function () {
  return this.state.metadata;
};

proto.getTitle = function () {
  return this.config.title;
};

proto.getName = function () {
  return this.config.name;
};

proto.getOrigName = function () {
  return this.config.origname;
};

proto.getServerType = function () {
  return this.config.servertype && this.config.servertype !== '' ? this.config.servertype : ServerTypes.QGIS;
};

proto.getType = function () {
  return this.type;
};

proto.isType = function (type) {
  return this.getType() === type;
};

proto.setType = function (type) {
  this.type = type;
};

proto.isSelected = function () {
  return this.state.selected;
};

proto.setSelected = function (bool) {
  this.state.selected = bool;
};

proto.setSelection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return regeneratorRuntime.wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          this.state.selection.active = bool;

          if (bool) {
            _context9.next = 8;
            break;
          }

          _context9.t0 = this.state.filter.active;

          if (!_context9.t0) {
            _context9.next = 6;
            break;
          }

          _context9.next = 6;
          return this.deleteFilterToken();

        case 6:
          this.state.filter.active = bool;
          this.emit('unselectionall', this.getId());

        case 8:
        case 'end':
          return _context9.stop();
      }
    }
  }, _callee9, this);
}));

proto.isSelectionActive = function () {
  return this.state.selection.active;
};

proto.getSelection = function () {
  return this.state.selection;
};

proto.getFilter = function () {
  return this.state.filter;
};

proto.setDisabled = function (bool) {
  this.state.disabled = bool;
  this.isVisible();
};

proto.isDisabled = function () {
  return this.state.disabled;
};

proto.isVisible = function () {
  this.state.visible = this.isGeoLayer() ? !this.state.groupdisabled && this.state.checked && !this.isDisabled() : this.state.visible;
  return this.state.visible;
};

proto.setVisible = function (bool) {
  this.state.visible = bool;
};

// set a parametre map to check if request from map point of view or just a capabilities info layer
proto.isQueryable = function () {
  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { onMap: false },
      onMap = _ref18.onMap;

  var queryEnabled = false;
  var queryableForCababilities = !!(this.config.capabilities && this.config.capabilities & Layer.CAPABILITIES.QUERYABLE);
  if (!onMap) return queryableForCababilities;
  // if querable check if is visible or disabled
  if (queryableForCababilities) {
    queryEnabled = this.isVisible() && !this.isDisabled();
    if (this.config.infowhennotvisible !== undefined && this.config.infowhennotvisible === true) queryEnabled = true;
  }
  return queryEnabled;
};

proto.getOws = function () {
  return this.config.ows;
};

proto.getTocHighlightable = function () {
  return this.state.tochighlightable;
};

proto.setTocHighlightable = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.tochighlightable = bool;
};

/*
 condition: plain object with configuration layer attribute and value
* */
proto.isFilterable = function () {
  var _this5 = this;

  var conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var isFiltrable = !!(this.config.capabilities && this.config.capabilities & Layer.CAPABILITIES.FILTERABLE);
  if (isFiltrable && conditions) {
    var conditionalFiltrable = Object.keys(conditions).reduce(function (bool, attribute) {
      var layer_config_value = _this5.get(attribute);
      var condition_attribute_values = conditions[attribute];
      return bool && Array.isArray(layer_config_value) ? layer_config_value.indexOf(condition_attribute_values) !== -1 : condition_attribute_values === layer_config_value;
    }, true);
    isFiltrable = isFiltrable && conditionalFiltrable;
  }
  return isFiltrable;
};

proto.isEditable = function () {
  return !!(this.config.capabilities && this.config.capabilities & Layer.CAPABILITIES.EDITABLE);
};

proto.isBaseLayer = function () {
  return this.config.baselayer;
};

// get url by type ( data, shp, csv, xls,  editing..etc..)
proto.getUrl = function (type) {
  return this.config.urls[type];
};

// return urls
proto.getUrls = function () {
  return this.config.urls;
};

proto.setEditingUrl = function (url) {
  this.config.urls.editing = url || this.config.urls.editing;
};

proto.getQueryUrl = function () {
  return this.config.urls.query;
};

proto.setQueryUrl = function (queryUrl) {
  this.config.urls.query = queryUrl;
};

proto.getQueryLayerName = function () {
  return this.config.infolayer && this.config.infolayer !== '' ? this.config.infolayer : this.getName();
};

proto.getQueryLayerOrigName = function () {
  return this.state.infolayer && this.config.infolayer !== '' ? this.config.infolayer : this.config.origname;
};

proto.getInfoFormat = function (ogcService) {
  return this.config.infoformat && this.config.infoformat !== '' && ogcService !== 'wfs' ? this.config.infoformat : 'application/vnd.ogc.gml';
  //return (this.config.infoformat && this.config.infoformat !== '' && ogcService !== 'wfs') ?  this.config.infoformat : 'application/json';
};

proto.getInfoUrl = function () {
  return this.config.infourl;
};

proto.setInfoFormat = function (infoFormat) {
  this.state.infoformat = infoFormat;
};

proto.getAttributes = function () {
  return this.config.fields;
};

proto.changeAttribute = function (attribute, type, options) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = this.config.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      if (field.name === attribute) {
        field.type = type;
        field.options = options;
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

proto.getAttributeLabel = function (name) {
  var field = this.getAttributes().find(function (field) {
    return field.name === name;
  });
  return field && field.label;
};

proto.getProvider = function (type) {
  return this.providers[type];
};

proto.getProviders = function () {
  return this.providers;
};

proto.getLayersStore = function () {
  return this._layersstore;
};

proto.setLayersStore = function (layerstore) {
  this._layersstore = layerstore;
};

proto.canShowTable = function () {
  if (!this.config.not_show_attributes_table) {
    if (this.getServerType() === Layer.ServerTypes.QGIS) {
      if ([Layer.SourceTypes.POSTGIS, Layer.SourceTypes.ORACLE, Layer.SourceTypes.WFS, Layer.SourceTypes.OGR, Layer.SourceTypes.MSSQL, Layer.SourceTypes.SPATIALITE].indexOf(this.config.source.type) > -1 && this.isQueryable()) {
        return true;
      }
    } else if (this.getServerType() === Layer.ServerTypes.G3WSUITE) {
      if (this.get('source').type === "geojson") return true;
    } else if (this.isFilterable()) return true;
    return false;
  } else return false;
};

//function called in case of change project to remove all sored information
proto.clear = function () {};

/// LAYER PROPERTIES
// Layer Types
Layer.LayerTypes = {
  TABLE: "table",
  IMAGE: "image",
  VECTOR: "vector"
};

// Server Types
Layer.ServerTypes = {
  OGC: "OGC",
  QGIS: "QGIS",
  Mapserver: "Mapserver",
  Geoserver: "Geoserver",
  ARCGISMAPSERVER: "ARCGISMAPSERVER",
  OSM: "OSM",
  BING: "Bing",
  LOCAL: "Local",
  TMS: "TMS",
  WMS: "WMS",
  WMTS: "WMTS",
  G3WSUITE: "G3WSUITE"
  /*
  ADD ALSO TO PROVIDER FACTORY
  */
};

// Source Types
Layer.SourceTypes = {
  VIRTUAL: 'virtual',
  POSTGIS: 'postgres',
  SPATIALITE: 'spatialite',
  ORACLE: 'oracle',
  MSSQL: 'mssql',
  CSV: 'delimitedtext',
  OGR: 'ogr',
  GDAL: 'gdal',
  WMS: 'wms',
  WFS: 'wfs',
  VECTORTILE: "vector-tile",
  ARCGISMAPSERVER: 'arcgismapserver',
  GEOJSON: "geojson"
  /*
  ADD TO PROVIDER FACTORY
  */
};

// Layer Capabilities
Layer.CAPABILITIES = {
  QUERYABLE: 1,
  FILTERABLE: 2,
  EDITABLE: 4
};

//Editing types
Layer.EDITOPS = {
  INSERT: 1,
  UPDATE: 2,
  DELETE: 4
};

//selection state
Layer.SELECTION_STATE = {
  ALL: '__ALL__',
  EXCLUDE: '__EXCLUDE__'
};

module.exports = Layer;

},{"core/applicationservice":401,"core/applicationstate":402,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/layers/filter/filter":438,"core/layers/providers/providersfactory":459,"core/project/projectsregistry":478,"core/relations/relations":480,"core/utils/geo":484,"core/utils/utils":485}],444:[function(require,module,exports){
var Layer = require('./layer');
var TableLayer = require('./tablelayer');
var VectorLayer = require('./vectorlayer');
var ImageLayer = require('./imagelayer');
var BaseLayers = require('./baselayers/baselayers');
var GeojsonLayer = require('./geojson');

// Class to build layer based on configuration
function LayerFactory() {
  this.build = function (config, options) {
    // return the layer instance
    var layerClass = this.get(config);
    return layerClass ? new layerClass(config, options) : null;
  };

  this.get = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var LayerClass = void 0;
    var serverType = config.servertype;
    switch (serverType) {
      case Layer.ServerTypes.QGIS:
        if (config.source) {
          if (config.geometrytype) {
            if ([Layer.SourceTypes.VIRTUAL, Layer.SourceTypes.POSTGIS, Layer.SourceTypes.MSSQL, Layer.SourceTypes.SPATIALITE, Layer.SourceTypes.WFS, Layer.SourceTypes.CSV, Layer.SourceTypes.ORACLE, Layer.SourceTypes.OGR].find(function (sourcetype) {
              return sourcetype === config.source.type;
            })) {
              if (config.geometrytype && config.geometrytype === 'NoGeometry') LayerClass = TableLayer;else LayerClass = ImageLayer;
            }
          } else if ([Layer.SourceTypes.WMS, Layer.SourceTypes.GDAL].find(function (sourcetype) {
            return sourcetype === config.source.type;
          })) LayerClass = ImageLayer;
        }
        break;
      case Layer.ServerTypes.OGC:
        if (config.source) {
          var type = config.source.type;
          switch (type) {
            case Layer.SourceTypes.WMS:
              LayerClass = ImageLayer;
              break;
            case Layer.SourceTypes.WFS:
              LayerClass = VectorLayer;
          }
        }
        break;
      case Layer.ServerTypes.LOCAL:
        LayerClass = VectorLayer;
        break;
      case Layer.ServerTypes.OSM:
      case Layer.ServerTypes.BING:
      case Layer.ServerTypes.TMS:
      case Layer.ServerTypes.WMS:
      case Layer.ServerTypes.WMTS:
      case Layer.ServerTypes.ARCGISMAPSERVER:
        LayerClass = BaseLayers[serverType];
        break;
      case Layer.ServerTypes.G3WSUITE:
        LayerClass = VectorLayer;
        if (config.source) {
          switch (config.source.type) {
            case 'geojson':
              LayerClass = GeojsonLayer;
              break;
          }
        }
        break;
    }
    return LayerClass;
  };
}

module.exports = new LayerFactory();

},{"./baselayers/baselayers":428,"./geojson":440,"./imagelayer":442,"./layer":443,"./tablelayer":464,"./vectorlayer":465}],445:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    uniqueId = _require.uniqueId;

var G3WObject = require('core/g3wobject');

// Interface for Layers
function LayersStore() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = {
    id: config.id || Date.now(),
    projection: config.projection,
    extent: config.extent,
    initextent: config.initextent,
    wmsUrl: config.wmsUrl,
    //set catalogable property
    catalog: _.isBoolean(config.catalog) ? config.catalog : true
  };

  this.state = {
    //useful to build layerstree
    layerstree: [],
    relations: null // useful to build tree of relations
  };
  this._isQueryable = _.isBoolean(config.queryable) ? config.queryable : true;
  this._layers = this.config.layers || {};
  this.setters = {
    setLayerSelection: function setLayerSelection(_ref) {
      var layerId = _ref.layerId,
          selection = _ref.selection;

      var layer = this.getLayerById(layerId);
    },

    setLayersVisible: function setLayersVisible(layersIds, visible) {
      var _this = this;

      var checked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var layers = [];
      layersIds.forEach(function (layerId) {
        var layer = _this.getLayerById(layerId);
        layer.setVisible(visible);
        checked && layer.setChecked(visible);
        layers.push(layer);
      });
      return layers;
    },
    setLayerSelected: function setLayerSelected(layerId, selected) {
      var layers = this.getLayers();
      layers.forEach(function (layer) {
        return layer.state.selected = layerId === layer.getId() && selected || false;
      });
    },
    addLayers: function addLayers(layers) {
      var _this2 = this;

      layers.forEach(function (layer) {
        return _this2.addLayer(layer);
      });
    },
    addLayer: function addLayer(layer) {
      this._addLayer(layer);
    },
    removeLayer: function removeLayer(layerId) {
      this._removeLayer(layerId);
    }
  };

  base(this);
}

inherit(LayersStore, G3WObject);

proto = LayersStore.prototype;

proto.isQueryable = function () {
  return this._isQueryable;
};

proto.setQueryable = function (bool) {
  this._isQueryable = !!bool;
};

proto.showOnCatalog = function () {
  return this.config.catalog;
};

proto.setOptions = function (config) {
  this.config = config;
};

proto.getId = function () {
  return this.config.id;
};

proto._addLayer = function (layer) {
  this._layers[layer.getId()] = layer;
};

proto._removeLayer = function (layer) {
  var layerId = layer.getId();
  delete this._layers[layerId];
};

proto.removeLayers = function () {
  var _this3 = this;

  Object.entries(this._layers).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        layerId = _ref3[0],
        layer = _ref3[1];

    _this3.removeLayer(layer);
  });
};

proto.getLayersDict = function () {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!filter) {
    return this._layers;
  }
  var filterPrintable = filter.PRINTABLE;
  var filterActive = filter.ACTIVE;
  var filterQueryable = filter.QUERYABLE;
  var filterFilterable = filter.FILTERABLE;
  var filterEditable = filter.EDITABLE;
  var filterVisible = filter.VISIBLE;
  var filterSelected = filter.SELECTED;
  var filterCached = filter.CACHED;
  var filterSelectedOrAll = filter.SELECTEDORALL;
  var filterAllNotSelected = filter.ALLNOTSELECTED;
  var filterServerType = filter.SERVERTYPE;
  var filterBaseLayer = filter.BASELAYER;
  var filterGeoLayer = filter.GEOLAYER;
  var filterVectorLayer = filter.VECTORLAYER;
  var filterHidden = filter.HIDDEN;
  var filterDisabled = filter.DISABLED;
  var filterIds = filter.IDS;
  if (_.isUndefined(filterQueryable) && _.isUndefined(filterFilterable) && _.isUndefined(filterEditable) && _.isUndefined(filterVisible) && _.isUndefined(filterActive) && _.isUndefined(filterSelected) && _.isUndefined(filterCached) && _.isUndefined(filterSelectedOrAll) && _.isUndefined(filterServerType) && _.isUndefined(filterGeoLayer) && _.isUndefined(filterHidden) && _.isUndefined(filterDisabled) && _.isUndefined(filterBaseLayer) && _.isUndefined(filterVectorLayer) && _.isUndefined(filterPrintable) && _.isUndefined(filterIds)) {
    return this._layers;
  }
  var layers = [];

  for (var key in this._layers) {
    layers.push(this._layers[key]);
  }

  // return only selected
  if (filterSelectedOrAll) {
    var _layers = layers;
    layers = layers.filter(function (layer) {
      return layer.isSelected();
    });
    layers = layers.length ? layers : _layers;
  }

  if (filterIds) {
    var ids = Array.isArray(filterIds) ? filterIds : [filterIds];
    layers = layers.filter(function (layer) {
      return ids.indexOf(layer.getId()) !== -1;
    });
  }

  if (typeof filterActive === 'boolean') layers = layers.filter(function (layer) {
    return filterActive === !layer.isDisabled();
  });

  if (typeof filterQueryable === 'boolean') layers = layers.filter(function (layer) {
    return filterQueryable === layer.isQueryable();
  });

  if (typeof filterFilterable === 'boolean') layers = layers.filter(function (layer) {
    return filterFilterable === layer.isFilterable(options.filtrable || null);
  });

  if (typeof filterEditable === 'boolean') layers = layers.filter(function (layer) {
    return filterEditable === layer.isEditable();
  });

  if (typeof filterVisible === 'boolean') layers = layers.filter(function (layer) {
    return filterVisible === layer.isVisible();
  });

  if (typeof filterCached === 'boolean') layers = layers.filter(function (layer) {
    return filterCached === layer.isCached();
  });

  if (typeof filterSelected === 'boolean') layers = layers.filter(function (layer) {
    return filterSelected === layer.isSelected();
  });

  if (typeof filterBaseLayer === 'boolean') layers = layers.filter(function (layer) {
    return filterBaseLayer === layer.isBaseLayer();
  });

  if (typeof filterGeoLayer === 'boolean') layers = layers.filter(function (layer) {
    return filterGeoLayer === layer.state.geolayer;
  });

  if (typeof filterVectorLayer === 'boolean') layers = layers.filter(function (layer) {
    return filterVectorLayer === layer.isType('vector');
  });

  if (typeof filterHidden === 'boolean') layers = layers.filter(function (layer) {
    return filterHidden == layer.isHidden();
  });

  if (typeof filterDisabled === 'boolean') layers = layers.filter(function (layer) {
    return filterDisabled === layer.isDisabled();
  });

  if (typeof filterServerType === 'string' && filterServerType !== '') layers = layers.filter(function (layer) {
    return filterServerType === layer.getServerType();
  });

  if (filterPrintable) layers = layers.filter(function (layer) {
    return layer.state.geolayer && layer.isPrintable({ scale: filterPrintable.scale });
  });

  // return only not selected
  if (filterAllNotSelected) layers = layers.filter(function (layer) {
    return !layer.isSelected();
  });
  return layers;
};

// return layers array
proto.getLayers = function () {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return Object.values(this.getLayersDict(filter, options));
};

proto.getBaseLayers = function () {
  return this.getLayersDict({
    BASELAYER: true
  });
};

proto.getLayerById = function (layerId) {
  return this.getLayersDict()[layerId];
};

proto.getLayerByName = function (name) {
  return this._layers.find(function (layer) {
    return layer.getName() === name;
  });
};

proto.getLayerAttributes = function (layerId) {
  return this.getLayerById(layerId).getAttributes();
};

proto.getLayerAttributeLabel = function (layerId, name) {
  return this.getLayerById(layerId).getAttributeLabel(name);
};

proto.getGeoLayers = function () {
  return this.getLayers({
    GEOLAYER: true
  });
};

proto._getAllSiblingsChildrenLayersId = function (layerstree) {
  var nodeIds = [];
  var traverse = function traverse(layerstree) {
    layerstree.nodes.forEach(function (node) {
      if (node.id) nodeIds.push(node.id);else traverse(node);
    });
  };
  traverse(layerstree);
  return nodeIds;
};

proto._getAllParentLayersId = function (layerstree, node) {
  var nodeIds = [];
  var traverse = function traverse(layerstree) {
    layerstree.nodes.forEach(function (node) {
      if (node.id) nodeIds.push(node.id);
      //else traverse(node);
    });
  };

  traverse({
    nodes: layerstree.nodes.filter(function (_node) {
      return _node !== node;
    })
  });

  return nodeIds;
};

/**
 * Method to check mutually of group  belong to layerId
 * @param layerId
 * @private
 */
proto._mutuallyExclude = function (layerId) {
  var _this4 = this;

  var parentLayersTree = this.state.layerstree;
  var traverse = function traverse(obj) {
    Object.entries(obj).forEach(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
          key = _ref5[0],
          layer = _ref5[1];

      if (layer.nodes !== null && layer.nodes !== undefined) {
        var found = layer.nodes.reduce(function (previous, node) {
          return node.id === layerId || previous;
        }, false);
        // if found mean that a found a group that contain layer with layerId
        if (found) {
          var checked_node = void 0;
          var nodeIds = [];
          layer.nodes.forEach(function (node) {
            if (node.id) {
              if (node.id !== layerId && node.geolayer) nodeIds.push(node.id);else checked_node = node;
            } //else nodeIds = nodeIds.concat(this._getAllSiblingsChildrenLayersId(node));
          });
          //set parent grouplayerstree
          parentLayersTree = layer;
          if (parentLayersTree.mutually_exclusive) {
            nodeIds = nodeIds.concat(_this4._getAllParentLayersId(parentLayersTree));
          }
          _this4.setLayersVisible(nodeIds, false);
        }
        traverse(layer.nodes);
      }
    });
  };
  traverse(parentLayersTree);
};

/**
 * Toggle layer called from catalog event
 * @param layerId
 * @param visible
 * @param mutually_exclusive
 * @returns {*}
 */
proto.toggleLayer = function (layerId, visible, mutually_exclusive) {
  var layer = this.getLayerById(layerId);
  var checked = layer.isChecked();
  visible = visible !== null ? checked : !checked;
  mutually_exclusive && this._mutuallyExclude(layerId);
  if (layer.isDisabled()) layer.setVisible(false);else this.setLayersVisible([layerId], visible);
  layer.setChecked(!checked);
  return layer;
};

proto.toggleLayers = function (layersIds, visible) {
  var checked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  return this.setLayersVisible(layersIds, visible, checked);
};

proto.selectLayer = function (layerId) {
  this.setLayerSelected(layerId, true);
};

proto.unselectLayer = function (layerId) {
  this.setLayerSelected(layerId, false);
};

proto.getProjection = function () {
  return this.config.projection;
};

proto.getExtent = function () {
  return this.config.extent;
};

proto.getInitExtent = function () {
  return this.config.initextent;
};

proto.getWmsUrl = function () {
  return this.config.wmsUrl;
};

// set layersstree of layers inside the laysstore
proto.setLayersTree = function (layerstree, name) {
  var _this5 = this;

  var traverse = function traverse(obj) {
    var isChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var currentGroupDisabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    Object.entries(obj).forEach(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
          key = _ref7[0],
          layer = _ref7[1];

      if (layer.id !== undefined) {
        obj[key] = _this5.getLayerById(layer.id).getState();
        obj[key].groupdisabled = currentGroupDisabled;
      }
      if (layer.nodes) {
        var _currentGroupDisabled = !isChild ? !layer.checked : currentGroupDisabled || !layer.checked;
        traverse(layer.nodes, true, _currentGroupDisabled);
      }
    });
  };
  if (layerstree.length) {
    traverse(layerstree);
    this.state.layerstree.splice(0, 0, {
      title: name || this.config.id,
      expanded: true,
      disabled: false,
      checked: true,
      nodes: layerstree
    });
  }
};

// used by from plugin (or external code) to build layerstree
// layer groupNem is a ProjectName
proto.createLayersTree = function (groupName) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var full = options.full || false;
  var _layerstree = options.layerstree || null;
  var tocLayersId = this.getLayers({ BASELAYER: false }).map(function (layer) {
    return layer.getId();
  });
  var layerstree = [];
  if (_layerstree) {
    if (full === true) return this.state.layerstree;else {
      var traverse = function traverse(obj, newobj) {
        obj.forEach(function (layer) {
          var lightlayer = {};
          if (layer.id !== null && layer.id !== undefined) {
            if (tocLayersId.find(function (toclayerId) {
              return toclayerId === layer.id;
            })) lightlayer.id = layer.id;else lightlayer = null;
          }
          if (layer.nodes !== null && layer.nodes !== undefined) {
            lightlayer.title = layer.name;
            lightlayer.expanded = layer.expanded;
            lightlayer.groupId = uniqueId();
            lightlayer.nodes = [];
            lightlayer.checked = layer.checked;
            lightlayer.mutually_exclusive = layer["mutually-exclusive"];
            traverse(layer.nodes, lightlayer.nodes);
          }
          lightlayer && newobj.push(lightlayer);
        });
      };
      traverse(_layerstree, layerstree);
    }
  } else {
    var geoLayers = this.getGeoLayers();
    geoLayers.forEach(function (layer) {
      layerstree.push({
        id: layer.getId(),
        name: layer.getName(),
        title: layer.getTitle(),
        visible: layer.isVisible() || false
      });
    });
  }
  this.setLayersTree(layerstree, groupName);
};

proto.removeLayersTree = function () {
  this.state.layerstree.splice(0, this.state.layerstree.length);
};

proto.getLayersTree = function () {
  return this.state.layerstree;
};

module.exports = LayersStore;

},{"core/g3wobject":415,"core/utils/utils":485}],446:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

// Registy Layers
function LayersStoresRegistry() {
  this.stores = {};
  this.storesArray = [];
  // to react some application components that are binding to Layerstore
  this.setters = {
    addLayersStore: function addLayersStore(layersStore, idx) {
      this._addLayersStore(layersStore, idx);
    },
    removeLayersStore: function removeLayersStore(layerStore) {
      this._removeLayersStore(layerStore);
    },
    removeLayersStores: function removeLayersStores() {
      this._removeLayersStores();
    }
  };

  base(this);
}

inherit(LayersStoresRegistry, G3WObject);

var proto = LayersStoresRegistry.prototype;

proto.getLayerById = function (layerId) {
  var layer = void 0;
  for (var storeId in this.stores) {
    var layerStore = this.stores[storeId];
    layer = layerStore.getLayerById(layerId);
    if (layer) break;
  }
  return layer;
};

proto.getLayers = function (filter) {
  var layers = [];
  Object.entries(this.stores).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        storeId = _ref2[0],
        layersStore = _ref2[1];

    layers = layers.concat(layersStore.getLayers(filter));
  });
  return layers;
};

proto.getQuerableLayersStores = function () {
  return this.getLayersStores().filter(function (layersStore) {
    return layersStore.isQueryable();
  });
};

proto.getLayersStore = function (id) {
  return this.stores[id];
};

proto.getLayersStores = function () {
  var _this = this;

  var stores = [];
  this.storesArray.forEach(function (storeId) {
    stores.push(_this.stores[storeId]);
  });
  return stores;
};

proto._addLayersStore = function (layersStore, idx) {
  var storeId = layersStore.getId();
  this.stores[storeId] = layersStore;
  if (!_.isNil(idx)) this.storesArray.splice(idx, 0, storeId);else this.storesArray.push(storeId);
};

proto._removeLayersStore = function (layerStore) {
  if (layerStore) {
    var storeId = layerStore.getId();
    this.storesArray = this.storesArray.filter(function (_storeId) {
      return _storeId != storeId;
    });
    delete this.stores[storeId];
  }
};

proto._removeLayersStores = function () {
  this.storesArray = [];
  this.stores = {};
};

module.exports = LayersStoresRegistry;

},{"core/g3wobject":415,"core/utils/utils":485}],447:[function(require,module,exports){
function ARGISMAPSERVERLegend(_ref) {
  var layer = _ref.layer,
      params = _ref.params;
  var _layer$getConfig$sour = layer.getConfig().source,
      url = _layer$getConfig$sour.url,
      layername = _layer$getConfig$sour.layer;

  var serviceUrl = url.replace('/rest/', '/');
  return serviceUrl + '/WMSServer?request=GetLegendGraphic&version=1.3.0&format=image/png&LAYER=' + layername;
};

module.exports = ARGISMAPSERVERLegend;

},{}],448:[function(require,module,exports){
var TYPES = {
  'wms': require('./wmslegend'),
  'argismapserver': require('./arcgismapserverlegend')
};

var Legendservice = {
  get: function get() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layer = _ref.layer,
        params = _ref.params;

    var type = layer.isArcgisMapserver() ? 'argismapserver' : 'wms';
    return TYPES[type]({
      layer: layer,
      params: params
    });
  }
};

module.exports = Legendservice;

},{"./arcgismapserverlegend":447,"./wmslegend":449}],449:[function(require,module,exports){
function WMSLegend(_ref) {
  var layer = _ref.layer,
      params = _ref.params;
  var width = params.width,
      height = params.height,
      _params$color = params.color,
      color = _params$color === undefined ? "white" : _params$color,
      _params$fontsize = params.fontsize,
      fontsize = _params$fontsize === undefined ? 10 : _params$fontsize,
      _params$transparent = params.transparent,
      transparent = _params$transparent === undefined ? true : _params$transparent,
      boxspace = params.boxspace,
      layerspace = params.layerspace,
      _params$layertitle = params.layertitle,
      layertitle = _params$layertitle === undefined ? true : _params$layertitle,
      layertitlespace = params.layertitlespace,
      symbolspace = params.symbolspace,
      iconlabelspace = params.iconlabelspace,
      symbolwidth = params.symbolwidth,
      symbolheight = params.symbolheight,
      itemfontfamily = params.itemfontfamily,
      layerfontfamily = params.layerfontfamily,
      layerfontbold = params.layerfontbold,
      itemfontbold = params.itemfontbold,
      layerfontitalic = params.layerfontitalic,
      itemfontitalic = params.itemfontitalic,
      rulelabel = params.rulelabel,
      crs = params.crs,
      bbox = params.bbox,
      _params$sld_version = params.sld_version,
      sld_version = _params$sld_version === undefined ? '1.1.0' : _params$sld_version;

  var LAYER = layer.getWMSLayerName({
    type: 'legend'
  });
  var url = layer.getWmsUrl({ type: 'legend' });
  var sep = url.indexOf('?') > -1 ? '&' : '?';
  return ['' + url + sep + 'SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&SLD_VERSION=' + sld_version, '' + (width ? '&WIDTH=' + width : ''), '' + (height ? '&HEIGHT=' + height : ''), '&FORMAT=image/png', '&TRANSPARENT=' + transparent, '&ITEMFONTCOLOR=' + color, '&LAYERFONTCOLOR=' + color, '&LAYERTITLE=' + layertitle, '&ITEMFONTSIZE=' + fontsize, '' + (crs ? '&CRS=' + crs : ''), '' + (bbox ? '&BBOX=' + bbox.join(',') : ''), '' + (boxspace ? '&BOXSPACE=' + boxspace : ''), '' + (layerspace ? '&LAYERSPACE=' + layerspace : ''), '' + (layertitlespace ? '&LAYERTITLESPACE=' + layertitlespace : ''), '' + (symbolspace ? '&SYMBOLSPACE=' + symbolspace : ''), '' + (iconlabelspace ? '&ICONLABELSPACE=' + iconlabelspace : ''), '' + (symbolwidth ? '&SYMBOLWIDTH=' + symbolwidth : ''), '' + (symbolheight ? '&SYMBOLHEIGHT=' + symbolheight : ''), '' + (layerfontfamily ? '&LAYERFONTFAMILY=' + layerfontfamily : ''), '' + (itemfontfamily ? '&ITEMFONTFAMILY=' + itemfontfamily : ''), '' + (layerfontbold ? '&LAYERFONTBOLD=' + layerfontbold : ''), '' + (itemfontbold ? '&ITEMFONTBOLD=' + itemfontbold : ''), '' + (layerfontitalic ? '&LAYERFONTITALIC=' + layerfontitalic : ''), '' + (itemfontitalic ? '&ITEMFONTITALIC=' + itemfontitalic : ''), '' + (rulelabel ? '&RULELABEL=' + rulelabel : ''), '&LAYER=' + LAYER].join('');
}

module.exports = WMSLegend;

},{}],450:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var WMSLAYER = require('./wmslayer');
var RasterLayers = require('g3w-ol/src/layers/rasters');

function ARCGISMAPSERVERLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  base(this, options, extraParams);
}

inherit(ARCGISMAPSERVERLayer, WMSLAYER);

var proto = ARCGISMAPSERVERLayer.prototype;

proto._makeOlLayer = function () {
  var _this = this;

  var config = {
    url: this.config.url,
    id: this.config.id,
    projection: this.config.projection,
    format: this.config.format
  };
  var olLayer = new RasterLayers.TiledArgisMapServer(config);
  olLayer.getSource().on('imageloadstart', function () {
    _this.emit("loadstart");
  });
  olLayer.getSource().on('imageloadend', function () {
    _this.emit("loadend");
  });

  olLayer.getSource().on('imageloaderror', function () {
    _this.emit("loaderror");
  });
  return olLayer;
};

module.exports = ARCGISMAPSERVERLayer;

},{"./wmslayer":454,"core/utils/utils":485,"g3w-ol/src/layers/rasters":529}],451:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var VectorLayer = require('./vectorlayer');

function GeojsonLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var provider = options.provider;
  this.setProvider(provider);
  base(this, options);
  this.getFeatures({
    url: options.url,
    mapProjection: this.mapProjection
  });
}

inherit(GeojsonLayer, VectorLayer);

module.exports = GeojsonLayer;

},{"./vectorlayer":453,"core/utils//utils":485,"core/utils/utils":485}],452:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function MapLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = config;
  this.id = config.id;
  this.iframe_internal = config.iframe_internal || false;
  this.extent = config.extent;
  this.projection = config.projection;
  this.layer = null;
  this.layers = []; // store all enabled layers
  this.allLayers = []; // store all layers
  base(this);
}

inherit(MapLayer, G3WObject);

var proto = MapLayer.prototype;

proto.getId = function () {
  return this.id;
};

proto.getOLLayer = function () {
  console.log('every sub classes has to be override');
};

proto.update = function () {
  var mapState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this._updateLayers(mapState, extraParams);
};

proto.checkLayerDisabled = function (layer, resolution, mapUnits) {
  layer.setDisabled(resolution, mapUnits);
  return layer.isDisabled();
};

// check which layers has to be disabled
proto.checkLayersDisabled = function (resolution, mapUnits) {
  var _this = this;

  this.allLayers.forEach(function (layer) {
    return _this.checkLayerDisabled(layer, resolution, mapUnits);
  });
};

proto.setupCustomMapParamsToLegendUrl = function () {
  //to owerwrite for each map layer subclass

  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
};

module.exports = MapLayer;

},{"core/g3wobject":415,"core/utils/utils":485}],453:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var inherit = require('core/utils/utils').inherit;

var _require = require('core/utils/geo'),
    createOlLayer = _require.createOlLayer,
    createLayerStyle = _require.createLayerStyle;

var GUI = require('gui/gui');

var G3WObject = require('core/g3wobject');

function VectorLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.mapService = GUI.getComponent('map').getService();
  this.geometrytype = options.geometrytype || null;
  this.type = options.type || null;
  this.crs = options.crs || null;
  this.id = options.id;
  this.name = options.name || "";
  this.style = options.style;
  this.color = options.color;
  this.geometryType = options.geometryType;
  this.mapProjection = this.mapService.getProjection().getCode();
  this.projection = options.projection || this.mapProjection;
  this.url = options.url;
  this.provider = options.provider;
  this._features = options.features || [];
  this._olLayer = options.olLayer || this.getOLLayer();
}

inherit(VectorLayer, G3WObject);

module.exports = VectorLayer;

var proto = VectorLayer.prototype;

proto.setProvider = function (provider) {
  this._provider = provider;
};

proto.getProvider = function () {
  return this._provider;
};

proto.resetSource = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var source = new ol.source.Vector({
    features: features
  });
  this.setSource(source);
};

proto._makeOlLayer = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      style = _ref.style;

  var _style = this._makeStyle(style);
  this._olLayer = new ol.layer.Vector({
    name: this.name,
    id: this.id,
    style: _style,
    source: new ol.source.Vector({})
  });
};

proto._makeStyle = function (styleConfig) {
  var style = void 0;
  var styles = {};
  if (styleConfig) {
    Object.entries(styleConfig).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          type = _ref3[0],
          config = _ref3[1];

      switch (type) {
        case 'point':
          if (config.icon) {
            styles.image = new ol.style.Icon({
              src: config.icon.url,
              imageSize: config.icon.width
            });
          }
          break;
        case 'line':
          styles.stroke = new ol.style.Stroke({
            color: config.color,
            width: config.width
          });
          break;
        case 'polygon':
          styles.fill = new ol.style.Fill({
            color: config.color
          });
          break;
      }
    });
    style = new ol.style.Style(styles);
  }
  return style;
};

proto.getFeatures = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  this.provider.getFeatures(options).then(function (features) {
    _this.addFeatures(features);
    d.resolve(features);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto.addFeatures = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.getSource().addFeatures(features);
};

proto.addFeature = function (feature) {
  feature && this.getSource().addFeature(feature);
};

proto.getOLLayer = function () {
  if (this._olLayer) return this._olLayer;else {
    var id = this.id;
    var geometryType = this.geometryType;
    var color = this.color;
    var style = this.style ? createLayerStyle(this.style) : null;
    this._olLayer = createOlLayer({
      id: id,
      geometryType: geometryType,
      color: color,
      style: style,
      features: this._features
    });
  }
  return this._olLayer;
};

proto.setOLLayer = function (olLayer) {
  this._olLayer = olLayer;
};

proto.getSource = function () {
  !this._olLayer && this.getOLLayer();
  return this._olLayer.getSource();
};

proto.setSource = function (source) {
  this._olLayer.setSource(source);
};

proto.setStyle = function (style) {
  this._olLayer.setStyle(style);
};

proto.getFeatureById = function (fid) {
  return fid ? this._olLayer.getSource().getFeatureById(fid) : null;
};

proto.isVisible = function () {
  return this._olLayer.getVisible();
};

proto.setVisible = function (bool) {
  this._olLayer.setVisible(bool);
};

proto.clear = function () {
  this.getSource().clear();
};

proto.addToMap = function (map) {
  map.addLayer(this._olLayer);
};

},{"core/g3wobject":415,"core/utils/geo":484,"core/utils/utils":485,"gui/gui":575}],454:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var MapLayer = require('./maplayer');
var RasterLayers = require('g3w-ol/src/layers/rasters');

function WMSLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

  this.LAYERTYPE = {
    LAYER: 'layer',
    MULTILAYER: 'multilayer'
  };
  this.extraParams = extraParams;
  this._method = method;
  base(this, options);
}

inherit(WMSLayer, MapLayer);

var proto = WMSLayer.prototype;

proto.getOLLayer = function (withLayers) {
  if (!this._olLayer) this._olLayer = this._makeOlLayer(withLayers);
  return this._olLayer;
};

proto.getSource = function () {
  return this.getOLLayer().getSource();
};

proto.getInfoFormat = function () {
  return 'application/vnd.ogc.gml';
};

proto.getGetFeatureInfoUrl = function (coordinate, resolution, epsg, params) {
  return this.getOLLayer().getSource().getGetFeatureInfoUrl(coordinate, resolution, epsg, params);
};

proto.getLayerConfigs = function () {
  return this.layers;
};

proto.addLayer = function (layer) {
  if (!this.allLayers.find(function (_layer) {
    return layer === _layer;
  })) {
    this.allLayers.push(layer);
  }
  if (!this.layers.find(function (_layer) {
    return layer === _layer;
  })) {
    this.layers.push(layer);
  }
};

proto.removeLayer = function (layer) {
  this.layers = this.layers.filter(function (_layer) {
    return layer !== _layer;
  });
};

proto.toggleLayer = function (layer) {
  this.layers.forEach(function (_layer) {
    if (_layer.id === layer.id) {
      _layer.visible = layer.visible;
    }
  });
  this._updateLayers();
};

proto.isVisible = function () {
  return this._getVisibleLayers().length > 0;
};

proto.getQueryUrl = function () {
  var layer = this.layers[0];
  if (layer.infourl && layer.infourl !== '') {
    return layer.infourl;
  }
  return this.config.url;
};

proto.getQueryableLayers = function () {
  return this.layers.filter(function (layer) {
    return layer.isQueryable();
  });
};

proto._getVisibleLayers = function () {
  return this.layers.filter(function (layer) {
    return layer.isVisible();
  });
};

proto._makeOlLayer = function (withLayers) {
  var _this = this;

  var wmsConfig = {
    url: this.config.url,
    id: this.config.id,
    projection: this.config.projection,
    iframe_internal: this.iframe_internal
  };
  if (withLayers) wmsConfig.layers = this.layers.map(function (layer) {
    return layer.getWMSLayerName();
  });
  var representativeLayer = this.layers[0];
  if (representativeLayer) wmsConfig.url = representativeLayer.getWmsUrl();
  var olLayer = new RasterLayers.WMSLayer(wmsConfig, this.extraParams, this._method);

  olLayer.getSource().on('imageloadstart', function () {
    _this.emit("loadstart");
  });
  olLayer.getSource().on('imageloadend', function () {
    _this.emit("loadend");
  });

  olLayer.getSource().on('imageloaderror', function () {
    _this.emit("loaderror");
  });
  return olLayer;
};

//update Layers
proto._updateLayers = function () {
  var mapState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  //check disabled layers
  this.checkLayersDisabled(mapState.resolution, mapState.mapUnits);
  var visibleLayers = this._getVisibleLayers(mapState) || [];
  if (visibleLayers.length > 0) {
    var STYLES = visibleLayers.map(function (layer) {
      return layer.getStyle();
    }).join(',');
    var prefix = visibleLayers[0].isArcgisMapserver() ? 'show:' : '';
    var params = {
      filtertoken: _applicationstate2.default.tokens.filtertoken,
      STYLES: STYLES,
      LAYERS: '' + prefix + visibleLayers.map(function (layer) {
        return layer.getWMSLayerName();
      }).join(',')
    };
    if (extraParams) params = _.assign(params, extraParams);
    this._olLayer.setVisible(true);
    this._olLayer.getSource().updateParams(params);
  } else this._olLayer.setVisible(false);
};

proto.setupCustomMapParamsToLegendUrl = function () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (this.layer) this.layer.setMapParamstoLegendUrl(params);else this.layers.forEach(function (layer) {
    layer.setMapParamstoLegendUrl(params);
  });
};

module.exports = WMSLayer;

},{"./maplayer":452,"core/applicationstate":402,"core/utils/utils":485,"g3w-ol/src/layers/rasters":529}],455:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var MapLayer = require('./maplayer');
var RasterLayers = require('g3w-ol/src/layers/rasters');

function XYZLayer(options) {
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";

  base(this, options);
  this._method = method;
}

inherit(XYZLayer, MapLayer);

var proto = XYZLayer.prototype;

proto.getOLLayer = function () {
  var olLayer = this._olLayer;
  if (!olLayer) {
    olLayer = this._olLayer = this._makeOlLayer();
  }
  return olLayer;
};

proto.getSource = function () {
  return this.getOLLayer().getSource();
};

proto.getLayerConfigs = function () {
  return this.layer;
};

proto.addLayer = function (layer) {
  this.layer = layer;
  this.allLayers.push(layer);
};

proto.toggleLayer = function () {
  this._updateLayers();
};

proto.update = function (mapState, extraParams) {
  this._updateLayer(mapState, extraParams);
};

proto.isVisible = function () {
  return layer.state.visible;
};

proto._makeOlLayer = function () {
  var _this = this;

  var projection = this.projection ? this.projection : this.layer.getProjection();
  var layerOptions = {
    url: this.layer.getCacheUrl() + "/{z}/{x}/{y}.png",
    maxZoom: 20,
    extent: this.config.extent,
    iframe_internal: this.iframe_internal
  };

  layerOptions.projection = projection;
  this._olLayer = new RasterLayers.XYZLayer(layerOptions, this._method);

  this._olLayer.getSource().on('imageloadstart', function () {
    _this.emit("loadstart");
  });
  this._olLayer.getSource().on('imageloadend', function () {
    _this.emit("loadend");
  });
  this._olLayer.getSource().on('imageloaderror', function () {
    _this.emit("loaderror");
  });
  return this._olLayer;
};

proto._updateLayer = function () {
  var mapState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.checkLayersDisabled(mapState.resolution, mapState.mapUnits);
  this._olLayer.setVisible(this.layer.isVisible());
};

module.exports = XYZLayer;

},{"./maplayer":452,"core/utils/utils":485,"g3w-ol/src/layers/rasters":529}],456:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Provider = require('core/layers/providers/provider');

function GEOJSONDataProvider() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._name = 'geojson';
  this.provider = options.provider;
}

inherit(GEOJSONDataProvider, Provider);

var proto = GEOJSONDataProvider.prototype;

proto.query = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  d.resolve([]);
  return d.promise();
};

proto.getFeatures = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var url = options.url || this.getLayer().get('source').url;
  var data = options.data;
  var projection = options.projection || "EPSG:4326";
  var mapProjection = options.mapProjection;
  var parseFeatures = function parseFeatures(data) {
    var parser = new ol.format.GeoJSON();
    return parser.readFeatures(data, {
      featureProjection: mapProjection,
      //defaultDataProjection: projection // ol v. 4.5
      dataProjection: projection
    });
  };
  if (data) {
    var features = parseFeatures(data);
    d.resolve(features);
  } else {
    $.get({ url: url }).then(function (response) {
      var features = parseFeatures(response.results);
      d.resolve(features);
    }).fail(function (err) {
      d.reject(err);
    });
  }
  return d.promise();
};

proto.getDataTable = function () {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      page = _ref.page;

  var d = $.Deferred();
  this.getFeatures().then(function () {
    d.resolve(_this._features);
  }).fail(function (err) {
    d.reject(err);
  });
  return d.promise();
};

proto.digestFeaturesForTable = function () {
  return {
    headers: [],
    features: []
  };
};

module.exports = GEOJSONDataProvider;

},{"core/layers/providers/provider":458,"core/utils/utils":485}],457:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var DataProvider = require('core/layers/providers/provider');

function KMLDataProvider() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._name = 'kml';
}

inherit(KMLDataProvider, DataProvider);

var proto = KMLDataProvider.prototype;

proto.getData = function () {
  var d = $.Deferred();
  return d.promise();
};

module.exports = KMLDataProvider;

},{"core/layers/providers/provider":458,"core/utils/utils":485}],458:[function(require,module,exports){
var _constant = require('constant');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    toRawType = _require.toRawType;

var geoutils = require('g3w-ol/src/utils/utils');
var G3WObject = require('core/g3wobject');

var _require2 = require('core/utils/geo'),
    geometryFields = _require2.geometryFields;

var WORD_NUMERIC_XML_TAG_ESCAPE = 'GIS3W_ESCAPE_NUMERIC_';
var WORD_NUMERIC_FIELD_ESCAPE = 'GIS3W_ESCAPE_NUMERIC_FIELD_';

function Provider() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._isReady = false;
  this._name = 'provider';
  this._layer = options.layer;
  this._hasFieldsStartWithNumber = false;
  base(this);
}

inherit(Provider, G3WObject);

var proto = Provider.prototype;

proto.getLayer = function () {
  return this._layer;
};

proto.setLayer = function (layer) {
  this._layer = layer;
};

proto.getFeatures = function () {
  console.log('overwriteby single provider');
};

proto.query = function () {
  console.log('overwriteby single provider');
};

proto.setReady = function (bool) {
  this._isReady = bool;
};

proto.isReady = function () {
  return this._isReady;
};

proto.error = function () {};

proto.isValid = function () {
  console.log('overwriteby single provider');
};

proto.getName = function () {
  return this._name;
};

// to extract gml from multiple (Tuscany region)
proto.extractGML = function (response) {
  if (response.substr(0, 2) !== '--') return response;
  var gmlTag1 = new RegExp("<([^ ]*)FeatureCollection");
  var gmlTag2 = new RegExp("<([^ ]*)msGMLOutput");
  var boundary = '\r\n--';
  var parts = response.split(new RegExp(boundary));
  parts.forEach(function (part) {
    isGmlPart = part.search(gmlTag1) > -1 ? true : part.search(gmlTag2) > -1 ? true : false;
    if (isGmlPart) {
      var gml = part.substr(part.indexOf("<?xml"));
      return gml;
    }
  });
};

// Method to transform xml from server to present to queryreult component
proto.handleQueryResponseFromServer = function (response, projections, layers) {
  var wms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  layers = layers ? layers : [this._layer];
  var layer = layers[0];
  var infoFormat = layer.getInfoFormat();
  switch (infoFormat) {
    case 'application/json':
      return this._parseGeoJsonResponse({
        layers: layers,
        response: response,
        projections: projections,
        wms: wms
      });
      break;
    case 'application/vnd.ogc.gml':
    default:
      //IN CASE OF application/vnd.ogc.gml alway pass to qgisserver
      //if (layer.getType() === "table" || !layer.isExternalWMS() || !layer.isLayerProjectionASMapProjection()) {
      response = this._handleXMLStringResponseBeforeConvertToJSON({
        layers: layers,
        response: response,
        wms: wms
      });
      return this._getHandledResponsesFromResponse({
        response: response,
        layers: layers,
        projections: projections
        //id: false //used in case of layer id .. but for now is set to false in case of layerid starting with number
      });
  }
};

//method to handle application/json response qgis
proto._parseGeoJsonResponse = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$layers = _ref.layers,
      layers = _ref$layers === undefined ? [] : _ref$layers,
      response = _ref.response,
      projections = _ref.projections,
      _ref$wms = _ref.wms,
      wms = _ref$wms === undefined ? true : _ref$wms;

  var layersFeatures = [];
  var layersId = layers.map(function (layer) {
    layersFeatures.push({
      layer: layer,
      features: []
    });
    return wms ? layer.getWMSLayerName() : layer.getWFSLayerName();
  });
  var data = response;
  var features = data && this._parseLayerGeoJSON(data, projections) || [];
  features.filter(function (feature) {
    var index = void 0;
    var featureId = feature.getId();
    var g3w_fid = featureId;
    // in case of wms getfeature without filter return string conatin layerName or layerid
    if (toRawType(featureId) === 'String' && Number.isNaN(1 * featureId)) {
      var fid = feature.getId().split('.'); // get id of the feature
      var currentLayerId = fid[0];
      g3w_fid = fid.length === 2 ? fid[1] : fid[0];
      index = layersId.indexOf(currentLayerId);
    } else index = 0; // force to 0 only one layer (search)
    if (index !== -1) {
      var fields = layersFeatures[index].layer.getFields().filter(function (field) {
        return field.show;
      });
      var properties = feature.getProperties();
      feature.set(_constant.G3W_FID, g3w_fid);
      fields.forEach(function (field) {
        if (properties[field.name] === undefined) {
          properties[field.label] !== undefined && feature.set(field.name, properties[field.label]);
        }
      });
      layersFeatures[index].features.push(feature);
    }
  });
  return layersFeatures;
};

proto._handleWMSMultilayers = function () {
  var _this = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref2.layer,
      response = _ref2.response,
      projections = _ref2.projections;

  var x2js = new X2JS();
  var arrayQGS = [].concat(_toConsumableArray(response.matchAll(/<qgs:(\w+) fid=/g)));
  var alreadySubstitute = [];
  arrayQGS.forEach(function (element) {
    var fid = element[1];
    if (alreadySubstitute.indexOf(fid) === -1) {
      alreadySubstitute.push(fid);
      var startfid = +fid[0];
      if (Number.isInteger(startfid)) response = response.replace(new RegExp('' + fid, "g"), '' + WORD_NUMERIC_XML_TAG_ESCAPE + fid);
    }
  });
  var jsonresponse = x2js.xml_str2json(response);
  // in case of parser return null
  if (!jsonresponse) return [{
    layer: layer,
    features: []
  }];
  var FeatureCollection = jsonresponse.FeatureCollection;
  var handledResponses = [];
  if (FeatureCollection.featureMember) {
    var originalFeatureMember = Array.isArray(FeatureCollection.featureMember) ? FeatureCollection.featureMember : [FeatureCollection.featureMember];
    var layersNames = new Set();
    originalFeatureMember.forEach(function (featureMember) {
      layersNames.add(Object.keys(featureMember)[0]);
    });

    var _loop = function _loop(layerName) {
      jsonresponse.FeatureCollection.featureMember = originalFeatureMember.filter(function (feature) {
        return feature[layerName];
      });
      var handledResponse = _this._parseLayerFeatureCollection({
        jsonresponse: jsonresponse,
        layer: layer,
        projections: projections
      });
      if (handledResponse) {
        var _response = handledResponse[0];
        _response.layer = layerName.replace(WORD_NUMERIC_XML_TAG_ESCAPE, '');
        handledResponses.unshift(_response);
      }
    };

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = layersNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var layerName = _step.value;

        _loop(layerName);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  return handledResponses;
};

proto._groupFeaturesByFields = function (features) {
  return _.groupBy(features, function (feature) {
    return Object.keys(feature);
  });
};

proto._handleWMSMultiLayersResponseFromQGISSERVER = function () {
  var _this2 = this;

  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      groupFeatures = _ref3.groupFeatures,
      prefix = _ref3.prefix,
      handledResponses = _ref3.handledResponses,
      jsonresponse = _ref3.jsonresponse,
      layer = _ref3.layer,
      projections = _ref3.projections;

  // is a multilayers. Each feature has different fields. If group has more that one feature spit it and create single features
  Object.keys(groupFeatures).forEach(function (key, index) {
    var features = groupFeatures[key];
    features.forEach(function (feature, sub_index) {
      var _jsonresponse$Feature;

      jsonresponse.FeatureCollection.featureMember = (_jsonresponse$Feature = {}, _defineProperty(_jsonresponse$Feature, 'layer' + index + '_' + sub_index, feature), _defineProperty(_jsonresponse$Feature, '__prefix', prefix), _jsonresponse$Feature);
      var handledResponse = _this2._parseLayerFeatureCollection({
        jsonresponse: jsonresponse,
        layer: layer,
        projections: projections
      });
      if (handledResponse) {
        var response = handledResponse[0];
        response.layer = layer;
        handledResponses.unshift(response);
      }
    });
  });
};

proto._getHandledResponsesFromResponse = function (_ref4) {
  var _this3 = this;

  var response = _ref4.response,
      layers = _ref4.layers,
      projections = _ref4.projections,
      _ref4$id = _ref4.id,
      id = _ref4$id === undefined ? false : _ref4$id;

  var multilayers = false;
  var x2js = new X2JS();
  var jsonresponse = x2js.xml_str2json(response);
  // in case of parser return null
  if (!jsonresponse) return [{
    layer: layers[0],
    features: []
  }];
  var FeatureCollection = jsonresponse.FeatureCollection;
  var handledResponses = [];
  if (FeatureCollection.featureMember) {
    var originalFeatureMember = Array.isArray(FeatureCollection.featureMember) ? FeatureCollection.featureMember : [FeatureCollection.featureMember];

    var _loop2 = function _loop2(i) {
      var layer = layers[i];
      var layerName = id ? layer.getId() : 'layer' + i;
      var featureMemberArrayAndPrefix = {
        features: null,
        __prefix: null
      };
      jsonresponse.FeatureCollection.featureMember = originalFeatureMember.filter(function (feature) {
        var featureMember = feature[layerName];
        if (featureMember) {
          featureMember.g3w_fid = {
            __prefix: feature.__prefix,
            __text: featureMember._fid && featureMember._fid.split('.')[1]
          };
          if (Array.isArray(featureMember)) {
            featureMemberArrayAndPrefix.features = featureMember;
            featureMemberArrayAndPrefix.__prefix = feature.__prefix;
            return false;
          }
          return true;
        }
      });
      if (featureMemberArrayAndPrefix.features) {
        var prefix = featureMemberArrayAndPrefix.__prefix;
        // check if features have the same fields. If not group the features with the same fields
        var groupFeatures = _this3._groupFeaturesByFields(featureMemberArrayAndPrefix.features);
        //check if features have different fields (multilayers)
        if (Object.keys(groupFeatures).length > 1) {
          // is a multilayers. Each feature has different fields
          multilayers = true;
          _this3._handleWMSMultiLayersResponseFromQGISSERVER({
            groupFeatures: groupFeatures,
            prefix: prefix,
            handledResponses: handledResponses,
            jsonresponse: jsonresponse,
            layer: layer,
            projections: projections
          });
        } else {
          featureMemberArrayAndPrefix.features.forEach(function (feature) {
            var _jsonresponse$Feature2;

            //for Each element have to add and object contain layerName and information, and __prefix
            jsonresponse.FeatureCollection.featureMember.push((_jsonresponse$Feature2 = {}, _defineProperty(_jsonresponse$Feature2, layerName, feature), _defineProperty(_jsonresponse$Feature2, '__prefix', prefix), _jsonresponse$Feature2));
          });
        }
      }
      if (!multilayers) {
        var _handledResponse = _this3._parseLayerFeatureCollection({
          jsonresponse: jsonresponse,
          layer: layer,
          projections: projections
        });
        _handledResponse && handledResponses.unshift(_handledResponse[0]);
      }
    };

    for (var i = 0; i < layers.length; i++) {
      _loop2(i);
    }
  }
  return handledResponses;
};

proto._handleXMLStringResponseBeforeConvertToJSON = function (_ref5) {
  var response = _ref5.response,
      layers = _ref5.layers,
      wms = _ref5.wms;

  if (!(typeof response === 'string' || response instanceof String)) response = new XMLSerializer().serializeToString(response);
  for (var i = 0; i < layers.length; i++) {
    var _layer = layers[i];
    var originalName = wms && _layer.isWmsUseLayerIds() ? _layer.getId() : _layer.getName();
    var sanitizeLayerName = wms ? originalName.replace(/[/\s]/g, '') : originalName.replace(/[/\s]/g, '_');
    sanitizeLayerName = sanitizeLayerName.replace(/(\'+)/, '');
    sanitizeLayerName = sanitizeLayerName.replace(/(\)+)/, '');
    sanitizeLayerName = sanitizeLayerName.replace(/(\(+)/, '');
    var reg = new RegExp('qgs:' + sanitizeLayerName + '\\b', "g");
    response = response.replace(reg, 'qgs:layer' + i);
  }
  var arrayQGS = [].concat(_toConsumableArray(response.matchAll(/qgs:(\d+)(\w+)>/g)));
  this._hasFieldsStartWithNumber = !!arrayQGS.length;
  arrayQGS.forEach(function (find, idx) {
    if (idx % 2 === 0) {
      var regex = new RegExp('' + find[0], "g");
      response = response.replace(regex, 'qgs:' + WORD_NUMERIC_FIELD_ESCAPE + find[1] + find[2] + '>');
    }
  });
  //PATCH id strange
  var strangeChar = new RegExp('' + String.fromCharCode(0), "g");
  response = response.replace(strangeChar, '0');
  ///
  return response;
};

// digest result
proto.digestFeaturesForLayers = function (featuresForLayers) {
  var _this4 = this;

  var id = 0;
  var layers = [];
  var layerAttributes = void 0,
      layerTitle = void 0,
      layerId = void 0;
  featuresForLayers.forEach(function (featuresForLayer) {
    var layer = featuresForLayer.layer;
    layerAttributes = layer.getAttributes();
    layerTitle = layer.getTitle();
    layerId = layer.getId();

    var layerObj = {
      title: layerTitle,
      id: layerId,
      attributes: [],
      features: [],
      hasgeometry: false,
      show: true,
      expandable: true,
      hasImageField: false, // check if image filed exist
      error: ''
    };

    // check if exist feature related to the layer
    if (featuresForLayer.features && featuresForLayer.features.length) {
      // get aonly attributes returned by WMS (using the first feature availble)
      layerObj.attributes = _this4._parseAttributes(layerAttributes, featuresForLayer.features[0].getProperties());
      // check if exist image field
      layerObj.attributes.forEach(function (attribute) {
        layerObj.hasImageField = attribute.type === 'image';
      });
      // loop throught selected features from query result
      featuresForLayer.features.forEach(function (feature) {
        var fid = feature.getId() ? feature.getId() : id;
        var geometry = feature.getGeometry();
        // check if feature has geometry
        layerObj.hasgeometry = geometry && true || false;
        // create feature object
        var featureObj = {
          id: fid,
          attributes: feature.getProperties(),
          geometry: geometry,
          show: true
        };
        layerObj.features.push(featureObj);
        id += 1;
      });
      layers.push(layerObj);
    } else if (featuresForLayer.error) {
      layerObj.error = featuresForLayer.error;
    }
  });
  return layers;
};

proto._parseAttributes = function (layerAttributes, featureAttributes) {
  var featureAttributesNames = _.keys(featureAttributes);
  featureAttributesNames = _.filter(featureAttributesNames, function (featureAttributesName) {
    return geometryFields.indexOf(featureAttributesName) === -1;
  });
  if (layerAttributes && layerAttributes.length) {
    var _featureAttributesNames = _.keys(featureAttributes);
    return _.filter(layerAttributes, function (attribute) {
      return _featureAttributesNames.indexOf(attribute.name) > -1;
    });
  } else {
    return _.map(featureAttributesNames, function (featureAttributesName) {
      return {
        name: featureAttributesName,
        label: featureAttributesName
      };
    });
  }
};

proto._transformFeatures = function (features, projections) {
  if (features.length) {
    if (!!features[0].getGeometry()) {
      var mainProjection = projections.layer ? projections.layer : projections.map;
      var invertedAxis = mainProjection.getAxisOrientation().substr(0, 2) === 'ne';
      if (projections.layer && projections.layer.getCode() !== projections.map.getCode()) {
        features.forEach(function (feature) {
          var geometry = feature.getGeometry();
          feature.setGeometry(geometry.transform(projections.layer.getCode(), projections.map.getCode()));
        });
      }
      if (invertedAxis) features = this._reverseFeaturesCoordinates(features);
    }
  }
  return features;
};

proto._parseLayerFeatureCollection = function (_ref6) {
  var jsonresponse = _ref6.jsonresponse,
      layer = _ref6.layer,
      projections = _ref6.projections;

  var x2js = new X2JS();
  var layerFeatureCollectionXML = x2js.json2xml_str(jsonresponse);
  var parser = new ol.format.WMSGetFeatureInfo();
  var features = this._transformFeatures(parser.readFeatures(layerFeatureCollectionXML), projections);
  if (features.length && this._hasFieldsStartWithNumber) {
    var properties = Object.keys(features[0].getProperties());
    var numericFields = properties.filter(function (property) {
      return property.indexOf(WORD_NUMERIC_FIELD_ESCAPE) !== -1;
    });
    features.forEach(function (feature) {
      numericFields.forEach(function (_field) {
        var value = feature.get(_field);
        var ori_field = _field.replace(WORD_NUMERIC_FIELD_ESCAPE, '');
        feature.set(ori_field, value);
        feature.unset(_field);
      });
    });
    this._hasFieldsStartWithNumber = false;
  }
  return [{
    layer: layer,
    features: features
  }];
};

proto._reverseFeaturesCoordinates = function (features) {
  features.forEach(function (feature) {
    var geometry = feature.getGeometry();
    feature.setGeometry(geoutils.reverseGeometry(geometry));
  });
  return features;
};

proto._parseLayermsGMLOutput = function (data) {
  var layers = this._layer.getQueryLayerOrigName();
  var parser = new ol.format.WMSGetFeatureInfo({
    layers: layers
  });
  return parser.readFeatures(data);
};

proto._parseLayerGeoJSON = function (data, projections) {
  var defaultDataProjection = projections.layer || projections.map;
  var geojson = new ol.format.GeoJSON({
    defaultDataProjection: defaultDataProjection,
    geometryName: "geometry"
  });
  return geojson.readFeatures(data);
};

module.exports = Provider;

},{"constant":399,"core/g3wobject":415,"core/utils/geo":484,"core/utils/utils":485,"g3w-ol/src/utils/utils":534}],459:[function(require,module,exports){
var Providers = {
  geojson: require('./geojsonprovider'),
  kml: require('./kmlprovider'),
  xml: require('./xmlprovider'),
  qgis: require('./qgisprovider'),
  wms: require('./wmsprovider'),
  wfs: require('./wfsprovider')
};

var ProvidersForServerTypes = {
  'QGIS': {
    'virtual': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'postgres': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'oracle': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'mssql': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'spatialite': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'ogr': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'delimitedtext': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis,
      filtertoken: Providers.qgis
    },
    'wms': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: null,
      search: null
    },
    'wfs': {
      query: Providers.wms,
      filter: Providers.wfs,
      data: Providers.qgis,
      search: Providers.qgis
    },
    'gdal': {
      query: Providers.wms,
      filter: null,
      data: null,
      search: null
    },
    'vector-tile': {
      query: Providers.wms,
      filter: null,
      data: null,
      search: null
    },
    'arcgismapserver': {
      query: Providers.wms,
      filter: null,
      data: null,
      search: null
    }
  },
  'OGC': {
    'wms': {
      query: Providers.wms,
      filter: null,
      data: null,
      search: null
    }
  },
  'G3WSUITE': {
    'geojson': {
      query: Providers.geojson,
      filter: null,
      data: Providers.geojson,
      search: null
    }
  }
};

function ProviderFactory() {
  this.build = function (providerType, serverType, sourceType, options) {
    // return instace of seletced provider
    var providerClass = this.get(providerType, serverType, sourceType);
    if (providerClass) {
      return new providerClass(options);
    }
    return null;
  };

  this.get = function (providerType, serverType, sourceType) {
    return ProvidersForServerTypes[serverType][sourceType][providerType];
  };
}

module.exports = new ProviderFactory();

},{"./geojsonprovider":456,"./kmlprovider":457,"./qgisprovider":460,"./wfsprovider":461,"./wmsprovider":462,"./xmlprovider":463}],460:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    XHR = _require.XHR;

var t = require('core/i18n/i18n.service').t;
var DataProvider = require('core/layers/providers/provider');
var RelationsService = require('core/relations/relationsservice');
var Feature = require('core/layers/features/feature');
var Parsers = require('core/parsers/parsers');

function QGISProvider() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this._name = 'qgis';
  this._layer = options.layer || {};
  this._projections = {
    map: null,
    layer: null
  };
  this._unlockUrl = this._layer.getUrl('unlock');
  // url referred to query
  this._queryUrl = this._layer.getUrl('query');
  this._dataUrl = this._layer.getUrl('data');
  // editing url api
  this._editingUrl = this._layer.getUrl('editing');
  this._commitUrl = this._layer.getUrl('commit');
  // url to get configuration
  this._configUrl = this._layer.getUrl('config');
  // widget url
  this._widgetUrls = this._layer.getUrl('widget');
  //filtertokenurl
  this._filtertokenUrl = this._layer.getUrl('filtertoken');
  // layer name
  this._layerName = this._layer.getName() || null; // get name  from QGIS layer, because the query are proxed from g3w-server
  this._infoFormat = this._layer.getInfoFormat() || 'application/vnd.ogc.gml';
}

inherit(QGISProvider, DataProvider);

var proto = QGISProvider.prototype;
/*
* token: current token if provide
* action: create, update, delete
* */

proto.deleteFilterToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return XHR.get({
            url: this._filtertokenUrl,
            params: {
              mode: 'delete'
            }
          });

        case 2:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this);
}));

proto.getFilterToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref3, _ref3$data, data;

  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return XHR.get({
            url: this._filtertokenUrl,
            params: params
          });

        case 3:
          _ref3 = _context2.sent;
          _ref3$data = _ref3.data;
          data = _ref3$data === undefined ? {} : _ref3$data;
          return _context2.abrupt('return', data.filtertoken);

        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2['catch'](0);
          return _context2.abrupt('return', Promise.reject(_context2.t0));

        case 12:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this, [[0, 9]]);
}));

proto.getFilterData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref5.field,
      _ref5$raw = _ref5.raw,
      raw = _ref5$raw === undefined ? false : _ref5$raw,
      _ref5$suggest = _ref5.suggest,
      suggest = _ref5$suggest === undefined ? {} : _ref5$suggest,
      unique = _ref5.unique,
      _ref5$formatter = _ref5.formatter,
      formatter = _ref5$formatter === undefined ? 1 : _ref5$formatter,
      queryUrl = _ref5.queryUrl;

  var params, response, isVector, data;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          params = {
            field: field,
            suggest: suggest,
            formatter: formatter,
            unique: unique,
            filtertoken: _applicationstate2.default.tokens.filtertoken
          };
          _context3.prev = 1;
          _context3.next = 4;
          return XHR.get({
            url: '' + (queryUrl ? queryUrl : this._dataUrl),
            params: params
          });

        case 4:
          response = _context3.sent;
          isVector = this._layer.getType() !== "table";

          isVector && this.setProjections();
          data = raw ? response : response.result ? unique ? response.data : {
            data: this._parseGeoJsonResponse({
              layers: [this._layer],
              response: response.vector.data,
              projections: this._projections
            })
          } : Promise.reject();
          return _context3.abrupt('return', data);

        case 11:
          _context3.prev = 11;
          _context3.t0 = _context3['catch'](1);
          return _context3.abrupt('return', Promise.reject(_context3.t0));

        case 14:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this, [[1, 11]]);
}));

proto.setProjections = function () {
  //COMMENTED LAYER PROJECTION: EXPECT ONLY RESULT IN MAP PROJECTION
  //this._projections.layer = this._layer.getProjection();
  this._projections.map = this._layer.getMapProjection() || this._projections.layer;
};

//query by filter
proto.query = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var feature_count = options.feature_count || 10;
  // parameter to get rwa response
  var raw = options.raw || false;
  var _options$filter = options.filter,
      filter = _options$filter === undefined ? null : _options$filter;

  filter = filter && Array.isArray(filter) ? filter : [filter];
  var isVector = this._layer.getType() !== "table";
  isVector && this.setProjections();
  var CRS = isVector ? this._projections.map.getCode() : _applicationstate2.default.map.epsg;
  var queryUrl = options.queryUrl || this._queryUrl;
  var I = options.I,
      J = options.J,
      layers = options.layers;

  var layerNames = layers ? layers.map(function (layer) {
    return layer.getWMSLayerName();
  }).join(',') : this._layer.getWMSLayerName();
  if (filter) {
    // check if geometry filter. If not i have to remove projection layer
    if (filter[0].getType() !== 'geometry') this._projections.layer = null;
    filter = filter.map(function (filter) {
      return filter.get();
    }).filter(function (value) {
      return value;
    });
    var url = queryUrl;
    var params = {
      SERVICE: 'WMS',
      VERSION: '1.3.0',
      REQUEST: 'GetFeatureInfo',
      filtertoken: _applicationstate2.default.tokens.filtertoken,
      LAYERS: layerNames,
      QUERY_LAYERS: layerNames,
      INFO_FORMAT: this._infoFormat,
      FEATURE_COUNT: feature_count,
      CRS: CRS,
      I: I,
      J: J,
      FILTER: filter && filter.length ? filter.join(';') : undefined,
      WITH_GEOMETRY: isVector
    };
    XHR.get({
      url: url,
      params: params
    }).then(function (response) {
      var featuresForLayers = raw ? response : _this.handleQueryResponseFromServer(response, _this._projections, layers);
      d.resolve(featuresForLayers);
    }).catch(function (err) {
      return d.reject(err);
    });
  } else d.reject();
  return d.promise();
};

// get layer config
proto.getConfig = function () {
  var d = $.Deferred();
  var url = this._configUrl;
  if (!url) {
    d.reject('not valid url');
    return;
  }
  $.get(url).then(function (config) {
    return d.resolve(config);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto.getWidgetData = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var type = options.type,
      fields = options.fields;

  var url = this._widgetUrls[type];
  return $.get(url, {
    fields: fields
  });
};

// unlock feature
proto.unlock = function () {
  var d = $.Deferred();
  $.post(this._unlockUrl).then(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

// commit function
proto.commit = function (commitItems) {
  var d = $.Deferred();
  //check if editing or not;
  var url = this._commitUrl;
  var jsonCommits = JSON.stringify(commitItems);
  $.post({
    url: url,
    data: jsonCommits,
    contentType: "application/json"
  }).then(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

// METODS LOADING EDITING FEATURES (READ/WRITE) //
proto.getFeatures = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var d = $.Deferred();
  // filter null value
  Object.entries(params).forEach(function (_ref6) {
    var _ref7 = _slicedToArray(_ref6, 2),
        key = _ref7[0],
        value = _ref7[1];

    if (value === null || value === void 0) delete params[key];
  });
  var layerType = this._layer.getType();
  // check if data are requested in read or write mode;
  var url = void 0;
  //set contentType
  var contentType = "application/json";
  //editing mode
  if (options.editing) {
    var promise = void 0;
    url = this._editingUrl;
    if (!url) {
      d.reject('Url not valid');
      return;
    }
    var urlParams = $.param(params);
    url += urlParams ? '?' + urlParams : '';
    var features = [];
    var filter = options.filter || null;
    if (filter) {
      // filterbbox
      if (filter.bbox) {
        var bbox = filter.bbox;
        filter = {
          in_bbox: bbox[0] + ',' + bbox[1] + ',' + bbox[2] + ',' + bbox[3],
          filtertoken: _applicationstate2.default.tokens.filtertoken
        };
        var jsonFilter = JSON.stringify(filter);
        promise = XHR.post({
          url: url,
          data: jsonFilter,
          contentType: contentType
        });
        // filter fid
      } else if (filter.fid) {
        var _options = filter.fid;
        promise = RelationsService.getRelations(_options);
      } else if (filter.field) {
        var _jsonFilter = JSON.stringify(filter);
        promise = XHR.post({
          url: url,
          data: _jsonFilter,
          contentType: contentType
        });
      } else if (filter.nofeatures) {
        var _jsonFilter2 = JSON.stringify({
          field: 'id|eq|__G3W__NO_FEATURES__'
        });
        promise = XHR.post({
          url: url,
          data: _jsonFilter2,
          contentType: contentType
        });
      }
    } else promise = XHR.post({ url: url, contentType: contentType });
    promise.then(function (response) {
      var vector = response.vector,
          result = response.result,
          featurelocks = response.featurelocks;

      if (result) {
        var data = vector.data,
            geometrytype = vector.geometrytype;

        var parser = Parsers[layerType].get({
          type: 'json'
        });
        //const parser_options = (geometrytype !== 'NoGeometry') ? { crs: this._layer.getCrs(), mapCrs: this._layer.getMapCrs() } : {};
        var parser_options = geometrytype !== 'NoGeometry' ? { crs: _this2._layer.getCrs() } : {};
        //get lockIds
        var lockIds = featurelocks.map(function (featureLock) {
          return featureLock.featureid;
        });
        parser(data, parser_options).forEach(function (feature) {
          var featureId = '' + feature.getId();
          if (lockIds.indexOf(featureId) > -1) {
            features.push(new Feature({
              feature: feature
            }));
          }
        });
        // resolve with features locked and requested
        d.resolve({
          features: features,
          featurelocks: featurelocks
        });
      } else {
        // case when server responde with result false (error)
        d.reject({
          message: t("info.server_error")
        });
      }
    }).catch(function (err) {
      return d.reject({ message: t("info.server_error") });
    });
  } else {
    url = this._dataUrl;
    var _urlParams = $.param(params);
    url += _urlParams ? '?' + _urlParams : '';
    $.get({
      url: url,
      contentType: contentType
    }).then(function (response) {
      var vector = response.vector;
      var data = vector.data;
      d.resolve({
        data: data,
        count: vector.count
      });
    }).fail(function (err) {
      return d.reject(err);
    });
  }
  return d.promise();
};

proto._loadLayerData = function (mode, customUrlParameters) {
  var _this3 = this,
      _arguments = arguments;

  var d = $.Deferred();
  Obkect.entries(this._layers).forEach(function (_ref8) {
    var _ref9 = _slicedToArray(_ref8, 2),
        layerCode = _ref9[0],
        layer = _ref9[1];

    if (_.isNull(layer.vector)) noVectorlayerCodes.push(layerCode);
  });
  var vectorLayersSetup = noVectorlayerCodes.map(function (layerCode) {
    return _this3._setupVectorLayer(layerCode);
  });
  this.emit('loadingvectorlayersstart');
  $.when.apply(this, vectorLayersSetup).then(function () {
    var vectorLayersCodes = Array.prototype.slice.call(_arguments);
    _this3.emit('loadingvectolayersdatastart');
    _this3.loadAllVectorsData(vectorLayersCodes).then(function () {
      _this3._vectorLayersCodes = vectorLayersCodes;
      d.resolve(vectorLayersCodes);
      _this3.emit('loadingvectorlayersend');
      _this3.setReady(true);
    }).fail(function () {
      _this3._layers.forEach(function (layer) {
        return layer.vector = null;
      });
      d.reject();
      _this3.emit('errorloadingvectorlayersend');
      _this3.setReady(false);
    });
  }).fail(function () {
    _this3.setReady(false);
    _this3.emit('errorloadingvectorlayersend');
    d.reject();
  });
  return d.promise();
};

proto.setVectorLayersCodes = function (vectorLayersCodes) {
  this._vectorLayersCodes = vectorLayersCodes;
};

proto.getVectorLayersCodes = function () {
  return this._vectorLayersCodes;
};

proto.getLayers = function () {
  return this._layers;
};

proto.reloadVectorData = function (layerCode) {
  var _this4 = this;

  var d = $.Deferred();
  var bbox = this._mapService.state.bbox;
  this._createVectorLayerFromConfig(layerCode).then(function (vectorLayer) {
    _this4._getVectorLayerData(vectorLayer, bbox).then(function (vectorDataResponse) {
      _this4.setVectorLayerData(vectorLayer[_this4._editingApiField], vectorDataResponse);
      vectorLayer.setData(vectorDataResponse.vector.data);
      d.resolve(vectorLayer);
    });
  });
  return d.promise();
};

proto.loadAllVectorsData = function (layerCodes) {
  var _this5 = this;

  var d = $.Deferred();
  var layers = this._layers;
  var bbox = this._mapService.state.bbox;
  var loadedExtent = this._loadedExtent;
  if (loadedExtent && ol.extent.containsExtent(loadedExtent, bbox)) {
    return resolvedValue();
  }
  this._loadedExtent = !loadedExtent ? bbox : ol.extent.extend(loadedExtent, bbox);
  if (layerCodes) {
    layers = [];
    layerCodes.forEach(function (layerCode) {
      return layers.push(_this5._layers[layerCode]);
    });
  }
  var vectorDataRequests = layers.map(function (Layer) {
    return _this5._loadVectorData(Layer.vector, bbox);
  });

  $.when.apply(this, vectorDataRequests).then(function () {
    return d.resolve(layerCodes);
  }).fail(function () {
    return d.reject();
  });
  return d.promise();
};

proto._setCustomUrlParameters = function (customUrlParameters) {
  this._customUrlParameters = customUrlParameters;
};

proto._checkVectorGeometryTypeFromConfig = function (vectorConfig) {
  switch (vectorConfig.geometrytype) {
    case 'Line':
      vectorConfig.geometrytype = 'LineString';
      break;
    case 'MultiLine':
      vectorConfig.geometrytype = 'MultiLineString';
      break;
  }
  return vectorConfig;
};

proto._createVectorLayerFromConfig = function (layerCode) {
  var _this6 = this;

  var layerConfig = this._layers[layerCode];
  var d = $.Deferred();
  this._getVectorLayerConfig(layerConfig[this._editingApiField]).then(function (vectorConfigResponse) {
    var vectorConfig = vectorConfigResponse.vector;
    vectorConfig = _this6._checkVectorGeometryTypeFromConfig(vectorConfig);
    var crsLayer = layerConfig.crs || _this6._mapService.getProjection().getCode();
    var vectorLayer = _this6._createVectorLayer({
      geometrytype: vectorConfig.geometrytype,
      format: vectorConfig.format,
      crs: _this6._mapService.getProjection().getCode(),
      crsLayer: crsLayer,
      id: layerConfig.id,
      name: layerConfig.name,
      editing: self._editingMode
    });
    vectorLayer.setFields(vectorConfig.fields);
    vectorLayer.setCrs(crsLayer);
    var relations = vectorConfig.relations;
    if (relations) {
      vectorLayer.lazyRelations = true;
      vectorLayer.setRelations(relations);
    }
    if (layerConfig.style) vectorLayer.setStyle(layerConfig.style);
    d.resolve(vectorLayer);
  }).fail(function () {
    return d.reject();
  });
  return d.promise();
};

proto._setupVectorLayer = function (layerCode) {
  var _this7 = this;

  var d = $.Deferred();
  this._createVectorLayerFromConfig(layerCode).then(function (vectorLayer) {
    var layerConfig = _this7._layers[layerCode];
    layerConfig.vector = vectorLayer;
    d.resolve(layerCode);
  }).fail(function () {
    return d.reject();
  });
  return d.promise();
};

proto._loadVectorData = function (vectorLayer, bbox) {
  var _this8 = this;

  return self._getVectorLayerData(vectorLayer, bbox).then(function (vectorDataResponse) {
    _this8.setVectorLayerData(vectorLayer[_this8._editingApiField], vectorDataResponse);
    if (_this8._editingMode && vectorDataResponse.featurelocks) {
      _this8.setVectorFeaturesLock(vectorLayer, vectorDataResponse.featurelocks);
    }
    vectorLayer.setData(vectorDataResponse.vector.data);
    if (_this8._) return vectorDataResponse;
  }).fail(function () {
    return false;
  });
};

proto.getVectorLayerData = function (layerCode) {
  return this._vectorLayersData[layerCode];
};

proto.getVectorLayersData = function () {
  return this._vectorLayersData;
};

proto.setVectorLayerData = function (layerCode, vectorLayerData) {
  this._vectorLayersData[layerCode] = vectorLayerData;
};

proto.setVectorFeaturesLock = function (vectorLayer, featureslock) {
  var newFeaturesLockIds = _.differenceBy(featureslock, vectorLayer.getFeatureLocks(), 'featureid');
  newFeaturesLockIds.forEach(function (newLockId) {
    vectorLayer.addLockId(newLockId);
  });
};

proto.cleanVectorFeaturesLock = function (vectorLayer) {
  vectorLayer.cleanFeatureLocks();
};

proto.lockFeatures = function (layerName) {
  var _this9 = this;

  var d = $.Deferred();
  var bbox = this._mapService.state.bbox;
  var vectorLayer = this._layers[layerName].vector;
  $.get(this._baseUrl + layerName + "/?lock" + this._customUrlParameters + "&in_bbox=" + bbox[0] + "," + bbox[1] + "," + bbox[2] + "," + bbox[3]).done(function (data) {
    _this9.setVectorFeaturesLock(vectorLayer, data.featurelocks);
    d.resolve(data);
  }).fail(function () {
    return d.reject();
  });
  return d.promise();
};

proto._getVectorLayerConfig = function (layerApiField) {
  var d = $.Deferred();
  $.get(this._baseUrl + layerApiField + "/?config" + this._customUrlParameters).done(function (data) {
    return d.resolve(data);
  }).fail(function () {
    return d.reject();
  });
  return d.promise();
};

proto._getVectorLayerData = function (vectorLayer, bbox) {
  var d = $.Deferred();
  var lock = this.getMode() == 'w' ? true : false;
  var apiUrl = lock ? this._baseUrl + vectorLayer[this._editingApiField] + "/?editing" : this._baseUrl + vectorLayer[this._editingApiField] + "/?";
  $.get(apiUrl + this._customUrlParameters + "&in_bbox=" + bbox[0] + "," + bbox[1] + "," + bbox[2] + "," + bbox[3]).done(function (data) {
    return d.resolve(data);
  }).fail(function () {
    return d.reject();
  });
  return d.promise();
};

proto._createVectorLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var vector = new VectorLayer(options);
  return vector;
};

proto.cleanUpLayers = function () {
  this._loadedExtent = null;
};

module.exports = QGISProvider;

},{"core/applicationstate":402,"core/i18n/i18n.service":418,"core/layers/features/feature":434,"core/layers/providers/provider":458,"core/parsers/parsers":467,"core/relations/relationsservice":481,"core/utils/utils":485}],461:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var DataProvider = require('core/layers/providers/provider');
var Filter = require('core/layers/filter/filter');

function WFSDataProvider() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._name = 'wfs';
}

inherit(WFSDataProvider, DataProvider);

var proto = WFSDataProvider.prototype;

proto.getData = function () {
  var d = $.Deferred();
  return d.promise();
};

// query method
proto.query = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$reproject = options.reproject,
      reproject = _options$reproject === undefined ? false : _options$reproject,
      _options$feature_coun = options.feature_count,
      feature_count = _options$feature_coun === undefined ? 10 : _options$feature_coun,
      filter = options.filter;

  params.MAXFEATURES = feature_count;
  var d = $.Deferred();
  var layers = options.layers;
  this._doRequest(filter, params, layers, reproject).then(function (response) {
    var projections = {
      map: _this._layer.getMapProjection(),
      layer: reproject ? _this._layer.getProjection() : null
    };
    var featuresForLayers = _this.handleQueryResponseFromServer(response, projections, layers, wms = false);
    d.resolve({
      data: featuresForLayers
    });
  }).fail(function (e) {
    return d.reject(e);
  });
  return d.promise();
};

proto._post = function (url, params) {
  url = url.match(/\/$/) ? url : url + '/';
  var d = $.Deferred();
  $.post(url, params).then(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

// get request
proto._get = function (url, params) {
  // trasform parameters
  url = url.match(/\/$/) ? url : url + '/';
  var d = $.Deferred();
  var urlParams = $.param(params);
  url = url + '?' + urlParams;
  $.get(url).then(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

//request to server
proto._doRequest = function (filter) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var layers = arguments[2];
  var reproject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var d = $.Deferred();
  filter = filter || new Filter({});
  var layer = layers ? layers[0] : this._layer;
  var httpMethod = layer.getOwsMethod();
  var url = layer.getQueryUrl();
  var infoFormat = layer.getInfoFormat();
  var layerNames = layers ? layers.map(function (layer) {
    return layer.getWFSLayerName();
  }).join(',') : layer.getWFSLayerName();
  var SRSNAME = reproject ? layer.getProjection().getCode() : this._layer.getMapProjection().getCode();
  params = Object.assign(params, {
    SERVICE: 'WFS',
    VERSION: '1.1.0',
    REQUEST: 'GetFeature',
    TYPENAME: layerNames,
    OUTPUTFORMAT: infoFormat,
    SRSNAME: SRSNAME
  });
  if (filter) {
    var filterType = filter.getType();
    var filterConfig = filter.getConfig();
    console.log(filterConfig);
    var featureRequest = void 0;
    // get filter from ol
    var f = ol.format.filter;
    /////
    filter = filter.get();
    switch (filterType) {
      case 'bbox':
        featureRequest = new ol.format.WFS().writeGetFeature({
          featureTypes: [layer],
          filter: f.bbox('the_geom', filter)
        });
        break;
      case 'geometry':
        var _filterConfig$spatial = filterConfig.spatialMethod,
            spatialMethod = _filterConfig$spatial === undefined ? 'intersects' : _filterConfig$spatial;

        featureRequest = new ol.format.WFS().writeGetFeature({
          featureTypes: [layer],
          filter: f[spatialMethod]('the_geom', filter)
        });
        break;
      case 'expression':
        featureRequest = new ol.format.WFS().writeGetFeature({
          featureTypes: [layer],
          filter: null
        });
        break;
      case 'all':
        request = this._post(url, params);
        return request;
      default:
        break;
    }
    params.FILTER = ('(' + featureRequest.children[0].innerHTML + ')').repeat(layers ? layers.length : 1);
    var queryPromise = httpMethod === 'GET' && filterType !== 'geometry' ? this._get(url, params) : this._post(url, params);
    queryPromise.then(function (response) {
      d.resolve(response);
    }).fail(function (err) {
      if (err.status === 200) d.resolve(err.responseText);else d.reject(err);
    });
  } else d.reject();

  return d.promise();
};

module.exports = WFSDataProvider;

},{"core/layers/filter/filter":438,"core/layers/providers/provider":458,"core/utils/utils":485}],462:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    appendParams = _require.appendParams,
    XHR = _require.XHR;

var geoutils = require('g3w-ol/src/utils/utils');
var DataProvider = require('core/layers/providers/provider');

//overwrite method to read feature
// da un geojson
var PIXEL_TOLERANCE = 10;
var GETFEATUREINFO_IMAGE_SIZE = [101, 101];
var DPI = geoutils.getDPI();

function WMSDataProvider() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._name = 'wms';
  this._projections = {
    map: null,
    layer: null
  };
  this._infoFormat = this._layer.getInfoFormat() || 'application/vnd.ogc.gml';
}

inherit(WMSDataProvider, DataProvider);

var proto = WMSDataProvider.prototype;

proto._getRequestParameters = function (_ref) {
  var layers = _ref.layers,
      feature_count = _ref.feature_count,
      coordinates = _ref.coordinates,
      resolution = _ref.resolution,
      size = _ref.size;

  var layerNames = layers ? layers.map(function (layer) {
    return layer.getWMSInfoLayerName();
  }).join(',') : this._layer.getWMSInfoLayerName();
  var extent = geoutils.getExtentForViewAndSize(coordinates, resolution, 0, size);
  var x = Math.floor((coordinates[0] - extent[0]) / resolution);
  var y = Math.floor((extent[3] - coordinates[1]) / resolution);
  var params = {
    SERVICE: 'WMS',
    VERSION: '1.3.0',
    REQUEST: 'GetFeatureInfo',
    CRS: this._projections.map.getCode(),
    //LAYERS: layerNames,
    QUERY_LAYERS: layerNames,
    filtertoken: _applicationstate2.default.tokens.filtertoken,
    INFO_FORMAT: this._infoFormat,
    FEATURE_COUNT: feature_count,
    // TOLLERANCE PARAMETERS FOR QGIS
    FI_POINT_TOLERANCE: PIXEL_TOLERANCE,
    FI_LINE_TOLERANCE: PIXEL_TOLERANCE,
    FI_POLYGON_TOLERANCE: PIXEL_TOLERANCE,
    G3W_TOLERANCE: PIXEL_TOLERANCE * resolution,
    WITH_GEOMETRY: true,
    I: x,
    J: y,
    DPI: DPI,
    WIDTH: size[0],
    HEIGHT: size[1]
  };
  if (!('STYLES' in params)) params['STYLES'] = '';
  var bbox = this._projections.map.getAxisOrientation().substr(0, 2) === 'ne' ? [extent[1], extent[0], extent[3], extent[2]] : extent;
  params['BBOX'] = bbox.join(',');
  return params;
};

proto.query = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var size = options.size || GETFEATUREINFO_IMAGE_SIZE;
  var feature_count = options.feature_count || 10;
  var layerProjection = this._layer.getProjection();
  this._projections.map = this._layer.getMapProjection() || layerProjection;
  var coordinates = options.coordinates || [];
  var resolution = options.resolution || null;
  var layers = options.layers;
  var layer = layers ? layers[0] : this._layer;
  var url = layer.getQueryUrl();
  var METHOD = layer.isExternalWMS() || !/^\/ows/.test(url) ? 'GET' : layer.getOwsMethod();
  var params = this._getRequestParameters({ layers: layers, feature_count: feature_count, coordinates: coordinates, resolution: resolution, size: size });
  this[METHOD]({ url: url, layers: layers, params: params }).then(function (response) {
    var data = _this.handleQueryResponseFromServer(response, _this._projections, layers);
    d.resolve({
      data: data,
      query: {
        coordinates: coordinates,
        resolution: resolution
      }
    });
  }).catch(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto.GET = function (_ref2) {
  var url = _ref2.url,
      params = _ref2.params;

  var sourceParam = url.split('SOURCE');
  if (sourceParam.length) {
    url = sourceParam[0];
    if (sourceParam.length > 1) sourceParam = '&SOURCE' + sourceParam[1];else sourceParam = '';
  }
  url = appendParams(url, params);
  url = '' + url + (sourceParam && sourceParam);
  return XHR.get({
    url: url
  });
};

proto.POST = function (_ref3) {
  var url = _ref3.url,
      params = _ref3.params;

  return XHR.post({
    url: url,
    data: params
  });
};

module.exports = WMSDataProvider;

},{"core/applicationstate":402,"core/layers/providers/provider":458,"core/utils/utils":485,"g3w-ol/src/utils/utils":534}],463:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var DataProvider = require('core/layers/providers/provider');

function XMLDataProvider(options) {
  options = options || {};
  base(this);
  this._name = 'xml';
}

inherit(XMLDataProvider, DataProvider);

var proto = XMLDataProvider.prototype;

proto.getData = function () {
  var d = $.Deferred();
  return d.promise();
};

module.exports = XMLDataProvider;

},{"core/layers/providers/provider":458,"core/utils/utils":485}],464:[function(require,module,exports){
var _constant = require('constant');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var Layer = require('./layer');
var Editor = require('core/editing/editor');
var FeaturesStore = require('./features/featuresstore');
var Feature = require('./features/feature');

// Base Layer that support editing
function TableLayer() {
  var _this3 = this;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var ProjectsRegistry = require('core/project/projectsregistry');
  // setters
  this.setters = {
    // delete all features
    clearFeatures: function clearFeatures() {
      this._clearFeatures();
    },
    addFeature: function addFeature(feature) {
      this._addFeature(feature);
    },
    deleteFeature: function deleteFeature(feature) {
      this._deleteFeature(feature);
    },
    updateFeature: function updateFeature(feature) {
      this._updateFeature(feature);
    },
    setFeatures: function setFeatures(features) {
      this._setFeatures(features);
    },

    // get data from every sources (server, wms, etc..)
    // throught provider related to featuresstore
    getFeatures: function getFeatures() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var d = $.Deferred();
      this._featuresstore.getFeatures(options).then(function (promise) {
        promise.then(function (features) {
          _this.emit('getFeatures', features);
          return d.resolve(features);
        }).fail(function (err) {
          return d.reject(err);
        });
      }).fail(function (err) {
        return d.reject(err);
      });
      return d.promise();
    },
    commit: function commit(commitItems) {
      var _this2 = this;

      var d = $.Deferred();
      this._featuresstore.commit(commitItems).then(function (promise) {
        promise.then(function (response) {
          response && response.result && _this2.syncSelectionFilterFeatures(commitItems);
          d.resolve(response);
        }).fail(function (err) {
          return d.reject(err);
        });
      }).fail(function (err) {
        d.reject(err);
      });
      return d.promise();
    },
    setColor: function setColor(color) {
      this._setColor(color);
    }
  };
  /*
   * editing url api:
   * /api/vector/<type of request: data/editing/config>/<project_type>/<project_id>/<layer_id>
   * example: /api/vector/config/qdjango/10/points273849503023
   *
  */
  this.type = Layer.LayerTypes.TABLE;
  // color
  this._color = null;
  options.project = options.project || ProjectsRegistry.getCurrentProject();
  this.layerId = config.id;
  // add urls
  config.urls = config.urls || {};
  // add editing configurations
  config.editing = {
    fields: [] // editing fields
  };
  // call base layer
  base(this, config, options);

  // get configuration from server if is editable
  this._editatbleLayer;
  if (this.isEditable()) {
    // add state info for the layer
    this.layerForEditing = new Promise(function (resolve, reject) {
      _this3.getEditingConfig().then(function () {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            vector = _ref.vector,
            _ref$constraints = _ref.constraints,
            constraints = _ref$constraints === undefined ? {} : _ref$constraints,
            _ref$capabilities = _ref.capabilities,
            capabilities = _ref$capabilities === undefined ? _constant.DEFAULT_EDITING_CAPABILITIES : _ref$capabilities;

        _this3.config.editing.fields = vector.fields;
        _this3.config.editing.format = vector.format;
        _this3.config.editing.constraints = constraints;
        //set default editing capabilities
        _this3.config.editing.capabilities = capabilities;
        _this3.config.editing.style = vector.style;
        _this3.config.editing.form = {
          perc: null
        };
        _this3._setOtherConfigParameters(vector);
        vector.style && _this3.setColor(vector.style.color);
        // creare an instace of editor
        _this3._editor = new Editor({
          layer: _this3
        });

        resolve(_this3);
        _this3.setReady(true);
      }).fail(function (err) {
        reject(_this3);
        _this3.setReady(false);
      });
    });
    this.state = _.merge({
      editing: {
        started: false,
        modified: false,
        ready: false
      }
    }, this.state);
  }
  this._featuresstore = new FeaturesStore({
    provider: this.providers.data
  });
}

inherit(TableLayer, Layer);

var proto = TableLayer.prototype;

//sync selection
proto.syncSelectionFilterFeatures = function (commitItems) {
  try {
    var layer = CatalogLayersStoresRegistry.getLayerById(this.getId());
    if (layer.isSelectionActive()) {
      layer.isGeoLayer() && commitItems.update.forEach(function (updateItem) {
        var id = updateItem.id,
            geometry = updateItem.geometry;

        layer.hasSelectionFid(id) && layer.updateOlSelectionFeature({ id: id, geometry: geometry });
      });
      commitItems.delete.forEach(function (id) {
        layer.hasSelectionFid(id) && layer.excludeSelectionFid(id);
      });
    }
  } catch (err) {}
};

proto.setFormPercentage = function (perc) {
  this.config.editing.form.perc = perc;
};

proto.getFormPercentage = function () {
  return this.config.editing.form.perc;
};

proto.clone = function () {
  return _.cloneDeep(this);
};

proto.cloneFeatures = function () {
  return this._featuresstore.clone();
};

proto.setVectorUrl = function (url) {
  this.vectorUrl = url;
};

proto.setProjectType = function (projectType) {
  this.projectType = projectType;
};

proto._setColor = function (color) {
  this._color = color;
};

proto.getColor = function () {
  return this._color;
};

proto.readFeatures = function () {
  return this._featuresstore.readFeatures();
};

// return layer for editing
proto.getLayerForEditing = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      vectorurl = _ref3.vectorurl,
      project_type = _ref3.project_type;

  var editableLayer;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          vectorurl && this.setVectorUrl(vectorurl);
          project_type && this.setProjectType(project_type);
          this.setEditingUrl();
          editableLayer = this.clone();
          _context.prev = 4;
          _context.next = 7;
          return editableLayer.layerForEditing;

        case 7:
          return _context.abrupt('return', _context.sent);

        case 10:
          _context.prev = 10;
          _context.t0 = _context['catch'](4);
          return _context.abrupt('return', _context.t0);

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this, [[4, 10]]);
}));

proto.getEditingSource = function () {
  return this._editor.getEditingSource();
};

proto.readEditingFeatures = function () {
  return this._editor.readEditingFeatures();
};

proto.getEditingLayer = function () {
  return this;
};

//check if is editingLayer useful to get editingstyle
proto.isEditingLayer = function () {
  return !!this.config.editing;
};

proto.getEditingStyle = function () {
  return this.config.editing.style;
};

proto.setEditingStyle = function () {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config.editing.style = style;
};

proto.getEditingConstrains = function () {
  return this.config.editing.constraints;
};

proto.getEditingCapabilities = function () {
  return this.config.editing.capabilities;
};

proto.isFieldRequired = function (fieldName) {
  var required = false;
  this.getEditingFields().forEach(function (field) {
    if (fieldName === field.name) {
      required = !!field.validate.required;
      return false;
    }
  });
  return required;
};

// unlock editng features
proto.unlock = function () {
  var d = $.Deferred();
  this._featuresstore.unlock().then(function () {
    return d.resolve();
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto._setOtherConfigParameters = function (config) {
  // overwrite by vector layer
};

// return layer fields
proto.getEditingFields = function () {
  var editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var fields = this.config.editing.fields.length ? this.config.editing.fields : this.config.fields;
  if (editable) fields = fields.filter(function (field) {
    return field.editable;
  });
  return fields;
};

proto.isPkField = function (field) {
  var find_field = this.getEditingFields().find(function (_field) {
    return _field.name === field;
  });
  return find_field && find_field.pk;
};

proto.isEditingFieldEditable = function (field) {
  var find_field = this.getEditingFields().find(function (_field) {
    return _field.name === field;
  });
  return find_field ? find_field.editable : false;
};

proto.getEditingNotEditableFields = function () {
  return this.config.editing.fields.filter(function (field) {
    return !field.editable;
  }).map(function (field) {
    return field.name;
  });
};

proto.getEditingMediaFields = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  return this.config.editing.fields.filter(function (field) {
    return field.input.type === 'media';
  }).map(function (field) {
    return field.name;
  });
};

proto.getFieldsLabel = function () {
  var labels = [];
  this.getEditingFields().forEach(function (field) {
    return labels.push(field.label);
  });
  return labels;
};

proto.getDataFormat = function () {
  return this.config.editing.format;
};

// raw data
proto.getEditingFormat = function () {
  return this.config.editing.format;
};

proto.isReady = function () {
  return this.state.editing.ready;
};

proto.setReady = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.editing.ready = bool;
};

// get configuration from server
proto.getEditingConfig = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var provider = this.getProvider('data');
  provider.getConfig(options).then(function (config) {
    return d.resolve(config);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto.addEditingConfigFieldOption = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref4.field,
      key = _ref4.key,
      value = _ref4.value;

  var options = field.input.options;
  options[key] = value;
  return options[key];
};

proto.getWidgetData = function (options) {
  var provider = this.getProvider('data');
  var d = $.Deferred();
  provider.getWidgetData(options).then(function (response) {
    return d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto.getCommitUrl = function () {
  return this.config.urls.commit;
};

proto.setCommitUrl = function (url) {
  this.config.urls.commit = url;
};

proto.getEditingUrl = function () {
  return this.config.urls.editing;
};

proto.getUnlockUrl = function () {
  return this.config.url.unlock;
};

proto.setUnlockUrl = function (url) {
  this.config.urls.unlock = url;
};

proto.getWidgetUrl = function () {
  return this.config.urls.widget;
};

// set data url
proto.setDataUrl = function (url) {
  this.config.urls.data = url;
};

proto.getDataUrl = function () {
  return this.config.urls.data;
};

// url to get config layer
proto.getConfigUrl = function () {
  return this.config.urls.config;
};

proto.setConfigUrl = function (url) {
  this.config.urls.index = url;
};

proto.getEditor = function () {
  return this._editor;
};

proto.isStarted = function () {
  return this.getEditor().isStarted();
};

proto.setEditor = function (editor) {
  this._editor = editor;
};

proto.getFeaturesStore = function () {
  return this._featuresstore;
};

proto.setFeaturesStore = function (featuresstore) {
  this._featuresstore = featuresstore;
};

proto.setSource = function (source) {
  this.setFeaturesStore(source);
};

proto.getSource = function () {
  return this._featuresstore;
};

// get editing style
proto.getEditingStyle = function () {
  return this.config.editing.style;
};

proto._setFeatures = function (features) {
  this._featuresstore.setFeatures(features);
};

proto.addFeatures = function (features) {
  var _this4 = this;

  features.forEach(function (feature) {
    return _this4.addFeature(feature);
  });
};

proto._addFeature = function (feature) {
  this._featuresstore.addFeature(feature);
};

proto._deleteFeature = function (feature) {
  return feature.getId();
};

proto._updateFeature = function (feature) {};

proto._clearFeatures = function () {
  this._featuresstore.clearFeatures();
};

proto.addLockIds = function (lockIds) {
  this._featuresstore.addLockIds(lockIds);
};

proto.setFieldsWithValues = function (feature, fields) {
  var createAttributesFromFields = function createAttributesFromFields(fields) {
    var attributes = {};
    fields.forEach(function (field) {
      if (field.type === 'child') {
        attributes[field.name] = createAttributesFromFields(field.fields);
      } else if (field.value === 'null') {
        field.value = null;
      }
      attributes[field.name] = field.value;
    });
    return attributes;
  };
  var attributes = createAttributesFromFields(fields);
  feature.setProperties(attributes);
  return attributes;
};

proto.getFieldsWithValues = function (obj) {
  var _this5 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var exclude = options.exclude || [];
  var fields = JSON.parse(JSON.stringify(this.getEditingFields()));
  var feature = void 0;
  if (obj instanceof Feature) feature = obj;else if (obj instanceof ol.Feature) feature = new Feature({
    feature: obj
  });else feature = obj && this.getFeatureById(obj);
  if (feature) {
    var attributes = feature.getProperties();
    fields = fields.filter(function (field) {
      return exclude.indexOf(field.name) === -1;
    });
    fields.forEach(function (field) {
      field.value = attributes[field.name];
      if (field.type !== 'child' && field.input.type === 'select_autocomplete' && !field.input.options.usecompleter) {
        var _configField = _this5.getEditingFields().find(function (_field) {
          return _field.name === field.name;
        });
        var _options = _configField.input.options;
        field.input.options.loading = _options.loading;
        field.input.options.values = _options.values;
      }
      // for editing purpose
      if (field.validate === undefined) field.validate = {};
      field.forceNull = false;
      field.validate.valid = true;
      field.validate._valid = true; //useful to get previous value in certain case
      field.validate.unique = true;
      field.validate.required = field.validate.required === undefined ? false : field.validate.required;
      field.validate.mutually_valid = true;
      field.validate.empty = !field.validate.required;
      field.validate.message = null;
      // end editing purpose
    });
  }
  return fields;
};

proto.createNewFeature = function () {
  var feature = new ol.Feature();
  var properties = {};
  this.getEditingFields().forEach(function (field) {
    return properties[field.name] = null;
  });
  feature.setProperties(properties);
  feature = new Feature({
    feature: feature
  });
  feature.setNew();
  return feature;
};

module.exports = TableLayer;

},{"./features/feature":434,"./features/featuresstore":435,"./layer":443,"constant":399,"core/catalog/cataloglayersstoresregistry":403,"core/editing/editor":410,"core/project/projectsregistry":478,"core/utils/utils":485}],465:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    mixin = _require.mixin;

var Layer = require('./layer');
var TableLayer = require('./tablelayer');
var GeoLayerMixin = require('./geolayermixin');
var VectoMapLayer = require('./map/vectorlayer');

function VectorLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments[1];

  base(this, config, options);
  this._mapLayer = null; // later tah will be added to map
  this.type = Layer.LayerTypes.VECTOR;
  // need a ol layer for add to map
  this.setup(config, options);
  this.onafter('setColor', function (color) {});
}

inherit(VectorLayer, TableLayer);

mixin(VectorLayer, GeoLayerMixin);

var proto = VectorLayer.prototype;

proto.getEditingLayer = function () {
  return this.getMapLayer().getOLLayer();
};

proto.resetEditingSource = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.getMapLayer().resetSource(features);
};

proto._setOtherConfigParameters = function (config) {
  this.config.editing.geometrytype = config.geometrytype;
};

proto.getEditingGeometryType = function () {
  return this.config.editing.geometrytype;
};

proto.getMapLayer = function () {
  if (this._mapLayer) return this._mapLayer;
  var id = this.getId();
  var geometryType = this.getGeometryType();
  var color = this.getColor();
  var style = this.isEditingLayer() ? this.getEditingStyle() : this.getCustomStyle();
  var provider = this.getProvider('data');
  this._mapLayer = new VectoMapLayer({
    id: id,
    geometryType: geometryType,
    color: color,
    style: style,
    provider: provider,
    features: this._editor && this._editor.getEditingSource().getFeaturesCollection()
  });
  return this._mapLayer;
};

module.exports = VectorLayer;

},{"./geolayermixin":441,"./layer":443,"./map/vectorlayer":453,"./tablelayer":464,"core/utils/utils":485}],466:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var LayersStoresRegistry = require('core/layers/layersstoresregistry');

function MapLayersStoresRegistry() {
  base(this);
}

inherit(MapLayersStoresRegistry, LayersStoresRegistry);

module.exports = new MapLayersStoresRegistry();

},{"core/layers/layersstoresregistry":446,"core/utils//utils":485,"core/utils/utils":485}],467:[function(require,module,exports){
var Parsers = {
  vector: require('./vector/parser'),
  table: require('./table/parser')
};

module.exports = Parsers;

},{"./table/parser":468,"./vector/parser":469}],468:[function(require,module,exports){
var Feature = require('core/layers/features/feature');
var TableParser = function TableParser() {
  this.get = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var type = options.type;
    var parser = void 0;
    switch (type) {
      case 'json':
        parser = this._parserJSON.bind(this);
        break;
      default:
        parser = this._parserJSON.bind(this);
    }
    return parser;
  };

  this._parserJSON = function () {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _data$features = data.features,
        features = _data$features === undefined ? [] : _data$features;

    return features.map(function (_feature) {
      var id = _feature.id,
          properties = _feature.properties;

      var feature = new Feature();
      feature.setProperties(properties);
      feature.setId(id);
      return feature;
    });
  };
};

module.exports = new TableParser();

},{"core/layers/features/feature":434}],469:[function(require,module,exports){
var VectorParser = function VectorParser() {
  // return the right parser for the request
  this.get = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var type = options.type;
    var parser = void 0;
    switch (type) {
      case 'json':
        parser = this._parseLayerGeoJSON;
        break;
      case 'gml':
        parser = this._parseLayermsGMLOutput;
        break;
      default:
        parser = this._parseLayerGeoJSON;
    }
    return parser;
  };
  this._parseLayermsGMLOutput = function (data) {
    var layers = this._layer.getQueryLayerOrigName();
    var parser = new ol.format.WMSGetFeatureInfo({
      layers: layers
    });
    return parser.readFeatures(data);
  };

  this._parseLayerGeoJSON = function (data, options) {
    var crs = options.crs,
        mapCrs = options.mapCrs;

    var geojson = new ol.format.GeoJSON({
      //defaultDataProjection: crs, //ol vs4.5
      dataProjection: crs,
      featureProjection: mapCrs || crs,
      geometryName: "geometry"
    });
    return geojson.readFeatures(data);
  };
};

module.exports = new VectorParser();

},{}],470:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');
var ComponentsFactory = require('gui/componentsfactory');
var ProjectsRegistry = require('core/project/projectsregistry');
var PluginsRegistry = require('./pluginsregistry');
var TIMEOUT = 10000;

var Plugin = function Plugin() {
  var _this = this;

  base(this);
  this.name = '(no name)';
  this.config = null;
  this.service = null;
  this.dependencies = [];
  this._api = {
    getConfig: function getConfig() {
      return _this.config;
    }
  };
  this._hook = null;
  this._ready = false;
  this._services = {
    'search': GUI.getComponent('search').getService(),
    'tools': GUI.getComponent('tools').getService()
  };
  // timeout to remove loading plugin after timeout
  this._timeout = setTimeout(function () {
    PluginsRegistry.removeLoadingPlugin(_this.name, _this._ready);
  }, TIMEOUT);
};

inherit(Plugin, G3WObject);

var proto = Plugin.prototype;

proto.setDependencies = function (dependencies) {
  this.dependencies = dependencies;
};

proto.addDependency = function (dependency) {
  this.dependencies.push(dependency);
};

//API Plugin
proto.getApi = function () {
  return this._api;
};

proto.setApi = function () {
  var api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  //add a common method to get plufin configuration
  api.getConfig = this._api.getConfig;
  this._api = api;
};

proto.setReady = function (bool) {
  var _this2 = this;

  this._ready = bool;
  this.emit('set-ready', bool, this.name);
  setTimeout(function () {
    clearTimeout(_this2._timeout);
    PluginsRegistry.removeLoadingPlugin(_this2.name, _this2._ready);
  });
};

proto.isReady = function () {
  var _this3 = this;

  return new Promise(function (resolve, reject) {
    if (_this3._ready) resolve(_this3._ready);else _this3.once('set-ready', function (bool, name) {
      _this3._ready = bool;
      resolve(_this3._ready);
    });
  });
};

//return plugin service
proto.getService = function () {
  return this.service;
};

//set plugin service
proto.setService = function (service) {
  this.service = service;
  service.setPlugin(this);
};

proto.getName = function () {
  return this.name;
};

proto.setName = function (name) {
  this.name = name;
};

//get cplugin configuration
proto.getConfig = function (name) {
  name = name || this.name;
  return PluginsRegistry.getPluginConfig(name);
};

proto.setConfig = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = config;
};

//check if plugin is compatible with current project
proto.isCurrentProjectCompatible = function (projectId) {
  var project = ProjectsRegistry.getCurrentProject();
  return projectId === project.getGid();
};

proto.getProject = function () {
  return ProjectsRegistry.getCurrentProject();
};

//register the plugin if compatible
proto.registerPlugin = function (projectId) {
  var iscompatible = this.isCurrentProjectCompatible(projectId);
  iscompatible && PluginsRegistry.registerPlugin(this);
  return iscompatible;
};

proto.setupGui = function () {};

//proto.getDependencyPluginsObject

// method to get dependencies plugin
proto.getDependencyPlugins = function (pluginsName) {
  var _this4 = this;

  this.dependencies = pluginsName || this.dependencies;
  var pluginPromises = this.dependencies.map(function (pluginName) {
    return _this4.getDependencyPlugin(pluginName);
  });
  return Promise.all(pluginPromises);
};

// create to not replace above plugin method used by non changed old  plugin
proto.getDependencyPluginsObject = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(pluginsName) {
    var pluginsApiObject, promises;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pluginsApiObject = {};
            _context.next = 3;
            return this.getDependencyPlugins(pluginsName);

          case 3:
            promises = _context.sent;

            this.dependencies.forEach(function (pluginName, index) {
              return pluginsApiObject[pluginName] = promises[index];
            });
            return _context.abrupt('return', pluginsApiObject);

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x3) {
    return _ref.apply(this, arguments);
  };
}();

// method to get plugin dependency
proto.getDependencyPlugin = function (pluginName) {
  if (!PluginsRegistry.isTherePlugin(pluginName)) return Promise.reject({ error: 'no plugin' });
  return new Promise(function (resolve, reject) {
    var plugin = PluginsRegistry.getPlugin(pluginName);
    plugin && plugin.isReady().then(function () {
      return resolve(plugin.getApi());
    }) || PluginsRegistry.onafter('registerPlugin', function (plugin) {
      plugin.name === pluginName && plugin.isReady().then(function () {
        resolve(plugin.getApi());
      });
    });
  });
};

proto.setHookLoading = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$hook = _ref2.hook,
      hook = _ref2$hook === undefined ? "tools" : _ref2$hook,
      _ref2$loading = _ref2.loading,
      loading = _ref2$loading === undefined ? false : _ref2$loading;

  var service = this._services[hook];
  service.setLoading(loading);
};

proto.getHookService = function () {
  var hook = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "tools";

  return this._services[hook];
};

proto.addToolGroup = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$hook = _ref3.hook,
      hook = _ref3$hook === undefined ? "tools" : _ref3$hook,
      order = _ref3.position,
      group = _ref3.title;

  var service = this.getHookService(hook);
  service.addToolGroup(order, group);
};

proto.removeToolGroup = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      hook = _ref4.hook,
      group = _ref4.group;

  var title = group.title;

  var service = this.getHookService(hook);
  service.removeToolGroup(title);
};

proto.addTools = function () {
  var _this5 = this;

  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref5$hook = _ref5.hook,
      hook = _ref5$hook === undefined ? "tools" : _ref5$hook,
      action = _ref5.action,
      html = _ref5.html,
      _ref5$offline = _ref5.offline,
      offline = _ref5$offline === undefined ? true : _ref5$offline,
      icon = _ref5.icon,
      name = _ref5.name,
      type = _ref5.type,
      _ref5$options = _ref5.options,
      options = _ref5$options === undefined ? {} : _ref5$options,
      _ref5$loading = _ref5.loading,
      loading = _ref5$loading === undefined ? false : _ref5$loading,
      _ref5$disabled = _ref5.disabled,
      disabled = _ref5$disabled === undefined ? false : _ref5$disabled,
      _ref5$state = _ref5.state,
      state = _ref5$state === undefined ? { type: null, message: null } : _ref5$state;

  var groupTools = arguments[1];

  if (!action && !type) {
    this.removeToolGroup({ hook: hook, group: groupTools });
    return [];
  }
  this._hook = hook;
  var service = this._services[hook];
  var configs = this.config.configs || [this.config];
  var tools = configs.map(function (config) {
    return {
      icon: icon,
      type: type,
      name: config.name || name,
      html: html,
      loading: loading,
      disabled: disabled,
      options: options,
      offline: offline,
      action: action && action.bind(_this5, config),
      state: state
    };
  });
  service.addTools(tools, groupTools);
  return tools;
};

proto.setToolState = function () {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref6.id,
      _ref6$state = _ref6.state,
      state = _ref6$state === undefined ? { type: null, message: null } : _ref6$state;

  var service = this._services[this._hook];
  service.setToolState({ id: id, state: state });
};

proto.removeTools = function () {
  var service = this._services[this._hook];
  service.removeTools();
};

/**
 * Method to create sibebar item component
 */
proto.createSideBarComponent = function (vueComponentObject) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var id = options.id,
      title = options.title,
      _options$open = options.open,
      open = _options$open === undefined ? false : _options$open,
      _options$collapsible = options.collapsible,
      collapsible = _options$collapsible === undefined ? true : _options$collapsible,
      _options$mobile = options.mobile,
      mobile = _options$mobile === undefined ? true : _options$mobile,
      _options$iconConfig = options.iconConfig,
      iconConfig = _options$iconConfig === undefined ? {} : _options$iconConfig,
      _options$events = options.events,
      events = _options$events === undefined ? {} : _options$events,
      _options$sidebarOptio = options.sidebarOptions,
      sidebarOptions = _options$sidebarOptio === undefined ? { position: 1 } : _options$sidebarOptio;


  var PluginSiderBarComponent = ComponentsFactory.build({
    vueComponentObject: vueComponentObject
  }, {
    id: id,
    title: title,
    open: open,
    collapsible: collapsible,
    iconColor: iconConfig.color && iconConfig.color,
    icon: iconConfig.icon && GUI.getFontClass(iconConfig.icon),
    mobile: mobile,
    events: events
  });
  GUI.addComponent(PluginSiderBarComponent, 'sidebar', sidebarOptions);
  this.once('unload', function () {
    return GUI.removeComponent(id, 'sidebar', sidebarOptions);
  });
};

// unload (case change map)
proto.unload = function () {
  this.service && this.service.clearAllEvents();
  this.emit('unload');
  //console.log('UNLOAD can be overwrite by plugin');
};

// load plugin
proto.load = function () {
  //console.log('LOAD  need to be overwrite by plugin');
};

module.exports = Plugin;

},{"./pluginsregistry":472,"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/componentsfactory":552,"gui/gui":575}],471:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var ApplicationService = require('core/applicationservice');
var G3WObject = require('core/g3wobject');

function PluginService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.plugin;
  this._api = {
    own: null,
    dependencies: {}
  };
  this._pluginEvents = {};
  this._appEvents = [];
  this.init = function (config) {
    this.config = config;
  };
}

inherit(PluginService, G3WObject);

var proto = PluginService.prototype;

// set owner plugin of the service
proto.setPlugin = function (plugin) {
  this.plugin = plugin;
};

// return the instance of the plugin owner of the service
proto.getPlugin = function () {
  return this.plugin;
};

proto.isIframe = function () {
  return ApplicationService.isIframe();
};

proto.getGid = function () {
  var gid = this.config.gid;

  return gid && gid.split(':')[1];
};

proto.getConfig = function () {
  return this.config;
};

proto.setConfig = function (config) {
  this.config = config;
};

proto.setApi = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      dependency = _ref.dependency,
      api = _ref.api;

  if (!dependency) this._api.own = api;else this._api.dependencies[dependency] = api;
};

proto.getApi = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      dependency = _ref2.dependency;

  return dependency && this._api.dependencies[dependency] || this._api.own;
};

proto.initEvents = function () {
  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  for (var i in events) {
    var name = events[i];
    this._pluginEvents[name] = {};
  }
};

proto.registerWindowEvent = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      evt = _ref3.evt,
      cb = _ref3.cb;

  ApplicationService.registerWindowEvent({
    evt: evt,
    cb: cb
  });
};

proto.unregisterWindowEvent = function (_ref4) {
  var evt = _ref4.evt,
      cb = _ref4.cb;

  ApplicationService.unregisterWindowEvent({
    evt: evt,
    cb: cb
  });
};

proto.subscribeEvent = function (_ref5) {
  var name = _ref5.name,
      _ref5$once = _ref5.once,
      once = _ref5$once === undefined ? false : _ref5$once,
      owner = _ref5.owner,
      listener = _ref5.listener;

  this._pluginEvents[name] = this._pluginEvents[name] ? this._pluginEvents[name] : {};
  this._pluginEvents[name][owner] = listener;
  once ? this.once(name, listener) : this.on(name, listener);
};

proto.triggerEvent = function (_ref6) {
  var name = _ref6.name,
      _ref6$params = _ref6.params,
      params = _ref6$params === undefined ? {} : _ref6$params;

  this.emit(name, params);
};

proto.unsubscribeEvent = function (_ref7) {
  var name = _ref7.name,
      owner = _ref7.owner;

  var listener = this._pluginEvents[name][owner];
  this.removeEvent(name, listener);
  delete this._pluginEvents[name][owner];
};

proto.unsubscribeAllEvents = function () {
  for (var name in this._pluginEvents) {
    this.removeEvent(name);
    delete this._pluginEvents[name];
  }
};

proto.clearAllEvents = function () {
  this.unsubscribeAllEvents();
  this._pluginEvents = null;
};

// to owerwrite if we need some condition to load or not the plugin
proto.loadPlugin = function () {
  return true;
};

//Called when plugin is removed to clear events and memory
proto.clear = function () {
  // to overwrite
};

module.exports = PluginService;

},{"core/applicationservice":401,"core/g3wobject":415,"core/utils/utils":485}],472:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var OTHERPLUGINS = ['law'];

function PluginsRegistry() {
  this.config = null;
  this._plugins = {};
  this._configurationPlugins = [];
  this.pluginsConfigs = {};
  this._loadedPluginUrls = [];
  this.setters = {
    //setters to register plugin
    registerPlugin: function registerPlugin(plugin) {
      if (!this._plugins[plugin.name]) this._plugins[plugin.name] = plugin;
    }
  };
  base(this);

  // initialize plugin
  this.init = function () {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return new Promise(function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve, reject) {
        var plugins;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this.pluginsBaseUrl = options.pluginsBaseUrl;
                // plugin configurations
                _this.pluginsConfigs = options.pluginsConfigs;
                Object.keys(_this.pluginsConfigs).forEach(function (pluginName) {
                  return _this._configurationPlugins.push(pluginName);
                });
                _this.addLoadingPlugins();
                // plugins that aren't in configuration server but in project
                _this.otherPluginsConfig = options.otherPluginsConfig;
                _this.setOtherPlugins();
                _this.setDependencyPluginConfig();
                _context.prev = 7;
                _context.next = 10;
                return _this._loadPlugins();

              case 10:
                plugins = _context.sent;

                resolve(plugins);
                _context.next = 17;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context['catch'](7);

                reject(_context.t0);

              case 17:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this, [[7, 14]]);
      }));

      return function (_x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }());
  };

  this.addLoadingPlugins = function () {
    var ApplicationService = require('core/applicationservice');
    Object.keys(this.pluginsConfigs).forEach(function (plugin) {
      ApplicationService.loadingPlugin(plugin);
    });
  };

  this.removeLoadingPlugin = function (plugin, ready) {
    var ApplicationService = require('core/applicationservice');
    ApplicationService.loadedPlugin(plugin, ready);
  };

  this._loadPlugins = function () {
    var _this2 = this;

    var pluginLoadPromises = Object.entries(this.pluginsConfigs).map(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          name = _ref3[0],
          pluginConfig = _ref3[1];

      return _this2._setup(name, pluginConfig);
    });
    return Promise.all(pluginLoadPromises);
  };

  this.setDependencyPluginConfig = function () {
    var _this3 = this;

    var _loop = function _loop() {
      var dependecyPluginConfig = _this3.pluginsConfigs[pluginName].plugins;
      dependecyPluginConfig && Object.keys(dependecyPluginConfig).forEach(function (pluginName) {
        _this3.pluginsConfigs[pluginName] = _extends({}, _this3.pluginsConfigs[pluginName], dependecyPluginConfig[pluginName]);
      });
    };

    for (pluginName in this.pluginsConfigs) {
      _loop();
    }
  };

  this.setOtherPlugins = function () {
    var law = OTHERPLUGINS[0];
    if (this.otherPluginsConfig && this.otherPluginsConfig[law] && this.otherPluginsConfig[law].length) {
      // law plugin
      this.pluginsConfigs[law] = this.otherPluginsConfig[law];
      this.pluginsConfigs[law].gid = this.otherPluginsConfig.gid;
    } else delete this.pluginsConfigs[law];
  };

  // reaload plugin in case of change map
  this.reloadPlugins = function (initConfig, project) {
    var _this4 = this;

    return new Promise(function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resolve, reject) {
        var scripts, plugins, _loop2, _pluginName, _plugins;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                scripts = $('script');
                plugins = _this4.getPlugins();

                _loop2 = function _loop2(_pluginName) {
                  var plugin = plugins[_pluginName];
                  // unload plugin e remove from DOM
                  plugin.unload();
                  delete _this4._plugins[_pluginName];
                  scripts.each(function (index, scr) {
                    _this4._loadedPluginUrls.forEach(function (pluginUrl, idx) {
                      if (scr.getAttribute('src') === pluginUrl && pluginUrl.indexOf(_pluginName) !== -1) {
                        scr.parentNode.removeChild(scr);
                        _this4._loadedPluginUrls.splice(idx, 1);
                        return false;
                      }
                    });
                  });
                };

                for (_pluginName in plugins) {
                  _loop2(_pluginName);
                }
                _this4._loadedPluginUrls = [];
                //setup plugins
                _this4.otherPluginsConfig = project.getState();
                _this4.setPluginsConfig(initConfig.group.plugins);
                _this4.addLoadingPlugins();
                _this4.setOtherPlugins();
                _context2.prev = 9;
                _context2.next = 12;
                return _this4._loadPlugins();

              case 12:
                _plugins = _context2.sent;

                resolve(_plugins);
                _context2.next = 19;
                break;

              case 16:
                _context2.prev = 16;
                _context2.t0 = _context2['catch'](9);

                reject(_context2.t0);

              case 19:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this4, [[9, 16]]);
      }));

      return function (_x4, _x5) {
        return _ref4.apply(this, arguments);
      };
    }());
  };

  this.setPluginsConfig = function (config) {
    this.pluginsConfigs = config;
  };

  this._loadScript = function (url, name) {
    return $script(url, name);
  };

  //load plugin script
  this._setup = function (name, pluginConfig) {
    var _this5 = this;

    return new Promise(function (resolve, reject) {
      if (!_.isNull(pluginConfig)) {
        var baseUrl = _this5.pluginsBaseUrl + name;
        var scriptUrl = baseUrl + '/js/plugin.js?' + Date.now();
        pluginConfig.baseUrl = _this5.pluginsBaseUrl;
        _this5._loadScript(scriptUrl, name).ready(name, function () {
          _this5._loadedPluginUrls.push(scriptUrl);
          resolve();
        });
      } else resolve();
    });
  };

  this.getPluginConfig = function (pluginName) {
    return this.pluginsConfigs[pluginName];
  };

  this.getPlugins = function () {
    return this._plugins;
  };

  this.getPlugin = function (pluginName) {
    return this._plugins[pluginName];
  };

  // method to check if a plugin is in confiuration and will be added to apllication
  this.isPluginInConfiguration = function (pluginName) {
    return this._configurationPlugins.indexOf(pluginName) !== -1;
  };

  this.isTherePlugin = function (pluginName) {
    return this.pluginsConfigs[pluginName];
  };
}

inherit(PluginsRegistry, G3WObject);

module.exports = new PluginsRegistry();

},{"core/applicationservice":401,"core/g3wobject":415,"core/utils/utils":485}],473:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var PrinterProviderFactory = require('./providers/printerproviderfactory');

function PrintService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  var type = options.type || 'QGIS';
  this.provider = PrinterProviderFactory.get(type);
}

inherit(PrintService, G3WObject);

var proto = PrintService.prototype;

proto.print = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";

  return this.provider.print(options, method);
};

proto.printAtlas = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";

  return this.provider.printAtlas(options, method);
};

module.exports = PrintService;

},{"./providers/printerproviderfactory":475,"core/g3wobject":415,"core/utils/utils":485}],474:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

function PrinterProvider() {
  base(this);
}

inherit(PrinterProvider, G3WObject);

var proto = PrinterProvider.prototype;

proto.print = function () {
  console.log('overwrite');
};

proto.getPrintUrl = function () {
  console.log('overwrite');
};

proto.print = function () {
  console.log('overwrite');
};

module.exports = PrinterProvider;

},{"core/g3wobject":415,"core/utils/utils":485}],475:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

var PrinterQGISProvider = require('./qgis/printerQGISProvider');

var Providers = {
  'QGIS': PrinterQGISProvider
};

function PrinterProviderFactory() {
  this.get = function () {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'QGIS';

    return new Providers[type]();
  };
  base(this);
}

inherit(PrinterProviderFactory, G3WObject);

module.exports = new PrinterProviderFactory();

},{"./qgis/printerQGISProvider":476,"core/g3wobject":415,"core/utils/utils":485}],476:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _applicationstate = require('../../../applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var convertObjectToUrlParams = require('core/utils/utils').convertObjectToUrlParams;
var PrintProvider = require('../printerprovider');
var ProjectsRegistry = require('core/project/projectsregistry');
var OUTPUT_FORMATS = {
  pdf: 'application/pdf',
  jpg: 'image/jpeg'
};

var COMMON_REQUEST_PARAMETERS = {
  SERVICE: 'WMS',
  VERSION: '1.3.0'
};

function PrinterQGISProvider() {
  var _this = this;

  this._currentLayerStore = ProjectsRegistry.getCurrentProject().getLayersStore();
  ProjectsRegistry.onbefore('setCurrentProject', function (project) {
    _this._currentLayerStore = project.getLayersStore();
  });
  base(this);
}

inherit(PrinterQGISProvider, PrintProvider);

var proto = PrinterQGISProvider.prototype;

proto.POST = function (_ref) {
  var url = _ref.url,
      params = _ref.params,
      mime_type = _ref.mime_type;

  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', url, true);
    xhr.responseType = 'blob';
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    xhr.onload = function () {
      if (xhr.status === 200) {
        try {
          window.URL = window.URL || window.webkitURL;
          var _url = window.URL.createObjectURL(xhr.response);
          resolve({
            url: _url,
            layers: true,
            mime_type: mime_type
          });
        } catch (e) {
          reject(e);
        }
      } else if (xhr.status === 500) {
        reject();
      }
    };
    xhr.onerror = function () {
      reject();
    };
    xhr.send(convertObjectToUrlParams(params));
  });
};

proto.GET = function (_ref2) {
  var url = _ref2.url,
      params = _ref2.params,
      mime_type = _ref2.mime_type;

  return new Promise(function (resolve, reject) {
    url = url + '?' + convertObjectToUrlParams(params);
    resolve({
      url: url,
      layers: true,
      mime_type: mime_type
    });
  });
};

proto._getAtlasParamsFromOptions = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var field = options.field,
      values = options.values,
      template = options.template,
      _options$download = options.download,
      download = _options$download === undefined ? false : _options$download;

  var multiValues = values.length > 1;
  var EXPRESSION = '' + field + (multiValues ? ' IN (' : '=') + values.map(function (value) {
    return '\'' + value + '\'';
  }).join() + (multiValues ? ')' : '');
  var params = _extends({}, COMMON_REQUEST_PARAMETERS, {
    REQUEST: 'GetPrintAtlas',
    EXP_FILTER: EXPRESSION,
    TEMPLATE: template,
    filtertoken: _applicationstate2.default.tokens.filtertoken
  });
  if (download) params.DOWNLOAD = 1;
  return params;
};

proto._getParamsFromOptions = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var rotation = options.rotation,
      dpi = options.dpi,
      format = options.format,
      crs = options.crs,
      template = options.template,
      _options$maps = options.maps,
      maps = _options$maps === undefined ? [] : _options$maps;

  layers = layers.map(function (layer) {
    return layer.getPrintLayerName();
  });
  var params = _extends({}, COMMON_REQUEST_PARAMETERS, {
    REQUEST: 'GetPrint',
    TEMPLATE: template,
    DPI: dpi,
    FORMAT: format,
    CRS: crs,
    LAYERS: layers.join(),
    filtertoken: _applicationstate2.default.tokens.filtertoken
  });

  maps.forEach(function (_ref3) {
    var name = _ref3.name,
        scale = _ref3.scale,
        extent = _ref3.extent;

    params[name + ':SCALE'] = scale;
    params[name + ':EXTENT'] = extent;
    params[name + ':ROTATION'] = rotation;
  });
  return params;
};

proto.getUrl = function () {
  return this._currentLayerStore.getWmsUrl();
};

proto.printAtlas = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

  var url = this.getUrl();
  var params = this._getAtlasParamsFromOptions(options);
  return this[method]({
    url: url,
    params: params,
    mime_type: OUTPUT_FORMATS.pdf
  });
};

proto.print = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";

  var url = this.getUrl();
  // reverse of layer because the order is important
  var layers = this._currentLayerStore.getLayers({
    PRINTABLE: {
      scale: options.scale
    },
    SERVERTYPE: 'QGIS'
  }).reverse();
  if (layers.length) {
    options.crs = this._currentLayerStore.getProjection().getCode();
    var params = this._getParamsFromOptions(layers, options);
    var mime_type = OUTPUT_FORMATS[params.FORMAT];
    return this[method]({
      url: url,
      params: params,
      mime_type: mime_type
    });
  } else return Promise.resolve({ layers: false });
};

module.exports = PrinterQGISProvider;

/*
 http://localhost/fcgi-bin/qgis_mapserver/qgis_mapserv.fcgi?MAP=/home/marco/geodaten/projekte/composertest.qgs&SERVICE=WMS&VERSION=1.3.0
 &REQUEST=GetPrint&TEMPLATE=Composer 1&
 map0:extent=693457.466131,227122.338236,700476.845177,230609.807051&
 BBOX=693457.466131,227122.338236,700476.845177,230609.807051&
 CRS=EPSG:21781&WIDTH=1467&HEIGHT=729&LAYERS=layer0,layer1&
 STYLES=,&FORMAT=pdf&DPI=300&TRANSPARENT=true

 In detail, the following parameters can be used to set properties for composer maps:

 <mapname>:EXTENT=<xmin,ymin,xmax, ymax> //mandatory
 <mapname>:ROTATION=<double> //optional, defaults to 0
 <mapname>:SCALE=<double> //optional. Forces scale denominator as server and client may have different scale calculations
 <mapname>:LAYERS=<comma separated list with layer names> //optional. Defaults to all layer in the WMS request
 <mapname>:STYLES=<comma separated list with style names> //optional
 <mapname>:GRID_INTERVAL_X=<double> //set the grid interval in x-direction for composer grids
 <mapname>:GRID_INTERVAL_Y=<double> //set the grid interval in x-direction for composer grids
 */

},{"../../../applicationstate":402,"../printerprovider":474,"core/project/projectsregistry":478,"core/utils/utils":485}],477:[function(require,module,exports){
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('core/utils//utils'),
    base = _require.base,
    inherit = _require.inherit;

var _require2 = require('core/utils/geo'),
    crsToCrsObject = _require2.crsToCrsObject;

var G3WObject = require('core/g3wobject');
var LayerFactory = require('core/layers/layerfactory');
var LayersStore = require('core/layers/layersstore');
var Projections = require('g3w-ol/src/projection/projections');
function Project() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /* structure 'project' object
  {
    id,
    type,
    gid,
    name,
    crs,
    extent,
    initextent,
    layers,
    layerstree,
    overviewprojectgid,
    baselayers,
    initbaselayer,
    filtertoken,
    context_base_legend
    ows_method <POST or GET>
    wms_use_layer_ids: <TRUE OR FALSE>
    search_endpoint : 'ows', 'api'
    wps: [] // array of wps service
  }
  */
  // for future implementation catalog tab actived
  config.catalog_tab = config.toc_tab_default || config._catalog_tab || 'layers'; // values : layers, baselayers, legend
  config.ows_method = config.ows_method || 'GET';
  this.state = config;
  // process layers
  this._processLayers();
  // set the project projection to object crs
  this.state.crs = crsToCrsObject(this.state.crs);
  this._projection = Projections.get(this.state.crs);
  // build a layerstore of the project
  this._layersStore = this._buildLayersStore();
  this.setters = {
    setBaseLayer: function setBaseLayer(id) {
      var _this = this;

      this.state.baselayers.forEach(function (baseLayer) {
        _this._layersStore.getLayerById(baseLayer.id).setVisible(baseLayer.id === id);
        baseLayer.visible = baseLayer.id === id;
      });
    }
  };
  this.setSearchEndPoint();
  base(this);
}

inherit(Project, G3WObject);

var proto = Project.prototype;

//get search end point value (ows or api)
proto.getSearchEndPoint = function () {
  return this.state.search_endpoint;
};

proto.setSearchEndPoint = function () {
  var _state = this.state,
      search_endpoint = _state.search_endpoint,
      _state$search = _state.search,
      search = _state$search === undefined ? [] : _state$search;

  search.forEach(function (search) {
    return search.search_endpoint = search_endpoint;
  });
};

proto.getAliasUrl = function () {
  return this.state.aliasUrl;
};

proto.getActiveCatalogTab = function () {
  return this.state.catalog_tab;
};

proto.setActiveCatalogTab = function () {
  var tab = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'layers';

  this.state.catalog_tab = tab;
};

proto.isWmsUseLayerIds = function () {
  return this.state.wms_use_layer_ids;
};

proto.getContextBaseLegend = function () {
  return this.state.context_base_legend;
};

// check if multi
proto.getQueryFeatureCount = function () {
  return this.state.feature_count || 5;
};

proto.isQueryMultiLayers = function (mapcontrol) {
  return this.state.querymultilayers && this.state.querymultilayers.indexOf(mapcontrol) !== -1;
};

proto.getRelations = function () {
  return this.state.relations;
};

proto.getRelationById = function (relationId) {
  return this.state.relations.find(function (relation) {
    return relation.id === relationId;
  });
};

proto.getRelationsByLayerId = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref.layerId,
      type = _ref.type;

  return this.state.relations.filter(function (relation) {
    return relation.referencedLayer === layerId && (type ? relation.type === type : true);
  });
};

proto.getOwsMethod = function () {
  return this.state.ows_method;
};

// process layerstree and baselayers of the project
proto._processLayers = function () {
  var _this2 = this;

  //info useful for catalog
  var traverse = function traverse(tree) {
    var _loop = function _loop(i) {
      var layer = tree[i];
      var layer_name_originale = void 0;
      //check if layer (node) of folder
      if (layer.id !== undefined) {
        _this2.state.layers.forEach(function (_layer) {
          layer_name_originale = _layer.name;
          if (layer.id === _layer.id) {
            layer.name = _layer.name;
            _layer.wmsUrl = _this2.getWmsUrl();
            _layer.project = _this2;
            tree[i] = Object.assign(_layer, layer);
            return false;
          }
        });
      }
      if (Array.isArray(layer.nodes)) {
        //add title to tree
        layer.title = layer.name;
        traverse(layer.nodes);
      }
    };

    for (var i = 0; i < tree.length; i++) {
      _loop(i);
    }
  };
  // call trasverse function to
  traverse(this.state.layerstree);
  var ApplicationService = require('core/applicationservice');
  var baseLayerId = ApplicationService.getBaseLayerId();
  for (var i = 0; i < this.state.baselayers.length; i++) {
    var baseLayerConfig = this.state.baselayers[i];
    var baseLayerVisibleId = baseLayerId !== null ? baseLayerId : this.state.initbaselayer;
    var visible = baseLayerVisibleId && baseLayerConfig.id === baseLayerVisibleId || !!baseLayerConfig.fixed;
    baseLayerConfig.visible = visible;
    baseLayerConfig.baselayer = true;
  }
};

// build layersstore and create layersstree
proto._buildLayersStore = function () {
  var _this3 = this;

  // create a layersStore object
  var layersStore = new LayersStore();
  //check if we have owerview project
  var overviewprojectgid = this.state.overviewprojectgid ? this.state.overviewprojectgid.gid : null;
  layersStore.setOptions({
    id: this.state.gid,
    projection: this._projection,
    extent: this.state.extent,
    initextent: this.state.initextent,
    wmsUrl: this.state.WMSUrl,
    catalog: this.state.gid !== overviewprojectgid
  });

  // instance each layer ad area added to layersstore
  var layers = this.getLayers();
  layers.forEach(function (layerConfig) {
    //check and set crs in objectformat
    layerConfig.crs = crsToCrsObject(layerConfig.crs);
    // add projection
    layerConfig.projection = layerConfig.crs ? Projections.get(layerConfig.crs) : _this3._projection;
    //add ows_method
    layerConfig.ows_method = _this3.getOwsMethod();
    layerConfig.wms_use_layer_ids = _this3.state.wms_use_layer_ids;
    var layer = LayerFactory.build(layerConfig, {
      project: _this3
    });
    layer && layersStore.addLayer(layer);
  });
  // create layerstree from layerstore
  layersStore.createLayersTree(this.state.name, {
    layerstree: this.state.layerstree
  });
  return layersStore;
};

proto.getLayerById = function (layerId) {
  return this._layersStore.getLayerById(layerId);
};

proto.getLayers = function () {
  return [].concat(_toConsumableArray(this.state.layers), _toConsumableArray(this.state.baselayers));
};

proto.getBaseLayers = function () {
  return this.state.baselayers;
};

proto.getConfigLayers = function () {
  return this.state.layers;
};

proto.getThumbnail = function () {
  return this.state.thumbnail;
};

proto.getState = function () {
  return this.state;
};

proto.getPrint = function () {
  return this.state.print || [];
};

proto.getSearches = function () {
  return this.state.search || [];
};

proto.getVectorUrl = function () {
  return this.state.vectorurl;
};

proto.getId = function () {
  return this.state.id;
};

proto.getType = function () {
  return this.state.type;
};

proto.getGid = function () {
  return this.state.gid;
};

proto.getName = function () {
  return this.state.name;
};

proto.getOverviewProjectGid = function () {
  return this.state.overviewprojectgid ? this.state.overviewprojectgid.gid : null;
};

proto.getCrs = function () {
  return this._projection.getCode();
};

/*
* type: major, minor, patch
* */
proto.getQgisVersion = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref2.type;

  var index = ['major', 'minor', 'patch'].indexOf(type);
  return index === -1 ? this.state.qgis_version : +this.state.qgis_version.split('.')[index];
};

proto.getProjection = function () {
  return this._projection;
};

proto.getWmsUrl = function () {
  return this.state.WMSUrl;
};

proto.getInfoFormat = function () {
  return 'application/vnd.ogc.gml';
};

proto.getLayersStore = function () {
  return this._layersStore;
};

module.exports = Project;

},{"core/applicationservice":401,"core/g3wobject":415,"core/layers/layerfactory":444,"core/layers/layersstore":445,"core/utils//utils":485,"core/utils/geo":484,"g3w-ol/src/projection/projections":532}],478:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var Project = require('core/project/project');
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var MapLayersStoresRegistry = require('core/map/maplayersstoresregistry');

/* service
    setup: init method
    getLayersState: returnLayersState
    getLayersTree: retunr  array of layersTree from LayersState
*/

// Public interface
function ProjectsRegistry() {
  this.config = null;
  this.initialized = false;
  this.projectType = null;
  this.overviewproject;
  this.setters = {
    setCurrentProject: function setCurrentProject(project) {
      if (this.state.currentProject !== project) {
        CatalogLayersStoresRegistry.removeLayersStores();
        MapLayersStoresRegistry.removeLayersStores();
      }
      this.state.currentProject = project;
      this.state.qgis_version = project.getQgisVersion();
      this.setProjectType(project.state.type);
      var projectLayersStore = project.getLayersStore();
      //set in first position (catalog)
      CatalogLayersStoresRegistry.addLayersStore(projectLayersStore, 0);
      //set in first position (map)
      MapLayersStoresRegistry.addLayersStore(projectLayersStore, 0);
    }
  };

  this.state = {
    baseLayers: {},
    minScale: null,
    maxscale: null,
    currentProject: null,
    qgis_version: null
  };

  // (lazy loading)
  this._groupProjects = [];
  this._projectConfigs = {};

  base(this);
}

inherit(ProjectsRegistry, G3WObject);

var proto = ProjectsRegistry.prototype;

//Inizialize configuration for all project belong to group
proto.init = function () {
  var _this = this;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  //check if already initialized
  if (!this.initialized) {
    this.config = config;
    this.overviewproject = config.overviewproject;
    this.setupState();
    // get current configuration
    this.getProject(config.initproject).then(function (project) {
      // set current project
      _this.setCurrentProject(project);
      _this.initialized = true;
      d.resolve(project);
    }).fail(function (error) {
      return d.reject(error);
    });
  } else {
    var project = this.getCurrentProject();
    d.resolve(project);
  }
  return d.promise();
};

proto.clear = function () {
  this.config = null;
  this.initialized = false;
  this.projectType = null;
  this.overviewproject;
  this.initialized = false;
  this._groupProjects = [];
  this._projectConfigs = {};
  this.state = {
    baseLayers: {},
    minScale: null,
    maxscale: null,
    currentProject: null,
    qgis_version: null
  };
};

proto.setProjectType = function (projectType) {
  this.projectType = projectType;
};

proto.getConfig = function () {
  return this.config;
};

proto.getState = function () {
  return this.state;
};

proto.setupState = function () {
  this.state.baseLayers = this.config.baselayers;
  this.state.minScale = this.config.minscale;
  this.state.maxScale = this.config.maxscale;
  this.state.crs = this.config.crs;
  this.setProjects(this.config.projects);
};

proto.getProjectAliasUrl = function (gid) {
  var project = this.config.projects.find(function (project) {
    return project.gid === gid;
  });
  return project.aliasUrl;
};

proto.setProjectAliasUrl = function (_ref) {
  var gid = _ref.gid,
      url = _ref.url,
      host = _ref.host;

  var project = this.config.projects.find(function (project) {
    return project.gid === gid;
  });
  if (project) project.aliasUrl = project && '' + (host ? host : '') + url;
};

proto.getProjectType = function () {
  return this.projectType;
};

proto.getProjects = function () {
  return this._groupProjects;
};

proto.setProjects = function (projects) {
  var _this2 = this;

  this.clearProjects();
  projects.forEach(function (project) {
    _this2.state.qgis_version = project.qgis_version || _this2.state.qgis_version;
    project.aliasUrl = project.url || null;
    project.baselayers = _this2.config.baselayers;
    project.minscale = _this2.config.minscale;
    project.maxscale = _this2.config.maxscale;
    project.crs = _this2.config.crs;
    project.vectorurl = _this2.config.vectorurl;
    project.overviewprojectgid = _this2.overviewproject ? _this2.overviewproject.gid : null;
    _this2._groupProjects.push(project);
  });
};

proto.clearProjects = function () {
  this._groupProjects = [];
};

proto.getListableProjects = function () {
  var currentProjectId = this.getCurrentProject().getId();
  return _.sortBy(this.getProjects().filter(function (project) {
    if (!_.isNil(project.listable)) return project.listable;
    if (project.id === currentProjectId || project.overviewprojectgid && project.gid === project.overviewprojectgid) return false;
    return project;
  }), 'title');
};

proto.getCurrentProject = function () {
  return this.state.currentProject;
};

// method to get project configuration - added reload to force to get configuratn project from server
proto.getProject = function (projectGid) {
  var _this3 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { reload: false };
  var reload = options.reload;

  var d = $.Deferred();
  var pendingProject = this._groupProjects.find(function (project) {
    return project.gid === projectGid;
  });
  if (!pendingProject) {
    d.reject("Project doesn't exist");
    return d.promise();
  }
  var projectConfig = !reload && this._projectConfigs[projectGid];
  if (projectConfig) {
    var project = new Project(projectConfig);
    d.resolve(project);
  } else {
    this._getProjectFullConfig(pendingProject).then(function (projectFullConfig) {
      var projectConfig = _.merge(pendingProject, projectFullConfig);
      projectConfig.WMSUrl = _this3.config.getWmsUrl(projectConfig);
      // setupu project relations
      projectConfig.relations = _this3._setProjectRelations(projectConfig);
      _this3._projectConfigs[projectConfig.gid] = projectConfig;
      // instance of Project
      var project = new Project(projectConfig);
      // add to project
      d.resolve(project);
    }).fail(function (error) {
      return d.reject(error);
    });
  }
  return d.promise();
};

proto._setProjectRelations = function (projectConfig) {
  projectConfig.relations = projectConfig.relations ? projectConfig.relations : [];
  projectConfig.relations = projectConfig.relations.map(function (relation) {
    if (relation.type === "ONE") {
      projectConfig.layers.find(function (layer) {
        if (layer.id === relation.referencingLayer) {
          relation.name = layer.name;
          relation.origname = layer.origname;
          return true;
        }
      });
    }
    return relation;
  });
  return projectConfig.relations;
};

proto.getProjectConfigByGid = function (gid) {
  return this._groupProjects.find(function (project) {
    return project.gid === gid;
  });
};

proto.getProjectUrl = function (gid) {
  var projectConfig = this.getProjectConfigByGid(gid);
  var projecId = projectConfig.gid.split(':')[1];
  var type = projectConfig.type;
  var currentUrl = window.location.href;
  var paths = currentUrl.split('/');
  if (!paths[paths.length - 1]) {
    paths[paths.length - 2] = projecId;
    paths[paths.length - 3] = type;
  } else {
    paths[paths.length - 1] = projecId;
    paths[paths.length - 2] = type;
  }
  return paths.join('/');
};

// method to call server to get project configuration
proto._getProjectFullConfig = function (projectBaseConfig) {
  var d = $.Deferred();
  var url = this.config.getProjectConfigUrl(projectBaseConfig);
  $.get(url).done(function (projectFullConfig) {
    return d.resolve(projectFullConfig);
  }).fail(function (error) {
    return d.reject(error);
  });
  return d.promise();
};

module.exports = new ProjectsRegistry();

},{"core/catalog/cataloglayersstoresregistry":403,"core/g3wobject":415,"core/map/maplayersstoresregistry":466,"core/project/project":477,"core/utils/utils":485}],479:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function Relation() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var uniqueSuffix = Date.now();
  var id = config.id || 'id_' + uniqueSuffix;
  var name = config.name || 'name_' + uniqueSuffix;
  var origname = config.origname || 'origname_' + uniqueSuffix;
  this.state = {
    id: id,
    name: name,
    origname: origname,
    father: config.referencedLayer,
    child: config.referencingLayer,
    fatherField: config.fieldRef.referencedField,
    childField: config.fieldRef.referencingField,
    type: config.type
  };

  base(this);
}

inherit(Relation, G3WObject);

var proto = Relation.prototype;

proto.getId = function () {
  return this.state.id;
};

proto.setId = function (id) {
  this.state.id = id;
};

proto.getName = function () {
  return this.state.name;
};

proto.setName = function (name) {
  this.state.name = name;
};

proto.getTitle = function () {
  return this.state.title;
};

proto.setTitle = function (title) {
  return this.state.title = title;
};

proto.getChild = function () {
  return this.state.child;
};

proto.getFather = function () {
  return this.state.father;
};

proto.getState = function () {
  return this.state;
};

proto.getType = function () {
  return this.state.type;
};

proto.getFields = function () {
  return {
    father: this.state.fatherField,
    child: this.state.childField
  };
};

proto.getFatherField = function () {
  return this.state.fatherField;
};

proto.getChildField = function () {
  return this.state.childField;
};

module.exports = Relation;

},{"core/g3wobject":415,"core/utils/utils":485}],480:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var Relation = require('./relation');

// class Relations
function Relations() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var relations = options.relations;
  //store relations

  this._relations = {};
  this._length = relations ? relations.length : 0;
  // to build relations between layers
  this._relationsInfo = {
    children: {}, // array child (unique ids)
    fathers: {}, // array father (unique ids)
    father_child: {} // info parent child
  };
  var relation = void 0;
  relations.forEach(function (relationConfig) {
    relation = new Relation(relationConfig);
    _this._relations[relation.getId()] = relation;
  });
  this._createRelationsInfo();
  base(this);
}

inherit(Relations, G3WObject);

var proto = Relations.prototype;

proto._createRelationsInfo = function () {
  var _this2 = this;

  var father = void 0;
  var child = void 0;
  Object.entries(this._relations).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        relationKey = _ref2[0],
        relation = _ref2[1];

    father = relation.getFather();
    child = relation.getChild();
    _this2._relationsInfo.father_child[father + child] = relationKey;
    if (!_this2._relationsInfo.fathers[father]) _this2._relationsInfo.fathers[father] = [];
    if (!_this2._relationsInfo.children[child]) _this2._relationsInfo.children[child] = [];
    _this2._relationsInfo.fathers[father].push(child);
    _this2._relationsInfo.children[child].push(father);
  });
};

proto._clearRelationsInfo = function () {
  this._relationsInfo = {
    children: {},
    fathers: {},
    father_children: {}
  };
};

proto._reloadRelationsInfo = function () {
  this._clearRelationsInfo();
  this._createRelationsInfo();
};

// number of relations
proto.getLength = function () {
  return this._length;
};

proto.getRelations = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$type = _ref3.type,
      type = _ref3$type === undefined ? null : _ref3$type;

  if (!type) return this._relations;else {
    if (['ONE', 'MANY'].indexOf(type) !== -1) {
      var relations = {};
      for (var name in this._relations) {
        var relation = this._relations[name];
        if (relation.getType() === type) relations[name] = relation;
      }
      return relations;
    } else return {};
  }
};

// array of relation
proto.getArray = function () {
  var relations = [];
  Object.entries(this._relations).forEach(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
        relName = _ref5[0],
        relation = _ref5[1];

    relations.push(relation);
  });
  return relations;
};

proto.setRelations = function (relations) {
  this._relations = Array.isArray(relations) ? relations : [];
};

proto.getRelationById = function (id) {
  return this._relations[id];
};

proto.getRelationByFatherChildren = function (father, child) {
  var relationId = this._relationsInfo.father_child[father + child];
  return this.getRelationById(relationId);
};

proto.addRelation = function (relation) {
  if (relation instanceof Relation) {
    this._relations[relation.getId()] = relation;
    this._reloadRelationsInfo();
  }
};

proto.removeRelation = function (relation) {
  var relationId = void 0;
  if (relation instanceof Relation) {
    relationId = relation.getId();
    delete this._relations[relationId];
    this._reloadRelationsInfo();
  }
};

proto.hasChildren = function (childId) {
  var children = this.getChildren(childId);
  return children ? !!children.length : false;
};

proto.hasFathers = function (fatherId) {
  var fathers = this.getFathers(fatherId);
  return fathers ? !!fathers.length : false;
};

// get children based on father id
proto.getChildren = function (fatherId) {
  if (!this.isFather(fatherId)) return null;
  return this._relationsInfo.fathers[fatherId];
};

// get fathers based on childId
proto.getFathers = function (childId) {
  if (!this.isChild(childId)) return null;
  return this._relationsInfo.children[childId];
};

proto.isChild = function (id) {
  return !!this._relationsInfo.children[id];
};

proto.isFather = function (id) {
  return !!this._relationsInfo.fathers[id];
};

module.exports = Relations;

},{"./relation":479,"core/g3wobject":415,"core/utils/utils":485}],481:[function(require,module,exports){
var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    XHR = _require.XHR,
    base = _require.base;

var G3WObject = require('core/g3wobject');

function RelationsService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
}

inherit(RelationsService, G3WObject);

var proto = RelationsService.prototype;

proto.createUrl = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var ProjectsRegistry = require('core/project/projectsregistry');
  var currentProject = ProjectsRegistry.getCurrentProject();
  // type : <editing, data, xls>
  var _options$layer = options.layer,
      layer = _options$layer === undefined ? {} : _options$layer,
      _options$relation = options.relation,
      relation = _options$relation === undefined ? {} : _options$relation,
      fid = options.fid,
      _options$type = options.type,
      type = _options$type === undefined ? 'data' : _options$type;

  var layerId = void 0;
  var father = relation.father,
      child = relation.child,
      referencedLayer = relation.referencedLayer,
      referencingLayer = relation.referencingLayer,
      relationId = relation.id;

  if (father !== undefined) layerId = layer.id === father ? child : father;else layerId = layer.id === referencedLayer ? referencingLayer : referencedLayer;
  var dataUrl = currentProject.getLayerById(layerId).getUrl(type);
  var value = fid;
  if (typeof value === 'string') {
    value = value.split('.');
    value = value.length === 1 ? value[0] : value[1];
  }
  return dataUrl + '?relationonetomany=' + relationId + '|' + value;
};

proto.getRelations = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var url = this.createUrl(options);
  return XHR.get({
    url: url
  });
};

proto.save = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var url = this.createUrl(options);
  return XHR.fileDownload({
    url: url,
    httpMethod: "GET"
  });
};

module.exports = new RelationsService();

},{"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485}],482:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Base64 = require('core/utils/utils').Base64;
var G3WObject = require('core/g3wobject');

/*
 * RouterService based on  History.js (https://github.com/browserstate/history.js) e Crossroads (https://github.com/millermedeiros/crossroads.js)
 * Base concept is RouteQuery, example "map?point=21.2,42.1&zoom=12",
 * it inserts into browser and URL as quesrystring (q=map@point!21.2,41.1|zoom!12).
 * To run RouteQuery:
 *
 * RouterService.goto("map?point=21.2,42.1&zoom=12");
 *
 *To listen to router has to be add  RouterService.addRoute(pattern, callback). Es.:
 *
 * var route = RouterService.addRoute('map/{?query}',function(query){
 *  console.log(query.point);
 *  console.log(query.zoom);
 * });
 *
 * Patterns:
 *  "map/{foo}": la porzione "foo" is request, and is passed as parameter in callback
 *  "map/:foo:": la porzione "foo" è optional, 
 *  "map/:foo*: 
 *  "map/{?querystring}": mandatory
 *  "map/:?querystring:": optionals
 *
 * to remove  route:
 * RouterService.removeRoute(route);
*/

crossroads.ignoreState = true;
crossroads.greedy = true;

var RouterService = function RouterService() {

  this._initialLocationQuery;
  this._routeQuery = '';
  this.setters = {
    setRouteQuery: function setRouteQuery(routeQuery) {
      this._routeQuery = routeQuery;
      crossroads.parse(routeQuery);
    }
  };

  base(this);
};
inherit(RouterService, G3WObject);

var proto = RouterService.prototype;

proto.init = function () {
  //Return the querystring part of a URL
  var query = window.location.search;
  this._setRouteQueryFromLocationQuery(query);
};

proto.addRoute = function (pattern, handler, priority) {
  return crossroads.addRoute(pattern, handler, priority);
};

proto.removeRoute = function (route) {
  return crossroads.removeRoute(route);
};

proto.removeAllRoutes = function () {
  return crossroads.removeAllRoutes();
};

proto.parse = function (request, defaultArgs) {
  return crossroads.parse(request, defaultArgs);
};

proto.goto = function (routeQuery) {
  if (!this._initialQuery) {
    this._initialLocationQuery = this._stripInitialQuery(location.search.substring(1));
  }
  if (routeQuery) {
    this.setRouteQuery(routeQuery);
  }
};

proto.makePermalink = function (routeQuery) {
  if (!this._initialQuery) {
    this._initialLocationQuery = this._stripInitialQuery(location.search.substring(1));
  }
  var encodedRouteQuery = this._encodeRouteQuery(routeQuery);
  //encodedRouteQuery = Base64.encode(encodedRouteQuery);
  return '?' + this._initialLocationQuery + '&q=' + this._encodeRouteQuery(routeQuery);
};

proto.makeQueryString = function (queryParams) {};

proto.slicePath = function (path) {
  return path.split('?')[0].split('/');
};

proto.sliceFirst = function (path) {
  var pathAndQuery = path.split('?');
  var queryString = pathAndQuery[1];
  var pathArr = pathAndQuery[0].split('/');
  var firstPath = pathArr[0];
  path = pathArr.slice(1).join('/');
  path = [path, queryString].join('?');
  return [firstPath, path];
};

proto.getQueryParams = function (query) {
  query = query.replace('?', '');
  var queryParams = {};
  var queryPairs = [];
  if (query != "" && query.indexOf("&") == -1) {
    queryPairs = [query];
  } else {
    queryPairs = query.split('&');
  }
  try {
    _.forEach(queryPairs, function (queryPair) {
      var pair = queryPair.split('=');
      var key = pair[0];
      var value = pair[1];
      queryParams[key] = value;
    });
  } catch (e) {}
  return queryParams;
};

proto.getQueryString = function (path) {
  return path.split('?')[1];
};

proto._getQueryPortion = function (query, queryKey) {
  var queryPortion;
  try {
    var queryPairs = query.split('&');
    var queryParams = {};
    _.forEach(queryPairs, function (queryPair) {
      var pair = queryPair.split('=');
      var key = pair[0];
      if (key == queryKey) {
        queryPortion = queryPair;
      }
    });
  } catch (e) {}
  return queryPortion;
};

proto._encodeRouteQuery = function (routeQuery) {
  routeQuery = routeQuery.replace('?', '@');
  routeQuery = routeQuery.replace('&', '|');
  routeQuery = routeQuery.replace('=', '!');
  return routeQuery;
};

proto._decodeRouteQuery = function (routeQuery) {
  routeQuery = routeQuery.replace('@', '?');
  routeQuery = routeQuery.replace('|', '&');
  routeQuery = routeQuery.replace('!', '=');
  return routeQuery;
};

proto._setRouteQueryFromLocationQuery = function (locationQuery) {
  var encodedRouteQuery = this._getRouteQueryFromLocationQuery(locationQuery);
  //encodedRouteQuery = Base64.decode(encodedRouteQuery);
  if (encodedRouteQuery) {
    var routeQuery = this._decodeRouteQuery(encodedRouteQuery);
    this.setRouteQuery(routeQuery);
  }
};

proto._getRouteQueryFromLocationQuery = function (locationQuery) {
  return this.getQueryParams(locationQuery)['q'];
};

proto._stripInitialQuery = function (locationQuery) {
  var previousQuery = this._getQueryPortion(locationQuery, 'q');
  if (previousQuery) {
    var previousQueryLength = previousQuery.length;
    var previousQueryPosition = locationQuery.indexOf(previousQuery);
    queryPrefix = _.trimEnd(locationQuery.substring(0, previousQueryPosition), "&");
    querySuffix = locationQuery.substring(previousQueryPosition + previousQueryLength);
    querySuffix = queryPrefix != "" ? querySuffix : _.trimStart(querySuffix, "&");
    locationQuery = queryPrefix + querySuffix;
  }
  return locationQuery;
};

module.exports = new RouterService();

},{"core/g3wobject":415,"core/utils/utils":485}],483:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    XHR = _require.XHR;

/**
 * Singletone service to run async task
 * @constructor
 */


function TaskService() {
  /**
   * Array contain all task id that are running. Each item is an object contain:
   * {
   *   taskId: //taskId,
   *   intervalId: interval to clear clearInterval()
   * }
   **/
  var tasks = [];
  /**
   *
   * @param options: {
   *   method: http method to run task GET/POST
   *   url: api request url (that server start in background task)
   *   taskUrl = url to ask the status og task
   *   params: Object contain param to http/https request
   *   interval: interval in milliseconds to do a request for ask status of task (default 10000 - 1 second)
   *   listener: ()=>{} method to call
   *
   * }
   *
   * return a Promise that return a task id
   */
  this.runTask = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _options$method, method, _options$params, params, url, taskUrl, _options$interval, interval, _options$timeout, timeout, _options$listener, listener, response, result, task_id, intervalId;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _options$method = options.method, method = _options$method === undefined ? 'GET' : _options$method, _options$params = options.params, params = _options$params === undefined ? {} : _options$params, url = options.url, taskUrl = options.taskUrl, _options$interval = options.interval, interval = _options$interval === undefined ? 1000 : _options$interval, _options$timeout = options.timeout, timeout = _options$timeout === undefined ? Infinity : _options$timeout, _options$listener = options.listener, listener = _options$listener === undefined ? function () {} : _options$listener;
            _context2.prev = 1;

            if (!(method === 'GET')) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return XHR.get({
              url: url,
              params: params
            });

          case 5:
            _context2.t0 = _context2.sent;
            _context2.next = 11;
            break;

          case 8:
            _context2.next = 10;
            return XHR.post({
              url: url,
              data: params.data || {},
              contentType: params.contentType || "application/json"
            });

          case 10:
            _context2.t0 = _context2.sent;

          case 11:
            response = _context2.t0;
            result = response.result, task_id = response.task_id;

            if (!result) {
              _context2.next = 19;
              break;
            }

            intervalId = setInterval(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var _response;

              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      // check if timeout is defined
                      timeout = timeout - interval;

                      if (!(timeout > 0)) {
                        _context.next = 15;
                        break;
                      }

                      _response = void 0;
                      _context.prev = 3;
                      _context.next = 6;
                      return XHR.get({
                        url: '' + taskUrl + task_id
                      });

                    case 6:
                      _response = _context.sent;
                      _context.next = 12;
                      break;

                    case 9:
                      _context.prev = 9;
                      _context.t0 = _context['catch'](3);

                      _response = _context.t0;

                    case 12:
                      listener({
                        task_id: task_id,
                        timeout: false,
                        response: _response
                      });
                      _context.next = 17;
                      break;

                    case 15:
                      listener({
                        timeout: true
                      });
                      _this.stopTask({
                        task_id: task_id
                      });

                    case 17:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, _this, [[3, 9]]);
            })), interval);

            // add current task to list of task

            tasks.push({
              task_id: task_id,
              intervalId: intervalId
            });

            // run first time listener function
            listener({
              task_id: task_id,
              response: response
            });
            _context2.next = 20;
            break;

          case 19:
            return _context2.abrupt('return', Promise.reject(response));

          case 20:
            _context2.next = 25;
            break;

          case 22:
            _context2.prev = 22;
            _context2.t1 = _context2['catch'](1);
            return _context2.abrupt('return', Promise.reject(_context2.t1));

          case 25:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[1, 22]]);
  }));

  /**
   *
   * @param options: {
   *   taskId: taskId that is running
   * }
   */
  this.stopTask = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var task_id = options.task_id;

    var task = tasks.find(function (task) {
      return task.task_id === task_id;
    });
    if (task) clearInterval(task.intervalId);
  };

  /**
   * clare all task
   */
  this.clear = function () {
    var _this2 = this;

    tasks.forEach(function (_ref3) {
      var taskId = _ref3.taskId;

      _this2.stopTask({
        taskId: taskId
      });
    });
    //reset to empty tasks
    tasks.splice(0);
  };
}

/**
 * SERVER
 * """Returns the (possibly) new layer ID where the isochrone
 data has been added. If the task has not yet completed a status message is returned

 Note: `project_id` is only used for permissions checking!

 Returns 500 in case of exceptions
 Returns 404 in case of task not found
 Returns 200 ok for all other cases

 Response body:

 {
            "status": "complete",  // or "pending" or "error", full list at
                                   // https://huey.readthedocs.io/en/latest/signals.html#signals
            "exception": "Normally empty, error message in case of errors",
            "progress": [
                100,  // Progress %
            ],
            "task_result": {
                "qgis_ayer_id": "4f2a88a1-ca93-4859-9de3-75d9728cde0e"
            }
        }

 **/

module.exports = new TaskService();

},{"core/utils/utils":485}],484:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    toRawType = _require.toRawType,
    uniqueId = _require.uniqueId;

var Geometry = require('core/geometry/geometry');
var Filter = require('core/layers/filter/filter');
var MapLayersStoreRegistry = require('core/map/maplayersstoresregistry');
var GUI = require('gui/gui');
var geometryFields = ['geometryProperty', 'boundedBy', 'geom', 'the_geom', 'geometry', 'bbox', 'GEOMETRY', 'geoemtria', 'geometria'];

var geoutils = {
  geometryFields: geometryFields,
  coordinatesToGeometry: function coordinatesToGeometry(geometryType, coordinates) {
    var geometryClass = void 0;
    switch (geometryType) {
      case Geometry.GeometryTypes.POLYGON:
      case Geometry.GeometryTypes.POLYGONZ:
      case Geometry.GeometryTypes.POLYGONM:
      case Geometry.GeometryTypes.POLYGONZM:
      case Geometry.GeometryTypes.POLYGON25D:
        geometryClass = ol.geom.Polygon;
        break;
      case Geometry.GeometryTypes.MULTIPOLYGON:
      case Geometry.GeometryTypes.MULTIPOLYGONZ:
      case Geometry.GeometryTypes.MULTIPOLYGONM:
      case Geometry.GeometryTypes.MULTIPOLYGONZM:
      case Geometry.GeometryTypes.MULTIPOLYGON25D:
        geometryClass = ol.geom.MultiPolygon;
        break;
      case Geometry.GeometryTypes.LINESTRING:
      case Geometry.GeometryTypes.LINESTRINGZ:
      case Geometry.GeometryTypes.LINESTRINGM:
      case Geometry.GeometryTypes.LINESTRINGZM:
      case Geometry.GeometryTypes.LINESTRING25D:
      case Geometry.GeometryTypes.LINE:
      case Geometry.GeometryTypes.LINEZ:
      case Geometry.GeometryTypes.LINEM:
      case Geometry.GeometryTypes.LINEZM:
      case Geometry.GeometryTypes.LINE25D:
        geometryClass = ol.geom.LineString;
        break;
      case Geometry.GeometryTypes.MULTILINE:
      case Geometry.GeometryTypes.MULTILINEZ:
      case Geometry.GeometryTypes.MULTILINEM:
      case Geometry.GeometryTypes.MULTILINEZM:
      case Geometry.GeometryTypes.MULTILINE25D:
      case Geometry.GeometryTypes.MULTILINESTRING:
      case Geometry.GeometryTypes.MULTILINESTRINGZ:
      case Geometry.GeometryTypes.MULTILINESTRINGM:
      case Geometry.GeometryTypes.MULTILINESTRINGZM:
      case Geometry.GeometryTypes.MULTILINESTRING25D:
        geometryClass = ol.geom.MultiLineString;
        break;
      case Geometry.GeometryTypes.POINT:
      case Geometry.GeometryTypes.POINTZ:
      case Geometry.GeometryTypes.POINTM:
      case Geometry.GeometryTypes.POINTZM:
      case Geometry.GeometryTypes.POINT25D:
        geometryClass = ol.geom.Point;
        break;
      case Geometry.GeometryTypes.MULTIPOINT:
      case Geometry.GeometryTypes.MULTIPOINTZ:
      case Geometry.GeometryTypes.MULTIPOINTM:
      case Geometry.GeometryTypes.MULTIPOINTZM:
      case Geometry.GeometryTypes.MULTIPOINT25D:
        geometryClass = ol.geom.MultiPoint;
        break;
      default:
        geometryClass = ol.geom.Point;
    }
    var geometry = new geometryClass(coordinates);
    return geometry;
  },

  getDefaultLayerStyle: function getDefaultLayerStyle(geometryType) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var color = options.color;

    switch (geometryType) {
      case Geometry.GeometryTypes.LINESTRINGZ:
      case Geometry.GeometryTypes.LINESTRINGM:
      case Geometry.GeometryTypes.LINESTRINGZM:
      case Geometry.GeometryTypes.LINESTRING25D:
      case Geometry.GeometryTypes.LINE:
      case Geometry.GeometryTypes.LINEZ:
      case Geometry.GeometryTypes.LINEM:
      case Geometry.GeometryTypes.LINEZM:
      case Geometry.GeometryTypes.LINE25D:
        geometryType = 'LineString';
        break;
      case Geometry.GeometryTypes.MULTILINESTRINGZ:
      case Geometry.GeometryTypes.MULTILINESTRINGM:
      case Geometry.GeometryTypes.MULTILINESTRINGZM:
      case Geometry.GeometryTypes.MULTILINESTRING25D:
      case Geometry.GeometryTypes.MULTILINE:
      case Geometry.GeometryTypes.MULTILINEZ:
      case Geometry.GeometryTypes.MULTILINEM:
      case Geometry.GeometryTypes.MULTILINEZM:
      case Geometry.GeometryTypes.MULTILINE25D:
        geometryType = 'MultiLineString';
        break;
      case Geometry.GeometryTypes.POINTZ:
      case Geometry.GeometryTypes.POINTM:
      case Geometry.GeometryTypes.POINTZM:
      case Geometry.GeometryTypes.POINT25D:
        geometryType = 'Point';
        break;
      case Geometry.GeometryTypes.MULTIPOINTZ:
      case Geometry.GeometryTypes.MULTIPOINTM:
      case Geometry.GeometryTypes.MULTIPOINTZM:
      case Geometry.GeometryTypes.MULTIPOINT25D:
        geometryType = 'MultiPoint';
        break;
      case Geometry.GeometryTypes.POLYGONZ:
      case Geometry.GeometryTypes.POLYGONM:
      case Geometry.GeometryTypes.POLYGONZM:
      case Geometry.GeometryTypes.POLYGON25D:
        geometryType = 'Polygon';
        break;
      case Geometry.GeometryTypes.MULTIPOLYGONZ:
      case Geometry.GeometryTypes.MULTIPOLYGONM:
      case Geometry.GeometryTypes.MULTIPOLYGONZM:
      case Geometry.GeometryTypes.MULTIPOLYGON25D:
        geometryType = 'MultiPolygon';
        break;
    }
    var defaultStyle = {
      'Point': new ol.style.Style({
        image: new ol.style.Circle({
          fill: new ol.style.Fill({
            color: color
          }),
          radius: 5,
          stroke: new ol.style.Stroke({
            color: color,
            width: 1
          })
        })
      }),
      'LineString': new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: color,
          width: 3
        })
      }),
      'Polygon': new ol.style.Style({
        fill: new ol.style.Fill({
          color: 'rgba(255,255,255,0.5)'
        }),
        stroke: new ol.style.Stroke({
          color: color,
          width: 3
        })
      }),
      'MultiPoint': new ol.style.Style({
        image: new ol.style.Circle({
          fill: new ol.style.Fill({
            color: color
          }),
          radius: 5,
          stroke: new ol.style.Stroke({
            color: color,
            width: 1
          })
        })
      }),
      'MultiLineString': new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: color,
          width: 3
        })
      }),
      'MultiPolygon': new ol.style.Style({
        fill: new ol.style.Fill({
          color: 'rgba(255,255,255,0.5)'
        }),
        stroke: new ol.style.Stroke({
          color: color,
          width: 3
        })
      })
    };
    return defaultStyle[geometryType];
  },


  createLayerStyle: function createLayerStyle(styleObj) {
    var style = void 0;
    var styles = {};
    if (styleObj) {
      Object.entries(styleObj).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            type = _ref2[0],
            config = _ref2[1];

        switch (type) {
          case 'point':
            if (config.icon) {
              styles.image = new ol.style.Icon({
                src: config.icon.url,
                imageSize: config.icon.width
              });
            }
            break;
          case 'line':
            styles.stroke = new ol.style.Stroke({
              color: config.color,
              width: config.width
            });
            break;
          case 'polygon':
            styles.fill = new ol.style.Fill({
              color: config.color
            });
            break;
        }
      });
      style = new ol.style.Style(styles);
    }
    return style;
  },

  createFeatureFromCoordinates: function createFeatureFromCoordinates(coordinates) {
    var feature = void 0;
    if (Array.isArray(coordinates) && coordinates.length === 2) {
      var geometry = new ol.geom.Point(coordinates);
      feature = new ol.Feature(geometry);
    }
    return feature;
  },
  createFeatureFromBBOX: function createFeatureFromBBOX(bbox) {
    var feature = void 0;
    if (Array.isArray(bbox) && bbox.length === 4) {
      var geometry = ol.geom.Polygon.fromExtent(bbox);
      feature = new ol.Feature(geometry);
    }
    return feature;
  },
  createFeatureFromGeometry: function createFeatureFromGeometry() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        id = _ref3.id,
        geometry = _ref3.geometry;

    if (geometry) {
      var feature = new ol.Feature(geometry);
      id && feature.setId(id);
      return feature;
    }
  },


  createOlLayer: function createOlLayer() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var id = options.id;
    var features = options.features;
    var geometryType = options.geometryType;
    var color = options.color;
    var style = options.style;
    // create ol layer to add to map
    var olSource = options.source || new ol.source.Vector({
      features: features || new ol.Collection()
    });
    var olLayer = new ol.layer.Vector({
      id: id,
      source: olSource
    });
    if (!style) {
      switch (geometryType) {
        case Geometry.GeometryTypes.POINT:
        case Geometry.GeometryTypes.POINTZ:
        case Geometry.GeometryTypes.POINTM:
        case Geometry.GeometryTypes.POINTZM:
        case Geometry.GeometryTypes.POINT25D:
        case Geometry.GeometryTypes.MULTIPOINT:
        case Geometry.GeometryTypes.MULTIPOINTZ:
        case Geometry.GeometryTypes.MULTIPOINTM:
        case Geometry.GeometryTypes.MULTIPOINTZM:
        case Geometry.GeometryTypes.MULTIPOINT25D:
          style = new ol.style.Style({
            image: new ol.style.Circle({
              radius: 5,
              fill: new ol.style.Fill({
                color: color
              })
            })
          });
          break;
        case Geometry.GeometryTypes.LINESTRING:
        case Geometry.GeometryTypes.LINESTRINGZ:
        case Geometry.GeometryTypes.LINESTRINGM:
        case Geometry.GeometryTypes.LINESTRINGZM:
        case Geometry.GeometryTypes.LINESTRING25D:
        case Geometry.GeometryTypes.MULTILINESTRING:
        case Geometry.GeometryTypes.MULTILINESTRINGZ:
        case Geometry.GeometryTypes.MULTILINESTRINGM:
        case Geometry.GeometryTypes.MULTILINESTRINGZM:
        case Geometry.GeometryTypes.MULTILINESTRING25D:
        case Geometry.GeometryTypes.LINE:
        case Geometry.GeometryTypes.LINEZ:
        case Geometry.GeometryTypes.LINEM:
        case Geometry.GeometryTypes.LINEZM:
        case Geometry.GeometryTypes.LINE25D:
        case Geometry.GeometryTypes.MULTILINE:
        case Geometry.GeometryTypes.MULTILINEZ:
        case Geometry.GeometryTypes.MULTILINEM:
        case Geometry.GeometryTypes.MULTILINEZM:
        case Geometry.GeometryTypes.MULTILINE25D:
          style = new ol.style.Style({
            stroke: new ol.style.Stroke({
              width: 3,
              color: color
            })
          });
          break;
        case Geometry.GeometryTypes.POLYGON:
        case Geometry.GeometryTypes.POLYGONZ:
        case Geometry.GeometryTypes.POLYGONM:
        case Geometry.GeometryTypes.POLYGONZM:
        case Geometry.GeometryTypes.POLYGON25D:
        case Geometry.GeometryTypes.MULTIPOLYGON:
        case Geometry.GeometryTypes.MULTIPOLYGONZ:
        case Geometry.GeometryTypes.MULTIPOLYGONM:
        case Geometry.GeometryTypes.MULTIPOLYGONZM:
        case Geometry.GeometryTypes.MULTIPOLYGON25D:
          style = new ol.style.Style({
            stroke: new ol.style.Stroke({
              color: "#000000",
              width: 1
            }),
            fill: new ol.style.Fill({
              color: color
            })
          });
          olLayer.setOpacity(0.6);
          break;
      }
    }
    olLayer.setStyle(style);
    return olLayer;
  },

  createVectorLayerFromFile: function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          name = _ref5.name,
          type = _ref5.type,
          crs = _ref5.crs,
          mapCrs = _ref5.mapCrs,
          data = _ref5.data,
          style = _ref5.style;

      var format, layer, createVectorLayer, headers, separator, values, x, y, features, errorrows, source, promise;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              format = void 0;
              layer = void 0;

              createVectorLayer = function createVectorLayer(format, data) {
                var epsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : crs;

                var vectorLayer = void 0;
                var features = format.readFeatures(data, {
                  dataProjection: epsg,
                  featureProjection: mapCrs || epsg
                });
                if (features.length) {
                  var vectorSource = new ol.source.Vector({
                    features: features
                  });
                  vectorLayer = new ol.layer.Vector({
                    source: vectorSource,
                    name: name,
                    _fields: Object.keys(features[0].getProperties()).filter(function (property) {
                      return geometryFields.indexOf(property) < 0;
                    }),
                    id: uniqueId()
                  });
                  style && vectorLayer.setStyle(style);
                }
                return vectorLayer;
              };

              _context2.t0 = type;
              _context2.next = _context2.t0 === 'gpx' ? 6 : _context2.t0 === 'gml' ? 9 : _context2.t0 === 'geojson' ? 12 : _context2.t0 === 'kml' ? 15 : _context2.t0 === 'csv' ? 18 : _context2.t0 === 'zip' ? 29 : 40;
              break;

            case 6:
              format = new ol.format.GPX();
              layer = createVectorLayer(format, data);
              return _context2.abrupt('break', 40);

            case 9:
              format = new ol.format.WMSGetFeatureInfo();
              layer = createVectorLayer(format, data);
              return _context2.abrupt('break', 40);

            case 12:
              format = new ol.format.GeoJSON();
              layer = createVectorLayer(format, data);
              return _context2.abrupt('break', 40);

            case 15:
              format = new ol.format.KML({
                extractStyles: false
              });
              layer = createVectorLayer(format, data, "EPSG:4326");
              return _context2.abrupt('break', 40);

            case 18:
              headers = data.headers, separator = data.separator, values = data.values, x = data.x, y = data.y;
              features = [];
              errorrows = [];

              values.forEach(function (row, index) {
                var properties = {};
                var rowvalues = row.split(separator);
                if (rowvalues.length === headers.length) {
                  var coordinates = [];
                  rowvalues.forEach(function (value, index) {
                    var field = headers[index];
                    if (field === x) coordinates[0] = 1 * value;
                    if (field === y) coordinates[1] = 1 * value;
                    properties[field] = value;
                  });
                  // check if all coordinates is right
                  if (coordinates.find(function (value) {
                    return Number.isNaN(value);
                  }) === undefined) {
                    var geometry = new ol.geom.Point(coordinates);
                    if (crs !== mapCrs) geometry.transform(crs, mapCrs);
                    var feature = new ol.Feature(geometry);
                    feature.setId(index); // need to add a id incremental
                    feature.setProperties(properties);
                    features.push(feature);
                  }
                } else errorrows.push({
                  row: index + 1,
                  value: values[index]
                });
              });

              if (features.length) {
                _context2.next = 24;
                break;
              }

              return _context2.abrupt('return', Promise.reject());

            case 24:
              if (errorrows.length) {
                GUI.showUserMessage({
                  type: 'warning',
                  message: 'sdk.mapcontrols.addlayer.messages.csv.warning',
                  hooks: {
                    footer: {
                      template: '<select v-select2="errorrows[0].value" class="skin-color" :search="false" style="width:100%">\n                    <option v-for="errorrow in errorrows" :key="errorrow.row" :value="errorrow.value">[{{ errorrow.row}}] {{errorrow.value}}</option>\n                </select>',
                      data: function data() {
                        return {
                          errorrows: errorrows
                        };
                      }
                    }
                  },
                  autoclose: false
                });
              }

              source = new ol.source.Vector({
                features: features
              });

              layer = new ol.layer.Vector({
                source: source,
                name: name,
                _fields: headers,
                id: uniqueId()
              });
              style && layer.setStyle(style);
              return _context2.abrupt('break', 40);

            case 29:
              promise = new Promise(function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve, reject) {
                  var buffer;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return data.arrayBuffer(data);

                        case 2:
                          buffer = _context.sent;

                          shp(buffer).then(function (geojson) {
                            var data = JSON.stringify(geojson);
                            format = new ol.format.GeoJSON({});
                            resolve(createVectorLayer(format, data, "EPSG:4326"));
                          }).catch(function (err) {
                            return reject(err);
                          });

                        case 4:
                        case 'end':
                          return _context.stop();
                      }
                    }
                  }, _callee, _this);
                }));

                return function (_x6, _x7) {
                  return _ref6.apply(this, arguments);
                };
              }());
              _context2.prev = 30;
              _context2.next = 33;
              return promise;

            case 33:
              return _context2.abrupt('return', _context2.sent);

            case 36:
              _context2.prev = 36;
              _context2.t1 = _context2['catch'](30);
              return _context2.abrupt('return', Promise.reject());

            case 39:
              return _context2.abrupt('break', 40);

            case 40:
              return _context2.abrupt('return', layer);

            case 41:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[30, 36]]);
    }));

    function createVectorLayerFromFile() {
      return _ref4.apply(this, arguments);
    }

    return createVectorLayerFromFile;
  }(),
  createStyleFunctionToVectorLayer: function createStyleFunctionToVectorLayer() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var styleFunction = function styleFunction(feature, resolution) {
      var color = options.color,
          field = options.field;

      color = color.rgba ? 'rgba(' + color.rgba.r + ',' + color.rgba.g + ',' + color.rgba.b + ',' + color.rgba.a + ')' : color;
      var geometryType = feature.getGeometry().getType();
      var style = geoutils.getDefaultLayerStyle(geometryType, { color: color });
      field && style.setText(new ol.style.Text({
        text: '' + feature.get(field),
        font: 'bold',
        scale: 2,
        offsetY: 15,
        fill: new ol.style.Fill({
          color: color
        }),
        stroke: new ol.style.Stroke({
          color: '#FFFFFF',
          width: 2
        })
      }));
      return style;
    };
    styleFunction._g3w_options = options;
    return styleFunction;
  },
  createSelectedStyle: function createSelectedStyle() {
    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        geometryType = _ref7.geometryType,
        _ref7$color = _ref7.color,
        color = _ref7$color === undefined ? 'rgb(255,255,0)' : _ref7$color,
        _ref7$fill = _ref7.fill,
        fill = _ref7$fill === undefined ? true : _ref7$fill;

    var style = null;
    if (geometryType === 'LineString' || geometryType === 'MultiLineString') {
      style = new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: color,
          width: 4
        })
      });
    } else if (geometryType === 'Point' || geometryType === 'MultiPoint') {
      style = new ol.style.Style({
        image: new ol.style.Circle({
          radius: 6,
          stroke: !fill && new ol.style.Stroke({
            color: color,
            width: 4
          }),
          fill: fill && new ol.style.Fill({
            color: color
          })
        }),
        zIndex: Infinity
      });
    } else if (geometryType === 'MultiPolygon' || geometryType === 'Polygon') {
      var fillColor = ol.color.asArray(color);
      fillColor.splice(3, 1, 0.5);
      style = new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: color,
          width: 4
        }),
        fill: fill && new ol.style.Fill({
          color: ol.color.asString(fillColor)
        })
      });
    }
    return style;
  },
  getAlphanumericPropertiesFromFeature: function getAlphanumericPropertiesFromFeature() {
    var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    properties = Array.isArray(properties) ? properties : Object.keys(properties);
    return properties.filter(function (property) {
      return geometryFields.indexOf(property) === -1;
    });
  },


  /**
   *
   * @param layers
   * @param bbox
   * @param feature_count
   * @param multilayers
   * @returns {JQuery.Promise<any, any, any>}
   */
  getQueryLayersPromisesByBBOX: function getQueryLayersPromisesByBBOX(layers, _ref8) {
    var bbox = _ref8.bbox,
        _ref8$feature_count = _ref8.feature_count,
        feature_count = _ref8$feature_count === undefined ? 10 : _ref8$feature_count,
        _ref8$multilayers = _ref8.multilayers,
        multilayers = _ref8$multilayers === undefined ? false : _ref8$multilayers;

    var queriesPromise = void 0;
    if (multilayers) {
      var map = GUI.getComponent('map').getService().getMap();
      queriesPromise = geoutils.getQueryLayersPromisesByGeometry(layers, {
        geometry: bbox,
        bbox: true,
        feature_count: feature_count,
        projection: map.getView().getProjection()
      });
    } else {
      var d = $.Deferred();
      queriesPromise = d.promise();
      var queryResponses = [];
      var queryErrors = [];
      var layersLenght = layers.length;
      var filterBBox = bbox;
      layers.forEach(function (layer) {
        var filter = new Filter();
        filter.setBBOX(filterBBox);
        layer.query({
          filter: filter,
          feature_count: feature_count
        }).then(function (response) {
          queryResponses.push(response);
        }).fail(function (error) {
          return queryErrors.push(error);
        }).always(function () {
          layersLenght -= 1;
          if (layersLenght === 0) queryErrors.length === layers.length ? d.reject(queryErrors) : d.resolve(queryResponses);
        });
      });
    }
    return queriesPromise;
  },
  getQueryLayersPromisesByCoordinates: function getQueryLayersPromisesByCoordinates(layers) {
    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        coordinates = _ref9.coordinates,
        _ref9$feature_count = _ref9.feature_count,
        feature_count = _ref9$feature_count === undefined ? 10 : _ref9$feature_count,
        _ref9$multilayers = _ref9.multilayers,
        multilayers = _ref9$multilayers === undefined ? false : _ref9$multilayers,
        _ref9$reproject = _ref9.reproject,
        reproject = _ref9$reproject === undefined ? true : _ref9$reproject;

    var d = $.Deferred();
    if (!layers.length) return d.resolve(layers);
    var map = GUI.getComponent('map').getService().getMap();
    var size = map.getSize();
    var queryResponses = [];
    var queryErrors = [];
    var mapProjection = map.getView().getProjection();
    var resolution = map.getView().getResolution();
    if (multilayers) {
      (function () {
        // case of multilayers
        var multiLayers = {};
        layers.forEach(function (layer) {
          var key = layer.getInfoFormat() + ':' + layer.getInfoUrl() + ':' + layer.getMultiLayerId();
          if (multiLayers[key]) multiLayers[key].push(layer);else multiLayers[key] = [layer];
        });
        var numberOfRequests = Object.keys(multiLayers).length;
        var layersLength = numberOfRequests;
        for (var key in multiLayers) {
          var _multilayer = multiLayers[key];
          var _layers = _multilayer;
          var multilayer = multiLayers[key][0];
          var provider = multilayer.getProvider('query');
          provider.query({
            feature_count: feature_count,
            coordinates: coordinates,
            mapProjection: mapProjection,
            reproject: reproject,
            resolution: resolution,
            size: size,
            layers: _layers
          }).then(function (response) {
            return queryResponses.push(response);
          }).fail(function (error) {
            return queryErrors.push(error);
          }).always(function () {
            layersLength -= 1;
            if (layersLength === 0) {
              queryErrors.length === numberOfRequests ? d.reject(queryErrors) : d.resolve(queryResponses);
            }
          });
        }
      })();
    } else {
      // single layers
      var layersLength = layers.length;
      var rejectedResponses = 0;
      layers.forEach(function (layer) {
        layer.query({
          feature_count: feature_count,
          coordinates: coordinates,
          mapProjection: mapProjection,
          size: size,
          resolution: resolution
        }).then(function (response) {
          queryResponses.push(response);
        }).fail(function (error) {
          rejectedResponses += 1;
          queryErrors.push(error);
        }).always(function () {
          layersLength -= 1;
          if (layersLength === 0) {
            rejectedResponses < layers.length ? d.resolve(queryResponses) : d.reject(queryErrors);
          }
        });
      });
    }
    return d.promise();
  },
  transformBBOX: function transformBBOX() {
    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        bbox = _ref10.bbox,
        sourceCrs = _ref10.sourceCrs,
        destinationCrs = _ref10.destinationCrs;

    var point1 = new ol.geom.Point([bbox[0], bbox[1]]);
    var point2 = new ol.geom.Point([bbox[2], bbox[3]]);
    point1.transform(sourceCrs, destinationCrs);
    point2.transform(sourceCrs, destinationCrs);
    return [].concat(_toConsumableArray(point1.getCoordinates()), _toConsumableArray(point2.getCoordinates()));
  },


  /**
   *
   * @param layers
   * @param multilayers
   * @param bbox
   * @param geometry
   * @param projection
   * @param feature_count
   * @returns {JQuery.Promise<any, any, any>}
   */
  getQueryLayersPromisesByGeometry: function getQueryLayersPromisesByGeometry(layers) {
    var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref11$multilayers = _ref11.multilayers,
        multilayers = _ref11$multilayers === undefined ? false : _ref11$multilayers,
        bbox = _ref11.bbox,
        geometry = _ref11.geometry,
        _ref11$filterConfig = _ref11.filterConfig,
        filterConfig = _ref11$filterConfig === undefined ? {} : _ref11$filterConfig,
        projection = _ref11.projection,
        _ref11$feature_count = _ref11.feature_count,
        feature_count = _ref11$feature_count === undefined ? 10 : _ref11$feature_count;

    var d = $.Deferred();
    var queryResponses = [];
    var queryErrors = [];
    var mapCrs = projection.getCode();
    var filter = new Filter(filterConfig);
    if (multilayers) {
      (function () {
        var filterGeometry = geometry;
        if (!layers.length) d.resolve([]);
        var multiLayers = _.groupBy(layers, function (layer) {
          return layer.getMultiLayerId() + '_' + layer.getProjection().getCode();
        });
        var numberRequestd = Object.keys(multiLayers).length;
        var layersLength = numberRequestd;
        for (var key in multiLayers) {
          var _multilayer = multiLayers[key];
          var _layers2 = _multilayer;
          var multilayer = multiLayers[key][0];
          var provider = multilayer.getProvider('filter');
          // in case of boox geometry
          if (bbox) filter.setBBOX(filterGeometry);else {
            var layerCrs = multilayer.getProjection().getCode();
            if (mapCrs !== layerCrs) filterGeometry = filterGeometry.clone().transform(mapCrs, layerCrs);
            filter.setGeometry(filterGeometry);
          }
          provider.query({
            filter: filter,
            layers: _layers2,
            feature_count: feature_count
          }).then(function (response) {
            return queryResponses.push(response);
          }).fail(function (error) {
            return queryErrors.push(error);
          }).always(function () {
            layersLength -= 1;
            if (layersLength === 0) queryErrors.length === numberRequestd ? d.reject(queryErrors) : d.resolve(queryResponses);
          });
        }
      })();
    } else {
      if (layers.length === 0) d.resolve([]);else {
        var layersLenght = layers.length;
        layers.forEach(function (layer) {
          var layerCrs = layer.getProjection().getCode();
          filter.setGeometry(mapCrs !== layerCrs ? geometry.clone().transform(mapCrs, layerCrs) : geometry);
          layer.query({
            filter: filter,
            feature_count: feature_count
          }).then(function (response) {
            return queryResponses.push(response);
          }).fail(function (error) {
            return queryErrors.push(error);
          }).always(function () {
            layersLenght -= 1;
            if (layersLenght === 0) {
              queryErrors.length === layers.length ? d.reject(queryErrors) : d.resolve(queryResponses);
            }
          });
        });
      }
    }
    return d.promise();
  },
  parseQueryLayersPromiseResponses: function parseQueryLayersPromiseResponses(responses) {
    var results = {
      query: responses[0] ? responses[0].query : null,
      data: []
    };
    responses.forEach(function (result) {
      result.data && result.data.forEach(function (data) {
        results.data.push(data);
      });
    });
    return results;
  },

  getMapLayerById: function getMapLayerById(layerId) {
    return MapLayersStoreRegistry.getLayerById(layerId);
  },

  getMapLayersByFilter: function getMapLayersByFilter(filter) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    filter = filter || {};
    var mapFilter = {
      GEOLAYER: true
    };
    Object.assign(filter, mapFilter);
    var layers = [];
    MapLayersStoreRegistry.getQuerableLayersStores().forEach(function (layerStore) {
      layers = layerStore.getLayers(filter, options);
    });
    return layers || [];
  },
  areCoordinatesEqual: function areCoordinatesEqual() {
    var coordinates1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var coordinates2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    return coordinates1[0] === coordinates2[0] && coordinates1[1] === coordinates2[1];
  },


  getFeaturesFromResponseVectorApi: function getFeaturesFromResponseVectorApi() {
    var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (response.result) {
      var features = response.vector.data.features || [];
      return features;
    } else return null;
  },

  splitGeometryLine: function splitGeometryLine(splitGeometry, lineGeometry) {
    var splitted = false;
    var splittedSegments = [];
    var jstsFromWkt = new jsts.io.WKTReader();
    var wktFromOl = new ol.format.WKT();
    var olFromJsts = new jsts.io.OL3Parser();
    var splitLine = jstsFromWkt.read(wktFromOl.writeGeometry(splitGeometry));
    var targetLine = jstsFromWkt.read(wktFromOl.writeGeometry(lineGeometry));
    var targetCoordinates = targetLine.getCoordinates();
    var targetCoordinatesLength = targetCoordinates.length;
    var geometryFactory = new jsts.geom.GeometryFactory();
    var pointsNotSplitted = [];
    var endPoint = void 0;
    var startPoint = void 0;
    for (var i = 0; i < targetCoordinatesLength - 1; i++) {
      startPoint = targetCoordinates[i];
      endPoint = targetCoordinates[i + 1];
      // create a segment of two vertex
      var segment = geometryFactory.createLineString([startPoint, endPoint]);
      var intersectCoordinates = segment.intersection(splitLine).getCoordinates();
      if (intersectCoordinates.length) {
        splitted = true;
        intersectCoordinates.forEach(function (splitPoint) {
          if (pointsNotSplitted.length) {
            var newSegment = geometryFactory.createLineString(pointsNotSplitted.concat([startPoint, splitPoint]));
            splittedSegments.push(olFromJsts.write(newSegment));
            pointsNotSplitted = [];
          } else {
            var _newSegment = geometryFactory.createLineString([startPoint, splitPoint]);
            splittedSegments.push(olFromJsts.write(_newSegment));
          }
          startPoint = splitPoint;
        });
        pointsNotSplitted = pointsNotSplitted.concat([startPoint, endPoint]);
      } else pointsNotSplitted = pointsNotSplitted.concat([startPoint, endPoint]);
    }
    var restOfLine = geometryFactory.createLineString(pointsNotSplitted);
    splittedSegments.push(olFromJsts.write(restOfLine));
    return splitted && splittedSegments || [];
  },
  splitFeatures: function splitFeatures() {
    var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref12$features = _ref12.features,
        features = _ref12$features === undefined ? [] : _ref12$features,
        splitfeature = _ref12.splitfeature;

    var splitterdGeometries = [];
    features.forEach(function (feature) {
      var geometries = geoutils.splitFeature({ feature: feature, splitfeature: splitfeature });
      geometries.length > 1 && splitterdGeometries.push({
        uid: feature.getUid(),
        geometries: geometries
      });
    });
    return splitterdGeometries;
  },
  splitFeature: function splitFeature() {
    var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        feature = _ref13.feature,
        splitfeature = _ref13.splitfeature;

    var geometries = {
      feature: feature.getGeometry(), //geometry of the feature to split
      split: splitfeature.getGeometry() // geometry of split feature
    };
    // check geometry type of split
    var splitType = geometries.split.getType();
    // check geometry type of feature
    var featureGeometryType = geometries.feature.getType();
    var splittedFeatureGeometries = [];
    var parser = new jsts.io.OL3Parser();
    switch (splitType) {
      case 'LineString':
        // check if geoemtry is Polygon
        if (featureGeometryType.indexOf('Polygon') !== -1) {
          // check if is a MultiPolygon
          var isMulti = featureGeometryType.indexOf('Multi') !== -1;
          // if multiPolygon
          var polygonFeature = isMulti ? geometries.feature.getPolygons() : geometries.feature;
          if (Array.isArray(polygonFeature)) {
            polygonFeature.forEach(function (polygonGeometry) {
              geoutils.splitFeature({
                splitfeature: splitfeature,
                feature: new ol.Feature({
                  geometry: polygonGeometry
                })
              }).forEach(function (geometry) {
                geometry && splittedFeatureGeometries.push(new ol.geom.MultiPolygon([geometry.getCoordinates()]));
              });
            });
          } else {
            // case a Polygon
            var polygonFeatureGeometry = parser.read(polygonFeature);
            var featureGeometry = parser.read(polygonFeature.getLinearRing(0));
            var splitGeometry = parser.read(geometries.split);
            var union = featureGeometry.union(splitGeometry);
            var polygonizer = new jsts.operation.polygonize.Polygonizer();
            polygonizer.add(union);
            var polygons = polygonizer.getPolygons().toArray();
            polygons.length > 1 && polygons.forEach(function (polygon) {
              if (polygonFeatureGeometry.intersection(polygon).getGeometryType() === 'Polygon') {
                var geometry = parser.write(polygon);
                splittedFeatureGeometries.push(isMulti ? new ol.geom.MultiPolygon([geometry.getCoordinates()]) : geometry);
              }
            });
          }
          //LineString or MultiLineString
        } else if (featureGeometryType.indexOf('LineString') !== -1) {
          var _isMulti = featureGeometryType.indexOf('Multi') !== -1;
          var lineFeatureGeometry = _isMulti ? geometries.feature.getLineStrings() : geometries.feature;
          if (Array.isArray(lineFeatureGeometry)) {
            lineFeatureGeometry.forEach(function (lineGeometry) {
              geoutils.splitFeature({
                splitfeature: splitfeature,
                feature: new ol.Feature({
                  geometry: lineGeometry
                })
              }).forEach(function (geometry) {
                geometry && splittedFeatureGeometries.push(new ol.geom.MultiLineString([geometry.getCoordinates()]));
              });
            });
          } else return geoutils.splitGeometryLine(geometries.split, geometries.feature);
        }
        break;
    }
    return splittedFeatureGeometries;
  },
  singleGeometriesToMultiGeometry: function singleGeometriesToMultiGeometry() {
    var geometries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var geometryType = geometries[0] && geometries[0].getType();
    return geometryType && new ol.geom['Multi' + geometryType](geometries.map(function (geometry) {
      return geometry.getCoordinates();
    }));
  },
  multiGeometryToSingleGeometries: function multiGeometryToSingleGeometries(geometry) {
    var geometryType = geometry.getType();
    var geometries = [];
    switch (geometryType) {
      case Geometry.GeometryTypes.MULTIPOLYGON:
        geometries = geometry.getPolygons();
        break;
      case Geometry.GeometryTypes.MULTILINE:
      case Geometry.GeometryTypes.MULTILINESTRING:
        geometries = geometry.getLineStrings();
        break;
      case Geometry.GeometryTypes.MULTIPOINT:
        geometries = geometry.getPoints();
        break;
    }
    return geometries;
  },
  dissolve: function dissolve() {
    var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref14$features = _ref14.features,
        features = _ref14$features === undefined ? [] : _ref14$features,
        _ref14$index = _ref14.index,
        index = _ref14$index === undefined ? 0 : _ref14$index,
        _ref14$clone = _ref14.clone,
        clone = _ref14$clone === undefined ? false : _ref14$clone;

    var parser = new jsts.io.OL3Parser();
    var featuresLength = features.length;
    var dissolvedFeature = void 0;
    var jstsdissolvedFeatureGeometry = void 0;
    switch (featuresLength) {
      case 0:
        dissolvedFeature = null;
        break;
      case 1:
        dissolvedFeature = features[0];
        break;
      default:
        var baseFeature = dissolvedFeature = clone ? features[index].clone() : features[index];
        var baseFeatureGeometry = baseFeature.getGeometry();
        var baseFeatureGeometryType = baseFeatureGeometry.getType();
        // check if can buil a LineString
        if (baseFeatureGeometryType === 'LineString') {
          var lineMerger = new jsts.operation.linemerge.LineMerger();
          for (var i = 0; i < featuresLength; i++) {
            var feature = features[i];
            var coordinates = parser.read(feature.getGeometry()).getCoordinates();
            var LineString = new jsts.geom.GeometryFactory().createLineString(coordinates);
            lineMerger.addLineString(LineString);
          }
          var mergedLineString = lineMerger.getMergedLineStrings();
          jstsdissolvedFeatureGeometry = mergedLineString.size() === 1 ? mergedLineString.toArray()[0] : null;
        } else {
          jstsdissolvedFeatureGeometry = parser.read(baseFeatureGeometry);
          for (var _i = 0; _i < featuresLength; _i++) {
            if (index !== _i) {
              var _feature = features[_i];
              jstsdissolvedFeatureGeometry = jstsdissolvedFeatureGeometry.union(parser.read(_feature.getGeometry()));
            }
          }
        }
        if (jstsdissolvedFeatureGeometry) {
          var dissolvedFeatureGeometry = parser.write(jstsdissolvedFeatureGeometry);
          var dissolvedFeatureGeometryType = dissolvedFeatureGeometry.getType();
          var dissolvedFeatuteGeometryCoordinates = dissolvedFeatureGeometryType === baseFeatureGeometryType ? dissolvedFeatureGeometry.getCoordinates() : baseFeatureGeometryType.indexOf('Multi') !== -1 && dissolvedFeatureGeometryType === baseFeatureGeometryType.replace('Multi', '') ? [dissolvedFeatureGeometry.getCoordinates()] : null;
          if (dissolvedFeatuteGeometryCoordinates) baseFeature.getGeometry().setCoordinates(dissolvedFeatuteGeometryCoordinates);else dissolvedFeature = null;
        } else dissolvedFeature = null;
    }
    return dissolvedFeature;
  },


  normalizeEpsg: function normalizeEpsg(epsg) {
    if (typeof epsg === 'number') return 'EPSG:' + epsg;
    epsg = epsg.replace(/[^\d\.\-]/g, "");
    if (epsg !== '') return 'EPSG:' + parseInt(epsg);
  },

  crsToCrsObject: function crsToCrsObject(crs) {
    if (crs === null || crs === undefined) return crs;
    if (toRawType(crs) === 'Object' && crs.epsg) crs.epsg = geoutils.normalizeEpsg(crs.epsg);else crs = {
      epsg: geoutils.normalizeEpsg(crs),
      proj4: "",
      axisinverted: false,
      geographic: false
    };
    return crs;
  }
};

module.exports = geoutils;

},{"core/geometry/geometry":417,"core/layers/filter/filter":438,"core/map/maplayersstoresregistry":466,"core/utils/utils":485,"gui/gui":575}],485:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _operators = require('../layers/filter/operators');

var Filter = require('core/layers/filter/filter');
var Expression = require('core/layers/filter/expression');
/**
 * Decimal adjustment of a number.
 *
 * @param {String}  type  The type of adjustment.
 * @param {Number}  value The number.
 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
 * @returns {Number} The adjusted value.
 */
function decimalAdjust(type, value, exp) {
  // If the exp is undefined or zero...
  if (typeof exp === 'undefined' || +exp === 0) return Math[type](value);
  value = +value;
  exp = +exp;
  // If the value is not a number or the exp is not an integer...
  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
    return NaN;
  }
  // Shift
  value = value.toString().split('e');
  value = Math[type](+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp)));
  // Shift back
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));
}

// Decimal round
if (!Math.round10) {
  Math.round10 = function (value, exp) {
    return decimalAdjust('round', value, exp);
  };
}
// Decimal floor
if (!Math.floor10) {
  Math.floor10 = function (value, exp) {
    return decimalAdjust('floor', value, exp);
  };
}
// Decimal ceil
if (!Math.ceil10) {
  Math.ceil10 = function (value, exp) {
    return decimalAdjust('ceil', value, exp);
  };
}

String.prototype.hashCode = function () {
  var hash = 0,
      i = void 0,
      chr = void 0,
      len = void 0;
  if (this.length === 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr = this.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
};

var Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function encode(e) {
    var t = "";var n = void 0,
        r = void 0,
        i = void 0,
        s = void 0,
        o = void 0,
        u = void 0,
        a = void 0;var f = 0;e = Base64._utf8_encode(e);while (f < e.length) {
      n = e.charCodeAt(f++);r = e.charCodeAt(f++);i = e.charCodeAt(f++);s = n >> 2;o = (n & 3) << 4 | r >> 4;u = (r & 15) << 2 | i >> 6;a = i & 63;if (isNaN(r)) {
        u = a = 64;
      } else if (isNaN(i)) {
        a = 64;
      }t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);
    }return t;
  }, decode: function decode(e) {
    var t = "";var n = void 0,
        r = void 0,
        i = void 0;var s = void 0,
        o = void 0,
        u = void 0,
        a = void 0;var f = 0;e = e.replace(/[^A-Za-z0-9+/=]/g, "");while (f < e.length) {
      s = this._keyStr.indexOf(e.charAt(f++));o = this._keyStr.indexOf(e.charAt(f++));u = this._keyStr.indexOf(e.charAt(f++));a = this._keyStr.indexOf(e.charAt(f++));n = s << 2 | o >> 4;r = (o & 15) << 4 | u >> 2;i = (u & 3) << 6 | a;t = t + String.fromCharCode(n);if (u != 64) {
        t = t + String.fromCharCode(r);
      }if (a != 64) {
        t = t + String.fromCharCode(i);
      }
    }t = Base64._utf8_decode(t);return t;
  }, _utf8_encode: function _utf8_encode(e) {
    e = e.replace(/rn/g, "n");var t = "";for (var n = 0; n < e.length; n++) {
      var r = e.charCodeAt(n);if (r < 128) {
        t += String.fromCharCode(r);
      } else if (r > 127 && r < 2048) {
        t += String.fromCharCode(r >> 6 | 192);t += String.fromCharCode(r & 63 | 128);
      } else {
        t += String.fromCharCode(r >> 12 | 224);t += String.fromCharCode(r >> 6 & 63 | 128);t += String.fromCharCode(r & 63 | 128);
      }
    }return t;
  }, _utf8_decode: function _utf8_decode(e) {
    var t = "";var n = 0;var r = c1 = c2 = 0;while (n < e.length) {
      r = e.charCodeAt(n);if (r < 128) {
        t += String.fromCharCode(r);n++;
      } else if (r > 191 && r < 224) {
        c2 = e.charCodeAt(n + 1);t += String.fromCharCode((r & 31) << 6 | c2 & 63);n += 2;
      } else {
        c2 = e.charCodeAt(n + 1);c3 = e.charCodeAt(n + 2);t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);n += 3;
      }
    }return t;
  } };

var _uid = 0;

var utils = {
  getUniqueDomId: function getUniqueDomId() {
    _uid += 1;
    return _uid + '_' + Date.now();
  },
  uniqueId: function uniqueId() {
    return utils.getUniqueDomId();
  },
  basemixin: function basemixin(destination, source) {
    return utils.merge(destination.prototype, source);
  },
  mixin: function mixin(destination, source) {
    var sourceInstance = new source();
    utils.merge(destination, sourceInstance);
    utils.merge(destination.prototype, source.prototype);
  },
  merge: function merge(destination, source) {
    var key = void 0;
    for (key in source) {
      if (utils.hasOwn(source, key)) destination[key] = source[key];
    }
  },
  hasOwn: function hasOwn(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
  },

  // google closure library impememtation
  inherit: function inherit(childCtor, parentCtor) {
    function tempCtor() {}
    tempCtor.prototype = parentCtor.prototype;
    childCtor.superClass_ = parentCtor.prototype;
    childCtor.prototype = new tempCtor();
    childCtor.prototype.constructor = childCtor;
  },

  // goole closure library implementation
  base: function base(me, opt_methodName, var_args) {
    // who call base
    // noinspection JSAnnotator
    var caller = arguments.callee.caller;
    if (caller.superClass_) {
      // This function constructor (that inherit from superClass_). Call the superclass constructor.
      //It is a easy way to cal super class in binding to this
      return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
    }
    var args = Array.prototype.slice.call(arguments, 2);
    var foundCaller = false;
    //constructor is the constructor function of the object
    for (var ctor = me.constructor; ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
      if (ctor.prototype[opt_methodName] === caller) {
        foundCaller = true;
      } else if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
    // If we did not find the caller in the prototype chain,
    // then one of two things happened:
    // 1) The caller is an instance method.
    // 2) This method was not called by the right caller.
    if (me[opt_methodName] === caller) {
      // call the function from prototype object
      return me.constructor.prototype[opt_methodName].apply(me, args);
    } else {
      throw Error('base called from a method of one name ' + 'to a method of a different name');
    }
  },
  noop: function noop() {},
  truefnc: function truefnc() {
    return true;
  },
  falsefnc: function falsefnc() {
    return true;
  },
  resolve: function resolve(value) {
    var d = $.Deferred();
    d.resolve(value);
    return d.promise();
  },
  reject: function reject(value) {
    var d = $.Deferred();
    d.reject(value);
    return d.promise();
  },
  getValueFromG3WObjectEvent: function getValueFromG3WObjectEvent() {
    //TODO
  },
  getAjaxResponses: function getAjaxResponses() {
    var listRequests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var requestsLenght = listRequests.length;
    var d = $.Deferred();
    var DoneRespones = [];
    var FailedResponses = [];
    listRequests.forEach(function (request) {
      request.then(function (response) {
        DoneRespones.push(response);
      }).fail(function (err) {
        FailedResponses.push(err);
      }).always(function () {
        requestsLenght = requestsLenght > 0 ? requestsLenght - 1 : requestsLenght;
        if (requestsLenght === 0) d.resolve({
          done: DoneRespones,
          fail: FailedResponses
        });
      });
    });
    return d.promise();
  },

  trimValue: function trimValue(value) {
    return value.replace(/ /g, '');
  },
  sanitizeUrl: function sanitizeUrl() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref.url,
        _ref$reserverParamete = _ref.reserverParameters,
        reserverParameters = _ref$reserverParamete === undefined ? [] : _ref$reserverParamete;

    var checkUrl = new URL(url);
    reserverParameters.forEach(function (param) {
      var _params = [param.toUpperCase(), param.toLowerCase()];
      for (var i = 0; i < 2; i++) {
        var _param = _params[i];
        var _value = checkUrl.searchParams.get(_param);
        if (_value) {
          url = url.replace(_param + '=' + _value, '');
          break;
        }
      }
    });
    return url;
  },
  convertObjectToUrlParams: function convertObjectToUrlParams() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return $.param(params);
  },

  // Appends query parameters to a URI
  appendParams: function appendParams(uri, params) {
    var keyParams = [];
    // Skip any null or undefined parameter values
    Object.keys(params).forEach(function (k) {
      if (params[k] !== null && params[k] !== undefined) {
        keyParams.push(k + '=' + encodeURIComponent(params[k]));
      }
    });
    var qs = keyParams.join('&');
    // remove any trailing ? or &
    uri = uri.replace(/[?&]$/, '');
    // append ? or & depending on whether uri has existing parameters
    uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';
    return uri + qs;
  },
  imageToDataURL: function imageToDataURL(_ref2) {
    var src = _ref2.src,
        _ref2$type = _ref2.type,
        type = _ref2$type === undefined ? 'image/jpeg' : _ref2$type,
        _ref2$callback = _ref2.callback,
        callback = _ref2$callback === undefined ? function () {} : _ref2$callback;

    var image = new Image();
    image.onload = function () {
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');
      canvas.height = this.naturalHeight;
      canvas.width = this.naturalWidth;
      context.drawImage(this, 0, 0);
      var dataURL = canvas.toDataURL(type);
      callback(dataURL);
    };
    image.src = src;
  },
  capitalize_first_letter: function capitalize_first_letter(string) {
    return '' + string[0].toUpperCase() + string.slice(1);
  },

  Base64: Base64,
  toRawType: function toRawType(value) {
    var _toString = Object.prototype.toString;
    return _toString.call(value).slice(8, -1);
  },
  isEmptyObject: function isEmptyObject(obj) {
    return JSON.stringify(obj) === '{}';
  },

  // build throttle function
  throttle: function throttle(fnc) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

    var lastCall = void 0;
    return function () {
      var previousCall = lastCall;
      lastCall = Date.now();
      if (previousCall === undefined // function is being called for the first time
      || lastCall - previousCall > delay) {
        // throttle time has elapsed
        fnc.apply(undefined, arguments);
      }
    };
  },

  //build debounce function
  debounce: function debounce(func) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

    var timeout = void 0;
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      clearTimeout(timeout);
      timeout = setTimeout(function () {
        func.apply(undefined, args);
      }, delay);
    };
  },
  copyUrl: function copyUrl(url) {
    var tempinput = document.createElement('input');
    document.body.appendChild(tempinput);
    tempinput.value = url;
    tempinput.select();
    document.execCommand('copy');
    document.body.removeChild(tempinput);
  },
  downloadFile: function downloadFile() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        filename = _ref3.filename,
        content = _ref3.content,
        url = _ref3.url,
        _ref3$mime_type = _ref3.mime_type,
        mime_type = _ref3$mime_type === undefined ? 'text/plain' : _ref3$mime_type;

    var download = function download(blob) {
      var temapAncor = document.createElement('a');
      temapAncor.setAttribute('href', window.URL.createObjectURL(blob));
      temapAncor.setAttribute('download', filename);
      temapAncor.dataset.downloadurl = [mime_type, temapAncor.download, temapAncor.href].join(':');
      temapAncor.click();
      temapAncor = null;
    };
    return new Promise(function (resolve, reject) {
      if (content) {
        var blob = new Blob([content], { type: mime_type });
        download(blob);
        resolve();
      } else if (url) {
        fetch(url).then(function (response) {
          return response.blob();
        }).then(function (blob) {
          download(blob);
          resolve();
        }).catch(function () {
          reject();
        });
      }
    });
  },
  downloadCSVLayerFeatures: function downloadCSVLayerFeatures() {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layer = _ref4.layer,
        _ref4$alias = _ref4.alias,
        alias = _ref4$alias === undefined ? true : _ref4$alias;

    var _require = require('core/utils/geo'),
        getAlphanumericPropertiesFromFeature = _require.getAlphanumericPropertiesFromFeature;
    //get headers


    var attributes = Object.keys(layer.features[0].attributes);
    var properties = getAlphanumericPropertiesFromFeature(attributes);
    var headers = !alias ? properties : properties.map(function (property) {
      var attribute = layer.attributes.find(function (attribute) {
        return attribute.name === property;
      });
      return attribute ? attribute.label : property;
    });
    var items = layer.features.map(function (feature) {
      var attributes = feature.attributes;
      var item = {};
      properties.forEach(function (property, index) {
        var key = !alias && property || headers[index];
        item[key] = attributes[property];
      });
      return item;
    });

    utils.downloadCSV({
      filename: layer.id,
      items: items
    });
  },
  downloadCSV: function downloadCSV() {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$filename = _ref5.filename,
        filename = _ref5$filename === undefined ? utils.getUniqueDomId() : _ref5$filename,
        _ref5$items = _ref5.items,
        items = _ref5$items === undefined ? [] : _ref5$items;

    function convertToCSV(items) {
      var str = '';
      for (var i = 0; i < items.length; i++) {
        var line = '';
        for (var index in items[i]) {
          if (line !== '') line += ';';
          line += items[i][index];
        }
        str += line + '\r\n';
      }
      return str;
    }
    var exportedFilenmae = filename + '.csv';
    var csv = convertToCSV(items);
    var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    if (navigator.msSaveBlob) {
      // IE 10+
      navigator.msSaveBlob(blob, exportedFilenmae);
    } else {
      var link = document.createElement("a");
      if (link.download !== undefined) {
        // Browsers that support HTML5 download attribute
        var url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", exportedFilenmae);
        link.style.visibility = 'hidden';
        link.click();
      }
    }
  },
  getTimeoutPromise: function getTimeoutPromise(_ref6) {
    var _ref6$timeout = _ref6.timeout,
        timeout = _ref6$timeout === undefined ? 600 : _ref6$timeout;

    var promise = new Promise(function (resolve) {
      return setTimeout(resolve, timeout);
    });
    return promise;
  },

  XHR: {
    get: function get() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          url = _ref7.url,
          _ref7$params = _ref7.params,
          params = _ref7$params === undefined ? {} : _ref7$params;

      return new Promise(function (resolve, reject) {
        url ? $.get(url, params).then(function (response) {
          return resolve(response);
        }).fail(function (error) {
          return reject(error);
        }) : reject('No url');
      });
    },
    post: function post() {
      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          url = _ref8.url,
          data = _ref8.data,
          _ref8$formdata = _ref8.formdata,
          formdata = _ref8$formdata === undefined ? false : _ref8$formdata,
          contentType = _ref8.contentType;

      return new Promise(function (resolve, reject) {
        if (formdata) {
          var _formdata = new FormData();
          for (var param in data) {
            _formdata.append(param, data[param]);
          }
          $.ajax({
            type: 'POST',
            url: url,
            data: _formdata,
            processData: false,
            contentType: false
          }).then(function (response) {
            resolve(response);
          }).fail(function (error) {
            reject(error);
          });
        } else if (contentType) {
          $.ajax({
            type: 'POST',
            url: url,
            data: data,
            processData: false,
            contentType: contentType || false
          }).then(function (response) {
            resolve(response);
          }).fail(function (error) {
            reject(error);
          });
        } else {
          $.post(url, data).then(function (response) {
            resolve(response);
          }).fail(function (error) {
            reject(error);
          });
        }
      });
    },
    htmlescape: function htmlescape(string) {
      string = string.replace("&", "&amp;");
      string = string.replace("<", "&lt;");
      string = string.replace(">", "&gt;");
      string = string.replace('"', "&quot;");
      return string;
    },
    fileDownload: function fileDownload() {
      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          url = _ref9.url,
          data = _ref9.data,
          _ref9$httpMethod = _ref9.httpMethod,
          httpMethod = _ref9$httpMethod === undefined ? "POST" : _ref9$httpMethod;

      return new Promise(function (resolve, reject) {
        $.fileDownload(url, {
          httpMethod: httpMethod,
          data: data
        }).done(function () {
          resolve();
        }).fail(function () {
          reject();
        });
      });
    }
  },
  createSingleFieldParameter: function createSingleFieldParameter(_ref10) {
    var field = _ref10.field,
        value = _ref10.value,
        _ref10$operator = _ref10.operator,
        operator = _ref10$operator === undefined ? 'eq' : _ref10$operator,
        _ref10$logicop = _ref10.logicop,
        logicop = _ref10$logicop === undefined ? null : _ref10$logicop;

    logicop = logicop && '|' + logicop;
    return field + '|' + operator.toLowerCase() + '|' + encodeURIComponent(value) + (logicop || '');
  },
  createFilterFromString: function createFilterFromString(_ref11) {
    var layer = _ref11.layer,
        _ref11$search_endpoin = _ref11.search_endpoint,
        search_endpoint = _ref11$search_endpoin === undefined ? 'ows' : _ref11$search_endpoin,
        _ref11$filter = _ref11.filter,
        filter = _ref11$filter === undefined ? '' : _ref11$filter;

    var stringFilter = filter;
    switch (search_endpoint) {
      case 'ows':
        var layerName = layer.getWMSLayerName();
        var expression = new Expression({
          layerName: layerName,
          filter: stringFilter
        });
        filter = new Filter();
        filter.setExpression(expression.get());
        break;
      case 'api':
        //remove all blank space between operators
        Object.values(_operators.EXPRESSION_OPERATORS).forEach(function (operator) {
          var regexoperator = new RegExp('\\s+' + operator + '\\s+', 'g');
          stringFilter = stringFilter.replace(regexoperator, '' + operator);
          var regexsinglequote = new RegExp('\'' + operator, 'g');
          stringFilter = stringFilter.replace(regexsinglequote, '' + operator);
          regexsinglequote = new RegExp(operator + '\'', 'g');
          stringFilter = stringFilter.replace(regexsinglequote, '' + operator);
        });
        stringFilter = stringFilter.replace(/'$/g, '');
        filter = stringFilter.replace(/"/g, '');
        Object.entries(_operators.EXPRESSION_OPERATORS).forEach(function (_ref12) {
          var _ref13 = _slicedToArray(_ref12, 2),
              key = _ref13[0],
              value = _ref13[1];

          var re = new RegExp(value, "g");
          var replaceValue = value === 'AND' || value === 'OR' ? '|' + key + ',' : '|' + key + '|';
          filter = filter.replace(re, replaceValue);
        });
        //encode value
        filter = filter.split('|').map(function (value, index) {
          return (index + 1) % 3 === 0 ? encodeURIComponent(value) : value;
        }).join('|');
        break;
    }
    return filter;
  },

  /**
   *
   * @param layer single layer or an array of layers
   * @param search_endpoint
   * @param inputs
   * @returns {*}
   */
  createFilterFormInputs: function createFilterFormInputs(_ref14) {
    var layer = _ref14.layer,
        _ref14$search_endpoin = _ref14.search_endpoint,
        search_endpoint = _ref14$search_endpoin === undefined ? 'ows' : _ref14$search_endpoin,
        _ref14$inputs = _ref14.inputs,
        inputs = _ref14$inputs === undefined ? [] : _ref14$inputs;

    var isLayerArray = Array.isArray(layer);
    var filter = void 0;
    var filters = []; // in case of layer is an array
    switch (search_endpoint) {
      case 'ows':
        if (isLayerArray) {
          layer.forEach(function (layer) {
            var expression = new Expression();
            var layerName = layer.getWMSLayerName();
            expression.createExpressionFromFilter(inputs, layerName);
            filter = new Filter();
            filter.setExpression(expression.get());
            filters.push(filter);
          });
        } else {
          var expression = new Expression();
          var layerName = layer.getWMSLayerName();
          expression.createExpressionFromFilter(inputs, layerName);
          filter = new Filter();
          filter.setExpression(expression.get());
        }
        break;
      case 'api':
        var inputsLength = inputs.length - 1;
        var fields = inputs.map(function (input, index) {
          return utils.createSingleFieldParameter({
            field: input.attribute,
            value: input.value,
            operator: input.operator,
            logicop: index < inputsLength ? input.logicop : null
          });
        });
        filter = fields.length ? fields.join() : undefined;
        isLayerArray && layer.forEach(function () {
          return filters.push(filter);
        });
        break;
    }
    return isLayerArray ? filters : filter;
  },

  //method to create filter from field based on search_endpoint
  createFilterFormField: function createFilterFormField(_ref15) {
    var layer = _ref15.layer,
        _ref15$search_endpoin = _ref15.search_endpoint,
        search_endpoint = _ref15$search_endpoin === undefined ? 'ows' : _ref15$search_endpoin,
        field = _ref15.field,
        value = _ref15.value,
        _ref15$operator = _ref15.operator,
        operator = _ref15$operator === undefined ? 'eq' : _ref15$operator;

    var filter = void 0;
    switch (search_endpoint) {
      case 'ows':
        var expression = new Expression();
        var layerName = layer.getWMSLayerName();
        expression.createExpressionFromField({
          layerName: layerName,
          field: field,
          value: value,
          operator: operator
        });
        filter = new Filter();
        filter.setExpression(expression.get());
        break;
      case 'api':
        filter = utils.createSingleFieldParameter({
          field: field,
          value: value,
          operator: operator
        });
        break;
    }
    return filter;
  },
  splitContextAndMethod: function splitContextAndMethod() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _string$split = string.split(':'),
        _string$split2 = _slicedToArray(_string$split, 2),
        context = _string$split2[0],
        method = _string$split2[1];

    return {
      context: context,
      method: method
    };
  },


  /**
   * Convert Hex value color to RGB array
   * @param color
   * @returns {number[]}
   */
  colorHEXToRGB: function colorHEXToRGB() {
    var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#FFFFFF';

    var r = parseInt(color.substr(1, 2), 16);
    var g = parseInt(color.substr(3, 2), 16);
    var b = parseInt(color.substr(5, 2), 16);
    return [r, g, b];
  }
};

module.exports = utils;

},{"../layers/filter/operators":439,"core/layers/filter/expression":437,"core/layers/filter/filter":438,"core/utils/geo":484}],486:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Validator = require('./validator');

function CheckBoxValidator(options) {
  base(this, options);
  this.validate = function (value) {
    var values = this.options.values || [];
    return values.indexOf(value) !== -1;
  };
}

inherit(CheckBoxValidator, Validator);

module.exports = CheckBoxValidator;

},{"./validator":492,"core/utils/utils":485}],487:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Validator = require('./validator');

function DateTimePickerValidator(options) {
  base(this, options);
  this.validate = function (value, options) {
    var fielddatetimeformat = options.fielddatetimeformat;
    return moment(value, fielddatetimeformat, true).isValid();
  };
}
inherit(DateTimePickerValidator, Validator);

module.exports = DateTimePickerValidator;

},{"./validator":492,"core/utils/utils":485}],488:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Validator = require('./validator');

function FloatValidator(options) {
  base(this, options);
  this.validate = function (value) {
    var float = Number(1 * value);
    return !Number.isNaN(float) && float <= 2147483647;
  };
}

inherit(FloatValidator, Validator);

module.exports = FloatValidator;

},{"./validator":492,"core/utils/utils":485}],489:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Validator = require('./validator');

function IntegerValidator(options) {
  base(this, options);
  this.validate = function (value) {
    var integer = 1 * value;
    return !_.isNaN(integer) ? Number.isSafeInteger(integer) && integer <= 2147483647 : false;
  };
}

inherit(IntegerValidator, Validator);

module.exports = IntegerValidator;

},{"./validator":492,"core/utils/utils":485}],490:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Validator = require('./validator');

function RadioValidator(options) {
  base(this, options);
}

inherit(RadioValidator, Validator);

module.exports = RadioValidator;

},{"./validator":492,"core/utils/utils":485}],491:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Validator = require('./validator');

function RangeValidator() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  var min = options.min,
      max = options.max;

  this.validate = function (value) {
    value = 1 * value;
    return value >= min && value <= max;
  };
}

inherit(RangeValidator, Validator);

module.exports = RangeValidator;

},{"./validator":492,"core/utils/utils":485}],492:[function(require,module,exports){
function InputValidator() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.options = options;
  this.validate = function () {
    return true; // always true. Generic validator
  };
}

module.exports = InputValidator;

},{}],493:[function(require,module,exports){
var Validators = {
  validators: {
    float: require('./float'),
    integer: require('./integer'),
    checkbox: require('./checkbox'),
    datetimepicker: require('./datetimepicker'),
    text: require('./validator'),
    string: require('./validator'),
    radio: require('./radio'),
    default: require('./validator'),
    range: require('./range')
  },

  get: function get(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var Validator = this.validators[type] || this.validators.default;
    return new Validator(options);
  }
};

module.exports = Validators;

},{"./checkbox":486,"./datetimepicker":487,"./float":488,"./integer":489,"./radio":490,"./range":491,"./validator":492}],494:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var Queque = require('./queque');

//Class Flow of workflow step by step
function Flow() {
  var steps = [];
  var inputs = void 0;
  var counter = 0;
  var context = null;
  var d = void 0;
  var _workflow = void 0;
  this.queques = {
    end: new Queque(),
    micro: new Queque()
  };
  //start workflow
  this.start = function (workflow) {
    d = $.Deferred();
    if (counter > 0) {
      console.log("reset workflow before restarting");
    }
    _workflow = workflow;
    inputs = workflow.getInputs();
    context = workflow.getContext();
    steps = workflow.getSteps();
    // check if there are steps
    if (steps && steps.length) {
      //run step (first)
      this.runStep(steps[0], inputs, context);
    }
    // return a promise that will be reolved if all step go right
    return d.promise();
  };

  //run step
  this.runStep = function (step, inputs) {
    var _this = this;

    //run step that run task
    _workflow.setMessages({
      help: step.state.help
    });
    var runMicroTasks = this.queques.micro.getLength();
    step.run(inputs, context, this.queques).then(function (outputs) {
      runMicroTasks && _this.queques.micro.run();
      _this.onDone(outputs);
    }).fail(function (error) {
      _this.onError(error);
    });
  };

  //check if all step are resolved
  this.onDone = function (outputs) {
    counter++;
    if (counter === steps.length) {
      counter = 0;
      d.resolve(outputs);
      return;
    }
    this.runStep(steps[counter], outputs);
  };

  // in case of error
  this.onError = function (err) {
    counter = 0;
    this.clearQueques();
    d.reject(err);
  };

  // stop flow
  this.stop = function () {
    var d = $.Deferred();
    steps[counter].isRunning() ? steps[counter].stop() : null;
    this.clearQueques();
    if (counter > 0) {
      // set counter to 0
      counter = 0;
      // reject flow
      d.reject();
    } else {
      //reject to force rollback session
      d.resolve();
    }
    return d.promise();
  };
  base(this);
}

inherit(Flow, G3WObject);

var proto = Flow.prototype;

proto.clearQueques = function () {
  this.queques.micro.clear();
  this.queques.end.clear();
};

module.exports = Flow;

},{"./queque":495,"core/g3wobject":415,"core/utils/utils":485}],495:[function(require,module,exports){
function Queque() {
  this.tasks = [];
}

var proto = Queque.prototype;

proto.addTask = function (task) {
  this.tasks.push(task);
};

proto.run = function () {
  var reverse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  while (this.tasks.length) {
    var task = reverse ? this.tasks.pop() : this.tasks.shift();
    task();
  }
};

proto.flush = function () {
  return this.tasks.splice(0);
};

proto.getLength = function () {
  return this.tasks.length;
};

proto.clear = function () {
  this.run();
  this.tasks = [];
};

module.exports = Queque;

},{}],496:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function Step() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this._inputs = options.inputs || null;
  this._task = options.task || null;
  this._outputs = options.outputs || null;
  //dynamic state of step
  this.state = {
    id: options.id || null,
    name: options.name || null,
    help: options.help || null, // help to show wat the user has to do
    running: false, // running
    error: null, // error
    message: options.message || null // message
  };
}

inherit(Step, G3WObject);

var proto = Step.prototype;

// method to start task
proto.run = function (inputs, context, queques) {
  var _this = this;

  //emit run
  this.emit('run', { inputs: inputs, context: context });
  var d = $.Deferred();
  if (this._task) {
    try {
      // change state to running
      this.state.running = true;
      this._task.run(inputs, context, queques).then(function (outputs) {
        _this.stop();
        d.resolve(outputs);
      }).fail(function (err) {
        _this.stop();
        d.reject(err);
      });
    } catch (err) {
      this.state.error = err;
      this.state.error = 'Problem ..';
      this.stop();
      d.reject(err);
    }
  }
  return d.promise();
};

// stop step
proto.stop = function () {
  // stop task
  this._task.stop();
  // running to false
  this.state.running = false;
  //emit run
  this.emit('stop');
};

// revert task
proto.revert = function () {
  if (this._task && this._task.revert) this._task.revert();
};

//panic
proto.panic = function () {
  if (this._task && this._task.panic) this._task.panic();
};

proto.getId = function () {
  return this.state.id;
};

proto.getName = function () {
  return this.state.name;
};

proto.getHelp = function () {
  return this.state.help;
};

proto.getError = function () {
  return this.state.error;
};

proto.getMessage = function () {
  return this.state.message;
};

proto.isRunning = function () {
  return this.state.running;
};

proto.setInputs = function (inputs) {
  this._inputs = inputs;
};

proto.getInputs = function () {
  return this._inputs;
};

proto.setTask = function (task) {
  this._task = task;
};

proto.getTask = function () {
  return this._task;
};

proto.setOutputs = function (outputs) {
  this._outputs = outputs;
};

proto.getOutputs = function () {
  return this._outputs;
};

Step.MESSAGES = {
  help: null
};

module.exports = Step;

},{"core/g3wobject":415,"core/utils/utils":485}],497:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function Task() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.state = {
    usermessagesteps: {}
  };
}

inherit(Task, G3WObject);

var proto = Task.prototype;

proto.revert = function () {
  console.log('Revert to implemente ');
};

proto.panic = function () {
  console.log('Panic to implement ..');
};

proto.stop = function () {
  console.log('Task Stop to implement ..');
};

proto.run = function () {
  console.log('Wrong. This method has to be overwrite from task');
};

proto.setRoot = function (task) {
  this.state.root = task;
};

proto.getUserMessageSteps = function () {
  return this.state.usermessagesteps;
};

proto.setUserMessageSteps = function () {
  var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state.usermessagesteps = steps;
};

proto.setUserMessageStepDone = function (type) {
  if (type) this.state.usermessagesteps[type].done = true;
};

module.exports = Task;

},{"core/g3wobject":415,"core/utils/utils":485}],498:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    resolve = _require.resolve;

var G3WObject = require('core/g3wobject');
var Flow = require('./flow');
var WorkflowsStack = require('./workflowsstack');
var MESSAGES = require('./step').MESSAGES;
var createUserMessageStepsFactory = require('gui/workflow/createUserMessageStepsFactory');
var GUI = require('gui/gui');
//Class to manage flow of steps
function Workflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this._promise = null;
  // inputs mandatory to work with editing
  this._inputs = options.inputs || null;
  this._context = options.context || null;
  // flow object to control the flow
  this._flow = options.flow || new Flow();
  // all steps of flow
  this._steps = options.steps || [];
  // if is child of another workflow
  this._child = null;
  // stack workflowindex
  this._stackIndex = null;
  this._messages = MESSAGES;
  this._userMessageSteps = this._steps.reduce(function (messagesSteps, step) {
    var usermessagesteps = step.getTask().getUserMessageSteps();
    return usermessagesteps && _extends({}, messagesSteps, usermessagesteps) || messagesSteps;
  }, {});
}

inherit(Workflow, G3WObject);

var proto = Workflow.prototype;

proto.getContextService = function () {
  var context = this.getContext();
  return context.service;
};

proto.setContextService = function (service) {
  var context = this.getContext();
  context.service = service;
};

proto.getStackIndex = function () {
  return this._stackIndex;
};

proto.addChild = function (workflow) {
  if (this._child) this._child.addChild(workflow);else this._child = workflow;
};

proto.removeChild = function () {
  if (this._child) {
    var index = this._child.getStackIndex();
    WorkflowsStack.removeAt(index);
  }
  this._child = null;
};

proto._setInputs = function (inputs) {
  this._inputs = inputs;
};

proto.getInputs = function () {
  return this._inputs;
};

proto.setContext = function (context) {
  this._context = context;
};

proto.getContext = function () {
  return this._context;
};

proto.getFlow = function () {
  return this._flow;
};

proto.setFlow = function (flow) {
  this._flow = flow;
};

proto.addStep = function (step) {
  this._steps.push(step);
};

proto.setSteps = function (steps) {
  this._steps = steps;
};

proto.getSteps = function () {
  return this._steps;
};

proto.getStep = function (index) {
  return this._steps[index];
};

proto.setMessages = function (messages) {
  Object.assign(this._messages, messages);
};

proto.getMessages = function () {
  return this._messages;
};

proto.clearMessages = function () {
  this._messages.help = null;
  this._isThereUserMessaggeSteps() && this.clearUserMessagesSteps();
};

proto.getLastStep = function () {
  var length = this._steps.length;
  return length ? this._steps[length] : null;
};

proto.getRunningStep = function () {
  return this._steps.find(function (step) {
    return step.isRunning();
  });
};

//stop all workflow children
proto._stopChild = function () {
  return this._child ? this._child.stop() : resolve();
};

proto._isThereUserMessaggeSteps = function () {
  return Object.keys(this._userMessageSteps).length;
};

proto.reject = function () {
  this._promise && this._promise.reject();
};

proto.resolve = function () {
  this._promise && this._promise.resolve();
};

// start workflow
proto.start = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  this._promise = d;
  this._inputs = options.inputs;
  this._context = options.context || {};
  //check if are workflow running
  if (WorkflowsStack.getLength() && WorkflowsStack.getCurrent() !== this) {
    WorkflowsStack.getCurrent().addChild(this);
  }
  this._stackIndex = WorkflowsStack.push(this);
  this._flow = options.flow || this._flow;
  this._steps = options.steps || this._steps;
  var showUserMessage = this._isThereUserMessaggeSteps();
  if (showUserMessage) {
    var stepsComponent = createUserMessageStepsFactory({
      steps: this._userMessageSteps
    });
    GUI.showUserMessage({
      title: 'sdk.workflow.steps.title',
      type: 'tool',
      position: 'left',
      size: 'small',
      closable: false,
      hooks: {
        body: stepsComponent
      }
    });
  }

  this._flow.start(this).then(function (outputs) {
    showUserMessage && setTimeout(function () {
      _this.clearUserMessagesSteps();
      d.resolve(outputs);
    }, 500) || d.resolve(outputs);
  }).fail(function (error) {
    showUserMessage && _this.clearUserMessagesSteps();
    d.reject(error);
  });
  this.emit('start');
  return d.promise();
};

// stop workflow during flow
proto.stop = function () {
  var _this2 = this;

  this._promise = null;
  ////console.log('Workflow stopping .... ');
  var d = $.Deferred();
  // stop child workflow indpendent from father workflow
  this._stopChild()
  // in every case remove child
  .always(function () {
    _this2.removeChild();
    WorkflowsStack.removeAt(_this2.getStackIndex());
    // call stop flow
    _this2._flow.stop().then(function () {
      return d.resolve();
    }).fail(function (err) {
      return d.reject(err);
    }).always(function () {
      return _this2.clearMessages();
    });
  });
  this.emit('stop');
  return d.promise();
};

proto.clearUserMessagesSteps = function () {
  this._resetUserMessaggeStepsDone();
  GUI.closeUserMessage();
};

proto._resetUserMessaggeStepsDone = function () {
  var _this3 = this;

  Object.keys(this._userMessageSteps).forEach(function (type) {
    var userMessageSteps = _this3._userMessageSteps[type];
    userMessageSteps.done = false;
    if (userMessageSteps.buttonnext) userMessageSteps.buttonnext.disabled = true;
  });
};

module.exports = Workflow;

},{"./flow":494,"./step":496,"./workflowsstack":499,"core/g3wobject":415,"core/utils/utils":485,"gui/gui":575,"gui/workflow/createUserMessageStepsFactory":733}],499:[function(require,module,exports){
// Store all workflow activated
var WorkFlowsStack = function WorkFlowsStack() {
  this._workflows = [];
  this.push = function (workflow) {
    if (this._workflows.indexOf(workflow) === -1) return this._workflows.push(workflow) - 1;
    return this._workflows.indexOf(workflow);
  };

  this.getParent = function () {
    var index = this._getCurrentIndex();
    return index > 0 && this._workflows[index - 1];
  };

  this.pop = function () {
    return this._workflows.pop();
  };

  this.getLength = function () {
    return this._workflows.length;
  };

  this._getCurrentIndex = function () {
    var currentWorkflow = this.getCurrent();
    return this._workflows.findIndex(function (workfow) {
      return workfow === currentWorkflow;
    });
  };

  this.getCurrent = function () {
    return this.getLast();
  };

  this.getLast = function () {
    var length = this._workflows.length;
    return length ? this._workflows[length - 1] : null;
  };

  this.getFirst = function () {
    return this._workflows[0];
  };

  this.removeAt = function (index) {
    this._workflows.splice(index, 1);
  };

  this.getAt = function (index) {
    return this._workflows[index];
  };

  this.insertAt = function (index, workflow) {
    this._workflows[index] = workflow;
  };
};

module.exports = new WorkFlowsStack();

},{}],500:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dev = require('../../config/dev');

var _dev2 = _interopRequireDefault(_dev);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProjectsRegistry = require('core/project/projectsregistry');
var ApplicationService = require('core/applicationservice');
var GUI = require('gui/gui');
// Handle ApplicationService on ready event
ApplicationService.once('ready', function () {});
//andle obtaininitConfig
ApplicationService.once('initconfig', function () {
  var _DEVCONFIG$plugins = _dev2.default.plugins,
      plugins = _DEVCONFIG$plugins === undefined ? {} : _DEVCONFIG$plugins;

  Object.keys(plugins).forEach(function (plugin) {
    window.initConfig.group.plugins[plugin] = window.initConfig.group.plugins[plugin] ? _extends({}, window.initConfig.group.plugins[plugin], plugins[plugin]) : plugins[plugin];
  });
});
// Handle project configuration to insert custom element on project
ProjectsRegistry.oncebefore('setCurrentProject', function (project) {});

//Ready GUI
GUI.once('ready', function () {});

},{"../../config/dev":735,"core/applicationservice":401,"core/project/projectsregistry":478,"gui/gui":575}],501:[function(require,module,exports){
var Control = require('./control');
function AddLayersControl() {
  var options = {
    name: "addlayer",
    tipLabel: "sdk.mapcontrols.addlayer.tooltip",
    label: "\uE907"
  };
  Control.call(this, options);
  this._layerstore = null;
}

ol.inherits(AddLayersControl, Control);

var proto = AddLayersControl.prototype;

proto.setMap = function (map) {
  var _this = this;

  Control.prototype.setMap.call(this, map);
  $(this.element).on('click', function () {
    return _this.dispatchEvent('addlayer');
  });
};

proto.layout = function (map) {
  Control.prototype.layout.call(this, map);
};

proto.getLayersSore = function () {
  return this._layerstore;
};

proto.setLayersStore = function (layersStore) {
  this._layerstore = layersStore;
};

module.exports = AddLayersControl;

},{"./control":503}],502:[function(require,module,exports){
var utils = require('../utils');
var AreaIteraction = require('../interactions/areainteraction');
var MeasureControl = require('./measurecontrol');

var AreaControl = function AreaControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    tipLabel: "sdk.mapcontrols.measures.area.tooltip",
    label: '\uE909',
    clickmap: true, // set ClickMap
    interactionClass: AreaIteraction
  };
  options = utils.merge(options, _options);
  MeasureControl.call(this, options);
};

ol.inherits(AreaControl, MeasureControl);

module.exports = AreaControl;

},{"../interactions/areainteraction":522,"../utils":533,"./measurecontrol":507}],503:[function(require,module,exports){
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('./utils'),
    layout = _require.layout;

var Control = function Control() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var name = options.name || "";
  this._enabled = options.enabled === false ? false : true;
  this.offline = options.offline !== undefined ? options.offline : true;
  this.name = name.split(' ').join('-').toLowerCase();
  this.id = this.name + '_' + Math.floor(Math.random() * 1000000);
  this.eventKeys = {}; // store eventKey and original havenHandler
  /*
    tl: top-left
    tr: top-right
    bl: bottom-left
    bt: bottom-right
   */
  this.positionCode = options.position || 'tl';
  this.priority = options.priority || 0;
  if (!options.element) {
    var className = "ol-" + this.name.split(' ').join('-').toLowerCase();
    var customClass = options.customClass;
    var tipLabel = options.tipLabel || this.name;
    var label = options.label || '';
    var mapControlButtonVue = Vue.extend({
      functional: true,
      render: function render(h) {
        var _class;

        return h('div', {
          class: (_class = {}, _defineProperty(_class, className, !!className), _defineProperty(_class, 'ol-unselectable', true), _defineProperty(_class, 'ol-control', true), _class)
        }, [h('button', {
          attrs: {
            type: 'button'
          },
          directives: [{
            name: 't-tooltip',
            value: tipLabel
          }]
        }, [label, h('i', {
          class: _defineProperty({}, customClass, !!customClass)
        })])]);
      }
    });
    var mapControlButtonDOMElement = new mapControlButtonVue().$mount().$el;
    options.element = mapControlButtonDOMElement;
  }
  var buttonClickHandler = options.buttonClickHandler || Control.prototype._handleClick.bind(this);
  $(options.element).on('click', buttonClickHandler);
  ol.control.Control.call(this, options);
  this._postRender();
};

ol.inherits(Control, ol.control.Control);

var proto = Control.prototype;

proto.setEventKey = function (_ref) {
  var eventType = _ref.eventType,
      eventKey = _ref.eventKey;

  this.eventKeys[eventType] = {
    eventKey: eventKey,
    originalHandler: eventKey.linstener
  };
};

proto.resetOriginalHandlerEvent = function (eventType) {
  var eventKey = this.eventKeys[eventType].eventKey;
  eventKey && ol.Observable.unByKey(eventKey);
  this.eventKeys[eventType].eventKey = this.on(eventType, this.eventKeys[eventType].originalHandler);
};

proto.overwriteEventHandler = function (_ref2) {
  var eventType = _ref2.eventType,
      handler = _ref2.handler;

  var eventKey = this.eventKeys[eventType].eventKey;
  eventKey && ol.Observable.unByKey(eventKey);
  this.eventKeys[eventType].eventKey = this.on(eventType, handler);
};

proto.getPosition = function (positionCode) {
  positionCode = positionCode || this.positionCode;
  var position = {};
  position['top'] = positionCode.indexOf('t') > -1 ? true : false;
  position['left'] = positionCode.indexOf('l') > -1 ? true : false;
  position['bottom'] = positionCode.indexOf('b') > -1 ? true : false;
  position['right'] = positionCode.indexOf('r') > -1 ? true : false;
  return position;
};

proto._handleClick = function (event) {
  var _this = this;

  event.preventDefault();
  var map = this.getMap();
  var resetControl = null;
  // remove all the other, eventually toggled, interactioncontrols
  var controls = map.getControls();
  controls.forEach(function (control) {
    if (control.id && control.toggle && control.id !== _this.id) {
      control.toggle(false);
      if (control.name === 'reset') resetControl = control;
    }
  });
  if (!this._toggled && resetControl) resetControl.toggle(true);
  this.dispatchEvent('controlclick');
};

//shift of control position
proto.shiftPosition = function (position) {
  $(this.element).css(hWhere, position + 'px');
};

// layout handler
proto.layout = function (map) {
  if (map) {
    var position = this.getPosition();
    var element = $(this.element);
    layout({ map: map, position: position, element: element });
  }
};

// change layout of controls // overwrite to customize beahviour
proto.changelayout = function (map) {};

proto.showHide = function () {
  $(this.element).toggle();
};

//called when a control is added ore removed to map (added: map is an ol.Map instance , removed map is null)
proto.setMap = function (map) {
  if (map) {
    this.layout(map);
    ol.control.Control.prototype.setMap.call(this, map);
  }
};

//hide control and move all controls that sit on his right position
proto.hideControl = function () {
  var position = $(this.element).position().left;
  var controlWidth = $(this.element).outerWidth();
  var newPosition = position;
  var controls = $(this.element).siblings('.ol-control-tl');
  controls.each(function () {
    if ($(this).position().left > position) {
      newPosition = $(this).position().left;
      if (controlWidth > $(this).outerWidth()) {
        position = position + (controlWidth - $(this).outerWidth());
      }
      $(this).css('left', position + 'px');
      position = newPosition;
      controlWidth = $(this).outerWidth();
    }
  });
  $(this.element).hide();
};

proto.setEnable = function (bool, toggled) {
  var controlButton = $(this.element).find('button').first();
  if (bool) {
    controlButton.removeClass('g3w-ol-disabled');
    toggled && controlButton.addClass('g3w-ol-toggled');
  } else {
    controlButton.addClass('g3w-ol-disabled');
    controlButton.removeClass('g3w-ol-toggled');
    this._interaction && this._interaction.setActive(false);
  }
  this._enabled = bool;
};

proto.getEnable = function () {
  return this._enabled;
};

proto._postRender = function () {};

module.exports = Control;

},{"./utils":519}],504:[function(require,module,exports){
var InteractionControl = require('./interactioncontrol');
function GeolocationControl() {
  var options = {
    offline: false,
    name: "geolocation",
    tipLabel: "sdk.mapcontrols.geolocation.tooltip",
    label: "\uE904"
  };
  this._layer = new ol.layer.Vector({
    source: new ol.source.Vector(),
    style: new ol.style.Style({
      text: new ol.style.Text({
        text: "\uF3C5",
        font: '900 3em "Font Awesome 5 Free"',
        fill: new ol.style.Fill({
          color: 'red'
        })
      })
    })
  });
  InteractionControl.call(this, options);
}

ol.inherits(GeolocationControl, InteractionControl);

var proto = GeolocationControl.prototype;

/**
 * Method to add market position layer and feature point always on top of map
 * @param map
 * @param coordinates
 * @param show
 * @private
 */
proto._showMarker = function (_ref) {
  var map = _ref.map,
      coordinates = _ref.coordinates,
      _ref$show = _ref.show,
      show = _ref$show === undefined ? true : _ref$show;

  this._layer.getSource().clear();
  if (show) {
    map.getView().setCenter(coordinates);
    var feature = new ol.Feature({
      geometry: new ol.geom.Point(coordinates)
    });
    this._layer.getSource().addFeature(feature);
    map.addLayer(this._layer);
  } else map.removeLayer(this._layer);
};

proto.setMap = function (map) {
  var _this = this;

  InteractionControl.prototype.setMap.call(this, map);
  var geolocation = new ol.Geolocation({
    projection: map.getView().getProjection(),
    tracking: true,
    trackingOptions: {
      enableHighAccuracy: true
    }
  });

  geolocation.once('change:position', function () {
    var coordinates = geolocation.getPosition();
    if (coordinates) {
      $(_this.element).removeClass('g3w-ol-disabled');
      _this.on('toggled', function (event) {
        var coordinates = geolocation.getPosition();
        var show = event.target.isToggled();
        _this._showMarker({ map: map, coordinates: coordinates, show: show });
      });
    } else _this.hideControl();
  });

  geolocation.once('error', function (evt) {
    _this.hideControl();
    _this._layer = null;
    evt.code !== 1 && _this.dispatchEvent('error');
  });
};

module.exports = GeolocationControl;

},{"./interactioncontrol":505}],505:[function(require,module,exports){
var Control = require('./control');
var GUI = require('gui/gui');

var InteractionControl = function InteractionControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      _options$toggled = options.toggled,
      toggled = _options$toggled === undefined ? false : _options$toggled,
      _options$clickmap = options.clickmap,
      clickmap = _options$clickmap === undefined ? false : _options$clickmap,
      _options$interactionC = options.interactionClass,
      interactionClass = _options$interactionC === undefined ? null : _options$interactionC,
      _options$autountoggle = options.autountoggle,
      autountoggle = _options$autountoggle === undefined ? false : _options$autountoggle,
      _options$geometryType = options.geometryTypes,
      geometryTypes = _options$geometryType === undefined ? [] : _options$geometryType,
      _options$onselectlaye = options.onselectlayer,
      onselectlayer = _options$onselectlaye === undefined ? false : _options$onselectlaye,
      _options$onhover = options.onhover,
      onhover = _options$onhover === undefined ? false : _options$onhover,
      _options$help = options.help,
      help = _options$help === undefined ? null : _options$help,
      _options$interactionC2 = options.interactionClassOptions,
      interactionClassOptions = _options$interactionC2 === undefined ? {} : _options$interactionC2;

  this._visible = visible;
  this._toggled = toggled;
  this.clickmap = clickmap; // check if interact with map
  this._interactionClass = interactionClass;
  this._interaction = null;
  this._autountoggle = autountoggle;
  this._geometryTypes = geometryTypes; // array of types geometries
  this._onSelectLayer = onselectlayer;
  this._onhover = onhover;
  this._help = help;
  this._helpButton = null;
  this._interactionClassOptions = interactionClassOptions;
  options.buttonClickHandler = InteractionControl.prototype._handleClick.bind(this);
  Control.call(this, options);
  // create an help message
  this._help && this._createModalHelp();
};

ol.inherits(InteractionControl, Control);

var proto = InteractionControl.prototype;

proto.isClickMap = function () {
  return this.clickmap;
};

/**
 * Enable map control dom
 */
proto.enable = function () {
  $(this.element).removeClass('g3w-disabled');
};

proto.disable = function () {
  $(this.element).addClass('g3w-disabled');
};

proto.isVisible = function () {
  return this._visible;
};

proto.setVisible = function (bool) {
  this._visible = bool;
};

//show help message
proto._showModalHelp = function () {
  GUI.showUserMessage({
    type: 'info',
    message: this._help,
    position: 'left',
    size: 'small',
    autoclose: false
  });
};

proto._closeModalHelp = function () {
  GUI.closeUserMessage();
};

// create modal help
proto._createModalHelp = function () {
  var _this = this;

  if (this._onhover) {
    this._helpButton = $('<span style="display:none" class="info_mapcontrol_button">i</span>');
    $(this.element).prepend(this._helpButton);
    this._helpButton.on('click', function (event) {
      event.stopPropagation();
      _this._showModalHelp();
    });
    $(this.element).hover(function () {
      return _this._helpButton.show();
    });
    $(this.element).mouseleave(function () {
      return _this._helpButton.hide();
    });
  }
};

proto.getGeometryTypes = function () {
  return this._geometryTypes;
};

proto.getInteraction = function () {
  return this._interaction;
};

proto.isToggled = function () {
  return this._toggled;
};

/**
 *
 * Get dom bottom
 * @returns {JQuery<HTMLElement> | jQuery | HTMLElement}
 */
proto.getControlBottom = function () {
  return $(this.element).find('button').first();
};

proto.addClassToControlBottom = function () {
  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var controlButton = this.getControlBottom();
  controlButton.addClass(className);
};

proto.removeClassToControlBottom = function () {
  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var controlButton = this.getControlBottom();
  controlButton.removeClass(className);
};

// press or not press
proto.toggle = function (toggle) {
  toggle = toggle !== undefined ? toggle : !this._toggled;
  this._toggled = toggle;
  if (toggle) {
    //this._help && this._showModalHelp();
    this._interaction && this._interaction.setActive(true);
    this.addClassToControlBottom('g3w-ol-toggled');
  } else {
    this._help && this._helpButton.hide();
    this._interaction && this._interaction.setActive(false);
    this.removeClassToControlBottom('g3w-ol-toggled');
  }
  this.dispatchEvent('toggled', toggle);
};

proto.getGeometryTypes = function () {
  return this._geometryTypes;
};

proto.setGeometryTypes = function (types) {
  this._geometryTypes = types;
};

proto.onSelectLayer = function () {
  return this._onSelectLayer;
};

proto.setMap = function (map) {
  var _this2 = this;

  Control.prototype.setMap.call(this, map);
  if (!this._interaction && this._interactionClass) {
    this._interaction = new this._interactionClass(this._interactionClassOptions);
    map.addInteraction(this._interaction);
    this._interaction.setActive(false);
  }
  this._toggled && setTimeout(function () {
    _this2.toggle(true);
  });
};

proto._handleClick = function (e) {
  if (this._enabled) {
    this.toggle();
    Control.prototype._handleClick.call(this, e);
  }
};

proto.getIteraction = function () {
  return this._interaction;
};

module.exports = InteractionControl;

},{"./control":503,"gui/gui":575}],506:[function(require,module,exports){
var utils = require('../utils');
var LenghtIteraction = require('../interactions/lengthinteraction');
var MeasureControl = require('./measurecontrol');

var LengthControl = function LengthControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    tipLabel: "sdk.mapcontrols.measures.length.tooltip",
    label: '\uE908',
    clickmap: true, // set ClickMap
    interactionClass: LenghtIteraction
  };

  options = utils.merge(options, _options);
  MeasureControl.call(this, options);
};

ol.inherits(LengthControl, MeasureControl);

module.exports = LengthControl;

},{"../interactions/lengthinteraction":524,"../utils":533,"./measurecontrol":507}],507:[function(require,module,exports){
var InteractionControl = require('./interactioncontrol');

var MeasureControl = function MeasureControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._map = null;
  InteractionControl.call(this, options);
};

ol.inherits(MeasureControl, InteractionControl);

var proto = MeasureControl.prototype;

proto.setMap = function (map) {
  InteractionControl.prototype.setMap.call(this, map);
};

proto.toggle = function (toggle) {
  InteractionControl.prototype.toggle.call(this, toggle);
  if (!this.isToggled()) {
    //clean of the measure control if it was activated
    this.getIteraction().clear();
  }
};

module.exports = MeasureControl;

},{"./interactioncontrol":505}],508:[function(require,module,exports){
var MousePositionControl = function MousePositionControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.target = options.target || 'mouse-position-control';
  ol.control.MousePosition.call(this, options);
};

ol.inherits(MousePositionControl, ol.control.MousePosition);

module.exports = MousePositionControl;

var proto = MousePositionControl.prototype;

proto.offline = true;

proto.setEnable = function (bool) {
  bool ? $(this.element) : $(this.element);
};

proto.setMap = function (map) {
  if (map) {
    $(this.element).removeClass('ol-control');
    ol.control.MousePosition.prototype.setMap.call(this, map);
  }
};

},{}],509:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Control = require('./control');

function NominatimControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var self = this;
  this.options = {
    lonlat: options.lonlat,
    provider: 'osm',
    placeholder: options.placeholder || 'Città, indirizzo ... ',
    noresults: options.noresults || 'Nessun risultato ',
    notresponseserver: options.notresponseserver || 'Il server non risponde',
    targetType: 'text-input',
    lang: 'it-IT',
    limit: 5,
    keepOpen: true,
    preventDefault: false,
    autoComplete: false,
    autoCompleteMinLength: 4,
    debug: false,
    viewbox: options.bbox,
    bounded: 1,
    classMobile: options.isMobile ? 'nominatim-mobile' : '',
    mapCrs: options.mapCrs,
    fontIcon: options.fontIcon || "fa fa-search fas fa-search"
  };

  var inputQueryId = "gcd-input-query";
  var inputResetId = "gcd-input-reset";
  var cssClasses = {
    "namespace": "ol-geocoder",
    "spin": "gcd-pseudo-rotate",
    "hidden": "gcd-hidden",
    "country": "gcd-country",
    "city": "gcd-city",
    "road": "gcd-road",
    "olControl": "ol-control",
    "glass": {
      "container": "gcd-gl-container",
      "control": "gcd-gl-control",
      "button": "gcd-gl-btn",
      "input": "gcd-gl-input",
      "expanded": "gcd-gl-expanded",
      "reset": "gcd-gl-reset",
      "result": "gcd-gl-result"
    },
    "inputText": {
      "container": "gcd-txt-container",
      "control": "gcd-txt-control",
      "input": "gcd-txt-input",
      "reset": "gcd-txt-reset",
      "icon": "gcd-txt-glass",
      "result": "gcd-txt-result"
    }
  };

  var targetType = {
    GLASS: 'glass-button',
    INPUT: 'text-input'
  };
  var vars = Object.freeze({
    inputQueryId: inputQueryId,
    inputResetId: inputResetId,
    cssClasses: cssClasses,
    default: {
      inputQueryId: inputQueryId,
      inputResetId: inputResetId,
      cssClasses: cssClasses
    }
  });

  var utils = {
    toQueryString: function toQueryString(obj) {
      var this$1 = this;
      return Object.keys(obj).reduce(function (a, k) {
        a.push(_typeof(obj[k]) === 'object' ? this$1.toQueryString(obj[k]) : encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]));
        return a;
      }, []).join('&');
    },
    encodeUrlXhr: function encodeUrlXhr(url, data) {
      if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        var str_data = this.toQueryString(data);
        url += (/\?/.test(url) ? '&' : '?') + str_data;
      }
      return url;
    },
    json: function json(url, data) {
      return $.get(url, data);
    },
    jsonp: function jsonp(url, key, callback) {
      // https://github.com/Fresheyeball/micro-jsonp/blob/master/src/jsonp.js
      var head = document.head,
          script = document.createElement('script'),

      // generate minimally unique name for callback function
      callbackName = 'f' + Math.round(Math.random() * Date.now());

      // set request url
      script.setAttribute('src',
      /*  add callback parameter to the url
       where key is the parameter key supplied
       and callbackName is the parameter value */
      url + (url.indexOf('?') > 0 ? '&' : '?') + key + '=' + callbackName);

      /*  place jsonp callback on window,
       the script sent by the server should call this
       function as it was passed as a url parameter */
      window[callbackName] = function (json) {
        window[callbackName] = undefined;

        // clean up script tag created for request
        setTimeout(function () {
          head.removeChild(script);
        }, 0);

        // hand data back to the user
        callback(json);
      };

      // actually make the request
      head.appendChild(script);
    },
    now: function now() {
      // Polyfill for window.performance.now()
      // @license http://opensource.org/licenses/MIT
      // copyright Paul Irish 2015
      // https://gist.github.com/paulirish/5438650
      if ('performance' in window === false) {
        window.performance = {};
      }

      Date.now = Date.now || function () {
        // thanks IE8
        return new Date().getTime();
      };

      if ('now' in window.performance === false) {

        var nowOffset = Date.now();

        if (performance.timing && performance.timing.navigationStart) {
          nowOffset = performance.timing.navigationStart;
        }

        window.performance.now = function now() {
          return Date.now() - nowOffset;
        };
      }
      return window.performance.now();
    },

    flyTo: function flyTo(map, coord, duration, resolution) {
      resolution = resolution || 2.388657133911758;
      duration = duration || 500;
      var view = map.getView();
      view.animate({ duration: duration, resolution: resolution }, { duration: duration, center: coord });
    },
    randomId: function randomId(prefix) {
      var id = this.now().toString(36);
      return prefix ? prefix + id : id;
    },
    isNumeric: function isNumeric(str) {
      return (/^\d+$/.test(str)
      );
    },
    classRegex: function classRegex(classname) {
      return new RegExp("(^|\\s+) " + classname + " (\\s+|$)");
    },
    /**
     * @param {Element|Array<Element>} element DOM node or array of nodes.
     * @param {String|Array<String>} classname Class or array of classes.
     * For example: 'class1 class2' or ['class1', 'class2']
     * @param {Number|undefined} timeout Timeout to remove a class.
     */
    addClass: function addClass(element, classname, timeout) {
      var this$1 = this;

      if (Array.isArray(element)) {
        element.forEach(function (each) {
          this$1.addClass(each, classname);
        });
        return;
      }

      var array = Array.isArray(classname) ? classname : classname.split(/\s+/);
      var i = array.length;

      while (i--) {
        if (!this$1.hasClass(element, array[i])) {
          this$1._addClass(element, array[i], timeout);
        }
      }
    },
    _addClass: function _addClass(el, klass, timeout) {
      var this$1 = this;

      // use native if available
      if (el.classList) {
        el.classList.add(klass);
      } else {
        el.className = (el.className + ' ' + klass).trim();
      }

      if (timeout && this.isNumeric(timeout)) {
        window.setTimeout(function () {
          this$1._removeClass(el, klass);
        }, timeout);
      }
    },
    /**
     * @param {Element|Array<Element>} element DOM node or array of nodes.
     * @param {String|Array<String>} classname Class or array of classes.
     * For example: 'class1 class2' or ['class1', 'class2']
     * @param {Number|undefined} timeout Timeout to add a class.
     */
    removeClass: function removeClass(element, classname, timeout) {
      var this$1 = this;

      if (Array.isArray(element)) {
        element.forEach(function (each) {
          this$1.removeClass(each, classname, timeout);
        });
        return;
      }

      var array = Array.isArray(classname) ? classname : classname.split(/\s+/);
      var i = array.length;

      while (i--) {
        if (this$1.hasClass(element, array[i])) {
          this$1._removeClass(element, array[i], timeout);
        }
      }
    },
    _removeClass: function _removeClass(el, klass, timeout) {
      var this$1 = this;

      if (el.classList) {
        el.classList.remove(klass);
      } else {
        el.className = el.className.replace(this.classRegex(klass), ' ').trim();
      }
      if (timeout && this.isNumeric(timeout)) {
        window.setTimeout(function () {
          this$1._addClass(el, klass);
        }, timeout);
      }
    },
    /**
     * @param {Element} element DOM node.
     * @param {String} classname Classname.
     * @return {Boolean}
     */
    hasClass: function hasClass(element, c) {
      // use native if available
      return element.classList ? element.classList.contains(c) : this.classRegex(c).test(element.className);
    },
    /**
     * @param {Element|Array<Element>} element DOM node or array of nodes.
     * @param {String} classname Classe.
     */
    toggleClass: function toggleClass(element, classname) {
      var this$1 = this;

      if (Array.isArray(element)) {
        element.forEach(function (each) {
          this$1.toggleClass(each, classname);
        });
        return;
      }

      // use native if available
      if (element.classList) {
        element.classList.toggle(classname);
      } else {
        if (this.hasClass(element, classname)) {
          this._removeClass(element, classname);
        } else {
          this._addClass(element, classname);
        }
      }
    },
    /**
     * Abstraction to querySelectorAll for increased
     * performance and greater usability
     * @param {String} selector
     * @param {Element} context (optional)
     * @param {Boolean} find_all (optional)
     * @return (find_all) {Element} : {Array}
     */
    find: function find(selector, context, find_all) {
      if (context === void 0) context = window.document;
      var simpleRe = /^(#?[\w-]+|\.[\w-.]+)$/,
          periodRe = /\./g,
          slice = Array.prototype.slice,
          matches = [];

      // Redirect call to the more performant function
      // if it's a simple selector and return an array
      // for easier usage
      if (simpleRe.test(selector)) {
        switch (selector[0]) {
          case '#':
            matches = [this.$(selector.substr(1))];
            break;
          case '.':
            matches = slice.call(context.getElementsByClassName(selector.substr(1).replace(periodRe, ' ')));
            break;
          default:
            matches = slice.call(context.getElementsByTagName(selector));
        }
      } else {
        // If not a simple selector, query the DOM as usual
        // and return an array for easier usage
        matches = slice.call(context.querySelectorAll(selector));
      }
      return find_all ? matches : matches[0];
    },
    $: function $(id) {
      id = id[0] === '#' ? id.substr(1, id.length) : id;
      return document.getElementById(id);
    },
    isElement: function isElement(obj) {
      // DOM, Level2
      if ('HTMLElement' in window) {
        return !!obj && obj instanceof HTMLElement;
      }
      // Older browsers
      return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj.nodeType === 1 && !!obj.nodeName;
    },
    getAllChildren: function getAllChildren(node, tag) {
      return [].slice.call(node.getElementsByTagName(tag));
    },
    isEmpty: function isEmpty(str) {
      return !str || 0 === str.length;
    },
    emptyArray: function emptyArray(array) {
      while (array.length) {
        array.pop();
      }
    },
    anyMatchInArray: function anyMatchInArray(source, target) {
      return source.some(function (each) {
        return target.indexOf(each) >= 0;
      });
    },
    everyMatchInArray: function everyMatchInArray(arr1, arr2) {
      return arr2.every(function (each) {
        return arr1.indexOf(each) >= 0;
      });
    },
    anyItemHasValue: function anyItemHasValue(obj, has) {
      var this$1 = this;
      if (has === void 0) has = false;

      var keys = Object.keys(obj);
      keys.forEach(function (key) {
        if (!this$1.isEmpty(obj[key])) {
          has = true;
        }
      });
      return has;
    },
    removeAllChildren: function removeAllChildren(node) {
      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }
    },
    removeAll: function removeAll(collection) {
      var node = void 0;
      while (node = collection[0]) {
        node.parentNode.removeChild(node);
      }
    },
    getChildren: function getChildren(node, tag) {
      return [].filter.call(node.childNodes, function (el) {
        return tag ? el.nodeType === 1 && el.tagName.toLowerCase() === tag : el.nodeType === 1;
      });
    },
    template: function template(html, row) {
      var this$1 = this;

      return html.replace(/\{ *([\w_-]+) *\}/g, function (htm, key) {
        var value = row[key] === undefined ? '' : row[key];
        return this$1.htmlEscape(value);
      });
    },
    htmlEscape: function htmlEscape(str) {
      return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
    },
    /**
     * Overwrites obj1's values with obj2's and adds
     * obj2's if non existent in obj1
     * @returns obj3 a new object based on obj1 and obj2
     */
    mergeOptions: function mergeOptions(obj1, obj2) {
      var obj3 = {};
      for (var attr1 in obj1) {
        obj3[attr1] = obj1[attr1];
      }
      for (var attr2 in obj2) {
        obj3[attr2] = obj2[attr2];
      }
      return obj3;
    },
    createElement: function createElement(node, html) {
      var elem = void 0;
      if (Array.isArray(node)) {
        elem = document.createElement(node[0]);

        if (node[1].id) {
          elem.id = node[1].id;
        }
        if (node[1].classname) {
          elem.className = node[1].classname;
        }

        if (node[1].attr) {
          var attr = node[1].attr;
          if (Array.isArray(attr)) {
            var i = -1;
            while (++i < attr.length) {
              elem.setAttribute(attr[i].name, attr[i].value);
            }
          } else {
            elem.setAttribute(attr.name, attr.value);
          }
        }
      } else {
        elem = document.createElement(node);
      }
      elem.innerHTML = html;
      var frag = document.createDocumentFragment();

      while (elem.childNodes[0]) {
        frag.appendChild(elem.childNodes[0]);
      }
      elem.appendChild(frag);
      return elem;
    },
    assert: function assert(condition, message) {
      if (message === void 0) message = 'Assertion failed';

      if (!condition) {
        if (typeof Error !== 'undefined') {
          throw new Error(message);
        }
        throw message; // Fallback
      }
    }
  };

  var klasses = vars.cssClasses;
  var klasses$1 = vars.cssClasses;

  // classe Html //
  var Html = function Html(base) {
    this.options = base.options;
    this.els = this.createControl();
  };

  Html.prototype.createControl = function createControl() {
    var container = void 0,
        containerClass = void 0,
        elements = void 0;
    if (this.options.targetType === targetType.INPUT) {
      container = Html.container;
      elements = {
        container: container,
        control: utils.find('.' + klasses.inputText.control, container),
        input: utils.find('.' + klasses.inputText.input, container),
        reset: utils.find('.' + klasses.inputText.reset, container),
        result: utils.find('.' + klasses.inputText.result, container)
      };
    } else {
      containerClass = klasses.namespace + ' ' + klasses.glass.container;
      container = utils.createElement(['div', { classname: containerClass }], Html.glass);
      elements = {
        container: container,
        control: utils.find('.' + klasses.glass.control, container),
        button: utils.find('.' + klasses.glass.button, container),
        input: utils.find('.' + klasses.glass.input, container),
        reset: utils.find('.' + klasses.glass.reset, container),
        result: utils.find('.' + klasses.glass.result, container)
      };
    }
    //set placeholder from options
    //elements.input.placeholder = this.options.placeholder;
    return elements;
  };

  /* eslint-disable indent */
  Html.glass = ['<div class="', klasses.glass.control, ' ', klasses.olControl, '">', '<button type="button" class="', klasses.glass.button, '"></button>', '<input type="text"', ' id="', vars.inputQueryId, '"', ' class="', klasses.glass.input, '"', ' autocomplete="off" placeholder="Search ...">', '<a', ' id="', vars.inputResetId, '"', ' class="', klasses.glass.reset, ' ', klasses.hidden, '"', '></a>', '</div>', '<ul class="', klasses.glass.result, '"></ul>'].join('');

  var _options = this.options,
      placeholder = _options.placeholder,
      fontIcon = _options.fontIcon;

  var containerClass = klasses.namespace + ' ' + klasses.inputText.container + ' ' + this.options.classMobile;
  var nominatimVueContainer = Vue.extend({
    functional: true,
    render: function render(h) {
      return h('div', { class: _defineProperty({}, containerClass, true) }, [h('div', {
        class: _defineProperty({}, klasses.inputText.control, true)
      }, [h('input', {
        attrs: {
          type: 'text',
          id: vars.inputQueryId,
          autocomplete: 'off'
        },
        class: _defineProperty({}, klasses.inputText.input, true),
        directives: [{
          name: 't-placeholder',
          value: placeholder
        }]
      }), h('button', {
        attrs: {
          type: 'button',
          id: 'search_nominatim'
        },
        class: {
          btn: true
        }
      }, [h('i', {
        attrs: {
          'aria-hidden': true
        },
        style: {
          color: '#ffffff'
        },
        class: _defineProperty({}, fontIcon, true)
      })]), h('button', {
        attrs: {
          type: 'button',
          id: vars.inputResetId
        },
        class: _defineProperty({}, klasses.inputText.reset + '  ' + klasses.hidden, true)
      })]), h('ul', {
        class: _defineProperty({}, klasses.inputText.result, true)
      })]);
    }
  });
  Html.container = new nominatimVueContainer().$mount().$el;

  Html.input = ['<div class="', klasses.inputText.control, '">', '<input type="text"', ' id="', vars.inputQueryId, '"', ' class="', klasses.inputText.input, '"', ' autocomplete="off" placeholder="Search ...">', '<button type="button" class="btn" id="search_nominatim"><i style="color:#ffffff" class="' + this.options.fontIcon + '" aria-hidden="true"></i></button>', '<button type="button"', ' id="', vars.inputResetId, '"', ' class="', klasses.inputText.reset, ' ', klasses.hidden, '"', '></button>', '</div>', '<ul class="', klasses.inputText.result, '"></ul>'].join('');

  // classe Html fine //

  // classe OpenStreet //

  var OpenStreet = function OpenStreet() {
    this.settings = {
      url: 'https://nominatim.openstreetmap.org/search/',
      params: {
        q: '',
        format: 'json',
        addressdetails: 1,
        limit: 10
        //countrycodes: 'IT',
        //'accept-language': 'it-IT',
      }
    };
  };

  OpenStreet.prototype.getParameters = function getParameters(options) {
    var viewbox = ol.proj.transformExtent(self.options.viewbox, self.options.mapCrs, 'EPSG:4326').join(',');
    return {
      url: this.settings.url,
      params: {
        q: options.query,
        format: 'json',
        addressdetails: 1,
        limit: options.limit || this.settings.params.limit,
        //countrycodes: options.countrycodes || this.settings.params.countrycodes,
        //'accept-language': options.lang || this.settings.params['accept-language'],
        viewbox: viewbox,
        bounded: 1
      }
    };
  };

  OpenStreet.prototype.handleResponse = function handleResponse(results) {
    return results.map(function (result) {
      return {
        lon: result.lon,
        lat: result.lat,
        address: {
          name: result.address.neighbourhood || '',
          road: result.address.road || '',
          postcode: result.address.postcode,
          city: result.address.city || result.address.town,
          state: result.address.state,
          country: result.address.country
        },
        original: {
          formatted: result.display_name,
          details: result.address
        }
      };
    });
  };

  // classe OpenStreet fine //

  // classe Nomitatim //

  var Nominatim = function Nominatim(base, els) {
    this.Base = base;
    this.options = base.options;
    this.options.provider = this.options.provider.toLowerCase();
    this.els = els;
    this.lastQuery = '';
    this.container = this.els.container;
    this.registeredListeners = { mapClick: false };
    this.setListeners();
    this.OpenStreet = new OpenStreet();
  };

  Nominatim.prototype.setListeners = function setListeners() {
    var this$1 = this;
    var timeout = void 0,
        lastQuery = void 0;
    var openSearch = function openSearch() {
      utils.hasClass(this$1.els.control, klasses$1.glass.expanded) ? this$1.collapse() : this$1.expand();
    };
    var query = function query(evt) {
      var value = evt.target.value.trim();
      var hit = evt.key ? evt.key === 'Enter' : evt.which ? evt.which === 13 : evt.keyCode ? evt.keyCode === 13 : false;

      if (hit) {
        evt.preventDefault();
        this$1.query(value);
      }
    };
    var reset = function reset(evt) {
      this$1.els.input.focus();
      this$1.els.input.value = '';
      this$1.lastQuery = '';
      utils.addClass(this$1.els.reset, klasses$1.hidden);
      this$1.clearResults();
    };
    var handleValue = function handleValue(evt) {
      var value = evt.target.value.trim();

      value.length ? utils.removeClass(this$1.els.reset, klasses$1.hidden) : utils.addClass(this$1.els.reset, klasses$1.hidden);

      if (this$1.options.autoComplete && value !== lastQuery) {
        lastQuery = value;
        timeout && clearTimeout(timeout);
        timeout = setTimeout(function () {
          if (value.length >= this$1.options.autoCompleteMinLength) {
            this$1.query(value);
          }
        }, 200);
      }
    };
    this.els.input.addEventListener('keyup', query, false);
    this.els.input.addEventListener('input', handleValue, false);
    this.els.reset.addEventListener('click', reset, false);
    if (this.options.targetType === targetType.GLASS) {
      this.els.button.addEventListener('click', openSearch, false);
    }
  };

  Nominatim.prototype.query = function query(q) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var isNumber = function isNumber(value) {
        return typeof value === 'number' && !Number.isNaN(value);
      };
      var lonlat = null;
      if (q && q.split(',').length === 2) {
        lonlat = q.split(',');
        lonlat = isNumber(1 * lonlat[0]) && isNumber(1 * lonlat[1]) ? lonlat.map(function (coordinate) {
          return 1 * coordinate;
        }) : null;
      }
      if (lonlat) {
        _this.options.lonlat(lonlat);
      } else {
        var this$1 = _this;
        var ajax = {},
            _options2 = _this.options;
        var provider = _this.getProvider({
          query: q,
          provider: _options2.provider,
          key: _options2.key,
          lang: _options2.lang,
          countrycodes: _options2.countrycodes,
          limit: _options2.limit
        });
        if (_this.lastQuery === q && _this.els.result.firstChild) {
          return;
        }
        _this.lastQuery = q;
        _this.clearResults();
        utils.addClass(_this.els.reset, klasses$1.spin);
        ajax.url = provider.url;
        ajax.data = provider.params;
        utils.json(ajax).done(function (res) {
          var extent = provider.params.viewbox.split(',').map(function (coordinate) {
            return 1 * coordinate;
          });
          res = res.filter(function (place) {
            return ol.extent.containsXY(extent, place.lon, place.lat);
          });
          utils.removeClass(this$1.els.reset, klasses$1.spin);
          var res_ = res.length ? this$1.OpenStreet.handleResponse(res) : undefined;
          this$1.createList(res_);
          res_ && this$1.listenMapClick();
          resolve(res_ ? res_ : []);
        }).fail(function (error) {
          utils.removeClass(this$1.els.reset, klasses$1.spin);
          var li = utils.createElement('li', '<h5>  ' + this$1.options.notresponseserver + '</h5>');
          this$1.els.result.appendChild(li);
          reject(error);
        });
      }
    });
  };

  Nominatim.prototype.createList = function createList(response) {
    var this$1 = this;
    var ul = this.els.result;
    if (response) {
      response.forEach(function (row) {
        var addressHtml = this$1.addressTemplate(row.address),
            html = ['<a href="#">', addressHtml, '</a>'].join(''),
            li = utils.createElement('li', html);
        li.addEventListener('click', function (evt) {
          evt.preventDefault();
          this$1.chosen(row, addressHtml, row.address, row.original);
        }, false);
        ul.appendChild(li);
      });
    } else {
      var noresults = this.options.noresults;
      var elementVue = Vue.extend({
        functional: true,
        render: function render(h) {
          return h('li', {
            class: {
              'nominatim-noresult': true
            },
            directives: [{ name: 't', value: noresults }]
          });
        }
      });
      var li = new elementVue().$mount().$el;
      ul.appendChild(li);
    }
  };

  Nominatim.prototype.chosen = function chosen(place, addressHtml, addressObj, addressOriginal) {
    var map = this.Base.getMap();
    var coord_ = [parseFloat(place.lon), parseFloat(place.lat)];
    var projection = map.getView().getProjection();
    var coord = ol.proj.transform(coord_, 'EPSG:4326', projection);
    var address = {
      formatted: addressHtml,
      details: addressObj,
      original: addressOriginal
    };
    this.options.keepOpen === false && this.clearResults(true);
    this.Base.dispatchEvent({
      type: 'addresschosen',
      address: address,
      coordinate: coord
    });
  };

  Nominatim.prototype.addressTemplate = function addressTemplate(address) {
    var html = [];
    if (address.name) {
      html.push(['<div class="', klasses$1.road, '">{name}</div>'].join(''));
    }
    if (address.road || address.building || address.house_number) {
      html.push(['<div class="', klasses$1.road, '">{building} {road} {house_number}</div>'].join(''));
    }
    if (address.city || address.town || address.village) {
      html.push(['<div class="', klasses$1.city, '">{postcode} {city} {town} {village}</div>'].join(''));
    }
    if (address.state || address.country) {
      html.push(['<div class="', klasses$1.country, '">{state} {country}</div>'].join(''));
    }
    return utils.template(html.join('<br>'), address);
  };

  Nominatim.prototype.getProvider = function getProvider(options) {
    return this.OpenStreet.getParameters(options);
  };

  Nominatim.prototype.expand = function expand() {
    var this$1 = this;

    utils.removeClass(this.els.input, klasses$1.spin);
    utils.addClass(this.els.control, klasses$1.glass.expanded);
    window.setTimeout(function () {
      return this$1.els.input.focus();
    }, 100);
    this.listenMapClick();
  };

  Nominatim.prototype.collapse = function collapse() {
    this.els.input.value = '';
    this.els.input.blur();
    utils.addClass(this.els.reset, klasses$1.hidden);
    utils.removeClass(this.els.control, klasses$1.glass.expanded);
    this.clearResults();
  };

  Nominatim.prototype.listenMapClick = function listenMapClick() {
    // already registered
    if (this.registeredListeners.mapClick) {
      return;
    }

    var this_ = this;
    var mapElement = this.Base.getMap().getTargetElement();
    this.registeredListeners.mapClick = true;

    //one-time fire click
    mapElement.addEventListener('click', {
      handleEvent: function handleEvent(evt) {
        this_.clearResults(true);
        mapElement.removeEventListener(evt.type, this, false);
        this_.registeredListeners.mapClick = false;
      }
    }, false);
  };

  Nominatim.prototype.clearResults = function clearResults(collapse) {
    collapse && this.options.targetType === targetType.GLASS ? this.collapse() : utils.removeAllChildren(this.els.result);
  };

  Nominatim.prototype.getSource = function getSource() {
    return this.layer.getSource();
  };

  Nominatim.prototype.addLayer = function addLayer() {
    var this$1 = this;

    var found = false;
    var map = this.Base.getMap();

    map.getLayers().forEach(function (layer) {
      if (layer === this$1.layer) {
        found = true;
      }
    });
    if (!found) {
      map.addLayer(this.layer);
    }
  };

  // classe Nomitatim fine //

  var $html = new Html(this);
  this.container = $html.els.container;
  this.nominatim = new Nominatim(this, $html.els);
  this.layer = this.nominatim.layer;
  Control.call(this, {
    element: this.container,
    name: "nominatim",
    offline: false
  });
}

ol.inherits(NominatimControl, Control);

proto = NominatimControl.prototype;

module.exports = NominatimControl;

},{"./control":503}],510:[function(require,module,exports){
var OLControl = function OLControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._control = null;
  this.positionCode = options.position || 'tl';
  switch (options.type) {
    case 'zoom':
      this._control = new ol.control.Zoom(options);
      break;
    case 'zoomtoextent':
      this._control = new ol.control.ZoomToExtent(options);
      break;
    case 'scaleline':
      this._control = new ol.control.ScaleLine(options);
      break;
    case 'overview':
      this._control = new ol.control.OverviewMap(options);
      break;
  }

  $(this._control.element).addClass("ol-control-" + this.positionCode);

  ol.control.Control.call(this, {
    element: this._control.element
  });
};

// sotto classe della classe control di OL3
ol.inherits(OLControl, ol.control.Control);

module.exports = OLControl;

var proto = OLControl.prototype;

proto.offline = true;

proto.getPosition = function (positionCode) {
  positionCode = positionCode || this.positionCode;
  var position = {};
  position['top'] = positionCode.indexOf('t') > -1 ? true : false;
  position['left'] = positionCode.indexOf('l') > -1 ? true : false;
  return position;
};

proto.layout = function (map) {
  if (map) {
    var position = this.getPosition();
    var viewPort = map.getViewport();
    var previusControls = $(viewPort).find('.ol-control-' + this.positionCode);
    if (previusControls.length) {
      previusControl = previusControls.last();
      var previousOffset = position.left ? previusControl.position().left : previusControl.position().right;
      var hWhere = position.left ? 'left' : 'right';
      var previousWidth = previusControl[0].offsetWidth;
      var hOffset = $(this.element).position()[hWhere] + previousOffset + previousWidth + 2;
      $(this.element).css(hWhere, hOffset + 'px');
    }
  }
};

proto.changelayout = function () {};

proto.showHide = function () {
  $(this.element).toggle();
};

proto.setMap = function (map) {
  this.layout(map);
  this._control.setMap(map);
};

},{}],511:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Control = require('./control');
function OnClickControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._originalonlick = null;
  this._onclick = options.onclick;
  Control.call(this, options);
}

ol.inherits(OnClickControl, Control);

var proto = OnClickControl.prototype;

proto.overwriteOnClickEvent = function (clickHandler) {
  this._originalonlick = this._originalonlick || this._onclick;
  this._onclick = clickHandler;
};

proto.resetOriginalOnClickEvent = function () {
  this._onclick = this._originalonlick || this._onclick;
  this._originalonlick = null;
};

proto.setMap = function (map) {
  var _this = this;

  Control.prototype.setMap.call(this, map);
  var controlElement = $(this.element);
  var buttonControl = controlElement.children('button');
  var cliccked = false;
  controlElement.on('click', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (cliccked) {
              _context.next = 9;
              break;
            }

            cliccked = true;
            buttonControl.addClass('g3w-ol-disabled');
            _context.t0 = _this._onclick;

            if (!_context.t0) {
              _context.next = 7;
              break;
            }

            _context.next = 7;
            return _this._onclick();

          case 7:
            buttonControl.removeClass('g3w-ol-disabled');
            cliccked = false;

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  })));
};

module.exports = OnClickControl;

},{"./control":503}],512:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');

var QueryBBoxControl = function QueryBBoxControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._startCoordinate = null;
  var _options = {
    offline: false,
    name: "querybbox",
    tipLabel: "sdk.mapcontrols.querybybbox.tooltip",
    label: options.label || '\uE902',
    clickmap: true, // set ClickMap
    interactionClass: ol.interaction.DragBox,
    onhover: true
  };
  options = utils.merge(options, _options);
  var layers = options.layers || [];
  options.visible = this.checkVisible(layers);
  InteractionControl.call(this, options);
};

ol.inherits(QueryBBoxControl, InteractionControl);

var proto = QueryBBoxControl.prototype;

proto.checkVisible = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return layers.length > 0;
};

proto.setMap = function (map) {
  var _this = this;

  InteractionControl.prototype.setMap.call(this, map);
  this._interaction.on('boxstart', function (evt) {
    return _this._startCoordinate = evt.coordinate;
  });
  this._interaction.on('boxend', function (evt) {
    var start_coordinate = _this._startCoordinate;
    var end_coordinate = evt.coordinate;
    var extent = ol.extent.boundingExtent([start_coordinate, end_coordinate]);
    _this.dispatchEvent({
      type: 'bboxend',
      extent: extent
    });
    _this._startCoordinate = null;
    _this._autountoggle && _this.toggle();
  });
};

module.exports = QueryBBoxControl;

},{"../utils":533,"./interactioncontrol":505}],513:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');
var PickCoordinatesInteraction = require('../interactions/pickcoordinatesinteraction');

var _require = require('core/geometry/geometry'),
    getAllPolygonGeometryTypes = _require.getAllPolygonGeometryTypes;

var VALIDGEOMETRIES = getAllPolygonGeometryTypes();

var QueryByPolygonControl = function QueryByPolygonControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    offline: false,
    name: "querybypolygon",
    tipLabel: "sdk.mapcontrols.querybypolygon.tooltip",
    label: options.label || '\uE903',
    onselectlayer: true,
    clickmap: true, // set ClickMap
    interactionClass: PickCoordinatesInteraction,
    onhover: true
  };
  options = utils.merge(options, _options);
  var layers = options.layers || [];
  options.visible = this.checkVisibile(layers);
  options.geometryTypes = VALIDGEOMETRIES;
  this.spatialMethod = 'intersects'; // <contains, intersect>
  InteractionControl.call(this, options);
};

ol.inherits(QueryByPolygonControl, InteractionControl);

var proto = QueryByPolygonControl.prototype;

proto.checkVisibile = function (layers) {
  var visible = void 0;
  // if no layer or just one
  if (!layers.length || layers.length === 1) visible = false;else {
    // geometries to check
    // get all layers that haven't the geometries above filterable
    var filterableLayers = layers.filter(function (layer) {
      return layer.isFilterable();
    });
    // gell all layer that have the valid geometries
    var querableLayers = layers.filter(function (layer) {
      return VALIDGEOMETRIES.indexOf(layer.getGeometryType()) !== -1;
    });
    var filterableLength = filterableLayers.length;
    var querableLength = querableLayers.length;
    visible = querableLength > 0 && filterableLength > 0;
  }
  return visible;
};

/**
 * Method to set filter operation intersect or Contains
 */

proto.setSpatialMethod = function () {
  var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'intersects';

  this.spatialMethod = method;
};

proto.getSpatialMethod = function () {
  return this.spatialMethod;
};

proto.setMap = function (map) {
  var _this = this;

  InteractionControl.prototype.setMap.call(this, map);
  this._interaction.on('picked', function (evt) {
    _this.dispatchEvent({
      type: 'picked',
      coordinates: evt.coordinate
    });
    _this._autountoggle && _this.toggle();
  });
  this.setEnable(false);
};

module.exports = QueryByPolygonControl;

},{"../interactions/pickcoordinatesinteraction":526,"../utils":533,"./interactioncontrol":505,"core/geometry/geometry":417}],514:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');
var PickCoordinatesInteraction = require('../interactions/pickcoordinatesinteraction');

var QueryControl = function QueryControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    offline: false,
    name: "querylayer",
    tipLabel: "sdk.mapcontrols.query.tooltip",
    label: options.label || '\uEA0F',
    clickmap: true, // set ClickMap
    interactionClass: PickCoordinatesInteraction
  };
  options = utils.merge(options, _options);
  InteractionControl.call(this, options);
};

ol.inherits(QueryControl, InteractionControl);

var proto = QueryControl.prototype;

proto.setMap = function (map) {
  var _this = this;

  var eventToggledKey = void 0;
  var querySingleClickFnc = function querySingleClickFnc(event) {
    _this.dispatchEvent({
      type: 'picked',
      coordinates: event.coordinate
    });
    _this._autountoggle && _this.toggle(true);
  };
  if (map) {
    eventToggledKey = this.on('toggled', function (event) {
      var toggled = event.target.isToggled();
      toggled && map.on('singleclick', querySingleClickFnc) || map.un('singleclick', querySingleClickFnc);
    });
  } else ol.Observable.unByKey(eventToggledKey);
  InteractionControl.prototype.setMap.call(this, map);
};

module.exports = QueryControl;

},{"../interactions/pickcoordinatesinteraction":526,"../utils":533,"./interactioncontrol":505}],515:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');

var ResetControl = function ResetControl(options) {
  this._toggled = true;
  this._startCoordinate = null;
  var _options = {
    name: "reset",
    tipLabel: "Pan",
    label: '\uE901'
  };
  options = utils.merge(options, _options);
  InteractionControl.call(this, options);
};

ol.inherits(ResetControl, InteractionControl);

module.exports = ResetControl;

var proto = ResetControl.prototype;

proto._postRender = function () {
  this.toggle(true);
};

},{"../utils":533,"./interactioncontrol":505}],516:[function(require,module,exports){
var t = require('core/i18n/i18n.service').t;

var _require = require('../utils/utils'),
    getResolutionFromScale = _require.getResolutionFromScale,
    getScaleFromResolution = _require.getScaleFromResolution;

var SCALES = [1000000, 5000000, 250000, 100000, 50000, 25000, 10000, 5000, 2500, 2000, 1000];

var ScaleControl = function ScaleControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.isMobile = options.isMobile || false;
  options.target = 'scale-control';
  ol.control.Control.call(this, options);
};

ol.inherits(ScaleControl, ol.control.Control);

module.exports = ScaleControl;

var proto = ScaleControl.prototype;

proto.offline = true;

// called from map when layout change
proto.changelayout = function (map) {
  var position = this.position;
  var element = $(this.element);
};

proto.layout = function (map) {
  var self = this;
  var isMapResolutionChanged = false;
  var selectedOnClick = false;
  var element = $(this.element);
  var select2 = element.children('select').select2({
    tags: true,
    dropdownParent: $(map.getTargetElement()),
    width: '120px',
    height: '20px',
    language: {
      noResults: function noResults(params) {
        return t("sdk.mapcontrols.scale.no_valid_scale");
      }
    },
    minimumResultsForSearch: this.isMobile ? -1 : 0,
    createTag: function createTag(params) {
      var newTag = null;
      var scale = void 0;
      // Don't offset to create a tag if there is no @ symbol
      if (params.term.indexOf('1:') !== -1) {
        // Return null to disable tag creation
        scale = params.term.split('1:')[1];
      } else if (Number.isInteger(Number(params.term)) && Number(params.term) > 0) {
        scale = Number(params.term);
        if (1 * scale <= self.scales[0]) {
          newTag = {
            id: scale,
            text: '1:' + params.term,
            new: true
          };
          deleteLastCustomScale();
        }
      }
      return newTag;
    }
  });
  //get change mapsize to close
  map.on('change:size', function () {
    return select2.select2('close');
  });
  function deleteLastCustomScale() {
    select2.find('option').each(function (index, option) {
      return self.scales.indexOf(1 * option.value) === -1 && $(option).remove();
    });
  }

  function addCustomTag(data) {
    if (select2.find("option[value='" + data.id + "']").length) select2.val(data.id).trigger('change');else {
      deleteLastCustomScale();
      var newOption = new Option(data.text, data.id, true, true);
      select2.append(newOption).trigger('change');
    }
  }

  map.on('moveend', function () {
    if (isMapResolutionChanged) {
      var view = this.getView();
      var resolution = view.getResolution();
      var mapUnits = view.getProjection().getUnits();
      var scale = parseInt(getScaleFromResolution(resolution, mapUnits));
      var data = {
        id: scale,
        text: '1:' + scale,
        new: true
      };
      addCustomTag(data);
      isMapResolutionChanged = false;
    } else selectedOnClick = false;
  });
  var setChangeResolutionHandler = function setChangeResolutionHandler() {
    map.getView().on('change:resolution', function () {
      return isMapResolutionChanged = !selectedOnClick;
    });
  };
  setChangeResolutionHandler();

  map.on('change:view', function () {
    return setChangeResolutionHandler();
  });

  select2.on('select2:select', function (e) {
    selectedOnClick = true;
    var data = e.params.data;
    if (data.new) {
      deleteLastCustomScale();
      addCustomTag(data);
    }
    var mapUnits = map.getView().getProjection().getUnits();
    var scale = 1 * data.id;
    var resolution = getResolutionFromScale(scale, mapUnits);
    map.getView().setResolution(resolution);
  });
};

proto._setScales = function (map) {
  var mapUnits = map.getView().getProjection().getUnits();
  var currentResolution = map.getView().getResolution();
  var currentScale = parseInt(getScaleFromResolution(currentResolution, mapUnits));
  this.scales = SCALES.filter(function (scale) {
    return scale < currentScale;
  });
  this.scales.unshift(currentScale);
  this._createControl();
};

proto._createControl = function () {
  var controlDomElement = document.createElement('div');
  var select = document.createElement('select');
  var optgroup = document.createElement('optgroup');
  optgroup.label = '';
  this.scales.forEach(function (scale, index) {
    var option = document.createElement('option');
    option.value = scale;
    option.text = '1:' + scale;
    option.selected = index === 0 ? true : false;
    optgroup.appendChild(option);
  });
  select.appendChild(optgroup);
  if (!this.isMobile) {
    var optgroup_custom = document.createElement('optgroup');
    optgroup_custom.label = 'Custom';
    select.appendChild(optgroup_custom);
  }
  controlDomElement.appendChild(select);
  // set element of control (it is necessary to visualize it)
  this.element = controlDomElement;
  $(this.element).css('height', '20px');
};

proto.setMap = function (map) {
  if (map) {
    this._setScales(map);
    this.layout(map);
    ol.control.Control.prototype.setMap.call(this, map);
  }
};

},{"../utils/utils":534,"core/i18n/i18n.service":418}],517:[function(require,module,exports){
var OnClickControl = require('./onclickcontrol');
function Screenshotcontrol() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.name = "maptoimage";
  options.tipLabel = "Screenshot";
  options.label = "\uE90F";
  OnClickControl.call(this, options);
}

ol.inherits(Screenshotcontrol, OnClickControl);

module.exports = Screenshotcontrol;

},{"./onclickcontrol":511}],518:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');
var PickCoordinatesInteraction = require('../interactions/pickcoordinatesinteraction');

var StreetViewControl = function StreetViewControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    offline: false,
    visible: !!_applicationstate2.default.keys.vendorkeys.google,
    name: "streetview",
    tipLabel: "StreetView",
    clickmap: true, // set ClickMap
    label: '\uE905',
    interactionClass: PickCoordinatesInteraction
  };
  this._sv = null;
  this._panorama = null;
  this._map = null;
  this._projection = null;
  this._lastposition = null;
  this._streetViewFeature = new ol.Feature();
  var streetVectorSource = new ol.source.Vector({
    features: []
  });
  this._layer = new ol.layer.Vector({
    source: streetVectorSource,
    style: function style(feature) {
      var coordinates = feature.getGeometry().getCoordinates();
      this._lastposition = this._lastposition ? this._lastposition : coordinates;
      var dx = coordinates[0] - this._lastposition[0];
      var dy = coordinates[1] - this._lastposition[1];
      var rotation = -Math.atan2(dy, dx);
      var styles = [new ol.style.Style({
        text: new ol.style.Text({
          text: '\uE905',
          font: 'bold 18px icomoon',
          fill: new ol.style.Fill({
            color: '#ffffff'
          })
        })
      }), new ol.style.Style({
        image: new ol.style.Icon({
          src: '/static/client/images/streetviewarrow.png',
          rotation: rotation
        })
      })];
      this._lastposition = coordinates;
      return styles;
    }
  });
  options = utils.merge(options, _options);
  InteractionControl.call(this, options);
};

ol.inherits(StreetViewControl, InteractionControl);

var proto = StreetViewControl.prototype;

proto.getLayer = function () {
  return this._layer;
};

proto.setProjection = function (projection) {
  this._projection = projection;
};

proto.setPosition = function (position) {
  var self = this;
  var pixel = void 0;
  if (!this._sv) this._sv = new google.maps.StreetViewService();
  this._sv.getPanorama({ location: position }, function (data) {
    self._panorama = new google.maps.StreetViewPanorama(document.getElementById('streetview'));
    self._panorama.addListener('position_changed', function () {
      if (self.isToggled()) {
        var lnglat = ol.proj.transform([this.getPosition().lng(), this.getPosition().lat()], 'EPSG:4326', self._projection.getCode());
        self._layer.getSource().getFeatures()[0].setGeometry(new ol.geom.Point(lnglat));
        pixel = self._map.getPixelFromCoordinate(lnglat);
        if (pixel[0] + 15 > self._map.getSize()[0] || pixel[1] + 15 > self._map.getSize()[1] || pixel[0] < 15 || pixel[1] < 15) {
          self._map.getView().setCenter(lnglat);
        }
      }
    });
    if (data && data.location) {
      self._panorama.setPov({
        pitch: 0,
        heading: 0
      });
      self._panorama.setPosition(data.location.latLng);
    }
  });
};

proto.setMap = function (map) {
  var _this = this;

  this._map = map;
  InteractionControl.prototype.setMap.call(this, map);
  this._interaction.on('picked', function (evt) {
    _this.dispatchEvent({
      type: 'picked',
      coordinates: evt.coordinate
    });
    _this._autountoggle && _this.toggle();
  });
};

proto.clearMarker = function () {
  this._streetViewFeature.setGeometry(null);
};

proto.clear = function () {
  this._layer.getSource().clear();
  this._streetViewFeature.setGeometry(null);
  this.clearMarker();
  this._panorama = null;
  this.dispatchEvent('disabled');
};

proto.toggle = function (toggle) {
  InteractionControl.prototype.toggle.call(this, toggle);
  if (!this.isToggled()) this.clear();else this._layer.getSource().addFeatures([this._streetViewFeature]);
};

module.exports = StreetViewControl;

},{"../interactions/pickcoordinatesinteraction":526,"../utils":533,"./interactioncontrol":505,"core/applicationstate":402}],519:[function(require,module,exports){
var TOPOFFSET = 35;
module.exports = {
  layout: function layout(_ref) {
    var map = _ref.map,
        position = _ref.position,
        element = _ref.element;
  },
  changeLayoutBottomControl: function changeLayoutBottomControl(_ref2) {
    var map = _ref2.map,
        position = _ref2.position,
        element = _ref2.element,
        _ref2$isMobile = _ref2.isMobile,
        isMobile = _ref2$isMobile === undefined ? false : _ref2$isMobile;

    var viewPort = map.getViewport();
    var positionCode = (position['top'] ? 't' : 'b') + (position['left'] ? 'l' : 'r');
    var previusControls = $(viewPort).find('.ol-control-' + positionCode + ':visible');
    if (previusControls.length) {
      var previusControl = void 0;
      previusControls.each(function (index, elem) {
        if (elem != element[0]) previusControl = $(elem);else return false;
      });
      if (previusControl && positionCode === 'br') {
        if (!isMobile) {
          var previousTopPosition = previusControl.position().top;
          var elementTopPosition = element.position().top;
          if (previousTopPosition - elementTopPosition != TOPOFFSET) {
            var hOffset = previousTopPosition - TOPOFFSET;
            element.css('top', hOffset + 'px');
          }
        } else {
          var previusControlWidth = previusControl.width();
          var previousLeftPosition = previusControlWidth < 10 ? 130 : previusControlWidth + 20;
          element.css('right', previousLeftPosition + 'px');
          element.css('bottom', '15px');
        }
      }
    }
  }
};

},{}],520:[function(require,module,exports){
var InteractionControl = require('./interactioncontrol');

var ZoomBoxControl = function ZoomBoxControl(options) {
  this._startCoordinate = null;
  var _options = {
    name: "zoombox",
    tipLabel: "Zoom to box",
    label: "\uE901",
    interactionClass: ol.interaction.DragBox
  };
  options = Object.assign({}, options, _options);
  InteractionControl.call(this, options);
};
ol.inherits(ZoomBoxControl, InteractionControl);
module.exports = ZoomBoxControl;

var proto = ZoomBoxControl.prototype;

proto.setMap = function (map) {
  var _this = this;

  InteractionControl.prototype.setMap.call(this, map);
  this._interaction.on('boxstart', function (evt) {
    return _this._startCoordinate = evt.coordinate;
  });

  this._interaction.on('boxend', function (evt) {
    var start_coordinate = _this._startCoordinate;
    var end_coordinate = evt.coordinate;
    var extent = ol.extent.boundingExtent([start_coordinate, end_coordinate]);
    _this.dispatchEvent({
      type: 'zoomend',
      extent: extent
    });
    _this._startCoordinate = null;
    _this._autountoggle && _this.toggle();
  });
};

},{"./interactioncontrol":505}],521:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var utils = require('./utils');
var maphelpers = require('./map/maphelpers');

(function (name, root, factory) {
  if (typeof define === 'function' && define.amd) define(factory);else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') module.exports = factory();else root[name] = factory();
})('g3wol3', undefined, function () {
  'use strict';

  var helpers = utils.merge({}, maphelpers);
  return {
    helpers: helpers
  };
});

},{"./map/maphelpers":530,"./utils":533}],522:[function(require,module,exports){
var MeasureInteraction = require('./measureinteraction');
// Area
var AreaIteraction = function AreaIteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.geometryType = "Polygon";
  MeasureInteraction.call(this, options);
};

ol.inherits(AreaIteraction, MeasureInteraction);

module.exports = AreaIteraction;

},{"./measureinteraction":525}],523:[function(require,module,exports){
var DeleteInteractionEvent = function DeleteInteractionEvent(type, layer, features, coordinate) {
  this.type = type;
  this.features = features;
  this.coordinate = coordinate;
};

var DeleteInteraction = function DeleteInteraction(options) {
  ol.interaction.Pointer.call(this, {
    handleDownEvent: DeleteInteraction.handleDownEvent_,
    handleMoveEvent: DeleteInteraction.handleMoveEvent_,
    handleUpEvent: DeleteInteraction.handleUpEvent_,
    handleEvent: DeleteInteraction.handleEvent_
  });

  this.previousCursor_ = undefined;
  this.startCursor_ = undefined;
  this.lastCoordinate_ = null;
  this.features_ = options.features !== undefined ? options.features : null;
  this.layer_ = options.layer !== undefined ? options.layer : null;
  this.map_ = null;
};

ol.inherits(DeleteInteraction, ol.interaction.Pointer);

DeleteInteraction.handleEvent_ = function (mapBrowserEvent) {
  if (mapBrowserEvent.type == 'keydown') {
    if (this.features_.getArray().length && mapBrowserEvent.originalEvent.keyCode == 46) {
      // an event can be string or an object with attribute type
      this.dispatchEvent(new DeleteInteractionEvent('deleteend', this.layer_, this.features_, event.coordinate));
      return true;
    }
  } else {
    return ol.interaction.Pointer.handleEvent.call(this, mapBrowserEvent);
  }
};

DeleteInteraction.handleDownEvent_ = function (event) {
  this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  if (this.lastFeature_) {
    DeleteInteraction.handleMoveEvent_.call(this, event);
    this.dispatchEvent(new DeleteInteractionEvent('deleteend', this.layer_, this.features_, event.coordinate));
    return true;
  }
  return false;
};

DeleteInteraction.handleMoveEvent_ = function (event) {
  var _this = this;

  this.map_ = event.map;
  var elem = this.map_.getTargetElement();
  if (this.startCursor_ === undefined) {
    this.startCursor_ = elem.style.cursor;
  }
  var intersectingFeature = this.map_.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
    ///check if is the same layero of editing
    feature = layer == _this.layer_ ? feature : null;
    return feature;
  });
  if (intersectingFeature) {
    this.previousCursor_ = elem.style.cursor;
    elem.style.cursor = 'pointer';
  } else {
    elem.style.cursor = this.previousCursor_ !== undefined ? this.previousCursor_ : '';
    this.previousCursor_ = undefined;
  }
};

DeleteInteraction.prototype.featuresAtPixel_ = function (pixel, map) {
  var found = null;
  var intersectingFeature = map.forEachFeatureAtPixel(pixel, function (feature) {
    return feature;
  });
  if (this.features_ && _.includes(this.features_.getArray(), intersectingFeature)) {
    found = intersectingFeature;
  }
  return found;
};

DeleteInteraction.prototype.clear = function () {
  var elem = void 0;
  if (this.map_) {
    elem = this.map_.getTargetElement();
    elem.style.cursor = this.startCursor_;
  }
};

module.exports = DeleteInteraction;

},{}],524:[function(require,module,exports){
var MeasureInteraction = require('./measureinteraction');

// LenghtInteracion
var LengthIteraction = function LengthIteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.geometryType = "LineString";
  MeasureInteraction.call(this, options);
};

ol.inherits(LengthIteraction, MeasureInteraction);

module.exports = LengthIteraction;

},{"./measureinteraction":525}],525:[function(require,module,exports){
// MeasureInteracion
var t = require('core/i18n/i18n.service').t;

var MeasureIteraction = function MeasureIteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._helpTooltip;
  this._measureTooltipElement;
  this._measureTooltip;
  this._featureGeometryChangelistener;
  this._poinOnMapMoveListener;
  this._helpMsg = options.help;
  this._projection = options.projection;
  var useSphereMethods = this._projection.getCode() === 'EPSG:3857' || this._projection.getUnits() === 'degrees';
  var measureStyle = new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(255, 255, 255, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: 'rgba(0, 0, 0, 0.5)',
      lineDash: [10, 10],
      width: 3
    }),
    image: new ol.style.Circle({
      radius: 5,
      stroke: new ol.style.Stroke({
        color: 'rgba(0, 0, 0, 0.7)'
      }),
      fill: new ol.style.Fill({
        color: 'rgba(255, 255, 255, 0.2)'
      })
    })
  });
  var geometryType = options.geometryType || 'LineString';
  this._formatMeasure = null;
  // handel keydown event - delete of last vertex
  this._keyDownEventHandler = null;
  switch (geometryType) {
    case 'LineString':
      this._formatMeasure = function (feature) {
        var geometry = feature;
        var length = useSphereMethods ? ol.sphere.getLength(geometry, {
          projection: this._projection.getCode()
        }) : geometry.getLength();
        var output = length > 1000 ? (Math.round(length / 1000 * 100) / 100).toFixed(3) + ' km' : (Math.round(length * 100) / 100).toFixed(2) + ' m';
        return output;
      };
      break;
    case 'Polygon':
      this._formatMeasure = function (feature) {
        var geometry = feature;
        var area = Math.round(useSphereMethods ? ol.sphere.getArea(geometry, {
          projection: this._projection.getCode()
        }) : geometry.getArea());
        var output = area > 1000000 ? (Math.round(area / 1000000 * 100) / 100).toFixed(6) + ' km<sup>2</sup>' : (Math.round(area * 100) / 100).toFixed(3) + ' m<sup>2</sup>';
        return output;
      };
      break;
  }
  var source = new ol.source.Vector();
  this._helpTooltipElement;
  this._map = null;
  this._feature = null;
  this._layer = new ol.layer.Vector({
    source: source,
    style: function style(feature) {
      var styles = [
      // linestring
      new ol.style.Style({
        stroke: new ol.style.Stroke({
          lineDash: [10, 10],
          width: 3
        }),
        fill: new ol.style.Fill({
          color: 'rgba(255, 255, 255, 0.2)'
        })
      })];
      return styles;
    }
  });
  ol.interaction.Draw.call(this, {
    source: source,
    type: geometryType,
    style: measureStyle
  });
  this.set('beforeRemove', this.clear);
  this.set('layer', this._layer);
  // register event on two action
  this.on('drawstart', this._drawStart);
  this.on('drawend', this._drawEnd);
};

ol.inherits(MeasureIteraction, ol.interaction.Draw);

var proto = MeasureIteraction.prototype;

proto.setDrawMessage = function (message) {
  this._helpMsg = message;
};

proto.clear = function () {
  this._layer.getSource().clear();
  this._clearMessagesAndListeners();
  if (this._map) {
    this._map.removeOverlay(this._measureTooltip);
    this._map.removeLayer(this._layer);
  }
};

proto._clearMessagesAndListeners = function () {
  this._feature = null;
  // unset tooltip so that a new one can be created
  if (this._map) {
    this._measureTooltipElement = null;
    this._helpTooltipElement.innerHTML = '';
    this._helpTooltipElement.classList.add('hidden');
    ol.Observable.unByKey(this._featureGeometryChangelistener);
    ol.Observable.unByKey(this._poinOnMapMoveListener);
    $(document).off('keydown', this._keyDownEventHandler);
  }
};

proto._removeLastPoint = function (event) {
  var geom = this._feature.getGeometry();
  if (event.keyCode === 46) {
    if (geom instanceof ol.geom.Polygon && geom.getCoordinates()[0].length > 2) {
      this.removeLastPoint();
    } else if (geom instanceof ol.geom.LineString && geom.getCoordinates().length > 1) {
      this.removeLastPoint();
    }
  }
};

//drawStart function
proto._drawStart = function (evt) {
  var _this = this;

  this._map = this.getMap();
  this._map.removeLayer(this._layer);
  this._createMeasureTooltip();
  this._createHelpTooltip();
  this._feature = evt.feature;
  this._keyDownEventHandler = _.bind(this._removeLastPoint, this);
  $(document).on('keydown', this._keyDownEventHandler);
  // vado a ripulire tutte le features
  this._layer.getSource().clear();
  this._poinOnMapMoveListener = this._map.on('pointermove', function (evt) {
    if (evt.dragging) return;
    if (_this._feature) helpMsg = t(_this._helpMsg);
    _this._helpTooltipElement.innerHTML = helpMsg;
    _this._helpTooltip.setPosition(evt.coordinate);
    _this._helpTooltipElement.classList.remove('hidden');
  });
  var tooltipCoord = evt.coordinate;
  this._featureGeometryChangelistener = this._feature.getGeometry().on('change', function (evt) {
    var geom = evt.target;
    if (geom instanceof ol.geom.Polygon) tooltipCoord = geom.getInteriorPoint().getCoordinates();else if (geom instanceof ol.geom.LineString) tooltipCoord = geom.getLastCoordinate();
    var output = _this._formatMeasure(geom);
    _this._measureTooltipElement.innerHTML = output;
    _this._measureTooltip.setPosition(tooltipCoord);
  });
};

//funzione drawEnd
proto._drawEnd = function () {
  this._measureTooltipElement.className = 'mtooltip mtooltip-static';
  this._measureTooltip.setOffset([0, -7]);
  this._clearMessagesAndListeners();
  this._map.addLayer(this._layer);
};

/**
 * Creates a new help tooltip
 */
proto._createHelpTooltip = function () {
  this._helpTooltipElement && this._helpTooltipElement.parentNode.removeChild(this._helpTooltipElement);
  this._helpTooltip && this._map.removeOverlay(this._helpTooltip);
  this._helpTooltipElement = document.createElement('div');
  this._helpTooltipElement.className = 'mtooltip hidden';
  this._helpTooltip = new ol.Overlay({
    element: this._helpTooltipElement,
    offset: [15, 0],
    positioning: 'center-left'
  });
  this._map.addOverlay(this._helpTooltip);
};

/**
 * Creates a new measure tooltip
 */
proto._createMeasureTooltip = function () {
  this._measureTooltipElement && this._measureTooltipElement.parentNode.removeChild(this._measureTooltipElement);
  this._measureTooltip && this._map.removeOverlay(this._measureTooltip);
  this._measureTooltipElement = document.createElement('div');
  this._measureTooltipElement.className = 'mtooltip mtooltip-measure';
  this._measureTooltip = new ol.Overlay({
    element: this._measureTooltipElement,
    offset: [0, -15],
    positioning: 'bottom-center'
  });
  this._map.addOverlay(this._measureTooltip);
};
// END MEASURE CONTROLS //

module.exports = MeasureIteraction;

},{"core/i18n/i18n.service":418}],526:[function(require,module,exports){
var PickCoordinatesEventType = {
  PICKED: 'picked'
};

var PickCoordinatesEvent = function PickCoordinatesEvent(type, coordinate) {
  this.type = type;
  this.coordinate = coordinate;
};

var PickCoordinatesInteraction = function PickCoordinatesInteraction(options) {
  this.previousCursor_ = null;
  this._centerMap = null;

  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickCoordinatesInteraction.handleDownEvent_,
    handleUpEvent: PickCoordinatesInteraction.handleUpEvent_,
    handleMoveEvent: PickCoordinatesInteraction.handleMoveEvent_
  });
};

ol.inherits(PickCoordinatesInteraction, ol.interaction.Pointer);

PickCoordinatesInteraction.handleDownEvent_ = function (event) {
  var _this = this;

  this._centerMap = event.map.getView().getCenter();
  // set timeout to avoid to block pan
  setTimeout(function () {
    if (_this._centerMap === event.map.getView().getCenter()) {
      PickCoordinatesInteraction.handleUpEvent_.call(_this, event);
    }
  }, 300);
  // return false to avoid  start of drag event
  return false;
};

PickCoordinatesInteraction.handleUpEvent_ = function (event) {
  this.dispatchEvent(new PickCoordinatesEvent(PickCoordinatesEventType.PICKED, event.coordinate));
  // it used to stop drag event
  return false;
};

PickCoordinatesInteraction.handleMoveEvent_ = function (event) {
  var elem = event.map.getTargetElement();
  elem.style.cursor = 'pointer';
  return true;
};

PickCoordinatesInteraction.prototype.shouldStopEvent = function () {
  return false;
};

PickCoordinatesInteraction.prototype.setActive = function (active) {
  var map = this.getMap();
  if (map) {
    var elem = map.getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setActive.call(this, active);
};

PickCoordinatesInteraction.prototype.setMap = function (map) {
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this, map);
};

module.exports = PickCoordinatesInteraction;

},{}],527:[function(require,module,exports){
var PickFeatureEventType = {
  PICKED: 'picked'
};

var PickFeatureEvent = function PickFeatureEvent(type, coordinate, layer, feature) {
  this.type = type;
  this.feature = feature;
  this.coordinate = coordinate;
  this.layer = layer;
};

var PickFeatureInteraction = function PickFeatureInteraction() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickFeatureInteraction.handleDownEvent_,
    handleUpEvent: PickFeatureInteraction.handleUpEvent_,
    handleMoveEvent: PickFeatureInteraction.handleMoveEvent_
  });
  var features = options.features;

  this.features_ = Array.isArray(features) && features.length && features || null;
  this.layers_ = options.layers || null;
  this.pickedFeature_ = null;
  this.pickedLayer_ = null;
  this.layerFilter_ = function (layer) {
    var include = _.includes(_this.layers_, layer);
    _this.pickedLayer_ = include && layer;
    return include;
  };
};
ol.inherits(PickFeatureInteraction, ol.interaction.Pointer);

PickFeatureInteraction.handleDownEvent_ = function (event) {
  this.pickedFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  return this.pickedFeature_;
};

PickFeatureInteraction.handleUpEvent_ = function (event) {
  if (this.pickedFeature_) {
    this.dispatchEvent(new PickFeatureEvent(PickFeatureEventType.PICKED, event.coordinate, this.pickedLayer_, this.pickedFeature_));
  }
  return true;
};

PickFeatureInteraction.handleMoveEvent_ = function (event) {
  var elem = event.map.getTargetElement();
  var intersectingFeature = this.featuresAtPixel_(event.pixel, event.map);
  elem.style.cursor = intersectingFeature ? 'pointer' : '';
};

PickFeatureInteraction.prototype.featuresAtPixel_ = function (pixel, map) {
  var _this2 = this;

  var featureFound = null;
  var intersectingFeature = map.forEachFeatureAtPixel(pixel, function (feature) {
    if (_this2.features_) {
      if (_this2.features_.indexOf(feature) > -1) return feature;else return null;
    }
    return feature;
  }, {
    layerFilter: this.layerFilter_,
    hitTolerance: isMobile && isMobile.any ? 10 : 0
  });
  if (intersectingFeature) featureFound = intersectingFeature;
  return featureFound;
};

PickFeatureInteraction.prototype.shouldStopEvent = function () {
  return false;
};

PickFeatureInteraction.prototype.setMap = function (map) {
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this, map);
};

module.exports = PickFeatureInteraction;

},{}],528:[function(require,module,exports){
var RasterLayers = require('./rasters');
var BaseLayers = {};

BaseLayers.OSM = {};

BaseLayers.OSM.get = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      title = _ref.title,
      id = _ref.id,
      url = _ref.url;

  return new ol.layer.Tile({
    source: new ol.source.OSM({
      url: url
    }),
    id: id || 'osm',
    title: title || 'OSM',
    basemap: true
  });
};

BaseLayers.TMS = {
  get: function get() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$visible = _ref2.visible,
        visible = _ref2$visible === undefined ? false : _ref2$visible,
        _ref2$url = _ref2.url,
        url = _ref2$url === undefined ? null : _ref2$url,
        _ref2$source_type = _ref2.source_type,
        source_type = _ref2$source_type === undefined ? "xyz" : _ref2$source_type,
        minZoom = _ref2.minZoom,
        maxZoom = _ref2.maxZoom,
        projection = _ref2.projection,
        attributions = _ref2.attributions;

    var layer = void 0;
    switch (source_type) {
      case 'xyz':
        layer = RasterLayers.XYZLayer({
          url: url,
          visible: visible,
          minZoom: minZoom,
          maxZoom: maxZoom,
          attributions: attributions,
          projection: projection
        });
        break;
      case 'arcgismapserver':
        layer = TiledArgisMapServer({
          url: url,
          visible: visible,
          projection: projection,
          attributions: attributions
        });
        break;
      default:
    }
    return layer;
  }
};

BaseLayers.WMS = {
  get: function get(_ref3) {
    var url = _ref3.url,
        projection = _ref3.projection,
        attributions = _ref3.attributions,
        layers = _ref3.layers,
        _ref3$singleTile = _ref3.singleTile,
        singleTile = _ref3$singleTile === undefined ? false : _ref3$singleTile,
        _ref3$opacity = _ref3.opacity,
        opacity = _ref3$opacity === undefined ? 1 : _ref3$opacity;

    return RasterLayers.WMSLayer({
      url: url,
      projection: projection,
      attributions: attributions,
      layers: layers,
      tiled: singleTile,
      opacity: opacity
    });
  }
};

BaseLayers.WMTS = {
  get: function get() {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref4.url,
        layer = _ref4.layer,
        visible = _ref4.visible,
        attributions = _ref4.attributions,
        matrixSet = _ref4.matrixSet,
        projection = _ref4.projection,
        requestEncoding = _ref4.requestEncoding,
        _ref4$style = _ref4.style,
        style = _ref4$style === undefined ? 'default' : _ref4$style,
        _ref4$format = _ref4.format,
        format = _ref4$format === undefined ? 'image/png' : _ref4$format,
        _ref4$opacity = _ref4.opacity,
        opacity = _ref4$opacity === undefined ? 0.7 : _ref4$opacity;

    var projectionExtent = projection.getExtent();
    var resolutions = new Array(14);
    var size = ol.extent.getWidth(projectionExtent) / 256;
    var matrixIds = new Array(14);
    for (var z = 0; z < 14; ++z) {
      // generate resolutions and matrixIds arrays for this WMTS
      resolutions[z] = size / Math.pow(2, z);
      matrixIds[z] = z;
    }
    return new ol.layer.Tile({
      opacity: opacity,
      source: new ol.source.WMTS({
        url: url,
        projection: projection,
        layer: layer,
        matrixSet: matrixSet,
        requestEncoding: requestEncoding,
        format: format,
        attributions: attributions,
        tileGrid: new ol.tilegrid.WMTS({
          origin: ol.extent.getTopLeft(projectionExtent),
          resolutions: resolutions,
          matrixIds: matrixIds
        }),
        style: style
      })
    });
  }
};

BaseLayers.BING = {};

BaseLayers.BING.get = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var imagerySet = config.imagerySet || 'Aerial'; // 'Road', 'AerialWithLabels', 'Aerial'
  return new ol.layer.Tile({
    name: imagerySet,
    visible: false,
    preload: Infinity,
    source: new ol.source.BingMaps({
      imagerySet: imagerySet,
      key: config.key
    }),
    basemap: true
  });
};

module.exports = BaseLayers;

},{"./rasters":529}],529:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var RasterLayers = {};
var DPI = require('../utils/utils').getDPI();

var loadImageTileFunction = function loadImageTileFunction(_ref) {
  var _ref$method = _ref.method,
      method = _ref$method === undefined ? 'GET' : _ref$method,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'image' : _ref$type,
      _ref$sourceOptions = _ref.sourceOptions,
      sourceOptions = _ref$sourceOptions === undefined ? {} : _ref$sourceOptions;

  window.URL = window.URL || window.webkitURL;
  sourceOptions[type + 'LoadFunction'] = function (imageTile, url) {
    var xhr = new XMLHttpRequest();

    var _url$split = url.split('?'),
        _url$split2 = _slicedToArray(_url$split, 2),
        _url = _url$split2[0],
        params = _url$split2[1];

    xhr.open(method, method === 'POST' && _url || url);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    xhr.responseType = 'blob';
    xhr.onload = function () {
      var data = this.response;
      if (data !== undefined) imageTile.getImage().src = window.URL.createObjectURL(data);else imageTile.setState(ol.TileState.ERROR);
    };
    xhr.onerror = function () {
      image.setState(ol.TileState.ERROR);
    };
    xhr.send(method === 'POST' && params);
  };
};

RasterLayers.TiledWMSLayer = function (layerObj, extraParams) {
  var options = {
    layerObj: layerObj,
    extraParams: extraParams || {},
    tiled: true
  };
  return RasterLayers._WMSLayer(options);
};

RasterLayers.WMSLayer = function (layerObj) {
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

  var options = {
    layerObj: layerObj,
    extraParams: extraParams,
    method: method
  };
  return RasterLayers._WMSLayer(options);
};

RasterLayers.WMTSLayer = function (layerObj, extraParams) {
  var optionsFromCapabilities = ol.source.WMTS.optionsFromCapabilities;
  return new ol.layer.Tile({
    opacity: 1,
    source: new ol.source.WMTS(options)
  });
};

RasterLayers.ImageArgisMapServer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return new ol.layer.Image({
    source: new ol.source.ImageArcGISRest({
      ratio: options.ratio,
      params: {
        FORMAT: options.format
      },
      url: options.url
    })
  });
};

RasterLayers.TiledArgisMapServer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var url = options.url,
      _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      extent = options.extent,
      projection = options.projection,
      attributions = options.attributions;

  var source = new ol.source.TileArcGISRest({
    url: url,
    projection: projection,
    attributions: attributions
  });
  return new ol.layer.Tile({
    extent: extent,
    visible: visible,
    source: source
  });
};

RasterLayers._WMSLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var layerObj = options.layerObj;
  var iframe_internal = layerObj.iframe_internal || false;
  var method = options.method || 'GET';
  var extraParams = options.extraParams;
  var tiled = layerObj.tiled || false;
  var projection = layerObj.projection ? layerObj.projection.getCode() : null;
  var params = {
    LAYERS: layerObj.layers || '',
    VERSION: '1.3.0',
    TRANSPARENT: true,
    SLD_VERSION: '1.1.0',
    DPI: DPI
  };
  params = Object.assign({}, params, extraParams);
  var sourceOptions = {
    url: layerObj.url,
    params: params,
    ratio: 1,
    projection: projection
  };

  if (iframe_internal || method === 'POST') loadImageTileFunction({
    method: method,
    type: 'image',
    sourceOptions: sourceOptions
  });

  var imageOptions = {
    id: layerObj.id,
    name: layerObj.name,
    opacity: layerObj.opacity || 1.0,
    visible: layerObj.visible,
    extent: layerObj.extent,
    maxResolution: layerObj.maxResolution
  };

  var imageClass = void 0;
  var source = void 0;
  if (tiled) {
    source = new ol.source.TileWMS(sourceOptions);
    imageClass = ol.layer.Tile;
  } else {
    source = new ol.source.ImageWMS(sourceOptions);
    imageClass = ol.layer.Image;
  }
  imageOptions.source = source;
  var image = new imageClass(imageOptions);
  return image;
};

RasterLayers.XYZLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

  var iframe_internal = options.iframe_internal || false;
  var url = options.url,
      projection = options.projection,
      maxZoom = options.maxZoom,
      minZoom = options.minZoom,
      _options$visible2 = options.visible,
      visible = _options$visible2 === undefined ? true : _options$visible2;

  if (!url) return;
  var sourceOptions = {
    url: url,
    maxZoom: maxZoom,
    minZoom: minZoom,
    projection: projection
  };
  if (iframe_internal) loadImageTileFunction({
    method: method,
    type: 'tile',
    sourceOptions: sourceOptions
  });

  if (projection.getUnits() === 'degrees') {
    var extent = projection.getExtent();
    var resolutions = ol.tilegrid.createXYZ({ extent: extent, maxZoom: maxZoom }).getResolutions();
    // needed to remove the first resolutis because in this version of ol createXYZ doesn't  accept maxResolution options .
    // The extent of EPSG:4326 is not squared [-180, -90, 180, 90] as EPSG:3857 so the resolution is calculate by Math.max(width(extent)/tileSize,Height(extent)/tileSize)
    // we need to calculate to Math.min instead so we have to remove the first resolution
    resolutions.splice(0, 1);
    //////////////////////////////////////////
    sourceOptions.tileGrid = new ol.tilegrid.TileGrid({
      extent: extent,
      resolutions: resolutions
    });
  }

  var source = new ol.source.XYZ(sourceOptions);
  return new ol.layer.Tile({
    visible: visible,
    projection: projection,
    source: source
  });
};

module.exports = RasterLayers;

},{"../utils/utils":534}],530:[function(require,module,exports){
var BaseLayers = require('../layers/bases');
var Projections = require('../projection/projections');

var MapHelpers = {
  createViewer: function createViewer(opts) {
    return new _Viewer(opts);
  }
};

var _Viewer = function _Viewer() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var controls = ol.control.defaults({
    attribution: false,
    zoom: false
  });

  var interactions = ol.interaction.defaults().extend([new ol.interaction.DragRotate()]);
  interactions.removeAt(1); // remove douclickzoom
  var view = opts.view instanceof ol.View ? opts.view : new ol.View(opts.view);
  var options = {
    controls: controls,
    interactions: interactions,
    ol3Logo: false,
    view: view,
    keyboardEventTarget: document
  };
  if (opts.id) {
    options.target = opts.id;
  }
  Projections.setApplicationProjections();
  var map = new ol.Map(options);
  this.map = map;
};

_Viewer.prototype.destroy = function () {
  if (this.map) {
    this.map.dispose();
    this.map = null;
  }
};

_Viewer.prototype.getView = function () {
  return this.map.getView();
};

_Viewer.prototype.updateMap = function (mapObject) {};

_Viewer.prototype.updateView = function () {};

_Viewer.prototype.getMap = function () {
  return this.map;
};

_Viewer.prototype.setTarget = function (id) {
  this.map.setTarget(id);
};

_Viewer.prototype.zoomTo = function (coordinate, zoom) {
  var view = this.map.getView();
  view.setCenter(coordinate);
  view.setZoom(zoom);
};

_Viewer.prototype.goTo = function (coordinates, options) {
  options = options || {};
  var animate = options.animate || true;
  var zoom = options.zoom || false;
  var view = this.map.getView();
  var panAnimation = void 0;
  var duration = 300;
  var zoomAnimation = void 0;
  if (animate) {
    panAnimation = {
      duration: duration,
      center: coordinates
    };
    if (zoom) {
      zoomAnimation = {
        duration: duration,
        zoom: zoom
      };
    } else {
      zoomAnimation = {
        duration: duration,
        resolution: view.getResolution()
      };
    }
    view.animate(panAnimation, zoomAnimation);
  } else {
    view.setCenter(coordinates);
    if (zoom) {
      view.setZoom(zoom);
    }
  }
};

_Viewer.prototype.goToRes = function (coordinates, options) {
  options = options || {};
  var animate = options.animate || true;
  var view = this.map.getView();
  var resolution = options.resolution || view.getResolution();
  var panAnimation = void 0;
  var zoomAnimation = void 0;
  if (animate) {
    panAnimation = {
      duration: 200,
      center: coordinates
    };
    zoomAnimation = {
      duration: 200,
      resolution: resolution
    };
    view.animate(panAnimation, zoomAnimation);
  } else {
    view.setCenter(coordinates);
    view.setResolution(resolution);
  }
};

_Viewer.prototype.fit = function (geometry) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var view = this.map.getView();
  var animate = options.animate || true;
  var panAnimation = void 0;
  var zoomAnimation = void 0;
  var duration = 200;
  if (animate) {
    panAnimation = view.animate({
      duration: duration,
      center: view.getCenter()
    });
    zoomAnimation = view.animate({
      duration: duration,
      resolution: view.getResolution()
    });
  }

  if (options.animate) {
    delete options.animate; // non lo passo al metodo di OL3 perché è un'opzione interna
  }
  options.constrainResolution = options.constrainResolution === undefined && true || options.constrainResolution;
  options.size = this.map.getSize();
  view.fit(geometry, options);
};

_Viewer.prototype.getZoom = function () {
  var view = this.map.getView();
  return view.getZoom();
};

_Viewer.prototype.getResolution = function () {
  var view = this.map.getView();
  return view.getResolution();
};

_Viewer.prototype.getCenter = function () {
  var view = this.map.getView();
  return view.getCenter();
};

_Viewer.prototype.getBBOX = function () {
  return this.map.getView().calculateExtent(this.map.getSize());
};

_Viewer.prototype.getLayerByName = function (layerName) {
  var layers = this.map.getLayers();
  var length = layers.getLength();
  for (var i = 0; i < length; i++) {
    if (layerName === layers.item(i).get('name')) {
      return layers.item(i);
    }
  }
  return null;
};

_Viewer.prototype.removeLayerByName = function (layerName) {
  var layer = this.getLayerByName(layerName);
  if (layer) {
    this.map.removeLayer(layer);
    layer = undefined;
  }
};

_Viewer.prototype.getActiveLayers = function () {
  var activelayers = [];
  this.map.getLayers().forEach(function (layer) {
    var props = layer.getProperties();
    if (props.basemap !== true && props.visible) {
      activelayers.push(layer);
    }
  });

  return activelayers;
};

_Viewer.prototype.removeLayers = function () {
  this.map.getLayers().clear();
};

_Viewer.prototype.getLayersNoBase = function () {
  var layers = [];
  this.map.getLayers().forEach(function (layer) {
    var props = layer.getProperties();
    if (props.basemap != true) {
      layers.push(layer);
    }
  });

  return layers;
};

_Viewer.prototype.addBaseLayer = function (type) {
  var layer = void 0;
  type ? layer = BaseLayers[type] : layer = BaseLayers.BING.Aerial;
  this.map.addLayer(layer);
};

_Viewer.prototype.changeBaseLayer = function (layerName) {
  var baseLayer = this.getLayerByName(layername);
  var layers = this.map.getLayers();
  layers.insertAt(0, baseLayer);
};

module.exports = MapHelpers;

},{"../layers/bases":528,"../projection/projections":532}],531:[function(require,module,exports){
var GENERIC_GRID_EXTENT = [0, 0, 8388608, 8388608];
var GRID_EXTENT_3857 = ol.proj.get('EPSG:3857').getExtent();
var GENERIC_GRID_EXTENT_DEGREE = [-180, -90, 180, 90];
var CUSTOM_PROJECTIONS_EXTENT = {
  'EPSG:3876': [18835101.07, 4367049.45, 22702879.51, 9383109.87],
  'EPSG:32733': GRID_EXTENT_3857
};

var Projection = function Projection() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!options.crs) return null;
  var _options$crs = options.crs,
      epsg = _options$crs.epsg,
      proj4def = _options$crs.proj4,
      _options$crs$geograph = _options$crs.geographic,
      geographic = _options$crs$geograph === undefined ? false : _options$crs$geograph,
      _options$crs$axisinve = _options$crs.axisinverted,
      axisinverted = _options$crs$axisinve === undefined ? false : _options$crs$axisinve; // new structure of information crs from server

  proj4def && proj4.defs(epsg, proj4def);
  this._axisOrientation = axisinverted ? 'neu' : 'enu';
  var degrees = geographic;
  ol.proj.Projection.call(this, {
    code: epsg,
    extent: options.extent ? options.extent : degrees ? GENERIC_GRID_EXTENT_DEGREE : CUSTOM_PROJECTIONS_EXTENT[epsg] || GENERIC_GRID_EXTENT,
    axisOrientation: this._axisOrientation,
    units: degrees ? 'degrees' : 'm'
  });
};

ol.inherits(Projection, ol.proj.Projection);

var proto = Projection.prototype;

proto.getAxisOrientation = function () {
  return this._axisOrientation;
};

proto.isInvertedAxisOrientation = function () {
  return this._axisOrientation === 'neu';
};

proto.getOlProjection = function () {};

module.exports = Projection;

},{}],532:[function(require,module,exports){
var Projection = require('./projection');
var ADDEDPROJECTIONS = ['EPSG:4326', 'EPSG:3857'];

var Projections = {
  get: function get() {
    var crs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var extent = arguments[1];

    var cachedProjection = ADDEDPROJECTIONS.indexOf(crs.epsg) !== -1 ? ol.proj.get(crs.epsg) : null;
    if (cachedProjection) return cachedProjection;
    var projection = new Projection({
      crs: crs,
      extent: extent
    });
    ol.proj.addProjection(projection);
    ADDEDPROJECTIONS.push(crs.epsg);
    return projection;
  },
  setApplicationProjections: function setApplicationProjections() {
    this.get({
      epsg: "EPSG:3003",
      proj4: "+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=1500000 +y_0=0 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });

    this.get({
      epsg: "EPSG:3004",
      proj4: "+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9996 +x_0=2520000 +y_0=0 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });

    this.get({
      epsg: "EPSG:3045",
      proj4: "+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
      axisinverted: true,
      geographic: false
    });

    this.get({
      epsg: "EPSG:6708",
      proj4: "+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs",
      axisinverted: true,
      geographic: false
    });

    this.get({
      epsg: "EPSG:32632",
      proj4: "+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });

    this.get({
      epsg: "EPSG:32633",
      proj4: "+proj=utm +zone=33 +ellps=WGS84 +datum=WGS84 +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });

    this.get({
      epsg: "EPSG:25833",
      proj4: "+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });

    this.get({
      epsg: "EPSG:23032",
      proj4: "+proj=utm +zone=32 +ellps=intl +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });

    this.get({
      epsg: "EPSG:23033",
      proj4: "+proj=utm +zone=33 +ellps=intl +units=m +no_defs",
      axisinverted: false,
      geographic: false
    });
    //REGISTER AT THE END THE CUSTOM PROJECTIONS
    ol.proj.proj4.register(proj4);
  }
};

module.exports = Projections;

},{"./projection":531}],533:[function(require,module,exports){
var utils = {
  merge: function merge(obj1, obj2) {
    var obj3 = {};
    for (var attrname in obj1) {
      obj3[attrname] = obj1[attrname];
    }
    for (var _attrname in obj2) {
      obj3[_attrname] = obj2[_attrname];
    }
    return obj3;
  }
};

module.exports = utils;

},{}],534:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var OGC_PIXEL_WIDTH = 0.28;

var INCHES_PER_UNIT = {
  m: 39.37, //
  degrees: 4374754
};

//const DOTS_PER_INCH = ol.has.DEVICE_PIXEL_RATIO * 96; //DPI96
var DOTS_PER_INCH = 96; //DPI96

var utils = {
  getExtentForViewAndSize: function getExtentForViewAndSize(center, resolution, rotation, size) {
    var dx = resolution * size[0] / 2;
    var dy = resolution * size[1] / 2;
    var cosRotation = Math.cos(rotation);
    var sinRotation = Math.sin(rotation);
    var xCos = dx * cosRotation;
    var xSin = dx * sinRotation;
    var yCos = dy * cosRotation;
    var ySin = dy * sinRotation;
    var x = center[0];
    var y = center[1];
    var x0 = x - xCos + ySin;
    var x1 = x - xCos - ySin;
    var x2 = x + xCos - ySin;
    var x3 = x + xCos + ySin;
    var y0 = y - xSin - yCos;
    var y1 = y - xSin + yCos;
    var y2 = y + xSin + yCos;
    var y3 = y + xSin - yCos;
    //return [Math.min(y0, y1, y2, y3),Math.min(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), Math.max(x0, x1, x2, x3)]
    return [Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3)];
  },

  // function that create a polygon vector layer from bbox
  createPolygonLayerFromBBox: function createPolygonLayerFromBBox(bbox) {
    var polygonFeature = new ol.Feature(new ol.geom.Polygon.fromExtent(bbox));
    var vectorSource = new ol.source.Vector({
      features: [polygonFeature]
    });
    var polygonLayer = new ol.layer.Vector({
      source: vectorSource
    });
    return polygonLayer;
  },
  reverseGeometry: function reverseGeometry(geometry) {
    var reverseCoordinates = function reverseCoordinates(coordinates) {
      coordinates.find(function (coordinate) {
        if (Array.isArray(coordinate)) {
          reverseCoordinates(coordinate);
        } else {
          var _coordinates = _slicedToArray(coordinates, 2),
              y = _coordinates[0],
              x = _coordinates[1];

          coordinates[0] = x;
          coordinates[1] = y;
          return true;
        }
      });
    };
    var coordinates = geometry.getCoordinates();
    reverseCoordinates(coordinates);
    geometry.setCoordinates(coordinates);
    return geometry;
  },
  getScaleFromResolution: function getScaleFromResolution(resolution) {
    var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "m";

    return Math.round(resolution * INCHES_PER_UNIT[units] * DOTS_PER_INCH);
  },
  getResolutionFromScale: function getResolutionFromScale(scale) {
    var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "m";

    var normScale = scale >= 1.0 ? 1.0 / scale : scale; // just to prevent that scale is passed as 1:10000 or 0.0001
    return 1 / (normScale * INCHES_PER_UNIT[units] * DOTS_PER_INCH);
  },
  getDPI: function getDPI() {
    return DOTS_PER_INCH;
  },
  getMetersFromDegrees: function getMetersFromDegrees(degrees) {
    return degrees * ol.proj.Units.METERS_PER_UNIT.degrees;
  }
};

module.exports = utils;

},{}],535:[function(require,module,exports){
module.exports = "<div class=\"wrapper\" v-disabled=\"app.disabled\">\n  <header v-if=\"!isIframe\" class=\"main-header\">\n    <!-- Logo -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav ref=\"navbar\" class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n          <button ref='navbar_toggle' type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#main-navbar\">\n            <i style=\"font-size: 1.3em;\" :class=\"g3wtemplate.getFontClass('ellips-v')\"></i>\n          </button>\n          <!-- Toggle button on navbar only for mobile -->\n          <a v-if=\"isMobile()\" href=\"#\" class=\"sidebar-toggle\" data-toggle=\"offcanvas\" role=\"button\">\n            <i style=\"font-size: 1.3em;\" :class=\"g3wtemplate.getFontClass('bars')\"></i>\n          </a>\n          <div class=\"logo-wrapper\" :class=\"{'mobile': isMobile()}\">\n            <a  v-if=\"logo_url\" :href=\"logo_link\" :target=\"logo_link_target\" class=\"project_logo_link\">\n              <img style=\"max-width: 250px;\" ref=\"img_logo\" :src=\"logo_url\">\n            </a>\n            <div ref=\"main_title_project_title\" class=\"project_title_content\">\n              <div  v-if=\"!isMobile()\" class=\"main_title\">{{ main_title }}</div>\n              <div class=\"sub_title\">{{project_title}}</div>\n            </div>\n          </div>\n        </div>\n        <div ref=\"mainnavbar\" class=\"collapse navbar-collapse\" id=\"main-navbar\" style=\"text-align: center; overflow: hidden\">\n          <navbarleftitems></navbarleftitems>\n          <navbarrightitems></navbarrightitems>\n          <ul class=\"nav navbar-nav navbar-right app-navbar-nav\">\n            <li v-if=\"!user\" class=\"dropdown user user-menu\">\n              <a :href=\"login_url\">\n                <i :class=\"g3wtemplate.getFontClass('sign-in')\" aria-hidden=\"true\"></i>\n                <span v-t=\"'sign_in'\"></span>\n              </a>\n            </li>\n            <header-item :state=\"state\" @show-custom-modal-content=\"showCustomModalContent\" v-for=\"state in custom_header_items_position[0]\" :key=\"state.id\"></header-item>\n            <li id=\"changemaps\" class=\"dropdown user\" v-if=\"numberOfProjectsInGroup > 1\">\n              <a href=\"#\" @click=\"openProjectsMenu\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                <i :class=\"g3wtemplate.getFontClass('change-map')\" aria-hidden=\"true\"></i>\n                <span v-t=\"'changemap'\"></span>\n              </a>\n            </li>\n            <header-item :state=\"state\" @show-custom-modal-content=\"showCustomModalContent\" v-for=\"state in custom_header_items_position[1]\" :key=\"state.id\"></header-item>\n            <li v-if=\"user\" class=\"dropdown user user-menu\">\n              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                <i :class=\"g3wtemplate.getFontClass('user')\"></i>\n                <span class=\"hidden-xs\">{{ user.username }}</span>\n              </a>\n              <ul class=\"dropdown-menu\">\n                <li class=\"user-header\">\n                  <p>\n                    {{ user.first_name }} {{ user.last_name }}\n                  </p>\n                </li>\n                <li class=\"user-footer\">\n                  <div class=\"pull-left\" v-if=\"user.admin_url\">\n                    <a :href=\"user.admin_url\" class=\"btn btn-default btn-flat skin-color bold\" ><i :class=\"g3wtemplate.getFontClass('folder')\"></i> Admin</a>\n                  </div>\n                  <div class=\"pull-right\">\n                    <a :href=\"user.logout_url\" class=\"btn btn-default btn-flat skin-color bold\" v-t=\"'logout'\"><i :class=\"g3wtemplate.getFontClass('sign-out')\" style=\"margin-right: 2px;\"></i></a>\n                  </div>\n                </li>\n              </ul>\n            </li>\n            <header-item :state=\"state\" @show-custom-modal-content=\"showCustomModalContent\" v-for=\"state in custom_header_items_position[2]\" :key=\"state.id\"></header-item>\n            <li class=\"dropdown user user-menu\">\n              <a href=\"#\" data-toggle=\"modal\" data-target=\"#credits\" class=\"dropdown-toggle\">\n                <i :class=\"g3wtemplate.getFontClass('credits')\" aria-hidden=\"true\"></i>\n                <span>Credits</span>\n              </a>\n            </li>\n            <header-item :state=\"state\" @show-custom-modal-content=\"showCustomModalContent\" v-for=\"state in custom_header_items_position[3]\" :key=\"state.id\"></header-item>\n            <li v-if=\"languages\" class=\"g3w-languages\">\n              <select v-select2=\"'language'\" class=\"form-control\" :templateSelection=\"templateResultLanguages\" :templateResult=\"templateResultLanguages\" v-model=\"language\" style=\"cursor:pointer; width: 130px;\">\n                <option v-for=\"_language in languages\" :key=\"_language[0]\" :value=\"_language[0]\" :selected=\"_language[0] === language && 'selected'\">\n                  {{_language[1]}}\n                </option>\n              </select>\n            </li>\n            <li v-if=\"frontendurl\" class=\"dropdown\">\n              <a :href=\"frontendurl\">\n                <span><i :class=\"g3wtemplate.getFontClass('home')\"></i> Home</span>\n              </a>\n            </li>\n            <header-item :state=\"state\" @show-custom-modal-content=\"showCustomModalContent\" v-for=\"state in custom_header_items_position[4]\" :key=\"state.id\"></header-item>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  <sidebar></sidebar>\n  <!-- Content Wrapper. Contains page content -->\n  <div class=\"content-wrapper\" :style=\"{paddingTop: isIframe ? 0 : null}\">\n    <viewport :appState=\"appState\"></viewport>\n  </div>\n  <!-- /.content-wrapper -->\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar's background. This div must be placed\n       immediately after the control sidebar -->\n  <div class=\"control-sidebar-bg\"></div>\n  <!--full screen modal element-->\n  <div class=\"modal fade modal-fullscreen force-fullscreen\" id=\"full-screen-modal\" tabindex=\"-1\" role=\"dialog\" data-backdrop=\"static\" data-keyboard=\"false\" aria-labelledby=\"full-screen-modal\" aria-hidden=\"true\"></div>\n  <!---->\n  <div id=\"credits\" class=\"modal fade\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\n            style=\"color: #ffffff; font-weight: bold; opacity: 1; position: absolute; right: 25px; top: 20px\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n          <div style=\"display: flex; flex-direction: column; justify-content: space-around; justify-items: center; align-items: center\">\n            <div class=\"customcredits\" v-if=\"!!customcredits\" v-html=\"customcredits\"></div>\n            <div v-if=\"powered_by\">\n              <div class=\"g3w-credits-block\">\n                <div v-t=\"'credits.g3wSuiteFramework'\" style=\"background-color: #95ad36; padding: 5px; border-radius:3px; color: #ffffff\" class=\"credit-title-logo\"></div>\n                <a target=\"_blank\" href=\"https://g3wsuite.gis3w.it/\">\n                  <img class=\"g3w-suite-logo\" :src=\"g3w_suite_logo\" alt=\"\">\n                </a>\n                <div v-t=\"'credits.g3wSuiteDescription'\" style=\"margin-top: 10px;\"></div>\n              </div>\n              <div v-t:pre =\"'credits.productOf'\" class=\"credit-title-logo g3w-credits-block\" style=\"font-size: 1em; display: flex; justify-content: center\">\n                <a style=\"text-align: center!important;\" href=\"http://www.gis3w.it\" target=\"_blank\">\n                  <img width=\"60\" style=\"margin-left: 5px\" :src=\"credits_logo\" class=\"img-responsive center-block\" alt=\"\">\n                </a>\n              </div>\n              <address id=\"address-credits\"  style=\"line-height: 1.3; text-align: center; margin-top: 5px; display: flex; justify-content: center\">\n                <span style=\"padding: 2px\">\n                  <span style=\"color: #95ad36; font-weight: bold\" :class=\"g3wtemplate.getFontClass('marker')\" aria-hidden=\"true\"></span> Montecatini Terme - Italy\n                </span>\n                <span style=\"padding: 2px\">\n                  <span style=\"color: #95ad36\" :class=\"g3wtemplate.getFontClass('mobile')\" aria-hidden=\"true\"></span>  +39 393 8534336\n                </span>\n                <span style=\"padding: 2px\">\n                  <span style=\"color: #95ad36\" :class=\"g3wtemplate.getFontClass('mail')\" aria-hidden=\"true\"></span>\n                  <a href=\"mailto:info@gis3w.it\" style=\"color:#000000\"> info@gis3w.it</a>\n                </span>\n              </address>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div id=\"custom_modal\" class=\"modal fade\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\" v-html=\"current_custom_modal_content\"></div>\n    </div>\n  </div>\n</div>\n";

},{}],536:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ApplicationService = require('core/applicationservice');
var ProjectsRegistry = require('core/project/projectsregistry');

var _require = require('core/utils/utils'),
    uniqueId = _require.uniqueId;

var HeaderItem = require('gui/header/headeritem');
var GUI = require('gui/gui');
var layout = require('./layout');
var compiledTemplate = Vue.compile(require('./app.html'));

var _require2 = require('gui/vue/vue.mixins'),
    resizeMixin = _require2.resizeMixin;

var AppUI = Vue.extend(_extends({}, compiledTemplate, {
  mixins: [resizeMixin],
  data: function data() {
    var _ref;

    return _ref = {
      customcredits: false,
      current_custom_modal_content: null,
      appState: ApplicationService.getState()
    }, _defineProperty(_ref, 'current_custom_modal_content', null), _defineProperty(_ref, 'language', null), _ref;
  },

  components: {
    HeaderItem: HeaderItem
  },
  computed: {
    app: function app() {
      return this.appState.gui.app;
    },
    languages: function languages() {
      return this.appconfig.i18n;
    },
    currentProject: function currentProject() {
      return ProjectsRegistry.getCurrentProject();
    },
    appconfig: function appconfig() {
      return ApplicationService.getConfig();
    },
    isIframe: function isIframe() {
      return !!this.appconfig.group.layout.iframe;
    },
    urls: function urls() {
      return this.appconfig.urls;
    },
    staticurl: function staticurl() {
      return this.urls.staticurl;
    },
    powered_by: function powered_by() {
      return this.appconfig.group.powered_by;
    },
    clienturl: function clienturl() {
      return this.urls.clienturl;
    },
    g3w_suite_logo: function g3w_suite_logo() {
      return this.clienturl + 'images/g3wsuite_logo.png';
    },
    credits_logo: function credits_logo() {
      return this.clienturl + 'images/logo_gis3w_156_85.png';
    },
    logo_url: function logo_url() {
      var logo_project_url = this.currentProject.getThumbnail();
      return logo_project_url ? logo_project_url : '' + this.appconfig.mediaurl + this.appconfig.logo_img;
    },
    logo_link: function logo_link() {
      var logo_link = this.getLogoLink();
      return logo_link ? logo_link : "#";
    },
    logo_link_target: function logo_link_target() {
      var logo_link = this.getLogoLink();
      return logo_link ? "_blank" : "";
    },
    project_title: function project_title() {
      return this.currentProject.getState().name;
    },
    user: function user() {
      return this.appconfig.user && this.appconfig.user.username ? this.appconfig.user : null;
    },
    login_url: function login_url() {
      return this.appconfig.user.login_url;
    },
    numberOfProjectsInGroup: function numberOfProjectsInGroup() {
      return this.appconfig.projects.length;
    },
    frontendurl: function frontendurl() {
      return this.urls.frontendurl;
    },
    main_title: function main_title() {
      var main_title = this.appconfig.main_map_title;
      var group_name = this.appconfig.group.name;
      return main_title ? main_title + ' - ' + group_name : group_name;
    }
  },
  methods: {
    templateResultLanguages: function templateResultLanguages(state) {
      if (!state.id) return state.text;
      var flagsurl = this.staticurl + 'img/flags';
      var $state = $('<div style="font-weight: bold; display:flex; align-items: center; justify-content: space-around">\n            <img src="' + flagsurl + '/' + state.element.value.toLowerCase() + '.png" />\n            <span>' + state.text + '</span> \n          </span>');
      return $state;
    },
    resize: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var max_width;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.isIframe) {
                  _context.next = 5;
                  break;
                }

                _context.next = 3;
                return this.$nextTick();

              case 3:
                max_width = this.$refs.navbar_toggle.offsetWidth > 0 ? this.$refs.navbar.offsetWidth - this.$refs.navbar_toggle.offsetWidth : this.$refs.mainnavbar.offsetWidth - this.rightNavbarWidth;

                this.$refs.main_title_project_title.style.maxWidth = (max_width - this.logoWidth || 150) + 'px';

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function resize() {
        return _ref2.apply(this, arguments);
      }

      return resize;
    }(),
    showCustomModalContent: function showCustomModalContent(id) {
      var _custom_modals$find = this.custom_modals.find(function (custommodal) {
        return custommodal.id === id;
      }),
          content = _custom_modals$find.content;

      this.current_custom_modal_content = content;
    },
    closePanel: function closePanel() {
      sidebarService.closePanel();
    },
    getLogoLink: function getLogoLink() {
      return this.appconfig.logo_link ? this.appconfig.logo_link : null;
    },
    openProjectsMenu: function openProjectsMenu() {
      GUI.openProjectsMenu();
    }
  },
  watch: {
    'language': function language(lng, currentlng) {
      currentlng && ApplicationService.changeLanguage(lng);
    }
  },
  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
    this.delayTime = 0;
  },
  created: function created() {
    var _this = this;

    this.language = this.appconfig._i18n.lng;
    this.custom_modals = [];
    this.custom_header_items_position = {
      0: [],
      1: [],
      2: [],
      3: [],
      4: []
    };
    this.customlinks = Array.isArray(this.appconfig.header_custom_links) ? this.appconfig.header_custom_links.filter(function (customitem) {
      if (customitem !== null) {
        var id = customitem.id = uniqueId();
        customitem.type === 'modal' && _this.custom_modals.push({
          id: id,
          content: customitem.content
        });
        var position = 1 * (customitem.position || 0);
        position = position > 4 ? 4 : position < 0 || Number.isNaN(position) ? 0 : position;
        _this.custom_header_items_position[position].push(customitem);
        return true;
      }
      return false;
    }) : [];

    !!this.appconfig.credits && $.get(this.appconfig.credits).then(function (credits) {
      return _this.customcredits = credits !== 'None' && credits;
    });
  },
  mounted: function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this2 = this;

      var rightNavBarElements, elementLenght, i, controlsidebarEl, setFloatBarMaxHeight, setModalHeight;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              setModalHeight = function setModalHeight() {
                $('#g3w-modal-overlay').css('height', $(window).height());
              };

              setFloatBarMaxHeight = function setFloatBarMaxHeight() {
                $(controlsidebarEl).css('max-height', $(window).innerHeight());
                $('.g3w-sidebarpanel').css('height', $(window).height() - $("#main-navbar").height());
              };

              this.logoWidth = 0;
              _context2.next = 5;
              return this.$nextTick();

            case 5:
              rightNavBarElements = !this.isIframe ? this.$refs.mainnavbar.getElementsByTagName('ul') : [];
              elementLenght = rightNavBarElements.length;

              this.rightNavbarWidth = 15; // margin right
              for (i = 0; i < elementLenght; i++) {
                this.rightNavbarWidth += rightNavBarElements.item(i).offsetWidth;
              }
              this.language = this.appconfig.user.i18n;
              _context2.next = 12;
              return this.$nextTick();

            case 12:
              !this.isIframe && this.$refs.img_logo.addEventListener('load', function () {
                _this2.logoWidth = _this2.$refs.img_logo.offsetWidth + 15; // added marging
                _this2.resize();
              }, { once: true });
              /* start to render LayoutManager layout */
              layout.loading(false);
              layout.setup();
              //Fix the problem with right sidebar and layout boxed
              layout.pushMenu.expandOnHover();
              layout.controlSidebar._fix($(".control-sidebar-bg"));
              layout.controlSidebar._fix($(".control-sidebar"));
              controlsidebarEl = layout.options.controlSidebarOptions.selector;

              setFloatBarMaxHeight();

              $(window).resize(function () {
                setFloatBarMaxHeight();
                setModalHeight();
              });

            case 21:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref3.apply(this, arguments);
    }

    return mounted;
  }()
}));

module.exports = AppUI;

},{"./app.html":535,"./layout":538,"core/applicationservice":401,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/gui":575,"gui/header/headeritem":577,"gui/vue/vue.mixins":731}],537:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    toRawType = _require.toRawType;

var t = require('core/i18n/i18n.service').t;
var G3WObject = require('core/g3wobject');
var ProjectsMenuComponent = require('gui/projectsmenu/projectsmenu');
var ComponentsRegistry = require('gui/componentsregistry');
var GUI = require('gui/gui');
var VueAppPlugin = require('gui/vue/vueappplugin');
var G3wApplicationFilterPlugin = require('gui/vue/vue.filter');
var GlobalComponents = require('gui/vue/vue.globalcomponents');
var GlobalDirective = require('gui/vue/vue.directives');

// install global components
Vue.use(GlobalComponents);
// install gloabl directive
Vue.use(GlobalDirective);

// install Application Filter Plugin
Vue.use(G3wApplicationFilterPlugin);

// install template information library (es. classes etc..)
Vue.use(VueAppPlugin, {});

// set mixins inheriAttrs to avoid tha unused props are setted as attrs
Vue.mixin({
  inheritAttrs: false
});

// get all items needed by application
var App = require('gui/app/app');
var sidebar = require('gui/sidebar/sidebar');
var floatbar = require('gui/floatbar/floatbar');
var viewport = require('gui/viewport/viewport');
var navbaritems = require('gui/navbar/navbaritems');
var layout = require('./layout');

// loading spinner at beginning
layout.loading(true);

var ApplicationTemplate = function ApplicationTemplate(_ref) {
  var ApplicationService = _ref.ApplicationService;

  var appLayoutConfig = ApplicationService.getConfig().layout || {};
  // useful to build a difference layout/compoìnent based on mobile or not
  this._isMobile = isMobile.any;
  this._isIframe = appLayoutConfig.iframe;
  this.sizes = {
    sidebar: {
      width: 0
    }
  };
  /*
    usefull to show onaly last waiting request output
    at moment will be an object
    {
      stop: function to sot to show result
    }
   */
  this.waitingoutputdataplace = null;
  this.init = function () {
    // create Vue App
    this._createApp();
  };
  // create application config
  this._createTemplateConfig = function () {
    var G3WTemplate = Vue.prototype.g3wtemplate;
    var appTitle = ApplicationService.getConfig().apptitle || 'G3W Suite';
    var ContentsComponent = require('gui/viewport/contentsviewer');
    var CatalogComponent = require('gui/catalog/vue/catalog');
    var SearchComponent = require('gui/search/vue/search');
    var QueryBuilderUIFactory = require('gui/querybuilder/querybuilderuifactory');
    var PrintComponent = require('gui/print/vue/print');
    var MetadataComponent = require('gui/metadata/vue/metadata');
    var ToolsComponent = require('gui/tools/vue/tools');
    var MapComponent = require('gui/map/vue/map');
    var QueryResultsComponent = require('gui/queryresults/vue/queryresults');
    return {
      title: appTitle,
      placeholders: {
        navbar: {
          components: []
        },
        sidebar: {
          components: [new MetadataComponent({
            id: 'metadata',
            open: false,
            collapsible: false,
            icon: G3WTemplate.getFontClass('file'),
            mobile: true
          }), new PrintComponent({
            id: 'print',
            open: false,
            collapsible: true, //  it used to manage click event if can run setOpen component method
            icon: G3WTemplate.getFontClass('print'),
            mobile: false
          }), new SearchComponent({
            id: 'search',
            open: false,
            collapsible: true,
            icon: G3WTemplate.getFontClass('search'),
            actions: [{
              id: "querybuilder",
              class: G3WTemplate.getFontClass('calculator'),
              tooltip: 'Query Builder',
              fnc: function fnc() {
                GUI.closeContent();
                ApplicationTemplate.Services.sidebar.closeOpenComponents();
                QueryBuilderUIFactory.show({
                  type: 'sidebar' // sidebar or modal
                });
              },
              style: {
                color: '#8DC3E3',
                padding: '6px',
                fontSize: '1.2em',
                boxShadow: '0 2px 5px rgba(0,0,0, 0.3)',
                borderRadius: '3px',
                marginRight: '5px'
              }
            }],
            mobile: true
          }),
          // Component that store plugins
          new ToolsComponent({
            id: 'tools',
            open: false,
            collapsible: true,
            icon: G3WTemplate.getFontClass('tools'),
            mobile: true
          }), new CatalogComponent({
            id: 'catalog',
            open: false,
            collapsible: false,
            isolate: true,
            icon: G3WTemplate.getFontClass('map'),
            mobile: true,
            config: {
              legend: {
                config: appLayoutConfig.legend,
                place: 'tab' // configuration value where to show legend (tab or toc)
              }
            }
          })]
        },
        floatbar: {
          components: []
        }
      },
      othercomponents: [new QueryResultsComponent({
        id: 'queryresults'
      })],
      viewport: {
        // placeholder of the content (view content). Secondary view (hidden)
        components: {
          map: new MapComponent({
            id: 'map'
          }),
          content: new ContentsComponent({
            id: 'contents'
          })
        }
      }
    };
  };

  //Vue app
  this._createApp = function () {
    this._setDataTableLanguage();
    var self = this;
    if (isMobile.any || this._isIframe) $('body').addClass('sidebar-collapse');
    return new Vue({
      el: '#app',
      created: function created() {
        // set general metods for the application as  GUI.showForm etc ..
        self._setupInterface();
        // setup layout
        self._setupLayout();
        //register all services fro the application
        self._setUpServices();
        // create templateConfig
        self.templateConfig = self._createTemplateConfig();
        // listen lng change and reset datatable lng
        this.$watch(function () {
          return _applicationstate2.default.lng;
        }, function () {
          self._setDataTableLanguage();
        });
      },
      mounted: function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var skinColor;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.$nextTick();

                case 2:
                  self._buildTemplate();
                  // setup Font, Css class methods
                  self._setUpTemplateDependencies(this);
                  $(document).localize();
                  self._setViewport(self.templateConfig.viewport);
                  skinColor = $('.navbar').css('background-color');

                  GUI.skinColor = skinColor && '#' + skinColor.substr(4, skinColor.indexOf(')') - 4).split(',').map(function (color) {
                    return parseInt(color).toString(16);
                  }).join('');
                  _context.next = 10;
                  return this.$nextTick();

                case 10:
                  self.emit('ready');
                  self.sizes.sidebar.width = $('#g3w-sidebar').width();
                  //getSkinColor
                  GUI.ready();

                case 13:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function mounted() {
          return _ref2.apply(this, arguments);
        }

        return mounted;
      }()
    });
  };

  this._setupLayout = function () {
    if (!isMobile.any) {
      // setup map controls
      $("<style type='text/css'> .ol-control-tl {" + "top: 7px;" + "left:43px;" + "}</style>").appendTo("head");
    }
    // Inizialization of the components of the application
    Vue.component('sidebar', sidebar.SidebarComponent);
    //Navbar custom items
    Vue.component('navbarleftitems', navbaritems.components.left);
    Vue.component('navbarrightitems', navbaritems.components.right);
    Vue.component('viewport', viewport.ViewportComponent);
    Vue.component('floatbar', floatbar.FloatbarComponent);
    Vue.component('app', App);
  };

  // dataTable Translations and custom extentions
  this._setDataTableLanguage = function () {
    var dataTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var lngOptions = {
      "language": {
        "sSearch": '',
        "searchPlaceholder": t("dosearch"),
        "sLengthMenu": t("dataTable.lengthMenu"),
        "paginate": {
          "previous": t("dataTable.previous"),
          "next": t("dataTable.next")
        },
        "info": t("dataTable.info"),
        "zeroRecords": t("dataTable.nodatafilterd"),
        "infoFiltered": ''
      }
    };
    //set form control class to filter
    $.extend($.fn.dataTableExt.oStdClasses, {
      "sFilterInput": "form-control search"
    });
    !dataTable ? $.extend(true, $.fn.dataTable.defaults, lngOptions) : dataTable.dataTable({ "oLanguage": lngOptions });
  };

  // route setting att beginning (is an example)
  this._addRoutes = function () {
    var RouterService = ApplicationService.getRouterService();
    var mapService = GUI.getComponent('map').getService();
    RouterService.addRoute('map/zoomto/{coordinate}/:zoom:', function (coordinate, zoom) {
      coordinate = _.map(coordinate.split(','), function (xy) {
        return Number(xy);
      });
      zoom = zoom ? Number(zoom) : null;
      if (coordinate.length) {
        mapService.on('ready', function () {
          this.zoomTo(coordinate, zoom);
        });
      }
    });
  };

  //register all services
  this._setUpServices = function () {
    Object.keys(ApplicationTemplate.Services).forEach(function (element) {
      var service = ApplicationTemplate.Services[element];
      ApplicationService.registerService(element, service);
    });
    Object.values(GUI.getComponents()).forEach(function (component) {
      ApplicationService.registerService(component.id, component.getService());
    });
    ApplicationTemplate.Services.viewport.on('resize', function () {
      return GUI.emit('resize');
    });
  };
  // build template function
  this._buildTemplate = function () {
    var _this = this;

    floatbar.FloatbarService.init(layout);
    var placeholdersConfig = this.templateConfig.placeholders;
    Object.entries(placeholdersConfig).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          placeholder = _ref4[0],
          options = _ref4[1];

      _this._addComponents(options.components, placeholder);
    });
    //register other compoents
    this._addOtherComponents();
  };

  //add component not related to placeholder
  this._addOtherComponents = function () {
    if (this.templateConfig.othercomponents) this._addComponents(this.templateConfig.othercomponents);
  };
  // viewport setting
  this._setViewport = function (viewportOptions) {
    // viewport components
    // es.: map e content
    /*
     components: {
      map: new MapComponent({
        id: 'map'
      }),
      content: new ContentsComponent({
        id: 'content',
      })
     }
      */
    if (viewportOptions) {
      ApplicationTemplate.Services.viewport.init(viewportOptions);
      this._addComponents(viewportOptions.components);
    }
  };

  // add component to template
  this._addComponent = function (component, placeholder) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    this._addComponents([component], placeholder, options);
    return true;
  };

  // registry component
  this._addComponents = function (components, placeholder, options) {
    var register = true;
    if (placeholder && ApplicationTemplate.PLACEHOLDERS.indexOf(placeholder) > -1) {
      var placeholderService = ApplicationTemplate.Services[placeholder];
      if (placeholderService) register = placeholderService.addComponents(components, options);
    }
    Object.entries(components).forEach(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          key = _ref6[0],
          component = _ref6[1];

      if (register) {
        ComponentsRegistry.registerComponent(component);
        ApplicationService.registerService(component.id, component.getService());
      }
    });
  };

  this._removeComponent = function (componentId, placeholder, options) {
    var component = ComponentsRegistry.unregisterComponent(componentId);
    placeholder && ApplicationTemplate.Services[placeholder] && ApplicationTemplate.Services[placeholder].removeComponent(component, options);
  };

  this._showModalOverlay = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var message = arguments[1];

    var mapService = GUI.getComponent('map').getService();
    if (bool) mapService.startDrawGreyCover(message);else mapService.stopDrawGreyCover();
  };

  this._isSidebarVisible = function () {
    return !$('body').hasClass('sidebar-collapse');
  };

  this._showSidebar = function () {
    $('body').addClass('sidebar-open');
    $('body').removeClass('sidebar-collapse');
  };

  this._hideSidebar = function () {
    $('body').removeClass('sidebar-open');
    $('body').addClass('sidebar-collapse');
  };

  // setup Fonts Css dependencies methods
  this._setUpTemplateDependencies = function (VueApp) {
    GUI.isMobile = function () {
      return isMobile.any;
    };
    // method that return Template Info
    GUI.getTemplateInfo = function () {
      return VueApp.g3wtemplate.getInfo();
    };
    GUI.getTemplateInfo = function () {
      return VueApp.g3wtemplate.getInfo();
    };
    GUI.getFontClass = function (type) {
      return VueApp.g3wtemplate.getFontClass(type);
    };
  };

  /**
   * Convert error to user message showed
   * @param error
   * @returns {string}
   */
  GUI.errorToMessage = function (error) {
    var message = 'server_error';
    switch (toRawType(error)) {
      case 'Error':
        message = 'CLIENT - ' + error.message;
        break;
      case 'Object':
        if (error.responseJSON) {
          error = error.responseJSON;
          if (error.result === false) {
            var _error$error = error.error,
                _error$error$code = _error$error.code,
                code = _error$error$code === undefined ? '' : _error$error$code,
                _error$error$data = _error$error.data,
                data = _error$error$data === undefined ? '' : _error$error$data,
                _error$error$message = _error$error.message,
                msg = _error$error$message === undefined ? '' : _error$error$message;

            message = code.toUpperCase() + ' ' + data + ' ' + msg;
          }
        } else if (error.responseText) {
          message = error.responseText;
        }
        break;
      case 'Array':
        message = error.map(function (error) {
          return GUI.errorToMessage(error);
        }).join(' ');
        break;
      case 'String':
      default:
        message = error;
    }
    return message;
  };

  // setup Interaces
  this._setupInterface = function () {
    var _this2 = this;

    /* PLUBLIC INTERFACE */
    /* Common methods */
    GUI.layout = layout;
    GUI.getSize = function (_ref7) {
      var element = _ref7.element,
          what = _ref7.what;

      if (element && what) return _this2.sizes[element][what];
    };
    GUI.addComponent = this._addComponent.bind(this);
    GUI.removeComponent = this._removeComponent.bind(this);
    /* Metodos to define */
    GUI.getResourcesUrl = _.bind(function () {
      return ApplicationService.getConfig().resourcesurl;
    }, this);
    //LIST
    GUI.showList = _.bind(floatbar.FloatbarService.showPanel, floatbar.FloatbarService);
    GUI.closeList = _.bind(floatbar.FloatbarService.closePanel, floatbar.FloatbarService);
    GUI.hideList = _.bind(floatbar.FloatbarService.hidePanel, floatbar.FloatbarService);
    // TABLE
    GUI.showTable = function () {};
    GUI.closeTable = function () {};

    //Function called from DataRouterservice for gui output
    /**
     *
     * @param data
     * @param options
     */
    GUI.outputDataPlace = function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(dataPromise) {
        var _this3 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _options$title, title, show, _options$add, add, queryResultsService;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // show options (function) set if show data or not
                _options$title = options.title, title = _options$title === undefined ? '' : _options$title, show = options.show, _options$add = options.add, add = _options$add === undefined ? false : _options$add;
                queryResultsService = !add ? this.showContentFactory('query')(title) : GUI.getComponent('queryresults').getService();
                //check if waiting output data
                // in case we stop and sobsitute with new request data

                _context4.t0 = this.waitingoutputdataplace;

                if (!_context4.t0) {
                  _context4.next = 6;
                  break;
                }

                _context4.next = 6;
                return this.waitingoutputdataplace.stop();

              case 6:
                this.waitingoutputdataplace = function () {
                  var _stop = false;
                  _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                    var data, message;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return dataPromise;

                          case 3:
                            data = _context2.sent;

                            // in case of usermessage show user message
                            data.usermessage && GUI.showUserMessage({
                              type: data.usermessage.type,
                              message: data.usermessage.message,
                              autoclose: data.usermessage.autoclose
                            });
                            if (!_stop) {
                              if (!(show instanceof Function) || show(data)) queryResultsService.setQueryResponse(data, {
                                add: add
                              });else GUI.closeContent();
                            }
                            _context2.next = 13;
                            break;

                          case 8:
                            _context2.prev = 8;
                            _context2.t0 = _context2['catch'](0);
                            message = _this3.errorToMessage(_context2.t0);

                            _this3.showUserMessage({
                              type: 'alert',
                              message: message,
                              textMessage: true
                            });
                            _this3.closeContent();

                          case 13:
                            _context2.prev = 13;

                            if (!_stop) _this3.waitingoutputdataplace = null;
                            return _context2.finish(13);

                          case 16:
                          case 'end':
                            return _context2.stop();
                        }
                      }
                    }, _callee2, _this3, [[0, 8, 13, 16]]);
                  }))();
                  return {
                    stop: function () {
                      var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _stop = true;

                              case 1:
                              case 'end':
                                return _context3.stop();
                            }
                          }
                        }, _callee3, _this3);
                      }));

                      function stop() {
                        return _ref10.apply(this, arguments);
                      }

                      return stop;
                    }()
                  };
                }();
                return _context4.abrupt('return', queryResultsService);

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function (_x5) {
        return _ref8.apply(this, arguments);
      };
    }();

    GUI.showContentFactory = function (type) {
      var showPanelContent = void 0;
      switch (type) {
        case 'query':
          showPanelContent = GUI.showQueryResults;
          break;
        case 'form':
          showPanelContent = GUI.showForm;
          break;
      }
      return showPanelContent;
    };

    GUI.showForm = function (options) {
      var FormComponent = require('gui/form/vue/form');
      // new isnstace every time
      var formComponent = options.formComponent ? new options.formComponent(options) : new FormComponent(options);
      //get service
      var formService = formComponent.getService();
      // parameters : [content, title, push, perc, split, closable]
      GUI.setContent({
        perc: options.perc || null,
        content: formComponent,
        split: options.split || 'h',
        push: !!options.push, //only one( if other delete previous component)
        showgoback: !!options.showgoback,
        closable: false
      });
      // return service
      return formService;
    };
    GUI.closeForm = function () {
      this.emit('closeform', false);
      viewport.ViewportService.removeContent();
      // force set modal to false
      GUI.setModal(false);
    };

    GUI.disableElement = function (_ref11) {
      var element = _ref11.element,
          disable = _ref11.disable;

      disable && $(element).addClass('g3w-disabled') || $(element).removeClass('g3w-disabled');
    };

    GUI.disableContent = function (disable) {
      GUI.disableElement({
        element: "#g3w-view-content #contents",
        disable: disable
      });
    };

    GUI.disablePanel = function () {
      var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      GUI.disableElement({
        element: "#g3w-sidebarpanel-placeholder",
        disable: disable
      });
    };

    // hide content
    GUI.hideContent = function (bool, perc) {
      return viewport.ViewportService.hideContent(bool, perc);
    };

    GUI.closeContent = function () {
      this.emit('closecontent', false);
      return viewport.ViewportService.closeContent();
    };

    GUI.closeOpenSideBarComponent = function () {
      ApplicationTemplate.Services.sidebar.closeOpenComponents();
    };

    // show results info/search
    GUI.showQueryResults = function (title, results) {
      var perc = appLayoutConfig.rightpanel ? parseInt(appLayoutConfig.rightpanel.width) : 50;
      var queryResultsComponent = GUI.getComponent('queryresults');
      var queryResultService = queryResultsComponent.getService();
      queryResultService.reset();
      results && queryResultService.setQueryResponse(results);
      GUI.showContextualContent({
        perc: perc,
        content: queryResultsComponent,
        title: "info.title",
        post_title: title
      });
      return queryResultService;
    };
    GUI.addNavbarItem = function (item) {
      navbaritems.NavbarItemsService.addItem(item);
    };
    GUI.removeNavBarItem = function () {};
    GUI.showPanel = sidebar.SidebarService.showPanel.bind(sidebar.SidebarService);
    GUI.closePanel = sidebar.SidebarService.closePanel.bind(sidebar.SidebarService);
    ///
    GUI.disableApplication = function () {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      ApplicationService.disableApplication(bool);
    };

    //showusermessage
    GUI.showUserMessage = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      viewport.ViewportService.showUserMessage(options);
    };

    GUI.closeUserMessage = function () {
      viewport.ViewportService.closeUserMessage();
    };
    /* ------------------ */
    GUI.notify = {
      warning: function warning(message) {
        var autoclose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        GUI.showUserMessage({
          type: 'warning',
          message: message,
          autoclose: autoclose
        });
      },
      error: function error(message) {
        var autoclose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        GUI.showUserMessage({
          type: 'alert',
          message: message,
          autoclose: autoclose
        });
      },
      info: function info(message) {
        var autoclose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        GUI.showUserMessage({
          type: 'info',
          message: message,
          autoclose: autoclose
        });
      },
      success: function success(message) {
        GUI.showUserMessage({
          type: 'success',
          message: message,
          autoclose: true
        });
      }
    };
    // proxy  bootbox library
    GUI.dialog = bootbox;
    //modal dialog//
    GUI.showModalDialog = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return GUI.dialog.dialog(options);
    };
    /* spinner */
    GUI.showSpinner = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var container = options.container || 'body';
      var id = options.id || 'loadspinner';
      var where = options.where || 'prepend'; // append | prepend
      var style = options.style || '';
      var transparent = options.transparent ? 'background-color: transparent' : '';
      var center = options.center ? 'margin: auto' : '';
      if (!$("#" + id).length) {
        $(container)[where].call($(container), '<div id="' + id + '" class="spinner-wrapper ' + style + '" style="' + transparent + '"><div class="spinner ' + style + '" style="' + center + '"></div></div>');
      }
    };
    //hide spinner
    GUI.hideSpinner = function () {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'loadspinner';

      $("#" + id).remove();
    };
    /* end spinner*/
    /* end common methods */

    /*  */
    // FLOATBAR //
    GUI.showFloatbar = function () {
      floatbar.FloatbarService.open();
    };
    GUI.hideFloatbar = function () {
      floatbar.FloatbarService.close();
    };
    // SIDEBAR //
    GUI.showSidebar = this._showSidebar.bind(this);
    GUI.hideSidebar = this._hideSidebar.bind(this);
    GUI.isSidebarVisible = this._isSidebarVisible.bind(this);

    // RELOAD COMPONENTS
    GUI.reloadComponents = function () {
      ApplicationTemplate.Services.sidebar.reloadComponents();
    };
    // MODAL
    GUI.setModal = this._showModalOverlay.bind(this);
    GUI.showFullModal = function () {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref12$element = _ref12.element,
          element = _ref12$element === undefined ? "#full-screen-modal" : _ref12$element,
          _ref12$show = _ref12.show,
          show = _ref12$show === undefined ? true : _ref12$show;

      show ? $(element).modal('show') : $(element).modal('hide');
    };

    GUI.disableSideBar = function () {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      _applicationstate2.default.gui.sidebar.disabled = bool;
    };

    // VIEWPORT //
    GUI.setPrimaryView = function (viewName) {
      viewport.ViewportService.setPrimaryView(viewName);
    };
    // only map
    GUI.showMap = function () {
      viewport.ViewportService.showMap();
    };

    GUI.showContextualMap = function (perc, split) {
      perc = perc || 30;
      viewport.ViewportService.showContextualMap({
        perc: perc,
        split: split
      });
    };

    GUI.setContextualMapComponent = function (mapComponent) {
      viewport.ViewportService.setContextualMapComponent(mapComponent);
    };

    GUI.resetContextualMapComponent = function () {
      viewport.ViewportService.resetContextualMapComponent();
    };

    //  (100%) content
    GUI.showContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.perc = !_this2._isMobile ? options.perc || 100 : 100;
      GUI.setContent(options);
      return true;
    };

    GUI.showContextualContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.perc = !_this2._isMobile ? options.perc || 50 : 100;
      GUI.setContent(options);
      return true;
    };
    // add component to stack (append)
    // Differeces between pushContent and setContent are :
    //  - push every componet is added, set is refreshed
    //  - pushContent has a new parameter (backonclose) when is cliccked x
    //  - the contentComponet is close all stack is closed
    GUI.pushContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.perc = !_this2._isMobile ? options.perc || 100 : 100;
      options.push = true;
      GUI.setContent(options);
    };
    // add content to stack
    GUI.pushContextualContent = function (options) {
      options = options || {};
      options.perc = !_this2._isMobile ? options.perc || 50 : 100;
      options.push = true;
      GUI.setContent(options);
    };
    // remove last content from stack
    GUI.popContent = function () {
      viewport.ViewportService.popContent();
    };
    //return number of component of stack
    GUI.getContentLength = function () {
      return viewport.ViewportService.contentLength();
    };

    //get content percentage
    GUI.getContentPercentage = function () {
      return viewport.ViewportService.getContentPercentage();
    };

    GUI.setContentPercentage = function () {
      var perc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;

      viewport.ViewportService.setContentPercentage(perc);
    };

    GUI.getProjectMenuDOM = function () {
      var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          projects = _ref13.projects,
          host = _ref13.host,
          cbk = _ref13.cbk;

      var options = {
        projects: projects && Array.isArray(projects) && projects,
        cbk: cbk,
        host: host
      };
      var projectVueMenuComponent = new ProjectsMenuComponent(options).getInternalComponent();
      return projectVueMenuComponent.$mount().$el;
    };

    GUI._setContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      GUI.closeUserMessage();
      options.content = options.content || null;
      options.title = options.title || "";
      options.push = _.isBoolean(options.push) ? options.push : false;
      options.perc = !_this2._isMobile ? options.perc || 50 : 100;
      options.split = options.split || 'h';
      options.backonclose = _.isBoolean(options.backonclose) ? options.backonclose : false;
      options.showtitle = _.isBoolean(options.showtitle) ? options.showtitle : true;
      viewport.ViewportService.showContent(options);
    };

    GUI.hideClientMenu = function () {
      ApplicationService.getConfig().user = null;
    };

    GUI.hideChangeMaps = function () {
      ApplicationService.getConfig().projects = [];
    };

    // return specific classes
    GUI.getTemplateClasses = function () {
      return BootstrapVersionClasses;
    };

    GUI.getTemplateClass = function (_ref14) {
      var element = _ref14.element,
          type = _ref14.type;

      return BootstrapVersionClasses[element][type];
    };

    GUI.setLoadingContent = function () {
      var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      ApplicationTemplate.Services.viewport.setLoadingContent(loading);
      return loading && new Promise(function (resolve) {
        setTimeout(resolve, 200);
      });
    };

    GUI.openProjectsMenu = function () {
      var contentsComponent = GUI.getComponent('contents');
      // check if is projectmenucomponent
      if (contentsComponent.getComponentById('projectsmenu')) GUI.closeContent();else {
        if (this.isMobile()) {
          GUI.hideSidebar();
          $('#main-navbar.navbar-collapse').removeClass('in');
        }
        ApplicationTemplate.Services.sidebar.closeOpenComponents();
        GUI.setContent({
          content: new ProjectsMenuComponent(),
          title: '',
          perc: 100
        });
      }
    };
  };
  base(this);
};

inherit(ApplicationTemplate, G3WObject);

// Placeholder knowed by application
ApplicationTemplate.PLACEHOLDERS = ['navbar', 'sidebar', 'viewport', 'floatbar'];

// service know by the applications (standard)
ApplicationTemplate.Services = {
  navbar: null,
  sidebar: sidebar.SidebarService,
  viewport: viewport.ViewportService,
  floatbar: sidebar.FloatbarService
};

ApplicationTemplate.fail = function (_ref15) {
  var _ref15$language = _ref15.language,
      language = _ref15$language === undefined ? 'en' : _ref15$language,
      error = _ref15.error;

  layout.loading(false);
  var error_page = {
    it: {
      error: error || "Errore di connessione",
      at_moment: "Al momento non è possibile caricare la mappa",
      f5: "Premi Ctrl+F5"
    },
    en: {
      error: error || "Connection error",
      at_moment: "At the moment is not possible show map",
      f5: "Press Ctrl+F5"
    }
  };
  var compiledTemplate = Vue.compile(require('gui/templates/500.html'));
  var app = new Vue(_extends({
    el: '#app'
  }, compiledTemplate, {
    data: {
      messages: error_page[language]
    }
  }));
};

module.exports = ApplicationTemplate;

},{"./layout":538,"core/applicationstate":402,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/utils/utils":485,"gui/app/app":536,"gui/catalog/vue/catalog":541,"gui/componentsregistry":553,"gui/floatbar/floatbar":565,"gui/form/vue/form":574,"gui/gui":575,"gui/map/vue/map":636,"gui/metadata/vue/metadata":646,"gui/navbar/navbaritems":647,"gui/print/vue/print":659,"gui/projectsmenu/projectsmenu":664,"gui/querybuilder/querybuilderuifactory":665,"gui/queryresults/vue/queryresults":675,"gui/search/vue/search":691,"gui/sidebar/sidebar":694,"gui/templates/500.html":706,"gui/tools/vue/tools":710,"gui/viewport/contentsviewer":715,"gui/viewport/viewport":717,"gui/vue/vue.directives":728,"gui/vue/vue.filter":729,"gui/vue/vue.globalcomponents":730,"gui/vue/vueappplugin":732}],538:[function(require,module,exports){
//Make sure jQuery has been loaded before app.js
if (typeof jQuery === "undefined") {
  throw new Error("LayoutManager requires jQuery");
}

$.LayoutManager = {};

/* --------------------
 * - LayoutManager Options -
 * --------------------
 * Modify these options to suit your implementation
 */
$.LayoutManager.options = {
  //Add slimscroll to navbar menus
  //This requires you to load the slimscroll plugin
  //in every page before app.js
  navbarMenuSlimscroll: true,
  navbarMenuSlimscrollWidth: "0px", //The width of the scroll bar
  navbarMenuHeight: "200px", //The height of the inner menu
  //General animation speed for JS animated elements such as box collapse/expand and
  //sidebar treeview slide up/down. This options accepts an integer as milliseconds,
  //'fast', 'normal', or 'slow'
  animationSpeed: 'fast',
  //Sidebar push menu toggle button selector
  sidebarToggleSelector: "[data-toggle='offcanvas']",
  //Activate sidebar push menu
  sidebarPushMenu: true,
  //Activate sidebar slimscroll if the fixed layout is set (requires SlimScroll Plugin)
  sidebarSlimScroll: false,
  //Enable sidebar expand on hover effect for sidebar mini
  //This option is forced to true if both the fixed layout and sidebar mini
  //are used together
  sidebarExpandOnHover: false,
  //BoxRefresh Plugin
  enableBoxRefresh: true,
  //Enable Fast Click. Fastclick.js creates a more
  //native touch experience with touch devices. If you
  //choose to enable the plugin, make sure you load the script
  //before LayoutManager's app.js
  enableFastclick: true,
  //Control Sidebar Options
  enableControlSidebar: true,
  controlSidebarOptions: {
    //Which button should trigger the open/close event
    toggleBtnSelector: "[data-toggle='control-sidebar']",
    //The sidebar selector
    selector: ".control-sidebar",
    //Enable slide over content
    slide: true
  },
  //Box Widget Plugin. Enable this plugin
  //to allow boxes to be collapsed and/or removed
  enableBoxWidget: true,
  //Box Widget plugin options
  boxWidgetOptions: {
    boxWidgetIcons: {
      //Collapse icon
      collapse: 'fa-minus',
      //Open icon
      open: 'fa-plus',
      //Remove icon
      remove: 'fa-times'
    },
    boxWidgetSelectors: {
      //Remove button selector
      remove: '[data-widget="remove"]',
      //Collapse button selector
      collapse: '[data-widget="collapse"]'
    }
  },
  //Direct Chat plugin options
  directChat: {
    //Enable direct chat by default
    enable: true,
    //The button to open and close the chat contacts pane
    contactToggleSelector: '[data-widget="chat-pane-toggle"]'
  },
  //Define the set of colors to use globally around the website
  colors: {
    lightBlue: "#3c8dbc",
    red: "#f56954",
    green: "#00a65a",
    aqua: "#00c0ef",
    yellow: "#f39c12",
    blue: "#0073b7",
    navy: "#001F3F",
    teal: "#39CCCC",
    olive: "#3D9970",
    lime: "#01FF70",
    orange: "#FF851B",
    fuchsia: "#F012BE",
    purple: "#8E24AA",
    maroon: "#D81B60",
    black: "#222222",
    gray: "#d2d6de"
  },
  //The standard screen sizes that bootstrap uses.
  //If you change these in the variables.less file, change
  //them here too.
  screenSizes: {
    xs: 480,
    sm: 768,
    md: 992,
    lg: 1200
  }
};

/* ----------------------------------
 * - Initialize the LayoutManager Object -
 * ----------------------------------
 * All LayoutManager functions are implemented below.
 */
$.LayoutManager._init = function () {
  'use strict';
  /* Layout
   * ======
   * Fixes the layout height in case min-height fails.
   *
   * @type Object
   * @usage $.LayoutManager.layout.activate()
   *        $.LayoutManager.layout.fix()
   *        $.LayoutManager.layout.fixSidebar()
   */

  $.LayoutManager.layout = {
    activate: function activate() {
      var _this = this;
      _this.fix();
      _this.fixSidebar();
      $(window, ".wrapper").resize(function () {
        _this.fix();
        _this.fixSidebar();
      });
    },
    fix: function fix() {
      //Get window height and the wrapper height
      var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
      var window_height = $(window).height();
      var sidebar_height = $(".sidebar").height();
      //Set the min-height of the content and sidebar based on the
      //the height of the document.
      if ($("body").hasClass("fixed")) {
        $(".content-wrapper, .right-side").css('min-height', window_height - $('.main-footer').outerHeight());
        $(".content-wrapper, .right-side").css('height', window_height - $('.main-footer').outerHeight());
      } else {
        var postSetWidth = void 0;
        if (window_height >= sidebar_height) {
          $(".content-wrapper, .right-side").css('min-height', window_height - neg);
          postSetWidth = window_height - neg;
        } else {
          $(".content-wrapper, .right-side").css('min-height', sidebar_height);
          postSetWidth = sidebar_height;
        }
        //Fix for the control sidebar height
        var controlSidebar = $($.LayoutManager.options.controlSidebarOptions.selector);
        if (typeof controlSidebar !== "undefined") {
          if (controlSidebar.height() > postSetWidth) $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
        }
      }
    },
    fixSidebar: function fixSidebar() {
      //Make sure the body tag has the .fixed class
      if (!$("body").hasClass("fixed")) {
        if (typeof $.fn.slimScroll != 'undefined') {
          $(".sidebar").slimScroll({ destroy: true }).height("auto");
        }
        return;
      } else if (typeof $.fn.slimScroll == 'undefined' && window.console) {
        window.console.error("Error: the fixed layout requires the slimscroll plugin!");
      }
      //Enable slimscroll for fixed layout (sidebar)
      if ($.LayoutManager.options.sidebarSlimScroll && !isMobile.any) {
        if (typeof $.fn.slimScroll != 'undefined') {
          //Destroy if it exists
          $("#g3w-sidebar").slimScroll({ destroy: true }).height("auto");
          //Add slimscroll
          $("#g3w-sidebar").slimScroll({
            touchScrollStep: 50,
            height: $(window).height() - $(".navbar-header").height() - 10 + "px",
            color: "rgba(255,255,255,0.7)",
            size: "3px"
          });
        }
      } else {
        $(".sidebar").css({ 'height': $(window).height() - $(".navbar-header").height() + "px" });
        $(".sidebar").css('overflow-y', 'auto');
      }
    }

  };

  /* PushMenu()
   * ==========
   * Adds the push menu functionality to the sidebar.
   *
   * @type Function
   * @usage: $.LayoutManager.pushMenu("[data-toggle='offcanvas']")
   */
  $.LayoutManager.pushMenu = {
    activate: function activate(toggleBtn) {
      //Get the screen sizes
      var screenSizes = $.LayoutManager.options.screenSizes;

      //Enable sidebar toggle
      $(toggleBtn).on('click', function (e) {
        e.preventDefault();

        //Enable sidebar push menu
        if ($(window).width() > screenSizes.sm - 1) {
          if ($("body").hasClass('sidebar-collapse')) {
            $("body").removeClass('sidebar-collapse').trigger('expanded.pushMenu');
          } else {
            $("body").addClass('sidebar-collapse').trigger('collapsed.pushMenu');
          }
        }
        //Handle sidebar push menu for small screens
        else {
            if ($("body").hasClass('sidebar-open')) {
              $("body").removeClass('sidebar-open').removeClass('sidebar-collapse').trigger('collapsed.pushMenu');
            } else {
              $("body").addClass('sidebar-open').trigger('expanded.pushMenu');
            }
          }
      });

      /*$(".content-wrapper").click(function () {
        //Enable hide menu when clicking on the content-wrapper on small screens
        if ($(window).width() <= (screenSizes.sm - 1) && $("body").hasClass("sidebar-open")) {
          $("body").removeClass('sidebar-open');
        }
      });*/

      //Enable expand on hover for sidebar mini
      if ($.LayoutManager.options.sidebarExpandOnHover || $('body').hasClass('fixed') && $('body').hasClass('sidebar-mini')) {
        this.expandOnHover();
      }
    },
    expandOnHover: function expandOnHover() {
      var _this = this;
      var screenWidth = $.LayoutManager.options.screenSizes.sm - 1;
      //Expand sidebar on hover
      $('.main-sidebar').hover(function () {
        if ($('body').hasClass('sidebar-mini') && $("body").hasClass('sidebar-collapse') && $(window).width() > screenWidth) {
          _this.expand();
        }
      }, function () {
        if ($('body').hasClass('sidebar-mini') && $('body').hasClass('sidebar-expanded-on-hover') && $(window).width() > screenWidth) {
          _this.collapse();
        }
      });
    },
    expand: function expand() {
      $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
    },
    collapse: function collapse() {
      if ($('body').hasClass('sidebar-expanded-on-hover')) {
        $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
      }
    }
  };

  /* Tree()
   * ======
   * Converts the sidebar into a multilevel
   * tree view menu.
   *
   * @type Function
   * @Usage: $.LayoutManager.tree('.sidebar')
   */
  $.LayoutManager.tree = function (menu) {
    var _this = this;
    var animationSpeed = $.LayoutManager.options.animationSpeed;
    //click event //
    $(document).on('click', menu + ' li a', function (e) {
      //Get the clicked link and the next element
      var $this = $(this);
      //is the content of the "accordion" ul //
      var checkElement = $this.next();

      //Check if the next element is a menu and is visible
      if (checkElement.is('.treeview-menu') && checkElement.is(':visible')) {
        //Close the menu
        checkElement.slideUp(animationSpeed, function () {
          checkElement.parent("li.treeview").removeClass("active");
          checkElement.removeClass('menu-open');
          //Fix the layout in case the sidebar stretches over the height of the window
          //_this.layout.fix();
        });
      }
      //If the menu is not visible
      else if (checkElement.is('.treeview-menu') && !checkElement.is(':visible')) {
          //Get the parent menu
          var parent = $this.parents('ul').first();
          var parent_li = $this.parent("li");
          var li_siblings = parent_li.siblings();
          var parent_find_active;
          var sidebar_content_height = parent.height() - parent.find('li.header').outerHeight();
          var treeviewHeight = parent_li.outerHeight();
          li_siblings.not('.header').each(function (index, el) {
            treeviewHeight += $(el).find('a').outerHeight();
          });
          var section_height = sidebar_content_height - treeviewHeight;
          /*checkElement.css({
            'height': section_height + 'px',
            'max-height':section_height + 'px',
            //'overflow-y': 'auto'
          });*/
          //Close all open menus within the parent
          var ul = parent.find('ul.treeview-menu:visible').slideUp(animationSpeed);
          //Remove the menu-open class from the parent
          ul.removeClass('menu-open');
          //Get the parent li
          //Open the target menu and add the menu-open class
          checkElement.slideDown(animationSpeed, function () {
            //Add the class active to the parent li
            checkElement.addClass('menu-open');
            parent_find_active = parent.find('li.treeview.active');
            parent_find_active.removeClass('active');
            parent_li.addClass('active');
            //Fix the layout in case the sidebar stretches over the height of the window
            _this.layout.fix();
          });
        }
      //if this isn't a link, prevent the page from being redirected
      if (checkElement.is('.treeview-menu')) {
        e.preventDefault();
      }

      //$.LayoutManager.layout.fix();
      //$.LayoutManager.layout.fixSidebar();
    });
  };

  /* ControlSidebar
   * ==============
   * Adds functionality to the right sidebar
   *
   * @type Object
   * @usage $.LayoutManager.controlSidebar.activate(options)
   */
  $.LayoutManager.floatBar = $.LayoutManager.controlSidebar = {
    //instantiate the object
    activate: function activate() {
      //Get the object
      var _this = this;
      //Update options
      var o = $.LayoutManager.options.controlSidebarOptions;
      //Get the sidebar
      var sidebar = $(o.selector);
      //The toggle button
      var btn = $(o.toggleBtnSelector);

      //Listen to the click event
      btn.on('click', function (e) {
        e.preventDefault();
        //If the sidebar is not open
        if (!sidebar.hasClass('control-sidebar-open') && !$('body').hasClass('control-sidebar-open')) {
          //Open the sidebar
          _this.open(sidebar, o.slide);
        } else {
          _this.close(sidebar, o.slide);
        }
      });

      //If the body has a boxed layout, fix the sidebar bg position
      var bg = $(".control-sidebar-bg");
      _this._fix(bg);

      //If the body has a fixed layout, make the control sidebar fixed
      if ($('body').hasClass('fixed')) {
        _this._fixForFixed(sidebar);
      } else {
        //If the content height is less than the sidebar's height, force max height
        if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
          _this._fixForContent(sidebar);
        }
      }
    },
    //Open the control sidebar
    open: function open(sidebar, slide) {
      //Slide over content
      if (slide) {
        sidebar.addClass('control-sidebar-open');
      } else {
        //Push the content by adding the open class to the body instead
        //of the sidebar itself
        $('body').addClass('control-sidebar-open');
      }
    },
    //Close the control sidebar
    close: function close(sidebar, slide) {
      if (slide) {
        sidebar.removeClass('control-sidebar-open');
      } else {
        $('body').removeClass('control-sidebar-open');
      }
    },
    _fix: function _fix(sidebar) {
      var _this = this;
      if ($("body").hasClass('layout-boxed')) {
        sidebar.css('position', 'absolute');
        sidebar.height($(".wrapper").height());
        $(window).resize(function () {
          _this._fix(sidebar);
        });
      } else {
        sidebar.css({
          'position': 'fixed',
          'height': 'auto'
        });
      }
    },
    _fixForFixed: function _fixForFixed(sidebar) {
      sidebar.css({
        'position': 'fixed',
        'max-height': '100%',
        //'overflow': 'auto',  // non dovrebbe fare danni questo commento, serve per non nascondere il pulsanti "Chiudi pannello"
        'padding-bottom': '50px'
      });
    },
    _fixForContent: function _fixForContent(sidebar) {
      $(".content-wrapper, .right-side").css('min-height', sidebar.height());
    }
  };

  /* BoxWidget
   * =========
   * BoxWidget is a plugin to handle collapsing and
   * removing boxes from the screen.
   *
   * @type Object
   * @usage $.LayoutManager.boxWidget.activate()
   *        Set all your options in the main $.LayoutManager.options object
   */
  $.LayoutManager.boxWidget = {
    selectors: $.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,
    icons: $.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,
    animationSpeed: $.LayoutManager.options.animationSpeed,
    activate: function activate(_box) {
      var _this = this;
      if (!_box) {
        _box = document; // activate all boxes per default
      }
      //Listen for collapse event triggers
      $(_box).on('click', _this.selectors.collapse, function (e) {
        e.preventDefault();
        _this.collapse($(this));
      });

      //Listen for remove event triggers
      $(_box).on('click', _this.selectors.remove, function (e) {
        e.preventDefault();
        _this.remove($(this));
      });
    },
    collapse: function collapse(element) {
      var _this = this;
      //Find the box parent
      var box = element.parents(".box").first();
      //Find the body and the footer
      var box_content = box.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");
      if (!box.hasClass("collapsed-box")) {
        //Convert minus into plus
        element.find(".btn-collapser").removeClass(_this.icons.collapse).addClass(_this.icons.open);
        //Hide the content
        box_content.slideUp(_this.animationSpeed, function () {
          box.addClass("collapsed-box");
        });
      } else {
        //Convert plus into minus
        element.find(".btn-collapser").removeClass(_this.icons.open).addClass(_this.icons.collapse);
        //Show the content
        box_content.slideDown(_this.animationSpeed, function () {
          box.removeClass("collapsed-box");
        });
      }
    },
    remove: function remove(element) {
      //Find the box parent
      var box = element.parents(".box").first();
      box.slideUp(this.animationSpeed);
    }
  };

  return $.LayoutManager;
};

/* ------------------
 * - Custom Plugins -
 * ------------------
 * All custom plugins are defined below.
 */

/*
 * BOX REFRESH BUTTON
 * ------------------
 * This is a custom plugin to use with the component BOX. It allows you to add
 * a refresh button to the box. It converts the box's state to a loading state.
 *
 * @type plugin
 * @usage $("#box-widget").boxRefresh( options );
 */
$.LayoutManager.addRefreshButton = function () {
  "use strict";

  $.fn.boxRefresh = function (options) {

    // Render options
    var settings = $.extend({
      //Refresh button selector
      trigger: ".refresh-btn",
      //File source to be loaded (e.g: ajax/src.php)
      source: "",
      //Callbacks
      onLoadStart: function onLoadStart(box) {
        return box;
      }, //Right after the button has been clicked
      onLoadDone: function onLoadDone(box) {
        return box;
      } //When the source has been loaded

    }, options);

    //The overlay
    var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');

    return this.each(function () {
      //if a source is specified
      if (settings.source === "") {
        if (window.console) {
          window.console.log("Please specify a source first - boxRefresh()");
        }
        return;
      }
      //the box
      var box = $(this);
      //the button
      var rBtn = box.find(settings.trigger).first();

      //On trigger click
      rBtn.on('click', function (e) {
        e.preventDefault();
        //Add loading overlay
        start(box);

        //Perform ajax call
        box.find(".box-body").load(settings.source, function () {
          done(box);
        });
      });
    });

    function start(box) {
      //Add overlay and loading img
      box.append(overlay);

      settings.onLoadStart.call(box);
    }

    function done(box) {
      //Remove overlay and loading img
      box.find(overlay).remove();

      settings.onLoadDone.call(box);
    }
  };
  return $.LayoutManager;
};

/*
 * EXPLICIT BOX ACTIVATION
 * -----------------------
 * This is a custom plugin to use with the component BOX. It allows you to activate
 * a box inserted in the DOM after the app.js was loaded.
 *
 * @type plugin
 * @usage $("#box-widget").activateBox();
 */
$.LayoutManager.activateBox = function () {
  'use strict';

  $.fn.activateBox = function () {
    $.LayoutManager.boxWidget.activate(this);
  };

  return $.LayoutManager;
};

/*
 * TODO LIST CUSTOM PLUGIN
 * -----------------------
 * This plugin depends on iCheck plugin for checkbox and radio inputs
 *
 * @type plugin
 * @usage $("#todo-widget").todolist( options );
 */

$.LayoutManager.listCustomPlugin = function () {

  'use strict';

  $.fn.todolist = function (options) {
    // Render options
    var settings = $.extend({
      //When the user checks the input
      onCheck: function onCheck(ele) {
        return ele;
      },
      //When the user unchecks the input
      onUncheck: function onUncheck(ele) {
        return ele;
      }
    }, options);

    return this.each(function () {

      if (typeof $.fn.iCheck != 'undefined') {
        $('input', this).on('ifChecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onCheck.call(ele);
        });

        $('input', this).on('ifUnchecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onUncheck.call(ele);
        });
      } else {
        $('input', this).on('change', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          if ($('input', ele).is(":checked")) {
            settings.onCheck.call(ele);
          } else {
            settings.onUncheck.call(ele);
          }
        });
      }
    });
  };
  return $.LayoutManager;
};

/* ------------------
 * - Implementation -
 * ------------------
 * The next block of code implements LayoutManager's
 * functions and plugins as specified by the
 * options above.
 */
$.LayoutManager.setup = function () {
  "use strict";

  //Fix for IE page transitions

  $("body").removeClass("hold-transition");

  //Extend options if external options exist
  if (typeof LayoutManagerOptions !== "undefined") {
    $.extend(true, $.LayoutManager.options, LayoutManagerOptions);
  }

  //Easy access to options
  var o = $.LayoutManager.options;

  //Set up the object
  $.LayoutManager._init();

  //Activate the layout maker
  $.LayoutManager.layout.activate();

  //Enable sidebar tree view controls
  $.LayoutManager.tree('.sidebar');

  //Enable control sidebar
  if (o.enableControlSidebar) {
    $.LayoutManager.controlSidebar.activate();
  }

  //Add slimscroll to navbar dropdown
  if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
    $(".navbar .menu").slimscroll({
      height: o.navbarMenuHeight,
      alwaysVisible: false,
      size: o.navbarMenuSlimscrollWidth
    }).css("width", "100%");
  }

  //Activate sidebar push menu
  if (o.sidebarPushMenu) {
    $.LayoutManager.pushMenu.activate(o.sidebarToggleSelector);
  }

  //Activate box widget
  if (o.enableBoxWidget) {
    $.LayoutManager.boxWidget.activate();
  }

  //Activate fast click
  if (o.enableFastclick && typeof FastClick != 'undefined') {
    FastClick.attach(document.body);
  }

  //Activate direct chat widget
  if (o.directChat.enable) {
    $(document).on('click', o.directChat.contactToggleSelector, function () {
      var box = $(this).parents('.direct-chat').first();
      box.toggleClass('direct-chat-contacts-open');
    });
  }

  /*
   * INITIALIZE BUTTON TOGGLE
   * ------------------------
   */
  $('.btn-group[data-toggle="btn-toggle"]').each(function () {
    var group = $(this);
    $(this).find(".btn").on('click', function (e) {
      group.find(".btn.active").removeClass("active");
      $(this).addClass("active");
      e.preventDefault();
    });
  });

  return $.LayoutManager.addRefreshButton().activateBox().listCustomPlugin();
};

$.LayoutManager.loading = function (start) {
  $('#initerror').remove();
  start = _.isBoolean(start) ? start : true;
  if (start) {
    $('body').append("\n         <div id=\"startingspinner\">\n         <div class=\"double-bounce1\"></div>\n         <div class=\"double-bounce2\"></div>\n         </div>");
  } else {
    $('#startingspinner').remove();
  }
};

module.exports = $.LayoutManager;

},{}],539:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var ProjectsRegistry = require('core/project/projectsregistry');
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');

function CatalogService() {
  var _this = this;

  this.state = {
    prstate: ProjectsRegistry.state,
    highlightlayers: false,
    externallayers: [],
    layerstrees: [],
    layersgroups: []
  };
  this.setters = {};
  base(this);
  var layersStores = CatalogLayersStoresRegistry.getLayersStores();

  layersStores.forEach(function (layersStore) {
    return _this.addLayersStoreToLayersTrees(layersStore);
  });

  CatalogLayersStoresRegistry.onafter('addLayersStore', function (layersStore) {
    return _this.addLayersStoreToLayersTrees(layersStore);
  });

  CatalogLayersStoresRegistry.onafter('removeLayersStore', function (layersStore) {
    _this.state.layerstrees.forEach(function (layersTree, idx) {
      if (layersTree.storeid === layersStore.getId()) {
        _this.state.layerstrees.splice(idx, 1);
        return false;
      }
    });
  });
  CatalogLayersStoresRegistry.onafter('removeLayersStores', function () {
    _this.state.layerstrees.forEach(function (layersTree, idx) {
      _this.state.layerstrees.splice(idx, 1);
      return false;
    });
  });
}

inherit(CatalogService, G3WObject);

var proto = CatalogService.prototype;

proto.addExternalLayer = function (layer) {
  layer.removable = true;
  this.state.externallayers.push(layer);
};

proto.createLayersGroup = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$title = _ref.title,
      title = _ref$title === undefined ? 'Layers Group' : _ref$title,
      _ref$layers = _ref.layers,
      layers = _ref$layers === undefined ? [] : _ref$layers;

  var nodes = [];
  layers.forEach(function (layer) {
    return nodes.push(layer);
  });
  return {
    title: title,
    nodes: nodes
  };
};

proto.getMajorQgisVersion = function () {
  return ProjectsRegistry.getCurrentProject().getQgisVersion({
    type: 'major'
  });
};

// method to add a custom layers group
proto.addLayersGroup = function (layersGroup) {
  this.state.layersgroups.push(layersGroup);
};

proto.removeExternalLayer = function (name) {
  var _this2 = this;

  this.state.externallayers.forEach(function (layer, index) {
    if (layer.name === name) {
      _this2.state.externallayers.splice(index, 1);
      return false;
    }
  });
};

proto.addLayersStoreToLayersTrees = function (layersStore) {
  this.state.layerstrees.push({
    tree: layersStore.getLayersTree(),
    storeid: layersStore.getId()
  });
};

module.exports = CatalogService;

},{"core/catalog/cataloglayersstoresregistry":403,"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485}],540:[function(require,module,exports){
module.exports = "<!-- item template -->\n<div id=\"catalog\" @contextmenu.prevent.stop=\"\" class=\"tabbable-panel catalog\">\n  <div class=\"tabbable-line\">\n    <ul class=\"nav nav-tabs catalalog-nav-tabs\" role=\"tablist\" @click.capture=\"delegationClickEventTab\">\n      <li v-if=\"hasLayers\" role=\"presentation\"  :class=\"{ active: activeTab === 'layers' && 'hasLayers' }\">\n        <a href=\"#layers\" aria-controls=\"layers\" role=\"tab\" data-toggle=\"tab\" data-i18n=\"tree\" v-t=\"'data'\"></a>\n      </li>\n      <li v-if=\"hasBaseLayers\" role=\"presentation\" :class=\"{ active: activeTab === 'baselayers' }\" >\n        <a href=\"#baselayers\" aria-controls=\"baselayers\" role=\"tab\" data-toggle=\"tab\" data-i18n=\"baselayers\" v-t=\"'baselayers'\"></a>\n      </li>\n      <li v-if=\"legend.place ===  'tab' && showlegend\" role=\"presentation\" :class=\"{ active: activeTab === 'legend' }\">\n        <a href=\"#legend\" aria-controls=\"legend\" role=\"tab\" data-toggle=\"tab\" data-i18n=\"legend\" v-t=\"'legend'\"></a>\n      </li>\n    </ul>\n    <div class=\"tab-content catalog-tab-content\">\n      <bar-loader :loading=\"loading\"></bar-loader>\n      <div role=\"tabpanel\" class=\"tab-pane\" :class=\"{ active: activeTab === 'layers' && 'hasLayers' }\" id=\"layers\">\n        <helpdiv message=\"catalog_items.helptext\"></helpdiv>\n        <ul class=\"tree-root root project-root\" v-for=\"_layerstree in state.layerstrees\">\n          <tristate-tree\n            :highlightlayers=\"state.highlightlayers\"\n            :layerstree=\"layerstree\"\n            class=\"item\"\n            :parentFolder=\"false\"\n            :root=\"true\"\n            :legendplace=\"legend.place\"\n            :parent_mutually_exclusive=\"false\"\n            v-for=\"layerstree in _layerstree.tree\"\n            :storeid=\"_layerstree.storeid\"\n            :key=\"layerstree.id\">\n          </tristate-tree>\n        </ul>\n        <ul class=\"g3w-external_layers-group\" v-if=\"state.externallayers.length\">\n          <tristate-tree :externallayers=\"state.externallayers\" :layerstree=\"layerstree\" class=\"item\" v-for=\"layerstree in state.externallayers\" :key=\"layerstree.id\">\n          </tristate-tree>\n        </ul>\n        <ul v-for=\"layersgroup in state.layersgroups\">\n          <layers-group :layersgroup=\"layersgroup\"></layers-group>\n        </ul>\n      </div>\n      <div class=\"tab-pane baselayers\" v-if=\"hasBaseLayers\" role=\"tabpanel\"  :class=\"{ active: activeTab === 'baselayers' || !hasLayers }\" id=\"baselayers\">\n        <ul id=\"baselayers-content\" :class=\"{'mobile': isMobile()}\" :style=\"{gridTemplateColumns: `repeat(auto-fill, minmax(${baselayers.length > 4 ? 80 : 120}px, 1fr))`}\">\n          <li v-if=\"!baselayer.fixed\" v-for=\"baselayer in baselayers\" :key=\"baselayer.title\">\n            <img :src=\"getSrcBaseLayerImage(baselayer)\" @click.stop=\"setBaseLayer(baselayer.id)\" class=\"img-responsive img-thumbnail baselayer\" :style=\"{opacity: currentBaseLayer === baselayer.id ? 1 : 0.5}\" >\n            <div class=\"baseselayer-text text-center\">{{ baselayer.title }}</div>\n          <li @click.stop=\"setBaseLayer(null)\">\n            <img :src=\"getSrcBaseLayerImage(null)\" class=\"img-responsive img-thumbnail baselayer\" :style=\"{opacity: currentBaseLayer === null ? 1 : 0.5}\">\n            <div class=\"baseselayer-text text-center\" v-t=\"'nobaselayer'\"></div>\n          </li>\n        </ul>\n      </div>\n      <layerslegend @showlegend=\"showLegend\" :legend=\"legend\" :active=\"activeTab === 'legend'\"\n        v-for=\"_layerstree in state.layerstrees\" :layerstree=\"_layerstree\" :key=\"_layerstree.id\">\n      </layerslegend>\n    </div>\n  </div>\n  <ul id=\"layer-menu\" ref=\"layer-menu\" v-click-outside-layer-menu=\"closeLayerMenu\" tabindex=\"-1\" v-if=\"layerMenu.show\" :style=\"{top: layerMenu.top + 'px', left: layerMenu.left + 'px' }\">\n    <li class=\"title\">\n      <div>{{ layerMenu.layer.title}}</div>\n      <div style=\"font-weight: normal; font-size: 0.8em\">{{getGeometryType(layerMenu.layer.id, layerMenu.layer.external)}}</div>\n    </li>\n    <li v-if=\"layerMenu.layer.geolayer && layerMenu.layer.styles\" @mouseleave.self=\"showStylesMenu(false,$event)\" @mouseover.self=\"showStylesMenu(true,$event)\" class=\"menu-icon\">\n      <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('palette')\"></span>\n      <span class=\"item-text\" v-t=\"'catalog_items.contextmenu.styles'\"></span>\n      <span class=\"menu-icon\" style=\"position: absolute; right: 0; margin-top: 3px\" :class=\"g3wtemplate.getFontClass('arrow-right')\"></span>\n      <ul v-show=\"layerMenu.stylesMenu.show\" style=\"position:fixed; background-color: #FFFFFF; color:#000000; padding-left: 0\" :style=\"{ top: layerMenu.stylesMenu.top + 'px', left: layerMenu.stylesMenu.left +   'px' }\">\n        <li v-for=\"(style, index) in layerMenu.layer.styles\" @click.stop=\"setCurrentLayerStyle(index)\" :key=\"style.name\">\n          <span v-if=\"style.current\" style=\"font-size: 0.5em;\" :class=\"g3wtemplate.getFontClass('circle')\"></span>\n          <span>{{style.name}}\n            <span v-if=\"style.name ===  layerMenu.layer.defaultstyle && layerMenu.layer.styles.length > 1\">(<span v-t=\"'default'\"></span>)</span></span>\n        </li>\n      </ul>\n    </li>\n    <li v-if=\"canZoom(layerMenu.layer)\" @click.prevent.stop=\"zoomToLayer\">\n      <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('search')\"></span>\n      <span class=\"item-text\" v-t=\"'catalog_items.contextmenu.zoomtolayer'\"></span>\n    </li>\n    <li v-if=\"layerMenu.layer.openattributetable\" @click.prevent.stop=\"showAttributeTable(layerMenu.layer.id)\">\n      <bar-loader :loading=\"layerMenu.loading.data_table\"></bar-loader>\n      <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('list')\"> </span>\n      <span class=\"item-text\" v-t=\"'catalog_items.contextmenu.open_attribute_table'\"></span>\n    </li>\n    <li @click.prevent.stop=\"\" v-if=\"layerMenu.layer.external && !layerMenu.layer.source\" @mouseleave.self=\"showColorMenu(false,$event)\" @mouseover.self=\"showColorMenu(true,$event)\">\n      <span class=\"item-text\" v-t=\"'catalog_items.contextmenu.vector_color_menu'\"></span>\n      <span class=\"menu-icon\" style=\"position: absolute; right: 0; margin-top: 3px\" :class=\"g3wtemplate.getFontClass('arrow-right')\"></span>\n      <ul v-if=\"layerMenu.colorMenu.show\" style=\"position:fixed\" :style=\"{ top: layerMenu.colorMenu.top + 'px', left: layerMenu.colorMenu.left +   'px' }\">\n        <li style=\"padding:0;\">\n          <chrome-picker\n            @click.prevent.stop=\"\"\n            v-model=\"layerMenu.colorMenu.color\"\n            @change-color=\"onChangeColor\"\n            style=\"width: 100%\">\n          </chrome-picker>\n        </li>\n      </ul>\n    </li>\n    <li @click.prevent.stop=\"\" v-if=\"layerMenu.layer.external && layerMenu.layer.removable\" v-download>\n      <div @click.prevent.stop=\"downloadExternalShapefile(layerMenu.layer)\" >\n        <bar-loader :loading=\"layerMenu.loading.shp\"></bar-loader>\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('shapefile')\"></span>\n        <span class=\"item-text\" v-t=\"'sdk.catalog.menu.download.shp'\"></span>\n      </div>\n    </li>\n    <li v-if=\"canDownloadShp(layerMenu.layer.id)\" v-download>\n      <div @click.prevent.stop=\"downloadShp(layerMenu.layer.id)\" >\n        <bar-loader :loading=\"layerMenu.loading.shp\"></bar-loader>\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('shapefile')\"></span>\n        <span class=\"item-text\" v-t=\"'sdk.catalog.menu.download.shp'\"></span>\n      </div>\n    </li>\n    <li v-if=\"canDownloadGpx(layerMenu.layer.id)\">\n      <div @click.prevent.stop=\"downloadGpx(layerMenu.layer.id)\" v-download>\n        <bar-loader :loading=\"layerMenu.loading.gpx\"></bar-loader>\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('gpx')\"></span>\n        <span class=\"item-text\" v-t=\"'sdk.catalog.menu.download.gpx'\"></span>\n      </div>\n    </li>\n    <li v-if=\"canDownloadGpkg(layerMenu.layer.id)\">\n      <div @click.prevent.stop=\"downloadGpkg(layerMenu.layer.id)\" v-download>\n        <bar-loader :loading=\"layerMenu.loading.gpkg\"></bar-loader>\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('gpkg')\"></span>\n        <span class=\"item-text\" v-t=\"'sdk.catalog.menu.download.gpkg'\"></span>\n      </div>\n    </li>\n    <li v-if=\"canDownloadCsv(layerMenu.layer.id)\">\n      <div @click.prevent.stop=\"downloadCsv(layerMenu.layer.id)\" v-download>\n        <bar-loader :loading=\"layerMenu.loading.csv\"></bar-loader>\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('csv')\"></span>\n        <span class=\"item-text\" v-t=\"'sdk.catalog.menu.download.csv'\"></span>\n      </div>\n    </li>\n    <li v-if=\"canDownloadXls(layerMenu.layer.id)\" v-download>\n      <div @click.prevent.stop=\"downloadXls(layerMenu.layer.id)\">\n        <bar-loader :loading=\"layerMenu.loading.xls\"></bar-loader>\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('xls')\"></span>\n        <span class=\"item-text\" v-t=\"'sdk.catalog.menu.download.xls'\"></span>\n      </div>\n    </li>\n    <li v-if=\"canShowWmsUrl(layerMenu.layer.id)\">\n      <div @click.prevent.stop=\"copyWmsUrl($event, layerMenu.layer.id)\" style=\"display: flex; max-width:300px; align-items: center;\">\n        <span class=\"menu-icon\" :class=\"g3wtemplate.getFontClass('map')\"></span>\n        <div style=\"display: inline-flex; justify-content: space-between; width: 100%; align-items: baseline\">\n          <span class=\"item-text catalog-menu-wms skin-tooltip-top\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.catalog.menu.wms.copy'\">WMS URL</span>\n          <span @click.prevent.stop=\"\" class=\"bold catalog-menu-wms wms-url-tooltip skin-tooltip-top\"\n            :class=\"g3wtemplate.getFontClass('eye')\"\n            data-placement=\"top\" data-toggle=\"tooltip\" :title=\"getWmsUrl(layerMenu.layer.id)\">\n          </span>\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n";

},{}],541:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var _catalogeventhub = require('./catalogeventhub');

var _catalogeventhub2 = _interopRequireDefault(_catalogeventhub);

var _layerlegend = require('./components/layerlegend.vue');

var _layerlegend2 = _interopRequireDefault(_layerlegend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var ApplicationService = require('core/applicationservice');

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    base = _require.base,
    downloadFile = _require.downloadFile;

var shpwrite = require('shp-write');

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var Component = require('gui/vue/component');
var TableComponent = require('gui/table/vue/table');
var ComponentsRegistry = require('gui/componentsregistry');
var GUI = require('gui/gui');
var ControlsRegistry = require('gui/map/control/registry');
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var Service = require('../catalogservice');
var ChromeComponent = VueColor.Chrome;
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./catalog.html'));
var DEFAULT_ACTIVE_TAB = 'layers';
//OFFSETMENU
var OFFSETMENU = {
  top: 50,
  left: 15
};

var vueComponentOptions = _extends({}, compiledTemplate, {
  data: function data() {
    var legend = this.$options.legend;
    return {
      state: null,
      legend: legend,
      showlegend: false,
      currentBaseLayer: null,
      activeTab: null,
      loading: false,
      // to show context menu right click
      layerMenu: {
        show: false,
        top: 0,
        left: 0,
        tooltip: false,
        name: '',
        layer: null,
        loading: {
          data_table: false,
          shp: false,
          csv: false,
          gpx: false,
          gpkg: false,
          xls: false
        },
        //colorMenu
        colorMenu: {
          show: false,
          top: 0,
          left: 0,
          color: null
        },
        //styleMenu
        //colorMenu
        stylesMenu: {
          show: false,
          top: 0,
          left: 0,
          style: null,
          default: null
        }
      }
    };
  },

  directives: {
    //create a vue directive from click outside contextmenu
    'click-outside-layer-menu': {
      bind: function bind(el, binding, vnode) {
        this.event = function (event) {
          !(el === event.target || el.contains(event.target)) && vnode.context[binding.expression](event);
        };
        //add event listener click
        document.body.addEventListener('click', this.event);
      },
      unbind: function unbind(el) {
        document.body.removeEventListener('click', this.event);
      }
    }
  },
  components: {
    'chrome-picker': ChromeComponent
  },
  computed: {
    project: function project() {
      return this.state.prstate.currentProject;
    },
    title: function title() {
      return this.project.state.name;
    },
    baselayers: function baselayers() {
      return this.project.state.baselayers;
    },
    hasBaseLayers: function hasBaseLayers() {
      return this.project.state.baselayers.length > 0;
    },
    hasLayers: function hasLayers() {
      var layerstresslength = 0;
      this.state.layerstrees.forEach(function (layerstree) {
        return layerstresslength += layerstree.tree.length;
      });
      return this.state.externallayers.length > 0 || layerstresslength > 0 || this.state.layersgroups.length > 0;
    }
  },
  methods: {
    delegationClickEventTab: function delegationClickEventTab(evt) {
      this.activeTab = evt.target.attributes['aria-controls'] ? evt.target.attributes['aria-controls'].value : this.activeTab;
    },
    showLegend: function showLegend(bool) {
      this.showlegend = bool;
    },
    setBaseLayer: function setBaseLayer(id) {
      this.currentBaseLayer = id;
      this.project.setBaseLayer(id);
      ApplicationService.setBaseLayerId(id);
    },
    getSrcBaseLayerImage: function getSrcBaseLayerImage(baseLayer) {
      var type = baseLayer && baseLayer.servertype || baseLayer;
      var image = void 0;
      var customimage = false;
      switch (type) {
        case 'OSM':
          image = 'osm.png';
          break;
        case 'Bing':
          var subtype = baseLayer.source.subtype;
          image = 'bing' + subtype + '.png';
          break;
        case 'TMS':
        case 'WMTS':
          if (baseLayer.icon) {
            customimage = true;
            image = baseLayer.icon;
            break;
          }
        default:
          image = 'nobaselayer.png';
      }
      return !customimage ? GUI.getResourcesUrl() + 'images/' + image : image;
    },
    _hideMenu: function _hideMenu() {
      this.layerMenu.show = false;
      this.layerMenu.styles = false;
      this.layerMenu.loading.data_table = false;
      this.layerMenu.loading.shp = false;
      this.layerMenu.loading.csv = false;
      this.layerMenu.loading.gpx = false;
      this.layerMenu.loading.gpkg = false;
      this.layerMenu.loading.xls = false;
    },

    zoomToLayer: function zoomToLayer() {
      var bbox = [this.layerMenu.layer.bbox.minx, this.layerMenu.layer.bbox.miny, this.layerMenu.layer.bbox.maxx, this.layerMenu.layer.bbox.maxy];
      var mapService = GUI.getComponent('map').getService();
      mapService.goToBBox(bbox, this.layerMenu.layer.epsg);
      this._hideMenu();
    },
    canZoom: function canZoom(layer) {
      var canZoom = false;
      if (layer.bbox) {
        var bbox = [layer.bbox.minx, layer.bbox.miny, layer.bbox.maxx, layer.bbox.maxy];
        canZoom = bbox.find(function (coordinate) {
          return coordinate > 0;
        });
      }
      return canZoom;
    },
    getGeometryType: function getGeometryType(layerId) {
      var geometryType = void 0;
      var layer = this.state.externallayers.find(function (layer) {
        return layer.id === layerId;
      });
      if (layer) geometryType = layer.geometryType;else {
        var originalLayer = CatalogLayersStoresRegistry.getLayerById(layerId);
        geometryType = originalLayer.config.geometrytype;
      }
      geometryType = geometryType && geometryType !== 'NoGeometry' ? geometryType : '';
      return geometryType;
    },
    canShowWmsUrl: function canShowWmsUrl(layerId) {
      var originalLayer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return originalLayer ? !!(!originalLayer.isType('table') && originalLayer.getFullWmsUrl()) : false;
    },
    canDownloadXls: function canDownloadXls(layerId) {
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return layer ? layer.isXlsDownlodable() : false;
    },
    canDownloadGpx: function canDownloadGpx(layerId) {
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return layer ? layer.isGpxDownlodable() : false;
    },
    canDownloadGpkg: function canDownloadGpkg(layerId) {
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return layer ? layer.isGpkgDownlodable() : false;
    },
    canDownloadCsv: function canDownloadCsv(layerId) {
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return layer ? layer.isCsvDownlodable() : false;
    },
    canDownloadShp: function canDownloadShp(layerId) {
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return layer ? layer.isShpDownlodable() : false;
    },
    getWmsUrl: function getWmsUrl(layerId) {
      var originalLayer = CatalogLayersStoresRegistry.getLayerById(layerId);
      return originalLayer.getFullWmsUrl();
    },
    copyWmsUrl: function copyWmsUrl(evt, layerId) {
      var url = this.getWmsUrl(layerId);
      var ancorEement = document.createElement('a');
      ancorEement.href = url;
      var tempInput = document.createElement('input');
      tempInput.value = ancorEement.href;
      document.body.appendChild(tempInput);
      tempInput.select();
      document.execCommand("copy");
      $(evt.target).attr('data-original-title', t('sdk.catalog.menu.wms.copied')).tooltip('show');
      $(evt.target).attr('title', this.copywmsurltooltip).tooltip('fixTitle');
      document.body.removeChild(tempInput);
      ancorEement = null;
    },
    downloadShp: function downloadShp(layerId) {
      var _this = this;

      var caller_download_id = ApplicationService.setDownload(true);
      this.layerMenu.loading.shp = true;
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      layer.getShp().catch(function (err) {
        return GUI.notify.error(t("info.server_error"));
      }).finally(function () {
        _this.layerMenu.loading.shp = false;
        ApplicationService.setDownload(false, caller_download_id);
        _this._hideMenu();
      });
    },
    downloadCsv: function downloadCsv(layerId) {
      var _this2 = this;

      var caller_download_id = ApplicationService.setDownload(true);
      this.layerMenu.loading.csv = true;
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      layer.getCsv().catch(function (err) {
        return GUI.notify.error(t("info.server_error"));
      }).finally(function () {
        _this2.layerMenu.loading.csv = false;
        ApplicationService.setDownload(false, caller_download_id);
        _this2._hideMenu();
      });
    },
    downloadXls: function downloadXls(layerId) {
      var _this3 = this;

      var caller_download_id = ApplicationService.setDownload(true);
      this.layerMenu.loading.xls = true;
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      layer.getXls().catch(function (err) {
        return GUI.notify.error(t("info.server_error"));
      }).finally(function () {
        _this3.layerMenu.loading.xls = false;
        ApplicationService.setDownload(false, caller_download_id);
        _this3._hideMenu();
      });
    },
    downloadGpx: function downloadGpx(layerId) {
      var _this4 = this;

      var caller_download_id = ApplicationService.setDownload(true);
      this.layerMenu.loading.gpx = true;
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      layer.getGpx().catch(function (err) {
        return GUI.notify.error(t("info.server_error"));
      }).finally(function () {
        _this4.layerMenu.loading.gpx = false;
        ApplicationService.setDownload(false, caller_download_id);
        _this4._hideMenu();
      });
    },
    downloadGpkg: function downloadGpkg(layerId) {
      var _this5 = this;

      var caller_download_id = ApplicationService.setDownload(true);
      this.layerMenu.loading.gpkg = true;
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      layer.getGpkg().catch(function (err) {
        return GUI.notify.error(t("info.server_error"));
      }).finally(function () {
        _this5.layerMenu.loading.gpkg = false;
        ApplicationService.setDownload(false, caller_download_id);
        _this5._hideMenu();
      });
    },

    /**
     * Create a Geojson file from vector OL vector layer and download it in shapefile with WGS84 Projection
     * @param layer
     * @returns {Promise<void>}
     */
    downloadExternalShapefile: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(layer) {
        var EPSG4326, mapService, vectorLayer, GeoJSONFormat, features, GeoJSONFile, name;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                EPSG4326 = 'EPSG:4326';

                this.layerMenu.loading.shp = true;
                mapService = GUI.getComponent('map').getService();
                vectorLayer = mapService.getLayerByName(layer.name);
                GeoJSONFormat = new ol.format.GeoJSON();
                features = vectorLayer.getSource().getFeatures();

                if (layer.crs !== EPSG4326) {
                  features = features.map(function (feature) {
                    var clonefeature = feature.clone();
                    clonefeature.getGeometry().transform(layer.crs, EPSG4326);
                    return clonefeature;
                  });
                }
                GeoJSONFile = GeoJSONFormat.writeFeaturesObject(features, {
                  featureProjection: EPSG4326
                });
                name = layer.name.split('.' + layer.type)[0];

                shpwrite.download(GeoJSONFile, {
                  folder: name,
                  types: {
                    point: name,
                    mulipoint: name,
                    polygon: name,
                    multipolygon: name,
                    line: name,
                    polyline: name,
                    multiline: name
                  }
                });
                _context.next = 12;
                return this.$nextTick();

              case 12:
                this.layerMenu.loading.shp = false;
                this._hideMenu();

              case 14:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function downloadExternalShapefile(_x) {
        return _ref.apply(this, arguments);
      }

      return downloadExternalShapefile;
    }(),
    showAttributeTable: function showAttributeTable(layerId) {
      var _this6 = this;

      this.layerMenu.loading.data_table = false;
      GUI.closeContent();
      var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
      this.layerMenu.loading.data_table = true;
      var tableContent = new TableComponent({
        layer: layer,
        formatter: 1
      });
      tableContent.on('show', function () {
        _this6.isMobile() && GUI.hideSidebar();
        _this6.layerMenu.loading.data_table = false;
        _this6._hideMenu();
      });
      tableContent.show({
        title: layer.getName()
      });
    },
    startEditing: function startEditing() {
      var _this7 = this;

      var layer = void 0;
      var catallogLayersStores = CatalogLayersStoresRegistry.getLayersStores();
      catallogLayersStores.forEach(function (layerStore) {
        layer = layerStore.getLayerById(_this7.layerMenu.layer.id);
        if (layer) {
          layer.getLayerForEditing();
          return false;
        }
      });
    },
    closeLayerMenu: function closeLayerMenu() {
      this._hideMenu();
      this.showColorMenu(false);
      this.layerMenu.stylesMenu.show = false;
    },
    onChangeColor: function onChangeColor(val) {
      var mapService = GUI.getComponent('map').getService();
      this.layerMenu.layer.color = val;
      var layer = mapService.getLayerByName(this.layerMenu.name);
      var style = layer.getStyle();
      style._g3w_options.color = val;
      layer.setStyle(style);
    },
    setCurrentLayerStyle: function setCurrentLayerStyle(index) {
      var _this8 = this;

      var changed = false;
      this.layerMenu.layer.styles.forEach(function (style, idx) {
        if (idx === index) {
          _this8.layerMenu.stylesMenu.style = style.name;
          changed = !style.current;
          style.current = true;
        } else style.current = false;
      });
      if (changed) {
        var layer = CatalogLayersStoresRegistry.getLayerById(this.layerMenu.layer.id);
        if (layer) {
          layer.change();
          _catalogeventhub2.default.$emit('layer-change-style', {
            layerId: layer.getId()
          });
        }
      }
      this.closeLayerMenu();
    },
    showStylesMenu: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(bool, evt) {
        var elem;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!bool) {
                  _context2.next = 6;
                  break;
                }

                elem = $(evt.target);

                this.layerMenu.stylesMenu.top = elem.offset().top;
                this.layerMenu.stylesMenu.left = elem.offset().left + elem.width() + (elem.outerWidth() - elem.width()) / 2 + OFFSETMENU.left;
                _context2.next = 6;
                return this.$nextTick();

              case 6:
                this.layerMenu.stylesMenu.show = bool;

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function showStylesMenu(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return showStylesMenu;
    }(),
    showColorMenu: function showColorMenu(bool, evt) {
      if (bool) {
        var elem = $(evt.target);
        this.layerMenu.colorMenu.top = elem.offset().top;
        this.layerMenu.colorMenu.left = elem.offset().left + elem.width() + (elem.outerWidth() - elem.width()) / 2;
      }
      this.layerMenu.colorMenu.show = bool;
    }
  },
  watch: {
    'state.prstate.currentProject': {
      handler: function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(project) {
          var _this9 = this;

          var activeTab;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  activeTab = project.state.catalog_tab || DEFAULT_ACTIVE_TAB;

                  this.loading = activeTab === 'baselayers';
                  _context3.next = 4;
                  return this.$nextTick();

                case 4:
                  setTimeout(function () {
                    _this9.loading = false;
                    _this9.activeTab = activeTab;
                  }, activeTab === 'baselayers' ? 500 : 0);

                case 5:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function handler(_x4) {
          return _ref3.apply(this, arguments);
        }

        return handler;
      }(),

      immediate: false
    }
  },
  created: function created() {
    var _this10 = this;

    _catalogeventhub2.default.$on('unselectionlayer', function (storeid, layerstree) {
      var layer = CatalogLayersStoresRegistry.getLayersStore(storeid).getLayerById(layerstree.id);
      layer.clearSelectionFids();
    });

    _catalogeventhub2.default.$on('activefiltertokenlayer', function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(storeid, layerstree) {
        var layer;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                layer = CatalogLayersStoresRegistry.getLayersStore(storeid).getLayerById(layerstree.id);
                _context4.next = 3;
                return layer.toggleFilterToken();

              case 3:
                layerstree.filter.active = _context4.sent;

              case 4:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, _this10);
      }));

      return function (_x5, _x6) {
        return _ref4.apply(this, arguments);
      };
    }());

    /**
     * Event handle for layer toggled
     */
    _catalogeventhub2.default.$on('treenodetoogled', function (storeid, node, parent, parent_mutually_exclusive) {
      var mapService = GUI.getComponent('map').getService();
      if (node.external && !node.source) {
        var layer = mapService.getLayerByName(node.name);
        layer.setVisible(!layer.getVisible());
        node.visible = !node.visible;
        node.checked = node.visible;
      } else if (!storeid) {
        node.visible = !node.visible;
        var _layer = mapService.getLayerById(node.id);
        _layer.setVisible(node.visible);
      } else {
        var layerStore = CatalogLayersStoresRegistry.getLayersStore(storeid);
        if (!node.groupdisabled) {
          var _layer2 = layerStore.toggleLayer(node.id, null, parent_mutually_exclusive);
          mapService.emit('cataloglayertoggled', _layer2);
        } else layerStore.toggleLayer(node.id, false, parent_mutually_exclusive);
      }
      /*
       */
      if (parent_mutually_exclusive && node.checked) {
        _catalogeventhub2.default.$emit('treenodestoogled', storeid, parent, true);
        // go down tro layer tree inside forder of layer
        var siblingsGroups = parent.nodes && parent.nodes.filter(function (node) {
          return node.nodes;
        }) || [];
        siblingsGroups.forEach(function (group) {
          if (group.checked) {
            group.checked = false;
            _catalogeventhub2.default.$emit('treenodestoogled', storeid, group, false);
          }
        });

        //go up from parent layer folder to it's father parent folder
        if (!parent.checked) {
          parent.checked = true;
          var parentFolder = void 0;
          var parentGroupId = parent.groupId;
          var getParentFolder = function getParentFolder(tree) {
            // tree is the currend group
            if (Array.isArray(tree.nodes)) {
              var find = tree.nodes.find(function (subtree) {
                return Array.isArray(subtree.nodes) ? subtree.groupId === parentGroupId || getParentFolder(subtree) : false;
              });
              if (find && !parentFolder) {
                parentFolder = tree;
                return true;
              }
            }return false;
          };
          getParentFolder(_this10.state.layerstrees[0].tree[0]);
          parentFolder && _catalogeventhub2.default.$emit('treenodestoogled', storeid, parent, parent.checked, parentFolder);
        }
      }
    });

    /**
     * Event handler of check group
     * nodes: is children nodes of group
     * isGroupChecked: boolen id current group is checked or not
     * parent: is the  group parent of current group
     */
    _catalogeventhub2.default.$on('treenodestoogled', function (storeid, currentgroup, isGroupChecked, parent) {
      if (parent && currentgroup.checked) parent.checked = true;
      var nodes = currentgroup.nodes,
          groupId = currentgroup.groupId;
      // get layestore that contains and handle all layers

      var layerStore = CatalogLayersStoresRegistry.getLayersStore(storeid);
      // check if parent exist and is mutually exclusive
      var parent_mutually_exclusive = parent && parent.mutually_exclusive;
      //id of layers belong to current group and subgroups
      var layersIds = [];
      // function to turn on and off all layer belong to subgroup based on group checkd or not
      var turnOnOffSubGroups = function turnOnOffSubGroups(parentChecked, currentLayersIds, node) {
        if (node.nodes) {
          var _isGroupChecked = node.checked && parentChecked;
          var groupLayers = {
            checked: _isGroupChecked,
            layersIds: layersIds
          };
          var _currentLayersIds = groupLayers.layersIds;
          parentLayers.push(groupLayers);
          node.nodes.map(turnOnOffSubGroups.bind(null, _isGroupChecked, _currentLayersIds));
        } else if (node.geolayer) {
          if (node.checked) currentLayersIds.push(node.id);
          node.disabled = node.groupdisabled = !parentChecked;
        }
      };
      var parentLayers = [{
        checked: isGroupChecked,
        layersIds: layersIds
      }];
      var currentLayersIds = parentLayers[0].layersIds;
      nodes.map(turnOnOffSubGroups.bind(null, isGroupChecked, currentLayersIds));
      for (var i = parentLayers.length; i--;) {
        var _parentLayers$i = parentLayers[i],
            _layersIds = _parentLayers$i.layersIds,
            checked = _parentLayers$i.checked;

        layerStore.toggleLayers(_layersIds, checked, false, parent_mutually_exclusive);
      }
      //force to set visible and unchecked al parent layers
      if (parent_mutually_exclusive && isGroupChecked) {
        var parenGroupLayerIds = [];
        var parentGroupSubGroups = [];
        parent.nodes && parent.nodes.filter(function (node) {
          node.id && node.checked && parenGroupLayerIds.push(node.id);
          node.nodes && node.groupId !== groupId && node.checked && parentGroupSubGroups.push(node);
        });
        parenGroupLayerIds.length && layerStore.toggleLayers(parenGroupLayerIds, false, true);
        parentGroupSubGroups.forEach(function (group) {
          group.checked = false;
          _catalogeventhub2.default.$emit('treenodestoogled', storeid, group, false);
        });
      }
    });

    /**
     * Eevent handle of select layer
     */
    _catalogeventhub2.default.$on('treenodeselected', function (storeid, node) {
      var mapservice = GUI.getComponent('map').getService();
      var layer = CatalogLayersStoresRegistry.getLayersStore(storeid).getLayerById(node.id);
      if (!layer.isSelected()) {
        CatalogLayersStoresRegistry.getLayersStore(storeid).selectLayer(node.id);
        // emit signal of select layer from catalog
        mapservice.emit('cataloglayerselected', layer);
      } else {
        CatalogLayersStoresRegistry.getLayersStore(storeid).unselectLayer(node.id);
        mapservice.emit('cataloglayerunselected', layer);
      }
    });

    _catalogeventhub2.default.$on('showmenulayer', function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(layerstree, evt) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _this10._hideMenu();
                _context5.next = 3;
                return _this10.$nextTick();

              case 3:
                _this10.layerMenu.left = evt.x;
                _this10.layerMenu.name = layerstree.name;
                _this10.layerMenu.layer = layerstree;
                _this10.layerMenu.show = true;
                _this10.layerMenu.colorMenu.color = layerstree.color;
                _context5.next = 10;
                return _this10.$nextTick();

              case 10:
                _this10.layerMenu.top = $(evt.target).offset().top - $(_this10.$refs['layer-menu']).height() + $(evt.target).height() / 2;
                $('.catalog-menu-wms[data-toggle="tooltip"]').tooltip();

              case 12:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, _this10);
      }));

      return function (_x7, _x8) {
        return _ref5.apply(this, arguments);
      };
    }());

    ControlsRegistry.onafter('registerControl', function (id, control) {
      if (id === 'querybbox') {
        control.getInteraction().on('propertychange', function (evt) {
          if (evt.key === 'active') _this10.state.highlightlayers = !evt.oldValue;
        });
      }
    });
  },
  beforeMount: function beforeMount() {
    this.currentBaseLayer = this.project.state.initbaselayer;
  }
});

var InternalComponent = Vue.extend(vueComponentOptions);

Vue.component('g3w-catalog', vueComponentOptions);

Vue.component('layers-group', {
  template: require('./layersgroup.html'),
  props: {
    layersgroup: {
      type: Object
    }
  }
});

var compiledTristateTreeTemplate = (0, _utils.createCompiledTemplate)(require('./tristate-tree.html'));
/* CHILDREN COMPONENTS */
// tree component
Vue.component('tristate-tree', _extends({}, compiledTristateTreeTemplate, {
  props: ['layerstree', 'storeid', 'legend', 'legendplace', 'highlightlayers', 'parent_mutually_exclusive', 'parentFolder', 'externallayers', 'root', 'parent'],
  components: {
    'layerlegend': _layerlegend2.default
  },
  data: function data() {
    return {
      expanded: this.layerstree.expanded,
      isFolderChecked: true,
      controltoggled: false,
      n_childs: null,
      filtered: false
    };
  },

  computed: {
    isFolder: function isFolder() {
      return !!this.layerstree.nodes;
    },
    showscalevisibilityclass: function showscalevisibilityclass() {
      return !this.isFolder && this.layerstree.scalebasedvisibility;
    },
    showScaleVisibilityToolip: function showScaleVisibilityToolip() {
      return this.showscalevisibilityclass && this.isDisabled && this.layerstree.checked;
    },
    isTable: function isTable() {
      if (!this.isFolder) {
        return !this.layerstree.geolayer && !this.layerstree.external;
      }
    },
    isHidden: function isHidden() {
      return this.layerstree.hidden && this.layerstree.hidden === true;
    },
    selected: function selected() {
      this.layerstree.selected = this.layerstree.disabled && this.layerstree.selected ? false : this.layerstree.selected;
    },
    isHighLight: function isHighLight() {
      var id = this.layerstree.id;
      return this.highlightlayers && !this.isFolder && CatalogLayersStoresRegistry.getLayerById(id).getTocHighlightable() && this.layerstree.visible;
    },
    isDisabled: function isDisabled() {
      return !this.isFolder && !this.isTable && !this.layerstree.checked || this.layerstree.disabled || this.layerstree.groupdisabled;
    }
  },
  watch: {
    'layerstree.disabled': function layerstreeDisabled(bool) {
      this.layerstree.selected = bool && this.layerstree.selected ? false : this.layerstree.selected;
    },
    'layerstree.checked': function layerstreeChecked() {}
  },
  methods: {
    toggleFilterLayer: function toggleFilterLayer() {
      _catalogeventhub2.default.$emit('activefiltertokenlayer', this.storeid, this.layerstree);
    },
    clearSelection: function clearSelection() {
      _catalogeventhub2.default.$emit('unselectionlayer', this.storeid, this.layerstree);
    },
    toggle: function toggle(isFolder) {
      if (isFolder) {
        this.layerstree.checked = !this.layerstree.checked;
        this.isFolderChecked = this.layerstree.checked && !this.layerstree.disabled;
        _catalogeventhub2.default.$emit('treenodestoogled', this.storeid, this.layerstree, this.isFolderChecked, this.parent);
      } else _catalogeventhub2.default.$emit('treenodetoogled', this.storeid, this.layerstree, this.parent, this.parent_mutually_exclusive);
    },
    expandCollapse: function expandCollapse() {
      this.layerstree.expanded = !this.layerstree.expanded;
    },
    select: function select() {
      if (!this.isFolder && !this.layerstree.external && !this.isTable) {
        _catalogeventhub2.default.$emit('treenodeselected', this.storeid, this.layerstree);
      }
    },
    triClass: function triClass() {
      return this.layerstree.checked ? this.g3wtemplate.getFontClass('check') : this.g3wtemplate.getFontClass('uncheck');
    },
    downloadExternalLayer: function downloadExternalLayer(download) {
      if (download.file) {
        downloadFile(download.file);
      } else if (download.url) {}
    },

    removeExternalLayer: function removeExternalLayer(name) {
      var mapService = GUI.getComponent('map').getService();
      mapService.removeExternalLayer(name);
    },
    showLayerMenu: function showLayerMenu(layerstree, evt) {
      if (!this.isFolder && (this.layerstree.openattributetable || this.layerstree.downloadable || this.layerstree.geolayer || this.layerstree.external)) {
        _catalogeventhub2.default.$emit('showmenulayer', layerstree, evt);
      }
    }
  },
  created: function created() {
    this.isFolder && !this.layerstree.checked && _catalogeventhub2.default.$emit('treenodestoogled', this.storeid, this.layerstree, this.layerstree.checked, this.parent);
  },
  mounted: function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var _this11 = this;

      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (this.isFolder && !this.root) {
                this.layerstree.nodes.forEach(function (node) {
                  if (_this11.parent_mutually_exclusive && !_this11.layerstree.mutually_exclusive) if (node.id) node.uncheckable = true;
                });
              }
              _context6.next = 3;
              return this.$nextTick();

            case 3:
              $('span.scalevisibility').tooltip();

            case 4:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function mounted() {
      return _ref6.apply(this, arguments);
    }

    return mounted;
  }()
}));

var compiletLegendTemplate = (0, _utils.createCompiledTemplate)(require('./legend.html'));

Vue.component('layerslegend', _extends({}, compiletLegendTemplate, {
  props: ['layerstree', 'legend', 'active'],
  data: function data() {
    return {};
  },

  computed: {
    visiblelayers: function visiblelayers() {
      var _visiblelayers = [];
      var layerstree = this.layerstree.tree;
      var traverse = function traverse(obj) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var layer = _step.value;

            if (!_.isNil(layer.id) && layer.visible && !layer.exclude_from_legend) {
              _visiblelayers.push(layer);
            }
            if (!_.isNil(layer.nodes)) {
              traverse(layer.nodes);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };
      traverse(layerstree);
      return _visiblelayers;
    }
  },
  watch: {
    'layerstree': {
      handler: function handler(val, old) {},
      deep: true
    },
    'visiblelayers': function visiblelayers(visibleLayers) {
      var show = !!visibleLayers.length;
      this.$emit('showlegend', show);
    }
  },
  created: function created() {
    var show = !!this.visiblelayers.length;
    this.$emit('showlegend', show);
  }
}));

var compiledLegendItemsTemplate = (0, _utils.createCompiledTemplate)(require('./legend_items.html'));

Vue.component('layerslegend-items', _extends({}, compiledLegendItemsTemplate, {
  props: {
    layers: {
      default: []
    },
    legend: {
      type: Object
    },
    active: {
      default: true
    }
  },
  data: function data() {
    return {
      legendurls: []
    };
  },

  watch: {
    layers: {
      handler: function handler(layers) {
        this.mapReady && this.getLegendSrc(layers);
      },

      immediate: false
    },
    active: function active(bool) {
      if (bool && this.waitinglegendsurls.length) {
        this.legendurls = [].concat(_toConsumableArray(this.waitinglegendsurls));
        this.waitinglegendsurls = [];
      }
    }
  },
  methods: {
    setError: function setError(legendurl) {
      legendurl.error = true;
      legendurl.loading = false;
    },
    urlLoaded: function urlLoaded(legendurl) {
      legendurl.loading = false;
    },

    getLegendUrl: function getLegendUrl(layer) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var legendurl = void 0;
      var catalogLayers = CatalogLayersStoresRegistry.getLayersStores();
      catalogLayers.forEach(function (layerStore) {
        if (layerStore.getLayerById(layer.id)) {
          legendurl = layerStore.getLayerById(layer.id).getLegendUrl(params);
          return false;
        }
      });
      return legendurl;
    },
    getLegendSrc: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_layers) {
        var urlMethodsLayersName, self, layers, i, layer, style, urlLayersName, url, _url$split, _url$split2, prefix, layerName, method, _urlLayersName, _url2, legendUrl, legendUrlObject, _loop, _url3;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                urlMethodsLayersName = {
                  GET: {},
                  POST: {}
                };
                self = this;

                this.legendurls = [];
                this.waitinglegendsurls = [];
                _context7.next = 6;
                return this.$nextTick();

              case 6:
                // need to filter geolayer
                layers = _layers.filter(function (layer) {
                  return layer.geolayer;
                });

                for (i = 0; i < layers.length; i++) {
                  layer = layers[i];
                  style = Array.isArray(layer.styles) && layer.styles.find(function (style) {
                    return style.current;
                  });
                  urlLayersName = layer.source && layer.source.url || layer.external ? urlMethodsLayersName.GET : urlMethodsLayersName[layer.ows_method];
                  url = '' + this.getLegendUrl(layer, this.legend.config);

                  if (layer.source && layer.source.url) urlLayersName[url] = [];else {
                    _url$split = url.split('LAYER='), _url$split2 = _slicedToArray(_url$split, 2), prefix = _url$split2[0], layerName = _url$split2[1];

                    if (!urlLayersName[prefix]) urlLayersName[prefix] = [];
                    urlLayersName[prefix].unshift({
                      layerName: layerName,
                      style: style && style.name
                    });
                  }
                }
                for (method in urlMethodsLayersName) {
                  _urlLayersName = urlMethodsLayersName[method];

                  if (method === 'GET') for (_url2 in _urlLayersName) {
                    legendUrl = _urlLayersName[_url2].length ? _url2 + '&LAYER=' + _urlLayersName[_url2].map(function (layerObj) {
                      return layerObj.layerName;
                    }).join(',') + '&STYLES=' + _urlLayersName[_url2].map(function (layerObj) {
                      return layerObj.style;
                    }).join(',') + (ApplicationService.getFilterToken() ? '&filtertoken=' + ApplicationService.getFilterToken() : '') : _url2;
                    legendUrlObject = {
                      loading: true,
                      url: legendUrl,
                      error: false
                    };

                    this.active ? this.legendurls.push(legendUrlObject) : this.waitinglegendsurls.push(legendUrlObject);
                  } else {
                    _loop = function _loop(_url3) {
                      var xhr = new XMLHttpRequest();

                      var _url3$split = _url3.split('?'),
                          _url3$split2 = _slicedToArray(_url3$split, 2),
                          _url = _url3$split2[0],
                          params = _url3$split2[1];

                      params = params.split('&');
                      var econdedParams = [];
                      params.forEach(function (param) {
                        var _param$split = param.split('='),
                            _param$split2 = _slicedToArray(_param$split, 2),
                            key = _param$split2[0],
                            value = _param$split2[1];

                        econdedParams.push(key + '=' + encodeURIComponent(value));
                      });
                      params = econdedParams.join('&');
                      params = params + '&LAYERS=' + encodeURIComponent(_urlLayersName[_url3].map(function (layerObj) {
                        return layerObj.layerName;
                      }).join(','));
                      params += '&STYLES=' + encodeURIComponent(_urlLayersName[_url3].map(function (layerObj) {
                        return layerObj.style;
                      }).join(','));
                      params += '' + (ApplicationService.getFilterToken() ? '&filtertoken=' + ApplicationService.getFilterToken() : '');
                      xhr.open('POST', _url);
                      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                      xhr.responseType = 'blob';
                      var legendUrlObject = {
                        loading: true,
                        url: null,
                        error: false
                      };
                      self.active ? self.legendurls.push(legendUrlObject) : self.waitinglegendsurls.push(legendUrlObject);
                      xhr.onload = function () {
                        var data = this.response;
                        if (data !== undefined) legendUrlObject.url = window.URL.createObjectURL(data);
                        legendUrlObject.loading = false;
                      };
                      xhr.onerror = function () {
                        legendUrlObject.loading = false;
                      };
                      xhr.send(params);
                    };

                    for (_url3 in _urlLayersName) {
                      _loop(_url3);
                    }
                  }
                }

              case 9:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getLegendSrc(_x10) {
        return _ref7.apply(this, arguments);
      }

      return getLegendSrc;
    }()
  },
  created: function created() {
    var _this12 = this;

    this.mapReady = false;
    this.waitinglegendsurls = []; // urls that are waiting to be loaded
    _catalogeventhub2.default.$on('layer-change-style', function () {
      _this12.getLegendSrc(_this12.layers);
    });
  },
  mounted: function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      var _this13 = this;

      var mapService;
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.$nextTick();

            case 2:
              mapService = GUI.getComponent('map').getService();

              mapService.on('change-map-legend-params', function () {
                _this13.mapReady = true;
                _this13.getLegendSrc(_this13.layers);
              });

            case 4:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function mounted() {
      return _ref8.apply(this, arguments);
    }

    return mounted;
  }()
}));

function CatalogComponent() {
  var _this14 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.resizable = true;
  base(this, options);
  var legend = options.config.legend;

  this.title = "catalog";
  this.mapComponentId = options.mapcomponentid;
  var service = options.service || new Service();
  this.setService(service);
  this.setInternalComponent(new InternalComponent({
    service: service,
    legend: legend
  }));
  this.internalComponent.state = this.getService().state;
  var listenToMapVisibility = function listenToMapVisibility(map) {
    var mapService = map.getService();
    _this14.state.visible = !mapService.state.hidden;
    mapService.onafter('setHidden', function (hidden) {
      _this14.state.visible = !mapService.state.hidden;
      _this14.state.expanded = true;
    });
  };
  if (this.mapComponentId) {
    var map = GUI.getComponent(this.mapComponentId);
    !map && ComponentsRegistry.on('componentregistered', function (component) {
      return component.getId() === _this14.mapComponentId && listenToMapVisibility(component);
    }) || listenToMapVisibility(map);
  }
}

inherit(CatalogComponent, Component);

module.exports = CatalogComponent;

},{"../catalogservice":539,"./catalog.html":540,"./catalogeventhub":542,"./components/layerlegend.vue":543,"./layersgroup.html":544,"./legend.html":545,"./legend_items.html":546,"./tristate-tree.html":547,"core/applicationservice":401,"core/catalog/cataloglayersstoresregistry":403,"core/i18n/i18n.service":418,"core/utils/utils":485,"gui/componentsregistry":553,"gui/gui":575,"gui/map/control/registry":631,"gui/table/vue/table":703,"gui/vue/component":718,"gui/vue/utils":727,"shp-write":386}],542:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var CatalogEventHub = new Vue();

exports.default = CatalogEventHub;

},{}],543:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _catalogeventhub = require('../catalogeventhub');

var _catalogeventhub2 = _interopRequireDefault(_catalogeventhub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var ApplicationService = require('core/applicationservice');
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var GUI = require('gui/gui');
exports.default = {
  name: "layerlegend",
  props: {
    layer: {
      type: Object
    }
  },
  data: function data() {
    return {};
  },

  computed: {
    legend: function legend() {
      return this.layer.legend;
    }
  },
  methods: {
    setError: function setError() {
      this.legend.error = true;
      this.legend.loading = false;
    },
    urlLoaded: function urlLoaded() {
      this.legend.loading = false;
    },

    getLegendUrl: function getLegendUrl(layer) {
      var legendurl = void 0;
      var layerStore = CatalogLayersStoresRegistry.getLayersStores().find(function (layerStore) {
        return layerStore.getLayerById(layer.id);
      });
      legendurl = layerStore && layerStore.getLayerById(layer.id).getLegendUrl(this.legendParams);
      return legendurl;
    },
    getLegendSrc: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(layer) {
        var urlMethodsLayersName, self, style, urlLayersName, url, _url$split, _url$split2, prefix, layerName, method, _urlLayersName, _url2, _loop, _url3;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                urlMethodsLayersName = {
                  GET: {},
                  POST: {}
                };
                self = this;
                _context.next = 4;
                return this.$nextTick();

              case 4:
                style = Array.isArray(layer.styles) && layer.styles.find(function (style) {
                  return style.current;
                });
                urlLayersName = layer.source && layer.source.url || layer.external ? urlMethodsLayersName.GET : urlMethodsLayersName[layer.ows_method];
                url = '' + this.getLegendUrl(layer);

                if (layer.source && layer.source.url) urlLayersName[url] = [];else {
                  _url$split = url.split('LAYER='), _url$split2 = _slicedToArray(_url$split, 2), prefix = _url$split2[0], layerName = _url$split2[1];

                  if (!urlLayersName[prefix]) urlLayersName[prefix] = [];
                  urlLayersName[prefix].unshift({
                    layerName: layerName,
                    style: style && style.name
                  });
                }
                for (method in urlMethodsLayersName) {
                  _urlLayersName = urlMethodsLayersName[method];

                  if (method === 'GET') {
                    for (_url2 in _urlLayersName) {
                      this.legend.url = _urlLayersName[_url2].length ? _url2 + '&LAYER=' + _urlLayersName[_url2].map(function (layerObj) {
                        return layerObj.layerName;
                      }).join(',') + '&STYLES=' + _urlLayersName[_url2].map(function (layerObj) {
                        return layerObj.style;
                      }).join(',') + (ApplicationService.getFilterToken() ? '&filtertoken=' + ApplicationService.getFilterToken() : '') : _url2;
                      this.legend.loading = true;
                    }
                  } else {
                    _loop = function _loop(_url3) {
                      var xhr = new XMLHttpRequest();

                      var _url3$split = _url3.split('?'),
                          _url3$split2 = _slicedToArray(_url3$split, 2),
                          _url = _url3$split2[0],
                          params = _url3$split2[1];

                      params = params.split('&');
                      var econdedParams = [];
                      params.forEach(function (param) {
                        var _param$split = param.split('='),
                            _param$split2 = _slicedToArray(_param$split, 2),
                            key = _param$split2[0],
                            value = _param$split2[1];

                        econdedParams.push(key + '=' + encodeURIComponent(value));
                      });
                      params = econdedParams.join('&');
                      params = params + '&LAYERS=' + encodeURIComponent(_urlLayersName[_url3].map(function (layerObj) {
                        return layerObj.layerName;
                      }).join(','));
                      params += '&STYLES=' + encodeURIComponent(_urlLayersName[_url3].map(function (layerObj) {
                        return layerObj.style;
                      }).join(','));
                      params += '' + (ApplicationService.getFilterToken() ? '&filtertoken=' + ApplicationService.getFilterToken() : '');
                      xhr.open('POST', _url);
                      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
                      xhr.responseType = 'blob';
                      self.legend.loading = true;
                      xhr.onload = function () {
                        var data = this.response;
                        if (data !== undefined) self.legend.url = window.URL.createObjectURL(data);
                        self.legend.loading = false;
                      };
                      xhr.onerror = function () {
                        self.legend.loading = false;
                      };
                      xhr.send(params);
                    };

                    for (_url3 in _urlLayersName) {
                      _loop(_url3);
                    }
                  }
                }

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getLegendSrc(_x) {
        return _ref.apply(this, arguments);
      }

      return getLegendSrc;
    }()
  },
  created: function created() {
    var _this = this;

    this.legendParams = ApplicationService.getConfig().layout ? ApplicationService.getConfig().layout.legend : {};
    this.mapReady = false;
    _catalogeventhub2.default.$on('layer-change-style', function () {
      var layerObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var layerId = layerObj.layerId;

      layerId === _this.layer.id && _this.getLegendSrc(_this.layer);
    });
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      var _this2 = this;

      var mapService;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.$nextTick();

            case 2:
              mapService = GUI.getComponent('map').getService();

              mapService.on('change-map-legend-params', function () {
                _this2.mapReady = true;
                _this2.getLegendSrc(_this2.layer);
              });

            case 4:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.layer.visible && _vm.legend.show),expression:"layer.visible && legend.show"}],staticClass:"layer-legend"},[_c('bar-loader',{attrs:{"loading":_vm.legend.loading}}),_vm._v(" "),_c('figure',[_c('img',{directives:[{name:"show",rawName:"v-show",value:(!_vm.legend.error),expression:"!legend.error"}],attrs:{"src":_vm.legend.url},on:{"error":function($event){return _vm.setError()},"load":function($event){return _vm.urlLoaded()}}}),_vm._v(" "),_c('span',{staticClass:"divider"})])],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-3ab4b659"

},{"../catalogeventhub":542,"core/applicationservice":401,"core/catalog/cataloglayersstoresregistry":403,"gui/gui":575}],544:[function(require,module,exports){
module.exports = "<div style=\"border: 1px solid #ffffff33; margin: 5px\">\n  <h4 style=\"margin: 5px; font-weight: bold\">{{ layersgroup.title }}</h4>\n  <tristate-tree  :layerstree=\"node\" v-for=\"node in layersgroup.nodes\" class=\"item\">\n  </tristate-tree>\n</div>\n";

},{}],545:[function(require,module,exports){
module.exports = "<div role=\"tabpanel\" class=\"tab-pane\" :class=\"{active:active}\" id=\"legend\">\n  <layerslegend-items :active=\"active\" :legend=\"legend\" :layers=\"visiblelayers\"></layerslegend-items>\n</div>\n";

},{}],546:[function(require,module,exports){
module.exports = "<div class=\"legend-item\">\n  <figure v-for=\"legendurl in legendurls\" :key=\"legendurl.url\">\n    <bar-loader :loading=\"legendurl.loading\"></bar-loader>\n    <img v-show=\"!legendurl.loading && !legendurl.error\" :src=\"legendurl.url\" @error=\"setError(legendurl)\" @load=\"urlLoaded(legendurl)\">\n    <span class=\"divider\"></span>\n  </figure>\n</div>\n";

},{}],547:[function(require,module,exports){
module.exports = "<li\n  class=\"tree-item\" @contextmenu.prevent.stop=\"showLayerMenu(layerstree, $event)\" @click.prevent=\"select\"\n  :class=\"{selected: !isFolder || !isTable ? layerstree.selected : false,itemmarginbottom: !isFolder,  disabled: isDisabled  }\">\n  <span v-if=\"isFolder\"\n    style=\"padding-right: 2px;\"\n    :class=\"[{bold : isFolder}, layerstree.expanded ? g3wtemplate.getFontClass('caret-down') : g3wtemplate.getFontClass('caret-right')]\"\n    @click=\"expandCollapse\"\n    class=\"root collapse-expande-collapse-icon\">\n  </span>\n  <span v-if=\"isFolder\"\n    @click.stop=\"toggle(true)\"\n    style=\"color: #ffffff\"\n    :class=\"[triClass()]\">\n  </span>\n  <span v-else-if=\"isTable\"\n        v-show=\"!layerstree.hidden\"\n        :style=\"{paddingLeft: legendplace === 'toc' ? '18px' : '25px'}\"\n        :class=\"[parentFolder ? 'child' : 'root', g3wtemplate.getFontClass('table')]\">\n  </span>\n  <template v-else>\n    <span style=\"color: red\" v-if=\"layerstree.external && layerstree.removable\"\n      :class=\"g3wtemplate.getFontClass('trash')\" @click=\"removeExternalLayer(layerstree.name)\">\n    </span>\n    <span style=\"color: #ffffff; margin-left: 5px;\" v-if=\"layerstree.external && layerstree.download\"\n          :class=\"g3wtemplate.getFontClass('download')\"\n          @click=\"downloadExternalLayer(layerstree.download)\">\n    </span>\n    <span v-show=\"!layerstree.hidden\" class=\"checkbox-layer\" :class=\"parentFolder ? 'child' : 'root'\">\n      <span class=\"collapse-expande-collapse-icon\" v-if=\"legendplace === 'toc' && layerstree.legend && layerstree.visible\"\n        @click.stop=\"()=> layerstree.legend.show = !layerstree.legend.show\"\n        :class=\"g3wtemplate.getFontClass(layerstree.legend.show ? 'caret-down' : 'caret-right')\">\n      </span>\n      <span :style=\"{paddingLeft: (legendplace === 'toc' && layerstree.visible && layerstree.legend) ? '5px' : (!layerstree.legend && layerstree.external) ? '0' :\n         (legendplace === 'toc') ? '19px' : '26px'}\" @click.stop=\"toggle(false)\"\n        :class=\"[g3wtemplate.getFontClass(layerstree.checked ? 'check': 'uncheck'), {'toc-added-external-layer':(!layerstree.legend && layerstree.external)}]\">\n      </span>\n    </span>\n  </template>\n  <div v-show=\"!layerstree.hidden || isFolder\"\n    class=\"tree-node-title\"\n    :class=\"{disabled: layerstree.disabled, bold: isFolder}\">\n      <span\n        :class=\"{highlightlayer: isHighLight, scalevisibility: showscalevisibilityclass}\"\n        class=\"skin-tooltip-top\"\n        data-placement=\"top\"\n        :current-tooltip=\"showScaleVisibilityToolip ? `minscale:${layerstree.minscale} - maxscale: ${layerstree.maxscale}` : ''\"\n        v-t-tooltip.text = \"showScaleVisibilityToolip ? `minscale:${layerstree.minscale} - maxscale:${layerstree.maxscale}` : ''\">\n        {{ layerstree.title }}\n      </span>\n      <div v-if=\"(!isFolder && !layerstree.external)\">\n        <span v-if=\"layerstree.selection.active\" class=\"action-button skin-tooltip-left selection-filter-icon\" data-placement=\"left\" data-toggle=\"tooltip\" :class=\"g3wtemplate.getFontClass('success')\" @click.caputure.prevent.stop=\"clearSelection\" v-t-tooltip.create=\"'layer_selection_filter.tools.clear'\"></span>\n        <span v-if=\"layerstree.selection.active || layerstree.filter.active\" class=\"action-button skin-tooltip-left selection-filter-icon\" data-placement=\"left\" data-toggle=\"tooltip\" :class=\"[g3wtemplate.getFontClass('filter'), layerstree.filter.active ? 'active' : '']\" @click.caputure.prevent.stop=\"toggleFilterLayer\" v-t-tooltip.create=\"'layer_selection_filter.tools.filter'\"></span>\n      </div>\n  </div>\n  <layerlegend v-if=\"legendplace === 'toc' && layerstree.legend\" :layer=\"layerstree\"></layerlegend>\n  <ul v-if=\"isFolder\" class=\"tree-content-items\" :class=\"[`g3w-lendplace-${legendplace}`, {root: root}]\" v-show=\"layerstree.expanded\">\n    <tristate-tree\n      :root=\"false\"\n      :legendConfig=\"legend\"\n      :legendplace=\"legendplace\"\n      :highlightlayers=\"highlightlayers\"\n      :parentFolder=\"isFolder\"\n      :layerstree=\"_layerstree\"\n      :storeid=\"storeid\"\n      :parent=\"layerstree\"\n      :parent_mutually_exclusive=\"!!layerstree.mutually_exclusive\"\n      v-for=\"_layerstree in layerstree.nodes\" :key=\"layerstree.id\">\n    </tristate-tree>\n  </ul>\n</li>\n";

},{}],548:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var Chartsfactory = {
  CHARTS: {
    c3: {
      lineXY: require('./vue/c3/line/lineXY')
    }
  },
  /*
  * type: <library(es:c3)>:<chartType:(es.lineXY)>
  * */
  build: function build() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        type = _ref.type,
        _ref$hooks = _ref.hooks,
        hooks = _ref$hooks === undefined ? {} : _ref$hooks;

    var _type$split = type.split(':'),
        _type$split2 = _slicedToArray(_type$split, 2),
        _type$split2$ = _type$split2[0],
        library = _type$split2$ === undefined ? 'c3' : _type$split2$,
        _type$split2$2 = _type$split2[1],
        chartType = _type$split2$2 === undefined ? 'lineXY' : _type$split2$2;

    var chartVue = this.CHARTS[library][chartType];
    return Object.assign(hooks, chartVue);
  }
};

module.exports = Chartsfactory;

},{"./vue/c3/line/lineXY":550}],549:[function(require,module,exports){
module.exports = "<div class=\"chart_wrapper\">\n  <div style=\"height: 40%; min-height: 200px;  background-color: #ffffff\" :id=\"id\"></div>\n  <div v-for=\"component in components\">\n    <span class=\"divider\"></span>\n    <component\n      @change-item=\"changeItem\"\n      @change-items=\"changeItems\"\n      @select-item=\"selectItem\"\n      @select-all=\"selectAll\"\n      @unselect-all=\"unselectAll\"\n      @unselect-item=\"unselectItem\"\n      :data=\"data\"\n      :selectitems=\"selectitems\"\n      :size=\"size\"\n      :is=\"component\">\n    </component>\n  </div>\n</div>\n";

},{}],550:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    getUniqueDomId = _require.getUniqueDomId;

var GUI = require('gui/gui');
var templateCompiled = Vue.compile(require('./lineXY.html'));
var C3XYLine = _extends({}, templateCompiled, {
  props: {
    showdata: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      id: 'graphline' + getUniqueDomId(),
      selectitems: [],
      data: [],
      components: [],
      config: {
        data: {
          columns: [['x'], ['y']]
        }
      },
      size: {
        width: 0,
        height: 0
      }
    };
  },

  methods: {
    addComponent: function addComponent(component) {
      this.components.push(component);
    },
    addComponents: function addComponents() {
      var _this = this;

      var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      components.forEach(function (component) {
        _this.addComponent(component);
      });
    },
    setConfig: function setConfig() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.config = config;
    },
    setDataOffset: function setDataOffset(offset) {
      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var data = this.getData();
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        item.value += offset;
      }
      if (render) {
        this.resize();
      }
    },
    getSelectedItems: function getSelectedItems() {
      return this.selectitems;
    },
    selectItem: function selectItem(id) {
      this.chart.select(['y'], [id]);
    },
    unselectItem: function unselectItem(id) {
      this.chart.unselect(['y'], [id]);
    },
    selectItems: function selectItems() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.chart.select([y], ids);
    },
    unselectItems: function unselectItems() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.chart.unselect(['y'], ids);
    },
    unselectAll: function unselectAll() {
      this.chart.unselect();
    },
    selectAll: function selectAll() {
      this.chart.select();
    },
    getData: function getData() {
      return this.data;
    },
    resize: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            width = _ref2.width,
            height = _ref2.height;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$nextTick();

              case 2:
                this.chart.resize({
                  width: width,
                  height: height || $('#' + this.id).height() - 4
                });

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function resize() {
        return _ref.apply(this, arguments);
      }

      return resize;
    }(),
    _setAllowedSpace: function _setAllowedSpace() {
      if (this.components && this.components.length) this.size.height = document.querySelector('.g3wform_content').offsetHeight - this.$el.offsetHeight - document.querySelector('.g3wform_header').offsetHeight - 50;
    },
    _setMaxMin: function _setMaxMin(_ref3) {
      var value = _ref3.value,
          max = _ref3.max,
          min = _ref3.min;

      min = value ? +value : +min;
      max = value ? +value : +max;
      if (min < this.chart.axis.min().y) this.chart.axis.min(min);else if (max > this.chart.axis.max().y) this.chart.axis.max(max);else {
        var dataValues = this.data.map(function (data) {
          return +data.value;
        });
        this.chart.axis.max(Math.max.apply(Math, _toConsumableArray(dataValues)));
        this.chart.axis.min(Math.min.apply(Math, _toConsumableArray(dataValues)));
      }
      this.resize();
    },
    changeItems: function changeItems(items) {
      if (items.length === 1) this._setMaxMin(items[0].value);else {
        var max = Math.max.apply(Math, _toConsumableArray(items.map(function (item) {
          return +item.value;
        })));
        var min = Math.min.apply(Math, _toConsumableArray(items.map(function (item) {
          return +item.value;
        })));
        this._setMaxMin({
          max: max,
          min: min
        });
      }
      this.resize();
    },
    changeItem: function changeItem(_ref4) {
      var item = _ref4.item,
          _ref4$render = _ref4.render,
          render = _ref4$render === undefined ? true : _ref4$render;

      var value = item.value;
      this._setMaxMin({ value: value });
      if (render) {
        this.resize();
      }
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$nextTick(function () {
      GUI.on('resize', _this2.resize);
      var self = _this2;
      _this2.config.data.onselected = function (evt) {
        var _temp = [].concat(_toConsumableArray(self.selectitems), [evt]);
        self.selectitems = _temp;
      };
      _this2.config.data.onunselected = function (evt) {
        self.selectitems = self.selectitems.filter(function (selectitem) {
          return selectitem.index !== evt.index;
        });
      };
      _this2.chart = c3.generate(_extends({
        bindto: '#' + _this2.id
      }, _this2.config));
      var data = _this2.chart.data()[0] ? _this2.chart.data()[0].values : [];
      data.forEach(function (item) {
        _this2.data.push(item);
      });
      _this2._setAllowedSpace();
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.data = this.selectitems = null;
    this.chart.destroy();
    this.chart = null;
    GUI.off('resize', this.resize);
  }
});

module.exports = C3XYLine;

},{"./lineXY.html":549,"core/utils/utils":485,"gui/gui":575}],551:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    merge = _require.merge,
    noop = _require.noop,
    base = _require.base,
    capitalize_first_letter = _require.capitalize_first_letter;

var G3WObject = require('core/g3wobject');
var VUECOMPONENTSATTRIBUTES = ['methods', 'computed', 'data', 'components'];

// Class Component (Base)
var Component = function Component() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // internal VUE component
  this.internalComponent = null;
  this._components = [];
  this.id = options.id || Math.random() * 1000;
  this.title = options.title || '';
  this.state = {
    visible: options.visible || true, // visibile
    open: options.open || false, // open,
    resizable: options.resizable || false,
    info: options.info || null,
    sizes: {
      width: 0,
      height: 0
    }
  };
  //setters
  this.setters = {
    setOpen: function setOpen(bool) {
      this.state.open = bool;
      this._setOpen(bool);
    },
    setVisible: function setVisible(bool) {
      this.state.visible = bool;
      this._setVisible(bool);
    },
    reload: function reload() {
      this._reload();
    }
  };
  merge(this, options);
  base(this);
  // add events options
  this.events = options.events;
  this.events && this.handleEventsComponent();
};

inherit(Component, G3WObject);

var proto = Component.prototype;

proto.init = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.vueComponent = this.createVueComponent(options.vueComponentObject);
  this._components = options.components || [];
  var service = options.service || noop;
  var template = options.template;

  this.setService(service);
  this._service.init ? this._service.init(options) : null;
  template && this.setInternalComponentTemplate(template);
  this.setInternalComponent = function () {
    var InternalComponent = Vue.extend(this.vueComponent);
    this.internalComponent = new InternalComponent({
      service: this._service,
      template: template
    });
    this.internalComponent.state = this.getService().state;
  };
  this.setInternalComponent();
};

proto.getId = function () {
  return this.id;
};

proto.setId = function (id) {
  this.id = id;
};

proto.getOpen = function () {
  return this.state.open;
};

proto.getVisible = function () {
  return this.state.visible;
};

proto.getTitle = function () {
  return this.state.title;
};

proto.setTitle = function (title) {
  this.state.title = title;
};

proto.getService = function () {
  return this._service;
};

proto.setService = function (service) {
  this._service = service;
};

proto.handleEventsComponent = function () {
  var _events = this.events,
      open = _events.open,
      visible = _events.visible;

  if (open) {
    var _open$when = open.when,
        when = _open$when === undefined ? "after" : _open$when,
        _open$cb = open.cb,
        cb = _open$cb === undefined ? function () {} : _open$cb,
        _open$guiEvents = open.guiEvents,
        guiEvents = _open$guiEvents === undefined ? [] : _open$guiEvents;

    this['on' + when]('setOpen', function (bool) {
      return cb(bool);
    });
  }
};

proto.insertComponentAt = function (index, Component) {
  this._components.splice(index, 0, Component);
};

proto.removeCompomentAt = function (index) {
  this._components.splice(index, 1);
};

proto.addComponent = function (Component) {
  this._components.push(Component);
};

proto.popComponent = function () {
  return this._components.pop();
};

proto.removeComponent = function (Component) {
  var _this = this;

  this._components.forEach(function (component, index) {
    if (component === Component) {
      _this.splice(index, 1);
      return false;
    }
  });
};

proto.setComponents = function (components) {
  this._components = Array.isArray(components) ? components : [];
};

proto.exendComponents = function (components) {
  _.merge(this._components, components);
};

proto.getInternalComponent = function () {
  return this.internalComponent;
};

proto.setInternalComponent = function (internalComponent) {
  var _this2 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!internalComponent && this.internalComponentClass) this.internalComponent = new this.internalComponentClass();else this.internalComponent = internalComponent;
  var _options$events = options.events,
      events = _options$events === undefined ? [] : _options$events;

  events.forEach(function (event) {
    var name = event.name,
        handler = event.handler;

    _this2.internalComponent.$on(name, function (data) {
      return handler && handler(data) || _this2['set' + capitalize_first_letter(name)](data);
    });
  });
};

proto.createVueComponent = function (vueObjOptions) {
  return _.cloneDeep(vueObjOptions);
};

proto.addInternalComponentData = function (data) {
  _.merge(this.internalComponent, data);
};

proto.overwriteServiceMethod = function (methodName, method) {
  this._service[methodName] = method;
};

proto.overwriteServiceMethods = function (methodsOptions) {
  var _this3 = this;

  Object.entries(methodsOptions).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        methodName = _ref2[0],
        method = _ref2[1];

    return _this3.overwriteServiceMethod(methodName, method);
  });
};

proto.extendService = function (serviceOptions) {
  this._service && merge(this._service, serviceOptions);
};

proto.extendInternalComponent = function (internalComponentOptions) {
  var _this4 = this;

  if (this.vueComponent) {
    Object.entries(internalComponentOptions).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];

      if (VUECOMPONENTSATTRIBUTES.indexOf(key) > -1) {
        switch (key) {
          case 'methods':
            _this4.extendInternalComponentMethods(value);
            break;
          case 'components':
            _this4.extendInternalComponentComponents(value);
            break;
          default:
            merge(_this4.vueComponent[key], value);
        }
      }
    });
  } else this.vueComponent = internalComponentOptions;
};

proto.extendInternalComponentComponents = function (components) {
  components && merge(this.vueComponent.components, components);
};

proto.extendComponents = function (components) {
  this.extendInternalComponentComponents(components);
};

proto.addComponent = function (component) {
  if (component) this.vueComponent.components[component.key] = component.value;
};

proto.extendInternalComponentMethods = function (methods) {
  if (methods) {
    _.forEach(methods, function (value, key) {
      if (!(value instanceof Function)) delete methods[key];
    });
    merge(this.vueComponent.methods, methods);
  }
};

proto.extendInternalComponentComputed = function (computed) {
  if (computed) {
    _.forEach(computed, function (value, key) {
      if (!(value instanceof Function)) delete computed[key];
    });
    merge(this.vueComponent.computed, computed);
  }
};

proto.setInternalComponentTemplate = function (template) {
  if (template) this.vueComponent.template = template;
};

proto.getInternalTemplate = function () {
  return this.vueComponent.template;
};

proto.destroy = function () {};

proto.click = function () {};

// hook function to show componet
proto.show = function () {};

proto._setOpen = function (bool) {};

proto._setVisible = function () {};

proto._reload = function () {};

module.exports = Component;

},{"core/g3wobject":415,"core/utils/utils":485}],552:[function(require,module,exports){
var Component = require('./vue/component');
var ComponentsFactory = {
  build: function build(_ref) {
    var vueComponentObject = _ref.vueComponentObject,
        service = _ref.service;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var component = new Component(options);
    component.init({
      vueComponentObject: vueComponentObject,
      service: service
    });
    return component;
  }
};

module.exports = ComponentsFactory;

},{"./vue/component":718}],553:[function(require,module,exports){
var G3WObject = require('core/g3wobject');

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

//class Componet Registry (singleton)
// store all components added


function ComponentsRegistry() {
  this.components = {};
  this.registerComponent = function (component) {
    var id = component.getId();
    if (!this.components[id]) {
      this.components[id] = component;
      this.emit('componentregistered', component);
    }
  };

  this.getComponent = function (id) {
    return this.components[id];
  };

  this.getComponents = function () {
    return this.components;
  };

  this.unregisterComponent = function (id) {
    var component = this.components[id];
    if (component) {
      if (typeof component.destroy === 'function') component.destroy();
      this.components[id] = null;
    }
    return component;
  };
  base(this);
}
inherit(ComponentsRegistry, G3WObject);

module.exports = new ComponentsRegistry();

},{"core/g3wobject":415,"core/utils/utils":485}],554:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var viewport = exports.viewport = {
  resize: {
    map: {
      min: 350
    },
    content: {
      min: 350
    }
  }
};

exports.default = {
  viewport: viewport
};

},{}],555:[function(require,module,exports){
var _require = require('core/i18n/i18n.service'),
    t = _require.t;

module.exports = {
  matcher: function matcher(params, data) {
    var searchItem = params.term ? params.term.toLowerCase() : params.term;
    // If there are no search terms, return all of the data
    if ($.trim(searchItem) === '') return data;
    // Do not display the item if there is no 'text' property
    if (typeof data.text === 'undefined') return null;
    // `params.term` should be the term that is used for searching
    // `data.text` is the text that is displayed for the data object
    if (data.text.toLowerCase().indexOf(searchItem) > -1) {
      var modifiedData = $.extend({}, data, true);
      // You can return modified objects from here
      // This includes matching the `children` how you want in nested data sets
      return modifiedData;
    }
    // Return `null` if the term should not be displayed
    return null;
  },
  language: {
    noResults: function noResults() {
      return t("sdk.search.no_results");
    },
    errorLoading: function errorLoading() {
      return t("sdk.search.error_loading");
    },
    searching: function searching() {
      return t("sdk.search.searching");
    },
    inputTooShort: function inputTooShort(args) {
      var remainingChars = args.minimum - args.input.length;
      return t("sdk.search.autocomplete.inputshort.pre") + ' ' + remainingChars + ' ' + t("sdk.search.autocomplete.inputshort.post");
    }
  }
};

},{"core/i18n/i18n.service":418}],556:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".field[data-v-f0a19a8e]{background-color:transparent!important;padding-top:5px;padding-bottom:5px;display:flex;align-items:center}.value[data-v-f0a19a8e]{position:relative}.field div[data-v-f0a19a8e]{padding-left:5px;padding-right:5px}.field_value[data-v-f0a19a8e]{padding-left:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "field",
  props: ['state']
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"field",style:({fontSize: _vm.isMobile() && '0.8em'})},[(_vm.state.label)?_c('div',{staticClass:"col-sm-6  field_label"},[_vm._t("label",[_vm._v(_vm._s(_vm.state.label))])],2):_vm._e(),_vm._v(" "),_c('div',{staticClass:"field_value",class:[_vm.state.label ? 'col-sm-6' : null ]},[_vm._t("field",[_c('span',{staticStyle:{"word-wrap":"break-word"},domProps:{"innerHTML":_vm._s(_vm.state.value)}})])],2)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-f0a19a8e"

},{"vueify/lib/insert-css":397}],557:[function(require,module,exports){
var _text = require('./text.vue');

var _text2 = _interopRequireDefault(_text);

var _link = require('./link.vue');

var _link2 = _interopRequireDefault(_link);

var _image = require('./image.vue');

var _image2 = _interopRequireDefault(_image);

var _geo = require('./geo.vue');

var _geo2 = _interopRequireDefault(_geo);

var _media = require('./media.vue');

var _media2 = _interopRequireDefault(_media);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Fields = {
  simple_field: _text2.default,
  text_field: _text2.default,
  link_field: _link2.default,
  image_field: _image2.default,
  geo_field: _geo2.default,
  photo_field: _image2.default,
  media_field: _media2.default
};

module.exports = Fields;

},{"./geo.vue":559,"./image.vue":560,"./link.vue":561,"./media.vue":562,"./text.vue":563}],558:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var FieldType = {
  SIMPLE: 'simple',
  GEO: 'geo',
  LINK: 'link',
  PHOTO: 'photo',
  PHOTOLINK: "photolink",
  IMAGE: 'image',
  POINTLINK: 'pointlink',
  ROUTE: 'route'
};
var URLPattern = /^(https?:\/\/[^\s]+)/g;
var PhotoPattern = /[^\s]+.(png|jpg|jpeg|gif)$/g;

var Fields = require('./fields');
exports.default = {
  name: "g3w-field",
  props: {
    state: {
      required: true
    }
  },
  components: _extends({}, Fields),
  computed: {
    type: function type() {
      var value = this.state.value && _typeof(this.state.value) === 'object' && !this.state.value.coordinates ? this.state.value.value : this.state.value;
      var type = void 0;
      if (!value) {
        type = FieldType.SIMPLE;
      } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value.coordinates) {
        type = FieldType.GEO;
      } else if (value && Array.isArray(value)) {
        if (value.length && value[0].photo) type = FieldType.PHOTO;else type = FieldType.SIMPLE;
      } else if (value.toString().toLowerCase().match(PhotoPattern)) {
        type = FieldType.PHOTO;
      } else if (value.toString().match(URLPattern)) {
        type = FieldType.LINK;
      } else {
        type = FieldType.SIMPLE;
      }
      return type + '_field';
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.type,{tag:"component",attrs:{"state":_vm.state}})}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-12d25137"

},{"./fields":557}],559:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".show-hide-geo[data-v-18cffb50]{color:#3c8dbc;cursor:pointer;font-size:1.2em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var geoMixin = require('gui/vue/vue.mixins').geoMixin;
exports.default = {
  name: "g3w-geospatial",
  props: {
    data: {}
  },
  mixins: [geoMixin],
  data: function data() {
    return {
      layerId: 'table_layer_' + Date.now(),
      visible: false,
      id: 'geo_table_' + Date.now()
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"geo-content"},[_c('span',{staticClass:"show-hide-geo",class:[_vm.visible ? _vm.g3wtemplate.font['eye-close'] : _vm.g3wtemplate.font['eye']],on:{"click":function($event){$event.stopPropagation();return _vm.showLayer()}}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-18cffb50"

},{"gui/vue/vue.mixins":731,"vueify/lib/insert-css":397}],560:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".img-responsive[data-v-07ee229a]{cursor:pointer}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _field = require('./field.vue');

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "image",
  props: ['state'],
  data: function data() {
    return {
      galleryId: 'gallery_' + Date.now(),
      active: null,
      value: this.state.value.mime_type !== undefined ? this.state.value.value : this.state.value
    };
  },

  components: {
    Field: _field2.default
  },
  computed: {
    values: function values() {
      return Array.isArray(this.value) ? this.value : [this.value];
    }
  },
  methods: {
    getSrc: function getSrc(value) {
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        return value.photo;
      }
      return value;
    },
    showGallery: function showGallery(index) {
      this.active = index;
      if (_typeof(this.value) === 'object') {
        this.value.active = true;
      }
      $('#' + this.galleryId).modal('show');
    },
    getGalleryImages: function getGalleryImages() {
      var _this = this;

      var images = [];
      this.values.forEach(function (image) {
        images.push({
          src: _this.getSrc(image)
        });
      });
      return images;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}},[_c('div',{staticStyle:{"text-align":"left"},attrs:{"slot":"field"},slot:"field"},[_vm._l((_vm.values),function(value,index){return _c('img',{staticClass:"img-responsive",staticStyle:{"max-height":"50px"},attrs:{"src":_vm.getSrc(value)},on:{"click":function($event){return _vm.showGallery(index)}}})}),_vm._v(" "),_c('g3w-images-gallery',{attrs:{"id":_vm.galleryId,"active":_vm.active,"images":_vm.getGalleryImages()}})],2)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-07ee229a"

},{"./field.vue":556,"vueify/lib/insert-css":397}],561:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".field_link[data-v-44976eea]{max-width:100%}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _field = require('./field.vue');

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "link",
  props: ['state'],
  data: function data() {
    return {
      value: null
    };
  },

  components: {
    Field: _field2.default
  },
  methods: {
    openLink: function openLink(link_url) {
      window.open(link_url, '_blank');
    }
  },
  created: function created() {
    if (this.state.value && _typeof(this.state.value) === 'object') {
      this.value = this.state.value.value;
    } else {
      this.value = this.state.value;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('info.link_button'),expression:"'info.link_button'"}],staticClass:"btn skin-button field_link",attrs:{"slot":"field"},on:{"click":function($event){return _vm.openLink(_vm.value)}},slot:"field"})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-44976eea"

},{"./field.vue":556,"vueify/lib/insert-css":397}],562:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var MediaMixin = require('gui/vue/vue.mixins').mediaMixin;
exports.default = {
  name: "g3w-media",
  mixins: [MediaMixin],
  props: ['state'],
  computed: {
    type: function type() {
      return this.getMediaType(this.state.mime_type).type;
    },
    value: function value() {
      return this.state.value;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.value)?_c('div',{staticClass:"preview"},[_c('a',{attrs:{"href":_vm.value,"target":"_blank"}},[_c('div',{staticClass:"previewtype",class:_vm.type},[_c('i',{staticClass:"fa-2x",class:_vm.g3wtemplate.font[_vm.type]})])]),_vm._v(" "),_c('div',{staticClass:"filename"},[_vm._v(_vm._s(_vm.filename))]),_vm._v(" "),_vm._t("default")],2):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-884b06ba"

},{"gui/vue/vue.mixins":731}],563:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".field_text_table[data-v-5ab40c3e]{background-color:transparent!important}.field_text_table .field_label[data-v-5ab40c3e]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _field = require('./field.vue');

var _field2 = _interopRequireDefault(_field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "text",
  props: ['state'],
  components: {
    Field: _field2.default
  },
  created: function created() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}})}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-5ab40c3e"

},{"./field.vue":556,"vueify/lib/insert-css":397}],564:[function(require,module,exports){
module.exports = "<aside class=\"control-sidebar control-sidebar-light\" >\n  <a v-show=\"panelsinstack\" href=\"#\" class=\"floatbar-aside-toggle\" data-toggle=\"control-sidebar\" role=\"button\">\n    <span class=\"sr-only\">Expand</span>\n  </a>\n  <div id=\"floatbar-spinner\" style=\"position:absolute\"></div>\n  <div v-show=\"panelsinstack\" class=\"g3w-sidebarpanel\">\n    <div v-if=\"closable\" class=\"row\">\n      <div class=\"col-xs-12 col-sm-12 col-md-12\">\n        <button :class=\"g3wtemplate.getFontClass('close')\" class=\"pull-right close-panel-button\" @click=\"closePanel\"></button>\n      </div>\n    </div>\n    <div v-if=\"panelname\">\n      <h4 class=\"g3w-floatbarpanel-name\">{{ panelname }}</h4>\n    </div>\n    <div id=\"g3w-floatbarpanel-placeholder\" class=\"g3w-floatbarpanel-placeholder\"></div>\n  </div>\n</aside>\n";

},{}],565:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Stack = require('gui/utils/utils').barstack;
var GUI = require('gui/gui');

function FloatbarService() {
  this.stack = new Stack();
  this.init = function (layout) {
    this.layout = layout;
    this.sidebarEl = $(this.layout.options.controlSidebarOptions.selector);
    this._zindex = this.sidebarEl.css("z-index");
    this._modalOverlay = null;
    this._modal = false;
    this._isopen = false;
  };

  this.isOpen = function () {
    return this._isopen;
  };

  this.open = function () {
    this.layout.floatBar.open(this.sidebarEl, true);
    this._isopen = true;
  };

  this.close = function () {
    this.layout.floatBar.close(this.sidebarEl, true);
    this._isopen = false;
  };

  this.showPanel = function (panel, options) {
    options = options || {};
    var append = options.append || false;
    var modal = options.modal || false;
    options.parent = "#g3w-floatbarpanel-placeholder";
    this.stack.push(panel, options);
    if (!this._isopen) this.open();
  };

  this.closePanel = function (panel) {
    if (panel) this.stack.remove(panel);else this.stack.pop();
    if (!this.stack.getLength()) {
      if (this._modal) {
        GUI.setModal(false);
        this.close();
        $('.control-sidebar-bg').toggleClass('control-sidebar-bg-shadow');
        this.sidebarEl.css("z-index", "");
        this.sidebarEl.css("padding-top", "50px");
        $('.control-sidebar-bg').css("z-index", "");
        this._modal = false;
      } else this.close();
    }
  };

  this.hidePanel = function () {
    this.close();
  };
}

var floatbarService = new FloatbarService();
var compiledFloatBarTemplate = Vue.compile(require('./floatbar.html'));

var FloatbarComponent = Vue.extend(_extends({}, compiledFloatBarTemplate, {
  data: function data() {
    return {
      stack: floatbarService.stack.state
    };
  },

  computed: {
    // active panels on stack
    panelsinstack: function panelsinstack() {
      return this.stack.contentsdata.length > 0;
    },
    panelname: function panelname() {
      var name = void 0;
      if (this.stack.contentsdata.length) {
        name = this.stack.contentsdata.slice(-1)[0].content.getTitle();
      }
      return name;
    },
    closable: function closable() {
      return floatbarService.closable;
    }
  },
  watch: {
    "stack.contentsdata": function stackContentsdata() {
      var children = $("#g3w-floatbarpanel-placeholder").children();
      children.forEach(function (child, index) {
        if (index == children.length - 1) $(child).show();else $(child).hide();
      });
    }
  },
  methods: {
    closePanel: function closePanel() {
      floatbarService.closePanel();
    }
  }
}));

module.exports = {
  FloatbarService: floatbarService,
  FloatbarComponent: FloatbarComponent
};

},{"./floatbar.html":564,"gui/gui":575,"gui/utils/utils":713}],566:[function(require,module,exports){
module.exports = "<div>\n  <form class=\"form-horizontal g3w-form\">\n    <div class=\"box-primary\">\n      <div class=\"box-body\">\n        <template v-if=\"hasFormStructure\">\n          <tabs\n            :contenttype=\"'editing'\"\n            :addToValidate=\"addToValidate\"\n            :changeInput=\"changeInput\"\n            :tabs=\"state.formstructure\"\n            :fields=\"state.fields\">\n          </tabs>\n          <g3w-form-inputs v-if=\"state.fieldsoutofformstructure.length\"\n            :state=\"state.fieldsoutofformstructure\"\n            :addToValidate=\"addToValidate\"\n            :changeInput=\"changeInput\"\n            @changeinput=\"changeInput\"\n            @addinput=\"addToValidate\">\n          </g3w-form-inputs>\n        </template>\n        <template v-else>\n          <g3w-form-inputs\n            :state=\"state\"\n            :addToValidate=\"addToValidate\"\n            :changeInput=\"changeInput\"\n            @changeinput=\"changeInput\"\n            @addinput=\"addToValidate\">\n          </g3w-form-inputs>\n        </template>\n      </div>\n    </div>\n  </form>\n</div>\n";

},{}],567:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var _g3wFormInputs = require('../../../../inputs/g3w-form-inputs.vue');

var _g3wFormInputs2 = _interopRequireDefault(_g3wFormInputs);

var _tabs = require('../../../../tabs/tabs.vue');

var _tabs2 = _interopRequireDefault(_tabs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./body.html'));

var BodyFormComponent = Vue.extend(_extends({}, compiledTemplate, {
  props: ['state'],
  data: function data() {
    return {
      show: true
    };
  },

  components: {
    Tabs: _tabs2.default,
    G3wFormInputs: _g3wFormInputs2.default
  },
  methods: {
    addToValidate: function addToValidate(input) {
      this.$emit('addtovalidate', input);
    },
    changeInput: function changeInput(input) {
      this.$emit('changeinput', input);
    }
  },
  computed: {
    hasFormStructure: function hasFormStructure() {
      return !!this.state.formstructure;
    }
  }
}));

module.exports = BodyFormComponent;

},{"../../../../inputs/g3w-form-inputs.vue":591,"../../../../tabs/tabs.vue":705,"./body.html":566,"gui/vue/utils":727}],568:[function(require,module,exports){
module.exports = "<div class=\"form-group g3wform_footer\">\n  <slot>\n    <div style=\"margin:3px; font-weight: bold\">\n      * <span  v-t=\"'sdk.form.footer.required_fields'\"></span>\n      <div v-if=\"state.footer.message\" :style=\"[state.footer.style] \">{{ state.footer.message }}</div>\n    </div>\n    <button v-for=\"button in state.buttons\" class=\"btn \"\n      :class=\"[button.class]\"\n      @click.stop.prevent=\"exec(button.cbk)\"\n      v-disabled=\"!btnEnabled(button)\" v-t=\"button.title\">\n    </button>\n  </slot>\n</div>\n";

},{}],569:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./footer.html'));
var FooterFormComponent = Vue.extend(_extends({}, compiledTemplate, {
  props: ['state'],
  data: function data() {
    return {
      id: "footer",
      active: true
    };
  },

  methods: {
    exec: function exec(cbk) {
      cbk instanceof Function ? cbk(this.state.fields) : function () {
        return this.state.fields;
      }();
    },
    btnEnabled: function btnEnabled(button) {
      return button.type !== 'save' || button.type === 'save' && this.isValid();
    },
    isValid: function isValid() {
      return this.state.valid;
    },
    _enterEventHandler: function _enterEventHandler(evt) {
      if (evt.which === 13) {
        evt.preventDefault();
        if (this.isValid() && this.active) $(this.$el).find('button').click();
      }
    }
  },
  activated: function activated() {
    this.active = true;
  },
  deactivated: function deactivated() {
    this.active = false;
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      document.addEventListener('keydown', _this._enterEventHandler);
    });
  },
  beforeDestroy: function beforeDestroy() {
    document.removeEventListener('keydown', this._enterEventHandler);
  }
}));

module.exports = FooterFormComponent;

},{"./footer.html":568,"gui/vue/utils":727}],570:[function(require,module,exports){
module.exports = "<div class=\"g3wform_header box-header with-border\">\n  <span style=\"display:flex;\"\n    class=\"title\"\n    :style=\"{fontSize: isMobile() && '1em !important'}\"\n    :class=\"[{item_selected: currentindex === index && headers.length > 1},[headers.length > 1 ? 'tabs' : 'one' ]]\"\n    v-for=\"(header, index) in headers\" :key=\"header.title\"\n    @click=\"click(index)\">\n    <span v.if=\"header.icon\" style=\"margin-right: 5px\">\n      <i :class=\"header.icon\"></i>\n    </span>\n    <span v-t:pre=\"header.title\">{{ header.name }}</span>\n  </span>\n  <i v-if=\"!isMobile()\" :class=\"g3wtemplate.getFontClass('resize-h')\" style=\"font-weight: bold; font-size: 1.4em; padding: 5px;\" class=\"action button skin-color\" @click=\"resizeForm\"></i>\n</div>\n";

},{}],571:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./header.html'));
var HeaderFormComponent = Vue.extend(_extends({}, compiledTemplate, {
  props: {
    headers: {
      type: Array,
      default: []
    },
    currentindex: {
      type: Number,
      default: 0
    }
  },
  methods: {
    click: function click(index) {
      if (this.currentindex !== index) {
        this.$emit('clickheader', index);
      }
    },
    resizeForm: function resizeForm() {
      this.$emit('resize-form');
    }
  }
}));

module.exports = HeaderFormComponent;

},{"./header.html":570,"gui/vue/utils":727}],572:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

function FormService() {
  var _this = this;

  this.state = null;
  this.eventBus = new Vue();
  this.layer;
  this.setters = {
    setInitForm: function setInitForm() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setInitForm(options);
    },
    setFormStructure: function setFormStructure(formStructure) {
      this.state.formstructure = formStructure;
    },

    // setter change fields
    setFormFields: function setFormFields(fields) {
      this.state.fields = fields;
    },
    setupFields: function setupFields() {
      this._setupFields();
    },

    // setter insert data into form
    setFormData: function setFormData(fields) {
      this.setFormFields(fields);
    },

    // setter single field
    setField: function setField(field) {},

    // settere state
    setState: function setState(state) {
      this._setState(state);
    },

    // setter add action
    addActionsForForm: function addActionsForForm(actions) {},
    postRender: function postRender(element) {
      // hook for listener to chenge DOM
    }
  };
  base(this);
  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this._setInitForm(options);
  };
  // init form options paased for example by editor
  this._setInitForm = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.layer = options.layer;
    var fields = options.fields;
    this.title = options.title || 'Form';
    this.formId = options.formId;
    this.name = options.name;
    this.buttons = options.buttons || [];
    this.context_inputs = options.context_inputs;
    var footer = options.footer || {};
    this.state = {
      loading: false,
      components: [],
      disabledcomponents: [],
      component: null,
      headers: [],
      currentheaderindex: 0,
      fields: null,
      buttons: this.buttons,
      disabled: false,
      valid: true, // global form validation state. True at beginning
      // when input change will be update
      tovalidate: {},
      componentstovalidate: {},
      footer: footer
    };
    this.setFormFields(fields);
    this.setFormStructure(options.formStructure);
    if (this.layer && options.formStructure) {
      var fieldsoutofformstructure = this.layer.getFieldsOutOfFormStructure().map(function (field) {
        return field.field_name;
      });
      this.state.fieldsoutofformstructure = {
        fields: fields.filter(function (field) {
          return fieldsoutofformstructure.indexOf(field.name) > -1;
        })
      };
    }
  };
  this.eventBus.$on('set-loading-form', function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _this.state.loading = bool;
  });
}

inherit(FormService, G3WObject);

var proto = FormService.prototype;

proto.setCurrentFormPercentage = function (perc) {
  this.layer.setFormPercentage(perc);
};

proto.setLoading = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.loading = bool;
};

proto.setValidComponent = function (_ref) {
  var id = _ref.id,
      valid = _ref.valid;

  this.state.componentstovalidate[id] = valid;
  this.isValid();
};

proto.getValidComponent = function (id) {
  return this.state.componentstovalidate[id];
};

// Every input send to form it valid value that will change the genaral state of form
proto.isValid = function (input) {
  var _this2 = this;

  if (input) {
    // check mutually
    if (input.validate.mutually) {
      if (!input.validate.required) {
        if (!input.validate.empty) {
          input.validate._valid = input.validate.valid;
          input.validate.mutually_valid = input.validate.mutually.reduce(function (previous, inputname) {
            return previous && _this2.state.tovalidate[inputname].validate.empty;
          }, true);
          input.validate.valid = input.validate.mutually_valid && input.validate.valid;
        } else {
          input.value = null;
          input.validate.mutually_valid = true;
          input.validate.valid = true;
          input.validate._valid = true;
          var countNoTEmptyInputName = [];
          for (var i = input.validate.mutually.length; i--;) {
            var inputname = input.validate.mutually[i];
            !this.state.tovalidate[inputname].validate.empty && countNoTEmptyInputName.push(inputname);
          }
          if (countNoTEmptyInputName.length < 2) {
            countNoTEmptyInputName.forEach(function (inputname) {
              _this2.state.tovalidate[inputname].validate.mutually_valid = true;
              _this2.state.tovalidate[inputname].validate.valid = true;
              setTimeout(function () {
                _this2.state.tovalidate[inputname].validate.valid = _this2.state.tovalidate[inputname].validate._valid;
                _this2.state.valid = _this2.state.valid && _this2.state.tovalidate[inputname].validate.valid;
              });
            });
          }
        }
      }
      //check if min_field or max_field is set
    } else if (!input.validate.empty && (input.validate.min_field || input.validate.max_field)) {
      var input_name = input.validate.min_field || input.validate.max_field;
      input.validate.valid = input.validate.min_field ? this.state.tovalidate[input.validate.min_field].validate.empty || 1 * input.value > 1 * this.state.tovalidate[input.validate.min_field].value : this.state.tovalidate[input.validate.max_field].validate.empty || 1 * input.value < 1 * this.state.tovalidate[input.validate.max_field].value;
      if (input.validate.valid) this.state.tovalidate[input_name].validate.valid = true;
    }
  }

  this.state.valid = Object.values(this.state.tovalidate).reduce(function (previous, input) {
    return previous && input.validate.valid;
  }, true) && Object.values(this.state.componentstovalidate).reduce(function (previous, valid) {
    return previous && valid;
  }, true);
};

proto.addComponents = function () {
  var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var component = _step.value;

      this.addComponent(component);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

proto.addComponent = function (component) {
  var id = component.id,
      title = component.title,
      name = component.name,
      icon = component.icon,
      valid = component.valid;

  if (valid !== undefined) {
    this.state.componentstovalidate[id] = valid;
    this.state.valid = this.state.valid && valid;
    this.eventBus.$emit('add-component-validate', {
      id: id,
      valid: valid
    });
  }
  this.state.headers.push({ title: title, name: name, icon: icon });
  this.state.components.push(component.component);
};

proto.replaceComponent = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      index = _ref2.index,
      component = _ref2.component;

  this.state.components.splice(index, 1, component);
};

proto.disableComponent = function (_ref3) {
  var index = _ref3.index,
      disabled = _ref3.disabled;

  if (disabled) this.state.disabledcomponents.push(index);else this.state.disabledcomponents = this.state.disabledcomponents.filter(function (disabledIndex) {
    return disabledIndex !== index;
  });
};

proto.setComponentByIndex = function (index) {
  if (this.state.disabledcomponents.indexOf(index) === -1) {
    this.setIndexHeader(index);
    this.state.component = this.state.components[index];
  }
};

proto.getComponentByIndex = function (index) {
  return this.state.components[index];
};

proto.setComponent = function (component) {
  this.state.component = component;
};

proto.addedComponentTo = function () {
  var formcomponent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'body';

  this.state.addedcomponentto[formcomponent] = true;
};

proto.addToValidate = function (input) {
  this.state.tovalidate[input.name] = input;
};

proto.getState = function () {
  return this.state;
};

proto._setState = function (state) {
  this.state = state;
};

proto.getFields = function () {
  return this.state.fields;
};

proto._getField = function (fieldName) {
  return this.state.fields.find(function (field) {
    return field.name === fieldName;
  });
};

proto.getEventBus = function () {
  return this.eventBus;
};

proto.setIndexHeader = function (index) {
  this.state.currentheaderindex = index;
};

proto.getContext = function () {
  return this.context_inputs.context;
};

proto.getSession = function () {
  return this.getContext().session;
};

proto.getInputs = function () {
  return this.context_inputs.inputs;
};

//method to clear all the open thinghs opened by service
proto.clearAll = function () {
  this.eventBus.$off('addtovalidate');
  this.eventBus.$off('set-main-component');
  this.eventBus.$off('set-loading-form');
  this.eventBus.$off('component-validation');
  this.eventBus.$off('disable-component');
};

module.exports = FormService;

},{"core/g3wobject":415,"core/utils/utils":485}],573:[function(require,module,exports){
module.exports = "<div class=\"g3wform_content\" style=\"position: relative\">\n  <bar-loader :loading=\"state.loading\"></bar-loader>\n  <g3wformheader\n    :currentindex=\"state.currentheaderindex\"\n    :headers=\"state.headers\"\n    @resize-form=\"resizeForm\"\n    @clickheader=\"switchComponent\">\n  </g3wformheader>\n  <div class=\"g3wform_body\" >\n    <keep-alive>\n      <component\n        @hook:activated=\"reloadLayout\"\n        @addtovalidate=\"addToValidate\"\n        @changeinput=\"changeInput\"\n        :state=\"state\"\n        :is=\"state.component\">\n      </component>\n    </keep-alive>\n  </div>\n  <g3w-form-footer :state=\"state\"></g3w-form-footer>\n</div>\n";

},{}],574:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inherit = require('core/utils/utils').inherit;
var GUI = require('gui/gui');
var Component = require('gui/vue/component');
var Service = require('../formservice');
var base = require('core/utils/utils').base;
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./form.html'));
var HeaderFormComponent = require('../components/header/vue/header');
var BodyFormComponent = require('../components/body/vue/body');
var G3wFormFooter = require('gui/form/components/footer/vue/footer');

//vue component
var vueComponentObject = _extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: {},
      switchcomponent: false
    };
  },
  components: {
    g3wformheader: HeaderFormComponent,
    G3wFormFooter: G3wFormFooter
  },
  transitions: { 'addremovetransition': 'showhide' },
  methods: {
    disableComponent: function disableComponent(_ref) {
      var _ref$index = _ref.index,
          index = _ref$index === undefined ? -1 : _ref$index,
          _ref$disabled = _ref.disabled,
          disabled = _ref$disabled === undefined ? false : _ref$disabled;

      this.$options.service.disableComponent({
        index: index,
        disabled: disabled
      });
    },
    resizeForm: function resizeForm() {
      var perc = GUI.getContentPercentage();
      var currentFormPercentage = perc == 100 ? 50 : 100;
      GUI.setContentPercentage(currentFormPercentage);
      this.$options.service.setCurrentFormPercentage(currentFormPercentage);
    },
    switchComponent: function switchComponent(index) {
      this.switchcomponent = true;
      this.$options.service.setComponentByIndex(index);
    },

    changeInput: function changeInput(input) {
      return this.$options.service.isValid(input);
    },
    addToValidate: function addToValidate(input) {
      this.$options.service.addToValidate(input);
    },
    // set layout
    reloadLayout: function reloadLayout() {
      var height = $(this.$el).height();
      if (!height) return;
      var footerHeight = $('.g3wform_footer').height() ? $('.g3wform_footer').height() + 50 : 50;
      $(this.$el).find(".g3wform_body").height(height - ($('.g3wform_header').height() + footerHeight));
    }
  },
  updated: function updated() {
    var _this = this;

    this.$nextTick(function () {
      if (_this.switchcomponent) {
        setTimeout(function () {
          _this.switchcomponent = false;
        }, 0);
      }
    });
  },
  created: function created() {
    var _this2 = this;

    this.$options.service.getEventBus().$on('set-main-component', function () {
      _this2.switchComponent(0);
    });
    this.$options.service.getEventBus().$on('component-validation', function (_ref2) {
      var id = _ref2.id,
          valid = _ref2.valid;

      _this2.$options.service.setValidComponent({
        id: id,
        valid: valid
      });
    });
    this.$options.service.getEventBus().$on('addtovalidate', this.addToValidate);
    this.$options.service.getEventBus().$on('disable-component', this.disableComponent);
  },
  mounted: function mounted() {
    // check if is valid form (it used by footer component)
    this.$options.service.isValid();
  },
  beforeDestroy: function beforeDestroy() {
    this.$options.service.clearAll();
  }
});

function FormComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.id = options.id || 'form';
  base(this, options);
  options.service = options.service ? new options.service() : new Service();
  options.vueComponentObject = options.vueComponentObject || vueComponentObject;
  //set statdar element of the form
  var components = options.components || [{ id: options.id, title: options.title, name: options.name, component: BodyFormComponent }];
  options.perc = options.layer.getFormPercentage() !== null ? options.layer.getFormPercentage() : options.perc;
  // initialize component
  this.init(options);
  this.getService().addComponents(components);
  this.getService().setComponent(components[0].component);

  this.addFormComponents = function () {
    var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    this.getService().addComponents(components);
  };

  this.addFormComponent = function (component) {
    component && this.getService().addComponent(component);
  };
  // some utilities methods
  this.addDependecyComponents = function (components) {
    this.getService().addDependecyComponents(components);
  };
  this.addComponentBeforeBody = function (Component) {
    //this.getService().addedComponentTo('body');
    //this.insertComponentAt(1, Component);
  };

  this.addComponentAfterBody = function (Component) {
    //this.getService().addedComponentTo('body');
    //this.insertComponentAt(2, Component)
  };

  this.addComponentBeforeFooter = function () {
    //TODO
  };

  this.addComponentAfterFooter = function (Component) {
    //TODO
  };
  // overwrite father mount method.
  this.mount = function (parent, append) {
    return base(this, 'mount', parent, append).then(function () {
      // set modal window to true
      GUI.setModal(true);
    });
  };

  this.layout = function () {
    this.internalComponent.reloadLayout();
  };
}

inherit(FormComponent, Component);

module.exports = FormComponent;

},{"../components/body/vue/body":567,"../components/header/vue/header":571,"../formservice":572,"./form.html":573,"core/applicationstate":402,"core/utils/utils":485,"gui/form/components/footer/vue/footer":569,"gui/gui":575,"gui/vue/component":718,"gui/vue/utils":727}],575:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    noop = _require.noop;

var G3WObject = require('core/g3wobject');
var RouterService = require('core/router');
var ComponentsRegistry = require('gui/componentsregistry');

// API della GUI.
// methods have be defined by application
// app shold call GUI.ready() when GUI is ready
function GUI() {
  this.setters = {
    setContent: function setContent() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.emit('opencontent', true);
      this._setContent(options);
    }
  };
  this.isready = false;
  // images urls
  this.getResourcesUrl = noop;
  // show a Vue form
  this.showForm = noop;
  this.closeForm = noop;
  this.showListing = noop;
  this.closeListing = noop;
  this.hideListing = noop;
  // modal
  this.setModal = noop;
  this.showFullModal = noop;
  // modal
  this.showQueryResults = noop;
  this.hideQueryResults = noop;
  this.showPanel = noop;
  this.hidePanel = noop;
  this.reloadComponents = noop;
  this.showUserMessage = noop;
  this.closeUserMessage = noop;
  this.showModalDialog = noop;
  this.addComponent = function (component, placeholder) {};
  this.removeComponent = function (id) {};
  this.setComponent = function (component) {
    ComponentsRegistry.registerComponent(component);
  };
  this.getComponent = function (id) {
    return ComponentsRegistry.getComponent(id);
  };
  this.getComponents = function () {
    return ComponentsRegistry.getComponents();
  };
  this.goto = function (url) {
    RouterService.goto(url);
  };

  this.ready = function () {
    this.emit('ready');
    this.isready = true;
  };

  this.guiResized = function () {
    this.emit('guiresized');
  };
  //ready GUI
  this.isReady = function () {
    var _this = this;

    return new Promise(function (resolve) {
      _this.isready ? resolve() : _this.once('ready', resolve);
    });
  };
  /* spinner */
  this.showSpinner = function (options) {};
  this.hideSpinner = function (id) {};
  /* end spinner */
  this.notify = noop;
  this.dialog = noop;
  this.isMobile = noop;
  //useful to registere setters
  base(this);
}

inherit(GUI, G3WObject);

module.exports = new GUI();

},{"core/g3wobject":415,"core/router":482,"core/utils/utils":485,"gui/componentsregistry":553}],576:[function(require,module,exports){
module.exports = "<li class=\"customheaderlink dropdown user user-menu\" :title=\"state.title\">\n  <a v-if=\"state.type === 'link'\" :href=\"state.url\" :class=\"{ imagelink : !!state.img}\" :target=\"state.target\" class=\"dropdown-toggle\">\n    <img style=\"max-height: 20px\" v-if=\"state.img\" :src=\"state.img\">\n    <span v-else>{{state.title}}</span>\n  </a>\n  <a v-else-if=\"state.type === 'modal'\" style=\"cursor: pointer\" @click=\"showCustomModal(state.id)\" data-toggle=\"modal\" data-target=\"#custom_modal\" class=\"dropdown-toggle\">\n    <span>{{state.title}}</span>\n  </a>\n</li>\n";

},{}],577:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var compiledTemplate = Vue.compile(require('./headeritem.html'));
var HeaderItemComponent = _extends({
  props: ['state']
}, compiledTemplate, {
  methods: {
    showCustomModal: function showCustomModal(id) {
      this.$emit('show-custom-modal-content', id);
    }
  },
  created: function created() {
    this.state.type = this.state.type || 'link';
  }
});

module.exports = HeaderItemComponent;

},{"./headeritem.html":576}],578:[function(require,module,exports){
module.exports = "<div class=\"form-group\">\n  <slot name=\"label\">\n    <label :for=\"state.name\" class=\"col-sm-4 control-label\">{{ state.label }}\n      <span v-if=\"state.validate && state.validate.required\">*</span>\n      <slot name=\"label-action\"></slot>\n    </label>\n  </slot>\n  <div class=\"col-sm-8\">\n    <slot name=\"loading\"></slot>\n    <slot name=\"body\"></slot>\n    <slot name=\"message\">\n      <p v-if=\"notvalid\" class=\"error-input-message\" style=\"margin: 0\" v-html=\"state.validate.message\"></p>\n      <p v-else-if=\"state.info\" style=\"margin: 0 \" v-html=\"state.info\"></p>\n    </slot>\n  </div>\n</div>\n";

},{}],579:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var BaseInputMixin = {
  computed: {
    notvalid: function notvalid() {
      return this.state.validate.valid === false;
    },
    editable: function editable() {
      return this.state.editable;
    }
  },
  methods: {
    // called when input value change
    change: function change() {
      this.service.setEmpty();
      // validate input
      this.state.validate.required && this.service.validate();
      // emit change input
      this.$emit('changeinput', this.state);
    },

    isVisible: function isVisible() {}
  }
};

var BaseInput = _extends({
  props: ['state'],
  template: require('./baseinput.html')
}, BaseInputMixin);

module.exports = {
  BaseInput: BaseInput,
  BaseInputMixin: BaseInputMixin
};

},{"./baseinput.html":578}],580:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Service = require('gui/inputs/service');

function CheckBoxService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var value = options.state.input.options.values.find(function (value) {
    return value.checked === false;
  });
  options.validatorOptions = {
    values: options.state.input.options.values.map(function (value) {
      return value;
    })
  };
  if (options.state.value === null && !options.state.forceNull) options.state.value = value.value;
  base(this, options);
}

inherit(CheckBoxService, Service);

var proto = CheckBoxService.prototype;

proto.convertCheckedToValue = function (checked) {
  checked = checked === null || checked === undefined ? false : checked;
  var option = this.state.input.options.values.find(function (value) {
    return value.checked === checked;
  });
  this.state.value = option.value;
  return this.state.value;
};

proto.convertValueToChecked = function () {
  var valueToCheck = this.state.value;
  if (valueToCheck === null || valueToCheck === undefined) return false;
  var option = this.state.input.options.values.find(function (value) {
    return value.value == valueToCheck;
  });
  if (option === undefined) {
    option = this.state.input.options.values.find(function (value) {
      return value.checked === false;
    });
    this.state.value = option.value;
  }
  return option.checked;
};

module.exports = CheckBoxService;

},{"core/utils/utils":485,"gui/inputs/service":617}],581:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <div v-disabled=\"!editable\" style=\"height: 20px; margin-top:8px;\" slot=\"body\">\n    <input\n      @change=\"changeCheckBox\"\n      style=\"width:100%\"\n      :class=\"{'input-error-validation' : notvalid}\"\n      class=\"magic-checkbox\"\n      v-model=\"value\"\n      type=\"checkbox\"\n      :id=\"id\">\n    <label :for=\"id\">{{ label }}</label>\n  </div>\n</baseinput>\n";

},{}],582:[function(require,module,exports){
var Input = require('gui/inputs/input');
var getUniqueDomId = require('core/utils/utils').getUniqueDomId;
var WidgetMixins = require('gui/inputs/widgetmixins');

var CheckBoxInput = Vue.extend({
  mixins: [Input, WidgetMixins],
  template: require('./checkbox.html'),
  data: function data() {
    return {
      value: null,
      label: null,
      id: getUniqueDomId() // new id
    };
  },
  methods: {
    setLabel: function setLabel() {
      // convert label
      this.label = this.service.convertCheckedToValue(this.value);
    },
    setValue: function setValue() {
      this.value = this.service.convertValueToChecked();
    },

    changeCheckBox: function changeCheckBox() {
      // convert label
      this.setLabel();
      this.widgetChanged();
    },
    stateValueChanged: function stateValueChanged() {
      this.setValue();
      this.setLabel();
    }
  },
  created: function created() {
    this.value = this.state.forceNull ? this.value : this.service.convertValueToChecked();
  },
  mounted: function mounted() {
    if (!this.state.forceNull) {
      this.setLabel();
      this.change();
    }
  }
});

module.exports = CheckBoxInput;

},{"./checkbox.html":581,"core/utils/utils":485,"gui/inputs/input":593,"gui/inputs/widgetmixins":629}],583:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <input\n    :placeholder=\"state.default\"\n    type=\"color\"\n    slot=\"body\"\n    @change=\"change\"\n    v-disabled=\"!editable\"\n    :field=\"state.name\"\n    class=\"form-control\"\n    style=\"cursor: pointer\"\n    v-model=\"state.value\"\n    :class=\"{'input-error-validation' : notvalid}\"\n    :id=\"state.name\">\n</baseinput>\n\n";

},{}],584:[function(require,module,exports){
var Input = require('gui/inputs/input');

var TextInput = Vue.extend({
  template: require('./color.html'),
  mixins: [Input]
});

module.exports = TextInput;

},{"./color.html":583,"gui/inputs/input":593}],585:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var ApplicationService = require('core/applicationservice');
var Service = require('gui/inputs/service');

function DateTimePickerService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.validatorOptions = {};
  base(this, options);
}

inherit(DateTimePickerService, Service);

var proto = DateTimePickerService.prototype;

proto.getLocale = function () {
  var applicationConfig = ApplicationService.getConfig();
  return applicationConfig.user.i18n ? applicationConfig.user.i18n : 'en';
};

proto.convertQGISDateTimeFormatToMoment = function (datetimeformat) {
  datetimeformat = datetimeformat.replace('yyyy', 'YYYY');
  var matchDayInDate = datetimeformat.match(/d/g);
  if (matchDayInDate && matchDayInDate.length < 3) {
    datetimeformat = datetimeformat.replace('d'.repeat(matchDayInDate.length), 'D'.repeat(matchDayInDate.length));
  }
  return datetimeformat;
};

proto.setValidatorOptions = function (options) {
  this.validatorOptions = options;
};

module.exports = DateTimePickerService;

},{"core/applicationservice":401,"core/utils/utils":485,"gui/inputs/service":617}],586:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <div slot=\"body\" >\n    <div class='input-group date' :id='iddatetimepicker'>\n      <input\n        :id=\"idinputdatetimepiker\"\n        :readonly=\"!editable || isMobile() ? 'readonly' : null\"\n        type='text'\n        v-disabled=\"!editable\"\n        :class=\"{'input-error-validation' : notvalid}\"\n        class=\"form-control\" />\n      <span\n        class=\"input-group-addon caret\">\n        <span\n          :class=\"[timeOnly() ? g3wtemplate.getFontClass('time') :  g3wtemplate.getFontClass('calendar')]\">\n        </span>\n      </span>\n    </div>\n  </div>\n</baseinput>\n";

},{}],587:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Input = require('gui/inputs/input');
var getUniqueDomId = require('core/utils/utils').getUniqueDomId;
var WidgetMixins = require('gui/inputs/widgetmixins');

var _require = require('gui/vue/vue.mixins'),
    resizeMixin = _require.resizeMixin;

var DateTimePickerInput = Vue.extend({
  mixins: [Input, WidgetMixins, resizeMixin],
  template: require('./datetimepicker.html'),
  data: function data() {
    var uniqueValue = getUniqueDomId();
    return {
      iddatetimepicker: 'datetimepicker_' + uniqueValue,
      idinputdatetimepiker: 'inputdatetimepicker_' + uniqueValue,
      changed: false
    };
  },
  methods: {
    resize: function resize() {
      var domeDataPicker = $('#' + this.iddatetimepicker);
      domeDataPicker && domeDataPicker.data("DateTimePicker") && domeDataPicker.data("DateTimePicker").hide();
    },

    timeOnly: function timeOnly() {
      return !this.state.input.options.formats[0].date;
    },
    stateValueChanged: function stateValueChanged(value) {
      var datetimedisplayformat = this.service.convertQGISDateTimeFormatToMoment(this.state.input.options.formats[0].displayformat);
      var date = moment(value).format(datetimedisplayformat);
      $('#' + this.iddatetimepicker).val(date);
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _this = this;

      var fielddatetimeformat, date, locale, datetimedisplayformat, datetimefieldformat;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.$nextTick();

            case 2:
              fielddatetimeformat = this.state.input.options.formats[0].fieldformat.replace('yyyy', 'YYYY').replace('dd', 'DD');

              this.service.setValidatorOptions({
                fielddatetimeformat: fielddatetimeformat
              });
              date = moment(this.state.value, fielddatetimeformat, true).isValid() ? moment(this.state.value, fielddatetimeformat).toDate() : null;
              locale = this.service.getLocale();
              datetimedisplayformat = this.service.convertQGISDateTimeFormatToMoment(this.state.input.options.formats[0].displayformat);
              datetimefieldformat = this.service.convertQGISDateTimeFormatToMoment(this.state.input.options.formats[0].fieldformat);

              $(function () {
                $('#' + _this.iddatetimepicker).datetimepicker({
                  defaultDate: date,
                  format: datetimedisplayformat,
                  ignoreReadonly: true,
                  allowInputToggle: true,
                  toolbarPlacement: 'top',
                  widgetPositioning: {
                    vertical: 'auto',
                    horizontal: 'right'
                  },
                  showClose: true,
                  locale: locale
                });
              });
              $('#' + this.iddatetimepicker).on("dp.change", function (e) {
                var newDate = $('#' + _this.idinputdatetimepiker).val();
                _this.state.value = _.isEmpty(_.trim(newDate)) ? null : moment(newDate, datetimedisplayformat).format(datetimefieldformat);
                _this.widgetChanged();
              });
              $('#' + this.iddatetimepicker).on("dp.show", function (e) {
                _this.$emit('datetimepickershow');
              });
              $('#' + this.iddatetimepicker).on("dp.hide", function (e) {
                _this.$emit('datetimepickershow');
              });
              _applicationstate2.default.ismobile && setTimeout(function () {
                $('#' + _this.idinputdatetimepiker).blur();
              });

            case 13:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
});

module.exports = DateTimePickerInput;

},{"./datetimepicker.html":586,"core/applicationstate":402,"core/utils/utils":485,"gui/inputs/input":593,"gui/inputs/widgetmixins":629,"gui/vue/vue.mixins":731}],588:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');

function FloatService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(FloatService, Service);

module.exports = FloatService;

},{"core/utils/utils":485,"gui/inputs/service":617}],589:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <input\n    @change=\"change\"\n    @input=\"change\"\n    class=\"form-control\"\n    style=\"width:100%\"\n    v-disabled=\"!editable\"\n    :class=\"{'input-error-validation' : notvalid}\"\n    v-model=\"state.value\"\n    slot=\"body\"\n    type=\"number\"\n    :step=\"state.step || 1\"\n    :placeholder=\"state.default\">\n</baseinput>\n";

},{}],590:[function(require,module,exports){
var Input = require('gui/inputs/input');

var FloatInput = Vue.extend({
  mixins: [Input],
  template: require('./float.html')
});

module.exports = FloatInput;

},{"./float.html":589,"gui/inputs/input":593}],591:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _g3wInput = require('./g3w-input.vue');

var _g3wInput2 = _interopRequireDefault(_g3wInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "g3w-form-inputs",
  props: ['state', 'addToValidate', 'changeInput'],
  components: {
    G3wInput: _g3wInput2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',{staticClass:"form-horizontal g3w-form"},[_c('div',{staticClass:"box-primary"},[_c('div',{staticClass:"box-body"},[_vm._l((_vm.state.fields),function(field){return [_c('g3w-input',{attrs:{"state":field,"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput},on:{"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput}})]})],2)])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-06bf1abf"

},{"./g3w-input.vue":592}],592:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Inputs = require('./inputs');
exports.default = {
  name: "g3w-input",
  props: {
    state: {
      required: true
    },
    addToValidate: {
      type: Function,
      required: true
    },
    changeInput: {
      type: Function,
      required: true
    }
  },
  components: _extends({}, Inputs),
  computed: {
    type: function type() {
      if (this.state.type !== 'child') return this.state.input.type ? this.state.input.type + '_input' : this.state.type + '_input';
    }
  },
  created: function created() {
    if (this.state.type !== 'child' && !this.state.input.options) this.state.input.options = {};
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.state.type !== 'child')?_c('div',[_c(_vm.type,{tag:"component",attrs:{"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput,"state":_vm.state},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate}}),_vm._v(" "),_c('span',{staticClass:"divider"})],1):_c('div',{staticClass:"skin-border-color field-child",staticStyle:{"border-top":"2px solid"}},[_c('h4',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.state.label))]),_vm._v(" "),_c('div',[_vm._v(" "+_vm._s(_vm.state.description)+" ")]),_vm._v(" "),_vm._l((_vm.state.fields),function(field){return _c('g3w-input',{key:field.name,attrs:{"state":field,"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate}})})],2)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-49bbef37"

},{"./inputs":594}],593:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InputServices = require('./services');

var _require = require('./baseinput/baseinput'),
    BaseInput = _require.BaseInput,
    BaseInputMixin = _require.BaseInputMixin;

var Input = {
  props: ['state'],
  mixins: [BaseInputMixin],
  components: {
    'baseinput': BaseInput
  },
  watch: {
    'notvalid': function notvalid(newValid) {
      if (newValid) this.service.setErrorMessage(this.state);
    }
  },
  created: function created() {
    var _this = this;

    this.service = new InputServices[this.state.input.type]({
      state: this.state
    });
    this.$watch(function () {
      return _applicationstate2.default.lng;
    }, function () {
      return _this.service.setErrorMessage(_this.state);
    });
    this.state.editable && this.state.validate.required && this.service.validate();
    this.$emit('addinput', this.state);
  }
};

module.exports = Input;

},{"./baseinput/baseinput":579,"./services":618,"core/applicationstate":402}],594:[function(require,module,exports){
var InputsComponents = {
  'text_input': require('./text/vue/text'),
  'textarea_input': require('./textarea/vue/textarea'),
  'integer_input': require('./integer/vue/integer'),
  'string_input': require('./text/vue/text'), //temporary
  'float_input': require('./float/vue/float'),
  'radio_input': require('./radio/vue/radio'),
  'check_input': require('./checkbox/vue/checkbox'),
  'range_input': require('./range/vue/range'),
  'datetimepicker_input': require('./datetimepicker/vue/datetimepicker'),
  'unique_input': require('./unique/vue/unique'),
  'select_input': require('./select/vue/select'),
  'media_input': require('./media/vue/media'),
  'select_autocomplete_input': require('./select/vue/select'),
  'picklayer_input': require('./picklayer/vue/picklayer'),
  'color_input': require('./color/vue/color'),
  'slider_input': require('./sliderrange/vue/sliderrange'),
  'lonlat_input': require('./lonlat/vue/lonlat')
};

module.exports = InputsComponents;

},{"./checkbox/vue/checkbox":582,"./color/vue/color":584,"./datetimepicker/vue/datetimepicker":587,"./float/vue/float":590,"./integer/vue/integer":597,"./lonlat/vue/lonlat":600,"./media/vue/media":603,"./picklayer/vue/picklayer":606,"./radio/vue/radio":609,"./range/vue/range":612,"./select/vue/select":615,"./sliderrange/vue/sliderrange":621,"./text/vue/text":623,"./textarea/vue/textarea":625,"./unique/vue/unique":628}],595:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Service = require('gui/inputs/service');

function IntegerService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(IntegerService, Service);

module.exports = IntegerService;

},{"core/utils/utils":485,"gui/inputs/service":617}],596:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <input\n    :placeholder=\"state.default\"\n    @change=\"change\"\n    @input=\"change\"\n    class=\"form-control\"\n    style=\"width:100%\"\n    v-disabled=\"!editable\"\n    :class=\"{'input-error-validation' : notvalid}\"\n    v-model=\"state.value\"\n    slot=\"body\"\n    type=\"number\">\n</baseinput>\n";

},{}],597:[function(require,module,exports){
var Input = require('gui/inputs/input');

var IntegerInput = Vue.extend({
  mixins: [Input],
  template: require('./integer.html')
});

module.exports = IntegerInput;

},{"./integer.html":596,"gui/inputs/input":593}],598:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');
var GUI = require('gui/gui');

function LonLatService() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.coordinatebutton;
  this.mapService = GUI.getComponent('map').getService();
  this.mapEpsg = this.mapService.getCrs();
  this.mapControlToggleEventHandler = function (evt) {
    if (evt.target.isToggled() && evt.target.isClickMap()) {
      _this.coordinatebutton.active && _this.toggleGetCoordinate();
    }
  };
  this.map = GUI.getComponent('map').getService().getMap();
  this.outputEpsg = this.state.epsg || this.mapEpsg;
  this.eventMapKey;
}

inherit(LonLatService, Service);

var proto = LonLatService.prototype;

proto.setCoordinateButtonReactiveObject = function (coordinatebutton) {
  this.coordinatebutton = coordinatebutton;
};

proto.validate = function () {
  if (this.state.values.lon < -180) this.state.values.lon = -180;else if (this.state.values.lon > 180) this.state.values.lon = 180;
  if (this.state.values.lat < -90) this.state.values.lon = -90;else if (this.state.values.lat > 90) this.state.values.lon = 90;
  this.state.validate.valid = !Number.isNaN(1 * this.state.values.lon);
};

proto.toggleGetCoordinate = function () {
  this.coordinatebutton.active = !this.coordinatebutton.active;
  this.coordinatebutton.active ? this.startToGetCoordinates() : this.stopToGetCoordinates();
};

proto.startToGetCoordinates = function () {
  var _this2 = this;

  this.mapService.deactiveMapControls();
  this.mapService.on('mapcontrol:toggled', this.mapControlToggleEventHandler);
  this.eventMapKey = this.map.on('click', function (evt) {
    evt.originalEvent.stopPropagation();
    evt.preventDefault();
    var coordinate = _this2.mapEpsg !== _this2.outputEpsg ? ol.proj.transform(evt.coordinate, _this2.mapEpsg, _this2.outputEpsg) : evt.coordinate;
    _this2.state.value = [coordinate];

    var _coordinate = _slicedToArray(coordinate, 2),
        lon = _coordinate[0],
        lat = _coordinate[1];

    _this2.state.values.lon = lon;
    _this2.state.values.lat = lat;
  });
};

proto.stopToGetCoordinates = function () {
  ol.Observable.unByKey(this.eventMapKey);
  this.mapService.off('mapcontrol:toggled', this.mapControlToggleEventHandler);
};

proto.clear = function () {
  this.stopToGetCoordinates();
};

module.exports = LonLatService;

},{"core/utils/utils":485,"gui/gui":575,"gui/inputs/service":617}],599:[function(require,module,exports){
module.exports = "<div style=\"position: relative\">\n  <div style=\"display: flex;justify-content: flex-end;height: 35px;margin-right: 12px; margin-bottom: 5px\">\n    <button ref=\"g3w-input-lat-lon\" @click.prevent.stop=\"toggleGetCoordinate\" :style=\"{border: coordinatebutton.active ? '2px solid' : 0}\"\n      data-placement=\"left\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.form.inputs.tooltips.lonlat'\"\n      class=\"action skin-tooltip-left skin-color skin-border-color\"\n      style=\"border-radius: 5px; font-weight: bold; font-size: 20px; cursor: pointer\"\n      :class=\"g3wtemplate.font['crosshairs']\">\n    </button>\n  </div>\n\n  <baseinput :state=\"state\">\n    <label slot=\"label\" :for=\"lonId\" class=\"col-sm-4 control-label\">{{state.labels.lon}}\n      <span v-if=\"state.validate && state.validate.required\">*</span>\n    </label>\n    <div slot=\"body\">\n      <input\n       :id=\"lonId\"\n       @change=\"changeLonLat\"\n       :class=\"{'input-error-validation' : notvalid}\"\n       class=\"form-control\"\n       style=\"width:100%; margin-bottom: 5px;\"\n       v-disabled=\"!editable\"\n       v-model=\"state.values.lon\"\n       type=\"number\"\n       min=\"-180\"\n       max=\"180\"\n       placeholder=\"Lon\">\n    </div>\n  </baseinput>\n  <baseinput :state=\"state\">\n    <label slot=\"label\" :for=\"latId\" class=\"col-sm-4 control-label\">{{ state.labels.lat }}\n      <span v-if=\"state.validate && state.validate.required\">*</span>\n    </label>\n    <div slot=\"body\" >\n      <input\n        :id=\"latId\"\n        @change=\"changeLonLat\"\n        class=\"form-control\"\n        style=\"width:100%; margin-bottom: 5px;\"\n        v-disabled=\"!editable\"\n        v-model=\"state.values.lat\"\n        type=\"number\"\n        :class=\"{'input-error-validation' : notvalid}\"\n        min=\"-90\"\n        max=\"90\"\n        placeholder=\"Lon\">\n    </div>\n  </baseinput>\n\n</div>\n";

},{}],600:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    getUniqueDomId = _require.getUniqueDomId;

var Input = require('gui/inputs/input');

var LatLontInput = Vue.extend({
  mixins: [Input],
  template: require('./lonlat.html'),
  data: function data() {
    return {
      lonId: getUniqueDomId(),
      latId: getUniqueDomId(),
      coordinatebutton: {
        active: false
      }
    };
  },

  computed: {
    getCoordinateActive: function getCoordinateActive() {
      return this.service.state.getCoordinateActive;
    }
  },
  methods: {
    toggleGetCoordinate: function toggleGetCoordinate() {
      this.service.toggleGetCoordinate();
    },
    changeLonLat: function changeLonLat() {
      this.change();
      this.setValue();
    },
    setValue: function setValue() {
      this.state.value = [[1 * this.state.values.lon, 1 * this.state.values.lat]];
    }
  },
  created: function created() {
    this.state.values = this.state.values || { lon: 0, lat: 0 };
    this.setValue();
    this.service.setCoordinateButtonReactiveObject(this.coordinatebutton);
  },
  mounted: function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _this = this;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.$nextTick();

            case 2:
              this.$nextTick(function () {
                $(_this.$refs['g3w-input-lat-lon']).tooltip({
                  trigger: 'hover'
                });
              });

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),
  destroyed: function destroyed() {
    this.service.clear();
  }
});

module.exports = LatLontInput;

},{"./lonlat.html":599,"core/utils/utils":485,"gui/inputs/input":593}],601:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Service = require('gui/inputs/service');

function MediaService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(MediaService, Service);

module.exports = MediaService;

},{"core/utils/utils":485,"gui/inputs/service":617}],602:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <div slot=\"body\">\n    <div class=\"g3w_input_button skin-border-color\" @click=\"onClick\" style=\"border-style: solid; border-width: 2px; border-radius: 4px; width:100%; cursor: pointer; text-align: center;\">\n      <i :class=\"g3wtemplate.getFontClass('file-upload')\" class=\"fa-2x skin-color\" style=\"padding: 5px;\">\n        <input\n          :id=\"mediaid\"\n          style=\"display:none\"\n          :name=\"state.name\"\n          :data-url=\"state.input.options.uploadurl\"\n          v-disabled=\"!editable\"\n          :class=\"{'input-error-validation' : notvalid}\"\n          type=\"file\">\n      </i>\n    </div>\n    <bar-loader :loading=\"loading\"></bar-loader>\n    <g3w-media :state=\"data\">\n      <div class=\"clearmedia\" @click=\"clearMedia()\">\n        <i :class=\"g3wtemplate.font['trash-o']\" class=\"g3w-icon\"></i>\n      </div>\n    </g3w-media>\n  </div>\n</baseinput>\n";

},{}],603:[function(require,module,exports){
var InputMixins = require('gui/inputs/input');
var getUniqueDomId = require('core/utils/utils').getUniqueDomId;
var t = require('core/i18n/i18n.service').t;
var Service = require('../service');
var MediaField = require('gui/fields/fields').media_field;
var GUI = require('gui/gui');

var MediaInput = Vue.extend({
  mixins: [InputMixins],
  components: {
    'g3w-media': MediaField
  },
  data: function data() {
    return {
      data: {
        value: null,
        mime_type: null
      },
      mediaid: 'media_' + getUniqueDomId(),
      loading: false
    };
  },
  template: require('./media.html'),
  methods: {
    onClick: function onClick(e) {
      document.getElementById(this.mediaid).click();
    },
    createImage: function createImage(file, field) {
      var reader = new FileReader();
      reader.onload = function (e) {
        field.value = e.target.result;
      };
      reader.readAsDataURL(file);
    },
    checkFileSrc: function checkFileSrc(value) {
      if (_.isNil(value)) {
        value = '';
      }
      return value;
    },
    clearMedia: function clearMedia() {
      this.data.value = this.data.mime_type = this.state.value = null;
    }
  },
  created: function created() {
    if (this.state.value) {
      this.data.value = this.state.value.value;
      this.data.mime_type = this.state.value.mime_type;
    }
  },
  mounted: function mounted() {
    var _this = this;

    var fieldName = this.state.name;
    var formData = {
      name: fieldName,
      csrfmiddlewaretoken: this.$cookie.get('csrftoken')
    };
    this.$nextTick(function () {
      $('#' + _this.mediaid).fileupload({
        dataType: 'json',
        formData: formData,
        start: function start() {
          _this.loading = true;
        },
        done: function done(e, data) {
          var response = data.result[fieldName];
          if (response) {
            _this.data.value = response.value;
            _this.data.mime_type = response.mime_type;
            _this.state.value = _this.data;
            _this.change();
          }
        },
        fail: function fail() {
          GUI.notify.error(t("info.server_error"));
        },
        always: function always() {
          _this.loading = false;
        }
      });
    });
  },
  beforeDestroy: function beforeDestroy() {
    $('#' + this.mediaid).fileupload('destroy');
  }
});

module.exports = MediaInput;

},{"../service":601,"./media.html":602,"core/i18n/i18n.service":418,"core/utils/utils":485,"gui/fields/fields":557,"gui/gui":575,"gui/inputs/input":593}],604:[function(require,module,exports){
var PickFeatureInteraction = require('g3w-ol/src/interactions/pickfeatureinteraction');
var PickCoordinatesInteraction = require('g3w-ol/src/interactions/pickcoordinatesinteraction');
var MapCatalogLayersRegistry = require('core/map/maplayersstoresregistry');

var _require = require('core/utils/geo'),
    getQueryLayersPromisesByCoordinates = _require.getQueryLayersPromisesByCoordinates;

var GUI = require('gui/gui');

function PickLayerService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.pick_type = options.pick_type || 'wms';
  this.ispicked = false;
  this.field = options.field || options.value;
  this.layerId = options.layer_id;
  this.contentPerc;
  this.mapService = GUI.getComponent('map').getService();
  this.interaction = this.pick_type === 'map' ? new PickFeatureInteraction({
    layers: [this.mapService.getLayerById(this.layerId)]
  }) : new PickCoordinatesInteraction();
}

var proto = PickLayerService.prototype;

proto.isPicked = function () {
  return this.ispicked;
};

//bind interrupt event
proto.escKeyUpHandler = function (_ref) {
  var keyCode = _ref.keyCode,
      owner = _ref.data.owner;

  keyCode === 27 && owner.unpick();
};

proto.unbindEscKeyUp = function () {
  $(document).unbind('keyup', this.escKeyUpHandler);
};

proto.bindEscKeyUp = function () {
  $(document).on('keyup', { owner: this }, this.escKeyUpHandler);
};

proto.pick = function () {
  var _this = this;

  return new Promise(function (resolve, reject) {
    _this.bindEscKeyUp();
    var value = void 0;
    _this.ispicked = true;
    var afterPick = function afterPick(feature) {
      if (feature) {
        value = feature.getProperties()[_this.field];
        resolve(value);
      } else reject();
      _this.ispicked = false;
      _this.unpick();
    };
    _this.contentPerc = GUI.getContentPercentage() === 100 && GUI.hideContent(true);
    GUI.setModal(false);
    _this.mapService.addInteraction(_this.interaction);
    _this.interaction.once('picked', function (event) {
      if (_this.pick_type === 'map') {
        var feature = event.feature;
        afterPick(feature);
      } else if (_this.pick_type === 'wms') {
        var layer = MapCatalogLayersRegistry.getLayerById(_this.layerId);
        if (layer) {
          getQueryLayersPromisesByCoordinates([layer], {
            map: _this.mapService.getMap(),
            feature_count: 1,
            coordinates: event.coordinate
          }).then(function (response) {
            var _response$0$data = response[0].data,
                data = _response$0$data === undefined ? [] : _response$0$data;

            var feature = data.length && data[0].features[0] || null;
            afterPick(feature);
          });
        }
      }
    });
  });
};

proto.unpick = function () {
  this.mapService.removeInteraction(this.interaction);
  GUI.setModal(true);
  this.contentPerc && GUI.hideContent(false, this.contentPerc);
  this.unbindEscKeyUp();
  this.ispicked = false;
};

proto.clear = function () {
  this.isPicked() && this.unpick();
  this.mapService = this.interaction = this.field = null;
};

module.exports = PickLayerService;

},{"core/map/maplayersstoresregistry":466,"core/utils/geo":484,"g3w-ol/src/interactions/pickcoordinatesinteraction":526,"g3w-ol/src/interactions/pickfeatureinteraction":527,"gui/gui":575}],605:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <div slot=\"body\">\n    <span style=\"left: 0; top: 7px; position: absolute\"  :class=\"g3wtemplate.font['crosshairs']\" class=\"skin-color\"></span>\n    <input\n      @input=\"change\"\n      @click=\"pickLayer\"\n      @blur=\"unpick\"\n      style=\"width: 100%;\"\n      :style=\"{cursor: editable ? 'pointer': null}\"\n      class=\"form-control\"\n      readonly=\"readonly\"\n      v-disabled=\"!editable\"\n      :class=\"{'input-error-validation' : notvalid}\"\n      v-model=\"state.value\">\n  </div>\n</baseinput>\n";

},{}],606:[function(require,module,exports){
var Input = require('gui/inputs/input');
var Service = require('../service');

var PickLayerInput = Vue.extend({
  mixins: [Input],
  template: require('./picklayer.html'),
  methods: {
    pickLayer: function pickLayer() {
      var _this = this;

      this.pickservice.pick().then(function (value) {
        return _this.state.value = value;
      }).catch(function () {});
    },
    unpick: function unpick() {
      var _this2 = this;

      setTimeout(function () {
        return !_this2.pickservice.isPicked() && _this2.pickservice.unpick();
      }, 200);
    }
  },
  created: function created() {
    this.pickservice = new Service(this.state.input.options);
  },
  beforeDestroy: function beforeDestroy() {
    this.pickservice.clear();
    this.pickservice = null;
  }
});

module.exports = PickLayerInput;

},{"../service":604,"./picklayer.html":605,"gui/inputs/input":593}],607:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Service = require('gui/inputs/service');

function RadioService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(RadioService, Service);

module.exports = RadioService;

},{"core/utils/utils":485,"gui/inputs/service":617}],608:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <div slot=\"body\">\n    <template v-for=\"(value, index) in state.input.options.values\" :key=\"value.key\">\n      <input\n        :id=\"ids[index]\"\n        :name=\"name\"\n        :value=\"value.value\"\n        style=\"width:100%\"\n        v-disabled=\"!editable\"\n        :class=\"{'input-error-validation' : notvalid}\"\n        class=\"magic-radio\"\n        v-model=\"radio_value\"\n        type=\"radio\">\n      <label :for=\"ids[index]\">{{ value.key }}</label>\n    </template>\n  </div>\n</baseinput>\n";

},{}],609:[function(require,module,exports){
var Input = require('gui/inputs/input');
var getUniqueDomId = require('core/utils/utils').getUniqueDomId;

var RadioInput = Vue.extend({
  mixins: [Input],
  data: function data() {
    return {
      ids: [getUniqueDomId(), getUniqueDomId()],
      name: 'name_' + getUniqueDomId(),
      radio_value: this.state.value
    };
  },
  watch: {
    'radio_value': function radio_value() {
      this.state.value = this.radio_value;
      this.change();
    }
  },
  template: require('./radio.html')
});

module.exports = RadioInput;

},{"./radio.html":608,"core/utils/utils":485,"gui/inputs/input":593}],610:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Service = require('gui/inputs/service');
var ValidatorClass = require('core/validators/inputs/range');

function RangeService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$state$input$ = options.state.input.options.values[0],
      min = _options$state$input$.min,
      max = _options$state$input$.max;

  options.state.info = '[MIN: ' + min + ' - MAX: ' + max + ']';
  base(this, options);
  var validator = new ValidatorClass({
    min: 1 * min,
    max: 1 * max
  });
  this.setValidator(validator);
}

inherit(RangeService, Service);

var proto = Service.prototype;

proto.isValueInRange = function (value, min, max) {
  return value <= max && value >= min;
};

module.exports = RangeService;

},{"core/utils/utils":485,"core/validators/inputs/range":491,"gui/inputs/service":617}],611:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n    <input\n      slot=\"body\"\n      @keydown.69.prevent=\"\"\n      @keydown.13.stop=\"\"\n      @change=\"checkValue\"\n      @blur=\"checkValue\"\n      style=\"width:100%; padding-right: 5px;\"\n      class=\"form-control\"\n      v-disabled=\"!editable\"\n      :class=\"{'input-error-validation' : notvalid}\"\n      v-model=\"state.value\"\n      type=\"number\"\n      :step=\"step\">\n</baseinput>\n";

},{}],612:[function(require,module,exports){
var Input = require('gui/inputs/input');

var RangeInput = Vue.extend({
  mixins: [Input],
  template: require('./range.html'),
  data: function data() {
    var options = this.state.input.options.values[0];
    var min = 1 * options.min;
    var max = 1 * options.max;
    var step = 1 * options.Step;
    return {
      max: max,
      min: min,
      step: step
    };
  },

  methods: {
    checkValue: function checkValue() {
      var valid = this.state.validate.required || !_.isEmpty(_.trim(this.state.value)) ? this.service.getValidator().validate(this.state.value) : true;
      this.state.validate.valid = valid;
      this.change();
    }
  }
});

module.exports = RangeInput;

},{"./range.html":611,"gui/inputs/input":593}],613:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var Service = require('gui/inputs/service');

function SelectService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.layer = null;
}

inherit(SelectService, Service);

var proto = SelectService.prototype;

proto._getLayerById = function (layer_id) {
  return CatalogLayersStoresRegistry.getLayerById(layer_id);
};

proto.addValue = function (value) {
  this.state.input.options.values.push(value);
};

proto.getKeyByValue = function () {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      search = _ref.search;

  var options = this.state.input.options;
  var value = options.value,
      key = options.key;

  this.getData({
    key: value,
    value: key,
    search: search
  }).then(function (arrayValues) {
    var _arrayValues = _slicedToArray(arrayValues, 1),
        _value = _arrayValues[0];

    var key = _value.$value,
        value = _value.text;

    _this.addValue({
      key: key,
      value: value
    });
  }).catch(function (err) {
    console.log(err);
  });
};

proto.getData = function () {
  var _this2 = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$layer_id = _ref2.layer_id,
      layer_id = _ref2$layer_id === undefined ? this.state.input.options.layer_id : _ref2$layer_id,
      _ref2$key = _ref2.key,
      key = _ref2$key === undefined ? this.state.input.options.key : _ref2$key,
      _ref2$value = _ref2.value,
      value = _ref2$value === undefined ? this.state.input.options.value : _ref2$value,
      search = _ref2.search;

  var search_value = (key + '|' + search).trim();
  return new Promise(function (resolve, reject) {
    if (!_this2._layer) {
      _this2._layer = _this2._getLayerById(layer_id);
    }
    _this2._layer.getDataTable({
      suggest: search_value,
      ordering: key
    }).then(function (response) {
      var values = [];
      var features = response.features;
      for (var i = 0; i < features.length; i++) {
        values.push({
          text: features[i].properties[key],
          id: i,
          $value: features[i].properties[value]
        });
      }
      resolve(values);
    }).fail(function (err) {
      reject(err);
    });
  });
};

module.exports = SelectService;

},{"core/catalog/cataloglayersstoresregistry":403,"core/utils/utils":485,"gui/inputs/service":617}],614:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <div style=\"position:relative; width: 100%\" slot=\"loading\" v-if=\"loadingState === 'loading'\">\n    <bar-loader loading=\"true\"></bar-loader>\n  </div>\n  <span slot=\"label-action\" data-placement=\"top\" v-t-tooltip=\"'sdk.form.inputs.tooltips.picklayer'\"\n    @click=\"pickLayerValue\" v-if=\"showPickLayer\" style=\"cursor: pointer; margin-left: 5px; position:relative; top: 2px; font-size: 1.2em\"\n    :class=\"g3wtemplate.font['crosshairs']\" class=\"skin-color\">\n  </span>\n  <div slot=\"body\">\n    <select ref=\"select\" style=\"width:100%;\" v-disabled=\"!editable || loadingState === 'loading' || loadingState === 'error'\" class=\"form-control\">\n      <option v-if=\"showNullOption\"></option>\n      <option :value=\"getValue(value.value)\" v-for=\"value in state.input.options.values\">{{ value.key }}</option>\n    </select>\n  </div>\n  <p v-if=\"loadingState === 'error'\" class=\"error-input-message\" slot=\"message\" v-t=\"'server_error'\"></p>\n</baseinput>\n";

},{}],615:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var PickLayerInputService = require('gui/inputs/picklayer/service');
var MapLayersStoreRegistry = require('core/map/maplayersstoresregistry');
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var Layer = require('core/layers/layer');
var Input = require('gui/inputs/input');
var selectMixin = require('./selectmixin');

var _require = require('gui/vue/vue.mixins'),
    select2Mixin = _require.select2Mixin;

var GUI = require('gui/gui');

var SelectInput = Vue.extend({
  mixins: [Input, selectMixin, select2Mixin],
  data: function data() {
    return {
      showPickLayer: false
    };
  },
  template: require('./select.html'),
  computed: {
    showNullOption: function showNullOption() {
      return this.state.nullOption === undefined || this.state.nullOption === true;
    }
  },
  watch: {
    'state.input.options.values': function stateInputOptionsValues(values) {
      if (!this.autocomplete && !this.state.value && values.length) this.changeSelect(values[0].value);
    }
  },
  methods: {
    pickLayerValue: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var value;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this.pickLayerInputService.pick();

              case 3:
                value = _context.sent;

                this.select2.val(value).trigger('change');
                this.changeSelect(value);
                GUI.showUserMessage({
                  type: 'success',
                  autoclose: true
                });
                _context.next = 12;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context['catch'](0);

                GUI.showUserMessage({
                  type: "warning",
                  message: 'sdk.form.inputs.messages.errors.picklayer',
                  autoclose: true
                });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 9]]);
      }));

      function pickLayerValue() {
        return _ref.apply(this, arguments);
      }

      return pickLayerValue;
    }()
  },
  created: function created() {
    this.open = false;
    if (this.state.input.type === 'select_autocomplete') {
      var dependencyLayerId = this.state.input.options.layer_id;
      try {
        var dependencyLayer = MapLayersStoreRegistry.getLayerById(dependencyLayerId).getEditingLayer() || CatalogLayersStoresRegistry.getLayerById(dependencyLayerId);
        this.showPickLayer = dependencyLayer ? dependencyLayer.getType() !== Layer.LayerTypes.TABLE : false;
        var options = _extends({}, this.state.input.options, {
          pick_type: dependencyLayer.isStarted && dependencyLayer.isStarted() && 'map' || null
        });
        this.pickLayerInputService = this.showPickLayer && new PickLayerInputService(options);
      } catch (err) {}
    }
    this.autocomplete && this.state.value && this.service.getKeyByValue({
      search: this.state.value
    });
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var selectElement, language, dropdownParent;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.$nextTick();

            case 2:
              selectElement = $(this.$refs.select);
              language = this.getLanguage();
              dropdownParent = this.state.dropdownParent === undefined && $('#g3w-view-content');

              if (this.autocomplete) {
                this.select2 = selectElement.select2({
                  minimumInputLength: 1,
                  dropdownParent: dropdownParent,
                  language: language,
                  ajax: {
                    delay: 250,
                    transport: function transport(params, success, failure) {
                      var search = params.data.term;
                      // hide previous result if present
                      $('.select2-results__option.loading-results').siblings().hide();
                      _this.resetValues();
                      _this.service.getData({
                        search: search
                      }).then(function (values) {
                        return success(values);
                      }).catch(function (err) {
                        return failure(err);
                      });
                    },
                    processResults: function processResults(data, params) {
                      params.page = params.page || 1;
                      return {
                        results: data,
                        pagination: {
                          more: false
                        }
                      };
                    } }
                });
              } else this.select2 = selectElement.select2({
                language: language,
                dropdownParent: dropdownParent,
                minimumResultsForSearch: this.isMobile() ? -1 : null
              });
              ///register events
              this.state.value && this.select2.val(this.state.value).trigger('change');
              this.select2.on('select2:select', function (event) {
                var value = event.params.data.$value ? event.params.data.$value : event.params.data.id;
                _this.changeSelect(value);
              });

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    if (this.pickLayerInputService) {
      this.pickLayerInputService.clear();
      this.pickLayerInputService = null;
    }
  }
});

module.exports = SelectInput;

},{"./select.html":614,"./selectmixin":616,"core/catalog/cataloglayersstoresregistry":403,"core/layers/layer":443,"core/map/maplayersstoresregistry":466,"gui/gui":575,"gui/inputs/input":593,"gui/inputs/picklayer/service":604,"gui/vue/vue.mixins":731}],616:[function(require,module,exports){
var getAppLanguage = require('core/i18n/i18n.service').getAppLanguage;
var selectMixin = {
  methods: {
    getLanguage: function getLanguage() {
      return getAppLanguage();
    },

    changeSelect: function changeSelect(value) {
      this.state.value = value === 'null' ? null : value;
      this.change();
    },
    getValue: function getValue(value) {
      return value === null ? 'null' : value;
    },
    resetValues: function resetValues() {
      this.state.input.options.values.splice(0);
    }
  },
  computed: {
    autocomplete: function autocomplete() {
      return this.state.input.type === 'select_autocomplete' && this.state.input.options.usecompleter;
    },
    loadingState: function loadingState() {
      return this.state.input.options.loading ? this.state.input.options.loading.state : null;
    }
  },
  watch: {
    notvalid: function notvalid(value) {
      var _this = this;

      this.$nextTick(function () {
        if (_this.select2) value ? _this.select2.data('select2').$container.addClass("input-error-validation") : _this.select2.data('select2').$container.removeClass("input-error-validation");
      });
    }
  }
};

module.exports = selectMixin;

},{"core/i18n/i18n.service":418}],617:[function(require,module,exports){
var Validators = require('core/validators/inputs/validators');
var t = require('core/i18n/i18n.service').t;

function Service() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // set state of input
  this.state = options.state || {};
  // type of input
  this.state.validate.required && this.setValue(this.state.value);
  this.setEmpty(this.state.value);
  var type = this.state.type;
  var validatorOptions = options.validatorOptions || this.state.input.options || {};
  // useful for the validator to validate input
  this._validator = Validators.get(type, validatorOptions);
  this.setErrorMessage(options.state);
}

var proto = Service.prototype;

proto.getState = function () {
  return this.state;
};

proto.getValue = function () {
  return this.state.value;
};

proto.setValue = function (value) {
  if (value === null || value === undefined) {
    if (Array.isArray(this.state.input.options)) {
      if (this.state.input.options[0].default) this.state.value = this.state.input.options[0].default;else if (Array.isArray(this.state.input.options.values)) {
        if (this.state.input.options.values.length) {
          this.state.value = this.state.input.options.values[0] && this.state.input.options.values[0].value || this.state.input.options.values[0];
        }
      }
    } else this.state.value = this.state.input.options.default;
  }
};

proto.addValueToValues = function (value) {
  this.state.input.options.values.unshift(value);
};

proto._getValidatorType = function () {
  return this.state.type;
};

proto.setState = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state = _.isObject(state) ? state : {};
};

// return validator
proto.getValidator = function () {
  return this._validator;
};

proto.setValidator = function (validator) {
  this._validator = validator;
};

proto.setEmpty = function () {
  this.state.validate.empty = !(Array.isArray(this.state.value) && this.state.value.length || !_.isEmpty(_.trim(this.state.value)));
};

// general method to check the value of the state is valid or not
proto.validate = function () {
  if (this.state.validate.empty) {
    this.state.validate.empty = true;
    this.state.value = null;
    this.state.validate.unique = true;
    // check if require or check validation
    this.state.validate.valid = this.state.validate.required ? false : this._validator.validate(this.state.value);
  } else {
    if (this.state.input.type === 'integer' || this.state.input.type === 'float') {
      if (+this.state.value < 0) {
        this.state.value = null;
        this.state.validate.empty = true;
        this.state.validate.valid = !this.state.validate.required;
      } else this.state.validate.valid = this._validator.validate(this.state.value);
    }
    if (this.state.validate.exclude_values && this.state.validate.exclude_values.length) {
      if (this.state.validate.exclude_values.indexOf(this.state.value) !== -1) {
        this.state.validate.valid = false;
        this.state.validate.unique = false;
      } else this.state.validate.unique = true;
    } else this.state.validate.valid = this._validator.validate(this.state.value);
  }
  return this.state.validate.valid;
};

proto.setErrorMessage = function (input) {
  var message = void 0;
  if (input.validate.mutually && !input.validate.mutually_valid) this.state.validate.message = t("sdk.form.inputs.input_validation_mutually_exclusive") + ' ( ' + input.validate.mutually.join(',') + ' )';else if (input.validate.max_field) this.state.validate.message = t("sdk.form.inputs.input_validation_max_field") + ' (' + input.validate.max_field + ')';else if (input.validate.min_field) this.state.validate.message = t("sdk.form.inputs.input_validation_min_field") + ' (' + input.validate.min_field + ')';else if (!input.validate.unique && input.validate.exclude_values) this.state.validate.message = '' + t("sdk.form.inputs.input_validation_exclude_values");else if (input.validate.required) {
    message = t("sdk.form.inputs.input_validation_error") + ' ( ' + t("sdk.form.inputs." + input.type) + ' )';
    if (this.state.info) {
      message = message + '\n                 <div>\n                  <b>' + this.state.info + '</b>\n                 </div>         \n      ';
    }
    this.state.validate.message = this.state.info || message;
  } else this.state.validate.message = this.state.info;
};

module.exports = Service;

},{"core/i18n/i18n.service":418,"core/validators/inputs/validators":493}],618:[function(require,module,exports){
var InputsServices = {
  'text': require('./service'),
  'textarea': require('./service'),
  'integer': require('./integer/service'),
  'string': require('./service'),
  'float': require('./float/service'),
  'radio': require('./radio/service'),
  'check': require('./checkbox/service'),
  'range': require('./range/service'),
  'datetimepicker': require('./datetimepicker/service'),
  'unique': require('./unique/service'),
  'select': require('./select/service'),
  'media': require('./media/service'),
  'select_autocomplete': require('./select/service'),
  'picklayer': require('./service'),
  'color': require('./service'),
  'slider': require('./sliderrange/service'),
  'lonlat': require('./lonlat/service')
};

module.exports = InputsServices;

},{"./checkbox/service":580,"./datetimepicker/service":585,"./float/service":588,"./integer/service":595,"./lonlat/service":598,"./media/service":601,"./radio/service":607,"./range/service":610,"./select/service":613,"./service":617,"./sliderrange/service":619,"./unique/service":626}],619:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');
var ValidatorClass = require('core/validators/inputs/range');

function SliderRangeService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var state = options.state;

  options.state.info = '[MIN: ' + state.input.options.min + ' - MAX: ' + state.input.options.max + ']';
  base(this, options);
  var validator = new ValidatorClass({
    min: 1 * state.input.options.min,
    max: 1 * state.input.options.max
  });
  this.setValidator(validator);
  this.validate = function () {
    this.state.value = 1 * this.state.value;
    this.state.validate.valid = this.state.value >= this.state.input.options.min || this.state.value <= this.state.input.options.max;
  };
}

inherit(SliderRangeService, Service);

var proto = SliderRangeService.prototype;

proto.changeInfoMessage = function () {
  this.state.info = '[MIN: ' + this.state.input.options.min + ' - MAX: ' + this.state.input.options.max + ']';
};

module.exports = SliderRangeService;

},{"core/utils/utils":485,"core/validators/inputs/range":491,"gui/inputs/service":617}],620:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n    <div slot=\"body\" >\n        <span style=\"font-weight: bold\">{{state.value}}</span>\n        <input slot=\"body\"\n            @change=\"change\"\n            style=\"width:100%; padding-right: 5px;\"\n            v-disabled=\"!editable\"\n            :class=\"{'input-error-validation' : notvalid}\"\n            v-model=\"state.value\"\n            :min=\"state.input.options.min\"\n            :max=\"state.input.options.max\"\n            type=\"range\"\n            :step=\"state.input.options.step\">\n    </div>\n</baseinput>\n";

},{}],621:[function(require,module,exports){
var Input = require('gui/inputs/input');

var RangeInput = Vue.extend({
  mixins: [Input],
  template: require('./sliderrange.html'),
  watch: {
    'state.input.options.min': function stateInputOptionsMin() {
      this.service.changeInfoMessage();
    },
    'state.input.options.max': function stateInputOptionsMax() {
      this.service.changeInfoMessage();
    }
  }
});

module.exports = RangeInput;

},{"./sliderrange.html":620,"gui/inputs/input":593}],622:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <input\n    :placeholder=\"state.default\"\n    slot=\"body\"\n    @keyup=\"change()\"\n    v-disabled=\"!editable\"\n    :field=\"state.name\"\n    class=\"form-control\"\n    v-model=\"state.value\"\n    :class=\"{'input-error-validation' : notvalid}\"\n    :id=\"state.name\">\n</baseinput>\n\n";

},{}],623:[function(require,module,exports){
var Input = require('gui/inputs/input');

var TextInput = Vue.extend({
  template: require('./text.html'),
  mixins: [Input]
});

module.exports = TextInput;

},{"./text.html":622,"gui/inputs/input":593}],624:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <textarea\n    :placeholder=\"state.default\"\n    @input=\"change\"\n    @change=\"change\"\n    slot=\"body\"\n    style=\"max-width: 100%; min-width: 100%\"\n    v-disabled=\"!editable\"\n    :class=\"{'input-error-validation' : notvalid}\"\n    v-model=\"state.value\"></textarea>\n</baseinput>\n";

},{}],625:[function(require,module,exports){
var Input = require('gui/inputs/input');

var TextAreaInput = Vue.extend({
  mixins: [Input],
  template: require('./textarea.html')
});

module.exports = TextAreaInput;

},{"./textarea.html":624,"gui/inputs/input":593}],626:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Service = require('gui/inputs/service');

function UniqueService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(UniqueService, Service);

module.exports = UniqueService;

},{"core/utils/utils":485,"gui/inputs/service":617}],627:[function(require,module,exports){
module.exports = "<baseinput :state=\"state\">\n  <select\n    :id=\"id\"\n    slot=\"body\"\n    style=\"width:100%\"\n    v-disabled=\"!editable\"\n    class=\"form-control\">\n    <option value=\"null\"></option>\n    <option :value=\"getValue(value)\" v-for=\"value in state.input.options.values\" :key=\"value\">{{ getValue(value) }}</option>\n  </select>\n</baseinput>\n";

},{}],628:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Input = require('gui/inputs/input');
var selectMixin = require('gui/inputs/select/vue/selectmixin');
var getUniqueDomId = require('core/utils/utils').getUniqueDomId;
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./unique.html'));

var UniqueInput = Vue.extend(_extends({
  mixins: [Input, selectMixin]
}, compiledTemplate, {
  data: function data() {
    var id = 'unique_' + getUniqueDomId();
    return { id: id };
  },
  watch: {
    'state.input.options.values': function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(values) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.state.value = this.state.value ? this.state.value : null;
                this.state.value !== null && values.indexOf(this.state.value) === -1 && this.service.addValueToValues(this.state.value);
                _context.next = 4;
                return this.$nextTick();

              case 4:
                this.state.value && this.select2.val(this.state.value).trigger('change');

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function stateInputOptionsValues(_x) {
        return _ref.apply(this, arguments);
      }

      return stateInputOptionsValues;
    }()
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.$nextTick();

            case 2:
              if (this.state.input.options.editable) {
                this.select2 = $('#' + this.id).select2({
                  dropdownParent: $('#g3w-view-content'),
                  tags: true,
                  language: this.getLanguage()
                });
                this.select2.val(this.state.value).trigger('change');
                this.select2.on('select2:select', function (event) {
                  var value = event.params.data.$value ? event.params.data.$value : event.params.data.id;
                  _this.changeSelect(value);
                });
              }

            case 3:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
}));

module.exports = UniqueInput;

},{"./unique.html":627,"core/utils/utils":485,"gui/inputs/input":593,"gui/inputs/select/vue/selectmixin":616,"gui/vue/utils":727}],629:[function(require,module,exports){
var WidgetMixins = {
  data: function data() {
    return {
      changed: false
    };
  },

  methods: {
    widgetChanged: function widgetChanged() {
      this.changed = true;
      this.change();
    },
    stateValueChanged: function stateValueChanged(value) {
      console.log('need to be implemented by widget'); // method to overwrite
    }
  },
  watch: {
    'state.value': function stateValue(value) {
      this.changed ? this.changed = false : this.stateValueChanged(value);
    }
  }
};

module.exports = WidgetMixins;

},{}],630:[function(require,module,exports){
var ResetControl = require('g3w-ol/src/controls/resetcontrol');
var QueryControl = require('g3w-ol/src/controls/querycontrol');
var ZoomBoxControl = require('g3w-ol/src/controls/zoomboxcontrol');
var QueryBBoxControl = require('g3w-ol/src/controls/querybboxcontrol');
var QueryByPolygonControl = require('g3w-ol/src/controls/querybypolygoncontrol');
var GeolocationControl = require('g3w-ol/src/controls/geolocationcontrol');
var StreetViewControl = require('g3w-ol/src/controls/streetviewcontrol');
var AddLayersControl = require('g3w-ol/src/controls/addlayers');
var LengthControl = require('g3w-ol/src/controls/lengthcontrol');
var AreaControl = require('g3w-ol/src/controls/areacontrol');
var OLControl = require('g3w-ol/src/controls/olcontrol');
var NominatimControl = require('g3w-ol/src/controls/nominatimcontrol');
var MousePositionControl = require('g3w-ol/src/controls/mousepositioncontrol');
var ScaleControl = require('g3w-ol/src/controls/scalecontrol');
var OnClikControl = require('g3w-ol/src/controls/onclickcontrol');
var ScreenshotControl = require('g3w-ol/src/controls/screenshotcontrol');

var ControlsFactory = {
  create: function create() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var control = void 0;
    var ControlClass = ControlsFactory.CONTROLS[options.type];
    if (ControlClass) control = new ControlClass(options);
    return control;
  }
};

ControlsFactory.CONTROLS = {
  'reset': ResetControl,
  'zoombox': ZoomBoxControl,
  'zoomtoextent': OLControl,
  'query': QueryControl,
  'querybbox': QueryBBoxControl,
  'querybypolygon': QueryByPolygonControl,
  'geolocation': GeolocationControl,
  'streetview': StreetViewControl,
  'zoom': OLControl,
  'scaleline': OLControl,
  'overview': OLControl,
  'nominatim': NominatimControl,
  'addlayers': AddLayersControl,
  'length': LengthControl,
  'area': AreaControl,
  'mouseposition': MousePositionControl,
  'scale': ScaleControl,
  'onclick': OnClikControl,
  'screenshot': ScreenshotControl
};

module.exports = ControlsFactory;

},{"g3w-ol/src/controls/addlayers":501,"g3w-ol/src/controls/areacontrol":502,"g3w-ol/src/controls/geolocationcontrol":504,"g3w-ol/src/controls/lengthcontrol":506,"g3w-ol/src/controls/mousepositioncontrol":508,"g3w-ol/src/controls/nominatimcontrol":509,"g3w-ol/src/controls/olcontrol":510,"g3w-ol/src/controls/onclickcontrol":511,"g3w-ol/src/controls/querybboxcontrol":512,"g3w-ol/src/controls/querybypolygoncontrol":513,"g3w-ol/src/controls/querycontrol":514,"g3w-ol/src/controls/resetcontrol":515,"g3w-ol/src/controls/scalecontrol":516,"g3w-ol/src/controls/screenshotcontrol":517,"g3w-ol/src/controls/streetviewcontrol":518,"g3w-ol/src/controls/zoomboxcontrol":520}],631:[function(require,module,exports){
var ApplicationService = require('core/applicationservice');
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');

function ControlsRegistry() {
  var _this = this;

  this._controls = {};
  this._offlineids = [];
  ApplicationService.onbefore('offline', function () {
    _this._offlineids.forEach(function (controlItem) {
      var id = controlItem.id;

      var control = _this._controls[id];
      controlItem.enable = control.getEnable();
      control.setEnable(false);
    });
  });

  ApplicationService.onbefore('online', function () {
    _this._offlineids.forEach(function (controlItem) {
      var id = controlItem.id,
          enable = controlItem.enable;

      _this._controls[id].setEnable(enable);
    });
  });

  this.setters = {
    registerControl: function registerControl(id, control) {
      this._registerControl(id, control);
    }
  };

  this._registerControl = function (id, control) {
    this._controls[id] = control;
    if (control.offline === false) {
      this._offlineids.push({
        id: id,
        enable: control.getEnable()
      });
      control.getEnable() && control.setEnable(ApplicationService.isOnline());
    }
  };

  this.getControl = function (id) {
    return this._controls[id];
  };

  this.getControls = function () {
    return this._controls;
  };

  this.unregisterControl = function (id) {
    var control = this.getControl(id);
    var mapService = GUI.getComponent('map').getService();
    var map = mapService.getMap();
    if (control) {
      map.removeControl(control);
      delete this._controls[id];
      this._offlineids = this._offlineids.filter(function (_id) {
        return _id !== id;
      });
      return true;
    }
    return false;
  };
  base(this);
}

inherit(ControlsRegistry, G3WObject);

module.exports = new ControlsRegistry();

},{"core/applicationservice":401,"core/g3wobject":415,"core/utils/utils":485,"gui/gui":575}],632:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _constant = require('constant');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('core/i18n/i18n.service').t;

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    base = _require.base,
    copyUrl = _require.copyUrl,
    uniqueId = _require.uniqueId,
    debounce = _require.debounce,
    throttle = _require.throttle;

var G3WObject = require('core/g3wobject');

var _require2 = require('core/utils/geo'),
    createVectorLayerFromFile = _require2.createVectorLayerFromFile,
    createSelectedStyle = _require2.createSelectedStyle,
    getMapLayersByFilter = _require2.getMapLayersByFilter;

var DataRouterService = require('core/data/routerservice');
var GUI = require('gui/gui');
var ApplicationService = require('core/applicationservice');
var ProjectsRegistry = require('core/project/projectsregistry');
var MapLayersStoreRegistry = require('core/map/maplayersstoresregistry');
var WFSProvider = require('core/layers/providers/wfsprovider');
var olhelpers = require('g3w-ol/src/g3w.ol').helpers;

var _require3 = require('g3w-ol/src/utils/utils'),
    getScaleFromResolution = _require3.getScaleFromResolution,
    getResolutionFromScale = _require3.getResolutionFromScale;

var ControlsFactory = require('gui/map/control/factory');
var StreetViewService = require('gui/streetview/streetviewservice');
var ControlsRegistry = require('gui/map/control/registry');
var VectorLayer = require('core/layers/vectorlayer');
var SETTINGS = {
  zoom: {
    maxScale: 2000
  },
  animation: {
    duration: 2000
  }
};

function MapService() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.id = 'MapService';
  this.viewer = null;
  this.target = options.target || null;
  this.maps_container = options.maps_container || null;
  this._layersStoresEventKeys = {};
  this._keyEvents = {
    ol: [],
    g3wobject: [],
    eventemitter: []
  };
  this.project = null;
  this._mapControls = [];
  this._changeMapMapControls = [];
  this._mapLayers = [];
  this._externalLayers = [];
  this.mapBaseLayers = {};
  this.defaultsLayers = {
    _style: {
      highlightLayer: {
        color: undefined
      },
      selectionLayer: {
        color: 'red'
      }
    },
    highlightLayer: new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: function style(feature) {
        var styles = [];
        var geometryType = feature.getGeometry().getType();
        var style = createSelectedStyle({
          geometryType: geometryType,
          color: _this.defaultsLayers._style.highlightLayer.color
        });
        styles.push(style);
        return styles;
      }
    }),
    selectionLayer: new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: function style(feature) {
        var styles = [];
        var geometryType = feature.getGeometry().getType();
        var style = createSelectedStyle({
          geometryType: geometryType,
          color: _this.defaultsLayers._style.selectionLayer.color,
          fill: false
        });
        styles.push(style);
        return styles;
      }
    })
  };
  this.layersExtraParams = {};
  this.state = {
    mapUnits: 'm',
    bbox: [],
    hidemaps: [],
    resolution: null,
    center: null,
    loading: false,
    hidden: true,
    scale: 0,
    mapcontrolsalignement: 'rv',
    mapcontrolDOM: null,
    mapcontrolready: false,
    mapcontrolSizes: {
      height: 47,
      width: 47,
      minWidth: 47,
      minHeight: 47
    },
    mapControl: {
      grid: [],
      length: 0,
      currentIndex: 0,
      update: true,
      disabled: false
    }
  };

  this._greyListenerKey = null;
  this._drawShadow = {
    type: 'coordinate',
    outer: [],
    inner: [],
    scale: null,
    rotation: null
  };
  this.config = options.config || ApplicationService.getConfig();
  this._howManyAreLoading = 0;
  this._layersLoadingError = false;
  // function to show spinner layers
  this._incrementLoaders = function () {
    if (_this._howManyAreLoading === 0) {
      _this.emit('loadstart');
      GUI.showSpinner({
        container: $('#map-spinner'),
        id: 'maploadspinner',
        style: 'transparent'
      });
    }
    _this._howManyAreLoading += 1;
  };

  this._decrementLoaders = function () {
    _this._howManyAreLoading -= 1;
    if (_this._howManyAreLoading === 0) {
      _this.emit('loadend');
      GUI.hideSpinner('maploadspinner');
    }
  };

  this._mapLayerLoadError = function () {
    if (!_this._layersLoadingError) {
      GUI.notify.warning('sdk.errors.layers.load');
      _this._layersLoadingError = true;
    }
    _this._decrementLoaders();
  };
  if (options.project) this.project = options.project;else {
    this.project = ProjectsRegistry.getCurrentProject();
    //on after setting current project
    var keysetCurrentProject = ProjectsRegistry.onafter('setCurrentProject', function (project) {
      _this.removeLayers();
      _this._removeListeners();
      // check if reload same project
      var isSameProject = _this.project.getId() === project.getId();
      _this.project = project;
      var changeProjectCallBack = function changeProjectCallBack() {
        _this._resetView();
        _this._setupBaseLayers();
        _this._setupMapLayers();
        _this._setupVectorLayers();
        _this._checkMapControls();
        _this.setUpMapOlEvents();
        _this.setupCustomMapParamsToLegendUrl();
      };
      ApplicationService.isIframe() && changeProjectCallBack();
      isSameProject ? changeProjectCallBack() : _this.getMap().once('change:size', changeProjectCallBack);
    });
    this._keyEvents.g3wobject.push({
      who: ProjectsRegistry,
      setter: 'setCurrentProject',
      key: keysetCurrentProject
    });
  }
  this._setupListeners();
  this._marker = null;
  this._bboxLayer = new ol.layer.Vector({
    source: new ol.source.Vector({})
  });
  this.debounces = {
    setupCustomMapParamsToLegendUrl: {
      fnc: function fnc() {
        _this._setupCustomMapParamsToLegendUrl.apply(_this, arguments);
      },
      delay: 1000
    }
  };
  this.setters = {
    setupControls: function setupControls() {
      return this._setupControls();
    },
    addHideMap: function addHideMap() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          ratio = _ref.ratio,
          _ref$layers = _ref.layers,
          layers = _ref$layers === undefined ? [] : _ref$layers,
          _ref$mainview = _ref.mainview,
          mainview = _ref$mainview === undefined ? false : _ref$mainview,
          _ref$switchable = _ref.switchable,
          switchable = _ref$switchable === undefined ? false : _ref$switchable;

      var id = 'hidemap_' + Date.now();
      var idMap = {
        id: id,
        map: null,
        switchable: switchable
      };
      this.state.hidemaps.push(idMap);
      return idMap;
    },
    updateMapView: function updateMapView(bbox, resolution, center) {
      this.state.bbox = bbox;
      this.state.resolution = resolution;
      this.state.center = center;
      this.updateMapLayers();
    },
    setHidden: function setHidden(bool) {
      this.state.hidden = bool;
    },
    setupViewer: function setupViewer(width, height) {
      if (width === 0 || height === 0) return;
      if (this.viewer) {
        this.viewer.destroy();
        this.viewer = null;
      }
      this._setupViewer(width, height);
      this.state.bbox = this.viewer.getBBOX();
      this.state.resolution = this.viewer.getResolution();
      this.state.center = this.viewer.getCenter();
      this._setupAllLayers();
      this.setUpMapOlEvents();
      this.emit('viewerset');
    },
    controlClick: function controlClick(active) {}
  };

  this._onCatalogSelectLayer = function (layer) {
    var _this2 = this;

    if (layer) {
      var geometryType = layer.getGeometryType();
      var querable = layer.isQueryable();

      var _loop = function _loop(i) {
        var mapcontrol = _this2._mapControls[i];
        if (mapcontrol.control._onSelectLayer) {
          if (mapcontrol.control.getGeometryTypes().indexOf(geometryType) !== -1) {
            mapcontrol.control.setEnable(querable ? layer.isVisible() : querable);
            // listen changes
            querable && _this2.on('cataloglayertoggled', function (_toggledLayer) {
              if (layer === _toggledLayer) mapcontrol.control.setEnable(layer.isVisible());
            });
          } else mapcontrol.control.setEnable(false);
        }
      };

      for (var i = 0; i < this._mapControls.length; i++) {
        _loop(i);
      }
    }
  };

  this.on('cataloglayerselected', this._onCatalogSelectLayer);

  this._keyEvents.eventemitter.push({
    event: 'cataloglayerselected',
    listener: this._onCatalogSelectLayer
  });

  this._onCatalogUnSelectLayer = function () {
    for (var i = 0; i < this._mapControls.length; i++) {
      var _mapcontrol = this._mapControls[i];
      _mapcontrol.control._onSelectLayer && _mapcontrol.control.setEnable(false);
      this.removeAllListeners('cataloglayertoggled');
    }
  };

  this.on('cataloglayerunselected', this._onCatalogUnSelectLayer);

  this._keyEvents.eventemitter.push({
    event: 'cataloglayerunselected',
    listener: this._onCatalogUnSelectLayer
  });

  var extraParamsSet = function extraParamsSet(extraParams, update) {
    update && _this.getMapLayers().forEach(function (mapLayer) {
      mapLayer.update(_this.state, extraParams);
    });
  };

  this.on('extraParamsSet', extraParamsSet);

  this._keyEvents.eventemitter.push({
    event: 'extraParamsSet',
    listener: extraParamsSet
  });

  this.once('viewerset', function () {
    //CHECK IF MAPLAYESRSTOREREGISTRY HAS LAYERSTORE
    MapLayersStoreRegistry.getLayersStores().forEach(function (layersStore) {
      _this._setUpEventsKeysToLayersStore(layersStore);
    });
    // LISTEN ON EVERY ADDED LAYERSSTORE
    MapLayersStoreRegistry.onafter('addLayersStore', function (layersStore) {
      _this._setUpEventsKeysToLayersStore(layersStore);
    });
    // LISTENER ON REMOVE LAYERSTORE
    MapLayersStoreRegistry.onafter('removeLayersStore', function (layerStore) {
      _this._removeEventsKeysToLayersStore(layerStore);
    });
  });

  base(this);
}

inherit(MapService, G3WObject);

var proto = MapService.prototype;

proto.setUpMapOlEvents = function () {
  var _this3 = this;

  var dynamicLegend = this.project.getContextBaseLegend();
  // set change resolution
  this._keyEvents.ol.forEach(function (keyEvent) {
    return ol.Observable.unByKey(keyEvent);
  });
  var keyolchangeresolution = this.viewer.map.getView().on("change:resolution", function (evt) {
    _this3._updateMapView();
    dynamicLegend && _this3.setupCustomMapParamsToLegendUrl();
  });
  this._keyEvents.ol.push(keyolchangeresolution);
  if (dynamicLegend) {
    var keyolmoveeend = this.viewer.map.on("moveend", function (evt) {
      return _this3.setupCustomMapParamsToLegendUrl();
    });
    this._keyEvents.ol.push(keyolmoveeend);
  } else this.setupCustomMapParamsToLegendUrl(false);
};

//clear methods to remove all listeners events
proto.clear = function () {
  var _this4 = this;

  Object.keys(this._keyEvents).forEach(function (type) {
    switch (type) {
      case 'ol':
        _this4._keyEvents[type].forEach(function (keyEvent) {
          return ol.Observable.unByKey(keyEvent);
        });
        break;
      case 'g3wobject':
        _this4._keyEvents[type].forEach(function (eventObject) {
          var who = eventObject.who,
              setter = eventObject.setter,
              key = eventObject.key;

          who.un(setter, key);
        });
        break;
      case 'eventemitter':
        _this4._keyEvents[type].forEach(function (eventObject) {
          var event = eventObject.event,
              listener = eventObject.listener;

          _this4.removeListener(event, listener);
        });
        break;
    }
  });
  this._keyEvents = null;
  MapLayersStoreRegistry.getLayersStores().forEach(function (layerStore) {
    _this4._removeEventsKeysToLayersStore(layerStore);
  });
};

proto.showMapSpinner = function () {
  GUI.showSpinner({
    container: $('#map-spinner'),
    id: 'maploadspinner',
    style: 'transparent'
  });
};

proto.hideMapSpinner = function () {
  GUI.hideSpinner('maploadspinner');
};

proto.getScaleFromExtent = function (extent) {
  var resolution = this.getMap().getView().getResolutionForExtent(extent, this.getMap().getSize());
  var scale = getScaleFromResolution(resolution, this.getMapUnits());
  return scale;
};

proto._addHideMap = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      ratio = _ref2.ratio,
      _ref2$layers = _ref2.layers,
      layers = _ref2$layers === undefined ? [] : _ref2$layers,
      _ref2$mainview = _ref2.mainview,
      mainview = _ref2$mainview === undefined ? false : _ref2$mainview;

  var idMap = this.state.hidemaps[this.state.hidemaps.length - 1];
  var view = this.getMap().getView();
  var view_options = {
    projection: view.getProjection(),
    center: view.getCenter(),
    resolution: this.getResolution()
  };
  var viewer = olhelpers.createViewer({
    id: idMap.id,
    view: mainview ? view : view_options
  });
  // set Map
  idMap.map = viewer.getMap();
  // in case of rate
  if (ratio) {
    var _idMap$map$getSize = idMap.map.getSize(),
        _idMap$map$getSize2 = _slicedToArray(_idMap$map$getSize, 2),
        width = _idMap$map$getSize2[0],
        height = _idMap$map$getSize2[1];

    idMap.map.setSize([width, width * ratio]);
  }

  for (var i = 0; i < layers.length; i++) {
    var layer = layers[i];
    idMap.map.addLayer(layer);
  }
  return idMap.map;
};

proto.removeHideMap = function (id) {
  var index = void 0;
  for (var i = 0; i < this.state.hidemaps.length; i++) {
    if (id === this.state.hidemaps[i].id) {
      index = i;
      break;
    }
  }
  index !== undefined && this.state.hidemaps.splice(index, 1);
};

proto._showHideMapElement = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      map = _ref3.map,
      _ref3$show = _ref3.show,
      show = _ref3$show === undefined ? false : _ref3$show;

  show ? $(map.getTargetElement()).addClass('show') : $(map.getTargetElement()).removeClass('show');
};

proto.createMapImage = function () {
  var _this5 = this;

  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      map = _ref4.map,
      background = _ref4.background;

  return new Promise(function (resolve, reject) {
    try {
      var canvas = _this5.getMapCanvas(map);
      if (navigator.msSaveBlob) resolve(canvas.msToBlob());else canvas.toBlob(function (blob) {
        return resolve(blob);
      });
    } catch (err) {
      reject(err);
    }
  });
};

proto.getApplicationAttribution = function () {
  var _config$group = this.config.group,
      header_terms_of_use_link = _config$group.header_terms_of_use_link,
      header_terms_of_use_text = _config$group.header_terms_of_use_text;

  if (header_terms_of_use_text) {
    return header_terms_of_use_link ? '<a href="' + header_terms_of_use_link + '">' + header_terms_of_use_text + '</a>' : '<span class="skin-color" style="font-weight: bold">' + header_terms_of_use_text + '</span>';
  } else return false;
};

proto.slaveOf = function (mapService, sameLayers) {
  sameLayers = sameLayers || false;
};

proto.setLayersExtraParams = function (params, update) {
  this.layersExtraParams = _.assign(this.layersExtraParams, params);
  this.emit('extraParamsSet', params, update);
};

proto.getProject = function () {
  return this.project;
};

proto.getMap = function () {
  try {
    return this.viewer.map;
  } catch (err) {}
};

proto.getMapCanvas = function (map) {
  var viewport = map ? map.getViewport() : $('#' + this.maps_container + ' .g3w-map').last().children('.ol-viewport')[0];
  return $(viewport).children('canvas')[0];
};

proto.getProjection = function () {
  return this.project.getProjection();
};

proto.isMapHidden = function () {
  return this.state.hidden;
};

proto.isAxisOrientationInverted = function () {
  return this.getProjection().getAxisOrientation() === 'neu' ? true : false;
};

proto.getCrs = function () {
  return this.getProjection().getCode();
};

proto.getViewerElement = function () {
  return this.viewer.map.getTargetElement();
};

proto.getViewport = function () {
  return this.viewer.map.getViewport();
};

proto.getResolution = function () {
  return this.viewer.map.getView().getResolution();
};

proto.getEpsg = function () {
  return this.viewer.map.getView().getProjection().getCode();
};

proto.getGetFeatureInfoUrlForLayer = function (layer, coordinates, resolution, epsg, params) {
  var mapLayer = this.getMapLayerForLayer(layer);
  return mapLayer.getGetFeatureInfoUrl(coordinates, resolution, epsg, params);
};

/**
 * Show Marker on map
 * @param coordinates
 * @param duration
 */
proto.showMarker = function (coordinates) {
  var _this6 = this;

  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

  this._marker.setPosition(coordinates);
  setTimeout(function () {
    return _this6._marker.setPosition();
  }, duration);
};

// return layer by name
proto.getLayerByName = function (name) {
  var layer = this.getMap().getLayers().getArray().find(function (lyr) {
    var layerName = lyr.get('name');
    return layerName && layerName === name;
  });
  return layer;
};

// return layer by id
proto.getLayerById = function (id) {
  return this.getMap().getLayers().getArray().find(function (layer) {
    return layer.get('id') === id;
  });
};

// method do get all feature from vector layer based on coordinates
proto.getVectorLayerFeaturesFromCoordinates = function (layerId, coordinates) {
  var intersectGeom = void 0;
  var features = [];
  var map = this.getMap();
  var vectorLayer = this.getLayerById(layerId);
  if (Array.isArray(coordinates)) {
    if (coordinates.length === 2) {
      var pixel = map.getPixelFromCoordinate(coordinates);
      map.forEachFeatureAtPixel(pixel, function (feature) {
        return features.push(feature);
      }, {
        layerFilter: function layerFilter(layer) {
          return layer === vectorLayer;
        }
      });
    } else if (coordinates.length === 4) {
      intersectGeom = ol.geom.Polygon.fromExtent(coordinates);
      switch (vectorLayer.constructor) {
        case VectorLayer:
          features = vectorLayer.getIntersectedFeatures(intersectGeom);
          break;
        case ol.layer.Vector:
          vectorLayer.getSource().getFeatures().forEach(function (feature) {
            intersectGeom.intersectsExtent(feature.getGeometry().getExtent()) && features.push(feature);
          });
          break;
      }
    }
  } else if (coordinates instanceof ol.geom.Polygon || coordinates instanceof ol.geom.MultiPolygon) {
    intersectGeom = coordinates;
    switch (vectorLayer.constructor) {
      case VectorLayer:
        features = vectorLayer.getIntersectedFeatures(intersectGeom);
        break;
      case ol.layer.Vector:
        vectorLayer.getSource().getFeatures().forEach(function (feature) {
          intersectGeom.intersectsExtent(feature.getGeometry().getExtent()) && features.push(feature);
        });
        break;
    }
  }
  return features;
};

proto.getQueryLayerByCoordinates = function () {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref5.layer,
      coordinates = _ref5.coordinates;

  var mapProjection = this.getProjection();
  var resolution = this.getResolution();
  return new Promise(function (resolve, reject) {
    layer.query({
      coordinates: coordinates,
      mapProjection: mapProjection,
      resolution: resolution
    }).then(function (response) {
      return resolve(response);
    }).fail(function (err) {
      return reject(err);
    });
  });
};

proto.getQueryLayerPromiseByCoordinates = function () {
  var _this7 = this;

  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref6.layer,
      coordinates = _ref6.coordinates;

  return new Promise(function (resolve, reject) {
    var mapProjection = _this7.getProjection();
    var resolution = _this7.getResolution();
    layer.query({
      coordinates: coordinates,
      mapProjection: mapProjection,
      resolution: resolution
    }).then(function (response) {
      resolve(response);
    }).fail(function (error) {
      reject(error);
    });
  });
};

//setup controls
/*
  layout : {
    lv: <options> h : horizontal (default), v vertical
    lh: <options> h: horizontal: v vertical (default)
  }
 */

proto.activeMapControl = function (controlName) {
  var mapControl = this._mapControls.find(function (control) {
    return control.type === controlName;
  });
  var control = mapControl.control;
  !control.isToggled() ? control.toggle() : null;
};

proto.createMapControl = function (type) {
  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      id = _ref7.id,
      _ref7$add = _ref7.add,
      add = _ref7$add === undefined ? true : _ref7$add,
      _ref7$toggled = _ref7.toggled,
      toggled = _ref7$toggled === undefined ? false : _ref7$toggled,
      visible = _ref7.visible,
      _ref7$options = _ref7.options,
      options = _ref7$options === undefined ? {} : _ref7$options;

  id = id || type;
  var control = ControlsFactory.create(_extends({
    type: type,
    toggled: toggled
  }, options));
  visible = visible === undefined ? control.isVisible ? control.isVisible() : true : visible;
  control && this.addControl(id, type, control, add, visible);
  return control;
};

proto.showAddLayerModal = function () {
  this.emit('addexternallayer');
};

proto._checkMapControls = function () {
  var _this8 = this;

  this._changeMapMapControls.forEach(function (_ref8) {
    var control = _ref8.control,
        _ref8$getVisible = _ref8.getVisible,
        getVisible = _ref8$getVisible === undefined ? function () {
      return true;
    } : _ref8$getVisible;

    _this8._setMapControlVisible({
      control: control,
      visible: getVisible()
    });
  });
};

proto._setupControls = function () {
  var _this9 = this;

  var baseLayers = getMapLayersByFilter({
    BASELAYER: true
  });
  this.getMapLayers().forEach(function (mapLayer) {
    return mapLayer.getSource().setAttributions(_this9.getApplicationAttribution());
  });
  // check if base layer is set. If true add attribution control
  if (this.getApplicationAttribution() || baseLayers.length) {
    var attributionControl = new ol.control.Attribution({
      collapsible: false,
      target: 'map_footer_left'
    });
    this.getMap().addControl(attributionControl);
  }

  if (this.config && this.config.mapcontrols) {
    var mapcontrols = this.config.mapcontrols;
    var feature_count = this.project.getQueryFeatureCount();
    var map = this.getMap();
    mapcontrols.forEach(function (controlType) {
      var control = void 0;
      switch (controlType) {
        case 'reset':
          if (!isMobile.any) {
            control = ControlsFactory.create({
              type: controlType
            });
          }
          _this9.addControl(controlType, control, false);
          break;
        case 'zoom':
          control = _this9.createMapControl(controlType, {
            options: {
              zoomInLabel: '\uE98A',
              zoomOutLabel: '\uE98B'
            }
          });
          break;
        case 'zoombox':
          if (!isMobile.any) {
            control = _this9.createMapControl(controlType, {});
            control.on('zoomend', function (e) {
              _this9.viewer.fit(e.extent);
            });
          }
          break;
        case 'zoomtoextent':
          control = _this9.createMapControl(controlType, {
            options: {
              label: '\uE98C',
              extent: _this9.project.state.initextent
            }
          });
          break;
        case 'mouseposition':
          if (!isMobile.any) {
            var coordinateLabels = _this9.getProjection().getUnits() === 'm' ? ['X', 'Y'] : ['Lng', 'Lat'];
            var crs = _this9.getCrs();
            control = _this9.createMapControl(controlType, {
              add: false,
              options: {
                coordinateFormat: function coordinateFormat(coordinate) {
                  return ol.coordinate.format(coordinate, '\xA0' + coordinateLabels[0] + ': {x}, ' + coordinateLabels[1] + ': {y}\xA0\xA0 [' + crs + ']\xA0', 4);
                },

                undefinedHTML: false,
                projection: _this9.getCrs()
              }
            });
          }
          break;
        case 'screenshot':
          //check if wms externl is on map. CORS PROBLEM
          var findWmsExternal = _this9.getMapLayers().find(function (_ref9) {
            var _ref9$layers = _ref9.layers,
                layers = _ref9$layers === undefined ? [] : _ref9$layers;

            return !!layers.find(function (layer) {
              return layer.isExternalWMS ? layer.isExternalWMS() : false;
            });
          });
          if (!isMobile.any && !findWmsExternal) {
            control = _this9.createMapControl(controlType, {
              options: {
                onclick: function () {
                  var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                    var blobImage;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return _this9.createMapImage();

                          case 3:
                            blobImage = _context.sent;

                            saveAs(blobImage, 'map_' + Date.now() + '.png');
                            _context.next = 10;
                            break;

                          case 7:
                            _context.prev = 7;
                            _context.t0 = _context['catch'](0);

                            GUI.showUserMessage({
                              type: 'alert',
                              message: t("mapcontrols.screenshot.error"),
                              autoclose: true
                            });

                          case 10:
                            return _context.abrupt('return', true);

                          case 11:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this9, [[0, 7]]);
                  }));

                  function onclick() {
                    return _ref10.apply(this, arguments);
                  }

                  return onclick;
                }()
              }
            });
          }
          break;
        case 'scale':
          control = _this9.createMapControl(controlType, {
            add: false,
            options: {
              coordinateFormat: ol.coordinate.createStringXY(4),
              projection: _this9.getCrs(),
              isMobile: isMobile.any
            }
          });
          break;
        case 'query':
          control = _this9.createMapControl(controlType, {
            add: true,
            toggled: true
          });
          var runQuery = throttle(function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
              var coordinates, _ref12, _ref12$data, data;

              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      coordinates = e.coordinates;

                      GUI.closeOpenSideBarComponent();
                      _context2.prev = 2;
                      _context2.next = 5;
                      return DataRouterService.getData('query:coordinates', {
                        inputs: {
                          coordinates: coordinates,
                          feature_count: feature_count,
                          multilayers: _this9.project.isQueryMultiLayers(controlType)
                        }
                      });

                    case 5:
                      _ref12 = _context2.sent;
                      _ref12$data = _ref12.data;
                      data = _ref12$data === undefined ? [] : _ref12$data;

                      data.length && _this9.showMarker(coordinates);
                      _context2.next = 13;
                      break;

                    case 11:
                      _context2.prev = 11;
                      _context2.t0 = _context2['catch'](2);

                    case 13:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, _this9, [[2, 11]]);
            }));

            return function (_x10) {
              return _ref11.apply(this, arguments);
            };
          }());
          var eventKey = control.on('picked', runQuery);
          control.setEventKey({
            eventType: 'picked',
            eventKey: eventKey
          });
          break;
        case 'querybypolygon':
          if (!isMobile.any) {
            var condition = {
              filtrable: {
                ows: 'WFS'
              }
            };
            var getControlLayers = function getControlLayers() {
              var controlQuerableLayers = getMapLayersByFilter({
                QUERYABLE: true,
                SELECTEDORALL: true
              });
              var controlFiltrableLayers = getMapLayersByFilter({
                FILTERABLE: true,
                SELECTEDORALL: true
              }, condition);
              return [].concat(_toConsumableArray(new Set([].concat(_toConsumableArray(controlFiltrableLayers), _toConsumableArray(controlQuerableLayers)))));
            };
            control = _this9.createMapControl(controlType, {
              options: {
                layers: getControlLayers(),
                help: "sdk.mapcontrols.querybypolygon.help"
              }
            });
            if (control) {
              _this9._changeMapMapControls.push({
                control: control,
                getVisible: function getVisible() {
                  var controlLayers = getControlLayers();
                  return control.checkVisibile(controlLayers);
                }
              });

              var _runQuery = throttle(function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
                  var coordinates, _ref14, _ref14$data, dataCoordinates, feature, fid, geometry, excludeLayers, _ref16, _ref16$data, data;

                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          GUI.closeOpenSideBarComponent();
                          coordinates = e.coordinates;
                          // ask for coordinates

                          _context3.prev = 2;
                          _context3.next = 5;
                          return DataRouterService.getData('query:coordinates', {
                            inputs: {
                              feature_count: feature_count,
                              coordinates: coordinates
                            },
                            outputs: {
                              show: function show(_ref15) {
                                var _ref15$data = _ref15.data,
                                    data = _ref15$data === undefined ? [] : _ref15$data,
                                    query = _ref15.query;

                                var show = data.length === 0;
                                // set coordinates to null to avoid that externalvector added to query result
                                // response to coordinates
                                query.coordinates = !show && null;
                                return show;
                              }
                            }
                          });

                        case 5:
                          _ref14 = _context3.sent;
                          _ref14$data = _ref14.data;
                          dataCoordinates = _ref14$data === undefined ? [] : _ref14$data;

                          if (!(dataCoordinates.length && dataCoordinates[0].features.length)) {
                            _context3.next = 19;
                            break;
                          }

                          feature = dataCoordinates[0].features[0];
                          fid = feature.get(_constant.G3W_FID);
                          geometry = feature.getGeometry();
                          excludeLayers = [dataCoordinates[0].layer];
                          _context3.next = 15;
                          return DataRouterService.getData('query:polygon', {
                            inputs: {
                              excludeLayers: excludeLayers,
                              geometry: geometry,
                              fid: fid,
                              filterConfig: {
                                spatialMethod: control.getSpatialMethod() // added spatial method to polygon filter
                              },
                              multilayers: _this9.project.isQueryMultiLayers(controlType)
                            },
                            outputs: {
                              show: function show(_ref17) {
                                var _ref17$error = _ref17.error,
                                    error = _ref17$error === undefined ? false : _ref17$error;

                                return !error;
                              }
                            }
                          });

                        case 15:
                          _ref16 = _context3.sent;
                          _ref16$data = _ref16.data;
                          data = _ref16$data === undefined ? [] : _ref16$data;

                          data.length && map.getView().setCenter(coordinates);

                        case 19:
                          _context3.next = 23;
                          break;

                        case 21:
                          _context3.prev = 21;
                          _context3.t0 = _context3['catch'](2);

                        case 23:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, _this9, [[2, 21]]);
                }));

                return function (_x11) {
                  return _ref13.apply(this, arguments);
                };
              }());
              var _eventKey = control.on('picked', _runQuery);
              control.setEventKey({
                eventType: 'picked',
                eventKey: _eventKey
              });
            }
          }
          break;
        case 'querybbox':
          if (!isMobile.any) {
            var _condition = {
              filtrable: {
                ows: 'WFS'
              }
            };
            var _getControlLayers = function _getControlLayers() {
              var layers = _this9.filterableLayersAvailable() ? getMapLayersByFilter({
                SELECTEDORALL: true,
                FILTERABLE: true
              }, _condition) : [];
              layers.forEach(function (layer) {
                return layer.setTocHighlightable(true);
              });
              return layers;
            };
            var controlLayers = _getControlLayers();
            control = _this9.createMapControl(controlType, {
              options: {
                layers: controlLayers,
                help: "sdk.mapcontrols.querybybbox.help"
              }
            });
            if (control) {
              _this9._changeMapMapControls.push({
                control: control,
                getVisible: function getVisible() {
                  controlLayers = _getControlLayers();
                  return control.checkVisible(controlLayers);
                }
              });
              var layersFilterObject = {
                SELECTEDORALL: true,
                FILTERABLE: true,
                VISIBLE: true
              };
              control.on('toggled', function (evt) {
                if (evt.target.isToggled()) {
                  var layers = getMapLayersByFilter(layersFilterObject, _condition);
                  if (layers.length === 0) {
                    GUI.showUserMessage({
                      type: "warning",
                      message: 'sdk.mapcontrols.querybybbox.nolayers_visible'
                    });
                    control.toggle();
                  }
                }
              });

              var _runQuery2 = throttle(function () {
                var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
                  var bbox, _ref19, _ref19$data, data, center;

                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          GUI.closeOpenSideBarComponent();
                          bbox = e.extent;
                          _context4.prev = 2;
                          _context4.next = 5;
                          return DataRouterService.getData('query:bbox', {
                            inputs: {
                              bbox: bbox,
                              feature_count: feature_count,
                              layersFilterObject: layersFilterObject,
                              condition: _condition,
                              multilayers: _this9.project.isQueryMultiLayers(controlType)
                            }
                          });

                        case 5:
                          _ref19 = _context4.sent;
                          _ref19$data = _ref19.data;
                          data = _ref19$data === undefined ? [] : _ref19$data;

                          if (data.length) {
                            center = ol.extent.getCenter(bbox);

                            _this9.getMap().getView().setCenter(center);
                          }
                          _context4.next = 13;
                          break;

                        case 11:
                          _context4.prev = 11;
                          _context4.t0 = _context4['catch'](2);

                        case 13:
                        case 'end':
                          return _context4.stop();
                      }
                    }
                  }, _callee4, _this9, [[2, 11]]);
                }));

                return function (_x12) {
                  return _ref18.apply(this, arguments);
                };
              }());
              var _eventKey2 = control.on('bboxend', _runQuery2);
              control.setEventKey({
                eventType: 'bboxend',
                eventKey: _eventKey2
              });
            }
          }
          break;
        case 'streetview':
          // streetview
          var active = false;
          var streetViewService = new StreetViewService();
          control = _this9.createMapControl(controlType, {});
          streetViewService.init().then(function () {
            control.setProjection(_this9.getProjection());
            _this9.viewer.map.addLayer(control.getLayer());
            var position = {
              lat: null,
              lng: null
            };
            var closeContentFnc = function closeContentFnc() {
              control.clearMarker();
              active = false;
            };
            streetViewService.onafter('postRender', function (position) {
              return control.setPosition(position);
            });
            if (control) {
              _this9._setMapControlVisible({
                control: control,
                visible: true
              });
              control.on('picked', throttle(function (e) {
                GUI.off('closecontent', closeContentFnc);
                active = true;
                var coordinates = e.coordinates;
                var lonlat = ol.proj.transform(coordinates, _this9.getProjection().getCode(), 'EPSG:4326');
                position.lat = lonlat[1];
                position.lng = lonlat[0];
                streetViewService.showStreetView(position);
                GUI.on('closecontent', closeContentFnc);
              }));
              control.on('disabled', function () {
                active && GUI.closeContent();
                GUI.off('closecontent', closeContentFnc);
              });
            }
          }).catch(function () {
            return _this9.removeControl(controlType);
          });
          break;
        case 'scaleline':
          control = _this9.createMapControl(controlType, {
            add: false,
            options: {
              position: 'br'
            }
          });
          break;
        case 'overview':
          if (!isMobile.any) {
            if (!_this9.config.overviewproject) return;
            var overviewProjectGid = _this9.config.overviewproject.gid;
            if (overviewProjectGid) {
              ProjectsRegistry.getProject(overviewProjectGid).then(function (project) {
                var overViewMapLayers = _this9.getOverviewMapLayers(project);
                var viewOptions = _this9._calculateViewOptions({
                  width: 200, // at monent hardcoded
                  height: 150,
                  project: project
                });
                var view = new ol.View(viewOptions);
                var mainView = _this9.getMap().getView();
                view.on('change:center', function () {
                  var currentCenter = this.getCenter();
                  var center = mainView.constrainCenter(currentCenter);
                  center[0] !== currentCenter[0] || center[1] !== currentCenter[1] && view.setCenter(center);
                });
                control = _this9.createMapControl(controlType, {
                  add: false,
                  options: {
                    position: 'bl',
                    className: 'ol-overviewmap ol-custom-overviewmap',
                    collapseLabel: $('<span class="' + GUI.getFontClass('arrow-left') + '"></span>')[0],
                    label: $('<span class="' + GUI.getFontClass('arrow-right') + '"></span>')[0],
                    collapsed: false,
                    layers: overViewMapLayers,
                    view: view
                  }
                });
              });
            }
          }
          break;
        case 'nominatim':
          var lonlat = function lonlat(coordinates) {
            _this9.zoomToExtent([].concat(_toConsumableArray(coordinates), _toConsumableArray(coordinates)));
            setTimeout(function () {
              return _this9.showMarker(coordinates);
            }, 1000);
          };
          control = _this9.createMapControl(controlType, {
            add: false,
            options: {
              lonlat: lonlat,
              isMobile: isMobile.any,
              bbox: _this9.project.state.extent,
              mapCrs: _this9.project.state.crs.epsg,
              placeholder: "mapcontrols.nominatim.placeholder",
              noresults: "mapcontrols.nominatim.noresults",
              notresponseserver: "mapcontrols.nominatim.notresponseserver",
              fontIcon: GUI.getFontClass('search')
            }
          });
          control.on('addresschosen', function (evt) {
            var coordinate = evt.coordinate;
            var geometry = new ol.geom.Point(coordinate);
            _this9.highlightGeometry(geometry);
          });

          $('#search_nominatim').click(debounce(function () {
            control.nominatim.query($('input.gcd-txt-input').val());
          }));
          break;
        case 'geolocation':
          control = _this9.createMapControl(controlType);
          control.on('click', throttle(function (evt) {
            return _this9.showMarker(evt.coordinates);
          }));
          control.on('error', function (evt) {
            GUI.showUserMessage({
              type: 'warning',
              message: "mapcontrols.geolocations.error",
              autoclose: true
            });
          });
          break;
        case 'addlayers':
          if (!isMobile.any) {
            control = _this9.createMapControl(controlType, {});
            control.on('addlayer', function () {
              return _this9.emit('addexternallayer');
            });
          }
          break;
        case 'length':
          if (!isMobile.any) {
            control = _this9.createMapControl(controlType, {
              options: {
                tipLabel: 'sdk.mapcontrols.measures.length.tooltip',
                interactionClassOptions: {
                  projection: _this9.getProjection(),
                  help: 'sdk.mapcontrols.measures.length.help'
                }
              }
            });
          }
          break;
        case 'area':
          if (!isMobile.any) {
            control = _this9.createMapControl(controlType, {
              options: {
                tipLabel: 'sdk.mapcontrols.measures.area.tooltip',
                interactionClassOptions: {
                  projection: _this9.getProjection(),
                  help: 'sdk.mapcontrols.measures.area.help'
                }
              }
            });
          }
          break;
      }
    });
    return this.getMapControls();
  }
};

proto.getCenter = function () {
  var map = this.getMap();
  return map.getView().getCenter();
};

proto.getMapExtent = function () {
  var map = this.getMap();
  return map.getView().calculateExtent(map.getSize());
};

proto.getMapExtentUrl = function () {
  var url = new URL(location.href);
  var map_extent = this.getMapExtent().toString();
  url.searchParams.set('map_extent', map_extent);
  return url.toString();
};

proto.createCopyMapExtentUrl = function () {
  var url = this.getMapExtentUrl();
  copyUrl(url);
};

proto._setMapControlsGrid = function (length) {
  var grid = this.state.mapControl.grid;
  if (length < 2) {
    var rC = grid[grid.length - 1];
    grid.push({
      rows: rC.rows * 2,
      columns: 2
    });
    return;
  }
  if (length === 2) {
    if (grid.length) {
      var _rC = grid[grid.length - 1];
      grid.push({
        rows: _rC.columns,
        columns: _rC.rows
      });
    } else {
      grid.push({
        rows: 1,
        columns: 2
      });
    }
  } else if (length === 3) {
    var _rC2 = grid[grid.length - 1];
    grid.push({
      rows: 2 * _rC2.rows,
      columns: length
    });
  } else {
    grid.push({
      rows: grid.length + 1 + (Number.isInteger(length) ? 0 : 1),
      columns: Number.isInteger(length) ? length : parseInt(length) + 1
    });
    var _length = Number.isInteger(length) ? length : parseInt(length);
    this._setMapControlsGrid(_length / 2);
  }
};

proto._setMapControlsInsideContainerLenght = function () {
  var _this10 = this;

  this.state.mapControl.length = 1;
  // count the mapcontrol insied g3w-map-control container
  this._mapControls.forEach(function (control) {
    var map = _this10.getMap();
    _this10.state.mapControl.length += control.mapcontrol ? 1 : 0;
    control.control.changelayout ? control.control.changelayout(map) : null;
  });
  // add 1 id odd number
  this.state.mapControl.length += this.state.mapControl.length % 2;
  this.state.mapControl.grid = [];
  this._setMapControlsGrid(this.state.mapControl.length);
};

proto.filterableLayersAvailable = function () {
  var layers = getMapLayersByFilter({
    FILTERABLE: true,
    SELECTEDORALL: true
  });
  return layers.some(function (layer) {
    return layer.getProvider('filter') instanceof WFSProvider;
  });
};

proto.setMapControlsAlignement = function () {
  var alignement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rv';

  this.state.mapcontrolsalignement = alignement;
};

proto.getMapControlsAlignement = function () {
  return this.state.mapcontrolsalignement;
};

proto.isMapControlsVerticalAlignement = function () {
  return this.state.mapcontrolsalignement.indexOf('v') !== -1;
};

proto.setMapControlsVerticalAlignement = function () {
  this.state.mapcontrolsalignement = this.state.mapcontrolsalignement[0] + 'v';
};

proto.setMapControlsHorizontalAlignement = function () {
  this.state.mapcontrolsalignement = this.state.mapcontrolsalignement[0] + 'h';
};

proto.flipControlsHorizontally = function () {
  this.state.mapcontrolsalignement = this.state.mapcontrolsalignement[0] === 'r' ? 'l' + this.state.mapcontrolsalignement[1] : 'r' + this.state.mapcontrolsalignement[1];
};

proto.flipMapControlsVertically = function () {
  this.state.mapcontrolsalignment = this.state.mapcontrolsalignement[1] === 'v' ? this.state.mapcontrolsalignement[0] + 'h' : this.state.mapcontrolsalignement[0] + 'v';
};

proto.setMapControlsContainer = function (mapControlDom) {
  this.state.mapcontrolDOM = mapControlDom;
};

proto._updateMapControlsLayout = function () {
  var _this11 = this;

  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      width = _ref20.width,
      height = _ref20.height;

  // case mobile open keyboard
  width == 0 || height == 0 ? this.state.mapcontrolDOM.css('z-index', 0) : this.state.mapcontrolDOM.css('z-index', 100);
  // update only when all control are ready
  if (this.state.mapcontrolready && this.state.mapControl.update) {
    var changedAndMoreSpace = {
      changed: false,
      space: false
    };
    // count the mapcontrol insied g3w-map-control container
    this._mapControls.forEach(function (control) {
      var map = _this11.getMap();
      control.control.changelayout ? control.control.changelayout(map) : null;
    });
    // check if is vertical
    if (this.isMapControlsVerticalAlignement()) {
      var handleVerticalMapControlDOMElements = function handleVerticalMapControlDOMElements() {
        var mapControslHeight = _this11.state.mapControl.grid[_this11.state.mapControl.currentIndex].columns * _this11.state.mapcontrolSizes.minWidth;
        // get bottom controls
        var bottomMapControls = $('.ol-control-b' + _this11.getMapControlsAlignement()[0]);
        var bottomMapControlTop = bottomMapControls.length ? $(bottomMapControls[bottomMapControls.length - 1]).position().top : height;
        var freeSpace = bottomMapControlTop > 0 ? bottomMapControlTop - mapControslHeight : height - mapControslHeight;
        if (freeSpace < 10) {
          if (isMobile.any) {
            _this11.setMapControlsAlignement('rh');
            return;
          } else _this11.state.mapControl.currentIndex = _this11.state.mapControl.currentIndex === _this11.state.mapControl.grid.length - 1 ? _this11.state.mapControl.currentIndex : _this11.state.mapControl.currentIndex + 1;
          changedAndMoreSpace.changed = true;
        } else {
          // check if there enought space to expand mapcontrols
          var nextHeight = _this11.state.mapControl.currentIndex > 0 ? _this11.state.mapControl.grid[_this11.state.mapControl.currentIndex - 1].columns * _this11.state.mapcontrolSizes.minWidth - mapControslHeight : mapControslHeight;
          if (freeSpace > nextHeight) {
            changedAndMoreSpace.changed = true;
            changedAndMoreSpace.space = true;
            _this11.state.mapControl.currentIndex = _this11.state.mapControl.currentIndex === 0 ? _this11.state.mapControl.currentIndex : _this11.state.mapControl.currentIndex - 1;
          }
        }
        if (changedAndMoreSpace.changed) {
          var _mapControslHeight = _this11.state.mapControl.grid[_this11.state.mapControl.currentIndex].columns * _this11.state.mapcontrolSizes.minWidth;
          var mapControlsWidth = _this11.state.mapControl.grid[_this11.state.mapControl.currentIndex].rows * _this11.state.mapcontrolSizes.minWidth;
          _this11.state.mapcontrolDOM.css('height', _mapControslHeight + 'px');
          _this11.state.mapcontrolDOM.css('width', mapControlsWidth + 'px');
          changedAndMoreSpace.changed = false;
          changedAndMoreSpace.space && setTimeout(function () {
            return handleVerticalMapControlDOMElements();
          });
        }
      };
      handleVerticalMapControlDOMElements();
    } else isMobile.any && this.setMapControlsAlignement('rv');
  }
};

proto._setMapControlVisible = function (_ref21) {
  var control = _ref21.control,
      _ref21$visible = _ref21.visible,
      visible = _ref21$visible === undefined ? true : _ref21$visible;

  control && (visible && $(control.element).show() || $(control.element).hide());
};

proto._addControlToMapControls = function (control) {
  var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var controlElement = control.element;
  if (!visible) control.element.style.display = "none";
  $('.g3w-map-controls').append(controlElement);
};

proto.getMapControlByType = function () {
  var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref22.type;

  var mapControl = this._mapControls.find(function (mapControl) {
    return type === mapControl.type;
  });
  return mapControl && mapControl.control;
};

/**
 *
 *
 * @param id
 * @param type
 * @param control
 * @param addToMapControls
 * @param visible
 */
proto.addControl = function (id, type, control) {
  var _this12 = this;

  var addToMapControls = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var visible = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

  this.state.mapcontrolready = false;
  this.viewer.map.addControl(control);
  control.on('toggled', function (evt) {
    return _this12.emit('mapcontrol:toggled', evt);
  });
  this._mapControls.push({
    id: id,
    type: type,
    control: control,
    visible: visible,
    mapcontrol: addToMapControls && visible
  });
  control.on('controlclick', function (active) {
    return _this12.controlClick(active);
  });
  var buttonControl = $(control.element).find('button');
  buttonControl.tooltip({
    placement: 'bottom',
    trigger: GUI.isMobile() ? 'click' : 'hover'
  });
  // in case of mobile hide tooltip after click
  GUI.isMobile() && buttonControl.on('shown.bs.tooltip', function () {
    var _this13 = this;

    setTimeout(function () {
      return $(_this13).tooltip('hide');
    }, 600);
  });
  if (addToMapControls) this._addControlToMapControls(control, visible);else {
    var $mapElement = $('#' + this.getMap().getTarget());
    this._updateMapControlsLayout({
      width: $mapElement.width(),
      height: $mapElement.height()
    });
  }
  ControlsRegistry.registerControl(type, control);
  this._setMapControlsInsideContainerLenght();
  this.state.mapcontrolready = true;
};

proto.showControl = function (type) {
  this.showControls([type]);
};

proto.hideControl = function (type) {
  this.hideControls([type]);
};

proto.showControls = function (types) {
  this.toggleControls(true, types);
};

proto.hideControls = function (types) {
  this.toggleControls(false, types);
};

proto.showAllControls = function () {
  this.toggleControls(true);
};

proto.hideAllControls = function () {
  this.toggleControls(false);
};

proto.toggleControls = function (toggle, types) {
  this._removeControls();
  this._mapControls.forEach(function (controlObj) {
    if (types) {
      if (types.indexOf(controlObj.type) > -1) controlObj.visible = toggle;
    } else controlObj.visible = toggle;
  });
  this._layoutControls();
};

proto._layoutControls = function () {
  var _this14 = this;

  this._mapControls.forEach(function (controlObj) {
    if (controlObj.visible) _this14.viewer.map.addControl(controlObj.control);
  });
};

proto.getMapControls = function () {
  return this._mapControls;
};

proto.removeControlById = function (id) {
  var _this15 = this;

  this._mapControls.forEach(function (controlObj, ctrlIdx) {
    if (id === controlObj.id) {
      _this15._mapControls.splice(ctrlIdx, 1);
      var control = controlObj.control;
      _this15.viewer.map.removeControl(control);
      control.hideControl && control.hideControl();
      return false;
    }
  });
};

proto.removeControl = function (type) {
  var _this16 = this;

  this._mapControls.forEach(function (controlObj, ctrlIdx) {
    if (type === controlObj.type) {
      _this16._mapControls.splice(ctrlIdx, 1);
      var control = controlObj.control;
      _this16.viewer.map.removeControl(control);
      control.hideControl && control.hideControl();
      return false;
    }
  });
};

proto._removeControls = function () {
  var _this17 = this;

  this._mapControls.forEach(function (controlObj) {
    return _this17.viewer.map.removeControl(controlObj.control);
  });
};

proto._unToggleControls = function () {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref23$close = _ref23.close,
      close = _ref23$close === undefined ? true : _ref23$close;

  this._mapControls.forEach(function (controlObj) {
    if (controlObj.control.isToggled && controlObj.control.isToggled()) {
      controlObj.control.toggle(false);
      close && GUI.closeContent();
    }
  });
};

proto.deactiveMapControls = function () {
  this._unToggleControls({
    close: false
  });
};

/**
 *
 * Method to disable
 */
proto.disableClickMapControls = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this._mapControls.forEach(function (controlObj) {
    var control = controlObj.control;

    var clickmap = control.isClickMap ? control.isClickMap() : false;
    clickmap && control[bool ? 'disable' : 'enable']();
  });
};

proto.addMapLayers = function (mapLayers) {
  var _this18 = this;

  mapLayers.reverse().forEach(function (mapLayer) {
    return _this18.addMapLayer(mapLayer);
  });
};

proto._setupCustomMapParamsToLegendUrl = function () {
  var _this19 = this;

  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (bool) {
    var size = this.getMap() && this.getMap().getSize().filter(function (value) {
      return value > 0;
    }) || null;
    var bbox = size && size.length === 2 ? this.getMap().getView().calculateExtent(size) : null;
    //setup initial legend parameter
    this.getMapLayers().forEach(function (mapLayer) {
      mapLayer.setupCustomMapParamsToLegendUrl && mapLayer.setupCustomMapParamsToLegendUrl({
        crs: _this19.getEpsg(),
        bbox: bbox || _this19.project.state.initextent
      });
    });
  }
  this.emit('change-map-legend-params');
};

proto.addMapLayer = function (mapLayer) {
  this._mapLayers.push(mapLayer);
  this.addLayerToMap(mapLayer);
};

proto.getMapLayers = function () {
  return this._mapLayers;
};

proto.getBaseLayers = function () {
  return this.mapBaseLayers;
};

proto.getMapLayerForLayer = function (layer) {
  var multilayerId = 'layer_' + layer.getMultiLayerId();
  var mapLayers = this.getMapLayers();
  var mapLayer = mapLayers.find(function (mapLayer) {
    return mapLayer.getId() === multilayerId;
  });
  return mapLayer;
};

proto.getProjectLayer = function (layerId) {
  return MapLayersStoreRegistry.getLayerById(layerId);
};

proto._setSettings = function () {
  var maxScale = this.getScaleFromExtent(this.project.state.initextent);
  // settings maxScale
  SETTINGS.zoom.maxScale = 2000 > maxScale ? maxScale : 2000;
};

proto._resetView = function () {
  var _viewer$map$getSize = this.viewer.map.getSize(),
      _viewer$map$getSize2 = _slicedToArray(_viewer$map$getSize, 2),
      width = _viewer$map$getSize2[0],
      height = _viewer$map$getSize2[1];

  var extent = this.project.state.extent;
  var maxxRes = ol.extent.getWidth(extent) / width;
  var minyRes = ol.extent.getHeight(extent) / height;
  var maxResolution = Math.max(maxxRes, minyRes) > this.viewer.map.getView().getMaxResolution() ? Math.max(maxxRes, minyRes) : this.viewer.map.getView().getMaxResolution();
  var view = new ol.View({
    extent: extent,
    projection: this.viewer.map.getView().getProjection(),
    center: this.viewer.map.getView().getCenter(),
    resolution: this.viewer.map.getView().getResolution(),
    maxResolution: maxResolution
  });
  this._setSettings();
  this.viewer.map.setView(view);
};

proto._calculateViewOptions = function () {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      project = _ref24.project,
      width = _ref24.width,
      height = _ref24.height;

  var searchParams = new URLSearchParams(location.search);
  var map_extent = searchParams.get('map_extent');
  var initextent = map_extent ? map_extent.split(',').map(function (coordinate) {
    return 1 * coordinate;
  }) : project.state.initextent;
  var projection = this.getProjection();
  var extent = project.state.extent;
  var maxxRes = ol.extent.getWidth(extent) / width;
  var maxyRes = ol.extent.getHeight(extent) / height;
  var maxResolution = Math.max(maxxRes, maxyRes);
  var initxRes = ol.extent.getWidth(initextent) / width;
  var inityRes = ol.extent.getHeight(initextent) / height;
  var resolution = Math.max(initxRes, inityRes);
  var center = ol.extent.getCenter(initextent);
  return {
    projection: projection,
    center: center,
    extent: extent,
    maxResolution: maxResolution,
    resolution: resolution
  };
};

// set view based on project config
proto._setupViewer = function (width, height) {
  var _this20 = this;

  this.viewer = olhelpers.createViewer({
    id: this.target,
    view: this._calculateViewOptions({
      width: width,
      height: height,
      project: this.project
    })
  });
  this._setSettings();
  this.state.size = this.viewer.map.getSize();
  //set mapunit
  this.state.mapUnits = this.viewer.map.getView().getProjection().getUnits();

  if (this.config.background_color) {
    $('#' + this.target).css('background-color', this.config.background_color);
  }

  $(this.viewer.map.getViewport()).prepend('<div id="map-spinner" style="position:absolute; top: 50%; right: 50%"></div>');

  this.viewer.map.getInteractions().forEach(function (interaction) {
    return _this20._watchInteraction(interaction);
  });

  this.viewer.map.getInteractions().on('add', function (interaction) {
    return _this20._watchInteraction(interaction.element);
  });

  this.viewer.map.getInteractions().on('remove', function (interaction) {
    //this._onRemoveInteraction(interaction););
  });

  this._marker = new ol.Overlay({
    position: null,
    positioning: 'center-center',
    element: document.getElementById('marker'),
    stopEvent: false
  });

  this.viewer.map.addOverlay(this._marker);
};

proto.getMapUnits = function () {
  return this.state.mapUnits;
};

proto._removeListeners = function () {
  this._setBaseLayerListenerKey && this.project.un('setBaseLayer', this._setBaseLayerListenerKey);
};

// remove all events of layersStore
proto._removeEventsKeysToLayersStore = function (layerStore) {
  var layerStoreId = layerStore.getId();
  if (this._layersStoresEventKeys[layerStoreId]) {
    this._layersStoresEventKeys[layerStoreId].forEach(function (eventObj) {
      Object.entries(eventObj).forEach(function (_ref25) {
        var _ref26 = _slicedToArray(_ref25, 2),
            event = _ref26[0],
            eventKey = _ref26[1];

        return layerStore.un(event, eventKey);
      });
    });
    delete this._layersStoresEventKeys[layerStoreId];
  }
};

// register all events of layersStore and relative keys
proto._setUpEventsKeysToLayersStore = function (layerStore) {
  var _this21 = this;

  var layerStoreId = layerStore.getId();
  // check if already store a key of events
  this._layersStoresEventKeys[layerStoreId] = [];
  //SETVISIBILITY EVENT
  var layerVisibleKey = layerStore.onafter('setLayersVisible', function (layersIds) {
    layersIds.forEach(function (layerId) {
      var layer = layerStore.getLayerById(layerId);
      var mapLayer = _this21.getMapLayerForLayer(layer);
      mapLayer && _this21.updateMapLayer(mapLayer);
    });
  });

  this._layersStoresEventKeys[layerStoreId].push({
    setLayersVisible: layerVisibleKey
  });
  //ADD LAYER
  var addLayerKey = layerStore.onafter('addLayer', function (layer) {
    if (layer.getType() === 'vector') {
      var mapLayer = layer.getMapLayer();
      _this21.addLayerToMap(mapLayer);
    }
  });
  this._layersStoresEventKeys[layerStoreId].push({
    addLayer: addLayerKey
  });
  // REMOVE LAYER
  var removeLayerKey = layerStore.onafter('removeLayer', function (layer) {
    if (layer.getType() === 'vector') {
      var olLayer = layer.getOLLayer();
      _this21.viewer.map.removeLayer(olLayer);
    }
  });

  this._layersStoresEventKeys[layerStoreId].push({
    removeLayer: removeLayerKey
  });
};

proto._setupListeners = function () {
  var _this22 = this;

  this._setBaseLayerListenerKey = this.project.onafter('setBaseLayer', function () {
    _this22.updateMapLayers();
  });
};

// SETUP ALL LAYERS
proto._setupAllLayers = function () {
  this._setupBaseLayers();
  this._setupMapLayers();
  this._setupVectorLayers();
  this._setUpDefaultLayers();
};

//SETUP BASELAYERS
proto._setupBaseLayers = function () {
  var _this23 = this;

  var baseLayers = getMapLayersByFilter({
    BASELAYER: true
  });
  if (!baseLayers.length) return;
  baseLayers.forEach(function (layer) {
    var baseMapLayer = layer.getMapLayer();
    _this23.registerMapLayerListeners(baseMapLayer);
    _this23.mapBaseLayers[layer.getId()] = baseMapLayer;
  });
  var reverseBaseLayers = Object.values(this.mapBaseLayers).reverse();
  reverseBaseLayers.forEach(function (baseMapLayer) {
    baseMapLayer.update(_this23.state, _this23.layersExtraParams);
    _this23.addLayerToMap(baseMapLayer);
  });
};

//SETUP MAPLAYERS
proto._setupMapLayers = function () {
  var _this24 = this;

  var layers = getMapLayersByFilter({
    BASELAYER: false,
    VECTORLAYER: false
  });
  this._setMapProjectionToLayers(layers);
  //group layer by mutilayer
  var multiLayers = _.groupBy(layers, function (layer) {
    return layer.getMultiLayerId();
  });
  var mapLayers = [];
  Object.entries(multiLayers).forEach(function (_ref27) {
    var _ref28 = _slicedToArray(_ref27, 2),
        id = _ref28[0],
        layers = _ref28[1];

    var multilayerId = 'layer_' + id;
    var mapLayer = void 0;
    var layer = layers[0] || [];
    if (layers.length === 1) {
      mapLayer = layer.getMapLayer({
        id: multilayerId,
        projection: _this24.getProjection()
      }, {});
      mapLayer.addLayer(layer);
      mapLayers.push(mapLayer);
    } else {
      mapLayer = layer.getMapLayer({
        id: multilayerId,
        projection: _this24.getProjection()
      }, _this24.layersExtraParams);
      layers.reverse().forEach(function (sub_layer) {
        return mapLayer.addLayer(sub_layer);
      });
      mapLayers.push(mapLayer);
    }
    _this24.registerMapLayerListeners(mapLayer);
  });
  this.addMapLayers(mapLayers);
  this.updateMapLayers();
  return mapLayers;
};

//SETUP VECTORLAYERS
proto._setupVectorLayers = function () {
  var _this25 = this;

  var layers = getMapLayersByFilter({
    VECTORLAYER: true
  });
  this._setMapProjectionToLayers(layers);
  layers.forEach(function (layer) {
    var mapVectorLayer = layer.getMapLayer();
    _this25.addLayerToMap(mapVectorLayer);
  });
};

proto._setUpDefaultLayers = function () {
  // follow the order that i want
  this.getMap().addLayer(this.defaultsLayers.highlightLayer);
  this.getMap().addLayer(this.defaultsLayers.selectionLayer);
};

proto.removeDefaultLayers = function () {
  this.defaultsLayers.highlightLayer.getSource().clear();
  this.defaultsLayers.selectionLayer.getSource().clear();
  this.getMap().removeLayer(this.defaultsLayers.highlightLayer);
  this.getMap().removeLayer(this.defaultsLayers.selectionLayer);
};

proto.setDefaultLayerStyle = function (type) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (type && this.defaultsLayers[type]) this.defaultsLayers._style[type] = style;
};

proto.resetDefaultLayerStyle = function (type) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (type && this.defaultsLayers[type]) this.defaultsLayers._style[type] = {
    color: type === 'highlightLayer' ? undefined : 'red'
  };
};

proto.removeLayers = function () {
  this._removeBaseLayers();
  this._removeMapLayers();
  this.removeExternalLayers();
  this.removeDefaultLayers();
};

proto.removeAllLayers = function () {
  this.viewer.removeLayers();
};

proto.addLayerToMap = function (layer) {
  var olLayer = layer.getOLLayer();
  olLayer && this.getMap().addLayer(olLayer);
};

proto._setMapProjectionToLayers = function (layers) {
  var _this26 = this;

  // setup mapProjection on ech layers
  layers.forEach(function (layer) {
    return layer.setMapProjection(_this26.getProjection());
  });
};

proto.createMapLayer = function (layer) {
  layer.setMapProjection(this.getProjection());
  var multilayerId = 'layer_' + layer.getMultiLayerId();
  var mapLayer = layer.getMapLayer({
    id: multilayerId,
    projection: this.getProjection()
  }, this.layersExtraParams);
  mapLayer.addLayer(layer);
  return mapLayer;
};

proto.getOverviewMapLayers = function (project) {
  var WMSLayer = require('core/layers/map/wmslayer');
  var projectLayers = project.getLayersStore().getLayers({
    GEOLAYER: true,
    BASELAYER: false
  });
  var multiLayers = _.groupBy(projectLayers, function (layer) {
    return layer.getMultiLayerId();
  });
  var overviewMapLayers = [];

  Object.entries(multiLayers).forEach(function (_ref29) {
    var _ref30 = _slicedToArray(_ref29, 2),
        id = _ref30[0],
        layers = _ref30[1];

    var multilayerId = 'overview_layer_' + id;
    var tiled = layers[0].state.tiled;
    var config = {
      url: project.getWmsUrl(),
      id: multilayerId,
      tiled: tiled
    };
    var mapLayer = new WMSLayer(config);
    layers.reverse().forEach(function (layer) {
      return mapLayer.addLayer(layer);
    });
    overviewMapLayers.push(mapLayer.getOLLayer(true));
  });
  return overviewMapLayers.reverse();
};

proto.updateMapLayer = function (mapLayer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$force = options.force,
      force = _options$force === undefined ? false : _options$force;

  !force ? mapLayer.update(this.state, {}) : mapLayer.update(this.state, { "time": Date.now() });
};

// run update function on ech mapLayer
proto.updateMapLayers = function () {
  var _this27 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.getMapLayers().forEach(function (mapLayer) {
    return _this27.updateMapLayer(mapLayer, options);
  });
  var baseLayers = this.getBaseLayers();
  //updatebase layer
  Object.values(baseLayers).forEach(function (baseLayer) {
    return baseLayer.update(_this27.state, _this27.layersExtraParams);
  });
};

// register map Layer listeners of creation
proto.registerMapLayerListeners = function (mapLayer) {
  var _this28 = this;

  mapLayer.on('loadstart', this._incrementLoaders);
  mapLayer.on('loadend', this._decrementLoaders);
  mapLayer.on('loaderror', this._mapLayerLoadError);
  //listen change filter token
  if (mapLayer.layers && Array.isArray(mapLayer.layers)) mapLayer.layers.forEach(function (layer) {
    layer.onbefore('change', function () {
      return _this28.updateMapLayer(mapLayer, { force: true });
    });
    layer.on('filtertokenchange', function () {
      return _this28.updateMapLayer(mapLayer, { force: true });
    });
  });
  ///
};

// unregister listeners of mapLayers creation
proto.unregisterMapLayerListeners = function (mapLayer) {
  mapLayer.off('loadstart', this._incrementLoaders);
  mapLayer.off('loadend', this._decrementLoaders);
  mapLayer.off('loaderror', this._mapLayerLoadError);
  // try to remove layer filter token
  if (mapLayer.layers && Array.isArray(mapLayer.layers)) mapLayer.layers.forEach(function (layer) {
    layer.un('change');
    layer.removeEvent('filtertokenchange');
  });
};

proto.setTarget = function (elId) {
  this.target = elId;
};

proto.getCurrentToggledMapControl = function () {
  var mapControl = this._mapControls.find(function (_ref31) {
    var control = _ref31.control;
    return control && control.isToggled && control.isToggled();
  });
  return mapControl && mapControl.control;
};

/**
 * close: paramt to close eventually right content open
 * @param interaction
 * @param close
 */
proto.addInteraction = function (interaction, close) {
  var control = this.getCurrentToggledMapControl();
  var untoggleMapControls = control && control.isClickMap ? control.isClickMap() : true;
  untoggleMapControls && this._unToggleControls({
    close: close
  });
  this.viewer.map.addInteraction(interaction);
  interaction.setActive(true);
};

proto.removeInteraction = function (interaction) {
  interaction && interaction.setActive(false);
  this.viewer.map.removeInteraction(interaction);
};

proto._watchInteraction = function (interaction) {
  var _this29 = this;

  interaction.on('change:active', function (e) {
    if (e.target instanceof ol.interaction.Pointer && e.target.getActive()) {
      _this29.emit('mapcontrol:active', e.target);
    }
  });
};

proto.zoomTo = function (coordinate, zoom) {
  zoom = _.isNumber(zoom) ? zoom : 6;
  this.viewer.zoomTo(coordinate, zoom);
};

proto.goTo = function (coordinates, zoom) {
  var options = {
    zoom: zoom || 6
  };
  this.viewer.goTo(coordinates, options);
};

proto.goToRes = function (coordinates, resolution) {
  this.viewer.goToRes(coordinates, {
    resolution: resolution
  });
};

proto.getGeometryAndExtentFromFeatures = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var extent = void 0;
  var geometryType = void 0;
  var geometry = void 0;
  var coordinates = void 0;
  var geometryCoordinates = [];
  for (var i = 0; i < features.length; i++) {
    var feature = features[i];
    var _geometry = feature.getGeometry ? feature.getGeometry() : feature.geometry;
    if (_geometry) {
      if (_geometry instanceof ol.geom.Geometry) {
        var featureExtent = [].concat(_toConsumableArray(_geometry.getExtent()));
        extent = !extent ? featureExtent : ol.extent.extend(extent, featureExtent);
        geometryType = geometryType ? geometryType : _geometry.getType();
        coordinates = _geometry.getCoordinates();
        if (geometryType.includes('Multi')) geometryCoordinates = [].concat(_toConsumableArray(geometryCoordinates), _toConsumableArray(coordinates));else geometryCoordinates.push(coordinates);
      } else {
        var _featureExtent = feature.bbox;
        extent = !extent ? _featureExtent : ol.extent.extend(extent, _featureExtent);
        geometryType = _geometry.type;
        coordinates = _geometry.coordinates;
      }
      if (geometryType.includes('Multi')) geometryCoordinates = [].concat(_toConsumableArray(geometryCoordinates), _toConsumableArray(coordinates));else geometryCoordinates.push(coordinates);
    }
  }
  try {
    var olClassGeomType = geometryType.includes('Multi') ? geometryType : 'Multi' + geometryType;
    geometry = new ol.geom[olClassGeomType](geometryCoordinates);
  } catch (err) {}
  return {
    extent: extent,
    geometry: geometry
  };
};

proto.highlightFeatures = function (features) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _getGeometryAndExtent = this.getGeometryAndExtentFromFeatures(features),
      geometry = _getGeometryAndExtent.geometry;
  //force zoom false


  options.zoom = false;
  this.highlightGeometry(geometry, options);
};

proto.zoomToFeatures = function (features) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { highlight: false };

  var _getGeometryAndExtent2 = this.getGeometryAndExtentFromFeatures(features),
      geometry = _getGeometryAndExtent2.geometry,
      extent = _getGeometryAndExtent2.extent;

  var highlight = options.highlight;

  if (highlight && extent) options.highLightGeometry = geometry;
  extent && this.zoomToExtent(extent, options);
};

proto.zoomToExtent = function (extent) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var center = ol.extent.getCenter(extent);
  var resolution = this.getResolutionForZoomToExtent(extent);
  this.goToRes(center, resolution);
  options.highLightGeometry && this.highlightGeometry(options.highLightGeometry, {
    zoom: false,
    duration: options.duration
  });
};

proto.zoomToProjectInitExtent = function () {
  this.zoomToExtent(this.project.state.initextent);
};

proto.compareExtentWithProjectMaxExtent = function (extent) {
  var projectExtent = this.project.state.extent;
  var inside = ol.extent.containsExtent(projectExtent, extent);
  return inside ? extent : projectExtent;
};

proto.getResolutionForZoomToExtent = function (extent) {
  var resolution = void 0;
  var map = this.getMap();
  var projectExtent = this.project.state.extent;
  var projectMaxResolution = map.getView().getResolutionForExtent(projectExtent, map.getSize());
  var inside = ol.extent.containsExtent(projectExtent, extent);
  // max resolution of the map
  var maxResolution = getResolutionFromScale(SETTINGS.zoom.maxScale, this.getMapUnits()); // map resolution of the map
  // check if
  if (inside) {
    // calculate main resolutions
    var currentResolution = map.getView().getResolution(); // Current Resolution
    var extentResolution = map.getView().getResolutionForExtent(extent, map.getSize()); // resolution of request extent
    ////
    // set the final resolution to go to
    resolution = extentResolution > maxResolution ? extentResolution : maxResolution;
    resolution = currentResolution < resolution && currentResolution > extentResolution ? currentResolution : resolution;
  } else resolution = projectMaxResolution; // set max resolution
  return resolution;
};

proto.goToBBox = function (bbox) {
  var epsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getEpsg();

  bbox = epsg === this.getEpsg() ? bbox : ol.proj.transformExtent(bbox, epsg, this.getEpsg());
  this.viewer.fit(this.compareExtentWithProjectMaxExtent(bbox));
};

proto.goToWGS84 = function (coordinates, zoom) {
  coordinates = ol.proj.transform(coordinates, 'EPSG:4326', this.project.state.crs.epsg);
  this.goTo(coordinates, zoom);
};

proto.extentToWGS84 = function (extent) {
  return ol.proj.transformExtent(extent, this.project.state.crs.epsg, 'EPSG:4326');
};

proto.getResolutionForMeters = function (meters) {
  var viewport = this.viewer.map.getViewport();
  return meters / Math.max(viewport.clientWidth, viewport.clientHeight);
};

var animatingHighlight = false;

/*
* geometries = array of geometries
* action: add, clear, remove :
*                             add: feature/features to selectionLayer. If selectionLayer doesn't exist create a  new vector layer.
*                             clear: remove selectionLayer
*                             remove: remove feature from selectionlayer. If no more feature are in selectionLayer it will be removed
* */
proto.setSelectionFeatures = function () {
  var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'add';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var feature = options.feature,
      color = options.color;

  color && this.setDefaultLayerStyle('selectionLayer', { color: color });
  var source = this.defaultsLayers.selectionLayer.getSource();
  switch (action) {
    case 'add':
      source.addFeature(feature);
      break;
    case 'remove':
      source.removeFeature(feature);
      break;
    case 'update':
      var id = feature.getId();
      var addedFeature = source.getFeatureById(id);
      addedFeature.setGeometry(feature.getGeometry());
      break;
    case 'clear':
      source.clear();
      break;
  }
};

proto.clearSelectionFeatures = function () {
  this.defaultsLayers.selectionLayer.getSource().clear();
};

proto.seSelectionLayerVisible = function () {
  var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.defaultsLayers.selectionLayer.setVisible(visible);
};

proto.highlightGeometry = function (geometryObj) {
  var _this30 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return new Promise(function (resolve, reject) {
    var color = options.color;

    _this30.clearHighlightGeometry();
    _this30.setDefaultLayerStyle('highlightLayer', {
      color: color
    });
    var zoom = typeof options.zoom === 'boolean' ? options.zoom : true;
    var hide = options.hide;
    if (hide) hide = typeof hide === 'function' ? hide : null;
    var customStyle = options.style;
    var defaultStyle = function defaultStyle(feature) {
      var styles = [];
      var geometryType = feature.getGeometry().getType();
      var style = createSelectedStyle({
        geometryType: geometryType,
        color: color
      });
      styles.push(style);
      return styles;
    };
    var highlight = typeof options.highlight == 'boolean' ? options.highlight : true;
    var duration = options.duration || SETTINGS.animation.duration;
    var geometry = void 0;
    if (geometryObj instanceof ol.geom.Geometry) geometry = geometryObj;else {
      var format = new ol.format.GeoJSON();
      geometry = format.readGeometry(geometryObj);
    }
    if (zoom) {
      var extent = geometry.getExtent();
      _this30.zoomToExtent(extent);
    }
    if (highlight) {
      var feature = new ol.Feature({
        geometry: geometry
      });
      var highlightLayer = _this30.defaultsLayers.highlightLayer;
      customStyle && highlightLayer.setStyle(customStyle);
      highlightLayer.getSource().addFeature(feature);
      if (hide) {
        var callback = function callback() {
          highlightLayer.getSource().clear();
          customStyle && highlightLayer.setStyle(defaultStyle);
          resolve();
        };
        hide(callback);
      } else if (duration) {
        if (duration !== Infinity) {
          animatingHighlight = true;
          setTimeout(function () {
            highlightLayer.getSource().clear();
            customStyle && highlightLayer.setStyle(defaultStyle);
            animatingHighlight = false;
            resolve();
          }, duration);
        }
      }
    } else resolve();
  });
};

proto.clearHighlightGeometry = function () {
  !animatingHighlight && this.defaultsLayers.highlightLayer.getSource().clear();
  this.resetDefaultLayerStyle('highlightLayer');
};

proto.refreshMap = function (options) {
  this.updateMapLayers(options);
};

// called when layout (window) resize
proto.layout = function (_ref32) {
  var width = _ref32.width,
      height = _ref32.height;

  var is_hidden = width <= 0 || height <= 0;
  if (!this.viewer) {
    this.setupViewer(width, height);
    if (this.viewer) {
      this.setupControls();
      this.emit('ready');
    }
  } else {
    if (!is_hidden) {
      this.getMap().updateSize();
      this.state.hidemaps.forEach(function (hidemap) {
        return hidemap.map.updateSize();
      });
      this._updateMapView();
    }
  }
  this.setHidden(is_hidden);
  this._mapControls.length && this._updateMapControlsLayout({ width: width, height: height });
};

//remove BaseLayers
proto._removeBaseLayers = function () {
  var _this31 = this;

  Object.keys(this.mapBaseLayers).forEach(function (baseLayerId) {
    _this31.viewer.map.removeLayer(_this31.mapBaseLayers[baseLayerId].getOLLayer());
  });
};

// function to remove maplayers
proto._removeMapLayers = function () {
  var _this32 = this;

  this.getMapLayers().forEach(function (mapLayer) {
    _this32.unregisterMapLayerListeners(mapLayer);
    _this32.viewer.map.removeLayer(mapLayer.getOLLayer());
  });
  this._mapLayers = [];
};

proto.getMapBBOX = function () {
  return this.viewer.getBBOX();
};

proto._updateMapView = function () {
  var bbox = this.viewer.getBBOX();
  var resolution = this.viewer.getResolution();
  var center = this.viewer.getCenter();
  var size = this.getMap().getSize();
  this.updateMapView(bbox, resolution, center, size);
};

proto.getMapSize = function () {
  var map = this.viewer.map;
  return map.getSize();
};

proto.setInnerGreyCoverScale = function (scale) {
  this._drawShadow.scale = scale;
};

proto._resetDrawShadowInner = function () {
  this._drawShadow = {
    type: 'coordinate',
    outer: [],
    inner: [],
    scale: null,
    rotation: null
  };
};

proto.setInnerGreyCoverBBox = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var map = this.viewer.map;
  var type = options.type || 'coordinate';
  var inner = options.inner || null;
  var rotation = options.rotation;
  var scale = options.scale;
  var lowerLeftInner = void 0;
  var upperRightInner = void 0;
  if (inner) {
    switch (type) {
      case 'coordinate':
        lowerLeftInner = map.getPixelFromCoordinate([inner[0], inner[1]]);
        upperRightInner = map.getPixelFromCoordinate([inner[2], inner[3]]);
        break;
      case 'pixel':
        lowerLeftInner = [inner[0], inner[1]];
        upperRightInner = [inner[2], inner[3]];
        break;
    }
    var y_min = lowerLeftInner[1] * ol.has.DEVICE_PIXEL_RATIO;
    var x_min = lowerLeftInner[0] * ol.has.DEVICE_PIXEL_RATIO;
    var y_max = upperRightInner[1] * ol.has.DEVICE_PIXEL_RATIO;
    var x_max = upperRightInner[0] * ol.has.DEVICE_PIXEL_RATIO;
    this._drawShadow.inner[0] = x_min;
    this._drawShadow.inner[1] = y_min;
    this._drawShadow.inner[2] = x_max;
    this._drawShadow.inner[3] = y_max;
  }
  if (_.isNil(scale)) this._drawShadow.scale = this._drawShadow.scale || 1;else this._drawShadow.scale = scale;

  if (_.isNil(rotation)) this._drawShadow.rotation = this._drawShadow.rotation || 0;else this._drawShadow.rotation = rotation;

  this._drawShadow.outer && map.render();
};

// grey map precompose mapcompose
proto.startDrawGreyCover = function (message) {
  var _this33 = this;

  // after rendering the layer, restore the canvas context
  var map = this.viewer.map;
  var x_min = void 0,
      x_max = void 0,
      y_min = void 0,
      y_max = void 0,
      rotation = void 0,
      scale = void 0;
  this.stopDrawGreyCover();
  var postcompose = function postcompose(evt) {
    var ctx = evt.context;
    var size = _this33.getMap().getSize();
    // Inner polygon,must be counter-clockwise
    var height = size[1] * ol.has.DEVICE_PIXEL_RATIO;
    var width = size[0] * ol.has.DEVICE_PIXEL_RATIO;
    _this33._drawShadow.outer = [0, 0, width, height];
    ctx.restore();
    ctx.beginPath();
    // Outside polygon, must be clockwise
    ctx.moveTo(0, 0);
    ctx.lineTo(width, 0);
    ctx.lineTo(width, height);
    ctx.lineTo(0, height);
    ctx.lineTo(0, 0);
    ctx.closePath();
    // end external bbox (map is cover)
    if (_this33._drawShadow.inner.length) {
      ctx.save();
      x_min = _this33._drawShadow.inner[0];
      y_min = _this33._drawShadow.inner[3];
      x_max = _this33._drawShadow.inner[2];
      y_max = _this33._drawShadow.inner[1];
      rotation = _this33._drawShadow.rotation;
      scale = _this33._drawShadow.scale;
      // Inner polygon,must be counter-clockwise antiorario
      ctx.translate((x_max + x_min) / 2, (y_max + y_min) / 2);
      ctx.rotate(rotation * Math.PI / 180);
      ctx.moveTo(-((x_max - x_min) / 2), (y_max - y_min) / 2);
      ctx.lineTo((x_max - x_min) / 2, (y_max - y_min) / 2);
      ctx.lineTo((x_max - x_min) / 2, -((y_max - y_min) / 2));
      ctx.lineTo(-((x_max - x_min) / 2), -((y_max - y_min) / 2));
      ctx.lineTo(-((x_max - x_min) / 2), (y_max - y_min) / 2);
      ctx.closePath();
      // end inner bbox
    }
    ctx.fillStyle = 'rgba(0, 5, 25, 0.40)';
    ctx.fill();
    if (message) {
      ctx.font = "bold 25px Arial";
      ctx.fillStyle = "#ffffff";
      ctx.textAlign = "center";
      var arrayMessages = message.split('\n');
      for (var i = 0; i < arrayMessages.length; i++) {
        ctx.fillText(arrayMessages[i], width / 2, height / 2 + 30 * i);
      }
      //ctx.fillText(message,width/2, height/2);
    }
    ctx.restore();
  };
  this._greyListenerKey = map.on('postcompose', postcompose);
};

proto.stopDrawGreyCover = function () {
  var map = this.getMap();
  if (this._greyListenerKey) {
    ol.Observable.unByKey(this._greyListenerKey);
    this._greyListenerKey = null;
    this._drawShadow.inner.length && this._resetDrawShadowInner();
  }
  map.render();
};

proto.removeExternalLayers = function () {
  var _this34 = this;

  this._externalLayers.forEach(function (layer) {
    var name = layer.get('name');
    _this34.removeExternalLayer(name);
  });
  this._externalLayers = [];
};

proto.removeExternalLayer = function (name) {
  var layer = this.getLayerByName(name);
  var catalogService = GUI.getComponent('catalog').getService();
  var QueryResultService = GUI.getComponent('queryresults').getService();
  QueryResultService.unregisterVectorLayer(layer);
  this.viewer.map.removeLayer(layer);
  catalogService.removeExternalLayer(name);
};

proto.addExternalLayer = function () {
  var _ref33 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(externalLayer) {
    var _this35 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var vectorLayer, name, data, color, style, type, crs, map, catalogService, QueryResultService, _color, _style, layer, loadExternalLayer;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            vectorLayer = void 0, name = void 0, data = void 0, color = void 0, style = void 0, type = void 0, crs = void 0;
            map = this.viewer.map;
            catalogService = GUI.getComponent('catalog').getService();
            QueryResultService = GUI.getComponent('queryresults').getService();

            if (externalLayer instanceof ol.layer.Vector) {
              externalLayer.get('id') === undefined && externalLayer.set('id', uniqueId());
              vectorLayer = externalLayer;
              _color = void 0;

              try {
                _style = externalLayer.getStyle();

                _color = _style._g3w_options ? _style._g3w_options.color : 'blue'; //setted by geo utils create style function
              } catch (err) {
                _color = 'blue';
              }
              name = vectorLayer.get('name') || vectorLayer.get('id');
              type = 'vector';
              externalLayer = {
                name: name,
                title: name,
                removable: true,
                external: true,
                crs: options.crs,
                type: options.type,
                download: options.download || false,
                visible: true,
                color: _color
              };
            } else {
              name = externalLayer.name;
              type = externalLayer.type;
              crs = externalLayer.crs;
              data = externalLayer.data;
              color = externalLayer.color;
            }
            layer = this.getLayerByName(name);

            loadExternalLayer = function loadExternalLayer(layer) {
              if (layer) {
                var features = layer.getSource().getFeatures();
                if (features.length) externalLayer.geometryType = features[0].getGeometry().getType();
                var extent = layer.getSource().getExtent();
                externalLayer.bbox = {
                  minx: extent[0],
                  miny: extent[1],
                  maxx: extent[2],
                  maxy: extent[3]
                };
                externalLayer.checked = true;
                map.addLayer(layer);
                _this35._externalLayers.push(layer);
                QueryResultService.registerVectorLayer(layer);
                catalogService.addExternalLayer(externalLayer);
                map.getView().fit(extent);
                return Promise.resolve(layer);
              } else return Promise.reject();
            };

            if (layer) {
              _context5.next = 20;
              break;
            }

            _context5.t0 = type;
            _context5.next = _context5.t0 === 'vector' ? 11 : 13;
            break;

          case 11:
            return _context5.abrupt('return', loadExternalLayer(vectorLayer));

          case 13:
            _context5.next = 15;
            return createVectorLayerFromFile({
              name: name, type: type, crs: crs, mapCrs: mapCrs, data: data, style: style
            });

          case 15:
            vectorLayer = _context5.sent;
            return _context5.abrupt('return', loadExternalLayer(vectorLayer));

          case 17:
            loadExternalLayer(vectorLayer);
            _context5.next = 21;
            break;

          case 20:
            GUI.notify.warning("layer_is_added", true);

          case 21:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function (_x38) {
    return _ref33.apply(this, arguments);
  };
}();

proto.setExternalLayerStyle = function (color, field) {
  color = color.rgba;
  color = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
  var defaultStyle = {
    'Point': new ol.style.Style({
      image: new ol.style.Circle({
        fill: new ol.style.Fill({
          color: color
        }),
        radius: 5,
        stroke: new ol.style.Stroke({
          color: color,
          width: 1
        })
      })
    }),
    'LineString': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: color,
        width: 3
      })
    }),
    'Polygon': new ol.style.Style({
      fill: new ol.style.Fill({
        color: 'rgba(255,255,255,0.5)'
      }),
      stroke: new ol.style.Stroke({
        color: color,
        width: 3
      })
    }),
    'MultiPoint': new ol.style.Style({
      image: new ol.style.Circle({
        fill: new ol.style.Fill({
          color: color
        }),
        radius: 5,
        stroke: new ol.style.Stroke({
          color: color,
          width: 1
        })
      })
    }),
    'MultiLineString': new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: color,
        width: 3
      })
    }),
    'MultiPolygon': new ol.style.Style({
      fill: new ol.style.Fill({
        color: 'rgba(255,255,255,0.5)'
      }),
      stroke: new ol.style.Stroke({
        color: color,
        width: 3
      })
    })
  };
  var styleFunction = function styleFunction(feature, resolution) {
    var featureStyleFunction = feature.getStyleFunction();
    return featureStyleFunction ? featureStyleFunction.call(feature, resolution) : defaultStyle[feature.getGeometry().getType()];
  };
  return styleFunction;
};

module.exports = MapService;

},{"constant":399,"core/applicationservice":401,"core/data/routerservice":406,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/layers/map/wmslayer":454,"core/layers/providers/wfsprovider":461,"core/layers/vectorlayer":465,"core/map/maplayersstoresregistry":466,"core/project/projectsregistry":478,"core/utils/geo":484,"core/utils/utils":485,"g3w-ol/src/g3w.ol":521,"g3w-ol/src/utils/utils":534,"gui/gui":575,"gui/map/control/factory":630,"gui/map/control/registry":631,"gui/streetview/streetviewservice":695}],633:[function(require,module,exports){
module.exports = "<!-- Modal -->\n<div class=\"modal fade\" id=\"modal-addlayer\" ref=\"modal_addlayer\" role=\"dialog\">\n  <div class=\"modal-dialog\">\n    <!-- Modal content-->\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n        <h4 style=\"font-weight: bold\" v-t=\"'mapcontrols.add_layer_control.header'\" class=\"modal-title\"></h4>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"form-group\">\n          <label v-t=\"'mapcontrols.add_layer_control.select_projection'\" for=\"projection-layer\"></label>\n          <select class=\"form-control\" id=\"projection-layer\" v-model=\"layer.crs\">\n            <option v-for=\"option in options\" :value=\"option\">{{option}}</option>\n          </select>\n        </div>\n        <p v-t=\"'mapcontrols.add_layer_control.select_color'\" style=\"font-weight: 700;\"></p>\n        <chrome-picker v-model=\"layer.color\" @change-color=\"onChangeColor\" style=\"width:100%; margin:auto\"></chrome-picker>\n        <bar-loader :loading=\"loading\"></bar-loader>\n        <form id=\"addcustomlayer\">\n          <input ref=\"input_file\" type=\"file\" title=\" \" @change=\"onAddLayer($event)\" :accept=\"accepted_extension\">\n          <h4 v-t=\"'mapcontrols.add_layer_control.drag_layer'\"></h4>\n          <h4 class=\"skin-color\" style=\"font-weight: bold\" v-if=\"layer.name\">{{ layer.name }}</h4>\n          <div>\n            <i :class=\"g3wtemplate.getFontClass('cloud-upload')\" class=\"fa-5x\" aria-hidden=\"true\"></i>\n          </div>\n          <p style=\"font-weight: bold\">[.gml, .geojson, .kml, .gpx, .csv, .zip(shapefile)]</p>\n        </form>\n        <div v-if=\"csv_extension\" style=\"padding: 15px; border: 1px solid grey; border-radius: 3px\">\n          <bar-loader :loading=\"csv.loading\"></bar-loader>\n          <div class=\"select_field\">\n            <label v-t=\"'mapcontrols.add_layer_control.select_csv_separator'\" for=\"g3w-select-field-layer\"></label>\n            <select class=\"form-control\" id=\"g3w-select-separator\" v-model=\"csv.separator\">\n              <option v-for=\"separator in csv.separators\" :key=\"separator\" :value=\"separator\">{{ separator }}</option>\n            </select>\n\n          <div class=\"select_field\" :class=\"{'g3w-disabled': !csv.headers || csv.headers.length === 0}\">\n            <label v-t=\"'mapcontrols.add_layer_control.select_csv_x_field'\" for=\"g3w-select-x-field\"></label>\n            <select class=\"form-control\" id=\"g3w-select-x-field\" v-model=\"csv.x\">\n              <option v-for=\"header in csv.headers\" :key=\"header\" :value=\"header\">{{ header }}</option>\n            </select>\n          </div>\n\n          <div class=\"select_field\" :class=\"{'g3w-disabled': !csv.headers || csv.headers.length === 0}\">\n            <label v-t=\"'mapcontrols.add_layer_control.select_csv_y_field'\" for=\"g3w-select-y-field\"></label>\n            <select class=\"form-control\" id=\"g3w-select-y-field\" v-model=\"csv.y\">\n              <option v-for=\"header in csv.headers\" :key=\"header\" :value=\"header\">{{ header }}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"select_field\" :class=\"{'g3w-disabled': !fields || fields.length === 0}\">\n          <label v-t=\"'mapcontrols.add_layer_control.select_field_to_show'\" for=\"g3w-select-field-layer\"></label>\n          <select class=\"form-control\" id=\"g3w-select-field-layer\" v-model=\"field\">\n            <option :value=\"null\">---</option>\n            <option v-for=\"field in fields\" :key=\"field\" :value=\"field\">{{ field }}</option>\n          </select>\n        </div>\n        <div style=\"font-weight: bold; font-size: 1.2em; background-color: orange; padding: 10px; text-align: center\" v-if=\"error\" v-t=\"error_message\"></div>\n      <div class=\"modal-footer\">\n        <button v-t=\"'add'\" type=\"button\" class=\"btn btn-success pull-left\" @click=\"addLayer\" :disabled=\"!add\"></button>\n        <button v-t=\"'close'\" type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"></button>\n      </div>\n    </div>\n  </div>\n</div>\n";

},{}],634:[function(require,module,exports){
function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/geo'),
    createVectorLayerFromFile = _require.createVectorLayerFromFile,
    createStyleFunctionToVectorLayer = _require.createStyleFunctionToVectorLayer;

var SUPPORTED_FORMAT = ['zip', 'geojson', 'GEOJSON', 'kml', 'KML', 'json', 'gpx', 'gml', 'csv'];
var CSV_SEPARATORS = [',', ';'];

var EPSG = ["EPSG:3003", "EPSG:3004", "EPSG:3045", "EPSG:3857", "EPSG:4326", "EPSG:6708", "EPSG:23032", "EPSG:23033", "EPSG:25833", "EPSG:32632", "EPSG:32633"];

//Vue color componet
var ChromeComponent = VueColor.Chrome;
ChromeComponent.mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return this.$nextTick();

        case 2:
          // remove all the tihing that aren't useful
          $('.vue-color__chrome__toggle-btn').remove();
          $('.vue-color__editable-input__label').remove();
          $('.vue-color__chrome__saturation-wrap').css('padding-bottom', '100px');
          $('.vue-color__chrome').css({
            'box-shadow': '0 0 0 0',
            'border': '1px solid #97A1A8'
          });

        case 6:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this);
}));

var AddLayerComponent = {
  template: require('./addlayer.html'),
  props: ['service'],
  data: function data() {
    //add map crs if not present
    var MAPEPSG = this.service.getCrs();
    EPSG.find(function (epsg) {
      return epsg === MAPEPSG;
    }) === undefined && EPSG.unshift(MAPEPSG);
    return {
      vectorLayer: null,
      options: EPSG,
      error: false,
      error_message: null,
      loading: false,
      fields: [],
      field: null,
      accepted_extension: SUPPORTED_FORMAT.map(function (format) {
        return '.' + format;
      }).join(','),
      csv: {
        valid: false,
        loading: false,
        headers: [],
        x: null,
        y: null,
        separators: CSV_SEPARATORS,
        separator: CSV_SEPARATORS[0]
      },
      layer: {
        name: null,
        type: null,
        crs: null,
        mapCrs: null,
        color: {
          hex: '#194d33',
          rgba: {
            r: 25,
            g: 77,
            b: 51,
            a: 1
          },
          a: 1
        },
        data: null,
        visible: true,
        title: null,
        id: null,
        external: true
      }
    };
  },

  components: {
    'chrome-picker': ChromeComponent
  },
  methods: {
    setError: function setError(type) {
      this.error_message = 'sdk.errors.' + type;
      this.error = true;
    },
    clearError: function clearError() {
      this.error = false;
      this.error_message = null;
    },
    onChangeColor: function onChangeColor(val) {
      this.layer.color = val;
    },
    onAddLayer: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(evt) {
        var _this = this;

        var reader, name, type, input_file, promiseData;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.csv.valid = true;
                reader = new FileReader();
                name = evt.target.files[0].name;
                type = evt.target.files[0].name.split('.');

                type = type[type.length - 1].toLowerCase();
                input_file = $(this.$refs.input_file);

                if (!(SUPPORTED_FORMAT.indexOf(type) !== -1)) {
                  _context2.next = 33;
                  break;
                }

                this.clearError();
                this.layer.mapCrs = this.service.getEpsg();
                this.layer.name = name;
                this.layer.title = name;
                this.layer.id = name;
                this.layer.type = type;

                if (!(this.layer.type === 'csv')) {
                  _context2.next = 18;
                  break;
                }

                // in case of csv
                reader.onload = function (evt) {
                  input_file.val(null);
                  var csv_data = evt.target.result.split(/\r\n|\n/).filter(function (row) {
                    return row;
                  });

                  var _csv_data = _toArray(csv_data),
                      headers = _csv_data[0],
                      values = _csv_data.slice(1);

                  var handle_csv_headers = function handle_csv_headers(separator) {
                    var data = void 0;
                    _this.csv.loading = true;
                    var csv_headers = headers.split(separator);
                    var headers_length = csv_headers.length;
                    if (headers_length > 1) {
                      _this.csv.headers = csv_headers;
                      _this.fields = csv_headers;
                      _this.csv.x = csv_headers[0];
                      _this.csv.y = csv_headers[1];
                      data = {
                        headers: csv_headers,
                        separator: separator,
                        x: _this.csv.x,
                        y: _this.csv.y,
                        values: values
                      };
                      _this.csv.valid = true;
                    } else {
                      _this.csv.headers = _this.fields = [];
                      _this.vectorLayer = null;
                      _this.csv.valid = false;
                      _this.fields.splice(0);
                    }
                    _this.csv.loading = false;
                    return data;
                  };
                  _this.layer.data = handle_csv_headers(_this.csv.separator);
                  _this.$watch('csv.separator', function (separator) {
                    return _this.layer.data = handle_csv_headers(separator);
                  });
                };
                reader.readAsText(evt.target.files[0]);
                _context2.next = 31;
                break;

              case 18:
                promiseData = new Promise(function (resolve, reject) {
                  if (_this.layer.type === 'zip') {
                    // in case of shapefile (zip file)
                    var data = evt.target.files[0];
                    input_file.val(null);
                    resolve(data);
                  } else {
                    reader.onload = function (evt) {
                      var data = evt.target.result;
                      input_file.val(null);
                      resolve(data);
                    };
                    reader.readAsText(evt.target.files[0]);
                  }
                });
                _context2.next = 21;
                return promiseData;

              case 21:
                this.layer.data = _context2.sent;
                _context2.prev = 22;

                this.fields.splice(0); //reset eventually the fields
                _context2.next = 26;
                return this.createVectorLayer();

              case 26:
                this.fields = this.vectorLayer.get('_fields');
                _context2.next = 31;
                break;

              case 29:
                _context2.prev = 29;
                _context2.t0 = _context2['catch'](22);

              case 31:
                _context2.next = 34;
                break;

              case 33:
                this.setError('unsupported_format');

              case 34:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[22, 29]]);
      }));

      function onAddLayer(_x) {
        return _ref2.apply(this, arguments);
      }

      return onAddLayer;
    }(),
    createVectorLayer: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return createVectorLayerFromFile(this.layer);

              case 3:
                this.vectorLayer = _context3.sent;
                _context3.next = 6;
                return this.$nextTick();

              case 6:
                _context3.next = 11;
                break;

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3['catch'](0);
                this.setError('add_external_layer');
              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 8]]);
      }));

      function createVectorLayer() {
        return _ref3.apply(this, arguments);
      }

      return createVectorLayer;
    }(),
    addLayer: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.vectorLayer || this.csv.valid)) {
                  _context4.next = 17;
                  break;
                }

                this.loading = true;
                //Recreate always the vector layer because we can set the right epsg after first load the file
                // if we change the epsg of the layer after loaded
                _context4.prev = 2;
                _context4.next = 5;
                return createVectorLayerFromFile(this.layer);

              case 5:
                this.vectorLayer = _context4.sent;

                this.vectorLayer.setStyle(createStyleFunctionToVectorLayer({
                  color: this.layer.color,
                  field: this.field
                }));
                _context4.next = 9;
                return this.service.addExternalLayer(this.vectorLayer, {
                  crs: this.layer.crs,
                  type: this.layer.type
                });

              case 9:
                $(this.$refs.modal_addlayer).modal('hide');
                this.clearLayer();
                _context4.next = 16;
                break;

              case 13:
                _context4.prev = 13;
                _context4.t0 = _context4['catch'](2);

                this.setError('add_external_layer');

              case 16:
                this.loading = false;

              case 17:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 13]]);
      }));

      function addLayer() {
        return _ref4.apply(this, arguments);
      }

      return addLayer;
    }(),
    clearLayer: function clearLayer() {
      this.clearError();
      this.loading = false;
      this.layer.name = null;
      this.layer.title = null;
      this.layer.id = null;
      this.layer.type = null;
      this.layer.crs = this.service.getCrs();
      this.layer.color = {
        hex: '#194d33',
        rgba: {
          r: 25,
          g: 77,
          b: 51,
          a: 1
        },
        a: 1
      };
      this.layer.data = null;
      this.vectorLayer = null;
      this.fields = [];
      this.field = null;
    }
  },
  computed: {
    csv_extension: function csv_extension() {
      return this.layer.type === 'csv';
    },
    add: function add() {
      return this.vectorLayer || this.csv.valid;
    }
  },
  watch: {
    'csv.x': function csvX(value) {
      if (value) this.layer.data.x = value;
    },
    'csv.y': function csvY(value) {
      if (value) this.layer.data.y = value;
    }
  },
  created: function created() {
    var _this2 = this;

    this.layer.crs = this.service.getCrs();
    this.service.on('addexternallayer', function () {
      return _this2.modal.modal('show');
    });
  },
  mounted: function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var _this3 = this;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.$nextTick();

            case 2:
              this.modal = $('#modal-addlayer').modal('hide');
              this.modal.on('hidden.bs.modal', function () {
                return _this3.clearLayer();
              });

            case 4:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function mounted() {
      return _ref5.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.clearLayer();
    this.modal.modal('hide');
    this.modal.remove();
  }
};

module.exports = AddLayerComponent;

},{"./addlayer.html":633,"core/utils/geo":484}],635:[function(require,module,exports){
module.exports = "<div :id=\"maps_container\">\n  <div v-for=\"hidemap in hidemaps\"\n       :id=\"hidemap.id\"\n       :key=\"hidemap.id\"\n       class=\"g3w-map hidemap\">\n  </div>\n  <div :id=\"target\" class=\"g3w-map\">\n    <div class=\"g3w-map-controls\" v-disabled=\"disableMapControls\" ref=\"g3w-map-controls\" :class=\"mapcontrolsalignement\" ></div>\n    <div style=\"display: none;\">\n      <div id=\"marker\"></div>\n    </div>\n    <addlayer :service=\"service\"></addlayer>\n  </div>\n  <div id=\"map_footer\" class=\"skin-border-color\">\n    <div id=\"map_footer_left\"></div>\n    <div id=\"map_footer_right\" style=\"display: flex;\">\n      <div id=\"scale-control\"></div>\n      <div id=\"mouse-position-control\"></div>\n      <div id=\"permalink\" data-toggle=\"tooltip\" data-placement=\"top\" class=\"skin-tooltip-top\" v-t-tooltip=\"'sdk.tooltips.copy_map_extent_url'\"\n           style=\"background-color: #eeeeee\">\n        <span class=\"skin-color\" :class=\"g3wtemplate.getFontClass('link')\" @click=\"createCopyMapExtentUrl\"></span>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\n";

},{}],636:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    merge = _require.merge,
    inherit = _require.inherit;

var Component = require('gui/vue/component');
var AddLayerComponent = require('./addlayer');
var MapService = require('../mapservice');
var templateCompiled = (0, _utils.createCompiledTemplate)(require('./map.html'));

// map vue component
var vueComponentOptions = _extends({}, templateCompiled, {
  data: function data() {
    var _$options = this.$options,
        service = _$options.service,
        target = _$options.target;

    return {
      ready: false,
      target: target,
      maps_container: this.$options.maps_container,
      service: service,
      hidemaps: service.state.hidemaps
    };
  },
  components: {
    'addlayer': AddLayerComponent
  },
  computed: {
    mapcontrolsalignement: function mapcontrolsalignement() {
      return this.service.state.mapcontrolsalignement;
    },
    disableMapControls: function disableMapControls() {
      return this.service.state.mapControl.disabled;
    }
  },
  methods: {
    showHideControls: function showHideControls() {
      var mapControls = this.$options.service.getMapControls();
      mapControls.forEach(function (control) {
        if (control.type !== "scaleline") control.control.showHide();
      });
    },
    getPermalinkUrl: function getPermalinkUrl() {
      return this.ready ? this.$options.service.getMapExtentUrl() : null;
    },
    createCopyMapExtentUrl: function createCopyMapExtentUrl() {
      var mapService = this.$options.service.createCopyMapExtentUrl();
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _this = this;

      var mapService;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              mapService = this.$options.service;

              mapService.once('ready', function () {
                _this.ready = true;
              });
              this.crs = mapService.getCrs();
              _context2.next = 5;
              return this.$nextTick();

            case 5:
              mapService.setMapControlsContainer($(this.$refs['g3w-map-controls']));
              $('#permalink').tooltip();
              // listen of after addHideMap
              mapService.onafter('addHideMap', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    ratio = _ref3.ratio,
                    _ref3$layers = _ref3.layers,
                    layers = _ref3$layers === undefined ? [] : _ref3$layers,
                    _ref3$mainview = _ref3.mainview,
                    mainview = _ref3$mainview === undefined ? false : _ref3$mainview,
                    _ref3$switchable = _ref3.switchable,
                    switchable = _ref3$switchable === undefined ? false : _ref3$switchable;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return _this.$nextTick();

                      case 2:
                        mapService._addHideMap({ ratio: ratio, layers: layers, mainview: mainview, switchable: switchable });

                      case 3:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, _this);
              })));

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),
  destroyed: function destroyed() {
    this.service.clear();
  }
});
// interanl registration
var InternalComponent = Vue.extend(vueComponentOptions);

Vue.component('g3w-map', vueComponentOptions);

function MapComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.id = "map-component";
  this.title = "Map Component";
  var target = options.target || "map";
  var maps_container = options.maps_container || "g3w-maps";
  options.target = target;
  options.maps_container = maps_container;
  this.setService(new MapService(options));
  merge(this, options);
  this.internalComponent = new InternalComponent({
    service: this._service,
    target: target,
    maps_container: maps_container
  });
}

inherit(MapComponent, Component);

var proto = MapComponent.prototype;

proto.layout = function (width, height) {
  $('#' + this.target).height(height);
  $('#' + this.target).width(width);
  this._service.layout({ width: width, height: height });
};

module.exports = MapComponent;

},{"../mapservice":632,"./addlayer":634,"./map.html":635,"core/utils/utils":485,"gui/vue/component":718,"gui/vue/utils":727}],637:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/utils/utils'),
    inherit = _require.inherit;

var GUI = require('gui/gui');
var G3WObject = require('core/g3wobject');
var ProjectsRegistry = require('core/project/projectsregistry');
var ProjectMetadataComponent = require('./vue/components/project/project');
var METADATAGROUPS = {
  general: ['title', 'name', 'description', 'abstract', 'keywords', 'fees', 'accessconstraints', 'contactinformation', 'wms_url'],
  spatial: ['crs', 'extent'],
  layers: ['layers']
};

function MetadataService() {
  this.content = null;
  this.show = false;
  this.state = {
    name: '',
    groups: {}
  };
  this._buildProjectGroupMetadata();
}

inherit(MetadataService, G3WObject);

var proto = MetadataService.prototype;

proto._buildProjectGroupMetadata = function () {
  var project = ProjectsRegistry.getCurrentProject().getState();
  this.state.name = project.title;
  var groups = {};
  Object.entries(METADATAGROUPS).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        groupName = _ref2[0],
        value = _ref2[1];

    groups[groupName] = {};
    value.forEach(function (field) {
      var fieldValue = project.metadata && project.metadata[field] ? project.metadata[field] : project[field];
      if (!!fieldValue) {
        groups[groupName][field] = {
          label: ['sdk', 'metadata', 'groups', groupName, 'fields', field].join('.'),
          value: fieldValue
        };
      }
    });
  });
  this.state.groups = groups;
};

proto.getProjectMetadata = function () {
  return this.state;
};

proto.getLayersMetadata = function () {
  return this.state.groups.layers;
};

proto.getLayerMetadata = function (id) {
  var layerMetadata = this.state.groups.layers.filter(function (layer) {
    return layer.id === id;
  });
  return layerMetadata[0];
};

proto.showMetadata = function (bool) {
  this.show = bool;
  if (this.show) {
    this.content = new ProjectMetadataComponent({
      state: this.getProjectMetadata(),
      service: this
    });
    GUI.setContent({
      content: this.content,
      title: "sdk.metadata.title",
      perc: 100
    });
    this.show = true;
  } else GUI.closeContent();
};

proto.reload = function () {
  this.emit('reload');
  this._buildProjectGroupMetadata();
};

module.exports = MetadataService;

},{"./vue/components/project/project":643,"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/gui":575}],638:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".layer_header[data-v-0b14b39e]{padding:5px;margin-bottom:0;margin-top:0;cursor:pointer}.layer-name[data-v-0b14b39e]{font-weight:700}.layer-header-icon[data-v-0b14b39e]{margin-right:10px;color:#999}.layer_header span.open-close[data-v-0b14b39e]{position:absolute;right:5px;color:#999}.metadata-label[data-v-0b14b39e]{font-weight:700;font-size:1.1em}.row[data-v-0b14b39e]{padding:10px;border-bottom:1px solid #e2e2e2}.nav-tabs[data-v-0b14b39e]{border-bottom:0 solid #ddd}.nav-tabs>li.active>a[data-v-0b14b39e],.nav-tabs>li.active>a[data-v-0b14b39e]:focus,.nav-tabs>li.active>a[data-v-0b14b39e]:hover{border-width:0}.nav-tabs>li>a[data-v-0b14b39e]{border:none;color:#aeaeae}.nav-tabs>li.active>a[data-v-0b14b39e],.nav-tabs>li>a[data-v-0b14b39e]:hover{border:none;background:transparent}.nav-tabs>li>a[data-v-0b14b39e]:after{content:\"\";height:2px;position:absolute;width:100%;left:0;bottom:-1px;transition:all .25s ease 0s;transform:scale(0)}.nav-tabs>li.active>a[data-v-0b14b39e]:after,.nav-tabs>li:hover>a[data-v-0b14b39e]:after{transform:scale(1)}.tab-nav>li>a[data-v-0b14b39e]:after{background:#21527d none repeat scroll 0 0;color:#fff}.tab-content[data-v-0b14b39e]{margin:10px;background-color:#eee;overflow:auto}.spatial-tab[data-v-0b14b39e]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metadatamixin = require('../metadatamixin');

var _metadatamixin2 = _interopRequireDefault(_metadatamixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "layer",
  mixins: [_metadatamixin2.default],
  props: {
    state: {}
  },
  data: function data() {
    return {
      show: false
    };
  },

  computed: {
    isSpatial: function isSpatial() {
      return this.state.geometrytype != 'NoGeometry';
    }
  },
  methods: {
    showHideInfo: function showHideInfo() {
      this.show = !this.show;
    }
  },
  mounted: function mounted() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"row-info"},[_c('h4',{staticClass:"layer_header",attrs:{"data-toggle":"collapse","data-target":'#' + _vm.state.id},on:{"click":_vm.showHideInfo}},[_c('i',{staticClass:"layer-header-icon action-button nohover",class:[_vm.isSpatial ? _vm.g3wtemplate.font['map']: _vm.g3wtemplate.font['table']],attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{staticClass:"layer-name"},[_vm._v(_vm._s(_vm.state.name))]),_vm._v(" "),_c('span',{staticClass:"action-button nohover open-close",class:[_vm.show ? _vm.g3wtemplate.getFontClass('minus') :_vm.g3wtemplate.getFontClass('plus')]})]),_vm._v(" "),_c('div',{staticClass:"collapse",attrs:{"id":_vm.state.id}},[_c('ul',{staticClass:"metadata-nav-tabs nav nav-tabs",attrs:{"role":"tablist"}},[_c('li',{staticClass:"active spatial-tab",attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.groups.general'),expression:"'sdk.metadata.groups.layers.groups.general'"}],attrs:{"href":'#layer_general_' + _vm.state.id,"aria-controls":"general","role":"tab","data-toggle":"tab"}})]),_vm._v(" "),(_vm.isSpatial)?_c('li',{staticClass:"spatial-tab",attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.groups.spatial'),expression:"'sdk.metadata.groups.layers.groups.spatial'"}],attrs:{"href":'#layer_spatial_' + _vm.state.id,"aria-controls":"profile","role":"tab","data-toggle":"tab"}})]):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"tab-content"},[_c('div',{staticClass:"tab-pane active",attrs:{"role":"tabpanel","id":'layer_general_' + _vm.state.id}},[_c('div',{staticClass:"container-fluid"},[(_vm.findAttributeFormMetadataAttribute('title'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.title'),expression:"'sdk.metadata.groups.layers.fields.subfields.title'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_vm._v(_vm._s(_vm.state.metadata.title))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('name'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.name'),expression:"'sdk.metadata.groups.layers.fields.subfields.name'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_vm._v(_vm._s(_vm.state.name))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('source'))?_c('div',{staticClass:"row metadata-layer-source"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.source'),expression:"'sdk.metadata.groups.layers.fields.subfields.source'"}],staticClass:"col-md-2 col-sm-12 metadata-label metadata-layer-source-value-key"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value metadata-layer-source-value"},[_vm._v(_vm._s(_vm.state.source.type))])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('abstract'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.abstract'),expression:"'sdk.metadata.groups.layers.fields.subfields.abstract'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_vm._v(_vm._s(_vm.state.metadata.abstract))])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('keywords'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.keywords'),expression:"'sdk.metadata.groups.layers.fields.subfields.keywords'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_c('div',[_vm._v(_vm._s(_vm.state.metadata.keywords.join(', ')))])])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('metadataurl') && _vm.state.metadata.metadataurl.onlineresources)?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.metadataurl'),expression:"'sdk.metadata.groups.layers.fields.subfields.metadataurl'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_c('a',{attrs:{"href":_vm.state.metadata.metadataurl.onlineresources}},[_vm._v(_vm._s(_vm.state.metadata.metadataurl.onlineresources))])])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('dataurl') && _vm.state.metadata.dataurl.onlineresources)?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.dataurl'),expression:"'sdk.metadata.groups.layers.fields.subfields.dataurl'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_c('a',{attrs:{"href":_vm.state.metadata.dataurl.onlineresources}},[_vm._v(_vm._s(_vm.state.metadata.dataurl.onlineresources))])])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('attributes'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.attributes'),expression:"'sdk.metadata.groups.layers.fields.subfields.attributes'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value",staticStyle:{"overflow":"auto"}},[_c('table',{staticClass:"table table-striped",staticStyle:{"background-color":"#eeeeee !important"}},[_c('thead',[_c('tr',_vm._l((_vm.state.metadata.attributes[0]),function(value,header){return _c('th',[_vm._v(_vm._s(header))])}),0)]),_vm._v(" "),_c('tbody',_vm._l((_vm.state.metadata.attributes),function(attribute){return _c('tr',_vm._l((attribute),function(value,header){return _c('td',[_vm._v(_vm._s(value))])}),0)}),0)])])]):_vm._e()])]),_vm._v(" "),_c('div',{staticClass:"tab-pane",attrs:{"role":"tabpanel","id":'layer_spatial_'+_vm.state.id}},[_c('div',{staticClass:"container-fluid"},[(_vm.findMetadataAttribute('crs'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.crs'),expression:"'sdk.metadata.groups.layers.fields.subfields.crs'"}],staticClass:"col-sm-3 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-9 value"},[_vm._v(_vm._s(_vm.state.crs.epsg))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('geometrytype'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.geometrytype'),expression:"'sdk.metadata.groups.layers.fields.subfields.geometrytype'"}],staticClass:"col-sm-3 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-9 value"},[_vm._v(_vm._s(_vm.state.geometrytype))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('bbox'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.bbox'),expression:"'sdk.metadata.groups.layers.fields.subfields.bbox'"}],staticClass:"col-sm-3 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-9 value"},_vm._l((_vm.state.bbox),function(value,key){return _c('p',[_c('span',{staticStyle:{"font-weight":"bold","margin-right":"5px"}},[_vm._v(_vm._s(key))]),_vm._v(" "),_c('span',[_vm._v(_vm._s(value))])])}),0)]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('crs'))?_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-3 metadata-label"},[_vm._v("CRS")]),_vm._v(" "),_c('div',{staticClass:"col-sm-9 value"},_vm._l((_vm.state.metadata.crs),function(crs){return _c('div',[_c('span',[_vm._v(_vm._s(crs))])])}),0)]):_vm._e()])])])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0b14b39e"

},{"../metadatamixin":639,"vueify/lib/insert-css":397}],639:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  methods: {
    findAttributeFormMetadataAttribute: function findAttributeFormMetadataAttribute(name) {
      return this.state.metadata ? this.state.metadata[name] !== undefined : false;
    },
    findMetadataAttribute: function findMetadataAttribute(name) {
      return this.state[name] !== undefined;
    }
  }
};

},{}],640:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-label[data-v-8dc1a394]{font-weight:700;font-size:1.1em}.bbox-labels[data-v-8dc1a394]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "metadatabbox",
  props: {
    data: {}
  },
  data: function data() {
    return {
      bboxlabels: ['MINX', 'MINY', 'MAXX', 'MAXY']
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrap-content-tab"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.data.label),expression:"data.label"}],staticClass:"col-sm-3 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-9 value",staticStyle:{"margin-top":"0"}},_vm._l((_vm.data.value),function(value,index){return _c('div',[_c('span',{staticClass:"bbox-labels"},[_vm._v(_vm._s(_vm.bboxlabels[index]))]),_vm._v(" "+_vm._s(value)+"\n      ")])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-8dc1a394"

},{"vueify/lib/insert-css":397}],641:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-label[data-v-03465a68]{font-weight:700;font-size:1.1em}.metadata-contact-label[data-v-03465a68]{font-weight:700}.contact-icon[data-v-03465a68]{margin-right:3px}.row[data-v-03465a68]{margin-bottom:5px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = {
  name: "metadatacontatcs",
  props: {
    data: {}
  },
  data: function data() {
    return {
      iconsClass: {
        contactelectronicmailaddress: this.g3wtemplate.getFontClass("mail"),
        personprimary: this.g3wtemplate.getFontClass("user"),
        contactvoicetelephone: this.g3wtemplate.getFontClass("mobile")
      }
    };
  },

  methods: {
    sanitizeValue: function sanitizeValue(value) {
      if (value !== null && value !== undefined) {
        if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
          value = Object.keys(value).length ? value : '';
        } else if (Array.isArray(value)) {
          value = value.length ? value : '';
        }
      }
      return value;
    },
    geti18n: function geti18n(key) {}
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrap-content-tab"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.data.label),expression:"data.label"}],staticClass:"col-sm-3 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-9 value",staticStyle:{"margin-top":"0"}},_vm._l((_vm.data.value),function(value,key){return _c('div',[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-3 metadata-contact-label"},[_c('i',{staticClass:"contact-icon",class:_vm.iconsClass[key],attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.general.fields.subfields.contactinformation.' + key),expression:"'sdk.metadata.groups.general.fields.subfields.contactinformation.' + key"}]})]),_vm._v(" "),_c('div',{staticClass:"col-sm-9"},[(key === 'personprimary')?_vm._l((value),function(subvalue,key){return _c('div',[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.general.fields.subfields.contactinformation.' + key),expression:"'sdk.metadata.groups.general.fields.subfields.contactinformation.' + key"}],staticClass:"metadata-contact-label"}),_vm._v(" "),_c('span',[_vm._v(_vm._s(subvalue))])])}):_c('div',[(key === 'contactelectronicmailaddress')?[_c('a',{staticStyle:{"font-weight":"bold"},attrs:{"href":'mailto:' + _vm.sanitizeValue(value)}},[_vm._v(_vm._s(_vm.sanitizeValue(value)))])]:[_vm._v("\n              "+_vm._s(_vm.sanitizeValue(value))+"\n            ")]],2)],2)])])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-03465a68"

},{"vueify/lib/insert-css":397}],642:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-label[data-v-25bf76a4]{font-weight:700;font-size:1.1em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = {
  name: "metadatatabcontent",
  props: {
    data: {},
    fieldName: {}
  },
  computed: {
    arrayToString: function arrayToString() {
      return this.data.value.join(', ');
    }
  },
  methods: {
    isArrayorObject: function isArrayorObject(value) {
      return Array.isArray(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrap-content-tab"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.data.label),expression:"data.label"}],staticClass:"col-sm-3 metadata-label"}),_vm._v(" "),(_vm.fieldName == 'keywords')?_c('div',{staticClass:"col-sm-9 value"},[_vm._v("\n    "+_vm._s(_vm.arrayToString)+"\n  ")]):(_vm.fieldName == 'wms_url')?_c('div',{staticClass:"col-sm-9 value",staticStyle:{"margin-top":"0"}},[_c('span',[_vm._v(_vm._s(_vm.data.value))])]):(!_vm.isArrayorObject(_vm.data.value))?_c('div',{staticClass:"col-sm-9 value",staticStyle:{"margin-top":"0"}},[_c('span',{domProps:{"innerHTML":_vm._s(_vm.data.value)}})]):_c('div',{staticClass:"col-sm-9 value",staticStyle:{"margin-top":"0"}},_vm._l((_vm.data.value),function(value,key){return _c('div',[_c('span',[_vm._v(_vm._s(value))])])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-25bf76a4"

},{"vueify/lib/insert-css":397}],643:[function(require,module,exports){
var _project = require('./project.vue');

var _project2 = _interopRequireDefault(_project);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inherit = require('core/utils/utils').inherit;
var Component = require('gui/vue/component');
var base = require('core/utils/utils').base;


function ProjectMetadataComponent() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$state = _ref.state,
      state = _ref$state === undefined ? {} : _ref$state,
      service = _ref.service;

  base(this);
  var vueComponent = Vue.extend(_project2.default);
  this.setService(service);
  this.internalComponent = new vueComponent({
    state: state
  });
  this.layout = function () {};
}

inherit(ProjectMetadataComponent, Component);

module.exports = ProjectMetadataComponent;

},{"./project.vue":644,"core/utils/utils":485,"gui/vue/component":718}],644:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-nav-bar li a[data-v-34a6f52e]{text-align:center}.metadata-nav-bar li a i[data-v-34a6f52e]{margin-right:5px}.metadata-item-tab[data-v-34a6f52e]{margin-right:10px;border-radius:3px;margin-bottom:10px}.metadata-body[data-v-34a6f52e]{overflow-y:auto;overflow-x:hidden;padding-left:0;padding-right:0}.tab-title[data-v-34a6f52e]{position:absolute;bottom:10px;right:auto}.row-info[data-v-34a6f52e]{margin:0!important;padding-top:10px;padding-bottom:10px;border-bottom:1px solid #eee}.row-info .label[data-v-34a6f52e]{font-weight:700}.h_90[data-v-34a6f52e]{height:90%}.h_100[data-v-34a6f52e]{height:100%}#project-catalog[data-v-34a6f52e]{position:relative;overflow:auto}.nav-tabs-wrapper[data-v-34a6f52e]{display:inline-block;margin-bottom:-6px;margin-left:1.25%;margin-right:1.25%;position:relative;width:100%}.nav-tabs[data-v-34a6f52e]{border-bottom:0 none}.nav-stacked[data-v-34a6f52e]{font-size:1.2em;font-weight:700;padding:10px 0}.nav-stacked li a[data-v-34a6f52e]{color:#fff}.left-vertical-tabs[data-v-34a6f52e]{padding-left:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _layer = require('../layer/layer.vue');

var _layer2 = _interopRequireDefault(_layer);

var _metadatatabcontent = require('./metadatatabcontent.vue');

var _metadatatabcontent2 = _interopRequireDefault(_metadatatabcontent);

var _metadatabboxcontent = require('./metadatabboxcontent.vue');

var _metadatabboxcontent2 = _interopRequireDefault(_metadatabboxcontent);

var _metadatacontactscontent = require('./metadatacontactscontent.vue');

var _metadatacontactscontent2 = _interopRequireDefault(_metadatacontactscontent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "project",
  data: function data() {
    return {
      state: this.$options.state,
      iconsClass: {
        info: this.g3wtemplate.getFontClass("info-circle"),
        globe: this.g3wtemplate.getFontClass("globe"),
        bars: this.g3wtemplate.getFontClass("bars")
      }
    };
  },

  components: {
    'metadata-layer': _layer2.default,
    'metadata-tab-content': _metadatatabcontent2.default,
    'metadata-bbox-content': _metadatabboxcontent2.default,
    'metadata-contacts-content': _metadatacontactscontent2.default
  },
  methods: {
    isArrayorObject: function isArrayorObject(value) {
      return Array.isArray(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
    },
    setComponent: function setComponent(key) {
      var component = void 0;
      switch (key) {
        case 'extent':
          component = 'metadata-bbox-content';
          break;
        case 'contactinformation':
          component = 'metadata-contacts-content';
          break;
        default:
          component = 'metadata-tab-content';
      }
      return component;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"project-catalog"}},[_c('div',{class:_vm.isMobile() ? 'mobile' : null,staticStyle:{"padding":"0"},attrs:{"id":"project-catalog-container"}},[_c('ul',{staticClass:"nav nav-tabs metadata-nav-bar",attrs:{"role":"tablist"}},[_c('li',{staticClass:"active"},[_c('a',{staticClass:"metadata-item-tab general",attrs:{"data-toggle":"tab","href":"#general"}},[_c('i',{staticClass:"action-button nohover",class:_vm.g3wtemplate.getFontClass('info'),attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.general.title'),expression:"'sdk.metadata.groups.general.title'"}],staticStyle:{"font-weight":"bold"}})])]),_vm._v(" "),_c('li',[_c('a',{staticClass:"metadata-item-tab spatial",attrs:{"data-toggle":"tab","href":"#spatial"}},[_c('i',{staticClass:"action-button nohover",class:_vm.iconsClass.globe,attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.spatial.title'),expression:"'sdk.metadata.groups.spatial.title'"}],staticStyle:{"font-weight":"bold"}})])]),_vm._v(" "),_c('li',[_c('a',{staticClass:"metadata-item-tab layers",attrs:{"data-toggle":"tab","href":"#metadata_layers"}},[_c('i',{staticClass:"action-button nohover",class:_vm.iconsClass.bars,attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.title'),expression:"'sdk.metadata.groups.layers.title'"}],staticStyle:{"font-weight":"bold"}})])])])]),_vm._v(" "),_c('div',{staticClass:"col-sm-12 metadata-body tab-content"},[_c('div',{staticClass:"tab-pane fade in active",attrs:{"id":"general"}},[_vm._l((_vm.state.groups.general),function(data,key){return _c('div',{staticClass:"row h_100 row-info"},[_c(_vm.setComponent(key),{tag:"component",attrs:{"data":data,"fieldName":key}})],1)})],2),_vm._v(" "),_c('div',{staticClass:"tab-pane fade",attrs:{"id":"spatial"}},[_c('div',[_vm._l((_vm.state.groups.spatial),function(data,key){return _c('div',{staticClass:"row row-info"},[_c(_vm.setComponent(key),{tag:"component",attrs:{"data":data,"fieldName":key}})],1)})],2)]),_vm._v(" "),_c('div',{staticClass:"tab-pane fade",attrs:{"id":"metadata_layers"}},_vm._l((_vm.state.groups.layers.layers.value),function(layer){return _c('metadata-layer',{attrs:{"state":layer}})}),1)])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-34a6f52e"

},{"../layer/layer.vue":638,"./metadatabboxcontent.vue":640,"./metadatacontactscontent.vue":641,"./metadatatabcontent.vue":642,"vueify/lib/insert-css":397}],645:[function(require,module,exports){
module.exports = "<div></div>\n\n";

},{}],646:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Component = require('gui/vue/component');
var GUI = require('gui/gui');
var MetadataService = require('gui/metadata/metadataservice');
var templateCompiled = (0, _utils.createCompiledTemplate)(require('./metadata.html'));

var InternalComponent = Vue.extend(_extends({}, templateCompiled, {
  data: function data() {
    return {
      state: null
    };
  }
}));

var MetadataComponent = function MetadataComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = "sdk.metadata.title";
  var service = options.service || new MetadataService(options);
  this.setService(service);
  this._service.on('reload', function () {
    _this.setOpen(false);
  });
  this.setInternalComponent = function () {
    this.internalComponent = new InternalComponent({
      service: service
    });
    this.internalComponent.state = service.state;
    return this.internalComponent;
  };
  this._setOpen = function (bool) {
    this._service.showMetadata(bool);
  };
  GUI.on('closecontent', function () {
    _this.state.open = false;
  });
};

inherit(MetadataComponent, Component);

module.exports = MetadataComponent;

},{"./metadata.html":645,"core/utils/utils":485,"gui/gui":575,"gui/metadata/metadataservice":637,"gui/vue/component":718,"gui/vue/utils":727}],647:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

// service sidebar
function navbaritemsService() {
  this.state = {
    items: {
      left: [],
      right: []
    }
  };
  this.addItem = function (item) {
    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'right';

    this.state.items[position].push(item);
  };

  base(this);
}

inherit(navbaritemsService, G3WObject);

var navbaritemsservice = new navbaritemsService();
var compiledTemplateLeft = Vue.compile(require('./navbarleftitems.html'));

var NavbarLeftItemsComponent = Vue.extend(_extends({}, compiledTemplateLeft, {
  data: function data() {
    return {
      items: navbaritemsservice.state.items.left
    };
  }
}));

var compiledTemplateRight = Vue.compile(require('./navbarrightitems.html'));

var NavbarRightItemsComponent = Vue.extend(_extends({}, compiledTemplateRight, {
  data: function data() {
    return {
      items: navbaritemsservice.state.items.right
    };
  }
}));

module.exports = {
  NavbarItemsService: navbaritemsservice,
  components: {
    left: NavbarLeftItemsComponent,
    right: NavbarRightItemsComponent
  }
};

},{"./navbarleftitems.html":648,"./navbarrightitems.html":649,"core/g3wobject":415,"core/utils/utils":485}],648:[function(require,module,exports){
module.exports = "<ul class=\"nav navbar-nav navbar-left\">\n  <li v-for=\"item in items\" :is=\"item\" :key=\"item.id\"></li>\n</ul>\n";

},{}],649:[function(require,module,exports){
module.exports = "<ul class=\"nav navbar-nav navbar-right\">\n  <li v-for=\"item in items\" :is=\"item\" :key=\"item.id\"></li>\n</ul>\n";

},{}],650:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'download-notify'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"download",rawName:"v-download.show",modifiers:{"show":true}}],staticClass:"skin-color",attrs:{"id":"download_notification","title":"DOWNLOAD"}},[_c('bar-loader',{attrs:{"loading":"true"}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass('download'),staticStyle:{"padding":"3px"}})],1)}
__vue__options__.staticRenderFns = []

},{}],651:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'online-notify'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"online",rawName:"v-online:hide",arg:"hide"}],staticStyle:{"color":"#999"},attrs:{"id":"offline_notification"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('wifi')}),_vm._v(" "),_c('div',{staticStyle:{"font-weight":"bold","font-size":"0.4em"}},[_vm._v("offline")])])}
__vue__options__.staticRenderFns = []

},{}],652:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'plugins-notify'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"plugins",rawName:"v-plugins"}],staticStyle:{"color":"#994b10"},attrs:{"id":"plugins_notification"}},[_c('bar-loader',{attrs:{"loading":"true"}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass('plugin')})],1)}
__vue__options__.staticRenderFns = []

},{}],653:[function(require,module,exports){
var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    resolvedValue = _require.resolve;

var GUI = require('gui/gui');
var G3WObject = require('core/g3wobject');

var Panel = function Panel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.id = options.id || null;
  this.title = options.title || '';
  this.internalPanel = options.panel || null;
  this.service = options.service;
};

inherit(Panel, G3WObject);

var proto = Panel.prototype;

proto.getId = function () {
  return this.id;
};

proto.getTitle = function () {
  return this.title;
};

proto.getService = function () {
  return this.service;
};

proto.setService = function (service) {
  this.service = service;
};

proto.getInternalPanel = function () {
  return this.internalPanel;
};

proto.setInternalPanel = function (internalPanel) {
  this.internalPanel = internalPanel;
};

proto.show = function () {
  GUI.showPanel(this);
};

proto.mount = function (parent) {
  var panel = this.internalPanel;
  var iCinstance = panel.$mount();
  $(parent).append(iCinstance.$el);
  iCinstance.$nextTick(function () {
    $(parent).localize();
    panel.onShow && panel.onShow();
  });
  return resolvedValue(true);
};

proto.unmount = function () {
  var panel = this.internalPanel;
  var d = $.Deferred();
  panel.$destroy(true);
  $(panel.$el).remove();
  panel.onClose && panel.onClose();
  this.internalComponent = null;
  d.resolve();
  return d.promise();
};

proto.onResize = function (parentWidth, parentHeight) {};

module.exports = Panel;

},{"core/g3wobject":415,"core/utils/utils":485,"gui/gui":575}],654:[function(require,module,exports){
var scale = [{
  value: 500,
  label: '1:500'
}, {
  value: 1000,
  label: '1:1.000'
}, {
  value: 2000,
  label: '1:2.000'
}, {
  value: 2500,
  label: '1:2.500'
}, {
  value: 5000,
  label: '1:5.000'
}, {
  value: 10000,
  label: '1:10.000'
}, {
  value: 20000,
  label: '1:20.000'
}, {
  value: 25000,
  label: '1:25.000'
}, {
  value: 50000,
  label: '1:50.000'
}, {
  value: 100000,
  label: '1:100.000'
}, {
  value: 250000,
  label: '1:250.000'
}, {
  value: 500000,
  label: '1:500.000'
}, {
  value: 1000000,
  label: '1:1.000.000'
}, {
  value: 2500000,
  label: '1:2.500.000'
}, {
  value: 5000000,
  label: '1:5.000.000'
}, {
  value: 10000000,
  label: '1:10.000.000'
}, {
  value: 20000000,
  label: '1:20.000.000'
}, {
  value: 50000000,
  label: '1:50.000.000'
}, {
  value: 100000000,
  label: '1:100.000.000'
}, {
  value: 250000000,
  label: '1:250.000.000'
}, {
  value: 500000000,
  label: '1:500.000.000'
}];

var dpis = [150, 300];

var formats = [{
  value: 'pdf',
  label: 'PDF'
}, {
  value: 'png',
  label: 'PNG'
}];

module.exports = {
  scale: scale,
  dpis: dpis,
  formats: formats
};

},{}],655:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    downloadFile = _require.downloadFile;

var ApplicationService = require('core/applicationservice');
var t = require('core/i18n/i18n.service').t;
var GUI = require('gui/gui');
var G3WObject = require('core/g3wobject');
var ProjectsRegistry = require('core/project/projectsregistry');
var PrintService = require('core/print/printservice');

var _require2 = require('g3w-ol/src/utils/utils'),
    getScaleFromResolution = _require2.getScaleFromResolution,
    getResolutionFromScale = _require2.getResolutionFromScale,
    getMetersFromDegrees = _require2.getMetersFromDegrees;

var printConfig = require('./printconfig');
var PrintPage = require('./vue/printpage');
var scale = printConfig.scale;
var dpis = printConfig.dpis;
var formats = printConfig.formats;

function PrintComponentService() {
  base(this);
  this.printService = new PrintService();
  this._initialized = false;
  this.state = {
    loading: false
  };
  this._moveMapKeyEvent = null;
  this._page = null;
  this._mapService = null;
  this._map = null;
  this._mapUnits;
  this._scalesResolutions = {};
  this.init = function () {
    this._project = ProjectsRegistry.getCurrentProject();
    this.state.print = this._project.getPrint() || [];
    this.state.visible = this.state.print.length > 0;
    this.state.isShow = false;
    this.state.url = null;
    this.state.output = {
      url: null,
      method: this._project.getOwsMethod(),
      layers: true,
      format: null,
      loading: false,
      type: null
    };
    this.state.printextent = {
      minx: [0, 0],
      miny: [0, 0],
      maxx: [0, 0],
      maxy: [0, 0]
    };
    this.state.visible && this.setInitState();
  };
}

inherit(PrintComponentService, G3WObject);

var proto = PrintComponentService.prototype;

proto.setInitState = function () {
  this.state.template = this.state.print[0].name;
  this.state.atlas = this.state.print[0].atlas;
  this.state.atlasValues = [];
  this.state.rotation = 0;
  this.state.inner = [0, 0, 0, 0];
  this.state.center = null;
  this.state.size = null;
  this.state.scale = scale;
  this.state.scala = null;
  this.state.dpis = dpis;
  this.state.dpi = dpis[0];
  this.state.formats = formats;
  this.state.output.format = formats[0].value;
  this.state.maps = this.state.print[0].maps;
};

proto.changeTemplate = function () {
  var _this = this;

  if (!this.state.template) return;
  var isPreviousAtlas = this.state.atlas;

  var _state$print$find = this.state.print.find(function (print) {
    return print.name === _this.state.template;
  }),
      atlas = _state$print$find.atlas,
      maps = _state$print$find.maps;

  this.state.maps = maps;
  this.state.atlas = atlas;
  this.state.atlasValues = [];
  this.state.atlas ? this._clearPrint() : isPreviousAtlas ? this.showPrintArea(true) : this._setPrintArea();
};

proto.changeScale = function () {
  this.state.scala && this._setPrintArea();
};

proto.changeRotation = function () {
  this._mapService.setInnerGreyCoverBBox({
    rotation: this.state.rotation
  });
};

proto._getPrintExtent = function () {
  var _ref = [].concat(_toConsumableArray(this.state.printextent.lowerleft), _toConsumableArray(this.state.printextent.upperright)),
      minx = _ref[0],
      miny = _ref[1],
      maxx = _ref[2],
      maxy = _ref[3];

  var extent = this._mapService.isAxisOrientationInverted() ? [miny, minx, maxy, maxx] : [minx, miny, maxx, maxy];
  return extent.join();
};

proto.getOverviewExtent = function () {
  var extent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var xmin = extent.xmin,
      xmax = extent.xmax,
      ymin = extent.ymin,
      ymax = extent.ymax;

  var overviewextent = this._mapService.isAxisOrientationInverted() ? [ymin, xmin, ymax, xmax] : [xmin, ymin, xmax, ymax];
  return overviewextent.join();
};

proto._getOptionsPrint = function () {
  var _this2 = this;

  var maps = this.state.maps.map(function (map) {
    return {
      name: map.name,
      scale: map.overview ? map.scale : _this2.state.scala,
      extent: map.overview ? _this2.getOverviewExtent(map.extent) : _this2._getPrintExtent()
    };
  });
  var options = {
    rotation: this.state.rotation,
    dpi: this.state.dpi,
    template: this.state.template,
    maps: maps,
    scale: this.state.scala,
    format: this.state.output.format
  };
  return options;
};

proto.setPrintAreaAfterCloseContent = function () {
  this._map.once('postrender', this._setPrintArea.bind(this));
  this.stopLoading();
};

proto.print = function () {
  var _this3 = this;

  var caller_download_id = ApplicationService.setDownload(true);
  return new Promise(function (resolve, reject) {
    if (_this3.state.atlas) {
      GUI.disableSideBar(true);
      _this3.state.loading = true;
      _this3.printService.printAtlas({
        template: _this3.state.template,
        field: _this3.state.atlas.field_name || '$id',
        values: _this3.state.atlasValues,
        download: true
      }).then(function (_ref2) {
        var url = _ref2.url;

        downloadFile({
          url: url,
          filename: _this3.state.template,
          mime_type: 'application/pdf'
        }).then(function () {
          resolve();
        }).catch(function () {
          _this3.showError();
          reject();
        }).finally(function () {
          _this3.state.loading = false;
          ApplicationService.setDownload(false, caller_download_id);
          GUI.disableSideBar(false);
        });
      });
    } else {
      GUI.disableSideBar(true);
      _this3.state.output.url = null;
      _this3.state.output.layers = true;
      _this3._page = new PrintPage({
        service: _this3
      });
      GUI.setContent({
        content: _this3._page,
        title: 'print',
        perc: 100
      });
      var options = _this3._getOptionsPrint();
      _this3.printService.print(options, method = _this3.state.output.method).then(function (data) {
        _this3.state.output.url = data.url;
        _this3.state.output.layers = data.layers;
        _this3.state.output.mime_type = data.mime_type;
        resolve();
      }).catch(function (err) {
        _this3.showError();
        reject(err);
      }).finally(function () {
        return ApplicationService.setDownload(false, caller_download_id);
      });
    }
  });
};

proto.startLoading = function () {
  this.state.output.loading = true;
};

proto.stopLoading = function () {
  this.state.output.loading = false;
};

proto.showError = function () {
  GUI.notify.error(t("info.server_error"));
  GUI.closeContent();
};

proto._calculateInternalPrintExtent = function () {
  var resolution = this._map.getView().getResolution();
  var scala = parseFloat(this.state.scala);

  var _state$maps$find = this.state.maps.find(function (map) {
    return !map.overview;
  }),
      height = _state$maps$find.h,
      width = _state$maps$find.w;

  var resolutionInMeters = this._mapService.getMapUnits() === 'm' ? resolution : getMetersFromDegrees(resolution);
  var w = width / 1000.0 * scala / resolutionInMeters * ol.has.DEVICE_PIXEL_RATIO;
  var h = height / 1000.0 * scala / resolutionInMeters * ol.has.DEVICE_PIXEL_RATIO;
  // get current map center ( in pixel)
  var center = [this.state.size[0] * ol.has.DEVICE_PIXEL_RATIO / 2, // X
  this.state.size[1] * ol.has.DEVICE_PIXEL_RATIO / 2 // Y
  ];
  // Calculate the inner bbox in pixel
  var xmin = center[0] - w / 2;
  var ymin = center[1] - h / 2;
  var xmax = center[0] + w / 2;
  var ymax = center[1] + h / 2;
  this.state.printextent.lowerleft = this._map.getCoordinateFromPixel([xmin, ymax]) ? this._map.getCoordinateFromPixel([xmin, ymax]) : this.state.printextent.lowerleft;
  this.state.printextent.upperright = this._map.getCoordinateFromPixel([xmax, ymin]) ? this._map.getCoordinateFromPixel([xmax, ymin]) : this.state.printextent.upperright;
  this.state.inner = [xmin, ymax, xmax, ymin];
};

proto._setPrintArea = function () {
  this.state.size = this._map.getSize();
  var resolution = this._map.getView().getResolution();
  this.state.currentScala = getScaleFromResolution(resolution, this._mapUnits);
  this.state.center = this._map.getView().getCenter();
  this._calculateInternalPrintExtent();
  this._mapService.setInnerGreyCoverBBox({
    type: 'pixel',
    inner: this.state.inner,
    rotation: this.state.rotation
  });
};

proto._clearPrint = function () {
  var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  ol.Observable.unByKey(this._moveMapKeyEvent);
  this._moveMapKeyEvent = null;
  this._mapService.stopDrawGreyCover();
};

proto._setAllScalesBasedOnMaxResolution = function (maxResolution) {
  var _this4 = this;

  var resolution = maxResolution;
  var mapScala = getScaleFromResolution(resolution, this._mapUnits);
  var orderScales = _.orderBy(this.state.scale, ['value'], ['desc']);
  var scale = [];
  var addedFirstHighestScale = false;
  var handleScala = function handleScala(scala) {
    scale.push(scala);
    resolution = getResolutionFromScale(scala.value, _this4._mapUnits);
    _this4._scalesResolutions[scala.value] = resolution;
    resolution = resolution / 2;
  };
  orderScales.forEach(function (scala, index) {
    if (mapScala > scala.value) {
      if (!addedFirstHighestScale) {
        var higherScale = orderScales[index - 1];
        handleScala(higherScale);
        addedFirstHighestScale = true;
      }
      handleScala(scala);
    }
  });
  this.state.scale = scale;
};

proto._setInitialScalaSelect = function () {
  this.state.scala = this.state.scale[0].value;
  $('#scala').val(this.state.scala);
};

proto._setCurrentScala = function (resolution) {
  var _this5 = this;

  Object.entries(this._scalesResolutions).find(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        scala = _ref4[0],
        res = _ref4[1];

    if (resolution <= res) {
      _this5.state.scala = scala;
      return true;
    }
  });
};

proto._setMoveendMapEvent = function () {
  this._moveMapKeyEvent = this._map.on('moveend', this._setPrintArea.bind(this));
};

proto._showPrintArea = function () {
  if (this.state.atlas === undefined) {
    this._setPrintArea();
    this._mapService.startDrawGreyCover();
  }
};

proto._initPrintConfig = function () {
  if (!this._initialized) {
    var maxResolution = this._map.getView().getMaxResolution();
    this._setAllScalesBasedOnMaxResolution(maxResolution);
    this._initialized = true;
  }
  var resolution = this._map.getView().getResolution();
  this._setCurrentScala(resolution);
};

proto.showPrintArea = function (bool) {
  var _this6 = this;

  // close content if open
  this.state.isShow = bool;
  GUI.closeContent().then(function (mapComponent) {
    setTimeout(function () {
      _this6._mapService = mapComponent.getService();
      _this6._mapUnits = _this6._mapService.getMapUnits();
      _this6._mapService.getMap().once('postrender', function (evt) {
        _this6._map = evt.map;
        if (bool) {
          _this6._setMoveendMapEvent();
          _this6._initPrintConfig();
          _this6._showPrintArea();
        } else _this6._clearPrint();
      });
      _this6._mapService.getMap().renderSync();
    });
  });
};

proto.reload = function () {
  var _this7 = this;

  this._project = ProjectsRegistry.getCurrentProject();
  this._mapService = GUI.getComponent('map').getService();
  this._map = this._mapService.viewer.map;
  this.state.print = this._project.state.print || [];
  this.state.visible = this.state.print.length > 0;
  if (this.state.visible) {
    this.state.template = this.state.print[0].name;
    !this._initialized && this.init();
    this._initPrintConfig();
    this._mapService.on('changeviewaftercurrentproject', function () {
      var maxResolution = _this7._map.getView().getMaxResolution();
      _this7.state.scale = scale;
      _this7._setAllScalesBasedOnMaxResolution(maxResolution);
    });
  } else this._clearPrint();
};

module.exports = PrintComponentService;

},{"./printconfig":654,"./vue/printpage":661,"core/applicationservice":401,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/print/printservice":473,"core/project/projectsregistry":478,"core/utils/utils":485,"g3w-ol/src/utils/utils":534,"gui/gui":575}],656:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "fid-atlas-values",
  props: {
    atlas: {
      type: Object
    },
    reset: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      value: ''
    };
  },

  methods: {
    validateValue: function validateValue(value) {
      value = value && 1 * value;
      return Number.isInteger(value) && value >= 0 && value < this.atlas.feature_count || null;
    }
  },
  watch: {
    value: function value(_value) {
      var _this = this;

      this.value = _value;
      var values = new Set();
      var addValue = function addValue(value) {
        _this.validateValue(value) !== null && values.add(value);
      };
      var addRangeToValues = function addRangeToValues() {
        var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var rangeLenght = range.length;
        for (var i = 1; i < rangeLenght; i++) {
          var start = range[i - 1];
          var end = range[i];
          for (var _i = start; _i < end; _i++) {
            values.add(_i + '');
          }
        }
        values.add(range[rangeLenght - 1]);
      };
      if (_value) {
        _value.split(',').forEach(function (value) {
          if (value) {
            if (value.indexOf('-') !== -1) {
              var _values = value.split('-');
              var range = _values.filter(function (value) {
                return _this.validateValue(value) !== null;
              });
              if (range.length === _values.length) {
                var canAdd = range.reduce(function (bool, value, currentIndex) {
                  return bool && (currentIndex === 0 || range[currentIndex - 1] <= value);
                }, true);
                canAdd && addRangeToValues(range);
              }
            } else addValue(value);
          }
        });
      }
      this.$emit('set-values', Array.from(values));
    },
    reset: function reset(bool) {
      if (bool) {
        this.value = '';
        this.$emit('set-values', []);
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.value = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"form-group",staticStyle:{"width":"100%"}},[_c('label',{staticStyle:{"display":"block"},attrs:{"for":_vm.print_atlas_fid}},[_c('span',[_vm._v("fids [max: "+_vm._s(_vm.atlas.feature_count - 1)+"]")])]),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.value),expression:"value"}],staticClass:"form-control",domProps:{"value":(_vm.value)},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"space",32,$event.key,[" ","Spacebar"])){ return null; }$event.preventDefault();},"input":function($event){if($event.target.composing){ return; }_vm.value=$event.target.value}}}),_vm._v(" "),_c('div',{staticStyle:{"margin-top":"5px","color":"#ffffff"},attrs:{"id":"fid-print-atals-instruction"}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.fids_instruction'),expression:"'sdk.print.fids_instruction'"}],staticStyle:{"white-space":"pre-line"},attrs:{"id":"fids_intruction"}}),_vm._v(" "),_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.fids_example'),expression:"'sdk.print.fids_example'"}],staticStyle:{"margin-top":"3px","font-weight":"bold"},attrs:{"id":"fids_examples_values"}})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-31f7e696"

},{}],657:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var autocompleteOptions = require('gui/external/select2/options/autocomplete');

var _require = require('gui/vue/vue.mixins'),
    autocompleteMixin = _require.autocompleteMixin,
    select2Mixin = _require.select2Mixin;

exports.default = {
  name: "selectAtlasFieldValues",
  mixins: [autocompleteMixin, select2Mixin],
  props: {
    atlas: {
      type: Object,
      required: true
    },
    reset: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    emitValues: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$nextTick();

              case 2:
                this.$emit('set-values', this.values);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function emitValues() {
        return _ref.apply(this, arguments);
      }

      return emitValues;
    }()
  },
  watch: {
    reset: function reset(bool) {
      if (bool) {
        this.select2 && this.select2.val(null).trigger('change');
        this.values = [];
        this.emitValues();
      }
    }
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
      var _this = this;

      var _atlas, field, layerId;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              this.values = [];
              _context4.next = 3;
              return this.$nextTick();

            case 3:
              _atlas = this.atlas, field = _atlas.field_name, layerId = _atlas.qgs_layer_id;

              this.select2 = $('#print_atlas_autocomplete').select2(_extends({
                width: '100%',
                multiple: true,
                dropdownParent: $('#g3w-search-form'),
                minimumInputLength: 1,
                ajax: {
                  delay: 500,
                  transport: function () {
                    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(_ref3, success, failure) {
                      var value = _ref3.data.q;
                      var data;
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.prev = 0;
                              _context2.next = 3;
                              return _this.autocompleteRequest({
                                layerId: layerId,
                                field: field,
                                value: value
                              });

                            case 3:
                              data = _context2.sent;

                              success({ results: data });
                              _context2.next = 10;
                              break;

                            case 7:
                              _context2.prev = 7;
                              _context2.t0 = _context2['catch'](0);

                              failure(_context2.t0);

                            case 10:
                            case 'end':
                              return _context2.stop();
                          }
                        }
                      }, _callee2, _this, [[0, 7]]);
                    }));

                    function transport(_x, _x2, _x3) {
                      return _ref4.apply(this, arguments);
                    }

                    return transport;
                  }()
                }
              }, autocompleteOptions));
              this.select2.on('select2:select', function (evt) {
                var value = evt.params.data.id;
                _this.values.push(value);
                _this.emitValues();
              });
              this.select2.on('select2:unselect', function () {
                var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(evt) {
                  var value;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          value = evt.params.data.id;

                          _this.values = _this.values.filter(function (currentValue) {
                            return currentValue !== value;
                          });
                          _this.emitValues();

                        case 3:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, _this);
                }));

                return function (_x4) {
                  return _ref5.apply(this, arguments);
                };
              }());

            case 7:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.values = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"form-group",staticStyle:{"width":"100%"}},[_c('label',{staticStyle:{"display":"block"},attrs:{"for":_vm.print_atlas_autocomplete}},[_c('span',[_vm._v(_vm._s(_vm.atlas.field_name))])]),_vm._v(" "),_c('select',{staticClass:"form-control",attrs:{"name":_vm.atlas.field_name,"id":"print_atlas_autocomplete"}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-7127ca96"

},{"gui/external/select2/options/autocomplete":555,"gui/vue/vue.mixins":731}],658:[function(require,module,exports){
module.exports = "<ul id=\"print\" class=\"treeview-menu\">\n  <li>\n    <form id=\"g3w-search-form\" class=\"form-horizonal\">\n      <div class=\"box-body\">\n        <transition :duration=\"500\" name=\"fade\">\n          <bar-loader :loading=\"state.loading\"></bar-loader>\n        </transition>\n        <helpdiv message='sdk.print.help'></helpdiv>\n        <label for=\"templates\">Template</label>\n        <select class=\"form-control\" @change=\"onChangeTemplate\" v-model=\"state.template\" :style=\"{marginBottom: this.state.atlas && '10px'}\" id=\"templates\">\n          <option v-for=\"print in state.print\" :value=\"print.name\">{{ print.name }}</option>\n        </select>\n        <template v-if=\"!state.atlas\">\n          <label for=\"scala\" v-t=\"'sdk.print.scale'\"></label>\n          <select class=\"form-control\" @change=\"onChangeScale\" v-model=\"state.scala\" id=\"scala\">\n            <option v-for=\"scala in state.scale\" :value=\"scala.value\">{{ scala.label }}</option>\n          </select>\n          <label for=\"dpi\">dpi</label>\n          <select class=\"form-control\" @change=\"onChangeDpi\"  v-model=\"state.dpi\" id=\"dpi\" >\n            <option v-for=\"dpi in state.dpis\" >{{ dpi }}</option>\n          </select>\n          <label for=\"rotation\" v-t=\"'sdk.print.rotation'\"></label>\n          <input min=\"-360\" max=\"360\"  @input=\"onChangeRotation\" v-model=\"state.rotation\" id=\"rotation\" class=\"form-control\" type=\"number\">\n          <label for=\"format\" v-t=\"'sdk.print.format'\"></label>\n          <select class=\"form-control\" v-model=\"state.output.format\" id=\"format\">\n            <option v-for=\"format in state.formats\" :value=\"format.value\">{{ format.label }}</option>\n          </select>\n        </template>\n        <template v-else-if=\"state.atlas.field_name\">\n          <select-atlas-field-values @set-values=\"setAtlasValues\" :atlas=\"state.atlas\" :reset=\"!state.isShow\"></select-atlas-field-values>\n        </template>\n        <template v-else>\n          <fid-atlas-values @set-values=\"setAtlasValues\" :atlas=\"state.atlas\" :reset=\"!state.isShow\"></fid-atlas-values>\n        </template>\n      </div>\n      <div class=\"box-footer\" style=\"background-color: transparent\">\n        <span>\n          <button id=\"printbutton\" style=\"width:100%; font-weight: bold\" class=\"btn skin-button\" @click.stop.prevent=\"print\" v-download v-t=\"'create_print'\"></button>\n        </span>\n      </div>\n    </form>\n  </li>\n</ul>\n<script>\n  import Atlas_autocomplete from \"./components/autocomplete\";\n  import Fidatlasvalues from \"./components/fidatlasvalues\";\n  export default {\n    components: {Fidatlasvalues, Atlas_autocomplete}\n  }\n</script>";

},{}],659:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var _selectatlasfieldvalues = require('./components/selectatlasfieldvalues.vue');

var _selectatlasfieldvalues2 = _interopRequireDefault(_selectatlasfieldvalues);

var _fidatlasvalues = require('./components/fidatlasvalues.vue');

var _fidatlasvalues2 = _interopRequireDefault(_fidatlasvalues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inherit = require('core/utils/utils').inherit;
var Component = require('gui/vue/component');
var PrintService = require('gui/print/printservice');
var base = require('core/utils/utils').base;
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./print.html'));

var vueComponentOptions = _extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: null,
      button: {
        class: "btn-success",
        type: "stampa",
        disabled: false
      }
    };
  },
  components: {
    SelectAtlasFieldValues: _selectatlasfieldvalues2.default,
    FidAtlasValues: _fidatlasvalues2.default
  },
  computed: {
    disabled: function disabled() {
      return this.state.output.loading || !!this.state.atlas && this.state.atlasValues.length === 0;
    }
  },
  methods: {
    setAtlasValues: function setAtlasValues() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.state.atlasValues = values;
    },
    onChangeTemplate: function onChangeTemplate() {
      this.$options.service.changeTemplate();
    },
    onChangeScale: function onChangeScale() {
      this.$options.service.changeScale();
    },
    onChangeFormat: function onChangeFormat() {},
    onChangeDpi: function onChangeDpi() {},
    onChangeRotation: function onChangeRotation(evt) {
      if (this.state.rotation >= 0 && !_.isNil(this.state.rotation) && this.state.rotation != '') {
        this.state.rotation = this.state.rotation > 360 ? 360 : this.state.rotation;
        evt.target.value = this.state.rotation;
      } else if (this.state.rotation < 0) {
        this.state.rotation = this.state.rotation < -360 ? -360 : this.state.rotation;
        evt.target.value = this.state.rotation;
      } else {
        this.state.rotation = 0;
      }
      this.$options.service.changeRotation();
    },
    print: function print() {
      this.$options.service.print();
    }
  }
});

function PrintComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = "print";
  this.vueComponent = vueComponentOptions;
  this.internalComponent = null;
  var service = options.service || new PrintService();
  this.setService(service);
  // init service
  this._service.init();
  this.setInternalComponent = function () {
    var InternalComponent = Vue.extend(this.vueComponent);
    this.internalComponent = new InternalComponent({
      service: service
    });
    this.state.visible = service.state.visible;
    this.internalComponent.state = service.state;
    return this.internalComponent;
  };

  this._reload = function () {
    var service = this.getService();
    service.reload();
    this.state.visible = service.state.visible;
  };

  this._setOpen = function (bool) {
    this._service.showPrintArea(bool);
  };
}

inherit(PrintComponent, Component);

module.exports = PrintComponent;

},{"./components/fidatlasvalues.vue":656,"./components/selectatlasfieldvalues.vue":657,"./print.html":658,"core/utils/utils":485,"gui/print/printservice":655,"gui/vue/component":718,"gui/vue/utils":727}],660:[function(require,module,exports){
module.exports = "<div id=\"print-output\" style=\"height:100%; position: relative;\">\n  <transition :duration=\"500\" name=\"fade\">\n    <bar-loader :loading=\"loading\"></bar-loader>\n  </transition>\n  <iframe  v-if=\"format === 'pdf'\" :type=\"state.mime_type\" ref=\"printoutput\"  style=\"border:0;width:100%;height:100%;\" :src=\"state.url\"></iframe>\n  <div v-else-if=\"format === 'png'\" class=\"g3w-print-png-output\" style=\"display: flex; flex-direction: column; position: relative; height: 100%\">\n    <div id=\"g3w-print-header\" style=\"display: flex; justify-content: flex-end; align-items: flex-end; margin-top: 5px; margin-bottom: 5px;\">\n      <div :class=\"{'g3w-disabled': disableddownloadbutton}\">\n        <a :href=\"state.url\" :download=\"downloadImageName\">\n          <button @click=\"downloadImage\" class=\"btn skin-button skin-tooltip-left\" style=\"font-weight: bold;\" data-placement=\"left\" data-toggle=\"tooltip\" v-t-tooltip.create=\"'sdk.print.download_image'\" :class=\"g3wtemplate.getFontClass('download')\" role=\"button\"></button>\n        </a>\n      </div>\n    </div>\n    <div v-show=\"format==='png' && state.url\" style=\"height: 100%; width: 100%; position: relative; overflow-y: auto\" >\n      <img style=\"height:auto; max-width: 100%\" ref=\"printoutput\" :src=\"state.url\">\n    </div>\n  </div>\n  <h4 v-if=\"!state.layers\" v-t=\"'sdk.print.no_layers'\"></h4>\n</div>\n";

},{}],661:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    base = _require.base,
    imageToDataURL = _require.imageToDataURL;

var GUI = require('gui/gui');
var Component = require('gui/vue/component');
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./printpage.html'));

var InternalComponent = Vue.extend(_extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: null,
      disableddownloadbutton: true,
      downloadImageName: '',
      format: null
    };
  },
  computed: {
    loading: function loading() {
      return this.state.loading && this.state.layers;
    }
  },
  methods: {
    setLoading: function setLoading() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      GUI.disableSideBar(bool);
      this.state.loading = bool;
      this.disableddownloadbutton = bool;
    },
    downloadImage: function downloadImage() {
      var _this = this;

      this.setLoading(true);
      if (this.format === 'jpg' || this.format === 'png') {
        this.downloadImageName = 'download.' + this.state.format;
        imageToDataURL({
          src: this.state.url,
          type: 'image/' + this.state.format,
          callback: function callback(url) {
            return setTimeout(function () {
              return _this.setLoading(false);
            });
          }
        });
      }
    }
  },
  watch: {
    'state.url': function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!url) {
                  _context.next = 5;
                  break;
                }

                this.format = this.state.format;
                _context.next = 4;
                return this.$nextTick();

              case 4:
                $(this.$refs.printoutput).load(url, function (response, status) {
                  _this2.$options.service.stopLoading();
                  status === 'error' && _this2.$options.service.showError();
                  _this2.setLoading(false);
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function stateUrl(_x2) {
        return _ref.apply(this, arguments);
      }

      return stateUrl;
    }()
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.$nextTick();

            case 2:
              this.state.layers && this.$options.service.startLoading();

            case 3:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.state.url && this.state.method === 'POST' && window.URL.revokeObjectURL(this.state.url);
  }
}));

var PrintPage = function PrintPage() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  var service = options.service;
  this.setService(service);
  var internalComponent = new InternalComponent({
    service: service
  });
  this.setInternalComponent(internalComponent);
  this.internalComponent.state = service.state.output;
  this.unmount = function () {
    this.getService().setPrintAreaAfterCloseContent();
    return base(this, 'unmount');
  };
};

inherit(PrintPage, Component);

module.exports = PrintPage;

},{"./printpage.html":660,"core/utils/utils":485,"gui/gui":575,"gui/vue/component":718,"gui/vue/utils":727}],662:[function(require,module,exports){
module.exports = "<div id=\"menu-projects\" class=\"container\">\n  <div class=\"row row-equal\">\n    <!-- item -->\n    <div v-for=\"menuitem in state.menuitems\"  :key=\"menuitem.title\" @click=\"trigger(menuitem)\" class=\"col-xs-12 col-sm-4 project-menu\">\n      <div class=\"project-menu-item-image\">\n        <img :src=\"logoSrc(menuitem.thumbnail)\" class=\"img-responsive\">\n      </div>\n      <div class=\"project-menu-item-content\">\n        <div class=\"project-menu-item-text\">\n          <h4 class=\"project-menu-item-title\">{{ menuitem.title }}</h4>\n          <div v-html=\"menuitem.description\"></div>\n        </div>\n      </div>\n    </div>\n    <div v-if=\"!state.menuitems.length\" style=\"margin-left:15px;\">\n      <h2 v-t=\"'no_other_projects'\"></h2>\n    </div>\n  </div>\n</div>\n";

},{}],663:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var t = require('core/i18n/i18n.service').t;

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    merge = _require.merge;

var Component = require('gui/vue/component');
var GUI = require('gui/gui');
var ProjectsRegistry = require('core/project/projectsregistry');
var compiledTemplate = Vue.compile(require('./menu.html'));
var fakeImage = '/static/client/images/FakeProjectThumb.png';

var InternalComponent = Vue.extend(_extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: null,
      loading: false
    };
  },

  methods: {
    trigger: function trigger(item) {
      if (item.cbk) {
        //set full screen modal
        GUI.showFullModal({
          show: true
        });
        GUI.setLoadingContent(true);
        var gid = item.gid;

        item.cbk.call(item, {
          gid: gid
        }).then(function (promise) {
          //changeProject is a setter so it return a promise
          promise.then(function (project) {
            return document.title = project.state.html_page_title;
          }).fail(function () {
            GUI.notify.error("<h4>" + t("error_map_loading") + "</h4>" + "<h5>" + t("check_internet_connection_or_server_admin") + "</h5>");
          }).always(function () {
            GUI.showFullModal({
              show: false
            });
            GUI.setLoadingContent(false);
          });
        });
      } else if (item.href) window.open(item.href, '_blank');else if (item.route) GUI.goto(item.route);else console.log("No action for " + item.title);
    },
    logoSrc: function logoSrc(src) {
      var imageSrc = void 0;
      if (src) {
        imageSrc = src.indexOf(ProjectsRegistry.config.mediaurl) !== -1 ? src : src.indexOf('static') === -1 && src.indexOf('media') === -1 ? '' + ProjectsRegistry.config.mediaurl + src : fakeImage;
      } else imageSrc = fakeImage;
      return this.$options.host && '' + this.$options.host + imageSrc || imageSrc;
    }
  }
}));

function MenuComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = options.title || "menu";
  this.state.visible = true;
  this.state.menuitems = options.menuitems;
  var host = options.host;
  merge(this, options);
  this.internalComponent = new InternalComponent({
    service: this,
    host: host
  });
  this.internalComponent.state = this.state;
}
inherit(MenuComponent, Component);

var proto = MenuComponent.prototype;

proto.trigger = function (item) {};

module.exports = MenuComponent;

},{"./menu.html":662,"core/i18n/i18n.service":418,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/gui":575,"gui/vue/component":718}],664:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var ProjectRegistry = require('core/project/projectsregistry');
var MenuComponent = require('./menu');

function ProjectsMenuComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.id = 'projectsmenu';
  base(this, options);
  this.state.menuitems = [];
  var host = options.host;
  var ApplicationService = require('core/applicationservice');
  var projects = options.projects || ProjectRegistry.getListableProjects();
  this.state.menuitems = projects.map(function (project) {
    return {
      title: project.title,
      description: project.description,
      thumbnail: project.thumbnail,
      gid: project.gid,
      cbk: options.cbk || function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var gid = options.gid;

        return ApplicationService.changeProject({
          gid: gid,
          host: host
        });
      }
    };
  });
}

inherit(ProjectsMenuComponent, MenuComponent);

module.exports = ProjectsMenuComponent;

},{"./menu":663,"core/applicationservice":401,"core/project/projectsregistry":478,"core/utils/utils":485}],665:[function(require,module,exports){
var QueryBuilder = require('./vue/querybuilder');
var QueryBuilderPanel = require('./vue/panel/querybuilderpanel');

var QuerybuilderUIfactory = {
  type: null,
  show: function show() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$type = _ref.type,
        type = _ref$type === undefined ? 'sidebar' : _ref$type,
        options = _ref.options;

    var QueryBuilderInstance = void 0;
    this.type = this.type === null ? type : this.type;
    if (this.type === 'modal') {
      QueryBuilderInstance = new QueryBuilder({
        options: options
      });
      var queryBuilderDom = QueryBuilderInstance.$mount().$el;
      GUI.showModalDialog({
        title: 'Query Builder',
        message: queryBuilderDom,
        className: "modal-background-dark "
      });
    } else {
      var panel = new QueryBuilderPanel({
        options: options
      });
      QueryBuilderInstance = panel.getInternalPanel();
      panel.show();
    }
    return QueryBuilderInstance;
  }
};

module.exports = QuerybuilderUIfactory;

},{"./vue/panel/querybuilderpanel":668,"./vue/querybuilder":670}],666:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var DataRouterService = require('core/data/routerservice');
var CatalogLayersStorRegistry = require('core/catalog/cataloglayersstoresregistry');
var ApplicationService = require('core/applicationservice');
var ProjectsRegistry = require('core/project/projectsregistry');
var GUI = require('gui/gui');

var _require = require('core/utils/utils'),
    uniqueId = _require.uniqueId,
    createFilterFromString = _require.createFilterFromString;

var t = require('core/i18n/i18n.service').t;
var XHR = require('core/utils/utils').XHR;
var QUERYBUILDERSEARCHES = 'QUERYBUILDERSEARCHES';

function QueryBuilderService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._cacheValues = {};
  this._items = ApplicationService.getLocalItem(QUERYBUILDERSEARCHES) || {};
}

var proto = QueryBuilderService.prototype;

proto.getCurrentProjectItems = function () {
  var projectId = ProjectsRegistry.getCurrentProject().getId();
  this._items[projectId] = this._items[projectId] || [];
  return this._items[projectId];
};

proto.getItems = function (projectId) {
  var items = ApplicationService.getLocalItem(QUERYBUILDERSEARCHES);
  projectId = projectId || ProjectsRegistry.getCurrentProject().getId();
  return items ? items[projectId] || [] : [];
};

proto._getLayerById = function (layerId) {
  return CatalogLayersStorRegistry.getLayerById(layerId);
};

proto.getValues = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref2.layerId,
      field = _ref2.field;

  var valuesField, layer, dataUrl, response;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          this._cacheValues[layerId] = this._cacheValues[layerId] || {};
          valuesField = this._cacheValues[layerId][field];

          if (!(valuesField === undefined)) {
            _context.next = 18;
            break;
          }

          _context.prev = 3;
          layer = this._getLayerById(layerId);
          dataUrl = layer.getUrl('data');
          _context.next = 8;
          return XHR.get({
            url: dataUrl,
            params: {
              ordering: field,
              unique: field
            }
          });

        case 8:
          response = _context.sent;

          if (response.result) this._cacheValues[layerId][field] = this._cacheValues[layerId][field] || response.data;
          return _context.abrupt('return', this._cacheValues[layerId][field] || []);

        case 13:
          _context.prev = 13;
          _context.t0 = _context['catch'](3);

          reject();

        case 16:
          _context.next = 19;
          break;

        case 18:
          return _context.abrupt('return', valuesField);

        case 19:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this, [[3, 13]]);
}));

proto.run = function () {
  var _this = this;

  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref3.layerId,
      stringFilter = _ref3.filter,
      _ref3$showResult = _ref3.showResult,
      showResult = _ref3$showResult === undefined ? true : _ref3$showResult;

  return new Promise(function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resolve, reject) {
      var layer, search_endpoint, filter, _ref5, data;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              layer = _this._getLayerById(layerId);
              search_endpoint = layer.getSearchEndPoint();
              filter = createFilterFromString({
                layer: layer,
                search_endpoint: search_endpoint,
                filter: stringFilter
              });
              _context2.prev = 3;
              _context2.next = 6;
              return DataRouterService.getData('search:features', {
                inputs: {
                  layer: layer,
                  filter: filter,
                  search_endpoint: search_endpoint,
                  feature_count: 100
                },
                outputs: showResult
              });

            case 6:
              _ref5 = _context2.sent;
              data = _ref5.data;

              resolve(data);
              _context2.next = 15;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2['catch'](3);

              GUI.showUserMessage({
                type: 'alert',
                message: 'sdk.querybuilder.error_run',
                autoclose: true
              });
              reject(_context2.t0);

            case 15:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this, [[3, 11]]);
    }));

    return function (_x4, _x5) {
      return _ref4.apply(this, arguments);
    };
  }());
};

proto.test = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref7.layerId,
      filter = _ref7.filter;

  var data;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return this.run({
            layerId: layerId,
            filter: filter,
            showResult: false
          });

        case 3:
          data = _context3.sent;
          return _context3.abrupt('return', data.length && data[0].features.length);

        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3['catch'](0);

          _context3.t0 = t('sdk.querybuilder.error_test');
          return _context3.abrupt('return', Promise.reject(_context3.t0));

        case 11:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this, [[0, 7]]);
}));

proto.delete = function () {
  var _this2 = this;

  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref8.id;

  return new Promise(function (resolve, reject) {
    GUI.dialog.confirm(t('sdk.querybuilder.delete'), function (result) {
      if (result) {
        var querybuildersearches = _this2.getItems().filter(function (item) {
          return item.id !== id;
        });
        var projectId = ProjectsRegistry.getCurrentProject().getId();
        var saveitems = ApplicationService.getLocalItem(QUERYBUILDERSEARCHES);
        if (querybuildersearches.length) saveitems[projectId] = querybuildersearches;else delete saveitems[projectId];
        if (Object.keys(saveitems).length) ApplicationService.setLocalItem({
          id: QUERYBUILDERSEARCHES,
          data: saveitems
        });else ApplicationService.removeLocalItem(QUERYBUILDERSEARCHES);
        resolve();
      } else reject();
    });
  });
};

proto.editLocalItem = function (projectId, querybuildersearch) {
  projectId = projectId || ProjectsRegistry.getCurrentProject().getId();
  var querybuildersearches = ApplicationService.getLocalItem(QUERYBUILDERSEARCHES);
  querybuildersearches[projectId].find(function (_querybuildersearch, index) {
    if (_querybuildersearch.id === querybuildersearch.id) {
      querybuildersearches[projectId][index] = querybuildersearch;
      return true;
    }
  });
  ApplicationService.setLocalItem({
    id: QUERYBUILDERSEARCHES,
    data: querybuildersearches
  });
  this._resetItems(projectId, querybuildersearches[projectId]);
};

proto._resetItems = function (projectId, querybuildersearches) {
  var _this3 = this;

  setTimeout(function () {
    querybuildersearches.forEach(function (querybuildersearch) {
      return _this3._items[projectId].push(querybuildersearch);
    });
  }, 0);
  this._items[projectId].splice(0);
};

proto.addLocalItem = function (projectId, querybuildersearch) {
  querybuildersearch.id = uniqueId();
  projectId = projectId || ProjectsRegistry.getCurrentProject().getId();
  var querybuildersearches = ApplicationService.getLocalItem(QUERYBUILDERSEARCHES);
  if (querybuildersearches === undefined) {
    var _querybuildersearches = [querybuildersearch];
    ApplicationService.setLocalItem({
      id: QUERYBUILDERSEARCHES,
      data: _defineProperty({}, projectId, _querybuildersearches)
    });
    this._resetItems(projectId, _querybuildersearches);
  } else {
    querybuildersearches[projectId] = querybuildersearches[projectId] ? [].concat(_toConsumableArray(querybuildersearches[projectId]), [querybuildersearch]) : [querybuildersearch];
    ApplicationService.setLocalItem({
      id: QUERYBUILDERSEARCHES,
      data: querybuildersearches
    });
    this._resetItems(projectId, querybuildersearches[projectId]);
  }
};

proto.save = function () {
  var _this4 = this;

  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref9.id,
      name = _ref9.name,
      layerId = _ref9.layerId,
      filter = _ref9.filter,
      projectId = _ref9.projectId;

  var layerName = this._getLayerById(layerId).getName();
  var querybuildersearch = {
    layerId: layerId,
    filter: filter,
    layerName: layerName
  };
  if (id) {
    querybuildersearch.name = name;
    querybuildersearch.id = id;
    this.editLocalItem(projectId, querybuildersearch);
    GUI.showUserMessage({
      type: 'success',
      message: t("sdk.querybuilder.messages.changed"),
      autoclose: true
    });
    return;
  }
  GUI.dialog.prompt(t('sdk.querybuilder.additem'), function (result) {
    if (result) {
      var searchService = GUI.getComponent('search').getService();
      querybuildersearch.name = result;
      searchService.addQueryBuilderSearch(querybuildersearch);
      _this4.addLocalItem(projectId, querybuildersearch);
      GUI.showUserMessage({
        type: 'success',
        message: t("sdk.querybuilder.messages.changed"),
        autoclose: true
      });
    }
  });
};

proto.all = function () {};

proto.sample = function () {};

proto.clear = function () {
  this._cacheValues = {};
};

proto.add = function () {};

exports.default = new QueryBuilderService();

},{"core/applicationservice":401,"core/catalog/cataloglayersstoresregistry":403,"core/data/routerservice":406,"core/i18n/i18n.service":418,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/gui":575}],667:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _service = require('../service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

QueryBuilderUIFactory = require('../querybuilderuifactory');
exports.default = {
  name: "g3w-querybuilder-search",
  props: {
    querybuildersearch: {
      required: true
    }
  },
  data: function data() {
    return {
      loading: false,
      showinfo: false
    };
  },

  methods: {
    remove: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return _service2.default.delete(this.querybuildersearch);

              case 3:
                this.$emit('delete');
                _context.next = 8;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context['catch'](0);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 6]]);
      }));

      function remove() {
        return _ref.apply(this, arguments);
      }

      return remove;
    }(),
    edit: function edit() {
      QueryBuilderUIFactory.show({
        options: {
          id: this.querybuildersearch.id,
          name: this.querybuildersearch.name,
          layerId: this.querybuildersearch.layerId,
          filter: this.querybuildersearch.filter
        }
      });
    },
    run: function run() {
      var _this = this;

      this.loading = true;
      _service2.default.run({
        layerId: this.querybuildersearch.layerId,
        filter: this.querybuildersearch.filter
      }).finally(function () {
        _this.loading = false;
      });
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',[_c('div',{staticStyle:{"position":"relative"}},[_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('div',{staticClass:"querybuliserch-tools",staticStyle:{"display":"flex","align-items":"baseline"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('filter'),staticStyle:{"margin-right":"14px","margin-left":"1px"}}),_vm._v(" "),_c('span',{staticStyle:{"white-space":"pre-wrap"}},[_vm._v(_vm._s(_vm.querybuildersearch.name))]),_vm._v(" "),_c('div',{staticStyle:{"margin-left":"auto"}},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.run'),expression:"'sdk.querybuilder.search.run'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('run'),staticStyle:{"color":"green","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();return _vm.run($event)}}})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.info'),expression:"'sdk.querybuilder.search.info'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('info'),staticStyle:{"color":"#FFFFFF","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();_vm.showinfo=!_vm.showinfo}}})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.edit'),expression:"'sdk.querybuilder.search.edit'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('pencil'),staticStyle:{"color":"#307095","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();return _vm.edit($event)}}})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.delete'),expression:"'sdk.querybuilder.search.delete'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('trash'),staticStyle:{"color":"red","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();return _vm.remove($event)}}})])])]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showinfo),expression:"showinfo"}],staticClass:"querybuildsearch-info",staticStyle:{"margin-top":"5px"}},[_c('div',[_c('span',{staticStyle:{"font-weight":"bold","white-space":"pre"}},[_vm._v("LAYER: ")]),_vm._v(" "),_c('span',{staticStyle:{"white-space":"pre-wrap"}},[_vm._v(_vm._s(_vm.querybuildersearch.layerName))])]),_vm._v(" "),_c('div',[_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v("EXPRESSION: ")]),_vm._v(" "),_c('span',{staticStyle:{"white-space":"pre-wrap"}},[_vm._v(_vm._s(_vm.querybuildersearch.filter))])])])],1)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0e3919b4"

},{"../querybuilderuifactory":665,"../service":666}],668:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Panel = require('gui/panel');
var QueryBuilder = require('gui/querybuilder/vue/querybuilder');

function QueryBuilderPanel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.title = 'Query Builder';
  base(this, options);
  var internalPanel = new QueryBuilder(options);
  this.setInternalPanel(internalPanel);
}

inherit(QueryBuilderPanel, Panel);

module.exports = QueryBuilderPanel;

},{"core/utils/utils":485,"gui/panel":653,"gui/querybuilder/vue/querybuilder":670}],669:[function(require,module,exports){
module.exports = "<div id=\"query_builder\" class=\"form-group\" style=\"flex-wrap: nowrap !important\">\n  <div id=\"query_builder_header\"></div>\n    <div id=\"query_builder_layers\" class=\"margin-between-element\">\n      <label class=\"querybuilder-title\" v-t=\"'sdk.querybuilder.panel.layers'\"></label>\n      <select id=\"query_builder_layers_select\" class=\"form-control\">\n        <option v-for=\"(layer, index) in layers\" :key=\"layer.label\" :value=\"index\" class=\"bold\">{{ layer.label }}</option>\n      </select>\n    </div>\n    <div id=\"query_builder_fields\" class=\"margin-between-element\">\n      <div id=\"query_builder_fields_title\" class=\"querybuilder-title\" v-t=\"'sdk.querybuilder.panel.fields'\"></div>\n      <div id=\"query_builder_fields_content\" class=\"querybuilder-content\">\n        <table class=\"table table-striped content-table\">\n          <tbody>\n            <tr v-for=\"{name, label} in fields\" :key=\"name\" @click=\"select.field = name\" @dblclick=\"addToExpression({value: name, type: 'field'})\" :class=\"{'skin-background-color lighten': select.field===name}\" style=\"cursor: pointer\">\n              <th scope=\"row\">{{ label }}</th>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <div id=\"query_builder_values\" class=\"margin-between-element\">\n      <div id=\"query_builder_values_title\" class=\"querybuilder-title\" v-t=\"'sdk.querybuilder.panel.values'\"></div>\n      <div v-if=\"!manual\" id=\"query_builder_values_content\" class=\"querybuilder-content margin-between-element\">\n        <bar-loader :loading=\"loading.values\"></bar-loader>\n        <table class=\"table table-striped content-table\">\n          <tbody>\n            <tr v-for=\"value in values\" @click=\"select.value = value\" :class=\"{'skin-background-color lighten': select.value===value}\" :key=\"value\" @dblclick=\"addToExpression({value: value, type: 'value'})\" style=\"cursor: pointer\">\n              <th scope=\"row\">{{ value }}</th>\n            </tr>\n            <tr>\n              <th scope=\"row\"></th>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div v-else id=\"querybuilder-manual\" class=\"margin-between-element\" style=\"display:flex; justify-content: space-between; align-items: stretch\">\n        <input class=\"form-control\" style=\"\" v-model=\"manualvalue\" style=\"border: 0;\">\n        <span style=\"cursor: pointer; font-size: 1.2em; background-color: white; color: #000000; padding: 9px;\"\n              @click=\"manualvalue && addToExpression({value: manualvalue, type: 'value'})\"\n              :class=\"g3wtemplate.getFontClass('plus')\"></span>\n      </div>\n      <div id=\"query_builder_values_buttons\" class=\"content-end skin-color\">\n        <button id=\"query_builder_values_buttons_sample\" class=\"query_builder_button btn btn-secondary bold \" v-t=\"'sdk.querybuilder.panel.button.manual'\" @click=\"manual = true\" :class=\"{'skin-border-color' : manual}\"></button>\n        <button id=\"query_builder_values_buttons_all\" class=\"query_builder_button btn btn-secondary bold \" v-t=\"'sdk.querybuilder.panel.button.all'\" @click=\"all\" :disabled=\"select.field === null\" :class=\"{'skin-border-color' : !manual}\"></button>\n      </div>\n    </div>\n    <div id=\"query_builder_operators\" class=\"margin-between-element\" style=\"margin-top: auto !important\">\n      <div id=\"query_builder_operators_title\" class=\"querybuilder-title\" v-t=\"'sdk.querybuilder.panel.operators'\"></div>\n      <div id=\"query_builder_operators_content\" class=\"content-wrap\">\n        <button v-for=\"operator in operators\" @click=\"addToExpression({value: operator, type: 'operator'})\" :key=\"operator\" class=\"query_builder_button btn btn-secondary skin-color bold\">{{ operator }}</button>\n      </div>\n    </div>\n    <div id=\"query_builder_footer\">\n      <div id=\"query_builder_expression\">\n        <div id=\"query_builder_expression_title\" class=\"querybuilder-title\" v-t=\"'sdk.querybuilder.panel.expression'\"></div>\n        <div id=\"query_builder_expression_content\">\n          <textarea style=\"width: 100%; resize: none; height: 100px; color:#000000\" v-model=\"filter\"></textarea>\n        </div>\n      </div>\n      <div id=\"query_builder_message\" class=\"margin-between-element\">\n        <bar-loader :loading=\"loading.test\"></bar-loader>\n        <span class=\"bold skin-color\" v-show=\"message\" v-t=\"'sdk.querybuilder.messages.number_of_features'\"></span><span class=\"bold skin-color\">{{message}}</span>\n      </div>\n      <div id=\"query_builder_footer_buttons\" class=\"content-end margin-between-element\">\n        <button class=\"query_builder_button btn btn-secondary  bold\" @click=\"test\" :disabled=\"disabled\" v-t=\"'sdk.querybuilder.panel.button.test'\"></button>\n        <button class=\"query_builder_button btn btn-secondary  bold\" @click=\"reset\" v-t=\"'sdk.querybuilder.panel.button.clear'\"></button>\n        <button class=\"query_builder_button btn btn-secondary  bold\" @click=\"run\" :disabled=\"disabled\" v-t=\"'sdk.querybuilder.panel.button.run'\"></button>\n        <button class=\"query_builder_button btn btn-secondary  bold\" @click=\"save\" :disabled=\"disabled\" v-t=\"'sdk.querybuilder.panel.button.save'\"></button>\n      </div>\n    </div>\n</div>\n";

},{}],670:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _service = require('../service');

var _service2 = _interopRequireDefault(_service);

var _operators = require('core/layers/filter/operators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var templateCompiled = Vue.compile(require('./querybuilder.html'));
var ProjectsRegistry = require('core/project/projectsregistry');
var operators = Object.values(_operators.OPERATORS);

var QueryBuilder = Vue.extend(_extends({}, templateCompiled, {
  data: function data() {
    var options = this.$options.options;
    var edit = options !== undefined;
    return {
      edit: edit,
      currentlayer: null,
      message: '',
      filter: edit ? options.filter : '',
      loading: {
        test: false,
        values: false
      },
      values: [],
      manual: true,
      manualvalue: null,
      select: {
        field: null,
        value: null
      }
    };
  },

  computed: {
    fields: function fields() {
      return this.currentlayer ? this.currentlayer.fields : [];
    },
    disabled: function disabled() {
      return !this.filter;
    }
  },
  watch: {
    'select.field': function selectField() {
      this.values = [];
      this.manual = true;
    }
  },
  methods: {
    addToExpression: function addToExpression() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          value = _ref.value,
          type = _ref.type;

      switch (type) {
        case 'operator':
          value = ' ' + value + ' ';
          break;
        case 'field':
          value = '"' + value + '"';
          break;
        case 'value':
          value = '\'' + value + '\'';
          break;
      }
      if (value) this.filter = '' + this.filter + value;
    },
    all: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.loading.values = true;
                _context.prev = 1;
                _context.next = 4;
                return _service2.default.getValues({
                  layerId: this.currentlayer.id,
                  field: this.select.field
                });

              case 4:
                this.values = _context.sent;
                _context.next = 9;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context['catch'](1);

              case 9:
                this.loading.values = false;
                _context.next = 12;
                return this.$nextTick();

              case 12:
                this.manualvalue = null;
                this.manual = false;

              case 14:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 7]]);
      }));

      function all() {
        return _ref2.apply(this, arguments);
      }

      return all;
    }(),
    reset: function reset() {
      this.filter = '';
      this.message = '';
      this.filterElement.previous = null;
      this.filterElement.current = null;
      this.filterElement.operator = null;
    },
    test: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var layerId, number_of_features;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                layerId = this.currentlayer.id;

                this.loading.test = true;
                number_of_features = void 0;
                _context2.prev = 3;
                _context2.next = 6;
                return _service2.default.test({
                  layerId: layerId,
                  filter: this.filter
                });

              case 6:
                number_of_features = _context2.sent;

                this.message = number_of_features !== undefined ? ' ' + number_of_features : '';
                _context2.next = 13;
                break;

              case 10:
                _context2.prev = 10;
                _context2.t0 = _context2['catch'](3);

                this.message = _context2.t0;

              case 13:
                this.loading.test = false;
                _context2.next = 16;
                return this.$nextTick();

              case 16:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 10]]);
      }));

      function test() {
        return _ref3.apply(this, arguments);
      }

      return test;
    }(),
    run: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var layerId, response;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                layerId = this.currentlayer.id;

                this.loading.test = true;
                _context3.prev = 2;
                _context3.next = 5;
                return _service2.default.run({
                  layerId: layerId,
                  filter: this.filter
                });

              case 5:
                response = _context3.sent;
                _context3.next = 10;
                break;

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3['catch'](2);

              case 10:
                this.loading.test = false;

              case 11:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2, 8]]);
      }));

      function run() {
        return _ref4.apply(this, arguments);
      }

      return run;
    }(),
    save: function save() {
      _service2.default.save({
        layerId: this.currentlayer.id,
        filter: this.filter,
        projectId: this.projectId,
        name: this.edit && this.$options.options.name,
        id: this.edit && this.$options.options.id
      });
    }
  },
  created: function created() {
    var _this = this;

    this.filterElement = {
      current: null,
      previous: null,
      operator: null
    };
    var project = ProjectsRegistry.getCurrentProject();
    this.layers = project.getLayers().filter(function (layer) {
      return !layer.baselayer && layer.geometrytype && layer.geometrytype !== 'NoGeometry' && Array.isArray(layer.fields);
    }).map(function (layer) {
      var relations = project.getRelationsByLayerId({
        layerId: layer.id,
        type: 'ONE'
      });
      var excludejoinfields = [];
      relations.forEach(function (relation) {
        var customPrefix = relation.customPrefix;

        var joinLayer = project.getLayerById(relation.referencingLayer);
        customPrefix = customPrefix === undefined ? joinLayer.getName() + '_' : customPrefix;
        var joinLayerFields = joinLayer.getFields().map(function (field) {
          return '' + customPrefix + field.name;
        });
        excludejoinfields = [].concat(_toConsumableArray(excludejoinfields), _toConsumableArray(joinLayerFields));
      });
      return {
        id: layer.id,
        label: layer.name,
        fields: layer.fields.map(function (field) {
          return {
            label: field.label,
            name: field.name
          };
        }).filter(function (field) {
          return excludejoinfields.indexOf(field) === -1;
        })
      };
    });
    this.operators = operators;
    this.currentlayer = this.edit ? this.layers.find(function (layer) {
      return layer.id === _this.$options.options.layerId;
    }) : this.layers[0];
  },
  mounted: function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var _this2 = this;

      var index;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.$nextTick();

            case 2:
              this.select2 = $('#query_builder_layers_select').select2({
                width: '100%'
              });
              if (this.edit) {
                index = this.layers.indexOf(this.currentlayer);

                this.select2.val(index);
                this.select2.trigger('change');
              }
              this.select2.on('select2:select', function (evt) {
                _this2.currentlayer = _this2.layers[evt.params.data.id];
                _this2.select.field = null;
                _this2.select.value = null;
                _this2.reset();
              });

            case 5:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function mounted() {
      return _ref5.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.select2.select2('destroy');
    this.select2 = null;
  }
}));

module.exports = QueryBuilder;

},{"../service":666,"./querybuilder.html":669,"core/layers/filter/operators":439,"core/project/projectsregistry":478}],671:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('constant');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ApplicationService = require('core/applicationservice');

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    noop = _require.noop,
    downloadFile = _require.downloadFile,
    throttle = _require.throttle,
    getUniqueDomId = _require.getUniqueDomId;

var DataRouterService = require('core/data/routerservice');

var _require2 = require('core/utils/geo'),
    getAlphanumericPropertiesFromFeature = _require2.getAlphanumericPropertiesFromFeature,
    createFeatureFromGeometry = _require2.createFeatureFromGeometry,
    createFeatureFromBBOX = _require2.createFeatureFromBBOX,
    createFeatureFromCoordinates = _require2.createFeatureFromCoordinates;

var t = require('core/i18n/i18n.service').t;
var ProjectsRegistry = require('core/project/projectsregistry');
var Layer = require('core/layers/layer');
var GUI = require('gui/gui');
var G3WObject = require('core/g3wobject');
var VectorLayer = require('core/layers/vectorlayer');
var PrintService = require('core/print/printservice');
var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var RelationsPage = require('gui/relations/vue/relationspage');
var PickCoordinatesInteraction = require('g3w-ol/src/interactions/pickcoordinatesinteraction');
// set formats for download single feature
var DOWNLOAD_FEATURE_FORMATS = ['shapefile', 'gpx', 'gpkg', 'csv', 'xls'];

function QueryResultsService() {
  var _this = this;

  this.printService = new PrintService();
  this._currentLayerIds = [];

  ProjectsRegistry.onafter('setCurrentProject', function (project) {
    _this._setRelations(project);
    _this._setAtlasActions(project);
    _this.state.download_data = false;
    _this.plotLayerIds = [];
  });
  this.unlistenerlayeractionevents = [];
  this._actions = {
    'zoomto': QueryResultsService.zoomToElement,
    'highlightgeometry': this.highlightGeometry.bind(this),
    'clearHighlightGeometry': this.clearHighlightGeometry.bind(this)
  };
  this._relations = [];
  this._atlas = [];
  this.plotLayerIds = [];
  var project = this._project = ProjectsRegistry.getCurrentProject();
  // userful to set right order for query result based on toc order layers
  this._projectLayerIds = this._project.getConfigLayers().map(function (layer) {
    return layer.id;
  });
  // set reactive state
  this.state = {
    zoomToResult: true,
    components: [],
    layers: [],
    query: null,
    type: 'ows', // or api in case of search
    loading: false,
    layersactions: {},
    layersFeaturesBoxes: {}
  };
  this.init = function () {
    this.clearState();
  };

  // Is a vector layer used by query resul to show eventually query resuesta as coordnates, bbox, polygon, etc ..
  var stroke = new ol.style.Stroke({
    color: 'black',
    width: 3
  });
  this.resultsQueryLayer = new ol.layer.Vector({
    style: new ol.style.Style({
      stroke: stroke,
      image: new ol.style.Circle({
        stroke: stroke,
        radius: 5
      })
    }),
    source: new ol.source.Vector()
  });

  this._vectorLayers = [];
  this._addFeaturesLayerResultInteraction = {
    id: null, // reference to current layer
    interaction: null, // interaction bind to layer,
    mapcontrol: null, // add current toggled map control if toggled
    toggleeventhandler: null
  };
  this.setters = {
    /**
     *
     * @param queryResponse
     * @param options: add is used to know if is a new query request or add/remove query request
     */
    setQueryResponse: function setQueryResponse(queryResponse) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { add: false };
      var add = options.add;

      !add && this.clearState();
      this.state.query = queryResponse.query;
      this.state.type = queryResponse.type;
      var layers = this._digestFeaturesForLayers(queryResponse.data);
      this.setLayersData(layers, options);
    },
    setLayersData: function setLayersData(layers) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { add: false };
      var add = options.add;

      if (!add) {
        // here set the right order of result layers based on toc
        this._currentLayerIds = layers.map(function (layer) {
          return layer.id;
        });
        this._orderResponseByProjectLayers(layers);
      }
      this.state.loading = false;
      layers.forEach(function (layer) {
        // in case of a new request query
        if (!add) _this2.state.layers.push(layer);
        //get features from add pick layer
        else _this2.addRemoveFeaturesToLayerResult(layer);
      });
      this.setActionsForLayers(layers, { add: add });
    },
    addComponent: function addComponent(component) {
      this._addComponent(component);
    },
    addActionsForLayers: function addActionsForLayers(actions) {},
    postRender: function postRender(element) {},
    closeComponent: function closeComponent() {},
    openCloseFeatureResult: function openCloseFeatureResult() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          open = _ref.open,
          layer = _ref.layer,
          feature = _ref.feature,
          container = _ref.container;
    }
  };
  base(this);

  this.addLayersPlotIds = function () {
    var layerIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    this.plotLayerIds = layerIds;
  };

  this._setRelations(project);
  this._setAtlasActions(project);
  this._addVectorLayersDataToQueryResponse();
  this._asyncFnc = {
    todo: noop,
    zoomToLayerFeaturesExtent: {
      async: false
    },
    goToGeometry: {
      async: false
    }
  };
  GUI.onbefore('setContent', function (options) {
    var perc = options.perc;

    _this.mapService = _this.mapService || ApplicationService.getApplicationService('map');
    if (perc === 100 && GUI.isMobile()) {
      _this._asyncFnc.zoomToLayerFeaturesExtent.async = true;
      _this._asyncFnc.goToGeometry.async = true;
    }
  });
}

// Make the public service en Event Emitter
inherit(QueryResultsService, G3WObject);

var proto = QueryResultsService.prototype;

/**
 * Method to add a feature to current layer result
 * @param layer
 * @param feature
 */
proto.addFeatureLayerToResult = function (layer, feature) {
  this.state.layersFeaturesBoxes[this.getBoxId(layer, feature)].collapsed = true;
};

/**
 * Method to remove a feature from current layer result
 * @param layer
 * @param feature
 */
proto.removeFeatureLayerFromResult = function (layer, feature) {
  var id = layer.id,
      external = layer.external;

  this.addRemoveFeaturesToLayerResult({
    id: id,
    external: external,
    features: [feature]
  });
};

/**
 * Based on layer response check if features layer are to add or remove to current state.layers results
 * @param layer
 */
proto.addRemoveFeaturesToLayerResult = function (layer) {
  var _this3 = this;

  //extract features from layer object
  var _layer$features = layer.features,
      features = _layer$features === undefined ? [] : _layer$features;
  // get layer from current state.layers showed on result

  var findLayer = this.state.layers.find(function (_layer) {
    return _layer.id === layer.id;
  });
  // if get features and find layer
  if (findLayer && features.length) {
    // get id external layer or not (external is a layer added by mapcontrol addexternlayer)
    var external = findLayer.external;
    // is array of idexes od features that we has to remove from state.layer because is already loaded

    var removeFeatureIndexes = [];
    // get id of the features
    var features_ids = features.map(function (feature) {
      return !external ? feature.attributes[_constant.G3W_FID] : feature.id;
    });
    // loop nad filter the features that we had to remove)
    findLayer.features = findLayer.features.filter(function (feature) {
      var indexFindFeature = features_ids.indexOf(!external ? feature.attributes[_constant.G3W_FID] : feature.id);
      // check if need to filter or not
      var filtered = indexFindFeature === -1;
      if (!filtered) {
        removeFeatureIndexes.push(indexFindFeature);
        var featureRemoved = features[indexFindFeature];
        _this3.state.layersFeaturesBoxes[_this3.getBoxId(layer, feature)].collapsed = true;
        setTimeout(function () {
          return delete _this3.state.layersFeaturesBoxes[_this3.getBoxId(layer, featureRemoved)];
        });
      } else _this3.state.layersFeaturesBoxes[_this3.getBoxId(layer, feature)].collapsed = true;
      return filtered;
    });
    // filter features to add
    features = features.filter(function (feature, index) {
      return removeFeatureIndexes.indexOf(index) === -1;
    });
    // check if new feature ha to be added
    if (features.length) findLayer.features = [].concat(_toConsumableArray(findLayer.features), _toConsumableArray(features));
    //in case of removed features
    if (findLayer.features.length === 1 && this.state.layersFeaturesBoxes[this.getBoxId(findLayer, findLayer.features[0])])
      // used to do all vue reactive thing before update layers
      setTimeout(function () {
        return _this3.state.layersFeaturesBoxes[_this3.getBoxId(findLayer, findLayer.features[0])].collapsed = false;
      });
    // in case no more features on layer remove interaction pickoordinate to get result from map
    this.checkIfLayerHasNoFeatures(findLayer);
  }
  // hightlight new feature
  this.state.layers.length === 1 && this.highlightFeaturesPermanently(this.state.layers[0]);
};

/**
 * Check and do action if layer has no features after delete feature(s
 */
proto.checkIfLayerHasNoFeatures = function (layer) {
  var _this4 = this;

  if (layer.features.length === 0) {
    // used to do all vue reactive thing before update layers
    setTimeout(function () {
      _this4.state.layers = _this4.state.layers.filter(function (_layer) {
        return _layer.id !== layer.id;
      });
      _this4.clearHighlightGeometry(layer);
      _this4.removeAddFeaturesLayerResultInteraction(true);
    });
  }
};

/**
 * Method to create boxid identify to query result hmtl
 * @param layer
 * @param feature
 * @param relation_index
 * @returns {string}
 */
proto.getBoxId = function (layer, feature, relation_index) {
  return relation_index !== null && relation_index !== undefined ? layer.id + '_' + feature.id + '_' + relation_index : layer.id + '_' + feature.id;
};

proto.setActionsForLayers = function (layers) {
  var _this5 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { add: false };
  var add = options.add;

  if (!add) {
    this.unlistenerlayeractionevents = [];
    layers.forEach(function (layer) {
      if (!_this5.state.layersactions[layer.id]) _this5.state.layersactions[layer.id] = [];
      _this5.state.layersactions[layer.id].push({
        id: 'removefeaturefromresult',
        download: false,
        mouseover: true,
        class: GUI.getFontClass('trash'),
        style: {
          color: 'red'
        },
        hint: 'sdk.mapcontrols.query.actions.remove_feature_from_results.hint',
        cbk: _this5.removeFeatureLayerFromResult.bind(_this5)
      });
      //in case of geometry
      if (layer.hasgeometry) {
        _this5.state.layersactions[layer.id].push({
          id: 'gotogeometry',
          download: false,
          mouseover: true,
          class: GUI.getFontClass('marker'),
          hint: 'sdk.mapcontrols.query.actions.zoom_to_feature.hint',
          cbk: throttle(_this5.goToGeometry.bind(_this5))
        });
      }
      // in case of relations
      if (_this5._relations) {
        var relations = _this5._relations[layer.id] && _this5._relations[layer.id].filter(function (relation) {
          return relation.type === 'MANY';
        });
        if (relations && relations.length) {
          var chartRelationIds = [];
          relations.forEach(function (relation) {
            var id = _this5.plotLayerIds.find(function (id) {
              return id === relation.referencingLayer;
            });
            id && chartRelationIds.push(id);
          });

          _this5.state.layersactions[layer.id].push({
            id: 'show-query-relations',
            download: false,
            class: GUI.getFontClass('relation'),
            hint: 'sdk.mapcontrols.query.actions.relations.hint',
            cbk: _this5.showQueryRelations,
            relations: relations,
            chartRelationIds: chartRelationIds
          });
          var toggled = {};
          layer.features.map(function (feature, index) {
            return toggled[index] = false;
          });
          chartRelationIds.length && _this5.state.layersactions[layer.id].push({
            id: 'show-plots-relations',
            download: false,
            opened: true,
            class: GUI.getFontClass('chart'),
            state: Vue.observable({
              toggled: toggled
            }),
            hint: 'sdk.mapcontrols.query.actions.relations_charts.hint',
            cbk: throttle(_this5.showRelationsChart.bind(_this5, chartRelationIds))
          });
        }
      }

      _this5.getAtlasByLayerId(layer.id).length && _this5.state.layersactions[layer.id].push({
        id: 'printatlas',
        download: true,
        class: GUI.getFontClass('print'),
        hint: 'sdk.tooltips.atlas',
        cbk: _this5.printAtlas.bind(_this5)
      });

      DOWNLOAD_FEATURE_FORMATS.forEach(function (format) {
        layer.download[format] && _this5.state.layersactions[layer.id].push({
          id: 'download_' + format + '_feature',
          download: true,
          class: GUI.getFontClass(format),
          hint: 'sdk.tooltips.download_' + format,
          cbk: _this5.downloadFeatures.bind(_this5, format)
        });
      });

      if (layer.selection.active !== undefined) {
        // selection action
        var _toggled = {};
        layer.features.map(function (feature, index) {
          return _toggled[index] = false;
        });
        _this5.state.layersactions[layer.id].push({
          id: 'selection',
          download: false,
          class: GUI.getFontClass('success'),
          hint: 'sdk.mapcontrols.query.actions.add_selection.hint',
          state: Vue.observable({
            toggled: _toggled
          }),
          init: function init() {
            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                feature = _ref2.feature,
                index = _ref2.index,
                action = _ref2.action;

            layer.selection.active !== void 0 && _this5.checkFeatureSelection({
              layerId: layer.id,
              index: index,
              feature: feature,
              action: action
            });
          },
          cbk: throttle(_this5.addToSelection.bind(_this5))
        });
        _this5.listenClearSelection(layer, 'selection');
        //end selection action
      }
    });
    this.addActionsForLayers(this.state.layersactions);
  }
};

/**
 * Clear all
 */
proto.clear = function () {
  this.runAsyncTodo();
  this.unlistenerEventsActions();
  this.mapService.clearHighlightGeometry();
  this.resultsQueryLayer.getSource().clear();
  this.removeAddFeaturesLayerResultInteraction(true);
  this.mapService.getMap().removeLayer(this.resultsQueryLayer);
  this._asyncFnc = null;
  this._asyncFnc = {
    todo: noop,
    zoomToLayerFeaturesExtent: {
      async: false
    },
    goToGeometry: {
      async: false
    }
  };
};

proto.getCurrentLayersIds = function () {
  return this._currentLayerIds;
};

proto.runAsyncTodo = function () {
  this._asyncFnc.todo();
};

proto._orderResponseByProjectLayers = function (layers) {
  var _this6 = this;

  layers.sort(function (layerA, layerB) {
    var aIndex = _this6._projectLayerIds.indexOf(layerA.id);
    var bIndex = _this6._projectLayerIds.indexOf(layerB.id);
    return aIndex > bIndex ? 1 : -1;
  });
};

proto.setZoomToResults = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.state.zoomToResult = bool;
};

proto.highlightFeaturesPermanently = function (layer) {
  var features = layer.features;

  this.mapService.highlightFeatures(features, {
    duration: Infinity
  });
};

/**
 * Check if one layer result
 * @returns {boolean}
 */
proto.isOneLayerResult = function () {
  return this.state.layers.length === 1;
};

/**
 *
 * @param toggle boolean If true toggle true the mapcontrol
 */
proto.removeAddFeaturesLayerResultInteraction = function () {
  var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (this._addFeaturesLayerResultInteraction.interaction) this.mapService.removeInteraction(this._addFeaturesLayerResultInteraction.interaction);
  this._addFeaturesLayerResultInteraction.interaction = null;
  this._addFeaturesLayerResultInteraction.id = null;
  // check if map control query map is register and if toggled
  toggle && this._addFeaturesLayerResultInteraction.mapcontrol && this._addFeaturesLayerResultInteraction.mapcontrol.toggle(true);
  this._addFeaturesLayerResultInteraction.mapcontrol = null;
  this._addFeaturesLayerResultInteraction.toggleeventhandler && this.mapService.off('mapcontrol:toggled', this._addFeaturesLayerResultInteraction.toggleeventhandler);
  this._addFeaturesLayerResultInteraction.toggleeventhandler = null;
};

/**
 *
 * Adde feature to Features results
 * @param layer
 */
proto.addLayerFeaturesToResultsAction = function (layer) {
  var _this7 = this;

  /**
   * Check if layer is current layer to add or clear previous
   */
  if (this._addFeaturesLayerResultInteraction.id !== null && this._addFeaturesLayerResultInteraction.id !== layer.id) {
    var _layer2 = this.state.layers.find(function (layer) {
      return layer.id === _this7._addFeaturesLayerResultInteraction.id;
    });
    if (_layer2) _layer2.addfeaturesresults.active = false;
    //remove previous add result interaction
    this.removeAddFeaturesLayerResultInteraction();
  }
  this._addFeaturesLayerResultInteraction.id = layer.id;
  layer.addfeaturesresults.active = !layer.addfeaturesresults.active;
  if (layer.addfeaturesresults.active) {
    var external = layer.external;

    if (!this._addFeaturesLayerResultInteraction.mapcontrol) this._addFeaturesLayerResultInteraction.mapcontrol = this.mapService.getCurrentToggledMapControl();
    this._addFeaturesLayerResultInteraction.interaction = new PickCoordinatesInteraction();
    this.mapService.addInteraction(this._addFeaturesLayerResultInteraction.interaction, false);
    this._addFeaturesLayerResultInteraction.interaction.on('picked', function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(evt) {
        var coordinates, vectorLayer, responseObject;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                coordinates = evt.coordinate;

                if (external) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return DataRouterService.getData('query:coordinates', {
                  inputs: {
                    coordinates: coordinates,
                    layerIds: [layer.id],
                    multilayers: false
                  }, outputs: {
                    add: true
                  }
                });

              case 4:
                _context.next = 9;
                break;

              case 6:
                vectorLayer = _this7._vectorLayers.find(function (vectorLayer) {
                  return layer.id === vectorLayer.get('id');
                });
                responseObject = _this7.getVectorLayerFeaturesFromQueryRequest(vectorLayer, {
                  coordinates: coordinates
                });

                _this7.setQueryResponse({
                  data: [responseObject],
                  query: {
                    coordinates: coordinates
                  }
                }, { add: true });

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this7);
      }));

      return function (_x9) {
        return _ref3.apply(this, arguments);
      };
    }());
    var eventHandler = function eventHandler(evt) {
      if (evt.target.isToggled() && evt.target.isClickMap()) {
        layer.addfeaturesresults.active = false;
      }
    };
    this._addFeaturesLayerResultInteraction.toggleeventhandler = eventHandler;
    this.mapService.once('mapcontrol:toggled', eventHandler);
  } else this.removeAddFeaturesLayerResultInteraction(true);
};

proto.zoomToLayerFeaturesExtent = function (layer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var features = layer.features;

  options.highlight = !this.isOneLayerResult();
  if (this._asyncFnc.zoomToLayerFeaturesExtent.async) this._asyncFnc.todo = this.mapService.zoomToFeatures.bind(this.mapService, features, options);else this.mapService.zoomToFeatures(features, options);
};

proto.clearState = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state.layers.splice(0);
  this.state.query = {};
  this.state.querytitle = "";
  this.state.loading = true;
  this.state.layersactions = {};
  this.state.layersFeaturesBoxes = {};
};

proto.getState = function () {
  return this.state;
};

proto.setState = function (state) {
  this.state = state;
};

proto._setRelations = function (project) {
  var projectRelations = project.getRelations();
  this._relations = projectRelations ? _.groupBy(projectRelations, 'referencedLayer') : [];
};

proto.getAtlasByLayerId = function (layerId) {
  return this._atlas.filter(function (atlas) {
    return atlas.atlas.qgs_layer_id === layerId;
  });
};

proto._setAtlasActions = function (project) {
  this._atlas = project.getPrint().filter(function (printconfig) {
    return printconfig.atlas;
  }) || [];
};

proto.setTitle = function (querytitle) {
  this.state.querytitle = querytitle || "";
};

proto.reset = function () {
  this.clearState();
};

proto._digestFeaturesForLayers = function (featuresForLayers) {
  var _this8 = this;

  var id = 0;
  featuresForLayers = featuresForLayers || [];
  var layers = [];
  var layerAttributes = void 0,
      layerRelationsAttributes = void 0,
      layerTitle = void 0,
      layerId = void 0;
  var _handleFeatureFoLayer = function _handleFeatureFoLayer(featuresForLayer) {
    var formStructure = void 0;
    var sourceType = void 0;
    var extractRelations = false;
    var external = false;
    var layer = featuresForLayer.layer;
    var download = {
      shapefile: false,
      gpx: false,
      gpkg: false,
      csv: false,
      xls: false
    };
    var filter = {};
    var selection = {};
    if (layer instanceof Layer) {
      // set selection filtere and relation if not wms
      if (layer.getSourceType() !== 'wms') {
        filter = layer.state.filter;
        selection = layer.state.selection;
        extractRelations = true;
      }
      download.shapefile = layer.isShpDownlodable();
      download.gpx = layer.isGpxDownlodable();
      download.gpkg = layer.isGpkgDownlodable();
      download.csv = layer.isCsvDownlodable();
      download.xls = layer.isXlsDownlodable();
      try {
        sourceType = layer.getSourceType();
      } catch (err) {}

      // sanitize qattributes layer only if is ows
      layerAttributes = _this8.state.type === 'ows' ? layer.getAttributes().map(function (attribute) {
        var sanitizeAttribute = _extends({}, attribute);
        sanitizeAttribute.name = sanitizeAttribute.name.replace(/ /g, '_');
        return sanitizeAttribute;
      }) : layer.getAttributes();

      layerRelationsAttributes = [];
      layerTitle = layer.getTitle();
      layerId = layer.getId();
      if (layer.hasFormStructure()) {
        var structure = layer.getEditorFormStructure({
          all: true
        });
        if (_this8._relations && _this8._relations.length) {
          var getRelationFieldsFromFormStructure = function getRelationFieldsFromFormStructure(node) {
            if (!node.nodes) {
              node.name ? node.relation = true : null;
            } else {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = node.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _node = _step.value;

                  getRelationFieldsFromFormStructure(_node);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          };
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var node = _step2.value;

              getRelationFieldsFromFormStructure(node);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
        var fields = layer.getFields().filter(function (field) {
          return field.show;
        }); // get features show
        formStructure = {
          structure: structure,
          fields: fields
        };
      }
    } else if (layer instanceof ol.layer.Vector) {
      layerAttributes = layer.getProperties();
      layerRelationsAttributes = [];
      layerTitle = layer.get('name');
      layerId = layer.get('id');
      external = true;
    } else if (typeof layer === 'string' || layer instanceof String) {
      sourceType = Layer.LayerTypes.VECTOR;
      var feature = featuresForLayer.features[0];
      layerAttributes = feature ? feature.getProperties() : [];
      layerRelationsAttributes = [];
      var split_layer_name = layer.split('_');
      layerTitle = split_layer_name.length > 4 ? split_layer_name.slice(0, split_layer_name.length - 4).join(' ') : layer;
      layerId = layer;
      external = true;
    }
    var layerObj = {
      title: layerTitle,
      id: layerId,
      attributes: [],
      features: [],
      hasgeometry: false,
      atlas: _this8.getAtlasByLayerId(layerId),
      source: '',
      download: download,
      show: true,
      filter: filter,
      addfeaturesresults: {
        active: false
      },
      external: external,
      selection: selection,
      expandable: true,
      hasImageField: false,
      relationsattributes: layerRelationsAttributes,
      formStructure: formStructure,
      error: ''
    };

    if (featuresForLayer.features && featuresForLayer.features.length) {
      var layerSpecialAttributesName = layer instanceof Layer ? layerAttributes.filter(function (attribute) {
        try {
          return attribute.name[0] === '_' || Number.isInteger(1 * attribute.name[0]);
        } catch (e) {
          return false;
        }
      }).map(function (attribute) {
        return {
          alias: attribute.name.replace(/_/, ''),
          name: attribute.name
        };
      }) : [];
      layerSpecialAttributesName.length && featuresForLayer.features.forEach(function (feature) {
        return _this8._setSpecialAttributesFetureProperty(layerSpecialAttributesName, feature);
      });
      layerObj.attributes = _this8._parseAttributes(layerAttributes, featuresForLayer.features[0], sourceType);
      layerObj.attributes.forEach(function (attribute) {
        if (formStructure) {
          var relationField = layer.getFields().find(function (field) {
            return field.name === attribute.name;
          }); // need to check all field also show false
          !relationField && formStructure.fields.push(attribute);
        }
        if (attribute.type === 'image') layerObj.hasImageField = true;
      });
      featuresForLayer.features.forEach(function (feature) {
        var fid = feature.getId() ? feature.getId() : id;
        var geometry = feature.getGeometry();
        if (geometry) layerObj.hasgeometry = true;
        var featureObj = {
          id: fid,
          attributes: feature.getProperties(),
          geometry: feature.getGeometry(),
          show: true
        };
        layerObj.features.push(featureObj);
        id += 1;
      });
      layers.push(layerObj);
    } else if (featuresForLayer.error) layerObj.error = featuresForLayer.error;
  };
  featuresForLayers.forEach(function (featuresForLayer) {
    if (!Array.isArray(featuresForLayer)) _handleFeatureFoLayer(featuresForLayer);else featuresForLayer.forEach(function (featuresForLayer) {
      return _handleFeatureFoLayer(featuresForLayer);
    });
  });
  return layers;
};

proto._setSpecialAttributesFetureProperty = function (layerSpecialAttributesName, feature) {
  var featureAttributes = feature.getProperties();
  var featureAttributesNames = Object.keys(featureAttributes);
  if (layerSpecialAttributesName.length) {
    layerSpecialAttributesName.forEach(function (attributeObj) {
      featureAttributesNames.find(function (featureAttribute) {
        if (featureAttribute.match(attributeObj.alias)) {
          feature.set(attributeObj.name, feature.get(featureAttribute));
          return true;
        }
      });
    });
  }
};

proto._parseAttributes = function (layerAttributes, feature, sourceType) {
  var featureAttributes = feature.getProperties();
  var featureAttributesNames = Object.keys(featureAttributes);
  featureAttributesNames = getAlphanumericPropertiesFromFeature(featureAttributesNames);
  if (layerAttributes && layerAttributes.length) {
    var attributes = layerAttributes.filter(function (attribute) {
      return featureAttributesNames.indexOf(attribute.name) > -1;
    });
    return attributes;
  } else {
    return featureAttributesNames.map(function (featureAttributesName) {
      return {
        name: featureAttributesName,
        label: featureAttributesName,
        show: featureAttributesName !== _constant.G3W_FID && sourceType === 'wms' || sourceType === undefined
      };
    });
  }
};

proto.trigger = function (actionId, layer, feature, index, container) {
  var actionMethod = this._actions[actionId];
  actionMethod && actionMethod(layer, feature, index);
  if (layer) {
    var layerActions = this.state.layersactions[layer.id];
    if (layerActions) {
      var action = layerActions.find(function (layerAction) {
        return layerAction.id === actionId;
      });
      action && this.triggerLayerAction(action, layer, feature, index, container);
    }
  }
};

proto.triggerLayerAction = function (action, layer, feature, index, container) {
  action.cbk && action.cbk(layer, feature, action, index, container);
  if (action.route) {
    var url = void 0;
    var urlTemplate = action.route;
    url = urlTemplate.replace(/{(\w*)}/g, function (m, key) {
      return feature.attributes.hasOwnProperty(key) ? feature.attributes[key] : "";
    });
    url && url !== '' && GUI.goto(url);
  }
};

proto.registerVectorLayer = function (vectorLayer) {
  this._vectorLayers.indexOf(vectorLayer) === -1 && this._vectorLayers.push(vectorLayer);
};

proto.unregisterVectorLayer = function (vectorLayer) {
  var _this9 = this;

  this._vectorLayers = this._vectorLayers.filter(function (layer) {
    _this9.state.layers = _this9.state.layers && _this9.state.layers.filter(function (layer) {
      return layer.id !== vectorLayer.get('id');
    });
    return layer !== vectorLayer;
  });
};

proto.getVectorLayerFeaturesFromQueryRequest = function (vectorLayer) {
  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var isVisible = false;
  var coordinates = query.coordinates,
      bbox = query.bbox,
      geometry = query.geometry; // extract information about query type

  var features = [];
  switch (vectorLayer.constructor) {
    case VectorLayer:
      isVisible = vectorLayer.isVisible();
      break;
    case ol.layer.Vector:
      isVisible = vectorLayer.getVisible();
      break;
  }
  if (!isVisible) return true;
  // case query coordinates
  if (coordinates && Array.isArray(coordinates)) {
    var pixel = this.mapService.viewer.map.getPixelFromCoordinate(coordinates);
    this.mapService.viewer.map.forEachFeatureAtPixel(pixel, function (feature, layer) {
      features.push(feature);
    }, {
      layerFilter: function layerFilter(layer) {
        return layer === vectorLayer;
      }
    });
    //case bbox
  } else if (bbox && Array.isArray(bbox)) {
    var _geometry = ol.geom.Polygon.fromExtent(bbox);
    switch (vectorLayer.constructor) {
      case VectorLayer:
        features = vectorLayer.getIntersectedFeatures(_geometry);
        break;
      case ol.layer.Vector:
        vectorLayer.getSource().getFeatures().forEach(function (feature) {
          _geometry.intersectsExtent(feature.getGeometry().getExtent()) && features.push(feature);
        });
        break;
    }
    //case geometry
  } else if (geometry instanceof ol.geom.Polygon || geometry instanceof ol.geom.MultiPolygon) {
    switch (vectorLayer.constructor) {
      case VectorLayer:
        features = vectorLayer.getIntersectedFeatures(geometry);
        break;
      case ol.layer.Vector:
        vectorLayer.getSource().getFeatures().forEach(function (feature) {
          geometry.intersectsExtent(feature.getGeometry().getExtent()) && features.push(feature);
        });
        break;
    }
  }
  return {
    features: features,
    layer: vectorLayer
  };
};

proto._addVectorLayersDataToQueryResponse = function () {
  var _this10 = this;

  this.onbefore('setQueryResponse', function (queryResponse) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _queryResponse$query = queryResponse.query,
        query = _queryResponse$query === undefined ? {} : _queryResponse$query;
    var _options$add = options.add,
        add = _options$add === undefined ? false : _options$add;

    !add && _this10._vectorLayers.forEach(function (vectorLayer) {
      var responseObj = _this10.getVectorLayerFeaturesFromQueryRequest(vectorLayer, query);
      if (!queryResponse.data) queryResponse.data = [];
      queryResponse.data.push(responseObj);
    });
  });
};

//function to add custom componet in query result
proto._addComponent = function (component) {
  this.state.components.push(component);
};

proto._printSingleAtlas = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$atlas = _ref4.atlas,
      atlas = _ref4$atlas === undefined ? {} : _ref4$atlas,
      _ref4$features = _ref4.features,
      features = _ref4$features === undefined ? [] : _ref4$features;

  var template = atlas.name,
      field_name = atlas.atlas.field_name;

  field_name = field_name || '$id';
  var values = features.map(function (feature) {
    return feature.attributes[field_name === '$id' ? _constant.G3W_FID : field_name];
  });
  var download_caller_id = ApplicationService.setDownload(true);
  return this.printService.printAtlas({
    field: field_name,
    values: values,
    template: template,
    download: true
  }).then(function (_ref5) {
    var url = _ref5.url;

    downloadFile({
      url: url,
      filename: template,
      mime_type: 'application/pdf'
    }).catch(function (error) {
      GUI.showUserMessage({
        type: 'alert',
        error: error
      });
    }).finally(function () {
      ApplicationService.setDownload(false, download_caller_id);
      GUI.setLoadingContent(false);
    });
  });
};

proto.showChart = function (ids, container, relationData) {
  this.emit('show-chart', ids, container, relationData);
};

proto.hideChart = function (container) {
  this.emit('hide-chart', container);
};

proto.showRelationsChart = function () {
  var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var layer = arguments[1];
  var feature = arguments[2];
  var action = arguments[3];
  var index = arguments[4];
  var container = arguments[5];

  action.state.toggled[index] = !action.state.toggled[index];
  if (action.state.toggled[index]) {
    var relations = this._relations[layer.id];
    var relationData = {
      relations: relations,
      fid: feature.attributes[_constant.G3W_FID],
      height: 400
    };
    this.emit('show-chart', ids, container, relationData);
  } else this.hideChart(container);
};

proto.printAtlas = function (layer, feature) {
  var _this11 = this;

  var layerId = layer.id,
      features = layer.features;

  var inputAtlasAttr = 'g3w_atlas_index';
  features = feature ? [feature] : features;
  var atlasLayer = this.getAtlasByLayerId(layerId);
  if (atlasLayer.length > 1) {
    var inputs = '';
    atlasLayer.forEach(function (atlas, index) {
      var id = getUniqueDomId();
      inputs += '<input id="' + id + '" ' + inputAtlasAttr + '="' + index + '" class="magic-radio" type="radio" name="template" value="' + atlas.name + '"/>\n                 <label for="' + id + '">' + atlas.name + '</label>\n                 <br>';
    });

    GUI.showModalDialog({
      title: "Seleziona Template",
      message: inputs,
      buttons: {
        success: {
          label: "OK",
          className: "btn-success",
          callback: function callback() {
            var index = $('input[name="template"]:checked').attr(inputAtlasAttr);
            if (index !== null || index !== undefined) {
              var atlas = atlasLayer[index];
              _this11._printSingleAtlas({
                atlas: atlas,
                features: features
              });
            }
          }
        }
      }
    });
  } else this._printSingleAtlas({
    atlas: atlasLayer[0],
    features: features
  });
};

/**
 *
 * @param type
 * @param layerId
 * @param features
 */
proto.downloadFeatures = function (type) {
  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      layerId = _ref6.id;

  var features = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var data = {};
  features = features ? Array.isArray(features) ? features : [features] : features;
  data.fids = features.map(function (feature) {
    return feature.attributes[_constant.G3W_FID];
  }).join(',');
  var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
  var promise = Promise.resolve();
  var download_caller_id = ApplicationService.setDownload(true);
  GUI.setLoadingContent(true);
  switch (type) {
    case 'shapefile':
      promise = layer.getShp({ data: data });
      break;
    case 'xls':
      promise = layer.getXls({ data: data });
      break;
    case 'csv':
      promise = layer.getCsv({ data: data });
      break;
    case 'gpx':
      promise = layer.getGpx({ data: data });
      break;
    case 'gpkg':
      promise = layer.getGpkg({ data: data });
      break;
  }
  promise.catch(function (err) {
    GUI.notify.error(t("info.server_error"));
  }).finally(function () {
    ApplicationService.setDownload(false, download_caller_id);
    GUI.setLoadingContent(false);
  });
};

proto.downloadGpx = function () {
  var _this12 = this;

  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref7.id;

  var feature = arguments[1];

  var fid = feature ? feature.attributes[_constant.G3W_FID] : null;
  var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
  layer.getGpx({ fid: fid }).catch(function (err) {
    GUI.notify.error(t("info.server_error"));
  }).finally(function () {
    _this12.layerMenu.loading.shp = false;
    _this12._hideMenu();
  });
};

proto.downloadXls = function () {
  var _this13 = this;

  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref8.id;

  var feature = arguments[1];

  var fid = feature ? feature.attributes[_constant.G3W_FID] : null;
  var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
  layer.getXls({ fid: fid }).catch(function (err) {
    GUI.notify.error(t("info.server_error"));
  }).finally(function () {
    _this13.layerMenu.loading.shp = false;
    _this13._hideMenu();
  });
};

proto.listenClearSelection = function (layer, actionId) {
  var _this14 = this;

  var _layer = CatalogLayersStoresRegistry.getLayerById(layer.id);
  var handler = function handler() {
    var action = _this14.state.layersactions[layer.id].find(function (action) {
      return action.id === actionId;
    });
    layer.features.forEach(function (feature, index) {
      return action.state.toggled[index] = false;
    });
  };
  _layer.on('unselectionall', handler);
  this.unlistenerlayeractionevents.push({
    layer: _layer,
    event: 'unselectionall',
    handler: handler
  });
};

proto.unlistenerEventsActions = function () {
  this.unlistenerlayeractionevents.forEach(function (obj) {
    return obj.layer.off(obj.event, obj.handler);
  });
  this.unlistenerlayeractionevents = [];
};

proto.addRemoveFilter = function (layer) {
  var _layer = CatalogLayersStoresRegistry.getLayerById(layer.id);
  _layer.toggleFilterToken();
};

/**
 *
 * @param layer
 */
proto.selectionFeaturesLayer = function (layer) {
  var _this15 = this;

  var layerId = layer.id;
  var action = this.state.layersactions[layerId].find(function (action) {
    return action.id === 'selection';
  });
  var bool = Object.values(action.state.toggled).reduce(function (acculmulator, value) {
    return acculmulator && value;
  }, true);
  var _layer = CatalogLayersStoresRegistry.getLayerById(layerId);
  layer.features.forEach(function (feature, index) {
    action.state.toggled[index] = !bool;
    _this15._addRemoveSelectionFeature(_layer, feature, index, bool ? 'remove' : 'add');
  });
};

/**
 *
 * @param layer
 * @param feature
 * @param index
 * @param force
 * @returns {Promise<void>}
 * @private
 */
proto._addRemoveSelectionFeature = function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(layer, feature, index, force) {
    var fid, hasAlreadySelectioned, currentLayer;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fid = feature ? feature.attributes[_constant.G3W_FID] : null;
            hasAlreadySelectioned = layer.getFilterActive() || layer.hasSelectionFid(fid);

            if (!hasAlreadySelectioned) {
              if (feature && feature.geometry && !layer.getOlSelectionFeature(fid)) {
                layer.addOlSelectionFeature({
                  id: fid,
                  geometry: feature.geometry
                });
              }
            }

            if (!(force === undefined)) {
              _context2.next = 7;
              break;
            }

            layer[hasAlreadySelectioned ? 'excludeSelectionFid' : 'includeSelectionFid'](fid);
            _context2.next = 15;
            break;

          case 7:
            if (!(!hasAlreadySelectioned && force === 'add')) {
              _context2.next = 12;
              break;
            }

            _context2.next = 10;
            return layer.includeSelectionFid(fid);

          case 10:
            _context2.next = 15;
            break;

          case 12:
            if (!(hasAlreadySelectioned && force === 'remove')) {
              _context2.next = 15;
              break;
            }

            _context2.next = 15;
            return layer.excludeSelectionFid(fid);

          case 15:
            if (layer.getFilterActive()) {
              currentLayer = this.state.layers.find(function (_layer) {
                return _layer.id === layer.getId();
              });

              layer.getSelectionFids().size > 0 && currentLayer && currentLayer.features.splice(index, 1);
              this.mapService.clearHighlightGeometry();
              this.state.layers.length === 1 && !this.state.layers[0].features.length && this.state.layers.splice(0);
            }

          case 16:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x20, _x21, _x22, _x23) {
    return _ref9.apply(this, arguments);
  };
}();

proto.checkFeatureSelection = function () {
  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref10.layerId,
      feature = _ref10.feature,
      index = _ref10.index,
      action = _ref10.action;

  var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
  if (feature) {
    var fid = feature ? feature.attributes[_constant.G3W_FID] : null;
    action.state.toggled[index] = layer.getFilterActive() || layer.hasSelectionFid(fid);
  }
};

/**
 *
 * @param layer
 * @param feature
 * @param action
 * @param index
 */
proto.addToSelection = function (layer, feature, action, index) {
  action.state.toggled[index] = !action.state.toggled[index];
  var _layer = CatalogLayersStoresRegistry.getLayerById(layer.id);
  this._addRemoveSelectionFeature(_layer, feature, index);
};

proto.removeQueryResultLayerFromMap = function () {
  this.resultsQueryLayer.getSource().clear();
  this.mapService.getMap().removeLayer(this.resultsQueryLayer);
};

// show layerQuery result on map
proto.addQueryResultsLayerToMap = function (_ref11) {
  var _this16 = this;

  var feature = _ref11.feature,
      _ref11$timeout = _ref11.timeout,
      timeout = _ref11$timeout === undefined ? 1500 : _ref11$timeout;

  this.removeQueryResultLayerFromMap();
  this.resultsQueryLayer.getSource().addFeature(feature);
  this.mapService.getMap().addLayer(this.resultsQueryLayer);
  timeout && setTimeout(function () {
    _this16.removeQueryResultLayerFromMap();
  }, timeout);
};

/**
 *
  Show featureFormCoordinates
 */
proto.showCoordinates = function (coordinates) {
  var feature = createFeatureFromCoordinates(coordinates);
  this.addQueryResultsLayerToMap({ feature: feature });
};

/**
 * Show BBox
 * @param bbox
 */
proto.showBBOX = function (bbox) {
  var feature = createFeatureFromBBOX(bbox);
  this.addQueryResultsLayerToMap({ feature: feature });
};

/**
 * Show Geometry
 * @param geometry
 */
proto.showGeometry = function (geometry) {
  var feature = createFeatureFromGeometry({
    geometry: geometry
  });
  this.addQueryResultsLayerToMap({ feature: feature });
};

/**
 *
 * @param layer
 * @param feature
 */
proto.goToGeometry = function (layer, feature) {
  var _this17 = this;

  if (feature.geometry) {
    var handlerOptions = {
      mapServiceMethod: this.isOneLayerResult() ? 'zoomToFeatures' : 'highlightGeometry',
      firstParam: this.isOneLayerResult() ? [feature] : feature.geometry,
      options: this.isOneLayerResult() ? {} : {
        layerId: layer.id,
        duration: 1500
      }
    };
    if (this._asyncFnc.goToGeometry.async) this._asyncFnc.todo = this.mapService[handlerOptions.mapServiceMethod].bind(this.mapService, handlerOptions.firstParam, handlerOptions.options);else setTimeout(function () {
      return _this17.mapService[handlerOptions.mapServiceMethod](handlerOptions.firstParam, handlerOptions.options);
    });
  }
};

//save layer result
proto.saveLayerResult = function () {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref12.layer,
      _ref12$type = _ref12.type,
      type = _ref12$type === undefined ? 'csv' : _ref12$type;

  this.downloadFeatures(type, layer, layer.features);
};

proto.highlightGeometry = function (layer, feature) {
  feature.geometry && this.mapService.highlightGeometry(feature.geometry, {
    layerId: layer.id,
    zoom: false,
    duration: Infinity
  });
};

proto.clearHighlightGeometry = function (layer) {
  this.mapService.clearHighlightGeometry();
  this.isOneLayerResult() && this.highlightFeaturesPermanently(layer);
};

proto.showQueryRelations = function (layer, feature, action) {
  GUI.pushContent({
    content: new RelationsPage({
      relations: action.relations,
      chartRelationIds: action.chartRelationIds,
      feature: feature,
      layer: layer
    }),
    backonclose: true,
    closable: false
  });
};

module.exports = QueryResultsService;

},{"constant":399,"core/applicationservice":401,"core/catalog/cataloglayersstoresregistry":403,"core/data/routerservice":406,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/layers/layer":443,"core/layers/vectorlayer":465,"core/print/printservice":473,"core/project/projectsregistry":478,"core/utils/geo":484,"core/utils/utils":485,"g3w-ol/src/interactions/pickcoordinatesinteraction":526,"gui/gui":575,"gui/relations/vue/relationspage":683}],672:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "actions",
  props: {
    featureIndex: {
      type: Number
    },
    feature: {
      type: Object
    },
    layer: {
      type: Object
    },
    trigger: {
      type: Function
    },
    actions: {
      type: Array,
      default: []
    }
  },
  methods: {
    showAction: function showAction(action) {
      action.init && action.init({ feature: this.feature, index: this.featureIndex, action: action });
      return typeof action.condition === 'function' ? action.condition({ layer: this.layer, feature: this.feature }) : true;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.actions.length)?_c('td',{staticClass:"g3w-feature-actions"},_vm._l((_vm.actions),function(action){return (_vm.showAction(action))?_c('span',{directives:[{name:"download",rawName:"v-download",value:(action.download),expression:"action.download"},{name:"t-title",rawName:"v-t-title",value:(action.hint),expression:"action.hint"}],staticClass:"action-button  skin-tooltip-right",class:{'toggled': action.state && action.state.toggled[_vm.featureIndex] },attrs:{"data-placement":"right","data-toggle":"tooltip"},on:{"click":function($event){$event.stopPropagation();return _vm.trigger(action, _vm.layer, _vm.feature, _vm.featureIndex)}}},[_c('span',{class:("action-button-icon " + (action.class)),style:(action.style)})]):_vm._e()}),0):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0d7006b0"

},{}],673:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _actions = require("./actions.vue");

var _actions2 = _interopRequireDefault(_actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "headerfeaturebody",
  props: {
    toggleFeatureBoxAndZoom: {
      type: Function
    },
    trigger: {
      type: Function
    },
    hasLayerOneFeature: {
      type: Function
    },
    boxLayerFeature: {
      type: Object
    },
    attributesSubset: {
      type: Function
    },
    layer: {
      type: Object
    },
    feature: {
      type: Object
    },
    index: {
      type: Number
    },
    actions: {
      type: Array
    }
  },
  components: {
    actions: _actions2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',{staticClass:"featurebox-header",class:[_vm.boxLayerFeature.collapsed ? '' : 'featurebox-header-open'],on:{"click":function($event){return _vm.toggleFeatureBoxAndZoom(_vm.layer,_vm.feature)},"mouseover":function($event){return _vm.trigger({id:'highlightgeometry'}, _vm.layer, _vm.feature, _vm.index)},"mouseout":function($event){return _vm.trigger({id:'clearHighlightGeometry'}, _vm.layer, _vm.feature, _vm.index)}}},[_c('actions',{attrs:{"layer":_vm.layer,"featureIndex":_vm.index,"trigger":_vm.trigger,"feature":_vm.feature,"actions":_vm.actions}}),_vm._v(" "),_vm._l((_vm.attributesSubset(_vm.layer)),function(attribute){return _c('td',{staticClass:"attribute"},[_c('span',[_vm._v(_vm._s(_vm.feature.attributes[attribute.name]))])])}),_vm._v(" "),(!_vm.hasLayerOneFeature(_vm.layer))?_c('td',{staticClass:"collapsed"},[_c('span',{staticClass:"fa link morelink skin-color",class:[_vm.boxLayerFeature.collapsed ? _vm.g3wtemplate.font['plus'] : _vm.g3wtemplate.font['minus']]})]):_vm._e()],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-2eb3a454"

},{"./actions.vue":672}],674:[function(require,module,exports){
module.exports = "<div id=\"search-results\" class=\"queryresults-wrapper\">\n<!--  <div v-if=\"info.message\" class=\"query-info-results\" style=\"display: flex; align-items:center; margin-bottom: 5px; color: #394247\">-->\n<!--    <span @mouseover=\"info.action\" v-if=\"info.icon\" class=\"action-button skin-tooltip-right\" :class=\"g3wtemplate.getFontClass('info')\" data-placement=\"right\" data-toggle=\"tooltip\"     style=\"cursor: pointer; padding-right: 5px;font-size: 1.2em\" v-t-tooltip.create=\"info.message\"></span>-->\n<!--  </div>-->\n  <bar-loader :loading=\"state.loading\"></bar-loader>\n  <div class=\"queryresults-container\">\n    <template v-if=\"!state.loading\">\n      <ul v-if=\"hasLayers\" class=\"queryresults\" id=\"queryresults\" style=\"position: relative\">\n        <li v-if=\"layerHasFeatures(layer) && layer.show\" v-for=\"layer in state.layers\">\n          <div class=\"box box-primary\">\n            <div class=\"box-header with-border\"  :class=\"{'mobile': isMobile()}\" data-widget=\"collapse\">\n              <div class=\"box-title query-layer-title\" :style=\"{fontSize: isMobile() && '1em !important'}\">{{ layer.title }}\n                <span class=\"query-layer-feature-count\">({{layer.features.length}})</span>\n              </div>\n              <span @click.stop=\"addLayerFeaturesToResults(layer)\" class=\"action-button skin-tooltip-bottom\" :class=\"{'toggled': layer.addfeaturesresults.active}\"\n                    data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.add_features_to_results.hint'\">\n                  <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('plus-square')\"></span>\n                </span>\n              <div class=\"box-features-action\" v-if=\"layer.features.length > 1\">\n                <span v-if=\"layer.hasgeometry\" @click.stop=\"zoomToLayerFeaturesExtent(layer)\" class=\"action-button skin-tooltip-bottom\"\n                      data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.add_features_to_results.hint'\">\n                  <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('marker')\"></span>\n                </span>\n                <span v-if=\"layer.atlas.length\" v-download @click.stop=\"printAtlas(layer)\" class=\"action-button skin-tooltip-bottom\"\n                      data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.atlas.hint'\">\n                  <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('print')\"></span>\n                </span>\n                <span v-if=\"layer.download.shapefile\" v-download class=\"action-button skin-tooltip-bottom\" data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.download_features_shapefile.hint'\">\n                  <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('download')\" @click.stop=\"saveLayerResult(layer, 'shapefile')\"></span>\n                </span>\n                <span v-if=\"layer.download.gpx\" v-download class=\"action-button skin-tooltip-bottom\" data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.download_features_gpx.hint'\">\n                  <span class=\"action-button-icon\"  :class=\"g3wtemplate.getFontClass('gpx')\" @click.stop=\"saveLayerResult(layer, 'gpx')\"></span>\n                </span>\n                <span v-if=\"layer.download.gpkg\" v-download class=\"action-button skin-tooltip-bottom\" data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.download_features_gpkg.hint'\">\n                  <span class=\"action-button-icon\"  :class=\"g3wtemplate.getFontClass('gpkg')\" @click.stop=\"saveLayerResult(layer, 'gpkg')\"></span>\n                </span>\n                <span v-if=\"layer.download.csv\" v-download class=\"action-button skin-tooltip-bottom\" data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.download_features_csv.hint'\">\n                  <span  class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('csv')\" @click.stop=\"saveLayerResult(layer, 'csv')\"></span>\n                </span>\n                <span v-if=\"layer.download.xls\" v-download class=\"action-button skin-tooltip-bottom\" data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.download_features_xls.hint'\">\n                  <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('xls')\" @click.stop=\"saveLayerResult(layer, 'xls')\"></span>\n                </span>\n                <span @click.stop=\"selectionFeaturesLayer(layer)\" class=\"action-button skin-tooltip-bottom\"\n                       data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'sdk.mapcontrols.query.actions.add_selection.hint'\">\n                  <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('success')\"></span>\n                </span>\n              </div>\n              <span v-show=\"layer.selection.active\" @click.stop=\"addRemoveFilter(layer)\" class=\"action-button skin-tooltip-bottom\" :class=\"{'toggled': layer.filter.active}\"\n                    data-placement=\"bottom\" data-toggle=\"tooltip\" v-t-tooltip=\"'layer_selection_filter.tools.filter'\">\n                <span class=\"action-button-icon\" :class=\"g3wtemplate.getFontClass('filter')\"></span>\n              </span>\n              <button class=\"btn btn-box-tool\" data-widget=\"collapse\"><i class=\"btn-collapser skin-color\" :class=\"g3wtemplate.font['minus']\"></i></button>\n            </div>\n            <div class=\"box-body\" :class=\"{'mobile': isMobile()}\">\n              <template v-if=\"hasFormStructure(layer)\">\n                <table class=\"table\" :class=\"{'mobile': isMobile()}\">\n                  <thead>\n                    <tr>\n                      <th v-if=\"state.layersactions[layer.id].length\" :style=\"{width: `${state.layersactions[layer.id].length * 30}px`, maxWidth:`${state.layersactions[layer.id].length * 30}px`}\"></th>\n                      <th class=\"centered\" v-for=\"(attribute, index) in attributesSubset(layer)\">{{attribute.label}}</th>\n                      <th class=\"collapsed\" v-if=\"!hasLayerOneFeature(layer)\"></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <template v-if=\"feature.show\" v-for=\"(feature, index) in layer.features\">\n                      <header-feature-body :actions=\"state.layersactions[layer.id]\" :layer=\"layer\" :feature=\"feature\" :index=\"index\" :onelayerresult=\"onelayerresult\"\n                        :trigger=\"trigger\" :toggleFeatureBoxAndZoom=\"toggleFeatureBoxAndZoom\" :hasLayerOneFeature=\"hasLayerOneFeature\"\n                        :boxLayerFeature=\"getLayerFeatureBox(layer, feature)\" :attributesSubset=\"attributesSubset\">\n                      </header-feature-body>\n                      <tr v-show=\"!collapsedFeatureBox(layer,feature) || hasOneLayerAndOneFeature(layer)\" :id=\"`${layer.id}_${index}`\" class=\"featurebox-body\">\n                        <td :colspan=\"attributesSubsetLength(layer)+(state.layersactions[layer.id].length ? 1 : 0)+(!hasLayerOneFeature(layer)*1)\">\n                          <template v-for=\"item in getItemsFromStructure(layer)\">\n                            <table v-if=\"item.type === 'field'\" class=\"fieldsoutofstructure\">\n                              <tbody>\n                              <tr>\n                                <td class=\"attr-label\">{{ item.item.label }}</td>\n                                <td class=\"attr-value\" :attribute=\"item.item.name\">\n                                  <span v-if=\"is('simple',layer,item.item.name,feature.attributes[item.item.name])\" v-html=\"feature.attributes[item.item.name]\"></span>\n                                  <g3w-image v-else-if=\"is('photo',layer,item.item.name,feature.attributes[item.item.name])\"  :value=\"feature.attributes[item.item.name]\"></g3w-image>\n                                  <g3w-image v-else-if=\"checkField('image', item.item.label, layer.attributes)\"  :value=\"item.item.value\"></g3w-image>\n                                  <g3w-link v-else-if=\"is('link',layer, item.item.name,feature.attributes[item.item.name])\" :state=\"{value: feature.attributes[item.item.name]}\"></g3w-link>\n                                </td>\n                              </tr>\n                              </tbody>\n                            </table>\n                            <tabs v-else-if=\"item.type === 'tab'\" :fields=\"getQueryFields(layer, feature)\" :layerid=\"layer.id\" :feature=\"feature\" :tabs=\"item.item\"></tabs>\n                          </template>\n                        </td>\n                      </tr>\n                    </template>\n                  </tbody>\n                </table>\n              </template>\n              <table v-else class=\"table\" :class=\"{'mobile': isMobile()}\">\n                <thead>\n                  <tr>\n                    <th v-if=\"state.layersactions[layer.id].length\" :style=\"{width: `${state.layersactions[layer.id].length * 30}px`, maxWidth:`${state.layersactions[layer.id].length * 30}px`}\"></th>\n                    <th class=\"centered\" v-for=\"(attribute, index) in attributesSubset(layer)\">{{attribute.label}}</th>\n                    <th class=\"collapsed\" v-if=\"!hasLayerOneFeature(layer)\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <template v-if=\"feature.show\" v-for=\"(feature, index) in layer.features\">\n                    <header-feature-body :actions=\"state.layersactions[layer.id]\" :layer=\"layer\" :feature=\"feature\" :index=\"index\" :onelayerresult=\"onelayerresult\"\n                    :trigger=\"trigger\" :toggleFeatureBoxAndZoom=\"toggleFeatureBoxAndZoom\" :hasLayerOneFeature=\"hasLayerOneFeature\"\n                    :boxLayerFeature=\"getLayerFeatureBox(layer, feature)\" :attributesSubset=\"attributesSubset\">\n                    </header-feature-body>\n                    <tr v-show=\"!collapsedFeatureBox(layer,feature) || hasOneLayerAndOneFeature(layer)\" :id=\"`${layer.id}_${index}`\" class=\"featurebox-body\">\n                      <td :colspan=\"attributesSubsetLength(layer)+(state.layersactions[layer.id].length ? 1 : 0)+(!hasLayerOneFeature(layer)*1)\">\n                        <table class=\"feature_attributes\">\n                            <tr v-for=\"attribute in layer.attributes.filter(attribute => attribute.show)\">\n                              <td class=\"attr-label\">{{ attribute.label }}</td>\n                              <td class=\"attr-value\" :attribute=\"attribute.name\">\n                                <span v-if=\"is('simple',layer,attribute.name,feature.attributes[attribute.name])\" v-html=\"feature.attributes[attribute.name]\"></span>\n                                <g3w-image v-else-if=\"is('photo',layer,attribute.name,feature.attributes[attribute.name])\"  :value=\"feature.attributes[attribute.name]\"></g3w-image>\n                                <g3w-image v-else-if=\"checkField('image', attribute.label, layer.attributes)\"  :value=\"attribute.value\"></g3w-image>\n                                <g3w-link v-else-if=\"is('link',layer,attribute.name,feature.attributes[attribute.name])\" :state=\"{value: feature.attributes[attribute.name]}\"></g3w-link>\n                              </td>\n                            </tr>\n                          </table>\n                      </td>\n                    </tr>\n                </template>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </li>\n        <li v-for=\"component in state.components\">\n          <component @showresults=\"showResults()\" :is=\"component\"></component>\n        </li>\n      </ul>\n      <h4 v-if=\"!hasResults\" style=\"font-weight: bold;\" v-t=\"'info.no_results'\"></h4>\n    </template>\n  </div>\n</div>\n\n<script>\n  import Headerfeaturebody from \"./headerfeaturebody\";\n  export default {\n    components: {Headerfeaturebody}\n  }\n</script>";

},{}],675:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _tabs = require('../../tabs/tabs.vue');

var _tabs2 = _interopRequireDefault(_tabs);

var _link = require('../../fields/link.vue');

var _link2 = _interopRequireDefault(_link);

var _headerfeaturebody = require('./headerfeaturebody.vue');

var _headerfeaturebody2 = _interopRequireDefault(_headerfeaturebody);

var _utils = require('gui/vue/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    throttle = _require.throttle;

var Component = require('gui/vue/component');
var QueryResultsService = require('gui/queryresults/queryresultsservice');

var _require2 = require('gui/vue/vue.mixins'),
    fieldsMixin = _require2.fieldsMixin;

var maxSubsetLength = 3;
var headerExpandActionCellWidth = 10;
var headerActionsCellWidth = 10;
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./queryresults.html'));

var vueComponentOptions = _extends({}, compiledTemplate, {
  mixins: [fieldsMixin],
  data: function data() {
    return {
      state: this.$options.queryResultsService.state,
      headerExpandActionCellWidth: headerExpandActionCellWidth,
      headerActionsCellWidth: headerActionsCellWidth
    };
  },

  components: {
    Tabs: _tabs2.default,
    'g3w-link': _link2.default,
    'header-feature-body': _headerfeaturebody2.default
  },
  computed: {
    layersFeaturesBoxes: function layersFeaturesBoxes() {
      return this.state.layersFeaturesBoxes;
    },
    onelayerresult: function onelayerresult() {
      return this.state.layers.length === 1;
    },
    hasLayers: function hasLayers() {
      return this.hasResults || !!this.state.components.length;
    },
    hasResults: function hasResults() {
      return this.state.layers.length > 0;
    },
    info: function info() {
      var _this = this;

      var info = {
        icon: null,
        message: null,
        action: null
      };
      var _state = this.state,
          query = _state.query,
          search = _state.search;

      if (query) {
        if (query.coordinates) {
          info.icon = 'marker';
          info.message = '  ' + query.coordinates[0] + ', ' + query.coordinates[1];
          info.action = function () {
            return _this.$options.queryResultsService.showCoordinates(query.coordinates);
          };
        } else if (query.bbox) {
          info.icon = 'square';
          info.message = '  [' + query.bbox.join(' , ') + ']';
          info.action = function () {
            return _this.$options.queryResultsService.showBBOX(query.bbox);
          };
        } else if (query.geometry) {
          info.icon = 'draw';
          info.message = '  ' + query.name + ' - Feature Id: ' + query.fid;
          info.action = function () {
            return _this.$options.queryResultsService.showGeometry(query.geometry);
          };
        }
      } else if (search) {}

      return info;
    }
  },
  methods: {
    addLayerFeaturesToResults: function addLayerFeaturesToResults(layer) {
      this.$options.queryResultsService.addLayerFeaturesToResultsAction(layer);
    },
    showDownloadAction: function showDownloadAction(evt) {
      var display = evt.target.children[0].style.display;
      evt.target.children[0].style.display = display === 'none' ? 'inline-block' : 'none';
    },
    printAtlas: function printAtlas(layer) {
      this.$options.queryResultsService.printAtlas(layer);
    },
    saveLayerResult: function saveLayerResult(layer) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "csv";

      this.$options.queryResultsService.saveLayerResult({ layer: layer, type: type });
    },
    hasLayerOneFeature: function hasLayerOneFeature(layer) {
      return layer.features.length === 1;
    },
    addRemoveFilter: function addRemoveFilter(layer) {
      this.$options.queryResultsService.addRemoveFilter(layer);
    },
    getContainerFromFeatureLayer: function getContainerFromFeatureLayer() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref.layer,
          index = _ref.index;

      return $('#' + layer.id + '_' + index + ' > td');
    },
    hasOneLayerAndOneFeature: function hasOneLayerAndOneFeature(layer) {
      return this.hasLayerOneFeature(layer);
    },
    hasFormStructure: function hasFormStructure(layer) {
      return !!layer.formStructure;
    },
    hasFieldOutOfFormStructure: function hasFieldOutOfFormStructure(layer) {
      return this.hasFormStructure(layer) ? layer.getFieldsOutOfFormStructure() : [];
    },
    isArray: function isArray(value) {
      return Array.isArray(value);
    },
    isSimple: function isSimple(layer, attributeName, attributeValue) {
      return !this.isArray(attributeValue) && this.fieldIs(Fields.SIMPLE, layer, attributeName, attributeValue);
    },
    isLink: function isLink(layer, attributeName, attributeValue) {
      return this.fieldIs(Fields.LINK, layer, attributeName, attributeValue);
    },
    is: function is(type, layer, attributeName, attributeValue) {
      return this.fieldIs(type, layer, attributeName, attributeValue);
    },
    checkField: function checkField(type, fieldname, attributes) {
      return attributes.find(function (attribute) {
        return attribute.name === fieldname && attribute.type === type;
      }) ? true : false;
    },
    layerHasFeatures: function layerHasFeatures(layer) {
      return layer.features && layer.features.length > 0 ? true : false;
    },
    selectionFeaturesLayer: function selectionFeaturesLayer(layer) {
      this.$options.queryResultsService.selectionFeaturesLayer(layer);
    },
    layerHasActions: function layerHasActions(layer) {
      return this.state.layersactions[layer.id].length > 0;
    },
    featureHasActions: function featureHasActions(layer, feature) {
      return this.geometryAvailable(feature);
    },
    geometryAvailable: function geometryAvailable(feature) {
      return feature.geometry ? true : false;
    },
    extractAttributesFromFirstTabOfFormStructureLayers: function extractAttributesFromFirstTabOfFormStructureLayers(layer) {
      var attributes = new Set();
      var traverseStructure = function traverseStructure(item) {
        if (item.nodes) {
          item.nodes.forEach(function (node) {
            return traverseStructure(node);
          });
        } else {
          var field = layer.formStructure.fields.find(function (field) {
            return field.name === item.field_name;
          });
          field && attributes.add(field);
        }
      };
      layer.formStructure.structure.length && traverseStructure(layer.formStructure.structure[0]);
      return Array.from(attributes);
    },
    attributesSubset: function attributesSubset(layer) {
      var attributes = this.hasFormStructure(layer) ? this.extractAttributesFromFirstTabOfFormStructureLayers(layer) : layer.attributes;
      var _attributes = attributes.filter(function (attribute) {
        return attribute.show && attribute.type != 'image';
      });
      var end = Math.min(maxSubsetLength, attributes.length);
      return _attributes.slice(0, end);
    },
    relationsAttributesSubset: function relationsAttributesSubset(relationAttributes) {
      var attributes = [];
      _.forEach(relationAttributes, function (value, attribute) {
        if (Array.isArray(value)) return;
        attributes.push({ label: attribute, value: value });
      });
      var end = Math.min(maxSubsetLength, attributes.length);
      return attributes.slice(0, end);
    },
    relationsAttributes: function relationsAttributes(relationAttributes) {
      var attributes = [];
      _.forEach(relationAttributes, function (value, attribute) {
        attributes.push({ label: attribute, value: value });
      });
      return attributes;
    },
    attributesSubsetLength: function attributesSubsetLength(layer) {
      return this.attributesSubset(layer).length;
    },
    cellWidth: function cellWidth(index, layer) {
      var headerLength = maxSubsetLength + this.state.layersactions[layer.id].length;
      var subsetLength = this.attributesSubsetLength(layer);
      var diff = headerLength - subsetLength;
      var actionsCellWidth = layer.hasgeometry ? headerActionsCellWidth : 0;
      var headerAttributeCellTotalWidth = 100 - headerExpandActionCellWidth - actionsCellWidth;
      var baseCellWidth = headerAttributeCellTotalWidth / maxSubsetLength;
      if (index === subsetLength - 1 && diff > 0) return baseCellWidth * (diff + 1);else return baseCellWidth;
    },
    featureBoxColspan: function featureBoxColspan(layer) {
      var colspan = this.attributesSubsetLength(layer);
      if (layer.expandable) colspan += 1;
      if (layer.hasgeometry) colspan += 1;
      return colspan;
    },
    relationsAttributesSubsetLength: function relationsAttributesSubsetLength(elements) {
      return this.relationsAttributesSubset(elements).length;
    },
    getItemsFromStructure: function getItemsFromStructure(layer) {
      var _this2 = this;

      var prevtabitems = [];
      var newstructure = [];
      layer.formStructure.structure.forEach(function (item) {
        var _item = _this2.isAttributeOrTab(layer, item);
        if (_item.type === 'field') {
          newstructure.push(_item);
          prevtabitems = [];
        } else {
          if (!prevtabitems.length) {
            newstructure.push(_item);
            prevtabitems = _item.item;
          } else prevtabitems.push(_item.item[0]);
        }
      });
      return newstructure;
    },
    isAttributeOrTab: function isAttributeOrTab(layer, item) {
      var isField = item.field_name !== undefined;
      return {
        type: isField && 'field' || 'tab',
        item: isField && this.getLayerAttributeFromStructureItem(layer, item.field_name) || [item]
      };
    },
    getLayerAttributeFromStructureItem: function getLayerAttributeFromStructureItem(layer, field_name) {
      return layer.attributes.find(function (attribute) {
        return attribute.name === field_name;
      });
    },
    getLayerFeatureBox: function getLayerFeatureBox(layer, feature, relation_index) {
      var _this3 = this;

      var boxid = this.getBoxId(layer, feature, relation_index);
      if (this.layersFeaturesBoxes[boxid] === undefined) {
        this.layersFeaturesBoxes[boxid] = Vue.observable({
          collapsed: true
        });
        this.$watch(function () {
          return _this3.layersFeaturesBoxes[boxid].collapsed;
        }, function (collapsed) {
          var index = layer.features.findIndex(function (_feature) {
            return feature.id === _feature.id;
          });
          var container = _this3.getContainerFromFeatureLayer({
            layer: layer,
            index: index
          });
          _this3.$options.queryResultsService.openCloseFeatureResult({
            open: !collapsed,
            layer: layer,
            feature: feature,
            container: container
          });
        });
        this.layersFeaturesBoxes[boxid].collapsed = layer.features.length > 1;
      }
      return this.layersFeaturesBoxes[boxid];
    },

    // to CHECK NOT GOOD
    collapsedFeatureBox: function collapsedFeatureBox(layer, feature, relation_index) {
      var boxid = this.getBoxId(layer, feature, relation_index);
      return this.layersFeaturesBoxes[boxid] ? this.layersFeaturesBoxes[boxid].collapsed : true;
    },
    showFeatureInfo: function showFeatureInfo(layer, boxid) {
      this.$options.queryResultsService.emit('show-query-feature-info', {
        layer: layer,
        tabs: this.hasFormStructure(layer),
        show: !this.layersFeaturesBoxes[boxid].collapsed
      });
    },
    getBoxId: function getBoxId(layer, feature, relation_index) {
      return this.$options.queryResultsService.getBoxId(layer, feature, relation_index);
    },
    toggleFeatureBox: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(layer, feature, relation_index) {
        var boxid;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                boxid = this.getBoxId(layer, feature, relation_index);

                this.layersFeaturesBoxes[boxid].collapsed = !this.layersFeaturesBoxes[boxid].collapsed;
                _context.next = 4;
                return this.$nextTick();

              case 4:
                this.showFeatureInfo(layer, boxid);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toggleFeatureBox(_x3, _x4, _x5) {
        return _ref2.apply(this, arguments);
      }

      return toggleFeatureBox;
    }(),
    toggleFeatureBoxAndZoom: function toggleFeatureBoxAndZoom(layer, feature, relation_index) {
      !this.hasLayerOneFeature(layer) && this.toggleFeatureBox(layer, feature, relation_index);
    },
    trigger: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(action, layer, feature, index) {
        var container;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(action.opened && $('#' + layer.id + '_' + index).css('display') === 'none')) {
                  _context2.next = 4;
                  break;
                }

                this.toggleFeatureBox(layer, feature);
                _context2.next = 4;
                return this.$nextTick();

              case 4:
                container = this.getContainerFromFeatureLayer({ layer: layer, index: index });

                this.$options.queryResultsService.trigger(action.id, layer, feature, index, container);

              case 6:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function trigger(_x6, _x7, _x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return trigger;
    }(),
    showFullPhoto: function showFullPhoto(url) {
      this.$options.queryResultsService.showFullPhoto(url);
    },
    openLink: function openLink(link_url) {
      window.open(link_url, '_blank');
    },
    fieldIs: function fieldIs(TYPE, layer, attributeName, attributeValue) {
      var fieldType = this.getFieldType(attributeValue);
      return fieldType === TYPE;
    },
    getQueryFields: function getQueryFields(layer, feature) {
      var fields = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = layer.formStructure.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var field = _step.value;

          var _field = _extends({}, field);
          _field.query = true;
          _field.value = feature.attributes[field.name];
          _field.input = {
            type: this.getFieldType(_field.value) + '_field'
          };
          fields.push(_field);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return fields;
    }
  },
  watch: {
    'state.layers': function stateLayers(layers) {
      var _this4 = this;

      layers.forEach(function (layer) {
        if (layer.attributes.length <= maxSubsetLength && !layer.hasImageField) layer.expandable = false;
        layer.features.forEach(function (feature) {
          _this4.getLayerFeatureBox(layer, feature);
          if (feature.attributes.relations) {
            var relations = feature.attributes.relations;
            relations.forEach(function (relation) {
              var boxid = layer.id + '_' + feature.id + '_' + relation.name;
              var elements = relation.elements;
              elements.forEach(function (element, index) {
                _this4.layersFeaturesBoxes[boxid + index] = {
                  collapsed: true
                };
              });
            });
          }
        });
      });

      this.onelayerresult = layers.length === 1;
      // check if is a single result layer and if has one feature
      if (this.onelayerresult && this.hasLayerOneFeature(layers[0])) {
        var layer = layers[0];
        var feature = layer.features[0];
        var boxid = this.getBoxId(layer, feature);
        this.$options.queryResultsService.onceafter('postRender', function () {
          _this4.showFeatureInfo(layer, boxid);
        });
      }
      requestAnimationFrame(function () {
        return _this4.$options.queryResultsService.postRender(_this4.$el);
      });
    },
    onelayerresult: function onelayerresult(bool) {
      bool && this.$options.queryResultsService.highlightFeaturesPermanently(this.state.layers[0]);
    }
  },
  created: function created() {
    var _this5 = this;

    //PUT HERE THROTTLED FUNCTION
    this.zoomToLayerFeaturesExtent = throttle(function (layer) {
      _this5.$options.queryResultsService.zoomToLayerFeaturesExtent(layer, {
        highlight: true
      });
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.state.zoomToResult = true;
    this.layersFeaturesBoxes = null;
  },
  destroyed: function destroyed() {
    var _this6 = this;

    setTimeout(function () {
      return _this6.$options.queryResultsService.clear();
    });
  }
});

var InternalComponent = Vue.extend(vueComponentOptions);

function QueryResultsComponent() {
  var _this7 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.id = "queryresults";
  this.title = "Query Results";
  this._service = new QueryResultsService();
  this.setInternalComponent = function () {
    this.internalComponent = new InternalComponent({
      queryResultsService: this._service
    });
    this.internalComponent.querytitle = this._service.state.querytitle;
  };

  this.getElement = function () {
    if (this.internalComponent) return this.internalComponent.$el;
  };

  this._service.onafter('setLayersData', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            !_this7.internalComponent && _this7.setInternalComponent();
            _context3.next = 3;
            return _this7.internalComponent.$nextTick();

          case 3:
            $('.action-button[data-toggle="tooltip"]').tooltip();

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, _this7);
  })));

  this.layout = function (width, height) {};
  this.unmount = function () {
    this.getService().closeComponent();
    return base(this, 'unmount');
  };
}

inherit(QueryResultsComponent, Component);

module.exports = QueryResultsComponent;

},{"../../fields/link.vue":561,"../../tabs/tabs.vue":705,"./headerfeaturebody.vue":673,"./queryresults.html":674,"core/utils/utils":485,"gui/queryresults/queryresultsservice":671,"gui/vue/component":718,"gui/vue/utils":727,"gui/vue/vue.mixins":731}],676:[function(require,module,exports){
var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    base = _require.base,
    downloadCSV = _require.downloadCSV;

var G3WObject = require('core/g3wobject');
var ApplicationService = require('core/applicationservice');
var RelationsService = require('core/relations/relationsservice');

function RelationsComponentService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state = {};
  this._options = {};
  base(this);
}

inherit(RelationsComponentService, G3WObject);

var proto = RelationsComponentService.prototype;

proto.getRelations = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options = options;
  return RelationsService.getRelations(options);
};

proto.saveRelations = function (type) {
  this._options.type = type;
  var caller_download_id = ApplicationService.setDownload(true);
  RelationsService.save(this._options).finally(function () {
    return ApplicationService.setDownload(false, caller_download_id);
  });
};

proto.buildRelationTable = function () {
  var relations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var id = arguments[1];

  var layer = ApplicationService.getCurrentProject().getLayerById(id);
  var headers = layer.getTableHeaders();
  var columns = null;
  var rows = [];
  var fields = void 0;
  if (relations.length) {
    var properties = Object.keys(relations[0].properties);
    columns = headers.filter(function (header) {
      return properties.indexOf(header.name) !== -1;
    });
    rows = relations.map(function (relation) {
      return columns.map(function (column) {
        return relation.properties[column.name];
      });
    });
    fields = columns;
    columns = columns.map(function (column) {
      return column.label;
    });
  }
  return {
    columns: columns,
    rows: rows,
    fields: fields,
    formStructure: layer.getEditorFormStructure(),
    rowFormStructure: null,
    layerId: layer.getId()
  };
};

module.exports = RelationsComponentService;

},{"core/applicationservice":401,"core/g3wobject":415,"core/relations/relationsservice":481,"core/utils/utils":485}],677:[function(require,module,exports){
module.exports = "<div class=\"query-relation\" :class=\"isMobile() ? 'mobile' : null\">\n  <div v-if=\"showrelationslist\" class=\"back-btn\" @click=\"back\">\n    <span class=\"back-link\">\n      <span v-t=\"'sdk.relations.back_to_relations'\"><i :class=\"g3wtemplate.getFontClass('arrow-left')\" style=\"margin-right: 5px;\"></i></span>\n    </span>\n  </div>\n  <div class=\"header\">\n    <div style=\"width: 100%; display: flex; justify-content: space-between;\" :style=\"{fontSize: isMobile() ? '1em' : '1.3em'}\"  style=\"display: flex; justify-content: space-between; align-items: center;\">\n      <span class=\"relation-tile\">\n        <span v-if=\"!isMobile()\" v-t:pre=\"'sdk.relations.relation_data'\">:</span> <b class=\"skin-color\"> {{ relation.name }}</b>\n      </span>\n      <div class=\"relations-table-tools\" v-if=\"table.rows.length\" style=\"font-size: 1.1em; margin-bottom: 3px\">\n          <span v-if=\"showDownloadButtons.shapefile\" v-download class=\"action-button-icon action-button skin-tooltip-top\" data-placement=\"top\" data-toggle=\"tooltip\"\n                :class=\"g3wtemplate.getFontClass('shapefile')\" @click=\"saveRelation('shp')\" v-t-tooltip.create=\"'sdk.tooltips.download_shapefile'\"></span>\n        <span v-if=\"showDownloadButtons.gpx\" v-download class=\"action-button-icon action-button skin-tooltip-top\" data-placement=\"top\" data-toggle=\"tooltip\"\n              :class=\"g3wtemplate.getFontClass('gpx')\" v-download @click=\"saveRelation('gpx')\" v-t-tooltip.create=\"'sdk.tooltips.download_gpx'\"></span>\n        <span v-if=\"showDownloadButtons.csv\" v-download class=\"action-button-icon action-button skin-tooltip-top\" data-placement=\"top\" data-toggle=\"tooltip\"\n              :class=\"g3wtemplate.getFontClass('csv')\" @click=\"saveRelation('csv')\" v-t-tooltip.create=\"'sdk.tooltips.download_csv'\"></span>\n        <span v-if=\"showDownloadButtons.xls\" v-download class=\"action-button-icon action-button skin-tooltip-top\" data-placement=\"top\" data-toggle=\"tooltip\"\n              :class=\"g3wtemplate.getFontClass('excel')\" @click=\"saveRelation('xls')\" v-t-tooltip.create=\"'sdk.tooltips.download_xls'\"></span>\n        <span v-if=\"showChartButton\"  class=\"action-button-icon action-button skin-tooltip-bottom\" data-placement=\"bottom\" data-toggle=\"tooltip\"\n              :class=\"[g3wtemplate.getFontClass('chart'), chart ? 'toggled-white' : '']\" @click=\"showChart\" v-t-tooltip.create=\"'sdk.tooltips.show_chart'\"></span>\n      </div>\n    </div>\n  </div>\n  <div v-if=\"table.rows.length\" style=\"display: flex; justify-content: space-between; margin-bottom: 5px\" ref=\"relationwrapper\">\n    <div id=\"table_content\" :style=\"{width: chart ? '70%' : '100%', marginRight: chart ? '8px' : '3px'}\" style=\"position: relative\" ref=\"tablecontent\">\n      <table id=\"relationtable\" class=\"table table-striped row-border\" width=\"100%\" >\n        <thead>\n        <tr>\n          <th v-if=\"table.formStructure\" style=\"max-width: 30px !important; padding: 0 !important;\"></th>\n          <th v-for=\"column in table.columns\">{{ column }}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <template v-for=\"row in table.rows\">\n          <tr :class=\"{'selected': table.rowFormStructure === row}\">\n            <td @click=\"showFormStructureRow($event, row)\" style=\"cursor: pointer\" v-if=\"table.formStructure\">\n              <span style=\"max-width: 15px; width: 15px;\" :current-tooltip=\"table.rowFormStructure === row ? 'sdk.tooltips.relations.form_to_row': 'sdk.tooltips.relations.row_to_form'\"\n                    class=\"action-button row-form skin-color skin-tooltip-right\" v-t-tooltip=\"table.rowFormStructure === row ? 'sdk.tooltips.relations.form_to_row': 'sdk.tooltips.relations.row_to_form'\"\n                    data-placement=\"right\" :class=\"[table.rowFormStructure === row ? g3wtemplate.getFontClass('minus') :  g3wtemplate.getFontClass('table')]\"></span>\n            </td>\n            <template v-if=\"table.formStructure && table.rowFormStructure === row\">\n              <td :colspan=\"table.columns.length\" class=\"row-wrap-tabs\">\n                <tabs :layerid=\"table.layerId\" :feature=\"feature\" :fields=\"fields\" :tabs=\"table.formStructure\"></tabs>\n              </td>\n            </template>\n            <template v-else>\n              <td v-for=\"value in row\">\n                <field :state=\"{value:value}\"></field>\n              </td>\n            </template>\n          </tr>\n        </template>\n        </tbody>\n      </table>\n    </div>\n    <g3w-resize :show=\"chart\" :moveFnc=\"moveFnc\" :where=\"'content'\" class=\"skin-border-color lighten\" style=\"border-style: solid; border-width: 0 1px 0 1px\"></g3w-resize>\n    <div v-show=\"chart\" id=\"chart_content\" :style=\"{width: chart ? '30%' : '0'}\" style=\"padding-bottom: 5px; margin-bottom: 5px; margin-left: 8px;\" ref=\"chartcontent\"></div>\n  </div>\n  <div v-else style=\"font-weight: bold; margin-top: 10px; font-size: 1.1em; background-color: #ffffff; padding: 10px;\" v-t=\"'sdk.relations.no_relations_found'\"></div>\n</div>\n";

},{}],678:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('constant');

var _tabs = require('gui/tabs/tabs.vue');

var _tabs2 = _interopRequireDefault(_tabs);

var _g3wField = require('gui/fields/g3w-field.vue');

var _g3wField2 = _interopRequireDefault(_g3wField);

var _utils = require('gui/vue/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./relation.html'));
var GUI = require('gui/gui');

var _require = require('core/utils/utils'),
    throttle = _require.throttle;

var RelationPageEventBus = require('./relationeventbus');

var _require2 = require('gui/vue/vue.mixins'),
    fieldsMixin = _require2.fieldsMixin,
    resizeMixin = _require2.resizeMixin;

var relationDataTable = void 0;
var SIDEBARWIDTH = void 0;

module.exports = _extends({}, compiledTemplate, {
  props: ['table', 'feature', 'relation', 'previousview', 'showChartButton'],
  inject: ['relationnoback'],
  mixins: [fieldsMixin, resizeMixin],
  components: {
    Field: _g3wField2.default,
    Tabs: _tabs2.default
  },
  data: function data() {
    return {
      feature: null,
      fields: null,
      chart: false
    };
  },

  computed: {
    showrelationslist: function showrelationslist() {
      return this.previousview === 'relations' && !this.relationnoback;
    },
    one: function one() {
      return this.relation.type === 'ONE';
    }
  },
  methods: {
    resize: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this = this;

        var tableHeight;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$nextTick();

              case 2:
                tableHeight = $(".content").height();

                setTimeout(function () {
                  var datatatbleBody = $('.query-relation  div.dataTables_scrollBody');
                  var OtherElementHeight = $('.navbar-header').height() + $('.close-panel-block').height() + $('.query_relation .header').height() + $('#relationtable_filter').height() + $('.dataTables_scrollHead').height() + (_this.isMobile() ? 20 : 0);
                  datatatbleBody.height(tableHeight - _this.tableHeaderHeight - OtherElementHeight);
                  if (_this.table.rowFormStructure) {
                    var width = datatatbleBody.width() - 60;
                    $('.row-wrap-tabs .tabs-wrapper').width(width);
                  }
                });
                relationDataTable && relationDataTable.columns.adjust();

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function resize() {
        return _ref.apply(this, arguments);
      }

      return resize;
    }(),
    saveRelation: function saveRelation(type) {
      this.$emit('save-relation', type);
    },
    showFormStructureRow: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event, row) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.table.rowFormStructure = this.table.rowFormStructure === row ? null : row;
                this.fields = this.getRowFields(row);
                this.resize();
                _context2.next = 5;
                return this.$nextTick();

              case 5:
                $('#relationtable_wrapper div.dataTables_scrollBody').css('overflow-x', this.table.rowFormStructure ? 'hidden' : 'auto');

              case 6:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function showFormStructureRow(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return showFormStructureRow;
    }(),
    getRowFields: function getRowFields(row) {
      var _this2 = this;

      var fields = this.table.fields.map(function (field, index) {
        field.value = row[index];
        field.query = true;
        field.input = {
          type: _this2.getFieldType(field.value) + '_field'
        };
        return field;
      });
      return fields;
    },
    getTabFeature: function getTabFeature(row) {
      var feature = {
        attributes: {}
      };
      this.table.fields.forEach(function (field, index) {
        feature.attributes[field.name] = row[index];
      });
      return feature;
    },
    reloadLayout: function reloadLayout() {
      relationDataTable && relationDataTable.columns.adjust();
    },

    back: function back() {
      this.$parent.setRelationsList();
    },
    fieldIs: function fieldIs(type, value) {
      var fieldType = this.getFieldType(value);
      return fieldType === type;
    },
    is: function is(type, value) {
      return this.fieldIs(type, value);
    },
    moveFnc: function moveFnc(evt) {
      var sidebarHeaderSize = $('.sidebar-collapse').length ? 0 : SIDEBARWIDTH;
      var size = evt.pageX + 2 - sidebarHeaderSize;
      this.$refs.tablecontent.style.width = size + 'px';
      this.$refs.chartcontent.style.width = $(this.$refs.relationwrapper).width() - size - 10 + 'px';
    }
  },
  watch: {
    chart: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.$nextTick();

              case 2:
                this.resize();

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function chart() {
        return _ref3.apply(this, arguments);
      }

      return chart;
    }()
  },
  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
  },
  created: function created() {
    var _this3 = this;

    var layer = CatalogLayersStoresRegistry.getLayerById(this.table.layerId);
    this.showDownloadButtons = {
      shapefile: layer.isShpDownlodable(),
      gpx: layer.isGpxDownlodable(),
      csv: layer.isCsvDownlodable(),
      xls: layer.isXlsDownlodable()
    };
    RelationPageEventBus.$on('reload', function () {
      _this3.reloadLayout();
    });
    this.showChart = throttle(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var relationData;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _this3.chart = !_this3.chart;
              _context4.next = 3;
              return _this3.$nextTick();

            case 3:
              _this3.chartContainer = _this3.chartContainer || $('#chart_content');
              relationData = {
                relations: [_this3.relation],
                fid: _this3.feature.attributes[_constant.G3W_FID]
              };

              _this3.$emit(_this3.chart ? 'show-chart' : 'hide-chart', _this3.chartContainer, relationData);

            case 6:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this3);
    })));
  },
  mounted: function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              SIDEBARWIDTH = GUI.getSize({ element: 'sidebar', what: 'width' });
              this.relation.title = this.relation.name;
              _context5.next = 4;
              return this.$nextTick();

            case 4:
              if (!this.one) {
                relationDataTable = $('#relationtable').DataTable({
                  "pageLength": 10,
                  "bLengthChange": false,
                  "scrollResize": true,
                  "scrollCollapse": true,
                  "scrollX": true,
                  "responsive": true,
                  "order": [this.table.formStructure ? 1 : 0, 'asc'],
                  "columnDefs": [{ "orderable": !this.table.formStructure, "targets": 0 }]
                });
                $('.row-form').tooltip();
                this.tableHeaderHeight = $('.query-relation  div.dataTables_scrollHeadInner').height();
                this.resize();
              }

            case 5:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function mounted() {
      return _ref5.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    relationDataTable.destroy();
    relationDataTable = null;
    this.chartContainer && this.$emit('hide-chart', this.chartContainer);
    this.chartContainer = null;
    this.tableHeaderHeight = null;
  }
});

},{"./relation.html":677,"./relationeventbus":679,"constant":399,"core/catalog/cataloglayersstoresregistry":403,"core/utils/utils":485,"gui/fields/g3w-field.vue":558,"gui/gui":575,"gui/tabs/tabs.vue":705,"gui/vue/utils":727,"gui/vue/vue.mixins":731}],679:[function(require,module,exports){
module.exports = new Vue();

},{}],680:[function(require,module,exports){
module.exports = "<div class=\"query-relations\" style=\"overflow-y:auto\">\n  <div class=\"header\">\n    <div>\n      <span style=\"font-size: 1.2em;\" v-t:pre=\"'sdk.relations.list_of_relations_feature'\"> </span>\n      <span v-for=\"info in featureInfo()\"><b>{{ info.key }}</b>: {{ info.value }} </span>\n    </div>\n  </div>\n  <table v-show=\"!loading\" class=\"table table-bordered table-hover\">\n    <thead>\n    </thead>\n    <tbody>\n    <tr @click=\"showRelation(relation)\" v-for=\"relation in relations\" style=\"cursor:pointer\">\n      <td>\n        <span >{{ relation.name }}</span>\n        <span :class=\"g3wtemplate.getFontClass('arrow-right')\" class=\"pull-right\" aria-hidden=\"true\"></span>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n";

},{}],681:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./relations.html'));
module.exports = _extends({}, compiledTemplate, {
  props: ['relations', 'feature', 'loading'],
  methods: {
    showRelation: function showRelation(relation) {
      this.$parent.showRelation(relation);
    },
    featureInfo: function featureInfo() {
      var infoFeatures = [];
      var index = 0;
      Object.entries(this.feature.attributes).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        if (index > 2) return false;
        if (value && _.isString(value) && value.indexOf('/') === -1) {
          infoFeatures.push({
            key: key,
            value: value
          });
          index += 1;
        }
      });
      return infoFeatures;
    }
  },
  mounted: function mounted() {
    if (this.relations.length === 1) {
      var relation = this.relations[0];
      relation.noback = true;
      this.showRelation(relation);
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (this.relations.length === 1) {
      delete this.relations[0].noback;
    }
  }
});

},{"./relations.html":680,"gui/vue/utils":727}],682:[function(require,module,exports){
module.exports = "<div class=\"query-relations-page\">\n    <component\n        :loading=\"loading\"\n        @save-relation=\"saveRelations\"\n        @show-chart=\"showChart\"\n        @hide-chart=\"hideChart\"\n        :ref=\"currentview\"\n        :previousview=\"previousview\"\n        :is=\"currentview\"\n        :showChartButton=\"showChartButton\"\n        :relations=\"relations\"\n        :relation=\"relation\"\n        :feature=\"feature\"\n        :table=\"table\">\n    </component>\n</div>\n";

},{}],683:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('constant');

var _utils = require('gui/vue/utils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var GUI = require('gui/gui');
var Component = require('gui/vue/component');
var Service = require('../relationsservice');

var _require2 = require('core/utils/geo'),
    getFeaturesFromResponseVectorApi = _require2.getFeaturesFromResponseVectorApi;

var RelationPageEventBus = require('./relationeventbus');
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./relationspage.html'));

var InternalComponent = Vue.extend(_extends({}, compiledTemplate, {
  data: function data() {
    this.chartRelationIds = this.$options.chartRelationIds || [];
    return {
      loading: false,
      state: null,
      error: false,
      table: this.$options.table ? this.$options.service.buildRelationTable(this.$options.table) : null,
      relation: this.$options.relation || null,
      relations: this.$options.relations,
      showChartButton: false,
      feature: this.$options.feature,
      currentview: this.$options.currentview,
      previousview: this.$options.currentview
    };
  },
  provide: function provide() {
    return {
      relationnoback: this.$options.relations.length === 1
    };
  },

  components: {
    'relations': require('./relations'),
    'relation': require('./relation')
  },
  methods: {
    saveRelations: function saveRelations(type) {
      this.$options.service.saveRelations(type);
    },
    reloadLayout: function reloadLayout() {
      RelationPageEventBus.$emit('reload');
    },
    showChart: function showChart(container, relationData) {
      var relationLayerId = this.relation.referencingLayer;
      GUI.getComponent('queryresults').getService().showChart([relationLayerId], container, relationData);
    },
    hideChart: function hideChart(container) {
      GUI.getComponent('queryresults').getService().hideChart(container);
    },

    showRelation: function showRelation(relation) {
      var _this = this;

      GUI.setLoadingContent(true);
      this.loading = true;
      this.relation = relation;
      var relationLayerId = relation.referencingLayer;
      var fid = this.feature.attributes[_constant.G3W_FID];
      this.$options.service.getRelations({
        layer: this.$options.layer,
        relation: relation,
        fid: fid
      }).then(function (response) {
        var relations = getFeaturesFromResponseVectorApi(response);
        _this.showChartButton = !!_this.chartRelationIds.find(function (chartlayerid) {
          return chartlayerid === relationLayerId;
        });
        _this.table = _this.$options.service.buildRelationTable(relations, relationLayerId);
        _this.currentview = 'relation';
        _this.previousview = 'relations';
      }).catch(function (err) {}).finally(function () {
        GUI.setLoadingContent(false);
        _this.loading = true;
      });
    },
    setRelationsList: function setRelationsList() {
      this.previousview = 'relation';
      this.currentview = 'relations';
      this.loading = false;
    }
  },
  beforeMount: function beforeMount() {
    if (this.relations.length === 1 && this.relations[0].type === 'ONE') this.showRelation(this.relations[0]);
  },
  mounted: function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.$nextTick();

            case 2:
              if (this.error) requestAnimationFrame(function () {
                GUI.popContent();
              });
              this.error = false;

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
}));

var RelationsPage = function RelationsPage() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  var service = options.service || new Service();
  var layer = options.layer,
      _options$relation = options.relation,
      relation = _options$relation === undefined ? null : _options$relation,
      _options$relations = options.relations,
      relations = _options$relations === undefined ? [] : _options$relations,
      _options$feature = options.feature,
      feature = _options$feature === undefined ? null : _options$feature,
      _options$table = options.table,
      table = _options$table === undefined ? null : _options$table,
      _options$chartRelatio = options.chartRelationIds,
      chartRelationIds = _options$chartRelatio === undefined ? [] : _options$chartRelatio;

  var currentview = options.currentview || 'relations';
  this.setService(service);
  var internalComponent = new InternalComponent({
    previousview: currentview,
    service: service,
    relations: relations,
    relation: relation,
    chartRelationIds: chartRelationIds,
    feature: feature,
    currentview: currentview,
    layer: layer,
    table: table
  });
  this.setInternalComponent(internalComponent);
  internalComponent.state = service.state;
  this.layout = function () {
    internalComponent.reloadLayout();
  };
};

inherit(RelationsPage, Component);

module.exports = RelationsPage;

},{"../relationsservice":676,"./relation":678,"./relationeventbus":679,"./relations":681,"./relationspage.html":682,"constant":399,"core/utils/geo":484,"core/utils/utils":485,"gui/gui":575,"gui/vue/component":718,"gui/vue/utils":727}],684:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var ALLVALUE = exports.ALLVALUE = '__G3W_ALL__';
var RETURN_TYPES = exports.RETURN_TYPES = ['data', 'search'];
exports.default = {
  ALLVALUE: ALLVALUE,
  RETURN_TYPES: RETURN_TYPES
};

},{}],685:[function(require,module,exports){
var _service = require('gui/querybuilder/service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var ProjectsRegistry = require('core/project/projectsregistry');
var G3WObject = require('core/g3wobject');
var SearchPanel = require('gui/search/vue/panel/searchpanel');

function Service() {
  base(this);
  var currentProjectState = ProjectsRegistry.getCurrentProject().state;
  this.title = currentProjectState.search_title || "search";
  this.init = function (searchesObject) {
    this.state.searches = searchesObject || currentProjectState.search;
  };
  this.state = {
    searches: [],
    searchtools: [],
    querybuildersearches: _service2.default.getCurrentProjectItems()
  };
}

inherit(Service, G3WObject);

var proto = Service.prototype;

proto.removeItem = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref.type,
      index = _ref.index;

  switch (type) {
    case 'querybuilder':
      this.state.querybuildersearches.splice(index, 1);
      break;
  }
};

proto.getTitle = function () {
  return this.title;
};

proto.showPanel = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var panel = new SearchPanel(config);
  panel.show();
  return panel;
};

proto.cleanSearchPanels = function () {
  this.state.panels = {};
};

proto.stop = function () {
  var d = $.Deferred();
  d.resolve();
  return d.promise();
};

proto.addTool = function (searchTool) {
  this.state.searchtools.push(searchTool);
};

proto.addTools = function (searchTools) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = searchTools[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var searchTool = _step.value;

      this.addTool(searchTool);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

proto.addQueryBuilderSearch = function (querybuildersearch) {
  this.state.querybuildersearches.push(querybuildersearch);
};

proto.removeTool = function (searchTool) {};

proto.removeTools = function () {
  this.state.searchtools.splice(0);
};

proto.reload = function () {
  this.state.searches = ProjectsRegistry.getCurrentProject().state.search;
  this.state.querybuildersearches = _service2.default.getCurrentProjectItems();
};

module.exports = Service;

},{"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/querybuilder/service":666,"gui/search/vue/panel/searchpanel":687}],686:[function(require,module,exports){
module.exports = "<div class=\"g3w-search-panel form-group\" v-disabled=\"state.searching\">\n  <h4 class=\"\"><b>{{ state.title }}</b></h4>\n  <slot name=\"tools\"></slot>\n  <slot name=\"form\">\n    <form class=\"g3w-search-form\">\n      <template v-for=\"forminput in state.forminputs\" :key=\"forminput.id\">\n        <div v-if=\"forminput.type === 'numberfield'\" class=\"form-group numeric\">\n          <label :for=\"forminput.id\" class=\"search-label\" style=\"width: 100%; display: flex; justify-content: space-between\">\n            <span>{{ forminput.label || forminput.attribute }}</span>\n            <span class=\"skin-color\">{{ getLabelOperator(forminput.operator)}}</span>\n          </label>\n            <input type=\"number\" min=\"0\" @change=\"changeNumericInput(forminput)\" @input=\"changeNumericInput(forminput)\"\n              v-model=\"forminput.value\" class=\"form-control\"\n              :id=\"forminput.id\">\n          </div>\n        <div v-if=\"forminput.type === 'textfield' || forminput.type === 'textField'\" class=\"form-group form-item-search  text\">\n          <label :for=\"forminput.id\" class=\"search-label\" style=\"width: 100%; display: flex; justify-content: space-between\">\n            <span>{{ forminput.label || forminput.attribute }}</span>\n            <span class=\"skin-color\">{{ getLabelOperator(forminput.operator)}}</span>\n          </label>\n          <input @focus=\"onFocus\" type=\"text\" v-model=\"forminput.value\" @input=\"changeInput(forminput)\" @change=\"changeInput(forminput)\" class=\"form-control\" :id=\"forminput.id\" >\n        </div>\n        <div v-if=\"forminput.type === 'selectfield' || forminput.type === 'autocompletefield'\" class=\"form-group text\" v-disabled=\"state.loading[forminput.options.dependance] || forminput.loading\">\n          <label :for=\"forminput.id\" class=\"search-label\" style=\"width: 100%; display: flex; justify-content: space-between\">\n            <span>{{forminput.label || forminput.attribute }}</span>\n            <span class=\"skin-color\">{{ getLabelOperator(forminput.operator)}}</span>\n          </label>\n          <bar-loader v-if =\"forminput.options.dependance\" :loading=\"state.loading[forminput.options.dependance] || forminput.loading\"></bar-loader>\n          <select2  :forminput=\"forminput\" :autocompleteRequest=\"autocompleteRequest\" @select-change=\"changeInput\"></select2>\n        </div>\n        <div v-if=\"forminput.logicop\" class=\"search-logicop skin-border-color\">\n          <h4>{{ forminput.logicop }}</h4>\n        </div>\n      </template>\n      <div class=\"form-group\">\n        <button id=\"dosearch\" class=\"btn btn-block pull-right\" @click.stop=\"doSearch\" data-i18n=\"dosearch\"  v-t=\"'dosearch'\"></button>\n      </div>\n    </form>\n  </slot>\n  <slot name=\"footer\"></slot>\n</div>\n";

},{}],687:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _select = require('./select2.vue');

var _select2 = _interopRequireDefault(_select);

var _operators = require('core/layers/filter/operators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    uniqueId = _require.uniqueId;

var Panel = require('gui/panel');
var Service = require('./searchservice');
var compiledTemplate = Vue.compile(require('./searchpanel.html'));

var SearchPanelComponent = Vue.extend(_extends({}, compiledTemplate, {
  components: {
    Select2: _select2.default
  },
  data: function data() {
    return {
      state: this.$options.service.state
    };
  },

  methods: {
    getLabelOperator: function getLabelOperator(operator) {
      return '[ ' + _operators.EXPRESSION_OPERATORS[operator] + ' ]';
    },
    onFocus: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event) {
        var top;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.isMobile()) {
                  _context.next = 5;
                  break;
                }

                top = $(event.target).position().top - 10;
                _context.next = 4;
                return this.$nextTick();

              case 4:
                setTimeout(function () {
                  $('.sidebar').scrollTop(top);
                }, 500);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onFocus(_x) {
        return _ref.apply(this, arguments);
      }

      return onFocus;
    }(),
    autocompleteRequest: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', this.$options.service.autocompleteRequest(params));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function autocompleteRequest() {
        return _ref2.apply(this, arguments);
      }

      return autocompleteRequest;
    }(),
    changeDependencyFields: function changeDependencyFields(_ref3) {
      var field = _ref3.attribute,
          value = _ref3.value;

      var subscribers = this.$options.service.getDependencies(field);
      return subscribers.length ? this.$options.service.fillDependencyInputs({
        field: field,
        subscribers: subscribers,
        value: value
      }) : Promise.resolve();
    },
    changeNumericInput: function changeNumericInput(input) {
      input.value = input.value || input.value === 0 ? input.value : null;
      this.changeInput(input);
    },
    changeInput: function changeInput(input) {
      var _this = this;

      var id = input.id,
          attribute = input.attribute,
          value = input.value,
          type = input.type;

      try {
        //try to trim value inside try catch some cases tha trim doesn't work to avoid
        // to check if has one reason to trim
        value = type === 'textfield' || type === 'textField' ? value : value.trim();
      } catch (err) {}
      this.$options.service.changeInput({ id: id, value: value });
      this.state.searching = true;
      this.changeDependencyFields({
        attribute: attribute,
        value: value
      }).finally(function () {
        _this.state.searching = false;
      });
    },
    doSearch: function doSearch(event) {
      event.preventDefault();
      this.$options.service.run();
    }
  }
}));

function SearchPanel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var service = options.service || new Service(options);
  this.setService(service);
  this.id = uniqueId();
  var SearchPanel = options.component || SearchPanelComponent;
  var internalPanel = new SearchPanel({
    service: service
  });
  this.setInternalPanel(internalPanel);
  this.unmount = function () {
    return base(this, 'unmount').then(function () {
      service.clear();
    });
  };
}

inherit(SearchPanel, Panel);

module.exports = SearchPanel;

},{"./searchpanel.html":686,"./searchservice":688,"./select2.vue":689,"core/layers/filter/operators":439,"core/utils/utils":485,"gui/panel":653}],688:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _constants = require('../../constants');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    toRawType = _require.toRawType,
    getUniqueDomId = _require.getUniqueDomId,
    createFilterFormInputs = _require.createFilterFormInputs,
    createSingleFieldParameter = _require.createSingleFieldParameter,
    isEmptyObject = _require.isEmptyObject;

var DataRouterService = require('core/data/routerservice');
var GUI = require('gui/gui');
var G3WObject = require('core/g3wobject');
var CatalogLayersStorRegistry = require('core/catalog/cataloglayersstoresregistry');
var ProjectsRegistry = require('core/project/projectsregistry');
var NONVALIDVALUES = [null, undefined, _constants.ALLVALUE];

function SearchService() {
  var _this = this;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.debounces = {
    run: {
      fnc: function fnc() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (GUI.isMobile()) {
          var _mapService$getMap$ge = _this.mapService.getMap().getSize(),
              _mapService$getMap$ge2 = _slicedToArray(_mapService$getMap$ge, 2),
              width = _mapService$getMap$ge2[0],
              heigth = _mapService$getMap$ge2[1];

          if (width === 0 || heigth === 0) {
            GUI.hideSidebar();
            setTimeout(function () {
              _this._run.apply(_this, args);
            }, 600);
          } else _this._run.apply(_this, args);
        } else _this._run.apply(_this, args);
      }
    }
  };
  base(this);
  // reactivity data
  this.state = {
    title: null,
    forminputs: [],
    loading: {},
    searching: false
  };
  var _config$options = config.options,
      options = _config$options === undefined ? {} : _config$options;

  var layerid = options.querylayerid || options.layerid || null;
  var otherquerylayerids = options.otherquerylayerids || [];
  var filter = options.filter || [];
  this.inputdependance = {};
  this.inputdependencies = [];
  this.cachedependencies = {};
  this.project = ProjectsRegistry.getCurrentProject();
  this.mapService = GUI.getComponent('map').getService();
  this.searchLayer = null;
  this.filter = null;
  this.inputs = [];
  this.state.title = config.name;
  this.search_endpoint = config.search_endpoint;
  this.url = options.queryurl;
  this.filter = options.filter;
  this.return = options.return || 'data';
  this.show = this.return === 'data';
  this.searchLayer = CatalogLayersStorRegistry.getLayerById(layerid);
  this.searchLayers = [layerid].concat(_toConsumableArray(otherquerylayerids)).map(function (layerid) {
    return CatalogLayersStorRegistry.getLayerById(layerid);
  });
  this.createInputsFormFromFilter({ filter: filter });
}

inherit(SearchService, G3WObject);

var proto = SearchService.prototype;

/**
 * Get return type
 */

proto.getReturnType = function () {
  return this.return;
};

/**
 * Set return type
 */

proto.setReturnType = function () {
  var returnType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data';

  this.return = returnType;
  //set show only in case return === 'data'
  this.show = this.return === 'data';
};

proto.createFieldsDependenciesAutocompleteParameter = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$fields = _ref.fields,
      fields = _ref$fields === undefined ? [] : _ref$fields,
      field = _ref.field,
      value = _ref.value;

  var dependendency = this.getCurrentFieldDependance(field);
  if (value !== void 0) {
    var fieldParam = createSingleFieldParameter({
      field: field,
      value: value,
      operator: this.getFilterInputFromField(field).op
    });
    fields.push(fieldParam);
  }
  if (dependendency) {
    var _Object$entries$ = _slicedToArray(Object.entries(dependendency)[0], 2),
        _field = _Object$entries$[0],
        _value = _Object$entries$[1];

    var operator = this.getFilterInputFromField(_field).op;
    fields.unshift(_field + '|' + operator + '|' + encodeURI(_value));
    return this.createFieldsDependenciesAutocompleteParameter({
      fields: fields,
      field: _field
    });
  }
  return fields.length && fields.join() || void 0;
};

proto.getUniqueValuesFromField = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
    var field = _ref2.field,
        value = _ref2.value,
        unique = _ref2.unique;
    var data;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = [];
            _context.prev = 1;
            _context.next = 4;
            return this.searchLayers[0].getFilterData({
              field: field,
              suggest: value !== void 0 ? field + '|' + value : void 0,
              unique: unique
            });

          case 4:
            data = _context.sent;
            _context.next = 9;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](1);

          case 9:
            return _context.abrupt('return', data);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 7]]);
  }));

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

proto.autocompleteRequest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref5.field,
      value = _ref5.value;

  var data;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          data = [];
          _context2.prev = 1;
          _context2.next = 4;
          return this.searchLayer.getFilterData({
            field: this.createFieldsDependenciesAutocompleteParameter({
              field: field
            }),
            suggest: field + '|' + value,
            unique: field
          });

        case 4:
          data = _context2.sent;
          _context2.next = 9;
          break;

        case 7:
          _context2.prev = 7;
          _context2.t0 = _context2['catch'](1);

        case 9:
          return _context2.abrupt('return', data.map(function (value) {
            return {
              id: value,
              text: value
            };
          }));

        case 10:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 7]]);
}));

proto.doSearch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      filter = _ref7.filter,
      _ref7$search_endpoint = _ref7.search_endpoint,
      search_endpoint = _ref7$search_endpoint === undefined ? this.getSearchEndPoint() : _ref7$search_endpoint,
      _ref7$queryUrl = _ref7.queryUrl,
      queryUrl = _ref7$queryUrl === undefined ? this.url : _ref7$queryUrl,
      _ref7$feature_count = _ref7.feature_count,
      feature_count = _ref7$feature_count === undefined ? 10000 : _ref7$feature_count,
      _ref7$show = _ref7.show,
      show = _ref7$show === undefined ? this.show : _ref7$show;

  var data, dataPromise, SearchPanel, add_panel;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          filter = filter || this.createFilter();
          // call a generic method of layer
          data = void 0;

          this.state.searching = true;
          _context3.prev = 3;
          _context3.next = 6;
          return DataRouterService.getData('search:features', {
            inputs: {
              layer: this.searchLayers,
              search_endpoint: search_endpoint,
              filter: filter,
              queryUrl: queryUrl,
              formatter: 1, // set formatter to 1
              feature_count: feature_count,
              raw: this.return === 'search' // parameter to get raw response
            },
            outputs: show && {
              title: this.state.title
            }
          });

        case 6:
          data = _context3.sent;

          if (!show) {
            _context3.next = 11;
            break;
          }

          // in case of autozoom_query
          if (this.project.state.autozoom_query && data && data.data.length === 1) {
            this.mapService.zoomToFeatures(data.data[0].features);
          }
          _context3.next = 19;
          break;

        case 11:
          _context3.t0 = this.return;
          _context3.next = _context3.t0 === 'search' ? 14 : 19;
          break;

        case 14:
          // in case of api get first response on array
          data = data.data[0];
          data = search_endpoint === 'ows' ? data.data : data;
          data = JSON.parse(data);
          if (isEmptyObject(data)) {
            dataPromise = Promise.resolve({});

            DataRouterService.showCustomOutputDataPromise(dataPromise);
          } else {
            SearchPanel = require('gui/search/vue/panel/searchpanel');
            add_panel = new SearchPanel(data);

            add_panel.show();
          }
          return _context3.abrupt('break', 19);

        case 19:
          _context3.next = 24;
          break;

        case 21:
          _context3.prev = 21;
          _context3.t1 = _context3['catch'](3);

          console.log(_context3.t1);

        case 24:
          this.state.searching = false;
          return _context3.abrupt('return', data);

        case 26:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this, [[3, 21]]);
}));

proto.filterValidFormInputs = function () {
  return this.state.forminputs.filter(function (input) {
    return NONVALIDVALUES.indexOf(input.value) === -1 && input.value.toString().trim() !== '';
  });
};

/**
 *
 * @returns {string|*|string}
 */
proto.getSearchEndPoint = function () {
  return this.search_endpoint || this.searchLayer.getSearchEndPoint();
};

/*
* type wms, vector (for vector api)
* */
proto.createFilter = function () {
  var search_endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSearchEndPoint();

  var inputs = this.filterValidFormInputs();
  return createFilterFormInputs({
    layer: this.searchLayers,
    inputs: inputs,
    search_endpoint: search_endpoint
  });
};

proto._run = function () {
  this.doSearch();
};

proto.changeInput = function () {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref8.id,
      value = _ref8.value;

  var input = this.state.forminputs.find(function (input) {
    return id == input.id;
  });
  input.value = value;
};

proto.createQueryFilterFromConfig = function (_ref9) {
  var filter = _ref9.filter;

  var queryFilter = void 0;
  function createOperatorObject(inputObj) {
    for (var _operator in inputObj) {
      var input = inputObj[_operator];
      if (Array.isArray(input)) {
        createBooleanObject(_operator, input);
        break;
      }
    }
    var field = inputObj.attribute;
    var operator = inputObj.op;
    var evalObject = {};
    evalObject[operator] = {};
    evalObject[operator][field] = null;
    return evalObject;
  }

  function createBooleanObject(booleanOperator) {
    var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var booleanObject = {};
    booleanObject[booleanOperator] = [];
    inputs.forEach(function (input) {
      booleanObject[booleanOperator].push(createOperatorObject(input));
    });
    return booleanObject;
  }
  for (var operator in filter) {
    var inputs = filter[operator];
    queryFilter = createBooleanObject(operator, inputs);
  }
  return queryFilter;
};

proto.getFilterInputFromField = function (field) {
  return this.filter.find(function (input) {
    return input.attribute === field;
  });
};

proto._getExpressionOperatorFromInput = function (field) {
  var dependanceCascadeField = this.getFilterInputFromField(field);
  return dependanceCascadeField ? dependanceCascadeField.op : null;
};

proto._getCascadeDependanciesFilter = function (field) {
  var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var dependanceCascadeField = this.getFilterInputFromField(field);
  var dependance = dependanceCascadeField.input.options.dependance;
  if (dependance) {
    dependencies.unshift(dependance);
    this._getCascadeDependanciesFilter(dependance, dependencies);
  }
  return dependencies;
};

proto.getCurrentFieldDependance = function (field) {
  var dependance = this.inputdependance[field];
  return dependance && this.cachedependencies[dependance] && this.cachedependencies[dependance]._currentValue !== _constants.ALLVALUE && _defineProperty({}, dependance, this.cachedependencies[dependance]._currentValue) || null;
};

// check the current value of dependance
proto.getDependanceCurrentValue = function (field) {
  var dependance = this.inputdependance[field];
  return dependance ? this.cachedependencies[dependance]._currentValue : this.state.forminputs.find(function (forminput) {
    return forminput.attribute === field;
  }).value;
};

// fill all dependencies inputs based on value
proto.fillDependencyInputs = function () {
  var _this2 = this;

  var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref11.field,
      _ref11$subscribers = _ref11.subscribers,
      subscribers = _ref11$subscribers === undefined ? [] : _ref11$subscribers,
      _ref11$value = _ref11.value,
      value = _ref11$value === undefined ? _constants.ALLVALUE : _ref11$value;

  var isRoot = this.inputdependance[field] === undefined;
  //check id inpute father is valid to search on subscribers
  var invalidValue = value === _constants.ALLVALUE || value === null || value === undefined || value.toString().trim() === '';
  return new Promise(function (resolve, reject) {
    subscribers.forEach(function (subscribe) {
      // in case of atuocomplete reset values to empty array
      if (subscribe.type === 'autocompletefield') subscribe.options.values.splice(0);else {
        //set starting all values
        if (subscribe.options._allvalues === undefined) subscribe.options._allvalues = [].concat(_toConsumableArray(subscribe.options.values));
        //case of father is set an empty invalid value (all value exmaple)
        if (invalidValue) {
          //subscribe has to set all valaues
          subscribe.options.values.splice(0);
          setTimeout(function () {
            subscribe.options.values = [].concat(_toConsumableArray(subscribe.options._allvalues));
          });
        } else subscribe.options.values.splice(1); //otherwise has to get first __ALL_VALUE
      }
      subscribe.value = subscribe.type !== 'selectfield' ? _constants.ALLVALUE : null;
    });
    _this2.cachedependencies[field] = _this2.cachedependencies[field] || {};
    _this2.cachedependencies[field]._currentValue = value;
    if (value && value !== _constants.ALLVALUE) {
      var isCached = void 0;
      var rootValues = void 0;
      if (isRoot) {
        var cachedValue = _this2.cachedependencies[field] && _this2.cachedependencies[field][value];
        isCached = cachedValue !== void 0;
        rootValues = isCached && cachedValue;
      } else {
        var dependenceCurrentValue = _this2.getDependanceCurrentValue(field);
        var _cachedValue = _this2.cachedependencies[field] && _this2.cachedependencies[field][dependenceCurrentValue] && _this2.cachedependencies[field][dependenceCurrentValue][value];
        isCached = _cachedValue !== undefined;
        rootValues = isCached && _cachedValue;
      }
      if (isCached) {
        for (var i = 0; i < subscribers.length; i++) {
          var subscribe = subscribers[i];
          var values = rootValues[subscribe.attribute];
          if (values && values.length) {
            for (var _i = 0; _i < values.length; _i++) {
              subscribe.options.values.push(values[_i]);
            }
          }
          resolve();
        }
      } else {
        _this2.state.loading[field] = true;
        if (isRoot) _this2.cachedependencies[field][value] = _this2.cachedependencies[field][value] || {};else {
          var dependenceValue = _this2.getDependanceCurrentValue(field);
          _this2.cachedependencies[field][dependenceValue] = _this2.cachedependencies[field][dependenceValue] || {};
          _this2.cachedependencies[field][dependenceValue][value] = _this2.cachedependencies[field][dependenceValue][value] || {};
        }
        // exclude autocomplete subscribers
        var notAutocompleteSubscribers = subscribers.filter(function (subscribe) {
          return subscribe.type !== 'autocompletefield';
        });
        if (notAutocompleteSubscribers.length) {
          var fieldParams = _this2.createFieldsDependenciesAutocompleteParameter({
            field: field,
            value: value
          });
          var uniqueParams = notAutocompleteSubscribers.length && notAutocompleteSubscribers.length === 1 ? notAutocompleteSubscribers[0].attribute : undefined;
          _this2.searchLayer.getFilterData({
            field: fieldParams,
            unique: uniqueParams
          }).then(function (data) {
            data = uniqueParams ? data : data.data[0].features || [];
            data = _this2.valuesToKeysValues(data);

            var _loop = function _loop(_i2) {
              var subscribe = notAutocompleteSubscribers[_i2];
              if (uniqueParams) data.forEach(function (value) {
                return subscribe.options.values.push(value);
              });else {
                var attribute = subscribe.attribute;

                var uniqueValues = new Set();
                data.forEach(function (feature) {
                  var value = feature.get(attribute);
                  value && uniqueValues.add(value);
                });
                [].concat(_toConsumableArray(uniqueValues)).sort().forEach(function (value) {
                  return subscribe.options.values.push(value);
                });
              }
              if (isRoot) _this2.cachedependencies[field][value][subscribe.attribute] = subscribe.options.values.slice(1);else {
                var _dependenceValue = _this2.getDependanceCurrentValue(field);
                _this2.cachedependencies[field][_dependenceValue][value][subscribe.attribute] = subscribe.options.values.slice(1);
              }
            };

            for (var _i2 = 0; _i2 < notAutocompleteSubscribers.length; _i2++) {
              _loop(_i2);
            }
          }).catch(function (error) {
            return reject(error);
          }).finally(function () {
            _this2.state.loading[field] = false;
            resolve();
          });
        } else {
          _this2.state.loading[field] = false;
          resolve();
        }
      }
    } else resolve();
  });
};

proto.getDependencies = function (field) {
  return this.inputdependencies[field] || [];
};

proto.setInputDependencies = function () {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      master = _ref12.master,
      slave = _ref12.slave;

  this.inputdependencies[master] = this.inputdependencies[master] !== void 0 ? this.inputdependencies[master] : [];
  this.inputdependencies[master].push(slave);
};

proto.valuesToKeysValues = function () {
  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (values.length) {
    var type = toRawType(values[0]);
    values = type !== 'Object' ? values.map(function (value) {
      return {
        key: value,
        value: value
      };
    }) : values;
  }
  return values;
};

proto.createInputsFormFromFilter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
  var _this3 = this;

  var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref14$filter = _ref14.filter,
      filter = _ref14$filter === undefined ? [] : _ref14$filter;

  var filterLenght, _loop2, index;

  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          filterLenght = filter.length - 1;

          _loop2 = function _loop2(index) {
            var input = filter[index];
            var forminput = {
              label: input.label,
              attribute: input.attribute,
              type: input.input.type || 'textfield',
              options: _extends({}, input.input.options),
              value: null,
              operator: input.op,
              logicop: index === filterLenght ? null : input.logicop,
              id: input.id || getUniqueDomId(),
              loading: false
            };
            if (forminput.type === 'selectfield' || forminput.type === 'autocompletefield') {
              if (forminput.options.values === void 0) forminput.options.values = [];else if (forminput.options.dependance) {
                forminput.loading = true;
                _this3.getUniqueValuesFromField({ unique: forminput.attribute }).then(function (values) {
                  values = _this3.valuesToKeysValues(values);
                  values.splice(0, 0, forminput.options.values[0]);
                  forminput.options.values = values;
                }).catch(function () {
                  return forminput.options.values = [];
                }).finally(function () {
                  return forminput.loading = false;
                });
              } else forminput.options.values = _this3.valuesToKeysValues(forminput.options.values);
              //check if has a dependance
              var dependance = forminput.options.dependance;

              if (dependance) {
                //set dependance of input
                _this3.inputdependance[forminput.attribute] = dependance;
                _this3.state.loading[dependance] = false;
                // set disabled false for back compatibility
                forminput.options.disabled = false;
                _this3.setInputDependencies({
                  master: dependance,
                  slave: forminput
                });
              }
              if (forminput.type !== 'autocompletefield') {
                if (forminput.options.values.length) forminput.options.values[0].value !== _constants.ALLVALUE && forminput.options.values.unshift({ value: _constants.ALLVALUE });else forminput.options.values.push({ value: _constants.ALLVALUE });
                forminput.value = _constants.ALLVALUE;
              }
            }
            _this3.state.forminputs.push(forminput);
          };

          for (index = 0; index <= filterLenght; index++) {
            _loop2(index);
          }

        case 3:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee4, this);
}));

proto.createQueryFilterObject = function () {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref15$ogcService = _ref15.ogcService,
      ogcService = _ref15$ogcService === undefined ? 'wms' : _ref15$ogcService,
      _ref15$filter = _ref15.filter,
      filter = _ref15$filter === undefined ? {} : _ref15$filter;

  var info = this.getInfoFromLayer(ogcService);
  Object.assign(info, {
    ogcService: ogcService,
    filter: filter
  });
  return info;
};

proto.getInfoFromLayer = function (ogcService) {
  var queryUrl = ogcService === 'wfs' ? this.searchLayer.getProject().getWmsUrl() : this.searchLayer.getQueryUrl();
  return {
    url: queryUrl,
    layers: [],
    infoFormat: this.searchLayer.getInfoFormat(ogcService),
    crs: this.searchLayer.getCrs(),
    serverType: this.searchLayer.getServerType()
  };
};

proto.setSearchLayer = function (layer) {
  this.searchLayer = layer;
};

proto.getSearchLayer = function () {
  return this.searchLayer;
};

proto.clear = function () {
  this.state = null;
};

module.exports = SearchService;

},{"../../constants":684,"core/catalog/cataloglayersstoresregistry":403,"core/data/routerservice":406,"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485,"gui/gui":575,"gui/search/vue/panel/searchpanel":687}],689:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constants = require('../../constants');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var autocompleteOptions = require('gui/external/select2/options/autocomplete');

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var _require2 = require('core/utils/utils'),
    debounce = _require2.debounce;

var _require3 = require('gui/vue/vue.mixins'),
    select2Mixin = _require3.select2Mixin;

exports.default = {
  name: "select2",
  props: ['forminput', 'autocompleteRequest'],
  mixins: [select2Mixin],
  methods: {
    _initSelect2Element: function _initSelect2Element() {
      var _this = this;

      var _forminput = this.forminput,
          type = _forminput.type,
          attribute = _forminput.attribute,
          options = _forminput.options;

      var numdigaut = options.numdigaut && !Number.isNaN(1 * options.numdigaut) && 1 * options.numdigaut > 0 && 1 * options.numdigaut || 2;
      var isAutocomplete = type === 'autocompletefield';
      this.select2 = $(this.$el).select2(_extends({
        width: '100%',
        dropdownParent: $('.g3w-search-form:visible'),
        minimumInputLength: isAutocomplete && numdigaut || 0,
        allowClear: isAutocomplete,
        placeholder: isAutocomplete ? '' : null,
        ajax: isAutocomplete ? {
          delay: 500,
          transport: function () {
            var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(_ref, success, failure) {
              var value = _ref.data.q;
              var data;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return _this.autocompleteRequest({
                        field: attribute,
                        value: value
                      });

                    case 3:
                      data = _context.sent;

                      success({ results: data });
                      _context.next = 10;
                      break;

                    case 7:
                      _context.prev = 7;
                      _context.t0 = _context['catch'](0);

                      failure(_context.t0);

                    case 10:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, _this, [[0, 7]]);
            }));

            function transport(_x, _x2, _x3) {
              return _ref2.apply(this, arguments);
            }

            return transport;
          }()
        } : null
      }, autocompleteOptions));
      this.select2.on('select2:select', function (evt) {
        var id = $(evt.target).attr('id');
        var attribute = $(evt.target).attr('name');
        var value = evt.params.data.id;
        _this.$emit('select-change', {
          id: id,
          attribute: attribute,
          value: value,
          type: _this.forminput.type
        });
      });
      this.forminput.type === 'autocompletefield' && this.select2.on('select2:unselecting', function () {
        _this.forminput.value = null;
      });
    }
  },
  watch: {
    'forminput.value': function forminputValue(value) {
      if (value === _constants.ALLVALUE) {
        this.select2.val(value);
        this.select2.trigger('change');
      }
    }
  },
  created: function created() {
    this.allvalue = _constants.ALLVALUE;
  },
  mounted: function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.$nextTick();

            case 2:
              this._initSelect2Element();

            case 3:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref3.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('select',{staticClass:"form-control",attrs:{"name":_vm.forminput.attribute,"id":_vm.forminput.id,"disabled":_vm.forminput.options.disabled}},_vm._l((_vm.forminput.options.values),function(keyvalue){return _c('option',{key:keyvalue.value,domProps:{"value":keyvalue.value}},[(keyvalue.value === _vm.allvalue )?_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.search.all'),expression:"'sdk.search.all'"}]}):_c('span',[_vm._v(_vm._s(keyvalue.key))])])}),0)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-3b36edd0"

},{"../../constants":684,"core/i18n/i18n.service":418,"core/utils/utils":485,"gui/external/select2/options/autocomplete":555,"gui/vue/vue.mixins":731}],690:[function(require,module,exports){
module.exports = "<ul id=\"g3w-search\" class=\"treeview-menu g3w-search g3w-tools menu-items\" v-if=\"show\">\n  <li v-for=\"search in state.searches\" class=\"menu-item\" @click=\"showPanel(search)\">\n    <i :class=\"g3wtemplate.getFontClass('empty-circle')\"></i>\n    <span>{{ search.name }}</span>\n  </li>\n  <li v-for=\"searchtool in state.searchtools\">\n    <g3w-tool :tool=\"searchtool\"></g3w-tool>\n  </li>\n  <g3w-search-querybuilder v-for=\"(querybuildersearch, index) in state.querybuildersearches\" :key=\"querybuildersearch.id\"\n    :querybuildersearch=\"querybuildersearch\"  @delete=\"removeItem({type:'querybuilder', index:index})\">\n  </g3w-search-querybuilder>\n</ul>\n";

},{}],691:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _tool = require('gui/tools/vue/tool.vue');

var _tool2 = _interopRequireDefault(_tool);

var _g3wSearchQuerybuilder = require('gui/querybuilder/vue/g3w-search-querybuilder.vue');

var _g3wSearchQuerybuilder2 = _interopRequireDefault(_g3wSearchQuerybuilder);

var _utils = require('gui/vue/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Component = require('gui/vue/component');
var Service = require('gui/search/service');
var templateCompiled = (0, _utils.createCompiledTemplate)(require('./search.html'));

var vueComponentOptions = _extends({}, templateCompiled, {
  data: function data() {
    return {
      state: null
    };
  },
  components: {
    'g3w-tool': _tool2.default,
    'g3w-search-querybuilder': _g3wSearchQuerybuilder2.default
  },
  computed: {
    show: function show() {
      return this.state.searches.length + this.state.searchtools.length + this.state.querybuildersearches.length > 0;
    }
  },
  methods: {
    showPanel: function showPanel() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.$options.service.showPanel(config);
    },
    removeItem: function removeItem(_ref) {
      var type = _ref.type,
          index = _ref.index;

      this.$options.service.removeItem({
        type: type,
        index: index
      });
    }
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.$nextTick();

            case 2:
              $('.icon-search-action').tooltip();

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
});

var InternalComponent = Vue.extend(vueComponentOptions);

function SearchComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.id = "search";
  this._service = options.service || new Service();
  this._service.init();
  this.title = this._service.getTitle();
  this.internalComponent = new InternalComponent({
    service: this._service
  });
  this.internalComponent.state = this._service.state;
  this.state.visible = true;
  this._reload = function () {
    this._service.reload();
  };
  this.unmount = function () {
    this._searches_searchtools.$destroy();
    return base(this, 'unmount');
  };
}

inherit(SearchComponent, Component);

module.exports = SearchComponent;

},{"./search.html":690,"core/utils/utils":485,"gui/querybuilder/vue/g3w-search-querybuilder.vue":667,"gui/search/service":685,"gui/tools/vue/tool.vue":708,"gui/vue/component":718,"gui/vue/utils":727}],692:[function(require,module,exports){
module.exports = "<li :id=\"component.id\" v-show=\"state.visible\" class=\"treeview sidebaritem\" :class=\"{'active': open}\">\n  <a @click.prevent=\"onClickItem\" ref=\"anchor_click\" href=\"#\" style=\"display: flex; justify-content: space-between; align-items: center\">\n    <div>\n      <i :class=\"icon\" :style=\"{color: iconColor}\"></i>\n      <span class=\"treeview-label\" v-t=\"title\"></span>\n    </div>\n    <div>\n      <span v-if=\"info.state\" style=\"position: absolute; right: 5px; font-weight: bold\" :class=\"info.class\" :style=\"info.style\" :title=\"info.tooltip\">{{ info.state }}</span>\n      <span v-for=\"action in actions\" :key=\"action.id\" data-placement=\"left\" data-toggle=\"tooltip\"\n            @click.stop=\"action.fnc\"\n            style=\"font-weight: bold; padding:3px;\"\n            :class=\"action.class\"\n            class=\"action skin-tooltip-left\"\n            :style=\"action.style\"\n            :title=\"action.tooltip\">\n      </span>\n    </div>\n    <i v-if=\"collapsible\" :class=\"g3wtemplate.getFontClass('angle-left')\" class=\"pull-right\"></i>\n  </a>\n  <div id=\"g3w-sidebarcomponent-placeholder\"></div>\n</li>\n";

},{}],693:[function(require,module,exports){
module.exports = "<aside class=\"main-sidebar\" :class=\"{ iframe: iframe, 'g3w-disabled': disabled }\" >\n  <!-- sidebar: style can be found in sidebar.less -->\n  <!-- Sidebar toggle button-->\n  <!-- Toggle button on the left side of main sidebar only if not mobile -->\n  <a v-if=\"!isMobile()\" href=\"#\" class=\"sidebar-aside-toggle\" data-toggle=\"offcanvas\" role=\"button\">\n    <i :class=\"g3wtemplate.getFontClass('bars')\"></i>\n  </a>\n\t<div id=\"g3w-sidebar\" class=\"sidebar\">\n    <div id=\"disable-sidebar\"></div>\n    <div v-show=\"panelsinstack\" class=\"g3w-sidebarpanel\">\n      <div id=\"g3w-sidebarpanel-header-placeholder\" style=\"overflow: hidden;line-height: 14px; font-size:1.5em\">\n        <div style=\"display: flex;\" :style=\"{justifyContent: state.gui.title ? 'space-between' : 'flex-end' }\">\n          <h4 v-if=\"state.gui.title\" style=\"display: inline-block; font-weight: bold\" v-t=\"state.gui.title\"></h4>\n          <div>\n            <span v-if=\"panels.length > 1\" @click=\"closePanel\" data-placement=\"left\" data-toggle=\"tooltip\" v-t-tooltip.create=\"'back'\" class=\"skin-tooltip-left g3w-span-button close-pane-button fa-stack\">\n              <i :class=\"g3wtemplate.getFontClass('circle')\" class=\"fa-stack-1x panel-button\"></i>\n              <i :class=\"g3wtemplate.getFontClass('arrow-left')\" class=\"fa-stack-1x panel-icon\"></i>\n            </span>\n              <span @click=\"closeAllPanels\" data-placement=\"left\" data-toggle=\"tooltip\" v-t-tooltip.create=\"'close'\" class=\"skin-tooltip-left g3w-span-button close-pane-button fa-stack\">\n              <i :class=\"g3wtemplate.getFontClass('circle')\" class=\"fa-stack-1x panel-button\"></i>\n              <i :class=\"g3wtemplate.getFontClass('close')\" class=\"fa-stack-1x panel-icon\"></i>\n            </span>\n          </div>\n        </div>\n      </div>\n      <div id=\"g3w-sidebarpanel-placeholder\" class=\"g3w-sidebarpanel-placeholder\"></div>\n    </div>\n    <div id=\"g3w-sidebarcomponents-content\" >\n      <ul id=\"g3w-sidebarcomponents\" v-show=\"showmainpanel\" class=\"sidebar-menu\" :class=\"{'g3w-disabled': state.disabled}\"></ul>\n    </div>\n  </div>\n  <!-- /.sidebar -->\n</aside>\n";

},{}],694:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = require('core/i18n/i18n.service').t;

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Stack = require('gui/utils/utils').barstack;
var G3WObject = require('core/g3wobject');
var compiledSideBarItemTemplate = Vue.compile(require('./sidebar-item.html'));
var SIDEBAREVENTBUS = new Vue();

//sidebar item is a <li> dom element of the sidebar . Where is possible set
//title, icon type etc ..  is possible to customize component
var SidebarItem = Vue.extend(_extends({}, compiledSideBarItemTemplate, {
  data: function data() {
    return {
      info: this.$options.info || {
        state: null,
        style: null,
        class: null
      },
      main: true,
      component: this.$options.component,
      active: false,
      title: '',
      open: false,
      icon: null,
      iconColor: null,
      collapsible: null
    };
  },

  methods: {
    onClickItem: function onClickItem(evt) {
      var _this = this;

      // force to close
      this.component.isolate && evt.stopPropagation();
      if (!this.component.isolate) {
        // set state of opened component
        this.$options.service.state.components.forEach(function (component) {
          if (component !== _this.component) {
            if (component.getOpen()) {
              component.click({
                open: component.isolate
              });
            }
          }
        });
        !this.component.collapsible && isMobile.any && SIDEBAREVENTBUS.$emit('sidebaritemclick');
      }
      this.component.setOpen(!this.component.state.open);
    }
  },
  created: function created() {
    var _this2 = this;

    this.component.openClose = function () {
      return _this2.$refs.anchor_click.click();
    };
  },
  mounted: function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.$nextTick();

            case 2:
              $('.sidebaritem .action[data-toggle="tooltip"]').tooltip();

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
}));

function SidebarService() {
  //set sidebar stack
  this.stack = new Stack();
  // set setter for close sidebarpanel to catch event
  // of closing panel of the sidebar
  this.setters = {
    closeSidebarPanel: function closeSidebarPanel() {},
    openCloseItem: function openCloseItem(bool) {}
  };
  //service state
  this.state = {
    components: [],
    gui: {
      title: ''
    },
    disabled: false
  };
  //inizialize method
  this.init = function (layout) {
    this.layout = layout;
  };
  // add component to sidebar
  this.addComponents = function (components) {
    var _this3 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    //for each component of the sidebar it is call addComponent method
    components.forEach(function (component) {
      return _this3.addComponent(component, options);
    });
    return true;
  };
  // add each component to the sidebar
  // add also position insiede the sidebar
  this.addComponent = function (component) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var position = options.position,
        info = options.info;

    if (isMobile.any && !component.mobile) {
      return false;
    }
    var sidebarItem = new SidebarItem({
      service: this,
      info: info,
      component: component
    });
    sidebarItem.title = component.title || sidebarItem.title;
    sidebarItem.info = component.info || sidebarItem.info;
    sidebarItem.actions = component.actions || sidebarItem.actions;
    sidebarItem.open = component.state.open; //(component.open === undefined) ? sidebarItem.open : component.open;
    sidebarItem.icon = component.icon || sidebarItem.icon;
    sidebarItem.iconColor = component.iconColor;
    sidebarItem.state = component.state || true;
    sidebarItem.collapsible = typeof component.collapsible === 'boolean' ? component.collapsible : true;
    sidebarItem.isolate = typeof component.isolate === 'boolean' ? component.isolate : false;
    //append component to  g3w-sidebarcomponents (template sidebar.html)
    var DOMComponent = sidebarItem.$mount().$el;
    this.state.components.push(component);
    var children = $('#g3w-sidebarcomponents').children(':visible');
    var childrenLength = children.length;
    if (position === null || position === undefined || position < 0 || position >= childrenLength) $('#g3w-sidebarcomponents').append(DOMComponent);else children.each(function (index, element) {
      position === index && $(DOMComponent).insertBefore(element);
    });
    //mount componet to g3w-sidebarcomponent-placeholder (template sidebar-item.html);
    component.mount("#g3w-sidebarcomponent-placeholder");
    // check if componentonent has iniService method
    component.initService && component.initService();
    // add click handler
    this.setComponentClickHandler(component);
    return true;
  };

  this.setComponentClickHandler = function (component) {
    component.click = function () {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$open = _ref2.open,
          open = _ref2$open === undefined ? false : _ref2$open;

      open = open || false;
      $(component.getInternalComponent().$el).siblings('a').click();
      component.setOpen(open);
    };
  };

  // get component by id
  this.getComponent = function (id) {
    return this.state.components.find(function (component) {
      return component.getId() === id;
    });
  };

  // get all components
  this.getComponents = function () {
    return this.state.components;
  };

  /**
   * close fo the moment only conlapsbale
   */
  this.closeOpenComponents = function () {
    var collapsible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this.getComponents().forEach(function (component) {
      return component.getOpen() && component.collapsible && component.click({ open: false });
    });
  };

  this.reloadComponent = function (id) {
    var component = this.getComponent(id);
    component && component.reload();
  };

  this.reloadComponents = function () {
    // force close of the panel
    this.closePanel();
    this.state.components.forEach(function (component) {
      if (component.collapsible && component.state.open) component.click({ open: false });
      component.reload();
    });
  };
  //remove component
  this.removeComponent = function (component) {
    var _this4 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var position = options.position;

    this.state.components.forEach(function (sidebarComponent, index) {
      if (component === sidebarComponent) {
        component.unmount();
        _this4.state.components.splice(index, 1);
        if (position !== undefined) $('#g3w-sidebarcomponents').children(':visible')[position].remove();else $('#g3w-sidebarcomponents').children('#' + component.id).remove();
        return false;
      }
    });
  };
  // show panel on stack
  this.showPanel = function (panel) {
    var _this5 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      _this5.state.gui.title = panel.title;
      var parent = "#g3w-sidebarpanel-placeholder";
      _this5.stack.getCurrentContentData() && $(_this5.stack.getCurrentContentData().content.internalPanel.$el).hide();
      _this5.stack.push(panel, _extends({
        parent: parent
      }, options)).then(function (content) {
        return resolve(content);
      });
    });
  };

  // close panel
  this.closePanel = function () {
    var _this6 = this;

    this.state.gui.title = null;
    this.closeSidebarPanel();
    this.stack.pop().then(function (content) {
      content = null;
      _this6.stack.getCurrentContentData() && $(_this6.stack.getCurrentContentData().content.internalPanel.$el).show();
    });
  };

  this.closeAllPanels = function () {
    this.state.gui.title = null;
    this.closeSidebarPanel();
    this.stack.clear();
  };

  base(this);
}

inherit(SidebarService, G3WObject);

var sidebarService = new SidebarService();
var compiledSideBarTemplate = Vue.compile(require('./sidebar.html'));
var SidebarComponent = Vue.extend(_extends({}, compiledSideBarTemplate, {
  data: function data() {
    return {
      components: sidebarService.state.components,
      panels: sidebarService.stack.state.contentsdata,
      bOpen: true,
      bPageMode: false,
      header: t('main navigation'),
      state: sidebarService.state
    };
  },

  computed: {
    disabled: function disabled() {
      return _applicationstate2.default.gui.sidebar.disabled;
    },

    panelsinstack: function panelsinstack() {
      return this.panels.length > 0;
    },
    showmainpanel: function showmainpanel() {
      return this.components.length > 0 && !this.panelsinstack;
    },
    componentname: function componentname() {
      return this.components.length ? this.components.slice(-1)[0].getTitle() : "";
    },
    panelname: function panelname() {
      var name = "";
      if (this.panels.length) {
        name = this.panels.slice(-1)[0].content.getTitle();
      }
      return name;
    }
  },
  methods: {
    closePanel: function closePanel() {
      sidebarService.closePanel();
    },
    closeAllPanels: function closeAllPanels() {
      sidebarService.closeAllPanels();
    }
  },
  created: function created() {
    this.iframe = _applicationstate2.default.iframe;
    SIDEBAREVENTBUS.$on('sidebaritemclick', function () {
      return $('.sidebar-toggle').click();
    });
  }
}));

module.exports = {
  SidebarService: sidebarService,
  SidebarComponent: SidebarComponent
};

},{"./sidebar-item.html":692,"./sidebar.html":693,"core/applicationstate":402,"core/g3wobject":415,"core/i18n/i18n.service":418,"core/utils/utils":485,"gui/utils/utils":713}],695:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');
var StreetViewComponent = require('gui/streetview/vue/streetview');

function StreetViewService() {
  this._position = null;
  this.setters = {
    postRender: function postRender(position) {}
  };

  this.init = function () {
    var KEY = _applicationstate2.default.keys.vendorkeys.google;
    return KEY ? new Promise(function (resolve) {
      $script('https://maps.googleapis.com/maps/api/js?key=' + KEY, function () {
        resolve();
      });
    }) : Promise.reject();
  };
  base(this);
}

inherit(StreetViewService, G3WObject);

var proto = StreetViewService.prototype;

proto.getPosition = function () {
  return this._position;
};

proto.showStreetView = function (position) {
  this._position = position;
  GUI.setContent({
    content: new StreetViewComponent({
      service: this
    }),
    title: 'StreetView'
  });
};

module.exports = StreetViewService;

},{"core/applicationstate":402,"core/g3wobject":415,"core/utils/utils":485,"gui/gui":575,"gui/streetview/vue/streetview":697}],696:[function(require,module,exports){
module.exports = "<div id=\"streetview\"></div>";

},{}],697:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Component = require('gui/vue/component');
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./streetview.html'));

var InternalComponent = Vue.extend(_extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: null
    };
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      var position = _this.$options.service.getPosition();
      _this.$options.service.postRender(position);
    });
  }
}));

var StreetViewComponent = function StreetViewComponent(options) {
  base(this);
  options = options || {};
  var service = options.service;
  this.setService(service);
  var internalComponent = new InternalComponent({
    service: service
  });
  this.setInternalComponent(internalComponent);
  this.unmount = function () {
    return base(this, 'unmount');
  };
};

inherit(StreetViewComponent, Component);

module.exports = StreetViewComponent;

},{"./streetview.html":696,"core/utils/utils":485,"gui/vue/component":718,"gui/vue/utils":727}],698:[function(require,module,exports){
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/utils/utils'),
    inherit = _require.inherit,
    noop = _require.noop;

var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');
var t = require('core/i18n/i18n.service').t;

var _require2 = require('core/utils/geo'),
    coordinatesToGeometry = _require2.coordinatesToGeometry;

var _require3 = require('core/layers/layer'),
    SELECTION_STATE = _require3.SELECTION_STATE;

var PAGELENGTHS = [10, 25, 50];

var TableService = function TableService() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.currentPage = 0; // number of pages
  this.layer = options.layer;
  this.formatter = options.formatter;
  var headers = this.getHeaders();
  this.allfeaturesnumber;
  this.nopaginationsfilter = [];
  this.selectedfeaturesfid = this.layer.getSelectionFids();
  this.geolayer = this.layer.isGeoLayer();
  this.projection = this.geolayer ? this.layer.getProjection() : null;
  this.mapService = GUI.getComponent('map').getService();
  //this.getAll = this.selectedfeaturesfid.size > 0;
  this.getAll = false;
  this.paginationfilter = false;
  this.mapBBoxEventHandlerKey = {
    key: null,
    cb: null
  };
  this.clearAllSelection = function () {
    _this.state.features.forEach(function (feature) {
      return feature.selected = false;
    });
    _this.state.tools.show = false;
    _this.state.selectAll = false;
  };
  this.state = {
    pageLengths: PAGELENGTHS,
    pageLength: this.layer.getAttributeTablePageLength() || PAGELENGTHS[0],
    features: [],
    title: this.layer.getTitle(),
    headers: headers,
    geometry: true,
    loading: false,
    allfeatures: 0,
    pagination: !this.getAll,
    selectAll: false,
    nofilteredrow: false,
    tools: {
      geolayer: {
        show: this.geolayer,
        active: false,
        in_bbox: void 0
      },
      show: false,
      filter: this.layer.state.filter
    }
  };
  // pagination filter features
  this._async = {
    state: false,
    fnc: noop
  };
  GUI.onbefore('setContent', function (options) {
    _this._async.state = options.perc === 100;
  });
  this.layer.on('unselectionall', this.clearAllSelection);
  this.filterChangeHandler = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        type = _ref2.type;

    var data, emitRedraw;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _this.allfeaturesnumber = undefined;
            data = [];
            // emit redraw if in_bbox filter or not select all

            emitRedraw = type === 'in_bbox' || !_this.selectedfeaturesfid.has(SELECTION_STATE.ALL);

            if (_this.state.pagination) {
              _context.next = 12;
              break;
            }

            if (!emitRedraw) {
              _context.next = 10;
              break;
            }

            _context.next = 7;
            return _this.reloadData();

          case 7:
            _context.t0 = _context.sent;
            _context.next = 11;
            break;

          case 10:
            _context.t0 = [];

          case 11:
            data = _context.t0;

          case 12:
            emitRedraw && _this.emit('redraw', data);

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));
  this.layer.on('filtertokenchange', this.filterChangeHandler);
};

inherit(TableService, G3WObject);

var proto = TableService.prototype;

proto.toggleFilterToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return this.layer.toggleFilterToken();

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this);
}));

proto.getHeaders = function () {
  //add null as firs vale of header because need to add a custom input selector fro datatable purpose
  return [null].concat(_toConsumableArray(this.layer.getTableHeaders()));
};

// function need to work with pagination
proto.setDataForDataTable = function () {
  var _this2 = this;

  var data = [];
  this.state.features.forEach(function (feature) {
    var attributes = feature.attributes ? feature.attributes : feature.properties;
    var values = [null];
    _this2.state.headers.forEach(function (header) {
      header && values.push(attributes[header.name]);
    });
    data.push(values);
  });
  return data;
};

proto.addRemoveSelectedFeature = function (feature) {
  feature.selected = !feature.selected;
  if (this.state.selectAll) {
    this.state.selectAll = false;
    this.layer.excludeSelectionFid(feature.id, this.state.pagination);
  } else if (this.selectedfeaturesfid.has(SELECTION_STATE.EXCLUDE)) {
    this.layer[feature.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
    var size = this.selectedfeaturesfid.size;
    if (size === 1) {
      !this.state.tools.filter.active && this.layer.setSelectionFidsAll();
      this.state.selectAll = true;
    } else if (size - 1 === this.state.features.length) this.layer.clearSelectionFids();
  } else {
    this.layer[feature.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
    var _size = this.selectedfeaturesfid.size;
    if (_size === this.allfeaturesnumber) {
      this.state.selectAll = true;
      !this.state.tools.filter.active && this.layer.setSelectionFidsAll();
    }
  }
  this.state.tools.show = this.selectedfeaturesfid.size > 0;
  if (!this.state.pagination) {
    if (this.nopaginationsfilter.length) {
      this.state.selectAll = this.state.features.filter(function (feature) {
        return feature.selected;
      }).length === this.nopaginationsfilter.length;
    }
  }
};

proto.getAllFeatures = function (params) {
  var _this3 = this;

  GUI.setLoadingContent(true);
  return new Promise(function (resolve, reject) {
    _this3.layer.getDataTable(params || {}).then(function (data) {
      var features = data.features;

      if (_this3.geolayer && features) {
        if (!params) {
          var LoadedFeaturesId = _this3.state.features.map(function (feature) {
            return feature.id;
          });
          features.forEach(function (feature) {
            if (LoadedFeaturesId.indexOf(feature.id) === -1) {
              feature.geometry && _this3.layer.addOlSelectionFeature({
                id: feature.id,
                geometry: _this3._returnGeometry(feature)
              });
            }
          });
          _this3.getAll = true;
        }
        resolve(features);
      }
    }).fail(function () {
      return reject();
    }).always(function () {
      return GUI.setLoadingContent(false);
    });
  });
};

proto.switchSelection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _this4 = this;

  var selected, filterFeatures, _selected;

  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (this.state.pagination) {
            _context3.next = 4;
            break;
          }

          // no pagination
          if (this.nopaginationsfilter.length) {
            //filtered
            selected = false;
            filterFeatures = [];

            this.state.features.forEach(function (feature, index) {
              if (_this4.nopaginationsfilter.indexOf(index) !== -1) filterFeatures.push(feature);
              feature.selected = !feature.selected;
              _this4.layer[feature.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
              selected = selected || feature.selected;
            });
            this.state.tools.show = selected;
            this.checkSelectAll(filterFeatures);
          } else {
            // no filter
            this.state.features.forEach(function (feature) {
              feature.selected = !feature.selected;
            });
            this.layer.invertSelectionFids();
            this.checkSelectAll();
            this.state.tools.show = this.selectedfeaturesfid.size > 0;
          }
          _context3.next = 13;
          break;

        case 4:
          // pagination
          _selected = false;

          this.state.features.forEach(function (feature) {
            feature.selected = !feature.selected;
            _selected = feature.selected;
          });
          _context3.t0 = !this.getAll;

          if (!_context3.t0) {
            _context3.next = 10;
            break;
          }

          _context3.next = 10;
          return this.getAllFeatures();

        case 10:
          this.state.selectAll = this.paginationfilter ? _selected : this.state.selectAll;
          this.layer.invertSelectionFids();
          this.state.tools.show = this.selectedfeaturesfid.size > 0;

        case 13:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this);
}));

proto.clearLayerSelection = function () {
  this.layer.clearSelectionFids();
};

/**
 * Called when alla selected feature is checked
 * @returns {Promise<void>}
 */
proto.selectAllFeatures = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
  var _this5 = this;

  var selected, _paginationParams, search, ordering, formatter, in_bbox, features;

  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          // set inverse of selectAll
          this.state.selectAll = !this.state.selectAll;

          if (this.state.pagination) {
            _context4.next = 5;
            break;
          }

          //no pagination no filter
          if (this.nopaginationsfilter.length) {
            //check if filter is set (no pagination)
            selected = false;

            this.state.features.forEach(function (feature, index) {
              if (_this5.nopaginationsfilter.indexOf(index) !== -1) {
                feature.selected = _this5.state.selectAll;
                _this5.layer[feature.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
                selected = selected || feature.selected;
              }
            });
            this.state.tools.show = selected;
          } else {
            this.state.tools.show = this.state.selectAll;
            this.layer[this.state.selectAll ? 'setSelectionFidsAll' : 'clearSelectionFids']();
            this.state.features.forEach(function (feature) {
              return feature.selected = _this5.state.selectAll;
            });
          }
          _context4.next = 25;
          break;

        case 5:
          if (!this.paginationfilter) {
            _context4.next = 18;
            break;
          }

          if (!(this.state.featurescount >= this.state.allfeatures)) {
            _context4.next = 10;
            break;
          }

          this.state.features.forEach(function (feature) {
            feature.selected = _this5.state.selectAll;
            _this5.layer[feature.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
          });
          _context4.next = 15;
          break;

        case 10:
          _paginationParams = this.paginationParams, search = _paginationParams.search, ordering = _paginationParams.ordering, formatter = _paginationParams.formatter, in_bbox = _paginationParams.in_bbox;
          _context4.next = 13;
          return this.getAllFeatures({
            search: search,
            ordering: ordering,
            formatter: formatter,
            in_bbox: in_bbox
          });

        case 13:
          features = _context4.sent;

          features.forEach(function (feature) {
            !_this5.getAll && _this5.geolayer && feature.geometry && _this5.layer.addOlSelectionFeature({
              id: feature.id,
              geometry: _this5._returnGeometry(feature)
            });
            _this5.layer[_this5.state.selectAll ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
          });

        case 15:
          this.state.features.forEach(function (feature) {
            return feature.selected = _this5.state.selectAll;
          });
          _context4.next = 24;
          break;

        case 18:
          this.state.features.forEach(function (feature) {
            return feature.selected = _this5.state.selectAll;
          });
          _context4.t0 = !this.getAll;

          if (!_context4.t0) {
            _context4.next = 23;
            break;
          }

          _context4.next = 23;
          return this.getAllFeatures();

        case 23:
          this.layer[this.state.selectAll ? 'setSelectionFidsAll' : 'clearSelectionFids']();

        case 24:
          this.state.tools.show = this.state.selectAll || this.selectedfeaturesfid.size > 0;

        case 25:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee4, this);
}));

/**
 * Method to set filtered features
 * @param featuresIndex
 */
proto.setFilteredFeature = function (featuresIndex) {
  var _this6 = this;

  this.nopaginationsfilter = featuresIndex;
  this.checkSelectAll(featuresIndex.length === this.allfeaturesnumber || featuresIndex.length === 0 ? undefined : this.nopaginationsfilter.map(function (index) {
    return _this6.state.features[index];
  }));
};

proto.setAttributeTablePageLength = function (length) {
  this.layer.setAttributeTablePageLength(length);
};

/**
 * Main method to get data table layer
 * @param start
 * @param order
 * @param length
 * @param columns
 * @param search
 * @param firstCall
 * @returns {Promise<unknown>}
 */
proto.getData = function () {
  var _this7 = this;

  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$start = _ref6.start,
      start = _ref6$start === undefined ? 0 : _ref6$start,
      _ref6$order = _ref6.order,
      order = _ref6$order === undefined ? [] : _ref6$order,
      _ref6$length = _ref6.length,
      length = _ref6$length === undefined ? this.state.pageLength : _ref6$length,
      _ref6$columns = _ref6.columns,
      columns = _ref6$columns === undefined ? [] : _ref6$columns,
      _ref6$search = _ref6.search,
      search = _ref6$search === undefined ? { value: null } : _ref6$search,
      _ref6$firstCall = _ref6.firstCall,
      firstCall = _ref6$firstCall === undefined ? false : _ref6$firstCall;

  // reset features before load
  GUI.setLoadingContent(true);
  this.setAttributeTablePageLength(length);
  return new Promise(function (resolve, reject) {
    if (!_this7.state.headers.length) resolve({
      data: [],
      recordsTotal: 0,
      recordsFiltered: 0
    });else {
      var searchText = search.value && search.value.length > 0 ? search.value : null;
      _this7.state.features.splice(0);
      if (!order.length) {
        order.push({
          column: 1,
          dir: 'asc'
        });
      }
      var ordering = order[0].dir === 'asc' ? _this7.state.headers[order[0].column].name : '-' + _this7.state.headers[order[0].column].name;
      _this7.currentPage = start === 0 || _this7.state.pagination && _this7.state.tools.filter.active ? 1 : start / length + 1;
      var in_bbox = _this7.state.tools.geolayer.in_bbox;
      var field = _this7.state.pagination ? columns.filter(function (column) {
        return column.search && column.search.value;
      }).map(function (column) {
        return column.name + '|like|' + column.search.value + '|and';
      }).join(',') : undefined;
      _this7.paginationParams = {
        field: field || undefined,
        page: _this7.currentPage,
        page_size: length,
        search: searchText,
        in_bbox: in_bbox,
        formatter: _this7.formatter,
        ordering: ordering
      };
      var getDataPromise = _this7.state.pagination ? _this7.layer.getDataTable(_this7.paginationParams) : _this7.layer.getDataTable({
        ordering: ordering,
        in_bbox: in_bbox,
        formatter: _this7.formatter
      });
      getDataPromise.then(function (data) {
        var _data$features = data.features,
            features = _data$features === undefined ? [] : _data$features;

        _this7.state.allfeatures = data.count || _this7.state.features.length;
        _this7.state.featurescount = features.length;
        _this7.allfeaturesnumber = _this7.allfeaturesnumber === undefined ? data.count : _this7.allfeaturesnumber;
        _this7.paginationfilter = data.count !== _this7.allfeaturesnumber;
        _this7.state.pagination = firstCall ? _this7.state.tools.filter.active || features.length < _this7.allfeaturesnumber : _this7.state.pagination;
        _this7.addFeatures(features);
        resolve({
          data: _this7.setDataForDataTable(),
          recordsFiltered: data.count,
          recordsTotal: data.count
        });
      }).fail(function (err) {
        GUI.notify.error(t("info.server_error"));
        reject(err);
      }).always(function () {
        GUI.setLoadingContent(false);
      });
    }
  });
};

proto.setInBBoxParam = function () {
  this.state.tools.geolayer.in_bbox = this.state.tools.geolayer.active ? this.mapService.getMapBBOX().join(',') : void 0;
};

proto.resetMapBBoxEventHandlerKey = function () {
  ol.Observable.unByKey(this.mapBBoxEventHandlerKey.key);
  this.mapBBoxEventHandlerKey.key = null;
  this.mapBBoxEventHandlerKey.cb = null;
};

proto.getDataFromBBOX = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
  var _this8 = this;

  return regeneratorRuntime.wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          this.state.tools.geolayer.active = !this.state.tools.geolayer.active;
          if (this.state.tools.geolayer.active) {
            this.mapBBoxEventHandlerKey.cb = this.state.pagination ? function () {
              _this8.setInBBoxParam();
              _this8.emit('ajax-reload');
            } : _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
              return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      _this8.setInBBoxParam();
                      _this8.filterChangeHandler({
                        type: 'in_bbox'
                      });

                    case 2:
                    case 'end':
                      return _context5.stop();
                  }
                }
              }, _callee5, _this8);
            }));
            this.mapBBoxEventHandlerKey.key = this.mapService.getMap().on('moveend', this.mapBBoxEventHandlerKey.cb);
            this.mapBBoxEventHandlerKey.cb();
          } else {
            this.mapBBoxEventHandlerKey.cb && this.mapBBoxEventHandlerKey.cb();
            this.resetMapBBoxEventHandlerKey();
          }

        case 2:
        case 'end':
          return _context6.stop();
      }
    }
  }, _callee6, this);
}));

proto.addFeature = function (feature) {
  var tableFeature = {
    id: feature.id,
    selected: this.state.tools.filter.active || this.layer.hasSelectionFid(feature.id),
    attributes: feature.attributes ? feature.attributes : feature.properties
  };
  if (this.geolayer && feature.geometry) {
    var olSelectionFeature = this.layer.getOlSelectionFeature(tableFeature.id) || this.layer.addOlSelectionFeature({
      id: tableFeature.id,
      geometry: this._returnGeometry(feature)
    });
    tableFeature.geometry = olSelectionFeature.feature.getGeometry();
  }
  this.state.features.push(tableFeature);
};

proto.checkSelectAll = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.features;

  this.state.selectAll = this.selectedfeaturesfid.has(SELECTION_STATE.ALL) || features.reduce(function (accumulator, feature) {
    return accumulator && feature.selected;
  }, true);
};

proto.addFeatures = function () {
  var _this9 = this;

  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  features.forEach(function (feature) {
    return _this9.addFeature(feature);
  });
  this.state.tools.show = this.layer.getFilterActive() || this.selectedfeaturesfid.size > 0;
  this.checkSelectAll();
};

proto.reloadData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
  var pagination = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var tabledata, _tabledata$data, data, reloadData;

  return regeneratorRuntime.wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          this.state.features.splice(0);
          this.state.pagination = pagination;
          _context7.next = 4;
          return this.getData();

        case 4:
          tabledata = _context7.sent;
          _tabledata$data = tabledata.data, data = _tabledata$data === undefined ? [] : _tabledata$data, reloadData = tabledata.reloadData;
          return _context7.abrupt('return', data);

        case 7:
        case 'end':
          return _context7.stop();
      }
    }
  }, _callee7, this);
}));

proto._setLayout = function () {
  //TODO
};

proto._returnGeometry = function (feature) {
  var geometry = void 0;
  if (feature.attributes) geometry = feature.geometry;else if (feature.geometry) geometry = coordinatesToGeometry(feature.geometry.type, feature.geometry.coordinates);
  return geometry;
};

proto.zoomAndHighLightFeature = function (feature) {
  var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var geometry = feature.geometry;
  if (geometry) {
    if (this._async.state) this._async.fnc = this.mapService.highlightGeometry.bind(mapService, geometry, { zoom: zoom });else this.mapService.highlightGeometry(geometry, { zoom: zoom });
  }
};

proto.clear = function () {
  var _this10 = this;

  this.layer.off('unselectionall', this.clearAllSelection);
  this.layer.off('filtertokenchange', this.filterChangeHandler);
  this.resetMapBBoxEventHandlerKey();
  this.allfeaturesnumber = null;
  this.mapService = null;
  this._async.state && setTimeout(function () {
    _this10._async.fnc();
    _this10._async.state = false;
    _this10._async.fnc = noop;
  });
};

module.exports = TableService;

},{"core/g3wobject":415,"core/i18n/i18n.service":418,"core/layers/layer":443,"core/utils/geo":484,"core/utils/utils":485,"gui/gui":575}],699:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".geometry[data-v-e3dc0742]{cursor:pointer}#noheaders[data-v-e3dc0742]{background-color:#fff;font-weight:700;margin-top:10px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _tablebody = require('./components/tablebody.vue');

var _tablebody2 = _interopRequireDefault(_tablebody);

var _selectrow = require('./components/selectrow.vue');

var _selectrow2 = _interopRequireDefault(_selectrow);

var _g3wTableToolbar = require('./components/g3w-table-toolbar.vue');

var _g3wTableToolbar2 = _interopRequireDefault(_g3wTableToolbar);

var _g3wField = require('gui/fields/g3w-field.vue');

var _g3wField2 = _interopRequireDefault(_g3wField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var debounce = require('core/utils/utils').debounce;

var _require = require('gui/vue/vue.mixins'),
    resizeMixin = _require.resizeMixin;

var GUI = require('gui/gui');
var dataTable = void 0;
var fieldsComponents = [];
var eventHandlers = {
  pagination: {},
  nopagination: {}
};
exports.default = {
  name: "G3WTable",
  mixins: [resizeMixin],
  data: function data() {
    return {
      tableBodyComponent: null,
      state: null,
      table: null,
      selectedRow: null
    };
  },

  components: {
    TableBody: _tablebody2.default
  },
  methods: {
    getDataFromBBOX: function getDataFromBBOX() {
      this.$options.service.getDataFromBBOX();
    },
    toggleFilterToken: function toggleFilterToken() {
      this.$options.service.toggleFilterToken();
    },
    clearAllSelection: function clearAllSelection() {
      this.$options.service.clearLayerSelection();
    },
    switchSelection: function switchSelection() {
      this.$options.service.switchSelection();
    },
    selectAllRow: function selectAllRow() {
      this.state.features.length && this.$options.service.selectAllFeatures();
    },

    _setLayout: function _setLayout() {
      this.$options.service._setLayout();
    },
    zoomAndHighLightFeature: function zoomAndHighLightFeature(feature) {
      var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      feature.geometry && this.$options.service.zoomAndHighLightFeature(feature, zoom);
    },
    addRemoveSelectedFeature: function addRemoveSelectedFeature(feature) {
      this.$options.service.addRemoveSelectedFeature(feature);
    },
    reloadLayout: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$nextTick();

              case 2:
                dataTable && dataTable.columns.adjust();

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function reloadLayout() {
        return _ref.apply(this, arguments);
      }

      return reloadLayout;
    }(),
    hasHeaders: function hasHeaders() {
      return !!this.state.headers.length;
    },
    createdContentBody: function createdContentBody() {
      var _this = this;

      fieldsComponents = fieldsComponents.filter(function (fieldComponent) {
        fieldComponent.$destroy();
        return false;
      });
      var trDomeElements = dataTable.rows().nodes();

      trDomeElements.each(function (rowElement, index) {
        $(rowElement).css('cursor', 'pointer');
        if (_this.state.features.length) {
          var feature = _this.state.features[index];
          var hasGeometry = !!feature.geometry;
          $(rowElement).addClass('feature_attribute');
          feature.selected && $(rowElement).addClass('selected');
          $(rowElement).on('click', function () {
            return hasGeometry && _this.zoomAndHighLightFeature(feature);
          });
          $(rowElement).on('mouseover', function () {
            return hasGeometry && _this.zoomAndHighLightFeature(feature, false);
          });
          $(rowElement).children().each(function (index, element) {
            var header = _this.state.headers[index];
            var contentDOM = void 0;
            if (header === null) {
              var SelectRowClass = Vue.extend(_selectrow2.default);
              var SelectRowInstance = new SelectRowClass({
                propsData: {
                  feature: feature
                }
              });
              SelectRowInstance.$on('selected', function (feature) {
                return _this.$options.service.addRemoveSelectedFeature(feature);
              });
              _this.$watch(function () {
                return feature.selected;
              }, function (selected) {
                selected ? $(rowElement).addClass('selected') : $(rowElement).removeClass('selected');
              });
              contentDOM = SelectRowInstance.$mount().$el;
            } else {
              var fieldClass = Vue.extend(_g3wField2.default);
              var fieldInstance = new fieldClass({
                propsData: {
                  state: {
                    value: feature.attributes[header.name]
                  }
                }
              });
              fieldInstance.$mount();
              fieldsComponents.push(fieldInstance);
              contentDOM = fieldInstance.$el;
            }
            $(element).html(contentDOM);
          });
        }
      });
      setTimeout(function () {
        return _this.reloadLayout();
      }, 0);
    },
    resize: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var tableHeight, tableHeaderHeight;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.$nextTick();

              case 2:
                tableHeight = $(".content").height();
                tableHeaderHeight = $('#open_attribute_table  div.dataTables_scrollHeadInner').height();

                $('#open_attribute_table  div.dataTables_scrollBody').height(tableHeight - tableHeaderHeight - 130);

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function resize() {
        return _ref2.apply(this, arguments);
      }

      return resize;
    }()
  },
  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
  },
  mounted: function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
      var _this2 = this;

      var hideElements, commonDataTableOptions, debounceSearch, G3WTableToolbarClass, G3WTableToolbarInstance;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              this.setContentKey = GUI.onafter('setContent', this.resize);

              hideElements = function hideElements() {
                $('.dataTables_info, .dataTables_length').hide();
                $('.dataTables_paginate').css({
                  'display': 'flex',
                  'justify-content': 'space-between',
                  'font-size': '0.8em',
                  'margin-top': '5px'
                });
                $('.dataTables_filter').css('float', 'right');
                $('.dataTables_paginate').css('margin', '0');
              };

              _context6.next = 4;
              return this.$nextTick();

            case 4:
              this.first = false;
              commonDataTableOptions = {
                "lengthMenu": this.state.pageLengths,
                "pageLength": this.state.pageLength,
                "scrollX": true,
                "processing": false,
                "scrollCollapse": true,
                "sSearch": false,
                "order": [1, 'asc'],
                "dom": 'l<"#g3w-table-toolbar">frtip',
                "columnDefs": [{
                  "targets": 0,
                  "orderable": false,
                  "searchable": false,
                  "width": '1%'
                }]
              };

              if (this.state.pagination) {
                dataTable = $('#open_attribute_table table').DataTable(_extends({}, commonDataTableOptions, {
                  "columns": this.state.headers,
                  "ajax": debounce(function (data, callback) {
                    var trDomeElements = $('#open_attribute_table table tr');
                    trDomeElements.each(function (element) {
                      $(element).off('click');
                      $(element).off('mouseover');
                    });
                    _this2.$options.service.getData(data).then(function () {
                      var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(serverData) {
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                callback(serverData);
                                _context3.next = 3;
                                return _this2.$nextTick();

                              case 3:
                                _this2.createdContentBody();
                                _this2.isMobile() && hideElements();

                              case 5:
                              case 'end':
                                return _context3.stop();
                            }
                          }
                        }, _callee3, _this2);
                      }));

                      return function (_x2) {
                        return _ref4.apply(this, arguments);
                      };
                    }()).catch(function (error) {
                      console.log(error);
                    });
                  }, 800),
                  "serverSide": true,
                  "deferLoading": this.state.allfeatures
                }));
                this.$options.service.on('ajax-reload', dataTable.ajax.reload);
                this.changeColumn = debounce(function () {
                  var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(event, index) {
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            dataTable.columns(index).search(event.target.value.trim()).draw();

                          case 1:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this2);
                  }));

                  return function (_x3, _x4) {
                    return _ref5.apply(this, arguments);
                  };
                }());
              } else {
                dataTable = $('#open_attribute_table table').DataTable(_extends({}, commonDataTableOptions, {
                  searchDelay: 600
                }));
                debounceSearch = debounce(function () {
                  _this2.$options.service.setFilteredFeature(dataTable.rows({ search: 'applied' })[0]);
                }, 600);

                eventHandlers.nopagination['search.dt'] = debounceSearch;
                dataTable.on('search.dt', debounceSearch);
                dataTable.on('length.dt', function (evt, settings, length) {
                  _this2.$options.service.setAttributeTablePageLength(length);
                });
                this.changeColumn = debounce(function () {
                  var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(event, index) {
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            dataTable.columns(index).search(event.target.value.trim()).draw();
                            _this2.$options.service.setFilteredFeature(dataTable.rows({ search: 'applied' })[0]);

                          case 2:
                          case 'end':
                            return _context5.stop();
                        }
                      }
                    }, _callee5, _this2);
                  }));

                  return function (_x5, _x6) {
                    return _ref6.apply(this, arguments);
                  };
                }());
              }

              this.isMobile() && hideElements();
              G3WTableToolbarClass = Vue.extend(_g3wTableToolbar2.default);
              G3WTableToolbarInstance = new G3WTableToolbarClass({
                propsData: {
                  tools: this.state.tools,
                  geolayer: this.state.geolayer,
                  switchSelection: this.switchSelection,
                  clearAllSelection: this.clearAllSelection,
                  toggleFilterToken: this.toggleFilterToken,
                  getDataFromBBOX: this.getDataFromBBOX
                }
              });

              $('#g3w-table-toolbar').html(G3WTableToolbarInstance.$mount().$el);
              this.$options.service.on('redraw', function (data) {
                dataTable.clear();
                dataTable.draw(false);
                setTimeout(function () {
                  dataTable.rows.add(data);
                  dataTable.draw(false);
                  _this2.createdContentBody();
                  _this2.isMobile() && hideElements();
                });
              });

            case 12:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function mounted() {
      return _ref3.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.$options.service.clear();
    this.$options.service.off('ajax-reload');
    this.$options.service.off('redraw');
    GUI.un('setContent', this.setContentKey);
    dataTable.destroy(true);
    dataTable = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"margin-top":"5px"},attrs:{"id":"open_attribute_table"}},[(_vm.hasHeaders())?_c('table',{ref:"attribute_table",staticClass:"table table-striped row-border compact nowrap",staticStyle:{"width":"100%"},attrs:{"id":"layer_attribute_table"}},[_c('thead',[_c('tr',[_c('th'),_vm._v(" "),_vm._l((_vm.state.headers),function(header,index){return (index > 0)?_c('th',[_c('input',{staticClass:"form-control column-search",staticStyle:{"height":"25px","min-width":"40px","padding":"2px"},attrs:{"type":"text","placeholder":header.name},on:{"keyup":function($event){return _vm.changeColumn($event, index)}}})]):_vm._e()})],2),_vm._v(" "),_c('tr',_vm._l((_vm.state.headers),function(header,index){return _c('th',[(index === 0)?_c('span',[_c('input',{staticClass:"magic-checkbox",attrs:{"type":"checkbox","id":"attribute_table_select_all_rows","disabled":_vm.state.nofilteredrow || _vm.state.features.length === 0},domProps:{"checked":_vm.state.selectAll}}),_vm._v(" "),_c('label',{staticStyle:{"margin-bottom":"0 !important"},attrs:{"for":"attribute_table_select_all_rows"},on:{"!click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.selectAllRow($event)}}},[_c('span',{staticStyle:{"padding":"5px"}})])]):_c('span',[_vm._v(_vm._s(header.label))])])}),0)]),_vm._v(" "),_c('table-body',{attrs:{"headers":_vm.state.headers,"filter":_vm.state.tools.filter,"features":_vm.state.features,"addRemoveSelectedFeature":_vm.addRemoveSelectedFeature,"zoomAndHighLightFeature":_vm.zoomAndHighLightFeature}})],1):_c('div',{directives:[{name:"t",rawName:"v-t",value:('dataTable.no_data'),expression:"'dataTable.no_data'"}],attrs:{"id":"noheaders"}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-e3dc0742"

},{"./components/g3w-table-toolbar.vue":700,"./components/selectrow.vue":701,"./components/tablebody.vue":702,"core/utils/utils":485,"gui/fields/g3w-field.vue":558,"gui/gui":575,"gui/vue/vue.mixins":731,"vueify/lib/insert-css":397}],700:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".action-button[data-v-734384c0]{padding:4px}.action-button.toggled[data-v-734384c0]{border:1px solid #ccc}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "g3w-table-toolbar",
  props: {
    tools: {
      type: Object
    },
    switchSelection: {
      type: Function
    },
    clearAllSelection: {
      type: Function
    },
    toggleFilterToken: {
      type: Function
    },
    getDataFromBBOX: {
      type: Function
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex","justify-content":"space-between","padding":"1px"}},[(_vm.tools.geolayer.show)?_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.show_features_on_map'),expression:"'layer_selection_filter.tools.show_features_on_map'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:[_vm.g3wtemplate.getFontClass('map'), _vm.tools.geolayer.active ? 'toggled' : ''],attrs:{"data-placement":"right","data-toggle":"tooltip"},on:{"click":function($event){$event.stopPropagation();return _vm.getDataFromBBOX($event)}}}):_vm._e(),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.tools.show),expression:"tools.show"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.clear'),expression:"'layer_selection_filter.tools.clear'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:_vm.g3wtemplate.getFontClass('clear'),attrs:{"data-placement":"right","data-toggle":"tooltip"},on:{"click":function($event){$event.stopPropagation();return _vm.clearAllSelection($event)}}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.tools.show),expression:"tools.show"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.invert'),expression:"'layer_selection_filter.tools.invert'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:[_vm.g3wtemplate.getFontClass('invert'), _vm.tools.filter.active ? 'g3w-disabled': ''],attrs:{"data-placement":"right","data-toggle":"tooltip"},on:{"click":function($event){$event.stopPropagation();return _vm.switchSelection($event)}}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.tools.show),expression:"tools.show"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.filter'),expression:"'layer_selection_filter.tools.filter'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:[_vm.g3wtemplate.getFontClass('filter'), _vm.tools.filter.active ? 'toggled' : ''],attrs:{"data-placement":"right","data-toggle":"tooltip"},on:{"click":function($event){$event.stopPropagation();return _vm.toggleFilterToken($event)}}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-734384c0"

},{"vueify/lib/insert-css":397}],701:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _require = require('core/utils/utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: "select-row",
  props: {
    feature: {
      required: true
    }
  },
  data: function data() {
    return {
      id: getUniqueDomId()
    };
  },

  methods: {
    select: function select() {
      this.$emit('selected', this.feature);
    }
  },
  destroyed: function destroyed() {
    this.$off('selected');
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',[_c('input',{staticClass:"magic-checkbox",attrs:{"type":"checkbox","id":_vm.id},domProps:{"checked":_vm.feature.selected}}),_vm._v(" "),_c('label',{attrs:{"for":_vm.id},on:{"!click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.select($event)}}},[_c('span')])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-3ba554f8"

},{"core/utils/utils":485}],702:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _selectrow = require('./selectrow.vue');

var _selectrow2 = _interopRequireDefault(_selectrow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Field = require('gui/fields/g3w-field.vue');
exports.default = {
  name: "table-body",
  props: {
    headers: {
      required: true,
      type: Array
    },
    features: {
      required: true,
      type: Array
    },
    zoomAndHighLightFeature: {
      type: Function
    },
    addRemoveSelectedFeature: {
      type: Function
    },
    filter: {
      type: Object,
      default: {
        active: false
      }
    }
  },
  data: function data() {
    return {
      selectedRow: null
    };
  },

  components: {
    Field: Field,
    SelectRow: _selectrow2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tbody',{attrs:{"id":"table_body_attributes"}},_vm._l((_vm.features),function(feature,index){return _c('tr',{key:feature.id,staticClass:"feature_attribute",class:[index %2 == 1 ? 'odd' : 'pair', {geometry: !!feature.geometry}, {'selected': feature.selected}],staticStyle:{"cursor":"pointer"},attrs:{"role":"row","selected":_vm.selectedRow === index},on:{"mouseover":function($event){return _vm.zoomAndHighLightFeature(feature, false)},"click":function($event){return _vm.zoomAndHighLightFeature(feature, index)}}},_vm._l((_vm.headers),function(header,hindex){return _c('td',{attrs:{"tab-index":1}},[(hindex===0)?_c('select-row',{attrs:{"feature":feature},on:{"selected":_vm.addRemoveSelectedFeature}}):_c('field',{attrs:{"state":{value: feature.attributes[header.name]}}})],1)}),0)}),0)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-8f5670d4"

},{"./selectrow.vue":701,"gui/fields/g3w-field.vue":558}],703:[function(require,module,exports){
var _Table = require('./Table.vue');

var _Table2 = _interopRequireDefault(_Table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var t = require('core/i18n/i18n.service').t;

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var GUI = require('gui/gui');
var Component = require('gui/vue/component');
var TableService = require('../tableservice');


var InternalComponent = Vue.extend(_Table2.default);

var TableComponent = function TableComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this.id = "openattributetable";
  var layer = options.layer;
  var formatter = options.formatter;
  var service = options.service || new TableService({
    layer: layer,
    formatter: formatter
  });

  this.setService(service);
  var internalComponent = new InternalComponent({
    service: service
  });

  this.setInternalComponent(internalComponent);
  internalComponent.state = service.state;

  service.on('redraw', function () {
    _this.layout();
  });

  this.unmount = function () {
    return base(this, 'unmount');
  };

  this.layout = function () {
    internalComponent.reloadLayout();
  };
};

inherit(TableComponent, Component);

var proto = TableComponent.prototype;

// overwrite show method
proto.show = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var service = this.getService();
  // close all sidebar open component
  GUI.closeOpenSideBarComponent();
  service.getData({ firstCall: true }).then(function () {
    GUI.showContent({
      content: _this2,
      perc: 50,
      split: GUI.isMobile() ? 'h' : 'v',
      push: false,
      title: options.title
    });
  }).catch(function (err) {
    return GUI.notify.error(t("info.server_error"));
  }).finally(function () {
    return _this2.emit('show');
  });
};

proto.unmount = function () {
  var _this3 = this;

  return base(this, 'unmount').then(function () {
    _this3._service.clear();
  });
};

module.exports = TableComponent;

},{"../tableservice":698,"./Table.vue":699,"core/i18n/i18n.service":418,"core/utils/utils":485,"gui/gui":575,"gui/vue/component":718}],704:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".group[data-v-fa58cfa4]{padding:5px;margin-bottom:10px}.sub-group[data-v-fa58cfa4]{border-radius:5px}.title[data-v-fa58cfa4]{font-weight:700;width:100%;color:#fff;padding:5px;border-radius:2px}.group-title.mobile[data-v-fa58cfa4]{margin-top:5px;margin-bottom:5px}.row[data-v-fa58cfa4]{margin-bottom:5px}.row.mobile[data-v-fa58cfa4]{margin-bottom:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _g3wInput = require('../inputs/g3w-input.vue');

var _g3wInput2 = _interopRequireDefault(_g3wInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Fields = require('gui/fields/fields');
var ProjectRegistry = require('core/project/projectsregistry');
var GUI = require('gui/gui');
var COLUMNCLASSES = {
  1: 'col-md-12',
  2: 'col-md-6',
  3: 'col-md-4',
  4: 'col-md-3',
  5: 'col-md-2',
  6: 'col-md-2',
  7: 'col-md-1',
  8: 'col-md-1',
  9: 'col-md-1',
  10: 'col-md-1',
  11: 'col-md-1',
  12: 'col-md-1'
};
exports.default = {
  name: "node",
  props: ['contenttype', 'node', 'fields', 'showTitle', 'addToValidate', 'changeInput', 'layerid', 'feature'],
  components: _extends({
    G3wInput: _g3wInput2.default
  }, Fields),
  data: function data() {
    return {
      context: this.contenttype,
      editing_required: false
    };
  },

  computed: {
    filterNodes: function filterNodes() {
      var _this = this;

      var filterNodes = this.node.nodes && this.node.nodes.filter(function (node) {
        if (_this.getNodeType(node) === 'group') {
          return true;
        } else if (!node.nodes && node.name && _this.getNodeType(node) != 'group') {
          node.relation = true;
          return true;
        } else {
          return !!_this.fields.find(function (field) {
            var field_name = node.field_name ? node.field_name.replace(/ /g, "_") : node.field_name;
            return field.name === field_name || node.relation;
          });
        }
      });
      return filterNodes || [];
    },
    nodesLength: function nodesLength() {
      return this.filterNodes.length;
    },
    rows: function rows() {
      var rowCount = 1;
      if (this.nodesLength === 0) rowCount = 0;else if (this.columnNumber <= this.nodesLength) {
        var rest = this.nodesLength % this.columnNumber;
        rowCount = Math.floor(this.nodesLength / this.columnNumber) + rest;
      }
      return rowCount;
    },
    columnClass: function columnClass() {
      return COLUMNCLASSES[this.columnNumber] + ' ' + (this.isMobile() ? 'mobile' : '');
    },
    columnNumber: function columnNumber() {
      var columnCount = parseInt(this.node.columncount) ? parseInt(this.node.columncount) : 1;
      return columnCount > this.nodesLength ? this.nodesLength : columnCount;
    },
    showGroupTile: function showGroupTile() {
      return this.showTitle && this.node.showlabel && this.node.groupbox;
    }
  },
  methods: {
    getRelationName: function getRelationName(relationId) {
      var relation = ProjectRegistry.getCurrentProject().getRelationById(relationId);
      return relation && relation.name;
    },
    showRelation: function showRelation(relationId) {
      var relation = ProjectRegistry.getCurrentProject().getRelationById(relationId);
      var RelationPage = require('gui/relations/vue/relationspage');
      GUI.pushContent({
        content: new RelationPage({
          currentview: 'relations',
          relations: [relation],
          chartRelationIds: [relation.referencingLayer],
          feature: this.feature,
          layer: {
            id: this.layerid
          }
        }),
        perc: 100,
        closable: false
      });
    },
    getNodes: function getNodes(row) {
      var startIndex = (row - 1) * this.columnNumber;
      return this.filterNodes.slice(startIndex, this.columnNumber + startIndex);
    },
    getNode: function getNode(row, column) {
      return this.getNodes(row)[column - 1];
    },
    getField: function getField(node) {
      if (node.relation) return node;
      var field = this.fields.find(function (field) {
        var field_name = node.field_name ? node.field_name.replace(/ /g, "_") : node.field_name;
        return field.name === field_name;
      });
      return field;
    },
    getNodeType: function getNodeType(node) {
      var type = node.groupbox || node.nodes ? 'group' : node.relation ? 'relation' : 'field';
      if (type === 'field' && (node.alias === undefined || node.alias === '')) {
        node.alias = node.field_name;
      }
      return type;
    },
    getComponent: function getComponent(field) {
      if (field.relation) return;else if (field.query) return field.input.type;else return 'g3w-input';
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tab-node group"},[(_vm.showGroupTile)?_c('h5',{staticClass:"title group-title",class:{'mobile': _vm.isMobile()},style:({fontSize: _vm.isMobile() ? '1em' : '1.1em'})},[_vm._v(_vm._s(_vm.node.name))]):_vm._e(),_vm._v(" "),_vm._l((_vm.rows),function(row){return _c('div',{staticClass:"row",class:{'mobile': _vm.isMobile()}},_vm._l((_vm.columnNumber),function(column){return _c('div',{class:_vm.columnClass},[(_vm.getNode(row, column))?[(_vm.getNodeType(_vm.getNode(row, column)) === 'field')?_c(_vm.getComponent(_vm.getField(_vm.getNode(row, column))),{tag:"component",attrs:{"state":_vm.getField(_vm.getNode(row, column)),"changeInput":_vm.changeInput,"addToValidate":_vm.addToValidate},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate}}):[(_vm.getNodeType(_vm.getNode(row, column)) === 'group')?_c('div',{staticClass:"sub-group"},[_c('node',{attrs:{"feature":_vm.feature,"layerid":_vm.layerid,"contenttype":_vm.contenttype,"fields":_vm.fields,"showTitle":true,"changeInput":_vm.changeInput,"addToValidate":_vm.addToValidate,"node":_vm.getNode(row, column)},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate}})],1):[(_vm.context === 'query')?_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.getRelationName(_vm.getNode(row, column).name) === undefined),expression:"getRelationName(getNode(row, column).name) === undefined"}],staticStyle:{"cursor":"pointer"},on:{"click":function($event){_vm.showRelation(_vm.getNode(row, column).name)}}},[_c('div',{staticClass:"query_relation_field"},[_c('i',{class:_vm.g3wtemplate.font['relation']})]),_vm._v(" "),_c('span',[_c('span',{staticClass:"query_relation_field_message"},[_c('span'),_vm._v(" "),_c('span',{staticStyle:{"text-transform":"uppercase"}},[_vm._v(" "+_vm._s(_vm.getRelationName(_vm.getNode(row, column).name)))])])])]):[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.form.messages.qgis_input_widget_relation'),expression:"'sdk.form.messages.qgis_input_widget_relation'"}],staticClass:"form_editing_relation_input"},[_c('span',{staticClass:"info_helptext_button"},[_vm._v("i")])])]]]]:_vm._e()],2)}),0)})],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-fa58cfa4"

},{"../inputs/g3w-input.vue":592,"core/project/projectsregistry":478,"gui/fields/fields":557,"gui/gui":575,"gui/relations/vue/relationspage":683,"vueify/lib/insert-css":397}],705:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".formquerytabs[data-v-0adeffaa]{overflow:hidden!important;display:flex;flex-wrap:wrap}.formquerytabs>li[data-v-0adeffaa]{flex:1;display:flex}.formquerytabs>li>a[data-v-0adeffaa]{font-weight:700;flex:1}.tab-content[data-v-0adeffaa]{margin-top:10px}.nav-tabs>li>a.mobile[data-v-0adeffaa]{padding:5px 10px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _node = require("./node.vue");

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getUniqueDomId = require('core/utils/utils').getUniqueDomId;
exports.default = {
  name: "tabs",
  props: {
    contenttype: {
      default: 'query' },
    layerid: {
      required: true
    },
    tabs: {
      required: true
    },
    feature: {
      required: true
    },
    fields: {
      required: true
    },
    addToValidate: Function,
    changeInput: Function
  },
  data: function data() {
    return {
      ids: []
    };
  },

  computed: {
    required_fields: function required_fields() {
      return this.contenttype === 'editing' && this.fields.filter(function (field) {
        return field.validate.required;
      }).map(function (field) {
        return field.name;
      });
    }
  },
  methods: {
    setEditingRequireTab: function setEditingRequireTab(obj) {
      var _this = this;

      var required = false;
      if (obj.nodes === undefined) {
        required = this.required_fields.indexOf(obj.field_name) !== -1;
      } else required = !!obj.nodes.find(function (node) {
        return _this.setEditingRequireTab(node);
      });
      return required;
    },
    getField: function getField(fieldName) {
      return this.fields.find(function (field) {
        return field.name === fieldName;
      });
    }
  },
  components: {
    Node: _node2.default
  },
  created: function created() {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tab = _step.value;

        if (this.contenttype === 'editing' && tab.required === undefined) {
          tab.required = this.setEditingRequireTab(tab);
        }
        this.ids.push("tab_" + getUniqueDomId());
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tabs-wrapper"},[_c('ul',{staticClass:"formquerytabs nav nav-tabs"},_vm._l((_vm.tabs),function(tab,index){return _c('li',{class:{active: index === 0}},[_c('a',{class:{'mobile': _vm.isMobile()},style:({fontSize: _vm.isMobile() ? '1.0em': '1.2em'}),attrs:{"data-toggle":"tab","href":'#'+ _vm.ids[index]}},[_vm._v("\n        "+_vm._s(tab.name)+" "),(_vm.contenttype === 'editing' && tab.required)?_c('span',{staticStyle:{"padding-left":"3px","font-size":"1.1em"}},[_vm._v("*")]):_vm._e()])])}),0),_vm._v(" "),_c('div',{staticClass:"tab-content"},_vm._l((_vm.tabs),function(tab,index){return _c('div',{key:_vm.ids[index],staticClass:"tab-pane fade",class:{'in active': index === 0},attrs:{"id":_vm.ids[index]}},[_c('node',{attrs:{"feature":_vm.feature,"layerid":_vm.layerid,"contenttype":_vm.contenttype,"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput,"fields":_vm.fields,"showTitle":false,"node":tab}})],1)}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0adeffaa"

},{"./node.vue":704,"core/utils/utils":485,"vueify/lib/insert-css":397}],706:[function(require,module,exports){
module.exports = "<div class=\"error-initial-page skin-background-color\">\n  <template v-if=\"isMobile()\">\n    <h3 class=\"oops\">Oops!</h3>\n    <h5 class=\"cause\">{{messages.error}}</h5>\n    <h6 class=\"at-moment\">{{ messages.at_moment }}</h6>\n    <h4 class=\"f5\">{{ messages.f5}}</h4>\n  </template>\n  <template v-else>\n    <h1 class=\"oops\">Oops!</h1>\n    <h1 class=\"cause\">{{messages.error}}</h1>\n    <h3 class=\"at-moment\">{{ messages.at_moment }}</h3>\n    <h2 class=\"f5\">{{ messages.f5}}</h2>\n  </template>\n\n</div>\n";

},{}],707:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var ProjectRegistry = require('core/project/projectsregistry');
var G3WObject = require('core/g3wobject');

function Service() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = null;
  this.state = _extends({}, options, {
    toolsGroups: [],
    visible: false,
    loading: false
  });
  this.setters = {
    addTool: function addTool(tool, groupName) {
      tool.state = tool.state ? tool.state : {
        type: null,
        message: null
      };
      return this._addTool(tool, groupName);
    },
    addTools: function addTools(tools, groupName) {
      return this._addTools(tools, groupName);
    },
    addToolGroup: function addToolGroup(order, name) {
      return this._addToolGroup(order, name);
    },
    removeToolGroup: function removeToolGroup(name) {
      return this._removeToolGroup(name);
    },
    removeTools: function removeTools() {
      return this._removeTools();
    }
  };

  base(this);

  var project = ProjectRegistry.getCurrentProject();

  var _project$getState = project.getState(),
      _project$getState$too = _project$getState.tools,
      tools = _project$getState$too === undefined ? {} : _project$getState$too;

  var _loop = function _loop(toolName) {
    var groupName = toolName.toUpperCase();
    _this.addToolGroup(0, groupName);
    var _tools = tools[toolName].map(function (tool) {
      return {
        name: tool.name,
        action: ToolsService.ACTIONS[toolName].bind(null, tool)
      };
    });
    _this.addTools(_tools, { position: 0, title: groupName });
  };

  for (var toolName in tools) {
    _loop(toolName);
  }
}

inherit(Service, G3WObject);

var proto = Service.prototype;

proto.reload = function () {
  this.removeTools();
};

proto._addTool = function (tool, _ref) {
  var order = _ref.position,
      name = _ref.title;

  var group = this._addToolGroup(order, name);
  if (tool.action === undefined && tool.type) tool.action = Service.ACTIONS[tool.type] ? Service.ACTIONS[tool.type].bind(null, tool.options) : function () {};
  group.tools.push(tool);
};

proto._addTools = function (tools, groupName) {
  var _this2 = this;

  tools.forEach(function (tool) {
    return _this2.addTool(tool, groupName);
  });
};

proto.setLoading = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.loading = bool;
};

proto._removeTool = function (toolIdx) {
  this.state.toolsGroups = this.state.toolsGroups.splice(toolIdx, 1);
};

proto._removeTools = function () {
  this.state.toolsGroups.splice(0);
};

proto.updateToolsGroup = function (order, groupConfig) {
  Vue.set(this.state.toolsGroups, order, groupConfig);
};

proto.getState = function () {
  return this.state;
};

proto._removeToolGroup = function (name) {
  this.state.toolsGroups = this.state.toolsGroups.filter(function (group) {
    return group.name !== name;
  });
};

proto._addToolGroup = function (order, name) {
  var group = this.state.toolsGroups.find(function (_group) {
    return _group.name === name;
  });
  if (!group) {
    group = {
      name: name,
      tools: []
    };
    this.state.toolsGroups.splice(order, 0, group);
  }
  return group;
};

proto.setToolState = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref2.id,
      _ref2$state = _ref2.state,
      state = _ref2$state === undefined ? { type: null, message: null } : _ref2$state;

  this.state.toolsGroups.find(function (toolGroup) {
    var tool = toolGroup.tools.find(function (tool) {
      return tool.name === id;
    });
    if (tool) {
      tool.state.type = state.type;
      tool.state.message = state.message;
      return true;
    }
  });
};

Service.ACTIONS = {};

module.exports = Service;

},{"core/g3wobject":415,"core/project/projectsregistry":478,"core/utils/utils":485}],708:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".tool_disabled[data-v-64c8f30a]{cursor:not-allowed}.tool_disabled>span[data-v-64c8f30a]{color:#777}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var AppState = require('core/applicationservice').getState();
var GUI = require('gui/gui');
var TOOLSTATE = {
  alert: {
    color: 'red'
  },
  info: {
    color: 'blue'
  },
  warning: {
    color: 'orange'
  }
};
exports.default = {
  name: "g3w-tool",
  props: {
    tool: {
      required: true
    }
  },
  data: function data() {
    return {};
  },

  methods: {
    fireAction: function fireAction(tool) {
      this.tool.action(tool);
    },
    showToolStateMessage: function showToolStateMessage() {
      GUI.showModalDialog({
        title: this.tool.state.type.toUpperCase(),
        message: this.tool.state.message
      });
    }
  },
  computed: {
    disabled: function disabled() {
      return !this.tool.offline && !AppState.online || this.tool.loading || this.tool.disabled;
    },
    icon: function icon() {
      return this.tool.icon || 'caret-right';
    },
    toolstatecolor: function toolstatecolor() {
      return TOOLSTATE[this.tool.state.type].color;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.tool.type === 'checkbox' )?_c('div',{staticClass:"checkbox"},[_c('label',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.tool.isCheck),expression:"tool.isCheck"}],staticStyle:{"cursor":"pointer"},attrs:{"id":_vm.tool.layerName,"type":"checkbox"},domProps:{"value":_vm.tool.layerName,"checked":Array.isArray(_vm.tool.isCheck)?_vm._i(_vm.tool.isCheck,_vm.tool.layerName)>-1:(_vm.tool.isCheck)},on:{"click":function($event){return _vm.fireAction(_vm.tool)},"change":function($event){var $$a=_vm.tool.isCheck,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=_vm.tool.layerName,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.$set(_vm.tool, "isCheck", $$a.concat([$$v])))}else{$$i>-1&&(_vm.$set(_vm.tool, "isCheck", $$a.slice(0,$$i).concat($$a.slice($$i+1))))}}else{_vm.$set(_vm.tool, "isCheck", $$c)}}}}),_vm._v("\n      "+_vm._s(_vm.tool.name)+"\n    ")])]):_c('div',{staticClass:"tool",class:{tool_disabled: _vm.disabled},staticStyle:{"position":"relative"},on:{"click":function($event){!_vm.disabled ? _vm.fireAction(_vm.tool) : null}}},[_c('bar-loader',{attrs:{"loading":_vm.tool.loading}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass(_vm.icon)}),_vm._v(" "),(_vm.tool.html)?_c('span',[_c('i',{class:_vm.tool.html.icon}),_vm._v("\n      "+_vm._s(_vm.tool.html.text || _vm.tool.name)+"\n    ")]):_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.tool.name),expression:"tool.name"}]}),_vm._v(" "),(_vm.tool.state.type)?_c('span',{staticStyle:{"cursor":"pointer","vertical-align":"center","position":"absolute","right":"0","top":"0","padding":"5px"},style:({color: _vm.toolstatecolor}),on:{"click":function($event){$event.stopPropagation();return _vm.showToolStateMessage($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass(_vm.tool.state.type)})]):_vm._e()],1)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-64c8f30a"

},{"core/applicationservice":401,"gui/gui":575,"vueify/lib/insert-css":397}],709:[function(require,module,exports){
module.exports = "<ul class=\"g3w-tools treeview-menu\">\n  <bar-loader :loading=\"state.loading\"></bar-loader>\n  <li v-for=\"group in state.toolsGroups\" :key=\"group.name\">\n    <div class=\"tool-header\">\n      <i :class=\"g3wtemplate.getFontClass('tool')\"></i>\n      <span style=\"\">{{ group.name }}</span>\n    </div>\n    <div :id=\"group.name + '-tools'\" class=\"tool-box\">\n      <g3w-tool v-for=\"tool in group.tools\" :key=\"tool.name\" :tool=\"tool\"></g3w-tool>\n    </div>\n  </li>\n</ul>\n";

},{}],710:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('gui/vue/utils');

var _tool = require('./tool.vue');

var _tool2 = _interopRequireDefault(_tool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var GUI = require('gui/gui');
var Component = require('gui/vue/component');
var ToolsService = require('gui/tools/service');
var compiledTemplate = (0, _utils.createCompiledTemplate)(require('./tools.html'));
var InternalComponent = Vue.extend(_extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: null
    };
  },
  watch: {
    'state.toolsGroups': {
      handler: function handler(groups) {
        this.$emit('visible', groups.length > 0);
      }
    }
  },
  components: {
    G3wTool: _tool2.default
  }
}));

function ToolsComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._service = new ToolsService(options);
  this.title = "tools";

  var internalComponent = new InternalComponent({
    toolsService: this._service
  });

  internalComponent.state = this._service.state;
  this.setInternalComponent(internalComponent, {
    events: [{ name: 'visible' }]
  });

  this._setOpen = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.internalComponent.state.open = bool;
    bool && GUI.closeContent();
  };
}

inherit(ToolsComponent, Component);

module.exports = ToolsComponent;

},{"./tool.vue":708,"./tools.html":709,"core/utils/utils":485,"gui/gui":575,"gui/tools/service":707,"gui/vue/component":718,"gui/vue/utils":727}],711:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".usermessage-content[data-v-39b8719b]{color:#fff;z-index:1000;position:absolute;line-height:normal;padding:10px;min-width:250px;box-shadow:0 3px 5px rgba(0,0,0,.3);-moz-box-shadow:0 3px 5px rgba(0,0,0,.3)}.usermessage-content.mobile[data-v-39b8719b]{padding:0;min-width:100%}.usermessage-header-content[data-v-39b8719b]{display:flex;align-items:baseline;justify-content:space-between;width:100%}.usermessage-header-icontype[data-v-39b8719b]{padding:10px 0 0 5px;font-weight:700;font-size:1.3em}.usermessage-content.mobile .usermessage-header-icontype[data-v-39b8719b]{padding:0 0 0 5px;font-size:1.1em}.usermessage-header-title[data-v-39b8719b],.usermessage-header-title h4[data-v-39b8719b]{font-weight:700}.usermessage-content.mobile .usermessage-header-title h4[data-v-39b8719b]{margin:3px}.usermessage-header-right[data-v-39b8719b]{padding:5px}.usermessage-header-right-item[data-v-39b8719b]{font-weight:700!important;font-size:1.2em;cursor:pointer}.usermessage-message[data-v-39b8719b]{width:100%;padding:5px;max-height:100px;font-weight:700;font-size:1.1em;align-self:flex-start;overflow-y:auto}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GUI = require('gui/gui');
var COLORS = {
  success: {
    backgroundColor: '#62ac62',
    color: '#FFFFFF'
  },
  info: {
    backgroundColor: '#44a0bb',
    color: '#FFFFFF'
  },
  warning: {
    backgroundColor: '#f29e1d',
    color: '#FFFFFF'
  },
  alert: {
    backgroundColor: '#c34943',
    color: '#FFFFFF'
  },
  tool: {
    backgroundColor: '#FFFFFF',
    color: "#222d32"
  }
};
exports.default = {
  name: "usermessage",
  props: {
    type: {
      type: String,
      default: 'info' },
    title: {
      type: String,
      default: null
    },
    position: {
      type: String,
      default: 'top'
    },
    size: {
      type: 'String',
      default: null
    },
    message: {
      type: String,
      default: ''
    },
    textMessage: {
      type: Boolean,
      default: false
    },
    autoclose: {
      type: Boolean,
      default: false
    },
    draggable: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 2000
    },
    closable: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    addClassMobile: function addClassMobile() {
      return this.isMobile() && !GUI.isSidebarVisible();
    },
    closeUserMessage: function closeUserMessage() {
      this.$emit('close-usermessage');
    },
    hideShow: function hideShow() {}
  },
  created: function created() {
    var _position$split = this.position.split('-'),
        _position$split2 = _slicedToArray(_position$split, 2),
        where = _position$split2[0],
        alignement = _position$split2[1];

    var width = '100%';
    switch (this.size) {
      case 'small':
        width = '25%';
        break;
      case 'medium':
        width = '50%';
        break;
      default:
        width = '100%';
    }
    if (where === 'center') where = {
      top: 0,
      bottom: 0,
      maxHeight: '20%'
    };else {
      where = _defineProperty({}, where, 50);
    }
    var position = _extends({}, where, {
      width: width
    });
    if (alignement) {
      position.width = '25%';
      switch (alignement) {
        case 'center':
          position.left = '0';
          position.right = '0';
          position.margin = 'auto';
          break;
        case 'right':
          position.right = 0;
          break;
      }
    }
    this.style = _extends({}, COLORS[this.type], position);
  },
  mounted: function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
      var _this = this;

      var timeout;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.autoclose) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return this.$nextTick();

            case 3:
              timeout = setTimeout(function () {
                _this.closeUserMessage();
                clearTimeout(timeout);
              }, this.duration);

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"usermessage-content",class:{'mobile': _vm.addClassMobile()},style:(_vm.style)},[_c('div',{staticClass:"usermessage-header-content"},[_c('i',{staticClass:"usermessage-header-icontype",class:_vm.g3wtemplate.getFontClass(_vm.type)}),_vm._v(" "),_c('div',{staticClass:"usermessage-header-title"},[_vm._t("header",[(_vm.title)?_c('h4',{directives:[{name:"t",rawName:"v-t",value:(_vm.title),expression:"title"}]}):_c('h4',[_vm._v(" "+_vm._s(_vm.type.toUpperCase()))])])],2),_vm._v(" "),_c('div',{staticClass:"usermessage-header-right"},[(!_vm.autoclose && _vm.closable)?_c('div',{on:{"click":_vm.closeUserMessage}},[_c('i',{staticClass:"usermessage-header-right-item",class:_vm.g3wtemplate.getFontClass('close')})]):_vm._e()])]),_vm._v(" "),_vm._t("body",[(_vm.textMessage)?_c('div',{staticClass:"usermessage-message"},[_vm._v(_vm._s(_vm.message))]):_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.message),expression:"message"}],staticClass:"usermessage-message"})]),_vm._v(" "),_vm._t("footer")],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-39b8719b"

},{"gui/gui":575,"vueify/lib/insert-css":397}],712:[function(require,module,exports){
var _require = require('core/utils/utils'),
    resolve = _require.resolve,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var Component = require('gui/vue/component');
var Panel = require('gui/panel');

//Barstack Class
// It used to mount panels stack
// on top of each parent
function BarStack() {
  this._parent = null;
  // barstack state. It store the panels array
  this.state = {
    contentsdata: []
  };
}

inherit(BarStack, G3WObject);

var proto = BarStack.prototype;

// push componenet on top of parent
proto.push = function (content) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // parent identify the DOM element where insert (append o meno) the component/panel
  this._parent = options.parent;
  // call barstack mount method
  return this._mount(content, options);
};

// remove last component from stack
proto.pop = function () {
  var _this = this;

  var d = $.Deferred();
  if (this.state.contentsdata.length) {
    var content = this.state.contentsdata.slice(-1)[0].content;
    this._unmount(content).then(function () {
      var content = _this.state.contentsdata.pop();
      d.resolve(content);
    });
  } else d.resolve();
  return d.promise();
};

// clear all stack
proto.clear = function () {
  var _this2 = this;

  var d = $.Deferred();
  if (this.state.contentsdata.length) {
    var unmountRequests = [];
    this.state.contentsdata.forEach(function (data) {
      unmountRequests.push(_this2._unmount(data.content));
    });
    $.when(unmountRequests).then(function () {
      _this2.state.contentsdata.splice(0, _this2.state.contentsdata.length);
      d.resolve();
    });
  } else d.resolve();
  return d.promise();
};

proto.getContentData = function () {
  return this.state.contentsdata;
};

proto.getCurrentContentData = function () {
  return this.state.contentsdata[this.state.contentsdata.length - 1];
};

proto.getPreviousContentData = function () {
  return this.state.contentsdata[this.state.contentsdata.length - 2];
};

// mount component
proto._mount = function (content, options) {
  // check the type of content:
  // JQuery type
  if (content instanceof jQuery) return this._setJqueryContent(content);
  //String
  else if (_.isString(content)) {
      var jqueryEl = $(content);
      if (!jqueryEl.length) jqueryEl = $('<div>' + content + '</div>');
      return this._setJqueryContent(jqueryEl);
    }
    // Vue
    else if (content.mount && typeof content.mount == 'function') {
        this._checkDuplicateVueContent(content); // if already exist it removed before
        return this._setVueContent(content, options);
      }
      // DOM
      else return this._setDOMContent(content);
};

// JQuery append jQuery component
proto._setJqueryContent = function (content, options) {
  $(this._parent).append(content);
  this.state.contentsdata.push({
    content: content,
    options: options
  });
  return resolve();
};

//Append DOM element
proto._setDOMContent = function (content, options) {
  this._parent.appendChild(content);
  this.state.contentsdata.push({
    content: content,
    options: options
  });
  return resolve();
};

// Mount component to parent
proto._setVueContent = function (content) {
  var _this3 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var d = $.Deferred();
  var append = options.append || false;
  content.mount(this._parent, append).then(function () {
    $(_this3._parent).localize();
    // Insert the content into the array with the following attributes:
    // content: component object
    // options: es. title, perc etc ...
    _this3.state.contentsdata.push({
      content: content,
      options: options
    });
    d.resolve(content);
  });
  return d.promise();
};

// Check duplicate Vue Content
proto._checkDuplicateVueContent = function (content) {
  var _this4 = this;

  var idxToRemove = null;
  var id = content.getId();
  this.state.contentsdata.forEach(function (data, idx) {
    if (data.content.getId && data.content.getId() == id) idxToRemove = idx;
  });
  if (!_.isNull(idxToRemove)) {
    var data = this.state.contentsdata[idxToRemove];
    data.content.unmount().then(function () {
      return _this4.state.contentsdata.splice(idxToRemove, 1);
    });
  }
};

// unmount component
proto._unmount = function (content) {
  var d = $.Deferred();
  if (content instanceof Component || content instanceof Panel) {
    content.unmount().then(function () {
      return d.resolve();
    });
  } else {
    $(this._parent).empty();
    d.resolve();
  }
  return d.promise();
};

proto.forEach = function (cbk) {
  this.state.contentsdata.forEach(function (data) {
    return cbk(data.content);
  });
};

// Get lenght / numbero of element stored in stack
proto.getLength = function () {
  return this.state.contentsdata.length;
};

module.exports = BarStack;

},{"core/g3wobject":415,"core/utils/utils":485,"gui/panel":653,"gui/vue/component":718}],713:[function(require,module,exports){
module.exports = {
  barstack: require('./barstack')
};

},{"./barstack":712}],714:[function(require,module,exports){
module.exports = "<div id=\"contents\" class=\"contents\"></div>\n";

},{}],715:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var Stack = require('gui/utils/utils').barstack;
var Component = require('gui/vue/component');
var compiledTemplate = Vue.compile(require('./contentsviewer.html'));

// Internal Component (VUE) of the content of the  viewport
var InternalComponent = Vue.extend(_extends({}, compiledTemplate, {
  data: function data() {
    return {
      state: null
    };
  }
}));

function ContentsViewerComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.stack = new Stack();
  this.setService(this);
  this.title = "contents";
  this.contentsdata = this.stack.state.contentsdata;
  this.state.visible = true;
  var internalComponent = new InternalComponent({
    service: this
  });
  this.setInternalComponent(internalComponent);
  this.internalComponent.state = this.state;
}

inherit(ContentsViewerComponent, Component);

var proto = ContentsViewerComponent.prototype;

proto.setContent = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var push = options.push || false;
  var content = options.content;
  // clean the stack every time, sure to have just one component.
  // Use barstack because it handle the logic og mounting component on DOM
  if (!push) {
    // clear stack
    this.clearContents().then(function () {
      _this.addContent(content, options).then(function () {
        return d.resolve(options);
      });
    });
  } else {
    this.addContent(content, options).then(function () {
      return d.resolve(options);
    });
  }
  this.setOpen(true);
  return d.promise();
};

proto.addContent = function (content) {
  var _this2 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var d = $.Deferred();
  // parent element is the internal element
  options.parent = this.internalComponent.$el;
  options.append = true;
  var promise = this.stack.push(content, options);
  promise.then(function () {
    // get stack content
    _this2.contentsdata = _this2.stack.state.contentsdata;
    // update the visibility of the others components
    _this2.updateContentVisibility();
    d.resolve();
  });
  return d.promise();
};

// remove content from stack
proto.removeContent = function () {
  this.setOpen(false);
  return this.clearContents();
};

// used by  viewport.js
proto.popContent = function () {
  var _this3 = this;

  return this.stack.pop().then(function () {
    // update the content of contentsdata only after stack is updated
    _this3.contentsdata = _this3.stack.state.contentsdata;
    _this3.updateContentVisibility();
  });
};

// get component through class
proto.getComponentByClass = function (componentClass) {
  var component = void 0;
  var contentdata = this.stack.getContentData();
  contentdata.forEach(function (content) {
    if (content.content instanceof componentClass) {
      component = content.content;
      return false;
    }
  });
  return component;
};

// get component by component id
proto.getComponentById = function (id) {
  var component = void 0;
  var contentdata = this.stack.getContentData();
  contentdata.forEach(function (content) {
    if (content.content.id == id) {
      component = content.content;
      return false;
    }
  });
  return component;
};

proto.getContentData = function () {
  return this.stack.getContentData();
};

// get current contentdata
proto.getCurrentContentData = function () {
  return this.stack.getCurrentContentData();
};

// get  previuos contentdata
proto.getPreviousContentData = function () {
  return this.stack.getPreviousContentData();
};

// update visibility of the components of content
proto.updateContentVisibility = function () {
  // hide each elements but not the last one
  var contentsEls = $(this.internalComponent.$el).children();
  contentsEls.hide();
  contentsEls.last().show();
};

// stack clear because if we want the contentComponente stack
// it has to be empty stack
proto.clearContents = function () {
  var _this4 = this;

  return this.stack.clear().then(function () {
    return _this4.contentsdata = _this4.stack.state.contentsdata;
  });
};

// Set layout of the content each time
// Parameters are: height and with of the parent content
proto.layout = function (parentWidth, parentHeight) {
  var _this5 = this;

  var el = $(this.internalComponent.$el);
  //run the callback only after that vue state is updated
  Vue.nextTick(function () {
    var contentsdata = _this5.stack.state.contentsdata;
    // el.parent() is div g3w-view-content
    var height = el.parent().height() - el.siblings('.close-panel-block').outerHeight(true) - 10; // margin 10 from bottom
    el.height(height);
    el.children().first().height(height);
    contentsdata.forEach(function (data) {
      //check each componentstored in stack
      if (typeof data.content.layout == 'function') {
        //call function layout of each component that are stored into the stack
        data.content.layout(parentWidth + 0.5, height);
      }
    });
  });
};

module.exports = ContentsViewerComponent;

},{"./contentsviewer.html":714,"core/utils/utils":485,"gui/utils/utils":713,"gui/vue/component":718}],716:[function(require,module,exports){
module.exports = "<div class=\"g3w-viewport\">\n  <transition name=\"fade\" :duration=\"{ enter: 800, leave: 500 }\">\n    <user-message\n            v-if=\"usermessage.show\"\n            @close-usermessage=\"closeUserMessage\"\n            :title=\"usermessage.title\"\n            :message=\"usermessage.message\"\n            :draggable=\"usermessage.draggable\"\n            :closable=\"usermessage.closable\"\n            :position=\"usermessage.position\"\n            :autoclose=\"usermessage.autoclose\"\n            :textMessage=\"usermessage.textMessage\"\n            :size=\"usermessage.size\"\n            :type=\"usermessage.type\">\n      <template v-if=\"hooks.header\" v-slot:header>\n        <component :is=\"hooks.header\"></component>\n      </template>\n      <template v-if=\"hooks.body\" v-slot:body>\n        <component :is=\"hooks.body\"></component>\n      </template>\n      <template v-if=\"hooks.footer\" v-slot:footer>\n        <component :is=\"usermessage.hooks.footer\"></component>\n      </template>\n    </user-message>\n  </transition>\n  <div id=\"g3w-view-map\" :class=\"`split-${state.split}`\" class=\"g3w-view map\" :style=\"styles.map\">\n    <g3w-resize id=\"resize-map-and-content\" :show=\"showresize\"\n      :moveFnc=\"moveFnc\"\n      :orientation=\"state.split\"\n      :style=\"{backgroundColor:'transparent'}\"\n      :class=\"`split-${state.split}`\"></g3w-resize>\n    <div id=\"application-notifications\">\n      <online-notify></online-notify>\n      <download-notify></download-notify>\n      <plugins-notify></plugins-notify>\n    </div>\n  </div>\n  <div id=\"g3w-view-content\" :class=\"`split-${state.split}`\" class=\"g3w-view content\" :style=\"styles.content\">\n    <div v-if=\"(showtitle && contentTitle) || previousTitle || (state.content.closable && state.content.aside)\" class=\"close-panel-block\">\n      <div v-if=\"previousTitle\" class=\"g3w_contents_back\">\n        <div :class=\"backOrBackTo\" v-if =\"backOrBackTo === 'back'\">\n          <span class=\"action-button\" :class=\"g3wtemplate.getFontClass('back')\"></span>\n          <span v-t=\"'back'\"></span>\n        </div>\n        <div @click=\"gotoPreviousContent()\" :class=\"backOrBackTo\" v-else>\n          <span class=\"action-button\" :class=\"g3wtemplate.getFontClass('back')\"></span>\n          <span v-t=\"'backto'\"></span>\n          <span v-t=\"previousTitle\"></span>\n        </div>\n      </div>\n      <span v-if=\"state.content.closable && state.content.aside\" @click=\"closeContent\" style=\"margin-left: 10px;\"  :class=\"{'mobile': isMobile()}\" class=\"g3w-span-button fa-stack fa-lg pull-right\">\n        <i :class=\"g3wtemplate.getFontClass('circle')\"  class=\"fa-stack-2x panel-button\"></i>\n        <i :class=\"g3wtemplate.getFontClass('close')\" class=\"fa-stack-1x panel-icon\"></i>\n      </span>\n      <div class=\"panel-title\" :style=\"[state.content.style.title]\" v-if=\"!previousTitle && showtitle && contentTitle\" :class=\"{'mobile': isMobile()}\">\n        <span id=\"contenttitle\" v-t:pre=\"contentTitle.title\">\n          <span v-t=\"contentTitle.post_title\"></span>\n        </span>\n      </div>\n    </div>\n    <div v-show=\"state.content.loading\" class=\"bar-loader\"></div>\n  </div>\n</div>";

},{}],717:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _constraints = require('gui/constraints');

var _usermessage = require('gui/usermessage/vue/usermessage.vue');

var _usermessage2 = _interopRequireDefault(_usermessage);

var _online = require('gui/notifications/online/vue/online.vue');

var _online2 = _interopRequireDefault(_online);

var _download = require('gui/notifications/download/vue/download.vue');

var _download2 = _interopRequireDefault(_download);

var _plugins = require('gui/notifications/plugins/vue/plugins.vue');

var _plugins2 = _interopRequireDefault(_plugins);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');
var SIDEBARWIDTH = void 0;

// calsse servizio della viewport
var ViewportService = function ViewportService() {
  // state of viewport
  this.state = {
    primaryView: 'map', // primary view (default)
    // percentage of secondary view
    secondaryPerc: 0,
    resized: {
      start: false,
      'h': false,
      'v': false
    },
    // splitting orientation (h = horizontal, v = vertical)
    split: 'h',
    //map
    map: {
      sizes: {
        width: 0,
        height: 0
      },
      aside: false
    },
    //content
    content: {
      loading: false,
      sizes: {
        width: 0,
        height: 0
      },
      resize: {
        'h': {
          perc: 0
        },
        'v': {
          perc: 0
        }
      },
      aside: true,
      showgoback: true,
      stack: [], // array elements of  stack contents
      closable: true, // (x) is closable
      backonclose: false, // back on prevoius content
      contentsdata: [] // content data array
    },
    usermessage: {
      show: false,
      title: null,
      message: null,
      position: null,
      type: null,
      draggable: null,
      cloasable: null,
      autoclose: null,
      textMessage: false,
      hooks: {
        header: null,
        body: null,
        footer: null
      }
    }
  };
  // content of viewport (map and content)
  this._components = {
    map: null,
    content: null
  };
  // default contents
  this._defaultMapComponent;
  this._contextualMapComponent;

  // minimun height and width of secondary view
  this._secondaryViewMinWidth = _constraints.viewport.resize.content.min;
  this._secondaryViewMinHeight = _constraints.viewport.resize.content.min;
  // attributo che serve per
  this._immediateComponentsLayout = true;
  /* PLUBILC INTARFACE */
  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // check if it set primary view (map is default)
    this.state.primaryView = options.primaryview ? options.primaryview : 'map';
    // check splitting property
    this.state.split = options.split ? options.split : 'h';
    // add component (map and content)
    var components = options.components;

    this._addComponents(components);
  };

  this.setResized = function (type) {
    var bool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    this.state.resized[type] = bool;
  };

  this.showUserMessage = function () {
    var _this = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        title = _ref.title,
        message = _ref.message,
        type = _ref.type,
        position = _ref.position,
        size = _ref.size,
        draggable = _ref.draggable,
        duration = _ref.duration,
        _ref$textMessage = _ref.textMessage,
        textMessage = _ref$textMessage === undefined ? false : _ref$textMessage,
        closable = _ref.closable,
        autoclose = _ref.autoclose,
        _ref$hooks = _ref.hooks,
        hooks = _ref$hooks === undefined ? {} : _ref$hooks;

    this.closeUserMessage();
    setTimeout(function () {
      _this.state.usermessage.show = true;
      _this.state.usermessage.message = message;
      _this.state.usermessage.textMessage = textMessage;
      _this.state.usermessage.title = title;
      _this.state.usermessage.position = position;
      _this.state.usermessage.duration = duration;
      _this.state.usermessage.type = type;
      _this.state.usermessage.show = true;
      _this.state.usermessage.size = size;
      _this.state.usermessage.autoclose = autoclose;
      _this.state.usermessage.closable = closable;
      _this.state.usermessage.draggable = draggable;
      _this.state.usermessage.hooks.header = hooks.header;
      _this.state.usermessage.hooks.body = hooks.body;
      _this.state.usermessage.hooks.footer = hooks.footer;
    });
  };

  this.closeUserMessage = function () {
    this.state.usermessage.show = false;
    this.state.usermessage.textMessage = false;
    this.state.usermessage.message = '';
  };

  this.getState = function () {
    return this.state;
  };

  this.getMapState = function () {
    return this.state.map;
  };

  this.getContentState = function () {
    return this.state.content;
  };

  this.setLoadingContent = function () {
    var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.state.content.loading = loading;
  };

  this._addComponents = function (components) {
    var _this2 = this;

    // components is an object
    //(index.js)
    /*
     {
      map: new MapComponent({
        id: 'map'
      }),
      content: new ContentsComponent({
        id: 'contents'
      })
     }
     */
    Object.entries(components).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          viewName = _ref3[0],
          component = _ref3[1];

      // check if component are map or content
      if (Object.keys(_this2._components).indexOf(viewName) > -1) {
        component.mount('#g3w-view-' + viewName, true).then(function () {
          _this2._components[viewName] = component;
          // check if view name is map
          if (viewName === 'map') _this2._defaultMapComponent = component; // set de default component to map
        }).fail(function (err) {
          return console.log(err);
        });
      }
    });
  };

  this.showMap = function () {
    this._toggleMapComponentVisibility(this._defaultMapComponent, true);
    this._components['map'] = this._defaultMapComponent;
    this._showView('map');
  };

  this.showContextualMap = function (options) {
    var _this3 = this;

    if (!this._contextualMapComponent) this._contextualMapComponent = this._defaultMapComponent;
    if (this._contextualMapComponent != this._defaultMapComponent) this._toggleMapComponentVisibility(this._defaultMapComponent, false);
    if (!this._contextualMapComponent.ismount()) {
      var contextualMapComponent = this._contextualMapComponent;
      contextualMapComponent.mount('#g3w-view-map', true).then(function () {
        return _this3._components['map'] = contextualMapComponent;
      });
    } else {
      this._components['map'] = this._contextualMapComponent;
      this._toggleMapComponentVisibility(this._contextualMapComponent, true);
    }
    this._showView('map', options);
  };

  // get default component
  this.recoverDefaultMap = function () {
    if (this._components['map'] !== this._defaultMapComponent) {
      this._components['map'] = this._defaultMapComponent;
      this._toggleMapComponentVisibility(this._contextualMapComponent, false);
      this._toggleMapComponentVisibility(this._defaultMapComponent, true);
    }
    return this._components['map'];
  };

  this.setContextualMapComponent = function (mapComponent) {
    if (mapComponent === this._defaultMapComponent) return;
    if (this._contextualMapComponent) this._contextualMapComponent.unmount();
    this._contextualMapComponent = mapComponent;
  };

  this.resetContextualMapComponent = function () {
    this._contextualMapComponent && this._contextualMapComponent.unmount();
    this._contextualMapComponent = this._defaultMapComponent;
  };

  this._toggleMapComponentVisibility = function (mapComponent, toggle) {
    mapComponent.internalComponent.$el.style.display = toggle ? 'block' : 'none';
  };

  // close map method
  this.closeMap = function () {
    this.state.secondaryPerc = this.state.primaryView === 'map' ? 100 : 0;
    this.recoverDefaultMap();
    this._layout();
  };

  // show content of the viewport content
  /*
   options: {
     content: (string, jQuery elemento or Vue component)
     title: Title of the content
     push: (opyionale, default false): if yes the content is push on top of the stack (contentStack)
     split: (optional, default 'h'): 'h' || 'v' splitting map and content orientation
     perc: (optional, default 50): percentage of content
   }
   */

  this.showContent = function () {
    var _this4 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // check if push is set
    options.push = options.push || false;
    var evenContentName = options.perc === 100 ? 'show-content-full' : 'show-content';
    // set all content parameters
    this._prepareContentView(options);
    this._immediateComponentsLayout = false;
    this._showView('content', options);
    this._components.content.setContent(options).then(function () {
      _this4._immediateComponentsLayout = true;
      _this4._layoutComponents(evenContentName);
    });
  };

  // hide content
  this.hideContent = function (bool, perc) {
    var prevContentPerc = this.state.secondaryPerc;
    this.state.secondaryPerc = !!bool ? 0 : perc;
    this.state.secondaryVisible = !bool;
    this._layout('hide-content');
    // return previous percentage
    return prevContentPerc;
  };

  //get content percentage
  this.getContentPercentage = function () {
    return this.state.secondaryPerc;
  };

  this.setContentPercentage = function (perc) {
    this.state.secondaryPerc = perc;
    this._layoutComponents();
  };

  this.contentLength = function () {
    return this.state.content.contentsdata.length;
  };

  // pull the last element of contentStack
  this.popContent = function () {
    var _this5 = this;

    var d = $.Deferred();
    // check if content exist compontentStack
    if (this.state.content.contentsdata.length) {
      this.recoverDefaultMap();
      var data = this._components.content.getPreviousContentData();
      this._prepareContentView(data.options);
      this._immediateComponentsLayout = false;
      this._showView('content', data.options);
      this._components.content.popContent().then(function () {
        _this5.state.secondaryPerc = data.options.perc;
        _this5._immediateComponentsLayout = true;
        _this5._layout('pop-content');
        d.resolve(_this5._components.contentgetCurrentContentData);
      });
    } else d.reject();
    return d.promise();
  };

  this.isContentOpen = function () {
    return !!this.state.content.contentsdata.length;
  };

  // close  content
  this.closeContent = function () {
    var _this6 = this;

    var d = $.Deferred();
    if (this.isContentOpen()) {
      this._components.content.removeContent();
      // close secondary view( return a promise)
      this.closeSecondaryView('close-content').then(function () {
        //recover default map
        var mapComponent = _this6.recoverDefaultMap();
        d.resolve(mapComponent);
      });
    } else {
      var mapComponent = this.recoverDefaultMap();
      d.resolve(mapComponent);
    }
    return d.promise();
  };

  this.removeContent = function () {
    // check if backonclose proprerty is  true o false
    // to remove all content stack or just last component
    if (this.state.content.backonclose && this.state.content.contentsdata.length > 1) this.popContent();else return this.closeContent();
  };

  this.isPrimaryView = function (viewName) {
    return this.state.primaryView == viewName;
  };

  this.setPrimaryView = function (viewTag) {
    if (this.state.primaryView !== viewTag) this.state.primaryView = viewTag;
    this._layout();
  };

  this.showPrimaryView = function () {
    var perc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (perc && this.state.secondaryVisible && this.state.secondaryPerc === 100) {
      this.state.secondaryPerc = 100 - perc;
      this._layout();
    }
  };

  this.showSecondaryView = function (split, perc) {
    this.state.secondaryVisible = true;
    this.state.split = split ? split : this.state.split;
    this.state.secondaryPerc = perc ? perc : this.state.perc;
    this._layout();
  };

  // close secondary view
  this.closeSecondaryView = function () {
    var _this7 = this;

    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var d = $.Deferred();
    var secondaryViewComponent = this._components[this._otherView(this.state.primaryView)];
    if (secondaryViewComponent.clearContents) {
      secondaryViewComponent.clearContents().then(function () {
        _this7.state.secondaryVisible = false;
        _this7.state.secondaryPerc = 0;
        _this7._layout(event);
        Vue.nextTick(function () {
          return d.resolve();
        });
      });
    } else {
      this.state.secondaryVisible = false;
      this._layout(event);
      Vue.nextTick(function () {
        return d.resolve();
      });
    }
    return d.promise();
  };

  this.getDefaultViewPerc = function (viewName) {
    return this.isPrimaryView(viewName) ? 100 : 50;
  };

  // return the opposite view
  this._otherView = function (viewName) {
    return viewName === 'map' ? 'content' : 'map';
  };

  this._isSecondary = function (view) {
    return this.state.primaryView !== view;
  };

  this._setPrimaryView = function (viewTag) {
    if (this.state.primaryView !== viewTag) {
      this.state.primaryView = viewTag;
    }
  };

  this._prepareContentView = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.state.content.preferredPerc = options.perc || this.getDefaultViewPerc('content');
    this.state.content.title = options.title;
    this.state.content.split = options.split ? options.split : null;
    this.state.content.closable = _.isNil(options.closable) ? true : options.closable;
    this.state.content.backonclose = _.isNil(options.backonclose) ? true : options.backonclose;
    this.state.content.contentsdata = this._components.content.contentsdata;
    this.state.content.style = options.style || {};
    this.state.content.showgoback = _.isNil(options.showgoback) ? true : options.showgoback;
  };

  // manage all layout logic
  // viewName: map or content
  //options.  percentage , splitting title etc ..
  this._showView = function (viewName) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var perc = options.perc || this.getDefaultViewPerc(viewName);
    var split = options.split || 'h';
    var aside = void 0;
    if (this.isPrimaryView(viewName)) aside = typeof options.aside == 'undefined' ? false : options.aside;else aside = true;
    this.state[viewName].aside = aside;
    var secondaryPerc = this.isPrimaryView(viewName) ? 100 - perc : perc;
    if (secondaryPerc > 0) this.showSecondaryView(split, secondaryPerc);else return this.closeSecondaryView();
  };

  this._getReducedSizes = function () {
    var contentEl = $('.content');
    var reducedWidth = 0;
    var reducedHeight = 0;
    if (contentEl && this.state.secondaryVisible && this.state.secondaryPerc === 100) {
      var sideBarToggleEl = $('.sidebar-aside-toggle');
      if (sideBarToggleEl && sideBarToggleEl.is(':visible')) {
        var toggleWidth = sideBarToggleEl.outerWidth();
        contentEl.css('padding-left', toggleWidth + 5);
        reducedWidth = toggleWidth - 5;
      }
    } else contentEl.css('padding-left', 15);
    return {
      reducedWidth: reducedWidth,
      reducedHeight: reducedHeight
    };
  };

  //main layout function
  this._layout = function () {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    //const splitClassToAdd = (this.state.split === 'h') ? 'split-h' : 'split-v';
    //const splitClassToRemove =  (this.state.split === 'h') ? 'split-v' : 'split-h';
    //const viewportViewElement = $(".g3w-viewport .g3w-view");
    //viewportViewElement.addClass(splitClassToAdd).removeClass(splitClassToRemove);
    var reducesdSizes = this._getReducedSizes();
    this._setViewSizes(reducesdSizes.reducedWidth, reducesdSizes.reducedHeight);
    if (this._immediateComponentsLayout) this._layoutComponents(event);
  };

  this._setViewSizes = function () {
    var primaryView = this.state.primaryView;
    var secondaryView = this._otherView(primaryView);
    var viewportWidth = this._viewportWidth(); // remove  for zoom in zoom out issue
    //all viewport height
    var viewportHeight = this._viewportHeight();
    // assign all width and height of the view to primary view (map)
    var primaryWidth = void 0;
    var primaryHeight = void 0;
    var secondaryWidth = void 0;
    var secondaryHeight = void 0;
    // percentage of secondary view (content)
    var scale = (this.state.secondaryPerc < 100 && this.state.resized[this.state.split] ? this.state.content.resize[this.state.split].perc : this.state.secondaryPerc) / 100;
    if (this.state.split === 'h') {
      secondaryWidth = this.state.secondaryVisible ? Math.max(viewportWidth * scale, this._secondaryViewMinWidth) : 0;
      secondaryHeight = viewportHeight;
      primaryWidth = viewportWidth - secondaryWidth;
      primaryHeight = viewportHeight;
    } else {
      secondaryWidth = viewportWidth;
      secondaryHeight = this.state.secondaryVisible ? Math.max(viewportHeight * scale, this._secondaryViewMinHeight) : 0;
      primaryWidth = viewportWidth;
      primaryHeight = viewportHeight - secondaryHeight;
    }
    this.state[primaryView].sizes.width = primaryWidth;
    this.state[primaryView].sizes.height = primaryHeight;
    this.state[secondaryView].sizes.width = secondaryWidth;
    this.state[secondaryView].sizes.height = secondaryHeight;
  };

  this._viewportHeight = function () {
    var topHeight = $('.navbar-header').innerHeight();
    return $(document).innerHeight() - topHeight;
  };

  this._viewportWidth = function () {
    var main_sidebar = $(".main-sidebar");
    var offset = main_sidebar.length && main_sidebar.offset().left;
    var width = main_sidebar.length && main_sidebar[0].getBoundingClientRect().width;
    var sideBarSpace = width + offset;
    return $('#app')[0].getBoundingClientRect().width - sideBarSpace;
  };

  this.resizeViewComponents = function (type) {
    var sizes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var perc = arguments[2];

    this.setResized(type, true);
    this.state.content.resize[type].perc = perc;
    this._layout('resize');
  };

  // load components of  viewport
  // after right size setting
  this._layoutComponents = function () {
    var _this8 = this;

    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    requestAnimationFrame(function () {
      var reducesdSizes = _this8._getReducedSizes();
      var reducedWidth = reducesdSizes.reducedWidth || 0;
      var reducedHeight = reducesdSizes.reducedHeight || 0;
      // for each components
      _this8._setViewSizes();
      Object.entries(_this8._components).forEach(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
            name = _ref5[0],
            component = _ref5[1];

        var width = _this8.state[name].sizes.width - reducedWidth;
        var height = _this8.state[name].sizes.height - reducedHeight;
        component.layout(width, height);
      });
      if (event) setTimeout(function () {
        _this8.emit(event);
        GUI.emit(event);
      }, 0);
    });
  };

  this._firstLayout = function () {
    var _this9 = this;

    var drawing = false;
    var resizeFired = false;

    function triggerResize() {
      resizeFired = true;
      drawResize();
    }

    var drawResize = function drawResize() {
      if (resizeFired === true) {
        resizeFired = false;
        drawing = true;
        _this9._layout('resize');
        requestAnimationFrame(drawResize);
      } else {
        drawing = false;
      }
    };
    // GUI ready event
    GUI.on('ready', function () {
      SIDEBARWIDTH = GUI.getSize({ element: 'sidebar', what: 'width' });
      _this9._layout();
      GUI.on('guiresized', function () {
        triggerResize();
      });
      // resize della window
      $(window).resize(function () {
        // set resizedFired to true and execute drawResize if it's not already running
        if (drawing === false) {
          triggerResize();
        }
      });
      // resize on main siedemar open close sidebar
      $('.main-sidebar').on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function (event) {
        //be sure that is the main sidebar that is transitioned non his child
        if (event.target === this) {
          $(this).trigger('trans-end');
          triggerResize();
        }
      });
    });
  };
  this._firstLayout();
  base(this);
};

inherit(ViewportService, G3WObject);

//singleton
var viewportService = new ViewportService();
var compiledTemplate = Vue.compile(require('./viewport.html'));

// COMPONENTE VUE VIEWPORT
var ViewportComponent = Vue.extend(_extends({
  props: {
    appState: {
      type: Object
    }
  },
  components: {
    userMessage: _usermessage2.default,
    onlineNotify: _online2.default,
    downloadNotify: _download2.default,
    pluginsNotify: _plugins2.default
  }
}, compiledTemplate, {
  data: function data() {
    return {
      state: viewportService.state,
      media: {
        matches: true
      }
    };
  },

  computed: {
    showresize: function showresize() {
      return this.state.resized.start && this.state.secondaryPerc < 100 && this.state.secondaryPerc > 0;
    },
    hooks: function hooks() {
      return this.usermessage.hooks;
    },
    usermessage: function usermessage() {
      return this.state.usermessage;
    },
    showtitle: function showtitle() {
      var showtitle = true;
      var contentsData = this.state.content.contentsdata;
      if (contentsData.length) {
        var options = contentsData[contentsData.length - 1].options;
        if (_.isBoolean(options.showtitle)) showtitle = options.showtitle;
      }
      return showtitle;
    },
    showContent: function showContent() {
      return this.state.content.show;
    },
    styles: function styles() {
      return {
        map: {
          width: this.state.map.sizes.width + 'px',
          height: this.state.map.sizes.height + 'px'
        },
        content: {
          width: this.state.content.sizes.width + 'px',
          height: this.state.content.sizes.height + 'px',
          minHeight: this.state.split === 'v' ? _constraints.viewport.resize.content.min + 'px' : null
        }
      };
    },
    contentTitle: function contentTitle() {
      var contentsData = this.state.content.contentsdata;
      if (contentsData.length) {
        var _contentsData$options = contentsData[contentsData.length - 1].options,
            title = _contentsData$options.title,
            post_title = _contentsData$options.post_title;

        return { title: title, post_title: post_title };
      }
    },
    backOrBackTo: function backOrBackTo() {
      var contentsData = this.state.content.contentsdata;
      return contentsData.length > 1 && this.state.content.showgoback ? !contentsData[contentsData.length - 2].options.title ? 'back' : 'backto' : false;
    },
    previousTitle: function previousTitle() {
      var contentsData = this.state.content.contentsdata;
      return contentsData.length > 1 && this.state.content.showgoback ? contentsData[contentsData.length - 2].options.title : null;
    },
    contentSmallerThenPreferred: function contentSmallerThenPreferred() {
      return this.state.secondaryPerc < this.state.content.preferredPerc;
    }
  },
  methods: {
    closeContent: function closeContent() {
      GUI.closeContent();
    },
    closeMap: function closeMap() {
      viewportService.closeMap();
    },
    gotoPreviousContent: function gotoPreviousContent() {
      viewportService.popContent();
    },
    closeUserMessage: function closeUserMessage() {
      viewportService.closeUserMessage();
    },
    moveFnc: function moveFnc(evt) {
      var size = this.state.split === 'h' ? 'width' : 'height';
      evt.preventDefault();
      var sidebarHeaderSize = size === 'width' ? $('.sidebar-collapse').length ? 0 : SIDEBARWIDTH : $('#main-navbar').height();
      var viewPortSize = $(this.$el)[size]();
      var mapSize = (size === 'width' ? evt.pageX + 2 : evt.pageY + 2) - sidebarHeaderSize;
      if (mapSize > viewPortSize - _constraints.viewport.resize.content.min) mapSize = viewPortSize - _constraints.viewport.resize.content.min;else if (mapSize < _constraints.viewport.resize.map.min) mapSize = _constraints.viewport.resize.map.min;
      var contentSize = viewPortSize - mapSize;
      var resizePercentageMap = Math.round(mapSize / viewPortSize * 100);
      var resizePercentageContent = 100 - resizePercentageMap;
      viewportService.resizeViewComponents(this.state.split, {
        map: _defineProperty({}, size, mapSize),
        content: _defineProperty({}, size, contentSize)
      }, resizePercentageContent);
    }
  },
  mounted: function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _this10 = this;

      var handleResizeViewport, mediaQueryEventMobile;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              handleResizeViewport = function handleResizeViewport() {
                _this10.state.resized.start = true;
              };

              _context.next = 3;
              return this.$nextTick();

            case 3:
              mediaQueryEventMobile = window.matchMedia("(min-height: 300px)");

              this.media.matches = mediaQueryEventMobile.matches;
              mediaQueryEventMobile.addListener(function (event) {
                if (event.type === 'change') _this10.media.matches = event.currentTarget.matches;
              });
              handleResizeViewport();

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref6.apply(this, arguments);
    }

    return mounted;
  }()
}));

module.exports = {
  ViewportService: viewportService,
  ViewportComponent: ViewportComponent
};

},{"./viewport.html":716,"core/g3wobject":415,"core/utils/utils":485,"gui/constraints":554,"gui/gui":575,"gui/notifications/download/vue/download.vue":650,"gui/notifications/online/vue/online.vue":651,"gui/notifications/plugins/vue/plugins.vue":652,"gui/usermessage/vue/usermessage.vue":711}],718:[function(require,module,exports){
var _require = require('core/utils/utils'),
    base = _require.base,
    inherit = _require.inherit,
    resolve = _require.resolve;

var BaseComponent = require('gui/component');

// class component
var Component = function Component() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._firstLayout = true;
  base(this, options);
};

inherit(Component, BaseComponent);

var proto = Component.prototype;

proto.mount = function (parent, append) {
  var _this = this;

  var d = $.Deferred();
  if (!this.internalComponent) this.setInternalComponent();
  if (append) {
    var iCinstance = this.internalComponent.$mount();
    $(parent).append(iCinstance.$el);
  } else this.internalComponent.$mount(parent);
  this.internalComponent.$nextTick(function () {
    $(parent).localize();
    _this.emit('ready');
    d.resolve(true);
  });
  // emit mount event
  this.emit('mount');
  return d.promise();
};

proto.unmount = function () {
  if (!this.internalComponent) return resolve();
  if (this.state.resizable) this.internalComponent.$off('resize-component', this.internalComponent.layout);
  this.state.open = false;
  // destroy vue component
  this.internalComponent.$destroy(true);
  // remove dom element
  $(this.internalComponent.$el).remove();
  // set internal componet to null (for GC)
  this.internalComponent = null;
  // emit unmount event
  this.emit('unmount');
  return resolve();
};

proto.ismount = function () {
  return this.internalComponent && this.internalComponent.$el;
};

proto.layout = function (width, height) {
  var _this2 = this;

  if (this.state.resizable && this._firstLayout) {
    this.internalComponent.$on('resize-component', this.internalComponent.layout);
    this._firstLayout = false;
  }
  this.internalComponent.$nextTick(function () {
    _this2.internalComponent.$emit('resize-component', {
      width: width,
      height: height
    });
  });
  // emit layout event
  this.emit('layout');
};

module.exports = Component;

},{"core/utils/utils":485,"gui/component":551}],719:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "bar-loader",
  props: ['loading', 'color'],
  render: function render(createElement) {
    if (this.loading) {
      return createElement('div', {
        style: {
          backgroundColor: this.color || '#FFFFFF',
          border: 0
        },
        class: {
          "bar-loader": true
        }
      });
    }
  }
};

},{}],720:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".modal-content[data-v-1d68dfb5]{background:hsla(0,0%,100%,.6);border-radius:3px}.modal-dialog[data-v-1d68dfb5]{display:inline-block;text-align:left;vertical-align:middle}.modal[data-v-1d68dfb5]{text-align:center;padding:0!important}.modal[data-v-1d68dfb5]:before{content:\"\";display:inline-block;height:100%;vertical-align:middle;margin-right:-4px}.carousel .carousel-control span[data-v-1d68dfb5]{color:#3c8dbc}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var ProjectsRegistry = require('core/project/projectsregistry');
exports.default = {
  name: "g3w-images-gallery",
  props: {
    images: {
      type: Array,
      default: []
    },
    id: {
      type: String,
      default: 'gallery'
    },
    active: {
      type: Number
    }
  },
  data: function data() {
    return {
      carouselId: 'carousel_' + Date.now()
    };
  },

  methods: {
    isActive: function isActive(src) {
      return src === active;
    },

    isRelativePath: function isRelativePath(url) {
      if (!_.startsWith(url, '/') && !_.startsWith(url, 'http')) {
        return ProjectsRegistry.getConfig().mediaurl + url;
      }
      return url;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"modal fade modal-fullscreen force-fullscreen",attrs:{"id":_vm.id,"tabindex":"-1","role":"dialog","aria-labelledby":"","aria-hidden":"true"}},[_c('div',{staticClass:"modal-dialog"},[_c('div',{staticClass:"modal-content"},[_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"carousel slide",attrs:{"id":_vm.carouselId,"data-interval":"false"}},[_c('div',{staticClass:"carousel-inner"},_vm._l((_vm.images),function(image,index){return _c('div',{staticClass:"item",class:_vm.active == index ? 'active' : ''},[_c('img',{staticStyle:{"margin":"auto"},attrs:{"src":_vm.isRelativePath(image.src)}})])}),0),_vm._v(" "),(_vm.images.length> 1)?_c('a',{staticClass:"left carousel-control",attrs:{"href":'#'+_vm.carouselId,"role":"button","data-slide":"prev"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('arrow-left')})]):_vm._e(),_vm._v(" "),(_vm.images.length> 1)?_c('a',{staticClass:"right carousel-control",attrs:{"href":'#'+_vm.carouselId,"role":"button","data-slide":"next"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('arrow-left')})]):_vm._e()])])])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-1d68dfb5"

},{"core/project/projectsregistry":478,"vueify/lib/insert-css":397}],721:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".show-hide-geo[data-v-722e0498]{color:#3c8dbc;cursor:pointer;font-size:1.2em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var geoMixin = require('gui/vue/vue.mixins').geoMixin;
exports.default = {
  name: "g3w-geospatial",
  props: {
    data: {}
  },
  mixins: [geoMixin],
  data: function data() {
    return {
      layerId: 'table_layer_' + Date.now(),
      visible: false,
      id: 'geo_table_' + Date.now()
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"geo-content"},[_c('span',{staticClass:"show-hide-geo",class:[_vm.visible ? _vm.g3wtemplate.getFontClass('eye-close') : _vm.g3wtemplate.getFontClass('eye')],on:{"click":function($event){$event.stopPropagation();return _vm.showLayer()}}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-722e0498"

},{"gui/vue/vue.mixins":731,"vueify/lib/insert-css":397}],722:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".help_div_container[data-v-42e829da]{color:#fff;text-align:justify;position:relative;border-radius:3px;padding:10px;margin:5px 2px;white-space:pre-line;background-color:hsla(0,0%,100%,.1)}.help_icon[data-v-42e829da]{text-align:center;font-size:.7em;margin-top:-4px;margin-left:-4px;background-color:#222d32;font-weight:700;color:#fff;position:absolute;top:0;left:0;width:15px;height:15px;box-shadow:0 3px 5px rgba(0,0,0,.5);border:1px solid #fff;border-radius:50%}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "helpdiv",
  props: {
    message: {
      type: String,
      required: true
    },
    type: {
      type: String,
      default: 'info' }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.message),expression:"message"}],staticClass:"help_div_container"},[_c('span',{staticClass:"help_icon"},[_vm._v("i")])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-42e829da"

},{"vueify/lib/insert-css":397}],723:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".img-responsive[data-v-d85fc804]{cursor:pointer}.g3w-image[data-v-d85fc804]{padding-left:0!important;min-width:100px;max-width:100%;cursor:pointer}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _gallery = require('./gallery.vue');

var _gallery2 = _interopRequireDefault(_gallery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "g3w-image",
  props: {
    value: {}
  },
  data: function data() {
    return {
      galleryId: 'gallery_' + Date.now(),
      active: null
    };
  },

  components: {
    'g3w-images-gallery': _gallery2.default
  },
  computed: {
    values: function values() {
      return Array.isArray(this.value) ? this.value : [this.value];
    }
  },
  methods: {
    getSrc: function getSrc(value) {
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        return value.photo;
      }
      return value;
    },
    showGallery: function showGallery(index) {
      this.active = index;
      if (_typeof(this.value) === 'object') {
        this.value.active = true;
      }
      $('#' + this.galleryId).modal('show');
    },
    getGalleryImages: function getGalleryImages() {
      var _this = this;

      var images = [];
      this.values.forEach(function (image) {
        images.push({
          src: _this.getSrc(image)
        });
      });
      return images;
    }
  },
  created: function created() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},_vm._l((_vm.values),function(value,index){return _c('div',{staticClass:"g3w-image col-md-6 col-sm-12"},[_c('img',{staticClass:"img-thumbnail",attrs:{"src":_vm.getSrc(value)},on:{"click":function($event){return _vm.showGallery(index)}}})])}),0),_vm._v(" "),_c('g3w-images-gallery',{attrs:{"id":_vm.galleryId,"active":_vm.active,"images":_vm.getGalleryImages()}})],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-d85fc804"

},{"./gallery.vue":720,"vueify/lib/insert-css":397}],724:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "progressbar",
  props: ['progress'],
  render: function render(createElement) {
    if (this.progress !== null && this.progress !== undefined) {
      return createElement('div', {
        style: {
          margin: '5px 0 5px 0',
          width: '100%',
          backgroundColor: '#FFFFFF',
          border: 0,
          borderRadius: '3px'
        }
      }, [createElement('div', {
        style: {
          width: (this.progress < 10 ? 10 : this.progress) + '%',
          display: 'flex',
          justifyContent: 'center',
          fontWeight: 'bold'
        },
        class: {
          'skin-background-color': true
        }
      }, [createElement('span', this.progress + '%')])]);
    }
  }
};

},{}],725:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var GUI = require('gui/gui');
exports.default = {
  name: "g3w-resize",
  props: {
    show: {
      type: Boolean,
      required: true,
      default: true
    },
    orientation: {
      type: String,
      required: true,
      default: 'h'
    },
    where: {
      type: 'string',
      default: 'document'
    },
    moveFnc: {
      type: Function,
      default: function _default(evt) {
        return console.log(evt);
      }
    },
    style: {
      type: Object,
      default: {}
    }
  },
  methods: {
    wrapMoveFnc: function wrapMoveFnc(evt) {
      this.domElementMoveListen.addEventListener('mouseup', this.stop, { once: true });
      this.moveFnc(evt);
    },
    start: function start() {
      this.domElementMoveListen.addEventListener('mousemove', this.wrapMoveFnc);
    },
    stop: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.domElementMoveListen.removeEventListener('mousemove', this.wrapMoveFnc);
                _context.next = 3;
                return this.$nextTick();

              case 3:
                GUI.emit('resize');

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function stop() {
        return _ref.apply(this, arguments);
      }

      return stop;
    }()
  },
  watch: {
    'orientation': {
      handler: function handler(orientation) {
        this.style.cursor = orientation === 'v' ? 'ns-resize' : 'col-resize';
      },

      immediate: true
    }
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.domElementMoveListen;
              this.style = _extends({
                minWidth: '5px',
                backgroundColor: '#dddddd',
                cursor: 'col-resize'
              }, this.style);
              _context2.t0 = this.where;
              _context2.next = _context2.t0 === 'content' ? 5 : _context2.t0 === 'document' ? 7 : 7;
              break;

            case 5:
              this.domElementMoveListen = document.getElementById('g3w-view-content');
              return _context2.abrupt('break', 8);

            case 7:
              this.domElementMoveListen = document;

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  destroyed: function destroyed() {
    this.domElementMoveListen = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.show),expression:"show"}],style:(_vm.style),attrs:{"id":_vm.$attrs.id},on:{"mousedown":function($event){$event.stopPropagation();return _vm.start($event)}}})}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-8dfabdbe"

},{"gui/gui":575}],726:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".br[data-v-6b14e6fa]{border-radius:8px}.card[data-v-6b14e6fa]{width:80%;padding:10px 20px;margin:50px auto}.item[data-v-6b14e6fa]{height:15px;background:#ccc;margin-top:15px}.item-light[data-v-6b14e6fa]{background:#ddd}.text80[data-v-6b14e6fa]{width:80%}.chart-wrapper[data-v-6b14e6fa]{height:50px;display:flex;align-items:baseline;margin-bottom:20px}.chart-item[data-v-6b14e6fa]{height:100%;width:15px;background:#ccc;margin-right:10px}.chart-item-80[data-v-6b14e6fa]{height:80%}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "skeleton",
  mounted: function mounted() {
    this.$nextTick(function () {});
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"card br"},[_c('div',{staticClass:"chart-wrapper"},[_c('div',{staticClass:"chart-item br"}),_vm._v(" "),_c('div',{staticClass:"chart-item chart-item-80 item-light br"}),_vm._v(" "),_c('div',{staticClass:"chart-item br"}),_vm._v(" "),_c('div',{staticClass:"chart-item br chart-item-80"})]),_vm._v(" "),_c('div',{staticClass:"item br text80"}),_vm._v(" "),_c('div',{staticClass:"item item-light br"}),_vm._v(" "),_c('div',{staticClass:"item br"}),_vm._v(" "),_c('div',{staticClass:"item item-light br text80"})])}]
__vue__options__._scopeId = "data-v-6b14e6fa"

},{"vueify/lib/insert-css":397}],727:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var createCompiledTemplate = exports.createCompiledTemplate = function createCompiledTemplate(template) {
  var compiledTemplate = Vue.compile(template);
  return compiledTemplate;
};

},{}],728:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t,
    tPlugin = _require.tPlugin;

var _require2 = require('core/utils/utils'),
    uniqueId = _require2.uniqueId,
    toRawType = _require2.toRawType;

var GlobalDirective = {
  install: function install(Vue) {
    var vm = new Vue();
    var directives = {};
    var createDirectiveObj = function createDirectiveObj(_ref) {
      var el = _ref.el,
          attr = _ref.attr;

      //create unique id
      var unique_attr_id = uniqueId();
      // set new attribute
      el.setAttribute(attr, unique_attr_id);
      directives[unique_attr_id] = {};
      return unique_attr_id;
    };
    var setUnwatch = function setUnwatch(_ref2) {
      var id = _ref2.id,
          unwatch = _ref2.unwatch;

      directives[id].unwatch = unwatch;
    };
    var unbindWatch = function unbindWatch(_ref3) {
      var attr = _ref3.attr,
          el = _ref3.el;

      var unique_attr_id = el.getAttribute(attr);
      if (unique_attr_id) {
        directives[unique_attr_id].unwatch();
        delete directives[unique_attr_id];
      }
    };
    var runHandlerOnUpdate = function runHandlerOnUpdate(_ref4) {
      var el = _ref4.el,
          attrId = _ref4.attrId,
          attr = _ref4.attr,
          oldValue = _ref4.oldValue;

      var unique_attr_id = el.getAttribute(attrId);
      var attr_value = el.getAttribute(attr);
      attr_value != null && attr_value !== oldValue && directives[unique_attr_id].handler({ el: el });
    };
    var prePositioni18n = function prePositioni18n(_ref5) {
      var el = _ref5.el,
          binding = _ref5.binding,
          _ref5$i18nFnc = _ref5.i18nFnc,
          i18nFnc = _ref5$i18nFnc === undefined ? t : _ref5$i18nFnc;

      var innerHTML = el.innerHTML;
      var position = binding.arg ? binding.arg : 'post';
      var handlerElement = function handlerElement(innerHTML) {
        var value = binding.value !== null ? i18nFnc(binding.value) : '';
        if (position === 'pre') el.innerHTML = value + ' ' + innerHTML;else if (position === 'post') el.innerHTML = innerHTML + ' ' + value;
      };
      handlerElement(innerHTML);
      return vm.$watch(function () {
        return _applicationstate2.default.lng;
      }, function () {
        return handlerElement(innerHTML);
      });
    };

    Vue.directive("disabled", function (el, binding) {
      binding.value ? el.classList.add('g3w-disabled') : el.classList.remove('g3w-disabled');
    });

    Vue.directive("checked", function (el, binding) {
      binding.value ? el.setAttribute('checked', 'checked') : el.removeAttribute('checked');
    });

    Vue.directive("selected-first", function (el, binding) {
      binding.value === 0 ? el.setAttribute('selected', '') : el.removeAttribute('selected');
    });

    Vue.directive('t-tooltip', {
      bind: function bind(_el, binding) {
        // handle automatic creation of tooltip
        if (binding.modifiers.create) {
          var domelement = $(_el);
          domelement.tooltip({
            trigger: _applicationstate2.default.ismobile ? 'click' : 'hover'
          });
          // in case of mobile hide tooltip after click
          _applicationstate2.default.ismobile && domelement.on('shown.bs.tooltip', function () {
            var _this = this;

            setTimeout(function () {
              return $(_this).tooltip('hide');
            }, 600);
          });
        }

        var unique_v_t_tooltip_attr = createDirectiveObj({
          el: _el,
          attr: 'g3w-v-t-tooltip-id'
        });
        var i18Fnc = binding.arg;
        directives[unique_v_t_tooltip_attr].modifiers = binding.modifiers;
        var handler = function handler() {
          var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref6$el = _ref6.el,
              el = _ref6$el === undefined ? _el : _ref6$el;

          var current_tooltip = el.getAttribute('current-tooltip');
          var unique_v_t_tooltip_attr = el.getAttribute('g3w-v-t-tooltip-id');
          var value = current_tooltip !== null ? current_tooltip : binding.value;
          var title = directives[unique_v_t_tooltip_attr].modifiers.text ? value : i18Fnc === 'plugin' ? tPlugin(value) : t(value);
          el.setAttribute('data-original-title', title);
        };
        handler();
        directives[unique_v_t_tooltip_attr].handler = handler;
        setUnwatch({
          id: unique_v_t_tooltip_attr,
          unwatch: vm.$watch(function () {
            return _applicationstate2.default.lng;
          }, handler)
        });
      },
      componentUpdated: function componentUpdated(el, oldVnode) {
        runHandlerOnUpdate({
          el: el,
          attrId: 'g3w-v-t-tooltip-id',
          attr: 'current-tooltip',
          oldValue: oldVnode.oldValue
        });
      },
      unbind: function unbind(el) {
        $(el).tooltip('hide');
        unbindWatch({
          attr: 'g3w-v-t-tooltip-id',
          el: el
        });
      }
    });

    Vue.directive('t-html', {
      bind: function bind(el, binding) {
        var unique_v_t_html_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-t-html-id'
        });
        var handlerElement = function handlerElement() {
          el.innerHTML = '' + t(binding.value);
        };
        handlerElement();
        setUnwatch({
          id: unique_v_t_html_attr,
          unwatch: vm.$watch(function () {
            return _applicationstate2.default.lng;
          }, handlerElement)
        });
      },
      unbind: function unbind(el) {
        unbindWatch({
          attr: 'g3w-v-t-html-id',
          el: el
        });
      }
    });

    Vue.directive('t-placeholder', {
      bind: function bind(el, binding) {
        var unique_v_t_placeholder_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-t-placeholder-id'
        });
        var value = binding.value;
        var i18Fnc = binding.arg;
        var handler = function handler() {
          var placeholder = i18Fnc === 'plugin' ? tPlugin(value) : t(value);
          el.setAttribute('placeholder', placeholder);
        };
        handler();
        setUnwatch({
          id: unique_v_t_placeholder_attr,
          unwatch: vm.$watch(function () {
            return _applicationstate2.default.lng;
          }, handler)
        });
      },
      unbind: function unbind(el) {
        unbindWatch({
          attr: 'g3w-v-t-placeholder-id',
          el: el
        });
      }
    });

    Vue.directive('t-title', {
      bind: function bind(el, binding) {
        // get unique id
        var unique_v_t_title_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-t-title-id'
        });
        var value = binding.value;
        var i18Fnc = binding.arg;
        var handler = function handler() {
          var title = i18Fnc === 'plugin' ? tPlugin(value) : t(value);
          el.setAttribute('title', title);
          el.setAttribute('data-original-title', title);
        };
        handler();
        setUnwatch({
          id: unique_v_t_title_attr,
          unwatch: vm.$watch(function () {
            return _applicationstate2.default.lng;
          }, handler)
        });
      },
      unbind: function unbind(el) {
        unbindWatch({
          attr: 'g3w-v-t-title-id',
          el: el
        });
      }
    });

    Vue.directive("t", {
      bind: function bind(el, binding) {
        var unique_v_t_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-t-id'
        });
        setUnwatch({
          id: unique_v_t_attr,
          unwatch: prePositioni18n({
            el: el,
            binding: binding,
            i18nFnc: t
          })
        });
      },
      unbind: function unbind(el) {
        unbindWatch({
          el: el,
          attr: 'g3w-v-t-id'
        });
      }
    });

    Vue.directive("t-plugin", {
      bind: function bind(el, binding) {
        var unique_v_t_plugin_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-t-plugin-id'
        });
        setUnwatch({
          id: unique_v_t_plugin_attr,
          unwatch: prePositioni18n({
            el: el,
            binding: binding,
            i18nFnc: tPlugin
          })
        });
      },
      unbind: function unbind(el) {
        unbindWatch({
          el: el,
          attr: 'g3w-v-t-plugin-id'
        });
      }
    });

    Vue.directive("plugins", {
      bind: function bind(el) {
        var showHideHandler = function showHideHandler(plugins) {
          el.classList.toggle('g3w-hide', plugins.length === 0);
        };
        showHideHandler(_applicationstate2.default.plugins);
        var unique_v_plugins_notify_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-plugins-id'
        });
        setUnwatch({
          id: unique_v_plugins_notify_attr,
          unwatch: vm.$watch(function () {
            return _applicationstate2.default.plugins;
          }, showHideHandler)
        });
      },
      unbind: function unbind(el) {
        unbindWatch({
          el: el,
          attr: 'g3w-v-plugins-id'
        });
      }
    });

    Vue.directive("online", {
      bind: function bind(el, binding) {
        // show if online
        var showOnline = binding.arg && binding.arg === 'hide' ? false : true;
        var showHideHandler = function showHideHandler(bool) {
          bool = showOnline ? bool : !bool;
          el.classList.toggle('g3w-hide', !bool);
        };
        showHideHandler(_applicationstate2.default.online);
        var unique_v_online_notify_attr = createDirectiveObj({
          el: el,
          attr: 'g3w-v-offline-id'
        });
        setUnwatch({
          id: unique_v_online_notify_attr,
          unwatch: vm.$watch(function () {
            return _applicationstate2.default.online;
          }, showHideHandler)
        });
      },
      unbind: function unbind() {
        unbindWatch({
          el: el,
          attr: 'g3w-v-offline-id'
        });
      }
    });

    Vue.directive("download", {
      bind: function bind(el, binding) {
        var className = binding.modifiers && binding.modifiers.show && 'hide' || 'disabled';
        var listen = toRawType(binding.value) === 'Boolean' ? binding.value : true;
        var downloadHandler = function downloadHandler(bool) {
          el.classList.toggle('g3w-' + className, className === 'hide' ? !bool : bool);
        };
        if (listen) {
          var unique_v_download_attr = createDirectiveObj({
            el: el,
            attr: 'g3w-v-download-id'
          });
          downloadHandler(listen && _applicationstate2.default.download);
          setUnwatch({
            id: unique_v_download_attr,
            unwatch: vm.$watch(function () {
              return _applicationstate2.default.download;
            }, downloadHandler)
          });
        }
      },
      unbind: function unbind(el) {
        unbindWatch({
          el: el,
          attr: 'g3w-v-download-id'
        });
      }
    });

    Vue.directive('select2', {
      inserted: function inserted(el, binding, vnode) {
        var _ref7 = vnode.data.attrs || {},
            templateResult = _ref7.templateResult,
            templateSelection = _ref7.templateSelection,
            _ref7$search = _ref7.search,
            search = _ref7$search === undefined ? true : _ref7$search;

        vnode.context._select2 = $(el).select2({
          dropdownCssClass: 'skin-color',
          templateResult: templateResult,
          templateSelection: templateSelection,
          minimumResultsForSearch: !search ? -1 : undefined
        });
        binding.value && vnode.context._select2.on('select2:select', function (evt) {
          vnode.context[binding.value] = evt.params.data.id;
        });
      },
      unbind: function unbind(ele, binding, vnode) {
        vnode.context._select2.select2('destroy');
      }
    });
  }
};

module.exports = GlobalDirective;

},{"core/applicationstate":402,"core/i18n/i18n.service":418,"core/utils/utils":485}],729:[function(require,module,exports){
var _require = require('core/i18n/i18n.service'),
    t = _require.t,
    tPlugin = _require.tPlugin;

var G3WApplicationFilter = {
  install: function install(Vue) {
    Vue.filter('t', function (value) {
      return t(value);
    });
    Vue.filter('tPlugin', function (value) {
      return value !== null ? tPlugin(value) : '';
    });
  }
};

module.exports = G3WApplicationFilter;

},{"core/i18n/i18n.service":418}],730:[function(require,module,exports){
var _image = require('./global-components/image.vue');

var _image2 = _interopRequireDefault(_image);

var _gallery = require('./global-components/gallery.vue');

var _gallery2 = _interopRequireDefault(_gallery);

var _geo = require('./global-components/geo.vue');

var _geo2 = _interopRequireDefault(_geo);

var _skeleton = require('./global-components/skeleton.vue');

var _skeleton2 = _interopRequireDefault(_skeleton);

var _barLoader = require('./global-components/bar-loader');

var _barLoader2 = _interopRequireDefault(_barLoader);

var _progressbar = require('./global-components/progressbar');

var _progressbar2 = _interopRequireDefault(_progressbar);

var _helpdiv = require('./global-components/helpdiv.vue');

var _helpdiv2 = _interopRequireDefault(_helpdiv);

var _resize = require('./global-components/resize.vue');

var _resize2 = _interopRequireDefault(_resize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GlobalComponents = {
  install: function install(Vue) {
    Vue.component(_image2.default.name, _image2.default);
    Vue.component(_gallery2.default.name, _gallery2.default);
    Vue.component(_geo2.default.name, _geo2.default);
    Vue.component(_barLoader2.default.name, _barLoader2.default);
    Vue.component(_progressbar2.default.name, _progressbar2.default);
    Vue.component(_skeleton2.default.name, _skeleton2.default);
    Vue.component(_helpdiv2.default.name, _helpdiv2.default);
    Vue.component(_resize2.default.name, _resize2.default);
  }
};

module.exports = GlobalComponents;

},{"./global-components/bar-loader":719,"./global-components/gallery.vue":720,"./global-components/geo.vue":721,"./global-components/helpdiv.vue":722,"./global-components/image.vue":723,"./global-components/progressbar":724,"./global-components/resize.vue":725,"./global-components/skeleton.vue":726}],731:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var GUI = require('gui/gui');

var _require = require('core/utils/utils'),
    throttle = _require.throttle,
    debounce = _require.debounce;

var CatalogLayersStoresRegistry = require('core/catalog/cataloglayersstoresregistry');

var autocompleteMixin = {
  methods: {
    autocompleteRequest: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            layerId = _ref2.layerId,
            field = _ref2.field,
            value = _ref2.value;

        var data, layer;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                data = [];
                layer = CatalogLayersStoresRegistry.getLayerById(layerId);
                _context.prev = 2;
                _context.next = 5;
                return layer.getFilterData({
                  suggest: field + '|' + value,
                  unique: field
                });

              case 5:
                data = _context.sent;
                _context.next = 10;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context['catch'](2);

              case 10:
                return _context.abrupt('return', data.map(function (value) {
                  return {
                    id: value,
                    text: value
                  };
                }));

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 8]]);
      }));

      function autocompleteRequest() {
        return _ref.apply(this, arguments);
      }

      return autocompleteRequest;
    }()
  }
};

var fieldsMixin = {
  methods: {
    getFieldType: function getFieldType(value) {
      value = value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.constructor === Object && !value.coordinates ? value.value : value;
      var Fields = {};
      Fields.SIMPLE = 'simple';
      Fields.GEO = 'geo';
      Fields.LINK = 'link';
      Fields.PHOTO = 'photo';
      Fields.PHOTOLINK = "photolink";
      Fields.IMAGE = 'image';
      Fields.POINTLINK = 'pointlink';
      Fields.ROUTE = 'route';
      var URLPattern = /^(https?:\/\/[^\s]+)/g;
      var PhotoPattern = /[^\s]+.(png|jpg|jpeg|gif)$/g;
      if (_.isNil(value)) {
        return Fields.SIMPLE;
      } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value.coordinates) {
        return Fields.GEO;
      } else if (value && Array.isArray(value)) {
        if (value.length && value[0].photo) return Fields.PHOTO;else return Fields.SIMPLE;
      } else if (value.toString().toLowerCase().match(PhotoPattern)) {
        return Fields.PHOTO;
      } else if (value.toString().match(URLPattern)) {
        return Fields.LINK;
      }
      return Fields.SIMPLE;
    },
    sanitizeFieldValue: function sanitizeFieldValue(value) {
      if (Array.isArray(value) && !value.length) return '';else return value;
    }
  }
};

var mediaMixin = {
  computed: {
    filename: function filename() {
      return this.value ? this.value.split('/').pop() : this.value;
    }
  },
  methods: {
    isMedia: function isMedia(value) {
      if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.constructor === Object) return !!value.mime_type;
      return false;
    },
    getMediaType: function getMediaType(mime_type) {
      var media = {
        type: null,
        options: {}
      };
      switch (mime_type) {
        case 'image/gif':
        case 'image/png':
        case 'image/jpeg':
        case 'image/bmp':
          media.type = 'image';
          break;
        case 'application/pdf':
          media.type = 'pdf';
          break;
        case 'video/mp4':
        case 'video/ogg':
        case 'video/x-ms-wmv':
        case 'video/x-msvideo':
        case 'video/quicktime':
          media.type = 'video';
          media.options.format = mime_type;
          break;
        case 'application/gzip':
        case 'application/zip':
          media.type = 'zip';
          break;
        case 'application/msword':
        case 'application/vnd.oasis.opendocument.text':
          media.type = 'text';
          break;
        case 'application/vnd.ms-office':
        case 'application/vnd.oasis.opendocument.spreadsheet':
          media.type = 'excel';
          break;
        case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
        case 'application/vnd.ms-powerpoint':
        case 'application/vnd.oasis.opendocument.presentation':
          media.type = 'ppt';
          break;
        default:
          media.type = 'unknow';
      }
      return media;
    }
  }
};

var geoMixin = {
  methods: {
    showLayer: function showLayer() {
      this.visible = !this.visible;
      this.layer.setVisible(this.visible);
    }
  },
  created: function created() {
    var data = this.data;
    var mapService = GUI.getComponent('map').getService();
    var mapProjection = mapService.getProjection().getCode();
    var style = void 0;
    switch (data.type) {
      case 'Point':
      case 'MultiPoint':
        style = [new ol.style.Style({
          image: new ol.style.Circle({
            radius: 6,
            fill: new ol.style.Fill({
              color: [255, 255, 255, 1.0]
            }),
            stroke: new ol.style.Stroke({
              color: [0, 0, 0, 1.0],
              width: 2
            })
          })
        }), new ol.style.Style({
          image: new ol.style.Circle({
            radius: 2,
            fill: new ol.style.Fill({
              color: [255, 255, 255, 1.0]
            }),
            stroke: new ol.style.Stroke({
              color: [0, 0, 0, 1.0],
              width: 2
            })
          })
        })];
        break;
      case 'Line':
      case 'MultiLineString':
      case 'Polygon':
      case 'MultiPolygon':
        style = new ol.style.Style({
          fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.3)'
          }),
          stroke: new ol.style.Stroke({
            color: [0, 0, 0, 1.0],
            width: 2
          })
        });
        break;
    }
    this.layer = new ol.layer.Vector({
      source: new ol.source.Vector({
        features: new ol.format.GeoJSON().readFeatures(data, {
          featureProjection: mapProjection
        })
      }),
      visible: !!this.visible,
      style: style
    });
    mapService.getMap().addLayer(this.layer);
  },
  beforeDestroy: function beforeDestroy() {
    var mapService = GUI.getComponent('map').getService();
    mapService.getMap().removeLayer(this.layer);
  }
};

var DELAY_TYPE = {
  throttle: throttle,
  debounce: debounce
};

var resizeMixin = {
  created: function created() {
    var delayWrapper = this.delayType && DELAY_TYPE[this.delayType] || DELAY_TYPE.throttle;
    this.delayResize = this.resize ? delayWrapper(this.resize.bind(this), this.delayTime) : null;
    GUI.on('resize', this.delayResize);
  },
  mounted: function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.$nextTick();

            case 2:
              this.resize && this.resize();

            case 3:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function mounted() {
      return _ref3.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    GUI.off('resize', this.delayResize);
    this.delayResize = null;
    this.delayTime = null;
  }
};

var select2Mixin = {
  mixins: [resizeMixin],
  methods: {
    resize: function resize() {
      this.select2 && !_applicationstate2.default.ismobile && this.select2.select2('close');
    }
  },
  beforeDestroy: function beforeDestroy() {
    //destroy a select2  dom element
    this.select2 && this.select2.select2('destroy');
    // remove all event
    this.select2.off();
    this.select2 = null;
  }
};

module.exports = {
  geoMixin: geoMixin,
  fieldsMixin: fieldsMixin,
  mediaMixin: mediaMixin,
  resizeMixin: resizeMixin,
  autocompleteMixin: autocompleteMixin,
  select2Mixin: select2Mixin
};

},{"core/applicationstate":402,"core/catalog/cataloglayersstoresregistry":403,"core/utils/utils":485,"gui/gui":575}],732:[function(require,module,exports){
//fownawsome class
var font = {
  'change-map': "fas fa-map-signs",
  map: "far fa-map",
  file: "fas fa-file-code",
  marker: "fas fa-map-marker-alt",
  relation: "fas fa-sitemap",
  tools: "fas fa-cogs",
  tool: "fas fa-cog",
  search: "fas fa-search",
  print: "fas fa-print",
  info: "fas fa-info-circle",
  'info-circle': "fas fa-info-circle",
  globe: "fas fa-globe",
  mail: "fas fa-envelope",
  mobile: "fas fa-mobile",
  fax: "fas fa-fax",
  user: "fas fa-user",
  bars: "fas fa-bars",
  uncheck: "far fa-square",
  check: "far fa-check-square",
  filluncheck: "fas fa-square",
  table: "fas fa-table",
  trash: "fas fa-trash",
  'trash-o': "far fa-trash-alt",
  pencil: "fas fa-pencil-alt",
  'ellips-h': "fas fa-ellipsis-h",
  'ellips-v': "fas fa-ellipsis-v",
  'arrow-up': "fas fa-chevron-up",
  'arrow-down': "fas fa-chevron-down",
  'arrow-left': "fas fa-chevron-left",
  'arrow-right': "fas fa-chevron-right",
  'resize-h': "fas fa-arrows-alt-h",
  'caret-up': "fas fa-caret-up",
  'caret-down': "fas fa-caret-down",
  'caret-left': "fas fa-caret-left",
  'caret-right': "fas fa-caret-right",
  'empty-circle': "far fa-circle",
  'cloud-upload': "fas fa-cloud-upload-alt",
  spinner: "fas fa-spinner",
  minus: "fas fa-minus",
  plus: "fas fa-plus",
  'plus-circle': "fas fa-plus-circle",
  'plus-square': "far fa-plus-square",
  grid: "fas fa-th",
  home: "fas fa-home",
  folder: "fas fa-folder",
  'sign-out': "fas fa-sign-out-alt",
  close: "fas fa-times",
  time: "far fa-clock",
  calendar: "fas fa-calendar-alt",
  list: "fas fa-list-alt",
  link: "fas fa-link",
  unlink: "fas fa-unlink",
  eye: "far fa-eye",
  'eye-close': "far fa-eye-slash",
  save: "far fa-save",
  pdf: "fas fa-file-pdf",
  image: "far fa-image",
  video: "far fa-file-video",
  unknow: "far fa-question-circle",
  zip: "far fa-file-archive",
  text: "far fa-file-alt",
  excel: "far fa-file-excel",
  xls: "far fa-file-excel",
  gpx: "fas fa-location-arrow",
  gpkg: "fas fa-box-open",
  shapefile: "fas fa-download",
  csv: "fas fa-file-csv",
  ppt: "far fa-file-powerpoint",
  circle: "fas fa-circle",
  calculator: "fas fa-calculator",
  picture: "far fa-image",
  keyboard: "far fa-keyboard",
  'file-download': "fas fa-file-download",
  copy: "far fa-copy",
  draw: "fas fa-draw-polygon",
  chart: "fas fa-chart-bar",
  'chart-line': "fas fa-chart-line",
  'chart-area': "fas fa-chart-area",
  'chart-pie': "fas fa-chart-pie",
  run: "fas fa-play",
  warning: "fas fa-exclamation-circle",
  alert: "fas fa-exclamation-triangle",
  crosshairs: "fas fa-crosshairs",
  success: "far fa-check-circle",
  back: "fas fa-chevron-circle-left",
  'file-upload': "fas fa-file-upload",
  wifi: "fas fa-wifi",
  mouse: "fas fa-mouse",
  'copy-paste': "far fa-copy",
  'vector-square': "fas fa-vector-square",
  download: "fas fa-download",
  credits: "fas fa-euro-sign",
  filter: "fas fa-filter",
  plugin: "fas fa-plug",
  invert: "fas fa-exchange-alt",
  clear: "fas fa-broom",
  palette: "fas fa-palette",
  layers: "fas fa-layer-group",
  'sign-in': "fas fa-sign-in-alt",
  language: "fas fa-language",
  target: "fas fa-bullseye",
  pin: "fas fa-map-pin",
  square: "far fa-square"
};

var Vueappplugin = {
  install: function install(Vue) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Vue.prototype.g3wtemplate = {
      font: font,
      get: function get() {},
      getInfo: function getInfo() {
        return {
          font: this.font
        };
      },
      getInfoString: function getInfoString() {},
      getFontClass: function getFontClass(type) {
        return this.font[type];
      }
    };
    // set isMobile method to all Vue instances
    Vue.mixin({
      methods: {
        isMobile: function (_isMobile) {
          function isMobile() {
            return _isMobile.apply(this, arguments);
          }

          isMobile.toString = function () {
            return _isMobile.toString();
          };

          return isMobile;
        }(function () {
          return isMobile.any;
        })
      }
    });
  }
};

module.exports = Vueappplugin;

},{}],733:[function(require,module,exports){
var _applicationstate = require('core/applicationstate');

var _applicationstate2 = _interopRequireDefault(_applicationstate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GUI = require('gui/gui');
module.exports = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$steps = _ref.steps,
      steps = _ref$steps === undefined ? {} : _ref$steps;

  return {
    data: function data() {
      return {
        steps: steps,
        currentStep: 0
      };
    },

    watch: {
      steps: {
        handler: function handler(steps) {
          var _this = this;

          Object.values(steps).find(function (step, index) {
            if (!step.done) {
              _this.currentStep = index;
              return true;
            }
          });
        },

        deep: false
      }
    },
    render: function render(h) {
      var _this2 = this;

      return h('ul', {
        style: {
          alignSelf: 'flex-start',
          listStyle: 'none',
          padding: (_applicationstate2.default.ismobile ? 5 : 10) + 'px !important',
          marginBottom: 0
        }
      }, Object.values(this.steps).map(function (step, index) {
        var _class;

        var state = {
          current: !step.done && index === _this2.currentStep,
          done: step.done,
          todo: !step.done && index !== _this2.currentStep
        };
        return h('li', {
          style: {
            fontWeight: (step.done || !step.done && index === _this2.currentStep) && 'bold' || null,
            marginBottom: '5px',
            color: step.done && "green",
            display: step.buttonnext && 'inline-flex'
          }
        }, [h('i', {
          style: {
            marginRight: '5px',
            fontWeight: step.done && 'bold'
          },
          class: (_class = {}, _defineProperty(_class, GUI.getFontClass('arrow-right'), state.current), _defineProperty(_class, GUI.getFontClass('empty-circle'), state.todo), _defineProperty(_class, GUI.getFontClass('success'), state.done), _class)
        }), h('span', {
          directives: [{
            name: step.directive,
            value: step.description
          }],
          style: {
            display: step.buttonnext ? 'inline-flex' : 'inline',
            flexDirection: step.buttonnext && 'row-reverse'
          }
        }), step.dynamic !== undefined && h('span', {
          style: {
            alignSelf: 'center',
            padding: '3px'
          }
        }, step.dynamic), step.buttonnext && h('button', {
          on: {
            click: function click() {
              step.done = true;
              step.buttonnext.done();
            }
          },
          directives: [{
            name: 't',
            value: 'sdk.workflow.next'
          }],
          style: {
            fontWeight: 'bold'
          },
          class: {
            btn: true,
            'btn-success': true,
            'g3w-disabled': step.buttonnext.disabled
          }
        })]);
      }));
    }
  };
};

},{"core/applicationstate":402,"gui/gui":575}],734:[function(require,module,exports){
require('babel-polyfill');

var ApplicationService = require('core/applicationservice');
// Application instance. It manages the application template
//useful to insert polyfill for old non supported browser methods
var Application = require('gui/app/index');
// set the global enviromental variable g3wsdk. It used by plugins to load sdk class and instances
window.g3wsdk = require('api');

// application starting point
var bootstrap = function bootstrap() {
  ApplicationService.init().then(function () {
    //create the Application instance passing the template configuration
    // and the applicationService instance that is useful to work with project API
    var applicationTemplate = new Application({
      ApplicationService: ApplicationService
    });
    // Listen ready event emit after build interface
    applicationTemplate.on('ready', function () {
      return ApplicationService.postBootstrap();
    });
    //call initialize applicationTemplate method
    applicationTemplate.init();
  }).catch(function (_ref) {
    var _ref$error = _ref.error,
        error = _ref$error === undefined ? null : _ref$error,
        language = _ref.language;

    if (error) {
      if (error.responseJSON && error.responseJSON.error.data) error = error.responseJSON.error.data;else if (error.statusText) error = error.statusText;
    }
    Application.fail({
      language: language,
      error: error
    });
  });
};

// run  bootstrap function
bootstrap();

},{"api":398,"babel-polyfill":5,"core/applicationservice":401,"gui/app/index":537}],735:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  plugins: {
    editing: {
      type: 'update'
    }
  }
};

},{}],736:[function(require,module,exports){
var translations = {
  it: {
    translation: {
      default: "predefinito",
      sign_in: "Accedi",
      layer_selection_filter: {
        tools: {
          filter: "Aggiungi/Rimuovi Filtro",
          nofilter: "Rimuovi filtro",
          invert: "Inverti Selezione",
          clear: "Annulla selezione",
          show_features_on_map: "Mostra features visibili su mappa"
        }
      },
      sdk: {
        search: {
          all: 'TUTTE',
          no_results: "Nessun valore trovato",
          searching: "Sto cercando ..",
          error_loading: "Errore nel caricamento valori",
          layer_not_searchable: "Il layer non è ricercabile",
          layer_not_querable: "Il layer non è interrogabile",
          autocomplete: {
            inputshort: {
              pre: "Digita almeno",
              post: "caratteri"
            }
          }
        },
        print: {
          no_layers: 'Nessun Layer visibile',
          scale: "Scala",
          format: "Formato",
          rotation: "Rotazione",
          download_image: "Scarica Immagine",
          fids_instruction: "Valori accettati: da 1 al valore massimo indicato da [max]. Possibile indicare anche range di valori es. 4-6",
          fids_example: "Es. 1,4-6 verranno stampati gli id 1,4,5,6",
          help: "I layers mostrati nella stampa potrebbero essere quelli definiti sul progetto e non quelli visualizzati sulla mappa"
        },
        querybuilder: {
          search: {
            run: "Lancia ricerca",
            info: "Informazioni",
            delete: "Cancella",
            edit: "Modifica"
          },
          messages: {
            changed: 'Salvato correttamente',
            number_of_features: "Numero di features"
          },
          panel: {
            button: {
              all: 'TUTTI',
              save: 'SALVA',
              test: 'TEST',
              clear: 'PULISCI',
              run: 'ESEGUI',
              manual: 'MANUALE'
            },
            layers: 'LAYERS',
            fields: 'CAMPI',
            values: 'VALORI',
            operators: 'OPERATORI',
            expression: 'ESPRESSIONE'
          },
          error_run: 'Si è verificato un errore. Verificare se la query è corretta',
          error_test: "Errore nell'esecuzione della query",
          delete: 'Vuoi confermare la cancellazione?',
          additem: 'Inserisci nome della ricerca'
        },
        errors: {
          layers: {
            load: "Alcuni layers presenti nel progetto non sono attualmente disponibili e quindi non compaiono nell'attuale visualizzazione"
          },
          unsupported_format: 'Formato non supportato',
          add_external_layer: 'Errore nel caricamento del layer'
        },
        metadata: {
          title: "Metadati",
          groups: {
            general: {
              title: 'GENERALE',
              fields: {
                title: 'TITOLO',
                name: 'NOME',
                description: "DESCRIZIONE",
                abstract: "ABSTRACT",
                keywords: 'LISTA DELLE PAROLE CHIAVE',
                fees: "CANONI",
                accessconstraints: "VINCOLI DI ACCESSO",
                contactinformation: "CONTATTI",
                subfields: {
                  contactinformation: {
                    contactelectronicmailaddress: "E-mail",
                    personprimary: 'Riferimenti',
                    contactvoicetelephone: 'Telefono',
                    contactorganization: 'Organizzazione',
                    ContactOrganization: 'Organizzazione',
                    contactposition: 'Posizione',
                    ContactPosition: 'Posizione',
                    contactperson: 'Persona',
                    ContactPerson: 'Persona'
                  }
                },
                wms_url: "WMS"
              }
            },
            spatial: {
              title: 'INFO SPAZIALI',
              fields: {
                crs: 'EPSG',
                extent: 'BBOX'
              }
            },
            layers: {
              title: 'STRATI',
              groups: {
                general: 'GENERALE',
                spatial: 'INFO SPAZIALI'
              },
              fields: {
                layers: 'STRATI',
                subfields: {
                  crs: 'EPSG',
                  bbox: 'BBOX',
                  title: "TITOLO",
                  name: 'NOME',
                  geometrytype: 'GEOMETRIA',
                  source: 'SORGENTE',
                  attributes: 'ATTRIBUTI',
                  abstract: 'ABSTRACT',
                  attribution: 'ATTRIBUTION',
                  keywords: "PAROLE CHIAVE",
                  metadataurl: 'METADATA URL',
                  dataurl: "DATA URL"
                }
              }
            }
          }
        },
        tooltips: {
          relations: {
            form_to_row: "Visualizza formato Riga",
            row_to_form: "Visualizza formato Form"
          },
          zoom_to_features_extent: "Zoom sulle features",
          copy_map_extent_url: 'Copia map view link',
          download_shapefile: "Scarica Shapefile",
          download_gpx: "Scarica GPX",
          download_gpkg: "Scarica GPKG",
          download_csv: "Scarica CSV",
          download_xls: "Scarica XLS",
          show_chart: "Mostra Grafico",
          atlas: "Stampa Atlas"
        },
        mapcontrols: {
          query: {
            tooltip: 'Interroga Layer',
            actions: {
              add_selection: {
                hint: "Aggiungi/Rimuovi Selezione"
              },
              zoom_to_features_extent: {
                hint: "Zoom sulle features"
              },
              add_features_to_results: {
                hint: "Aggiungi features ai risultati"
              },
              remove_feature_from_results: {
                hint: "Rimuovi feature dai risultati"
              },
              zoom_to_feature: {
                hint: "Zoom sulla feature"
              },
              relations: {
                hint: "Visualizza Relazioni"
              },
              relations_charts: {
                hint: "Visualizza grafici relazioni"
              },
              download_features_shapefile: {
                hint: 'Scarica features in Shapefile'
              },
              download_shapefile: {
                hint: 'Scarica feature in Shapefile'
              },
              download_features_gpx: {
                hint: "Scarica features in GPX"
              },
              download_features_gpkg: {
                hint: "Scarica features in GPKG"
              },
              download_gpx: {
                hint: "Scarica feature in GPX"
              },
              download_gpkg: {
                hint: "Scarica feature in GPKG"
              },
              download_features_csv: {
                hint: "Scarica features in CSV"
              },
              download_csv: {
                hint: "Scarica feature in CSV"
              },
              download_features_xls: {
                hint: "Scarica features in XLS"
              },
              download_xls: {
                hint: "Scarica la feature in XLS"
              },
              atlas: {
                hint: 'Stampa Atlas'
              }
            }
          },
          querybypolygon: {
            tooltip: 'Interroga per poligono',
            no_geometry: 'Non contiene la geometria nella risposta',
            help: "<h4>Guida - Interrogazione con Poligono</h4>\n                  <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Seleziona uno strato poligonale in legenda.</li>\n                    <li style=\"font-size:0.8em;\">Assicurati che lo strato sia visibile in mappa.</li>\n                    <li style=\"font-size:0.8em;\">Clicca su una geometria dello strato selezionato.</li>\n                  </ul>"
          },
          querybybbox: {
            tooltip: 'Interroga per BBOX',
            nolayers_visible: "Nessun layer interrogabile è visibile. Assicurarsi che almeno un layer wfs sia visibile per eseguire l'interrogazione",
            help: "<h4>Guida - Interrogazione BBox</h4>\n                   <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Disegna un rettangolo per interrogare gli strati evidenziati in giallo</li>\n                   </ul>"
          },
          addlayer: {
            messages: {
              csv: {
                warning: "Il risultato in mappa è parziale a causa della presenza dei seguenti records non corretti:"
              }
            },
            tooltip: 'Aggiungi Layer'
          },
          geolocation: {
            tooltip: 'Geolocalizzazione'
          },
          measures: {
            length: {
              tooltip: "Lunghezza",
              help: "Clicca sulla mappa per continuare a disegnare la linea.<br>CANC se si vuole cancellare l'ultimo vertice inserito"
            },
            area: {
              tooltip: "Area",
              help: "Clicca per continuare a disegnare il poligono.<br>CANC se si vuole cancellare l'ultimo vertice inserito"
            }
          },
          scale: {
            no_valid_scale: "Scala non valida"
          }
        },
        relations: {
          relation_data: 'Dati Relazione',
          no_relations_found: 'Nessuna relazione trovata',
          back_to_relations: 'Ritorna alle relazioni',
          list_of_relations_feature: 'Lista delle relazioni della feature',
          error_missing_father_field: "Il campo relazionato non esiste"
        },
        workflow: {
          steps: {
            title: 'Passi'
          },
          next: 'Avanti'
        },
        form: {
          loading: 'Caricamento ...',
          inputs: {
            messages: {
              errors: {
                picklayer: "Nessuna feature selezionata. Verificare se il layer è in editing o non visibile alla scala attuale"
              }
            },
            tooltips: {
              picklayer: "Prendi valore dalla mappa",
              lonlat: "Clicca sulla mappa per prendere le coordinate"
            },
            input_validation_mutually_exclusive: "Campo mutualmente esclusivo con ",
            input_validation_error: "Campo obbligatorio o tipo valore non corretto",
            input_validation_min_field: "Valore deve essere magiore uguale a quello del camp ",
            input_validation_max_field: "Valore deve essere minore uguale a quello del campo ",
            input_validation_exclude_values: "Campo deve contenere un valore diverso",
            integer: "intero",
            bigint: "intero",
            text: "testuale",
            varchar: "testuale",
            textarea: "testuale",
            string: "stringa",
            date: "data",
            float: "float",
            table: "table"
          },
          footer: {
            required_fields: "Campi richiesti"
          },
          messages: {
            qgis_input_widget_relation: "Gestisci le relazioni tramite form dedicato"
          }
        },
        catalog: {
          menu: {
            wms: {
              title: "",
              copy: "Clicca qui per copiare url",
              copied: "Copiato"
            },
            download: {
              shp: 'Scarica Shapefile',
              gpx: 'Scarica GPX',
              gpkg: 'Scarica GPKG',
              csv: 'Scarica CSV',
              xls: 'Scarica XLS'
            }
          }
        },
        wps: {
          list_process: "Lista dei processi",
          tooltip: 'Clicca sulla mappa'
        }
      },
      credits: {
        g3wSuiteFramework: "Applicativo realizzato con il framework OS",
        g3wSuiteDescription: "Pubblica e gestisci i tuoi progetti QGIS sul Web",
        productOf: "Framework sviluppato da"
      },
      logout: "Esci",
      no_other_projects: "Non ci sono altri progetti in questo gruppo cartografico",
      yes: "Si",
      no: "No",
      back: "Indietro",
      backto: "Torna a ",
      changemap: "Cambia Mappa",
      component: "Componente Generico",
      search: "Ricerche",
      no_results: "Nessun risultato trovato",
      print: "Stampa",
      create_print: "Crea Stampa",
      dosearch: "Cerca",
      catalog: "Mappa",
      data: "Dati",
      baselayers: "Basi",
      tools: "Strumenti",
      tree: "Strati",
      legend: "Legenda",
      nobaselayer: "Nessuna mappa di base",
      street_search: "Cerca indirizzo",
      show: "Mostra",
      hide: "Nascondi",
      copy_form_data: "Copia i dati del modulo",
      paste_form_data: "Incolla",
      copy_form_data_from_feature: "Copia i dati dalla mappa",
      error_map_loading: "Errore di caricamento della nuova mappa",
      check_internet_connection_or_server_admin: "Controllare la connessione internet o contattare l'amministratore",
      could_not_load_vector_layers: "Errore di connessione al server: non è stato possibile caricare i vettoriali richiesti",
      server_saver_error: "Errore nel salvataggio sul server",
      server_error: "Si è verificato un errore nella richiesta al server",
      save: "Salva",
      cancel: "Cancella",
      close: "Chiudi",
      add: "Aggiungi",
      exitnosave: "Esci senza salvare",
      annul: "Annulla",
      layer_is_added: "Layer già aggiunto",
      sidebar: {},
      info: {
        title: "Risultati",
        open_link: "Apri documento allegato",
        server_error: "Si è verificato un errore nella richiesta al server",
        no_results: "Nessun risultato per questa interrogazione/ricerca ",
        link_button: "Apri"
      },
      mapcontrols: {
        geolocations: {
          title: "",
          error: "Non è possibile calcolare la tua posizione."
        },
        nominatim: {
          placeholder: "Indirizzo ...",
          noresults: "Nessun risultato",
          notresponseserver: "Il server non risponde"
        },
        add_layer_control: {
          header: "Aggiungi Layer",
          select_projection: "Seleziona il sistema di proiezione del layer",
          select_field_to_show: "Seleziona il campo da visualizzare sulla mappa",
          select_csv_separator: "Seleziona il separatore",
          select_csv_x_field: "Seleziona il campo X",
          select_csv_y_field: "Seleziona il campo Y",
          select_color: "Seleziona il colore del Layer",
          drag_layer: "Trascina il layer in questa area"
        },
        query: {
          input_relation: "Clicca per consultare le relazioni"
        },
        length: {
          tooltip: "Lunghezza"
        },
        area: {
          tooltip: "Area"
        },
        screenshot: {
          error: "Errore nella creazione dello screeshot"
        }
      },
      catalog_items: {
        helptext: "Tasto destro sui singoli layer per accedere alle funzionalità aggiuntive",
        contextmenu: {
          zoomtolayer: "Zoom to Layer",
          open_attribute_table: "Apri la tabella degli attibuti",
          show_metadata: "Metadati",
          styles: "Stili",
          vector_color_menu: "Setta/Cambia Colore"
        }
      },
      dataTable: {
        previous: "Precedente",
        next: "Successivo",
        lengthMenu: "Visualizza _MENU_",
        info: "Visualizzazione _START_ a _END_ su _TOTAL_ righe",
        nodatafilterd: "Nessun risultato trovato",
        infoFiltered: "(Filtrati da _MAX_ total righe)"
      }
    }
  },
  en: {
    translation: {
      default: "default",
      sign_in: "Sign in",
      layer_selection_filter: {
        tools: {
          filter: "Add/Remove Filter",
          nofilter: "Remove Filter",
          invert: "Invert Selection",
          clear: "Clear Selection",
          show_features_on_map: "Show features visible on map"
        }
      },
      sdk: {
        search: {
          all: 'ALL',
          no_results: "No results",
          searching: "Searching ...",
          error_loading: "Error Loading Data",
          layer_not_searchable: "Layer is not searchable",
          layer_not_querable: "Layer is not querable",
          autocomplete: {
            inputshort: {
              pre: "Please enter",
              post: "or more characters"
            }
          }
        },
        print: {
          no_layers: 'No Layer to print',
          scale: "Scale",
          format: "Format",
          rotation: "Rotation",
          download_image: "Download Image",
          fids_instruction: "Values accepted: from 1 to value of [max]. Is possible to insert a range ex. 4-6",
          fids_example: "Ex. 1,4-6 will be printed id 1,4,5,6",
          help: "The layers shown in the print could be those defined on the project and not those displayed on the map"
        },
        querybuilder: {
          search: {
            run: "Run",
            info: "Information",
            delete: "Delete",
            edit: "Edit"
          },
          messages: {
            changed: 'Saved',
            number_of_features: "Number of features"
          },
          panel: {
            button: {
              all: 'ALL',
              save: 'SAVE',
              test: 'TEST',
              clear: 'CLEAR',
              run: 'RUN',
              manual: 'MANUAL'
            },
            layers: 'LAYERS',
            fields: 'FIELDS',
            values: 'VALUES',
            operators: 'OPERATORS',
            expression: 'EXPRESSION'
          },
          error_run: 'An error occurs. Please check the query',
          error_test: "An error occur during query execution",
          delete: 'Do you want delete it?',
          additem: 'Insert the name of the new search'
        },
        errors: {
          layers: {
            load: "Some layers are not available"
          },
          unsupported_format: 'Not supported format',
          add_external_layer: 'Load layer error'
        },
        metadata: {
          title: 'Metadata',
          groups: {
            general: {
              title: 'GENERAL',
              fields: {
                title: 'TITLE',
                name: 'NAME',
                description: "DESCRIPTION",
                abstract: "ABASTRACT",
                keywords: 'KEYWORDS',
                fees: "FEES",
                accessconstraints: "ACCESS CONSTRAINT",
                contactinformation: "CONTACTS",
                subfields: {
                  contactinformation: {
                    contactelectronicmailaddress: "Email",
                    personprimary: 'Refereces',
                    contactvoicetelephone: 'Phone',
                    contactorganization: 'Organization',
                    ContactOrganization: 'Organization',
                    contactposition: 'Position',
                    ContactPosition: 'Position',
                    contactperson: 'Person',
                    ContactPerson: 'Person'
                  }
                },
                wms_url: "WMS"
              }
            },
            spatial: {
              title: 'SPATIAL',
              fields: {
                crs: 'EPSG',
                extent: 'BBOX'
              }
            },
            layers: {
              title: 'LAYERS',
              fields: {
                layers: 'LAYERS',
                subfields: {
                  crs: 'EPSG',
                  bbox: 'BBOX',
                  title: "TITLE",
                  name: 'NAME',
                  geometrytype: 'GEOMETRY',
                  source: 'SOURCE',
                  attributes: 'ATTRIBUTES',
                  abstract: 'ABSTRACT',
                  attribution: 'ATTRIBUTION',
                  keywords: "PAROLE CHIAVE",
                  metadataurl: 'METADATA URL',
                  dataurl: "DATA URL"
                }
              },
              groups: {
                general: 'GENERAL',
                spatial: 'SPATIAL'
              }
            }
          }
        },
        tooltips: {
          relations: {
            form_to_row: "Row View",
            row_to_form: "Form View"
          },
          copy_map_extent_url: 'Copy map view link',
          download_shapefile: "Download Shapefile",
          download_gpx: "Download GPX",
          download_gpkg: "Download GPKG",
          download_csv: "Download CSV",
          download_xls: "Download XLS",
          show_chart: "Show Chart",
          atlas: "Print Atlas"
        },
        mapcontrols: {
          query: {
            tooltip: 'Query layer',
            actions: {
              add_selection: {
                hint: "Add/Remove Selection"
              },
              zoom_to_features_extent: {
                hint: "Zoom to features extent"
              },
              add_features_to_results: {
                hint: "Add/Remove features to results"
              },
              remove_feature_from_results: {
                hint: "Remove feature from results"
              },
              zoom_to_feature: {
                hint: "Zoom to feature"
              },
              relations: {
                hint: "Show Relations"
              },
              relations_charts: {
                hint: "Show relations chart"
              },
              download_features_shapefile: {
                hint: 'Download features Shapefile'
              },
              download_shapefile: {
                hint: 'Download feature Shapefile'
              },
              download_features_gpx: {
                hint: "Download feature GPX"
              },
              download_features_gpkg: {
                hint: "Download feature GPKG"
              },
              download_gpx: {
                hint: "Download feature GPX"
              },
              download_gpkg: {
                hint: "Download feature GPKG"
              },
              download_features_csv: {
                hint: "Download features CSV"
              },
              download_csv: {
                hint: "Download feature CSV"
              },
              download_features_xls: {
                hint: "Download features XLS"
              },
              download_xls: {
                hint: "Download feature XLS"
              },
              atlas: {
                hint: 'Print Atlas'
              }
            }
          },
          querybypolygon: {
            tooltip: 'Query By Polygon',
            no_geometry: 'No geometry on response',
            help: "<h4>Guide - Query By Polygon</h4>\n                  <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Select a polygon layer on TOC.</li>\n                    <li style=\"font-size:0.8em;\">Be sure that layer is visible.</li>\n                    <li style=\"font-size:0.8em;\">Click on a feature of selected layer.</li>\n                  </ul>"
          },
          querybybbox: {
            tooltip: 'Query BBox layer',
            nolayers_visible: 'No querable layers are visible. Please set at least one visible wfs layer to run query',
            help: "<h4>Guide - Query BBox layer</h4>\n                   <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Draw a square on map to query underlined layers on TOC</li>\n                   </ul>"
          },
          addlayer: {
            messages: {
              csv: {
                warning: "The result in the map is partial due to the presence of the below incorrect records list:"
              }
            },
            tooltip: 'Add Layer'
          },
          geolocation: {
            tooltip: 'Geolocation'
          },
          measures: {
            length: {
              tooltip: "Length",
              help: "Click on map to draw the line. Press <br>CANC if you want delete last vertex"
            },
            area: {
              tooltip: "Area",
              help: "Click to draw poligon.Press <br>CANC if you want delete last vertex"
            }
          },
          scale: {
            no_valid_scale: "Invalid Scale"
          }
        },
        relations: {
          relation_data: 'Relation data',
          no_relations_found: 'No relations found',
          back_to_relations: 'Back to relations',
          list_of_relations_feature: 'List of relations of feature',
          error_missing_father_field: "Field is missing"
        },
        workflow: {
          steps: {
            title: 'Steps'
          },
          next: 'Next'
        },
        form: {
          loading: 'Loading ...',
          inputs: {
            messages: {
              errors: {
                picklayer: "No feature selected. Check if layer is on editing or visible at current scale"
              }
            },
            tooltips: {
              picklayer: "Get value from ma layer",
              lonlat: "Click on map to get coordinates"
            },
            input_validation_mutually_exclusive: "Field mutually exclusive with ",
            input_validation_error: "Mandatory Field or wrong data type",
            input_validation_min_field: "Value has to be more/equal to field value  ",
            input_validation_max_field: "Value has to be less/equal to field value ",
            input_validation_exclude_values: "Value has to be unique",
            integer: "integer",
            bigint: "integer",
            text: "text",
            varchar: "text",
            textarea: "text",
            string: "string",
            date: "date",
            float: "float",
            table: "table"
          },
          footer: {
            "required_fields": "Required fields"
          },
          messages: {
            qgis_input_widget_relation: "Use relation specific form to work with relation"
          }
        },
        catalog: {
          menu: {
            wms: {
              title: "",
              copy: "Click here to copy url",
              copied: "Copied"
            },
            download: {
              shp: 'Download Shapefile',
              gpx: 'Download GPX',
              gpkg: 'Download GPKG',
              csv: 'Download CSV',
              xls: 'Download XLS'
            }
          }
        },
        wps: {
          list_process: "List of process",
          tooltip: 'Click on map'
        }
      },
      credits: {
        g3wSuiteFramework: "Application based on OS framework",
        g3wSuiteDescription: "Publish and manage your QGIS projects on the web",
        productOf: "Framework developed by"
      },
      logout: "Logout",
      no_other_projects: "No more project for this group",
      yes: "Yes",
      no: "No",
      back: "Back",
      backto: "Back to ",
      changemap: "Change Map",
      component: "Generic Component",
      search: "Search",
      no_results: "No results found",
      print: "Print",
      create_print: "Create Print",
      dosearch: "Search",
      catalog: "Map",
      data: "Data",
      baselayers: "Base",
      tools: "Tools",
      tree: "Layers",
      legend: "Legend",
      nobaselayer: "No basemap",
      street_search: "Find Address",
      show: "Show",
      hide: "Hide",
      copy_form_data: "Copy data",
      paste_form_data: "Paste",
      copy_form_data_from_feature: "Copy data from map",
      error_map_loading: "Error occurs loading map",
      check_internet_connection_or_server_admin: "Check internet connection or contact admin",
      could_not_load_vector_layers: "Connection error: Layers can be loaded",
      server_saver_error: "Error in server saving",
      server_error: "Server connection error",
      save: "Save",
      cancel: "Cancel",
      close: "Close",
      add: "Add",
      exitnosave: "Exit without save",
      annul: "Cancel",
      layer_is_added: "Layer already added",
      sidebar: {
        backtopreviouspanel: "Back",
        closepanel: "Chiudi"
      }, info: {
        title: "Results",
        open_link: "Open attached document",
        server_error: "An error occurred from server",
        no_results: "No results found for this query/search",
        link_button: "Open"
      },
      mapcontrols: {
        geolocations: {
          error: "Can't get your position"
        },
        nominatim: {
          placeholder: "Address ...",
          noresults: "No results",
          notresponseserver: "No response from server"
        },
        add_layer_control: {
          header: "Add Layer",
          select_projection: "Select layer projection",
          select_field_to_show: "Select Field to show on map",
          select_csv_separator: "Select delimiter",
          select_csv_x_field: "Select X field",
          select_csv_y_field: "Select Y field",
          select_color: "Select Layer Color",
          drag_layer: "Drag and drop layer here"
        },
        query: {
          input_relation: "Click to show relations"
        },
        length: {
          tooltip: "Length"
        },
        area: {
          tooltip: "Area"
        },
        screenshot: {
          error: "Screenshot error creation"
        }
      },
      catalog_items: {
        helptext: "Right-click on individual layer to access additional features",
        contextmenu: {
          zoomtolayer: "Zoom to Layer",
          open_attribute_table: "Open Attribute Table",
          show_metadata: "Metadata",
          styles: 'Styles',
          vector_color_menu: "Set/Change Color"
        }
      },
      dataTable: {
        previous: "Previous",
        next: "Next",
        lengthMenu: "Show _MENU_",
        info: "Showing _START_ to _END_ of _TOTAL_ entries",
        no_data: "No data",
        nodatafilterd: "No matching records found",
        infoFiltered: "(filtered from _MAX_ total records)"
      }
    }
  },
  fi: {
    translation: {
      default: "oletuksena",
      sign_in: "Kirjaudu sisään",
      layer_selection_filter: {
        tools: {
          filter: "Lisätä/Poista Suodattaa",
          nofilter: "Poista Suodattaa",
          invert: "Käänteinen Valinta",
          clear: "Peruuttaa Valinta",
          show_features_on_map: "Näytä kartalla näkyvät ominaisuudet"
        }
      },
      sdk: {
        search: {
          all: 'KAIKKI',
          no_results: "Ei tuloksia",
          searching: "Haetaan ...",
          error_loading: "Virhe ladattaessa tietoja.",
          layer_not_searchable: "Taso ei ole haettavissa.",
          layer_not_querable: "Tasolle ei voi suorittaa kyselyitä.",
          autocomplete: {
            inputshort: {
              pre: "Syötä",
              post: "tai useampi merkki"
            }
          }
        },
        print: {
          no_layers: 'Ei tulostettavia tasoja',
          scale: "Mittakaava",
          format: "Formaatti",
          rotation: "Kierto",
          download_image: "Lataa kuva",
          fids_instruction: "Hyväksytyt arvot: yhdestä arvoon [max]. Salittua syöttää myös väli, esim. 4-6.",
          fids_example: "Esimerkiksi 1,4-6 tulostuu id 1,4,5,6.",
          help: "Tulosteessa esiintyvät tasot voivat olla projektissa määriteltyjä ei kartalla esiintyviä."
        },
        querybuilder: {
          search: {
            run: "Suorita",
            info: "Informaatio",
            delete: "Poista",
            edit: "Muokkaa"
          },
          messages: {
            changed: 'Tallennettu',
            number_of_features: "Ominaisuuksien lukumäärä"
          },
          panel: {
            button: {
              all: 'KAIKKI',
              save: 'TALLENNA',
              test: 'TESTI',
              clear: 'TYHJENNÄ',
              run: 'SUORITA',
              manual: 'MANUAALINEN'
            },
            layers: 'TASOT',
            fields: 'KENTÄT',
            values: 'ARVOT',
            operators: 'OPERAATTORIT',
            expression: 'LAUSEKE'
          },
          error_run: 'Tapahtui virhe. Tarkista kysely.',
          error_test: "Kyselyä suorittaessa tapahtui virhe.",
          delete: 'Haluatko poistaa sen?',
          additem: 'Anna nimi uudelle haulle.'
        },
        errors: {
          layers: {
            load: "Jotkin tasot eivät ole saatavilla."
          },
          unsupported_format: 'Ei tuettu formaatti',
          add_external_layer: 'Tason latausvirhe'
        },
        metadata: {
          title: 'Metatiedot',
          groups: {
            general: {
              title: 'YLEINEN',
              fields: {
                title: 'OTSIKKO',
                name: 'NIMI',
                description: "KUVAUS",
                abstract: "TIIVISTELMÄ",
                keywords: 'AVAINSANAT',
                fees: "MAKSUT",
                accessconstraints: "PÄÄSYRAJOITUKSET",
                contactinformation: "YHTEYSTIEDOT",
                subfields: {
                  contactinformation: {
                    contactelectronicmailaddress: "Sähköposti",
                    personprimary: 'Viitteet',
                    contactvoicetelephone: 'Puhelin',
                    contactorganization: 'Organisaatio',
                    ContactOrganization: 'Organisaatio',
                    contactposition: 'Asema',
                    ContactPosition: 'Asema',
                    contactperson: 'Yhteyshenkilö',
                    ContactPerson: 'Yhteyshenkilö'
                  }
                },
                wms_url: "WMS"
              }
            },
            spatial: {
              title: 'SPATIAL',
              fields: {
                crs: 'EPSG',
                extent: 'BBOX'
              }
            },
            layers: {
              title: 'TASOT',
              fields: {
                layers: 'TASOT',
                subfields: {
                  crs: 'EPSG',
                  bbox: 'BBOX',
                  title: "OTSIKKO",
                  name: 'NIMI',
                  geometrytype: 'GEOMETRIA',
                  source: 'LÄHDE',
                  attributes: 'ATTRIBUUTIT',
                  abstract: 'TIIVISTELMÄ',
                  attribution: 'ATTRIBUUTIO',
                  keywords: "AVAINSANAT",
                  metadataurl: 'METATIEDON URL',
                  dataurl: "DATA URL"
                }
              },
              groups: {
                general: 'YLEINEN',
                spatial: 'SPATIAL'
              }
            }
          }
        },
        tooltips: {
          relations: {
            form_to_row: "Rivinäkymä",
            row_to_form: "Taulukkonäkymä"
          },
          copy_map_extent_url: 'Kopioi kartan katselulinkki',
          download_shapefile: "Lataa SHP-tiedosto",
          download_gpx: "Lataa GPX-tiedosto",
          download_gpkg: "Lataa GPKG-tiedosto",
          download_csv: "Lataa CSV-tiedosto",
          download_xls: "Lataa XLS-tiedosto",
          show_chart: "Näytä kaavio",
          atlas: "Tulosta Atlas"
        },
        mapcontrols: {
          query: {
            tooltip: 'Kyselytaso',
            actions: {
              add_selection: {
                hint: 'Lisää/Poista valinta'
              },
              zoom_to_features_extent: {
                hint: "Tarkenna ominaisuuden laajuuteen"
              },
              add_features_to_results: {
                hint: "Add/Remove features to results"
              },
              remove_feature_from_results: {
                hint: "Remove feature from results"
              },
              zoom_to_feature: {
                hint: "Tarkenna ominaisuuteen"
              },
              relations: {
                hint: "Näytä relaatiot"
              },
              relations_charts: {
                hint: "Näytä relaatiokaavio"
              },
              download_features_shapefile: {
                hint: 'Lataa ominaisuuden SHP-tiedosto'
              },
              download_shapefile: {
                hint: 'Lataa ominaisuuden SHP-tiedosto'
              },
              download_features_gpx: {
                hint: "Lataa ominaisuuden GPX-tiedosto"
              },
              download_features_gpkg: {
                hint: "Lataa ominaisuuden GPKG-tiedosto"
              },
              download_gpx: {
                hint: "Lataa ominaisuuden GPX-tiedosto"
              },
              download_gpkg: {
                hint: "Lataa ominaisuuden GPKG-tiedosto"
              },
              download_features_csv: {
                hint: "Lataa ominaisuuden CSV-tiedosto"
              },
              download_csv: {
                hint: "Lataa ominaisuuden CSV-tiedosto"
              },
              download_features_xls: {
                hint: "Lataa ominaisuuden XLS-tiedosto"
              },
              download_xls: {
                hint: "Lataa ominaisuuden XLS-tiedosto"
              },
              atlas: {
                hint: 'Tulosta Atlas'
              }
            }
          },
          querybypolygon: {
            tooltip: 'Kysely monikulmiolla',
            no_geometry: 'No geometry on response',
            help: "<h4>Ohje - Kysely monikulmiolla</h4>\n                  <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Valitse monikulmiotaso luettelosta.</li>\n                    <li style=\"font-size:0.8em;\">Tarkista, ett\xE4 taso on n\xE4kyvill\xE4.</li>\n                    <li style=\"font-size:0.8em;\">Valitse ominaisuus valitulla tasolla.</li>\n                  </ul>"
          },
          querybybbox: {
            tooltip: 'Tasoon kohdituva BBox-kysely',
            nolayers_visible: 'Ei kyseltäviä tasoja näkyvillä. Aseta vähintään yksi WFS-taso näkyväksi suorittaaksesi haun.',
            help: "<h4>Ohje - Tasoon kohdistuva BBox-kysely</h4>\n                   <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Piirr\xE4 suorakulmio kartalle suorittaaksesi kyselyn luettelossa alleviivatuille tasoille.</li>\n                   </ul>"
          },
          addlayer: {
            messages: {
              csv: {
                warning: "The result in the map is partial due to the presence of the below incorrect records list:"
              }
            },
            tooltip: 'Lisää taso'
          },
          geolocation: {
            tooltip: 'Maantieteellinen sijainti'
          },
          measures: {
            length: {
              tooltip: "Pituus",
              help: "Piirrä murtoviiva kartalle. Paina <br>CANC, mikäli haluat poistaa edellisen pisteen."
            },
            area: {
              tooltip: "Alue",
              help: "Piirrä monikulmio kartalle. Paina <br>CANC, mikäli haluat poistaa edellisen pisteen."
            }
          },
          scale: {
            no_valid_scale: "Väärä mittakaava"
          }
        },
        relations: {
          relation_data: 'Relaation tiedot',
          no_relations_found: 'Relaatiota ei löytynyt.',
          back_to_relations: 'Takaisin relaatioihin',
          list_of_relations_feature: 'Lista ominaisuuden relaatioista',
          error_missing_father_field: "Kenttä puuttu"
        },
        workflow: {
          steps: {
            title: 'Vaiheet'
          },
          next: "Seuraava"
        },
        form: {
          loading: 'Ladataan...',
          inputs: {
            messages: {
              errors: {
                picklayer: "Ominaisuuksia ei valiitu. Tarkista, että taso on muokattavissa tai näkyvissä nykyisellä mittakaavalla."
              }
            },
            tooltips: {
              picklayer: "Valitse arvo karttatasolta",
              lonlat: "Click on map to get coordinates"
            },
            input_validation_mutually_exclusive: "Kenttä toisensa poissulkeva.",
            input_validation_error: "Pakollinen kenttä tai väärä tietotyyppi.",
            input_validation_min_field: "Arvon tulee olla suurempi tai yhtäsuuri kuin kentän arvo.",
            input_validation_max_field: "Arvon tulee olla pienempi tai yhtäsuuri kuin kentän arvo.",
            input_validation_exclude_values: "Arvon tulee olla uniikki.",
            integer: "kokonaisluku",
            bigint: "kokonaisluku",
            text: "teksti",
            varchar: "teksti",
            textarea: "teksti",
            string: "merkkijono",
            date: "päiväys",
            float: "liukuluku",
            table: "taulukko"
          },
          footer: {
            "required_fields": "Vaaditut kentät"
          },
          messages: {
            qgis_input_widget_relation: "Käytä relaatioiden määrittämiseen tähän tarkoitettua toimintoa"
          }
        },
        catalog: {
          menu: {
            wms: {
              title: "",
              copy: "Paina tästä kopioidaksesi url:n.",
              copied: "Kopioitu."
            },
            download: {
              shp: 'Lataa SHP-tiedosto',
              gpx: 'Lataa GPX-tiedosto',
              gpkg: 'Lataa GPKG-tiedosto',
              csv: 'Lataa CSV-tiedosto',
              xls: 'Lataa XLS-tiedosto'
            }
          }
        },
        wps: {
          list_process: "Lista prosesseista",
          tooltip: 'Valitse kartalta'
        }
      },
      credits: {
        g3wSuiteFramework: "Sovellus perustuu OS framework",
        g3wSuiteDescription: "Julkaise ja hallinnoi QGIS-projekteja verkossa.",
        productOf: "Frameworkin on kehittänyt"
      },
      logout: "Kirjaudu ulos",
      no_other_projects: "Ei projekteja tälle ryhmälle",
      yes: "Kyllä",
      no: "Ei",
      back: "Palaa",
      backto: "Takaisin ",
      changemap: "Vaihda karttaa",
      component: "Yleinen komponentti",
      search: "Hae",
      no_results: "Ei hakutuloksia",
      print: "Tulosta",
      create_print: "Luo tuloste",
      dosearch: "Hae",
      catalog: "Kartta",
      data: "Data",
      baselayers: "Taustakartta",
      tools: "Työkalut",
      tree: "Tasot",
      legend: "Merkintöjen selite",
      nobaselayer: "Ei taustakarttaa",
      street_search: "Hae osoite",
      show: "Näytä",
      hide: "Piilota",
      copy_form_data: "Kopioi tiedot",
      paste_form_data: "Liitä",
      copy_form_data_from_feature: "Kopioi tiedot kartalta",
      error_map_loading: "Virhe ladattessa karttaa",
      check_internet_connection_or_server_admin: "Tarkista internetyhteys tai ota yhteyttä ylläpitäjään.",
      could_not_load_vector_layers: "Yhteysvirhe, tasoja ei voida ladata.",
      server_saver_error: "Virhe tallentaessa palvelimelle.",
      server_error: "Yhteysvirhe palvelimeen",
      save: "Tallenna",
      cancel: "Peruuta",
      close: "Sulje",
      add: "Lisää",
      exitnosave: "Poistu tallentamatta",
      annul: "Peruuta",
      layer_is_added: "Taso on jo lisätty.",
      sidebar: {},
      info: {
        title: "Tulokset",
        open_link: "Avaa liitetiedosto",
        server_error: "Palvelimella tapahtui virhe.",
        no_results: "Ei tuloksia haulle/kyselylle.",
        link_button: "Avaa"
      },
      mapcontrols: {
        geolocations: {
          error: "Sijaintiasi ei saada"
        },
        nominatim: {
          placeholder: "Osoite ...",
          noresults: "Ei tuloksia",
          notresponseserver: "Ei vastausta palvelimelta"
        },
        add_layer_control: {
          header: "Lisää taso",
          select_projection: "Valitse tason projektio",
          select_field_to_show: "Select Field to show on map",
          select_csv_separator: "Select delimiter",
          select_csv_x_field: "Select X field",
          select_csv_y_field: "Select Y field",
          select_color: "Valitse tason väri",
          drag_layer: "Vedä ja pudota taso tähän"
        },
        query: {
          input_relation: "Paina näyttääksesi relaatiot"
        },
        length: {
          tooltip: "Pituus"
        },
        area: {
          tooltip: "Pinta-ala"
        },
        screenshot: {
          error: "Screenshot error creation"
        }
      },
      catalog_items: {
        helptext: "Napsauta hiiren kakkospainikkeella yksittäistä tasoa päästäksesi lisäominaisuuksiin.",
        contextmenu: {
          zoomtolayer: "Tarkenna tasoon",
          open_attribute_table: "Avaa attribuuttitaulu",
          show_metadata: "Metatiedot",
          styles: "Tyylejä",
          vector_color_menu: "Aseta/muuta väriä"
        }
      },
      dataTable: {
        previous: "Edellinen",
        next: "Seuraava",
        lengthMenu: "Show _MENU_ items",
        info: "Showing _START_ to _END_ of _TOTAL_ entries",
        no_data: "Ei tietoja",
        nodatafilterd: "Vastaavia tietueita ei löytynyt",
        infoFiltered: "(filtered from _MAX_ total records)"
      }
    }
  },
  se: {
    translation: {
      default: "standard",
      sign_in: "Logga in",
      layer_selection_filter: {
        tools: {
          filter: "Lägg till/Avlägsna Filtrera",
          nofilter: "Avlägsna Filtrera",
          invert: "Invertera Urval",
          clear: "Annullera Urval",
          show_features_on_map: "Visa funktioner som är synliga på kartan"
        }
      },
      sdk: {
        search: {
          all: 'ALLA',
          no_results: "Inga resultat",
          searching: "Sökning ...",
          error_loading: "Fel vid laddning av uppgifter.",
          layer_not_searchable: "Nivån kan inte sökas.",
          layer_not_querable: "Förfrågningar kan inte göras på nivån.",
          autocomplete: {
            inputshort: {
              pre: "Mata in",
              post: "eller flera tecken"
            }
          }
        },
        print: {
          no_layers: 'Inga nivåer att skriva ut',
          scale: "Skala",
          format: "Format",
          rotation: "Rotation",
          download_image: "Ladda ner bild",
          fids_instruction: "Godkända värden: Från ett till värdet [max]. Mellanslag tillåts, t.ex. 4-6.",
          fids_example: "Exempelvis 1,4-6 skriver ut id 1,4,5,6.",
          help: "Nivåerna på utskriften kan vara specificerade i ett projekt inte sådana som visas på karta."
        },
        querybuilder: {
          search: {
            run: "Utför",
            info: "Information",
            delete: "Ta bort",
            edit: "Redigera"
          },
          messages: {
            changed: 'Sparat',
            number_of_features: "Antal funktione"
          },
          panel: {
            button: {
              all: 'ALLA',
              save: 'SPARA',
              test: 'TEST',
              clear: 'TÖM',
              run: 'UTFÖR',
              manual: 'MANUELL'
            },
            layers: 'NIVÅER',
            fields: 'FÄLT',
            values: 'VÄRDEN',
            operators: 'OPERATÖRER',
            expression: 'KLAUSUL'
          },
          error_run: 'Ett fel inträffade. Kontrollera förfrågan.',
          error_test: "Ett fel inträffade när förfrågan utfördes.",
          delete: 'Vill du ta bort den?',
          additem: 'Ge den nya sökningen ett namn.'
        },
        errors: {
          layers: {
            load: "Vissa nivåer är inte tillgängliga."
          },
          unsupported_format: 'Formatet stöds inte',
          add_external_layer: 'Fel vid laddning av nivån'
        },
        metadata: {
          title: 'Metadata',
          groups: {
            general: {
              title: 'ALLMÄN',
              fields: {
                title: 'RUBRIK',
                name: 'NAMN',
                description: "BESKRIVNING",
                abstract: "SAMMANDRAG",
                keywords: 'NYCKELORD',
                fees: "AVGIFTER",
                accessconstraints: "ÅTKOMSTBEGRÄNSNINGAR",
                contactinformation: "KONTAKTUPPGIFTER",
                subfields: {
                  contactinformation: {
                    contactelectronicmailaddress: "E-post",
                    personprimary: 'Referenser',
                    contactvoicetelephone: 'Telefon',
                    contactorganization: 'Organisation',
                    ContactOrganization: 'Organisation',
                    contactposition: 'Ställning',
                    ContactPosition: 'Ställning',
                    contactperson: 'Kontaktperson',
                    ContactPerson: 'Kontaktperson'
                  }
                },
                wms_url: "WMS"
              }
            },
            spatial: {
              title: 'SPATIAL',
              fields: {
                crs: 'EPSG',
                extent: 'BBOX'
              }
            },
            layers: {
              title: 'NIVÅER',
              fields: {
                layers: 'NIVÅER',
                subfields: {
                  crs: 'EPSG',
                  bbox: 'BBOX',
                  title: "RUBRIK",
                  name: 'NAMN',
                  geometrytype: 'GEOMETRI',
                  source: 'KÄLLA',
                  attributes: 'ATTRIBUT',
                  abstract: 'SAMMANDRAG',
                  attribution: 'TILLSKRIVNING',
                  keywords: "NYCKELORD",
                  metadataurl: 'METADATA URL',
                  dataurl: "DATA URL"
                }
              },
              groups: {
                general: 'ALLMÄN',
                spatial: 'SPATIAL'
              }
            }
          }
        },
        tooltips: {
          relations: {
            form_to_row: "Radvy",
            row_to_form: "Tabellvy"
          },
          copy_map_extent_url: 'Kopiera länk till karta',
          download_shapefile: "Ladda SHP-fil",
          download_gpx: "Ladda GPX-fil",
          download_gpkg: "Ladda GPKG-fil",
          download_csv: "Ladda CSV-fil",
          download_xls: "Ladda XLS-fil",
          show_chart: "Visa diagram", //Tero 9.12.2020
          atlas: "Skriv ut Atlas"
        },
        mapcontrols: {
          query: {
            tooltip: 'Förfrågningsnivå',
            actions: {
              add_selection: {
                hint: "Lägg till/Avlägsna Urval"
              },
              zoom_to_features_extent: {
                hint: "Zooma till egenskapens omfattning"
              },
              add_features_to_results: {
                hint: "Add/Remove features to results"
              },
              remove_feature_from_results: {
                hint: "Remove feature from results"
              },
              zoom_to_feature: {
                hint: "Zooma till egenskapen"
              },
              relations: {
                hint: "Visa relationerna"
              },
              relations_charts: {
                hint: "Visa relationsdiagrammet" //Tero 9.12.2020
              },
              download_features_shapefile: {
                hint: 'Ladda egenskapens SHP-fil'
              },
              download_shapefile: {
                hint: 'Ladda egenskapens SHP-fil'
              },
              download_features_gpx: {
                hint: "Ladda egenskapens GPX-fil"
              },
              download_features_gpkg: {
                hint: "Ladda egenskapens GPKG-fil"
              },
              download_gpx: {
                hint: "Ladda egenskapens GPX-fil"
              },
              download_gpkg: {
                hint: "Ladda egenskapens GPKG-fil"
              },
              download_features_csv: {
                hint: "Ladda egenskapens CSV-fil"
              },
              download_csv: {
                hint: "Ladda egenskapens CSV-fil"
              },
              download_features_xls: {
                hint: "Ladda egenskapens XLS-fil"
              },
              download_xls: {
                hint: "Ladda egenskapens XLS-fil"
              },
              atlas: {
                hint: 'Skriv ut Atlas'
              }
            }
          },
          querybypolygon: {
            tooltip: 'Förfrågan med polygon',
            no_geometry: 'No geometry on response',
            help: "<h4>Ohje - F\xF6rfr\xE5gan med polygon</h4>\n                  <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">V\xE4lj polygonniv\xE5 i listan.</li>\n                    <li style=\"font-size:0.8em;\">Kontrollera att niv\xE5n \xE4r synlig.</li>\n                    <li style=\"font-size:0.8em;\">V\xE4lj egenskap p\xE5 \xF6nskad niv\xE5.</li>\n                  </ul>"
          },
          querybybbox: {
            tooltip: 'BBox-förfrågan som riktar sig till en nivå',
            nolayers_visible: 'Inga nivåer som förfrågningar kan riktas till. Gör minst en WFS-nivå synlig för att kunna utföra sökningen.',
            help: "<h4>Ohje - BBox-f\xF6rfr\xE5gan som riktar sig till niv\xE5n</h4>\n                   <ul style=\"padding-left: 10px;\">\n                    <li style=\"font-size:0.8em;\">Rita upp en rektangel p\xE5 kartan f\xF6r att utf\xF6ra f\xF6rfr\xE5gan p\xE5 de i listan understreckade niv\xE5erna.</li>\n                   </ul>"
          },
          addlayer: {
            messages: {
              csv: {
                warning: "The result in the map is partial due to the presence of the below incorrect records list:"
              }
            },
            tooltip: 'Lägg till nivå'
          },
          geolocation: {
            tooltip: 'Geografiskt läge'
          },
          measures: {
            length: {
              tooltip: "Längd",
              help: "Rita upp en bruten linje på kartan. Tryck <br>CANC, om du vill ta bort föregående punkt."
            },
            area: {
              tooltip: "Område",
              help: "Rita upp en polygon på kartan. Tryck <br>CANC, om du vill ta bort föregående punkt."
            }
          },
          scale: {
            no_valid_scale: "Fel skala"
          }
        },
        relations: {
          relation_data: 'Relationsuppgifter',
          no_relations_found: 'Inga relationer hittades.',
          back_to_relations: 'Tillbaka till relationerna',
          list_of_relations_feature: 'Lista på egenskapens relationer',
          error_missing_father_field: "Fält saknas"
        },
        workflow: {
          steps: {
            title: 'Skeden'
          },
          next: "Nästa"

        },
        form: {
          loading: 'Laddning...',
          inputs: {
            messages: {
              errors: {
                picklayer: "Inga egenskaper har valts. Kontroller att nivån kan redigeras eller att den syns med nuvarande skala."
              }
            },
            tooltips: {
              picklayer: "Välj värde på kartnivå",
              lonlat: "Click on map to get coordinates"
            },
            input_validation_mutually_exclusive: "Fälten utesluter varandra.",
            input_validation_error: "Obligatoriskt fält eller fel datatyp.",
            input_validation_min_field: "Värdet ska vara större eller lika stort som värdet i fältet.",
            input_validation_max_field: "Värdet ska vara mindre eller lika stort som värdet i fältet.",
            input_validation_exclude_values: "Värdet ska vara unikt.",
            integer: "heltal",
            bigint: "heltal",
            text: "text",
            varchar: "text",
            textarea: "text",
            string: "teckensträng",
            date: "datum",
            float: "flyttal",
            table: "tabell"
          },
          footer: {
            "required_fields": "Obligatoriska fält"
          },
          messages: {
            qgis_input_widget_relation: "Använd den specifika funktinen för att bestämma relationer"
          }
        },
        catalog: {
          menu: {
            wms: {
              title: "",
              copy: "Tryck här för att kopiera url.",
              copied: "Kopierad."
            },
            download: {
              shp: 'Ladda SHP-fil',
              gpx: 'Ladda GPX-fil',
              gpkg: 'Ladda GPKG-fil',
              csv: 'Ladda CSV-fil',
              xls: 'Ladda XLS-fil'
            }
          }
        },
        wps: {
          list_process: "Lista på processer",
          tooltip: 'Välj på kartan'
        }
      },
      credits: {
        g3wSuiteFramework: "Tillämpningen baserar på OS framework",
        g3wSuiteDescription: "Publicera och hantera QGIS-projekt på nätet.",
        productOf: "Framework har utvecklats av"
      },
      logout: "Logga ut",
      no_other_projects: "Inga projekt för denna grupp",
      yes: "Ja",
      no: "Nej",
      back: "Gå tillbaka",
      backto: "Tillbaka ",
      changemap: "Byt karta",
      component: "Allmän komponent",
      search: "Sök",
      no_results: "Inga sökresultat",
      print: "Skriv ut",
      create_print: "Skapa utskrift",
      dosearch: "Sök",
      catalog: "Karta",
      data: "Data",
      baselayers: "Bakgrundskarta",
      tools: "Verktyg",
      tree: "Nivåer",
      legend: "Förklaring till beteckningarna",
      nobaselayer: "Ingen bakgrundskarta",
      street_search: "Sök adress",
      show: "Visa",
      hide: "Dölj",
      copy_form_data: "Kopiera uppgifterna",
      paste_form_data: "Infoga",
      copy_form_data_from_feature: "Kopiera uppgifter från kartan",
      error_map_loading: "Fel vid laddning av kartan",
      check_internet_connection_or_server_admin: "Kontrollera internetanslutningen eller kontakta administratören.",
      could_not_load_vector_layers: "Fel i anslutningen, nivåer kan inte laddas.",
      server_saver_error: "Fel vid lagring på servern.",
      server_error: "Fel på anslutningen till servern",
      save: "Spara",
      cancel: "Ånga",
      close: "Stäng",
      add: "Lägg till",
      exitnosave: "Lämna programmet utan att spara",
      annul: "Ångra",
      layer_is_added: "Nivån har redan lagts till.",
      sidebar: {},
      info: {
        title: "Resultat",
        open_link: "Öppna filbilaga",
        server_error: "Ett fel uppstod på servern.",
        no_results: "Inga resultat för sökningen/förfrågan.",
        link_button: "Öppna"
      },
      mapcontrols: {
        geolocations: {
          error: "Du kan inte lokaliseras"
        },
        nominatim: {
          placeholder: "Adress ...",
          noresults: "Inga resultat",
          notresponseserver: "Inget svar från servern"
        },
        add_layer_control: {
          header: "Lägg till nivå",
          select_projection: "Välj projektion för nivån",
          select_field_to_show: "Select Field to show on map",
          select_csv_separator: "Select delimiter",
          select_csv_x_field: "Select X field",
          select_csv_y_field: "Select Y field",
          select_color: "Välj färg på nivån",
          drag_layer: "Dra och släpp nivån hit"
        },
        query: {
          input_relation: "Tryck för att visa relationerna"
        },
        length: {
          tooltip: "Längd"
        },
        area: {
          tooltip: "Areal"
        },
        screenshot: {
          error: "Screenshot error creation"
        }
      },
      catalog_items: {
        helptext: "Högerklicka på en enskild nivå för att komma till tilläggsegenskaperna.",
        contextmenu: {
          zoomtolayer: "Zooma till nivå",
          open_attribute_table: "Öppna attributtabellen",
          show_metadata: "Metadata",
          styles: "Stilar",
          vector_color_menu: "Ställ in/ändra färg"
        }
      },
      dataTable: {
        previous: "Föregående",
        next: "Nästa",
        lengthMenu: "Show _MENU_ items",
        info: "Showing _START_ to _END_ of _TOTAL_ entries",
        no_data: "Inga uppgifter",
        nodatafilterd: "Inga motsvarande poster hittades",
        infoFiltered: "(filtered from _MAX_ total records)"
      }
    }
  }
};

module.exports = translations;

},{}],737:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secrets = exports.utils = exports.server = exports.client = exports._i18n = exports.tools = exports.plugins = undefined;

var _keys = require('config/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var apptitle = "G3W Client";
var supportedLng = ['en', 'it'];

var plugins = exports.plugins = {};

var tools = exports.tools = {
  tools: []
};

// get message from internalization
var _i18n = exports._i18n = {
  resources: require('./i18n/index.js')
};

var client = exports.client = {
  debug: true,
  local: false
};

var server = exports.server = {
  urls: {
    baseurl: '/',
    ows: 'ows',
    api: 'api',
    initconfig: 'api/initconfig',
    config: 'api/config'
  }
};

var utils = exports.utils = {
  merge: function merge(type) {
    if (type) {
      console.log(CONFIG);
    }
  }
};

var secrets = exports.secrets = {
  keys: _keys2.default
};

exports.default = {
  apptitle: apptitle,
  secrets: secrets,
  client: client,
  server: server,
  plugins: plugins,
  supportedLng: supportedLng,
  tools: tools,
  _i18n: _i18n,
  utils: utils
};

},{"./i18n/index.js":736,"config/keys":738}],738:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var BING_API_KEY = exports.BING_API_KEY = 'Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn';
exports.default = {
  BING_API_KEY: BING_API_KEY
};

},{}]},{},[734]);
