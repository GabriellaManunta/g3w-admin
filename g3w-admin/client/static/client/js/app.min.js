(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
var inserted = exports.cache = {}

function noop () {}

exports.insert = function (css) {
  if (inserted[css]) return noop
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return function () {
    document.getElementsByTagName('head')[0].removeChild(elem)
    inserted[css] = false
  }
}

},{}],3:[function(require,module,exports){
(function (process){(function (){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
file api file interface for external plugins


/**
 * @file ORIGINAL SOURCE: src/app/core/utils/geo.js@3.8
 */


/**
 * Single File Components
 */


/**
 * CORE modules
 */


//MIXINS


var _constant = require('app/constant');

var _constant2 = _interopRequireDefault(_constant);

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _addZValueToOLFeatureGeometry = require('utils/addZValueToOLFeatureGeometry');

var _is3DGeometry = require('utils/is3DGeometry');

var _removeZValueToOLFeatureGeometry = require('utils/removeZValueToOLFeatureGeometry');

var _sanitizeFidFeature = require('utils/sanitizeFidFeature');

var _getOLGeometry = require('utils/getOLGeometry');

var _isMultiGeometry = require('utils/isMultiGeometry');

var _getAllPointGeometryTypes = require('utils/getAllPointGeometryTypes');

var _isPointGeometryType = require('utils/isPointGeometryType');

var _getAllLineGeometryTypes = require('utils/getAllLineGeometryTypes');

var _isLineGeometryType = require('utils/isLineGeometryType');

var _getAllPolygonGeometryTypes = require('utils/getAllPolygonGeometryTypes');

var _isPolygonGeometryType = require('utils/isPolygonGeometryType');

var _coordinatesToGeometry = require('utils/coordinatesToGeometry');

var _getDefaultLayerStyle = require('utils/getDefaultLayerStyle');

var _createLayerStyle = require('utils/createLayerStyle');

var _createFeatureFromCoordinates = require('utils/createFeatureFromCoordinates');

var _createFeatureFromBBOX = require('utils/createFeatureFromBBOX');

var _createFeatureFromGeometry = require('utils/createFeatureFromGeometry');

var _createFeatureFromFeatureObject = require('utils/createFeatureFromFeatureObject');

var _createOlLayer = require('utils/createOlLayer');

var _createWMSLayer = require('utils/createWMSLayer');

var _createVectorLayerFromFeatures = require('utils/createVectorLayerFromFeatures');

var _createVectorLayerFromGeometry = require('utils/createVectorLayerFromGeometry');

var _createVectorLayerFromFile = require('utils/createVectorLayerFromFile');

var _createStyleFunctionToVectorLayer = require('utils/createStyleFunctionToVectorLayer');

var _createSelectedStyle = require('utils/createSelectedStyle');

var _getAlphanumericPropertiesFromFeature = require('utils/getAlphanumericPropertiesFromFeature');

var _getFormDataExpressionRequestFromFeature = require('utils/getFormDataExpressionRequestFromFeature');

var _convertFeatureToGEOJSON = require('utils/convertFeatureToGEOJSON');

var _getQueryLayersPromisesByBBOX = require('utils/getQueryLayersPromisesByBBOX');

var _getQueryLayersPromisesByGeometry = require('utils/getQueryLayersPromisesByGeometry');

var _getQueryLayersPromisesByCoordinates = require('utils/getQueryLayersPromisesByCoordinates');

var _transformBBOX = require('utils/transformBBOX');

var _parseQueryLayersPromiseResponses = require('utils/parseQueryLayersPromiseResponses');

var _getMapLayerById = require('utils/getMapLayerById');

var _getMapLayersByFilter = require('utils/getMapLayersByFilter');

var _areCoordinatesEqual = require('utils/areCoordinatesEqual');

var _getFeaturesFromResponseVectorApi = require('utils/getFeaturesFromResponseVectorApi');

var _convertVectorFeaturesToResultFeatures = require('utils/convertVectorFeaturesToResultFeatures');

var _splitGeometryLine = require('utils/splitGeometryLine');

var _splitFeatures = require('utils/splitFeatures');

var _splitFeature = require('utils/splitFeature');

var _getPointFeaturesfromGeometryVertex = require('utils/getPointFeaturesfromGeometryVertex');

var _getVertexLength = require('utils/getVertexLength');

var _isSameBaseGeometryType = require('utils/isSameBaseGeometryType');

var _isSingleGeometry = require('utils/isSingleGeometry');

var _singleGeometriesToMultiGeometry = require('utils/singleGeometriesToMultiGeometry');

var _multiGeometryToSingleGeometries = require('utils/multiGeometryToSingleGeometries');

var _convertSingleMultiGeometry = require('utils/convertSingleMultiGeometry');

var _dissolve = require('utils/dissolve');

var _within = require('utils/within');

var _intersects = require('utils/intersects');

var _findSelfIntersects = require('utils/findSelfIntersects');

var _normalizeEpsg = require('utils/normalizeEpsg');

var _crsToCrsObject = require('utils/crsToCrsObject');

var _convertDMToDEG = require('utils/convertDMToDEG');

var _convertDEGToDM = require('utils/convertDEGToDM');

var _convertDMSToDEG = require('utils/convertDMSToDEG');

var _convertDEGToDMS = require('utils/convertDEGToDMS');

var _getGeoTIFFfromServer = require('utils/getGeoTIFFfromServer');

var _createOlFeatureFromApiResponseFeature = require('utils/createOlFeatureFromApiResponseFeature');

var _parseAttributes = require('utils/parseAttributes');

var _handleQueryResponse = require('utils/handleQueryResponse');

var _distance = require('utils/distance');

var _squaredDistance = require('utils/squaredDistance');

var _closestOnSegment = require('utils/closestOnSegment');

var _get_legend_params = require('utils/get_legend_params');

var _InputG3W = require('components/InputG3W.vue');

var _InputG3W2 = _interopRequireDefault(_InputG3W);

var _InputG3WFormInputs = require('components/InputG3WFormInputs.vue');

var _InputG3WFormInputs2 = _interopRequireDefault(_InputG3WFormInputs);

var _FormBody = require('components/FormBody.vue');

var _FormBody2 = _interopRequireDefault(_FormBody);

var _FormFooter = require('components/FormFooter.vue');

var _FormFooter2 = _interopRequireDefault(_FormFooter);

var _C3XYLine = require('components/C3XYLine.vue');

var _C3XYLine2 = _interopRequireDefault(_C3XYLine);

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _iframe = require('services/iframe');

var _iframe2 = _interopRequireDefault(_iframe);

var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

var _plugins = require('store/plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _relations = require('services/relations');

var _relations2 = _interopRequireDefault(_relations);

var _tasks = require('services/tasks');

var _tasks2 = _interopRequireDefault(_tasks);

var _api = require('services/api');

var _api2 = _interopRequireDefault(_api);

var _router = require('services/router');

var _router2 = _interopRequireDefault(_router);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _mixins = require('mixins');

var _mixins2 = _interopRequireDefault(_mixins);

var _reverseGeometry = require('utils/reverseGeometry');

var _getExtentForViewAndSize = require('utils/getExtentForViewAndSize');

var _createPolygonLayerFromBBox = require('utils/createPolygonLayerFromBBox');

var _getLengthMessageText = require('utils/getLengthMessageText');

var _needUseSphereMethods = require('utils/needUseSphereMethods');

var _transformMeterLength = require('utils/transformMeterLength');

var _createMeasureTooltip = require('utils/createMeasureTooltip');

var _formatMeasure = require('utils/formatMeasure');

var _getCurrentMapUnit = require('utils/getCurrentMapUnit');

var _getAreaMessageText = require('utils/getAreaMessageText');

var _transformMeterArea = require('utils/transformMeterArea');

var _removeMeasureTooltip = require('utils/removeMeasureTooltip');

var _setMeasureTooltipStatic = require('utils/setMeasureTooltipStatic');

var _getMetersFromDegrees = require('utils/getMetersFromDegrees');

var _getDPI = require('utils/getDPI');

var _getResolutionFromScale = require('utils/getResolutionFromScale');

var _getScaleFromResolution = require('utils/getScaleFromResolution');

var _mergeOptions = require('utils/mergeOptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var G3WObject = require('core/g3wobject');
var utils = require('utils');
var i18n = require('core/i18n/i18n.service');
var Server = require('core/errors/parser/servererrorparser');
var Project = require('core/project/project');
var LayersStoreRegistry = require('core/layers/layersstoresregistry');
var LayersStore = require('core/layers/layersstore');
var Layer = require('core/layers/layer');
var LayerFactory = require('core/layers/layerfactory');
var TableLayer = require('core/layers/tablelayer');
var VectorLayer = require('core/layers/vectorlayer');
var ImageLayer = require('core/layers/imagelayer');
var WmsLayer = require('core/layers/map/wmslayer');
var XYZLayer = require('core/layers/map/xyzlayer');
var MapLayer = require('core/layers/map/maplayer');
var Feature = require('core/layers/features/feature');
var FeaturesStore = require('core/layers/features/featuresstore');
var OlFeaturesStore = require('core/layers/features/olfeaturesstore');
var Filter = require('core/layers/filter/filter');
var Expression = require('core/layers/filter/expression');
var Plugin = require('core/plugin/plugin');
var PluginService = require('core/plugin/pluginservice');

/**
 * GUI modules
 */
var Panel = require('gui/panel');

var _require = require('gui/map/mapservice'),
    ControlFactory = _require.ControlFactory;

var FieldsService = require('gui/fields/fieldsservice');
var Component = require('gui/component/component');
var MetadataComponent = require('gui/metadata/vue/metadata');
var SearchComponent = require('gui/search/vue/search');
var SearchPanel = require('gui/search/vue/panel/searchpanel');
var PrintComponent = require('gui/print/vue/print');
var CatalogComponent = require('gui/catalog/vue/catalog');
var MapComponent = require('gui/map/vue/map');
var ToolsComponent = require('gui/tools/vue/tools');
var QueryResultsComponent = require('gui/queryresults/vue/queryresults');
var FormComponent = require('gui/form/vue/form');
var FormService = require('gui/form/formservice');
var InputsComponents = require('gui/inputs/inputs');
var Fields = require('gui/fields/fields');
var SearchPanelService = require('gui/search/vue/panel/searchservice');

/**
 * G3W-OL modules
 */
var PickFeatureInteraction = require('g3w-ol/interactions/pickfeatureinteraction');
var PickCoordinatesInteraction = require('g3w-ol/interactions/pickcoordinatesinteraction');
var DeleteFeatureInteraction = require('g3w-ol/interactions/deletefeatureinteraction');
var AreaInteraction = require('g3w-ol/interactions/areainteraction');
var LengthInteraction = require('g3w-ol/interactions/lengthinteraction');

var g3wsdk = {

  // APP CONSTANTS
  constant: _constant2.default, // TODO: rename to "constants" which is more appropriate (in version 4.0)

  // CORE API METHODS AND OBJECTS
  core: {
    G3WObject: G3WObject,
    utils: utils,
    geoutils: {
      geometryFields: _constant.GEOMETRY_FIELDS,
      coordinatesToGeometry: _coordinatesToGeometry.coordinatesToGeometry,
      getDefaultLayerStyle: _getDefaultLayerStyle.getDefaultLayerStyle,
      createLayerStyle: _createLayerStyle.createLayerStyle,
      createFeatureFromCoordinates: _createFeatureFromCoordinates.createFeatureFromCoordinates,
      createFeatureFromBBOX: _createFeatureFromBBOX.createFeatureFromBBOX,
      createFeatureFromGeometry: _createFeatureFromGeometry.createFeatureFromGeometry,
      createFeatureFromFeatureObject: _createFeatureFromFeatureObject.createFeatureFromFeatureObject,
      createOlLayer: _createOlLayer.createOlLayer,
      createWMSLayer: _createWMSLayer.createWMSLayer,
      createVectorLayerFromGeometry: _createVectorLayerFromGeometry.createVectorLayerFromGeometry,
      createVectorLayerFromFeatures: _createVectorLayerFromFeatures.createVectorLayerFromFeatures,
      createVectorLayerFromFile: _createVectorLayerFromFile.createVectorLayerFromFile,
      createStyleFunctionToVectorLayer: _createStyleFunctionToVectorLayer.createStyleFunctionToVectorLayer,
      createSelectedStyle: _createSelectedStyle.createSelectedStyle,
      getAlphanumericPropertiesFromFeature: _getAlphanumericPropertiesFromFeature.getAlphanumericPropertiesFromFeature,
      getFormDataExpressionRequestFromFeature: _getFormDataExpressionRequestFromFeature.getFormDataExpressionRequestFromFeature,
      convertFeatureToGEOJSON: _convertFeatureToGEOJSON.convertFeatureToGEOJSON,
      getQueryLayersPromisesByBBOX: _getQueryLayersPromisesByBBOX.getQueryLayersPromisesByBBOX,
      getQueryLayersPromisesByGeometry: _getQueryLayersPromisesByGeometry.getQueryLayersPromisesByGeometry,
      getQueryLayersPromisesByCoordinates: _getQueryLayersPromisesByCoordinates.getQueryLayersPromisesByCoordinates,
      transformBBOX: _transformBBOX.transformBBOX,
      parseQueryLayersPromiseResponses: _parseQueryLayersPromiseResponses.parseQueryLayersPromiseResponses,
      getMapLayerById: _getMapLayerById.getMapLayerById,
      getMapLayersByFilter: _getMapLayersByFilter.getMapLayersByFilter,
      areCoordinatesEqual: _areCoordinatesEqual.areCoordinatesEqual,
      getFeaturesFromResponseVectorApi: _getFeaturesFromResponseVectorApi.getFeaturesFromResponseVectorApi,
      covertVectorFeaturesToResultFeatures: _convertVectorFeaturesToResultFeatures.convertVectorFeaturesToResultFeatures,
      splitGeometryLine: _splitGeometryLine.splitGeometryLine,
      splitFeatures: _splitFeatures.splitFeatures,
      splitFeature: _splitFeature.splitFeature,
      getPointFeaturesfromGeometryVertex: _getPointFeaturesfromGeometryVertex.getPointFeaturesfromGeometryVertex,
      getVertexLength: _getVertexLength.getVertexLength,
      isSameBaseGeometryType: _isSameBaseGeometryType.isSameBaseGeometryType,
      isSingleGeometry: _isSingleGeometry.isSingleGeometry,
      singleGeometriesToMultiGeometry: _singleGeometriesToMultiGeometry.singleGeometriesToMultiGeometry,
      multiGeometryToSingleGeometries: _multiGeometryToSingleGeometries.multiGeometryToSingleGeometries,
      convertSingleMultiGeometry: _convertSingleMultiGeometry.convertSingleMultiGeometry,
      dissolve: _dissolve.dissolve,
      within: _within.within,
      intersects: _intersects.intersects,
      findSelfIntersects: _findSelfIntersects.findSelfIntersects,
      normalizeEpsg: _normalizeEpsg.normalizeEpsg,
      crsToCrsObject: _crsToCrsObject.crsToCrsObject,
      ConvertDMToDEG: _convertDMToDEG.convertDMToDEG,
      ConvertDEGToDM: _convertDEGToDM.convertDEGToDM,
      ConvertDMSToDEG: _convertDMSToDEG.convertDMSToDEG,
      ConvertDEGToDMS: _convertDEGToDMS.convertDEGToDMS,
      getGeoTIFFfromServer: _getGeoTIFFfromServer.getGeoTIFFfromServer,
      createOlFeatureFromApiResponseFeature: _createOlFeatureFromApiResponseFeature.createOlFeatureFromApiResponseFeature,
      sanitizeFidFeature: _sanitizeFidFeature.sanitizeFidFeature,
      parseAttributes: _parseAttributes.parseAttributes,
      handleQueryResponse: _handleQueryResponse.handleQueryResponse,
      distance: _distance.distance,
      squaredDistance: _squaredDistance.squaredDistance,
      closestOnSegment: _closestOnSegment.closestOnSegment,
      get_LEGEND_ON_LEGEND_OFF_Params: _get_legend_params.get_legend_params,
      Geometry: {
        GeometryTypes: _constant.GEOMETRY_TYPES,
        removeZValueToOLFeatureGeometry: _removeZValueToOLFeatureGeometry.removeZValueToOLFeatureGeometry,
        addZValueToOLFeatureGeometry: _addZValueToOLFeatureGeometry.addZValueToOLFeatureGeometry,
        getOLGeometry: _getOLGeometry.getOLGeometry,
        isMultiGeometry: _isMultiGeometry.isMultiGeometry,
        getAllPointGeometryTypes: _getAllPointGeometryTypes.getAllPointGeometryTypes,
        isPointGeometryType: _isPointGeometryType.isPointGeometryType,
        getAllLineGeometryTypes: _getAllLineGeometryTypes.getAllLineGeometryTypes,
        isLineGeometryType: _isLineGeometryType.isLineGeometryType,
        getAllPolygonGeometryTypes: _getAllPolygonGeometryTypes.getAllPolygonGeometryTypes,
        isPolygonGeometryType: _isPolygonGeometryType.isPolygonGeometryType,
        is3DGeometry: _is3DGeometry.is3DGeometry
      }
    },
    ApplicationService: _application2.default,
    ApplicationState: _applicationState2.default,
    ApiService: _api2.default,
    Router: _router2.default,
    i18n: i18n,
    task: {
      TaskService: _tasks2.default
    },
    data: {
      DataRouterService: _data2.default
    },
    iframe: {
      IFrameRouterService: _iframe2.default
    },
    errors: {
      parsers: {
        Server: Server
      }
    },
    project: {
      ProjectsRegistry: _projects2.default,
      Project: Project
    },
    map: {
      MapLayersStoreRegistry: _mapLayers2.default
    },
    catalog: {
      CatalogLayersStoresRegistry: _catalogLayers2.default
    },
    layer: {
      LayersStoreRegistry: LayersStoreRegistry,
      LayersStore: LayersStore,
      Layer: Layer,
      LayerFactory: LayerFactory,
      TableLayer: TableLayer,
      VectorLayer: VectorLayer,
      ImageLayer: ImageLayer,
      WmsLayer: WmsLayer,
      XYZLayer: XYZLayer,
      MapLayer: MapLayer,
      features: {
        Feature: Feature,
        FeaturesStore: FeaturesStore,
        OlFeaturesStore: OlFeaturesStore
      },
      filter: {
        Filter: Filter,
        Expression: Expression
      }
    },
    relations: {
      RelationsService: _relations2.default
    },
    interaction: {
      PickCoordinatesInteraction: PickCoordinatesInteraction,
      PickFeatureInteraction: PickFeatureInteraction
    },
    plugin: {
      Plugin: Plugin,
      PluginsRegistry: _plugins2.default,
      PluginService: PluginService
    },
    input: {
      inputService: {
        handleFilterExpressionFormInput: FormService._getFilterExpression,
        handleDefaultExpressionFormInput: FormService._getDefaultExpression
      }
    }
  },

  // APPLICATION INTERFACE (vue)
  gui: {
    GUI: _gui2.default,
    Panel: Panel,
    ControlFactory: ControlFactory,
    ComponentsFactory: {
      build: function build(_ref) {
        var vueComponentObject = _ref.vueComponentObject,
            service = _ref.service,
            propsData = _ref.propsData;
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return new Component(options).init({ vueComponentObject: vueComponentObject, service: service, propsData: propsData });
      }
    },
    FieldsService: FieldsService,
    vue: {
      Component: Component,
      Panel: Panel,
      MetadataComponent: MetadataComponent,
      SearchComponent: SearchComponent,
      SearchPanel: SearchPanel,
      PrintComponent: PrintComponent,
      CatalogComponent: CatalogComponent,
      MapComponent: MapComponent,
      ToolsComponent: ToolsComponent,
      QueryResultsComponent: QueryResultsComponent,
      // main Form Component
      FormComponent: FormComponent,
      // Form Components
      FormComponents: {
        Body: _FormBody2.default,
        Footer: _FormFooter2.default
      },
      Inputs: {
        G3wFormInputs: _InputG3WFormInputs2.default,
        G3WInput: _InputG3W2.default,
        InputsComponents: InputsComponents
      },
      Charts: {
        ChartsFactory: {
          /** @param  type: <library(es:c3)>:<chartType:(es.lineXY)> */
          build: function build() {
            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                type = _ref2.type,
                _ref2$hooks = _ref2.hooks,
                hooks = _ref2$hooks === undefined ? {} : _ref2$hooks;

            var _type$split = type.split(':'),
                _type$split2 = _slicedToArray(_type$split, 2),
                _type$split2$ = _type$split2[0],
                library = _type$split2$ === undefined ? 'c3' : _type$split2$,
                _type$split2$2 = _type$split2[1],
                chartType = _type$split2$2 === undefined ? 'lineXY' : _type$split2$2;

            return Object.assign(hooks, this.CHARTS[library][chartType]);
          }
        },
        c3: {
          lineXY: _C3XYLine2.default
        }
      },
      Fields: Fields,
      Mixins: _mixins2.default,
      services: {
        SearchPanel: SearchPanelService,
        FormService: FormService
      }
    }
  },

  // OPEN LAYERS COMPONENTS (g3w-ol)
  ol: {
    interactions: {
      PickFeatureInteraction: PickFeatureInteraction,
      PickCoordinatesInteraction: PickCoordinatesInteraction,
      DeleteFeatureInteraction: DeleteFeatureInteraction,
      measure: {
        AreaInteraction: AreaInteraction,
        LengthInteraction: LengthInteraction
      }
    },
    controls: {},
    utils: {
      merge: _mergeOptions.mergeOptions,
      getExtentForViewAndSize: _getExtentForViewAndSize.getExtentForViewAndSize,
      createPolygonLayerFromBBox: _createPolygonLayerFromBBox.createPolygonLayerFromBBox,
      reverseGeometry: _reverseGeometry.reverseGeometry,
      getScaleFromResolution: _getScaleFromResolution.getScaleFromResolution,
      getResolutionFromScale: _getResolutionFromScale.getResolutionFromScale,
      getDPI: _getDPI.getDPI,
      getMetersFromDegrees: _getMetersFromDegrees.getMetersFromDegrees,
      needUseSphereMethods: _needUseSphereMethods.needUseSphereMethods,
      getLengthMessageText: _getLengthMessageText.getLengthMessageText,
      getAreaMessageText: _getAreaMessageText.getAreaMessageText,
      formatMeasure: _formatMeasure.formatMeasure,
      createMeasureTooltip: _createMeasureTooltip.createMeasureTooltip,
      getCurrentMapUnit: _getCurrentMapUnit.getCurrentMapUnit,
      transformMeterLength: _transformMeterLength.transformMeterLength,
      transformMeterArea: _transformMeterArea.transformMeterArea,
      removeMeasureTooltip: _removeMeasureTooltip.removeMeasureTooltip,
      setMeasureTooltipStatic: _setMeasureTooltipStatic.setMeasureTooltipStatic
    }
  },

  // G3W-SUITE debug info
  info: function info() {
    Promise.allSettled([new Promise(function (resolve) {
      return $script('https://unpkg.com/platform@1.3.6/platform.js', resolve);
    }), new Promise(function (resolve) {
      return _application2.default.complete ? resolve() : _application2.default.on('complete', resolve);
    })]).finally(_asyncToGenerator(function* () {
      /** @since 3.8.0 */
      var platform = window.platform || {};

      window.console.info(('\n[g3wsdk.info]\n\n- g3w-admin: __' + initConfig.version + '__\n- g3w-client: __' + "3.10.0-alpha.0" + '__\n' + Object.entries(_plugins2.default.pluginsConfigs).map(function (p) {
        return '    - ' + p[0] + ': __' + p[1].version + '__';
      }).join('\n') + '\n- browser: __' + platform.name + ' ' + platform.version + '__\n- operating system: __' + platform.os.toString() + '__\n').trim());
    }));
  },

  // G3W-CLIENT version
  version: _constant2.default.APP_VERSION
};

// BACKOMP v3.x
g3wsdk.core.geometry = { Geom: g3wsdk.core.geoutils, Geometry: g3wsdk.core.geoutils.Geometry };
g3wsdk.core.layer.geometry = { geom: g3wsdk.core.geoutils, Geometry: g3wsdk.core.geoutils.Geometry };
g3wsdk.gui.vue.Charts.ChartsFactory.CHARTS = { c3: { lineXY: _C3XYLine2.default } };
g3wsdk.gui.ComponentsFactory.buildSidebar = function (_ref4) {
  var vueComponentObject = _ref4.vueComponentObject;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var çç = function çç(a, b) {
    return undefined !== a ? a : b;
  }; // like a ?? (coalesce operator)
  var component = g3wsdk.gui.ComponentsFactory.build({ vueComponentObject: vueComponentObject }, {
    id: options.id,
    title: options.title,
    open: çç(options.open, false),
    collapsible: çç(options.collapsible, true),
    isolate: çç(options.isolate, false),
    iconColor: çç(options.iconConfig, {}).color,
    icon: çç(options.iconConfig, {}).icon && _gui2.default.getFontClass(options.iconConfig.icon),
    mobile: çç(options.mobile, true),
    events: çç(options.events, {})
  });
  _gui2.default.addComponent(component, 'sidebar', çç(options.sidebarOptions, { position: 1 }));
  return component;
};

module.exports = g3wsdk;

}).call(this)}).call(this,require('_process'))
},{"_process":1,"app/constant":5,"components/C3XYLine.vue":148,"components/FormBody.vue":169,"components/FormFooter.vue":170,"components/InputG3W.vue":193,"components/InputG3WFormInputs.vue":194,"core/errors/parser/servererrorparser":7,"core/g3wobject":8,"core/i18n/i18n.service":9,"core/layers/features/feature":11,"core/layers/features/featuresstore":12,"core/layers/features/olfeaturesstore":13,"core/layers/filter/expression":14,"core/layers/filter/filter":15,"core/layers/imagelayer":17,"core/layers/layer":18,"core/layers/layerfactory":19,"core/layers/layersstore":20,"core/layers/layersstoresregistry":21,"core/layers/map/maplayer":24,"core/layers/map/wmslayer":26,"core/layers/map/xyzlayer":28,"core/layers/tablelayer":34,"core/layers/vectorlayer":38,"core/plugin/plugin":39,"core/plugin/pluginservice":40,"core/project/project":41,"g3w-ol/interactions/areainteraction":64,"g3w-ol/interactions/deletefeatureinteraction":65,"g3w-ol/interactions/lengthinteraction":66,"g3w-ol/interactions/pickcoordinatesinteraction":68,"g3w-ol/interactions/pickfeatureinteraction":69,"gui/catalog/vue/catalog":75,"gui/component/component":77,"gui/fields/fields":79,"gui/fields/fieldsservice":80,"gui/form/formservice":81,"gui/form/vue/form":82,"gui/inputs/inputs":91,"gui/map/mapservice":115,"gui/map/vue/map":116,"gui/metadata/vue/metadata":119,"gui/panel":120,"gui/print/vue/print":122,"gui/queryresults/vue/queryresults":130,"gui/search/vue/panel/searchpanel":134,"gui/search/vue/panel/searchservice":135,"gui/search/vue/search":136,"gui/tools/vue/tools":142,"mixins":302,"services/api":309,"services/application":310,"services/data":317,"services/gui":319,"services/iframe":320,"services/relations":323,"services/router":324,"services/tasks":326,"store/application-state":328,"store/catalog-layers":329,"store/map-layers":333,"store/plugins":334,"store/projects":335,"utils":419,"utils/addZValueToOLFeatureGeometry":338,"utils/areCoordinatesEqual":340,"utils/closestOnSegment":344,"utils/convertDEGToDM":346,"utils/convertDEGToDMS":347,"utils/convertDMSToDEG":348,"utils/convertDMToDEG":349,"utils/convertFeatureToGEOJSON":350,"utils/convertSingleMultiGeometry":353,"utils/convertVectorFeaturesToResultFeatures":354,"utils/coordinatesToGeometry":355,"utils/createFeatureFromBBOX":357,"utils/createFeatureFromCoordinates":358,"utils/createFeatureFromFeatureObject":359,"utils/createFeatureFromGeometry":360,"utils/createLayerStyle":364,"utils/createMeasureTooltip":365,"utils/createOlFeatureFromApiResponseFeature":366,"utils/createOlLayer":367,"utils/createPolygonLayerFromBBox":368,"utils/createSelectedStyle":369,"utils/createStyleFunctionToVectorLayer":371,"utils/createVectorLayerFromFeatures":372,"utils/createVectorLayerFromFile":373,"utils/createVectorLayerFromGeometry":374,"utils/createWMSLayer":375,"utils/crsToCrsObject":376,"utils/dissolve":378,"utils/distance":379,"utils/findSelfIntersects":383,"utils/formatMeasure":385,"utils/getAllLineGeometryTypes":387,"utils/getAllPointGeometryTypes":388,"utils/getAllPolygonGeometryTypes":389,"utils/getAlphanumericPropertiesFromFeature":390,"utils/getAreaMessageText":391,"utils/getCurrentMapUnit":392,"utils/getDPI":393,"utils/getDefaultLayerStyle":394,"utils/getExtentForViewAndSize":395,"utils/getFeaturesFromResponseVectorApi":396,"utils/getFormDataExpressionRequestFromFeature":397,"utils/getGeoTIFFfromServer":398,"utils/getLengthMessageText":399,"utils/getMapLayerById":400,"utils/getMapLayersByFilter":401,"utils/getMetersFromDegrees":402,"utils/getOLGeometry":403,"utils/getPointFeaturesfromGeometryVertex":404,"utils/getQueryLayersPromisesByBBOX":405,"utils/getQueryLayersPromisesByCoordinates":406,"utils/getQueryLayersPromisesByGeometry":407,"utils/getResolutionFromScale":409,"utils/getScaleFromResolution":410,"utils/getVertexLength":413,"utils/get_legend_params":414,"utils/handleQueryResponse":416,"utils/intersects":421,"utils/is3DGeometry":422,"utils/isLineGeometryType":424,"utils/isMultiGeometry":425,"utils/isPointGeometryType":426,"utils/isPolygonGeometryType":427,"utils/isSameBaseGeometryType":428,"utils/isSingleGeometry":429,"utils/mergeOptions":432,"utils/multiGeometryToSingleGeometries":434,"utils/needUseSphereMethods":435,"utils/normalizeEpsg":436,"utils/parseAttributes":437,"utils/parseQueryLayersPromiseResponses":438,"utils/removeMeasureTooltip":442,"utils/removeZValueToOLFeatureGeometry":443,"utils/reverseGeometry":445,"utils/sanitizeFidFeature":447,"utils/setMeasureTooltipStatic":449,"utils/singleGeometriesToMultiGeometry":450,"utils/splitFeature":454,"utils/splitFeatures":455,"utils/splitGeometryLine":456,"utils/squaredDistance":457,"utils/transformBBOX":460,"utils/transformMeterArea":461,"utils/transformMeterLength":462,"utils/within":465}],4:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utils = exports.server = exports.client = exports._i18n = exports.tools = exports.plugins = undefined;

var _locales = require('../locales');

var _locales2 = _interopRequireDefault(_locales);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var apptitle = "G3W Client"; /**
                              * @TODO consolidate configuration parameters in a single location
                              * (eg. appConfig, ApplicationState, Constants, ...)
                              */

var supportedLanguages = ['en', 'it'];

var plugins = exports.plugins = {};

var tools = exports.tools = {
  tools: []
};

// get message from internationalization
var _i18n = exports._i18n = {
  resources: _locales2.default
};

var client = exports.client = {
  debug: true,
  local: false
};

var server = exports.server = {
  urls: {
    baseurl: '/',
    ows: 'ows',
    api: 'api',
    initconfig: 'api/initconfig',
    config: 'api/config'
  }
};

var utils = exports.utils = {
  merge: function merge(type) {
    if (type) {
      console.log(CONFIG);
    }
  }
};

exports.default = {
  apptitle: apptitle,
  client: client,
  server: server,
  plugins: plugins,
  supportedLanguages: supportedLanguages,
  tools: tools,
  _i18n: _i18n,
  utils: utils
};

},{"../locales":292}],5:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INCHES_PER_UNIT = exports.DOTS_PER_INCH = exports.SPATIAL_METHODS = exports.LOGO_GIS3W = exports.LOCAL_ITEM_IDS = exports.FONT_AWESOME_ICONS = exports.API_BASE_URLS = exports.ZINDEXES = exports.VIEWPORT = exports.TOC_THEMES_INIT_STATUS = exports.TOC_LAYERS_INIT_STATUS = exports.TIMEOUT = exports.SEARCH_RETURN_TYPES = exports.SEARCH_ALLVALUE = exports.QUERY_POINT_TOLERANCE = exports.PRINT_SCALES = exports.PRINT_RESOLUTIONS = exports.PRINT_FORMATS = exports.MAP_SETTINGS = exports.LOCALSTORAGE_EXTERNALWMS_ITEM = exports.LIST_OF_RELATIONS_ID = exports.LIST_OF_RELATIONS_TITLE = exports.GEOMETRY_TYPES = exports.GEOMETRY_FIELDS = exports.FILTER_EXPRESSION_OPERATORS = exports.FILTER_OPERATORS = exports.G3W_FID = exports.EPSG = exports.DOWNLOAD_FORMATS = exports.DEFAULT_EDITING_CAPABILITIES = exports.APP_VERSION = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * @file all contants values used on application
                                                                                                                                                                                                                                                                   */

//@ts-check

/**
 * @TODO we can safely import "version" from "package.json" when we will use native ES Modules
 */
// import { version } from '../../package.json';


var _version = require('../version');

var _version2 = _interopRequireDefault(_version);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Same as "package.json" version
 * 
 * @type {string}
 */
var APP_VERSION = exports.APP_VERSION = _version2.default;

/**
 * Default editing capabilities
 * @deprecated  Will be removed in 4.x. Moved to g3w-client-plugin-editing
 * 
 * @type {string[]}
 */
var DEFAULT_EDITING_CAPABILITIES = exports.DEFAULT_EDITING_CAPABILITIES = ['add_feature', 'change_feature', 'change_attr_feature', 'delete_feature'];

/**
 * @type {Object<string, { format: string, url: string }>}
 */
var DOWNLOAD_FORMATS = exports.DOWNLOAD_FORMATS = {
  download: {
    format: 'shapefile',
    url: 'shp'
  },
  download_gpkg: {
    format: 'gpkg',
    url: 'gpkg'
  },
  download_gpx: {
    format: 'gpx',
    url: 'gpx'
  },
  download_csv: {
    format: 'csv',
    url: 'csv'
  },
  download_xls: {
    format: 'xls',
    url: 'xls'
  },
  download_raster: {
    format: 'geotiff',
    url: 'geotiff'
  }
};

/**
 * @type {string[]}
 */
var EPSG = exports.EPSG = ["EPSG:3003", "EPSG:3004", "EPSG:3045", "EPSG:3857", "EPSG:4326", "EPSG:6708", "EPSG:23032", "EPSG:23033", "EPSG:25833", "EPSG:32632", "EPSG:32633"];

/**
 * fid name field referred to fid feature
 * 
 * @type {string}
 */
var G3W_FID = exports.G3W_FID = 'g3w_fid';

/**
 * @type {Object<string, string>}
 * @since v3.5
 */
var FILTER_OPERATORS = exports.FILTER_OPERATORS = {
  gte: '>=',
  lte: '<=',
  NOT: '!=',
  eq: '=',
  gt: '>',
  lt: '<',
  IN: 'IN',
  'NOT IN': 'NOT IN',
  LIKE: 'LIKE',
  ILIKE: 'ILIKE',
  AND: 'AND',
  OR: 'OR'
};

/**
 * @type {Object<string, string>}
 * @since v3.5
 */
var FILTER_EXPRESSION_OPERATORS = exports.FILTER_EXPRESSION_OPERATORS = _extends({
  lte: '<=',
  ltgt: '!=',
  ilike: 'ILIKE',
  like: 'LIKE'
}, FILTER_OPERATORS);

/**
 * Geometry fields used to exclude or get geometry information from server request
 * 
 * @type {string[]}
 */
var GEOMETRY_FIELDS = exports.GEOMETRY_FIELDS = ['geometryProperty', 'boundedBy', 'geom', 'the_geom', 'geometry', 'bbox', 'GEOMETRY', 'geoemtria', 'geometria'];

/**
 * @type {Object<string, string>}
 */
var GEOMETRY_TYPES = exports.GEOMETRY_TYPES = {
  POINT: "Point",
  POINTZ: "PointZ",
  POINTM: "PointM",
  POINTZM: "PointZM",
  POINT25D: "Point25D",
  MULTIPOINT: "MultiPoint",
  MULTIPOINTZ: "MultiPointZ",
  MULTIPOINTM: "MutliPointM",
  MULTIPOINTZM: "MultiPointZM",
  MULTIPOINT25D: "MultiPoint25D",
  LINESTRING: "LineString", // QGis definition .GeometryType, Line intead di Linestring.
  LINESTRINGZ: "LineStringZ",
  LINESTRINGM: "LineStringM",
  LINESTRINGZM: "LineStringZM",
  LINESTRING25D: "LineString25D",
  LINE: "Line",
  LINEZ: "LineZ",
  LINEM: "LineM",
  LINEZM: "LineZM",
  LINE25D: "Line25D",
  MULTILINESTRING: "MultiLineString",
  MULTILINESTRINGZ: "MultiLineStringZ",
  MULTILINESTRINGM: "MultiLineStringM",
  MULTILINESTRINGZM: "MultiLineStringZM",
  MULTILINESTRING25D: "MultiLineString25D",
  MULTILINE: "MultiLine",
  MULTILINEZ: "MultiLineZ",
  MULTILINEM: "MultiLineM",
  MULTILINEZM: "MultiLineZM",
  MULTILINE25D: "MultiLine25D",
  POLYGON: "Polygon",
  POLYGONZ: "PolygonZ",
  POLYGONM: "PolygonM",
  POLYGONZM: "PolygonZM",
  POLYGON25D: "Polygon25D",
  MULTIPOLYGON: "MultiPolygon",
  MULTIPOLYGONZ: "MultiPolygonZ",
  MULTIPOLYGONM: "MultiPolygonM",
  MULTIPOLYGONZM: "MultiPolygonZM",
  MULTIPOLYGON25D: "MultiPolygon25D",
  GEOMETRYCOLLECTION: "GeometryCollection",
  GEOMETRYCOLLECTIONZ: "GeometryCollectionZ",
  GEOMETRYCOLLECTIONM: "GeometryCollectionM",
  GEOMETRYCOLLECTIONZM: "GeometryCollectionZM",
  GEOMETRYCOLLECTION25D: "GeometryCollection25D"
};

/**
 * @type {string}
 */
var LIST_OF_RELATIONS_TITLE = exports.LIST_OF_RELATIONS_TITLE = 'info.list_of_relations';

/**
 * @type {string}
 */
var LIST_OF_RELATIONS_ID = exports.LIST_OF_RELATIONS_ID = '__G3W_LIST_OF_RELATIONS_ID__';

/**
 * @type {string}
 */
var LOCALSTORAGE_EXTERNALWMS_ITEM = exports.LOCALSTORAGE_EXTERNALWMS_ITEM = 'externalwms';

/**
 * @typedef MapSettings
 * @property {{ maxScale: number }} ZOOM
 * @property {{ duration: number }} ANIMATION
 * @property {{ default: string, getPositions: Function }} LAYER_POSITIONS: 
 */

/**
 * @type {MapSettings}
 */
var MAP_SETTINGS = exports.MAP_SETTINGS = {
  ZOOM: {
    maxScale: 1000
  },
  ANIMATION: {
    duration: 2000
  },
  LAYER_POSITIONS: {
    default: 'top',
    getPositions: function getPositions() {
      return ['top', 'bottom'];
    }
  }
};

/**
 * @type {Array<{ value: any, label: string }>}
 * @since v3.5
 */
var PRINT_FORMATS = exports.PRINT_FORMATS = [{
  value: 'pdf',
  label: 'PDF'
}, {
  value: 'png',
  label: 'PNG'
}];

/**
 * @type {number[]}
 * @since v3.5
 */
var PRINT_RESOLUTIONS = exports.PRINT_RESOLUTIONS = [150, 300];

/**
 * @type {Array<{ value: number, label: string }>}
 * @since v3.5
 */
var PRINT_SCALES = exports.PRINT_SCALES = [{
  value: 100,
  label: '1:100'
}, {
  value: 200,
  label: '1:200'
}, {
  value: 500,
  label: '1:500'
}, {
  value: 1000,
  label: '1:1.000'
}, {
  value: 2000,
  label: '1:2.000'
}, {
  value: 2500,
  label: '1:2.500'
}, {
  value: 5000,
  label: '1:5.000'
}, {
  value: 10000,
  label: '1:10.000'
}, {
  value: 20000,
  label: '1:20.000'
}, {
  value: 25000,
  label: '1:25.000'
}, {
  value: 50000,
  label: '1:50.000'
}, {
  value: 100000,
  label: '1:100.000'
}, {
  value: 250000,
  label: '1:250.000'
}, {
  value: 500000,
  label: '1:500.000'
}, {
  value: 1000000,
  label: '1:1.000.000'
}, {
  value: 2500000,
  label: '1:2.500.000'
}, {
  value: 5000000,
  label: '1:5.000.000'
}, {
  value: 10000000,
  label: '1:10.000.000'
}, {
  value: 20000000,
  label: '1:20.000.000'
}, {
  value: 50000000,
  label: '1:50.000.000'
}, {
  value: 100000000,
  label: '1:100.000.000'
}, {
  value: 250000000,
  label: '1:250.000.000'
}, {
  value: 500000000,
  label: '1:500.000.000'
}];

/**
 * Point tolerance when clicking on map
 * 
 * @type {{unit: string, value: number}}
 */
var QUERY_POINT_TOLERANCE = exports.QUERY_POINT_TOLERANCE = {
  unit: 'pixel',
  value: 10
};

/**
 * @type {string}
 * @since v3.5
 */
var SEARCH_ALLVALUE = exports.SEARCH_ALLVALUE = '__G3W_ALL__';

/**
 * @type {string[]}
 * @since v3.5
 */
var SEARCH_RETURN_TYPES = exports.SEARCH_RETURN_TYPES = ['data', 'search'];

/**
 * TIMEOUT (1 minute = 60000)
 * 
 * @type {number}
 */
var TIMEOUT = exports.TIMEOUT = 60000;

/**
 * @type {string}
 */
var TOC_LAYERS_INIT_STATUS = exports.TOC_LAYERS_INIT_STATUS = 'not_collapsed';

/**
 * @type {string}
 */
var TOC_THEMES_INIT_STATUS = exports.TOC_THEMES_INIT_STATUS = 'collapsed';

/**
 * @type {{resize: Object<string, { min: number }>}}
 * @since v3.5
 */
var VIEWPORT = exports.VIEWPORT = {
  resize: {
    map: {
      min: 200
    },
    content: {
      min: 200
    }
  }
};

/**
 * @type {Object<string, { tool: number }>}
 */
var ZINDEXES = exports.ZINDEXES = {
  usermessage: {
    tool: 2
  }
};

/**
 * @type {Object<string, string | Object<string, string>>}
 * @since v3.8
 */
var API_BASE_URLS = exports.API_BASE_URLS = {

  /**
   * Info about groups, macrogroups, projects, etc. of G3W-SUITE
   * 
   * @since 3.8.0
   */
  ABOUT: {
    macrogroups: '/about/api/macrogroup/',
    nomacrogoups: '/about/api/group/nomacrogroup/',
    projects: '/about/api/group/__G3W_GROUP_ID__/projects/',
    group: '/about/api/group/'
  },

  /**
   * Coordinate Reference Systems
   * 
   * @example /crs/<epsg_code>
   * 
   * @since v3.8
   */
  CRS: '/crs/'
};

/**
 * List of default Font Awesome classes for current project
 * 
 * @type {Object<string, string>}
 * @since v3.8
 */
var FONT_AWESOME_ICONS = exports.FONT_AWESOME_ICONS = {
  'change-map': "fas fa-map-signs",
  map: "far fa-map",
  file: "fas fa-file-code",
  marker: "fas fa-map-marker-alt",
  relation: "fas fa-sitemap",
  tools: "fas fa-cogs",
  tool: "fas fa-cog",
  search: "fas fa-search",
  print: "fas fa-print",
  info: "fas fa-info-circle",
  'info-circle': "fas fa-info-circle",
  globe: "fas fa-globe",
  mail: "fas fa-envelope",
  mobile: "fas fa-mobile",
  fax: "fas fa-fax",
  user: "fas fa-user",
  bars: "fas fa-bars",
  uncheck: "far fa-square",
  check: "far fa-check-square",
  filluncheck: "fas fa-square",
  table: "fas fa-table",
  trash: "fas fa-trash",
  'trash-o': "far fa-trash-alt",
  pencil: "fas fa-pencil-alt",
  'ellips-h': "fas fa-ellipsis-h",
  'ellips-v': "fas fa-ellipsis-v",
  'arrow-up': "fas fa-chevron-up",
  'arrow-down': "fas fa-chevron-down",
  'arrow-left': "fas fa-chevron-left",
  'arrow-right': "fas fa-chevron-right",
  'resize-h': "fas fa-arrows-alt-h",
  'resize-v': "fas fa-arrows-alt-v",
  'resize-default': "fas fa-compress",
  'caret-up': "fas fa-caret-up",
  'caret-down': "fas fa-caret-down",
  'caret-left': "fas fa-caret-left",
  'caret-right': "fas fa-caret-right",
  'empty-circle': "far fa-circle",
  'cloud-upload': "fas fa-cloud-upload-alt",
  spinner: "fas fa-spinner",
  minus: "fas fa-minus",
  "minus-square": "far fa-minus-square",
  plus: "fas fa-plus",
  'plus-circle': "fas fa-plus-circle",
  'plus-square': "far fa-plus-square",
  grid: "fas fa-th",
  home: "fas fa-home",
  folder: "fas fa-folder",
  'sign-out': "fas fa-sign-out-alt",
  close: "fas fa-times",
  time: "far fa-clock",
  calendar: "fas fa-calendar-alt",
  list: "fas fa-list-alt",
  link: "fas fa-link",
  unlink: "fas fa-unlink",
  eye: "far fa-eye",
  'eye-close': "far fa-eye-slash",
  save: "far fa-save",
  pdf: "fas fa-file-pdf",
  image: "far fa-image",
  video: "far fa-file-video",
  unknow: "far fa-question-circle",
  zip: "far fa-file-archive",
  text: "far fa-file-alt",
  excel: "far fa-file-excel",
  xls: "far fa-file-excel",
  gpx: "fas fa-location-arrow",
  gpkg: "fas fa-box-open",
  shapefile: "fas fa-file-archive",
  csv: "fas fa-file-csv",
  geotiff: "fas fa-th",
  ppt: "far fa-file-powerpoint",
  circle: "fas fa-circle",
  calculator: "fas fa-calculator",
  picture: "far fa-image",
  keyboard: "far fa-keyboard",
  'file-download': "fas fa-file-download",
  copy: "far fa-copy",
  draw: "fas fa-draw-polygon",
  chart: "fas fa-chart-bar",
  'chart-line': "fas fa-chart-line",
  'chart-area': "fas fa-chart-area",
  'chart-pie': "fas fa-chart-pie",
  run: "fas fa-play",
  warning: "fas fa-exclamation-circle",
  alert: "fas fa-exclamation-triangle",
  crosshairs: "fas fa-crosshairs",
  success: "far fa-check-circle",
  back: "fas fa-chevron-circle-left",
  'file-upload': "fas fa-file-upload",
  wifi: "fas fa-wifi",
  mouse: "fas fa-mouse",
  'copy-paste': "far fa-copy",
  'vector-square': "fas fa-vector-square",
  download: "fas fa-download",
  credits: "fas fa-euro-sign",
  filter: "fas fa-filter",
  plugin: "fas fa-plug",
  invert: "fas fa-exchange-alt",
  clear: "fas fa-broom",
  palette: "fas fa-palette",
  layers: "fas fa-layer-group",
  'sign-in': "fas fa-sign-in-alt",
  language: "fas fa-language",
  target: "fas fa-bullseye",
  pin: "fas fa-map-pin",
  square: "far fa-square",
  move: "fas fa-arrows-alt",
  moon: "fas fa-moon",
  sun: "fas fa-sun",
  refresh: "fas fa-sync-alt",
  pause: "fas fa-pause",
  'step-backward': "fas fa-step-backward",
  'fast-backward': "fas fa-fast-backward",
  'step-forward': "fas fa-step-forward",
  'fast-forward': "fas fa-fast-forward",
  crop: "fas fa-crop-alt",
  exit: "fas fa-door-open",
  slider: "fas fa-sliders-h",

  /**
   * @since 3.8.0
   */
  bookmark: "fas fa-bookmark",

  /**
   * @since 3.8.0
   */
  reply: "fas fa-reply",

  /**
   * @since 3.8.0
   */
  share: "fas fa-share"

};

/**
 * @typedef LocalItem
 * @property {string} id unique identifier
 * @property {any} value initial value
 */

/**
 * LOCAL ITEM IDS - used to store id used by application
 * 
 * @type {Object<string, LocalItem>}
 * 
 * @since v3.8
 */
var LOCAL_ITEM_IDS = exports.LOCAL_ITEM_IDS = {

  MESSAGES: {
    id: 'MESSAGES',
    value: {}
  },

  SPATIALBOOKMARKS: {
    id: 'SPATIALBOOKMARKS',
    value: {}
  }

};

/**
 * @since 3.8.0
 */
var LOGO_GIS3W = exports.LOGO_GIS3W = 'images/logo_gis3w_156_85.png';

/**
 * List of Open Layers spatial methods used to find features
 * 
 * @since 3.9.0
 */
var SPATIAL_METHODS = exports.SPATIAL_METHODS = ['intersects', 'within'];

/**
 * DPI96
 * 
 * DOTS_PER_INCH = ol.has.DEVICE_PIXEL_RATIO * 96;
 * 
 * @since 3.10.0
 */
var DOTS_PER_INCH = exports.DOTS_PER_INCH = 96;

/**
 * @since 3.10.0
 */
var INCHES_PER_UNIT = exports.INCHES_PER_UNIT = {
  m: 39.37,
  degrees: 4374754
};

exports.default = {
  APP_VERSION: APP_VERSION,
  API_BASE_URLS: API_BASE_URLS,
  DEFAULT_EDITING_CAPABILITIES: DEFAULT_EDITING_CAPABILITIES,
  DOTS_PER_INCH: DOTS_PER_INCH,
  DOWNLOAD_FORMATS: DOWNLOAD_FORMATS,
  FILTER_OPERATORS: FILTER_OPERATORS,
  FILTER_EXPRESSION_OPERATORS: FILTER_EXPRESSION_OPERATORS,
  FONT_AWESOME_ICONS: FONT_AWESOME_ICONS,
  G3W_FID: G3W_FID,
  GEOMETRY_FIELDS: GEOMETRY_FIELDS,
  GEOMETRY_TYPES: GEOMETRY_TYPES,
  INCHES_PER_UNIT: INCHES_PER_UNIT,
  LIST_OF_RELATIONS_TITLE: LIST_OF_RELATIONS_TITLE,
  LIST_OF_RELATIONS_ID: LIST_OF_RELATIONS_ID,
  LOCAL_ITEM_IDS: LOCAL_ITEM_IDS,
  LOCALSTORAGE_EXTERNALWMS_ITEM: LOCALSTORAGE_EXTERNALWMS_ITEM,
  LOGO_GIS3W: LOGO_GIS3W,
  MAP_SETTINGS: MAP_SETTINGS,
  PRINT_FORMATS: PRINT_FORMATS,
  PRINT_RESOLUTIONS: PRINT_RESOLUTIONS,
  PRINT_SCALES: PRINT_SCALES,
  QUERY_POINT_TOLERANCE: QUERY_POINT_TOLERANCE,
  SEARCH_ALLVALUE: SEARCH_ALLVALUE,
  SEARCH_RETURN_TYPES: SEARCH_RETURN_TYPES,
  SPATIAL_METHODS: SPATIAL_METHODS,
  TIMEOUT: TIMEOUT,
  TOC_LAYERS_INIT_STATUS: TOC_LAYERS_INIT_STATUS,
  TOC_THEMES_INIT_STATUS: TOC_THEMES_INIT_STATUS,
  VIEWPORT: VIEWPORT,
  ZINDEXES: ZINDEXES
};

},{"../version":466}],6:[function(require,module,exports){
var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    resolve = _require.resolve;

function BaseService() {
  var _this = this;

  _projects2.default.onbefore('setCurrentProject', function (project) {
    return _this.project = project;
  });
  this.project = _projects2.default.getCurrentProject();
}

var proto = BaseService.prototype;
/**
 *
 * @param request is a Promise(jquery promise at moment
 * @returns {Promise<unknown>}
 */
proto.handleRequest = function (request) {
  //  OVERWRITE TO SERVICE
};

proto.handleResponse = function () {
  var _ref = _asyncToGenerator(function* (response) {
    //  OVERWRITE TO SERVICE
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * @param {{ type: 'vector' }}
 * 
 * @returns { unknown[] } array of external layer add on project
 * 
 * @since 3.8.0
 */
proto.getSelectedExternalLayers = function (_ref2) {
  var _ref2$type = _ref2.type,
      type = _ref2$type === undefined ? 'vector' : _ref2$type;

  return _gui2.default.getService('catalog').getExternalSelectedLayers({ type: type });
};

/**
 * @returns {Promise<[]>} a resolved request (empty array)
 * 
 * @since 3.8.0
 */
proto.getEmptyRequest = function () {
  return resolve([]);
};

/**
 * @param {{ type: 'vector' }}
 * 
 * @returns {boolean}
 * 
 * @since 3.8.0
 */
proto.hasExternalLayerSelected = function (_ref3) {
  var _ref3$type = _ref3.type,
      type = _ref3$type === undefined ? 'vector' : _ref3$type;

  return this.getSelectedExternalLayers({ type: type }).length > 0;
};

module.exports = BaseService;

},{"services/gui":319,"store/projects":335,"utils":419}],7:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var serverErrorParser = function serverErrorParser() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._error = options.error;
};

var proto = serverErrorParser.prototype;

proto.parse = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'responseJSON' : _ref$type;

  var error_message = "server_saver_error";
  function traverseErrorMessage(errorObject) {
    var entries = Object.entries(errorObject);
    var entry = entries.find(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];

      return key === 'fields';
    });
    if (entry) {
      var _entry = _slicedToArray(entry, 2),
          value = _entry[1];

      try {
        if (typeof value === 'string') {
          var _entries$find = entries.find(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
                key = _ref5[0],
                value = _ref5[1];

            return key !== 'fields';
          }),
              _entries$find2 = _slicedToArray(_entries$find, 1),
              field = _entries$find2[0];

          error_message = '[' + field + '] ' + value;
        } else {
          error_message = '';
          Object.entries(value).forEach(function (_ref6) {
            var _ref7 = _slicedToArray(_ref6, 2),
                field = _ref7[0],
                error = _ref7[1];

            error_message = '' + error_message + field + ' ' + (Array.isArray(error) ? error[0] : error) + ' \n';
          });
        }
      } catch (err) {}
      return error_message.replace(/\:|\./g, '');
    } else {
      var _entries$ = _slicedToArray(entries[0], 2),
          _value = _entries$[1];

      if (!Array.isArray(_value) && (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object') return traverseErrorMessage(_value);
    }
  }
  if (type === 'responseJSON') {
    if (this._error && this._error.responseJSON && this._error.responseJSON.error.message) return this._error.responseJSON.error.message;else if (this._error && this._error.errors) return traverseErrorMessage(this._error.errors);
  } else if (type === 'String') {
    if (typeof this._error === 'string') return this._error;else return traverseErrorMessage(this._error);
  }
  return t("server_saver_error");
};

module.exports = serverErrorParser;

},{"core/i18n/i18n.service":9}],8:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('utils'),
    inherit = _require.inherit,
    noop = _require.noop,
    debounce = _require.debounce,
    throttle = _require.throttle;

/**
 * Base object to handle a setter and its listeners.
 * @constructor
 */


var G3WObject = function G3WObject() {
  //check if setters property is set. Register the chain of events
  this.setters && this._setupListenersChain(this.setters);
  // check debounces
  this.debounces && this._setupDebounces(this.debounces);
  //check throttles
  this.throttles && this._setupThrottles(this.throttles);
};

inherit(G3WObject, EventEmitter);

var proto = G3WObject.prototype;

/**
 * Insert a listener on afeter setter was executed
 * @param {string} setter - IMethod name to register a listener function
 * @param {function} listener - listener function (only syncron)
 * @param {number} priority - Priorità di esecuzione: valore minore viene eseuito prima
 */
proto.onafter = function (setter, listener, priority) {
  return this._onsetter('after', setter, listener, false, priority);
};

proto.onceafter = function (setter, listener, priority) {
  return this._onsetter('after', setter, listener, false, priority, true);
};

/**
 * Listern before cal sesster
 * @param {string} setter - Method name setter
 * @param {function} listener - function to call
 * @param {number} priority - Priority
 */
proto.onbefore = function (setter, listener, priority) {
  return this._onsetter('before', setter, listener, false, priority);
};

// once before
proto.oncebefore = function (setter, listener, priority) {
  return this._onsetter('before', setter, listener, false, priority, true);
};

/**
 * @param {string} setter - Method name setter
 * @param {function} listener - function to call
 * @param {number} priority - Priority
 */
proto.onbeforeasync = function (setter, listener, priority) {
  return this._onsetter('before', setter, listener, true, priority);
};

proto.un = function (setter, key) {
  // cicle on after before (key) and for each settersListeners (array) find key
  Object.entries(this.settersListeners).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        _key = _ref2[0],
        settersListeners = _ref2[1];

    if (key === undefined) settersListeners[setter].splice(0);else settersListeners[setter].forEach(function (setterListener, idx) {
      if (setterListener.key === key) {
        settersListeners[setter].splice(idx, 1);
      }
    });
  });
};

// base function to register and handle on<before/after> setter listeners
/*
  when=before|after,
  type=sync|async
*/
proto._onsetter = function (when, setter, listener, async) {
  var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var once = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

  var listenerKey = void 0;
  // check if setter function is register.
  if (typeof this.settersListeners[when][setter] !== "undefined") {
    // set unique listenerKey value
    listenerKey = '' + (Math.floor(Math.random() * 1000000) + Date.now());
    // add info object to setters listeners
    this.settersListeners[when][setter].push({
      key: listenerKey,
      fnc: listener,
      async: async,
      priority: priority,
      once: once
    });
    // set lineners base on priority
    this.settersListeners[when][setter] = _.sortBy(this.settersListeners[when][setter], function (setterListener) {
      return setterListener.priority;
    });
  }
  // return key
  return listenerKey; // in case of no setter register return undefined listerKey
};

proto._setupListenersChain = function (setters) {
  var _this = this;

  // initialize all methods inside object "setters" of child class.
  this.settersListeners = {
    after: {},
    before: {}
  };

  var _loop = function _loop(setter) {
    var setterOption = setters[setter];
    var setterFnc = noop;
    var setterFallback = noop;
    if (_.isFunction(setterOption)) setterFnc = setterOption;else {
      setterFnc = setterOption.fnc;
      setterFallback = setterOption.fallback || noop; // method called in case of error
    }
    // create array to push before and after subscribers
    _this.settersListeners.after[setter] = [];
    _this.settersListeners.before[setter] = [];
    // assign the property settern name to the object as own method
    _this[setter] = function () {
      var _this2 = this;

      for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var deferred = $.Deferred();
      var returnVal = null;
      var counter = 0;
      // function to call original function(setter function)
      var callSetter = function callSetter() {
        // run setter function
        returnVal = setterFnc.apply(_this2, args);
        // resolve promise
        deferred.resolve(returnVal);
        //call all subscribed methods afet setter
        var onceListenerKeys = [];
        var afterListeners = _this2.settersListeners.after[setter];
        afterListeners.forEach(function (listener) {
          listener.fnc.apply(_this2, args);
          listener.once && onceListenerKeys.push(listener.key);
        });
        onceListenerKeys.forEach(function (key) {
          return _this2.un(setter, key);
        });
      };
      //  abort function
      var abort = function abort() {
        setterFallback.apply(_this2, args);
        deferred.reject();
      };
      // get all before listeners functions of setter
      var beforeListeners = this.settersListeners['before'][setter];
      // listener counter
      counter = 0;
      var next = function next(bool) {
        // initilize cont to true (continue)
        var cont = true;
        // check if bool is Boolean
        if (_.isBoolean(bool)) cont = bool;
        // check if count is false or we are arrived to the end of onbefore subscriber
        if (cont === false) {
          // found an error so we can abort
          abort.apply(_this2, args);
        } else if (counter === beforeListeners.length) {
          // call complete method methods
          var completed = callSetter();
          //verifico che cosa ritorna
          if (completed === undefined || completed === true) {
            _this2.emitEvent('set:' + setter, args);
          }
        } else if (cont) {
          var listenerObj = beforeListeners[counter];
          var currentCounter = counter;
          // if is async functtion
          if (beforeListeners[counter].async) {
            //add function next to argument of listnerFunction
            args.push(next);
            // update counter
            counter += 1;
            listenerObj.fnc.apply(_this2, args);
          } else {
            // return or undefine or a boolen to tell if ok(true) can conitnue or not (false)
            var _bool = listenerObj.fnc.apply(_this2, args);
            //update counter
            counter += 1;
            next(_bool);
          }
          listenerObj.once && beforeListeners.splice(currentCounter, 1);
        }
      };
      // run next to start to run all the subscribers and setrer its self
      next();
      // retun a promise
      return deferred.promise();
    };
  };

  for (var setter in setters) {
    _loop(setter);
  }
  return this.settersListeners;
};

proto._setupDebounces = function (debounces) {
  for (var name in debounces) {
    var delay = debounces[name].delay;
    var fnc = debounces[name].fnc;
    this[name] = debounce(fnc, delay);
  }
};

proto._setupThrottles = function (throttles) {
  for (var name in throttles) {
    var delay = throttles[name].delay;
    var fnc = throttles[name].fnc;
    this[name] = throttle(fnc, delay);
  }
};

//method get
proto.get = function (key) {
  return this[key] && !(this[key] instanceof Function) ? this[key] : null;
};

//method set
proto.set = function (key, value) {
  this[key] = value;
};

module.exports = G3WObject;

},{"utils":419}],9:[function(require,module,exports){
var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// main object content for i18n
var plugins18nConfig = {};

function init(config) {
  config.appLanguages.forEach(function (language) {
    plugins18nConfig[language] = {
      plugins: {}
    };
  });
  i18next.use(i18nextXHRBackend).init({
    lng: config.language,
    ns: 'app',
    fallbackLng: 'en',
    resources: config.resources
  });
  return new Promise(function (resolve, reject) {
    jqueryI18next.init(i18next, $, {
      tName: 't', // --> appends $.t = i18next.t
      i18nName: 'i18n', // --> appends $.i18n = i18next
      handleName: 'localize', // --> appends $(selector).localize(opts);
      selectorAttr: 'data-i18n', // selector for translating elements
      targetAttr: 'data-i18n-target', // element attribute to grab target element to translate (if diffrent then itself)
      optionsAttr: 'data-i18n-options', // element attribute that contains options, will load/set if useOptionsAttr = true
      useOptionsAttr: false, // see optionsAttr
      parseDefaultValueFromContent: true // parses default values from content ele.val or ele.text
    });
    addI18n(plugins18nConfig);
    resolve();
  });
}
var getAppLanguage = function getAppLanguage() {
  var config = _application2.default.getConfig();
  return config.user.i18n || "en";
};

// function to translate
var t = function t(text) {
  return i18next.t(text);
};

// function to translate plugins
var tPlugin = function tPlugin(text) {
  return i18next.t('plugins.' + text);
};

var tPrefix = function tPrefix(filter) {
  return function (text) {
    return i18next.t(filter + '.' + text);
  };
};

var addI18nPlugin = function addI18nPlugin(_ref) {
  var name = _ref.name,
      config = _ref.config;

  for (var language in config) {
    var pluginLanguage = plugins18nConfig[language];
    if (pluginLanguage) pluginLanguage.plugins[name] = config[language];
  }
  addI18n(plugins18nConfig);
};

var addI18n = function addI18n(i18nObject) {
  for (var language in i18nObject) {
    var languageObj = i18nObject[language];
    for (var key in languageObj) {
      i18next.addResource(language, 'translation', key, languageObj[key]);
    }
  }
};

var changeLanguage = function changeLanguage(language) {
  i18next.changeLanguage(language);
};

module.exports = {
  init: init,
  t: t,
  tPlugin: tPlugin,
  tPrefix: tPrefix,
  addI18n: addI18n,
  addI18nPlugin: addI18nPlugin,
  changeLanguage: changeLanguage,
  getAppLanguage: getAppLanguage
};

},{"services/application":310}],10:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Projections = require('g3w-ol/projection/projections');
var WMSLayer = require('core/layers/map/wmslayer');
var ImageLayer = require('core/layers/imagelayer');

function BaseLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  base(this, config, options);
  if (this.isWMS()) {
    this._mapLayer = new WMSLayer({
      url: this.getWmsUrl(),
      id: this.state.id,
      tiled: this.state.tiled
    });
    this._mapLayer.addLayer(this);
  } else {
    this._mapLayer = this;
  }
}

inherit(BaseLayer, ImageLayer);

var proto = BaseLayer.prototype;

proto.getProjectionFromCrs = function () {
  var crs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  crs.epsg = crs.epsg ? crs.epsg : 'EPSG:3857';
  return Projections.get(crs);
};

proto._makeOlLayer = function () {
  //TO OVERWRITE
};

proto._registerLoadingEvent = function () {
  var _this = this;

  this._olLayer.getSource().on('imageloadstart', function () {
    return _this.emit("loadstart");
  });
  this._olLayer.getSource().on('imageloadend', function () {
    return _this.emit("loadend");
  });
};

proto.getSource = function () {
  return this.getOLLayer().getSource();
};

proto.update = function (mapState, extraParams) {
  this._updateLayer(mapState, extraParams);
};

proto.getOLLayer = function () {
  if (!this._olLayer) {
    this._olLayer = this._makeOlLayer();
    this._registerLoadingEvent();
    if (this._mapLayer.config.attributions) {
      this._olLayer.getSource().setAttributions(this._mapLayer.config.attributions);
    }
    this._olLayer.setVisible(this._mapLayer.state.visible);
  }
  return this._olLayer;
};

proto._updateLayer = function (mapState, extraParams) {
  if (this.isWMS()) {
    this._mapLayer.update(mapState, extraParams);
  }
};

proto.setVisible = function (bool) {
  this.getOLLayer().setVisible(bool);
};

proto.getMapLayer = function () {
  return this._mapLayer;
};

module.exports = BaseLayer;

},{"core/layers/imagelayer":17,"core/layers/map/wmslayer":26,"g3w-ol/projection/projections":73,"utils":419}],11:[function(require,module,exports){
var _constant = require('app/constant');

var _constant2 = _interopRequireDefault(_constant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    uniqueId = _require.uniqueId;

var geometryFields = _constant2.default.GEOMETRY_FIELDS;

var Feature = function Feature() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  ol.Feature.call(this);
  this._uid = uniqueId();
  this._newPrefix = '_new_';
  this._geometry = false;
  var feature = options.feature,
      properties = options.properties;

  if (feature) {
    // check if it has to set only some properties or all feature properties
    if (properties && Array.isArray(properties)) {
      properties.forEach(function (property) {
        return _this.set(property, feature.get(property));
      });
    } else {
      this.setProperties(feature.getProperties());
    }
    this.setId(feature.getId());
    this.setGeometryName(feature.getGeometryName());
    var geometry = feature.getGeometry();
    this._geometry = !!geometry;
    geometry && this.setGeometry(geometry);
    var style = this.getStyle();
    style && this.setStyle(style);
  }
  this.state = {
    new: false,
    state: null,
    visible: true
  };
};

ol.inherits(Feature, ol.Feature);

var proto = Feature.prototype;

//change constructor
proto.constructor = 'Feature';

/**
 * Return unique id
 * @returns {*}
 */
proto.getUid = function () {
  return this._uid;
};

/**
 * set new uid
 * @param uid
 * @private
 */
proto._setUid = function (uid) {
  this._uid = uid;
};

proto.isGeometry = function () {
  return this._geometry;
};

/**
 * Clone a feature with id and pk new
 * @param pk field <Object> send pk field
 * @returns {Feature}
 */
proto.cloneNew = function (pk) {
  var clone = this.clone();
  var uid = uniqueId();
  clone._setUid(uid);
  clone.setTemporaryId();
  //in case of send pk field object set temporary new value
  //to avoid duplicate pk when save clone feature on server
  if (pk && false === pk.editable) {
    //need to be set null
    clone.set(pk.name, null);
  }
  return clone;
};

/**
 * clone existing feature
 * @returns {Feature}
 */
proto.clone = function () {
  var feature = ol.Feature.prototype.clone.call(this);
  feature.setId(this.getId());
  this.isGeometry() && feature.setGeometry(feature.getGeometry().clone());
  var clone = new Feature({
    feature: feature
  });
  var uid = this.getUid();
  clone._setUid(uid);
  clone.setState(this.getState());
  this.isNew() && clone.setNew();
  return clone;
};

proto.setTemporaryId = function () {
  var newValue = '' + this._newPrefix + uniqueId();
  this.setId(newValue);
  this.setNew();
};

proto.setNew = function () {
  this.state.new = true;
};

proto.delete = function () {
  this.state.state = 'delete';
  return this;
};

proto.update = function () {
  this.state.state = 'update';
  return this;
};

proto.add = function () {
  this.state.state = 'add';
  return this;
};

proto.isNew = function () {
  return this.state.new;
};

proto.isAdded = function () {
  return this.state.state === 'add';
};

proto.isUpdated = function () {
  return this.state.state === 'update';
};

proto.isDeleted = function () {
  return this.state.state === 'delete';
};

proto.setFullState = function (state) {
  this.state = state;
};

proto.getFullState = function () {
  return this.state;
};

proto.setState = function (state) {
  this.state.state = state;
};

proto.getState = function () {
  return this.state.state;
};

proto.getAlphanumericProperties = function () {
  var properties = this.getProperties();
  var alphanumericproperties = {};
  for (var name in properties) {
    if (geometryFields.indexOf(name) === -1) alphanumericproperties[name] = properties[name];
  }
  return alphanumericproperties;
};

//clean state of the features
proto.clearState = function () {
  this.state.state = null;
  this.state.new = false;
};

/**
 * need to filter features visiblity on table
 * @returns {boolean}
 */
proto.isVisible = function () {
  return this.state.visible;
};

proto.setVisible = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.state.visible = bool;
};

module.exports = Feature;

},{"app/constant":5,"utils":419}],12:[function(require,module,exports){
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

/** @deprecated */
var _cloneDeep = require('lodash.clonedeep');

// Object to store and handle features of layer
function FeaturesStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._features = options.features || [];
  this._provider = options.provider || null;
  this._loadedIds = []; // store locked ids
  this._lockIds = []; // store locked features
  //setters
  this.setters = {
    addFeatures: function addFeatures(features) {
      var _this = this;

      features.forEach(function (feature) {
        _this._addFeature(feature);
      });
    },
    addFeature: function addFeature(feature) {
      this._addFeature(feature);
    },
    removeFeature: function removeFeature(feature) {
      this._removeFeature(feature);
    },
    updateFeature: function updateFeature(feature) {
      this._updateFeature(feature);
    },
    clear: function clear() {
      this._clearFeatures();
    },
    getFeatures: function getFeatures() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this._getFeatures(options);
    },
    commit: function commit(commitItems, featurestore) {
      return this._commit(commitItems, featurestore);
    },

    /**
     * setter to know when some features are locked
     */
    featuresLockedByOtherUser: function featuresLockedByOtherUser() {
      var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    }
  };

  base(this);
}

inherit(FeaturesStore, G3WObject);

var proto = FeaturesStore.prototype;

proto.clone = function () {
  return _cloneDeep(this);
};

proto.setProvider = function (provider) {
  this._provider = provider;
};

proto.getProvider = function () {
  return this._provider;
};

// method unlock features
proto.unlock = function () {
  var d = $.Deferred();
  this._provider.unlock().then(function (response) {
    d.resolve(response);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

// method get all features from server or attribute _features
proto._getFeatures = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  if (this._provider) {
    //call provider getFeatures to get features from server
    this._provider.getFeatures(options).then(function (options) {
      //get features base on response from server features, featurelockis etc ...
      var features = _this2._filterFeaturesResponse(options);
      _this2.addFeatures(features);
      d.resolve(features);
    }).fail(function (err) {
      return d.reject(err);
    });
  } else {
    d.resolve(this._readFeatures());
  }
  return d.promise();
};

//filter features to add
proto._filterFeaturesResponse = function () {
  var _this3 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  /**
   * get features returned from server and feature that are currently locked.
   * If featurelocks are less that a features, it means that other user is editing these feature
   * @type {*[]}
   */
  var _options$features = options.features,
      features = _options$features === undefined ? [] : _options$features,
      _options$featurelocks = options.featurelocks,
      featurelocks = _options$featurelocks === undefined ? [] : _options$featurelocks;

  //if no features locks mean all feature request are locked by another user

  if (featurelocks.length === 0) {
    //if there are feature on response are locked
    if (features.length > 0) {
      this.featuresLockedByOtherUser(features);
    }
    return [];
  }

  this._filterLockIds(featurelocks);

  var lockFeatures = [];

  var featuresToAdd = features.filter(function (feature) {
    var featureId = feature.getId();
    if (featurelocks.find(function (_ref) {
      var featureid = _ref.featureid;
      return featureId == featureid;
    })) {
      if (_this3._loadedIds.indexOf(featureId) === -1) {
        _this3._loadedIds.push(featureId);
        return true;
      }
    } else {
      lockFeatures.push(feature);
    }
  });

  //if count features
  if (featurelocks.length < features.length) {
    this.featuresLockedByOtherUser(lockFeatures);
  }

  return featuresToAdd;
};

/**
 *
 * @param featurelocks Array of lock feature locked by server fo a request
 * Element of array is
 * {
 *   featureid: Is current id of feature locked
 *   lockid: Is a server unique lock id  number
 * }
 * ex.
 * {featureid: "1", lockid: "6bbab1c1c03332fb39b8ffae35e557ba"}
 * @private
 */
proto._filterLockIds = function () {
  var featurelocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var _lockIds = this._lockIds.map(function (lockid) {
    return lockid.featureid;
  });
  var toAddLockId = featurelocks.filter(function (featurelock) {
    return _lockIds.indexOf(featurelock.featureid) === -1;
  });
  this._lockIds = [].concat(_toConsumableArray(this._lockIds), _toConsumableArray(toAddLockId));
};

proto.addLoadedIds = function (id) {
  this._loadedIds.push(id);
};

proto.getLockIds = function () {
  return this._lockIds;
};

//method to add new lockid
proto.addLockIds = function (lockIds) {
  var _this4 = this;

  this._lockIds = _.union(this._lockIds, lockIds);
  this._lockIds.forEach(function (lockId) {
    return _this4._loadedIds.push(lockId.featureid);
  });
};

/**
 *
 * @returns {*|null|[]}
 * @private
 */
proto._readFeatures = function () {
  return this._features;
};

proto._commit = function (commitItems) {
  var d = $.Deferred();
  if (commitItems && this._provider) {
    commitItems.lockids = this._lockIds;
    this._provider.commit(commitItems).then(function (response) {
      return d.resolve(response);
    }).fail(function (err) {
      return d.reject(err);
    });
  } else d.reject();
  return d.promise();
};

// get feature from id
proto.getFeatureById = function (featureId) {
  return this._features.find(function (feature) {
    return feature.getId() == featureId;
  });
};

proto.getFeatureByUid = function (uid) {
  return this._features.find(function (feature) {
    return feature.getUid() === uid;
  });
};

proto._addFeature = function (feature) {
  this._features.push(feature);
};

//substitute feature after update
proto._updateFeature = function (feature) {
  var _this5 = this;

  this._features.find(function (feat, idx) {
    if (feat.getUid() === feature.getUid()) {
      _this5._features[idx] = feature;
      return true;
    }
  });
};

proto.setFeatures = function (features) {
  this._features = features;
};

proto._removeFeature = function (feature) {
  this._features = this._features.filter(function (feat) {
    return feature.getUid() !== feat.getUid();
  });
};

proto._clearFeatures = function () {
  this._features = null;
  this._features = [];
  this._lockIds = [];
  this._loadedIds = [];
};

proto.getDataProvider = function () {
  return this._provider;
};

// only read downloaded features
proto.readFeatures = function () {
  return this._features;
};

module.exports = FeaturesStore;

},{"core/g3wobject":8,"lodash.clonedeep":"lodash.clonedeep","utils":419}],13:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var FeaturesStore = require('core/layers/features/featuresstore');

// Storage of the feature in vector layer
function OlFeaturesStore() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._features = options.features || new ol.Collection([]);
}

inherit(OlFeaturesStore, FeaturesStore);

var proto = OlFeaturesStore.prototype;

proto.getLength = function () {
  return this._features.getLength();
};

//overwrite
proto.setFeatures = function () {
  var _this = this;

  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  features.forEach(function (feature) {
    return _this._features.push(feature);
  });
};
// overwrite
proto.readFeatures = function () {
  return this._features.getArray();
};

proto.getFeaturesCollection = function () {
  return this._features;
};

proto.getFeatureById = function (featureId) {
  return this._features.getArray().find(function (feature) {
    return feature.getId() == featureId;
  });
};

proto.getFeatureByUid = function (uid) {
  return this._features.getArray().find(function (feature) {
    return feature.getUid() === uid;
  });
};

proto._addFeature = function (feature) {
  this._features.push(feature);
  // useful for ol.source.Vector
  this._features.dispatchEvent('change');
};

//sobtitute the feature after modify
proto._updateFeature = function (feature) {
  // set index at -1
  var index = -1;
  var featuresArray = this._features.getArray();
  for (var i = 0; featuresArray.length; i++) {
    var _feature = featuresArray[i];
    if (_feature.getUid() === feature.getUid()) {
      index = i;
      break;
    }
  }
  if (index >= 0) {
    this._features.removeAt(index);
    this._features.insertAt(index, feature);
    this._features.dispatchEvent('change');
  }
};

// remove feature from store
proto._removeFeature = function (feature) {
  var featuresArray = this._features.getArray();
  for (var i = 0; i < featuresArray.length; i++) {
    var feat = featuresArray[i];
    if (feature.getUid() === feat.getUid()) {
      this._features.removeAt(i);
      break;
    }
  }
  this._features.dispatchEvent('change');
};

proto._clearFeatures = function () {
  try {
    this._features.clear();
  } catch (err) {}
  this._features = null;
  this._features = new ol.Collection([]);
};

module.exports = OlFeaturesStore;

},{"core/layers/features/featuresstore":12,"utils":419}],14:[function(require,module,exports){
var _constant = require('app/constant');

//Expression
function Expression() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._layerName = options.layerName;
  var filter = options.filter;
  this._expression = filter && filter || '';
}

var proto = Expression.prototype;

proto.and = function (field, value) {
  this._expression = this._expression ? this._expression + ' AND ' : this._expression;
  if (field && value) {
    this.eq(field, value);
  }
  return this;
};

proto.or = function () {
  if (field && value) {
    this._expression = this._expression ? this._expression + ' OR ' : this._expression;
    this.eq(field, value);
  }
  return this;
};

proto.eq = function (field, value) {
  this._expression = this._expression + this._build('eq', field, value);
  return this;
};

proto.like = function (field, value) {
  this._expression = this._expression + this._build('LIKE', field, value);
  return this;
};

proto.ilike = function (field, value) {
  this._expression = this._expression + this._build('ILIKE', field, value);
  return this;
};

proto.not = function (field, value) {
  this._expression = this._expression + this._build('NOT', field, value);
  return this;
};

proto.gt = function (field, value) {
  this._expression = this._expression + this._build('gt', field, value);
  return this;
};

proto.gte = function (field, value) {
  this._expression = this._expression + this._build('gte', field, value);
  return this;
};

proto.lt = function (field, value) {
  this._expression = this._expression + this._build('lt', field, value);
  return this;
};

proto.lte = function (field, value) {
  this._expression = this._expression + this._build('lte', field, value);
  return this;
};

proto.clear = function () {
  this._expression = '';
  return this;
};

// get expression method to get the realt value of the expression
proto.get = function () {
  return this._layerName ? this._layerName + ': ' + this._expression : this._expression;
};

proto._build = function (operator, field, value) {
  return ['"' + field + '"', _constant.FILTER_EXPRESSION_OPERATORS[operator], '' + value].join(' ');
};

proto.createSingleExpressionElement = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      value = _ref.value,
      attribute = _ref.attribute,
      operator = _ref.operator,
      logicop = _ref.logicop;

  var filterElement = void 0;
  var valueExtra = operator === 'LIKE' || operator === 'ILIKE' ? "%" : "";
  var filterOp = _constant.FILTER_EXPRESSION_OPERATORS[operator];
  var filterLogicOperator = logicop && ' ' + logicop + ' ' || '';
  if (operator === 'IN') {
    var _value = Array.isArray(value) ? value : [value];
    var filterValue = '( ' + _value.map(function (value) {
      return '\'' + value + '\'';
    }).join(',').replace(/,/g, ' , ') + ' )';
    filterElement = '"' + attribute + '" ' + filterOp + ' ' + filterValue + filterLogicOperator;
  } else if (value !== null && value !== undefined && !(Number.isNaN(value) || !value.toString().trim()) //check if a valid number (not a NaN and not an empty string)
  ) {
      var singolequote = Array.isArray(value) ? value : typeof value !== 'number' ? value.split("'") : [];
      if (singolequote.length > 1) {
        var _filterElements = [];
        for (var i = 0; i < singolequote.length; i++) {
          var _value2 = singolequote[i];
          if (!_value2) continue;
          var _filterValue = ('%' + _value2 + '%').trim();
          var _filterElement = '"' + attribute + '" ' + filterOp + ' \'' + _filterValue + '\'';
          _filterElements.push(_filterElement);
        }
        filterElement = '' + _filterElements.join(' ' + logicop + ' ') + filterLogicOperator;
      } else filterElement = '"' + attribute + '" ' + filterOp + ' \'' + valueExtra + value + valueExtra + '\'' + filterLogicOperator;
    }
  return filterElement;
};

proto.createExpressionFromFilterObject = function () {
  var _this = this;

  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var filterElements = [];
  var rootFilter = void 0;
  for (var operator in filter) {
    rootFilter = _constant.FILTER_EXPRESSION_OPERATORS[operator];
    var inputs = filter[operator];
    inputs.forEach(function (input) {
      for (var _operator in input) {
        var _value3 = input[_operator];
        if (Array.isArray(_value3)) {
          _this.createExpressionFromFilterObject(input);
        } else {
          var _field = input[_operator];
          for (var attribute in _field) {
            var _value4 = _field[attribute];
            var fieldElement = _this.createSingleExpressionElement({
              value: _value4,
              operator: _operator,
              attribute: attribute
            });
            filterElements.push(fieldElement);
          }
        }
      }
    });
    rootFilter = filterElements.length > 0 ? filterElements.join(" " + rootFilter + " ") : false;
  }
  return rootFilter;
};

proto.createExpressionFromField = function (_ref2) {
  var layerName = _ref2.layerName,
      field = _ref2.field,
      value = _ref2.value,
      _ref2$operator = _ref2.operator,
      operator = _ref2$operator === undefined ? 'eq' : _ref2$operator;

  var filter = this.createSingleExpressionElement({
    attribute: field,
    value: value,
    operator: operator
  });
  this._expression = layerName + ':' + filter;
  return this;
};

proto.createExpressionFromFilterArray = function () {
  var _this2 = this;

  var inputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var filter = '';
  // set logicop of last element to null
  var inputsLength = inputs.length ? inputs.length - 1 : inputs.length;
  inputs.forEach(function (input, index) {
    var filterElement = _this2.createSingleExpressionElement(input);
    filter = '' + filter + (input.logicop && index === inputsLength ? filterElement.substring(0, filterElement.length - (input.logicop.length + 1)) : filterElement);
  });
  return filter || undefined;
};

proto.createExpressionFromFilter = function (filter, layerName) {
  var filterParam = Array.isArray(filter) ? this.createExpressionFromFilterArray(filter) : this.createExpressionFromFilterObject(filter);
  if (filterParam) this._expression = layerName + ':' + filterParam;
  return this;
};

module.exports = Expression;

},{"app/constant":5}],15:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// class Filter to build filter
// useful by provider providers to get data
function Filter() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._filter = null;
  this._type = null;
  this.config = config;
}

var proto = Filter.prototype;

/**
 * Config methods
 */

proto.getConfig = function () {
  return this.config;
};

proto.setConfig = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = config;
};

proto.mergeConfig = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = _extends({}, this.config, config);
};

/***
 *  end config methods
 */

proto.getAll = function () {
  this._type = Filter.TYPES.all;
  this._filter = null;
};

// to create complex filter
proto.setExpression = function (expression) {
  this._type = Filter.TYPES.expression;
  this._filter = expression;
};

proto.setGeometry = function (geometry) {
  this._type = Filter.TYPES.geometry;
  this._filter = geometry;
  return this;
};

proto.setBBOX = function (bbox) {
  this._type = Filter.TYPES.bbox;
  this._filter = bbox;
  return this;
};

proto.setFids = function (ids) {
  this._type = Filter.TYPES.fids;
  this._filter = ids;
  return this;
};

proto.serialize = function () {
  return JSON.stringify(this);
};

// get filter value
proto.get = function () {
  return this._filter;
};

proto.getType = function () {
  return this._type;
};

proto.clear = function () {
  this._filter = null;
};

Filter.TYPES = {
  bbox: 'bbox',
  geometry: 'geometry',
  expression: 'expression',
  fids: 'fids',
  all: 'all'
};

module.exports = Filter;

},{}],16:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var VectorLayer = require('core/layers/vectorlayer');
var GeojsonMapLayer = require('core/layers/map/geojson');

function GeojsonLayer(config, options) {
  base(this, config, options);
  this.config.style = config.style;
  this.setup(config);
}

inherit(GeojsonLayer, VectorLayer);

var proto = GeojsonLayer.prototype;

proto.getMapLayer = function () {
  if (!this._mapLayer) {
    this._mapLayer = new GeojsonMapLayer({
      url: this.get('source').url,
      projection: this.getProjection().getCode(),
      id: this.getId(),
      name: this.getName(),
      style: this.get('style'),
      provider: this.getProvider('data')
    });
  }
  return this._mapLayer;
};

module.exports = GeojsonLayer;

},{"core/layers/map/geojson":23,"core/layers/vectorlayer":38,"utils":419}],17:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _get_legend_params = require('utils/get_legend_params');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    mixin = _require.mixin;

var Layer = require('core/layers/layer');
var VectorLayer = require('core/layers/vectorlayer');
var WMSLayer = require('core/layers/map/wmslayer');
var WMSTLayer = require('core/layers/map/wmstlayer');
var ARCGISMAPSERVERLayer = require('core/layers/map/arcgismapserverlayer');
var XYZLayer = require('core/layers/map/xyzlayer');
var GeoLayerMixin = require('core/layers/mixins/geo');

/**
 * Stringify a query URL param (eg. `&WIDTH=700`)
 * 
 * @param name
 * @param value
 * 
 * @returns { string | null } a string if value is set or null
 */
function __(name, value) {
  return value || 0 === value ? '' + name + value : null;
}

/**
 * @param config.id
 * @param config.title
 * @param config.name
 * @param config.origname
 * @param config.multilayerid
 * @param config.servertype
 * @param config.source
 * @param config.crs
 * @param config.projection
 * @param config.bbox
 * @param config.capabilities
 * @param config.cache_url
 * @param config.cache_provider  @since 3.10.0
 * @param config.baselayer
 * @param config.geometrytype
 * @param config.editops
 * @param config.expanded
 * @param config.fields
 * @param config.wmsUrl
 * @param config.infoformat
 * @param config.infourl
 * @param config.maxscale
 * @param config.minscale
 * @param config.visible
 * @param config.scalebasedvisibility
 * @param config.wfscapabilities
 * @param config.ows_method
 * @param config.wms_use_layer_ids
 * @param config.styles
 */
function ImageLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  this.setters = {
    change: function change() {}
  };

  base(this, config, options);

  this.config.baselayer = config.baselayer || false;
  this.type = Layer.LayerTypes.IMAGE;
  this.legendUrl = null;
  this.customParams = {};

  this.setup(config, options);
}

inherit(ImageLayer, Layer);

mixin(ImageLayer, GeoLayerMixin);

var proto = ImageLayer.prototype;

proto.getLayerForEditing = _asyncToGenerator(function* () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$force = _ref2.force,
      force = _ref2$force === undefined ? false : _ref2$force,
      vectorurl = _ref2.vectorurl,
      project_type = _ref2.project_type,
      project = _ref2.project;

  if (!force && !this.isEditable()) {
    return null;
  }

  // set editing layer
  try {
    var layerForEditing = yield new VectorLayer(this.config, {
      vectorurl: vectorurl,
      project_type: project_type,
      project: project || _projects2.default.getCurrentProject()
    }).layerForEditing;
    this.setEditingLayer(layerForEditing);
    return layerForEditing;
  } catch (e) {
    return Promise.reject(e);
  }
});

proto.isBaseLayer = function () {
  return this.config.baselayer;
};

proto.isWMS = function () {
  return ImageLayer.WMSServerTypes.indexOf(this.config.servertype) > -1;
};

proto.isLayerProjectionASMapProjection = function () {
  return this.config.crs.epsg === this.config.map_crs;
};

proto.getCrs = function () {
  return this.config.crs.epsg;
};

proto.isExternalWMS = function () {
  return !!(this.config.source && this.config.source.external && this.config.source.url);
};

proto.isArcgisMapserver = function () {
  return this.isExternalWMS() && this.config.source.type === Layer.SourceTypes.ARCGISMAPSERVER;
};

proto._getBaseLayerName = function () {
  return this.isWmsUseLayerIds() ? this.getId() : this.getName();
};

/**
 * @since 3.9.0
 */
proto._hasExternalWMSOrLegend = function () {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'map';
  var source = this.config.source;


  return source && ('map' !== type || this.isExternalWMS() && this.isLayerProjectionASMapProjection()) && ('legend' === type || source.external);
};

proto.getWMSLayerName = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$type = _ref3.type,
      type = _ref3$type === undefined ? 'map' : _ref3$type;

  var _ref4 = this.config || { source: {} },
      source = _ref4.source;

  var source_layer = source.layers || source.layer;

  /** @FIXME add description */
  if (source_layer && this._hasExternalWMSOrLegend(type)) {
    return source_layer;
  }

  return this._getBaseLayerName();
};

/**
 * @param { 'map' | 'legend' } opts.type 
 */
proto.getWmsUrl = function () {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref5$type = _ref5.type,
      type = _ref5$type === undefined ? 'map' : _ref5$type;

  var _ref6 = this.config || { source: {} },
      source = _ref6.source;

  /** @FIXME add description */


  if (source.url && this._hasExternalWMSOrLegend(type) && ['wms', 'wmst'].includes(source.type)) {
    return source.url;
  }

  return this.config.wmsUrl;
};

proto.getWFSLayerName = function () {
  return this.getQueryLayerName().replace(/\s/g, '_').replaceAll(':', '-');
};

proto.useProxy = function () {
  return this.isExternalWMS() && this.isLayerProjectionASMapProjection() && this.getInfoFormats();
};

proto.getWMSInfoLayerName = function () {
  return this.useProxy() ? this.getSource().layers : this._getBaseLayerName();
};

proto.getPrintLayerName = function () {
  return this.isWmsUseLayerIds() ? this.getId() : this.getName();
};

proto.getStringBBox = function () {
  var _config$bbox = this.config.bbox,
      minx = _config$bbox.minx,
      miny = _config$bbox.miny,
      maxx = _config$bbox.maxx,
      maxy = _config$bbox.maxy;

  return minx + ',' + miny + ',' + maxx + ',' + maxy;
};

proto.isWfsActive = function () {
  return Array.isArray(this.config.ows) && this.config.ows.some(function (type) {
    return 'WFS' === type;
  });
};

/**
 * Get wms url of the layer
 */
proto.getFullWmsUrl = function () {
  var wms_url = _projects2.default.getCurrentProject().getState().metadata.wms_url;

  /** @FIXME add description */


  if (wms_url && !this.isExternalWMS()) {
    return wms_url;
  }

  return this.getWmsUrl();
};

/**
 * Get WMS url (used by Catalog Layer Menu) 
 */
proto.getCatalogWmsUrl = function () {
  var _ProjectsRegistry$get = _projects2.default.getCurrentProject().getMetadata(),
      wms_url = _ProjectsRegistry$get.wms_url;

  /** @FIXME add description */


  if (wms_url && !this.isExternalWMS()) {
    return wms_url;
  }

  return this.getWmsUrl() + '?service=WMS&version=1.3.0&request=GetCapabilities';
};

/**
 * Get WFS url (used by Catalog Layer Menu)  
 */
proto.getCatalogWfsUrl = function () {
  return this.getWfsUrl() + '?service=WFS&version=1.1.0&request=GetCapabilities';
};

proto.getWfsUrl = function () {
  var _ProjectsRegistry$get2 = _projects2.default.getCurrentProject().getMetadata(),
      wms_url = _ProjectsRegistry$get2.wms_url;

  /** @FIXME add description */


  if (wms_url) {
    return wms_url;
  }

  return this.config.wmsUrl;
};

/**
 * Get query url based on type, external or same projection of map
 * 
 * @returns {string}
 */
proto.getQueryUrl = function () {
  var url = base(this, 'getQueryUrl');
  var is_qgis = Layer.ServerTypes.QGIS === this.getServerType() && this.isExternalWMS() && this.isLayerProjectionASMapProjection();

  /** @FIXME add description */
  if (is_qgis && this.getInfoFormats()) {
    return this.getSource().url;
  }

  /** @FIXME add description */
  if (is_qgis) {
    return url + 'SOURCE=' + this.config.source.type;
  }

  return url;
};

proto.getIconUrlFromLegend = function () {
  return this.getLegendUrl({ layertitle: false });
};

/**
 * Retrieve legend url (ARCGISMAPSERVER or WMS)
 * 
 * ORIGINAL SOURCE: src/app/core/layers/legend/legendservice.js@3.8.5
 * 
 * @param { boolean }                                    opts.categories whether layer has categories
 * @param { boolean }                                    opts.all        whether to show all categories (disables filter by map's BBOX).
 * @param { 'application/json' | 'image/png' | string }  opts.format     MIME Type used to set format of legend:
 *                                                                          - `application/json`: if request from layers categories (icon and label),
 *                                                                          - `image/png`: if request from legend tab
 * 
 * @see https://docs.qgis.org/3.28/en/docs/server_manual/services/wms.html#getlegendgraphics
 */
proto.getLegendUrl = function () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { categories: false, all: false, format: 'image/png' };


  var base_url = void 0,
      url_params = void 0;

  var _params$customParams = _extends({}, params, this.customParams),
      width = _params$customParams.width,
      height = _params$customParams.height,
      _params$customParams$ = _params$customParams.color,
      color = _params$customParams$ === undefined ? "white" : _params$customParams$,
      _params$customParams$2 = _params$customParams.fontsize,
      fontsize = _params$customParams$2 === undefined ? 10 : _params$customParams$2,
      _params$customParams$3 = _params$customParams.transparent,
      transparent = _params$customParams$3 === undefined ? true : _params$customParams$3,
      boxspace = _params$customParams.boxspace,
      layerspace = _params$customParams.layerspace,
      _params$customParams$4 = _params$customParams.layertitle,
      layertitle = _params$customParams$4 === undefined ? true : _params$customParams$4,
      layertitlespace = _params$customParams.layertitlespace,
      symbolspace = _params$customParams.symbolspace,
      iconlabelspace = _params$customParams.iconlabelspace,
      symbolwidth = _params$customParams.symbolwidth,
      symbolheight = _params$customParams.symbolheight,
      itemfontfamily = _params$customParams.itemfontfamily,
      layerfontfamily = _params$customParams.layerfontfamily,
      layerfontbold = _params$customParams.layerfontbold,
      itemfontbold = _params$customParams.itemfontbold,
      layerfontitalic = _params$customParams.layerfontitalic,
      itemfontitalic = _params$customParams.itemfontitalic,
      rulelabel = _params$customParams.rulelabel,
      crs = _params$customParams.crs,
      bbox = _params$customParams.bbox,
      _params$customParams$5 = _params$customParams.sld_version,
      sld_version = _params$customParams$5 === undefined ? '1.1.0' : _params$customParams$5;

  /**
   * ARCGIS Server
   * 
   * ORIGINAL SOURCE: src/app/core/layers/legend/arcgismapserverlegend.js@3.8.5
   */


  if (this.isArcgisMapserver()) {
    base_url = this.getConfig().source.url.replace('/rest/', '/') + '/WMSServer';
    url_params = ['request=GetLegendGraphic', 'version=1.3.0', 'format=image/png', 'LAYER=' + this.getConfig().source.layer];
  }

  /**
   * WMS Server
   * 
   * ORIGINAL SOURCE: src/app/core/layers/legend/wmslegend.js@3.8.5
   */
  else {
      var ctx_legend = opts.categories && (['image/png', undefined].includes(opts.format) || _projects2.default.getCurrentProject().getContextBaseLegend()) ? (0, _get_legend_params.get_legend_params)(this) : undefined // disabled when `FORMAT=application/json` (otherwise it create some strange behaviour on WMS `getMap` when switching between layer styles)   
      ;
      base_url = this.getWmsUrl({ type: 'legend' });
      url_params = ['SERVICE=WMS', 'VERSION=1.3.0', 'REQUEST=GetLegendGraphic', __('SLD_VERSION=', sld_version), __('WIDTH=', width), __('HEIGHT=', height), __('FORMAT=', undefined === opts.format ? 'image/png' : opts.format), __('TRANSPARENT=', transparent), __('ITEMFONTCOLOR=', color), __('LAYERFONTCOLOR=', color), __('LAYERTITLE=', layertitle), __('ITEMFONTSIZE=', fontsize), __('CRS=', crs), __('BBOX=', [false, undefined].includes(opts.all) && bbox && bbox.join(',')), __('BOXSPACE=', boxspace), __('LAYERSPACE=', layerspace), __('LAYERTITLESPACE=', layertitlespace), __('SYMBOLSPACE=', symbolspace), __('ICONLABELSPACE=', iconlabelspace), __('SYMBOLWIDTH=', opts.categories && 'application/json' === opts.format ? 16 : symbolwidth), __('SYMBOLHEIGHT=', opts.categories && 'application/json' === opts.format ? 16 : symbolheight), __('LAYERFONTFAMILY=', layerfontfamily), __('ITEMFONTFAMILY=', itemfontfamily), __('LAYERFONTBOLD=', layerfontbold), __('ITEMFONTBOLD=', itemfontbold), __('LAYERFONTITALIC=', layerfontitalic), __('ITEMFONTITALIC=', itemfontitalic), __('RULELABEL=', rulelabel), __('LEGEND_ON=', ctx_legend && ctx_legend.LEGEND_ON), __('LEGEND_OFF=', ctx_legend && ctx_legend.LEGEND_OFF), __('STYLES=', opts.categories && 'application/json' === opts.format ? encodeURIComponent(this.getCurrentStyle().name) : undefined), __('LAYER=', this.getWMSLayerName({ type: 'legend' }))];
    }

  // discard nullish parameters (without a value)
  url_params = url_params.filter(function (p) {
    return p;
  });

  this.legendUrl = '' + base_url + (base_url.indexOf('?') > -1 ? '&' : '?') + url_params.join('&');

  return this.legendUrl;
};

proto.setMapParamstoLegendUrl = function (_ref7) {
  var bbox = _ref7.bbox,
      crs = _ref7.crs;

  this.customParams = _extends({}, this.customParams, { bbox: bbox, crs: crs });
};

proto.getWfsCapabilities = function () {
  return this.config.wfscapabilities || 1 === this.config.capabilities;
};

proto.getMapLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments[1];

  options.iframe_internal = _application2.default.isIframe() && !this.isExternalWMS();
  var method = this.isExternalWMS() ? 'GET' : this.getOwsMethod();
  var extent = this.config.bbox ? [this.config.bbox.minx, this.config.bbox.miny, this.config.bbox.maxx, this.config.bbox.maxy] : null;
  var url = options.url || this.getWmsUrl();
  var source = this.config.source;
  /** @since  3.10.0 Cache info **/
  var cache_url = this.config.cache_url;
  var cache_provider = this.config.cache_provider;
  var cache_service_type = this.config.cache_service_type || 'tms';
  var cache_layer = this.config.cache_layer;
  var cache_extent = this.config.cache_extent;
  var cache_grid = this.config.cache_grid;
  var cache_grid_extent = this.config.cache_grid_extent;

  if (this.isCached() && 'tms' === cache_service_type) {
    return new XYZLayer(_extends({}, options, { extent: extent, cache_provider: cache_provider }), method);
  }

  if (this.isExternalWMS() && source && Layer.SourceTypes.ARCGISMAPSERVER === source.type) {
    return new ARCGISMAPSERVERLayer(_extends({}, options, source), extraParams);
  }

  if ('wmts' === cache_service_type) {
    return new WMSTLayer(_extends({}, options, {
      url: cache_url,
      cache_provider: cache_provider,
      cache_layer: cache_layer,
      cache_extent: cache_extent,
      cache_grid: cache_grid,
      cache_grid_extent: cache_grid_extent
    }), extraParams, method);
  }

  if (this.isExternalWMS() && source && Layer.SourceTypes.WMST === source.type) {
    return new WMSTLayer(_extends({}, options, { url: url, cache_provider: cache_provider, cache_params: {} }), extraParams, method);
  }

  return new WMSLayer(_extends({}, options, { url: url }), extraParams, method);
};

/**
 * @override Layer~getFormat
 * 
 * @since 3.9.1
 */
proto.getFormat = function () {
  if (this.isExternalWMS() && this.getSource()) {
    return this.getSource().format;
  }
  return base(this, 'getFormat');
};

ImageLayer.WMSServerTypes = [Layer.ServerTypes.QGIS, Layer.ServerTypes.Mapserver, Layer.ServerTypes.Geoserver, Layer.ServerTypes.OGC];

module.exports = ImageLayer;

},{"core/layers/layer":18,"core/layers/map/arcgismapserverlayer":22,"core/layers/map/wmslayer":26,"core/layers/map/wmstlayer":27,"core/layers/map/xyzlayer":28,"core/layers/mixins/geo":30,"core/layers/vectorlayer":38,"services/application":310,"store/projects":335,"utils":419,"utils/get_legend_params":414}],18:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('app/constant');

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _download = require('core/layers/mixins/download');

var _download2 = _interopRequireDefault(_download);

var _selection = require('core/layers/mixins/selection');

var _selection2 = _interopRequireDefault(_selection);

var _relations = require('core/layers/mixins/relations');

var _relations2 = _interopRequireDefault(_relations);

var _parseAttributes = require('utils/parseAttributes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var _require2 = require('utils'),
    inherit = _require2.inherit,
    base = _require2.base,
    XHR = _require2.XHR;

var G3WObject = require('core/g3wobject');
var ProviderFactory = require('core/layers/providersfactory');
var deprecate = require('util-deprecate');

// Base Class of all Layer
function Layer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  this.config = config;

  // assign some attribute
  config.id = config.id || 'Layer';
  config.title = config.title || config.name;
  config.download = !!config.download;
  config.geolayer = false;
  config.baselayer = !!config.baselayer;
  config.fields = config.fields || {};
  config.urls = _extends({
    query: config.infourl && '' !== config.infourl ? config.infourl : config.wmsUrl
  }, config.urls || {});

  //get current project object
  var _options$project = options.project,
      project = _options$project === undefined ? _projects2.default.getCurrentProject() : _options$project;

  //get search_end point value (api, ows)

  this.config.search_endpoint = project.getSearchEndPoint();

  // create relations
  this._relations = this._createRelations(project.getRelations());

  // set URLs to get varios type of data
  if (!this.isBaseLayer()) {
    //suffix url
    var suffixUrl = project.getType() + '/' + project.getId() + '/' + config.id + '/';
    //get vector url
    var vectorUrl = project.getVectorUrl();
    //get raster url
    var rasterUrl = project.getRasterUrl();

    this.config.urls.filtertoken = vectorUrl + 'filtertoken/' + suffixUrl;
    this.config.urls.data = vectorUrl + 'data/' + suffixUrl;
    this.config.urls.shp = vectorUrl + 'shp/' + suffixUrl;
    this.config.urls.csv = vectorUrl + 'csv/' + suffixUrl;
    this.config.urls.xls = vectorUrl + 'xls/' + suffixUrl;
    this.config.urls.gpx = vectorUrl + 'gpx/' + suffixUrl;
    this.config.urls.gpkg = vectorUrl + 'gpkg/' + suffixUrl;
    this.config.urls.geotiff = rasterUrl + 'geotiff/' + suffixUrl;
    this.config.urls.editing = vectorUrl + 'editing/' + suffixUrl;
    this.config.urls.commit = vectorUrl + 'commit/' + suffixUrl;
    this.config.urls.config = vectorUrl + 'config/' + suffixUrl;
    this.config.urls.unlock = vectorUrl + 'unlock/' + suffixUrl;
    this.config.urls.widget = {
      unique: vectorUrl + 'widget/unique/data/' + suffixUrl
    };

    /**
     * Store feature count url to get features count of a layer
     *
     * @since 3.8.0
     */
    this.config.urls.featurecount = project.getUrl('featurecount');

    /**
     * Custom parameters based on project qgis version
     */
    this.config.searchParams = { I: 0, J: 0 };
  }

  // dinamic layer values useful for layerstree
  var defaultstyle = config.styles && config.styles.find(function (style) {
    return style.current;
  }).name;

  this.state = {

    id: config.id,

    title: config.title,

    selected: config.selected || false,

    disabled: config.disabled || false,

    metadata: config.metadata,

    metadata_querable: this.isBaseLayer() ? false : this.isQueryable({ onMap: false }),

    openattributetable: this.isBaseLayer() ? false : this.canShowTable(),

    removable: config.removable || false,

    downloadable: this.isDownloadable(),

    source: config.source,

    styles: config.styles,

    defaultstyle: defaultstyle,

    /**
     * state of if is in editing (setted by editing plugin)
     */
    inediting: false,

    infoformat: this.getInfoFormat(),

    infoformats: this.config.infoformats || [],

    projectLayer: true,

    geolayer: false,

    /**
     * Reactive selection attribute 
     */
    selection: {
      active: false
    },

    /**
     * Reactive filter attribute 
     */
    filter: {
      active: false,

      /**
       * @since 3.9.0 whether filter is set from a previously saved filter
       */
      current: null
    },

    /**
     * @type { Array<{{ id: string, name: string }}> } array of saved filters
     *
     * @since 3.9.0
     */
    filters: config.filters || [],

    attributetable: {
      pageLength: null
    },

    visible: config.visible || false,

    tochighlightable: false,

    /**
     * @type {number}
     * 
     * @since 3.8.0
     */
    featurecount: config.featurecount,

    /**
     * @type { boolean | Object<number, number> }
     * 
     * @since 3.8.0
     */
    stylesfeaturecount: config.featurecount && defaultstyle && _defineProperty({}, defaultstyle, config.featurecount)

  };

  /**
   * Store all selection features `fids`
   */
  this.selectionFids = new Set();

  // referred to (layersstore);
  this._layersstore = config.layersstore || null;

  /*
    Providers that layer can use
     Three type of provider:
      1 - query
      2 - filter
      3 - data -- raw data del layer (editing)
   */
  var serverType = this.config.servertype;
  var sourceType = this.config.source ? this.config.source.type : null; // NB: sourceType = source of layer

  if (serverType && sourceType) {
    //set providers that will take in account to get data from server
    this.providers = {
      query: ProviderFactory.build('query', serverType, sourceType, { layer: this }),
      filter: ProviderFactory.build('filter', serverType, sourceType, { layer: this }),
      filtertoken: ProviderFactory.build('filtertoken', serverType, sourceType, { layer: this }),
      search: ProviderFactory.build('search', serverType, sourceType, { layer: this }),
      data: ProviderFactory.build('data', serverType, sourceType, { layer: this })
    };
  }

  /**
   * Store last proxy params (useful for repeat request info formats for wms external layer)
   */
  this.proxyData = {
    wms: null // at the moment only wms data from server
  };

  base(this);
}

inherit(Layer, G3WObject);

Object.assign(Layer.prototype, _download2.default);
Object.assign(Layer.prototype, _relations2.default);
Object.assign(Layer.prototype, _selection2.default);

var proto = Layer.prototype;

/**
 * Proxy params data
 */
proto.getProxyData = function (type) {
  return type ? this.proxyData[type] : this.proxyData;
};

/**
 * Set proxy data
 *
 * @param type
 * @param data
 */
proto.setProxyData = function (type) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.proxyData[type] = data;
};

/**
 * Clear proxy data
 *
 * @param type
 */
proto.clearProxyData = function (type) {
  this.proxyData[type] = null;
};

/**
 * Get a proxy request
 *
 * @param type
 * @param proxyParams
 *
 * @returns {Promise<*>}
 */
proto.getDataProxyFromServer = _asyncToGenerator(function* () {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wms';
  var proxyParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  try {
    var _ref3 = yield _data2.default.getData('proxy:' + type, {
      inputs: proxyParams,
      outputs: false
    }),
        response = _ref3.response,
        data = _ref3.data;

    this.setProxyData(type, JSON.parse(data));
    return response;
  } catch (err) {
    console.warn(err);
  }
});

/**
 * @TODO Add description
 *
 * @param type
 * @param changes
 *
 * @returns {Promise<*>}
 */
proto.changeProxyDataAndReloadFromServer = function () {
  var _this = this;

  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wms';
  var changes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  Object.keys(changes).forEach(function (changeParam) {
    Object.keys(changes[changeParam]).forEach(function (param) {
      _this.proxyData[type][changeParam][param] = changes[changeParam][param];
    });
  });
  return this.getDataProxyFromServer(type, this.proxyData[type]);
};

/**
 * [EDITING PLUGIN] Check if layer is in editing
 *
 * @returns { boolean }
 */
proto.isInEditing = function () {
  return this.state.inediting;
};

/**
 * [EDITING PLUGIN] Set editing state
 *
 * @param {boolean} bool
 */
proto.setInEditing = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.inediting = bool;
};

/**
 * @TODO Add description here
 *
 * @returns {*}
 */
proto.getSearchParams = function () {
  return this.config.searchParams;
};

/**
 * Return search_endpoint
 *
 * @returns {*}
 */
proto.getSearchEndPoint = function () {
  return this.getType() !== Layer.LayerTypes.TABLE ? this.config.search_endpoint : 'api';
};

/**
 * @TODO Add description
 *
 * @param pageLength
 */
proto.setAttributeTablePageLength = function (pageLength) {
  this.state.attributetable.pageLength = pageLength;
};

/**
 * @TODO add description
 *
 * @returns {null}
 */
proto.getAttributeTablePageLength = function () {
  return this.state.attributetable.pageLength;
};

/**
 * @returns { string } wms layer name for wms request
 */
proto.getWMSLayerName = function () {
  return this.isWmsUseLayerIds() ? this.getId() : this.getName();
};

/**
 * @returns { boolean | *} whether request need to use `layer.id` or `layer.name`
 */
proto.isWmsUseLayerIds = function () {
  return this.config.wms_use_layer_ids;
};

/**
 * @returns {*|null} source type of layer
 */
proto.getSourceType = function () {
  return this.config.source ? this.config.source.type : null;
};

/**
 * @returns {boolean} whether it is a layer with geometry
 */
proto.isGeoLayer = function () {
  return this.state.geolayer;
};

/**
 * @TODO Add description
 *
 * @param { Object } opts
 * @param opts.page
 * @param opts.page_size
 * @param opts.ordering
 * @param opts.search
 * @param opts.suggest
 * @param opts.formatter
 * @param opts.custom_params
 * @param opts.field
 * @param opts.in_bbox
 *
 * @returns {*}
 */
proto.getDataTable = function () {
  var _this2 = this;

  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$page = _ref4.page,
      page = _ref4$page === undefined ? null : _ref4$page,
      _ref4$page_size = _ref4.page_size,
      page_size = _ref4$page_size === undefined ? null : _ref4$page_size,
      _ref4$ordering = _ref4.ordering,
      ordering = _ref4$ordering === undefined ? null : _ref4$ordering,
      _ref4$search = _ref4.search,
      search = _ref4$search === undefined ? null : _ref4$search,
      _ref4$suggest = _ref4.suggest,
      suggest = _ref4$suggest === undefined ? null : _ref4$suggest,
      _ref4$formatter = _ref4.formatter,
      formatter = _ref4$formatter === undefined ? 0 : _ref4$formatter,
      _ref4$custom_params = _ref4.custom_params,
      custom_params = _ref4$custom_params === undefined ? {} : _ref4$custom_params,
      field = _ref4.field,
      in_bbox = _ref4.in_bbox;

  var d = $.Deferred();
  var provider = void 0;
  var params = _extends({}, custom_params, {
    field: field,
    page: page,
    page_size: page_size,
    ordering: ordering,
    search: search,
    formatter: formatter,
    suggest: suggest,
    in_bbox: in_bbox,
    filtertoken: _applicationState2.default.tokens.filtertoken
  });
  if (!(this.getProvider('filter') || this.getProvider('data'))) {
    d.reject();
  } else {
    provider = this.getProvider('data');
    provider.getFeatures({ editing: false }, params).done(function (response) {
      var features = response.data.features && response.data.features || [];
      d.resolve({
        headers: (0, _parseAttributes.parseAttributes)(_this2.getAttributes(), features.length ? features[0].properties : []),
        features: features,
        title: _this2.getTitle(),
        count: response.count
      });
    }).fail(function (err) {
      return d.reject(err);
    });
  }
  return d.promise();
};

/**
 * Search layer feature by fids
 *
 * @param fids formatter
 */
proto.getFeatureByFids = _asyncToGenerator(function* () {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$fids = _ref6.fids,
      fids = _ref6$fids === undefined ? [] : _ref6$fids,
      _ref6$formatter = _ref6.formatter,
      formatter = _ref6$formatter === undefined ? 0 : _ref6$formatter;

  var url = this.getUrl('data');
  try {
    var response = yield XHR.get({
      url: url,
      params: {
        fids: fids.toString(),
        formatter: formatter
      }
    });
    if (response && response.result && response.vector && response.vector.data) {
      return response.vector.data.features;
    }
  } catch (err) {}
});

/**
 * Search Features
 * 
 * @param { Object }        opts
 * @param { 'ows' | 'api' } options.search_endpoint
 * @param { boolean }       options.raw
 * @param { 0 | 1 }         options.formatter
 * @param options.filter
 * @param options.suggest
 * @param options.unique
 * @param options.queryUrl
 * @param options.ordering
 * @param { Object }        params - OWS search params
 * 
 * @returns { Promise }
 */
proto.searchFeatures = function () {
  var _this3 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$search_endpo = options.search_endpoint,
      search_endpoint = _options$search_endpo === undefined ? this.config.search_endpoint : _options$search_endpo;


  return new Promise(function () {
    var _ref7 = _asyncToGenerator(function* (resolve, reject) {
      switch (search_endpoint) {

        case 'ows':
          _this3.search(options, params).then(function (results) {
            resolve({ data: results });
          }).fail(reject);
          break;

        case 'api':
          try {
            resolve((yield _this3.getFilterData({
              queryUrl: options.queryUrl,
              field: options.filter,
              ordering: options.ordering,
              unique: options.unique,
              raw: undefined !== options.raw ? options.raw : false,
              suggest: options.suggest,
              /** @since 3.9.0 */
              formatter: undefined !== options.formatter ? options.formatter : 1
            })));
          } catch (err) {
            reject(err);
          }
          break;
      }
    });

    return function (_x13, _x14) {
      return _ref7.apply(this, arguments);
    };
  }());
};

/**
 * Get feature data based on `field` and `suggests`
 * 
 * @param { Object }    opts
 * @param { boolean }   opts.raw
 * @param { Object }    opts.suggest   - (mandatory): object with key is a field of layer and value is value of the field to filter
 * @param { 0 | 1 }     opts.formatter
 * @param { Array }     opts.field     - Array of object with type of suggest (see above)
 * @param opts.unique
 * @param opts.fformatter
 * @param opts.ffield
 * @param opts.queryUrl
 * @param opts.ordering

 */
proto.getFilterData = _asyncToGenerator(function* () {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref9$raw = _ref9.raw,
      raw = _ref9$raw === undefined ? false : _ref9$raw,
      suggest = _ref9.suggest,
      field = _ref9.field,
      unique = _ref9.unique,
      fformatter = _ref9.fformatter,
      ffield = _ref9.ffield,
      _ref9$formatter = _ref9.formatter,
      formatter = _ref9$formatter === undefined ? 1 : _ref9$formatter,
      queryUrl = _ref9.queryUrl,
      ordering = _ref9.ordering;

  return yield this.getProvider('data').getFilterData({
    queryUrl: queryUrl,
    field: field,
    raw: raw,
    ordering: ordering,
    suggest: suggest,
    formatter: formatter,
    unique: unique,
    fformatter: fformatter,
    ffield: ffield
  });
});

/**
 * search method 
 */
proto.search = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // check option feature_count
  options.feature_count = options.feature_count || 10;
  options = _extends({}, options, this.config.searchParams, params);
  var d = $.Deferred();
  var provider = this.getProvider('search');
  if (provider) {
    provider.query(options).done(function (response) {
      return d.resolve(response);
    }).fail(function (err) {
      return d.reject(err);
    });
  } else {
    d.reject(t('sdk.search.layer_not_searchable'));
  }
  return d.promise();
};

/**
 * Info from layer (only for querable layers) 
 */
proto.query = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  var provider = this.getProvider(options.filter ? 'filter' : 'query');
  if (provider) {
    provider.query(options).done(function (response) {
      return d.resolve(response);
    }).fail(function (err) {
      return d.reject(err);
    });
  } else {
    d.reject(t('sdk.search.layer_not_querable'));
  }
  return d.promise();
};

/**
 * General way to get an attribute 
 */
proto.get = function (property) {
  return this.config[property] ? this.config[property] : this.state[property];
};

/**
 * @returns { * | {} } layer fields
 */
proto.getFields = function () {
  return this.config.fields;
};

/**
 * Get field by name
 * 
 * @param fieldName
 *
 * @returns {*}
 */
proto.getFieldByName = function (fieldName) {
  return this.getFields().find(function (field) {
    return field.name === fieldName;
  });
};

/**
 * @returns { Array } editing fields
 */
proto.getEditingFields = function () {
  return this.config.editing.fields;
};

/**
 * @returns { Array } only show fields
 */
proto.getTableFields = function () {
  return (this.config.fields || []).filter(function (field) {
    return field.show;
  });
};

/**
 * @returns { Array } table fields exclude geometry field
 */
proto.getTableHeaders = function () {
  return this.getTableFields().filter(function (field) {
    return -1 === _constant.GEOMETRY_FIELDS.indexOf(field.name);
  });
};

/**
 * @returns {*} current project
 */
proto.getProject = function () {
  return this.config.project;
};

/**
 * @returns { Object } layer config
 */
proto.getConfig = function () {
  return this.config;
};

/**
 * @param fields
 *
 * @returns { Array } form structure to show on form editing
 */
proto.getLayerEditingFormStructure = function (fields) {
  return this.config.editor_form_structure;
};

/**
 * @TODO Add description
 *
 * @returns {*|*[]}
 */
proto.getFieldsOutOfFormStructure = function () {
  return this.config.editor_form_structure ? this.config.editor_form_structure.filter(function (structure) {
    return structure.field_name;
  }) : [];
};

/**
 * @returns { boolean } whether it has form structure
 */
proto.hasFormStructure = function () {
  return !!this.config.editor_form_structure;
};

/**
 * @returns custom style (for future implementation)
 */
proto.getCustomStyle = function () {
  return this.config.customstyle;
};

/**
 * Get state layer
 *
 * @returns {*|{metadata, downloadable: *, attributetable: {pageLength: null}, defaultstyle: *, source, title: *, infoformats: ((function(): *)|*|*[]), tochighlightable: boolean, featurecount: number, stylesfeaturecount: (number|string|*|{[p: number]: *}), projectLayer: boolean, infoformat: (string|default.watch.infoformat|*), geolayer: boolean, inediting: boolean, disabled: boolean, id: (*|string), selected: boolean, openattributetable: (boolean|boolean), metadata_querable: (boolean|boolean), visible: boolean, filters: *[], filter: {current: null, active: boolean}, selection: {active: boolean}, removable: (boolean|*), styles}}
 */
proto.getState = function () {
  return this.state;
};

/**
 * @returns {*} layer source (ex. ogr, spatialite, etc..)
 */
proto.getSource = function () {
  return this.state.source;
};

/**
 * @returns {*} editing version of layer
 */
proto.getEditingLayer = function () {
  return this._editingLayer;
};

/**
 * Set editing layer
 *
 * @param editingLayer
 */
proto.setEditingLayer = function (editingLayer) {
  this._editingLayer = editingLayer;
};

/**
 * @returns {string|string[]|boolean|string|*} whether is hidden
 */
proto.isHidden = function () {
  return this.state.hidden;
};

/**
 * Set hidden
 *
 * @param bool
 */
proto.setHidden = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.state.hidden = bool;
};

/**
 * @returns {boolean} whether it was modified (by editing)
 */
proto.isModified = function () {
  return this.state.modified;
};

/**
 * @returns {*|string} id
 */
proto.getId = function () {
  return this.config.id;
};

/**
 * @returns {*} metadata
 */
proto.getMetadata = function () {
  return this.state.metadata;
};

/**
 * @returns {*} title
 */
proto.getTitle = function () {
  return this.config.title;
};

/**
 * @returns {*} name
 */
proto.getName = function () {
  return this.config.name;
};

/**
 * @returns {*} origin name
 */
proto.getOrigName = function () {
  return this.config.origname;
};

/**
 * Get Server type
 *
 * @returns {*|string|{wmst: {filter: Providers.WFSDataProvider, search: null, data: null, query: Providers.WMSDataProvider}, virtual: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}, oracle: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}, delimitedtext: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}, wfs: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider}, wcs: {filter: Providers.WFSDataProvider, search: null, data: null, query: Providers.WMSDataProvider}, arcgismapserver: {filter: null, search: null, data: null, query: Providers.WMSDataProvider}, mdal: {filter: null, search: null, data: null, query: Providers.WMSDataProvider}, vectortile: {filter: null, search: null, data: null, query: Providers.WMSDataProvider}, "vector-tile": {filter: null, search: null, data: null, query: Providers.WMSDataProvider}, gdal: {filter: null, search: null, data: null, query: Providers.WMSDataProvider}, ogr: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}, wms: {filter: Providers.WFSDataProvider, search: null, data: null, query: Providers.WMSDataProvider}, postgres: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}, mssql: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}, spatialite: {filter: Providers.WFSDataProvider, search: Providers.QGISProvider, data: Providers.QGISProvider, query: Providers.WMSDataProvider, filtertoken: Providers.QGISProvider}}}
 */
proto.getServerType = function () {
  return this.config.servertype && this.config.servertype !== '' ? this.config.servertype : ServerTypes.QGIS;
};

/**
 * @returns {*} type
 */
proto.getType = function () {
  return this.type;
};

/**
 * Set Type
 *
 * @param type
 */
proto.setType = function (type) {
  this.type = type;
};

/**
 * Check if layer is a type passed
 *
 * @param type
 *
 * @returns {boolean}
 */
proto.isType = function (type) {
  return this.getType() === type;
};

/**
 * Set disabled
 *
 * @param bool
 */
proto.setDisabled = function (bool) {
  this.state.disabled = bool;
};

/**
 * @returns {boolean} whether it is disabled
 */
proto.isDisabled = function () {
  return this.state.disabled;
};

/**
 * @returns {boolean} whether is visible
 */
proto.isVisible = function () {
  return this.state.visible;
};

/**
 * Set visibility
 *
 * @param bool
 */
proto.setVisible = function (bool) {
  this.state.visible = bool;
};

/**
 * @param { Object } param
 * @param param.map check if request from map point of view or just a capabilities info layer
 */
proto.isQueryable = function () {
  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { onMap: false },
      onMap = _ref10.onMap;

  var queryEnabled = false;
  var queryableForCababilities = !!(this.config.capabilities && this.config.capabilities & Layer.CAPABILITIES.QUERYABLE);
  if (!onMap) return queryableForCababilities;
  // if querable check if is visible or disabled
  if (queryableForCababilities) {
    queryEnabled = this.isVisible() && !this.isDisabled();
    if (this.config.infowhennotvisible !== undefined && this.config.infowhennotvisible === true) queryEnabled = true;
  }
  return queryEnabled;
};

/**
 * @TODO Add description
 *
 * @returns {string|string|*}
 */
proto.getOws = function () {
  return this.config.ows;
};

/**
 * @TODO Description
 *
 * @returns {boolean}
 */
proto.getTocHighlightable = function () {
  return this.state.tochighlightable;
};

/**
 * @TODO Description
 *
 * @param bool
 */
proto.setTocHighlightable = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.tochighlightable = bool;
};

/**
 * @param conditions plain object with configuration layer attribute and value
 */
proto.isFilterable = function () {
  var _this4 = this;

  var conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var isFiltrable = !!(this.config.capabilities && this.config.capabilities & Layer.CAPABILITIES.FILTERABLE);
  if (isFiltrable && conditions) {
    var conditionalFiltrable = Object.keys(conditions).reduce(function (bool, attribute) {
      var layer_config_value = _this4.get(attribute);
      var condition_attribute_values = conditions[attribute];
      return bool && Array.isArray(layer_config_value) ? layer_config_value.indexOf(condition_attribute_values) !== -1 : condition_attribute_values === layer_config_value;
    }, true);
    isFiltrable = isFiltrable && conditionalFiltrable;
  }
  return isFiltrable;
};

/**
 * @returns { boolean } whether layer is set up as time series
 */
proto.isQtimeseries = function () {
  return this.config.qtimeseries;
};

/**
 * @returns { boolean } whether is editable
 */
proto.isEditable = function () {
  return !!(this.config.capabilities && this.config.capabilities & Layer.CAPABILITIES.EDITABLE);
};

/**
 * @returns {*|boolean} whether is a base layer
 */
proto.isBaseLayer = function () {
  return this.config.baselayer;
};

/**
 * @param type get url by type (data, shp, csv, xls, editing, ...)
 */
proto.getUrl = function (type) {
  return this.config.urls[type];
};

/**
 * Set config url
 * 
 * @param { Object } url
 * @param url.type
 * @param url.url
 */
proto.setUrl = function () {
  var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref11.type,
      url = _ref11.url;

  this.config.urls[type] = url;
};

/**
 * @returns config.urls
 */
proto.getUrls = function () {
  return this.config.urls;
};

/**
 * Set editing url
 */
proto.setEditingUrl = function (url) {
  this.config.urls.editing = url || this.config.urls.editing;
};

/**
 * @returns {*} query url
 */
proto.getQueryUrl = function () {
  return this.config.urls.query;
};

/**
 * Set query url
 *
 * @param queryUrl
 */
proto.setQueryUrl = function (queryUrl) {
  this.config.urls.query = queryUrl;
};

/**
 * @returns {*}
 */
proto.getQueryLayerName = function () {
  return this.config.infolayer && this.config.infolayer !== '' ? this.config.infolayer : this.getName();
};

/**
 * @TODO Description
 *
 * @returns {*}
 */
proto.getQueryLayerOrigName = function () {
  return this.state.infolayer && this.config.infolayer !== '' ? this.config.infolayer : this.config.origname;
};

/**
 * @TODO Description
 *
 * @param ogcService
 *
 * @returns { default.watch.infoformat | * | string }
 */
proto.getInfoFormat = function (ogcService) {
  // In case of NETCDF (qtime series)
  if (this.config.qtimeseries === true || this.getSourceType() === 'gdal') {
    return 'application/json';
  }
  if (this.config.infoformat && '' !== this.config.infoformat && 'wfs' !== ogcService) {
    return this.config.infoformat;
  }
  return 'application/vnd.ogc.gml';
};

/**
 * @TODO Description
 *
 * @returns {(function(): *)|*|*[]}
 */
proto.getInfoFormats = function () {
  return this.state.infoformats;
};

/**
 * @TODO Description
 *
 * @returns {*}
 */
proto.getInfoUrl = function () {
  return this.config.infourl;
};

/**
 * @TODO Description
 *
 * @param infoFormat
 */
proto.setInfoFormat = function (infoFormat) {
  this.config.infoformat = infoFormat;
};

/**
 * @TODO Description
 *
 * @returns {*|{}}
 */
proto.getAttributes = function () {
  return this.config.fields;
};

/**
 * @TODO Description
 *
 * @param attribute
 * @param type
 * @param options
 */
proto.changeAttribute = function (attribute, type, options) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = this.config.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      if (field.name === attribute) {
        field.type = type;
        field.options = options;
        break;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

/**
 * @TODO Description
 *
 * @param name
 *
 * @returns {*}
 */
proto.getAttributeLabel = function (name) {
  var field = this.getAttributes().find(function (field) {
    return field.name === name;
  });
  return field && field.label;
};

/**
 * Return provider by type
 *
 * @param type
 *
 * @returns {*}
 */
proto.getProvider = function (type) {
  return this.providers[type];
};

/**
 * Return all providers
 *
 * @returns {*|{filter: null, search: null, data: null, query: null, filtertoken: null}}
 */
proto.getProviders = function () {
  return this.providers;
};

/**
 * @TODO Description
 *
 * @returns {*}
 */
proto.getLayersStore = function () {
  return this._layersstore;
};

/**
 * @TODO Description
 *
 * @param layerstore
 */
proto.setLayersStore = function (layerstore) {
  this._layersstore = layerstore;
};

/**
 * Return if it is possible to show table of attribute
 *
 * @returns {boolean}
 */
proto.canShowTable = function () {
  if (this.config.not_show_attributes_table) {
    return false;
  }

  if (this.getServerType() === Layer.ServerTypes.QGIS && [Layer.SourceTypes.POSTGIS, Layer.SourceTypes.ORACLE, Layer.SourceTypes.WFS, Layer.SourceTypes.OGR, Layer.SourceTypes.MSSQL, Layer.SourceTypes.SPATIALITE].indexOf(this.config.source.type) > -1 && this.isQueryable()) {
    return this.getTableFields().length > 0;
  }

  if (this.getServerType() === Layer.ServerTypes.G3WSUITE && "geojson" === this.get('source').type) {
    return true;
  }

  if (this.getServerType() !== Layer.ServerTypes.G3WSUITE && this.isFilterable()) {
    return true;
  }

  return false;
};

/**
 * @TODO Description
 *
 * @param { Object } field
 * @param field.name
 * @param field.type
 * @param field.options
 * @param field.reset
 *
 * @returns {*}
 */
proto.changeFieldType = function () {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      name = _ref12.name,
      type = _ref12.type,
      _ref12$options = _ref12.options,
      options = _ref12$options === undefined ? {} : _ref12$options,
      _ref12$reset = _ref12.reset,
      reset = _ref12$reset === undefined ? false : _ref12$reset;

  var field = this.getFields().find(function (field) {
    return field.name === name;
  });

  if (field && reset) {
    field.type = field._type;
    delete field._type;
    delete field[type + 'options'];
    return field.type;
  }

  if (field && !reset) {
    field._type = field.type;
    field.type = type;
    field[type + 'options'] = options;
    return field._type;
  }
};

/**
 * @TODO Description
 *
 * @param { Object } config
 * @param config.name
 * @param config.type
 * @param config.options
 * @param config.reset
 *
 * @returns {*}
 */
proto.changeConfigFieldType = function (_ref13) {
  var name = _ref13.name,
      type = _ref13.type,
      _ref13$options = _ref13.options,
      options = _ref13$options === undefined ? {} : _ref13$options,
      _ref13$reset = _ref13.reset,
      reset = _ref13$reset === undefined ? false : _ref13$reset;

  return this.changeFieldType({ name: name, type: type, options: options, reset: reset });
};

/**
 * @TODO Description
 *
 * @param name
 */
proto.resetConfigField = function (_ref14) {
  var name = _ref14.name;

  this.changeConfigFieldType({ name: name, reset: true });
};

/**
 * Function called in case of change project to remove all stored information 
 */
proto.clear = function () {};

/**
 * @returns {boolean} whether is a vector layer
 */
proto.isVector = function () {
  return this.getType() === Layer.LayerTypes.VECTOR;
};

/**
 * @returns {boolean} whether is a table layer
 */
proto.isTable = function () {
  return this.getType() === Layer.LayerTypes.TABLE;
};

/**
 * @since 3.8.0
 */
proto.getFeatureCount = function () {
  return this.state.featurecount;
};

/**
 * @param style
 * 
 * @returns { Promise<Object | void>}
 * 
 * @since 3.8.0
 */
proto.getStyleFeatureCount = function () {
  var _ref15 = _asyncToGenerator(function* (style) {
    // skip when layer hasn't feature count option set on QGIS project
    if (undefined === this.state.stylesfeaturecount) {
      return;
    }
    if (undefined === this.state.stylesfeaturecount[style]) {
      try {
        var _ref16 = yield XHR.post({
          url: '' + this.config.urls.featurecount + this.getId() + '/',
          data: JSON.stringify({ style: style }),
          contentType: 'application/json'
        }),
            result = _ref16.result,
            data = _ref16.data;

        this.state.stylesfeaturecount[style] = true === result ? data : {};
      } catch (err) {
        this.state.stylesfeaturecount[style] = {};
      }
    }
    return this.state.stylesfeaturecount[style];
  });

  return function (_x25) {
    return _ref15.apply(this, arguments);
  };
}();

/**
 * @returns { string } layer format (eg. 'image/png') 
 * 
 * @since 3.9.1
 */
proto.getFormat = function () {
  return this.config.format || _projects2.default.getCurrentProject().getWmsGetmapFormat() || 'image/png';
};

/**
 * [LAYER SELECTION]
 *
 * Base on boolean value create a filter token from server
 * based on selection or delete current filtertoken
 *
 * @param bool
 *
 * @returns {Promise<void>}
 *
 * @deprecated since 3.9.0. Will be removed in 4.x. Use Layer::createFilterToken() and deleteFilterToken(fid) instead
 */
proto.activeFilterToken = deprecate(function () {
  var _ref17 = _asyncToGenerator(function* (bool) {
    yield this[bool ? 'createFilterToken' : 'deleteFilterToken']();
  });

  return function (_x26) {
    return _ref17.apply(this, arguments);
  };
}(), '[G3W-CLIENT] Layer::activeFilterToken(bool) is deprecated');

/**
 * @deprecated since 3.9.0. Will be removed in 4.x. Use Layer::getLayerEditingFormStructure() instead
 */
proto.getEditorFormStructure = deprecate(proto.getLayerEditingFormStructure, '[G3W-CLIENT] Layer::getEditorFormStructure() is deprecated');

/// LAYER PROPERTIES

/**
 * Layer Types
 */
Layer.LayerTypes = {
  TABLE: "table",
  IMAGE: "image",
  VECTOR: "vector"
};

/**
 * Server Types
 */
Layer.ServerTypes = {
  OGC: "OGC",
  QGIS: "QGIS",
  Mapserver: "Mapserver",
  Geoserver: "Geoserver",
  ARCGISMAPSERVER: "ARCGISMAPSERVER",
  OSM: "OSM",
  BING: "Bing",
  LOCAL: "Local",
  TMS: "TMS",
  WMS: "WMS",
  WMTS: "WMTS",
  G3WSUITE: "G3WSUITE"
  /** 
   * ADD ALSO TO PROVIDER FACTORY (@TODO or already done?) 
   */
};

/**
 * Source Types
 */
Layer.SourceTypes = {
  VIRTUAL: 'virtual',
  POSTGIS: 'postgres',
  SPATIALITE: 'spatialite',
  ORACLE: 'oracle',
  MSSQL: 'mssql',
  CSV: 'delimitedtext',
  OGR: 'ogr',
  GDAL: 'gdal',
  WMS: 'wms',
  WMST: "wmst",
  WFS: 'wfs',
  WCS: "wcs",
  MDAL: "mdal",
  "VECTOR-TILE": "vector-tile",
  VECTORTILE: "vectortile",
  ARCGISMAPSERVER: 'arcgismapserver',
  GEOJSON: "geojson",
  /** @since 3.9.0 */
  POSTGRESRASTER: 'postgresraster'
  /**
   * ADD TO PROVIDER FACTORY (@TODO or already done?)
   */
};

/**
 * Layer Capabilities
 */
Layer.CAPABILITIES = {
  QUERYABLE: 1,
  FILTERABLE: 2,
  EDITABLE: 4
};

/**
 * Editing types 
 */
Layer.EDITOPS = {
  INSERT: 1,
  UPDATE: 2,
  DELETE: 4
};

/**
 * BACKOMP v3.x
 */
Layer.SELECTION_STATE = _selection.SELECTION;

module.exports = Layer;

},{"app/constant":5,"core/g3wobject":8,"core/i18n/i18n.service":9,"core/layers/mixins/download":29,"core/layers/mixins/relations":31,"core/layers/mixins/selection":32,"core/layers/providersfactory":33,"services/data":317,"store/application-state":328,"store/projects":335,"util-deprecate":"util-deprecate","utils":419,"utils/parseAttributes":437}],19:[function(require,module,exports){
var _BASE_LAYERS;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Layer = require('core/layers/layer');
var TableLayer = require('core/layers/tablelayer');
var VectorLayer = require('core/layers/vectorlayer');
var ImageLayer = require('core/layers/imagelayer');
var BaseLayer = require('core/layers/baselayer');
var BASE = require('g3w-ol/layers/bases');
var GeojsonLayer = require('core/layers/geojson');

var WITH_GEOMETRY = [Layer.SourceTypes.VIRTUAL, Layer.SourceTypes.POSTGIS, Layer.SourceTypes.MSSQL, Layer.SourceTypes.SPATIALITE, Layer.SourceTypes.WFS, Layer.SourceTypes.CSV, Layer.SourceTypes.ORACLE, Layer.SourceTypes.OGR, Layer.SourceTypes.MDAL];

var NO_GEOMETRY = [Layer.SourceTypes.WMST, Layer.SourceTypes.WCS, Layer.SourceTypes.WMS, Layer.SourceTypes.GDAL, Layer.SourceTypes.VECTORTILE, Layer.SourceTypes["VECTOR-TILE"], Layer.SourceTypes.MDAL,
/** @since 3.8.7 */
Layer.SourceTypes.ARCGISMAPSERVER,
/** @since 3.9.0 */
Layer.SourceTypes.POSTGRESRASTER];

var BASE_LAYERS = (_BASE_LAYERS = {}, _defineProperty(_BASE_LAYERS, Layer.ServerTypes.OSM, function (_BaseLayer) {
  _inherits(OSMLayer, _BaseLayer);

  function OSMLayer() {
    _classCallCheck(this, OSMLayer);

    return _possibleConstructorReturn(this, (OSMLayer.__proto__ || Object.getPrototypeOf(OSMLayer)).apply(this, arguments));
  }

  _createClass(OSMLayer, [{
    key: '_makeOlLayer',
    value: function _makeOlLayer() {
      return BASE.OSM.get({
        id: this.config.name,
        title: this.config.title,
        url: this.config.url
      });
    }
  }]);

  return OSMLayer;
}(BaseLayer)), _defineProperty(_BASE_LAYERS, Layer.ServerTypes.BING, function (_BaseLayer2) {
  _inherits(BingLayer, _BaseLayer2);

  function BingLayer() {
    _classCallCheck(this, BingLayer);

    return _possibleConstructorReturn(this, (BingLayer.__proto__ || Object.getPrototypeOf(BingLayer)).apply(this, arguments));
  }

  _createClass(BingLayer, [{
    key: '_makeOlLayer',
    value: function _makeOlLayer() {
      var key = _applicationState2.default.keys.vendorkeys.bing;
      switch (this.config.source ? this.config.source.subtype : null) {
        case 'streets':
          return BASE.BING.get({ key: key, imagerySet: 'Road' });
        case 'aerial':
          return BASE.BING.get({ key: key, imagerySet: 'Aerial' });
        case 'aerialwithlabels':
          return BASE.BING.get({ key: key, imagerySet: 'AerialWithLabels' });
        default:
          return BASE.BING.get({ key: key, imagerySet: 'Aerial' });
      }
    }
  }]);

  return BingLayer;
}(BaseLayer)), _defineProperty(_BASE_LAYERS, Layer.ServerTypes.TMS, function (_BaseLayer3) {
  _inherits(TMSLayer, _BaseLayer3);

  function TMSLayer() {
    _classCallCheck(this, TMSLayer);

    return _possibleConstructorReturn(this, (TMSLayer.__proto__ || Object.getPrototypeOf(TMSLayer)).apply(this, arguments));
  }

  _createClass(TMSLayer, [{
    key: '_makeOlLayer',
    value: function _makeOlLayer() {
      // configuration to create TMS
      var _config = this.config,
          url = _config.url,
          attributions = _config.attributions,
          minZoom = _config.minZoom,
          maxZoom = _config.maxZoom,
          crs = _config.crs;

      return BASE.TMS.get({
        url: url,
        minZoom: minZoom,
        maxZoom: maxZoom,
        attributions: attributions,
        projection: this.getProjectionFromCrs(crs)
      });
    }
  }]);

  return TMSLayer;
}(BaseLayer)), _defineProperty(_BASE_LAYERS, Layer.ServerTypes.ARCGISMAPSERVER, function (_BaseLayer4) {
  _inherits(ARCGISMAPSERVERLayer, _BaseLayer4);

  function ARCGISMAPSERVERLayer() {
    _classCallCheck(this, ARCGISMAPSERVERLayer);

    return _possibleConstructorReturn(this, (ARCGISMAPSERVERLayer.__proto__ || Object.getPrototypeOf(ARCGISMAPSERVERLayer)).apply(this, arguments));
  }

  _createClass(ARCGISMAPSERVERLayer, [{
    key: '_makeOlLayer',
    value: function _makeOlLayer() {
      // configuration to create TMS
      var _config2 = this.config,
          url = _config2.url,
          attributions = _config2.attributions,
          crs = _config2.crs;

      return BASE.TMS.get({
        url: url,
        source_type: 'arcgismapserver',
        projection: this.getProjectionFromCrs(crs),
        attributions: attributions
      });
    }
  }]);

  return ARCGISMAPSERVERLayer;
}(BaseLayer)), _defineProperty(_BASE_LAYERS, Layer.ServerTypes.WMTS, function (_BaseLayer5) {
  _inherits(WMTSLayer, _BaseLayer5);

  function WMTSLayer() {
    _classCallCheck(this, WMTSLayer);

    return _possibleConstructorReturn(this, (WMTSLayer.__proto__ || Object.getPrototypeOf(WMTSLayer)).apply(this, arguments));
  }

  _createClass(WMTSLayer, [{
    key: '_makeOlLayer',
    value: function _makeOlLayer() {
      // use this config to get params
      var _config3 = this.config,
          url = _config3.url,
          layer = _config3.layer,
          attributions = _config3.attributions,
          matrixSet = _config3.matrixSet,
          format = _config3.format,
          style = _config3.style,
          requestEncoding = _config3.requestEncoding,
          crs = _config3.crs;

      return BASE.WMTS.get({
        url: url,
        layer: layer,
        attributions: attributions,
        format: format,
        projection: this.getProjectionFromCrs(crs),
        requestEncoding: requestEncoding,
        matrixSet: matrixSet,
        style: style
      });
    }
  }]);

  return WMTSLayer;
}(BaseLayer)), _defineProperty(_BASE_LAYERS, Layer.ServerTypes.WMS, function (_BaseLayer6) {
  _inherits(WMSLayer, _BaseLayer6);

  function WMSLayer() {
    _classCallCheck(this, WMSLayer);

    return _possibleConstructorReturn(this, (WMSLayer.__proto__ || Object.getPrototypeOf(WMSLayer)).apply(this, arguments));
  }

  _createClass(WMSLayer, [{
    key: '_makeOlLayer',
    value: function _makeOlLayer() {
      // use this config to get params
      var _config4 = this.config,
          url = _config4.url,
          layers = _config4.layers,
          singleTile = _config4.singleTile,
          attributions = _config4.attributions,
          crs = _config4.crs,
          opacity = _config4.opacity;

      return BASE.WMS.get({
        url: url,
        layers: layers,
        singleTile: singleTile,
        attributions: attributions,
        projection: this.getProjectionFromCrs(crs),
        opacity: opacity
      });
    }
  }]);

  return WMSLayer;
}(BaseLayer)), _BASE_LAYERS);

// Class to build layer based on configuration

var LayerFactory = function () {
  function LayerFactory() {
    _classCallCheck(this, LayerFactory);
  }

  _createClass(LayerFactory, [{
    key: 'build',


    /**
     * @returns layer instance
     */
    value: function build(config, options) {
      var layerClass = this.get(config);
      return layerClass ? new layerClass(config, options) : null;
    }

    /**
     * @returns layer class
     */

  }, {
    key: 'get',
    value: function get() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


      if (!config.servertype) {
        console.warn('Undefined layer server type');
        return;
      }

      // Get Source
      var source = config.source || {};

      // Check Server Type
      var is_qgis = Layer.ServerTypes.QGIS === config.servertype;
      var is_ogc = Layer.ServerTypes.OGC === config.servertype;
      var is_g3w = Layer.ServerTypes.G3WSUITE === config.servertype;
      var is_local = Layer.ServerTypes.LOCAL === config.servertype;

      var is_wms = is_ogc && Layer.SourceTypes.WMS === source.type;
      var is_wfs = is_ogc && Layer.SourceTypes.WFS === source.type;
      var is_geojson = is_g3w && Layer.SourceTypes.GEOJSON === source.type;
      var is_pgraster = is_qgis && Layer.SourceTypes.POSTGRESRASTER === source.type;

      // Check Geometry Type
      var is_tabular = config.geometrytype === 'NoGeometry';
      var has_geom = config.geometrytype && WITH_GEOMETRY.includes(source.type);
      var no_geom = !config.geometrytype && NO_GEOMETRY.includes(source.type);

      // Check Layer Type
      var is_base_layer = config.servertype in BASE_LAYERS;
      var is_table_layer = is_qgis && has_geom && is_tabular;
      var is_image_layer = is_wms || is_qgis && (no_geom || has_geom && !is_tabular || is_pgraster);
      var is_vector_layer = is_local || is_wfs || is_g3w && !is_geojson;
      var is_geojson_layer = is_geojson;

      // Return Layer Class
      if (is_table_layer) return TableLayer;
      if (is_image_layer) return ImageLayer;
      if (is_vector_layer) return VectorLayer;
      if (is_base_layer) return BASE_LAYERS[config.servertype];
      if (is_geojson_layer) return GeojsonLayer;

      console.warn('Uknown layer server type', config);

      // return BaseLayers[config.source.type.toUpperCase()];
      // return ImageLayer;
    }
  }]);

  return LayerFactory;
}();

module.exports = new LayerFactory();

},{"core/layers/baselayer":10,"core/layers/geojson":16,"core/layers/imagelayer":17,"core/layers/layer":18,"core/layers/tablelayer":34,"core/layers/vectorlayer":38,"g3w-ol/layers/bases":70,"store/application-state":328}],20:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    uniqueId = _require.uniqueId;

var G3WObject = require('core/g3wobject');

// Interface for Layers
function LayersStore() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = {
    id: config.id || Date.now(),
    projection: config.projection,
    extent: config.extent,
    initextent: config.initextent,
    wmsUrl: config.wmsUrl,
    //set catalogable property
    catalog: _.isBoolean(config.catalog) ? config.catalog : true
  };
  this.state = {
    //useful to build layerstree
    layerstree: [],
    relations: null // useful to build tree of relations
  };
  this._isQueryable = _.isBoolean(config.queryable) ? config.queryable : true;
  this._layers = this.config.layers || {};
  this.setters = {
    setLayerSelection: function setLayerSelection(_ref) {
      var layerId = _ref.layerId,
          selection = _ref.selection;

      var layer = this.getLayerById(layerId);
    },
    setLayerSelected: function setLayerSelected(layerId, selected) {
      this.getLayers().forEach(function (layer) {
        return layer.state.selected = layerId === layer.getId() ? selected : false;
      });
    },
    addLayers: function addLayers(layers) {
      var _this = this;

      layers.forEach(function (layer) {
        return _this.addLayer(layer);
      });
    },
    addLayer: function addLayer(layer) {
      this._addLayer(layer);
    },
    removeLayer: function removeLayer(layerId) {
      this._removeLayer(layerId);
    }
  };

  base(this);
}

inherit(LayersStore, G3WObject);

var proto = LayersStore.prototype;

proto.isQueryable = function () {
  return this._isQueryable;
};

proto.setQueryable = function (bool) {
  this._isQueryable = !!bool;
};

proto.showOnCatalog = function () {
  return this.config.catalog;
};

proto.setOptions = function (config) {
  this.config = config;
};

proto.getId = function () {
  return this.config.id;
};

proto._addLayer = function (layer) {
  this._layers[layer.getId()] = layer;
};

proto._removeLayer = function (layer) {
  var layerId = layer.getId();
  delete this._layers[layerId];
};

proto.removeLayers = function () {
  var _this2 = this;

  Object.entries(this._layers).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        layerId = _ref3[0],
        layer = _ref3[1];

    _this2.removeLayer(layer);
  });
};

proto.getLayersDict = function () {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  // skip when no filter is provided (eg. `filter = null`)
  if (!filter || [filter.PRINTABLE, filter.QUERYABLE, filter.FILTERABLE, filter.EDITABLE, filter.VISIBLE, filter.SELECTED, filter.CACHED, filter.SELECTED_OR_ALL, filter.SERVERTYPE, filter.BASELAYER, filter.GEOLAYER, filter.VECTORLAYER, filter.HIDDEN, filter.DISABLED, filter.IDS].every(function (f) {
    return undefined === f;
  })) {
    return this._layers;
  }

  var layers = Object.values(this._layers);

  if (filter.IDS) {
    var ids = [].concat(filter.IDS);
    layers = layers.filter(function (l) {
      return -1 !== ids.indexOf(l.getId());
    });
  }

  // check if there are `selected` layers otherwise get all `layers`
  if (filter.SELECTED_OR_ALL) {
    var selected = layers.filter(function (l) {
      return l.isSelected();
    });
    layers = selected.length > 0 ? selected : layers;
  }

  // checks if a boolean filter is setted
  var has = function has(f) {
    return 'boolean' === typeof f;
  };

  if (has(filter.SELECTED) && !filter.SELECTED_OR_ALL) layers = layers.filter(function (l) {
    return filter.SELECTED === l.isSelected();
  });
  if (has(filter.QUERYABLE)) layers = layers.filter(function (l) {
    return filter.QUERYABLE === l.isQueryable();
  });
  if (has(filter.FILTERABLE)) layers = layers.filter(function (l) {
    return filter.FILTERABLE === l.isFilterable(options.filtrable || null);
  });
  if (has(filter.EDITABLE)) layers = layers.filter(function (l) {
    return filter.EDITABLE === l.isEditable();
  });
  if (has(filter.VISIBLE)) layers = layers.filter(function (l) {
    return filter.VISIBLE === l.isVisible();
  });
  if (has(filter.CACHED)) layers = layers.filter(function (l) {
    return filter.CACHED === l.isCached();
  });
  if (has(filter.BASELAYER)) layers = layers.filter(function (l) {
    return filter.BASELAYER === l.isBaseLayer();
  });
  if (has(filter.GEOLAYER)) layers = layers.filter(function (l) {
    return filter.GEOLAYER === l.state.geolayer;
  });
  if (has(filter.VECTORLAYER)) layers = layers.filter(function (l) {
    return filter.VECTORLAYER === l.isType('vector');
  });
  if (has(filter.HIDDEN)) layers = layers.filter(function (l) {
    return filter.HIDDEN == l.isHidden();
  });
  if (has(filter.DISABLED)) layers = layers.filter(function (l) {
    return filter.DISABLED === l.isDisabled();
  });
  if ('string' === typeof filter.SERVERTYPE && filter.SERVERTYPE.length) layers = layers.filter(function (l) {
    return filter.SERVERTYPE === l.getServerType();
  });
  if (filter.PRINTABLE) layers = layers.filter(function (l) {
    return l.state.geolayer && l.isPrintable({ scale: filter.PRINTABLE.scale });
  });

  return layers;
};

// return layers array
proto.getLayers = function () {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return Object.values(this.getLayersDict(filter, options));
};

proto.getBaseLayers = function () {
  return this.getLayersDict({
    BASELAYER: true
  });
};

proto.getLayerById = function (layerId) {
  return this.getLayersDict()[layerId];
};

proto.getLayerByName = function (name) {
  return this._layers.find(function (layer) {
    return layer.getName() === name;
  });
};

proto.getLayerAttributes = function (layerId) {
  return this.getLayerById(layerId).getAttributes();
};

proto.getLayerAttributeLabel = function (layerId, name) {
  return this.getLayerById(layerId).getAttributeLabel(name);
};

proto.getGeoLayers = function () {
  return this.getLayers({
    GEOLAYER: true
  });
};

proto._getAllSiblingsChildrenLayersId = function (layerstree) {
  var nodeIds = [];
  var traverse = function traverse(layerstree) {
    layerstree.nodes.forEach(function (node) {
      if (node.id) nodeIds.push(node.id);else traverse(node);
    });
  };
  traverse(layerstree);
  return nodeIds;
};

proto._getAllParentLayersId = function (layerstree, node) {
  var nodeIds = [];
  var traverse = function traverse(layerstree) {
    layerstree.nodes.forEach(function (node) {
      if (node.id) nodeIds.push(node.id);
      //else traverse(node);
    });
  };

  traverse({
    nodes: layerstree.nodes.filter(function (_node) {
      return _node !== node;
    })
  });

  return nodeIds;
};

proto.selectLayer = function (layerId, selected) {
  this.setLayerSelected(layerId, selected);
};

proto.getProjection = function () {
  return this.config.projection;
};

proto.getExtent = function () {
  return this.config.extent;
};

proto.getInitExtent = function () {
  return this.config.initextent;
};

proto.getWmsUrl = function () {
  return this.config.wmsUrl;
};

proto.removeLayersTree = function () {
  this.state.layerstree.splice(0, this.state.layerstree.length);
};

proto.getLayersTree = function () {
  return this.state.layerstree;
};

/**
 * Set layersstree of layers inside the layersstore
 *
 * @param {unknown[]} layerstree nodes
 * @param {string}    name
 * @param {boolean}   [expanded = true]
 */
proto.setLayersTree = function () {
  var layerstree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var name = arguments[1];
  var expanded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var _getInitExtent = this.getInitExtent(),
      _getInitExtent2 = _slicedToArray(_getInitExtent, 4),
      minx = _getInitExtent2[0],
      miny = _getInitExtent2[1],
      maxx = _getInitExtent2[2],
      maxy = _getInitExtent2[3];

  // Root group project that contain all layerstree of qgis project


  var rootGroup = {
    title: name || this.config.id,
    root: true,
    parentGroup: null,
    expanded: expanded,
    disabled: false,
    checked: true,
    /**
     * @since 3.8.0
     */
    bbox: { minx: minx, miny: miny, maxx: maxx, maxy: maxy },
    nodes: layerstree
  };

  if (layerstree.length) {
    this._traverseLayersTree(layerstree, rootGroup);
    this.state.layerstree.splice(0, 0, rootGroup); // at the end
  }
};

/**
 * Used by external plugins to build layerstree
 *
 * @param {string}  groupName is a ProjectName
 * @param {unknown} [options.layerstree = null ]
 * @param {boolean} [options.expanded   = false]
 * @param {boolean} [options.full       = false]
 */
proto.createLayersTree = function (groupName) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    layerstree: null,
    expanded: false,
    full: false
  };


  var layerstree = [];

  // return layerstree from server project config (when setted)
  if (options.layerstree && true === options.full) {
    return this.state.layerstree;
  }

  // compare all layer ids from server config with all layer nodes on layerstree server property
  if (options.layerstree && true !== options.full) {
    var tocLayersId = this.getLayers({ BASELAYER: false }).map(function (layer) {
      return layer.getId();
    });
    this._traverseLightLayersTree(options.layerstree, layerstree, tocLayersId);
  }

  // retrieve all project layers that have geometry
  if (!options.layerstree) {
    layerstree = this.getGeoLayers().map(function (layer) {
      return {
        id: layer.getId(),
        name: layer.getName(),
        title: layer.getTitle(),
        visible: layer.isVisible() || false
      };
    });
  }

  // setLayerstree
  this.setLayersTree(layerstree, groupName, options.expanded);
};

/**
 * @since 3.8.0
 */
proto._traverseLightLayersTree = function (nodes, layerstree, tocLayersId) {
  var _this3 = this;

  nodes.forEach(function (node) {
    var lightlayer = null;

    // case TOC has layer ID
    if (null !== node.id && "undefined" !== typeof node.id && tocLayersId.find(function (id) {
      return id === node.id;
    })) {
      lightlayer = _extends({}, lightlayer, node);
    }

    // case group
    if (null !== node.nodes && "undefined" !== typeof node.nodes) {
      lightlayer = _extends({}, lightlayer, {
        title: node.name,
        groupId: uniqueId(),
        root: false,
        nodes: [],
        checked: node.checked,
        mutually_exclusive: node["mutually-exclusive"]
      });
      _this3._traverseLightLayersTree(node.nodes, lightlayer.nodes, tocLayersId); // recursion step
    }

    // check if lightlayer is not null
    if (null !== lightlayer) {
      lightlayer.expanded = node.expanded; // expand legend item (TOC)
      layerstree.push(lightlayer);
    }
  });
};

/**
 * @since 3.8.0
 */
proto._traverseLayersTree = function (nodes, parentGroup) {
  var _this4 = this;

  nodes.forEach(function (node, index) {
    // substitute node layer with layer state
    if ("undefined" !== typeof node.id) {
      nodes[index] = _this4.getLayerById(node.id).getState();
    }
    // case of layer substitute node with layer state
    if ("undefined" !== typeof node.id) {
      nodes[index] = _this4.getLayerById(node.id).getState();
      // pass bbox and epsg of layer
      if ("undefined" !== typeof nodes[index].bbox) {
        _this4._setLayersTreeGroupBBox(parentGroup, { bbox: nodes[index].bbox, epsg: nodes[index].epsg });
      }
    }
    if (Array.isArray(node.nodes)) {
      node.nodes.forEach(function (node) {
        return node.parentGroup = parentGroup;
      });
      _this4._traverseLayersTree(node.nodes, node);
    }
    //SET PARENT GROUP
    nodes[index].parentGroup = parentGroup;
  });
};

/**
 * @since 3.8.0
 */
proto._setLayersTreeGroupBBox = function (group) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      bbox = _ref4.bbox,
      epsg = _ref4.epsg;

  var project_epsg = this.getProjection().getCode();

  // translate bbox epsg to project epsg code (when they differ)
  if (epsg !== project_epsg) {
    var _ol$proj$transformExt = ol.proj.transformExtent([bbox.minx, bbox.miny, bbox.maxx, bbox.maxy], epsg, project_epsg),
        _ol$proj$transformExt2 = _slicedToArray(_ol$proj$transformExt, 4),
        minx = _ol$proj$transformExt2[0],
        miny = _ol$proj$transformExt2[1],
        maxx = _ol$proj$transformExt2[2],
        maxy = _ol$proj$transformExt2[3];

    bbox = { minx: minx, miny: miny, maxx: maxx, maxy: maxy };
  }

  // get current bbox or compute bbox from ol extent
  if (undefined === group.bbox) {
    group.bbox = bbox;
  } else {
    group.bbox = ol.extent.extend([group.bbox.minx, group.bbox.miny, group.bbox.maxx, group.bbox.maxy], [bbox.minx, bbox.miny, bbox.maxx, bbox.maxy]).reduce(function (bbox, extentCoordinate, index) {
      switch (index) {
        case 0:
          bbox.minx = extentCoordinate;break;
        case 1:
          bbox.miny = extentCoordinate;break;
        case 2:
          bbox.maxx = extentCoordinate;break;
        case 3:
          bbox.maxy = extentCoordinate;break;
      }
      return bbox;
    }, { minxx: null, miny: null, maxx: null, maxy: null });
  }

  // Recursion
  if (group.parentGroup && false === group.parentGroup.root) {
    this._setLayersTreeGroupBBox(group.parentGroup, { bbox: group.bbox, epsg: project_epsg });
  }
};

module.exports = LayersStore;

},{"core/g3wobject":8,"utils":419}],21:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

// Registy Layers
function LayersStoresRegistry() {
  this.stores = {};
  this.storesArray = [];
  // to react some application components that are binding to Layerstore
  this.setters = {
    addLayersStore: this._addLayersStore.bind(this),
    removeLayersStore: this._removeLayersStore.bind(this),
    removeLayersStores: this._removeLayersStores.bind(this)
  };

  base(this);
}

inherit(LayersStoresRegistry, G3WObject);

var proto = LayersStoresRegistry.prototype;

proto.getLayerById = function (layerId) {
  var layer = void 0;
  for (var storeId in this.stores) {
    var layerStore = this.stores[storeId];
    layer = layerStore.getLayerById(layerId);
    if (layer) break;
  }
  return layer;
};

proto.getLayers = function (filter) {
  return Object.values(this.stores).flatMap(function (store) {
    return store.getLayers(filter);
  });
};

proto.getQuerableLayersStores = function () {
  return this.getLayersStores().filter(function (store) {
    return store.isQueryable();
  });
};

proto.getLayersStore = function (id) {
  return this.stores[id];
};

proto.getLayersStores = function () {
  var _this = this;

  return this.storesArray.map(function (storeId) {
    return _this.stores[storeId];
  });
};

proto._addLayersStore = function (layersStore, idx) {
  var storeId = layersStore.getId();
  this.stores[storeId] = layersStore;
  if (!_.isNil(idx)) this.storesArray.splice(idx, 0, storeId);else this.storesArray.push(storeId);
};

proto._removeLayersStore = function (layerStore) {
  if (layerStore) {
    var storeId = layerStore.getId();
    this.storesArray = this.storesArray.filter(function (_storeId) {
      return _storeId != storeId;
    });
    delete this.stores[storeId];
  }
};

proto._removeLayersStores = function () {
  this.storesArray = [];
  this.stores = {};
};

module.exports = LayersStoresRegistry;

},{"core/g3wobject":8,"utils":419}],22:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var WMSLAYER = require('core/layers/map/wmslayer');
var RasterLayers = require('g3w-ol/layers/rasters');

function ARCGISMAPSERVERLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  base(this, options, extraParams);
}

inherit(ARCGISMAPSERVERLayer, WMSLAYER);

var proto = ARCGISMAPSERVERLayer.prototype;

proto._makeOlLayer = function () {
  var _this = this;

  var olLayer = new RasterLayers.TiledArgisMapServer({
    url: this.config.url,
    id: this.config.id,
    projection: this.config.projection,
    format: this.config.format
  });
  olLayer.getSource().on('imageloadstart', function () {
    _this.emit('loadstart');
  });
  olLayer.getSource().on('imageloadend', function () {
    _this.emit('loadend');
  });
  olLayer.getSource().on('imageloaderror', function () {
    _this.emit('loaderror');
  });
  return olLayer;
};

module.exports = ARCGISMAPSERVERLayer;

},{"core/layers/map/wmslayer":26,"g3w-ol/layers/rasters":71,"utils":419}],23:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var VectorLayer = require('core/layers/map/vectorlayer');

function GeojsonLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.setProvider(options.provider);
  base(this, options);
  this.getFeatures({ url: options.url, mapProjection: this.mapProjection });
}

inherit(GeojsonLayer, VectorLayer);

module.exports = GeojsonLayer;

},{"core/layers/map/vectorlayer":25,"utils":419}],24:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function MapLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = config;
  this.id = config.id;
  this.iframe_internal = config.iframe_internal || false;
  this.extent = config.extent;
  this.projection = config.projection;
  this.layer = null;
  this.layers = config.layers || []; // store all enabled layers
  this.allLayers = []; // store all layers
  this.showSpinnerWhenLoading = true;
  base(this);
}

inherit(MapLayer, G3WObject);

var proto = MapLayer.prototype;

proto.getId = function () {
  return this.id;
};

proto.getOLLayer = function () {
  console.log('every sub classes has to be override');
};

proto.update = function () {
  var mapState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this._updateLayers(mapState, extraParams);
};

proto.checkLayerDisabled = function (layer, resolution, mapUnits) {
  layer.setDisabled(resolution, mapUnits);
  return layer.isDisabled();
};

// check which layers has to be disabled
proto.checkLayersDisabled = function (resolution, mapUnits) {
  var _this = this;

  this.allLayers.forEach(function (layer) {
    return _this.checkLayerDisabled(layer, resolution, mapUnits);
  });
};

proto.setupCustomMapParamsToLegendUrl = function () {
  //to owerwrite for each map layer subclass

  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
};

module.exports = MapLayer;

},{"core/g3wobject":8,"utils":419}],25:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _createOlLayer = require('utils/createOlLayer');

var _createLayerStyle = require('utils/createLayerStyle');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function VectorLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.mapService = _gui2.default.getComponent('map').getService();
  this.geometrytype = options.geometrytype || null;
  this.type = options.type || null;
  this.crs = options.crs || null;
  this.id = options.id;
  this.name = options.name || "";
  this.style = options.style;
  this.color = options.color;
  this.geometryType = options.geometryType;
  this.mapProjection = this.mapService.getProjection().getCode();
  this.projection = options.projection || this.mapProjection;
  this.url = options.url;
  this.provider = options.provider;
  this._features = options.features || [];
  this._olLayer = options.olLayer || this.getOLLayer();
}

inherit(VectorLayer, G3WObject);

var proto = VectorLayer.prototype;

proto.setProvider = function (provider) {
  this._provider = provider;
};

proto.getProvider = function () {
  return this._provider;
};

proto.resetSource = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var source = new ol.source.Vector({
    features: features
  });
  this.setSource(source);
};

proto._makeOlLayer = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      style = _ref.style;

  this._olLayer = new ol.layer.Vector({
    name: this.name,
    id: this.id,
    style: this._makeStyle(style),
    source: new ol.source.Vector({})
  });
};

proto._makeStyle = function (styleConfig) {
  var style = void 0;
  var styles = {};
  if (styleConfig) {
    Object.entries(styleConfig).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          type = _ref3[0],
          config = _ref3[1];

      switch (type) {
        case 'point':
          if (config.icon) {
            styles.image = new ol.style.Icon({
              src: config.icon.url,
              imageSize: config.icon.width
            });
          }
          break;
        case 'line':
          styles.stroke = new ol.style.Stroke({
            color: config.color,
            width: config.width
          });
          break;
        case 'polygon':
          styles.fill = new ol.style.Fill({
            color: config.color
          });
          break;
      }
    });
    style = new ol.style.Style(styles);
  }
  return style;
};

proto.getFeatures = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  this.provider.getFeatures(options).then(function (features) {
    _this.addFeatures(features);
    d.resolve(features);
  }).fail(function (err) {
    return d.reject(err);
  });
  return d.promise();
};

proto.addFeatures = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.getSource().addFeatures(features);
};

proto.addFeature = function (feature) {
  feature && this.getSource().addFeature(feature);
};

proto.getOLLayer = function () {
  if (this._olLayer) return this._olLayer;else {
    var id = this.id;
    var geometryType = this.geometryType;
    var color = this.color;
    var style = this.style ? (0, _createLayerStyle.createLayerStyle)(this.style) : null;
    this._olLayer = (0, _createOlLayer.createOlLayer)({
      id: id,
      geometryType: geometryType,
      color: color,
      style: style,
      features: this._features
    });
  }
  return this._olLayer;
};

proto.setOLLayer = function (olLayer) {
  this._olLayer = olLayer;
};

proto.getSource = function () {
  !this._olLayer && this.getOLLayer();
  return this._olLayer.getSource();
};

proto.setSource = function (source) {
  this._olLayer.setSource(source);
};

proto.setStyle = function (style) {
  this._olLayer.setStyle(style);
};

proto.getFeatureById = function (fid) {
  return fid ? this._olLayer.getSource().getFeatureById(fid) : null;
};

proto.isVisible = function () {
  return this._olLayer.getVisible();
};

proto.setVisible = function (bool) {
  this._olLayer.setVisible(bool);
};

proto.clear = function () {
  this.getSource().clear();
};

proto.addToMap = function (map) {
  map.addLayer(this._olLayer);
};

module.exports = VectorLayer;

},{"core/g3wobject":8,"services/gui":319,"utils":419,"utils/createLayerStyle":364,"utils/createOlLayer":367}],26:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _get_legend_params2 = require('utils/get_legend_params');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var MapLayer = require('core/layers/map/maplayer');
var RasterLayers = require('g3w-ol/layers/rasters');

function WMSLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

  this.LAYERTYPE = {
    LAYER: 'layer',
    MULTILAYER: 'multilayer'
  };
  this.extraParams = extraParams;
  this._method = method;
  base(this, options);
}

inherit(WMSLayer, MapLayer);

var proto = WMSLayer.prototype;

proto.getOLLayer = function (withLayers) {
  if (!this._olLayer) {
    this._olLayer = this._makeOlLayer(withLayers);
  }
  return this._olLayer;
};

proto.getSource = function () {
  return this.getOLLayer().getSource();
};

proto.getInfoFormat = function () {
  return 'application/vnd.ogc.gml';
};

proto.getGetFeatureInfoUrl = function (coordinate, resolution, epsg, params) {
  return this.getOLLayer().getSource().getGetFeatureInfoUrl(coordinate, resolution, epsg, params);
};

proto.getLayerConfigs = function () {
  return this.layers;
};

proto.addLayer = function (layer) {
  if (!this.allLayers.find(function (l) {
    return l === layer;
  })) this.allLayers.push(layer);
  if (!this.layers.find(function (l) {
    return l === layer;
  })) this.layers.push(layer);
};

proto.removeLayer = function (layer) {
  this.layers = this.layers.filter(function (l) {
    return l !== layer;
  });
};

proto.isVisible = function () {
  return this._getVisibleLayers().length > 0;
};

proto.getQueryUrl = function () {
  if (this.layers[0].infourl && '' !== this.layers[0].infourl) {
    return this.layers[0].infourl;
  }
  return this.config.url;
};

proto.getQueryableLayers = function () {
  return this.layers.filter(function (l) {
    return l.isQueryable();
  });
};

proto._getVisibleLayers = function () {
  return this.layers.filter(function (l) {
    return l.isVisible();
  });
};

/**
 * @param {boolean} withLayers
 * 
 * @returns {RasterLayers.WMSLayer}
 * 
 * @listens ol.source.ImageWMS~imageloadstart
 * @listens ol.source.ImageWMS~imageloadend
 * @listens ol.source.ImageWMS~imageloaderror
 */
proto._makeOlLayer = function (withLayers) {
  var _this = this;

  var olLayer = new RasterLayers.WMSLayer({
    url: this.layers[0] && this.layers[0].getWmsUrl ? this.layers[0].getWmsUrl() : this.config.url,
    id: this.config.id,
    projection: this.config.projection,
    iframe_internal: this.iframe_internal,
    layers: withLayers ? this.layers.map(function (layer) {
      return layer.getWMSLayerName();
    }) : this.layers,
    /** @since 3.9.1 */
    format: this.config.format
  }, this.extraParams, this._method);

  olLayer.getSource().on('imageloadstart', function () {
    return _this.emit('loadstart');
  });
  olLayer.getSource().on('imageloadend', function () {
    return _this.emit('loadend');
  });
  olLayer.getSource().on('imageloaderror', function () {
    return _this.emit('loaderror');
  });

  return olLayer;
};

//update Layers
proto._updateLayers = function () {
  var mapState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _extraParams$force = extraParams.force,
      force = _extraParams$force === undefined ? false : _extraParams$force,
      params = _objectWithoutProperties(extraParams, ['force']);

  //check disabled layers


  if (!force) {
    this.checkLayersDisabled(mapState.resolution, mapState.mapUnits);
  }

  var layers = this._getVisibleLayers(mapState) || [];

  // skip when ..
  if (layers.length <= 0) {
    this._olLayer.setVisible(false);
    return;
  }

  var STYLES = [];
  var OPACITIES = [];
  var LEGEND_ON = undefined;
  var LEGEND_OFF = undefined;

  layers.forEach(function (layer) {
    var _get_legend_params = (0, _get_legend_params2.get_legend_params)(layer),
        on = _get_legend_params.LEGEND_ON,
        off = _get_legend_params.LEGEND_OFF;

    STYLES.push(layer.getStyle());
    OPACITIES.push(parseInt(layer.getOpacity() / 100 * 255));
    if (on) LEGEND_ON = undefined === LEGEND_ON ? on : LEGEND_ON + ';' + on;
    if (off) LEGEND_OFF = undefined === LEGEND_OFF ? off : LEGEND_OFF + ';' + off;
  });

  this._olLayer.setVisible(true);
  if (this._olLayer.getSource().updateParams) {
    this._olLayer.getSource().updateParams(_extends({}, params, {
      LEGEND_ON: LEGEND_ON,
      LEGEND_OFF: LEGEND_OFF,
      filtertoken: _applicationState2.default.tokens.filtertoken,
      LAYERS: '' + (layers[0].isArcgisMapserver() ? 'show:' : '') + layers.map(function (l) {
        return l.getWMSLayerName();
      }).join(','),
      STYLES: STYLES.join(','),
      /** @since 3.8 */
      OPACITIES: OPACITIES.join(',')
    }));
  }
};

proto.setupCustomMapParamsToLegendUrl = function () {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  [].concat(this.layer || this.layers).forEach(function (l) {
    return l.setMapParamstoLegendUrl(params);
  });
};

module.exports = WMSLayer;

},{"core/layers/map/maplayer":24,"g3w-ol/layers/rasters":71,"store/application-state":328,"utils":419,"utils/get_legend_params":414}],27:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var WMSLayer = require('core/layers/map/wmslayer');
var RasterLayers = require('g3w-ol/layers/rasters');

function WMSTLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

  this.LAYERTYPE = {
    LAYER: 'layer',
    MULTILAYER: 'multilayer'
  };
  this.extraParams = extraParams;
  this._method = method;
  base(this, options);
}

inherit(WMSTLayer, WMSLayer);

var proto = WMSTLayer.prototype;

proto._makeOlLayer = function (withLayers) {
  var _this = this;

  var olLayer = new RasterLayers.TiledWMSLayer({
    url: this.config.url, //this.layers[0] && this.layers[0].getWmsUrl ? this.layers[0].getWmsUrl() : this.config.url,
    id: this.config.id,
    projection: this.config.projection,
    iframe_internal: this.iframe_internal,
    layers: withLayers ? this.layers.map(function (layer) {
      return layer.getWMSLayerName();
    }) : this.layers,
    cache_provider: this.config.cache_provider, /** @since 3.10.0 **/
    cache_type: this.config.cache_type, /** @since 3.10.0  tms, wms**/
    cache_layer: this.config.cache_layer,
    cache_extent: this.config.cache_extent,
    cache_grid: this.config.cache_grid,
    cache_grid_extent: this.config.cache_grid_extent
  }, this.extraParams, this._method);
  olLayer.getSource().on('tileloadstart', function () {
    return _this.emit('loadstart');
  });
  olLayer.getSource().on('tileloadend', function () {
    return _this.emit('loadend');
  });
  olLayer.getSource().on('tileloaderror', function () {
    return _this.emit('loaderror');
  });

  return olLayer;
};

module.exports = WMSTLayer;

},{"core/layers/map/wmslayer":26,"g3w-ol/layers/rasters":71,"utils":419}],28:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var MapLayer = require('core/layers/map/maplayer');
var RasterLayers = require('g3w-ol/layers/rasters');

function XYZLayer(options) {
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";

  base(this, options);
  this._method = method;
}

inherit(XYZLayer, MapLayer);

var proto = XYZLayer.prototype;

proto.getOLLayer = function () {
  if (!this._olLayer) {
    this._olLayer = this._makeOlLayer();
  }
  return this._olLayer;
};

proto.getSource = function () {
  return this.getOLLayer().getSource();
};

proto.getLayerConfigs = function () {
  return this.layer;
};

proto.addLayer = function (layer) {
  this.layer = layer;
  this.layers.push(layer);
  this.allLayers.push(layer);
};

proto.update = function (mapState, extraParams) {
  this._updateLayer(mapState, extraParams);
};

proto.isVisible = function () {
  return layer.state.visible;
};

proto._makeOlLayer = function () {
  var _this = this;

  this._olLayer = new RasterLayers.XYZLayer({
    url: '' + this.layer.getCacheUrl(),
    maxZoom: 20,
    extent: this.config.extent,
    iframe_internal: this.iframe_internal,
    projection: this.projection ? this.projection : this.layer.getProjection(),
    cache_provider: this.config.cache_provider
  }, this._method);

  this._olLayer.getSource().on('imageloadstart', function () {
    return _this.emit('loadstart');
  });
  this._olLayer.getSource().on('imageloadend', function () {
    return _this.emit('loadend');
  });
  this._olLayer.getSource().on('imageloaderror', function () {
    return _this.emit('loaderror');
  });

  return this._olLayer;
};

proto._updateLayer = function () {
  var mapState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _extraParams$force = extraParams.force,
      force = _extraParams$force === undefined ? false : _extraParams$force;


  if (!force) {
    this.checkLayersDisabled(mapState.resolution, mapState.mapUnits);
  }

  this._olLayer.setVisible(this.layer.isVisible());
};

module.exports = XYZLayer;

},{"core/layers/map/maplayer":24,"g3w-ol/layers/rasters":71,"utils":419}],29:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

var _require = require('utils'),
    XHR = _require.XHR; /**
                         * @TODO convert it to ES6 class (or external utils)
                         * 
                         * @file
                         * @since 3.9.0
                         */


exports.default = {

  /** 
   * @returns promise
   */
  getDownloadFilefromDownloadDataType: function getDownloadFilefromDownloadDataType(type, _ref) {
    var _ref$data = _ref.data,
        data = _ref$data === undefined ? {} : _ref$data,
        options = _ref.options;

    data.filtertoken = this.getFilterToken();
    switch (type) {
      case 'shapefile':
        return this.getShp({ data: data, options: options });
      case 'xls':
        return this.getXls({ data: data, options: options });
      case 'csv':
        return this.getCsv({ data: data, options: options });
      case 'gpx':
        return this.getGpx({ data: data, options: options });
      case 'gpkg':
        return this.getGpkg({ data: data, options: options });
      case 'geotiff':
        return this.getGeoTIFF({ data: data, options: options });
    }
  },


  /**
   * Get Getotiff layer format
   * @param data
   * @returns {Promise | Promise<unknown>}
   */
  getGeoTIFF: function getGeoTIFF() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$data = _ref2.data,
        data = _ref2$data === undefined ? {} : _ref2$data;

    data.filtertoken = this.getFilterToken();
    return XHR.fileDownload({
      url: this.getUrl('geotiff'),
      data: data,
      httpMethod: "POST"
    });
  },


  /**
   * Get Xls layer format
   * @param data
   * @returns {Promise | Promise<unknown>}
   */
  getXls: function getXls() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$data = _ref3.data,
        data = _ref3$data === undefined ? {} : _ref3$data;

    data.filtertoken = this.getFilterToken();
    return XHR.fileDownload({
      url: this.getUrl('xls'),
      data: data,
      httpMethod: "POST"
    });
  },


  /**
   * Get shapefile layer format
   * @param data
   * @returns {Promise | Promise<unknown>}
   */
  getShp: function getShp() {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref4$data = _ref4.data,
        data = _ref4$data === undefined ? {} : _ref4$data;

    data.filtertoken = this.getFilterToken();
    return XHR.fileDownload({
      url: this.getUrl('shp'),
      data: data,
      httpMethod: "POST"
    });
  },


  /**
   * Get gpx layer format
   * @param data
   * @returns {Promise | Promise<unknown>}
   */
  getGpx: function getGpx() {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$data = _ref5.data,
        data = _ref5$data === undefined ? {} : _ref5$data;

    data.filtertoken = this.getFilterToken();
    return XHR.fileDownload({
      url: this.getUrl('gpx'),
      data: data,
      httpMethod: "POST"
    });
  },


  /**
   * get gpkg layer format
   * @param data
   * @returns {Promise | Promise<unknown>}
   */
  getGpkg: function getGpkg() {
    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref6$data = _ref6.data,
        data = _ref6$data === undefined ? {} : _ref6$data;

    data.filtertoken = this.getFilterToken();
    return XHR.fileDownload({
      url: this.getUrl('gpkg'),
      data: data,
      httpMethod: "POST"
    });
  },


  /**
   * Get csv layer format
   * @param data
   * @returns {Promise | Promise<unknown>}
   */
  getCsv: function getCsv() {
    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref7$data = _ref7.data,
        data = _ref7$data === undefined ? {} : _ref7$data;

    data.filtertoken = this.getFilterToken();
    return XHR.fileDownload({
      url: this.getUrl('csv'),
      data: data,
      httpMethod: "POST"
    });
  },


  /**
   * Check if it has a format to download
   * @returns {*}
   */
  isDownloadable: function isDownloadable() {
    return this.isShpDownlodable() || this.isXlsDownlodable() || this.isGpxDownlodable() || this.isGpkgDownlodable() || this.isCsvDownlodable();
  },


  /**
   * Get downlaod formats
   * @returns {string[]}
   */
  getDownloadableFormats: function getDownloadableFormats() {
    var _this = this;

    return Object.keys(_constant.DOWNLOAD_FORMATS).filter(function (download_format) {
      return _this.config[download_format];
    }).map(function (format) {
      return _constant.DOWNLOAD_FORMATS[format].format;
    });
  },


  /**
   * @param download url
   * @returns {string}
   */
  getDownloadUrl: function getDownloadUrl(format) {
    var find = Object.values(_constant.DOWNLOAD_FORMATS).find(function (download_format) {
      return download_format.format === format;
    });
    return find && find.url;
  },


  /**
   * @returns {false|*|boolean}
   */
  isGeoTIFFDownlodable: function isGeoTIFFDownlodable() {
    return !this.isBaseLayer() && this.config.download && 'gdal' === this.config.source.type;
  },


  /**
   * @returns {false|*|boolean}
   */
  isShpDownlodable: function isShpDownlodable() {
    return !this.isBaseLayer() && this.config.download && 'gdal' !== this.config.source.type;
  },


  /**
   * @returns {false|string|*}
   */
  isXlsDownlodable: function isXlsDownlodable() {
    return !this.isBaseLayer() && this.config.download_xls;
  },


  /**
   * @returns {false|string|*}
   */
  isGpxDownlodable: function isGpxDownlodable() {
    return !this.isBaseLayer() && this.config.download_gpx;
  },


  /**
   * @returns {false|string|*}
   */
  isGpkgDownlodable: function isGpkgDownlodable() {
    return !this.isBaseLayer() && this.config.download_gpkg;
  },


  /**
   * @returns {false|string|*}
   */
  isCsvDownlodable: function isCsvDownlodable() {
    return !this.isBaseLayer() && this.config.download_csv;
  }
};

},{"app/constant":5,"utils":419}],30:[function(require,module,exports){
var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _createFeatureFromFeatureObject = require('utils/createFeatureFromFeatureObject');

var _getScaleFromResolution = require('utils/getScaleFromResolution');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @TODO convert it to ES6 class (or external utils)
 * 
 * @file
 * @since 3.9.0
 */

var Projections = require('g3w-ol/projection/projections');

var _require = require('utils'),
    XHR = _require.XHR,
    sanitizeUrl = _require.sanitizeUrl;

var RESERVERDPARAMETRS = {
  wms: ['VERSION', 'REQUEST', 'BBOX', 'LAYERS', 'WIDTH', 'HEIGHT', 'DPI', 'FORMAT', 'CRS']
};

function GeoLayerMixin() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
}

var proto = GeoLayerMixin.prototype;

proto.setup = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!this.config) {
    console.log("GeoLayerMixin must be used from a valid (geo) Layer instance");
    return;
  }
  var project = options.project;

  this.config.map_crs = project.getProjection().getCode();
  this.config.multilayerid = config.multilayer;
  this.legendCategories = {};
  // Features that contain
  this.olSelectionFeatures = {}; // key id / fid of feature and values is an object with feature and added
  // state extend of layer setting geolayer property to true
  // and adding information of bbox
  _.extend(this.state, {
    geolayer: config.geometrytype !== "NoGeometry",
    legend: {
      url: null,
      loading: false,
      error: false,
      /**
       * @deprecated since 3.8. Will be removed in 4.x. Use `expanded` attribute instead
       */
      show: true,
      change: false // used for when categories changed (checkbox on TOC) and legend is on TAB
    },
    external: config.source && config.source.external || false,
    bbox: config.bbox || null,
    visible: config.visible || false,
    checked: config.visible || false,
    epsg: config.crs.epsg,
    hidden: config.hidden || false,
    scalebasedvisibility: config.scalebasedvisibility || false,
    minscale: config.minscale,
    maxscale: config.maxscale,
    ows_method: config.ows_method,

    /**
     * @type {boolean}
     */
    exclude_from_legend: typeof config.exclude_from_legend == 'boolean' ? config.exclude_from_legend : true,

    /**
     * Has more than one category's legend
     * 
     * @type {boolean}
     */
    categories: false,

    /**
     * Toggle legend item state (expandend or collapsed) in catalog layers (TOC)
     * 
     * @type {number}
     *
     * @since v3.8
     */
    expanded: config.expanded,

    /**
     * Layer opacity
     * 
     * @type {number} opacity range = [0, 100]
     * 
     * @since v3.8
     */
    opacity: config.opacity || 100

  });
  if (config.projection) this.config.projection = config.projection.getCode() === config.crs.epsg ? config.projection : Projections.get(config.crs);
  if (config.attributions) this.config.attributions = config.attributions;
  config.source && config.source.url && this._sanitizeSourceUrl();
};

/**
 * Legend Graphic section
 */
proto.getLegendGraphic = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$all = _ref.all,
      all = _ref$all === undefined ? true : _ref$all;

  var legendParams = _application2.default.getConfig().layout ? _application2.default.getConfig().layout.legend : {};
  var legendurl = this.getLegendUrl(legendParams, {
    categories: true,
    all: all, // true meaning no bbox no filter just all referred to
    format: 'application/json' // is the format to request categories (icon and label of each category)
  });
  return XHR.get({
    url: legendurl
  });
};

/**
 * Set layer categories legend
 * @param categories
 */
proto.setCategories = function () {
  var categories = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.legendCategories[this.getCurrentStyle().name] = categories;
  //set categories state attribute to true only if exist at least a rule key
  this.state.categories = categories.length > 0 && categories.filter(function (category) {
    return category.ruleKey;
  }).length > 0;
};

/**
 * Return eventually categories of layers legend
 * @returns {string[] | string | [] | *[] | boolean | {default: {level: *, appenders: string[]}}}
 */
proto.getCategories = function () {
  return this.legendCategories[this.getCurrentStyle().name];
};

/**
 * Clear all categories
 */
proto.clearCategories = function () {
  this.legendCategories = {};
  this.state.categories = false;
};

/**
 * End Legend Graphic section
 */

/**
 * [LAYER SELECTION]
 * 
 * Clear all selection Openlayers features
 */
proto.clearOlSelectionFeatures = function () {
  this.olSelectionFeatures = null;
};

/**
 * [LAYER SELECTION]
 * 
 * Get OpenLayer selection feature by feature id
 * 
 * @param id
 * @returns {*}
 */
proto.getOlSelectionFeature = function (id) {
  return this.olSelectionFeatures[id];
};

/**
 * [LAYER SELECTION]
 * 
 * Update selected feature (Case change geometry)
 * 
 * @param id
 * @param feature
 */
proto.updateOlSelectionFeature = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref2.id,
      feature = _ref2.feature;

  var selected = this.getOlSelectionFeature(id);
  if (selected) {
    selected.feature = feature;
    _gui2.default.getService('map').setSelectionFeatures('update', { feature: feature });
  }
};

/**
 * [LAYER SELECTION]
 * 
 * Delete OpenLayer feature selection by feature id
 * 
 * @param id
 */
proto.deleteOlSelectionFeature = function (id) {
  var selected = this.getOlSelectionFeature(id);
  if (selected) {
    /** @FIXME undefined variable */
    mapService.setSelectionFeatures('remove', { feature: selected.feature });
    delete this.olSelectionFeatures[id];
  }
};

/**
 * [LAYER SELECTION]
 * 
 * Get all OpenLayers feature selection
 * 
 * @returns { {} | null }
 */
proto.getOlSelectionFeatures = function () {
  return this.olSelectionFeatures;
};

/**
* [LAYER SELECTION]

 * @param id
 * @param feature
 * 
 * @returns {*}
 */
proto.addOlSelectionFeature = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref3.id,
      feature = _ref3.feature;

  this.olSelectionFeatures[id] = this.olSelectionFeatures[id] || {
    feature: (0, _createFeatureFromFeatureObject.createFeatureFromFeatureObject)({ id: id, feature: feature }),
    added: false
  };
  return this.olSelectionFeatures[id];
};

/**
 * [LAYER SELECTION]
 * 
 * Set selection layer on map not visible
 */
proto.hideOlSelectionFeatures = function () {
  _gui2.default.getService('map').setSelectionLayerVisible(false);
};

/**
 * [LAYER SELECTION]
 * 
 * Show all selection feature
 */
proto.showAllOlSelectionFeatures = function () {
  var map = _gui2.default.getService('map');
  // Loop `added` features (selected)
  Object.values(this.olSelectionFeatures).forEach(function (feat) {
    if (feat.added) {
      map.setSelectionFeatures('add', { feature: feat.feature });
    }
  });
  // Ensures visibilty of selection layer on map 
  map.setSelectionLayerVisible(true);
};

/**
 * [LAYER SELECTION]
 * 
 * Toggle `added` property on all features
 */
proto.setInversionOlSelectionFeatures = function () {
  var map = _gui2.default.getService('map');
  Object.values(this.olSelectionFeatures).forEach(function (feat) {
    feat.added = !feat.added;
    map.setSelectionFeatures(feat.added ? 'add' : 'remove', { feature: feat.feature });
  });
};

/**
 * [LAYER SELECTION]
 * 
 * @param fid
 * @param action
 * 
 * @returns {*}
 */
proto.setOlSelectionFeatureByFid = function (fid, action) {
  var selected = this.getOlSelectionFeature(fid);
  if (selected && selected.feature) {
    return this.setOlSelectionFeatures({
      id: fid,
      feature: selected.feature
    }, action);
  }
};

/**
 * [LAYER SELECTION]
 * 
 * @param feature
 * @param action
 * 
 * @returns { boolean }
 */
proto.setOlSelectionFeatures = function (feature) {
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'add';

  var map = _gui2.default.getService('map');

  // select a single feature
  if (feature) {
    var feat = this.getOlSelectionFeature(feature.id) || this.addOlSelectionFeature(feature);
    feat.feature.__layerId = 'add' === action && !feat.added ? this.getId() : undefined; // <-- used when working with selected Layer features
    map.setSelectionFeatures(action, { feature: feat.feature });
    feat.added = 'add' === action && !feat.added;
  }

  // select all features
  if (!feature) {
    Object.values(this.olSelectionFeatures).forEach(function (feat) {
      //remove selection feature
      if (feat.added) {
        map.setSelectionFeatures('remove', { feature: feat.feature });
      }
      feat.added = false;
    });
  }

  return undefined === Object.values(this.olSelectionFeatures).find(function (feat) {
    return feat.added;
  });
};

/**
 * Create a valid GET url parameter
 * 
 * @param type
 * @private
 */
proto._sanitizeSourceUrl = function () {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'wms';

  this.config.source.url = sanitizeUrl({
    url: this.config.source.url,
    reserverParameters: RESERVERDPARAMETRS[type]
  });
};

proto.isLayerCheckedAndAllParents = function () {
  var checked = this.isChecked();
  if (checked) {
    var parentGroup = this.state.parentGroup;
    while (checked && parentGroup) {
      checked = checked && parentGroup.checked;
      parentGroup = parentGroup.parentGroup;
    }
  }
  return checked;
};

/**
 * Set layer legend item `checked` state (TOC)
 * 
 * @param { boolean } bool
 */
proto.setChecked = function (bool) {
  this.state.checked = bool;
};

/**
 * @returns { boolean } whether layer legend item is checked (TOC)
 */
proto.isChecked = function () {
  return this.state.checked;
};

/**
 * Is a method that check for visiblitity dissabled (based on scalevisibility) and checked on toc
 * @param bool
 * @returns {*}
 */
proto.setVisible = function (bool) {
  //check if is changed
  var oldVisibile = this.state.visible;
  this.state.visible = bool && this.isChecked(); // bool and is checked
  var changed = oldVisibile !== this.state.visible;
  //if changed call change
  changed && this.change();
  return this.state.visible;
};

proto.isVisible = function () {
  return this.state.visible;
};

proto.isDisabled = function () {
  return this.state.disabled;
};

proto.isPrintable = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      scale = _ref4.scale;

  return this.isLayerCheckedAndAllParents() && (!this.state.scalebasedvisibility || scale >= this.state.maxscale && scale <= this.state.minscale);
};

//get style form layer
proto.getStyles = function () {
  return this.config.source.external ? this.config.source.styles : this.config.styles;
};

proto.getStyle = function () {
  return this.config.source.external ? this.config.source.styles : this.config.styles ? this.config.styles.find(function (style) {
    return style.current;
  }).name : '';
};

/**
 * Get transparency property
 * 
 * @returns {number}
 * 
 * @since v3.8
 */

proto.getOpacity = function () {
  return this.state.opacity;
};

/**
 * Method to change current style  of layer
 * @param currentStyleName
 * @returns {boolean}
 */
proto.setCurrentStyle = function (currentStyleName) {
  var changed = false;
  this.config.styles.forEach(function (style) {
    if (style.name === currentStyleName) changed = !style.current;
    style.current = style.name === currentStyleName;
  });
  return changed;
};

proto.getCurrentStyle = function () {
  return this.config.styles.find(function (style) {
    return style.current;
  });
};

/**
 * Disable layer by check scalevisibility configuration value
 * @param resolution
 * @param mapUnits
 */
proto.setDisabled = function (resolution) {
  var mapUnits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'm';

  if (this.state.scalebasedvisibility) {
    var mapScale = (0, _getScaleFromResolution.getScaleFromResolution)(resolution, mapUnits);
    this.state.disabled = !(mapScale >= this.state.maxscale && mapScale <= this.state.minscale);
    this.state.disabled = this.state.minscale === 0 ? !(mapScale >= this.state.maxscale) : this.state.disabled;
    // needed to check if call setVisible if change disable property
    // looping through parentfolter checked
    var setVisible = true;
    var parentGroup = this.state.parentGroup;
    while (parentGroup) {
      setVisible = setVisible && parentGroup.checked;
      parentGroup = parentGroup.parentGroup;
    }
    setVisible && this.setVisible(!this.state.disabled);
    // change toc highlight property based on disabled otr not
    this.isFilterable() && this.setTocHighlightable(!this.state.disabled);
  } else this.state.disabled = false;
};

proto.getMultiLayerId = function () {
  return this.config.multilayerid;
};

proto.getGeometryType = function () {
  return this.config.geometrytype;
};

proto.getOwsMethod = function () {
  return this.config.ows_method;
};

proto.setProjection = function () {
  var crs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config.projection = Projections.get(crs);
};

proto.getProjection = function () {
  return this.config.projection;
};

proto.getEpsg = function () {
  return this.config.crs.epsg;
};

proto.getCrs = function () {
  return this.config.projection && this.config.projection.getCode() || null;
};

proto.getMapCrs = function () {
  return this.config.map_crs;
};

proto.isCached = function () {
  return this.config.cache_url && this.config.cache_url !== '';
};

proto.getCacheUrl = function () {
  if (this.isCached()) {
    /** @since 3.10.0 **/
    if (this.config.cache_provider && 'mapproxy' === this.config.cache_provider) {
      //in the case of mapproxy provider, cache_url contains {z}/{x}/{-y}.png set
      return this.config.cache_url;
    }
    return this.config.cache_url + '/{z}/{x}/{y}.png';
  }
};

// return if layer has inverted axis
proto.hasAxisInverted = function () {
  var projection = this.getProjection();
  var axisOrientation = projection.getAxisOrientation ? projection.getAxisOrientation() : "enu";
  return axisOrientation.substr(0, 2) === 'ne';
};

/**
 * @virtual method need to be implemented by subclasses
 */
proto.getMapLayer = function () {
  console.log('overwrite by single layer');
};

proto.setMapProjection = function (mapProjection) {
  this._mapProjection = mapProjection;
};

proto.getMapProjection = function () {
  return this._mapProjection;
};

module.exports = GeoLayerMixin;

},{"g3w-ol/projection/projections":73,"services/application":310,"services/gui":319,"utils":419,"utils/createFeatureFromFeatureObject":359,"utils/getScaleFromResolution":410}],31:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * @TODO convert it to ES6 class (or external utils)
 * 
 * @file
 * @since 3.9.0
 */
var Relation = require('core/relations/relation');

exports.default = {

  /**
   * Get Relations
   * 
   * @returns {*}
   */
  getRelations: function getRelations() {
    return this._relations;
  },


  /**
   * Get Relation by id
   * 
   * @param id
   * 
   * @returns {*}
   */
  getRelationById: function getRelationById(id) {
    return this._relations.getArray().find(function (r) {
      return r.getId() === id;
    });
  },


  /**
   * Get Relation fields
   * 
   * @param relationName
   * 
   * @returns { * | Array }
   */
  getRelationAttributes: function getRelationAttributes(relationName) {
    var relation = this._relations.find(function (r) {
      return r.name === relationName;
    });
    return relation ? relation.fields : [];
  },


  /**
   * [LAYER RELATIONS]
   * 
   * @TODO Add description
   * 
   * @returns { Object } fields
   */
  getRelationsAttributes: function getRelationsAttributes() {
    return (this.state.relations || []).reduce(function (fields, r) {
      fields[r.name] = r.fields;
      return fields;
    }, {});
  },


  /**
   * Check if layer is a Child of a relation
   * 
   * @returns { * | boolean }
   */
  isChild: function isChild() {
    return this.getRelations() ? this._relations.isChild(this.getId()) : false;
  },


  /**
   * Check if layer is a Father of a relation
   * 
   * @returns { * | boolean }
   */
  isFather: function isFather() {
    return this.getRelations() ? this._relations.isFather(this.getId()) : false;
  },


  /**
   * Get children relations
   * 
   * @returns { * |Array }
   */
  getChildren: function getChildren() {
    return this.isFather() ? this._relations.getChildren(this.getId()) : [];
  },


  /**
   * Get parents relations
   * 
   * @returns { * | Array }
   */
  getFathers: function getFathers() {
    return this.isChild() ? this._relations.getFathers(this.getId()) : [];
  },


  /**
   * Check if it has children
   * 
   * @returns { * | boolean }
   */
  hasChildren: function hasChildren() {
    return this.hasRelations() ? this._relations.hasChildren(this.getId()) : false;
  },


  /**
   * Check if it has fathers
   * 
   * @returns { * | boolean }
   */
  hasFathers: function hasFathers() {
    return this.hasRelations() ? this._relations.hasFathers(this.getId()) : false;
  },


  /**
   * @TODO add description
   */
  hasRelations: function hasRelations() {
    return !!this._relations;
  },


  /**
   * Create Relation
   * 
   * ORIGINAL SOURCE: src/app/core/relations/relations.js@v3.9.3
   * 
   * @param projectRelations
   * 
   * @returns relations
   * 
   * @private
   */
  _createRelations: function _createRelations(projectRelations) {
    var layerId = this.getId();
    var relations = projectRelations.filter(function (r) {
      return -1 !== [r.referencedLayer, r.referencingLayer].indexOf(layerId);
    });
    var Relations = {

      /**
       * Relations store
       */
      _relations: (relations || []).reduce(function (relations, conf) {
        var r = new Relation(conf);
        relations[r.getId()] = r;
        return relations;
      }, {}),

      /**
       * Number of relations
       */
      _length: relations ? relations.length : 0,

      /**
       * Populate `this._relationsInfo` object.
       */
      _createRelationsInfo: function _createRelationsInfo() {

        // sanity check
        if (!this._relationsInfo) {
          this._clearRelationsInfo();
        }

        var f = void 0,
            c = void 0;
        var _relationsInfo = this._relationsInfo,
            father_child = _relationsInfo.father_child,
            fathers = _relationsInfo.fathers,
            children = _relationsInfo.children;


        Object.entries(this._relations).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              relationKey = _ref2[0],
              relation = _ref2[1];

          f = relation.getFather();
          c = relation.getChild();

          father_child[f + c] = relationKey; // relationKey = [father_layerId + child_layerId]
          fathers[f] = fathers[f] || [];
          children[c] = children[c] || [];

          fathers[f].push(c);
          children[c].push(f);
        });
      },
      _clearRelationsInfo: function _clearRelationsInfo() {
        this._relationsInfo = {
          children: {}, // hashmap: <child_layerId,  Array<father_relationId>>
          fathers: {}, // hashmap: <father_layerId, Array<child_relationId[]>>
          father_child: {} // hashmap: <relationKey, relationId>
        };
      },


      /**
       * Build relations between layers.
       *
       * @private
       */
      _reloadRelationsInfo: function _reloadRelationsInfo() {
        this._clearRelationsInfo();
        this._createRelationsInfo();
      },


      /**
       * @returns { number } number of relations
       */
      getLength: function getLength() {
        return this._length;
      },


      /**
       * @param relation.type
       *
       * @returns { {} | Relation[] } relations filtered by type
       */
      getRelations: function getRelations() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref3$type = _ref3.type,
            type = _ref3$type === undefined ? null : _ref3$type;

        // type = null
        if (!type) {
          return this._relations;
        }

        // type = { 'ONE' | 'MANY' }
        if (-1 !== ['ONE', 'MANY'].indexOf(type)) {
          var _relations = {};
          for (var name in this._relations) {
            if (type === this._relations[name].getType()) {
              _relations[name] = this._relations[name];
            }
          }
          return _relations;
        }

        return {};
      },


      /**
       * @returns { Relation[] }
       */
      getArray: function getArray() {
        return Object.entries(this._relations).map(function (r) {
          return r[1];
        });
      },


      /**
       * @param relations
       */
      setRelations: function setRelations() {
        var relations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        this._relations = Array.isArray(relations) ? relations : [];
      },


      /**
       * @param id
       *
       * @returns { Relation }
       */
      getRelationById: function getRelationById(id) {
        return this._relations[id];
      },


      /**
       * @param father father layerId
       * @param child  child_layerId
       *
       * @returns { Relation }
       */
      getRelationByFatherChildren: function getRelationByFatherChildren(father, child) {
        return this.getRelationById(this._relationsInfo.father_child[father + child]);
      },


      /**
       * @param relation
       */
      addRelation: function addRelation(relation) {
        if (relation instanceof Relation) {
          this._relations[relation.getId()] = relation;
          this._reloadRelationsInfo();
        }
      },


      /**
       * @param relation
       */
      removeRelation: function removeRelation(relation) {
        if (relation instanceof Relation) {
          delete this._relations[relation.getId()];
          this._reloadRelationsInfo();
        }
      },


      /**
       * @param layer_id
       * 
       * @returns { boolean }
       */
      hasChildren: function hasChildren(layer_id) {
        var children = this.getChildren(layer_id);
        return children && children.length > 0;
      },


      /**
       * @param layer_id
       * 
       * @returns { boolean }
       */
      hasFathers: function hasFathers(layer_id) {
        var fathers = this.getFathers(layer_id);
        return fathers && fathers.length > 0;
      },


      /**
       * Extract children relations
       *
       * @param layer_id
       *
       * @returns { Array | null } child layer (Ids) within same relation
       */
      getChildren: function getChildren(layer_id) {
        return this.isFather(layer_id) ? this._relationsInfo.fathers[layer_id] : null;
      },


      /**
       * Extract father relations
       *
       * @param layer_id
       *
       * @returns { Array | null } father layer Ids within same relation
       */
      getFathers: function getFathers(layer_id) {
        return this.isChild(layer_id) ? this._relationsInfo.children[layer_id] : null;
      },


      /**
       * @param id
       *
       * @returns { boolean }
       */
      isChild: function isChild(id) {
        return !!this._relationsInfo.children[id];
      },


      /**
       * @param id
       *
       * @returns { boolean }
       */
      isFather: function isFather(id) {
        return !!this._relationsInfo.fathers[id];
      }
    };

    Relations._reloadRelationsInfo();

    return Relations;
  }
};

},{"core/relations/relation":42}],32:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SELECTION = undefined;

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _prompt = require('utils/prompt');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @TODO convert it to ES6 class (or external utils)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since 3.9.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

/**
 * Selection state 
 */


var SELECTION = exports.SELECTION = {
  ALL: '__ALL__',
  EXCLUDE: '__EXCLUDE__'
};

exports.default = {

  /**
   * Check if is selected
   * 
   * @returns {boolean}
   */
  isSelected: function isSelected() {
    return this.state.selected;
  },


  /**
   * Set Selected
   * 
   * @param {boolean} bool
   */
  setSelected: function setSelected(bool) {
    this.state.selected = bool;
  },


  /**
   * Set Selection
   * 
   * @param bool
   * 
   * @returns {Promise<void>}
   * 
   * @fires unselectionall
   */
  setSelection: function () {
    var _ref = _asyncToGenerator(function* () {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.state.selection.active = bool;

      // skip when ..
      if (bool) {
        return;
      }

      var is_active = this.state.filter.active;
      var has_current = null !== this.state.filter.current;

      /** @TODO add description */
      if (has_current && is_active) {
        yield this._applyFilterToken(this.state.filter.current);
      }

      /** @TODO add description */
      if (!has_current && is_active) {
        yield this.deleteFilterToken();
      }

      this.emit('unselectionall', this.getId());
    });

    function setSelection() {
      return _ref.apply(this, arguments);
    }

    return setSelection;
  }(),


  /**
   * @returns {boolean} whether selection si active
   */
  isSelectionActive: function isSelectionActive() {
    return this.state.selection.active;
  },


  /**
   * Get selection
   * 
   * @returns {{ active: boolean }}
   */
  getSelection: function getSelection() {
    return this.state.selection;
  },


  /**
   * @returns filter
   */
  getFilter: function getFilter() {
    return this.state.filter;
  },


  /**
   * Set filter Ative to layer
   * 
   * @param {boolean} bool
   */
  setFilter: function setFilter() {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.state.filter.active = bool;
  },


  /**
   * get current filter
   */
  getCurrentFilter: function getCurrentFilter() {
    return this.state.filter.current;
  },


  /**
   * @TODO Add description
   * 
   * @returns {boolean}
   */
  getFilterActive: function getFilterActive() {
    return this.state.filter.active;
  },


  /**
   * @returns { Array } saved filters
   */
  getFilters: function getFilters() {
    return this.state.filters;
  },


  /**
   * Add new filter
   * 
   * @param filter Object filter
   */
  addFilter: function addFilter() {
    var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.state.filters.push(filter);
  },


  /**
   * Remove saved filter from filters Array
   * 
   * @param fid unique filter id
   */
  removefilter: function removefilter(fid) {
    this.state.filters = this.state.filters.filter(function (f) {
      return fid === f.fid;
    });
  },


  /**
   * Set Current filter
   * 
   * @param {{ fid, name }} filter 
   */
  setCurrentFilter: function setCurrentFilter(filter) {
    this.state.filter.current = filter;
  },


  /**
   * Apply layer filter by fid
   * 
   * @param filter
   */
  applyFilter: function () {
    var _ref2 = _asyncToGenerator(function* (filter) {
      if (!this.providers['filtertoken']) {
        return;
      }

      // current filter is set and is different from current
      if (null === this.state.filter.current || filter.fid !== this.state.filter.current.fid) {
        yield this.clearSelectionFids();
        _gui2.default.closeContent();
      }

      yield this._applyFilterToken(filter);
    });

    function applyFilter(_x4) {
      return _ref2.apply(this, arguments);
    }

    return applyFilter;
  }(),


  /**
   * @returns {Promise<void>}
   * 
   * @private
   */
  _applyFilterToken: function () {
    var _ref3 = _asyncToGenerator(function* (filter) {
      var _ref4 = yield this.providers['filtertoken'].applyFilterToken(filter.fid),
          filtertoken = _ref4.filtertoken;

      if (filtertoken) {
        this.setFilter(false);
        this.setCurrentFilter(filter);
        this.setFilterToken(filtertoken);
      }
    });

    function _applyFilterToken(_x5) {
      return _ref3.apply(this, arguments);
    }

    return _applyFilterToken;
  }(),


  /**
   * @since 3.9.0
   */
  saveFilter: function saveFilter() {

    // skip when ..
    if (!this.providers['filtertoken'] || !this.selectionFids.size > 0) {
      return;
    }

    var layer = this;

    (0, _prompt.prompt)({
      label: t('layer_selection_filter.tools.savefilter'),
      value: layer.getCurrentFilter() ? layer.getCurrentFilter().name : '',
      callback: function () {
        var _ref5 = _asyncToGenerator(function* (name) {
          var data = yield layer.providers['filtertoken'].saveFilterToken(name);

          // skip when no data return from provider
          if (!data) {
            return;
          }

          var filter = layer.state.filters.find(function (f) {
            return f.fid === data.fid;
          });

          // add saved filter to filters array
          if (undefined === filter) {
            filter = {
              fid: data.fid, //get fid
              name: data.name //get name
            };
            layer.state.filters.push(filter);
          }

          layer.setCurrentFilter(filter); // set current filter
          layer.setFilter(false); // set to false
          layer.getSelection().active = false; // reset selection to false
          layer.selectionFids.clear(); // clear current fids

          //in case of geolayer
          if (layer.isGeoLayer()) {
            //remove selection feature from map
            layer.setOlSelectionFeatures();
          }

          //emit unselectionall
          layer.emit('unselectionall', layer.getId());
        });

        function callback(_x6) {
          return _ref5.apply(this, arguments);
        }

        return callback;
      }()
    });
  },


  /**
   * Method to set unset filter token on layer
   */
  toggleFilterToken: function () {
    var _ref6 = _asyncToGenerator(function* () {

      // toggle boolean value of filter active
      this.setFilter(!this.state.filter.active);

      var has_current = this.state.filter.current;
      var is_active = this.state.filter.active;

      // there is an active filter --> create a new filter
      if (is_active) {
        yield this.createFilterToken();
      }

      // there is a current saved filter --> apply filter
      if (has_current && !is_active) {
        yield this.applyFilter(this.state.filter.current);
      }

      // there is no current saved filter --> delete it
      if (!has_current && !is_active) {
        yield this.deleteFilterToken();
      }

      var has_selection = this.state.selection.active && this.isGeoLayer();

      // active filter --> hide all selected feature from map (red ones)
      if (has_selection && this.state.filter.active) {
        this.hideOlSelectionFeatures();
      }

      // active filter --> show only current selected feature on map (red ones)
      if (has_selection && !this.state.filter.active) {
        this.showAllOlSelectionFeatures();
      }

      return this.state.filter.active;
    });

    function toggleFilterToken() {
      return _ref6.apply(this, arguments);
    }

    return toggleFilterToken;
  }(),


  /**
   * Delete filtertoken from server
   * 
   * @param fid  unique id of filter saved to delete
   */
  deleteFilterToken: function () {
    var _ref7 = _asyncToGenerator(function* (fid) {
      try {
        // skip when no filtertoken provider is set
        if (!this.providers['filtertoken']) {
          return;
        }

        // delete filtertoken related to layer provider
        var filtertoken = yield this.providers['filtertoken'].deleteFilterToken(fid);

        // remove it from filters list when deleting a saved filter (since v3.9.0)
        if (undefined !== fid) {
          this.state.filters = this.state.filters.filter(function (f) {
            return fid !== f.fid;
          });
        }

        this.setCurrentFilter(null); // set current filter set to null
        this.setFilter(false); // set active filter to false
        this.setFilterToken(filtertoken); // pass `filtertoken` to application
      } catch (err) {
        console.log('Error deleteing filtertoken', err);
      }
    });

    function deleteFilterToken(_x7) {
      return _ref7.apply(this, arguments);
    }

    return deleteFilterToken;
  }(),


  /**
   * Set applicaton filter token
   * 
   * @param filtertoken
   *
   * @fires filtertokenchange when filtertoken is changed
   * 
   * @since 3.9.0
   */
  setFilterToken: function setFilterToken() {
    var filtertoken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _application2.default.setFilterToken(filtertoken);
    this.emit('filtertokenchange', { layerId: this.getId() });
  },


  /**
   * Create filter token
   */
  createFilterToken: function () {
    var _ref8 = _asyncToGenerator(function* () {
      try {

        var provider = this.providers['filtertoken'];
        var selection = this.selectionFids;

        // skip when no filter token provider is set or selectionFids is empty
        if (!provider || !selection.size > 0) {
          return;
        }

        // select all features
        if (selection.has(SELECTION.ALL)) {
          yield provider.deleteFilterToken();
          this.setFilterToken(null);
          return;
        }

        var fids = Array.from(selection);

        // exclude some features from selection
        if (selection.has(SELECTION.EXCLUDE)) {
          this.setFilterToken((yield provider.getFilterToken({ fidsout: fids.filter(function (id) {
              return id !== SELECTION.EXCLUDE;
            }).join(',') })));
          return;
        }

        // include some features in selection
        this.setFilterToken((yield provider.getFilterToken({ fidsin: fids.join(',') })));
      } catch (err) {
        console.log('Error create update token', err);
      }
    });

    function createFilterToken() {
      return _ref8.apply(this, arguments);
    }

    return createFilterToken;
  }(),


  /**
   * Get Application filter token
   * 
   * @returns {*}
   */
  getFilterToken: function getFilterToken() {
    return _application2.default.getFilterToken();
  },


  /**
   * @TODO add description
   */
  setSelectionFidsAll: function setSelectionFidsAll() {
    this.selectionFids.clear();
    this.selectionFids.add(SELECTION.ALL);

    /** @TODO add description */
    if (this.isGeoLayer()) {
      this.showAllOlSelectionFeatures();
    }

    /** @TODO add description */
    this.setSelection(true);
    if (this.state.filter.active) {
      this.createFilterToken();
    }
  },


  /**
   * @returns {Set<any>} stored selection `fids` 
   */
  getSelectionFids: function getSelectionFids() {
    return this.selectionFids;
  },


  /**
   * Invert current selection fids
   */
  invertSelectionFids: function invertSelectionFids() {
    var selection = this.selectionFids;

    /** @TODO add description */
    if (selection.has(SELECTION.EXCLUDE)) {
      selection.delete(SELECTION.EXCLUDE);
    } else if (selection.has(SELECTION.ALL)) {
      selection.delete(SELECTION.ALL);
    } else if (selection.size > 0) {
      selection.add(SELECTION.EXCLUDE);
    }

    /** @TODO add description */
    if (this.isGeoLayer()) {
      this.setInversionOlSelectionFeatures();
    }

    /** @TODO add description */
    if (this.state.filter.active) {
      this.createFilterToken();
    }

    this.setSelection(selection.size > 0);
  },


  /**
   * Check if feature id is present
   * 
   * @param fid feature id
   * 
   * @returns {boolean}
   */
  hasSelectionFid: function hasSelectionFid(fid) {
    var selection = this.selectionFids;

    /** @TODO add description */
    if (selection.has(SELECTION.ALL)) {
      return true;
    }

    /** @TODO add description */
    if (selection.has(SELECTION.EXCLUDE)) {
      return !selection.has(fid);
    }

    /** @TODO add description */
    return selection.has(fid);
  },


  /**
   * Include fid feature id to selection
   * 
   * @param fid
   * @param createToken
   * 
   * @returns {Promise<void>}
   */
  includeSelectionFid: function () {
    var _ref9 = _asyncToGenerator(function* (fid) {
      var createToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


      var selection = this.selectionFids;

      // whether fid is excluded from selection
      var is_excluded = selection.has(SELECTION.EXCLUDE) && selection.has(fid);

      // remove fid
      if (is_excluded) {
        selection.delete(fid);
      }

      // if the only one exclude set all selected
      if (is_excluded && 1 === selection.size) {
        this.setSelectionFidsAll();
      }

      // add to selction fid
      if (!is_excluded) {
        selection.add(fid);
      }

      /** @TODO add description */
      if (!is_excluded && !this.isSelectionActive()) {
        this.setSelection(true);
      }

      /** @TODO add description */
      if (this.isGeoLayer()) {
        this.setOlSelectionFeatureByFid(fid, 'add');
      }

      /** @TODO add description */
      if (createToken && this.state.filter.active) {
        yield this.createFilterToken();
      }
    });

    function includeSelectionFid(_x10) {
      return _ref9.apply(this, arguments);
    }

    return includeSelectionFid;
  }(),


  /**
   * Exclude fid to selection
   * 
   * @param fid
   * @param createToken
   * 
   * @returns {Promise<void>}
   */
  excludeSelectionFid: function () {
    var _ref10 = _asyncToGenerator(function* (fid) {
      var createToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


      var selection = this.selectionFids;

      /** @TODO add description */
      if (selection.has(SELECTION.ALL) || 0 === selection.size) {
        selection.clear();
        selection.add(SELECTION.EXCLUDE);
      }

      /** @TODO add description */
      if (selection.has(SELECTION.EXCLUDE)) {
        selection.add(fid);
      } else {
        selection.delete(fid);
      }

      /** @TODO add description */
      if (1 === selection.size && selection.has(SELECTION.EXCLUDE)) {
        this.setselectionFidsAll();
      }

      var isLastFeatureSelected = this.isGeoLayer() && this.setOlSelectionFeatureByFid(fid, 'remove');

      /** @TODO add description */
      if (createToken && this.state.filter.active) {
        yield this.createFilterToken();
      }

      /** @TODO add description */
      if (0 === selection.size || isLastFeatureSelected) {
        selection.clear();
        this.setSelection(false);
      }
    });

    function excludeSelectionFid(_x12) {
      return _ref10.apply(this, arguments);
    }

    return excludeSelectionFid;
  }(),


  /**
   * @param { Array }   fids
   * @param { boolean } createToken since 3.9.0
   * 
   * @returns { Promise<void> }
   */
  includeSelectionFids: function () {
    var _ref11 = _asyncToGenerator(function* () {
      var _this = this;

      var fids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var createToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      // pass false because eventually token filter creation need to be called after
      fids.forEach(function (fid) {
        return _this.includeSelectionFid(fid, false);
      });

      /** @TODO add description */
      if (createToken && this.state.filter.active) {
        yield this.createFilterToken();
      }
    });

    function includeSelectionFids() {
      return _ref11.apply(this, arguments);
    }

    return includeSelectionFids;
  }(),


  /**
   * Exclude fids from selection
   * 
   * @param { Array }   fids
   * @param { boolean } createToken since 3.9.0
   * 
   * @returns { Promise<void> }
   */
  excludeSelectionFids: function () {
    var _ref12 = _asyncToGenerator(function* () {
      var _this2 = this;

      var fids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var createToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      //pass false because eventually token filter creation need to be called after
      fids.forEach(function (fid) {
        return _this2.excludeSelectionFid(fid, false);
      });

      /** @TODO add description */
      if (createToken && this.state.filter.active) {
        yield this.createFilterToken();
      }
    });

    function excludeSelectionFids() {
      return _ref12.apply(this, arguments);
    }

    return excludeSelectionFids;
  }(),


  /**
   * Clear selection
   */
  clearSelectionFids: function () {
    var _ref13 = _asyncToGenerator(function* () {
      this.selectionFids.clear();
      // remove selected feature on map
      if (this.isGeoLayer()) {
        this.setOlSelectionFeatures();
      }
      // set selection false
      yield this.setSelection(false);
    });

    function clearSelectionFids() {
      return _ref13.apply(this, arguments);
    }

    return clearSelectionFids;
  }()
};

},{"core/i18n/i18n.service":9,"services/application":310,"services/gui":319,"utils/prompt":440}],33:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _relations = require('services/relations');

var _relations2 = _interopRequireDefault(_relations);

var _constant = require('app/constant');

var _QgsFilterToken = require('core/layers/utils/QgsFilterToken');

var _handleQueryResponse = require('utils/handleQueryResponse');

var _getDPI = require('utils/getDPI');

var _getExtentForViewAndSize = require('utils/getExtentForViewAndSize');

var _get_legend_params2 = require('utils/get_legend_params');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var G3WObject = require('core/g3wobject');

var _require = require('utils'),
    XHR = _require.XHR,
    appendParams = _require.appendParams,
    toRawType = _require.toRawType,
    getTimeoutPromise = _require.getTimeoutPromise;

var Parsers = require('utils/parsers');

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var Feature = require('core/layers/features/feature');
var Filter = require('core/layers/filter/filter');

var GETFEATUREINFO_IMAGE_SIZE = [101, 101];
var DPI = (0, _getDPI.getDPI)();

var is_defined = function is_defined(d) {
  return undefined !== d;
};

/**
 * ORIGINAL SOURCE: src/app/core/layers/providers/provider.js@3.8.6
 */

var DataProvider = function (_G3WObject) {
  _inherits(DataProvider, _G3WObject);

  function DataProvider() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, DataProvider);

    var _this = _possibleConstructorReturn(this, (DataProvider.__proto__ || Object.getPrototypeOf(DataProvider)).call(this));

    _this._isReady = false;
    _this._name = 'provider';
    _this._layer = options.layer;
    _this._hasFieldsStartWithNotPermittedKey = undefined;
    return _this;
  }

  _createClass(DataProvider, [{
    key: 'getLayer',
    value: function getLayer() {
      return this._layer;
    }
  }, {
    key: 'setLayer',
    value: function setLayer(layer) {
      this._layer = layer;
    }
  }, {
    key: 'getFeatures',
    value: function getFeatures() {
      console.log('overwriteby single provider');
    }
  }, {
    key: 'query',
    value: function query() {
      console.log('overwriteby single provider');
    }
  }, {
    key: 'setReady',
    value: function setReady(bool) {
      this._isReady = bool;
    }
  }, {
    key: 'isReady',
    value: function isReady() {
      return this._isReady;
    }
  }, {
    key: 'error',
    value: function error() {}
  }, {
    key: 'isValid',
    value: function isValid() {
      console.log('overwriteby single provider');
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this._name;
    }

    /**
     * Transform xml from server to actual queryresult component
     */

  }, {
    key: 'handleQueryResponseFromServer',
    value: function handleQueryResponseFromServer(response, projections) {
      var layers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [this._layer];
      var wms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      return (0, _handleQueryResponse.handleQueryResponse)({ response: response, projections: projections, layers: layers, wms: wms });
    }

    /**
     * @returns {number} set timeout for query
     */

  }, {
    key: 'getQueryResponseTimeoutKey',
    value: function getQueryResponseTimeoutKey() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
          _ref$layers = _ref.layers,
          layers = _ref$layers === undefined ? [this._layer] : _ref$layers,
          resolve = _ref.resolve,
          query = _ref.query;

      return getTimeoutPromise({
        resolve: resolve,
        data: {
          data: Parsers.response.utils.getTimeoutData(layers),
          query: query
        }
      });
    }
  }]);

  return DataProvider;
}(G3WObject);

var Providers = {

  /**
   * ORIGINAL SOURCE: src/app/core/layers/providers/geojsonprovider.js@3.8.6
   */
  geojson: function (_DataProvider) {
    _inherits(GEOJSONDataProvider, _DataProvider);

    function GEOJSONDataProvider() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, GEOJSONDataProvider);

      var _this2 = _possibleConstructorReturn(this, (GEOJSONDataProvider.__proto__ || Object.getPrototypeOf(GEOJSONDataProvider)).call(this, options));

      _this2._name = 'geojson';
      _this2.provider = options.provider;
      return _this2;
    }

    _createClass(GEOJSONDataProvider, [{
      key: 'query',
      value: function query() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var d = $.Deferred();
        d.resolve([]);
        return d.promise();
      }
    }, {
      key: 'getFeatures',
      value: function getFeatures() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var d = $.Deferred();
        var parser = new ol.format.GeoJSON();
        var params = {
          featureProjection: opts.mapProjection,
          dataProjection: opts.projection || 'EPSG:4326'
          // defaultDataProjection: projection // ol v. 4.5
        };
        if (opts.data) {
          d.resolve(parser.readFeatures(opts.data, params));
        } else {
          $.get({ url: opts.url || this.getLayer().get('source').url }).then(function (response) {
            d.resolve(parser.readFeatures(response.results, params));
          }).fail(function (err) {
            d.reject(err);
          });
        }
        return d.promise();
      }
    }, {
      key: 'getDataTable',
      value: function getDataTable() {
        var _this3 = this;

        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            page = _ref2.page;

        var d = $.Deferred();
        this.getFeatures().then(function () {
          d.resolve(_this3._features);
        }).fail(function (err) {
          d.reject(err);
        });
        return d.promise();
      }

      /**
       * @TODO check if deprecated (broken and unusued code ?)
       */

    }, {
      key: 'digestFeaturesForTable',
      value: function digestFeaturesForTable() {
        return {
          headers: [],
          features: []
        };
      }
    }]);

    return GEOJSONDataProvider;
  }(DataProvider),

  /**
   * ORIGINAL SOURCE: src/app/core/layers/providers/qgisprovider.js@3.8.6
   */
  qgis: function (_DataProvider2) {
    _inherits(QGISProvider, _DataProvider2);

    function QGISProvider() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, QGISProvider);

      var _this4 = _possibleConstructorReturn(this, (QGISProvider.__proto__ || Object.getPrototypeOf(QGISProvider)).call(this));

      _this4._name = 'qgis';
      _this4._layer = options.layer || {};
      _this4._projections = { map: null, layer: null };
      _this4._queryUrl = _this4._layer.getUrl('query'); // url referred to query
      _this4._filtertokenUrl = _this4._layer.getUrl('filtertoken'); // filtertokenurl
      _this4._layerName = _this4._layer.getName() || null; // get layer name from QGIS layer, because the query is proxied from g3w-server
      _this4._infoFormat = _this4._layer.getInfoFormat() || 'application/vnd.ogc.gml';

      /** @since 3.9.0 */
      _this4.saveFilterToken = _QgsFilterToken.QgsFilterToken.save.bind(null, _this4._filtertokenUrl);
      /** @since 3.9.0 */
      _this4.applyFilterToken = _QgsFilterToken.QgsFilterToken.apply.bind(null, _this4._filtertokenUrl);
      /** @since 3.9.0 */
      _this4.deleteFilterToken = _QgsFilterToken.QgsFilterToken.delete.bind(null, _this4._filtertokenUrl);
      /** @since 3.9.0 */
      _this4.getFilterToken = _QgsFilterToken.QgsFilterToken.getToken.bind(null, _this4._filtertokenUrl);
      return _this4;
    }

    /**
     * @param { Object } opts
     * @param opts.field
     * @param opts.raw
     * @param opts.suggest
     * @param opts.unique
     * @param opts.formatter
     * @param opts.queryUrl
     * @param opts.ordering
     * @param opts.fformatter since 3.9.0
     * @param opts.ffield     since 3.9.1
     * 
     * @returns {Promise<unknown>}
     */


    _createClass(QGISProvider, [{
      key: 'getFilterData',
      value: function () {
        var _ref3 = _asyncToGenerator(function* () {
          var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              field = _ref4.field,
              _ref4$raw = _ref4.raw,
              raw = _ref4$raw === undefined ? false : _ref4$raw,
              suggest = _ref4.suggest,
              unique = _ref4.unique,
              _ref4$formatter = _ref4.formatter,
              formatter = _ref4$formatter === undefined ? 1 : _ref4$formatter,
              queryUrl = _ref4.queryUrl,
              ordering = _ref4.ordering,
              fformatter = _ref4.fformatter,
              ffield = _ref4.ffield;

          var params = {
            field: field,
            suggest: suggest,
            ordering: ordering,
            formatter: formatter,
            unique: unique,
            fformatter: fformatter,
            ffield: ffield,
            filtertoken: _applicationState2.default.tokens.filtertoken
          };
          try {
            var url = queryUrl ? queryUrl : this._layer.getUrl('data');
            var response = field // check `field` parameter
            ? yield XHR.post({ url: url, contentType: 'application/json', data: JSON.stringify(params) }) // since g3w-admin@v3.7
            : yield XHR.get({ url: url, params: params }); // BACKCOMP (`unique` and `ordering` were only GET parameters)

            // vector layer
            if ('table' !== this._layer.getType()) {
              this.setProjections();
            }

            if (raw) return response;
            if (unique && response.result) return response.data;
            if (fformatter && response.result) return response;

            if (response.result) {
              return {
                data: Parsers.response.get('application/json')({
                  layers: [this._layer],
                  response: response.vector.data,
                  projections: this._projections
                })
              };
            }
          } catch (e) {
            return Promise.reject(e);
          }
          return Promise.reject();
        });

        function getFilterData() {
          return _ref3.apply(this, arguments);
        }

        return getFilterData;
      }()
    }, {
      key: 'setProjections',
      value: function setProjections() {
        // COMMENTED LAYER PROJECTION: EXPECT ONLY RESULT IN MAP PROJECTION
        // this._projections.layer = this._layer.getProjection();
        this._projections.map = this._layer.getMapProjection() || this._projections.layer;
      }

      /**
       * Query by filter
       * 
       * @param { boolean } opts.raw           whether to get raw response
       * @param { number }  opts.feature_count maximum feature for request
       * @param { string }  opts.queryUrl      url for request data
       * @param { Array }   opts.layers        Array or request layers
       * @param opts.I                         wms request parameter 
       * @param opts.J                         wms request parameter 
       */

    }, {
      key: 'query',
      value: function query() {
        var _this5 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var d = $.Deferred();

        var is_table = 'table' === this._layer.getType();

        // in case not alphanumeric layer set projection
        if (!is_table) {
          this.setProjections();
        }

        var layers = opts.layers ? opts.layers.map(function (layer) {
          return layer.getWMSLayerName();
        }).join(',') : this._layer.getWMSLayerName();

        var _opts$filter = opts.filter,
            filter = _opts$filter === undefined ? null : _opts$filter;

        filter = filter && Array.isArray(filter) ? filter : [filter];

        // check if geometry filter. If not i have to remove projection layer
        if (filter && filter[0].getType() !== 'geometry') {
          this._projections.layer = null;
        }

        if (filter) {

          filter = filter.map(function (filter) {
            return filter.get();
          }).filter(function (value) {
            return value;
          });

          XHR.get({
            url: opts.queryUrl || this._queryUrl,
            params: {
              SERVICE: 'WMS',
              VERSION: '1.3.0',
              REQUEST: 'GetFeatureInfo',
              filtertoken: _applicationState2.default.tokens.filtertoken,
              LAYERS: layers,
              QUERY_LAYERS: layers,
              INFO_FORMAT: this._infoFormat,
              FEATURE_COUNT: opts.feature_count || 10,
              CRS: is_table ? _applicationState2.default.map.epsg : this._projections.map.getCode(),
              I: opts.I,
              J: opts.J,
              FILTER: filter.length ? filter.join(';') : undefined,
              WITH_GEOMETRY: !is_table
            }
          }).then(function (response) {
            if (opts.raw) {
              d.resolve(response);
            } else {
              d.resolve(_this5.handleQueryResponseFromServer(response, _this5._projections, opts.layers));
            }
          }).catch(function (e) {
            return d.reject(e);
          });
        } else {
          d.reject();
        }

        return d.promise();
      }

      /**
       * get layer config
       */

    }, {
      key: 'getConfig',
      value: function getConfig() {
        var d = $.Deferred();
        var url = this._layer.getUrl('config');
        if (url) {
          $.get(url).then(function (config) {
            return d.resolve(config);
          }).fail(function (e) {
            return d.reject(e);
          });
        } else {
          d.reject('not valid url');
        }
        return d.promise();
      }
    }, {
      key: 'getWidgetData',
      value: function getWidgetData() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return $.get(this._layer.getUrl('widget')[opts.type], { fields: opts.fields });
      }
    }, {
      key: 'unlock',


      /**
       * unlock feature
       */
      value: function unlock() {
        var d = $.Deferred();
        $.post(this._layer.getUrl('unlock')).then(function (response) {
          return d.resolve(response);
        }).fail(function (e) {
          return d.reject(e);
        });
        return d.promise();
      }

      /**
       * commit function (checks for editing) 
       */

    }, {
      key: 'commit',
      value: function commit(commitItems) {
        var d = $.Deferred();
        $.post({
          url: this._layer.getUrl('commit'),
          data: JSON.stringify(commitItems),
          contentType: 'application/json'
        }).then(function (response) {
          return d.resolve(response);
        }).fail(function (e) {
          return d.reject(e);
        });
        return d.promise();
      }

      /**
       * Load editing features (Read / Write)
       */

    }, {
      key: 'getFeatures',
      value: function getFeatures() {
        var _this6 = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var d = $.Deferred();

        // filter null values
        Object.entries(params).forEach(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
              key = _ref6[0],
              value = _ref6[1];

          if ([null, undefined].includes(value)) {
            delete params[key];
          }
        });

        var urlParams = $.param(params);

        if (!options.editing) {
          $.get({
            url: this._layer.getUrl('data') + (urlParams ? '?' + urlParams : ''),
            contentType: 'application/json'
          }).then(function (_ref7) {
            var vector = _ref7.vector;

            d.resolve({ data: vector.data, count: vector.count });
          }).fail(function (e) {
            return d.reject(e);
          });

          return d.promise();
        }
        // check if data are requested in read or write mode;
        var url = void 0;
        // editing mode
        var promise = void 0;
        url = this._layer.getUrl('editing');
        if (!url) {
          d.reject('Url not valid');
          return;
        }
        url += urlParams ? '?' + urlParams : '';
        var filter = options.filter || null;

        if (!filter) {
          promise = XHR.post({
            url: url,
            contentType: 'application/json'
          });
        } else if (is_defined(filter.bbox)) {
          // bbox filter
          promise = XHR.post({
            url: url,
            data: JSON.stringify({
              in_bbox: filter.bbox.join(','),
              filtertoken: _applicationState2.default.tokens.filtertoken
            }),
            contentType: 'application/json'
          });
        } else if (is_defined(filter.fid)) {
          // fid filter
          promise = _relations2.default.getRelations(filter.fid);
        } else if (filter.field) {
          promise = XHR.post({
            url: url,
            data: JSON.stringify(filter),
            contentType: 'application/json'
          });
        } else if (is_defined(filter.fids)) {
          promise = XHR.get({
            url: url,
            params: filter
          });
        } else if (is_defined(filter.nofeatures)) {
          promise = XHR.post({
            url: url,
            data: JSON.stringify({
              field: (filter.nofeatures_field || 'id') + '|eq|__G3W__NO_FEATURES__'
            }),
            contentType: 'application/json'
          });
        }

        promise.then(function (_ref8) {
          var vector = _ref8.vector,
              result = _ref8.result,
              featurelocks = _ref8.featurelocks;

          // skip when server responde with false result (error)
          if (false === result) {
            d.reject({ message: t("info.server_error") });
            return;
          }
          var features = [];
          var lockIds = featurelocks.map(function (lock) {
            return lock.featureid;
          });
          Parsers[_this6._layer.getType()].get({ type: 'json' })(vector.data, 'NoGeometry' === vector.geometrytype ? {} : { crs: _this6._layer.getCrs() /*mapCrs: this._layer.getMapCrs()*/ }).forEach(function (feature) {
            if (lockIds.indexOf('' + feature.getId()) > -1) {
              features.push(new Feature({ feature: feature }));
            }
          });
          // resolves with features locked and requested
          d.resolve({
            count: vector.count, // real number of features that request will return
            features: features,
            featurelocks: featurelocks
          });
        }).catch(function (e) {
          return d.reject({ message: t("info.server_error") });
        });

        return d.promise();
      }
    }]);

    return QGISProvider;
  }(DataProvider),

  /**
   * ORIGINAL SOURCE: src/app/core/layers/providers/wmsprovider.js@3.8.6
   */
  wms: function (_DataProvider3) {
    _inherits(WMSDataProvider, _DataProvider3);

    function WMSDataProvider() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, WMSDataProvider);

      var _this7 = _possibleConstructorReturn(this, (WMSDataProvider.__proto__ || Object.getPrototypeOf(WMSDataProvider)).call(this, options));

      _this7._name = 'wms';
      _this7._projections = { map: null, layer: null };
      return _this7;
    }

    /**
     * @TODO move into WMSDataProvider::query
     */


    _createClass(WMSDataProvider, [{
      key: '_getRequestParameters',
      value: function _getRequestParameters(_ref9) {
        var layers = _ref9.layers,
            feature_count = _ref9.feature_count,
            coordinates = _ref9.coordinates,
            infoFormat = _ref9.infoFormat,
            _ref9$query_point_tol = _ref9.query_point_tolerance,
            query_point_tolerance = _ref9$query_point_tol === undefined ? _constant.QUERY_POINT_TOLERANCE : _ref9$query_point_tol,
            resolution = _ref9.resolution,
            size = _ref9.size;


        var layerNames = layers ? layers.map(function (layer) {
          return layer.getWMSInfoLayerName();
        }).join(',') : this._layer.getWMSInfoLayerName();

        var extent = (0, _getExtentForViewAndSize.getExtentForViewAndSize)(coordinates, resolution, 0, size);

        var is_map_tolerance = 'map' === query_point_tolerance.unit;

        /**
         * Add LEGEND_ON and/or LEGEND_OFF in case of layer that has categories
         * It used to solve issue related to GetFeatureInfo feature layer categories
         * that are unchecked (not visisble) at QGIS project setting
         */
        var LEGEND_PARAMS = {
          LEGEND_ON: [],
          LEGEND_OFF: []
        };

        layers.forEach(function (layer) {
          if (layer.getCategories()) {
            var _get_legend_params = (0, _get_legend_params2.get_legend_params)(layer),
                LEGEND_ON = _get_legend_params.LEGEND_ON,
                LEGEND_OFF = _get_legend_params.LEGEND_OFF;

            if (LEGEND_ON) LEGEND_PARAMS.LEGEND_ON.push(LEGEND_ON);
            if (LEGEND_OFF) LEGEND_PARAMS.LEGEND_OFF.push(LEGEND_OFF);
          }
        });

        return {
          SERVICE: 'WMS',
          VERSION: '1.3.0',
          REQUEST: 'GetFeatureInfo',
          CRS: this._projections.map.getCode(),
          LAYERS: layerNames,
          QUERY_LAYERS: layerNames,
          filtertoken: _applicationState2.default.tokens.filtertoken,
          INFO_FORMAT: infoFormat,
          FEATURE_COUNT: feature_count,
          WITH_GEOMETRY: true,
          DPI: DPI,
          FILTER_GEOM: is_map_tolerance ? new ol.format.WKT().writeGeometry(ol.geom.Polygon.fromCircle(new ol.geom.Circle(coordinates, query_point_tolerance.value))) : undefined,
          FI_POINT_TOLERANCE: is_map_tolerance ? undefined : query_point_tolerance.value,
          FI_LINE_TOLERANCE: is_map_tolerance ? undefined : query_point_tolerance.value,
          FI_POLYGON_TOLERANCE: is_map_tolerance ? undefined : query_point_tolerance.value,
          G3W_TOLERANCE: is_map_tolerance ? undefined : query_point_tolerance.value * resolution,
          I: is_map_tolerance ? undefined : Math.floor((coordinates[0] - extent[0]) / resolution), // x
          J: is_map_tolerance ? undefined : Math.floor((extent[3] - coordinates[1]) / resolution), // y
          WIDTH: size[0],
          HEIGHT: size[1],
          LEGEND_ON: LEGEND_PARAMS.LEGEND_ON.length ? LEGEND_PARAMS.LEGEND_ON.join(';') : undefined,
          LEGEND_OFF: LEGEND_PARAMS.LEGEND_OFF.length ? LEGEND_PARAMS.LEGEND_OFF.join(';') : undefined,
          STYLES: '',
          BBOX: ('ne' === this._projections.map.getAxisOrientation().substr(0, 2) ? [extent[1], extent[0], extent[3], extent[2]] : extent).join(',')
        };
      }
    }, {
      key: 'query',
      value: function query() {
        var _this8 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var d = $.Deferred();

        var infoFormat = this._layer.getInfoFormat() || 'application/vnd.ogc.gml';
        this._projections.map = this._layer.getMapProjection() || this._layer.getProjection();

        var _opts$layers = opts.layers,
            layers = _opts$layers === undefined ? [this._layer] : _opts$layers,
            _opts$feature_count = opts.feature_count,
            feature_count = _opts$feature_count === undefined ? 10 : _opts$feature_count,
            _opts$size = opts.size,
            size = _opts$size === undefined ? GETFEATUREINFO_IMAGE_SIZE : _opts$size,
            _opts$coordinates = opts.coordinates,
            coordinates = _opts$coordinates === undefined ? [] : _opts$coordinates,
            resolution = opts.resolution,
            query_point_tolerance = opts.query_point_tolerance;


        var method = layers[0].isExternalWMS() || !/^\/ows/.test(layers[0].getQueryUrl()) ? 'GET' : layers[0].getOwsMethod();

        var handleResponse = function handleResponse(response) {
          d.resolve({
            data: _this8.handleQueryResponseFromServer(response, _this8._projections, layers),
            query: { coordinates: coordinates, resolution: resolution }
          });
        };

        // base request
        var base_params = {
          url: layers[0].getQueryUrl(),
          params: this._getRequestParameters({
            layers: layers,
            feature_count: feature_count,
            coordinates: coordinates,
            infoFormat: infoFormat,
            query_point_tolerance: query_point_tolerance,
            resolution: resolution,
            size: size
          })
        };

        var timeoutKey = this.getQueryResponseTimeoutKey({
          layers: layers,
          resolve: d.resolve,
          query: { coordinates: coordinates, resolution: resolution }
        });

        if (layers[0].useProxy()) {
          layers[0].getDataProxyFromServer('wms', _extends({}, base_params, { method: method, headers: { 'Content-Type': infoFormat } })).then(handleResponse);
        } else {
          this[method](_extends({}, base_params, { layers: layers })).then(handleResponse).catch(function (err) {
            return d.reject(err);
          }).finally(function () {
            return clearTimeout(timeoutKey);
          });
        }

        return d.promise();
      }

      /**
       * @TODO deprecate in favour of a global XHR
       */

    }, {
      key: 'GET',
      value: function GET() {
        var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            url = _ref10.url,
            params = _ref10.params;

        var source = url.split('SOURCE');
        return XHR.get({
          url: appendParams(source.length ? source[0] : url, params) + (source.length > 1 ? '&SOURCE' + source[1] : '')
        });
      }

      /**
       * @TODO deprecate in favour of a global XHR
       */

    }, {
      key: 'POST',
      value: function POST() {
        var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            url = _ref11.url,
            params = _ref11.params;

        return XHR.post({ url: url, data: params });
      }
    }]);

    return WMSDataProvider;
  }(DataProvider),

  /**
   * ORIGINAL SOURCE: src/app/core/layers/providers/wmsprovider.js@3.8.6
   */
  wfs: function (_DataProvider4) {
    _inherits(WFSDataProvider, _DataProvider4);

    function WFSDataProvider() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, WFSDataProvider);

      var _this9 = _possibleConstructorReturn(this, (WFSDataProvider.__proto__ || Object.getPrototypeOf(WFSDataProvider)).call(this, options));

      _this9._name = 'wfs';
      return _this9;
    }

    /**
     * @TODO check if deprecated
     */


    _createClass(WFSDataProvider, [{
      key: 'getData',
      value: function getData() {
        return $.Deferred().promise();
      }

      // query method

    }, {
      key: 'query',
      value: function query() {
        var _this10 = this;

        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


        var d = $.Deferred();

        var _opts$reproject = opts.reproject,
            reproject = _opts$reproject === undefined ? false : _opts$reproject,
            _opts$feature_count2 = opts.feature_count,
            feature_count = _opts$feature_count2 === undefined ? 10 : _opts$feature_count2,
            _opts$layers2 = opts.layers,
            layers = _opts$layers2 === undefined ? [this._layer] : _opts$layers2,
            filter = opts.filter;


        params.MAXFEATURES = feature_count;

        var timeoutKey = this.getQueryResponseTimeoutKey({
          layers: layers,
          resolve: d.resolve,
          query: {}
        });

        this._doRequest(filter, params, layers, reproject).then(function (response) {
          var data = _this10.handleQueryResponseFromServer(response, {
            map: _this10._layer.getMapProjection(),
            layer: reproject ? _this10._layer.getProjection() : null
          }, layers, false // wms parameter
          );
          // sanitize in case of nil:true
          data.forEach(function (layer) {
            (layer.features || []).forEach(function (feature) {
              Object.entries(feature.getProperties()).forEach(function (_ref12) {
                var _ref13 = _slicedToArray(_ref12, 2),
                    attribute = _ref13[0],
                    value = _ref13[1];

                if ('Object' === toRawType(value) && value['xsi:nil']) {
                  feature.set(attribute, 'NULL');
                }
              });
            });
          });
          d.resolve({ data: data });
        }).fail(function (error) {
          return d.reject(error);
        }).always(function () {
          clearTimeout(timeoutKey);
        });

        return d.promise();
      }
    }, {
      key: '_post',


      /**
       * @TODO deprecate in favour of a global XHR
       */
      value: function _post(url, params) {
        var d = $.Deferred();
        $.post(url.match(/\/$/) ? url : url + '/', params).then(function (response) {
          return d.resolve(response);
        }).fail(function (error) {
          return d.reject(error);
        });
        return d.promise();
      }
    }, {
      key: '_get',


      /**
       * @TODO deprecate in favour of a global XHR
       * 
       * get request
       */
      value: function _get(url, params) {
        var d = $.Deferred();
        $.get((url.match(/\/$/) ? url : url + '/') + '?' + $.param(params)) // transform parameters
        .then(function (response) {
          return d.resolve(response);
        }).fail(function (error) {
          return d.reject(error);
        });
        return d.promise();
      }
    }, {
      key: '_doRequest',


      /**
       * @TODO move into WFSDataProvider::query
       * 
       * Request to server
       */
      value: function _doRequest(filter) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var layers = arguments[2];
        var reproject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

        var d = $.Deferred();

        filter = filter || new Filter({});

        // skip when..
        if (!filter) {
          d.reject();
          return d.promise();
        }

        var layer = layers ? layers[0] : this._layer;

        params = Object.assign(params, {
          SERVICE: 'WFS',
          VERSION: '1.1.0',
          REQUEST: 'GetFeature',
          TYPENAME: layers ? layers.map(function (layer) {
            return layer.getWFSLayerName();
          }).join(',') : layer.getWFSLayerName(),
          OUTPUTFORMAT: layer.getInfoFormat(),
          SRSNAME: reproject ? layer.getProjection().getCode() : this._layer.getMapProjection().getCode()
        });

        var ol_filter = void 0;

        switch (filter.getType()) {

          case 'all':
            return this._post(layer.getQueryUrl(), params);

          case 'bbox':
            ol_filter = ol.format.filter.bbox('the_geom', filter.get());
            break;

          case 'geometry':
            //speatial methos. <inteserct, within>
            var _filter$getConfig = filter.getConfig(),
                _filter$getConfig$spa = _filter$getConfig.spatialMethod,
                spatialMethod = _filter$getConfig$spa === undefined ? 'intersects' : _filter$getConfig$spa;

            ol_filter = ol.format.filter[spatialMethod]('the_geom', filter.get());
            break;

          case 'expression':
            ol_filter = null;
            break;

        }

        ('GET' === layer.getOwsMethod() && 'geometry' !== filter.getType() ? this._get : this._post)(layer.getQueryUrl(), _extends({}, params, {
          FILTER: ('(' + new ol.format.WFS().writeGetFeature({
            featureTypes: [layer],
            filter: ol_filter
          }).children[0].innerHTML + ')').repeat(layers ? layers.length : 1)
        })).then(function (response) {
          return d.resolve(response);
        }).fail(function (err) {
          if (err.status === 200) {
            d.resolve(err.responseText);
          } else {
            d.reject(err);
          }
        });

        return d.promise();
      }
    }]);

    return WFSDataProvider;
  }(DataProvider)

  /**
   * ORIGINAL SOURCE: src/app/core/layers/providers/kmlprovider.js@3.8.6
   */
  // kml: class KMLDataProvider extends DataProvider {

  //   constructor(options = {}) {
  //     super(options);
  //     this._name = 'kml';
  //   }

  //   getData() {
  //     return $.Deferred().promise();
  //   }

  // },

  /**
   * ORIGINAL SOURCE: src/app/core/layers/providers/xmlprovider.js@3.8.6
   */
  // xml: class XMLDataProvider extends DataProvider {

  //   constructor(options = {}) {
  //     super();
  //     this._name = 'xml';
  //   }

  //   getData() {
  //     return $.Deferred().promise();
  //   }

  // },


};

var ProviderFactory = function () {
  function ProviderFactory() {
    _classCallCheck(this, ProviderFactory);

    this._providers = {

      'QGIS': {
        'virtual': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'postgres': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'oracle': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'mssql': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'spatialite': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'ogr': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'delimitedtext': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis,
          filtertoken: Providers.qgis
        },
        'wmst': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: null,
          search: null
        },
        'wcs': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: null,
          search: null
        },
        'wms': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: null,
          search: null
        },
        'wfs': {
          query: Providers.wms,
          filter: Providers.wfs,
          data: Providers.qgis,
          search: Providers.qgis
        },
        'gdal': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        },
        /** @since 3.9.0 */
        'postgresraster': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        },
        'vector-tile': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        },
        'vectortile': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        },
        'arcgismapserver': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        },
        'mdal': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        }
      },

      'OGC': {
        'wms': {
          query: Providers.wms,
          filter: null,
          data: null,
          search: null
        }
      },

      'G3WSUITE': {
        'geojson': {
          query: Providers.geojson,
          filter: null,
          data: Providers.geojson,
          search: null
        }
      }

    };
  }

  _createClass(ProviderFactory, [{
    key: 'build',
    value: function build(providerType, serverType, sourceType, options) {
      // return instance of selected provider
      var providerClass = this.get(providerType, serverType, sourceType);
      return providerClass ? new providerClass(options) : null;
    }
  }, {
    key: 'get',
    value: function get(providerType, serverType, sourceType) {
      return this._providers[serverType][sourceType][providerType];
    }
  }]);

  return ProviderFactory;
}();

module.exports = new ProviderFactory();

},{"app/constant":5,"core/g3wobject":8,"core/i18n/i18n.service":9,"core/layers/features/feature":11,"core/layers/filter/filter":15,"core/layers/utils/QgsFilterToken":35,"services/relations":323,"store/application-state":328,"utils":419,"utils/getDPI":393,"utils/getExtentForViewAndSize":395,"utils/get_legend_params":414,"utils/handleQueryResponse":416,"utils/parsers":439}],34:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('constant');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Layer = require('core/layers/layer');
var FeaturesStore = require('core/layers/features/featuresstore');
var Feature = require('core/layers/features/feature');

/** @deprecated */
var _cloneDeep = require('lodash.clonedeep');

/**
 * Function to wait for predicates.
 * 
 * @param { () => Boolean } predicate - A function that returns a bool
 * @param { number }        [timeout] - Optional maximum waiting time in ms after rejected
 * 
 * @see https://gist.github.com/chrisjhoughton/7890239?permalink_comment_id=4411125#gistcomment-4411125
 */
function _waitFor(predicate, timeout) {
  return new Promise(function (resolve, reject) {
    var check = function check() {
      if (!predicate()) return;
      clearInterval(interval);
      resolve();
    };
    var interval = setInterval(check, 100);
    check();
    if (timeout) {
      setTimeout(function () {
        clearInterval(interval);reject();
      }, timeout);
    }
  });
}

function _createAttributesFromFields(fields) {
  var attributes = {};
  fields.forEach(function (field) {
    if ('child' === field.type) {
      attributes[field.name] = _createAttributesFromFields(field.fields);
    } else if ('null' === field.value) {
      field.value = null;
    }
    attributes[field.name] = field.value;
  });
  return attributes;
}

/**
 * Base Layer that support editing
 */
function TableLayer() {
  var _this3 = this;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  /**
   * Hook setters methods
   */
  this.setters = {
    clearFeatures: this._clearFeatures,
    addFeature: this._addFeature,
    deleteFeature: this._deleteFeature,
    updateFeature: this._updateFeature,
    setFeatures: this._setFeatures,
    setColor: this._setColor,

    /**
     * get data from every sources (server, wms, etc..)
     * through provider related to featuresstore
     *
     * @param {*} options
     */
    getFeatures: function getFeatures() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var d = $.Deferred();
      this._featuresstore.getFeatures(options).then(function (promise) {
        promise.then(function (features) {
          _this.emit('getFeatures', features);
          return d.resolve(features);
        }).fail(d.reject);
      }).fail(d.reject);

      return d.promise();
    },
    commit: function commit(commitItems) {
      var _this2 = this;

      var d = $.Deferred();
      this._featuresstore.commit(commitItems).then(function (promise) {
        promise.then(function (response) {
          if (response) {
            response.result && _this2.syncSelectionFilterFeatures(commitItems);
          }
          d.resolve(response);
        }).fail(d.reject);
      }).fail(d.reject);
      return d.promise();
    }
  };

  /**
   * EDITING API URL: /api/vector/<type of request: data/editing/config>/<project_type>/<project_id>/<layer_id>
   *
   * @example /api/vector/config/qdjango/10/points273849503023
   */
  this.type = Layer.LayerTypes.TABLE;

  /**
   * color
   */
  this._color = null;

  options.project = options.project || _projects2.default.getCurrentProject();

  /**
   * @FIXME add description
   */
  this.layerId = config.id;

  /**
   * add urls
   */
  config.urls = config.urls || {};

  /**
   * add editing configurations
   */
  config.editing = {
    fields: [] // editing fields
  };

  // call base layer
  base(this, config, options);

  /**
   * @FIXME set a default value
   *
   * get configuration from server if is editable
   */
  this._editatbleLayer;

  var is_editable = this.isEditable();

  // editable layer -- > update layer config info
  if (is_editable) {
    this.layerForEditing = new Promise(function (resolve, reject) {
      _this3.getEditingConfig() // get editing layer config
      .then(_asyncToGenerator(function* () {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            vector = _ref2.vector,
            _ref2$constraints = _ref2.constraints,
            constraints = _ref2$constraints === undefined ? {} : _ref2$constraints,
            capabilities = _ref2.capabilities;

        yield _waitFor(function () {
          return window.g3wsdk.core.hasOwnProperty('editing');
        }, _constant.TIMEOUT); // wait unitil "editing" plugin is loaded
        _this3.config.editing.fields = vector.fields;
        _this3.config.editing.format = vector.format;
        _this3.config.editing.constraints = constraints;
        _this3.config.editing.capabilities = capabilities || window.g3wsdk.constant.DEFAULT_EDITING_CAPABILITIES; // set default editing capabilities
        _this3.config.editing.form = { perc: null }; // set editing form `perc` to null at beginning
        _this3.config.editing.style = vector.style; // get vector layer style
        if (vector.style) {
          // set vector layer color 
          _this3.setColor(vector.style.color);
        }
        _this3._setOtherConfigParameters(vector);
        _this3._editor = new window.g3wsdk.core.editing.Editor({ layer: _this3 }); // create an instance of editor
        resolve(_this3);
        _this3.setReady(true); // set ready
      })).fail(function (err) {
        reject(_this3);
        _this3.setReady(false);
      });
    });
  }

  // editable layer --> add editing state info
  if (is_editable) {
    this.state = _extends({}, this.state, {
      editing: {
        started: false,
        modified: false,
        ready: false
      }
    });
  }

  /**
   * Feature wrapper (to store feature)
   */
  this._featuresstore = new FeaturesStore({ provider: this.providers.data });
}

inherit(TableLayer, Layer);

var proto = TableLayer.prototype;

/**
 * sync selection
 *
 * @param {*} commitItems
 */
proto.syncSelectionFilterFeatures = function (commitItems) {
  try {
    var layer = _catalogLayers2.default.getLayerById(this.getId());
    //if layer has geometry
    if (layer.isGeoLayer()) {
      commitItems.update.forEach(function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref3.id,
            geometry = _ref3.geometry;

        if (layer.getOlSelectionFeature(id)) {
          layer.updateOlSelectionFeature({ id: id, geometry: geometry });
        }
      });
    }
    commitItems.delete.forEach(function (id) {
      if (layer.hasSelectionFid(id)) {
        layer.excludeSelectionFid(id);
      }
    });
  } catch (err) {}
};

proto.setFormPercentage = function (perc) {
  this.config.editing.form.perc = perc;
};

proto.getFormPercentage = function () {
  return this.config.editing.form.perc;
};

proto.clone = function () {
  return _cloneDeep(this);
};

proto.cloneFeatures = function () {
  return this._featuresstore.clone();
};

proto.setVectorUrl = function (url) {
  this.vectorUrl = url;
};

proto.setProjectType = function (projectType) {
  this.projectType = projectType;
};

proto._setColor = function (color) {
  this._color = color;
};

proto.getColor = function () {
  return this._color;
};

proto.readFeatures = function () {
  return this._featuresstore.readFeatures();
};

/**
 * Get editing layer
 *
 * @param vectorurl
 * @param project_type
 *
 * @returns { Promise }
 */
proto.getLayerForEditing = _asyncToGenerator(function* () {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      vectorurl = _ref5.vectorurl,
      project_type = _ref5.project_type;

  if (vectorurl) {
    this.setVectorUrl(vectorurl);
  }

  if (project_type) {
    this.setProjectType(project_type);
  }

  this.setEditingUrl();

  try {
    return yield this.clone().layerForEditing; // cloned editable layer
  } catch (err) {
    return err;
  }
});

/**
 *
 * @returns return ol source of features
 */
proto.getEditingSource = function () {
  return this._editor.getEditingSource();
};

/**
 *
 * @returns Array of features
 */
proto.readEditingFeatures = function () {
  return this._editor.readEditingFeatures();
};

proto.getEditingLayer = function () {
  return this;
};

/**
 * @returns whether editingLayer is useful to get editingstyle
 */
proto.isEditingLayer = function () {
  return !!this.config.editing;
};

proto.getEditingStyle = function () {
  return this.config.editing.style;
};

proto.setEditingStyle = function () {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config.editing.style = style;
};

proto.getEditingConstrains = function () {
  return this.config.editing.constraints;
};

proto.getEditingCapabilities = function () {
  return this.config.editing.capabilities;
};

proto.isFieldRequired = function (fieldName) {
  var required = false;
  this.getEditingFields().forEach(function (field) {
    if (fieldName === field.name) {
      required = !!field.validate.required;
      return false;
    }
  });
  return required;
};

/**
 * Unlock editing features
 *
 * @returns jQuery Promise
 */
proto.unlock = function () {
  var d = $.Deferred();
  this._featuresstore.unlock().then(function () {
    return d.resolve();
  }).fail(d.reject);
  return d.promise();
};

proto._setOtherConfigParameters = function (config) {
  // overwrite by vector layer
};

/**
 * @returns layer fields
 */
proto.getEditingFields = function () {
  var editable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var fields = this.config.editing.fields.length ? this.config.editing.fields : this.config.fields;
  if (editable) {
    fields = fields.filter(function (f) {
      return f.editable;
    });
  }
  return fields;
};

/**
 * Return pk field
 * 
 * @since 3.9.0
 */
proto.getPkField = function () {
  return this.getEditingFields().find(function (f) {
    return f.pk;
  });
};

/**
 * @param field
 *
 * @returns {boolean} whether field is a Primary Key
 */
proto.isPkField = function (field) {
  var find_field = this.getEditingFields().find(function (f) {
    return f.name === field;
  });
  return find_field && find_field.pk;
};

proto.isEditingFieldEditable = function (field) {
  var find_field = this.getEditingFields().find(function (f) {
    return f.name === field;
  });
  return find_field ? find_field.editable : false;
};

proto.getEditingNotEditableFields = function () {
  return this.config.editing.fields.filter(function (f) {
    return !f.editable;
  }).map(function (f) {
    return f.name;
  });
};

proto.getEditingMediaFields = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  return this.config.editing.fields.filter(function (f) {
    return f.input.type === 'media';
  }).map(function (f) {
    return f.name;
  });
};

proto.getFieldsLabel = function () {
  var labels = [];
  this.getEditingFields().forEach(function (f) {
    return labels.push(f.label);
  });
  return labels;
};

proto.getDataFormat = function () {
  return this.config.editing.format;
};

/**
 * @returns raw data
 */
proto.getEditingFormat = function () {
  return this.config.editing.format;
};

proto.isReady = function () {
  return this.state.editing.ready;
};

proto.setReady = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.editing.ready = bool;
};

/**
 * Get configuration from server
 *
 * @param {*} options
 *
 * @returns jQuery Promise
 */
proto.getEditingConfig = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var d = $.Deferred();
  this.getProvider('data').getConfig(options).then(d.resolve).fail(d.reject);
  return d.promise();
};

proto.addEditingConfigFieldOption = function () {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref6.field,
      key = _ref6.key,
      value = _ref6.value;

  field.input.options[key] = value;
  return field.input.options[key];
};

proto.getWidgetData = function (options) {
  var d = $.Deferred();
  this.getProvider('data').getWidgetData(options).then(d.resolve).fail(d.reject);
  return d.promise();
};

proto.getCommitUrl = function () {
  return this.config.urls.commit;
};

proto.setCommitUrl = function (url) {
  this.config.urls.commit = url;
};

proto.getEditingUrl = function () {
  return this.config.urls.editing;
};

proto.getUnlockUrl = function () {
  return this.config.url.unlock;
};

proto.setUnlockUrl = function (url) {
  this.config.urls.unlock = url;
};

proto.getWidgetUrl = function () {
  return this.config.urls.widget;
};

/**
 * Set data url
 */
proto.setDataUrl = function (url) {
  this.config.urls.data = url;
};

proto.getDataUrl = function () {
  return this.config.urls.data;
};

/**
 * @returns url to get config layer
 */
proto.getConfigUrl = function () {
  return this.config.urls.config;
};

proto.setConfigUrl = function (url) {
  this.config.urls.index = url;
};

proto.getEditor = function () {
  return this._editor;
};

proto.isStarted = function () {
  return this.getEditor().isStarted();
};

proto.setEditor = function (editor) {
  this._editor = editor;
};

proto.getFeaturesStore = function () {
  return this._featuresstore;
};

proto.setFeaturesStore = function (featuresstore) {
  this._featuresstore = featuresstore;
};

proto.setSource = function (source) {
  this.setFeaturesStore(source);
};

proto.getSource = function () {
  return this._featuresstore;
};

/**
 * @returns editing style
 */
proto.getEditingStyle = function () {
  return this.config.editing.style;
};

proto._setFeatures = function (features) {
  this._featuresstore.setFeatures(features);
};

proto.addFeatures = function (features) {
  var _this4 = this;

  features.forEach(function (f) {
    return _this4.addFeature(f);
  });
};

proto._addFeature = function (feature) {
  this._featuresstore.addFeature(feature);
};

proto._deleteFeature = function (feature) {
  return feature.getId();
};

proto._updateFeature = function (feature) {};

/**
 * Delete all features
 */
proto._clearFeatures = function () {
  this._featuresstore.clearFeatures();
};

proto.addLockIds = function (lockIds) {
  this._featuresstore.addLockIds(lockIds);
};

proto.setFieldsWithValues = function (feature, fields) {
  var attributes = _createAttributesFromFields(fields);
  feature.setProperties(attributes);
  return attributes;
};

proto.getFieldsWithValues = function (obj) {
  var _this5 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$exclude = options.exclude,
      exclude = _options$exclude === undefined ? [] : _options$exclude,
      _options$get_default_ = options.get_default_value,
      get_default_value = _options$get_default_ === undefined ? true : _options$get_default_;


  var fields = _cloneDeep(this.getEditingFields());
  var feature = void 0;

  if (obj instanceof Feature) {
    feature = obj;
  } else if (obj instanceof ol.Feature) {
    feature = new Feature({ feature: obj });
  } else if (obj) {
    feature = this.getFeatureById(obj);
  } else {
    return fields;
  }

  var attributes = feature.getProperties();

  fields.forEach(function (field) {

    field.value = attributes[field.name];
    field._value = attributes[field.name]; // store original value
    field.update = false; // at beginning set update false. Used to form

    if (field.input) {
      var _options = _this5.getEditingFields().find(function (f) {
        return f.name === field.name;
      }).input.options;
      field.input.options.loading = _options.loading || { state: null };
      field.input.options.values = _options.values;
    }

    field.visible = exclude.indexOf(field.name) === -1; // exclude contain field to set visible false

    // for editing purpose
    if (undefined === field.validate) {
      field.validate = {};
    }

    field.forceNull = false;
    field.validate.valid = true;
    field.validate._valid = true; // useful to get previous value in certain case
    field.value_from_default_value = false; // need to be check if default value is set by server configuration field
    field.get_default_value = get_default_value; // specify if need to get value from form field.input.options.default value in case of missing value of field.value
    field.validate.exclude_values = new Set(); // for validate.unique purpose to check is new value iserted or change need to be di
    field.validate.unique = field.validate.unique || false;
    field.validate.required = field.validate.required || false;
    field.validate.mutually_valid = true;
    field.validate.empty = !field.validate.required;
    field.validate.message = null;
  });

  return fields;
};

proto.createNewFeature = function () {
  var feature = new ol.Feature();
  var properties = {};
  this.getEditingFields().forEach(function (f) {
    return properties[f.name] = null;
  });
  feature.setProperties(properties);
  feature = new Feature({ feature: feature });
  feature.setNew();
  return feature;
};

module.exports = TableLayer;

},{"constant":5,"core/layers/features/feature":11,"core/layers/features/featuresstore":12,"core/layers/layer":18,"lodash.clonedeep":"lodash.clonedeep","store/catalog-layers":329,"store/projects":335,"utils":419}],35:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QgsFilterToken = undefined;

var _utils = require('utils');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file something related to qdjango sessions tokens?
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since 3.9.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var QgsFilterToken = exports.QgsFilterToken = {

  /**
   * Save filtertoken
   * 
   * @example /vector/api/filtertoken/<qdjango>/<project_id>/<qgs_layer_id>/mode=save&name=<name_filter_saved>
   * 
   * @param {string} name
   * 
   * @returns { Promise }
   * 
   * @since 3.9.0
   */
  save: function () {
    var _ref = _asyncToGenerator(function* (url, name) {
      var response = yield _utils.XHR.get({ url: url, params: { mode: 'save', name: name } });
      if (response && response.result && response.data) {
        return response.data;
      }
    });

    function save(_x, _x2) {
      return _ref.apply(this, arguments);
    }

    return save;
  }(),


  /**
   * Apply filtertoken
   * 
   * @example /vector/api/filtertoken/<qdjango>/<project_id>/<qgs_layer_id>/mode=apply&fid=<fid_filter_saved>|name=<name_filter_saved>
   * 
   * @param fid
   * 
   * @returns { Promise }
   * 
   * @since 3.9.0
   */
  apply: function () {
    var _ref2 = _asyncToGenerator(function* (url, fid) {
      try {
        var response = yield _utils.XHR.get({ url: url, params: { mode: 'apply', fid: fid } });
        if (response && response.result && response.data) {
          return response.data;
        }
      } catch (err) {
        console.warn(err);
      }
    });

    function apply(_x3, _x4) {
      return _ref2.apply(this, arguments);
    }

    return apply;
  }(),


  /**
   * Delete saved filter from server --> `/vector/api/filtertoken/<qdjango>/<project_id>/<qgs_layer_id>/mode=delete_saved&fid=<fid_filter_saved>|name=<name_filter_saved>`
   * Delete current filter           --> `/vector/api/filtertoken/<qdjango>/<project_id>/<qgs_layer_id>/mode=delete`
   * 
   * token: current token if provide
   * action: create, update, delete
   * 
   * @returns filter token if another layer is filtered otherwise filtertoken is undefined
   * 
   * @since 3.9.0
   */
  delete: function () {
    var _ref3 = _asyncToGenerator(function* (url, fid) {
      try {
        var response = yield _utils.XHR.get({
          url: url,
          params: {
            mode: undefined === fid ? 'delete' : 'delete_saved',
            fid: fid
          }
        });
        //server can return filter token or not. Depend on if layer is filtered or not
        if (response && response.result && response.data) {
          return response.data.filtertoken;
        }
      } catch (err) {
        console.warn(err);
      }
    });

    function _delete(_x5, _x6) {
      return _ref3.apply(this, arguments);
    }

    return _delete;
  }(),


  /**
   * Get filter token
   * 
   * @since 3.9.0
   */
  getToken: function () {
    var _ref4 = _asyncToGenerator(function* (url) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      try {
        var _ref5 = yield _utils.XHR.get({ url: url, params: params }),
            _ref5$data = _ref5.data,
            data = _ref5$data === undefined ? {} : _ref5$data;

        return data.filtertoken;
      } catch (e) {
        return Promise.reject(e);
      }
    });

    function getToken(_x8) {
      return _ref4.apply(this, arguments);
    }

    return getToken;
  }()
};

},{"utils":419}],36:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Handle features selection of Project Layers (on TOC)
 * 
 * ORIGINAL SOURCE: src/app/gui/queryresults/queryresultsservice.js@3.8.12::_handleProjectLayerSelection
 * 
 * @since 3.9.0
 */
var _handleProjectLayerSelection = function () {
  var _ref2 = _asyncToGenerator(function* (map, layer) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        fids = _ref3.fids,
        features = _ref3.features,
        index = _ref3.index,
        force = _ref3.force;

    // skip invalid fids
    if (null === fids || undefined === fids) {
      return;
    }

    fids = Array.isArray(fids) ? fids : [fids];
    features = Array.isArray(features) ? features : [features];

    var include = []; // fid of features to include
    var exclude = []; // fid of features to exclude

    fids.forEach(function (fid, idx) {
      var feature = features[idx];
      var is_selected = layer.getFilterActive() || layer.hasSelectionFid(fid);

      // if not already selected and feature is not added to OL selection layer on map --> add as feature of selected layer
      if (!is_selected && feature && feature.geometry && !layer.getOlSelectionFeature(fid)) {
        layer.addOlSelectionFeature({ id: fid, feature: feature });
      }

      // force action
      if (undefined === force) {
        layer[is_selected ? 'excludeSelectionFid' : 'includeSelectionFid'](fid);
      }

      // force add
      if ('add' === force && !is_selected) {
        include.push(fid);
      }

      // force remove
      if ('remove' === force) {
        exclude.push(fid);
      }
    });

    layer.includeSelectionFids(include, false);
    layer.excludeSelectionFids(exclude, false);

    /** @TODO add description */
    if (layer.getFilterActive()) {
      yield layer.createFilterToken();
    }

    var _GUI$getService$getSt = _gui2.default.getService('queryresults').getState(),
        layers = _GUI$getService$getSt.layers;

    /** @TODO add description */


    fids.forEach(function (fid, idx) {
      var currentLayer = !layer.hasSelectionFid(fid) && layer.getFilterActive() && layer.getSelectionFids().size > 0 && layers.find(function (l) {
        return l.id === layer.getId();
      });
      if (currentLayer) {
        currentLayer.features.splice(undefined === index ? idx : index, 1);
      }
    });

    map.clearHighlightGeometry();

    /** @TODO add description */
    if (1 === layers.length && !layers[0].features.length) {
      layers.splice(0);
    }
  });

  return function _handleProjectLayerSelection(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Add / Remove features from selection
 * 
 * ORIGINAL SOURCE: src/app/gui/queryresults/queryresultsservice.js@3.8.12::_addRemoveSelectionFeature
 * 
 * @since 3.9.0
 */


var _addToSelection = function () {
  var _ref4 = _asyncToGenerator(function* (map, layer, params) {
    if (layer.external) {
      _handleExternalVectorLayerSelection(map, layer, params);
    } else {
      yield _handleProjectLayerSelection(map, layer, params);
    }
  });

  return function _addToSelection(_x5, _x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();

/**
 * @TODO make it simpler..
 * 
 * Add / Remove features from selection
 * 
 * ORIGINAL SOURCE: src/app/gui/queryresults/queryresultsservice.js@3.8.12::addToSelection
 * 
 * @since 3.9.0
 */


exports.addToSelection = addToSelection;

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _createFeatureFromFeatureObject = require('utils/createFeatureFromFeatureObject');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @TODO make it a Layers class function ? 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since 3.9.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

/**
 * External layer (vector) added by add external layer tool
 * 
 * ORIGINAL SOURCE: src/app/gui/queryresults/queryresultsservice.js@3.8.12::_handleExternalVectorLayerSelection
 * 
 * @since 3.9.0
 */
function _handleExternalVectorLayerSelection(map, layer) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      fids = _ref.fids,
      features = _ref.features,
      index = _ref.index,
      force = _ref.force;

  if (null === fids || undefined === fids) {
    return;
  }
  //Take in account array or single fid
  fids = Array.isArray(fids) ? fids : [fid];
  features = Array.isArray(features) ? features : [features];
  //check if layer.selection.features is undefined
  if (undefined === layer.selection.features) {
    //set array
    layer.selection.features = [];
  }

  fids.forEach(function (fid, index) {
    var feature = features[index];
    // Set feature used in selection tool action
    if (undefined === layer.selection.features.find(function (f) {
      return f.getId() === fid;
    })) {
      var feat = (0, _createFeatureFromFeatureObject.createFeatureFromFeatureObject)({ feature: feature, id: fid });
      feat.__layerId = layer.id;
      feat.selection = feature.selection;
      layer.selection.features.push(feat);
    }

    //check if feature is already select or feature is already removed (no selected)
    var noChangeSelection = 'add' === force && feature.selection.selected || 'remove' === force && !feature.selection.selected;
    /** If not changes to apply return */
    if (noChangeSelection) {
      return;
    }

    /**Switch selected boolean value */
    feature.selection.selected = !feature.selection.selected;

    /** Need to add selection on map */
    map.setSelectionFeatures(feature.selection.selected ? 'add' : 'remove', {
      feature: layer.selection.features.find(function (selectionFeature) {
        return fid === selectionFeature.getId();
      })
    });
  });

  // Set selection layer active based on features selection selected properties.
  layer.selection.active = layer.selection.features.reduce(function (acc, feature) {
    return acc || feature.selection.selected;
  }, false);
}function addToSelection(layer, feature, action, index) {
  var service = _gui2.default.getService('queryresults');
  var map = service.mapService; // TODO: same as? --> GUI.getService('map')

  // TODO: avoid referencing this private stuff
  var getFeaturesIds = service._getFeaturesIds.bind(service);
  var getFeatureId = service._getFeatureId.bind(service);
  var getExternalLayer = service._getExternalLayer.bind(service);
  var getActionLayerById = service.getActionLayerById.bind(service);
  var getLayerById = _catalogLayers2.default.getLayerById.bind(_catalogLayers2.default);

  if (undefined === feature && undefined === action && undefined === index) {
    var _action = getActionLayerById({ layer: layer, id: 'selection' });
    var toggled = Object.values(_action.state.toggled).reduce(function (prev, curr) {
      return prev && curr;
    }, true);
    var _layer = layer.external ? layer : getLayerById(layer.id);
    var features = layer.features && layer.features.length ? layer.features : [];
    _addToSelection(map, _layer, {
      fids: features.length > 0 ? getFeaturesIds(features, _layer.external) : null,
      features: features,
      force: toggled ? 'remove' : 'add'
    });
    layer.features.forEach(function (feature, index) {
      _action.state.toggled[index] = !toggled;
    });
  } else {
    action.state.toggled[index] = !action.state.toggled[index];
    var _layer2 = getExternalLayer(layer.id) || false ? layer : getLayerById(layer.id);
    var _fid = feature ? getFeatureId(feature, _layer2.external) : null;
    _addToSelection(map, _layer2, {
      fids: [_fid],
      features: [feature],
      index: index,
      force: undefined
    });
  }
}

},{"services/gui":319,"store/catalog-layers":329,"utils/createFeatureFromFeatureObject":359}],37:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeFromSelection = removeFromSelection;

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @FIXME add description
 *
 * @param layer
 * 
 * ORIGINAL SOURCE: src/app/gui/queryresults/queryresultsservice.js@3.8.12::clearSelectionExtenalLayer
 * 
 * @since 3.9.0
 */
/**
 * @TODO make it a Layers class function ?
 * 
 * @file
 * @since 3.9.0
 */

function _clearSelectionExtenalLayer(layer) {
  var service = _gui2.default.getService('queryresults');
  var map = service.mapService; // TODO: same as? --> GUI.getService('map')

  layer.selection.active = false;

  var action = service.getActionLayerById({ layer: layer, id: 'selection' });

  layer.selection.features.forEach(function (feature, index) {
    // skip when ..
    if (!feature.selection.selected) {
      return;
    }
    feature.selection.selected = false;
    if (action) {
      action.state.toggled[index] = false;
    }
    map.setSelectionFeatures('remove', { feature: feature });
  });
}

/**
 * @since 3.9.0
 */
function removeFromSelection(layer, storeid) {
  if (!layer) {
    return console.warn('undefined layer');;
  }
  if (layer.external) {
    _clearSelectionExtenalLayer(layer);
  } else if (storeid) {
    _catalogLayers2.default.getLayersStore(storeid).getLayerById(layer.id).clearSelectionFids();
  }
}

},{"services/gui":319,"store/catalog-layers":329}],38:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    mixin = _require.mixin;

var Layer = require('core/layers/layer');
var TableLayer = require('core/layers/tablelayer');
var GeoLayerMixin = require('core/layers/mixins/geo');
var VectorMapLayer = require('core/layers/map/vectorlayer');

function VectorLayer() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments[1];

  base(this, config, options);
  this._mapLayer = null; // later tah will be added to map
  this.type = Layer.LayerTypes.VECTOR;
  // need a ol layer for add to map
  this.setup(config, options);
  this.onafter('setColor', function (color) {});
}

inherit(VectorLayer, TableLayer);

mixin(VectorLayer, GeoLayerMixin);

var proto = VectorLayer.prototype;

proto.getEditingLayer = function () {
  return this.getMapLayer().getOLLayer();
};

proto.resetEditingSource = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.getMapLayer().resetSource(features);
};

proto._setOtherConfigParameters = function (config) {
  this.config.editing.geometrytype = config.geometrytype;
};

proto.getEditingGeometryType = function () {
  return this.config.editing.geometrytype;
};

proto.getMapLayer = function () {
  if (!this._mapLayer) {
    this._mapLayer = new VectorMapLayer({
      id: this.getId(),
      geometryType: this.getGeometryType(),
      color: this.getColor(),
      style: this.isEditingLayer() ? this.getEditingStyle() : this.getCustomStyle(),
      provider: this.getProvider('data'),
      features: this._editor && this._editor.getEditingSource().getFeaturesCollection()
    });
  }
  return this._mapLayer;
};

module.exports = VectorLayer;

},{"core/layers/layer":18,"core/layers/map/vectorlayer":25,"core/layers/mixins/geo":30,"core/layers/tablelayer":34,"utils":419}],39:[function(require,module,exports){
var _plugins = require('store/plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    toRawType = _require.toRawType;

var G3WObject = require('core/g3wobject');
var Component = require('gui/component/component');

var _require2 = require('core/i18n/i18n.service'),
    addI18nPlugin = _require2.addI18nPlugin;

var TIMEOUT = 10000;

var Plugin = function Plugin() {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$name = _ref.name,
      name = _ref$name === undefined ? null : _ref$name,
      _ref$config = _ref.config,
      config = _ref$config === undefined ? _plugins2.default.getPluginConfig(name) : _ref$config,
      _ref$service = _ref.service,
      service = _ref$service === undefined ? null : _ref$service,
      _ref$dependencies = _ref.dependencies,
      dependencies = _ref$dependencies === undefined ? [] : _ref$dependencies,
      _ref$i18n = _ref.i18n,
      i18n = _ref$i18n === undefined ? null : _ref$i18n,
      _ref$fontClasses = _ref.fontClasses,
      fontClasses = _ref$fontClasses === undefined ? [] : _ref$fontClasses,
      _ref$api = _ref.api,
      api = _ref$api === undefined ? {} : _ref$api;

  base(this);

  this.setName(name);
  this.setConfig(config);
  this.setLocale(i18n);
  this.setService(service);
  this.setDependencies(dependencies);
  this.addFontClasses(fontClasses);
  this.setApi(api);
  this.setHookService(null);

  this._ready = false;

  // List of sidebar services that usually plugin need to interact with (hook = place/name of component)
  this.hookservices = {
    'search': _gui2.default.getService('search'),
    'tools': _gui2.default.getService('tools')
  };

  // Automatically remove the loading plugin indicator after timeout
  this._timeout = setTimeout(function () {
    _plugins2.default.removeLoadingPlugin(_this.name, _this._ready);
    _this.removeLayout();
  }, TIMEOUT);
};

inherit(Plugin, G3WObject);

var proto = Plugin.prototype;

/**
 * @FIXME add description
 */
proto.setName = function (name) {
  this.name = name;
};

/**
 * @FIXME add description
 */
proto.getName = function () {
  return this.name;
};

/**
 * @FIXME add description
 */
proto.setConfig = function (config) {
  this.config = toRawType(config) === 'Object' ? config : null;
};

/**
 * @FIXME add description
 */
proto.getConfig = function () {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.name;

  return this.config || _plugins2.default.getPluginConfig(name);
};

/*
 * @FIXME add description
 */
proto.setLocale = function (i18n) {
  if (i18n && this.name) {
    addI18nPlugin({ name: this.name, config: i18n });
  }
};

/**
 * @FIXME add description
 */
proto.setService = function (service) {
  this.service = service;
  if (service) {
    service.setPlugin(this);
  }
};

/**
 * @FIXME add description
 */
proto.getService = function () {
  return this.service;
};

/**
 * @FIXME add description
 */
proto.setDependencies = function (dependencies) {
  this.dependencies = dependencies;
};

/**
 * @FIXME add description
 */
proto.setApi = function () {
  var api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._api = api;
  /**
   * @FIXME useless assignment ?
   */
  api.getConfig = this._api.getConfig; // add alias for "api.getConfig()" method
};

/**
 * @FIXME add description
 */
proto.getApi = function () {
  return this._api;
};

/**
 * @FIXME add description
 */
proto.setHookService = function (hook) {
  this._hook = hook;
};

/**
 * @FIXME add description
 */
proto.getHookService = function () {
  var hook = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "tools";

  return this.hookservices[hook];
};

/**
 * Override plugin's content default layout (eg. default panel width, height, ...)
 * 
 * @see g3wsdk.core.ApplicationState.gui.layout
 */
proto.setLayout = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _application2.default.cloneLayout('app');

  _application2.default.setLayout(this.name, config);
};

/**
 * @FIXME add description
 * 
 * @see g3wsdk.core.ApplicationState.gui.layout.__current
 */
proto.setCurrentLayout = function () {
  _application2.default.setCurrentLayout(this.name);
};

/**
 * @FIXME add description
 * 
 * @see g3wsdk.core.ApplicationState.gui.layout
 */
proto.removeLayout = function () {
  _application2.default.removeLayout(this.name);
};

/**
 * @FIXME add description
 */
proto.setReady = function (isReady) {
  var _this2 = this;

  this._ready = isReady;
  if (this._ready) {
    this.setLayout();
  }
  this.emit('set-ready', isReady, this.name);
  /**
   * @FIXME empty delay ?
   */
  setTimeout(function () {
    clearTimeout(_this2._timeout);
    _plugins2.default.removeLoadingPlugin(_this2.name, _this2._ready);
  }, 0 /* 0 = allow any previously "setTimeout" to execute */);
};

/**
 * @FIXME add description
 */
proto.isReady = function () {
  var _this3 = this;

  return new Promise(function (resolve) {
    _this3._ready ? resolve(_this3._ready) : _this3.once('set-ready', function (isReady) {
      _this3._ready = isReady;resolve(_this3._ready);
    });
  });
};

/**
 * Check if plugin is compatible with current projectId
 */
proto.isCurrentProjectCompatible = function (projectId) {
  return projectId === _projects2.default.getCurrentProject().getGid();
};

/**
 * Check and register plugin only when compatible with current projectId (eg: qdjango:1)
 */
proto.registerPlugin = function (projectId) {
  var iscompatible = this.isCurrentProjectCompatible(projectId);
  if (iscompatible) {
    _plugins2.default.registerPlugin(this);
  } else {
    _plugins2.default.removeLoadingPlugin(this.name, false);
    clearTimeout(this._timeout);
  }
  return iscompatible;
};

/**
 * @FIXME explain better what it does
 * 
 * Get plugin dependencies 
 */
proto.getDependencyPlugins = function (pluginsName) {
  var _this4 = this;

  this.dependencies = pluginsName || this.dependencies;
  return Promise.all(this.dependencies.map(function (pluginName) {
    return _this4.getDependencyPlugin(pluginName);
  }));
};

/**
 * @FIXME explain better what it does
 * 
 * Create to not replace above plugin method used by non changed old plugin
 */
proto.getDependencyPluginsObject = function () {
  var _ref2 = _asyncToGenerator(function* (pluginsName) {
    var pluginsApiObject = {};
    var promises = yield this.getDependencyPlugins(pluginsName);
    this.dependencies.forEach(function (pluginName, index) {
      return pluginsApiObject[pluginName] = promises[index];
    });
    return pluginsApiObject;
  });

  return function (_x6) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * @FIXME explain better what it does
 * 
 * Get plugin dependency
 */
proto.getDependencyPlugin = function (pluginName) {
  if (_plugins2.default.isTherePlugin(pluginName)) {
    return new Promise(function (resolve) {
      var plugin = _plugins2.default.getPlugin(pluginName);
      /**
       * @TODO refactor weird shortcircuiting logic
       */
      plugin && plugin.isReady().then(function () {
        return resolve(plugin.getApi());
      }) || _plugins2.default.onafter('registerPlugin', function (plugin) {
        plugin.name === pluginName && plugin.isReady().then(function () {
          resolve(plugin.getApi());
        });
      });
    });
  }
  return Promise.reject({ error: 'no plugin' });
};

/**
 * Handle loading process of a specific hook service (eg. "tools" interface on the left sidebar)
 */
proto.setHookLoading = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$hook = _ref3.hook,
      hook = _ref3$hook === undefined ? "tools" : _ref3$hook,
      _ref3$loading = _ref3.loading,
      loading = _ref3$loading === undefined ? false : _ref3$loading;

  this.getHookService(hook).setLoading(loading);
};

/**
 * @FIXME add description
 */
proto.addToolGroup = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$hook = _ref4.hook,
      hook = _ref4$hook === undefined ? "tools" : _ref4$hook,
      order = _ref4.position,
      group = _ref4.title;

  this.getHookService(hook).addToolGroup(order, group);
};

/**
 * @FIXME add description
 */
proto.removeToolGroup = function () {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      hook = _ref5.hook,
      group = _ref5.group;

  this.getHookService(hook).removeToolGroup(group.title);
};

/**
 * @FIXME add description
 */
proto.addTools = function () {
  var _this5 = this;

  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$hook = _ref6.hook,
      hook = _ref6$hook === undefined ? "tools" : _ref6$hook,
      action = _ref6.action,
      html = _ref6.html,
      _ref6$offline = _ref6.offline,
      offline = _ref6$offline === undefined ? true : _ref6$offline,
      icon = _ref6.icon,
      name = _ref6.name,
      type = _ref6.type,
      _ref6$options = _ref6.options,
      options = _ref6$options === undefined ? {} : _ref6$options,
      _ref6$loading = _ref6.loading,
      loading = _ref6$loading === undefined ? false : _ref6$loading,
      _ref6$disabled = _ref6.disabled,
      disabled = _ref6$disabled === undefined ? false : _ref6$disabled,
      _ref6$state = _ref6.state,
      state = _ref6$state === undefined ? {
    type: null,
    message: null
  } : _ref6$state;

  var groupTools = arguments[1];

  if (!action && !type) {
    this.removeToolGroup({ hook: hook, group: groupTools });
    return [];
  } else {
    this.setHookService(hook);
    var tools = (this.config.configs || [this.config]).map(function (config) {
      return {
        icon: icon,
        type: type,
        name: config.name || name,
        html: html,
        loading: loading,
        disabled: disabled,
        options: options,
        offline: offline,
        action: action && action.bind(_this5, config),
        state: state
      };
    });
    this.getHookService(hook).addTools(tools, groupTools);
    return tools;
  }
};

/**
 * @FIXME add description
 */
proto.setToolState = function () {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref7.id,
      _ref7$state = _ref7.state,
      state = _ref7$state === undefined ? { type: null, message: null } : _ref7$state;

  this.hookservices[this._hook].setToolState({ id: id, state: state });
};

/**
 * @FIXME add description
 */
proto.removeTools = function () {
  this.hookservices[this._hook].removeTools();
};

/**
 * Helper method to create and add a custom component item on the left sidebar
 * 
 * @param                      vue                                  vue component object (SFC)
 * @param { Object }           options
 * @param { string }           options.id
 * @param { string }           options.title                        textual description on left sidebar (eg. "metadata")
 * @param { boolean }          options.open                         true = collapsible button; false = button
 * @param { boolean }          options.collapsible                  whether expand the button when plugin is loaded
 * @param { boolean }          options.isolate                      whether propagate click event to all sidebar item
 * @param { boolean }          options.closewhenshowviewportcontent
 * @param { Object }           options.iconConfig
 * @param { string }           options.iconConfig.color             color of icon
 * @param { string }           options.iconConfig.icon              see gui\vue\vueappplugin.js font list
 * @param { Object }           options.events                       eg. events = { open: { when: 'before', cb: () => { } }
 * @param { Object }           options.sidebarOptions
 * @param { number | string }  options.sidebarOptions.position
 * 
 * @returns component
 * 
 * @listens unload
 * 
 */
proto.createSideBarComponent = function (vue) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  var çç = function çç(a, b) {
    return undefined !== a ? a : b;
  }; // like a ?? (coalesce operator)

  options.open = çç(options.open, false);
  options.collapsible = çç(options.collapsible, true);
  options.mobile = çç(options.mobile, true);
  options.isolate = çç(options.isolate, false);
  options.closewhenshowviewportcontent = çç(options.closewhenshowviewportcontent, true);
  options.iconConfig = çç(options.iconConfig, {});
  options.events = çç(options.events, {});
  options.sidebarOptions = çç(options.sidebarOptions, { position: 1 });

  var _Object$assign = Object.assign({}, options, { iconColor: options.iconConfig.color, icon: _gui2.default.getFontClass(options.iconConfig.icon) }),
      iconConfig = _Object$assign.iconConfig,
      opts = _objectWithoutProperties(_Object$assign, ['iconConfig']);

  var component = new Component(opts).init({ vueComponentObject: vue });

  _gui2.default.addComponent(component, 'sidebar', options.sidebarOptions);

  this.once('unload', function () {
    return _gui2.default.removeComponent(options.id, 'sidebar', options.sidebarOptions);
  });

  return component;
};

/**
 * @deprecated since v3.4.
 */
proto.unload = function () {
  if (this.service) {
    this.service.clearAllEvents();
  }
  this.emit('unload');
  //console.log('UNLOAD can be overwritten by plugin');
};

/**
 * @deprecated since v3.4.
 */
proto.load = function () {
  //console.log('LOAD  need to be overwrite by plugin');
};

/**
 * @TODO it could be depecrated after v3.4 ?
 */
proto.getProject = function () {
  return _projects2.default.getCurrentProject();
};

/**
 * @TODO it could be depecrated after v3.4 ?
 */
proto.addDependency = function (dependency) {
  this.dependencies.push(dependency);
};

/**
 * @TODO it could be depecrated after v3.4 ?
 */
proto.addFontClass = function (_ref8) {
  var name = _ref8.name,
      className = _ref8.className;

  Vue.prototype.g3wtemplate.addFontClass({ name: name, className: className });
};

/**
 * @TODO it could be depecrated after v3.4 ?
 */
proto.addFontClasses = function () {
  var _this6 = this;

  var fonClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  fonClasses.forEach(function (fontClass) {
    return _this6.addFontClass(fontClass);
  });
};

module.exports = Plugin;

},{"core/g3wobject":8,"core/i18n/i18n.service":9,"gui/component/component":77,"services/application":310,"services/gui":319,"store/plugins":334,"store/projects":335,"utils":419}],40:[function(require,module,exports){
var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function PluginService() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.plugin;
  this._api = {
    own: null,
    dependencies: {}
  };
  this._pluginEvents = {};
  this._appEvents = [];
  this.currentLayout = _application2.default.getCurrentLayoutName();
  this.vm = new Vue();
  this.unwatch = this.vm.$watch(function () {
    return _applicationState2.default.gui.layout.__current;
  }, function (currentLayoutName) {
    return _this.currentLayout = currentLayoutName !== _this.getPlugin().getName() ? currentLayoutName : _this.currentLayout;
  });
}

inherit(PluginService, G3WObject);

var proto = PluginService.prototype;

/**
 * Set a default init method. Overwrite by each plugin
 * @param config: plugin configuration object
 */
proto.init = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = config;
};

proto.setCurrentLayout = function () {
  _application2.default.setCurrentLayout(this.getPlugin().getName());
};

proto.resetCurrentLayout = function () {
  _application2.default.setCurrentLayout(this.currentLayout);
};

// set owner plugin of the service
proto.setPlugin = function (plugin) {
  this.plugin = plugin;
};

// return the instance of the plugin owner of the service
proto.getPlugin = function () {
  return this.plugin;
};

proto.isIframe = function () {
  return _application2.default.isIframe();
};

/**
 * Get Current Project
 */
proto.getCurrentProject = function () {
  return _application2.default.getCurrentProject();
};

proto.getGid = function () {
  var gid = this.config.gid;

  return gid && gid.split(':')[1];
};

proto.getConfig = function () {
  return this.config;
};

proto.setConfig = function (config) {
  this.config = config;
};

proto.setApi = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      dependency = _ref.dependency,
      api = _ref.api;

  if (!dependency) this._api.own = api;else this._api.dependencies[dependency] = api;
};

proto.getApi = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      dependency = _ref2.dependency;

  return dependency && this._api.dependencies[dependency] || this._api.own;
};

proto.initEvents = function () {
  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  for (var i in events) {
    var name = events[i];
    this._pluginEvents[name] = {};
  }
};

proto.registerWindowEvent = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      evt = _ref3.evt,
      cb = _ref3.cb;

  _application2.default.registerWindowEvent({
    evt: evt,
    cb: cb
  });
};

proto.unregisterWindowEvent = function (_ref4) {
  var evt = _ref4.evt,
      cb = _ref4.cb;

  _application2.default.unregisterWindowEvent({
    evt: evt,
    cb: cb
  });
};

proto.subscribeEvent = function (_ref5) {
  var name = _ref5.name,
      _ref5$once = _ref5.once,
      once = _ref5$once === undefined ? false : _ref5$once,
      owner = _ref5.owner,
      listener = _ref5.listener;

  this._pluginEvents[name] = this._pluginEvents[name] ? this._pluginEvents[name] : {};
  this._pluginEvents[name][owner] = listener;
  once ? this.once(name, listener) : this.on(name, listener);
};

proto.triggerEvent = function (_ref6) {
  var name = _ref6.name,
      _ref6$params = _ref6.params,
      params = _ref6$params === undefined ? {} : _ref6$params;

  this.emit(name, params);
};

proto.unsubscribeEvent = function (_ref7) {
  var name = _ref7.name,
      owner = _ref7.owner;

  var listener = this._pluginEvents[name][owner];
  this.removeEvent(name, listener);
  delete this._pluginEvents[name][owner];
};

proto.unsubscribeAllEvents = function () {
  for (var name in this._pluginEvents) {
    this.removeEvent(name);
    delete this._pluginEvents[name];
  }
};

proto.clearAllEvents = function () {
  this.unsubscribeAllEvents();
  this.unwatch();
  this.vm = null;
  this._pluginEvents = null;
};

// to owerwrite if we need some condition to load or not the plugin
proto.loadPlugin = function () {
  return true;
};

//Called when plugin is removed to clear events and memory
proto.clear = function () {
  // to overwrite
};

module.exports = PluginService;

},{"core/g3wobject":8,"services/application":310,"store/application-state":328,"utils":419}],41:[function(require,module,exports){
var _constant = require('app/constant');

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _crsToCrsObject = require('utils/crsToCrsObject');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    XHR = _require.XHR;

var G3WObject = require('core/g3wobject');
var LayerFactory = require('core/layers/layerfactory');
var LayersStore = require('core/layers/layersstore');
var Projections = require('g3w-ol/projection/projections');

/**
 * @FIXME options param appears to be unusued
 * 
 * @param config.id
 * @param config.type
 * @param config.gid
 * @param config.name
 * @param config.crs
 * @param config.extent
 * @param config.initextent
 * @param config.layers
 * @param config.layerstree
 * @param config.overviewprojectgid
 * @param config.baselayers
 * @param config.initbaselayer
 * @param config.filtertoken
 * @param config.context_base_legend
 * @param config.query_point_tolerance
 * @param config.wps                           array of wps service
 * @param config.bookmarks                     array of bookmarks
 * @param { 'POST' | 'GET' }                   config.ows_method
 * @param { boolean }                          config.wms_use_layer_ids
 * @param { 'ows' | 'api' }                    config.search_endpoint 
 * @param { 'tab' | 'toc' }                    config.legend_position 
 * @param { 'layers', 'baselayers', 'legend' } config.catalog_tab
 * 
 * @param options
 */
function Project() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /**
   * For future implementation catalog tab actived
   */
  config.catalog_tab = config.toc_tab_default || config._catalog_tab || 'layers';

  config.ows_method = config.ows_method || 'GET';

  config.toc_layers_init_status = config.toc_layers_init_status || _constant.TOC_LAYERS_INIT_STATUS;

  config.toc_themes_init_status = config.toc_themes_init_status || _constant.TOC_THEMES_INIT_STATUS;

  config.query_point_tolerance = config.query_point_tolerance || _constant.QUERY_POINT_TOLERANCE;

  this.state = config;

  var type = this.getType();
  var id = this.getId();
  var vector = this.getVectorUrl();

  /**
   * View information about project APIs 
   */
  this.urls = {
    map_themes: '/' + type + '/api/prjtheme/' + id + '/',
    expression_eval: '/api/expression_eval/' + id + '/',
    vector_data: vector + 'data/' + type + '/' + id + '/',
    featurecount: vector + 'featurecount/' + type + '/' + id + '/'
  };

  this._processLayers();

  /**
   * Set the project projection to object crs
   */
  this.state.crs = (0, _crsToCrsObject.crsToCrsObject)(this.state.crs);

  this._projection = Projections.get(this.state.crs);

  /**
   * Build a layersstore of the project
   */
  this._layersStore = this._buildLayersStore();

  /**
   * Hook methods
   */
  this.setters = {
    setBaseLayer: function setBaseLayer(id) {
      var _this = this;

      this.state.baselayers.forEach(function (baseLayer) {
        _this._layersStore.getLayerById(baseLayer.id).setVisible(baseLayer.id === id);
        baseLayer.visible = baseLayer.id === id;
      });
    }
  };

  this.setSearchEndPoint();

  base(this);
}

inherit(Project, G3WObject);

var proto = Project.prototype;

/**
 * @returns `wms_getmap_format` attribute from server (project settings) 
 *
 * @since 3.9.0
 */

proto.getWmsGetmapFormat = function () {
  return this.state.wms_getmap_format;
};

/**
 * Get search end point value (ows or api)
 */
proto.getSearchEndPoint = function () {
  return this.state.search_endpoint;
};

proto.setSearchEndPoint = function () {
  var _this2 = this;

  (this.state.search || []).forEach(function (search) {
    return search.search_endpoint = _this2.state.search_endpoint;
  });
};

proto.getAliasUrl = function () {
  return this.state.aliasUrl;
};

proto.getActiveCatalogTab = function () {
  return this.state.catalog_tab;
};

proto.setActiveCatalogTab = function () {
  var tab = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'layers';

  this.state.catalog_tab = tab;
};

proto.isWmsUseLayerIds = function () {
  return this.state.wms_use_layer_ids;
};

proto.getContextBaseLegend = function () {
  return this.state.context_base_legend;
};

proto.getQueryPointTolerance = function () {
  return this.state.query_point_tolerance;
};

// check if multi
proto.getQueryFeatureCount = function () {
  return this.state.feature_count || 5;
};

proto.isQueryMultiLayers = function (mapcontrol) {
  return this.state.querymultilayers && -1 !== this.state.querymultilayers.indexOf(mapcontrol);
};

proto.getRelations = function () {
  return this.state.relations;
};

proto.getRelationById = function (relationId) {
  return this.state.relations.find(function (relation) {
    return relation.id === relationId;
  });
};

proto.getRelationsByLayerId = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref.layerId,
      type = _ref.type;

  return this.state.relations.filter(function (relation) {
    return relation.referencedLayer === layerId && (type ? relation.type === type : true);
  });
};

proto.getOwsMethod = function () {
  return this.state.ows_method;
};

/**
 * Process layerstree and baselayers of the project
 */
proto._processLayers = function () {
  var _this3 = this;

  // useful info for catalog
  var traverse = function traverse(nodes) {
    var _loop = function _loop(i) {
      var node = nodes[i];
      var layer_name_originale = void 0;
      //check if layer (node) of folder
      if (undefined !== node.id) {
        _this3.state.layers.forEach(function (layer) {
          layer_name_originale = layer.name;
          if (node.id === layer.id) {
            node.name = layer.name;
            layer.wmsUrl = _this3.getWmsUrl();
            layer.project = _this3;
            node[i] = Object.assign(layer, node);
            return false;
          }
        });
      }
      if (Array.isArray(node.nodes)) {
        //add title to tree
        node.title = node.name;
        traverse(node.nodes);
      }
    };

    for (var i = 0; i < nodes.length; i++) {
      _loop(i);
    }
  };

  traverse(this.state.layerstree);
  var baseLayerId = _application2.default.getBaseLayerId();

  // Remove bing base layer when no vendor API Key is provided
  this.state.baselayers = this.state.baselayers.filter(function (baselayer) {
    return baselayer.servertype === 'Bing' ? _applicationState2.default.keys.vendorkeys.bing : true;
  });

  for (var i = 0; i < this.state.baselayers.length; i++) {
    var baseLayerConfig = this.state.baselayers[i];
    var baseLayerVisibleId = null !== baseLayerId ? baseLayerId : this.state.initbaselayer;
    baseLayerConfig.visible = baseLayerVisibleId && baseLayerConfig.id === baseLayerVisibleId || !!baseLayerConfig.fixed;
    baseLayerConfig.baselayer = true;
  }
};

/**
 * Build layersstore and create layersstree 
 */
proto._buildLayersStore = function () {
  var _this4 = this;

  // create a layersStore object
  var layersStore = new LayersStore();

  //check if we have owerview project
  var overviewprojectgid = this.state.overviewprojectgid ? this.state.overviewprojectgid.gid : null;

  layersStore.setOptions({
    id: this.state.gid,
    projection: this._projection,
    extent: this.state.extent,
    initextent: this.state.initextent,
    wmsUrl: this.state.WMSUrl,
    catalog: this.state.gid !== overviewprojectgid
  });

  // instance each layer ad area added to layersstore
  var layers = this.getLayers();

  layers.forEach(function (layerConfig) {
    //check and set crs in objectformat
    layerConfig.crs = (0, _crsToCrsObject.crsToCrsObject)(layerConfig.crs);
    // add projection
    layerConfig.projection = layerConfig.crs ? Projections.get(layerConfig.crs) : _this4._projection;
    //add ows_method
    layerConfig.ows_method = _this4.getOwsMethod();
    layerConfig.wms_use_layer_ids = _this4.state.wms_use_layer_ids;
    var layer = LayerFactory.build(layerConfig, { project: _this4 });
    if (layer) {
      layersStore.addLayer(layer);
    }
  });

  // create layerstree from layerstore
  layersStore.createLayersTree(this.state.name, {
    layerstree: this.state.layerstree,
    expanded: this.state.toc_layers_init_status === 'not_collapsed' // config to show layerstrees toc expanded or not
  });

  return layersStore;
};

proto.getLayerById = function (layerId) {
  return this._layersStore.getLayerById(layerId);
};

proto.getLayers = function () {
  return [].concat(_toConsumableArray(this.state.layers), _toConsumableArray(this.state.baselayers));
};

proto.getBaseLayers = function () {
  return this.state.baselayers;
};

/**
 * Get configuration layers array from server config
 * 
 * @param filter property layer config to filter
 * @returns {*}
 */
proto.getConfigLayers = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      key = _ref2.key;

  return key ? this.state.layers.filter(function (layer) {
    return layer[key] !== undefined;
  }) : this.state.layers;
};

/**
 * Legend Position
 */

proto.setLegendPosition = function () {
  var legend_position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'tab';

  this.state.legend_position = legend_position;
};

proto.getLegendPosition = function () {
  return this.state.legend_position;
};

/**
 * End Legend Position
 */

proto.getThumbnail = function () {
  return this.state.thumbnail;
};

proto.getMetadata = function () {
  return this.state.metadata || {};
};

proto.getState = function () {
  return this.state;
};

proto.getPrint = function () {
  return this.state.print || [];
};

proto.getSearches = function () {
  return this.state.search || [];
};

proto.getVectorUrl = function () {
  return this.state.vectorurl;
};

proto.getRasterUrl = function () {
  return this.state.rasterurl;
};

proto.getId = function () {
  return this.state.id;
};

proto.getType = function () {
  return this.state.type;
};

proto.getGid = function () {
  return this.state.gid;
};

proto.getName = function () {
  return this.state.name;
};

proto.getOverviewProjectGid = function () {
  return this.state.overviewprojectgid ? this.state.overviewprojectgid.gid : null;
};

proto.getCrs = function () {
  return this._projection.getCode();
};

/**
 * @param {'major' | 'minor' | 'patch' } qgis.type 
 */
proto.getQgisVersion = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref3.type;

  var index = ['major', 'minor', 'patch'].indexOf(type);
  return -1 === index ? this.state.qgis_version : +this.state.qgis_version.split('.')[index];
};

proto.getProjection = function () {
  return this._projection;
};

proto.getWmsUrl = function () {
  return this.state.WMSUrl;
};

proto.getInfoFormat = function () {
  return 'application/vnd.ogc.gml';
};

proto.getLayersStore = function () {
  return this._layersStore;
};

/// Map Themes

/**
 * Set properties ( checked and visible) from view to layerstree
 * 
 * @param map_theme map theme name
 * @param layerstree // current layerstree of TOC
 */
proto.setLayersTreePropertiesFromMapTheme = function () {
  var _ref5 = _asyncToGenerator(function* (_ref4) {
    var _this5 = this;

    var map_theme = _ref4.map_theme,
        _ref4$layerstree = _ref4.layerstree,
        layerstree = _ref4$layerstree === undefined ? this.state.layerstree : _ref4$layerstree;

    /**
     * mapThemeConfig contain map_theme attributes coming from project map_themes attribute config
     * plus layerstree of map_theme get from api map theme
     */
    var mapThemeConfig = yield this.getMapThemeFromThemeName(map_theme);
    // extract layerstree
    var mapThemeLayersTree = mapThemeConfig.layerstree;
    // create a chages need to apply map_theme changes to map and TOC

    var changes = {
      layers: {} // key is the layer id and object has style, visibility change (Boolean)
    };
    var promises = [];
    /**
     * Function to traverse current layerstree of toc anche get changes with the new one related to map_theme choose
     * @param mapThemeLayersTree // new mapLayerTree
     * @param layerstree // current layerstree
     */
    var groups = [];
    var traverse = function traverse(mapThemeLayersTree, layerstree, checked) {
      mapThemeLayersTree.forEach(function (node, index) {
        if (node.nodes) {
          // case of group
          groups.push({
            node: node,
            group: layerstree[index]
          });
          traverse(node.nodes, layerstree[index].nodes, checked && node.checked);
        } else {
          // case of layer
          node.style = mapThemeConfig.styles[node.id]; // set style from map_theme
          if (layerstree[index].checked !== node.visible) {
            changes.layers[node.id] = {
              visibility: true,
              style: false
            };
          }
          layerstree[index].checked = node.visible;
          // if has a style settled
          if (node.style) {
            var promise = new Promise(function (resolve, reject) {
              var setCurrentStyleAndResolvePromise = function setCurrentStyleAndResolvePromise(node) {
                if (changes.layers[node.id] === undefined) changes.layers[node.id] = {
                  visibility: false,
                  style: false
                };
                changes.layers[node.id].style = _this5.getLayerById(node.id).setCurrentStyle(node.style);
                resolve();
              };
              if (_this5.getLayersStore()) setCurrentStyleAndResolvePromise(node);else // case of starting project creation
                (function (node) {
                  return setTimeout(function () {
                    setCurrentStyleAndResolvePromise(node);
                  })(node);
                });
            });
            promises.push(promise);
          }
        }
      });
    };
    traverse(mapThemeLayersTree, layerstree);
    yield Promise.allSettled(promises);
    // all groups checked after layer checked so is set checked but not visible
    groups.forEach(function (_ref6) {
      var group = _ref6.group,
          _ref6$node = _ref6.node,
          checked = _ref6$node.checked,
          expanded = _ref6$node.expanded;

      group.checked = checked;
      group.expanded = expanded;
    });
    return changes; // eventually information about changes (for example style etc..)
  });

  return function (_x8) {
    return _ref5.apply(this, arguments);
  };
}();

/**
 * get map Theme_configuration
 */
proto.getMapThemeFromThemeName = function () {
  var _ref7 = _asyncToGenerator(function* (map_theme) {
    // get map theme configuration from map_themes project config
    var mapThemeConfig = this.state.map_themes.find(function (map_theme_config) {
      return map_theme_config.theme === map_theme;
    });
    // check if mapThemeConfig exist and if has layerstree (property get from server with a specific api)
    if (mapThemeConfig && undefined === mapThemeConfig.layerstree) {
      mapThemeConfig.layerstree = yield this.getMapThemeConfiguration(map_theme);
    }
    return mapThemeConfig;
  });

  return function (_x9) {
    return _ref7.apply(this, arguments);
  };
}();

/**
 * Get map_style from server
 * 
 * @param map_theme
 * 
 * @returns {Promise<*>}
 */
proto.getMapThemeConfiguration = function () {
  var _ref8 = _asyncToGenerator(function* (map_theme) {
    try {
      var response = yield XHR.get({ url: '' + this.urls.map_themes + map_theme + '/' });
      if (response.result) {
        return response.data;
      }
    } catch (err) {
      console.warn('Error while retreiving map theme configuration', err);
    }
  });

  return function (_x10) {
    return _ref8.apply(this, arguments);
  };
}();

proto.getUrl = function (type) {
  return this.urls[type];
};

/**
 * @returns {Array} spatial bookmarks saved on current QGIS project
 * 
 * @since v3.8
 */
proto.getSpatialBookmarks = function () {
  return this.state.bookmarks || [];
};

/**
 * @returns {{ items: Array, info: Object }} project messages at start time 
 * 
 * @since 3.8.0
 */
proto.getMessages = function () {
  return this.state.messages;
};

module.exports = Project;

},{"app/constant":5,"core/g3wobject":8,"core/layers/layerfactory":19,"core/layers/layersstore":20,"g3w-ol/projection/projections":73,"services/application":310,"store/application-state":328,"utils":419,"utils/crsToCrsObject":376}],42:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

/**
 * Relation Class
 * 
 * @param config
 * 
 * @constructor
 */
function Relation() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var suffix = Date.now();

  /** BACKCOMP (g3w-admin < v.3.7.0) */
  var multi_fields = [].concat(config.fieldRef.referencedField);

  this.state = {
    loading: false,
    id: config.id || 'id_' + suffix,
    name: config.name || 'name_' + suffix,
    origname: config.origname || 'origname_' + suffix,
    father: config.referencedLayer,
    child: config.referencingLayer,
    type: config.type,
    /** @since 3.9.0 */
    editable: config.editable || false,
    /** @since 3.9.0 */
    prefix: config.prefix,
    /** BACKCOMP (g3w-admin < v.3.7.0) */
    fatherField: [].concat(config.fieldRef.referencedField),
    /** BACKCOMP (g3w-admin < v.3.7.0) */
    childField: [].concat(config.fieldRef.referencingField)

  };

  base(this);
}

inherit(Relation, G3WObject);

var proto = Relation.prototype;

/**
 * Get relation id
 *
 * @returns {string}
 */
proto.getId = function () {
  return this.state.id;
};

/**
 * Set Relation id
 *
 * @param id
 */
proto.setId = function (id) {
  this.state.id = id;
};

/**
 * Get Relation name
 *
 * @returns {string}
 */
proto.getName = function () {
  return this.state.name;
};

/**
 * Set Relation name
 *
 * @param name
 */
proto.setName = function (name) {
  this.state.name = name;
};

/**
 * @FIXME `this.state.title` is not defined in class constructor
 * 
 * Get Relation title
 * 
 * @returns { undefined }
 *
 * @returns {*}
 */
proto.getTitle = function () {
  return this.state.title;
};

/**
 * @FIXME `this.state.title` is not defined in class constructor)
 * 
 * Set Relation title
 * 
 * @param title
 * 
 * @returns { undefined }
 * @returns {*}
 */
proto.setTitle = function (title) {
  return this.state.title = title;
};

/**
 * @returns { string[] } layerId of child relation
 */
proto.getChild = function () {
  return this.state.child;
};

/**
 * @returns { string[] } layerId of father relation
 */
proto.getFather = function () {
  return this.state.father;
};

/**
 * @returns state Object of relation
 */
proto.getState = function () {
  return this.state;
};

/**
 * @returns { 'MANY' | ONE' | string } relation type
 */
proto.getType = function () {
  return this.state.type;
};

/**
 * @returns {{ father, child }} relation fields
 */
proto.getFields = function () {
  return {
    father: this.state.fatherField,
    child: this.state.childField
  };
};

/**
 * Return father relation field name
 *
 * @returns {*}
 */
proto.getFatherField = function () {
  return this.state.fatherField;
};

/**
 * Return relation child layer field name
 *
 * @returns {*}
 */
proto.getChildField = function () {
  return this.state.childField;
};

/**
 * Set Loading state relation (for editing purpose)
 *
 * @param bool
 */
proto.setLoading = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.loading = bool;
};

/**
 * Check Loading state Relation (for editing purpose)
 *
 * @returns { boolean }
 */
proto.isLoading = function () {
  return this.state.loading;
};

/**
 * Get editable property
 *
 * @since 3.9.0
 */
proto.isEditable = function () {
  return this.state.editable;
};

/**
 * End editing loading purpose
 */

/**
 * Get Prefix (for Relation 1:1)
 *
 * @returns String
 *
 * @since 3.9.0
 */
proto.getPrefix = function () {
  return this.state.prefix;
};

module.exports = Relation;

},{"core/g3wobject":8,"utils":419}],43:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file common vue instances used to watch object changes or to emit events
 * 
 * NB: node.js modules are singletons by default.
 * 
 * @see https://medium.com/@lazlojuly/are-node-js-modules-singletons-764ae97519af
 */

/**
 * ORIGINAL SOURCE: src/app/g3w-ol/constants.js@3.8.6
 */
var VM = exports.VM = new Vue();

/**
 * ORIGINAL SOURCE: src\app\gui\catalog\vue\catalogeventhub.js@3.8.6
 */
var CatalogEventBus = exports.CatalogEventBus = new Vue();

/**
 * ORIGINAL SOURCE: src/app/gui/relations/vue/relationeventbus.js@3.8.6
 */
var RelationEventBus = exports.RelationEventBus = new Vue();

/**
 * ORIGINAL SOURCE: src/app/gui/sidebar/eventbus.js@3.8.6
 */
var SidebarEventBus = exports.SidebarEventBus = new Vue();

exports.default = {
  VM: VM,
  CatalogEventBus: CatalogEventBus,
  RelationEventBus: RelationEventBus,
  SidebarEventBus: SidebarEventBus
};

},{}],44:[function(require,module,exports){
var Control = require('g3w-ol/controls/control');

function AddLayersControl() {
  var options = {
    name: "addlayer",
    tipLabel: "sdk.mapcontrols.addlayer.tooltip",
    label: "\uE907"
  };
  Control.call(this, options);
  this._layerstore = null;
}

ol.inherits(AddLayersControl, Control);

var proto = AddLayersControl.prototype;

proto.setMap = function (map) {
  var _this = this;

  Control.prototype.setMap.call(this, map);
  $(this.element).on('click', function () {
    return _this.dispatchEvent('addlayer');
  });
};

proto.layout = function (map) {
  Control.prototype.layout.call(this, map);
};

proto.getLayersSore = function () {
  return this._layerstore;
};

proto.setLayersStore = function (layersStore) {
  this._layerstore = layersStore;
};

module.exports = AddLayersControl;

},{"g3w-ol/controls/control":47}],45:[function(require,module,exports){
var _mergeOptions = require('utils/mergeOptions');

var AreaIteraction = require('g3w-ol/interactions/areainteraction');
var MeasureControl = require('g3w-ol/controls/measurecontrol');

var AreaControl = function AreaControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    tipLabel: "sdk.mapcontrols.measures.area.tooltip",
    label: '\uE909',
    clickmap: true, // set ClickMap
    interactionClass: AreaIteraction
  };
  options = (0, _mergeOptions.mergeOptions)(options, _options);
  MeasureControl.call(this, options);
};

ol.inherits(AreaControl, MeasureControl);

module.exports = AreaControl;

},{"g3w-ol/controls/measurecontrol":52,"g3w-ol/interactions/areainteraction":64,"utils/mergeOptions":432}],46:[function(require,module,exports){
var _constant = require('app/constant');

var _getAllPolygonGeometryTypes = require('utils/getAllPolygonGeometryTypes');

var _mergeOptions = require('utils/mergeOptions');

var InteractionControl = require('g3w-ol/controls/interactioncontrol'); /**
                                                                         * @file
                                                                         * @since v3.8
                                                                         */


var VALIDGEOMETRIES = (0, _getAllPolygonGeometryTypes.getAllPolygonGeometryTypes)();

var BaseQueryPolygonControl = function BaseQueryPolygonControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options = options,
      _options$spatialMetho = _options.spatialMethod,
      spatialMethod = _options$spatialMetho === undefined ? _constant.SPATIAL_METHODS[0] : _options$spatialMetho,
      onSelectlayer = _options.onSelectlayer,
      interactionClass = _options.interactionClass;


  var default_options = {
    offline: false,
    // update selected layer
    onSelectlayer: onSelectlayer,
    clickmap: true, // set ClickMap
    interactionClass: interactionClass,
    spatialMethod: spatialMethod,
    toggledTool: {
      type: 'spatialMethod',
      how: 'toggled' // or hover
    },
    onhover: true
  };

  options = (0, _mergeOptions.mergeOptions)(options, default_options);

  options.geometryTypes = VALIDGEOMETRIES;

  InteractionControl.call(this, options);
};

ol.inherits(BaseQueryPolygonControl, InteractionControl);

module.exports = BaseQueryPolygonControl;

},{"app/constant":5,"g3w-ol/controls/interactioncontrol":50,"utils/getAllPolygonGeometryTypes":389,"utils/mergeOptions":432}],47:[function(require,module,exports){
var _MapControlButton = require('components/MapControlButton');

var _MapControlButton2 = _interopRequireDefault(_MapControlButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @FIXME add description
 */
var layout = function layout(_ref) {
  var map = _ref.map,
      position = _ref.position,
      element = _ref.element;
};

/**
 * @param {Object}  options 
 * @param {string}  options.name
 * @param {boolean} options.enabled 
 */
var Control = function Control() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$name = options.name,
      name = _options$name === undefined ? "" : _options$name,
      _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      _options$enabled = options.enabled,
      enabled = _options$enabled === undefined ? false : _options$enabled;

  /**
   * @FIXME add description
   */

  this._enabled = enabled;

  /**
   * @FIXME add description
   */
  this.offline = options.offline !== undefined ? options.offline : true;

  /**
   * @FIXME add description
   */
  this.name = name.split(' ').join('-').toLowerCase();

  /**
   * @FIXME add description
   */
  this.id = this.name + '_' + Math.floor(Math.random() * 1000000);

  /**
   * store eventKey and original havenHandler
   */
  this.eventKeys = {};

  /*
    tl: top-left
    tr: top-right
    bl: bottom-left
    bt: bottom-right
   */
  this.positionCode = options.position || 'tl';

  /**
   * @FIXME add description
   */
  this.priority = options.priority || 0;

  if (!options.element) {
    var mapControlButtonVue = Vue.extend((0, _MapControlButton2.default)({
      className: "ol-" + this.name.split(' ').join('-').toLowerCase(),
      customClass: options.customClass,
      tipLabel: options.tipLabel || this.name,
      label: options.label || ''
    }));
    options.element = new mapControlButtonVue().$mount().$el;
  }

  // button click handler
  $(options.element).on('click', options.buttonClickHandler || Control.prototype._handleClick.bind(this));

  // parent constructor
  ol.control.Control.call(this, options);

  this.setVisible(visible);

  this._postRender();
};

ol.inherits(Control, ol.control.Control);

var proto = Control.prototype;

/**
 * return if clickmap
 */
proto.isClickMap = function () {
  return this.clickmap;
};

/**
 * @FIXME add description
 */
proto.isToggled = function () {
  return this._toggled;
};

/**
 * @FIXME add description
 */
proto.setEventKey = function (_ref2) {
  var eventType = _ref2.eventType,
      eventKey = _ref2.eventKey;

  this.eventKeys[eventType] = {
    eventKey: eventKey,
    originalHandler: eventKey.listener
  };
};

/**
 * Reset original handler method of control event.
 * 
 * @param {string} eventType
 */
proto.resetOriginalHandlerEvent = function (eventType) {
  if (this.eventKeys[eventType] && this.eventKeys[eventType].eventKey) {
    ol.Observable.unByKey(this.eventKeys[eventType].eventKey);
    this.eventKeys[eventType].eventKey = this.on(eventType, this.eventKeys[eventType].originalHandler);
  }
};

/**
 * Override original handler method of control event.
 * 
 * @param {string} eventType
 * @param {() => {}} handler
 */
proto.overwriteEventHandler = function (_ref3) {
  var eventType = _ref3.eventType,
      handler = _ref3.handler;

  if (this.eventKeys[eventType] && this.eventKeys[eventType].eventKey) {
    ol.Observable.unByKey(this.eventKeys[eventType].eventKey);
    this.eventKeys[eventType].eventKey = this.on(eventType, handler);
  }
};

/**
 * @FIXME add description
 */
proto.getPosition = function (positionCode) {
  positionCode = positionCode || this.positionCode;
  var position = {};
  position['top'] = positionCode.indexOf('t') > -1 ? true : false;
  position['left'] = positionCode.indexOf('l') > -1 ? true : false;
  position['bottom'] = positionCode.indexOf('b') > -1 ? true : false;
  position['right'] = positionCode.indexOf('r') > -1 ? true : false;
  return position;
};

/**
 * Handle toggle of map controls
 * 
 * @param event
 */
proto._handleClick = function (event) {
  var _this = this;

  event.preventDefault();
  var map = this.getMap();
  var resetControl = null;
  // remove all the other, eventually toggled, interactioncontrols
  var controls = map.getControls();
  this._toggled && controls.forEach(function (control) {
    if (control.id && control.toggle && control.id !== _this.id) {
      control.toggle(false);
      if (control.name === 'reset') resetControl = control;
    }
  });
  if (!this._toggled && resetControl) resetControl.toggle(true);
  this.dispatchEvent('controlclick');
};

/**
 * shift control's position
 */
proto.shiftPosition = function (position) {
  $(this.element).css(hWhere, position + 'px');
};

/**
 * layout handler 
 */
proto.layout = function (map) {
  if (map) {
    var position = this.getPosition();
    var element = $(this.element);
    layout({ map: map, position: position, element: element });
  }
};

/**
 * change layout of controls
 */
proto.changelayout = function (map) {
  // overwrite to customize beahviour
};

/**
 * Called when a control is added ore removed to map
 * 
 * @param {ol.Map | null} map instace to be added (null = remove from map)
 */
proto.setMap = function (map) {
  if (map) {
    this.layout(map);
    ol.control.Control.prototype.setMap.call(this, map);
  }
};

/**
 * @FIXME add description
 */
proto.showControl = function () {
  $(this.element).show();
};

/**
 * Hide control and move all controls that sit on his right position
 */
proto.hideControl = function () {
  var position = $(this.element).position().left;
  var controlWidth = $(this.element).outerWidth();
  var newPosition = position;
  var controls = $(this.element).siblings('.ol-control-tl');
  controls.each(function () {
    if ($(this).position().left > position) {
      newPosition = $(this).position().left;
      if (controlWidth > $(this).outerWidth()) {
        position = position + (controlWidth - $(this).outerWidth());
      }
      $(this).css('left', position + 'px');
      position = newPosition;
      controlWidth = $(this).outerWidth();
    }
  });
  $(this.element).hide();
};

/**
 * Toggle pointer events and `g3w-ol-disabled` class on map control button
 * 
 * @param {boolean} enabled wheter the map control button is clickable
 */
proto.setEnable = function (enabled) {
  $(this.element).find('button').first().toggleClass('g3w-ol-disabled', !enabled);
  if (!enabled && this._interaction) {
    this._interaction.setActive(false);
  }
  this._enabled = enabled;
};

/**
 * @FIXME add description
 */
proto.getEnable = function () {
  return this._enabled;
};

/**
 * @FIXME add description
 */
proto.setVisible = function () {
  var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this._visible = visible;
  $(this.element)[visible ? 'show' : 'hide']();
};

/**
 * @FIXME add description
 */
proto.isVisible = function () {
  return this._visible;
};

/**
 * @FIXME add description
 */
proto._postRender = function () {};

module.exports = Control;

},{"components/MapControlButton":210}],48:[function(require,module,exports){
var InteractionControl = require('g3w-ol/controls/interactioncontrol');

function GeolocationControl() {
  var options = {
    visible: false, // set initial to false. Is set visible if is autorized
    offline: false,
    name: "geolocation",
    tipLabel: "sdk.mapcontrols.geolocation.tooltip",
    label: "\uE904"
  };
  this._layer = new ol.layer.Vector({
    source: new ol.source.Vector(),
    style: new ol.style.Style({
      text: new ol.style.Text({
        offsetY: -15, //move marker icon on base point coordinate and not center
        text: "\uF3C5",
        font: '900 3em "Font Awesome 5 Free"',
        fill: new ol.style.Fill({
          color: 'red'
        })
      })
    })
  });
  InteractionControl.call(this, options);
}

ol.inherits(GeolocationControl, InteractionControl);

var proto = GeolocationControl.prototype;

/**
 * Method to add market position layer and feature point always on top of map
 * @param map
 * @param coordinates
 * @param show
 * @private
 */
proto._showMarker = function (_ref) {
  var map = _ref.map,
      coordinates = _ref.coordinates,
      _ref$show = _ref.show,
      show = _ref$show === undefined ? true : _ref$show;

  //in case of control is initialized
  if (this._layer) {
    this._layer.getSource().clear();
    if (show) {
      map.getView().setCenter(coordinates);
      var feature = new ol.Feature({
        geometry: new ol.geom.Point(coordinates)
      });
      this._layer.getSource().addFeature(feature);
      map.addLayer(this._layer);
    } else map.removeLayer(this._layer);
  }
};

proto.getMap = function () {
  return InteractionControl.prototype.getMap.call(this);
};

proto.setMap = function (map) {
  var _this = this;

  var toggledKeyEvent = void 0; // key toggled event handler
  InteractionControl.prototype.setMap.call(this, map);

  var geolocation = new ol.Geolocation({
    projection: map.getView().getProjection(),
    tracking: true, // set tracking
    trackingOptions: {
      enableHighAccuracy: true
    }
  });

  geolocation.on('change:position', function () {
    var coordinates = geolocation.getPosition();
    if (coordinates) {
      if (!_this.isVisible()) {
        _this.setVisible(true);
        $(_this.element).removeClass('g3w-ol-disabled');
        geolocation.dispatchEvent('authorized');
      }
      _this._showMarker({
        map: map,
        coordinates: coordinates,
        show: _this.isToggled()
      });
    } else _this.hideControl(); // remove control from map control flow
  });

  geolocation.once('error', function (evt) {
    _this.hideControl();
    _this._layer = null;
    evt.code !== 1 && _this.dispatchEvent('error');
    ol.Observable.unByKey(toggledKeyEvent);
    toggledKeyEvent = null;
  });

  //only when authorized register toogled event
  geolocation.once('authorized', function () {
    toggledKeyEvent = _this.on('toggled', function () {
      var coordinates = geolocation.getPosition();
      _this._showMarker({
        map: map,
        coordinates: coordinates,
        show: _this.isToggled()
      });
    });
  });
};

module.exports = GeolocationControl;

},{"g3w-ol/controls/interactioncontrol":50}],49:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ScreenshotControl = require('g3w-ol/controls/screenshotcontrol');

function GeoScreenshotControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  ScreenshotControl.call(this, _extends({
    name: "maptoimagegeo",
    tipLabel: "Geo Screenshot",
    label: "\uE900"
  }, options));
}

ol.inherits(GeoScreenshotControl, ScreenshotControl);

module.exports = GeoScreenshotControl;

},{"g3w-ol/controls/screenshotcontrol":61}],50:[function(require,module,exports){
var _constant = require('app/constant');

var _eventbus = require('app/eventbus');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _mapControls = require('store/map-controls');

var _mapControls2 = _interopRequireDefault(_mapControls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var Control = require('g3w-ol/controls/control');

var InteractionControl = function InteractionControl() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      _options$enabled = options.enabled,
      enabled = _options$enabled === undefined ? true : _options$enabled,
      _options$toggled = options.toggled,
      toggled = _options$toggled === undefined ? false : _options$toggled,
      _options$clickmap = options.clickmap,
      clickmap = _options$clickmap === undefined ? false : _options$clickmap,
      _options$interactionC = options.interactionClass,
      interactionClass = _options$interactionC === undefined ? null : _options$interactionC,
      _options$autountoggle = options.autountoggle,
      autountoggle = _options$autountoggle === undefined ? false : _options$autountoggle,
      _options$geometryType = options.geometryTypes,
      geometryTypes = _options$geometryType === undefined ? [] : _options$geometryType,
      _options$onhover = options.onhover,
      onhover = _options$onhover === undefined ? false : _options$onhover,
      _options$help = options.help,
      help = _options$help === undefined ? null : _options$help,
      toggledTool = options.toggledTool,
      _options$interactionC2 = options.interactionClassOptions,
      interactionClassOptions = _options$interactionC2 === undefined ? {} : _options$interactionC2,
      _options$layers = options.layers,
      layers = _options$layers === undefined ? [] : _options$layers,
      spatialMethod = options.spatialMethod;

  /**
   * Project layers dependencies
   * 
   * @since 3.8.0
   */

  this.layers = layers;

  /**
   * @since 3.8.0
   */
  this.unwatches = [];

  this.listenLayersVisibilityChange();

  this._visible = visible;

  this._toggled = false;

  /**
   * Check if interact with map
   */
  this.clickmap = clickmap;

  this._interactionClass = interactionClass;

  this._interaction = null;

  this._autountoggle = autountoggle;

  /**
   * Array of types geometries
   */
  this._geometryTypes = geometryTypes;

  this._onhover = onhover;

  this._help = help;

  /**
   * Used to show help info button
   */
  this._helpButton;

  /**
   * Used to show toolbutton
   */
  this._toolButton;

  /**
   * @type { 'intersect' | 'within' }
   */
  this.spatialMethod = spatialMethod;

  this.toggledTool;

  this._interactionClassOptions = interactionClassOptions;

  options.buttonClickHandler = InteractionControl.prototype._handleClick.bind(this);

  Control.call(this, options);

  // in case of toggled true, then ... ?
  if (true === toggled) {
    this.on('setMap', function () {
      return _this.toggle(toggled);
    });
  }

  // create an help message
  if (this._help) {
    this._createModalHelp();
  }

  // create tool
  if (toggledTool) {
    this.createControlTool(toggledTool);
  }

  // set enabled
  this.setEnable(enabled);

  // check if spatial method is set
  if (this.spatialMethod) {
    this.handleChangeSpatialMethod(this.spatialMethod);
  }
};

ol.inherits(InteractionControl, Control);

var proto = InteractionControl.prototype;

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since 3.8.0
 */
proto.onSelectLayer = function () {};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since 3.8.0
 */
proto.runSpatialQuery = function () {};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since 3.8.0
 */
proto.clear = function () {};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since 3.8.0
 */
proto.onAddExternalLayer = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref.layer,
      unWatches = _ref.unWatches;
};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since 3.8.0
 */
proto.onRemoveExternalLayer = function (layer) {};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since 3.8.0
 */
proto.handleSelectedLayer = function (event) {};

/**
 * @virtual method need to be implemented by subclasses
 * 
 * @param {{ type: {string}, data: any}} layer event
 * 
 * @since 3.8.0
 */
proto.handleExternalSelectedLayer = function (layer) {};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @param layers
 * @returns {boolean}
 *
 * @since 3.8.0
 */
proto.checkVisibile = function (layers) {
  return true;
};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @param layers
 * @returns {boolean}
 *
 * @since 3.8.0
 */
proto.checkVisibile = function (layers) {
  return true;
};

/**
 * @virtual method need to be implemented by subclasses
 *
 * @since v3.8.0
 */
proto.listenLayersVisibilityChange = function () {};

/**
 * method override by subclasses
 *
 * @since 3.8.0
 */
proto.change = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.layers = layers;
  var visible = this.checkVisibile(layers);
  this.setVisible(visible);
  this.setEnable(false);
  this.listenLayersVisibilityChange();
};

proto.isClickMap = function () {
  return this.clickmap;
};

/**
 * Enable map control dom
 */
proto.enable = function () {
  $(this.element).removeClass('g3w-disabled');
};

proto.disable = function () {
  $(this.element).addClass('g3w-disabled');
};

/**
 * @param {{ type: {'spatialMethod' | 'custom'}, component: unknown, how: {'toggled' | 'hover'} }} toggledTool 
 */
proto.createControlTool = function () {
  var _this2 = this;

  var toggledTool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  /**
   * how can be {
   *  'toggled'(default) => show tools when control is toggled
   *  'hover' =>  (show button tool as info help)
   * }
   */
  var type = toggledTool.type,
      component = toggledTool.component,
      _toggledTool$how = toggledTool.how,
      how = _toggledTool$how === undefined ? "toggled" : _toggledTool$how;

  switch (type) {
    case 'spatialMethod':
      var method = this.getSpatialMethod();
      this.toggledTool = {
        data: function data() {
          this.methods = _constant.SPATIAL_METHODS;
          return {
            method: method
          };
        },

        template: '\n          <div style="width: 100%; padding: 5px;">\n            <select ref="select" style="width: 100%"  :search="false" v-select2="\'method\'">\n              <option v-for="method in methods">{{method}}</option>\n            </select>\n          </div>',
        watch: {
          'method': function method(_method) {
            return _this2.setSpatialMethod(_method);
          }
        },
        created: function created() {
          _gui2.default.setCloseUserMessageBeforeSetContent(false);
        },
        beforeDestroy: function beforeDestroy() {
          _gui2.default.setCloseUserMessageBeforeSetContent(true);
        }
      };
      break;
    case 'custom':
      this.toggledTool = component;
      break;
    // if we want to create a button (as info on hover)
  }
  switch (how) {
    case 'hover':
      this._createToolOnHoverButton();
      break;
  }
};

proto._createToolOnHoverButton = function () {
  var _this3 = this;

  if (this._onhover) {
    this._toolButton = $('<span style="display:none" class="tool_mapcontrol_button"><i class="' + _gui2.default.getFontClass('tool') + '"></i></span>');
    $(this.element).prepend(this._toolButton);
    this._toolButton.on('click', function (event) {
      event.stopPropagation();
      _this3.showToggledTool(true);
    });
    $(this.element).hover(function () {
      return _this3._toggled && _this3._toolButton.show();
    });
    $(this.element).mouseleave(function () {
      return _this3._toolButton.hide();
    });
  }
};

proto.showToggledTool = function () {
  var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (show) {
    _gui2.default.showUserMessage({
      title: '',
      type: 'tool',
      size: 'small',
      closable: this._toolButton ? true : false,
      hooks: {
        body: this.toggledTool
      }
    });
  } else _gui2.default.closeUserMessage();
};

/**
 * Show help message
 */
proto._showModalHelp = function () {
  _gui2.default.showModalDialog({
    title: t(this._help.title),
    message: t(this._help.message)
  });
};

/**
 * Create modal help
 */
proto._createModalHelp = function () {
  var _this4 = this;

  if (this._onhover) {
    this._helpButton = $('<span style="display:none" class="info_mapcontrol_button">i</span>');
    $(this.element).prepend(this._helpButton);
    this._helpButton.on('click', function (event) {
      event.stopPropagation();
      _this4._showModalHelp();
    });
    $(this.element).hover(function () {
      return _this4._helpButton.show();
    });
    $(this.element).mouseleave(function () {
      return _this4._helpButton.hide();
    });
  }
};

proto.getGeometryTypes = function () {
  return this._geometryTypes;
};

proto.isToggled = function () {
  return this._toggled;
};

/**
 * Get dom bottom
 * 
 * @returns {JQuery<HTMLElement> | jQuery | HTMLElement}
 */
proto.getControlBottom = function () {
  return $(this.element).find('button').first();
};

proto.addClassToControlBottom = function () {
  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var controlButton = this.getControlBottom();
  controlButton.addClass(className);
};

proto.removeClassToControlBottom = function () {
  var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var controlButton = this.getControlBottom();
  controlButton.removeClass(className);
};

/**
 * Set button status (pressed / not pressed)
 * 
 * @param {boolean} [toggled]
 * 
 * @fires toggled event
 */
proto.toggle = function () {
  var toggled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this._toggled;


  // skip if button is already toggled or un-toggled
  if (this._toggled === toggled) {
    return;
  }

  this._toggled = toggled;

  // TODO: simplify this by removing all that short circuiting logic
  if (toggled) {
    this._interaction && this._interaction.setActive(true);
    this.addClassToControlBottom('g3w-ol-toggled');
    this._toolButton && this._toolButton.show();
  } else {
    this._help && this._helpButton.hide();
    this._interaction && this._interaction.setActive(false);
    this.removeClassToControlBottom('g3w-ol-toggled');
    this._toolButton && this._toolButton.hide();
    this.toggledTool && this.showToggledTool(false);
  }

  if (undefined === this._toolButton && this.toggledTool) {
    this.showToggledTool(this._toggled);
  }

  this.dispatchEvent({ type: 'toggled', toggled: toggled });
};

proto.getGeometryTypes = function () {
  return this._geometryTypes;
};

proto.setGeometryTypes = function (types) {
  this._geometryTypes = types;
};

/**
 * @param {ol.Map} map
 * 
 * @fires setMap event
 */
proto.setMap = function (map) {

  Control.prototype.setMap.call(this, map);

  if (!this._interaction && this._interactionClass) {
    this._interaction = new this._interactionClass(this._interactionClassOptions);
    map.addInteraction(this._interaction);
    this._interaction.setActive(false);
  }

  /** @since 3.8.0 */
  this.dispatchEvent({ type: 'setMap', map: map });
};

proto._handleClick = function (evt) {
  if (this._enabled) {
    this.toggle();
    Control.prototype._handleClick.call(this, evt);
  }
};

proto.getInteraction = function () {
  return this._interaction;
};

/**
 * Method to set filter operation intersect or Contains
 */
proto.setSpatialMethod = function () {
  var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'intersects';

  this.spatialMethod = method;
  this.dispatchEvent({
    type: 'change-spatial-method',
    spatialMethod: this.spatialMethod
  });
};

proto.getSpatialMethod = function () {
  return this.spatialMethod;
};

proto.setLayers = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.layers = layers;
};

/**
 * @param { unknown | null } layer
 *
 * @since 3.8.0
 */
proto.setSelectedLayer = function (layer) {
  _mapControls2.default.setSelectedLayer(layer);
};

/**
 * @since 3.8.0
 */
proto.getSelectedLayer = function () {
  return _mapControls2.default.getSelectedLayer();
};

/**
 * @since 3.8.0
 */
proto.getExternalLayers = function () {
  return _mapControls2.default.getExternalLayers();
};

/**
 * @param { 'intersects' | 'within' } spatialMethod
 * 
 * @listens change-spatial-method
 * 
 * @since 3.8.0
 */
proto.handleChangeSpatialMethod = function (spatialMethod) {
  var _this5 = this;

  var eventKey = null;

  var unlistenSpatialMethodChange = function unlistenSpatialMethodChange() {
    ol.Observable.unByKey(eventKey);
    eventKey = null;
  };

  this.on('toggled', function (_ref2) {
    var toggled = _ref2.toggled;

    if (true === toggled) {
      eventKey = _this5.on('change-spatial-method', _this5.runSpatialQuery);
    } else if (null !== eventKey) {
      unlistenSpatialMethodChange();
      // reset to default
      _this5.setSpatialMethod(spatialMethod);
      _this5.clear();
    }
  });
};

/**
 * @since 3.8.0
 */
proto.watchLayer = function (expOrFn, callback) {
  return _eventbus.VM.$watch(expOrFn, callback);
};

/**
 * @returns {boolean}
 *
 * @since 3.8.0
 */
proto.isSelectedLayerVisible = function () {
  return 'function' === typeof this.getSelectedLayer().isVisible ? this.getSelectedLayer().isVisible() // in case of a project project
  : this.getSelectedLayer().visible // in case of external layer
  ;
};

/**
 * @returns {boolean} whether at least one of stored `this.layers` is visible
 *
 * @since 3.8.0
 */
proto.hasVisibleProjectLayer = function () {
  return !!(this.layers.length > 0 && this.layers.find(function (layer) {
    return layer.isVisible();
  }));
};

/**
 * @returns {boolean} whether at least one of stored `this.getExternalLayers()` is visible
 *
 * @since 3.8.0
 */
proto.hasVisibleExternalLayer = function () {
  var _this6 = this;

  return !!this.getExternalLayers().find(function (layer) {
    return layer !== _this6.layer && true === layer.visible;
  });
};

/**
 * @returns {boolean} whether at least one of stored `this.layers` or `this.getExternalLayers()` is visible
 * 
 * @since 3.8.0
 */
proto.hasVisibleLayers = function () {
  return !!(this.hasVisibleProjectLayer() || this.hasVisibleExternalLayer());
};

/**
 * @returns {boolean} whether selectedLayer is not external
 * 
 * @since 3.8.0
 */
proto.addExternalLayerToResult = function () {
  var _this7 = this;

  return null === this.getSelectedLayer() || "undefined" !== typeof this.getExternalLayers().find(function (layer) {
    return layer === _this7.getSelectedLayer();
  });
};

/**
 * @returns {boolean}
 * 
 * @since 3.8.0
 */
proto.isExternalLayerSelected = function () {
  var _this8 = this;

  return null !== this.getSelectedLayer() && "undefined" !== typeof this.getExternalLayers().find(function (layer) {
    return layer === _this8.getSelectedLayer();
  });
};

module.exports = InteractionControl;

},{"app/constant":5,"app/eventbus":43,"core/i18n/i18n.service":9,"g3w-ol/controls/control":47,"services/gui":319,"store/map-controls":332}],51:[function(require,module,exports){
var _mergeOptions = require('utils/mergeOptions');

var LenghtIteraction = require('g3w-ol/interactions/lengthinteraction');
var MeasureControl = require('g3w-ol/controls/measurecontrol');

var LengthControl = function LengthControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    tipLabel: "sdk.mapcontrols.measures.length.tooltip",
    label: '\uE908',
    clickmap: true, // set ClickMap
    interactionClass: LenghtIteraction
  };

  options = (0, _mergeOptions.mergeOptions)(options, _options);
  MeasureControl.call(this, options);
};

ol.inherits(LengthControl, MeasureControl);

module.exports = LengthControl;

},{"g3w-ol/controls/measurecontrol":52,"g3w-ol/interactions/lengthinteraction":66,"utils/mergeOptions":432}],52:[function(require,module,exports){
var InteractionControl = require('g3w-ol/controls/interactioncontrol');

var MeasureControl = function MeasureControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._map = null;
  InteractionControl.call(this, options);
};

ol.inherits(MeasureControl, InteractionControl);

var proto = MeasureControl.prototype;

/**
 * @param {ol.Map} map 
 */
proto.setMap = function (map) {
  InteractionControl.prototype.setMap.call(this, map);
};

/**
 * @param {boolean} toggle 
 */
proto.toggle = function (toggle) {

  InteractionControl.prototype.toggle.call(this, toggle);

  // clean up measurements (if it was activated)
  if (!this.isToggled() && this.getInteraction()) {
    this.getInteraction().clear();
  }
};

module.exports = MeasureControl;

},{"g3w-ol/controls/interactioncontrol":50}],53:[function(require,module,exports){
var MousePositionControl = function MousePositionControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.target = options.target || 'mouse-position-control';
  ol.control.MousePosition.call(this, options);
};

ol.inherits(MousePositionControl, ol.control.MousePosition);

module.exports = MousePositionControl;

var proto = MousePositionControl.prototype;

proto.offline = true;

proto.setEnable = function (bool) {
  bool ? $(this.element) : $(this.element);
};

proto.setMap = function (map) {
  if (map) {
    $(this.element).removeClass('ol-control');
    ol.control.MousePosition.prototype.setMap.call(this, map);
  }
};

},{}],54:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Control = require('g3w-ol/controls/control');

function OnClickControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._originalonlick = null;
  this._onclick = options.onclick;
  Control.call(this, options);
}

ol.inherits(OnClickControl, Control);

var proto = OnClickControl.prototype;

proto.overwriteOnClickEvent = function (clickHandler) {
  this._originalonlick = this._originalonlick || this._onclick;
  this._onclick = clickHandler;
};

proto.resetOriginalOnClickEvent = function () {
  this._onclick = this._originalonlick || this._onclick;
  this._originalonlick = null;
};

proto.setMap = function (map) {
  var _this = this;

  Control.prototype.setMap.call(this, map);
  var controlElement = $(this.element);
  var buttonControl = controlElement.children('button');
  var cliccked = false;
  controlElement.on('click', _asyncToGenerator(function* () {
    if (!cliccked) {
      cliccked = true;
      buttonControl.addClass('g3w-ol-disabled');
      _this._onclick && (yield _this._onclick());
      buttonControl.removeClass('g3w-ol-disabled');
      cliccked = false;
    }
  }));
};

module.exports = OnClickControl;

},{"g3w-ol/controls/control":47}],55:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    throttle = _require.throttle;

var InteractionControl = require('g3w-ol/controls/interactioncontrol');

/**
 * Catalog layers (TOC) properties that need to be satisfied
 */
var layersFilterObject = {
  SELECTED_OR_ALL: true, // selected or all
  FILTERABLE: true, // see: src/app/core/layers/layer.js#L925
  VISIBLE: true // need to be visible
};

var condition = {
  filtrable: {
    ows: 'WFS'
  }
};

var QueryBBoxControl = function QueryBBoxControl() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$spatialMetho = options.spatialMethod,
      spatialMethod = _options$spatialMetho === undefined ? SPATIAL_METHODS[0] : _options$spatialMetho;

  /**
   * @FIXME add description
   */

  this._startCoordinate = null;

  /**
   * @FIXME add description
   */
  this.unwatches = [];

  /**
   * @FIXME add description
   */
  var layers = _gui2.default.getService('map').filterableLayersAvailable(condition) || [];
  layers.forEach(function (layer) {
    return layer.setTocHighlightable(true);
  });

  var _options = _extends({}, options, {
    layers: layers,
    offline: false,
    name: "querybbox",
    tipLabel: "sdk.mapcontrols.querybybbox.tooltip",
    label: options.label || '\uE902',
    clickmap: true, // set ClickMap
    interactionClass: ol.interaction.DragBox,
    onhover: true,
    toggledTool: {
      type: 'spatialMethod',
      how: 'toggled' // or hover
    },
    spatialMethod: spatialMethod,
    help: {
      title: "sdk.mapcontrols.querybybbox.help.title",
      message: "sdk.mapcontrols.querybybbox.help.message"
    }
  });

  InteractionControl.call(this, _options);

  this.setEnable(this.hasVisibleLayers());

  /**
   * Store bbox coordinates
   * 
   * @type {ol.coordinate}
   */
  this.bbox = null;

  /**
   * Set `layer.tochighlightable` to external layer to show highlight class
   * 
   * @since 3.8.0
   */
  this.on('toggled', function (_ref) {
    var toggled = _ref.toggled;

    _this.getExternalLayers().forEach(function (layer) {
      return layer.tochighlightable = toggled;
    });
  });
};

ol.inherits(QueryBBoxControl, InteractionControl);

var proto = QueryBBoxControl.prototype;

/**
 * @deprecated since 3.7
 * 
 * @param layers
 */
proto.change = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.layers = layers;
  this.setEnable(this.hasVisibleLayers());
  this.listenLayersVisibilityChange();
};

proto.checkVisible = function () {
  return this.layers.length > 0 || this.getExternalLayers().length > 0;
};

/**
 * @param {ol.Map} map
 * 
 * @listens ol.interaction.DragBox~boxstart
 * @listens ol.interaction.DragBox~boxend
 */
proto.setMap = function (map) {
  var _this2 = this;

  InteractionControl.prototype.setMap.call(this, map);

  this._interaction.on('boxstart', function (evt) {
    return _this2._startCoordinate = evt.coordinate;
  });

  this._interaction.on('boxend', throttle(function (evt) {

    _this2.bbox = ol.extent.boundingExtent([_this2._startCoordinate, evt.coordinate]);

    _this2.dispatchEvent({ type: 'bboxend', extent: _this2.bbox });

    _this2._startCoordinate = null;

    if (_this2._autountoggle) {
      _this2.toggle();
    }
  }));

  this.setEventKey({
    eventType: 'bboxend',
    eventKey: this.on('bboxend', this.runSpatialQuery)
  });
};

/**
 * @since 3.8.0
 */
proto.onSelectLayer = function (layer) {
  if (layer) {
    var findLayer = this.layers.find(function (_layer) {
      return _layer === layer;
    });
    this.setEnable(!!findLayer && findLayer.isVisible());
  } else {
    this.setEnable(this.hasVisibleLayers());
  }
  this.toggle(this.isToggled() && this.getEnable());
};

/**
 * @since 3.8.0
 */
proto.listenLayersVisibilityChange = function () {
  var _this3 = this;

  this.unwatches.forEach(function (unwatch) {
    return unwatch();
  });
  this.unwatches.splice(0);
  this.layers.forEach(function (layer) {
    _this3.unwatches.push(_this3.watchLayer(function () {
      return layer.state.visible;
    }, function (visible) {
      if (true === layer.state.selected) {
        _this3.setEnable(visible);
      } else {
        _this3.setEnable(_this3.hasVisibleLayers());
      }
      _this3.toggle(_this3.isToggled() && _this3.getEnable());
    }));
  });
};

/**
 * @returns {Promise<void>}
 * 
 * @since 3.8.0
 */
proto.runSpatialQuery = _asyncToGenerator(function* () {
  // skip if bbox is not set
  if (null === this.bbox) {
    return;
  }
  _gui2.default.closeOpenSideBarComponent();
  try {
    yield _data2.default.getData('query:bbox', {
      inputs: {
        bbox: this.bbox,
        feature_count: _projects2.default.getCurrentProject().getQueryFeatureCount(),
        addExternal: this.addExternalLayerToResult(),
        layersFilterObject: layersFilterObject,
        filterConfig: {
          spatialMethod: this.getSpatialMethod() // added spatial method to polygon filter
        },
        condition: condition,
        multilayers: _projects2.default.getCurrentProject().isQueryMultiLayers(this.name)
      }
    });
  } catch (err) {
    console.warn('Error running spatial query: ', err);
  }
});

/**
 * @param {{ layer, unWatches }}
 * 
 * @since 3.8.0
 */
proto.onAddExternalLayer = function (_ref3) {
  var _this4 = this;

  var layer = _ref3.layer,
      unWatches = _ref3.unWatches;

  //set layer property
  layer.tochighlightable = this.isToggled() && this.getEnable();

  unWatches.push(this.watchLayer(function () {
    return layer.selected;
  }, // watch `layer.selected` property
  function (selected) {
    _this4.setEnable(true === selected ? layer.visible : _this4.hasVisibleLayers());
    _this4.toggle(_this4.isToggled() && _this4.getEnable());
  }));

  unWatches.push(this.watchLayer(function () {
    return layer.visible;
  }, // watch `layer.visible` property
  function () {
    _this4.setEnable(_this4.hasVisibleLayers());
    _this4.toggle(_this4.isToggled() && _this4.getEnable());
  }));

  this.setEnable(this.hasVisibleLayers());
};

/**
 * @since 3.8.0
 */
proto.onRemoveExternalLayer = function () {
  this.setEnable(this.isThereVisibleLayerNotSelected());
};

/**
 * @since 3.8.0
 */
proto.clear = function () {
  this.bbox = null;
};

module.exports = QueryBBoxControl;

},{"app/constant":5,"g3w-ol/controls/interactioncontrol":50,"services/data":317,"services/gui":319,"store/projects":335,"utils":419}],56:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * @file
                                                                                                                                                                                                                                                                   * @since v3.8
                                                                                                                                                                                                                                                                   */


var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    throttle = _require.throttle;

var BaseQueryPolygonControl = require('g3w-ol/controls/basequerypolygoncontrol');

var QueryByDrawPolygonControl = function QueryByDrawPolygonControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var layers = _gui2.default.getService('map').filterableLayersAvailable({
    filtrable: {
      ows: 'WFS'
    }
  }) || [];

  var _options = _extends({}, options, {
    name: "querybydrawpolygon",
    tipLabel: "sdk.mapcontrols.querybydrawpolygon.tooltip",
    customClass: _gui2.default.getFontClass('draw'),
    clickmap: true, // set ClickMap
    interactionClass: ol.interaction.Draw,
    interactionClassOptions: {
      type: 'Polygon'
    },
    layers: layers,
    help: {
      title: "sdk.mapcontrols.querybybbox.help.title",
      message: "sdk.mapcontrols.querybybbox.help.message"
    }
  });

  BaseQueryPolygonControl.call(this, _options);
  this.setEnable(this.hasVisibleLayers());

  /**
   * Store drawed ol.Feature
   */
  this.feature = null;
};

ol.inherits(QueryByDrawPolygonControl, BaseQueryPolygonControl);

var proto = QueryByDrawPolygonControl.prototype;

/**
 * @param {ol.Map} map
 * 
 * @listens ol.interaction.Draw~drawend
 */
proto.setMap = function (map) {
  var _this = this;

  BaseQueryPolygonControl.prototype.setMap.call(this, map);

  this._interaction.on('drawend', throttle(function (evt) {
    _this.feature = evt.feature;
    _this.dispatchEvent({ type: 'drawend', feature: _this.feature });
    if (_this._autountoggle) {
      _this.toggle();
    }
  }));

  this.setEventKey({
    eventType: 'drawend',
    eventKey: this.on('drawend', this.runSpatialQuery)
  });
};

/**
 * @since 3.8.0
 */
proto.onSelectLayer = function (layer) {
  if (layer) {
    var findLayer = this.layers.find(function (_layer) {
      return _layer === layer;
    });
    this.setEnable(!!findLayer && findLayer.isVisible());
  } else {
    this.setEnable(this.hasVisibleLayers());
  }
  this.toggle(this.isToggled() && this.getEnable());
};

/**
 * @param { unknown | null } layer
 *
 * @since 3.8.0
 */
proto.listenLayersVisibilityChange = function () {
  var _this2 = this;

  this.unwatches.forEach(function (unwatch) {
    return unwatch();
  });
  this.unwatches.splice(0);
  this.layers.forEach(function (layer) {
    _this2.unwatches.push(_this2.watchLayer(function () {
      return layer.state.visible;
    }, function (visible) {
      // check if a selectedLayer i set
      if (null === _this2.getSelectedLayer()) {
        _this2.setEnable(_this2.hasVisibleLayers());
      } else {
        // enable control only if current changed visible layer is true or
        // if at least one layer (not selected) is visible
        _this2.setEnable(_this2.isSelectedLayerVisible());
      }
      _this2.toggle(_this2.isToggled() && _this2.getEnable());
    }));
  });
};

/**
 * @param {{ layer, unWatches }}
 * 
 * @since 3.8.0
 */
proto.onAddExternalLayer = function (_ref) {
  var _this3 = this;

  var layer = _ref.layer,
      unWatches = _ref.unWatches;


  unWatches.push(this.watchLayer(function () {
    return layer.selected;
  }, // watch `layer.selected` property
  function (selected) {
    _this3.setEnable(true === selected ? layer.visible : _this3.hasVisibleLayers());
    _this3.toggle(_this3.isToggled() && _this3.getEnable());
  }));

  unWatches.push(this.watchLayer(function () {
    return layer.visible;
  }, // watch `layer.visible` property
  function (visible) {
    _this3.setEnable(true === layer.selected ? visible : _this3.hasVisibleLayers());
    _this3.toggle(_this3.isToggled() && _this3.getEnable());
  }));

  this.setEnable(this.hasVisibleLayers());
};

/**
 * @since 3.8.0
 */
proto.onRemoveExternalLayer = function () {
  this.setEnable(this.hasVisibleLayers());
};

/**
 * @returns {Promise<void>}
 * 
 * @since 3.8.0
 */
proto.runSpatialQuery = _asyncToGenerator(function* () {
  _gui2.default.closeOpenSideBarComponent();

  try {
    yield _data2.default.getData('query:polygon', {
      inputs: {
        feature: this.feature,
        excludeSelected: null === this.getSelectedLayer(),
        external: {
          add: this.addExternalLayerToResult(),
          filter: {
            SELECTED: this.isExternalLayerSelected()
          }
        },
        filterConfig: {
          spatialMethod: this.getSpatialMethod()
        },
        multilayers: _projects2.default.getCurrentProject().isQueryMultiLayers(this.name),
        /**@since 3.9.0**/
        //add a custom type
        type: 'drawpolygon'
      },
      outputs: {
        show: function show(_ref3) {
          var _ref3$error = _ref3.error,
              error = _ref3$error === undefined ? false : _ref3$error;

          return !error;
        }
      }
    });
  } catch (err) {
    console.warn(err);
  }
});

/**
 * @since 3.8.0
 */
proto.clear = function () {
  this.feature = null;
};

module.exports = QueryByDrawPolygonControl;

},{"g3w-ol/controls/basequerypolygoncontrol":46,"services/data":317,"services/gui":319,"store/projects":335,"utils":419}],57:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _getMapLayersByFilter = require('utils/getMapLayersByFilter');

var _getAllPolygonGeometryTypes = require('utils/getAllPolygonGeometryTypes');

var _isPolygonGeometryType = require('utils/isPolygonGeometryType');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('utils'),
    throttle = _require.throttle;

var BaseQueryPolygonControl = require('g3w-ol/controls/basequerypolygoncontrol');
var PickCoordinatesInteraction = require('g3w-ol/interactions/pickcoordinatesinteraction');

var VALIDGEOMETRIES = (0, _getAllPolygonGeometryTypes.getAllPolygonGeometryTypes)();

var condition = {
  filtrable: {
    ows: 'WFS'
  }
};

var QueryByPolygonControl = function QueryByPolygonControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


  var controlQuerableLayers = (0, _getMapLayersByFilter.getMapLayersByFilter)({ QUERYABLE: true, SELECTED_OR_ALL: true });
  var controlFiltrableLayers = _gui2.default.getService('map').filterableLayersAvailable(condition);

  var _options = _extends({}, options, {
    offline: false,
    enabled: false,
    name: "querybypolygon",
    tipLabel: "sdk.mapcontrols.querybypolygon.tooltip",
    label: options.label || '\uE903',
    interactionClass: PickCoordinatesInteraction,
    layers: controlFiltrableLayers.length ? [].concat(_toConsumableArray(new Set([].concat(_toConsumableArray(controlFiltrableLayers), _toConsumableArray(controlQuerableLayers))))) : [],
    help: {
      title: "sdk.mapcontrols.querybypolygon.help.title",
      message: "sdk.mapcontrols.querybypolygon.help.message"
    }
  });

  BaseQueryPolygonControl.call(this, _options);

  /**
   * Data needed to runSpatialQuery
   */
  this.data = {
    layer: null,
    feature: null,
    coordinates: null
  };
};

ol.inherits(QueryByPolygonControl, BaseQueryPolygonControl);

var proto = QueryByPolygonControl.prototype;

/**
 * @deprecated since 3.7.0. Will be removed in 3.9.0
 * 
 * @param {unknown[]} layers
 */
proto.change = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.layers = layers;
  this.setEnable(false);
  this.listenLayersVisibilityChange();
};

/**
 * Check visibiliy of control
 * 
 * @param layers
 * 
 * @returns {boolean}
 */
proto.checkVisibile = function (layers) {
  // if no layer or just one
  if (!layers.length || 1 === layers.length) {
    return false;
  }

  // get all layers that haven't the geometries above filterable
  var filterableLayers = layers.filter(function (layer) {
    return layer.isFilterable();
  });
  // get all layer that have the valid geometries
  var queryableLayers = layers.filter(function (layer) {
    return -1 !== VALIDGEOMETRIES.indexOf(layer.getGeometryType());
  });

  if (1 === queryableLayers.length && 1 === filterableLayers.length) {
    return filterableLayers[0] !== queryableLayers[0];
  }

  return queryableLayers.length > 0 && filterableLayers.length > 0;
};

/**
 * @param {ol.Map} map 
 * 
 * @listens PickCoordinatesInteraction~picked
 */
proto.setMap = function (map) {
  var _this = this;

  BaseQueryPolygonControl.prototype.setMap.call(this, map);

  this._interaction.on('picked', throttle(function () {
    var _ref = _asyncToGenerator(function* (evt) {
      _this.data.coordinates = evt.coordinate;

      _this.dispatchEvent({ type: 'picked', coordinates: _this.data.coordinates });

      if (_this._autountoggle) {
        _this.toggle();
      }
    });

    return function (_x3) {
      return _ref.apply(this, arguments);
    };
  }()));

  this.setEventKey({
    eventType: 'picked',
    eventKey: this.on('picked', this.getPolygonFeatureFromCoordinates)
  });

  this.setEnable(false);
};

/**
 * @param layer
 * 
 * @since 3.8.0
 */
proto.onSelectLayer = function (layer) {
  if (layer && layer.isQueryable() && -1 !== this.getGeometryTypes().indexOf(layer.getGeometryType())) {
    this.setEnable(this.isThereVisibleLayerNotSelected());
    this.toggle(this.isToggled() && this.getEnable());
  } else {
    this.setEnable(false);
    this.toggle(false);
  }
};

/**
 * @since 3.8.0 
 */
proto.listenLayersVisibilityChange = function () {
  var _this2 = this;

  this.unwatches.forEach(function (unwatch) {
    return unwatch();
  });
  this.unwatches.splice(0);
  this.layers.forEach(function (layer) {
    _this2.unwatches.push(_this2.watchLayer(function () {
      return layer.state.visible;
    }, function (visible) {
      if (layer === _this2.getSelectedLayer()) {
        _this2.setEnable(visible && _this2.isThereVisibleLayerNotSelected());
      } else {
        _this2.setEnable(_this2.isThereVisibleLayerNotSelected());
      }
      // enable control only if current changed visible layer is true or
      // if at least one layer (not selected) is visible
      _this2.toggle(_this2.isToggled() && _this2.getEnable());
    }));
  });
};

/**
 * @returns {Promise<boolean>}
 * 
 * @since 3.8.0
 */
proto.getPolygonFeatureFromCoordinates = _asyncToGenerator(function* () {
  _gui2.default.closeOpenSideBarComponent();

  // ask for coordinates
  try {
    var _ref3 = yield _data2.default.getData('query:coordinates', {
      inputs: {
        feature_count: _projects2.default.getCurrentProject().getQueryFeatureCount(),
        coordinates: this.data.coordinates
      },
      outputs: {
        // whether to show picked coordinates on map
        show: function show(_ref4) {
          var _ref4$data = _ref4.data,
              data = _ref4$data === undefined ? [] : _ref4$data,
              query = _ref4.query;

          var show = data.length === 0;
          // set query coordinates to null in case to avoid `externalvector` added to query response
          query.coordinates = show ? query.coordinates : null;
          return show;
        }
      }
    }),
        _ref3$data = _ref3.data,
        data = _ref3$data === undefined ? [] : _ref3$data;

    if (data.length && data[0].features.length) {
      this.data.feature = data[0].features[0];
      this.data.layer = data[0].layer;
      this.runSpatialQuery();
    }
  } catch (err) {
    console.warn('Error running spatial query:', err);
  }
});

/**
 * @returns {boolean} whether at least a visible layer not selected
 * 
 * @since 3.8.0
 */
proto.isThereVisibleLayerNotSelected = function () {
  var _this3 = this;

  return !!(
  // check if user has selected a layer
  this.getSelectedLayer() &&
  // check if current selected layer is visible
  this.isSelectedLayerVisible() && (
  // check if at least one layer is visible (project or external layer)
  !!this.layers.find(function (layer) {
    return layer !== _this3.getSelectedLayer() && layer.isVisible() && layer.isFilterable(condition.filtrable);
  }) || this.getExternalLayers().find(function (layer) {
    return layer !== _this3.getSelectedLayer() && true === layer.visible;
  })));
};

/**
 * @deprecated since v3.8.0. Will be removed in v4.0.0. Use `QueryByPolygonControl::listenLayersVisibilityChange()` instead.
 */
proto.listenPolygonLayersChange = function () {
  this.listenLayersVisibilityChange();
};

/**
 * @param {{ layer, unWatches }}
 * 
 * @since 3.8.0
 */
proto.onAddExternalLayer = function (_ref5) {
  var _this4 = this;

  var layer = _ref5.layer,
      unWatches = _ref5.unWatches;


  // watch `layer.selected` property only on Polygon layers (in order to enable/disable map control)
  if ((0, _isPolygonGeometryType.isPolygonGeometryType)(layer.geometryType)) {
    unWatches.push(this.watchLayer(function () {
      return layer.selected;
    }, // watch `layer.selected` property
    function (selected) {
      if (true === selected) {
        _this4.setEnable(layer.visible && _this4.isThereVisibleLayerNotSelected());
      } else {
        _this4.setEnable(false);
      }
      _this4.toggle(_this4.isToggled() && _this4.getEnable());
    }));

    unWatches.push(this.watchLayer(function () {
      return layer.visible;
    }, // watch `layer.visible` property
    function (visible) {
      if (layer.selected) {
        _this4.setEnable(visible && _this4.isThereVisibleLayerNotSelected());
      } else {
        _this4.setEnable(_this4.isThereVisibleLayerNotSelected());
      }
      _this4.toggle(_this4.isToggled() && _this4.getEnable());
    }));
  }

  this.setEnable(this.isThereVisibleLayerNotSelected());
};

/**
 * @since 3.8.0
 */
proto.onRemoveExternalLayer = function () {
  this.setEnable(this.isThereVisibleLayerNotSelected());
};

/**
 * Execute query Polygon request to server
 * 
 * @since 3.8.0
 */
proto.runSpatialQuery = _asyncToGenerator(function* () {
  // skip when .. ?
  if (!(null !== this.data.coordinates && null !== this.data.feature && null !== this.data.layer)) {
    return;
  }

  yield _data2.default.getData('query:polygon', {
    inputs: {
      layerName: this.data.layer.getName ? this.data.layer.getName() : this.data.layer.get('name'),
      excludeSelected: true,
      feature: this.data.feature,
      external: {
        add: true,
        filter: {
          SELECTED: false
        }
      },
      filterConfig: {
        spatialMethod: this.getSpatialMethod() // added spatial method to polygon filter
      },
      multilayers: _projects2.default.getCurrentProject().isQueryMultiLayers(this.name)
    },
    outputs: {
      show: function show(_ref7) {
        var _ref7$error = _ref7.error,
            error = _ref7$error === undefined ? false : _ref7$error;

        return !error;
      }
    }
  });
});

/**
 * @since v3.8.0
 */
proto.clear = function () {
  this.data.layer = this.data.feature = this.data.coordinates = null;
};

module.exports = QueryByPolygonControl;

},{"g3w-ol/controls/basequerypolygoncontrol":46,"g3w-ol/interactions/pickcoordinatesinteraction":68,"services/data":317,"services/gui":319,"store/projects":335,"utils":419,"utils/getAllPolygonGeometryTypes":389,"utils/getMapLayersByFilter":401,"utils/isPolygonGeometryType":427}],58:[function(require,module,exports){
var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _mergeOptions = require('utils/mergeOptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    throttle = _require.throttle;

var InteractionControl = require('g3w-ol/controls/interactioncontrol');
var PickCoordinatesInteraction = require('g3w-ol/interactions/pickcoordinatesinteraction');

var QueryControl = function QueryControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    offline: false,
    name: "querylayer",
    tipLabel: "sdk.mapcontrols.query.tooltip",
    label: options.label || '\uEA0F',
    clickmap: true, // set ClickMap
    interactionClass: PickCoordinatesInteraction
  };

  options = (0, _mergeOptions.mergeOptions)(options, _options);

  InteractionControl.call(this, options);
};

ol.inherits(QueryControl, InteractionControl);

var proto = QueryControl.prototype;

/**
 * @param {ol.Map} map
 * 
 * @fires   picked                     fired after map `singleclick` ?
 * @listens InteractionControl~toggled
 */
proto.setMap = function (map) {
  var _this = this;

  var key = null;

  this.on('toggled', function (_ref) {
    var toggled = _ref.toggled;

    if (true !== toggled) {
      ol.Observable.unByKey(key);
      key = null;
    } else if (null === key && map) {
      key = _this.getInteraction().on('picked', throttle(function (evt) {
        return _this.runQuery({ coordinates: evt.coordinate });
      }));
    }
  });

  this.setEventKey({
    eventType: 'picked',
    eventKey: this.on('picked', this.runQuery)
  });

  InteractionControl.prototype.setMap.call(this, map);
};

/**
 * @since 3.8.0
 * 
 * @param event
 */
proto.runQuery = function () {
  var _ref3 = _asyncToGenerator(function* (_ref2) {
    var coordinates = _ref2.coordinates;

    _gui2.default.closeOpenSideBarComponent();
    try {
      var project = _projects2.default.getCurrentProject();
      yield _data2.default.getData('query:coordinates', {
        inputs: {
          coordinates: coordinates,
          feature_count: project.getQueryFeatureCount(),
          query_point_tolerance: project.getQueryPointTolerance(),
          multilayers: project.isQueryMultiLayers(this.name)
        }
      });
    } catch (err) {
      console.warn('Error running spatial query: ', err);
    }
  });

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}();

module.exports = QueryControl;

},{"g3w-ol/controls/interactioncontrol":50,"g3w-ol/interactions/pickcoordinatesinteraction":68,"services/data":317,"services/gui":319,"store/projects":335,"utils":419,"utils/mergeOptions":432}],59:[function(require,module,exports){
var _mergeOptions = require('utils/mergeOptions');

var InteractionControl = require('g3w-ol/controls/interactioncontrol');

var ResetControl = function ResetControl(options) {
  this._toggled = true;
  this._startCoordinate = null;
  var _options = {
    name: "reset",
    tipLabel: "Pan",
    label: '\uE901'
  };
  options = (0, _mergeOptions.mergeOptions)(options, _options);
  InteractionControl.call(this, options);
};

ol.inherits(ResetControl, InteractionControl);

module.exports = ResetControl;

var proto = ResetControl.prototype;

proto._postRender = function () {
  this.toggle(true);
};

},{"g3w-ol/controls/interactioncontrol":50,"utils/mergeOptions":432}],60:[function(require,module,exports){
var _constant = require('app/constant');

var _getResolutionFromScale = require('utils/getResolutionFromScale');

var _getScaleFromResolution = require('utils/getScaleFromResolution');

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var ScaleControl = function ScaleControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.isMobile = options.isMobile || false;
  options.target = 'scale-control';
  ol.control.Control.call(this, options);
};

ol.inherits(ScaleControl, ol.control.Control);

module.exports = ScaleControl;

var proto = ScaleControl.prototype;

proto.offline = true;

// called from map when layout change
proto.changelayout = function (map) {
  var position = this.position;
  var element = $(this.element);
};

proto.layout = function (map) {
  var self = this;
  var isMapResolutionChanged = false;
  var selectedOnClick = false;
  var element = $(this.element);
  var select2 = element.children('select').select2({
    tags: true,
    dropdownParent: $(map.getTargetElement()),
    width: '120px',
    height: '20px',
    language: {
      noResults: function noResults(params) {
        return t("sdk.mapcontrols.scale.no_valid_scale");
      }
    },
    minimumResultsForSearch: this.isMobile ? -1 : 0,
    createTag: function createTag(params) {
      var newTag = null;
      var scale = void 0;
      // Don't offset to create a tag if there is no @ symbol
      if (params.term.indexOf('1:') !== -1) {
        // Return null to disable tag creation
        scale = params.term.split('1:')[1];
      } else if (Number.isInteger(Number(params.term)) && Number(params.term) > 0) {
        scale = Number(params.term);
        if (1 * scale <= self.scales[0]) {
          newTag = {
            id: scale,
            text: '1:' + params.term,
            new: true
          };
          deleteLastCustomScale();
        }
      }
      return newTag;
    }
  });
  //get change mapsize to close
  map.on('change:size', function () {
    return select2.select2('close');
  });
  function deleteLastCustomScale() {
    select2.find('option').each(function (index, option) {
      return self.scales.indexOf(1 * option.value) === -1 && $(option).remove();
    });
  }

  function addCustomTag(data) {
    if (select2.find("option[value='" + data.id + "']").length) select2.val(data.id).trigger('change');else {
      deleteLastCustomScale();
      var newOption = new Option(data.text, data.id, true, true);
      select2.append(newOption).trigger('change');
    }
  }

  map.on('moveend', function () {
    if (isMapResolutionChanged) {
      var view = this.getView();
      var resolution = view.getResolution();
      var mapUnits = view.getProjection().getUnits();
      var scale = parseInt((0, _getScaleFromResolution.getScaleFromResolution)(resolution, mapUnits));
      var data = {
        id: scale,
        text: '1:' + scale,
        new: true
      };
      addCustomTag(data);
      isMapResolutionChanged = false;
    } else selectedOnClick = false;
  });
  var setChangeResolutionHandler = function setChangeResolutionHandler() {
    map.getView().on('change:resolution', function () {
      return isMapResolutionChanged = !selectedOnClick;
    });
  };
  setChangeResolutionHandler();

  map.on('change:view', function () {
    return setChangeResolutionHandler();
  });

  select2.on('select2:select', function (e) {
    selectedOnClick = true;
    var data = e.params.data;
    if (data.new) {
      deleteLastCustomScale();
      addCustomTag(data);
    }
    var mapUnits = map.getView().getProjection().getUnits();
    var scale = 1 * data.id;
    var resolution = (0, _getResolutionFromScale.getResolutionFromScale)(scale, mapUnits);
    map.getView().setResolution(resolution);
  });
};

proto._setScales = function (map) {
  var mapUnits = map.getView().getProjection().getUnits();
  var currentResolution = map.getView().getResolution();
  var currentScale = parseInt((0, _getScaleFromResolution.getScaleFromResolution)(currentResolution, mapUnits));
  this.scales = _constant.PRINT_SCALES.map(function (scale) {
    return scale.value;
  }).filter(function (scale) {
    return scale < currentScale;
  });
  this.scales.unshift(currentScale);
  this._createControl();
};

proto._createControl = function () {
  var controlDomElement = document.createElement('div');
  var select = document.createElement('select');
  var optgroup = document.createElement('optgroup');
  optgroup.label = '';
  this.scales.forEach(function (scale, index) {
    var option = document.createElement('option');
    option.value = scale;
    option.text = '1:' + scale;
    option.selected = index === 0 ? true : false;
    optgroup.appendChild(option);
  });
  select.appendChild(optgroup);
  if (!this.isMobile) {
    var optgroup_custom = document.createElement('optgroup');
    optgroup_custom.label = 'Custom';
    select.appendChild(optgroup_custom);
  }
  controlDomElement.appendChild(select);
  // set element of control (it is necessary to visualize it)
  this.element = controlDomElement;
  $(this.element).css('height', '20px');
};

proto.setMap = function (map) {
  if (map) {
    this._setScales(map);
    this.layout(map);
    ol.control.Control.prototype.setMap.call(this, map);
  }
};

},{"app/constant":5,"core/i18n/i18n.service":9,"utils/getResolutionFromScale":409,"utils/getScaleFromResolution":410}],61:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    sameOrigin = _require.sameOrigin;

var OnClickControl = require('g3w-ol/controls/onclickcontrol');

/**
 * @FIXME prevent tainted canvas error
 * 
 * Because the pixels in a canvas's bitmap can come from a variety of sources,
 * including images or videos retrieved from other hosts, it's inevitable that
 * security problems may arise. As soon as you draw into a canvas any data that
 * was loaded from another origin without CORS approval, the canvas becomes
 * tainted.
 * 
 * A tainted canvas is one which is no longer considered secure, and any attempts
 * to retrieve image data back from the canvas will cause an exception to be thrown.
 * 
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
 */
function ScreenshotControl() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options = _extends({
    name: "maptoimage",
    tipLabel: "Screenshot",
    label: '\uE90F',
    toggled: false,
    visible: true, // set initial to true
    layers: []
  }, options);

  this.layers = options.layers;

  OnClickControl.call(this, options);

  //set visibility based on layers
  this.setVisible(this.checkVisible(this.layers));

  //only if is visible (no CORS issue) need to listen add/remove layer
  if (this.isVisible()) {
    //listen add/remove External Layer event to check visibility of the control
    _gui2.default.getService('map').onafter('loadExternalLayer', this._addLayer.bind(this));
    _gui2.default.getService('map').onafter('unloadExternalLayer', this._removeLayer.bind(this));
  }
}

ol.inherits(ScreenshotControl, OnClickControl);

var proto = ScreenshotControl.prototype;

/**
 * Method call when new layer is add to Project
 * Example wms or vector layer
 * 
 * @since 3.8.3
 *
 */
proto._addLayer = function (layer) {
  var _this = this;

  this.layers.push(layer);
  this.change(this.layers);
  layer.on('change:visible', function () {
    return _this.change(_this.layers);
  });
};

/**
 * Method call when a layer is removed from Project
 * 
 * @since 3.8.3 
 */
proto._removeLayer = function (layer) {
  this.layers = this.layers.filter(function (l) {
    return l !== layer;
  });
  this.change(this.layers);
};

/**
 * Method call when layer is add/removed to/from project
 * 
 * @param layers
 */
proto.change = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this.setVisible(this.checkVisible(layers));
};

/**
 * Check visibility for map control based on layers URLs.
 * 
 * Allow to print external WMS layers only when they have
 * same origin URL of current application in order to avoid
 * CORS issue while getting map image.
 * 
 * Layers that don't have a source URL are excluded (eg. base layers)
 * 
 * @param {array} layers
 * 
 * @returns {boolean}
 */
proto.checkVisible = function () {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  //need to be visible. If it was not visible an CORS issue was raise.
  // Need to reload and remove layer
  return this.isVisible() && !layers.some(isCrossOrigin);
};

/**
 * Check if a layer has a Cross Origin source URI
 * 
 * @param layer
 * 
 * @returns {boolean} `true` whether the given layer could cause CORS issues (eg. while printing raster layers). 
 */
function isCrossOrigin(layer) {
  var source_url = void 0;

  // skip levels that can't cause CORS issues
  if (isHiddenLayer(layer) || isVectorLayer(layer)) {
    return false;
  }

  // check raster layers (OpenLayers)
  if (isImageLayer(layer)) {
    source_url = layer.getSource().getUrl();
    return source_url && !sameOrigin(source_url, location);
  }

  // check if layer has external property to true (Ex. core/layers/imagelayer.js instance)
  if (isExternalImageLayer(layer)) {
    source_url = layer.getConfig().source.url;
    return source_url && !sameOrigin(source_url, location);
  }

  return false;
}

function isHiddenLayer(layer) {
  return layer.getVisible && !layer.getVisible();
}

function isVectorLayer(layer) {
  return layer instanceof ol.layer.Vector;
}

function isImageLayer(layer) {
  return layer instanceof ol.layer.Tile || layer instanceof ol.layer.Image;
}

/**
 * @see https://github.com/g3w-suite/g3w-client/issues/475
 */
function isExternalImageLayer(layer) {
  return layer.getConfig().source && layer.getConfig().source.external;
}

module.exports = ScreenshotControl;

},{"g3w-ol/controls/onclickcontrol":54,"services/gui":319,"utils":419}],62:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _mergeOptions = require('utils/mergeOptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    XHR = _require.XHR;

var StreetViewComponent = require('gui/streetview/vue/streetview');
var InteractionControl = require('g3w-ol/controls/interactioncontrol');
var PickCoordinatesInteraction = require('g3w-ol/interactions/pickcoordinatesinteraction');

var GoogleStreetViewApiUrl = 'https://maps.googleapis.com/maps/api/';

var StreetViewControl = function StreetViewControl() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _options = {
    offline: false,
    visible: true, // always visible. Only change behavior if exist or not
    name: "streetview",
    tipLabel: "StreetView",
    clickmap: true, // set ClickMap
    label: '\uE905',
    interactionClass: PickCoordinatesInteraction
  };
  /**
   * Check Google Key
   * */

  this.key = _applicationState2.default.keys.vendorkeys.google;
  this.keyError;
  if (this.key) {
    XHR.get({
      url: GoogleStreetViewApiUrl + 'streetview?location=0,0&size=456x456&key=' + this.key
    }).catch(function (error) {
      return _this.keyError = error.responseText;
    });
  }
  //get script script
  $script(GoogleStreetViewApiUrl + 'js?' + (this.key ? 'key=' + this.key : ''));

  /***/

  this._sv = null;
  this._panorama = null;
  this._map = null;
  this._projection = null;
  this._lastposition = null;
  this._streetViewFeature = new ol.Feature();
  var streetVectorSource = new ol.source.Vector({ features: [] });
  this.active = false;
  this._layer = new ol.layer.Vector({
    source: streetVectorSource,
    style: function style(feature) {
      var coordinates = feature.getGeometry().getCoordinates();
      this._lastposition = this._lastposition ? this._lastposition : coordinates;
      var dx = coordinates[0] - this._lastposition[0];
      var dy = coordinates[1] - this._lastposition[1];
      var rotation = -Math.atan2(dy, dx);
      var styles = [new ol.style.Style({
        text: new ol.style.Text({
          text: '\uE905',
          font: 'bold 18px icomoon',
          fill: new ol.style.Fill({
            color: '#ffffff'
          })
        })
      }), new ol.style.Style({
        image: new ol.style.Icon({
          src: '/static/client/images/streetviewarrow.png',
          rotation: rotation
        })
      })];
      this._lastposition = coordinates;
      return styles;
    }
  });

  options = (0, _mergeOptions.mergeOptions)(options, _options);

  InteractionControl.call(this, options);
};

ol.inherits(StreetViewControl, InteractionControl);

var proto = StreetViewControl.prototype;

proto.setProjection = function (projection) {
  this._projection = projection;
};

proto.setPosition = function (position) {
  var _this2 = this;

  var self = this;
  this.active = true;
  var pixel = void 0;
  if (!this._sv) this._sv = new google.maps.StreetViewService();
  this._sv.getPanorama({ location: position }, function (data, status) {
    self._panorama = new google.maps.StreetViewPanorama(document.getElementById('streetview'), {
      imageDateControl: true
    });
    /**
     * Listen on position change
    */
    self._panorama.addListener('position_changed', function () {
      if (self.isToggled()) {
        var lnglat = ol.proj.transform([this.getPosition().lng(), this.getPosition().lat()], 'EPSG:4326', self._projection.getCode());
        self._streetViewFeature.setGeometry(new ol.geom.Point(lnglat));
        pixel = self._map.getPixelFromCoordinate(lnglat);
        if (pixel[0] + 15 > self._map.getSize()[0] || pixel[1] + 15 > self._map.getSize()[1] || pixel[0] < 15 || pixel[1] < 15) {
          self._map.getView().setCenter(lnglat);
        }
      }
    });
    if (data && data.location) {
      self._panorama.setPov({
        pitch: 0,
        heading: 0
      });

      self._panorama.setPosition(data.location.latLng);
    }
  }).then(function (response) {
    if (response === undefined) {
      _gui2.default.closeContent();
    }
  }).catch(function () {
    return _this2.toggle();
  });
};

proto.setMap = function (map) {
  var _this3 = this;

  this._map = map;
  InteractionControl.prototype.setMap.call(this, map);

  this.setProjection(this._map.getView().getProjection());
  this._map.addLayer(this._layer);

  this._interaction.on('picked', function (_ref) {
    var coordinate = _ref.coordinate;

    _this3.showStreetView(coordinate);
    _this3._autountoggle && _this3.toggle();
  });
};

/**
 * Method to show StreetView depending of key and keyError
 * @param coordinate
 */
proto.showStreetView = function (coordinate) {
  var _ol$proj$transform = ol.proj.transform(coordinate, this._map.getView().getProjection().getCode(), 'EPSG:4326'),
      _ol$proj$transform2 = _slicedToArray(_ol$proj$transform, 2),
      lng = _ol$proj$transform2[0],
      lat = _ol$proj$transform2[1];

  if (this.key) {
    _gui2.default.setContent({
      content: new StreetViewComponent({
        keyError: this.keyError
      }),
      title: 'StreetView'
    });
    !this.keyError && this.setPosition({
      lng: lng, lat: lat
    });
  } else {
    this._streetViewFeature.setGeometry(new ol.geom.Point(coordinate));
    window.open('https://www.google.com/maps/@?api=1&map_action=pano&viewpoint=' + lat + ',' + lng);
  }
};

proto.clearMarker = function () {
  this._streetViewFeature.setGeometry(null);
};

proto.clear = function () {
  this._layer.getSource().clear();
  this._streetViewFeature.setGeometry(null);
  this.clearMarker();
  this._panorama = null;
  this.active && _gui2.default.closeContent();
  this.active = false;
};

proto.toggle = function (toggle) {
  InteractionControl.prototype.toggle.call(this, toggle);
  if (!this.isToggled()) this.clear();else this._layer.getSource().addFeatures([this._streetViewFeature]);
};

module.exports = StreetViewControl;

},{"g3w-ol/controls/interactioncontrol":50,"g3w-ol/interactions/pickcoordinatesinteraction":68,"gui/streetview/vue/streetview":138,"services/gui":319,"store/application-state":328,"utils":419,"utils/mergeOptions":432}],63:[function(require,module,exports){
var InteractionControl = require('g3w-ol/controls/interactioncontrol');

var ZoomBoxControl = function ZoomBoxControl(options) {
  this._startCoordinate = null;
  var _options = {
    name: "zoombox",
    tipLabel: "Zoom to box",
    label: "\uE901",
    interactionClass: ol.interaction.DragBox
  };
  options = Object.assign({}, options, _options);
  InteractionControl.call(this, options);
};
ol.inherits(ZoomBoxControl, InteractionControl);
module.exports = ZoomBoxControl;

var proto = ZoomBoxControl.prototype;

proto.setMap = function (map) {
  var _this = this;

  InteractionControl.prototype.setMap.call(this, map);
  this._interaction.on('boxstart', function (evt) {
    return _this._startCoordinate = evt.coordinate;
  });

  this._interaction.on('boxend', function (evt) {
    var start_coordinate = _this._startCoordinate;
    var end_coordinate = evt.coordinate;
    var extent = ol.extent.boundingExtent([start_coordinate, end_coordinate]);
    _this.dispatchEvent({
      type: 'zoomend',
      extent: extent
    });
    _this._startCoordinate = null;
    _this._autountoggle && _this.toggle();
  });
};

},{"g3w-ol/controls/interactioncontrol":50}],64:[function(require,module,exports){
var MeasureInteraction = require('g3w-ol/interactions/measureinteraction');

// Area
var AreaIteraction = function AreaIteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.geometryType = "Polygon";
  MeasureInteraction.call(this, options);
};

ol.inherits(AreaIteraction, MeasureInteraction);

module.exports = AreaIteraction;

},{"g3w-ol/interactions/measureinteraction":67}],65:[function(require,module,exports){
var DeleteInteractionEvent = function DeleteInteractionEvent(type, layer, features, coordinate) {
  this.type = type;
  this.features = features;
  this.coordinate = coordinate;
};

var DeleteInteraction = function DeleteInteraction(options) {
  ol.interaction.Pointer.call(this, {
    handleDownEvent: DeleteInteraction.handleDownEvent_,
    handleMoveEvent: DeleteInteraction.handleMoveEvent_,
    handleUpEvent: DeleteInteraction.handleUpEvent_,
    handleEvent: DeleteInteraction.handleEvent_
  });

  this.previousCursor_ = undefined;
  this.startCursor_ = undefined;
  this.lastCoordinate_ = null;
  this.features_ = options.features !== undefined ? options.features : null;
  this.layer_ = options.layer !== undefined ? options.layer : null;
  this.map_ = null;
};

ol.inherits(DeleteInteraction, ol.interaction.Pointer);

DeleteInteraction.handleEvent_ = function (mapBrowserEvent) {
  if (mapBrowserEvent.type == 'keydown') {
    if (this.features_.getArray().length && mapBrowserEvent.originalEvent.keyCode == 46) {
      // an event can be string or an object with attribute type
      this.dispatchEvent(new DeleteInteractionEvent('deleteend', this.layer_, this.features_, event.coordinate));
      return true;
    }
  } else {
    return ol.interaction.Pointer.handleEvent.call(this, mapBrowserEvent);
  }
};

DeleteInteraction.handleDownEvent_ = function (event) {
  this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  if (this.lastFeature_) {
    DeleteInteraction.handleMoveEvent_.call(this, event);
    this.dispatchEvent(new DeleteInteractionEvent('deleteend', this.layer_, this.features_, event.coordinate));
    return true;
  }
  return false;
};

DeleteInteraction.handleMoveEvent_ = function (event) {
  var _this = this;

  this.map_ = event.map;
  var elem = this.map_.getTargetElement();
  if (this.startCursor_ === undefined) {
    this.startCursor_ = elem.style.cursor;
  }
  var intersectingFeature = this.map_.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
    ///check if is the same layero of editing
    feature = layer == _this.layer_ ? feature : null;
    return feature;
  });
  if (intersectingFeature) {
    this.previousCursor_ = elem.style.cursor;
    elem.style.cursor = 'pointer';
  } else {
    elem.style.cursor = this.previousCursor_ !== undefined ? this.previousCursor_ : '';
    this.previousCursor_ = undefined;
  }
};

DeleteInteraction.prototype.featuresAtPixel_ = function (pixel, map) {
  var found = null;
  var intersectingFeature = map.forEachFeatureAtPixel(pixel, function (feature) {
    return feature;
  });
  if (this.features_ && _.includes(this.features_.getArray(), intersectingFeature)) {
    found = intersectingFeature;
  }
  return found;
};

DeleteInteraction.prototype.clear = function () {
  var elem = void 0;
  if (this.map_) {
    elem = this.map_.getTargetElement();
    elem.style.cursor = this.startCursor_;
  }
};

module.exports = DeleteInteraction;

},{}],66:[function(require,module,exports){
var MeasureInteraction = require('g3w-ol/interactions/measureinteraction');

// LenghtInteracion
var LengthIteraction = function LengthIteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.geometryType = "LineString";
  MeasureInteraction.call(this, options);
};

ol.inherits(LengthIteraction, MeasureInteraction);

module.exports = LengthIteraction;

},{"g3w-ol/interactions/measureinteraction":67}],67:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createMeasureTooltip = require('utils/createMeasureTooltip');

var _setMeasureTooltipStatic = require('utils/setMeasureTooltipStatic');

var _removeMeasureTooltip = require('utils/removeMeasureTooltip');

var _needUseSphereMethods = require('utils/needUseSphereMethods');

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var MeasureIteraction = function MeasureIteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._helpTooltip;
  this._measureTooltipElement;
  this._measureTooltip;
  this._featureGeometryChangelistener;
  this._poinOnMapMoveListener;
  this.testTooltip;
  this._helpMsg = options.help;
  this._projection = options.projection;
  this.feature = options.feature;
  var drawColor = options.drawColor || 'rgba(0, 0, 0, 0.5)';
  var useSphereMethods = (0, _needUseSphereMethods.needUseSphereMethods)(this._projection);
  var measureStyle = new ol.style.Style({
    fill: new ol.style.Fill({
      color: 'rgba(255, 255, 255, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: drawColor,
      lineDash: [10, 10],
      width: 3
    }),
    image: new ol.style.Circle({
      radius: 5,
      stroke: new ol.style.Stroke({
        color: 'rgba(0, 0, 0, 0.7)'
      }),
      fill: new ol.style.Fill({
        color: 'rgba(255, 255, 255, 0.2)'
      })
    })
  });
  var geometryType = options.geometryType || 'LineString';
  var source = new ol.source.Vector();
  this._helpTooltipElement;
  this._map = null;
  this._feature = null;
  this._layer = new ol.layer.Vector({
    source: source,
    style: function style() {
      var styles = [
      // linestring
      new ol.style.Style({
        stroke: new ol.style.Stroke({
          lineDash: [10, 10],
          width: 3
        }),
        fill: new ol.style.Fill({
          color: 'rgba(255, 255, 255, 0.2)'
        })
      })];
      return styles;
    }
  });

  ol.interaction.Draw.call(this, {
    source: source,
    type: geometryType,
    style: measureStyle
  });
  this.set('beforeRemove', this.clear);
  this.set('layer', this._layer);
  // register event on two action
  this.on('drawstart', this._drawStart);
  this.on('drawend', this._drawEnd);
};

ol.inherits(MeasureIteraction, ol.interaction.Draw);

var proto = MeasureIteraction.prototype;

proto.setDrawMessage = function (message) {
  this._helpMsg = message;
};

proto.clear = function () {
  this._layer.getSource().clear();
  this._clearMessagesAndListeners();
  if (this._map) {
    (0, _removeMeasureTooltip.removeMeasureTooltip)(_extends({
      map: this._map
    }, this.measureTooltip));
    this.measureTooltip = null;
    this._map.removeLayer(this._layer);
  }
};

proto._clearMessagesAndListeners = function () {
  this._feature = null;
  // unset tooltip so that a new one can be created
  if (this._map) {
    this._measureTooltipElement = null;
    this._helpTooltipElement.innerHTML = '';
    this._helpTooltipElement.classList.add('hidden');
    ol.Observable.unByKey(this._featureGeometryChangelistener);
    ol.Observable.unByKey(this._poinOnMapMoveListener);
    $(document).off('keydown', this._keyDownEventHandler);
  }
};

proto._removeLastPoint = function (event) {
  var geom = this._feature.getGeometry();
  if (event.keyCode === 46) {
    if (geom instanceof ol.geom.Polygon && geom.getCoordinates()[0].length > 2) {
      this.removeLastPoint();
    } else if (geom instanceof ol.geom.LineString && geom.getCoordinates().length > 1) {
      this.removeLastPoint();
    }
  }
};

//drawStart function
proto._drawStart = function (evt) {
  var _this = this;

  this._map = this.getMap();
  this._map.removeLayer(this._layer);
  this._feature = evt.feature;
  this.feature && this._feature.setGeometry(this.feature.getGeometry());
  this._keyDownEventHandler = this._removeLastPoint.bind(this);
  $(document).on('keydown', this._keyDownEventHandler);
  this._layer.getSource().clear();
  this._poinOnMapMoveListener = this._map.on('pointermove', function (evt) {
    if (evt.dragging) return;
    if (_this._feature && _this._helpMsg) {
      var helpMsg = t(_this._helpMsg);
      _this._helpTooltipElement.innerHTML = helpMsg;
      _this._helpTooltip.setPosition(evt.coordinate);
      _this._helpTooltipElement.classList.remove('hidden');
    }
  });
  this._createHelpTooltip();
  this._createMeasureTooltip();
};

proto._drawEnd = function () {
  var tooltip = this.measureTooltip.tooltip;

  (0, _setMeasureTooltipStatic.setMeasureTooltipStatic)(tooltip);
  this._clearMessagesAndListeners();
  this._map.addLayer(this._layer);
};

/**
 * Creates a new help tooltip
 */
proto._createHelpTooltip = function () {
  this._helpTooltipElement && this._helpTooltipElement.parentNode.removeChild(this._helpTooltipElement);
  this._helpTooltip && this._map.removeOverlay(this._helpTooltip);
  this._helpTooltipElement = document.createElement('div');
  this._helpTooltipElement.className = 'mtooltip hidden';
  this._helpTooltip = new ol.Overlay({
    element: this._helpTooltipElement,
    offset: [15, 0],
    positioning: 'center-left'
  });
  this._map.addOverlay(this._helpTooltip);
};

/**
 * Creates a new measure tooltip
 */
proto._createMeasureTooltip = function () {
  this.measureTooltip && (0, _removeMeasureTooltip.removeMeasureTooltip)(_extends({}, this.measureTooltip, {
    map: this._map
  }));
  this.measureTooltip = (0, _createMeasureTooltip.createMeasureTooltip)({
    map: this._map,
    feature: this._feature
  });
};
// END MEASURE CONTROLS //

module.exports = MeasureIteraction;

},{"core/i18n/i18n.service":9,"utils/createMeasureTooltip":365,"utils/needUseSphereMethods":435,"utils/removeMeasureTooltip":442,"utils/setMeasureTooltipStatic":449}],68:[function(require,module,exports){
var PickCoordinatesEventType = {
  PICKED: 'picked'
};

var PickCoordinatesEvent = function PickCoordinatesEvent(type, coordinate) {
  this.type = type;
  this.coordinate = coordinate;
};

var PickCoordinatesInteraction = function PickCoordinatesInteraction(options) {
  this.previousCursor_ = null;
  this._centerMap = null;

  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickCoordinatesInteraction.handleDownEvent_,
    handleUpEvent: PickCoordinatesInteraction.handleUpEvent_,
    handleMoveEvent: PickCoordinatesInteraction.handleMoveEvent_
  });
};

ol.inherits(PickCoordinatesInteraction, ol.interaction.Pointer);

PickCoordinatesInteraction.handleDownEvent_ = function (event) {
  var _this = this;

  this._centerMap = event.map.getView().getCenter();
  // set timeout to avoid to block pan
  setTimeout(function () {
    if (_this._centerMap === event.map.getView().getCenter()) {
      PickCoordinatesInteraction.handleUpEvent_.call(_this, event);
    }
  }, 300);
  // return false to avoid  start of drag event
  return false;
};

PickCoordinatesInteraction.handleUpEvent_ = function (event) {
  this.dispatchEvent(new PickCoordinatesEvent(PickCoordinatesEventType.PICKED, event.coordinate));
  // it used to stop drag event
  return false;
};

PickCoordinatesInteraction.handleMoveEvent_ = function (event) {
  var elem = event.map.getTargetElement();
  elem.style.cursor = 'pointer';
  return true;
};

PickCoordinatesInteraction.prototype.shouldStopEvent = function () {
  return false;
};

PickCoordinatesInteraction.prototype.setActive = function (active) {
  var map = this.getMap();
  if (map) {
    var elem = map.getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setActive.call(this, active);
};

PickCoordinatesInteraction.prototype.setMap = function (map) {
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this, map);
};

module.exports = PickCoordinatesInteraction;

},{}],69:[function(require,module,exports){
var PickFeatureEventType = {
  PICKED: 'picked'
};

var PickFeatureEvent = function PickFeatureEvent(type, coordinate, layer, feature) {
  this.type = type;
  this.feature = feature;
  this.coordinate = coordinate;
  this.layer = layer;
};

var PickFeatureInteraction = function PickFeatureInteraction() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickFeatureInteraction.handleDownEvent_,
    handleUpEvent: PickFeatureInteraction.handleUpEvent_,
    handleMoveEvent: PickFeatureInteraction.handleMoveEvent_
  });
  var features = options.features;

  this.features_ = Array.isArray(features) && features.length && features || null;
  this.layers_ = options.layers || null;
  this.pickedFeature_ = null;
  this.pickedLayer_ = null;
  this.layerFilter_ = function (layer) {
    var include = _.includes(_this.layers_, layer);
    _this.pickedLayer_ = include && layer;
    return include;
  };
};
ol.inherits(PickFeatureInteraction, ol.interaction.Pointer);

PickFeatureInteraction.handleDownEvent_ = function (event) {
  this.pickedFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  return this.pickedFeature_;
};

PickFeatureInteraction.handleUpEvent_ = function (event) {
  if (this.pickedFeature_) {
    this.dispatchEvent(new PickFeatureEvent(PickFeatureEventType.PICKED, event.coordinate, this.pickedLayer_, this.pickedFeature_));
  }
  return true;
};

PickFeatureInteraction.handleMoveEvent_ = function (event) {
  var elem = event.map.getTargetElement();
  var intersectingFeature = this.featuresAtPixel_(event.pixel, event.map);
  elem.style.cursor = intersectingFeature ? 'pointer' : '';
};

PickFeatureInteraction.prototype.featuresAtPixel_ = function (pixel, map) {
  var _this2 = this;

  var featureFound = null;
  var intersectingFeature = map.forEachFeatureAtPixel(pixel, function (feature) {
    if (_this2.features_) {
      if (_this2.features_.indexOf(feature) > -1) return feature;else return null;
    }
    return feature;
  }, {
    layerFilter: this.layerFilter_,
    hitTolerance: isMobile && isMobile.any ? 10 : 0
  });
  if (intersectingFeature) featureFound = intersectingFeature;
  return featureFound;
};

PickFeatureInteraction.prototype.shouldStopEvent = function () {
  return false;
};

PickFeatureInteraction.prototype.setMap = function (map) {
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this, map);
};

module.exports = PickFeatureInteraction;

},{}],70:[function(require,module,exports){
var RasterLayers = require('g3w-ol/layers/rasters');
var BaseLayers = {};

BaseLayers.OSM = {};

BaseLayers.OSM.get = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      title = _ref.title,
      id = _ref.id,
      url = _ref.url;

  return new ol.layer.Tile({
    source: new ol.source.OSM({
      url: url
    }),
    id: id || 'osm',
    title: title || 'OSM',
    basemap: true
  });
};

BaseLayers.TMS = {
  get: function get() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$visible = _ref2.visible,
        visible = _ref2$visible === undefined ? false : _ref2$visible,
        _ref2$url = _ref2.url,
        url = _ref2$url === undefined ? null : _ref2$url,
        _ref2$source_type = _ref2.source_type,
        source_type = _ref2$source_type === undefined ? "xyz" : _ref2$source_type,
        minZoom = _ref2.minZoom,
        maxZoom = _ref2.maxZoom,
        projection = _ref2.projection,
        attributions = _ref2.attributions,
        _ref2$crossOrigin = _ref2.crossOrigin,
        crossOrigin = _ref2$crossOrigin === undefined ? 'anonymous' : _ref2$crossOrigin;

    var layer = void 0;
    switch (source_type) {
      case 'xyz':
        layer = RasterLayers.XYZLayer({
          url: url,
          visible: visible,
          minZoom: minZoom,
          maxZoom: maxZoom,
          attributions: attributions,
          projection: projection,
          crossOrigin: crossOrigin
        });
        break;
      case 'arcgismapserver':
        layer = RasterLayers.TiledArgisMapServer({
          url: url,
          visible: visible,
          projection: projection,
          attributions: attributions
        });
        break;
      default:
    }
    return layer;
  }
};

BaseLayers.WMS = {
  get: function get(_ref3) {
    var url = _ref3.url,
        projection = _ref3.projection,
        attributions = _ref3.attributions,
        layers = _ref3.layers,
        _ref3$singleTile = _ref3.singleTile,
        singleTile = _ref3$singleTile === undefined ? false : _ref3$singleTile,
        _ref3$opacity = _ref3.opacity,
        opacity = _ref3$opacity === undefined ? 1 : _ref3$opacity;

    return RasterLayers.WMSLayer({
      url: url,
      projection: projection,
      attributions: attributions,
      layers: layers,
      tiled: singleTile,
      opacity: opacity
    });
  }
};

BaseLayers.WMTS = {
  get: function get() {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref4.url,
        layer = _ref4.layer,
        visible = _ref4.visible,
        attributions = _ref4.attributions,
        matrixSet = _ref4.matrixSet,
        projection = _ref4.projection,
        requestEncoding = _ref4.requestEncoding,
        _ref4$style = _ref4.style,
        style = _ref4$style === undefined ? 'default' : _ref4$style,
        _ref4$format = _ref4.format,
        format = _ref4$format === undefined ? 'image/png' : _ref4$format,
        _ref4$opacity = _ref4.opacity,
        opacity = _ref4$opacity === undefined ? 0.7 : _ref4$opacity;

    var projectionExtent = projection.getExtent();
    var resolutions = new Array(14);
    var size = ol.extent.getWidth(projectionExtent) / 256;
    var matrixIds = new Array(14);
    for (var z = 0; z < 14; ++z) {
      // generate resolutions and matrixIds arrays for this WMTS
      resolutions[z] = size / Math.pow(2, z);
      matrixIds[z] = z;
    }
    return new ol.layer.Tile({
      opacity: opacity,
      source: new ol.source.WMTS({
        url: url,
        projection: projection,
        layer: layer,
        matrixSet: matrixSet,
        requestEncoding: requestEncoding,
        format: format,
        attributions: attributions,
        tileGrid: new ol.tilegrid.WMTS({
          origin: ol.extent.getTopLeft(projectionExtent),
          resolutions: resolutions,
          matrixIds: matrixIds
        }),
        style: style
      })
    });
  }
};

BaseLayers.BING = {};

BaseLayers.BING.get = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var imagerySet = config.imagerySet || 'Aerial'; // 'Road', 'AerialWithLabels', 'Aerial'
  return new ol.layer.Tile({
    name: imagerySet,
    visible: false,
    preload: Infinity,
    source: new ol.source.BingMaps({
      imagerySet: imagerySet,
      key: config.key
    }),
    basemap: true
  });
};

module.exports = BaseLayers;

},{"g3w-ol/layers/rasters":71}],71:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _getDPI = require('utils/getDPI');

var DPI = (0, _getDPI.getDPI)();

var RasterLayers = {};

var loadImageTileFunction = function loadImageTileFunction(_ref) {
  var _ref$method = _ref.method,
      method = _ref$method === undefined ? 'GET' : _ref$method,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'image' : _ref$type,
      _ref$sourceOptions = _ref.sourceOptions,
      sourceOptions = _ref$sourceOptions === undefined ? {} : _ref$sourceOptions;

  window.URL = window.URL || window.webkitURL;
  sourceOptions[type + 'LoadFunction'] = function (imageTile, url) {
    var xhr = new XMLHttpRequest();

    var _url$split = url.split('?'),
        _url$split2 = _slicedToArray(_url$split, 2),
        _url = _url$split2[0],
        params = _url$split2[1];

    xhr.open(method, method === 'POST' && _url || url);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
    xhr.responseType = 'blob';
    xhr.onload = function () {
      var data = this.response;
      if (data !== undefined) {
        imageTile.getImage().src = window.URL.createObjectURL(data);
      } else {
        imageTile.setState(ol.TileState.ERROR);
      }
    };
    xhr.onerror = function () {
      image.setState(ol.TileState.ERROR);
    };
    xhr.send(method === 'POST' && params);
  };
};

RasterLayers.TiledWMSLayer = function (layerObj, extraParams) {
  if ('mapproxy' === layerObj.cache_provider) {
    return RasterLayers.TiledMapProxyWMSLayer(layerObj);
  }
  return RasterLayers._WMSLayer({
    layerObj: layerObj,
    extraParams: extraParams || {},
    tiled: true
  });
};

/**
 * @since 3.10.0
 * @param opts
 * @constructor
 */
RasterLayers.TiledMapProxyWMSLayer = function () {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var resolutions = ol.tilegrid.createXYZ({ extent: opts.cache_grid_extent, maxZoom: opts.maxZoom || 19 }).getResolutions();
  console.log(resolutions);
  return new ol.layer.Tile({
    source: new ol.source.WMTS({
      url: opts.url,
      layer: opts.cache_layer,
      matrixSet: opts.cache_grid,
      format: opts.cache_format || 'png',
      projection: opts.layers[0].getProjection(),
      tileGrid: new ol.tilegrid.WMTS({
        origin: ol.extent.getTopLeft(opts.cache_grid_extent),
        resolutions: resolutions,
        matrixIds: resolutions.map(function (_, i) {
          return i;
        })
      }),
      style: opts.style || '',
      transparent: false
    })
  });
};

RasterLayers.WMSLayer = function (layerObj) {
  var extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

  return RasterLayers._WMSLayer({
    layerObj: layerObj,
    extraParams: extraParams,
    method: method
  });
};

RasterLayers.WMTSLayer = function (layerObj, extraParams) {
  return new ol.layer.Tile({
    opacity: 1,
    source: new ol.source.WMTS(options)
  });
};

RasterLayers.ImageArgisMapServer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return new ol.layer.Image({
    source: new ol.source.ImageArcGISRest({
      ratio: options.ratio,
      params: {
        FORMAT: options.format
      },
      url: options.url
    })
  });
};

RasterLayers.TiledArgisMapServer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var url = options.url,
      _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      extent = options.extent,
      projection = options.projection,
      attributions = options.attributions,
      crossOrigin = options.crossOrigin;

  var source = new ol.source.TileArcGISRest({
    url: url,
    projection: projection,
    attributions: attributions,
    crossOrigin: crossOrigin
  });
  return new ol.layer.Tile({
    extent: extent,
    visible: visible,
    source: source
  });
};

RasterLayers._WMSLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var layerObj = options.layerObj,
      _options$method = options.method,
      method = _options$method === undefined ? 'GET' : _options$method,
      extraParams = options.extraParams,
      _options$tiled = options.tiled,
      tiled = _options$tiled === undefined ? false : _options$tiled;
  var _layerObj$iframe_inte = layerObj.iframe_internal,
      iframe_internal = _layerObj$iframe_inte === undefined ? false : _layerObj$iframe_inte,
      _layerObj$layers = layerObj.layers,
      layers = _layerObj$layers === undefined ? '' : _layerObj$layers,
      _layerObj$version = layerObj.version,
      version = _layerObj$version === undefined ? '1.3.0' : _layerObj$version,
      _layerObj$sld_version = layerObj.sld_version,
      sld_version = _layerObj$sld_version === undefined ? '1.1.0' : _layerObj$sld_version,
      id = layerObj.id,
      name = layerObj.name,
      _layerObj$opacity = layerObj.opacity,
      opacity = _layerObj$opacity === undefined ? 1.0 : _layerObj$opacity,
      visible = layerObj.visible,
      extent = layerObj.extent,
      maxResolution = layerObj.maxResolution,
      format = layerObj.format;


  var params = {
    LAYERS: layers,
    VERSION: version,
    TRANSPARENT: true,
    SLD_VERSION: sld_version,
    DPI: DPI
  };

  /**
   * Check if not undefined otherwise FORMAT parameter is not send
   * 
   * @since 3.7.11
   */
  if (undefined !== format) {
    params.FORMAT = format;
  }

  var sourceOptions = {
    url: layerObj.url,
    params: Object.assign({}, params, extraParams),
    ratio: 1,
    projection: layerObj.projection ? layerObj.projection.getCode() : null
  };

  if (iframe_internal || 'POST' === method) {
    loadImageTileFunction({ method: method, sourceOptions: sourceOptions, type: 'image' });
  }

  var imageOptions = {
    id: id,
    name: name,
    opacity: opacity,
    visible: visible,
    extent: extent,
    maxResolution: maxResolution
  };

  if (tiled) {
    imageOptions.source = new ol.source.TileWMS(sourceOptions);
    return new ol.layer.Tile(imageOptions);
  }

  imageOptions.source = new ol.source.ImageWMS(sourceOptions);
  return new ol.layer.Image(imageOptions);
};

RasterLayers.XYZLayer = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

  var iframe_internal = options.iframe_internal || false;
  var url = options.url,
      projection = options.projection,
      maxZoom = options.maxZoom,
      minZoom = options.minZoom,
      _options$visible2 = options.visible,
      visible = _options$visible2 === undefined ? true : _options$visible2,
      crossOrigin = options.crossOrigin,
      cache_provider = options.cache_provider;
  //in case of no url provide, skip

  if (!url) {
    return;
  }
  var sourceOptions = {
    url: url,
    maxZoom: maxZoom,
    minZoom: minZoom,
    projection: projection,
    crossOrigin: crossOrigin
  };

  if (iframe_internal) {
    loadImageTileFunction({
      method: method,
      type: 'tile',
      sourceOptions: sourceOptions
    });
  }
  /** @since 3.10.0 add cache_provider **/
  if ('degrees' === projection.getUnits() || 'mapproxy' === cache_provider) {
    var extent = projection.getExtent();
    var resolutions = ol.tilegrid.createXYZ({ extent: extent, maxZoom: maxZoom }).getResolutions();
    // Need to remove the first resolution because in this version of ol createXYZ doesn't accept maxResolution options.
    // The extent of EPSG:4326 is not squared [-180, -90, 180, 90] as EPSG:3857 so the resolution is calculated
    // by Math.max(width(extent)/tileSize,Height(extent)/tileSize)
    // we need to calculate to Math.min instead, so we have to remove the first resolution
    resolutions.splice(0, 1);
    sourceOptions.tileGrid = new ol.tilegrid.TileGrid({ extent: extent, resolutions: resolutions });
  }

  var source = new ol.source.XYZ(sourceOptions);
  return new ol.layer.Tile({
    visible: visible,
    projection: projection,
    source: source
  });
};

module.exports = RasterLayers;

},{"utils/getDPI":393}],72:[function(require,module,exports){
var Projection = function Projection() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!options.crs) return null;
  // structure of information crs from server set on each layer and base layer
  var _options$crs = options.crs,
      epsg = _options$crs.epsg,
      proj4def = _options$crs.proj4,
      _options$crs$geograph = _options$crs.geographic,
      geographic = _options$crs$geograph === undefined ? false : _options$crs$geograph,
      _options$crs$axisinve = _options$crs.axisinverted,
      axisinverted = _options$crs$axisinve === undefined ? false : _options$crs$axisinve,
      extent = _options$crs.extent;

  proj4def && proj4.defs(epsg, proj4def);
  this._axisOrientation = axisinverted ? 'neu' : 'enu';
  var degrees = geographic;
  ol.proj.Projection.call(this, {
    code: epsg,
    extent: extent,
    axisOrientation: this._axisOrientation,
    units: degrees ? 'degrees' : 'm'
  });
};

ol.inherits(Projection, ol.proj.Projection);

var proto = Projection.prototype;

proto.getAxisOrientation = function () {
  return this._axisOrientation;
};

proto.isInvertedAxisOrientation = function () {
  return this._axisOrientation === 'neu';
};

proto.getOlProjection = function () {};

module.exports = Projection;

},{}],73:[function(require,module,exports){
var _constant = require('app/constant');

var _normalizeEpsg = require('utils/normalizeEpsg');

var Projection = require('g3w-ol/projection/projection');

var _require = require('utils'),
    XHR = _require.XHR;

var Projections = {

  /**
   * @since v3.8
   */
  isRegistered: function isRegistered(epsg) {
    return ol.proj.get(epsg);
  },
  get: function get() {
    var crs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var cachedProjection = this.isRegistered(crs.epsg);
    if (cachedProjection) {
      return cachedProjection;
    }
    var projection = new Projection({
      crs: crs
    });
    ol.proj.addProjection(projection);
    ol.proj.proj4.register(proj4);
    return projection;
  },


  /**
   * Check and register epsg
   * 
   * @param epsg : "EPSG:<CODE>" Ex. "EPSG:4326"
   * @returns {Promise<Projection>}
   * @since v3.8
   */
  registerProjection: function registerProjection(epsg) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var projection = _this.isRegistered(epsg);
      // check if already register
      if (projection) {
        resolve(projection);
      } else {
        XHR.get({ url: '' + _constant.API_BASE_URLS.CRS + epsg.split(':')[1] }).then(function (_ref) {
          var result = _ref.result,
              data = _ref.data;

          if (result) {
            data.epsg = (0, _normalizeEpsg.normalizeEpsg)(data.epsg);
            projection = _this.get(data);
            ol.proj.proj4.register(proj4);
            resolve(projection);
          }
        }).catch(function (err) {
          return reject(err);
        });
      }
    });
  }
};

module.exports = Projections;

},{"app/constant":5,"g3w-ol/projection/projection":72,"utils":419,"utils/normalizeEpsg":436}],74:[function(require,module,exports){
var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function CatalogService() {
  var _this2 = this;

  this.state = {
    prstate: _projects2.default.state,
    highlightlayers: false,
    external: {
      wms: [], // added by wms cside bar component
      vector: [] // added to map controls for the moment
    },
    layerstrees: [],
    layersgroups: []
  };

  this.setters = {

    /**
     * @param {{ layer: unknown, type: 'vector' }}
     * 
     * @fires CatalogService~addExternalLayer
     * 
     * @since 3.8.0
     */
    addExternalLayer: function addExternalLayer() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref.layer,
          _ref$type = _ref.type,
          type = _ref$type === undefined ? 'vector' : _ref$type;

      layer.removable = true;
      this.state.external[type].push(layer);
    },


    /**
     * @param {{ name: string, type: 'vector' }}
     * 
     * @fires CatalogService~removeExternalLayer
     * 
     * @since 3.8.0
     */
    removeExternalLayer: function removeExternalLayer() {
      var _this = this;

      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          name = _ref2.name,
          _ref2$type = _ref2.type,
          type = _ref2$type === undefined ? 'vector' : _ref2$type;

      this.state.external[type].filter(function (layer, index) {
        if (layer.name === name) {
          _this.state.external[type].splice(index, 1);
          return true;
        }
      });
    },


    /**
     * @param {{ layer: unknown, type: unknown, selected: unknown }}
     * 
     * @fires CatalogService~setSelectedExternalLayer
     * 
     * @since 3.8.0
     */
    setSelectedExternalLayer: function setSelectedExternalLayer(_ref3) {
      var layer = _ref3.layer,
          type = _ref3.type,
          selected = _ref3.selected;

      this.state.external[type].forEach(function (externalLayer) {
        if (typeof externalLayer.selected != "undefined") externalLayer.selected = layer === externalLayer ? selected : false;
      });
    }
  };

  base(this);
  var layersStores = _catalogLayers2.default.getLayersStores();

  layersStores.forEach(function (layersStore) {
    return _this2.addLayersStoreToLayersTrees(layersStore);
  });

  _catalogLayers2.default.onafter('addLayersStore', function (layersStore) {
    _this2.addLayersStoreToLayersTrees(layersStore);
  });

  _catalogLayers2.default.onafter('removeLayersStore', function (layersStore) {
    _this2.state.layerstrees.find(function (layersTree, idx) {
      if (layersTree.storeid === layersStore.getId()) {
        _this2.state.layerstrees.splice(idx, 1);
        return true;
      }
    });
  });
  _catalogLayers2.default.onafter('removeLayersStores', function () {
    _this2.state.layerstrees.forEach(function (layersTree, idx) {
      _this2.state.layerstrees.splice(idx, 1);
    });
  });
}

inherit(CatalogService, G3WObject);

var proto = CatalogService.prototype;

proto.createLayersGroup = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$title = _ref4.title,
      title = _ref4$title === undefined ? 'Layers Group' : _ref4$title,
      _ref4$layers = _ref4.layers,
      layers = _ref4$layers === undefined ? [] : _ref4$layers;

  var nodes = [];
  layers.forEach(function (layer) {
    return nodes.push(layer);
  });
  return {
    title: title,
    nodes: nodes
  };
};

proto.getMajorQgisVersion = function () {
  return _projects2.default.getCurrentProject().getQgisVersion({
    type: 'major'
  });
};

// method to add a custom layers group
proto.addLayersGroup = function (layersGroup) {
  this.state.layersgroups.push(layersGroup);
};

proto.addLayersStoreToLayersTrees = function (layersStore) {
  this.state.layerstrees.push({
    tree: layersStore.getLayersTree(),
    storeid: layersStore.getId()
  });
};

proto.changeMapTheme = function () {
  var _ref5 = _asyncToGenerator(function* (map_theme) {
    // set is changing project view
    _application2.default.changeProjectView(true);
    var currentProject = this.state.prstate.currentProject;

    var rootNode = this.state.layerstrees[0];
    rootNode.checked = true;
    var layerstree = rootNode.tree[0].nodes;
    var changeMapThemeProjectObj = yield currentProject.setLayersTreePropertiesFromMapTheme({
      map_theme: map_theme,
      layerstree: layerstree,
      rootNode: rootNode
    });
    _application2.default.changeProjectView(false);
    return changeMapThemeProjectObj;
  });

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}();

/**
 * @param {{ type: 'vector' }}
 * 
 * @returns {unknown}
 * 
 * @since 3.8.0
 */
proto.getExternalLayers = function (_ref6) {
  var _ref6$type = _ref6.type,
      type = _ref6$type === undefined ? 'vector' : _ref6$type;

  return this.state.external[type];
};

/**
 * @param {{ type: 'vector' }}
 * 
 * @returns {unknown}
 * 
 * @since 3.8.0
 */
proto.getExternalSelectedLayers = function (_ref7) {
  var _ref7$type = _ref7.type,
      type = _ref7$type === undefined ? 'vector' : _ref7$type;

  return this.getExternalLayers({ type: type }).filter(function (layer) {
    return layer.selected;
  });
};

/**
 * @param {{ id: string, type: 'vector' }}
 * 
 * @returns {unknown}
 * 
 * @since 3.8.0
 */
proto.getExternalLayerById = function (_ref8) {
  var id = _ref8.id,
      _ref8$type = _ref8.type,
      type = _ref8$type === undefined ? 'vector' : _ref8$type;

  return this.state.external[type].find(function (layer) {
    return layer.id === id;
  });
};

/**
 * @param {{ id: string, type: unknown }}
 * 
 * @returns {boolean}
 * 
 * @since 3.8.0
 */
proto.isExternalLayerSelected = function (_ref9) {
  var id = _ref9.id,
      type = _ref9.type;

  var externalLayer = this.getExternalLayerById({ id: id, type: type });
  return !!(externalLayer && externalLayer.selected);
};

module.exports = CatalogService;

},{"core/g3wobject":8,"services/application":310,"store/catalog-layers":329,"store/projects":335,"utils":419}],75:[function(require,module,exports){
var _Catalog = require('components/Catalog.vue');

var catalogComponentOptions = _interopRequireWildcard(_Catalog);

var _CatalogLayersGroup = require('components/CatalogLayersGroup.vue');

var catalogLayersGroupComponentOptions = _interopRequireWildcard(_CatalogLayersGroup);

var _CatalogTristateTree = require('components/CatalogTristateTree.vue');

var catalogTristateTreeComponentOptions = _interopRequireWildcard(_CatalogTristateTree);

var _CatalogLayersLegend = require('components/CatalogLayersLegend.vue');

var catalogLayersLegendComponentOptions = _interopRequireWildcard(_CatalogLayersLegend);

var _CatalogLayersLegendItems = require('components/CatalogLayersLegendItems.vue');

var catalogLayersLegendItemsComponentOptions = _interopRequireWildcard(_CatalogLayersLegendItems);

var _components = require('store/components');

var _components2 = _interopRequireDefault(_components);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');
var Service = require('gui/catalog/catalogservice');

var InternalComponent = Vue.extend(catalogComponentOptions);

Vue.component('g3w-catalog', catalogComponentOptions);
Vue.component('layers-group', catalogLayersGroupComponentOptions);
Vue.component('tristate-tree', catalogTristateTreeComponentOptions);
Vue.component('layerslegend', catalogLayersLegendComponentOptions);
Vue.component('layerslegend-items', catalogLayersLegendItemsComponentOptions);

function CatalogComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.resizable = true;
  base(this, options);
  var legend = options.config.legend;

  this.title = "catalog";
  this.mapComponentId = options.mapcomponentid;
  var service = options.service || new Service();
  this.setService(service);
  this.setInternalComponent(new InternalComponent({
    service: service,
    legend: legend
  }));
  this.internalComponent.state = this.getService().state;
  var listenToMapVisibility = function listenToMapVisibility(map) {
    var mapService = map.getService();
    _this.state.visible = !mapService.state.hidden;
    mapService.onafter('setHidden', function (hidden) {
      _this.state.visible = !mapService.state.hidden;
      _this.state.expanded = true;
    });
  };
  if (this.mapComponentId) {
    var map = _gui2.default.getComponent(this.mapComponentId);
    !map && _components2.default.on('componentregistered', function (component) {
      return component.getId() === _this.mapComponentId && listenToMapVisibility(component);
    }) || listenToMapVisibility(map);
  }
}

inherit(CatalogComponent, Component);

module.exports = CatalogComponent;

},{"components/Catalog.vue":149,"components/CatalogLayersGroup.vue":153,"components/CatalogLayersLegend.vue":154,"components/CatalogLayersLegendItems.vue":155,"components/CatalogTristateTree.vue":157,"gui/catalog/catalogservice":74,"gui/component/component":77,"services/gui":319,"store/components":330,"utils":419}],76:[function(require,module,exports){
var _ChangeMapMenu = require('components/ChangeMapMenu.vue');

var vueComponentOptions = _interopRequireWildcard(_ChangeMapMenu);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    merge = _require.merge; /**
                             * @file
                             * @since 3.8.0
                             */

var Component = require('gui/component/component');

var InternalComponent = Vue.extend(vueComponentOptions);

function ChangeMapMenuComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.id = 'changemapmenu';
  base(this, options);
  this.state.visible = true;
  merge(this, options);
  this.internalComponent = new InternalComponent();
}
inherit(ChangeMapMenuComponent, Component);

module.exports = ChangeMapMenuComponent;

},{"components/ChangeMapMenu.vue":158,"gui/component/component":77,"utils":419}],77:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    merge = _require.merge,
    noop = _require.noop,
    capitalize_first_letter = _require.capitalize_first_letter,
    resolve = _require.resolve;

var G3WObject = require('core/g3wobject');

/** @deprecated */
var _cloneDeep = require('lodash.clonedeep');

/**
 * Component class
 * 
 * @param { Object} options
 * @param { number } options.id 
 * @param { string } options.title
 * @param { boolean } options.visible
 * @param { boolean } options.open
 * @param { boolean } options.resizable
 * @param { null | unknown } options.info
 * @param { boolean } options.loading
 * @param { boolean } options.disabled
 * @param { boolean } options.closewhenshowviewportcontent
 * @param options.events
 */
var Component = function Component() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$id = options.id,
      id = _options$id === undefined ? Math.random() * 1000 : _options$id,
      _options$title = options.title,
      title = _options$title === undefined ? '' : _options$title,
      _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      _options$open = options.open,
      open = _options$open === undefined ? false : _options$open,
      _options$resizable = options.resizable,
      resizable = _options$resizable === undefined ? false : _options$resizable,
      _options$info = options.info,
      info = _options$info === undefined ? null : _options$info,
      _options$loading = options.loading,
      loading = _options$loading === undefined ? false : _options$loading,
      _options$disabled = options.disabled,
      disabled = _options$disabled === undefined ? false : _options$disabled,
      _options$closewhensho = options.closewhenshowviewportcontent,
      closewhenshowviewportcontent = _options$closewhensho === undefined ? true : _options$closewhensho;


  this._firstLayout = true;

  /** internal VUE component */
  this.internalComponent = null;

  /** @type { Array } */
  this._components = [];

  /** @type { string } */
  this.id = id;

  /** @type { string } */
  this.title = title;

  this.state = {
    visible: visible,
    open: open,
    resizable: resizable,
    info: info,
    loading: loading,
    disabled: disabled,
    closewhenshowviewportcontent: closewhenshowviewportcontent,
    sizes: {
      width: 0,
      height: 0
    }
  };

  this.setters = {
    setOpen: function setOpen(bool) {
      this.state.open = bool;
      this._setOpen(bool);
    },
    setVisible: function setVisible(bool) {
      this.state.visible = bool;
      this._setVisible(bool);
    },
    setLoading: function setLoading() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.state.loading = bool;
    },
    setDisabled: function setDisabled() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.state.disabled = bool;
    },
    reload: function reload() {
      this._reload();
    }
  };

  merge(this, options);

  base(this);

  // add events options
  this.events = options.events;

  if (this.events) {
    this.handleEventsComponent();
  }
};

inherit(Component, G3WObject);

var proto = Component.prototype;

/**
 * @param { Object } options
 * @param { Array } options.components
 * @param { Object } options.service
 * @param { Function } options.service.init
 * @param options.vueComponentObject
 * @param options.template
 * @param options.propsData
 */
proto.init = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.vueComponent = this.createVueComponent(options.vueComponentObject);
  this._components = options.components || [];

  this.setService(options.service || noop);

  if (this._service.init) {
    this._service.init(options);
  }

  if (options.template) {
    this.setInternalComponentTemplate(options.template);
  }

  this.setInternalComponent = function () {
    this.internalComponent = new (Vue.extend(this.vueComponent))({
      service: this._service,
      template: options.template,
      propsData: options.propsData
    });
    this.internalComponent.state = this.getService().state;
  };

  this.setInternalComponent();

  return this;
};

proto.getId = function () {
  return this.id;
};

proto.setId = function (id) {
  this.id = id;
};

proto.getOpen = function () {
  return this.state.open;
};

proto.closeWhenViewportContentIsOpen = function () {
  return this.getOpen() && this.state.closewhenshowviewportcontent;
};

proto.getVisible = function () {
  return this.state.visible;
};

proto.getTitle = function () {
  return this.state.title;
};

proto.setTitle = function (title) {
  this.state.title = title;
};

proto.getService = function () {
  return this._service;
};

proto.setService = function (service) {
  this._service = service;
};

proto.handleEventsComponent = function () {
  if (this.events.open) {
    var _events$open = this.events.open,
        _events$open$when = _events$open.when,
        when = _events$open$when === undefined ? "after" : _events$open$when,
        _events$open$cb = _events$open.cb,
        cb = _events$open$cb === undefined ? function () {} : _events$open$cb;

    this['on' + when]('setOpen', function (bool) {
      return cb(bool);
    });
  }
};

proto.insertComponentAt = function (index, Component) {
  this._components.splice(index, 0, Component);
};

proto.removeCompomentAt = function (index) {
  this._components.splice(index, 1);
};

proto.addComponent = function (Component) {
  this._components.push(Component);
};

proto.popComponent = function () {
  return this._components.pop();
};

proto.removeComponent = function (Component) {
  var _this = this;

  this._components.forEach(function (c, i) {
    if (c === Component) {
      _this.splice(i, 1);
      return false;
    }
  });
};

proto.setComponents = function (components) {
  this._components = Array.isArray(components) ? components : [];
};

proto.exendComponents = function (components) {
  _.merge(this._components, components);
};

proto.getInternalComponent = function () {
  return this.internalComponent;
};

proto.setInternalComponent = function (internalComponent) {
  var _this2 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.internalComponent = !internalComponent && this.internalComponentClass ? new this.internalComponentClass() : internalComponent;
  (options.events || []).forEach(function (e) {
    return _this2.internalComponent.$on(e.name, function (data) {
      return e.handler && e.handler(data) || _this2['set' + capitalize_first_letter(e.name)](data);
    });
  });
};

proto.createVueComponent = function (vueObjOptions) {
  return _cloneDeep(vueObjOptions);
};

proto.addInternalComponentData = function (data) {
  _.merge(this.internalComponent, data);
};

proto.overwriteServiceMethod = function (methodName, method) {
  this._service[methodName] = method;
};

proto.overwriteServiceMethods = function (methodsOptions) {
  var _this3 = this;

  Object.entries(methodsOptions).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        methodName = _ref2[0],
        method = _ref2[1];

    return _this3.overwriteServiceMethod(methodName, method);
  });
};

proto.extendService = function (serviceOptions) {
  if (this._service) {
    merge(this._service, serviceOptions);
  }
};

proto.extendInternalComponent = function (internalComponentOptions) {
  var _this4 = this;

  if (!this.vueComponent) {
    this.vueComponent = internalComponentOptions;
    return;
  }
  Object.entries(internalComponentOptions).forEach(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        value = _ref4[1];

    switch (key) {
      case 'methods':
        _this4.extendInternalComponentMethods(value);break;
      case 'components':
        _this4.extendInternalComponentComponents(value);break;
      case 'computed':
        merge(_this4.vueComponent[key], value);break;
      case 'data':
        merge(_this4.vueComponent[key], value);break;
    }
  });
};

proto.extendInternalComponentComponents = function (components) {
  if (components) {
    merge(this.vueComponent.components, components);
  }
};

proto.extendComponents = function (components) {
  this.extendInternalComponentComponents(components);
};

proto.addComponent = function (component) {
  if (component) {
    this.vueComponent.components[component.key] = component.value;
  }
};

/** @TODO check if unusued (invalid call to "forEach.forEach") */
proto.extendInternalComponentMethods = function (methods) {
  if (methods) {
    Object.entries(methods).forEach.forEach(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          key = _ref6[0],
          value = _ref6[1];

      return !(value instanceof Function) && delete methods[key];
    });
    merge(this.vueComponent.methods, methods);
  }
};

proto.extendInternalComponentComputed = function (computed) {
  if (computed) {
    Object.entries(computed).forEach(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          key = _ref8[0],
          value = _ref8[1];

      return !(value instanceof Function) && delete computed[key];
    });
    merge(this.vueComponent.computed, computed);
  }
};

proto.setInternalComponentTemplate = function (template) {
  if (template) {
    this.vueComponent.template = template;
  }
};

proto.getInternalTemplate = function () {
  return this.vueComponent.template;
};

proto.destroy = function () {};

proto.click = function () {};

// hook function to show componet
proto.show = function () {};

proto._setOpen = function (bool) {};

proto._setVisible = function () {};

proto._reload = function () {};

/**
 * @param { Element | 'string' } parent DOM element
 * @param { boolean } append
 *  
 * @returns jquery promise
 * 
 * @fires internalComponent~ready
 * @fires mount
 */
proto.mount = function (parent, append) {
  var _this5 = this;

  var d = $.Deferred();

  if (!this.internalComponent) {
    this.setInternalComponent();
  }

  if (append) {
    $(parent).append(this.internalComponent.$mount().$el);
  }

  if (!append) {
    this.internalComponent.$mount(parent);
  }

  this.internalComponent.$nextTick(function () {
    $(parent).localize();
    _this5.emit('ready');
    d.resolve(true);
  });

  // emit mount event
  this.emit('mount');

  return d.promise();
};

/**
 * @returns jquery promise
 * 
 * @fires unmount
 */
proto.unmount = function () {
  if (!this.internalComponent) {
    return resolve();
  }
  if (this.state.resizable) {
    this.internalComponent.$off('resize-component', this.internalComponent.layout);
  }
  this.state.open = false;
  this.internalComponent.$destroy(true); // destroy vue component
  $(this.internalComponent.$el).remove(); // remove dom element
  this.internalComponent = null; // set internal componet to null (for GC)
  this.emit('unmount'); // emit unmount event
  return resolve();
};

/**
 * @returns { Element } DOM element
 */
proto.ismount = function () {
  return this.internalComponent && this.internalComponent.$el;
};

/**
 * @param { number } width 
 * @param { number } height 
 * 
 * @listens internalComponent~resize-component
 * @fires internalComponent~resize-component
 * @fires layout
 */
proto.layout = function (width, height) {
  var _this6 = this;

  if (this.state.resizable && this._firstLayout) {
    this.internalComponent.$on('resize-component', this.internalComponent.layout);
    this._firstLayout = false;
  }
  this.internalComponent.$nextTick(function () {
    _this6.internalComponent.$emit('resize-component', { width: width, height: height });
  });
  this.emit('layout');
};

module.exports = Component;

},{"core/g3wobject":8,"lodash.clonedeep":"lodash.clonedeep","utils":419}],78:[function(require,module,exports){
var _require = require('core/i18n/i18n.service'),
    t = _require.t;

module.exports = {
  matcher: function matcher(params, data) {
    var searchItem = params.term ? params.term.toLowerCase() : params.term;
    // If there are no search terms, return all of the data
    if ($.trim(searchItem) === '') return data;
    // Do not display the item if there is no 'text' property
    if (typeof data.text === 'undefined') return null;
    // `params.term` should be the term that is used for searching
    // `data.text` is the text that is displayed for the data object
    if (data.text.toLowerCase().indexOf(searchItem) > -1) {
      var modifiedData = $.extend({}, data, true);
      // You can return modified objects from here
      // This includes matching the `children` how you want in nested data sets
      return modifiedData;
    }
    // Return `null` if the term should not be displayed
    return null;
  },
  language: {
    noResults: function noResults() {
      return t("sdk.search.no_results");
    },
    errorLoading: function errorLoading() {
      return t("sdk.search.error_loading");
    },
    searching: function searching() {
      return t("sdk.search.searching");
    },
    inputTooShort: function inputTooShort(args) {
      var remainingChars = args.minimum - args.input.length;
      return t("sdk.search.autocomplete.inputshort.pre") + ' ' + remainingChars + ' ' + t("sdk.search.autocomplete.inputshort.post");
    }
  }
};

},{"core/i18n/i18n.service":9}],79:[function(require,module,exports){
var _FieldText = require('components/FieldText.vue');

var _FieldText2 = _interopRequireDefault(_FieldText);

var _FieldLink = require('components/FieldLink.vue');

var _FieldLink2 = _interopRequireDefault(_FieldLink);

var _FieldImage = require('components/FieldImage.vue');

var _FieldImage2 = _interopRequireDefault(_FieldImage);

var _FieldGeo = require('components/FieldGeo.vue');

var _FieldGeo2 = _interopRequireDefault(_FieldGeo);

var _FieldMedia = require('components/FieldMedia.vue');

var _FieldMedia2 = _interopRequireDefault(_FieldMedia);

var _FieldVue = require('components/FieldVue.vue');

var _FieldVue2 = _interopRequireDefault(_FieldVue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Fields = {
  simple_field: _FieldText2.default,
  text_field: _FieldText2.default,
  link_field: _FieldLink2.default,
  image_field: _FieldImage2.default,
  geo_field: _FieldGeo2.default,
  photo_field: _FieldImage2.default,
  media_field: _FieldMedia2.default,
  vue_field: _FieldVue2.default
};

module.exports = Fields;

},{"components/FieldGeo.vue":161,"components/FieldImage.vue":162,"components/FieldLink.vue":163,"components/FieldMedia.vue":164,"components/FieldText.vue":165,"components/FieldVue.vue":166}],80:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Fields = require('./fields');

var _require = require('utils'),
    toRawType = _require.toRawType;

var URLPattern = /^(https?:\/\/[^\s]+)/g;
var PhotoPattern = /[^\s]+.(png|jpg|jpeg|gif)$/g;

var FieldType = {
  SIMPLE: 'simple',
  GEO: 'geo',
  LINK: 'link',
  PHOTO: 'photo',
  PHOTOLINK: "photolink",
  IMAGE: 'image',
  POINTLINK: 'pointlink',
  ROUTE: 'route',
  VUE: 'vue'
};

module.exports = {
  /**
   * Get Type field from field value
   * field : Object contain the value of the field
   * @param field
   * @returns {string}
   */
  getType: function getType(field) {
    var type = field.type;
    if (type !== 'vue') {
      var fieldValue = field.value;
      var value = fieldValue && toRawType(fieldValue) === 'Object' && !fieldValue.coordinates && !fieldValue.vue ? fieldValue.value : fieldValue;
      if (!value) type = FieldType.SIMPLE;else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
        if (value.coordinates) type = FieldType.GEO;else if (value.vue) type = FieldType.VUE;
      } else if (value && Array.isArray(value)) {
        if (value.length && value[0].photo) type = FieldType.PHOTO;else type = FieldType.SIMPLE;
      } else if (value.toString().toLowerCase().match(PhotoPattern)) {
        type = FieldType.PHOTO;
      } else if (value.toString().match(URLPattern)) {
        type = FieldType.LINK;
      } else type = FieldType.SIMPLE;
    }
    return type + '_field';
  },
  isSimple: function isSimple(field) {
    return this.getType(field) === FieldType.SIMPLE + '_field';
  },
  isLink: function isLink(field) {
    return this.getType(field) === FieldType.LINK + '_field';
  },
  isImage: function isImage(field) {
    return this.getType(field) === FieldType.IMAGE + '_field';
  },
  isPhoto: function isPhoto(field) {
    return this.getType(field) === FieldType.PHOTO + '_field';
  },
  isVue: function isVue(field) {
    return this.getType(field) === FieldType.VUE + '_field';
  },

  /**
   * Method to add a new field type to Fields
   * @param type
   * @param field
   */
  add: function add(_ref) {
    var type = _ref.type,
        field = _ref.field;

    Fields[type] = field;
  },

  /**
   * Remove field from Fields list
   * @param type
   */
  remove: function remove(type) {
    delete Fields[type];
  },

  /**
   * chenge type of field (example to set vue type)
   * @param layerId
   * @param field
   */
  changeConfigFieldType: function changeConfigFieldType(_ref2) {
    var layerId = _ref2.layerId,
        _ref2$field = _ref2.field,
        field = _ref2$field === undefined ? {} : _ref2$field;

    var layer = _catalogLayers2.default.getLayerById(layerId);
    layer.changeConfigFieldType(field);
  },

  /**
   * Reset origin type
   * @param layerId
   * @param field
   */
  resetConfigFieldType: function resetConfigFieldType(_ref3) {
    var layerId = _ref3.layerId,
        _ref3$field = _ref3.field,
        field = _ref3$field === undefined ? {} : _ref3$field;

    var layer = _catalogLayers2.default.getLayerById(layerId);
    layer.resetConfigField(field);
  }
};

},{"./fields":79,"store/catalog-layers":329,"utils":419}],81:[function(require,module,exports){
var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _convertFeatureToGEOJSON = require('utils/convertFeatureToGEOJSON');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var G3WObject = require('core/g3wobject');

function FormService() {
  var _this = this;

  this.state = null;

  this.eventBus = new Vue();

  /**
   * Whether to force some state property to have a certain value.
   * (eg. setted on a child to parent form service relation)
   * 
   * @type {{ valid: boolean, update: boolean }}
   */
  this.force = {
    update: false,
    valid: false // NOT USED FOR THE MOMENT
  };

  this.layer;

  this.setters = {
    setInitForm: function setInitForm() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setInitForm(options);
    },
    setFormStructure: function setFormStructure(formStructure) {
      this.state.formstructure = formStructure;
    },
    setFormFields: function setFormFields() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.state.fields = fields;
      this.handleFieldsWithExpression(fields);
    },
    setupFields: function setupFields() {
      this._setupFields();
    },
    setFormData: function setFormData(fields) {
      this.setFormFields(fields);
    },
    setField: function setField(field) {},
    setState: function setState(state) {
      this._setState(state);
    },
    addActionsForForm: function addActionsForForm(actions) {},
    postRender: function postRender(element) {
      // hook for listener to chenge DOM

    }
  };

  base(this);

  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this._setInitForm(options);
  };

  /**
   * Init form options passed for example by editor
   */
  this._setInitForm = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fields = options.fields,
        feature = options.feature,
        parentData = options.parentData,
        layer = options.layer,
        _options$title = options.title,
        title = _options$title === undefined ? 'Form' : _options$title,
        formId = options.formId,
        name = options.name,
        _options$buttons = options.buttons,
        buttons = _options$buttons === undefined ? {} : _options$buttons,
        context_inputs = options.context_inputs,
        isnew = options.isnew,
        _options$footer = options.footer,
        footer = _options$footer === undefined ? {} : _options$footer,
        headerComponent = options.headerComponent;


    this.layer = layer;

    /**
     * Cloned feature
     */
    this.feature = feature.clone();

    this.title = title;

    this.formId = formId;

    this.name = name;

    this.buttons = buttons;

    this.context_inputs = context_inputs;

    this.parentData = parentData;

    this.headerComponent = headerComponent;

    /**
     * Force update state of the service
     * (eg. setted on a child to parent form service relation)
     */
    this.state = {
      layerid: layer.getId(),
      loading: false,
      components: [],
      disabledcomponents: [],
      component: null,
      headers: [],
      currentheaderid: null,
      fields: null,
      buttons: this.buttons,
      disabled: false,
      isnew: isnew,
      valid: true, // global form validation state. True at beginning
      update: feature.isNew(), // set update in case or not is a new feature
      // when input change will be update
      tovalidate: {},
      feature: feature,
      componentstovalidate: {},
      footer: footer,
      ready: false
    };

    this.force.update = feature.isNew();

    /**
     * Expression fields dependencies from filter_expression
     */
    this.filter_expression_fields_dependencies = {}; // 

    /**
     * Expression fields dependencies from default_expression
     */
    this.default_expression_fields_dependencies = {};

    /**
     * @since 3.8.0
     */
    this.default_expression_fields_on_update = [];

    /**
     * Wheter to listen for changes when `saveDefaultExpressionFieldsNotDependencies` is called
     * 
     * @since 3.8.0
     */
    this.listenChangeInput = true;

    this.setFormFields(fields);

    if (this.layer && options.formStructure) {
      this.setFormStructure(this.layer.getLayerEditingFormStructure(fields));
    }
  };
  this.eventBus.$on('set-loading-form', function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return _this.state.loading = bool;
  });
}

inherit(FormService, G3WObject);

var proto = FormService.prototype;

proto.setReady = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.ready = bool;
};

/**
 * Called when an input change value
 * 
 * @param input
 */
proto.changeInput = function (input) {
  if (true === this.listenChangeInput) {
    this.evaluateFilterExpressionFields(input);
    this.evaluateDefaultExpressionFields(input);
    this.isValid(input);
    this.isUpdated(input);
  }
};

/**
 * Check if form is updated base on change on input
 * 
 * @param input
 */
proto.isUpdated = function (input) {
  this.state.update = this.force.update || (!this.state.update ? input.update : !!this.state.fields.find(function (field) {
    return field.update;
  }));
};

/**
 *
 */
proto.setUpdate = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$force = options.force,
      force = _options$force === undefined ? false : _options$force;

  this.force.update = force;
  this.state.update = this.force.update || bool;
  if (false === this.state.update) {
    // set original `field._value` equal to current value to get changes
    this.state.fields.forEach(function (field) {
      field._value = field.value;
    });
  }
};

/**
 * Evaluate filter expression
 * 
 * @param input
 */
proto.evaluateDefaultExpressionFields = function () {
  var _this2 = this;

  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var filter = this.default_expression_fields_dependencies[input.name];
  if (filter) {
    this.feature.set(input.name, input.value);
    filter.forEach(function (dependency_field) {
      FormService._getDefaultExpression({
        parentData: _this2.parentData,
        qgs_layer_id: _this2.layer.getId(),
        field: _this2._getField(dependency_field),
        feature: _this2.feature
      });
    });
  }
};

/**
 * Evaluate filter expression fields
 * 
 * @param input
 */
proto.evaluateFilterExpressionFields = function () {
  var _this3 = this;

  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var filter = this.filter_expression_fields_dependencies[input.name];
  if (filter) {
    // on form service inititalization `filter_expression` option has
    // `referencing_fields` or `referenced_columns` from another layer
    var fieldForm = this._getField(input.name);
    if (fieldForm) {
      this.feature.set(fieldForm.name, fieldForm.value);
    }
    filter.forEach(function (dependency_field) {
      FormService._getFilterExpression({
        parentData: _this3.parentData,
        qgs_layer_id: _this3.layer.getId(),
        field: _this3._getField(dependency_field),
        feature: _this3.feature
      });
    });
  }
};

/**
 * Handle a field that has a `filter_expression` value object
 * 
 * @since 3.8.0
 */
proto._handleFieldWithFilterExpression = function (field, filter_expression) {
  var _this4 = this;

  if (!filter_expression) {
    return;
  }

  var _filter_expression$re = filter_expression.referencing_fields,
      referencing_fields = _filter_expression$re === undefined ? [] : _filter_expression$re,
      _filter_expression$re2 = filter_expression.referenced_columns,
      referenced_columns = _filter_expression$re2 === undefined ? [] : _filter_expression$re2;


  var dependency_fields = new Set();

  // TODO: add description
  [].concat(_toConsumableArray(referenced_columns), _toConsumableArray(referencing_fields)).forEach(function (dependency_field) {
    return dependency_fields.add(dependency_field);
  });

  dependency_fields.forEach(function (dependency_field) {
    // TODO: shorten variable name
    if (undefined === _this4.filter_expression_fields_dependencies[dependency_field]) {
      _this4.filter_expression_fields_dependencies[dependency_field] = [];
    }
    _this4.filter_expression_fields_dependencies[dependency_field].push(field.name);
  });

  // Call input service if a field has a `filter_expression` every time we open a form
  FormService._getFilterExpression({
    parentData: this.parentData,
    qgs_layer_id: this.layer.getId(),
    field: field,
    feature: this.feature
  });
};

/**
 * Handle a field that has a `default_value` object and check if `apply_on_update` only
 * 
 * @since 3.8.0
 */
proto._handleFieldWithDefaultExpression = function (field, default_expression) {
  var _this5 = this;

  if (default_expression) {
    var _default_expression$r = default_expression.referencing_fields,
        referencing_fields = _default_expression$r === undefined ? [] : _default_expression$r,
        _default_expression$r2 = default_expression.referenced_columns,
        referenced_columns = _default_expression$r2 === undefined ? [] : _default_expression$r2,
        _default_expression$a = default_expression.apply_on_update,
        apply_on_update = _default_expression$a === undefined ? false : _default_expression$a;

    // Skip if not apply_on_update (listen dependencies change only for new Feature)

    if (!apply_on_update && !this.state.isnew) {
      return;
    }

    var dependency_fields = new Set();

    // Get array of dependency fields on default expression if exist
    // add each of it in a Set (unique array items)
    [].concat(_toConsumableArray(referenced_columns), _toConsumableArray(referencing_fields)).forEach(function (dependency_field) {
      return dependency_fields.add(dependency_field);
    });

    // Only in apply update listen changeInput
    if (apply_on_update) {

      this.default_expression_fields_on_update.push(field);

      dependency_fields.forEach(function (dependency_field) {
        // TODO: shorten variable name
        if (undefined === _this5.default_expression_fields_dependencies[dependency_field]) {
          _this5.default_expression_fields_dependencies[dependency_field] = [];
        }
        _this5.default_expression_fields_dependencies[dependency_field].push(field.name);
      });
    }

    // Call input service if a field has a default_expression and is a new feature
    if (this.state.isnew) {
      FormService._getDefaultExpression({
        field: field,
        feature: this.feature,
        qgs_layer_id: this.layer.getId(),
        parentData: this.parentData
      });
    }
  }
};

/**
 * Handle fields with associated expression
 * 
 * @param {Array} [fields = []]
 */
proto.handleFieldsWithExpression = function () {
  var _this6 = this;

  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  // TODO: add description
  fields.forEach(function (field) {
    var _field$input$options = field.input.options,
        options = _field$input$options === undefined ? {} : _field$input$options;

    _this6._handleFieldWithFilterExpression(field, options.filter_expression);
    _this6._handleFieldWithDefaultExpression(field, options.default_expression);
  });
  // start to evaluate filter expression field
  Object.keys(this.filter_expression_fields_dependencies).forEach(function (name) {
    _this6.evaluateFilterExpressionFields({ name: name });
  });
};

proto.setCurrentFormPercentage = function (perc) {
  this.layer.setFormPercentage(perc);
};

proto.setLoading = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.loading = bool;
};

proto.setValidComponent = function (_ref) {
  var id = _ref.id,
      valid = _ref.valid;

  this.state.componentstovalidate[id] = valid;
  this.isValid();
};

proto.getValidComponent = function (id) {
  return this.state.componentstovalidate[id];
};

/**
 * Every input send to form its valid value that will change the general state of form
 */
proto.isValid = function (input) {
  var _this7 = this;

  if (input) {
    // check mutually
    if (input.validate.mutually && !input.validate.required && !input.validate.empty) {
      input.validate._valid = input.validate.valid;
      input.validate.mutually_valid = input.validate.mutually.reduce(function (previous, inputname) {
        return previous && _this7.state.tovalidate[inputname].validate.empty;
      }, true);
      input.validate.valid = input.validate.mutually_valid && input.validate.valid;
    }
    if (input.validate.mutually && !input.validate.required && input.validate.empty) {
      input.value = null;
      input.validate.mutually_valid = true;
      input.validate.valid = true;
      input.validate._valid = true;
      // count not empty input_name
      var filled = [];
      for (var i = input.validate.mutually.length; i--;) {
        var input_name = input.validate.mutually[i];
        if (!this.state.tovalidate[input_name].validate.empty) {
          filled.push(input_name);
        }
      }
      if (filled.length < 2) {
        filled.forEach(function (input_name) {
          _this7.state.tovalidate[input_name].validate.mutually_valid = true;
          _this7.state.tovalidate[input_name].validate.valid = true;
          setTimeout(function () {
            _this7.state.tovalidate[input_name].validate.valid = _this7.state.tovalidate[input_name].validate._valid;
            _this7.state.valid = _this7.state.valid && _this7.state.tovalidate[input_name].validate.valid;
          });
        });
      }
    }
    // check if min_field or max_field is set
    if (!input.validate.mutually && !input.validate.empty && (input.validate.min_field || input.validate.max_field)) {
      var _input_name = input.validate.min_field || input.validate.max_field;
      input.validate.valid = input.validate.min_field ? this.state.tovalidate[input.validate.min_field].validate.empty || 1 * input.value > 1 * this.state.tovalidate[input.validate.min_field].value : this.state.tovalidate[input.validate.max_field].validate.empty || 1 * input.value < 1 * this.state.tovalidate[input.validate.max_field].value;
      if (input.validate.valid) {
        this.state.tovalidate[_input_name].validate.valid = true;
      }
    }
  }
  this.state.valid = Object.values(this.state.tovalidate).reduce(function (previous, input) {
    return previous && input.validate.valid;
  }, true) && Object.values(this.state.componentstovalidate).reduce(function (previous, valid) {
    return previous && valid;
  }, true);
};

proto.addComponents = function () {
  var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var component = _step.value;

      this.addComponent(component);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

proto.addComponent = function (component) {
  var id = component.id,
      title = component.title,
      name = component.name,
      icon = component.icon,
      valid = component.valid,
      headerComponent = component.headerComponent,
      _component$header = component.header,
      header = _component$header === undefined ? true : _component$header;

  if (valid !== undefined) {
    this.state.componentstovalidate[id] = valid;
    this.state.valid = this.state.valid && valid;
    this.eventBus.$emit('add-component-validate', {
      id: id,
      valid: valid
    });
  }
  // Set a component that can be part of headers (tabs or not)
  if (header) {
    this.state.headers.push({ title: title, name: name, id: id, icon: icon, component: headerComponent });
    this.state.currentheaderid = this.state.currentheaderid || id;
  }

  this.state.components.push(component);
};

proto.replaceComponent = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref2.id,
      component = _ref2.component;

  var index = this.state.components.findIndex(function (component) {
    return component.id === id;
  });
  this.state.components.splice(index, 1, component);
};

proto.disableComponent = function (_ref3) {
  var id = _ref3.id,
      disabled = _ref3.disabled;

  if (disabled) this.state.disabledcomponents.push(id);else this.state.disabledcomponents = this.state.disabledcomponents.filter(function (disableId) {
    return disabledId !== id;
  });
};

proto.setCurrentComponentById = function (id) {
  if (this.state.disabledcomponents.indexOf(id) === -1) {
    this.setIdHeader(id);
    this.state.component = this.state.components.find(function (component) {
      return component.id === id;
    }).component;
    return this.state.component;
  }
};

/**
 * setRootComponent (is form)
 */
proto.setRootComponent = function () {
  this.state.component = this.state.components.find(function (component) {
    return component.root;
  }).component;
};

proto.getRootComponent = function () {
  return this.state.components.find(function (component) {
    return component.root;
  }).component;
};

proto.isRootComponent = function (component) {
  return this.getRootComponent() == component;
};

proto.getComponentById = function (id) {
  return this.state.components.find(function (component) {
    return component.id === id;
  });
};

proto.setComponent = function (component) {
  this.state.component = component;
};

proto.addedComponentTo = function () {
  var formcomponent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'body';

  this.state.addedcomponentto[formcomponent] = true;
};

proto.addToValidate = function (input) {
  this.state.tovalidate[input.name] = input;
  // check if is mounted on form gui otherwise leave form component to run is Valid whe form is mounted on dom
  if (this.state.ready) {
    this.isValid(input);
  }
};

proto.removeToValidate = function (input) {
  delete this.state.tovalidate[input.name];
  this.isValid();
};

proto.getState = function () {
  return this.state;
};

proto._setState = function (state) {
  this.state = state;
};

proto.getFields = function () {
  return this.state.fields;
};

proto._getField = function (fieldName) {
  return this.state.fields.find(function (field) {
    return field.name === fieldName;
  });
};

proto.getEventBus = function () {
  return this.eventBus;
};

proto.setIdHeader = function (id) {
  this.state.currentheaderid = id;
};

proto.getContext = function () {
  return this.context_inputs.context;
};

proto.getSession = function () {
  return this.getContext().session;
};

proto.getInputs = function () {
  return this.context_inputs.inputs;
};

/**
 * handleRelation
 */

proto.handleRelation = function (_ref4) {
  //OVERWRITE BY  PLUGIN EDITING PLUGIN

  var relationId = _ref4.relationId,
      feature = _ref4.feature;
};

/**
 * Clear all the open things opened by service
 */
proto.clearAll = function () {
  this.eventBus.$off('addtovalidate');
  this.eventBus.$off('set-main-component');
  this.eventBus.$off('set-loading-form');
  this.eventBus.$off('component-validation');
  this.eventBus.$off('disable-component');
};

/**
 * @returns {Promise<void>}
 * 
 * @since 3.8.0
 */
proto.saveDefaultExpressionFieldsNotDependencies = _asyncToGenerator(function* () {
  var _this8 = this;

  if (0 === this.default_expression_fields_on_update.length) {
    return;
  }

  // disable listen changeInput
  this.listenChangeInput = false;

  // Array contain field name already resolved with server default_expression request
  var requested_expressions = [];
  // array of defaultExpressionPromises request
  var pending_expressions = [];

  // loop through default_expression_fields

  var _loop = function* _loop(i) {

    // extract all dependency fields of current field
    var dFs = Object.keys(_this8.default_expression_fields_dependencies).filter(function (field) {
      return (
        // check if dependency field is field on update
        _this8.default_expression_fields_on_update.find(function (_ref6) {
          var name = _ref6.name;
          return name === field;
        }) &&
        // if has bind current field
        _this8.default_expression_fields_dependencies[field].find(function (fieldName) {
          return fieldName === _this8.default_expression_fields_on_update[i].name;
        })
      );
    });

    // id current field has a Array (at least one) dependency fields
    // need to evaluate its value and after evaluate field value expression

    var _loop2 = function* _loop2(_i) {
      // in case already done a default_expression request evaluation from server
      if ("undefined" !== typeof requested_expressions.find(function (name) {
        return name === dFs[_i];
      })) {
        return 'continue';
      }
      // get value. Need to wait response
      try {
        var value = yield FormService._getDefaultExpression({
          field: _this8._getField(dFs[_i]),
          feature: _this8.feature,
          qgs_layer_id: _this8.layer.getId(),
          parentData: _this8.parentData
        });
        // update field with evaluated value to feature
        _this8.feature.set(dFs[_i], value);
        // add to array
        requested_expressions.push(dFs[_i]);
      } catch (err) {
        console.warn(err);
      }
    };

    for (var _i = 0; _i < dFs.length; _i++) {
      var _ret2 = yield* _loop2(_i);

      if (_ret2 === 'continue') continue;
    }
  };

  for (var i = 0; i < this.default_expression_fields_on_update.length; i++) {
    yield* _loop(i);
  }

  this.default_expression_fields_on_update.forEach(function (field) {
    if ("undefined" === typeof requested_expressions.find(function (name) {
      return name === field.name;
    })) {
      pending_expressions.push(FormService._getDefaultExpression({
        field: field,
        feature: _this8.feature,
        qgs_layer_id: _this8.layer.getId(),
        parentData: _this8.parentData
      }));
    }
  });

  try {
    yield Promise.allSettled(pending_expressions);
  } catch (err) {
    console.warn(err);
  }

  // enable listen changeInput
  this.listenChangeInput = true;
});

/**
 * ORIGINAL SOURCE: src/app/core/expression/inputservice.js@3.8.6
 * 
 * @param expr.field        related field
 * @param expr.feature      feature to transform in form_data
 * @param expr.qgs_layer_id layer id owner of the feature data 
 * @param expr.parentData
 * 
 * @returns { void | Promise<unknown> }
 * 
 * @since 3.9.0
 */
FormService._getFilterExpression = _asyncToGenerator(function* () {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref8.field,
      feature = _ref8.feature,
      qgs_layer_id = _ref8.qgs_layer_id,
      parentData = _ref8.parentData;

  var _field$input$options2 = field.input.options,
      key = _field$input$options2.key,
      value = _field$input$options2.value,
      _field$input$options3 = _field$input$options2.layer_id,
      layer_id = _field$input$options3 === undefined ? qgs_layer_id : _field$input$options3,
      filter_expression = _field$input$options2.filter_expression,
      loading = _field$input$options2.loading;

  /**
   * @FIXME should return Promise.reject('some error message') ?
   */

  if (!filter_expression) {
    return;
  }

  loading.state = 'loading';

  try {

    var features = yield _data2.default.getData('expression:expression', {
      inputs: {
        field_name: field.name,
        layer_id: layer_id,
        qgs_layer_id: qgs_layer_id,
        form_data: (0, _convertFeatureToGEOJSON.convertFeatureToGEOJSON)(feature),
        parent: parentData && {
          form_data: (0, _convertFeatureToGEOJSON.convertFeatureToGEOJSON)(parentData.feature),
          qgs_layer_id: parentData.qgs_layer_id,
          formatter: 0
        },
        formatter: 0,
        expression: filter_expression.expression
      },
      outputs: false
    });

    if ('select_autocomplete' === field.input.type) {
      field.input.options.values = [];
      // temporary array to sort the keys
      var values = [];
      for (var i = 0; i < features.length; i++) {
        values.push({
          key: features[i].properties[key],
          value: features[i].properties[value]
        });
      }
      values.sort(function (_ref9, _ref10) {
        var aKey = _ref9.key;
        var bKey = _ref10.key;

        if ('string' === typeof aKey) {
          aKey = aKey.toLowerCase();
          bKey = bKey.toLowerCase();
        }
        if (aKey < bKey) return -1;
        if (aKey > bKey) return 1;
        return 0;
      });
      field.input.options.values = values;
    }

    return features;
  } catch (err) {
    return Promise.reject(err);
  } finally {
    loading.state = 'ready';
  }
});

/**
 * ORIGINAL SOURCE: src/app/core/expression/inputservice.js@3.8.6
 * 
 * @param expr.field        related field
 * @param expr.feature      feature to transform in form_data
 * @param expr.qgs_layer_id layer id owner of the feature data 
 * @param expr.parentData
 *  
 * @returns { void | Promise<unknown> } 
 * 
 * @since 3.9.0
 */
FormService._getDefaultExpression = _asyncToGenerator(function* () {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref12.field,
      feature = _ref12.feature,
      qgs_layer_id = _ref12.qgs_layer_id,
      parentData = _ref12.parentData;

  var _field$input$options4 = field.input.options,
      _field$input$options5 = _field$input$options4.layer_id,
      layer_id = _field$input$options5 === undefined ? qgs_layer_id : _field$input$options5,
      default_expression = _field$input$options4.default_expression,
      loading = _field$input$options4.loading,
      default_value = _field$input$options4.default;

  /**
   * @FIXME should return Promise.reject('some error message') ?
   */

  if (!default_expression) {
    return;
  }

  loading.state = 'loading';

  // Call `expression:expression_eval` to get value from expression and set it to field
  try {

    var value = yield _data2.default.getData('expression:expression_eval', {
      inputs: {
        field_name: field.name,
        layer_id: layer_id, //
        qgs_layer_id: qgs_layer_id, //layer id owner of the data
        form_data: (0, _convertFeatureToGEOJSON.convertFeatureToGEOJSON)(feature),
        formatter: 0,
        expression: default_expression.expression,
        parent: parentData && {
          form_data: (0, _convertFeatureToGEOJSON.convertFeatureToGEOJSON)(parentData.feature),
          qgs_layer_id: parentData.qgs_layer_id,
          formatter: 0
        }
      },
      outputs: false
    });

    field.value = value;

    return value;
  } catch (err) {
    if ("undefined" !== typeof default_value) {
      field.value = default_value;
    }
    return Promise.reject(err);
  } finally {
    loading.state = 'ready';
  }
});

module.exports = FormService;

},{"core/g3wobject":8,"services/data":317,"utils":419,"utils/convertFeatureToGEOJSON":350}],82:[function(require,module,exports){
var _Form = require('components/Form.vue');

var vueComponentOptions = _interopRequireWildcard(_Form);

var _FormBody = require('components/FormBody.vue');

var _FormBody2 = _interopRequireDefault(_FormBody);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Component = require('gui/component/component');
var Service = require('gui/form/formservice');

function FormComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$id = options.id,
      id = _options$id === undefined ? 'form' : _options$id,
      name = options.name,
      title = options.title,
      headerComponent = options.headerComponent;

  base(this, options);
  options.service = options.service ? new options.service() : new Service();
  options.vueComponentObject = options.vueComponentObject || vueComponentOptions;
  //set element of the form
  var components = options.components || [{
    id: id,
    title: title,
    name: name,
    root: true,
    component: _FormBody2.default,
    headerComponent: headerComponent
  }];
  options.perc = options.layer.getFormPercentage() !== null ? options.layer.getFormPercentage() : options.perc;
  // initialize component
  this.init(options);
  this.getService().addComponents(components);
  this.getService().setComponent(components[0].component);
  /**
   * Used to add component to form body
   * @param component
   */
  this.addBodyFormComponent = function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        component = _ref.component,
        _ref$where = _ref.where,
        where = _ref$where === undefined ? 'after' : _ref$where;

    this.getInternalComponent().body.components[where].push(component);
  };

  this.addBodyFormComponents = function () {
    var _this = this;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$components = _ref2.components,
        components = _ref2$components === undefined ? [] : _ref2$components,
        _ref2$where = _ref2.where,
        where = _ref2$where === undefined ? "after" : _ref2$where;

    components.forEach(function (component) {
      return _this.addBodyFormComponent({
        component: component,
        where: where
      });
    });
  };

  this.addFormComponents = function () {
    var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    this.getService().addComponents(components);
  };

  this.addFormComponent = function (component) {
    component && this.getService().addComponent(component);
  };
  // some utilities methods
  this.addDependecyComponents = function (components) {
    this.getService().addDependecyComponents(components);
  };
  this.addComponentBeforeBody = function (Component) {
    //this.getService().addedComponentTo('body');
    //this.insertComponentAt(1, Component);
  };

  this.addComponentAfterBody = function (Component) {
    //this.getService().addedComponentTo('body');
    //this.insertComponentAt(2, Component)
  };

  this.addComponentBeforeFooter = function () {
    //TODO
  };

  this.addComponentAfterFooter = function (Component) {
    //TODO
  };
  // overwrite father mount method.
  this.mount = function (parent, append) {
    return base(this, 'mount', parent, append).then(function () {
      // set modal window to true
      _gui2.default.setModal(true);
    });
  };

  this.layout = function () {
    this.internalComponent.reloadLayout();
  };
}

inherit(FormComponent, Component);

module.exports = FormComponent;

},{"components/Form.vue":168,"components/FormBody.vue":169,"gui/component/component":77,"gui/form/formservice":81,"services/gui":319,"utils":419}],83:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Service = require('gui/inputs/service');

function CheckBoxService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var value = options.state.input.options.values.find(function (value) {
    return value.checked === false;
  });
  options.validatorOptions = {
    values: options.state.input.options.values.map(function (value) {
      return value;
    })
  };
  if (options.state.value === null && !options.state.forceNull) options.state.value = value.value;
  base(this, options);
}

inherit(CheckBoxService, Service);

var proto = CheckBoxService.prototype;

proto.convertCheckedToValue = function (checked) {
  checked = checked === null || checked === undefined ? false : checked;
  var option = this.state.input.options.values.find(function (value) {
    return value.checked === checked;
  });
  this.state.value = option.value;
  return this.state.value;
};

proto.convertValueToChecked = function () {
  var valueToCheck = this.state.value;
  if (valueToCheck === null || valueToCheck === undefined) return false;
  var option = this.state.input.options.values.find(function (value) {
    return value.value == valueToCheck;
  });
  if (option === undefined) {
    option = this.state.input.options.values.find(function (value) {
      return value.checked === false;
    });
    this.state.value = option.value;
  }
  return option.checked;
};

module.exports = CheckBoxService;

},{"gui/inputs/service":106,"utils":419}],84:[function(require,module,exports){
var _InputCheckbox = require('components/InputCheckbox.vue');

var vueComponentOptions = _interopRequireWildcard(_InputCheckbox);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var CheckBoxInput = Vue.extend(vueComponentOptions);

module.exports = CheckBoxInput;

},{"components/InputCheckbox.vue":189}],85:[function(require,module,exports){
var _InputColor = require('components/InputColor.vue');

var vueComponentOptions = _interopRequireWildcard(_InputColor);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var TextInput = Vue.extend(vueComponentOptions);

module.exports = TextInput;

},{"components/InputColor.vue":190}],86:[function(require,module,exports){
var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base,
    convertQGISDateTimeFormatToMoment = _require.convertQGISDateTimeFormatToMoment;

var Service = require('gui/inputs/service');

function DateTimePickerService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.validatorOptions = {};
  base(this, options);
}

inherit(DateTimePickerService, Service);

var proto = DateTimePickerService.prototype;

proto.getLocale = function () {
  var applicationConfig = _application2.default.getConfig();
  return applicationConfig.user.i18n ? applicationConfig.user.i18n : 'en';
};

proto.convertQGISDateTimeFormatToMoment = function (datetimeformat) {
  return convertQGISDateTimeFormatToMoment(datetimeformat);
};

proto.setValidatorOptions = function (options) {
  this.validatorOptions = options;
};

module.exports = DateTimePickerService;

},{"gui/inputs/service":106,"services/application":310,"utils":419}],87:[function(require,module,exports){
var _InputDateTimePicker = require('components/InputDateTimePicker.vue');

var vueComponentOptions = _interopRequireWildcard(_InputDateTimePicker);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var DateTimePickerInput = Vue.extend(vueComponentOptions);

module.exports = DateTimePickerInput;

},{"components/InputDateTimePicker.vue":191}],88:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');

function FloatService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(FloatService, Service);

module.exports = FloatService;

},{"gui/inputs/service":106,"utils":419}],89:[function(require,module,exports){
var _InputFloat = require('components/InputFloat.vue');

var vueComponentOptions = _interopRequireWildcard(_InputFloat);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var FloatInput = Vue.extend(vueComponentOptions);

module.exports = FloatInput;

},{"components/InputFloat.vue":192}],90:[function(require,module,exports){
var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _InputBase = require('components/InputBase.vue');

var _InputBase2 = _interopRequireDefault(_InputBase);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InputServices = require('./services');

var Input = {
  props: ['state'],
  mixins: [_mixins.baseInputMixin],
  components: {
    'baseinput': _InputBase2.default
  },
  watch: {
    'notvalid': function notvalid(_notvalid) {
      _notvalid && this.service.setErrorMessage(this.state);
    },
    'state.value': function stateValue() {
      var _this = this;

      if ("undefined" !== typeof this.state.input.options.default_expression) {
        // need to postpone state.value watch parent that use mixin
        setTimeout(function () {
          return _this.change();
        });
      }
    }
  },
  created: function created() {
    var _this2 = this;

    this.service = new InputServices[this.state.input.type]({
      state: this.state
    });
    this.$watch(function () {
      return _applicationState2.default.language;
    }, function () {
      return _this2.service.setErrorMessage(_this2.state);
    });
    this.state.editable && this.state.validate.required && this.service.validate();
    this.$emit('addinput', this.state);
    /**
     * in case of input value is fill with default value option we need to emit changeinput event
     * without check validation. Example:
     * {
        "name": "id",
        "type": "integer",
        "label": "id",
        "editable": false,
        "validate": {
            "required": true,
            "unique": true
        },
        "pk": true,
        "default": "nextval('g3wsuite.zone_id_seq'::regclass)",
        "input": {
            "type": "text",
            "options": {}
        }
      }
     in this case if we start a validation, it fail because default value is a string while input is interger
     */
    this.state.value_from_default_value && this.$emit('changeinput', this.state);
  },
  destroyed: function destroyed() {
    // emit remove input to form (in case for example tab visibility condition)
    this.$emit('removeinput', this.state);
  }
};

module.exports = Input;

},{"./services":107,"components/InputBase.vue":188,"mixins":302,"store/application-state":328}],91:[function(require,module,exports){
var InputsComponents = {
  'text_input': require('./text/vue/text'),
  'texthtml_input': require('./texthtml/vue/texthtml'),
  'textarea_input': require('./textarea/vue/textarea'),
  'integer_input': require('./integer/vue/integer'),
  'string_input': require('./text/vue/text'), //temporary
  'float_input': require('./float/vue/float'),
  'radio_input': require('./radio/vue/radio'),
  'check_input': require('./checkbox/vue/checkbox'),
  'range_input': require('./range/vue/range'),
  'datetimepicker_input': require('./datetimepicker/vue/datetimepicker'),
  'unique_input': require('./unique/vue/unique'),
  'select_input': require('./select/vue/select'),
  'media_input': require('./media/vue/media'),
  'select_autocomplete_input': require('./select/vue/select'),
  'picklayer_input': require('./picklayer/vue/picklayer'),
  'color_input': require('./color/vue/color'),
  'slider_input': require('./sliderrange/vue/sliderrange'),
  'lonlat_input': require('./lonlat/vue/lonlat')
};

module.exports = InputsComponents;

},{"./checkbox/vue/checkbox":84,"./color/vue/color":85,"./datetimepicker/vue/datetimepicker":87,"./float/vue/float":89,"./integer/vue/integer":93,"./lonlat/vue/lonlat":95,"./media/vue/media":97,"./picklayer/vue/picklayer":99,"./radio/vue/radio":101,"./range/vue/range":103,"./select/vue/select":105,"./sliderrange/vue/sliderrange":109,"./text/vue/text":110,"./textarea/vue/textarea":111,"./texthtml/vue/texthtml":112,"./unique/vue/unique":114}],92:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');

function IntegerService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(IntegerService, Service);

module.exports = IntegerService;

},{"gui/inputs/service":106,"utils":419}],93:[function(require,module,exports){
var _InputInteger = require('components/InputInteger.vue');

var vueComponentOptions = _interopRequireWildcard(_InputInteger);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var IntegerInput = Vue.extend(vueComponentOptions);

module.exports = IntegerInput;

},{"components/InputInteger.vue":195}],94:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');

function LonLatService() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.coordinatebutton;
  this.mapService = _gui2.default.getComponent('map').getService();
  this.mapEpsg = this.mapService.getCrs();
  this.mapControlToggleEventHandler = function (evt) {
    if (evt.target.isToggled() && evt.target.isClickMap()) {
      _this.coordinatebutton.active && _this.toggleGetCoordinate();
    }
  };
  this.map = _gui2.default.getComponent('map').getService().getMap();
  this.outputEpsg = this.state.epsg || this.mapEpsg;
  this.eventMapKey;
}

inherit(LonLatService, Service);

var proto = LonLatService.prototype;

proto.setCoordinateButtonReactiveObject = function (coordinatebutton) {
  this.coordinatebutton = coordinatebutton;
};

proto.validate = function () {
  if (this.state.values.lon < -180) this.state.values.lon = -180;else if (this.state.values.lon > 180) this.state.values.lon = 180;
  if (this.state.values.lat < -90) this.state.values.lon = -90;else if (this.state.values.lat > 90) this.state.values.lon = 90;
  this.state.validate.valid = !Number.isNaN(1 * this.state.values.lon);
};

proto.toggleGetCoordinate = function () {
  this.coordinatebutton.active = !this.coordinatebutton.active;
  this.coordinatebutton.active ? this.startToGetCoordinates() : this.stopToGetCoordinates();
};

proto.startToGetCoordinates = function () {
  var _this2 = this;

  this.mapService.deactiveMapControls();
  this.mapService.on('mapcontrol:toggled', this.mapControlToggleEventHandler);
  this.eventMapKey = this.map.on('click', function (evt) {
    evt.originalEvent.stopPropagation();
    evt.preventDefault();
    var coordinate = _this2.mapEpsg !== _this2.outputEpsg ? ol.proj.transform(evt.coordinate, _this2.mapEpsg, _this2.outputEpsg) : evt.coordinate;
    _this2.state.value = [coordinate];

    var _coordinate = _slicedToArray(coordinate, 2),
        lon = _coordinate[0],
        lat = _coordinate[1];

    _this2.state.values.lon = lon;
    _this2.state.values.lat = lat;
  });
};

proto.stopToGetCoordinates = function () {
  ol.Observable.unByKey(this.eventMapKey);
  this.mapService.off('mapcontrol:toggled', this.mapControlToggleEventHandler);
};

proto.clear = function () {
  this.stopToGetCoordinates();
};

module.exports = LonLatService;

},{"gui/inputs/service":106,"services/gui":319,"utils":419}],95:[function(require,module,exports){
var _InputLonLat = require('components/InputLonLat.vue');

var vueComponentOptions = _interopRequireWildcard(_InputLonLat);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var LatLontInput = Vue.extend(vueComponentOptions);

module.exports = LatLontInput;

},{"components/InputLonLat.vue":196}],96:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Service = require('gui/inputs/service');

function MediaService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(MediaService, Service);

module.exports = MediaService;

},{"gui/inputs/service":106,"utils":419}],97:[function(require,module,exports){
var _InputMedia = require('components/InputMedia.vue');

var vueComponentOptions = _interopRequireWildcard(_InputMedia);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var MediaInput = Vue.extend(vueComponentOptions);

module.exports = MediaInput;

},{"components/InputMedia.vue":197}],98:[function(require,module,exports){
var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _getQueryLayersPromisesByCoordinates = require('utils/getQueryLayersPromisesByCoordinates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PickFeatureInteraction = require('g3w-ol/interactions/pickfeatureinteraction');
var PickCoordinatesInteraction = require('g3w-ol/interactions/pickcoordinatesinteraction');

function PickLayerService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.pick_type = options.pick_type || 'wms';
  this.ispicked = false;
  this.fields = options.fields || [options.value];
  this.layerId = options.layer_id;
  this.mapService = _gui2.default.getService('map');
  this.interaction = this.pick_type === 'map' ? new PickFeatureInteraction({
    layers: [this.mapService.getLayerById(this.layerId)]
  }) : new PickCoordinatesInteraction();
}

var proto = PickLayerService.prototype;

proto.isPicked = function () {
  return this.ispicked;
};

//bind interrupt event
proto.escKeyUpHandler = function (_ref) {
  var keyCode = _ref.keyCode,
      owner = _ref.data.owner;

  keyCode === 27 && owner.unpick();
};

proto.unbindEscKeyUp = function () {
  $(document).unbind('keyup', this.escKeyUpHandler);
};

proto.bindEscKeyUp = function () {
  $(document).on('keyup', { owner: this }, this.escKeyUpHandler);
};

proto.pick = function () {
  var _this = this;

  return new Promise(function (resolve, reject) {
    _this.bindEscKeyUp();
    var values = {};
    _this.ispicked = true;
    var afterPick = function afterPick(feature) {
      if (feature) {
        var attributes = feature.getProperties();
        _this.fields.forEach(function (field) {
          values[field] = attributes[field];
        });
        resolve(values);
      } else reject();
      _this.ispicked = false;
      _this.unpick();
    };
    _gui2.default.setModal(false);
    _this.mapService.addInteraction(_this.interaction);
    _this.interaction.once('picked', function (event) {
      if (_this.pick_type === 'map') {
        var feature = event.feature;
        afterPick(feature);
      } else if (_this.pick_type === 'wms') {
        var layer = _mapLayers2.default.getLayerById(_this.layerId);
        if (layer) {
          (0, _getQueryLayersPromisesByCoordinates.getQueryLayersPromisesByCoordinates)([layer], {
            map: _this.mapService.getMap(),
            feature_count: 1,
            coordinates: event.coordinate
          }).then(function (response) {
            var _response$0$data = response[0].data,
                data = _response$0$data === undefined ? [] : _response$0$data;

            var feature = data.length && data[0].features[0] || null;
            afterPick(feature);
          });
        }
      }
    });
  });
};

proto.unpick = function () {
  this.mapService.removeInteraction(this.interaction);
  _gui2.default.setModal(true);
  this.unbindEscKeyUp();
  this.ispicked = false;
};

proto.clear = function () {
  this.isPicked() && this.unpick();
  this.mapService = this.interaction = this.field = null;
};

module.exports = PickLayerService;

},{"g3w-ol/interactions/pickcoordinatesinteraction":68,"g3w-ol/interactions/pickfeatureinteraction":69,"services/gui":319,"store/map-layers":333,"utils/getQueryLayersPromisesByCoordinates":406}],99:[function(require,module,exports){
var _InputPickLayer = require('components/InputPickLayer.vue');

var vueComponentOptions = _interopRequireWildcard(_InputPickLayer);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var PickLayerInput = Vue.extend(vueComponentOptions);

module.exports = PickLayerInput;

},{"components/InputPickLayer.vue":198}],100:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Service = require('gui/inputs/service');

function RadioService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(RadioService, Service);

module.exports = RadioService;

},{"gui/inputs/service":106,"utils":419}],101:[function(require,module,exports){
var _InputRadio = require('components/InputRadio.vue');

var vueComponentOptions = _interopRequireWildcard(_InputRadio);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var RadioInput = Vue.extend(vueComponentOptions);

module.exports = RadioInput;

},{"components/InputRadio.vue":199}],102:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Service = require('gui/inputs/service');
var Validators = require('utils/validators');

function RangeService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$state$input$ = options.state.input.options.values[0],
      min = _options$state$input$.min,
      max = _options$state$input$.max;

  options.state.info = '[MIN: ' + min + ' - MAX: ' + max + ']';
  base(this, options);
  var validator = Validators.get('range', {
    min: 1 * min,
    max: 1 * max
  });
  this.setValidator(validator);
}

inherit(RangeService, Service);

var proto = Service.prototype;

proto.isValueInRange = function (value, min, max) {
  return value <= max && value >= min;
};

module.exports = RangeService;

},{"gui/inputs/service":106,"utils":419,"utils/validators":464}],103:[function(require,module,exports){
var _InputRange = require('components/InputRange.vue');

var vueComponentOptions = _interopRequireWildcard(_InputRange);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var RangeInput = Vue.extend(vueComponentOptions);

module.exports = RangeInput;

},{"components/InputRange.vue":200}],104:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Service = require('gui/inputs/service');

function SelectService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.layer = null;
}

inherit(SelectService, Service);

var proto = SelectService.prototype;

proto._getLayerById = function (layer_id) {
  return _catalogLayers2.default.getLayerById(layer_id);
};

proto.addValue = function (value) {
  this.state.input.options.values.push(value);
};

proto.getKeyByValue = function () {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      search = _ref.search;

  var options = this.state.input.options;
  var value = options.value,
      key = options.key;

  this.getData({
    key: value,
    value: key,
    search: search
  }).then(function (arrayValues) {
    var _arrayValues = _slicedToArray(arrayValues, 1),
        _value = _arrayValues[0];

    var key = _value.$value,
        value = _value.text;

    _this.addValue({
      key: key,
      value: value
    });
  }).catch(function (err) {
    return console.log(err);
  });
};

proto.getData = function () {
  var _this2 = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$layer_id = _ref2.layer_id,
      layer_id = _ref2$layer_id === undefined ? this.state.input.options.layer_id : _ref2$layer_id,
      _ref2$key = _ref2.key,
      key = _ref2$key === undefined ? this.state.input.options.key : _ref2$key,
      _ref2$value = _ref2.value,
      value = _ref2$value === undefined ? this.state.input.options.value : _ref2$value,
      search = _ref2.search;

  var search_value = (key + '|' + search).trim();
  return new Promise(function (resolve, reject) {
    if (!_this2._layer) _this2._layer = _this2._getLayerById(layer_id);
    _this2._layer.getDataTable({
      suggest: search_value,
      ordering: key
    }).then(function (response) {
      var values = [];
      var features = response.features;
      for (var i = 0; i < features.length; i++) {
        values.push({
          text: features[i].properties[key],
          id: i,
          $value: features[i].properties[value]
        });
      }
      resolve(values);
    }).fail(function (err) {
      return reject(err);
    });
  });
};

module.exports = SelectService;

},{"gui/inputs/service":106,"store/catalog-layers":329,"utils":419}],105:[function(require,module,exports){
var _InputSelect = require('components/InputSelect.vue');

var vueComponentOptions = _interopRequireWildcard(_InputSelect);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var SelectInput = Vue.extend(vueComponentOptions);

module.exports = SelectInput;

},{"components/InputSelect.vue":201}],106:[function(require,module,exports){
var Validators = require('utils/validators');

var _require = require('utils'),
    toRawType = _require.toRawType;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

function Service() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // set state of input
  this.state = options.state || {};
  // type of input
  //this.state.validate.required && this.setValue(this.state.value);
  /*
  * set starting value of input based on value or default value on options
   */
  this.setValue(this.state.value);
  this.setEmpty(this.state.value);
  var type = this.state.type;
  var validatorOptions = options.validatorOptions || this.state.input.options || {};
  // useful for the validator to validate input
  this._validator = Validators.get(type, validatorOptions);
  this.setErrorMessage(options.state);
}

var proto = Service.prototype;

proto.getState = function () {
  return this.state;
};

proto.getValue = function () {
  return this.state.value;
};

/**
 * @param value
 *
 * @returns {void}
 */
proto.setValue = function (value) {
  if (null !== value && "undefined" !== typeof value) {
    return;
  }

  var options = this.state.input.options;

  var default_value = options.default;

  /** @TODO (maybe need to removed in v3.9.0) double check G3W-ADMIN server configuration. */
  if (Array.isArray(options)) {
    if (options[0].default) {
      default_value = options[0].default;
    } else if (Array.isArray(options.values) && options.values.length > 0) {
      default_value = options.values[0] && (options.values[0].value || options.values[0]);
    }
  }

  // check if default value is set
  var get_default_value = this.state.get_default_value && // ref: core/layers/tablelayer.js::getFieldsWithValues()
  undefined !== default_value && null !== default_value;

  // check if we can state.check get_default_value from input.options.default is set
  if (get_default_value && undefined === options.default_expression) {
    this.state.value = default_value;
  }

  this.state.value_from_default_value = get_default_value;
};

proto.addValueToValues = function (value) {
  this.state.input.options.values.unshift(value);
};

proto._getValidatorType = function () {
  return this.state.type;
};

proto.setState = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state = _.isObject(state) ? state : {};
};

// return validator
proto.getValidator = function () {
  return this._validator;
};

proto.setValidator = function (validator) {
  this._validator = validator;
};

proto.setEmpty = function () {
  this.state.validate.empty = !(Array.isArray(this.state.value) && this.state.value.length || !_.isEmpty(_.trim(this.state.value)));
};

// general method to check the value of the state is valid or not
proto.validate = function () {
  if (this.state.validate.empty) {
    this.state.validate.empty = true;
    this.state.value = null;
    this.state.validate.unique = true;
    // check if require or check validation
    this.state.validate.valid = this.state.validate.required ? false : this._validator.validate(this.state.value);
  } else {
    if (this.state.input.type === 'integer' || this.state.input.type === 'float') {
      if (+this.state.value < 0) {
        this.state.value = null;
        this.state.validate.empty = true;
        this.state.validate.valid = !this.state.validate.required;
      } else this.state.validate.valid = this._validator.validate(this.state.value);
    }
    if (this.state.validate.exclude_values && this.state.validate.exclude_values.size) {
      this.state.validate.valid = !this.state.validate.exclude_values.has(this.state.value);
    } else this.state.validate.valid = this._validator.validate(this.state.value);
  }
  return this.state.validate.valid;
};

proto.setErrorMessage = function (input) {
  var message = void 0;
  if (input.validate.mutually && !input.validate.mutually_valid) this.state.validate.message = t("sdk.form.inputs.input_validation_mutually_exclusive") + ' ( ' + input.validate.mutually.join(',') + ' )';else if (input.validate.max_field) this.state.validate.message = t("sdk.form.inputs.input_validation_max_field") + ' (' + input.validate.max_field + ')';else if (input.validate.min_field) this.state.validate.message = t("sdk.form.inputs.input_validation_min_field") + ' (' + input.validate.min_field + ')';else if (input.validate.unique && input.validate.exclude_values && input.validate.exclude_values.size) this.state.validate.message = '' + t("sdk.form.inputs.input_validation_exclude_values");else if (input.validate.required) {
    message = t("sdk.form.inputs.input_validation_error") + ' ( ' + t("sdk.form.inputs." + input.type) + ' )';
    if (this.state.info) {
      message = message + '\n                 <div>\n                  <b>' + this.state.info + '</b>\n                 </div>         \n      ';
    }
    this.state.validate.message = this.state.info || message;
  } else this.state.validate.message = this.state.info;
};
/**
 * Method to set update
 */
proto.setUpdate = function () {
  var _state = this.state,
      value = _state.value,
      _value = _state._value;

  if (this.state.input.type === 'media' && toRawType(value) !== 'Object' && toRawType(_value) !== 'Object') {
    this.state.update = value.value != _value.value;
  } else if (this.state.input.type === "datetimepicker") {
    //check
    this.state.update = (null !== value ? value.toUpperCase() : value) != (_value ? _value.toUpperCase() : _value);
  } else {
    this.state.update = value != _value;
  }
};

module.exports = Service;

},{"core/i18n/i18n.service":9,"utils":419,"utils/validators":464}],107:[function(require,module,exports){
var InputsServices = {
  'text': require('./service'),
  'textarea': require('./service'),
  'texthtml': require('./service'),
  'integer': require('./integer/service'),
  'string': require('./service'),
  'float': require('./float/service'),
  'radio': require('./radio/service'),
  'check': require('./checkbox/service'),
  'range': require('./range/service'),
  'datetimepicker': require('./datetimepicker/service'),
  'unique': require('./unique/service'),
  'select': require('./select/service'),
  'media': require('./media/service'),
  'select_autocomplete': require('./select/service'),
  'picklayer': require('./service'),
  'color': require('./service'),
  'slider': require('./sliderrange/service'),
  'lonlat': require('./lonlat/service')
};

module.exports = InputsServices;

},{"./checkbox/service":83,"./datetimepicker/service":86,"./float/service":88,"./integer/service":92,"./lonlat/service":94,"./media/service":96,"./radio/service":100,"./range/service":102,"./select/service":104,"./service":106,"./sliderrange/service":108,"./unique/service":113}],108:[function(require,module,exports){
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Service = require('gui/inputs/service');
var Validators = require('utils/validators');

function SliderRangeService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var state = options.state;

  options.state.info = '[MIN: ' + state.input.options.min + ' - MAX: ' + state.input.options.max + ']';
  base(this, options);
  var validator = Validators.get('range', {
    min: 1 * state.input.options.min,
    max: 1 * state.input.options.max
  });
  this.setValidator(validator);
  this.validate = function () {
    this.state.value = 1 * this.state.value;
    this.state.validate.valid = this.state.value >= this.state.input.options.min || this.state.value <= this.state.input.options.max;
  };
}

inherit(SliderRangeService, Service);

var proto = SliderRangeService.prototype;

proto.changeInfoMessage = function () {
  this.state.info = '[MIN: ' + this.state.input.options.min + ' - MAX: ' + this.state.input.options.max + ']';
};

module.exports = SliderRangeService;

},{"gui/inputs/service":106,"utils":419,"utils/validators":464}],109:[function(require,module,exports){
var _InputSliderRange = require('components/InputSliderRange.vue');

var vueComponentOptions = _interopRequireWildcard(_InputSliderRange);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var RangeInput = Vue.extend(vueComponentOptions);

module.exports = RangeInput;

},{"components/InputSliderRange.vue":202}],110:[function(require,module,exports){
var _InputText = require('components/InputText.vue');

var vueComponentOptions = _interopRequireWildcard(_InputText);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var TextInput = Vue.extend(vueComponentOptions);

module.exports = TextInput;

},{"components/InputText.vue":203}],111:[function(require,module,exports){
var _InputTextArea = require('components/InputTextArea.vue');

var vueComponentOptions = _interopRequireWildcard(_InputTextArea);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var TextAreaInput = Vue.extend(vueComponentOptions);

module.exports = TextAreaInput;

},{"components/InputTextArea.vue":204}],112:[function(require,module,exports){
var _InputTextHtml = require('components/InputTextHtml.vue');

var vueComponentOptions = _interopRequireWildcard(_InputTextHtml);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var TextHtmlInput = Vue.extend(vueComponentOptions);

module.exports = TextHtmlInput;

},{"components/InputTextHtml.vue":205}],113:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Service = require('gui/inputs/service');

function UniqueService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(UniqueService, Service);

module.exports = UniqueService;

},{"gui/inputs/service":106,"utils":419}],114:[function(require,module,exports){
var _InputUnique = require('components/InputUnique.vue');

var vueComponentOptions = _interopRequireWildcard(_InputUnique);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var UniqueInput = Vue.extend(vueComponentOptions);

module.exports = UniqueInput;

},{"components/InputUnique.vue":206}],115:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constant = require('app/constant');

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _mapControls = require('store/map-controls');

var _mapControls2 = _interopRequireDefault(_mapControls);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _MapControlZoomHistory = require('components/MapControlZoomHistory.vue');

var _MapControlZoomHistory2 = _interopRequireDefault(_MapControlZoomHistory);

var _MapControlGeocoding = require('components/MapControlGeocoding.vue');

var _MapControlGeocoding2 = _interopRequireDefault(_MapControlGeocoding);

var _createVectorLayerFromFile = require('utils/createVectorLayerFromFile');

var _createWMSLayer2 = require('utils/createWMSLayer');

var _createSelectedStyle = require('utils/createSelectedStyle');

var _getMapLayersByFilter = require('utils/getMapLayersByFilter');

var _getGeoTIFFfromServer = require('utils/getGeoTIFFfromServer');

var _getScaleFromResolution = require('utils/getScaleFromResolution');

var _getResolutionFromScale = require('utils/getResolutionFromScale');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base,
    copyUrl = _require.copyUrl,
    uniqueId = _require.uniqueId,
    throttle = _require.throttle,
    createFilterFromString = _require.createFilterFromString;

var G3WObject = require('core/g3wobject');
var BaseLayers = require('g3w-ol/layers/bases');
var VectorLayer = require('core/layers/vectorlayer');

var Control = require('g3w-ol/controls/control');
var ResetControl = require('g3w-ol/controls/resetcontrol');
var QueryControl = require('g3w-ol/controls/querycontrol');
var ZoomBoxControl = require('g3w-ol/controls/zoomboxcontrol');
var QueryBBoxControl = require('g3w-ol/controls/querybboxcontrol');
var QueryByPolygonControl = require('g3w-ol/controls/querybypolygoncontrol');
var GeolocationControl = require('g3w-ol/controls/geolocationcontrol');
var StreetViewControl = require('g3w-ol/controls/streetviewcontrol');
var AddLayersControl = require('g3w-ol/controls/addlayers');
var LengthControl = require('g3w-ol/controls/lengthcontrol');
var AreaControl = require('g3w-ol/controls/areacontrol');
var MousePositionControl = require('g3w-ol/controls/mousepositioncontrol');
var ScaleControl = require('g3w-ol/controls/scalecontrol');
var OnClikControl = require('g3w-ol/controls/onclickcontrol');
var ScreenshotControl = require('g3w-ol/controls/screenshotcontrol');
var geoScreenshotControl = require('g3w-ol/controls/geoscreenshotcontrol');
var QueryByDrawPolygonControl = require('g3w-ol/controls/querybydrawpolygoncontrol');
var InteractionControl = require('g3w-ol/controls/interactioncontrol');

var CONTROLS = {
  'zoomtoextent': OLControl('zoomtoextent'),
  'zoom': OLControl('zoom'),
  'scaleline': OLControl('scaleline'),
  'overview': OLControl('overview'),
  /** @since 3.8.0 */
  'zoomhistory': VueControl('zoomhistory'),
  'geocoding': VueControl('nominatim'),
  'reset': ResetControl,
  'zoombox': ZoomBoxControl,
  'query': QueryControl,
  'querybbox': QueryBBoxControl,
  'querybypolygon': QueryByPolygonControl,
  'geolocation': GeolocationControl,
  'streetview': StreetViewControl,
  'addlayers': AddLayersControl,
  'length': LengthControl,
  'area': AreaControl,
  'mouseposition': MousePositionControl,
  'scale': ScaleControl,
  'onclick': OnClikControl,
  /** @since 3.8.3 */
  'ontoggle': InteractionControl,
  'screenshot': ScreenshotControl,
  'geoscreenshot': geoScreenshotControl,
  'querybydrawpolygon': QueryByDrawPolygonControl
};

/**
 * BACKCOMP v3.x
 */
CONTROLS['nominatim'] = CONTROLS['geocoding'];

/**
 * @FIXME add description
 * 
 * @since 3.9.0
 */

var OlMapViewer = function () {
  function OlMapViewer() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, OlMapViewer);

    var controls = ol.control.defaults({ attribution: false, zoom: false });
    var interactions = ol.interaction.defaults().extend([new ol.interaction.DragRotate()]);

    interactions.removeAt(1); // remove douclickzoom

    this.map = new ol.Map({
      controls: controls,
      interactions: interactions,
      ol3Logo: false,
      view: opts.view instanceof ol.View ? opts.view : new ol.View(opts.view),
      keyboardEventTarget: document,
      target: opts.id
    });
  }

  /**
   * @FIXME add description
   */


  _createClass(OlMapViewer, [{
    key: 'destroy',
    value: function destroy() {
      if (this.map) {
        this.map.dispose();
        this.map = null;
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getView',
    value: function getView() {
      return this.map.getView();
    }
    /**
     * @FIXME add description
     */

  }, {
    key: 'updateMap',
    value: function updateMap(mapObject) {}

    /**
     * @FIXME add description
     */

  }, {
    key: 'updateView',
    value: function updateView() {}

    /**
     * @FIXME add description
     */

  }, {
    key: 'getMap',
    value: function getMap() {
      return this.map;
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'setTarget',
    value: function setTarget(id) {
      this.map.setTarget(id);
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'zoomTo',
    value: function zoomTo(coordinate, zoom) {
      var view = this.map.getView();
      view.setCenter(coordinate);
      view.setZoom(zoom);
    }
  }, {
    key: 'goTo',


    /**
     * @FIXME add description
     */
    value: function goTo(coordinates) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var view = this.map.getView();
      var animate = options.animate || true;
      var zoom = options.zoom || false;
      if (animate) {
        view.animate({ duration: 300, center: coordinates }, zoom ? { zoom: zoom, duration: 300 } : { duration: 300, resolution: view.getResolution() });
      } else {
        view.setCenter(coordinates);
        if (zoom) {
          view.setZoom(zoom);
        }
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'goToRes',
    value: function goToRes(coordinates) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var view = this.map.getView();
      var animate = options.animate || true;
      var resolution = options.resolution || view.getResolution();
      if (animate) {
        view.animate({ duration: 200, center: coordinates }, { duration: 200, resolution: resolution });
      } else {
        view.setCenter(coordinates);
        view.setResolution(resolution);
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'fit',
    value: function fit(geometry) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var view = this.map.getView();
      var animate = options.animate || true;
      if (animate) {
        view.animate({ duration: 200, center: view.getCenter() });
        view.animate({ duration: 200, resolution: view.getResolution() });
      }
      if (options.animate) {
        delete options.animate; // non lo passo al metodo di OL3 perché è un'opzione interna
      }
      view.fit(geometry, _extends({}, options, {
        constrainResolution: undefined === options.constrainResolution && true || options.constrainResolution,
        size: this.map.getSize()
      }));
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getZoom',
    value: function getZoom() {
      return this.map.getView().getZoom();
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getResolution',
    value: function getResolution() {
      return this.map.getView().getResolution();
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getCenter',
    value: function getCenter() {
      return this.map.getView().getCenter();
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getBBOX',
    value: function getBBOX() {
      return this.map.getView().calculateExtent(this.map.getSize());
    }
  }, {
    key: 'getLayerByName',


    /**
     * @FIXME add description
     */
    value: function getLayerByName(layerName) {
      return this.map.getLayers().find(function (layer) {
        return layerName === layer.get('name');
      });
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'removeLayerByName',
    value: function removeLayerByName(layerName) {
      var layer = this.getLayerByName(layerName);
      if (layer) {
        this.map.removeLayer(layer);
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getActiveLayers',
    value: function getActiveLayers() {
      return this.map.getLayers().filter(function (layer) {
        var props = layer.getProperties();
        return props.visible && true !== props.basemap;
      });
    }
  }, {
    key: 'removeLayers',


    /**
     * @FIXME add description
     */
    value: function removeLayers() {
      this.map.getLayers().clear();
    }
  }, {
    key: 'getLayersNoBase',


    /**
     * @FIXME add description
     */
    value: function getLayersNoBase() {
      return this.map.getLayers().filter(function (layer) {
        var props = layer.getProperties();
        return true !== props.basemap;
      });
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'addBaseLayer',
    value: function addBaseLayer(type) {
      this.map.addLayer(type ? BaseLayers[type] : BaseLayers.BING.Aerial);
    }
  }, {
    key: 'changeBaseLayer',


    /**
     * @TODO double check (unusued and broken code ?)
     */
    value: function changeBaseLayer(layerName) {
      this.map.getLayers().insertAt(0, this.getLayerByName(layername));
    }
  }]);

  return OlMapViewer;
}();

function MapService() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state = {
    mapUnits: 'm',
    bbox: [],
    hidemaps: [],
    resolution: null,
    center: null,
    loading: false,
    hidden: true,
    scale: 0,
    mapcontrolsalignement: 'rv',
    mapcontrolDOM: null,
    mapcontrolready: false,
    mapcontrolSizes: {
      height: 47,
      width: 47,
      minWidth: 47,
      minHeight: 47
    },
    mapControl: {
      grid: [],
      length: 0,
      currentIndex: 0,
      update: true,
      disabled: false
    },
    map_info: {
      info: null,
      style: null
    },
    mapunits: ['metric']
  };
  this.id = 'MapService';

  /**
   * @since 3.8.3
   * internal promise. Resolved when view is set
   */
  this._ready = new Promise(function (resolve, reject) {
    _this.once('viewerset', function () {
      // CHECK IF MAPLAYESRSTOREREGISTRY HAS LAYERSTORE
      _mapLayers2.default.getLayersStores().forEach(_this._setUpEventsKeysToLayersStore.bind(_this));
      _mapLayers2.default.onafter('addLayersStore', _this._setUpEventsKeysToLayersStore.bind(_this));
      _mapLayers2.default.onafter('removeLayersStore', _this._removeEventsKeysToLayersStore.bind(_this));
      resolve();
    });
  });

  this.viewer = null;
  this.target = options.target || null;
  this.layersCount = 0; // useful to set Zindex to layer order on map
  this.maps_container = options.maps_container || null;
  this._layersStoresEventKeys = {};
  this._keyEvents = {
    ol: [],
    g3wobject: [],
    eventemitter: []
  };
  this.project = null;
  this._mapControls = [];
  this._changeMapMapControls = [];
  this._mapLayers = [];
  this._externalMapLayers = [];
  this._externalLayers = [];
  // array where store interactions added from plugin or external from application
  this._externalInteractions = [];
  this.mapBaseLayers = {};
  /**
   * Default layers are OL layers that are add to map by default.
   * Are used to show selection Features and/or highlight Layer feature
   */
  this.defaultsLayers = {
    _style: {
      highlightLayer: {
        color: undefined
      },
      selectionLayer: {
        color: 'red'
      }
    },
    highlightLayer: new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: function style(feature) {
        var styles = [];
        var geometryType = feature.getGeometry().getType();
        var style = (0, _createSelectedStyle.createSelectedStyle)({
          geometryType: geometryType,
          color: _this.defaultsLayers._style.highlightLayer.color,
          fill: false
        });
        styles.push(style);
        return styles;
      }
    }),
    selectionLayer: new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: function style(feature) {
        var styles = [];
        var geometryType = feature.getGeometry().getType();
        var style = (0, _createSelectedStyle.createSelectedStyle)({
          geometryType: geometryType,
          color: _this.defaultsLayers._style.selectionLayer.color,
          fill: false
        });
        styles.push(style);
        return styles;
      }
    })
  };
  this.layersExtraParams = {};
  this._greyListenerKey = null;
  this._drawShadow = {
    type: 'coordinate',
    outer: [],
    inner: [],
    scale: null,
    rotation: null
  };
  this.config = options.config || _application2.default.getConfig();
  this._howManyAreLoading = 0;
  this._layersLoadingError = false;
  // function to show spinner layers
  this._incrementLoaders = function () {
    if (_this._howManyAreLoading === 0) {
      _this.emit('loadstart');
      _gui2.default.showSpinner({
        container: $('#map-spinner'),
        id: 'maploadspinner',
        style: 'transparent'
      });
    }
    _this._howManyAreLoading += 1;
  };

  this._decrementLoaders = function () {
    _this._howManyAreLoading -= 1;
    if (_this._howManyAreLoading === 0) {
      _this.emit('loadend');
      _gui2.default.hideSpinner('maploadspinner');
    }
  };

  this._mapLayerLoadError = function () {
    if (!_this._layersLoadingError) {
      _gui2.default.notify.warning('sdk.errors.layers.load');
      _this._layersLoadingError = true;
    }
    _this._decrementLoaders();
  };
  if (options.project) this.project = options.project;else {
    this.project = _projects2.default.getCurrentProject();
    //on after setting current project
    var keysetCurrentProject = _projects2.default.onafter('setCurrentProject', function (project) {
      _this.removeLayers();
      _this._removeListeners();
      // check if reload same project
      var isSameProject = _this.project.getId() === project.getId();
      _this.project = project;
      var changeProjectCallBack = function changeProjectCallBack() {
        _this._resetView();
        _this._setupAllLayers();
        _this._checkMapControls();
        _this.setUpMapOlEvents();
        _this.setupCustomMapParamsToLegendUrl();
      };
      _application2.default.isIframe() && changeProjectCallBack();
      isSameProject ? changeProjectCallBack() : _this.getMap().once('change:size', changeProjectCallBack);
    });
    this._keyEvents.g3wobject.push({
      who: _projects2.default,
      setter: 'setCurrentProject',
      key: keysetCurrentProject
    });
  }
  this._setupListeners();
  this._marker = null;
  this._bboxLayer = new ol.layer.Vector({
    source: new ol.source.Vector({})
  });
  this.debounces = {
    setupCustomMapParamsToLegendUrl: {
      fnc: function fnc() {
        _this._setupCustomMapParamsToLegendUrl.apply(_this, arguments);
      },
      delay: 1000
    }
  };
  this.setters = {
    setupControls: function setupControls() {
      return this._setupControls();
    },
    addHideMap: function addHideMap() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          ratio = _ref.ratio,
          _ref$layers = _ref.layers,
          layers = _ref$layers === undefined ? [] : _ref$layers,
          _ref$mainview = _ref.mainview,
          mainview = _ref$mainview === undefined ? false : _ref$mainview,
          _ref$switchable = _ref.switchable,
          switchable = _ref$switchable === undefined ? false : _ref$switchable;

      var id = 'hidemap_' + Date.now();
      var idMap = {
        id: id,
        map: null,
        switchable: switchable
      };
      this.state.hidemaps.push(idMap);
      return idMap;
    },
    updateMapView: function updateMapView(bbox, resolution, center) {
      this.state.bbox = bbox;
      this.state.resolution = resolution;
      this.state.center = center;
      this.updateMapLayers();
    },
    setHidden: function setHidden(bool) {
      this.state.hidden = bool;
    },
    setupViewer: function setupViewer(width, height) {
      if (width === 0 || height === 0) return;
      if (this.viewer) {
        this.viewer.destroy();
        this.viewer = null;
      }
      this._setupViewer(width, height);
      this.state.bbox = this.viewer.getBBOX();
      this.state.resolution = this.viewer.getResolution();
      this.state.center = this.viewer.getCenter();
      this._setupAllLayers();
      this.setUpMapOlEvents();
      this.emit('viewerset');
    },
    controlClick: function controlClick(mapcontrol) {
      var info = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    },
    loadExternalLayer: function loadExternalLayer(layer) {},
    // used in general to alert external layer is  loaded
    unloadExternalLayer: function unloadExternalLayer(layer) {}
  };

  this._onCatalogSelectLayer = function (layer) {
    _mapControls2.default.catalogSelectedLayer(layer);
  };

  this.on('cataloglayerselected', this._onCatalogSelectLayer);

  this._keyEvents.eventemitter.push({
    event: 'cataloglayerselected',
    listener: this._onCatalogSelectLayer
  });

  var extraParamsSet = function extraParamsSet(extraParams, update) {
    update && _this.getMapLayers().forEach(function (mapLayer) {
      return mapLayer.update(_this.state, extraParams);
    });
  };

  this.on('extraParamsSet', extraParamsSet);

  this._keyEvents.eventemitter.push({
    event: 'extraParamsSet',
    listener: extraParamsSet
  });

  base(this);
}

inherit(MapService, G3WObject);

var proto = MapService.prototype;

/**
 * @since 3.8.3
 * return promise ready
 */
proto.isReady = function () {
  return this._ready;
};

proto.setUpMapOlEvents = function () {
  var _this2 = this;

  var dynamicLegend = this.project.getContextBaseLegend();
  // set change resolution
  this._keyEvents.ol.forEach(function (keyEvent) {
    return ol.Observable.unByKey(keyEvent);
  });
  var keyolchangeresolution = this.viewer.map.getView().on("change:resolution", function (evt) {
    _this2._updateMapView();
    dynamicLegend && _this2.setupCustomMapParamsToLegendUrl();
  });
  this._keyEvents.ol.push(keyolchangeresolution);
  if (dynamicLegend) {
    var keyolmoveeend = this.viewer.map.on("moveend", function (evt) {
      return _this2.setupCustomMapParamsToLegendUrl();
    });
    this._keyEvents.ol.push(keyolmoveeend);
  } else this.setupCustomMapParamsToLegendUrl(); //set always to show legend at start
};

//clear methods to remove all listeners events
proto.clear = function () {
  var _this3 = this;

  Object.keys(this._keyEvents).forEach(function (type) {
    switch (type) {
      case 'ol':
        _this3._keyEvents[type].forEach(function (key) {
          return ol.Observable.unByKey(key);
        });
        break;
      case 'g3wobject':
        _this3._keyEvents[type].forEach(function (_ref2) {
          var who = _ref2.who,
              setter = _ref2.setter,
              key = _ref2.key;
          who.un(setter, key);
        });
        break;
      case 'eventemitter':
        _this3._keyEvents[type].forEach(function (_ref3) {
          var event = _ref3.event,
              listener = _ref3.listener;
          _this3.removeListener(event, listener);
        });
        break;
    }
  });
  this._keyEvents = null;
  _mapLayers2.default.getLayersStores().forEach(this._removeEventsKeysToLayersStore.bind(this));
};

proto.showMapSpinner = function () {
  _gui2.default.showSpinner({
    container: $('#map-spinner'),
    id: 'maploadspinner',
    style: 'transparent'
  });
};

proto.hideMapSpinner = function () {
  _gui2.default.hideSpinner('maploadspinner');
};

proto.getScaleFromExtent = function (extent) {
  var resolution = this.getMap().getView().getResolutionForExtent(extent, this.getMap().getSize());
  var scale = (0, _getScaleFromResolution.getScaleFromResolution)(resolution, this.getMapUnits());
  return scale;
};

proto._addHideMap = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      ratio = _ref4.ratio,
      _ref4$layers = _ref4.layers,
      layers = _ref4$layers === undefined ? [] : _ref4$layers,
      _ref4$mainview = _ref4.mainview,
      mainview = _ref4$mainview === undefined ? false : _ref4$mainview;

  var idMap = this.state.hidemaps[this.state.hidemaps.length - 1];
  var view = this.getMap().getView();
  var view_options = {
    projection: view.getProjection(),
    center: view.getCenter(),
    resolution: this.getResolution()
  };
  var viewer = new OlMapViewer({
    id: idMap.id,
    view: mainview ? view : view_options
  });
  // set Map
  idMap.map = viewer.getMap();
  // in case of rate
  if (ratio) {
    var _idMap$map$getSize = idMap.map.getSize(),
        _idMap$map$getSize2 = _slicedToArray(_idMap$map$getSize, 2),
        width = _idMap$map$getSize2[0],
        height = _idMap$map$getSize2[1];

    idMap.map.setSize([width, width * ratio]);
  }

  for (var i = 0; i < layers.length; i++) {
    var layer = layers[i];
    idMap.map.addLayer(layer);
  }
  return idMap.map;
};

proto.removeHideMap = function (id) {
  var index = void 0;
  for (var i = 0; i < this.state.hidemaps.length; i++) {
    if (id === this.state.hidemaps[i].id) {
      index = i;
      break;
    }
  }
  index !== undefined && this.state.hidemaps.splice(index, 1);
};

proto._showHideMapElement = function () {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      map = _ref5.map,
      _ref5$show = _ref5.show,
      show = _ref5$show === undefined ? false : _ref5$show;

  show ? $(map.getTargetElement()).addClass('show') : $(map.getTargetElement()).removeClass('show');
};

proto.createMapImage = function () {
  var _this4 = this;

  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      map = _ref6.map,
      background = _ref6.background;

  return new Promise(function (resolve, reject) {
    try {
      var canvas = _this4.getMapCanvas(map);
      if (navigator.msSaveBlob) resolve(canvas.msToBlob());else canvas.toBlob(function (blob) {
        return resolve(blob);
      });
    } catch (err) {
      reject(err);
    }
  });
};

proto.getApplicationAttribution = function () {
  var _config$group = this.config.group,
      header_terms_of_use_link = _config$group.header_terms_of_use_link,
      header_terms_of_use_text = _config$group.header_terms_of_use_text;

  if (header_terms_of_use_text) {
    return header_terms_of_use_link ? '<a href="' + header_terms_of_use_link + '">' + header_terms_of_use_text + '</a>' : '<span class="skin-color" style="font-weight: bold">' + header_terms_of_use_text + '</span>';
  } else return false;
};

proto.slaveOf = function (mapService, sameLayers) {
  sameLayers = sameLayers || false;
};

proto.setLayersExtraParams = function (params, update) {
  this.layersExtraParams = _.assign(this.layersExtraParams, params);
  this.emit('extraParamsSet', params, update);
};

proto.getProject = function () {
  return this.project;
};

proto.getMap = function () {
  try {
    return this.viewer.map;
  } catch (err) {}
};

proto.getMapCanvas = function (map) {
  var viewport = map ? map.getViewport() : $('#' + this.maps_container + ' .g3w-map').last().children('.ol-viewport')[0];
  return $(viewport).children('canvas')[0];
};

proto.getProjection = function () {
  return this.project.getProjection();
};

proto.isMapHidden = function () {
  return this.state.hidden;
};

proto.isAxisOrientationInverted = function () {
  return this.getProjection().getAxisOrientation() === 'neu' ? true : false;
};

proto.getCrs = function () {
  return this.getProjection().getCode();
};

proto.getViewerElement = function () {
  return this.viewer.map.getTargetElement();
};

proto.getViewport = function () {
  return this.viewer.map.getViewport();
};

proto.getResolution = function () {
  return this.viewer.map.getView().getResolution();
};

proto.getEpsg = function () {
  return this.viewer.map.getView().getProjection().getCode();
};

proto.getGetFeatureInfoUrlForLayer = function (layer, coordinates, resolution, epsg, params) {
  var mapLayer = this.getMapLayerForLayer(layer);
  return mapLayer.getGetFeatureInfoUrl(coordinates, resolution, epsg, params);
};

/**
 * Show Marker on map
 * @param coordinates
 * @param duration
 */
proto.showMarker = function (coordinates) {
  var _this5 = this;

  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

  this._marker.setPosition(coordinates);
  setTimeout(function () {
    return _this5._marker.setPosition();
  }, duration);
};

// return layer by name
proto.getLayerByName = function (name) {
  return this.getMap().getLayers().getArray().find(function (lyr) {
    return lyr.get('name') === name;
  });
};

// return layer by id
proto.getLayerById = function (id) {
  return this.getMap().getLayers().getArray().find(function (layer) {
    return layer.get('id') === id;
  });
};

// method do get all feature from vector layer based on coordinates
proto.getVectorLayerFeaturesFromCoordinates = function (layerId, coordinates) {
  var intersectGeom = void 0;
  var features = [];
  var map = this.getMap();
  var vectorLayer = this.getLayerById(layerId);
  if (Array.isArray(coordinates)) {
    if (coordinates.length === 2) {
      var pixel = map.getPixelFromCoordinate(coordinates);
      map.forEachFeatureAtPixel(pixel, function (feature) {
        return features.push(feature);
      }, {
        layerFilter: function layerFilter(layer) {
          return layer === vectorLayer;
        }
      });
    } else if (coordinates.length === 4) {
      intersectGeom = ol.geom.Polygon.fromExtent(coordinates);
      switch (vectorLayer.constructor) {
        case VectorLayer:
          features = vectorLayer.getIntersectedFeatures(intersectGeom);
          break;
        case ol.layer.Vector:
          vectorLayer.getSource().getFeatures().forEach(function (feature) {
            intersectGeom.intersectsExtent(feature.getGeometry().getExtent()) && features.push(feature);
          });
          break;
      }
    }
  } else if (coordinates instanceof ol.geom.Polygon || coordinates instanceof ol.geom.MultiPolygon) {
    intersectGeom = coordinates;
    switch (vectorLayer.constructor) {
      case VectorLayer:
        features = vectorLayer.getIntersectedFeatures(intersectGeom);
        break;
      case ol.layer.Vector:
        vectorLayer.getSource().getFeatures().forEach(function (feature) {
          intersectGeom.intersectsExtent(feature.getGeometry().getExtent()) && features.push(feature);
        });
        break;
    }
  }
  return features;
};

proto.getQueryLayerByCoordinates = function () {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref7.layer,
      coordinates = _ref7.coordinates;

  var mapProjection = this.getProjection();
  var resolution = this.getResolution();
  return new Promise(function (resolve, reject) {
    layer.query({
      coordinates: coordinates,
      mapProjection: mapProjection,
      resolution: resolution
    }).then(function (response) {
      return resolve(response);
    }).fail(function (err) {
      return reject(err);
    });
  });
};

proto.getQueryLayerPromiseByCoordinates = function () {
  var _this6 = this;

  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref8.layer,
      coordinates = _ref8.coordinates;

  return new Promise(function (resolve, reject) {
    var mapProjection = _this6.getProjection();
    var resolution = _this6.getResolution();
    layer.query({
      coordinates: coordinates,
      mapProjection: mapProjection,
      resolution: resolution
    }).then(function (response) {
      resolve(response);
    }).fail(function (error) {
      reject(error);
    });
  });
};

//setup controls
/*
  layout : {
    lv: <options> h : horizontal (default), v vertical
    lh: <options> h: horizontal: v vertical (default)
  }
 */

proto.activeMapControl = function (controlName) {
  var mapControl = this._mapControls.find(function (control) {
    return control.type === controlName;
  });
  var control = mapControl.control;
  !control.isToggled() ? control.toggle() : null;
};

proto.createMapControl = function (type) {
  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      id = _ref9.id,
      visible = _ref9.visible,
      _ref9$add = _ref9.add,
      add = _ref9$add === undefined ? true : _ref9$add,
      _ref9$toggled = _ref9.toggled,
      toggled = _ref9$toggled === undefined ? false : _ref9$toggled,
      _ref9$options = _ref9.options,
      options = _ref9$options === undefined ? {} : _ref9$options;

  var control = CONTROLS[type] ? new CONTROLS[type](_extends({ type: type, toggled: toggled }, options)) : undefined;
  if (undefined === visible) {
    visible = control.isVisible ? control.isVisible() : true;
  }
  if (control) {
    this.addControl(id || type, type, control, add, visible);
  }
  return control;
};

proto.addScaleLineUnits = function () {
  var _this7 = this;

  var units = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  units.forEach(function (unit) {
    return _this7.state.mapunits.push(unit);
  });
};

proto.changeScaleLineUnit = function (unit) {
  var scalelinecontrol = this.getMapControlByType({
    type: 'scaleline'
  });
  scalelinecontrol && scalelinecontrol.getOlControl().setUnits(unit);
};

proto.showAddLayerModal = function () {
  this.emit('addexternallayer');
};

proto._checkMapControls = function () {
  this._changeMapMapControls.forEach(function (_ref10) {
    var control = _ref10.control,
        getLayers = _ref10.getLayers;
    control.change(getLayers());
  });
};

proto._setupControls = function () {
  var _this8 = this;

  var baseLayers = (0, _getMapLayersByFilter.getMapLayersByFilter)({ BASELAYER: true });

  this.getMapLayers().forEach(function (mapLayer) {
    return mapLayer.getSource().setAttributions(_this8.getApplicationAttribution());
  });

  // check if base layer is set. If true add attribution control
  if (this.getApplicationAttribution() || baseLayers.length) {
    var attributionControl = new ol.control.Attribution({
      collapsible: false,
      target: 'map_footer_left'
    });
    this.getMap().addControl(attributionControl);
  }

  // skip when no controls
  if (!this.config || !this.config.mapcontrols) {
    return;
  }

  // BACKCOMP (g3w-admin < v3.7.0)
  var mapcontrols = Array.isArray(this.config.mapcontrols) ? this.config.mapcontrols.reduce(function (a, v) {
    a[v] = {};return a;
  }, {}) // convert `initConfig.group.mapcontrols` from an array of strings to a key-value config Object (eg. ["geocoding"] --> "geocoding" = {})
  : this.config.mapcontrols;

  Object.entries(mapcontrols).forEach(function (_ref11) {
    var _ref12 = _slicedToArray(_ref11, 2),
        controlType = _ref12[0],
        _ref12$ = _ref12[1],
        config = _ref12$ === undefined ? {} : _ref12$;

    var control = void 0;
    switch (controlType) {

      case 'reset':
        if (!isMobile.any) {
          control = new ResetControl({ type: 'reset' });
        }
        _this8.addControl(controlType, control, false);
        break;

      case 'zoom':
        control = _this8.createMapControl(controlType, {
          options: {
            zoomInLabel: '\uE98A',
            zoomOutLabel: '\uE98B'
          }
        });
        break;

      case 'zoombox':
        if (!isMobile.any) {
          control = _this8.createMapControl(controlType, {});
          control.on('zoomend', function (e) {
            _this8.viewer.fit(e.extent);
          });
        }
        break;

      case 'zoomtoextent':
        control = _this8.createMapControl(controlType, {
          options: {
            label: '\uE98C',
            extent: _this8.project.state.initextent
          }
        });
        break;

      case 'mouseposition':
        if (!isMobile.any) {
          var coordinateLabels = _this8.getProjection().getUnits() === 'm' ? ['X', 'Y'] : ['Lng', 'Lat'];
          var crs = _this8.getCrs();
          control = _this8.createMapControl(controlType, {
            add: false,
            options: {
              coordinateFormat: function coordinateFormat(coordinate) {
                return ol.coordinate.format(coordinate, '\xA0' + coordinateLabels[0] + ': {x}, ' + coordinateLabels[1] + ': {y}\xA0\xA0 [' + crs + ']\xA0', 4);
              },

              undefinedHTML: false,
              projection: _this8.getCrs()
            }
          });
          if (_this8.getEpsg() !== 'EPSG:4326') {
            var mapEspg = _this8.getEpsg();
            var _coordinateLabels = ['Lng', 'Lat'];
            var _crs = _this8.getCrs();
            control = _this8.createMapControl(controlType, {
              add: false,
              options: {
                target: 'mouse-position-control-epsg-4326',
                coordinateFormat: function coordinateFormat(coordinate) {
                  coordinate = ol.proj.transform(coordinate, mapEspg, 'EPSG:4326');
                  return ol.coordinate.format(coordinate, '\xA0' + _coordinateLabels[0] + ': {x}, ' + _coordinateLabels[1] + ': {y}\xA0\xA0 [' + _crs + ']\xA0', 4);
                },

                undefinedHTML: false,
                projection: _this8.getCrs()
              }
            });
          }
        }
        break;

      case 'screenshot':
      case 'geoscreenshot':
        if (!isMobile.any) {
          control = _this8.createMapControl(controlType, {
            options: {
              layers: [].concat(_toConsumableArray(_mapLayers2.default.getLayers()), _toConsumableArray(_this8._externalLayers)),
              onclick: _this8._handlePrint.bind(_this8, controlType)
            }
          });
        }
        break;

      case 'scale':
        control = _this8.createMapControl(controlType, {
          add: false,
          options: {
            coordinateFormat: ol.coordinate.createStringXY(4),
            projection: _this8.getCrs(),
            isMobile: isMobile.any
          }
        });
        break;

      case 'query':
        control = _this8.createMapControl(controlType, {
          add: true,
          toggled: true
        });
        break;

      case 'querybypolygon':
      case 'querybbox':
      case 'querybydrawpolygon':
        if (!isMobile.any) {
          control = _this8.createMapControl(controlType, {
            options: {
              spatialMethod: 'intersects'
            }
          });
        }
        break;

      case 'streetview':
        // streetview
        control = _this8.createMapControl(controlType, {});
        break;

      case 'scaleline':
        control = _this8.createMapControl(controlType, {
          add: false,
          options: {
            position: 'br'
          }
        });
        break;

      case 'overview':
        if (!isMobile.any) {
          if (!_this8.config.overviewproject) return;
          var overviewProjectGid = _this8.config.overviewproject.gid;
          if (overviewProjectGid) {
            _projects2.default.getProject(overviewProjectGid).then(function (project) {
              var overViewMapLayers = _this8.getOverviewMapLayers(project);
              var viewOptions = _this8._calculateViewOptions({
                width: 200, // at moment hardcoded
                height: 150,
                project: project
              });
              var view = new ol.View(viewOptions);
              var mainView = _this8.getMap().getView();
              view.on('change:center', function () {
                var currentCenter = this.getCenter();
                var center = mainView.constrainCenter(currentCenter);
                center[0] !== currentCenter[0] || center[1] !== currentCenter[1] && view.setCenter(center);
              });
              control = _this8.createMapControl(controlType, {
                add: false,
                options: {
                  position: 'bl',
                  className: 'ol-overviewmap ol-custom-overviewmap',
                  collapseLabel: $('<span class="' + _gui2.default.getFontClass('arrow-left') + '"></span>')[0],
                  label: $('<span class="' + _gui2.default.getFontClass('arrow-right') + '"></span>')[0],
                  collapsed: false,
                  layers: overViewMapLayers,
                  view: view
                }
              });
            });
          }
        }
        break;

      case 'geocoding':
      case 'nominatim':
        control = _this8.createMapControl(controlType, {
          add: false,
          options: {
            config: config
          }
        });
        break;

      case 'geolocation':
        control = _this8.createMapControl(controlType);
        control.on('click', throttle(function (evt) {
          return _this8.showMarker(evt.coordinates);
        }));
        control.on('error', function (evt) {
          _gui2.default.showUserMessage({
            type: 'warning',
            message: "mapcontrols.geolocations.error",
            autoclose: true
          });
        });
        break;

      case 'addlayers':
        if (!isMobile.any) {
          control = _this8.createMapControl(controlType, {});
          control.on('addlayer', function () {
            return _this8.emit('addexternallayer');
          });
        }
        break;

      case 'length':
        if (!isMobile.any) {
          control = _this8.createMapControl(controlType, {
            options: {
              tipLabel: 'sdk.mapcontrols.measures.length.tooltip',
              interactionClassOptions: {
                projection: _this8.getProjection(),
                help: 'sdk.mapcontrols.measures.length.help'
              }
            }
          });
        }
        break;

      case 'area':
        if (!isMobile.any) {
          control = _this8.createMapControl(controlType, {
            options: {
              tipLabel: 'sdk.mapcontrols.measures.area.tooltip',
              interactionClassOptions: {
                projection: _this8.getProjection(),
                help: 'sdk.mapcontrols.measures.area.help'
              }
            }
          });
        }
        break;

      /**
       * @since 3.8.0
       */
      case 'zoomhistory':
        control = _this8.createMapControl(controlType, { add: false });
        _this8._addControlToMapControlsLeftBottom(control);
        break;

    }
  });
  return this.getMapControls();
};

/**
 *  Set ZIndex layer from fa stack
 */
proto.setZIndexLayer = function () {
  var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref13.layer,
      _ref13$zindex = _ref13.zindex,
      zindex = _ref13$zindex === undefined ? this.getMap().getLayers().getLength() : _ref13$zindex;

  layer && layer.setZIndex(zindex);
};

/**
 *
 * Get map stack layer position
 */
proto.getLayerZindex = function (layer) {
  return layer && layer.getZIndex();
};

proto.getCenter = function () {
  var map = this.getMap();
  return map.getView().getCenter();
};

/**
 *
 *method to zoom to feature
 */
proto.zoomToFid = _asyncToGenerator(function* () {
  var zoom_to_fid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '|';

  var _zoom_to_fid$split = zoom_to_fid.split(separator),
      _zoom_to_fid$split2 = _slicedToArray(_zoom_to_fid$split, 2),
      layerId = _zoom_to_fid$split2[0],
      fid = _zoom_to_fid$split2[1];

  if (layerId !== undefined && fid !== undefined) {
    var layer = this.project.getLayerById(layerId);

    var _ref15 = yield _data2.default.getData('search:fids', {
      inputs: {
        layer: layer,
        fids: [fid]
      },
      outputs: {
        show: {
          loading: false,
          condition: function condition() {
            var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref16$data = _ref16.data,
                data = _ref16$data === undefined ? [] : _ref16$data;

            return data[0] && data[0].features.length > 0;
          }
        }
      }
    }),
        _ref15$data = _ref15.data,
        data = _ref15$data === undefined ? [] : _ref15$data;

    var feature = data[0] && data[0].features[0];
    feature && this.zoomToFeatures([feature]);
  }
});

/**
 * Method to handele ztf url parameter
 * @param zoom_to_feature
 */
proto.handleZoomToFeaturesUrlParameter = _asyncToGenerator(function* () {
  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref18$zoom_to_featur = _ref18.zoom_to_features,
      zoom_to_features = _ref18$zoom_to_featur === undefined ? '' : _ref18$zoom_to_featur,
      _ref18$search_endpoin = _ref18.search_endpoint,
      search_endpoint = _ref18$search_endpoin === undefined ? 'api' : _ref18$search_endpoin;

  try {
    var _zoom_to_features$spl = zoom_to_features.split(':'),
        _zoom_to_features$spl2 = _slicedToArray(_zoom_to_features$spl, 2),
        layerNameorIdorOrigname = _zoom_to_features$spl2[0],
        fieldsValuesSearch = _zoom_to_features$spl2[1];

    if (layerNameorIdorOrigname && fieldsValuesSearch) {
      var projectLayer = this.project.getLayers().find(function (layer) {
        return layer.id === layerNameorIdorOrigname || layer.name === layerNameorIdorOrigname || layer.origname === layerNameorIdorOrigname;
      });
      if (projectLayer) {
        var layer = this.project.getLayerById(projectLayer.id);
        var filter = createFilterFromString({
          layer: layer,
          search_endpoint: search_endpoint,
          filter: fieldsValuesSearch
        });

        var _ref19 = yield _data2.default.getData('search:features', {
          inputs: {
            layer: layer,
            filter: filter,
            search_endpoint: search_endpoint
          },
          outputs: {
            show: {
              loading: false
            }
          }
        }),
            data = _ref19.data;

        data && data[0] && data[0].features && this.zoomToFeatures(data[0].features);
      }
    }
  } catch (err) {
    console.log(err);
  }
});

proto.getMapExtent = function () {
  var map = this.getMap();
  return map.getView().calculateExtent(map.getSize());
};

/**
 * @param url
 * @param epsg cordinate referece system (since 3.8.0)
 * 
 * @returns {string}
 */
proto.addMapExtentUrlParameterToUrl = function (url, epsg) {
  url = new URL(url);
  url.searchParams.set('map_extent', (undefined !== epsg && this.getEpsg() !== epsg ? ol.proj.transformExtent(this.getMapExtent(), this.getEpsg(), epsg) : this.getMapExtent()).toString());
  return url.toString();
};

proto.getMapExtentUrl = function () {
  var url = new URL(location.href);
  var map_extent = this.getMapExtent().toString();
  url.searchParams.set('map_extent', map_extent);
  return url.toString();
};

proto.createCopyMapExtentUrl = function () {
  var url = this.getMapExtentUrl();
  copyUrl(url);
};

proto._setMapControlsGrid = function (length) {
  var grid = this.state.mapControl.grid;
  if (length < 2) {
    var rC = grid[grid.length - 1];
    grid.push({
      rows: rC.rows * 2,
      columns: 2
    });
    return;
  }
  if (length === 2) {
    if (grid.length) {
      var _rC = grid[grid.length - 1];
      grid.push({
        rows: _rC.columns,
        columns: _rC.rows
      });
    } else {
      grid.push({
        rows: 1,
        columns: 2
      });
    }
  } else if (length === 3) {
    var _rC2 = grid[grid.length - 1];
    grid.push({
      rows: 2 * _rC2.rows,
      columns: length
    });
  } else {
    grid.push({
      rows: grid.length + 1 + (Number.isInteger(length) ? 0 : 1),
      columns: Number.isInteger(length) ? length : parseInt(length) + 1
    });
    var _length = Number.isInteger(length) ? length : parseInt(length);
    this._setMapControlsGrid(_length / 2);
  }
};

proto._setMapControlsInsideContainerLenght = function () {
  var _this9 = this;

  this.state.mapControl.length = 1;
  // count the mapcontrol inside g3w-map-control container
  this._mapControls.forEach(function (control) {
    var map = _this9.getMap();
    _this9.state.mapControl.length += control.mapcontrol ? control.id === 'zoom' ? 2 : 1 : 0;
    control.control.changelayout ? control.control.changelayout(map) : null;
  });
  // add 1 id odd number
  this.state.mapControl.length += this.state.mapControl.length % 2;
  this.state.mapControl.grid = [];
  this._setMapControlsGrid(this.state.mapControl.length);
};

/**
 * Get filtrable layer. Get parameter to custom filter Object
 */
proto.filterableLayersAvailable = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return (0, _getMapLayersByFilter.getMapLayersByFilter)({
    FILTERABLE: true,
    SELECTED_OR_ALL: true
  }, options).filter(function (layer) {
    return 'wfs' === layer.getProvider('filter').getName();
  });
};

proto.setMapControlsAlignement = function () {
  var alignement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rv';

  this.state.mapcontrolsalignement = alignement;
};

proto.getMapControlsAlignement = function () {
  return this.state.mapcontrolsalignement;
};

proto.isMapControlsVerticalAlignement = function () {
  return this.state.mapcontrolsalignement.indexOf('v') !== -1;
};

proto.setMapControlsVerticalAlignement = function () {
  this.state.mapcontrolsalignement = this.state.mapcontrolsalignement[0] + 'v';
};

proto.setMapControlsHorizontalAlignement = function () {
  this.state.mapcontrolsalignement = this.state.mapcontrolsalignement[0] + 'h';
};

proto.flipControlsHorizontally = function () {
  this.state.mapcontrolsalignement = this.state.mapcontrolsalignement[0] === 'r' ? 'l' + this.state.mapcontrolsalignement[1] : 'r' + this.state.mapcontrolsalignement[1];
};

proto.flipMapControlsVertically = function () {
  this.state.mapcontrolsalignment = this.state.mapcontrolsalignement[1] === 'v' ? this.state.mapcontrolsalignement[0] + 'h' : this.state.mapcontrolsalignement[0] + 'v';
};

proto.setMapControlsContainer = function (mapControlDom) {
  this.state.mapcontrolDOM = mapControlDom;
};

proto._updateMapControlsLayout = function () {
  var _this10 = this;

  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      width = _ref20.width,
      height = _ref20.height;

  // case mobile open keyboard
  width == 0 || height == 0 ? this.state.mapcontrolDOM.css('z-index', 0) : this.state.mapcontrolDOM.css('z-index', 1);
  // update only when all control are ready
  if (this.state.mapcontrolready && this.state.mapControl.update) {
    var changedAndMoreSpace = {
      changed: false,
      space: false
    };
    // count the mapcontrol insied g3w-map-control container
    this._mapControls.forEach(function (control) {
      var map = _this10.getMap();
      control.control.changelayout ? control.control.changelayout(map) : null;
    });
    // check if is vertical
    if (this.isMapControlsVerticalAlignement()) {
      var handleVerticalMapControlDOMElements = function handleVerticalMapControlDOMElements() {
        var mapControslHeight = _this10.state.mapControl.grid[_this10.state.mapControl.currentIndex].columns * _this10.state.mapcontrolSizes.minWidth;
        // get bottom controls
        var bottomMapControls = $('.ol-control-b' + _this10.getMapControlsAlignement()[0]);
        var bottomMapControlTop = bottomMapControls.length ? $(bottomMapControls[bottomMapControls.length - 1]).position().top : height;
        var freeSpace = bottomMapControlTop > 0 ? bottomMapControlTop - mapControslHeight : height - mapControslHeight;
        if (freeSpace < 10) {
          _this10.state.mapControl.currentIndex = _this10.state.mapControl.currentIndex === _this10.state.mapControl.grid.length - 1 ? _this10.state.mapControl.currentIndex : _this10.state.mapControl.currentIndex + 1;
          changedAndMoreSpace.changed = true;
        } else {
          // check if there enough space to expand map controls
          /**
           Add 15 px of offset. Need to find a better solution in future
           */
          var nextHeight = 15 + (_this10.state.mapControl.currentIndex > 0 ? _this10.state.mapControl.grid[_this10.state.mapControl.currentIndex - 1].columns * _this10.state.mapcontrolSizes.minWidth - mapControslHeight : mapControslHeight);
          if (freeSpace > nextHeight) {
            changedAndMoreSpace.changed = true;
            changedAndMoreSpace.space = true;
            _this10.state.mapControl.currentIndex = _this10.state.mapControl.currentIndex === 0 ? _this10.state.mapControl.currentIndex : _this10.state.mapControl.currentIndex - 1;
          }
        }
        if (changedAndMoreSpace.changed) {
          var _mapControslHeight = _this10.state.mapControl.grid[_this10.state.mapControl.currentIndex].columns * _this10.state.mapcontrolSizes.minWidth;
          var mapControlsWidth = _this10.state.mapControl.grid[_this10.state.mapControl.currentIndex].rows * _this10.state.mapcontrolSizes.minWidth;
          _this10.state.mapcontrolDOM.css('height', _mapControslHeight + 'px');
          _this10.state.mapcontrolDOM.css('width', mapControlsWidth + 'px');
          changedAndMoreSpace.changed = false;
          changedAndMoreSpace.space && setTimeout(function () {
            return handleVerticalMapControlDOMElements();
          });
        }
      };
      handleVerticalMapControlDOMElements();
    } else isMobile.any && this.setMapControlsAlignement('rv');
  }
};

/**
 *
 * @param control
 * @param visible
 * @private
 */
proto._setMapControlVisible = function (_ref21) {
  var control = _ref21.control,
      _ref21$visible = _ref21.visible,
      visible = _ref21$visible === undefined ? true : _ref21$visible;

  control && control.setVisible(visible);
};

proto._addControlToMapControls = function (control) {
  var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var controlElement = control.element;
  if (!visible) control.element.style.display = "none";
  $('.g3w-map-controls').append(controlElement);
};

/**
 * @since 3.8.0
 */
proto._addControlToMapControlsLeftBottom = function (control) {
  var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!visible) {
    control.element.style.display = "none";
  }
  $('.g3w-map-controls-left-bottom').append(control.element);
};

proto.getMapControlByType = function () {
  var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref22.type;

  var mapControl = this._mapControls.find(function (mapControl) {
    return type === mapControl.type;
  });
  return mapControl && mapControl.control;
};

/**
 * @param id
 * @param type
 * @param control
 * @param addToMapControls
 * @param visible
 */
proto.addControl = function (id, type, control) {
  var _this11 = this;

  var addToMapControls = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var visible = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

  this.state.mapcontrolready = false;
  this.viewer.map.addControl(control);

  control.on('toggled', function (evt) {
    return _this11.emit('mapcontrol:toggled', evt);
  });

  this._mapControls.push({ id: id, type: type, control: control, visible: visible, mapcontrol: addToMapControls && visible });

  control.on('controlclick', function (_ref23) {
    var mapcontrol = _ref23.target;

    var clickmap = mapcontrol.isClickMap && mapcontrol.isClickMap() || false;
    if (clickmap) {
      _this11._externalInteractions.forEach(function (interaction) {
        return interaction.setActive(false);
      });
    }
    _this11.controlClick(mapcontrol, { clickmap: clickmap });
  });

  var buttonControl = $(control.element).find('button');

  buttonControl.tooltip({
    placement: 'bottom',
    container: 'body',
    trigger: _gui2.default.isMobile() ? 'click' : 'hover'
  });

  // in case of mobile hide tooltip after click
  if (_gui2.default.isMobile()) {
    buttonControl.on('shown.bs.tooltip', function () {
      var _this12 = this;

      setTimeout(function () {
        return $(_this12).tooltip('hide');
      }, 600);
    });
  }

  if (addToMapControls) {
    this._addControlToMapControls(control, visible);
  } else {
    var $mapElement = $('#' + this.getMap().getTarget());
    this._updateMapControlsLayout({ width: $mapElement.width(), height: $mapElement.height() });
  }

  _mapControls2.default.registerControl(type, control);

  this._setMapControlsInsideContainerLenght();

  this.state.mapcontrolready = true;
};

proto.showControl = function (type) {
  this.showControls([type]);
};

proto.hideControl = function (type) {
  this.hideControls([type]);
};

proto.showControls = function (types) {
  this.toggleControls(true, types);
};

proto.hideControls = function (types) {
  this.toggleControls(false, types);
};

proto.showAllControls = function () {
  this.toggleControls(true);
};

proto.hideAllControls = function () {
  this.toggleControls(false);
};

proto.toggleControls = function (toggle, types) {
  this._removeControls();
  this._mapControls.forEach(function (controlObj) {
    if (types) {
      if (types.indexOf(controlObj.type) > -1) controlObj.visible = toggle;
    } else controlObj.visible = toggle;
  });
  this._layoutControls();
};

proto._layoutControls = function () {
  var _this13 = this;

  this._mapControls.forEach(function (controlObj) {
    if (controlObj.visible) _this13.viewer.map.addControl(controlObj.control);
  });
};

proto.getMapControls = function () {
  return this._mapControls;
};

proto.removeControlById = function (id) {
  var _this14 = this;

  this._mapControls.find(function (controlObj, ctrlIdx) {
    if (id === controlObj.id) {
      _this14._mapControls.splice(ctrlIdx, 1);
      var control = controlObj.control;
      _this14.viewer.map.removeControl(control);
      control.hideControl && control.hideControl();
      return true;
    }
  });
};

proto.removeControl = function (type) {
  var _this15 = this;

  this._mapControls.find(function (controlObj, ctrlIdx) {
    if (type === controlObj.type) {
      _this15._mapControls.splice(ctrlIdx, 1);
      var control = controlObj.control;
      _this15.viewer.map.removeControl(control);
      control.hideControl && control.hideControl();
      return true;
    }
  });
};

proto._removeControls = function () {
  var _this16 = this;

  this._mapControls.forEach(function (controlObj) {
    return _this16.viewer.map.removeControl(controlObj.control);
  });
};

/**
 * untoggle mapcontrol
 * @param close GUI content
 * @private
 */
proto._unToggleControls = function () {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref24$close = _ref24.close,
      close = _ref24$close === undefined ? true : _ref24$close;

  this._mapControls.forEach(function (controlObj) {
    if (controlObj.control.isToggled && controlObj.control.isToggled()) {
      controlObj.control.toggle(false);
      close && _gui2.default.closeContent();
    }
  });
};

proto.deactiveMapControls = function () {
  this._unToggleControls({
    close: false
  });
};

/**
 *
 * Method to disable
 */
proto.disableClickMapControls = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this._mapControls.forEach(function (controlObj) {
    var control = controlObj.control;

    var clickmap = control.isClickMap ? control.isClickMap() : false;
    if (clickmap) {
      control.isToggled() && control.toggle();
      control[bool ? 'disable' : 'enable']();
    }
  });
};

proto.addMapLayers = function (mapLayers) {
  var _this17 = this;

  mapLayers.reverse().forEach(function (mapLayer) {
    return _this17.addMapLayer(mapLayer);
  });
};

proto._setupCustomMapParamsToLegendUrl = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (bool) {
    var map = this.getMap();
    var size = map && map.getSize().filter(function (value) {
      return value > 0;
    }) || null;
    var bbox = size && size.length === 2 ? map.getView().calculateExtent(size) : this.project.state.initextent;
    // in case of axis orientation inverted i need to inverted the axis
    bbox = map.getView().getProjection().getAxisOrientation() === "neu" ? [bbox[1], bbox[0], bbox[3], bbox[2]] : bbox;
    var crs = this.getEpsg();
    //setup initial legend parameter
    this.getMapLayers().forEach(function (mapLayer) {
      mapLayer.setupCustomMapParamsToLegendUrl && mapLayer.setupCustomMapParamsToLegendUrl({
        crs: crs,
        bbox: bbox
      });
    });
    this.emit('change-map-legend-params');
  }
};

proto.addMapLayer = function (mapLayer) {
  this._mapLayers.push(mapLayer);
  this.addLayerToMap(mapLayer);
};

proto.getMapLayerByLayerId = function (layerId) {
  return this.getMapLayers().find(function (mapLayer) {
    return mapLayer.getLayerConfigs().find(function (layer) {
      return layer.getId() === layerId;
    });
  });
};

proto.getMapLayers = function () {
  return this._mapLayers;
};

proto.getBaseLayers = function () {
  return this.mapBaseLayers;
};

proto.getMapLayerForLayer = function (layer) {
  var multilayerId = 'layer_' + layer.getMultiLayerId();
  var mapLayers = this.getMapLayers();
  var mapLayer = mapLayers.find(function (mapLayer) {
    return mapLayer.getId() === multilayerId;
  });
  return mapLayer;
};

proto.getProjectLayer = function (layerId) {
  return _mapLayers2.default.getLayerById(layerId);
};

proto._setSettings = function () {
  var ZOOM = _constant.MAP_SETTINGS.ZOOM;

  var maxScale = this.getScaleFromExtent(this.project.state.initextent);
  // settings maxScale
  ZOOM.maxScale = ZOOM.maxScale > maxScale ? maxScale : ZOOM.maxScale;
};

proto._resetView = function () {
  var _viewer$map$getSize = this.viewer.map.getSize(),
      _viewer$map$getSize2 = _slicedToArray(_viewer$map$getSize, 2),
      width = _viewer$map$getSize2[0],
      height = _viewer$map$getSize2[1];

  var extent = this.project.state.extent;
  var maxxRes = ol.extent.getWidth(extent) / width;
  var minyRes = ol.extent.getHeight(extent) / height;
  var maxResolution = Math.max(maxxRes, minyRes) > this.viewer.map.getView().getMaxResolution() ? Math.max(maxxRes, minyRes) : this.viewer.map.getView().getMaxResolution();
  var view = new ol.View({
    extent: extent,
    projection: this.viewer.map.getView().getProjection(),
    center: this.viewer.map.getView().getCenter(),
    resolution: this.viewer.map.getView().getResolution(),
    maxResolution: maxResolution
  });
  this._setSettings();
  this.viewer.map.setView(view);
};

proto._calculateViewOptions = function () {
  var _this18 = this;

  var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      project = _ref25.project,
      width = _ref25.width,
      height = _ref25.height;

  var searchParams = new URLSearchParams(location.search);
  var map_extent = searchParams.get('map_extent');
  var zoom_to_fid = searchParams.get('zoom_to_fid');
  var zoom_to_features = searchParams.get('ztf'); // zoom to features
  var lat_lon = searchParams.get('lat') && searchParams.get('lon') && {
    lat: 1 * searchParams.get('lat'),
    lon: 1 * searchParams.get('lon')
  };
  var x_y = searchParams.get('x') && searchParams.get('y') && {
    x: 1 * searchParams.get('x'),
    y: 1 * searchParams.get('y')
  };
  if (zoom_to_fid) this.zoomToFid(zoom_to_fid);else if (zoom_to_features) this.handleZoomToFeaturesUrlParameter({ zoom_to_features: zoom_to_features });else if (lat_lon && !Number.isNaN(lat_lon.lat) && !Number.isNaN(lat_lon.lon)) {
    setTimeout(function () {
      var geometry = new ol.geom.Point(ol.proj.transform([lat_lon.lon, lat_lon.lat], 'EPSG:4326', _this18.getEpsg()));
      if (geometry.getExtent()) _this18.zoomToGeometry(geometry);
    });
  } else if (x_y && !Number.isNaN(x_y.x) && !Number.isNaN(x_y.y)) setTimeout(function () {
    var geometry = new ol.geom.Point([x_y.x, x_y.y]);
    _this18.zoomToGeometry(geometry);
  });
  var initextent = map_extent ? map_extent.split(',').map(function (coordinate) {
    return 1 * coordinate;
  }) : project.state.initextent;
  var projection = this.getProjection();
  var extent = project.state.extent;
  var maxxRes = ol.extent.getWidth(extent) / width;
  var maxyRes = ol.extent.getHeight(extent) / height;
  var maxResolution = Math.max(maxxRes, maxyRes);
  var initxRes = ol.extent.getWidth(initextent) / width;
  var inityRes = ol.extent.getHeight(initextent) / height;
  var resolution = Math.max(initxRes, inityRes);
  var center = ol.extent.getCenter(initextent);
  return {
    projection: projection,
    center: center,
    extent: extent,
    maxResolution: maxResolution,
    resolution: resolution
  };
};

// set view based on project config
proto._setupViewer = function (width, height) {
  var _this19 = this;

  this.viewer = new OlMapViewer({
    id: this.target,
    view: this._calculateViewOptions({
      width: width,
      height: height,
      project: this.project
    })
  });
  this._setSettings();
  this.state.size = this.viewer.map.getSize();
  //set mapunit
  this.state.mapUnits = this.viewer.map.getView().getProjection().getUnits();

  if (this.config.background_color) {
    $('#' + this.target).css('background-color', this.config.background_color);
  }

  $(this.viewer.map.getViewport()).prepend('<div id="map-spinner" style="position:absolute; top: 50%; right: 50%"></div>');

  this.viewer.map.getInteractions().forEach(function (interaction) {
    return _this19._watchInteraction(interaction);
  });

  this.viewer.map.getInteractions().on('add', function (interaction) {
    return _this19._watchInteraction(interaction.element);
  });

  this.viewer.map.getInteractions().on('remove', function (interaction) {
    //this._onRemoveInteraction(interaction););
  });

  this._marker = new ol.Overlay({
    position: null,
    positioning: 'center-center',
    element: document.getElementById('marker'),
    stopEvent: false
  });

  this.viewer.map.addOverlay(this._marker);

  /**
   *
   * Register map addLayer
   *
   */
  this.viewer.map.getLayers().on('add', function (evt) {
    var layer = evt.element;

    var basemap = layer.get('basemap');
    var position = layer.get('position');
    var zindex = basemap && 0;
    if (position && position === 'bottom') zindex = 0;
    zindex = _this19.setLayerZIndex({
      layer: layer,
      zindex: zindex
    });
    _this19.moveDefaultLayersOnTop(zindex);
  });

  this.viewer.map.getLayers().on('remove', function (evt) {
    var layer = evt.element;

    var layerZIndex = layer.getZIndex();
    if (layerZIndex === _this19.layersCount) _this19.layersCount -= 1;
  });
};

proto.getMapUnits = function () {
  return this.state.mapUnits;
};

proto._removeListeners = function () {
  this._setBaseLayerListenerKey && this.project.un('setBaseLayer', this._setBaseLayerListenerKey);
};

// remove all events of layersStore
proto._removeEventsKeysToLayersStore = function (store) {
  var id = store.getId();
  if (this._layersStoresEventKeys[id]) {
    this._layersStoresEventKeys[id].forEach(function (evt) {
      Object.entries(evt).forEach(function (_ref26) {
        var _ref27 = _slicedToArray(_ref26, 2),
            event = _ref27[0],
            key = _ref27[1];

        return store.un(event, key);
      });
    });
    delete this._layersStoresEventKeys[id];
  }
};

// register all events of layersStore and relative keys
proto._setUpEventsKeysToLayersStore = function (store) {
  var _this20 = this;

  var id = store.getId();
  // check if already store a key of events
  this._layersStoresEventKeys[id] = [];
  this._layersStoresEventKeys[id].push({
    addLayer: store.onafter('addLayer', function (l) {
      'vector' === l.getType() && _this20.addLayerToMap(l.getMapLayer());
    })
  });
  this._layersStoresEventKeys[id].push({
    removeLayer: store.onafter('removeLayer', function (l) {
      'vector' === l.getType() && _this20.viewer.map.removeLayer(l.getOLLayer());
    })
  });
};

proto._setupListeners = function () {
  var _this21 = this;

  this._setBaseLayerListenerKey = this.project.onafter('setBaseLayer', function () {
    _this21.updateMapLayers();
  });
};

// SETUP ALL LAYERS
proto._setupAllLayers = function () {
  this._setupBaseLayers();
  this._setupMapLayers();
  this._setupVectorLayers();
  this._setUpDefaultLayers();
};

//SETUP BASELAYERS
proto._setupBaseLayers = function () {
  var _this22 = this;

  var layers = (0, _getMapLayersByFilter.getMapLayersByFilter)({ BASELAYER: true });
  layers.forEach(function (layer) {
    var base = layer.getMapLayer();
    _this22.registerMapLayerListeners(base);
    _this22.mapBaseLayers[layer.getId()] = base;
  });
  Object.values(layers.length ? this.mapBaseLayers : {}).reverse().forEach(function (layer) {
    layer.update(_this22.state, _this22.layersExtraParams);
    _this22.addLayerToMap(layer);
  });
};

// SETUP MAPLAYERS
proto._setupMapLayers = function () {
  var _this23 = this;

  // get all geolayers exclude baselayers and eventually vector layers
  var layers = (0, _getMapLayersByFilter.getMapLayersByFilter)({ BASELAYER: false, VECTORLAYER: false });

  this._setMapProjectionToLayers(layers);

  var cache = {};
  var mapLayers = [];

  Object.entries(
  // Group layers by multilayer property (from project config)
  // to speed up "qtimeseriesries" loading for single layers
  _.groupBy(layers, function (layer) {
    var id = layer.getMultiLayerId();
    if (layer.isQtimeseries()) {
      cache[id] = undefined === cache[id] ? 0 : cache[id] + 1;
      return id + '_' + cache[id];
    }
    return id = undefined === cache[id] ? id : id + '_' + (cache[id] + 1);
  })).forEach(function (_ref28) {
    var _ref29 = _slicedToArray(_ref28, 2),
        id = _ref29[0],
        layers = _ref29[1];

    var layer = layers[0] || [];
    var mapLayer = layer.getMapLayer({
      id: 'layer_' + id,
      projection: _this23.getProjection(),
      /** @since 3.9.1 */
      format: 1 === layers.length ? layer.getFormat() : null
    }, 1 === layers.length ? {} : _this23.layersExtraParams);
    layers.reverse().forEach(function (l) {
      return mapLayer.addLayer(l);
    });
    mapLayers.push(mapLayer);
    _this23.registerMapLayerListeners(mapLayer);
  });

  this.addMapLayers(mapLayers);
  this.updateMapLayers();
};

//SETUP VECTORLAYERS
proto._setupVectorLayers = function () {
  var _this24 = this;

  var layers = (0, _getMapLayersByFilter.getMapLayersByFilter)({ VECTORLAYER: true });
  this._setMapProjectionToLayers(layers);
  layers.forEach(function (layer) {
    _this24.addLayerToMap(layer.getMapLayer());
  });
};

proto._setUpDefaultLayers = function () {
  // follow the order that i want
  this.getMap().addLayer(this.defaultsLayers.highlightLayer);
  this.getMap().addLayer(this.defaultsLayers.selectionLayer);
};

/**
 * Method to set Default layers (selectionLayer, and highlightLayer)
 * always on top of layers stack of map to be always visible
 */
proto.moveDefaultLayersOnTop = function (zindex) {
  this.setZIndexLayer({
    layer: this.defaultsLayers.highlightLayer,
    zindex: zindex + 1
  });
  this.setZIndexLayer({
    layer: this.defaultsLayers.selectionLayer,
    zindex: zindex + 2
  });
};

proto.removeDefaultLayers = function () {
  this.defaultsLayers.highlightLayer.getSource().clear();
  this.defaultsLayers.selectionLayer.getSource().clear();
  this.getMap().removeLayer(this.defaultsLayers.highlightLayer);
  this.getMap().removeLayer(this.defaultsLayers.selectionLayer);
};

proto.setDefaultLayerStyle = function (type) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (type && this.defaultsLayers[type]) this.defaultsLayers._style[type] = style;
};

proto.resetDefaultLayerStyle = function (type) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (type && this.defaultsLayers[type]) this.defaultsLayers._style[type] = {
    color: type === 'highlightLayer' ? undefined : 'red'
  };
};

proto.removeLayers = function () {
  this._removeBaseLayers();
  this._removeMapLayers();
  this.removeExternalLayers();
  this.removeDefaultLayers();
};

proto.removeAllLayers = function () {
  this.viewer.removeLayers();
};

//set ad increase layerIndex
proto.setLayerZIndex = function (_ref30) {
  var layer = _ref30.layer,
      _ref30$zindex = _ref30.zindex,
      zindex = _ref30$zindex === undefined ? this.layersCount += 1 : _ref30$zindex;

  layer.setZIndex(zindex);
  this.emit('set-layer-zindex', {
    layer: layer,
    zindex: zindex
  });
  return zindex;
};

/**
 * Add olLayer to mapLayer
 * @param layer
 */
proto.addLayerToMap = function (layer) {
  var olLayer = layer.getOLLayer();
  olLayer && this.getMap().addLayer(olLayer);
};

/**
 * Setup mapProjection on each layer
 * 
 * @param { Array } layers
 */
proto._setMapProjectionToLayers = function (layers) {
  var _this25 = this;

  layers.forEach(function (layer) {
    return layer.setMapProjection(_this25.getProjection());
  });
};

proto.createMapLayer = function (layer) {
  layer.setMapProjection(this.getProjection());
  var multilayerId = 'layer_' + layer.getMultiLayerId();
  var mapLayer = layer.getMapLayer({
    id: multilayerId,
    projection: this.getProjection()
  }, this.layersExtraParams);
  mapLayer.addLayer(layer);
  return mapLayer;
};

proto.getOverviewMapLayers = function (project) {
  var WMSLayer = require('core/layers/map/wmslayer');
  var layers = [];

  Object.entries(_.groupBy(project.getLayersStore().getLayers({ GEOLAYER: true, BASELAYER: false }), function (layer) {
    return layer.getMultiLayerId();
  })).forEach(function (_ref31) {
    var _ref32 = _slicedToArray(_ref31, 2),
        id = _ref32[0],
        layers = _ref32[1];

    var mapLayer = new WMSLayer({
      url: project.getWmsUrl(),
      id: 'overview_layer_' + id,
      tiled: layers[0].state.tiled
    });
    layers.reverse().forEach(function (layer) {
      return mapLayer.addLayer(layer);
    });
    layers.push(mapLayer.getOLLayer(true));
  });
  return layers.reverse();
};

/**
 * method to update MapLayer
 * @param mapLayer
 * @param options
 */
proto.updateMapLayer = function (mapLayer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { force: false };

  var _ref33 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref33$showSpinner = _ref33.showSpinner,
      showSpinner = _ref33$showSpinner === undefined ? true : _ref33$showSpinner;

  // if force add g3w_time parameter to force request of map layer from server
  if (options.force) options.g3w_time = Date.now();
  if (showSpinner !== mapLayer.showSpinnerWhenLoading) {
    mapLayer.showSpinnerWhenLoading = showSpinner;
    this[showSpinner ? 'registerMapLayerLoadingEvents' : 'unregisterMapLayerLoadingEvents'](mapLayer);
  }
  mapLayer.update(this.state, options);
  return mapLayer;
};

// run update function on each mapLayer
proto.updateMapLayers = function () {
  var _this26 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.getMapLayers().forEach(function (mapLayer) {
    return _this26.updateMapLayer(mapLayer, options);
  });
  var baseLayers = this.getBaseLayers();
  //updatebase layer
  Object.values(baseLayers).forEach(function (baseLayer) {
    return baseLayer.update(_this26.state, _this26.layersExtraParams);
  });
};

// register map Layer listeners of creation
proto.registerMapLayerListeners = function (mapLayer) {
  var _this27 = this;

  var projectLayer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  this.registerMapLayerLoadingEvents(mapLayer);
  //listen change filter token
  if (projectLayer && mapLayer.layers && Array.isArray(mapLayer.layers)) mapLayer.layers.forEach(function (layer) {
    layer.onbefore('change', function () {
      return _this27.updateMapLayer(mapLayer, { force: true });
    });
    layer.on('filtertokenchange', function () {
      return _this27.updateMapLayer(mapLayer, { force: true });
    });
  });
  ///
};

/** Methos to register and unregister map loadmap
 *
 * */
proto.registerMapLayerLoadingEvents = function (mapLayer) {
  mapLayer.on('loadstart', this._incrementLoaders);
  mapLayer.on('loadend', this._decrementLoaders);
  mapLayer.on('loaderror', this._mapLayerLoadError);
};

proto.unregisterMapLayerLoadingEvents = function (mapLayer) {
  mapLayer.off('loadstart', this._incrementLoaders);
  mapLayer.off('loadend', this._decrementLoaders);
  mapLayer.off('loaderror', this._mapLayerLoadError);
};

/**
 * End
 */

// unregister listeners of mapLayers creation
proto.unregisterMapLayerListeners = function (mapLayer) {
  var projectLayer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  this.unregisterMapLayerLoadingEvents(mapLayer);
  // try to remove layer filter token
  if (projectLayer && mapLayer.layers && Array.isArray(mapLayer.layers)) mapLayer.layers.forEach(function (layer) {
    layer.un('change');
    layer.removeEvent('filtertokenchange');
  });
};

proto.setTarget = function (elId) {
  this.target = elId;
};

proto.getCurrentToggledMapControl = function () {
  var mapControl = this._mapControls.find(function (_ref34) {
    var control = _ref34.control;
    return control && control.isToggled && control.isToggled();
  });
  return mapControl && mapControl.control;
};

/**
 * close: param to close eventually right content open
 * @param interaction
 * @param options is an object contain: {
 *   active: If set new interaction active or not
 *   active: If set new interaction active or not
 *   close: if close eventually GUI Content (es. result right content )
 * }
 * return object having current toggled control if there is a toggled mapcontrol
 */
proto.addInteraction = function (interaction) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { active: true, close: true };
  var _options$active = options.active,
      active = _options$active === undefined ? true : _options$active;

  var control = this.getCurrentToggledMapControl();
  var toggled = control && control.isToggled && control.isToggled() || false;
  var untoggleMapControls = control && control.isClickMap ? control.isClickMap() : true;
  untoggleMapControls && active && this._unToggleControls(options);
  this.getMap().addInteraction(interaction);
  interaction.setActive(active);
  this._externalInteractions.push(interaction);
  return {
    control: control,
    toggled: toggled // return current toggled map control if toggled
  };
};

proto.removeInteraction = function (interaction) {
  interaction && interaction.setActive(false);
  this.viewer.map.removeInteraction(interaction);
  this._externalInteractions = this._externalInteractions.filter(function (_interaction) {
    return interaction !== _interaction;
  });
};

proto._watchInteraction = function (interaction) {
  var _this28 = this;

  interaction.on('change:active', function (e) {
    if (e.target instanceof ol.interaction.Pointer && e.target.getActive()) {
      _this28.emit('mapcontrol:active', e.target);
    }
  });
};

/**
 * Show map Info
 * @param info
 */
proto.showMapInfo = function () {
  var _ref35 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      info = _ref35.info,
      style = _ref35.style;

  this.state.map_info.info = info;
  this.state.map_info.style = style || this.state.map_info.style;
};

proto.hideMapInfo = function () {
  this.state.map_info.info = null;
  this.state.map_info.style = null;
};

proto.zoomTo = function (coordinate) {
  var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;

  this.viewer.zoomTo(coordinate, zoom);
};

proto.goTo = function (coordinates, zoom) {
  var options = {
    zoom: zoom || 6
  };
  this.viewer.goTo(coordinates, options);
};

proto.goToRes = function (coordinates, resolution) {
  this.viewer.goToRes(coordinates, {
    resolution: resolution
  });
};

proto.getGeometryAndExtentFromFeatures = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var extent = void 0;
  var geometryType = void 0;
  var geometry = void 0;
  var coordinates = void 0;
  var geometryCoordinates = [];
  for (var i = 0; i < features.length; i++) {
    var feature = features[i];
    var _geometry = feature.getGeometry ? feature.getGeometry() : feature.geometry;
    if (_geometry) {
      if (_geometry instanceof ol.geom.Geometry) {
        var featureExtent = [].concat(_toConsumableArray(_geometry.getExtent()));
        extent = !extent ? featureExtent : ol.extent.extend(extent, featureExtent);
        geometryType = geometryType ? geometryType : _geometry.getType();
        coordinates = _geometry.getCoordinates();
        if (geometryType.includes('Multi')) geometryCoordinates = [].concat(_toConsumableArray(geometryCoordinates), _toConsumableArray(coordinates));else geometryCoordinates.push(coordinates);
      } else {
        var _featureExtent = feature.bbox;
        extent = !extent ? _featureExtent : ol.extent.extend(extent, _featureExtent);
        geometryType = _geometry.type;
        coordinates = _geometry.coordinates;
      }
      if (geometryType.includes('Multi')) geometryCoordinates = [].concat(_toConsumableArray(geometryCoordinates), _toConsumableArray(coordinates));else geometryCoordinates.push(coordinates);
    }
  }
  try {
    var olClassGeomType = geometryType.includes('Multi') ? geometryType : 'Multi' + geometryType;
    geometry = new ol.geom[olClassGeomType](geometryCoordinates);
    if (extent === undefined) extent = geometry.getExtent();
  } catch (err) {}
  return {
    extent: extent,
    geometry: geometry
  };
};

proto.highlightFeatures = function (features) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _getGeometryAndExtent = this.getGeometryAndExtentFromFeatures(features),
      geometry = _getGeometryAndExtent.geometry;
  //force zoom false


  options.zoom = false;
  this.highlightGeometry(geometry, options);
};

/**
 * Zoom methods
 */

proto.zoomToGeometry = function (geometry) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { highlight: false };

  var extent = geometry && geometry.getExtent();
  var highlight = options.highlight;

  if (highlight && extent) options.highLightGeometry = geometry;
  extent && this.zoomToExtent(extent, options);
};

proto.zoomToFeatures = function (features) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { highlight: false };

  var _getGeometryAndExtent2 = this.getGeometryAndExtentFromFeatures(features),
      geometry = _getGeometryAndExtent2.geometry,
      extent = _getGeometryAndExtent2.extent;

  var highlight = options.highlight;

  if (highlight && extent) options.highLightGeometry = geometry;
  return extent && this.zoomToExtent(extent, options) || Promise.resolve();
};

/**
 * @param   { ol.extent }                                          extent
 * @param   {{ force?: boolean, highLightGeometry?: ol.geometry }} [options={}]
 * @returns { Promise<void> }
 */
proto.zoomToExtent = function (extent) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  this.goToRes(ol.extent.getCenter(extent), this.getResolutionForZoomToExtent(extent, { force: options.force || false }));
  if (options.highLightGeometry) {
    return this.highlightGeometry(options.highLightGeometry, { zoom: false, duration: options.duration });
  }
  return Promise.resolve();
};

proto.zoomToProjectInitExtent = function () {
  this.zoomToExtent(this.project.state.initextent);
};

/**
 * End zoom methods
 */

proto.compareExtentWithProjectMaxExtent = function (extent) {
  var projectExtent = this.project.state.extent;
  var inside = ol.extent.containsExtent(projectExtent, extent);
  return inside ? extent : projectExtent;
};

/**
 * @param   {[ minx: number, miny: number, maxx: number, maxy: number ]} extent
 * @param   {{ force?: boolean }} [options] if force is undefined calculate `resolution` from given `extent`
 * @returns {number} resolution (in pixels?)
 */
proto.getResolutionForZoomToExtent = function (extent) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { force: false };

  var map = this.getMap();

  // if outside project extent, return max resolution
  if (false === ol.extent.containsExtent(this.project.state.extent, extent)) {
    return map.getView().getResolutionForExtent(this.project.state.extent, map.getSize());
  }

  var extentResolution = map.getView().getResolutionForExtent(extent, map.getSize()); // resolution of request extent

  // retrive resolution from given `extent`
  if (true === options.force) {
    return extentResolution;
  }

  // calculate main resolutions from map
  var resolution = void 0;
  var currentResolution = map.getView().getResolution();
  var maxResolution = (0, _getResolutionFromScale.getResolutionFromScale)(_constant.MAP_SETTINGS.ZOOM.maxScale, this.getMapUnits()); // max resolution of the map
  resolution = extentResolution > maxResolution ? extentResolution : maxResolution;
  resolution = currentResolution < resolution && currentResolution > extentResolution ? currentResolution : resolution;
  return resolution;
};

proto.goToBBox = function (bbox) {
  var epsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getEpsg();

  bbox = epsg === this.getEpsg() ? bbox : ol.proj.transformExtent(bbox, epsg, this.getEpsg());
  this.viewer.fit(this.compareExtentWithProjectMaxExtent(bbox));
};

proto.goToWGS84 = function (coordinates, zoom) {
  coordinates = ol.proj.transform(coordinates, 'EPSG:4326', this.project.state.crs.epsg);
  this.goTo(coordinates, zoom);
};

proto.extentToWGS84 = function (extent) {
  return ol.proj.transformExtent(extent, this.project.state.crs.epsg, 'EPSG:4326');
};

proto.getResolutionForMeters = function (meters) {
  var viewport = this.viewer.map.getViewport();
  return meters / Math.max(viewport.clientWidth, viewport.clientHeight);
};

var animatingHighlight = false;

/*
* geometries = array of geometries
* action: add, clear, remove :
*   - add: feature/features to selectionLayer. If selectionLayer doesn't exist create a  new vector layer.
*   - clear: remove selectionLayer
*   - remove: remove feature from selection layer. If no more feature are in selectionLayer it will be removed
* */
proto.setSelectionFeatures = function () {
  var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'add';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var feature = options.feature,
      color = options.color;

  if (color) {
    this.setDefaultLayerStyle('selectionLayer', {
      color: color
    });
  }
  var source = this.defaultsLayers.selectionLayer.getSource();
  switch (action) {
    case 'add':
      source.addFeature(feature);
      break;
    case 'remove':
      source.removeFeature(feature);
      break;
    case 'update':
      var addedFeature = source.getFeatureById(feature.getId());
      addedFeature.setGeometry(feature.getGeometry());
      break;
    case 'clear':
      source.clear();
      break;
  }
};

proto.clearSelectionFeatures = function () {
  this.defaultsLayers.selectionLayer.getSource().clear();
};

/**
 * @since 3.9.0
 */
proto.setSelectionLayerVisible = function () {
  var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.defaultsLayers.selectionLayer.setVisible(visible);
};

proto.highlightGeometry = function (geometryObj) {
  var _this29 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return new Promise(function (resolve, reject) {
    var color = options.color;

    _this29.clearHighlightGeometry();
    _this29.setDefaultLayerStyle('highlightLayer', {
      color: color
    });
    var zoom = typeof options.zoom === 'boolean' ? options.zoom : true;
    var hide = options.hide;
    if (hide) hide = typeof hide === 'function' ? hide : null;
    var customStyle = options.style;
    var defaultStyle = function defaultStyle(feature) {
      var styles = [];
      var geometryType = feature.getGeometry().getType();
      var style = (0, _createSelectedStyle.createSelectedStyle)({
        geometryType: geometryType,
        color: color,
        fill: false
      });
      styles.push(style);
      return styles;
    };
    var ANIMATION = _constant.MAP_SETTINGS.ANIMATION;

    var highlight = typeof options.highlight == 'boolean' ? options.highlight : true;
    var duration = options.duration || ANIMATION.duration;
    var geometry = void 0;
    if (geometryObj instanceof ol.geom.Geometry) geometry = geometryObj;else {
      var format = new ol.format.GeoJSON();
      geometry = format.readGeometry(geometryObj);
    }
    if (zoom) {
      var extent = geometry.getExtent();
      _this29.zoomToExtent(extent);
    }
    if (highlight) {
      var feature = new ol.Feature({
        geometry: geometry
      });
      var highlightLayer = _this29.defaultsLayers.highlightLayer;
      customStyle && highlightLayer.setStyle(customStyle);
      highlightLayer.getSource().addFeature(feature);
      if (hide) {
        var callback = function callback() {
          highlightLayer.getSource().clear();
          customStyle && highlightLayer.setStyle(defaultStyle);
          resolve();
        };
        hide(callback);
      } else if (duration) {
        if (duration !== Infinity) {
          animatingHighlight = true;
          setTimeout(function () {
            highlightLayer.getSource().clear();
            customStyle && highlightLayer.setStyle(defaultStyle);
            animatingHighlight = false;
            resolve();
          }, duration);
        }
      }
    } else resolve();
  });
};

proto.clearHighlightGeometry = function () {
  !animatingHighlight && this.defaultsLayers.highlightLayer.getSource().clear();
  this.resetDefaultLayerStyle('highlightLayer');
};

/**
 * Force to referesh map
 * @param options
 */
proto.refreshMap = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { force: true };

  this.updateMapLayers(options);
};

// called when layout (window) resize
proto.layout = function (_ref36) {
  var width = _ref36.width,
      height = _ref36.height;

  var is_hidden = width <= 0 || height <= 0;
  if (!this.viewer) {
    this.setupViewer(width, height);
    if (this.viewer) {
      this.setupControls();
      this.emit('ready');
    }
  } else {
    if (!is_hidden) {
      this.getMap().updateSize();
      this.state.hidemaps.forEach(function (hidemap) {
        return hidemap.map.updateSize();
      });
      this._updateMapView();
    }
  }
  this.setHidden(is_hidden);
  this._mapControls.length && this._updateMapControlsLayout({ width: width, height: height });
};

//remove BaseLayers
proto._removeBaseLayers = function () {
  var _this30 = this;

  Object.keys(this.mapBaseLayers).forEach(function (baseLayerId) {
    _this30.viewer.map.removeLayer(_this30.mapBaseLayers[baseLayerId].getOLLayer());
  });
};

// function to remove maplayers
proto._removeMapLayers = function () {
  var _this31 = this;

  this.getMapLayers().forEach(function (mapLayer) {
    _this31.unregisterMapLayerListeners(mapLayer);
    _this31.viewer.map.removeLayer(mapLayer.getOLLayer());
  });
  this._mapLayers = [];
};

proto.getMapBBOX = function () {
  return this.viewer.getBBOX();
};

proto._updateMapView = function () {
  var bbox = this.viewer.getBBOX();
  var resolution = this.viewer.getResolution();
  var center = this.viewer.getCenter();
  var size = this.getMap().getSize();
  this.updateMapView(bbox, resolution, center, size);
};

proto.getMapSize = function () {
  var map = this.viewer.map;
  return map.getSize();
};

proto.setInnerGreyCoverScale = function (scale) {
  this._drawShadow.scale = scale;
};

proto._resetDrawShadowInner = function () {
  this._drawShadow = {
    type: 'coordinate',
    outer: [],
    inner: [],
    scale: null,
    rotation: null
  };
};

proto.setInnerGreyCoverBBox = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var map = this.viewer.map;
  var type = options.type || 'coordinate';
  var inner = options.inner || null;
  var rotation = options.rotation;
  var scale = options.scale;
  var lowerLeftInner = void 0;
  var upperRightInner = void 0;
  if (inner) {
    switch (type) {
      case 'coordinate':
        lowerLeftInner = map.getPixelFromCoordinate([inner[0], inner[1]]);
        upperRightInner = map.getPixelFromCoordinate([inner[2], inner[3]]);
        break;
      case 'pixel':
        lowerLeftInner = [inner[0], inner[1]];
        upperRightInner = [inner[2], inner[3]];
        break;
    }
    var y_min = lowerLeftInner[1] * ol.has.DEVICE_PIXEL_RATIO;
    var x_min = lowerLeftInner[0] * ol.has.DEVICE_PIXEL_RATIO;
    var y_max = upperRightInner[1] * ol.has.DEVICE_PIXEL_RATIO;
    var x_max = upperRightInner[0] * ol.has.DEVICE_PIXEL_RATIO;
    this._drawShadow.inner[0] = x_min;
    this._drawShadow.inner[1] = y_min;
    this._drawShadow.inner[2] = x_max;
    this._drawShadow.inner[3] = y_max;
  }
  if (_.isNil(scale)) this._drawShadow.scale = this._drawShadow.scale || 1;else this._drawShadow.scale = scale;

  if (_.isNil(rotation)) this._drawShadow.rotation = this._drawShadow.rotation || 0;else this._drawShadow.rotation = rotation;

  this._drawShadow.outer && map.render();
};

// grey map precompose mapcompose
proto.startDrawGreyCover = function (message) {
  var _this32 = this;

  // after rendering the layer, restore the canvas context
  var map = this.viewer.map;
  var x_min = void 0,
      x_max = void 0,
      y_min = void 0,
      y_max = void 0,
      rotation = void 0,
      scale = void 0;
  this.stopDrawGreyCover();
  var postcompose = function postcompose(evt) {
    var ctx = evt.context;
    var size = _this32.getMap().getSize();
    // Inner polygon,must be counter-clockwise
    var height = size[1] * ol.has.DEVICE_PIXEL_RATIO;
    var width = size[0] * ol.has.DEVICE_PIXEL_RATIO;
    _this32._drawShadow.outer = [0, 0, width, height];
    ctx.restore();
    ctx.beginPath();
    // Outside polygon, must be clockwise
    ctx.moveTo(0, 0);
    ctx.lineTo(width, 0);
    ctx.lineTo(width, height);
    ctx.lineTo(0, height);
    ctx.lineTo(0, 0);
    ctx.closePath();
    // end external bbox (map is cover)
    if (_this32._drawShadow.inner.length) {
      ctx.save();
      x_min = _this32._drawShadow.inner[0];
      y_min = _this32._drawShadow.inner[3];
      x_max = _this32._drawShadow.inner[2];
      y_max = _this32._drawShadow.inner[1];
      rotation = _this32._drawShadow.rotation;
      scale = _this32._drawShadow.scale;
      // Inner polygon,must be counter-clockwise antiorario
      ctx.translate((x_max + x_min) / 2, (y_max + y_min) / 2);
      ctx.rotate(rotation * Math.PI / 180);
      ctx.moveTo(-((x_max - x_min) / 2), (y_max - y_min) / 2);
      ctx.lineTo((x_max - x_min) / 2, (y_max - y_min) / 2);
      ctx.lineTo((x_max - x_min) / 2, -((y_max - y_min) / 2));
      ctx.lineTo(-((x_max - x_min) / 2), -((y_max - y_min) / 2));
      ctx.lineTo(-((x_max - x_min) / 2), (y_max - y_min) / 2);
      ctx.closePath();
      // end inner bbox
    }
    ctx.fillStyle = 'rgba(0, 5, 25, 0.40)';
    ctx.fill();
    if (message) {
      ctx.font = "bold 25px Arial";
      ctx.fillStyle = "#ffffff";
      ctx.textAlign = "center";
      var arrayMessages = message.split('\n');
      for (var i = 0; i < arrayMessages.length; i++) {
        ctx.fillText(arrayMessages[i], width / 2, height / 2 + 30 * i);
      }
      //ctx.fillText(message,width/2, height/2);
    }
    ctx.restore();
  };
  this._greyListenerKey = map.on('postcompose', postcompose);
};

proto.stopDrawGreyCover = function () {
  var map = this.getMap();
  if (this._greyListenerKey) {
    ol.Observable.unByKey(this._greyListenerKey);
    this._greyListenerKey = null;
    this._drawShadow.inner.length && this._resetDrawShadowInner();
  }
  map.render();
};

proto.removeExternalLayers = function () {
  var _this33 = this;

  this._externalLayers.forEach(function (layer) {
    _this33.removeExternalLayer(layer.get('name'));
  });
  this._externalLayers = [];
};

proto.changeLayerVisibility = function (_ref37) {
  var id = _ref37.id,
      _ref37$external = _ref37.external,
      external = _ref37$external === undefined ? false : _ref37$external,
      visible = _ref37.visible;

  var layer = this.getLayerById(id);
  if (layer) {
    layer.setVisible(visible);
    this.emit('change-layer-visibility', { id: id, visible: visible });
  }
};

proto.changeLayerOpacity = function () {
  var _ref38 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref38.id,
      _ref38$opacity = _ref38.opacity,
      opacity = _ref38$opacity === undefined ? 1 : _ref38$opacity;

  var layer = this.getLayerById(id);
  layer && layer.setOpacity(opacity);
  this.emit('change-layer-opacity', { id: id, opacity: opacity });
};

proto.changeLayerMapPosition = function (_ref39) {
  var id = _ref39.id,
      _ref39$position = _ref39.position,
      position = _ref39$position === undefined ? _constant.MAP_SETTINGS.LAYER_POSITIONS.default : _ref39$position;

  var layer = this.getLayerById(id);
  switch (position) {
    case 'top':
      layer.setZIndex(this.layersCount);
      break;
    case 'bottom':
      layer.setZIndex(0);
      break;
  }
  this.emit('change-layer-position-map', { id: id, position: position });
};

/**
 * Remove external layer
 * 
 * @param name
 */
proto.removeExternalLayer = function (name) {
  var _this34 = this;

  var layer = this.getLayerByName(name);
  _gui2.default.getService('queryresults').unregisterVectorLayer(layer);
  this.viewer.map.removeLayer(layer);
  var type = layer._type || 'vector';
  _gui2.default.getService('catalog').removeExternalLayer({ name: name, type: type });
  if (type == 'wms') {
    this._externalMapLayers = this._externalMapLayers.filter(function (ext) {
      var found = ext.getId() === layer.id;
      if (found) _this34.unregisterMapLayerListeners(ext, layer.projectLayer);
      return !found;
    });
  }
  this._externalLayers = this._externalLayers.filter(function (ext) {
    return ext.get('id') !== layer.get('id');
  });
  this.unloadExternalLayer(layer);
  this.emit('remove-external-layer', name);
};

/**
 * Add external WMS layer to map
 * 
 * @param url
 * @param layers
 * @param name
 * @param projection
 * @param position
 * @returns {Promise<unknown>}
 */
proto.addExternalWMSLayer = function () {
  var _this35 = this;

  var _ref40 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      url = _ref40.url,
      layers = _ref40.layers,
      name = _ref40.name,
      _ref40$epsg = _ref40.epsg,
      epsg = _ref40$epsg === undefined ? this.getEpsg() : _ref40$epsg,
      _ref40$position = _ref40.position,
      position = _ref40$position === undefined ? _constant.MAP_SETTINGS.LAYER_POSITIONS.default : _ref40$position,
      opacity = _ref40.opacity,
      _ref40$visible = _ref40.visible,
      visible = _ref40$visible === undefined ? true : _ref40$visible;

  var projection = ol.proj.get(epsg);

  return new Promise(function (resolve, reject) {
    var _createWMSLayer = (0, _createWMSLayer2.createWMSLayer)({ name: name, url: url, layers: layers, projection: projection }),
        wmslayer = _createWMSLayer.wmslayer,
        olLayer = _createWMSLayer.olLayer;

    wmslayer.once('loadend', function () {
      resolve(wmslayer);
    });
    wmslayer.once('loaderror', function (err) {
      reject(err);
    });

    // add to map
    _this35.addExternalLayer(olLayer, { position: position, opacity: opacity, visible: visible });

    // register and dispatch layer add event
    _this35.addExternalMapLayer(wmslayer, false);
  });
};

/**
 *
 * Return extanla layers added to map
 * @returns {[]|*[]|T[]}
 */
proto.getExternalLayers = function () {
  return this._externalLayers;
};

proto.addExternalMapLayer = function (layer) {
  var projectLayer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  this._externalMapLayers.push(layer);
  this.registerMapLayerListeners(layer, projectLayer);
};

/**
 * Add an external layer to the map (eg. ZIP, KMZ, GPX, ...)
 * 
 * @param { ol.layer.Vector | ol.layer.Image | unknown } externalLayer
 * @param { Object }  options
 * @param { unknown } options.position
 * @param { number }  options.opacity
 * @param { boolean } options.visible
 * @param { unknown } options.crs
 * @param { unknown } options.type
 * @param { unknown } options.download
 * @param { string }  options.downloadUrl (since 3.8.3) an alternate external server url where to perfom download.
 * 
 * @returns { Promise<unknown> }
 */
proto.addExternalLayer = function () {
  var _ref41 = _asyncToGenerator(function* (externalLayer) {
    var _this36 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var vectorLayer = void 0,
        name = void 0,
        data = void 0,
        color = void 0,
        // <-- FIXME: this variable seems to be declared twice
    style = void 0,
        type = void 0,
        crs = void 0;

    var _options$position = options.position,
        position = _options$position === undefined ? _constant.MAP_SETTINGS.LAYER_POSITIONS.default : _options$position,
        _options$opacity = options.opacity,
        opacity = _options$opacity === undefined ? 1 : _options$opacity,
        _options$visible = options.visible,
        visible = _options$visible === undefined ? true : _options$visible;
    var map = this.viewer.map;

    var catalogService = _gui2.default.getService('catalog');
    var QueryResultService = _gui2.default.getService('queryresults');

    /**
     * EXTERNAL VECTOR LAYER
     */
    if (externalLayer instanceof ol.layer.Vector) {
      var _color = void 0;

      if (undefined === externalLayer.get('id')) {
        externalLayer.set('id', uniqueId());
      }

      vectorLayer = externalLayer;
      vectorLayer.filter = { // used by `selection` for query result purpose ?
        active: false // UNUSUED - it means not yet implemented?
      };
      vectorLayer.selection = {
        active: false,
        features: []
      };

      try {
        var _style = externalLayer.getStyle();
        _color = _style._g3w_options ? _style._g3w_options.color : 'blue'; //setted by geo utils create style function
      } catch (err) {
        _color = 'blue';
      }

      name = vectorLayer.get('name') || vectorLayer.get('id');
      type = 'vector';
      externalLayer = {
        id: externalLayer.get('id'),
        name: name,
        projectLayer: false,
        title: name,
        removable: true,
        external: true,
        crs: options.crs,
        type: options.type,
        _type: type,
        download: options.download || false,
        /**
         * An alternate (external) server url where to perfom download.
         * 
         * @example
         * 
         * ```js
         * GUI.getService('map').addExternalLayer(layer, {
         *   type: 'geojson',
         *   downloadUrl:  _<URL WHERE DOWNLOAD FILE>_
         * });
         * ```
         * 
         * @since 3.8.3
         */
        downloadUrl: options.downloadUrl,
        visible: visible,
        checked: true,
        position: position,
        opacity: opacity,
        color: _color,
        filter: vectorLayer.filter,
        selection: vectorLayer.selection,
        /**
         * @since 3.8.0
         */
        tochighlightable: false
      };
    }

    /**
     * EXTERNAL IMAGE LAYER
     */
    else if (externalLayer instanceof ol.layer.Image) {
        type = 'wms';
        name = externalLayer.get('name');
        externalLayer.id = externalLayer.get('id');
        externalLayer.removable = true;
        externalLayer.projectLayer = false;
        externalLayer.name = name;
        externalLayer.title = name;
        externalLayer._type = type;
        externalLayer.opacity = opacity;
        externalLayer.position = position;
        externalLayer.external = true;
        externalLayer.checked = visible;
      }

      /**
       * UKNOWN EXTERNAL LAYER TYPE ?
       */
      else {
          name = externalLayer.name;
          type = externalLayer.type;
          crs = externalLayer.crs;
          data = externalLayer.data;
          color = externalLayer.color;
        }

    var loadExternalLayer = function loadExternalLayer(layer, type) {
      // skip if is not a valid layer
      if (!layer) {
        return Promise.reject();
      }

      var extent = void 0;

      if (type === 'vector') {
        var features = layer.getSource().getFeatures();
        if (features.length) {
          var id = 0;
          // add id value
          features.forEach(function (feature) {
            feature.setId(id++);
          });
          externalLayer.geometryType = features[0].getGeometry().getType();
          externalLayer.selected = false;
        }
        extent = layer.getSource().getExtent();
        externalLayer.bbox = { minx: extent[0], miny: extent[1], maxx: extent[2], maxy: extent[3] };
      }

      layer.set('position', position);
      layer.setOpacity(opacity);
      layer.setVisible(visible);

      map.addLayer(layer);

      _this36._externalLayers.push(layer);

      QueryResultService.registerVectorLayer(layer);

      catalogService.addExternalLayer({ layer: externalLayer, type: type });

      if (extent) {
        map.getView().fit(extent);
      }

      _this36.loadExternalLayer(layer);

      return Promise.resolve(layer);
    };

    var layer = this.getLayerByName(name);

    if (!layer) {
      switch (type) {
        case 'vector':
          return loadExternalLayer(vectorLayer, type);
        case 'wms':
          return loadExternalLayer(externalLayer, type);
        default:
          vectorLayer = yield (0, _createVectorLayerFromFile.createVectorLayerFromFile)({ name: name, type: type, crs: crs, mapCrs: mapCrs, data: data, style: style });
          return loadExternalLayer(vectorLayer);
      }
    } else {
      _gui2.default.notify.warning("layer_is_added", false);
    }
  });

  return function (_x60) {
    return _ref41.apply(this, arguments);
  };
}();

proto.setExternalLayerStyle = function (color, field) {
  color = color.rgba;
  color = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
  var defaultStyle = {
    'Point': new ol.style.Style({
      image: new ol.style.Circle({
        fill: new ol.style.Fill({ color: color }),
        radius: 5,
        stroke: new ol.style.Stroke({ color: color, width: 1 })
      })
    }),
    'LineString': new ol.style.Style({
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    }),
    'Polygon': new ol.style.Style({
      fill: new ol.style.Fill({ color: 'rgba(255,255,255,0.5)' }),
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    }),
    'MultiPoint': new ol.style.Style({
      image: new ol.style.Circle({
        fill: new ol.style.Fill({ color: color }),
        radius: 5,
        stroke: new ol.style.Stroke({ color: color, width: 1 })
      })
    }),
    'MultiLineString': new ol.style.Style({
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    }),
    'MultiPolygon': new ol.style.Style({
      fill: new ol.style.Fill({ color: 'rgba(255,255,255,0.5)' }),
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    })
  };
  var styleFunction = function styleFunction(feature, resolution) {
    var func = feature.getStyleFunction();
    return func ? func.call(feature, resolution) : defaultStyle[feature.getGeometry().getType()];
  };
  return styleFunction;
};

/**
 * @since 3.8.3
 */
proto._handlePrint = function () {
  var _ref42 = _asyncToGenerator(function* (controlType) {
    // Start download
    var download_id = _application2.default.setDownload(true);
    try {
      var blobImage = yield this.createMapImage();
      if ('screenshot' === controlType) {
        saveAs(blobImage, 'map_' + Date.now() + '.png');
      } else {
        // GeoTIFF
        saveAs((yield (0, _getGeoTIFFfromServer.getGeoTIFFfromServer)({
          url: '/' + this.project.getType() + '/api/asgeotiff/' + this.project.getId() + '/',
          method: "POST",
          params: {
            image: blobImage,
            csrfmiddlewaretoken: this.getCookie('csrftoken'),
            bbox: this.getMapBBOX().toString()
          }
        })), 'map_' + Date.now() + '.tif');
      }
    } catch (err) {
      _gui2.default.showUserMessage({
        type: 'SecurityError' === err.name ? 'warning' : 'alert',
        message: 'SecurityError' === err.name ? 'mapcontrols.screenshot.securityError' : 'mapcontrols.screenshot.error',
        autoclose: false
      });
    }
    // End download
    _application2.default.setDownload(false, download_id);
    return true;
  });

  return function (_x61) {
    return _ref42.apply(this, arguments);
  };
}();

/**
 * Wrapper for native Open Layers controls 
 */
function OLControl(type) {
  function _ctor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


    this._control = null;
    this.positionCode = options.position || 'tl';

    switch (options.type) {
      case 'zoom':
        this._control = new ol.control.Zoom(options);break;
      case 'zoomtoextent':
        this._control = new ol.control.ZoomToExtent(options);break;
      case 'scaleline':
        this._control = new ol.control.ScaleLine(options);break;
      case 'overview':
        this._control = new ol.control.OverviewMap(options);break;
    }

    $(this._control.element).addClass("ol-control-" + this.positionCode);

    this.offline = true;

    /**
     * @returns { ol.control }
     */
    this.getOlControl = function () {
      return this._control;
    };

    this.getPosition = function (pos) {
      pos = pos || this.positionCode;
      return {
        top: pos.indexOf('t') > -1 ? true : false,
        left: pos.indexOf('l') > -1 ? true : false
      };
    };

    this.layout = function (map) {
      // skip when ..
      if (!map) {
        return;
      }
      var previusControls = $(map.getViewport()).find('.ol-control-' + this.positionCode);
      if (previusControls.length) {
        var position = this.getPosition();
        var previusControl = previusControls.last();
        var offset = position.left ? previusControl.position().left : previusControl.position().right;
        var hWhere = position.left ? 'left' : 'right';
        var hOffset = $(this.element).position()[hWhere] + offset + previusControl[0].offsetWidth + 2;
        $(this.element).css(hWhere, hOffset + 'px');
      }
    };

    this.changelayout = function () {};

    this.showHide = function () {
      $(this.element).toggle();
    };

    this.setMap = function (map) {
      this.layout(map);
      this._control.setMap(map);
    };

    ol.control.Control.call(this, {
      element: this._control.element
    });
  };
  ol.inherits(_ctor, ol.control.Control);
  return _ctor;
}

/**
 * Wrapper for custom Vue's SFC controls
 * 
 * @since 3.9.0
 */
function VueControl(type) {
  function _ctor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var opts = { name: type };
    var project = _gui2.default.getService('map').getProject();
    var component = void 0;

    switch (type) {

      /** ORIGINAL SOURCE: src/app/g3w-ol/controls/zoomhistorycontrol.js@v3.8.0 */
      case 'zoomhistory':
        component = Vue.extend(_MapControlZoomHistory2.default);
        opts.element = new component();
        opts.tipLabel = "sdk.mapcontrols.addlayer.tooltip";
        break;

      /** ORIGINAL SOURCE: src/app/g3w-ol/controls/geocodingcontrol.js@v3.8.0 */
      case 'nominatim':
      case 'geocoding':
        component = Vue.extend(_MapControlGeocoding2.default);
        opts.element = new component({
          propsData: _extends({}, options.config, { // pass configuration from server
            placeholder: (undefined !== options.placeholder ? options.placeholder : "mapcontrols.geocoding.placeholder") || 'Città, indirizzo ... ',
            noresults: (undefined !== options.noresults ? options.noresults : "mapcontrols.geocoding.noresults") || 'Nessun risultato ',
            // notresponseserver:     (undefined !== options.notresponseserver ? options.notresponseserver : "mapcontrols.geocoding.notresponseserver")  || 'Il server non risponde', // <-- TODO ?
            limit: options.limit || 5,
            viewbox: undefined !== options.bbox ? options.bbox : project.state.initextent || project.state.extent,
            mapCrs: undefined !== options.mapCrs ? options.mapCrs : project.state.crs.epsg
          })
        });
        opts.offline = false;

        break;
    }
    opts.element = opts.element.$mount().$el;
    Control.call(this, opts);
  }
  ol.inherits(_ctor, Control);
  return _ctor;
}

module.exports = {

  MapService: MapService,

  /** ORIGINAL SOURCE: src/app/gui/map/control/factory.js@v3.8.0 */
  ControlsFactory: {
    create: function create() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return CONTROLS[options.type] ? new CONTROLS[options.type](options) : undefined;
    }
  }
};

},{"app/constant":5,"components/MapControlGeocoding.vue":211,"components/MapControlZoomHistory.vue":212,"core/g3wobject":8,"core/layers/map/wmslayer":26,"core/layers/vectorlayer":38,"g3w-ol/controls/addlayers":44,"g3w-ol/controls/areacontrol":45,"g3w-ol/controls/control":47,"g3w-ol/controls/geolocationcontrol":48,"g3w-ol/controls/geoscreenshotcontrol":49,"g3w-ol/controls/interactioncontrol":50,"g3w-ol/controls/lengthcontrol":51,"g3w-ol/controls/mousepositioncontrol":53,"g3w-ol/controls/onclickcontrol":54,"g3w-ol/controls/querybboxcontrol":55,"g3w-ol/controls/querybydrawpolygoncontrol":56,"g3w-ol/controls/querybypolygoncontrol":57,"g3w-ol/controls/querycontrol":58,"g3w-ol/controls/resetcontrol":59,"g3w-ol/controls/scalecontrol":60,"g3w-ol/controls/screenshotcontrol":61,"g3w-ol/controls/streetviewcontrol":62,"g3w-ol/controls/zoomboxcontrol":63,"g3w-ol/layers/bases":70,"services/application":310,"services/data":317,"services/gui":319,"store/map-controls":332,"store/map-layers":333,"store/projects":335,"utils":419,"utils/createSelectedStyle":369,"utils/createVectorLayerFromFile":373,"utils/createWMSLayer":375,"utils/getGeoTIFFfromServer":398,"utils/getMapLayersByFilter":401,"utils/getResolutionFromScale":409,"utils/getScaleFromResolution":410}],116:[function(require,module,exports){
var _Map = require('components/Map.vue');

var vueComponentOptions = _interopRequireWildcard(_Map);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    merge = _require.merge,
    inherit = _require.inherit;

var Component = require('gui/component/component');

var _require2 = require('gui/map/mapservice'),
    MapService = _require2.MapService;

// interanl registration


var InternalComponent = Vue.extend(vueComponentOptions);

Vue.component('g3w-map', vueComponentOptions);

function MapComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.id = "map-component";
  this.title = "Map Component";
  var target = options.target || "map";
  var maps_container = options.maps_container || "g3w-maps";
  options.target = target;
  options.maps_container = maps_container;
  var service = new MapService(options);
  this.setService(service);
  merge(this, options);
  this.internalComponent = new InternalComponent({
    service: service,
    target: target,
    maps_container: maps_container
  });
  /**
   * add Vue get cookie method
   *
   */
  service.getCookie = this.internalComponent.$cookie.get;
}

inherit(MapComponent, Component);

var proto = MapComponent.prototype;

proto.layout = function (width, height) {
  $('#' + this.target).height(height);
  $('#' + this.target).width(width);
  this._service.layout({ width: width, height: height });
};

module.exports = MapComponent;

},{"components/Map.vue":208,"gui/component/component":77,"gui/map/mapservice":115,"utils":419}],117:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var ProjectMetadataComponent = require('gui/metadata/vue/components/project/project');

var METADATAGROUPS = {
  general: ['title', 'name', 'description', 'abstract', 'keywords', 'fees', 'accessconstraints', 'contactinformation', 'wms_url'],
  spatial: ['crs', 'extent'],
  layers: ['layers']
};

function MetadataService() {
  this.content = null;
  this.show = false;
  this.state = {
    name: '',
    groups: {}
  };
  this._buildProjectGroupMetadata();
}

inherit(MetadataService, G3WObject);

var proto = MetadataService.prototype;

proto._buildProjectGroupMetadata = function () {
  var project = _projects2.default.getCurrentProject().getState();
  this.state.name = project.title;
  var groups = {};
  Object.entries(METADATAGROUPS).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        groupName = _ref2[0],
        value = _ref2[1];

    groups[groupName] = {};
    value.forEach(function (field) {
      var fieldValue = project.metadata && project.metadata[field] ? project.metadata[field] : project[field];
      if (!!fieldValue) {
        groups[groupName][field] = {
          label: ['sdk', 'metadata', 'groups', groupName, 'fields', field].join('.'),
          value: fieldValue
        };
      }
    });
  });
  this.state.groups = groups;
};

proto.getProjectMetadata = function () {
  return this.state;
};

proto.getLayersMetadata = function () {
  return this.state.groups.layers;
};

proto.getLayerMetadata = function (id) {
  var layerMetadata = this.state.groups.layers.filter(function (layer) {
    return layer.id === id;
  });
  return layerMetadata[0];
};

proto.showMetadata = function (bool) {
  this.show = bool;
  if (this.show) {
    this.content = new ProjectMetadataComponent({
      state: this.getProjectMetadata(),
      service: this
    });
    _gui2.default.setContent({
      content: this.content,
      title: "sdk.metadata.title",
      perc: 100
    });
    this.show = true;
  } else _gui2.default.closeContent();
};

proto.reload = function () {
  this.emit('reload');
  this._buildProjectGroupMetadata();
};

module.exports = MetadataService;

},{"core/g3wobject":8,"gui/metadata/vue/components/project/project":118,"services/gui":319,"store/projects":335,"utils":419}],118:[function(require,module,exports){
var _MetadataProject = require('components/MetadataProject.vue');

var _MetadataProject2 = _interopRequireDefault(_MetadataProject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');

function ProjectMetadataComponent() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$state = _ref.state,
      state = _ref$state === undefined ? {} : _ref$state,
      service = _ref.service;

  base(this);
  var vueComponent = Vue.extend(_MetadataProject2.default);
  this.setService(service);
  this.internalComponent = new vueComponent({
    state: state
  });
  this.layout = function () {};
}

inherit(ProjectMetadataComponent, Component);

module.exports = ProjectMetadataComponent;

},{"components/MetadataProject.vue":218,"gui/component/component":77,"utils":419}],119:[function(require,module,exports){
var _Metadata = require('components/Metadata.vue');

var vueComponentOptions = _interopRequireWildcard(_Metadata);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');
var MetadataService = require('gui/metadata/metadataservice');

var InternalComponent = Vue.extend(vueComponentOptions);

var MetadataComponent = function MetadataComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = "sdk.metadata.title";
  var service = options.service || new MetadataService(options);
  this.setService(service);
  this._service.on('reload', function () {
    _this.setOpen(false);
  });
  this.setInternalComponent = function () {
    this.internalComponent = new InternalComponent({
      service: service
    });
    this.internalComponent.state = service.state;
    return this.internalComponent;
  };
  this._setOpen = function (bool) {
    this._service.showMetadata(bool);
  };
  _gui2.default.on('closecontent', function () {
    _this.state.open = false;
  });
};

inherit(MetadataComponent, Component);

module.exports = MetadataComponent;

},{"components/Metadata.vue":216,"gui/component/component":77,"gui/metadata/metadataservice":117,"services/gui":319,"utils":419}],120:[function(require,module,exports){
var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    inherit = _require.inherit,
    resolvedValue = _require.resolve;

var G3WObject = require('core/g3wobject');

var Panel = function Panel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.id = options.id || null;
  this.title = options.title || '';
  this.internalPanel = options.panel || null;
  this.service = options.service;
};

inherit(Panel, G3WObject);

var proto = Panel.prototype;

proto.getId = function () {
  return this.id;
};

proto.getTitle = function () {
  return this.title;
};

proto.getService = function () {
  return this.service;
};

proto.setService = function (service) {
  this.service = service;
};

proto.getInternalPanel = function () {
  return this.internalPanel;
};

proto.setInternalPanel = function (internalPanel) {
  this.internalPanel = internalPanel;
};

proto.show = function () {
  _gui2.default.showPanel(this);
};

proto.close = function () {
  _gui2.default.closePanel();
};

proto.mount = function (parent) {
  var panel = this.internalPanel;
  var iCinstance = panel.$mount();
  $(parent).append(iCinstance.$el);
  iCinstance.$nextTick(function () {
    $(parent).localize();
    panel.onShow && panel.onShow();
  });
  return resolvedValue(true);
};

proto.unmount = function () {
  var panel = this.internalPanel;
  var d = $.Deferred();
  panel.$destroy(true);
  $(panel.$el).remove();
  panel.onClose && panel.onClose();
  this.internalComponent = null;
  d.resolve();
  return d.promise();
};

proto.onResize = function (parentWidth, parentHeight) {};

module.exports = Panel;

},{"core/g3wobject":8,"services/gui":319,"utils":419}],121:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _getScaleFromResolution = require('utils/getScaleFromResolution');

var _getResolutionFromScale = require('utils/getResolutionFromScale');

var _getMetersFromDegrees = require('utils/getMetersFromDegrees');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    downloadFile = _require.downloadFile,
    convertObjectToUrlParams = _require.convertObjectToUrlParams;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var G3WObject = require('core/g3wobject');
var PrintPage = require('gui/print/vue/printpage');

/*
 http://localhost/fcgi-bin/qgis_mapserver/qgis_mapserv.fcgi
  ?MAP=/home/marco/geodaten/projekte/composertest.qgs
  &SERVICE=WMS&VERSION=1.3.0
  &REQUEST=GetPrint
  &TEMPLATE=Composer 1
  &map0:extent=693457.466131,227122.338236,700476.845177,230609.807051
  &BBOX=693457.466131,227122.338236,700476.845177,230609.807051
  &CRS=EPSG:21781
  &WIDTH=1467
  &HEIGHT=729
  &LAYERS=layer0,layer1
  &STYLES=,
  &FORMAT=pdf
  &DPI=300
  &TRANSPARENT=true

 In detail, the following parameters can be used to set properties for composer maps:

 <mapname>:EXTENT=<xmin,ymin,xmax, ymax> //mandatory
 <mapname>:ROTATION=<double> //optional, defaults to 0
 <mapname>:SCALE=<double> //optional. Forces scale denominator as server and client may have different scale calculations
 <mapname>:LAYERS=<comma separated list with layer names> //optional. Defaults to all layer in the WMS request
 <mapname>:STYLES=<comma separated list with style names> //optional
 <mapname>:GRID_INTERVAL_X=<double> //set the grid interval in x-direction for composer grids
 <mapname>:GRID_INTERVAL_Y=<double> //set the grid interval in x-direction for composer grids
 */

/**
 * @deprecated since 3.9.1 will be removed in 4.x
 * 
 * ORIGINAL SOURCE: src\app\core\print\printservice.js@3.9.0
 */
var PRINT_UTILS = {
  /**
   * @param { Object } opts
   * @param opts.rotation,
   * @param opts.dpi
   * @param opts.format
   * @param opts.template
   * @param { Array } opts.maps
   * @param { Array } opts.labels
   * @param opts.is_maps_preset_theme
   * @param { 'GET' | 'POST' } method
   */
  print: function print() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

    var store = _projects2.default.getCurrentProject().getLayersStore();
    var layers = store.getLayers({ PRINTABLE: { scale: opts.scale }, SERVERTYPE: 'QGIS' }).reverse(); // reverse order is important

    // skip when ..
    if (!layers.length) {
      return Promise.resolve({ layers: false });
    }

    var LAYERS = layers.map(function (l) {
      return l.getPrintLayerName();
    }).join();

    return PRINT_UTILS[method]({
      url: store.getWmsUrl(),
      mime_type: { pdf: 'application/pdf', jpg: 'image/jpeg' }[opts.format],
      params: _extends({
        SERVICE: 'WMS',
        VERSION: '1.3.0',
        REQUEST: 'GetPrint',
        TEMPLATE: opts.template,
        DPI: opts.dpi,
        STYLES: layers.map(function (l) {
          return l.getStyle();
        }).join(','),
        LAYERS: opts.is_maps_preset_theme ? undefined : LAYERS,
        FORMAT: opts.format,
        CRS: store.getProjection().getCode(),
        filtertoken: _applicationState2.default.tokens.filtertoken
      }, (opts.maps || []).reduce(function (params, map) {
        params[map.name + ':SCALE'] = map.scale;
        params[map.name + ':EXTENT'] = map.extent;
        params[map.name + ':ROTATION'] = opts.rotation;
        params[map.name + ':LAYERS'] = opts.is_maps_preset_theme && undefined === map.preset_theme ? LAYERS : undefined;
        return params;
      }, {}), (opts.labels || []).reduce(function (params, label) {
        params[label.id] = label.text;
        return params;
      }, {}))
    });
  },

  /**
   * @param { Object } opts
   * @param opts.field
   * @param opts.values
   * @param opts.template
   * @param opts.download
   * @param { 'GET' | 'POST' } method
   */
  printAtlas: function printAtlas() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

    var store = _projects2.default.getCurrentProject().getLayersStore();
    var multi = opts.values.length > 1;
    return PRINT_UTILS[method]({
      url: store.getWmsUrl(),
      mime_type: 'application/pdf',
      params: {
        SERVICE: 'WMS',
        VERSION: '1.3.0',
        REQUEST: 'GetPrintAtlas',
        EXP_FILTER: opts.field + (multi ? ' IN (' : '=') + opts.values.map(function (v) {
          return '\'' + v + '\'';
        }).join() + (multi ? ')' : ''),
        TEMPLATE: opts.template,
        filtertoken: _applicationState2.default.tokens.filtertoken,
        DOWNLOAD: opts.download ? 1 : undefined
      }
    });
  },


  /**
   * @param { Object } opts
   * @param opts.url
   * @param opts.params
   * @param opts.mime_type
   * @return {Promise<{mime_type, layers: boolean, url: string}>}
   * @constructor
   */
  POST: function () {
    var _ref2 = _asyncToGenerator(function* (_ref) {
      var url = _ref.url,
          params = _ref.params,
          mime_type = _ref.mime_type;

      var response = yield fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
        body: convertObjectToUrlParams(params)
      });
      if (!response.ok) {
        //@TODO Need to translate
        throw new Error(500 === response.status ? 'Internal Server Error' : 'Request Failed');
      }
      return {
        mime_type: mime_type,
        layers: true,
        url: URL.createObjectURL((yield response.blob()))
      };
    });

    function POST(_x5) {
      return _ref2.apply(this, arguments);
    }

    return POST;
  }(),

  /**
   * @param { Object } opts
   * @param opts.url
   * @param opts.params
   * @param opts.mime_type
   * @return {Promise<unknown>}
   * @constructor
   */
  GET: function GET(_ref3) {
    var url = _ref3.url,
        params = _ref3.params,
        mime_type = _ref3.mime_type;

    return new Promise(function (resolve, reject) {
      resolve({
        url: url + '?' + convertObjectToUrlParams(params),
        layers: true,
        mime_type: mime_type
      });
    });
  },


  /**
   * Get wms url for current project
   * @returns {*}
   */
  getUrl: function getUrl() {
    return _projects2.default.getCurrentProject().getLayersStore().getWmsUrl();
  }
};

function PrintComponentService() {
  base(this);

  /** @deprecated since 3.9.1 will be removed in 4.x */
  this.printService = PRINT_UTILS;

  this._initialized = false;
  this.state = {
    loading: false
  };
  this._moveMapKeyEvent = null;
  this._page = null;
  this._mapService = null;
  this._map = null;
  this._mapUnits;
  this._scalesResolutions = {};

  this.init = function () {
    this._project = _projects2.default.getCurrentProject();
    this.state.print = this._project.getPrint() || [];
    this.state.visible = this.state.print.length > 0;
    this.state.isShow = false;
    this.state.url = null;
    this.state.output = {
      url: null,
      method: this._project.getOwsMethod(),
      layers: true,
      format: null,
      loading: false,
      type: null
    };
    this.state.printextent = {
      minx: [0, 0],
      miny: [0, 0],
      maxx: [0, 0],
      maxy: [0, 0]
    };
    this.state.visible && this.setInitState();
  };
}

inherit(PrintComponentService, G3WObject);

var proto = PrintComponentService.prototype;

/**
 *
 */
proto.setInitState = function () {
  this.state.template = this.state.print[0].name;
  this.state.atlas = this.state.print[0].atlas;
  this.state.atlasValues = [];
  this.state.rotation = 0;
  this.state.inner = [0, 0, 0, 0];
  this.state.center = null;
  this.state.size = null;
  this.state.scale = _constant.PRINT_SCALES;
  this.state.scala = null;
  this.state.dpis = _constant.PRINT_RESOLUTIONS;
  this.state.dpi = _constant.PRINT_RESOLUTIONS[0];
  this.state.formats = _constant.PRINT_FORMATS;
  this.state.output.format = _constant.PRINT_FORMATS[0].value;
  this.state.maps = this.state.print[0].maps;
  // label section
  this.state.labels = this.state.print[0].labels;
};

/**
 *
 */
proto.changeTemplate = function () {
  var _this = this;

  if (!this.state.template) {
    return;
  }
  var isPreviousAtlas = this.state.atlas;

  var _state$print$find = this.state.print.find(function (print) {
    return print.name === _this.state.template;
  }),
      atlas = _state$print$find.atlas,
      maps = _state$print$find.maps,
      labels = _state$print$find.labels;

  this.state.maps = maps;
  this.state.atlas = atlas;
  this.state.labels = labels;
  this.state.atlasValues = [];
  this.state.atlas ? this._clearPrint() : isPreviousAtlas ? this.showPrintArea(true) : this._setPrintArea();
};

/**
 * On change scala set print area
 */
proto.changeScale = function () {
  this.state.scala && this._setPrintArea();
};

/**
 * On change rotation, rotate print area
 */
proto.changeRotation = function () {
  this._mapService.setInnerGreyCoverBBox({
    rotation: this.state.rotation
  });
};

/**
 *
 * @returns {string}
 * @private
 */
proto._getPrintExtent = function () {
  var _ref4 = [].concat(_toConsumableArray(this.state.printextent.lowerleft), _toConsumableArray(this.state.printextent.upperright)),
      minx = _ref4[0],
      miny = _ref4[1],
      maxx = _ref4[2],
      maxy = _ref4[3];

  return (this._mapService.isAxisOrientationInverted() ? [miny, minx, maxy, maxx] : [minx, miny, maxx, maxy]).join();
};

/**
 *
 * @param extent
 * @returns {string}
 */
proto.getOverviewExtent = function () {
  var extent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var xmin = extent.xmin,
      xmax = extent.xmax,
      ymin = extent.ymin,
      ymax = extent.ymax;

  return (this._mapService.isAxisOrientationInverted() ? [ymin, xmin, ymax, xmax] : [xmin, ymin, xmax, ymax]).join();
};

/**
 *
 * @returns {{template, maps: {extent: *, name: *, preset_theme: *, scale: *|null}[], rotation, format, scale: (null|*), is_maps_preset_theme: boolean, dpi: (number|*), labels}}
 * @private
 */
proto._getOptionsPrint = function () {
  var _this2 = this;

  var is_maps_preset_theme = false;
  var maps = this.state.maps.map(function (map) {
    is_maps_preset_theme = is_maps_preset_theme || undefined !== map.preset_theme;
    return {
      name: map.name,
      preset_theme: map.preset_theme,
      scale: map.overview ? map.scale : _this2.state.scala,
      extent: map.overview ? _this2.getOverviewExtent(map.extent) : _this2._getPrintExtent()
    };
  });

  return {
    rotation: this.state.rotation,
    dpi: this.state.dpi,
    template: this.state.template,
    maps: maps,
    scale: this.state.scala,
    format: this.state.output.format,
    labels: this.state.labels,
    is_maps_preset_theme: is_maps_preset_theme
  };
};

/**
 *
 */
proto.setPrintAreaAfterCloseContent = function () {
  this._map.once('postrender', this._setPrintArea.bind(this));
  this.stopLoading();
};

/**
 *
 * @returns {Promise<unknown>}
 */
proto.print = function () {
  var _this3 = this;

  return new Promise(function (resolve, reject) {
    //disable sidebar
    _gui2.default.disableSideBar(true);
    if (_this3.state.atlas) {
      var caller_download_id = _application2.default.setDownload(true);
      _this3.state.loading = true;
      _this3.printService.printAtlas({
        template: _this3.state.template,
        field: _this3.state.atlas.field_name || '$id',
        values: _this3.state.atlasValues,
        download: true
      }).then(function (_ref5) {
        var url = _ref5.url;

        downloadFile({
          url: url,
          filename: _this3.state.template,
          mime_type: 'application/pdf'
        }).then(resolve).catch(function (error) {
          _this3.showError(error);
          reject();
        }).finally(function () {
          _this3.state.loading = false;
          _application2.default.setDownload(false, caller_download_id);
          _gui2.default.disableSideBar(false);
        });
      });
    } else {
      _this3.state.output.url = null;
      _this3.state.output.layers = true;
      _this3._page = new PrintPage({
        service: _this3
      });

      _gui2.default.setContent({
        content: _this3._page,
        title: 'print',
        perc: 100
      });

      _this3.printService.print(_this3._getOptionsPrint(), _this3.state.output.method).then(function (data) {
        _this3.state.output.url = data.url;
        _this3.state.output.layers = data.layers;
        _this3.state.output.mime_type = data.mime_type;
        resolve();
      }).catch(function (err) {
        _this3.showError();
        reject(err);
      }).finally(function () {
        // in case of no layers
        if (!_this3.state.output.layers) {
          _gui2.default.disableSideBar(false);
        }
      });
    }
  });
};

/**
 * Set loading
 */
proto.startLoading = function () {
  this.state.output.loading = true;
};

/**
 *Stop Loading
 */
proto.stopLoading = function () {
  this.state.output.loading = false;
};

/**
 *
 * @param error
 */
proto.showError = function (error) {
  _gui2.default.notify.error(error || t("info.server_error"));
  _gui2.default.closeContent();
};

/**
 *
 * @private
 */
proto._calculateInternalPrintExtent = function () {
  var resolution = this._map.getView().getResolution();
  var scala = parseFloat(this.state.scala);

  var _state$maps$find = this.state.maps.find(function (map) {
    return !map.overview;
  }),
      height = _state$maps$find.h,
      width = _state$maps$find.w;

  var resolutionInMeters = this._mapService.getMapUnits() === 'm' ? resolution : (0, _getMetersFromDegrees.getMetersFromDegrees)(resolution);
  var w = width / 1000.0 * scala / resolutionInMeters;
  var h = height / 1000.0 * scala / resolutionInMeters;
  // get current map center ( in pixel)
  var center = [this.state.size[0] / 2, // X
  this.state.size[1] / 2 // Y
  ];
  // Calculate the inner bbox in pixel
  var xmin = center[0] - w / 2;
  var ymin = center[1] - h / 2;
  var xmax = center[0] + w / 2;
  var ymax = center[1] + h / 2;

  this.state.printextent.lowerleft = this._map.getCoordinateFromPixel([xmin, ymax]) ? this._map.getCoordinateFromPixel([xmin, ymax]) : this.state.printextent.lowerleft;

  this.state.printextent.upperright = this._map.getCoordinateFromPixel([xmax, ymin]) ? this._map.getCoordinateFromPixel([xmax, ymin]) : this.state.printextent.upperright;

  this.state.inner = [xmin, ymax, xmax, ymin];
};

/**
 *
 * @private
 */
proto._setPrintArea = function () {
  this.state.size = this._map.getSize();
  var resolution = this._map.getView().getResolution();
  this.state.currentScala = (0, _getScaleFromResolution.getScaleFromResolution)(resolution, this._mapUnits);
  this.state.center = this._map.getView().getCenter();

  this._calculateInternalPrintExtent();
  this._mapService.setInnerGreyCoverBBox({
    type: 'pixel',
    inner: this.state.inner,
    rotation: this.state.rotation
  });
};

/**
 *
 * @param reset
 * @private
 */
proto._clearPrint = function () {
  var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  ol.Observable.unByKey(this._moveMapKeyEvent);
  this._moveMapKeyEvent = null;
  this._mapService.stopDrawGreyCover();
};

/**
 *
 * @param maxResolution
 * @private
 */
proto._setAllScalesBasedOnMaxResolution = function (maxResolution) {
  var _this4 = this;

  var resolution = maxResolution;
  var mapScala = (0, _getScaleFromResolution.getScaleFromResolution)(resolution, this._mapUnits);
  var orderScales = _.orderBy(this.state.scale, ['value'], ['desc']);
  var scale = [];
  var addedFirstHighestScale = false;
  var handleScala = function handleScala(scala) {
    scale.push(scala);
    resolution = (0, _getResolutionFromScale.getResolutionFromScale)(scala.value, _this4._mapUnits);
    _this4._scalesResolutions[scala.value] = resolution;
    resolution = resolution / 2;
  };
  orderScales.forEach(function (scala, index) {
    if (mapScala > scala.value) {
      if (!addedFirstHighestScale) {
        var higherScale = orderScales[index - 1];
        handleScala(higherScale);
        addedFirstHighestScale = true;
      }
      handleScala(scala);
    }
  });

  this.state.scale = scale;
};

/**
 *
 * @private
 */
proto._setInitialScalaSelect = function () {
  this.state.scala = this.state.scale[0].value;
  $('#scala').val(this.state.scala);
};

/**
 *
 * @param resolution
 * @private
 */
proto._setCurrentScala = function (resolution) {
  var _this5 = this;

  Object.entries(this._scalesResolutions).find(function (_ref6) {
    var _ref7 = _slicedToArray(_ref6, 2),
        scala = _ref7[0],
        res = _ref7[1];

    if (resolution <= res) {
      _this5.state.scala = scala;
      return true;
    }
  });
};

/**
 *
 * @private
 */
proto._setMoveendMapEvent = function () {
  this._moveMapKeyEvent = this._map.on('moveend', this._setPrintArea.bind(this));
};

/**
 *
 * @private
 */
proto._showPrintArea = function () {
  if (this.state.atlas === undefined) {
    this._setPrintArea();
    this._mapService.startDrawGreyCover();
  }
};

/**
 *
 * @private
 */
proto._initPrintConfig = function () {
  if (!this._initialized) {
    var maxResolution = this._map.getView().getMaxResolution();
    this._setAllScalesBasedOnMaxResolution(maxResolution);
    this._initialized = true;
  }
  var resolution = this._map.getView().getResolution();
  this._setCurrentScala(resolution);
};

/**
 *
 * @param bool
 */
proto.showPrintArea = function (bool) {
  var _this6 = this;

  // close content if open
  this.state.isShow = bool;
  _gui2.default.closeContent().then(function (mapComponent) {
    setTimeout(function () {
      _this6._mapService = mapComponent.getService();
      _this6._mapUnits = _this6._mapService.getMapUnits();
      _this6._mapService.getMap().once('postrender', function (evt) {
        _this6._map = evt.map;
        if (bool) {
          _this6._setMoveendMapEvent();
          _this6._initPrintConfig();
          _this6._showPrintArea();
        } else {
          _this6._clearPrint();
        }
      });
      _this6._mapService.getMap().renderSync();
    });
  });
};

/**
 *
 */
proto.reload = function () {
  var _this7 = this;

  this._project = _projects2.default.getCurrentProject();
  this._mapService = _gui2.default.getService('map');
  this._map = this._mapService.viewer.map;
  this.state.print = this._project.state.print || [];
  this.state.visible = this.state.print.length > 0;

  if (this.state.visible) {
    this.state.template = this.state.print[0].name;
    if (!this._initialized) {
      this.init();
    }
    this._initPrintConfig();
    this._mapService.on('changeviewaftercurrentproject', function () {
      var maxResolution = _this7._map.getView().getMaxResolution();
      _this7.state.scale = _constant.PRINT_SCALES;
      _this7._setAllScalesBasedOnMaxResolution(maxResolution);
    });
  } else {
    this._clearPrint();
  }
};

module.exports = {
  PrintComponentService: PrintComponentService,
  PRINT_UTILS: PRINT_UTILS
};

},{"app/constant":5,"core/g3wobject":8,"core/i18n/i18n.service":9,"gui/print/vue/printpage":123,"services/application":310,"services/gui":319,"store/application-state":328,"store/projects":335,"utils":419,"utils/getMetersFromDegrees":402,"utils/getResolutionFromScale":409,"utils/getScaleFromResolution":410}],122:[function(require,module,exports){
var _Print = require('components/Print.vue');

var vueComponentOptions = _interopRequireWildcard(_Print);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');

var _require2 = require('gui/print/printservice'),
    PrintComponentService = _require2.PrintComponentService;

function PrintComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = "print";
  this.vueComponent = vueComponentOptions;
  this.internalComponent = null;
  var service = options.service || new PrintComponentService();
  this.setService(service);
  // init service
  this._service.init();
  this.setInternalComponent = function () {
    var InternalComponent = Vue.extend(this.vueComponent);
    this.internalComponent = new InternalComponent({
      service: service
    });
    this.state.visible = service.state.visible;
    this.internalComponent.state = service.state;
    return this.internalComponent;
  };

  this._reload = function () {
    var service = this.getService();
    service.reload();
    this.state.visible = service.state.visible;
  };

  this._setOpen = function (bool) {
    this._service.showPrintArea(bool);
  };
}

inherit(PrintComponent, Component);

module.exports = PrintComponent;

},{"components/Print.vue":227,"gui/component/component":77,"gui/print/printservice":121,"utils":419}],123:[function(require,module,exports){
var _PrintPage = require('components/PrintPage.vue');

var vueComponentOptions = _interopRequireWildcard(_PrintPage);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');

var InternalComponent = Vue.extend(vueComponentOptions);

var PrintPage = function PrintPage() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  var service = options.service;
  this.setService(service);
  var internalComponent = new InternalComponent({
    service: service
  });
  this.setInternalComponent(internalComponent);
  this.internalComponent.state = service.state.output;

  this.unmount = function () {
    this.getService().setPrintAreaAfterCloseContent();
    return base(this, 'unmount');
  };
};

inherit(PrintPage, Component);

module.exports = PrintPage;

},{"components/PrintPage.vue":229,"gui/component/component":77,"utils":419}],124:[function(require,module,exports){
var _ProjectsMenu = require('components/ProjectsMenu.vue');

var vueComponentOptions = _interopRequireWildcard(_ProjectsMenu);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    merge = _require.merge;

var Component = require('gui/component/component');

var InternalComponent = Vue.extend(vueComponentOptions);

function MenuComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = options.title || "menu";
  this.state.visible = true;
  this.state.menuitems = options.menuitems;
  var host = options.host;
  merge(this, options);
  this.internalComponent = new InternalComponent({
    service: this,
    host: host
  });
  this.internalComponent.state = this.state;
}
inherit(MenuComponent, Component);

var proto = MenuComponent.prototype;

proto.trigger = function (item) {};

module.exports = MenuComponent;

},{"components/ProjectsMenu.vue":231,"gui/component/component":77,"utils":419}],125:[function(require,module,exports){
var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var MenuComponent = require('gui/projectsmenu/menu');

function ProjectsMenuComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.id = 'projectsmenu';
  base(this, options);
  this.state.menuitems = [];
  var host = options.host;
  var projects = options.projects || _projects2.default.getListableProjects();
  this.state.menuitems = projects.map(function (project) {
    return {
      title: project.title,
      description: project.description,
      thumbnail: project.thumbnail,
      gid: project.gid,
      cbk: options.cbk || function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var gid = options.gid;

        return _application2.default.changeProject({
          gid: gid,
          host: host
        });
      }
    };
  });
}

inherit(ProjectsMenuComponent, MenuComponent);

module.exports = ProjectsMenuComponent;

},{"gui/projectsmenu/menu":124,"services/application":310,"store/projects":335,"utils":419}],126:[function(require,module,exports){
var QueryBuilder = require('gui/querybuilder/vue/querybuilder');
var QueryBuilderPanel = require('gui/querybuilder/vue/panel/querybuilderpanel');

var QuerybuilderUIfactory = {
  type: null,
  show: function show() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$type = _ref.type,
        type = _ref$type === undefined ? 'sidebar' : _ref$type,
        options = _ref.options;

    var QueryBuilderInstance = void 0;
    this.type = this.type === null ? type : this.type;
    if (this.type === 'modal') {
      QueryBuilderInstance = new QueryBuilder({
        options: options
      });
      var queryBuilderDom = QueryBuilderInstance.$mount().$el;
      GUI.showModalDialog({
        title: 'Query Builder',
        message: queryBuilderDom,
        className: "modal-background-dark "
      });
    } else {
      var panel = new QueryBuilderPanel({
        options: options
      });
      QueryBuilderInstance = panel.getInternalPanel();
      panel.show();
    }
    return QueryBuilderInstance;
  }
};

module.exports = QuerybuilderUIfactory;

},{"gui/querybuilder/vue/panel/querybuilderpanel":127,"gui/querybuilder/vue/querybuilder":128}],127:[function(require,module,exports){
var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Panel = require('gui/panel');
var QueryBuilder = require('gui/querybuilder/vue/querybuilder');

function QueryBuilderPanel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.title = 'Query Builder';
  base(this, options);
  var internalPanel = new QueryBuilder(options);
  this.setInternalPanel(internalPanel);
}

inherit(QueryBuilderPanel, Panel);

module.exports = QueryBuilderPanel;

},{"gui/panel":120,"gui/querybuilder/vue/querybuilder":128,"utils":419}],128:[function(require,module,exports){
var _QueryBuilder = require('components/QueryBuilder.vue');

var vueComponentOptions = _interopRequireWildcard(_QueryBuilder);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var QueryBuilder = Vue.extend(vueComponentOptions);

module.exports = QueryBuilder;

},{"components/QueryBuilder.vue":232}],129:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _constant = require('app/constant');

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _QueryResultsActionDownloadFormats = require('components/QueryResultsActionDownloadFormats.vue');

var _QueryResultsActionDownloadFormats2 = _interopRequireDefault(_QueryResultsActionDownloadFormats);

var _QueryResultsActionQueryPolygonCSVAttributes = require('components/QueryResultsActionQueryPolygonCSVAttributes.vue');

var _QueryResultsActionQueryPolygonCSVAttributes2 = _interopRequireDefault(_QueryResultsActionQueryPolygonCSVAttributes);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _addToSelection = require('core/layers/utils/addToSelection');

var _removeFromSelection = require('core/layers/utils/removeFromSelection');

var _getAlphanumericPropertiesFromFeature = require('utils/getAlphanumericPropertiesFromFeature');

var _createFeatureFromGeometry = require('utils/createFeatureFromGeometry');

var _createFeatureFromBBOX = require('utils/createFeatureFromBBOX');

var _createFeatureFromCoordinates = require('utils/createFeatureFromCoordinates');

var _intersects = require('utils/intersects');

var _within = require('utils/within');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('utils'),
    noop = _require.noop,
    downloadFile = _require.downloadFile,
    throttle = _require.throttle,
    getUniqueDomId = _require.getUniqueDomId,
    copyUrl = _require.copyUrl;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var Layer = require('core/layers/layer');
var G3WObject = require('core/g3wobject');
var VectorLayer = require('core/layers/vectorlayer');

var _require3 = require('gui/print/printservice'),
    PRINT_UTILS = _require3.PRINT_UTILS;

var RelationsPage = require('gui/relations/vue/relationspage');
var PickCoordinatesInteraction = require('g3w-ol/interactions/pickcoordinatesinteraction');

var deprecate = require('util-deprecate');

var printAtlas = PRINT_UTILS.printAtlas;

/**
 * Get and set vue reactivity to QueryResultsService
 *
 * @type {Vue}
 */

var VM = new Vue();

var QueryResultsService = function (_G3WObject) {
  _inherits(QueryResultsService, _G3WObject);

  function QueryResultsService() {
    _classCallCheck(this, QueryResultsService);

    /**
     * BACKCOMP
     */
    var _this = _possibleConstructorReturn(this, (QueryResultsService.__proto__ || Object.getPrototypeOf(QueryResultsService)).call(this));

    _this._changeLayerResult = _this.setters.changeLayerResult;
    _this._addComponent = _this.setters.addComponent;

    /** @deprecated since 3.9.1 will be removed in 4.x */
    _this.printService = PRINT_UTILS;

    /**
     * @FIXME add description
     */
    _this._currentLayerIds = [];

    /**
     * @FIXME add description
     */
    _this.unlistenerlayeractionevents = [];

    /**
     * @FIXME add description
     */
    _this._actions = {
      'highlightgeometry': _this.highlightGeometry.bind(_this),
      'clearHighlightGeometry': _this.clearHighlightGeometry.bind(_this)
    };

    /**
     * <Array> to store relations
     */
    _this._relations = [];

    /**
     * @FIXME add description
     */
    _this._atlas = [];

    /**
     * @FIXME add description
     */
    _this.plotLayerIds = [];

    /**
     * Set reactive state
     */
    _this.state = {

      /**
       * @FIXME add description
       */
      zoomToResult: true,

      /**
       * @FIXME add description
       */
      components: [],

      /**
       * @FIXME add description
       */
      layers: [],

      /**
       * @FIXME add description
       */
      changed: false,

      /**
       * @FIXME add description
       */
      query: null,

      /**
       * 'ows' = default
       * 'api' = search
       */
      type: 'ows',

      /**
       * An action is an object that contains:
       *
       * ```
       * {
       *   "id":       (required) Unique action Id
       *   "download": whether action is download or not
       *   "class":    (required) fontawsome classname to show icon
       *   "state":    need to be reactive. Used for example to toggled state of action icon
       *   "hint":     Tooltip text
       *   "init":     Method called when action is loaded
       *   "clear":    Method called before clear the service. Used for example to clear unwatch
       *   "change":   Method called when feature of layer is changed
       *   "cbk":      (required) Method called when action is cliccked
       * }
       * ```
       **/
      layersactions: {},

      /**
       * Add action tools (for features)
       */
      actiontools: {},

      /**
       * Current action tools contain component
       * of a specific action (eg. download)
       */
      currentactiontools: {},

      /**
       * Contains current action that expose vue component
       * (useful for comparing the id other action is
       * triggered and exposing the component)
       */
      currentactionfeaturelayer: {},

      /**
       * @FIXME add description
       */
      layeractiontool: {},

      /**
       * @FIXME add description
       */
      layersFeaturesBoxes: {},

      /**
       * Used to show a custom component for a layer
       */
      layerscustomcomponents: {} //

    };

    /**
     * <Array> where are store vector layer add on runtime
     */
    _this._vectorLayers = [];

    /**
     * @FIXME add description
     */
    _this._addFeaturesLayerResultInteraction = {

      /**
       * Reference to current layer
       */
      id: null,

      /**
       * Interaction bind to layer,
       */
      interaction: null,

      /**
       * Add current toggled map control if toggled
       */
      mapcontrol: null,

      /**
       * Method that handles interaction when a mapcontrol is toggled
       */
      toggleeventhandler: null

    };

    /**
     * @FIXME add description
     */
    _this._asyncFnc = {
      todo: noop,
      zoomToLayerFeaturesExtent: { async: false },
      goToGeometry: { async: false }
    };

    /**
     * Vector layer used by query result to show query
     * request as coordinates, bbox, polygon, etc ..
     *
     * @type {ol.layer.Vector}
     */
    _this.resultsQueryLayer = new ol.layer.Vector({
      source: new ol.source.Vector(),
      style: function style(feature) {
        var fill = new ol.style.Fill({ color: 'rgba(0, 0, 255, 0.7)' });
        var stroke = new ol.style.Stroke({ color: 'blue', width: 3 });
        if ('Point' === feature.getGeometry().getType()) {
          return new ol.style.Style({
            text: new ol.style.Text({ fill: fill, stroke: stroke, text: '\uF3C5', font: '900 3em "Font Awesome 5 Free"', offsetY: -15 })
          });
        }
        return new ol.style.Style({ stroke: stroke });
      }
    });

    /**
     * @deprecated since 3.8
     * It used to register change project from Change map button
     */
    _projects2.default.onafter('setCurrentProject', function (project) {
      _this._project = project;
      _this._setRelations(project);
      _this._setAtlasActions(project);
      _this.state.download_data = false;
      _this.plotLayerIds = [];
    });

    /**
     * Current project <Project>
     */
    _this._project = _projects2.default.getCurrentProject();

    /**
     * Keep the right order for query result based on TOC order layers
     */
    _this._projectLayerIds = _this._project.getConfigLayers().map(function (layer) {
      return layer.id;
    });

    /**
     * @FIXME add description
     */
    _this._setRelations(_this._project);

    /**
     * @FIXME add description
     */
    _this._setAtlasActions(_this._project);

    /**
     * @FIXME add description
     */
    _gui2.default.onbefore('setContent', function (options) {
      _this.mapService = _this.mapService || _application2.default.getApplicationService('map');
      if (100 === options.perc && _gui2.default.isMobile()) {
        _this._asyncFnc.zoomToLayerFeaturesExtent.async = true;
        _this._asyncFnc.goToGeometry.async = true;
      }
    });

    return _this;
  }

  /**
   * @FIXME add description
   */


  _createClass(QueryResultsService, [{
    key: 'addLayersPlotIds',
    value: function addLayersPlotIds() {
      var layerIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.plotLayerIds = layerIds;
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getPlotIds',
    value: function getPlotIds() {
      return this.plotLayerIds;
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'findPlotId',
    value: function findPlotId(id) {
      return this.plotLayerIds.find(function (plotId) {
        return plotId == id;
      });
    }

    /**
     * Register for plugin or other component of application to add
     * custom component on result for each layer feature or layer
     *
     * @param opts.id        unique id identification
     * @param opts.layerId   Layer id of layer
     * @param opts.component custom component
     * @param opts.type      feature or layer
     * @param opts.position
     */

  }, {
    key: 'registerCustomComponent',
    value: function registerCustomComponent() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$id = _ref.id,
          id = _ref$id === undefined ? getUniqueDomId() : _ref$id,
          layerId = _ref.layerId,
          component = _ref.component,
          _ref$type = _ref.type,
          type = _ref$type === undefined ? 'feature' : _ref$type,
          _ref$position = _ref.position,
          position = _ref$position === undefined ? 'after' : _ref$position;

      if (undefined === this.state.layerscustomcomponents[layerId]) {
        this.state.layerscustomcomponents[layerId] = {
          layer: { before: [], after: [] },
          feature: { before: [], after: [] }
        };
      }
      this.state.layerscustomcomponents[layerId][type][position].push({ id: id, component: component });
      return id;
    }

    /**
     * Check position
     *
     * @param opts.id
     * @param opts.layerId
     * @param opts.type
     * @param opts.position
     */

  }, {
    key: 'unRegisterCustomComponent',
    value: function unRegisterCustomComponent(_ref2) {
      var id = _ref2.id,
          layerId = _ref2.layerId,
          type = _ref2.type,
          position = _ref2.position;

      var component = this.state.layerscustomcomponents[layerId][type];
      var by_id = function by_id(_ref3) {
        var componentId = _ref3.id;
        return componentId !== id;
      };

      if (position) {
        component[position] = component[position].filter(by_id);
        return;
      }

      Object.keys(component[position]).forEach(function (position) {
        component[position] = component[position].filter(by_id);
      });
    }

    /**
     * Add a feature to current layer result
     *
     * @param layer
     * @param feature
     */

  }, {
    key: 'addFeatureLayerToResult',
    value: function addFeatureLayerToResult(layer, feature) {
      this.state.layersFeaturesBoxes[this.getBoxId(layer, feature)].collapsed = true;
    }

    /**
     * Loop over response features based on layer response and
     * check if features layer need to be added or removed to
     * current `state.layers` results.
     *
     * @param responseLayer layer structure coming from request
     *
     * @since 3.8.0
     */

  }, {
    key: 'updateLayerResultFeatures',
    value: function updateLayerResultFeatures(responseLayer) {
      var _this2 = this;

      var layer = this._getLayer(responseLayer.id),
          // get layer from current `state.layers` showed on result
      responseFeatures = this._getLayerFeatures(responseLayer),
          // extract features from responseLayer object
      external = this._getExternalLayer(responseLayer.id),
          // get id of external layer or not (`external` is a layer added by mapcontrol addexternlayer)
      has_features = layer && this._getLayerFeatures(layer).length > 0; // check if current layer has features on response

      if (has_features) {
        var features_ids = this._getFeaturesIds(layer.features, external); // get features id from current layer on result
        responseFeatures.forEach(function (feature) {
          var feature_id = _this2._getFeatureId(feature, external);
          if (features_ids.some(function (id) {
            return id === feature_id;
          })) {
            // remove feature (because is already loaded)
            _this2._removeLayerFeatureBox(layer, feature);
            layer.features = _this2._getLayerFeatures(layer).filter(function (f) {
              return _this2._getFeatureId(f, external) !== feature_id;
            });
          } else {
            // add feature
            layer.features.push(feature);
          }
        });
        this._getLayerFeatures(layer).forEach(function (feature) {
          return _this2._toggleLayerFeatureBox(layer, feature, _this2._getLayerFeatures(layer).length > 1);
        });
      }

      // in case no more features on layer remove interaction pickcoordinate to get result from map
      this.checkIfLayerHasNoFeatures(layer);

      // highlight new feature
      if (1 === this.state.layers.length) {
        this.highlightFeaturesPermanently(this.state.layers[0]);
      }

      this.changeLayerResult(layer);
    }

    /**
     * Check and do action if layer has no features after delete feature(s)
     *
     * @param layer
     */

  }, {
    key: 'checkIfLayerHasNoFeatures',
    value: function checkIfLayerHasNoFeatures(layer) {
      var _this3 = this;

      if (layer && 0 === this._getLayerFeatures(layer).length) {
        // due to vue reactivity, wait a little bit before update layers
        setTimeout(function () {
          _this3.state.layers = _this3.state.layers.filter(function (l) {
            return l.id !== layer.id;
          });
          _this3.clearHighlightGeometry(layer);
          _this3.removeAddFeaturesLayerResultInteraction({ toggle: true });
        });
      }
    }

    /**
     * Generate a boxid identifier to query result html
     *
     * @param layer
     * @param feature
     * @param relation_index
     *
     * @returns {string}
     */

  }, {
    key: 'getBoxId',
    value: function getBoxId(layer, feature, relation_index) {
      return null !== relation_index && undefined !== relation_index ? layer.id + '_' + feature.id + '_' + relation_index : layer.id + '_' + feature.id;
    }

    /**
     * @FIXME add description
     *
     * @param layers
     * @param options
     */

  }, {
    key: 'setActionsForLayers',
    value: function setActionsForLayers(layers) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { add: false };

      if (options.add) {
        return;
      }

      // reset array
      this.unlistenerlayeractionevents = [];

      // loop results
      layers.forEach(function (layer) {

        var action_tools = {};
        var action_layer = {};

        _this4._getLayerFeatures(layer).forEach(function (_, idx) {
          action_tools[idx] = null;
          action_layer[idx] = null;
        });

        // set eventually layer action tool and need to be reactive
        _this4.state.layeractiontool[layer.id] = Vue.observable({ component: null, config: null });
        _this4.state.currentactiontools[layer.id] = Vue.observable(action_tools);
        _this4.state.currentactionfeaturelayer[layer.id] = Vue.observable(action_layer);

        var is_external_layer_or_wms = layer.external || (layer.source ? 'wms' === layer.source.type : false);

        if (!_this4.state.layersactions[layer.id]) {
          _this4.state.layersactions[layer.id] = [];
        }

        /**
         * @TODO find out a wy to handle this within MapControlGeocoding.vue 
         * 
         * @since 3.9.0 In case of marker layers
         */
        var is_geocoding = '__g3w_marker' === layer.id;

        // Lookup for layer geometry.
        if (layer.hasgeometry) {
          _this4._setActionGoToGeometry(layer);
        }

        // Lookup for layer relations.
        if (_this4._relations && _this4._relations[layer.id]) {
          _this4._setActionShowQueryAndPlotsRelations(layer);
        }

        // Lookup for layer print atlas.
        if (_this4.getAtlasByLayerId(layer.id).length) {
          _this4._setActionPrintAtlas(layer);
        }

        // Lookup for layer downloadable features (single).
        if (layer.downloads.length === 1) {
          _this4._setActionDownloadFeature(layer);
        }

        // Lookup for layer downloadable features (multi).
        if (layer.downloads.length > 1) {
          _this4._setActionMultiDownloadFeature(layer);
        }

        // Lookup for not external layer or WMS.
        if (false === is_external_layer_or_wms || is_geocoding) {
          _this4._setActionRemoveFeatureFromResult(layer);
        }

        // Lookup for layer selection status (active).
        if (undefined !== layer.selection.active) {
          _this4._setActionSelection(layer);
        }

        // Lookup for not external layer or WMS (copy link to feature).
        if (false === is_external_layer_or_wms && layer.hasgeometry) {
          _this4._setActionLinkZoomToFid(layer);
        }

        // Lookup for editable layer.
        if (layer.editable && false === layer.inediting) {
          _this4._setActionEditing(layer);
        }
      });

      this.addActionsForLayers(this.state.layersactions, this.state.layers);
    }

    /**
     * @FIXME add description
     * 
     * @param opts.layer
     * @param opts.dynamicProperties
     */

  }, {
    key: 'createActionState',
    value: function createActionState(_ref4) {
      var layer = _ref4.layer,
          _ref4$dynamicProperti = _ref4.dynamicProperties,
          dynamicProperties = _ref4$dynamicProperti === undefined ? ['toggled'] : _ref4$dynamicProperti;

      // number of download formats
      var properties = dynamicProperties.reduce(function (obj, prop) {
        obj[prop] = {};return obj;
      }, {});
      layer.features.map(function (_, idx) {
        Object.keys(properties).forEach(function (prop) {
          properties[prop][idx] = null;
        });
      });
      return Vue.observable(properties);
    }

    /**
     * Get action referred to layer getting the action id
     *
     * @param opts.layer layer linked to action
     * @param opts.id    action id
     * 
     * @returns undefined when no action is found
     */

  }, {
    key: 'getActionLayerById',
    value: function getActionLayerById() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref5.layer,
          id = _ref5.id;

      if (this.state.layersactions[layer.id]) {
        return this.state.layersactions[layer.id].find(function (action) {
          return action.id === id;
        });
      }
    }

    /**
     * Set current layer action tool in feature
     *
     * @param opts.layer current layer
     * @param opts.index feature index
     * @param opts.value component value or null
     * @param opts.component vue component
     */

  }, {
    key: 'setCurrentActionLayerFeatureTool',
    value: function setCurrentActionLayerFeatureTool() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref6.layer,
          action = _ref6.action,
          index = _ref6.index,
          _ref6$component = _ref6.component,
          component = _ref6$component === undefined ? null : _ref6$component;

      var tools = this.state.currentactiontools[layer.id]; // get current action tools
      var feats = this.state.currentactionfeaturelayer[layer.id];
      feats[index] = component ? action : null;
      tools[index] = component; // set component

      // need to check if pass component and
      if (tools[index] && // if component is set
      action.id !== feats[index].id && // same action
      feats[index].toggleable // check if toggleable
      ) {
          feats[index].state.toggled[index] = false;
        }
    }

    /**
     * @TODO rename misleading method name: `addActionToolsLayer`
     * 
     * @param opts.id     action layer id
     * @param opts.layer  layer
     * @param opts.config configuration object
     * @param opts.action (since 3.9.0) configuration object
     */

  }, {
    key: 'addCurrentActionToolsLayer',
    value: function addCurrentActionToolsLayer(_ref7) {
      var id = _ref7.id,
          layer = _ref7.layer,
          _ref7$config = _ref7.config,
          config = _ref7$config === undefined ? {} : _ref7$config,
          action = _ref7.action;

      if (!layer) {
        return;
      }
      this.state.actiontools[id] = _defineProperty({}, layer.id, config);
      if (action) {
        this.state.layersactions[layer.id] = this.state.layersactions[layer.id] || [];
        this.state.layersactions[layer.id].push(action);
      }
    }

    /**
     * Reset current action tools on layer when feature layer change
     *
     * @param layer
     */

  }, {
    key: 'resetCurrentActionToolsLayer',
    value: function resetCurrentActionToolsLayer(layer) {
      var _this5 = this;

      this._getLayerFeatures(layer).forEach(function (_, idx) {
        var tool = _this5.state.currentactiontools[layer.id];
        if (undefined === tool) {
          return;
        }
        if (undefined === tool[idx]) {
          Vue.set(tool, idx, null);
        }
        tool[idx] = null;
      });
    }

    /**
     * @FIXME add description
     * @param opts.layer current layer
     * @param opts.component vue component
     * @param opts.config configuration Object
     */

  }, {
    key: 'setLayerActionTool',
    value: function setLayerActionTool() {
      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref8.layer,
          _ref8$component = _ref8.component,
          component = _ref8$component === undefined ? null : _ref8$component,
          _ref8$config = _ref8.config,
          config = _ref8$config === undefined ? null : _ref8$config;

      this.state.layeractiontool[layer.id].component = component;
      this.state.layeractiontool[layer.id].config = config;
    }
  }, {
    key: 'copyZoomToFidUrl',


    /**
     * Copy `zoomtofid` url
     *
     * @param layer current layer
     * @param feature current feature
     * @param action action
     */
    value: function copyZoomToFidUrl(layer, feature, action) {
      var url = new URL(location.href);
      url.searchParams.set('zoom_to_fid', layer.id + '|' + feature.attributes[_constant.G3W_FID]);
      copyUrl(url.toString());
      action.hint_changed = true;
    }

    /**
     * Clear all
     */

  }, {
    key: 'clear',
    value: function clear() {
      this.runAsyncTodo();
      this.unlistenerEventsActions();
      this.mapService.clearHighlightGeometry();
      this.resultsQueryLayer.getSource().clear();
      this.removeAddFeaturesLayerResultInteraction({ toggle: true });
      this._asyncFnc = null;
      this._asyncFnc = {
        todo: noop,
        zoomToLayerFeaturesExtent: { async: false },
        goToGeometry: { async: false }
      };
      this.clearState();
      this.closeComponent();
      this.removeQueryResultLayerFromMap();
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getCurrentLayersIds',
    value: function getCurrentLayersIds() {
      return this._currentLayerIds;
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'runAsyncTodo',
    value: function runAsyncTodo() {
      this._asyncFnc.todo();
    }

    /**
     * @param bool whether to zoom to results
     */

  }, {
    key: 'setZoomToResults',
    value: function setZoomToResults() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.state.zoomToResult = bool;
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'highlightFeaturesPermanently',
    value: function highlightFeaturesPermanently(layer) {
      this.mapService.highlightFeatures(layer.features, { duration: Infinity });
    }

    /**
     * Check if one layer result
     *
     * @returns {boolean}
     */

  }, {
    key: 'isOneLayerResult',
    value: function isOneLayerResult() {
      return 1 === this.state.layers.length;
    }

    /**
     * @FIXME add description
     *
     * @param {boolean} opts.toggle If true toggle true the mapcontrol
     */

  }, {
    key: 'removeAddFeaturesLayerResultInteraction',
    value: function removeAddFeaturesLayerResultInteraction() {
      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref9$toggle = _ref9.toggle,
          toggle = _ref9$toggle === undefined ? false : _ref9$toggle;

      var interaction = this._addFeaturesLayerResultInteraction;

      if (null !== interaction.toggleeventhandler) {
        this.mapService.off('mapcontrol:toggled', interaction.toggleeventhandler);
      }

      // remove current interaction to get features from layer
      if (null !== interaction.interaction) {
        this.mapService.removeInteraction(interaction.interaction);
      }

      // check if query map control is toggled and registered
      if (null !== interaction.mapcontrol) {
        interaction.mapcontrol.toggle(toggle);
      }

      // reset values
      interaction.interaction = null;
      interaction.id = null;
      interaction.toggleeventhandler = null;
      interaction.mapcontrol = null;
    }

    /**
     * Adds feature to Features layer results
     *
     * @param layer
     */

  }, {
    key: 'addLayerFeaturesToResultsAction',
    value: function addLayerFeaturesToResultsAction(layer) {
      var _this6 = this;

      var interaction = this._addFeaturesLayerResultInteraction;

      var not_current = ![null, layer.id].includes(interaction.id);
      var new_layer = not_current && this.state.layers.find(function (layer) {
        return layer.id === interaction.id;
      });

      // disable previous layer
      if (not_current && new_layer) {
        new_layer.addfeaturesresults.active = false;
      }

      // remove previous interaction
      if (not_current && interaction.interaction) {
        this.mapService.removeInteraction(interaction.interaction);
      }

      // set new layer
      interaction.id = layer.id;

      layer.addfeaturesresults.active = !layer.addfeaturesresults.active;

      if (false === layer.addfeaturesresults.active) {
        this.removeAddFeaturesLayerResultInteraction({ toggle: true });
      } else {

        this.activeMapInteraction(); // useful to send an event

        var external_layer = this._getExternalLayer(layer.id);

        interaction.mapcontrol = interaction.mapcontrol || this.mapService.getCurrentToggledMapControl() || null; //need to be set null when this.mapService.getCurrentToggledMapControl() is undefined
        interaction.interaction = new PickCoordinatesInteraction();

        this.mapService.addInteraction(interaction.interaction, { close: false });

        interaction.interaction.on('picked', function () {
          var _ref11 = _asyncToGenerator(function* (_ref10) {
            var coordinates = _ref10.coordinate;

            if (external_layer) {
              // call setQueryResponse setters method directly in case of external layer 
              _this6.setQueryResponse({
                data: [_this6.getVectorLayerFeaturesFromQueryRequest(_this6._vectorLayers.find(function (v) {
                  return layer.id === v.get('id');
                }), { coordinates: coordinates })],
                query: { coordinates: coordinates }
              }, { add: true });
            } else {
              yield _data2.default.getData('query:coordinates', {
                inputs: {
                  coordinates: coordinates,
                  query_point_tolerance: _this6._project.getQueryPointTolerance(),
                  layerIds: [layer.id],
                  multilayers: false
                },
                outputs: {
                  show: { add: true }
                }
              });
            }
          });

          return function (_x9) {
            return _ref11.apply(this, arguments);
          };
        }());

        interaction.toggleeventhandler = function (evt) {
          if (evt.target.isToggled() && evt.target.isClickMap()) {
            layer.addfeaturesresults.active = false;
          }
        };

        this.mapService.once('mapcontrol:toggled', interaction.toggleeventhandler);
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'deactiveQueryInteractions',
    value: function deactiveQueryInteractions() {
      this.state.layers.forEach(function (layer) {
        if (layer.addfeaturesresults) layer.addfeaturesresults.active = false;
      });
      this.removeAddFeaturesLayerResultInteraction();
    }

    /**
     * @FIXME add description
     *
     * @param layer
     * @param options
     */

  }, {
    key: 'zoomToLayerFeaturesExtent',
    value: function zoomToLayerFeaturesExtent(layer) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      options.highlight = !this.isOneLayerResult();
      if (this._asyncFnc.zoomToLayerFeaturesExtent.async) {
        this._asyncFnc.todo = this.mapService.zoomToFeatures.bind(this.mapService, this._getLayerFeatures(layer), options);
      } else {
        this.mapService.zoomToFeatures(this._getLayerFeatures(layer), options);
      }
    }

    /**
     * Reset internal state
     */

  }, {
    key: 'clearState',
    value: function clearState() {
      this.state.layers.splice(0);
      this.state.query = null;
      this.state.querytitle = "";
      this.state.changed = false;
      this._clearActions();
      this.state.layersFeaturesBoxes = {};
      this.removeAddFeaturesLayerResultInteraction();
    }

    /**
     * Clear layer actions (if present)
     * 
     * @since 3.9.0
     */

  }, {
    key: '_clearActions',
    value: function _clearActions() {
      Object.values(this.state.layersactions).forEach(function (l) {
        return l.forEach(function (action) {
          return action.clear && action.clear();
        });
      });
      this.state.layersactions = {};
      this.state.actiontools = {};
      this.state.layeractiontool = {};
      this.state.currentactiontools = {};
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'getState',
    value: function getState() {
      return this.state;
    }

    /**
     * @FIXME add description
     *
     * @param state
     */

  }, {
    key: 'setState',
    value: function setState(state) {
      this.state = state;
    }

    /**
     * @FIXME add description
     *
     * @param project
     */

  }, {
    key: '_setRelations',
    value: function _setRelations(project) {
      var projectRelations = project.getRelations();
      this._relations = projectRelations ? _.groupBy(projectRelations, 'referencedLayer') : [];
    }

    /**
     * @param layerId
     */

  }, {
    key: 'getAtlasByLayerId',
    value: function getAtlasByLayerId(layerId) {
      return this._atlas.filter(function (atlas) {
        return atlas.atlas.qgs_layer_id === layerId;
      });
    }

    /**
     * @FIXME add description
     *
     * @param project
     */

  }, {
    key: '_setAtlasActions',
    value: function _setAtlasActions(project) {
      this._atlas = project.getPrint().filter(function (printconfig) {
        return printconfig.atlas;
      }) || [];
    }

    /**
     * @FIXME add description
     *
     * @param querytitle
     */

  }, {
    key: 'setTitle',
    value: function setTitle(querytitle) {
      this.state.querytitle = querytitle || "";
    }

    /**
     * Convert response from server
     *
     * @param featuresForLayer.layer
     * @param featuresForLayer.features
     * @param featuresForLayer.rawdata  rawdata response
     * @param featuresForLayer.error
     *
     * @returns { layerObj | undefined }
     *
     * @since 3.9.0
     */

  }, {
    key: '_responseToLayer',
    value: function _responseToLayer(_ref12) {
      var _layerObj;

      var layer = _ref12.layer,
          features = _ref12.features,
          rawdata = _ref12.rawdata,
          error = _ref12.error;


      var has_features = Array.isArray(features) && features.length > 0;

      // Skip when layer has no features or rawdata not undefined (wms external)
      if (false === has_features && undefined === rawdata) {
        return;
      }

      var is_layer = layer instanceof Layer;
      var is_vector = layer instanceof ol.layer.Vector; // instance of openlayers layer Vector Class
      var is_string = 'string' === typeof layer || layer instanceof String; // can be created by string

      var sourceType = void 0;

      if (is_string) {
        sourceType = Layer.LayerTypes.VECTOR;
      } else if (is_layer) {
        try {
          sourceType = layer.getSourceType();
        } catch (error) {
          console.warn('uknown source type for layer:', layer);
        }
      }

      // set selection filter and relation if not wms
      var not_wms_wcs_wmst = -1 === [Layer.SourceTypes.WMS, Layer.SourceTypes.WCS, Layer.SourceTypes.WMST].indexOf(sourceType);

      var name = is_string && layer.split('_');

      var id = (is_layer ? layer.getId() : undefined) || (is_vector ? layer.get('id') : undefined) || (is_string ? layer : undefined);

      var attributes = this._parseLayerObjAttributes(layer, features, sourceType);
      var external = is_vector || is_string;

      var layerObj = (_layerObj = {
        id: id,
        attributes: attributes,
        external: external,
        features: this._parseLayerObjFeatures(features, rawdata, external),
        hasgeometry: this._hasLayerObjGeometry(features, rawdata),
        hasImageField: this._hasLayerObjImageField(features, rawdata, attributes),
        loading: false,
        show: true,
        expandable: true,
        addfeaturesresults: { active: false }
      }, _defineProperty(_layerObj, _QueryResultsActionDownloadFormats2.default.name, { active: false }), _defineProperty(_layerObj, 'editable', is_layer ? layer.isEditable() : false), _defineProperty(_layerObj, 'inediting', is_layer ? layer.isInEditing() : false), _defineProperty(_layerObj, 'source', is_layer ? layer.getSource() : undefined), _defineProperty(_layerObj, 'infoformat', is_layer ? layer.getInfoFormat() : undefined), _defineProperty(_layerObj, 'infoformats', is_layer ? layer.getInfoFormats() : []), _defineProperty(_layerObj, 'downloads', is_layer ? layer.getDownloadableFormats() : []), _defineProperty(_layerObj, 'formStructure', is_layer ? this._parseLayerObjFormStructure(layer, features, rawdata, attributes) : undefined), _defineProperty(_layerObj, 'relationsattributes', is_layer || is_vector || is_string ? [] : undefined), _defineProperty(_layerObj, 'filter', is_layer && not_wms_wcs_wmst ? layer.state.filter : {}), _defineProperty(_layerObj, 'selection', (is_layer && not_wms_wcs_wmst ? layer.state.selection : undefined) || (is_vector ? layer.selection : undefined) || {}), _defineProperty(_layerObj, 'title', (is_layer ? layer.getTitle() : undefined) || (is_vector ? layer.get('name') : undefined) || (is_string && name ? name.length > 4 ? name.slice(0, name.length - 4).join(' ') : layer : undefined)), _defineProperty(_layerObj, 'atlas', this.getAtlasByLayerId(id)), _defineProperty(_layerObj, 'rawdata', rawdata ? rawdata : null), _defineProperty(_layerObj, 'error', error ? error : ''), _layerObj);

      return layerObj;
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_hasLayerObjGeometry',
    value: function _hasLayerObjGeometry(features, rawdata) {
      var _this7 = this;

      return Array.isArray(features) && !rawdata && features.some(function (f) {
        var props = _this7.getFeaturePropertiesAndGeometry(f);
        if (props.geometry) {
          return true;
        }
      });
    }

    /**
     * @since 3.9.0 
     */

  }, {
    key: '_hasLayerObjImageField',
    value: function _hasLayerObjImageField(features, rawdata, attributes) {
      /** @FIXME add description */
      return Array.isArray(features) && features.length && !rawdata && attributes.some(function (attr) {
        if ('image' === attr.type) {
          return true;
        }
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_parseLayerObjFeatures',
    value: function _parseLayerObjFeatures(features, rawdata, external) {
      var _this8 = this;

      var _features = [];
      if (!rawdata) {
        features.forEach(function (f) {
          var props = _this8.getFeaturePropertiesAndGeometry(f);
          _features.push({
            id: external ? f.getId() : props.id,
            attributes: props.properties,
            geometry: props.geometry,
            selection: props.selection,
            show: true
          });
        });
      }
      return _features;
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_parseLayerObjFormStructure',
    value: function _parseLayerObjFormStructure(layer, features, rawdata, attributes) {
      var structure = layer.hasFormStructure() && layer.getLayerEditingFormStructure();
      if (false === (structure && this._relations && this._relations.length)) {
        return;
      }
      var setRelationField = function setRelationField(node) {
        if (node.nodes) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = node.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _node = _step.value;

              setRelationField(_node);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else if (node.name) {
          node.relation = true;
        }
      };
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;

          setRelationField(node);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var formStructure = {
        structure: structure,
        fields: layer.getFields().filter(function (field) {
          return field.show;
        }) // get features show
      };

      /** @FIXME add description */
      if (!rawdata && Array.isArray(features) && features.length) {
        attributes.forEach(function (attr) {
          if (layer.getFields().some(function (field) {
            return field.name === attr.name;
          })) {
            formStructure.fields.push(attr);
          }
        });
      }
      return formStructure;
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_parseLayerObjAttributes',
    value: function _parseLayerObjAttributes(layer, features, sourceType) {
      var _this9 = this;

      var layerAttrs = void 0;

      // sanity check (eg. external layers ?)
      if (!features || !features.length) {
        return [];
      }

      if (layer instanceof Layer && 'ows' !== this.state.type) {
        layerAttrs = layer.getAttributes();
      }

      // Sanitize OWS Layer attributes
      if (layer instanceof Layer && 'ows' === this.state.type) {
        layerAttrs = layer.getAttributes().map(function (attribute) {
          var sanitizeAttribute = _extends({}, attribute);
          sanitizeAttribute.name = sanitizeAttribute.name.replace(/ /g, '_');
          return sanitizeAttribute;
        });
      }

      if (layer instanceof ol.layer.Vector) {
        layerAttrs = layer.getProperties();
      }

      if ('string' === typeof layer || layer instanceof String) {
        layerAttrs = features[0] ? features[0].getProperties() : [];
      }

      var specialAttrs = layer instanceof Layer ? layerAttrs.filter(function (attr) {
        try {
          return '_' === attr.name[0] || Number.isInteger(1 * attr.name[0]);
        } catch (e) {
          return false;
        }
      }).map(function (attr) {
        return { alias: attr.name.replace(/_/, ''), name: attr.name };
      }) : [];
      if (specialAttrs.length) {
        features.forEach(function (f) {
          return _this9._setSpecialAttributesFeatureProperty(specialAttrs, f);
        });
      }
      return this._parseAttributes(layerAttrs, features[0], sourceType);
    }

    /**
     * Set special attributes
     *
     * @param layerSpecialAttributesName
     * @param feature
     */

  }, {
    key: '_setSpecialAttributesFeatureProperty',
    value: function _setSpecialAttributesFeatureProperty() {
      var layerSpecialAttributesName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var feature = arguments[1];

      if (0 === layerSpecialAttributesName.length) {
        return;
      }
      // get attributes special keys from feature properties received by server request
      var featureAttributesNames = Object.keys(feature.getProperties());
      layerSpecialAttributesName.forEach(function (layerAttr) {
        featureAttributesNames.find(function (featureAttr) {
          if (featureAttr === layerAttr.alias) {
            feature.set(layerAttr.name, feature.get(featureAttr));
            return true;
          }
        });
      });
    }

    /**
     * Get `properties`, `geometry` and `id` from different types of feature
     *
     * @param feature
     *
     * @returns {{geometry: (undefined|*|null|ol.Feature), id: *, properties: string[]}|{geometry: *, id: *, properties: *}}
     */

  }, {
    key: 'getFeaturePropertiesAndGeometry',
    value: function getFeaturePropertiesAndGeometry(feature) {
      var isOlFeature = feature instanceof ol.Feature;
      return {
        selection: feature.selection,
        properties: isOlFeature ? feature.getProperties() : feature.properties,
        geometry: isOlFeature ? feature.getGeometry() : feature.geometry,
        id: isOlFeature ? feature.getId() : feature.id
      };
    }

    /**
     * Parse attributes to show on result based on field
     *
     * @param layerAttributes
     * @param feature
     * @param sourceType
     *
     * @returns {{name: T, show: boolean, label: T}[]|*}
     */

  }, {
    key: '_parseAttributes',
    value: function _parseAttributes(layerAttributes, feature, sourceType) {
      var featureAttributesNames = (0, _getAlphanumericPropertiesFromFeature.getAlphanumericPropertiesFromFeature)(Object.keys(this.getFeaturePropertiesAndGeometry(feature).properties));
      if (layerAttributes && layerAttributes.length > 0) {
        return layerAttributes.filter(function (attr) {
          return featureAttributesNames.indexOf(attr.name) > -1;
        });
      }
      var sourcesTypes = [Layer.SourceTypes.GDAL, Layer.SourceTypes.WMS, Layer.SourceTypes.WCS, Layer.SourceTypes.WMST,
      /** @since 3.9.0 */
      Layer.SourceTypes.POSTGRESRASTER];
      return featureAttributesNames.map(function (featureAttr) {
        return {
          name: featureAttr,
          label: featureAttr,
          show: _constant.G3W_FID !== featureAttr && (undefined === sourceType || -1 !== sourcesTypes.indexOf(sourceType)),
          type: 'varchar'
        };
      });
    }

    /**
     * @FIXME add description
     *
     * @param actionId
     * @param layer
     * @param feature
     * @param index
     * @param container
     */

  }, {
    key: 'trigger',
    value: function () {
      var _ref13 = _asyncToGenerator(function* (actionId, layer, feature, index, container) {
        if (this._actions[actionId]) {
          this._actions[actionId](layer, feature, index);
        }
        if (layer && this.state.layersactions[layer.id]) {
          var action = this.state.layersactions[layer.id].find(function (layerAction) {
            return layerAction.id === actionId;
          });
          if (action) {
            yield this.triggerLayerAction(action, layer, feature, index, container);
          }
        }
      });

      function trigger(_x12, _x13, _x14, _x15, _x16) {
        return _ref13.apply(this, arguments);
      }

      return trigger;
    }()

    /**
     * @FIXME add description
     *
     * @param action
     * @param layer
     * @param feature
     * @param index
     * @param container
     */

  }, {
    key: 'triggerLayerAction',
    value: function () {
      var _ref14 = _asyncToGenerator(function* (action, layer, feature, index, container) {
        if (action.cbk) {
          yield action.cbk(layer, feature, action, index, container);
        }
        if (action.route) {
          var url = action.route.replace(/{(\w*)}/g, function (m, key) {
            return feature.attributes.hasOwnProperty(key) ? feature.attributes[key] : "";
          });
          if (url && '' !== url) {
            _gui2.default.goto(url);
          }
        }
      });

      function triggerLayerAction(_x17, _x18, _x19, _x20, _x21) {
        return _ref14.apply(this, arguments);
      }

      return triggerLayerAction;
    }()

    /**
     * @FIXME add description
     *
     * @param vectorLayer
     */

  }, {
    key: 'registerVectorLayer',
    value: function registerVectorLayer(vectorLayer) {
      if (-1 === this._vectorLayers.indexOf(vectorLayer)) {
        this._vectorLayers.push(vectorLayer);
      }
    }

    /**
     * @FIXME add description
     *
     * @param vectorLayer
     */

  }, {
    key: 'unregisterVectorLayer',
    value: function unregisterVectorLayer(vectorLayer) {
      var _this10 = this;

      this._vectorLayers = this._vectorLayers.filter(function (layer) {
        _this10.state.layers = _this10.state.layers && _this10.state.layers.filter(function (layer) {
          return layer.id !== vectorLayer.get('id');
        });
        return layer !== vectorLayer;
      });
    }

    /**
     * @FIXME add description
     *
     * @param vectorLayer
     * @param query
     *
     * @returns {Object|Boolean}
     */

  }, {
    key: 'getVectorLayerFeaturesFromQueryRequest',
    value: function getVectorLayerFeaturesFromQueryRequest(vectorLayer) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var coordinates = query.coordinates,
          bbox = query.bbox,
          geometry = query.geometry,
          _query$filterConfig = query.filterConfig,
          filterConfig = _query$filterConfig === undefined ? {} : _query$filterConfig; // extract information about query type

      var features = [];

      var has_coords = coordinates && Array.isArray(coordinates);
      var has_bbox = bbox && Array.isArray(bbox);

      // case query coordinates
      if (has_coords) {
        this.mapService.viewer.map.forEachFeatureAtPixel(this.mapService.viewer.map.getPixelFromCoordinate(coordinates), function (feature, layer) {
          features.push(feature);
        }, {
          layerFilter: function layerFilter(layer) {
            return layer === vectorLayer;
          }
        });
      }

      // case query bbox
      if (has_bbox && !has_coords) {
        //set geometry has Polygon
        geometry = ol.geom.Polygon.fromExtent(bbox);
      }

      var is_poly = geometry instanceof ol.geom.Polygon || geometry instanceof ol.geom.MultiPolygon;

      // check query geometry (Polygon or MultiPolygon)
      if (is_poly && !has_coords) {
        switch (vectorLayer.constructor) {
          case VectorLayer:
            features = vectorLayer.getIntersectedFeatures(geometry);
            break;
          case ol.layer.Vector:
            vectorLayer.getSource().getFeatures().forEach(function (feature) {
              var add = void 0;
              switch (filterConfig.spatialMethod) {
                case 'intersects':
                  add = (0, _intersects.intersects)(geometry, feature.getGeometry());break;
                case 'within':
                  add = (0, _within.within)(geometry, feature.getGeometry());break;
                default:
                  add = geometry.intersectsExtent(feature.getGeometry().getExtent());break;
              }
              if (true === add) {
                features.push(feature);
              }
            });
            break;
        }
      }

      return {
        features: features,
        layer: vectorLayer
      };
    }

    /**
     *  @FIXME add description
     */

  }, {
    key: '_printSingleAtlas',
    value: function _printSingleAtlas() {
      var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref15$atlas = _ref15.atlas,
          atlas = _ref15$atlas === undefined ? {} : _ref15$atlas,
          _ref15$features = _ref15.features,
          features = _ref15$features === undefined ? [] : _ref15$features;

      var field = atlas.atlas && atlas.atlas.field_name ? atlas.atlas.field_name : '$id';
      return printAtlas({
        field: field,
        values: features.map(function (feat) {
          return feat.attributes['$id' === field ? _constant.G3W_FID : field];
        }),
        template: atlas.name,
        download: true
      }).then(function (_ref16) {
        var url = _ref16.url;

        _gui2.default.downloadWrapper(downloadFile, { url: url, filename: atlas.name, mime_type: 'application/pdf' });
      });
    }

    /**
     * @FIXME add description
     *
     * @param ids
     * @param container
     * @param relationData
     */

  }, {
    key: 'showChart',
    value: function showChart(ids, container, relationData) {
      this.emit('show-chart', ids, container, relationData);
    }

    /**
     * @FIXME add description
     * 
     * @param container DOM element
     */

  }, {
    key: 'hideChart',
    value: function hideChart(container) {
      this.emit('hide-chart', container);
    }

    /**
     * @FIXME add description
     *
     * @param ids
     * @param layer
     * @param feature
     * @param action
     * @param index
     * @param container
     */

  }, {
    key: 'showRelationsChart',
    value: function showRelationsChart() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var layer = arguments[1];
      var feature = arguments[2];
      var action = arguments[3];
      var index = arguments[4];
      var container = arguments[5];

      action.state.toggled[index] = !action.state.toggled[index];
      if (action.state.toggled[index]) {
        this.emit('show-chart', ids, container, {
          relations: this._relations[layer.id],
          fid: feature.attributes[_constant.G3W_FID],
          height: 400
        });
      } else {
        this.hideChart(container);
      }
    }

    /**
     * @FIXME add description
     *
     * @param layer
     * @param feature
     */

  }, {
    key: 'printAtlas',
    value: function printAtlas(layer, feature) {
      var _this11 = this;

      var features = feature ? [feature] : layer.features;
      var atlasLayer = this.getAtlasByLayerId(layer.id);

      /** @FIXME add description */
      if (atlasLayer.length <= 1) {
        this._printSingleAtlas({ features: features, atlas: atlasLayer[0] });
        return;
      }

      var inputs = '';

      atlasLayer.forEach(function (atlas, index) {
        var id = getUniqueDomId();
        inputs += '<input id="' + id + '" g3w_atlas_index="' + index + '" class="magic-radio" type="radio" name="template" value="' + atlas.name + '"/>';
        inputs += '<label for="' + id + '">' + atlas.name + '</label>';
        inputs += '<br>';
      });

      _gui2.default.showModalDialog({
        title: t('sdk.atlas.template_dialog.title'),
        message: inputs,
        buttons: {
          success: {
            label: "OK",
            className: "skin-button",
            callback: function callback() {
              var index = $('input[name="template"]:checked').attr('g3w_atlas_index');
              if (undefined === index) {
                return false; // prevent default
              }
              _this11._printSingleAtlas({ features: features, atlas: atlasLayer[index] });
            }
          }
        }
      });
    }

    /**
     * @FIXME add description
     *
     * @param layer
     */

  }, {
    key: 'showLayerDownloadFormats',
    value: function showLayerDownloadFormats(layer) {
      var name = _QueryResultsActionDownloadFormats2.default.name;
      layer[name].active = !layer[name].active;
      this.setLayerActionTool({
        layer: layer,
        component: layer[name].active ? _QueryResultsActionDownloadFormats2.default : null,
        config: layer[name].active ? this.state.actiontools[name][layer.id] : null
      });
    }

    /**
     * @FIXME add description
     *
     * @param type
     * @param layer
     * @param features
     * @param action
     * @param index
     */

  }, {
    key: 'downloadFeatures',
    value: function () {
      var _ref17 = _asyncToGenerator(function* (type, layer) {
        var features = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        var _this12 = this;

        var action = arguments[3];
        var index = arguments[4];


        if (features && !Array.isArray(features)) {
          features = [features];
        }

        var _state$query = this.state.query,
            query = _state$query === undefined ? {} : _state$query;

        var data = {
          fids: features.map(function (f) {
            return f.attributes[_constant.G3W_FID];
          }).join(',')
        };

        /**
         * A function that che be called in case of querybypolygon
         *
         * @param active
         */
        var runDownload = function () {
          var _ref18 = _asyncToGenerator(function* () {
            var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;


            if (features.length > 1) {
              layer[_QueryResultsActionDownloadFormats2.default.name].active = active;
              _this12.setLayerActionTool({ layer: layer });
            }

            yield _gui2.default.downloadWrapper(function () {
              var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  layer = _ref19.layer,
                  type = _ref19.type,
                  data = _ref19.data;

              return _catalogLayers2.default.getLayerById(layer.id).getDownloadFilefromDownloadDataType(type, { data: data }) || Promise.resolve();
            }, {
              layer: layer,
              type: type,
              data: data
            });

            var downloadsactions = _this12.state.layersactions[layer.id].find(function (action) {
              return 'downloads' === action.id;
            });

            /** @FIXME add description */
            if (features.length > 1 && undefined === downloadsactions) {
              layer[type].active = false;
              _this12.setLayerActionTool({ layer: layer });
            }

            /** @FIXME add description */
            if (features.length > 1 && undefined !== downloadsactions) {
              layer[_QueryResultsActionDownloadFormats2.default.name].active = false;
            }

            /** @FIXME add description */
            if (features.length <= 1 && undefined === downloadsactions) {
              action.state.toggled[index] = false;
            }

            /** @FIXME add description */
            if (features.length <= 1 && undefined !== downloadsactions) {
              downloadsactions.state.toggled[index] = false;
            }

            /** @FIXME add description */
            if (features.length <= 1) {
              _this12.setCurrentActionLayerFeatureTool({ index: index, action: action, layer: layer });
            }
          });

          return function runDownload() {
            return _ref18.apply(this, arguments);
          };
        }();

        /** @FIXME add description */
        if ('polygon' !== query.type) {
          yield runDownload();
          return;
        }

        // check if multi-download if present
        var downloadsactions = this.state.layersactions[layer.id].find(function (action) {
          return action.id === 'downloads';
        });

        var config = {
          choices: [{
            id: getUniqueDomId(),
            type: 'feature',
            label: 'sdk.mapcontrols.querybypolygon.download.choiches.feature.label'
          }, {
            id: getUniqueDomId(),
            type: 'polygon',
            label: 'sdk.mapcontrols.querybypolygon.download.choiches.feature_polygon.label'
          }],
          // choose between only feature attribute or also polygon attribute
          download: function download(type) {
            if ('polygon' === type) {
              // id type polygon add parameters to api download
              data.sbp_qgs_layer_id = layer.id;
              data.sbp_fid = query.fid;
            } else {
              // force to remove
              delete data.sbp_fid;
              delete data.sbp_qgs_layer_id;
            }
            runDownload(true);
          }
        };

        /** @FIXME add description */
        if (1 === features.length && undefined === downloadsactions) {
          action.state.toggled[index] = true;
        }

        /** @FIXME add description */
        if (1 === features.length) {
          this.state.actiontools[_QueryResultsActionQueryPolygonCSVAttributes2.default.name] = this.state.actiontools[layer.id] || {};
          this.state.actiontools[_QueryResultsActionQueryPolygonCSVAttributes2.default.name][layer.id] = config;
          this.setCurrentActionLayerFeatureTool({
            layer: layer,
            index: index,
            action: action,
            component: _QueryResultsActionQueryPolygonCSVAttributes2.default
          });
        }

        /** @FIXME add description */
        if (undefined === downloadsactions && 1 !== features.length) {
          layer[type].active = !layer[type].active;
        }

        /** @FIXME add description */
        if (1 !== features.length) {
          var has_config = downloadsactions || layer[type].active && undefined === downloadsactions;
          this.setLayerActionTool({
            layer: layer,
            component: has_config ? _QueryResultsActionQueryPolygonCSVAttributes2.default : null,
            config: has_config ? config : null
          });
        }
      });

      function downloadFeatures(_x26, _x27) {
        return _ref17.apply(this, arguments);
      }

      return downloadFeatures;
    }()

    /**
     * @FIXME add description
     */

  }, {
    key: 'downloadGpx',
    value: function downloadGpx() {
      var _this13 = this;

      var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layerId = _ref20.id;

      var feature = arguments[1];

      _catalogLayers2.default.getLayerById(layerId).getGpx({ fid: feature ? feature.attributes[_constant.G3W_FID] : null }).catch(function (err) {
        _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this13.layerMenu.loading.shp = false;_this13._hideMenu();
      });
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'downloadXls',
    value: function downloadXls() {
      var _this14 = this;

      var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layerId = _ref21.id;

      var feature = arguments[1];

      _catalogLayers2.default.getLayerById(layerId).getXls({ fid: feature ? feature.attributes[_constant.G3W_FID] : null }).catch(function (err) {
        _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this14.layerMenu.loading.shp = false;_this14._hideMenu();
      });
    }

    /**
     *
     * @FIXME add description
     *
     * @param layer
     * @param actionId
     */

  }, {
    key: 'listenClearSelection',
    value: function listenClearSelection(layer, actionId) {
      var _this15 = this;

      if (layer.external) {
        layer.features.forEach(function (feature) {
          var selectionFeature = layer.selection.features.find(function (selectionFeature) {
            return feature.id === selectionFeature.getId();
          });
          feature.selection = selectionFeature ? selectionFeature.selection : { selected: false };
        });
      } else {
        var _layer = _catalogLayers2.default.getLayerById(layer.id);
        var handler = function handler() {
          layer.features.forEach(function (feature, index) {
            return _this15.state.layersactions[layer.id].find(function (action) {
              return action.id === actionId;
            }).state.toggled[index] = false;
          });
        };
        _layer.on('unselectionall', handler);
        this.unlistenerlayeractionevents.push({ layer: _layer, event: 'unselectionall', handler: handler });
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'unlistenerEventsActions',
    value: function unlistenerEventsActions() {
      this.unlistenerlayeractionevents.forEach(function (obj) {
        return obj.layer.off(obj.event, obj.handler);
      });
      this.unlistenerlayeractionevents = [];
    }

    /**
     * Toggle filter token on a layer
     *
     * @param layer
     */

  }, {
    key: 'addRemoveFilter',
    value: function addRemoveFilter(layer) {
      _catalogLayers2.default.getLayerById(layer.id).toggleFilterToken();
    }

    /**
     * Save current filter for a layer
     * 
     * @since 3.9.0
     */

  }, {
    key: 'saveFilter',
    value: function saveFilter(layer) {
      _catalogLayers2.default.getLayerById(layer.id).saveFilter();
    }

    /**
     * Initial check of selection active on layer
     *
     * @param opts.layer
     * @param opts.feature
     * @param opts.index
     * @param opts.action
     */

  }, {
    key: 'checkFeatureSelection',
    value: function checkFeatureSelection() {
      var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref22.layer,
          feature = _ref22.feature,
          index = _ref22.index,
          action = _ref22.action;

      if (layer.external) {
        action.state.toggled[index] = feature.selection.selected;
      } else if (feature) {
        // project layer
        var pLayer = _catalogLayers2.default.getLayerById(layer.id);
        action.state.toggled[index] =
        //need to check if set active filter and no saved filter is set
        pLayer.getFilterActive() && null == pLayer.getCurrentFilter() ||
        //or if feature fid is in selected array
        pLayer.hasSelectionFid(feature ? this._getFeatureId(feature, layer.external) : null);
      }
    }

    /**
     * @FIXME add description
     */

  }, {
    key: 'removeQueryResultLayerFromMap',
    value: function removeQueryResultLayerFromMap() {
      this.resultsQueryLayer.getSource().clear();
      this.mapService.getMap().removeLayer(this.resultsQueryLayer);
    }

    /**
     * @FIXME add description
     *
     * @since 3.9.0
     */

  }, {
    key: 'addQueryResultLayerToMap',
    value: function addQueryResultLayerToMap(feature) {
      this.resultsQueryLayer.getSource().addFeature(feature);
      this.mapService.getMap().addLayer(this.resultsQueryLayer);
    }

    /**
     * Show layerQuery result on map
     */

  }, {
    key: 'addQueryResultsLayerToMap',
    value: function addQueryResultsLayerToMap(_ref23) {
      var feature = _ref23.feature;

      this.removeQueryResultLayerFromMap();
      this.addQueryResultLayerToMap(feature);
      this.mapService.setZIndexLayer({ layer: this.resultsQueryLayer }); // make sure that layer is on top of other map.
    }

    /**
     * Show feature from coordinates
     *
     * @param coordinates
     */

  }, {
    key: 'showCoordinates',
    value: function showCoordinates(coordinates) {
      this.addQueryResultsLayerToMap({ feature: (0, _createFeatureFromCoordinates.createFeatureFromCoordinates)(coordinates) });
    }

    /**
     * Show BBox
     *
     * @param bbox
     */

  }, {
    key: 'showBBOX',
    value: function showBBOX(bbox) {
      this.addQueryResultsLayerToMap({ feature: (0, _createFeatureFromBBOX.createFeatureFromBBOX)(bbox) });
    }

    /**
     * Show Geometry
     *
     * @param geometry
     */

  }, {
    key: 'showGeometry',
    value: function showGeometry(geometry) {
      if (geometry) {
        this.addQueryResultsLayerToMap({ feature: (0, _createFeatureFromGeometry.createFeatureFromGeometry)({ geometry: geometry }) });
      }
    }

    /**
     * @FIXME add description
     *
     * @param layer
     * @param feature
     */

  }, {
    key: 'goToGeometry',
    value: function goToGeometry(layer, feature) {
      var _this16 = this;

      if (!feature.geometry) {
        return;
      }
      var handlerOptions = {
        mapServiceMethod: this.isOneLayerResult() ? 'zoomToFeatures' : 'highlightGeometry',
        firstParam: this.isOneLayerResult() ? [feature] : feature.geometry,
        options: this.isOneLayerResult() ? {} : { layerId: layer.id, duration: 1500 }
      };
      if (this._asyncFnc.goToGeometry.async) {
        this._asyncFnc.todo = this.mapService[handlerOptions.mapServiceMethod].bind(this.mapService, handlerOptions.firstParam, handlerOptions.options);
      } else {
        setTimeout(function () {
          return _this16.mapService[handlerOptions.mapServiceMethod](handlerOptions.firstParam, handlerOptions.options);
        });
      }
    }

    /**
     * Save layer result
     * @param opts.layer current layer
     * @parm opts.type type of format
     */

  }, {
    key: 'saveLayerResult',
    value: function saveLayerResult() {
      var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref24.layer,
          _ref24$type = _ref24.type,
          type = _ref24$type === undefined ? 'csv' : _ref24$type;

      this.downloadFeatures(type, layer, layer.features);
    }

    /**
     * @FIXME add description
     *
     * @param layer
     * @param feature
     */

  }, {
    key: 'highlightGeometry',
    value: function highlightGeometry(layer, feature) {
      if (feature.geometry) {
        this.mapService.highlightGeometry(feature.geometry, { layerId: layer.id, zoom: false, duration: Infinity });
      }
    }

    /**
     * @FIXME add description
     *
     * @param layer
     */

  }, {
    key: 'clearHighlightGeometry',
    value: function clearHighlightGeometry(layer) {
      this.mapService.clearHighlightGeometry();
      if (this.isOneLayerResult()) {
        this.highlightFeaturesPermanently(layer);
      }
    }

    /**
     * Handle show Relation on result
     *
     * @param opts.relation
     * @param opts.layerId  current layer father id
     * @param opts.feature  current feature father id
     */

  }, {
    key: 'showRelation',
    value: function showRelation() {
      var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          relation = _ref25.relation,
          layerId = _ref25.layerId,
          feature = _ref25.feature;

      var projectRelation = this._project.getRelationById(relation.name);
      _gui2.default.pushContent({
        content: new RelationsPage({
          currentview: 'relation',
          relations: [projectRelation],
          chartRelationIds: this.findPlotId(projectRelation.referencingLayer) ? [projectRelation.referencingLayer] : [],
          nmRelation: this._project.getRelationById(relation.nmRelationId),
          layer: { id: layerId },
          feature: feature
        }),
        crumb: {
          title: projectRelation.name
        },
        title: projectRelation.name,
        closable: false
      });
    }
  }, {
    key: 'showQueryRelations',


    /**
     * @FIXME add description
     *
     * @param layer
     * @param feature
     * @param action
     */
    value: function showQueryRelations(layer, feature, action) {
      _gui2.default.changeCurrentContentOptions({ crumb: { title: layer.title } });

      _gui2.default.pushContent({
        content: new RelationsPage({
          relations: action.relations,
          chartRelationIds: action.chartRelationIds,
          feature: feature,
          layer: layer
        }),
        backonclose: true,
        title: _constant.LIST_OF_RELATIONS_TITLE,
        id: _constant.LIST_OF_RELATIONS_ID,
        crumb: {
          title: _constant.LIST_OF_RELATIONS_TITLE,
          trigger: null
        },
        closable: false
      });
    }

    /**
     * Get layer from current state.layers showed on result
     *
     * @since 3.9.0
     */

  }, {
    key: '_getLayer',
    value: function _getLayer(layerId) {
      return this.state.layers.find(function (l) {
        return l.id === layerId;
      });
    }

    /**
     * Get external layer from current state.layers showed on result
     *
     * @since 3.9.0
     */

  }, {
    key: '_getExternalLayer',
    value: function _getExternalLayer(layerId) {
      return (this._getLayer(layerId) || {}).external;
    }

    /**
     * Get id of the  feature
     *
     * @since 3.9.0
     */

  }, {
    key: '_getFeatureId',
    value: function _getFeatureId(feature, external) {
      return external ? feature.id : feature.attributes[_constant.G3W_FID];
    }

    /**
     * Get ids of the selected features
     *
     * @since 3.9.0
     */

  }, {
    key: '_getFeaturesIds',
    value: function _getFeaturesIds(features, external) {
      var _this17 = this;

      return features.map(function (feature) {
        return _this17._getFeatureId(feature, external);
      });
    }

    /**
     * Extract features from layer object
     *
     * @since 3.9.0
     */

  }, {
    key: '_getLayerFeatures',
    value: function _getLayerFeatures() {
      var layer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return layer.features || [];
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_toggleLayerFeatureBox',
    value: function _toggleLayerFeatureBox(layer, feature, collapsed) {
      var boxId = this.getBoxId(layer, feature);
      var box = boxId && this.state.layersFeaturesBoxes[boxId];
      if (box) {
        setTimeout(function () {
          return box.collapsed = collapsed;
        }); // due to vue reactivity, wait a little bit before update layers
      }
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_removeLayerFeatureBox',
    value: function _removeLayerFeatureBox(layer, feature_to_delete) {
      var _this18 = this;

      setTimeout(function () {
        return delete _this18.state.layersFeaturesBoxes[_this18.getBoxId(layer, feature_to_delete)];
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionGoToGeometry',
    value: function _setActionGoToGeometry(layer) {
      this.state.layersactions[layer.id].push({
        id: 'gotogeometry',
        download: false,
        mouseover: true,
        class: _gui2.default.getFontClass('marker'),
        hint: 'sdk.mapcontrols.query.actions.zoom_to_feature.hint',
        cbk: throttle(this.goToGeometry.bind(this))
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionShowQueryAndPlotsRelations',
    value: function _setActionShowQueryAndPlotsRelations(layer) {
      var _this19 = this;

      var relations = this._relations[layer.id].filter(function (relation) {
        return 'MANY' === relation.type;
      });
      var chartRelationIds = [];

      relations.forEach(function (relation) {
        var id = _this19.plotLayerIds.find(function (id) {
          return id === relation.referencingLayer;
        });
        if (id) {
          chartRelationIds.push(id);
        }
      });

      /** @FIXME add description */
      if (relations.length > 0) {
        this.state.layersactions[layer.id].push({
          id: 'show-query-relations',
          download: false,
          class: _gui2.default.getFontClass('relation'),
          hint: 'sdk.mapcontrols.query.actions.relations.hint',
          cbk: this.showQueryRelations,
          relations: relations,
          chartRelationIds: chartRelationIds
        });
      }

      /** @FIXME add description */
      if (chartRelationIds.length > 0) {
        this.state.layersactions[layer.id].push({
          id: 'show-plots-relations',
          download: false,
          opened: true,
          class: _gui2.default.getFontClass('chart'),
          state: this.createActionState({ layer: layer }),
          hint: 'sdk.mapcontrols.query.actions.relations_charts.hint',
          cbk: throttle(this.showRelationsChart.bind(this, chartRelationIds))
        });
      }
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionPrintAtlas',
    value: function _setActionPrintAtlas(layer) {
      this.state.layersactions[layer.id].push({
        id: 'printatlas',
        download: true,
        class: _gui2.default.getFontClass('print'),
        hint: 'sdk.tooltips.atlas',
        cbk: this.printAtlas.bind(this)
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionDownloadFeature',
    value: function _setActionDownloadFeature(layer) {
      var _this20 = this;

      var _layer$downloads = _slicedToArray(layer.downloads, 1),
          format = _layer$downloads[0]; // NB: format == layer.downloads[0]


      var _cbk = this.downloadFeatures.bind(this, format);
      layer[format] = Vue.observable({ active: false });
      this.state.layersactions[layer.id].push({
        id: 'download_' + format + '_feature',
        download: true,
        state: this.createActionState({ layer: layer }),
        class: _gui2.default.getFontClass('download'),
        hint: 'sdk.tooltips.download_' + format,
        cbk: function cbk(layer, feature, action, index) {
          action.state.toggled[index] = !action.state.toggled[index];
          if (action.state.toggled[index]) {
            _cbk(layer, feature, action, index);
          } else {
            _this20.setCurrentActionLayerFeatureTool({ index: index, action: action, layer: layer });
          }
        }
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionMultiDownloadFeature',
    value: function _setActionMultiDownloadFeature(layer) {
      var _this21 = this;

      var downloads = [];
      layer.downloads.forEach(function (format) {
        downloads.push({
          id: 'download_' + format + '_feature',
          download: true,
          format: format,
          class: _gui2.default.getFontClass(format),
          hint: 'sdk.tooltips.download_' + format,
          cbk: function cbk(layer, feature, action, index) {
            // un-toggle downloads action
            _this21.downloadFeatures(format, layer, feature, action, index);
            if ('polygon' !== _this21.state.query.type) {
              var downloadsaction = _this21.state.layersactions[layer.id].find(function (action) {
                return 'downloads' === action.id;
              });
              downloadsaction.cbk(layer, feature, downloadsaction, index);
            }
          }
        });
      });

      // set actionstools configs
      this.state.actiontools[_QueryResultsActionDownloadFormats2.default.name] = this.state.actiontools[_QueryResultsActionDownloadFormats2.default.name] || {};
      this.state.actiontools[_QueryResultsActionDownloadFormats2.default.name][layer.id] = { downloads: downloads };
      // check if it has download actions
      this.state.layersactions[layer.id].push({
        id: 'downloads',
        download: true,
        class: _gui2.default.getFontClass('download'),
        state: this.createActionState({ layer: layer }),
        toggleable: true,
        hint: 'Downloads',
        change: function change(_ref26) {
          var _this22 = this;

          var features = _ref26.features;

          features.forEach(function (feature, index) {
            if (undefined === _this22.state.toggled[index]) {
              VM.$set(_this22.state.toggled, index, false);
            } else {
              _this22.state.toggled[index] = false;
            }
          });
        },

        cbk: function cbk(layer, feature, action, index) {
          action.state.toggled[index] = !action.state.toggled[index];
          _this21.setCurrentActionLayerFeatureTool({ layer: layer, index: index, action: action, component: action.state.toggled[index] ? _QueryResultsActionDownloadFormats2.default : null });
        }
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionRemoveFeatureFromResult',
    value: function _setActionRemoveFeatureFromResult(layer) {
      this.state.layersactions[layer.id].push({
        id: 'removefeaturefromresult',
        download: false,
        mouseover: true,
        class: _gui2.default.getFontClass('minus-square'),
        style: {
          color: 'red'
        },
        hint: 'sdk.mapcontrols.query.actions.remove_feature_from_results.hint',
        cbk: this.removeFeatureLayerFromResult.bind(this)
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionSelection',
    value: function _setActionSelection(layer) {
      var _this23 = this;

      this.state.layersactions[layer.id].push({
        id: 'selection',
        download: false,
        class: _gui2.default.getFontClass('success'),
        hint: 'sdk.mapcontrols.query.actions.add_selection.hint',
        state: this.createActionState({ layer: layer }),
        init: function init() {
          var _ref27 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              feature = _ref27.feature,
              index = _ref27.index,
              action = _ref27.action;

          if (undefined !== layer.selection.active) {
            _this23.checkFeatureSelection({ layer: layer, index: index, feature: feature, action: action });
          }
        },
        /** @since 3.9.0 reactive `toggled` when adding new feature and then bind click on query result context */
        change: function change(_ref28) {
          var _this24 = this;

          var features = _ref28.features;

          features.forEach(function (feature, index) {
            // exclude existing feature
            if (undefined === _this24.state.toggled[index]) {
              //add reactive property of array
              VM.$set(_this24.state.toggled, index, false);
            }
          });
        },

        cbk: throttle(this.addToSelection.bind(this))
      });

      // In case of external layer don't listen to `selection` event
      this.listenClearSelection(layer, 'selection');
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionLinkZoomToFid',
    value: function _setActionLinkZoomToFid(layer) {
      this.state.layersactions[layer.id].push({
        id: 'link_zoom_to_fid',
        download: false,
        class: _gui2.default.getFontClass('link'),
        hint: 'sdk.mapcontrols.query.actions.copy_zoom_to_fid_url.hint',
        hint_change: {
          hint: 'sdk.mapcontrols.query.actions.copy_zoom_to_fid_url.hint_change',
          duration: 1000
        },
        cbk: this.copyZoomToFidUrl.bind(this)
      });
    }

    /**
     * @since 3.9.0
     */

  }, {
    key: '_setActionEditing',
    value: function _setActionEditing(layer) {
      var _this25 = this;

      this.state.layersactions[layer.id].push({
        id: 'editing',
        class: _gui2.default.getFontClass('pencil'),
        hint: 'Editing',
        cbk: function cbk(layer, feature) {
          _this25.editFeature({ layer: layer, feature: feature });
        }
      });
    }
  }]);

  return QueryResultsService;
}(G3WObject);

/**
 * @deprecated since 3.8.0 Will be deleted in 4.x. Use QueryResultsService::updateLayerResultFeatures(layer) instead
 */


QueryResultsService.prototype.addRemoveFeaturesToLayerResult = deprecate(QueryResultsService.prototype.updateLayerResultFeatures, '[G3W-CLIENT] QueryResultsService::addRemoveFeaturesToLayerResult(layer) is deprecated');

/**
 * @deprecated since 3.9.0 Will be deleted in 4.x. Use GUI::downloadWrapper(downloadFnc, options) instead
 */
QueryResultsService.prototype.downloadApplicationWrapper = deprecate(_gui2.default.downloadWrapper, '[G3W-CLIENT] QueryResultsService::downloadApplicationWrapper(downloadFnc, options) is deprecated');

/**
 * @deprecated since 3.9.0 Will be deleted in 4.x. Use QueryResultsService::addToSelection(layer) instead
 */
QueryResultsService.prototype.selectionFeaturesLayer = deprecate(_addToSelection.addToSelection, '[G3W-CLIENT] QueryResultsService::selectionFeaturesLayer(layer) is deprecated');

/**
 * @deprecated since 3.9.0 Will be deleted in 4.x. Use QueryResultsService::removeFromSelection(layer) instead
 */
QueryResultsService.prototype.clearSelectionExtenalLayer = deprecate(_addToSelection.addToSelection, '[G3W-CLIENT] QueryResultsService::clearSelectionExtenalLayer(layer) is deprecated');

/**
 * Alias functions
 * 
 * @TODO choose which ones deprecate
 */
QueryResultsService.prototype.init = QueryResultsService.prototype.clearState;
QueryResultsService.prototype.reset = QueryResultsService.prototype.clearState;
QueryResultsService.prototype.addToSelection = _addToSelection.addToSelection;
QueryResultsService.prototype.removeFromSelection = _removeFromSelection.removeFromSelection;

/**
 * Core methods used from other classes to react before or after its call
 */
QueryResultsService.prototype.setters = {

  /**
   * Hook method called when response is handled by Data Provider
   *
   * @param { Object }                             queryResponse
   * @param { Array }                              queryResponse.data
   * @param { 'coordinates' | 'bbox' | 'polygon' } queryResponse.type
   * @param { Object }                             queryResponse.query
   * @param { Object }                             queryResponse.query.external
   * @param { boolean }                            queryResponse.query.external.add       - whether add external layers to response
   * @param { Object }                             queryResponse.query.external.filter
   * @param { boolean }                            queryResponse.query.external.SELECTED
   * @param { Object }                             options
   * @param { boolean }                            options.add                            - whether is a new query request (add/remove query request)
   */
  setQueryResponse: function setQueryResponse(queryResponse) {
    var _this26 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { add: false };


    // set mandatory queryResponse fields
    if (!queryResponse.data) queryResponse.data = [];
    if (!queryResponse.query) queryResponse.query = { external: { add: false, filter: { SELECTED: false } } };
    if (!queryResponse.query.external) queryResponse.query.external = { add: false, filter: { SELECTED: false } };

    // whether add response to current results using addLayerFeaturesToResultsAction
    if (false === options.add) {
      // in case of new request results reset the query otherwise maintain the previous request
      this.clearState();
      this.state.query = queryResponse.query;
      this.state.type = queryResponse.type;
    }

    // whether add external layers to response
    if (true === queryResponse.query.external.add && false === options.add) {
      var catalogService = _gui2.default.getService('catalog');

      /** @type { boolean | undefined } */
      var FILTER_SELECTED = queryResponse.query.external.filter.SELECTED;

      // add visible layers to query response (vector layers)
      this._vectorLayers.forEach(function (layer) {
        var id = layer.get('id');
        var is_selected = catalogService.isExternalLayerSelected({ id: id, type: 'vector' });
        var is_visible = layer.getVisible();
        // TODO: extract this into `layer.isSomething()` ?
        if (is_visible && (is_selected === FILTER_SELECTED || undefined === FILTER_SELECTED)) {
          queryResponse.data['__g3w_marker' === id // keep geocoding control "marker" layer at top
          ? 'unshift' : 'push'](_this26.getVectorLayerFeaturesFromQueryRequest(layer, queryResponse.query));
        }
      });
    }

    if (false === options.add) {
      switch (this.state.query.type) {
        case 'coordinates':
          this.showCoordinates(this.state.query.coordinates);break;
        case 'bbox':
          this.showBBOX(this.state.query.bbox);break;
        case 'polygon':
        case 'drawpolygon':
          this.showGeometry(this.state.query.geometry);break;
      }
    }

    // Convert response from DataProvider into a QueryResult component data structure
    var layers = [];
    queryResponse.data.forEach(function (featuresForLayer) {
      [].concat(featuresForLayer).forEach(function (featuresForLayer) {
        var layer = _this26._responseToLayer(featuresForLayer);
        if (layer) {
          layers.push(layer);
        }
      });
    });

    this.setLayersData(layers, options);
  },


  /**
   * Setter method called when adding layer and feature for response
   *
   * @param layers
   * @param options
   */
  setLayersData: function setLayersData(layers) {
    var _this27 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { add: false };

    if (false === options.add) {
      // set the right order of result layers based on TOC
      this._currentLayerIds = layers.map(function (layer) {
        return layer.id;
      });
      // sort layers as Catalog project layers.
      layers.sort(function (a, b) {
        return _this27._projectLayerIds.indexOf(a.id) > _this27._projectLayerIds.indexOf(b.id) ? 1 : -1;
      });
    }
    // get features from add pick layer in case of a new request query
    layers.forEach(function (layer) {
      options.add ? _this27.updateLayerResultFeatures(layer) : _this27.state.layers.push(layer);
    });
    this.setActionsForLayers(layers, { add: options.add });
    this.state.changed = true;
  },


  /**
   * Add custom component in query result
   *
   * @param component
   */
  addComponent: function addComponent(component) {
    this.state.components.push(component);
  },


  /**
   * @FIXME add description
   *
   * @param actions
   * @param layers
   */
  addActionsForLayers: function addActionsForLayers(actions, layers) {},


  /**
   * @FIXME add description
   *
   * @param element
   */
  postRender: function postRender(element) {},


  /**
   * @FIXME add description
   */
  closeComponent: function closeComponent() {},


  /**
   * Called when layer result features is changed
   *
   * @param layer
   */
  changeLayerResult: function changeLayerResult(layer) {
    this.state.layersactions[layer.id].forEach(function (action) {
      return action.change && action.change(layer);
    }); // call if present change method to action
    this.resetCurrentActionToolsLayer(layer); // reset layer current actions tools
  },


  /**
   * @FIXME add description
   */
  activeMapInteraction: function activeMapInteraction() {},


  /**
   * Setter method related to relation table
   */
  editFeature: function editFeature() {
    var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layer = _ref29.layer,
        feature = _ref29.feature;
  },


  /**
   * Setter method called when opening/closing feature info data content.
   *
   * @param opts.open
   * @param opts.layer
   * @param opts.feature
   * @param opts.container
   */
  openCloseFeatureResult: function openCloseFeatureResult() {
    var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        open = _ref30.open,
        layer = _ref30.layer,
        feature = _ref30.feature,
        container = _ref30.container;
  },


  /**
   * Remove a feature from current layer result
   *
   * @param layer
   * @param feature
   * 
   * @since 3.9.0
   */
  removeFeatureLayerFromResult: function removeFeatureLayerFromResult(layer, feature) {
    this.updateLayerResultFeatures({ id: layer.id, external: layer.external, features: [feature] });
  }
};

module.exports = QueryResultsService;

},{"app/constant":5,"components/QueryResultsActionDownloadFormats.vue":237,"components/QueryResultsActionQueryPolygonCSVAttributes.vue":239,"core/g3wobject":8,"core/i18n/i18n.service":9,"core/layers/layer":18,"core/layers/utils/addToSelection":36,"core/layers/utils/removeFromSelection":37,"core/layers/vectorlayer":38,"g3w-ol/interactions/pickcoordinatesinteraction":68,"gui/print/printservice":121,"gui/relations/vue/relationspage":132,"services/application":310,"services/data":317,"services/gui":319,"store/catalog-layers":329,"store/projects":335,"util-deprecate":"util-deprecate","utils":419,"utils/createFeatureFromBBOX":357,"utils/createFeatureFromCoordinates":358,"utils/createFeatureFromGeometry":360,"utils/getAlphanumericPropertiesFromFeature":390,"utils/intersects":421,"utils/within":465}],130:[function(require,module,exports){
var _QueryResults = require('components/QueryResults.vue');

var vueComponentOptions = _interopRequireWildcard(_QueryResults);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Component = require('gui/component/component');
var QueryResultsService = require('gui/queryresults/queryresultsservice');

var InternalComponent = Vue.extend(vueComponentOptions);

function QueryResultsComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.id = "queryresults";
  this.title = "Query Results";
  this._service = new QueryResultsService();
  this.setInternalComponent = function () {
    this.internalComponent = new InternalComponent({
      queryResultsService: this._service
    });
    this.internalComponent.querytitle = this._service.state.querytitle;
  };

  this.getElement = function () {
    if (this.internalComponent) return this.internalComponent.$el;
  };

  this._service.onafter('setLayersData', _asyncToGenerator(function* () {
    !_this.internalComponent && _this.setInternalComponent();
    yield _this.internalComponent.$nextTick();
  }));

  this.layout = function (width, height) {};
  this.unmount = function () {
    this.getService().closeComponent();
    return base(this, 'unmount');
  };
}

inherit(QueryResultsComponent, Component);

module.exports = QueryResultsComponent;

},{"components/QueryResults.vue":234,"gui/component/component":77,"gui/queryresults/queryresultsservice":129,"utils":419}],131:[function(require,module,exports){
var _constant = require('app/constant');

var _relations = require('services/relations');

var _relations2 = _interopRequireDefault(_relations);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var G3WObject = require('core/g3wobject');

function RelationsComponentService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state = {};
  this._options = {};
  base(this);
}

inherit(RelationsComponentService, G3WObject);

var proto = RelationsComponentService.prototype;

proto.getRelations = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options = options;
  return _relations2.default.getRelations(options);
};

proto.getRelationsNM = function () {
  var _ref2 = _asyncToGenerator(function* (_ref) {
    var nmRelation = _ref.nmRelation,
        features = _ref.features;

    return yield _relations2.default.getRelationsNM({
      nmRelation: nmRelation,
      features: features
    });
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

proto.saveRelations = function () {
  var _ref3 = _asyncToGenerator(function* (type) {
    this._options.type = type;
    var caller_download_id = _application2.default.setDownload(true);
    try {
      yield _relations2.default.save(this._options);
    } catch (err) {
      _gui2.default.showUserMessage({
        type: 'alert',
        message: err || "info.server_error",
        closable: true
      });
    }
    _application2.default.setDownload(false, caller_download_id);
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

proto.buildRelationTable = function () {
  var relations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var id = arguments[1];

  var layer = _application2.default.getCurrentProject().getLayerById(id);
  var headers = layer.getTableHeaders();
  var columns = null;
  var rows = [];
  var rows_fid = [];
  var fields = void 0;
  if (relations.length) {
    var attributes = Object.keys(relations[0].attributes);
    columns = headers.filter(function (header) {
      return attributes.indexOf(header.name) !== -1;
    });
    rows = relations.map(function (relation) {
      rows_fid.push(relation.attributes[_constant.G3W_FID]);
      return columns.map(function (column) {
        return relation.attributes[column.name];
      });
    });
    fields = columns;
    columns = columns.map(function (column) {
      return column.label;
    });
  }
  return {
    columns: columns,
    rows: rows,
    rows_fid: rows_fid,
    features: relations,
    fields: fields,
    formStructure: layer.getLayerEditingFormStructure(),
    rowFormStructure: null,
    layerId: layer.getId()
  };
};

module.exports = RelationsComponentService;

},{"app/constant":5,"core/g3wobject":8,"services/application":310,"services/gui":319,"services/relations":323,"utils":419}],132:[function(require,module,exports){
var _RelationsPage = require('components/RelationsPage.vue');

var vueComponentOptions = _interopRequireWildcard(_RelationsPage);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Component = require('gui/component/component');
var Service = require('gui/relations/relationsservice');

var InternalComponent = Vue.extend(vueComponentOptions);

var RelationsPage = function RelationsPage() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  var service = options.service || new Service();
  var layer = options.layer,
      _options$relation = options.relation,
      relation = _options$relation === undefined ? null : _options$relation,
      _options$relations = options.relations,
      relations = _options$relations === undefined ? [] : _options$relations,
      _options$feature = options.feature,
      feature = _options$feature === undefined ? null : _options$feature,
      _options$table = options.table,
      table = _options$table === undefined ? null : _options$table,
      _options$chartRelatio = options.chartRelationIds,
      chartRelationIds = _options$chartRelatio === undefined ? [] : _options$chartRelatio,
      nmRelation = options.nmRelation,
      _options$currentview = options.currentview,
      currentview = _options$currentview === undefined ? "relations" : _options$currentview;

  this.setService(service);
  var internalComponent = new InternalComponent({
    previousview: currentview,
    service: service,
    relations: relations,
    relation: relation,
    nmRelation: nmRelation,
    chartRelationIds: chartRelationIds,
    feature: feature,
    currentview: currentview,
    layer: layer,
    table: table
  });
  this.setInternalComponent(internalComponent);
  internalComponent.state = service.state;
  this.layout = function () {
    internalComponent.reloadLayout();
  };
};

inherit(RelationsPage, Component);

module.exports = RelationsPage;

},{"components/RelationsPage.vue":246,"gui/component/component":77,"gui/relations/relationsservice":131,"utils":419}],133:[function(require,module,exports){
var _querybuilder = require('services/querybuilder');

var _querybuilder2 = _interopRequireDefault(_querybuilder);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var SearchPanel = require('gui/search/vue/panel/searchpanel');

function Service() {
  base(this);
  var currentProjectState = _projects2.default.getCurrentProject().state;
  this.title = currentProjectState.search_title || "search";
  this.init = function (searchesObject) {
    this.state.searches = searchesObject || currentProjectState.search;
  };
  this.state = {
    searches: [],
    searchtools: [],
    querybuildersearches: _querybuilder2.default.getCurrentProjectItems()
  };
}

inherit(Service, G3WObject);

var proto = Service.prototype;

proto.removeItem = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref.type,
      index = _ref.index;

  switch (type) {
    case 'querybuilder':
      this.state.querybuildersearches.splice(index, 1);
      break;
  }
};

proto.getTitle = function () {
  return this.title;
};

proto.showPanel = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var panel = new SearchPanel(config);
  panel.show();
  return panel;
};

proto.cleanSearchPanels = function () {
  this.state.panels = {};
};

proto.stop = function () {
  var d = $.Deferred();
  d.resolve();
  return d.promise();
};

proto.addTool = function (searchTool) {
  this.state.searchtools.push(searchTool);
};

proto.addTools = function (searchTools) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = searchTools[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var searchTool = _step.value;

      this.addTool(searchTool);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

proto.addQueryBuilderSearch = function (querybuildersearch) {
  this.state.querybuildersearches.push(querybuildersearch);
};

proto.removeTool = function (searchTool) {};

proto.removeTools = function () {
  this.state.searchtools.splice(0);
};

proto.reload = function () {
  this.state.searches = _projects2.default.getCurrentProject().state.search;
  this.state.querybuildersearches = _querybuilder2.default.getCurrentProjectItems();
};

module.exports = Service;

},{"core/g3wobject":8,"gui/search/vue/panel/searchpanel":134,"services/querybuilder":322,"store/projects":335,"utils":419}],134:[function(require,module,exports){
var _SearchPanel = require('components/SearchPanel.vue');

var vueComponentOptions = _interopRequireWildcard(_SearchPanel);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    uniqueId = _require.uniqueId;

var Panel = require('gui/panel');
var Service = require('gui/search/vue/panel/searchservice');

var SearchPanelComponent = Vue.extend(vueComponentOptions);

function SearchPanel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var service = options.service || new Service(options);
  this.setService(service);
  this.id = uniqueId();
  this.title = 'search';
  var SearchPanel = options.component || SearchPanelComponent;
  var internalPanel = new SearchPanel({
    service: service
  });
  this.setInternalPanel(internalPanel);
  this.unmount = function () {
    return base(this, 'unmount').then(function () {
      service.clear();
    });
  };
}

inherit(SearchPanel, Panel);

module.exports = SearchPanel;

},{"components/SearchPanel.vue":249,"gui/panel":120,"gui/search/vue/panel/searchservice":135,"utils":419}],135:[function(require,module,exports){
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Search father layer id based on result of child layer
 */
var parse_search_1n = function () {
  var _ref25 = _asyncToGenerator(function* (data, options) {
    var search_endpoint = options.search_endpoint,
        feature_count = options.feature_count,
        relation_id = options.relation_id,
        output_title = options.output_title;

    var _ref26 = data.data[0] || {},
        _ref26$features = _ref26.features,
        features = _ref26$features === undefined ? [] : _ref26$features;

    var project = _projects2.default.getCurrentProject();

    // check if it has features on result
    if (!features.length) {
      //show empty result output
      _data3.default.showEmptyOutputs();
      return [];
    }

    //get relation
    var relation = project.getRelationById(relation_id);

    //if exist relation
    if (relation) {

      var inputs = []; //store inputs

      //extract properties from relation object
      var referencedLayer = relation.referencedLayer,
          _relation$fieldRef = relation.fieldRef,
          referencingField = _relation$fieldRef.referencingField,
          referencedField = _relation$fieldRef.referencedField; // child and father relation fields

      //Number of relation fields

      var rFLength = referencingField.length;

      //Just one field
      if (1 === rFLength) {
        var _uniqueValues = new Set();
        //loop trough feature child layer
        features.forEach(function (feature) {
          var value = feature.get(referencingField[0]);
          if (!_uniqueValues.has(value)) {
            _uniqueValues.add(value);
          }
        });
        inputs.push({ attribute: referencedField[0], logicop: "OR", operator: "eq", value: Array.from(_uniqueValues) });
      } else {
        var _uniqueValues2 = [];
        features.forEach(function (feature) {
          var values = referencingField.map(function (rF) {
            return feature.get(rF);
          });
          if (!_uniqueValues2.find(function (v) {
            return v.reduce(function (accumulator, value, index) {
              return accumulator && values[index] === value;
            }, true);
          })) {
            _uniqueValues2.push(values);
            inputs.push({ attribute: referencedField, logicop: "OR", operator: "eq", value: values });
          }
        });
      }

      var layer = project.getLayerById(referencedLayer);

      data = yield _data3.default.getData('search:features', {
        inputs: {
          layer: layer,
          search_endpoint: search_endpoint,
          filter: createFilterFormInputs({ layer: layer, search_endpoint: search_endpoint, inputs: inputs }),
          formatter: 1,
          feature_count: feature_count
        },
        outputs: {
          title: output_title
        }
      });
    }
    return data;
  });

  return function parse_search_1n(_x21, _x22) {
    return _ref25.apply(this, arguments);
  };
}();

var _constant = require('app/constant');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _data2 = require('services/data');

var _data3 = _interopRequireDefault(_data2);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    toRawType = _require.toRawType,
    getUniqueDomId = _require.getUniqueDomId,
    createFilterFormInputs = _require.createFilterFormInputs,
    createSingleFieldParameter = _require.createSingleFieldParameter,
    isEmptyObject = _require.isEmptyObject,
    sortAlphabeticallyArray = _require.sortAlphabeticallyArray,
    sortNumericArray = _require.sortNumericArray;

var G3WObject = require('core/g3wobject');

var NONVALIDVALUES = [null, undefined, _constant.SEARCH_ALLVALUE];

function SearchService() {
  var _this = this;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


  this.debounces = {
    run: {
      fnc: function fnc() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _mapService$getMap$ge = _this.mapService.getMap().getSize(),
            _mapService$getMap$ge2 = _slicedToArray(_mapService$getMap$ge, 2),
            width = _mapService$getMap$ge2[0],
            heigth = _mapService$getMap$ge2[1];

        if (!_gui2.default.isMobile() || !(width === 0 || heigth === 0)) {
          _this._run.apply(_this, args);
          return;
        }
        _gui2.default.hideSidebar();
        setTimeout(function () {
          _this._run.apply(_this, args);
        }, 600);
      }
    }
  };

  base(this);

  /**
   * reactivity data
   */
  this.state = {
    title: null,
    forminputs: [],
    loading: {},
    searching: false
  };

  /**
   * @FIXME add description
   */
  this.config = config;

  var _config$options = this.config.options,
      options = _config$options === undefined ? {} : _config$options;

  var layerid = options.querylayerid || options.layerid || null;

  /**
   * @FIXME add description
   */
  this.inputdependance = {};

  /**
   * @FIXME add description
   */
  this.inputdependencies = {};

  /**
   * @FIXME add description
   */
  this.cachedependencies = {};

  /**
   * @FIXME add description
   */
  this.project = _projects2.default.getCurrentProject();

  /**
   * @FIXME add description
   */
  this.mapService = _gui2.default.getService('map');

  /**
   * @FIXME add description
   */
  this.searchLayer = null;

  /**
   * @FIXME add description
   */
  this.filter = null;

  /**
   * @FIXME add description
   */
  this.inputs = [];

  /**
   * @FIXME add description
   */
  this.state.title = config.name;

  /**
   * @FIXME add description
   */
  this.search_endpoint = config.search_endpoint;

  /**
   * @FIXME add description
   */
  this.url = options.queryurl;

  /**
   * @FIXME add description
   */
  this.filter = options.filter;

  /**
   * @type { 'search' | 'search_1n' }
   */
  this.type = this.config.type || 'search';

  /**
   * @FIXME add description
   */
  this.return = options.return || 'data';

  /**
   * @FIXME add description
   */
  this.show = 'data' === this.return && 'search' === this.type;

  /**
   * @FIXME add description
   */
  this.searchLayer = _catalogLayers2.default.getLayerById(layerid);

  /**
   * Store layers that will be searchable for that search form.
   * First one is layer owner of the search setted on admin.
   */
  this.searchLayers = [layerid].concat(_toConsumableArray(options.otherquerylayerids || [])).map(function (id) {
    return _catalogLayers2.default.getLayerById(id);
  });

  /**
   * Create the form search structure
   */
  this.createInputsFormFromFilter({ filter: options.filter || [] });
}

inherit(SearchService, G3WObject);

var proto = SearchService.prototype;

/**
 * @TODO slim down and refactor
 * 
 * Create right search structure for search form
 * 
 * @param { Object } opts
 * @param { Array } opts.filter input
 * 
 * @returns { Promise<void> } form input
 */
proto.createInputsFormFromFilter = _asyncToGenerator(function* () {
  var _this2 = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$filter = _ref2.filter,
      filter = _ref2$filter === undefined ? [] : _ref2$filter;

  var _loop = function _loop(i) {

    var input = {
      label: filter[i].label,
      attribute: filter[i].attribute,
      type: filter[i].input.type || 'textfield',
      options: _extends({}, filter[i].input.options),
      value: null,
      operator: filter[i].op,
      logicop: i === filter.length - 1 ? null : filter[i].logicop,
      id: filter[i].id || getUniqueDomId(),
      loading: false,
      widget: null
    };

    // check if it has a dependence
    var dependance_strict = undefined !== input.options.dependance_strict ? input.options.dependance_strict : false;
    var dependance = undefined !== input.options.dependance ? input.options.dependance : false;
    var isInputSelectType = ['selectfield', 'autocompletefield'].includes(input.type);
    input.options.values = undefined !== input.options.values ? input.options.values : [];
    var values = input.options.values;


    var promise = void 0;

    //In case of select input
    if ('selectfield' === input.type) {
      // ensure setting values options to empty array when undefined
      input.loading = true;

      promise = new Promise(function (resolve, reject) {

        // in case of dependence load right now
        if (dependance && dependance_strict) {
          input.loading = false;
          return resolve();
        }

        // not strictly dependence
        if (!dependance_strict) {
          _this2.getValuesFromField(input).then(function (_values) {
            values.splice.apply(values, [0, values.length].concat(_toConsumableArray(_this2.valuesToKeysValues(_values))));
          }).catch(function (err) {
            console.warn(err);values.length = 0;
          }).finally(function () {
            input.loading = false;resolve();
          });
        }
      });

      promise.then(function () {
        values[values.length && _constant.SEARCH_ALLVALUE !== values[0].value ? 'unshift' : 'push']({ value: _constant.SEARCH_ALLVALUE });
        input.value = _constant.SEARCH_ALLVALUE;
      });
    }

    // there is a dependence
    if (isInputSelectType && dependance) {
      _this2.inputdependance[input.attribute] = dependance; // set dependence of input
      _this2.state.loading[dependance] = false;
      input.options.disabled = dependance_strict; // disabled for BACKCOMP
      _this2.setInputDependencies({ master: dependance, slave: input }); // set dependence between input
    }

    // set widget type for fill dependency
    if (isInputSelectType && dependance && values.length > 0) {
      input.widget = 'valuemap';
      input.options._values = [].concat(_toConsumableArray(values));
    }

    //Set input widget
    if (isInputSelectType && dependance && !values.length && input.options.layer_id) {
      input.widget = 'valuerelation';
    }

    // add form inputs to list of search input
    _this2.state.forminputs.push(input);
  };

  for (var i = 0; i <= filter.length - 1; i++) {
    _loop(i);
  }
});

/**
 * Get return type
 */
proto.getReturnType = function () {
  return this.return;
};

/**
 * Set return type
 */
proto.setReturnType = function () {
  var returnType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data';

  this.return = returnType;
  this.show = 'data' === returnType;
};

/**
 * @param field
 * 
 * @returns {*}
 */
proto.getAutoFieldDependeciesParamField = function (field) {
  var fieldDependency = this.getCurrentFieldDependance(field);
  if (fieldDependency) {
    var _Object$entries$ = _slicedToArray(Object.entries(fieldDependency)[0], 2),
        _field = _Object$entries$[0],
        value = _Object$entries$[1];

    return this.createFieldsDependenciesAutocompleteParameter({ field: _field, value: value });
  }
};

/**
 * @param { Object } opts
 * @param opts.fields
 * @param opts.field
 * @param opts.value
 * 
 * @returns { string | undefined | * }
 */
proto.createFieldsDependenciesAutocompleteParameter = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$fields = _ref3.fields,
      fields = _ref3$fields === undefined ? [] : _ref3$fields,
      field = _ref3.field,
      value = _ref3.value;

  var dependendency = this.getCurrentFieldDependance(field);

  if (undefined !== value) {
    fields.push(createSingleFieldParameter({ field: field, value: value, operator: this.getFilterInputFromField(field).op }));
  }
  if (!dependendency) {
    return fields.length && fields.join() || undefined;
  }

  var _Object$entries$2 = _slicedToArray(Object.entries(dependendency)[0], 2),
      dfield = _Object$entries$2[0],
      dvalue = _Object$entries$2[1];
  // In case of some input dependeny are not filled


  if (undefined !== dvalue) {
    // need to set to lower case for api purpose
    var _getFilterInputFromFi = this.getFilterInputFromField(dfield),
        op = _getFilterInputFromFi.op,
        logicop = _getFilterInputFromFi.logicop;

    fields.unshift(dfield + '|' + op.toLowerCase() + '|' + encodeURI(dvalue) + '|' + (fields.length ? logicop.toLowerCase() : ''));
  }
  return this.createFieldsDependenciesAutocompleteParameter({ fields: fields, dfield: dfield });
};

/**
 * Request to server value for a specific select field
 * 
 * @param field form input
 * 
 * @returns { Promise<[]> }
 */
proto.getValuesFromField = function () {
  var _ref4 = _asyncToGenerator(function* (field) {
    //if defined layer_id dependence
    if (field.options.layer_id) {
      //array of unique values
      var uniqueValues = yield this.getUniqueValuesFromField({ field: field.attribute });
      return this.getValueRelationValues(field,
      // filter
      createFilterFormInputs({
        layer: _catalogLayers2.default.getLayerById(field.options.layer_id),
        search_endpoint: this.getSearchEndPoint(),
        inputs: [{ value: uniqueValues, attribute: field.options.value, logicop: "OR", operator: "eq" }]
      }));
    }

    // Relation reference
    if (field.options.relation_reference) {
      try {
        //call filter data with fformatter
        var response = yield this.searchLayer.getFilterData({ fformatter: field.attribute });
        //check response
        if (response && response.result && response.data) {
          field.options.values = response.data.map(function (_ref5) {
            var _ref6 = _slicedToArray(_ref5, 2),
                value = _ref6[0],
                key = _ref6[1];

            return { key: key, value: value };
          });
        }
      } catch (err) {
        throw Error(err);
      }
    }

    if (field.options.values.length > 0) {
      return this.getValueMapValues(field);
    }

    return this.getUniqueValuesFromField({ field: field.attribute });
  });

  return function (_x5) {
    return _ref4.apply(this, arguments);
  };
}();

/**
 * @param field
 * @param filter
 * 
 * @returns { Promise<[]> }
 */
proto.getValueRelationValues = function () {
  var _ref7 = _asyncToGenerator(function* (field, filter) {
    try {
      var _ref8 = yield _data3.default.getData('search:features', {
        inputs: {
          layer: _catalogLayers2.default.getLayerById(field.options.layer_id),
          search_endpoint: this.getSearchEndPoint(),
          filter: filter,
          ordering: field.options.key
        },
        outputs: false
      }),
          _ref8$data = _ref8.data,
          data = _ref8$data === undefined ? [] : _ref8$data;

      var _values2 = [];
      (data && data[0] && data[0].features || []).forEach(function (feature) {
        _values2.push({ key: feature.get(field.options.key), value: feature.get(field.options.value) });
      });
      return _values2;
    } catch (err) {
      return [];
    }
  });

  return function (_x6, _x7) {
    return _ref7.apply(this, arguments);
  };
}();

/**
 * Return mapped values
 * 
 * @param field
 * 
 * @returns { Promise<*> }
 */
proto.getValueMapValues = function () {
  var _ref9 = _asyncToGenerator(function* (field) {
    return field.options.values.filter(function (value) {
      return _constant.SEARCH_ALLVALUE !== value;
    });
  });

  return function (_x8) {
    return _ref9.apply(this, arguments);
  };
}();

/**
 * @param layers
 * @param options.field
 * @param options.suggest
 * @param options.unique
 * @param options.fformatter since 3.9.0
 * @param options.ordering
 * 
 * @returns { Promise<*> }
 * 
 * @since 3.8.0
 */
proto.getLayersFilterData = function () {
  var _ref10 = _asyncToGenerator(function* (layers) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var field = options.field,
        suggest = options.suggest,
        unique = options.unique,
        ordering = options.ordering,
        fformatter = options.fformatter;
    // get unique value from each layers

    var promisesData = yield Promise.allSettled(layers.map(function (layer) {
      return layer.getFilterData({
        field: field,
        suggest: suggest,
        unique: unique,
        ordering: ordering,
        fformatter: fformatter
      });
    }));

    var data = Array.from(promisesData.filter(function (_ref11) {
      var status = _ref11.status;
      return 'fulfilled' === status;
    }).reduce(function (accumulator, _ref12) {
      var _ref12$value = _ref12.value,
          value = _ref12$value === undefined ? [] : _ref12$value;
      return new Set([].concat(_toConsumableArray(accumulator), _toConsumableArray(value)));
    }, []));
    //check if is not empty array
    switch (data.length && _typeof(data[0])) {
      case 'string':
        return sortAlphabeticallyArray(data);
      case 'number':
        return sortNumericArray(data);
      default:
        return data;
    }
  });

  return function (_x10) {
    return _ref10.apply(this, arguments);
  };
}();

/**
 * Get unique values from field
 * 
 * @param { Object } options
 * @param options.field
 * @param options.value
 * @param options.unique 
 * 
 * @returns { Promise<[]> }
 */
proto.getUniqueValuesFromField = function () {
  var _ref14 = _asyncToGenerator(function* (_ref13) {
    var field = _ref13.field,
        value = _ref13.value,
        output = _ref13.output;

    var data = [];
    try {
      data = yield this.getLayersFilterData(1 === this.searchLayers.length ? [this.searchLayer] : this.searchLayers, {
        field: this.getAutoFieldDependeciesParamField(field),
        suggest: value !== undefined ? field + '|' + value : undefined,
        unique: field,
        ordering: field
      });

      if ('autocomplete' === output) {
        data = data.map(function (value) {
          return { id: value, text: value };
        });
      }
    } catch (e) {
      console.warn(e);
    }

    return data;
  });

  return function (_x11) {
    return _ref14.apply(this, arguments);
  };
}();

/**
 * Perform search
 * 
 * @param { Object } opts
 * @param opts.filter
 * @param opts.search_endpoint
 * @param opts.queryUrl
 * @param opts.feature_count
 * @param opts.show
 * 
 * @returns { Promise<void|unknown> }
 */
proto.doSearch = _asyncToGenerator(function* () {
  var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      filter = _ref16.filter,
      _ref16$search_endpoin = _ref16.search_endpoint,
      search_endpoint = _ref16$search_endpoin === undefined ? this.getSearchEndPoint() : _ref16$search_endpoin,
      _ref16$queryUrl = _ref16.queryUrl,
      queryUrl = _ref16$queryUrl === undefined ? this.url : _ref16$queryUrl,
      _ref16$feature_count = _ref16.feature_count,
      feature_count = _ref16$feature_count === undefined ? 10000 : _ref16$feature_count,
      _ref16$show = _ref16.show,
      show = _ref16$show === undefined ? this.show : _ref16$show;

  //get or create request filter
  filter = filter || this.createFilter();

  //set searching to true
  this.state.searching = true;

  var data = void 0;

  try {
    data = yield _data3.default.getData('search:features', {
      inputs: {
        layer: this.searchLayers,
        search_endpoint: search_endpoint,
        filter: filter,
        queryUrl: queryUrl,
        formatter: 1,
        feature_count: feature_count,
        raw: 'search' === this.return // in order to get raw response
      },
      outputs: show && { title: this.state.title }
    });
    // not show (request internal. No output data are show)
    if (!show) {
      var parsed = 'search_1n' === this.type ? yield parse_search_1n(data, {
        search_endpoint: search_endpoint,
        feature_count: feature_count,
        relation_id: this.config.options.search_1n_relationid,
        output_title: this.state.title
      }) : parse_search_by_returnType(data, this.return);
      data = parsed ? parsed : data;
    } else if (this.project.state.autozoom_query && data && 1 === data.data.length) {
      this.mapService.zoomToFeatures(data.data[0].features); // auto zoom_query
    }
  } catch (e) {
    console.warn(e);
  }

  //set searchin false
  this.state.searching = false;

  return data;
});

/**
 * Filter input by NONVALIDVALUES
 * 
 * @returns { Array }
 */
proto.filterValidFormInputs = function () {
  return this.state.forminputs.filter(function (input) {
    return -1 === NONVALIDVALUES.indexOf(input.value) && '' !== input.value.toString().trim();
  });
};

/**
 * @returns { string | * }
 */
proto.getSearchEndPoint = function () {
  return this.search_endpoint || this.searchLayer.getSearchEndPoint();
};

/**
 * type wms, vector (for vector api)
 */
proto.createFilter = function () {
  var search_endpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSearchEndPoint();

  return createFilterFormInputs({ layer: this.searchLayers, inputs: this.filterValidFormInputs(), search_endpoint: search_endpoint });
};

/**
 * @private
 */
proto._run = function () {
  this.doSearch();
};

/**
 * Called on search input change
 * 
 * @param { Object } opts
 * @param opts.id
 * @param opts.value
 */
proto.changeInput = function () {
  var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref17.id,
      value = _ref17.value;

  this.state.forminputs.find(function (input) {
    return id == input.id;
  }).value = value;
};

/**
 * @param { Object } opts
 * @param opts.filter
 * 
 * @returns { Object }
 */
proto.createQueryFilterFromConfig = function (_ref18) {
  var filter = _ref18.filter;

  var queryFilter = void 0;
  for (var operator in filter) {
    queryFilter = create_boolean_filter(operator, filter[operator]);
  }
  return queryFilter;
};

/**
 * @param field
 * 
 * @returns {*}
 */
proto.getFilterInputFromField = function (field) {
  return this.filter.find(function (input) {
    return input.attribute === field;
  });
};

/**
 * @param field
 * 
 * @returns { * | null }
 * 
 * @private
 */
proto._getExpressionOperatorFromInput = function (field) {
  var dependanceCascadeField = this.getFilterInputFromField(field);
  return dependanceCascadeField ? dependanceCascadeField.op : null;
};

proto._getCascadeDependanciesFilter = function (field) {
  var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var dependance = this.getFilterInputFromField(field).input.options.dependance;
  if (dependance) {
    dependencies.unshift(dependance);
    this._getCascadeDependanciesFilter(dependance, dependencies);
  }
  return dependencies;
};

/**
 * Check if a field has a dependance
 * 
 * @param field
 * 
 * @returns { Object }
 */
proto.getCurrentFieldDependance = function (field) {
  var dependance = this.inputdependance[field];
  return dependance ? _defineProperty({}, dependance, this.cachedependencies[dependance] && _constant.SEARCH_ALLVALUE !== this.cachedependencies[dependance]._currentValue ? this.cachedependencies[dependance]._currentValue // dependance as value
  : undefined) : dependance;
};

/**
 * Check the current value of dependance
 */
proto.getDependanceCurrentValue = function (field) {
  return this.inputdependance[field] ? this.cachedependencies[this.inputdependance[field]]._currentValue : this.state.forminputs.find(function (forminput) {
    return forminput.attribute === field;
  }).value;
};

/**
 * @TODO slim down and refactor
 * 
 * Fill all dependencies inputs based on value
 */
proto.fillDependencyInputs = function () {
  var _this3 = this;

  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      field = _ref20.field,
      _ref20$subscribers = _ref20.subscribers,
      subscribers = _ref20$subscribers === undefined ? [] : _ref20$subscribers,
      _ref20$value = _ref20.value,
      value = _ref20$value === undefined ? _constant.SEARCH_ALLVALUE : _ref20$value;

  var isRoot = this.inputdependance[field] === undefined;
  //check id inpute father is valid to search on subscribers
  var invalidValue = value === _constant.SEARCH_ALLVALUE || value === null || value === undefined || value.toString().trim() === '';
  return new Promise(function (resolve, reject) {
    //loop over dependencies fields inputs
    subscribers.forEach(function (subscribe) {
      // in case of autocomplete reset values to empty array
      if (subscribe.type === 'autocompletefield') {
        subscribe.options.values.splice(0);
      } else {
        //set starting all values
        if (subscribe.options._allvalues === undefined) {
          subscribe.options._allvalues = [].concat(_toConsumableArray(subscribe.options.values));
        }
        //case of father is set an empty invalid value (all value example)
        if (invalidValue) {
          //subscribe has to set all valaues
          subscribe.options.values.splice(0);
          setTimeout(function () {
            return subscribe.options.values = [].concat(_toConsumableArray(subscribe.options._allvalues));
          });
        } else {
          subscribe.options.values.splice(1);
        } //otherwise has to get first __ALL_VALUE
      }
      subscribe.value = subscribe.type !== 'selectfield' ? _constant.SEARCH_ALLVALUE : null;
    });
    // check if cache field values are set
    _this3.cachedependencies[field] = _this3.cachedependencies[field] || {};
    _this3.cachedependencies[field]._currentValue = value;
    var notAutocompleteSubscribers = subscribers.filter(function (subscribe) {
      return subscribe.type !== 'autocompletefield';
    });
    if (value && value !== _constant.SEARCH_ALLVALUE) {
      var isCached = void 0;
      var rootValues = void 0;
      if (isRoot) {
        var cachedValue = _this3.cachedependencies[field] && _this3.cachedependencies[field][value];
        isCached = cachedValue !== undefined;
        rootValues = isCached && cachedValue;
      } else {
        var dependenceCurrentValue = _this3.getDependanceCurrentValue(field);
        var _cachedValue = _this3.cachedependencies[field] && _this3.cachedependencies[field][dependenceCurrentValue] && _this3.cachedependencies[field][dependenceCurrentValue][value];
        isCached = _cachedValue !== undefined;
        rootValues = isCached && _cachedValue;
      }
      if (isCached) {
        for (var i = 0; i < subscribers.length; i++) {
          var subscribe = subscribers[i];
          var _values3 = rootValues[subscribe.attribute];
          if (_values3 && _values3.length) {
            for (var _i = 0; _i < _values3.length; _i++) {
              subscribe.options.values.push(_values3[_i]);
            }
          }
          // set disabled false to dependence field
          subscribe.options.disabled = false;
          resolve();
        }
      } else {
        _this3.state.loading[field] = true;
        if (isRoot) {
          _this3.cachedependencies[field][value] = _this3.cachedependencies[field][value] || {};
        } else {
          var dependenceValue = _this3.getDependanceCurrentValue(field);
          _this3.cachedependencies[field][dependenceValue] = _this3.cachedependencies[field][dependenceValue] || {};
          _this3.cachedependencies[field][dependenceValue][value] = _this3.cachedependencies[field][dependenceValue][value] || {};
        }
        // exclude autocomplete subscribers
        if (notAutocompleteSubscribers.length > 0) {
          var fieldParams = _this3.createFieldsDependenciesAutocompleteParameter({
            field: field,
            value: value
          });
          //need to set undefined because if
          // it has a subscribe input with valuerelations widget needs to extract the value of the field to get
          // filter data from relation layer
          _this3.searchLayer.getFilterData({
            field: fieldParams,
            formatter: 0 //v3.0 need to force to use raw value with formatter 0 parameter
          }).then(function () {
            var _ref21 = _asyncToGenerator(function* (data) {
              var parentData = data.data[0].features || [];

              var _loop2 = function* _loop2(_i2) {
                var subscribe = notAutocompleteSubscribers[_i2];
                var attribute = subscribe.attribute,
                    widget = subscribe.widget;

                var uniqueValues = new Set();
                // case value map
                if (widget === 'valuemap') {
                  var _values4 = [].concat(_toConsumableArray(subscribe.options._values));
                  parentData.forEach(function (feature) {
                    var value = feature.get(attribute);
                    if (value) {
                      // need to covert to string
                      // because input values are string
                      uniqueValues.add('' + value);
                    }
                  });
                  var _data = [].concat(_toConsumableArray(uniqueValues));
                  _values4 = _values4.filter(function (_ref22) {
                    var key = _ref22.key;
                    return _data.indexOf(key) !== -1;
                  });
                  _values4.forEach(function (value) {
                    return subscribe.options.values.push(value);
                  });
                } else if (widget === 'valuerelation') {
                  parentData.forEach(function (feature) {
                    var value = feature.get(attribute);
                    value && uniqueValues.add(value);
                  });
                  if (uniqueValues.size > 0) {
                    var filter = createSingleFieldParameter({
                      layer: _catalogLayers2.default.getLayerById(subscribe.options.layer_id),
                      search_endpoint: _this3.getSearchEndPoint(),
                      field: subscribe.options.value, //v3.8.x has subscribe.options.key
                      value: [].concat(_toConsumableArray(uniqueValues))
                    });
                    try {
                      var _values5 = yield _this3.getValueRelationValues(subscribe, filter);
                      _values5.forEach(function (value) {
                        return subscribe.options.values.push(value);
                      });
                    } catch (err) {
                      console.log(err);
                    }
                  }
                } else {
                  parentData.forEach(function (feature) {
                    var value = feature.get(attribute);
                    value && uniqueValues.add(value);
                  });
                  _this3.valuesToKeysValues([].concat(_toConsumableArray(uniqueValues)).sort()).forEach(function (value) {
                    return subscribe.options.values.push(value);
                  });
                }
                if (isRoot) {
                  _this3.cachedependencies[field][value][subscribe.attribute] = subscribe.options.values.slice(1);
                } else {
                  var _dependenceValue = _this3.getDependanceCurrentValue(field);
                  _this3.cachedependencies[field][_dependenceValue][value][subscribe.attribute] = subscribe.options.values.slice(1);
                }
                subscribe.options.disabled = false;
              };

              for (var _i2 = 0; _i2 < notAutocompleteSubscribers.length; _i2++) {
                yield* _loop2(_i2);
              }
            });

            return function (_x17) {
              return _ref21.apply(this, arguments);
            };
          }()).catch(function (error) {
            return reject(error);
          }).finally(function () {
            _this3.state.loading[field] = false;
            resolve();
          });
        } else {
          //set disable
          subscribers.forEach(function (subscribe) {
            if (subscribe.options.dependance_strict) {
              subscribe.options.disabled = false;
            }
          });
          _this3.state.loading[field] = false;
          resolve();
        }
      }
    } else {
      subscribers.forEach(function (subscribe) {
        return subscribe.options.disabled = subscribe.options.dependance_strict;
      });
      resolve();
    }
  });
};

/**
 * @param field
 * 
 * @returns { Array | * }
 */
proto.getDependencies = function (field) {
  return this.inputdependencies[field] || [];
};

/**
 * @param { Object } opts
 * @param opts.master
 * @param opts.slave
 */
proto.setInputDependencies = function () {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      master = _ref23.master,
      slave = _ref23.slave;

  this.inputdependencies[master] = undefined !== this.inputdependencies[master] ? this.inputdependencies[master] : [];
  this.inputdependencies[master].push(slave);
};

/**
 * set key value for select
 */
proto.valuesToKeysValues = function (values) {
  return values.length ? 'Object' !== toRawType(values[0]) ? values.map(function (value) {
    return { key: value, value: value };
  }) : values : values;
};

/**
 * @param { Object } opts
 * @param opts.ogcService
 * @param opts.filter
 * 
 * @returns {{infoFormat: *, crs: *, serverType, layers: [], url: *} & {filter: {}, ogcService: string}}
 */
proto.createQueryFilterObject = function () {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref24$ogcService = _ref24.ogcService,
      ogcService = _ref24$ogcService === undefined ? 'wms' : _ref24$ogcService,
      _ref24$filter = _ref24.filter,
      filter = _ref24$filter === undefined ? {} : _ref24$filter;

  return Object.assign(this.getInfoFromLayer(ogcService), { ogcService: ogcService, filter: filter });
};

/**
 * @param ogcService
 * 
 * @returns {{infoFormat: *, crs: *, serverType, layers: [], url: *}}
 */
proto.getInfoFromLayer = function (ogcService) {
  return {
    url: 'wfs' === ogcService ? this.searchLayer.getProject().getWmsUrl() : this.searchLayer.getQueryUrl(),
    layers: [],
    infoFormat: this.searchLayer.getInfoFormat(ogcService),
    crs: this.searchLayer.getCrs(),
    serverType: this.searchLayer.getServerType()
  };
};

/**
 * @param layer
 */
proto.setSearchLayer = function (layer) {
  this.searchLayer = layer;
};

/**
 * @returns { null | * }
 */
proto.getSearchLayer = function () {
  return this.searchLayer;
};

/**
 *
 */
proto.clear = function () {
  this.state = null;
};

function create_boolean_filter(operator) {
  var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var boolean = _defineProperty({}, operator, []);
  inputs.forEach(function (input) {
    for (var _operator in input) {
      if (Array.isArray(input[_operator])) {
        create_boolean_filter(_operator, input[_operator]); // recursion step.
        break;
      }
    }
    boolean[operator].push(_defineProperty({}, input.op, _defineProperty({}, input.attribute, null)));
  });
  return boolean;
}

function parse_search_by_returnType(data, returnType) {
  if ('search' === returnType) {
    _gui2.default.closeContent();
    // in case of api get first response on array
    data = data.data[0].data;
    if (isEmptyObject(data)) {
      _data3.default.showCustomOutputDataPromise(Promise.resolve({}));
    } else {
      var SearchPanel = require('gui/search/vue/panel/searchpanel');
      new SearchPanel(data).show();
    }
  }
  return data;
}

module.exports = SearchService;

},{"app/constant":5,"core/g3wobject":8,"gui/search/vue/panel/searchpanel":134,"services/data":317,"services/gui":319,"store/catalog-layers":329,"store/projects":335,"utils":419}],136:[function(require,module,exports){
var _Search = require('components/Search.vue');

var vueComponentOptions = _interopRequireWildcard(_Search);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');
var Service = require('gui/search/service');

var InternalComponent = Vue.extend(vueComponentOptions);

function SearchComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.id = "search";
  this._service = options.service || new Service();
  this._service.init();
  this.title = this._service.getTitle();
  this.internalComponent = new InternalComponent({
    service: this._service
  });
  this.internalComponent.state = this._service.state;
  this.state.visible = true;
  this._reload = function () {
    this._service.reload();
  };
  this.unmount = function () {
    this._searches_searchtools.$destroy();
    return base(this, 'unmount');
  };
}

inherit(SearchComponent, Component);

module.exports = SearchComponent;

},{"components/Search.vue":247,"gui/component/component":77,"gui/search/service":133,"utils":419}],137:[function(require,module,exports){
var _SpatialBookMarks = require('components/SpatialBookMarks.vue');

var vueComponentOptions = _interopRequireWildcard(_SpatialBookMarks);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * @file
 * @since v3.8
 */

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var Component = require('gui/component/component');

var InternalComponent = Vue.extend(vueComponentOptions);

var SpatialBookMarksComponent = function SpatialBookMarksComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.title = "sdk.spatialbookmarks.title";
  this.setInternalComponent = function () {
    this.internalComponent = new InternalComponent();
    return this.internalComponent;
  };

  _gui2.default.on('closecontent', function () {
    _this.state.open = false;
  });
};

inherit(SpatialBookMarksComponent, Component);

module.exports = SpatialBookMarksComponent;

},{"components/SpatialBookMarks.vue":257,"gui/component/component":77,"services/gui":319,"utils":419}],138:[function(require,module,exports){
var _StreetView = require('components/StreetView.vue');

var vueComponentOptions = _interopRequireWildcard(_StreetView);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Component = require('gui/component/component');

var InternalComponent = Vue.extend(vueComponentOptions);

var StreetViewComponent = function StreetViewComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  var keyError = options.keyError;

  var internalComponent = new InternalComponent({
    keyError: keyError
  });
  this.setInternalComponent(internalComponent);
  this.unmount = function () {
    return base(this, 'unmount');
  };
};

inherit(StreetViewComponent, Component);

module.exports = StreetViewComponent;

},{"components/StreetView.vue":258,"gui/component/component":77,"utils":419}],139:[function(require,module,exports){
var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _coordinatesToGeometry = require('utils/coordinatesToGeometry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    inherit = _require.inherit,
    noop = _require.noop;

var G3WObject = require('core/g3wobject');

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var _require3 = require('core/layers/layer'),
    SELECTION_STATE = _require3.SELECTION_STATE;

var PAGELENGTHS = [10, 25, 50];

/**
 * Create a unique feature key
 */
function _createFeatureKey(values) {
  return values.join('__');
}

/**
 * TableService Class
 * 
 * @param options.layer
 * @param options.formatter
 * 
 * @constructor
 */
var TableService = function TableService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


  /**
   * Number of pages
   */
  this.currentPage = 0;

  /**
   * @FIXME add description
   */
  this.layer = options.layer;

  /**
   * @FIXME add description
   */
  this.formatter = options.formatter;

  /**
   * @FIXME add description
   */
  this.allfeaturesnumber = undefined;

  /**
   * @FIXME add description
   */
  this.nopaginationsfilter = [];

  /**
   * @FIXME add description
   */
  this.selectedfeaturesfid = this.layer.getSelectionFids();

  /**
   * Whether layer has geometry
   */
  this.geolayer = this.layer.isGeoLayer();

  /**
   * @FIXME add description
   */
  this.relationsGeometry = this._relationsGeometry();

  /**
   * @FIXME add description
   */
  this.projection = this.geolayer ? this.layer.getProjection() : null;

  /**
   * @FIXME add description
   */
  this.mapService = _gui2.default.getService('map');

  /**
   * @FIXME add description
   */
  this.getAll = false;

  /**
   * @FIXME add description
   */
  this.paginationfilter = false;

  /**
   * @FIXME add description
   */
  this.mapBBoxEventHandlerKey = {
    key: null,
    cb: null
  };

  // bind context on event listeners
  this.clearAllSelection = this.clearAllSelection.bind(this);
  this.filterChangeHandler = this.filterChangeHandler.bind(this);
  this.onGUIContent = this.onGUIContent.bind(this);

  /**
   * @FIXME add description
   */
  this.state = {
    pageLengths: PAGELENGTHS,
    pageLength: this.layer.getAttributeTablePageLength() || PAGELENGTHS[0],
    features: [],
    title: this.layer.getTitle(),
    headers: this.getHeaders(),
    geometry: true,
    loading: false,
    allfeatures: 0,
    pagination: !this.getAll,
    selectAll: false,
    nofilteredrow: false,
    tools: {
      geolayer: {
        show: this.geolayer,
        active: false,
        in_bbox: undefined
      },
      show: false,
      filter: this.layer.state.filter
    }
  };

  /**
   * Pagination filter features
   */
  this._async = {
    state: false,
    fnc: noop
  };

  _gui2.default.onbefore('setContent', this.onGUIContent);
  this.layer.on('unselectionall', this.clearAllSelection);
  this.layer.on('filtertokenchange', this.filterChangeHandler);
};

inherit(TableService, G3WObject);

var proto = TableService.prototype;

/**
 * @since 3.9.0
 */
proto._relationsGeometry = function () {
  var _this = this;

  // layer has geometry  
  if (this.geolayer) {
    return [];
  }

  var relations = [];

  this.layer.getRelations().getArray().forEach(function (relation) {
    var layer = _catalogLayers2.default.getLayerById(relation.getFather()); // get project layer
    if (_this.layer.getId() !== relation.getFather() && // current layer is not child layer of relation
    layer.isGeoLayer() // relation layer has geometry
    ) {
        relations.push({
          layer: layer,
          father_fields: relation.getFatherField(), // NB: since g3w-admin@v3.7.0 this is an Array value.
          fields: relation.getChildField(), // NB: since g3w-admin@v3.7.0 this is an Array value.
          features: {}
        });
      }
  });

  return relations;
};

/**
 * @since 3.9.0
 */
proto.clearAllSelection = function () {
  this.state.features.forEach(function (feature) {
    return feature.selected = false;
  });
  this.state.tools.show = false;
  this.state.selectAll = false;
};

/**
 * @since 3.9.0
 * 
 * @param { Object } opts
 * @param { string } opts.type
 * 
 * @fires redraw when `opts.type` in_bbox filter (or not select all)
 */
proto.filterChangeHandler = _asyncToGenerator(function* () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref2.type;

  this.allfeaturesnumber = undefined;
  if (type === 'in_bbox' || !this.selectedfeaturesfid.has(SELECTION_STATE.ALL)) {
    this.emit('redraw', this.state.pagination ? [] : yield this.reloadData());
  }
});

/**
 * @since 3.9.0
 */
proto.onGUIContent = function (options) {
  this._async.state = 100 === options.perc;
};

proto.toggleFilterToken = _asyncToGenerator(function* () {
  yield this.layer.toggleFilterToken();
});

/**
 * first value = `null` for DataTable purpose (used to add a custom input selector) 
 */
proto.getHeaders = function () {
  return [null].concat(_toConsumableArray(this.layer.getTableHeaders()));
};

/**
 * DataTable pagination
 */
proto.setDataForDataTable = function () {
  var _this2 = this;

  var data = [];
  this.state.features.forEach(function (feature) {
    var attributes = feature.attributes ? feature.attributes : feature.properties;
    var values = [null];
    _this2.state.headers.forEach(function (header) {
      if (header) {
        header.value = attributes[header.name];
        values.push(header.value);
        // header.label = undefined;            // removes label.
      }
    });
    data.push(values);
  });
  return data;
};

proto.addRemoveSelectedFeature = function (feature) {
  feature.selected = !feature.selected;

  var selected = this.selectedfeaturesfid;
  var filter = this.nopaginationsfilter;
  var count = this.allfeaturesnumber;

  var select_all = this.state.selectAll;
  var has_pagination = this.state.pagination;
  var features = this.state.features;
  var is_active = this.state.tools && this.state.tools.filter && this.state.tools.filter.active;

  var is_exclude = !select_all && selected.has(SELECTION_STATE.EXCLUDE);
  var is_default = !select_all && !is_exclude;

  /** @FIXME add description */
  if (select_all) {
    this.state.selectAll = false;
  }

  /** @FIXME add description */
  if (select_all) {
    this.layer.excludeSelectionFid(feature.id, has_pagination);
  }

  /** @FIXME add description */
  if (is_exclude || is_default) {
    this.layer[feature.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](feature.id);
  }

  /** @FIXME add description */
  if (!is_active && (is_exclude && 1 === selected.size || is_default && selected.size === count)) {
    this.layer.setSelectionFidsAll();
  }

  /** @FIXME add description */
  if (is_exclude && 1 !== selected.size && selected.size === features.length + 1) {
    this.layer.clearSelectionFids();
  }

  /** @FIXME add description */
  this.state.tools.show = selected.size > 0;

  /** @FIXME add description */
  if (is_exclude && 1 === selected.size || is_default && selected.size === count || !has_pagination && filter.length && filter.length === features.filter(function (f) {
    return f.selected;
  }).length) {
    this.state.selectAll = true;
  }
};

proto.createFeatureForSelection = function (feature) {
  return {
    attributes: feature.attributes ? feature.attributes : feature.properties,
    geometry: this._returnGeometry(feature)
  };
};

proto.getAllFeatures = function (params) {
  var _this3 = this;

  _gui2.default.setLoadingContent(true);
  return new Promise(function (resolve, reject) {
    _this3.layer.getDataTable(params || {}).then(function (data) {
      var is_valid = _this3.geolayer && data.features;

      if (is_valid && !params) {
        var loaded_features = _this3.state.features.map(function (f) {
          return f.id;
        });
        data.features.forEach(function (f) {
          if (-1 === loaded_features.indexOf(f.id) && f.geometry) {
            _this3.layer.addOlSelectionFeature({
              id: f.id,
              feature: _this3.createFeatureForSelection(f)
            });
          }
        });
        _this3.getAll = true;
      }

      if (is_valid) {
        resolve(data.features);
      }
    }).fail(function () {
      return reject();
    }).always(function () {
      return _gui2.default.setLoadingContent(false);
    });
  });
};

proto.switchSelection = _asyncToGenerator(function* () {
  var _this4 = this;

  var has_pagination = this.state.pagination;
  var filter = this.nopaginationsfilter;
  var filtered = !has_pagination && filter.length ? [] : undefined;
  var selected = false;

  // pagination
  if (has_pagination) {
    this.state.features.forEach(function (f) {
      f.selected = !f.selected;
      selected = f.selected;
    });
  }

  if (has_pagination && !this.getAll) {
    yield this.getAllFeatures();
  }

  this.state.selectAll = has_pagination && this.paginationfilter ? selected : this.state.selectAll;

  // filtered
  if (!has_pagination && filter.length) {
    this.state.features.forEach(function (f, i) {
      if (-1 !== filter.indexOf(i)) {
        filtered.push(f);
      }
      f.selected = !f.selected;
      _this4.layer[f.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](f.id);
      selected = selected || f.selected;
    });
    this.state.tools.show = selected;
  }

  // no filter
  if (!has_pagination && !filter.length) {
    this.state.features.forEach(function (f) {
      f.selected = !f.selected;
    });
  }

  if (has_pagination || !filter.length) {
    this.layer.invertSelectionFids();
  }

  if (!has_pagination) {
    this.checkSelectAll(filtered);
  }

  if (has_pagination || !filter.length) {
    this.state.tools.show = this.selectedfeaturesfid.size > 0;
  }
});

proto.clearLayerSelection = function () {
  this.layer.clearSelectionFids();
};

/**
 * Called when a selected feature is checked
 * 
 * @returns {Promise<void>}
 */
proto.selectAllFeatures = _asyncToGenerator(function* () {
  var _this5 = this;

  // set inverse of selectAll
  this.state.selectAll = !this.state.selectAll;

  var has_pagination = this.state.pagination;
  var filter = this.nopaginationsfilter;
  var selected = false;

  // filtered
  if (!has_pagination && filter.length) {
    this.state.features.forEach(function (f, i) {
      if (-1 !== filter.indexOf(i)) {
        f.selected = _this5.state.selectAll;
        _this5.layer[f.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](f.id);
        selected = selected || f.selected;
      }
    });
    this.state.tools.show = selected;
  }

  // no filter
  if (!has_pagination && !filter.length) {
    this.state.tools.show = this.state.selectAll;
    this.layer[this.state.selectAll ? 'setSelectionFidsAll' : 'clearSelectionFids']();
    this.state.features.forEach(function (f) {
      return f.selected = _this5.state.selectAll;
    });
  }

  // filtered pagination
  if (has_pagination && this.paginationfilter && this.state.featurescount >= this.state.allfeatures) {
    this.state.features.forEach(function (f) {
      f.selected = _this5.state.selectAll;
      _this5.layer[f.selected ? 'includeSelectionFid' : 'excludeSelectionFid'](f.id);
    });
  }

  if (has_pagination && this.paginationfilter && this.state.featurescount < this.state.allfeatures) {
    var features = yield this.getAllFeatures({
      search: this.paginationParams.search,
      ordering: this.paginationParams.ordering,
      formatter: this.paginationParams.formatter,
      in_bbox: this.paginationParams.in_bbox
    });
    features.forEach(function (f) {
      if (!_this5.getAll && _this5.geolayer && f.geometry) {
        _this5.layer.addOlSelectionFeature({
          id: f.id,
          feature: _this5.createFeatureForSelection(f)
        });
      }
      _this5.layer[_this5.state.selectAll ? 'includeSelectionFid' : 'excludeSelectionFid'](f.id);
    });
  }

  if (has_pagination) {
    this.state.features.forEach(function (f) {
      return f.selected = _this5.state.selectAll;
    });
  }

  if (has_pagination && !this.paginationfilter && !this.getAll) {
    yield this.getAllFeatures();
  }

  if (has_pagination && !this.paginationfilter) {
    this.layer[this.state.selectAll ? 'setSelectionFidsAll' : 'clearSelectionFids']();
  }

  if (has_pagination) {
    this.state.tools.show = this.state.selectAll || this.selectedfeaturesfid.size > 0;
  }
});

/**
 * Set filtered features
 * 
 * @param index features index
 */
proto.setFilteredFeature = function (index) {
  var _this6 = this;

  var filter = this.nopaginationsfilter = index;
  if (0 === index.length || index.length === this.allfeaturesnumber) {
    this.checkSelectAll();
  } else {
    this.checkSelectAll(filter.map(function (i) {
      return _this6.state.features[i];
    }));
  }
};

proto.setAttributeTablePageLength = function (length) {
  this.layer.setAttributeTablePageLength(length);
};

/**
 * Get DataTable layer
 * 
 * @param data.start
 * @param data.order
 * @param data.length
 * @param data.columns
 * @param data.search
 * @param data.firstCall
 * 
 * @returns {Promise<{{ data: [], recordsTotal: number, recordsFiltered: number }}>}
 */
proto.getData = function () {
  var _this7 = this;

  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$start = _ref6.start,
      start = _ref6$start === undefined ? 0 : _ref6$start,
      _ref6$order = _ref6.order,
      order = _ref6$order === undefined ? [] : _ref6$order,
      _ref6$length = _ref6.length,
      length = _ref6$length === undefined ? this.state.pageLength : _ref6$length,
      _ref6$columns = _ref6.columns,
      columns = _ref6$columns === undefined ? [] : _ref6$columns,
      _ref6$search = _ref6.search,
      search = _ref6$search === undefined ? { value: null } : _ref6$search,
      _ref6$firstCall = _ref6.firstCall,
      firstCall = _ref6$firstCall === undefined ? false : _ref6$firstCall;

  // reset features before load
  _gui2.default.setLoadingContent(true);

  this.setAttributeTablePageLength(length);

  return new Promise(function (resolve, reject) {

    // skip when ..
    if (!_this7.state.headers.length) {
      resolve({
        data: [],
        recordsTotal: 0,
        recordsFiltered: 0
      });
      return;
    }

    var searchText = search.value && search.value.length > 0 ? search.value : null;

    _this7.state.features.splice(0);

    if (!order.length) {
      order.push({
        column: 1,
        dir: 'asc'
      });
    }

    var ordering = ('asc' === order[0].dir ? '' : '-') + _this7.state.headers[order[0].column].name;

    _this7.currentPage = start === 0 || _this7.state.pagination && _this7.state.tools.filter.active ? 1 : start / length + 1;

    var in_bbox = _this7.state.tools.geolayer.in_bbox;

    var field = _this7.state.pagination ? columns.filter(function (c) {
      return c.search && c.search.value;
    }).map(function (c) {
      return c.name + '|ilike|' + c.search.value + '|and';
    }).join(',') : undefined;

    _this7.paginationParams = {
      field: field || undefined,
      page: _this7.currentPage,
      page_size: length,
      search: searchText,
      in_bbox: in_bbox,
      formatter: _this7.formatter,
      ordering: ordering
    };

    _this7.layer.getDataTable(_this7.state.pagination ? _this7.paginationParams : { ordering: ordering, in_bbox: in_bbox, formatter: _this7.formatter }).then(function (data) {
      var _data$features = data.features,
          features = _data$features === undefined ? [] : _data$features;


      _this7.state.allfeatures = data.count || _this7.state.features.length;
      _this7.state.featurescount = features.length;
      _this7.allfeaturesnumber = undefined === _this7.allfeaturesnumber ? data.count : _this7.allfeaturesnumber;
      _this7.paginationfilter = data.count !== _this7.allfeaturesnumber;
      _this7.state.pagination = firstCall ? _this7.state.tools.filter.active || features.length < _this7.allfeaturesnumber : _this7.state.pagination;

      _this7.addFeatures(features);

      resolve({
        data: _this7.setDataForDataTable(),
        recordsFiltered: data.count,
        recordsTotal: data.count
      });
    }).fail(function (err) {
      _gui2.default.notify.error(t("info.server_error"));reject(err);
    }).always(function () {
      _gui2.default.setLoadingContent(false);
    });
  });
};

proto.setInBBoxParam = function () {
  var geolayer = this.state.tools.geolayer;

  geolayer.in_bbox = geolayer.active ? this.mapService.getMapBBOX().join(',') : undefined;
};

proto.resetMapBBoxEventHandlerKey = function () {
  var listener = this.mapBBoxEventHandlerKey;
  ol.Observable.unByKey(listener.key);
  listener.key = null;
  listener.cb = null;
};

proto.getDataFromBBOX = _asyncToGenerator(function* () {
  var _this8 = this;

  var geolayer = this.state.tools.geolayer;


  geolayer.active = !geolayer.active;

  var is_active = geolayer.active;
  var listener = this.mapBBoxEventHandlerKey;

  if (is_active && this.state.pagination) {
    listener.cb = function () {
      _this8.setInBBoxParam();
      _this8.emit('ajax-reload');
    };
  }

  if (is_active && !this.state.pagination) {
    listener.cb = _asyncToGenerator(function* () {
      _this8.setInBBoxParam();
      _this8.filterChangeHandler({ type: 'in_bbox' });
    });
  }

  if (is_active) {
    listener.key = this.mapService.getMap().on('moveend', listener.cb);
  }

  if (listener.cb) {
    listener.cb();
  }

  if (!is_active) {
    this.resetMapBBoxEventHandlerKey();
  }
});

proto.addFeature = function (feature) {
  var tableFeature = {
    id: feature.id,
    selected: this.layer.hasSelectionFid(feature.id),
    attributes: feature.attributes || feature.properties,
    geometry: this.geolayer && feature.geometry || undefined
  };

  var has_geom = this.geolayer && feature.geometry;
  var selection = has_geom && this.layer.getOlSelectionFeature(feature.id);

  if (has_geom && !selection) {
    this.layer.addOlSelectionFeature({
      id: feature.id,
      feature: this.createFeatureForSelection(feature)
    });
  }

  this.state.features.push(tableFeature);
};

proto.checkSelectAll = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.features;

  this.state.selectAll = this.selectedfeaturesfid.has(SELECTION_STATE.ALL) || features.length && features.reduce(function (selectAll, f) {
    return selectAll && f.selected;
  }, true);
};

proto.addFeatures = function () {
  var _this9 = this;

  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  features.forEach(function (f) {
    return _this9.addFeature(f);
  });
  this.state.tools.show = this.layer.getFilterActive() || this.selectedfeaturesfid.size > 0;
  this.checkSelectAll();
};

proto.reloadData = _asyncToGenerator(function* () {
  var pagination = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.features.splice(0);
  this.state.pagination = pagination;

  var _ref10 = yield this.getData(),
      _ref10$data = _ref10.data,
      data = _ref10$data === undefined ? [] : _ref10$data;

  return data;
});

proto._setLayout = function () {
  //TODO
};

proto._returnGeometry = function (feature) {
  if (feature.attributes) return feature.geometry;
  if (feature.geometry) return (0, _coordinatesToGeometry.coordinatesToGeometry)(feature.geometry.type, feature.geometry.coordinates);
};

proto.zoomAndHighLightFeature = function (feature) {
  var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  // async highlight
  if (feature.geometry && this._async.state) {
    this._async.fnc = this.mapService.highlightGeometry.bind(mapService, feature.geometry, { zoom: zoom });
  }
  // sync highlight
  if (feature.geometry && !this._async.state) {
    this.mapService.highlightGeometry(feature.geometry, { zoom: zoom });
  }
};

/**
 * Zoom to eventually features relation
 */
proto.zoomAndHighLightGeometryRelationFeatures = function () {
  var _ref11 = _asyncToGenerator(function* (feature) {
    var _this10 = this;

    var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


    // skip when there are no relation features geometry
    if (!this.relationsGeometry.length > 0) {
      return;
    }

    var features = [];
    var promises = [];
    var field_values = []; // check if add or not

    this.relationsGeometry.forEach(function (_ref12) {
      var layer = _ref12.layer,
          father_fields = _ref12.father_fields,
          fields = _ref12.fields,
          features = _ref12.features;

      var values = fields.map(function (f) {
        return feature.attributes[f];
      });

      field_values.push(values);

      var promise = void 0;

      if (zoom && undefined === features[k]) {
        promise = _data2.default.getData('search:features', {
          inputs: {
            layer: layer,
            formatter: 1,
            search_endpoint: 'api',
            filter: father_fields.reduce(function (filter, field, index) {
              filter = '' + filter + (index > 0 ? '|AND,' : '') + field + '|eq|' + encodeURIComponent(values[index]);
              return filter;
            }, '')
          },
          outputs: false // just a request not show on result
        });
      }

      promises.push(promise);
    });

    (yield Promise.allSettled(promises)).forEach(function (_ref13, index) {
      var status = _ref13.status,
          value = _ref13.value;

      if ('fulfilled' === status) {

        var relation = _this10.relationsGeometry[index];
        var _k = _createFeatureKey(field_values[index]);
        var data = value && value.data[0];

        if (undefined === relation.features[_k]) {
          relation.features[_k] = data && data.features || [];
        }

        relation.features[_k].forEach(function (f) {
          return features.push(f);
        });
      }
    });

    if (zoom) {
      this.mapService.zoomToFeatures(features, { highlight: true });
    } else {
      this.mapService.highlightFeatures(features);
    }
  });

  return function (_x9) {
    return _ref11.apply(this, arguments);
  };
}();

proto.clear = function () {
  var _this11 = this;

  this.layer.off('unselectionall', this.clearAllSelection);
  this.layer.off('filtertokenchange', this.filterChangeHandler);

  this.resetMapBBoxEventHandlerKey();

  this.allfeaturesnumber = null;
  this.mapService = null;

  if (this._async.state) {
    setTimeout(function () {
      _this11._async.fnc();
      _this11._async.state = false;
      _this11._async.fnc = noop;
    });
  }
};

module.exports = TableService;

},{"core/g3wobject":8,"core/i18n/i18n.service":9,"core/layers/layer":18,"services/data":317,"services/gui":319,"store/catalog-layers":329,"utils":419,"utils/coordinatesToGeometry":355}],140:[function(require,module,exports){
var _Table = require('components/Table.vue');

var _Table2 = _interopRequireDefault(_Table);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var _require2 = require('utils'),
    base = _require2.base,
    inherit = _require2.inherit;

var Component = require('gui/component/component');
var TableService = require('gui/table/tableservice');

var InternalComponent = Vue.extend(_Table2.default);

var TableComponent = function TableComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this.id = "openattributetable";
  var layer = options.layer,
      formatter = options.formatter;

  var service = options.service || new TableService({
    layer: layer,
    formatter: formatter
  });

  this.setService(service);
  var internalComponent = new InternalComponent({
    service: service
  });

  this.setInternalComponent(internalComponent);
  internalComponent.state = service.state;

  service.on('redraw', function () {
    _this.layout();
  });

  this.unmount = function () {
    return base(this, 'unmount');
  };

  this.layout = function () {
    internalComponent.reloadLayout();
  };
};

inherit(TableComponent, Component);

var proto = TableComponent.prototype;

// overwrite show method
proto.show = function () {
  var _this2 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var service = this.getService();
  // close all sidebar open component
  _gui2.default.closeOpenSideBarComponent();
  service.getData({ firstCall: true }).then(function () {
    _gui2.default.showContent({
      content: _this2,
      perc: 50,
      split: _gui2.default.isMobile() ? 'h' : 'v',
      push: false,
      title: options.title
    });
  }).catch(function (err) {
    return _gui2.default.notify.error(t("info.server_error"));
  }).finally(function () {
    return _this2.emit('show');
  });
};

proto.unmount = function () {
  var _this3 = this;

  return base(this, 'unmount').then(function () {
    _this3._service.clear();
  });
};

module.exports = TableComponent;

},{"components/Table.vue":259,"core/i18n/i18n.service":9,"gui/component/component":77,"gui/table/tableservice":139,"services/gui":319,"utils":419}],141:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

function Service() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.config = null;
  this.state = _extends({}, options, {
    toolsGroups: [],
    visible: false,
    loading: false
  });
  this.setters = {
    addTool: function addTool(tool, groupName) {
      tool.state = tool.state ? tool.state : {
        type: null,
        message: null
      };
      return this._addTool(tool, groupName);
    },
    addTools: function addTools(tools, groupName) {
      return this._addTools(tools, groupName);
    },
    addToolGroup: function addToolGroup(order, name) {
      return this._addToolGroup(order, name);
    },
    removeToolGroup: function removeToolGroup(name) {
      return this._removeToolGroup(name);
    },
    removeTools: function removeTools() {
      return this._removeTools();
    }
  };

  base(this);

  var project = _projects2.default.getCurrentProject();

  var _project$getState = project.getState(),
      _project$getState$too = _project$getState.tools,
      tools = _project$getState$too === undefined ? {} : _project$getState$too;

  var _loop = function _loop(toolName) {
    var groupName = toolName.toUpperCase();
    _this.addToolGroup(0, groupName);
    var _tools = tools[toolName].map(function (tool) {
      return {
        name: tool.name,
        action: ToolsService.ACTIONS[toolName].bind(null, tool)
      };
    });
    _this.addTools(_tools, { position: 0, title: groupName });
  };

  for (var toolName in tools) {
    _loop(toolName);
  }
}

inherit(Service, G3WObject);

var proto = Service.prototype;

proto.reload = function () {
  this.removeTools();
};

proto._addTool = function (tool, _ref) {
  var order = _ref.position,
      name = _ref.title;

  var group = this._addToolGroup(order, name);
  if (tool.action === undefined && tool.type) tool.action = Service.ACTIONS[tool.type] ? Service.ACTIONS[tool.type].bind(null, tool.options) : function () {};
  group.tools.push(tool);
};

proto._addTools = function (tools, groupName) {
  var _this2 = this;

  tools.forEach(function (tool) {
    return _this2.addTool(tool, groupName);
  });
};

proto.setLoading = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.loading = bool;
};

proto._removeTool = function (toolIdx) {
  this.state.toolsGroups = this.state.toolsGroups.splice(toolIdx, 1);
};

proto._removeTools = function () {
  this.state.toolsGroups.splice(0);
};

proto.updateToolsGroup = function (order, groupConfig) {
  Vue.set(this.state.toolsGroups, order, groupConfig);
};

proto.getState = function () {
  return this.state;
};

proto._removeToolGroup = function (name) {
  this.state.toolsGroups = this.state.toolsGroups.filter(function (group) {
    return group.name !== name;
  });
};

proto._addToolGroup = function (order, name) {
  var group = this.state.toolsGroups.find(function (_group) {
    return _group.name === name;
  });
  if (!group) {
    group = {
      name: name,
      tools: []
    };
    this.state.toolsGroups.splice(order, 0, group);
  }
  return group;
};

proto.setToolState = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref2.id,
      _ref2$state = _ref2.state,
      state = _ref2$state === undefined ? { type: null, message: null } : _ref2$state;

  this.state.toolsGroups.find(function (toolGroup) {
    var tool = toolGroup.tools.find(function (tool) {
      return tool.name === id;
    });
    if (tool) {
      tool.state.type = state.type;
      tool.state.message = state.message;
      return true;
    }
  });
};

Service.ACTIONS = {};

module.exports = Service;

},{"core/g3wobject":8,"store/projects":335,"utils":419}],142:[function(require,module,exports){
var _Tools = require('components/Tools.vue');

var vueComponentOptions = _interopRequireWildcard(_Tools);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var Component = require('gui/component/component');
var ToolsService = require('gui/tools/service');

var InternalComponent = Vue.extend(vueComponentOptions);

function ToolsComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._service = new ToolsService(options);
  this.title = "tools";

  var internalComponent = new InternalComponent({
    toolsService: this._service
  });

  internalComponent.state = this._service.state;
  this.setInternalComponent(internalComponent, {
    events: [{ name: 'visible' }]
  });

  this._setOpen = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.internalComponent.state.open = bool;
    bool && _gui2.default.closeContent();
  };
}

inherit(ToolsComponent, Component);

module.exports = ToolsComponent;

},{"components/Tools.vue":264,"gui/component/component":77,"gui/tools/service":141,"services/gui":319,"utils":419}],143:[function(require,module,exports){
var _require = require('utils'),
    resolve = _require.resolve,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var Component = require('gui/component/component');
var Panel = require('gui/panel');

//Barstack Class
// It used to mount panels stack
// on top of each parent
function BarStack() {
  this._parent = null;
  // barstack state. It store the panels array
  this.state = {
    contentsdata: []
  };
}

inherit(BarStack, G3WObject);

var proto = BarStack.prototype;

// push componenet on top of parent
proto.push = function (content) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // parent identify the DOM element where insert (append o meno) the component/panel
  this._parent = options.parent;
  // call barstack mount method
  return this._mount(content, options);
};

// remove last component from stack
proto.pop = function () {
  var _this = this;

  var d = $.Deferred();
  if (this.state.contentsdata.length) {
    var content = this.state.contentsdata.slice(-1)[0].content;
    this._unmount(content).then(function () {
      var content = _this.state.contentsdata.pop();
      d.resolve(content);
    });
  } else d.resolve();
  return d.promise();
};

// clear all stack
proto.clear = function () {
  var _this2 = this;

  var d = $.Deferred();
  if (this.state.contentsdata.length) {
    var unmountRequests = [];
    this.state.contentsdata.forEach(function (data) {
      unmountRequests.push(_this2._unmount(data.content));
    });
    $.when(unmountRequests).then(function () {
      _this2.state.contentsdata.splice(0, _this2.state.contentsdata.length);
      d.resolve();
    });
  } else d.resolve();
  return d.promise();
};

proto.getContentData = function () {
  return this.state.contentsdata;
};

proto.getCurrentContentData = function () {
  return this.state.contentsdata[this.state.contentsdata.length - 1];
};

proto.getPreviousContentData = function () {
  return this.state.contentsdata[this.state.contentsdata.length - 2];
};

// mount component
proto._mount = function (content, options) {
  // check the type of content:
  // JQuery type
  if (content instanceof jQuery) return this._setJqueryContent(content);
  //String
  else if (_.isString(content)) {
      var jqueryEl = $(content);
      if (!jqueryEl.length) jqueryEl = $('<div>' + content + '</div>');
      return this._setJqueryContent(jqueryEl);
    }
    // Vue
    else if (content.mount && typeof content.mount == 'function') {
        this._checkDuplicateVueContent(content); // if already exist it removed before based on id
        return this._setVueContent(content, options);
      }
      // DOM
      else return this._setDOMContent(content);
};

// JQuery append jQuery component
proto._setJqueryContent = function (content, options) {
  $(this._parent).append(content);
  this.state.contentsdata.push({
    content: content,
    options: options
  });
  return resolve();
};

//Append DOM element
proto._setDOMContent = function (content, options) {
  this._parent.appendChild(content);
  this.state.contentsdata.push({
    content: content,
    options: options
  });
  return resolve();
};

// Mount component to parent
proto._setVueContent = function (content) {
  var _this3 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var d = $.Deferred();
  var append = options.append || false;
  content.mount(this._parent, append).then(function () {
    $(_this3._parent).localize();
    // Insert the content into the array with the following attributes:
    // content: component object
    // options: es. title, perc etc ...
    _this3.state.contentsdata.push({
      content: content,
      options: options
    });
    d.resolve(content);
  });
  return d.promise();
};

// Check duplicate Vue Content
proto._checkDuplicateVueContent = function (content) {
  var _this4 = this;

  var idxToRemove = null;
  var id = content.getId();
  this.state.contentsdata.forEach(function (data, idx) {
    if (data.content.getId && data.content.getId() == id) idxToRemove = idx;
  });
  if (!_.isNull(idxToRemove)) {
    var data = this.state.contentsdata[idxToRemove];
    data.content.unmount().then(function () {
      return _this4.state.contentsdata.splice(idxToRemove, 1);
    });
  }
};

// unmount component
proto._unmount = function (content) {
  var d = $.Deferred();
  if (content instanceof Component || content instanceof Panel) {
    content.unmount().then(function () {
      return d.resolve();
    });
  } else {
    $(this._parent).empty();
    d.resolve();
  }
  return d.promise();
};

proto.forEach = function (cbk) {
  this.state.contentsdata.forEach(function (data) {
    return cbk(data.content);
  });
};

// Get lenght / numbero of element stored in stack
proto.getLength = function () {
  return this.state.contentsdata.length;
};

module.exports = BarStack;

},{"core/g3wobject":8,"gui/component/component":77,"gui/panel":120,"utils":419}],144:[function(require,module,exports){
module.exports = {
  barstack: require('./barstack')
};

},{"./barstack":143}],145:[function(require,module,exports){
var _ViewportContentsViewer = require('components/ViewportContentsViewer.vue');

var vueComponentOptions = _interopRequireWildcard(_ViewportContentsViewer);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var _require2 = require('gui/utils/utils'),
    Stack = _require2.barstack;

var Component = require('gui/component/component');

// Internal Component (VUE) of the content of the  viewport
var InternalComponent = Vue.extend(vueComponentOptions);

function ContentsViewerComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.stack = new Stack();
  this.setService(this);
  this.title = "contents";
  this.contentsdata = this.stack.state.contentsdata;
  this.state.visible = true;
  var internalComponent = new InternalComponent({
    service: this
  });
  this.setInternalComponent(internalComponent);
  this.internalComponent.state = this.state;
}

inherit(ContentsViewerComponent, Component);

var proto = ContentsViewerComponent.prototype;

proto.setContent = function () {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$push = options.push,
      push = _options$push === undefined ? false : _options$push,
      content = options.content,
      crumb = options.crumb;

  var d = $.Deferred();
  // clean the stack every time, sure to have just one component.
  // Use barstack because it handle the logic og mounting component on DOM
  if (push) {
    this.addContent(content, options).then(function () {
      return d.resolve(options);
    });
  } else {
    // clear stack
    this.clearContents().then(function () {
      _this.addContent(content, options).then(function () {
        return d.resolve(options);
      });
    });
  }

  this.setOpen(true);
  return d.promise();
};

proto.addContent = function (content) {
  var _this2 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var d = $.Deferred();
  // parent element is the internal element
  options.parent = this.internalComponent.$el;
  options.append = true;
  var promise = this.stack.push(content, options);
  promise.then(function () {
    // get stack content
    _this2.contentsdata = _this2.stack.state.contentsdata;
    // update the visibility of the others components
    _this2.updateContentVisibility();
    d.resolve();
  });
  return d.promise();
};

// remove content from stack
proto.removeContent = function () {
  this.setOpen(false);
  return this.clearContents();
};

// used by  viewport.js
proto.popContent = function () {
  var _this3 = this;

  return this.stack.pop().then(function () {
    // update the content of contentsdata only after stack is updated
    _this3.contentsdata = _this3.stack.state.contentsdata;
    _this3.updateContentVisibility();
  });
};

// get component through class
proto.getComponentByClass = function (componentClass) {
  var component = void 0;
  var contentdata = this.stack.getContentData();
  contentdata.forEach(function (content) {
    if (content.content instanceof componentClass) {
      component = content.content;
      return false;
    }
  });
  return component;
};

// get component by component id
proto.getComponentById = function (id) {
  var component = void 0;
  var contentdata = this.stack.getContentData();
  contentdata.forEach(function (content) {
    if (content.content.id == id) {
      component = content.content;
      return false;
    }
  });
  return component;
};

proto.getContentData = function () {
  return this.stack.getContentData();
};

// get current contentdata
proto.getCurrentContentData = function () {
  return this.stack.getCurrentContentData();
};

// get  previuos contentdata
proto.getPreviousContentData = function () {
  return this.stack.getPreviousContentData();
};

// update visibility of the components of content
proto.updateContentVisibility = function () {
  // hide each elements but not the last one
  var contentsEls = $(this.internalComponent.$el).children();
  contentsEls.hide();
  contentsEls.last().show();
};

// stack clear because if we want the contentComponente stack
// it has to be empty stack
proto.clearContents = function () {
  var _this4 = this;

  return this.stack.clear().then(function () {
    return _this4.contentsdata = _this4.stack.state.contentsdata;
  });
};

// Set layout of the content each time
// Parameters are: height and with of the parent content
proto.layout = function (parentWidth, parentHeight) {
  var _this5 = this;

  var el = $(this.internalComponent.$el);
  //run the callback only after that vue state is updated
  Vue.nextTick(function () {
    var contentsdata = _this5.stack.state.contentsdata;
    // el.parent() is div g3w-view-content
    var height = el.parent().height() - el.siblings('.close-panel-block').outerHeight(true) - el.siblings('.content_breadcrumb').outerHeight(true) - 10; // margin 10 from bottom
    el.height(height);
    el.children().first().height(height);
    contentsdata.forEach(function (data) {
      //check each componentstored in stack
      if (typeof data.content.layout == 'function') {
        //call function layout of each component that are stored into the stack
        data.content.layout(parentWidth + 0.5, height);
      }
    });
  });
};

module.exports = ContentsViewerComponent;

},{"components/ViewportContentsViewer.vue":267,"gui/component/component":77,"gui/utils/utils":144,"utils":419}],146:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _WMS = require('components/WMS.vue');

var vueComponentOptions = _interopRequireWildcard(_WMS);

var _WMSLayersPanel = require('components/WMSLayersPanel.vue');

var vuePanelComponentOptions = _interopRequireWildcard(_WMSLayersPanel);

var _constant = require('app/constant');

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _utils = require('utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Panel = require('gui/panel');
var Component = require('gui/component/component');
var InternalComponent = Vue.extend(vueComponentOptions);
var WMSLayersPanelComponent = Vue.extend(vuePanelComponentOptions);

/**
 * ORIGINAL SOURCE: src/app/gui/wms/vue/panel/wmslayerspanel.js@3.8.15
 */
function WmsLayersPanel() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var service = options.service,
      config = options.config;

  this.setService(service);
  this.id = (0, _utils.uniqueId)();
  this.title = 'sidebar.wms.panel.title';
  var internal = new WMSLayersPanelComponent({ service: service, config: config });
  this.setInternalPanel(internal);
  this.unmount = function () {
    return (0, _utils.base)(this, 'unmount').then(function () {
      return service.clear();
    });
  };
}

(0, _utils.inherit)(WmsLayersPanel, Panel);

/**
 * ORIGINAL SOURCE: src/app/gui/wms/service.js@3.8.15 
 */

var Service = function () {
  function Service() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Service);

    var _options$wmsurls = options.wmsurls,
        wmsurls = _options$wmsurls === undefined ? [] : _options$wmsurls;

    /**
     * Current project id used to store data or get data to current project
     */

    this.projectId = _projects2.default.getCurrentProject().getId(); // 

    /**
     * @FIXME add description
     */
    this.panel;

    /**
     * @FIXME add description
     */
    this.state = {
      adminwmsurls: wmsurls,
      localwmsurls: [] // array of object {id, url}
    };

    _gui2.default.isReady().then(function () {
      _gui2.default.getService('map').isReady().then(_asyncToGenerator(function* () {
        _this.state.localwmsurls = yield _this.loadClientWmsUrls();
      }));
    });

    _projects2.default.onafter('setCurrentProject', function () {
      var _ref2 = _asyncToGenerator(function* (project) {
        _this.projectId = project.getId();
        _this.state.adminwmsurls = project.wmsurls || [];
      });

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());
  }

  /**
   * Getting Wms Urls from local browser storage
   */


  _createClass(Service, [{
    key: 'loadClientWmsUrls',
    value: function () {
      var _ref3 = _asyncToGenerator(function* () {
        var _this2 = this;

        var data = this.getLocalWMSData();

        if (undefined === data) {
          data = {
            urls: [], // unique url for wms
            wms: {} // bject contain url as key and array of layers bind to url
          };
          this.updateLocalWMSData(data);
        }

        yield _gui2.default.isReady();

        setTimeout(function () {
          var map = _gui2.default.getService('map');

          map.on('remove-external-layer', function (name) {
            return _this2.deleteWms(name);
          });

          map.on('change-layer-position-map', function () {
            var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                name = _ref4.id,
                position = _ref4.position;

            return _this2.changeLayerData(name, { key: 'position', value: position });
          });
          map.on('change-layer-opacity', function () {
            var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                name = _ref5.id,
                opacity = _ref5.opacity;

            return _this2.changeLayerData(name, { key: 'opacity', value: opacity });
          });
          map.on('change-layer-visibility', function () {
            var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                name = _ref6.id,
                visible = _ref6.visible;

            return _this2.changeLayerData(name, { key: 'visible', value: visible });
          });

          // load eventually data
          Object.keys(data.wms).forEach(function (url) {
            data.wms[url].forEach(function (config) {
              _this2.loadWMSLayerToMap(_extends({ url: url }, config));
            });
          });
        });

        return data.urls;
      });

      function loadClientWmsUrls() {
        return _ref3.apply(this, arguments);
      }

      return loadClientWmsUrls;
    }()

    /**
     * Change config of storage layer options as position, opacity
     * 
     * @param { Object } opts
     * @param { string } opts.name
     * @param opts.config
     */

  }, {
    key: 'changeLayerData',
    value: function changeLayerData(name) {
      var attribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var data = this.getLocalWMSData();
      Object.keys(data.wms).find(function (wmsurl) {
        var index = data.wms[wmsurl].findIndex(function (config) {
          return config.name == name;
        });
        if (-1 !== index) {
          data.wms[wmsurl][index][attribute.key] = attribute.value;
          return true;
        }
      });

      this.updateLocalWMSData(data);
    }

    /**
     * Create a common status object
     * 
     * @param { Object } request
     * @param request.error
     * @param request.added
     * 
     * @returns {{ error, status: string }}
     */

  }, {
    key: 'getRequestStatusObject',
    value: function getRequestStatusObject() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$error = _ref7.error,
          error = _ref7$error === undefined ? false : _ref7$error,
          _ref7$added = _ref7.added,
          added = _ref7$added === undefined ? false : _ref7$added;

      return { error: error, added: added };
    }

    /**
     * Add new WMS url
     * 
     * @param { Object } wms
     * @param { string } wms.id
     * @param { string } wms.url
     * 
     * @returns {*}
     */

  }, {
    key: 'addNewUrl',
    value: function () {
      var _ref8 = _asyncToGenerator(function* () {
        var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref9.id,
            url = _ref9.url;

        var found = this.state.localwmsurls.find(function (_ref10) {
          var localid = _ref10.id,
              localurl = _ref10.url;
          return localurl == url || localid == id;
        });
        var status = this.getRequestStatusObject({ added: !!found });

        // skip when url already added
        if (found) {
          return status;
        }

        try {
          var response = yield this.getWMSLayers(url);
          // skip on invalid response
          if (!response.result) {
            throw 'invalid response';
          }
          var data = this.getLocalWMSData();
          this.state.localwmsurls.push({ id: id, url: url });
          data.urls = this.state.localwmsurls;
          this.updateLocalWMSData(data);
          response.wmsurl = url;
          this.showWmsLayersPanel(response);
        } catch (err) {
          console.warn(err);
          status.error = true;
        }

        return status;
      });

      function addNewUrl() {
        return _ref8.apply(this, arguments);
      }

      return addNewUrl;
    }()

    /**
     * Delete WMS by name
     * 
     * @param name
     */

  }, {
    key: 'deleteWms',
    value: function deleteWms(name) {
      var data = this.getLocalWMSData();
      Object.keys(data.wms).find(function (wmsurl) {
        var index = data.wms[wmsurl].findIndex(function (config) {
          return config.name == name;
        });

        // skip when ..
        if (-1 === index) {
          return;
        }

        /** @TODO add description */
        data.wms[wmsurl].splice(index, 1);

        /** @TODO add description */
        if (0 == data.wms[wmsurl].length) {
          delete data.wms[wmsurl];
        }

        return true;
      });
      this.updateLocalWMSData(data);
    }

    /**
     * @param { Object } opts
     * @param opts.name
     * @param opts.layers
     * 
     * @returns { boolean } WMS is already added (by `name` or `layer` with a specific url) 
     */

  }, {
    key: 'checkIfWMSAlreadyAdded',
    value: function checkIfWMSAlreadyAdded() {
      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          url = _ref11.url,
          _ref11$layers = _ref11.layers,
          layers = _ref11$layers === undefined ? [] : _ref11$layers;

      var data = this.getLocalWMSData();

      // wms url is not already added
      if (!data.wms[url]) {
        return false;
      }

      // check if wms layer is already added (by name)
      return data.wms[url].some(function (_ref12) {
        var addedLayers = _ref12.layers;
        return addedLayers.length === layers.length ? layers.every(function (name) {
          return addedLayers.includes(name);
        }) : undefined;
      });
    }

    /**
     * Delete url from local storage
     * @param id
     */

  }, {
    key: 'deleteWmsUrl',
    value: function deleteWmsUrl(id) {
      this.state.localwmsurls = this.state.localwmsurls.filter(function (_ref13) {
        var localid = _ref13.id;
        return id !== localid;
      });
      var data = this.getLocalWMSData();
      data.urls = this.state.localwmsurls;
      this.updateLocalWMSData(data);
    }

    /**
     * Load data from server and show wms layer panel
     * 
     * @param url
     * 
     * @returns { Promise<{ added: boolean, error: boolean }> }
     */

  }, {
    key: 'loadWMSDataAndShowWmsLayersPanel',
    value: function () {
      var _ref14 = _asyncToGenerator(function* (url) {
        var status = this.getRequestStatusObject();
        try {
          var response = yield this.getWMSLayers(url);
          status.error = !response.result;
          if (response.result) {
            response.wmsurl = url;
            this.showWmsLayersPanel(response);
          }
        } catch (err) {
          console.warn(err);
          status.error = true;
        }
        return status;
      });

      function loadWMSDataAndShowWmsLayersPanel(_x11) {
        return _ref14.apply(this, arguments);
      }

      return loadWMSDataAndShowWmsLayersPanel;
    }()

    /**
     * show add wms layers to wms panel
     * @param config
     * @returns {WmsLayersPanel}
     */

  }, {
    key: 'showWmsLayersPanel',
    value: function showWmsLayersPanel() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.panel = new WmsLayersPanel({ service: this, config: config });
      this.panel.show();
      return this.panel;
    }

    /**
     * Get data of wms url from server
     * 
     * @param { string } url
     * 
     * @returns { Promise<{
    *    result:       boolean,
    *    info_formats: [],
    *    layers:       [],
    *    map_formats:  [],
    *    methods:      [],
    *    abstract:     null,
    *    title:        null,
    *    }> }
    */

  }, {
    key: 'getWMSLayers',
    value: function () {
      var _ref15 = _asyncToGenerator(function* (url) {
        // base schema of response
        var response = {
          result: false,
          layers: [],
          info_formats: [], // @deprecated since 3.9.0 (inside methods)
          abstract: null,
          methods: [], // @since 3.9.0
          map_formats: [], // @deprecated since 3.9.0 (inside methods)
          title: null
        };
        try {
          response = yield _data2.default.getData('ows:wmsCapabilities', { inputs: { url: url }, outputs: false });
        } catch (err) {
          console.warn(err);
        }
        return response;
      });

      function getWMSLayers(_x13) {
        return _ref15.apply(this, arguments);
      }

      return getWMSLayers;
    }()

    /**
     * Load wms to map
     * 
     * @param { Object } wms
     * @param { string } wms.url
     * @param { string } wms.name
     * @param wms.epsg
     * @param wms.position
     * @param wms.opacity
     * @param wms.visible
     * @param wms.layers
     * 
     * @returns {*}
     */

  }, {
    key: 'loadWMSLayerToMap',
    value: function loadWMSLayerToMap() {
      var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          url = _ref16.url,
          name = _ref16.name,
          epsg = _ref16.epsg,
          position = _ref16.position,
          opacity = _ref16.opacity,
          _ref16$visible = _ref16.visible,
          visible = _ref16$visible === undefined ? true : _ref16$visible,
          _ref16$layers = _ref16.layers,
          layers = _ref16$layers === undefined ? [] : _ref16$layers;

      return _gui2.default.getService('map').addExternalWMSLayer({ url: url, name: name, layers: layers, epsg: epsg, position: position, visible: visible, opacity: opacity });
    }

    /**
     * Check if a layer is already added to map
     * 
     * @param { Object } wms
     * @param { string } wms.url
     * @param { string } wms.name
     * @param wms.epsg
     * @param wms.position
     * @param wms.methods
     * @param wms.layers
     * 
     * @returns { Promise<void> }
     */

  }, {
    key: 'addWMSlayer',
    value: function () {
      var _ref17 = _asyncToGenerator(function* () {
        var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            url = _ref18.url,
            epsg = _ref18.epsg,
            position = _ref18.position,
            _ref18$name = _ref18.name,
            name = _ref18$name === undefined ? 'wms_' + (0, _utils.uniqueId)() : _ref18$name,
            _ref18$layers = _ref18.layers,
            layers = _ref18$layers === undefined ? [] : _ref18$layers,
            _ref18$opacity = _ref18.opacity,
            opacity = _ref18$opacity === undefined ? 1 : _ref18$opacity,
            _ref18$visible = _ref18.visible,
            visible = _ref18$visible === undefined ? true : _ref18$visible;

        var data = this.getLocalWMSData();
        var config = {
          url: url,
          name: name,
          layers: layers,
          epsg: epsg,
          position: position,
          visible: visible,
          opacity: opacity
        };

        if (undefined === data.wms[url]) {
          data.wms[url] = [config];
        } else {
          data.wms[url].push(config);
        }

        this.updateLocalWMSData(data);

        try {
          yield this.loadWMSLayerToMap(config);
        } catch (err) {
          console.warn(err);
          _gui2.default.getService('map').removeExternalLayer(name);
          this.deleteWms(name);
          setTimeout(function () {
            _gui2.default.showUserMessage({ type: 'warning', message: 'sidebar.wms.layer_add_error' });
          });
        }

        this.panel.close();
      });

      function addWMSlayer() {
        return _ref17.apply(this, arguments);
      }

      return addWMSlayer;
    }()

    /**
     * Get local storage wms data based on current projectId
     * 
     * @returns {*}
     */

  }, {
    key: 'getLocalWMSData',
    value: function getLocalWMSData() {
      var item = _application2.default.getLocalItem(_constant.LOCALSTORAGE_EXTERNALWMS_ITEM);
      return item && item[this.projectId];
    }

    /**
     * Update local storage data based on changes
     * 
     * @param data
     */

  }, {
    key: 'updateLocalWMSData',
    value: function updateLocalWMSData(data) {
      var alldata = _application2.default.getLocalItem(_constant.LOCALSTORAGE_EXTERNALWMS_ITEM) || {};
      alldata[this.projectId] = data;
      _application2.default.setLocalItem({ id: _constant.LOCALSTORAGE_EXTERNALWMS_ITEM, data: alldata });
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.panel = null;
    }
  }]);

  return Service;
}();

function WmsComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _utils.base)(this, options);
  this._service = new Service(options);
  this.title = "WMS";
  var internal = new InternalComponent({ service: this._service });
  internal.state = this._service.state;
  this.setInternalComponent(internal);
  this._setOpen = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.internalComponent.state.open = bool;
    if (bool) {
      _gui2.default.closeContent();
    }
  };
}

(0, _utils.inherit)(WmsComponent, Component);

module.exports = WmsComponent;

},{"app/constant":5,"components/WMS.vue":268,"components/WMSLayersPanel.vue":269,"gui/component/component":77,"gui/panel":120,"services/application":310,"services/data":317,"services/gui":319,"store/projects":335,"utils":419}],147:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _vueCookieLaw = require("vue-cookie-law");

var _vueCookieLaw2 = _interopRequireDefault(_vueCookieLaw);

var _HeaderItem = require("components/HeaderItem.vue");

var _HeaderItem2 = _interopRequireDefault(_HeaderItem);

var _projects = require("store/projects");

var _projects2 = _interopRequireDefault(_projects);

var _application = require("services/application");

var _application2 = _interopRequireDefault(_application);

var _gui = require("services/gui");

var _gui2 = _interopRequireDefault(_gui);

var _mixins = require("mixins");

var _constant = require("app/constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    uniqueId = _require.uniqueId;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

if (typeof jQuery === "undefined") {
  throw new Error("LayoutManager requires jQuery");
}

$.LayoutManager = $.LayoutManager || {
  options: {
    navbarMenuSlimscroll: true,
    navbarMenuSlimscrollWidth: "0px",
    navbarMenuHeight: "200px",
    animationSpeed: 'fast',

    sidebarToggleSelector: "[data-toggle='offcanvas']",

    sidebarPushMenu: true,

    sidebarSlimScroll: false,

    sidebarExpandOnHover: false,

    enableBoxRefresh: true,

    enableFastclick: true,

    enableControlSidebar: true,
    controlSidebarOptions: {
      toggleBtnSelector: "[data-toggle='control-sidebar']",

      selector: ".control-sidebar",

      slide: true
    },

    enableBoxWidget: true,

    boxWidgetOptions: {
      boxWidgetIcons: {
        collapse: 'fa-minus',

        open: 'fa-plus',

        remove: 'fa-times'
      },
      boxWidgetSelectors: {
        remove: '[data-widget="remove"]',

        collapse: '[data-widget="collapse"]'
      }
    },

    directChat: {
      enable: true,

      contactToggleSelector: '[data-widget="chat-pane-toggle"]'
    },

    colors: {
      lightBlue: "#3c8dbc",
      red: "#f56954",
      green: "#00a65a",
      aqua: "#00c0ef",
      yellow: "#f39c12",
      blue: "#0073b7",
      navy: "#001F3F",
      teal: "#39CCCC",
      olive: "#3D9970",
      lime: "#01FF70",
      orange: "#FF851B",
      fuchsia: "#F012BE",
      purple: "#8E24AA",
      maroon: "#D81B60",
      black: "#222222",
      gray: "#d2d6de"
    },

    screenSizes: {
      xs: 480,
      sm: 768,
      md: 992,
      lg: 1200
    }
  },

  _init: function _init() {
    'use strict';

    $.LayoutManager.layout = {
      activate: function activate() {
        var _this = this;
        _this.fix();
        _this.fixSidebar();
        $(window, ".wrapper").resize(function () {
          _this.fix();
          _this.fixSidebar();
        });
      },
      fix: function fix() {
        var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
        var window_height = $(window).height();
        var sidebar_height = $(".sidebar").height();

        if ($("body").hasClass("fixed")) {
          $(".content-wrapper, .right-side").css('min-height', window_height - $('.main-footer').outerHeight());
          $(".content-wrapper, .right-side").css('height', window_height - $('.main-footer').outerHeight());
        } else {
          var postSetWidth = void 0;
          if (window_height >= sidebar_height) {
            $(".content-wrapper, .right-side").css('min-height', window_height - neg);
            postSetWidth = window_height - neg;
          } else {
            $(".content-wrapper, .right-side").css('min-height', sidebar_height);
            postSetWidth = sidebar_height;
          }

          var controlSidebar = $($.LayoutManager.options.controlSidebarOptions.selector);
          if (typeof controlSidebar !== "undefined") {
            if (controlSidebar.height() > postSetWidth) $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
          }
        }
      },
      fixSidebar: function fixSidebar() {
        if (!$("body").hasClass("fixed")) {
          if (typeof $.fn.slimScroll != 'undefined') {
            $(".sidebar").slimScroll({ destroy: true }).height("auto");
          }
          return;
        } else if (typeof $.fn.slimScroll == 'undefined' && window.console) {
          window.console.error("Error: the fixed layout requires the slimscroll plugin!");
        }

        if ($.LayoutManager.options.sidebarSlimScroll && !isMobile.any) {
          if (typeof $.fn.slimScroll != 'undefined') {
            $("#g3w-sidebar").slimScroll({ destroy: true }).height("auto");

            $("#g3w-sidebar").slimScroll({
              touchScrollStep: 50,
              height: $(window).height() - $(".navbar-header").height() - 10 + "px",
              color: "rgba(255,255,255,0.7)",
              size: "3px"
            });
          }
        } else {
          $(".sidebar").css({ 'height': $(window).height() - $(".navbar-header").height() + "px" });
          $(".sidebar").css('overflow-y', 'auto');
        }
      }
    };

    $.LayoutManager.pushMenu = {
      activate: function activate(toggleBtn) {
        var screenSizes = $.LayoutManager.options.screenSizes;

        $(toggleBtn).on('click', function (e) {
          e.preventDefault();

          if ($(window).width() > screenSizes.sm - 1) {
            if ($("body").hasClass('sidebar-collapse')) {
              $("body").removeClass('sidebar-collapse').trigger('expanded.pushMenu');
            } else {
              $("body").addClass('sidebar-collapse').trigger('collapsed.pushMenu');
            }
          } else {
              if ($("body").hasClass('sidebar-open')) {
                $("body").removeClass('sidebar-open').removeClass('sidebar-collapse').trigger('collapsed.pushMenu');
              } else {
                $("body").addClass('sidebar-open').trigger('expanded.pushMenu');
              }
            }
        });

        if ($.LayoutManager.options.sidebarExpandOnHover || $('body').hasClass('fixed') && $('body').hasClass('sidebar-mini')) {
          this.expandOnHover();
        }
      },
      expandOnHover: function expandOnHover() {
        var _this = this;
        var screenWidth = $.LayoutManager.options.screenSizes.sm - 1;

        $('.main-sidebar').hover(function () {
          if ($('body').hasClass('sidebar-mini') && $("body").hasClass('sidebar-collapse') && $(window).width() > screenWidth) {
            _this.expand();
          }
        }, function () {
          if ($('body').hasClass('sidebar-mini') && $('body').hasClass('sidebar-expanded-on-hover') && $(window).width() > screenWidth) {
            _this.collapse();
          }
        });
      },
      expand: function expand() {
        $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
      },
      collapse: function collapse() {
        if ($('body').hasClass('sidebar-expanded-on-hover')) {
          $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
        }
      }
    };

    $.LayoutManager.tree = function (menu) {
      var _this = this;
      var animationSpeed = $.LayoutManager.options.animationSpeed;

      $(document).on('click', menu + ' li a', function (e) {
        var $this = $(this);

        var checkElement = $this.next();

        if (checkElement.is('.treeview-menu') && checkElement.is(':visible')) {
          checkElement.slideUp(animationSpeed, function () {
            checkElement.parent("li.treeview").removeClass("active");
            checkElement.removeClass('menu-open');
          });
        } else if (checkElement.is('.treeview-menu') && !checkElement.is(':visible')) {
            var parent = $this.parents('ul').first();
            var parent_li = $this.parent("li");
            var li_siblings = parent_li.siblings();
            var parent_find_active;
            var sidebar_content_height = parent.height() - parent.find('li.header').outerHeight();
            var treeviewHeight = parent_li.outerHeight();
            li_siblings.not('.header').each(function (index, el) {
              treeviewHeight += $(el).find('a').outerHeight();
            });
            var section_height = sidebar_content_height - treeviewHeight;

            var ul = parent.find('ul.treeview-menu:visible').slideUp(animationSpeed);

            ul.removeClass('menu-open');

            checkElement.slideDown(animationSpeed, function () {
              checkElement.addClass('menu-open');
              parent_find_active = parent.find('li.treeview.active');
              parent_find_active.removeClass('active');
              parent_li.addClass('active');

              _this.layout.fix();
            });
          }

        if (checkElement.is('.treeview-menu')) {
          e.preventDefault();
        }
      });
    };

    $.LayoutManager.floatBar = $.LayoutManager.controlSidebar = {
      activate: function activate() {
        var _this = this;

        var o = $.LayoutManager.options.controlSidebarOptions;

        var sidebar = $(o.selector);

        var btn = $(o.toggleBtnSelector);

        btn.on('click', function (e) {
          e.preventDefault();

          if (!sidebar.hasClass('control-sidebar-open') && !$('body').hasClass('control-sidebar-open')) {
            _this.open(sidebar, o.slide);
          } else {
            _this.close(sidebar, o.slide);
          }
        });

        var bg = $(".control-sidebar-bg");
        _this._fix(bg);

        if ($('body').hasClass('fixed')) {
          _this._fixForFixed(sidebar);
        } else {
          if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
            _this._fixForContent(sidebar);
          }
        }
      },
      open: function open(sidebar, slide) {
        if (slide) {
          sidebar.addClass('control-sidebar-open');
        } else {
          $('body').addClass('control-sidebar-open');
        }
      },
      close: function close(sidebar, slide) {
        if (slide) {
          sidebar.removeClass('control-sidebar-open');
        } else {
          $('body').removeClass('control-sidebar-open');
        }
      },
      _fix: function _fix(sidebar) {
        var _this = this;
        if ($("body").hasClass('layout-boxed')) {
          sidebar.css('position', 'absolute');
          sidebar.height($(".wrapper").height());
          $(window).resize(function () {
            _this._fix(sidebar);
          });
        } else {
          sidebar.css({
            'position': 'fixed',
            'height': 'auto'
          });
        }
      },
      _fixForFixed: function _fixForFixed(sidebar) {
        sidebar.css({
          'position': 'fixed',
          'max-height': '100%',

          'padding-bottom': '50px'
        });
      },
      _fixForContent: function _fixForContent(sidebar) {
        $(".content-wrapper, .right-side").css('min-height', sidebar.height());
      }
    };

    $.LayoutManager.boxWidget = {
      selectors: $.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,
      icons: $.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,
      animationSpeed: $.LayoutManager.options.animationSpeed,
      activate: function activate(_box) {
        var _this = this;
        if (!_box) {
          _box = document;
        }

        $(_box).on('click', _this.selectors.collapse, function (e) {
          e.preventDefault();
          _this.collapse($(this));
        });

        $(_box).on('click', _this.selectors.remove, function (e) {
          e.preventDefault();
          _this.remove($(this));
        });
      },
      collapse: function collapse(element) {
        var _this = this;

        var box = element.parents(".box").first();

        var box_content = box.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");
        if (!box.hasClass("collapsed-box")) {
          element.find(".btn-collapser").removeClass(_this.icons.collapse).addClass(_this.icons.open);

          box_content.slideUp(_this.animationSpeed, function () {
            box.addClass("collapsed-box");
          });
        } else {
          element.find(".btn-collapser").removeClass(_this.icons.open).addClass(_this.icons.collapse);

          box_content.slideDown(_this.animationSpeed, function () {
            box.removeClass("collapsed-box");
          });
        }
      },
      remove: function remove(element) {
        var box = element.parents(".box").first();
        box.slideUp(this.animationSpeed);
      }
    };

    return $.LayoutManager;
  },

  addRefreshButton: function addRefreshButton() {
    "use strict";

    $.fn.boxRefresh = function (options) {
      var settings = $.extend({
        trigger: ".refresh-btn",

        source: "",
        onLoadStart: function onLoadStart(box) {
          return box;
        },
        onLoadDone: function onLoadDone(box) {
          return box;
        }
      }, options);

      var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');

      return this.each(function () {
        if (settings.source === "") {
          if (window.console) {
            window.console.log("Please specify a source first - boxRefresh()");
          }
          return;
        }

        var box = $(this);

        var rBtn = box.find(settings.trigger).first();

        rBtn.on('click', function (e) {
          e.preventDefault();

          start(box);

          box.find(".box-body").load(settings.source, function () {
            done(box);
          });
        });
      });

      function start(box) {
        box.append(overlay);

        settings.onLoadStart.call(box);
      }

      function done(box) {
        box.find(overlay).remove();

        settings.onLoadDone.call(box);
      }
    };
    return $.LayoutManager;
  },

  activateBox: function activateBox() {
    'use strict';

    $.fn.activateBox = function () {
      $.LayoutManager.boxWidget.activate(this);
    };

    return $.LayoutManager;
  },

  listCustomPlugin: function listCustomPlugin() {
    'use strict';

    $.fn.todolist = function (options) {
      var settings = $.extend({
        onCheck: function onCheck(ele) {
          return ele;
        },
        onUncheck: function onUncheck(ele) {
          return ele;
        }
      }, options);

      return this.each(function () {

        if (typeof $.fn.iCheck != 'undefined') {
          $('input', this).on('ifChecked', function () {
            var ele = $(this).parents("li").first();
            ele.toggleClass("done");
            settings.onCheck.call(ele);
          });

          $('input', this).on('ifUnchecked', function () {
            var ele = $(this).parents("li").first();
            ele.toggleClass("done");
            settings.onUncheck.call(ele);
          });
        } else {
          $('input', this).on('change', function () {
            var ele = $(this).parents("li").first();
            ele.toggleClass("done");
            if ($('input', ele).is(":checked")) {
              settings.onCheck.call(ele);
            } else {
              settings.onUncheck.call(ele);
            }
          });
        }
      });
    };
    return $.LayoutManager;
  },

  setup: function setup() {
    "use strict";

    $("body").removeClass("hold-transition");

    if (typeof LayoutManagerOptions !== "undefined") {
      $.extend(true, $.LayoutManager.options, LayoutManagerOptions);
    }

    var o = $.LayoutManager.options;

    $.LayoutManager._init();

    $.LayoutManager.layout.activate();

    $.LayoutManager.tree('.sidebar');

    if (o.enableControlSidebar) {
      $.LayoutManager.controlSidebar.activate();
    }

    if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
      $(".navbar .menu").slimscroll({
        height: o.navbarMenuHeight,
        alwaysVisible: false,
        size: o.navbarMenuSlimscrollWidth
      }).css("width", "100%");
    }

    if (o.sidebarPushMenu) {
      $.LayoutManager.pushMenu.activate(o.sidebarToggleSelector);
    }

    if (o.enableBoxWidget) {
      $.LayoutManager.boxWidget.activate();
    }

    if (o.enableFastclick && typeof FastClick != 'undefined') {
      FastClick.attach(document.body);
    }

    if (o.directChat.enable) {
      $(document).on('click', o.directChat.contactToggleSelector, function () {
        var box = $(this).parents('.direct-chat').first();
        box.toggleClass('direct-chat-contacts-open');
      });
    }

    $('.btn-group[data-toggle="btn-toggle"]').each(function () {
      var group = $(this);
      $(this).find(".btn").on('click', function (e) {
        group.find(".btn.active").removeClass("active");
        $(this).addClass("active");
        e.preventDefault();
      });
    });

    return $.LayoutManager.addRefreshButton().activateBox().listCustomPlugin();
  },

  loading: function loading(start) {
    $('#initerror').remove();
    start = _.isBoolean(start) ? start : true;
    if (start) {
      $('body').append("\n          <div id=\"startingspinner\">\n          <div class=\"double-bounce1\"></div>\n          <div class=\"double-bounce2\"></div>\n          </div>");
    } else {
      $('#startingspinner').remove();
    }
  }

};

var layout = $.LayoutManager;

exports.default = {
  name: 'app',

  mixins: [_mixins.resizeMixin],

  data: function data() {
    return {
      customcredits: false,
      appState: _application2.default.getState(),
      current_custom_modal_content: null,
      language: null,
      cookie_law_buttonText: t('cookie_law.buttonText')
    };
  },


  components: {
    HeaderItem: _HeaderItem2.default,
    CookieLaw: _vueCookieLaw2.default
  },

  computed: {
    app: function app() {
      return this.appState.gui.app;
    },
    languages: function languages() {
      var languages = Array.isArray(this.appconfig.i18n) && this.appconfig.i18n || [];
      return languages.length > 1 && languages;
    },
    currentProject: function currentProject() {
      return _projects2.default.getCurrentProject();
    },
    appconfig: function appconfig() {
      return _application2.default.getConfig();
    },
    isIframe: function isIframe() {
      return !!this.appconfig.group.layout.iframe;
    },
    urls: function urls() {
      return this.appconfig.urls;
    },
    staticurl: function staticurl() {
      return this.urls.staticurl;
    },
    powered_by: function powered_by() {
      return this.appconfig.group.powered_by;
    },
    clienturl: function clienturl() {
      return this.urls.clienturl;
    },
    g3w_suite_logo: function g3w_suite_logo() {
      return this.clienturl + "images/g3wsuite_logo.png";
    },
    credits_logo: function credits_logo() {
      return this.clienturl + "images/logo_gis3w_156_85.png";
    },
    logo_url: function logo_url() {
      var logo_project_url = this.currentProject.getThumbnail();
      return logo_project_url ? logo_project_url : "" + this.appconfig.mediaurl + this.appconfig.logo_img;
    },
    logo_link: function logo_link() {
      var logo_link = this.getLogoLink();
      return logo_link ? logo_link : "#";
    },
    logo_link_target: function logo_link_target() {
      var logo_link = this.getLogoLink();
      return logo_link ? "_blank" : "";
    },
    project_title: function project_title() {
      return this.currentProject.getState().name;
    },
    user: function user() {
      return this.appconfig.user && this.appconfig.user.username ? this.appconfig.user : null;
    },
    login_url: function login_url() {
      return this.appconfig.user.login_url;
    },
    numberOfProjectsInGroup: function numberOfProjectsInGroup() {
      return this.appconfig.projects.length;
    },
    hasRelatedMaps: function hasRelatedMaps() {
      return this.appconfig.macrogroups.length + this.appconfig.groups.length + this.appconfig.projects.length > 1;
    },
    frontendurl: function frontendurl() {
      return this.urls.frontendurl;
    },
    main_title: function main_title() {
      var main_title = this.appconfig.main_map_title;
      var group_name = this.appconfig.group.name || this.appconfig.group.slug;
      return main_title ? main_title + " - " + group_name : group_name;
    }
  },

  methods: {
    templateResultLanguages: function templateResultLanguages(state) {
      if (!state.id) {
        return state.text;
      }
      return $("\n        <div style=\"font-weight: bold; display:flex; align-items: center; justify-content: space-around;\">\n          <img src=\"" + this.staticurl + "img/flags/" + state.element.value.toLowerCase() + ".png\" />\n          <span style=\"margin-left: 5px;\">" + state.text + "</span> \n        </span>");
    },
    resize: function () {
      var _ref = _asyncToGenerator(function* () {
        if (!this.isIframe) {
          yield this.$nextTick();
          var max_width = this.$refs.navbar_toggle.offsetWidth > 0 ? this.$refs.navbar.offsetWidth - this.$refs.navbar_toggle.offsetWidth : this.$refs.mainnavbar.offsetWidth - this.$refs['app-navbar-nav'].offsetWidth;
          this.$refs.main_title_project_title.style.maxWidth = max_width - this.logoWidth - 15 + "px";
        }
      });

      function resize() {
        return _ref.apply(this, arguments);
      }

      return resize;
    }(),
    showCustomModalContent: function showCustomModalContent(id) {
      var _custom_modals$find = this.custom_modals.find(function (custommodal) {
        return custommodal.id === id;
      }),
          content = _custom_modals$find.content;

      this.current_custom_modal_content = content;
    },
    closePanel: function closePanel() {
      sidebarService.closePanel();
    },
    getLogoLink: function getLogoLink() {
      return this.appconfig.logo_link ? this.appconfig.logo_link : null;
    },
    openProjectsMenu: function openProjectsMenu() {
      _gui2.default.openProjectsMenu();
    },
    initDialogMessages: function () {
      var _ref2 = _asyncToGenerator(function* () {
        var messages = this.currentProject.getMessages();

        if (!messages) {
          return;
        }

        var projectId = this.currentProject.getId();

        var _loop = function* _loop(i) {
          var message = messages.items[i];
          var data = _application2.default.getLocalItem(_constant.LOCAL_ITEM_IDS.MESSAGES.id) || _constant.LOCAL_ITEM_IDS.MESSAGES.value;

          if (undefined === data[projectId]) {
            data[projectId] = [];
          }

          if (undefined !== data[projectId].find(function (id) {
            return id === message.id;
          })) {
            return "continue";
          }

          var doNotShowAgainVueComponent = new (Vue.extend({
            data: function data() {
              return { id: uniqueId(), checked: false };
            },
            template: "\n            <div style=\"display: flex; margin-top: 10px;\">\n              <input :id=\"id\"\n                v-model=\"checked\"\n                class=\"magic-checkbox\"\n                type=\"checkbox\"/>\n              <label :for=\"id\" v-t=\"'dont_show_again'\"/>\n            </div>\n          "
          }))();

          var content = document.createElement('div');

          content.append.apply(content, _toConsumableArray(new DOMParser().parseFromString(message.body, 'text/html').body.childNodes));

          content.append(doNotShowAgainVueComponent.$mount().$el);

          yield new Promise(function (resolve) {
            _gui2.default.showModalDialog({
              title: message.title,
              message: content,
              size: 'large',
              closeButton: false,
              className: "g3w-modal-project-message " + Object.entries(messages.levels).find(function (_ref3) {
                var _ref4 = _slicedToArray(_ref3, 2),
                    key = _ref4[0],
                    value = _ref4[1];

                return value === message.level;
              })[0],
              buttons: {
                close: {
                  label: t('close'),
                  className: 'btn-secondary',
                  callback: function callback() {
                    if (doNotShowAgainVueComponent.checked) {
                      data[projectId].push(message.id);
                      _application2.default.setLocalItem({ id: _constant.LOCAL_ITEM_IDS.MESSAGES.id, data: data });
                    }
                    resolve();
                  }
                }
              }
            });
          });
        };

        for (var i = 0; i < messages.items.length; i++) {
          var _ret = yield* _loop(i);

          if (_ret === "continue") continue;
        }
      });

      function initDialogMessages() {
        return _ref2.apply(this, arguments);
      }

      return initDialogMessages;
    }(),
    openChangeMapMenu: function openChangeMapMenu() {
      _gui2.default.openChangeMapMenu();
    }
  },

  watch: {
    'language': function language(_language, currentlanguage) {
      if (currentlanguage) {
        _application2.default.changeLanguage(_language);
        this.cookie_law_buttonText = t('cookie_law.buttonText');
      }
    }
  },

  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
    this.delayTime = 0;
  },
  created: function created() {
    var _this2 = this;

    this.language = this.appconfig._i18n.language;
    this.custom_modals = [];
    this.custom_header_items_position = {
      0: [],
      1: [],
      2: [],
      3: [],
      4: []
    };
    this.customlinks = Array.isArray(this.appconfig.header_custom_links) ? this.appconfig.header_custom_links.filter(function (customitem) {
      if (customitem !== null) {
        var id = customitem.id = uniqueId();
        customitem.type === 'modal' && _this2.custom_modals.push({
          id: id,
          content: customitem.content
        });
        var position = 1 * (customitem.position || 0);
        position = position > 4 ? 4 : position < 0 || Number.isNaN(position) ? 0 : position;
        _this2.custom_header_items_position[position].push(customitem);
        return true;
      }
      return false;
    }) : [];

    !!this.appconfig.credits && $.get(this.appconfig.credits).then(function (credits) {
      return _this2.customcredits = credits !== 'None' && credits;
    });
  },
  mounted: function () {
    var _ref5 = _asyncToGenerator(function* () {
      var _this3 = this;

      this.initDialogMessages();

      this.logoWidth = 0;

      yield this.$nextTick();

      var rightNavBarElements = !this.isIframe ? this.$refs.mainnavbar.getElementsByTagName('ul') : [];

      var elementLenght = rightNavBarElements.length;

      this.rightNavbarWidth = 15;

      for (var i = 0; i < elementLenght; i++) {
        this.rightNavbarWidth += rightNavBarElements.item(i).offsetWidth;
      }

      this.language = this.appconfig.user.i18n;

      yield this.$nextTick();

      if (!this.isIframe) {
        this.$refs.img_logo.addEventListener('load', function () {
          _this3.logoWidth = _this3.$refs.img_logo.offsetWidth + 15;
          _this3.resize();
        }, { once: true });
      }

      layout.loading(false);
      layout.setup();

      layout.pushMenu.expandOnHover();
      layout.controlSidebar._fix($(".control-sidebar-bg"));
      layout.controlSidebar._fix($(".control-sidebar"));

      function setFloatBarMaxHeight() {
        $(layout.options.controlSidebarOptions.selector).css('max-height', $(window).innerHeight());
        $('.g3w-sidebarpanel').css('height', $(window).height() - $("#main-navbar").height());
      }
      setFloatBarMaxHeight();

      $(window).resize(function () {
        setFloatBarMaxHeight();
        $('#g3w-modal-overlay').css('height', $(window).height());
      });

      document.body.classList.toggle('is-mobile', this.isMobile());
    });

    function mounted() {
      return _ref5.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.app.disabled),expression:"app.disabled"}],staticClass:"wrapper"},[_c('cookie-law',{attrs:{"theme":"dark-lime","buttonText":_vm.cookie_law_buttonText}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('cookie_law.message'),expression:"'cookie_law.message'"}],attrs:{"slot":"message"},slot:"message"})]),_vm._v(" "),(!_vm.isIframe)?_c('header',{staticClass:"main-header"},[_c('nav',{ref:"navbar",staticClass:"navbar navbar-inverse navbar-fixed-top",attrs:{"role":"navigation"}},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"navbar-header"},[_c('button',{ref:"navbar_toggle",staticClass:"navbar-toggle",attrs:{"type":"button","data-toggle":"collapse","data-target":"#main-navbar"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('ellips-v'),staticStyle:{"font-size":"1.3em"}})]),_vm._v(" "),_c('a',{staticClass:"sidebar-toggle",attrs:{"id":"g3w-small-screen-hamburger-sidebar","href":"#","data-toggle":"offcanvas","role":"button"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('bars'),staticStyle:{"font-size":"1.3em"}})]),_vm._v(" "),_c('div',{staticClass:"logo-wrapper",class:{'mobile': _vm.isMobile()}},[(_vm.logo_url)?_c('a',{staticClass:"project_logo_link",attrs:{"href":_vm.logo_link,"target":_vm.logo_link_target}},[_c('img',{ref:"img_logo",staticClass:"img-responsive",staticStyle:{"max-width":"250px"},attrs:{"src":_vm.logo_url}})]):_vm._e(),_vm._v(" "),_c('div',{ref:"main_title_project_title",staticClass:"project_title_content"},[_c('div',{staticClass:"main_title"},[_vm._v(_vm._s(_vm.main_title))]),_vm._v(" "),_c('div',{staticClass:"sub_title"},[_vm._v(_vm._s(_vm.project_title))])])])]),_vm._v(" "),_c('div',{ref:"mainnavbar",staticClass:"collapse navbar-collapse",staticStyle:{"text-align":"center","overflow":"hidden","margin":"0 0"},attrs:{"id":"main-navbar"}},[_c('navbarleftitems'),_vm._v(" "),_c('navbarrightitems'),_vm._v(" "),_c('ul',{ref:"app-navbar-nav",staticClass:"nav navbar-nav navbar-right app-navbar-nav"},[(!_vm.user)?_c('li',{staticClass:"dropdown user user-menu"},[_c('a',{attrs:{"href":_vm.login_url}},[_c('i',{class:_vm.g3wtemplate.getFontClass('sign-in'),attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sign_in'),expression:"'sign_in'"}]})])]):_vm._e(),_vm._v(" "),_vm._l((_vm.custom_header_items_position[0]),function(state){return _c('header-item',{key:state.id,attrs:{"state":state},on:{"show-custom-modal-content":_vm.showCustomModalContent}})}),_vm._v(" "),(_vm.hasRelatedMaps)?_c('li',{staticClass:"dropdown user",attrs:{"id":"changemaps"}},[_c('a',{staticClass:"dropdown-toggle",attrs:{"href":"#","data-toggle":"dropdown"},on:{"click":_vm.openChangeMapMenu}},[_c('i',{class:_vm.g3wtemplate.getFontClass('change-map'),attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('changemap'),expression:"'changemap'"}]})])]):_vm._e(),_vm._v(" "),_vm._l((_vm.custom_header_items_position[1]),function(state){return _c('header-item',{key:state.id,attrs:{"state":state},on:{"show-custom-modal-content":_vm.showCustomModalContent}})}),_vm._v(" "),(_vm.user)?_c('li',{staticClass:"dropdown user user-menu"},[_c('a',{staticClass:"dropdown-toggle",attrs:{"href":"#","data-toggle":"dropdown"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('user')}),_vm._v(" "),_c('span',{staticClass:"hidden-xs"},[_vm._v(_vm._s(_vm.user.username))])]),_vm._v(" "),_c('ul',{staticClass:"dropdown-menu"},[_c('li',{staticClass:"user-header"},[_c('p',[_vm._v("\n                    "+_vm._s(_vm.user.first_name)+" "+_vm._s(_vm.user.last_name)+"\n                  ")])]),_vm._v(" "),_c('li',{staticClass:"user-footer"},[(_vm.user.admin_url)?_c('div',{staticClass:"pull-left"},[_c('a',{staticClass:"btn btn-default btn-flat skin-color bold",attrs:{"href":_vm.user.admin_url}},[_c('i',{class:_vm.g3wtemplate.getFontClass('folder')}),_vm._v(" Admin\n                    ")])]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"pull-right"},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('logout'),expression:"'logout'"}],staticClass:"btn btn-default btn-flat skin-color bold",attrs:{"href":_vm.user.logout_url}},[_c('i',{class:_vm.g3wtemplate.getFontClass('sign-out'),staticStyle:{"margin-right":"2px"}})])])])])]):_vm._e(),_vm._v(" "),_vm._l((_vm.custom_header_items_position[2]),function(state){return _c('header-item',{key:state.id,attrs:{"state":state},on:{"show-custom-modal-content":_vm.showCustomModalContent}})}),_vm._v(" "),_c('li',{staticClass:"dropdown user user-menu"},[_c('a',{staticClass:"dropdown-toggle",attrs:{"href":"#","data-toggle":"modal","data-target":"#credits"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('credits'),attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',[_vm._v("Credits")])])]),_vm._v(" "),_vm._l((_vm.custom_header_items_position[3]),function(state){return _c('header-item',{key:state.id,attrs:{"state":state},on:{"show-custom-modal-content":_vm.showCustomModalContent}})}),_vm._v(" "),(_vm.languages)?_c('li',{staticClass:"g3w-languages"},[_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('language'),expression:"'language'"},{name:"model",rawName:"v-model",value:(_vm.language),expression:"language"}],staticClass:"form-control",staticStyle:{"cursor":"pointer","width":"130px"},attrs:{"templateSelection":_vm.templateResultLanguages,"templateResult":_vm.templateResultLanguages},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.language=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},_vm._l((_vm.languages),function(lang){return _c('option',{key:lang[0],domProps:{"value":lang[0],"selected":lang[0] === _vm.language && 'selected'}},[_vm._v("\n                  "+_vm._s(lang[1])+"\n                ")])}),0)]):_vm._e(),_vm._v(" "),(_vm.frontendurl)?_c('li',{staticClass:"dropdown"},[_c('a',{attrs:{"href":_vm.frontendurl}},[_c('span',[_c('i',{class:_vm.g3wtemplate.getFontClass('home')}),_vm._v(" Home")])])]):_vm._e(),_vm._v(" "),_vm._l((_vm.custom_header_items_position[4]),function(state){return _c('header-item',{key:state.id,attrs:{"state":state},on:{"show-custom-modal-content":_vm.showCustomModalContent}})})],2)],1)])])]):_vm._e(),_vm._v(" "),_c('sidebar'),_vm._v(" "),_c('div',{staticClass:"content-wrapper",style:({paddingTop: _vm.isIframe ? 0 : null})},[_c('viewport',{attrs:{"appState":_vm.appState}})],1),_vm._v(" "),_c('floatbar'),_vm._v(" "),_c('div',{staticClass:"control-sidebar-bg"}),_vm._v(" "),_c('div',{staticClass:"modal fade modal-fullscreen force-fullscreen",attrs:{"id":"full-screen-modal","tabindex":"-1","role":"dialog","data-backdrop":"static","data-keyboard":"false","aria-labelledby":"full-screen-modal","aria-hidden":"true"}}),_vm._v(" "),_c('div',{staticClass:"modal fade",attrs:{"id":"credits"}},[_c('div',{staticClass:"modal-dialog",attrs:{"role":"document"}},[_c('div',{staticClass:"modal-content"},[_c('div',{staticClass:"modal-header"},[_vm._m(0),_vm._v(" "),_c('div',{staticStyle:{"display":"flex","flex-direction":"column","justify-content":"space-around","justify-items":"center","align-items":"center"}},[(!!_vm.customcredits)?_c('div',{staticClass:"customcredits",domProps:{"innerHTML":_vm._s(_vm.customcredits)}}):_vm._e(),_vm._v(" "),(_vm.powered_by)?_c('div',[_c('div',{staticClass:"g3w-credits-block"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('credits.g3wSuiteFramework'),expression:"'credits.g3wSuiteFramework'"}],staticClass:"credit-title-logo",staticStyle:{"background-color":"#95ad36","padding":"5px","border-radius":"3px","color":"#ffffff"}}),_vm._v(" "),_c('a',{attrs:{"target":"_blank","href":"https://g3wsuite.it/"}},[_c('img',{staticClass:"g3w-suite-logo",attrs:{"src":_vm.g3w_suite_logo,"alt":""}})]),_vm._v(" "),_c('div',{directives:[{name:"t",rawName:"v-t",value:('credits.g3wSuiteDescription'),expression:"'credits.g3wSuiteDescription'"}],staticStyle:{"margin-top":"10px"}})]),_vm._v(" "),_c('div',{directives:[{name:"t",rawName:"v-t:pre",value:('credits.productOf'),expression:"'credits.productOf'",arg:"pre"}],staticClass:"credit-title-logo g3w-credits-block",staticStyle:{"font-size":"1em","display":"flex","justify-content":"center"}},[_c('a',{staticStyle:{"text-align":"center!important"},attrs:{"href":"http://www.gis3w.it","target":"_blank"}},[_c('img',{staticClass:"img-responsive center-block",staticStyle:{"margin-left":"5px"},attrs:{"width":"60","src":_vm.credits_logo,"alt":""}})])]),_vm._v(" "),_c('address',{staticStyle:{"line-height":"1.3","text-align":"center","margin-top":"5px","display":"flex","justify-content":"center"},attrs:{"id":"address-credits"}},[_c('span',{staticStyle:{"padding":"2px"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('marker'),staticStyle:{"color":"#95ad36","font-weight":"bold"},attrs:{"aria-hidden":"true"}}),_vm._v(" Montecatini Terme - Italy\n                ")]),_vm._v(" "),_c('span',{staticStyle:{"padding":"2px"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('mobile'),staticStyle:{"color":"#95ad36"},attrs:{"aria-hidden":"true"}}),_vm._v("  +39 393 8534336\n                ")]),_vm._v(" "),_c('span',{staticStyle:{"padding":"2px"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('mail'),staticStyle:{"color":"#95ad36"},attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('a',{staticStyle:{"color":"#000000"},attrs:{"href":"mailto:info@gis3w.it"}},[_vm._v(" info@gis3w.it")])])])]):_vm._e()])])])])]),_vm._v(" "),_c('div',{staticClass:"modal fade",attrs:{"id":"custom_modal"}},[_c('div',{staticClass:"modal-dialog",attrs:{"role":"document"}},[_c('div',{staticClass:"modal-content",domProps:{"innerHTML":_vm._s(_vm.current_custom_modal_content)}})])])],1)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:"close",staticStyle:{"color":"#ffffff","font-weight":"bold","opacity":"1","position":"absolute","right":"25px","top":"20px"},attrs:{"type":"button","data-dismiss":"modal","aria-label":"Close"}},[_c('span',{attrs:{"aria-hidden":"true"}},[_vm._v("×")])])}]

},{"app/constant":5,"components/HeaderItem.vue":187,"core/i18n/i18n.service":9,"mixins":302,"services/application":310,"services/gui":319,"store/projects":335,"utils":419,"vue-cookie-law":"vue-cookie-law"}],148:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: 'c3xyline',

  props: {
    showdata: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      id: 'graphline' + getUniqueDomId(),
      selectitems: [],
      data: [],
      components: [],
      config: {
        data: {
          columns: [['x'], ['y']]
        }
      },
      size: {
        width: 0,
        height: 0
      }
    };
  },

  methods: {
    addComponent: function addComponent(component) {
      this.components.push(component);
    },
    addComponents: function addComponents() {
      var _this = this;

      var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      components.forEach(function (component) {
        return _this.addComponent(component);
      });
    },
    setConfig: function setConfig() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.config = config;
    },
    setDataOffset: function setDataOffset(offset) {
      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var data = this.getData();
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        item.value += offset;
      }
      if (render) {
        this.resize();
      }
    },
    getSelectedItems: function getSelectedItems() {
      return this.selectitems;
    },
    selectItem: function selectItem(id) {
      this.chart.select(['y'], [id]);
    },
    unselectItem: function unselectItem(id) {
      this.chart.unselect(['y'], [id]);
    },
    selectItems: function selectItems() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.chart.select([y], ids);
    },
    unselectItems: function unselectItems() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.chart.unselect(['y'], ids);
    },
    unselectAll: function unselectAll() {
      this.chart.unselect();
    },
    selectAll: function selectAll() {
      this.chart.select();
    },
    getData: function getData() {
      return this.data;
    },
    resize: function () {
      var _ref = _asyncToGenerator(function* () {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            width = _ref2.width,
            height = _ref2.height;

        yield this.$nextTick();
        this.chart.resize({
          width: width,
          height: height || $('#' + this.id).height() - 4
        });
      });

      function resize() {
        return _ref.apply(this, arguments);
      }

      return resize;
    }(),
    _setAllowedSpace: function _setAllowedSpace() {
      if (this.components && this.components.length) this.size.height = document.querySelector('.g3wform_content').offsetHeight - this.$el.offsetHeight - document.querySelector('.g3wform_header').offsetHeight - 50;
    },
    _setMaxMin: function _setMaxMin(_ref3) {
      var value = _ref3.value,
          max = _ref3.max,
          min = _ref3.min;

      min = value ? +value : +min;
      max = value ? +value : +max;
      if (min < this.chart.axis.min().y) this.chart.axis.min(min);else if (max > this.chart.axis.max().y) this.chart.axis.max(max);else {
        var dataValues = this.data.map(function (data) {
          return +data.value;
        });
        this.chart.axis.max(Math.max.apply(Math, _toConsumableArray(dataValues)));
        this.chart.axis.min(Math.min.apply(Math, _toConsumableArray(dataValues)));
      }
      this.resize();
    },
    changeItems: function changeItems(items) {
      if (items.length === 1) this._setMaxMin(items[0].value);else {
        var max = Math.max.apply(Math, _toConsumableArray(items.map(function (item) {
          return +item.value;
        })));
        var min = Math.min.apply(Math, _toConsumableArray(items.map(function (item) {
          return +item.value;
        })));
        this._setMaxMin({
          max: max,
          min: min
        });
      }
      this.resize();
    },
    changeItem: function changeItem(_ref4) {
      var item = _ref4.item,
          _ref4$render = _ref4.render,
          render = _ref4$render === undefined ? true : _ref4$render;

      var value = item.value;
      this._setMaxMin({ value: value });
      if (render) {
        this.resize();
      }
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$nextTick(function () {
      _gui2.default.on('resize', _this2.resize);
      var self = _this2;
      _this2.config.data.onselected = function (evt) {
        var _temp = [].concat(_toConsumableArray(self.selectitems), [evt]);
        self.selectitems = _temp;
      };
      _this2.config.data.onunselected = function (evt) {
        self.selectitems = self.selectitems.filter(function (selectitem) {
          return selectitem.index !== evt.index;
        });
      };
      _this2.chart = c3.generate(_extends({
        bindto: '#' + _this2.id
      }, _this2.config));
      var data = _this2.chart.data()[0] ? _this2.chart.data()[0].values : [];
      data.forEach(function (item) {
        _this2.data.push(item);
      });
      _this2._setAllowedSpace();

      _this2.$emit('chart-ready', _this2.chart);
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.data = this.selectitems = null;
    this.chart.destroy();
    this.chart = null;
    _gui2.default.off('resize', this.resize);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"chart_wrapper",staticStyle:{"height":"100%","width":"100%"}},[_c('div',{staticStyle:{"height":"100%","min-height":"200px","background-color":"#ffffff"},attrs:{"id":_vm.id}}),_vm._v(" "),_vm._l((_vm.components),function(component){return _c('div',[_c('span',{staticClass:"divider"}),_vm._v(" "),_c(component,{tag:"component",attrs:{"data":_vm.data,"selectitems":_vm.selectitems,"size":_vm.size},on:{"change-item":_vm.changeItem,"change-items":_vm.changeItems,"select-item":_vm.selectItem,"select-all":_vm.selectAll,"unselect-all":_vm.unselectAll,"unselect-item":_vm.unselectItem}})],1)})],2)}
__vue__options__.staticRenderFns = []

},{"services/gui":319,"utils":419}],149:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

var _eventbus = require('app/eventbus');

var _CatalogChangeMapThemes = require('components/CatalogChangeMapThemes.vue');

var _CatalogChangeMapThemes2 = _interopRequireDefault(_CatalogChangeMapThemes);

var _CatalogLayerContextMenu = require('components/CatalogLayerContextMenu.vue');

var _CatalogLayerContextMenu2 = _interopRequireDefault(_CatalogLayerContextMenu);

var _CatalogProjectContextMenu = require('components/CatalogProjectContextMenu.vue');

var _CatalogProjectContextMenu2 = _interopRequireDefault(_CatalogProjectContextMenu);

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _mapControls = require('store/map-controls');

var _mapControls2 = _interopRequireDefault(_mapControls);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var DEFAULT_ACTIVE_TAB = 'layers';

exports.default = {
  name: 'catalog',

  data: function data() {
    this.$options.legend.place = _application2.default.getCurrentProject().getLegendPosition() || 'tab';
    return {
      state: null,
      legend: this.$options.legend,
      showlegend: false,
      currentBaseLayer: null,
      activeTab: null,
      loading: false
    };
  },


  components: {
    ChangeMapThemesComponent: _CatalogChangeMapThemes2.default,
    CatalogLayerContextMenu: _CatalogLayerContextMenu2.default,
    CatalogProjectContextMenu: _CatalogProjectContextMenu2.default
  },

  computed: {
    showTocTools: function showTocTools() {
      return (this.project.state.map_themes || []).length > 1;
    },
    project: function project() {
      return this.state.prstate.currentProject;
    },
    title: function title() {
      return this.project.state.name;
    },
    baselayers: function baselayers() {
      return this.project.state.baselayers;
    },
    hasBaseLayers: function hasBaseLayers() {
      return this.project.state.baselayers.length > 0;
    },
    hasLayers: function hasLayers() {
      var len = 0;
      this.state.layerstrees.forEach(function (layerstree) {
        return len += layerstree.tree.length;
      });
      return this.state.external.vector.length > 0 || len > 0 || this.state.layersgroups.length > 0;
    }
  },

  methods: {
    changeMapTheme: function () {
      var _ref = _asyncToGenerator(function* (map_theme) {
        _gui2.default.closeContent();

        var changes = (yield this.$options.service.changeMapTheme(map_theme)).layers;
        var layers = Object.keys(changes).filter(function (id) {
          return changes[id].style;
        });
        var styles = (yield this.project.getMapThemeFromThemeName(map_theme)).styles;

        layers.forEach(function (id) {
          if (!changes[id].visible) {
            var layer = _catalogLayers2.default.getLayerById(id);
            layer.clearCategories();
            layer.change();
          }
        });

        layers.forEach(function (id) {
          return _eventbus.CatalogEventBus.$emit('layer-change-style', { layerId: id, style: styles[id] });
        });
      });

      function changeMapTheme(_x) {
        return _ref.apply(this, arguments);
      }

      return changeMapTheme;
    }(),
    delegationClickEventTab: function delegationClickEventTab(evt) {
      this.activeTab = evt.target.attributes['aria-controls'] ? evt.target.attributes['aria-controls'].value : this.activeTab;
    },
    showLegend: function showLegend(bool) {
      this.showlegend = bool;
    },
    setBaseLayer: function setBaseLayer(id) {
      this.currentBaseLayer = id;
      this.project.setBaseLayer(id);
      _application2.default.setBaseLayerId(id);
    },
    getSrcBaseLayerImage: function getSrcBaseLayerImage(baseLayer) {
      var image = void 0;
      var customimage = false;
      switch (baseLayer && baseLayer.servertype || baseLayer) {
        case 'OSM':
          image = 'osm.png';
          break;
        case 'Bing':
          var subtype = baseLayer.source.subtype;
          image = 'bing' + subtype + '.png';
          break;
        case 'TMS':
        case 'WMTS':
          if (baseLayer.icon) {
            customimage = true;
            image = baseLayer.icon;
            break;
          }
        default:
          image = 'nobaselayer.png';
      }
      return customimage ? image : _gui2.default.getResourcesUrl() + 'images/' + image;
    },
    onUnSelectionLayer: function onUnSelectionLayer(storeid, layerstree) {
      _gui2.default.getService('queryresults').removeFromSelection(layerstree, storeid);
    },
    onActiveFilterTokenLayer: function () {
      var _ref2 = _asyncToGenerator(function* (storeid, layerstree) {
        layerstree.filter.active = yield _catalogLayers2.default.getLayersStore(storeid).getLayerById(layerstree.id).toggleFilterToken();
      });

      function onActiveFilterTokenLayer(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return onActiveFilterTokenLayer;
    }(),
    onTreeNodeVisible: function onTreeNodeVisible(layer) {
      _gui2.default.getService('map').emit('cataloglayervisible', layer);
    },
    onTreeNodeSelected: function onTreeNodeSelected(storeid, node) {
      var layer = _catalogLayers2.default.getLayersStore(storeid).getLayerById(node.id);

      if (!layer.isSelected()) {
        _gui2.default.getService('catalog').setSelectedExternalLayer({ layer: null, type: 'vector', selected: false });
      }
      setTimeout(function () {
        _catalogLayers2.default.getLayersStore(storeid).selectLayer(node.id, !layer.isSelected());

        _gui2.default.getService('map').emit('cataloglayerselected', layer);
      });
    },
    onTreeNodeExternalSelected: function onTreeNodeExternalSelected(layer) {
      _gui2.default.getService('catalog').setSelectedExternalLayer({ layer: layer, type: 'vector', selected: !layer.selected }).then(function () {
        if (layer.selected) {
          _catalogLayers2.default.getLayersStores().forEach(function (layer) {
            layer.selectLayer(null, false);
          });
        }
      });
    },
    onRegisterControl: function onRegisterControl(id, control) {
      var _this = this;

      if ('querybbox' === id) {
        control.getInteraction().on('propertychange', function (evt) {
          if ('active' === evt.key) _this.state.highlightlayers = !evt.oldValue;
        });
      }
    }
  },

  watch: {
    'state.external.wms': function stateExternalWms(newlayers, oldlayers) {
      if (oldlayers && 0 === newlayers.length) {
        this.activeTab = this.project.state.catalog_tab || DEFAULT_ACTIVE_TAB;
      }
    },


    'state.prstate.currentProject': {
      handler: function () {
        var _ref3 = _asyncToGenerator(function* (project, oldproject) {
          var _this2 = this;

          var activeTab = project.state.catalog_tab || DEFAULT_ACTIVE_TAB;
          this.loading = 'baselayers' === activeTab;
          yield this.$nextTick();
          setTimeout(function () {
            _this2.loading = false;
            _this2.activeTab = activeTab;
          }, 'baselayers' === activeTab ? 500 : 0);
        });

        function handler(_x4, _x5) {
          return _ref3.apply(this, arguments);
        }

        return handler;
      }(),

      immediate: false
    }

  },

  created: function created() {
    this.layerpositions = _constant.MAP_SETTINGS.LAYER_POSITIONS.getPositions();

    _eventbus.CatalogEventBus.$on('unselectionlayer', this.onUnSelectionLayer);
    _eventbus.CatalogEventBus.$on('activefiltertokenlayer', this.onActiveFilterTokenLayer);
    _eventbus.CatalogEventBus.$on('treenodevisible', this.onTreeNodeVisible);
    _eventbus.CatalogEventBus.$on('treenodeselected', this.onTreeNodeSelected);
    _eventbus.CatalogEventBus.$on('treenodeexternalselected', this.onTreeNodeExternalSelected);
    _mapControls2.default.onafter('registerControl', this.onRegisterControl);
  },
  beforeMount: function beforeMount() {
    this.currentBaseLayer = this.project.state.initbaselayer;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tabbable-panel catalog",attrs:{"id":"catalog"},on:{"contextmenu":function($event){$event.preventDefault();$event.stopPropagation();}}},[_c('div',{staticClass:"tabbable-line"},[_c('ul',{staticClass:"nav nav-tabs catalalog-nav-tabs",attrs:{"role":"tablist"},on:{"!click":function($event){return _vm.delegationClickEventTab($event)}}},[(_vm.hasLayers)?_c('li',{class:{ active: ('layers' === _vm.activeTab) },attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('data'),expression:"'data'"}],attrs:{"href":"#layers","aria-controls":"layers","role":"tab","data-toggle":"tab","data-i18n":"tree"}})]):_vm._e(),_vm._v(" "),(_vm.state.external.wms.length)?_c('li',{class:{ active: ('externalwms' === _vm.activeTab) },attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('externalwms'),expression:"'externalwms'"}],attrs:{"href":"#externalwms","aria-controls":"externalwms","role":"tab","data-toggle":"tab","data-i18n":"externalwms"}})]):_vm._e(),_vm._v(" "),(_vm.hasBaseLayers)?_c('li',{class:{ active: ('baselayers' === _vm.activeTab) },attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('baselayers'),expression:"'baselayers'"}],attrs:{"href":"#baselayers","aria-controls":"baselayers","role":"tab","data-toggle":"tab","data-i18n":"baselayers"}})]):_vm._e(),_vm._v(" "),('tab' === _vm.legend.place && _vm.showlegend)?_c('li',{class:{ active: ('legend' === _vm.activeTab) },attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('legend'),expression:"'legend'"}],attrs:{"href":"#legend","aria-controls":"legend","role":"tab","data-toggle":"tab","data-i18n":"legend"}})]):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"tab-content catalog-tab-content"},[_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('div',{staticClass:"tab-pane",class:{ active: ('layers' === _vm.activeTab) },attrs:{"id":"layers","role":"tabpanel"}},[_c('helpdiv',{attrs:{"message":"catalog_items.helptext"}}),_vm._v(" "),(_vm.showTocTools)?_c('div',{staticStyle:{"margin":"2px"},attrs:{"id":"g3w-catalog-toc-layers-toolbar"}},[_c('change-map-themes-component',{key:_vm.project.state.gid,attrs:{"map_themes":_vm.project.state.map_themes},on:{"change-map-theme":_vm.changeMapTheme}})],1):_vm._e(),_vm._v(" "),_vm._l((_vm.state.layerstrees),function(_layerstree){return _c('ul',{key:_layerstree.storeid,staticClass:"tree-root root project-root"},_vm._l((_layerstree.tree),function(layerstree){return _c('tristate-tree',{key:layerstree.id,staticClass:"item",attrs:{"highlightlayers":_vm.state.highlightlayers,"layerstree":layerstree,"parentFolder":false,"root":true,"legendplace":_vm.legend.place,"parent_mutually_exclusive":false,"storeid":_layerstree.storeid}})}),1)}),_vm._v(" "),(_vm.state.external.vector.length)?_c('ul',{staticClass:"g3w-external_layers-group"},_vm._l((_vm.state.external.vector),function(layerstree){return _c('tristate-tree',{key:layerstree.id,staticClass:"item",attrs:{"externallayers":_vm.state.external.vector,"layerstree":layerstree}})}),1):_vm._e(),_vm._v(" "),_vm._l((_vm.state.layersgroups),function(layersgroup){return _c('ul',[_c('layers-group',{attrs:{"layersgroup":layersgroup}})],1)})],2),_vm._v(" "),(_vm.state.external.wms.length)?_c('div',{staticClass:"tab-pane",class:{ active: ('externalwms' === _vm.activeTab) },attrs:{"id":"externalwms","role":"tabpanel"}},[_c('ul',{staticClass:"g3w-external_wms_layers-group"},_vm._l((_vm.state.external.wms),function(layerstree){return _c('tristate-tree',{key:layerstree.id,staticClass:"item",attrs:{"externallayers":_vm.state.external.wms,"layerstree":layerstree}})}),1)]):_vm._e(),_vm._v(" "),(_vm.hasBaseLayers)?_c('div',{staticClass:"tab-pane baselayers",class:{ active: ('baselayers' === _vm.activeTab || !_vm.hasLayers) },attrs:{"id":"baselayers","role":"tabpanel"}},[_c('ul',{class:{'mobile': _vm.isMobile()},style:({ gridTemplateColumns: ("repeat(auto-fill, minmax(" + (_vm.baselayers.length > 4 ? 80 : 120) + "px, 1fr))") }),attrs:{"id":"baselayers-content"}},[_vm._l((_vm.baselayers),function(baselayer){return (!baselayer.fixed)?_c('li',{key:baselayer.title},[_c('img',{staticClass:"img-responsive img-thumbnail baselayer",style:({opacity: _vm.currentBaseLayer === baselayer.id ? 1 : 0.5}),attrs:{"src":_vm.getSrcBaseLayerImage(baselayer)},on:{"click":function($event){$event.stopPropagation();return _vm.setBaseLayer(baselayer.id)}}}),_vm._v(" "),_c('div',{staticClass:"baseselayer-text text-center"},[_vm._v(_vm._s(baselayer.title))])]):_vm._e()}),_vm._v(" "),_c('li',{on:{"click":function($event){$event.stopPropagation();return _vm.setBaseLayer(null)}}},[_c('img',{staticClass:"img-responsive img-thumbnail baselayer",style:({ opacity: _vm.currentBaseLayer === null ? 1 : 0.5 }),attrs:{"src":_vm.getSrcBaseLayerImage(null)}}),_vm._v(" "),_c('div',{directives:[{name:"t",rawName:"v-t",value:('nobaselayer'),expression:"'nobaselayer'"}],staticClass:"baseselayer-text text-center"})])],2)]):_vm._e(),_vm._v(" "),_vm._l((_vm.state.layerstrees),function(_layerstree){return ('tab' === _vm.legend.place)?_c('layerslegend',{key:_layerstree.id,attrs:{"legend":_vm.legend,"active":'legend' === _vm.activeTab,"layerstree":_layerstree},on:{"showlegend":_vm.showLegend}}):_vm._e()})],2)]),_vm._v(" "),_c('catalog-layer-context-menu',{attrs:{"external":_vm.state.external}}),_vm._v(" "),_c('catalog-project-context-menu')],1)}
__vue__options__.staticRenderFns = []

},{"app/constant":5,"app/eventbus":43,"components/CatalogChangeMapThemes.vue":150,"components/CatalogLayerContextMenu.vue":151,"components/CatalogProjectContextMenu.vue":156,"services/application":310,"services/gui":319,"store/catalog-layers":329,"store/map-controls":332}],150:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "changemapthemes",
  data: function data() {
    var collapsed = _projects2.default.getCurrentProject().state.toc_themes_init_status === 'collapsed';
    var current_map_theme = this.map_themes.find(function (map_theme) {
      return map_theme.default;
    });
    return {
      current_map_theme: current_map_theme ? current_map_theme.theme : null,
      collapsed: collapsed
    };
  },

  props: {
    map_themes: {
      type: Array,
      default: []
    }
  },
  watch: {
    'current_map_theme': {
      immediate: false,
      handler: function handler(map_theme) {
        this.$emit('change-map-theme', map_theme);
      }
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"sidebar-menu"},[_c('li',{staticClass:"treeview sidebaritem skin-border-color",staticStyle:{"margin-bottom":"5px","border-bottom":"2px solid"},attrs:{"id":"g3w-catalog-toc-views"}},[_c('a',{ref:"g3w-map-theme-ancor",staticStyle:{"display":"flex","align-items":"center","padding":"5px 5px 5px 2px"},attrs:{"href":"#"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('caret-down'),staticStyle:{"padding":"3px"}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass('eye'),staticStyle:{"padding":"0 0 0 4px"}}),_vm._v(" "),_c('span',{directives:[{name:"show",rawName:"v-show",value:(_vm.current_map_theme ),expression:"current_map_theme "}],staticClass:"treeview-label g3w-long-text",staticStyle:{"overflow":"hidden","white-space":"normal","text-overflow":"ellipsis"}},[_c('span',{directives:[{name:"t",rawName:"v-t:pre",value:('sdk.catalog.current_map_theme_prefix'),expression:"'sdk.catalog.current_map_theme_prefix'",arg:"pre"}],staticStyle:{"color":"#cccccc !important"}},[_vm._v(":")]),_vm._v(" "),_c('span',{staticClass:"skin-color",staticStyle:{"font-size":"1.1em"}},[_vm._v(_vm._s(_vm.current_map_theme))])]),_vm._v(" "),_c('span',{directives:[{name:"show",rawName:"v-show",value:(!_vm.current_map_theme),expression:"!current_map_theme"}],staticClass:"treeview-label",staticStyle:{"color":"#cccccc !important","font-weight":"bold"}},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.choose_map_theme'),expression:"'sdk.catalog.choose_map_theme'"}]})])]),_vm._v(" "),_c('ul',{staticClass:"treeview-menu",class:{'menu-open': !_vm.collapsed},style:({display: _vm.collapsed ? 'none' : 'block'}),attrs:{"id":"g3w-catalog-views"}},[_c('li',{staticStyle:{"padding":"5px 5px 5px 17px"}},_vm._l((_vm.map_themes),function(map_theme,index){return _c('div',{key:map_theme.theme},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.current_map_theme),expression:"current_map_theme"}],staticClass:"magic-radio",attrs:{"type":"radio","name":"radio","id":("g3w-map_theme-" + index)},domProps:{"value":map_theme.theme,"checked":map_theme.default,"checked":_vm._q(_vm.current_map_theme,map_theme.theme)},on:{"change":function($event){_vm.current_map_theme=map_theme.theme}}}),_vm._v(" "),_c('label',{staticStyle:{"display":"flex","justify-content":"space-between"},attrs:{"for":("g3w-map_theme-" + index)}},[_c('span',{staticClass:"g3w-long-text"},[_vm._v(_vm._s(map_theme.theme))])])])}),0)])])])}
__vue__options__.staticRenderFns = []

},{"store/projects":335}],151:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("li .item-text[data-v-7828b5c0]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _vueColor = require('vue-color');

var _LayerOpacityPicker = require('components/LayerOpacityPicker.vue');

var _LayerOpacityPicker2 = _interopRequireDefault(_LayerOpacityPicker);

var _eventbus = require('app/eventbus');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var shpwrite = require('shp-write');
var TableComponent = require('gui/table/vue/table');

var _require2 = require('utils'),
    downloadFile = _require2.downloadFile;

var OFFSETMENU = {
  top: 50,
  left: 15
};

exports.default = {
  name: 'Cataloglayermenu',

  props: {
    external: {
      type: Object
    }
  },

  data: function data() {
    return {
      layerMenu: {
        show: false,
        top: 0,
        left: 0,
        tooltip: false,
        name: '',
        layer: null,
        loading: {
          data_table: false,
          shp: false,
          csv: false,
          gpx: false,
          gpkg: false,
          xls: false
        },

        colorMenu: {
          show: false,
          top: 0,
          left: 0,
          color: null
        },

        stylesMenu: {
          show: false,
          top: 0,
          left: 0,
          style: null,
          default: null
        },

        filtersMenu: {
          show: false,
          top: 0,
          left: 0,
          style: null,
          default: null
        },

        metadatainfoMenu: {
          show: false,
          top: 0,
          left: 0
        }
      }
    };
  },


  computed: {
    layers_url: function layers_url() {
      return _application2.default.getCurrentProject().getState().layers_url;
    }
  },

  components: {
    'chrome-picker': _vueColor.Chrome,
    'layer-opacity-picker': _LayerOpacityPicker2.default
  },

  methods: {
    addLayerMenuItem: function addLayerMenuItem() {
      var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.layerMenu = _extends({}, this.layerMenu, item);
    },
    _hideMenu: function _hideMenu() {
      this.layerMenu.show = false;
      this.layerMenu.styles = false;
      this.layerMenu.loading.data_table = false;
      this.layerMenu.loading.shp = false;
      this.layerMenu.loading.csv = false;
      this.layerMenu.loading.gpx = false;
      this.layerMenu.loading.gpkg = false;
      this.layerMenu.loading.xls = false;
      this.layerMenu.loading.geotiff = false;

      this.layerMenu.loading.unknow = false;
    },
    closeLayerMenu: function closeLayerMenu() {
      var menu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._hideMenu();
      this.showColorMenu(false);
      menu.show = false;
    },
    onbeforeDestroyChangeColor: function onbeforeDestroyChangeColor() {
      this.$refs.color_picker.$off();
    },
    onChangeColor: function onChangeColor(val) {
      var mapService = _gui2.default.getService('map');
      this.layerMenu.layer.color = val;
      var layer = mapService.getLayerByName(this.layerMenu.name);
      var style = layer.getStyle();
      style._g3w_options.color = val;
      layer.setStyle(style);
    },
    canShowWmsUrl: function canShowWmsUrl(layerId) {
      var originalLayer = _catalogLayers2.default.getLayerById(layerId);
      return originalLayer ? !!(!originalLayer.isType('table') && originalLayer.getFullWmsUrl()) : false;
    },
    canShowWfsUrl: function canShowWfsUrl(layerId) {
      var originalLayer = _catalogLayers2.default.getLayerById(layerId);
      return originalLayer && !originalLayer.isType('table') && originalLayer.isWfsActive();
    },
    canDownloadXls: function canDownloadXls(layerId) {
      var layer = _catalogLayers2.default.getLayerById(layerId);
      return layer ? layer.isXlsDownlodable() : false;
    },
    canDownloadGpx: function canDownloadGpx(layerId) {
      var layer = _catalogLayers2.default.getLayerById(layerId);
      return layer ? layer.isGpxDownlodable() : false;
    },
    canDownloadGpkg: function canDownloadGpkg(layerId) {
      var layer = _catalogLayers2.default.getLayerById(layerId);
      return layer ? layer.isGpkgDownlodable() : false;
    },
    canDownloadCsv: function canDownloadCsv(layerId) {
      var layer = _catalogLayers2.default.getLayerById(layerId);
      return layer ? layer.isCsvDownlodable() : false;
    },
    canDownloadGeoTIFF: function canDownloadGeoTIFF(layerId) {
      var layer = _catalogLayers2.default.getLayerById(layerId);
      return layer ? layer.isGeoTIFFDownlodable() : false;
    },
    canDownloadShp: function canDownloadShp(layerId) {
      var layer = _catalogLayers2.default.getLayerById(layerId);
      return layer ? layer.isShpDownlodable() : false;
    },
    getWmsUrl: function getWmsUrl(layerId) {
      return _catalogLayers2.default.getLayerById(layerId).getCatalogWmsUrl();
    },
    getWfsUrl: function getWfsUrl(layerId) {
      return _catalogLayers2.default.getLayerById(layerId).getCatalogWfsUrl();
    },
    copyUrl: function copyUrl() {
      var _this = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          evt = _ref.evt,
          layerId = _ref.layerId,
          type = _ref.type;

      var url = this['get' + type + 'Url'](layerId);
      var ancorEement = document.createElement('a');
      ancorEement.href = url;
      var tempInput = document.createElement('input');
      tempInput.value = ancorEement.href;
      document.body.appendChild(tempInput);
      tempInput.select();
      document.execCommand("copy");
      $(evt.target).attr('data-original-title', t('sdk.catalog.menu.wms.copied')).tooltip('show');
      $(evt.target).attr('title', this.copywmsurltooltip).tooltip('fixTitle');
      document.body.removeChild(tempInput);
      ancorEement = null;
      setTimeout(function () {
        $('[data-toggle="tooltip"]').tooltip("destroy");
        _this._hideMenu();
      }, 600);
    },
    downloadGeoTIFF: function downloadGeoTIFF(layerId) {
      var _this2 = this;

      var map_extent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var caller_download_id = _application2.default.setDownload(true);
      this.layerMenu.loading.geotiff = true;
      var layer = _catalogLayers2.default.getLayerById(layerId);
      layer.getGeoTIFF({
        data: map_extent ? {
          map_extent: _gui2.default.getService('map').getMapExtent().toString()
        } : undefined
      }).catch(function (err) {
        return _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this2.layerMenu.loading.geotiff = false;
        _application2.default.setDownload(false, caller_download_id);
        _this2._hideMenu();
      });
    },
    downloadShp: function downloadShp(layerId) {
      var _this3 = this;

      var caller_download_id = _application2.default.setDownload(true);
      this.layerMenu.loading.shp = true;
      var layer = _catalogLayers2.default.getLayerById(layerId);
      layer.getShp().catch(function (err) {
        return _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this3.layerMenu.loading.shp = false;
        _application2.default.setDownload(false, caller_download_id);
        _this3._hideMenu();
      });
    },
    downloadCsv: function downloadCsv(layerId) {
      var _this4 = this;

      var caller_download_id = _application2.default.setDownload(true);
      this.layerMenu.loading.csv = true;
      var layer = _catalogLayers2.default.getLayerById(layerId);
      layer.getCsv().catch(function (err) {
        return _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this4.layerMenu.loading.csv = false;
        _application2.default.setDownload(false, caller_download_id);
        _this4._hideMenu();
      });
    },
    downloadXls: function downloadXls(layerId) {
      var _this5 = this;

      var caller_download_id = _application2.default.setDownload(true);
      this.layerMenu.loading.xls = true;
      var layer = _catalogLayers2.default.getLayerById(layerId);
      layer.getXls().catch(function (err) {
        return _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this5.layerMenu.loading.xls = false;
        _application2.default.setDownload(false, caller_download_id);
        _this5._hideMenu();
      });
    },
    downloadGpx: function downloadGpx(layerId) {
      var _this6 = this;

      var caller_download_id = _application2.default.setDownload(true);
      this.layerMenu.loading.gpx = true;
      var layer = _catalogLayers2.default.getLayerById(layerId);
      layer.getGpx().catch(function (err) {
        return _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this6.layerMenu.loading.gpx = false;
        _application2.default.setDownload(false, caller_download_id);
        _this6._hideMenu();
      });
    },
    downloadGpkg: function downloadGpkg(layerId) {
      var _this7 = this;

      var caller_download_id = _application2.default.setDownload(true);
      this.layerMenu.loading.gpkg = true;
      var layer = _catalogLayers2.default.getLayerById(layerId);
      layer.getGpkg().catch(function (err) {
        return _gui2.default.notify.error(t("info.server_error"));
      }).finally(function () {
        _this7.layerMenu.loading.gpkg = false;
        _application2.default.setDownload(false, caller_download_id);
        _this7._hideMenu();
      });
    },
    changeLayerMapPosition: function changeLayerMapPosition(_ref2) {
      var position = _ref2.position,
          layer = _ref2.layer;

      var changed = layer.position !== position;
      if (changed) {
        layer.position = position;
        _gui2.default.getService('map').changeLayerMapPosition({ id: layer.id, position: position });
        this._hideMenu();
      }
    },
    setWMSOpacity: function setWMSOpacity(_ref3) {
      var _ref3$id = _ref3.id,
          id = _ref3$id === undefined ? this.layerMenu.layer.id : _ref3$id,
          opacity = _ref3.value;

      this.layerMenu.layer.opacity = opacity;
      _gui2.default.getService('map').changeLayerOpacity({ id: id, opacity: opacity });
    },
    zoomToLayer: function zoomToLayer(layer) {
      _gui2.default.getService('map').goToBBox([layer.bbox.minx, layer.bbox.miny, layer.bbox.maxx, layer.bbox.maxy], layer.epsg);
      this._hideMenu();
    },
    canZoom: function canZoom(layer) {
      return layer.bbox && [layer.bbox.minx, layer.bbox.miny, layer.bbox.maxx, layer.bbox.maxy].find(function (coordinate) {
        return coordinate > 0;
      });
    },
    getGeometryType: function getGeometryType(layerId) {
      var external = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var geometryType = void 0;
      if (external) {
        var layer = this.external.vector.find(function (layer) {
          return layer.id === layerId;
        });
        if (layer) geometryType = layer.geometryType;
      } else {
        var originalLayer = _catalogLayers2.default.getLayerById(layerId);
        geometryType = originalLayer.config.geometrytype;
      }
      geometryType = geometryType && geometryType !== 'NoGeometry' ? geometryType : '';
      return geometryType;
    },
    downloadExternal: function downloadExternal(url) {
      this.layerMenu.loading.unknow = true;
      downloadFile({ url: url });
      this.layerMenu.loading.unknow = false;
    },
    downloadExternalShapefile: function () {
      var _ref4 = _asyncToGenerator(function* (layer) {
        var EPSG4326 = 'EPSG:4326';
        this.layerMenu.loading.shp = true;
        var features = _gui2.default.getService('map').getLayerByName(layer.name).getSource().getFeatures();
        if (EPSG4326 !== layer.crs) {
          features = features.map(function (feature) {
            var clonefeature = feature.clone();
            clonefeature.getGeometry().transform(layer.crs, EPSG4326);
            return clonefeature;
          });
        }
        var name = layer.name.split('.' + layer.type)[0];
        shpwrite.download(new ol.format.GeoJSON().writeFeaturesObject(features, { featureProjection: EPSG4326 }), {
          folder: name,
          types: {
            point: name,
            mulipoint: name,
            polygon: name,
            multipolygon: name,
            line: name,
            polyline: name,
            multiline: name
          }
        });
        yield this.$nextTick();
        this.layerMenu.loading.shp = false;
        this._hideMenu();
      });

      function downloadExternalShapefile(_x6) {
        return _ref4.apply(this, arguments);
      }

      return downloadExternalShapefile;
    }(),
    showAttributeTable: function showAttributeTable(layerId) {
      var _this8 = this;

      this.layerMenu.loading.data_table = false;
      _gui2.default.closeContent();
      var layer = _catalogLayers2.default.getLayerById(layerId);
      this.layerMenu.loading.data_table = true;
      var tableContent = new TableComponent({ layer: layer, formatter: 1 });
      tableContent.on('show', function () {
        if (_this8.isMobile()) {
          _gui2.default.hideSidebar();
        }
        _this8.layerMenu.loading.data_table = false;
        _this8._hideMenu();
      });
      tableContent.show({ title: layer.getName() });
    },
    startEditing: function startEditing() {
      var _this9 = this;

      var layer = void 0;
      _catalogLayers2.default.getLayersStores().forEach(function (layerStore) {
        layer = layerStore.getLayerById(_this9.layerMenu.layer.id);
        if (layer) {
          layer.getLayerForEditing();
          return false;
        }
      });
    },
    setCurrentLayerStyle: function setCurrentLayerStyle(index) {
      var _this10 = this;

      var changed = false;
      this.layerMenu.layer.styles.forEach(function (style, idx) {
        if (idx === index) {
          _this10.layerMenu.stylesMenu.style = style.name;
          changed = !style.current;
          style.current = true;
        } else {
          style.current = false;
        }
      });
      if (changed) {
        var layerId = this.layerMenu.layer.id;
        var layer = _catalogLayers2.default.getLayerById(layerId);
        if (layer) {
          _eventbus.CatalogEventBus.$emit('layer-change-style', {
            layerId: layerId,
            style: this.layerMenu.stylesMenu.style
          });
          layer.change();
        }
      }
      this.closeLayerMenu(this.layerMenu.stylesMenu);
    },
    setCurrentLayerFilter: function () {
      var _ref5 = _asyncToGenerator(function* (filter) {
        var changed = null === this.layerMenu.layer.filter.current || this.layerMenu.layer.filter.current.fid !== filter.fid;
        var layer = _catalogLayers2.default.getLayerById(this.layerMenu.layer.id);
        if (changed) {
          yield layer.applyFilter(filter);
        } else {
          yield layer.deleteFilterToken();
        }
        layer.change();
        this.closeLayerMenu(this.layerMenu.filtersMenu);
      });

      function setCurrentLayerFilter(_x7) {
        return _ref5.apply(this, arguments);
      }

      return setCurrentLayerFilter;
    }(),
    deleteFilter: function () {
      var _ref6 = _asyncToGenerator(function* (fid) {
        var layer = _catalogLayers2.default.getLayerById(this.layerMenu.layer.id);
        var change = fid === this.layerMenu.layer.fid;

        if (!layer) {
          return;
        }
        yield layer.deleteFilterToken(fid);
        if (change) {
          layer.change();
        }
        this.closeLayerMenu(this.layerMenu.filtersMenu);
      });

      function deleteFilter(_x8) {
        return _ref6.apply(this, arguments);
      }

      return deleteFilter;
    }(),
    showSubMenuContext: function () {
      var _ref8 = _asyncToGenerator(function* (_ref7) {
        var menu = _ref7.menu,
            bool = _ref7.bool,
            evt = _ref7.evt;

        if ('string' === typeof menu) {
          menu = this.layerMenu[menu];
        }

        if (bool) {
          var elem = $(evt.target);
          menu.top = elem.offset().top;
          menu.left = elem.offset().left + elem.width() + (elem.outerWidth() - elem.width()) / 2 + OFFSETMENU.left;
          var contextmenu = $(this.$refs['layer-menu']);
          var menuentry = $(evt.target);
          var submenu = menuentry.children('ul');
          var height = submenu.height();
          var maxH = contextmenu.height();
          menu.maxHeight = height >= maxH ? maxH : null;
          menu.overflowY = height >= maxH ? 'scroll' : null;
          menu.top = (height >= maxH ? contextmenu : menuentry).offset().top;
          menu.left = this.isMobile() ? 0 : menuentry.offset().left + menuentry.width() + (menuentry.outerWidth() - menuentry.width()) / 2 + OFFSETMENU.left;
          yield this.$nextTick();
        }
        menu.show = bool;
      });

      function showSubMenuContext(_x9) {
        return _ref8.apply(this, arguments);
      }

      return showSubMenuContext;
    }(),
    showStylesMenu: function () {
      var _ref9 = _asyncToGenerator(function* (bool, evt) {
        this.showSubMenuContext({ bool: bool, evt: evt, menu: this.layerMenu.stylesMenu });
      });

      function showStylesMenu(_x10, _x11) {
        return _ref9.apply(this, arguments);
      }

      return showStylesMenu;
    }(),
    showMetadataInfo: function () {
      var _ref10 = _asyncToGenerator(function* (bool, evt) {
        if (bool) {
          var elem = $(evt.target);
          this.layerMenu.metadatainfoMenu.top = elem.offset().top;
          this.layerMenu.metadatainfoMenu.left = elem.offset().left + elem.width() + (elem.outerWidth() - elem.width()) / 2 + OFFSETMENU.left;
          yield this.$nextTick();
        }
        this.layerMenu.metadatainfoMenu.show = bool;
      });

      function showMetadataInfo(_x12, _x13) {
        return _ref10.apply(this, arguments);
      }

      return showMetadataInfo;
    }(),
    showColorMenu: function showColorMenu(bool, evt) {
      if (bool) {
        var elem = $(evt.target);
        var contextmenu = $(this.$refs['layer-menu']);
        this.layerMenu.colorMenu.top = contextmenu.offset().top;
        this.layerMenu.colorMenu.left = elem.offset().left + elem.width() + (elem.outerWidth() - elem.width()) / 2 - OFFSETMENU.left;
      }
      this.layerMenu.colorMenu.show = bool;
    },
    onShowLayerContextMenu: function () {
      var _ref11 = _asyncToGenerator(function* (layerstree, evt) {
        this._hideMenu();
        yield this.$nextTick();
        this.layerMenu.left = evt.x;
        this.layerMenu.name = layerstree.name;
        this.layerMenu.layer = layerstree;
        this.layerMenu.show = true;
        this.layerMenu.colorMenu.color = layerstree.color;
        yield this.$nextTick();
        this.layerMenu.top = $(evt.target).offset().top - $(this.$refs['layer-menu']).height() + $(evt.target).height() / 2;
        $('.catalog-menu-wms[data-toggle="tooltip"]').tooltip();
      });

      function onShowLayerContextMenu(_x14, _x15) {
        return _ref11.apply(this, arguments);
      }

      return onShowLayerContextMenu;
    }(),
    canOpenAttributeTable: function canOpenAttributeTable(layer) {
      return layer.openattributetable;
    },
    isExternalLayer: function isExternalLayer(layer) {
      return !layer.projectLayer;
    },
    getStyleName: function getStyleName(style) {
      return style.name + (style.name === this.layerMenu.layer.defaultstyle && this.layerMenu.layer.styles.length > 1 ? ' (' + t('default') + ')' : '');
    },
    isExternalWMSLayer: function isExternalWMSLayer(layer) {
      return !layer.projectLayer && 'wms' === layer._type;
    },
    isExternalVectorLayer: function isExternalVectorLayer(layer) {
      return !layer.projectLayer && 'wms' !== layer._type;
    },
    canShowStylesMenu: function canShowStylesMenu(layer) {
      return layer.geolayer && layer.styles && layer.styles.length > 1;
    },
    canShowFiltersMenu: function canShowFiltersMenu(layer) {
      return layer.filters && layer.filters.length > 0;
    },
    hasMetadataInfo: function hasMetadataInfo(layer) {
      return layer.metadata && layer.metadata.abstract;
    },
    canShowOpacityPicker: function canShowOpacityPicker(layer) {
      return layer.geolayer && layer.visible;
    }
  },

  created: function created() {
    _eventbus.CatalogEventBus.$on('show-layer-context-menu', this.onShowLayerContextMenu);
    _eventbus.CatalogEventBus.$on('hide-layer-context-menu', this._hideMenu);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.layerMenu.show)?_c('ul',{directives:[{name:"click-outside",rawName:"v-click-outside",value:(_vm.closeLayerMenu),expression:"closeLayerMenu"}],ref:"layer-menu",staticClass:"catalog-context-menu",style:({
    top: _vm.layerMenu.top + 'px',
    left: _vm.layerMenu.left + 'px',
  }),attrs:{"id":"layer-context-menu","tabindex":"-1"}},[_c('li',{staticClass:"title"},[_c('div',[_vm._v(_vm._s(_vm.layerMenu.layer.title))]),_vm._v(" "),_c('div',{staticStyle:{"font-weight":"normal","font-size":"0.8em"}},[_vm._v("\n      "+_vm._s(_vm.getGeometryType(_vm.layerMenu.layer.id, _vm.layerMenu.layer.external))+"\n    ")])]),_vm._v(" "),(_vm.isExternalLayer(_vm.layerMenu.layer))?_c('li',[_c('div',{staticStyle:{"display":"flex","justify-content":"space-between","align-items":"center"}},[_c('layerspositions',{staticStyle:{"display":"flex","flex-direction":"column","justify-content":"space-between"},attrs:{"position":_vm.layerMenu.layer.position},on:{"layer-position-change":function($event){return _vm.changeLayerMapPosition({position:$event, layer: _vm.layerMenu.layer})}}})],1)]):_vm._e(),_vm._v(" "),(_vm.hasMetadataInfo(_vm.layerMenu.layer))?_c('li',{on:{"mouseleave":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showMetadataInfo(false)},"mouseover":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showMetadataInfo(true,  $event)}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('info')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('Metadata'),expression:"'Metadata'"}],staticClass:"item-text"}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.layerMenu.metadatainfoMenu.show),expression:"layerMenu.metadatainfoMenu.show"}],staticStyle:{"position":"fixed","background-color":"#FFFFFF","color":"#000000","padding-left":"0","border-radius":"0 3px 3px 0"},style:({
        top:   _vm.layerMenu.metadatainfoMenu.top       + 'px',
        left: (_vm.layerMenu.metadatainfoMenu.left + 1) + 'px',
      })},[_c('div',{staticClass:"layer-menu-metadata-info",staticStyle:{"padding":"5px"},domProps:{"innerHTML":_vm._s(_vm.layerMenu.layer.metadata.abstract)}})])]):_vm._e(),_vm._v(" "),(_vm.canShowStylesMenu(_vm.layerMenu.layer))?_c('li',{staticClass:"menu-icon",on:{"mouseleave":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showStylesMenu(false, $event)},"mouseover":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showStylesMenu(true, $event)}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('palette')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('catalog_items.contextmenu.styles'),expression:"'catalog_items.contextmenu.styles'"}],staticClass:"item-text"}),_vm._v(" "),_c('span',{staticClass:"menu-icon",class:_vm.g3wtemplate.getFontClass('arrow-right'),staticStyle:{"position":"absolute","right":"0","margin-top":"3px"}}),_vm._v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.layerMenu.stylesMenu.show),expression:"layerMenu.stylesMenu.show"}],staticStyle:{"position":"fixed","padding-left":"0","background-color":"#FFFFFF","color":"#000000"},style:({
        top:       _vm.layerMenu.stylesMenu.top       + 'px',
        left:      _vm.layerMenu.stylesMenu.left      + 'px',
        maxHeight: _vm.layerMenu.stylesMenu.maxHeight + 'px',
        overflowY: _vm.layerMenu.stylesMenu.overflowY,
      })},_vm._l((_vm.layerMenu.layer.styles),function(style,index){return _c('li',{key:style.name,on:{"click":function($event){$event.stopPropagation();return _vm.setCurrentLayerStyle(index)}}},[(style.current)?_c('span',{class:_vm.g3wtemplate.getFontClass('circle'),staticStyle:{"font-size":"0.8em"}}):_vm._e(),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.getStyleName(style)))])])}),0)]):_vm._e(),_vm._v(" "),(_vm.canShowOpacityPicker(_vm.layerMenu.layer))?_c('li',{staticClass:"menu-icon",staticStyle:{"padding-right":"0"}},[_c('layer-opacity-picker',{attrs:{"layer":_vm.layerMenu.layer},on:{"init-menu-item":_vm.addLayerMenuItem,"show-menu-item":_vm.showSubMenuContext}})],1):_vm._e(),_vm._v(" "),(_vm.canZoom(_vm.layerMenu.layer))?_c('li',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.zoomToLayer(_vm.layerMenu.layer)}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('search')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('catalog_items.contextmenu.zoomtolayer'),expression:"'catalog_items.contextmenu.zoomtolayer'"}],staticClass:"item-text"})]):_vm._e(),_vm._v(" "),(_vm.canOpenAttributeTable(_vm.layerMenu.layer))?_c('li',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.showAttributeTable(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.data_table}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('list')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('catalog_items.contextmenu.open_attribute_table'),expression:"'catalog_items.contextmenu.open_attribute_table'"}],staticClass:"item-text"})],1):_vm._e(),_vm._v(" "),(_vm.isExternalVectorLayer(_vm.layerMenu.layer))?_c('li',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();},"mouseleave":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showColorMenu(false,$event)},"mouseover":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showColorMenu(true,$event)}}},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('catalog_items.contextmenu.vector_color_menu'),expression:"'catalog_items.contextmenu.vector_color_menu'"}],staticClass:"item-text"}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('arrow-right'),staticStyle:{"position":"absolute","right":"0","margin-top":"3px"}}),_vm._v(" "),(_vm.layerMenu.colorMenu.show)?_c('ul',{staticStyle:{"position":"fixed"},style:({
        top: _vm.layerMenu.colorMenu.top + 'px',
        left: _vm.layerMenu.colorMenu.left + 'px',
      })},[_c('li',{staticStyle:{"padding":"0"}},[_c('chrome-picker',{ref:"color_picker",staticStyle:{"width":"100%"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();},"hook:beforeDestroy":_vm.onbeforeDestroyChangeColor,"input":_vm.onChangeColor},model:{value:(_vm.layerMenu.colorMenu.color),callback:function ($$v) {_vm.$set(_vm.layerMenu.colorMenu, "color", $$v)},expression:"layerMenu.colorMenu.color"}})],1)]):_vm._e()]):_vm._e(),_vm._v(" "),(_vm.isExternalVectorLayer(_vm.layerMenu.layer) && _vm.layerMenu.layer.downloadUrl)?_c('li',{directives:[{name:"download",rawName:"v-download"}],on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},[_c('div',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadExternal(_vm.layerMenu.layer.downloadUrl)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.unknow}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('download')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.unknow'),expression:"'sdk.catalog.menu.download.unknow'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.isExternalVectorLayer(_vm.layerMenu.layer) && !_vm.layerMenu.layer.downloadUrl)?_c('li',{directives:[{name:"download",rawName:"v-download"}],on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},[_c('div',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadExternalShapefile(_vm.layerMenu.layer)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.shp}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('shapefile')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.shp'),expression:"'sdk.catalog.menu.download.shp'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.isExternalWMSLayer(_vm.layerMenu.layer))?_c('li',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},[_c('div',{staticStyle:{"display":"flex","justify-content":"space-between"}},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.setwmsopacity'),expression:"'sdk.catalog.menu.setwmsopacity'"}],staticClass:"item-text"}),_vm._v(" "),_c('span',{staticStyle:{"font-weight":"bold","margin-left":"5px"}},[_vm._v(_vm._s(_vm.layerMenu.layer.opacity))])]),_vm._v(" "),_c('range',{attrs:{"value":_vm.layerMenu.layer.opacity,"min":0,"max":1,"step":0.1,"sync":true},on:{"changed":_vm._hideMenu,"change-range":_vm.setWMSOpacity}})],1):_vm._e(),_vm._v(" "),(_vm.canDownloadGeoTIFF(_vm.layerMenu.layer.id))?_c('li',{directives:[{name:"download",rawName:"v-download"}]},[_c('div',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadGeoTIFF(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.geotiff}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('geotiff')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.geotiff'),expression:"'sdk.catalog.menu.download.geotiff'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canDownloadGeoTIFF(_vm.layerMenu.layer.id))?_c('li',{directives:[{name:"download",rawName:"v-download"}]},[_c('div',{staticStyle:{"position":"relative"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadGeoTIFF(_vm.layerMenu.layer.id, true)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.geotiff}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('geotiff'),staticStyle:{"color":"#777"}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('crop'),staticStyle:{"position":"absolute","left":"-7px","bottom":"8px","font-size":"1.2em"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.geotiff_map_extent'),expression:"'sdk.catalog.menu.download.geotiff_map_extent'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canDownloadShp(_vm.layerMenu.layer.id))?_c('li',{directives:[{name:"download",rawName:"v-download"}]},[_c('div',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadShp(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.shp}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('shapefile')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.shp'),expression:"'sdk.catalog.menu.download.shp'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canDownloadGpx(_vm.layerMenu.layer.id))?_c('li',[_c('div',{directives:[{name:"download",rawName:"v-download"}],on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadGpx(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.gpx}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('gpx')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.gpx'),expression:"'sdk.catalog.menu.download.gpx'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canDownloadGpkg(_vm.layerMenu.layer.id))?_c('li',[_c('div',{directives:[{name:"download",rawName:"v-download"}],on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadGpkg(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.gpkg}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('gpkg')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.gpkg'),expression:"'sdk.catalog.menu.download.gpkg'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canDownloadCsv(_vm.layerMenu.layer.id))?_c('li',[_c('div',{directives:[{name:"download",rawName:"v-download"}],on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadCsv(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.csv}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('csv')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.csv'),expression:"'sdk.catalog.menu.download.csv'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canDownloadXls(_vm.layerMenu.layer.id))?_c('li',{directives:[{name:"download",rawName:"v-download"}]},[_c('div',{on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.downloadXls(_vm.layerMenu.layer.id)}}},[_c('bar-loader',{attrs:{"loading":_vm.layerMenu.loading.xls}}),_vm._v(" "),_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('xls')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.catalog.menu.download.xls'),expression:"'sdk.catalog.menu.download.xls'"}],staticClass:"item-text"})],1)]):_vm._e(),_vm._v(" "),(_vm.canShowFiltersMenu(_vm.layerMenu.layer))?_c('li',{staticClass:"menu-icon",on:{"mouseleave":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showSubMenuContext({ menu: 'filtersMenu', bool: false, evt: $event })},"mouseover":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showSubMenuContext({ menu: 'filtersMenu', bool: true, evt: $event })}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('filter')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('catalog_items.contextmenu.filters'),expression:"'catalog_items.contextmenu.filters'"}],staticClass:"item-text"}),_vm._v(" "),_c('span',{staticClass:"menu-icon",class:_vm.g3wtemplate.getFontClass('arrow-right'),staticStyle:{"position":"absolute","right":"0","margin-top":"3px"}}),_vm._v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.layerMenu.filtersMenu.show),expression:"layerMenu.filtersMenu.show"}],staticStyle:{"position":"fixed","padding-left":"0","background-color":"#FFFFFF","color":"#000000"},style:({
        top:       _vm.layerMenu.filtersMenu.top       + 'px',
        left:      _vm.layerMenu.filtersMenu.left      + 'px',
        maxHeight: _vm.layerMenu.filtersMenu.maxHeight + 'px',
        overflowY: _vm.layerMenu.filtersMenu.overflowY
      })},_vm._l((_vm.layerMenu.layer.filters),function(filter){return _c('li',{key:filter.fid,staticStyle:{"display":"flex","justify-content":"space-between","align-items":"baseline"},on:{"click":function($event){$event.stopPropagation();return _vm.setCurrentLayerFilter(filter)}}},[(_vm.layerMenu.layer.filter.current && _vm.layerMenu.layer.filter.current.fid === filter.fid)?_c('span',{class:_vm.g3wtemplate.getFontClass('circle'),staticStyle:{"font-size":"0.5em","margin-right":"3px","justify-self":"flex-start"}}):_vm._e(),_vm._v(" "),_c('span',{staticStyle:{"margin-right":"5px"}},[_vm._v(_vm._s(filter.name))]),_vm._v(" "),_c('span',{staticClass:"skin-border-color",class:_vm.g3wtemplate.getFontClass('trash'),staticStyle:{"color":"red","right":"0","padding-left":"10px","border-left":"2px solid"},on:{"click":function($event){$event.stopPropagation();return _vm.deleteFilter(filter.fid)}}})])}),0)]):_vm._e(),_vm._v(" "),(_vm.canShowWmsUrl(_vm.layerMenu.layer.id))?_c('li',[_c('div',{staticStyle:{"display":"flex","max-width":"300px","align-items":"center"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.copyUrl({evt: $event, layerId:_vm.layerMenu.layer.id, type:'Wms'})}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('map')}),_vm._v(" "),_c('div',{staticStyle:{"display":"inline-flex","justify-content":"space-between","width":"100%","align-items":"baseline"}},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.catalog.menu.wms.copy'),expression:"'sdk.catalog.menu.wms.copy'"}],staticClass:"item-text catalog-menu-wms skin-tooltip-top",attrs:{"data-toggle":"tooltip","data-container":"body"}},[_vm._v("WMS URL")]),_vm._v(" "),_c('span',{staticClass:"bold catalog-menu-wms wms-url-tooltip skin-tooltip-top skin-color-dark",class:_vm.g3wtemplate.getFontClass('eye'),attrs:{"data-placement":"top","data-toggle":"tooltip","data-container":"body","title":_vm.getWmsUrl(_vm.layerMenu.layer.id)}})])])]):_vm._e(),_vm._v(" "),(_vm.canShowWfsUrl(_vm.layerMenu.layer.id))?_c('li',[_c('div',{staticStyle:{"display":"flex","max-width":"300px","align-items":"center"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.copyUrl({evt: $event, layerId:_vm.layerMenu.layer.id, type:'Wfs'})}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('map')}),_vm._v(" "),_c('div',{staticStyle:{"display":"inline-flex","justify-content":"space-between","width":"100%","align-items":"baseline"}},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.catalog.menu.wms.copy'),expression:"'sdk.catalog.menu.wms.copy'"}],staticClass:"item-text catalog-menu-wms skin-tooltip-top",attrs:{"data-toggle":"tooltip","data-container":"body"}},[_vm._v("WFS URL")]),_vm._v(" "),_c('span',{staticClass:"bold catalog-menu-wms wms-url-tooltip skin-tooltip-top skin-color-dark",class:_vm.g3wtemplate.getFontClass('eye'),attrs:{"data-placement":"top","data-toggle":"tooltip","data-container":"body","title":_vm.getWfsUrl(_vm.layerMenu.layer.id)}})])])]):_vm._e(),_vm._v(" "),(_vm.layers_url)?_c('li',[_c('div',[_c('span',{staticClass:"menu-icon skin-color-dark"},[_c('svg',{staticStyle:{"height":"14px","vertical-align":"-1.5px","fill":"currentColor"},attrs:{"xmlns":"http://www.w3.org/2000/svg","xml:space":"preserve","viewBox":"0 0 32 32"}},[_c('path',{attrs:{"d":"m17.61 17.63 4.36-.02-4-3.98h-4.36v4l4 4.45z"}}),_vm._v(" "),_c('path',{attrs:{"d":"m31.61 27.22-7.62-7.6-4.38.01v4.33l7.24 7.67h4.76z"}}),_vm._v(" "),_c('path',{attrs:{"d":"M18 25.18c-.68.16-1.17.2-1.9.2a9.77 9.77 0 0 1-9.68-9.88c0-5.57 4.4-9.78 9.68-9.78s9.48 4.2 9.48 9.78c0 .91-.15 1.96-.36 2.8l4.88 4.65a15 15 0 0 0 1.95-7.48C32.05 6.87 25.19.44 16 .44 6.86.44 0 6.84 0 15.47c0 8.68 6.86 15.2 16 15.2 2.36 0 4.23-.3 6.2-1.1L18 25.18z"}})])]),_vm._v(" "),_c('b',[_c('a',{staticStyle:{"color":"initial"},attrs:{"href":_vm.layers_url,"target":"_blank"}},[_vm._v("Layers settings")])])])]):_vm._e()]):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-7828b5c0"

},{"app/eventbus":43,"components/LayerOpacityPicker.vue":207,"core/i18n/i18n.service":9,"gui/table/vue/table":140,"services/application":310,"services/gui":319,"shp-write":"shp-write","store/catalog-layers":329,"utils":419,"vue-color":"vue-color","vueify/lib/insert-css":2}],152:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".layer-legend[data-v-fc3d03ea]{padding-left:36px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _eventbus = require('app/eventbus');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _click = require('mixins/click');

var _click2 = _interopRequireDefault(_click);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: "layerlegend",
  props: {
    legendplace: {
      type: String
    },
    layer: {
      type: Object
    }
  },
  data: function data() {
    return {
      loading: false,

      categories: [],

      currentstyle: this.layer.styles.find(function (style) {
        return true === style.current;
      }).name

    };
  },

  mixins: [_click2.default],
  computed: {
    showfeaturecount: function showfeaturecount() {
      return undefined !== this.layer.featurecount;
    },
    externallegend: function externallegend() {
      return 'wms' === this.layer.source.type;
    },
    legend: function legend() {
      return this.layer.legend;
    },
    show: function show() {
      return this.layer.expanded && this.layer.visible && ('toc' === this.legendplace || 'tab' === this.legendplace && this.layer.categories);
    }
  },

  methods: {
    onCategoryClick: function onCategoryClick() {
      this.handleClick({
        '1': function _() {
          console.info('TODO: select category (single click)');
        },
        '2': function _() {
          console.info('TODO: zoom to category (double click)');
        }
      }, this);
    },
    showCategoryMenu: function showCategoryMenu() {
      this.$emit('showmenucategory');
    },
    getWmsSourceLayerLegendUrl: function getWmsSourceLayerLegendUrl() {
      return this.getProjectLayer().getLegendUrl({
        width: 16,
        height: 16
      });
    },
    getProjectLayer: function getProjectLayer() {
      return _catalogLayers2.default.getLayerById(this.layer.id);
    },
    isDisabled: function isDisabled(index) {
      return this.categories[index].disabled;
    },
    showHideLayerCategory: function showHideLayerCategory(index) {
      this.categories[index].checked = !this.categories[index].checked;
      this.getProjectLayer().change();
      if ('tab' === this.legendplace) {
        this.layer.legend.change = true;
      } else if (this.categories[index].checked && this.mapReady) {
        this.setLayerCategories(false);
      }
    },
    setError: function setError() {
      this.legend.error = true;
      this.legend.loading = false;
    },
    urlLoaded: function () {
      var _ref = _asyncToGenerator(function* () {
        this.legend.loading = false;
      });

      function urlLoaded() {
        return _ref.apply(this, arguments);
      }

      return urlLoaded;
    }(),
    onChangeLayerLegendStyle: function () {
      var _ref2 = _asyncToGenerator(function* () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        this.loading = true;

        if (this.externallegend) {
          return;
        }

        try {
          if (undefined !== options.style && options.layerId === this.layer.id) {
            yield this.setLayerCategories(true);
            yield this.getProjectLayer().getStyleFeatureCount(options.style);
            this.currentstyle = options.style;
            if (this.dynamic) {
              yield this.setLayerCategories(false);
            }
          }
        } catch (e) {
          console.warn('Error while changing layer style', e);
        }

        this.loading = false;
      });

      function onChangeLayerLegendStyle() {
        return _ref2.apply(this, arguments);
      }

      return onChangeLayerLegendStyle;
    }(),
    setLayerCategories: function () {
      var _ref3 = _asyncToGenerator(function* () {
        var all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        try {
          var projectLayer = this.getProjectLayer();
          var categories = projectLayer.getCategories();

          if (all && categories) {
            this.categories = categories;
          } else {
            var _ref4 = yield projectLayer.getLegendGraphic({ all: all }),
                _ref4$nodes = _ref4.nodes,
                nodes = _ref4$nodes === undefined ? [] : _ref4$nodes;

            if (all) {
              this._setAllLayerCategories(nodes);
            } else {
              this._updateLayerCategories(nodes, categories);
            }
          }
        } catch (err) {
          this.setError();
        }
      });

      function setLayerCategories() {
        return _ref3.apply(this, arguments);
      }

      return setLayerCategories;
    }(),
    _setAllLayerCategories: function _setAllLayerCategories(nodes) {
      var projectLayer = this.getProjectLayer();

      var categories = [];
      nodes.forEach(function (_ref5) {
        var icon = _ref5.icon,
            title = _ref5.title,
            ruleKey = _ref5.ruleKey,
            checked = _ref5.checked,
            _ref5$symbols = _ref5.symbols,
            symbols = _ref5$symbols === undefined ? [] : _ref5$symbols;

        if (icon) {
          categories.push({ icon: icon, title: title, ruleKey: ruleKey, checked: checked, disabled: false });
        } else {
          symbols.forEach(function (symbol) {
            symbol._checked = symbol.checked;
            symbol.disabled = false;
            categories.push(symbol);
          });
        }
      });
      projectLayer.setCategories(categories);
      this.categories = categories;
    },
    _updateLayerCategories: function _updateLayerCategories(nodes, categories) {
      var projectLayer = this.getProjectLayer();

      projectLayer.setCategories(categories);
      this.categories = categories;

      if (nodes.length) {
        nodes.forEach(function (_ref6) {
          var icon = _ref6.icon,
              title = _ref6.title,
              _ref6$symbols = _ref6.symbols,
              symbols = _ref6$symbols === undefined ? [] : _ref6$symbols;

          if (icon) {
            symbols = [{ icon: icon, title: title }];
          }
          categories.forEach(function (category) {
            var findSymbol = symbols.find(function (symbol) {
              return symbol.icon === category.icon && symbol.title === category.title;
            });
            var disabled = "undefined" !== typeof category.checked ? category.checked : true;
            category.disabled = disabled && "undefined" === typeof findSymbol;
          });
        });
      } else {
        categories.forEach(function (category) {
          return category.disabled = "undefined" !== typeof category.checked ? category.checked : true;
        });
      }
    },
    onChangeMapLegendParams: function () {
      var _ref7 = _asyncToGenerator(function* () {
        this.mapReady = true;
        if (this.layer.visible && false === this.externallegend && ('toc' === this.legendplace || this.layer.categories)) {
          this.setLayerCategories(false);
        }
      });

      function onChangeMapLegendParams() {
        return _ref7.apply(this, arguments);
      }

      return onChangeMapLegendParams;
    }(),
    runInitLayerVisibleAction: function () {
      var _ref8 = _asyncToGenerator(function* () {
        yield this.setLayerCategories(true);
        if (this.dynamic) {
          yield this.setLayerCategories(false);
          _gui2.default.getService('map').on('change-map-legend-params', this.onChangeMapLegendParams);
        }
        this.initialize = true;
      });

      function runInitLayerVisibleAction() {
        return _ref8.apply(this, arguments);
      }

      return runInitLayerVisibleAction;
    }()
  },

  watch: {
    'layer.visible': function () {
      var _ref9 = _asyncToGenerator(function* (visible) {
        var enabled = visible && false === this.externallegend;

        if (enabled && false === this.initialize) {
          yield this.runInitLayerVisibleAction();
        }

        if (enabled && false !== this.initialize) {
          yield this.setLayerCategories(!this.dynamic);
        }
      });

      function layerVisible(_x3) {
        return _ref9.apply(this, arguments);
      }

      return layerVisible;
    }()
  },

  created: function () {
    var _ref10 = _asyncToGenerator(function* () {
      this.initialize = false;

      this.dynamic = _projects2.default.getCurrentProject().getContextBaseLegend();

      this.mapReady = false;

      _eventbus.CatalogEventBus.$on('layer-change-style', this.onChangeLayerLegendStyle);

      if (false === this.externallegend && true === this.layer.visible) {
        yield this.runInitLayerVisibleAction();
      }
    });

    function created() {
      return _ref10.apply(this, arguments);
    }

    return created;
  }(),
  beforeDestroy: function beforeDestroy() {
    _eventbus.CatalogEventBus.$off('layer-change-style', this.onChangeLayerLegendStyle);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.show)?_c('div',{staticClass:"layer-legend",on:{"click":function($event){$event.stopPropagation();$event.preventDefault();}}},[(_vm.legend)?_c('bar-loader',{attrs:{"loading":_vm.legend.loading}}):_vm._e(),_vm._v(" "),(_vm.externallegend)?_c('figure',[_c('img',{attrs:{"src":_vm.getWmsSourceLayerLegendUrl()}})]):_c('figure',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.loading),expression:"loading"}]},[_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_vm._l((_vm.categories),function(category,index){return _c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(category.disabled),expression:"category.disabled"}],staticStyle:{"display":"flex","align-items":"center","width":"100%"},on:{"contextmenu":function($event){$event.preventDefault();$event.stopPropagation();return _vm.showCategoryMenu($event)}}},[(category.ruleKey)?_c('span',{class:_vm.g3wtemplate.getFontClass(category.checked ? 'check': 'uncheck'),staticStyle:{"padding-right":"3px"},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.showHideLayerCategory(index)}}}):_vm._e(),_vm._v(" "),(('toc' === _vm.legendplace))?_c('img',{attrs:{"src":category.icon && ("data:image/png;base64," + (category.icon))},on:{"error":function($event){return _vm.setError()},"load":function($event){return _vm.urlLoaded()}}}):_vm._e(),_vm._v(" "),(('tab' === _vm.legendplace && category.ruleKey) || ('toc' === _vm.legendplace))?_c('span',{staticClass:"g3w-long-text",staticStyle:{"padding-left":"3px"},on:{"click":function($event){$event.stopPropagation();return _vm.onCategoryClick($event)}}},[_c('span',[_vm._v(_vm._s(category.title))]),_vm._v(" "),(_vm.showfeaturecount && 'undefined' !== typeof category.ruleKey)?_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v("\n          ["+_vm._s(_vm.layer.stylesfeaturecount[_vm.currentstyle][category.ruleKey])+"]\n        ")]):_vm._e()]):_vm._e()])})],2)],1):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-fc3d03ea"

},{"app/eventbus":43,"mixins/click":298,"services/gui":319,"store/catalog-layers":329,"store/projects":335,"vueify/lib/insert-css":2}],153:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'catalog-layers-group',

  props: {
    layersgroup: {
      type: Object
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"border":"1px solid #ffffff33","margin":"5px"}},[_c('h4',{staticStyle:{"margin":"5px","font-weight":"bold"}},[_vm._v(_vm._s(_vm.layersgroup.title))]),_vm._v(" "),_vm._l((_vm.layersgroup.nodes),function(node){return _c('tristate-tree',{staticClass:"item",attrs:{"layerstree":node}})})],2)}
__vue__options__.staticRenderFns = []

},{}],154:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'catalog-layers-legend',

  props: ['layerstree', 'legend', 'active'],
  data: function data() {
    return {};
  },

  computed: {
    visiblelayers: function visiblelayers() {
      var _visiblelayers = [];
      var traverse = function traverse(obj) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var layer = _step.value;

            if (!_.isNil(layer.id) && layer.visible && layer.geolayer && !layer.exclude_from_legend) {
              _visiblelayers.push(layer);
            }
            if (!_.isNil(layer.nodes)) {
              traverse(layer.nodes);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      };
      traverse(this.layerstree.tree);
      return _visiblelayers;
    }
  },
  watch: {
    'layerstree': {
      handler: function handler(val, old) {},

      deep: true
    },
    'visiblelayers': function visiblelayers(visibleLayers) {
      this.$emit('showlegend', visibleLayers.length > 0);
    }
  },
  created: function created() {
    this.$emit('showlegend', this.visiblelayers.length > 0);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tab-pane",class:{active:_vm.active},attrs:{"role":"tabpanel","id":"legend"}},[_c('layerslegend-items',{attrs:{"active":_vm.active,"legend":_vm.legend,"layers":_vm.visiblelayers}})],1)}
__vue__options__.staticRenderFns = []

},{}],155:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _eventbus = require('app/eventbus');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'catalog-layers-legend-items',

  props: {
    layers: {
      default: []
    },
    legend: {
      type: Object
    },
    active: {
      default: true
    }
  },
  data: function data() {
    return {
      legendurls: []
    };
  },

  watch: {
    layers: {
      handler: function handler() {
        this.getLegendSrc();
      },

      immediate: false
    },

    active: function () {
      var _ref = _asyncToGenerator(function* (bool) {
        if (bool) {
          var changeLayersLegend = this.layers.filter(function (layer) {
            return layer.legend.change;
          });
          if (this.legendurls.length === 0 || this.dynamic || changeLayersLegend.length) {
            yield this.getLegendSrc(this.layers);
            changeLayersLegend.forEach(function (layer) {
              return layer.legend.change = false;
            });
          }
        }
      });

      function active(_x) {
        return _ref.apply(this, arguments);
      }

      return active;
    }()
  },
  methods: {
    setError: function setError(legendurl) {
      legendurl.error = true;
      legendurl.loading = false;
    },
    urlLoaded: function urlLoaded(legendurl) {
      legendurl.loading = false;
    },
    getLegendUrl: function getLegendUrl(layer) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var catalogLayer = _catalogLayers2.default.getLayerById(layer.id);
      if (catalogLayer) {
        return catalogLayer.getLegendUrl(params, {
          all: !this.dynamic,
          format: 'image/png',
          categories: layer.categories
        });
      }
    },
    getLegendUrlParams: function getLegendUrlParams() {
      var urlLayerName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var paramsUrl = '';
      var params = {
        LAYERS: [],
        STYLES: [],
        LEGEND_ON: [],
        LEGEND_OFF: []
      };

      urlLayerName.reduce(function (_, layer) {
        params.LAYERS.push(layer.layerName);
        params.STYLES.push(layer.style);
        if (layer.legend_on) {
          params.LEGEND_ON.push(layer.legend_on);
        }
        if (layer.legend_off) {
          params.LEGEND_OFF.push(layer.legend_off);
        }
        return params;
      }, params);

      paramsUrl += 'LAYERS=' + encodeURIComponent(params.LAYERS.join(','));
      paramsUrl += '&STYLES=' + encodeURIComponent(params.STYLES.join(','));

      if (params.LEGEND_ON.length) {
        paramsUrl += '&LEGEND_ON=' + encodeURIComponent(params.LEGEND_ON.join(','));
      }

      if (params.LEGEND_OFF.length) {
        paramsUrl += '&LEGEND_OFF=' + encodeURIComponent(params.LEGEND_OFF.join(','));
      }

      if (_application2.default.getFilterToken()) {
        paramsUrl += '&filtertoken=' + _application2.default.getFilterToken();
      }

      return paramsUrl;
    },
    getLegendSrc: function () {
      var _ref2 = _asyncToGenerator(function* () {
        var _this = this;

        this.legendurls = [];

        yield this.$nextTick();

        if (!this.active) {
          return;
        }

        var urlMethodsLayersName = {
          GET: {},
          POST: {}
        };
        var self = this;

        var layers = this.layers.filter(function (layer) {
          return layer.geolayer;
        });

        for (var i = 0; i < layers.length; i++) {
          var layer = layers[i];
          var style = Array.isArray(layer.styles) && layer.styles.find(function (style) {
            return style.current;
          });
          var urlLayersName = layer.source && layer.source.url || layer.external ? urlMethodsLayersName.GET : urlMethodsLayersName[layer.ows_method];

          var url = '' + this.getLegendUrl(layer, this.legend.config);

          if ("undefined" === typeof url) {
            continue;
          }
          if (layer.source && layer.source.url) {
            urlLayersName[url] = [];
          } else {
            var prefix = void 0,
                legend_on = void 0,
                legend_off = void 0;

            var _url$split = url.split('LAYER=');

            var _url$split2 = _slicedToArray(_url$split, 2);

            prefix = _url$split2[0];
            layerName = _url$split2[1];

            var _prefix$split = prefix.split('LEGEND_ON=');

            var _prefix$split2 = _slicedToArray(_prefix$split, 2);

            prefix = _prefix$split2[0];
            legend_on = _prefix$split2[1];

            var _prefix$split3 = prefix.split('LEGEND_OFF=');

            var _prefix$split4 = _slicedToArray(_prefix$split3, 2);

            prefix = _prefix$split4[0];
            legend_off = _prefix$split4[1];


            if (!urlLayersName[prefix]) {
              urlLayersName[prefix] = [];
            }

            urlLayersName[prefix].unshift({
              layerName: layerName,
              style: style && style.name,
              legend_on: (legend_on || '').replace('&', ''),
              legend_off: (legend_off || '').replace('&', '') });
          }
        }
        for (var method in urlMethodsLayersName) {
          var _urlLayersName = urlMethodsLayersName[method];
          if ('GET' === method) {
            for (var _url2 in _urlLayersName) {
              if (_urlLayersName[_url2].length) {
                _url2 += '' + this.getLegendUrlParams(_urlLayersName[_url2]);
              }
              this.legendurls.push({
                loading: true,
                error: false,
                url: _url2
              });
            }
          } else {
            var _loop = function _loop(_url3) {
              var xhr = new XMLHttpRequest();
              var econdedParams = [];

              var _url3$split = _url3.split('?'),
                  _url3$split2 = _slicedToArray(_url3$split, 2),
                  _url = _url3$split2[0],
                  params = _url3$split2[1];

              params = params.split('&');

              params.forEach(function (param) {
                var _param$split = param.split('='),
                    _param$split2 = _slicedToArray(_param$split, 2),
                    key = _param$split2[0],
                    value = _param$split2[1];

                if (key) {
                  econdedParams.push(key + '=' + encodeURIComponent(value));
                }
              });

              params = econdedParams.join('&') + '&' + _this.getLegendUrlParams(_urlLayersName[_url3]);

              var legendUrlObject = {
                loading: true,
                url: null,
                error: false
              };

              xhr.open('POST', _url);
              xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
              xhr.responseType = 'blob';

              self.legendurls.push(legendUrlObject);

              xhr.onload = function () {
                if (undefined !== this.response) {
                  legendUrlObject.url = window.URL.createObjectURL(this.response);
                }
                legendUrlObject.loading = false;
              };

              xhr.onerror = function () {
                legendUrlObject.loading = false;
              };

              xhr.send(params);
            };

            for (var _url3 in _urlLayersName) {
              _loop(_url3);
            }
          }
        }
      });

      function getLegendSrc() {
        return _ref2.apply(this, arguments);
      }

      return getLegendSrc;
    }()
  },

  created: function created() {
    var _this2 = this;

    this.dynamic = _projects2.default.getCurrentProject().getContextBaseLegend();
    this.mapReady = false;

    _eventbus.CatalogEventBus.$on('layer-change-style', function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _this2.getLegendSrc();
    });
  },
  mounted: function () {
    var _ref3 = _asyncToGenerator(function* () {
      var _this3 = this;

      yield this.$nextTick();

      if (this.dynamic) {
        _gui2.default.getService('map').on('change-map-legend-params', function () {
          _this3.mapReady = true;
          _this3.getLegendSrc();
        });
      } else {
        this.mapReady = true;
      }
    });

    function mounted() {
      return _ref3.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"legend-item"},_vm._l((_vm.legendurls),function(legendurl){return _c('figure',[_c('bar-loader',{attrs:{"loading":legendurl.loading}}),_vm._v(" "),_c('img',{directives:[{name:"show",rawName:"v-show",value:(!legendurl.loading && !legendurl.error),expression:"!legendurl.loading && !legendurl.error"}],attrs:{"src":legendurl.url},on:{"error":function($event){return _vm.setError(legendurl)},"load":function($event){return _vm.urlLoaded(legendurl)}}}),_vm._v(" "),_c('span',{staticClass:"divider"})],1)}),0)}
__vue__options__.staticRenderFns = []

},{"app/eventbus":43,"services/application":310,"services/gui":319,"store/catalog-layers":329,"store/projects":335}],156:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#project-context-menu[data-v-5db8b798]{background:#fafafa;border:1px solid #bdbdbd;border-radius:3px;display:block;list-style:none;margin:0;padding:0;position:fixed;min-width:150px;z-index:999999;color:#000;outline:none}li .item-text[data-v-5db8b798]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _eventbus = require('app/eventbus');

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'CatalogProjectmenu',

  props: {
    external: {
      type: Object
    }
  },

  data: function data() {
    return {
      menu: {
        title: _projects2.default.getCurrentProject().getName(),
        show: false,
        top: 0,
        left: 0,

        layers: {
          show: false,
          top: 0,
          left: 0
        }
      }
    };
  },


  computed: {
    edit_url: function edit_url() {
      return _application2.default.getCurrentProject().getState().edit_url;
    }
  },

  methods: {
    _hideMenu: function _hideMenu() {
      this.menu.show = false;
    },
    closeLayerMenu: function closeLayerMenu() {
      this._hideMenu();
    },
    showAdminLayers: function showAdminLayers() {
      console.log('qui');
    },
    onShowProjectContextMenu: function () {
      var _ref = _asyncToGenerator(function* (evt) {
        this._hideMenu();
        yield this.$nextTick();
        this.menu.left = evt.x;
        this.menu.show = true;
        yield this.$nextTick();
        this.menu.top = $(evt.target).offset().top - $(this.$refs['project-context-menu']).height() + $(evt.target).height() / 2;
      });

      function onShowProjectContextMenu(_x) {
        return _ref.apply(this, arguments);
      }

      return onShowProjectContextMenu;
    }()
  },

  created: function created() {
    _eventbus.CatalogEventBus.$on('show-project-context-menu', this.onShowProjectContextMenu);
    _eventbus.CatalogEventBus.$on('hide-project-context-menu', this._hideMenu);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.edit_url && _vm.menu.show)?_c('ul',{directives:[{name:"click-outside",rawName:"v-click-outside",value:(_vm.closeLayerMenu),expression:"closeLayerMenu"}],ref:"project-context-menu",staticClass:"catalog-context-menu",style:({
    top: _vm.menu.top + 'px',
    left: _vm.menu.left + 'px'
  }),attrs:{"id":"project-context-menu","tabindex":"-1"}},[_c('li',{staticClass:"title"},[_c('div',[_vm._v("G3W-ADMIN "+_vm._s(_vm.menu.title))])]),_vm._v(" "),_c('li',[_c('div',[_c('span',{staticClass:"menu-icon skin-color-dark"},[_c('svg',{staticStyle:{"height":"14px","vertical-align":"-1.5px","fill":"currentColor"},attrs:{"xmlns":"http://www.w3.org/2000/svg","xml:space":"preserve","viewBox":"0 0 32 32"}},[_c('path',{attrs:{"d":"m17.61 17.63 4.36-.02-4-3.98h-4.36v4l4 4.45z"}}),_vm._v(" "),_c('path',{attrs:{"d":"m31.61 27.22-7.62-7.6-4.38.01v4.33l7.24 7.67h4.76z"}}),_vm._v(" "),_c('path',{attrs:{"d":"M18 25.18c-.68.16-1.17.2-1.9.2a9.77 9.77 0 0 1-9.68-9.88c0-5.57 4.4-9.78 9.68-9.78s9.48 4.2 9.48 9.78c0 .91-.15 1.96-.36 2.8l4.88 4.65a15 15 0 0 0 1.95-7.48C32.05 6.87 25.19.44 16 .44 6.86.44 0 6.84 0 15.47c0 8.68 6.86 15.2 16 15.2 2.36 0 4.23-.3 6.2-1.1L18 25.18z"}})])]),_vm._v(" "),_c('b',[_c('a',{staticStyle:{"color":"initial"},attrs:{"href":_vm.edit_url,"target":"_blank"}},[_vm._v("Project settings")])])])])]):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-5db8b798"

},{"app/eventbus":43,"services/application":310,"store/projects":335,"vueify/lib/insert-css":2}],157:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CatalogLayerLegend = require('components/CatalogLayerLegend.vue');

var _CatalogLayerLegend2 = _interopRequireDefault(_CatalogLayerLegend);

var _eventbus = require('app/eventbus');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _click = require('mixins/click');

var _click2 = _interopRequireDefault(_click);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    downloadFile = _require.downloadFile;

function _setAllLayersVisible(layers) {
  layers.nodes.forEach(function (n) {
    if (undefined === n.id) {
      _setAllLayersVisible({ nodes: n.nodes, visible: layers.visible && n.checked });
    } else if (n.parentGroup.checked && n.checked) {
      _catalogLayers2.default.getLayerById(n.id).setVisible(layers.visible);
    }
  });
};

exports.default = {
  name: 'catalog-tristate-tree',

  props: ['layerstree', 'storeid', 'legend', 'legendplace', 'highlightlayers', 'parent_mutually_exclusive', 'parentFolder', 'externallayers', 'root', 'parent'],

  components: {
    'layerlegend': _CatalogLayerLegend2.default
  },

  mixins: [_click2.default],

  data: function data() {
    return {
      expanded: this.layerstree.expanded,
      isGroupChecked: true,
      controltoggled: false,
      n_childs: null,
      filtered: false
    };
  },


  computed: {
    showfeaturecount: function showfeaturecount() {
      return "undefined" !== typeof this.layerstree.featurecount;
    },
    showLegendLayer: function showLegendLayer() {
      return !this.layerstree.exclude_from_legend;
    },
    showLayerTocLegend: function showLayerTocLegend() {
      return !this.isGroup && this.showLegendLayer && this.layerstree.geolayer;
    },
    isGroup: function isGroup() {
      return !!this.layerstree.nodes;
    },
    legendlayerposition: function legendlayerposition() {
      return this.showLegendLayer && this.layerstree.legend ? this.legendplace : 'tab';
    },
    showscalevisibilityclass: function showscalevisibilityclass() {
      return !this.isGroup && this.layerstree.scalebasedvisibility;
    },
    showScaleVisibilityToolip: function showScaleVisibilityToolip() {
      return this.showscalevisibilityclass && this.layerstree.disabled && this.layerstree.checked;
    },
    isTable: function isTable() {
      return !this.isGroup && !this.layerstree.geolayer && !this.layerstree.external;
    },
    isHidden: function isHidden() {
      return this.layerstree.hidden && true === this.layerstree.hidden;
    },
    selected: function selected() {
      this.layerstree.selected = this.layerstree.disabled && this.layerstree.selected ? false : this.layerstree.selected;
    },
    isHighLight: function isHighLight() {
      return this._isHighLightProjectLayer || this._isHighLightExternalLayer;
    },
    isInGrey: function isInGrey() {
      return !this.isGroup && !this.isTable && !this.layerstree.external && (!this.layerstree.visible || this.layerstree.disabled);
    },
    getFeatureCount: function getFeatureCount() {
      return Object.values(this.layerstree.featurecount).reduce(function (total, categoryFeatureCount) {
        return total + 1 * categoryFeatureCount;
      }, 0);
    },
    _isHighLightProjectLayer: function _isHighLightProjectLayer() {
      return this.highlightlayers && !this.isGroup && _catalogLayers2.default.getLayerById(this.layerstree.id).getTocHighlightable() && this.layerstree.visible;
    },
    _isHighLightExternalLayer: function _isHighLightExternalLayer() {
      return this.layerstree.external && this.layerstree.visible && "vector" && this.layerstree._type && true === this.layerstree.tochighlightable;
    }
  },

  watch: {
    'layerstree.checked': function layerstreeChecked() {
      if (this.isGroup) {
        this.handleGroupChecked(this.layerstree);
      } else {
        this.handleLayerChecked(this.layerstree);
      }
    }
  },

  methods: {
    removeCurrentFilter: function removeCurrentFilter() {
      return _catalogLayers2.default.getLayerById(this.layerstree.id).deleteFilterToken();
    },
    handleGroupChecked: function handleGroupChecked(group) {
      if (!group.checked) {
        group.nodes.forEach(function (n) {
          if (undefined === n.id) {
            _setAllLayersVisible({ nodes: n.nodes, visible: false });
          } else if (n.checked) {
            _catalogLayers2.default.getLayerById(n.id).setVisible(false);
          }
        });
        return;
      }

      var visible = group.parentGroup ? group.parentGroup.checked : true;
      var mutually_exclusive = group.parentGroup && group.parentGroup.mutually_exclusive;

      if (!mutually_exclusive) {
        _setAllLayersVisible({ nodes: group.nodes, visible: visible });
      }

      if (mutually_exclusive) {
        group.parentGroup.nodes.forEach(function (n) {
          n.checked = n.groupId === group.groupId;
          if (n.checked) {
            _setAllLayersVisible({ nodes: n.nodes, visible: visible });
          }
        });
      }

      var g = group.parentGroup;
      while (g) {
        g.checked = g.root || g.checked;
        g = g.parentGroup;
      }
    },
    handleLayerChecked: function handleLayerChecked(layer) {
      if (!layer.projectLayer) {
        layer.visible = layer.checked;
        _gui2.default.getService('map').changeLayerVisibility({ id: layer.id, visible: layer.checked });
        return;
      }

      var qlayer = _catalogLayers2.default.getLayerById(layer.id);
      var checked = layer.checked;

      qlayer.setVisible(checked ? !layer.disabled : false);

      if (checked && layer.parentGroup.mutually_exclusive) {
        layer.parentGroup.nodes.forEach(function (n) {
          return n.checked = n.id === layer.id;
        });
      }

      var g = layer.parentGroup;
      while (checked && g) {
        g.checked = true;
        g = g.parentGroup;
      }

      _eventbus.CatalogEventBus.$emit('treenodevisible', qlayer);
    },
    saveFilter: function saveFilter(layerstree) {
      _catalogLayers2.default.getLayerById(layerstree.id).saveFilter();
    },
    toggleFilterLayer: function toggleFilterLayer() {
      _eventbus.CatalogEventBus.$emit('activefiltertokenlayer', this.storeid, this.layerstree);
    },
    clearSelection: function clearSelection() {
      _eventbus.CatalogEventBus.$emit('unselectionlayer', this.storeid, this.layerstree);
    },
    toggle: function toggle() {
      this.layerstree.checked = !this.layerstree.checked;
    },
    expandCollapse: function expandCollapse() {
      this.layerstree.expanded = !this.layerstree.expanded;
    },
    select: function select() {
      if (undefined === this.layerstree.selected) {
        return;
      }

      if (this.layerstree.external && false === this.layerstree.projectLayer) {
        _eventbus.CatalogEventBus.$emit('treenodeexternalselected', this.layerstree);
      } else if (!this.isGroup && !this.isTable) {
        _eventbus.CatalogEventBus.$emit('treenodeselected', this.storeid, this.layerstree);
      }
    },
    maybeZoomToLayer: function maybeZoomToLayer(layer) {
      if (this.canZoom(this.layerstree)) {
        _gui2.default.getService('map').goToBBox([layer.bbox.minx, layer.bbox.miny, layer.bbox.maxx, layer.bbox.maxy], layer.epsg);
      }
    },
    canZoom: function canZoom(layer) {
      return layer.bbox && [layer.bbox.minx, layer.bbox.miny, layer.bbox.maxx, layer.bbox.maxy].find(function (coordinate) {
        return coordinate > 0;
      });
    },
    onTreeItemClick: function onTreeItemClick() {
      var _this = this;

      this.handleClick({
        '1': function _() {
          return !_this.isTable && !_this.isGroup && _this.select();
        },
        '2': function _() {
          return !_this.isTable && _this.maybeZoomToLayer(_this.layerstree);
        }
      }, this);
    },
    triClass: function triClass() {
      return this.g3wtemplate.getFontClass(this.layerstree.checked ? 'check' : 'uncheck');
    },
    downloadExternalLayer: function downloadExternalLayer(download) {
      if (download.file) {
        downloadFile(download.file);
      } else if (download.url) {}
    },
    removeExternalLayer: function removeExternalLayer(name, type) {
      _gui2.default.getService('map').removeExternalLayer(name, wms);
    },
    showContextMenu: function showContextMenu(evt) {
      if (!this.isGroup && (this.layerstree.openattributetable || this.layerstree.downloadable || this.layerstree.geolayer || this.layerstree.external)) {
        _eventbus.CatalogEventBus.$emit('hide-project-context-menu');
        _eventbus.CatalogEventBus.$emit('show-layer-context-menu', this.layerstree, evt);
      } else if (this.isGroup && true === this.layerstree.root) {
        _eventbus.CatalogEventBus.$emit('hide-layer-context-menu');
        _eventbus.CatalogEventBus.$emit('show-project-context-menu', evt);
      }
    }
  },

  created: function created() {
    if (this.isGroup && !this.layerstree.checked) {
      this.handleGroupChecked(this.layerstree);
    }
    if (this.isGroup && !this.root && this.parent_mutually_exclusive && !this.layerstree.mutually_exclusive) {
      this.layerstree.nodes.forEach(function (node) {
        node.id && (node.uncheckable = true);
      });
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      yield this.$nextTick();
      $('span.scalevisibility').tooltip();
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{staticClass:"tree-item",class:{
    selected: !_vm.isGroup || !_vm.isTable ? _vm.layerstree.selected : false,
    itemmarginbottom: !_vm.isGroup,
    disabled: _vm.isInGrey,
    group: _vm.isGroup
  },style:({
    marginLeft: !_vm.isGroup ? '5px' : '0'
  }),on:{"contextmenu":function($event){$event.preventDefault();$event.stopPropagation();return _vm.showContextMenu($event)},"click":function($event){$event.stopPropagation();return _vm.onTreeItemClick($event)}}},[(_vm.isGroup)?_c('span',{staticClass:"root collapse-expande-collapse-icon",class:[
      { bold : _vm.isGroup },
      _vm.g3wtemplate.getFontClass(_vm.layerstree.expanded ? 'caret-down' : 'caret-right')
    ],staticStyle:{"padding-right":"2px"},on:{"click":function($event){$event.stopPropagation();return _vm.expandCollapse($event)}}}):_vm._e(),_vm._v(" "),(_vm.isGroup)?_c('span',{class:[_vm.triClass()],staticStyle:{"color":"#ffffff"},on:{"click":function($event){$event.stopPropagation();return _vm.toggle()}}}):(_vm.isTable)?_c('span',{directives:[{name:"show",rawName:"v-show",value:(!_vm.layerstree.hidden),expression:"!layerstree.hidden"}],class:[
      _vm.parentFolder ? 'child' : 'root',
      _vm.g3wtemplate.getFontClass('table')
    ],staticStyle:{"padding-left":"18px"}}):[(_vm.layerstree.external && _vm.layerstree.removable)?_c('span',{class:_vm.g3wtemplate.getFontClass('trash'),staticStyle:{"color":"red","padding-left":"1px"},on:{"click":function($event){$event.stopPropagation();return _vm.removeExternalLayer(_vm.layerstree.name, _vm.layerstree._type)}}}):_vm._e(),_vm._v(" "),(_vm.layerstree.external && _vm.layerstree.download)?_c('span',{class:_vm.g3wtemplate.getFontClass('download'),staticStyle:{"color":"#ffffff","margin-left":"5px"},on:{"click":function($event){return _vm.downloadExternalLayer(_vm.layerstree.download)}}}):_vm._e(),_vm._v(" "),_c('span',{directives:[{name:"show",rawName:"v-show",value:(!_vm.layerstree.hidden),expression:"!layerstree.hidden"}],staticClass:"checkbox-layer",class:_vm.parentFolder ? 'child' : 'root'},[('toc' === _vm.legendlayerposition || !_vm.isGroup && _vm.layerstree.categories)?_c('span',{staticClass:"collapse-expande-collapse-icon",class:_vm.g3wtemplate.getFontClass(_vm.layerstree.visible && _vm.layerstree.expanded ? 'caret-down' : 'caret-right'),on:{"click":function($event){if($event.target !== $event.currentTarget){ return null; }$event.stopPropagation();return _vm.expandCollapse($event)}}}):_vm._e(),_vm._v(" "),_c('span',{class:[
          _vm.g3wtemplate.getFontClass(_vm.layerstree.checked ? 'check': 'uncheck'),
          { 'toc-added-external-layer': (!_vm.layerstree.legend && _vm.layerstree.external) }
        ],style:({
          paddingLeft: ('toc' === _vm.legendlayerposition)
            ? '5px'
            : !_vm.isGroup && _vm.layerstree.categories
              ? '5px'
              : (!_vm.layerstree.legend && _vm.layerstree.external)
                ? '1px'
                : '18px'
        }),on:{"click":function($event){$event.stopPropagation();return _vm.toggle()}}})])],_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.layerstree.hidden || _vm.isGroup),expression:"!layerstree.hidden || isGroup"}],staticClass:"tree-node-title",class:{
      disabled: !_vm.layerstree.external && (_vm.layerstree.disabled || (_vm.layerstree.id && !_vm.layerstree.visible)),
      bold: _vm.isGroup
    }},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.text",value:(_vm.showScaleVisibilityToolip ? ("minscale:" + (_vm.layerstree.minscale) + " - maxscale:" + (_vm.layerstree.maxscale)) : ''),expression:"showScaleVisibilityToolip ? `minscale:${layerstree.minscale} - maxscale:${layerstree.maxscale}` : ''",modifiers:{"text":true}}],staticClass:"skin-tooltip-top g3w-long-text",class:{
        highlightlayer: _vm.isHighLight,
        scalevisibility: _vm.showscalevisibilityclass
      },attrs:{"data-placement":"top","current-tooltip":_vm.showScaleVisibilityToolip ? ("minscale:" + (_vm.layerstree.minscale) + " - maxscale: " + (_vm.layerstree.maxscale)) : ''}},[(!_vm.isGroup && !_vm.layerstree.external && null !== _vm.layerstree.filter.current)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create.text",value:(_vm.layerstree.filter.current.name),expression:"layerstree.filter.current.name",arg:"top",modifiers:{"create":true,"text":true}}],staticStyle:{"cursor":"pointer"},attrs:{"current-tooltip":_vm.layerstree.filter.current.name},on:{"click":function($event){$event.stopPropagation();return _vm.removeCurrentFilter($event)}}},[_c('span',{class:_vm.g3wtemplate.getFontClass('filter'),staticStyle:{"color":"red"}})]):_vm._e(),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.layerstree.title))]),_vm._v(" "),(!_vm.isGroup && _vm.showfeaturecount)?_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v("\n        ["+_vm._s(_vm.getFeatureCount)+"]\n      ")]):_vm._e()]),_vm._v(" "),((!_vm.isGroup && _vm.layerstree.selection))?_c('div',[(_vm.layerstree.selection.active)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.clear'),expression:"'layer_selection_filter.tools.clear'",modifiers:{"create":true}}],staticClass:"action-button skin-tooltip-left selection-filter-icon",class:_vm.g3wtemplate.getFontClass('clear'),attrs:{"data-placement":"left","data-toggle":"tooltip","data-container":"body"},on:{"click":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"caputure",undefined,$event.key,undefined)){ return null; }$event.preventDefault();$event.stopPropagation();return _vm.clearSelection($event)}}}):_vm._e(),_vm._v(" "),(!_vm.layerstree.external && (_vm.layerstree.selection.active || _vm.layerstree.filter.active))?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.filter'),expression:"'layer_selection_filter.tools.filter'",modifiers:{"create":true}}],staticClass:"action-button skin-tooltip-left selection-filter-icon",class:[
          _vm.g3wtemplate.getFontClass('filter'),
          _vm.layerstree.filter.active  ? 'active' : '' ],attrs:{"data-placement":"left","data-toggle":"tooltip","data-container":"body"},on:{"click":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"caputure",undefined,$event.key,undefined)){ return null; }$event.preventDefault();$event.stopPropagation();return _vm.toggleFilterLayer($event)}}}):_vm._e(),_vm._v(" "),(!_vm.layerstree.external && (_vm.layerstree.selection.active && _vm.layerstree.filter.active))?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.savefilter'),expression:"'layer_selection_filter.tools.savefilter'",modifiers:{"create":true}}],staticClass:"action-button skin-tooltip-left selection-filter-icon",class:_vm.g3wtemplate.getFontClass('save'),attrs:{"data-placement":"left","data-toggle":"tooltip"},on:{"click":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"caputure",undefined,$event.key,undefined)){ return null; }$event.preventDefault();$event.stopPropagation();return _vm.saveFilter(_vm.layerstree)}}}):_vm._e()]):_vm._e()]),_vm._v(" "),(_vm.showLayerTocLegend)?_c('layerlegend',{attrs:{"legendplace":_vm.legendplace,"layer":_vm.layerstree}}):_vm._e(),_vm._v(" "),(_vm.isGroup)?_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.layerstree.expanded),expression:"layerstree.expanded"}],staticClass:"tree-content-items group",class:[("g3w-lendplace-" + _vm.legendplace)]},_vm._l((_vm.layerstree.nodes),function(_layerstree){return _c('span',{key:_layerstree.id || _layerstree.groupId},[_c('tristate-tree',{attrs:{"root":false,"legendConfig":_vm.legend,"legendplace":_vm.legendplace,"highlightlayers":_vm.highlightlayers,"parentFolder":_vm.isGroup,"layerstree":_layerstree,"storeid":_vm.storeid,"parent":_vm.layerstree,"parent_mutually_exclusive":!!_vm.layerstree.mutually_exclusive}})],1)}),0):_vm._e()],2)}
__vue__options__.staticRenderFns = []

},{"app/eventbus":43,"components/CatalogLayerLegend.vue":152,"mixins/click":298,"services/gui":319,"store/catalog-layers":329,"utils":419}],158:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#g3w-change-map-menu[data-v-9eb2df56]{width:100%;position:relative}.g3w-change-map-menu-container[data-v-9eb2df56]{height:100%;display:grid;grid-template-columns:repeat(auto-fill,minmax(30%,1fr));grid-gap:1em;overflow-y:auto}.menu-item[data-v-9eb2df56]{margin-bottom:20px;margin-top:20px}.menu-item-image[data-v-9eb2df56]{cursor:pointer;position:relative;overflow:hidden;padding-bottom:50%;opacity:.7}.menu-item-image[data-v-9eb2df56]:hover{opacity:1}.menu-item-image img[data-v-9eb2df56]{position:absolute;top:0;bottom:0;left:0;right:0;margin:auto}.menu-item-content[data-v-9eb2df56]{padding:15px;background:hsla(0,0%,100%,.3)}.menu-item-text[data-v-9eb2df56]{position:relative;overflow:hidden;height:100%;text-align:justify}.menu-item-title[data-v-9eb2df56]{text-align:center;font-weight:700;background:hsla(0,0%,100%,.5);padding:5px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var get_macro = function () {
  var _ref = _asyncToGenerator(function* (id) {
    get_macro[id] = get_macro[id] || (yield XHR.get({ url: encodeURI("/" + _application2.default.getApplicationUser().i18n + _constant.API_BASE_URLS.ABOUT.group + id + "/") }));
    return get_macro[id];
  });

  return function get_macro(_x) {
    return _ref.apply(this, arguments);
  };
}();

var get_group = function () {
  var _ref2 = _asyncToGenerator(function* (id) {
    get_group[id] = get_group[id] || (yield XHR.get({ url: encodeURI("/" + _application2.default.getApplicationUser().i18n + _constant.API_BASE_URLS.ABOUT.projects.replace('__G3W_GROUP_ID__', id)) }));
    return get_group[id];
  });

  return function get_group(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _application = require("services/application");

var _application2 = _interopRequireDefault(_application);

var _projects = require("store/projects");

var _projects2 = _interopRequireDefault(_projects);

var _constant = require("app/constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Projections = require('g3w-ol/projection/projections');

var _require = require('utils'),
    XHR = _require.XHR;

exports.default = {
  name: 'change-map-menu',

  data: function data() {
    return {
      state: null,

      loading: false,

      current: 'projects',

      items: [],

      parent: null,

      steps: [],

      curr_group: null

    };
  },


  methods: {
    back: function () {
      var _ref3 = _asyncToGenerator(function* () {
        var last_step = this.steps.pop();
        var has_steps = this.steps.length > 0;
        var item = has_steps && this.steps[this.steps.length - 1];
        if (has_steps && undefined !== item.macrogroup_id || !has_steps && undefined === last_step && Array.isArray(this.parent.macrogroup_id) && this.parent.macrogroup_id.length > 0) {
            var macrogroup_id = has_steps ? item.macrogroup_id : this.parent.macrogroup_id;
            var add = has_steps ? false : true;
            return this.showMacroGroups(macrogroup_id, add);
          }

        if (has_steps && undefined === item.macrogroup_id) {
          return this.showGroups(item, false);
        }

        if (!has_steps) {
          return this.showRoot();
        }
      });

      function back() {
        return _ref3.apply(this, arguments);
      }

      return back;
    }(),
    showMacroGroups: function () {
      var _ref4 = _asyncToGenerator(function* () {
        var macrogroup_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var addStep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (1 === macrogroup_id.length) {
          this.parent = this.macrogroups.find(function (mg) {
            return macrogroup_id[0] === mg.id;
          });
          return yield this.showGroups(this.parent);
        }

        this.items = this.macrogroups.filter(function (m) {
          return macrogroup_id.includes(m.id);
        });
        this.current = 'macrogroups';
        this.parent = {
          macrogroup_id: macrogroup_id,
          title: null,
          name: null };

        if (addStep) {
          this.steps.push(this.parent);
        }
      });

      function showMacroGroups() {
        return _ref4.apply(this, arguments);
      }

      return showMacroGroups;
    }(),
    showGroups: function () {
      var _ref5 = _asyncToGenerator(function* (item) {
        var addStep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        try {
          this.loading = true;
          this.parent = item;
          this.items = yield get_macro(item.id);
          this.current = 'groups';
        } catch (e) {
          console.warn(e);
          this.items = [];
        } finally {
          if (addStep) {
            this.steps.push(this.parent);
          }
          this.loading = false;
        }
      });

      function showGroups(_x6) {
        return _ref5.apply(this, arguments);
      }

      return showGroups;
    }(),
    showProjects: function () {
      var _ref6 = _asyncToGenerator(function* (item) {
        var _this = this;

        try {
          this.loading = true;
          this.parent = item;
          this.items = this.parent.id === this.curr_group ? _projects2.default.getListableProjects() : yield get_group(item.id, function (item) {
            return _this.setItemImageSrc({ item: item, type: 'project' });
          });
          this.current = 'projects';
        } catch (e) {
          console.warn(e);
          this.items = [];
        } finally {
          this.steps.push(this.parent);
          this.loading = false;
        }
      });

      function showProjects(_x7) {
        return _ref6.apply(this, arguments);
      }

      return showProjects;
    }(),
    showRoot: function showRoot() {
      this.current = 'root';
      this.items = [].concat(_toConsumableArray(this.macrogroups), _toConsumableArray(this.groups));
      this.steps = [];
    },
    changeMapProject: function () {
      var _ref7 = _asyncToGenerator(function* (item) {
        var url = void 0;
        var base_url = _projects2.default.getBaseUrl();
        var epsg = this.parent.srid ? "EPSG:" + this.parent.srid : this.parent.crs.epsg;
        yield Projections.registerProjection(epsg);
        try {
          new URL(base_url);
          url = "" + base_url + (item.url || item.map_url.replace(/^\//, ""));
        } catch (e) {
          url = "" + location.origin + base_url + (item.url || item.map_url.replace(/^\//, ""));
        }
        return _application2.default.changeMapProject({ url: url, epsg: epsg });
      });

      function changeMapProject(_x8) {
        return _ref7.apply(this, arguments);
      }

      return changeMapProject;
    }(),
    trigger: function () {
      var _ref8 = _asyncToGenerator(function* (item) {
        switch (this.current) {
          case 'root':
            return undefined === item.srid ? this.showGroups(item) : this.showProjects(item);
          case 'macrogroups':
            return this.showGroups(item);
          case 'groups':
            return yield this.showProjects(item);
          case 'projects':
            return yield this.changeMapProject(item);
        }
      });

      function trigger(_x9) {
        return _ref8.apply(this, arguments);
      }

      return trigger;
    }(),
    setItemImageSrc: function setItemImageSrc() {
      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          item = _ref9.item,
          type = _ref9.type;

      switch (type) {
        case 'project':
          item.thumbnail = this._setSrc(item.thumbnail);break;
        case 'group':
          item.header_logo_img = this._setSrc(item.header_logo_img);break;
        case 'macrogroup':
          item.logo_img = this._setSrc(item.logo_img);break;

        case 'net_error':
          if (item.thumbnail || item.logo_img) {
            item.thumbnail = "" + _application2.default.getConfig().urls.clienturl + _constant.LOGO_GIS3W;
          } else if (item.header_logo_img) {
            item.header_logo_img = "" + _application2.default.getConfig().urls.clienturl + _constant.LOGO_GIS3W;
          }
          break;
      }
    },
    _setSrc: function _setSrc(src) {
      var imageSrc = void 0;
      var host = this.$options.host || '';
      var mediaurl = _projects2.default.config.mediaurl;
      var clienturl = _application2.default.getConfig().urls.clienturl;
      var has_media = src && -1 !== src.indexOf(mediaurl);
      var not_static = src && -1 === src.indexOf('static') && -1 === src.indexOf('media');

      if (!src) {
        imageSrc = "" + clienturl + _constant.LOGO_GIS3W;
      } else if (has_media) {
        imageSrc = src;
      } else if (not_static) {
        imageSrc = "" + mediaurl + src;
      } else {
        imageSrc = "" + clienturl + _constant.LOGO_GIS3W;
      }

      return "" + host + imageSrc;
    }
  },

  created: function () {
    var _ref10 = _asyncToGenerator(function* () {
      var _this2 = this;

      var config = _application2.default.getConfig();

      this.items = _projects2.default.getListableProjects();
      this.parent = _projects2.default.getCurrentProjectGroup();
      this.curr_group = this.parent.id;
      this.macrogroups = config.macrogroups;
      this.groups = config.groups;

      Object.entries({ 'project': this.items, 'magrocroup': this.macrogroups, 'group': this.groups }).forEach(function (_ref11) {
        var _ref12 = _slicedToArray(_ref11, 2),
            type = _ref12[0],
            d = _ref12[1];

        return d.forEach(function (item) {
          return _this2.setItemImageSrc({ item: item, type: type });
        });
      });
    });

    function created() {
      return _ref10.apply(this, arguments);
    }

    return created;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"g3w-change-map-menu"}},[('root' !== this.current)?[_c('div',{staticClass:"skin-background-color",staticStyle:{"display":"flex","align-items":"center","color":"#ffffff"}},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:bottom.create",value:('change_session'),expression:"'change_session'",arg:"bottom",modifiers:{"create":true}},{name:"disabled",rawName:"v-disabled",value:(_vm.loading),expression:"loading"}],staticStyle:{"font-size":"2em","margin":"5px","cursor":"pointer","padding":"3px","border":"2px solid #ffffff","border-radius":"3px"},on:{"click":function($event){$event.stopPropagation();return _vm.back($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('reply'),staticStyle:{"color":"#FFFFFF"}})]),_vm._v(" "),(_vm.parent)?_c('div',{staticStyle:{"margin":"auto"}},[_c('h3',{staticStyle:{"font-weight":"bold"}},[_vm._v("\n          "+_vm._s(_vm.parent.title || _vm.parent.name)+"\n        ")])]):_vm._e()])]:_vm._e(),_vm._v(" "),(_vm.items.length)?_c('div',{staticClass:"g3w-change-map-menu-container"},_vm._l((_vm.items),function(item){return _c('div',{key:item.name,staticClass:"menu-item"},[_c('div',{staticClass:"menu-item-image",on:{"click":function($event){$event.stopPropagation();return _vm.trigger(item)}}},[_c('img',{staticClass:"img-responsive",attrs:{"src":item.thumbnail || item.header_logo_img || item.logo_img,"alt":"logo"},on:{"error":function($event){return _vm.setItemImageSrc({ item: item, type: 'net_error' })}}})]),_vm._v(" "),_c('div',{staticClass:"menu-item-content"},[_c('div',{staticClass:"menu-item-text"},[_c('h4',{staticClass:"menu-item-title"},[_vm._v("\n            "+_vm._s(item.title)+"\n          ")]),_vm._v(" "),_c('div',{domProps:{"innerHTML":_vm._s(item.description)}})])])])}),0):[_c('h3',{directives:[{name:"t",rawName:"v-t",value:(("no_other_" + _vm.current)),expression:"`no_other_${current}`"}],staticStyle:{"font-weight":"bold"}})]],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-9eb2df56"

},{"app/constant":5,"g3w-ol/projection/projections":73,"services/application":310,"store/projects":335,"utils":419,"vueify/lib/insert-css":2}],159:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".field[data-v-6783d4c4]{background-color:transparent!important;padding-top:3px;padding-bottom:3px;display:flex;align-items:center}.value[data-v-6783d4c4]{position:relative}.field div[data-v-6783d4c4]{padding-left:3px;padding-right:3px}.field_value[data-v-6783d4c4]{padding-left:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "field",
  props: ['state']
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"field",style:({fontSize: _vm.isMobile() && '0.8em'})},[(_vm.state.label)?_c('div',{staticClass:"col-sm-6  field_label"},[_vm._t("label",[_vm._v(_vm._s(_vm.state.label))])],2):_vm._e(),_vm._v(" "),_c('div',{staticClass:"field_value",class:[_vm.state.label ? 'col-sm-6' : null ]},[_vm._t("field",[_c('span',{staticStyle:{"word-wrap":"break-word"},domProps:{"innerHTML":_vm._s(_vm.state.value)}})])],2)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-6783d4c4"

},{"vueify/lib/insert-css":2}],160:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var fieldsService = require('gui/fields/fieldsservice');
var Fields = require('gui/fields/fields');

exports.default = {
  name: "g3w-field",
  props: {
    state: {
      required: true
    },
    feature: {
      type: Object
    }
  },
  components: _extends({}, Fields),
  created: function created() {
    this.type = fieldsService.getType(this.state);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.type,{tag:"component",attrs:{"feature":_vm.feature,"state":_vm.state}})}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-46843712"

},{"gui/fields/fields":79,"gui/fields/fieldsservice":80}],161:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".show-hide-geo[data-v-3362679d]{color:#3c8dbc;cursor:pointer;font-size:1.2em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mixins = require('mixins');

exports.default = {
  name: "g3w-geospatial",
  props: {
    data: {}
  },
  mixins: [_mixins.geoMixin],
  data: function data() {
    return {
      layerId: 'table_layer_' + Date.now(),
      visible: false,
      id: 'geo_table_' + Date.now()
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"geo-content"},[_c('span',{staticClass:"show-hide-geo",class:[_vm.visible ? _vm.g3wtemplate.font['eye-close'] : _vm.g3wtemplate.font['eye']],on:{"click":function($event){$event.stopPropagation();return _vm.showLayer()}}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-3362679d"

},{"mixins":302,"vueify/lib/insert-css":2}],162:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".img-responsive[data-v-70d2a0b2]{cursor:pointer}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Field = require('components/Field.vue');

var _Field2 = _interopRequireDefault(_Field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    toRawType = _require.toRawType;

exports.default = {
  name: "field-image",

  props: ['state'],
  data: function data() {
    return {
      galleryId: 'gallery_' + Date.now(),
      active: null,
      value: this.state.value.mime_type !== undefined ? this.state.value.value : this.state.value
    };
  },

  components: {
    Field: _Field2.default
  },
  computed: {
    values: function values() {
      return Array.isArray(this.value) ? this.value : [this.value];
    }
  },
  methods: {
    getSrc: function getSrc(value) {
      return toRawType(value) === 'Object' ? value.photo : value;
    },
    showGallery: function showGallery(index) {
      this.active = index;
      if (toRawType(this.value) === 'Object') this.value.active = true;
      $('#' + this.galleryId).modal('show');
    },
    getGalleryImages: function getGalleryImages() {
      var _this = this;

      return this.values.map(function (image) {
        return { src: _this.getSrc(image) };
      });
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}},[_c('div',{staticStyle:{"text-align":"left"},attrs:{"slot":"field"},slot:"field"},[_vm._l((_vm.values),function(value,index){return _c('img',{staticClass:"img-responsive",staticStyle:{"max-height":"50px"},attrs:{"src":_vm.getSrc(value)},on:{"click":function($event){return _vm.showGallery(index)}}})}),_vm._v(" "),_c('g3w-images-gallery',{attrs:{"id":_vm.galleryId,"active":_vm.active,"images":_vm.getGalleryImages()}})],2)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-70d2a0b2"

},{"components/Field.vue":159,"utils":419,"vueify/lib/insert-css":2}],163:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".field_link[data-v-156f65de]{max-width:100%}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Field = require('components/Field.vue');

var _Field2 = _interopRequireDefault(_Field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "field-link",

  props: ['state'],
  data: function data() {
    return {
      value: null
    };
  },

  components: {
    Field: _Field2.default
  },
  methods: {
    openLink: function openLink(link_url) {
      window.open(link_url, '_blank');
    }
  },
  created: function created() {
    this.value = this.state.value && _typeof(this.state.value) === 'object' ? this.state.value.value : this.state.value;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('info.link_button'),expression:"'info.link_button'"}],staticClass:"btn skin-button field_link",attrs:{"slot":"field"},on:{"click":function($event){return _vm.openLink(_vm.value)}},slot:"field"})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-156f65de"

},{"components/Field.vue":159,"vueify/lib/insert-css":2}],164:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mixins = require('mixins');

exports.default = {
  name: "g3w-media",
  mixins: [_mixins.mediaMixin],
  props: ['state'],
  computed: {
    type: function type() {
      return this.getMediaType(this.state.mime_type).type;
    },
    value: function value() {
      return this.state.value;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.value)?_c('div',{staticClass:"preview"},[_c('a',{attrs:{"href":_vm.value,"target":"_blank"}},[_c('div',{staticClass:"previewtype",class:_vm.type},[_c('i',{staticClass:"fa-2x",class:_vm.g3wtemplate.font[_vm.type]})])]),_vm._v(" "),_c('div',{staticClass:"filename"},[_vm._v(_vm._s(_vm.filename))]),_vm._v(" "),_vm._t("default")],2):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-7b8309b0"

},{"mixins":302}],165:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".field_text_table[data-v-db21acde]{background-color:transparent!important}.field_text_table .field_label[data-v-db21acde]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Field = require('components/Field.vue');

var _Field2 = _interopRequireDefault(_Field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "field-text",

  props: ['state'],

  components: {
    Field: _Field2.default
  },

  created: function created() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}})}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-db21acde"

},{"components/Field.vue":159,"vueify/lib/insert-css":2}],166:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Field = require("components/Field.vue");

var _Field2 = _interopRequireDefault(_Field);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "vuefield",
  props: {
    feature: {
      type: Object
    },
    state: {
      type: Object,
      default: {
        value: null,
        vueoptions: {
          component: {}
        }
      }
    }
  },
  components: {
    Field: _Field2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('field',{attrs:{"state":_vm.state}},[_c('div',{attrs:{"slot":"field"},slot:"field"},[_c(_vm.state.vueoptions.component,{tag:"component",attrs:{"feature":_vm.feature,"value":_vm.state.value}})],1)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-67a07f52"

},{"components/Field.vue":159}],167:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _floatbar = require("services/floatbar");

var _floatbar2 = _interopRequireDefault(_floatbar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "Floatbar",
  data: function data() {
    return {
      stack: _floatbar2.default.stack.state
    };
  },

  computed: {
    panelsinstack: function panelsinstack() {
      return this.stack.contentsdata.length > 0;
    },
    panelname: function panelname() {
      var name = void 0;
      if (this.stack.contentsdata.length) {
        name = this.stack.contentsdata.slice(-1)[0].content.getTitle();
      }
      return name;
    },
    closable: function closable() {
      return _floatbar2.default.closable;
    }
  },
  watch: {
    "stack.contentsdata": function stackContentsdata() {
      var children = $("#g3w-floatbarpanel-placeholder").children();
      children.forEach(function (child, index) {
        if (index == children.length - 1) $(child).show();else $(child).hide();
      });
    }
  },
  methods: {
    closePanel: function closePanel() {
      _floatbar2.default.closePanel();
    }
  }

};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('aside',{staticClass:"control-sidebar control-sidebar-light"},[_c('a',{directives:[{name:"show",rawName:"v-show",value:(_vm.panelsinstack),expression:"panelsinstack"}],staticClass:"floatbar-aside-toggle",attrs:{"href":"#","data-toggle":"control-sidebar","role":"button"}},[_c('span',{staticClass:"sr-only"},[_vm._v("Expand")])]),_vm._v(" "),_c('div',{staticStyle:{"position":"absolute"},attrs:{"id":"floatbar-spinner"}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.panelsinstack),expression:"panelsinstack"}],staticClass:"g3w-sidebarpanel"},[(_vm.closable)?_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-xs-12 col-sm-12 col-md-12"},[_c('button',{staticClass:"pull-right close-panel-button",class:_vm.g3wtemplate.getFontClass('close'),on:{"click":_vm.closePanel}})])]):_vm._e(),_vm._v(" "),(_vm.panelname)?_c('div',[_c('h4',{staticClass:"g3w-floatbarpanel-name"},[_vm._v(_vm._s(_vm.panelname))])]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"g3w-floatbarpanel-placeholder",attrs:{"id":"g3w-floatbarpanel-placeholder"}})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-29b017dd"

},{"services/floatbar":318}],168:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _FormHeader = require('components/FormHeader.vue');

var _FormHeader2 = _interopRequireDefault(_FormHeader);

var _FormFooter = require('components/FormFooter.vue');

var _FormFooter2 = _interopRequireDefault(_FormFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'g3w-form',

  data: function data() {
    return {
      state: {},
      switchcomponent: false,
      body: {
        components: {
          before: [],
          after: []
        }
      }
    };
  },

  components: {
    g3wformheader: _FormHeader2.default,
    G3wFormFooter: _FormFooter2.default
  },
  transitions: { 'addremovetransition': 'showhide' },
  methods: {
    isRootComponent: function isRootComponent(component) {
      return this.$options.service.isRootComponent(component);
    },
    backToRoot: function backToRoot() {
      this.$options.service.setRootComponent();
    },
    handleRelation: function handleRelation(relationId) {
      this.$options.service.handleRelation(relationId);
    },
    disableComponent: function disableComponent(_ref) {
      var id = _ref.id,
          _ref$disabled = _ref.disabled,
          disabled = _ref$disabled === undefined ? false : _ref$disabled;

      this.$options.service.disableComponent({
        id: id,
        disabled: disabled
      });
    },
    resizeForm: function resizeForm(perc) {
      this.$options.service.setCurrentFormPercentage(perc);
    },
    switchComponent: function switchComponent(id) {
      this.switchcomponent = true;
      this.$options.service.setCurrentComponentById(id);
    },
    changeInput: function changeInput(input) {
      return this.$options.service.changeInput(input);
    },
    addToValidate: function addToValidate(input) {
      this.$options.service.addToValidate(input);
    },
    removeToValidate: function removeToValidate(input) {
      this.$options.service.removeToValidate(input);
    },
    reloadLayout: function reloadLayout() {
      var height = $(this.$el).height();
      if (!height) return;
      var footerDOM = $(this.$refs.g3w_form_footer.$el);
      var bodyFromDOM = $(this.$refs.g3wform_body);
      var footerHeight = footerDOM.height() ? footerDOM.height() + 50 : 50;
      var bodyHeight = height - ($(this.$refs.g3wformheader.$el).height() + footerHeight);
      bodyFromDOM.height(bodyHeight);
    }
  },
  updated: function () {
    var _ref2 = _asyncToGenerator(function* () {
      var _this = this;

      yield this.$nextTick();
      this.switchcomponent && setTimeout(function () {
        return _this.switchcomponent = false;
      }, 0);
    });

    function updated() {
      return _ref2.apply(this, arguments);
    }

    return updated;
  }(),
  created: function created() {
    var _this2 = this;

    this.$options.service.getEventBus().$on('set-main-component', function () {
      _this2.switchComponent(0);
    });
    this.$options.service.getEventBus().$on('component-validation', function (_ref3) {
      var id = _ref3.id,
          valid = _ref3.valid;

      _this2.$options.service.setValidComponent({
        id: id,
        valid: valid
      });
    });
    this.$options.service.getEventBus().$on('addtovalidate', this.addToValidate);
    this.$options.service.getEventBus().$on('disable-component', this.disableComponent);
  },
  mounted: function mounted() {
    this.$options.service.isValid();
    this.$options.service.setReady(true);
  },
  beforeDestroy: function beforeDestroy() {
    this.$options.service.clearAll();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3wform_content",staticStyle:{"position":"relative"}},[_c('bar-loader',{attrs:{"loading":_vm.state.loading}}),_vm._v(" "),_c('g3wformheader',{ref:"g3wformheader",attrs:{"currentid":_vm.state.currentheaderid,"headers":_vm.state.headers,"update":_vm.state.update,"valid":_vm.state.valid},on:{"resize-form":_vm.resizeForm,"clickheader":_vm.switchComponent}}),_vm._v(" "),_c('div',{ref:"g3wform_body",staticClass:"g3wform_body"},[_vm._l((_vm.body.components.before),function(component){return _c(component,{tag:"component",attrs:{"fields":_vm.state.fields}})}),_vm._v(" "),_c('keep-alive',[_c(_vm.state.component,{tag:"component",attrs:{"handleRelation":_vm.handleRelation,"state":_vm.state},on:{"hook:activated":_vm.reloadLayout,"addtovalidate":_vm.addToValidate,"removetovalidate":_vm.removeToValidate,"changeinput":_vm.changeInput}})],1),_vm._v(" "),_vm._l((_vm.body.components.after),function(component){return _c(component,{tag:"component",attrs:{"fields":_vm.state.fields}})})],2),_vm._v(" "),_c('g3w-form-footer',{ref:"g3w_form_footer",attrs:{"isRootComponent":_vm.isRootComponent,"backToRoot":_vm.backToRoot,"state":_vm.state}})],1)}
__vue__options__.staticRenderFns = []

},{"components/FormFooter.vue":170,"components/FormHeader.vue":171}],169:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _InputG3WFormInputs = require('components/InputG3WFormInputs.vue');

var _InputG3WFormInputs2 = _interopRequireDefault(_InputG3WFormInputs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Vue.extend({
  name: 'form-body',

  props: ['state', 'handleRelation'],
  data: function data() {
    return {
      show: true
    };
  },

  components: {
    G3wFormInputs: _InputG3WFormInputs2.default
  },
  methods: {
    addToValidate: function addToValidate(input) {
      this.$emit('addtovalidate', input);
    },
    removeToValidate: function removeToValidate(input) {
      this.$emit('removetovalidate', input);
    },
    changeInput: function changeInput(input) {
      this.$emit('changeinput', input);
    }
  },
  computed: {
    hasFormStructure: function hasFormStructure() {
      return !!this.state.formstructure;
    }
  }
});
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('form',{staticClass:"form-horizontal g3w-form"},[_c('div',{staticClass:"box-primary"},[_c('div',{staticClass:"box-body"},[(_vm.hasFormStructure)?[_c('tabs',{attrs:{"layerid":_vm.state.layerid,"feature":_vm.state.feature,"handleRelation":_vm.handleRelation,"contenttype":'editing',"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput,"removeToValidate":_vm.removeToValidate,"tabs":_vm.state.formstructure,"fields":_vm.state.fields}})]:[_c('g3w-form-inputs',{attrs:{"state":_vm.state,"addToValidate":_vm.addToValidate,"removeToValidate":_vm.removeToValidate,"changeInput":_vm.changeInput},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate,"removeinput":_vm.removeToValidate}})]],2)])])])}
__vue__options__.staticRenderFns = []

},{"components/InputG3WFormInputs.vue":194}],170:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Vue.extend({
  name: 'form-footer',

  props: {
    state: {
      type: Object
    },
    backToRoot: {
      type: Function,
      default: function _default() {}
    },
    isRootComponent: {
      type: Function
    }
  },
  data: function data() {
    this.originalbuttons = this.state.buttons.map(function (button) {
      return _extends({}, button);
    });
    return {
      id: "footer",
      active: true,
      show: true
    };
  },

  computed: {
    enableSave: function enableSave() {
      return this.state.valid && this.state.update;
    }
  },
  methods: {
    exec: function exec(cbk) {
      cbk instanceof Function ? cbk(this.state.fields) : function () {
        return this.state.fields;
      }();
    },
    btnEnabled: function btnEnabled(button) {
      var _button$enabled = button.enabled,
          enabled = _button$enabled === undefined ? true : _button$enabled,
          type = button.type;

      return enabled && (type !== 'save' || type === 'save' && this.enableSave);
    },
    isValid: function isValid() {
      return this.state.valid;
    }
  },
  watch: {
    'state.component': function stateComponent(component) {
      this.show = this.isRootComponent(component);
    },

    'state.update': {
      immediate: true,
      handler: function handler(value) {
        var _this = this;

        this.state.buttons.find(function (button, index) {
          if (button.eventButtons && button.eventButtons.update) {
            if (button.eventButtons.update[value]) {
              _this.state.buttons.splice(index, 1, _extends({}, button, button.eventButtons.update[value]));
            } else _this.state.buttons.splice(index, 1, _this.originalbuttons[index]);
          }
        });
      }
    }
  },
  activated: function activated() {
    this.active = true;
  },
  deactivated: function deactivated() {
    this.active = false;
  }
});
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"form-group g3wform_footer"},[(_vm.show)?[_vm._t("default",[_c('div',{staticStyle:{"margin":"3px","font-weight":"bold"}},[_vm._v("\n        * "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.form.footer.required_fields'),expression:"'sdk.form.footer.required_fields'"}]}),_vm._v(" "),(_vm.state.footer.message)?_c('div',{style:([_vm.state.footer.style])},[_vm._v(_vm._s(_vm.state.footer.message))]):_vm._e()]),_vm._v(" "),_vm._l((_vm.state.buttons),function(button){return _c('button',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.btnEnabled(button)),expression:"!btnEnabled(button)"},{name:"t",rawName:"v-t",value:(button.title),expression:"button.title"}],key:button.id,staticClass:"btn ",class:[button.class],attrs:{"update":_vm.state.update,"valid":_vm.state.valid},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.exec(button.cbk)}}})})])]:[_c('button',{directives:[{name:"t",rawName:"v-t",value:('back'),expression:"'back'"}],staticClass:"btn skin-button",on:{"click":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"prevet",undefined,$event.key,undefined)){ return null; }$event.stopPropagation();return _vm.backToRoot($event)}}})]],2)}
__vue__options__.staticRenderFns = []

},{}],171:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Vue.extend({
  name: 'form-header',

  props: {
    headers: {
      type: Array,
      default: []
    },
    currentid: {
      type: String
    },
    update: {
      type: Boolean
    },
    valid: {
      type: Boolean
    }
  },
  methods: {
    click: function click(id) {
      if (this.currentid !== id && this.headers.length > 1) {
        this.$emit('clickheader', id);
      }
    },
    resizeForm: function resizeForm(perc) {
      this.$emit('resize-form', perc);
    }
  }
});
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3wform_header box-header with-border",staticStyle:{"display":"flex","flex-direction":"column"}},[_c('section',{staticClass:"g3wform_header_content"},_vm._l((_vm.headers),function(header){return _c('span',{key:header.id,staticClass:"title",class:[{item_selected: _vm.currentid === header.id && _vm.headers.length > 1},[_vm.headers.length > 1 ? 'tabs' : 'one' ]],staticStyle:{"display":"flex","justify-content":"space-between","align-items":"center"},style:({fontSize: _vm.isMobile() && '1em !important'}),on:{"click":function($event){$event.stopPropagation();return _vm.click(header.id)}}},[(header.icon)?_c('span',{staticStyle:{"margin-right":"5px"}},[_c('i',{class:header.icon})]):_vm._e(),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t:pre",value:(header.title),expression:"header.title",arg:"pre"}],staticClass:"g3w-long-text"},[_vm._v(_vm._s(header.name))]),_vm._v(" "),_c(header.component,{tag:"component",attrs:{"valid":_vm.valid,"update":_vm.update}})],1)}),0)])}
__vue__options__.staticRenderFns = []

},{}],172:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "bar-loader",
  props: ['loading', 'color']
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.loading)?_c('div',{staticClass:"bar-loader",style:({ backgroundColor: (_vm.color || '#FFFFFF'), border:0 })}):_vm._e()}
__vue__options__.staticRenderFns = []

},{}],173:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: "datetime",
  props: {
    type: {
      type: String,
      default: 'date' },
    format: {
      type: String,
      default: 'YYYY-MM-DD'
    },
    minDate: {
      default: false
    },
    maxDate: {
      default: false
    },
    enabledDates: {
      default: false
    },
    value: {},
    label: {
      default: 'Date'
    }
  },
  data: function data() {
    return {
      datetimevalue: this.value
    };
  },

  methods: {
    changeInput: function changeInput(evt) {},
    change: function change(value) {
      var date = moment(value).format(this.format);
      this.$emit('change', date);
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      yield this.$nextTick();
      this.datetimeinputelement = $(this.$refs.iddatetimepicker);
      this.datetimeinputelement.datetimepicker({
        minDate: this.minDate,
        maxDate: this.maxDate,
        defaultDate: this.datetimevalue,
        useCurrent: false,
        allowInputToggle: true,
        enabledDates: this.enabledDates,
        showClose: true,
        format: this.format,
        locale: _applicationState2.default.language,
        toolbarPlacement: 'top',
        widgetPositioning: {
          horizontal: 'right'
        }
      });
      this.datetimeinputelement.on("dp.change", function (_ref2) {
        var date = _ref2.date;

        _this.change(date);
      });
      this.datetimeinputelement.on("dp.hide", function (evt) {});
      _applicationState2.default.ismobile && setTimeout(function () {
        return datetimeinputelement.blur();
      });
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),

  watch: {
    value: function value(datetime) {
      this.datetimevalue = datetime;
      this.datetimeinputelement.data("DateTimePicker").date(datetime);
    },
    minDate: function () {
      var _ref3 = _asyncToGenerator(function* (mindatetime) {
        this.datetimeinputelement.data("DateTimePicker").minDate(mindatetime);
      });

      function minDate(_x) {
        return _ref3.apply(this, arguments);
      }

      return minDate;
    }(),
    maxDate: function () {
      var _ref4 = _asyncToGenerator(function* (maxdatetime) {
        this.datetimeinputelement.data("DateTimePicker").maxDate(maxdatetime);
      });

      function maxDate(_x2) {
        return _ref4.apply(this, arguments);
      }

      return maxDate;
    }(),
    enabledDates: function enabledDates(dates) {
      this.datetimeinputelement.data("DateTimePicker").enabledDates(dates);
    }
  },
  created: function created() {
    this.id = getUniqueDomId();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"datimecontainer"},[_c('label',{directives:[{name:"t",rawName:"v-t",value:(_vm.label),expression:"label"}],staticStyle:{"display":"block"},attrs:{"for":_vm.id}}),_vm._v(" "),_c('div',{staticClass:"form-group"},[_c('div',{ref:"iddatetimepicker",staticClass:"input-group date"},[_c('input',{ref:"idinputdatetimepiker",staticClass:"form-control",attrs:{"id":_vm.id,"type":"text"},on:{"change":_vm.changeInput}}),_vm._v(" "),_c('span',{staticClass:"input-group-addon caret"},[_c('span',{staticClass:"datetimeinput",class:[_vm.type === 'time'? _vm.g3wtemplate.getFontClass('time') :  _vm.g3wtemplate.getFontClass('calendar')]})])])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-e7683bf8"

},{"store/application-state":328,"utils":419}],174:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".divider[data-v-6409ddc0]{display:block;position:relative;padding:0;margin-bottom:5px;height:0;width:100%;max-height:0;font-size:1px;line-height:0;clear:both;border:none;border-bottom:2px solid #eee}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "divider"
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:"divider"})}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-6409ddc0"

},{"vueify/lib/insert-css":2}],175:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".modal-content[data-v-38db7d79]{background:hsla(0,0%,100%,.6);border-radius:3px}.modal-dialog[data-v-38db7d79]{display:inline-block;text-align:left;vertical-align:middle}.modal[data-v-38db7d79]{text-align:center;padding:0!important}.modal[data-v-38db7d79]:before{content:\"\";display:inline-block;height:100%;vertical-align:middle;margin-right:-4px}.carousel .carousel-control span[data-v-38db7d79]{color:#3c8dbc}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "g3w-images-gallery",
  props: {
    images: {
      type: Array,
      default: []
    },
    id: {
      type: String,
      default: 'gallery'
    },
    active: {
      type: Number
    }
  },
  data: function data() {
    return {
      carouselId: 'carousel_' + Date.now()
    };
  },

  methods: {
    isActive: function isActive(src) {
      return src === active;
    },
    isRelativePath: function isRelativePath(url) {
      if (!_.startsWith(url, '/') && !_.startsWith(url, 'http')) {
        return _projects2.default.getConfig().mediaurl + url;
      }
      return url;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"modal fade modal-fullscreen force-fullscreen",attrs:{"id":_vm.id,"tabindex":"-1","role":"dialog","aria-labelledby":"","aria-hidden":"true"}},[_c('div',{staticClass:"modal-dialog"},[_c('div',{staticClass:"modal-content"},[_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"carousel slide",attrs:{"id":_vm.carouselId,"data-interval":"false"}},[_c('div',{staticClass:"carousel-inner"},_vm._l((_vm.images),function(image,index){return _c('div',{staticClass:"item",class:_vm.active == index ? 'active' : ''},[_c('img',{staticStyle:{"margin":"auto"},attrs:{"src":_vm.isRelativePath(image.src)}})])}),0),_vm._v(" "),(_vm.images.length> 1)?_c('a',{staticClass:"left carousel-control",attrs:{"href":'#'+_vm.carouselId,"role":"button","data-slide":"prev"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('arrow-left')})]):_vm._e(),_vm._v(" "),(_vm.images.length> 1)?_c('a',{staticClass:"right carousel-control",attrs:{"href":'#'+_vm.carouselId,"role":"button","data-slide":"next"}},[_c('span',{class:_vm.g3wtemplate.getFontClass('arrow-left')})]):_vm._e()])])])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-38db7d79"

},{"store/projects":335,"vueify/lib/insert-css":2}],176:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".show-hide-geo[data-v-ea8dc510]{color:#3c8dbc;cursor:pointer;font-size:1.2em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mixins = require('mixins');

exports.default = {
  name: "g3w-geospatial",
  props: {
    data: {}
  },
  mixins: [_mixins.geoMixin],
  data: function data() {
    return {
      layerId: 'table_layer_' + Date.now(),
      visible: false,
      id: 'geo_table_' + Date.now()
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"geo-content"},[_c('span',{staticClass:"show-hide-geo",class:[_vm.visible ? _vm.g3wtemplate.getFontClass('eye-close') : _vm.g3wtemplate.getFontClass('eye')],on:{"click":function($event){$event.stopPropagation();return _vm.showLayer()}}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-ea8dc510"

},{"mixins":302,"vueify/lib/insert-css":2}],177:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".help_div_container[data-v-5d3720b7]{color:#fff;text-align:justify;position:relative;border-radius:3px;margin:5px 2px;white-space:pre-line;background-color:#384246!important}.help_icon[data-v-5d3720b7]{text-align:center;font-size:.7em;margin-top:-4px;margin-left:-4px;background-color:#222d32;font-weight:700;color:#fff;position:absolute;top:0;left:0;width:15px;height:15px;box-shadow:0 3px 5px rgba(0,0,0,.5);border:1px solid #fff;border-radius:50%}.g3w-help-message-content[data-v-5d3720b7]{max-height:200px;padding:10px;overflow-y:auto}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "helpdiv",
  props: {
    message: {
      type: String,
      required: true
    },
    type: {
      type: String,
      default: 'info' }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"help_div_container"},[_c('span',{staticClass:"help_icon"},[_vm._v("i")]),_vm._v(" "),_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.message),expression:"message"}],staticClass:"g3w-help-message-content"})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-5d3720b7"

},{"vueify/lib/insert-css":2}],178:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".img-responsive[data-v-b7d14a7c]{cursor:pointer}.g3w-image[data-v-b7d14a7c]{padding-left:0!important;min-width:100px;max-width:100%;cursor:pointer}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _GlobalGallery = require('components/GlobalGallery.vue');

var _GlobalGallery2 = _interopRequireDefault(_GlobalGallery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "g3w-image",
  props: {
    value: {}
  },
  data: function data() {
    return {
      galleryId: 'gallery_' + Date.now(),
      active: null
    };
  },

  components: {
    'g3w-images-gallery': _GlobalGallery2.default
  },
  computed: {
    values: function values() {
      return Array.isArray(this.value) ? this.value : [this.value];
    }
  },
  methods: {
    getSrc: function getSrc(value) {
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        return value.photo;
      }
      return value;
    },
    showGallery: function showGallery(index) {
      this.active = index;
      if (_typeof(this.value) === 'object') {
        this.value.active = true;
      }
      $('#' + this.galleryId).modal('show');
    },
    getGalleryImages: function getGalleryImages() {
      var _this = this;

      var images = [];
      this.values.forEach(function (image) {
        images.push({
          src: _this.getSrc(image)
        });
      });
      return images;
    }
  },
  created: function created() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},_vm._l((_vm.values),function(value,index){return _c('div',{staticClass:"g3w-image col-md-6 col-sm-12"},[_c('img',{staticClass:"img-thumbnail",attrs:{"src":_vm.getSrc(value)},on:{"click":function($event){return _vm.showGallery(index)}}})])}),0),_vm._v(" "),_c('g3w-images-gallery',{attrs:{"id":_vm.galleryId,"active":_vm.active,"images":_vm.getGalleryImages()}})],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-b7d14a7c"

},{"components/GlobalGallery.vue":175,"vueify/lib/insert-css":2}],179:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-layer-positions[data-v-026784c2]{display:flex;flex-direction:column;margin:5px 0}.g3w-layer-positions-info-message[data-v-026784c2]{margin-bottom:5px;font-weight:700}.g3w-layer-positions-checkboxes[data-v-026784c2]{display:flex;justify-content:space-between}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: "layerspositions",
  props: {
    position: {
      type: String,
      default: _constant.MAP_SETTINGS.LAYER_POSITIONS.default
    }
  },
  data: function data() {
    return {
      layerpositions: _constant.MAP_SETTINGS.LAYER_POSITIONS.getPositions()
    };
  },

  methods: {
    change: function change() {
      this.$emit('layer-position-change', this.position);
    }
  },
  created: function created() {
    var _this = this;

    this.ids = {
      layerpositions: getUniqueDomId()
    };
    this.layerpositions.forEach(function (layerposition) {
      return _this.ids[layerposition] = getUniqueDomId();
    });
    this.change();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3w-layer-positions",attrs:{"id":_vm.ids.layerpositions}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:("layer_position.message"),expression:"`layer_position.message`"}],staticClass:"g3w-layer-positions-info-message"}),_vm._v(" "),_c('div',{staticClass:"g3w-layer-positions-checkboxes"},_vm._l((_vm.layerpositions),function(layerposition){return _c('div',{key:layerposition},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.position),expression:"position"}],staticClass:"form-control magic-radio",attrs:{"type":"radio","id":_vm.ids[layerposition]},domProps:{"value":layerposition,"checked":_vm.position === layerposition,"checked":_vm._q(_vm.position,layerposition)},on:{"change":[function($event){_vm.position=layerposition},_vm.change]}}),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:(("layer_position." + layerposition)),expression:"`layer_position.${layerposition}`"}],attrs:{"for":_vm.ids[layerposition]}})])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-026784c2"

},{"app/constant":5,"utils":419,"vueify/lib/insert-css":2}],180:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "progressbar",
  props: ['progress']
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return ((null !== _vm.progress && undefined !== _vm.progress))?_c('div',{staticStyle:{"margin":"5px 0 5px 0","width":"100%","backgroundColor":"#FFFFFF","border":"0","borderRadius":"3px"}},[_c('div',{staticClass:"skin-background-color",staticStyle:{"display":"flex","justifyContent":"center","fontWeight":"bold"},style:({ width: (_vm.progress < 10 ? 10 : _vm.progress) })},[_c('span',[_vm._v(_vm._s(_vm.progress))])])]):_vm._e()}
__vue__options__.staticRenderFns = []

},{}],181:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".min-max-label[data-v-a8bbacb8]{align-self:end;font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    debounce = _require.debounce,
    uniqueId = _require.uniqueId;

exports.default = {
  name: "range",
  props: {
    id: {
      default: undefined
    },

    label: {
      type: String,
      default: ''
    },

    min: {
      type: Number,
      default: 0
    },

    max: {
      type: Number,
      default: 10
    },

    step: {
      type: Number,
      default: 1
    },

    labelValue: {},

    value: {
      default: 0
    },

    sync: {
      type: Boolean,
      default: false
    },

    showValue: {
      type: Boolean,
      default: false
    },

    unit: {
      type: String,
      default: ''
    }

  },
  data: function data() {
    return {
      state: { value: this.value }
    };
  },

  methods: {
    changeBackGround: function changeBackGround(value) {
      this.$refs['range-input'].style.backgroundSize = (value ? (value - this.min) * 100 / (this.max - this.min) : 0) + '% 100%';
    },
    setValue: function setValue(value) {
      this.changedValue(value);
    },
    change: function change(evt) {
      var value = 1 * evt.target.value;
      this.changedValue(value);
    },
    emitChangeValue: function emitChangeValue(value) {
      this.state.value = value;
      this.$emit('change-range', {
        id: this.id,
        value: value
      });
    }
  },
  watch: {
    'state.value': function stateValue(value) {
      this.changeBackGround(value);
      this.sync && this.emitChangeValue(value);
    }
  },
  created: function created() {
    var _this = this;

    this.changedValue = this.sync ? function () {
      return _this.$emit('changed');
    } : debounce(function (value) {
      _this.emitChangeValue(value);
    });
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      yield this.$nextTick();
      this.changeBackGround(this.value);
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('section',{staticStyle:{"display":"flex","justify-content":"space-between","font-weight":"bold"}},[_c('section',{staticStyle:{"align-self":"flex-end"}},[_c('span',{staticClass:"min-max-label"},[_vm._v(_vm._s(_vm.min))]),_vm._v(" "),_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.unit))])]),_vm._v(" "),_c('div',{staticStyle:{"display":"flex","flex-direction":"column","margin":"0 3px"}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:(_vm.label),expression:"label"}],staticClass:"skin-color",staticStyle:{"display":"block"},attrs:{"for":_vm.id}}),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],ref:"range-input",attrs:{"type":"range","id":_vm.id,"min":_vm.min,"max":_vm.max,"step":_vm.step},domProps:{"value":(_vm.state.value)},on:{"change":_vm.change,"__r":function($event){return _vm.$set(_vm.state, "value", $event.target.value)}}})]),_vm._v(" "),_c('section',{staticStyle:{"align-self":"flex-end"}},[_c('span',{staticClass:"min-max-label"},[_vm._v(_vm._s(_vm.max))]),_vm._v(" "),_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.unit))])])]),_vm._v(" "),(_vm.showValue)?[_c('span',[_vm._v(_vm._s(_vm.state.value))]),_vm._v(" "),_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.unit))])]:_vm._e()],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-a8bbacb8"

},{"utils":419,"vueify/lib/insert-css":2}],182:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {

  name: "g3w-resize",

  props: {

    show: {
      type: Boolean,
      required: true,
      default: true
    },

    orientation: {
      type: String,
      default: 'h'
    },

    where: {
      type: String,
      default: 'document'
    },

    moveFnc: {
      type: Function,
      default: function _default(evt) {
        return console.log(evt);
      }
    }
  },

  computed: {
    style: function style() {
      return {
        minWidth: '5px',
        backgroundColor: '#dddddd',
        cursor: this.orientation === 'v' ? 'ns-resize' : 'col-resize'
      };
    }
  },
  methods: {
    wrapMoveFnc: function wrapMoveFnc(evt) {
      this.moveFnc(evt);
    },
    start: function start() {
      this.domElementMoveListen.addEventListener('mousemove', this.wrapMoveFnc);
      this.domElementMoveListen.addEventListener('mouseup', this.stop, { once: true });
    },
    stop: function () {
      var _ref = _asyncToGenerator(function* () {
        this.domElementMoveListen.removeEventListener('mousemove', this.wrapMoveFnc);
        yield this.$nextTick();
        _gui2.default.emit('resize');
      });

      function stop() {
        return _ref.apply(this, arguments);
      }

      return stop;
    }()
  },

  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      this.domElementMoveListen;

      this.domElementMoveListen = 'content' === this.where ? document.getElementById('g3w-view-content') : document;
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  destroyed: function destroyed() {
    this.domElementMoveListen = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.show),expression:"show"}],style:(_vm.style),attrs:{"id":_vm.$attrs.id},on:{"mousedown":function($event){$event.stopPropagation();return _vm.start($event)}}})}
__vue__options__.staticRenderFns = []

},{"services/gui":319}],183:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {

  name: 'resize-icon',

  props: {

    type: {
      type: String,
      default: 'h'
    }

  },

  data: function data() {
    return {
      show: "undefined" !== typeof this.type
    };
  },


  watch: {
    type: function () {
      var _ref = _asyncToGenerator(function* () {
        this.show = false;
        yield this.$nextTick();
        this.show = true;
      });

      function type() {
        return _ref.apply(this, arguments);
      }

      return type;
    }()
  },

  methods: {
    toggleFull: function toggleFull() {
      _gui2.default.toggleFullViewContent();
      _gui2.default.emit('resize');
    },
    resetToDefault: function resetToDefault() {
      _gui2.default.resetToDefaultContentPercentage();
      _gui2.default.emit('resize');
    }
  }

};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex","justify-content":"space-between"}},[(_vm.show)?_c('i',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:bottom.create",value:('enlange_reduce'),expression:"'enlange_reduce'",arg:"bottom",modifiers:{"create":true}}],staticClass:"action-button skin-color-dark",class:_vm.g3wtemplate.getFontClass(("resize-" + (this.type))),staticStyle:{"cursor":"pointer","margin-right":"3px"},on:{"click":_vm.toggleFull}}):_vm._e(),_vm._v(" "),_c('i',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('reset_default'),expression:"'reset_default'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button skin-color-dark",class:_vm.g3wtemplate.getFontClass("resize-default"),staticStyle:{"cursor":"pointer"},on:{"click":_vm.resetToDefault}})])}
__vue__options__.staticRenderFns = []

},{"services/gui":319}],184:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".br[data-v-8413fc94]{border-radius:8px}.card[data-v-8413fc94]{width:80%;padding:10px 20px;margin:50px auto}.item[data-v-8413fc94]{height:15px;background:#ccc;margin-top:15px}.item-light[data-v-8413fc94]{background:#ddd}.text80[data-v-8413fc94]{width:80%}.chart-wrapper[data-v-8413fc94]{height:50px;display:flex;align-items:baseline;margin-bottom:20px}.chart-item[data-v-8413fc94]{height:100%;width:15px;background:#ccc;margin-right:10px}.chart-item-80[data-v-8413fc94]{height:80%}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "skeleton",
  mounted: function mounted() {
    this.$nextTick(function () {});
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"card br"},[_c('div',{staticClass:"chart-wrapper"},[_c('div',{staticClass:"chart-item br"}),_vm._v(" "),_c('div',{staticClass:"chart-item chart-item-80 item-light br"}),_vm._v(" "),_c('div',{staticClass:"chart-item br"}),_vm._v(" "),_c('div',{staticClass:"chart-item br chart-item-80"})]),_vm._v(" "),_c('div',{staticClass:"item br text80"}),_vm._v(" "),_c('div',{staticClass:"item item-light br"}),_vm._v(" "),_c('div',{staticClass:"item br"}),_vm._v(" "),_c('div',{staticClass:"item item-light br text80"})])}]
__vue__options__._scopeId = "data-v-8413fc94"

},{"vueify/lib/insert-css":2}],185:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".formquerytabs[data-v-2cbd8ce7]{overflow:hidden!important;display:flex;flex-wrap:wrap}.formquerytabs>li[data-v-2cbd8ce7]{flex:1;display:flex}.formquerytabs>li>a[data-v-2cbd8ce7]{font-weight:700;flex:1}.tab-content[data-v-2cbd8ce7]{//margin-top:10px}.nav-tabs>li>a.mobile[data-v-2cbd8ce7]{padding:5px 10px}.tab_a[data-v-2cbd8ce7]{padding:5px;margin-right:0!important;//border:1px solid #eee;border-bottom:0;margin-bottom:3px;border-radius:3px 3px 0 0}.formquerytabs li a.tab_a.group-title[data-v-2cbd8ce7]{color:inherit!important;font-weight:600;font-size:1em!important;padding:.25em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _GlobalTabsNode = require('components/GlobalTabsNode.vue');

var _GlobalTabsNode2 = _interopRequireDefault(_GlobalTabsNode);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _getFormDataExpressionRequestFromFeature = require('utils/getFormDataExpressionRequestFromFeature');

var _convertFeatureToGEOJSON = require('utils/convertFeatureToGEOJSON');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId,
    noop = _require.noop;

exports.default = {
  name: "tabs",
  props: {
    group: {
      type: Boolean,
      default: false
    },
    contenttype: {
      default: 'query' },
    layerid: {
      required: true
    },
    tabs: {
      required: true
    },
    feature: {
      required: true
    },
    fields: {
      required: true
    },
    addToValidate: {
      type: Function,
      default: noop
    },
    removeToValidate: {
      type: Function,
      default: noop
    },
    changeInput: {
      type: Function,
      default: noop
    },
    showRelationByField: {
      type: Boolean,
      default: true
    },
    handleRelation: {
      type: Function,
      default: function _default() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            relation = _ref.relation,
            layerId = _ref.layerId,
            feature = _ref.feature;

        return _gui2.default.getService('queryresults').showRelation({ relation: relation, layerId: layerId, feature: feature });
      }
    }
  },
  data: function data() {
    return {
      ids: []
    };
  },

  computed: {
    required_fields: function required_fields() {
      return this.contenttype === 'editing' && this.fields.filter(function (field) {
        return field.validate.required;
      }).map(function (field) {
        return field.name;
      });
    },
    show: function show() {
      return this.tabs.reduce(function (accumulator, tab) {
        return accumulator || tab.visible === undefined || !!tab.visible;
      }, false);
    }
  },
  methods: {
    setVisibility: function () {
      var _ref2 = _asyncToGenerator(function* (tab) {
        tab.visible = yield _data2.default.getData('expression:expression_eval', {
          inputs: {
            qgs_layer_id: this.layerid,
            form_data: ('editing' === this.contenttype ? _convertFeatureToGEOJSON.convertFeatureToGEOJSON : _getFormDataExpressionRequestFromFeature.getFormDataExpressionRequestFromFeature)(this.feature || {}),
            expression: tab.visibility_expression.expression,
            formatter: 'query' === this.contenttype ? 1 : 0
          },
          outputs: false
        });
      });

      function setVisibility(_x2) {
        return _ref2.apply(this, arguments);
      }

      return setVisibility;
    }(),
    setEditingRequireTab: function setEditingRequireTab(obj) {
      var _this = this;

      var required = false;
      if (obj.nodes === undefined) {
        required = this.required_fields.indexOf(obj.field_name) !== -1;
      } else {
        required = !!obj.nodes.find(function (node) {
          return _this.setEditingRequireTab(node);
        });
      }
      return required;
    },
    getField: function getField(fieldName) {
      return this.fields.find(function (field) {
        return field.name === fieldName;
      });
    }
  },
  components: {
    Node: _GlobalTabsNode2.default
  },
  created: function () {
    var _ref3 = _asyncToGenerator(function* () {
      var _this2 = this;

      this.unwatch = [];

      var _loop = function _loop(tab) {
        if (tab.visibility_expression) {
          if (tab.visible === undefined) {
            _this2.$set(tab, 'visible', 0);
          }
          _this2.setVisibility(tab);
        }
        if (_this2.contenttype === 'editing') {
          if (tab.required === undefined) {
            tab.required = _this2.setEditingRequireTab(tab);
          }
          if (tab.visibility_expression) {
            tab.visibility_expression.referenced_columns.forEach(function (column) {
              var field = _this2.fields.find(function (field) {
                return field.name === column;
              });
              _this2.unwatch.push(_this2.$watch(function () {
                return field.value;
              }, function () {
                var _ref4 = _asyncToGenerator(function* (value) {
                  _this2.feature.set(field.name, value);
                  _this2.setVisibility(tab);
                });

                return function (_x3) {
                  return _ref4.apply(this, arguments);
                };
              }()));
            });
          }
        }
        _this2.ids.push('tab_' + getUniqueDomId());
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var tab = _step.value;

          _loop(tab);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.root_tabs = [];
      if (!this.group) {
        var nodes = [];
        this.tabs.forEach(function (tab_node) {
          if (tab_node.nodes) {
            nodes.push(tab_node);
          } else {
            if (nodes.length) {
              _this2.root_tabs.push([].concat(nodes));
              nodes.splice(0);
            }_this2.root_tabs.push({ nodes: [tab_node] });
          }
        });
        if (nodes.length) {
          this.root_tabs.push(nodes);
        }
      } else {
        this.root_tabs = [this.tabs];
      }
    });

    function created() {
      return _ref3.apply(this, arguments);
    }

    return created;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.unwatch.forEach(function (unwatch) {
      return unwatch();
    });
    this.unwatch = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.show)?_c('div',{staticClass:"tabs-wrapper"},[_vm._l((_vm.root_tabs),function(root_tab){return [(Array.isArray(root_tab))?[_c('ul',{staticClass:"formquerytabs nav nav-tabs"},[_vm._l((root_tab),function(tab,index){return [(tab.visible === undefined || tab.visible)?_c('li',{class:{active: index === 0}},[_c('a',{staticClass:"tab_a",class:{'mobile': _vm.isMobile(), 'group-title': _vm.group},style:({fontSize: _vm.isMobile() ? '1.0em': ((_vm.group ? '1.1': '1.2') + "em")}),attrs:{"data-toggle":"tab","href":("#" + (_vm.ids[index]))}},[_vm._v("\n               "+_vm._s(tab.name)+" "),(_vm.contenttype === 'editing' && tab.required)?_c('span',{staticStyle:{"padding-left":"3px","font-size":"1.1em"}},[_vm._v("*")]):_vm._e()])]):_vm._e()]})],2),_vm._v(" "),_c('div',{staticClass:"tab-content",class:{editing: _vm.contenttype === 'editing'}},[_vm._l((root_tab),function(tab,index){return [(tab.visible === undefined || tab.visible)?_c('div',{staticClass:"tab-pane fade",class:{'in active': index === 0},attrs:{"id":_vm.ids[index]}},[_c('node',{attrs:{"showRelationByField":_vm.showRelationByField,"handleRelation":_vm.handleRelation,"feature":_vm.feature,"layerid":_vm.layerid,"contenttype":_vm.contenttype,"addToValidate":_vm.addToValidate,"removeToValidate":_vm.removeToValidate,"changeInput":_vm.changeInput,"fields":_vm.fields,"showTitle":false,"node":tab}})],1):_vm._e()]})],2)]:_c('node',{attrs:{"showRelationByField":_vm.showRelationByField,"handleRelation":_vm.handleRelation,"feature":_vm.feature,"layerid":_vm.layerid,"contenttype":_vm.contenttype,"addToValidate":_vm.addToValidate,"removeToValidate":_vm.removeToValidate,"changeInput":_vm.changeInput,"fields":_vm.fields,"showTitle":false,"node":root_tab}})]})],2):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-2cbd8ce7"

},{"components/GlobalTabsNode.vue":186,"services/data":317,"services/gui":319,"utils":419,"utils/convertFeatureToGEOJSON":350,"utils/getFormDataExpressionRequestFromFeature":397,"vueify/lib/insert-css":2}],186:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".tab-node[data-v-9685e2ee]{min-width:0;overflow:hidden}.title[data-v-9685e2ee]{font-weight:700;width:100%;color:#fff;padding:3px;margin-top:5px;margin-bottom:5px;border-radius:2px}.node-row[data-v-9685e2ee]{margin-bottom:0;column-gap:2px;margin-top:0;display:grid;grid-auto-columns:minmax(0,1fr);grid-auto-flow:column}.row.mobile[data-v-9685e2ee]{margin-bottom:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _InputG3W = require('components/InputG3W.vue');

var _InputG3W2 = _interopRequireDefault(_InputG3W);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Fields = require('gui/fields/fields');

exports.default = {
  name: "node",
  props: ['contenttype', 'node', 'fields', 'showTitle', 'addToValidate', 'removeToValidate', 'changeInput', 'layerid', 'feature', 'showRelationByField', 'handleRelation'],
  components: _extends({
    G3wInput: _InputG3W2.default
  }, Fields),
  data: function data() {
    return {
      context: this.contenttype,
      editing_required: false
    };
  },

  computed: {
    filterNodes: function filterNodes() {
      var _this = this;

      var filterNodes = this.node.nodes && this.node.nodes.filter(function (node) {
        if (_this.getNodeType(node) === 'group') {
          return true;
        } else if (!node.nodes && node.name && _this.getNodeType(node) != 'group') {
          node.relation = true;
          return true;
        } else {
          return !!_this.fields.find(function (field) {
            var field_name = node.field_name ? node.field_name.replace(/ /g, "_") : node.field_name;
            return field.name === field_name || node.relation;
          });
        }
      });
      return filterNodes || [];
    },
    nodesLength: function nodesLength() {
      return this.filterNodes.length;
    },
    rows: function rows() {
      var rowCount = 1;
      if (this.nodesLength === 0) {
        rowCount = 0;
      } else if (this.columnNumber <= this.nodesLength) {
        var rest = this.nodesLength % this.columnNumber;
        rowCount = Math.floor(this.nodesLength / this.columnNumber) + rest;
      }
      return rowCount;
    },
    columnNumber: function columnNumber() {
      var columnCount = parseInt(this.node.columncount) ? parseInt(this.node.columncount) : 1;
      return columnCount > this.nodesLength ? this.nodesLength : columnCount;
    },
    showGroupTile: function showGroupTile() {
      return this.showTitle && this.node.showlabel && this.node.groupbox;
    }
  },
  methods: {
    loadingRelation: function loadingRelation(relation) {
      var layer = _projects2.default.getCurrentProject().getLayerById(this.layerid);

      return layer.getRelationById(relation.name) || { state: { loading: false } }.state;
    },
    isRelationDisabled: function isRelationDisabled(relation) {
      return this.getRelationName(relation.name) === undefined || this.contenttype === 'editing' && this.isRelationChildLayerNotEditable(relation);
    },
    getRelationName: function getRelationName(relationId) {
      var relation = _projects2.default.getCurrentProject().getRelationById(relationId);
      return relation && relation.name;
    },
    isRelationChildLayerNotEditable: function isRelationChildLayerNotEditable(relation) {
      var nmRelationId = relation.nmRelationId,
          name = relation.name;

      var currentProject = _projects2.default.getCurrentProject();
      var projectRelation = currentProject.getRelationById(name);
      var relationLayerId = projectRelation.referencingLayer;
      var relationLayer = currentProject.getLayerById(relationLayerId);

      return !relationLayer.isEditable();
    },
    getNodes: function getNodes(row) {
      var startIndex = (row - 1) * this.columnNumber;
      return this.filterNodes.slice(startIndex, this.columnNumber + startIndex);
    },
    getNode: function getNode(row, column) {
      return this.getNodes(row)[column - 1];
    },
    getField: function getField(node) {
      if (node.relation) return node;
      return this.fields.find(function (field) {
        var field_name = node.field_name ? node.field_name.replace(/ /g, "_") : node.field_name;
        return field.name === field_name;
      });
    },
    getNodeType: function getNodeType(node) {
      var type = node.groupbox || node.nodes ? 'group' : node.relation ? 'relation' : 'field';
      if (type === 'field' && (node.alias === undefined || node.alias === '')) {
        node.alias = node.field_name;
      }
      return type;
    },
    getComponent: function getComponent(field) {
      if (field.relation) {
        return;
      } else if (field.query) {
        return field.input.type;
      } else {
        return 'g3w-input';
      }
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"tab-node group"},[(_vm.showGroupTile)?_c('h5',{staticClass:"title group-title",class:{'mobile': _vm.isMobile()},style:({fontSize: _vm.isMobile() ? '1em' : '1.1em'})},[_vm._v(_vm._s(_vm.node.name)+"\n  ")]):_vm._e(),_vm._v(" "),_vm._l((_vm.rows),function(row){return _c('div',{staticClass:"node-row",class:{'mobile': _vm.isMobile()}},[_vm._l((_vm.columnNumber),function(column){return [(_vm.getNode(row, column))?[(_vm.getNodeType(_vm.getNode(row, column)) === 'field')?_c(_vm.getComponent(_vm.getField(_vm.getNode(row, column))),{tag:"component",staticStyle:{"padding":"5px 3px 5px 3px"},attrs:{"state":_vm.getField(_vm.getNode(row, column)),"changeInput":_vm.changeInput,"addToValidate":_vm.addToValidate,"removeToValidate":_vm.removeToValidate,"feature":_vm.feature},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate,"removeinput":_vm.removeToValidate}}):[(_vm.getNodeType(_vm.getNode(row, column)) === 'group')?_c('tabs',_vm._b({staticClass:"sub-group",staticStyle:{"width":"100% !important"},attrs:{"group":true,"tabs":[_vm.getNode(row, column)]}},'tabs',_vm.$props,false)):[(_vm.showRelationByField)?_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.isRelationDisabled(_vm.getNode(row, column)) || _vm.loadingRelation(_vm.getNode(row, column)).loading),expression:"isRelationDisabled(getNode(row, column)) || loadingRelation(getNode(row, column)).loading"}],style:({cursor: _vm.showRelationByField && 'pointer'}),on:{"click":function($event){$event.stopPropagation();_vm.handleRelation({relation: _vm.getNode(row, column), feature:_vm.feature, layerId: _vm.layerid})}}},[_c('bar-loader',{attrs:{"loading":_vm.loadingRelation(_vm.getNode(row, column)).loading}}),_vm._v(" "),_c('div',{staticStyle:{"display":"flex","align-items":"center"}},[_c('div',{staticClass:"query_relation_field"},[_c('i',{class:_vm.g3wtemplate.font[("" + (_vm.context === 'query' ? 'relation' : 'pencil'))]})]),_vm._v(" "),_c('span',{staticClass:"query_relation_field_message g3w-long-text"},[_c('span',{staticStyle:{"text-transform":"uppercase"}},[_vm._v(" "+_vm._s(_vm.getRelationName(_vm.getNode(row, column).name)))])])])],1):_vm._e()]]]:_vm._e()]})],2)})],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-9685e2ee"

},{"components/InputG3W.vue":193,"gui/fields/fields":79,"store/projects":335,"vueify/lib/insert-css":2}],187:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'header-item',

  props: ['state'],
  methods: {
    showCustomModal: function showCustomModal(id) {
      this.$emit('show-custom-modal-content', id);
    }
  },
  created: function created() {
    this.state.type = this.state.type || 'link';
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{staticClass:"customheaderlink dropdown user user-menu",attrs:{"title":_vm.state.title}},[(_vm.state.type === 'link')?_c('a',{staticClass:"dropdown-toggle",class:{ imagelink : !!_vm.state.img},attrs:{"href":_vm.state.url,"target":_vm.state.target}},[(_vm.state.img)?_c('img',{staticStyle:{"max-height":"20px"},attrs:{"src":_vm.state.img}}):_c('span',[(_vm.state.i18n)?_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.state.title),expression:"state.title"}]}):_c('span',[_vm._v(_vm._s(_vm.state.title))])])]):(_vm.state.type === 'modal')?_c('a',{staticClass:"dropdown-toggle",staticStyle:{"cursor":"pointer"},attrs:{"data-toggle":"modal","data-target":"#custom_modal"},on:{"click":function($event){return _vm.showCustomModal(_vm.state.id)}}},[_c('span',[_vm._v(_vm._s(_vm.state.title))])]):_vm._e()])}
__vue__options__.staticRenderFns = []

},{}],188:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".control-label[data-v-cb533ff6]{text-align:left!important;padding-top:0!important;margin-bottom:3px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _mixins = require('mixins');

exports.default = _extends({
  name: "InputBase",
  props: ['state']
}, _mixins.baseInputMixin);
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.state.visible)?_c('div',{staticClass:"form-group"},[_vm._t("label",[_c('label',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"}],staticClass:"col-sm-12 control-label",attrs:{"for":_vm.state.name}},[_vm._v(_vm._s(_vm.state.label)+"\n      "),(_vm.state.validate && _vm.state.validate.required)?_c('span',[_vm._v("*")]):_vm._e(),_vm._v(" "),(_vm.showhelpicon)?_c('i',{staticClass:"skin-color",class:_vm.g3wtemplate.font['info'],staticStyle:{"margin-left":"3px","cursor":"pointer"},on:{"click":_vm.showHideHelp}}):_vm._e(),_vm._v(" "),_vm._t("label-action")],2)]),_vm._v(" "),_c('div',{staticClass:"col-sm-12"},[_vm._t("loading",[(_vm.loadingState === 'loading')?_c('div',{staticStyle:{"position":"relative","width":"100%"},attrs:{"slot":"loading"},slot:"loading"},[_c('bar-loader',{attrs:{"loading":"true"}})],1):_vm._e()]),_vm._v(" "),_vm._t("body"),_vm._v(" "),_vm._t("message",[(_vm.notvalid)?_c('p',{staticClass:"g3w-long-text error-input-message",staticStyle:{"margin":"0"},domProps:{"innerHTML":_vm._s(_vm.state.validate.message)}}):(_vm.state.info)?_c('p',{staticStyle:{"margin":"0"},domProps:{"innerHTML":_vm._s(_vm.state.info)}}):_vm._e()]),_vm._v(" "),(_vm.state.help && this.state.help.visible)?_c('div',{staticClass:"g3w_input_help skin-background-color extralighten",domProps:{"innerHTML":_vm._s(_vm.state.help.message)}}):_vm._e()],2)],2):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-cb533ff6"

},{"mixins":302,"vueify/lib/insert-css":2}],189:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mixins = require('mixins');

var Input = require('gui/inputs/input');

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: 'input-checkbox',

  mixins: [Input, _mixins.widgetMixins],
  data: function data() {
    return {
      value: null,
      label: null,
      id: getUniqueDomId() };
  },

  methods: {
    setLabel: function setLabel() {
      this.label = this.service.convertCheckedToValue(this.value);
    },
    setValue: function setValue() {
      this.value = this.service.convertValueToChecked();
    },
    changeCheckBox: function changeCheckBox() {
      this.setLabel();
      this.widgetChanged();
    },
    stateValueChanged: function stateValueChanged() {
      this.setValue();
      this.setLabel();
    }
  },
  created: function created() {
    this.value = this.state.forceNull ? this.value : this.service.convertValueToChecked();
  },
  mounted: function mounted() {
    if (!this.state.forceNull) this.setLabel();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"}],staticStyle:{"height":"20px","margin-top":"8px"},attrs:{"slot":"body"},slot:"body"},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.value),expression:"value"}],staticClass:"magic-checkbox",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%"},attrs:{"tabIndex":_vm.tabIndex,"type":"checkbox","id":_vm.id},domProps:{"checked":Array.isArray(_vm.value)?_vm._i(_vm.value,null)>-1:(_vm.value)},on:{"change":[function($event){var $$a=_vm.value,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.value=$$a.concat([$$v]))}else{$$i>-1&&(_vm.value=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.value=$$c}},_vm.changeCheckBox]}}),_vm._v(" "),_c('label',{attrs:{"for":_vm.id}},[_vm._v(_vm._s(_vm.label))])])])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"mixins":302,"utils":419}],190:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: 'input-color',

  mixins: [Input]
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"cursor":"pointer"},attrs:{"slot":"body","placeholder":_vm.state.default,"type":"color","tabIndex":_vm.tabIndex,"field":_vm.state.name,"id":_vm.state.name},domProps:{"value":(_vm.state.value)},on:{"change":_vm.change,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)}},slot:"body"})])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90}],191:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Input = require('gui/inputs/input');

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: 'input-datetime-picker',

  mixins: [Input, _mixins.resizeMixin],

  data: function data() {
    var uniqueValue = getUniqueDomId();
    return {
      widget_container: {
        top: 0,
        left: 0
      },
      iddatetimepicker: 'datetimepicker_' + uniqueValue,
      idinputdatetimepiker: 'inputdatetimepicker_' + uniqueValue
    };
  },


  methods: {
    resize: function resize() {
      var domeDataPicker = $('#' + this.iddatetimepicker);
      if (domeDataPicker && domeDataPicker.data("DateTimePicker")) {
        domeDataPicker.data("DateTimePicker").hide();
      }
    },
    timeOnly: function timeOnly() {
      return !this.state.input.options.formats[0].date;
    },
    onDatePickerChange: function onDatePickerChange() {
      var newDate = $('#' + this.idinputdatetimepiker).val();
      this.state.value = _.isEmpty(_.trim(newDate)) ? null : moment(newDate, this.datetimedisplayformat).format(this.datetimefieldformat);
      this.change();
    },
    onDatePickerShow: function onDatePickerShow(evt) {
      var _this = this;

      this.widget_container.top = 0;
      this.widget_container.left = 0;

      setTimeout(function () {
        var container = _this.$refs.datetimepicker_body.getBoundingClientRect();
        var modal = _this.$refs.datimewidget_container.querySelector('.bootstrap-datetimepicker-widget').getBoundingClientRect();
        _this.widget_container.top = container.top + (container.top < modal.height ? container.height + Math.abs(container.top - modal.height) + 20 : 0);
        _this.widget_container.left = container.left - Math.max(container.width, modal.width);
        _this.$emit('datetimepickershow');
      });
    },
    onDatePickerHide: function onDatePickerHide(evt) {
      this.$emit('datetimepickershow');
    }
  },
  watch: {
    'state.value': function () {
      var _ref = _asyncToGenerator(function* (value) {
        if (value !== $('#' + this.idinputdatetimepiker).val()) {
          var date = null !== value ? moment(value, this.datetimefieldformat).format(this.datetimedisplayformat) : value;
          yield this.$nextTick();
          $('#' + this.idinputdatetimepiker).val(date);
        }
      });

      function stateValue(_x) {
        return _ref.apply(this, arguments);
      }

      return stateValue;
    }()
  },

  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      var _this2 = this;

      var _state$input$options = this.state.input.options,
          _state$input$options$ = _state$input$options.formats,
          formats = _state$input$options$ === undefined ? [] : _state$input$options$,
          _state$input$options$2 = _state$input$options.layout,
          layout = _state$input$options$2 === undefined ? {
        vertical: "top",
        horizontal: "left"
      } : _state$input$options$2;
      var _formats$ = formats[0],
          minDate = _formats$.minDate,
          maxDate = _formats$.maxDate,
          fieldformat = _formats$.fieldformat,
          enabledDates = _formats$.enabledDates,
          disabledDates = _formats$.disabledDates,
          displayformat = _formats$.displayformat,
          useCurrent = _formats$.useCurrent;


      yield this.$nextTick();

      this.datetimedisplayformat = this.service.convertQGISDateTimeFormatToMoment(displayformat);
      this.datetimefieldformat = this.service.convertQGISDateTimeFormatToMoment(fieldformat);

      this.service.setValidatorOptions({ fielddatetimeformat: this.datetimefieldformat });

      var date = moment(this.state.value, this.datetimefieldformat, true).isValid() ? moment(this.state.value, this.datetimefieldformat).toDate() : null;

      $('#' + this.iddatetimepicker).datetimepicker({
        defaultDate: date,
        format: this.datetimedisplayformat,
        ignoreReadonly: true,
        allowInputToggle: true,
        enabledDates: enabledDates,
        disabledDates: disabledDates,
        useCurrent: useCurrent,
        toolbarPlacement: 'top',
        minDate: minDate,
        maxDate: maxDate,
        widgetParent: $(this.$refs.datimewidget_container),
        widgetPositioning: {
          vertical: layout.vertical || 'top',
          horizontal: layout.horizontal || 'left'
        },
        showClose: true,
        locale: this.service.getLocale()
      });

      $('#' + this.iddatetimepicker).on("dp.change", this.onDatePickerChange);
      $('#' + this.iddatetimepicker).on("dp.show", this.onDatePickerShow);
      $('#' + this.iddatetimepicker).on("dp.hide", this.onDatePickerHide);

      if (_applicationState2.default.ismobile) {
        setTimeout(function () {
          $('#' + _this2.idinputdatetimepiker).blur();
        });
      }
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('div',{ref:"datetimepicker_body",attrs:{"slot":"body"},slot:"body"},[_c('div',{ref:"datimewidget_container",style:({
        top: _vm.widget_container.top + 'px',
        left: _vm.widget_container.left + 'px',
        position: 'fixed',
        zIndex: 10000,
      })}),_vm._v(" "),_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"}],staticClass:"input-group date",attrs:{"id":_vm.iddatetimepicker}},[_c('input',{staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},attrs:{"type":"text","id":_vm.idinputdatetimepiker,"tabIndex":_vm.tabIndex,"readonly":!_vm.editable || _vm.isMobile() ? 'readonly' : null}}),_vm._v(" "),_c('span',{staticClass:"input-group-addon caret"},[_c('span',{class:[ _vm.g3wtemplate.getFontClass(_vm.timeOnly() ? 'time' : 'calendar') ]})])])])])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"mixins":302,"store/application-state":328,"utils":419}],192:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: 'input-float',

  mixins: [Input]
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%"},attrs:{"slot":"body","tabIndex":_vm.tabIndex,"type":"number","step":_vm.state.step || 1,"placeholder":_vm.state.default},domProps:{"value":(_vm.state.value)},on:{"change":_vm.change,"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)},_vm.change]},slot:"body"})])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90}],193:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Inputs = require('gui/inputs/inputs');

exports.default = {
  name: "g3w-input",
  props: {
    state: {
      required: true
    },
    addToValidate: {
      type: Function,
      required: true
    },
    removeToValidate: {
      type: Function,
      required: true
    },
    changeInput: {
      type: Function,
      required: true
    }
  },
  components: _extends({}, Inputs),
  computed: {
    type: function type() {
      if (this.state.type !== 'child') return this.state.input.type ? this.state.input.type + '_input' : this.state.type + '_input';
    }
  },
  created: function created() {
    if (this.state.type !== 'child' && !this.state.input.options) this.state.input.options = {};
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.state.visible)?_c('div',[(_vm.state.type !== 'child')?_c('div',[_c(_vm.type,{tag:"component",attrs:{"changeInput":_vm.changeInput,"addToValidate":_vm.addToValidate,"removeToValidate":_vm.removeToValidate,"state":_vm.state},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate,"removeinput":_vm.removeToValidate}}),_vm._v(" "),_c('span',{staticClass:"divider"})],1):_c('div',{staticClass:"skin-border-color field-child",staticStyle:{"border-top":"2px solid"}},[_c('h4',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.state.label))]),_vm._v(" "),_c('div',[_vm._v(" "+_vm._s(_vm.state.description)+" ")]),_vm._v(" "),_vm._l((_vm.state.fields),function(field){return _c('g3w-input',{key:field.name,attrs:{"state":field,"changeInput":_vm.changeInput,"addToValidate":_vm.addToValidate,"removeToValidate":_vm.removeToValidate},on:{"changeinput":_vm.changeInput,"addinput":_vm.addToValidate,"removeinput":_vm.removeToValidate}})})],2)]):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0fece3a7"

},{"gui/inputs/inputs":91}],194:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#g3w-for-inputs-required-inputs-message[data-v-06573254]{margin-bottom:5px;font-weight:700;text-align:center;display:flex;align-items:center;justify-content:center}.box-body[data-v-06573254]{padding:5px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _InputG3W = require("components/InputG3W.vue");

var _InputG3W2 = _interopRequireDefault(_InputG3W);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "g3w-form-inputs",
  props: {
    state: {
      type: Object,
      default: {
        fields: []
      }
    },
    addToValidate: {
      type: Function
    },
    changeInput: {
      type: Function
    },
    show_required_field_message: {
      type: Boolean,
      default: false
    }

  },
  components: {
    G3wInput: _InputG3W2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',{staticClass:"form-horizontal g3w-form"},[_c('div',{staticClass:"box-primary"},[_c('div',{staticClass:"box-body"},[_vm._l((_vm.state.fields),function(field){return [_c('g3w-input',{attrs:{"state":field,"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput},on:{"addToValidate":_vm.addToValidate,"changeInput":_vm.changeInput}})]})],2),_vm._v(" "),(_vm.show_required_field_message)?_c('div',{attrs:{"id":"g3w-for-inputs-required-inputs-message"}},[_c('span',{staticClass:"hide-cursor-caret-color"},[_vm._v("*")]),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.form.footer.required_fields'),expression:"'sdk.form.footer.required_fields'"}],staticClass:"hide-cursor-caret-color"})]):_vm._e()])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-06573254"

},{"components/InputG3W.vue":193,"vueify/lib/insert-css":2}],195:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: 'input-integer',

  mixins: [Input]
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%"},attrs:{"slot":"body","placeholder":_vm.state.default,"tabIndex":_vm.tabIndex,"type":"number"},domProps:{"value":(_vm.state.value)},on:{"change":_vm.change,"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)},_vm.change]},slot:"body"})])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90}],196:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

var Input = require('gui/inputs/input');

exports.default = {
  name: 'input-lonlat',

  mixins: [Input],
  data: function data() {
    return {
      lonId: getUniqueDomId(),
      latId: getUniqueDomId(),
      coordinatebutton: {
        active: false
      }
    };
  },

  computed: {
    getCoordinateActive: function getCoordinateActive() {
      return this.service.state.getCoordinateActive;
    }
  },
  methods: {
    toggleGetCoordinate: function toggleGetCoordinate() {
      this.service.toggleGetCoordinate();
    },
    changeLonLat: function changeLonLat() {
      this.change();
      this.setValue();
    },
    setValue: function setValue() {
      this.state.value = [[1 * this.state.values.lon, 1 * this.state.values.lat]];
    }
  },
  created: function created() {
    this.state.values = this.state.values || { lon: 0, lat: 0 };
    this.setValue();
    this.service.setCoordinateButtonReactiveObject(this.coordinatebutton);
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      yield this.$nextTick();
      this.$nextTick(function () {
        $(_this.$refs['g3w-input-lat-lon']).tooltip({
          trigger: 'hover'
        });
      });
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),
  destroyed: function destroyed() {
    this.service.clear();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"position":"relative"}},[_c('div',{staticStyle:{"display":"flex","justify-content":"flex-end","height":"35px","margin-right":"12px","margin-bottom":"5px"}},[_c('button',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.form.inputs.tooltips.lonlat'),expression:"'sdk.form.inputs.tooltips.lonlat'"}],ref:"g3w-input-lat-lon",staticClass:"action skin-tooltip-left skin-color skin-border-color",class:_vm.g3wtemplate.font['crosshairs'],staticStyle:{"border-radius":"5px","font-weight":"bold","font-size":"20px","cursor":"pointer"},style:({border: _vm.coordinatebutton.active ? '2px solid' : 0}),attrs:{"data-placement":"left","data-container":"body","data-toggle":"tooltip"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.toggleGetCoordinate($event)}}})]),_vm._v(" "),_c('baseinput',{attrs:{"state":_vm.state}},[_c('label',{staticClass:"col-sm-4 control-label",attrs:{"slot":"label","for":_vm.lonId},slot:"label"},[_vm._v(_vm._s(_vm.state.labels.lon)+"\n      "),(_vm.state.validate && _vm.state.validate.required)?_c('span',[_vm._v("*")]):_vm._e()]),_vm._v(" "),_c('div',{attrs:{"slot":"body"},slot:"body"},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.values.lon),expression:"state.values.lon"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%","margin-bottom":"5px"},attrs:{"id":_vm.lonId,"tabIndex":_vm.tabIndex,"type":"number","min":"-180","max":"180","placeholder":"Lon"},domProps:{"value":(_vm.state.values.lon)},on:{"change":_vm.changeLonLat,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.state.values, "lon", $event.target.value)}}})])]),_vm._v(" "),_c('baseinput',{attrs:{"state":_vm.state}},[_c('label',{staticClass:"col-sm-4 control-label",attrs:{"slot":"label","for":_vm.latId},slot:"label"},[_vm._v(_vm._s(_vm.state.labels.lat)+"\n      "),(_vm.state.validate && _vm.state.validate.required)?_c('span',[_vm._v("*")]):_vm._e()]),_vm._v(" "),_c('div',{attrs:{"slot":"body"},slot:"body"},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.values.lat),expression:"state.values.lat"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%","margin-bottom":"5px"},attrs:{"id":_vm.latId,"tabIndex":_vm.tabIndex,"type":"number","min":"-90","max":"90","placeholder":"Lon"},domProps:{"value":(_vm.state.values.lat)},on:{"change":_vm.changeLonLat,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.state.values, "lat", $event.target.value)}}})])])],1)}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"utils":419}],197:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InputMixins = require('gui/inputs/input');

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var _require3 = require('gui/fields/fields'),
    MediaField = _require3.media_field;

exports.default = {
  name: 'input-media',

  mixins: [InputMixins],
  components: {
    'g3w-media': MediaField
  },
  data: function data() {
    return {
      data: {
        value: null,
        mime_type: null
      },
      mediaid: 'media_' + getUniqueDomId(),
      loading: false
    };
  },

  methods: {
    onClick: function onClick(e) {
      document.getElementById(this.mediaid).click();
    },
    createImage: function createImage(file, field) {
      var reader = new FileReader();
      reader.onload = function (e) {
        field.value = e.target.result;
      };
      reader.readAsDataURL(file);
    },
    checkFileSrc: function checkFileSrc(value) {
      if (_.isNil(value)) {
        value = '';
      }
      return value;
    },
    clearMedia: function clearMedia() {
      this.data.value = this.data.mime_type = this.state.value = null;
      this.change();
    }
  },
  created: function created() {
    if (this.state.value) {
      this.data.value = this.state.value.value;
      this.data.mime_type = this.state.value.mime_type;
    }
  },
  mounted: function mounted() {
    var _this = this;

    var fieldName = this.state.name;
    var formData = {
      name: fieldName,
      csrfmiddlewaretoken: this.$cookie.get('csrftoken')
    };
    this.$nextTick(function () {
      $('#' + _this.mediaid).fileupload({
        dataType: 'json',
        formData: formData,
        start: function start() {
          _this.loading = true;
        },
        done: function done(e, data) {
          var response = data.result[fieldName];
          if (response) {
            _this.data.value = response.value;
            _this.data.mime_type = response.mime_type;
            _this.state.value = _this.data;
            _this.change();
          }
        },
        fail: function fail() {
          _gui2.default.notify.error(t("info.server_error"));
        },
        always: function always() {
          _this.loading = false;
        }
      });
    });
  },
  beforeDestroy: function beforeDestroy() {
    $('#' + this.mediaid).fileupload('destroy');
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"}],attrs:{"slot":"body"},slot:"body"},[_c('div',{staticClass:"g3w_input_button skin-border-color",staticStyle:{"border-style":"solid","border-width":"2px","border-radius":"4px","width":"100%","cursor":"pointer","text-align":"center"},on:{"click":_vm.onClick}},[_c('i',{staticClass:"fa-2x skin-color",class:_vm.g3wtemplate.getFontClass('file-upload'),staticStyle:{"padding":"5px"}},[_c('input',{class:{'input-error-validation' : _vm.notvalid},staticStyle:{"display":"none"},attrs:{"id":_vm.mediaid,"name":_vm.state.name,"tabIndex":_vm.tabIndex,"data-url":_vm.state.input.options.uploadurl,"type":"file"}})])]),_vm._v(" "),_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('g3w-media',{attrs:{"state":_vm.data}},[_c('div',{staticClass:"clearmedia",on:{"click":function($event){return _vm.clearMedia()}}},[_c('i',{staticClass:"g3w-icon",class:_vm.g3wtemplate.font['trash-o']})])])],1)])}
__vue__options__.staticRenderFns = []

},{"core/i18n/i18n.service":9,"gui/fields/fields":79,"gui/inputs/input":90,"services/gui":319,"utils":419}],198:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');
var Service = require('gui/inputs/picklayer/service');

exports.default = {
  name: 'input-picklayer',

  mixins: [Input],
  methods: {
    pickLayer: function pickLayer() {
      var _this = this;

      this.pickservice.pick().then(function (value) {
        return _this.state.value = value;
      }).catch(function () {});
    },
    unpick: function unpick() {
      var _this2 = this;

      setTimeout(function () {
        return !_this2.pickservice.isPicked() && _this2.pickservice.unpick();
      }, 200);
    }
  },
  created: function created() {
    this.pickservice = new Service(this.state.input.options);
  },
  beforeDestroy: function beforeDestroy() {
    this.pickservice.clear();
    this.pickservice = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('div',{attrs:{"slot":"body"},slot:"body"},[_c('span',{staticClass:"skin-color",class:_vm.g3wtemplate.font['crosshairs'],staticStyle:{"left":"0","top":"7px","position":"absolute"}}),_vm._v(" "),_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%"},style:({cursor: _vm.editable ? 'pointer': null}),attrs:{"readonly":"readonly","tabIndex":_vm.tabIndex},domProps:{"value":(_vm.state.value)},on:{"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)},_vm.change],"click":_vm.pickLayer,"blur":_vm.unpick}})])])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"gui/inputs/picklayer/service":98}],199:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: 'input-radio',

  mixins: [Input],
  data: function data() {
    return {
      ids: [getUniqueDomId(), getUniqueDomId()],
      name: 'name_' + getUniqueDomId(),
      radio_value: this.state.value
    };
  },

  watch: {
    'radio_value': function radio_value() {
      this.state.value = this.radio_value;
      this.change();
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('div',{attrs:{"slot":"body"},slot:"body"},_vm._l((_vm.state.input.options.values),function(value,index){return _c('span',{key:value.key},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.radio_value),expression:"radio_value"}],staticClass:"magic-radio",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%"},attrs:{"id":_vm.ids[index],"name":_vm.name,"tabIndex":_vm.tabIndex,"type":"radio"},domProps:{"value":value.value,"checked":_vm._q(_vm.radio_value,value.value)},on:{"change":function($event){_vm.radio_value=value.value}}}),_vm._v(" "),_c('label',{attrs:{"for":_vm.ids[index]}},[_vm._v(_vm._s(value.key))])])}),0)])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"utils":419}],200:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: 'input-range',

  mixins: [Input],
  data: function data() {
    var _state$input$options$ = this.state.input.options.values[0],
        min = _state$input$options$.min,
        max = _state$input$options$.max,
        step = _state$input$options$.Step;

    return {
      min: min,
      max: max,
      step: step
    };
  },

  methods: {
    checkValue: function checkValue() {
      var isEmpty = _.isEmpty(_.trim(this.state.value));

      if (isEmpty && !this.state.validate.required) {
        this.state.value = this.state.input.options.values[0].default;
      }

      this.state.validate.valid = !this.state.validate.required;

      if (!isEmpty) {
        this.state.validate.valid = this.service.getValidator().validate(this.state.value);
      }

      this.change();
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%","padding-right":"5px"},attrs:{"slot":"body","tabIndex":_vm.tabIndex,"type":"number","step":_vm.step},domProps:{"value":(_vm.state.value)},on:{"keydown":[function($event){if(!$event.type.indexOf('key')&&$event.keyCode!==69){ return null; }$event.preventDefault();},function($event){if(!$event.type.indexOf('key')&&$event.keyCode!==13){ return null; }$event.stopPropagation();}],"change":_vm.checkValue,"blur":_vm.checkValue,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)}},slot:"body"})])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90}],201:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-input-pick-layer[data-v-6b3d29b0]{cursor:pointer;position:relative;top:2px;font-size:1.2em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    createSingleFieldParameter = _require.createSingleFieldParameter;

var PickLayerInputService = require('gui/inputs/picklayer/service');
var Layer = require('core/layers/layer');
var InputMixin = require('gui/inputs/input');

var G3W_SELECT2_NULL_VALUE = null;exports.default = {
  name: 'input-select',

  mixins: [InputMixin, _mixins.selectMixin, _mixins.select2Mixin],
  data: function data() {
    return {
      showPickLayer: false,
      picked: false,
      filterFields: [],
      isFilterFieldsReady: false };
  },

  computed: {
    showNullOption: function showNullOption() {
      return this.state.nullOption === undefined || this.state.nullOption === true;
    },
    select2NullValue: function select2NullValue() {
      return this.showNullOption && G3W_SELECT2_NULL_VALUE;
    }
  },
  methods: {
    pickLayerValue: function () {
      var _ref = _asyncToGenerator(function* () {
        try {
          if (this.picked) {
            this.pickLayerInputService.unpick();
            this.picked = false;
          } else {
            this.picked = true;
            var values = yield this.pickLayerInputService.pick();
            var field = this.state.input.options.value;

            var value = values[field];
            this.select2.val(value).trigger('change');
            this.changeSelect(value);
            _gui2.default.showUserMessage({
              type: 'success',
              autoclose: true
            });
            this.picked = false;
          }
        } catch (err) {
          _gui2.default.showUserMessage({
            type: "warning",
            message: 'sdk.form.inputs.messages.errors.picklayer',
            autoclose: true
          });
          this.picked = false;
        }
      });

      function pickLayerValue() {
        return _ref.apply(this, arguments);
      }

      return pickLayerValue;
    }(),
    setAndListenSelect2Change: function setAndListenSelect2Change() {
      var _this = this;

      this.select2.on('select2:select', function (event) {
        var value = event.params.data.$value ? event.params.data.$value : event.params.data.id;
        value = _this.showNullOption ? value === G3W_SELECT2_NULL_VALUE ? null : value.toString() : value.toString();

        _this.changeSelect(value);
      });
    }
  },

  watch: {
    'state.input.options.values': function () {
      var _ref2 = _asyncToGenerator(function* (values) {
        var _this2 = this;

        yield this.$nextTick();
        var changed = false;
        if (!this.autocomplete) {
          var value = void 0;
          if (values.length === 0) {
            value = G3W_SELECT2_NULL_VALUE;
          } else {
            var findvalue = values.find(function (keyvalue) {
              return keyvalue.value == _this2.state.value;
            });
            value = undefined === findvalue ? G3W_SELECT2_NULL_VALUE : findvalue.value;
          }

          changed = value != this.state.value;
          this.state.value = value;
          this.setValue();
        }
        if (changed) {
          this.change();
        }
      });

      function stateInputOptionsValues(_x) {
        return _ref2.apply(this, arguments);
      }

      return stateInputOptionsValues;
    }()
  },

  created: function () {
    var _ref3 = _asyncToGenerator(function* () {
      var _this3 = this;

      this.unwatch;
      this.filterFieldsUnwatches;

      var _state$input$options = this.state.input.options,
          _state$input$options$ = _state$input$options.filter_fields,
          filter_fields = _state$input$options$ === undefined ? [] : _state$input$options$,
          relation_reference = _state$input$options.relation_reference,
          relation_id = _state$input$options.relation_id,
          _state$input$options$2 = _state$input$options.chain_filters,
          chain_filters = _state$input$options$2 === undefined ? false : _state$input$options$2;

      if (relation_reference && Array.isArray(filter_fields) && filter_fields.length > 0) {
        this.setLoading(true);

        this.isFilterFieldsReady = false;

        var _ProjectsRegistry$get = _projects2.default.getCurrentProject().getRelationById(relation_id),
            referencedLayer = _ProjectsRegistry$get.referencedLayer,
            referencingLayer = _ProjectsRegistry$get.referencingLayer,
            _ProjectsRegistry$get2 = _ProjectsRegistry$get.fieldRef,
            referencingField = _ProjectsRegistry$get2.referencingField,
            referencedField = _ProjectsRegistry$get2.referencedField;

        var layer = _catalogLayers2.default.getLayerById(referencingLayer);

        var relationLayer = _catalogLayers2.default.getLayerById(referencedLayer);

        var relationLayerFields = relationLayer.getFields();

        if (null !== this.state.value) {
          try {
            var _ref4 = yield relationLayer.getFilterData({
              formatter: 0,
              field: createSingleFieldParameter({
                field: referencedField[0],
                value: this.state.value })
            }),
                _ref4$data = _ref4.data,
                data = _ref4$data === undefined ? [] : _ref4$data;

            this.state.input.options.values = ((yield layer.getFilterData({
              fformatter: referencingField[0],
              order: referencingField[0],

              ffield: filter_fields.map(function (f, i) {
                var value = undefined === data[0].features[0].get(f) ? '' + G3W_SELECT2_NULL_VALUE : data[0].features[0].get(f);

                _this3.filterFields.push({
                  id: f,
                  values: [{
                    key: '[' + relationLayerFields.find(function (_f) {
                      return _f.name === f;
                    }).label + ']',
                    value: '' + G3W_SELECT2_NULL_VALUE }],
                  value: value,
                  disabled: chain_filters && i > 0 && '' + G3W_SELECT2_NULL_VALUE === _this3.filterFields[filter_fields[i - 1]]
                });
                return createSingleFieldParameter({
                  field: f,
                  value: value
                });
              }).join('|AND,')
            })).data || []).map(function (_ref5) {
              var _ref6 = _slicedToArray(_ref5, 2),
                  value = _ref6[0],
                  key = _ref6[1];

              return { key: key, value: value };
            });

            if (chain_filters) {
              (yield relationLayer.getFilterData({
                unique: filter_fields[0],
                ordering: filter_fields[0],
                formatter: 0
              })).forEach(function (v) {
                return _this3.filterFields[0].values.push({ key: v, value: v });
              });

              (yield Promise.allSettled(filter_fields.slice(1).map(function (f, i) {
                return relationLayer.getFilterData({
                  unique: filter_fields[i + 1],
                  ordering: filter_fields[i + 1],
                  formatter: 0,
                  field: _this3.filterFields.slice(0, i + 1).filter(function (f) {
                    return 'null' !== f.value;
                  }).map(function (f) {
                    return createSingleFieldParameter({
                      field: f.id,
                      value: f.value
                    });
                  }).join('|AND,')
                });
              }))).forEach(function (_ref7, i) {
                var status = _ref7.status,
                    data = _ref7.value;

                if ('fulfilled' === status) {
                  data.forEach(function (v) {
                    return _this3.filterFields[i + 1].values.push({ key: v, value: v });
                  });
                }
              });
            } else {
              (yield Promise.allSettled(filter_fields.map(function (f) {
                return relationLayer.getFilterData({ unique: f, ordering: f, formatter: 0 });
              }))).forEach(function (_ref8, index) {
                var status = _ref8.status,
                    data = _ref8.value;

                if ('fulfilled' === status) {
                  data.forEach(function (v) {
                    return _this3.filterFields[index].values.push({ key: v, value: v });
                  });
                }
              });
            }
          } catch (err) {
            console.warn(err);
          }
        } else {
          (yield Promise.allSettled(filter_fields.map(function (f, i) {
            _this3.filterFields.push({
              id: f,
              values: [{
                key: '[' + relationLayerFields.find(function (_f) {
                  return _f.name === f;
                }).label + ']',
                value: '' + G3W_SELECT2_NULL_VALUE }],
              value: '' + G3W_SELECT2_NULL_VALUE,
              disabled: chain_filters && i > 0
            });
            return relationLayer.getFilterData({
              unique: f,
              formatter: 0,
              ordering: f
            });
          }))).forEach(function (_ref9, i) {
            var status = _ref9.status,
                data = _ref9.value;

            if ('fulfilled' === status) {
              data.forEach(function (v) {
                return _this3.filterFields[i].values.push({ key: v, value: v });
              });
            }
          });
        }

        this.filterFieldsUnwatches = this.filterFields.map(function (f, index) {
          return _this3.$watch(function () {
            return f.value;
          }, function () {
            var _ref10 = _asyncToGenerator(function* (value) {
              _this3.setLoading(true);

              if (chain_filters) {
                for (var i = index + 1; i < _this3.filterFields.length; i++) {
                  _this3.filterFields[i].value = '' + G3W_SELECT2_NULL_VALUE;
                  _this3.filterFields[i].values = [_this3.filterFields[i].values[0]];
                  _this3.filterFields[i].disabled = '' + G3W_SELECT2_NULL_VALUE === value;
                }
                try {
                  var filter = _this3.filterFields.slice(0, index + 1).filter(function (f) {
                    return '' + G3W_SELECT2_NULL_VALUE !== f.value;
                  }).map(function (f) {
                    return createSingleFieldParameter({
                      field: f.id,
                      value: f.value
                    });
                  }).join('|AND,');

                  var _ref11 = yield relationLayer.getFilterData({ field: filter }),
                      _ref11$data = _ref11.data,
                      rdata = _ref11$data === undefined ? [] : _ref11$data;

                  if (rdata[0] && rdata[0].features) {
                    var filterReferencedFieldValues = [];
                    rdata[0].features.forEach(function (f) {
                      filterReferencedFieldValues.push(f.get(referencedField));
                      if (index < _this3.filterFields.length - 1) {
                        var _value = f.get(_this3.filterFields[index + 1].id);
                        _this3.filterFields[index + 1].values.push({
                          key: _value,
                          value: _value
                        });
                      }
                    });
                  }
                } catch (err) {
                  console.warn(err);
                }
              }
              _this3.state.input.options.values = ((yield layer.getFilterData({
                fformatter: referencingField[0],
                ordering: referencingField[0],
                ffield: _this3.filterFields.filter(function (f) {
                  return '' + G3W_SELECT2_NULL_VALUE !== f.value;
                }).map(function (f) {
                  return createSingleFieldParameter({
                    field: f.id,
                    value: f.value
                  });
                }).join('|AND,')
              })).data || []).map(function (_ref12) {
                var _ref13 = _slicedToArray(_ref12, 2),
                    value = _ref13[0],
                    key = _ref13[1];

                return { key: key, value: value };
              });

              if (_this3.state.input.options.values.length > 0) {
                _this3.state.value = _this3.state.input.options.values[0].value;
                _this3.select2.val(_this3.state.value).trigger('change');
                _this3.changeSelect(_this3.state.value);
              }

              _this3.setLoading(false);
            });

            return function (_x2) {
              return _ref10.apply(this, arguments);
            };
          }());
        });

        this.setLoading(false);

        this.isFilterFieldsReady = true;
      }

      if (this.state.input.type === 'select_autocomplete') {
        var dependencyLayerId = this.state.input.options.layer_id;
        try {
          var dependencyLayer = _mapLayers2.default.getLayerById(dependencyLayerId).getEditingLayer() || _catalogLayers2.default.getLayerById(dependencyLayerId);
          this.showPickLayer = dependencyLayer ? dependencyLayer.getType() !== Layer.LayerTypes.TABLE : false;

          var _state$input$options2 = this.state.input.options,
              field = _state$input$options2.value,
              layer_id = _state$input$options2.layer_id;


          var options = {
            layer_id: layer_id,
            fields: [field],
            pick_type: dependencyLayer.isStarted && dependencyLayer.isStarted() && 'map' || null
          };

          this.pickLayerInputService = this.showPickLayer && new PickLayerInputService(options);
        } catch (err) {}
      }

      if (this.autocomplete && this.state.value) {
        this.service.getKeyByValue({
          search: this.state.value
        });
      }
    });

    function created() {
      return _ref3.apply(this, arguments);
    }

    return created;
  }(),
  mounted: function () {
    var _ref14 = _asyncToGenerator(function* () {
      var _this4 = this;

      yield this.$nextTick();
      var selectElement = $(this.$refs.select);
      var language = this.getLanguage();
      var dropdownParent = this.state.dropdownParent === undefined && $('#g3w-view-content');
      if (this.autocomplete) {
        this.select2 = selectElement.select2({
          minimumInputLength: 1,
          dropdownParent: dropdownParent,
          allowClear: this.showNullOption,
          language: language,
          ajax: {
            delay: 250,
            transport: function transport(params, success, failure) {
              var search = params.data.term;

              $('.select2-results__option.loading-results').siblings().hide();
              _this4.resetValues();
              _this4.service.getData({
                search: search
              }).then(function (values) {
                return success(values);
              }).catch(function (err) {
                return failure(err);
              });
            },
            processResults: function processResults(data, params) {
              params.page = params.page || 1;
              return {
                results: data,
                pagination: {
                  more: false
                }
              };
            } }
        });
      } else {
        this.select2 = selectElement.select2({
          language: language,
          dropdownParent: dropdownParent,
          minimumResultsForSearch: this.isMobile() ? -1 : null
        });
      }
      this.setAndListenSelect2Change();
      this.setValue();
    });

    function mounted() {
      return _ref14.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    if (this.pickLayerInputService) {
      this.pickLayerInputService.clear();
      this.pickLayerInputService = null;
    }
    if (this.unwatch) {
      this.unwatch();
      this.unwatch = null;
    }

    if (this.filterFieldsUnwatches) {
      this.filterFieldsUnwatches.forEach(function (uw) {
        return uw();
      });
      this.filterFieldsUnwatches = null;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[(_vm.showPickLayer)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.form.inputs.tooltips.picklayer'),expression:"'sdk.form.inputs.tooltips.picklayer'"},{name:"disabled",rawName:"v-disabled",value:(_vm.disabled),expression:"disabled"}],staticClass:"g3w-input-pick-layer skin-color",class:_vm.g3wtemplate.font['crosshairs'],attrs:{"slot":"label-action","data-placement":"top"},on:{"click":function($event){$event.stopPropagation();return _vm.pickLayerValue($event)}},slot:"label-action"}):_vm._e(),_vm._v(" "),_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.disabled),expression:"disabled"}],attrs:{"slot":"body","tabIndex":_vm.tabIndex},slot:"body"},[(_vm.filterFields.length > 0 && _vm.isFilterFieldsReady)?_c('div',{staticClass:"g3w-relation-reference-fields-content"},[_vm._l((_vm.filterFields),function(rf,index){return [_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('filterFields'),expression:"'filterFields'"}],ref:("filterField_" + (rf.id)),refInFor:true,staticClass:"form-control",staticStyle:{"width":"100%"},attrs:{"select2_value":rf.value,"indexItem":index,"id":rf.id,"disabled":rf.disabled}},_vm._l((rf.values),function(ref){
var key = ref.key;
var value = ref.value;
return _c('option',{domProps:{"value":_vm.getValue(value)}},[_vm._v("\n            "+_vm._s(key)+"\n          ")])}),0)]}),_vm._v(" "),_c('divider')],2):_vm._e(),_vm._v(" "),_c('select',{ref:"select",staticClass:"form-control",staticStyle:{"width":"100%"}},[(_vm.showNullOption)?_c('option',{domProps:{"value":_vm.select2NullValue}}):_vm._e(),_vm._v(" "),_vm._l((_vm.state.input.options.values),function(ref){
var key = ref.key;
var value = ref.value;
return _c('option',{key:_vm.getValue(value),domProps:{"value":_vm.getValue(value)}},[_vm._v("\n          "+_vm._s(key)+"\n      ")])})],2)]),_vm._v(" "),(_vm.loadingState === 'error')?_c('p',{directives:[{name:"t",rawName:"v-t",value:('server_error'),expression:"'server_error'"}],staticClass:"error-input-message",attrs:{"slot":"message"},slot:"message"}):_vm._e()])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-6b3d29b0"

},{"core/layers/layer":18,"gui/inputs/input":90,"gui/inputs/picklayer/service":98,"mixins":302,"services/gui":319,"store/catalog-layers":329,"store/map-layers":333,"store/projects":335,"utils":419,"vueify/lib/insert-css":2}],202:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: 'input-slider-range',

  mixins: [Input],
  watch: {
    'state.input.options.min': function stateInputOptionsMin() {
      this.service.changeInfoMessage();
    },
    'state.input.options.max': function stateInputOptionsMax() {
      this.service.changeInfoMessage();
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('div',{attrs:{"slot":"body"},slot:"body"},[_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.state.value))]),_vm._v(" "),_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],class:{'input-error-validation' : _vm.notvalid},staticStyle:{"width":"100%","padding-right":"5px"},attrs:{"slot":"body","tabIndex":_vm.tabIndex,"min":_vm.state.input.options.min,"max":_vm.state.input.options.max,"type":"range","step":_vm.state.input.options.step},domProps:{"value":(_vm.state.value)},on:{"change":_vm.change,"__r":function($event){return _vm.$set(_vm.state, "value", $event.target.value)}},slot:"body"})])])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90}],203:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: "input-text",

  mixins: [Input]
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('input',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],staticClass:"form-control",class:{'input-error-validation' : _vm.notvalid},attrs:{"slot":"body","placeholder":_vm.state.default,"tabIndex":_vm.tabIndex,"field":_vm.state.name,"id":_vm.state.name},domProps:{"value":(_vm.state.value)},on:{"keyup":function($event){_vm.isMobile() ? _vm.mobileChange($event) : _vm.change()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)}},slot:"body"})])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90}],204:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("textarea[data-v-3ac5abe4]{resize:none;border:1px solid #ccc}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});


var Input = require('gui/inputs/input');

exports.default = {
  name: "input-textarea",

  mixins: [Input]
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('textarea',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"},{name:"model",rawName:"v-model",value:(_vm.state.value),expression:"state.value"}],class:{'input-error-validation' : _vm.notvalid},staticStyle:{"max-width":"100%","min-width":"100%"},attrs:{"slot":"body","placeholder":_vm.state.default,"rows":"3","tabIndex":_vm.tabIndex},domProps:{"value":(_vm.state.value)},on:{"keydown":function($event){$event.stopPropagation();},"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "value", $event.target.value)},_vm.change],"change":_vm.change},slot:"body"})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-3ac5abe4"

},{"gui/inputs/input":90,"vueify/lib/insert-css":2}],205:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("button.ql-html{width:40px!important}button.ql-html:after{content:\"html\"}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

var Input = require('gui/inputs/input');

exports.default = {
  name: "input-html",

  mixins: [Input],
  methods: {
    setupTableCustomTools: function setupTableCustomTools() {
      var buttonColumnLeft = this.$el.querySelector('.ql-column-left');
      buttonColumnLeft.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-left-square" viewBox="0 0 16 16"><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/><path d="M10.205 12.456A.5.5 0 0 0 10.5 12V4a.5.5 0 0 0-.832-.374l-4.5 4a.5.5 0 0 0 0 .748l4.5 4a.5.5 0 0 0 .537.082z"/></svg>';
      buttonColumnLeft.title = "Add column left";

      var buttonColumnRight = this.$el.querySelector('.ql-column-right');
      buttonColumnRight.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-right-square" viewBox="0 0 16 16"><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/><path d="M5.795 12.456A.5.5 0 0 1 5.5 12V4a.5.5 0 0 1 .832-.374l4.5 4a.5.5 0 0 1 0 .748l-4.5 4a.5.5 0 0 1-.537.082z"/></svg>';
      buttonColumnRight.title = "Add column right";

      var buttonColumnRemove = this.$el.querySelector('.ql-column-remove');
      buttonColumnRemove.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-square" viewBox="0 0 16 16"><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/></svg>';
      buttonColumnRemove.title = "Remove column";

      var buttonRowAbove = this.$el.querySelector('.ql-row-above');
      buttonRowAbove.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-square" viewBox="0 0 16 16"><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/><path d="M3.544 10.705A.5.5 0 0 0 4 11h8a.5.5 0 0 0 .374-.832l-4-4.5a.5.5 0 0 0-.748 0l-4 4.5a.5.5 0 0 0-.082.537z"/></svg>';
      buttonRowAbove.title = "Add row above";


      var buttonRowBelow = this.$el.querySelector('.ql-row-below');
      buttonRowBelow.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-square" viewBox="0 0 16 16"><path d="M3.626 6.832A.5.5 0 0 1 4 6h8a.5.5 0 0 1 .374.832l-4 4.5a.5.5 0 0 1-.748 0l-4-4.5z"/><path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm15 0a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2z"/></svg>';
      buttonRowBelow.title = "Add row below";

      var buttonRowRemove = this.$el.querySelector('.ql-row-remove');
      buttonRowRemove.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-square" viewBox="0 0 16 16"><path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/><path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z"/></svg>';
      buttonRowRemove.title = "Remove row";
    }
  },
  created: function created() {
    this.edit_state = {
      edit: false,
      show_html: false
    };

    if (!this.state.edit_states) this.state.edit_states = [];
    this.state.edit_states.push(this.edit_state);
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      var toolbarOptions = [[{ header: [1, 2, 3, 4, 5, 6, false] }], [{ 'align': '' }, { 'align': 'center' }, { 'align': 'right' }, { 'align': 'justify' }], [{ 'color': [] }, { 'background': [] }], ['bold', 'italic', 'underline', { 'list': 'ordered' }, { 'list': 'bullet' }, 'link', 'clean', 'html'], ['table', 'column-left', 'column-right', 'column-remove', 'row-above', 'row-below', 'row-remove']];
      yield this.$nextTick();
      this.quill = new Quill(this.$refs.quill_editor, {
        modules: {
          table: true,
          toolbar: {
            container: toolbarOptions,
            handlers: {
              html: function html() {
                _this.edit_state.show_html = !_this.edit_state.show_html;
                if (_this.edit_state.show_html) _this.quill.container.firstChild.innerText = _this.quill.container.firstChild.innerHTML;else _this.quill.container.firstChild.innerHTML = _this.quill.container.firstChild.innerText;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = _this.$el.querySelectorAll('.ql-formats')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var qlformat = _step.value;
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                      for (var _iterator2 = qlformat.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var child = _step2.value;

                        if (!child.classList.contains('ql-html')) child.classList.toggle('g3w-disabled');else child.classList.toggle('skin-color');
                      }
                    } catch (err) {
                      _didIteratorError2 = true;
                      _iteratorError2 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                          _iterator2.return();
                        }
                      } finally {
                        if (_didIteratorError2) {
                          throw _iteratorError2;
                        }
                      }
                    }
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
              },
              'column-left': function columnLeft() {
                return _this.table.insertColumnLeft();
              },
              'column-right': function columnRight() {
                return _this.table.insertColumnRight();
              },
              'column-remove': function columnRemove() {
                return _this.table.deleteColumn();
              },
              'row-above': function rowAbove() {
                return _this.table.insertRowAbove();
              },
              'row-below': function rowBelow() {
                return _this.table.insertRowBelow();
              },
              'row-remove': function rowRemove() {
                return _this.table.deleteRow();
              }
            }

          }
        },
        theme: 'snow'
      });
      this.quill.container.firstChild.innerHTML = this.state.value;

      this.table = this.quill.getModule('table');
      this.setupTableCustomTools();

      this.handler = function () {
        _this.state.value = _this.edit_state.show_html ? _this.quill.container.firstChild.innerText : _this.quill.container.firstChild.innerHTML;
        _this.edit_state.edit = true;
        _this.change();
        setTimeout(function () {
          return _this.edit_state.edit = false;
        });
      };

      this.quill.on('text-change', this.handler);
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),

  watch: {
    'state.value': function stateValue(value) {
      if (!this.edit_state.edit) {
        if (this.edit_state.show_html) this.quill.container.firstChild.innerText = value;else this.quill.container.firstChild.innerHTML = value;
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.quill.off('text-change', this.handler);
    this.handler = null;
    this.quill = null;
    this.edit_state.edit = false;
    this.edit_state.show_html = false;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"}],attrs:{"state":_vm.state}},[_c('div',{ref:"quill_editor",staticClass:"form-control",style:({border: _vm.novalid ? '1px solid reed' : '1px solid #ccc'}),attrs:{"slot":"body"},on:{"keydown":function($event){$event.stopPropagation();}},slot:"body"})])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"utils":419,"vueify/lib/insert-css":2}],206:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mixins = require('mixins');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Input = require('gui/inputs/input');

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: "input-unique",

  mixins: [Input, _mixins.selectMixin],
  data: function data() {
    var id = 'unique_' + getUniqueDomId();
    return { id: id };
  },

  watch: {
    'state.input.options.values': function () {
      var _ref = _asyncToGenerator(function* (values) {
        this.state.value = this.state.value ? this.state.value : null;
        this.state.value !== null && values.indexOf(this.state.value) === -1 && this.service.addValueToValues(this.state.value);
        yield this.$nextTick();
        this.state.value && this.select2.val(this.state.value).trigger('change');
      });

      function stateInputOptionsValues(_x) {
        return _ref.apply(this, arguments);
      }

      return stateInputOptionsValues;
    }()
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      var _this = this;

      yield this.$nextTick();
      if (this.state.input.options.editable) {
        this.select2 = $('#' + this.id).select2({
          dropdownParent: $('#g3w-view-content'),
          tags: true,
          language: this.getLanguage()
        });
        this.select2.val(this.state.value).trigger('change');
        this.select2.on('select2:select', function (event) {
          var value = event.params.data.$value ? event.params.data.$value : event.params.data.id;
          _this.changeSelect(value);
        });
      }
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('baseinput',{attrs:{"state":_vm.state}},[_c('select',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.editable),expression:"!editable"}],staticClass:"form-control",staticStyle:{"width":"100%"},attrs:{"slot":"body","id":_vm.id,"tabIndex":_vm.tabIndex},slot:"body"},[_c('option',{attrs:{"value":"null"}}),_vm._v(" "),_vm._l((_vm.state.input.options.values),function(value){return _c('option',{key:value,domProps:{"value":_vm.getValue(value)}},[_vm._v(_vm._s(_vm.getValue(value)))])})],2)])}
__vue__options__.staticRenderFns = []

},{"gui/inputs/input":90,"mixins":302,"utils":419}],207:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("li .item-text[data-v-41231f64]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _eventbus = require('app/eventbus');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'Layeropacitypicker',

  props: {
    layer: {
      type: Object,
      required: true
    }
  },

  data: function data() {
    return {
      menu: {
        show: false,
        top: 0,
        left: 0,
        overflowY: 'none',
        style: null,
        default: null
      }
    };
  },

  methods: {
    setLayerOpacity: function setLayerOpacity(_ref) {
      var _ref$id = _ref.id,
          id = _ref$id === undefined ? this.layer.id : _ref$id,
          opacity = _ref.value;

      if (this.layer.opacity == opacity) {
        return;
      }
      this.layer.opacity = opacity;
      var layer = _catalogLayers2.default.getLayerById(id);
      if (layer) {
        _eventbus.CatalogEventBus.$emit('layer-change-opacity', { layerId: id });
        layer.change();
      }
    },
    showLayerOpacityMenu: function () {
      var _ref2 = _asyncToGenerator(function* (bool, evt) {
        this.$emit('show-menu-item', { menu: this.menu, bool: bool, evt: evt });
      });

      function showLayerOpacityMenu(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return showLayerOpacityMenu;
    }()
  },

  created: function created() {
    this.$emit('init-menu-item', { layerOpacity: this.menu });
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{on:{"mouseleave":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showLayerOpacityMenu(false, $event)},"mouseover":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.showLayerOpacityMenu(true, $event)}}},[_c('span',{staticClass:"menu-icon skin-color-dark",class:_vm.g3wtemplate.getFontClass('slider')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('catalog_items.contextmenu.layer_opacity'),expression:"'catalog_items.contextmenu.layer_opacity'"}],staticClass:"item-text"}),_vm._v(" "),_c('span',{staticClass:"menu-icon",class:_vm.g3wtemplate.getFontClass('arrow-right'),staticStyle:{"position":"absolute","right":"0","margin-top":"3px"}}),_vm._v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.layer && _vm.menu.show),expression:"layer && menu.show"}],style:({
      top:             _vm.menu.top       + 'px',
      left:            _vm.menu.left - 15 + 'px',
      maxHeight:       _vm.menu.maxHeight + 'px',
      overflowY:       _vm.menu.overflowY,
      paddingLeft:     0,
      position:        'fixed',
      backgroundColor: '#FFF',
      color:           '#000',
     })},[_c('li',[_c('range',{attrs:{"value":_vm.layer.opacity,"min":0,"max":100,"step":1,"sync":false,"showValue":true,"unit":'%'},on:{"change-range":_vm.setLayerOpacity}})],1)])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-41231f64"

},{"app/eventbus":43,"store/catalog-layers":329,"vueify/lib/insert-css":2}],208:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-map-controls-left-bottom[data-v-70e886b4]{position:absolute;bottom:75px;left:10px;z-index:1}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MapAddLayer = require('components/MapAddLayer.vue');

var _MapAddLayer2 = _interopRequireDefault(_MapAddLayer);

var _MapFooter = require('components/MapFooter.vue');

var _MapFooter2 = _interopRequireDefault(_MapFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'g3w-map',

  data: function data() {
    var _$options = this.$options,
        service = _$options.service,
        target = _$options.target;

    return {
      target: target,
      maps_container: this.$options.maps_container,
      service: service,
      hidemaps: service.state.hidemaps,
      map_info: service.state.map_info
    };
  },

  components: {
    'addlayer': _MapAddLayer2.default,
    MapFooter: _MapFooter2.default
  },
  computed: {
    mapcontrolsalignement: function mapcontrolsalignement() {
      return this.service.state.mapcontrolsalignement;
    },
    disableMapControls: function disableMapControls() {
      return this.service.state.mapControl.disabled;
    }
  },
  methods: {
    showHideControls: function showHideControls() {
      var mapControls = this.service.getMapControls();
      mapControls.forEach(function (control) {
        return control.type !== "scaleline" && control.control.showHide();
      });
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      this.crs = this.service.getCrs();
      yield this.$nextTick();
      this.service.setMapControlsContainer($(this.$refs['g3w-map-controls']));

      this.service.onafter('addHideMap', _asyncToGenerator(function* () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            ratio = _ref3.ratio,
            _ref3$layers = _ref3.layers,
            layers = _ref3$layers === undefined ? [] : _ref3$layers,
            _ref3$mainview = _ref3.mainview,
            mainview = _ref3$mainview === undefined ? false : _ref3$mainview,
            _ref3$switchable = _ref3.switchable,
            switchable = _ref3$switchable === undefined ? false : _ref3$switchable;

        yield _this.$nextTick();
        _this.service._addHideMap({ ratio: ratio, layers: layers, mainview: mainview, switchable: switchable });
      }));
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),
  destroyed: function destroyed() {
    this.service.clear();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":_vm.maps_container}},[_vm._l((_vm.hidemaps),function(hidemap){return _c('div',{key:hidemap.id,staticClass:"g3w-map hidemap",attrs:{"id":hidemap.id}})}),_vm._v(" "),_c('div',{staticClass:"g3w-map",attrs:{"id":_vm.target}},[_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.disableMapControls),expression:"disableMapControls"}],ref:"g3w-map-controls",staticClass:"g3w-map-controls",class:_vm.mapcontrolsalignement,staticStyle:{"display":"flex"}}),_vm._v(" "),(_vm.map_info.info)?_c('div',{ref:"g3w-map-info",style:(_vm.map_info.style),attrs:{"id":"g3w-map-info"}},[_vm._v("\n      "+_vm._s(_vm.map_info.info)+"\n    ")]):_vm._e(),_vm._v(" "),_vm._m(0),_vm._v(" "),_c('addlayer',{attrs:{"service":_vm.service}}),_vm._v(" "),_c('div',{staticClass:"g3w-map-controls-left-bottom"})],1),_vm._v(" "),_c('map-footer',{attrs:{"service":_vm.service}})],2)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"none"}},[_c('div',{attrs:{"id":"marker"}})])}]
__vue__options__._scopeId = "data-v-70e886b4"

},{"components/MapAddLayer.vue":209,"components/MapFooter.vue":213,"vueify/lib/insert-css":2}],209:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _vueColor = require('vue-color');

var _constant = require('app/constant');

var _createVectorLayerFromFile = require('utils/createVectorLayerFromFile');

var _createStyleFunctionToVectorLayer = require('utils/createStyleFunctionToVectorLayer');

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Projections = require('g3w-ol/projection/projections');

var SUPPORTED_FORMAT = ['zip', 'geojson', 'GEOJSON', 'kml', 'kmz', 'KMZ', 'KML', 'json', 'gpx', 'gml', 'csv'];
var CSV_SEPARATORS = [',', ';'];

_vueColor.Chrome.mounted = _asyncToGenerator(function* () {
  yield this.$nextTick();
  $('.vue-color__chrome__toggle-btn').remove();
  $('.vue-color__editable-input__label').remove();
  $('.vue-color__chrome__saturation-wrap').css('padding-bottom', '100px');
  $('.vue-color__chrome').css({
    'box-shadow': '0 0 0 0',
    'border': '1px solid #97A1A8'
  });
});

exports.default = {
  name: 'map-add-layer',

  props: ['service'],
  data: function data() {
    var MAPEPSG = this.service.getCrs();
    _constant.EPSG.find(function (epsg) {
      return epsg === MAPEPSG;
    }) === undefined && _constant.EPSG.unshift(MAPEPSG);
    return {
      vectorLayer: null,
      options: _constant.EPSG,
      error: false,
      error_message: null,
      position: null,
      loading: false,
      fields: [],
      field: null,
      accepted_extension: SUPPORTED_FORMAT.map(function (format) {
        return '.' + format;
      }).join(','),
      csv: {
        valid: false,
        loading: false,
        headers: [],
        x: null,
        y: null,
        separators: CSV_SEPARATORS,
        separator: CSV_SEPARATORS[0]
      },
      layer: {
        name: null,
        type: null,
        crs: null,
        mapCrs: null,
        color: {
          hex: '#194d33',
          rgba: {
            r: 25,
            g: 77,
            b: 51,
            a: 1
          },
          a: 1
        },
        data: null,
        visible: true,
        title: null,
        id: null,
        external: true
      }
    };
  },

  components: {
    'chrome-picker': _vueColor.Chrome
  },
  computed: {
    csv_extension: function csv_extension() {
      return this.layer.type === 'csv';
    },
    add: function add() {
      return this.layer.data || this.csv.valid;
    }
  },
  methods: {
    setLayerMapPosition: function setLayerMapPosition(position) {
      this.position = position;
    },
    setError: function setError(type) {
      this.error_message = 'sdk.errors.' + type;
      this.error = true;
    },
    clearError: function clearError() {
      this.error = false;
      this.error_message = null;
    },
    onChangeColor: function onChangeColor(val) {
      this.layer.color = val;
    },
    onAddLayer: function () {
      var _ref2 = _asyncToGenerator(function* (evt) {
        var _this = this;

        var reader = new FileReader();
        var name = evt.target.files[0].name;
        var type = evt.target.files[0].name.split('.');
        type = type[type.length - 1].toLowerCase();
        var input_file = $(this.$refs.input_file);
        if (SUPPORTED_FORMAT.indexOf(type) !== -1) {
          this.clearError();
          this.layer.mapCrs = this.service.getEpsg();
          this.layer.name = name;
          this.layer.title = name;
          this.layer.id = name;
          this.layer.type = type;
          if (this.layer.type === 'csv') {
            reader.onload = function (evt) {
              input_file.val(null);
              var csv_data = evt.target.result.split(/\r\n|\n/).filter(function (row) {
                return row;
              });

              var _csv_data = _toArray(csv_data),
                  headers = _csv_data[0],
                  values = _csv_data.slice(1);

              var handle_csv_headers = function handle_csv_headers(separator) {
                var data = null;
                _this.csv.loading = true;
                var csv_headers = headers.split(separator);
                var headers_length = csv_headers.length;
                if (headers_length > 1) {
                  _this.csv.headers = csv_headers;
                  _this.fields = csv_headers;
                  _this.csv.x = csv_headers[0];
                  _this.csv.y = csv_headers[1];
                  data = {
                    headers: csv_headers,
                    separator: separator,
                    x: _this.csv.x,
                    y: _this.csv.y,
                    values: values
                  };
                  _this.csv.valid = true;
                } else {
                  _this.csv.headers = _this.fields = [];
                  _this.vectorLayer = null;
                  _this.csv.valid = false;
                  _this.fields.splice(0);
                }
                _this.csv.loading = false;
                return data;
              };
              _this.layer.data = handle_csv_headers(_this.csv.separator);
              _this.$watch('csv.separator', function (separator) {
                return _this.layer.data = handle_csv_headers(separator);
              });
            };
            reader.readAsText(evt.target.files[0]);
          } else {
            var promiseData = new Promise(function (resolve, reject) {
              if (_this.layer.type === 'zip' || _this.layer.type === 'kmz') {
                var data = evt.target.files[0];
                input_file.val(null);
                resolve(data);
              } else {
                reader.onload = function (evt) {
                  var data = evt.target.result;
                  input_file.val(null);
                  resolve(data);
                };
                reader.readAsText(evt.target.files[0]);
              }
            });
            this.layer.data = yield promiseData;
            try {
              this.fields.splice(0);
              yield this.createVectorLayer();
              this.fields = this.vectorLayer.get('_fields');
            } catch (err) {}
          }
        } else this.setError('unsupported_format');
      });

      function onAddLayer(_x) {
        return _ref2.apply(this, arguments);
      }

      return onAddLayer;
    }(),
    createVectorLayer: function () {
      var _ref3 = _asyncToGenerator(function* () {
        try {
          this.vectorLayer = yield (0, _createVectorLayerFromFile.createVectorLayerFromFile)(this.layer);
          yield this.$nextTick();
        } catch (err) {
          this.setError('add_external_layer');
        }
      });

      function createVectorLayer() {
        return _ref3.apply(this, arguments);
      }

      return createVectorLayer;
    }(),
    addLayer: function () {
      var _ref4 = _asyncToGenerator(function* () {
        if (this.layer.data || this.csv.valid) {
          var crs = this.layer.crs;

          try {
            try {
              yield Projections.registerProjection(crs);
            } catch (error) {
              this.setError(error);
              return;
            }

            this.loading = true;
            this.vectorLayer = yield (0, _createVectorLayerFromFile.createVectorLayerFromFile)(this.layer);
            this.vectorLayer.setStyle((0, _createStyleFunctionToVectorLayer.createStyleFunctionToVectorLayer)({
              color: this.layer.color,
              field: this.field
            }));
            yield this.service.addExternalLayer(this.vectorLayer, {
              crs: this.layer.crs,
              type: this.layer.type,
              position: this.position
            });
            $(this.$refs.modal_addlayer).modal('hide');
            this.clear();
          } catch (err) {
            this.setError('add_external_layer');
          }
          this.loading = false;
        }
      });

      function addLayer() {
        return _ref4.apply(this, arguments);
      }

      return addLayer;
    }(),
    clear: function clear() {
      this.clearError();
      this.loading = false;
      this.layer.name = null;
      this.layer.title = null;
      this.layer.id = null;
      this.layer.type = null;
      this.layer.crs = this.service.getCrs();
      this.layer.color = {
        hex: '#194d33',
        rgba: { r: 25, g: 77, b: 51, a: 1 },
        a: 1
      };
      this.layer.data = null;
      this.vectorLayer = null;
      this.fields = [];
      this.field = null;
      this.csv.valid = false;
    },
    clearLayer: function clearLayer() {
      this.clear();
    }
  },
  watch: {
    'csv.x': function csvX(value) {
      if (value) this.layer.data.x = value;
    },
    'csv.y': function csvY(value) {
      if (value) this.layer.data.y = value;
    }
  },
  created: function created() {
    var _this2 = this;

    this.layer.crs = this.service.getCrs();
    this.service.on('addexternallayer', function () {
      return _this2.modal.modal('show');
    });
  },
  mounted: function () {
    var _ref5 = _asyncToGenerator(function* () {
      var _this3 = this;

      yield this.$nextTick();
      this.modal = $('#modal-addlayer').modal('hide');
      this.modal.on('hide.bs.modal', function () {
        _this3.clear();
      });
    });

    function mounted() {
      return _ref5.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.clear();
    this.modal.modal('hide');
    this.modal.remove();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"modal_addlayer",staticClass:"modal fade",attrs:{"id":"modal-addlayer","role":"dialog"}},[_c('div',{staticClass:"modal-dialog"},[_c('div',{staticClass:"modal-content"},[_c('div',{staticClass:"modal-header"},[_c('button',{staticClass:"close",attrs:{"type":"button","data-dismiss":"modal"}},[_vm._v("×")]),_vm._v(" "),_c('h4',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.header'),expression:"'mapcontrols.add_layer_control.header'"}],staticClass:"modal-title",staticStyle:{"font-weight":"bold"}})]),_vm._v(" "),_c('div',{staticClass:"modal-body"},[_c('div',{staticClass:"form-group"},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.select_projection'),expression:"'mapcontrols.add_layer_control.select_projection'"}],attrs:{"for":"projection-layer"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.layer.crs),expression:"layer.crs"}],staticClass:"form-control",attrs:{"id":"projection-layer"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.layer, "crs", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.options),function(option){return _c('option',{domProps:{"value":option}},[_vm._v(_vm._s(option))])}),0)]),_vm._v(" "),_c('layerspositions',{on:{"layer-position-change":function($event){return _vm.setLayerMapPosition($event)}}}),_vm._v(" "),_c('p',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.select_color'),expression:"'mapcontrols.add_layer_control.select_color'"}],staticStyle:{"font-weight":"700"}}),_vm._v(" "),_c('chrome-picker',{staticStyle:{"width":"100%","margin":"auto"},on:{"input":_vm.onChangeColor},model:{value:(_vm.layer.color),callback:function ($$v) {_vm.$set(_vm.layer, "color", $$v)},expression:"layer.color"}}),_vm._v(" "),_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('form',{attrs:{"id":"addcustomlayer"}},[_c('input',{ref:"input_file",attrs:{"type":"file","title":" ","accept":_vm.accepted_extension},on:{"change":function($event){return _vm.onAddLayer($event)}}}),_vm._v(" "),_c('h4',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.drag_layer'),expression:"'mapcontrols.add_layer_control.drag_layer'"}]}),_vm._v(" "),(_vm.layer.name)?_c('h4',{staticClass:"skin-color",staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(_vm.layer.name))]):_vm._e(),_vm._v(" "),_c('div',[_c('i',{staticClass:"fa-5x",class:_vm.g3wtemplate.getFontClass('cloud-upload'),attrs:{"aria-hidden":"true"}})]),_vm._v(" "),_c('p',{staticStyle:{"font-weight":"bold"}},[_vm._v("[.gml, .geojson, .kml, .kmz ,.gpx, .csv, .zip(shapefile)]")])]),_vm._v(" "),(_vm.csv_extension)?_c('div',{staticStyle:{"padding":"15px","border":"1px solid grey","border-radius":"3px"}},[_c('bar-loader',{attrs:{"loading":_vm.csv.loading}}),_vm._v(" "),_c('div',{staticClass:"select_field"},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.select_csv_separator'),expression:"'mapcontrols.add_layer_control.select_csv_separator'"}],attrs:{"for":"g3w-select-field-layer"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.csv.separator),expression:"csv.separator"}],staticClass:"form-control",attrs:{"id":"g3w-select-separator"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.csv, "separator", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.csv.separators),function(separator){return _c('option',{key:separator,domProps:{"value":separator}},[_vm._v(_vm._s(separator))])}),0),_vm._v(" "),_c('div',{staticClass:"select_field",class:{'g3w-disabled': !_vm.csv.headers || _vm.csv.headers.length === 0}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.select_csv_x_field'),expression:"'mapcontrols.add_layer_control.select_csv_x_field'"}],attrs:{"for":"g3w-select-x-field"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.csv.x),expression:"csv.x"}],staticClass:"form-control",attrs:{"id":"g3w-select-x-field"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.csv, "x", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.csv.headers),function(header){return _c('option',{key:header,domProps:{"value":header}},[_vm._v(_vm._s(header))])}),0)]),_vm._v(" "),_c('div',{staticClass:"select_field",class:{'g3w-disabled': !_vm.csv.headers || _vm.csv.headers.length === 0}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.select_csv_y_field'),expression:"'mapcontrols.add_layer_control.select_csv_y_field'"}],attrs:{"for":"g3w-select-y-field"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.csv.y),expression:"csv.y"}],staticClass:"form-control",attrs:{"id":"g3w-select-y-field"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.csv, "y", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.csv.headers),function(header){return _c('option',{key:header,domProps:{"value":header}},[_vm._v(_vm._s(header))])}),0)])])],1):_vm._e(),_vm._v(" "),_c('div',{staticClass:"select_field",class:{'g3w-disabled': !_vm.fields || _vm.fields.length === 0}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('mapcontrols.add_layer_control.select_field_to_show'),expression:"'mapcontrols.add_layer_control.select_field_to_show'"}],attrs:{"for":"g3w-select-field-layer"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.field),expression:"field"}],staticClass:"form-control",attrs:{"id":"g3w-select-field-layer"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.field=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{domProps:{"value":null}},[_vm._v("---")]),_vm._v(" "),_vm._l((_vm.fields),function(field){return _c('option',{key:field,domProps:{"value":field}},[_vm._v(_vm._s(field))])})],2)]),_vm._v(" "),(_vm.error)?_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.error_message),expression:"error_message"}],staticStyle:{"font-weight":"bold","font-size":"1.2em","background-color":"orange","padding":"10px","text-align":"center"}}):_vm._e(),_vm._v(" "),_c('div',{staticClass:"modal-footer"},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('add'),expression:"'add'"}],staticClass:"btn btn-success pull-left",attrs:{"type":"button","disabled":!_vm.add},on:{"click":function($event){$event.stopPropagation();return _vm.addLayer($event)}}}),_vm._v(" "),_c('button',{directives:[{name:"t",rawName:"v-t",value:('close'),expression:"'close'"}],staticClass:"btn btn-default",attrs:{"type":"button","data-dismiss":"modal"}})])],1)])])])}
__vue__options__.staticRenderFns = []

},{"app/constant":5,"g3w-ol/projection/projections":73,"utils/createStyleFunctionToVectorLayer":371,"utils/createVectorLayerFromFile":373,"vue-color":"vue-color"}],210:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var className = _ref.className,
      customClass = _ref.customClass,
      tipLabel = _ref.tipLabel,
      label = _ref.label;

  return {
    functional: true,
    render: function render(h) {
      var _class;

      return h('div', {
        class: (_class = {}, _defineProperty(_class, className, !!className), _defineProperty(_class, 'ol-unselectable', true), _defineProperty(_class, 'ol-control', true), _class)
      }, [h('button', {
        attrs: {
          type: 'button'
        },
        directives: [{
          name: 't-tooltip',
          value: tipLabel
        }]
      }, [label, h('i', {
        class: _defineProperty({}, customClass, !!customClass)
      })])]);
    }
  };
};

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * @file
                                                                                                                                                                                                                   * @since 3.9.0
                                                                                                                                                                                                                   */

;

},{}],211:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("li[data-v-547bdae4]:not(.skin-background-color){display:flex;align-items:center;gap:10px}li.gcd-icon-poi .gcd-city[data-v-547bdae4],li.gcd-icon-poi .gcd-country[data-v-547bdae4],li.gcd-icon-poi .gcd-road[data-v-547bdae4],li.gcd-icon-road .gcd-icon[data-v-547bdae4],li.gcd-icon-road .gcd-name[data-v-547bdae4],li.gcd-icon-road .gcd-type[data-v-547bdae4]{display:none}#gcd-search[data-v-547bdae4]{z-index:1;width:2.5em;height:100%;border-radius:0;background-color:var(--skin-color,#fff)}#gcd-trash[data-v-547bdae4],#markers-visibility-layer[data-v-547bdae4],#show-markers-results[data-v-547bdae4]{z-index:1;border-radius:0!important;color:#fff;border-left:1px solid #fff}#gcd-trash[data-v-547bdae4]{color:red}#gcd-input-query[data-v-547bdae4]{font-weight:700}.gcd-txt-reset[data-v-547bdae4]:after{content:\"\\d7\";display:inline-block;font-weight:700;font-size:2em;cursor:pointer;color:var(--skin-color)}.gcd-txt-reset[data-v-547bdae4]{z-index:1;width:2.5em;height:100%;line-height:100%;border:none;background-color:transparent;display:inline-block;vertical-align:middle;outline:0;cursor:pointer}.gcd-txt-input[data-v-547bdae4]:focus{outline:none}.gcd-txt-input[data-v-547bdae4]{z-index:1;border:0;width:100%;height:100%;padding:5px;text-indent:6px;background-color:transparent;font-family:inherit;font-size:1em}.gcd-txt-control[data-v-547bdae4]{position:relative;display:flex;justify-content:flex-end;height:40px;background-color:#fff;overflow:hidden;border-radius:2px;box-shadow:0 2px 4px rgba(0,0,0,.2);width:100%;border:2px solid var(--skin-color)}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.gcd-road[data-v-547bdae4]{font-size:.875em;font-weight:500}.gcd-city[data-v-547bdae4]{font-size:1em;font-weight:700}.gcd-country[data-v-547bdae4]{font-size:.75em}.gcd-spin[data-v-547bdae4]:after{animation:spin .7s linear infinite}.gcd-hidden[data-v-547bdae4]{display:none!important}li.skin-background-color[data-v-547bdae4]{position:sticky;top:0}li.selected[data-v-547bdae4]{background-color:#f7fabf!important}li.gcd-noresult[data-v-547bdae4]:hover{background-color:transparent!important}li.gcd-noresult[data-v-547bdae4]{font-weight:700;color:#384247;margin:10px;border-bottom:0!important}\n.ol-geocoder{box-sizing:border-box;position:absolute;max-width:300px;height:4.375em;top:7px;left:45px;width:50%;height:6px;font-size:1.1em}@media (max-width:767px){.ol-geocoder{left:10px}}.ol-geocoder>ul>li:hover{background-color:#eee}.ol-geocoder>ul>li{width:100%;overflow:hidden;padding:0;min-height:30px;padding-left:3px;border-bottom:2px solid var(--skin-color);min-height:20px;padding:10px}.ol-geocoder>ul{box-shadow:0 3px 5px rgba(0,0,0,.3);border-radius:3px!important;width:100%;max-height:200px;padding:0;margin-top:3px;background-color:#fff;border-top:none;overflow-x:hidden;overflow-y:auto;transition:max-height .3s ease-in;margin-bottom:0}.ol-geocoder>ul>li>a{display:block;text-decoration:none;padding:3px 5px;color:#000}.ol-geocoder>ul>li:last-child{border-bottom:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _QueryResultsActionChooseLayer = require('components/QueryResultsActionChooseLayer.vue');

var _QueryResultsActionChooseLayer2 = _interopRequireDefault(_QueryResultsActionChooseLayer);

var _store = require('store');

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _utils = require('utils');

var _flattenObject = require('utils/flattenObject');

var _addZValueToOLFeatureGeometry = require('utils/addZValueToOLFeatureGeometry');

var _isPointGeometryType = require('utils/isPointGeometryType');

var _convertSingleMultiGeometry = require('utils/convertSingleMultiGeometry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Projections = require('g3w-ol/projection/projections');

var PROVIDERS = window.initConfig.group.mapcontrols.geocoding ? window.initConfig.group.mapcontrols.geocoding.providers : {};
Object.keys(PROVIDERS).forEach(function (p) {
  var script = document.createElement('script');
  script.src = window.initConfig.staticurl + 'client/geocoding-providers/' + p + '.js';
  script.async = true;
  document.head.appendChild(script);
});

var LAYER = new ol.layer.Vector({
  id: '__g3w_marker',
  name: 'Geocoding',
  source: new ol.source.Vector(),
  style: function style(feature) {
    if ('__g3w_marker_coordinates' === feature.getId()) {
      return new ol.style.Style({
        text: new ol.style.Text({
          offsetY: -15,
          text: '\uF3C5',
          font: '900 3em "Font Awesome 5 Free"',
          stroke: new ol.style.Stroke({
            color: 'red',
            width: 3
          }),
          fill: new ol.style.Fill({
            color: 'rgba(255, 0,0, 0.7)'
          })
        })
      });
    } else {
      return [new ol.style.Style({
        image: new ol.style.Icon({
          opacity: 1,
          src: '/static/client/images/pushpin.svg',
          scale: 0.8
        })
      }), new ol.style.Style({
        image: new ol.style.RegularShape({
          stroke: new ol.style.Stroke({ color: [0, 0, 0, 0] }),
          points: 4,
          radius: 50,
          angle: Math.PI / 4
        })
      })];
    }
  }
});

var is_clearing = false;

exports.default = {
  data: function data() {
    return {
      results: [],

      disabled: false,
      results_panel_open: false };
  },


  props: {

    placeholder: {
      type: String,
      required: true
    },

    noresults: {
      type: String,
      required: true
    },

    limit: {
      type: Number,
      required: true
    },

    viewbox: {
      required: true
    },

    mapCrs: {
      required: true
    },

    providers: {
      type: Object,
      default: {}
    }

  },

  computed: {
    is_layer_visible: function is_layer_visible() {
      return LAYER.getVisible();
    },
    features: function features() {
      return LAYER.getSource().getFeatures();
    },
    has_providers: function has_providers() {
      return Object.keys(this.providers).length > 0;
    },
    extent: function extent() {
      var has_dynamic_extent = Object.keys(this.providers).filter(function (p) {
        return 'nominatim' != p;
      }).length > 0;
      return ol.proj.transformExtent(has_dynamic_extent ? _gui2.default.getService('map').getMapExtent() : this.viewbox, this.mapCrs, 'EPSG:4326');
    }
  },

  methods: {
    _showMarker: function _showMarker(coords) {
      var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var map = _gui2.default.getService('map');
      coords = transform ? ol.proj.transform(coords, 'EPSG:4326', map.getEpsg()) : coords;
      map.zoomToGeometry(new ol.geom.Point(coords));
    },
    _hideMarker: function _hideMarker() {
      LAYER.getSource().clear();

      if (false === this.is_layer_visible) {
        this.toggleLayerVisibility();
      }
    },
    toggleLayerVisibility: function toggleLayerVisibility() {
      LAYER.setVisible(!this.is_layer_visible);
    },
    clearResults: function clearResults() {
      this.$data.results.splice(0);

      if (LAYER.getSource().getFeatureById('__g3w_marker_coordinates')) {
        LAYER.getSource().removeFeature(LAYER.getSource().getFeatureById('__g3w_marker_coordinates'));
      }
    },
    clearMarkers: function clearMarkers() {
      is_clearing = true;
      this._hideMarker();

      this.$data.results.forEach(function (i) {
        return i.__selected = false;
      });
      var layer = _gui2.default.getService('queryresults').getState().layers.find(function (l) {
        return l.id === LAYER.get('id');
      });

      if (layer) {
        layer.features.forEach(function (f) {
          _gui2.default.getService('queryresults').removeFeatureLayerFromResult(layer, f);
        });
      }
      is_clearing = false;
    },
    clear: function clear() {
      this.clearResults();
      this.clearMarkers();
    },
    query: function query(q) {
      var _this = this;

      return new Promise(function () {
        var _ref = _asyncToGenerator(function* (resolve, reject) {
          var isNumber = function isNumber(value) {
            return 'Number' === (0, _utils.toRawType)(value) && !Number.isNaN(value);
          };
          var coordinates = null;
          var transform = false;

          var _split = (q || '').split(','),
              _split2 = _slicedToArray(_split, 3),
              x = _split2[0],
              y = _split2[1],
              epsg = _split2[2];

          var projection = epsg && (yield Projections.registerProjection('EPSG:' + epsg.trim()));

          if (isNumber(1 * x) && isNumber(1 * y)) {
            coordinates = [1 * x, 1 * y];
          }

          try {
            if (projection) {
              coordinates = ol.proj.transform(coordinates, projection.getCode(), 'EPSG:4326');
              transform = true;
            }
          } catch (err) {
            console.warn(err);
          }

          if (coordinates) {
            var source = LAYER.getSource();

            if (source.getFeatureById('__g3w_marker_coordinates')) {
              source.removeFeature(source.getFeatureById('__g3w_marker_coordinates'));
            }

            var feature = new ol.Feature({
              geometry: new ol.geom.Point(transform ? ol.proj.transform(coordinates, 'EPSG:4326', _gui2.default.getService('map').getEpsg()) : coordinates),

              lon: coordinates[0],
              lat: coordinates[1]
            });

            feature.setId('__g3w_marker_coordinates');

            LAYER.getSource().addFeature(feature);
            _this._showMarker(coordinates, transform);
            resolve(coordinates);
          }

          if (!coordinates) {
            _this.clearResults();
            _this.$refs.reset.classList.add("gcd-spin");

            var results = yield Promise.allSettled(Object.entries(_this.providers).map(function (_ref2) {
              var _ref3 = _slicedToArray(_ref2, 2),
                  p = _ref3[0],
                  _ref3$ = _ref3[1],
                  config = _ref3$ === undefined ? {} : _ref3$;

              return PROVIDERS[p].fetch({
                url: config.url,
                icon: config.icon,
                query: q,
                lang: _applicationState2.default.language || 'it-IT',

                limit: _this.limit,
                extent: _this.extent
              });
            }));

            _this._showResults(results.filter(function (p) {
              return 'fulfilled' === p.status;
            }));
            _this.$refs.reset.classList.remove("gcd-spin");
          }
        });

        return function (_x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }());
    },
    _showResults: function _showResults() {
      var _this2 = this;

      var results = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      results.forEach(function (p) {
        _this2.$data.results.push({
          __heading: true,
          provider: p.value.provider,
          label: _this2.providers[p.value.provider].label || p.value.label
        });

        if (!(p.value.results && p.value.results.length)) {
          _this2.$data.results.push({
            __no_results: !(p.value.results && p.value.results.length)
          });
          return;
        }

        p.value.results.forEach(function (item) {
          _this2.$data.results.push((0, _flattenObject.flattenObject)(_extends({}, item, {
            provider: p.value.provider,
            __uid: (0, _utils.uniqueId)(),
            __icon: _this2.providers[p.value.provider].icon || p.value.icon,
            __selected: false
          })));
        });
      });
    },
    onQuery: function onQuery(evt) {
      if ('Enter' === evt.key || 13 === evt.which || 13 === evt.keyCode) {
        evt.preventDefault();
        this.query(evt.target.value.trim());
      }
    },
    onValue: function onValue(evt) {
      this.$refs.reset.classList.toggle("gcd-hidden", evt.target.value.trim().length === 0);
    },
    onReset: function onReset() {
      this.$refs.input.focus();
      this.$refs.input.value = '';
      this.$refs.reset.classList.add("gcd-hidden");
      this.clearResults();
    },
    _removeItem: function _removeItem(uid) {
      var item = (this.$data.results || []).find(function (r) {
        return uid === r.__uid;
      });

      if (this.features.length) {
        var source = LAYER.getSource();
        source.removeFeature(source.getFeatureById(uid));
      }

      if (item) {
        item.__selected = false;
      }

      if (0 === this.features.length) {
        this._hideMarker();
      }

      if (!is_clearing) {
        this.showMarkerResults(undefined, 0 === this.features.length);
      }
    },
    _createOlMarker: function _createOlMarker(item) {
      var __uid = item.__uid,
          __icon = item.__icon,
          __selected = item.__selected,
          _item = _objectWithoutProperties(item, ['__uid', '__icon', '__selected']);

      var feature = new ol.Feature(_extends({
        geometry: new ol.geom.Point(ol.proj.transform([parseFloat(item.lon), parseFloat(item.lat)], 'EPSG:4326', _gui2.default.getService('map').getEpsg()))
      }, _item));

      feature.setId(__uid);
      return feature;
    },
    onItemClick: function onItemClick(evt, item) {
      if (!item.lat || !item.lon) {
        return;
      }
      evt.preventDefault();
      try {
        var source = LAYER.getSource();

        if (source.getFeatureById(item.__uid)) {
          this._removeItem(item.__uid);
        } else {
          var feature = this._createOlMarker(item);
          source.addFeature(feature);
          _gui2.default.getService('map').zoomToFeatures([feature]);
          item.__selected = true;
          this.showMarkerResults([feature]);
        }
      } catch (e) {
        console.warn(e);
      }
    },
    showMarkerResults: function showMarkerResults(features) {
      var toggle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.$data.results_panel_open && toggle) {
        _gui2.default.closeContent();
        return;
      }

      if (_gui2.default.getCurrentContent()) {
        _gui2.default.closeContent();
      }
      _gui2.default.showQueryResults('Geocoding', { data: [{ layer: LAYER, features: features || LAYER.getSource().getFeatures() }] });
      this.$data.results_panel_open = true;
    },
    _editItem: function () {
      var _ref4 = _asyncToGenerator(function* (layerId, feature) {
        var editing = _store.PluginsRegistry.getPlugin('editing');

        if (!editing) {
          return;
        }

        this.$data.disabled = true;
        try {
          var type = _catalogLayers2.default.getLayerById(layerId).getGeometryType();

          var _feature = (0, _addZValueToOLFeatureGeometry.addZValueToOLFeatureGeometry)({
            geometryType: type,
            feature: new ol.Feature(_extends({}, Object.entries(feature.attributes).reduce(function (acc, attr) {
              return _extends({}, acc, _defineProperty({}, attr[0].replace(feature.attributes.provider + '_', '').toLowerCase(), attr[1]));
            }, {}), feature.attributes, {
              geometry: (0, _convertSingleMultiGeometry.convertSingleMultiGeometry)(feature.geometry, type)
            }))
          });

          yield editing.getApi().addLayerFeature({ layerId: layerId, feature: _feature });
        } catch (err) {
          console.warn(err);
        }
        this.$data.disabled = false;
      });

      function _editItem(_x6, _x7) {
        return _ref4.apply(this, arguments);
      }

      return _editItem;
    }()
  },

  created: function created() {
    var _this3 = this;

    var queryresults = _gui2.default.getService('queryresults');
    var mapService = _gui2.default.getService('map');
    var map = mapService.getMap();

    map.addLayer(LAYER);

    mapService.on('set-layer-zindex', function (_ref5) {
      var layer = _ref5.layer,
          zindex = _ref5.zindex;

      if (layer.get('id') !== LAYER.get('id')) {
        LAYER.setZIndex(zindex + 1);
      }
    });

    queryresults.registerVectorLayer(LAYER);

    _gui2.default.on('closecontent', function () {
      _this3.$data.results_panel_open = false;
    });
    _gui2.default.onafter('setContent', function () {
      if (_this3.$data.results_panel_open) _this3.$data.results_panel_open = false;
    });

    queryresults.onafter('removeFeatureLayerFromResult', function (layer, feature) {
      if (LAYER.get('id') === layer.id) {
        _this3._removeItem(feature.id);
      }
    });

    queryresults.onafter('addActionsForLayers', function (actions, layers) {

      var layer = layers.find(function (l) {
        return LAYER.get('id') === l.id;
      });

      if (!layer) {
        return;
      }

      var editablePointLayers = _catalogLayers2.default.getLayers({ EDITABLE: true, GEOLAYER: true }).filter(function (l) {
        return (0, _isPointGeometryType.isPointGeometryType)(l.getGeometryType());
      }).map(function (l) {
        return { id: l.getId(), name: l.getName(), inediting: l.isInEditing() };
      });

      if (editablePointLayers.find(function (l) {
        return l.inediting;
      })) {
        return;
      }

      queryresults.addCurrentActionToolsLayer({
        id: _QueryResultsActionChooseLayer2.default.name,
        layer: layer,
        action: {
          id: 'choose_layer',
          class: _gui2.default.getFontClass('pencil'),
          state: queryresults.createActionState({ layer: layer }),
          toggleable: true,
          hint: 'Choose a layer',
          cbk: function cbk(layer, feature, action, index) {
            if (1 === editablePointLayers.length) {
              _this3._editItem(editablePointLayers[0].id, feature);
              return;
            }

            action.state.toggled[index] = !action.state.toggled[index];
            queryresults.setCurrentActionLayerFeatureTool({
              layer: layer,
              index: index,
              action: action,
              component: action.state.toggled[index] ? _QueryResultsActionChooseLayer2.default : null
            });
          }
        },
        config: {
          layers: editablePointLayers,
          icon: 'pencil',
          label: 'mapcontrols.geocoding.choose_layer',
          nolayers: 'mapcontrols.geocoding.nolayers',
          cbk: _this3._editItem
        }
      });
    });
  },
  destroyed: function destroyed() {
    _gui2.default.getService('queryresults').unregisterVectorLayer(LAYER);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.has_providers)?_c('div',{class:[ 'ol-geocoder', { 'g3w-disabled': _vm.$data.disabled }]},[_c('div',{staticClass:"gcd-txt-control"},[_c('input',{directives:[{name:"t-placeholder",rawName:"v-t-placeholder",value:(_vm.placeholder),expression:"placeholder"}],ref:"input",staticClass:"gcd-txt-input",attrs:{"type":"text","id":"gcd-input-query","autocomplete":"off"},on:{"keyup":_vm.onQuery,"input":_vm.onValue}}),_vm._v(" "),_c('button',{ref:"reset",staticClass:"gcd-txt-reset gcd-hidden",attrs:{"type":"button","id":"gcd-input-reset","title":"Reset search"},on:{"click":function($event){$event.stopPropagation();return _vm.onReset($event)}}}),_vm._v(" "),_c('button',{staticClass:"btn",attrs:{"type":"button","id":"gcd-search","title":"Submit search"},on:{"click":function($event){$event.stopPropagation();return (function () { return _vm.query(_vm.$refs.input.value); })($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('search'),staticStyle:{"color":"#fff"},attrs:{"aria-hidden":"true"}})]),_vm._v(" "),(_vm.features.length > 0)?_c('button',{staticClass:"btn skin-background-color",attrs:{"type":"button","id":"gcd-trash","title":"Clear markers selection"},on:{"click":function($event){$event.stopPropagation();return _vm.clearMarkers($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('trash'),attrs:{"aria-hidden":"true"}})]):_vm._e(),_vm._v(" "),(_vm.features.length > 0)?_c('button',{staticClass:"btn skin-background-color",attrs:{"type":"button","id":"markers-visibility-layer","title":"Toggle markers visibility"},on:{"click":function($event){$event.stopPropagation();return _vm.toggleLayerVisibility($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass(_vm.is_layer_visible ? 'eye-close': 'eye'),attrs:{"aria-hidden":"true"}})]):_vm._e(),_vm._v(" "),(_vm.features.length > 0)?_c('button',{staticClass:"btn skin-background-color",attrs:{"type":"button","id":"show-markers-results","title":"Toggle sidebar panel"},on:{"click":function($event){$event.stopPropagation();return (function () { return _vm.showMarkerResults(undefined, true); })($event)}}},[_c('code',{style:({ opacity: _vm.$data.results_panel_open ? 0.5 : undefined })},[_vm._v("\n      "+_vm._s(_vm.features.length > 99 ? '99+' : _vm.features.length)+"\n    ")])]):_vm._e()]),_vm._v(" "),_c('ul',{ref:"result",staticClass:"gcd-txt-result"},_vm._l((_vm.$data.results),function(item,i){return _c('li',{key:item.__uid,class:[
        item.provider,
        item.__icon       ? 'gcd-icon-' + item.__icon : '',
        item.__heading    ? 'skin-background-color' : '',
        item.__no_results ? 'gcd-noresult' : '',
        item.__selected   ? 'selected' : '' ],on:{"click":function($event){$event.stopPropagation();return _vm.onItemClick($event, item)}}},[(item.__heading)?_c('div',{staticStyle:{"display":"flex","justify-content":"space-between","padding":"5px"}},[_c('span',{staticStyle:{"color":"#FFF","font-weight":"bold"}},[_vm._v(_vm._s(item.label))])]):(item.__no_results)?_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.noresults),expression:"noresults"}]}):[_c('span',{class:_vm.g3wtemplate.getFontClass(item.__selected ? 'check' : 'uncheck'),staticStyle:{"color":"#000","padding":"5px"}}),_vm._v(" "),('road' === item.__icon)?_c('i',{staticClass:"fa fa-road",staticStyle:{"color":"black"},attrs:{"aria-hidden":"true"}}):('poi' === item.__icon)?_c('img',{staticClass:"gcd-icon",attrs:{"src":"/static/client/images/pushpin.svg","width":"24","height":"24"}}):_vm._e(),_vm._v(" "),_c('a',{attrs:{"href":"","draggable":"false"}},[(item.type)?_c('div',{staticClass:"gcd-type"},[_vm._v(_vm._s(item.type))]):_vm._e(),_vm._v(" "),(item.name)?_c('div',{staticClass:"gcd-name"},[_vm._v(_vm._s(item.name))]):_vm._e(),_vm._v(" "),(item.address_name)?_c('div',{staticClass:"gcd-road"},[_vm._v(_vm._s(item.address_name))]):_vm._e(),_vm._v(" "),(item.address_road || item.address_building || item.address_house_number)?_c('div',{staticClass:"gcd-road"},[_vm._v(_vm._s(item.address_building)+" "+_vm._s(item.address_road)+" "+_vm._s(item.address_house_number))]):_vm._e(),_vm._v(" "),(item.address_city || item.address_town || item.address_village)?_c('div',{staticClass:"gcd-city"},[_vm._v(_vm._s(item.address_postcode)+" "+_vm._s(item.address_city)+" "+_vm._s(item.address_town)+" "+_vm._s(item.address_village))]):_vm._e(),_vm._v(" "),(item.address_state || item.address_country)?_c('div',{staticClass:"gcd-country"},[_vm._v(_vm._s(item.address_state)+" "+_vm._s(item.address_country))]):_vm._e()])]],2)}),0)]):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-547bdae4"

},{"components/QueryResultsActionChooseLayer.vue":236,"g3w-ol/projection/projections":73,"services/gui":319,"store":331,"store/application-state":328,"store/catalog-layers":329,"utils":419,"utils/addZValueToOLFeatureGeometry":338,"utils/convertSingleMultiGeometry":353,"utils/flattenObject":384,"utils/isPointGeometryType":426,"vueify/lib/insert-css":2}],212:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    debounce = _require.debounce;

exports.default = {
  name: "MapControlZoomHistory",
  data: function data() {
    return {
      history: {
        index: 0,
        items: []
      }
    };
  },

  methods: {
    last: function last() {
      this.history.index--;
      this.setMapExtent();
    },
    next: function next() {
      this.history.index++;
      this.setMapExtent();
    },
    setMapExtent: function setMapExtent() {
      _gui2.default.getService('map').getMap().getView().fit(this.history.items[this.history.index]);
    }
  },
  computed: {
    hasEmptyHistory: function hasEmptyHistory() {
      return 0 === this.history.index && 1 === this.history.items.length || this.history.items.length - 1 === this.history.index;
    }
  },

  created: function created() {
    var _this = this;

    var map = _gui2.default.getService('map').getMap();
    var view = map.getView();

    this.history.items.push(view.calculateExtent(map.getSize()));

    this.changeKeyEvent = view.on('change', debounce(function (evt) {
      if (_this.history.index !== _this.history.items.length - 1) {
        _this.history.items.splice(_this.history.index - _this.history.items.length + 1);
      }
      _this.history.items.push(evt.target.calculateExtent(map.getSize()));
      _this.history.index++;
    }, 600));
  },
  beforeDestroy: function beforeDestroy() {
    ol.Object.unByKey(this.changeKeyEvent);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"ol-zoom-history ol-unselectable ol-control",staticStyle:{"display":"flex","gap":"5px"}},[_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:('sdk.mapcontrols.zoomhistory.zoom_last'),expression:"'sdk.mapcontrols.zoomhistory.zoom_last'",arg:"top",modifiers:{"create":true}}]},[_c('button',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.history.index === 0),expression:"history.index === 0"}],attrs:{"type":"button"},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.last($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('reply')})])]),_vm._v(" "),_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:('sdk.mapcontrols.zoomhistory.zoom_next'),expression:"'sdk.mapcontrols.zoomhistory.zoom_next'",arg:"top",modifiers:{"create":true}}]},[_c('button',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.hasEmptyHistory),expression:"hasEmptyHistory"}],attrs:{"type":"button"},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.next($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('share')})])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-5ba4faea"

},{"services/gui":319,"utils":419}],213:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MapFooterRight = require('components/MapFooterRight.vue');

var _MapFooterRight2 = _interopRequireDefault(_MapFooterRight);

var _MapFooterLeft = require('components/MapFooterLeft.vue');

var _MapFooterLeft2 = _interopRequireDefault(_MapFooterLeft);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'Mapfooter',
  props: {
    service: {
      type: Object
    }
  },
  components: {
    MapFooterRight: _MapFooterRight2.default,
    MapFooterLeft: _MapFooterLeft2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"skin-border-color",attrs:{"id":"map_footer"}},[_c('map-footer-left'),_vm._v(" "),_c('map-footer-right',{attrs:{"service":_vm.service}})],1)}
__vue__options__.staticRenderFns = []

},{"components/MapFooterLeft.vue":214,"components/MapFooterRight.vue":215}],214:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'Mapfooter'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex"},attrs:{"id":"map_footer_left"}},[_c('a',{staticStyle:{"margin-left":"5px","align-self":"center","box-shadow":"0 1px 4px 0 rgba(0,0,0,.1), 0 4px 8px 0 rgba(0,0,0,.3)"},attrs:{"href":"https://g3wsuite.it/","target":"_blank"}},[_c('img',{attrs:{"height":"15","src":"/static/client/images/g3wsuite_logo.png","alt":""}})])])}]

},{}],215:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'map-footer-right',

  props: {
    service: {
      type: Object
    }
  },
  data: function data() {
    return {
      mouse: {
        switch_icon: false,
        epsg_4326: false,
        tooltip: null
      },
      mapunit: _applicationState2.default.map.unit
    };
  },

  computed: {
    showmapunits: function showmapunits() {
      return this.service.state.mapunits.length > 1;
    }
  },
  methods: {
    createCopyMapExtentUrl: function createCopyMapExtentUrl() {
      this.service.createCopyMapExtentUrl();
    },
    switchMapsCoordinateTo4326: function switchMapsCoordinateTo4326() {
      this.mouse.epsg_4326 = !this.mouse.epsg_4326;
    }
  },
  watch: {
    'mapunit': function mapunit(unit) {
      _applicationState2.default.map.unit = unit;
      this.service.changeScaleLineUnit(unit);
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      this.service.once('ready', function () {
        _this.mouse.switch_icon = _this.service.getMapControlByType({
          type: 'mouseposition'
        }) && _this.service.getEpsg() !== 'EPSG:4326';
        _this.mouse.tooltip = 'ESPG ' + _this.service.getCrs().split(':')[1] + ' <--> WGS84';
      });
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex"},attrs:{"id":"map_footer_right"}},[_c('div',{attrs:{"id":"scale-control"}}),_vm._v(" "),(_vm.mouse.switch_icon && !_vm.isMobile())?_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:(_vm.mouse.tooltip),expression:"mouse.tooltip",arg:"top",modifiers:{"create":true}}],attrs:{"id":"switch-mouse-coordinate"},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.switchMapsCoordinateTo4326($event)}}},[_c('span',{staticClass:"skin-color-dark hide-cursor-caret-color",class:_vm.g3wtemplate.getFontClass('mouse')})]):_vm._e(),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.mouse.epsg_4326),expression:"!mouse.epsg_4326"}],attrs:{"id":"mouse-position-control"}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.mouse.epsg_4326),expression:"mouse.epsg_4326"}],attrs:{"id":"mouse-position-control-epsg-4326"}}),_vm._v(" "),(_vm.showmapunits)?_c('div',{attrs:{"id":"scale-line-units"}},[_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.mapunit),expression:"mapunit"}],staticClass:"skin-color-dark",staticStyle:{"padding":"5px 2px","font-weight":"bold","border":"0","cursor":"pointer"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.mapunit=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},_vm._l((_vm.service.state.mapunits),function(unit){return _c('option',{directives:[{name:"t",rawName:"v-t",value:(("sdk.mapcontrols.scaleline.units." + unit)),expression:"`sdk.mapcontrols.scaleline.units.${unit}`"}],staticStyle:{"font-weight":"bold"},domProps:{"value":unit,"selected":_vm.mapunit === unit}})}),0)]):_vm._e(),_vm._v(" "),_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:('sdk.tooltips.copy_map_extent_url'),expression:"'sdk.tooltips.copy_map_extent_url'",arg:"top",modifiers:{"create":true}}],staticStyle:{"background-color":"#eeeeee"},attrs:{"id":"permalink"}},[_c('span',{staticClass:"skin-color-dark",class:_vm.g3wtemplate.getFontClass('link'),on:{"click":function($event){$event.stopPropagation();return _vm.createCopyMapExtentUrl($event)}}})])])}
__vue__options__.staticRenderFns = []

},{"store/application-state":328}],216:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'metadata',

  data: function data() {
    return {
      state: null
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div')}
__vue__options__.staticRenderFns = []

},{}],217:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".layer_header[data-v-fee105a8]{padding:5px;margin-bottom:0;margin-top:0;cursor:pointer}.layer-name[data-v-fee105a8]{font-weight:700}.layer-header-icon[data-v-fee105a8]{margin-right:10px;color:#999}.layer_header span.open-close[data-v-fee105a8]{position:absolute;right:5px;color:#999}.metadata-label[data-v-fee105a8]{font-weight:700;font-size:1.1em}.row[data-v-fee105a8]{padding:10px;border-bottom:1px solid #e2e2e2}.nav-tabs[data-v-fee105a8]{border-bottom:0 solid #ddd}.nav-tabs>li.active>a[data-v-fee105a8],.nav-tabs>li.active>a[data-v-fee105a8]:focus,.nav-tabs>li.active>a[data-v-fee105a8]:hover{border-width:0}.nav-tabs>li>a[data-v-fee105a8]{border:none;color:#aeaeae}.nav-tabs>li.active>a[data-v-fee105a8],.nav-tabs>li>a[data-v-fee105a8]:hover{border:none;background:transparent}.nav-tabs>li>a[data-v-fee105a8]:after{content:\"\";height:2px;position:absolute;width:100%;left:0;bottom:-1px;transition:all .25s ease 0s;transform:scale(0)}.nav-tabs>li.active>a[data-v-fee105a8]:after,.nav-tabs>li:hover>a[data-v-fee105a8]:after{transform:scale(1)}.tab-nav>li>a[data-v-fee105a8]:after{background:#21527d none repeat scroll 0 0;color:#fff}.tab-content[data-v-fee105a8]{margin:10px;background-color:#eee;overflow:auto}.spatial-tab[data-v-fee105a8]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mixins = require('mixins');

exports.default = {
  name: "layer",
  mixins: [_mixins.metadataMixin],
  props: {
    state: {}
  },
  data: function data() {
    return {
      show: false
    };
  },

  computed: {
    isSpatial: function isSpatial() {
      return this.state.geometrytype != 'NoGeometry';
    }
  },
  methods: {
    showHideInfo: function showHideInfo() {
      this.show = !this.show;
    }
  },
  mounted: function mounted() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"row-info"},[_c('h4',{staticClass:"layer_header",attrs:{"data-toggle":"collapse","data-target":'#' + _vm.state.id},on:{"click":_vm.showHideInfo}},[_c('i',{staticClass:"layer-header-icon action-button nohover",class:[_vm.isSpatial ? _vm.g3wtemplate.font['map']: _vm.g3wtemplate.font['table']],attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{staticClass:"layer-name"},[_vm._v(_vm._s(_vm.state.name))]),_vm._v(" "),_c('span',{staticClass:"action-button nohover open-close",class:[_vm.show ? _vm.g3wtemplate.getFontClass('minus') :_vm.g3wtemplate.getFontClass('plus')]})]),_vm._v(" "),_c('div',{staticClass:"collapse",attrs:{"id":_vm.state.id}},[_c('ul',{staticClass:"metadata-nav-tabs nav nav-tabs",attrs:{"role":"tablist"}},[_c('li',{staticClass:"active spatial-tab",attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.groups.general'),expression:"'sdk.metadata.groups.layers.groups.general'"}],attrs:{"href":'#layer_general_' + _vm.state.id,"aria-controls":"general","role":"tab","data-toggle":"tab"}})]),_vm._v(" "),(_vm.isSpatial)?_c('li',{staticClass:"spatial-tab",attrs:{"role":"presentation"}},[_c('a',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.groups.spatial'),expression:"'sdk.metadata.groups.layers.groups.spatial'"}],attrs:{"href":'#layer_spatial_' + _vm.state.id,"aria-controls":"profile","role":"tab","data-toggle":"tab"}})]):_vm._e()]),_vm._v(" "),_c('div',{staticClass:"tab-content"},[_c('div',{staticClass:"tab-pane active",attrs:{"role":"tabpanel","id":'layer_general_' + _vm.state.id}},[_c('div',{staticClass:"container-fluid"},[(_vm.findAttributeFormMetadataAttribute('title'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.title'),expression:"'sdk.metadata.groups.layers.fields.subfields.title'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_vm._v(_vm._s(_vm.state.metadata.title))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('name'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.name'),expression:"'sdk.metadata.groups.layers.fields.subfields.name'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_vm._v(_vm._s(_vm.state.name))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('source'))?_c('div',{staticClass:"row metadata-layer-source"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.source'),expression:"'sdk.metadata.groups.layers.fields.subfields.source'"}],staticClass:"col-md-2 col-sm-12 metadata-label metadata-layer-source-value-key"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value metadata-layer-source-value"},[_vm._v(_vm._s(_vm.state.source.type))])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('abstract'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.abstract'),expression:"'sdk.metadata.groups.layers.fields.subfields.abstract'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value",domProps:{"innerHTML":_vm._s( _vm.state.metadata.abstract)}})]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('keywords'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.keywords'),expression:"'sdk.metadata.groups.layers.fields.subfields.keywords'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_c('div',[_vm._v(_vm._s(_vm.state.metadata.keywords.join(', ')))])])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('metadataurl') && _vm.state.metadata.metadataurl.onlineresources)?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.metadataurl'),expression:"'sdk.metadata.groups.layers.fields.subfields.metadataurl'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_c('a',{attrs:{"href":_vm.state.metadata.metadataurl.onlineresources}},[_vm._v(_vm._s(_vm.state.metadata.metadataurl.onlineresources))])])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('dataurl') && _vm.state.metadata.dataurl.onlineresources)?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.dataurl'),expression:"'sdk.metadata.groups.layers.fields.subfields.dataurl'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value"},[_c('a',{attrs:{"href":_vm.state.metadata.dataurl.onlineresources}},[_vm._v(_vm._s(_vm.state.metadata.dataurl.onlineresources))])])]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('attributes'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.attributes'),expression:"'sdk.metadata.groups.layers.fields.subfields.attributes'"}],staticClass:"col-md-2 col-sm-12 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-md-10 col-sm-12 value",staticStyle:{"overflow":"auto"}},[_c('table',{staticClass:"table table-striped",staticStyle:{"background-color":"#eeeeee !important"}},[_c('thead',[_c('tr',_vm._l((_vm.state.metadata.attributes[0]),function(value,header){return _c('th',[_vm._v(_vm._s(header))])}),0)]),_vm._v(" "),_c('tbody',_vm._l((_vm.state.metadata.attributes),function(attribute){return _c('tr',_vm._l((attribute),function(value,header){return _c('td',[_vm._v(_vm._s(value))])}),0)}),0)])])]):_vm._e()])]),_vm._v(" "),_c('div',{staticClass:"tab-pane",attrs:{"role":"tabpanel","id":'layer_spatial_'+_vm.state.id}},[_c('div',{staticClass:"container-fluid"},[(_vm.findMetadataAttribute('crs'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.crs'),expression:"'sdk.metadata.groups.layers.fields.subfields.crs'"}],staticClass:"col-sm-2 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-10 value"},[_vm._v(_vm._s(_vm.state.crs.epsg))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('geometrytype'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.geometrytype'),expression:"'sdk.metadata.groups.layers.fields.subfields.geometrytype'"}],staticClass:"col-sm-2 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-10 value"},[_vm._v(_vm._s(_vm.state.geometrytype))])]):_vm._e(),_vm._v(" "),(_vm.findMetadataAttribute('bbox'))?_c('div',{staticClass:"row"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.fields.subfields.bbox'),expression:"'sdk.metadata.groups.layers.fields.subfields.bbox'"}],staticClass:"col-sm-2 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-10 value"},_vm._l((_vm.state.bbox),function(value,key){return _c('p',[_c('span',{staticStyle:{"font-weight":"bold","margin-right":"5px"}},[_vm._v(_vm._s(key))]),_vm._v(" "),_c('span',[_vm._v(_vm._s(value))])])}),0)]):_vm._e(),_vm._v(" "),(_vm.findAttributeFormMetadataAttribute('crs'))?_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-2 metadata-label"},[_vm._v("CRS")]),_vm._v(" "),_c('div',{staticClass:"col-sm-10 value"},_vm._l((_vm.state.metadata.crs),function(crs){return _c('div',[_c('span',[_vm._v(_vm._s(crs))])])}),0)]):_vm._e()])])])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-fee105a8"

},{"mixins":302,"vueify/lib/insert-css":2}],218:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-nav-bar li a[data-v-0e556a34]{text-align:center}.metadata-nav-bar li a i[data-v-0e556a34]{margin-right:5px}.metadata-item-tab[data-v-0e556a34]{margin-right:10px;border-radius:3px;margin-bottom:10px}.metadata-body[data-v-0e556a34]{overflow-y:auto;overflow-x:hidden;padding-left:0;padding-right:0}.tab-title[data-v-0e556a34]{position:absolute;bottom:10px;right:auto}.row-info[data-v-0e556a34]{margin:0!important;padding-top:10px;padding-bottom:10px;border-bottom:1px solid #eee}.row-info .label[data-v-0e556a34]{font-weight:700}.h_90[data-v-0e556a34]{height:90%}.h_100[data-v-0e556a34]{height:100%}#project-catalog[data-v-0e556a34]{position:relative;overflow:auto}.nav-tabs-wrapper[data-v-0e556a34]{display:inline-block;margin-bottom:-6px;margin-left:1.25%;margin-right:1.25%;position:relative;width:100%}.nav-tabs[data-v-0e556a34]{border-bottom:0 none}.nav-stacked[data-v-0e556a34]{font-size:1.2em;font-weight:700;padding:10px 0}.nav-stacked li a[data-v-0e556a34]{color:#fff}.left-vertical-tabs[data-v-0e556a34]{padding-left:0!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _MetadataLayer = require('components/MetadataLayer.vue');

var _MetadataLayer2 = _interopRequireDefault(_MetadataLayer);

var _MetadataProjectTabContent = require('components/MetadataProjectTabContent.vue');

var _MetadataProjectTabContent2 = _interopRequireDefault(_MetadataProjectTabContent);

var _MetadataProjectBBoxContent = require('components/MetadataProjectBBoxContent.vue');

var _MetadataProjectBBoxContent2 = _interopRequireDefault(_MetadataProjectBBoxContent);

var _MetadataProjectContactsContent = require('components/MetadataProjectContactsContent.vue');

var _MetadataProjectContactsContent2 = _interopRequireDefault(_MetadataProjectContactsContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "project",
  data: function data() {
    return {
      state: this.$options.state,
      iconsClass: {
        info: this.g3wtemplate.getFontClass("info-circle"),
        globe: this.g3wtemplate.getFontClass("globe"),
        bars: this.g3wtemplate.getFontClass("bars")
      }
    };
  },

  components: {
    'metadata-layer': _MetadataLayer2.default,
    'metadata-tab-content': _MetadataProjectTabContent2.default,
    'metadata-bbox-content': _MetadataProjectBBoxContent2.default,
    'metadata-contacts-content': _MetadataProjectContactsContent2.default
  },
  methods: {
    isArrayorObject: function isArrayorObject(value) {
      return Array.isArray(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
    },
    setComponent: function setComponent(key) {
      var component = void 0;
      switch (key) {
        case 'extent':
          component = 'metadata-bbox-content';
          break;
        case 'contactinformation':
          component = 'metadata-contacts-content';
          break;
        default:
          component = 'metadata-tab-content';
      }
      return component;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"project-catalog"}},[_c('div',{class:_vm.isMobile() ? 'mobile' : null,staticStyle:{"padding":"0"},attrs:{"id":"project-catalog-container"}},[_c('ul',{staticClass:"nav nav-tabs metadata-nav-bar",attrs:{"role":"tablist"}},[_c('li',{staticClass:"active"},[_c('a',{staticClass:"metadata-item-tab general",attrs:{"data-toggle":"tab","href":"#general"}},[_c('i',{staticClass:"action-button nohover",class:_vm.g3wtemplate.getFontClass('info'),attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.general.title'),expression:"'sdk.metadata.groups.general.title'"}],staticStyle:{"font-weight":"bold"}})])]),_vm._v(" "),_c('li',[_c('a',{staticClass:"metadata-item-tab spatial",attrs:{"data-toggle":"tab","href":"#spatial"}},[_c('i',{staticClass:"action-button nohover",class:_vm.iconsClass.globe,attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.spatial.title'),expression:"'sdk.metadata.groups.spatial.title'"}],staticStyle:{"font-weight":"bold"}})])]),_vm._v(" "),_c('li',[_c('a',{staticClass:"metadata-item-tab layers",attrs:{"data-toggle":"tab","href":"#metadata_layers"}},[_c('i',{staticClass:"action-button nohover",class:_vm.iconsClass.bars,attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.layers.title'),expression:"'sdk.metadata.groups.layers.title'"}],staticStyle:{"font-weight":"bold"}})])])])]),_vm._v(" "),_c('div',{staticClass:"col-sm-12 metadata-body tab-content"},[_c('div',{staticClass:"tab-pane fade in active",attrs:{"id":"general"}},[_vm._l((_vm.state.groups.general),function(data,key){return _c('div',{staticClass:"row h_100 row-info"},[_c(_vm.setComponent(key),{tag:"component",attrs:{"data":data,"fieldName":key}})],1)})],2),_vm._v(" "),_c('div',{staticClass:"tab-pane fade",attrs:{"id":"spatial"}},[_c('div',[_vm._l((_vm.state.groups.spatial),function(data,key){return _c('div',{staticClass:"row row-info"},[_c(_vm.setComponent(key),{tag:"component",attrs:{"data":data,"fieldName":key}})],1)})],2)]),_vm._v(" "),_c('div',{staticClass:"tab-pane fade",attrs:{"id":"metadata_layers"}},_vm._l((_vm.state.groups.layers.layers.value),function(layer){return _c('metadata-layer',{attrs:{"state":layer}})}),1)])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0e556a34"

},{"components/MetadataLayer.vue":217,"components/MetadataProjectBBoxContent.vue":219,"components/MetadataProjectContactsContent.vue":220,"components/MetadataProjectTabContent.vue":221,"vueify/lib/insert-css":2}],219:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-label[data-v-b715e0e8]{font-weight:700;font-size:1.1em}.bbox-labels[data-v-b715e0e8]{font-weight:700}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "metadata-bbox",

  props: {
    data: {}
  },
  data: function data() {
    return {
      bboxlabels: ['MINX', 'MINY', 'MAXX', 'MAXY']
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrap-content-tab"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.data.label),expression:"data.label"}],staticClass:"col-sm-2 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-10 value",staticStyle:{"margin-top":"0"}},_vm._l((_vm.data.value),function(value,index){return _c('div',[_c('span',{staticClass:"bbox-labels"},[_vm._v(_vm._s(_vm.bboxlabels[index]))]),_vm._v(" "+_vm._s(value)+"\n      ")])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-b715e0e8"

},{"vueify/lib/insert-css":2}],220:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-label[data-v-60ad65fc]{font-weight:700;font-size:1.1em}.metadata-contact-label[data-v-60ad65fc]{font-weight:700}.contact-icon[data-v-60ad65fc]{margin-right:3px}.row[data-v-60ad65fc]{margin-bottom:5px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = {
  name: "metadatacontatcs",
  props: {
    data: {}
  },
  data: function data() {
    return {
      iconsClass: {
        contactelectronicmailaddress: this.g3wtemplate.getFontClass("mail"),
        personprimary: this.g3wtemplate.getFontClass("user"),
        contactvoicetelephone: this.g3wtemplate.getFontClass("mobile")
      }
    };
  },

  methods: {
    sanitizeValue: function sanitizeValue(value) {
      if (value !== null && value !== undefined) {
        if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
          value = Object.keys(value).length ? value : '';
        } else if (Array.isArray(value)) {
          value = value.length ? value : '';
        }
      }
      return value;
    },
    geti18n: function geti18n(key) {}
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrap-content-tab"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.data.label),expression:"data.label"}],staticClass:"col-sm-2 metadata-label"}),_vm._v(" "),_c('div',{staticClass:"col-sm-10 value",staticStyle:{"margin-top":"0"}},_vm._l((_vm.data.value),function(value,key){return _c('div',[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-2 metadata-contact-label"},[_c('i',{staticClass:"contact-icon",class:_vm.iconsClass[key],attrs:{"aria-hidden":"true"}}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.general.fields.subfields.contactinformation.' + key),expression:"'sdk.metadata.groups.general.fields.subfields.contactinformation.' + key"}]})]),_vm._v(" "),_c('div',{staticClass:"col-sm-10"},[(key === 'personprimary')?_vm._l((value),function(subvalue,key){return _c('div',[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.metadata.groups.general.fields.subfields.contactinformation.' + key),expression:"'sdk.metadata.groups.general.fields.subfields.contactinformation.' + key"}],staticClass:"metadata-contact-label"}),_vm._v(" "),_c('span',[_vm._v(_vm._s(subvalue))])])}):_c('div',[(key === 'contactelectronicmailaddress')?[_c('a',{staticStyle:{"font-weight":"bold"},attrs:{"href":'mailto:' + _vm.sanitizeValue(value)}},[_vm._v(_vm._s(_vm.sanitizeValue(value)))])]:[_vm._v("\n              "+_vm._s(_vm.sanitizeValue(value))+"\n            ")]],2)],2)])])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-60ad65fc"

},{"vueify/lib/insert-css":2}],221:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".metadata-label[data-v-6b130710]{font-weight:700;font-size:1.1em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = {
  name: "metadata-tab-content",

  props: {
    data: {},
    fieldName: {}
  },
  computed: {
    arrayToString: function arrayToString() {
      return this.data.value.join(', ');
    }
  },
  methods: {
    isArrayorObject: function isArrayorObject(value) {
      return Array.isArray(value) || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrap-content-tab"},[_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.data.label),expression:"data.label"}],staticClass:"col-sm-2 metadata-label"}),_vm._v(" "),(_vm.fieldName == 'keywords')?_c('div',{staticClass:"col-sm-10 value"},[_vm._v("\n    "+_vm._s(_vm.arrayToString)+"\n  ")]):(_vm.fieldName == 'wms_url')?_c('div',{staticClass:"col-sm-10 value",staticStyle:{"margin-top":"0"}},[_c('span',[_vm._v(_vm._s(_vm.data.value))])]):(!_vm.isArrayorObject(_vm.data.value))?_c('div',{staticClass:"col-sm-10 value",staticStyle:{"margin-top":"0"}},[_c('span',{domProps:{"innerHTML":_vm._s(_vm.data.value)}})]):(_vm.fieldName == 'abstract')?_c('div',{staticClass:"col-sm-10 value",staticStyle:{"margin-top":"0"}},[_c('span',{domProps:{"innerHTML":_vm._s(_vm.data.value)}})]):_c('div',{staticClass:"col-sm-10 value",staticStyle:{"margin-top":"0"}},_vm._l((_vm.data.value),function(value,key){return _c('div',[_c('span',[_vm._v(_vm._s(value))])])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-6b130710"

},{"vueify/lib/insert-css":2}],222:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _navbaritems = require("services/navbaritems");

var _navbaritems2 = _interopRequireDefault(_navbaritems);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "NavbaritemLeft",
  data: function data() {
    return {
      items: _navbaritems2.default.state.items.right
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"nav navbar-nav navbar-left"},_vm._l((_vm.items),function(item){return _c(item,{key:item.id,tag:"li"})}),1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-2c7478a1"

},{"services/navbaritems":321}],223:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _navbaritems = require("services/navbaritems");

var _navbaritems2 = _interopRequireDefault(_navbaritems);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "navbar-item-right",

  data: function data() {
    return {
      items: _navbaritems2.default.state.items.right
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"nav navbar-nav navbar-right"},_vm._l((_vm.items),function(item){return _c(item,{key:item.id,tag:"li"})}),1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-c140951c"

},{"services/navbaritems":321}],224:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'download-notify'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"download",rawName:"v-download.show",modifiers:{"show":true}}],staticClass:"skin-color",attrs:{"id":"download_notification","title":"DOWNLOAD"}},[_c('bar-loader',{attrs:{"loading":"true"}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass('download'),staticStyle:{"padding":"3px"}})],1)}
__vue__options__.staticRenderFns = []

},{}],225:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'online-notify'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"online",rawName:"v-online:hide",arg:"hide"}],staticStyle:{"color":"#999"},attrs:{"id":"offline_notification"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('wifi')}),_vm._v(" "),_c('div',{staticStyle:{"font-weight":"bold","font-size":"0.4em"}},[_vm._v("offline")])])}
__vue__options__.staticRenderFns = []

},{}],226:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'plugins-notify'
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"plugins",rawName:"v-plugins"}],staticStyle:{"color":"#994b10"},attrs:{"id":"plugins_notification"}},[_c('bar-loader',{attrs:{"loading":"true"}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass('plugin')})],1)}
__vue__options__.staticRenderFns = []

},{}],227:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _PrintSelectAtlasFieldValues = require('components/PrintSelectAtlasFieldValues.vue');

var _PrintSelectAtlasFieldValues2 = _interopRequireDefault(_PrintSelectAtlasFieldValues);

var _PrintFidAtlasValues = require('components/PrintFidAtlasValues.vue');

var _PrintFidAtlasValues2 = _interopRequireDefault(_PrintFidAtlasValues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'print',

  data: function data() {
    return {
      state: null,

      templateChanged: false,
      button: {
        class: "btn-success",
        type: "stampa",
        disabled: false
      }
    };
  },

  components: {
    SelectAtlasFieldValues: _PrintSelectAtlasFieldValues2.default,
    FidAtlasValues: _PrintFidAtlasValues2.default
  },
  computed: {
    disabled: function disabled() {
      return this.state.output.loading || !!this.state.atlas && this.state.atlasValues.length === 0;
    }
  },
  methods: {
    setDisabledPrintButton: function setDisabledPrintButton() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.button.disabled = bool;
    },
    setAtlasValues: function setAtlasValues() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.state.atlasValues = values;
    },
    onChangeTemplate: function () {
      var _ref = _asyncToGenerator(function* () {
        this.templateChanged = true;
        this.$options.service.changeTemplate();
        yield this.$nextTick();
        this.templateChanged = false;
      });

      function onChangeTemplate() {
        return _ref.apply(this, arguments);
      }

      return onChangeTemplate;
    }(),
    onChangeScale: function onChangeScale() {
      this.$options.service.changeScale();
    },
    onChangeFormat: function onChangeFormat() {},
    onChangeDpi: function onChangeDpi() {},
    onChangeRotation: function onChangeRotation(evt) {
      if (this.state.rotation >= 0 && !_.isNil(this.state.rotation) && this.state.rotation != '') {
        this.state.rotation = this.state.rotation > 360 ? 360 : this.state.rotation;
        evt.target.value = this.state.rotation;
      } else if (this.state.rotation < 0) {
        this.state.rotation = this.state.rotation < -360 ? -360 : this.state.rotation;
        evt.target.value = this.state.rotation;
      } else {
        this.state.rotation = 0;
      }
      this.$options.service.changeRotation();
    },
    print: function print() {
      this.$options.service.print();
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"treeview-menu",attrs:{"id":"print"}},[_c('li',[_c('form',{staticClass:"g3w-search-form form-horizonal"},[_c('div',{staticClass:"box-body"},[_c('transition',{attrs:{"duration":500,"name":"fade"}},[_c('bar-loader',{attrs:{"loading":_vm.state.loading}})],1),_vm._v(" "),_c('helpdiv',{attrs:{"message":"sdk.print.help"}}),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.template'),expression:"'sdk.print.template'"}],attrs:{"for":"templates"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.state.template),expression:"state.template"}],staticClass:"form-control",style:({marginBottom: this.state.atlas && '10px'}),attrs:{"id":"templates"},on:{"change":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.state, "template", $event.target.multiple ? $$selectedVal : $$selectedVal[0])},_vm.onChangeTemplate]}},_vm._l((_vm.state.print),function(print){return _c('option',{domProps:{"value":print.name}},[_vm._v(_vm._s(print.name)+"\n          ")])}),0),_vm._v(" "),(!_vm.state.atlas)?[_c('label',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.scale'),expression:"'sdk.print.scale'"}],attrs:{"for":"scala"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.state.scala),expression:"state.scala"}],staticClass:"form-control",attrs:{"id":"scala"},on:{"change":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.state, "scala", $event.target.multiple ? $$selectedVal : $$selectedVal[0])},_vm.onChangeScale]}},_vm._l((_vm.state.scale),function(scala){return _c('option',{domProps:{"value":scala.value}},[_vm._v(_vm._s(scala.label)+"\n            ")])}),0),_vm._v(" "),_c('label',{attrs:{"for":"dpi"}},[_vm._v("dpi")]),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.state.dpi),expression:"state.dpi"}],staticClass:"form-control",attrs:{"id":"dpi"},on:{"change":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.state, "dpi", $event.target.multiple ? $$selectedVal : $$selectedVal[0])},_vm.onChangeDpi]}},_vm._l((_vm.state.dpis),function(dpi){return _c('option',[_vm._v(_vm._s(dpi))])}),0),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.rotation'),expression:"'sdk.print.rotation'"}],attrs:{"for":"rotation"}}),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.state.rotation),expression:"state.rotation"}],staticClass:"form-control",attrs:{"min":"-360","max":"360","id":"rotation","type":"number"},domProps:{"value":(_vm.state.rotation)},on:{"input":[function($event){if($event.target.composing){ return; }_vm.$set(_vm.state, "rotation", $event.target.value)},_vm.onChangeRotation]}}),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.format'),expression:"'sdk.print.format'"}],attrs:{"for":"format"}}),_vm._v(" "),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.state.output.format),expression:"state.output.format"}],staticClass:"form-control",attrs:{"id":"format"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.state.output, "format", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.state.formats),function(format){return _c('option',{domProps:{"value":format.value}},[_vm._v(_vm._s(format.label))])}),0)]:(!_vm.templateChanged)?[(_vm.state.atlas.field_name)?[_c('select-atlas-field-values',{attrs:{"atlas":_vm.state.atlas,"reset":!_vm.state.isShow},on:{"disable-print-button":_vm.setDisabledPrintButton,"set-values":_vm.setAtlasValues}})]:[_c('fid-atlas-values',{attrs:{"atlas":_vm.state.atlas,"reset":!_vm.state.isShow},on:{"disable-print-button":_vm.setDisabledPrintButton,"set-values":_vm.setAtlasValues}})]]:_vm._e(),_vm._v(" "),(_vm.state.labels && _vm.state.labels.length)?[_c('div',{staticClass:"print-labels-content",staticStyle:{"margin-top":"5px"}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.labels'),expression:"'sdk.print.labels'"}],staticClass:"skin-color",staticStyle:{"font-weight":"bold","font-size":"1.1em","display":"block","border-bottom":"2px solid #ffffff","margin-bottom":"5px"}}),_vm._v(" "),_c('div',{staticClass:"labels-input-content",staticStyle:{"max-height":"120px","overflow-y":"auto"}},_vm._l((_vm.state.labels),function(label){return _c('span',{key:label.id},[_c('label',{attrs:{"for":("g3w_label_id_input_" + (label.id))}},[_vm._v(_vm._s(label.id))]),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(label.text),expression:"label.text"}],staticClass:"form-control",attrs:{"id":("g3w_label_id_input_" + (label.id))},domProps:{"value":(label.text)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(label, "text", $event.target.value)}}})])}),0)])]:_vm._e()],2),_vm._v(" "),_c('div',{staticClass:"box-footer",staticStyle:{"background-color":"transparent"}},[_c('span',[_c('button',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.button.disabled),expression:"button.disabled"},{name:"download",rawName:"v-download"},{name:"t",rawName:"v-t",value:('create_print'),expression:"'create_print'"}],staticClass:"sidebar-button-run btn",staticStyle:{"width":"100%","font-weight":"bold"},attrs:{"id":"printbutton"},on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.print($event)}}})])])])])])}
__vue__options__.staticRenderFns = []

},{"components/PrintFidAtlasValues.vue":228,"components/PrintSelectAtlasFieldValues.vue":230}],228:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "fid-atlas-values",
  props: {
    atlas: {
      type: Object
    },
    reset: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      value: ''
    };
  },

  methods: {
    validateValue: function validateValue(value) {
      value = value && 1 * value;
      return Number.isInteger(value) && value >= 0 && value < this.atlas.feature_count || null;
    }
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler(value) {
        var _this = this;

        this.value = value;
        var values = new Set();
        var addValue = function addValue(value) {
          return _this.validateValue(value) !== null && values.add(value);
        };
        var addRangeToValues = function addRangeToValues() {
          var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          var rangeLenght = range.length;
          for (var i = 1; i < rangeLenght; i++) {
            var start = range[i - 1];
            var end = range[i];
            for (var _i = start; _i < end; _i++) {
              values.add(_i + '');
            }
          }
          values.add(range[rangeLenght - 1]);
        };
        if (value) {
          value.split(',').forEach(function (value) {
            if (value) {
              if (value.indexOf('-') !== -1) {
                var _values = value.split('-');
                var range = _values.filter(function (value) {
                  return _this.validateValue(value) !== null;
                });
                if (range.length === _values.length) {
                  var canAdd = range.reduce(function (bool, value, currentIndex) {
                    return bool && (currentIndex === 0 || range[currentIndex - 1] <= value);
                  }, true);
                  canAdd && addRangeToValues(range);
                }
              } else addValue(value);
            }
          });
        }
        this.$emit('set-values', Array.from(values));
        this.$emit('disable-print-button', value.trim() === '');
      }
    },
    reset: function reset(bool) {
      if (bool) {
        this.value = '';
        this.$emit('set-values', []);
        this.$emit('disable-print-button', true);
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.value = null;
    this.$emit('disable-print-button', false);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"form-group",staticStyle:{"width":"100%"}},[_c('label',{staticStyle:{"display":"block"},attrs:{"for":_vm.print_atlas_fid}},[_c('span',[_vm._v("fids [max: "+_vm._s(_vm.atlas.feature_count - 1)+"]")])]),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.value),expression:"value"}],staticClass:"form-control",domProps:{"value":(_vm.value)},on:{"keydown":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"space",32,$event.key,[" ","Spacebar"])){ return null; }$event.preventDefault();},"input":function($event){if($event.target.composing){ return; }_vm.value=$event.target.value}}}),_vm._v(" "),_c('div',{staticStyle:{"margin-top":"5px","color":"#ffffff"},attrs:{"id":"fid-print-atals-instruction"}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.fids_instruction'),expression:"'sdk.print.fids_instruction'"}],staticStyle:{"white-space":"pre-line"},attrs:{"id":"fids_intruction"}}),_vm._v(" "),_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.fids_example'),expression:"'sdk.print.fids_example'"}],staticStyle:{"margin-top":"3px","font-weight":"bold"},attrs:{"id":"fids_examples_values"}})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-1dcb18ba"

},{}],229:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    imageToDataURL = _require.imageToDataURL;

exports.default = {
  name: 'print-page',

  data: function data() {
    return {
      state: null,
      disableddownloadbutton: true,
      downloadImageName: '',
      format: null
    };
  },

  computed: {
    loading: function loading() {
      return this.state.loading && this.state.layers;
    }
  },
  methods: {
    setLoading: function setLoading() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      _gui2.default.disableSideBar(bool);
      this.state.loading = bool;
      this.disableddownloadbutton = bool;
    },
    downloadImage: function downloadImage() {
      var _this = this;

      this.setLoading(true);
      if (this.format === 'jpg' || this.format === 'png') {
        this.downloadImageName = 'download.' + this.state.format;
        imageToDataURL({
          src: this.state.url,
          type: 'image/' + this.state.format,
          callback: function callback(url) {
            return setTimeout(function () {
              return _this.setLoading(false);
            });
          }
        });
      }
    }
  },
  watch: {
    'state.url': function () {
      var _ref = _asyncToGenerator(function* (url) {
        var _this2 = this;

        if (url) {
          this.format = this.state.format;
          yield this.$nextTick();

          var timeOut = setTimeout(function () {
            _this2.setLoading(false);
            _gui2.default.showUserMessage({
              type: 'alert',
              message: 'timeout'
            });
          }, _constant.TIMEOUT);

          $(this.$refs.printoutput).load(url, function (response, status) {
            _this2.$options.service.stopLoading();
            status === 'error' && _this2.$options.service.showError();
            clearTimeout(timeOut);
            _this2.setLoading(false);
          });
        }
      });

      function stateUrl(_x2) {
        return _ref.apply(this, arguments);
      }

      return stateUrl;
    }()
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      yield this.$nextTick();
      this.state.layers && this.$options.service.startLoading();
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.state.url && this.state.method === 'POST' && window.URL.revokeObjectURL(this.state.url);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"height":"100%","position":"relative"},attrs:{"id":"print-output"}},[_c('transition',{attrs:{"duration":500,"name":"fade"}},[_c('bar-loader',{attrs:{"loading":_vm.loading}})],1),_vm._v(" "),(_vm.format === 'pdf')?_c('iframe',{ref:"printoutput",staticStyle:{"border":"0","width":"100%","height":"100%"},attrs:{"type":_vm.state.mime_type,"src":_vm.state.url}}):(_vm.format === 'png')?_c('div',{staticClass:"g3w-print-png-output",staticStyle:{"display":"flex","flex-direction":"column","position":"relative","height":"100%"}},[_c('div',{staticStyle:{"display":"flex","justify-content":"flex-end","align-items":"flex-end","margin-top":"5px","margin-bottom":"5px"},attrs:{"id":"g3w-print-header"}},[_c('div',{class:{'g3w-disabled': _vm.disableddownloadbutton}},[_c('a',{attrs:{"href":_vm.state.url,"download":_vm.downloadImageName}},[_c('button',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('sdk.print.download_image'),expression:"'sdk.print.download_image'",modifiers:{"create":true}}],staticClass:"btn skin-button skin-tooltip-left",class:_vm.g3wtemplate.getFontClass('download'),staticStyle:{"font-weight":"bold"},attrs:{"data-placement":"left","data-toggle":"tooltip","data-container":"body","role":"button"},on:{"click":_vm.downloadImage}})])])]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.format==='png' && _vm.state.url),expression:"format==='png' && state.url"}],staticStyle:{"height":"100%","width":"100%","position":"relative","overflow-y":"auto"}},[_c('img',{ref:"printoutput",staticStyle:{"height":"auto","max-width":"100%"},attrs:{"src":_vm.state.url}})])]):_vm._e(),_vm._v(" "),(!_vm.state.layers)?_c('h4',{directives:[{name:"t",rawName:"v-t",value:('sdk.print.no_layers'),expression:"'sdk.print.no_layers'"}],staticStyle:{"font-weight":"bold"}}):_vm._e()],1)}
__vue__options__.staticRenderFns = []

},{"app/constant":5,"services/gui":319,"utils":419}],230:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _mixins = require('mixins');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var autocompleteOptions = require('gui/external/select2/options/autocomplete');

exports.default = {
  name: "selectAtlasFieldValues",
  mixins: [_mixins.autocompleteMixin, _mixins.select2Mixin],
  props: {
    atlas: {
      type: Object,
      required: true
    },
    reset: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    emitValues: function () {
      var _ref = _asyncToGenerator(function* () {
        yield this.$nextTick();
        this.$emit('set-values', this.values);
      });

      function emitValues() {
        return _ref.apply(this, arguments);
      }

      return emitValues;
    }()
  },
  data: function data() {
    return {
      values: []
    };
  },

  watch: {
    values: {
      immediate: true,
      handler: function handler(values) {
        this.$emit('disable-print-button', values.length === 0);
      }
    },
    reset: function reset(bool) {
      if (bool) {
        this.select2 && this.select2.val(null).trigger('change');
        this.values = [];
        this.emitValues();
      }
    }
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      var _this = this;

      yield this.$nextTick();
      var _atlas = this.atlas,
          field = _atlas.field_name,
          layerId = _atlas.qgs_layer_id;

      this.select2 = $('#print_atlas_autocomplete').select2(_extends({
        width: '100%',
        multiple: true,
        dropdownParent: $(this.$el),
        minimumInputLength: 1,
        ajax: {
          delay: 500,
          transport: function () {
            var _ref4 = _asyncToGenerator(function* (_ref3, success, failure) {
              var value = _ref3.data.q;

              try {
                var data = yield _this.autocompleteRequest({
                  layerId: layerId,
                  field: field,
                  value: value
                });
                success({ results: data });
              } catch (error) {
                failure(error);
              }
            });

            function transport(_x, _x2, _x3) {
              return _ref4.apply(this, arguments);
            }

            return transport;
          }()
        }
      }, autocompleteOptions));
      this.select2.on('select2:select', function (evt) {
        var value = evt.params.data.id;
        _this.values.push(value);
        _this.emitValues();
      });
      this.select2.on('select2:unselect', function () {
        var _ref5 = _asyncToGenerator(function* (evt) {
          var value = evt.params.data.id;
          _this.values = _this.values.filter(function (currentValue) {
            return currentValue != value;
          });
          _this.emitValues();
        });

        return function (_x4) {
          return _ref5.apply(this, arguments);
        };
      }());
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.values = null;
    this.$emit('disable-print-button', false);
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"form-group",staticStyle:{"width":"100%"}},[_c('label',{staticStyle:{"display":"block"},attrs:{"for":_vm.print_atlas_autocomplete}},[_c('span',[_vm._v(_vm._s(_vm.atlas.field_name))])]),_vm._v(" "),_c('select',{staticClass:"form-control",attrs:{"name":_vm.atlas.field_name,"id":"print_atlas_autocomplete"}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-40b097a4"

},{"gui/external/select2/options/autocomplete":78,"mixins":302}],231:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var fakeImage = '/static/client/images/FakeProjectThumb.png';

exports.default = {
  name: 'projects-menu',

  data: function data() {
    return {
      state: null,
      loading: false
    };
  },


  methods: {
    trigger: function trigger(item) {
      if (item.cbk) this._initCallback(item);else if (item.href) window.open(item.href, '_blank');else if (item.route) _gui2.default.goto(item.route);else console.log("No action for " + item.title);
    },
    _initCallback: function _initCallback(item) {
      var _this = this;

      this._toggleModal(true);
      item.cbk.call(item, { gid: item.gid }).then(function (promise) {
        promise.then(function (project) {
          if (project) document.title = project.state.html_page_title;
        }).fail(function () {
          _gui2.default.notify.error("<h4>" + t("error_map_loading") + "</h4>" + "<h5>" + t("check_internet_connection_or_server_admin") + "</h5>");
        }).always(function () {
          _this._toggleModal(false);
        });
      });
    },
    _toggleModal: function _toggleModal(state) {
      _gui2.default.showFullModal({ show: state });
      _gui2.default.setLoadingContent(state);
    },
    logoSrc: function logoSrc(src) {
      var imageSrc = void 0;
      var host = this.$options.host || '';
      var has_media = src && -1 !== src.indexOf(_projects2.default.config.mediaurl);
      var not_static = src && -1 === src.indexOf('static') && -1 === src.indexOf('media');

      if (!src) {
        imageSrc = fakeImage;
      } else if (has_media) {
        imageSrc = src;
      } else if (not_static) {
        imageSrc = '' + _projects2.default.config.mediaurl + src;
      } else {
        imageSrc = fakeImage;
      }

      return '' + host + imageSrc;
    }
  }

};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container",attrs:{"id":"menu-projects"}},[_c('div',{staticClass:"row row-equal"},[_vm._l((_vm.state.menuitems),function(menuitem){return _c('div',{key:menuitem.title,staticClass:"col-xs-12 col-sm-4 project-menu",on:{"click":function($event){return _vm.trigger(menuitem)}}},[_c('div',{staticClass:"project-menu-item-image"},[_c('img',{staticClass:"img-responsive",attrs:{"src":_vm.logoSrc(menuitem.thumbnail)}})]),_vm._v(" "),_c('div',{staticClass:"project-menu-item-content"},[_c('div',{staticClass:"project-menu-item-text"},[_c('h4',{staticClass:"project-menu-item-title"},[_vm._v(_vm._s(menuitem.title))]),_vm._v(" "),_c('div',{domProps:{"innerHTML":_vm._s(menuitem.description)}})])])])}),_vm._v(" "),(!_vm.state.menuitems.length)?_c('div',{staticStyle:{"margin-left":"15px"}},[_c('h2',{directives:[{name:"t",rawName:"v-t",value:('no_other_projects'),expression:"'no_other_projects'"}]})]):_vm._e()],2)])}
__vue__options__.staticRenderFns = []

},{"core/i18n/i18n.service":9,"services/gui":319,"store/projects":335}],232:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _querybuilder = require('services/querybuilder');

var _querybuilder2 = _interopRequireDefault(_querybuilder);

var _constant = require('app/constant');

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var operators = Object.values(_constant.FILTER_OPERATORS);

exports.default = {
  name: 'query-builder',

  data: function data() {
    var options = this.$options.options;
    var edit = options !== undefined;
    return {
      edit: edit,
      currentlayer: null,
      message: '',
      filter: edit ? options.filter : '',
      loading: {
        test: false,
        values: false
      },
      values: [],
      manual: true,
      manualvalue: null,
      select: {
        field: null,
        value: null
      }
    };
  },

  computed: {
    fields: function fields() {
      return this.currentlayer ? this.currentlayer.fields : [];
    },
    disabled: function disabled() {
      return !this.filter;
    }
  },
  watch: {
    'select.field': function selectField() {
      this.values = [];
      this.manual = true;
    }
  },
  methods: {
    addToExpression: function addToExpression() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          value = _ref.value,
          type = _ref.type;

      switch (type) {
        case 'operator':
          value = ' ' + value + ' ';
          break;
        case 'field':
          value = '"' + value + '"';
          break;
        case 'value':
          value = '\'' + value + '\'';
          break;
      }
      if (value) this.filter = '' + this.filter + value;
    },
    all: function () {
      var _ref2 = _asyncToGenerator(function* () {
        this.loading.values = true;
        try {
          this.values = yield _querybuilder2.default.getValues({
            layerId: this.currentlayer.id,
            field: this.select.field
          });
        } catch (err) {}
        this.loading.values = false;
        yield this.$nextTick();
        this.manualvalue = null;
        this.manual = false;
      });

      function all() {
        return _ref2.apply(this, arguments);
      }

      return all;
    }(),
    reset: function reset() {
      this.filter = '';
      this.message = '';
      this.filterElement.previous = null;
      this.filterElement.current = null;
      this.filterElement.operator = null;
    },
    test: function () {
      var _ref3 = _asyncToGenerator(function* () {
        var layerId = this.currentlayer.id;
        this.loading.test = true;
        var number_of_features = void 0;
        try {
          number_of_features = yield _querybuilder2.default.test({
            layerId: layerId,
            filter: this.filter
          });
          this.message = number_of_features !== undefined ? ' ' + number_of_features : '';
        } catch (err) {
          this.message = err;
        }
        this.loading.test = false;
        yield this.$nextTick();
      });

      function test() {
        return _ref3.apply(this, arguments);
      }

      return test;
    }(),
    run: function () {
      var _ref4 = _asyncToGenerator(function* () {
        var layerId = this.currentlayer.id;
        this.loading.test = true;
        try {
          var response = yield _querybuilder2.default.run({
            layerId: layerId,
            filter: this.filter
          });
        } catch (err) {}
        this.loading.test = false;
      });

      function run() {
        return _ref4.apply(this, arguments);
      }

      return run;
    }(),
    save: function save() {
      _querybuilder2.default.save({
        layerId: this.currentlayer.id,
        filter: this.filter,
        projectId: this.projectId,
        name: this.edit && this.$options.options.name,
        id: this.edit && this.$options.options.id
      });
    }
  },
  created: function created() {
    var _this = this;

    this.filterElement = {
      current: null,
      previous: null,
      operator: null
    };
    var project = _projects2.default.getCurrentProject();
    this.layers = project.getLayers().filter(function (layer) {
      return !layer.baselayer && layer.geometrytype && layer.geometrytype !== 'NoGeometry' && Array.isArray(layer.fields);
    }).map(function (layer) {
      var relations = project.getRelationsByLayerId({
        layerId: layer.id,
        type: 'ONE'
      });
      var excludejoinfields = [];
      relations.forEach(function (relation) {
        var customPrefix = relation.customPrefix;

        var joinLayer = project.getLayerById(relation.referencingLayer);
        customPrefix = customPrefix === undefined ? joinLayer.getName() + '_' : customPrefix;
        var joinLayerFields = joinLayer.getFields().map(function (field) {
          return '' + customPrefix + field.name;
        });
        excludejoinfields = [].concat(_toConsumableArray(excludejoinfields), _toConsumableArray(joinLayerFields));
      });
      return {
        id: layer.id,
        label: layer.name,
        fields: layer.fields.filter(function (field) {
          return field.show;
        }).map(function (_ref5) {
          var label = _ref5.label,
              name = _ref5.name;
          return {
            label: label,
            name: name
          };
        }).filter(function (field) {
          return excludejoinfields.indexOf(field) === -1;
        })
      };
    });
    this.operators = operators;
    this.currentlayer = this.edit ? this.layers.find(function (layer) {
      return layer.id === _this.$options.options.layerId;
    }) : this.layers[0];
  },
  mounted: function () {
    var _ref6 = _asyncToGenerator(function* () {
      var _this2 = this;

      yield this.$nextTick();
      this.select2 = $('#query_builder_layers_select').select2({
        width: '100%'
      });
      if (this.edit) {
        var index = this.layers.indexOf(this.currentlayer);
        this.select2.val(index);
        this.select2.trigger('change');
      }
      this.select2.on('select2:select', function (evt) {
        _this2.currentlayer = _this2.layers[evt.params.data.id];
        _this2.select.field = null;
        _this2.select.value = null;
        _this2.reset();
      });
    });

    function mounted() {
      return _ref6.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.select2.select2('destroy');
    this.select2 = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"form-group",staticStyle:{"flex-wrap":"nowrap !important"},attrs:{"id":"query_builder"}},[_c('div',{attrs:{"id":"query_builder_header"}}),_vm._v(" "),_c('div',{staticClass:"margin-between-element",attrs:{"id":"query_builder_layers"}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.layers'),expression:"'sdk.querybuilder.panel.layers'"}],staticClass:"querybuilder-title"}),_vm._v(" "),_c('select',{staticClass:"form-control",attrs:{"id":"query_builder_layers_select"}},_vm._l((_vm.layers),function(layer,index){return _c('option',{key:layer.label,staticClass:"bold",domProps:{"value":index}},[_vm._v(_vm._s(layer.label))])}),0)]),_vm._v(" "),_c('div',{staticClass:"margin-between-element",attrs:{"id":"query_builder_fields"}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.fields'),expression:"'sdk.querybuilder.panel.fields'"}],staticClass:"querybuilder-title",attrs:{"id":"query_builder_fields_title"}}),_vm._v(" "),_c('div',{staticClass:"querybuilder-content",attrs:{"id":"query_builder_fields_content"}},[_c('table',{staticClass:"table table-striped content-table"},[_c('tbody',_vm._l((_vm.fields),function(ref){
var name = ref.name;
var label = ref.label;
return _c('tr',{key:name,class:{'skin-background-color lighten': _vm.select.field===name},staticStyle:{"cursor":"pointer"},on:{"click":function($event){_vm.select.field = name},"dblclick":function($event){return _vm.addToExpression({value: name, type: 'field'})}}},[_c('th',{attrs:{"scope":"row"}},[_vm._v(_vm._s(label))])])}),0)])])]),_vm._v(" "),_c('div',{staticClass:"margin-between-element",attrs:{"id":"query_builder_values"}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.values'),expression:"'sdk.querybuilder.panel.values'"}],staticClass:"querybuilder-title",attrs:{"id":"query_builder_values_title"}}),_vm._v(" "),(!_vm.manual)?_c('div',{staticClass:"querybuilder-content margin-between-element",attrs:{"id":"query_builder_values_content"}},[_c('bar-loader',{attrs:{"loading":_vm.loading.values}}),_vm._v(" "),_c('table',{staticClass:"table table-striped content-table"},[_c('tbody',[_vm._l((_vm.values),function(value){return _c('tr',{key:value,class:{'skin-background-color lighten': _vm.select.value===value},staticStyle:{"cursor":"pointer"},on:{"click":function($event){_vm.select.value = value},"dblclick":function($event){return _vm.addToExpression({value: value, type: 'value'})}}},[_c('th',{attrs:{"scope":"row"}},[_vm._v(_vm._s(value))])])}),_vm._v(" "),_vm._m(0)],2)])],1):_c('div',{staticClass:"margin-between-element",staticStyle:{"display":"flex","justify-content":"space-between","align-items":"stretch"},attrs:{"id":"querybuilder-manual"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.manualvalue),expression:"manualvalue"}],staticClass:"form-control",staticStyle:{"border":"0"},attrs:{"style":"border: 0;"},domProps:{"value":(_vm.manualvalue)},on:{"input":function($event){if($event.target.composing){ return; }_vm.manualvalue=$event.target.value}}}),_vm._v(" "),_c('span',{class:_vm.g3wtemplate.getFontClass('plus'),staticStyle:{"cursor":"pointer","font-size":"1.2em","background-color":"white","color":"#000000","padding":"9px"},on:{"click":function($event){_vm.manualvalue && _vm.addToExpression({value: _vm.manualvalue, type: 'value'})}}})]),_vm._v(" "),_c('div',{staticClass:"content-end skin-color",attrs:{"id":"query_builder_values_buttons"}},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.button.manual'),expression:"'sdk.querybuilder.panel.button.manual'"}],staticClass:"query_builder_button btn btn-secondary bold ",class:{'skin-border-color' : _vm.manual},attrs:{"id":"query_builder_values_buttons_sample"},on:{"click":function($event){_vm.manual = true}}}),_vm._v(" "),_c('button',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.button.all'),expression:"'sdk.querybuilder.panel.button.all'"}],staticClass:"query_builder_button btn btn-secondary bold ",class:{'skin-border-color' : !_vm.manual},attrs:{"id":"query_builder_values_buttons_all","disabled":_vm.select.field === null},on:{"click":_vm.all}})])]),_vm._v(" "),_c('div',{staticClass:"margin-between-element",staticStyle:{"margin-top":"auto !important"},attrs:{"id":"query_builder_operators"}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.operators'),expression:"'sdk.querybuilder.panel.operators'"}],staticClass:"querybuilder-title",attrs:{"id":"query_builder_operators_title"}}),_vm._v(" "),_c('div',{staticClass:"content-wrap",attrs:{"id":"query_builder_operators_content"}},_vm._l((_vm.operators),function(operator){return _c('button',{key:operator,staticClass:"query_builder_button btn btn-secondary skin-color bold",on:{"click":function($event){return _vm.addToExpression({value: operator, type: 'operator'})}}},[_vm._v(_vm._s(operator))])}),0)]),_vm._v(" "),_c('div',{attrs:{"id":"query_builder_footer"}},[_c('div',{attrs:{"id":"query_builder_expression"}},[_c('div',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.expression'),expression:"'sdk.querybuilder.panel.expression'"}],staticClass:"querybuilder-title",attrs:{"id":"query_builder_expression_title"}}),_vm._v(" "),_c('div',{attrs:{"id":"query_builder_expression_content"}},[_c('textarea',{directives:[{name:"model",rawName:"v-model",value:(_vm.filter),expression:"filter"}],staticStyle:{"width":"100%","resize":"none","height":"100px","color":"#000000"},domProps:{"value":(_vm.filter)},on:{"input":function($event){if($event.target.composing){ return; }_vm.filter=$event.target.value}}})])]),_vm._v(" "),_c('div',{staticClass:"margin-between-element",attrs:{"id":"query_builder_message"}},[_c('bar-loader',{attrs:{"loading":_vm.loading.test}}),_vm._v(" "),_c('span',{directives:[{name:"show",rawName:"v-show",value:(_vm.message),expression:"message"},{name:"t",rawName:"v-t",value:('sdk.querybuilder.messages.number_of_features'),expression:"'sdk.querybuilder.messages.number_of_features'"}],staticClass:"bold skin-color"}),_c('span',{staticClass:"bold skin-color"},[_vm._v(_vm._s(_vm.message))])],1),_vm._v(" "),_c('div',{staticClass:"content-end margin-between-element",attrs:{"id":"query_builder_footer_buttons"}},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.button.test'),expression:"'sdk.querybuilder.panel.button.test'"}],staticClass:"query_builder_button btn btn-secondary  bold",attrs:{"disabled":_vm.disabled},on:{"click":_vm.test}}),_vm._v(" "),_c('button',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.button.clear'),expression:"'sdk.querybuilder.panel.button.clear'"}],staticClass:"query_builder_button btn btn-secondary  bold",on:{"click":_vm.reset}}),_vm._v(" "),_c('button',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.button.run'),expression:"'sdk.querybuilder.panel.button.run'"}],staticClass:"query_builder_button btn btn-secondary  bold",attrs:{"disabled":_vm.disabled},on:{"click":_vm.run}}),_vm._v(" "),_c('button',{directives:[{name:"t",rawName:"v-t",value:('sdk.querybuilder.panel.button.save'),expression:"'sdk.querybuilder.panel.button.save'"}],staticClass:"query_builder_button btn btn-secondary  bold",attrs:{"disabled":_vm.disabled},on:{"click":_vm.save}})])])])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th',{attrs:{"scope":"row"}})])}]

},{"app/constant":5,"services/querybuilder":322,"store/projects":335}],233:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _querybuilder = require('services/querybuilder');

var _querybuilder2 = _interopRequireDefault(_querybuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var QueryBuilderUIFactory = require('gui/querybuilder/querybuilderuifactory');

exports.default = {
  name: "g3w-querybuilder-search",
  props: {
    querybuildersearch: {
      required: true
    }
  },
  data: function data() {
    return {
      loading: false,
      showinfo: false
    };
  },

  methods: {
    remove: function () {
      var _ref = _asyncToGenerator(function* () {
        try {
          yield _querybuilder2.default.delete(this.querybuildersearch);
          this.$emit('delete');
        } catch (err) {}
      });

      function remove() {
        return _ref.apply(this, arguments);
      }

      return remove;
    }(),
    edit: function edit() {
      QueryBuilderUIFactory.show({
        options: {
          id: this.querybuildersearch.id,
          name: this.querybuildersearch.name,
          layerId: this.querybuildersearch.layerId,
          filter: this.querybuildersearch.filter
        }
      });
    },
    run: function run() {
      var _this = this;

      this.loading = true;
      _querybuilder2.default.run({
        layerId: this.querybuildersearch.layerId,
        filter: this.querybuildersearch.filter
      }).finally(function () {
        _this.loading = false;
      });
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',[_c('div',{staticStyle:{"position":"relative"}},[_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('div',{staticClass:"querybuliserch-tools",staticStyle:{"display":"flex","align-items":"baseline"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('filter'),staticStyle:{"margin-right":"14px","margin-left":"1px"}}),_vm._v(" "),_c('span',{staticStyle:{"white-space":"pre-wrap"}},[_vm._v(_vm._s(_vm.querybuildersearch.name))]),_vm._v(" "),_c('div',{staticStyle:{"margin-left":"auto"}},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.run'),expression:"'sdk.querybuilder.search.run'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip","data-container":"body"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('run'),staticStyle:{"color":"green","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();return _vm.run($event)}}})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.info'),expression:"'sdk.querybuilder.search.info'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip","data-container":"body"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('info'),staticStyle:{"color":"#FFFFFF","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();_vm.showinfo=!_vm.showinfo}}})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.edit'),expression:"'sdk.querybuilder.search.edit'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip","data-container":"body"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('pencil'),staticStyle:{"color":"#307095","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();return _vm.edit($event)}}})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip",value:('sdk.querybuilder.search.delete'),expression:"'sdk.querybuilder.search.delete'"}],staticClass:"icon-search-action skin-tooltip-bottom",attrs:{"data-placement":"bottom","data-toggle":"tooltip","data-container":"body"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('trash'),staticStyle:{"color":"red","padding":"3px","font-size":"1.3em"},on:{"click":function($event){$event.stopPropagation();return _vm.remove($event)}}})])])]),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showinfo),expression:"showinfo"}],staticClass:"querybuildsearch-info",staticStyle:{"margin-top":"5px"}},[_c('div',[_c('span',{staticStyle:{"font-weight":"bold","white-space":"pre"}},[_vm._v("LAYER: ")]),_vm._v(" "),_c('span',{staticStyle:{"white-space":"pre-wrap"}},[_vm._v(_vm._s(_vm.querybuildersearch.layerName))])]),_vm._v(" "),_c('div',[_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v("EXPRESSION: ")]),_vm._v(" "),_c('span',{staticStyle:{"white-space":"pre-wrap"}},[_vm._v(_vm._s(_vm.querybuildersearch.filter))])])])],1)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-4002ad61"

},{"gui/querybuilder/querybuilderuifactory":126,"services/querybuilder":322}],234:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".feature_attributes tr[data-v-09a18998]{line-height:1.8em}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _mixins = require('mixins');

var _QueryResultsTableAttributeFieldValue = require('components/QueryResultsTableAttributeFieldValue.vue');

var _QueryResultsTableAttributeFieldValue2 = _interopRequireDefault(_QueryResultsTableAttributeFieldValue);

var _QueryResultsActionInfoFormats = require('components/QueryResultsActionInfoFormats.vue');

var _QueryResultsActionInfoFormats2 = _interopRequireDefault(_QueryResultsActionInfoFormats);

var _QueryResultsHeaderFeatureBody = require('components/QueryResultsHeaderFeatureBody.vue');

var _QueryResultsHeaderFeatureBody2 = _interopRequireDefault(_QueryResultsHeaderFeatureBody);

var _QueryResultsHeaderFeatureActionsBody = require('components/QueryResultsHeaderFeatureActionsBody.vue');

var _QueryResultsHeaderFeatureActionsBody2 = _interopRequireDefault(_QueryResultsHeaderFeatureActionsBody);

var _utils = require('utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var MAX_SUBSET_LENGTH = 3;
var headerExpandActionCellWidth = 10;
var headerActionsCellWidth = 10;
var HEADERTYPESFIELD = ['varchar', 'integer', 'float', 'bigint', 'date'];

exports.default = {
  name: 'queryresults',

  data: function data() {
    return {
      state: this.$options.queryResultsService.state,
      headerExpandActionCellWidth: headerExpandActionCellWidth,
      headerActionsCellWidth: headerActionsCellWidth
    };
  },

  mixins: [_mixins.fieldsMixin],
  components: {
    TableAttributeFieldValue: _QueryResultsTableAttributeFieldValue2.default,
    'infoformats': _QueryResultsActionInfoFormats2.default,
    'header-feature-body': _QueryResultsHeaderFeatureBody2.default,
    HeaderFeatureActionsBody: _QueryResultsHeaderFeatureActionsBody2.default
  },
  computed: {
    onelayerresult: function onelayerresult() {
      return this.state.layers.length === 1;
    },
    hasLayers: function hasLayers() {
      return this.hasResults || !!this.state.components.length;
    },
    hasResults: function hasResults() {
      return this.state.layers.length > 0;
    },
    info: function info() {
      if (this.state.query) {
        var query = this.state.query;
        switch (query.type) {
          case 'coordinates':
            return {
              icon: 'marker',
              message: '  ' + query.coordinates[0] + ', ' + query.coordinates[1]
            };
          case 'bbox':
            return {
              icon: 'square',
              message: '  [' + query.bbox.join(' , ') + ']'
            };
          case 'polygon':
          case 'drawpolygon':
            return {
              icon: 'draw',
              message: query.layerName ? query.layerName + ' ' + ("undefined" !== typeof query.fid ? ' - Feature Id: ' + query.fid : '') : ' ' };
          default:
            console.warn('Unsupported query type:  ' + query.type);
            break;
        }
      } else if (this.state.search) {}

      return { icon: null, message: null };
    }
  },
  methods: {
    showLayer: function showLayer(layer) {
      return layer.show && (this.layerHasFeatures(layer) || layer.rawdata || Array.isArray(layer.infoformats) && layer.infoformats.length > 0);
    },
    getLayerCustomComponents: function getLayerCustomComponents(layerId) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'feature';
      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'after';

      return this.state.layerscustomcomponents[layerId] && this.state.layerscustomcomponents[layerId][type] && this.state.layerscustomcomponents[layerId][type][position] || [];
    },
    getLayerField: function getLayerField(_ref) {
      var layer = _ref.layer,
          feature = _ref.feature,
          fieldName = _ref.fieldName;

      var layerField = layer.attributes.find(function (attribute) {
        return attribute.name === fieldName;
      });
      var field = _extends({}, layerField, {
        label: null,
        value: feature.attributes[fieldName]
      });
      return field;
    },
    getQueryFields: function getQueryFields(layer, feature) {
      var fields = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = layer.formStructure.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var field = _step.value;

          var _field = _extends({}, field);
          _field.query = true;
          _field.value = feature.attributes[field.name];
          _field.input = {
            type: '' + this.getFieldType(_field)
          };
          fields.push(_field);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return fields;
    },
    getColSpan: function getColSpan(layer) {
      return this.attributesSubsetLength(layer) + !this.hasLayerOneFeature(layer) * 1;
    },
    getDownloadActions: function getDownloadActions(layer) {
      return this.state.layersactions[layer.id].find(function (action) {
        return action.formats;
      });
    },
    addLayerFeaturesToResults: function addLayerFeaturesToResults(layer) {
      this.$options.queryResultsService.addLayerFeaturesToResultsAction(layer);
    },
    showDownloadAction: function showDownloadAction(evt) {
      var display = evt.target.children[0].style.display;
      evt.target.children[0].style.display = display === 'none' ? 'inline-block' : 'none';
    },
    printAtlas: function printAtlas(layer) {
      this.$options.queryResultsService.printAtlas(layer);
    },
    showLayerDownloadFormats: function showLayerDownloadFormats(layer) {
      this.$options.queryResultsService.showLayerDownloadFormats(layer);
    },
    saveLayerResult: function saveLayerResult(layer) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "csv";

      this.$options.queryResultsService.saveLayerResult({ layer: layer, type: type });
    },
    hasLayerOneFeature: function hasLayerOneFeature(layer) {
      return layer.features.length === 1;
    },
    saveFilter: function saveFilter(layer) {
      this.$options.queryResultsService.saveFilter(layer);
    },
    addRemoveFilter: function addRemoveFilter(layer) {
      this.$options.queryResultsService.addRemoveFilter(layer);
    },
    getContainerFromFeatureLayer: function getContainerFromFeatureLayer() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          layer = _ref2.layer,
          index = _ref2.index;

      return $('#' + layer.id + '_' + index + ' > td');
    },
    hasOneLayerAndOneFeature: function hasOneLayerAndOneFeature(layer) {
      return this.hasLayerOneFeature(layer);
    },
    hasFormStructure: function hasFormStructure(layer) {
      return !!layer.formStructure;
    },
    layerHasFeatures: function layerHasFeatures(layer) {
      return Array.isArray(layer.features) && layer.features.length > 0;
    },
    selectionFeaturesLayer: function selectionFeaturesLayer(layer) {
      this.$options.queryResultsService.selectionFeaturesLayer(layer);
    },
    layerHasActions: function layerHasActions(layer) {
      return this.state.layersactions[layer.id].length > 0;
    },
    featureHasActions: function featureHasActions(layer, feature) {
      return this.geometryAvailable(feature);
    },
    geometryAvailable: function geometryAvailable(feature) {
      return feature.geometry ? true : false;
    },
    extractAttributesFromFirstTabOfFormStructureLayers: function extractAttributesFromFirstTabOfFormStructureLayers(layer) {
      var _this = this;

      var attributes = new Set();
      var traverseStructure = function traverseStructure(item) {
        if (item.nodes) {
          item.nodes.forEach(function (node) {
            return traverseStructure(node);
          });
        } else {
          var field = layer.formStructure.fields.find(function (field) {
            return field.name === item.field_name;
          });
          if (field) {
            if (_this.state.type === 'ows') {
              field = _extends({}, field);
              field.name = field.name.replace(/ /g, '_');
            }
            attributes.add(field);
          }
        }
      };
      if (layer.formStructure.structure.length) {
        layer.formStructure.structure.forEach(function (structure) {
          return traverseStructure(structure);
        });
      }
      return Array.from(attributes);
    },
    attributesSubset: function attributesSubset(layer) {
      var attributes = this.hasFormStructure(layer) ? this.extractAttributesFromFirstTabOfFormStructureLayers(layer) : layer.attributes;
      var _attributes = attributes.filter(function (attribute) {
        return attribute.show && HEADERTYPESFIELD.indexOf(attribute.type) !== -1;
      });

      var end = Math.min(MAX_SUBSET_LENGTH, attributes.length);
      return _attributes.slice(0, end);
    },
    relationsAttributesSubset: function relationsAttributesSubset(relationAttributes) {
      var attributes = [];
      _.forEach(relationAttributes, function (value, attribute) {
        if (Array.isArray(value)) return;
        attributes.push({ label: attribute, value: value });
      });
      var end = Math.min(MAX_SUBSET_LENGTH, attributes.length);
      return attributes.slice(0, end);
    },
    relationsAttributes: function relationsAttributes(relationAttributes) {
      var attributes = [];
      _.forEach(relationAttributes, function (value, attribute) {
        attributes.push({ label: attribute, value: value });
      });
      return attributes;
    },
    attributesSubsetLength: function attributesSubsetLength(layer) {
      return this.attributesSubset(layer).length;
    },
    cellWidth: function cellWidth(index, layer) {
      var headerLength = MAX_SUBSET_LENGTH + this.state.layersactions[layer.id].length;
      var subsetLength = this.attributesSubsetLength(layer);
      var diff = headerLength - subsetLength;
      var actionsCellWidth = layer.hasgeometry ? headerActionsCellWidth : 0;
      var headerAttributeCellTotalWidth = 100 - headerExpandActionCellWidth - actionsCellWidth;
      var baseCellWidth = headerAttributeCellTotalWidth / MAX_SUBSET_LENGTH;
      if (index === subsetLength - 1 && diff > 0) {
        return baseCellWidth * (diff + 1);
      } else {
        return baseCellWidth;
      }
    },
    featureBoxColspan: function featureBoxColspan(layer) {
      var colspan = this.attributesSubsetLength(layer);
      if (layer.expandable) {
        colspan += 1;
      }
      if (layer.hasgeometry) {
        colspan += 1;
      }
      return colspan;
    },
    relationsAttributesSubsetLength: function relationsAttributesSubsetLength(elements) {
      return this.relationsAttributesSubset(elements).length;
    },
    getLayerFormStructure: function getLayerFormStructure(layer) {
      return layer.formStructure.structure;
    },
    isAttributeOrTab: function isAttributeOrTab(layer, item) {
      var isField = item.field_name !== undefined;
      return {
        type: isField && 'field' || 'tab',
        item: isField && this.getLayerAttributeFromStructureItem(layer, item.field_name) || [item]
      };
    },
    getLayerAttributeFromStructureItem: function getLayerAttributeFromStructureItem(layer, field_name) {
      return layer.attributes.find(function (attribute) {
        return attribute.name === field_name;
      });
    },
    getLayerFeatureBox: function getLayerFeatureBox(layer, feature, relation_index) {
      var _this2 = this;

      var boxid = this.getBoxId(layer, feature, relation_index);
      if (this.state.layersFeaturesBoxes[boxid] === undefined) {
        this.state.layersFeaturesBoxes[boxid] = Vue.observable({
          collapsed: true
        });
        this.$watch(function () {
          return _this2.state.layersFeaturesBoxes[boxid].collapsed;
        }, function (collapsed) {
          var index = layer.features.findIndex(function (_feature) {
            return feature.id === _feature.id;
          });
          var container = _this2.getContainerFromFeatureLayer({
            layer: layer,
            index: index
          });
          _this2.$options.queryResultsService.openCloseFeatureResult({
            open: !collapsed,
            layer: layer,
            feature: feature,
            container: container
          });
        });
        this.state.layersFeaturesBoxes[boxid].collapsed = layer.features.length > 1;
      }
      return this.state.layersFeaturesBoxes[boxid];
    },
    collapsedFeatureBox: function collapsedFeatureBox(layer, feature, relation_index) {
      var box = this.state.layersFeaturesBoxes[this.getBoxId(layer, feature, relation_index)];
      return box ? box.collapsed : true;
    },
    showFeatureInfo: function showFeatureInfo(layer, boxid) {
      var box = this.state.layersFeaturesBoxes[boxid];
      this.$options.queryResultsService.emit('show-query-feature-info', {
        layer: layer,
        tabs: this.hasFormStructure(layer),
        show: box ? !box.collapsed : false
      });
    },
    getBoxId: function getBoxId(layer, feature, relation_index) {
      return this.$options.queryResultsService.getBoxId(layer, feature, relation_index);
    },
    toggleFeatureBox: function () {
      var _ref3 = _asyncToGenerator(function* (layer, feature, relation_index) {
        var boxid = this.getBoxId(layer, feature, relation_index);
        this.state.layersFeaturesBoxes[boxid].collapsed = !this.state.layersFeaturesBoxes[boxid].collapsed;
        yield this.$nextTick();
        this.showFeatureInfo(layer, boxid);
      });

      function toggleFeatureBox(_x5, _x6, _x7) {
        return _ref3.apply(this, arguments);
      }

      return toggleFeatureBox;
    }(),
    toggleFeatureBoxAndZoom: function toggleFeatureBoxAndZoom(layer, feature, relation_index) {
      !this.hasLayerOneFeature(layer) && this.toggleFeatureBox(layer, feature, relation_index);
    },
    trigger: function () {
      var _ref4 = _asyncToGenerator(function* (action, layer, feature, index) {
        if (action.opened && $('#' + layer.id + '_' + index).css('display') === 'none') {
          this.toggleFeatureBox(layer, feature);
          yield this.$nextTick();
        }
        var container = this.getContainerFromFeatureLayer({ layer: layer, index: index });
        yield this.$options.queryResultsService.trigger(action.id, layer, feature, index, container);
      });

      function trigger(_x8, _x9, _x10, _x11) {
        return _ref4.apply(this, arguments);
      }

      return trigger;
    }(),
    showFullPhoto: function showFullPhoto(url) {
      this.$options.queryResultsService.showFullPhoto(url);
    },
    openLink: function openLink(link_url) {
      window.open(link_url, '_blank');
    },
    isJSON: function isJSON(field) {
      return !this.isVue(field) && this.isSimple(field) && 'Object' === (0, _utils.toRawType)(field.value);
    }
  },

  watch: {
    'state.layers': function () {
      var _ref5 = _asyncToGenerator(function* (layers) {
        var _this3 = this;

        layers.forEach(function (layer) {
          if (layer.attributes.length <= MAX_SUBSET_LENGTH && !layer.hasImageField) layer.expandable = false;
          layer.features.forEach(function (feature) {
            _this3.getLayerFeatureBox(layer, feature);
            if (feature.attributes.relations) {
              var relations = feature.attributes.relations;
              relations.forEach(function (relation) {
                var boxid = layer.id + '_' + feature.id + '_' + relation.name;
                var elements = relation.elements;
                elements.forEach(function (element, index) {
                  _this3.state.layersFeaturesBoxes[boxid + index] = {
                    collapsed: true
                  };
                });
              });
            }
          });
        });

        if (this.onelayerresult && this.hasLayerOneFeature(layers[0])) {
          var layer = layers[0];
          var feature = layer.features[0];
          var boxid = this.getBoxId(layer, feature);
          this.$options.queryResultsService.onceafter('postRender', function () {
            _this3.showFeatureInfo(layer, boxid);
          });
        }
        requestAnimationFrame(function () {
          return _this3.$options.queryResultsService.postRender(_this3.$el);
        });
        yield this.$nextTick();
      });

      function stateLayers(_x12) {
        return _ref5.apply(this, arguments);
      }

      return stateLayers;
    }(),
    onelayerresult: function onelayerresult(bool) {
      bool && this.$options.queryResultsService.highlightFeaturesPermanently(this.state.layers[0]);
    }
  },
  created: function created() {
    var _this4 = this;

    this.zoomToLayerFeaturesExtent = (0, _utils.throttle)(function (layer) {
      _this4.$options.queryResultsService.zoomToLayerFeaturesExtent(layer, {
        highlight: true
      });
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.state.zoomToResult = true;
  },
  destroyed: function destroyed() {
    this.$options.queryResultsService.clear();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"queryresults-wrapper",attrs:{"id":"search-results"}},[(_vm.info.message)?_c('div',{staticClass:"skin-color",staticStyle:{"font-weight":"bold","margin-bottom":"3px","font-size":"1.1em"}},[(_vm.info.icon)?_c('span',{staticClass:"action-button skin-tooltip-bottom",class:_vm.g3wtemplate.getFontClass(_vm.info.icon)}):_vm._e(),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.info.message))])]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"queryresults-container"},[(_vm.state.layers.length)?[(_vm.hasLayers)?_c('ul',{staticClass:"queryresults",staticStyle:{"position":"relative"},attrs:{"id":"queryresults"}},[_vm._l((_vm.state.layers),function(layer){return _c('li',{directives:[{name:"show",rawName:"v-show",value:(_vm.showLayer(layer)),expression:"showLayer(layer)"}]},[_c('bar-loader',{attrs:{"loading":layer.loading}}),_vm._v(" "),_c('div',{staticClass:"box box-primary"},[_c('div',{staticClass:"box-header with-border",class:{'mobile': _vm.isMobile()},attrs:{"data-widget":"collapse"}},[_c('div',{staticClass:"box-title query-layer-title",style:({fontSize: _vm.isMobile() && '1em !important'})},[_vm._v(_vm._s(layer.title)+"\n                "),_c('span',{directives:[{name:"show",rawName:"v-show",value:(!layer.rawdata),expression:"!layer.rawdata"}],staticClass:"query-layer-feature-count"},[_vm._v("("+_vm._s(layer.features.length)+")")])]),_vm._v(" "),_c('div',{staticClass:"box-features-action",on:{"click":function($event){$event.stopPropagation();}}},[_c('infoformats',{attrs:{"layer":layer}}),_vm._v(" "),(layer.features.length > 1)?[(layer.hasgeometry)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('sdk.mapcontrols.query.actions.zoom_to_features_extent.hint'),expression:"'sdk.mapcontrols.query.actions.zoom_to_features_extent.hint'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button",on:{"click":function($event){$event.stopPropagation();return _vm.zoomToLayerFeaturesExtent(layer)}}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('marker')})]):_vm._e(),_vm._v(" "),(layer.atlas.length)?_c('span',{directives:[{name:"download",rawName:"v-download"},{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('sdk.mapcontrols.query.actions.atlas.hint'),expression:"'sdk.mapcontrols.query.actions.atlas.hint'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button",on:{"click":function($event){$event.stopPropagation();return _vm.printAtlas(layer)}}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('print')})]):_vm._e(),_vm._v(" "),(layer.downloads.length === 1)?[_c('span',{directives:[{name:"download",rawName:"v-download"},{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:(("sdk.mapcontrols.query.actions.download_features_" + (layer.downloads[0]) + ".hint")),expression:"`sdk.mapcontrols.query.actions.download_features_${layer.downloads[0]}.hint`",arg:"left",modifiers:{"create":true}}],staticClass:"action-button",class:{'toggled': layer[layer.downloads[0]].active}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('download'),on:{"click":function($event){$event.stopPropagation();return _vm.saveLayerResult(layer, layer.downloads[0])}}})])]:(layer.downloads.length > 1)?[_c('span',{directives:[{name:"download",rawName:"v-download"},{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('Downloads'),expression:"'Downloads'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button",class:{'toggled': layer.downloadformats.active}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('download'),on:{"click":function($event){$event.stopPropagation();return _vm.showLayerDownloadFormats(layer)}}})])]:_vm._e()]:_vm._e(),_vm._v(" "),(layer.external || (layer.source && layer.source.type !== 'wms'))?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('sdk.mapcontrols.query.actions.add_features_to_results.hint'),expression:"'sdk.mapcontrols.query.actions.add_features_to_results.hint'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button",class:{'toggled': layer.addfeaturesresults.active},on:{"click":function($event){$event.stopPropagation();return _vm.addLayerFeaturesToResults(layer)}}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('plus-square')})]):_vm._e(),_vm._v(" "),(
                    layer.id !== '__g3w_marker' &&
                    layer.features.length > 1 &&
                    (layer.external || (layer.source && layer.source.type !== 'wms'))
                  )?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('sdk.mapcontrols.query.actions.add_selection.hint'),expression:"'sdk.mapcontrols.query.actions.add_selection.hint'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button skin-tooltip-left",class:{'toggled': layer.selection.active},on:{"click":function($event){$event.stopPropagation();return _vm.selectionFeaturesLayer(layer)}}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('success')})]):_vm._e(),_vm._v(" "),(!layer.external && layer.selection.active)?[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('layer_selection_filter.tools.filter'),expression:"'layer_selection_filter.tools.filter'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button skin-tooltip-left",class:{'toggled': layer.filter.active},on:{"click":function($event){$event.stopPropagation();return _vm.addRemoveFilter(layer)}}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('filter')})]),_vm._v(" "),(layer.filter.active && (null === layer.filter.current || layer.selection.active))?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('layer_selection_filter.tools.savefilter'),expression:"'layer_selection_filter.tools.savefilter'",arg:"left",modifiers:{"create":true}}],staticClass:"action-button skin-tooltip-left",on:{"click":function($event){$event.stopPropagation();return _vm.saveFilter(layer)}}},[_c('span',{staticClass:"action-button-icon",class:_vm.g3wtemplate.getFontClass('save')})]):_vm._e()]:_vm._e()],2),_vm._v(" "),_c('button',{staticClass:"btn btn-box-tool",attrs:{"data-widget":"collapse"}},[_c('i',{staticClass:"btn-collapser skin-color",class:_vm.g3wtemplate.font['minus']})])]),_vm._v(" "),(_vm.state.layeractiontool[layer.id].component)?[_c('div',{staticClass:"g3w-layer-action-tools with-border",class:{'mobile': _vm.isMobile()},staticStyle:{"padding":"5px"}},[_c(_vm.state.layeractiontool[layer.id].component,{tag:"component",attrs:{"layer":layer,"config":_vm.state.layeractiontool[layer.id].config}})],1)]:_vm._e(),_vm._v(" "),_vm._l((_vm.getLayerCustomComponents(layer.id, 'layer', 'before')),function(ref){
                  var component = ref.component;
return _c(component,{tag:"component",attrs:{"layer":layer}})}),_vm._v(" "),_c('div',{staticClass:"box-body",class:{'mobile': _vm.isMobile()}},[(layer.rawdata)?[_c('div',{staticClass:"queryresults-text-html",class:{text: layer.infoformat === 'text/plain'},domProps:{"innerHTML":_vm._s(layer.rawdata)}})]:(_vm.hasFormStructure(layer))?[_c('table',{staticClass:"table",class:{'mobile': _vm.isMobile()}},[_c('tbody',[_vm._l((layer.features),function(feature,index){return (feature.show)?[_c('header-feature-actions-body',{attrs:{"colspan":_vm.getColSpan(layer),"actions":_vm.state.layersactions[layer.id],"layer":layer,"feature":feature,"index":index,"onelayerresult":_vm.onelayerresult,"trigger":_vm.trigger,"toggleFeatureBoxAndZoom":_vm.toggleFeatureBoxAndZoom,"hasLayerOneFeature":_vm.hasLayerOneFeature,"boxLayerFeature":_vm.getLayerFeatureBox(layer, feature),"attributesSubset":_vm.attributesSubset,"getLayerField":_vm.getLayerField}}),_vm._v(" "),_c('tr',{staticClass:"g3w-feature-result-action-tools"},[(_vm.state.currentactiontools[layer.id][index])?[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c(_vm.state.currentactiontools[layer.id][index],{tag:"component",attrs:{"colspan":_vm.getColSpan(layer),"layer":layer,"feature":feature,"featureIndex":index,"config":_vm.state.actiontools[_vm.state.currentactiontools[layer.id][index].name][layer.id]}})],1)]:_vm._e()],2),_vm._v(" "),(!_vm.hasLayerOneFeature(layer))?_c('tr',{staticStyle:{"font-weight":"bold","text-align":"center"}},[_vm._l((_vm.attributesSubset(layer)),function(attribute,index){return _c('td',{staticClass:"centered"},[_vm._v("\n                            "+_vm._s(_vm.getLayerFeatureBox(layer, feature).collapsed ? attribute.label : '')+"\n                          ")])}),_vm._v(" "),_c('td',{staticClass:"collapsed",class:{noAttributes: _vm.attributesSubset(layer).length === 0},staticStyle:{"text-align":"end"},on:{"click":function($event){$event.stopPropagation();return _vm.toggleFeatureBoxAndZoom(layer,feature)}}},[_c('span',{staticClass:"fa link morelink skin-color",class:[
                                _vm.getLayerFeatureBox(layer, feature).collapsed ?
                                _vm.g3wtemplate.font['plus'] :
                                _vm.g3wtemplate.font['minus']
                              ]})])],2):_vm._e(),_vm._v(" "),(!_vm.hasLayerOneFeature(layer) && _vm.getLayerFeatureBox(layer, feature).collapsed)?_c('header-feature-body',{attrs:{"actions":_vm.state.layersactions[layer.id],"layer":layer,"feature":feature,"index":index,"onelayerresult":_vm.onelayerresult,"trigger":_vm.trigger,"toggleFeatureBoxAndZoom":_vm.toggleFeatureBoxAndZoom,"hasLayerOneFeature":_vm.hasLayerOneFeature,"boxLayerFeature":_vm.getLayerFeatureBox(layer, feature),"attributesSubset":_vm.attributesSubset,"getLayerField":_vm.getLayerField}}):_vm._e(),_vm._v(" "),_vm._l((_vm.getLayerCustomComponents(layer.id, 'feature', 'before')),function(ref){
                              var component = ref.component;
return _c('tr',[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c(component,{tag:"component",attrs:{"layer":layer,"feature":feature}})],1)])}),_vm._v(" "),_c('tr',{directives:[{name:"show",rawName:"v-show",value:(!_vm.collapsedFeatureBox(layer,feature) || _vm.hasOneLayerAndOneFeature(layer)),expression:"!collapsedFeatureBox(layer,feature) || hasOneLayerAndOneFeature(layer)"}],staticClass:"featurebox-body",attrs:{"id":((layer.id) + "_" + index)}},[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c('tabs',{attrs:{"fields":_vm.getQueryFields(layer, feature),"layerid":layer.id,"feature":feature,"tabs":_vm.getLayerFormStructure(layer)}})],1)]),_vm._v(" "),_vm._l((_vm.getLayerCustomComponents(layer.id, 'feature', 'after')),function(ref){
                              var component = ref.component;
return _c('tr',[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c(component,{tag:"component",attrs:{"layer":layer,"feature":feature}})],1)])})]:_vm._e()})],2)])]:[_c('table',{staticClass:"table",class:{'mobile': _vm.isMobile()}},_vm._l((layer.features),function(feature,index){return (feature.show)?_c('tbody',{key:feature.id},[_c('header-feature-actions-body',{attrs:{"colspan":_vm.getColSpan(layer),"actions":_vm.state.layersactions[layer.id],"layer":layer,"feature":feature,"index":index,"onelayerresult":_vm.onelayerresult,"trigger":_vm.trigger,"toggleFeatureBoxAndZoom":_vm.toggleFeatureBoxAndZoom,"hasLayerOneFeature":_vm.hasLayerOneFeature,"boxLayerFeature":_vm.getLayerFeatureBox(layer, feature),"attributesSubset":_vm.attributesSubset,"getLayerField":_vm.getLayerField}}),_vm._v(" "),_c('tr',{staticClass:"g3w-feature-result-action-tools"},[(_vm.state.currentactiontools[layer.id][index])?[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c(_vm.state.currentactiontools[layer.id][index],{tag:"component",attrs:{"colspan":_vm.getColSpan(layer),"layer":layer,"feature":feature,"featureIndex":index,"config":_vm.state.actiontools[_vm.state.currentactiontools[layer.id][index].name][layer.id]}})],1)]:_vm._e()],2),_vm._v(" "),(!_vm.hasLayerOneFeature(layer))?_c('tr',{staticStyle:{"font-weight":"bold","text-align":"center"}},[_vm._l((_vm.attributesSubset(layer)),function(attribute,index){return _c('td',{staticClass:"centered"},[_vm._v("\n                        "+_vm._s(_vm.getLayerFeatureBox(layer, feature).collapsed ? attribute.label : '')+"\n                      ")])}),_vm._v(" "),_c('td',{staticClass:"collapsed",class:{noAttributes: _vm.attributesSubset(layer).length === 0},staticStyle:{"text-align":"end"},on:{"click":function($event){$event.stopPropagation();return _vm.toggleFeatureBoxAndZoom(layer,feature)}}},[_c('span',{staticClass:"fa link morelink skin-color",class:[
                              _vm.getLayerFeatureBox(layer, feature).collapsed ?
                              _vm.g3wtemplate.font['plus'] :
                              _vm.g3wtemplate.font['minus']
                            ]})])],2):_vm._e(),_vm._v(" "),(!_vm.hasLayerOneFeature(layer) && _vm.getLayerFeatureBox(layer, feature).collapsed)?_c('header-feature-body',{attrs:{"actions":_vm.state.layersactions[layer.id],"layer":layer,"feature":feature,"index":index,"onelayerresult":_vm.onelayerresult,"trigger":_vm.trigger,"toggleFeatureBoxAndZoom":_vm.toggleFeatureBoxAndZoom,"hasLayerOneFeature":_vm.hasLayerOneFeature,"boxLayerFeature":_vm.getLayerFeatureBox(layer, feature),"attributesSubset":_vm.attributesSubset,"getLayerField":_vm.getLayerField}}):_vm._e(),_vm._v(" "),_vm._l((_vm.getLayerCustomComponents(layer.id, 'feature', 'before')),function(ref){
                            var component = ref.component;
return _c('tr',[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c(component,{tag:"component",staticClass:"box-body",attrs:{"layer":layer,"feature":feature}})],1)])}),_vm._v(" "),_c('tr',{directives:[{name:"show",rawName:"v-show",value:(!_vm.collapsedFeatureBox(layer,feature) || _vm.hasOneLayerAndOneFeature(layer)),expression:"!collapsedFeatureBox(layer,feature) || hasOneLayerAndOneFeature(layer)"}],staticClass:"featurebox-body",attrs:{"id":((layer.id) + "_" + index)}},[_c('td',{attrs:{"colspan":_vm.getColSpan(layer)}},[_c('table',{staticClass:"feature_attributes"},[_vm._l((layer.attributes.filter(function (attribute) { return attribute.show; })),function(attribute){return [(_vm.isJSON(_vm.getLayerField({layer: layer, feature: feature, fieldName: attribute.name})))?[_vm._l((_vm.getLayerField({layer: layer, feature: feature, fieldName: attribute.name}).value),function(v,k){
                            var _obj;
return _vm._l((('object' === typeof v ? v : ( _obj = {}, _obj[k] = v, _obj ))),function(v2,k2){return _c('tr',{staticStyle:{"padding-top":"10px","padding-bottom":"10px"}},[_c('td',{staticClass:"attr-label"},[_vm._v(_vm._s(attribute.label)+"."),(('object' === typeof v))?[_vm._v(_vm._s(k)+".")]:_vm._e(),_vm._v(_vm._s(k2))],2),_vm._v(" "),_c('td',{staticClass:"attr-value"},[_vm._v(_vm._s(v2))])])})})]:_c('tr',[_c('td',{staticClass:"attr-label"},[_vm._v(_vm._s(attribute.label))]),_vm._v(" "),_c('td',{staticClass:"attr-value",attrs:{"attribute":attribute.name}},[_c('table-attribute-field-value',{attrs:{"feature":feature,"field":_vm.getLayerField({layer: layer, feature: feature, fieldName: attribute.name})}})],1)])]})],2)])]),_vm._v(" "),_vm._l((_vm.getLayerCustomComponents(layer.id, 'feature', 'after')),function(ref){
                            var component = ref.component;
return _c('tr',[_c('td',{attrs:{"colspan":"getColSpan(layer)"}},[_c(component,{tag:"component",staticClass:"box-body",attrs:{"layer":layer,"feature":feature}})],1)])})],2):_c('tbody')}),0)]],2),_vm._v(" "),_vm._l((_vm.getLayerCustomComponents(layer.id, 'layer', 'after')),function(ref){
                            var component = ref.component;
return _c('div',{staticClass:"box-body",class:{'mobile': _vm.isMobile()}},[_c(component,{tag:"component",attrs:{"layer":layer}})],1)})],2)],1)}),_vm._v(" "),_vm._l((_vm.state.components),function(component){return _c('li',[_c(component,{tag:"component",on:{"showresults":function($event){return _vm.showResults()}}})],1)})],2):_vm._e()]:[(_vm.state.changed)?_c('div',{staticClass:"query-results-not-found"},[_c('h4',{directives:[{name:"t",rawName:"v-t",value:('info.no_results'),expression:"'info.no_results'"}],staticClass:"skin-color",staticStyle:{"font-weight":"bold","text-align":"center"}})]):_vm._e()]],2)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-09a18998"

},{"components/QueryResultsActionInfoFormats.vue":238,"components/QueryResultsHeaderFeatureActionsBody.vue":241,"components/QueryResultsHeaderFeatureBody.vue":242,"components/QueryResultsTableAttributeFieldValue.vue":243,"mixins":302,"utils":419,"vueify/lib/insert-css":2}],235:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

exports.default = {
  name: "action",
  data: function data() {
    return {
      show: true
    };
  },

  props: {
    featureIndex: {
      type: Number
    },
    feature: {
      type: Object
    },
    layer: {
      type: Object
    },
    trigger: {
      type: Function
    },
    action: {
      type: Object,
      required: true
    }
  },
  methods: {
    clickAction: function () {
      var _ref = _asyncToGenerator(function* (action, layer, feature, featureIndex, event) {
        yield this.trigger(action, layer, feature, featureIndex);
        if (action.hint_change) {
          var element = $(event.target).parent();
          var originalDataTitle = element.attr('data-original-title');
          element.attr('data-original-title', t(action.hint_change.hint));
          element.tooltip('show');
          setTimeout(function () {
            element.attr('data-original-title', originalDataTitle);
            element.tooltip('show');
          }, action.hint_change.duration || 600);
        }
        this.$emit('action-clicked', action);
      });

      function clickAction(_x, _x2, _x3, _x4, _x5) {
        return _ref.apply(this, arguments);
      }

      return clickAction;
    }()
  },
  created: function () {
    var _ref2 = _asyncToGenerator(function* () {
      if (this.action.init) {
        this.action.init({ layer: this.layer, feature: this.feature, index: this.featureIndex, action: this.action });
      }
      if (typeof this.action.condition === 'function') {
        var show = this.action.condition({ layer: this.layer, feature: this.feature });
        this.show = show instanceof Promise ? yield show : show;
      }
    });

    function created() {
      return _ref2.apply(this, arguments);
    }

    return created;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.show)?_c('span',{directives:[{name:"download",rawName:"v-download",value:(_vm.action.download),expression:"action.download"},{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:(_vm.action.hint),expression:"action.hint",arg:"top",modifiers:{"create":true}}],staticClass:"action-button",class:{'toggled': _vm.action.state && _vm.action.state.toggled[_vm.featureIndex] },on:{"contextmenu":function($event){$event.preventDefault();$event.stopPropagation();},"click":function($event){$event.stopPropagation();return _vm.clickAction(_vm.action, _vm.layer, _vm.feature, _vm.featureIndex, $event)}}},[_c('span',{class:("action-button-icon " + (_vm.action.class)),staticStyle:{"padding":"2px"},style:(_vm.action.style)})]):_vm._e()}
__vue__options__.staticRenderFns = []

},{"core/i18n/i18n.service":9}],236:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'choose_layer',

  props: {
    featureIndex: {
      type: Number
    },
    feature: {
      type: Object
    },
    layer: {
      type: Object
    },
    config: {
      type: Object,
      default: {
        icon: 'pencil',
        label: 'Choose a Layer',
        nolayers: 'No layers found',
        layers: [],
        cbk: function cbk() {}
      }
    }
  },

  data: function data() {
    return {
      layerId: null
    };
  },


  computed: {
    has_layers: function has_layers() {
      return this.config.layers && this.config.layers.length > 0;
    }
  },

  created: function created() {
    if (this.has_layers) {
      this.layerId = this.config.layers[0].id;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:"action-choose-layer"},[_c('label',{directives:[{name:"t",rawName:"v-t",value:(_vm.config.label),expression:"config.label"}]}),_vm._v(" "),_c('div',{staticStyle:{"width":"100%","display":"flex"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},[_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('layerId'),expression:"'layerId'"}],staticClass:"form-control",staticStyle:{"flex-grow":"1"},attrs:{"search":false,"disabled":!_vm.has_layers}},[_vm._l((_vm.config.layers),function(layer){return _c('option',{key:layer.id,domProps:{"value":layer.id}},[_c('b',[_vm._v(_vm._s(layer.name))])])}),_vm._v(" "),(!_vm.has_layers)?_c('option',{directives:[{name:"t",rawName:"v-t",value:(_vm.config.nolayers),expression:"config.nolayers"}]}):_vm._e()],2),_vm._v(" "),(_vm.has_layers)?_c('button',{staticClass:"btn skin-button",staticStyle:{"border-radius":"0 3px 3px 0"},on:{"click":function($event){$event.stopPropagation();return (function () { return _vm.config.cbk(_vm.layerId, _vm.feature); })($event)}}},[_c('span',{class:_vm.g3wtemplate.getFontClass(_vm.config.icon)})]):_vm._e()])])}
__vue__options__.staticRenderFns = []

},{}],237:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: "downloadformats",

  data: function data() {
    var download_format = this.config.downloads[0].format;
    return {
      download_format: download_format
    };
  },

  props: {
    featureIndex: {
      type: Number
    },
    feature: {
      type: Object
    },
    layer: {
      type: Object
    },
    config: {
      type: Object,
      default: null
    }
  },
  methods: {
    download: function () {
      var _ref = _asyncToGenerator(function* () {
        var _this = this;

        try {
          var _download = this.config.downloads.find(function (action) {
            return action.format === _this.download_format;
          });
          yield _download.cbk(this.layer, this.feature ? this.feature : this.layer.features, _download, this.featureIndex);
        } catch (err) {}
      });

      function download() {
        return _ref.apply(this, arguments);
      }

      return download;
    }()
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3w-download-formats-content",staticStyle:{"width":"100%","display":"flex"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();}}},[_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('download_format'),expression:"'download_format'"}],staticClass:"form-control",staticStyle:{"flex-grow":"1"},attrs:{"search":false}},_vm._l((_vm.config.downloads),function(download){return _c('option',{directives:[{name:"download",rawName:"v-download"}],key:download.id,domProps:{"value":download.format}},[_c('span',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(download.format))])])}),0),_vm._v(" "),_c('button',{directives:[{name:"download",rawName:"v-download"}],staticClass:"btn skin-button",staticStyle:{"border-radius":"0 3px 3px 0"},on:{"click":function($event){$event.stopPropagation();return _vm.download($event)}}},[_c('span',{class:_vm.g3wtemplate.getFontClass('download')})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-72d7b8fa"

},{}],238:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _getAlphanumericPropertiesFromFeature = require('utils/getAlphanumericPropertiesFromFeature');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils/parsers'),
    responseParser = _require.response;

exports.default = {
  name: 'Infoformats',

  props: {
    layer: {
      type: Object,
      required: true
    }
  },

  data: function data() {
    return {
      infoformat: this.layer.infoformat
    };
  },


  computed: {
    infoformats: function infoformats() {
      return this.layer.infoformats || [];
    },
    hasInfo: function hasInfo() {
      return this.infoformats.length;
    }
  },

  methods: {
    reloadLayerDataWithChangedContentType: function () {
      var _ref = _asyncToGenerator(function* (contenttype) {
        this.layer.loading = true;

        this.$el.disabled = true;
        try {
          var response = yield this.projectLayer.changeProxyDataAndReloadFromServer('wms', {
            headers: { 'Content-Type': contenttype },
            params: { INFO_FORMAT: contenttype }
          });
          this.layer.infoformat = contenttype;
          this.projectLayer.setInfoFormat(this.layer.infoformat);

          var _responseParser$get = responseParser.get(contenttype)({ layers: [this.projectLayer], response: response }),
              _responseParser$get2 = _slicedToArray(_responseParser$get, 1),
              data = _responseParser$get2[0];

          if (data.features) {
            this.__parsedata(data);
          } else {
            this.__parserawdata(data);
          }
        } catch (err) {
          console.log(err);
        }
        this.layer.loading = false;

        this.$el.disabled = false;
      });

      function reloadLayerDataWithChangedContentType(_x) {
        return _ref.apply(this, arguments);
      }

      return reloadLayerDataWithChangedContentType;
    }(),
    __parsedata: function __parsedata(data) {
      var _this = this;

      var queryService = _gui2.default.getService('queryresults');
      this.layer.rawdata = null;

      data.features.forEach(function (feature) {
        var _queryService$getFeat = queryService.getFeaturePropertiesAndGeometry(feature),
            fid = _queryService$getFeat.id,
            geometry = _queryService$getFeat.geometry,
            attributes = _queryService$getFeat.properties;

        if (0 === _this.layer.attributes.length) {
          _this.layer.hasgeometry = !!geometry;

          queryService.setActionsForLayers([_this.layer]);
          (0, _getAlphanumericPropertiesFromFeature.getAlphanumericPropertiesFromFeature)(attributes).forEach(function (name) {
            _this.layer.attributes.push({
              name: name,
              label: name,
              show: true
            });
          });
        }

        _this.layer.features.push({ id: fid, attributes: attributes, geometry: geometry, show: true });
      });
    },
    __parserawdata: function () {
      var _ref2 = _asyncToGenerator(function* (data) {
        this.layer.features.splice(0);
        yield this.$nextTick();
        this.layer.rawdata = data.rawdata;
      });

      function __parserawdata(_x2) {
        return _ref2.apply(this, arguments);
      }

      return __parserawdata;
    }()
  },

  watch: {
    'infoformat': function infoformat(value) {
      this.reloadLayerDataWithChangedContentType(value);
    }
  },

  created: function created() {
    this.projectLayer = _catalogLayers2.default.getLayerById(this.layer.id);
  },
  beforeDestroy: function beforeDestroy() {
    if (this.projectLayer) {
      this.projectLayer.clearProxyData('wms');
    }
    this.projectLayer = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.hasInfo)?_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('infoformat'),expression:"'infoformat'"}],staticClass:"skin-color",attrs:{"select2_value":_vm.infoformat,"search":false}},_vm._l((_vm.infoformats),function(infoformat){return _c('option',{key:infoformat,domProps:{"value":infoformat}},[_vm._v("\n    "+_vm._s(infoformat)+"\n  ")])}),0):_vm._e()}
__vue__options__.staticRenderFns = []

},{"services/gui":319,"store/catalog-layers":329,"utils/getAlphanumericPropertiesFromFeature":390,"utils/parsers":439}],239:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-polygonattributes-types-title[data-v-7fd19c11]{font-weight:700;padding:3px;color:#fff;margin:0 0 5px}.g3w-polygonattributes-types-content[data-v-7fd19c11]{display:flex;justify-content:space-between;padding:3px;border-radius:3px;border:1px solid #f4f4f4}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

exports.default = {
  name: "queryresults-querypolygonaddattributes",

  props: {
    layer: {
      type: Object
    },
    config: {
      type: Object,
      default: null
    }
  },
  data: function data() {
    return {
      type: this.config.choices[0].type
    };
  },
  created: function created() {
    var _this = this;

    this.unwatch = this.$watch(function () {
      return _applicationState2.default.language;
    }, function () {
      _this.config.choices.forEach(function (choice) {
        return $(_this.$refs[choice.type]).text(t(choice.label));
      });
      $(_this.$refs.g3w_select_feature_featurepolygon).select2().trigger('change');
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.unwatch && this.unwatch();
    this.unwatch = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"width":"100%"}},[_c('h5',{directives:[{name:"t",rawName:"v-t",value:('sdk.mapcontrols.querybypolygon.download.title'),expression:"'sdk.mapcontrols.querybypolygon.download.title'"}],staticClass:"skin-background-color g3w-polygonattributes-types-title"}),_vm._v(" "),_c('div',{staticClass:"g3w-polygonattributes-types-content"},[_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('type'),expression:"'type'"}],ref:"g3w_select_feature_featurepolygon",staticClass:"form-control",staticStyle:{"width":"100%"},attrs:{"search":false}},_vm._l((_vm.config.choices),function(choice){return _c('option',{directives:[{name:"t",rawName:"v-t",value:(choice.label),expression:"choice.label"}],key:choice.type,ref:choice.type,refInFor:true,domProps:{"value":choice.type}})}),0),_vm._v(" "),_c('button',{staticClass:"btn skin-button",staticStyle:{"border-radius":"0 3px 3px 0"},on:{"click":function($event){$event.stopPropagation();return _vm.config.download(_vm.type)}}},[_c('span',{class:_vm.g3wtemplate.getFontClass('download')})])])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-7fd19c11"

},{"core/i18n/i18n.service":9,"store/application-state":328,"vueify/lib/insert-css":2}],240:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-feature-actions[data-v-ec80a64e]{padding:3px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _QueryResultsAction = require("components/QueryResultsAction.vue");

var _QueryResultsAction2 = _interopRequireDefault(_QueryResultsAction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "actions",
  props: {
    featureIndex: {
      type: Number
    },
    feature: {
      type: Object
    },
    layer: {
      type: Object
    },
    trigger: {
      type: Function
    },
    actions: {
      type: Array,
      default: []
    },
    colspan: {
      type: Number
    }
  },
  components: {
    action: _QueryResultsAction2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.actions.length)?_c('td',{staticClass:"g3w-feature-actions skin-background-color lighten",staticStyle:{"padding":"3px"},attrs:{"colspan":_vm.colspan}},_vm._l((_vm.actions),function(action){return _c('action',_vm._b({key:action.id,attrs:{"action":action}},'action',_vm.$props,false))}),1):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-ec80a64e"

},{"components/QueryResultsAction.vue":235,"vueify/lib/insert-css":2}],241:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".noAttributes[data-v-164045ac]{display:flex;justify-content:flex-end}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _QueryResultsActions = require('components/QueryResultsActions.vue');

var _QueryResultsActions2 = _interopRequireDefault(_QueryResultsActions);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "headerfeaturebody",
  mixins: [_mixins.fieldsMixin],
  props: {
    toggleFeatureBoxAndZoom: {
      type: Function
    },
    trigger: {
      type: Function
    },
    hasLayerOneFeature: {
      type: Function
    },
    boxLayerFeature: {
      type: Object
    },
    getLayerField: {
      type: Function
    },
    attributesSubset: {
      type: Function
    },
    layer: {
      type: Object
    },
    feature: {
      type: Object
    },
    index: {
      type: Number
    },
    actions: {
      type: Array
    },
    colspan: {
      type: Number
    }
  },
  components: {
    actions: _QueryResultsActions2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',{staticClass:"featurebox-header",on:{"mouseover":function($event){return _vm.trigger({id:'highlightgeometry'}, _vm.layer, _vm.feature, _vm.index)},"mouseout":function($event){return _vm.trigger({id:'clearHighlightGeometry'}, _vm.layer, _vm.feature, _vm.index)}}},[_c('actions',{attrs:{"colspan":_vm.colspan,"layer":_vm.layer,"featureIndex":_vm.index,"trigger":_vm.trigger,"feature":_vm.feature,"actions":_vm.actions}})],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-164045ac"

},{"components/QueryResultsActions.vue":240,"mixins":302,"vueify/lib/insert-css":2}],242:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".noAttributes[data-v-137530c7]{display:flex;justify-content:flex-end}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _QueryResultsActions = require('components/QueryResultsActions.vue');

var _QueryResultsActions2 = _interopRequireDefault(_QueryResultsActions);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "headerfeaturebody",
  mixins: [_mixins.fieldsMixin],
  props: {
    toggleFeatureBoxAndZoom: {
      type: Function
    },
    trigger: {
      type: Function
    },
    hasLayerOneFeature: {
      type: Function
    },
    boxLayerFeature: {
      type: Object
    },
    getLayerField: {
      type: Function
    },
    attributesSubset: {
      type: Function
    },
    layer: {
      type: Object
    },
    feature: {
      type: Object
    }

  },
  components: {
    actions: _QueryResultsActions2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_vm._l((_vm.attributesSubset(_vm.layer)),function(attribute){return _c('td',{staticClass:"attribute"},[(_vm.isLink(_vm.getLayerField({layer: _vm.layer, feature: _vm.feature, fieldName: attribute.name})))?_c('span',{staticClass:"skin-color",class:_vm.g3wtemplate.getFontClass('link')}):(_vm.isPhoto(_vm.getLayerField({layer: _vm.layer, feature: _vm.feature, fieldName: attribute.name})))?_c('span',{staticClass:"skin-color",class:_vm.g3wtemplate.getFontClass('image')}):(_vm.isImage(_vm.getLayerField({layer: _vm.layer, feature: _vm.feature, fieldName: attribute.name})))?_c('span',{staticClass:"skin-color",class:_vm.g3wtemplate.getFontClass('image')}):_c('span',[_vm._v(_vm._s(_vm.feature.attributes[attribute.name]))])])}),_vm._v(" "),(!_vm.hasLayerOneFeature(_vm.layer))?_c('td'):_vm._e()],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-137530c7"

},{"components/QueryResultsActions.vue":240,"mixins":302,"vueify/lib/insert-css":2}],243:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _FieldLink = require('components/FieldLink.vue');

var _FieldLink2 = _interopRequireDefault(_FieldLink);

var _FieldVue = require('components/FieldVue.vue');

var _FieldVue2 = _interopRequireDefault(_FieldVue);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "tableattributefieldvalue",
  props: {
    field: {
      type: Object
    },
    feature: {
      type: Object
    }
  },
  mixins: [_mixins.fieldsMixin],
  components: {
    'g3w-link': _FieldLink2.default,
    'g3w-vue': _FieldVue2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isVue(_vm.field))?_c('g3w-vue',{attrs:{"feature":_vm.feature,"state":_vm.field}}):(_vm.isSimple(_vm.field))?_c('span',{domProps:{"innerHTML":_vm._s(_vm.field.value)}}):(_vm.isPhoto(_vm.field))?_c('g3w-image',{attrs:{"value":_vm.field.value}}):(_vm.isImage(_vm.field))?_c('g3w-image',{attrs:{"value":_vm.field.value}}):(_vm.isLink(_vm.field))?_c('g3w-link',{attrs:{"state":{value: _vm.field.value}}}):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0a32e30e"

},{"components/FieldLink.vue":163,"components/FieldVue.vue":166,"mixins":302}],244:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".query-relation[data-v-20ddbb22]{margin-top:3px}.query-relation>.header[data-v-20ddbb22]{padding:3px;display:flex;justify-content:space-between;align-items:center;width:100%;margin:0!important}.query-relation>.header>.g3w-long-text[data-v-20ddbb22]{border-radius:3px;font-size:1.3em}.query-relation.mobile>.header>.g3w-long-text[data-v-20ddbb22]{font-size:1em}.relations-table-tools[data-v-20ddbb22]{font-size:1.1em;margin-bottom:3px}.relations-table-tools>.action-button[data-v-20ddbb22]{padding:5px}.relation-wrapper[data-v-20ddbb22]{display:flex;justify-content:space-between;margin-bottom:5px;margin-top:3px;height:95%}.back-button[data-v-20ddbb22]{font-size:.8em}.header-component[data-v-20ddbb22]{width:100%;display:flex;margin-left:auto;margin-bottom:5px;margin-right:4px}.table-tools[data-v-20ddbb22]{display:flex;justify-content:space-between}.relationtable .table-tools .action-button[data-v-20ddbb22]:hover{background-color:transparent}.relationtable.dataTable tbody tr.selected[data-v-20ddbb22]{background-color:#e4e4e4!important}.relationtable.dataTable tbody tr.selected .row-wrap-tabs .tabs-wrapper[data-v-20ddbb22]{background-color:#fff!important}#chart_content[data-v-20ddbb22]{padding-bottom:5px;margin-bottom:5px;margin-left:8px}.dataTables_scrollBody[data-v-20ddbb22]{font-weight:700;margin-top:10px;font-size:1.1em;display:flex;justify-content:space-between}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

var _FieldG3W = require('components/FieldG3W.vue');

var _FieldG3W2 = _interopRequireDefault(_FieldG3W);

var _QueryResultsActionDownloadFormats = require('components/QueryResultsActionDownloadFormats.vue');

var _QueryResultsActionDownloadFormats2 = _interopRequireDefault(_QueryResultsActionDownloadFormats);

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _mixins = require('mixins');

var _eventbus = require('app/eventbus');

var _utils = require('utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var SIDEBARWIDTH = void 0;

exports.default = {
  name: 'relation',

  props: {
    table: {},
    feature: { default: null },
    relation: {},
    previousview: {},
    showChartButton: {},
    cardinality: {}
  },

  inject: ['relationnoback'],

  mixins: [_mixins.fieldsMixin, _mixins.resizeMixin],

  components: {
    Field: _FieldG3W2.default
  },

  data: function data() {
    return {
      fields: null,
      chart: false,
      headercomponent: null,
      downloadButton: null,
      downloadLayer: {
        state: null,
        config: {
          downloads: []
        }
      }
    };
  },


  computed: {
    showTools: function showTools() {
      return [!!this.isEditable, !!this.table.formStructure, !!this.isGeoLayer].filter(Boolean).length;
    },
    showrelationslist: function showrelationslist() {
      return 'relations' === this.previousview && !this.relationnoback;
    },
    one: function one() {
      return 'ONE' === this.relation.type;
    }
  },

  methods: {
    zoomToGeometry: function zoomToGeometry(geometry) {
      if (geometry) {
        _gui2.default.getService('map').zoomToGeometry(new ol.geom[geometry.type](geometry.coordinates), { highlight: true });
      }
    },
    createTable: function () {
      var _ref = _asyncToGenerator(function* () {
        var _this = this;

        var layer = _catalogLayers2.default.getLayerById(this.table.layerId);

        this.isEditable = layer.isEditable() && !layer.isInEditing();

        this.isGeoLayer = undefined !== this.table.features.find(function (f) {
          return f.geometry;
        });

        var downloadformats = layer.isDownloadable() ? layer.getDownloadableFormats() : [];

        if (downloadformats.length > 0) {
          this.downloadButton = {
            toggled: false,
            tooltip: downloadformats.length > 1 ? 'Downloads' : 'sdk.tooltips.download_' + downloadformats[0],
            handler: downloadformats.length > 1 ? _asyncToGenerator(function* () {
              _this.downloadButton.toggled = !_this.downloadButton.toggled;
              _this.downloadLayer.state = _this.downloadLayer.state || layer.state;
              _this.downloadLayer.config.downloads = _this.downloadLayer.config.downloads.length ? _this.downloadLayer.config.downloads : downloadformats.map(function (format) {
                return {
                  id: format,
                  format: format,
                  cbk: function cbk() {
                    _this.saveRelation(layer.getDownloadUrl(format));
                    _this.headercomponent = null;
                  },
                  download: true
                };
              });
              _this.headercomponent = _this.downloadButton.toggled ? _QueryResultsActionDownloadFormats2.default : null;
            }) : function () {
              return _this.saveRelation(layer.getDownloadUrl(downloadformats[0]));
            }
          };
        }

        _eventbus.RelationEventBus.$on('reload', function () {
          _this.reloadLayout();
        });

        this.showChart = (0, _utils.throttle)(_asyncToGenerator(function* () {
          _this.chart = !_this.chart;
          yield _this.$nextTick();
          _this.chartContainer = _this.chartContainer || $('#chart_content');
          _this.$emit(_this.chart ? 'show-chart' : 'hide-chart', _this.chartContainer, { relations: [_this.relation], fid: _this.feature.attributes[_constant.G3W_FID] });
        }));

        yield this.$nextTick();

        SIDEBARWIDTH = _gui2.default.getSize({ element: 'sidebar', what: 'width' });

        this.relation.title = this.relation.name;

        if (!this.one) {
          this.relationDataTable = $(this.$refs.relationtable).DataTable({
            pageLength: 10,
            bLengthChange: true,
            scrollResize: true,
            scrollCollapse: true,
            scrollX: true,
            responsive: true,
            order: [this.showTools ? 1 : 0, 'asc'],
            columnDefs: [{ orderable: this.showTools, targets: 0 }],
            autoWidth: false
          });
          this.tableHeaderHeight = $('.query-relation  div.dataTables_scrollHeadInner').height();
        }

        _gui2.default.on('pop-content', function () {
          return setTimeout(function () {
            return _this.resize();
          });
        });
      });

      function createTable() {
        return _ref.apply(this, arguments);
      }

      return createTable;
    }(),
    resize: function () {
      var _ref4 = _asyncToGenerator(function* () {
        if (!this.$refs.query_relation || 'none' === this.$refs.query_relation.parentNode.style.display) {
          return;
        }

        var table = $(this.$refs.query_relation).find('div.dataTables_scrollBody');
        table.height($(".content").height() - this.tableHeaderHeight - $('.content_breadcrumb').outerHeight() - $('.navbar-header').outerHeight() - $('.close-panel-block').outerHeight() - $(this.$refs['relation-header']).outerHeight() - $('.dataTables_filter').last().outerHeight() - $('.dataTables_paginate.paging_simple_numbers').outerHeight() - $('.dataTables_scrollHead').last().outerHeight());

        if (this.table.rowFormStructure) {
          $('.row-wrap-tabs > .tabs-wrapper').width(table.width() - $(this.$refs.relationtable).find('tr.selected > td').outerWidth() - 20);
        }

        this.reloadLayout();
      });

      function resize() {
        return _ref4.apply(this, arguments);
      }

      return resize;
    }(),
    saveRelation: function saveRelation(type) {
      this.$emit('save-relation', type);
      this.downloadButton.toggled = false;
    },
    showFormStructureRow: function () {
      var _ref5 = _asyncToGenerator(function* (event, row) {
        this.table.rowFormStructure = this.table.rowFormStructure === row ? null : row;
        this.fields = this.getRowFields(row);
        yield this.$nextTick();
        $('#relationtable_wrapper div.dataTables_scrollBody').css('overflow-x', this.table.rowFormStructure ? 'hidden' : 'auto');
        this.resize();
      });

      function showFormStructureRow(_x, _x2) {
        return _ref5.apply(this, arguments);
      }

      return showFormStructureRow;
    }(),
    editFeature: function editFeature(index) {
      _gui2.default.getService('queryresults').editFeature({
        layer: {
          id: this.table.layerId,
          attributes: this.table.fields
        },
        feature: this.table.features[index]
      });
    },
    getRowFields: function getRowFields(row) {
      var _this2 = this;

      return this.table.fields.map(function (field, index) {
        field.value = row[index];
        field.query = true;
        field.input = { type: '' + _this2.getFieldType(field) };
        return field;
      });
    },
    reloadLayout: function reloadLayout() {
      if (this.relationDataTable) {
        this.relationDataTable.columns.adjust();
      }
    },
    back: function back() {
      this.$parent.setRelationsList();
    },
    fieldIs: function fieldIs(type, value) {
      return this.getFieldType(value) === type;
    },
    is: function is(type, value) {
      return this.fieldIs(type, value);
    },
    moveFnc: function moveFnc(evt) {
      var sidebarHeaderSize = $('.sidebar-collapse').length ? 0 : SIDEBARWIDTH;
      var size = evt.pageX + 2 - sidebarHeaderSize;
      this.$refs.tablecontent.style.width = size + 'px';
      this.$refs.chartcontent.style.width = $(this.$refs.relationwrapper).width() - size - 10 + 'px';
    }
  },

  watch: {
    table: {
      immediate: true,
      handler: function handler(table) {
        if (table && table.rows.length) {
          this.createTable();
        }
      }
    },

    chart: function () {
      var _ref6 = _asyncToGenerator(function* () {
        yield this.$nextTick();
        this.resize();
      });

      function chart() {
        return _ref6.apply(this, arguments);
      }

      return chart;
    }(),
    headercomponent: function () {
      var _ref7 = _asyncToGenerator(function* () {
        yield this.$nextTick();
        this.resize();
      });

      function headercomponent() {
        return _ref7.apply(this, arguments);
      }

      return headercomponent;
    }()
  },

  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
  },
  beforeDestroy: function () {
    var _ref8 = _asyncToGenerator(function* () {
      if (!this.relationDataTable) {
        return;
      }
      this.relationDataTable.destroy();
      this.relationDataTable = null;
      if (this.chartContainer) {
        this.$emit('hide-chart', this.chartContainer);
      }
      this.chartContainer = null;
      this.tableHeaderHeight = null;
      _gui2.default.off('pop-content', this.resize);
    });

    function beforeDestroy() {
      return _ref8.apply(this, arguments);
    }

    return beforeDestroy;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.table)?_c('div',{ref:"query_relation",staticClass:"query-relation",class:_vm.isMobile() ? 'mobile' : null},[_c('div',{ref:"relation-header",staticClass:"header skin-background-color lighten"},[_c('div',{staticClass:"g3w-long-text"},[(_vm.showrelationslist)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('sdk.relations.back_to_relations'),expression:"'sdk.relations.back_to_relations'",arg:"right",modifiers:{"create":true}}],staticClass:"action-button-icon action-button back-button",class:_vm.g3wtemplate.getFontClass('exit'),on:{"click":function($event){$event.stopPropagation();return _vm.back($event)}}}):_vm._e(),_vm._v(" "),_c('b',{staticClass:"relation-tile skin-color"},[_vm._v(" "+_vm._s(_vm.relation.name)+" ")])]),_vm._v(" "),(_vm.table.rows.length)?_c('div',{staticClass:"relations-table-tools"},[(_vm.downloadButton)?_c('span',{directives:[{name:"download",rawName:"v-download"},{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:(_vm.downloadButton.tooltip),expression:"downloadButton.tooltip",arg:"left",modifiers:{"create":true}}],staticClass:"action-button-icon action-button",class:[
          _vm.g3wtemplate.getFontClass('download'),
          { 'toggled-white': _vm.downloadButton.toggled } ],on:{"click":function($event){$event.stopPropagation();return _vm.downloadButton.handler($event)}}}):_vm._e(),_vm._v(" "),(_vm.showChartButton)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:bottom.create",value:('sdk.tooltips.show_chart'),expression:"'sdk.tooltips.show_chart'",arg:"bottom",modifiers:{"create":true}}],staticClass:"action-button-icon action-button",class:[
          _vm.g3wtemplate.getFontClass('chart'),
          _vm.chart ? 'toggled-white' : '' ],on:{"click":function($event){$event.stopPropagation();return _vm.showChart($event)}}}):_vm._e()]):_vm._e()]),_vm._v(" "),(_vm.table.rows.length)?_c('div',{ref:"relationwrapper",staticClass:"relation-wrapper"},[_c('div',{ref:"tablecontent",style:({
        width:       _vm.chart ? '70%' : '100%',
        marginRight: _vm.chart ? '8px' : '3px',
        position:    'relative',
      }),attrs:{"id":"table_content"}},[(_vm.headercomponent)?_c('div',{staticClass:"header-component"},[_c(_vm.headercomponent,{tag:"component",attrs:{"layer":_vm.downloadLayer.state,"config":_vm.downloadLayer.config}})],1):_vm._e(),_vm._v(" "),_c('table',{ref:"relationtable",staticClass:"hover relationtable table table-striped row-border"},[_c('thead',[_c('tr',{staticStyle:{"height":"0! important"}},[(_vm.showTools)?_c('th',{style:({
                minWidth: this.showTools * 30 + 'px',
                padding:  '0 !important',
              })}):_vm._e(),_vm._v(" "),_vm._l((_vm.table.columns),function(column){return _c('th',[_vm._v(_vm._s(column))])})],2)]),_vm._v(" "),_c('tbody',_vm._l((_vm.table.rows),function(row,index){return _c('tr',{key:_vm.table.rows_fid[index],class:{
            'selected': _vm.table.rowFormStructure === row,
          }},[(_vm.showTools)?_c('td',{staticClass:"table-tools"},[(_vm.table.features[index].geometry)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('sdk.tooltips.relations.zoomtogeometry'),expression:"'sdk.tooltips.relations.zoomtogeometry'",arg:"right",modifiers:{"create":true}}],staticClass:"action-button row-form skin-color",class:_vm.g3wtemplate.getFontClass('marker'),on:{"click":function($event){$event.stopPropagation();return _vm.zoomToGeometry(_vm.table.features[index].geometry)}}}):_vm._e(),_vm._v(" "),(_vm.table.formStructure)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:(("sdk.tooltips.relations." + (_vm.table.rowFormStructure === row ? 'form_to_row' : 'row_to_form'))),expression:"`sdk.tooltips.relations.${table.rowFormStructure === row ? 'form_to_row' : 'row_to_form'}`",arg:"right",modifiers:{"create":true}}],staticClass:"action-button row-form skin-color",class:_vm.g3wtemplate.getFontClass(_vm.table.rowFormStructure === row ? 'minus' : 'table'),attrs:{"current-tooltip":("sdk.tooltips.relations." + (_vm.table.rowFormStructure === row ? 'form_to_row' : 'row_to_form'))},on:{"click":function($event){$event.stopPropagation();return _vm.showFormStructureRow($event, row)}}}):_vm._e(),_vm._v(" "),(_vm.isEditable)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('Edit'),expression:"'Edit'",arg:"right",modifiers:{"create":true}}],staticClass:"action-button row-form skin-color",class:_vm.g3wtemplate.getFontClass('pencil'),on:{"click":function($event){$event.stopPropagation();return _vm.editFeature(index)}}}):_vm._e()]):_vm._e(),_vm._v(" "),(_vm.table.formStructure && _vm.table.rowFormStructure === row)?_c('td',{staticClass:"row-wrap-tabs",attrs:{"colspan":_vm.table.columns.length}},[_c('tabs',{attrs:{"layerid":_vm.table.layerId,"feature":_vm.table.features[index],"fields":_vm.fields,"tabs":_vm.table.formStructure}})],1):_vm._l((row),function(value){return _c('td',[_c('field',{attrs:{"state":{value:value}}})],1)})],2)}),0)])]),_vm._v(" "),_c('g3w-resize',{staticClass:"skin-border-color lighten",staticStyle:{"border-style":"solid","border-width":"0 1px 0 1px"},attrs:{"show":_vm.chart,"moveFnc":_vm.moveFnc,"where":'content'}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.chart),expression:"chart"}],ref:"chartcontent",style:({ width: _vm.chart ? '30%' : '0' }),attrs:{"id":"chart_content"}})],1):_c('div',{staticClass:"dataTables_scrollBody"},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.relations.no_relations_found'),expression:"'sdk.relations.no_relations_found'"}]})])]):_vm._e()}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-20ddbb22"

},{"app/constant":5,"app/eventbus":43,"components/FieldG3W.vue":160,"components/QueryResultsActionDownloadFormats.vue":237,"mixins":302,"services/gui":319,"store/catalog-layers":329,"utils":419,"vueify/lib/insert-css":2}],245:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".relation-grid-item[data-v-02f56b7e]{min-width:0;min-height:80px;border:2px solid;cursor:pointer;border-radius:4px;background-color:#fff;display:flex;align-items:center}.relation-grid-item[data-v-02f56b7e]:hover{background-color:transparent}.query-relations[data-v-02f56b7e]{overflow-y:auto}.query-relations>.header[data-v-02f56b7e]{margin-bottom:10px;border-radius:4px;padding:5px}.query-relations>.query-relations-content[data-v-02f56b7e]{display:grid;grid-template-columns:repeat(2,auto);grid-column-gap:5px;grid-row-gap:5px}.relation-grid-item>.g3w-long-text[data-v-02f56b7e]{font-weight:700;padding:5px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'relations',

  props: ['relations', 'feature', 'loading'],

  methods: {
    showRelation: function () {
      var _ref = _asyncToGenerator(function* (relation) {
        yield this.$parent.showRelation(relation);
      });

      function showRelation(_x) {
        return _ref.apply(this, arguments);
      }

      return showRelation;
    }(),
    featureInfo: function featureInfo() {
      var infoFeatures = [];
      var index = 0;
      Object.entries(this.feature.attributes).forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            key = _ref3[0],
            value = _ref3[1];

        if (index > 2) {
          return false;
        }

        if (value && _.isString(value) && -1 === value.indexOf('/')) {
          infoFeatures.push({ key: key, value: value });
          index++;
        }
      });
      return infoFeatures;
    }
  },

  mounted: function () {
    var _ref4 = _asyncToGenerator(function* () {
      if (1 === this.relations.length) {
        this.relations[0].noback = true;
        yield this.showRelation(this.relations[0]);
      }
    });

    function mounted() {
      return _ref4.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    if (1 === this.relations.length) {
      delete this.relations[0].noback;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"query-relations"},[_c('div',{staticClass:"header skin-background-color lighten"},[_c('div',{staticClass:"skin-color-dark"},[_c('span',{directives:[{name:"t",rawName:"v-t:pre",value:('sdk.relations.list_of_relations_feature'),expression:"'sdk.relations.list_of_relations_feature'",arg:"pre"}],staticStyle:{"font-size":"1.1em"}}),_vm._v(" "),_vm._l((_vm.featureInfo()),function(info){return _c('span',[_c('b',[_vm._v(_vm._s(info.key))]),_vm._v(": "+_vm._s(info.value))])})],2)]),_vm._v(" "),_c('div',{staticClass:"query-relations-content"},_vm._l((_vm.relations),function(relation){return _c('div',{staticClass:"skin-border-color relation-grid-item",on:{"click":function($event){$event.stopPropagation();return _vm.showRelation(relation)}}},[_c('span',{staticClass:"skin-color g3w-long-text"},[_vm._v(_vm._s(relation.name))])])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-02f56b7e"

},{"vueify/lib/insert-css":2}],246:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require("services/gui");

var _gui2 = _interopRequireDefault(_gui);

var _Relations = require("components/Relations.vue");

var _Relations2 = _interopRequireDefault(_Relations);

var _Relation = require("components/Relation.vue");

var _Relation2 = _interopRequireDefault(_Relation);

var _constant = require("app/constant");

var _eventbus = require("app/eventbus");

var _getFeaturesFromResponseVectorApi = require("utils/getFeaturesFromResponseVectorApi");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'relation-page',

  data: function data() {
    this.chartRelationIds = this.$options.chartRelationIds || [];
    var _$options = this.$options,
        table = _$options.table,
        _$options$relation = _$options.relation,
        relation = _$options$relation === undefined ? null : _$options$relation,
        relations = _$options.relations,
        nmRelation = _$options.nmRelation,
        feature = _$options.feature,
        currentview = _$options.currentview,
        service = _$options.service;

    return {
      loading: false,
      state: null,
      error: false,
      table: table ? service.buildRelationTable(table) : null,
      relation: relation,
      relations: relations,
      nmRelation: nmRelation,
      showChartButton: false,
      feature: feature,
      currentview: currentview,
      previousview: currentview
    };
  },
  provide: function provide() {
    return {
      relationnoback: this.$options.relations.length === 1
    };
  },

  components: {
    'relations': _Relations2.default,
    'relation': _Relation2.default
  },
  methods: {
    saveRelations: function saveRelations(type) {
      this.$options.service.saveRelations(type);
    },
    reloadLayout: function reloadLayout() {
      _eventbus.RelationEventBus.$emit('reload');
    },
    showChart: function showChart(container, relationData) {
      var relationLayerId = this.relation.referencingLayer;
      _gui2.default.getService('queryresults').showChart([relationLayerId], container, relationData);
    },
    hideChart: function hideChart(container) {
      _gui2.default.getService('queryresults').hideChart(container);
    },
    showRelation: function () {
      var _ref = _asyncToGenerator(function* (relation) {
        _gui2.default.setLoadingContent(true);
        this.loading = true;
        this.relation = relation;
        var relationLayerId = relation.referencingLayer;
        var fid = this.feature.attributes[_constant.G3W_FID];
        try {
          var response = yield this.$options.service.getRelations({
            layer: this.$options.layer,
            relation: relation,
            fid: fid
          });
          var relations = (0, _getFeaturesFromResponseVectorApi.getFeaturesFromResponseVectorApi)(response, {
            type: 'result'
          });
          if (this.nmRelation) {
            relationLayerId = this.nmRelation.referencedLayer;
            relations = yield this.$options.service.getRelationsNM({
              nmRelation: this.nmRelation,
              features: relations
            });
          }
          this.showChartButton = !!this.chartRelationIds.find(function (chartlayerid) {
            return chartlayerid === relationLayerId;
          });
          this.table = this.$options.service.buildRelationTable(relations, relationLayerId);

          _gui2.default.changeCurrentContentOptions({
            title: relation.name,
            crumb: {
              title: relation.name
            }
          });
          yield this.$nextTick();
          this.previousview = this.currentview;
          this.currentview = 'relation';
        } catch (err) {}
        _gui2.default.setLoadingContent(false);
        this.loading = true;
      });

      function showRelation(_x) {
        return _ref.apply(this, arguments);
      }

      return showRelation;
    }(),
    setRelationsList: function setRelationsList() {
      this.previousview = 'relation';
      this.currentview = 'relations';
      _gui2.default.changeCurrentContentOptions({
        crumb: {
          title: _constant.LIST_OF_RELATIONS_TITLE
        }
      });
      this.loading = false;
    }
  },
  beforeMount: function beforeMount() {
    if (this.currentview === 'relation' || this.relations.length === 1 && this.relations[0].type === 'ONE') this.showRelation(this.relations[0]);
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      this.relations.sort(function (_ref3, _ref4) {
        var relationName1 = _ref3.name;
        var relationName2 = _ref4.name;

        if (relationName1 < relationName2) return -1;
        if (relationName1 > relationName2) return 1;
        return 0;
      });
      yield this.$nextTick();
      if (this.error) requestAnimationFrame(function () {
        _gui2.default.popContent();
      });
      this.error = false;
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"query-relations-page"},[_c(_vm.currentview,{ref:_vm.currentview,tag:"component",attrs:{"loading":_vm.loading,"previousview":_vm.previousview,"showChartButton":_vm.showChartButton,"relations":_vm.relations,"relation":_vm.relation,"nmRelation":_vm.nmRelation,"feature":_vm.feature,"table":_vm.table},on:{"save-relation":_vm.saveRelations,"show-chart":_vm.showChart,"hide-chart":_vm.hideChart}})],1)}
__vue__options__.staticRenderFns = []

},{"app/constant":5,"app/eventbus":43,"components/Relation.vue":244,"components/Relations.vue":245,"services/gui":319,"utils/getFeaturesFromResponseVectorApi":396}],247:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Tool = require('components/Tool.vue');

var _Tool2 = _interopRequireDefault(_Tool);

var _QueryBuilderSearch = require('components/QueryBuilderSearch.vue');

var _QueryBuilderSearch2 = _interopRequireDefault(_QueryBuilderSearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'search',

  data: function data() {
    return {
      state: null
    };
  },

  components: {
    'g3w-tool': _Tool2.default,
    'g3w-search-querybuilder': _QueryBuilderSearch2.default
  },
  computed: {
    show: function show() {
      return this.state.searches.length + this.state.searchtools.length + this.state.querybuildersearches.length > 0;
    }
  },
  methods: {
    showPanel: function showPanel() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.$options.service.showPanel(config);
    },
    removeItem: function removeItem(_ref) {
      var type = _ref.type,
          index = _ref.index;

      this.$options.service.removeItem({
        type: type,
        index: index
      });
    }
  },
  mounted: function () {
    var _ref2 = _asyncToGenerator(function* () {
      yield this.$nextTick();
      $('.icon-search-action').tooltip();
    });

    function mounted() {
      return _ref2.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.show)?_c('ul',{staticClass:"treeview-menu g3w-search g3w-tools menu-items",attrs:{"id":"g3w-search"}},[_vm._l((_vm.state.searches),function(search){return _c('li',{staticClass:"menu-item",on:{"click":function($event){return _vm.showPanel(search)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('empty-circle')}),_vm._v(" "),_c('span',[_vm._v(_vm._s(search.name))])])}),_vm._v(" "),_vm._l((_vm.state.searchtools),function(searchtool){return _c('li',[_c('g3w-tool',{attrs:{"tool":searchtool}})],1)}),_vm._v(" "),_vm._l((_vm.state.querybuildersearches),function(querybuildersearch,index){return _c('g3w-search-querybuilder',{key:querybuildersearch.id,attrs:{"querybuildersearch":querybuildersearch},on:{"delete":function($event){return _vm.removeItem({type:'querybuilder', index:index})}}})})],2):_vm._e()}
__vue__options__.staticRenderFns = []

},{"components/QueryBuilderSearch.vue":233,"components/Tool.vue":263}],248:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId,
    convertQGISDateTimeFormatToMoment = _require.convertQGISDateTimeFormatToMoment;

exports.default = {
  name: 'Searchdatetime',
  props: {
    forminput: {
      type: Object,
      require: true
    }
  },
  created: function created() {
    this.id = 'search_datetime_' + getUniqueDomId();
  },

  computed: {
    time: function time() {
      return this.forminput.options.format.time;
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      yield this.$nextTick();
      var format = this.forminput.options.format;
      var fieldformat = format.fieldformat,
          displayformat = format.displayformat;

      fieldformat = convertQGISDateTimeFormatToMoment(fieldformat);
      displayformat = convertQGISDateTimeFormatToMoment(displayformat);
      $('#' + this.id).datetimepicker({
        defaultDate: null,
        format: displayformat,
        ignoreReadonly: true,
        allowInputToggle: true,
        toolbarPlacement: 'top',
        widgetPositioning: {
          vertical: 'bottom',
          horizontal: 'left'
        },
        showClose: true,
        locale: _applicationState2.default.language || 'en'
      });

      $('#' + this.id).on("dp.change", function () {
        var newDate = $('#' + _this.forminput.id).val();
        _this.forminput.value = _.isEmpty(_.trim(newDate)) ? null : moment(newDate, displayformat).format(fieldformat);
        _this.$emit('change', _this.forminput);
      });

      _applicationState2.default.ismobile && setTimeout(function () {
        $('#' + _this.forminput.id).blur();
      });
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"input-group date",attrs:{"id":_vm.id}},[_c('input',{staticClass:"form-control",attrs:{"id":_vm.forminput.id,"type":"text"}}),_vm._v(" "),_c('span',{staticClass:"input-group-addon skin-color"},[_c('span',{class:_vm.g3wtemplate.getFontClass(_vm.time ? 'time': 'calendar')})])])}
__vue__options__.staticRenderFns = []

},{"store/application-state":328,"utils":419}],249:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SearchSelect = require('components/SearchSelect2.vue');

var _SearchSelect2 = _interopRequireDefault(_SearchSelect);

var _SearchDatetime = require('components/SearchDatetime.vue');

var _SearchDatetime2 = _interopRequireDefault(_SearchDatetime);

var _SearchPanelLabel = require('components/SearchPanelLabel.vue');

var _SearchPanelLabel2 = _interopRequireDefault(_SearchPanelLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  components: {
    Select2: _SearchSelect2.default,
    SearchDatetime: _SearchDatetime2.default,
    SearchPanelLabel: _SearchPanelLabel2.default
  },
  data: function data() {
    return {
      state: this.$options.service.state
    };
  },

  methods: {
    isSelectDisabled: function isSelectDisabled(forminput) {
      return [this.state.loading[forminput.options.dependance], forminput.loading, forminput.options.disabled].reduce(function (disabled) {
        var current = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return disabled || current;
      }, false);
    },
    onFocus: function () {
      var _ref = _asyncToGenerator(function* (event) {
        if (this.isMobile()) {
          var top = $(event.target).position().top - 10;
          yield this.$nextTick();
          setTimeout(function () {
            return $('.sidebar').scrollTop(top);
          }, 500);
        }
      });

      function onFocus(_x2) {
        return _ref.apply(this, arguments);
      }

      return onFocus;
    }(),
    autocompleteRequest: function () {
      var _ref2 = _asyncToGenerator(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return this.$options.service.getUniqueValuesFromField(_extends({}, params, {
          output: 'autocomplete'
        }));
      });

      function autocompleteRequest() {
        return _ref2.apply(this, arguments);
      }

      return autocompleteRequest;
    }(),
    changeDependencyFields: function changeDependencyFields(_ref3) {
      var field = _ref3.attribute,
          value = _ref3.value;

      var subscribers = this.$options.service.getDependencies(field);
      return subscribers.length ? this.$options.service.fillDependencyInputs({
        field: field,
        subscribers: subscribers,
        value: value
      }) : Promise.resolve();
    },
    changeNumericInput: function changeNumericInput(input) {
      input.value = input.value || input.value === 0 ? input.value : null;
      this.changeInput(input);
    },
    changeInput: function changeInput(input) {
      var _this = this;

      var id = input.id,
          attribute = input.attribute,
          value = input.value,
          type = input.type;

      try {
        value = type === 'textfield' || type === 'textField' ? value : value.trim();
      } catch (err) {}
      this.$options.service.changeInput({ id: id, value: value });
      this.state.searching = true;
      this.changeDependencyFields({
        attribute: attribute,
        value: value
      }).finally(function () {
        _this.state.searching = false;
      });
    },
    doSearch: function doSearch(event) {
      event.preventDefault();
      this.$options.service.run();
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.state.searching),expression:"state.searching"}],staticClass:"g3w-search-panel form-group"},[_c('h4',{},[_c('b',[_vm._v(_vm._s(_vm.state.title))])]),_vm._v(" "),_vm._t("tools"),_vm._v(" "),_vm._t("form",[_c('form',{staticClass:"g3w-search-form"},[_vm._l((_vm.state.forminputs),function(forminput){return _c('span',{key:forminput.id},[(forminput.type === 'numberfield')?_c('div',{staticClass:"form-group numeric"},[_c('search-panel-label',{attrs:{"forminput":forminput}}),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(forminput.value),expression:"forminput.value"}],staticClass:"form-control",attrs:{"type":"number","min":"0","id":forminput.id},domProps:{"value":(forminput.value)},on:{"change":function($event){return _vm.changeNumericInput(forminput)},"input":[function($event){if($event.target.composing){ return; }_vm.$set(forminput, "value", $event.target.value)},function($event){return _vm.changeNumericInput(forminput)}]}})],1):(forminput.type === 'textfield' || forminput.type === 'textField')?_c('div',{staticClass:"form-group form-item-search  text"},[_c('search-panel-label',{attrs:{"forminput":forminput}}),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(forminput.value),expression:"forminput.value"}],staticClass:"form-control",attrs:{"type":"text","id":forminput.id},domProps:{"value":(forminput.value)},on:{"focus":_vm.onFocus,"change":function($event){return _vm.changeInput(forminput)},"input":function($event){if($event.target.composing){ return; }_vm.$set(forminput, "value", $event.target.value)}}})],1):(forminput.type === 'selectfield' || forminput.type === 'autocompletefield')?_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.isSelectDisabled(forminput)),expression:"isSelectDisabled(forminput)"}],staticClass:"form-group text"},[_c('search-panel-label',{attrs:{"forminput":forminput}}),_vm._v(" "),(forminput.options.dependance)?_c('bar-loader',{attrs:{"loading":_vm.state.loading[forminput.options.dependance] || forminput.loading}}):_vm._e(),_vm._v(" "),_c('select2',{attrs:{"forminput":forminput,"autocompleteRequest":_vm.autocompleteRequest},on:{"select-change":_vm.changeInput}})],1):_vm._e(),_vm._v(" "),(forminput.type === 'datetimefield')?_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.state.loading[forminput.options.dependance] || false),expression:"state.loading[forminput.options.dependance] || false"}],staticClass:"form-group text"},[_c('search-panel-label',{attrs:{"forminput":forminput}}),_vm._v(" "),_c('search-datetime',{attrs:{"forminput":forminput},on:{"change":_vm.changeInput}})],1):_vm._e(),_vm._v(" "),(forminput.logicop)?_c('div',{staticClass:"search-logicop skin-border-color"},[_c('h4',[_vm._v(_vm._s(forminput.logicop))])]):_vm._e()])}),_vm._v(" "),_c('div',{staticClass:"form-group"},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('dosearch'),expression:"'dosearch'"}],staticClass:"sidebar-button-run btn btn-block pull-right",attrs:{"id":"dosearch","data-i18n":"dosearch"},on:{"click":function($event){$event.stopPropagation();return _vm.doSearch($event)}}})])],2)]),_vm._v(" "),_vm._t("footer")],2)}
__vue__options__.staticRenderFns = []

},{"components/SearchDatetime.vue":248,"components/SearchPanelLabel.vue":250,"components/SearchSelect2.vue":251}],250:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

exports.default = {
  name: 'Searchpanellabel',
  props: {
    forminput: {
      type: Object,
      require: true
    }
  },
  methods: {
    getLabelOperator: function getLabelOperator(operator) {
      return '[ ' + _constant.FILTER_EXPRESSION_OPERATORS[operator] + ' ]';
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticClass:"search-label",staticStyle:{"width":"100%","display":"flex","justify-content":"space-between"},attrs:{"for":_vm.forminput.id}},[_c('span',[_vm._v(_vm._s(_vm.forminput.label || _vm.forminput.attribute))]),_vm._v(" "),_c('span',{staticClass:"skin-color"},[_vm._v(_vm._s(_vm.getLabelOperator(_vm.forminput.operator)))])])}
__vue__options__.staticRenderFns = []

},{"app/constant":5}],251:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constant = require('app/constant');

var _mixins = require('mixins');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var autocompleteOptions = require('gui/external/select2/options/autocomplete');

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var _require2 = require('utils'),
    debounce = _require2.debounce;

exports.default = {
  name: "select2",
  props: ['forminput', 'autocompleteRequest'],
  mixins: [_mixins.select2Mixin],
  methods: {
    emitChangeEvent: function emitChangeEvent(evt) {
      var id = $(evt.target).attr('id');
      var attribute = $(evt.target).attr('name');
      var data = evt.params.data;
      var value = data ? data.id : _constant.SEARCH_ALLVALUE;
      this.$emit('select-change', {
        id: id,
        attribute: attribute,
        value: value,
        type: this.forminput.type
      });
    },
    _initSelect2Element: function _initSelect2Element() {
      var _this = this;

      var _forminput = this.forminput,
          type = _forminput.type,
          attribute = _forminput.attribute,
          options = _forminput.options;

      var numdigaut = options.numdigaut && !Number.isNaN(1 * options.numdigaut) && 1 * options.numdigaut > 0 && 1 * options.numdigaut || 2;
      var isAutocomplete = type === 'autocompletefield';
      this.select2 = $(this.$el).select2(_extends({
        width: '100%',
        dropdownParent: $('.g3w-search-form:visible'),
        minimumInputLength: isAutocomplete && numdigaut || 0,
        allowClear: isAutocomplete,
        placeholder: isAutocomplete ? '' : null,
        ajax: isAutocomplete ? {
          delay: 500,
          transport: function () {
            var _ref2 = _asyncToGenerator(function* (_ref, success, failure) {
              var value = _ref.data.q;

              try {
                var data = yield _this.autocompleteRequest({
                  field: attribute,
                  value: value
                });
                success({ results: data });
              } catch (error) {
                failure(error);
              }
            });

            function transport(_x, _x2, _x3) {
              return _ref2.apply(this, arguments);
            }

            return transport;
          }()
        } : null
      }, autocompleteOptions));
      this.select2.on('select2:select', function (evt) {
        _this.emitChangeEvent(evt);
      });
      this.forminput.type === 'autocompletefield' && this.select2.on('select2:unselecting', function (evt) {
        _this.emitChangeEvent(evt);
      });
    }
  },
  watch: {
    'forminput.value': function () {
      var _ref3 = _asyncToGenerator(function* (value) {
        yield this.$nextTick();
        if (value === _constant.SEARCH_ALLVALUE) {
          this.select2.val(value);
          this.select2.trigger('change');
        }
      });

      function forminputValue(_x4) {
        return _ref3.apply(this, arguments);
      }

      return forminputValue;
    }()
  },
  created: function created() {
    this.allvalue = _constant.SEARCH_ALLVALUE;
  },
  mounted: function () {
    var _ref4 = _asyncToGenerator(function* () {
      yield this.$nextTick();
      this._initSelect2Element();
    });

    function mounted() {
      return _ref4.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('select',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.forminput.options.disabled || _vm.forminput.loading),expression:"forminput.options.disabled || forminput.loading"}],staticClass:"form-control",attrs:{"name":_vm.forminput.attribute,"id":_vm.forminput.id}},_vm._l((_vm.forminput.options.values),function(keyvalue){return _c('option',{key:keyvalue.value,domProps:{"value":keyvalue.value}},[(keyvalue.value === _vm.allvalue )?_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.search.all'),expression:"'sdk.search.all'"}]}):_c('span',[_vm._v(_vm._s(keyvalue.key))])])}),0)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-525bb7b8"

},{"app/constant":5,"core/i18n/i18n.service":9,"gui/external/select2/options/autocomplete":78,"mixins":302,"utils":419}],252:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _eventbus = require('app/eventbus');

var _sidebar = require('services/sidebar');

var _sidebar2 = _interopRequireDefault(_sidebar);

var _constant = require('app/constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

exports.default = {

  name: "Sidebar",

  data: function data() {
    return {
      components: _sidebar2.default.state.components,
      panels: _sidebar2.default.stack.state.contentsdata,
      bOpen: true,
      bPageMode: false,
      header: t('main navigation'),
      state: _sidebar2.default.state,

      zIndex: _constant.ZINDEXES.usermessage.tool + 2

    };
  },


  computed: {
    title: function title() {
      return this.state.gui.title;
    },
    disabled: function disabled() {
      return _applicationState2.default.gui.sidebar.disabled;
    },
    panelsinstack: function panelsinstack() {
      return this.panels.length > 0;
    },
    showmainpanel: function showmainpanel() {
      return this.components.length > 0 && !this.panelsinstack;
    },
    componentname: function componentname() {
      return this.components.length ? this.components.slice(-1)[0].getTitle() : '';
    },
    panelname: function panelname() {
      return this.panels.length ? this.panels.slice(-1)[0].content.getTitle() : '';
    }
  },

  methods: {
    closePanel: function closePanel() {
      _sidebar2.default.closePanel();
    },
    closeAllPanels: function closeAllPanels() {
      _sidebar2.default.closeAllPanels();
    }
  },

  created: function created() {
    this.iframe = _applicationState2.default.iframe;
    _eventbus.SidebarEventBus.$on('sidebaritemclick', function () {
      return $('.sidebar-toggle').click();
    });
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('aside',[_c('div',{staticClass:"main-sidebar",class:{ iframe: _vm.iframe}},[_c('div',{staticClass:"sidebar",class:{ 'g3w-disabled': _vm.disabled },attrs:{"id":"g3w-sidebar"}},[_c('div',{attrs:{"id":"disable-sidebar"}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.panelsinstack),expression:"panelsinstack"}],staticClass:"g3w-sidebarpanel"},[_c('div',{staticStyle:{"overflow":"hidden","line-height":"14px","font-size":"1.5em"},attrs:{"id":"g3w-sidebarpanel-header-placeholder"}},[_c('div',{staticStyle:{"display":"flex"},style:({ justifyContent: _vm.state.gui.title ? 'space-between' : 'flex-end' })},[(_vm.title)?_c('h4',{directives:[{name:"t",rawName:"v-t",value:(_vm.title),expression:"title"}],staticStyle:{"display":"inline-block","font-weight":"bold"}}):_vm._e(),_vm._v(" "),_c('div',[(_vm.panels.length > 1)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('back'),expression:"'back'",modifiers:{"create":true}}],staticClass:"skin-tooltip-left g3w-span-button close-pane-button fa-stack",attrs:{"data-placement":"left","data-toggle":"tooltip","data-container":"body"},on:{"click":_vm.closePanel}},[_c('i',{staticClass:"fa-stack-1x panel-button",class:_vm.g3wtemplate.getFontClass('circle')}),_vm._v(" "),_c('i',{staticClass:"fa-stack-1x panel-icon",class:_vm.g3wtemplate.getFontClass('arrow-left')})]):_vm._e(),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('close'),expression:"'close'",modifiers:{"create":true}}],staticClass:"skin-tooltip-left g3w-span-button close-pane-button fa-stack",attrs:{"data-placement":"left","data-toggle":"tooltip","data-container":"body"},on:{"click":_vm.closeAllPanels}},[_c('i',{staticClass:"fa-stack-1x panel-button",class:_vm.g3wtemplate.getFontClass('circle')}),_vm._v(" "),_c('i',{staticClass:"fa-stack-1x panel-icon",class:_vm.g3wtemplate.getFontClass('close')})])])])]),_vm._v(" "),_c('div',{staticClass:"g3w-sidebarpanel-placeholder",attrs:{"id":"g3w-sidebarpanel-placeholder"}})]),_vm._v(" "),_c('div',{attrs:{"id":"g3w-sidebarcomponents-content"}},[_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.showmainpanel),expression:"showmainpanel"}],staticClass:"sidebar-menu",class:{ 'g3w-disabled': _vm.state.disabled },attrs:{"id":"g3w-sidebarcomponents"}})])])]),_vm._v(" "),_c('a',{staticClass:"sidebar-aside-toggle",class:{ 'g3w-disabled': _vm.disabled, 'iframe': _vm.iframe},style:({zIndex: _vm.zIndex}),attrs:{"href":"#","data-toggle":"offcanvas","role":"button"}},[_c('i',{class:_vm.g3wtemplate.getFontClass('bars')})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-b2170cb4"

},{"app/constant":5,"app/eventbus":43,"core/i18n/i18n.service":9,"services/sidebar":325,"store/application-state":328}],253:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _eventbus = require('app/eventbus');

var _SidebarItemAction = require('components/SidebarItemAction.vue');

var _SidebarItemAction2 = _interopRequireDefault(_SidebarItemAction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "SidebarItem",
  data: function data() {
    return {
      info: this.$options.info || {
        state: null,
        style: null,
        class: null
      },
      main: true,
      component: this.$options.component,
      active: false,
      title: '',
      open: false,
      icon: null,
      iconColor: null,
      collapsible: null
    };
  },

  components: {
    SidebarItemAction: _SidebarItemAction2.default
  },
  methods: {
    onClickItem: function onClickItem(evt) {
      var _this = this;

      this.component.isolate && evt.stopPropagation();
      if (!this.component.isolate) {
        this.$options.service.state.components.forEach(function (component) {
          if (component !== _this.component) {
            if (component.getOpen()) {
              component.click({
                open: component.isolate
              });
            }
          }
        });
        !this.component.collapsible && isMobile.any && _eventbus.SidebarEventBus.$emit('sidebaritemclick');
      }
      this.component.setOpen(!this.component.state.open);
    }
  },
  created: function created() {
    var _this2 = this;

    this.component.openClose = function () {
      return _this2.$refs.anchor_click.click();
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{directives:[{name:"show",rawName:"v-show",value:(_vm.state.visible),expression:"state.visible"},{name:"disabled",rawName:"v-disabled",value:(_vm.state.disabled),expression:"state.disabled"}],staticClass:"treeview sidebaritem",class:{'active': _vm.open},attrs:{"id":_vm.component.id}},[_c('bar-loader',{attrs:{"loading":_vm.state.loading}}),_vm._v(" "),_c('a',{ref:"anchor_click",staticStyle:{"display":"flex","justify-content":"space-between","align-items":"center"},attrs:{"href":"#"},on:{"click":function($event){$event.preventDefault();return _vm.onClickItem($event)}}},[_c('div',[_c('i',{class:_vm.icon,style:({color: _vm.iconColor})}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.title),expression:"title"}],staticClass:"treeview-label"})]),_vm._v(" "),_c('div',[(_vm.info.state)?_c('span',{class:_vm.info.class,staticStyle:{"position":"absolute","right":"5px","font-weight":"bold"},style:(_vm.info.style),attrs:{"title":_vm.info.tooltip}},[_vm._v(_vm._s(_vm.info.state))]):_vm._e(),_vm._v(" "),_vm._l((_vm.actions),function(action){return _c('sidebar-item-action',{key:action.id,attrs:{"component":_vm.component.internalComponent,"action":action}})})],2),_vm._v(" "),(_vm.collapsible)?_c('i',{staticClass:"pull-right",class:_vm.g3wtemplate.getFontClass('angle-left')}):_vm._e()]),_vm._v(" "),_c('div',{attrs:{"id":"g3w-sidebarcomponent-placeholder"}})],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-2f606059"

},{"app/eventbus":43,"components/SidebarItemAction.vue":254}],254:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'Sidebaritemaction',
  props: {
    action: {
      type: Object,
      required: true
    },
    component: {
      type: Object
    }
  },
  methods: {
    triggerAction: function triggerAction() {
      this.action.fnc(this.component);
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:(_vm.action.tooltip),expression:"action.tooltip",arg:"left",modifiers:{"create":true}}],staticClass:"action skin-tooltip-left",class:_vm.action.class,staticStyle:{"font-weight":"bold","padding":"3px"},style:(_vm.action.style),on:{"click":function($event){$event.stopPropagation();return _vm.triggerAction($event)}}})}
__vue__options__.staticRenderFns = []

},{}],255:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SpatialBookMarkItem = require("components/SpatialBookMarkItem.vue");

var _SpatialBookMarkItem2 = _interopRequireDefault(_SpatialBookMarkItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = {
  name: 'spatial-bookmark-group',

  props: {
    group: {
      type: Object,

      required: true
    }
  },
  components: {
    SpatialBookMarkItem: _SpatialBookMarkItem2.default
  },
  methods: {},
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {});

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',[_c('div',{staticStyle:{"font-weight":"bold","width":"100%"},style:({borderBottom: _vm.group.expanded ? '2px solid #2c3b41' : 'none'}),on:{"click":function($event){$event.stopPropagation();_vm.group.expanded = !_vm.group.expanded}}},[_c('span',{class:[_vm.g3wtemplate.getFontClass(_vm.group.expanded ? 'caret-down' : 'caret-right')],staticStyle:{"margin-right":"5px"}}),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.group.name))])]),_vm._v(" "),_c('ul',{directives:[{name:"show",rawName:"v-show",value:(_vm.group.expanded),expression:"group.expanded"}],staticStyle:{"margin-left":"10px"}},_vm._l((_vm.group.nodes),function(node){return _c('spatial-book-mark-item',{attrs:{"bookmark":node}})}),1)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-07ff686a"

},{"components/SpatialBookMarkItem.vue":256}],256:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".spatial-bookmark[data-v-fab34912]{display:flex;align-items:baseline;justify-content:space-between;padding:5px!important}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Projections = require('g3w-ol/projection/projections');

exports.default = {
  name: 'spatial-bookmark-item',

  props: {
    bookmark: {
      type: Object,

      required: true
    }
  },
  methods: {
    removeBookMark: function removeBookMark() {},
    gotoSpatialBookmark: function () {
      var _ref2 = _asyncToGenerator(function* (_ref) {
        var extent = _ref.extent,
            crs = _ref.crs;

        if (_gui2.default.getService('map').getEpsg().split('EPSG:')[1] !== crs.epsg) {
          var projection = yield Projections.registerProjection('EPSG:' + crs.epsg);
          extent = ol.proj.transformExtent(extent, projection, _gui2.default.getService('map').getProjection());
        }

        _gui2.default.getService('map').zoomToExtent(extent, { force: true });
      });

      function gotoSpatialBookmark(_x) {
        return _ref2.apply(this, arguments);
      }

      return gotoSpatialBookmark;
    }()
  },
  mounted: function () {
    var _ref3 = _asyncToGenerator(function* () {});

    function mounted() {
      return _ref3.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{staticClass:"spatial-bookmark",on:{"click":function($event){$event.stopPropagation();return _vm.gotoSpatialBookmark(_vm.bookmark)}}},[_c('div',[_c('span',{class:_vm.g3wtemplate.getFontClass('bookmark'),staticStyle:{"margin-right":"5px","font-size":"0.7em"}}),_vm._v(" "),_c('span',{staticClass:"g3w-long-text"},[_vm._v(_vm._s(_vm.bookmark.name))])]),_vm._v(" "),(_vm.bookmark.removable)?_c('span',{staticStyle:{"color":"red","margin":"5px","cursor":"pointer"},on:{"click":function($event){$event.stopPropagation();return _vm.$emit('remove-bookmark', _vm.bookmark.id)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('trash')})]):_vm._e()])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-fab34912"

},{"g3w-ol/projection/projections":73,"services/gui":319,"vueify/lib/insert-css":2}],257:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".content-bookmarks{font-weight:700;color:#fff;padding:5px;border-bottom:2px solid #fff;margin-bottom:5px}.container.add-bookmark-input p.error-input-message{color:#fff}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _SpatialBookMarkGroup = require('components/SpatialBookMarkGroup.vue');

var _SpatialBookMarkGroup2 = _interopRequireDefault(_SpatialBookMarkGroup);

var _SpatialBookMarkItem = require('components/SpatialBookMarkItem.vue');

var _SpatialBookMarkItem2 = _interopRequireDefault(_SpatialBookMarkItem);

var _InputText = require('components/InputText.vue');

var _InputText2 = _interopRequireDefault(_InputText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    uniqueId = _require.uniqueId;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var SPATIAL_BOOKMARKS_LOCALITEMS = _application2.default.getLocalItem(_constant.LOCAL_ITEM_IDS.SPATIALBOOKMARKS.id);

exports.default = {
  name: 'spatial-bookmarks',

  components: {
    SpatialBookMarkGroup: _SpatialBookMarkGroup2.default,
    SpatialBookMarkItem: _SpatialBookMarkItem2.default,
    InputText: _InputText2.default
  },

  data: function data() {
    var project = _projects2.default.getCurrentProject();

    if ("undefined" === typeof SPATIAL_BOOKMARKS_LOCALITEMS[project.getId()]) {
      SPATIAL_BOOKMARKS_LOCALITEMS[project.getId()] = [];
    }

    return {
      showaddform: false,

      project: {
        bookmarks: project.getSpatialBookmarks() || []
      },

      user: {
        bookmarks: SPATIAL_BOOKMARKS_LOCALITEMS[project.getId()]
      },

      addbookmarkinput: {
        name: 'add-bookmark',
        label: t('sdk.spatialbookmarks.input.name'),
        value: null,
        editable: true,
        type: 'varchar',
        input: {
          type: 'text',
          options: {}
        },
        visible: true,
        validate: {
          valid: false,
          required: true
        }
      }

    };
  },


  computed: {
    hasProjectbookmarks: function hasProjectbookmarks() {
      return this.project.bookmarks.length > 0;
    }
  },

  methods: {
    addBookMark: function addBookMark() {
      this.user.bookmarks.push({
        id: uniqueId(),
        name: this.addbookmarkinput.value,
        extent: _gui2.default.getService('map').getMapExtent(),
        removable: true,
        crs: {
          epsg: 1 * _gui2.default.getService('map').getCrs().split('EPSG:')[1]
        }
      });
      this.saveUserBookMarks();
      this.showaddform = false;
    },
    removeBookMark: function removeBookMark(id) {
      this.user.bookmarks = this.user.bookmarks.filter(function (bookmark) {
        return bookmark.id !== id;
      });
      this.saveUserBookMarks();
    },
    saveUserBookMarks: function saveUserBookMarks() {
      SPATIAL_BOOKMARKS_LOCALITEMS[_projects2.default.getCurrentProject().getId()] = this.user.bookmarks;
      _application2.default.setLocalItem({
        id: _constant.LOCAL_ITEM_IDS.SPATIALBOOKMARKS.id,
        data: SPATIAL_BOOKMARKS_LOCALITEMS
      });
    },
    showAddForm: function showAddForm() {
      this.addbookmarkinput.value = null;
      this.showaddform = true;
    }
  },

  created: function created() {
    var _this = this;

    this.$on('close', function () {
      _this.showaddform = false;
    });
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {});

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"treeview-menu g3w-spatial-bookmarks menu-items",class:{'g3w-tools': !_vm.showaddform},attrs:{"id":"g3w-spatial-bookmarks"}},[(_vm.showaddform)?[_c('li',[_c('div',{staticStyle:{"display":"flex","justify-content":"end"}},[_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('close'),expression:"'close'",arg:"left",modifiers:{"create":true}}],staticClass:"sidebar-button sidebar-button-icon",class:_vm.g3wtemplate.getFontClass('close'),staticStyle:{"padding":"5px","margin":"3px"},on:{"click":function($event){$event.stopPropagation();_vm.showaddform = false}}})]),_vm._v(" "),_c('helpdiv',{attrs:{"message":"sdk.spatialbookmarks.helptext"}}),_vm._v(" "),_c('div',{staticClass:"container add-bookmark-input",staticStyle:{"padding":"5px","width":"100%"}},[_c('input-text',{attrs:{"state":_vm.addbookmarkinput}})],1),_vm._v(" "),_c('div',{staticStyle:{"margin-top":"5px"}},[_c('button',{directives:[{name:"t",rawName:"v-t",value:('add'),expression:"'add'"},{name:"disabled",rawName:"v-disabled",value:(!_vm.addbookmarkinput.validate.valid),expression:"!addbookmarkinput.validate.valid"}],staticClass:"sidebar-button-run btn btn-block",on:{"click":function($event){$event.stopPropagation();return _vm.addBookMark($event)}}})])],1)]:[(_vm.hasProjectbookmarks)?[_c('div',{staticClass:"content-bookmarks"},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.spatialbookmarks.sections.project.title'),expression:"'sdk.spatialbookmarks.sections.project.title'"}]})]),_vm._v(" "),_vm._l((_vm.project.bookmarks),function(bookmark){return [(bookmark.nodes)?_c('spatial-book-mark-group',{attrs:{"group":bookmark}}):_c('spatial-book-mark-item',{attrs:{"bookmark":bookmark}})]})]:_vm._e(),_vm._v(" "),_c('div',{staticClass:"content-bookmarks",staticStyle:{"display":"flex","justify-content":"space-between","align-items":"center","margin-top":"10px"}},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('sdk.spatialbookmarks.sections.user.title'),expression:"'sdk.spatialbookmarks.sections.user.title'"}],staticStyle:{"font-weight":"bold","color":"#ffffff"}}),_vm._v(" "),_c('span',{staticClass:"sidebar-button sidebar-button-icon",class:_vm.g3wtemplate.getFontClass('plus'),staticStyle:{"padding":"5px","cursor":"pointer"},on:{"click":function($event){$event.stopPropagation();return _vm.showAddForm($event)}}})]),_vm._v(" "),_vm._l((_vm.user.bookmarks),function(bookmark){return _c('spatial-book-mark-item',{attrs:{"bookmark":bookmark},on:{"remove-bookmark":_vm.removeBookMark}})})]],2)}
__vue__options__.staticRenderFns = []

},{"app/constant":5,"components/InputText.vue":203,"components/SpatialBookMarkGroup.vue":255,"components/SpatialBookMarkItem.vue":256,"core/i18n/i18n.service":9,"services/application":310,"services/gui":319,"store/projects":335,"utils":419,"vueify/lib/insert-css":2}],258:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#streetview-error-key[data-v-06dad624]{display:flex;justify-content:center;align-items:center;font-weight:700;height:100%;padding:10px;background-color:#fff}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'streetview',

  data: function data() {
    return {
      state: null
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"streetview"}},[(_vm.$options.keyError)?_c('div',{attrs:{"id":"streetview-error-key"}},[_c('span',{staticClass:"skin-color"},[_vm._v(" "+_vm._s(_vm.$options.keyError))])]):_vm._e()])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-06dad624"

},{"vueify/lib/insert-css":2}],259:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".geometry[data-v-b4d834d0]{cursor:pointer}#noheaders[data-v-b4d834d0]{background-color:#fff;font-weight:700;margin-top:10px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _TableBody = require('components/TableBody.vue');

var _TableBody2 = _interopRequireDefault(_TableBody);

var _TableSelectRow = require('components/TableSelectRow.vue');

var _TableSelectRow2 = _interopRequireDefault(_TableSelectRow);

var _TableToolbar = require('components/TableToolbar.vue');

var _TableToolbar2 = _interopRequireDefault(_TableToolbar);

var _FieldG3W = require('components/FieldG3W.vue');

var _FieldG3W2 = _interopRequireDefault(_FieldG3W);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _mixins = require('mixins');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    debounce = _require.debounce;

var dataTable = void 0;
var fieldsComponents = [];
var eventHandlers = {
  pagination: {},
  nopagination: {}
};

exports.default = {
  name: "G3WTable",
  mixins: [_mixins.resizeMixin],
  data: function data() {
    return {
      tableBodyComponent: null,
      state: null,
      table: null,
      selectedRow: null
    };
  },

  components: {
    TableBody: _TableBody2.default
  },
  methods: {
    getDataFromBBOX: function getDataFromBBOX() {
      this.$options.service.getDataFromBBOX();
    },
    toggleFilterToken: function toggleFilterToken() {
      this.$options.service.toggleFilterToken();
    },
    clearAllSelection: function clearAllSelection() {
      this.$options.service.clearLayerSelection();
    },
    switchSelection: function switchSelection() {
      this.$options.service.switchSelection();
    },
    selectAllRow: function selectAllRow() {
      this.state.features.length && this.$options.service.selectAllFeatures();
    },
    _setLayout: function _setLayout() {
      this.$options.service._setLayout();
    },
    zoomAndHighLightFeature: function () {
      var _ref = _asyncToGenerator(function* (feature) {
        var zoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (feature.geometry) {
          this.$options.service.zoomAndHighLightFeature(feature, zoom);
        } else {
          yield this.$options.service.zoomAndHighLightGeometryRelationFeatures(feature, zoom);
        }
      });

      function zoomAndHighLightFeature(_x2) {
        return _ref.apply(this, arguments);
      }

      return zoomAndHighLightFeature;
    }(),
    addRemoveSelectedFeature: function addRemoveSelectedFeature(feature) {
      this.$options.service.addRemoveSelectedFeature(feature);
    },
    reloadLayout: function () {
      var _ref2 = _asyncToGenerator(function* () {
        yield this.$nextTick();
        if (dataTable) {
          dataTable.columns.adjust();
        }
      });

      function reloadLayout() {
        return _ref2.apply(this, arguments);
      }

      return reloadLayout;
    }(),
    hasHeaders: function hasHeaders() {
      return !!this.state.headers.length;
    },
    createdContentBody: function createdContentBody() {
      var _this = this;

      fieldsComponents = fieldsComponents.filter(function (fieldComponent) {
        fieldComponent.$destroy();
        return false;
      });
      var trDomeElements = dataTable.rows().nodes();

      trDomeElements.each(function (rowElement, index) {
        $(rowElement).css('cursor', 'pointer');
        if (_this.state.features.length) {
          var feature = _this.state.features[index];
          var hasGeometry = !!feature.geometry;
          $(rowElement).addClass('feature_attribute');
          feature.selected && $(rowElement).addClass('selected');
          $(rowElement).on('click', function () {
            if (hasGeometry) {
              _this.zoomAndHighLightFeature(feature);
            }
          });
          $(rowElement).on('mouseover', function () {
            if (hasGeometry) {
              _this.zoomAndHighLightFeature(feature, false);
            }
          });
          $(rowElement).children().each(function (index, element) {
            var header = _this.state.headers[index];
            var contentDOM = void 0;
            if (header === null) {
              var SelectRowClass = Vue.extend(_TableSelectRow2.default);
              var SelectRowInstance = new SelectRowClass({
                propsData: {
                  feature: feature
                }
              });
              SelectRowInstance.$on('selected', function (feature) {
                return _this.$options.service.addRemoveSelectedFeature(feature);
              });
              _this.$watch(function () {
                return feature.selected;
              }, function (selected) {
                selected ? $(rowElement).addClass('selected') : $(rowElement).removeClass('selected');
              });
              contentDOM = SelectRowInstance.$mount().$el;
            } else {
              var fieldClass = Vue.extend(_FieldG3W2.default);
              var fieldInstance = new fieldClass({
                propsData: {
                  state: {
                    value: feature.attributes[header.name]
                  }
                }
              });
              fieldInstance.$mount();
              fieldsComponents.push(fieldInstance);
              contentDOM = fieldInstance.$el;
            }
            $(element).html(contentDOM);
          });
        }
      });
      setTimeout(function () {
        return _this.reloadLayout();
      }, 0);
    },
    resize: function () {
      var _ref3 = _asyncToGenerator(function* () {
        yield this.$nextTick();
        var tableHeight = $(".content").height();
        var tableHeaderHeight = $('#open_attribute_table  div.dataTables_scrollHeadInner').height();
        $('#open_attribute_table  div.dataTables_scrollBody').height(tableHeight - tableHeaderHeight - 130);
      });

      function resize() {
        return _ref3.apply(this, arguments);
      }

      return resize;
    }()
  },
  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
  },
  mounted: function () {
    var _ref4 = _asyncToGenerator(function* () {
      var _this2 = this;

      this.setContentKey = _gui2.default.onafter('setContent', this.resize);
      var hideElements = function hideElements() {
        $('.dataTables_info, .dataTables_length').hide();
        $('.dataTables_paginate').css({
          'display': 'flex',
          'justify-content': 'space-between',
          'font-size': '0.8em',
          'margin-top': '5px'
        });
        $('.dataTables_filter').css('float', 'right');
        $('.dataTables_paginate').css('margin', '0');
      };
      yield this.$nextTick();
      this.first = false;
      var commonDataTableOptions = {
        "lengthMenu": this.state.pageLengths,
        "pageLength": this.state.pageLength,
        "scrollX": true,
        "processing": false,
        "scrollCollapse": true,
        "sSearch": false,
        "order": [1, 'asc'],
        "dom": 'l<"#g3w-table-toolbar">frtip',
        "columnDefs": [{
          "targets": 0,
          "orderable": false,
          "searchable": false,
          "width": '1%'
        }]
      };
      if (this.state.pagination) {
        dataTable = $(this.$refs.attribute_table).DataTable(_extends({}, commonDataTableOptions, {
          "columns": this.state.headers,
          "ajax": debounce(function (data, callback) {
            var trDomeElements = $('#open_attribute_table table tr');
            trDomeElements.each(function (element) {
              $(element).off('click');
              $(element).off('mouseover');
            });
            _this2.$options.service.getData(data).then(function () {
              var _ref5 = _asyncToGenerator(function* (serverData) {
                callback(serverData);
                yield _this2.$nextTick();
                _this2.createdContentBody();
                _this2.isMobile() && hideElements();
              });

              return function (_x3) {
                return _ref5.apply(this, arguments);
              };
            }()).catch(function (error) {
              console.log(error);
            });
          }, 800),
          "serverSide": true,
          "deferLoading": this.state.allfeatures
        }));
        this.$options.service.on('ajax-reload', dataTable.ajax.reload);
        this.changeColumn = debounce(function () {
          var _ref6 = _asyncToGenerator(function* (event, index) {
            dataTable.columns(index).search(event.target.value.trim()).draw();
          });

          return function (_x4, _x5) {
            return _ref6.apply(this, arguments);
          };
        }());
      } else {
        dataTable = $(this.$refs.attribute_table).DataTable(_extends({}, commonDataTableOptions, {
          searchDelay: 600
        }));
        var debounceSearch = debounce(function () {
          _this2.$options.service.setFilteredFeature(dataTable.rows({ search: 'applied' })[0]);
        }, 600);
        eventHandlers.nopagination['search.dt'] = debounceSearch;
        dataTable.on('search.dt', debounceSearch);
        dataTable.on('length.dt', function (evt, settings, length) {
          _this2.$options.service.setAttributeTablePageLength(length);
        });
        this.changeColumn = debounce(function () {
          var _ref7 = _asyncToGenerator(function* (event, index) {
            dataTable.columns(index).search(event.target.value.trim()).draw();
            _this2.$options.service.setFilteredFeature(dataTable.rows({ search: 'applied' })[0]);
          });

          return function (_x6, _x7) {
            return _ref7.apply(this, arguments);
          };
        }());
      }

      if (this.isMobile()) {
        hideElements();
      }

      var G3WTableToolbarClass = Vue.extend(_TableToolbar2.default);
      var G3WTableToolbarInstance = new G3WTableToolbarClass({
        propsData: {
          tools: this.state.tools,
          geolayer: this.state.geolayer,
          switchSelection: this.switchSelection,
          clearAllSelection: this.clearAllSelection,
          toggleFilterToken: this.toggleFilterToken,
          getDataFromBBOX: this.getDataFromBBOX
        }
      });

      $('#g3w-table-toolbar').html(G3WTableToolbarInstance.$mount().$el);

      this.$options.service.on('redraw', function (data) {
        dataTable.clear();
        dataTable.draw(false);
        setTimeout(function () {
          dataTable.rows.add(data);
          dataTable.draw(false);
          _this2.createdContentBody();
          _this2.isMobile() && hideElements();
        });
      });
    });

    function mounted() {
      return _ref4.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.$options.service.clear();
    this.$options.service.off('ajax-reload');
    this.$options.service.off('redraw');
    _gui2.default.un('setContent', this.setContentKey);
    dataTable.destroy(true);
    dataTable = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"margin-top":"5px"},attrs:{"id":"open_attribute_table"}},[(_vm.hasHeaders())?_c('table',{ref:"attribute_table",staticClass:"table table-striped row-border compact nowrap",staticStyle:{"width":"100%"},attrs:{"id":"layer_attribute_table"}},[_c('thead',[_c('tr',[_c('th'),_vm._v(" "),_vm._l((_vm.state.headers),function(header,index){return (index > 0)?_c('th',[_c('input',{staticClass:"form-control column-search",staticStyle:{"height":"25px","min-width":"40px","padding":"2px"},attrs:{"type":"text","placeholder":header.name},on:{"keyup":function($event){return _vm.changeColumn($event, index)}}})]):_vm._e()})],2),_vm._v(" "),_c('tr',_vm._l((_vm.state.headers),function(header,index){return _c('th',[(index === 0)?_c('span',[_c('input',{staticClass:"magic-checkbox",attrs:{"type":"checkbox","id":"attribute_table_select_all_rows","disabled":_vm.state.nofilteredrow || _vm.state.features.length === 0},domProps:{"checked":_vm.state.selectAll}}),_vm._v(" "),_c('label',{staticStyle:{"margin-bottom":"0 !important"},attrs:{"for":"attribute_table_select_all_rows"},on:{"!click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.selectAllRow($event)}}},[_c('span',{staticStyle:{"padding":"5px"}})])]):_c('span',[_vm._v(_vm._s(header.label))])])}),0)]),_vm._v(" "),_c('table-body',{attrs:{"headers":_vm.state.headers,"filter":_vm.state.tools.filter,"features":_vm.state.features,"addRemoveSelectedFeature":_vm.addRemoveSelectedFeature,"zoomAndHighLightFeature":_vm.zoomAndHighLightFeature}})],1):_c('div',{directives:[{name:"t",rawName:"v-t",value:('dataTable.no_data'),expression:"'dataTable.no_data'"}],attrs:{"id":"noheaders"}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-b4d834d0"

},{"components/FieldG3W.vue":160,"components/TableBody.vue":260,"components/TableSelectRow.vue":261,"components/TableToolbar.vue":262,"mixins":302,"services/gui":319,"utils":419,"vueify/lib/insert-css":2}],260:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TableSelectRow = require('components/TableSelectRow.vue');

var _TableSelectRow2 = _interopRequireDefault(_TableSelectRow);

var _FieldG3W = require('components/FieldG3W.vue');

var _FieldG3W2 = _interopRequireDefault(_FieldG3W);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "table-body",
  props: {
    headers: {
      required: true,
      type: Array
    },
    features: {
      required: true,
      type: Array
    },
    zoomAndHighLightFeature: {
      type: Function
    },
    addRemoveSelectedFeature: {
      type: Function
    },
    filter: {
      type: Object,
      default: {
        active: false
      }
    }
  },
  data: function data() {
    return {
      selectedRow: null
    };
  },

  components: {
    Field: _FieldG3W2.default,
    SelectRow: _TableSelectRow2.default
  },
  methods: {
    getField: function getField(feature, header) {
      return {
        value: feature.attributes[header.name],
        label: undefined };
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tbody',{attrs:{"id":"table_body_attributes"}},_vm._l((_vm.features),function(feature,index){return _c('tr',{key:feature.id,staticClass:"feature_attribute",class:[
      index %2 == 1 ? 'odd' : 'pair',
      { geometry: !!feature.geometry },
      { 'selected': feature.selected }
    ],staticStyle:{"cursor":"pointer"},attrs:{"role":"row","selected":_vm.selectedRow === index},on:{"mouseover":function($event){return _vm.zoomAndHighLightFeature(feature, false)},"click":function($event){return _vm.zoomAndHighLightFeature(feature, true)}}},_vm._l((_vm.headers),function(header,hindex){return _c('td',{attrs:{"tab-index":1}},[(0 === hindex)?_c('select-row',{attrs:{"feature":feature},on:{"selected":_vm.addRemoveSelectedFeature}}):_c('field',{attrs:{"feature":feature,"state":_vm.getField(feature, header)}})],1)}),0)}),0)}
__vue__options__.staticRenderFns = []

},{"components/FieldG3W.vue":160,"components/TableSelectRow.vue":261}],261:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _require = require('utils'),
    getUniqueDomId = _require.getUniqueDomId;

exports.default = {
  name: "select-row",
  props: {
    feature: {
      required: true
    }
  },
  data: function data() {
    return {
      id: getUniqueDomId()
    };
  },

  methods: {
    select: function select() {
      this.$emit('selected', this.feature);
    }
  },
  destroyed: function destroyed() {
    this.$off('selected');
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',[_c('input',{staticClass:"magic-checkbox",attrs:{"type":"checkbox","id":_vm.id},domProps:{"checked":_vm.feature.selected}}),_vm._v(" "),_c('label',{attrs:{"for":_vm.id},on:{"!click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.select($event)}}},[_c('span')])])}
__vue__options__.staticRenderFns = []

},{"utils":419}],262:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".action-button[data-v-4f671d73]{padding:4px}.action-button.toggled[data-v-4f671d73]{border:1px solid #ccc}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require("store/application-state");

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: "g3w-table-toolbar",
  props: {
    tools: {
      type: Object
    },
    switchSelection: {
      type: Function
    },
    clearAllSelection: {
      type: Function
    },
    toggleFilterToken: {
      type: Function
    },
    getDataFromBBOX: {
      type: Function
    }
  },
  computed: {
    disableMapTool: function disableMapTool() {
      return !this.tools.geolayer.active && _applicationState2.default.gui.layout[_applicationState2.default.gui.layout.__current].rightpanel.height_100;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex","justify-content":"space-between","padding":"1px"}},[(_vm.tools.geolayer.show)?_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.disableMapTool),expression:"disableMapTool"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.show_features_on_map'),expression:"'layer_selection_filter.tools.show_features_on_map'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:[
      _vm.g3wtemplate.getFontClass('map'),
      _vm.tools.geolayer.active ? 'toggled' : '' ],attrs:{"data-placement":"right","data-toggle":"tooltip","data-container":"body"},on:{"click":function($event){$event.stopPropagation();return _vm.getDataFromBBOX($event)}}}):_vm._e(),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.tools.show),expression:"tools.show"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.clear'),expression:"'layer_selection_filter.tools.clear'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:_vm.g3wtemplate.getFontClass('clear'),attrs:{"data-placement":"right","data-toggle":"tooltip","data-container":"body"},on:{"click":function($event){$event.stopPropagation();return _vm.clearAllSelection($event)}}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.tools.show),expression:"tools.show"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.invert'),expression:"'layer_selection_filter.tools.invert'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:[
      _vm.g3wtemplate.getFontClass('invert'),
      _vm.tools.filter.active ? 'g3w-disabled': ''
    ],attrs:{"data-placement":"right","data-toggle":"tooltip","data-container":"body"},on:{"click":function($event){$event.stopPropagation();return _vm.switchSelection($event)}}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.tools.show),expression:"tools.show"},{name:"t-tooltip",rawName:"v-t-tooltip.create",value:('layer_selection_filter.tools.filter'),expression:"'layer_selection_filter.tools.filter'",modifiers:{"create":true}}],staticClass:"skin-color action-button skin-tooltip-right",class:[
      _vm.g3wtemplate.getFontClass('filter'),
      _vm.tools.filter.active ? 'toggled' : ''
    ],attrs:{"data-placement":"right","data-toggle":"tooltip","data-container":"body"},on:{"click":function($event){$event.stopPropagation();return _vm.toggleFilterToken($event)}}})])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-4f671d73"

},{"store/application-state":328,"vueify/lib/insert-css":2}],263:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".tool_disabled[data-v-31811884]{cursor:not-allowed}.tool_disabled>span[data-v-31811884]{color:#777}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AppState = _application2.default.getState();

var TOOLSTATE = {
  alert: {
    color: 'red'
  },
  info: {
    color: 'blue'
  },
  warning: {
    color: 'orange'
  }
};

exports.default = {
  name: "g3w-tool",
  props: {
    tool: {
      required: true
    }
  },
  data: function data() {
    return {};
  },

  methods: {
    fireAction: function fireAction(tool) {
      this.tool.action(tool);
    },
    showToolStateMessage: function showToolStateMessage() {
      _gui2.default.showModalDialog({
        title: this.tool.state.type.toUpperCase(),
        message: this.tool.state.message
      });
    }
  },
  computed: {
    disabled: function disabled() {
      return !this.tool.offline && !AppState.online || this.tool.loading || this.tool.disabled;
    },
    icon: function icon() {
      return this.tool.icon || 'caret-right';
    },
    toolstatecolor: function toolstatecolor() {
      return TOOLSTATE[this.tool.state.type].color;
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.tool.type === 'checkbox' )?_c('div',{staticClass:"checkbox"},[_c('label',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.tool.isCheck),expression:"tool.isCheck"}],staticStyle:{"cursor":"pointer"},attrs:{"id":_vm.tool.layerName,"type":"checkbox"},domProps:{"value":_vm.tool.layerName,"checked":Array.isArray(_vm.tool.isCheck)?_vm._i(_vm.tool.isCheck,_vm.tool.layerName)>-1:(_vm.tool.isCheck)},on:{"click":function($event){return _vm.fireAction(_vm.tool)},"change":function($event){var $$a=_vm.tool.isCheck,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=_vm.tool.layerName,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.$set(_vm.tool, "isCheck", $$a.concat([$$v])))}else{$$i>-1&&(_vm.$set(_vm.tool, "isCheck", $$a.slice(0,$$i).concat($$a.slice($$i+1))))}}else{_vm.$set(_vm.tool, "isCheck", $$c)}}}}),_vm._v("\n      "+_vm._s(_vm.tool.name)+"\n    ")])]):_c('div',{staticClass:"tool",class:{tool_disabled: _vm.disabled},staticStyle:{"position":"relative"},on:{"click":function($event){!_vm.disabled ? _vm.fireAction(_vm.tool) : null}}},[_c('bar-loader',{attrs:{"loading":_vm.tool.loading}}),_vm._v(" "),_c('i',{class:_vm.g3wtemplate.getFontClass(_vm.icon)}),_vm._v(" "),(_vm.tool.html)?_c('span',[_c('i',{class:_vm.tool.html.icon}),_vm._v("\n      "+_vm._s(_vm.tool.html.text || _vm.tool.name)+"\n    ")]):_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.tool.name),expression:"tool.name"}]}),_vm._v(" "),(_vm.tool.state.type)?_c('span',{staticStyle:{"cursor":"pointer","vertical-align":"center","position":"absolute","right":"0","top":"0","padding":"5px"},style:({color: _vm.toolstatecolor}),on:{"click":function($event){$event.stopPropagation();return _vm.showToolStateMessage($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass(_vm.tool.state.type)})]):_vm._e()],1)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-31811884"

},{"services/application":310,"services/gui":319,"vueify/lib/insert-css":2}],264:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Tool = require('components/Tool.vue');

var _Tool2 = _interopRequireDefault(_Tool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'g3w-tools',

  data: function data() {
    return {
      state: null
    };
  },

  watch: {
    'state.toolsGroups': {
      handler: function handler(groups) {
        this.$emit('visible', groups.length > 0);
      }
    }
  },
  components: {
    G3wTool: _Tool2.default
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"g3w-tools treeview-menu"},[_c('bar-loader',{attrs:{"loading":_vm.state.loading}}),_vm._v(" "),_vm._l((_vm.state.toolsGroups),function(group){return _c('li',{key:group.name},[_c('div',{staticClass:"tool-header"},[_c('i',{class:_vm.g3wtemplate.getFontClass('tool')}),_vm._v(" "),_c('span',{},[_vm._v(_vm._s(group.name))])]),_vm._v(" "),_c('div',{staticClass:"tool-box",attrs:{"id":group.name + '-tools'}},_vm._l((group.tools),function(tool){return _c('g3w-tool',{key:tool.name,attrs:{"tool":tool}})}),1)])})],2)}
__vue__options__.staticRenderFns = []

},{"components/Tool.vue":263}],265:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".usermessage-content[data-v-57c4f706]{color:#fff;z-index:1000;position:absolute;line-height:normal;padding:3px;min-width:250px;box-shadow:0 3px 5px rgba(0,0,0,.3);-moz-box-shadow:0 3px 5px rgba(0,0,0,.3)}.usermessage-content.mobile[data-v-57c4f706]{padding:0;min-width:100%}.usermessage-header-content[data-v-57c4f706]{display:flex;align-items:baseline;justify-content:space-between;width:100%}.usermessage-header-icontype[data-v-57c4f706]{padding:10px 0 0 5px;font-weight:700;font-size:1.3em}.usermessage-content.mobile .usermessage-header-icontype[data-v-57c4f706]{padding:0 0 0 5px;font-size:1.1em}.usermessage-header-title[data-v-57c4f706],.usermessage-header-title h4[data-v-57c4f706]{font-weight:700;text-align:center}.usermessage-content.mobile .usermessage-header-title h4[data-v-57c4f706]{margin:0}.usermessage-header-subtitle[data-v-57c4f706]{font-weight:700;margin:5px}.usermessage-header-right[data-v-57c4f706]{padding:5px}.usermessage-header-right-item[data-v-57c4f706]{font-weight:700!important;font-size:1.2em;cursor:pointer}.usermessage-message[data-v-57c4f706]{width:100%;padding:0 0 3px 10px;max-height:100px;font-size:1.1em;align-self:flex-start;overflow-y:auto}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var COLORS = {
  success: {
    backgroundColor: '#62ac62',
    color: '#FFFFFF'
  },
  info: {
    backgroundColor: '#44a0bb',
    color: '#FFFFFF'
  },
  warning: {
    backgroundColor: '#f29e1d',
    color: '#FFFFFF'
  },
  alert: {
    backgroundColor: '#c34943',
    color: '#FFFFFF'
  },
  tool: {
    backgroundColor: '#FFFFFF',
    color: "#222d32"
  },
  loading: {
    backgroundColor: '#FFFFFF',
    color: "#222d32",
    fontWeight: "bold"
  }
};

var STYLES = {
  success: {},
  info: {},
  warning: {},
  alert: {},
  tool: {
    "z-index": _constant.ZINDEXES.usermessage.tool,
    left: "40px"
  },
  loading: {}
};

exports.default = {
  name: "usermessage",
  props: {
    id: {},
    type: {
      type: String,
      default: 'info' },
    title: {
      type: String,
      default: null
    },
    subtitle: {
      type: String,
      default: null
    },
    position: {
      type: String,
      default: 'top'
    },
    size: {
      type: String,
      default: 'fullpage'
    },
    message: {
      type: String,
      default: ''
    },
    textMessage: {
      type: Boolean,
      default: false
    },
    autoclose: {
      type: Boolean,
      default: false
    },
    draggable: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 2000
    },
    closable: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    showheader: function showheader() {
      return this.type !== 'loading';
    }
  },
  methods: {
    addClassMobile: function addClassMobile() {
      return this.isMobile() && !_gui2.default.isSidebarVisible();
    },
    closeUserMessage: function closeUserMessage() {
      this.$emit('close-usermessage');
    },
    hideShow: function hideShow() {}
  },
  created: function created() {
    var _position$split = this.position.split('-'),
        _position$split2 = _slicedToArray(_position$split, 2),
        where = _position$split2[0],
        alignement = _position$split2[1];

    var width = '100%';
    switch (this.size) {
      case 'small':
        width = '25%';
        break;
      case 'medium':
        width = '50%';
        break;
      case 'fullpage':
      default:
        width = '100%';
    }
    if (where === 'center') where = {
      top: 0,
      bottom: 0,
      maxHeight: '20%'
    };else {
      where = _defineProperty({}, where, 50);
    }
    var position = _extends({}, where, {
      width: width
    });
    if (alignement) {
      position.width = '25%';
      switch (alignement) {
        case 'center':
          position.left = '0';
          position.right = '0';
          position.margin = 'auto';
          break;
        case 'right':
          position.right = 0;
          break;
      }
    }
    this.style = _extends({}, COLORS[this.type], position, STYLES[this.type]);
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this = this;

      if (this.autoclose) {
        yield this.$nextTick();
        var timeout = setTimeout(function () {
          _this.closeUserMessage();
          clearTimeout(timeout);
        }, this.duration);
      }
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"usermessage-content",class:{'mobile': _vm.addClassMobile()},style:(_vm.style),attrs:{"id":_vm.id}},[(_vm.showheader)?_c('div',{staticClass:"usermessage-header-content"},[_c('i',{staticClass:"usermessage-header-icontype",class:_vm.g3wtemplate.getFontClass(_vm.type)}),_vm._v(" "),_c('div',{staticClass:"usermessage-header-title"},[_vm._t("header",[(_vm.title)?_c('h4',{directives:[{name:"t",rawName:"v-t",value:(_vm.title),expression:"title"}]}):_c('h4',[_vm._v(" "+_vm._s(_vm.type.toUpperCase()))]),_vm._v(" "),(_vm.subtitle)?_c('h5',{directives:[{name:"t",rawName:"v-t",value:(_vm.subtitle),expression:"subtitle"}],staticClass:"usermessage-header-subtitle"}):_vm._e()])],2),_vm._v(" "),_c('div',{staticClass:"usermessage-header-right"},[(!_vm.autoclose && _vm.closable)?_c('div',{on:{"click":_vm.closeUserMessage}},[_c('i',{staticClass:"usermessage-header-right-item",class:_vm.g3wtemplate.getFontClass('close')})]):_vm._e()])]):_vm._e(),_vm._v(" "),_vm._t("body",[(_vm.textMessage)?_c('div',{staticClass:"usermessage-message"},[_vm._v(_vm._s(_vm.message))]):_c('div',{directives:[{name:"t",rawName:"v-t",value:(_vm.message),expression:"message"}],staticClass:"usermessage-message"})]),_vm._v(" "),_vm._t("footer")],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-57c4f706"

},{"app/constant":5,"services/gui":319,"vueify/lib/insert-css":2}],266:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".content_breadcrumb[data-v-466a54cc]{font-size:1.2em;padding:0 3px;border-radius:3px}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _UserMessage = require('components/UserMessage.vue');

var _UserMessage2 = _interopRequireDefault(_UserMessage);

var _NotifyOnline = require('components/NotifyOnline.vue');

var _NotifyOnline2 = _interopRequireDefault(_NotifyOnline);

var _NotifyDownload = require('components/NotifyDownload.vue');

var _NotifyDownload2 = _interopRequireDefault(_NotifyDownload);

var _NotifyPlugins = require('components/NotifyPlugins.vue');

var _NotifyPlugins2 = _interopRequireDefault(_NotifyPlugins);

var _constant = require('app/constant');

var _viewport = require('services/viewport');

var _viewport2 = _interopRequireDefault(_viewport);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = {
  name: "Viewport",
  props: {
    appState: {
      type: Object
    }
  },
  components: {
    userMessage: _UserMessage2.default,
    onlineNotify: _NotifyOnline2.default,
    downloadNotify: _NotifyDownload2.default,
    pluginsNotify: _NotifyPlugins2.default
  },
  data: function data() {
    return {
      state: _viewport2.default.state,
      updatePreviousTitle: false,
      media: {
        matches: true
      }
    };
  },

  computed: {
    breadcrumb: function breadcrumb() {
      return this.state.content.contentsdata.filter(function (content) {
        return content.options.crumb;
      }).map(function (content) {
        return content.options.crumb;
      });
    },
    showresize: function showresize() {
      var currentPerc = _viewport2.default.getCurrentContentLayout()[this.state.split === 'h' ? 'width' : 'height'];
      return this.state.resized.start && this.state.secondaryPerc > 0 && this.state.secondaryPerc < 100 && currentPerc < 100 && currentPerc > 0;
    },
    showresizeicon: function showresizeicon() {
      return this.state.secondaryPerc !== 100;
    },
    hooks: function hooks() {
      return this.usermessage.hooks;
    },
    usermessage: function usermessage() {
      return this.state.usermessage;
    },
    showtitle: function showtitle() {
      var showtitle = true;
      var contentsData = this.state.content.contentsdata;
      if (contentsData.length) {
        var options = contentsData[contentsData.length - 1].options;
        if (_.isBoolean(options.showtitle)) showtitle = options.showtitle;
      }
      return showtitle;
    },
    showContent: function showContent() {
      return this.state.content.show;
    },
    styles: function styles() {
      return {
        map: {
          width: this.state.map.sizes.width + 'px',
          height: this.state.map.sizes.height + 'px'
        },
        content: {
          width: this.state.content.sizes.width + 'px',
          height: this.state.content.sizes.height + 'px',
          zIndex: _constant.ZINDEXES.usermessage.tool + 1,
          minHeight: 'v' === this.state.split ? _constant.VIEWPORT.resize.content.min + 'px' : null,
          paddingTop: '8px',
          paddingBottom: '8px'
        }
      };
    },
    contentTitle: function contentTitle() {
      var contentsData = this.state.content.contentsdata;
      if (contentsData.length) {
        var _contentsData$options = contentsData[contentsData.length - 1].options,
            title = _contentsData$options.title,
            post_title = _contentsData$options.post_title;

        return { title: title, post_title: post_title };
      }
    },
    backOrBackTo: function backOrBackTo() {
      var contentsData = this.state.content.contentsdata;
      return contentsData.length > 1 && this.state.content.showgoback ? !contentsData[contentsData.length - 2].options.title ? 'back' : 'backto' : false;
    },
    previousTitle: function previousTitle() {
      var _this = this;

      var contentsData = this.state.content.contentsdata;
      var title = contentsData.length > 1 && this.state.content.showgoback ? contentsData[contentsData.length - 2].options.title : null;
      this.updatePreviousTitle = true;
      this.$nextTick(function () {
        return _this.updatePreviousTitle = false;
      });
      return title;
    }
  },
  methods: {
    isNotLastCrumb: function isNotLastCrumb(index) {
      return index < this.breadcrumb.length - 1;
    },
    closeContent: function closeContent() {
      _gui2.default.closeContent();
    },
    closeMap: function closeMap() {
      _viewport2.default.closeMap();
    },
    gotoPreviousContent: function gotoPreviousContent() {
      _gui2.default.popContent();
    },
    closeUserMessage: function closeUserMessage() {
      _gui2.default.closeUserMessage();
    },
    moveFnc: function moveFnc(evt) {
      var size = this.state.split === 'h' ? 'width' : 'height';
      evt.preventDefault();
      var sidebarHeaderSize = size === 'width' ? $('.sidebar-collapse').length ? 0 : _viewport2.default.SIDEBARWIDTH : $('#main-navbar').height();
      var viewPortSize = $(this.$el)[size]();
      var mapSize = (size === 'width' ? evt.pageX + 2 : evt.pageY + 2) - sidebarHeaderSize;
      if (mapSize > viewPortSize - _constant.VIEWPORT.resize.content.min) mapSize = viewPortSize - _constant.VIEWPORT.resize.content.min;else if (mapSize < _constant.VIEWPORT.resize.map.min) mapSize = _constant.VIEWPORT.resize.map.min;
      var contentSize = viewPortSize - mapSize;
      var resizePercentageMap = Math.round(mapSize / viewPortSize * 100);
      var resizePercentageContent = 100 - resizePercentageMap;
      _viewport2.default.resizeViewComponents(this.state.split, {
        map: _defineProperty({}, size, mapSize),
        content: _defineProperty({}, size, contentSize)
      }, resizePercentageContent);
    }
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      var _this2 = this;

      var handleResizeViewport = function handleResizeViewport() {
        _this2.state.resized.start = true;
      };
      yield this.$nextTick();
      var mediaQueryEventMobile = window.matchMedia("(min-height: 300px)");
      this.media.matches = mediaQueryEventMobile.matches;
      mediaQueryEventMobile.addListener(function (event) {
        if (event.type === 'change') _this2.media.matches = event.currentTarget.matches;
      });
      handleResizeViewport();
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }()
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3w-viewport"},[_c('transition',{attrs:{"name":"fade","duration":{ enter: 500, leave: 500 }}},[(_vm.usermessage.show)?_c('user-message',{attrs:{"title":_vm.usermessage.title,"subtitle":_vm.usermessage.subtitle,"id":_vm.usermessage.id,"message":_vm.usermessage.message,"draggable":_vm.usermessage.draggable,"closable":_vm.usermessage.closable,"duration":_vm.usermessage.duration,"position":_vm.usermessage.position,"autoclose":_vm.usermessage.autoclose,"textMessage":_vm.usermessage.textMessage,"size":_vm.usermessage.size,"type":_vm.usermessage.type},on:{"close-usermessage":_vm.closeUserMessage}},[(_vm.hooks.header)?_c('template',{slot:"header"},[_c(_vm.hooks.header,{tag:"component"})],1):_vm._e(),_vm._v(" "),(_vm.hooks.body)?_c('template',{slot:"body"},[_c(_vm.hooks.body,{tag:"component"})],1):_vm._e(),_vm._v(" "),(_vm.hooks.footer)?_c('template',{slot:"footer"},[_c(_vm.usermessage.hooks.footer,{tag:"component"})],1):_vm._e()],2):_vm._e()],1),_vm._v(" "),_c('div',{staticClass:"g3w-view map",class:("split-" + (_vm.state.split)),style:(_vm.styles.map),attrs:{"id":"g3w-view-map"}},[_c('g3w-resize',{class:("split-" + (_vm.state.split)),style:({backgroundColor:'transparent'}),attrs:{"id":"resize-map-and-content","show":_vm.showresize,"moveFnc":_vm.moveFnc,"orientation":_vm.state.split}}),_vm._v(" "),_c('div',{attrs:{"id":"application-notifications"}},[_c('online-notify'),_vm._v(" "),_c('download-notify'),_vm._v(" "),_c('plugins-notify')],1)],1),_vm._v(" "),_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.state.content.disabled),expression:"state.content.disabled"}],staticClass:"g3w-view content",class:("split-" + (_vm.state.split)),style:(_vm.styles.content),attrs:{"id":"g3w-view-content"}},[(_vm.breadcrumb.length > 1)?_c('section',{ref:_vm.breadcrumb,staticClass:"content_breadcrumb"},_vm._l((_vm.breadcrumb),function(crumb,index){return _c('span',{key:crumb.title},[_c('span',{directives:[{name:"t",rawName:"v-t",value:(crumb.title),expression:"crumb.title"}],staticClass:"skin-color-dark",style:({fontWeight: _vm.isNotLastCrumb(index) ? 'bold' : 'normal'})}),_vm._v(" "),(_vm.isNotLastCrumb(index))?_c('span',{staticStyle:{"font-weight":"bold","margin":"3px 0"}},[_vm._v("/")]):_vm._e()])}),0):_vm._e(),_vm._v(" "),((_vm.showtitle && _vm.contentTitle) || _vm.previousTitle || (_vm.state.content.closable && _vm.state.content.aside))?_c('div',{staticClass:"close-panel-block",staticStyle:{"display":"flex","justify-content":"space-between"}},[(_vm.previousTitle)?_c('div',{staticClass:"g3w_contents_back g3w-long-text"},[(_vm.backOrBackTo === 'back')?_c('div',{class:_vm.backOrBackTo},[_c('span',{staticClass:"action-button",class:_vm.g3wtemplate.getFontClass('back')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('back'),expression:"'back'"}]})]):_c('div',{class:_vm.backOrBackTo,on:{"click":function($event){$event.stopPropagation();return _vm.gotoPreviousContent()}}},[_c('span',{staticClass:"action-button",class:_vm.g3wtemplate.getFontClass('back')}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:('backto'),expression:"'backto'"}]}),_vm._v(" "),(!_vm.updatePreviousTitle)?_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.previousTitle),expression:"previousTitle"}]}):_vm._e()])]):_vm._e(),_vm._v(" "),(!_vm.previousTitle && _vm.showtitle && _vm.contentTitle)?_c('div',{staticClass:"panel-title",class:{'mobile': _vm.isMobile()},style:([_vm.state.content.style.title])},[_c('span',{attrs:{"id":"contenttitle"}},[_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.contentTitle.title),expression:"contentTitle.title"}]}),_vm._v(" "),_c('span',{directives:[{name:"t",rawName:"v-t",value:(_vm.contentTitle.post_title),expression:"contentTitle.post_title"}]})])]):_vm._e(),_vm._v(" "),_c('div',{staticClass:"g3-content-header-action-tools",staticStyle:{"display":"flex","align-items":"center"}},[_vm._l((_vm.state.content.headertools),function(tool){return _c(tool,{tag:"component"})}),_vm._v(" "),(_vm.showresizeicon)?_c('resize-icon',{staticStyle:{"font-size":"1em","padding":"0","align-self":"center","margin-left":"auto"},style:({marginRight: _vm.state.content.closable ? '5px': '0px'}),attrs:{"type":_vm.state.split}}):_vm._e(),_vm._v(" "),(_vm.state.content.closable && _vm.state.content.aside)?_c('span',{staticClass:"action-button",class:{'mobile': _vm.isMobile()},staticStyle:{"display":"flex","justify-content":"center"},on:{"click":_vm.closeContent}},[_c('i',{staticClass:"skin-color-dark",class:_vm.g3wtemplate.getFontClass('close')})]):_vm._e()],2)]):_vm._e(),_vm._v(" "),_c('bar-loader',{attrs:{"loading":_vm.state.content.loading}})],1)],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-466a54cc"

},{"app/constant":5,"components/NotifyDownload.vue":224,"components/NotifyOnline.vue":225,"components/NotifyPlugins.vue":226,"components/UserMessage.vue":265,"services/gui":319,"services/viewport":327,"vueify/lib/insert-css":2}],267:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'viewport-contents-viewer',

  data: function data() {
    return {
      state: null
    };
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"contents",attrs:{"id":"contents"}})}
__vue__options__.staticRenderFns = []

},{}],268:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-add-wms-url-message[data-v-965f11b2]{font-weight:700;color:#000}.g3w-wmsurl-error[data-v-965f11b2]{background-color:red}.g3w-wmsurl-already-added[data-v-965f11b2]{color:inherit;font-weight:400;display:inline-block}.wms_url_input_content[data-v-965f11b2]{margin-bottom:5px}.wms-icon-action[data-v-965f11b2]{font-weight:700;font-size:1.3em;box-shadow:0 5px 10px #1e282c}.wms-icon-action[data-v-965f11b2]:hover{box-shadow:none}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    isURL = _require.isURL;

exports.default = {
  name: "wms",

  data: function data() {
    return {
      url: null,
      id: null,
      loading: false,
      status: {
        error: false,
        added: false
      }
    };
  },


  computed: {
    inputswmsurlvalid: function inputswmsurlvalid() {
      return this.url !== null && this.url.trim() && isURL(this.url) && this.id !== null && this.id.trim();
    }
  },

  methods: {
    addwmsurl: function () {
      var _ref = _asyncToGenerator(function* () {
        this.loading = true;

        var _ref2 = yield this.$options.service.addNewUrl({ url: this.url, id: this.id }),
            error = _ref2.error,
            added = _ref2.added;

        this.status.error = error;
        this.status.added = added;
        this.loading = false;
      });

      function addwmsurl() {
        return _ref.apply(this, arguments);
      }

      return addwmsurl;
    }(),
    deleteWmsUrl: function deleteWmsUrl(id) {
      this.$options.service.deleteWmsUrl(id);
    },
    showWmsLayersPanel: function () {
      var _ref3 = _asyncToGenerator(function* (url) {
        try {
          this.loading = true;

          var _ref4 = yield this.$options.service.loadWMSDataAndShowWmsLayersPanel(url),
              error = _ref4.error,
              added = _ref4.added;

          this.status.error = error;
          this.status.added = added;
          this.loading = false;
        } catch (err) {
          console.warn(err);
        }
      });

      function showWmsLayersPanel(_x) {
        return _ref3.apply(this, arguments);
      }

      return showWmsLayersPanel;
    }()
  }

};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"treeview-menu g3w-tools menu-items"},[(_vm.loading)?_c('li',[_c('bar-loader',{attrs:{"loading":_vm.loading}})],1):_vm._e(),_vm._v(" "),_c('li',{staticStyle:{"display":"flex","flex-direction":"column","justify-content":"space-between","background":"transparent !important","margin-bottom":"10px"}},[_c('div',{staticClass:"wms_url_input_content"},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('sidebar.wms.panel.label.name'),expression:"'sidebar.wms.panel.label.name'"}],attrs:{"for":"add_custom_name_url_wms_input"}}),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.id),expression:"id"}],staticClass:"form-control",staticStyle:{"width":"100%","color":"#000000"},attrs:{"id":"add_custom_name_url_wms_input"},domProps:{"value":(_vm.id)},on:{"input":function($event){if($event.target.composing){ return; }_vm.id=$event.target.value}}})]),_vm._v(" "),_c('div',{staticClass:"wms_url_input_content"},[_c('label',{attrs:{"for":"add_custom_url_wms_input"}},[_vm._v("URL")]),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.url),expression:"url"}],staticClass:"form-control",staticStyle:{"width":"100%","color":"#000000"},attrs:{"id":"add_custom_url_wms_input"},domProps:{"value":(_vm.url)},on:{"input":function($event){if($event.target.composing){ return; }_vm.url=$event.target.value}}})]),_vm._v(" "),_c('div',[_c('button',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.inputswmsurlvalid),expression:"!inputswmsurlvalid"}],staticClass:"btn btn-block skin-background-color",staticStyle:{"width":"100%"},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();return _vm.addwmsurl($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('plus-square')})])])]),_vm._v(" "),(_vm.status.error)?_c('li',[_c('div',{directives:[{name:"t",rawName:"v-t",value:('server_error'),expression:"'server_error'"}],staticClass:"g3w-add-wms-url-message g3w-wmsurl-error"})]):(_vm.status.added)?_c('li',[_vm._v("\n    ⚠️\n    "),_c('div',{directives:[{name:"t",rawName:"v-t",value:('sidebar.wms.url_already_added'),expression:"'sidebar.wms.url_already_added'"}],staticClass:"g3w-add-wms-url-message g3w-wmsurl-already-added"})]):_vm._e(),_vm._v(" "),_c('li',{staticClass:"skin-border-color",staticStyle:{"background":"transparent !important","border-top":"2px solid"}},[_c('div',{staticStyle:{"max-height":"200px","overflow-y":"auto"}},[_vm._l((_vm.state.adminwmsurls),function(ref){
var id = ref.id;
var url = ref.url;
return _c('div',{key:_vm.wmsurl,staticStyle:{"display":"flex","justify-content":"space-between","align-items":"center","border-bottom":"1px solid #ccc","padding-bottom":"3px"}},[_c('span',{staticClass:"g3w-long-text",staticStyle:{"flex-grow":"1","margin-right":"15px"}},[_vm._v(_vm._s(id)+"\n        ")]),_vm._v(" "),_c('span',{staticClass:"skin-color",staticStyle:{"padding":"5px"},on:{"click":function($event){$event.stopPropagation();return _vm.showWmsLayersPanel(id)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('plus-square'),staticStyle:{"font-weight":"bold","font-size":"1.3em"}})])])}),_vm._v(" "),_vm._l((_vm.state.localwmsurls),function(ref){
var id = ref.id;
var url = ref.url;
return _c('div',{key:id,staticStyle:{"border-bottom":"1px solid #cccccc","padding-bottom":"3px"}},[_c('div',{staticStyle:{"display":"flex","justify-content":"space-between","align-items":"center","padding-top":"3px"}},[_c('span',{staticClass:"g3w-long-text",staticStyle:{"flex-grow":"1","margin-right":"15px","font-weight":"bold"}},[_vm._v(_vm._s(id))]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:('sidebar.wms.add_wms_layer'),expression:"'sidebar.wms.add_wms_layer'",arg:"top",modifiers:{"create":true}}],staticClass:"skin-color",staticStyle:{"padding":"3px","margin":"2px"},on:{"click":function($event){$event.stopPropagation();return _vm.showWmsLayersPanel(url)}}},[_c('i',{staticClass:"wms-icon-action",class:_vm.g3wtemplate.getFontClass('plus-square')})]),_vm._v(" "),_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:top.create",value:('sidebar.wms.delete_wms_url'),expression:"'sidebar.wms.delete_wms_url'",arg:"top",modifiers:{"create":true}}],staticStyle:{"color":"red","padding":"3px","margin":"2px"},on:{"click":function($event){$event.stopPropagation();return _vm.deleteWmsUrl(id)}}},[_c('i',{staticClass:"wms-icon-action",class:_vm.g3wtemplate.getFontClass('trash'),staticStyle:{"color":"red"}})])]),_vm._v(" "),_c('div',{staticClass:"g3w-long-text",staticStyle:{"font-size":"0.7em"},attrs:{"title":url}},[_vm._v(_vm._s(url))])])})],2)])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-965f11b2"

},{"utils":419,"vueify/lib/insert-css":2}],269:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".g3w-wms-panel-title[data-v-64ebf92a]{font-size:1.2em;font-weight:700;margin-bottom:10px}button.wms-add-layer-button[data-v-64ebf92a]{width:100%;margin-top:10px}.g3w-wms-external-panel-layer-added-message[data-v-64ebf92a]{font-weight:700;color:red;margin:5px 0}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var Projections = require('g3w-ol/projection/projections');

exports.default = {

  name: "wmpspanel",

  data: function data() {
    return {
      loading: false,
      position: undefined,
      name: undefined,
      title: null,
      abstract: null,
      map_formats: [],
      info_formats: [],
      methods: [],
      layers: [],
      selectedlayers: [],
      projections: [],
      epsg: null,
      added: false };
  },


  methods: {
    addWMSlayer: function () {
      var _ref = _asyncToGenerator(function* () {
        var config = {
          url: this.url,
          name: this.name && this.name.trim() || undefined,
          layers: this.selectedlayers,
          epsg: this.epsg,
          position: this.position
        };

        this.added = this.$options.service.checkIfWMSAlreadyAdded(config);

        if (this.added) {
          console.warn('WMS Layer already added');
          return;
        }

        this.loading = true;

        try {
          yield this.$options.service.addWMSlayer(config);
        } catch (err) {
          console.warn('unexpected error while adding WMS Layer');
        }

        this.loading = false;

        this.clear();
      });

      function addWMSlayer() {
        return _ref.apply(this, arguments);
      }

      return addWMSlayer;
    }(),
    clear: function clear() {
      this.selectedlayers = [];
      this.name = null;
    },
    getLayersByEpsg: function getLayersByEpsg(epsg) {
      var _this = this;

      return null === epsg ? this.$options.config.layers : this.layers.filter(function (_ref2) {
        var name = _ref2.name;
        return -1 !== _this.layerProjections[name].crss.indexOf(epsg);
      });
    },
    getProjectionsByName: function getProjectionsByName(name) {
      var _this2 = this;

      return this.projections.filter(function (projection) {
        return -1 !== _this2.layerProjections[name].crss.indexOf(projection);
      });
    }
  },
  watch: {
    selectedlayers: function selectedlayers(layers) {
      if (!layers.length) {
        this.epsg = null;
        this.projections = [];
      } else if (layers.length === 1) {
        this.epsg = this.layerProjections[layers[0]].crss[0];
        this.projections = this.layerProjections[layers[0]].crss;
      } else {
        this.projections = this.getProjectionsByName(layers[layers.length - 1]);;
      }
    },
    epsg: function () {
      var _ref3 = _asyncToGenerator(function* () {
        yield this.$nextTick();
        this.layers = this.getLayersByEpsg(this.epsg);
      });

      function epsg() {
        return _ref3.apply(this, arguments);
      }

      return epsg;
    }()
  },

  created: function () {
    var _ref4 = _asyncToGenerator(function* () {
      var _this3 = this;

      var _$options$config = this.$options.config,
          layers = _$options$config.layers,
          title = _$options$config.title,
          abstract = _$options$config.abstract,
          methods = _$options$config.methods,
          wmsurl = _$options$config.wmsurl;

      try {
        this.url = methods.GetMap.urls.find(function (u) {
          return 'Get' === u.type;
        }).url;
      } catch (err) {
        console.warn(err);
        this.url = wmsurl;
      }

      this.title = title;

      this.abstract = abstract;

      this.layerProjections = {};

      layers.forEach(function (_ref5) {
        var name = _ref5.name,
            crss = _ref5.crss,
            title = _ref5.title;

        _this3.layerProjections[name] = {
          title: title,
          crss: crss.map(function (crs) {
            Projections.get(crs);return 'EPSG:' + crs.epsg;
          }).sort()
        };
      });

      this.layers = layers;
    });

    function created() {
      return _ref4.apply(this, arguments);
    }

    return created;
  }(),
  beforeDestroy: function beforeDestroy() {
    this.$data = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.loading),expression:"loading"}]},[_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('h3',{staticClass:"skin-color g3w-wms-panel-title"},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),(_vm.abstract)?_c('helpdiv',{attrs:{"message":_vm.abstract}}):_vm._e(),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:('sidebar.wms.panel.label.layers'),expression:"'sidebar.wms.panel.label.layers'"}],attrs:{"for":"g3w-wms-layers"}}),_vm._v(" "),_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('selectedlayers'),expression:"'selectedlayers'"}],attrs:{"id":"g3w-wms-layers","multiple":true,"clear":"true"}},_vm._l((_vm.layers),function(layer){return _c('option',{key:layer.name,domProps:{"value":layer.name}},[_vm._v(_vm._s(layer.title))])}),0),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:('sidebar.wms.panel.label.projections'),expression:"'sidebar.wms.panel.label.projections'"}],attrs:{"for":"g3w-wms-projections"}}),_vm._v(" "),_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('epsg'),expression:"'epsg'"}],attrs:{"id":"g3w-wms-projections"}},_vm._l((_vm.projections),function(projection){return _c('option',{key:projection,domProps:{"value":projection}},[_vm._v(_vm._s(projection))])}),0),_vm._v(" "),_c('label',{directives:[{name:"t",rawName:"v-t",value:('sidebar.wms.panel.label.name'),expression:"'sidebar.wms.panel.label.name'"}],attrs:{"for":"g3w-wms-layer-name"}}),_vm._v(" "),_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.name),expression:"name"}],staticClass:"form-control",attrs:{"id":"g3w-wms-layer-name"},domProps:{"value":(_vm.name)},on:{"input":function($event){if($event.target.composing){ return; }_vm.name=$event.target.value}}}),_vm._v(" "),(_vm.added)?_c('div',{directives:[{name:"t",rawName:"v-t",value:('sidebar.wms.layer_id_already_added'),expression:"'sidebar.wms.layer_id_already_added'"}],staticClass:"g3w-wms-external-panel-layer-added-message"}):_vm._e(),_vm._v(" "),_c('layerspositions',{attrs:{"position":_vm.position},on:{"layer-position-change":function($event){_vm.position=$event}}}),_vm._v(" "),_c('button',{directives:[{name:"disabled",rawName:"v-disabled",value:(0 === _vm.selectedlayers.length),expression:"0 === selectedlayers.length"}],staticClass:"btn wms-add-layer-button sidebar-button skin-button",on:{"click":function($event){$event.stopPropagation();return _vm.addWMSlayer($event)}}},[_c('i',{class:_vm.g3wtemplate.getFontClass('plus-square'),staticStyle:{"font-weight":"bold"}})])],1)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-64ebf92a"

},{"g3w-ol/projection/projections":73,"vueify/lib/insert-css":2}],270:[function(require,module,exports){
var _vueColor = require('vue-color');

var VueColor = _interopRequireWildcard(_vueColor);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * @deprecated since v3.8. Will be removed in v4.x. Use ESM imports from 'vue-color' instead
 */
window.VueColor = VueColor;

/**
 * @deprecated since v3.8. Will be removed in v4.x. Use require('vue-cookie') instead of window.VueCookie
 */
/**
 * @file shims legacy variables to ensure backward compatibily with old G3W-CLIENT plugins (eg. window variables)
 * @since v3.8
 */

window.VueCookie = require('vue-cookie');

},{"vue-color":"vue-color","vue-cookie":"vue-cookie"}],271:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @TODO refactor stateful directives (eg. "v-t") in order to delete this file: "src/directives/utils.js"
 */

var _require = require('utils'),
    uniqueId = _require.uniqueId;

/**
 * Internal state
 */


var vm = new Vue();
var directives = {};

var watch = exports.watch = function watch(_ref) {
  var el = _ref.el,
      attr = _ref.attr,
      watcher = _ref.watcher;

  var unique_attr_id = uniqueId();
  el.setAttribute(attr, unique_attr_id);
  var dir = directives[unique_attr_id] = {};
  if (watcher) {
    dir.unwatch = vm.$watch(watcher[0], watcher[1], watcher[2] || { immediate: true });
    dir.handler = watcher[1];
  }
  return unique_attr_id;
};

var unwatch = exports.unwatch = function unwatch(_ref2) {
  var el = _ref2.el,
      attr = _ref2.attr;

  var unique_attr_id = el.getAttribute(attr);
  if (unique_attr_id) {
    directives[unique_attr_id].unwatch();
    delete directives[unique_attr_id];
  }
};

var trigger = exports.trigger = function trigger(_ref3) {
  var el = _ref3.el,
      attr = _ref3.attr,
      data = _ref3.data;
  return directives[el.getAttribute(attr)].handler(data);
};

},{"utils":419}],272:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file
 * @since v3.7
 */

exports.default = function (el, binding) {
  binding.value ? el.setAttribute('checked', 'checked') : el.removeAttribute('checked');
};

},{}],273:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since 3.10.0 
 */

exports.default = {
  bind: function bind(el, binding, vnode) {
    this.event = function (event) {
      // skip if clicked element is a child of element
      if (el === event.target || el.contains(event.target)) {
        return;
      }
      event.stopPropagation();
      vnode.context[binding.expression](event);
    };
    document.body.addEventListener('click', this.event, true);
  },
  unbind: function unbind() {
    document.body.removeEventListener('click', this.event, true);
  }
};

},{}],274:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file
 * @since v3.7
 */

exports.default = function (el, binding) {
  var className = 'g3w-disabled';
  if (binding.value) {
    if (!el.classList.contains(className)) el.classList.add(className);
  } else el.classList.remove(className);
};

},{}],275:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var attr = 'g3w-v-download-id';

exports.default = {
  bind: function bind(el, binding) {
    if (typeof binding.value === 'boolean' ? binding.value : true) {
      (0, _utils.watch)({
        el: el,
        attr: attr,
        watcher: [function () {
          return _applicationState2.default.download;
        }, function (bool) {
          var className = binding.modifiers && binding.modifiers.show && 'hide' || 'disabled';
          el.classList.toggle('g3w-' + className, className === 'hide' ? !bool : bool);
        }]
      });
    }
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"directives/utils":271,"store/application-state":328}],276:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var attr = 'g3w-v-offline-id';

exports.default = {
  bind: function bind(el, binding) {
    // show if online
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.online;
      }, function (bool) {
        bool = (binding.arg && binding.arg === 'hide' ? false : true) ? bool : !bool;
        el.classList.toggle('g3w-hide', !bool);
      }]
    });
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"directives/utils":271,"store/application-state":328}],277:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var attr = 'g3w-v-plugins-id';

exports.default = {
  bind: function bind(el) {
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.plugins;
      }, function (plugins) {
        el.classList.toggle('g3w-hide', plugins.length === 0);
      }]
    });
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"directives/utils":271,"store/application-state":328}],278:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.7
 */

exports.default = {
  inserted: function inserted(el, binding, vnode) {
    var _ref = vnode.data.attrs || {},
        templateResult = _ref.templateResult,
        templateSelection = _ref.templateSelection,
        _ref$multiple = _ref.multiple,
        multiple = _ref$multiple === undefined ? false : _ref$multiple,
        _ref$search = _ref.search,
        search = _ref$search === undefined ? true : _ref$search,
        select2_value = _ref.select2_value,
        indexItem = _ref.indexItem;

    var isArray = binding.value && Array.isArray(vnode.context[binding.value]) // check if is an array
    && undefined !== indexItem; // check if indexItem is defined
    $(el).select2({
      width: '100%',
      dropdownCssClass: 'skin-color',
      templateResult: templateResult,
      templateSelection: templateSelection,
      minimumResultsForSearch: !search ? -1 : undefined
    }).on('select2:select', function (e) {
      if (binding.value) {
        //get value
        var value = e.params.data.id;
        //check is can have multiple value
        if (multiple && (isArray ? vnode.context[binding.value][indexItem].value : vnode.context[binding.value]).filter(function (d) {
          return value === d;
        }).length === 0) {
          (isArray ? vnode.context[binding.value][indexItem].value : vnode.context[binding.value]).push(value);
        } else {
          if (isArray) {
            vnode.context[binding.value][indexItem].value = value;
          } else {
            vnode.context[binding.value] = value;
          }
        }
      }
    }).on('select2:unselect', function (e) {
      if (binding.value && multiple) {
        if (isArray) {
          vnode.context[binding.value][indexItem].value = vnode.context[binding.value][indexItem].value.filter(function (d) {
            return e.params.data.id !== d;
          });
        } else {
          vnode.context[binding.value] = vnode.context[binding.value].filter(function (d) {
            return e.params.data.id !== d;
          });
        }
      }
    });
    if (binding.value && select2_value) {
      $(el).val(select2_value).trigger('change');
    }
  },

  unbind: function unbind(el) {
    $(el).select2('destroy');
  }
};

},{}],279:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file
 * @since v3.7
 */

exports.default = function (el, binding) {
  el.toggleAttribute('selected', binding.value === 0);
};

},{}],280:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var attr = 'g3w-v-t-html-id';

exports.default = {
  bind: function bind(el, binding) {
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.language;
      }, function () {
        el.innerHTML = '' + t(binding.value);
      }]
    });
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"core/i18n/i18n.service":9,"directives/utils":271,"store/application-state":328}],281:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    t = _require.t,
    tPlugin = _require.tPlugin;

var attr = 'g3w-v-t-placeholder-id';

exports.default = {
  bind: function bind(el, binding) {
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.language;
      }, function () {
        el.setAttribute('placeholder', (binding.arg === 'plugin' ? tPlugin : t)(binding.value));
      }]
    });
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"core/i18n/i18n.service":9,"directives/utils":271,"store/application-state":328}],282:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    tPlugin = _require.tPlugin;

var attr = 'g3w-v-t-plugin-id';

exports.default = {
  bind: function bind(el, binding) {
    var innerHTML = el.innerHTML;
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.language;
      }, function () {
        var value = binding.value !== null ? tPlugin(binding.value) : '';
        switch (binding.arg ? binding.arg : 'post') {
          case 'pre':
            el.innerHTML = value + ' ' + innerHTML;break;
          case 'post':
            el.innerHTML = innerHTML + ' ' + value;break;
        }
      }]
    });
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"core/i18n/i18n.service":9,"directives/utils":271,"store/application-state":328}],283:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    t = _require.t,
    tPlugin = _require.tPlugin;

var attr = 'g3w-v-t-title-id';

exports.default = {
  bind: function bind(el, binding) {
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.language;
      }, function () {
        var title = (binding.arg === 'plugin' ? tPlugin : t)(binding.value);
        el.setAttribute('title', title);
        el.setAttribute('data-original-title', title);
      }] });
  },

  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"core/i18n/i18n.service":9,"directives/utils":271,"store/application-state":328}],284:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    t = _require.t,
    tPlugin = _require.tPlugin;

var attr = 'g3w-v-t-tooltip-id';

exports.default = {
  bind: function bind(_el, binding) {
    // Automatically create tooltip
    if (binding.modifiers.create) {
      if (binding.arg) {
        _el.setAttribute('data-placement', binding.arg);
        _el.classList.add('skin-color', 'skin-tooltip-' + binding.arg);
      }
      _el.setAttribute('data-container', "body");
      $(_el).tooltip({ trigger: _applicationState2.default.ismobile ? 'click' : 'hover', html: true })
      // hide tooltip on mobile  after click
      .on('shown.bs.tooltip', function () {
        _applicationState2.default.ismobile && setTimeout(function () {
          return $(_el).tooltip('hide');
        }, 600);
      });
    }
    (0, _utils.watch)({
      el: _el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.language;
      }, function (_ref) {
        var _ref$el = _ref.el,
            el = _ref$el === undefined ? _el : _ref$el;

        var value = el.getAttribute('current-tooltip');
        if (value === null) {
          value = binding.value;
        }
        el.setAttribute('data-original-title', binding.modifiers.text ? value : (binding.arg === 'plugin' ? tPlugin : t)(value));
      }]
    });
  },
  componentUpdated: function componentUpdated(el, oldVnode) {
    var value = el.getAttribute('current-tooltip');
    if (value != null && value !== oldVnode.oldValue) {
      (0, _utils.trigger)({ el: el, attr: attr, data: { el: el } });
    }
  },

  unbind: function unbind(el) {
    $(el).tooltip('hide');(0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"core/i18n/i18n.service":9,"directives/utils":271,"store/application-state":328}],285:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _utils = require('directives/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var attr = 'g3w-v-t-id';

/**
 * @since 3.8.7
 */
var handleInnerHTML = function handleInnerHTML(_ref) {
  var el = _ref.el;

  var value = el.__currentBinding.value !== null ? t(el.__currentBinding.value) : '';
  switch (el.__currentBinding.arg ? el.__currentBinding.arg : 'post') {
    case 'pre':
      el.innerHTML = value + ' ' + el.__innerHTML;break;
    case 'post':
      el.innerHTML = el.__innerHTML + ' ' + value;break;
  }
};

exports.default = {
  bind: function bind(el, binding) {
    /**
     * @since 3.8.7
     */
    // set init innerHTML value of element
    el.__innerHTML = el.innerHTML;
    //set current binging
    el.__currentBinding = binding;
    (0, _utils.watch)({
      el: el,
      attr: attr,
      watcher: [function () {
        return _applicationState2.default.language;
      }, function () {
        return handleInnerHTML({
          el: el
        });
      }]
    });
  },

  /**
   * @since 3.8.7
   */
  componentUpdated: function componentUpdated(el, binding) {
    //reset currentBinding to get last value;
    el.__currentBinding = binding;
    handleInnerHTML({
      el: el
    });
  },


  unbind: function unbind(el) {
    return (0, _utils.unwatch)({ el: el, attr: attr });
  }
};

},{"core/i18n/i18n.service":9,"directives/utils":271,"store/application-state":328}],286:[function(require,module,exports){
/**
 * @file Expose `window.g3wsdk` variable
 * @since v3.8
 */

/**
 * Expose "g3wsdk" variable globally used by plugins to load sdk class and instances
 * 
 * @type {object}
 */
window.g3wsdk = require('app/api');

/**
 * @TODO not yet implemented
 *
 * @see https://github.com/g3w-suite/g3w-client/issues/71
 * @see https://github.com/g3w-suite/g3w-client/issues/46
 */
// window.g3w = window.g3wsdk;

},{"app/api":3}],287:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

require('./deprecated');

require('./globals');

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _floatbar = require('services/floatbar');

var _floatbar2 = _interopRequireDefault(_floatbar);

var _navbaritems = require('services/navbaritems');

var _navbaritems2 = _interopRequireDefault(_navbaritems);

var _sidebar = require('services/sidebar');

var _sidebar2 = _interopRequireDefault(_sidebar);

var _viewport = require('services/viewport');

var _viewport2 = _interopRequireDefault(_viewport);

var _components = require('store/components');

var _components2 = _interopRequireDefault(_components);

var _App = require('components/App.vue');

var _App2 = _interopRequireDefault(_App);

var _GlobalImage = require('components/GlobalImage.vue');

var _GlobalImage2 = _interopRequireDefault(_GlobalImage);

var _GlobalGallery = require('components/GlobalGallery.vue');

var _GlobalGallery2 = _interopRequireDefault(_GlobalGallery);

var _GlobalGeo = require('components/GlobalGeo.vue');

var _GlobalGeo2 = _interopRequireDefault(_GlobalGeo);

var _GlobalSkeleton = require('components/GlobalSkeleton.vue');

var _GlobalSkeleton2 = _interopRequireDefault(_GlobalSkeleton);

var _GlobalBarLoader = require('components/GlobalBarLoader.vue');

var _GlobalBarLoader2 = _interopRequireDefault(_GlobalBarLoader);

var _GlobalProgressBar = require('components/GlobalProgressBar.vue');

var _GlobalProgressBar2 = _interopRequireDefault(_GlobalProgressBar);

var _GlobalHelpDiv = require('components/GlobalHelpDiv.vue');

var _GlobalHelpDiv2 = _interopRequireDefault(_GlobalHelpDiv);

var _GlobalResize = require('components/GlobalResize.vue');

var _GlobalResize2 = _interopRequireDefault(_GlobalResize);

var _GlobalLayerPositions = require('components/GlobalLayerPositions.vue');

var _GlobalLayerPositions2 = _interopRequireDefault(_GlobalLayerPositions);

var _GlobalDateTime = require('components/GlobalDateTime.vue');

var _GlobalDateTime2 = _interopRequireDefault(_GlobalDateTime);

var _GlobalRange = require('components/GlobalRange.vue');

var _GlobalRange2 = _interopRequireDefault(_GlobalRange);

var _GlobalResizeIcon = require('components/GlobalResizeIcon.vue');

var _GlobalResizeIcon2 = _interopRequireDefault(_GlobalResizeIcon);

var _GlobalTabs = require('components/GlobalTabs.vue');

var _GlobalTabs2 = _interopRequireDefault(_GlobalTabs);

var _GlobalDivider = require('components/GlobalDivider.vue');

var _GlobalDivider2 = _interopRequireDefault(_GlobalDivider);

var _Floatbar = require('components/Floatbar.vue');

var _Floatbar2 = _interopRequireDefault(_Floatbar);

var _NavbaritemsLeft = require('components/NavbaritemsLeft.vue');

var _NavbaritemsLeft2 = _interopRequireDefault(_NavbaritemsLeft);

var _NavbaritemsRight = require('components/NavbaritemsRight.vue');

var _NavbaritemsRight2 = _interopRequireDefault(_NavbaritemsRight);

var _Sidebar = require('components/Sidebar.vue');

var _Sidebar2 = _interopRequireDefault(_Sidebar);

var _Viewport = require('components/Viewport.vue');

var _Viewport2 = _interopRequireDefault(_Viewport);

var _vDisabled = require('directives/v-disabled');

var _vDisabled2 = _interopRequireDefault(_vDisabled);

var _vChecked = require('directives/v-checked');

var _vChecked2 = _interopRequireDefault(_vChecked);

var _vSelectedFirst = require('directives/v-selected-first');

var _vSelectedFirst2 = _interopRequireDefault(_vSelectedFirst);

var _vSelect = require('directives/v-select2');

var _vSelect2 = _interopRequireDefault(_vSelect);

var _vTTooltip = require('directives/v-t-tooltip');

var _vTTooltip2 = _interopRequireDefault(_vTTooltip);

var _vTHtml = require('directives/v-t-html');

var _vTHtml2 = _interopRequireDefault(_vTHtml);

var _vTPlaceholder = require('directives/v-t-placeholder');

var _vTPlaceholder2 = _interopRequireDefault(_vTPlaceholder);

var _vTTitle = require('directives/v-t-title');

var _vTTitle2 = _interopRequireDefault(_vTTitle);

var _vT = require('directives/v-t');

var _vT2 = _interopRequireDefault(_vT);

var _vTPlugin = require('directives/v-t-plugin');

var _vTPlugin2 = _interopRequireDefault(_vTPlugin);

var _vPlugins = require('directives/v-plugins');

var _vPlugins2 = _interopRequireDefault(_vPlugins);

var _vOnline = require('directives/v-online');

var _vOnline2 = _interopRequireDefault(_vOnline);

var _vDownload = require('directives/v-download');

var _vDownload2 = _interopRequireDefault(_vDownload);

var _vClickOutside = require('directives/v-click-outside');

var _vClickOutside2 = _interopRequireDefault(_vClickOutside);

var _constant = require('app/constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file Production entry point (app.min.js)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.8
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

// include backward compatibilies


// expose global variables


//import core


//import services


// import store


//components


//directives


// constants


var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    toRawType = _require.toRawType;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t,
    tPlugin = _require2.tPlugin;

var G3WObject = require('core/g3wobject');
var ProjectsMenuComponent = require('gui/projectsmenu/projectsmenu');
var ChangeMapMenuComponent = require('gui/changemapmenu/changemapmenu');

/**
 * Install global components
 *
 * ORIGINAL SOURCE: src/app/gui/vue/vue.globalcomponents.js@3.6
 */
Vue.component(_GlobalImage2.default.name, _GlobalImage2.default);
Vue.component(_GlobalGallery2.default.name, _GlobalGallery2.default);
Vue.component(_GlobalGeo2.default.name, _GlobalGeo2.default);
Vue.component(_GlobalBarLoader2.default.name, _GlobalBarLoader2.default);
Vue.component(_GlobalProgressBar2.default.name, _GlobalProgressBar2.default);
Vue.component(_GlobalSkeleton2.default.name, _GlobalSkeleton2.default);
Vue.component(_GlobalHelpDiv2.default.name, _GlobalHelpDiv2.default);
Vue.component(_GlobalResize2.default.name, _GlobalResize2.default);
Vue.component(_GlobalLayerPositions2.default.name, _GlobalLayerPositions2.default);
Vue.component(_GlobalDateTime2.default.name, _GlobalDateTime2.default);
Vue.component(_GlobalRange2.default.name, _GlobalRange2.default);
Vue.component(_GlobalResizeIcon2.default.name, _GlobalResizeIcon2.default);
Vue.component(_GlobalTabs2.default.name, _GlobalTabs2.default);
Vue.component(_GlobalDivider2.default.name, _GlobalDivider2.default);

/**
 * Install application filters
 *
 * ORIGINAL SOURCE: src/app/gui/vue/vue.filter.js@3.6
 */
Vue.filter('t', function (value) {
  return t(value);
});
Vue.filter('tPlugin', function (value) {
  return value !== null ? tPlugin(value) : '';
});

/**
 * Install global directives
 *
 * ORIGINAL SOURCE: src/app/gui/vue/vue.directives.js@v3.6
 */
Vue.directive("disabled", _vDisabled2.default);
Vue.directive("checked", _vChecked2.default);
Vue.directive("selected-first", _vSelectedFirst2.default);
Vue.directive('select2', _vSelect2.default);
Vue.directive('t-tooltip', _vTTooltip2.default);
Vue.directive('t-html', _vTHtml2.default);
Vue.directive('t-placeholder', _vTPlaceholder2.default);
Vue.directive('t-title', _vTTitle2.default);
Vue.directive("t", _vT2.default);
Vue.directive("t-plugin", _vTPlugin2.default);
Vue.directive("plugins", _vPlugins2.default);
Vue.directive("online", _vOnline2.default);
Vue.directive("download", _vDownload2.default);
Vue.directive("click-outside", _vClickOutside2.default);

/**
 * Install global plugins
 */
Vue.use(window.VueCookie);

/**
 * Vue 2 Plugin used to add global-level functionality to Vue
 *
 * @link https://v2.vuejs.org/v2/guide/plugins.html
 *
 * ORIGINAL SOURCE: src/app/gui/vue/vueappplugin.js@3.6
 */
Vue.use({
  install: function install(Vue) {
    // hold a list of registered fontawsome classes for current project
    Vue.prototype.g3wtemplate = {
      font: _constant.FONT_AWESOME_ICONS,
      /**
       * @TODO check if deprecated
       */
      get: function get() {},
      getInfo: function getInfo() {
        return {
          font: this.font
        };
      },
      addFontClass: function addFontClass() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            name = _ref.name,
            className = _ref.className;

        var added = this.font[name] === undefined;
        if (added) this.font[name] = className;
        return added;
      },

      /**
       * @TODO check if deprecated
       */
      getInfoString: function getInfoString() {},
      getFontClass: function getFontClass(type) {
        return typeof this.font[type] !== "undefined" ? this.font[type] : '';
      }
    };
    // include isMobile() method within all Vue instances
    Vue.mixin({
      methods: {
        isMobile: function (_isMobile) {
          function isMobile() {
            return _isMobile.apply(this, arguments);
          }

          isMobile.toString = function () {
            return _isMobile.toString();
          };

          return isMobile;
        }(function () {
          return isMobile.any;
        })
      }
    });
  }
}, {});

Vue.mixin({ inheritAttrs: false }); // set mixins inheriAttrs to avoid tha unused props are setted as attrs

/**
 * @requires components/App.vue
 */
var layout = $.LayoutManager;

// loading spinner at beginning
layout.loading(true);

/**
 * ORIGINAL SOURCE: src/gui/app/index.js@3.4
 */
var ApplicationTemplate = function ApplicationTemplate(_ref2) {
  var ApplicationService = _ref2.ApplicationService;

  var appLayoutConfig = ApplicationService.getConfig().layout || {};
  // useful to build a difference layout/component based on mobile or not
  this._isMobile = isMobile.any;
  this._isIframe = appLayoutConfig.iframe;
  //ussefult ot not close user message when set content is called
  this.sizes = {
    sidebar: {
      width: 0
    }
  };
  /*
    usefull to show onaly last waiting request output
    at moment will be an object
    {
      stop: method to sot to show result
    }
   */
  this.waitingoutputdataplace = null;
  this.init = function () {
    // create Vue App
    this._createApp();
  };
  // create application config
  this._createTemplateConfig = function () {
    var G3WTemplate = Vue.prototype.g3wtemplate;
    var appTitle = ApplicationService.getConfig().apptitle || 'G3W Suite';
    var ContentsComponent = require('gui/viewport/contentsviewer');
    var CatalogComponent = require('gui/catalog/vue/catalog');
    var SearchComponent = require('gui/search/vue/search');
    var QueryBuilderUIFactory = require('gui/querybuilder/querybuilderuifactory');
    var PrintComponent = require('gui/print/vue/print');
    var MetadataComponent = require('gui/metadata/vue/metadata');
    var ToolsComponent = require('gui/tools/vue/tools');
    var WMSComponent = require('gui/wms/vue/wms');
    var MapComponent = require('gui/map/vue/map');
    var QueryResultsComponent = require('gui/queryresults/vue/queryresults');
    var SpatialBookMarksComponent = require('gui/spatialbookmarks/vue/spatialbookmarks');
    return {
      title: appTitle,
      placeholders: {
        navbar: {
          components: []
        },
        sidebar: {
          components: [new MetadataComponent({
            id: 'metadata',
            open: false,
            collapsible: false,
            icon: G3WTemplate.getFontClass('file'),
            mobile: true
          }), new SpatialBookMarksComponent({
            id: 'spatialbookmarks',
            open: false,
            collapsible: true,
            icon: G3WTemplate.getFontClass('bookmark'),
            mobile: true
          }), new PrintComponent({
            id: 'print',
            open: false,
            collapsible: true, //  it used to manage click event if can run setOpen component method
            icon: G3WTemplate.getFontClass('print'),
            mobile: false
          }), new SearchComponent({
            id: 'search',
            open: false,
            collapsible: true,
            icon: G3WTemplate.getFontClass('search'),
            actions: [{
              id: "querybuilder",
              class: G3WTemplate.getFontClass('calculator') + ' sidebar-button sidebar-button-icon',
              tooltip: 'Query Builder',
              fnc: function fnc() {
                _gui2.default.closeContent();
                ApplicationTemplate.Services.sidebar.closeOpenComponents();
                QueryBuilderUIFactory.show({
                  type: 'sidebar' // sidebar or modal
                });
              },
              style: {
                color: '#8DC3E3',
                padding: '6px',
                fontSize: '1.2em',
                borderRadius: '3px',
                marginRight: '5px'
              }
            }],
            mobile: true
          }),
          // Component that store plugins
          new ToolsComponent({
            id: 'tools',
            open: false,
            collapsible: true,
            icon: G3WTemplate.getFontClass('tools'),
            mobile: true
          }), new WMSComponent({
            id: 'wms',
            open: false,
            collapsible: true,
            icon: G3WTemplate.getFontClass('layers'),
            mobile: true
          }), new CatalogComponent({
            id: 'catalog',
            open: false,
            collapsible: false,
            isolate: true,
            icon: G3WTemplate.getFontClass('map'),
            mobile: true,
            config: {
              legend: {
                config: appLayoutConfig.legend
              }
            }
          })]
        },
        floatbar: {
          components: []
        }
      },
      othercomponents: [new QueryResultsComponent({
        id: 'queryresults'
      })],
      viewport: {
        // placeholder of the content (view content). Secondary view (hidden)
        components: {
          map: new MapComponent({
            id: 'map'
          }),
          content: new ContentsComponent({
            id: 'contents'
          })
        }
      }
    };
  };

  //Vue app
  this._createApp = function () {
    this._setDataTableLanguage();
    var self = this;
    if (isMobile.any || this._isIframe) $('body').addClass('sidebar-collapse');
    return new Vue({
      el: '#app',
      created: function created() {
        // set general metods for the application as  GUI.showForm etc ..
        self._setupInterface();
        // setup layout
        self._setupLayout();
        //register all services fro the application
        self._setUpServices();
        // create templateConfig
        self.templateConfig = self._createTemplateConfig();
        // listen lng change and reset datatable language
        this.$watch(function () {
          return _applicationState2.default.language;
        }, function () {
          self._setDataTableLanguage();
        });
      },
      mounted: function () {
        var _ref3 = _asyncToGenerator(function* () {
          yield this.$nextTick();
          self._buildTemplate();
          // setup Font, Css class methods
          self._setUpTemplateDependencies(this);
          $(document).localize();
          self._setViewport(self.templateConfig.viewport);
          var skinColor = $('.navbar').css('background-color');
          _gui2.default.skinColor = skinColor && '#' + skinColor.substr(4, skinColor.indexOf(')') - 4).split(',').map(function (color) {
            return parseInt(color).toString(16);
          }).join('');
          yield this.$nextTick();
          self.emit('ready');
          self.sizes.sidebar.width = $('#g3w-sidebar').width();
          //getSkinColor
          _gui2.default.ready();
        });

        function mounted() {
          return _ref3.apply(this, arguments);
        }

        return mounted;
      }()
    });
  };

  this._setupLayout = function () {
    if (!isMobile.any) {
      // setup map controls
      $("<style type='text/css'> .ol-control-tl {" + "top: 7px;" + "left:43px;" + "}</style>").appendTo("head");
    }
    // Inizialization of the components of the application
    Vue.component('sidebar', _Sidebar2.default);
    //Navbar custom items
    Vue.component('navbarleftitems', _NavbaritemsLeft2.default);
    Vue.component('navbarrightitems', _NavbaritemsRight2.default);
    Vue.component('viewport', _Viewport2.default);
    Vue.component('floatbar', _Floatbar2.default);
    Vue.component('app', _App2.default);
  };

  // dataTable Translations and custom extentions
  this._setDataTableLanguage = function () {
    var dataTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var languageOptions = {
      "language": {
        "sSearch": '',
        "searchPlaceholder": t("dosearch"),
        "sLengthMenu": t("dataTable.lengthMenu"),
        "paginate": {
          "previous": t("dataTable.previous"),
          "next": t("dataTable.next")
        },
        "info": t("dataTable.info"),
        "zeroRecords": t("dataTable.nodatafilterd"),
        "infoFiltered": ''
      }
    };
    //set form control class to filter
    $.extend($.fn.dataTableExt.oStdClasses, {
      "sFilterInput": "form-control search"
    });
    !dataTable ? $.extend(true, $.fn.dataTable.defaults, languageOptions) : dataTable.dataTable({ "oLanguage": languageOptions });
  };

  // route setting att beginning (is an example)
  this._addRoutes = function () {
    var RouterService = ApplicationService.getRouterService();
    var mapService = _gui2.default.getComponent('map').getService();
    RouterService.addRoute('map/zoomto/{coordinate}/:zoom:', function (coordinate, zoom) {
      coordinate = _.map(coordinate.split(','), function (xy) {
        return Number(xy);
      });
      zoom = zoom ? Number(zoom) : null;
      if (coordinate.length) {
        mapService.on('ready', function () {
          this.zoomTo(coordinate, zoom);
        });
      }
    });
  };

  //register all services
  this._setUpServices = function () {
    Object.keys(ApplicationTemplate.Services).forEach(function (element) {
      var service = ApplicationTemplate.Services[element];
      ApplicationService.registerService(element, service);
    });
    Object.values(_gui2.default.getComponents()).forEach(function (component) {
      ApplicationService.registerService(component.id, component.getService());
    });
    ApplicationTemplate.Services.viewport.on('resize', function () {
      return _gui2.default.emit('resize');
    });
  };
  // build template function
  this._buildTemplate = function () {
    var _this = this;

    _floatbar2.default.init(layout);
    var placeholdersConfig = this.templateConfig.placeholders;
    Object.entries(placeholdersConfig).forEach(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
          placeholder = _ref5[0],
          options = _ref5[1];

      _this._addComponents(options.components, placeholder);
    });
    //register other compoents
    this._addOtherComponents();
  };

  //add component not related to placeholder
  this._addOtherComponents = function () {
    if (this.templateConfig.othercomponents) this._addComponents(this.templateConfig.othercomponents);
  };
  // viewport setting
  this._setViewport = function (viewportOptions) {
    // viewport components
    // es.: map e content
    /*
     components: {
      map: new MapComponent({
        id: 'map'
      }),
      content: new ContentsComponent({
        id: 'content',
      })
     }
      */
    if (viewportOptions) {
      ApplicationTemplate.Services.viewport.init(viewportOptions);
      this._addComponents(viewportOptions.components);
    }
  };

  // add component to template
  this._addComponent = function (component, placeholder) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    this._addComponents([component], placeholder, options);
    return true;
  };

  // registry component
  this._addComponents = function (components, placeholder, options) {
    var register = true;
    if (placeholder && ApplicationTemplate.PLACEHOLDERS.indexOf(placeholder) > -1) {
      var placeholderService = ApplicationTemplate.Services[placeholder];
      if (placeholderService) register = placeholderService.addComponents(components, options);
    }
    Object.entries(components).forEach(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
          key = _ref7[0],
          component = _ref7[1];

      if (register) {
        _components2.default.registerComponent(component);
        ApplicationService.registerService(component.id, component.getService());
      }
    });
  };

  this._removeComponent = function (componentId, placeholder, options) {
    var component = _components2.default.unregisterComponent(componentId);
    placeholder && ApplicationTemplate.Services[placeholder] && ApplicationTemplate.Services[placeholder].removeComponent(component, options);
  };

  this._showModalOverlay = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var message = arguments[1];

    var mapService = _gui2.default.getService('map');
    if (bool) mapService.startDrawGreyCover(message);else mapService.stopDrawGreyCover();
  };

  this._isSidebarVisible = function () {
    return !$('body').hasClass('sidebar-collapse');
  };

  this._showSidebar = function () {
    $('body').addClass('sidebar-open');
    $('body').removeClass('sidebar-collapse');
  };

  this._hideSidebar = function () {
    $('body').removeClass('sidebar-open');
    $('body').addClass('sidebar-collapse');
  };

  // setup Fonts Css dependencies methods
  this._setUpTemplateDependencies = function (VueApp) {
    _gui2.default.isMobile = function () {
      return isMobile.any;
    };
    // method that return Template Info
    _gui2.default.getTemplateInfo = function () {
      return VueApp.g3wtemplate.getInfo();
    };
    _gui2.default.getTemplateInfo = function () {
      return VueApp.g3wtemplate.getInfo();
    };
    _gui2.default.getFontClass = function (type) {
      return VueApp.g3wtemplate.getFontClass(type);
    };
  };

  /**
   * Convert error to user message showed
   * @param error
   * @returns {string}
   */
  _gui2.default.errorToMessage = function (error) {
    var message = 'server_error';
    switch (toRawType(error)) {
      case 'Error':
        message = 'CLIENT - ' + error.message;
        break;
      case 'Object':
        if (error.responseJSON) {
          error = error.responseJSON;
          if (error.result === false) {
            var _error$error = error.error,
                _error$error$code = _error$error.code,
                code = _error$error$code === undefined ? '' : _error$error$code,
                _error$error$data = _error$error.data,
                data = _error$error$data === undefined ? '' : _error$error$data,
                _error$error$message = _error$error.message,
                msg = _error$error$message === undefined ? '' : _error$error$message;

            message = code.toUpperCase() + ' ' + data + ' ' + msg;
          }
        } else if (error.responseText) {
          message = error.responseText;
        }
        break;
      case 'Array':
        message = error.map(function (error) {
          return _gui2.default.errorToMessage(error);
        }).join(' ');
        break;
      case 'String':
      default:
        message = error;
    }
    return message;
  };

  // setup Interaces
  this._setupInterface = function () {
    var _this2 = this;

    /* PLUBLIC INTERFACE */

    /* Common methods */
    _gui2.default.layout = layout;
    _gui2.default.getSize = function (_ref8) {
      var element = _ref8.element,
          what = _ref8.what;

      if (element && what) return _this2.sizes[element][what];
    };

    _gui2.default.addComponent = this._addComponent.bind(this);
    _gui2.default.removeComponent = this._removeComponent.bind(this);

    /* Metodos to define */
    _gui2.default.getResourcesUrl = function () {
      return ApplicationService.getConfig().resourcesurl;
    };

    //LIST
    _gui2.default.showList = _floatbar2.default.showPanel.bind(_floatbar2.default);
    _gui2.default.closeList = _floatbar2.default.closePanel.bind(_floatbar2.default);
    _gui2.default.hideList = _floatbar2.default.hidePanel.bind(_floatbar2.default);

    // TABLE
    _gui2.default.showTable = function () {};
    _gui2.default.closeTable = function () {};

    //Function called from DataRouterservice for gui output
    /**
     *
     * @param data
     * @param options
     */
    _gui2.default.outputDataPlace = function () {
      var _ref9 = _asyncToGenerator(function* (dataPromise) {
        var _this3 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        // show parameter it used to set condition to show result or not
        // loading parameter is used to show result content when we are wait the response. Default true otherwise we shoe result content at the end
        var defaultOutputConfig = { condition: true, add: false, loading: true };
        var _options$title = options.title,
            title = _options$title === undefined ? '' : _options$title,
            _options$show = options.show,
            show = _options$show === undefined ? defaultOutputConfig : _options$show,
            before = options.before,
            after = options.after;
        // convert show in an object

        var outputConfig = toRawType(show) !== 'Object' ? {
          condition: show, // can be Function or Boolean otherwise is set true
          add: false,
          loading: true
        } : _extends({}, defaultOutputConfig, show);
        var condition = outputConfig.condition,
            add = outputConfig.add,
            loading = outputConfig.loading;
        //check if waiting output data
        // in case we stop and substiute with new request data

        this.waitingoutputdataplace && (yield this.waitingoutputdataplace.stop());
        var queryResultsService = add ? _gui2.default.getService('queryresults') : loading && this.showContentFactory('query')(title);
        this.waitingoutputdataplace = function () {
          var _stop = false;
          _asyncToGenerator(function* () {
            try {
              var data = yield dataPromise;
              //if set before call method and wait
              before && (yield before(data));
              // in case of usermessage show user message
              data.usermessage && _gui2.default.showUserMessage({
                type: data.usermessage.type,
                message: data.usermessage.message,
                autoclose: data.usermessage.autoclose
              });
              if (!_stop) {
                // check condition
                var showResult = toRawType(condition) === 'Function' ? condition(data) : toRawType(condition) === 'Boolean' ? condition : true;
                if (showResult) {
                  (queryResultsService ? queryResultsService : _this3.showContentFactory('query')(title)).setQueryResponse(data, {
                    add: add
                  });
                } else _gui2.default.closeContent();
                // call after is set with data
                after && after(data);
              }
            } catch (error) {
              var message = _this3.errorToMessage(error);
              _this3.showUserMessage({
                type: 'alert',
                message: message,
                textMessage: true
              });
              _this3.closeContent();
            } finally {
              if (!_stop) _this3.waitingoutputdataplace = null;
            }
          })();
          return {
            stop: function () {
              var _ref11 = _asyncToGenerator(function* () {
                _stop = true;
              });

              function stop() {
                return _ref11.apply(this, arguments);
              }

              return stop;
            }()
          };
        }();
      });

      return function (_x6) {
        return _ref9.apply(this, arguments);
      };
    }();

    _gui2.default.showContentFactory = function (type) {
      var showPanelContent = void 0;
      switch (type) {
        case 'query':
          showPanelContent = _gui2.default.showQueryResults;
          break;
        case 'form':
          showPanelContent = _gui2.default.showForm;
          break;
      }
      return showPanelContent;
    };

    _gui2.default.showForm = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var perc = options.perc,
          _options$split = options.split,
          split = _options$split === undefined ? 'h' : _options$split,
          push = options.push,
          showgoback = options.showgoback,
          crumb = options.crumb;

      var FormComponent = require('gui/form/vue/form');
      // new isnstace every time
      var formComponent = options.formComponent ? new options.formComponent(options) : new FormComponent(options);
      //get service
      var formService = formComponent.getService();
      // parameters : [content, title, push, perc, split, closable, crumb]
      _gui2.default.setContent({
        perc: perc,
        content: formComponent,
        split: split,
        crumb: crumb,
        push: !!push, //only one( if other delete previous component)
        showgoback: !!showgoback,
        closable: false
      });
      // return service
      return formService;
    };

    /**
     *
     * @param pop remove or not content or pop
     */
    _gui2.default.closeForm = function () {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref12$pop = _ref12.pop,
          pop = _ref12$pop === undefined ? false : _ref12$pop;

      this.emit('closeform', false);
      pop ? _gui2.default.popContent() : _viewport2.default.removeContent();
      // force set modal to false
      _gui2.default.setModal(false);
    };

    _gui2.default.disableElement = function (_ref13) {
      var element = _ref13.element,
          disable = _ref13.disable;

      disable && $(element).addClass('g3w-disabled') || $(element).removeClass('g3w-disabled');
    };

    _gui2.default.disableContent = function (disable) {
      _viewport2.default.disableContent(disable);
    };

    _gui2.default.disablePanel = function () {
      var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      _gui2.default.disableElement({
        element: "#g3w-sidebarpanel-placeholder",
        disable: disable
      });
    };

    // hide content
    _gui2.default.hideContent = function (bool, perc) {
      return _viewport2.default.hideContent(bool, perc);
    };

    _gui2.default.closeContent = function () {
      this.emit('closecontent', false);
      return _viewport2.default.closeContent();
    };

    _gui2.default.closeOpenSideBarComponent = function () {
      ApplicationTemplate.Services.sidebar.closeOpenComponents();
    };

    // show results info/search
    _gui2.default.showQueryResults = function (title, results) {
      var queryResultsComponent = _gui2.default.getComponent('queryresults');
      var queryResultService = queryResultsComponent.getService();
      queryResultService.reset();
      if (results) {
        queryResultService.setQueryResponse(results);
      }
      _gui2.default.showContextualContent({
        content: queryResultsComponent,
        title: "info.title",
        crumb: {
          title: "info.title",
          trigger: null
        },
        push: _gui2.default.getPushContent(),
        post_title: title
      });
      return queryResultService;
    };

    _gui2.default.addNavbarItem = function (item) {
      _navbaritems2.default.addItem(item);
    };

    _gui2.default.removeNavBarItem = function () {};

    _gui2.default.showPanel = _sidebar2.default.showPanel.bind(_sidebar2.default);

    _gui2.default.closePanel = _sidebar2.default.closePanel.bind(_sidebar2.default);

    ///
    _gui2.default.disableApplication = function () {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      ApplicationService.disableApplication(bool);
    };

    //showusermessage
    _gui2.default.showUserMessage = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _viewport2.default.showUserMessage(options);
    };

    _gui2.default.closeUserMessage = function () {
      _viewport2.default.closeUserMessage();
    };

    /* ------------------ */
    _gui2.default.notify = {
      warning: function warning(message) {
        var autoclose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _gui2.default.showUserMessage({
          type: 'warning',
          message: message,
          autoclose: autoclose
        });
      },
      error: function error(message) {
        var autoclose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _gui2.default.showUserMessage({
          type: 'alert',
          message: message,
          autoclose: autoclose
        });
      },
      info: function info(message) {
        var autoclose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _gui2.default.showUserMessage({
          type: 'info',
          message: message,
          autoclose: autoclose
        });
      },
      success: function success(message) {
        _gui2.default.showUserMessage({
          type: 'success',
          message: message,
          autoclose: true
        });
      }
    };

    // proxy  bootbox library
    _gui2.default.dialog = bootbox;

    //modal dialog//
    _gui2.default.showModalDialog = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _gui2.default.dialog.dialog(options);
    };

    /* spinner */
    _gui2.default.showSpinner = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var container = options.container || 'body';
      var id = options.id || 'loadspinner';
      var where = options.where || 'prepend'; // append | prepend
      var style = options.style || '';
      var transparent = options.transparent ? 'background-color: transparent' : '';
      var center = options.center ? 'margin: auto' : '';
      if (!$("#" + id).length) {
        $(container)[where].call($(container), '<div id="' + id + '" class="spinner-wrapper ' + style + '" style="' + transparent + '"><div class="spinner ' + style + '" style="' + center + '"></div></div>');
      }
    };

    //hide spinner
    _gui2.default.hideSpinner = function () {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'loadspinner';

      $("#" + id).remove();
    };

    /* end spinner*/
    /* end common methods */

    /*  */

    // FLOATBAR //
    _gui2.default.showFloatbar = function () {
      _floatbar2.default.open();
    };

    _gui2.default.hideFloatbar = function () {
      _floatbar2.default.close();
    };

    // SIDEBAR //
    _gui2.default.showSidebar = this._showSidebar.bind(this);
    _gui2.default.hideSidebar = this._hideSidebar.bind(this);
    _gui2.default.isSidebarVisible = this._isSidebarVisible.bind(this);

    // RELOAD COMPONENTS
    _gui2.default.reloadComponents = function () {
      ApplicationTemplate.Services.sidebar.reloadComponents();
    };

    // MODAL
    _gui2.default.setModal = this._showModalOverlay.bind(this);

    /**
     * Toggle set full screen modal
     */
    _gui2.default.showFullModal = function () {
      var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref14$element = _ref14.element,
          element = _ref14$element === undefined ? "#full-screen-modal" : _ref14$element,
          _ref14$show = _ref14.show,
          show = _ref14$show === undefined ? true : _ref14$show;

      $(element).modal(show ? 'show' : 'hide');
    };

    _gui2.default.disableSideBar = function () {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      _applicationState2.default.gui.sidebar.disabled = bool;
    };

    // VIEWPORT //
    _gui2.default.setPrimaryView = function (viewName) {
      _viewport2.default.setPrimaryView(viewName);
    };

    // only map
    _gui2.default.showMap = function () {
      _viewport2.default.showMap();
    };

    _gui2.default.showContextualMap = function () {
      var perc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;
      var split = arguments[1];

      _viewport2.default.showContextualMap({
        perc: perc,
        split: split
      });
    };

    _gui2.default.setContextualMapComponent = function (mapComponent) {
      _viewport2.default.setContextualMapComponent(mapComponent);
    };

    _gui2.default.resetContextualMapComponent = function () {
      _viewport2.default.resetContextualMapComponent();
    };

    //  (100%) content
    _gui2.default.showContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _gui2.default.setLoadingContent(false);
      options.perc = _this2._isMobile ? 100 : options.perc;
      _gui2.default.setContent(options);
      return true;
    };

    _gui2.default.showContextualContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.perc = _this2._isMobile ? 100 : options.perc;
      _gui2.default.setContent(options);
      return true;
    };

    // add component to stack (append)
    // Differences between pushContent and setContent are :
    //  - push every componet is added, set is refreshed
    //  - pushContent has a new parameter (backonclose) when is clicked x
    //  - the contentComponet is close all stack is closed
    _gui2.default.pushContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.perc = _this2._isMobile ? 100 : options.perc;
      options.push = true;
      _gui2.default.setContent(options);
    };

    // add content to stack
    _gui2.default.pushContextualContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      options.perc = _this2._isMobile ? 100 : options.perc;
      _gui2.default.pushContent(options);
    };

    // remove last content from stack
    _gui2.default.popContent = function () {
      _viewport2.default.popContent();
    };
    //return number of component of stack
    _gui2.default.getContentLength = function () {
      return _viewport2.default.contentLength();
    };

    _gui2.default.getCurrentContentTitle = function () {
      return _viewport2.default.getCurrentContentTitle();
    };

    _gui2.default.getCurrentContentId = function () {
      return _viewport2.default.getCurrentContentId();
    };

    /**
     * change current content title
     * @param title
     */
    _gui2.default.changeCurrentContentTitle = function (title) {
      _viewport2.default.changeCurrentContentTitle(title);
    };

    /**
     * change current content options
     * @param options: {title, crumb}
     */
    _gui2.default.changeCurrentContentOptions = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _viewport2.default.changeCurrentContentOptions(options);
    };

    /**
     * Method to get current content
     */
    _gui2.default.getCurrentContent = function () {
      return _viewport2.default.getCurrentContent();
    };

    _gui2.default.toggleFullViewContent = function () {
      _viewport2.default.toggleFullViewContent();
    };

    _gui2.default.resetToDefaultContentPercentage = function () {
      _viewport2.default.resetToDefaultContentPercentage();
    };

    _gui2.default.getProjectMenuDOM = function () {
      var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          projects = _ref15.projects,
          host = _ref15.host,
          cbk = _ref15.cbk;

      var projectVueMenuComponent = new ProjectsMenuComponent({
        projects: projects && Array.isArray(projects) && projects,
        cbk: cbk,
        host: host
      }).getInternalComponent();
      return projectVueMenuComponent.$mount().$el;
    };

    _gui2.default.setCloseUserMessageBeforeSetContent = function () {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this._closeUserMessageBeforeSetContent = bool;
    };

    _gui2.default._setContent = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _this2._closeUserMessageBeforeSetContent && _gui2.default.closeUserMessage();
      options.content = options.content || null;
      options.title = options.title || "";
      options.push = _.isBoolean(options.push) ? options.push : false;
      options.perc = _this2._isMobile ? 100 : options.perc;
      options.split = options.split || 'h';
      options.backonclose = _.isBoolean(options.backonclose) ? options.backonclose : false;
      options.showtitle = _.isBoolean(options.showtitle) ? options.showtitle : true;
      _viewport2.default.showContent(options);
    };

    _gui2.default.hideClientMenu = function () {
      ApplicationService.getConfig().user = null;
    };

    _gui2.default.hideChangeMaps = function () {
      ApplicationService.getConfig().projects = [];
    };

    // return specific classes
    _gui2.default.getTemplateClasses = function () {
      return BootstrapVersionClasses;
    };

    _gui2.default.getTemplateClass = function (_ref16) {
      var element = _ref16.element,
          type = _ref16.type;

      return BootstrapVersionClasses[element][type];
    };

    _gui2.default.setLoadingContent = function () {
      var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      ApplicationTemplate.Services.viewport.setLoadingContent(loading);
      return loading && new Promise(function (resolve) {
        setTimeout(resolve, 200);
      });
    };

    _gui2.default.openProjectsMenu = function () {
      var isProjectMenuComponent = _gui2.default.getComponent('contents').getComponentById('projectsmenu');
      if (isProjectMenuComponent) {
        _gui2.default.closeContent();
        return;
      }
      if (this.isMobile()) {
        _gui2.default.hideSidebar();
        $('#main-navbar.navbar-collapse').removeClass('in');
      }
      ApplicationTemplate.Services.sidebar.closeOpenComponents();
      _gui2.default.setContent({
        content: new ProjectsMenuComponent(),
        title: '',
        perc: 100
      });
    };

    /**
     * @since 3.8.0
     */
    _gui2.default.openChangeMapMenu = function () {
      var isChangeMapMenuComponent = _gui2.default.getComponent('contents').getComponentById('changemapmenu');
      if (isChangeMapMenuComponent) {
        _gui2.default.closeContent();
        return;
      }
      if (this.isMobile()) {
        _gui2.default.hideSidebar();
        $('#main-navbar.navbar-collapse').removeClass('in');
      }
      ApplicationTemplate.Services.sidebar.closeOpenComponents();
      _gui2.default.setContent({
        content: new ChangeMapMenuComponent(),
        title: '',
        perc: 100
      });
    };
  };

  base(this);
};

inherit(ApplicationTemplate, G3WObject);

// Placeholder knowed by application
ApplicationTemplate.PLACEHOLDERS = ['navbar', 'sidebar', 'viewport', 'floatbar'];

// service know by the applications (standard)
ApplicationTemplate.Services = {
  navbar: null,
  sidebar: _sidebar2.default,
  viewport: _viewport2.default,
  floatbar: null
};

ApplicationTemplate.fail = function (_ref17) {
  var error = _ref17.error;

  layout.loading(false);
  new Vue(_extends({
    el: '#app'
  }, Vue.compile('<div class="error-initial-page skin-background-color">\n        <template v-if="isMobile()">\n          <h3 class="oops">Oops!</h3>\n          <h5 class="cause">' + (error || t('error_page.error')) + '</h5>\n          <h6 class="at-moment">' + t('error_page.at_moment') + '</h6>\n          <h4 class="f5">' + t('error_page.f5') + '</h4>\n        </template>\n        <template v-else>\n          <h1 class="oops">Oops!</h1>\n          <h1 class="cause">' + (error || t('error_page.error')) + '</h1>\n          <h3 class="at-moment">' + t('error_page.at_moment') + '</h3>\n          <h2 class="f5">' + t('error_page.error') + '</h2>\n        </template>\n      </div>')));
};

/**
 * Application starting point
 *
 * create the ApplicationTemplate instance passing template interface configuration
 * and the applicationService instance that is useful to work with project API
 */
_application2.default.init().then(function () {
  var app = new ApplicationTemplate({ ApplicationService: _application2.default });
  app.on('ready', function () {
    return _application2.default.postBootstrap();
  });
  app.init();
}).catch(function (_ref18) {
  var _ref18$error = _ref18.error,
      error = _ref18$error === undefined ? null : _ref18$error,
      language = _ref18.language;

  if (error) {
    if (error.responseJSON && error.responseJSON.error.data) error = error.responseJSON.error.data;else if (error.statusText) error = error.statusText;
  }
  console.error(error);
  ApplicationTemplate.fail({ error: error });
});

},{"./deprecated":270,"./globals":286,"app/constant":5,"components/App.vue":147,"components/Floatbar.vue":167,"components/GlobalBarLoader.vue":172,"components/GlobalDateTime.vue":173,"components/GlobalDivider.vue":174,"components/GlobalGallery.vue":175,"components/GlobalGeo.vue":176,"components/GlobalHelpDiv.vue":177,"components/GlobalImage.vue":178,"components/GlobalLayerPositions.vue":179,"components/GlobalProgressBar.vue":180,"components/GlobalRange.vue":181,"components/GlobalResize.vue":182,"components/GlobalResizeIcon.vue":183,"components/GlobalSkeleton.vue":184,"components/GlobalTabs.vue":185,"components/NavbaritemsLeft.vue":222,"components/NavbaritemsRight.vue":223,"components/Sidebar.vue":252,"components/Viewport.vue":266,"core/g3wobject":8,"core/i18n/i18n.service":9,"directives/v-checked":272,"directives/v-click-outside":273,"directives/v-disabled":274,"directives/v-download":275,"directives/v-online":276,"directives/v-plugins":277,"directives/v-select2":278,"directives/v-selected-first":279,"directives/v-t":285,"directives/v-t-html":280,"directives/v-t-placeholder":281,"directives/v-t-plugin":282,"directives/v-t-title":283,"directives/v-t-tooltip":284,"gui/catalog/vue/catalog":75,"gui/changemapmenu/changemapmenu":76,"gui/form/vue/form":82,"gui/map/vue/map":116,"gui/metadata/vue/metadata":119,"gui/print/vue/print":122,"gui/projectsmenu/projectsmenu":125,"gui/querybuilder/querybuilderuifactory":126,"gui/queryresults/vue/queryresults":130,"gui/search/vue/search":136,"gui/spatialbookmarks/vue/spatialbookmarks":137,"gui/tools/vue/tools":142,"gui/viewport/contentsviewer":145,"gui/wms/vue/wms":146,"services/application":310,"services/floatbar":318,"services/gui":319,"services/navbaritems":321,"services/sidebar":325,"services/viewport":327,"store/application-state":328,"store/components":330,"utils":419}],288:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Verbindungsfehler",
      at_moment: "Karte anzeigen ist im Moment nicht möglich",
      f5: "Drücken Sie Strg+F5"
    },
    cookie_law: {
      message: "Diese Website verwendet Cookies, um Ihnen die bestmögliche Erfahrung auf unserer Website zu bieten.",
      buttonText: "Verstanden!"
    },
    default: "default",
    sign_in: "Anmelden",
    layer_selection_filter: {
      tools: {
        filter: "Filter aktivieren/deaktivieren",
        nofilter: "Filter entfernen",
        invert: "Auswahl umkehren",
        clear: "Auswahl löschen",
        show_features_on_map: "Auf der Karte sichtbare Features anzeigen",
        savefilter: "Filter speichern",
        filterName: "Filtername"
      }
    },
    warning: {
      not_supported_format: "Nicht unterstütztes Format"
    },
    layer_position: {
      top: 'OBEN',
      bottom: 'UNTEN',
      message: "Position relativ zu den Layern im TOC"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Template auswählen"
        }
      },
      spatialbookmarks: {
        title: "Räumliche Lesezeichen",
        helptext: "Bewegen Sie sich auf der Kartenausdehnung, fügen Sie den Namen ein und klicken Sie auf Hinzufügen",
        input: {
          name: "Name"
        },
        sections: {
          project: {
            title: "Projekt-Lesezeichen"
          },
          user: {
            title: "Benutzer-Lesezeichen"
          }
        }
      },
      search: {
        all: 'ALLE',
        no_results: "Keine Ergebnisse",
        searching: "Suchen ...",
        error_loading: "Fehler beim Datenladen",
        layer_not_searchable: "Layer ist nicht durchsuchbar",
        layer_not_querable: "Layer ist nicht abfragbar",
        autocomplete: {
          inputshort: {
            pre: "Bitte",
            post: "oder mehrere Zeichen eingeben"
          }
        }
      },
      print: {
        no_layers: 'Kein Layer zu drucken',
        template: "Template",
        labels: "Labels",
        scale: "Skala",
        format: "Format",
        rotation: "Drehung",
        download_image: "Bild herunterladen",
        fids_instruction: "Akzeptierte Werte: von 1 bis [max]. Es ist möglich, ein Intervall einzugeben, z. B. 4-6",
        fids_example: "Bsp. 1,4-6 druckt id 1,4,5,6",
        help: "Die im Druck angezeigten Layer können die im Projekt definierten sein und nicht die auf der Karte angezeigten"
      },
      querybuilder: {
        search: {
          run: "Ausführen",
          info: "Information",
          delete: "Löschen",
          edit: "Bearbeiten"
        },
        messages: {
          changed: 'Gespeichert',
          number_of_features: "Anzahl der Features"
        },
        panel: {
          button: {
            all: 'ALLE',
            save: 'SPEICHERN',
            test: 'TEST',
            clear: 'LÖSCHEN',
            run: 'AUSFÜHREN',
            manual: 'MANUELL'
          },
          layers: 'LAYERS',
          fields: 'FELDER',
          values: 'WERTE',
          operators: 'OPERATOREN',
          expression: 'AUSDRUCK'
        },
        error_run: 'Es ist ein Fehler aufgetreten. Bitte überprüfen Sie die Abfrage',
        error_test: "Während der Ausführung der Abfrage ist ein Fehler aufgetreten",
        delete: 'Soll es gelöscht werden?',
        additem: 'Geben Sie den Namen der neuen Suche ein'
      },
      errors: {
        layers: {
          load: "Einige Layer sind nicht verfügbar"
        },
        unsupported_format: 'Nicht unterstütztes Format',
        add_external_layer: 'Fehler im Ladevorgang des Layers'
      },
      metadata: {
        title: 'Metadaten',
        groups: {
          general: {
            title: 'ALLGEMEIN',
            fields: {
              title: 'TITEL',
              name: 'NAME',
              description: "BESCHREIBUNG",
              abstract: "ABASTRACT",
              keywords: 'SCHLÜSSELWÖRTER',
              fees: "GEBÜHREN",
              accessconstraints: "ZUGRIFFSBESCHRÄNKUNG",
              contactinformation: "KONTAKTE",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "Email",
                  personprimary: 'Referenzen',
                  contactvoicetelephone: 'Telefon',
                  contactorganization: 'Firma',
                  ContactOrganization: 'Firma',
                  contactposition: 'Position',
                  ContactPosition: 'Position',
                  contactperson: 'Person',
                  ContactPerson: 'Person'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'SPATIAL',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'LAYERS',
            fields: {
              layers: 'LAYERS',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "TITEL",
                name: 'NAME',
                geometrytype: 'GEOMETRIE',
                source: 'QUELLE',
                attributes: 'ATTRIBUTE',
                abstract: 'ABSTRACT',
                attribution: 'ATRIBUTION',
                keywords: "SCHLÜSSELWÖRTER",
                metadataurl: 'METADATEN URL',
                dataurl: "DATEN URL"
              }
            },
            groups: {
              general: 'ALLGEMEIN',
              spatial: 'SPATIAL'
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Zeilenansicht",
          row_to_form: "Formularansicht",
          zoomtogeometry: "Auf Geometrie zoomen"
        },
        copy_map_extent_url: 'Link zur Kartenansicht kopieren',
        download_shapefile: "Shapefile herunterladen",
        download_gpx: "DGPX herunterladen",
        download_gpkg: "GPKG herunterladen",
        download_csv: "CSV herunterladen",
        download_xls: "XLS herunterladen",
        show_chart: "Diagramm anzeigen",
        atlas: "Atlas drucken"
      },
      mapcontrols: {
        query: {
          tooltip: 'Query layer',
          actions: {
            add_selection: {
              hint: "Auswahl hinzufügen/entfernen"
            },
            zoom_to_features_extent: {
              hint: "Zoom auf Feature-Ausdehnung"
            },
            add_features_to_results: {
              hint: "Hinzufügen/Entfernen von Features zu den Ergebnissen"
            },
            remove_feature_from_results: {
              hint: "Feature aus den Ergebnissen entfernen"
            },
            zoom_to_feature: {
              hint: "Zum Feature zoomen"
            },
            relations: {
              hint: "Relationen anzeigen"
            },
            relations_charts: {
              hint: "Relationship-Diagramm anzeigen"
            },
            download_features_shapefile: {
              hint: 'Features Shapefile herunterladen'
            },
            download_shapefile: {
              hint: 'Feature Shapefile herunterladen'
            },
            download_features_gpx: {
              hint: "Feature GPX herunterladen"
            },
            download_features_gpkg: {
              hint: "Feature GPKG herunterladen"
            },
            download_gpx: {
              hint: "Feature GPX herunterladen"
            },
            download_gpkg: {
              hint: "Feature GPKG herunterladen"
            },
            download_features_csv: {
              hint: "Features CSV herunterladen"
            },
            download_csv: {
              hint: "Feature CSV herunterladen"
            },
            download_features_xls: {
              hint: "Features XLS herunterladen"
            },
            download_xls: {
              hint: "Feature XLS herunterladen"
            },
            atlas: {
              hint: "Atlas drucken"
            },
            copy_zoom_to_fid_url: {
              hint: "Kopieren der Karten-URL mit dieser Geometrie-Feature-Erweiterung",
              hint_change: "Kopiert"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Attribute herunterladen",
            choiches: {
              feature: {
                label: "Nur Features"
              },
              feature_polygon: {
                label: "Features+Query Polygon"
              }
            }
          },
          tooltip: 'Query nach Polygon',
          no_geometry: 'Keine Geometrie in der Antwort',
          help: {
            title: 'Hilfe - Abfrage nach Polygon',
            message: "\n                <ul>\n                  <li>W\xE4hlen Sie einen Polygon Layer auf TOC.</li>\n                  <li>Stellen Sie sicher, dass der Layer sichtbar ist.</li>\n                  <li>Klicken Sie auf ein Feature des ausgew\xE4hlten Layers.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Abfrage durch Polygon zeichnen"
        },
        querybybbox: {
          tooltip: 'BBox Layer abfragen',
          nolayers_visible: 'Es sind keine abfragbaren Layer sichtbar. Bitte setzen Sie mindestens einen sichtbaren wfs Layer, um die Abfrage zu starten',
          help: {
            title: 'Hilfe - Abfrage des BBox Layers',
            message: "\n                 <ul>\n                  <li>Ein Quadrat auf der Karte ziehen, um unterstrichene Layer im TOC abzufragen</li>\n                 </ul>"
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "Das Ergebnis in der Karte ist unvollständig, da die unten stehende Liste fehlerhafter Einträge enthält:"
            }
          },
          tooltip: 'Layer hinzufügen'
        },
        geolocation: {
          tooltip: 'Geolokalisierung'
        },
        measures: {
          length: {
            tooltip: "Länge",
            help: "Klicken Sie auf die Karte, um die Linie zu zeichnen. Drücken Sie <br>CANC, wenn Sie den letzten Eckpunkt löschen möchten."
          },
          area: {
            tooltip: "Fläche",
            help: "Drücken Sie <br>CANC, wenn Sie den letzten Eckpunkt löschen wollen."
          }
        },
        scale: {
          no_valid_scale: "Ungültige Skala"
        },
        scaleline: {
          units: {
            metric: 'Meter',
            nautical: 'Nautische Meile'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Vorheriger",
          zoom_next: "Zoom Nächster"
        }
      },
      relations: {
        relation_data: 'Daten zur Relation',
        no_relations_found: 'Keine Relationen gefunden',
        back_to_relations: 'Zurück zu den Relationen',
        list_of_relations_feature: 'Liste der Relationen des Features',
        error_missing_father_field: "Ein Feld fehlt"
      },
      form: {
        loading: 'Laden ...',
        inputs: {
          messages: {
            errors: {
              picklayer: "Kein Feature ausgewählt. Prüfen, ob der Layer in Bearbeitung oder im aktuellen Maßstab sichtbar ist"
            }
          },
          tooltips: {
            picklayer: "Wert aus dem Layer abrufen",
            lonlat: "Zum Abrufen der Koordinaten auf die Karte klicken"
          },
          input_validation_mutually_exclusive: "Feld schließt sich gegenseitig aus mit ",
          input_validation_error: "Obligatorisches Feld oder falscher Datentyp",
          input_validation_min_field: "Der Wert muss größer/gleich sein als der Feldwert  ",
          input_validation_max_field: "Der Wert muss kleiner/gleich sein als der Feldwert ",
          input_validation_exclude_values: "Wert muss einmalig sein",
          integer: "integer",
          bigint: "integer",
          text: "text",
          varchar: "text",
          textarea: "text",
          string: "string",
          date: "date",
          datetime: "date",
          float: "float",
          table: "table"
        },
        footer: {
          "required_fields": "Erforderliche Felder"
        },
        messages: {
          qgis_input_widget_relation: "Spezifisches Relations-Formular verwenden, um mit Relationen zu arbeiten"
        }
      },
      catalog: {
        current_map_theme_prefix: "THEMA",
        choose_map_theme: "THEMA AUSWÄHLEN",
        menu: {
          layerposition: 'Position des Layers',
          setwmsopacity: "Opazität einstellen",
          wms: {
            title: "",
            copy: "Klicken Sie hier, um die Url zu kopieren",
            copied: "Kopiert"
          },
          download: {
            unknow: "Herunterladen",
            shp: 'Shapefile herunterladen',
            gpx: 'GPX herunterladen',
            gpkg: 'GPKG herunterladen',
            csv: 'CSV herunterladen',
            xls: 'XLS herunterladen',
            geotiff: "GEOTIFF herunterladen",
            geotiff_map_extent: "GEOTIFF herunterladen (aktueller Ansichtsumfang)"
          }
        }
      },
      wps: {
        list_process: "Liste der Prozesse",
        tooltip: 'Karte anklicken'
      }
    },
    credits: {
      g3wSuiteFramework: "Applikation basiert auf OS-Framework",
      g3wSuiteDescription: "Veröffentlichen und verwalten Sie Ihre QGIS-Projekte im Internet",
      productOf: "Framework entwickelt von"
    },
    toggle_color_scheme: "Farbschema umschalten",
    logout: "Logout",
    no_other_projects: "Kein weiteres Projekt für diese Gruppe",
    no_other_groups: "Keine weiteren Gruppen für diese Makrogruppe",
    yes: "Ja",
    no: "No",
    back: "Zurück",
    backto: "Zurück zu ",
    changemap: "Karte ändern",
    change_session: "Sitzung ändern",
    component: "Allgemeine Komponente",
    search: "Suche",
    no_results: "Keine Ergebnisse gefunden",
    print: "Drucken",
    create_print: "Drucken erstellen",
    dosearch: "Suche",
    catalog: "Karte",
    data: "Daten",
    externalwms: "WMS",
    baselayers: "Base",
    tools: "Tools",
    tree: "Layers",
    legend: "Legende",
    nobaselayer: "Keine Basemap",
    street_search: "Adresse finden",
    show: "Anzeigen",
    hide: "Ausblenden",
    copy_form_data: "Daten kopieren",
    paste_form_data: "Einfügen",
    copy_form_data_from_feature: "Daten von der Karte kopieren",
    error_map_loading: "Fehler beim Laden der Karte",
    check_internet_connection_or_server_admin: "Internetverbindung prüfen oder Admin kontaktieren",
    could_not_load_vector_layers: "Verbindungsfehler: Layers können geladen werden",
    server_saver_error: "Fehler beim Speichern auf dem Server",
    server_error: "Server-Verbindungsfehler",
    save: "Speichern",
    cancel: "Abbrechen",
    close: "Schließen",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Diese Meldung nicht mehr anzeigen",
    enlange_reduce: "Vergrößern / Verkleinern",
    reset_default: "Standardgröße",
    add: "Hinzufügen",
    exitnosave: "Beenden ohne Speichern",
    annul: "Abbrechen",
    layer_is_added: "Layer mit gleichem Namen bereits hinzugefügt",
    sidebar: {
      wms: {
        panel: {
          title: 'WMS Layer hinzufügen',
          label: {
            position: "Kartenposition",
            name: "Name",
            projections: 'Projektion',
            layers: 'Layers'
          }
        },
        add_wms_layer: "WMS Layer hinzufügen",
        delete_wms_url: "WMS Url löschen",
        layer_id_already_added: "WMS Layer bereits hinzugefügt",
        url_already_added: "WMS URL/Name bereits hinzugefügt",
        layer_add_error: "WMS Layer nicht hinzugefügt. Bitte überprüfen Sie alle WMS-Parameter oder Url"
      }
    },
    info: {
      title: "Ergebnisse",
      list_of_relations: "List of Relations",
      open_link: "Beigefügtes Dokument öffnen",
      server_error: "Auf dem Server ist ein Fehler aufgetreten",
      no_results: "Keine Ergebnisse für diese Anfrage/Suche gefunden",
      link_button: "Öffnen"
    },
    mapcontrols: {
      geolocations: {
        error: "Position kann nicht bestimmt werden"
      },
      geocoding: {
        choose_layer: "Wählen Sie eine Ebene aus, auf der Sie diese Funktion hinzufügen möchten",
        placeholder: "Addresse ...",
        nolayers: "Für dieses Projekt wurden keine bearbeitbaren Punktebenen gefunden",
        noresults: "Keine Ergebnisse",
        notresponseserver: "Keine Antwort vom Server"
      },
      add_layer_control: {
        header: "Layer hinzufügen",
        select_projection: "Layer Projektion auswählen",
        select_field_to_show: "Feld auswählen, das auf der Karte angezeigt werden soll",
        select_csv_separator: "Begrenzer auswählen",
        select_csv_x_field: "X-Feld auswählen",
        select_csv_y_field: "Y-Feld auswählen",
        select_color: "Layer Farbe auswählen",
        drag_layer: "Layer hierher ziehen und ablegen"
      },
      query: {
        input_relation: "Klicken, um Relationen anzuzeigen"
      },
      length: {
        tooltip: "Länge"
      },
      area: {
        tooltip: "Area"
      },
      screenshot: {
        error: "Screenshot Fehlererstellung",
        securityError: "  \n        <p><b>Sicherheitsfehler</b>: Eine externe Ebene verhindert, dass die Karte gedruckt wird. Gehen Sie zur \xDCberpr\xFCfung wie folgt vor:</p>\n        <ol>\n          <li>Entfernen Sie alle manuell hinzugef\xFCgten externen Ebenen (z. B. WMS-Ebenen)</li>\n          <li>Neuladen der Seite erzwingen: <code>STRG + F5</code></li>\n          <li>Drucken Sie die Karte erneut</li>\n        </ol>\n        <p>F\xFCr weitere Informationen wenden Sie sich bitte an den Serveradministrator zu: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font -weight: fett;\">&#x2139;&#xFE0F; Sicherheit und befleckte Leinw\xE4nde</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Klicken Sie mit der rechten Maustaste auf einen einzelnen Layer, um auf zusätzliche Funktionen zuzugreifen",
      contextmenu: {
        zoomtolayer: "Zoom auf Layer",
        open_attribute_table: "Attributtabelle öffnen",
        show_metadata: "Metadaten",
        styles: 'Stile',
        vector_color_menu: "Farbe einstellen/ändern",
        layer_opacity: "Opazität",
        filters: "Filters"
      }
    },
    dataTable: {
      previous: "Vorherige",
      next: "Weiter",
      lengthMenu: "_MENÜ_ anzeigen",
      info: "Anzeige von _START_ bis _END_ der _TOTAL_ Einträge",
      no_data: "Keine Daten",
      nodatafilterd: "Keine passenden Datensätze gefunden",
      infoFiltered: "(gefiltert aus _MAX_ Gesamtsätzen)"
    }
  }
};

},{}],289:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Connection error",
      at_moment: "At the moment is not possible show map",
      f5: "Press Ctrl+F5"
    },
    cookie_law: {
      message: "This website uses cookies to ensure you get the best experience on our website.",
      buttonText: "Got It!"
    },
    default: "default",
    sign_in: "Sign in",
    layer_selection_filter: {
      tools: {
        filter: "Enable/Disable filter",
        nofilter: "Remove Filter",
        invert: "Invert Selection",
        clear: "Clear Selection",
        show_features_on_map: "Show features visible on map",
        savefilter: "Save Filter",
        filterName: "Filter Name"
      }
    },
    warning: {
      not_supported_format: "Not supported format"
    },
    layer_position: {
      top: 'TOP',
      bottom: 'BOTTOM',
      message: "Position relative to layers on TOC"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Select Template"
        }
      },
      spatialbookmarks: {
        title: "Spatial Bookmarks",
        helptext: "Move on map extent, insert name and click Add",
        input: {
          name: "Name"
        },
        sections: {
          project: {
            title: "Project Bookmarks"
          },
          user: {
            title: "User Bookmarks"
          }
        }
      },
      search: {
        all: 'ALL',
        no_results: "No results",
        searching: "Searching ...",
        error_loading: "Error Loading Data",
        layer_not_searchable: "Layer is not searchable",
        layer_not_querable: "Layer is not querable",
        autocomplete: {
          inputshort: {
            pre: "Please enter",
            post: "or more characters"
          }
        }
      },
      print: {
        no_layers: 'No Layer to print',
        template: "Template",
        labels: "Labels",
        scale: "Scale",
        format: "Format",
        rotation: "Rotation",
        download_image: "Download Image",
        fids_instruction: "Values accepted: from 1 to value of [max]. Is possible to insert a range ex. 4-6",
        fids_example: "Ex. 1,4-6 will be printed id 1,4,5,6",
        help: "The layers shown in the print could be those defined on the project and not those displayed on the map"
      },
      querybuilder: {
        search: {
          run: "Run",
          info: "Information",
          delete: "Delete",
          edit: "Edit"
        },
        messages: {
          changed: 'Saved',
          number_of_features: "Number of features"
        },
        panel: {
          button: {
            all: 'ALL',
            save: 'SAVE',
            test: 'TEST',
            clear: 'CLEAR',
            run: 'RUN',
            manual: 'MANUAL'
          },
          layers: 'LAYERS',
          fields: 'FIELDS',
          values: 'VALUES',
          operators: 'OPERATORS',
          expression: 'EXPRESSION'
        },
        error_run: 'An error occurs. Please check the query',
        error_test: "An error occur during query execution",
        delete: 'Do you want delete it?',
        additem: 'Insert the name of the new search'
      },
      errors: {
        layers: {
          load: "Some layers are not available"
        },
        unsupported_format: 'Not supported format',
        add_external_layer: 'Load layer error'
      },
      metadata: {
        title: 'Metadata',
        groups: {
          general: {
            title: 'GENERAL',
            fields: {
              title: 'TITLE',
              name: 'NAME',
              description: "DESCRIPTION",
              abstract: "ABSTRACT",
              keywords: 'KEYWORDS',
              fees: "FEES",
              accessconstraints: "ACCESS CONSTRAINT",
              contactinformation: "CONTACTS",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "Email",
                  personprimary: 'References',
                  contactvoicetelephone: 'Phone',
                  contactorganization: 'Organization',
                  ContactOrganization: 'Organization',
                  contactposition: 'Position',
                  ContactPosition: 'Position',
                  contactperson: 'Person',
                  ContactPerson: 'Person'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'SPATIAL',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'LAYERS',
            fields: {
              layers: 'LAYERS',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "TITLE",
                name: 'NAME',
                geometrytype: 'GEOMETRY',
                source: 'SOURCE',
                attributes: 'ATTRIBUTES',
                abstract: 'ABSTRACT',
                attribution: 'ATTRIBUTION',
                keywords: "PAROLE CHIAVE",
                metadataurl: 'METADATA URL',
                dataurl: "DATA URL"
              }
            },
            groups: {
              general: 'GENERAL',
              spatial: 'SPATIAL'
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Row View",
          row_to_form: "Form View",
          zoomtogeometry: "Zoom to Geometry"
        },
        copy_map_extent_url: 'Copy map view link',
        download_shapefile: "Download Shapefile",
        download_gpx: "Download GPX",
        download_gpkg: "Download GPKG",
        download_csv: "Download CSV",
        download_xls: "Download XLS",
        show_chart: "Show Chart",
        atlas: "Print Atlas"
      },
      mapcontrols: {
        query: {
          tooltip: 'Query layer',
          actions: {
            add_selection: {
              hint: "Add/Remove Selection"
            },
            zoom_to_features_extent: {
              hint: "Zoom to features extent"
            },
            add_features_to_results: {
              hint: "Add/Remove features to results"
            },
            remove_feature_from_results: {
              hint: "Remove feature from results"
            },
            zoom_to_feature: {
              hint: "Zoom to feature"
            },
            relations: {
              hint: "Show Relations"
            },
            relations_charts: {
              hint: "Show relations chart"
            },
            download_features_shapefile: {
              hint: 'Download features Shapefile'
            },
            download_shapefile: {
              hint: 'Download feature Shapefile'
            },
            download_features_gpx: {
              hint: "Download feature GPX"
            },
            download_features_gpkg: {
              hint: "Download features GPKG"
            },
            download_gpx: {
              hint: "Download feature GPX"
            },
            download_gpkg: {
              hint: "Download feature GPKG"
            },
            download_features_csv: {
              hint: "Download features CSV"
            },
            download_csv: {
              hint: "Download feature CSV"
            },
            download_features_xls: {
              hint: "Download features XLS"
            },
            download_xls: {
              hint: "Download feature XLS"
            },
            atlas: {
              hint: "Print Atlas"
            },
            copy_zoom_to_fid_url: {
              hint: "Copy map URL with this geometry feature extension",
              hint_change: "Copied"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Attributes download",
            choiches: {
              feature: {
                label: "Features only"
              },
              feature_polygon: {
                label: "Features+Query Polygon"
              }
            }
          },
          tooltip: 'Query By Polygon',
          no_geometry: 'No geometry on response',
          help: {
            title: 'Guide - Query By Polygon',
            message: "\n                <ul>\n                  <li>Select a polygon layer on TOC.</li>\n                  <li>Be sure that layer is visible.</li>\n                  <li>Click on a feature of selected layer.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Query by Draw Polygon "
        },
        querybybbox: {
          tooltip: 'Query BBox layer',
          nolayers_visible: 'No querable layers are visible. Please set at least one visible wfs layer to run query',
          help: {
            title: 'Guide - Query BBox layer',
            message: "\n                  <ul>\n                  <li>Draw a square on map to query underlined layers on TOC</li>\n                  </ul>"
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "The result in the map is partial due to the presence of the below incorrect records list:"
            }
          },
          tooltip: 'Add Layer'
        },
        geolocation: {
          tooltip: 'Geolocation'
        },
        measures: {
          length: {
            tooltip: "Length",
            help: "Click on map to draw the line. Press <br>CANC if you want delete last vertex"
          },
          area: {
            tooltip: "Area",
            help: "Click to draw poligon.Press <br>CANC if you want delete last vertex"
          }
        },
        scale: {
          no_valid_scale: "Invalid Scale"
        },
        scaleline: {
          units: {
            metric: 'Meters',
            nautical: 'Nautical Mile'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Last",
          zoom_next: "Zoom Next"
        }
      },
      relations: {
        relation_data: 'Relation data',
        no_relations_found: 'No relations found',
        back_to_relations: 'Back to relations',
        list_of_relations_feature: 'List of relations of feature',
        error_missing_father_field: "Field is missing"
      },
      form: {
        loading: 'Loading ...',
        inputs: {
          messages: {
            errors: {
              picklayer: "No feature selected. Check if layer is on editing or visible at current scale"
            }
          },
          tooltips: {
            picklayer: "Get value from ma layer",
            lonlat: "Click on map to get coordinates"
          },
          input_validation_mutually_exclusive: "Field mutually exclusive with ",
          input_validation_error: "Mandatory Field or wrong data type",
          input_validation_min_field: "Value has to be more/equal to field value  ",
          input_validation_max_field: "Value has to be less/equal to field value ",
          input_validation_exclude_values: "Value has to be unique",
          integer: "integer",
          bigint: "integer",
          text: "text",
          varchar: "text",
          textarea: "text",
          string: "string",
          date: "date",
          datetime: "date",
          float: "float",
          table: "table"
        },
        footer: {
          "required_fields": "Required fields"
        },
        messages: {
          qgis_input_widget_relation: "Use relation specific form to work with relation"
        }
      },
      catalog: {
        current_map_theme_prefix: "THEME",
        choose_map_theme: "CHOOSE THEME",
        menu: {
          layerposition: 'Layer Position',
          setwmsopacity: "Set Opacity",
          wms: {
            title: "",
            copy: "Click here to copy url",
            copied: "Copied"
          },
          download: {
            unknow: 'Download',
            shp: 'Download Shapefile',
            gpx: 'Download GPX',
            gpkg: 'Download GPKG',
            csv: 'Download CSV',
            xls: 'Download XLS',
            geotiff: "Download GEOTIFF",
            geotiff_map_extent: "Download GEOTIFF(current view extent)"
          }
        }
      },
      wps: {
        list_process: "List of process",
        tooltip: 'Click on map'
      }
    },
    credits: {
      g3wSuiteFramework: "Application based on OS framework",
      g3wSuiteDescription: "Publish and manage your QGIS projects on the web",
      productOf: "Framework developed by"
    },
    toggle_color_scheme: "Toggle color scheme",
    logout: "Logout",
    no_other_projects: "No more project for this group",
    no_other_groups: "No more groups for this Macrogroup",
    yes: "Yes",
    no: "No",
    back: "Back",
    backto: "Back to ",
    changemap: "Change Map",
    change_session: "Change Session",
    component: "Generic Component",
    search: "Search",
    no_results: "No results found",
    print: "Print",
    create_print: "Create Print",
    dosearch: "Search",
    catalog: "Map",
    data: "Data",
    externalwms: "WMS",
    baselayers: "Base",
    tools: "Tools",
    tree: "Layers",
    legend: "Legend",
    nobaselayer: "No basemap",
    street_search: "Find Address",
    show: "Show",
    hide: "Hide",
    copy_form_data: "Copy data",
    paste_form_data: "Paste",
    copy_form_data_from_feature: "Copy data from map",
    error_map_loading: "Error occurs loading map",
    check_internet_connection_or_server_admin: "Check internet connection or contact admin",
    could_not_load_vector_layers: "Connection error: Layers can be loaded",
    server_saver_error: "Error in server saving",
    server_error: "Server connection error",
    save: "Save",
    cancel: "Cancel",
    close: "Close",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Don't show again",
    enlange_reduce: "Enlarge / Reduce",
    reset_default: "Default size",
    add: "Add",
    exitnosave: "Exit without save",
    annul: "Cancel",
    layer_is_added: "Layer with same name already added",
    sidebar: {
      wms: {
        panel: {
          title: 'Add WMS Layer',
          label: {
            position: "Map Position",
            name: "Name",
            projections: 'Projection',
            layers: 'Layers'
          }
        },
        add_wms_layer: "Add WMS layer",
        delete_wms_url: "Delete WMS url",
        layer_id_already_added: "WMS Layer already added",
        url_already_added: "WMS URL/Name already added",
        layer_add_error: "WMS Layer not added. Please check all wms parameter or url"
      }
    },
    info: {
      title: "Results",
      list_of_relations: "List of Relations",
      open_link: "Open attached document",
      server_error: "An error occurred from server",
      no_results: "No results found for this query/search",
      link_button: "Open"
    },
    mapcontrols: {
      geolocations: {
        error: "Can't get your position"
      },
      geocoding: {
        choose_layer: "Choose a layer where to add this feature",
        placeholder: "Address ...",
        nolayers: "No editable point layers found on this project",
        noresults: "No results",
        notresponseserver: "No response from server"
      },
      add_layer_control: {
        header: "Add Layer",
        select_projection: "Select layer projection",
        select_field_to_show: "Select Field to show on map",
        select_csv_separator: "Select delimiter",
        select_csv_x_field: "Select X field",
        select_csv_y_field: "Select Y field",
        select_color: "Select Layer Color",
        drag_layer: "Drag and drop layer here"
      },
      query: {
        input_relation: "Click to show relations"
      },
      length: {
        tooltip: "Length"
      },
      area: {
        tooltip: "Area"
      },
      screenshot: {
        error: "Screenshot error creation",
        securityError: "  \n        <p><b>Security Error</b>: an external layer is preventing map from being printed. To check, proceed as follows:</p>\n        <ol>\n          <li>remove any manually added external layers (eg. WMS layers)</li>\n          <li>force page reload: <code>CTRL + F5</code></li>\n          <li>print again the map</li>\n        </ol>\n        <p>For more info please contact server administrator about: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font-weight: bold;\">&#x2139;&#xFE0F; security and tainted canvases</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Right-click on individual layer to access additional features",
      contextmenu: {
        zoomtolayer: "Zoom to Layer",
        open_attribute_table: "Open Attribute Table",
        show_metadata: "Metadata",
        styles: 'Styles',
        vector_color_menu: "Set/Change Color",
        layer_opacity: "Opacity",
        filters: "Filters"
      }
    },
    dataTable: {
      previous: "Previous",
      next: "Next",
      lengthMenu: "Show _MENU_",
      info: "Showing _START_ to _END_ of _TOTAL_ entries",
      no_data: "No data",
      nodatafilterd: "No matching records found",
      infoFiltered: "(filtered from _MAX_ total records)"
    }
  }
};

},{}],290:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Yhteysvirhe",
      at_moment: "Tällä hetkellä ei ole mahdollista näyttää karttaa",
      f5: "Paina Ctrl+F5"
    },
    cookie_law: {
      message: "This website uses cookies to ensure you get the best experience on our website.",
      buttonText: "Got It!"
    },
    default: "oletuksena",
    sign_in: "Kirjaudu sisään",
    layer_selection_filter: {
      tools: {
        filter: "Ota suodatin käyttöön/poista käytöstä",
        nofilter: "Poista Suodattaa",
        invert: "Käänteinen Valinta",
        clear: "Peruuttaa Valinta",
        show_features_on_map: "Näytä kartalla näkyvät ominaisuudet",
        savefilter: "Tallenna suodatin",
        filterName: "Suodattimen Nimi"
      }
    },
    warning: {
      not_supported_format: "Not supported format"
    },
    layer_position: {
      top: 'TOP',
      bottom: 'BOTTOM',
      message: "Position relative to layers on TOC"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Valitse Template"
        }
      },
      spatialbookmarks: {
        title: "Tilalliset kirjanmerkit",
        helptext: "Siirry kartan laajuuteen, lisää nimi ja napsauta Lisää",
        input: {
          name: "Nimi"
        },
        sections: {
          project: {
            title: "Projektin kirjanmerkit"
          },
          user: {
            title: "Käyttäjän kirjanmerkit"
          }
        }
      },
      search: {
        all: 'KAIKKI',
        no_results: "Ei tuloksia",
        searching: "Haetaan ...",
        error_loading: "Virhe ladattaessa tietoja.",
        layer_not_searchable: "Taso ei ole haettavissa.",
        layer_not_querable: "Tasolle ei voi suorittaa kyselyitä.",
        autocomplete: {
          inputshort: {
            pre: "Syötä",
            post: "tai useampi merkki"
          }
        }
      },
      print: {
        no_layers: 'Ei tulostettavia tasoja',
        template: "Template",
        labels: "Labels",
        scale: "Mittakaava",
        format: "Formaatti",
        rotation: "Kierto",
        download_image: "Lataa kuva",
        fids_instruction: "Hyväksytyt arvot: yhdestä arvoon [max]. Salittua syöttää myös väli, esim. 4-6.",
        fids_example: "Esimerkiksi 1,4-6 tulostuu id 1,4,5,6.",
        help: "Tulosteessa esiintyvät tasot voivat olla projektissa määriteltyjä ei kartalla esiintyviä."
      },
      querybuilder: {
        search: {
          run: "Suorita",
          info: "Informaatio",
          delete: "Poista",
          edit: "Muokkaa"
        },
        messages: {
          changed: 'Tallennettu',
          number_of_features: "Ominaisuuksien lukumäärä"
        },
        panel: {
          button: {
            all: 'KAIKKI',
            save: 'TALLENNA',
            test: 'TESTI',
            clear: 'TYHJENNÄ',
            run: 'SUORITA',
            manual: 'MANUAALINEN'
          },
          layers: 'TASOT',
          fields: 'KENTÄT',
          values: 'ARVOT',
          operators: 'OPERAATTORIT',
          expression: 'LAUSEKE'
        },
        error_run: 'Tapahtui virhe. Tarkista kysely.',
        error_test: "Kyselyä suorittaessa tapahtui virhe.",
        delete: 'Haluatko poistaa sen?',
        additem: 'Anna nimi uudelle haulle.'
      },
      errors: {
        layers: {
          load: "Jotkin tasot eivät ole saatavilla."
        },
        unsupported_format: 'Ei tuettu formaatti',
        add_external_layer: 'Tason latausvirhe'
      },
      metadata: {
        title: 'Metatiedot',
        groups: {
          general: {
            title: 'YLEINEN',
            fields: {
              title: 'OTSIKKO',
              name: 'NIMI',
              description: "KUVAUS",
              abstract: "TIIVISTELMÄ",
              keywords: 'AVAINSANAT',
              fees: "MAKSUT",
              accessconstraints: "PÄÄSYRAJOITUKSET",
              contactinformation: "YHTEYSTIEDOT",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "Sähköposti",
                  personprimary: 'Viitteet',
                  contactvoicetelephone: 'Puhelin',
                  contactorganization: 'Organisaatio',
                  ContactOrganization: 'Organisaatio',
                  contactposition: 'Asema',
                  ContactPosition: 'Asema',
                  contactperson: 'Yhteyshenkilö',
                  ContactPerson: 'Yhteyshenkilö'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'SPATIAL',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'TASOT',
            fields: {
              layers: 'TASOT',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "OTSIKKO",
                name: 'NIMI',
                geometrytype: 'GEOMETRIA',
                source: 'LÄHDE',
                attributes: 'ATTRIBUUTIT',
                abstract: 'TIIVISTELMÄ',
                attribution: 'ATTRIBUUTIO',
                keywords: "AVAINSANAT",
                metadataurl: 'METATIEDON URL',
                dataurl: "DATA URL"
              }
            },
            groups: {
              general: 'YLEINEN',
              spatial: 'SPATIAL'
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Rivinäkymä",
          row_to_form: "Taulukkonäkymä",
          zoomtogeometry: "Zoomaa geometriaan"
        },
        copy_map_extent_url: 'Kopioi kartan katselulinkki',
        download_shapefile: "Lataa SHP-tiedosto",
        download_gpx: "Lataa GPX-tiedosto",
        download_gpkg: "Lataa GPKG-tiedosto",
        download_csv: "Lataa CSV-tiedosto",
        download_xls: "Lataa XLS-tiedosto",
        show_chart: "Näytä kaavio",
        atlas: "Tulosta Atlas"
      },
      mapcontrols: {
        query: {
          tooltip: 'Kyselytaso',
          actions: {
            add_selection: {
              hint: 'Lisää/Poista valinta'
            },
            zoom_to_features_extent: {
              hint: "Tarkenna ominaisuuden laajuuteen"
            },
            add_features_to_results: {
              hint: "Add/Remove features to results"
            },
            remove_feature_from_results: {
              hint: "Remove feature from results"
            },
            zoom_to_feature: {
              hint: "Tarkenna ominaisuuteen"
            },
            relations: {
              hint: "Näytä relaatiot"
            },
            relations_charts: {
              hint: "Näytä relaatiokaavio"
            },
            download_features_shapefile: {
              hint: 'Lataa ominaisuuden SHP-tiedosto'
            },
            download_shapefile: {
              hint: 'Lataa ominaisuuden SHP-tiedosto'
            },
            download_features_gpx: {
              hint: "Lataa ominaisuuden GPX-tiedosto"
            },
            download_features_gpkg: {
              hint: "Lataa ominaisuuden GPKG-tiedosto"
            },
            download_gpx: {
              hint: "Lataa ominaisuuden GPX-tiedosto"
            },
            download_gpkg: {
              hint: "Lataa ominaisuuden GPKG-tiedosto"
            },
            download_features_csv: {
              hint: "Lataa ominaisuuden CSV-tiedosto"
            },
            download_csv: {
              hint: "Lataa ominaisuuden CSV-tiedosto"
            },
            download_features_xls: {
              hint: "Lataa ominaisuuden XLS-tiedosto"
            },
            download_xls: {
              hint: "Lataa ominaisuuden XLS-tiedosto"
            },
            atlas: {
              hint: "Tulosta Atlas"
            },
            copy_zoom_to_fid_url: {
              hint: "Copy map URL with this geometry feature extension",
              hint_change: "Copied"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Attributes download",
            choiches: {
              feature: {
                label: "Features only"
              },
              feature_polygon: {
                label: "Features+Query Polygon"
              }
            }
          },
          tooltip: 'Kysely monikulmiolla',
          no_geometry: 'No geometry on response',
          help: {
            title: 'Ohje - Kysely monikulmiolla',
            message: "\n                <ul>\n                  <li>Valitse monikulmiotaso luettelosta.</li>\n                  <li>Tarkista, ett\xE4 taso on n\xE4kyvill\xE4.</li>\n                  <li>Valitse ominaisuus valitulla tasolla.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Kysely piirtopolygonin mukaan"
        },
        querybybbox: {
          tooltip: 'Tasoon kohdituva BBox-kysely',
          nolayers_visible: 'Ei kyseltäviä tasoja näkyvillä. Aseta vähintään yksi WFS-taso näkyväksi suorittaaksesi haun.',
          help: {
            title: 'Ohje - Tasoon kohdistuva BBox-kysely',
            message: "\n                 <ul>\n                  <li>Piirr\xE4 suorakulmio kartalle suorittaaksesi kyselyn luettelossa alleviivatuille tasoille.</li>\n                 </ul>"
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "The result in the map is partial due to the presence of the below incorrect records list:"
            }
          },
          tooltip: 'Lisää taso'
        },
        geolocation: {
          tooltip: 'Maantieteellinen sijainti'
        },
        measures: {
          length: {
            tooltip: "Pituus",
            help: "Piirrä murtoviiva kartalle. Paina <br>CANC, mikäli haluat poistaa edellisen pisteen."
          },
          area: {
            tooltip: "Alue",
            help: "Piirrä monikulmio kartalle. Paina <br>CANC, mikäli haluat poistaa edellisen pisteen."
          }
        },
        scale: {
          no_valid_scale: "Väärä mittakaava"
        },
        scaleline: {
          units: {
            metric: 'Meters',
            nautical: 'Nautical Mile'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Edellinen",
          zoom_next: "Zoom Seurata"
        }
      },
      relations: {
        relation_data: 'Relaation tiedot',
        no_relations_found: 'Relaatiota ei löytynyt.',
        back_to_relations: 'Takaisin relaatioihin',
        list_of_relations_feature: 'Lista ominaisuuden relaatioista',
        error_missing_father_field: "Kenttä puuttu"
      },
      form: {
        loading: 'Ladataan...',
        inputs: {
          messages: {
            errors: {
              picklayer: "Ominaisuuksia ei valiitu. Tarkista, että taso on muokattavissa tai näkyvissä nykyisellä mittakaavalla."
            }
          },
          tooltips: {
            picklayer: "Valitse arvo karttatasolta",
            lonlat: "Click on map to get coordinates"
          },
          input_validation_mutually_exclusive: "Kenttä toisensa poissulkeva.",
          input_validation_error: "Pakollinen kenttä tai väärä tietotyyppi.",
          input_validation_min_field: "Arvon tulee olla suurempi tai yhtäsuuri kuin kentän arvo.",
          input_validation_max_field: "Arvon tulee olla pienempi tai yhtäsuuri kuin kentän arvo.",
          input_validation_exclude_values: "Arvon tulee olla uniikki.",
          integer: "kokonaisluku",
          bigint: "kokonaisluku",
          text: "teksti",
          varchar: "teksti",
          textarea: "teksti",
          string: "merkkijono",
          date: "päiväys",
          datetime: "päiväys",
          float: "liukuluku",
          table: "taulukko"
        },
        footer: {
          "required_fields": "Vaaditut kentät"
        },
        messages: {
          qgis_input_widget_relation: "Käytä relaatioiden määrittämiseen tähän tarkoitettua toimintoa"
        }
      },
      catalog: {
        current_map_theme_prefix: "THEME",
        choose_map_theme: "CHOOSE THEME",
        menu: {
          layerposition: 'Layer Position',
          setwmsopacity: "Set Opacity",
          wms: {
            title: "",
            copy: "Paina tästä kopioidaksesi url:n.",
            copied: "Kopioitu."
          },
          download: {
            unknow: "Lataa",
            shp: 'Lataa SHP-tiedosto',
            gpx: 'Lataa GPX-tiedosto',
            gpkg: 'Lataa GPKG-tiedosto',
            csv: 'Lataa CSV-tiedosto',
            xls: 'Lataa XLS-tiedosto',
            geotiff: 'Lataa GEOTIFF-tiedosto',
            geotiff_map_extent: "Lataa GEOTIFF-tiedosto(current view extent)"
          }
        }
      },
      wps: {
        list_process: "Lista prosesseista",
        tooltip: 'Valitse kartalta'
      }
    },
    credits: {
      g3wSuiteFramework: "Sovellus perustuu OS framework",
      g3wSuiteDescription: "Julkaise ja hallinnoi QGIS-projekteja verkossa.",
      productOf: "Frameworkin on kehittänyt"
    },
    toggle_color_scheme: "Toggle color scheme",
    logout: "Kirjaudu ulos",
    no_other_projects: "Ei projekteja tälle ryhmälle",
    no_other_groups: "Ei enää ryhmiä tälle makroryhmälle",
    yes: "Kyllä",
    no: "Ei",
    back: "Palaa",
    backto: "Takaisin ",
    changemap: "Vaihda karttaa",
    change_session: "Vaihda istuntoa",
    component: "Yleinen komponentti",
    search: "Hae",
    no_results: "Ei hakutuloksia",
    print: "Tulosta",
    create_print: "Luo tuloste",
    dosearch: "Hae",
    catalog: "Kartta",
    data: "Data",
    externalwms: "WMS",
    baselayers: "Taustakartta",
    tools: "Työkalut",
    tree: "Tasot",
    legend: "Merkintöjen selite",
    nobaselayer: "Ei taustakarttaa",
    street_search: "Hae osoite",
    show: "Näytä",
    hide: "Piilota",
    copy_form_data: "Kopioi tiedot",
    paste_form_data: "Liitä",
    copy_form_data_from_feature: "Kopioi tiedot kartalta",
    error_map_loading: "Virhe ladattessa karttaa",
    check_internet_connection_or_server_admin: "Tarkista internetyhteys tai ota yhteyttä ylläpitäjään.",
    could_not_load_vector_layers: "Yhteysvirhe, tasoja ei voida ladata.",
    server_saver_error: "Virhe tallentaessa palvelimelle.",
    server_error: "Yhteysvirhe palvelimeen",
    save: "Tallenna",
    cancel: "Peruuta",
    close: "Sulje",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Älä näytä viestiä uudelleen",
    enlange_reduce: "Suurenna / Pienennä",
    reset_default: "Oletuskoko",
    add: "Lisää",
    exitnosave: "Poistu tallentamatta",
    annul: "Peruuta",
    layer_is_added: "Samanniminen taso on jo lisätty.",
    sidebar: {
      wms: {
        panel: {
          title: 'Add WMS Layer',
          label: {
            position: "Map Position",
            name: "Name",
            projections: 'Projection',
            layers: 'Layers'
          }
        },
        add_wms_layer: "Aggiungi WMS layer",
        delete_wms_url: "Delete WMS url",
        layer_id_already_added: "WMS Taso on jo lisätty.",
        url_already_added: "WMS URL/Nimi on jo lisätty.",
        layer_add_error: "WMS Layer not added. Please check all wms parameter or url"
      }
    },
    info: {
      title: "Tulokset",
      list_of_relations: "List of Relations",
      open_link: "Avaa liitetiedosto",
      server_error: "Palvelimella tapahtui virhe.",
      no_results: "Ei tuloksia haulle/kyselylle.",
      link_button: "Avaa"
    },
    mapcontrols: {
      geolocations: {
        error: "Sijaintiasi ei saada"
      },
      geocoding: {
        choose_layer: "Valitse kerros, johon tämä ominaisuus lisätään",
        placeholder: "Osoite ...",
        nolayers: "Tästä projektista ei löytynyt muokattavia pistetasoja",
        noresults: "Ei tuloksia",
        notresponseserver: "Ei vastausta palvelimelta"
      },
      add_layer_control: {
        header: "Lisää taso",
        select_projection: "Valitse tason projektio",
        select_field_to_show: "Select Field to show on map",
        select_csv_separator: "Select delimiter",
        select_csv_x_field: "Select X field",
        select_csv_y_field: "Select Y field",
        select_color: "Valitse tason väri",
        drag_layer: "Vedä ja pudota taso tähän"
      },
      query: {
        input_relation: "Paina näyttääksesi relaatiot"
      },
      length: {
        tooltip: "Pituus"
      },
      area: {
        tooltip: "Pinta-ala"
      },
      screenshot: {
        error: "Screenshot error creation",
        securityError: "  \n        <p><b>Turvallisuusvirhe</b>: ulkoinen kerros est\xE4\xE4 karttaa tulostamasta. Tarkistaaksesi, toimi seuraavasti:</p>\n        <ol>\n          <li>poista manuaalisesti lis\xE4tyt ulkoiset tasot (esim. WMS-tasot)</li>\n          <li>Pakota sivun uudelleenlataus: <code>CTRL + F5</code></li>\n          <li>tulosta kartta uudelleen</li>\n        </ol>\n        <p>Saat lis\xE4tietoja palvelimen j\xE4rjestelm\xE4nvalvojalta seuraavista aiheista: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font -paino: lihavoitu;\">&#x2139;&#xFE0F; turvallisuus ja likaiset kankaat</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Napsauta hiiren kakkospainikkeella yksittäistä tasoa päästäksesi lisäominaisuuksiin.",
      contextmenu: {
        zoomtolayer: "Tarkenna tasoon",
        open_attribute_table: "Avaa attribuuttitaulu",
        show_metadata: "Metatiedot",
        styles: "Tyylejä",
        vector_color_menu: "Aseta/muuta väriä",
        layer_opacity: "Peittävyys",
        filters: "Filters"
      }
    },
    dataTable: {
      previous: "Edellinen",
      next: "Seuraava",
      lengthMenu: "Show _MENU_ items",
      info: "Showing _START_ to _END_ of _TOTAL_ entries",
      no_data: "Ei tietoja",
      nodatafilterd: "Vastaavia tietueita ei löytynyt",
      infoFiltered: "(filtered from _MAX_ total records)"
    }
  }
};

},{}],291:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Erreur de connexion",
      at_moment: "Pour le moment, il n'est pas possible d'afficher la carte",
      f5: "Appuyez sur Ctrl+F5"
    },
    cookie_law: {
      message: "Ce site utilise des cookies pour assurer une bonne convivialité pour l'utilisateur final.",
      buttonText: "J’ai compris !"
    },
    default: "par défaut ",
    sign_in: "Se connecter ",
    layer_selection_filter: {
      tools: {
        filter: "Activer/Désactiver le filtre",
        nofilter: "Supprimer le filtre ",
        invert: "Sélection inversée ",
        clear: "Effacer la sélection ",
        show_features_on_map: "Afficher les caractéristiques visibles sur la carte",
        savefilter: "Sauver le Filtre",
        filterName: "Nom du Filtre"
      }
    },
    warning: {
      not_supported_format: "Not supported format"
    },
    layer_position: {
      top: 'TOP',
      bottom: 'BOTTOM',
      message: "Position relative to layers on TOC"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Sélectionnez Template"
        }
      },
      spatialbookmarks: {
        title: "Signets spatiaux",
        helptext: "Déplacez-vous sur l'étendue de la carte, insérez le nom et cliquez sur Ajouter",
        input: {
          name: "Nom"
        },
        sections: {
          project: {
            title: "Signets du projet"
          },
          user: {
            title: "Signets de l'utilisateur"
          }
        }
      },
      search: {
        all: 'TOUTES',
        no_results: "Aucune valeur trouvée",
        searching: "Je cherche...",
        error_loading: "Erreur de chargement des valeurs",
        layer_not_searchable: "Le layer n’est pas recherchable",
        layer_not_querable: "Le layer n'est pas interrogeable",
        autocomplete: {
          inputshort: {
            pre: "Tapez au moins",
            post: "caractères"
          }
        }
      },
      print: {
        no_layers: 'Aucune layer visible',
        scale: "Échelle",
        format: "Format",
        rotation: "Rotation",
        download_image: "Télécharger l'image",
        fids_instruction: "Valeurs acceptées : de 1 à la valeur maximale indiquée par [max]. Il est également possible d'indiquer une fourchette de valeurs, par exemple 4-6",
        fids_example: "Par exemple 1,4-6 les ids 1,4,5,6 seront imprimés",
        help: "Les layers montrés dans l'impression peuvent être ceux définis dans le projet et non ceux montrés sur la carte"
      },
      querybuilder: {
        search: {
          run: "Lancer la recherche",
          info: "Information",
          delete: "Supprimer",
          edit: "Editer"
        },
        messages: {
          changed: 'Enregistré correctement',
          number_of_features: "Nombre de fonctionnalités"
        },
        panel: {
          button: {
            all: 'TOUTES',
            save: 'SAUVEGARDER',
            test: 'TESTER',
            clear: 'NETTOYER',
            run: 'EXECUTER',
            manual: 'MANUEL'
          },
          layers: 'LAYERS',
          fields: 'CHAMPS',
          values: 'VALEURS',
          operators: 'OPERATEURS',
          expression: 'EXPRESSION'
        },
        error_run: "Une erreur s'est produite. Vérifiez si la requête est correcte",
        error_test: "Erreur d'exécution de la requête",
        delete: 'Voulez-vous confirmer la suppression ?',
        additem: 'Entrer le nom de la requête'
      },
      errors: {
        layers: {
          load: "Certaines layers du projet ne sont pas disponibles actuellement et n'apparaissent donc pas dans la vue actuelle"
        },
        unsupported_format: 'Format non supporté',
        add_external_layer: 'Erreur lors du chargement du layer'
      },
      metadata: {
        title: "Métadonnées",
        groups: {
          general: {
            title: 'GÉNÉRAL',
            fields: {
              title: 'TITRE',
              name: 'NOM',
              description: "DESCRIPTION",
              abstract: "ABREGE",
              keywords: 'LISTE DE MOTS-CLÉS',
              fees: "DROITS D'INSCRIPTION",
              accessconstraints: "CONTRAINTES D'ACCÈS",
              contactinformation: "CONTACTS",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "E-mail",
                  personprimary: 'Références',
                  contactvoicetelephone: 'Téléphone',
                  contactorganization: 'Organisation',
                  ContactOrganization: 'Organisation',
                  contactposition: 'Localisation',
                  ContactPosition: 'Localisation',
                  contactperson: 'Personne',
                  ContactPerson: 'Personne'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'INFO ESPACE',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'STRATES',
            groups: {
              general: 'GENERALE',
              spatial: 'INFO ESPACE'
            },
            fields: {
              layers: 'STRATES',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "TITRE",
                name: 'NOM',
                geometrytype: 'GÉOMÉTRIE',
                source: 'SOURCE',
                attributes: 'ATTRIBUTES',
                abstract: 'ABRÉGÉ',
                attribution: 'ATTRIBUTION',
                keywords: "MOTS- CLÉS",
                metadataurl: 'URL DE MÉTADONNÉES',
                dataurl: "URL DES DONNÉES"
              }
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Afficher le format de la ligne",
          row_to_form: "Format du formulaire d'affichage",
          zoomtogeometry: "Zoom sur la géométrie"
        },
        zoom_to_features_extent: "Zoom sur les fonctionnalités",
        copy_map_extent_url: 'Copier le lien de visualisation de la carte',
        download_shapefile: "Télécharger le fichier Shapefile",
        download_gpx: "Télécharger GPX",
        download_gpkg: "Télécharger GPKG",
        download_csv: "Télécharger CSV",
        download_xls: "Télécharger XLS",
        show_chart: "Montrer graphique",
        atlas: "Imprimer l'Atlas"
      },
      mapcontrols: {
        query: {
          tooltip: 'Interrogation layer',
          actions: {
            add_selection: {
              hint: "Ajouter/supprimer une sélection"
            },
            zoom_to_features_extent: {
              hint: "Zoom sur les fonctionnalités"
            },
            add_features_to_results: {
              hint: "Ajouter des fonctionnalités aux résultats"
            },
            remove_feature_from_results: {
              hint: "Supprimer la fonctionnalité des résultats"
            },
            zoom_to_feature: {
              hint: "Zoom sur les fonctionnalités"
            },
            relations: {
              hint: "Voir les relations"
            },
            relations_charts: {
              hint: "Voir les graphiques de relations"
            },
            download_features_shapefile: {
              hint: 'Télécharger les fonctionnalités vers Shapefile'
            },
            download_shapefile: {
              hint: 'Télécharger le Shapefile'
            },
            download_features_gpx: {
              hint: "Télécharger les fonctionnalités vers GPX"
            },
            download_features_gpkg: {
              hint: "Télécharger les fonctionnalités vers GPKG"
            },
            download_gpx: {
              hint: "Télécharger le GPX"
            },
            download_gpkg: {
              hint: "Télécharger le GPKG"
            },
            download_features_csv: {
              hint: "Télécharger les fonctionnalités vers CSV"
            },
            download_csv: {
              hint: "Télécharger le CSV"
            },
            download_features_xls: {
              hint: "Télécharger les fonctionnalités vers XLS"
            },
            download_xls: {
              hint: "Télécharger le XLS"
            },
            atlas: {
              hint: "Imprimer l'Atlas"
            },
            copy_zoom_to_fid_url: {
              hint: "Copier l'URL de la carte avec l'extension vers cette géométrie",
              hint_change: "Copié"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Téléchargement des attributs",
            choiches: {
              feature: {
                label: "Fonctionnalités seulement"
              },
              feature_polygon: {
                label: "Fonctionnalités+Requête Polygon "
              }
            }
          },
          tooltip: 'Requête par polygone',
          no_geometry: 'La réponse ne contient pas de géométrie',
          help: {
            title: 'Aide - Requête par polygone',
            message: "\n                <ul>\n                  <li>S\xE9lectionnez un layer de polygone dans la l\xE9gende.</li>\n                  <li>V\xE9rifiez que le layer est visible dans la carte.</li>\n                  <li>Cliquez sur une g\xE9om\xE9trie du layer s\xE9lectionn\xE9.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Requête par polygone de dessin"
        },
        querybybbox: {
          tooltip: 'Requête pour BBOX',
          nolayers_visible: "Aucun layer requêtable n'est visible. Assurez-vous qu'au moins un layer wfs est visible pour exécuter la requête",
          help: {
            title: 'Aide - Requête BBox',
            message: "\n                  <ul>\n                    <li>Dessinez un rectangle pour interroger les couches surlign\xE9es en jaune</li>\n                 </ul>\n            "
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "Le résultat de la carte est partiel en raison de la présence des enregistrements incorrects suivants :"
            }
          },
          tooltip: 'Ajouter un layer'
        },
        geolocation: {
          tooltip: 'Géolocalisation'
        },
        measures: {
          length: {
            tooltip: "Longueur",
            help: "Cliquez sur la carte pour continuer à dessiner la ligne.<br>CANC si vous voulez supprimer le dernier vertex inséré"
          },
          area: {
            tooltip: "Zone",
            help: "Cliquez pour continuer à dessiner le polygone.<br>CANC si vous voulez supprimer le dernier vertex inséré"
          }
        },
        scale: {
          no_valid_scale: "Échelle invalide"
        },
        scaleline: {
          units: {
            metric: 'Meters',
            nautical: 'Nautical Mile'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Précédent",
          zoom_next: "Zoom Suivant"
        }
      },
      relations: {
        relation_data: 'Données relationnelles',
        no_relations_found: 'Aucune relation trouvée',
        back_to_relations: 'Retour aux relations',
        list_of_relations_feature: 'Liste des relations entre les caractéristiques',
        error_missing_father_field: "Le champ concerné n'existe pas"
      },
      form: {
        loading: 'Chargement...',
        inputs: {
          messages: {
            errors: {
              picklayer: "Aucune fonction sélectionnée. Vérifier si le layer est en édition ou non visible à l'échelle actuelle"
            }
          },
          tooltips: {
            picklayer: "Obtenir la valeur de la carte",
            lonlat: "Cliquez sur la carte pour obtenir les coordonnées"
          },
          input_validation_mutually_exclusive: "Champ mutuellement exclusif avec ",
          input_validation_error: "Champ obligatoire ou type de valeur incorrect",
          input_validation_min_field: "La valeur doit être supérieure ou égale au camp ",
          input_validation_max_field: "La valeur doit être inférieure ou égale au champ ",
          input_validation_exclude_values: "Le champ doit contenir une valeur différente",
          integer: "entier",
          bigint: "entier",
          text: "textuel",
          varchar: "textuel",
          textarea: "textuel",
          string: "chaîne",
          date: "date",
          datetime: "date",
          float: "float",
          table: "table"
        },
        footer: {
          required_fields: "Champs obligatoires"
        },
        messages: {
          qgis_input_widget_relation: "Gérer les relations via un formulaire dédié"
        }
      },
      catalog: {
        current_map_theme_prefix: "THEME",
        choose_map_theme: "SÉLECTIONNEZ LE THÈME",
        menu: {
          layerposition: 'Layer Position',
          setwmsopacity: "Set Opacity",
          wms: {
            title: "",
            copy: "Cliquez ici pour copier l'url",
            copied: "Copié"
          },
          download: {
            unknow: 'Télécharger',
            shp: 'Télécharger Shapefile',
            gpx: 'Télécharger GPX',
            gpkg: 'Télécharger GPKG',
            csv: 'Télécharger CSV',
            xls: 'Télécharger XLS',
            geotiff: 'Télécharger GEOTIFF',
            geotiff_map_extent: "Télécharger GEOTIFF(current view extent)"
          }
        }
      },
      wps: {
        list_process: "Liste des processus",
        tooltip: 'Cliquez sur la carte'
      }
    },
    credits: {
      g3wSuiteFramework: "Application construite avec le framework OS",
      g3wSuiteDescription: "Publiez et gérez vos projets QGIS sur le Web",
      productOf: "Framework développé par"
    },
    logout: "Quitter",
    no_other_projects: "Il n'y a pas d'autres projets dans ce groupe de cartes",
    no_other_groups: "Il n'y a pas d'autres groupes dans ce macrogroupe",
    yes: "Oui",
    no: "No",
    back: "Retour",
    backto: "Retour à ",
    changemap: "Changer de carte",
    change_session: "Changer de séance",
    component: "Composant générique",
    search: "Recherches",
    no_results: "Aucun résultat trouvé",
    print: "Imprimer",
    create_print: "Créer une impression",
    dosearch: "Recherche",
    catalog: "Carte",
    data: "Données",
    externalwms: "WMS",
    baselayers: "Bases",
    tools: "Outils",
    tree: "Strates",
    legend: "Légende",
    nobaselayer: "Pas de carte de base",
    street_search: "Adresse de recherche",
    show: "Afficher",
    hide: "Cacher",
    copy_form_data: "Copier les données du formulaire",
    paste_form_data: "Coller",
    copy_form_data_from_feature: "Copier les données de la carte",
    error_map_loading: "Erreur de chargement de la nouvelle carte",
    check_internet_connection_or_server_admin: "Vérifiez la connexion internet ou contactez l'administrateur",
    could_not_load_vector_layers: "Erreur de connexion au serveur : il n'a pas été possible de charger les vecteurs demandés",
    server_saver_error: "Erreur de sauvegarde sur le serveur",
    server_error: "Une erreur s'est produite dans la requête au serveur",
    save: "Sauvegarder",
    cancel: "Supprimer",
    close: "Fermer",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Ne plus afficher ce message",
    enlange_reduce: "Agrandir / Réduire",
    reset_default: "Taille par défaut",
    add: "Ajouter",
    exitnosave: "Quitter sans sauvegarder",
    annul: "Annuler",
    layer_is_added: "Layer avec le même nom déjà ajouté",
    wms_layer_id_already_added: "WMS Layer déjà ajouté",
    wms_url_already_added: "WMS URL déjà ajouté",
    sidebar: {
      wms: {
        panel: {
          title: 'Add WMS Layer',
          label: {
            position: "Map Position",
            name: "Name",
            projections: 'Projection',
            layers: 'Layers'
          }
        },
        add_wms_layer: "Add WMS layer",
        delete_wms_url: "Delete WMS url",
        layer_id_already_added: "WMS Nivån har redan lagts till.",
        url_already_added: "WMS URL/Nom har redan lagts till.",
        layer_add_error: "WMS Layer not added. Please check all wms parameter or url"
      }
    },
    info: {
      title: "Résultats",
      list_of_relations: "List of Relations",
      open_link: "Ouvrir le document joint",
      server_error: "Une erreur s'est produite dans la requête au serveur",
      no_results: "Aucun résultat pour cette requête/recherche",
      link_button: "Ouvrir"
    },
    mapcontrols: {
      geolocations: {
        title: "",
        error: "Votre position ne peut être calculée."
      },
      geocoding: {
        choose_layer: "Choisissez un calque où ajouter cette fonctionnalité",
        placeholder: "Adresse ...",
        nolayers: "Aucune couche de points modifiable trouvée sur ce projet",
        noresults: "Aucun résultat",
        notresponseserver: "Le serveur ne répond pas"
      },
      add_layer_control: {
        header: "Ajouter un layer",
        select_projection: "Sélectionnez le système de projection de couches",
        select_field_to_show: "Sélectionnez le champ à afficher sur la carte",
        select_csv_separator: "Sélectionner le séparateur",
        select_csv_x_field: "Sélectionnez le champ X",
        select_csv_y_field: "Sélectionnez le champ Y",
        select_color: "Sélectionnez la couleur du layer",
        drag_layer: "Faire glisser le layer vers cette zone"
      },
      query: {
        input_relation: "Cliquez pour voir les relations"
      },
      length: {
        tooltip: "Longueur"
      },
      area: {
        tooltip: "Zone"
      },
      screenshot: {
        error: "Erreur de création de la capture d'écran",
        securityError: "  \n        <p><b>Erreur de s\xE9curit\xE9</b> : une couche externe emp\xEAche l'impression de la carte. Pour v\xE9rifier, proc\xE9dez comme suit :</p>\n        <ol>\n          <li>supprimer toutes les couches externes ajout\xE9es manuellement (par exemple, les couches WMS)</li>\n          <li>forcer le rechargement de la page : <code>CTRL + F5</code></li>\n          <li>imprimer \xE0 nouveau la carte</li>\n        </ol>\n        <p>Pour plus d'informations, veuillez contacter l'administrateur du serveur \xE0 propos de : <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font -poids : gras ;\">&#x2139;&#xFE0F; s\xE9curit\xE9 et toiles souill\xE9es</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Cliquez avec le bouton droit de la souris sur les différents layers pour accéder à des fonctionnalités supplémentaires",
      contextmenu: {
        zoomtolayer: "Zoom sur le layer",
        open_attribute_table: "Table d'attributs ouverte",
        show_metadata: "Métadonnées",
        styles: "Styles",
        vector_color_menu: "Définir/changer la couleur",
        layer_opacity: "Opacité",
        filters: "Filters"
      }
    },
    dataTable: {
      previous: "Précédent",
      next: "Suivant",
      lengthMenu: "Afficher _MENU_",
      info: "Afficher _START_ à _END_ sur _TOTAL_ lignes",
      nodatafilterd: "Aucun résultat trouvé",
      infoFiltered: "(Filtré par _MAX_ rangs totaux)"
    }
  }
};

},{}],292:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _it = require('./it');

var _it2 = _interopRequireDefault(_it);

var _en = require('./en');

var _en2 = _interopRequireDefault(_en);

var _fi = require('./fi');

var _fi2 = _interopRequireDefault(_fi);

var _se = require('./se');

var _se2 = _interopRequireDefault(_se);

var _fr = require('./fr');

var _fr2 = _interopRequireDefault(_fr);

var _de = require('./de');

var _de2 = _interopRequireDefault(_de);

var _ro = require('./ro');

var _ro2 = _interopRequireDefault(_ro);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var translations = {
  it: _it2.default,
  en: _en2.default,
  fi: _fi2.default,
  se: _se2.default,
  fr: _fr2.default,
  de: _de2.default,
  ro: _ro2.default
};

exports.default = translations;

},{"./de":288,"./en":289,"./fi":290,"./fr":291,"./it":293,"./ro":294,"./se":295}],293:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Errore di connessione",
      at_moment: "Al momento non è possibile caricare la mappa",
      f5: "Premi Ctrl+F5"
    },
    cookie_law: {
      message: "Questo sito utilizza i cookie per garantire una buona usabilità all'utilizzatore finale.",
      buttonText: "Ho capito!"
    },
    default: "predefinito",
    sign_in: "Accedi",
    layer_selection_filter: {
      tools: {
        filter: "Attiva/Disattiva Filtro",
        nofilter: "Rimuovi filtro",
        invert: "Inverti Selezione",
        clear: "Annulla selezione",
        show_features_on_map: "Mostra features visibili su mappa",
        savefilter: "Salva Filtro",
        filterName: 'Nome Filtro'
      }
    },
    warning: {
      not_supported_format: "Formato non supportato"
    },
    layer_position: {
      top: 'SOPRA',
      bottom: 'IN FONDO',
      message: "Posizione rispetto ai layers della TOC"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Seleziona Template"
        }
      },
      spatialbookmarks: {
        title: "Segnalibri Spaziali",
        helptext: "Posizionati all'estensione del tuo nuovo segnalibro, definisci il nome e clicca Aggiungi",
        input: {
          name: "Nome"
        },
        sections: {
          project: {
            title: "Segnalibri Progetto"
          },
          user: {
            title: "Segnalibri Utente"
          }
        }
      },
      search: {
        all: 'TUTTE',
        no_results: "Nessun valore trovato",
        searching: "Sto cercando ..",
        error_loading: "Errore nel caricamento valori",
        layer_not_searchable: "Il layer non è ricercabile",
        layer_not_querable: "Il layer non è interrogabile",
        autocomplete: {
          inputshort: {
            pre: "Digita almeno",
            post: "caratteri"
          }
        }
      },
      print: {
        no_layers: 'Nessun Layer visibile',
        template: "Template",
        labels: "Etichette",
        scale: "Scala",
        format: "Formato",
        rotation: "Rotazione",
        download_image: "Scarica Immagine",
        fids_instruction: "Valori accettati: da 1 al valore massimo indicato da [max]. Possibile indicare anche range di valori es. 4-6",
        fids_example: "Es. 1,4-6 verranno stampati gli id 1,4,5,6",
        help: "I layers mostrati nella stampa potrebbero essere quelli definiti sul progetto e non quelli visualizzati sulla mappa"
      },
      querybuilder: {
        search: {
          run: "Lancia ricerca",
          info: "Informazioni",
          delete: "Cancella",
          edit: "Modifica"
        },
        messages: {
          changed: 'Salvato correttamente',
          number_of_features: "Numero di features"
        },
        panel: {
          button: {
            all: 'TUTTI',
            save: 'SALVA',
            test: 'TEST',
            clear: 'PULISCI',
            run: 'ESEGUI',
            manual: 'MANUALE'
          },
          layers: 'LAYERS',
          fields: 'CAMPI',
          values: 'VALORI',
          operators: 'OPERATORI',
          expression: 'ESPRESSIONE'
        },
        error_run: 'Si è verificato un errore. Verificare se la query è corretta',
        error_test: "Errore nell'esecuzione della query",
        delete: 'Vuoi confermare la cancellazione?',
        additem: 'Inserisci nome della ricerca'
      },
      errors: {
        layers: {
          load: "Alcuni layers presenti nel progetto non sono attualmente disponibili e quindi non compaiono nell'attuale visualizzazione"
        },
        unsupported_format: 'Formato non supportato',
        add_external_layer: 'Errore nel caricamento del layer'
      },
      metadata: {
        title: "Metadati",
        groups: {
          general: {
            title: 'GENERALE',
            fields: {
              title: 'TITOLO',
              name: 'NOME',
              description: "DESCRIZIONE",
              abstract: "ABSTRACT",
              keywords: 'LISTA DELLE PAROLE CHIAVE',
              fees: "CANONI",
              accessconstraints: "VINCOLI DI ACCESSO",
              contactinformation: "CONTATTI",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "E-mail",
                  personprimary: 'Riferimenti',
                  contactvoicetelephone: 'Telefono',
                  contactorganization: 'Organizzazione',
                  ContactOrganization: 'Organizzazione',
                  contactposition: 'Posizione',
                  ContactPosition: 'Posizione',
                  contactperson: 'Persona',
                  ContactPerson: 'Persona'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'INFO SPAZIALI',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'STRATI',
            groups: {
              general: 'GENERALE',
              spatial: 'INFO SPAZIALI'
            },
            fields: {
              layers: 'STRATI',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "TITOLO",
                name: 'NOME',
                geometrytype: 'GEOMETRIA',
                source: 'SORGENTE',
                attributes: 'ATTRIBUTI',
                abstract: 'ABSTRACT',
                attribution: 'ATTRIBUTION',
                keywords: "PAROLE CHIAVE",
                metadataurl: 'METADATA URL',
                dataurl: "DATA URL"
              }
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Visualizza formato Riga",
          row_to_form: "Visualizza formato Form",
          zoomtogeometry: "Zoom sulla geometria"
        },
        zoom_to_features_extent: "Zoom sulle features",
        copy_map_extent_url: 'Copia map view link',
        download_shapefile: "Scarica Shapefile",
        download_gpx: "Scarica GPX",
        download_gpkg: "Scarica GPKG",
        download_csv: "Scarica CSV",
        download_xls: "Scarica XLS",
        show_chart: "Mostra Grafico",
        atlas: "Stampa Atlas"
      },
      mapcontrols: {
        query: {
          tooltip: 'Interroga Layer',
          actions: {
            add_selection: {
              hint: "Aggiungi/Rimuovi Selezione"
            },
            zoom_to_features_extent: {
              hint: "Zoom sulle features"
            },
            add_features_to_results: {
              hint: "Aggiungi features ai risultati"
            },
            remove_feature_from_results: {
              hint: "Rimuovi feature dai risultati"
            },
            zoom_to_feature: {
              hint: "Zoom sulla feature"
            },
            relations: {
              hint: "Visualizza Relazioni"
            },
            relations_charts: {
              hint: "Visualizza grafici relazioni"
            },
            download_features_shapefile: {
              hint: 'Scarica features in Shapefile'
            },
            download_shapefile: {
              hint: 'Scarica feature in Shapefile'
            },
            download_features_gpx: {
              hint: "Scarica features in GPX"
            },
            download_features_gpkg: {
              hint: "Scarica features in GPKG"
            },
            download_gpx: {
              hint: "Scarica feature in GPX"
            },
            download_gpkg: {
              hint: "Scarica feature in GPKG"
            },
            download_features_csv: {
              hint: "Scarica features in CSV"
            },
            download_csv: {
              hint: "Scarica feature in CSV"
            },
            download_features_xls: {
              hint: "Scarica features in XLS"
            },
            download_xls: {
              hint: "Scarica la feature in XLS"
            },
            atlas: {
              hint: "Stampa Atlas"
            },
            copy_zoom_to_fid_url: {
              hint: "Copia URL mappa con estensione a questa geometria",
              hint_change: "Copiato"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Download attributi",
            choiches: {
              feature: {
                label: "Solo features"
              },
              feature_polygon: {
                label: "Features+Poligono Interrogazione"
              }
            }
          },
          tooltip: 'Interroga per poligono',
          no_geometry: 'Non contiene la geometria nella risposta',
          help: {
            title: 'Guida - Interrogazione con Poligono',
            message: "\n                <ul>\n                  <li>Seleziona uno strato poligonale in legenda.</li>\n                  <li>Assicurati che lo strato sia visibile in mappa.</li>\n                  <li>Clicca su una geometria dello strato selezionato.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Disegna un poligono per interrogare"
        },
        querybybbox: {
          tooltip: 'Interroga per BBOX',
          nolayers_visible: "Nessun layer interrogabile è visibile. Assicurarsi che almeno un layer wfs sia visibile per eseguire l'interrogazione",
          help: {
            title: 'Guida - Interrogazione BBox',
            message: "\n                  <ul>\n                    <li>Disegna un rettangolo per interrogare gli strati evidenziati in giallo</li>\n                  </ul>\n            "
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "Il risultato in mappa è parziale a causa della presenza dei seguenti records non corretti:"
            }
          },
          tooltip: 'Aggiungi Layer'
        },
        geolocation: {
          tooltip: 'Geolocalizzazione'
        },
        measures: {
          length: {
            tooltip: "Lunghezza",
            help: "Clicca sulla mappa per continuare a disegnare la linea.<br>CANC se si vuole cancellare l'ultimo vertice inserito"
          },
          area: {
            tooltip: "Area",
            help: "Clicca per continuare a disegnare il poligono.<br>CANC se si vuole cancellare l'ultimo vertice inserito"
          }
        },
        scale: {
          no_valid_scale: "Scala non valida"
        },
        scaleline: {
          units: {
            metric: 'Metri',
            nautical: 'Miglio Nautico'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Precedente",
          zoom_next: "Zoom Successivo"
        }
      },
      relations: {
        relation_data: 'Dati Relazione',
        no_relations_found: 'Nessuna relazione trovata',
        back_to_relations: 'Ritorna alle relazioni',
        list_of_relations_feature: 'Lista delle relazioni della feature',
        error_missing_father_field: "Il campo relazionato non esiste"
      },
      form: {
        loading: 'Caricamento ...',
        inputs: {
          messages: {
            errors: {
              picklayer: "Nessuna feature selezionata. Verificare se il layer è in editing o non visibile alla scala attuale"
            }
          },
          tooltips: {
            picklayer: "Prendi valore dalla mappa",
            lonlat: "Clicca sulla mappa per prendere le coordinate"
          },
          input_validation_mutually_exclusive: "Campo mutualmente esclusivo con ",
          input_validation_error: "Campo obbligatorio o tipo valore non corretto",
          input_validation_min_field: "Valore deve essere magiore uguale a quello del camp ",
          input_validation_max_field: "Valore deve essere minore uguale a quello del campo ",
          input_validation_exclude_values: "Campo deve contenere un valore diverso",
          integer: "intero",
          bigint: "intero",
          text: "testuale",
          varchar: "testuale",
          textarea: "testuale",
          string: "stringa",
          date: "data",
          datetime: "data",
          float: "float",
          table: "table"
        },
        footer: {
          required_fields: "Campi obbligatori"
        },
        messages: {
          qgis_input_widget_relation: "Gestisci le relazioni tramite form dedicato"
        }
      },
      catalog: {
        current_map_theme_prefix: "TEMA",
        choose_map_theme: "SCEGLI TEMA",
        menu: {
          layerposition: 'Posizione Layer',
          setwmsopacity: "Cambia opacità",
          wms: {
            title: "",
            copy: "Clicca qui per copiare url",
            copied: "Copiato"
          },
          download: {
            unknow: "Scarica",
            shp: 'Scarica Shapefile',
            gpx: 'Scarica GPX',
            gpkg: 'Scarica GPKG',
            csv: 'Scarica CSV',
            xls: 'Scarica XLS',
            geotiff: "Scarica GEOTIFF",
            geotiff_map_extent: "Scarica GEOTIFF(estensione vista corrente)"
          }
        }
      },
      wps: {
        list_process: "Lista dei processi",
        tooltip: 'Clicca sulla mappa'
      }
    },
    credits: {
      g3wSuiteFramework: "Applicativo realizzato con il framework OS",
      g3wSuiteDescription: "Pubblica e gestisci i tuoi progetti QGIS sul Web",
      productOf: "Framework sviluppato da"
    },
    toggle_color_scheme: "Cambia colore",
    logout: "Esci",
    no_other_projects: "Non ci sono altri progetti in questo gruppo cartografico",
    /**
     * @since 3.8.0
     */
    no_other_groups: "Non ci sono altri gruppi in questo Macrogruppo",
    yes: "Si",
    no: "No",
    back: "Indietro",
    backto: "Torna a ",
    changemap: "Cambia Mappa",
    change_session: "Cambia Sessione",
    component: "Componente Generico",
    search: "Ricerche",
    no_results: "Nessun risultato trovato",
    print: "Stampa",
    create_print: "Crea Stampa",
    dosearch: "Cerca",
    catalog: "Mappa",
    data: "Dati",
    externalwms: "WMS",
    baselayers: "Basi",
    tools: "Strumenti",
    tree: "Strati",
    legend: "Legenda",
    nobaselayer: "Nessuna mappa di base",
    street_search: "Cerca indirizzo",
    show: "Mostra",
    hide: "Nascondi",
    copy_form_data: "Copia i dati del modulo",
    paste_form_data: "Incolla",
    copy_form_data_from_feature: "Copia i dati dalla mappa",
    error_map_loading: "Errore di caricamento della nuova mappa",
    check_internet_connection_or_server_admin: "Controllare la connessione internet o contattare l'amministratore",
    could_not_load_vector_layers: "Errore di connessione al server: non è stato possibile caricare i vettoriali richiesti",
    server_saver_error: "Errore nel salvataggio sul server",
    server_error: "Si è verificato un errore nella richiesta al server",
    save: "Salva",
    cancel: "Cancella",
    close: "Chiudi",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Non mostrare più",
    enlange_reduce: "Allarga / Riduci",
    reset_default: "Dimensione predefinita",
    add: "Aggiungi",
    exitnosave: "Esci senza salvare",
    annul: "Annulla",
    layer_is_added: "Layer con stesso nome già aggiunto",
    sidebar: {
      wms: {
        panel: {
          title: 'Aggiungi WMS Layer',
          label: {
            position: "Posizione su Mappa",
            name: "Nome",
            projections: 'Sistema di riferimento',
            layers: 'Layers'
          }
        },
        add_wms_layer: "Aggiungi WMS layer",
        delete_wms_url: "Elimina WMS url",
        layer_id_already_added: "Questo Layer WMS è già stato aggiunto",
        url_already_added: "URL/Nome WMS già aggiunto",
        layer_add_error: "WMS Layer non aggiunto. Verificare i parametri o l'url"
      }
    },
    info: {
      title: "Risultati",
      list_of_relations: "Lista delle relazioni",
      open_link: "Apri documento allegato",
      server_error: "Si è verificato un errore nella richiesta al server",
      no_results: "Nessun risultato per questa interrogazione/ricerca ",
      link_button: "Apri"
    },
    mapcontrols: {
      geolocations: {
        title: "",
        error: "Non è possibile calcolare la tua posizione."
      },
      geocoding: {
        choose_layer: "Scegli un livello in cui aggiungere questa funzionalità",
        placeholder: "Indirizzo ...",
        nolayers: "Nessun layer di punti modificabile trovato in questo progetto",
        noresults: "Nessun risultato",
        notresponseserver: "Il server non risponde"
      },
      add_layer_control: {
        header: "Aggiungi Layer",
        select_projection: "Seleziona il sistema di proiezione del layer",
        select_field_to_show: "Seleziona il campo da visualizzare sulla mappa",
        select_csv_separator: "Seleziona il separatore",
        select_csv_x_field: "Seleziona il campo X",
        select_csv_y_field: "Seleziona il campo Y",
        select_color: "Seleziona il colore del Layer",
        drag_layer: "Trascina il layer in questa area"
      },
      query: {
        input_relation: "Clicca per consultare le relazioni"
      },
      length: {
        tooltip: "Lunghezza"
      },
      area: {
        tooltip: "Area"
      },
      screenshot: {
        error: "Errore nella creazione dello screenshot",
        securityError: "  \n        <p><b>Errore di sicurezza</b>: uno strato esterno impedisce la stampa della mappa. Per verificare, procedere come segue:</p>\n        <ol>\n          <li>rimuovi eventuali layer esterni aggiunti manualmente (es. layer WMS)</li>\n          <li>forza il ricaricamento della pagina: <code>CTRL + F5</code></li>\n          <li>stampa nuovamente la mappa</li>\n        </ol>\n        <p>Per maggiori informazioni contattare l'amministratore del server in merito a: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font-weight: bold;\">&#x2139;&#xFE0F; security and tainted canvases</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Tasto destro sui singoli layer per accedere alle funzionalità aggiuntive",
      contextmenu: {
        zoomtolayer: "Zoom to Layer",
        open_attribute_table: "Apri tabella attributi",
        show_metadata: "Metadati",
        styles: "Stili",
        vector_color_menu: "Setta/Cambia Colore",
        layer_opacity: "Trasparenza",
        filters: "Filtri"
      }
    },
    dataTable: {
      previous: "Precedente",
      next: "Successivo",
      lengthMenu: "Visualizza _MENU_",
      info: "Visualizzazione _START_ a _END_ su _TOTAL_ righe",
      nodatafilterd: "Nessun risultato trovato",
      infoFiltered: "(Filtrati da _MAX_ total righe)"
    }
  }
};

},{}],294:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Eroare de conexiune",
      at_moment: "Momentan nu este posibil să afișați harta",
      f5: "Apăsați Ctrl+F5"
    },
    cookie_law: {
      message: "Acest website foloseste cookie-uri pentru a furniza vizitatorilor o experiență mult mai bună de navigare",
      buttonText: "Am înțeles!"
    },
    default: "Implicit",
    sign_in: "Logare",
    layer_selection_filter: {
      tools: {
        filter: "Activați/Dezactivați filtrul",
        nofilter: "Eliminare Filtrare",
        invert: "Inversare Selecție",
        clear: "Elimină Selecția",
        show_features_on_map: "Arată entitățile vizibile în cadrul hărții",
        savefilter: "Salvează Filtrul",
        filterName: "Nume Filtru"
      }
    },
    warning: {
      not_supported_format: "Formatul nu este acceptat"
    },
    layer_position: {
      top: 'SUS',
      bottom: 'JOS',
      message: "Poziție relativă la straturile din TOC"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Selectați Template"
        }
      },
      spatialbookmarks: {
        title: "Marcaje spațiale",
        helptext: "Deplasați-vă pe întinderea hărții, introduceți numele și faceți clic pe Adăugați",
        input: {
          name: "Nume"
        },
        sections: {
          project: {
            title: "Marcaje de proiect"
          },
          user: {
            title: "Marcaje utilizator"
          }
        }
      },
      search: {
        all: 'Toate',
        no_results: "Fără rezultat",
        searching: "Căutare ...",
        error_loading: "Încărcarea a eșuat",
        layer_not_searchable: "Nu se poate căuta pe strat",
        layer_not_querable: "Stratul nu se poate interoga",
        autocomplete: {
          inputshort: {
            pre: "Te rog introdu",
            post: "sau mai multe caractere"
          }
        }
      },
      print: {
        no_layers: 'Nu avem straturi de print',
        template: "Șablon",
        labels: "Etichete",
        scale: "Scară",
        format: "Format",
        rotation: "Rotație",
        download_image: "Descarcă Imaginea",
        fids_instruction: "Valori acceptate: de la 1 la valoarea [max]. Este posibilă inserarea de interval, de ex. 4-6",
        fids_example: "Ex. 1,4-6 vor fi tipărite id 1,4,5,6",
        help: "Straturile prezentate în print pot fi acelea definite în proiect și nu acelea prezentate în cadrul hărții"
      },
      querybuilder: {
        search: {
          run: "Execută",
          info: "Info",
          delete: "Elimină",
          edit: "Modifică"
        },
        messages: {
          changed: 'Salvat',
          number_of_features: "Număr de entități"
        },
        panel: {
          button: {
            all: 'TOATE',
            save: 'SALVEAZĂ',
            test: 'TEST',
            clear: 'ȘTERGE',
            run: 'RUN',
            manual: 'MANUAL'
          },
          layers: 'STRATURI',
          fields: 'CÂMPURI',
          values: 'VALORI',
          operators: 'OPERATORI',
          expression: 'EXPRESII'
        },
        error_run: 'A survenit o eroare. De verificat interogarea',
        error_test: "A survenit o eroare în timp ce se executa interogarea",
        delete: 'Vrei să o ștergi?',
        additem: 'Introdu numele noii căutări'
      },
      errors: {
        layers: {
          load: "Câteva straturi nu sunt disponibile"
        },
        unsupported_format: 'Formatul nu este acceptat',
        add_external_layer: 'Eroare încărcare strat'
      },
      metadata: {
        title: 'Metadate',
        groups: {
          general: {
            title: 'GENERALITĂȚI',
            fields: {
              title: 'TITLU',
              name: 'NUME',
              description: "DESCRIERE",
              abstract: "ABSTRACT",
              keywords: 'CUVINTE CHEIE',
              fees: "TAXE",
              accessconstraints: "CONSTRÂNGERI DE ACCES",
              contactinformation: "CONTACTE",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "Email",
                  personprimary: 'Referințe',
                  contactvoicetelephone: 'Telefon',
                  contactorganization: 'Organizație',
                  ContactOrganization: 'Organizație',
                  contactposition: 'Poziție',
                  ContactPosition: 'Poziție',
                  contactperson: 'Persoana',
                  ContactPerson: 'Persoana'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'SPAȚIAL',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'STRATURI',
            fields: {
              layers: 'STRATURI',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "TITLU",
                name: 'NUME',
                geometrytype: 'GEOMETRIE',
                source: 'SURSA',
                attributes: 'ATRIBUTE',
                abstract: 'ABSTRACT',
                attribution: 'ATRIBUIRE',
                keywords: "CUVINTE CHEIE",
                metadataurl: 'URL METADATE',
                dataurl: "URL DATE"
              }
            },
            groups: {
              general: 'GENERALITĂȚI',
              spatial: 'SPAȚIAL'
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Vizualizare pe rânduri",
          row_to_form: "Vizualizare formular",
          zoomtogeometry: "Măriți la geometrie"
        },
        copy_map_extent_url: 'Copiază linkul de vizualizare hartă',
        download_shapefile: "Descarcă Shapefile",
        download_gpx: "Descarcă GPX",
        download_gpkg: "Descarcă GPKG",
        download_csv: "Descarcă CSV",
        download_xls: "Descarcă XLS",
        show_chart: "Arată Diagrama",
        atlas: "Tipărire Atlas"
      },
      mapcontrols: {
        query: {
          tooltip: 'Interogare strat',
          actions: {
            add_selection: {
              hint: "Adaugă/Elimină Selecția"
            },
            zoom_to_features_extent: {
              hint: "Zoom la încadrarea entităților"
            },
            add_features_to_results: {
              hint: "Adaugă/Elimină entități rezultat"
            },
            remove_feature_from_results: {
              hint: "Elimină entitate din rezultat"
            },
            zoom_to_feature: {
              hint: "Zoom la entitate"
            },
            relations: {
              hint: "Arată Relațiile"
            },
            relations_charts: {
              hint: "Arată diagrama de relații"
            },
            download_features_shapefile: {
              hint: 'Descarcă entități în Shapefile'
            },
            download_shapefile: {
              hint: 'Descarcă entitate în Shapefile'
            },
            download_features_gpx: {
              hint: "Descarcă entități în GPX"
            },
            download_features_gpkg: {
              hint: "Descarcă entități în GPKG"
            },
            download_gpx: {
              hint: "Descarcă entitate în GPX"
            },
            download_gpkg: {
              hint: "Descarcă entitate în GPKG"
            },
            download_features_csv: {
              hint: "Descarcă entități în CSV"
            },
            download_csv: {
              hint: "Descarcă entitate în CSV"
            },
            download_features_xls: {
              hint: "Descarcă entități în XLS"
            },
            download_xls: {
              hint: "Descarcă entitate în XLS"
            },
            atlas: {
              hint: "Tipărire Atlas"
            },
            copy_zoom_to_fid_url: {
              hint: "Copiază URL hartă cu întinderea geometriei entității",
              hint_change: "Copiat"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Descărcare atribute",
            choiches: {
              feature: {
                label: "Doar entități"
              },
              feature_polygon: {
                label: "Entități+Poligon Interogare"
              }
            }
          },
          tooltip: 'Interogare După Poligon',
          no_geometry: 'Nu avem geometrii în răspuns',
          help: {
            title: 'Ghid - Interogare După Poligon',
            message: "\n                <ul>\n                  <li>Selecteaz\u0103 un strat poligon din TOC.</li>\n                  <li>Asigur\u0103-te c\u0103 stratul este vizibil.</li>\n                  <li>Click pe o entitate a stratului selectat.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Interogare prin poligon de desen"
        },
        querybybbox: {
          tooltip: 'Interogare BBox strat',
          nolayers_visible: 'Nu este vizibil niciun strat de interogare. Trebuie setat cel puțin un strat WFS vizibil pentru a efectua interogarea',
          help: {
            title: 'Ghid - Interogare BBox strat',
            message: "\n                 <ul>\n                  <li>Deseneaz\u0103 un p\u0103trat pe hart\u0103 pentru a interoga straturile din TOC de sub </li>\n                 </ul>"
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "Rezultateul pe hartă este parțial datorită prezenței următoarei liste de rezultate incorecte:"
            }
          },
          tooltip: 'Adaugă Strat'
        },
        geolocation: {
          tooltip: 'Geolocalizare'
        },
        measures: {
          length: {
            tooltip: "Lungime",
            help: "Click pe hartă pentru a desena linia. Apasă <br>CANC dacă dorești să ștergi ultimul vertex"
          },
          area: {
            tooltip: "Aria",
            help: "Click pentru desen poligon. Apasă <br>CANC dacă dorești să ștergi ultimul vertex"
          }
        },
        scale: {
          no_valid_scale: "Scară Invalidă"
        },
        scaleline: {
          units: {
            metric: 'Metri',
            nautical: 'Mile Nautice'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Anterior",
          zoom_next: "Zoom Urmatorul"
        }
      },
      relations: {
        relation_data: 'Date Relații',
        no_relations_found: 'Nu am găsit nicio relație',
        back_to_relations: 'Înapoi la relații',
        list_of_relations_feature: 'Lista de relații a entității',
        error_missing_father_field: "Câmpul de legătură lipsește"
      },
      form: {
        loading: 'Se încarcă ...',
        inputs: {
          messages: {
            errors: {
              picklayer: "Nu avem entitate selectată. Verifică dacă stratul este în editare sau vizibil la scara curentă if layer is on editing or visible at current scale"
            }
          },
          tooltips: {
            picklayer: "Ia valoare din strat",
            lonlat: "Click pe hartă pentru a prelua coordonate"
          },
          input_validation_mutually_exclusive: "Câmp ce se exclude mutual cu ",
          input_validation_error: "Câmp mandatoriu sau tip de date greșit",
          input_validation_min_field: "Valoarea trebuie să fie mai mare/egală cu valoare câmpului ",
          input_validation_max_field: "Valoarea trebuie să fie mai mică/egală cu valoare câmpului ",
          input_validation_exclude_values: "Valoarea trebuie să fie unică",
          integer: "integer - nr. întreg",
          bigint: "integer - nr. întreg",
          text: "text",
          varchar: "text",
          textarea: "text",
          string: "string - text",
          date: "data",
          datetime: "data",
          float: "float - nr. cu zecimale",
          table: "tabelă"
        },
        footer: {
          "required_fields": "Câmpuri necesare"
        },
        messages: {
          qgis_input_widget_relation: "Folosește formular specific de relații pentru a lucra cu relația"
        }
      },
      catalog: {
        current_map_theme_prefix: "TEMA",
        choose_map_theme: "ALEGE TEMA",
        menu: {
          layerposition: 'Poziție Strat',
          setwmsopacity: "Alege Opacitatea",
          wms: {
            title: "Titlu",
            copy: "Click pentru copiere URL",
            copied: "Copiat"
          },
          download: {
            unknow: 'Descarcă',
            shp: 'Descarcă Shapefile',
            gpx: 'Descarcă GPX',
            gpkg: 'Descarcă GPKG',
            csv: 'Descarcă CSV',
            xls: 'Descarcă XLS',
            geotiff: "Descarcă GEOTIFF",
            geotiff_map_extent: "Descarcă GEOTIFF(ce se vede în cadrul hărții)"
          }
        }
      },
      wps: {
        list_process: "Lista de procese",
        tooltip: 'Click pe hartă'
      }
    },
    credits: {
      g3wSuiteFramework: "Aplicație bazată pe frameworkul",
      g3wSuiteDescription: "Publică și administrează proiectele de QGIS pe WEB",
      productOf: "Framework dezvoltat de"
    },
    toggle_color_scheme: "Comutare schemă de culori",
    logout: "Deconectare",
    no_other_projects: "No more project for this group",
    no_other_groups: "Nu mai sunt grupuri pentru acest macrogrup",
    yes: "Da",
    no: "Nu",
    back: "Înapoi",
    backto: "Înapoi la ",
    changemap: "Schimbare Hartă",
    change_session: "Schimbați sesiunea",
    component: "Componentă Generică",
    search: "Căutare",
    no_results: "Niciun rezultat găsit",
    print: "Tipărire",
    create_print: "Tipărește",
    dosearch: "Caută",
    catalog: "Hartă",
    data: "Data",
    externalwms: "WMS",
    baselayers: "Straturi Bază",
    tools: "Instrumente",
    tree: "Straturi",
    legend: "Legendă",
    nobaselayer: "Fără strat de bază",
    street_search: "Caută Adresă",
    show: "Arată",
    hide: "Ascunde",
    copy_form_data: "Copiază data",
    paste_form_data: "Lipește",
    copy_form_data_from_feature: "Copiază data din hartă",
    error_map_loading: "Sunt erori la încărcarea hărții",
    check_internet_connection_or_server_admin: "Verificați conexiune de internet sau contactați administratorul de sistem",
    could_not_load_vector_layers: "Eroare de conexiune: Straturile nu pot fi încărcate",
    server_saver_error: "Eroare la salvarea pe server",
    server_error: "Eroare de conexiune la server",
    save: "Salvează",
    cancel: "Anulează",
    close: "Închide",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Nu mai afișa mesajul",
    enlange_reduce: "Mărește / Micșorează",
    reset_default: "Mărimea implicită",
    add: "Adaugă",
    exitnosave: "Ieșire fără salvare",
    annul: "Anulează",
    layer_is_added: "Există un strat cu același nume deja adăugat",
    sidebar: {
      wms: {
        panel: {
          title: 'Adaugă strat WMS',
          label: {
            position: "Poziție Hartă",
            name: "Nume",
            projections: 'Proiecție',
            layers: 'Straturi'
          }
        },
        add_wms_layer: "Adaugă strat WMS",
        delete_wms_url: "Șterge URL WMS",
        layer_id_already_added: "Strat WMS deja adăugat",
        url_already_added: "URL WMS/Nume deja adăugat",
        layer_add_error: "Stratul WMS nu s-a adăugat. Verificați URL-ul sau parametrii WMS"
      }
    },
    info: {
      title: "Rezultate",
      list_of_relations: "List of Relations",
      open_link: "Deschide document atașat",
      server_error: "Serverul a întâmpinat o eroare",
      no_results: "Niciun rezultat",
      link_button: "Deschide"
    },
    mapcontrols: {
      geolocations: {
        error: "Nu te-am putut localiza"
      },
      geocoding: {
        choose_layer: "Alegeți un strat unde să adăugați această caracteristică",
        placeholder: "Adresa ...",
        nolayers: "Nu s-au găsit straturi de puncte editabile în acest proiect",
        noresults: "Niciun rezultat",
        notresponseserver: "Niciun răspuns de la server"
      },
      add_layer_control: {
        header: "Adăugare Strat",
        select_projection: "Selectează proiecția strat",
        select_field_to_show: "Selectează câmpul de arătat pe hartă",
        select_csv_separator: "Selectează delimitatorul",
        select_csv_x_field: "Selectează câmpul X - Est",
        select_csv_y_field: "Selectează câmpul Y - Nord",
        select_color: "Selectează culoare strat",
        drag_layer: "Trageți stratul aici (Drag&Drop)"
      },
      query: {
        input_relation: "Click pentru a arăta relațiile"
      },
      length: {
        tooltip: "Lungime"
      },
      area: {
        tooltip: "Arie"
      },
      screenshot: {
        error: "Eroare captură ecran",
        securityError: "  \n        <p><b>Eroare de securitate</b>: un strat extern \xEEmpiedic\u0103 imprimarea h\u0103r\u021Bii. Pentru a verifica, proceda\u021Bi dup\u0103 cum urmeaz\u0103:</p>\n        <ol>\n          <li>elimina\u021Bi orice straturi externe ad\u0103ugate manual (de exemplu, straturi WMS)</li>\n          <li>for\u021Ba\u021Bi re\xEEnc\u0103rcarea paginii: <code>CTRL + F5</code></li>\n          <li>tip\u0103re\u0219te din nou harta</li>\n        </ol>\n        <p>Pentru mai multe informa\u021Bii, v\u0103 rug\u0103m s\u0103 contacta\u021Bi administratorul serverului despre: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font -greutate: bold;\">&#x2139;&#xFE0F; securitate \u0219i p\xE2nze contaminate</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Click dreapta pe strat pentru a accesa opțiuni",
      contextmenu: {
        zoomtolayer: "Zoom pe Strat",
        open_attribute_table: "Deschide Tabela Atribute",
        show_metadata: "Metadate",
        styles: 'Stiluri',
        vector_color_menu: "Setează/Schimbă Culoare",
        layer_opacity: "Opacitate",
        filters: "Filters"
      }
    },
    dataTable: {
      previous: "Anteriorul",
      next: "Următorul",
      lengthMenu: "Arată _MENU_",
      info: "Arată _START_ până la _END_ din _TOTAL_ de intrări",
      no_data: "Fără date",
      nodatafilterd: "Niciun rezultat",
      infoFiltered: "(filtrat din _MAX_ de rezultate totale)"
    }
  }
};

},{}],295:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  translation: {
    error_page: {
      error: "Anslutningsfel",
      at_moment: "För närvarande är det inte möjligt att visa kartan",
      f5: "Tryck på Ctrl+F5"
    },
    cookie_law: {
      message: "Denna applikation använder cookies för att den ska fungera så bra som möjligt för dig.",
      buttonText: "Jag accepterar"
    },
    default: "standard",
    sign_in: "Logga in",
    layer_selection_filter: {
      tools: {
        filter: "Aktivera/inaktivera filter",
        nofilter: "Avlägsna Filtrera",
        invert: "Invertera Urval",
        clear: "Annullera Urval",
        show_features_on_map: "Visa funktioner som är synliga på kartan",
        savefilter: "Spara Filter",
        filterName: "Filternamn"
      }
    },
    warning: {
      not_supported_format: "Formatet stöds inte"
    },
    layer_position: {
      top: 'Överst',
      bottom: 'Underst',
      message: "Position relativt till lager i lagerlistan"
    },
    sdk: {
      atlas: {
        template_dialog: {
          title: "Välj Template"
        }
      },
      spatialbookmarks: {
        title: "Rumsliga bokmärken",
        helptext: "Flytta på kartans omfattning, ange namn och klicka på Lägg till",
        input: {
          name: "Namn"
        },
        sections: {
          project: {
            title: "Projektbokmärken"
          },
          user: {
            title: "Användarbokmärken"
          }
        }
      },
      search: {
        all: 'ALLA',
        no_results: "Inga resultat",
        searching: "Sökning ...",
        error_loading: "Fel vid laddning av uppgifter.",
        layer_not_searchable: "Nivån kan inte sökas.",
        layer_not_querable: "Förfrågningar kan inte göras på nivån.",
        autocomplete: {
          inputshort: {
            pre: "Mata in",
            post: "eller flera tecken"
          }
        }
      },
      print: {
        no_layers: 'Inga nivåer att skriva ut',
        template: "Template",
        labels: "Labels",
        scale: "Skala",
        format: "Format",
        rotation: "Rotation",
        download_image: "Ladda ner bild",
        fids_instruction: "Godkända värden: Från ett till värdet [max]. Mellanslag tillåts, t.ex. 4-6.",
        fids_example: "Exempelvis 1,4-6 skriver ut id 1,4,5,6.",
        help: "Nivåerna på utskriften kan vara specificerade i ett projekt inte sådana som visas på karta."
      },
      querybuilder: {
        search: {
          run: "Utför",
          info: "Information",
          delete: "Ta bort",
          edit: "Redigera"
        },
        messages: {
          changed: 'Sparat',
          number_of_features: "Antal funktione"
        },
        panel: {
          button: {
            all: 'ALLA',
            save: 'SPARA',
            test: 'TEST',
            clear: 'TÖM',
            run: 'UTFÖR',
            manual: 'MANUELL'
          },
          layers: 'NIVÅER',
          fields: 'FÄLT',
          values: 'VÄRDEN',
          operators: 'OPERATÖRER',
          expression: 'KLAUSUL'
        },
        error_run: 'Ett fel inträffade. Kontrollera förfrågan.',
        error_test: "Ett fel inträffade när förfrågan utfördes.",
        delete: 'Vill du ta bort den?',
        additem: 'Ge den nya sökningen ett namn.'
      },
      errors: {
        layers: {
          load: "Vissa nivåer är inte tillgängliga."
        },
        unsupported_format: 'Formatet stöds inte',
        add_external_layer: 'Fel vid laddning av nivån'
      },
      metadata: {
        title: 'Metadata',
        groups: {
          general: {
            title: 'ALLMÄN',
            fields: {
              title: 'RUBRIK',
              name: 'NAMN',
              description: "BESKRIVNING",
              abstract: "SAMMANDRAG",
              keywords: 'NYCKELORD',
              fees: "AVGIFTER",
              accessconstraints: "ÅTKOMSTBEGRÄNSNINGAR",
              contactinformation: "KONTAKTUPPGIFTER",
              subfields: {
                contactinformation: {
                  contactelectronicmailaddress: "E-post",
                  personprimary: 'Referenser',
                  contactvoicetelephone: 'Telefon',
                  contactorganization: 'Organisation',
                  ContactOrganization: 'Organisation',
                  contactposition: 'Ställning',
                  ContactPosition: 'Ställning',
                  contactperson: 'Kontaktperson',
                  ContactPerson: 'Kontaktperson'
                }
              },
              wms_url: "WMS"
            }
          },
          spatial: {
            title: 'SPATIAL',
            fields: {
              crs: 'EPSG',
              extent: 'BBOX'
            }
          },
          layers: {
            title: 'NIVÅER',
            fields: {
              layers: 'NIVÅER',
              subfields: {
                crs: 'EPSG',
                bbox: 'BBOX',
                title: "RUBRIK",
                name: 'NAMN',
                geometrytype: 'GEOMETRI',
                source: 'KÄLLA',
                attributes: 'ATTRIBUT',
                abstract: 'SAMMANDRAG',
                attribution: 'TILLSKRIVNING',
                keywords: "NYCKELORD",
                metadataurl: 'METADATA URL',
                dataurl: "DATA URL"
              }
            },
            groups: {
              general: 'ALLMÄN',
              spatial: 'SPATIAL'
            }
          }
        }
      },
      tooltips: {
        relations: {
          form_to_row: "Radvy",
          row_to_form: "Tabellvy",
          zoomtogeometry: "Zooma till geometri"
        },
        copy_map_extent_url: 'Kopiera länk till karta',
        download_shapefile: "Ladda SHP-fil",
        download_gpx: "Ladda GPX-fil",
        download_gpkg: "Ladda GPKG-fil",
        download_csv: "Ladda CSV-fil",
        download_xls: "Ladda XLS-fil",
        show_chart: "Visa diagram", //Tero 9.12.2020
        atlas: "Skriv ut Atlas"
      },
      mapcontrols: {
        query: {
          tooltip: 'Förfrågningsnivå',
          actions: {
            add_selection: {
              hint: "Lägg till/Avlägsna Urval"
            },
            zoom_to_features_extent: {
              hint: "Zooma till egenskapens omfattning"
            },
            add_features_to_results: {
              hint: "Add/Remove features to results"
            },
            remove_feature_from_results: {
              hint: "Remove feature from results"
            },
            zoom_to_feature: {
              hint: "Zooma till egenskapen"
            },
            relations: {
              hint: "Visa relationerna"
            },
            relations_charts: {
              hint: "Visa relationsdiagrammet" //Tero 9.12.2020
            },
            download_features_shapefile: {
              hint: 'Ladda egenskapens SHP-fil'
            },
            download_shapefile: {
              hint: 'Ladda egenskapens SHP-fil'
            },
            download_features_gpx: {
              hint: "Ladda egenskapens GPX-fil"
            },
            download_features_gpkg: {
              hint: "Ladda egenskapens GPKG-fil"
            },
            download_gpx: {
              hint: "Ladda egenskapens GPX-fil"
            },
            download_gpkg: {
              hint: "Ladda egenskapens GPKG-fil"
            },
            download_features_csv: {
              hint: "Ladda egenskapens CSV-fil"
            },
            download_csv: {
              hint: "Ladda egenskapens CSV-fil"
            },
            download_features_xls: {
              hint: "Ladda egenskapens XLS-fil"
            },
            download_xls: {
              hint: "Ladda egenskapens XLS-fil"
            },
            atlas: {
              hint: "Skriv ut Atlas"
            },
            copy_zoom_to_fid_url: {
              hint: "Copy map URL with this geometry feature extension",
              hint_change: "Copied"
            }
          }
        },
        querybypolygon: {
          download: {
            title: "Attributes download",
            choiches: {
              feature: {
                label: "Features only"
              },
              feature_polygon: {
                label: "Features+Query Polygon"
              }
            }
          },
          tooltip: 'Förfrågan med polygon',
          no_geometry: 'No geometry on response',
          help: {
            title: 'Ohje - Förfrågan med polygon',
            message: "\n                <ul>\n                  <li>V\xE4lj polygonniv\xE5 i listan.</li>\n                  <li>Kontrollera att niv\xE5n \xE4r synlig.</li>\n                  <li>V\xE4lj egenskap p\xE5 \xF6nskad niv\xE5.</li>\n                </ul>"
          }
        },
        querybydrawpolygon: {
          tooltip: "Fråga efter ritpolygon"
        },
        querybybbox: {
          tooltip: 'BBox-förfrågan som riktar sig till en nivå',
          nolayers_visible: 'Inga nivåer som förfrågningar kan riktas till. Gör minst en WFS-nivå synlig för att kunna utföra sökningen.',
          help: {
            title: 'Ohje - BBox-förfrågan som riktar sig till nivån',
            message: "\n                 <ul>\n                  <li>Rita upp en rektangel p\xE5 kartan f\xF6r att utf\xF6ra f\xF6rfr\xE5gan p\xE5 de i listan understreckade niv\xE5erna.</li>\n                 </ul>"
          }
        },
        addlayer: {
          messages: {
            csv: {
              warning: "The result in the map is partial due to the presence of the below incorrect records list:"
            }
          },
          tooltip: 'Lägg till nivå'
        },
        geolocation: {
          tooltip: 'Geografiskt läge'
        },
        measures: {
          length: {
            tooltip: "Längd",
            help: "Rita upp en bruten linje på kartan. Tryck <br>CANC, om du vill ta bort föregående punkt."
          },
          area: {
            tooltip: "Område",
            help: "Rita upp en polygon på kartan. Tryck <br>CANC, om du vill ta bort föregående punkt."
          }
        },
        scale: {
          no_valid_scale: "Fel skala"
        },
        scaleline: {
          units: {
            metric: 'Meters',
            nautical: 'Nautical Mile'
          }
        },
        zoomhistory: {
          zoom_last: "Zoom Föregående",
          zoom_next: "Zoom Nästa"
        }
      },
      relations: {
        relation_data: 'Relationsuppgifter',
        no_relations_found: 'Inga relationer hittades.',
        back_to_relations: 'Tillbaka till relationerna',
        list_of_relations_feature: 'Lista på egenskapens relationer',
        error_missing_father_field: "Fält saknas"
      },
      form: {
        loading: 'Laddning...',
        inputs: {
          messages: {
            errors: {
              picklayer: "Inga egenskaper har valts. Kontroller att nivån kan redigeras eller att den syns med nuvarande skala."
            }
          },
          tooltips: {
            picklayer: "Välj värde på kartnivå",
            lonlat: "Click on map to get coordinates"
          },
          input_validation_mutually_exclusive: "Fälten utesluter varandra.",
          input_validation_error: "Obligatoriskt fält eller fel datatyp.",
          input_validation_min_field: "Värdet ska vara större eller lika stort som värdet i fältet.",
          input_validation_max_field: "Värdet ska vara mindre eller lika stort som värdet i fältet.",
          input_validation_exclude_values: "Värdet ska vara unikt.",
          integer: "heltal",
          bigint: "heltal",
          text: "text",
          varchar: "text",
          textarea: "text",
          string: "teckensträng",
          date: "datum",
          datetime: "datum",
          float: "flyttal",
          table: "tabell"
        },
        footer: {
          "required_fields": "Obligatoriska fält"
        },
        messages: {
          qgis_input_widget_relation: "Använd den specifika funktinen för att bestämma relationer"
        }
      },
      catalog: {
        current_map_theme_prefix: "THEME",
        choose_map_theme: "CHOOSE THEME",
        menu: {
          layerposition: 'Layer Position',
          setwmsopacity: "Set Opacity",
          wms: {
            title: "",
            copy: "Tryck här för att kopiera url.",
            copied: "Kopierad."
          },
          download: {
            unknow: 'Ladda',
            shp: 'Ladda SHP-fil',
            gpx: 'Ladda GPX-fil',
            gpkg: 'Ladda GPKG-fil',
            csv: 'Ladda CSV-fil',
            xls: 'Ladda XLS-fil',
            geotiff: 'Ladda GEOTIFF-fil',
            geotiff_map_extent: "Ladda GEOTIFF-fil(current view extent)"
          }
        }
      },
      wps: {
        list_process: "Lista på processer",
        tooltip: 'Välj på kartan'
      }
    },
    credits: {
      g3wSuiteFramework: "Tillämpningen baserar på OS framework",
      g3wSuiteDescription: "Publicera och hantera QGIS-projekt på nätet.",
      productOf: "Framework har utvecklats av"
    },
    toggle_color_scheme: "Toggle color scheme",
    logout: "Logga ut",
    no_other_projects: "Inga projekt för denna grupp",
    no_other_groups: "Inga fler grupper för denna makrogrupp",
    yes: "Ja",
    no: "Nej",
    back: "Gå tillbaka",
    backto: "Tillbaka ",
    changemap: "Byt karta",
    change_session: "Ändra session",
    component: "Allmän komponent",
    search: "Sök",
    no_results: "Inga sökresultat",
    print: "Skriv ut",
    create_print: "Skapa utskrift",
    dosearch: "Sök",
    catalog: "Karta",
    data: "Data",
    externalwms: "WMS",
    baselayers: "Bakgrundskarta",
    tools: "Verktyg",
    tree: "Nivåer",
    legend: "Förklaring till beteckningarna",
    nobaselayer: "Ingen bakgrundskarta",
    street_search: "Sök adress",
    show: "Visa",
    hide: "Dölj",
    copy_form_data: "Kopiera uppgifterna",
    paste_form_data: "Infoga",
    copy_form_data_from_feature: "Kopiera uppgifter från kartan",
    error_map_loading: "Fel vid laddning av kartan",
    check_internet_connection_or_server_admin: "Kontrollera internetanslutningen eller kontakta administratören.",
    could_not_load_vector_layers: "Fel i anslutningen, nivåer kan inte laddas.",
    server_saver_error: "Fel vid lagring på servern.",
    server_error: "Fel på anslutningen till servern",
    save: "Spara",
    cancel: "Ånga",
    close: "Stäng",
    /**
     * @since 3.8.0
     */
    dont_show_again: "Visa inte det här meddelandet igen",
    enlange_reduce: "Förstora / Förminska",
    reset_default: "Standardstorlek",
    add: "Lägg till",
    exitnosave: "Lämna programmet utan att spara",
    annul: "Ångra",
    layer_is_added: "Lagret med samma namn har redan lagts till.",
    sidebar: {
      wms: {
        panel: {
          title: 'Add WMS Layer',
          label: {
            position: "Map Position",
            name: "Name",
            projections: 'Projection',
            layers: 'Layers'
          }
        },
        add_wms_layer: "Aggiungi WMS layer",
        delete_wms_url: "Delete WMS url",
        layer_id_already_added: "WMS Nivån har redan lagts till.",
        url_already_added: "WMS URL/Namn har redan lagts till.",
        layer_add_error: "WMS Layer not added. Please check all wms parameter or url"
      }
    },
    info: {
      title: "Resultat",
      list_of_relations: "List of Relations",
      open_link: "Öppna filbilaga",
      server_error: "Ett fel uppstod på servern.",
      no_results: "Inga resultat för sökningen/förfrågan.",
      link_button: "Öppna"
    },
    mapcontrols: {
      geolocations: {
        error: "Du kan inte lokaliseras"
      },
      geocoding: {
        choose_layer: "Välj ett lager där du vill lägga till denna funktion",
        placeholder: "Adress ...",
        nolayers: "Inga redigerbara punktlager hittades i det här projektet",
        noresults: "Inga resultat",
        notresponseserver: "Inget svar från servern"
      },
      add_layer_control: {
        header: "Lägg till nivå",
        select_projection: "Välj projektion för nivån",
        select_field_to_show: "Select Field to show on map",
        select_csv_separator: "Select delimiter",
        select_csv_x_field: "Select X field",
        select_csv_y_field: "Select Y field",
        select_color: "Välj färg på nivån",
        drag_layer: "Dra och släpp nivån hit"
      },
      query: {
        input_relation: "Tryck för att visa relationerna"
      },
      length: {
        tooltip: "Längd"
      },
      area: {
        tooltip: "Areal"
      },
      screenshot: {
        error: "Screenshot error creation",
        securityError: "  \n        <p><b>S\xE4kerhetsfel</b>: ett externt lager hindrar kartan fr\xE5n att skrivas ut. G\xF6r s\xE5 h\xE4r f\xF6r att kontrollera:</p>\n        <ol>\n          <li>ta bort alla manuellt tillagda externa lager (t.ex. WMS-lager)</li>\n          <li>tvinga om inl\xE4sning av sidan: <code>CTRL + F5</code></li>\n          <li>skriv ut kartan igen</li>\n        </ol>\n        <p>F\xF6r mer information kontakta serveradministrat\xF6ren om: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\" style=\"color: #000 !important;font -vikt: fet;\">&#x2139;&#xFE0F; s\xE4kerhet och nedsmutsade dukar</a></p>\n        "
      }
    },
    catalog_items: {
      helptext: "Högerklicka på en enskild nivå för att komma till tilläggsegenskaperna.",
      contextmenu: {
        zoomtolayer: "Zooma till nivå",
        open_attribute_table: "Öppna attributtabellen",
        show_metadata: "Metadata",
        styles: "Stilar",
        vector_color_menu: "Ställ in/ändra färg",
        layer_opacity: "Opacitet",
        filters: "Filters"
      }
    },
    dataTable: {
      previous: "Föregående",
      next: "Nästa",
      lengthMenu: "Show _MENU_ items",
      info: "Showing _START_ to _END_ of _TOTAL_ entries",
      no_data: "Inga uppgifter",
      nodatafilterd: "Inga motsvarande poster hittades",
      infoFiltered: "(filtered from _MAX_ total records)"
    }
  }
};

},{}],296:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.7
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

exports.default = {
  methods: {
    autocompleteRequest: function () {
      var _ref = _asyncToGenerator(function* () {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            layerId = _ref2.layerId,
            field = _ref2.field,
            value = _ref2.value;

        var data = [];
        var layer = _catalogLayers2.default.getLayerById(layerId);
        try {
          data = yield layer.getFilterData({
            suggest: field + '|' + value,
            unique: field
          });
        } catch (error) {}
        return data.map(function (value) {
          return {
            id: value,
            text: value
          };
        });
      });

      function autocompleteRequest() {
        return _ref.apply(this, arguments);
      }

      return autocompleteRequest;
    }()
  }
};

},{"store/catalog-layers":329}],297:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.7
 */

exports.default = {
  computed: {
    tabIndex: function tabIndex() {
      return this.editable ? 0 : -1;
    },
    notvalid: function notvalid() {
      return this.state.validate.valid === false;
    },
    editable: function editable() {
      return this.state.editable;
    },
    showhelpicon: function showhelpicon() {
      return this.state.help && this.state.help.message.trim();
    },
    disabled: function disabled() {
      return !this.editable || this.loadingState === 'loading' || this.loadingState === 'error';
    },
    loadingState: function loadingState() {
      return this.state.input.options.loading ? this.state.input.options.loading.state : null;
    }
  },
  methods: {
    /**
     * @since v3.9.1
     * @param bool
     */
    setLoading: function setLoading(bool) {
      this.state.input.options.loading.state = bool ? 'loading' : 'ready';
    },
    showHideHelp: function showHideHelp() {
      this.state.help.visible = !this.state.help.visible;
    },

    // used to text input to listen mobile changes
    mobileChange: function mobileChange(event) {
      this.state.value = event.target.value;
      this.change();
    },

    // called when input value change
    change: function change() {
      this.service.setEmpty();
      this.service.setUpdate();
      // validate input if is required or need to be unique
      if (this.state.validate.required || this.state.validate.unique) this.service.validate();
      // emit change input
      this.$emit('changeinput', this.state);
    },
    isVisible: function isVisible() {}
  }
};

},{}],298:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.8
 */

exports.default = {
  created: function created() {
    /**
     * Store `click` and `doubleclick` events on a single vue element.
     *
     * @see https://stackoverflow.com/q/41303982
     */
    this.__CLICK_EVENT = {
      count: 0, // count click events
      timeoutID: null // timeoutID return by setTimeout Function
    };
  },


  methods: {

    /**
     * @param {{ '1': () => {}, '2': () => {}}} callbacks hashmap of click event handlers ('1' = click, '2' = double click)
     * @param context
     */
    handleClick: function handleClick() {
      var _this = this;

      var callbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var context = arguments[1];

      if (!this.__CLICK_EVENT) {
        console.warn('click mixin not initialized on context:', context);
        return;
      }
      this.__CLICK_EVENT.count += 1; // increment click count
      if (!this.__CLICK_EVENT.timeoutID) {
        // skip and wait for timeout in order to detect double click
        this.__CLICK_EVENT.timeoutID = setTimeout(function () {
          if (undefined !== callbacks[_this.__CLICK_EVENT.count]) {
            callbacks[_this.__CLICK_EVENT.count].call(context);
          }
          _this.__resetClickMixin();
        }, 300);
      }
    },
    __resetClickMixin: function __resetClickMixin() {
      this.__CLICK_EVENT.count = 0;
      this.__CLICK_EVENT.timeoutID = null;
    },
    __clearClickMixin: function __clearClickMixin() {
      this.__resetClickMixin();
      this.__CLICK_EVENT = null;
    }
  },

  beforeDestroy: function beforeDestroy() {
    this.__clearClickMixin();
  }
};

},{}],299:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.7
 */

exports.default = {
  methods: {
    getFieldService: function getFieldService() {
      if (undefined === this._fieldsService) {
        this._fieldsService = require('gui/fields/fieldsservice');
      }
      return this._fieldsService;
    },
    getFieldType: function getFieldType(field) {
      return this.getFieldService().getType(field);
    },
    isSimple: function isSimple(field) {
      return this.getFieldService().isSimple(field);
    },
    isLink: function isLink(field) {
      return this.getFieldService().isLink(field);
    },
    isImage: function isImage(field) {
      return this.getFieldService().isImage(field);
    },
    isPhoto: function isPhoto(field) {
      return this.getFieldService().isPhoto(field);
    },
    isVue: function isVue(field) {
      return this.getFieldService().isVue(field);
    },
    sanitizeFieldValue: function sanitizeFieldValue(value) {
      return Array.isArray(value) && !value.length ? '' : value;
    }
  }
};

},{"gui/fields/fieldsservice":80}],300:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.7
 */

exports.default = {
  data: function data() {
    return {
      valid: false
    };
  },

  methods: {
    addToValidate: function addToValidate(input) {
      this.tovalidate.push(input);
    },
    changeInput: function changeInput(input) {
      this.isValid(input);
    },

    // Every input send to form it valid value that will change the genaral state of form
    isValid: function isValid(input) {
      var _this = this;

      if (input) {
        // check mutually
        if (input.validate.mutually) {
          if (!input.validate.required) {
            if (!input.validate.empty) {
              input.validate._valid = input.validate.valid;
              input.validate.mutually_valid = input.validate.mutually.reduce(function (previous, inputname) {
                return previous && _this.tovalidate[inputname].validate.empty;
              }, true);
              input.validate.valid = input.validate.mutually_valid && input.validate.valid;
            } else {
              input.value = null;
              input.validate.mutually_valid = true;
              input.validate.valid = true;
              input.validate._valid = true;
              var countNoTEmptyInputName = [];
              for (var i = input.validate.mutually.length; i--;) {
                var inputname = input.validate.mutually[i];
                !this.tovalidate[inputname].validate.empty && countNoTEmptyInputName.push(inputname);
              }
              if (countNoTEmptyInputName.length < 2) {
                countNoTEmptyInputName.forEach(function (inputname) {
                  _this.tovalidate[inputname].validate.mutually_valid = true;
                  _this.tovalidate[inputname].validate.valid = true;
                  setTimeout(function () {
                    _this.tovalidate[inputname].validate.valid = _this.tovalidate[inputname].validate._valid;
                    _this.state.valid = _this.state.valid && _this.tovalidate[inputname].validate.valid;
                  });
                });
              }
            }
          }
          //check if min_field or max_field is set
        } else if (!input.validate.empty && (input.validate.min_field || input.validate.max_field)) {
          var input_name = input.validate.min_field || input.validate.max_field;
          input.validate.valid = input.validate.min_field ? this.tovalidate[input.validate.min_field].validate.empty || 1 * input.value > 1 * this.tovalidate[input.validate.min_field].value : this.tovalidate[input.validate.max_field].validate.empty || 1 * input.value < 1 * this.tovalidate[input.validate.max_field].value;
          if (input.validate.valid) this.tovalidate[input_name].validate.valid = true;
        }
      }
      this.valid = Object.values(this.tovalidate).reduce(function (previous, input) {
        return previous && input.validate.valid;
      }, true);
    }
  },
  created: function created() {
    this.tovalidate = [];
  },
  destroyed: function destroyed() {
    this.tovalidate = null;
  }
};

},{}],301:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  methods: {
    showLayer: function showLayer() {
      this.visible = !this.visible;
      this.layer.setVisible(this.visible);
    }
  },
  created: function created() {
    var data = this.data;
    var mapService = _gui2.default.getComponent('map').getService();
    var mapProjection = mapService.getProjection().getCode();
    var style = void 0;
    switch (data.type) {
      case 'Point':
      case 'MultiPoint':
        style = [new ol.style.Style({
          image: new ol.style.Circle({
            radius: 6,
            fill: new ol.style.Fill({
              color: [255, 255, 255, 1.0]
            }),
            stroke: new ol.style.Stroke({
              color: [0, 0, 0, 1.0],
              width: 2
            })
          })
        }), new ol.style.Style({
          image: new ol.style.Circle({
            radius: 2,
            fill: new ol.style.Fill({
              color: [255, 255, 255, 1.0]
            }),
            stroke: new ol.style.Stroke({
              color: [0, 0, 0, 1.0],
              width: 2
            })
          })
        })];
        break;
      case 'Line':
      case 'MultiLineString':
      case 'Polygon':
      case 'MultiPolygon':
        style = new ol.style.Style({
          fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.3)'
          }),
          stroke: new ol.style.Stroke({
            color: [0, 0, 0, 1.0],
            width: 2
          })
        });
        break;
    }
    this.layer = new ol.layer.Vector({
      source: new ol.source.Vector({
        features: new ol.format.GeoJSON().readFeatures(data, {
          featureProjection: mapProjection
        })
      }),
      visible: !!this.visible,
      style: style
    });
    mapService.getMap().addLayer(this.layer);
  },
  beforeDestroy: function beforeDestroy() {
    var mapService = _gui2.default.getComponent('map').getService();
    mapService.getMap().removeLayer(this.layer);
  }
}; /**
    * @file
    * @since v3.7
    */

},{"services/gui":319}],302:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mixins = exports.autocompleteMixin = exports.baseInputMixin = exports.metadataMixin = exports.widgetMixins = exports.formInputsMixins = exports.select2Mixin = exports.selectMixin = exports.resizeMixin = exports.geoMixin = exports.mediaMixin = exports.fieldsMixin = undefined;

var _autocomplete = require('mixins/autocomplete');

var _autocomplete2 = _interopRequireDefault(_autocomplete);

var _fields = require('mixins/fields');

var _fields2 = _interopRequireDefault(_fields);

var _media = require('mixins/media');

var _media2 = _interopRequireDefault(_media);

var _geo = require('mixins/geo');

var _geo2 = _interopRequireDefault(_geo);

var _resize = require('mixins/resize');

var _resize2 = _interopRequireDefault(_resize);

var _select = require('mixins/select');

var _select2 = _interopRequireDefault(_select);

var _select3 = require('mixins/select2');

var _select4 = _interopRequireDefault(_select3);

var _formInputs = require('mixins/form-inputs');

var _formInputs2 = _interopRequireDefault(_formInputs);

var _widget = require('mixins/widget');

var _widget2 = _interopRequireDefault(_widget);

var _metadata = require('mixins/metadata');

var _metadata2 = _interopRequireDefault(_metadata);

var _baseInput = require('mixins/base-input');

var _baseInput2 = _interopRequireDefault(_baseInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mixins = {
  autocompleteMixin: _autocomplete2.default,
  fieldsMixin: _fields2.default,
  mediaMixin: _media2.default,
  geoMixin: _geo2.default,
  resizeMixin: _resize2.default,
  selectMixin: _select2.default,
  select2Mixin: _select4.default,
  formInputsMixins: _formInputs2.default,
  widgetMixins: _widget2.default,
  metadataMixin: _metadata2.default,
  baseInputMixin: _baseInput2.default
}; /**
    * @file
    * @since v3.7
    */

exports.fieldsMixin = _fields2.default;
exports.mediaMixin = _media2.default;
exports.geoMixin = _geo2.default;
exports.resizeMixin = _resize2.default;
exports.selectMixin = _select2.default;
exports.select2Mixin = _select4.default;
exports.formInputsMixins = _formInputs2.default;
exports.widgetMixins = _widget2.default;
exports.metadataMixin = _metadata2.default;
exports.baseInputMixin = _baseInput2.default;
exports.autocompleteMixin = _autocomplete2.default;
exports.mixins = mixins;
exports.default = mixins;

},{"mixins/autocomplete":296,"mixins/base-input":297,"mixins/fields":299,"mixins/form-inputs":300,"mixins/geo":301,"mixins/media":303,"mixins/metadata":304,"mixins/resize":305,"mixins/select":306,"mixins/select2":307,"mixins/widget":308}],303:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @file
 * @since v3.7
 */

exports.default = {
  computed: {
    filename: function filename() {
      return this.value ? this.value.split('/').pop() : this.value;
    }
  },
  methods: {
    isMedia: function isMedia(value) {
      if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.constructor === Object) return !!value.mime_type;
      return false;
    },
    getMediaType: function getMediaType(mime_type) {
      var media = {
        type: null,
        options: {}
      };
      switch (mime_type) {
        case 'image/gif':
        case 'image/png':
        case 'image/jpeg':
        case 'image/bmp':
          media.type = 'image';
          break;
        case 'application/pdf':
          media.type = 'pdf';
          break;
        case 'video/mp4':
        case 'video/ogg':
        case 'video/x-ms-wmv':
        case 'video/x-msvideo':
        case 'video/quicktime':
          media.type = 'video';
          media.options.format = mime_type;
          break;
        case 'application/gzip':
        case 'application/zip':
          media.type = 'zip';
          break;
        case 'application/msword':
        case 'application/vnd.oasis.opendocument.text':
          media.type = 'text';
          break;
        case 'application/vnd.ms-office':
        case 'application/vnd.oasis.opendocument.spreadsheet':
          media.type = 'excel';
          break;
        case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
        case 'application/vnd.ms-powerpoint':
        case 'application/vnd.oasis.opendocument.presentation':
          media.type = 'ppt';
          break;
        default:
          media.type = 'unknow';
      }
      return media;
    }
  }
};

},{}],304:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.7
 */

exports.default = {
  methods: {
    findAttributeFormMetadataAttribute: function findAttributeFormMetadataAttribute(name) {
      return this.state.metadata ? this.state.metadata[name] !== undefined : false;
    },
    findMetadataAttribute: function findMetadataAttribute(name) {
      return this.state[name] !== undefined;
    }
  }
};

},{}],305:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.7
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('utils'),
    throttle = _require.throttle,
    debounce = _require.debounce;

var DELAY_TYPE = {
  throttle: throttle,
  debounce: debounce
};

exports.default = {
  created: function created() {
    var delayWrapper = this.delayType && DELAY_TYPE[this.delayType] || DELAY_TYPE.throttle;
    this.delayResize = this.resize ? delayWrapper(this.resize.bind(this), this.delayTime) : null;
    _gui2.default.on('resize', this.delayResize);
  },
  mounted: function () {
    var _ref = _asyncToGenerator(function* () {
      yield this.$nextTick();
      this.resize && this.resize();
    });

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    _gui2.default.off('resize', this.delayResize);
    this.delayResize = null;
    this.delayTime = null;
  }
};

},{"services/gui":319,"utils":419}],306:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * @file
 * @since v3.7
 */

var _require = require('core/i18n/i18n.service'),
    getAppLanguage = _require.getAppLanguage;

exports.default = {
  methods: {
    getLanguage: function getLanguage() {
      return getAppLanguage();
    },
    changeSelect: function changeSelect(value) {
      this.state.value = value === 'null' ? null : value;
      this.change();
    },
    getValue: function getValue(value) {
      return value === null ? 'null' : value;
    },
    resetValues: function resetValues() {
      this.state.input.options.values.splice(0);
    }
  },
  computed: {
    autocomplete: function autocomplete() {
      return this.state.input.type === 'select_autocomplete' && this.state.input.options.usecompleter;
    }
  },
  watch: {
    notvalid: function () {
      var _ref = _asyncToGenerator(function* (value) {
        yield this.$nextTick();
        if (this.select2) value ? this.select2.data('select2').$container.addClass("input-error-validation") : this.select2.data('select2').$container.removeClass("input-error-validation");
      });

      function notvalid(_x) {
        return _ref.apply(this, arguments);
      }

      return notvalid;
    }()
  }
};

},{"core/i18n/i18n.service":9}],307:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _resize = require('mixins/resize');

var _resize2 = _interopRequireDefault(_resize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file
 * @since v3.7
 */

exports.default = {
  mixins: [_resize2.default],
  methods: {
    setValue: function setValue() {
      this.select2.val(this.state.value).trigger('change');
    },
    resize: function resize() {
      this.select2 && !_applicationState2.default.ismobile && this.select2.select2('close');
    }
  },
  beforeDestroy: function beforeDestroy() {
    //destroy a select2  dom element
    this.select2 && this.select2.select2('destroy');
    // remove all event
    this.select2.off();
    this.select2 = null;
  }
};

},{"mixins/resize":305,"store/application-state":328}],308:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.7
 */

exports.default = {
  data: function data() {
    return {
      changed: false
    };
  },

  methods: {
    widgetChanged: function widgetChanged() {
      this.changed = true;
      this.change();
    },
    stateValueChanged: function stateValueChanged(value) {
      console.log('need to be implemented by widget'); // method to overwrite
    }
  },
  watch: {
    'state.value': function stateValue(value) {
      this.changed ? this.changed = false : this.stateValueChanged(value);
    }
  }
};

},{}],309:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file
 * @since v3.6
 */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    reject = _require.reject;

var G3WObject = require('core/g3wobject');

// Class Api Service
function ApiService() {
  this._config = null;
  this._baseUrl = null;
  this.init = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var d = $.Deferred();
    this._config = config;
    // prende l'url base delle api dal config dell'applicazione
    this._baseUrl = config.urls.api;
    this._apiEndpoints = config.urls.apiEndpoints;
    d.resolve();
    return d.promise();
  };
  var howManyAreLoading = 0;
  this._incrementLoaders = function () {
    howManyAreLoading === 0 && this.emit('apiquerystart');
    howManyAreLoading += 1;
  };

  this._decrementLoaders = function () {
    howManyAreLoading -= 1;
    howManyAreLoading === 0 && this.emit('apiqueryend');
  };
  this.get = function (api, options) {
    var _this = this;

    var apiEndPoint = this._apiEndpoints[api];
    if (apiEndPoint) {
      var completeUrl = this._baseUrl + '/' + apiEndPoint;
      if (options.request) completeUrl = completeUrl + '/' + options.request;
      var params = options.params || {};
      this.emit(api + 'querystart');
      this._incrementLoaders();
      return $.get(completeUrl, params).done(function (response) {
        _this.emit(api + 'queryend', response);
        return response;
      }).fail(function (error) {
        _this.emit(api + 'queryfail', error);
        return error;
      }).always(function () {
        return _this._decrementLoaders();
      });
    } else return reject();
  };
  base(this);
}

inherit(ApiService, G3WObject);

exports.default = new ApiService();

},{"core/g3wobject":8,"utils":419}],310:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _config = require('config');

var _config2 = _interopRequireDefault(_config);

var _constant = require('app/constant');

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _data = require('services/data');

var _data2 = _interopRequireDefault(_data);

var _plugins = require('store/plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _api = require('services/api');

var _api2 = _interopRequireDefault(_api);

var _clipboard = require('services/clipboard');

var _clipboard2 = _interopRequireDefault(_clipboard);

var _router = require('services/router');

var _router2 = _interopRequireDefault(_router);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('core/i18n/i18n.service'),
    i18ninit = _require.init,
    changeLanguage = _require.changeLanguage;

var _require2 = require('utils'),
    base = _require2.base,
    inherit = _require2.inherit,
    XHR = _require2.XHR,
    uniqueId = _require2.uniqueId;

var G3WObject = require('core/g3wobject');

/** @deprecated */
var _cloneDeep = require('lodash.clonedeep');

/**
 * Manage Application 
 */
var ApplicationService = function ApplicationService() {
  var _this = this;

  this.version = _constant.APP_VERSION;

  _applicationState2.default.iframe = window.top !== window.self;

  _applicationState2.default.online = navigator.onLine;

  _applicationState2.default.ismobile = isMobile.any;

  this.complete = false;

  /**
   * set base url
   */
  this.baseurl = '/';

  this.download_caller_id = null;

  /**
   * store all services sidebar etc..
   */
  this._applicationServices = {};

  this.config = {};

  this._initConfigUrl = null;

  this._initConfig = null;

  this._groupId = null;

  this._gid = null;

  this.setters = {
    changeProject: function changeProject() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          gid = _ref.gid,
          host = _ref.host;

      return this._changeProject({ gid: gid, host: host });
    },


    /**
     * @since 3.8.0
     */
    changeMapProject: function changeMapProject(_ref2) {
      var url = _ref2.url,
          epsg = _ref2.epsg;

      url = _gui2.default.getService('map').addMapExtentUrlParameterToUrl(url, epsg);
      history.replaceState(null, null, url);
      location.replace(url);
    },
    online: function online() {
      this.setOnline();
    },
    offline: function offline() {
      this.setOffline();
    },
    setFilterToken: function setFilterToken(filtertoken) {
      this._setFilterToken(filtertoken);
    }
  };

  base(this);

  /**
   * Set application user from intiConfig (passed as parameter)
   */
  this.on('initconfig', function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        user = _ref3.user;

    _this.setApplicationUser(user);
  });

  /**
   * init application
   */
  this.init = _asyncToGenerator(function* () {
    try {
      var config = yield this.createApplicationConfig();
      this.setConfig(config);
      this.setLayout('app', config.layout);
      return yield this.bootstrap();
    } catch (error) {
      var browserLanguage = navigator && navigator.language || 'en';
      var language = _config2.default.supportedLanguages.find(function (language) {
        return browserLanguage.indexOf(language) !== -1;
      });
      return Promise.reject({ error: error, language: language });
    }
  });

  /**
   * Load application translations (i18n languages)
   */
  this.setupI18n = function () {
    var _this2 = this;

    var languageConfig = this._config._i18n;
    languageConfig.appLanguages = this._config.i18n.map(function (languageLabel) {
      return languageLabel[0];
    });
    this.setApplicationLanguage(languageConfig.language);
    i18ninit(languageConfig);
    this._groupId = this._config.group.slug || this._config.group.name.replace(/\s+/g, '-').toLowerCase();
    // set Accept-Language request header based on config language
    $.ajaxSetup({
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('Accept-Language', _this2._config.user.i18n || 'en');
      }
    });
  };

  /**
   * @TODO check if deprecated
   */
  this.getCurrentProject = function () {
    return _projects2.default.getCurrentProject();
  };

  /**
   * @param {boolean} bool
   * @param {string} download_caller_id
   * 
   * @returns {null}
   */
  this.setDownload = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var download_caller_id = arguments[1];

    var give_me_a_name_0 = !download_caller_id;
    var give_me_a_name_1 = !bool && download_caller_id && this.download_caller_id === download_caller_id;
    var give_me_a_name_2 = !give_me_a_name_1 && download_caller_id && bool && this.download_caller_id === null;

    if (give_me_a_name_0) {
      _applicationState2.default.download = bool;
    }

    if (give_me_a_name_1) {
      _applicationState2.default.download = false;
      this.download_caller_id = null;
    }

    if (give_me_a_name_2) {
      _applicationState2.default.download = bool;
      this.download_caller_id = uniqueId();
    }

    return this.download_caller_id;
  };

  this.getDownload = function () {
    return _applicationState2.default.download;
  };

  /**
  * @param {string} plugin name of plugin
  */
  this.loadingPlugin = function (plugin) {
    _applicationState2.default.plugins.push(plugin);
  };

  /**
   * @param {string} plugin name of plugin
   */
  this.loadedPlugin = function (plugin) {
    //remove from list loading plugin
    _applicationState2.default.plugins = _applicationState2.default.plugins.filter(function (_plugin) {
      return _plugin !== plugin;
    });
  };

  /**
   * @param {string} filtertoken a string passed by server and used as parameter in XHR request
   */
  this._setFilterToken = function (filtertoken) {
    _applicationState2.default.tokens.filtertoken = filtertoken;
  };

  this.getFilterToken = function () {
    return _applicationState2.default.tokens.filtertoken;
  };

  /**
   * @param {string} language 
   */
  this.changeLanguage = function (language) {
    changeLanguage(language);
    /**
     * @deprecated Since v3.8. Will be deleted in v4.x. Use ApplicationState.language instead
     */
    _applicationState2.default.lng = language;
    _applicationState2.default.language = language;
    var pathArray = window.location.pathname.split('/');
    pathArray[1] = language;
    history.replaceState(null, null, pathArray.join('/'));
  };

  this.registerOnlineOfflineEvent = function () {
    var _this3 = this;

    this.registerWindowEvent({ evt: 'online', cb: function cb() {
        return _this3.online();
      } });
    this.registerWindowEvent({ evt: 'offline', cb: function cb() {
        return _this3.offline();
      } });
  };

  this.getBaseLayerId = function () {
    return _applicationState2.default.baseLayerId;
  };

  /**
   * @param {string} baseLayerId 
   */
  this.setBaseLayerId = function (baseLayerId) {
    _applicationState2.default.baseLayerId = baseLayerId;
  };

  /**
   * @FIXME weird parameter name (`bool`)
   * @FIXME unsued function paramater (`message`)
   */
  this.registerLeavePage = function () {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$bool = _ref5.bool,
        bool = _ref5$bool === undefined ? false : _ref5$bool,
        _ref5$message = _ref5.message,
        message = _ref5$message === undefined ? '' : _ref5$message;

    var _return = !bool ? undefined : bool;
    window.onbeforeunload = function (event) {
      return _return;
    };
  };

  this.unregisterOnlineOfflineEvent = function () {
    window.removeEventListener('online');
    window.removeEventListener('offline');
  };

  this.getState = function () {
    return _applicationState2.default;
  };

  /**
   * @FIXME weird parameter name (`bool`)
   */
  this.disableApplication = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _applicationState2.default.gui.app.disabled = bool;
  };

  /**
   * @param {string} language 
   */
  this.setApplicationLanguage = function () {
    var language = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';

    /**
     * @deprecated Since v3.8. Will be deleted in v4.x. Use ApplicationState.language instead
     */
    _applicationState2.default.lng = language;
    _applicationState2.default.language = language;
  };

  this.getApplicationLanguage = function () {
    return _applicationState2.default.language;
  };

  this.setOnline = function () {
    _applicationState2.default.online = true;
  };

  this.setOffline = function () {
    _applicationState2.default.online = false;
  };

  this.isOnline = function () {
    return _applicationState2.default.online;
  };

  /**
   * @param {string} id 
   * @param {Object} data 
   */
  this.setOfflineItem = function () {
    var _ref6 = _asyncToGenerator(function* (id) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this.setLocalItem({ id: id, data: data });
    });

    return function (_x8) {
      return _ref6.apply(this, arguments);
    };
  }();

  this.setLocalItem = function () {
    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        id = _ref7.id,
        data = _ref7.data;

    try {
      window.localStorage.setItem(id, JSON.stringify(data));
    } catch (error) {
      return error;
    }
  };

  /**
   * @param {string} id 
   */
  this.removeLocalItem = function (id) {
    window.localStorage.removeItem(id);
  };

  /**
   * @param {string} id 
   */
  this.getLocalItem = function (id) {
    var item = window.localStorage.getItem(id);
    return item ? JSON.parse(item) : undefined;
  };

  /**
   * @param {string} id 
   */
  this.getOfflineItem = function (id) {
    return this.getLocalItem(id);
  };

  /**
   * @param {string} id 
   */
  this.removeOfflineItem = function (id) {
    this.removeLocalItem(id);
  };

  /**
   * @returns {boolean} whether application is loaded within an <iframe>
   */
  this.isIframe = function () {
    return _applicationState2.default.iframe;
  };

  /**
   * get config
   */
  this.getConfig = function () {
    return this._config;
  };

  /**
   * @param {Object} config 
   */
  this.setConfig = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this._config = config;
  };

  /**
   * router service
   */
  this.getRouterService = function () {
    return _router2.default;
  };

  /**
   * @returns {string} application proxy url 
   */
  this.getProxyUrl = function () {
    return '' + this._initConfig.proxyurl;
  };

  /**
   * Get Interface OWS Url
   */
  this.getInterfaceOwsUrl = function () {
    return '' + this._initConfig.interfaceowsurl;
  };

  /**
   * clipboard service
   */
  this.getClipboardService = function () {
    return _clipboard2.default;
  };

  /**
   * Create application config object
   * @param initConfig
   * @returns {Promise<string|{terms_of_use_link, projects: ([{gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}], type: string}, {gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}, {qgs_layer_id: string, fields: [string]}, {qgs_layer_id: string, fields: [string]}], type: string}, {gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}, {qgs_layer_id: string, fields: [string]}], type: string}]|{gid: string, layers: [{qgs_layer_id: string, fields: [string, string, string]}], type: string}|[]), maxscale: (null|ProjectsRegistry.setProjects.config.maxscale), mediaurl: *, plugins: *, mapcontrols: *, tools: *, resourcesurl: *, initproject, urls: *, credits: *, getWmsUrl(*): string, _i18n: ({resources: {se: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, no_data: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}, fi: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, no_data: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}, en: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, no_data: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}, it: {translation: {cancel: string, no: string, error_map_loading: string, data: string, catalog: string, legend: string, copy_form_data: string, check_internet_connection_or_server_admin: string, show: string, save: string, back: string, server_error: string, mapcontrols: {area: {tooltip: string}, nominatim: {noresults: string, placeholder: string, notresponseserver: string}, add_layer_control: {select_csv_separator: string, select_csv_y_field: string, select_field_to_show: string, select_projection: string, header: string, select_color: string, select_csv_x_field: string, drag_layer: string}, query: {input_relation: string}, length: {tooltip: string}, screenshot: {error: string}, geolocations: {title: string, error: string}}, no_results: string, tools: string, changemap: string, default: string, logout: string, search: string, copy_form_data_from_feature: string, credits: {g3wSuiteFramework: string, productOf: string, g3wSuiteDescription: string}, sidebar: {}, close: string, exitnosave: string, sign_in: string, info: {link_button: string, open_link: string, server_error: string, title: string, no_results: string}, add: string, backto: string, yes: string, create_print: string, server_saver_error: string, tree: string, paste_form_data: string, no_other_projects: string, dosearch: string, baselayers: string, component: string, print: string, hide: string, annul: string, layer_selection_filter: {tools: {filter: string, nofilter: string, invert: string, show_features_on_map: string, clear: string}}, layer_is_added: string, catalog_items: {helptext: string, contextmenu: {vector_color_menu: string, show_metadata: string, open_attribute_table: string, styles: string, zoomtolayer: string}}, dataTable: {next: string, nodatafilterd: string, previous: string, infoFiltered: string, lengthMenu: string, info: string}, nobaselayer: string, could_not_load_vector_layers: string, street_search: string, sdk: {search: {all: string, layer_not_querable: string, error_loading: string, autocomplete: {inputshort: {pre: string, post: string}}, searching: string, layer_not_searchable: string, no_results: string}, print: {fids_instruction: string, help: string, no_layers: string, rotation: string, format: string, scale: string, fids_example: string, download_image: string}, metadata: {groups: {general: {title: string, fields: {fees: string, keywords: string, subfields: {contactinformation: {contactperson: string, contactvoicetelephone: string, personprimary: string, contactorganization: string, ContactOrganization: string, ContactPosition: string, contactposition: string, contactelectronicmailaddress: string, ContactPerson: string}}, accessconstraints: string, name: string, description: string, contactinformation: string, wms_url: string, abstract: string, title: string}}, layers: {groups: {general: string, spatial: string}, title: string, fields: {subfields: {dataurl: string, metadataurl: string, keywords: string, crs: string, bbox: string, name: string, attribution: string, attributes: string, source: string, abstract: string, title: string, geometrytype: string}, layers: string}}, spatial: {title: string, fields: {extent: string, crs: string}}}, title: string}, workflow: {next: string, steps: {title: string}}, form: {footer: {required_fields: string}, inputs: {date: string, input_validation_exclude_values: string, input_validation_max_field: string, string: string, varchar: string, textarea: string, input_validation_min_field: string, integer: string, float: string, input_validation_error: string, messages: {errors: {picklayer: string}}, input_validation_mutually_exclusive: string, text: string, bigint: string, tooltips: {picklayer: string, lonlat: string}, table: string}, messages: {qgis_input_widget_relation: string}, loading: string}, catalog: {menu: {download: {gpkg: string, csv: string, shp: string, gpx: string, xls: string}, wms: {copied: string, copy: string, title: string}}}, querybuilder: {search: {edit: string, run: string, delete: string, info: string}, additem: string, messages: {changed: string, number_of_features: string}, panel: {button: {all: string, test: string, save: string, clear: string, run: string, manual: string}, expression: string, operators: string, values: string, layers: string, fields: string}, error_run: string, delete: string, error_test: string}, mapcontrols: {querybypolygon: {help: string, tooltip: string, no_geometry: string}, measures: {area: {help: string, tooltip: string}, length: {help: string, tooltip: string}}, querybybbox: {help: string, tooltip: string, nolayers_visible: string}, addlayer: {tooltip: string, messages: {csv: {warning: string}}}, query: {tooltip: string, actions: {add_features_to_results: {hint: string}, download_features_csv: {hint: string}, atlas: {hint: string}, download_xls: {hint: string}, relations_charts: {hint: string}, zoom_to_feature: {hint: string}, download_features_gpkg: {hint: string}, zoom_to_features_extent: {hint: string}, download_csv: {hint: string}, download_features_shapefile: {hint: string}, download_features_xls: {hint: string}, download_shapefile: {hint: string}, add_selection: {hint: string}, download_gpx: {hint: string}, remove_feature_from_results: {hint: string}, download_features_gpx: {hint: string}, relations: {hint: string}, download_gpkg: {hint: string}}}, scale: {no_valid_scale: string}, geolocation: {tooltip: string}}, wps: {list_process: string, tooltip: string}, relations: {no_relations_found: string, relation_data: string, back_to_relations: string, list_of_relations_feature: string, error_missing_father_field: string}, errors: {add_external_layer: string, layers: {load: string}, unsupported_format: string}, tooltips: {zoom_to_features_extent: string, download_csv: string, download_shapefile: string, atlas: string, copy_map_extent_url: string, download_gpx: string, download_xls: string, relations: {row_to_form: string, form_to_row: string}, download_gpkg: string, show_chart: string}}}}}}|{resources: *}), views: (*|{}), group: *, vectorurl: *, debug: boolean, crs: *, apptitle: (string), header_custom_links, i18n: *, overviewproject: (*|null), layout: (*|{}), logo_img: *, baselayers: (string|vueComponentOptions.computed.baselayers|{count: number}|*), logo_link: *, background_color, terms_of_use_text: *, main_map_title: *, getProjectConfigUrl(*): string, user: (*|null), minscale: ProjectsRegistry.setProjects.config.minscale}>}
   */
  this.createApplicationConfig = function () {
    var _ref8 = _asyncToGenerator(function* (initConfig) {
      var config = _extends({}, _config2.default);
      try {

        initConfig = initConfig ? initConfig : yield this.obtainInitConfig({
          initConfigUrl: '' + _config2.default.server.urls.initconfig
        });

        // write urls of static files and media url (base url and vector url)
        this.baseurl = initConfig.baseurl;

        /** 
         * @type {{ macrogroups: * | [], groups: * | [] }}
         */

        var _ref9 = yield this.getMacrogroupsGroups(),
            macrogroups = _ref9.macrogroups,
            groups = _ref9.groups;

        /**
         * write urls of static files and media url (base url and vector url)
         */


        config.server.urls.baseurl = initConfig.baseurl;
        config.server.urls.frontendurl = initConfig.frontendurl;
        config.server.urls.staticurl = initConfig.staticurl;
        config.server.urls.clienturl = initConfig.staticurl + initConfig.client;
        config.server.urls.mediaurl = initConfig.mediaurl;
        config.server.urls.vectorurl = initConfig.vectorurl;
        config.server.urls.proxyurl = initConfig.proxyurl;
        config.server.urls.rasterurl = initConfig.rasterurl;
        config.server.urls.interfaceowsurl = initConfig.interfaceowsurl;

        config.main_map_title = initConfig.main_map_title;

        config.group = initConfig.group;

        config.user = initConfig.user;

        config.credits = initConfig.credits;

        config.i18n = initConfig.i18n;

        /**
         * get language from server
         */
        config._i18n.language = config.user.i18n;

        /**
         * check if is inside a iframe
         */
        config.group.layout.iframe = window.top !== window.self;

        /**
         * create application configuration
         */
        return {
          apptitle: config.apptitle || '',
          logo_img: config.group.header_logo_img,
          logo_link: config.group.header_logo_link,
          terms_of_use_text: config.group.header_terms_of_use_text,
          terms_of_use_link: config.group.terms_of_use_link,
          header_custom_links: config.group.header_custom_links,
          debug: config.client.debug || false,
          group: config.group,
          urls: config.server.urls,
          mediaurl: config.server.urls.mediaurl,
          resourcesurl: config.server.urls.clienturl,
          vectorurl: config.server.urls.vectorurl,
          rasterurl: config.server.urls.rasterurl,
          interfaceowsurl: config.server.urls.interfaceowsurl,
          projects: config.group.projects,
          initproject: config.group.initproject,
          overviewproject: config.group.overviewproject && config.group.overviewproject.gid ? config.group.overviewproject : null,
          baselayers: config.group.baselayers,
          mapcontrols: config.group.mapcontrols,
          background_color: config.group.background_color,
          crs: config.group.crs,
          minscale: config.group.minscale,
          maxscale: config.group.maxscale,
          main_map_title: config.main_map_title,
          credits: config.credits,
          _i18n: config._i18n,
          i18n: config.i18n,
          layout: config.group.layout || {},
          /**
           * needed by ProjectService
           */
          getWmsUrl: function getWmsUrl(project) {
            return config.server.urls.baseurl + config.server.urls.ows + '/' + config.group.id + '/' + project.type + '/' + project.id + '/';
          },

          /**
           * needed by ProjectsRegistry to get informations about project configuration 
           */
          getProjectConfigUrl: function getProjectConfigUrl(project) {
            return config.server.urls.baseurl + config.server.urls.config + '/' + config.group.id + '/' + project.type + '/' + project.id + '?_t=' + project.modified;
          },

          plugins: config.group.plugins,
          tools: config.tools,
          views: config.views || {},
          user: config.user || null,
          /**
           * @since 3.8.0
           */
          groups: groups,
          macrogroups: macrogroups
        };
      } catch (error) {
        return Promise.reject(error);
      }
    });

    return function (_x11) {
      return _ref8.apply(this, arguments);
    };
  }();

  /**
   * @returns { Promise<{ macrogroups: * | [], groups: * | [] }> }
   * 
   * @since 3.8.0
   */
  this.getMacrogroupsGroups = _asyncToGenerator(function* () {
    var macrogroups = [];
    var groups = [];
    try {
      macrogroups = yield XHR.get({ url: '/' + this.getApplicationUser().i18n + _constant.API_BASE_URLS.ABOUT.macrogroups });
    } catch (err) {}
    try {
      groups = yield XHR.get({ url: '/' + this.getApplicationUser().i18n + _constant.API_BASE_URLS.ABOUT.nomacrogoups });
    } catch (err) {}
    return {
      macrogroups: macrogroups,
      groups: groups
    };
  });

  this.obtainInitConfig = _asyncToGenerator(function* () {
    var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        initConfigUrl = _ref12.initConfigUrl,
        url = _ref12.url,
        host = _ref12.host;

    if (!this._initConfigUrl) this._initConfigUrl = initConfigUrl;else this.clearInitConfig();

    // if exist a global initConfig
    this._initConfig = window.initConfig;

    var projectPath = void 0;

    // DEPRECATED: will be removed after v4.0
    var locationsearch = url ? url.split('?')[1] : location.search.substring(1);

    if (locationsearch) {
      //check if exist project in url
      /**
       * The way to extract project group,type and id
       * Example http:localhost:3000/?project=3003/qdjango/1
       * is deprecate
       */
      locationsearch.split('&').forEach(function (queryTuple) {
        projectPath = queryTuple.indexOf("project") > -1 ? queryTuple.split("=")[1] : projectPath;
      });

      ///////////////////////////////////////////////////////////////////
    } else if (this._gid) {
      projectPath = this._groupId + '/' + this._gid.split(':').join('/');
    }

    try {
      if (projectPath) {
        // get configuration from server
        this._initConfig = yield this.getInitConfig('' + (host || '') + this.baseurl + this._initConfigUrl + '/' + projectPath);
      }
    } catch (error) {
      return Promise.reject(error);
    } finally {
      window.initConfig = this._initConfig;
      this.emit('initconfig', this._initConfig);
      this.setInitVendorKeys(this._initConfig);
      return Promise.resolve(this._initConfig);
    }
  });

  // method to get initial application configuration
  this.getInitConfig = function (url) {
    var _this4 = this;

    return new Promise(function (resolve, reject) {
      if (_this4._initConfig) resolve(_this4._initConfig);else XHR.get({ url: url }).then(function (initConfig) {
        return resolve(initConfig);
      }).catch(function (error) {
        return reject(error);
      });
    });
  };

  /**
   * Fetch configuration from server
   */
  this.getInitConfigUrl = function () {
    return this._initConfigUrl;
  };

  this.setInitConfigUrl = function (initConfigUrl) {
    this._initConfigUrl = initConfigUrl;
  };

  /**
   * set EPSG of Application (eg. during a WMS request for table layer )
   */
  this.setEPSGApplication = function (project) {
    _applicationState2.default.map.epsg = project.state.crs.epsg;
  };

  /**
   * Set application User 
   */
  this.setApplicationUser = function (user) {
    _applicationState2.default.user = user;
  };

  /**
   * Get application User 
   */
  this.getApplicationUser = function () {
    return _applicationState2.default.user;
  };

  /**
   * Bootstrap application (when called init)
   * 
   * 1 - load translations (i18n languages)
   * 2 - skip loading on `ApplicationState.ready` (ie. already initialized) --> automatically reject after Timeout
   * 3 - initialize ProjectsRegistry
   * 4 - inizialize ApiService
   * 5 - attach DOM events ('online' and 'offline')
   * 6 - trigger 'ready' event
   * 7 - set current project `gid` (group id)
   * 8 - set current project EPSG (coordinate system)
   * 9 - check if application is loaded within an <IFRAME>
   * 10 - initialize DataRouterService
   */
  this.bootstrap = function () {
    var _this5 = this;

    return new Promise(function (resolve, reject) {
      _this5.setupI18n();
      var timeout = setTimeout(function () {
        reject('Timeout');
      }, _constant.TIMEOUT);
      if (!_applicationState2.default.ready) {
        $.when(_projects2.default.init(_this5._config), _api2.default.init(_this5._config)).then(function () {
          clearTimeout(timeout);
          _this5.registerOnlineOfflineEvent();
          _this5.emit('ready');
          _applicationState2.default.ready = _this5.initialized = true;
          var project = _projects2.default.getCurrentProject();
          _this5._gid = project.getGid();
          _this5.setEPSGApplication(project);
          if (_applicationState2.default.iframe) {
            _this5.startIFrameService({ project: project });
          }
          _data2.default.init();
          _this5.initLocalItems();
          resolve(true);
        }).fail(function (error) {
          return reject(error);
        });
      }
    });
  };

  /**
   * Run the following tasks after boostrap:
   * 
   * 1 - check for `this.complete`
   * 2 - initialize RouterService (once)
   * 3 - initialize PluginsRegistry (once and after ProjectsRegistry and ApiService are initialized)
   * 4 - trigger 'complete' event
   */
  this.postBootstrap = _asyncToGenerator(function* () {
    if (!this.complete) {
      try {
        _router2.default.init();
        yield _plugins2.default.init({
          pluginsBaseUrl: this._config.urls.staticurl,
          pluginsConfigs: this._config.plugins,
          otherPluginsConfig: _projects2.default.getCurrentProject().getState()
        });
      } catch (err) {
        console.warn(err);
      } finally {
        this.complete = true;
        this.emit('complete');
      }
    }
  });

  /**
   * iframeservice 
   */
  this.startIFrameService = function () {
    var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        project = _ref14.project;

    var iframeService = require('services/iframe').default;
    iframeService.init({ project: project });
  };

  this.registerWindowEvent = function () {
    var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        evt = _ref15.evt,
        cb = _ref15.cb;

    window.addEventListener(evt, cb);
  };

  this.unregisterWindowEvent = function () {
    var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        evt = _ref16.evt,
        cb = _ref16.cb;

    window.removeEventListener(evt, cb);
  };

  this.registerService = function (element, service) {
    this._applicationServices[element] = service;
  };

  this.unregisterService = function (element) {
    delete this._applicationServices[element];
  };

  this.getApplicationService = function (type) {
    return this._applicationServices[type];
  };

  this.getService = function (element) {
    return this._applicationServices[element];
  };

  this.errorHandler = function (error) {};

  /**
   * clear initConfig
   */
  this.clearInitConfig = function () {
    window.initConfig = this._initConfig = null;
  };

  this.setInitVendorKeys = function () {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var vendorkeys = config.group.vendorkeys || {};
    config.group.baselayers.forEach(function (baselayer) {
      if (baselayer.apikey) {
        vendorkeys[baselayer.servertype ? baselayer.servertype.toLowerCase() : null] = baselayer.apikey;
      }
    });
    this.setVendorKeys(vendorkeys);
  };

  this.setVendorKeys = function () {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    Object.keys(keys).forEach(function (key) {
      return _applicationState2.default.keys.vendorkeys[key] = keys[key];
    });
  };

  /**
   * change View 
   */
  this.changeProjectView = function (change) {
    _applicationState2.default.changeProjectview = change;
  };

  this.isProjectViewChanging = function () {
    return _applicationState2.default.changeProjectview;
  };

  /**
   * It used by plugin https://github.com/g3w-suite/g3w-client-plugin-openrouteservice
   */
  this.reloadCurrentProject = function () {
    return this.changeProject({ gid: _projects2.default.getCurrentProject().getGid() });
  };

  /**
   * @TODO check if deprecated
   * 
   * Perfom again all requests and rebuild interface on change project
   *  
   * @param project.gid
   * @param project.host
   * @param project.crs
   * 
   * @returns {JQuery.Promise<any, any, any>}
   */
  this._changeProject = function () {
    var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gid = _ref17.gid,
        host = _ref17.host,
        crs = _ref17.crs;

    var d = $.Deferred();
    this._gid = gid;
    var projectUrl = _projects2.default.getProjectUrl(gid);
    var url = _gui2.default.getService('map').addMapExtentUrlParameterToUrl(projectUrl, crs);
    /**
     * @since 3.7.15
     */
    // in case of url with not same origin (CORS issue) trigger an error
    try {
      history.replaceState(null, null, url);
    } catch (err) {}
    location.replace(url);
    d.resolve();
    return d.promise();
  };

  /**
   * Updates panels sizes when showing content (eg. bottom "Attribute Table" panel, right "Query Results" table)
   */
  this.setLayout = function () {
    var who = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'app';
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


    var default_config = config.rightpanel || {
      width: 50, // ie. width == 50%  
      height: 50, // ie. height == 50%
      width_default: 50,
      height_default: 50,
      width_100: false,
      height_100: false
    };

    config.rightpanel = Object.assign(default_config, {
      width: config.rightpanel.width || default_config.width,
      height: config.rightpanel.height || default_config.width,
      width_default: config.rightpanel.width || default_config.width,
      height_default: config.rightpanel.height || default_config.width,
      width_100: false,
      height_100: false
    });

    _applicationState2.default.gui.layout[who] = config;
  };

  this.removeLayout = function (who) {
    who && delete _applicationState2.default.gui.layout[who];
  };

  this.setCurrentLayout = function () {
    var who = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'app';

    _applicationState2.default.gui.layout.__current = who;
  };

  this.getCurrentLayout = function () {
    return _applicationState2.default.gui.layout[_applicationState2.default.gui.layout.__current];
  };

  this.getCurrentLayoutName = function () {
    return _applicationState2.default.gui.layout.__current;
  };

  this.cloneLayout = function () {
    var which = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'app';

    return _cloneDeep(_applicationState2.default.gui.layout[which]);
  };

  this.clear = function () {
    this.unregisterOnlineOfflineEvent();
  };

  /**
   * Initialize each local item if not yet initialized
   * 
   * @since v3.8
   */
  this.initLocalItems = function () {
    var _this6 = this;

    Object.keys(_constant.LOCAL_ITEM_IDS).forEach(function (id) {
      undefined === _this6.getLocalItem(id) && _this6.setLocalItem({ id: id, data: _constant.LOCAL_ITEM_IDS[id].value });
    });
  };
};

inherit(ApplicationService, G3WObject);

exports.default = new ApplicationService();

},{"app/constant":5,"config":4,"core/g3wobject":8,"core/i18n/i18n.service":9,"lodash.clonedeep":"lodash.clonedeep","services/api":309,"services/clipboard":311,"services/data":317,"services/gui":319,"services/iframe":320,"services/router":324,"store/application-state":328,"store/plugins":334,"store/projects":335,"utils":419}],311:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file
 * @since v3.6
 */

function ClipboardService() {
  this._data = {};
  this.set = function (formId, data) {
    var formLayer = formId.split('form')[0];
    this._data[formLayer] = data;
  };

  this.get = function (formLayer) {
    var data = this._data[formLayer] || {};
    this._data[formLayer] = {};
    return data;
  };
}

exports.default = new ClipboardService();

},{}],312:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getFeaturesFromResponseVectorApi = require('utils/getFeaturesFromResponseVectorApi');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */


var BaseService = require('core/data/service');

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    XHR = _require.XHR;

function ExpressionService() {

  base(this);

  /**
   * POST only: accepts
   * 
   * Mandatory JSON body: expression
   * Optional JSON body: form_data and qgs_layer_id (QGIS layer id)
   * 
   * @param params.qgis_layer_id layer id owner of the form data
   * @param params.layer_id      layer owner of the data
   * @param params.form_data
   * @param params.field_name    since 3.8.0
   * @param params.expression
   * @param params.formatter
   * @param params.parent
   * 
   * @returns { Promise<void> }
   */
  this.expression = _asyncToGenerator(function* () {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    try {
      return this.handleResponse((
      // response
      yield this.handleRequest({
        url: '' + this.project.getUrl('vector_data') + params.layer_id + '/',
        params: params
      })));
    } catch (err) {
      return Promise.reject(err);
    }
  });

  /**
   * POST only method to return QGIS Expressions evaluated in Project an optional Layer/Form context
   *
   * Mandatory JSON body: expression
   * Optional JSON body: form_data and qgs_layer_id (QGIS layer id)
   * 
   * @param params.layer_id
   * @param params.qgis_layer_id
   * @param params.form_data
   * @param params.field_name    since 3.8.0
   * @param params.expression
   * @param params.formatter
   * @param params.parent
   * 
   * @returns { Promise<void> }
   */
  this.expression_eval = function () {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return this.handleRequest({
      url: this.project.getUrl('expression_eval'),
      params: params
    });
  };

  /**
   * Handle server request
   * 
   * @param url
   * @param params
   * @param contentType
    * @returns { Promise<*> }
   */
  this.handleRequest = function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref2.url,
        _ref2$params = _ref2.params,
        params = _ref2$params === undefined ? {} : _ref2$params,
        _ref2$contentType = _ref2.contentType,
        contentType = _ref2$contentType === undefined ? 'application/json' : _ref2$contentType;

    return XHR.post({ url: url, contentType: contentType, data: JSON.stringify(params) });
  };

  /**
   * Handle server response
   * 
   * @param response
   */
  this.handleResponse = function () {
    var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return (0, _getFeaturesFromResponseVectorApi.getFeaturesFromResponseVectorApi)(response);
  };
}

inherit(ExpressionService, BaseService);

exports.default = new ExpressionService();

},{"core/data/service":6,"utils":419,"utils/getFeaturesFromResponseVectorApi":396}],313:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    XHR = _require.XHR;

var BaseService = require('core/data/service');

function OWSService() {
  base(this);
  /**
   *
   * @param params
   * @returns {Promise<{data: string, response: *}>}
   */
  this.wmsCapabilities = _asyncToGenerator(function* () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref2.url;

    var owsUrl = '' + _application2.default.getInterfaceOwsUrl();
    try {
      var params = {
        url: url,
        service: "wms"
      };
      var data = JSON.stringify(params);
      var response = yield XHR.post({
        url: owsUrl,
        contentType: 'application/json',
        data: data
      });
      return response;
    } catch (err) {
      return;
    }
  });
}

inherit(OWSService, BaseService);

exports.default = new OWSService();

},{"core/data/service":6,"services/application":310,"utils":419}],314:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    XHR = _require.XHR;

var BaseService = require('core/data/service');

function ProxyService() {
  base(this);
  /**
   *
   * @param data: Object conitans data to pass to proxy
   * @returns {Promise<{data: string, response: *}>}
   */
  this.wms = _asyncToGenerator(function* () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref2.url,
        _ref2$method = _ref2.method,
        method = _ref2$method === undefined ? 'GET' : _ref2$method,
        _ref2$params = _ref2.params,
        params = _ref2$params === undefined ? {} : _ref2$params,
        _ref2$headers = _ref2.headers,
        headers = _ref2$headers === undefined ? {} : _ref2$headers;

    var proxyUrl = '' + _application2.default.getProxyUrl();
    if (method === 'GET') {
      url = new URL(url);
      Object.keys(params).forEach(function (param) {
        return url.searchParams.set(param, params[param]);
      });
      url = url.toString();
    }
    try {
      var data = JSON.stringify({
        url: url,
        params: params,
        headers: headers,
        method: method
      });
      var response = yield XHR.post({
        url: proxyUrl,
        contentType: 'application/json',
        data: data
      });
      return {
        response: response,
        data: data
      };
    } catch (err) {
      return;
    }
  });

  /**
   * Generic proxy data function
   * @param params
   */
  this.data = function () {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  };
}

inherit(ProxyService, BaseService);

exports.default = new ProxyService();

},{"core/data/service":6,"services/application":310,"utils":419}],315:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * @file
                                                                                                                                                                                                                                                                   * @since v3.6
                                                                                                                                                                                                                                                                   */

var _constant = require("app/constant");

var _getQueryLayersPromisesByCoordinates = require("utils/getQueryLayersPromisesByCoordinates");

var _getQueryLayersPromisesByGeometry = require("utils/getQueryLayersPromisesByGeometry");

var _getQueryLayersPromisesByBBOX = require("utils/getQueryLayersPromisesByBBOX");

var _getMapLayersByFilter = require("utils/getMapLayersByFilter");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var BaseService = require('core/data/service');

function QueryService() {
  base(this);
  /**
   *
   * @type {{filtrable: {ows: string}}}
   */
  this.condition = {
    filtrable: {
      ows: 'WFS'
    }
  };

  /**
   * @param {{ feature: unknown, feature_count: unknown, filterConfig: unknown, multilayers: boolean, condition: boolean, excludeLayers: unknown[] }}
   * 
   * @returns {Promise<unknown>}
   */
  this.polygon = function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        feature = _ref.feature,
        _ref$feature_count = _ref.feature_count,
        feature_count = _ref$feature_count === undefined ? this.project.getQueryFeatureCount() : _ref$feature_count,
        _ref$filterConfig = _ref.filterConfig,
        filterConfig = _ref$filterConfig === undefined ? {} : _ref$filterConfig,
        _ref$multilayers = _ref.multilayers,
        multilayers = _ref$multilayers === undefined ? false : _ref$multilayers,
        _ref$condition = _ref.condition,
        condition = _ref$condition === undefined ? this.condition : _ref$condition,
        _ref$layerName = _ref.layerName,
        layerName = _ref$layerName === undefined ? '' : _ref$layerName,
        _ref$excludeSelected = _ref.excludeSelected,
        excludeSelected = _ref$excludeSelected === undefined ? null : _ref$excludeSelected,
        _ref$external = _ref.external,
        external = _ref$external === undefined ? {
      add: true,
      filter: {
        SELECTED: false
      }
    } : _ref$external,
        _ref$type = _ref.type,
        type = _ref$type === undefined ? 'polygon' : _ref$type;

    var hasExternalLayersSelected = this.hasExternalLayerSelected({ type: "vector" });
    var fid = hasExternalLayersSelected ? feature.getId() : feature.get(_constant.G3W_FID);
    var geometry = feature.getGeometry();

    // in case no geometry on polygon layer response
    if (!geometry) {
      return this.returnExceptionResponse({
        usermessage: {
          type: 'warning',
          message: layerName + " - " + t('sdk.mapcontrols.querybypolygon.no_geometry'),
          messagetext: true,
          autoclose: false
        }
      });
    }
    return this.handleRequest(
    // request
    (0, _getQueryLayersPromisesByGeometry.getQueryLayersPromisesByGeometry)(
    // layers
    (0, _getMapLayersByFilter.getMapLayersByFilter)(_extends({}, "boolean" === typeof excludeSelected ? { SELECTED: !excludeSelected } : { SELECTED_OR_ALL: true }, {
      FILTERABLE: true,
      VISIBLE: true
    }), condition),
    // options
    {
      geometry: geometry,
      multilayers: multilayers,
      feature_count: feature_count,
      filterConfig: filterConfig,
      projection: this.project.getProjection()
    }),
    // query
    {
      fid: fid,
      geometry: geometry,
      layerName: layerName,
      type: type,
      filterConfig: filterConfig,
      external: external
    });
  };

  /**
   *
   * @param bbox
   * @param feature_count
   * @param multilayers
   * @param condition
   * @param layersFilterObject
   * @returns {Promise<unknown>}
   */
  this.bbox = function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        bbox = _ref2.bbox,
        _ref2$feature_count = _ref2.feature_count,
        feature_count = _ref2$feature_count === undefined ? this.project.getQueryFeatureCount() : _ref2$feature_count,
        _ref2$filterConfig = _ref2.filterConfig,
        filterConfig = _ref2$filterConfig === undefined ? {} : _ref2$filterConfig,
        _ref2$multilayers = _ref2.multilayers,
        multilayers = _ref2$multilayers === undefined ? false : _ref2$multilayers,
        _ref2$condition = _ref2.condition,
        condition = _ref2$condition === undefined ? this.condition : _ref2$condition,
        _ref2$excludeSelected = _ref2.excludeSelected,
        excludeSelected = _ref2$excludeSelected === undefined ? null : _ref2$excludeSelected,
        _ref2$addExternal = _ref2.addExternal,
        addExternal = _ref2$addExternal === undefined ? true : _ref2$addExternal,
        _ref2$layersFilterObj = _ref2.layersFilterObject,
        layersFilterObject = _ref2$layersFilterObj === undefined ? { SELECTED_OR_ALL: true, FILTERABLE: true, VISIBLE: true } : _ref2$layersFilterObj;

    var hasExternalLayersSelected = this.hasExternalLayerSelected({ type: "vector" });
    var query = {
      bbox: bbox,
      type: 'bbox',
      filterConfig: filterConfig,
      external: {
        add: addExternal,
        filter: {
          SELECTED: hasExternalLayersSelected || ('boolean' == typeof excludeSelected ? excludeSelected : false)
        }
      }
    };

    // Check If LayerIds is length === 0 so i check if add external Layer is selected
    if (hasExternalLayersSelected) {
      return this.handleRequest(this.getEmptyRequest(), query);
    }

    return this.handleRequest(
    //request
    (0, _getQueryLayersPromisesByBBOX.getQueryLayersPromisesByBBOX)(
    // layers
    (0, _getMapLayersByFilter.getMapLayersByFilter)(layersFilterObject, condition),
    //options
    {
      bbox: bbox,
      feature_count: feature_count,
      filterConfig: filterConfig,
      multilayers: multilayers
    }),
    // query
    query);
  };

  /**
   * @param {{ coordinates: unknown, layerIds: unknown[], multilayers: boolean, query_point_tolerance: number, feature_count: number }}
   * 
   * @returns {Promise<unknown>}
   */
  this.coordinates = _asyncToGenerator(function* () {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        coordinates = _ref4.coordinates,
        _ref4$layerIds = _ref4.layerIds,
        layerIds = _ref4$layerIds === undefined ? [] : _ref4$layerIds,
        _ref4$multilayers = _ref4.multilayers,
        multilayers = _ref4$multilayers === undefined ? false : _ref4$multilayers,
        _ref4$query_point_tol = _ref4.query_point_tolerance,
        query_point_tolerance = _ref4$query_point_tol === undefined ? _constant.QUERY_POINT_TOLERANCE : _ref4$query_point_tol,
        _ref4$addExternal = _ref4.addExternal,
        addExternal = _ref4$addExternal === undefined ? true : _ref4$addExternal,
        feature_count = _ref4.feature_count;

    var hasExternalLayersSelected = this.hasExternalLayerSelected({ type: "vector" });
    var query = {
      coordinates: coordinates,
      type: 'coordinates',
      external: {
        add: addExternal,
        filter: {
          SELECTED: hasExternalLayersSelected
        }
      }
    };

    // Return an empty request if an external layer is selected
    if (hasExternalLayersSelected && 0 === layerIds.length) {
      return this.handleRequest(this.getEmptyRequest(), query);
    }

    var layersFilterObject = {
      QUERYABLE: true,
      SELECTED_OR_ALL: 0 === layerIds.length,
      VISIBLE: true
    };

    if (Array.isArray(layerIds)) {
      layerIds.forEach(function (id) {
        if (!layersFilterObject.IDS) layersFilterObject.IDS = [];
        layersFilterObject.IDS.push(id);
      });
    }

    var layers = (0, _getMapLayersByFilter.getMapLayersByFilter)(layersFilterObject);

    // set external property `add: false` in case
    // of selected layer in order to avoid querying
    // a temporary layer (external layer)

    if (1 === layers.length && layers[0].isSelected()) {
      query.external.add = false;
    }

    return this.handleRequest(
    // request
    (0, _getQueryLayersPromisesByCoordinates.getQueryLayersPromisesByCoordinates)(
    // layers
    layers,
    // options
    {
      multilayers: multilayers,
      feature_count: feature_count,
      query_point_tolerance: query_point_tolerance,
      coordinates: coordinates
    }),
    // query
    query);
  });

  /**
   *
   * @param request is a Promise(jquery promise at moment
   * @returns {Promise<unknown>}
   */
  this.handleRequest = function (request) {
    var _this = this;

    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      request.then(function (response) {
        var results = _this.handleResponse(response, query);
        resolve(results);
      }).fail(reject);
    });
  };

  /**
   *
   * @param response
   * @returns {Promise<{result: boolean, data: [], query: (*|null)}>}
   */
  this.handleResponse = function (response) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var layersResults = response;
    var results = {
      query: query,
      type: 'ows',
      data: [],
      result: true // set result to true
    };
    layersResults.forEach(function (result) {
      return result.data && result.data.forEach(function (data) {
        return results.data.push(data);
      });
    });
    return results;
  };

  /**
   * Exception response has user message attribute
   */
  this.returnExceptionResponse = function () {
    var _ref6 = _asyncToGenerator(function* (_ref5) {
      var usermessage = _ref5.usermessage;

      return {
        data: [],
        usermessage: usermessage,
        result: true,
        error: true
      };
    });

    return function (_x6) {
      return _ref6.apply(this, arguments);
    };
  }();
}

inherit(QueryService, BaseService);

exports.default = new QueryService();

},{"app/constant":5,"core/data/service":6,"core/i18n/i18n.service":9,"utils":419,"utils/getMapLayersByFilter":401,"utils/getQueryLayersPromisesByBBOX":405,"utils/getQueryLayersPromisesByCoordinates":406,"utils/getQueryLayersPromisesByGeometry":407}],316:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createOlFeatureFromApiResponseFeature = require('utils/createOlFeatureFromApiResponseFeature');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */


var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var BaseService = require('core/data/service');

function SearchService() {

  base(this);

  /**
   * Method to search features
   * 
   * @param options.layer
   * @param { 'api' | 'ows' } options.search_endpoint
   * @param options.filter
   * @param options.raw
   * @param options.queryUrl
   * @param options.feature_count
   * @param options.formatter
   * @param options.ordering
   * 
   * @returns { Promise<{ data: [], query: { type: 'search', search: * }, type: 'api' | 'ows' }> }
   */
  this.features = _asyncToGenerator(function* () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      layer: layer,
      search_endpoint: search_endpoint,
      filter: filter,
      raw: false,
      queryUrl: queryUrl,
      feature_count: feature_count,
      formatter: 1,
      ordering: ordering
    };
    return _asyncToGenerator(function* () {

      var promises = [];

      var layer = options.layer,
          params = _objectWithoutProperties(options, ['layer']);

      var _options$raw = options.raw,
          raw = _options$raw === undefined ? false : _options$raw,
          filter = options.filter;

      var data = [];
      var layers = Array.isArray(layer) ? layer : [layer]; // check if layer is array
      params.filter = Array.isArray(params.filter) ? params.filter : [params.filter]; // check if filter is array

      // if 'api' or 'ows' search_endpoint
      if ('api' === params.search_endpoint) {
        layers.forEach(function (layer, i) {
          return promises.push(layer.searchFeatures(_extends({}, params, { filter: params.filter[i] })));
        });
      } else {
        promises.push(new Promise(function (resolve, reject) {
          layers[0] // get query provider for get one request only
          .getProvider('search').query(_extends({}, params, { layers: layers }, layers[0].getSearchParams()) /* get search params*/).then(function (data) {
            resolve({ data: data });
          }).fail(reject);
        }));
      }

      (yield Promise.allSettled(promises)).forEach(function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            status = _ref3.status,
            value = _ref3.value;

        // filter only fulfilled response
        if ('fulfilled' !== status) {
          return;
        }
        if (raw) {
          data.push('api' === params.search_endpoint ? { data: value } : value);
        } else if ('api' !== params.search_endpoint) {
          data = value.data = undefined !== value.data ? value.data : [];
        } else if (Array.isArray(value.data) && value.data.length) {
          data.push(value.data[0]);
        }
      });

      return {
        data: data,
        query: {
          type: 'search',
          search: filter
        },
        type: params.search_endpoint
      };
    })();
  });

  /**
   * Return feature from api
   * 
   * @param opts.layer
   * @param opts.formatter
   * @param opts.fids
   * 
   * @returns { Promise<{ data: Array<{ layer: *, features: []}>, query: { type: 'search' }}> } 
   */
  this.fids = _asyncToGenerator(function* () {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layer = _ref5.layer,
        _ref5$formatter = _ref5.formatter,
        formatter = _ref5$formatter === undefined ? 0 : _ref5$formatter,
        _ref5$fids = _ref5.fids,
        fids = _ref5$fids === undefined ? [] : _ref5$fids;

    var features = [];
    try {
      var feats = layer && (yield layer.getFeatureByFids({ fids: fids, formatter: formatter }));
      if (feats) {
        feats.forEach(function (f) {
          return features.push((0, _createOlFeatureFromApiResponseFeature.createOlFeatureFromApiResponseFeature)(f));
        });
      }
    } catch (err) {
      console.warn(err);
    }
    return {
      data: [{
        layer: layer,
        features: features
      }],
      query: { type: 'search' }
    };
  });

  /**
   * Search service function to load many layers with each one with its fids
   * 
   * @param options.layers    - Array of layers that we want serach fids features
   * @param options.fids      - Array of array of fids
   * @param options.formatter - how we want visualize
   * 
   * @returns { Promise<{ data: [], query: { type: 'search' }}> }
   */
  this.layersfids = _asyncToGenerator(function* () {
    var _this = this;

    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref7$layers = _ref7.layers,
        layers = _ref7$layers === undefined ? [] : _ref7$layers,
        _ref7$fids = _ref7.fids,
        fids = _ref7$fids === undefined ? [] : _ref7$fids,
        _ref7$formatter = _ref7.formatter,
        formatter = _ref7$formatter === undefined ? 0 : _ref7$formatter;

    var promises = [];
    var data = [];
    layers.forEach(function (layer, i) {
      promises.push(_this.fids({ layer: layer, fids: fids[i], formatter: formatter }));
    });
    try {
      (yield Promise.all(promises)).forEach(function (response) {
        data.push(response.data);
      });
    } catch (err) {
      console.warn(err);
    }
    return {
      data: data,
      query: { type: 'search' }
    };
  });
}

inherit(SearchService, BaseService);

exports.default = new SearchService();

},{"core/data/service":6,"utils":419,"utils/createOlFeatureFromApiResponseFeature":366}],317:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dataExpression = require('services/data-expression');

var _dataExpression2 = _interopRequireDefault(_dataExpression);

var _dataOws = require('services/data-ows');

var _dataOws2 = _interopRequireDefault(_dataOws);

var _dataProxy = require('services/data-proxy');

var _dataProxy2 = _interopRequireDefault(_dataProxy);

var _dataQuery = require('services/data-query');

var _dataQuery2 = _interopRequireDefault(_dataQuery);

var _dataSearch = require('services/data-search');

var _dataSearch2 = _interopRequireDefault(_dataSearch);

var _iframe = require('services/iframe');

var _iframe2 = _interopRequireDefault(_iframe);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * @file
                                                                                                                                                                                                     * @since v3.6
                                                                                                                                                                                                     */

var _require = require('utils'),
    splitContextAndMethod = _require.splitContextAndMethod;

function DataService() {
  //set deafult outputplace
  this.defaultoutputplaces = ['gui'];
  // set current outputplaces
  this.currentoutputplaces = [].concat(_toConsumableArray(this.defaultoutputplaces)); // array contains all

  /**
   * Object contain output function to show results
   * @type {{gui(*=, *=): void, iframe(*=, *=): void}}
   * dataPromise: is thre promise request for data,
   * options: {
   *   show: method or Boolean to set if show or not the result on output
   *   before : async function to handle data return from server
   *   after: method to handle or do some thisn after show data
   * }
   */
  this.ouputplaces = {
    gui: function () {
      var _ref = _asyncToGenerator(function* (dataPromise) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _gui2.default.setLoadingContent(true);
        try {
          _gui2.default.outputDataPlace(dataPromise, options);
          yield dataPromise;
        } catch (err) {}
        _gui2.default.setLoadingContent(false);
      });

      function gui(_x2) {
        return _ref.apply(this, arguments);
      }

      return gui;
    }(),
    iframe: function () {
      var _ref2 = _asyncToGenerator(function* (dataPromise) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _iframe2.default.outputDataPlace(dataPromise, options);
      });

      function iframe(_x4) {
        return _ref2.apply(this, arguments);
      }

      return iframe;
    }()
  };

  /**
   *
   * @returns {Promise<void>}
   */
  this.init = _asyncToGenerator(function* () {
    this.services = {
      query: _dataQuery2.default,
      search: _dataSearch2.default,
      expression: _dataExpression2.default,
      proxy: _dataProxy2.default,
      ows: _dataOws2.default
    };
  });

  /**
   *
   * @param contextAndMethod 'String contain type of service(search or query): method'
   * @param options
   * @returns {Promise<void>}
   */
  this.getData = function () {
    var _ref4 = _asyncToGenerator(function* (contextAndMethod) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _splitContextAndMetho = splitContextAndMethod(contextAndMethod),
          context = _splitContextAndMetho.context,
          method = _splitContextAndMetho.method;

      var service = this.getService(context);
      var _options$inputs = options.inputs,
          inputs = _options$inputs === undefined ? {} : _options$inputs,
          _options$outputs = options.outputs,
          outputs = _options$outputs === undefined ? {} : _options$outputs;
      //return a promise and not the data

      var dataPromise = service[method](inputs);
      outputs && this.currentoutputplaces.forEach(function (place) {
        _this.ouputplaces[place](dataPromise, outputs);
      });
      //return always data
      var data = yield dataPromise;
      return yield data;
    });

    return function (_x6) {
      return _ref4.apply(this, arguments);
    };
  }();

  /**
   *Force to show empty output data
   *
   * */
  this.showEmptyOutputs = function () {
    var _this2 = this;

    var dataPromise = Promise.resolve({
      data: []
    });
    this.currentoutputplaces.forEach(function (place) {
      _this2.ouputplaces[place](dataPromise);
    });
  };

  /**
   * Set a costum datapromiseoutput to applicationa outputs settede
   * @param dataPromise
   */
  this.showCustomOutputDataPromise = function (dataPromise) {
    var _this3 = this;

    this.currentoutputplaces.forEach(function (place) {
      _this3.ouputplaces[place](dataPromise, {});
    });
  };

  /**
   *
   * @param serviceName
   * @returns {*}
   */
  this.getService = function (serviceName) {
    return this.services[serviceName];
  };

  /*
  * */
  this.setOutputPlaces = function () {
    var places = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    this.currentoutputplaces = places;
  };

  /**
   *
   * @param place
   */
  this.addCurrentOutputPlace = function (place) {
    place && this.currentoutputplaces.indexOf(place) === -1 && this.currentoutputplaces.push(place);
  };

  /**
   *
   * @param place
   * @param method has to get two parameters data (promise) and options (Object)
   * ex {
   * place: <newplace>
   * method(dataPromise, options={}){}
   *   }
   */
  this.addNewOutputPlace = function () {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        place = _ref5.place,
        _ref5$method = _ref5.method,
        method = _ref5$method === undefined ? function () {} : _ref5$method;

    var added = false;
    if (this.ouputplaces[place] === undefined) {
      this.ouputplaces[place] = method;
      added = true;
    }
    return added;
  };

  // reset default configuration
  this.resetDefaultOutput = function () {
    this.currentoutputplaces = [].concat(_toConsumableArray(this.defaultoutputplaces));
  };
}

exports.default = new DataService();

},{"services/data-expression":312,"services/data-ows":313,"services/data-proxy":314,"services/data-query":315,"services/data-search":316,"services/gui":319,"services/iframe":320,"utils":419}],318:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('gui/utils/utils'),
    Stack = _require.barstack; /**
                                * @file
                                * @since v3.7
                                */

function FloatbarService() {
  this.stack = new Stack();
  this.init = function (layout) {
    this.layout = layout;
    this.sidebarEl = $(this.layout.options.controlSidebarOptions.selector);
    this._zindex = this.sidebarEl.css("z-index");
    this._modalOverlay = null;
    this._modal = false;
    this._isopen = false;
  };

  this.isOpen = function () {
    return this._isopen;
  };

  this.open = function () {
    this.layout.floatBar.open(this.sidebarEl, true);
    this._isopen = true;
  };

  this.close = function () {
    this.layout.floatBar.close(this.sidebarEl, true);
    this._isopen = false;
  };

  this.showPanel = function (panel, options) {
    options = options || {};
    var append = options.append || false;
    var modal = options.modal || false;
    options.parent = "#g3w-floatbarpanel-placeholder";
    this.stack.push(panel, options);
    if (!this._isopen) this.open();
  };

  this.closePanel = function (panel) {
    if (panel) this.stack.remove(panel);else this.stack.pop();
    if (!this.stack.getLength()) {
      if (this._modal) {
        _gui2.default.setModal(false);
        this.close();
        $('.control-sidebar-bg').toggleClass('control-sidebar-bg-shadow');
        this.sidebarEl.css("z-index", "");
        this.sidebarEl.css("padding-top", "50px");
        $('.control-sidebar-bg').css("z-index", "");
        this._modal = false;
      } else this.close();
    }
  };

  this.hidePanel = function () {
    this.close();
  };
}

exports.default = new FloatbarService();

},{"gui/utils/utils":144,"services/gui":319}],319:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _router = require('services/router');

var _router2 = _interopRequireDefault(_router);

var _components = require('store/components');

var _components2 = _interopRequireDefault(_components);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    noop = _require.noop;

var G3WObject = require('core/g3wobject');

// API della GUI.
// methods have be defined by application
// app should call GUI.ready() when GUI is ready
function GUI() {
  this.setters = {
    setContent: function setContent() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.emit('opencontent', true);
      this._setContent(options);
    }
  };
  this.isready = false;
  // images urls
  this.getResourcesUrl = noop;
  // show a Vue form
  this.showForm = noop;
  this.closeForm = noop;
  this.showListing = noop;
  this.closeListing = noop;
  this.hideListing = noop;
  // modal
  this.setModal = noop;
  this.showFullModal = noop;
  // modal
  this.showQueryResults = noop;
  this.hideQueryResults = noop;
  this.showPanel = noop;
  this.hidePanel = noop;
  this.reloadComponents = noop;
  this.showUserMessage = noop;
  this.closeUserMessage = noop;
  this.showModalDialog = noop;
  //property to how result has to be add or close all and show new
  // false mean create new and close all open
  this.push_content = false;
  this.setPushContent = function () {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.push_content = bool;
  };
  this.getPushContent = function () {
    return this.push_content;
  };
  this._closeUserMessageBeforeSetContent = true;
  this.setComponent = function (component) {
    _components2.default.registerComponent(component);
  };
  this.getComponent = function (id) {
    return _components2.default.getComponent(id);
  };
  this.getComponents = function () {
    return _components2.default.getComponents();
  };

  this.goto = function (url) {
    _router2.default.goto(url);
  };
  this.ready = function () {
    this.emit('ready');
    this.isready = true;
  };
  this.guiResized = function () {
    this.emit('guiresized');
  };
  //ready GUI
  this.isReady = function () {
    var _this = this;

    return new Promise(function (resolve) {
      return _this.isready ? resolve() : _this.once('ready', resolve);
    });
  };
  /**
   * Passing a component application ui id return service that belong to component
   * @param componentId
   * @returns {*}
   */
  this.getService = function (componentId) {
    var component = this.getComponent(componentId);
    return component && component.getService();
  };
  /* spinner */
  this.showSpinner = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  };
  this.hideSpinner = function (id) {};
  /* end spinner */
  this.notify = noop;
  this.dialog = noop;
  this.isMobile = noop;
  //useful to registere setters
  base(this);
}

inherit(GUI, G3WObject);

/**
 * Wrapper for download
 * 
 * @param { Function } downloadFnc function to call
 * @param { Object }   options     Object parameters
 * 
 * @since 3.9.0
 */
GUI.prototype.downloadWrapper = function () {
  var _ref = _asyncToGenerator(function* (downloadFnc) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var download_caller_id = _application2.default.setDownload(true);
    this.setLoadingContent(true);
    try {
      yield downloadFnc(options);
    } catch (err) {
      this.showUserMessage({ type: 'alert', message: err || 'server_error', textMessage: !!err });
    }
    _application2.default.setDownload(false, download_caller_id);
    this.setLoadingContent(false);
  });

  return function (_x5) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = new GUI();

},{"core/g3wobject":8,"services/application":310,"services/router":324,"store/components":330,"utils":419}],320:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * @param epsg: Number Code of epsg Ex.4326
 * 
 * @returns String Normalize epsg: From number ex: 4326 to 'EPSG:4326'
 * 
 * @since 3.9.1
 */
var _getEpsgFromParam = function () {
  var _ref = _asyncToGenerator(function* (epsg) {
    epsg = (0, _normalizeEpsg.normalizeEpsg)(epsg);
    yield Projections.registerProjection(epsg);
    return epsg;
  });

  return function _getEpsgFromParam(_x) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * @example template.html
 * 
 * ```html
 * <!DOCTYPE html>
 * <html lang="en" style="width: 100%; height: 100%">
 * <head>
 *   <meta charset="UTF-8">
 *   <title>Test Iframe</title>
 * </head>
 * <body style="width:100%; height: 100%; margin: 0;">
 * <iframe style="width: 100%; height: 100%; border: 0;" src="http://192.168.1.4:3000/?project=test-iframe/qdjango/62"></iframe>
 * </body>
 * <script>
 *   // send message to iframe when app is ready
 *   const iframe = document.querySelector('iframe');
 *   window.addEventListener('message', evt => {
 *     const { action, response } = evt.data;
 *     if (action === "app:ready") {
 *       setTimeout(() => iframe.contentWindow.postMessage({
 *         id: null,                     // id of action,
 *         action: "<context>:<action>", // eg: "app:zoomtofeature"
 *         data: {}                      // data contain all mandatory attribute information
 *       }, '*'), 2000)
 *     }
 *   }, false);
 * </script>
 * </html>
 * ```
 */


var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _plugins = require('store/plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _normalizeEpsg = require('utils/normalizeEpsg');

var _utils = require('utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var Projections = require('g3w-ol/projection/projections');
var G3WObject = require('core/g3wobject');
var IframePluginService = function () {
  function IframePluginService() {
    _classCallCheck(this, IframePluginService);

    this.pendingactions = {};
    this.getMessage = this.getMessage.bind(this);
    this.eventResponseServiceHandler = this.eventResponseServiceHandler.bind(this);
  }

  /**
   * @param { Object } opts
   * @param opts.project current project send by application service
   */


  _createClass(IframePluginService, [{
    key: 'init',
    value: function () {
      var _ref2 = _asyncToGenerator(function* () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            project = _ref3.project;

        yield _gui2.default.isReady();

        this.services = {
          app: new AppService(),
          editing: new EditingService()
        };

        // get layer attributes from project layers state
        var layers = project.state.layers.map(function (layer) {
          return { id: layer.id, name: layer.name };
        });

        // initialize all service
        var serviceNames = Object.keys(this.services);

        for (var i = 0; i < serviceNames.length; i++) {
          var service = this.services[serviceNames[i]];
          // set common layer attribute service just one time
          if (undefined === service.getLayers()) {
            service.setLayers(layers);
          }
          yield service.init();
          service.on('response', this.eventResponseServiceHandler);
        }

        // Send post message is ready
        this.postMessage({
          id: null,
          action: 'app:ready',
          response: { result: true, data: { layers: layers } }
        });

        window.addEventListener('message', this.getMessage, false);
      });

      function init() {
        return _ref2.apply(this, arguments);
      }

      return init;
    }()

    // set eventResponse handler to alla services

  }, {
    key: 'eventResponseServiceHandler',
    value: function eventResponseServiceHandler(_ref4) {
      var action = _ref4.action,
          response = _ref4.response;

      this.postMessage({ id: null, action: action, response: response });
    }

    /**
     * Outputplace iframe get by DataRouteService
     * 
     * @param dataPromise
     * @param options
     * 
     * @returns { Promise<void> }
     */

  }, {
    key: 'outputDataPlace',
    value: function () {
      var _ref5 = _asyncToGenerator(function* (dataPromise) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$action = options.action,
            action = _options$action === undefined ? 'app:results' : _options$action;

        var _ref6 = yield dataPromise,
            result = _ref6.result,
            _ref6$data = _ref6.data,
            data = _ref6$data === undefined ? [] : _ref6$data;

        var parser = new ol.format.GeoJSON();
        var outputData = [];

        try {
          outputData = data.map(function (_ref7) {
            var layer = _ref7.layer,
                features = _ref7.features;
            return _defineProperty({}, layer.getId(), { features: parser.writeFeatures(features) });
          });
        } catch (err) {
          result = false;
          outputData = err;
        }

        this.postMessage({
          id: null,
          action: action,
          response: { result: result, data: outputData }
        });
      });

      function outputDataPlace(_x4) {
        return _ref5.apply(this, arguments);
      }

      return outputDataPlace;
    }()

    /**
     * post message to parent
     */

  }, {
    key: 'postMessage',
    value: function postMessage() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (window.parent) {
        window.parent.postMessage(message, '*');
      }
    }
  }, {
    key: 'stopPendingActions',
    value: function () {
      var _ref9 = _asyncToGenerator(function* () {
        var _this = this;

        var promises = [];
        Object.keys(this.pendingactions).forEach(function (id) {
          promises.push(_this.services[_this.pendingactions[id].context].stop());
          delete _this.pendingactions[id];
        });
        return Promise.allSettled(promises);
      });

      function stopPendingActions() {
        return _ref9.apply(this, arguments);
      }

      return stopPendingActions;
    }()
  }, {
    key: 'getMessage',


    /**
     * handle all message from window
     */
    value: function () {
      var _ref10 = _asyncToGenerator(function* (evt) {
        if (evt && evt.data) {
          var _evt$data = evt.data,
              _evt$data$id = _evt$data.id,
              id = _evt$data$id === undefined ? (0, _utils.uniqueId)() : _evt$data$id,
              _evt$data$single = _evt$data.single,
              single = _evt$data$single === undefined ? true : _evt$data$single,
              action = _evt$data.action,
              params = _evt$data.data;

          var _splitContextAndMetho = (0, _utils.splitContextAndMethod)(action),
              context = _splitContextAndMetho.context,
              method = _splitContextAndMetho.method;

          var result = false;
          var data = void 0;
          try {
            var is_ready = this.services[context].getReady();
            if (is_ready && single) {
              yield this.stopPendingActions();
            }
            if (is_ready) {
              this.pendingactions[id] = { context: context };
              data = yield this.services[context][method](params);
              result = true;
            }
          } catch (err) {
            result = false;
            data = err;
          }
          this.postMessage({
            id: id,
            action: action,
            response: { result: result, data: data }
          });
          delete this.pendingactions[id];
        }
      });

      function getMessage(_x6) {
        return _ref10.apply(this, arguments);
      }

      return getMessage;
    }()

    /**
     * Called when change map or clear
     */

  }, {
    key: 'clear',
    value: function clear() {
      var serviceNames = Object.keys(this.services);
      for (var i = 0; i < serviceNames.length; i++) {
        this.services[serviceNames[i]].off('response', this.eventResponseServiceHandler);
      }
      this.stopPendingActions();
      window.removeEventListener('message', this.getMessage, false);
    }
  }]);

  return IframePluginService;
}();

/**
 * ORIGINAL SOURCE: src/app/core/iframe/services/baseservice.js@3.9.0
 */


var BaseIframeService = function (_G3WObject) {
  _inherits(BaseIframeService, _G3WObject);

  function BaseIframeService() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BaseIframeService);

    /**
     * @type { boolean }
     */
    var _this2 = _possibleConstructorReturn(this, (BaseIframeService.__proto__ || Object.getPrototypeOf(BaseIframeService)).call(this));

    _this2.ready = false;

    /**
     * Map service
     */
    _this2.mapService = _gui2.default.getService('map');

    /**
     * Current project
     */
    _this2.project = _projects2.default.getCurrentProject();

    /**
     * @type { Array | undefined }
     */
    _this2.layers = undefined;

    // common attributes between plugin service

    /**
     * ORIGINAL SOURCE: src/app/core/iframe/services/plugins/service.js@3.9.0
     * 
     * @since 3.9.1
     */
    _this2.pluginName;

    /**
     * ORIGINAL SOURCE: src/app/core/iframe/services/plugins/service.js@3.9.0
     * 
     * @since 3.9.1
     */
    _this2.dependencyApi = {};

    return _this2;
  }

  /**
   * ORIGINAL SOURCE: src/app/core/iframe/services/plugins/service.js@3.9.0
   * 
   * @virtual method need to be implemented by subclasses
   * 
   * @since 3.9.1
   */


  _createClass(BaseIframeService, [{
    key: 'init',
    value: function () {
      var _ref11 = _asyncToGenerator(function* () {
        var _this3 = this;

        var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref12$layers = _ref12.layers,
            layers = _ref12$layers === undefined ? {} : _ref12$layers;

        this.layers = layers;
        // skip when plugin is not in configuration
        if (!_plugins2.default.isPluginInConfiguration(this.pluginName)) {
          return;
        }
        var plugin = _plugins2.default.getPlugin(this.pluginName);
        if (plugin) {
          this.setDependencyApi(plugin.getApi());
          this.setReady(true);
        } else {
          _plugins2.default.onafter('registerPlugin', function () {
            var _ref13 = _asyncToGenerator(function* (plugin) {
              yield plugin.isReady();
              if (plugin.getName() === _this3.pluginName) {
                _this3.setDependencyApi(plugin.getApi());
                _this3.setReady(true);
              }
            });

            return function (_x9) {
              return _ref13.apply(this, arguments);
            };
          }());
        }
      });

      function init() {
        return _ref11.apply(this, arguments);
      }

      return init;
    }()

    /**
     * ORIGINAL SOURCE: src/app/core/iframe/services/plugins/service.js@3.9.0
     * 
     * @virtual method need to be implemented by subclasses 
     * 
     * @since 3.9.1
     */

  }, {
    key: 'setDependencyApi',
    value: function setDependencyApi() {
      var api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.dependencyApi = api;
    }

    /**
     * ORIGINAL SOURCE: src/app/core/iframe/services/plugins/service.js@3.9.0
     * 
     * @virtual method need to be implemented by subclasses 
     * 
     * @since 3.9.1
     */

  }, {
    key: 'getDependecyApi',
    value: function getDependecyApi() {
      return this.dependencyApi;
    }

    /**
     * Return a qgs_layer_id array based on passed qgis_layer_id
     * 
     * @param { Object } opts
     * @param { string | string[] | null | undefined } opts.qgs_layer_id
     * @param { Array } noValue
     * 
     * @returns { string[] } qgs_layer_id
     * 
     * @private
     */

  }, {
    key: 'getQgsLayerId',
    value: function getQgsLayerId(_ref14) {
      var qgs_layer_id = _ref14.qgs_layer_id,
          _ref14$noValue = _ref14.noValue,
          noValue = _ref14$noValue === undefined ? this.layers.map(function (layer) {
        return layer.id;
      }) : _ref14$noValue;

      return qgs_layer_id ? [].concat(qgs_layer_id) : noValue;
    }
  }, {
    key: 'searchFeature',


    /**
     * getFeature from DataProvider
     * 
     * @private
     */
    value: function () {
      var _ref16 = _asyncToGenerator(function* (_ref15) {
        var layer = _ref15.layer,
            feature = _ref15.feature;

        var search_endpoint = this.project.getSearchEndPoint();
        var field = feature.field,
            value = feature.value;

        var DataRouterService = require('services/data').default;

        var _ref17 = yield DataRouterService.getData('search:features', {
          inputs: {
            layer: layer,
            search_endpoint: search_endpoint,
            filter: (0, _utils.createFilterFormField)({ layer: layer, search_endpoint: search_endpoint, field: field, value: value })
          },
          outputs: false
        }),
            _ref17$data = _ref17.data,
            data = _ref17$data === undefined ? [] : _ref17$data;

        return data;
      });

      function searchFeature(_x11) {
        return _ref16.apply(this, arguments);
      }

      return searchFeature;
    }()
  }, {
    key: 'findFeaturesWithGeometry',


    /**
     * Search feature(s) by field and value
     * 
     * @param { Object } opts
     * @param opts.qgs_layer_id
     * @param opts.feature
     * @param opts.zoom
     * @param opts.highlight
     * 
     * @returns { Promise<{ qgs_layer_id: null, features: [], found: boolean }>}
     */
    value: function () {
      var _ref18 = _asyncToGenerator(function* () {
        var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            feature = _ref19.feature,
            _ref19$qgs_layer_id = _ref19.qgs_layer_id,
            qgs_layer_id = _ref19$qgs_layer_id === undefined ? [] : _ref19$qgs_layer_id,
            _ref19$zoom = _ref19.zoom,
            zoom = _ref19$zoom === undefined ? false : _ref19$zoom,
            _ref19$highlight = _ref19.highlight,
            highlight = _ref19$highlight === undefined ? false : _ref19$highlight;

        var response = {
          found: false,
          features: [],
          qgs_layer_id: null
        };
        var layersCount = qgs_layer_id.length;
        var i = 0;
        while (!response.found && i < layersCount) {
          var layer = this.project.getLayerById(qgs_layer_id[i]);
          try {
            var data = layer && (yield this.searchFeature({ layer: layer, feature: feature }));
            var features = data.length && data[0].features;
            response.found = features && features.length > 0 && !!features.find(function (f) {
              return f.getGeometry();
            });
            if (!features || !response.found) {
              throw 'invalid response';
            }
            response.features = features;
            response.qgs_layer_id = qgs_layer_id[i];
            if (zoom) {
              this.mapService.zoomToFeatures(features, { highlight: highlight });
            }
          } catch (err) {
            i++;
          }
        }
        // in case of no response zoom too initial extent
        if (!response.found) {
          this.mapService.zoomToProjectInitExtent();
        }
        return response;
      });

      function findFeaturesWithGeometry() {
        return _ref18.apply(this, arguments);
      }

      return findFeaturesWithGeometry;
    }()

    /**
     * Set layer function
     * 
     * @param layers
     */

  }, {
    key: 'setLayers',
    value: function setLayers() {
      var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      this.layers = layers;
    }
  }, {
    key: 'getLayers',
    value: function getLayers() {
      return this.layers;
    }

    /**
     * Set ready service
     * 
     * @param bool
     */

  }, {
    key: 'setReady',
    value: function setReady() {
      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this.ready = bool;
    }
  }, {
    key: 'getReady',
    value: function getReady() {
      return this.ready;
    }

    /**
     * Overwrite single service: Usefult to stop eventually running action
     * 
     * @virtual method need to be implemented by subclasses
     * 
     * @returns { Promise<void> }
     */

  }, {
    key: 'stop',
    value: function () {
      var _ref20 = _asyncToGenerator(function* () {});

      function stop() {
        return _ref20.apply(this, arguments);
      }

      return stop;
    }()

    /**
     * Overwrite each single service
     * 
     * @virtual method need to be implemented by subclasses
     */

  }, {
    key: 'clear',
    value: function clear() {}
  }]);

  return BaseIframeService;
}(G3WObject);

/**
 * ORIGINAL SOURCE: src/services/iframe-app.js@3.9.0
 */


var AppService = function (_BaseIframeService) {
  _inherits(AppService, _BaseIframeService);

  function AppService() {
    _classCallCheck(this, AppService);

    var _this4 = _possibleConstructorReturn(this, (AppService.__proto__ || Object.getPrototypeOf(AppService)).call(this));

    _this4.mapControls = {
      screenshot: { control: null },
      changeMap: { control: null }
    };
    return _this4;
  }

  /**
   * Init service
   * 
   * @returns { Promise<unknown> }
   */


  _createClass(AppService, [{
    key: 'init',
    value: function init() {
      var _this5 = this;

      return new Promise(function (resolve, reject) {
        _this5.mapService.once('ready', function () {
          _this5._map = _this5.mapService.getMap();
          _this5._mapCrs = _this5.mapService.getCrs();
          _this5.mapControls.screenshot.control = _this5.mapService.getMapControlByType({ type: 'screenshot' });
          _this5.setReady(true);
          resolve();
        });
      });
    }

    /**
     * @returns { Promise<void> }
     */

  }, {
    key: 'results',
    value: function () {
      var _ref22 = _asyncToGenerator(function* (_ref21) {
        var _ref21$capture = _ref21.capture,
            capture = _ref21$capture === undefined ? true : _ref21$capture;

        var DataRouterService = require('services/data').default;
        if (capture) {
          DataRouterService.setOutputPlaces(['iframe']);
        } else {
          DataRouterService.resetDefaultOutput();
        }
        return [];
      });

      function results(_x15) {
        return _ref22.apply(this, arguments);
      }

      return results;
    }()

    /**
     * @returns { Promise<void> }
     */

  }, {
    key: 'screenshot',
    value: function () {
      var _ref24 = _asyncToGenerator(function* (_ref23) {
        var _this6 = this;

        var _ref23$capture = _ref23.capture,
            capture = _ref23$capture === undefined ? true : _ref23$capture;

        // skip when ..
        if (!capture) {
          this.mapControls.screenshot.control.resetOriginalOnClickEvent();
          return;
        }

        this.mapControls.screenshot.control.overwriteOnClickEvent(_asyncToGenerator(function* () {
          var response = void 0;
          try {
            response = { result: true, data: yield _this6.mapService.createMapImage() };
          } catch (err) {
            response = { result: false, data: err };
          } finally {
            _this6.emit('response', { response: response, action: 'app:screenshot' });
          }
        }));
      });

      function screenshot(_x16) {
        return _ref24.apply(this, arguments);
      }

      return screenshot;
    }()

    /**
     * Eventually send as param the projection in which we would like get center of map
     * 
     * @param { Object } params
     * @param params.epsg since 3.9.1
     * 
     * @returns { Promise<void> }
     */

  }, {
    key: 'getcenter',
    value: function () {
      var _ref26 = _asyncToGenerator(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var center = this.mapService.getCenter();
        if (undefined !== params.epsg) {
          return ol.proj.transform(center, this.mapService.getEpsg(), (yield _getEpsgFromParam(params.epsg)));
        }
        return center;
      });

      function getcenter() {
        return _ref26.apply(this, arguments);
      }

      return getcenter;
    }()

    /**
     * Zoom to coordinates
     * 
     * @param { Object } params
     * @param { Array } params.coordinates
     * @param params.epsg since 3.9.1
     * 
     * @returns { Promise<Array> }
     */

  }, {
    key: 'zoomtocoordinates',
    value: function () {
      var _ref27 = _asyncToGenerator(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _params$coordinates = params.coordinates,
            coordinates = _params$coordinates === undefined ? [] : _params$coordinates,
            epsg = params.epsg;
        // skip when ..

        if (!(coordinates && Array.isArray(coordinates) && 2 === coordinates.length)) {
          return Promise.reject(coordinates);
        }
        if (undefined !== epsg) {
          // normalized psg code
          epsg = yield _getEpsgFromParam(epsg);
          coordinates = ol.proj.transform(coordinates, epsg, this.mapService.getEpsg());
        }
        this.mapService.zoomTo(coordinates);
        return coordinates;
      });

      function zoomtocoordinates() {
        return _ref27.apply(this, arguments);
      }

      return zoomtocoordinates;
    }()

    /**
     * Eventually send as param the projection in which we would like get center of map
     * 
     * @param { Object } params
     * @param params.epsg since 3.9.1
     * 
     * @returns { Promise<void> }
     */

  }, {
    key: 'getextent',
    value: function () {
      var _ref28 = _asyncToGenerator(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var extent = this.mapService.getMapExtent();
        /** @FIXME add description */
        if (undefined !== params.epsg) {
          return ol.proj.transformExtent(extent, this.mapService.getEpsg(), (yield _getEpsgFromParam(params.epsg)));
        }
        return extent;
      });

      function getextent() {
        return _ref28.apply(this, arguments);
      }

      return getextent;
    }()

    /**
     * @param { Object } params
     * @param { Array } params.extent
     * @param params.epsg since 3.9.1
     * 
     * @returns { Promise<Array> }
     */

  }, {
    key: 'zoomtoextent',
    value: function () {
      var _ref29 = _asyncToGenerator(function* () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _params$extent = params.extent,
            extent = _params$extent === undefined ? [] : _params$extent,
            epsg = params.epsg;
        // skip when ..

        if (!(extent && Array.isArray(extent) && 4 === extent.length)) {
          return Promise.reject(extent);
        }
        /** @FIXME add description */
        if (undefined !== epsg) {
          epsg = _getEpsgFromParam(epsg);
          extent = ol.proj.transformExtent(extent, epsg, this.mapService.getEpsg());
        } else {
          this.mapService.goToBBox(extent);
        }
        return extent;
      });

      function zoomtoextent() {
        return _ref29.apply(this, arguments);
      }

      return zoomtoextent;
    }()
  }, {
    key: 'zoomtofeature',


    /**
     * Zoom to features
     * 
     * @param { Object } params
     * @param params.qgs_layer_id
     * @param params.feature
     * @param { boolean } params.highlight 
     * 
     * @returns { Promise } qgs_layer_id
     */
    value: function () {
      var _ref30 = _asyncToGenerator(function* () {
        var _this7 = this;

        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return new Promise(function () {
          var _ref31 = _asyncToGenerator(function* (resolve, reject) {
            var qgs_layer_id = params.qgs_layer_id,
                feature = params.feature,
                _params$highlight = params.highlight,
                highlight = _params$highlight === undefined ? false : _params$highlight;


            qgs_layer_id = _this7.getQgsLayerId({ qgs_layer_id: qgs_layer_id });

            var response = yield _this7.findFeaturesWithGeometry({
              qgs_layer_id: qgs_layer_id,
              feature: feature,
              zoom: true,
              highlight: highlight
            });

            resolve(response.qgs_layer_id);
          });

          return function (_x22, _x23) {
            return _ref31.apply(this, arguments);
          };
        }());
      });

      function zoomtofeature() {
        return _ref30.apply(this, arguments);
      }

      return zoomtofeature;
    }()
  }]);

  return AppService;
}(BaseIframeService);

/**
 * ORIGINAL SOURCE: src/services/iframe-editing.js@3.9.0
 */


var EditingService = function (_BaseIframeService2) {
  _inherits(EditingService, _BaseIframeService2);

  function EditingService() {
    _classCallCheck(this, EditingService);

    var _this8 = _possibleConstructorReturn(this, (EditingService.__proto__ || Object.getPrototypeOf(EditingService)).call(this));

    _this8.pluginName = 'editing';

    _this8.subscribevents = [];

    _this8.isRunning = false;

    _this8.responseObject = {
      cb: null, // resolve or reject promise method
      qgs_layer_id: null,
      error: null
    };

    _this8.config = {
      tools: {
        add: {
          disabled: [{ id: 'deletefeature' }, { id: 'copyfeatures' }, { id: 'editmultiattributes' }, { id: 'deletePart' }, { id: 'splitfeature' }, { id: 'mergefeatures' }]
        },
        update: {
          disabled: [{ id: 'addfeature' }, { id: 'copyfeatures' }, { id: 'deletefeature' }, { id: 'editmultiattributes' }, { id: 'deletePart' }, { id: 'splitfeature' }, { id: 'mergefeatures' }]
        },
        delete: {
          enabled: [{ id: 'deletefeature', options: { active: true } }]
        }
      }
    };

    /**
     * subscribers handlers
     */
    _this8.subscribersHandlers = {

      canUndo: function canUndo(_ref32) {
        var activeTool = _ref32.activeTool,
            _ref32$disableToolbox = _ref32.disableToolboxes,
            disableToolboxes = _ref32$disableToolbox === undefined ? [] : _ref32$disableToolbox;
        return function (bool) {
          //set currenttoolbocx id in editing to null
          if (false === bool) {
            _this8.responseObject.qgs_layer_id = null;
            _this8.responseObject.error = null;
          }
          activeTool.setEnabled(!bool);
          disableToolboxes.forEach(function (toolbox) {
            return toolbox.setEditing(!bool);
          });
        };
      },

      canRedo: function canRedo() {},

      //run callback
      cancelform: function cancelform(cb) {
        return function () {
          cb();
        };
      },

      addfeature: function addfeature() {
        var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            properties = _ref33.properties,
            toolboxes = _ref33.toolboxes;

        return function (feature) {

          Object.keys(properties).forEach(function (p) {
            return feature.set(p, properties[p]);
          });

          var activeTool = void 0;
          var disableToolboxes = [];

          toolboxes.forEach(function (t) {
            var tool = t.getToolById('addfeature');
            if (tool.isActive()) {
              tool.setEnabled(false);
              activeTool = tool;
            } else {
              t.setEditing(false);
              disableToolboxes.push(t);
            }
          });

          // just one time
          if (_this8.subscribevents.find(function (e) {
            return 'canUndo' !== e.event;
          })) {
            _this8.addSubscribeEvents('cancelform', _this8.addSubscribeEvents('canUndo', { activeTool: activeTool, disableToolboxes: disableToolboxes }));
          }
        };
      },

      closeeditingpanel: function closeeditingpanel(_ref34) {
        var qgs_layer_id = _ref34.qgs_layer_id;
        return function () {
          // response to router service
          _this8.responseObject.cb({
            qgs_layer_id: _this8.responseObject.qgs_layer_id,
            error: _this8.responseObject.error
          });
          // stop action
          _this8.stopAction({ qgs_layer_id: qgs_layer_id });
        };
      }

    };

    return _this8;
  }

  // METHODS CALLED FROM EACH ACTION METHOD

  /**
   * run before each action
   */


  _createClass(EditingService, [{
    key: 'startAction',
    value: function () {
      var _ref36 = _asyncToGenerator(function* (_ref35) {
        var _this9 = this;

        var toolboxes = _ref35.toolboxes,
            resolve = _ref35.resolve,
            reject = _ref35.reject;


        this.responseObject.cb = reject;

        // set same mode autosave
        this.dependencyApi.setSaveConfig({
          cb: {
            // called when commit changes is done successuffly
            done: function done(toolbox) {
              //set toolbox id
              _this9.responseObject.cb = resolve;
              _this9.responseObject.qgs_layer_id = toolbox.getId();
              _this9.responseObject.error = null;
              // close panel that fire closeediting panel event
              _this9.dependencyApi.hidePanel();
            },
            // called whe commit change receive an error
            error: function error(toolbox, _error) {
              _this9.responseObject.cb = reject;
              _this9.responseObject.qgs_layer_id = toolbox.getId();
              _this9.responseObject.error = _error;
            }
          }
        });

        // set toolboxes visible base on value of qgs_layer_id
        this.dependencyApi.showPanel({ toolboxes: toolboxes });

        this.isRunning = true;
      });

      function startAction(_x25) {
        return _ref36.apply(this, arguments);
      }

      return startAction;
    }()

    /**
     * run after each action
     */

  }, {
    key: 'stopAction',
    value: function () {
      var _ref37 = _asyncToGenerator(function* () {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (opts.qgs_layer_id) {
          yield this.stopEditing(opts.qgs_layer_id);
        }
      });

      function stopAction() {
        return _ref37.apply(this, arguments);
      }

      return stopAction;
    }()

    /**
     * add subscribe refenrence
     */

  }, {
    key: 'addSubscribeEvents',
    value: function addSubscribeEvents(event) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var handler = this.subscribersHandlers[event](options);
      this.dependencyApi.subscribe(event, handler);
      this.subscribevents.push({ event: event, handler: handler });
      return handler;
    }
  }, {
    key: 'resetSubscribeEvents',


    /**
     * Reset subscriber editing plugin events
     */
    value: function resetSubscribeEvents() {
      var _this10 = this;

      this.subscribevents.forEach(function (d) {
        _this10.dependencyApi.unsubscribe(d.event, d.handler);
      });
    }
  }, {
    key: 'add',


    /**
     * Called whe we want add a feature
     * 
     * @param { Object } config
     * @param config.qgs_layer_id
     * @param config.properties
     * 
     * @returns { Promise<void> }
     */
    value: function add() {
      var _this11 = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return new Promise(function () {
        var _ref38 = _asyncToGenerator(function* (resolve, reject) {
          // skip when ..
          if (_this11.isRunning) {
            return reject();
          }

          // extract `qgs_layer_id9` from configuration message

          var configQglLayerId = config.qgs_layer_id,
              data = _objectWithoutProperties(config, ['qgs_layer_id']);

          var properties = data.properties;


          var qgs_layer_id = _this11.getQgsLayerId({
            qgs_layer_id: configQglLayerId,
            noValue: _this11.dependencyApi.getEditableLayersId()
          });

          // call method common
          yield _this11.startAction({ toolboxes: qgs_layer_id, resolve: resolve, reject: reject });

          // return all toolboxes
          var toolboxes = (yield _this11.startEditing(qgs_layer_id, {
            tools: _this11.config.tools.add,
            startstopediting: false,
            action: 'add',
            selected: 1 === qgs_layer_id.length
          })).filter(function (p) {
            return 'fulfilled' === p.status;
          }).map(function (p) {
            return p.value;
          });

          /** @FIXME add description */
          if (!_gui2.default.isSidebarVisible()) {
            _gui2.default.showSidebar();
          }

          /** @FIXME add description */
          if (1 === toolboxes.length && toolboxes[0]) {
            toolboxes[0].setActiveTool(toolboxes[0].getToolById('addfeature'));
          }

          // in case of no feature add avent subscribe
          _this11.addSubscribeEvents('addfeature', { properties: properties, toolboxes: toolboxes });
          _this11.addSubscribeEvents('closeeditingpanel', { qgs_layer_id: qgs_layer_id });
        });

        return function (_x29, _x30) {
          return _ref38.apply(this, arguments);
        };
      }());
    }

    /**
     * Called when we want update a know feature field
     * 
     * @param config
     * 
     * @returns { Promise<unknown> }
     */

  }, {
    key: 'update',
    value: function () {
      var _ref39 = _asyncToGenerator(function* () {
        var _this12 = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return new Promise(function () {
          var _ref40 = _asyncToGenerator(function* (resolve, reject) {
            // skip when ..
            if (_this12.isRunning) {
              return reject();
            }

            var configQglLayerId = config.qgs_layer_id,
                data = _objectWithoutProperties(config, ['qgs_layer_id']);

            var feature = data.feature;

            var qgs_layer_id = _this12.getQgsLayerId({
              qgs_layer_id: configQglLayerId,
              noValue: _this12.dependencyApi.getEditableLayersId()
            });

            var response = yield _this12.findFeaturesWithGeometry({
              qgs_layer_id: qgs_layer_id,
              feature: feature,
              zoom: true,
              highlight: true,
              selected: 1 === qgs_layer_id.length // set selected toolbox
            });

            // skip when ..
            if (!response.found) {
              return reject();
            }

            yield _this12.startAction({ toolboxes: [response.qgs_layer_id], resolve: resolve, reject: reject });

            // return all toolboxes
            yield _this12.startEditing([response.qgs_layer_id], {
              feature: feature,
              tools: _this12.config.tools.update,
              startstopediting: false,
              action: 'update'
            });

            if (!_gui2.default.isSidebarVisible()) {
              _gui2.default.showSidebar();
            }

            _this12.addSubscribeEvents('closeeditingpanel', { qgs_layer_id: [response.qgs_layer_id] });
          });

          return function (_x32, _x33) {
            return _ref40.apply(this, arguments);
          };
        }());
      });

      function update() {
        return _ref39.apply(this, arguments);
      }

      return update;
    }()

    /**
     * @virtual method need to be implemented by subclasses 
     */

  }, {
    key: 'delete',
    value: function _delete() {}

    /**
     * Called when we want to start editing
     * 
     * @param { Array } qgs_layer_id
     * @param { Object } options
     * 
     * @returns { Promise< unknown | void > }
     */

  }, {
    key: 'startEditing',
    value: function () {
      var _ref41 = _asyncToGenerator(function* () {
        var _this13 = this;

        var qgs_layer_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$action2 = options.action,
            action = _options$action2 === undefined ? 'add' : _options$action2,
            feature = options.feature;

        var filter = {};
        options.filter = filter;
        switch (action) {
          case 'add':
            filter.nofeatures = true;break;
          case 'update':
            filter.field = feature.field + '|eq|' + feature.value;break;
        }
        var promises = [];
        qgs_layer_id.forEach(function (layerid) {
          promises.push(_this13.dependencyApi.startEditing(layerid, options));
        });
        return yield Promise.allSettled(promises);
      });

      function startEditing() {
        return _ref41.apply(this, arguments);
      }

      return startEditing;
    }()

    /**
     * Stop editing
     * 
     * @param qgs_layer_id
     * 
     * @returns { Promise<unknown> }
     */

  }, {
    key: 'stopEditing',
    value: function () {
      var _ref42 = _asyncToGenerator(function* (qgs_layer_id) {
        var _this14 = this;

        var promises = [];
        qgs_layer_id.forEach(function (layerid) {
          promises.push(_this14.dependencyApi.stopEditing(layerid));
        });
        yield Promise.allSettled(promises);
        this.clear();
      });

      function stopEditing(_x36) {
        return _ref42.apply(this, arguments);
      }

      return stopEditing;
    }()
  }, {
    key: 'stop',
    value: function stop() {
      var _this15 = this;

      return new Promise(function (resolve, reject) {
        _this15.dependencyApi.hidePanel();
        _gui2.default.hideSidebar();
        _this15.once('clear', resolve);
      });
    }

    /**
     * Called wen we want to reset default editing plugin behaviour
     */

  }, {
    key: 'clear',
    value: function clear() {
      this.dependencyApi.resetDefault();
      this.isRunning = false;
      this.responseObject = {
        cb: null, // resolve or reject promise method
        qgs_layer_id: null,
        error: null
      };
      this.resetSubscribeEvents();
      this.emit('clear');
    }
  }]);

  return EditingService;
}(BaseIframeService);

exports.default = new IframePluginService();

},{"core/g3wobject":8,"g3w-ol/projection/projections":73,"services/data":317,"services/gui":319,"store/plugins":334,"store/projects":335,"utils":419,"utils/normalizeEpsg":436}],321:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file
 * @since v3.7
 */
var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

// service sidebar
function navbaritemsService() {
  this.state = {
    items: {
      left: [],
      right: []
    }
  };
  this.addItem = function (item) {
    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'right';

    this.state.items[position].push(item);
  };

  base(this);
}

inherit(navbaritemsService, G3WObject);

exports.default = new navbaritemsService();

},{"core/g3wobject":8,"utils":419}],322:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _data2 = require('services/data');

var _data3 = _interopRequireDefault(_data2);

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('core/i18n/i18n.service'),
    t = _require.t;

var _require2 = require('utils'),
    uniqueId = _require2.uniqueId,
    createFilterFromString = _require2.createFilterFromString,
    XHR = _require2.XHR;

var QUERYBUILDERSEARCHES = 'QUERYBUILDERSEARCHES';

function QueryBuilderService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._cacheValues = {};
  this._items = _application2.default.getLocalItem(QUERYBUILDERSEARCHES) || {};
}

var proto = QueryBuilderService.prototype;

proto.getCurrentProjectItems = function () {
  var projectId = _projects2.default.getCurrentProject().getId();
  this._items[projectId] = this._items[projectId] || [];
  return this._items[projectId];
};

proto.getItems = function (projectId) {
  var items = _application2.default.getLocalItem(QUERYBUILDERSEARCHES);
  projectId = projectId || _projects2.default.getCurrentProject().getId();
  return items ? items[projectId] || [] : [];
};

proto._getLayerById = function (layerId) {
  return _catalogLayers2.default.getLayerById(layerId);
};

proto.getValues = _asyncToGenerator(function* () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref2.layerId,
      field = _ref2.field;

  this._cacheValues[layerId] = this._cacheValues[layerId] || {};
  var valuesField = this._cacheValues[layerId][field];
  if (valuesField === undefined) {
    try {
      var layer = this._getLayerById(layerId);
      var dataUrl = layer.getUrl('data');
      var response = yield XHR.get({
        url: dataUrl,
        params: {
          ordering: field,
          unique: field
        }
      });
      if (response.result) this._cacheValues[layerId][field] = this._cacheValues[layerId][field] || response.data;
      return this._cacheValues[layerId][field] || [];
    } catch (err) {
      reject();
    }
  } else return valuesField;
});

proto.run = function () {
  var _this = this;

  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref3.layerId,
      stringFilter = _ref3.filter,
      _ref3$showResult = _ref3.showResult,
      showResult = _ref3$showResult === undefined ? true : _ref3$showResult;

  return new Promise(function () {
    var _ref4 = _asyncToGenerator(function* (resolve, reject) {
      var layer = _this._getLayerById(layerId);
      var search_endpoint = layer.getSearchEndPoint();
      var filter = createFilterFromString({
        layer: layer,
        search_endpoint: search_endpoint,
        filter: stringFilter
      });
      try {
        var _ref5 = yield _data3.default.getData('search:features', {
          inputs: {
            layer: layer,
            filter: filter,
            search_endpoint: search_endpoint,
            feature_count: 100
          },
          outputs: showResult
        }),
            data = _ref5.data;

        resolve(data);
      } catch (error) {
        _gui2.default.showUserMessage({
          type: 'alert',
          message: 'sdk.querybuilder.error_run',
          autoclose: true
        });
        reject(error);
      }
    });

    return function (_x4, _x5) {
      return _ref4.apply(this, arguments);
    };
  }());
};

proto.test = _asyncToGenerator(function* () {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref7.layerId,
      filter = _ref7.filter;

  try {
    var data = yield this.run({
      layerId: layerId,
      filter: filter,
      showResult: false
    });
    return data.length && data[0].features.length;
  } catch (err) {
    err = t('sdk.querybuilder.error_test');
    return Promise.reject(err);
  }
});

proto.delete = function () {
  var _this2 = this;

  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref8.id;

  return new Promise(function (resolve, reject) {
    _gui2.default.dialog.confirm(t('sdk.querybuilder.delete'), function (result) {
      if (result) {
        var querybuildersearches = _this2.getItems().filter(function (item) {
          return item.id !== id;
        });
        var projectId = _projects2.default.getCurrentProject().getId();
        var saveitems = _application2.default.getLocalItem(QUERYBUILDERSEARCHES);
        if (querybuildersearches.length) saveitems[projectId] = querybuildersearches;else delete saveitems[projectId];
        if (Object.keys(saveitems).length) _application2.default.setLocalItem({
          id: QUERYBUILDERSEARCHES,
          data: saveitems
        });else _application2.default.removeLocalItem(QUERYBUILDERSEARCHES);
        resolve();
      } else reject();
    });
  });
};

proto.editLocalItem = function (projectId, querybuildersearch) {
  projectId = projectId || _projects2.default.getCurrentProject().getId();
  var querybuildersearches = _application2.default.getLocalItem(QUERYBUILDERSEARCHES);
  querybuildersearches[projectId].find(function (_querybuildersearch, index) {
    if (_querybuildersearch.id === querybuildersearch.id) {
      querybuildersearches[projectId][index] = querybuildersearch;
      return true;
    }
  });
  _application2.default.setLocalItem({
    id: QUERYBUILDERSEARCHES,
    data: querybuildersearches
  });
  this._resetItems(projectId, querybuildersearches[projectId]);
};

proto._resetItems = function (projectId, querybuildersearches) {
  var _this3 = this;

  setTimeout(function () {
    querybuildersearches.forEach(function (querybuildersearch) {
      return _this3._items[projectId].push(querybuildersearch);
    });
  }, 0);
  this._items[projectId].splice(0);
};

proto.addLocalItem = function (projectId, querybuildersearch) {
  querybuildersearch.id = uniqueId();
  projectId = projectId || _projects2.default.getCurrentProject().getId();
  var querybuildersearches = _application2.default.getLocalItem(QUERYBUILDERSEARCHES);
  if (querybuildersearches === undefined) {
    var _querybuildersearches = [querybuildersearch];
    _application2.default.setLocalItem({
      id: QUERYBUILDERSEARCHES,
      data: _defineProperty({}, projectId, _querybuildersearches)
    });
    this._resetItems(projectId, _querybuildersearches);
  } else {
    querybuildersearches[projectId] = querybuildersearches[projectId] ? [].concat(_toConsumableArray(querybuildersearches[projectId]), [querybuildersearch]) : [querybuildersearch];
    _application2.default.setLocalItem({
      id: QUERYBUILDERSEARCHES,
      data: querybuildersearches
    });
    this._resetItems(projectId, querybuildersearches[projectId]);
  }
};

proto.save = function () {
  var _this4 = this;

  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref9.id,
      name = _ref9.name,
      layerId = _ref9.layerId,
      filter = _ref9.filter,
      projectId = _ref9.projectId;

  var layerName = this._getLayerById(layerId).getName();
  var querybuildersearch = {
    layerId: layerId,
    filter: filter,
    layerName: layerName
  };
  if (id) {
    querybuildersearch.name = name;
    querybuildersearch.id = id;
    this.editLocalItem(projectId, querybuildersearch);
    _gui2.default.showUserMessage({
      type: 'success',
      message: t("sdk.querybuilder.messages.changed"),
      autoclose: true
    });
    return;
  }
  _gui2.default.dialog.prompt(t('sdk.querybuilder.additem'), function (result) {
    if (result) {
      var searchService = _gui2.default.getComponent('search').getService();
      querybuildersearch.name = result;
      searchService.addQueryBuilderSearch(querybuildersearch);
      _this4.addLocalItem(projectId, querybuildersearch);
      _gui2.default.showUserMessage({
        type: 'success',
        message: t("sdk.querybuilder.messages.changed"),
        autoclose: true
      });
    }
  });
};

proto.all = function () {};

proto.sample = function () {};

proto.clear = function () {
  this._cacheValues = {};
};

proto.add = function () {};

exports.default = new QueryBuilderService();

},{"core/i18n/i18n.service":9,"services/application":310,"services/data":317,"services/gui":319,"store/catalog-layers":329,"store/projects":335,"utils":419}],323:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _catalogLayers = require("store/catalog-layers");

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _projects = require("store/projects");

var _projects2 = _interopRequireDefault(_projects);

var _data = require("services/data");

var _data2 = _interopRequireDefault(_data);

var _sanitizeFidFeature = require("utils/sanitizeFidFeature");

var _getAlphanumericPropertiesFromFeature = require("utils/getAlphanumericPropertiesFromFeature");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('utils'),
    inherit = _require.inherit,
    XHR = _require.XHR,
    base = _require.base,
    createSingleFieldParameter = _require.createSingleFieldParameter;

var G3WObject = require('core/g3wobject');

function RelationsService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
}

inherit(RelationsService, G3WObject);

var proto = RelationsService.prototype;

proto.createUrl = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var currentProject = _projects2.default.getCurrentProject();
  // type : <editing, data, xls>
  var _options$layer = options.layer,
      layer = _options$layer === undefined ? {} : _options$layer,
      _options$relation = options.relation,
      relation = _options$relation === undefined ? {} : _options$relation,
      fid = options.fid,
      _options$type = options.type,
      type = _options$type === undefined ? 'data' : _options$type,
      _options$formatter = options.formatter,
      formatter = _options$formatter === undefined ? 1 : _options$formatter;

  var layerId = void 0;
  var father = relation.father,
      child = relation.child,
      referencedLayer = relation.referencedLayer,
      referencingLayer = relation.referencingLayer,
      relationId = relation.id;

  if (father !== undefined) layerId = layer.id === father ? child : father;else layerId = layer.id === referencedLayer ? referencingLayer : referencedLayer;
  var dataUrl = currentProject.getLayerById(layerId).getUrl(type);
  var value = (0, _sanitizeFidFeature.sanitizeFidFeature)(fid);
  return dataUrl + "?relationonetomany=" + relationId + "|" + value + "&formatter=" + formatter;
};

proto.getRelations = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var url = this.createUrl(options);
  return XHR.get({
    url: url
  });
};

/**
 * Get relations NM
 * @param nmRelation
 * @param features
 * @returns {Promise<[]>}
 */
proto.getRelationsNM = _asyncToGenerator(function* () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      nmRelation = _ref2.nmRelation,
      _ref2$features = _ref2.features,
      features = _ref2$features === undefined ? [] : _ref2$features;

  var referencedLayer = nmRelation.referencedLayer,
      referencingLayer = nmRelation.referencingLayer,
      _nmRelation$fieldRef = nmRelation.fieldRef,
      referencingField = _nmRelation$fieldRef.referencingField,
      referencedField = _nmRelation$fieldRef.referencedField;

  var relationsNM = []; // start with empty relations result
  if (features.length) {
    var values = features.map(function (feature) {
      return feature.attributes[referencingField];
    });
    var responseFids = yield _data2.default.getData('search:features', {
      inputs: {
        layer: _catalogLayers2.default.getLayerById(referencedLayer),
        filter: "" + createSingleFieldParameter({
          field: referencedField,
          value: values,
          logicop: 'OR'
        }),
        formatter: 1, // set formatter to
        search_endpoint: 'api'
      },
      outputs: null
    });
    if (responseFids.data && responseFids.data[0] && Array.isArray(responseFids.data[0].features)) {
      relationsNM = responseFids.data[0].features.map(function (feature) {
        var attributes = (0, _getAlphanumericPropertiesFromFeature.getAlphanumericPropertiesFromFeature)(feature.getProperties()).reduce(function (accumulator, property) {
          accumulator[property] = feature.get(property);
          return accumulator;
        }, {});
        return {
          id: feature.getId(),
          attributes: attributes,
          geometry: feature.getGeometry()
        };
      });
    }
  }
  return relationsNM;
});

proto.save = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var url = this.createUrl(options);
  return XHR.fileDownload({
    url: url,
    httpMethod: "GET"
  });
};

exports.default = new RelationsService();

},{"core/g3wobject":8,"services/data":317,"store/catalog-layers":329,"store/projects":335,"utils":419,"utils/getAlphanumericPropertiesFromFeature":390,"utils/sanitizeFidFeature":447}],324:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file
 * @since v3.6
 */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    Base64 = _require.Base64;

var G3WObject = require('core/g3wobject');

/*
 * RouterService based on  History.js (https://github.com/browserstate/history.js) e Crossroads (https://github.com/millermedeiros/crossroads.js)
 * Base concept is RouteQuery, example "map?point=21.2,42.1&zoom=12",
 * it inserts into browser and URL as quesrystring (q=map@point!21.2,41.1|zoom!12).
 * To run RouteQuery:
 *
 * RouterService.goto("map?point=21.2,42.1&zoom=12");
 *
 *To listen to router has to be add  RouterService.addRoute(pattern, callback). Es.:
 *
 * var route = RouterService.addRoute('map/{?query}',function(query){
 *  console.log(query.point);
 *  console.log(query.zoom);
 * });
 *
 * Patterns:
 *  "map/{foo}": la porzione "foo" is request, and is passed as parameter in callback
 *  "map/:foo:": la porzione "foo" è optional, 
 *  "map/:foo*: 
 *  "map/{?querystring}": mandatory
 *  "map/:?querystring:": optionals
 *
 * to remove  route:
 * RouterService.removeRoute(route);
*/

crossroads.ignoreState = true;
crossroads.greedy = true;

var RouterService = function RouterService() {

  this._initialLocationQuery;
  this._routeQuery = '';
  this.setters = {
    setRouteQuery: function setRouteQuery(routeQuery) {
      this._routeQuery = routeQuery;
      crossroads.parse(routeQuery);
    }
  };

  base(this);
};
inherit(RouterService, G3WObject);

var proto = RouterService.prototype;

proto.init = function () {
  //Return the querystring part of a URL
  var query = window.location.search;
  this._setRouteQueryFromLocationQuery(query);
};

proto.addRoute = function (pattern, handler, priority) {
  return crossroads.addRoute(pattern, handler, priority);
};

proto.removeRoute = function (route) {
  return crossroads.removeRoute(route);
};

proto.removeAllRoutes = function () {
  return crossroads.removeAllRoutes();
};

proto.parse = function (request, defaultArgs) {
  return crossroads.parse(request, defaultArgs);
};

proto.goto = function (routeQuery) {
  if (!this._initialQuery) {
    this._initialLocationQuery = this._stripInitialQuery(location.search.substring(1));
  }
  if (routeQuery) {
    this.setRouteQuery(routeQuery);
  }
};

proto.makePermalink = function (routeQuery) {
  if (!this._initialQuery) {
    this._initialLocationQuery = this._stripInitialQuery(location.search.substring(1));
  }
  var encodedRouteQuery = this._encodeRouteQuery(routeQuery);
  //encodedRouteQuery = Base64.encode(encodedRouteQuery);
  return '?' + this._initialLocationQuery + '&q=' + this._encodeRouteQuery(routeQuery);
};

proto.makeQueryString = function (queryParams) {};

proto.slicePath = function (path) {
  return path.split('?')[0].split('/');
};

proto.sliceFirst = function (path) {
  var pathAndQuery = path.split('?');
  var queryString = pathAndQuery[1];
  var pathArr = pathAndQuery[0].split('/');
  var firstPath = pathArr[0];
  path = pathArr.slice(1).join('/');
  path = [path, queryString].join('?');
  return [firstPath, path];
};

proto.getQueryParams = function (query) {
  query = query.replace('?', '');
  var queryParams = {};
  var queryPairs = [];
  if (query != "" && query.indexOf("&") == -1) {
    queryPairs = [query];
  } else {
    queryPairs = query.split('&');
  }
  try {
    _.forEach(queryPairs, function (queryPair) {
      var pair = queryPair.split('=');
      var key = pair[0];
      var value = pair[1];
      queryParams[key] = value;
    });
  } catch (e) {}
  return queryParams;
};

proto.getQueryString = function (path) {
  return path.split('?')[1];
};

proto._getQueryPortion = function (query, queryKey) {
  var queryPortion;
  try {
    var queryPairs = query.split('&');
    var queryParams = {};
    _.forEach(queryPairs, function (queryPair) {
      var pair = queryPair.split('=');
      var key = pair[0];
      if (key == queryKey) {
        queryPortion = queryPair;
      }
    });
  } catch (e) {}
  return queryPortion;
};

proto._encodeRouteQuery = function (routeQuery) {
  routeQuery = routeQuery.replace('?', '@');
  routeQuery = routeQuery.replace('&', '|');
  routeQuery = routeQuery.replace('=', '!');
  return routeQuery;
};

proto._decodeRouteQuery = function (routeQuery) {
  routeQuery = routeQuery.replace('@', '?');
  routeQuery = routeQuery.replace('|', '&');
  routeQuery = routeQuery.replace('!', '=');
  return routeQuery;
};

proto._setRouteQueryFromLocationQuery = function (locationQuery) {
  var encodedRouteQuery = this._getRouteQueryFromLocationQuery(locationQuery);
  //encodedRouteQuery = Base64.decode(encodedRouteQuery);
  if (encodedRouteQuery) {
    var routeQuery = this._decodeRouteQuery(encodedRouteQuery);
    this.setRouteQuery(routeQuery);
  }
};

proto._getRouteQueryFromLocationQuery = function (locationQuery) {
  return this.getQueryParams(locationQuery)['q'];
};

proto._stripInitialQuery = function (locationQuery) {
  var previousQuery = this._getQueryPortion(locationQuery, 'q');
  if (previousQuery) {
    var previousQueryLength = previousQuery.length;
    var previousQueryPosition = locationQuery.indexOf(previousQuery);
    queryPrefix = _.trimEnd(locationQuery.substring(0, previousQueryPosition), "&");
    querySuffix = locationQuery.substring(previousQueryPosition + previousQueryLength);
    querySuffix = queryPrefix != "" ? querySuffix : _.trimStart(querySuffix, "&");
    locationQuery = queryPrefix + querySuffix;
  }
  return locationQuery;
};

exports.default = new RouterService();

},{"core/g3wobject":8,"utils":419}],325:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * @file
                                                                                                                                                                                                                                                                   * @since v3.7
                                                                                                                                                                                                                                                                   */

var _SidebarItem = require('components/SidebarItem.vue');

var _SidebarItem2 = _interopRequireDefault(_SidebarItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var _require2 = require('gui/utils/utils'),
    Stack = _require2.barstack;

var G3WObject = require('core/g3wobject');

/**
 * TODO: temporary need to remove it
 */
var SidebarItem = Vue.extend(_SidebarItem2.default);

function SidebarService() {
  //set sidebar stack
  this.stack = new Stack();
  // set setter for close sidebarpanel to catch event
  // of closing panel of the sidebar
  this.setters = {
    closeSidebarPanel: function closeSidebarPanel() {},
    openCloseItem: function openCloseItem(bool) {}
  };
  //service state
  this.state = {
    components: [],
    gui: {
      title: ''
    },
    disabled: false
  };
  //inizialize method
  this.init = function (layout) {
    this.layout = layout;
  };
  // add component to sidebar
  this.addComponents = function (components) {
    var _this = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    //for each component of the sidebar it is call addComponent method
    components.forEach(function (component) {
      return _this.addComponent(component, options);
    });
    return true;
  };
  // add each component to the sidebar
  // add also position insiede the sidebar
  this.addComponent = function (component) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var position = options.position,
        _options$before = options.before,
        before = _options$before === undefined ? true : _options$before,
        info = options.info;

    if (isMobile.any && !component.mobile) {
      return false;
    }
    var sidebarItem = new SidebarItem({
      service: this,
      info: info,
      component: component
    });
    sidebarItem.title = component.title || sidebarItem.title;
    sidebarItem.info = component.info || sidebarItem.info;
    sidebarItem.actions = component.actions || sidebarItem.actions;
    sidebarItem.open = component.state.open; //(component.open === undefined) ? sidebarItem.open : component.open;
    sidebarItem.icon = component.icon || sidebarItem.icon;
    sidebarItem.iconColor = component.iconColor;
    sidebarItem.state = component.state || true;
    sidebarItem.collapsible = typeof component.collapsible === 'boolean' ? component.collapsible : true;
    sidebarItem.isolate = typeof component.isolate === 'boolean' ? component.isolate : false;
    //append component to  g3w-sidebarcomponents (template sidebar.html)
    var DOMComponent = sidebarItem.$mount().$el;
    this.state.components.push(component);
    var isPanelSidebarShow = $('.g3w-sidebarpanel').is(':visible');
    var sidebarcomponetsdomid = '#g3w-sidebarcomponents' + (isPanelSidebarShow ? ':hidden' : '');
    var children = $(sidebarcomponetsdomid).children().filter(function () {
      return this.style.display !== 'none';
    });
    var childrenLength = children.length;
    if (position === null || position === undefined || position < 0 || position >= childrenLength) $(sidebarcomponetsdomid).append(DOMComponent);else children.each(function (index, element) {
      var findElementIndexId = Number.isInteger(position) ? position === index : element.id === position;
      findElementIndexId && $(DOMComponent)['insert' + (before ? 'Before' : 'After')](element);
    });
    //mount componet to g3w-sidebarcomponent-placeholder (template sidebar-item.html);
    component.mount("#g3w-sidebarcomponent-placeholder");
    // check if componentonent has iniService method
    component.initService && component.initService();
    // add click handler
    this.setComponentClickHandler(component);
    return true;
  };

  this.setComponentClickHandler = function (component) {
    component.click = function () {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$open = _ref.open,
          open = _ref$open === undefined ? false : _ref$open;

      open = open || false;
      $(component.getInternalComponent().$el).siblings('a').click();
      component.setOpen(open);
    };
  };

  // get component by id
  this.getComponent = function (id) {
    return this.state.components.find(function (component) {
      return component.getId() === id;
    });
  };

  // get all components
  this.getComponents = function () {
    return this.state.components;
  };

  /**
   * close for the moment only conlapsbale
   */
  this.closeOpenComponents = function () {
    var collapsible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this.getComponents().forEach(function (component) {
      return component.closeWhenViewportContentIsOpen() && component.collapsible && component.click({ open: false });
    });
  };

  this.reloadComponent = function (id) {
    var component = this.getComponent(id);
    component && component.reload();
  };

  this.reloadComponents = function () {
    // force close of the panel
    this.closePanel();
    this.state.components.forEach(function (component) {
      if (component.collapsible && component.state.open) component.click({ open: false });
      component.reload();
    });
  };
  //remove component
  this.removeComponent = function (component) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var position = options.position;

    this.state.components.forEach(function (sidebarComponent, index) {
      if (component === sidebarComponent) {
        component.unmount();
        _this2.state.components.splice(index, 1);
        if (position !== undefined && Number.isInteger(position)) $('#g3w-sidebarcomponents').children(':visible')[position].remove();else $('#g3w-sidebarcomponents').children('#' + component.id).remove();
        return false;
      }
    });
  };
  // show panel on stack
  this.showPanel = function (panel) {
    var _this3 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      _this3.state.gui.title = panel.title;
      var parent = "#g3w-sidebarpanel-placeholder";
      _this3.stack.getCurrentContentData() && $(_this3.stack.getCurrentContentData().content.internalPanel.$el).hide();
      _this3.stack.push(panel, _extends({
        parent: parent
      }, options)).then(function (content) {
        return resolve(content);
      });
    });
  };

  // close panel
  this.closePanel = function () {
    var _this4 = this;

    this.closeSidebarPanel();
    this.stack.pop().then(function (content) {
      content = null;
      if (_this4.stack.getCurrentContentData()) {
        $(_this4.stack.getCurrentContentData().content.internalPanel.$el).show();
        _this4.state.gui.title = _this4.stack.getCurrentContentData().content.title;
      }
    });
  };

  this.closeAllPanels = function () {
    this.state.gui.title = null;
    this.closeSidebarPanel();
    this.stack.clear();
  };

  base(this);
}

inherit(SidebarService, G3WObject);

exports.default = new SidebarService();

},{"components/SidebarItem.vue":253,"core/g3wobject":8,"gui/utils/utils":144,"utils":419}],326:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * @file
 * @since v3.6
 */

var _require = require('utils'),
    XHR = _require.XHR;

/**
 * Singletone service to run async task
 * @constructor
 */


function TaskService() {
  /**
   * Array contain all task id that are running. Each item is an object contain:
   * {
   *   taskId: //taskId,
   *   intervalId: interval to clear clearInterval()
   * }
   **/
  var tasks = [];
  /**
   *
   * @param options: {
   *   method: http method to run task GET/POST
   *   url: api request url (that server start in background task)
   *   taskUrl = url to ask the status og task
   *   params: Object contain param to http/https request
   *   interval: interval in milliseconds to do a request for ask status of task (default 10000 - 1 second)
   *   listener: ()=>{} method to call
   *
   * }
   *
   * return a Promise that return a task id
   */
  this.runTask = _asyncToGenerator(function* () {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$method = options.method,
        method = _options$method === undefined ? 'GET' : _options$method,
        _options$params = options.params,
        params = _options$params === undefined ? {} : _options$params,
        url = options.url,
        taskUrl = options.taskUrl,
        _options$interval = options.interval,
        interval = _options$interval === undefined ? 1000 : _options$interval,
        _options$timeout = options.timeout,
        timeout = _options$timeout === undefined ? Infinity : _options$timeout,
        _options$listener = options.listener,
        listener = _options$listener === undefined ? function () {} : _options$listener;

    try {
      var response = method === 'GET' ? yield XHR.get({
        url: url,
        params: params
      }) : yield XHR.post({
        url: url,
        data: params.data || {},
        contentType: params.contentType || "application/json"
      });
      var result = response.result,
          task_id = response.task_id;

      if (result) {
        var intervalId = setInterval(_asyncToGenerator(function* () {
          // check if timeout is defined
          timeout = timeout - interval;
          if (timeout > 0) {
            var _response = void 0;
            try {
              _response = yield XHR.get({
                url: '' + taskUrl + task_id
              });
            } catch (error) {
              _response = error;
            }
            listener({
              task_id: task_id,
              timeout: false,
              response: _response
            });
          } else {
            listener({
              timeout: true
            });
            _this.stopTask({
              task_id: task_id
            });
          }
        }), interval);

        // add current task to list of task
        tasks.push({
          task_id: task_id,
          intervalId: intervalId
        });

        // run first time listener function
        listener({
          task_id: task_id,
          response: response
        });
      } else return Promise.reject(response);
    } catch (err) {
      return Promise.reject(err);
    }
  });

  /**
   *
   * @param options: {
   *   taskId: taskId that is running
   * }
   */
  this.stopTask = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var task_id = options.task_id;

    var task = tasks.find(function (task) {
      return task.task_id === task_id;
    });
    if (task) clearInterval(task.intervalId);
  };

  /**
   * clare all task
   */
  this.clear = function () {
    var _this2 = this;

    tasks.forEach(function (_ref3) {
      var taskId = _ref3.taskId;

      _this2.stopTask({
        taskId: taskId
      });
    });
    //reset to empty tasks
    tasks.splice(0);
  };
}

/**
 * SERVER
 * """Returns the (possibly) new layer ID where the isochrone
 data has been added. If the task has not yet completed a status message is returned

 Note: `project_id` is only used for permissions checking!

 Returns 500 in case of exceptions
 Returns 404 in case of task not found
 Returns 200 ok for all other cases

 Response body:

 {
            "status": "complete",  // or "pending" or "error", full list at
                                   // https://huey.readthedocs.io/en/latest/signals.html#signals
            "exception": "Normally empty, error message in case of errors",
            "progress": [
                100,  // Progress %
            ],
            "task_result": {
                "qgis_ayer_id": "4f2a88a1-ca93-4859-9de3-75d9728cde0e"
            }
        }

 **/

exports.default = new TaskService();

},{"utils":419}],327:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
file
since v3.7


var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit,
    uniqueId = _require.uniqueId;

var G3WObject = require('core/g3wobject');

var ViewportService = function ViewportService() {
  // state of viewport
  this.state = {
    primaryView: 'map', // primary view (default)
    // percentage of secondary view
    secondaryPerc: 0, // setted to 0 at beginning (not visible)
    // used to store if content vertical or horizontal is  changed by resised
    resized: {
      start: false,
      'h': false,
      'v': false
    },
    // splitting orientation (h = horizontal, v = vertical)
    split: 'h',
    //map
    map: {
      sizes: {
        width: 0,
        height: 0
      },
      aside: false
    },
    //content
    content: {
      loading: false,
      disabled: false,
      sizes: {
        width: 0,
        height: 0
      },
      // store the resize vertical or horizontal
      resize: {
        'h': {
          perc: 0
        },
        'v': {
          perc: 0
        }
      },
      aside: true,
      showgoback: true,
      stack: [], // array elements of  stack contents
      closable: true, // (x) is closable
      backonclose: false, // back on prevoius content
      contentsdata: [] // content data array
    },
    usermessage: {
      id: null, // unique identify
      show: false,
      title: null,
      message: null,
      position: null,
      type: null,
      draggable: null,
      cloasable: null,
      autoclose: null,
      textMessage: false,
      hooks: {
        header: null,
        body: null,
        footer: null
      }
    }
  };
  // content of viewport (map and content)
  this._components = {
    map: null,
    content: null
  };
  // default contents
  this._defaultMapComponent;
  this._contextualMapComponent;

  // minimun height and width of secondary view
  this._secondaryViewMinWidth = _constant.VIEWPORT.resize.content.min;
  this._secondaryViewMinHeight = _constant.VIEWPORT.resize.content.min;
  this._immediateComponentsLayout = true;
  this.init = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$primaryview = options.primaryview,
        primaryview = _options$primaryview === undefined ? 'map' : _options$primaryview,
        _options$split = options.split,
        split = _options$split === undefined ? 'h' : _options$split,
        components = options.components;
    // check if it set primary view (map is default)

    this.state.primaryView = primaryview;
    // check splitting property
    this.state.split = split;
    // add component (map and content)
    this._addComponents(components);
  };

  // Method to set true or false of content
  this.setResized = function (type) {
    var bool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    this.state.resized[type] = bool;
  };

  this.showUserMessage = function () {
    var _this = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        title = _ref.title,
        subtitle = _ref.subtitle,
        message = _ref.message,
        type = _ref.type,
        position = _ref.position,
        size = _ref.size,
        draggable = _ref.draggable,
        duration = _ref.duration,
        _ref$textMessage = _ref.textMessage,
        textMessage = _ref$textMessage === undefined ? false : _ref$textMessage,
        closable = _ref.closable,
        autoclose = _ref.autoclose,
        _ref$hooks = _ref.hooks,
        hooks = _ref$hooks === undefined ? {} : _ref$hooks;

    this.closeUserMessage();
    setTimeout(function () {
      _this.state.usermessage.id = uniqueId();
      _this.state.usermessage.show = true;
      _this.state.usermessage.message = message;
      _this.state.usermessage.textMessage = textMessage;
      _this.state.usermessage.title = title;
      _this.state.usermessage.subtitle = subtitle;
      _this.state.usermessage.position = position;
      _this.state.usermessage.duration = duration;
      _this.state.usermessage.type = type;
      _this.state.usermessage.show = true;
      _this.state.usermessage.size = size;
      _this.state.usermessage.autoclose = autoclose;
      _this.state.usermessage.closable = closable;
      _this.state.usermessage.draggable = draggable;
      _this.state.usermessage.hooks.header = hooks.header; // has to be a vue component or vue object
      _this.state.usermessage.hooks.body = hooks.body; // has to be a vue component or vue object
      _this.state.usermessage.hooks.footer = hooks.footer; // has to be a vue component or vue object
    });
    return this.state.usermessage;
  };

  this.closeUserMessage = function () {
    this.state.usermessage.id = null;
    this.state.usermessage.show = false;
    this.state.usermessage.textMessage = false;
    this.state.usermessage.message = '';
  };

  this.getState = function () {
    return this.state;
  };

  this.getMapState = function () {
    return this.state.map;
  };

  this.getContentState = function () {
    return this.state.content;
  };

  this.setLoadingContent = function () {
    var loading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    this.state.content.loading = loading;
  };

  this._addComponents = function (components) {
    var _this2 = this;

    // components is an object
    //(index.js)
    /*
     {
      map: new MapComponent({
        id: 'map'
      }),
      content: new ContentsComponent({
        id: 'contents'
      })
     }
     */
    Object.entries(components).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          viewName = _ref3[0],
          component = _ref3[1];

      // check if component are map or content
      if (Object.keys(_this2._components).indexOf(viewName) > -1) {
        component.mount('#g3w-view-' + viewName, true).then(function () {
          _this2._components[viewName] = component;
          // check if view name is map
          if (viewName === 'map') _this2._defaultMapComponent = component; // set de default component to map
        }).fail(function (err) {
          return console.log(err);
        });
      }
    });
  };

  this.showMap = function () {
    this._toggleMapComponentVisibility(this._defaultMapComponent, true);
    this._components['map'] = this._defaultMapComponent;
    this._showView('map');
  };

  this.showContextualMap = function () {
    var _this3 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (!this._contextualMapComponent) this._contextualMapComponent = this._defaultMapComponent;
    if (this._contextualMapComponent != this._defaultMapComponent) this._toggleMapComponentVisibility(this._defaultMapComponent, false);
    if (!this._contextualMapComponent.ismount()) {
      var contextualMapComponent = this._contextualMapComponent;
      contextualMapComponent.mount('#g3w-view-map', true).then(function () {
        return _this3._components['map'] = contextualMapComponent;
      });
    } else {
      this._components['map'] = this._contextualMapComponent;
      this._toggleMapComponentVisibility(this._contextualMapComponent, true);
    }
    this._showView('map', options);
  };

  // get default component
  this.recoverDefaultMap = function () {
    if (this._components['map'] !== this._defaultMapComponent) {
      this._components['map'] = this._defaultMapComponent;
      this._toggleMapComponentVisibility(this._contextualMapComponent, false);
      this._toggleMapComponentVisibility(this._defaultMapComponent, true);
    }
    return this._components['map'];
  };

  this.setContextualMapComponent = function (mapComponent) {
    if (mapComponent === this._defaultMapComponent) return;
    if (this._contextualMapComponent) this._contextualMapComponent.unmount();
    this._contextualMapComponent = mapComponent;
  };

  this.resetContextualMapComponent = function () {
    this._contextualMapComponent && this._contextualMapComponent.unmount();
    this._contextualMapComponent = this._defaultMapComponent;
  };

  this._toggleMapComponentVisibility = function (mapComponent, toggle) {
    mapComponent.internalComponent.$el.style.display = toggle ? 'block' : 'none';
  };

  // close map method
  this.closeMap = function () {
    this.state.secondaryPerc = this.state.primaryView === 'map' ? 100 : 0;
    this.recoverDefaultMap();
    this._layout();
  };

  // show content of the viewport content
  /*
   options: {
     content: (string, jQuery elemento or Vue component)
     title: Title of the content
     push: (opyionale, default false): if yes the content is push on top of the stack (contentStack)
     split: (optional, default 'h'): 'h' || 'v' splitting map and content orientation
     perc: (optional, default 50): percentage of content
   }
   */

  this.showContent = function () {
    var _this4 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    options.perc = options.perc !== undefined ? options.perc : this.getContentPercentageFromCurrentLayout();
    // check if push is set
    options.push = options.push || false;
    var evenContentName = options.perc === 100 ? 'show-content-full' : 'show-content';
    // set all content parameters
    this._prepareContentView(options);
    // immediate layout false (to understand better)
    this._immediateComponentsLayout = false;
    // call show view (in this case content (other is map)
    this._showView('content', options);
    this._components.content.setContent(options).then(function () {
      _this4._immediateComponentsLayout = true;
      _this4._layoutComponents(evenContentName);
    });
  };

  // hide content
  this.hideContent = function (bool) {
    var prevContentPerc = this.getContentPercentageFromCurrentLayout(this.state.split);
    this.state.secondaryVisible = !bool;
    this._layout('hide-content');
    // return previous percentage
    return prevContentPerc;
  };

  this.resetToDefaultContentPercentage = function () {
    var currentRightPanel = this.getCurrentContentLayout();
    currentRightPanel['' + (this.state.split === 'h' ? 'width' : 'height')] = currentRightPanel[(this.state.split === 'h' ? 'width' : 'height') + '_default'];
    currentRightPanel[(this.state.split === 'h' ? 'width' : 'height') + '_100'] = false;
    this._layoutComponents();
  };

  this.toggleFullViewContent = function () {
    _applicationState2.default.gui.layout[_applicationState2.default.gui.layout.__current].rightpanel[(this.state.split === 'h' ? 'width' : 'height') + '_100'] = !_applicationState2.default.gui.layout[_applicationState2.default.gui.layout.__current].rightpanel[(this.state.split === 'h' ? 'width' : 'height') + '_100'];
    this._layoutComponents();
  };

  this.isFullViewContent = function () {
    return _applicationState2.default.gui.layout[_applicationState2.default.gui.layout.__current].rightpanel[(this.state.split === 'h' ? 'width' : 'height') + '_100'];
  };

  this.contentLength = function () {
    return this.state.content.contentsdata.length;
  };

  // pull the last element of contentStack
  this.popContent = function () {
    var _this5 = this;

    var d = $.Deferred();
    // check if content exist compontentStack
    if (this.state.content.contentsdata.length) {
      this.recoverDefaultMap();
      var data = this._components.content.getPreviousContentData();
      this._prepareContentView(data.options);
      this._immediateComponentsLayout = false;
      this._showView('content', data.options);
      this._components.content.popContent().then(function () {
        _this5.state.secondaryPerc = data.options.perc;
        _this5._immediateComponentsLayout = true;
        _this5._layout('pop-content');
        d.resolve(_this5._components.contentgetCurrentContentData);
      });
    } else d.reject();
    return d.promise();
  };

  /**
   * Return current compoent data
   * @returns {*}
   */
  this.getCurrentContent = function () {
    return this.contentLength() ? this.state.content.contentsdata[this.contentLength() - 1] : null;
  };

  this.getCurrentContentTitle = function () {
    var currentContent = this.getCurrentContent();
    return currentContent && currentContent.options.title;
  };

  this.getCurrentContentId = function () {
    var currentContent = this.getCurrentContent();
    return currentContent && currentContent.options.id;
  };

  this.changeCurrentContentOptions = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var currentContent = this.getCurrentContent();
    if (currentContent) {
      var title = options.title,
          crumb = options.crumb;

      if (title) currentContent.options.title = title;
      if (crumb) currentContent.options.crumb = crumb;
    }
  };

  this.changeCurrentContentTitle = function () {
    var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var currentContent = this.getCurrentContent();
    if (currentContent) currentContent.options.title = title;
  };

  this.isContentOpen = function () {
    return !!this.state.content.contentsdata.length;
  };

  // close  content
  this.closeContent = function () {
    var _this6 = this;

    var d = $.Deferred();
    if (this.isContentOpen()) {
      //.setFullViewContent(false);
      this._components.content.removeContent();
      // close secondary view( return a promise)
      this.closeSecondaryView('close-content').then(function () {
        //recover default map
        var mapComponent = _this6.recoverDefaultMap();
        d.resolve(mapComponent);
      });
    } else {
      var mapComponent = this.recoverDefaultMap();
      d.resolve(mapComponent);
    }
    return d.promise();
  };

  this.disableContent = function (disabled) {
    this.state.content.disabled = disabled;
  };

  this.removeContent = function () {
    // check if backonclose proprerty is  true o false
    // to remove all content stack or just last component
    if (this.state.content.backonclose && this.state.content.contentsdata.length > 1) this.popContent();else return this.closeContent();
  };

  this.isPrimaryView = function (viewName) {
    return this.state.primaryView == viewName;
  };

  this.setPrimaryView = function (viewTag) {
    if (this.state.primaryView !== viewTag) this.state.primaryView = viewTag;
    this._layout();
  };

  this.showPrimaryView = function () {
    var perc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (perc && this.state.secondaryVisible && this.state.secondaryPerc === 100) {
      this.state.secondaryPerc = 100 - perc;
      this._layout();
    }
  };

  this.showSecondaryView = function () {
    var split = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.split;
    var perc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.perc;

    this.state.secondaryVisible = true;
    this.state.split = split;
    this.state.secondaryPerc = perc;
    this._layout();
  };

  // close secondary view
  this.closeSecondaryView = function () {
    var _this7 = this;

    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var d = $.Deferred();
    var secondaryViewComponent = this._components[this._otherView(this.state.primaryView)];
    if (secondaryViewComponent.clearContents) {
      secondaryViewComponent.clearContents().then(function () {
        _this7.state.secondaryVisible = false;
        _this7.state.secondaryPerc = 0;
        _this7._layout(event);
        Vue.nextTick(function () {
          return d.resolve();
        });
      });
    } else {
      this.state.secondaryVisible = false;
      this._layout(event);
      Vue.nextTick(function () {
        return d.resolve();
      });
    }
    return d.promise();
  };

  this.getDefaultViewPerc = function (viewName) {
    return this.isPrimaryView(viewName) ? 100 : 50;
  };

  // return the opposite view
  this._otherView = function (viewName) {
    return viewName === 'map' ? 'content' : 'map';
  };

  this._isSecondary = function (view) {
    return this.state.primaryView !== view;
  };

  this._setPrimaryView = function (viewTag) {
    if (this.state.primaryView !== viewTag) this.state.primaryView = viewTag;
  };

  /**
   * Set the state of content (right or bottom content other than map)
   * @param options
   * @private
   */
  this._prepareContentView = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var title = options.title,
        _options$split2 = options.split,
        split = _options$split2 === undefined ? null : _options$split2,
        _options$closable = options.closable,
        closable = _options$closable === undefined ? true : _options$closable,
        _options$backonclose = options.backonclose,
        backonclose = _options$backonclose === undefined ? true : _options$backonclose,
        _options$style = options.style,
        style = _options$style === undefined ? {} : _options$style,
        _options$showgoback = options.showgoback,
        showgoback = _options$showgoback === undefined ? true : _options$showgoback,
        _options$headertools = options.headertools,
        headertools = _options$headertools === undefined ? [] : _options$headertools;

    this.state.content.title = title;
    this.state.content.split = split;
    this.state.content.closable = closable;
    this.state.content.backonclose = backonclose;
    this.state.content.contentsdata = this._components.content.contentsdata;
    this.state.content.style = style;
    this.state.content.headertools = headertools;
    this.state.content.showgoback = showgoback;
  };

  // manage all layout logic
  // viewName: map or content
  //options.  percentage , splitting title etc ..
  this._showView = function (viewName) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$perc = options.perc,
        perc = _options$perc === undefined ? this.getDefaultViewPerc(viewName) : _options$perc,
        _options$split3 = options.split,
        split = _options$split3 === undefined ? 'h' : _options$split3;

    var aside = void 0;
    if (this.isPrimaryView(viewName)) aside = typeof options.aside == 'undefined' ? false : options.aside;else aside = true;
    this.state[viewName].aside = aside;
    //calculate the content
    var secondaryPerc = this.isPrimaryView(viewName) ? 100 - perc : perc;
    //show Secondary View content only if more then 0
    if (secondaryPerc > 0) this.showSecondaryView(split, secondaryPerc);else return this.closeSecondaryView();
  };

  this._getReducedSizes = function () {
    var contentEl = $('.content');
    var reducedWidth = 0;
    var reducedHeight = 0;
    var sideBarToggleEl = $('.sidebar-aside-toggle');
    if (contentEl && this.state.secondaryVisible && this.isFullViewContent()) {
      if (sideBarToggleEl && sideBarToggleEl.is(':visible')) {
        var toggleWidth = sideBarToggleEl.outerWidth();
        contentEl.css('padding-left', toggleWidth + 5);
        reducedWidth = toggleWidth - 5;
      }
    } else {
      var _toggleWidth = sideBarToggleEl.outerWidth();
      contentEl.css('padding-left', this.state.secondaryPerc === 100 ? _toggleWidth + 5 : 15);
    }
    return {
      reducedWidth: reducedWidth,
      reducedHeight: reducedHeight
    };
  };

  //main layout function
  this._layout = function () {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var reducesdSizes = this._getReducedSizes();
    this._setViewSizes(reducesdSizes.reducedWidth, reducesdSizes.reducedHeight);
    if (this._immediateComponentsLayout) this._layoutComponents(event);
  };

  this._setViewSizes = function () {
    var primaryView = this.state.primaryView;
    var secondaryView = this._otherView(primaryView);

    var _getViewportSize = this.getViewportSize(),
        viewportWidth = _getViewportSize.width,
        viewportHeight = _getViewportSize.height;
    // assign all width and height of the view to primary view (map)


    var primaryWidth = void 0;
    var primaryHeight = void 0;
    var secondaryWidth = void 0;
    var secondaryHeight = void 0;
    // percentage of secondary view (content)
    var scale = (this.state.secondaryPerc !== 100 && !this.isFullViewContent() ? this.getContentPercentageFromCurrentLayout(this.state.split) : 100) / 100;
    if (this.state.split === 'h') {
      secondaryWidth = this.state.secondaryVisible ? Math.max(viewportWidth * scale, this._secondaryViewMinWidth) : 0;
      secondaryHeight = viewportHeight;
      primaryWidth = viewportWidth - secondaryWidth;
      primaryHeight = viewportHeight;
    } else {
      secondaryWidth = viewportWidth;
      secondaryHeight = this.state.secondaryVisible ? Math.max(viewportHeight * scale, this._secondaryViewMinHeight) : 0;
      primaryWidth = this.state.secondaryVisible && scale === 1 ? 0 : viewportWidth;
      primaryHeight = viewportHeight - secondaryHeight;
    }
    this.state[primaryView].sizes.width = primaryWidth;
    this.state[primaryView].sizes.height = primaryHeight;
    this.state[secondaryView].sizes.width = secondaryWidth;
    this.state[secondaryView].sizes.height = secondaryHeight;
  };

  this.getViewportSize = function () {
    return {
      width: this._viewportWidth(),
      height: this._viewportHeight()
    };
  };

  this._viewportHeight = function () {
    var topHeight = $('.navbar-header').innerHeight();
    return $(document).innerHeight() - topHeight;
  };

  this._viewportWidth = function () {
    var main_sidebar = $(".main-sidebar");
    var offset = main_sidebar.length && main_sidebar.offset().left;
    var width = main_sidebar.length && main_sidebar[0].getBoundingClientRect().width;
    var sideBarSpace = width + offset;
    return $('#app')[0].getBoundingClientRect().width - sideBarSpace;
  };

  /**
   * Method that se resize. Is called by moveFnc that is called from resize (vertical or horiziontal) component
   * @param type
   * @param sizes
   * @param perc
   */
  this.resizeViewComponents = function (type) {
    var sizes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var perc = arguments[2];

    this.setResized(type, true);
    this.setContentPercentageFromCurrentLayout(type, perc);
    this._layout('resize');
  };

  /**
   * Get current information layout
   * @param type
   * @param perc
   */
  this.setContentPercentageFromCurrentLayout = function () {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.split;
    var perc = arguments[1];

    this.getCurrentContentLayout()[type === 'h' ? 'width' : 'height'] = perc;
  };

  this.getContentPercentageFromCurrentLayout = function () {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.split;

    return this.getCurrentContentLayout()[type === 'h' ? 'width' : 'height'];
  };

  this.getCurrentContentLayout = function () {
    return _applicationState2.default.gui.layout[_applicationState2.default.gui.layout.__current].rightpanel;
  };

  // load components of  viewport
  // after right size setting
  this._layoutComponents = function () {
    var _this8 = this;

    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    requestAnimationFrame(function () {
      var reducesdSizes = _this8._getReducedSizes();
      var reducedWidth = reducesdSizes.reducedWidth || 0;
      var reducedHeight = reducesdSizes.reducedHeight || 0;
      // for each components
      _this8._setViewSizes();
      Object.entries(_this8._components).forEach(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
            name = _ref5[0],
            component = _ref5[1];

        var width = _this8.state[name].sizes.width - reducedWidth;
        var height = _this8.state[name].sizes.height - reducedHeight;
        component.layout(width, height);
      });
      event && setTimeout(function () {
        _this8.emit(event);
        _gui2.default.emit(event);
      });
    });
  };

  /**
   * function called at start of application (just one time)
   * @private
   */
  this._firstLayout = function () {
    var _this9 = this;

    var drawing = false;
    var resizeFired = false;
    function triggerResize() {
      resizeFired = true;
      drawResize();
    }
    /**
     * function called from resize of browser windows (also open dev tool)
     */
    var drawResize = function drawResize() {
      if (resizeFired === true) {
        resizeFired = false;
        drawing = true;
        _this9._layout('resize');
        requestAnimationFrame(drawResize);
      } else {
        drawing = false;
      }
    };
    // GUI ready event
    _gui2.default.on('ready', function () {
      /**
       * SetSidebar width (used by components/Viewport.vue single file component)
       */
      _this9.SIDEBARWIDTH = _gui2.default.getSize({ element: 'sidebar', what: 'width' });
      _this9._layout();
      _gui2.default.on('guiresized', function () {
        return triggerResize();
      });
      // resize della window
      $(window).resize(function () {
        // set resizedFired to true and execute drawResize if it's not already running
        drawing === false && triggerResize();
      });
      // resize on main siedemar open close sidebar
      $('.main-sidebar').on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function (event) {
        //be sure that is the main sidebar that is transitioned non his child
        if (event.target === this) {
          $(this).trigger('trans-end');
          triggerResize();
        }
      });
    });
  };
  this._firstLayout();
  base(this);
};

inherit(ViewportService, G3WObject);

//singleton
exports.default = new ViewportService();

},{"app/constant":5,"core/g3wobject":8,"services/gui":319,"store/application-state":328,"utils":419}],328:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file State and methods to query the STATE of application
 * @since v3.6
 */

/**
 * State of application reactive
 * @type {object}
 */
var STATE = Vue.observable({

  /**
   * true = application is ready
   */
  ready: false,

  /**
   * true = application is loaded inside an iframe
   */
  iframe: false,

  /**
   * true = application is connected
   */
  online: false,

  /**
   * true = application is loaded on mobile device
   */
  ismobile: false,

  /**
   * true = there is a pending download 
   */
  download: false,

  /**
   * true = there is a pending upload
   */
  upload: false,

  /**
   * @FIXME add description
   */
  baseLayerId: null,

  /**
   * en = default language
   */
  language: 'en',

  /**
   * @deprecated Since v3.8. Will be deleted in v4.x. Use ApplicationState.language instead
   */
  lng: 'en',

  /**
   * @FIXME add description
   */
  changeProjectview: false,

  /**
   * Store Array of loading plugin name add by ApplicationService.loadingPlugin
   * Every time a plugin is loaded, plugin name are removed from Array
   * It used in v-plugins directive
   */
  plugins: [],

  /**
   * Store application current user
   */
  user: null,

  /**
   * @FIXME add description
   */
  map: {
    epsg: '',
    unit: 'metric'
  },

  /**
   * @FIXME add description
   */
  gui: {

    app: {
      /**
       * true = application is disabled and unclickable (waiting)
       */
      disabled: false
    },

    sidebar: {
      /**
       * true = sidebar is disabled (not responsive)
       */
      disabled: false // 
    },

    layout: {
      /**
       * store the current layout owner ("app" = default)
       */
      __current: 'app',

      /**
       * @FIXME add description
       */
      app: {}

    }

  },

  /**
   * Sore vendor keys need by application third part script
   */
  keys: {
    vendorkeys: {
      google: undefined,
      bing: undefined
    }
  },

  /**
   * Store tokens, used by server for example to filter features
   */
  tokens: {
    filtertoken: undefined
  }

});

/**
 * Store methods to query STATE of application
 * 
 * @type {object}
 */
var STATE_METHODS = exports.STATE_METHODS = {};

exports.default = STATE;

},{}],329:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file State of legend items in Table of Contents (TOC) [aka. catalog layers]
 * @since v3.6
 */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var LayersStoresRegistry = require('core/layers/layersstoresregistry');

function CatalogLayersStoresRegistry() {
  base(this);
}

inherit(CatalogLayersStoresRegistry, LayersStoresRegistry);

exports.default = new CatalogLayersStoresRegistry();

},{"core/layers/layersstoresregistry":21,"utils":419}],330:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @file Store legacy frontend components
 * @since v3.6
 * 
 * @deprecated will be probably removed after v4.x. Use Vue Single File Components (SFC) instead
 */

var G3WObject = require('core/g3wobject');

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

//class Componet Registry (singleton)
// store all components added


function ComponentsRegistry() {
  this.components = {};
  this.registerComponent = function (component) {
    var id = component.getId();
    if (!this.components[id]) {
      this.components[id] = component;
      this.emit('componentregistered', component);
    }
  };

  this.getComponent = function (id) {
    return this.components[id];
  };

  this.getComponents = function () {
    return this.components;
  };

  this.unregisterComponent = function (id) {
    var component = this.components[id];
    if (component) {
      if (typeof component.destroy === 'function') component.destroy();
      this.components[id] = null;
    }
    return component;
  };
  base(this);
}

inherit(ComponentsRegistry, G3WObject);

exports.default = new ComponentsRegistry();

},{"core/g3wobject":8,"utils":419}],331:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProjectsRegistry = exports.PluginsRegistry = exports.LayersStoresRegistry = exports.ControlsRegistry = exports.ComponentsRegistry = exports.CatalogLayersStoresRegistry = undefined;

var _catalogLayers = require('./catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _components = require('./components');

var _components2 = _interopRequireDefault(_components);

var _mapControls = require('./map-controls');

var _mapControls2 = _interopRequireDefault(_mapControls);

var _mapLayers = require('./map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

var _plugins = require('./plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _projects = require('./projects');

var _projects2 = _interopRequireDefault(_projects);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @FIXME importing directly from this file breaks application
 * (maybe related to: https://github.com/Raruto/g3w-client/commit/c83d99934d00ea5c6047c215c6eba54fd2d5aefa)
 */
/**
 * @file
 * @since v3.6
 */

exports.CatalogLayersStoresRegistry = _catalogLayers2.default;
exports.ComponentsRegistry = _components2.default;
exports.ControlsRegistry = _mapControls2.default;
exports.LayersStoresRegistry = _mapLayers2.default;
exports.PluginsRegistry = _plugins2.default;
exports.ProjectsRegistry = _projects2.default;

},{"./catalog-layers":329,"./components":330,"./map-controls":332,"./map-layers":333,"./plugins":334,"./projects":335}],332:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _eventbus = require('app/eventbus');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit; /**
                                 * @file Store Open Layers controls (zoom, streetrview, screnshoot, ruler, ...)
                                 * @since v3.6
                                 */

var G3WObject = require('core/g3wobject');

function ControlsRegistry() {
  var _this = this;

  this._controls = {};

  this._offlineids = [];

  /**
   * @since 3.8.0
   */
  this.selectedLayer = null;

  /**
   * @since 3.8.0
   */
  this.externalLayers = [];

  _application2.default.on('complete',
  /**
   * @TODO extract this into a class function (named callback function)
   * 
   * Handle temporary layers added by `addlayers` map control (Polygon or Multipolygon)
   *
   * @listens CatalogService~addExternalLayer
   * @listens CatalogService~removeExternalLayer
   *
   * @since 3.8.0
   */
  function () {

    var CatalogService = _gui2.default.getService('catalog');

    // 0. store unwatches of external layers (selected or visible)
    var unWatches = {};

    // 1. update list `this.externalLayers`
    // 2. update list `unWatches` of layer un-watchers (based on unique name of layer)
    // 3. call `this.onAddExternalLayer`
    CatalogService.onafter('addExternalLayer', function (_ref) {
      var layer = _ref.layer,
          type = _ref.type;

      if ('vector' === type) {
        _this.externalLayers.push(layer);
        // Add event listener of selected property to set selected layer
        unWatches[layer.name] = [_eventbus.VM.$watch(function () {
          return layer.selected;
        }, // watch `layer.selected` property
        function (selected) {
          _this.setSelectedLayer(true === selected ? layer : null);
        })];

        _this.callControlsEventHandler({
          handler: 'onAddExternalLayer',
          param: {
            layer: layer,
            unWatches: unWatches[layer.name]
          }
        });
      }
    });

    // 4. clean up any previously attached event listener
    CatalogService.onafter('removeExternalLayer', function (_ref2) {
      var name = _ref2.name,
          type = _ref2.type;

      if ('vector' === type) {
        _this.externalLayers = _this.externalLayers.filter(function (layer) {
          if (name === layer.name) {
            _this.callControlsEventHandler({ handler: 'handleRemoveExternalLayer', param: layer });
          }
          if (name === layer.name && layer === _this.selectedLayer) {
            _this.setSelectedLayer(null);
          }
          return name !== layer.name;
        });
        unWatches[name].forEach(function (unWatch) {
          return unWatch();
        });
        delete unWatches[name];
      }
    });
  });

  _application2.default.onbefore('offline',
  /**
   * @TODO extract this into a class function (named callback function)
   * 
   * @since 3.8.0
   */
  function () {
    _this._offlineids.forEach(function (controlItem) {
      var control = _this._controls[controlItem.id];
      controlItem.enable = control.getEnable();
      control.setEnable(false);
    });
  });

  _application2.default.onbefore('online',
  /**
   * @TODO extract this into a class function (named callback function)
   * 
   * @since 3.8.0
   */
  function () {
    _this._offlineids.forEach(function (controlItem) {
      _this._controls[controlItem.id].setEnable(controlItem.enable);
    });
  });

  this.setters = {
    registerControl: function registerControl(id, control) {
      this._registerControl(id, control);
    }
  };

  /**
   * @param { unknown | null } layer
   * 
   * @since 3.8.0
   */
  this.setSelectedLayer = function (layer) {
    this.selectedLayer = layer;
  };

  /**
   * @since 3.8.0
   */
  this.getSelectedLayer = function () {
    return this.selectedLayer;
  };

  /**
   * @returns {Array}
   * 
   * @since 3.8.0
   */
  this.getExternalLayers = function () {
    return this.externalLayers;
  };

  /**
   * @since 3.8.0
   */
  this.catalogSelectedLayer = function (layer) {
    this.setSelectedLayer(layer.isSelected() ? layer : null);

    this.callControlsEventHandler({
      handler: 'onSelectLayer',
      param: this.selectedLayer
    });
  };

  /**
   * NB `handler` = method name
   * 
   * @param {{ handler: string, param: any }}
   * 
   * @since 3.8.0
   */
  this.callControlsEventHandler = function (_ref3) {
    var handler = _ref3.handler,
        param = _ref3.param;

    Object.values(this._controls).forEach(function (control) {
      if ('function' === typeof control[handler]) {
        control[handler](param);
      }
    });
  };

  this._registerControl = function (id, control) {
    this._controls[id] = control;
    if (control.offline === false) {
      this._offlineids.push({
        id: id,
        enable: control.getEnable()
      });
      control.getEnable() && control.setEnable(_application2.default.isOnline());
    }
  };

  this.getControl = function (id) {
    return this._controls[id];
  };

  this.getControls = function () {
    return this._controls;
  };

  this.unregisterControl = function (id) {
    var control = this.getControl(id);
    if (!control) {
      return false;
    }
    _gui2.default.getService('map').getMap().removeControl(control);
    delete this._controls[id];
    this._offlineids = this._offlineids.filter(function (_id) {
      return _id !== id;
    });
    return true;
  };

  base(this);
}

inherit(ControlsRegistry, G3WObject);

exports.default = new ControlsRegistry();

},{"app/eventbus":43,"core/g3wobject":8,"services/application":310,"services/gui":319,"utils":419}],333:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @file Store Open Layers levels (raster images, vector shapes, markers, ...)
 * @since v3.6
 */

var _require = require('utils'),
    inherit = _require.inherit,
    base = _require.base;

var LayersStoresRegistry = require('core/layers/layersstoresregistry');

function MapLayersStoresRegistry() {
  base(this);
}

inherit(MapLayersStoresRegistry, LayersStoresRegistry);

exports.default = new MapLayersStoresRegistry();

},{"core/layers/layersstoresregistry":21,"utils":419}],334:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _projects = require('store/projects');

var _projects2 = _interopRequireDefault(_projects);

var _application = require('services/application');

var _application2 = _interopRequireDefault(_application);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @file Store G3W-CLIENT plugins (editing, qplotly, qtimeseries, ...)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * @since v3.6
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');

/**
 * 'law' project configuration on project is handle as plugin
 *
 * @type {string[]}
 */
var OTHERPLUGINS = ['law'];

function PluginsRegistry() {
  var _this = this;

  this.config = null;

  /**
   * Object where store plugin
   *   key   = plugin name
   *   value = plugin instance
   */
  this._plugins = {};

  /**
   * Name array of initConfig.group.plugins names
   */
  this._configurationPlugins = [];

  /**
   * Store initConfig.group.plugins object configuration
   */
  this.pluginsConfigs = {};

  /**
   * Store array of plugin loaded url
   */
  this._loadedPluginUrls = [];

  this.setters = {

    /**
     * Setter method to register plugin (called by every plugin when all is ready)
     */
    registerPlugin: function registerPlugin(plugin) {
      // store plugin into registry (if not already registered )
      if (!this._plugins[plugin.name]) {
        this._plugins[plugin.name] = plugin;
      }
    }
  };

  /**
   * CHECK IF STILL USEFUL. IT RELATED TO CHANGE MAP OLD BEHAVIOR (PREVIOUS VERSION 3.4).
   * NOW WHEN CHANGE MAP IS TRIGGER, PAGE IS RELOADED.
   */
  _projects2.default.onafter('setCurrentProject', function (project) {
    _this.gidProject = project.getGid();
  });

  base(this);

  // initialize plugin
  //call by applications.js services folder
  /**
   * 
   * @param { Object } options
   * @param options.pluginsBaseUrl     plugin loading urls
   * @param options.pluginsConfigs     plugin configurations
   * @param options.otherPluginsConfig plugins that aren't in configuration server but in project
   */
  this.init = _asyncToGenerator(function* () {
    var _this2 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.pluginsBaseUrl = options.pluginsBaseUrl;
    this.setPluginsConfig(options.pluginsConfigs);
    Object.keys(this.pluginsConfigs).forEach(function (name) {
      return _this2._configurationPlugins.push(name);
    }); // filter
    this.addLoadingPlugins();
    this.otherPluginsConfig = options.otherPluginsConfig;
    this.setOtherPlugins(); // set other plugin on in initConfig.group.plugins (law for example)
    this.setDependencyPluginConfig();
    var plugins = yield this._loadPlugins(); // load plugins
    return Promise.resolve(plugins);
  });

  /**
   * Set loading plugins adding them to `ApplicationService`,
   * based on server configuration: `initConfig.group.plugins`
   * 
   */
  this.addLoadingPlugins = function () {
    Object.keys(this.pluginsConfigs).forEach(function (plugin) {
      return _application2.default.loadingPlugin(plugin);
    });
  };

  /**
   * @param plugin
   * @param ready //TODO used ???
   */
  this.removeLoadingPlugin = function (plugin, ready) {
    _application2.default.loadedPlugin(plugin, ready);
  };

  /**
   * @returns {Promise<{-readonly [P in keyof Promise<unknown>[]]: PromiseSettledResult<Awaited<Promise<unknown>[][P]>>}>}
   *
   * @private
   */
  this._loadPlugins = function () {
    var _this3 = this;

    return Promise.allSettled(Object.entries(this.pluginsConfigs).map(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          name = _ref3[0],
          pluginConfig = _ref3[1];

      return _this3._setup(name, pluginConfig);
    }));
  };

  /**
   *@TODO need to check if used
   */
  this.setDependencyPluginConfig = function () {
    var _this4 = this;

    var _loop = function _loop(pluginName) {
      var dependecyPluginConfig = _this4.pluginsConfigs[pluginName].plugins;
      if (dependecyPluginConfig) {
        Object.keys(dependecyPluginConfig).forEach(function (pluginName) {
          _this4.pluginsConfigs[pluginName] = _extends({}, _this4.pluginsConfigs[pluginName], dependecyPluginConfig[pluginName]);
        });
      }
    };

    for (var pluginName in this.pluginsConfigs) {
      _loop(pluginName);
    }
  };

  /**
   * Method to set other plugin
   */
  this.setOtherPlugins = function () {
    var law = OTHERPLUGINS[0];
    if (this.otherPluginsConfig && this.otherPluginsConfig[law] && this.otherPluginsConfig[law].length) {
      // law plugin
      this.pluginsConfigs[law] = this.otherPluginsConfig[law];
      this.pluginsConfigs[law].gid = this.otherPluginsConfig.gid;
    } else {
      delete this.pluginsConfigs[law];
    }
  };

  /**
   * Reaload plugin in case of change map
   *
   * @deprecated since 3.7
   *
   * @param initConfig
   * @param project
   *
   * @returns { Promise<unknown> }
   */
  this.reloadPlugins = function (initConfig, project) {
    var _this5 = this;

    return new Promise(function () {
      var _ref4 = _asyncToGenerator(function* (resolve, reject) {
        var scripts = $('script');
        var plugins = _this5.getPlugins();

        var _loop2 = function _loop2(pluginName) {
          var plugin = plugins[pluginName];
          // unload plugin e remove from DOM
          plugin.unload();
          delete _this5._plugins[pluginName];
          scripts.each(function (index, scr) {
            _this5._loadedPluginUrls.forEach(function (pluginUrl, idx) {
              if (scr.getAttribute('src') === pluginUrl && pluginUrl.indexOf(pluginName) !== -1) {
                scr.parentNode.removeChild(scr);
                _this5._loadedPluginUrls.splice(idx, 1);
                return false;
              }
            });
          });
        };

        for (var pluginName in plugins) {
          _loop2(pluginName);
        }
        _this5._loadedPluginUrls = [];
        //setup plugins
        _this5.otherPluginsConfig = project.getState();
        _this5.setPluginsConfig(initConfig.group.plugins);
        _this5.addLoadingPlugins();
        _this5.setOtherPlugins();
        try {
          var _plugins = yield _this5._loadPlugins();
          resolve(_plugins);
        } catch (error) {
          reject(error);
        }
      });

      return function (_x2, _x3) {
        return _ref4.apply(this, arguments);
      };
    }());
  };

  /**
   * Set plugin config only filtered by gid configuration
   *
   * @param config
   */
  this.setPluginsConfig = function () {
    var _this6 = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var enabledPluginConfig = {};
    Object.entries(config).filter(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          pluginConfig = _ref6[1];

      return pluginConfig.gid === _this6.gidProject;
    }).forEach(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          pluginName = _ref8[0],
          pluginConfig = _ref8[1];

      return enabledPluginConfig[pluginName] = pluginConfig;
    });
    this.pluginsConfigs = enabledPluginConfig;
  };

  /**
   * Method to load external script
   *
   * @param url
   * @param { boolean } legacy since 3.10.0 - whether fallback to jquery promises
   *
   * @returns {*}
   *
   * @private
   */
  this._loadScript = function (url) {
    var legacy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (legacy) {
      return $.getScript(url);
    }
    return new Promise(function (resolve, reject) {
      var s = document.createElement('script');
      s.onload = function () {
        return resolve();
      };
      s.onerror = function () {
        return reject(new Error('Failed to load script: ' + url));
      };
      s.src = url;
      document.head.appendChild(s);
    });
  };

  /**
   * Load/Setup plugin script
   *
   * @param name
   * @param pluginConfig
   *
   * @returns { Promise<void> }
   *
   * @private
   */
  this._setup = function () {
    var _ref9 = _asyncToGenerator(function* (name, pluginConfig) {
      var _this7 = this;

      if (!pluginConfig) {
        return Promise.resolve();
      }
      // create script url
      var scriptUrl = '' + this.pluginsBaseUrl + name + '/js/plugin.js?' + Date.now();
      pluginConfig.baseUrl = this.pluginsBaseUrl;
      try {
        // wait plugin dependencies before load plugin and then add url to loaded plugin urls
        yield Promise.all((pluginConfig.jsscripts || []).map(function (script) {
          return _this7._loadScript(script, false);
        }));
        yield this._loadScript(scriptUrl, false);
        this._loadedPluginUrls.push(scriptUrl);
        return Promise.resolve();
      } catch (err) {
        console.warn('[G3W-PLUGIN]', err);
        //remove plugin in case of error of dependencies
        this.removeLoadingPlugin(name, false);
        return Promise.reject();
      }
    });

    return function (_x6, _x7) {
      return _ref9.apply(this, arguments);
    };
  }();

  /**
   * @param pluginName
   *
   * @returns <Object> Plugin configuration server object
   */
  this.getPluginConfig = function (pluginName) {
    return this.pluginsConfigs[pluginName];
  };

  /**
   * @returns <Object> key pluginName, value plugin instance
   */
  this.getPlugins = function () {
    return this._plugins;
  };

  /**
   * @param pluginName
   *
   * @returns Plugin instance
   */
  this.getPlugin = function (pluginName) {
    return this._plugins[pluginName];
  };

  /**
   * Check if a plugin is in configuration and will be added to application
   *
   * @param pluginName
   *
   * @returns { boolean }
   */
  this.isPluginInConfiguration = function (pluginName) {
    return this._configurationPlugins.indexOf(pluginName) !== -1;
  };

  /**
   * @param pluginName
   *
   * @returns plugin Configuration
   */
  this.isTherePlugin = function (pluginName) {
    return this.pluginsConfigs[pluginName];
  };
}

inherit(PluginsRegistry, G3WObject);

exports.default = new PluginsRegistry();

},{"core/g3wobject":8,"services/application":310,"store/projects":335,"utils":419}],335:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _catalogLayers = require('store/catalog-layers');

var _catalogLayers2 = _interopRequireDefault(_catalogLayers);

var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file Store QGIS project configurations (enabled map controls / plugins / layers / ...)
 * @since v3.6
 */

var _require = require('utils'),
    base = _require.base,
    inherit = _require.inherit;

var G3WObject = require('core/g3wobject');
var Project = require('core/project/project');

/* service
    setup: init method
    getLayersState: returnLayersState
    getLayersTree: return  array of layersTree from LayersState
*/

// Public interface
function ProjectsRegistry() {

  this.config = null;
  this.initialized = false;
  this.projectType = null;
  this.currentProjectGroup = null;
  this.overviewproject = undefined;

  this.setters = {
    createProject: function createProject(projectConfig) {
      //hook to get project config and modify it
    },
    setCurrentProject: function setCurrentProject(project) {

      if (this.state.currentProject !== project) {
        _catalogLayers2.default.removeLayersStores();
        _mapLayers2.default.removeLayersStores();
      }

      this.state.currentProject = project;
      this.state.qgis_version = project.getQgisVersion();

      this.setProjectType(project.state.type);

      var projectLayersStore = project.getLayersStore();

      //set in first position (catalog)
      _catalogLayers2.default.addLayersStore(projectLayersStore, 0);

      //set in first position (map)
      _mapLayers2.default.addLayersStore(projectLayersStore, 0);
    }
  };

  this.state = {
    baseLayers: {},
    minScale: null,
    maxscale: null,
    currentProject: null,
    qgis_version: null
  };

  // (lazy loading)
  this._groupProjects = [];
  this._projectConfigs = {};

  //Inizialize configuration for all project belong to group
  this.init = function () {
    var _this = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var d = $.Deferred();

    // check if already initialized
    if (this.initialized) {
      d.resolve(this.getCurrentProject());
      return d.promise();
    }

    this.config = config;
    this.currentProjectGroup = config.group;
    this.overviewproject = config.overviewproject;

    this.setupState();

    // get current configuration
    this.getProject(config.initproject, { map_theme: new URLSearchParams(location.search).get('map_theme') }).then(function (project) {
      _this.setCurrentProject(project);
      _this.initialized = true;
      d.resolve(project);
    }).fail(function (error) {
      return d.reject(error);
    });

    return d.promise();
  };

  this.clear = function () {
    this.config = null;
    this.initialized = false;
    this.projectType = null;
    this.overviewproject = undefined;
    this.initialized = false;
    this._groupProjects = [];
    this._projectConfigs = {};
    this.state = {
      baseLayers: {},
      minScale: null,
      maxscale: null,
      currentProject: null,
      qgis_version: null
    };
  };

  this.setProjectType = function (projectType) {
    this.projectType = projectType;
  };

  this.getConfig = function () {
    return this.config;
  };

  this.getState = function () {
    return this.state;
  };

  this.setupState = function () {
    this.state.baseLayers = this.config.baselayers;
    this.state.minScale = this.config.minscale;
    this.state.maxScale = this.config.maxscale;
    this.state.crs = this.config.crs;
    this.setProjects(this.config.projects);
  };

  this.getProjectType = function () {
    return this.projectType;
  };

  this.getProjects = function () {
    return this._groupProjects;
  };

  this.setProjects = function (projects) {
    var _this2 = this;

    this.clearProjects();
    projects.forEach(function (project) {
      _this2.state.qgis_version = project.qgis_version || _this2.state.qgis_version;
      project.baselayers = _this2.config.baselayers;
      project.minscale = _this2.config.minscale;
      project.maxscale = _this2.config.maxscale;
      project.crs = _this2.config.crs;
      project.vectorurl = _this2.config.vectorurl;
      project.rasterurl = _this2.config.rasterurl;
      project.overviewprojectgid = _this2.overviewproject ? _this2.overviewproject.gid : null;
      _this2._groupProjects.push(project);
    });
  };

  this.clearProjects = function () {
    this._groupProjects = [];
  };

  this.getListableProjects = function () {
    var currentProjectId = this.getCurrentProject().getId();
    return _.sortBy(this.getProjects().filter(function (project) {
      if (!_.isNil(project.listable)) return project.listable;
      if (project.id === currentProjectId || project.overviewprojectgid && project.gid === project.overviewprojectgid) return false;
      return project;
    }), 'title');
  };

  this.getCurrentProject = function () {
    return this.state.currentProject;
  };

  /**
   * Get project configuration
   *  
   * @param {unknown} projectGid 
   * @param {unknown} options.map_theme
   * @param {boolean} [options.reload = false] `true` = force to get project configuration from server
   */
  this.getProject = function (projectGid) {
    var _this3 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { reload: false };

    var d = $.Deferred();
    var pendingProject = this._groupProjects.find(function (project) {
      return project.gid === projectGid;
    });

    // skipe if project doesn't exist
    if (!pendingProject) {
      d.reject("Project doesn't exist");
      return d.promise();
    }

    var projectConfig = !options.reload && this._projectConfigs[projectGid];

    /** @TODO add description */
    if (projectConfig) {
      d.resolve(new Project(projectConfig));
      return d.promise();
    }

    this._getProjectFullConfig(pendingProject, { map_theme: options.map_theme }).then(function (projectFullConfig) {

      var projectConfig = _.merge(pendingProject, projectFullConfig);
      projectConfig.WMSUrl = _this3.config.getWmsUrl(projectConfig);
      projectConfig.relations = _this3._setProjectRelations(projectConfig);

      _this3._projectConfigs[projectConfig.gid] = projectConfig;

      // instance of Project
      _this3.createProject(projectConfig);

      // add to project
      d.resolve(new Project(projectConfig));
    }).fail(function (error) {
      return d.reject(error);
    });
    return d.promise();
  };

  this._setProjectRelations = function (projectConfig) {
    var _this4 = this;

    projectConfig.relations = (projectConfig.relations ? projectConfig.relations : []).map(function (relation) {
      relation = _this4._updateRelation(projectConfig, relation);
      return relation;
    });
    return projectConfig.relations;
  };

  /**
   * @FIXME add description
   * 
   * @since 3.8.0
   */
  this._updateRelation = function (projectConfig, relation) {
    if ("ONE" === relation.type) {
      projectConfig.layers.find(function (layer) {
        if (layer.id === relation.referencingLayer) {
          relation.name = layer.name;
          relation.origname = layer.origname;
          return true;
        }
      });
    }
    return relation;
  };

  this.getProjectConfigByGid = function (gid) {
    return this._groupProjects.find(function (project) {
      return project.gid === gid;
    });
  };

  /**
   * @param alias.gid
   * @param alias.url
   * @param alias.host
   */
  this.setProjectAliasUrl = function (alias) {
    var project = this.config.projects.find(function (project) {
      return project.gid === alias.gid;
    });
    if (project) {
      project.url = project && '' + (alias.host || '') + alias.url;
    }
  };

  /**
   * @param gid
   * 
   * @returns {string}
   */
  this.getProjectUrl = function (gid) {
    var baseurl = this.config && this.config.urls && this.config.urls.baseurl;
    var projectConfig = this.getProjectConfigByGid(gid);
    var url = projectConfig.url;
    try {
      return '' + new URL(baseurl) + url;
    } catch (err) {
      return '' + location.origin + baseurl + url;
    }
  };

  /**
   * @since 3.8.0
   */
  this.getBaseUrl = function () {
    return this.config.urls.baseurl;
  };

  /**
   * Fetch project configuration from remote server 
   * 
   * @param config project base config 
   * @param options.map_theme
   */
  this._getProjectFullConfig = function (config) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var d = $.Deferred();

    $.get(this.config.getProjectConfigUrl(config)).done(function (serverConfig) {

      /** @TODO add description */
      if (!options.map_theme) {
        d.resolve(serverConfig);
        return;
      }

      var map_theme = serverConfig.map_themes.find(function (_ref) {
        var theme = _ref.theme;
        return theme === options.map_theme;
      });

      /** @TODO add description */
      if (map_theme) {
        $.get('/' + config.type + '/api/prjtheme/' + config.id + '/' + options.map_theme).done(function (_ref2) {
          var result = _ref2.result,
              data = _ref2.data;

          if (result) {
            serverConfig.layerstree = data;
            map_theme.layetstree = data;
            map_theme.default = true;
          }
        }).always(function () {
          d.resolve(serverConfig);
        });
      }
    }).fail(function (error) {
      return d.reject(error);
    });

    return d.promise();
  };

  /**
   * @since 3.8.0
   */
  this.getCurrentProjectGroup = function () {
    return this.currentProjectGroup;
  };

  base(this);
}

inherit(ProjectsRegistry, G3WObject);

exports.default = new ProjectsRegistry();

},{"core/g3wobject":8,"core/project/project":41,"store/catalog-layers":329,"store/map-layers":333,"utils":419}],336:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var Base64 = exports.Base64 = {

  _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

  encode: function encode(e) {
    var t = "";var n = void 0,
        r = void 0,
        i = void 0,
        s = void 0,
        o = void 0,
        u = void 0,
        a = void 0;var f = 0;e = Base64._utf8_encode(e);while (f < e.length) {
      n = e.charCodeAt(f++);r = e.charCodeAt(f++);i = e.charCodeAt(f++);s = n >> 2;o = (n & 3) << 4 | r >> 4;u = (r & 15) << 2 | i >> 6;a = i & 63;if (isNaN(r)) {
        u = a = 64;
      } else if (isNaN(i)) {
        a = 64;
      }t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);
    }return t;
  },

  decode: function decode(e) {
    var t = "";var n = void 0,
        r = void 0,
        i = void 0;var s = void 0,
        o = void 0,
        u = void 0,
        a = void 0;var f = 0;e = e.replace(/[^A-Za-z0-9+/=]/g, "");while (f < e.length) {
      s = this._keyStr.indexOf(e.charAt(f++));o = this._keyStr.indexOf(e.charAt(f++));u = this._keyStr.indexOf(e.charAt(f++));a = this._keyStr.indexOf(e.charAt(f++));n = s << 2 | o >> 4;r = (o & 15) << 4 | u >> 2;i = (u & 3) << 6 | a;t = t + String.fromCharCode(n);if (u != 64) {
        t = t + String.fromCharCode(r);
      }if (a != 64) {
        t = t + String.fromCharCode(i);
      }
    }t = Base64._utf8_decode(t);return t;
  },

  _utf8_encode: function _utf8_encode(e) {
    e = e.replace(/rn/g, "n");var t = "";for (var n = 0; n < e.length; n++) {
      var r = e.charCodeAt(n);if (r < 128) {
        t += String.fromCharCode(r);
      } else if (r > 127 && r < 2048) {
        t += String.fromCharCode(r >> 6 | 192);t += String.fromCharCode(r & 63 | 128);
      } else {
        t += String.fromCharCode(r >> 12 | 224);t += String.fromCharCode(r >> 6 & 63 | 128);t += String.fromCharCode(r & 63 | 128);
      }
    }return t;
  },

  _utf8_decode: function _utf8_decode(e) {
    var t = "";var n = 0;var r = c1 = c2 = 0;while (n < e.length) {
      r = e.charCodeAt(n);if (r < 128) {
        t += String.fromCharCode(r);n++;
      } else if (r > 191 && r < 224) {
        c2 = e.charCodeAt(n + 1);t += String.fromCharCode((r & 31) << 6 | c2 & 63);n += 2;
      } else {
        c2 = e.charCodeAt(n + 1);c3 = e.charCodeAt(n + 2);t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);n += 3;
      }
    }return t;
  }

};

},{}],337:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XHR = undefined;

var _constant = require('app/constant');

var XHR = exports.XHR = {
  get: function get() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref.url,
        _ref$params = _ref.params,
        params = _ref$params === undefined ? {} : _ref$params;

    return new Promise(function (resolve, reject) {
      url ? $.get(url, params).then(function (response) {
        resolve(response);
      }).fail(function (error) {
        return reject(error);
      }) : reject('No url');
    });
  },
  post: function post() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref2.url,
        data = _ref2.data,
        _ref2$formdata = _ref2.formdata,
        formdata = _ref2$formdata === undefined ? false : _ref2$formdata,
        contentType = _ref2.contentType;

    var getResponseStatusHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    return new Promise(function (resolve, reject) {
      if (formdata) {
        var _formdata = new FormData();
        for (var param in data) {
          _formdata.append(param, data[param]);
        }
        $.ajax({
          type: 'POST',
          url: url,
          data: _formdata,
          processData: false,
          contentType: false
        }).then(function (response, status, request) {
          getResponseStatusHeaders ? resolve({
            data: response,
            status: status,
            request: request
          }) : resolve(response);
        }).fail(function (error) {
          reject(error);
        });
      } else if (contentType) {
        $.ajax({
          type: 'POST',
          url: url,
          data: data,
          processData: false,
          contentType: contentType || false
        }).then(function (response, status, request) {
          getResponseStatusHeaders ? resolve({
            data: response,
            status: status,
            request: request
          }) : resolve(response);
        }).fail(function (error) {
          reject(error);
        });
      } else {
        $.post(url, data).then(function (response, status, request) {
          getResponseStatusHeaders ? resolve({
            data: response,
            status: status,
            request: request
          }) : resolve(response);
        }).fail(function (error) {
          reject(error);
        });
      }
    });
  },
  htmlescape: function htmlescape(string) {
    string = string.replace("&", "&amp;");
    string = string.replace("<", "&lt;");
    string = string.replace(">", "&gt;");
    string = string.replace('"', "&quot;");
    return string;
  },
  fileDownload: function fileDownload() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        url = _ref3.url,
        data = _ref3.data,
        _ref3$httpMethod = _ref3.httpMethod,
        httpMethod = _ref3$httpMethod === undefined ? "POST" : _ref3$httpMethod;

    var timeoutId = void 0;
    return new Promise(function (resolve, reject) {
      var downloadPromise = $.fileDownload(url, {
        httpMethod: httpMethod,
        data: data
      });
      timeoutId = setTimeout(function () {
        reject('Timeout');
        downloadPromise.abort();
      }, _constant.TIMEOUT);
      downloadPromise.done(function () {
        return resolve();
      }).fail(function () {
        return reject();
      }).always(function () {
        clearTimeout(timeoutId);
      });
    });
  }
};

},{"app/constant":5}],338:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addZValueToOLFeatureGeometry = addZValueToOLFeatureGeometry;

var _constant = require('app/constant');

var _is3DGeometry = require('utils/is3DGeometry');

/**
 * core/geometry/geometry::addZValueToOLFeatureGeometry@v3.4
 */
function addZValueToOLFeatureGeometry() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      feature = _ref.feature,
      geometryType = _ref.geometryType;

  if (!(0, _is3DGeometry.is3DGeometry)(geometryType)) {
    console.warn('Invalid 3D Geometry Type:', geometryType);
    return feature;
  }

  var geometry = feature.getGeometry();
  var coords = geometry.getCoordinates();

  switch (geometryType || geometry.getType()) {

    // POINT: [x, y]
    case _constant.GEOMETRY_TYPES.POINTZ:
    case _constant.GEOMETRY_TYPES.POINTM:
    case _constant.GEOMETRY_TYPES.POINTZM:
    case _constant.GEOMETRY_TYPES.POINT25D:
      coords.push(0);
      feature.getGeometry().setCoordinates(coords);
      break;

    // MULTIPOINT: [ [x1, y1], [x2, y2] ]
    case _constant.GEOMETRY_TYPES.MULTIPOINTZ:
    case _constant.GEOMETRY_TYPES.MULTIPOINTM:
    case _constant.GEOMETRY_TYPES.MULTIPOINTZM:
    case _constant.GEOMETRY_TYPES.MULTIPOINT25D:
    // LINE: [ [x1, y1], [x2, y2] ]
    case _constant.GEOMETRY_TYPES.LINESTRINGZ:
    case _constant.GEOMETRY_TYPES.LINESTRINGM:
    case _constant.GEOMETRY_TYPES.LINESTRINGZM:
    case _constant.GEOMETRY_TYPES.LINESTRING25D:
    case _constant.GEOMETRY_TYPES.LINEZ:
    case _constant.GEOMETRY_TYPES.LINEM:
    case _constant.GEOMETRY_TYPES.LINEZM:
    case _constant.GEOMETRY_TYPES.LINE25D:
      coords.forEach(function (c) {
        return c.push(0);
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    // MULTILINE: [
    //   [ [x1, y1], [x2, y2] ],
    //   [ [x3, y3], [x4, y4] ]
    // ]
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGZ:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGM:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGZM:
    case _constant.GEOMETRY_TYPES.MULTILINESTRING25D:
    case _constant.GEOMETRY_TYPES.MULTILINEZ:
    case _constant.GEOMETRY_TYPES.MULTILINEM:
    case _constant.GEOMETRY_TYPES.MULTILINEZM:
    case _constant.GEOMETRY_TYPES.MULTILINE25D:
      coords.forEach(function (line) {
        return line.forEach(function (c) {
          return c.push(0);
        });
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    // POLYGON: [
    //   [ [x1, y1], [x2, y2], [x3, y3], [x1, y1] ]
    // ]
    case _constant.GEOMETRY_TYPES.POLYGONZ:
    case _constant.GEOMETRY_TYPES.POLYGONM:
    case _constant.GEOMETRY_TYPES.POLYGONZM:
    case _constant.GEOMETRY_TYPES.POLYGON25D:
      coords[0].forEach(function (c) {
        return c.push(0);
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    // MULTIPOLYGON:[
    //   [ [x1, y1], [x2, y2], [x3, y3], [x1, y1] ],
    //   [ [xa, ya], [xb, yb], [xc, yc], [xa, ya] ]
    // ]
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONZ:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONM:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGOZM:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGON25D:
      coords.forEach(function (poly) {
        return poly[0].forEach(function (c) {
          return c.push(0);
        });
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    default:
      console.warn('invalid geometry type:', geometryType || geometry.getType());

  }

  return feature;
};

},{"app/constant":5,"utils/is3DGeometry":422}],339:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendParams = appendParams;
/**
 * Appends query parameters to a URI
 */
function appendParams(uri, params) {
  var keyParams = [];
  // Skip any null or undefined parameter values
  Object.keys(params).forEach(function (k) {
    if (params[k] !== null && params[k] !== undefined) {
      keyParams.push(k + '=' + encodeURIComponent(params[k]));
    }
  });
  var qs = keyParams.join('&');
  // remove any trailing ? or &
  uri = uri.replace(/[?&]$/, '');
  // append ? or & depending on whether uri has existing parameters
  uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';
  return uri + qs;
};

},{}],340:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areCoordinatesEqual = areCoordinatesEqual;
/**
 * @param { Array } coordinates1
 * @param { Array } coordinates2
 * 
 * @returns { boolean }
 */
function areCoordinatesEqual() {
  var coordinates1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var coordinates2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  return coordinates1[0] === coordinates2[0] && coordinates1[1] === coordinates2[1];
}

},{}],341:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base = base;
/**
 * goole closure library implementation
 */
function base(me, opt_methodName, var_args) {
  // who call base
  // noinspection JSAnnotator
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    // This function constructor (that inherit from superClass_). Call the superclass constructor.
    //It is a easy way to cal super class in binding to this
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  //constructor is the constructor function of the object
  for (var ctor = me.constructor; ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else if (foundCaller) {
      return ctor.prototype[opt_methodName].apply(me, args);
    }
  }
  // If we did not find the caller in the prototype chain,
  // then one of two things happened:
  // 1) The caller is an instance method.
  // 2) This method was not called by the right caller.
  if (me[opt_methodName] === caller) {
    // call the function from prototype object
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error('base called from a method of one name ' + 'to a method of a different name');
  }
};

},{}],342:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basemixin = basemixin;

var _merge = require('./merge');

function basemixin(destination, source) {
  return (0, _merge.merge)(destination.prototype, source);
};

},{"./merge":431}],343:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.capitalize_first_letter = capitalize_first_letter;
function capitalize_first_letter(string) {
  return "" + string[0].toUpperCase() + string.slice(1);
};

},{}],344:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closestOnSegment = closestOnSegment;
/**
 * core/geometry/geom::closestOnSegment@v3.4
 */
function closestOnSegment(coordinate, segment) {
  var x0 = coordinate[0];
  var y0 = coordinate[1];
  var x1 = segment[0][0];
  var y1 = segment[0][1];
  var x2 = segment[1][0];
  var y2 = segment[1][1];
  var dx = x2 - x1;
  var dy = y2 - y1;
  var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);

  if (along <= 0) {
    return [x1, y1];
  }

  if (along >= 1) {
    return [x2, y2];
  }

  return [x1 + along * dx, y1 + along * dy];
}

},{}],345:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colorHEXToRGB = colorHEXToRGB;
/**
 * Convert Hex value color to RGB array
 * 
 * @param color
 * 
 * @returns {number[]}
 */
function colorHEXToRGB() {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#FFFFFF';

  var r = parseInt(color.substr(1, 2), 16);
  var g = parseInt(color.substr(3, 2), 16);
  var b = parseInt(color.substr(5, 2), 16);
  return [r, g, b];
};

},{}],346:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertDEGToDM = convertDEGToDM;
/**
 * Convert Degree to Degree Minutes
 * 
 * @param { Object } opts
 * @param { number } opts.deg
 * @param { 'Array' | 'Object' | 'Text' } opts.output
 * 
 * @returns { string }
 */
function convertDEGToDM() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      deg = _ref.deg,
      _ref$output = _ref.output,
      output = _ref$output === undefined ? 'Array' : _ref$output;

  var absolute = Math.abs(deg);
  var degrees = Math.floor(absolute);
  var minutes = (absolute - degrees) * 60;
  switch (output) {
    case 'Array':
      return [degrees, minutes];
    case 'Object':
      return { degrees: degrees, minutes: minutes };
    default:
      return degrees + "°" + minutes + "'";
  }
}

},{}],347:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertDEGToDMS = convertDEGToDMS;
/**
 * Convert Degree to Degree Minutes Seconds
 * 
 * @param { Object } opts
 * @param opts.deg
 * @param opts.lat
 * @param opts.lon
 * @param { 'Array' | 'Object' | 'Text' } opts.output
 * 
 * @returns { string }
 */
function convertDEGToDMS() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      deg = _ref.deg,
      lat = _ref.lat,
      lon = _ref.lon,
      _ref$output = _ref.output,
      output = _ref$output === undefined ? 'Array' : _ref$output;

  var absolute = Math.abs(deg);
  var degrees = Math.floor(absolute);
  var minutesNotTruncated = (absolute - degrees) * 60;
  var minutes = Math.floor(minutesNotTruncated);
  var seconds = ((minutesNotTruncated - minutes) * 60).toFixed(2);
  var direction = void 0;
  if (lat) direction = deg >= 0 ? "N" : "S";
  if (lon) direction = deg >= 0 ? "E" : "W";
  switch (output) {
    case 'Array':
      return [degrees, minutes, seconds, direction];
    case 'Object':
      return { degrees: degrees, minutes: minutes, seconds: seconds, direction: direction };
    default:
      return degrees + "°" + minutes + "'" + seconds + "\"" + direction;
  }
}

},{}],348:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertDMSToDEG = convertDMSToDEG;
/**
 * Convert Degree Minutes Seconds to Degree
 * 
 * @param { Object } opts
 * @param { Array | string } opts.dms [0] = degrees, [1] = minutes, [2] = seconds, [3] = direction
 * @param { string } opts.type
 * 
 * @returns { string } deg
 */
function convertDMSToDEG(_ref) {
  var dms = _ref.dms,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'Array' : _ref$type;

  var dms_Array = type === 'Array' ? dms : dms.split(/[^\d\w\.]+/);
  return (Number(1 * dms_Array[0]) + Number(1 * dms_Array[1]) / 60 + Number(1 * dms_Array[2]) / 3600).toFixed(6) * (['S', 'W'].includes(dms_Array[3]) ? -1 : 1);
}

},{}],349:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertDMToDEG = convertDMToDEG;
/**
 * Convert Degree Minutes to Degree
 * 
 * @param { Object } opts 
 * @param { Array | string } opts.dms [0] = degrees, [1] = minutes
 * @param { string } opts.type
 * 
 * @returns { string } deg
 */
function convertDMToDEG(_ref) {
  var dms = _ref.dms,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'Array' : _ref$type;

  var dms_Array = 'Array' === type ? dms : dms.split(/[^\d\w\.]+/);
  return 1 * (Number(1 * dms_Array[0]) + Number(1 * dms_Array[1]) / 60).toFixed(6);
}

},{}],350:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertFeatureToGEOJSON = convertFeatureToGEOJSON;
/**
 * Convert Feature to GeoJSON Format
 * 
 * @param feature
 */
function convertFeatureToGEOJSON(feature) {
  return new ol.format.GeoJSON().writeFeatureObject(feature);
}

},{}],351:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertObjectToUrlParams = convertObjectToUrlParams;
function convertObjectToUrlParams() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return $.param(params);
};

},{}],352:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertQGISDateTimeFormatToMoment = convertQGISDateTimeFormatToMoment;
/**
 * Covert datetime format from Qgis format to Moment
 * 
 * @param datetimeformat
 * 
 * @returns {*}
 */
function convertQGISDateTimeFormatToMoment(datetimeformat) {
  datetimeformat = datetimeformat.replace(/y/g, 'Y');
  var matchDayInDate = datetimeformat.match(/d/g);
  if (matchDayInDate && matchDayInDate.length < 3) datetimeformat = datetimeformat.replace(/d/g, 'D');
  return datetimeformat;
}

},{}],353:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertSingleMultiGeometry = convertSingleMultiGeometry;

var _isMultiGeometry = require('utils/isMultiGeometry');

var _multiGeometryToSingleGeometries = require('utils/multiGeometryToSingleGeometries');

var _singleGeometriesToMultiGeometry = require('utils/singleGeometriesToMultiGeometry');

/**
 * Convert geometry to geometryType (from Single to Multi or viceversa)
 * 
 * @param { ol.geom } geometry       current OL geometry
 * @param { string }  toGeometryType 
 */
function convertSingleMultiGeometry(geometry, toGeometryType) {
  var from_type = geometry.getType();

  if (!toGeometryType || from_type === toGeometryType) {
    return geometry;
  }

  var from_multi = (0, _isMultiGeometry.isMultiGeometry)(from_type);
  var to_multi = (0, _isMultiGeometry.isMultiGeometry)(toGeometryType);

  if (from_multi && !to_multi) {
    return (0, _multiGeometryToSingleGeometries.multiGeometryToSingleGeometries)(geometry);
  }

  if (!from_multi && to_multi) {
    return (0, _singleGeometriesToMultiGeometry.singleGeometriesToMultiGeometry)([geometry]);
  }

  return geometry;
}

},{"utils/isMultiGeometry":425,"utils/multiGeometryToSingleGeometries":434,"utils/singleGeometriesToMultiGeometry":450}],354:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertVectorFeaturesToResultFeatures = convertVectorFeaturesToResultFeatures;

var _constant = require('app/constant');

/**
 * @param { Array } features 
 * 
 * @returns { Array<{ geometry, attributes, id }> }
 */
function convertVectorFeaturesToResultFeatures() {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  return features.map(function (feature) {
    feature.properties[_constant.G3W_FID] = feature.id;
    return {
      geometry: feature.geometry,
      attributes: feature.properties,
      id: feature.id
    };
  });
}

},{"app/constant":5}],355:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coordinatesToGeometry = coordinatesToGeometry;

var _constant = require('app/constant');

function coordinatesToGeometry(geometryType, coordinates) {

  switch (geometryType) {

    case _constant.GEOMETRY_TYPES.POLYGON:
    case _constant.GEOMETRY_TYPES.POLYGONZ:
    case _constant.GEOMETRY_TYPES.POLYGONM:
    case _constant.GEOMETRY_TYPES.POLYGONZM:
    case _constant.GEOMETRY_TYPES.POLYGON25D:
      return new ol.geom.Polygon(coordinates);

    case _constant.GEOMETRY_TYPES.MULTIPOLYGON:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONZ:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONM:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONZM:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGON25D:
      return new ol.geom.MultiPolygon(coordinates);

    case _constant.GEOMETRY_TYPES.LINESTRING:
    case _constant.GEOMETRY_TYPES.LINESTRINGZ:
    case _constant.GEOMETRY_TYPES.LINESTRINGM:
    case _constant.GEOMETRY_TYPES.LINESTRINGZM:
    case _constant.GEOMETRY_TYPES.LINESTRING25D:
    case _constant.GEOMETRY_TYPES.LINE:
    case _constant.GEOMETRY_TYPES.LINEZ:
    case _constant.GEOMETRY_TYPES.LINEM:
    case _constant.GEOMETRY_TYPES.LINEZM:
    case _constant.GEOMETRY_TYPES.LINE25D:
      return new ol.geom.LineString(coordinates);

    case _constant.GEOMETRY_TYPES.MULTILINE:
    case _constant.GEOMETRY_TYPES.MULTILINEZ:
    case _constant.GEOMETRY_TYPES.MULTILINEM:
    case _constant.GEOMETRY_TYPES.MULTILINEZM:
    case _constant.GEOMETRY_TYPES.MULTILINE25D:
    case _constant.GEOMETRY_TYPES.MULTILINESTRING:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGZ:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGM:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGZM:
    case _constant.GEOMETRY_TYPES.MULTILINESTRING25D:
      return new ol.geom.MultiLineString(coordinates);

    case _constant.GEOMETRY_TYPES.POINT:
    case _constant.GEOMETRY_TYPES.POINTZ:
    case _constant.GEOMETRY_TYPES.POINTM:
    case _constant.GEOMETRY_TYPES.POINTZM:
    case _constant.GEOMETRY_TYPES.POINT25D:
      return new ol.geom.Point(coordinates);

    case _constant.GEOMETRY_TYPES.MULTIPOINT:
    case _constant.GEOMETRY_TYPES.MULTIPOINTZ:
    case _constant.GEOMETRY_TYPES.MULTIPOINTM:
    case _constant.GEOMETRY_TYPES.MULTIPOINTZM:
    case _constant.GEOMETRY_TYPES.MULTIPOINT25D:
      return new ol.geom.MultiPoint(coordinates);

    default:
      console.warn('invalid geometry type: ', geometryType);
      return new ol.geom.Point(coordinates);

  }
}

},{"app/constant":5}],356:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyUrl = copyUrl;
function copyUrl(url) {
  var tempinput = document.createElement('input');
  document.body.appendChild(tempinput);
  tempinput.value = url;
  tempinput.select();
  document.execCommand('copy');
  document.body.removeChild(tempinput);
};

},{}],357:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFeatureFromBBOX = createFeatureFromBBOX;
/**
 * @param { number[] } bbox 
 * @returns { ol.Feature | undefined } feature
 */
function createFeatureFromBBOX(bbox) {
  if (Array.isArray(bbox) && 4 === bbox.length) {
    return new ol.Feature(ol.geom.Polygon.fromExtent(bbox));
  }
}

},{}],358:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFeatureFromCoordinates = createFeatureFromCoordinates;
/**
 * @param { number[] } coordinates 
 * @returns { ol.Feature | undefined } feature 
 */
function createFeatureFromCoordinates(coordinates) {
  if (Array.isArray(coordinates) && 2 === coordinates.length) {
    return new ol.Feature(new ol.geom.Point(coordinates));
  }
}

},{}],359:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFeatureFromFeatureObject = createFeatureFromFeatureObject;

var _createFeatureFromGeometry = require('utils/createFeatureFromGeometry');

/**
  * @param { Object } opts
  * @param opts.id
  * @param opts.feature
  * 
  * @returns { ol.Feature | undefined }
  * 
  * @example in case of feature object
  * ```
  * {
  *   id: X,
  *   attributes: {key:value}
  *   geometry: geometry
  * }
  * ```
  */
function createFeatureFromFeatureObject(_ref) {
  var id = _ref.id,
      _ref$feature = _ref.feature,
      feature = _ref$feature === undefined ? {} : _ref$feature;

  //extract geometry and attributes from feature Object
  var _feature = feature,
      geometry = _feature.geometry,
      attributes = _feature.attributes;
  //create a new ol feature

  feature = (0, _createFeatureFromGeometry.createFeatureFromGeometry)({ id: id, geometry: geometry });
  Object.keys(attributes).forEach(function (attr) {
    return feature.set(attr, attributes[attr]);
  });
  return feature;
}

},{"utils/createFeatureFromGeometry":360}],360:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFeatureFromGeometry = createFeatureFromGeometry;
/**
 * @param { Object } opts
 * @param opts.id
 * @param opts.geometry
 * 
 * @returns { ol.Feature | undefined } feature 
 */
function createFeatureFromGeometry() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref.id,
      geometry = _ref.geometry;

  if (geometry) {
    var feature = new ol.Feature(geometry);
    feature.setId(id);
    return feature;
  }
}

},{}],361:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFilterFormField = createFilterFormField;

var _createSingleFieldParameter = require('./createSingleFieldParameter');

var Filter = require('core/layers/filter/filter');
var Expression = require('core/layers/filter/expression');

/**
 * Create filter from field based on search_endpoint
 */
function createFilterFormField(_ref) {
  var layer = _ref.layer,
      field = _ref.field,
      value = _ref.value,
      _ref$search_endpoint = _ref.search_endpoint,
      search_endpoint = _ref$search_endpoint === undefined ? 'ows' : _ref$search_endpoint,
      _ref$operator = _ref.operator,
      operator = _ref$operator === undefined ? 'eq' : _ref$operator;

  var filter = void 0;
  switch (search_endpoint) {
    case 'ows':
      var expression = new Expression();
      expression.createExpressionFromField({ field: field, value: value, operator: operator, layerName: layer.getWMSLayerName() });
      filter = new Filter();
      filter.setExpression(expression.get());
      break;
    case 'api':
      filter = (0, _createSingleFieldParameter.createSingleFieldParameter)({ field: field, value: value, operator: operator });
      break;
  }
  return filter;
};

},{"./createSingleFieldParameter":370,"core/layers/filter/expression":14,"core/layers/filter/filter":15}],362:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFilterFormInputs = createFilterFormInputs;

var _createSingleFieldParameter = require('./createSingleFieldParameter');

var Filter = require('core/layers/filter/filter');
var Expression = require('core/layers/filter/expression');

/**
 * @param layer single layer or an array of layers
 * @param search_endpoint
 * @param inputs
 * 
 * @returns {*}
 */
function createFilterFormInputs(_ref) {
  var layer = _ref.layer,
      _ref$search_endpoint = _ref.search_endpoint,
      search_endpoint = _ref$search_endpoint === undefined ? 'ows' : _ref$search_endpoint,
      _ref$inputs = _ref.inputs,
      inputs = _ref$inputs === undefined ? [] : _ref$inputs;


  //check if is a single layer of array of layers
  var isLayerArray = Array.isArray(layer);

  var filter = void 0;
  var filters = []; // in case of layer is an array

  switch (search_endpoint) {

    case 'ows':
      if (isLayerArray) {
        layer.forEach(function (layer) {
          var expression = new Expression();
          expression.createExpressionFromFilter(inputs, layer.getWMSLayerName());
          filter = new Filter();
          filter.setExpression(expression.get());
          filters.push(filter);
        });
      } else {
        var expression = new Expression();
        expression.createExpressionFromFilter(inputs, layer.getWMSLayerName());
        filter = new Filter();
        filter.setExpression(expression.get());
      }
      break;

    case 'api':
      //get inputs length
      var inputsLength = inputs.length;
      var fields = inputs.map(function (input, inputIndex) {
        //take in account multi key relation fields
        if (Array.isArray(input.attribute)) {
          var attributesLength = input.attribute.length;
          return input.attribute.reduce(function (accumulator, attribute, index) {
            return accumulator + (0, _createSingleFieldParameter.createSingleFieldParameter)({
              field: attribute,
              value: input.value[index],
              operator: input.operator,
              logicop: null
            }) + (index < attributesLength - 1 ? '|AND,' : inputIndex < inputsLength - 1 ? '|' + input.logicop + ',' : '');
          }, '');
        } else {
          //need to add logic operator of input
          return '' + (inputIndex > 0 ? '|' + inputs[inputIndex - 1].logicop + ',' : '') + (0, _createSingleFieldParameter.createSingleFieldParameter)({
            field: input.attribute,
            value: input.value,
            operator: input.operator,
            logicop: input.logicop
          });
        }
      });
      //need to join with empty value because comma separation at the end is already add at the end
      filter = fields.length > 0 ? fields.join('') : undefined;
      if (isLayerArray) {
        layer.forEach(function () {
          return filters.push(filter);
        });
      }
      break;

  }

  return isLayerArray ? filters : filter;
};

},{"./createSingleFieldParameter":370,"core/layers/filter/expression":14,"core/layers/filter/filter":15}],363:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.createFilterFromString = createFilterFromString;

var _constant = require('app/constant');

var Filter = require('core/layers/filter/filter');
var Expression = require('core/layers/filter/expression');

function createFilterFromString(_ref) {
  var layer = _ref.layer,
      _ref$search_endpoint = _ref.search_endpoint,
      search_endpoint = _ref$search_endpoint === undefined ? 'ows' : _ref$search_endpoint,
      _ref$filter = _ref.filter,
      filter = _ref$filter === undefined ? '' : _ref$filter;

  var stringFilter = filter;
  switch (search_endpoint) {

    case 'ows':
      var expression = new Expression({ layerName: layer.getWMSLayerName(), filter: stringFilter });
      filter = new Filter();
      filter.setExpression(expression.get());
      break;

    case 'api':
      Object.values(_constant.FILTER_EXPRESSION_OPERATORS).forEach(function (operator) {
        stringFilter = stringFilter.replace(new RegExp('\\s+' + operator + '\\s+', 'g'), '' + operator); // remove all blank space between operators
        stringFilter = stringFilter.replace(new RegExp('\'' + operator, 'g'), '' + operator); // leading single quote
        stringFilter = stringFilter.replace(new RegExp(operator + '\'', 'g'), '' + operator); // traling single quote
      });
      stringFilter = stringFilter.replace(/'$/g, '');
      filter = stringFilter.replace(/"/g, '');

      Object.entries(_constant.FILTER_EXPRESSION_OPERATORS).forEach(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            key = _ref3[0],
            value = _ref3[1];

        filter = filter.replace(new RegExp(value, "g"), value === 'AND' || value === 'OR' ? '|' + key + ',' : '|' + key + '|');
      });
      //encode value
      filter = filter.split('|').map(function (value, index) {
        return 0 === (index + 1) % 3 ? encodeURIComponent(value) : value;
      }).join('|');
      break;

  }
  return filter;
};

},{"app/constant":5,"core/layers/filter/expression":14,"core/layers/filter/filter":15}],364:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.createLayerStyle = createLayerStyle;
/**
 * @param styleObj 
 * @returns { ol.style.Style | undefined } style
 */
function createLayerStyle(styleObj) {
  // skip when no style object is passed
  if (!styleObj) {
    return;
  }

  return new ol.style.Style(Object.entries(styleObj).reduce(function (styles, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        type = _ref2[0],
        config = _ref2[1];

    if ('point' === type && config.icon) {
      styles.image = new ol.style.Icon({ src: config.icon.url, imageSize: config.icon.width });
    }
    if ('line' === type) {
      styles.stroke = new ol.style.Stroke({ color: config.color, width: config.width });
    }
    if ('polygon' === type) {
      styles.fill = new ol.style.Fill({ color: config.color });
    }
    return styles;
  }, {}));
}

},{}],365:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMeasureTooltip = createMeasureTooltip;

var _formatMeasure = require('utils/formatMeasure');

/**
 * create and add measure tooltip 
 */
function createMeasureTooltip() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      map = _ref.map,
      feature = _ref.feature;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var element = document.createElement('div');
  element.className = 'mtooltip mtooltip-measure';

  var tooltip = new ol.Overlay({
    element: element,
    offset: [0, -15],
    positioning: 'bottom-center'
  });

  map.addOverlay(tooltip);

  return {
    tooltip: tooltip,
    unbyKey: feature.getGeometry().on('change', function (evt) {
      var tooltipCoord = void 0;
      var geometry = evt.target;
      if (geometry instanceof ol.geom.Polygon) {
        tooltipCoord = geometry.getInteriorPoint().getCoordinates();
      } else if (geometry instanceof ol.geom.MultiPolygon) {
        tooltipCoord = geometry.getInteriorPoints().getCoordinates()[0];
      } else if (geometry instanceof ol.geom.LineString) {
        tooltipCoord = geometry.getLastCoordinate();
      } else if (geometry instanceof ol.geom.MultiLineString) {
        tooltipCoord = geometry.getLastCoordinate();
      }
      element.innerHTML = (0, _formatMeasure.formatMeasure)({ geometry: geometry, projection: map.getView().getProjection() }, options);
      tooltip.setPosition(tooltipCoord);
    })
  };
}

},{"utils/formatMeasure":385}],366:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOlFeatureFromApiResponseFeature = createOlFeatureFromApiResponseFeature;

var _constant = require('app/constant');

/**
 * Convert feature from api
 * 
 * @param { Object } feature
 * @param feature.properties
 * @param feature.geometry
 * @param feature.id
 * 
 * @returns { ol.Feature }
 */
function createOlFeatureFromApiResponseFeature(feature) {
  var properties = undefined !== feature.properties ? feature.properties : {};
  properties[_constant.G3W_FID] = feature.id;
  var Feature = new ol.Feature(feature.geometry && new ol.geom[feature.geometry.type](feature.geometry.coordinates));
  Feature.setProperties(properties);
  Feature.setId(feature.id);
  return Feature;
}

},{"app/constant":5}],367:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOlLayer = createOlLayer;

var _getAllPointGeometryTypes = require("utils/getAllPointGeometryTypes");

var _getAllLineGeometryTypes = require("utils/getAllLineGeometryTypes");

var _getAllPolygonGeometryTypes = require("utils/getAllPolygonGeometryTypes");

/**
 * @param { Object } layer options
 * @param layer.id
 * @param layer.features
 * @param layer.geometryType
 * @param layer.color
 * @param layer.style
 * @param layer.source
 * 
 * @returns { ol.layer.Vector } ol layer 
 */
function createOlLayer() {
  var layer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var color = layer.color;
  var style = layer.style;

  // create ol layer to add to map
  var olSource = layer.source || new ol.source.Vector({ features: layer.features || new ol.Collection() });
  var olLayer = new ol.layer.Vector({ id: layer.id, source: olSource });

  if (!style && (0, _getAllPointGeometryTypes.getAllPointGeometryTypes)().includes(layer.geometryType)) {
    style = new ol.style.Style({
      image: new ol.style.Circle({
        fill: new ol.style.Fill({ color: color }),
        radius: 5
      })
    });
  }

  if (!style && (0, _getAllLineGeometryTypes.getAllLineGeometryTypes)().includes(layer.geometryType)) {
    style = new ol.style.Style({
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    });
  }

  if (!style && (0, _getAllPolygonGeometryTypes.getAllPolygonGeometryTypes)().includes(layer.geometryType)) {
    style = new ol.style.Style({
      stroke: new ol.style.Stroke({ color: '#000000', width: 1 }),
      fill: new ol.style.Fill({ color: color })
    });
    olLayer.setOpacity(0.6);
  }

  olLayer.setStyle(style);
  return olLayer;
}

},{"utils/getAllLineGeometryTypes":387,"utils/getAllPointGeometryTypes":388,"utils/getAllPolygonGeometryTypes":389}],368:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPolygonLayerFromBBox = createPolygonLayerFromBBox;
/**
 * Create a polygon vector layer from bbox
 * 
 * @param bbox 
 * 
 * @returns { ol.layer.Vector }
 */
function createPolygonLayerFromBBox(bbox) {
  return new ol.layer.Vector({
    source: new ol.source.Vector({
      features: [new ol.Feature(new ol.geom.Polygon.fromExtent(bbox))]
    })
  });
}

},{}],369:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSelectedStyle = createSelectedStyle;
/**
 * @param { Object } style 
 * @param style.geometryType
 * @param style.color
 * @param style.fill
 * 
 * @returns { ol.style.Style | null } style 
 */
function createSelectedStyle() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      geometryType = _ref.geometryType,
      _ref$color = _ref.color,
      color = _ref$color === undefined ? 'rgb(255,255,0)' : _ref$color,
      _ref$fill = _ref.fill,
      fill = _ref$fill === undefined ? true : _ref$fill;

  switch (geometryType) {

    case 'LineString':
    case 'MultiLineString':
      return new ol.style.Style({
        stroke: new ol.style.Stroke({ color: color, width: 4 })
      });

    case 'Point':
    case 'MultiPoint':
      return new ol.style.Style({
        image: new ol.style.Circle({
          radius: 6,
          fill: fill && new ol.style.Fill({ color: color }),
          stroke: !fill && new ol.style.Stroke({ color: color, width: 4 })
        }),
        zIndex: Infinity
      });

    case 'MultiPolygon':
    case 'Polygon':
      return new ol.style.Style({
        stroke: new ol.style.Stroke({ color: color, width: 4 }),
        fill: fill && new ol.style.Fill({ color: ol.color.asString(ol.color.asArray(color).splice(3, 1, 0.5)) })
      });

    default:
      console.warn('invalid geometry type', geometryType);
      return null;

  }
}

},{}],370:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSingleFieldParameter = createSingleFieldParameter;

var _constant = require('app/constant');

var _createFilterFromString = require('./createFilterFromString');

/**
 * @param { Object } opts
 * @param opts.layer
 * @param opts.field
 * @param opts.value
 * @param { string } [opts.operator='eq']         'eq' as default
 * @param { string } [opts.logicop='OR']          'OR' as default
 * @param { string } [opts.search_endpoint='api'] 'api' as default
 * 
 * @returns {string}
 * 
 * @since 3.8.7
 */
function createSingleFieldParameter(_ref) {
  var layer = _ref.layer,
      field = _ref.field,
      value = _ref.value,
      _ref$operator = _ref.operator,
      operator = _ref$operator === undefined ? 'eq' : _ref$operator,
      _ref$logicop = _ref.logicop,
      logicop = _ref$logicop === undefined ? 'OR' : _ref$logicop,
      _ref$search_endpoint = _ref.search_endpoint,
      search_endpoint = _ref$search_endpoint === undefined ? 'api' : _ref$search_endpoint;

  /** Check if search_endpoint is api and value is an array */
  if ('api' === search_endpoint && Array.isArray(value)) {
    var _filter = '';
    var valueLenght = value.length;
    value.forEach(function (value, index) {
      _filter += field + '|' + operator.toLowerCase() + '|' + encodeURIComponent(value) + (index < valueLenght - 1 ? '|' + logicop + ',' : '');
    });
    return _filter;
  }

  /** Case search_endpoint is api and value is single value*/
  if ('api' === search_endpoint) {
    return field + '|' + operator.toLowerCase() + '|' + encodeURIComponent(value);
  }

  //in case of search_endpoint equal to ows

  // store filter string 
  var filter = '';

  // value is array of values
  if (Array.isArray(value)) {
    var _valueLenght = value.length;
    value.forEach(function (value, index) {
      filter += '"' + field + '" ' + _constant.FILTER_EXPRESSION_OPERATORS[operator] + ' \'' + encodeURIComponent(value) + '\' ' + (index < _valueLenght - 1 ? logicop + ' ' : '');
    });
  } else {
    //single value
    filter = '"' + field + '" ' + _constant.FILTER_EXPRESSION_OPERATORS[operator] + ' \'' + encodeURIComponent(value) + '\'';
  }

  return (0, _createFilterFromString.createFilterFromString)({
    layer: layer,
    search_endpoint: search_endpoint,
    filter: filter
  });
};

},{"./createFilterFromString":363,"app/constant":5}],371:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStyleFunctionToVectorLayer = createStyleFunctionToVectorLayer;

var _getDefaultLayerStyle = require('utils/getDefaultLayerStyle');

function createStyleFunctionToVectorLayer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var styleFunction = function styleFunction(feature, resolution) {
    var color = options.color,
        field = options.field;

    color = color.rgba ? 'rgba(' + color.rgba.r + ',' + color.rgba.g + ',' + color.rgba.b + ',' + color.rgba.a + ')' : color;
    var style = (0, _getDefaultLayerStyle.getDefaultLayerStyle)(feature.getGeometry().getType(), { color: color });
    if (field) {
      style.setText(new ol.style.Text({
        text: '' + feature.get(field),
        font: 'bold',
        scale: 2,
        offsetY: 15,
        fill: new ol.style.Fill({ color: color }),
        stroke: new ol.style.Stroke({ color: '#FFF', width: 2 })
      }));
    }
    return style;
  };
  styleFunction._g3w_options = options;
  return styleFunction;
};

},{"utils/getDefaultLayerStyle":394}],372:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVectorLayerFromFeatures = createVectorLayerFromFeatures;
/**
 * @param feature 
 * 
 * @returns { ol.layer.Vector } 
 */
function createVectorLayerFromFeatures(feature) {
  return new ol.layer.Vector({
    source: new ol.source.Vector({
      features: Array.isArray(feature) ? feature : [feature]
    })
  });
}

},{}],373:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVectorLayerFromFile = undefined;

var _createKMZLayer = function () {
  var _ref = _asyncToGenerator(function* (name, crs, mapCrs, style, data) {
    try {
      return yield new Promise(function () {
        var _ref2 = _asyncToGenerator(function* (resolve, reject) {
          var zip = new JSZip();
          zip.load((yield data.arrayBuffer(data)));
          var kmlFiles = zip.file(/.kml$/i);
          /**
           * @TODO handle multiple network links
           * 
           * https://github.com/g3w-suite/g3w-client/pull/430/files#r1232092732
           */
          // get last kml file (when doc.kml file has a reference to kml inside another folder)
          var kmlFile = kmlFiles[kmlFiles.length - 1];
          if (kmlFile) {
            resolve(_createVectorLayer(name, crs, mapCrs, style, kmlFile.asText(), new ol.format.KML({ extractStyles: false }), "EPSG:4326"));
          } else {
            reject();
          }
        });

        return function (_x6, _x7) {
          return _ref2.apply(this, arguments);
        };
      }());
    } catch (err) {
      console.warn(err);
      return Promise.reject();
    }
  });

  return function _createKMZLayer(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

var _createZIPLayer = function () {
  var _ref3 = _asyncToGenerator(function* (name, crs, mapCrs, style, data) {
    console.log(name);
    try {
      return yield new Promise(function () {
        var _ref4 = _asyncToGenerator(function* (resolve, reject) {
          shp((yield data.arrayBuffer(data))).then(function (geojson) {
            resolve(_createVectorLayer(name, crs, mapCrs, style, JSON.stringify(geojson), new ol.format.GeoJSON({}), "EPSG:4326"));
          }).catch(reject);
        });

        return function (_x13, _x14) {
          return _ref4.apply(this, arguments);
        };
      }());
    } catch (err) {
      console.warn(err);
      return Promise.reject();
    }
  });

  return function _createZIPLayer(_x8, _x9, _x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * @param { Object } file
 * @param { string } file.name
 * @param file.type
 * @param file.crs
 * @param file.mapCrs
 * @param file.data
 * @param file.style
 * 
 * @returns { Promise } layer
 */


var createVectorLayerFromFile = exports.createVectorLayerFromFile = function () {
  var _ref5 = _asyncToGenerator(function* () {
    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        name = _ref6.name,
        type = _ref6.type,
        crs = _ref6.crs,
        mapCrs = _ref6.mapCrs,
        data = _ref6.data,
        style = _ref6.style;

    switch (type) {
      case 'gpx':
        return _createVectorLayer(name, crs, mapCrs, style, data, new ol.format.GPX());
      case 'gml':
        return _createVectorLayer(name, crs, mapCrs, style, data, new ol.format.WMSGetFeatureInfo());
      case 'geojson':
        return _createVectorLayer(name, crs, mapCrs, style, data, new ol.format.GeoJSON());
      case 'kml':
        return _createVectorLayer(name, crs, mapCrs, style, data, new ol.format.KML({ extractStyles: false }), "EPSG:4326");
      case 'csv':
        return _createCSVLayer(name, crs, mapCrs, style, data);
      case 'kmz':
        return _createKMZLayer(name, crs, mapCrs, style, data);
      case 'zip':
        return _createZIPLayer(name, crs, mapCrs, style, data);
    }
    console.warn('invalid file type', type);
  });

  return function createVectorLayerFromFile() {
    return _ref5.apply(this, arguments);
  };
}();

var _constant = require('app/constant');

var _getUniqueDomId = require('./getUniqueDomId');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _createVectorLayer(name, crs, mapCrs, style, data, format, epsg) {
  epsg = undefined === epsg ? crs : epsg;

  var features = format.readFeatures(data, { dataProjection: epsg, featureProjection: mapCrs || epsg });

  // skip when no features
  if (0 === features.length) {
    return;
  }

  // ignore kml property [`<styleUrl>`](https://developers.google.com/kml/documentation/kmlreference)
  if (format instanceof ol.format.KML) {
    features.forEach(function (f) {
      return f.unset('styleUrl');
    });
  }

  return new ol.layer.Vector({
    source: new ol.source.Vector({ features: features }),
    name: name,
    _fields: Object.keys(features[0].getProperties()).filter(function (prop) {
      return _constant.GEOMETRY_FIELDS.indexOf(prop) < 0;
    }),
    id: (0, _getUniqueDomId.getUniqueDomId)(),
    style: style
  });
}

function _createCSVLayer(name, crs, mapCrs, style, data) {
  var headers = data.headers,
      separator = data.separator,
      values = data.values,
      x = data.x,
      y = data.y;


  var features = [];
  var errorrows = [];

  values.forEach(function (row, index) {
    var properties = {};
    var rowvalues = row.split(separator);
    if (rowvalues.length === headers.length) {
      var coordinates = [];
      rowvalues.forEach(function (value, index) {
        var field = headers[index];
        if (field === x) {
          coordinates[0] = 1 * value;
        }
        if (field === y) {
          coordinates[1] = 1 * value;
        }
        properties[field] = value;
      });
      // check if all coordinates is right
      if (undefined === coordinates.find(function (value) {
        return Number.isNaN(value);
      })) {
        var geometry = new ol.geom.Point(coordinates);
        if (crs !== mapCrs) {
          geometry.transform(crs, mapCrs);
        }
        var feature = new ol.Feature(geometry);
        feature.setId(index); // incremental id
        feature.setProperties(properties);
        features.push(feature);
      }
    } else {
      errorrows.push({ row: index + 1, value: values[index] });
    }
  });

  if (!features.length) {
    return Promise.reject();
  }

  if (errorrows.length) {
    GUI.showUserMessage({
      type: 'warning',
      message: 'sdk.mapcontrols.addlayer.messages.csv.warning',
      hooks: {
        footer: {
          template: '<select v-select2="errorrows[0].value" class="skin-color" :search="false" style="width:100%">\n              <option v-for="errorrow in errorrows" :key="errorrow.row" :value="errorrow.value">[{{ errorrow.row}}] {{errorrow.value}}</option>\n          </select>',
          data: function data() {
            return {
              errorrows: errorrows
            };
          }
        }
      },
      autoclose: false
    });
  }

  return new ol.layer.Vector({
    source: new ol.source.Vector({ features: features }),
    name: name,
    _fields: headers,
    id: (0, _getUniqueDomId.getUniqueDomId)(),
    style: style
  });
}

},{"./getUniqueDomId":412,"app/constant":5}],374:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVectorLayerFromGeometry = createVectorLayerFromGeometry;

var _createVectorLayerFromFeatures = require('utils/createVectorLayerFromFeatures');

function createVectorLayerFromGeometry(geometry) {
  return (0, _createVectorLayerFromFeatures.createVectorLayerFromFeatures)(new ol.Feature(geometry));
}

},{"utils/createVectorLayerFromFeatures":372}],375:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWMSLayer = createWMSLayer;

var _getUniqueDomId = require('utils/getUniqueDomId');

var WMSLayer = require('core/layers/map/wmslayer');

/**
 * @param { Object } wms 
 * @param { string } wms.url
 * @param { string } wms.name
 * @param wms.projection
 * @param { Array } wms.layers
 * 
 * @returns {{ olLayer, wmslayer: WMSLayer }}
 */
function createWMSLayer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      url = _ref.url,
      name = _ref.name,
      projection = _ref.projection,
      _ref$layers = _ref.layers,
      layers = _ref$layers === undefined ? [] : _ref$layers;

  var id = name || (0, _getUniqueDomId.getUniqueDomId)();
  var wmslayer = new WMSLayer({ id: id, layers: layers, projection: projection, url: url });
  var olLayer = wmslayer.getOLLayer();
  olLayer.set('id', id); // set unique id
  olLayer.set('name', name || id);
  return {
    wmslayer: wmslayer,
    olLayer: olLayer
  };
}

},{"core/layers/map/wmslayer":26,"utils/getUniqueDomId":412}],376:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.crsToCrsObject = crsToCrsObject;

var _normalizeEpsg = require('utils/normalizeEpsg');

var _toRawType = require('utils/toRawType');

/**
 * @param { number | string | null | undefined } crs
 * 
 * @returns { { epsg: string, proj4: string, axisinverted: boolean, geographic: boolean } | null | undefined } crs object
 */
function crsToCrsObject(crs) {

  /** @FIXME add description */
  if (null === crs || undefined === crs) {
    return crs;
  }

  /** @FIXME add description */
  if ('Object' === (0, _toRawType.toRawType)(crs) && crs.epsg) {
    crs.epsg = (0, _normalizeEpsg.normalizeEpsg)(crs.epsg);
    return crs;
  }

  return {
    epsg: (0, _normalizeEpsg.normalizeEpsg)(crs),
    proj4: "",
    axisinverted: false,
    geographic: false
  };
};

},{"utils/normalizeEpsg":436,"utils/toRawType":459}],377:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounce = debounce;

/**
 * build debounce function
 */
function debounce(func) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

  var timeout = void 0;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    clearTimeout(timeout);
    timeout = setTimeout(function () {
      func.apply(undefined, args);
    }, delay);
  };
};

},{}],378:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dissolve = dissolve;
/**
 * @param { Object } opts 
 * @param { Array } opts.features
 * @param { number } opts.index
 * @param { boolean } opts.clone
 * 
 * @returns dissolved feature
 */
function dissolve() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$features = _ref.features,
      features = _ref$features === undefined ? [] : _ref$features,
      _ref$index = _ref.index,
      index = _ref$index === undefined ? 0 : _ref$index,
      _ref$clone = _ref.clone,
      clone = _ref$clone === undefined ? false : _ref$clone;

  var parser = new jsts.io.OL3Parser();
  var featuresLength = features.length;

  /** In case no features to dissolve  */
  if (0 === featuresLength) {
    return null;
  }

  /** In case of single feature, return feature */
  if (1 === featuresLength) {
    return features[0];
  }

  var jstsdissolvedFeatureGeometry = void 0;

  var baseFeature = clone ? features[index].clone() : features[index];
  var baseFeatureGeometry = baseFeature.getGeometry();
  var baseFeatureGeometryType = baseFeatureGeometry.getType();

  // check if it can build a LineString
  if ('LineString' === baseFeatureGeometryType) {
    var lineMerger = new jsts.operation.linemerge.LineMerger();
    for (var i = 0; i < featuresLength; i++) {
      lineMerger.addLineString(new jsts.geom.GeometryFactory().createLineString(parser.read(features[i].getGeometry()).getCoordinates()));
    }
    var mergedLineString = lineMerger.getMergedLineStrings();
    jstsdissolvedFeatureGeometry = 1 === mergedLineString.size() ? mergedLineString.toArray()[0] : null;
  }

  if ('LineString' !== baseFeatureGeometryType) {
    jstsdissolvedFeatureGeometry = parser.read(baseFeatureGeometry);
    for (var _i = 0; _i < featuresLength; _i++) {
      if (index !== _i) {
        jstsdissolvedFeatureGeometry = jstsdissolvedFeatureGeometry.union(parser.read(features[_i].getGeometry()));
      }
    }
  }

  /** In case of no dissolved geometry  */
  if (!jstsdissolvedFeatureGeometry) {
    return null;
  }

  var dissolvedFeatureGeometry = parser.write(jstsdissolvedFeatureGeometry);
  var dissolvedFeatureGeometryType = dissolvedFeatureGeometry.getType();
  var dissolvedFeatureGeometryCoordinates = dissolvedFeatureGeometryType === baseFeatureGeometryType ? dissolvedFeatureGeometry.getCoordinates() : -1 !== baseFeatureGeometryType.indexOf('Multi') && dissolvedFeatureGeometryType === baseFeatureGeometryType.replace('Multi', '') ? [dissolvedFeatureGeometry.getCoordinates()] : null;

  /** In case of null feature dissolved coordinates  */
  if (null === dissolvedFeatureGeometryCoordinates) {
    return null;
  }

  baseFeature.getGeometry().setCoordinates(dissolvedFeatureGeometryCoordinates);

  return baseFeature;
}

},{}],379:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distance = distance;

var _squaredDistance = require("utils/squaredDistance");

/**
 * core/geometry/geom::distance@v3.4
 */
function distance(c1, c2) {
  return Math.sqrt((0, _squaredDistance.squaredDistance)(c1, c2));
}

},{"utils/squaredDistance":457}],380:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadCSV = downloadCSV;

var _getUniqueDomId = require('./getUniqueDomId');

function downloadCSV() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$filename = _ref.filename,
      filename = _ref$filename === undefined ? (0, _getUniqueDomId.getUniqueDomId)() : _ref$filename,
      _ref$items = _ref.items,
      items = _ref$items === undefined ? [] : _ref$items;

  function convertToCSV(items) {
    var str = '';
    for (var i = 0; i < items.length; i++) {
      var line = '';
      for (var index in items[i]) {
        if (line !== '') line += ';';
        line += items[i][index];
      }
      str += line + '\r\n';
    }
    return str;
  }
  var exportedFilenmae = filename + '.csv';
  var csv = convertToCSV(items);
  var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  if (navigator.msSaveBlob) {
    // IE 10+
    navigator.msSaveBlob(blob, exportedFilenmae);
  } else {
    var link = document.createElement("a");
    if (link.download !== undefined) {
      // Browsers that support HTML5 download attribute
      var url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", exportedFilenmae);
      link.style.visibility = 'hidden';
      link.click();
    }
  }
};

},{"./getUniqueDomId":412}],381:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadCSVLayerFeatures = downloadCSVLayerFeatures;

var _downloadCSV = require('utils/downloadCSV');

var _getAlphanumericPropertiesFromFeature = require('utils/getAlphanumericPropertiesFromFeature');

function downloadCSVLayerFeatures() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref.layer,
      _ref$alias = _ref.alias,
      alias = _ref$alias === undefined ? true : _ref$alias;

  //get headers
  var attributes = Object.keys(layer.features[0].attributes);
  var properties = (0, _getAlphanumericPropertiesFromFeature.getAlphanumericPropertiesFromFeature)(attributes);
  var headers = !alias ? properties : properties.map(function (property) {
    var attribute = layer.attributes.find(function (attribute) {
      return attribute.name === property;
    });
    return attribute ? attribute.label : property;
  });
  var items = layer.features.map(function (feature) {
    var attributes = feature.attributes;
    var item = {};
    properties.forEach(function (property, index) {
      var key = !alias && property || headers[index];
      item[key] = attributes[property];
    });
    return item;
  });

  (0, _downloadCSV.downloadCSV)({
    filename: layer.id,
    items: items
  });
};

},{"utils/downloadCSV":380,"utils/getAlphanumericPropertiesFromFeature":390}],382:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadFile = downloadFile;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function downloadFile() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      filename = _ref.filename,
      content = _ref.content,
      url = _ref.url,
      _ref$mime_type = _ref.mime_type,
      mime_type = _ref$mime_type === undefined ? 'text/plain' : _ref$mime_type;

  var download = function download(blob) {
    var temapAncor = document.createElement('a');
    temapAncor.setAttribute('href', window.URL.createObjectURL(blob));
    temapAncor.setAttribute('download', filename);
    temapAncor.dataset.downloadurl = [mime_type, temapAncor.download, temapAncor.href].join(':');
    temapAncor.click();
    temapAncor = null;
  };
  return new Promise(function (resolve, reject) {
    if (content) {
      var blob = new Blob([content], { type: mime_type });
      download(blob);
      resolve();
    } else if (url) {
      fetch(url).then(function () {
        var _ref2 = _asyncToGenerator(function* (response) {
          if (response.status === 200) {
            mime_type = mime_type || response.headers.get('content-type');
            filename = filename || response.headers.get('content-disposition').split('filename=').length ? response.headers.get('content-disposition').split('filename=')[1] : 'g3w_download_file';
            return response.blob();
          } else if (response.status === 400 || response.status === 500) {
            var _ref3 = yield response.json(),
                message = _ref3.message;

            return Promise.reject(message);
          }
        });

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }()).then(function (blob) {
        download(blob);
        resolve();
      }).catch(function (error) {
        reject(error);
      });
    }
  });
};

},{}],383:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findSelfIntersects = findSelfIntersects;
/**
 * @param geometry geojson polygon
 * 
 * @returns { boolean } whether geometry has self intersections
 */
function findSelfIntersects(geometry) {
  var jstsPolygon = new jsts.io.OL3Parser().read(geometry);
  // geometry is already a simple linear ring, do not try to find self intersection points.
  if (new jsts.operation.IsSimpleOp(jstsPolygon).isSimpleLinearGeometry(jstsPolygon)) {
    return false;
  }
  /** @FIXME add description */
  if (!new jsts.operation.valid.ConsistentAreaTester(new jsts.geomgraph.GeometryGraph(0, jstsPolygon)).isNodeConsistentArea()) {
    return true;
  }
}

},{}],384:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.flattenObject = flattenObject;
/**
 * ORIGINAL SOURCE: https://stackoverflow.com/a/56253298
 * 
 * @example 
 * 
 * ### Sample Input
 * 
 * ```
 * const obj = {
 *  name: "test",
 *  address: {
 *    personal: "abc",
 *      office: {
 *        building: 'random',
 *        street: 'some street'
 *      }
 *    }
 *  }
 * ```
 * 
 * ### Expected Output
 * 
 * ```
 * {
 *   name : "test",
 *   address_personal: "abc"
 *   address_office_building: "random"
 *   address_office_street: "some street"
 * }
 * ```
 * 
 * @since 3.9.0
 */
function flattenObject(obj, parent) {
    var res = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    for (var key in obj) {
        var propName = parent ? parent + '_' + key : key;
        if (_typeof(obj[key]) == 'object') {
            flattenObject(obj[key], propName, res);
        } else {
            res[propName] = obj[key];
        }
    }
    return res;
}

},{}],385:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMeasure = formatMeasure;

var _getCurrentMapUnit = require('utils/getCurrentMapUnit');

var _getLengthMessageText = require('utils/getLengthMessageText');

var _getAreaMessageText = require('utils/getAreaMessageText');

var _isLineGeometryType = require('utils/isLineGeometryType');

var _isPolygonGeometryType = require('utils/isPolygonGeometryType');

var _isMultiGeometry = require('utils/isMultiGeometry');

var _multiGeometryToSingleGeometries = require('utils/multiGeometryToSingleGeometries');

function formatMeasure() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      geometry = _ref.geometry,
      projection = _ref.projection;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /**
   * @FIXME circular dependency (ie. empty object when importing at top level), ref: #130
   */
  //
  var geometryType = geometry.getType();
  var unit = (0, _getCurrentMapUnit.getCurrentMapUnit)();
  if ((0, _isLineGeometryType.isLineGeometryType)(geometryType)) {
    return (0, _getLengthMessageText.getLengthMessageText)({
      unit: unit,
      projection: projection,
      geometry: geometry
    });
  } else if ((0, _isPolygonGeometryType.isPolygonGeometryType)(geometryType)) {
    var segments = void 0;
    if ((0, _isMultiGeometry.isMultiGeometry)(geometryType)) {
      segments = [];
      (0, _multiGeometryToSingleGeometries.multiGeometryToSingleGeometries)(geometry).forEach(function (geometry) {
        geometry.getLinearRing().getCoordinates().forEach(function (coordinates) {
          return segments.push(coordinates);
        });
      });
    } else segments = geometry.getLinearRing().getCoordinates();
    return (0, _getAreaMessageText.getAreaMessageText)({ unit: unit, geometry: geometry, projection: projection, segments: segments });
  }
}

},{"utils/getAreaMessageText":391,"utils/getCurrentMapUnit":392,"utils/getLengthMessageText":399,"utils/isLineGeometryType":424,"utils/isMultiGeometry":425,"utils/isPolygonGeometryType":427,"utils/multiGeometryToSingleGeometries":434}],386:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAjaxResponses = getAjaxResponses;
function getAjaxResponses() {
  var listRequests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var d = $.Deferred();
  var DoneRespones = [];
  var FailedResponses = [];
  var requestsLenght = listRequests.length;

  listRequests.forEach(function (request) {
    request.then(function (response) {
      DoneRespones.push(response);
    }).fail(function (err) {
      FailedResponses.push(err);
    }).always(function () {
      requestsLenght = requestsLenght > 0 ? requestsLenght - 1 : requestsLenght;
      if (requestsLenght === 0) {
        d.resolve({
          done: DoneRespones,
          fail: FailedResponses
        });
      }
    });
  });

  return d.promise();
};

},{}],387:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllLineGeometryTypes = getAllLineGeometryTypes;

var _constant = require('app/constant');

/**
 * core/geometry/geometry::getAllLineGeometryTypes@v3.4
 */
function getAllLineGeometryTypes() {
  return [_constant.GEOMETRY_TYPES.LINESTRING, _constant.GEOMETRY_TYPES.LINESTRINGZ, _constant.GEOMETRY_TYPES.LINESTRINGM, _constant.GEOMETRY_TYPES.LINESTRINGZM, _constant.GEOMETRY_TYPES.LINESTRING25D, _constant.GEOMETRY_TYPES.MULTILINESTRING, _constant.GEOMETRY_TYPES.MULTILINESTRINGZ, _constant.GEOMETRY_TYPES.MULTILINESTRINGM, _constant.GEOMETRY_TYPES.MULTILINESTRINGZM, _constant.GEOMETRY_TYPES.MULTILINESTRING25D, _constant.GEOMETRY_TYPES.LINE, _constant.GEOMETRY_TYPES.LINEZ, _constant.GEOMETRY_TYPES.LINEM, _constant.GEOMETRY_TYPES.LINEZM, _constant.GEOMETRY_TYPES.LINE25D, _constant.GEOMETRY_TYPES.MULTILINE, _constant.GEOMETRY_TYPES.MULTILINEZ, _constant.GEOMETRY_TYPES.MULTILINEM, _constant.GEOMETRY_TYPES.MULTILINEZM, _constant.GEOMETRY_TYPES.MULTILINE25D];
}

},{"app/constant":5}],388:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllPointGeometryTypes = getAllPointGeometryTypes;

var _constant = require('app/constant');

/**
 * core/geometry/geometry::getAllPointGeometryTypes@v3.4
 */
function getAllPointGeometryTypes() {
  return [_constant.GEOMETRY_TYPES.POINT, _constant.GEOMETRY_TYPES.POINTZ, _constant.GEOMETRY_TYPES.POINTM, _constant.GEOMETRY_TYPES.POINTZM, _constant.GEOMETRY_TYPES.POINT25D, _constant.GEOMETRY_TYPES.MULTIPOINT, _constant.GEOMETRY_TYPES.MULTIPOINTZ, _constant.GEOMETRY_TYPES.MULTIPOINTM, _constant.GEOMETRY_TYPES.MULTIPOINTZM, _constant.GEOMETRY_TYPES.MULTIPOINT25D];
}

},{"app/constant":5}],389:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllPolygonGeometryTypes = getAllPolygonGeometryTypes;

var _constant = require("app/constant");

/**
 * core/geometry/geometry::getAllPolygonGeometryTypes@v3.4
 */
function getAllPolygonGeometryTypes() {
  return [_constant.GEOMETRY_TYPES.POLYGON, _constant.GEOMETRY_TYPES.POLYGONZ, _constant.GEOMETRY_TYPES.POLYGONM, _constant.GEOMETRY_TYPES.POLYGONZM, _constant.GEOMETRY_TYPES.POLYGON25D, _constant.GEOMETRY_TYPES.MULTIPOLYGON, _constant.GEOMETRY_TYPES.MULTIPOLYGONZ, _constant.GEOMETRY_TYPES.MULTIPOLYGONM, _constant.GEOMETRY_TYPES.MULTIPOLYGONZM, _constant.GEOMETRY_TYPES.MULTIPOLYGON25D];
}

},{"app/constant":5}],390:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAlphanumericPropertiesFromFeature = getAlphanumericPropertiesFromFeature;

var _constant = require('app/constant');

/**
 * @param { Array } properties
 * 
 * @returns { Array }
 */
function getAlphanumericPropertiesFromFeature() {
  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  properties = Array.isArray(properties) ? properties : Object.keys(properties);
  return properties.filter(function (prop) {
    return -1 === _constant.GEOMETRY_FIELDS.indexOf(prop);
  });
}

},{"app/constant":5}],391:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAreaMessageText = getAreaMessageText;

var _needUseSphereMethods = require('utils/needUseSphereMethods');

var _getLengthMessageText = require('utils/getLengthMessageText');

var _transformMeterArea = require('utils/transformMeterArea');

function getAreaMessageText(_ref) {
  var unit = _ref.unit,
      geometry = _ref.geometry,
      projection = _ref.projection,
      _ref$segments = _ref.segments,
      segments = _ref$segments === undefined ? [] : _ref$segments;

  var useSphereMethods = (0, _needUseSphereMethods.needUseSphereMethods)(projection);
  var area = Math.round(useSphereMethods ? ol.sphere.getArea(geometry, {
    projection: projection.getCode()
  }) : geometry.getArea());
  var message = void 0;
  var segments_info_meausure = '';
  var segmentLength = segments.length;
  if (segmentLength > 2) {
    segments_info_meausure += (0, _getLengthMessageText.getLengthMessageText)({
      unit: unit,
      projection: projection,
      geometry: new ol.geom.LineString(segments)
    }) + ' <br>';
  }
  switch (unit) {
    case 'nautical':
      message = (0, _transformMeterArea.transformMeterArea)(area, unit) + ' \u2009nmi\xB2';
      break;
    case 'metric':
    default:
      message = area > 1000000 ? (Math.round(area / 1000000 * 100) / 100).toFixed(6) + ' km<sup>2</sup>' : (Math.round(area * 100) / 100).toFixed(3) + ' m<sup>2</sup>';
  }
  if (segments_info_meausure) message = 'Area: ' + message + ' <br><div style="width: 100%; padding: 3px; border-bottom: 2px solid #ffffff"></div> ' + segments_info_meausure;
  return message;
};

},{"utils/getLengthMessageText":399,"utils/needUseSphereMethods":435,"utils/transformMeterArea":461}],392:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCurrentMapUnit = getCurrentMapUnit;

var _applicationState = require('store/application-state');

var _applicationState2 = _interopRequireDefault(_applicationState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @FIXME utility functions should be stateles (move it elsewhere)
 */
function getCurrentMapUnit() {
  return _applicationState2.default.map.unit;
}

},{"store/application-state":328}],393:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDPI = getDPI;

var _constant = require('constant');

/**
 * @returns { number }
 */
function getDPI() {
  return _constant.DOTS_PER_INCH;
};

},{"constant":5}],394:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLayerStyle = getDefaultLayerStyle;

var _constant = require("app/constant");

var _isPointGeometryType = require("./isPointGeometryType");

var _isLineGeometryType = require("./isLineGeometryType");

var _isPolygonGeometryType = require("./isPolygonGeometryType");

function getDefaultLayerStyle(geometryType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var color = options.color;

  //Point geometry type

  if ((0, _isPointGeometryType.isPointGeometryType)(geometryType)) {
    return new ol.style.Style({
      image: new ol.style.Circle({
        fill: new ol.style.Fill({ color: color }),
        stroke: new ol.style.Stroke({ color: color, width: 1 }),
        radius: 5
      })
    });
  }

  //Line geometry type
  if ((0, _isLineGeometryType.isLineGeometryType)(geometryType)) {
    return new ol.style.Style({
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    });
  }

  //Polygon geometry type
  if ((0, _isPolygonGeometryType.isPolygonGeometryType)(geometryType)) {
    return new ol.style.Style({
      fill: new ol.style.Fill({ color: 'rgba(255,255,255,0.5)' }),
      stroke: new ol.style.Stroke({ color: color, width: 3 })
    });
  }

  console.warn('invalid geometry type: ', geometryType);
}

},{"./isLineGeometryType":424,"./isPointGeometryType":426,"./isPolygonGeometryType":427,"app/constant":5}],395:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtentForViewAndSize = getExtentForViewAndSize;
/**
 * @param center
 * @param resolution
 * @param rotation
 * @param size
 * 
 * @returns { number[] }
 */
function getExtentForViewAndSize(center, resolution, rotation, size) {
  var dx = resolution * size[0] / 2;
  var dy = resolution * size[1] / 2;
  var cosRotation = Math.cos(rotation);
  var sinRotation = Math.sin(rotation);
  var xCos = dx * cosRotation;
  var xSin = dx * sinRotation;
  var yCos = dy * cosRotation;
  var ySin = dy * sinRotation;
  var x = center[0];
  var y = center[1];
  var x0 = x - xCos + ySin;
  var x1 = x - xCos - ySin;
  var x2 = x + xCos - ySin;
  var x3 = x + xCos + ySin;
  var y0 = y - xSin - yCos;
  var y1 = y - xSin + yCos;
  var y2 = y + xSin + yCos;
  var y3 = y + xSin - yCos;

  //return [Math.min(y0, y1, y2, y3),Math.min(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), Math.max(x0, x1, x2, x3)]

  return [Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3)];
}

},{}],396:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFeaturesFromResponseVectorApi = getFeaturesFromResponseVectorApi;

var _convertVectorFeaturesToResultFeatures = require('utils/convertVectorFeaturesToResultFeatures');

/**
 * @param response
 * @param { Object } opts
 * @param { 'vector' | 'results' } opts.type
 * 
 * @returns { Array | null | * }
 */
function getFeaturesFromResponseVectorApi() {
  var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'vector' : _ref$type;

  /** In case of result missing or false (error) */
  if (!response.result) {
    return null;
  }

  /** @FIXME add description */
  if ('result' === type) {
    return (0, _convertVectorFeaturesToResultFeatures.convertVectorFeaturesToResultFeatures)(response.vector.data.features || []);
  }

  /** @FIXME add description */
  if ('vector' === type) {
    return response.vector.data.features || [];
  }
}

},{"utils/convertVectorFeaturesToResultFeatures":354}],397:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFormDataExpressionRequestFromFeature = getFormDataExpressionRequestFromFeature;

var _constant = require('app/constant');

var _getAlphanumericPropertiesFromFeature = require('utils/getAlphanumericPropertiesFromFeature');

var _convertFeatureToGEOJSON = require('utils/convertFeatureToGEOJSON');

/**
 * Convert feature to form Data for expression/expression_eval request
 * 
 * @param feature
 */
function getFormDataExpressionRequestFromFeature(feature) {
  delete feature.attributes.geometry;

  var _feature = new ol.Feature(feature.geometry);
  var properties = {};

  (0, _getAlphanumericPropertiesFromFeature.getAlphanumericPropertiesFromFeature)(feature.attributes).filter(function (prop) {
    return prop !== _constant.G3W_FID;
  }).forEach(function (prop) {
    return properties[prop] = feature.attributes[prop];
  });

  _feature.setProperties(properties);
  _feature.setId(feature.attributes[_constant.G3W_FID]);

  return (0, _convertFeatureToGEOJSON.convertFeatureToGEOJSON)(_feature);
}

},{"app/constant":5,"utils/convertFeatureToGEOJSON":350,"utils/getAlphanumericPropertiesFromFeature":390}],398:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Get geotiff file created by server
 *
 * @param { Object } options
 * @param { string } options.url server url end point
 * @param { 'GET' | 'POST' } [options.method='POST'] GET, POST, PUT, DELETE, etc.
 * @param { Object } options.params
 * @param options.params.image
 * @param options.params.csrfmiddlewaretoken
 * @param options.params.bbox
 * 
 * @returns { Promise<Blob> } geoTIFF
 */
var getGeoTIFFfromServer = exports.getGeoTIFFfromServer = function () {
  var _ref = _asyncToGenerator(function* () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var body = new FormData();
    body.append('image', options.params.image);
    body.append('csrfmiddlewaretoken', options.params.csrfmiddlewaretoken);
    body.append('bbox', options.params.bbox);
    return yield (yield fetch(options.url, { method: options.method || "POST", body: body })).blob();
  });

  return function getGeoTIFFfromServer() {
    return _ref.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

},{}],399:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLengthMessageText = getLengthMessageText;

var _needUseSphereMethods = require('utils/needUseSphereMethods');

var _transformMeterLength = require('utils/transformMeterLength');

var _isMultiGeometry = require('utils/isMultiGeometry');

/**
 * @param { Object } opts
 * @param opts.unit
 * @param opts.projection
 * @param opts.geometry 
 */
function getLengthMessageText() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      unit = _ref.unit,
      projection = _ref.projection,
      geometry = _ref.geometry;

  /**
   * @FIXME circular dependency (ie. empty object when importing at top level), ref: #130
   */
  //
  var geometryType = geometry.getType();
  var useSphereMethods = (0, _needUseSphereMethods.needUseSphereMethods)(projection);
  var length = useSphereMethods ? ol.sphere.getLength(geometry, {
    projection: projection.getCode()
  }) : (0, _isMultiGeometry.isMultiGeometry)(geometryType) ? geometry.getLineStrings().reduce(function (totalLength, lineGeometry) {
    return totalLength += lineGeometry.getLength();
  }, 0) : geometry.getLength();
  var message = void 0;
  switch (unit) {
    case 'nautical':
      message = (0, _transformMeterLength.transformMeterLength)(length, unit) + ' nm';
      break;
    case 'metric':
    default:
      message = length > 1000 ? (Math.round(length / 1000 * 100) / 100).toFixed(3) + ' km' : (Math.round(length * 100) / 100).toFixed(2) + ' m';
  }
  return message;
};

},{"utils/isMultiGeometry":425,"utils/needUseSphereMethods":435,"utils/transformMeterLength":462}],400:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMapLayerById = getMapLayerById;

var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getMapLayerById(layerId) {
  return _mapLayers2.default.getLayerById(layerId);
};

},{"store/map-layers":333}],401:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getMapLayersByFilter = getMapLayersByFilter;

var _mapLayers = require('store/map-layers');

var _mapLayers2 = _interopRequireDefault(_mapLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param filter defaults `GEOLAYER: true`
 * @param options
 * 
 * @returns { Array } map layers based on filtered properties of layer (eg. `GEOLAYER : true`)
 */
function getMapLayersByFilter() {
  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  filter = _extends({
    GEOLAYER: true
  }, filter);
  return _mapLayers2.default.getQuerableLayersStores().flatMap(function (store) {
    return store.getLayers(filter, options);
  });
}

},{"store/map-layers":333}],402:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMetersFromDegrees = getMetersFromDegrees;
/**
 * @param { number } degrees
 * @returns { number }
 */
function getMetersFromDegrees(degrees) {
  return degrees * ol.proj.Units.METERS_PER_UNIT.degrees;
};

},{}],403:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOLGeometry = getOLGeometry;

var _constant = require('app/constant');

/**
 * core/geometry/geometry::getOLGeometry@v3.4
 */
function getOLGeometry(geometryType) {

  switch (geometryType) {

    case _constant.GEOMETRY_TYPES.LINESTRINGZ:
    case _constant.GEOMETRY_TYPES.LINESTRINGM:
    case _constant.GEOMETRY_TYPES.LINESTRINGZM:
    case _constant.GEOMETRY_TYPES.LINESTRING25D:
    case _constant.GEOMETRY_TYPES.LINE:
    case _constant.GEOMETRY_TYPES.LINEZ:
    case _constant.GEOMETRY_TYPES.LINEM:
    case _constant.GEOMETRY_TYPES.LINEZM:
    case _constant.GEOMETRY_TYPES.LINE25D:
      return 'LineString';

    case _constant.GEOMETRY_TYPES.MULTILINESTRINGZ:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGM:
    case _constant.GEOMETRY_TYPES.MULTILINESTRINGZM:
    case _constant.GEOMETRY_TYPES.MULTILINESTRING25D:
    case _constant.GEOMETRY_TYPES.MULTILINE:
    case _constant.GEOMETRY_TYPES.MULTILINEZ:
    case _constant.GEOMETRY_TYPES.MULTILINEM:
    case _constant.GEOMETRY_TYPES.MULTILINEZM:
    case _constant.GEOMETRY_TYPES.MULTILINE25D:
      return 'MultiLineString';

    case _constant.GEOMETRY_TYPES.POINTZ:
    case _constant.GEOMETRY_TYPES.POINTM:
    case _constant.GEOMETRY_TYPES.POINTZM:
    case _constant.GEOMETRY_TYPES.POINT25D:
      return 'Point';

    case _constant.GEOMETRY_TYPES.MULTIPOINTZ:
    case _constant.GEOMETRY_TYPES.MULTIPOINTM:
    case _constant.GEOMETRY_TYPES.MULTIPOINTZM:
    case _constant.GEOMETRY_TYPES.MULTIPOINT25D:
      return 'MultiPoint';

    case _constant.GEOMETRY_TYPES.POLYGONZ:
    case _constant.GEOMETRY_TYPES.POLYGONM:
    case _constant.GEOMETRY_TYPES.POLYGONZM:
    case _constant.GEOMETRY_TYPES.POLYGON25D:
      return 'Polygon';

    case _constant.GEOMETRY_TYPES.MULTIPOLYGONZ:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONM:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGONZM:
    case _constant.GEOMETRY_TYPES.MULTIPOLYGON25D:
      return 'MultiPolygon';

    default:
      console.warn('invalid geometry type: ', geometryType);
      return geometryType;

  }
};

},{"app/constant":5}],404:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPointFeaturesfromGeometryVertex = getPointFeaturesfromGeometryVertex;

var _constant = require('app/constant');

/**
 * @param geometry
 * 
 * @returns { Array } Point feature vertex from geometry
 */
function getPointFeaturesfromGeometryVertex(geometry) {
  var pointFeatures = [];

  switch (geometry.getType()) {

    case _constant.GEOMETRY_TYPES.MULTIPOLYGON:
      geometry.getCoordinates().forEach(function (c) {
        c.forEach(function (c) {
          c.pop();
          c.forEach(function (c) {
            return pointFeatures.push(new ol.Feature(new ol.geom.Point(c)));
          });
        });
      });
      break;

    case _constant.GEOMETRY_TYPES.POLYGON:
      geometry.getCoordinates().forEach(function (c) {
        c.pop();
        c.forEach(function (c) {
          return pointFeatures.push(new ol.Feature(new ol.geom.Point(c)));
        });
      });
      break;

    case _constant.GEOMETRY_TYPES.MULTILINESTRING:
      geometry.getCoordinates().forEach(function (c) {
        c.forEach(function (c) {
          return pointFeatures.push(new ol.Feature(new ol.geom.Point(c)));
        });
      });
      break;

    case _constant.GEOMETRY_TYPES.LINESTRING:
      geometry.getCoordinates().forEach(function (c) {
        c.forEach(function (c) {
          return pointFeatures.push(new ol.Feature(new ol.geom.Point(c)));
        });
      });
      break;

    case _constant.GEOMETRY_TYPES.MULTIPOINT:
      geometry.getCoordinates().forEach(function (c) {
        return pointFeatures.push(new ol.Feature(new ol.geom.Point(c)));
      });
      break;

    case _constant.GEOMETRY_TYPES.POINT:
      pointFeatures.push(new ol.geom.Point(geometry.getCoordinates()));
      break;

  }
  return pointFeatures;
};

},{"app/constant":5}],405:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryLayersPromisesByBBOX = getQueryLayersPromisesByBBOX;

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _getQueryLayersPromisesByGeometry = require('utils/getQueryLayersPromisesByGeometry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Filter = require('core/layers/filter/filter');

/**
 * @param layers
 * @param { Object } opts
 * @param opts.bbox
 * @param opts.feature_count
 * @param opts.multilayers
 * 
 * @returns { JQuery.Promise<any, any, any> }
 */
function getQueryLayersPromisesByBBOX(layers, _ref) {
  var bbox = _ref.bbox,
      _ref$filterConfig = _ref.filterConfig,
      filterConfig = _ref$filterConfig === undefined ? {} : _ref$filterConfig,
      _ref$feature_count = _ref.feature_count,
      feature_count = _ref$feature_count === undefined ? 10 : _ref$feature_count,
      _ref$multilayers = _ref.multilayers,
      multilayers = _ref$multilayers === undefined ? false : _ref$multilayers;

  var geometry = ol.geom.Polygon.fromExtent(bbox);
  var mapProjection = _gui2.default.getComponent('map').getService().getMap().getView().getProjection();

  /** Group query by layers */
  if (multilayers) {
    return (0, _getQueryLayersPromisesByGeometry.getQueryLayersPromisesByGeometry)(layers, {
      geometry: geometry,
      feature_count: feature_count,
      filterConfig: filterConfig,
      multilayers: multilayers,
      projection: mapProjection
    });
  }

  var d = $.Deferred();
  var mapCrs = mapProjection.getCode();
  var promise = d.promise();
  var queryResponses = [];
  var queryErrors = [];
  var layersLenght = layers.length;

  /** @FIXME add description */
  layers.forEach(function (layer) {
    var filter = new Filter(filterConfig);
    var layerCrs = layer.getProjection().getCode();
    // Convert filter geometry from `mapCRS` to `layerCrs`
    filter.setGeometry(mapCrs === layerCrs ? geometry : geometry.clone().transform(mapCrs, layerCrs));

    layer.query({ filter: filter, feature_count: feature_count }).then(function (response) {
      return queryResponses.push(response);
    }).fail(function (error) {
      return queryErrors.push(error);
    }).always(function () {
      layersLenght -= 1;
      if (0 === layersLenght) {
        queryErrors.length === layers.length ? d.reject(queryErrors) : d.resolve(queryResponses);
      }
    });
  });

  return promise;
}

},{"core/layers/filter/filter":15,"services/gui":319,"utils/getQueryLayersPromisesByGeometry":407}],406:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryLayersPromisesByCoordinates = getQueryLayersPromisesByCoordinates;

var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param layers 
 * @param { Object } opts
 * @param opts.coordinates
 * @param opts.feature_count
 * @param opts.query_point_tolerance
 * @param opts.multiLayers
 * @param opts.reproject
 *  
 * @returns { JQuery.Promise }
 */
function getQueryLayersPromisesByCoordinates(layers) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      coordinates = _ref.coordinates,
      _ref$feature_count = _ref.feature_count,
      feature_count = _ref$feature_count === undefined ? 10 : _ref$feature_count,
      _ref$query_point_tole = _ref.query_point_tolerance,
      query_point_tolerance = _ref$query_point_tole === undefined ? _constant.QUERY_POINT_TOLERANCE : _ref$query_point_tole,
      _ref$multilayers = _ref.multilayers,
      multilayers = _ref$multilayers === undefined ? false : _ref$multilayers,
      _ref$reproject = _ref.reproject,
      reproject = _ref$reproject === undefined ? true : _ref$reproject;

  var d = $.Deferred();

  /** If no layers*/
  if (0 === layers.length) {
    return d.resolve(layers);
  }

  var map = _gui2.default.getService('map').getMap();
  var size = map.getSize();
  var queryResponses = [];
  var queryErrors = [];
  var mapProjection = map.getView().getProjection();
  var resolution = map.getView().getResolution();

  // multilayers request
  if (multilayers) {
    (function () {
      var multiLayers = {};
      layers.forEach(function (layer) {
        var key = layer.getInfoFormat() + ':' + layer.getInfoUrl() + ':' + layer.getMultiLayerId();
        if (multiLayers[key]) {
          multiLayers[key].push(layer);
        } else {
          multiLayers[key] = [layer];
        }
      });
      var numberOfRequests = Object.keys(multiLayers).length;
      var layersLength = numberOfRequests;
      for (var key in multiLayers) {
        var _multilayer = multiLayers[key];
        var _layers = _multilayer;
        var multilayer = multiLayers[key][0];
        var provider = multilayer.getProvider('query');
        provider.query({
          feature_count: feature_count,
          coordinates: coordinates,
          query_point_tolerance: query_point_tolerance,
          mapProjection: mapProjection,
          reproject: reproject,
          resolution: resolution,
          size: size,
          layers: _layers
        }).then(function (response) {
          return queryResponses.push(response);
        }).fail(function (error) {
          return queryErrors.push(error);
        }).always(function () {
          layersLength -= 1;
          if (0 === layersLength) {
            queryErrors.length === numberOfRequests ? d.reject(queryErrors) : d.resolve(queryResponses);
          }
        });
      }
    })();
  } else {
    // single layers request
    var layersLength = layers.length;
    var rejectedResponses = 0;
    layers.forEach(function (layer) {
      layer.query({
        feature_count: feature_count,
        coordinates: coordinates,
        query_point_tolerance: query_point_tolerance,
        mapProjection: mapProjection,
        size: size,
        resolution: resolution
      }).then(function (response) {
        return queryResponses.push(response);
      }).fail(function (error) {
        queryErrors.push(error);rejectedResponses += 1;
      }).always(function () {
        layersLength -= 1;
        if (0 === layersLength) {
          rejectedResponses < layers.length ? d.resolve(queryResponses) : d.reject(queryErrors);
        }
      });
    });
  }

  return d.promise();
}

},{"app/constant":5,"services/gui":319}],407:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryLayersPromisesByGeometry = getQueryLayersPromisesByGeometry;

var _groupBy = require('utils/groupBy');

var Filter = require('core/layers/filter/filter');

/**
 * @param layers
 * @param { Object } opts
 * @param opts.multilayers
 * @param opts.bbox
 * @param opts.geometry
 * @param opts.projection
 * @param opts.feature_count
 * 
 * @returns { JQuery.Promise<any, any, any> }
 */
function getQueryLayersPromisesByGeometry(layers) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$multilayers = _ref.multilayers,
      multilayers = _ref$multilayers === undefined ? false : _ref$multilayers,
      geometry = _ref.geometry,
      _ref$filterConfig = _ref.filterConfig,
      filterConfig = _ref$filterConfig === undefined ? {} : _ref$filterConfig,
      projection = _ref.projection,
      _ref$feature_count = _ref.feature_count,
      feature_count = _ref$feature_count === undefined ? 10 : _ref$feature_count;

  var d = $.Deferred();
  var queryResponses = [];
  var queryErrors = [];
  var mapCrs = projection.getCode();
  var filter = new Filter(filterConfig);

  /** In case of no features  */
  if (0 === layers.length) {
    d.resolve([]);
  }

  /** Group query by layers instead single layer request  */
  if (multilayers) {
    (function () {
      var multiLayers = (0, _groupBy.groupBy)(layers, function (layer) {
        return layer.getMultiLayerId() + '_' + layer.getProjection().getCode();
      });
      var numberRequested = Object.keys(multiLayers).length;
      var layersLength = numberRequested;

      for (var key in multiLayers) {
        var _multilayer = multiLayers[key];
        var _layers = _multilayer;
        var multilayer = multiLayers[key][0];
        var provider = multilayer.getProvider('filter');
        var layerCrs = multilayer.getProjection().getCode();
        // Convert filter geometry from `mapCRS` to `layerCrs`
        filter.setGeometry(mapCrs === layerCrs ? geometry : geometry.clone().transform(mapCrs, layerCrs));
        provider.query({ filter: filter, layers: _layers, feature_count: feature_count }).then(function (response) {
          return queryResponses.push(response);
        }).fail(function (error) {
          return queryErrors.push(error);
        }).always(function () {
          layersLength -= 1;
          if (0 === layersLength) {
            queryErrors.length === numberRequested ? d.reject(queryErrors) : d.resolve(queryResponses);
          }
        });
      }
    })();
  } else {

    var layersLenght = layers.length;
    layers.forEach(function (layer) {
      var layerCrs = layer.getProjection().getCode();
      // Convert filter geometry from `mapCRS` to `layerCrs`
      filter.setGeometry(mapCrs === layerCrs ? geometry : geometry.clone().transform(mapCrs, layerCrs));
      layer.query({ filter: filter, filterConfig: filterConfig, feature_count: feature_count }).then(function (response) {
        return queryResponses.push(response);
      }).fail(function (error) {
        return queryErrors.push(error);
      }).always(function () {
        layersLenght -= 1;
        if (0 === layersLenght) {
          queryErrors.length === layers.length ? d.reject(queryErrors) : d.resolve(queryResponses);
        }
      });
    });
  }

  return d.promise();
}

},{"core/layers/filter/filter":15,"utils/groupBy":415}],408:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRandomColor = getRandomColor;
function getRandomColor() {
  return "#" + ((1 << 24) * Math.random() | 0).toString(16);
};

},{}],409:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getResolutionFromScale = getResolutionFromScale;

var _constant = require('constant');

function getResolutionFromScale(scale) {
  var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'm';

  var normScale = scale >= 1.0 ? 1.0 / scale : scale; // just to prevent that scale is passed as 1:10000 or 0.0001
  return 1 / (normScale * _constant.INCHES_PER_UNIT[units] * _constant.DOTS_PER_INCH);
};

},{"constant":5}],410:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScaleFromResolution = getScaleFromResolution;

var _constant = require('constant');

function getScaleFromResolution(resolution) {
  var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'm';

  return Math.round(resolution * _constant.INCHES_PER_UNIT[units] * _constant.DOTS_PER_INCH);
};

},{"constant":5}],411:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTimeoutPromise = getTimeoutPromise;

var _constant = require('app/constant');

/**
 * Method to set timeout
 * @param timeout
 * @param resolve
 * @param data
 * @returns {number}
 */
function getTimeoutPromise(_ref) {
  var _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? _constant.TIMEOUT : _ref$timeout,
      resolve = _ref.resolve,
      data = _ref.data;

  return setTimeout(function () {
    resolve(data);
  }, timeout);
};

},{"app/constant":5}],412:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUniqueDomId = getUniqueDomId;
var _uid = 0;

function getUniqueDomId() {
  return (_uid += 1) + "_" + Date.now();
};

},{}],413:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVertexLength = getVertexLength;

var _constant = require('app/constant');

/**
 * @param geometries
 * @returns { number } number of vertex of a feature
 */
function getVertexLength(geometry) {
  var vertexLength = 0;

  switch (geometry.getType()) {

    case _constant.GEOMETRY_TYPES.MULTIPOLYGON:
      geometry.getCoordinates().forEach(function (c) {
        c.forEach(function (c) {
          c.pop();
          c.forEach(function () {
            return vertexLength += 1;
          });
        });
      });
      break;

    case _constant.GEOMETRY_TYPES.POLYGON:
      geometry.getCoordinates().forEach(function (c) {
        c.pop();
        c.forEach(function () {
          return vertexLength += 1;
        });
      });
      break;

  }

  return vertexLength;
}

},{"app/constant":5}],414:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get_legend_params = get_legend_params;
/**
 * @param layer
 * 
 * @returns {{ LEGEND_ON: undefined | string, LEGEND_OFF: undefined | string }} 
 */
function get_legend_params(layer) {
  var LEGEND_ON = void 0,
      LEGEND_OFF = void 0;
  (layer.getCategories() || []).forEach(function (_ref) {
    var checked = _ref.checked,
        _checked = _ref._checked,
        ruleKey = _ref.ruleKey;

    // skip when there's no difference from original `checked` status (_checked) and current changed by toc categories (checked)
    if (checked === _checked) {
      return;
    }
    if (checked) {
      LEGEND_ON = (undefined === LEGEND_ON ? layer.getWMSLayerName() + ":" : LEGEND_ON + ",") + ruleKey;
    } else {
      LEGEND_OFF = (undefined === LEGEND_OFF ? layer.getWMSLayerName() + ":" : LEGEND_OFF + ",") + ruleKey;
    }
  });
  return {
    LEGEND_ON: LEGEND_ON,
    LEGEND_OFF: LEGEND_OFF
  };
};

},{}],415:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupBy = groupBy;
/**
 * Almost the same as lodash@v4.0.0 groupBy
 * 
 * @since 3.10.0
 */
function groupBy(array, keyFn) {
  return array.reduce(function (result, item) {
    var key = keyFn(item);
    if (!result[key]) {
      result[key] = [];
    }
    result[key].push(item);
    return result;
  }, {});
};

},{}],416:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleQueryResponse = handleQueryResponse;

var _parsers = require('utils/parsers');

/**
 * @param { Object } opts
 * @param opts.response
 * @param opts.projections
 * @param opts.layers
 * @param { boolean } opts.wms
 */
function handleQueryResponse() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      response = _ref.response,
      projections = _ref.projections,
      layers = _ref.layers,
      _ref$wms = _ref.wms,
      wms = _ref$wms === undefined ? true : _ref$wms;

  layers = layers ? layers : [this._layer];
  return _parsers.response.get(layers[0].getInfoFormat())({ response: response, projections: projections, layers: layers, wms: wms });
}

},{"utils/parsers":439}],417:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasOwn = hasOwn;
function hasOwn(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
};

},{}],418:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imageToDataURL = imageToDataURL;
function imageToDataURL(_ref) {
  var src = _ref.src,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'image/jpeg' : _ref$type,
      _ref$callback = _ref.callback,
      callback = _ref$callback === undefined ? function () {} : _ref$callback;

  var image = new Image();
  image.onload = function () {
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    canvas.height = this.naturalHeight;
    canvas.width = this.naturalWidth;
    context.drawImage(this, 0, 0);
    var dataURL = canvas.toDataURL(type);
    callback(dataURL);
  };
  image.src = src;
};

},{}],419:[function(require,module,exports){
var _getUniqueDomId = require('./getUniqueDomId');

var _basemixin = require('./basemixin');

var _mixin = require('./mixin');

var _merge = require('./merge');

var _hasOwn = require('./hasOwn');

var _inherit = require('./inherit');

var _base = require('./base');

var _resolve = require('./resolve');

var _reject = require('./reject');

var _getAjaxResponses = require('./getAjaxResponses');

var _trimValue = require('./trimValue');

var _isURL = require('./isURL');

var _sanitizeUrl = require('./sanitizeUrl');

var _convertObjectToUrlParams = require('./convertObjectToUrlParams');

var _appendParams = require('./appendParams');

var _imageToDataURL = require('./imageToDataURL');

var _capitalize_first_letter = require('./capitalize_first_letter');

var _Base = require('./Base64');

var _toRawType = require('./toRawType');

var _isEmptyObject = require('./isEmptyObject');

var _throttle = require('./throttle');

var _debounce = require('./debounce');

var _getRandomColor = require('./getRandomColor');

var _copyUrl = require('./copyUrl');

var _downloadFile = require('./downloadFile');

var _downloadCSVLayerFeatures = require('./downloadCSVLayerFeatures');

var _downloadCSV = require('./downloadCSV');

var _getTimeoutPromise = require('./getTimeoutPromise');

var _XHR = require('./XHR');

var _createSingleFieldParameter = require('./createSingleFieldParameter');

var _createFilterFormInputs = require('./createFilterFormInputs');

var _createFilterFromString = require('./createFilterFromString');

var _createFilterFormField = require('./createFilterFormField');

var _splitContextAndMethod = require('./splitContextAndMethod');

var _colorHEXToRGB = require('./colorHEXToRGB');

var _convertQGISDateTimeFormatToMoment = require('./convertQGISDateTimeFormatToMoment');

var _sortAlphabeticallyArray = require('./sortAlphabeticallyArray');

var _sortNumericArray = require('./sortNumericArray');

var _sameOrigin = require('./sameOrigin');

/**
 * Decimal adjustment of a number.
 *
 * @param {String}  type  The type of adjustment.
 * @param {Number}  value The number.
 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
 * @returns {Number} The adjusted value.
 */
function decimalAdjust(type, value, exp) {
  // If the exp is undefined or zero...
  if (typeof exp === 'undefined' || +exp === 0) return Math[type](value);
  value = +value;
  exp = +exp;
  // If the value is not a number or the exp is not an integer...
  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
    return NaN;
  }
  // Shift
  value = value.toString().split('e');
  value = Math[type](+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp)));
  // Shift back
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));
}

// Decimal round
/**
 * @file ORIGINAL SOURCE: src/app/core/utils/utils.js@3.8
 * 
 * @since 3.9.0
 */

if (!Math.round10) {
  /** @TODO deprecate (unusued code + bad practice) */
  Math.round10 = function (value, exp) {
    return decimalAdjust('round', value, exp);
  };
}
// Decimal floor
if (!Math.floor10) {
  /** @TODO deprecate (unusued code + bad practice) */
  Math.floor10 = function (value, exp) {
    return decimalAdjust('floor', value, exp);
  };
}

// Decimal ceil
if (!Math.ceil10) {
  /** @TODO deprecate (unusued code + bad practice) */
  Math.ceil10 = function (value, exp) {
    return decimalAdjust('ceil', value, exp);
  };
}

/** @TODO deprecate (unusued code + bad practice) */
String.prototype.hashCode = function () {
  var hash = 0,
      i = void 0,
      chr = void 0,
      len = void 0;
  if (this.length === 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr = this.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }
  return hash;
};

var utils = {
  getUniqueDomId: _getUniqueDomId.getUniqueDomId,
  uniqueId: _getUniqueDomId.getUniqueDomId,
  basemixin: _basemixin.basemixin,
  mixin: _mixin.mixin,
  merge: _merge.merge,
  hasOwn: _hasOwn.hasOwn,
  inherit: _inherit.inherit,
  base: _base.base,
  noop: function noop() {},
  truefnc: function truefnc() {
    return true;
  },

  /** @FIXME broken implementation, maybe unusued? */
  falsefnc: function falsefnc() {
    return true;
  },

  resolve: _resolve.resolve,
  reject: _reject.reject,
  /** @TODO remove if unusued */
  getValueFromG3WObjectEvent: function getValueFromG3WObjectEvent() {},

  getAjaxResponses: _getAjaxResponses.getAjaxResponses,
  trimValue: _trimValue.trimValue,
  isURL: _isURL.isURL,
  sanitizeUrl: _sanitizeUrl.sanitizeUrl,
  convertObjectToUrlParams: _convertObjectToUrlParams.convertObjectToUrlParams,
  appendParams: _appendParams.appendParams,
  imageToDataURL: _imageToDataURL.imageToDataURL,
  capitalize_first_letter: _capitalize_first_letter.capitalize_first_letter,
  Base64: _Base.Base64,
  toRawType: _toRawType.toRawType,
  isEmptyObject: _isEmptyObject.isEmptyObject,
  throttle: _throttle.throttle,
  debounce: _debounce.debounce,
  getRandomColor: _getRandomColor.getRandomColor,
  copyUrl: _copyUrl.copyUrl,
  downloadFile: _downloadFile.downloadFile,
  downloadCSVLayerFeatures: _downloadCSVLayerFeatures.downloadCSVLayerFeatures,
  downloadCSV: _downloadCSV.downloadCSV,
  getTimeoutPromise: _getTimeoutPromise.getTimeoutPromise,
  XHR: _XHR.XHR,
  /** @since 3.8.7 */
  createSingleFieldParameter: _createSingleFieldParameter.createSingleFieldParameter,
  createFilterFromString: _createFilterFromString.createFilterFromString,
  createFilterFormInputs: _createFilterFormInputs.createFilterFormInputs,
  createFilterFormField: _createFilterFormField.createFilterFormField,
  splitContextAndMethod: _splitContextAndMethod.splitContextAndMethod,
  colorHEXToRGB: _colorHEXToRGB.colorHEXToRGB,
  convertQGISDateTimeFormatToMoment: _convertQGISDateTimeFormatToMoment.convertQGISDateTimeFormatToMoment,
  /** @since 3.8.0 */
  sortAlphabeticallyArray: _sortAlphabeticallyArray.sortAlphabeticallyArray,
  /** @since 3.8.0 */
  sortNumericArray: _sortNumericArray.sortNumericArray,
  /** @since 3.8.0 */
  sameOrigin: _sameOrigin.sameOrigin
};

module.exports = utils;

},{"./Base64":336,"./XHR":337,"./appendParams":339,"./base":341,"./basemixin":342,"./capitalize_first_letter":343,"./colorHEXToRGB":345,"./convertObjectToUrlParams":351,"./convertQGISDateTimeFormatToMoment":352,"./copyUrl":356,"./createFilterFormField":361,"./createFilterFormInputs":362,"./createFilterFromString":363,"./createSingleFieldParameter":370,"./debounce":377,"./downloadCSV":380,"./downloadCSVLayerFeatures":381,"./downloadFile":382,"./getAjaxResponses":386,"./getRandomColor":408,"./getTimeoutPromise":411,"./getUniqueDomId":412,"./hasOwn":417,"./imageToDataURL":418,"./inherit":420,"./isEmptyObject":423,"./isURL":430,"./merge":431,"./mixin":433,"./reject":441,"./resolve":444,"./sameOrigin":446,"./sanitizeUrl":448,"./sortAlphabeticallyArray":451,"./sortNumericArray":452,"./splitContextAndMethod":453,"./throttle":458,"./toRawType":459,"./trimValue":463}],420:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inherit = inherit;
/**
 * google closure library impememtation
 */
function inherit(childCtor, parentCtor) {
  function tempCtor() {}
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor();
  childCtor.prototype.constructor = childCtor;
};

},{}],421:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intersects = intersects;
/**
 * Check if `geometryCheck` intersects with `geometry`
 * 
 * @param   {ol.geometry} geometry
 * @param   {ol.geometry} geometryToCheck
 * 
 * @returns {boolean}     whether `geometryToCheck` interesects `geometry`
 * 
 * @since 3.8.0
 */
function intersects(geometry, geometryToCheck) {
  var olFromJsts = new jsts.io.OL3Parser();
  return olFromJsts.read(geometry).intersects(olFromJsts.read(geometryToCheck));
}

},{}],422:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.is3DGeometry = is3DGeometry;

var _constant = require('app/constant');

function is3DGeometry(geometryType) {
  return [_constant.GEOMETRY_TYPES.POINTZ, _constant.GEOMETRY_TYPES.POINTM, _constant.GEOMETRY_TYPES.POINTZM, _constant.GEOMETRY_TYPES.POINT25D, _constant.GEOMETRY_TYPES.MULTIPOINTZ, _constant.GEOMETRY_TYPES.MULTIPOINTM, _constant.GEOMETRY_TYPES.MULTIPOINTZM, _constant.GEOMETRY_TYPES.MULTIPOINT25D, _constant.GEOMETRY_TYPES.LINESTRINGZ, _constant.GEOMETRY_TYPES.LINESTRINGM, _constant.GEOMETRY_TYPES.LINESTRINGZM, _constant.GEOMETRY_TYPES.LINESTRING25D, _constant.GEOMETRY_TYPES.MULTILINESTRINGZ, _constant.GEOMETRY_TYPES.MULTILINESTRINGM, _constant.GEOMETRY_TYPES.MULTILINESTRINGZM, _constant.GEOMETRY_TYPES.MULTILINESTRING25D, _constant.GEOMETRY_TYPES.LINEZ, _constant.GEOMETRY_TYPES.LINEM, _constant.GEOMETRY_TYPES.LINEZM, _constant.GEOMETRY_TYPES.LINE25D, _constant.GEOMETRY_TYPES.MULTILINEZ, _constant.GEOMETRY_TYPES.MULTILINEM, _constant.GEOMETRY_TYPES.MULTILINEZM, _constant.GEOMETRY_TYPES.MULTILINE25D, _constant.GEOMETRY_TYPES.POLYGONZ, _constant.GEOMETRY_TYPES.POLYGONM, _constant.GEOMETRY_TYPES.POLYGONZM, _constant.GEOMETRY_TYPES.POLYGON25D, _constant.GEOMETRY_TYPES.MULTIPOLYGONZ, _constant.GEOMETRY_TYPES.MULTIPOLYGONM, _constant.GEOMETRY_TYPES.MULTIPOLYGONZM, _constant.GEOMETRY_TYPES.MULTIPOLYGON25D].find(function (type3D) {
    return type3D === geometryType;
  });
}

},{"app/constant":5}],423:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEmptyObject = isEmptyObject;
function isEmptyObject(obj) {
  return JSON.stringify(obj) === '{}';
};

},{}],424:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLineGeometryType = isLineGeometryType;

var _getAllLineGeometryTypes = require('utils/getAllLineGeometryTypes');

/**
 * core/geometry/geometry::isLineGeometryType@v3.4
 */
function isLineGeometryType(geometryType) {
  return -1 !== (0, _getAllLineGeometryTypes.getAllLineGeometryTypes)().indexOf(geometryType);
}

},{"utils/getAllLineGeometryTypes":387}],425:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMultiGeometry = isMultiGeometry;

var _constant = require('app/constant');

/**
 * core/geometry/geometry::isMultiGeometry@v3.4
 */
function isMultiGeometry(geometryType) {
  return -1 !== [_constant.GEOMETRY_TYPES.MULTIPOINT, _constant.GEOMETRY_TYPES.MULTIPOINTZ, _constant.GEOMETRY_TYPES.MULTIPOINTZM, _constant.GEOMETRY_TYPES.MULTIPOINTM, _constant.GEOMETRY_TYPES.MULTIPOINT25D, _constant.GEOMETRY_TYPES.MULTILINESTRING, _constant.GEOMETRY_TYPES.MULTILINESTRINGZ, _constant.GEOMETRY_TYPES.MULTILINESTRINGM, _constant.GEOMETRY_TYPES.MULTILINESTRINGZM, _constant.GEOMETRY_TYPES.MULTILINESTRING25D, _constant.GEOMETRY_TYPES.MULTILINE, _constant.GEOMETRY_TYPES.MULTILINEZ, _constant.GEOMETRY_TYPES.MULTILINEM, _constant.GEOMETRY_TYPES.MULTILINEZM, _constant.GEOMETRY_TYPES.MULTILINE25D, _constant.GEOMETRY_TYPES.MULTIPOLYGON, _constant.GEOMETRY_TYPES.MULTIPOLYGONZ, _constant.GEOMETRY_TYPES.MULTIPOLYGONM, _constant.GEOMETRY_TYPES.MULTIPOLYGONZM, _constant.GEOMETRY_TYPES.MULTIPOLYGON25D].indexOf(geometryType);
}

},{"app/constant":5}],426:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPointGeometryType = isPointGeometryType;

var _getAllPointGeometryTypes = require('utils/getAllPointGeometryTypes');

/**
 * core/geometry/geometry::isPointGeometryType@v3.4
 */
function isPointGeometryType(geometryType) {
  return -1 !== (0, _getAllPointGeometryTypes.getAllPointGeometryTypes)().indexOf(geometryType);
}

},{"utils/getAllPointGeometryTypes":388}],427:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPolygonGeometryType = isPolygonGeometryType;

var _getAllPolygonGeometryTypes = require('utils/getAllPolygonGeometryTypes');

/**
 * core/geometry/geometry::isPolygonGeometryType@v3.4
 */
function isPolygonGeometryType(geometryType) {
  return -1 !== (0, _getAllPolygonGeometryTypes.getAllPolygonGeometryTypes)().indexOf(geometryType);
}

},{"utils/getAllPolygonGeometryTypes":389}],428:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSameBaseGeometryType = isSameBaseGeometryType;
/**
 * @param { string } geometryType1
 * @param { string } geometryType2
 *  
 * @returns { boolean } whether two geometry typeshave same geometry type or have in common tha same base geometry type:
 * 
 * @example Compare 
 * ```
 *  Point      <--> Point   => true
 *  MultiPoint <--> Point   => true
 *  Point      <--> Polygon => false
 * ```
 */
function isSameBaseGeometryType(geometryType1, geometryType2) {
  return geometryType1.replace('Multi', '') === geometryType2.replace('Multi', '');
}

},{}],429:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSingleGeometry = isSingleGeometry;

var _isMultiGeometry = require('utils/isMultiGeometry');

function isSingleGeometry(geometry) {
  return !(0, _isMultiGeometry.isMultiGeometry)(geometry.getType());
}

},{"utils/isMultiGeometry":425}],430:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isURL = isURL;
/**
 * Check if is a url
 * 
 * @param url
 * @returns {boolean}
 */
function isURL(url) {
  return url && url.match(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/g);
};

},{}],431:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.merge = merge;

var _hasOwn = require('./hasOwn');

function merge(destination, source) {
  for (var key in source) {
    if ((0, _hasOwn.hasOwn)(source, key)) {
      destination[key] = source[key];
    }
  }
};

},{"./hasOwn":417}],432:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.mergeOptions = mergeOptions;
function mergeOptions(obj1, obj2) {
  return _extends({}, obj1, obj2);
};

},{}],433:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mixin = mixin;

var _merge = require('./merge');

function mixin(destination, source) {
  var sourceInstance = new source();
  (0, _merge.merge)(destination, sourceInstance);
  (0, _merge.merge)(destination.prototype, source.prototype);
}

},{"./merge":431}],434:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiGeometryToSingleGeometries = multiGeometryToSingleGeometries;

var _constant = require('app/constant');

/**
 * @param geometry
 * 
 * @returns { Array } geometries
 */
function multiGeometryToSingleGeometries(geometry) {
  switch (geometry.getType()) {
    case _constant.GEOMETRY_TYPES.MULTIPOLYGON:
      return geometry.getPolygons();
    case _constant.GEOMETRY_TYPES.MULTILINE:
      return geometry.getLineStrings();
    case _constant.GEOMETRY_TYPES.MULTILINESTRING:
      return geometry.getLineStrings();
    case _constant.GEOMETRY_TYPES.MULTIPOINT:
      return geometry.getPoints();
    default:
      console.warn('invalid geometry type', geometry.getType());
  }
  return [];
}

},{"app/constant":5}],435:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.needUseSphereMethods = needUseSphereMethods;
/**
 * @param projection
 * 
 * @returns { boolean } 
 */
function needUseSphereMethods(projection) {
  return 'EPSG:3857' === projection.getCode() || 'degrees' === projection.getUnits();
  //return projection.getUnits() === 'degrees';
};

},{}],436:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeEpsg = normalizeEpsg;
/**
 * @param { number | string } epsg
 * 
 * @returns { string | undefined }
 */
function normalizeEpsg(epsg) {
  if ('number' === typeof epsg) {
    return 'EPSG:' + epsg;
  }
  epsg = epsg.replace(/[^\d\.\-]/g, "");
  if ('' !== epsg) {
    return 'EPSG:' + parseInt(epsg);
  }
}

},{}],437:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseAttributes = parseAttributes;

var _constant = require('app/constant');

/**
 * @param layerAttributes
 * @param featureAttributes
 * 
 * @returns { Array }
 */
function parseAttributes() {
  var layerAttributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var featureAttributes = arguments[1];

  /** @FIXME add description */
  if (layerAttributes && layerAttributes.length > 0) {
    return layerAttributes.filter(function (attr) {
      return Object.keys(featureAttributes).indexOf(attr.name) > -1;
    });
  }
  return Object.keys(featureAttributes).filter(function (name) {
    return -1 === _constant.GEOMETRY_FIELDS.indexOf(name);
  }).map(function (featureAttributesName) {
    return { name: featureAttributesName, label: featureAttributesName };
  });
}

},{"app/constant":5}],438:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseQueryLayersPromiseResponses = parseQueryLayersPromiseResponses;
/**
 * @param responses 
 * 
 * @returns {{ query: * | null, data: Array }}
 */
function parseQueryLayersPromiseResponses(responses) {
  return {
    query: responses[0] ? responses[0].query : null,
    data: responses.flatMap(function (r) {
      return r.data || [];
    })
  };
}

},{}],439:[function(require,module,exports){
var _constant = require('app/constant');

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _is3DGeometry = require('utils/is3DGeometry');

var _removeZValueToOLFeatureGeometry = require('utils/removeZValueToOLFeatureGeometry');

var _sanitizeFidFeature = require('utils/sanitizeFidFeature');

var _reverseGeometry = require('utils/reverseGeometry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * @file ORIGINAL SOURCE: src/app/core/utils/parsers.js@3.8
                                                                                                                                                                                                                   * 
                                                                                                                                                                                                                   * @since 3.9.0
                                                                                                                                                                                                                   */

var _require = require('utils'),
    toRawType = _require.toRawType;

var Feature = require('core/layers/features/feature');

var _require2 = require('core/i18n/i18n.service'),
    t = _require2.t;

var WORD_NUMERIC_FIELD_ESCAPE = 'GIS3W_ESCAPE_NUMERIC_FIELD_';

/**
 * Response parser (internal utilities)
 */
var utils = {
  getHandledResponsesFromResponse: function getHandledResponsesFromResponse(_ref) {
    var _this = this;

    var response = _ref.response,
        layers = _ref.layers,
        projections = _ref.projections,
        _ref$id = _ref.id,
        id = _ref$id === undefined ? false : _ref$id;

    var multilayers = false;
    var x2js = new X2JS();
    var jsonresponse = x2js.xml_str2json(response);
    // in case of parser return null
    if (!jsonresponse) return [{
      layer: layers[0],
      features: []
    }];
    /** @since v3.9.1 ServiceExceptionReport is an attribute of json response from server in case of error */
    var FeatureCollection = jsonresponse.FeatureCollection,
        ServiceExceptionReport = jsonresponse.ServiceExceptionReport;

    var handledResponses = [];
    if (FeatureCollection && FeatureCollection.featureMember) {
      var originalFeatureMember = Array.isArray(FeatureCollection.featureMember) ? FeatureCollection.featureMember : [FeatureCollection.featureMember];

      var _loop = function _loop(i) {
        var layer = layers[i];
        var layerName = id ? layer.getId() : 'layer' + i;
        var featureMemberArrayAndPrefix = {
          features: null,
          __prefix: null
        };
        jsonresponse.FeatureCollection.featureMember = originalFeatureMember.filter(function (feature) {
          var featureMember = feature[layerName];
          if (featureMember) {
            featureMember.g3w_fid = {
              __prefix: feature.__prefix,
              __text: featureMember._fid && featureMember._fid.split('.')[1]
            };
            if (Array.isArray(featureMember)) {
              featureMemberArrayAndPrefix.features = featureMember;
              featureMemberArrayAndPrefix.__prefix = feature.__prefix;
              return false;
            }
            return true;
          }
        });
        if (featureMemberArrayAndPrefix.features) {
          var prefix = featureMemberArrayAndPrefix.__prefix;
          // check if features have the same fields. If not group the features with the same fields
          var groupFeatures = _this.groupFeaturesByFields(featureMemberArrayAndPrefix.features);
          //check if features have different fields (multilayers)
          if (Object.keys(groupFeatures).length > 1) {
            // is a multilayers. Each feature has different fields
            multilayers = true;
            _this.handleWMSMultiLayersResponseFromQGISSERVER({
              groupFeatures: groupFeatures,
              prefix: prefix,
              handledResponses: handledResponses,
              jsonresponse: jsonresponse,
              layer: layer,
              projections: projections
            });
          } else {
            featureMemberArrayAndPrefix.features.forEach(function (feature) {
              var _jsonresponse$Feature;

              //for Each element have to add and object contain layerName and information, and __prefix
              jsonresponse.FeatureCollection.featureMember.push((_jsonresponse$Feature = {}, _defineProperty(_jsonresponse$Feature, layerName, feature), _defineProperty(_jsonresponse$Feature, '__prefix', prefix), _jsonresponse$Feature));
            });
          }
        }
        if (!multilayers) {
          var handledResponse = _this.parseLayerFeatureCollection({
            jsonresponse: jsonresponse,
            layer: layer,
            projections: projections
          });
          handledResponse && handledResponses.unshift(handledResponse[0]);
        }
      };

      for (var i = 0; i < layers.length; i++) {
        _loop(i);
      }
    }
    // in case of ServiceExceptionReport
    if (ServiceExceptionReport && ServiceExceptionReport.ServiceException) {
      _gui2.default.showUserMessage({
        type: 'warning',
        textMessage: true,
        message: layers[0].getName() + ' - ' + ServiceExceptionReport.ServiceException
      });
    }
    return handledResponses;
  },
  transformFeatures: function transformFeatures(features, projections) {
    if (features.length) {
      if (!!features[0].getGeometry()) {
        var mainProjection = projections.layer ? projections.layer : projections.map;
        var invertedAxis = mainProjection.getAxisOrientation().substr(0, 2) === 'ne';
        if (projections.layer && projections.layer.getCode() !== projections.map.getCode()) {
          features.forEach(function (feature) {
            var geometry = feature.getGeometry();
            feature.setGeometry(geometry.transform(projections.layer.getCode(), projections.map.getCode()));
          });
        }
        if (invertedAxis) features = this.reverseFeaturesCoordinates(features);
      }
    }
    return features;
  },
  parseLayerFeatureCollection: function parseLayerFeatureCollection(_ref2) {
    var _this2 = this;

    var jsonresponse = _ref2.jsonresponse,
        layer = _ref2.layer,
        projections = _ref2.projections;

    var x2js = new X2JS();
    var layerFeatureCollectionXML = x2js.json2xml_str(jsonresponse);
    var parser = new ol.format.WMSGetFeatureInfo();
    var features = this.transformFeatures(parser.readFeatures(layerFeatureCollectionXML), projections);
    if (layer.isGeoLayer()) {
      var geometryType = layer.getGeometryType();

      // Need to remove Z values due a incorrect addition when using
      // ol.format.WMSGetFeatureInfo readFeatures method from XML
      // (eg. WMS getFeatureInfo);
      if (!(0, _is3DGeometry.is3DGeometry)(geometryType)) {
        features.forEach(function (feature) {
          return (0, _removeZValueToOLFeatureGeometry.removeZValueToOLFeatureGeometry)({ feature: feature });
        });
      }
    }

    if (features.length && this.hasFieldsStartWithNotPermittedKey) {
      var properties = Object.keys(features[0].getProperties());
      var numericFields = properties.filter(function (property) {
        return property.indexOf(WORD_NUMERIC_FIELD_ESCAPE) !== -1;
      });
      features.forEach(function (feature) {
        numericFields.forEach(function (_field) {
          var value = feature.get(_field);
          var ori_field = _field.replace(WORD_NUMERIC_FIELD_ESCAPE, '');
          feature.set(_this2.hasFieldsStartWithNotPermittedKey[ori_field], Array.isArray(value) ? value[0] : value);
          feature.unset(_field);
        });
      });
    }
    return [{
      layer: layer,
      features: features
    }];
  },
  reverseFeaturesCoordinates: function reverseFeaturesCoordinates(features) {
    features.forEach(function (feature) {
      var geometry = feature.getGeometry();
      feature.setGeometry((0, _reverseGeometry.reverseGeometry)(geometry));
    });
    return features;
  },
  handleXMLStringResponseBeforeConvertToJSON: function handleXMLStringResponseBeforeConvertToJSON() {
    var _this3 = this;

    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        response = _ref3.response,
        layers = _ref3.layers,
        wms = _ref3.wms;

    if (!response) return; // return undefined if no response
    if (!(typeof response === 'string' || response instanceof String)) {
      response = new XMLSerializer().serializeToString(response);
    }
    for (var i = 0; i < layers.length; i++) {
      var _layer = layers[i];
      var originalName = wms && _layer.isWmsUseLayerIds() ? _layer.getId() : _layer.getName();
      var sanitizeLayerName = wms ? originalName.replace(/[/\s]/g, '') : originalName.replace(/\s/g, '_');
      sanitizeLayerName = sanitizeLayerName.replace(/(\'+)/, '');
      sanitizeLayerName = sanitizeLayerName.replace(/(\)+)/, '');
      sanitizeLayerName = sanitizeLayerName.replace(/(\(+)/, '');
      sanitizeLayerName = wms ? sanitizeLayerName : sanitizeLayerName.replace(/\//g, '');
      sanitizeLayerName = wms ? sanitizeLayerName : sanitizeLayerName.replace(/\\/g, '');
      sanitizeLayerName = wms ? sanitizeLayerName : sanitizeLayerName.replace(/\:/g, '-');

      var reg = new RegExp('qgs:' + sanitizeLayerName, "g");
      response = response.replace(reg, 'qgs:layer' + i);
    }
    // add match numeric value integer or float
    var arrayQGS = [].concat(_toConsumableArray(response.matchAll(/qgs:(\d+(?:\.\d+)?)(\w+)/g)), _toConsumableArray(response.matchAll(/qgs:(\w+):(\w+)/g)));
    arrayQGS.forEach(function (find, idx) {
      if (idx % 2 === 0) {
        if (!_this3.hasFieldsStartWithNotPermittedKey) _this3.hasFieldsStartWithNotPermittedKey = {};
        var originalField = find[0].replace('qgs:', '');
        _this3.hasFieldsStartWithNotPermittedKey['' + find[1] + find[2]] = originalField;
        var regex = new RegExp('' + find[0], "g");
        response = response.replace(regex, 'qgs:' + WORD_NUMERIC_FIELD_ESCAPE + find[1] + find[2]);
      }
    });
    //PATCH id strange
    var strangeChar = new RegExp('' + String.fromCharCode(0), "g");
    response = response.replace(strangeChar, '0');
    ///
    return response;
  },
  groupFeaturesByFields: function groupFeaturesByFields(features) {
    return _.groupBy(features, function (feature) {
      return Object.keys(feature);
    });
  },
  handleWMSMultiLayersResponseFromQGISSERVER: function handleWMSMultiLayersResponseFromQGISSERVER() {
    var _this4 = this;

    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        groupFeatures = _ref4.groupFeatures,
        prefix = _ref4.prefix,
        handledResponses = _ref4.handledResponses,
        jsonresponse = _ref4.jsonresponse,
        layer = _ref4.layer,
        projections = _ref4.projections;

    // is a multilayers. Each feature has different fields. If group has more that one feature spit it and create single features
    Object.keys(groupFeatures).forEach(function (key, index) {
      var features = groupFeatures[key];
      features.forEach(function (feature, sub_index) {
        var _jsonresponse$Feature2;

        jsonresponse.FeatureCollection.featureMember = (_jsonresponse$Feature2 = {}, _defineProperty(_jsonresponse$Feature2, 'layer' + index + '_' + sub_index, feature), _defineProperty(_jsonresponse$Feature2, '__prefix', prefix), _jsonresponse$Feature2);
        var handledResponse = _this4.parseLayerFeatureCollection({
          jsonresponse: jsonresponse,
          layer: layer,
          projections: projections
        });
        if (handledResponse) {
          var response = handledResponse[0];
          response.layer = layer;
          handledResponses.unshift(response);
        }
      });
    });
  }
};

/**
 * Response parser (content types)
 */
var contenttypes = {
  'application/json': function applicationJson() {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$layers = _ref5.layers,
        layers = _ref5$layers === undefined ? [] : _ref5$layers,
        response = _ref5.response,
        projections = _ref5.projections,
        _ref5$wms = _ref5.wms,
        wms = _ref5$wms === undefined ? true : _ref5$wms;

    var layersFeatures = [];
    var layersId = layers.map(function (layer) {
      layersFeatures.push({
        layer: layer,
        features: []
      });
      return wms ? layer.getWMSLayerName() : layer.getWFSLayerName();
    });
    var data = response;
    var parseData = function parseData() {
      var defaultDataProjection = projections.layer || projections.map;
      var geojson = new ol.format.GeoJSON({
        defaultDataProjection: defaultDataProjection,
        geometryName: "geometry"
      });
      return geojson.readFeatures(data);
    };
    var features = data && parseData();
    features.filter(function (feature) {
      var featureId = feature.getId();
      var g3w_fid = (0, _sanitizeFidFeature.sanitizeFidFeature)(featureId);
      // in case of wms getfeature without filter return string contain layerName or layerid
      var index = featureId == g3w_fid ? 0 : layersId.indexOf(featureId);
      if (index !== -1) {
        var fields = layersFeatures[index].layer.getFields().filter(function (field) {
          return field.show;
        });
        var properties = feature.getProperties();
        feature.set(_constant.G3W_FID, g3w_fid);
        fields.forEach(function (field) {
          if (properties[field.name] === undefined) {
            properties[field.label] !== undefined && feature.set(field.name, properties[field.label]);
          }
        });
        layersFeatures[index].features.push(feature);
      }
    });
    return layersFeatures;
  },
  'application/geojson': function applicationGeojson() {
    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layers = _ref6.layers,
        projections = _ref6.projections,
        response = _ref6.response;

    var handleResponse = [];
    var parserGEOJson = Parsers.vector.get({
      type: 'geojson'
    });
    if (response) {
      layers.forEach(function (layer) {
        handleResponse.push({
          layer: layer,
          features: parserGEOJson(response, {})
        });
      });
    }
    return handleResponse;
  },
  'text/html': function textHtml() {
    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layers = _ref7.layers,
        response = _ref7.response;

    var handleResponse = [];
    layers.forEach(function (layer) {
      handleResponse.push({
        layer: layer,
        rawdata: response
      });
    });
    return handleResponse;
  },
  'text/plain': function textPlain() {
    var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layers = _ref8.layers,
        response = _ref8.response;

    var handleResponse = [];
    layers.forEach(function (layer) {
      handleResponse.push({
        layer: layer,
        rawdata: response
      });
    });
    return handleResponse;
  },
  'text/gml': function textGml(_ref9) {
    var layers = _ref9.layers,
        response = _ref9.response;

    var parserGML = Parsers.vector.get({
      type: 'gml'
    });
    var features = parserGML({
      data: response,
      layer: layers[0]
    });
    return layers.map(function (layer) {
      return {
        layer: layer,
        features: features
      };
    });
  },
  'application/vnd.ogc.gml': function applicationVndOgcGml() {
    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        response = _ref10.response,
        projections = _ref10.projections,
        layers = _ref10.layers,
        _ref10$wms = _ref10.wms,
        wms = _ref10$wms === undefined ? true : _ref10$wms;

    return utils.getHandledResponsesFromResponse({
      response: utils.handleXMLStringResponseBeforeConvertToJSON({
        layers: layers,
        response: response,
        wms: wms
      }),
      layers: layers,
      projections: projections
    });
  },
  not_supported_format: function not_supported_format() {
    var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref11$layers = _ref11.layers,
        layers = _ref11$layers === undefined ? [] : _ref11$layers;

    return layers.map(function (layer) {
      return {
        layer: layer,
        rawdata: t('warning.not_supported_format')
      };
    });
  }
};

/**
 * Vector parser
 */
var VectorParser = function VectorParser() {
  // return the right parser for the request
  this.get = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var type = options.type;
    var parser = void 0;
    switch (type) {
      case 'geojson':
      case 'json':
        parser = this._parseLayerGeoJSON;
        break;
      case 'gml':
        parser = this._parseLayermsGMLOutput;
        break;
      default:
        parser = this._parseLayerGeoJSON;
    }
    return parser;
  };
  this._parseLayermsGMLOutput = function (_ref12) {
    var data = _ref12.data,
        layer = _ref12.layer;

    try {
      var gml = void 0;
      // to extract gml from multiple (Tuscany region)
      if (data.substr(0, 2) !== '--') gml = data;else {
        var gmlTag1 = new RegExp("<([^ ]*)FeatureCollection");
        var gmlTag2 = new RegExp("<([^ ]*)msGMLOutput");
        var boundary = '\r\n--';
        var parts = data.split(new RegExp(boundary));
        parts.forEach(function (part) {
          var isGmlPart = part.search(gmlTag1) > -1 ? true : part.search(gmlTag2) > -1 ? true : false;
          if (isGmlPart) {
            gml = part.substr(part.indexOf("<?xml"));
          }
        });
      }
      var layers = layer.getQueryLayerOrigName();
      var parser = new ol.format.WMSGetFeatureInfo({
        layers: layers
      });
      return parser.readFeatures(gml);
    } catch (err) {
      return [];
    }
  };

  this._parseLayerGeoJSON = function (data, options) {
    try {
      data = toRawType(data) === 'String' ? JSON.parse(data) : data;
      var crs = options.crs,
          mapCrs = options.mapCrs;

      var geojson = new ol.format.GeoJSON({
        dataProjection: crs,
        featureProjection: mapCrs || crs,
        geometryName: "geometry"
      });
      return geojson.readFeatures(data);
    } catch (err) {
      return [];
    }
  };
};

/**
 * Table parser
 */
var TableParser = function TableParser() {
  this.get = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var type = options.type;
    var parser = void 0;
    switch (type) {
      case 'json':
        parser = this._parserJSON.bind(this);
        break;
      default:
        parser = this._parserJSON.bind(this);
    }
    return parser;
  };

  this._parserJSON = function () {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _data$features = data.features,
        features = _data$features === undefined ? [] : _data$features;

    return features.map(function (_feature) {
      var id = _feature.id,
          properties = _feature.properties;

      var feature = new Feature();
      feature.setProperties(properties);
      feature.setId(id);
      return feature;
    });
  };
};

var Parsers = {
  vector: new VectorParser(),
  table: new TableParser(),
  /**
   * @TODO wrap within dedicated class (ie. new ResponseParser())
   */
  response: {
    get: function get(type) {
      return contenttypes[type] || contenttypes.not_supported_format;
    },

    utils: {
      getTimeoutData: function getTimeoutData() {
        var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        return layers.map(function (layer) {
          return {
            layer: layer,
            rawdata: 'timeout'
          };
        });
      }
    }
  }
};

module.exports = Parsers;

},{"app/constant":5,"core/i18n/i18n.service":9,"core/layers/features/feature":11,"services/gui":319,"utils":419,"utils/is3DGeometry":422,"utils/removeZValueToOLFeatureGeometry":443,"utils/reverseGeometry":445,"utils/sanitizeFidFeature":447}],440:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prompt = undefined;

/**
 * @TODO make it simpler (native HTML dialogs, Vue SFC components, ..)
 * 
 * Similar to `window.prompt`
 * 
 * @since 3.9.0
 */
var prompt = exports.prompt = function () {
  var _ref2 = _asyncToGenerator(function* (_ref) {
    var value = _ref.value,
        label = _ref.label,
        callback = _ref.callback;


    // Reactive vue object (input instance)
    var _data = {
      value: value,
      id: (0, _getUniqueDomId.getUniqueDomId)()
    };

    var vueInput = new Vue({
      template: '\n      <div>\n        <label :for="id">' + label + '</label>\n        <input\n          v-model      = "value"\n          :id          = "id"\n          class        = "bootbox-input bootbox-input-text form-control"\n          autocomplete = "off"\n          type         = "text"\n        >\n      </div>',
      data: function data() {
        return _data;
      }
    });

    var prompt = void 0; // store dialog modal window

    new Promise(function (resolve, reject) {
      // modal window with input name
      prompt = _gui2.default.showModalDialog({
        message: vueInput.$mount().$el,
        closeButton: false,
        buttons: {
          ok: { label: 'Ok', className: 'btn-success', callback: function callback() {
              return resolve(_data.value);
            } },
          cancel: { label: 'Cancel', className: 'btn-danger', callback: function callback() {
              return reject();
            } }
        }
      });
      // conditionally disable confirm button (based on input value)
      var okBtn = prompt.find('button.btn-success');
      okBtn.prop('disabled', 0 === _data.value.trim().length);
      vueInput.$watch('value', function (value) {
        okBtn.prop('disabled', 0 === value.trim().length);
      });
    }).then(callback).finally(function () {
      vueInput.$destroy();
      vueInput = null;
      _data = null;
      prompt = null;
    });
  });

  return function prompt(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _gui = require('services/gui');

var _gui2 = _interopRequireDefault(_gui);

var _getUniqueDomId = require('./getUniqueDomId');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

;

},{"./getUniqueDomId":412,"services/gui":319}],441:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reject = reject;
function reject(value) {
  var d = $.Deferred();
  d.reject(value);
  return d.promise();
};

},{}],442:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeMeasureTooltip = removeMeasureTooltip;
/**
 * Remove mesure tootltip
 * 
 * @param { Object } opts
 * @param opts.map
 * @param opts.tooltip
 * @param opts.unByKey 
 */
function removeMeasureTooltip(_ref) {
  var map = _ref.map,
      tooltip = _ref.tooltip,
      unbyKey = _ref.unbyKey;

  map.removeOverlay(tooltip);
  ol.Observable.unByKey(unbyKey);
}

},{}],443:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeZValueToOLFeatureGeometry = removeZValueToOLFeatureGeometry;

var _constant = require('app/constant');

/**
 * Remove Z values from geometry coordinates
 */
function removeZValueToOLFeatureGeometry() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      feature = _ref.feature;

  var geometry = feature.getGeometry();

  // skip when feature has no geometry (alphanumerical feature)
  if (!geometry) {
    return feature;
  }

  var coords = geometry.getCoordinates();

  switch (geometry.getType()) {

    // POINT: [x, y]
    case _constant.GEOMETRY_TYPES.POINT:
      if (3 === coords.length) {
        coords.splice(2);
        feature.getGeometry().setCoordinates(coords);
      }
      break;

    // MULTIPOINT: [ [x1, y1], [x2, y2] ]
    case _constant.GEOMETRY_TYPES.MULTIPOINT:
    // LINE: [ [x1, y1], [x2, y2] ]
    case _constant.GEOMETRY_TYPES.LINESTRING:
    case _constant.GEOMETRY_TYPES.LINE:
      coords.forEach(function (c) {
        return c.splice(2);
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    // MULTILINE: [
    //   [ [x1, y1], [x2, y2] ],
    //   [ [x3, y3], [x4, y4] ]
    // ]
    case _constant.GEOMETRY_TYPES.MULTILINESTRING:
    case _constant.GEOMETRY_TYPES.MULTILINE:
      coords.forEach(function (line) {
        return line.forEach(function (c) {
          return c.splice(2);
        });
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    // POLYGON: [
    //   [ [x1, y1], [x2, y2], [x3, y3], [x1, y1] ]
    // ]
    case _constant.GEOMETRY_TYPES.POLYGON:
      coords[0].forEach(function (c) {
        return c.splice(2);
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    // MULTIPOLYGON:[
    //   [ [x1, y1], [x2, y2], [x3, y3], [x1, y1] ],
    //   [ [xa, ya], [xb, yb], [xc, yc], [xa, ya] ]
    // ]
    case _constant.GEOMETRY_TYPES.MULTIPOLYGON:
      coords.forEach(function (poly) {
        return poly[0].forEach(function (c) {
          return c.splice(2);
        });
      });
      feature.getGeometry().setCoordinates(coords);
      break;

    default:
      console.warn('unsupported geometry type: ' + geometry.getType());

  }

  return feature;
};

},{"app/constant":5}],444:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolve = resolve;
function resolve(value) {
  var d = $.Deferred();
  d.resolve(value);
  return d.promise();
};

},{}],445:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.reverseGeometry = reverseGeometry;
/**
 * @param geometry 
 */
function reverseGeometry(geometry) {
  geometry.setCoordinates(_reverseCoords(geometry.getCoordinates()));
  return geometry;
};

function _reverseCoords(c) {
  c.find(function (c) {
    if (!Array.isArray(c)) {
      var _c = _slicedToArray(c, 2),
          y = _c[0],
          x = _c[1];

      c[0] = x;c[1] = y;
      return true;
    }
    _reverseCoords(c);
  });
  return c;
}

},{}],446:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sameOrigin = sameOrigin;
/**
 * @param {string} url1
 * @param {string} url2
 *
 * @returns {boolean} whether URLs have same origin.
 *
 * @since 3.8.0
 */
function sameOrigin(url1, url2) {
  try {
    return new URL(url1).origin === new URL(url2).origin;
  } catch (err) {
    return false;
  }
};

},{}],447:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeFidFeature = sanitizeFidFeature;

var _toRawType = require('utils/toRawType');

function sanitizeFidFeature(fid) {
  if ('String' === (0, _toRawType.toRawType)(fid) && Number.isNaN(1 * fid)) {
    fid = fid.split('.');
    fid = 2 === fid.length ? fid[1] : fid[0];
  }
  return fid;
}

},{"utils/toRawType":459}],448:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeUrl = sanitizeUrl;
function sanitizeUrl() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      url = _ref.url,
      _ref$reserverParamete = _ref.reserverParameters,
      reserverParameters = _ref$reserverParamete === undefined ? [] : _ref$reserverParamete;

  var checkUrl = new URL(url);
  reserverParameters.forEach(function (param) {
    var _params = [param.toUpperCase(), param.toLowerCase()];
    for (var i = 0; i < 2; i++) {
      var _param = _params[i];
      var _value = checkUrl.searchParams.get(_param);
      if (_value) {
        url = url.replace(_param + '=' + _value, '');
        break;
      }
    }
  });
  return url;
};

},{}],449:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setMeasureTooltipStatic = setMeasureTooltipStatic;
/**
 * @param tooltip 
 */
function setMeasureTooltipStatic(tooltip) {
  tooltip.getElement().className = 'mtooltip mtooltip-static';
  tooltip.setOffset([0, -7]);
}

},{}],450:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleGeometriesToMultiGeometry = singleGeometriesToMultiGeometry;
/**
 * @param { Array } geometries 
 */
function singleGeometriesToMultiGeometry() {
  var geometries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var geometryType = geometries[0] && geometries[0].getType();
  return geometryType && new ol.geom["Multi" + geometryType](geometries.map(function (geometry) {
    return geometry.getCoordinates();
  }));
}

},{}],451:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortAlphabeticallyArray = sortAlphabeticallyArray;
/**
 * Sort an array of strings (alphabetical order)
 * 
 * @since 3.8.0
 */
function sortAlphabeticallyArray(arr) {
  return arr.sort(function (a, b) {
    return a.localeCompare(b, undefined, { sensitivity: 'base' });
  });
};

},{}],452:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortNumericArray = sortNumericArray;
/**
 * Sort an array of numbers (natural order)
 * 
 * @since 3.8.0
 */
function sortNumericArray(arr) {
  var ascending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  return arr.sort(function (a, b) {
    return ascending ? a - b : b - a;
  });
};

},{}],453:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.splitContextAndMethod = splitContextAndMethod;
function splitContextAndMethod() {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var _string$split = string.split(':'),
      _string$split2 = _slicedToArray(_string$split, 2),
      context = _string$split2[0],
      method = _string$split2[1];

  return {
    context: context,
    method: method
  };
};

},{}],454:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitFeature = splitFeature;

var _splitGeometryLine = require("utils/splitGeometryLine");

var _isMultiGeometry = require("utils/isMultiGeometry");

var _isPolygonGeometryType = require("utils/isPolygonGeometryType");

var _isLineGeometryType = require("utils/isLineGeometryType");

var _isSingleGeometry = require("utils/isSingleGeometry");

/**
 * @param { Object } opts
 * @param opts.feature
 * @param opts.splitfeature
 * 
 * @returns { Array } splitted feature geometries
 */
function splitFeature() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      feature = _ref.feature,
      splitfeature = _ref.splitfeature;

  var geometries = {
    feature: feature.getGeometry(), //geometry of the feature to split
    split: splitfeature.getGeometry() // geometry of split feature
  };
  // check geometry type of split
  var splitType = geometries.split.getType();
  // check geometry type of feature
  var featureGeometryType = geometries.feature.getType();
  // array of split geometries
  var splittedFeatureGeometries = [];
  var parser = new jsts.io.OL3Parser();

  if ('LineString' !== splitType) {
    return [];
  }
  //check if is a Multi
  var is_multi = (0, _isMultiGeometry.isMultiGeometry)(featureGeometryType);
  var is_line = (0, _isLineGeometryType.isLineGeometryType)(featureGeometryType);
  var is_poly = (0, _isPolygonGeometryType.isPolygonGeometryType)(featureGeometryType);

  /** common method to add split feature geometry */
  /**
   *
   * @param feature
   * @param geomClass
   */
  var addSplittedFeatureGeometries = function addSplittedFeatureGeometries(_ref2) {
    var feature = _ref2.feature,
        geomClass = _ref2.geomClass;

    feature.forEach(function (geometry) {
      splitFeature({
        splitfeature: splitfeature,
        feature: new ol.Feature({
          geometry: geometry
        })
      }).forEach(function (geometry) {
        return geometry && splittedFeatureGeometries.push(new geomClass([geometry.getCoordinates()]));
      });
    });
  };

  // If geometry is Polygon
  if (is_poly) {
    var polygonFeature = is_multi ? geometries.feature.getPolygons() : geometries.feature;
    // check if is a MultiPolygon
    if (Array.isArray(polygonFeature)) {
      addSplittedFeatureGeometries({
        feature: polygonFeature,
        geomClass: ol.geom.MultiPolygon
      });
    } else {
      // case a Polygon
      var isZType = polygonFeature.getCoordinates()[0][0][2] !== undefined;
      var polygonFeatureGeometry = parser.read(polygonFeature);
      var externalPolygonFeatureGeometry = parser.read(polygonFeature.getLinearRing(0));
      // create a line split feature in jsts
      var splitGeometry = parser.read(geometries.split);
      // add holes geometries
      var holePolygons = void 0;

      if (polygonFeature.getLinearRingCount() > 1) {
        var holeFeaturesGeometry = void 0;
        for (var index = 1; index < polygonFeature.getLinearRingCount(); index++) {
          var holeRing = parser.read(polygonFeature.getLinearRing(index));
          holeFeaturesGeometry = undefined === holeFeaturesGeometry ? holeRing : holeFeaturesGeometry.union(holeRing);
        }

        holePolygons = new jsts.operation.polygonize.Polygonizer();

        holePolygons.add(holeFeaturesGeometry);

        var holyPolygonUnion = void 0;

        holePolygons.getPolygons().toArray().forEach(function (polygon) {
          return holyPolygonUnion = undefined === holyPolygonUnion ? polygon : holyPolygonUnion.union(polygon);
        });

        holePolygons = holyPolygonUnion;
      }

      if (isZType) {

        polygonFeature.getCoordinates()[0].forEach(function (c, i) {
          return externalPolygonFeatureGeometry.getCoordinates()[i].z = c[2];
        });

        splitGeometry.getCoordinates().forEach(function (coordinate) {
          return coordinate.z = 0;
        });
      }

      var union = externalPolygonFeatureGeometry.union(splitGeometry);

      var polygonizer = new jsts.operation.polygonize.Polygonizer();

      polygonizer.add(union);

      var polygons = polygonizer.getPolygons().toArray();

      if (polygons.length > 1) {
        polygons.forEach(function (polygon) {
          if (holePolygons) {
            polygon = polygon.difference(holePolygons);
          }
          if (polygonFeatureGeometry.intersects(polygon.getInteriorPoint())) {
            var geometry = parser.write(polygon);
            var polygonCoordinates = polygon.getCoordinates();

            if (isZType) {
              polygonCoordinates.forEach(function (c, i) {
                return c.z = c.z === undefined ? polygonCoordinates[i === 0 ? i + 1 : i - 1].z : c.z;
              });
              var zCoordinates = [];
              geometry.getCoordinates()[0].forEach(function (c, i) {
                c.push(polygonCoordinates[i].z);
                zCoordinates.push(c);
              });
              geometry.setCoordinates([zCoordinates]);
            }

            var is_single = (0, _isSingleGeometry.isSingleGeometry)(geometry);

            if (is_multi) {
              splittedFeatureGeometries.push(new ol.geom.MultiPolygon(is_single ? [geometry.getCoordinates()] : geometry.getCoordinates()));
            } else {
              if (is_single) {
                splittedFeatureGeometries.push(geometry);
              } else {
                geometry.getCoordinates().forEach(function (c) {
                  return splittedFeatureGeometries.push(new ol.geom.Polygon(c));
                });
              }
            }
          }
        });
      }
    }
  }

  //LineString or MultiLineString
  if (is_line) {
    var lineFeatureGeometry = is_multi ? geometries.feature.getLineStrings() : geometries.feature;

    if (Array.isArray(lineFeatureGeometry)) {
      addSplittedFeatureGeometries({
        feature: lineFeatureGeometry,
        geomClass: ol.geom.MultiLineString
      });
    } else {
      return (0, _splitGeometryLine.splitGeometryLine)(geometries.split, geometries.feature);
    }
  }

  return splittedFeatureGeometries;
}

},{"utils/isLineGeometryType":424,"utils/isMultiGeometry":425,"utils/isPolygonGeometryType":427,"utils/isSingleGeometry":429,"utils/splitGeometryLine":456}],455:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitFeatures = splitFeatures;

var _splitFeature = require('utils/splitFeature');

/**
 * @param { Object } opts
 * @param { Array } opts.features
 * @param opts.splitfeature
 * 
 * @returns { Array } splittered geometries
 */
function splitFeatures() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$features = _ref.features,
      features = _ref$features === undefined ? [] : _ref$features,
      splitfeature = _ref.splitfeature;

  return features.reduce(function (a, f) {
    var geometries = (0, _splitFeature.splitFeature)({ splitfeature: splitfeature, feature: f });
    if (geometries.length > 1) {
      a.push({ uid: f.getUid(), geometries: geometries });
    }
    return a;
  }, []);
}

},{"utils/splitFeature":454}],456:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitGeometryLine = splitGeometryLine;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * @param splitGeometry 
 * @param lineGeometry
 * 
 * @returns { Array }
 */
function splitGeometryLine(splitGeometry, lineGeometry) {
  var isZType = undefined !== lineGeometry.getCoordinates()[0][2];
  var splitted = false;
  var splittedSegments = [];
  var jstsFromWkt = new jsts.io.WKTReader();
  var wktFromOl = new ol.format.WKT();
  var olFromJsts = new jsts.io.OL3Parser();
  var splitLine = jstsFromWkt.read(wktFromOl.writeGeometry(splitGeometry));
  var wktLineString = wktFromOl.writeGeometry(lineGeometry);

  if (isZType) {
    wktLineString = wktLineString.replace(' Z', '');
  }

  var targetLine = jstsFromWkt.read(wktLineString);
  var targetCoordinates = targetLine.getCoordinates();
  var targetCoordinatesLength = targetCoordinates.length;
  var geometryFactory = new jsts.geom.GeometryFactory();
  var pointsNotSplitted = [];

  var endPoint = void 0;
  var startPoint = void 0;

  for (var i = 0; i < targetCoordinatesLength - 1; i++) {
    startPoint = targetCoordinates[i];
    endPoint = targetCoordinates[i + 1];

    if (isZType) {
      startPoint.z = lineGeometry.getCoordinates()[i][2];
      endPoint.z = lineGeometry.getCoordinates()[i + 1][2];
    }

    // create a segment of two vertex
    var segment = geometryFactory.createLineString([startPoint, endPoint]);
    var intersectCoordinates = segment.intersection(splitLine).getCoordinates();

    splitted = splitted || intersectCoordinates.length > 0;

    intersectCoordinates.forEach(function (splitPoint) {
      if (isZType) {
        splitPoint.z = startPoint.z;
      }

      var lineNewSegment = olFromJsts.write(geometryFactory.createLineString((pointsNotSplitted.length ? pointsNotSplitted : []).concat([startPoint, splitPoint])));

      if (isZType) {
        var coordinates = lineNewSegment.getCoordinates();
        lineNewSegment.setCoordinates([[].concat(_toConsumableArray(coordinates[0]), [startPoint.z]), [].concat(_toConsumableArray(coordinates[1]), [splitPoint.z])]);
      }

      if (pointsNotSplitted.length) {
        pointsNotSplitted = [];
      }

      splittedSegments.push(lineNewSegment);

      startPoint = splitPoint;
    });

    pointsNotSplitted = pointsNotSplitted.concat([startPoint, endPoint]);
  }

  var restOfLine = olFromJsts.write(geometryFactory.createLineString(pointsNotSplitted));

  if (isZType) {
    var zCoordinates = [];
    pointsNotSplitted.forEach(function (pointNotSplitted, index) {
      var coordinate = restOfLine.getCoordinates()[index];
      coordinate.push(pointNotSplitted.z);
      zCoordinates.push(coordinate);
    });
    restOfLine.setCoordinates(zCoordinates);
  }

  splittedSegments.push(restOfLine);

  return splitted ? splittedSegments : [];
}

},{}],457:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squaredDistance = squaredDistance;
/**
 * core/geometry/geom::squaredDistance@v3.4
 */
function squaredDistance(c1, c2) {
  return Math.pow(c2[0] - c1[0], 2) + Math.pow(c2[1] - c1[1], 2);
}

},{}],458:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttle = throttle;
/**
 * build throttle function
 */
function throttle(fnc) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;

  var lastCall = void 0;
  return function () {
    var previousCall = lastCall;
    lastCall = Date.now();
    if (previousCall === undefined // function is being called for the first time
    || lastCall - previousCall > delay) {
      // throttle time has elapsed
      fnc.apply(undefined, arguments);
    }
  };
};

},{}],459:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toRawType = toRawType;
function toRawType(value) {
  var _toString = Object.prototype.toString;
  return _toString.call(value).slice(8, -1);
};

},{}],460:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformBBOX = transformBBOX;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * @param { Object } opts 
 * @param opts.sourceCrs
 * @param opts.destinationCrs
 * 
 * @returns { Array } 
 */
function transformBBOX() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      bbox = _ref.bbox,
      sourceCrs = _ref.sourceCrs,
      destinationCrs = _ref.destinationCrs;

  var point1 = new ol.geom.Point([bbox[0], bbox[1]]);
  var point2 = new ol.geom.Point([bbox[2], bbox[3]]);
  point1.transform(sourceCrs, destinationCrs);
  point2.transform(sourceCrs, destinationCrs);
  return [].concat(_toConsumableArray(point1.getCoordinates()), _toConsumableArray(point2.getCoordinates()));
}

},{}],461:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformMeterArea = transformMeterArea;
/**
 * @param area 
 * @param tounit
 * 
 * @returns { number } 
 */
function transformMeterArea(area, tounit) {
  if ('nautical' === tounit) {
    return area * 0.000000291553349598122862913947445759414840765222583489217190918463024037990567;
  }
  return area;
};

},{}],462:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformMeterLength = transformMeterLength;
/**
 * Transform length meter in a specific unit (ex.nautical mile)
 * 
 * @param length
 * @param tounit
 * 
 * @returns { number }
 */
function transformMeterLength(length, tounit) {
  if ('nautical' === tounit) {
    return length * 0.0005399568;
  }
  return length;
}

},{}],463:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trimValue = trimValue;
function trimValue(value) {
  return value.replace(/ /g, '');
}

},{}],464:[function(require,module,exports){
/**
 * @file ORIGINAL SOURCE: src/app/core/utils/validators.js@3.8
 * 
 * @since 3.9.0
 */

var _require = require('utils'),
    truefnc = _require.truefnc;

var InputValidators = {
  validators: {
    float: function float() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = function (value) {
        var float = Number(1 * value);
        return !Number.isNaN(float);
      };
    },
    integer: function integer() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = function (value) {
        var integer = 1 * value;
        return !_.isNaN(integer) ? Number.isSafeInteger(integer) && integer <= 2147483647 : false;
      };
    },
    checkbox: function checkbox() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = function (value) {
        var values = this.options.values || [];
        return values.indexOf(value) !== -1;
      };
    },
    datetimepicker: function datetimepicker() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = function (value, options) {
        var fielddatetimeformat = options.fielddatetimeformat;
        return moment(value, fielddatetimeformat, true).isValid();
      };
    },
    text: function text() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = truefnc;
    },
    string: function string() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = truefnc;
    },
    radio: function radio() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = truefnc;
    },
    default: function _default() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = options;
      this.validate = truefnc;
    },
    range: function range() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var min = options.min,
          max = options.max;

      this.validate = function (value) {
        value = 1 * value;
        return value >= min && value <= max;
      };
    }
  },

  get: function get(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var Validator = this.validators[type] || this.validators.default;
    return new Validator(options);
  }
};

module.exports = InputValidators;

},{"utils":419}],465:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.within = within;
/**
 * Check if `geometryToCheck` is within `geometry`
 * 
 * @param   { ol.geometry } geometry
 * @param   { ol.geometry } geometryToCheck
 * @returns { boolean }     whether `geometryToCheck` is within `geometry`
 * 
 * @since 3.8.0
 */
function within(geometry, geometryToCheck) {
  var olFromJsts = new jsts.io.OL3Parser();
  return olFromJsts.read(geometryToCheck).within(olFromJsts.read(geometry));
}

},{}],466:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* Generated by gulpfile.js, do not edit manually */

exports.default = '3.10.0-alpha.0';

},{}]},{},[287]);

//# sourceMappingURL=app.min.js.map
