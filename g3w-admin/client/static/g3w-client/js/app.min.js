!function e(t,n,i){function o(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(r)return r(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return o(n?n:e)},u,u.exports,e,t,n,i)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(e,t,n){!function(){function t(e){return{debug:!0,projects:a.group.projects,initproject:a.group.initproject,baselayers:a.group.baselayers,crs:a.group.crs,minscale:a.group.minscale,maxscale:a.group.maxscale,getWmsUrl:function(e){return a.server.urls.ows+"/"+a.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return a.server.urls.config+"/"+a.group.id+"/"+e.type+"/"+e.id}}}function n(){r=new Vue({el:"body",ready:function(){$(document).localize()}})}var i=e("i18n.service"),o=(e("app.ui"),e("app.service")),r=null,a={client:{debug:!0,local:!1},server:{urls:{ows:"/ows",api:"/api",config:"/api/config"}},group:null};if(a.client.debug&&(Vue.config.debug=!0),Vue.filter("t",function(e){return i(e)}),o.on("ready",function(){n()}),window.initConfig){a.group=window.initConfig.group;var s=t(s);o.init(s)}else $(document).on("initconfigReady",function(e,n){a.group=n.group;var i=t(i);o.init(i)})}()},{"app.service":3,"app.ui":4,"i18n.service":5}],2:[function(e,t,n){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Sidebar toggle button-->\n      <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <geocoder type="Nominatim"></geocoder>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  \n  <sidebar></sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <g3w-map id="map"></g3w-map>\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],3:[function(e,t,n){var i=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,r=e("g3w/core/g3wobject"),a=e("g3w/core/projectsregistry"),s=e("g3w/core/pluginsregistry"),l=e("g3w/core/geocodingservice").Nominatim,c=e("g3w/gui/geocoding/geocode.listing"),u=e("g3w/gui/gui"),d=e("layout/floatbar/floatbar"),p=function(){this.initialized=!1,this.config={},o(this)};i(p,r);var g=p.prototype;g.init=function(e){this.config=e,this._bootstrap(),l.on("results",function(e){var t=new c;t.results=e,d.insert(t)})},g.showForm=function(){d.open()},g._bootstrap=function(){var e=this;this.initialized||(u.showForm=this.showForm,$.when(a.init(this.config),s.init(this.config)).then(function(){e.emit("ready"),this.initialized=!0}))},t.exports=new p},{"g3w/core/g3wobject":18,"g3w/core/geocodingservice":19,"g3w/core/pluginsregistry":23,"g3w/core/projectsregistry":26,"g3w/core/utils":28,"g3w/gui/geocoding/geocode.listing":34,"g3w/gui/gui":37,"layout/floatbar/floatbar":7}],4:[function(e,t,n){e("i18n.service");e("g3w/gui/map/map"),e("g3w/gui/geocoding/geocoding");var i=e("layout/layout");e("layout/sidebar/sidebar");var o=e("layout/floatbar/floatbar"),r=e("g3w/core/mapservice");Vue.component("app",{template:e("./app.html"),ready:function(){function e(){$("#map").height($(window).innerHeight()-$(".navbar").innerHeight()),r.viewer.map.updateSize()}function t(e){var t=$(".main-sidebar").offset().left;e||(t-=$(".main-sidebar").innerWidth()),$("#map").width($(window).innerWidth()+t),r.viewer.map.updateSize()}function n(){s===!0?(s=!1,a=!0,e(),t(!1),requestAnimationFrame(n)):a=!1}i.setup(),$("body").toggleClass("fixed"),i.layout.fixSidebar(),i.pushMenu.expandOnHover(),i.layout.activate(),i.controlSidebar._fix($(".control-sidebar-bg")),i.controlSidebar._fix($(".control-sidebar")),o.init(i),$("body").on("expanded.pushMenu",function(){t(!0)}),$("body").on("collapsed.pushMenu",function(){t(!0)}),e();var a=!1,s=!1;$(window).resize(function(){a===!1&&(s=!0,n())})}})},{"./app.html":2,"g3w/core/mapservice":21,"g3w/gui/geocoding/geocoding":36,"g3w/gui/map/map":39,"i18n.service":5,"layout/floatbar/floatbar":7,"layout/layout":8,"layout/sidebar/sidebar":12}],5:[function(e,t,n){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e("../locales/it/app.json")});var i=function(e){var t=i18next.t(e);return t};jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0}),t.exports=i},{"../locales/it/app.json":13}],6:[function(e,t,n){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <div class="row">\n    <div class="col-xs-12 col-sm-12 col-md-12"><button class="glyphicon glyphicon-remove pull-right" @click="close"></button></div>\n  </div>\n  <div class="row">\n    <div class="col-xs-12 col-sm-12 col-md-12"><div id="floatbar-content-wrapper" class="clearfix"></div></div>\n  </div>\n  \n</aside>\n'},{}],7:[function(e,t,n){function i(){this.state={},this.layout=null,this.sidebarEl=null,this.child=null,this.init=function(e){this.layout=e,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector)},this.open=function(){this.layout.floatBar.open(this.sidebarEl,!0)},this.close=function(){this.child&&_.hasIn(this.child,"$destroy")&&(this.child.$destroy(),this.child=null),this.layout.floatBar.close(this.sidebarEl,!0)},this.insert=function(e){this.child=e,this.child.$mount("#floatbar-content-wrapper"),this.open()}}var o=new i;t.exports=o,Vue.component("floatbar",{template:e("./floatbar.html"),data:function(){return{content:"Contenuto"}},methods:{close:function(){o.close()}}})},{"./floatbar.html":6}],8:[function(e,t,n){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),n=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var i;t>=n?($(".content-wrapper, .right-side").css("min-height",t-e),i=t-e):($(".content-wrapper, .right-side").css("min-height",n),i=n);var o=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof o&&o.height()>i&&$(".content-wrapper, .right-side").css("min-height",o.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,n=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var i=$(this),o=i.next();if(o.is(".treeview-menu")&&o.is(":visible"))o.slideUp(n,function(){o.parent("li.treeview").removeClass("active"),o.removeClass("menu-open")});else if(o.is(".treeview-menu")&&!o.is(":visible")){var r,a=i.parents("ul").first(),s=i.parent("li"),l=s.siblings(),c=a.height()-a.find("li.header").outerHeight(),u=s.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var d=c-u;o.css({height:d+"px","max-height":d+"px","overflow-y":"auto"});var p=a.find("ul.treeview-menu:visible").slideUp(n);p.removeClass("menu-open"),o.slideDown(n,function(){o.addClass("menu-open"),r=a.find("li.treeview.active"),r.removeClass("active"),s.addClass("active"),t.layout.fix()})}o.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,n=$(t.selector),i=$(t.toggleBtnSelector);i.on("click",function(i){i.preventDefault(),n.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(n,t.slide):e.open(n,t.slide)});var o=$(".control-sidebar-bg");e._fix(o),$("body").hasClass("fixed")?e._fixForFixed(n):$(".content-wrapper, .right-side").height()<n.height()&&e._fixForContent(n)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,n=e.parents(".box").first(),i=n.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");n.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),i.slideDown(t.animationSpeed,function(){n.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),i.slideUp(t.animationSpeed,function(){n.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(o),i.onLoadStart.call(e)}function n(e){e.find(o).remove(),i.onLoadDone.call(e)}var i=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),o=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===i.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),o=e.find(i.trigger).first();o.on("click",function(o){o.preventDefault(),t(e),e.find(".box-body").load(i.source,function(){n(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},t.exports=$.LayoutManager},{}],9:[function(e,t,n){t.exports='<li class="treeview">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span>{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],10:[function(e,t,n){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel">\n  <div class="tabbable-line">\n    <span class="tool-box-icon bg-aqua"><i data-toggle="control-sidebar" class="fa" :class="dataIcon"></i></span>\n    <div class="tool-box-content">\n      <span  class="tool-box-name">Iternet</span>\n    </div>\n    <!-- /.info-box-content -->\n  </div>\n  <!-- /.info-box -->\n</div>\n'},{}],11:[function(e,t,n){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n	<section class="sidebar">\n    <g3w-tools-panel></g3w-tools-panel>\n	  <ul v-if="activePlugin.activePlugin == \'\'" class="sidebar-menu">\n	    <!--<sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n        <g3w-search></g3w-search>\n      </sidebar-item>-->\n      <sidebar-item data-icon="fa fa-database" data-label="catalog" data-type="inline">\n        <g3w-catalog></g3w-catalog>\n      </sidebar-item>\n      <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n        <g3w-tools></g3w-tools>\n      </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],12:[function(e,t,n){var i=e("i18n.service");e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),e("g3w/gui/plugins/plugins");var o=e("g3w/core/pluginsregistry"),r=e("g3w/core/pluginsservice");Vue.component("sidebar",{template:e("./sidebar.html"),data:function(){return{bOpen:!0,bPageMode:!1,header:i("main navigation"),activePlugin:r.state}},methods:{activeModule:function(e){return this.currentModule===e?(this.currentModule=void 0,!1):void(this.currentModule=e)}}}),Vue.component("sidebar-item",{props:["data-icon","data-label","data-type"],template:e("./sidebar-item.html"),data:function(){return{main:!0}},methods:{}}),Vue.component("sidebar-tool",{template:e("./sidebar-tool.html"),data:function(){return{store:o.store}},methods:{}})},{"./sidebar-item.html":9,"./sidebar-tool.html":10,"./sidebar.html":11,"g3w/core/pluginsregistry":23,"g3w/core/pluginsservice":24,"g3w/gui/catalog/catalog":30,"g3w/gui/plugins/plugins":51,"g3w/gui/search/search":55,"i18n.service":5}],13:[function(e,t,n){t.exports={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",tools:"Strumenti",tree:"Dati",legend:"Legenda",street_search:"Cerca indirizzo"}}}},{}],14:[function(e,t,n){var i=e("./map/maphelpers");!function(e,i,o){"function"==typeof define&&define.amd?define(o):"object"==typeof n?t.exports=o():i[e]=o()}("g3wol3",this,function(){"use strict";function e(e,t){var n={};for(var i in e)n[i]=e[i];for(var i in t)n[i]=t[i];return n}var t=e({},i);return{helpers:t}})},{"./map/maphelpers":17}],15:[function(e,t,n){var i={};i.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),i.BING={},i.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),i.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),i.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=i},{}],16:[function(e,t,n){var i={};i.TiledWMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},i.WMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.ImageWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},i.TiledWMSLayer=function(e){var t=new ol.layer.Tile({name:e.name,opacity:1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},t.exports=i},{}],17:[function(e,t,n){BaseLayers=e("../layers/bases");var i={createViewer:function(e){return new o(e)}},o=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1}}).extend([new ol.control.Zoom]),n=new ol.View(e.view),i={controls:t,interactions:ol.interaction.defaults().extend([new ol.interaction.DragRotate]),ol3Logo:!1,view:n};e.id&&(i.target=e.id);var o=new ol.Map(i);this.map=o};o.prototype.updateMap=function(e){},o.prototype.updateView=function(){},o.prototype.getMap=function(){return this.map},o.prototype.setTarget=function(e){this.map.setTarget(e)},o.prototype.goTo=function(e,t){var n=this.map.getView();n.setCenter(e),n.setZoom(t)},o.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},o.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),n=t.getLength(),i=0;n>i;i++)if(e===t.item(i).get("name"))return t.item(i);return null},o.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&this.map.removeLayer(t)},o.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var n=t.getProperties();1!=n.basemap&&n.visible&&e.push(t)}),e},o.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var n=t.getProperties();1!=n.basemap&&e.push(t)}),e},o.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},o.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),n=this.map.getLayers();n.insertAt(0,t)},t.exports=i},{"../layers/bases":15}],18:[function(e,t,n){var i=e("g3w/core/utils").inherit,o=function(){};i(o,EventEmitter),t.exports=o},{"g3w/core/utils":28}],19:[function(e,t,n){function i(){var e=this;this.url="http://nominatim.openstreetmap.org",this.search=function(t){var n=($.Deferred(),this.url+"/search?format=json&polygon_geojson=1&q="+t);$.get(n,function(t){e.emit("results",t)})},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,a=e("g3w/core/g3wobject");o(i,a),t.exports={Nominatim:new i}},{"g3w/core/g3wobject":18,"g3w/core/utils":28}],20:[function(e,t,n){function i(e){var t=new o(e);this.getOlLayer=function(){return t.olLayer},this.getLayerId=function(){return t.layerId},this.addLayer=function(e){t.addLayer(e)},this.toggleLayer=function(e){_.forEach(t.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),t.updateLayers()},this.update=function(){t.updateLayers()}}function o(e){this.LAYERTYPE={LAYER:"layer",METALAYER:"metalayer"},this.layerId=e.layerId,this.olLayer=null,this.layers=[];var t={name:this.layerId,url:e.url};this.olLayer=new r.WMSLayer(t)}var r=e("g3w-ol3/src/layers/rasters"),a=o.prototype;a.addLayer=function(e){this.layers.push(e)},a.getVisibleLayers=function(){var e=[];return _.forEach(this.layers,function(t){t.visible&&e.push(t)}),e},a.updateLayers=function(){var e=this.getVisibleLayers();this.olLayer.getSource().updateParams({layers:_.join(_.map(e,"name"),",")})},t.exports=i},{"g3w-ol3/src/layers/rasters":16}],21:[function(e,t,n){function i(){var e=this;this.viewer,this.mapLayers={},this.state={},a.on("projectset",function(){$script("http://epsg.io/"+a.state.crs+".js"),e.viewer||e.setupViewer(),e.setupLayers()}),a.onafter("setLayersVisible",function(t){_.forEach(t,function(t){var n=e.getMapLayerForLayer(t);n.update()})}),this.setupViewer=function(){var e=a.state.extent,t=new ol.proj.Projection({code:"EPSG:"+a.state.crs,extent:e});this.viewer=s.createViewer({view:{projection:t,center:ol.extent.getCenter(a.state.extent),zoom:1}})},this.setupLayers=function(){var t=this.traverseLayersTree(a.state.layerstree);t.forEach(function(t){if(!_.get(t,"nodes")){var n="layer_"+t.metalayer,i=_.get(e.mapLayers,n);i||(url=a.getWmsUrl(),i=e.mapLayers[n]=new l({id:n,url:url}),e.viewer.map.addLayer(i.getOlLayer())),i.addLayer(t)}}),_.forEach(this.mapLayers,function(e){e.update()})},this.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.metalayer]},this.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,i){_.isNil(e.id)||n.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var n=[];return t(e),n},this.showViewer=function(e){this.viewer.setTarget(e)},this.goTo=function(e,t){var t=t||5;this.viewer.goTo(e,t)},this.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+a.state.crs);this.goTo(e,t)}}var o=e("./utils").inherit,r=(e("./utils").deferredValue,e("./stateprovider")),a=(e("./projectsregistry"),e("./projectservice")),s=e("g3w-ol3/src/g3w.ol3").helpers,l=e("./maplayer");o(a,r),t.exports=new i},{"./maplayer":20,"./projectservice":25,"./projectsregistry":26,"./stateprovider":27,"./utils":28,"g3w-ol3/src/g3w.ol3":14}],22:[function(e,t,n){var i=[{name:"info",active:!0},{name:"editor",active:!0}];t.exports=i},{}],23:[function(e,t,n){function i(){var e=this;this.state=l.state,this.init=function(t){return l.init(t).then(function(){e.emit("loaded")})},this.addPlugin=function(e){l.addPlugin(e)},this.getPlugin=function(e){return l.getPlugin(e)},this.removePlugin=function(e){return l.removePlugin(e)},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,a=e("g3w/core/g3wobject"),s=e("./pluginsservice");o(i,a);var l={initialized:!1,config:null,testing:!0,state:{plugins:[]},init:function(e){return this.initialized?void 0:this.setupState()},setupState:function(){var e=this,t=this.getPluginsFullConfig();return t.then(function(t){t.forEach(function(t){t.active&&e.state.plugins.push(t)})})},setActivePlugin:function(e){var t=this.getProject(e);if(!t){var n=$.Deferred();return n.reject("Plugin doesn't exist")}s.setActivePlugin(t)},removePlugin:function(e){var t,n=this.getPlugin(e);n&&(t=s.getActivePlugin(e),t==n.name&&s.setActivePlugin(""),_.pull(this.state.plugins,n))},getPlugin:function(e){var t=null;return this.state.plugins.forEach(function(n){t.name==e&&(t=t)}),t},getPluginsFullConfig:function(){var t=$.Deferred();return this.testing&&setTimeout(function(){var n;n=e("./plugins_test_configurations"),t.resolve(n)},100),t.promise()}};t.exports=new i},{"./plugins_test_configurations":22,"./pluginsservice":24,"g3w/core/g3wobject":18,"g3w/core/utils":28}],24:[function(e,t,n){function i(){this.state={activePlugin:"",activePanel:{}},this.setActivePlugin=function(e){this.state.activePlugin=e},this.getActivePlugin=function(){return this.state.activePlugin},this.setActivePanel=function(e){this.state.activePanel=new e},this.getActivePanel=function(){return this.state.activePanel}}var o=e("./utils").inherit;o(i,EventEmitter),t.exports=new i},{"./utils":28}],25:[function(e,t,n){function i(){var e=this;this.config=null,this.layers={},this.state={layerstree:[]},this.init=function(e){this.config=e},this.makeLayersObj=function(t){function n(t){_.forIn(t,function(t,i){_.isNil(t.id)||(e.layers[t.id]=t),_.isNil(t.nodes)||n(t.nodes)})}n(t)},this.setProject=function(e){this.state=e,this.makeLayersObj(e.layerstree),this.emit("projectset")};var t={setLayersVisible:function(t,n){_.forEach(t,function(t){e.layers[t.id].visible=n})}};this.initSetters(t),this.getLayer=function(e){return this.layers[e]},this.toggleLayer=function(t,n){var n=n||!t.visible;e.setLayersVisible([t],n)},this.toggleLayers=function(t,n){e.setLayersVisible(t,n)},this.getWmsUrl=function(){return this.config.getWmsUrl(this.state)},this.getLegendUrl=function(e){return this.getWmsUrl(this.state)+"?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&FORMAT=image/png&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name}}var o=e("./utils").inherit,r=e("./stateprovider");o(i,r),t.exports=new i},{"./stateprovider":27,"./utils":28}],26:[function(e,t,n){function i(){var e=this;this.state=u.state,this.init=function(t){return u.init(t).then(function(){e.emit("loaded")})},this.addProject=function(e){u.addProject(e)},this.getProject=function(e){return u.getProject(e)},this.getCurrentProject=function(){return this.getProject(u.currentProject.gid)},this.setCurrentProject=function(e){u.setCurrentProject(e)},r(this)}var o=e("./utils").inherit,r=e("g3w/core/utils").base,a=e("g3w/core/g3wobject"),s=e("./utils").resolvedValue,l=e("./utils").rejectedValue,c=e("./projectservice");o(i,a);var u={config:null,initialized:!1,state:{baseLayers:{},minScale:null,maxscale:null,projects:[]},init:function(e){return this.initialized?void 0:(this.config=e,this.setupState(),c.init(e),this.setCurrentProject(e.initproject))},setupState:function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.config.projects.forEach(function(t){t.baseLayers=e.config.baselayers,t.minScale=e.config.minscale,t.maxScale=e.config.maxscale,t.crs=e.config.crs,e.state.projects.push(t)})},setCurrentProject:function(e){var t=this,n=this.getProject(e);if(!n)return l("Project doesn't exist");var i=!_.isNil(n.layers);return i?(c.setProject(n),s(n)):this.getProjectFullConfig(n).then(function(e){n=_.merge(n,e),t.buildProjectTree(n),c.setProject(n)})},buildProjectTree:function(e){function t(e){_.forIn(e,function(i,o){if(!_.isNil(i.id)){var r=_.merge(i,n[i.id]);e[parseInt(o)]=r}_.isNil(i.nodes)||(i.title=i.name,t(i.nodes))})}var n=_.keyBy(e.layers,"id"),i=_.cloneDeep(e.layerstree);t(i),e.layerstree=i},getProject:function(e){var t=null;return this.state.projects.forEach(function(n){n.gid==e&&(t=n)}),t},getProjectFullConfig:function(e){var t=$.Deferred(),n=this.config.getProjectConfigUrl(e);return $.get(n).done(function(e){t.resolve(e)}),t.promise()}};t.exports=new i},{"./projectservice":25,"./utils":28,"g3w/core/g3wobject":18,"g3w/core/utils":28}],27:[function(e,t,n){function i(){}var o=e("./utils").inherit,r=e("g3w/core/g3wobject");o(i,r);var a=i.prototype;a.stateSet=function(e,t){var n=_.get(this.state,e,null);if(n){var i=this.getPathKey(e),o=this.getsettersListeners(),r=o[i],a=!0;_.forEach(r,function(e,i){a&=e.apply(this,[t,n])}),a&&(console.log("Setting: "+e+"="+t),_.set(this.state,e,t))}},a.onafter=function(e,t){this.onsetter("after",e,t)},a.onbefore=function(e,t){this.onsetter("before",e,t)},a.onsetter=function(e,t,n){var i=this.settersListeners[e];_.isUndefined(i[t])&&(i[t]={});var o=""+Math.floor(1e6*Math.random())+Date.now();return i[t][o]=n,this.generateUnListener(t,o)},a.generateUnListener=function(e,t,n){return function(){e[t][n]=null,delete e[t][n]}},a.initSetters=function(e){var t=this;this.settersListeners={after:{},before:{}},this.setters=e,_.forEach(e,function(e,n){t[n]=function(){var i=arguments,o=this.settersListeners.before[n],r=!0;if(_.forEach(o,function(e,t){var n=e.apply(this,i);_.isNil(n)||(r&=n)}),r){e.apply(t,i);var a=this.settersListeners.after[n];_.forEach(a,function(e,t){e.apply(this,i)}),t.emit("stateChanged")}}})},t.exports=i},{"./utils":28,"g3w/core/g3wobject":18}],28:[function(e,t,n){var i={mixin:function(e,t){return i.merge(e.prototype,t)},mixininstance:function(e,t){
var n=new t;i.merge(e,n),i.merge(e.prototype,t.prototype)},merge:function(e,t){var n;for(n in t)i.hasOwn(t,n)&&(e[n]=t[n])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function n(){}n.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new n,e.prototype.constructor=e},base:function(e,t,n){var i=arguments.callee.caller;if(i.superClass_)return i.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var o=Array.prototype.slice.call(arguments,2),r=!1,a=e.constructor;a;a=a.superClass_&&a.superClass_.constructor)if(a.prototype[t]===i)r=!0;else if(r)return a.prototype[t].apply(e,o);if(e[t]===i)return e.constructor.prototype[t].apply(e,o);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},resolvedValue:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},rejectedValue:function(e){var t=$.Deferred();return t.reject(e),t.promise()}};t.exports=i},{}],29:[function(e,t,n){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree"></a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend"></a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tree :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tree>\n        </ul>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],30:[function(e,t,n){var i=(e("i18n.service"),e("g3w/gui/gui"),e("g3w/core/projectservice"));Vue.component("g3w-catalog",{template:e("./catalog.html"),data:function(){return{project:i.state}},computed:{layerstree:function(){return this.project.layerstree}},methods:{},ready:function(){}}),Vue.component("tree",{template:e("./tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,i.toggleLayers(this.layerstree.nodes,this.parentChecked)):i.toggleLayer(this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(n){_.forIn(n,function(n,i){!_.isNil(n.id)&&n.visible&&t.push(n),_.isNil(n.nodes)||e(n.nodes)})}var t=[],n=this.layerstree;return e(n),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return i.getLegendUrl(this.layer)}},methods:{openform:function(){}}})},{"./catalog.html":29,"./legend.html":31,"./legend_item.html":32,"./tree.html":33,"g3w/core/projectservice":25,"g3w/gui/gui":37,"i18n.service":5}],31:[function(e,t,n){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],32:[function(e,t,n){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],33:[function(e,t,n){t.exports='<li class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\']" class="fa"></span>\n  <span :class="{bold: isFolder}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tree>\n  </ul>\n</li>\n\n\n\n'},{}],34:[function(e,t,n){var i=e("g3w/core/mapservice"),o=Vue.extend({template:'<ul><li v-for="result in results" @click="goto(result.lon,result.lat)" style="cursor:pointer">{{ result.display_name }}</li></ul>',data:function(){return{results:[]}},methods:{"goto":function(e,t){i.goToWGS84([e,t])}}});t.exports=o},{"g3w/core/mapservice":21}],35:[function(e,t,n){t.exports='<form class="navbar-form" role="search" @submit.prevent>\n  <div class="input-group">\n    <input type="text" class="form-control" :placeholder="placeholder" v-model="query"  name="srch-term" id="srch-term">\n    <div class="input-group-btn">\n        <button class="btn btn-default" type="submit" @click="search"><i class="glyphicon glyphicon-search"></i></button>\n    </div>\n  </div>\n</form>\n'},{}],36:[function(e,t,n){var i=e("i18n.service"),o=e("g3w/core/geocodingservice");Vue.component("geocoder",{template:e("./geocoding.html"),props:["type"],data:function(){return{query:"",placeholder:i("street_search")}},methods:{search:function(e){e.preventDefault();var t=this.query;this.service.search(t)}},ready:function(){var e=this;this.service=o[this.type],this.service.on("results",function(){e.query=""})}})},{"./geocoding.html":35,"g3w/core/geocodingservice":19,"i18n.service":5}],37:[function(e,t,n){function i(){this.showForm=noop,toastr.options.positionClass="toast-top-center",this.notify=toastr}noop=e("g3w/core/utils").noop,t.exports=new i},{"g3w/core/utils":28}],38:[function(e,t,n){t.exports='<div id="{{id}}" style="width:100%;height:100%"></div>\n'},{}],39:[function(e,t,n){var i=(e("i18n.service"),e("g3w/core/mapservice"));e("g3w/core/projectservice"),e("g3w-ol3/src/g3w.ol3").helpers;Vue.component("g3w-map",{template:e("./map.html"),props:["id"],ready:function(){i.showViewer(this.$el.id)}})},{"./map.html":38,"g3w-ol3/src/g3w.ol3":14,"g3w/core/mapservice":21,"g3w/core/projectservice":25,"i18n.service":5}],40:[function(e,t,n){t.exports=' <form role="form">\n  <div class="form-group">\n    <label for="email">Email address Editor:</label>\n    <input type="email" class="form-control" id="email">\n  </div>\n  <button type="submit" class="btn btn-default">Submit</button>\n</form>'},{}],41:[function(e,t,n){var i=(e("g3w/core/pluginsservice"),e("g3w/core/pluginsregistry"),e("g3w/gui/plugins/panelmixin")),o=i.extend({template:e("./panel.html")});t.exports=o},{"./panel.html":40,"g3w/core/pluginsregistry":23,"g3w/core/pluginsservice":24,"g3w/gui/plugins/panelmixin":48}],42:[function(e,t,n){t.exports='<div style="color:white;" @click="activeTool(name)" title="{{ name }}">\n {{ name }}\n</div>'},{}],43:[function(e,t,n){var i=e("g3w/gui/plugins/pluginmixin"),o=i.extend({template:e("./plugin.html"),data:function(){return{name:"editor"}}});t.exports=o},{"./plugin.html":42,"g3w/gui/plugins/pluginmixin":49}],44:[function(e,t,n){t.exports=' <form role="form">\n  <div class="form-group">\n    <label for="email">Email address:</label>\n    <input type="email" class="form-control" id="email">\n  </div>\n  <div class="form-group">\n    <label for="pwd">Password:</label>\n    <input type="password" class="form-control" id="pwd">\n  </div>\n  <div class="checkbox">\n    <label><input type="checkbox"> Remember me</label>\n  </div>\n  <button type="submit" class="btn btn-default">Submit</button>\n</form>'},{}],45:[function(e,t,n){var i=(e("g3w/core/pluginsservice"),e("g3w/core/pluginsregistry"),e("g3w/gui/plugins/panelmixin")),o=i.extend({template:e("./panel.html")});t.exports=o},{"./panel.html":44,"g3w/core/pluginsregistry":23,"g3w/core/pluginsservice":24,"g3w/gui/plugins/panelmixin":48}],46:[function(e,t,n){t.exports='<div style="color:white;" @click="activePlugin(name)"  title="{{ name }}">\n {{ name }}\n</div>'},{}],47:[function(e,t,n){var i=e("g3w/gui/plugins/pluginmixin"),o=i.extend({template:e("./plugin.html"),data:function(){return{name:"info"}}});t.exports=o},{"./plugin.html":46,"g3w/gui/plugins/pluginmixin":49}],48:[function(e,t,n){var i=e("g3w/core/pluginsservice"),o=(e("g3w/core/pluginsregistry"),Vue.extend({data:function(){return{state:i.state}}}));t.exports=o},{"g3w/core/pluginsregistry":23,"g3w/core/pluginsservice":24}],49:[function(e,t,n){var i=(e("i18n.service"),e("g3w/core/pluginsservice")),o=e("./pluginsmodules"),r=Vue.extend({methods:{activePlugin:function(e){console.log(o),i.setActivePlugin(e);var t=o.getPluginPanel(e);t=new t,t.$mount().$appendTo("#g3w-panel"),i.setActivePanel(t)}}});t.exports=r},{"./pluginsmodules":52,"g3w/core/pluginsservice":24,"i18n.service":5}],50:[function(e,t,n){t.exports='<div id="tools">\n</div>'},{}],51:[function(e,t,n){var i=e("g3w/core/pluginsregistry"),o=e("./pluginsmodules"),r=e("g3w/core/pluginsservice");Vue.component("g3w-tools-panel",{template:e("./tools-panel.html"),data:function(){return{state:r.state}},methods:{showSidebar:function(){r.setActivePlugin("");var e=r.getActivePanel();e.$remove(),r.setActivePanel({})}}}),Vue.component("g3w-tools",{template:e("./plugins.html"),data:function(){return{state:i.state}},ready:function(){var e;this.state.plugins.forEach(function(t){e=o.getPluginModule(t.name),e=new e,e.$mount().$appendTo("#tools")})}})},{"./plugins.html":50,"./pluginsmodules":52,"./tools-panel.html":53,"g3w/core/pluginsregistry":23,"g3w/core/pluginsservice":24}],52:[function(e,t,n){var i={modules:[{name:"info",pluginModule:e("g3w/gui/plugins/info/plugin"),panelModule:e("g3w/gui/plugins/info/panel")},{name:"editor",pluginModule:e("g3w/gui/plugins/editor/plugin"),panelModule:e("g3w/gui/plugins/editor/panel")}],getPluginModule:function(e){var t=!1;return this.modules.forEach(function(n){e==n.name&&(t=n.pluginModule)}),t},getPluginPanel:function(e){var t=!1;return this.modules.forEach(function(n){e==n.name&&(t=n.panelModule)}),t}};t.exports=i},{"g3w/gui/plugins/editor/panel":41,"g3w/gui/plugins/editor/plugin":43,"g3w/gui/plugins/info/panel":45,"g3w/gui/plugins/info/plugin":47}],53:[function(e,t,n){t.exports='<div>\n  <header v-if="state.activePlugin != \'\'">\n    <button @click="showSidebar" type="button" class="btn btn-primary">Back</button>\n  </header>\n  <div style="color:#ffffff" id="g3w-panel"></div>\n</div>'},{}],54:[function(e,t,n){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],55:[function(e,t,n){e("i18n.service");Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":54,"i18n.service":5}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwxLCJtb2R1bGUiLCJjcmVhdGVDb25maWciLCJjb25maWciLCJkZWJ1ZyIsInByb2plY3RzIiwiYmFzZWNvbmZpZyIsImdyb3VwIiwiaW5pdHByb2plY3QiLCJiYXNlbGF5ZXJzIiwiY3JzIiwibWluc2NhbGUiLCJtYXhzY2FsZSIsImdldFdtc1VybCIsInByb2plY3QiLCJzZXJ2ZXIiLCJ1cmxzIiwib3dzIiwiaWQiLCJ0eXBlIiwiZ2V0UHJvamVjdENvbmZpZ1VybCIsInJ1biIsImFwcCIsIlZ1ZSIsImVsIiwicmVhZHkiLCIkIiwiZG9jdW1lbnQiLCJsb2NhbGl6ZSIsImFwcFNlcnZpY2UiLCJjbGllbnQiLCJsb2NhbCIsImFwaSIsImZpbHRlciIsInZhbHVlIiwib24iLCJ3aW5kb3ciLCJpbml0Q29uZmlnIiwiaW5pdCIsImluaXRjb25maWciLCJhcHAuc2VydmljZSIsImFwcC51aSIsImkxOG4uc2VydmljZSIsMiwzLCJpbmhlcml0IiwiYmFzZSIsIkczV09iamVjdCIsIlByb2plY3RzUmVnaXN0cnkiLCJQbHVnaW5zUmVnaXN0cnkiLCJOb21pbmF0aW0iLCJHZW9jb2RlTGlzdGluZyIsIkdVSSIsIkZsb2F0QmFyIiwiQXBwU2VydmljZSIsInRoaXMiLCJpbml0aWFsaXplZCIsInByb3RvIiwicHJvdG90eXBlIiwiX2Jvb3RzdHJhcCIsInJlc3VsdHMiLCJnbCIsImluc2VydCIsInNob3dGb3JtIiwib3BlbiIsInNlbGYiLCJ3aGVuIiwidGhlbiIsImVtaXQiLCJnM3cvY29yZS9nM3dvYmplY3QiLCJnM3cvY29yZS9nZW9jb2RpbmdzZXJ2aWNlIiwiZzN3L2NvcmUvcGx1Z2luc3JlZ2lzdHJ5IiwiZzN3L2NvcmUvcHJvamVjdHNyZWdpc3RyeSIsImczdy9jb3JlL3V0aWxzIiwiZzN3L2d1aS9nZW9jb2RpbmcvZ2VvY29kZS5saXN0aW5nIiwiZzN3L2d1aS9ndWkiLCJsYXlvdXQvZmxvYXRiYXIvZmxvYXRiYXIiLDQsImxheW91dCIsIk1hcFNlcnZpY2UiLCJjb21wb25lbnQiLCJ0ZW1wbGF0ZSIsInNldE1hcERpdkhlaWdodCIsImhlaWdodCIsImlubmVySGVpZ2h0Iiwidmlld2VyIiwibWFwIiwidXBkYXRlU2l6ZSIsInNldE1hcERpdldpZHRoIiwiYW5pbWF0aW5nIiwib2Zmc2V0IiwibGVmdCIsImlubmVyV2lkdGgiLCJ3aWR0aCIsImRyYXdSZXNpemUiLCJyZXNpemVGaXJlZCIsImRyYXdpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXR1cCIsInRvZ2dsZUNsYXNzIiwiZml4U2lkZWJhciIsInB1c2hNZW51IiwiZXhwYW5kT25Ib3ZlciIsImFjdGl2YXRlIiwiY29udHJvbFNpZGViYXIiLCJfZml4IiwicmVzaXplIiwiLi9hcHAuaHRtbCIsImczdy9jb3JlL21hcHNlcnZpY2UiLCJnM3cvZ3VpL2dlb2NvZGluZy9nZW9jb2RpbmciLCJnM3cvZ3VpL21hcC9tYXAiLCJsYXlvdXQvbGF5b3V0IiwibGF5b3V0L3NpZGViYXIvc2lkZWJhciIsNSwiaTE4bmV4dCIsInVzZSIsImkxOG5leHRYSFJCYWNrZW5kIiwibG5nIiwibnMiLCJmYWxsYmFja0xuZyIsInJlc291cmNlcyIsInRleHQiLCJ0cmFkIiwianF1ZXJ5STE4bmV4dCIsInROYW1lIiwiaTE4bk5hbWUiLCJoYW5kbGVOYW1lIiwic2VsZWN0b3JBdHRyIiwidGFyZ2V0QXR0ciIsIm9wdGlvbnNBdHRyIiwidXNlT3B0aW9uc0F0dHIiLCJwYXJzZURlZmF1bHRWYWx1ZUZyb21Db250ZW50IiwiLi4vbG9jYWxlcy9pdC9hcHAuanNvbiIsNiw3LCJzdGF0ZSIsInNpZGViYXJFbCIsImNoaWxkIiwib3B0aW9ucyIsImNvbnRyb2xTaWRlYmFyT3B0aW9ucyIsInNlbGVjdG9yIiwiZmxvYXRCYXIiLCJjbG9zZSIsIl8iLCJoYXNJbiIsIiRkZXN0cm95Iiwidm0iLCIkbW91bnQiLCJkYXRhIiwiY29udGVudCIsIm1ldGhvZHMiLCIuL2Zsb2F0YmFyLmh0bWwiLDgsImpRdWVyeSIsIkxheW91dE1hbmFnZXIiLCJuYXZiYXJNZW51U2xpbXNjcm9sbCIsIm5hdmJhck1lbnVTbGltc2Nyb2xsV2lkdGgiLCJuYXZiYXJNZW51SGVpZ2h0IiwiYW5pbWF0aW9uU3BlZWQiLCJzaWRlYmFyVG9nZ2xlU2VsZWN0b3IiLCJzaWRlYmFyUHVzaE1lbnUiLCJzaWRlYmFyU2xpbVNjcm9sbCIsInNpZGViYXJFeHBhbmRPbkhvdmVyIiwiZW5hYmxlQm94UmVmcmVzaCIsImVuYWJsZUJTVG9wcGx0aXAiLCJCU1Rvb2x0aXBTZWxlY3RvciIsImVuYWJsZUZhc3RjbGljayIsImVuYWJsZUNvbnRyb2xTaWRlYmFyIiwidG9nZ2xlQnRuU2VsZWN0b3IiLCJzbGlkZSIsImVuYWJsZUJveFdpZGdldCIsImJveFdpZGdldE9wdGlvbnMiLCJib3hXaWRnZXRJY29ucyIsImNvbGxhcHNlIiwicmVtb3ZlIiwiYm94V2lkZ2V0U2VsZWN0b3JzIiwiZGlyZWN0Q2hhdCIsImVuYWJsZSIsImNvbnRhY3RUb2dnbGVTZWxlY3RvciIsImNvbG9ycyIsImxpZ2h0Qmx1ZSIsInJlZCIsImdyZWVuIiwiYXF1YSIsInllbGxvdyIsImJsdWUiLCJuYXZ5IiwidGVhbCIsIm9saXZlIiwibGltZSIsIm9yYW5nZSIsImZ1Y2hzaWEiLCJwdXJwbGUiLCJtYXJvb24iLCJibGFjayIsImdyYXkiLCJzY3JlZW5TaXplcyIsInhzIiwic20iLCJtZCIsImxnIiwiX2luaXQiLCJfdGhpcyIsImZpeCIsIm5lZyIsIm91dGVySGVpZ2h0Iiwid2luZG93X2hlaWdodCIsInNpZGViYXJfaGVpZ2h0IiwiaGFzQ2xhc3MiLCJjc3MiLCJwb3N0U2V0V2lkdGgiLCJmbiIsInNsaW1TY3JvbGwiLCJjb25zb2xlIiwiZXJyb3IiLCJkZXN0cm95Iiwic2xpbXNjcm9sbCIsImNvbG9yIiwic2l6ZSIsInRvZ2dsZUJ0biIsInByZXZlbnREZWZhdWx0IiwicmVtb3ZlQ2xhc3MiLCJ0cmlnZ2VyIiwiYWRkQ2xhc3MiLCJjbGljayIsInNjcmVlbldpZHRoIiwiaG92ZXIiLCJleHBhbmQiLCJ0cmVlIiwibWVudSIsIiR0aGlzIiwiY2hlY2tFbGVtZW50IiwibmV4dCIsImlzIiwic2xpZGVVcCIsInBhcmVudCIsInBhcmVudF9maW5kX2FjdGl2ZSIsInBhcmVudHMiLCJmaXJzdCIsInBhcmVudF9saSIsImxpX3NpYmxpbmdzIiwic2libGluZ3MiLCJzaWRlYmFyX2NvbnRlbnRfaGVpZ2h0IiwiZmluZCIsInRyZWV2aWV3SGVpZ2h0Iiwibm90IiwiZWFjaCIsImluZGV4Iiwic2VjdGlvbl9oZWlnaHQiLCJtYXgtaGVpZ2h0Iiwib3ZlcmZsb3cteSIsInVsIiwic2xpZGVEb3duIiwic2lkZWJhciIsImJ0biIsImJnIiwiX2ZpeEZvckZpeGVkIiwiX2ZpeEZvckNvbnRlbnQiLCJwb3NpdGlvbiIsIm92ZXJmbG93IiwicGFkZGluZy1ib3R0b20iLCJib3hXaWRnZXQiLCJzZWxlY3RvcnMiLCJpY29ucyIsIl9ib3giLCJlbGVtZW50IiwiYm94IiwiYm94X2NvbnRlbnQiLCJjaGlsZHJlbiIsImFkZFJlZnJlc2hCdXR0b24iLCJib3hSZWZyZXNoIiwic3RhcnQiLCJhcHBlbmQiLCJvdmVybGF5Iiwic2V0dGluZ3MiLCJvbkxvYWRTdGFydCIsImRvbmUiLCJvbkxvYWREb25lIiwiZXh0ZW5kIiwic291cmNlIiwibG9nIiwickJ0biIsImxvYWQiLCJhY3RpdmF0ZUJveCIsImxpc3RDdXN0b21QbHVnaW4iLCJ0b2RvbGlzdCIsIm9uQ2hlY2siLCJlbGUiLCJvblVuY2hlY2siLCJpQ2hlY2siLCJMYXlvdXRNYW5hZ2VyT3B0aW9ucyIsImFsd2F5c1Zpc2libGUiLCJ0b29sdGlwIiwiRmFzdENsaWNrIiwiYXR0YWNoIiwiYm9keSIsOSwxMCwxMSwxMiwiUGx1Z2luUmVnaXN0cnkiLCJQbHVnaW5zU2VydmljZSIsImJPcGVuIiwiYlBhZ2VNb2RlIiwiaGVhZGVyIiwiYWN0aXZlUGx1Z2luIiwiYWN0aXZlTW9kdWxlIiwiY3VycmVudE1vZHVsZSIsInVuZGVmaW5lZCIsInByb3BzIiwibWFpbiIsInN0b3JlIiwiLi9zaWRlYmFyLWl0ZW0uaHRtbCIsIi4vc2lkZWJhci10b29sLmh0bWwiLCIuL3NpZGViYXIuaHRtbCIsImczdy9jb3JlL3BsdWdpbnNzZXJ2aWNlIiwiZzN3L2d1aS9jYXRhbG9nL2NhdGFsb2ciLCJnM3cvZ3VpL3BsdWdpbnMvcGx1Z2lucyIsImczdy9ndWkvc2VhcmNoL3NlYXJjaCIsMTMsIml0IiwidHJhbnNsYXRpb24iLCJzZWFyY2giLCJjYXRhbG9nIiwidG9vbHMiLCJsZWdlbmQiLCJzdHJlZXRfc2VhcmNoIiwxNCwibWFwaGVscGVycyIsIm5hbWUiLCJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsIm1lcmdlIiwib2JqMSIsIm9iajIiLCJvYmozIiwiYXR0cm5hbWUiLCJoZWxwZXJzIiwiLi9tYXAvbWFwaGVscGVycyIsMTUsIkJhc2VMYXllcnMiLCJPU00iLCJvbCIsImxheWVyIiwiVGlsZSIsImF0dHJpYnV0aW9ucyIsIkF0dHJpYnV0aW9uIiwiaHRtbCIsIkFUVFJJQlVUSU9OIiwidXJsIiwiY3Jvc3NPcmlnaW4iLCJ0aXRsZSIsImJhc2VtYXAiLCJCSU5HIiwiUm9hZCIsInZpc2libGUiLCJwcmVsb2FkIiwiSW5maW5pdHkiLCJCaW5nTWFwcyIsImtleSIsImltYWdlcnlTZXQiLCJBZXJpYWxXaXRoTGFiZWxzIiwiQWVyaWFsIiwxNiwiUmFzdGVyTGF5ZXJzIiwiVGlsZWRXTVNMYXllciIsImxheWVyT2JqIiwiSW1hZ2UiLCJvcGFjaXR5IiwiVGlsZVdNUyIsInBhcmFtcyIsIkxBWUVSUyIsImxheWVycyIsIlZFUlNJT04iLCJUUkFOU1BBUkVOVCIsIldNU0xheWVyIiwiSW1hZ2VXTVMiLDE3LCJNYXBIZWxwZXJzIiwiY3JlYXRlVmlld2VyIiwib3B0cyIsIl9WaWV3ZXIiLCJjb250cm9scyIsImNvbnRyb2wiLCJkZWZhdWx0cyIsImF0dHJpYnV0aW9uT3B0aW9ucyIsImNvbGxhcHNpYmxlIiwiWm9vbSIsInZpZXciLCJWaWV3IiwiaW50ZXJhY3Rpb25zIiwiaW50ZXJhY3Rpb24iLCJEcmFnUm90YXRlIiwib2wzTG9nbyIsInRhcmdldCIsIk1hcCIsInVwZGF0ZU1hcCIsIm1hcE9iamVjdCIsInVwZGF0ZVZpZXciLCJnZXRNYXAiLCJzZXRUYXJnZXQiLCJnb1RvIiwiY29vcmRpbmF0ZXMiLCJ6b29tIiwiZ2V0VmlldyIsInNldENlbnRlciIsInNldFpvb20iLCJnZXRab29tIiwiZ2V0TGF5ZXJCeU5hbWUiLCJsYXllck5hbWUiLCJnZXRMYXllcnMiLCJnZXRMZW5ndGgiLCJpdGVtIiwiZ2V0IiwicmVtb3ZlTGF5ZXJCeU5hbWUiLCJyZW1vdmVMYXllciIsImdldEFjdGl2ZUxheWVycyIsImFjdGl2ZWxheWVycyIsImZvckVhY2giLCJnZXRQcm9wZXJ0aWVzIiwicHVzaCIsImdldExheWVyc05vQmFzZSIsImFkZEJhc2VMYXllciIsImFkZExheWVyIiwiY2hhbmdlQmFzZUxheWVyIiwiYmFzZUxheWVyIiwibGF5ZXJuYW1lIiwiaW5zZXJ0QXQiLCIuLi9sYXllcnMvYmFzZXMiLDE4LCJFdmVudEVtaXR0ZXIiLDE5LCJxdWVyeSIsInNlYXJjaFVybCIsIkRlZmVycmVkIiwicmVzdWx0IiwyMCwiTWFwTGF5ZXIiLCJfbWFwTGF5ZXIiLCJfTWFwTGF5ZXIiLCJnZXRPbExheWVyIiwib2xMYXllciIsImdldExheWVySWQiLCJsYXllcklkIiwidG9nZ2xlTGF5ZXIiLCJfbGF5ZXIiLCJ1cGRhdGVMYXllcnMiLCJ1cGRhdGUiLCJMQVlFUlRZUEUiLCJMQVlFUiIsIk1FVEFMQVlFUiIsIndtc0NvbmZpZyIsImxheWVyQ29uZmlnIiwiZ2V0VmlzaWJsZUxheWVycyIsInZpc2libGVMYXllcnMiLCJnZXRTb3VyY2UiLCJ1cGRhdGVQYXJhbXMiLCJqb2luIiwiZzN3LW9sMy9zcmMvbGF5ZXJzL3Jhc3RlcnMiLDIxLCJtYXBMYXllcnMiLCJQcm9qZWN0U2VydmljZSIsIiRzY3JpcHQiLCJzZXR1cFZpZXdlciIsInNldHVwTGF5ZXJzIiwib25hZnRlciIsIm1hcExheWVyIiwiZ2V0TWFwTGF5ZXJGb3JMYXllciIsImV4dGVudCIsInByb2plY3Rpb24iLCJwcm9qIiwiUHJvamVjdGlvbiIsIm9sM2hlbHBlcnMiLCJjZW50ZXIiLCJnZXRDZW50ZXIiLCJsYXllcnNBcnJheSIsInRyYXZlcnNlTGF5ZXJzVHJlZSIsImxheWVyc3RyZWUiLCJtZXRhbGF5ZXIiLCJsYXllcnNUcmVlIiwidHJhdmVyc2UiLCJvYmoiLCJmb3JJbiIsInZhbCIsImlzTmlsIiwidW5zaGlmdCIsIm5vZGVzIiwic2hvd1ZpZXdlciIsImVsSWQiLCJnb1RvV0dTODQiLCJ0cmFuc2Zvcm0iLCJTdGF0ZVByb3ZpZGVyIiwiZGVmZXJyZWRWYWx1ZSIsIi4vbWFwbGF5ZXIiLCIuL3Byb2plY3RzZXJ2aWNlIiwiLi9wcm9qZWN0c3JlZ2lzdHJ5IiwiLi9zdGF0ZXByb3ZpZGVyIiwiLi91dGlscyIsImczdy1vbDMvc3JjL2czdy5vbDMiLDIyLCJhY3RpdmUiLDIzLCJfcmVnaXN0cnkiLCJhZGRQbHVnaW4iLCJwbHVnaW5OYW1lIiwiZ2V0UGx1Z2luIiwicmVtb3ZlUGx1Z2luIiwidGVzdGluZyIsInBsdWdpbnMiLCJzZXR1cFN0YXRlIiwicGx1Z2luRnVsbENvbmZpZ3VyYXRpb24iLCJnZXRQbHVnaW5zRnVsbENvbmZpZyIsIl9wbHVnaW4iLCJzZXRBY3RpdmVQbHVnaW4iLCJnZXRQcm9qZWN0IiwiZGVmZXJyZWQiLCJyZWplY3QiLCJwbHVnaW4iLCJnZXRBY3RpdmVQbHVnaW4iLCJwdWxsIiwic2V0VGltZW91dCIsInBsdWdpbnNGdWxsQ29uZmlnIiwicmVzb2x2ZSIsInByb21pc2UiLCIuL3BsdWdpbnNfdGVzdF9jb25maWd1cmF0aW9ucyIsIi4vcGx1Z2luc3NlcnZpY2UiLDI0LCJhY3RpdmVQYW5lbCIsInNldEFjdGl2ZVBhbmVsIiwicGFuZWxDb21wb25lbnQiLCJnZXRBY3RpdmVQYW5lbCIsMjUsIm1ha2VMYXllcnNPYmoiLCJzZXRQcm9qZWN0Iiwic2V0dGVycyIsInNldExheWVyc1Zpc2libGUiLCJpbml0U2V0dGVycyIsImdldExheWVyIiwidG9nZ2xlTGF5ZXJzIiwiZ2V0TGVnZW5kVXJsIiwyNiwiYWRkUHJvamVjdCIsInByb2plY3RHaWQiLCJnZXRDdXJyZW50UHJvamVjdCIsImN1cnJlbnRQcm9qZWN0IiwiZ2lkIiwic2V0Q3VycmVudFByb2plY3QiLCJyZXNvbHZlZFZhbHVlIiwicmVqZWN0ZWRWYWx1ZSIsImJhc2VMYXllcnMiLCJtaW5TY2FsZSIsIm1heFNjYWxlIiwiaXNGdWxsRmlsbGVkIiwiZ2V0UHJvamVjdEZ1bGxDb25maWciLCJwcm9qZWN0RnVsbENvbmZpZyIsImJ1aWxkUHJvamVjdFRyZWUiLCJmdWxsbGF5ZXIiLCJwYXJzZUludCIsImtleUJ5IiwiY2xvbmVEZWVwIiwiX3Byb2plY3QiLCJwcm9qZWN0QmFzZUNvbmZpZyIsMjcsInN0YXRlU2V0IiwicGF0aCIsIm9sZFZhbHVlIiwicGF0aEtleSIsImdldFBhdGhLZXkiLCJzZXR0ZXJzTGlzdGVuZXJzIiwiZ2V0c2V0dGVyc0xpc3RlbmVycyIsImxpc3RlbmVycyIsImNhblNldCIsImxpc3RlbmVyIiwiYXBwbHkiLCJzZXQiLCJzZXR0ZXIiLCJvbnNldHRlciIsIm9uYmVmb3JlIiwiaXNVbmRlZmluZWQiLCJsaXN0ZW5lcktleSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIkRhdGUiLCJub3ciLCJnZW5lcmF0ZVVuTGlzdGVuZXIiLCJhZnRlciIsImJlZm9yZSIsInNldHRlckZuYyIsImFyZ3MiLCJhcmd1bWVudHMiLCJiZWZvcmVMaXN0ZW5lcnMiLCJ2b3RlIiwiYWZ0ZXJMaXN0ZW5lcnMiLDI4LCJ1dGlscyIsIm1peGluIiwiZGVzdGluYXRpb24iLCJtaXhpbmluc3RhbmNlIiwic291cmNlSW5zdGFuY2UiLCJoYXNPd24iLCJvYmplY3QiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNoaWxkQ3RvciIsInBhcmVudEN0b3IiLCJ0ZW1wQ3RvciIsInN1cGVyQ2xhc3NfIiwiY29uc3RydWN0b3IiLCJtZSIsIm9wdF9tZXRob2ROYW1lIiwidmFyX2FyZ3MiLCJjYWxsZXIiLCJjYWxsZWUiLCJBcnJheSIsInNsaWNlIiwiZm91bmRDYWxsZXIiLCJjdG9yIiwibm9vcCIsMjksMzAsImNvbXB1dGVkIiwibl9wYXJlbnRDaGlsZHMiLCJjaGVja2VkIiwiZXhwYW5kZWQiLCJwYXJlbnRDaGVja2VkIiwibl9jaGlsZHMiLCJ3YXRjaCIsImlzRm9sZGVyIiwiX3Zpc2libGVDaGlsZHMiLCJ0b2dnbGUiLCJjaGVja0FsbExheWVycyIsImNoZWNrQWxsIiwidHJpQ2xhc3MiLCJ2aXNpYmxlbGF5ZXJzIiwiX3Zpc2libGVsYXllcnMiLCJoYW5kbGVyIiwib2xkIiwiZGVlcCIsImxlZ2VuZHVybCIsIm9wZW5mb3JtIiwiLi9jYXRhbG9nLmh0bWwiLCIuL2xlZ2VuZC5odG1sIiwiLi9sZWdlbmRfaXRlbS5odG1sIiwiLi90cmVlLmh0bWwiLCJnM3cvY29yZS9wcm9qZWN0c2VydmljZSIsMzEsMzIsMzMsMzQsIlJlc3VsdHNMaXN0IiwiZ290byIsIngiLCJ5IiwzNSwzNiwiR2VvY29kaW5nU2VydmljZSIsInBsYWNlaG9sZGVyIiwic2VydmljZSIsIi4vZ2VvY29kaW5nLmh0bWwiLDM3LCJ0b2FzdHIiLCJwb3NpdGlvbkNsYXNzIiwibm90aWZ5IiwzOCwzOSwiJGVsIiwiLi9tYXAuaHRtbCIsNDAsNDEsIlBhbmVsQ29tcG9uZW50IiwidG9vbFBhbmVsIiwiLi9wYW5lbC5odG1sIiwiZzN3L2d1aS9wbHVnaW5zL3BhbmVsbWl4aW4iLDQyLDQzLCJQbHVnaW5NaXhpbiIsInRvb2xQbHVnaW4iLCIuL3BsdWdpbi5odG1sIiwiZzN3L2d1aS9wbHVnaW5zL3BsdWdpbm1peGluIiw0NCw0NSwiUGFuZWxNaXhpbkNvbXBvbmVudCIsNDYsNDcsNDgsNDksIlRvb2xzUGFuZWxzIiwicGx1Z2luTWl4aW5Db21wb25lbnQiLCJwYW5lbCIsImdldFBsdWdpblBhbmVsIiwiJGFwcGVuZFRvIiwiLi9wbHVnaW5zbW9kdWxlcyIsNTAsNTEsIlBsdWdpbnNNb2R1bGUiLCJzaG93U2lkZWJhciIsIiRyZW1vdmUiLCJnZXRQbHVnaW5Nb2R1bGUiLCIuL3BsdWdpbnMuaHRtbCIsIi4vdG9vbHMtcGFuZWwuaHRtbCIsNTIsIm1vZHVsZXMiLCJwbHVnaW5Nb2R1bGUiLCJwYW5lbE1vZHVsZSIsIm1vZHVsZU5hbWUiLCJ0b29sIiwiX21vZHVsZSIsInBhbmVsTmFtZSIsImczdy9ndWkvcGx1Z2lucy9lZGl0b3IvcGFuZWwiLCJnM3cvZ3VpL3BsdWdpbnMvZWRpdG9yL3BsdWdpbiIsImczdy9ndWkvcGx1Z2lucy9pbmZvL3BhbmVsIiwiZzN3L2d1aS9wbHVnaW5zL2luZm8vcGx1Z2luIiw1Myw1NCw1NSwiLi9zZWFyY2guaHRtbCJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBVUEsR0FBRUMsRUFBRUMsRUFBRUMsR0FBRyxRQUFTQyxHQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsR0FBSUUsR0FBa0Isa0JBQVRDLFVBQXFCQSxPQUFRLEtBQUlGLEdBQUdDLEVBQUUsTUFBT0EsR0FBRUYsR0FBRSxFQUFJLElBQUdJLEVBQUUsTUFBT0EsR0FBRUosR0FBRSxFQUFJLElBQUlLLEdBQUUsR0FBSUMsT0FBTSx1QkFBdUJOLEVBQUUsSUFBSyxNQUFNSyxHQUFFRSxLQUFLLG1CQUFtQkYsRUFBRSxHQUFJRyxHQUFFWCxFQUFFRyxJQUFJUyxXQUFZYixHQUFFSSxHQUFHLEdBQUdVLEtBQUtGLEVBQUVDLFFBQVEsU0FBU2QsR0FBRyxHQUFJRSxHQUFFRCxFQUFFSSxHQUFHLEdBQUdMLEVBQUcsT0FBT0ksR0FBRUYsRUFBRUEsRUFBRUYsSUFBSWEsRUFBRUEsRUFBRUMsUUFBUWQsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxNQUFPRCxH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bENJLEVBQU9KLFFBQVUscVpBRVhndEIsSUFBSSxTQUFTdHRCLEVBQVFVLEVBQU9KLEdBQzFCTixFQUFRLGVBRWhCZ0MsS0FBSXlELFVBQVUsY0FDVkMsU0FBVTFGLEVBQVEsaUJBQ2xCNkosS0FBTSxXQUNMLFVBSURFLGVBS0R3akIsZ0JBQWdCLEdBQUdwcUIsZUFBZSxTQUFTIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uICgpe1xuICB2YXIgdCA9IHJlcXVpcmUoJ2kxOG4uc2VydmljZScpO1xuICB2YXIgYXBwVWkgPSByZXF1aXJlKCdhcHAudWknKTtcbiAgdmFyIGFwcFNlcnZpY2UgPSByZXF1aXJlKCdhcHAuc2VydmljZScpO1xuICB2YXIgYXBwID0gbnVsbDtcbiAgdmFyIGJhc2Vjb25maWcgPSB7XG4gICAgY2xpZW50OiB7XG4gICAgICBkZWJ1ZzogdHJ1ZSxcbiAgICAgIGxvY2FsOiBmYWxzZVxuICAgIH0sXG4gICAgc2VydmVyOiB7XG4gICAgICAgIHVybHM6IHtcbiAgICAgICAgICBvd3M6ICcvb3dzJyxcbiAgICAgICAgICBhcGk6ICcvYXBpJyxcbiAgICAgICAgICBjb25maWc6ICcvYXBpL2NvbmZpZydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ3JvdXA6IG51bGxcbiAgfTtcbiAgXG4gIC8vIGdlbmVyYSBpbCBjb25maWcgdXRpbGl6emF0byBjaGUgdmVycsOgIHBhc3NhdG8gZGEgQXBwU2VydmljZSBhIHR1dHRpIGkgc2Vydml6aSBHM1dcbiAgZnVuY3Rpb24gY3JlYXRlQ29uZmlnKGNvbmZpZyl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlYnVnOiB0cnVlLFxuICAgICAgcHJvamVjdHM6IGJhc2Vjb25maWcuZ3JvdXAucHJvamVjdHMsXG4gICAgICBpbml0cHJvamVjdDogYmFzZWNvbmZpZy5ncm91cC5pbml0cHJvamVjdCxcbiAgICAgIGJhc2VsYXllcnM6IGJhc2Vjb25maWcuZ3JvdXAuYmFzZWxheWVycyxcbiAgICAgIGNyczogYmFzZWNvbmZpZy5ncm91cC5jcnMsXG4gICAgICBtaW5zY2FsZTogYmFzZWNvbmZpZy5ncm91cC5taW5zY2FsZSxcbiAgICAgIG1heHNjYWxlOiBiYXNlY29uZmlnLmdyb3VwLm1heHNjYWxlLFxuICAgICAgLy8gcmljaGllc3RvIGRhIFByb2plY3RTZXJ2aWNlXG4gICAgICBnZXRXbXNVcmw6IGZ1bmN0aW9uKHByb2plY3Qpe1xuICAgICAgICByZXR1cm4gYmFzZWNvbmZpZy5zZXJ2ZXIudXJscy5vd3MrJy8nK2Jhc2Vjb25maWcuZ3JvdXAuaWQrJy8nK3Byb2plY3QudHlwZSsnLycrcHJvamVjdC5pZDtcbiAgICAgIH0sXG4gICAgICAvLyByaWNoaWVzdG8gZGEgUHJvamVjdHNSZWdpc3RyeVxuICAgICAgZ2V0UHJvamVjdENvbmZpZ1VybDogZnVuY3Rpb24ocHJvamVjdCl7XG4gICAgICAgIHJldHVybiBiYXNlY29uZmlnLnNlcnZlci51cmxzLmNvbmZpZysnLycrYmFzZWNvbmZpZy5ncm91cC5pZCsnLycrcHJvamVjdC50eXBlKycvJytwcm9qZWN0LmlkO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIGlmIChiYXNlY29uZmlnLmNsaWVudC5kZWJ1Zyl7XG4gICAgVnVlLmNvbmZpZy5kZWJ1ZyA9IHRydWU7XG4gIH1cbiAgLy9jcmVvIHVuIGZpbHRybyB2dWUgY2hlIHRyYWR1Y2UgaWwgdGVzdG8gcGFzc2F0b1xuICBWdWUuZmlsdGVyKCd0JywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHQodmFsdWUpO1xuICB9KTtcbiAgLy9pbml6aWFsaXp6YSBsYSB2dWUgYXBwaWNhemlvbmVcbiAgZnVuY3Rpb24gcnVuKCl7XG4gICAgYXBwID0gbmV3IFZ1ZSh7XG4gICAgICBlbDogJ2JvZHknLFxuICAgICAgcmVhZHk6IGZ1bmN0aW9uKCl7XG4gICAgICAgICQoZG9jdW1lbnQpLmxvY2FsaXplKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8vIGkgc2Vydml6aSBzb25vIHN0YXRpIGluaXppYWxpenphdGksIHBvc3NvIGF2dmlhcmUgbCdpc3RhbnphIFZ1ZVxuICBhcHBTZXJ2aWNlLm9uKCdyZWFkeScsZnVuY3Rpb24oKXtcbiAgICBydW4oKTtcbiAgfSk7XG4gIFxuICAvLyBzZSBzdG8gY2FyaWNhbmRvIGRhbCBjbGllbnQgZzN3LWFkbWluIGluaXRjb25maWcgw6ggZ2nDoCBpbmxpbmVkXG4gIGlmICh3aW5kb3cuaW5pdENvbmZpZykge1xuICAgIGJhc2Vjb25maWcuZ3JvdXAgPSB3aW5kb3cuaW5pdENvbmZpZy5ncm91cDsgLy8gY29uZmlnIGlzIGlubGluZWQgYnkgZzN3LWFkbWluIGluc2lkZSB0aGUgaW5kZXggdGVtcGxhdGUgYXMgYSA8c2NyaXB0PiB0YWdcbiAgICB2YXIgY29uZmlnID0gY3JlYXRlQ29uZmlnKGNvbmZpZyk7XG4gICAgYXBwU2VydmljZS5pbml0KGNvbmZpZyk7Ly8gZW1ldHRlIGV2ZW50byByZWFkeSBkb3BvIGF2ZXIgbGV0dG8gbGEgY29uZmlndXJhemlvbmVcbiAgfVxuICAvLyBhbHRyaW1lbnRpIGRldm8gYXNwZXR0YXJlIGNoZSBsb2NhbC5pbml0Y29uZmlnLmpzIGFiYmlhIGNhcmljYXRvIGwnaW5pdGNvbmZpZ1xuICBlbHNle1xuICAgICQoZG9jdW1lbnQpLm9uKCdpbml0Y29uZmlnUmVhZHknLGZ1bmN0aW9uKGUsaW5pdGNvbmZpZyl7XG4gICAgICBiYXNlY29uZmlnLmdyb3VwID0gaW5pdGNvbmZpZy5ncm91cDtcbiAgICAgIHZhciBjb25maWcgPSBjcmVhdGVDb25maWcoY29uZmlnKTtcbiAgICAgIGFwcFNlcnZpY2UuaW5pdChjb25maWcpO1xuICAgIH0pXG4gIH1cbiAgXG4gIFxuICBcbn0pKCk7XG5cbn0se1wiYXBwLnNlcnZpY2VcIjozLFwiYXBwLnVpXCI6NCxcImkxOG4uc2VydmljZVwiOjV9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJ3cmFwcGVyXFxcIj5cXG4gIDxoZWFkZXIgY2xhc3M9XFxcIm1haW4taGVhZGVyXFxcIj5cXG4gICAgPCEtLSBMb2dvIC0tPlxcbiAgICA8IS0tIFxcbiAgICAtLT5cXG4gICAgPCEtLSBIZWFkZXIgTmF2YmFyOiBzdHlsZSBjYW4gYmUgZm91bmQgaW4gaGVhZGVyLmxlc3MgLS0+XFxuICAgIDxuYXYgY2xhc3M9XFxcIm5hdmJhciBuYXZiYXItc3RhdGljLXRvcFxcXCIgcm9sZT1cXFwibmF2aWdhdGlvblxcXCI+XFxuICAgICAgPCEtLSBTaWRlYmFyIHRvZ2dsZSBidXR0b24tLT5cXG4gICAgICA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwic2lkZWJhci10b2dnbGVcXFwiIGRhdGEtdG9nZ2xlPVxcXCJvZmZjYW52YXNcXFwiIHJvbGU9XFxcImJ1dHRvblxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+RXhwYW5kPC9zcGFuPlxcbiAgICAgIDwvYT5cXG4gICAgICA8Z2VvY29kZXIgdHlwZT1cXFwiTm9taW5hdGltXFxcIj48L2dlb2NvZGVyPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcIm5hdmJhci1jdXN0b20tbWVudVxcXCI+XFxuICAgICAgICA8dWwgY2xhc3M9XFxcIm5hdiBuYXZiYXItbmF2XFxcIj5cXG4gICAgICAgIDwvdWw+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvbmF2PlxcbiAgPC9oZWFkZXI+XFxuICA8IS0tIExlZnQgc2lkZSBjb2x1bW4uIGNvbnRhaW5zIHRoZSBsb2dvIGFuZCBzaWRlYmFyIC0tPlxcbiAgXFxuICA8c2lkZWJhcj48L3NpZGViYXI+XFxuXFxuICA8IS0tIENvbnRlbnQgV3JhcHBlci4gQ29udGFpbnMgcGFnZSBjb250ZW50IC0tPlxcbiAgPGRpdiBjbGFzcz1cXFwiY29udGVudC13cmFwcGVyXFxcIiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjp3aGl0ZVxcXCI+XFxuICAgIDxnM3ctbWFwIGlkPVxcXCJtYXBcXFwiPjwvZzN3LW1hcD5cXG4gIDwvZGl2PlxcbiAgPCEtLSAvLmNvbnRlbnQtd3JhcHBlciAtLT5cXG4gIFxcbiAgPCEtLSBcXG4gIDxmb290ZXIgY2xhc3M9XFxcIm1haW4tZm9vdGVyXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwicHVsbC1yaWdodCBoaWRkZW4teHNcXFwiPlxcbiAgICAgIDxiPlZlcnNpb248L2I+IDIuMy4yXFxuICAgIDwvZGl2PlxcbiAgICA8c3Ryb25nPkNvcHlyaWdodCAmY29weTsgMjAxNC0yMDE1IDxhIGhyZWY9XFxcImh0dHA6Ly9hbG1zYWVlZHN0dWRpby5jb21cXFwiPkFsbXNhZWVkIFN0dWRpbzwvYT4uPC9zdHJvbmc+IEFsbCByaWdodHNcXG4gICAgcmVzZXJ2ZWQuXFxuICA8L2Zvb3Rlcj5cXG4gIC0tPlxcblxcbiAgPCEtLSBDb250cm9sIFNpZGViYXIgLS0+XFxuICA8ZmxvYXRiYXI+PC9mbG9hdGJhcj5cXG4gIDwhLS0gLy5jb250cm9sLXNpZGViYXIgLS0+XFxuICA8IS0tIEFkZCB0aGUgc2lkZWJhcidzIGJhY2tncm91bmQuIFRoaXMgZGl2IG11c3QgYmUgcGxhY2VkXFxuICAgICAgIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjb250cm9sIHNpZGViYXIgLS0+XFxuICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLXNpZGViYXItYmdcXFwiPjwvZGl2PlxcbjwvZGl2PlxcblwiO1xuXG59LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnZzN3L2NvcmUvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdnM3cvY29yZS91dGlscycpLmJhc2U7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnZzN3L2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2czdy9jb3JlL3Byb2plY3RzcmVnaXN0cnknKTtcbnZhciBQbHVnaW5zUmVnaXN0cnkgPSByZXF1aXJlKCdnM3cvY29yZS9wbHVnaW5zcmVnaXN0cnknKTtcbnZhciBOb21pbmF0aW0gPSByZXF1aXJlKCdnM3cvY29yZS9nZW9jb2RpbmdzZXJ2aWNlJykuTm9taW5hdGltO1xudmFyIEdlb2NvZGVMaXN0aW5nID0gcmVxdWlyZSgnZzN3L2d1aS9nZW9jb2RpbmcvZ2VvY29kZS5saXN0aW5nJyk7XG5cbnZhciBHVUkgPSByZXF1aXJlKCdnM3cvZ3VpL2d1aScpO1xuXG52YXIgRmxvYXRCYXIgPSByZXF1aXJlKCdsYXlvdXQvZmxvYXRiYXIvZmxvYXRiYXInKTtcblxudmFyIEFwcFNlcnZpY2UgPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgdGhpcy5jb25maWcgPSB7fTtcbiAgXG4gIC8vIGNoaWFtYSBpbCBjb3N0cnV0dG9yZSBkaSBHM1dPYmplY3QgKGNoZSBpbiBxdWVzdG8gbW9tZW50byBub24gZmEgbmllbnRlKVxuICBiYXNlKHRoaXMpO1xufTtcbmluaGVyaXQoQXBwU2VydmljZSxHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBBcHBTZXJ2aWNlLnByb3RvdHlwZTtcblxucHJvdG8uaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZyl7XG4gIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB0aGlzLl9ib290c3RyYXAoKTtcbiAgXG4gIE5vbWluYXRpbS5vbihcInJlc3VsdHNcIixmdW5jdGlvbihyZXN1bHRzKXtcbiAgICB2YXIgZ2wgPSBuZXcgR2VvY29kZUxpc3RpbmcoKTtcbiAgICBnbC5yZXN1bHRzID0gcmVzdWx0cztcbiAgICBGbG9hdEJhci5pbnNlcnQoZ2wpO1xuICB9KVxufTtcblxucHJvdG8uc2hvd0Zvcm0gPSBmdW5jdGlvbigpe1xuICBGbG9hdEJhci5vcGVuKCk7XG59O1xuXG5wcm90by5fYm9vdHN0cmFwID0gZnVuY3Rpb24oKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpe1xuICAgIFxuICAgIC8vIGRlZmluaXNjbyAoaW1wbGVtZW50bykgaSBtZXRvZGkgZGVsbCdBUEkgZ2xvYmFsZSBkZWxsYSBHVUlcbiAgICBHVUkuc2hvd0Zvcm0gPSB0aGlzLnNob3dGb3JtO1xuICAgIFxuICAgIC8vaW5pemlhbGl6emEgbGEgY29uZmlndXJhemlvbmUgZGVpIHNlcnZpemkuIE9nbnVuZ28gY2VyY2hlcsOgIGRhbCBjb25maWcgcXVlbGxvIGRpIGN1aSBhdnLDoCBiaXNvZ25vXG4gICAgLy91bmEgdm9sdGEgZmluaXRhIGxhIGNvbmZpZ3VyYXppb25lIGVtZXR0byBsJ2V2ZW50byByZWFkeS4gQSBxdWVzdG8gcHVudG8gcG90csOyIGF2dmlhcmUgbCdpc3RhbnphIFZ1ZSBnbG9iYWxlXG4gICAgJC53aGVuKFxuICAgICAgUHJvamVjdHNSZWdpc3RyeS5pbml0KHRoaXMuY29uZmlnKSxcbiAgICAgIFBsdWdpbnNSZWdpc3RyeS5pbml0KHRoaXMuY29uZmlnKVxuICAgICkudGhlbihmdW5jdGlvbigpe1xuICAgICAgc2VsZi5lbWl0KCdyZWFkeScpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBBcHBTZXJ2aWNlO1xuXG59LHtcImczdy9jb3JlL2czd29iamVjdFwiOjE4LFwiZzN3L2NvcmUvZ2VvY29kaW5nc2VydmljZVwiOjE5LFwiZzN3L2NvcmUvcGx1Z2luc3JlZ2lzdHJ5XCI6MjMsXCJnM3cvY29yZS9wcm9qZWN0c3JlZ2lzdHJ5XCI6MjYsXCJnM3cvY29yZS91dGlsc1wiOjI4LFwiZzN3L2d1aS9nZW9jb2RpbmcvZ2VvY29kZS5saXN0aW5nXCI6MzQsXCJnM3cvZ3VpL2d1aVwiOjM3LFwibGF5b3V0L2Zsb2F0YmFyL2Zsb2F0YmFyXCI6N31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHQgPSByZXF1aXJlKCdpMThuLnNlcnZpY2UnKTtcbnJlcXVpcmUoJ2czdy9ndWkvbWFwL21hcCcpO1xucmVxdWlyZSgnZzN3L2d1aS9nZW9jb2RpbmcvZ2VvY29kaW5nJyk7XG52YXIgbGF5b3V0ID0gcmVxdWlyZSgnbGF5b3V0L2xheW91dCcpO1xucmVxdWlyZSgnbGF5b3V0L3NpZGViYXIvc2lkZWJhcicpO1xudmFyIEZsb2F0QmFyID0gcmVxdWlyZSgnbGF5b3V0L2Zsb2F0YmFyL2Zsb2F0YmFyJyk7XG52YXIgTWFwU2VydmljZSA9IHJlcXVpcmUoJ2czdy9jb3JlL21hcHNlcnZpY2UnKTtcblxuVnVlLmNvbXBvbmVudCgnYXBwJyx7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYXBwLmh0bWwnKSxcbiAgICByZWFkeTogZnVuY3Rpb24oKXtcbiAgICAgIC8qIHN0YXJ0IHRvIHJlbmRlciBMYXlvdXRNYW5hZ2VyIGxheW91dCAqL1xuICAgICAgbGF5b3V0LnNldHVwKCk7XG4gICAgICAkKFwiYm9keVwiKS50b2dnbGVDbGFzcyhcImZpeGVkXCIpO1xuICAgICAgbGF5b3V0LmxheW91dC5maXhTaWRlYmFyKCk7XG4gICAgICAvL0ZpeCB0aGUgcHJvYmxlbSB3aXRoIHJpZ2h0IHNpZGViYXIgYW5kIGxheW91dCBib3hlZFxuICAgICAgbGF5b3V0LnB1c2hNZW51LmV4cGFuZE9uSG92ZXIoKTtcbiAgICAgIGxheW91dC5sYXlvdXQuYWN0aXZhdGUoKTtcbiAgICAgIGxheW91dC5jb250cm9sU2lkZWJhci5fZml4KCQoXCIuY29udHJvbC1zaWRlYmFyLWJnXCIpKTtcbiAgICAgIGxheW91dC5jb250cm9sU2lkZWJhci5fZml4KCQoXCIuY29udHJvbC1zaWRlYmFyXCIpKTtcbiAgICAgIFxuICAgICAgRmxvYXRCYXIuaW5pdChsYXlvdXQpO1xuICAgICAgXG4gICAgICAvKiBtYXAgcmVzaXplIGNhbGN1bGF0aW9ucyAqL1xuICAgICAgZnVuY3Rpb24gc2V0TWFwRGl2SGVpZ2h0KCl7XG4gICAgICAgICQoXCIjbWFwXCIpLmhlaWdodCgkKHdpbmRvdykuaW5uZXJIZWlnaHQoKS0kKFwiLm5hdmJhclwiKS5pbm5lckhlaWdodCgpKTtcbiAgICAgICAgTWFwU2VydmljZS52aWV3ZXIubWFwLnVwZGF0ZVNpemUoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZnVuY3Rpb24gc2V0TWFwRGl2V2lkdGgoYW5pbWF0aW5nKXtcbiAgICAgICAgdmFyIG9mZnNldCA9ICQoXCIubWFpbi1zaWRlYmFyXCIpLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgIC8vIHRoaXMgaXMgcmVxdWlyZWQgYmVjYXVzZSBkdXJpbmcgYW5pbWF0aW9uIEkgZ2V0IHRoZSBvZmZzZXQgQkVGT1JFIHN0YXJ0aW5nIHRvIGNvbGxhcHNlIHdoaWxlIHdoZW4gbm90IGFuaW1hdGluZyBJIG5lZWQgdGhlIG9mZnNldCBtaW51cyB0aGUgd2lkdGhcbiAgICAgICAgaWYgKCFhbmltYXRpbmcpe1xuICAgICAgICAgIG9mZnNldCA9IG9mZnNldCAtICQoXCIubWFpbi1zaWRlYmFyXCIpLmlubmVyV2lkdGgoKTtcbiAgICAgICAgfVxuICAgICAgICAkKFwiI21hcFwiKS53aWR0aCgkKHdpbmRvdykuaW5uZXJXaWR0aCgpICsgb2Zmc2V0KTtcbiAgICAgICAgTWFwU2VydmljZS52aWV3ZXIubWFwLnVwZGF0ZVNpemUoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgJChcImJvZHlcIikub24oXCJleHBhbmRlZC5wdXNoTWVudVwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIHNldE1hcERpdldpZHRoKHRydWUpO1xuICAgICAgfSk7XG4gICAgICAkKFwiYm9keVwiKS5vbihcImNvbGxhcHNlZC5wdXNoTWVudVwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIHNldE1hcERpdldpZHRoKHRydWUpO1xuICAgICAgfSk7XG4gICAgICBzZXRNYXBEaXZIZWlnaHQoKTtcbiAgICAgIFxuICAgICAgdmFyIGRyYXdpbmcgPSBmYWxzZTtcbiAgICAgIHZhciByZXNpemVGaXJlZCA9IGZhbHNlO1xuICAgICAgXG4gICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBzZXQgcmVzaXplZEZpcmVkIHRvIHRydWUgYW5kIGV4ZWN1dGUgZHJhd1Jlc2l6ZSBpZiBpdCdzIG5vdCBhbHJlYWR5IHJ1bm5pbmdcbiAgICAgICAgaWYgKGRyYXdpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXNpemVGaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBkcmF3UmVzaXplKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBkcmF3UmVzaXplKCkge1xuICAgICAgICB2YXIgaGVpZ2h0O1xuICAgICAgICAvLyByZW5kZXIgZnJpZW5kbHkgcmVzaXplIGxvb3BcbiAgICAgICAgaWYgKHJlc2l6ZUZpcmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXNpemVGaXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZHJhd2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHNldE1hcERpdkhlaWdodCgpO1xuICAgICAgICAgICAgc2V0TWFwRGl2V2lkdGgoZmFsc2UpO1xuXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd1Jlc2l6ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcmF3aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qIGVuZCBtYXAgcmVzaXplIGNhbGN1bGF0aW9ucyAqL1xuICAgIH1cbn0pO1xuXG59LHtcIi4vYXBwLmh0bWxcIjoyLFwiZzN3L2NvcmUvbWFwc2VydmljZVwiOjIxLFwiZzN3L2d1aS9nZW9jb2RpbmcvZ2VvY29kaW5nXCI6MzYsXCJnM3cvZ3VpL21hcC9tYXBcIjozOSxcImkxOG4uc2VydmljZVwiOjUsXCJsYXlvdXQvZmxvYXRiYXIvZmxvYXRiYXJcIjo3LFwibGF5b3V0L2xheW91dFwiOjgsXCJsYXlvdXQvc2lkZWJhci9zaWRlYmFyXCI6MTJ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmkxOG5leHRcbiAgICAudXNlKGkxOG5leHRYSFJCYWNrZW5kKVxuICAgIC5pbml0KHsgXG4gICAgICAgIGxuZzogJ2l0JyxcbiAgICAgICAgbnM6ICdhcHAnLFxuICAgICAgICBmYWxsYmFja0xuZzogJ2l0JyxcbiAgICAgICAgcmVzb3VyY2VzOiByZXF1aXJlKCcuLi9sb2NhbGVzL2l0L2FwcC5qc29uJylcbiAgICB9KTtcbiAgICBcbnZhciB0ID0gZnVuY3Rpb24odGV4dCl7XG4gICAgdmFyIHRyYWQgPSBpMThuZXh0LnQodGV4dCk7XG4gICAgcmV0dXJuIHRyYWQ7XG59O1xuXG5qcXVlcnlJMThuZXh0LmluaXQoaTE4bmV4dCwgJCwge1xuICB0TmFtZTogJ3QnLCAvLyAtLT4gYXBwZW5kcyAkLnQgPSBpMThuZXh0LnRcbiAgaTE4bk5hbWU6ICdpMThuJywgLy8gLS0+IGFwcGVuZHMgJC5pMThuID0gaTE4bmV4dFxuICBoYW5kbGVOYW1lOiAnbG9jYWxpemUnLCAvLyAtLT4gYXBwZW5kcyAkKHNlbGVjdG9yKS5sb2NhbGl6ZShvcHRzKTtcbiAgc2VsZWN0b3JBdHRyOiAnZGF0YS1pMThuJywgLy8gc2VsZWN0b3IgZm9yIHRyYW5zbGF0aW5nIGVsZW1lbnRzXG4gIHRhcmdldEF0dHI6ICdkYXRhLWkxOG4tdGFyZ2V0JywgLy8gZWxlbWVudCBhdHRyaWJ1dGUgdG8gZ3JhYiB0YXJnZXQgZWxlbWVudCB0byB0cmFuc2xhdGUgKGlmIGRpZmZyZW50IHRoZW4gaXRzZWxmKVxuICBvcHRpb25zQXR0cjogJ2RhdGEtaTE4bi1vcHRpb25zJywgLy8gZWxlbWVudCBhdHRyaWJ1dGUgdGhhdCBjb250YWlucyBvcHRpb25zLCB3aWxsIGxvYWQvc2V0IGlmIHVzZU9wdGlvbnNBdHRyID0gdHJ1ZVxuICB1c2VPcHRpb25zQXR0cjogZmFsc2UsIC8vIHNlZSBvcHRpb25zQXR0clxuICBwYXJzZURlZmF1bHRWYWx1ZUZyb21Db250ZW50OiB0cnVlIC8vIHBhcnNlcyBkZWZhdWx0IHZhbHVlcyBmcm9tIGNvbnRlbnQgZWxlLnZhbCBvciBlbGUudGV4dFxufSk7XG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IHQ7XG5cbn0se1wiLi4vbG9jYWxlcy9pdC9hcHAuanNvblwiOjEzfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGFzaWRlIGNsYXNzPVxcXCJjb250cm9sLXNpZGViYXIgY29udHJvbC1zaWRlYmFyLWxpZ2h0XFxcIiA+XFxuICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wteHMtMTIgY29sLXNtLTEyIGNvbC1tZC0xMlxcXCI+PGJ1dHRvbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcHVsbC1yaWdodFxcXCIgQGNsaWNrPVxcXCJjbG9zZVxcXCI+PC9idXR0b24+PC9kaXY+XFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC14cy0xMiBjb2wtc20tMTIgY29sLW1kLTEyXFxcIj48ZGl2IGlkPVxcXCJmbG9hdGJhci1jb250ZW50LXdyYXBwZXJcXFwiIGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+PC9kaXY+XFxuICA8L2Rpdj5cXG4gIFxcbjwvYXNpZGU+XFxuXCI7XG5cbn0se31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gRmxvYXRCYXIoKXtcbiAgdGhpcy5zdGF0ZSA9IHt9O1xuICB0aGlzLmxheW91dCA9IG51bGw7XG4gIHRoaXMuc2lkZWJhckVsID0gbnVsbDtcbiAgdGhpcy5jaGlsZCA9IG51bGw7XG4gIFxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihsYXlvdXQpe1xuICAgIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICAgIHRoaXMuc2lkZWJhckVsID0gJCh0aGlzLmxheW91dC5vcHRpb25zLmNvbnRyb2xTaWRlYmFyT3B0aW9ucy5zZWxlY3Rvcik7XG4gIH07XG4gIFxuICB0aGlzLm9wZW4gPSBmdW5jdGlvbigpe1xuICAgIHRoaXMubGF5b3V0LmZsb2F0QmFyLm9wZW4odGhpcy5zaWRlYmFyRWwsdHJ1ZSk7XG4gIH07XG4gIFxuICB0aGlzLmNsb3NlID0gZnVuY3Rpb24oKXtcbiAgICBpZiAodGhpcy5jaGlsZCAmJiBfLmhhc0luKHRoaXMuY2hpbGQsXCIkZGVzdHJveVwiKSl7XG4gICAgICB0aGlzLmNoaWxkLiRkZXN0cm95KCk7XG4gICAgICB0aGlzLmNoaWxkID0gbnVsbDtcbiAgICB9O1xuICAgIHRoaXMubGF5b3V0LmZsb2F0QmFyLmNsb3NlKHRoaXMuc2lkZWJhckVsLHRydWUpO1xuICB9O1xuICBcbiAgdGhpcy5pbnNlcnQgPSBmdW5jdGlvbih2bSl7XG4gICAgdGhpcy5jaGlsZCA9IHZtO1xuICAgIHRoaXMuY2hpbGQuJG1vdW50KFwiI2Zsb2F0YmFyLWNvbnRlbnQtd3JhcHBlclwiKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgfTtcbn1cblxudmFyIGZsb2F0QmFyID0gbmV3IEZsb2F0QmFyO1xubW9kdWxlLmV4cG9ydHMgPSBmbG9hdEJhcjtcblxuVnVlLmNvbXBvbmVudCgnZmxvYXRiYXInLHtcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9mbG9hdGJhci5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiAgeyBcbiAgICAgICAgY29udGVudDogXCJDb250ZW51dG9cIlxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgY2xvc2U6IGZ1bmN0aW9uKCl7XG4gICAgICAgIGZsb2F0QmFyLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxufSk7XG5cbn0se1wiLi9mbG9hdGJhci5odG1sXCI6Nn1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy9NYWtlIHN1cmUgalF1ZXJ5IGhhcyBiZWVuIGxvYWRlZCBiZWZvcmUgYXBwLmpzXG5pZiAodHlwZW9mIGpRdWVyeSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJMYXlvdXRNYW5hZ2VyIHJlcXVpcmVzIGpRdWVyeVwiKTtcbn1cblxuJC5MYXlvdXRNYW5hZ2VyID0ge307XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAtIExheW91dE1hbmFnZXIgT3B0aW9ucyAtXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogTW9kaWZ5IHRoZXNlIG9wdGlvbnMgdG8gc3VpdCB5b3VyIGltcGxlbWVudGF0aW9uXG4gKi9cbiQuTGF5b3V0TWFuYWdlci5vcHRpb25zID0ge1xuICAvL0FkZCBzbGltc2Nyb2xsIHRvIG5hdmJhciBtZW51c1xuICAvL1RoaXMgcmVxdWlyZXMgeW91IHRvIGxvYWQgdGhlIHNsaW1zY3JvbGwgcGx1Z2luXG4gIC8vaW4gZXZlcnkgcGFnZSBiZWZvcmUgYXBwLmpzXG4gIG5hdmJhck1lbnVTbGltc2Nyb2xsOiB0cnVlLFxuICBuYXZiYXJNZW51U2xpbXNjcm9sbFdpZHRoOiBcIjBweFwiLCAvL1RoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsIGJhclxuICBuYXZiYXJNZW51SGVpZ2h0OiBcIjIwMHB4XCIsIC8vVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgbWVudVxuICAvL0dlbmVyYWwgYW5pbWF0aW9uIHNwZWVkIGZvciBKUyBhbmltYXRlZCBlbGVtZW50cyBzdWNoIGFzIGJveCBjb2xsYXBzZS9leHBhbmQgYW5kXG4gIC8vc2lkZWJhciB0cmVldmlldyBzbGlkZSB1cC9kb3duLiBUaGlzIG9wdGlvbnMgYWNjZXB0cyBhbiBpbnRlZ2VyIGFzIG1pbGxpc2Vjb25kcyxcbiAgLy8nZmFzdCcsICdub3JtYWwnLCBvciAnc2xvdydcbiAgYW5pbWF0aW9uU3BlZWQ6J2Zhc3QnLFxuICAvL1NpZGViYXIgcHVzaCBtZW51IHRvZ2dsZSBidXR0b24gc2VsZWN0b3JcbiAgc2lkZWJhclRvZ2dsZVNlbGVjdG9yOiBcIltkYXRhLXRvZ2dsZT0nb2ZmY2FudmFzJ11cIixcbiAgLy9BY3RpdmF0ZSBzaWRlYmFyIHB1c2ggbWVudVxuICBzaWRlYmFyUHVzaE1lbnU6IHRydWUsXG4gIC8vQWN0aXZhdGUgc2lkZWJhciBzbGltc2Nyb2xsIGlmIHRoZSBmaXhlZCBsYXlvdXQgaXMgc2V0IChyZXF1aXJlcyBTbGltU2Nyb2xsIFBsdWdpbilcbiAgc2lkZWJhclNsaW1TY3JvbGw6IGZhbHNlLFxuICAvL0VuYWJsZSBzaWRlYmFyIGV4cGFuZCBvbiBob3ZlciBlZmZlY3QgZm9yIHNpZGViYXIgbWluaVxuICAvL1RoaXMgb3B0aW9uIGlzIGZvcmNlZCB0byB0cnVlIGlmIGJvdGggdGhlIGZpeGVkIGxheW91dCBhbmQgc2lkZWJhciBtaW5pXG4gIC8vYXJlIHVzZWQgdG9nZXRoZXJcbiAgc2lkZWJhckV4cGFuZE9uSG92ZXI6IGZhbHNlLFxuICAvL0JveFJlZnJlc2ggUGx1Z2luXG4gIGVuYWJsZUJveFJlZnJlc2g6IHRydWUsXG4gIC8vQm9vdHN0cmFwLmpzIHRvb2x0aXBcbiAgZW5hYmxlQlNUb3BwbHRpcDogdHJ1ZSxcbiAgQlNUb29sdGlwU2VsZWN0b3I6IFwiW2RhdGEtdG9nZ2xlPSd0b29sdGlwJ11cIixcbiAgLy9FbmFibGUgRmFzdCBDbGljay4gRmFzdGNsaWNrLmpzIGNyZWF0ZXMgYSBtb3JlXG4gIC8vbmF0aXZlIHRvdWNoIGV4cGVyaWVuY2Ugd2l0aCB0b3VjaCBkZXZpY2VzLiBJZiB5b3VcbiAgLy9jaG9vc2UgdG8gZW5hYmxlIHRoZSBwbHVnaW4sIG1ha2Ugc3VyZSB5b3UgbG9hZCB0aGUgc2NyaXB0XG4gIC8vYmVmb3JlIExheW91dE1hbmFnZXIncyBhcHAuanNcbiAgZW5hYmxlRmFzdGNsaWNrOiB0cnVlLFxuICAvL0NvbnRyb2wgU2lkZWJhciBPcHRpb25zXG4gIGVuYWJsZUNvbnRyb2xTaWRlYmFyOiB0cnVlLFxuICBjb250cm9sU2lkZWJhck9wdGlvbnM6IHtcbiAgICAvL1doaWNoIGJ1dHRvbiBzaG91bGQgdHJpZ2dlciB0aGUgb3Blbi9jbG9zZSBldmVudFxuICAgIHRvZ2dsZUJ0blNlbGVjdG9yOiBcIltkYXRhLXRvZ2dsZT0nY29udHJvbC1zaWRlYmFyJ11cIixcbiAgICAvL1RoZSBzaWRlYmFyIHNlbGVjdG9yXG4gICAgc2VsZWN0b3I6IFwiLmNvbnRyb2wtc2lkZWJhclwiLFxuICAgIC8vRW5hYmxlIHNsaWRlIG92ZXIgY29udGVudFxuICAgIHNsaWRlOiB0cnVlXG4gIH0sXG4gIC8vQm94IFdpZGdldCBQbHVnaW4uIEVuYWJsZSB0aGlzIHBsdWdpblxuICAvL3RvIGFsbG93IGJveGVzIHRvIGJlIGNvbGxhcHNlZCBhbmQvb3IgcmVtb3ZlZFxuICBlbmFibGVCb3hXaWRnZXQ6IHRydWUsXG4gIC8vQm94IFdpZGdldCBwbHVnaW4gb3B0aW9uc1xuICBib3hXaWRnZXRPcHRpb25zOiB7XG4gICAgYm94V2lkZ2V0SWNvbnM6IHtcbiAgICAgIC8vQ29sbGFwc2UgaWNvblxuICAgICAgY29sbGFwc2U6ICdmYS1taW51cycsXG4gICAgICAvL09wZW4gaWNvblxuICAgICAgb3BlbjogJ2ZhLXBsdXMnLFxuICAgICAgLy9SZW1vdmUgaWNvblxuICAgICAgcmVtb3ZlOiAnZmEtdGltZXMnXG4gICAgfSxcbiAgICBib3hXaWRnZXRTZWxlY3RvcnM6IHtcbiAgICAgIC8vUmVtb3ZlIGJ1dHRvbiBzZWxlY3RvclxuICAgICAgcmVtb3ZlOiAnW2RhdGEtd2lkZ2V0PVwicmVtb3ZlXCJdJyxcbiAgICAgIC8vQ29sbGFwc2UgYnV0dG9uIHNlbGVjdG9yXG4gICAgICBjb2xsYXBzZTogJ1tkYXRhLXdpZGdldD1cImNvbGxhcHNlXCJdJ1xuICAgIH1cbiAgfSxcbiAgLy9EaXJlY3QgQ2hhdCBwbHVnaW4gb3B0aW9uc1xuICBkaXJlY3RDaGF0OiB7XG4gICAgLy9FbmFibGUgZGlyZWN0IGNoYXQgYnkgZGVmYXVsdFxuICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAvL1RoZSBidXR0b24gdG8gb3BlbiBhbmQgY2xvc2UgdGhlIGNoYXQgY29udGFjdHMgcGFuZVxuICAgIGNvbnRhY3RUb2dnbGVTZWxlY3RvcjogJ1tkYXRhLXdpZGdldD1cImNoYXQtcGFuZS10b2dnbGVcIl0nXG4gIH0sXG4gIC8vRGVmaW5lIHRoZSBzZXQgb2YgY29sb3JzIHRvIHVzZSBnbG9iYWxseSBhcm91bmQgdGhlIHdlYnNpdGVcbiAgY29sb3JzOiB7XG4gICAgbGlnaHRCbHVlOiBcIiMzYzhkYmNcIixcbiAgICByZWQ6IFwiI2Y1Njk1NFwiLFxuICAgIGdyZWVuOiBcIiMwMGE2NWFcIixcbiAgICBhcXVhOiBcIiMwMGMwZWZcIixcbiAgICB5ZWxsb3c6IFwiI2YzOWMxMlwiLFxuICAgIGJsdWU6IFwiIzAwNzNiN1wiLFxuICAgIG5hdnk6IFwiIzAwMUYzRlwiLFxuICAgIHRlYWw6IFwiIzM5Q0NDQ1wiLFxuICAgIG9saXZlOiBcIiMzRDk5NzBcIixcbiAgICBsaW1lOiBcIiMwMUZGNzBcIixcbiAgICBvcmFuZ2U6IFwiI0ZGODUxQlwiLFxuICAgIGZ1Y2hzaWE6IFwiI0YwMTJCRVwiLFxuICAgIHB1cnBsZTogXCIjOEUyNEFBXCIsXG4gICAgbWFyb29uOiBcIiNEODFCNjBcIixcbiAgICBibGFjazogXCIjMjIyMjIyXCIsXG4gICAgZ3JheTogXCIjZDJkNmRlXCJcbiAgfSxcbiAgLy9UaGUgc3RhbmRhcmQgc2NyZWVuIHNpemVzIHRoYXQgYm9vdHN0cmFwIHVzZXMuXG4gIC8vSWYgeW91IGNoYW5nZSB0aGVzZSBpbiB0aGUgdmFyaWFibGVzLmxlc3MgZmlsZSwgY2hhbmdlXG4gIC8vdGhlbSBoZXJlIHRvby5cbiAgc2NyZWVuU2l6ZXM6IHtcbiAgICB4czogNDgwLFxuICAgIHNtOiA3NjgsXG4gICAgbWQ6IDk5MixcbiAgICBsZzogMTIwMFxuICB9XG59O1xuXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIC0gSW5pdGlhbGl6ZSB0aGUgTGF5b3V0TWFuYWdlciBPYmplY3QgLVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWxsIExheW91dE1hbmFnZXIgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBiZWxvdy5cbiAqL1xuJC5MYXlvdXRNYW5hZ2VyLl9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyogTGF5b3V0XG4gICAqID09PT09PVxuICAgKiBGaXhlcyB0aGUgbGF5b3V0IGhlaWdodCBpbiBjYXNlIG1pbi1oZWlnaHQgZmFpbHMuXG4gICAqXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKiBAdXNhZ2UgJC5MYXlvdXRNYW5hZ2VyLmxheW91dC5hY3RpdmF0ZSgpXG4gICAqICAgICAgICAkLkxheW91dE1hbmFnZXIubGF5b3V0LmZpeCgpXG4gICAqICAgICAgICAkLkxheW91dE1hbmFnZXIubGF5b3V0LmZpeFNpZGViYXIoKVxuICAgKi9cbiAgJC5MYXlvdXRNYW5hZ2VyLmxheW91dCA9IHtcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIF90aGlzLmZpeCgpO1xuICAgICAgX3RoaXMuZml4U2lkZWJhcigpO1xuICAgICAgJCh3aW5kb3csIFwiLndyYXBwZXJcIikucmVzaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuZml4KCk7XG4gICAgICAgIF90aGlzLmZpeFNpZGViYXIoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZml4OiBmdW5jdGlvbiAoKSB7XG4gICAgICAvL0dldCB3aW5kb3cgaGVpZ2h0IGFuZCB0aGUgd3JhcHBlciBoZWlnaHRcbiAgICAgIHZhciBuZWcgPSAkKCcubWFpbi1oZWFkZXInKS5vdXRlckhlaWdodCgpICsgJCgnLm1haW4tZm9vdGVyJykub3V0ZXJIZWlnaHQoKTtcbiAgICAgIHZhciB3aW5kb3dfaGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgdmFyIHNpZGViYXJfaGVpZ2h0ID0gJChcIi5zaWRlYmFyXCIpLmhlaWdodCgpO1xuICAgICAgLy9TZXQgdGhlIG1pbi1oZWlnaHQgb2YgdGhlIGNvbnRlbnQgYW5kIHNpZGViYXIgYmFzZWQgb24gdGhlXG4gICAgICAvL3RoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50LlxuICAgICAgaWYgKCQoXCJib2R5XCIpLmhhc0NsYXNzKFwiZml4ZWRcIikpIHtcbiAgICAgICAgJChcIi5jb250ZW50LXdyYXBwZXIsIC5yaWdodC1zaWRlXCIpLmNzcygnbWluLWhlaWdodCcsIHdpbmRvd19oZWlnaHQgLSAkKCcubWFpbi1mb290ZXInKS5vdXRlckhlaWdodCgpKTtcbiAgICAgICAgJChcIi5jb250ZW50LXdyYXBwZXIsIC5yaWdodC1zaWRlXCIpLmNzcygnaGVpZ2h0Jywgd2luZG93X2hlaWdodCAtICQoJy5tYWluLWZvb3RlcicpLm91dGVySGVpZ2h0KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBvc3RTZXRXaWR0aDtcbiAgICAgICAgaWYgKHdpbmRvd19oZWlnaHQgPj0gc2lkZWJhcl9oZWlnaHQpIHtcbiAgICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgd2luZG93X2hlaWdodCAtIG5lZyk7XG4gICAgICAgICAgcG9zdFNldFdpZHRoID0gd2luZG93X2hlaWdodCAtIG5lZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgc2lkZWJhcl9oZWlnaHQpO1xuICAgICAgICAgIHBvc3RTZXRXaWR0aCA9IHNpZGViYXJfaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vRml4IGZvciB0aGUgY29udHJvbCBzaWRlYmFyIGhlaWdodFxuICAgICAgICB2YXIgY29udHJvbFNpZGViYXIgPSAkKCQuTGF5b3V0TWFuYWdlci5vcHRpb25zLmNvbnRyb2xTaWRlYmFyT3B0aW9ucy5zZWxlY3Rvcik7XG4gICAgICAgIGlmICh0eXBlb2YgY29udHJvbFNpZGViYXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpZiAoY29udHJvbFNpZGViYXIuaGVpZ2h0KCkgPiBwb3N0U2V0V2lkdGgpXG4gICAgICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0JywgY29udHJvbFNpZGViYXIuaGVpZ2h0KCkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9LFxuICAgIGZpeFNpZGViYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vTWFrZSBzdXJlIHRoZSBib2R5IHRhZyBoYXMgdGhlIC5maXhlZCBjbGFzc1xuICAgICAgaWYgKCEkKFwiYm9keVwiKS5oYXNDbGFzcyhcImZpeGVkXCIpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJC5mbi5zbGltU2Nyb2xsICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgJChcIi5zaWRlYmFyXCIpLnNsaW1TY3JvbGwoe2Rlc3Ryb3k6IHRydWV9KS5oZWlnaHQoXCJhdXRvXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mICQuZm4uc2xpbVNjcm9sbCA9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihcIkVycm9yOiB0aGUgZml4ZWQgbGF5b3V0IHJlcXVpcmVzIHRoZSBzbGltc2Nyb2xsIHBsdWdpbiFcIik7XG4gICAgICB9XG4gICAgICAvL0VuYWJsZSBzbGltc2Nyb2xsIGZvciBmaXhlZCBsYXlvdXRcbiAgICAgIGlmICgkLkxheW91dE1hbmFnZXIub3B0aW9ucy5zaWRlYmFyU2xpbVNjcm9sbCkge1xuICAgICAgICBpZiAodHlwZW9mICQuZm4uc2xpbVNjcm9sbCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vRGVzdHJveSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAkKFwiLnNpZGViYXJcIikuc2xpbVNjcm9sbCh7ZGVzdHJveTogdHJ1ZX0pLmhlaWdodChcImF1dG9cIik7XG4gICAgICAgICAgLy9BZGQgc2xpbXNjcm9sbFxuICAgICAgICAgICQoXCIuc2lkZWJhclwiKS5zbGltc2Nyb2xsKHtcbiAgICAgICAgICAgIGhlaWdodDogKCQod2luZG93KS5oZWlnaHQoKSAtICQoXCIubWFpbi1oZWFkZXJcIikuaGVpZ2h0KCkpICsgXCJweFwiLFxuICAgICAgICAgICAgY29sb3I6IFwicmdiYSgyNTUsMjU1LDI1NSwwLjcpXCIsXG4gICAgICAgICAgICBzaXplOiBcIjNweFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgJChcIi5zaWRlYmFyXCIpLmNzcyh7J2hlaWdodCc6ICgkKHdpbmRvdykuaGVpZ2h0KCkgLSAkKFwiLm1haW4taGVhZGVyXCIpLmhlaWdodCgpKSArIFwicHhcIn0pXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qIFB1c2hNZW51KClcbiAgICogPT09PT09PT09PVxuICAgKiBBZGRzIHRoZSBwdXNoIG1lbnUgZnVuY3Rpb25hbGl0eSB0byB0aGUgc2lkZWJhci5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb25cbiAgICogQHVzYWdlOiAkLkxheW91dE1hbmFnZXIucHVzaE1lbnUoXCJbZGF0YS10b2dnbGU9J29mZmNhbnZhcyddXCIpXG4gICAqL1xuICAkLkxheW91dE1hbmFnZXIucHVzaE1lbnUgPSB7XG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICh0b2dnbGVCdG4pIHtcbiAgICAgIC8vR2V0IHRoZSBzY3JlZW4gc2l6ZXNcbiAgICAgIHZhciBzY3JlZW5TaXplcyA9ICQuTGF5b3V0TWFuYWdlci5vcHRpb25zLnNjcmVlblNpemVzO1xuXG4gICAgICAvL0VuYWJsZSBzaWRlYmFyIHRvZ2dsZVxuICAgICAgJCh0b2dnbGVCdG4pLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvL0VuYWJsZSBzaWRlYmFyIHB1c2ggbWVudVxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiAoc2NyZWVuU2l6ZXMuc20gLSAxKSkge1xuICAgICAgICAgIGlmICgkKFwiYm9keVwiKS5oYXNDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpKSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpLnRyaWdnZXIoJ2V4cGFuZGVkLnB1c2hNZW51Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKCdzaWRlYmFyLWNvbGxhcHNlJykudHJpZ2dlcignY29sbGFwc2VkLnB1c2hNZW51Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vSGFuZGxlIHNpZGViYXIgcHVzaCBtZW51IGZvciBzbWFsbCBzY3JlZW5zXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICgkKFwiYm9keVwiKS5oYXNDbGFzcygnc2lkZWJhci1vcGVuJykpIHtcbiAgICAgICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKCdzaWRlYmFyLW9wZW4nKS5yZW1vdmVDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpLnRyaWdnZXIoJ2NvbGxhcHNlZC5wdXNoTWVudScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcygnc2lkZWJhci1vcGVuJykudHJpZ2dlcignZXhwYW5kZWQucHVzaE1lbnUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlclwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vRW5hYmxlIGhpZGUgbWVudSB3aGVuIGNsaWNraW5nIG9uIHRoZSBjb250ZW50LXdyYXBwZXIgb24gc21hbGwgc2NyZWVuc1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPD0gKHNjcmVlblNpemVzLnNtIC0gMSkgJiYgJChcImJvZHlcIikuaGFzQ2xhc3MoXCJzaWRlYmFyLW9wZW5cIikpIHtcbiAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1vcGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvL0VuYWJsZSBleHBhbmQgb24gaG92ZXIgZm9yIHNpZGViYXIgbWluaVxuICAgICAgaWYgKCQuTGF5b3V0TWFuYWdlci5vcHRpb25zLnNpZGViYXJFeHBhbmRPbkhvdmVyIHx8ICgkKCdib2R5JykuaGFzQ2xhc3MoJ2ZpeGVkJykgJiYgJCgnYm9keScpLmhhc0NsYXNzKCdzaWRlYmFyLW1pbmknKSkpIHtcbiAgICAgICAgdGhpcy5leHBhbmRPbkhvdmVyKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBleHBhbmRPbkhvdmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHNjcmVlbldpZHRoID0gJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuc2NyZWVuU2l6ZXMuc20gLSAxO1xuICAgICAgLy9FeHBhbmQgc2lkZWJhciBvbiBob3ZlclxuICAgICAgJCgnLm1haW4tc2lkZWJhcicpLmhvdmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnc2lkZWJhci1taW5pJykgJiYgJChcImJvZHlcIikuaGFzQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKSAmJiAkKHdpbmRvdykud2lkdGgoKSA+IHNjcmVlbldpZHRoKSB7XG4gICAgICAgICAgX3RoaXMuZXhwYW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnc2lkZWJhci1taW5pJykgJiYgJCgnYm9keScpLmhhc0NsYXNzKCdzaWRlYmFyLWV4cGFuZGVkLW9uLWhvdmVyJykgJiYgJCh3aW5kb3cpLndpZHRoKCkgPiBzY3JlZW5XaWR0aCkge1xuICAgICAgICAgIF90aGlzLmNvbGxhcHNlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhwYW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpLmFkZENsYXNzKCdzaWRlYmFyLWV4cGFuZGVkLW9uLWhvdmVyJyk7XG4gICAgfSxcbiAgICBjb2xsYXBzZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnc2lkZWJhci1leHBhbmRlZC1vbi1ob3ZlcicpKSB7XG4gICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnc2lkZWJhci1leHBhbmRlZC1vbi1ob3ZlcicpLmFkZENsYXNzKCdzaWRlYmFyLWNvbGxhcHNlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qIFRyZWUoKVxuICAgKiA9PT09PT1cbiAgICogQ29udmVydHMgdGhlIHNpZGViYXIgaW50byBhIG11bHRpbGV2ZWxcbiAgICogdHJlZSB2aWV3IG1lbnUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAqIEBVc2FnZTogJC5MYXlvdXRNYW5hZ2VyLnRyZWUoJy5zaWRlYmFyJylcbiAgICovXG4gICQuTGF5b3V0TWFuYWdlci50cmVlID0gZnVuY3Rpb24gKG1lbnUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBhbmltYXRpb25TcGVlZCA9ICQuTGF5b3V0TWFuYWdlci5vcHRpb25zLmFuaW1hdGlvblNwZWVkO1xuICAgIC8vY2xpY2sgZXZlbnQgLy9cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBtZW51ICsgJyBsaSBhJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgLy9HZXQgdGhlIGNsaWNrZWQgbGluayBhbmQgdGhlIG5leHQgZWxlbWVudFxuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgIC8vaXMgdGhlIGNvbnRlbnQgb2YgdGhlIFwiYWNjb3JkaW9uXCIgdWwgLy9cbiAgICAgIHZhciBjaGVja0VsZW1lbnQgPSAkdGhpcy5uZXh0KCk7XG5cbiAgICAgIC8vQ2hlY2sgaWYgdGhlIG5leHQgZWxlbWVudCBpcyBhIG1lbnUgYW5kIGlzIHZpc2libGVcbiAgICAgIGlmICgoY2hlY2tFbGVtZW50LmlzKCcudHJlZXZpZXctbWVudScpKSAmJiAoY2hlY2tFbGVtZW50LmlzKCc6dmlzaWJsZScpKSkge1xuICAgICAgICAvL0Nsb3NlIHRoZSBtZW51XG4gICAgICAgIGNoZWNrRWxlbWVudC5zbGlkZVVwKGFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2hlY2tFbGVtZW50LnBhcmVudChcImxpLnRyZWV2aWV3XCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgIGNoZWNrRWxlbWVudC5yZW1vdmVDbGFzcygnbWVudS1vcGVuJyk7XG4gICAgICAgICAgLy9GaXggdGhlIGxheW91dCBpbiBjYXNlIHRoZSBzaWRlYmFyIHN0cmV0Y2hlcyBvdmVyIHRoZSBoZWlnaHQgb2YgdGhlIHdpbmRvd1xuICAgICAgICAgIC8vX3RoaXMubGF5b3V0LmZpeCgpO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuICAgICAgLy9JZiB0aGUgbWVudSBpcyBub3QgdmlzaWJsZVxuICAgICAgZWxzZSBpZiAoKGNoZWNrRWxlbWVudC5pcygnLnRyZWV2aWV3LW1lbnUnKSkgJiYgKCFjaGVja0VsZW1lbnQuaXMoJzp2aXNpYmxlJykpKSB7XG4gICAgICAgIC8vR2V0IHRoZSBwYXJlbnQgbWVudVxuICAgICAgICB2YXIgcGFyZW50ID0gJHRoaXMucGFyZW50cygndWwnKS5maXJzdCgpO1xuICAgICAgICB2YXIgcGFyZW50X2xpID0gJHRoaXMucGFyZW50KFwibGlcIik7XG4gICAgICAgIHZhciBsaV9zaWJsaW5ncyA9IHBhcmVudF9saS5zaWJsaW5ncygpO1xuICAgICAgICB2YXIgcGFyZW50X2ZpbmRfYWN0aXZlO1xuICAgICAgICB2YXIgc2lkZWJhcl9jb250ZW50X2hlaWdodCA9IHBhcmVudC5oZWlnaHQoKSAtIHBhcmVudC5maW5kKCdsaS5oZWFkZXInKS5vdXRlckhlaWdodCgpO1xuICAgICAgICB2YXIgdHJlZXZpZXdIZWlnaHQgPSBwYXJlbnRfbGkub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgbGlfc2libGluZ3Mubm90KCcuaGVhZGVyJykuZWFjaChmdW5jdGlvbihpbmRleCwgZWwpIHtcbiAgICAgICAgICAgICAgICB0cmVldmlld0hlaWdodCs9JChlbCkuZmluZCgnYScpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2VjdGlvbl9oZWlnaHQgPSAoc2lkZWJhcl9jb250ZW50X2hlaWdodCAtIHRyZWV2aWV3SGVpZ2h0KTtcbiAgICAgICAgY2hlY2tFbGVtZW50LmNzcyh7XG4gICAgICAgICAgJ2hlaWdodCc6IHNlY3Rpb25faGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgICAnbWF4LWhlaWdodCc6c2VjdGlvbl9oZWlnaHQgKyAncHgnLFxuICAgICAgICAgICdvdmVyZmxvdy15JzogJ2F1dG8nXG4gICAgICAgIH0pO1xuICAgICAgICAvL0Nsb3NlIGFsbCBvcGVuIG1lbnVzIHdpdGhpbiB0aGUgcGFyZW50XG4gICAgICAgIHZhciB1bCA9IHBhcmVudC5maW5kKCd1bC50cmVldmlldy1tZW51OnZpc2libGUnKS5zbGlkZVVwKGFuaW1hdGlvblNwZWVkKTtcbiAgICAgICAgLy9SZW1vdmUgdGhlIG1lbnUtb3BlbiBjbGFzcyBmcm9tIHRoZSBwYXJlbnRcbiAgICAgICAgdWwucmVtb3ZlQ2xhc3MoJ21lbnUtb3BlbicpO1xuICAgICAgICAvL0dldCB0aGUgcGFyZW50IGxpXG4gICAgICAgIC8vT3BlbiB0aGUgdGFyZ2V0IG1lbnUgYW5kIGFkZCB0aGUgbWVudS1vcGVuIGNsYXNzXG4gICAgICAgIGNoZWNrRWxlbWVudC5zbGlkZURvd24oYW5pbWF0aW9uU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvL0FkZCB0aGUgY2xhc3MgYWN0aXZlIHRvIHRoZSBwYXJlbnQgbGlcbiAgICAgICAgICBjaGVja0VsZW1lbnQuYWRkQ2xhc3MoJ21lbnUtb3BlbicpO1xuICAgICAgICAgIHBhcmVudF9maW5kX2FjdGl2ZSA9IHBhcmVudC5maW5kKCdsaS50cmVldmlldy5hY3RpdmUnKTtcbiAgICAgICAgICBwYXJlbnRfZmluZF9hY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIHBhcmVudF9saS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgLy9GaXggdGhlIGxheW91dCBpbiBjYXNlIHRoZSBzaWRlYmFyIHN0cmV0Y2hlcyBvdmVyIHRoZSBoZWlnaHQgb2YgdGhlIHdpbmRvd1xuICAgICAgICAgIF90aGlzLmxheW91dC5maXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvL2lmIHRoaXMgaXNuJ3QgYSBsaW5rLCBwcmV2ZW50IHRoZSBwYWdlIGZyb20gYmVpbmcgcmVkaXJlY3RlZFxuICAgICAgaWYgKGNoZWNrRWxlbWVudC5pcygnLnRyZWV2aWV3LW1lbnUnKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyogQ29udHJvbFNpZGViYXJcbiAgICogPT09PT09PT09PT09PT1cbiAgICogQWRkcyBmdW5jdGlvbmFsaXR5IHRvIHRoZSByaWdodCBzaWRlYmFyXG4gICAqXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKiBAdXNhZ2UgJC5MYXlvdXRNYW5hZ2VyLmNvbnRyb2xTaWRlYmFyLmFjdGl2YXRlKG9wdGlvbnMpXG4gICAqL1xuICAkLkxheW91dE1hbmFnZXIuZmxvYXRCYXIgPSAkLkxheW91dE1hbmFnZXIuY29udHJvbFNpZGViYXIgPSB7XG4gICAgLy9pbnN0YW50aWF0ZSB0aGUgb2JqZWN0XG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vR2V0IHRoZSBvYmplY3RcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAvL1VwZGF0ZSBvcHRpb25zXG4gICAgICB2YXIgbyA9ICQuTGF5b3V0TWFuYWdlci5vcHRpb25zLmNvbnRyb2xTaWRlYmFyT3B0aW9ucztcbiAgICAgIC8vR2V0IHRoZSBzaWRlYmFyXG4gICAgICB2YXIgc2lkZWJhciA9ICQoby5zZWxlY3Rvcik7XG4gICAgICAvL1RoZSB0b2dnbGUgYnV0dG9uXG4gICAgICB2YXIgYnRuID0gJChvLnRvZ2dsZUJ0blNlbGVjdG9yKTtcblxuICAgICAgLy9MaXN0ZW4gdG8gdGhlIGNsaWNrIGV2ZW50XG4gICAgICBidG4ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvL0lmIHRoZSBzaWRlYmFyIGlzIG5vdCBvcGVuXG4gICAgICAgIGlmICghc2lkZWJhci5oYXNDbGFzcygnY29udHJvbC1zaWRlYmFyLW9wZW4nKSAmJiAhJCgnYm9keScpLmhhc0NsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpKSB7XG4gICAgICAgICAgLy9PcGVuIHRoZSBzaWRlYmFyXG4gICAgICAgICAgX3RoaXMub3BlbihzaWRlYmFyLCBvLnNsaWRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZShzaWRlYmFyLCBvLnNsaWRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vSWYgdGhlIGJvZHkgaGFzIGEgYm94ZWQgbGF5b3V0LCBmaXggdGhlIHNpZGViYXIgYmcgcG9zaXRpb25cbiAgICAgIHZhciBiZyA9ICQoXCIuY29udHJvbC1zaWRlYmFyLWJnXCIpO1xuICAgICAgX3RoaXMuX2ZpeChiZyk7XG5cbiAgICAgIC8vSWYgdGhlIGJvZHkgaGFzIGEgZml4ZWQgbGF5b3V0LCBtYWtlIHRoZSBjb250cm9sIHNpZGViYXIgZml4ZWRcbiAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ2ZpeGVkJykpIHtcbiAgICAgICAgX3RoaXMuX2ZpeEZvckZpeGVkKHNpZGViYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9JZiB0aGUgY29udGVudCBoZWlnaHQgaXMgbGVzcyB0aGFuIHRoZSBzaWRlYmFyJ3MgaGVpZ2h0LCBmb3JjZSBtYXggaGVpZ2h0XG4gICAgICAgIGlmICgkKCcuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZScpLmhlaWdodCgpIDwgc2lkZWJhci5oZWlnaHQoKSkge1xuICAgICAgICAgIF90aGlzLl9maXhGb3JDb250ZW50KHNpZGViYXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvL09wZW4gdGhlIGNvbnRyb2wgc2lkZWJhclxuICAgIG9wZW46IGZ1bmN0aW9uIChzaWRlYmFyLCBzbGlkZSkge1xuICAgICAgLy9TbGlkZSBvdmVyIGNvbnRlbnRcbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBzaWRlYmFyLmFkZENsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9QdXNoIHRoZSBjb250ZW50IGJ5IGFkZGluZyB0aGUgb3BlbiBjbGFzcyB0byB0aGUgYm9keSBpbnN0ZWFkXG4gICAgICAgIC8vb2YgdGhlIHNpZGViYXIgaXRzZWxmXG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnY29udHJvbC1zaWRlYmFyLW9wZW4nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vQ2xvc2UgdGhlIGNvbnRyb2wgc2lkZWJhclxuICAgIGNsb3NlOiBmdW5jdGlvbiAoc2lkZWJhciwgc2xpZGUpIHtcbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBzaWRlYmFyLnJlbW92ZUNsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2ZpeDogZnVuY3Rpb24gKHNpZGViYXIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoJ2xheW91dC1ib3hlZCcpKSB7XG4gICAgICAgIHNpZGViYXIuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgICBzaWRlYmFyLmhlaWdodCgkKFwiLndyYXBwZXJcIikuaGVpZ2h0KCkpO1xuICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fZml4KHNpZGViYXIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpZGViYXIuY3NzKHtcbiAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgICAgICdoZWlnaHQnOiAnYXV0bydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfZml4Rm9yRml4ZWQ6IGZ1bmN0aW9uIChzaWRlYmFyKSB7XG4gICAgICBzaWRlYmFyLmNzcyh7XG4gICAgICAgICdwb3NpdGlvbic6ICdmaXhlZCcsXG4gICAgICAgICdtYXgtaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAnb3ZlcmZsb3cnOiAnYXV0bycsXG4gICAgICAgICdwYWRkaW5nLWJvdHRvbSc6ICc1MHB4J1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBfZml4Rm9yQ29udGVudDogZnVuY3Rpb24gKHNpZGViYXIpIHtcbiAgICAgICQoXCIuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZVwiKS5jc3MoJ21pbi1oZWlnaHQnLCBzaWRlYmFyLmhlaWdodCgpKTtcbiAgICB9XG4gIH07XG5cbiAgLyogQm94V2lkZ2V0XG4gICAqID09PT09PT09PVxuICAgKiBCb3hXaWRnZXQgaXMgYSBwbHVnaW4gdG8gaGFuZGxlIGNvbGxhcHNpbmcgYW5kXG4gICAqIHJlbW92aW5nIGJveGVzIGZyb20gdGhlIHNjcmVlbi5cbiAgICpcbiAgICogQHR5cGUgT2JqZWN0XG4gICAqIEB1c2FnZSAkLkxheW91dE1hbmFnZXIuYm94V2lkZ2V0LmFjdGl2YXRlKClcbiAgICogICAgICAgIFNldCBhbGwgeW91ciBvcHRpb25zIGluIHRoZSBtYWluICQuTGF5b3V0TWFuYWdlci5vcHRpb25zIG9iamVjdFxuICAgKi9cbiAgJC5MYXlvdXRNYW5hZ2VyLmJveFdpZGdldCA9IHtcbiAgICBzZWxlY3RvcnM6ICQuTGF5b3V0TWFuYWdlci5vcHRpb25zLmJveFdpZGdldE9wdGlvbnMuYm94V2lkZ2V0U2VsZWN0b3JzLFxuICAgIGljb25zOiAkLkxheW91dE1hbmFnZXIub3B0aW9ucy5ib3hXaWRnZXRPcHRpb25zLmJveFdpZGdldEljb25zLFxuICAgIGFuaW1hdGlvblNwZWVkOiAkLkxheW91dE1hbmFnZXIub3B0aW9ucy5hbmltYXRpb25TcGVlZCxcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKF9ib3gpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoIV9ib3gpIHtcbiAgICAgICAgX2JveCA9IGRvY3VtZW50OyAvLyBhY3RpdmF0ZSBhbGwgYm94ZXMgcGVyIGRlZmF1bHRcbiAgICAgIH1cbiAgICAgIC8vTGlzdGVuIGZvciBjb2xsYXBzZSBldmVudCB0cmlnZ2Vyc1xuICAgICAgJChfYm94KS5vbignY2xpY2snLCBfdGhpcy5zZWxlY3RvcnMuY29sbGFwc2UsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuY29sbGFwc2UoJCh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgICAgLy9MaXN0ZW4gZm9yIHJlbW92ZSBldmVudCB0cmlnZ2Vyc1xuICAgICAgJChfYm94KS5vbignY2xpY2snLCBfdGhpcy5zZWxlY3RvcnMucmVtb3ZlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnJlbW92ZSgkKHRoaXMpKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY29sbGFwc2U6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgLy9GaW5kIHRoZSBib3ggcGFyZW50XG4gICAgICB2YXIgYm94ID0gZWxlbWVudC5wYXJlbnRzKFwiLmJveFwiKS5maXJzdCgpO1xuICAgICAgLy9GaW5kIHRoZSBib2R5IGFuZCB0aGUgZm9vdGVyXG4gICAgICB2YXIgYm94X2NvbnRlbnQgPSBib3guZmluZChcIj4gLmJveC1ib2R5LCA+IC5ib3gtZm9vdGVyLCA+IGZvcm0gID4uYm94LWJvZHksID4gZm9ybSA+IC5ib3gtZm9vdGVyXCIpO1xuICAgICAgaWYgKCFib3guaGFzQ2xhc3MoXCJjb2xsYXBzZWQtYm94XCIpKSB7XG4gICAgICAgIC8vQ29udmVydCBtaW51cyBpbnRvIHBsdXNcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbihcIjpmaXJzdFwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhfdGhpcy5pY29ucy5jb2xsYXBzZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMuaWNvbnMub3Blbik7XG4gICAgICAgIC8vSGlkZSB0aGUgY29udGVudFxuICAgICAgICBib3hfY29udGVudC5zbGlkZVVwKF90aGlzLmFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYm94LmFkZENsYXNzKFwiY29sbGFwc2VkLWJveFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL0NvbnZlcnQgcGx1cyBpbnRvIG1pbnVzXG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW4oXCI6Zmlyc3RcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoX3RoaXMuaWNvbnMub3BlbilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMuaWNvbnMuY29sbGFwc2UpO1xuICAgICAgICAvL1Nob3cgdGhlIGNvbnRlbnRcbiAgICAgICAgYm94X2NvbnRlbnQuc2xpZGVEb3duKF90aGlzLmFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYm94LnJlbW92ZUNsYXNzKFwiY29sbGFwc2VkLWJveFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAvL0ZpbmQgdGhlIGJveCBwYXJlbnRcbiAgICAgIHZhciBib3ggPSBlbGVtZW50LnBhcmVudHMoXCIuYm94XCIpLmZpcnN0KCk7XG4gICAgICBib3guc2xpZGVVcCh0aGlzLmFuaW1hdGlvblNwZWVkKTtcbiAgICB9XG4gIH07XG4gIFxuICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyO1xufTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAtIEN1c3RvbSBQbHVnaW5zIC1cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWxsIGN1c3RvbSBwbHVnaW5zIGFyZSBkZWZpbmVkIGJlbG93LlxuICovXG5cbi8qXG4gKiBCT1ggUkVGUkVTSCBCVVRUT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBpcyBhIGN1c3RvbSBwbHVnaW4gdG8gdXNlIHdpdGggdGhlIGNvbXBvbmVudCBCT1guIEl0IGFsbG93cyB5b3UgdG8gYWRkXG4gKiBhIHJlZnJlc2ggYnV0dG9uIHRvIHRoZSBib3guIEl0IGNvbnZlcnRzIHRoZSBib3gncyBzdGF0ZSB0byBhIGxvYWRpbmcgc3RhdGUuXG4gKlxuICogQHR5cGUgcGx1Z2luXG4gKiBAdXNhZ2UgJChcIiNib3gtd2lkZ2V0XCIpLmJveFJlZnJlc2goIG9wdGlvbnMgKTtcbiAqL1xuJC5MYXlvdXRNYW5hZ2VyLmFkZFJlZnJlc2hCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQuZm4uYm94UmVmcmVzaCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAvLyBSZW5kZXIgb3B0aW9uc1xuICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcbiAgICAgIC8vUmVmcmVzaCBidXR0b24gc2VsZWN0b3JcbiAgICAgIHRyaWdnZXI6IFwiLnJlZnJlc2gtYnRuXCIsXG4gICAgICAvL0ZpbGUgc291cmNlIHRvIGJlIGxvYWRlZCAoZS5nOiBhamF4L3NyYy5waHApXG4gICAgICBzb3VyY2U6IFwiXCIsXG4gICAgICAvL0NhbGxiYWNrc1xuICAgICAgb25Mb2FkU3RhcnQ6IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgIH0sIC8vUmlnaHQgYWZ0ZXIgdGhlIGJ1dHRvbiBoYXMgYmVlbiBjbGlja2VkXG4gICAgICBvbkxvYWREb25lOiBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgIHJldHVybiBib3g7XG4gICAgICB9IC8vV2hlbiB0aGUgc291cmNlIGhhcyBiZWVuIGxvYWRlZFxuXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICAvL1RoZSBvdmVybGF5XG4gICAgdmFyIG92ZXJsYXkgPSAkKCc8ZGl2IGNsYXNzPVwib3ZlcmxheVwiPjxkaXYgY2xhc3M9XCJmYSBmYS1yZWZyZXNoIGZhLXNwaW5cIj48L2Rpdj48L2Rpdj4nKTtcblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgLy9pZiBhIHNvdXJjZSBpcyBzcGVjaWZpZWRcbiAgICAgIGlmIChzZXR0aW5ncy5zb3VyY2UgPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKFwiUGxlYXNlIHNwZWNpZnkgYSBzb3VyY2UgZmlyc3QgLSBib3hSZWZyZXNoKClcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy90aGUgYm94XG4gICAgICB2YXIgYm94ID0gJCh0aGlzKTtcbiAgICAgIC8vdGhlIGJ1dHRvblxuICAgICAgdmFyIHJCdG4gPSBib3guZmluZChzZXR0aW5ncy50cmlnZ2VyKS5maXJzdCgpO1xuXG4gICAgICAvL09uIHRyaWdnZXIgY2xpY2tcbiAgICAgIHJCdG4ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvL0FkZCBsb2FkaW5nIG92ZXJsYXlcbiAgICAgICAgc3RhcnQoYm94KTtcblxuICAgICAgICAvL1BlcmZvcm0gYWpheCBjYWxsXG4gICAgICAgIGJveC5maW5kKFwiLmJveC1ib2R5XCIpLmxvYWQoc2V0dGluZ3Muc291cmNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZG9uZShib3gpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gc3RhcnQoYm94KSB7XG4gICAgICAvL0FkZCBvdmVybGF5IGFuZCBsb2FkaW5nIGltZ1xuICAgICAgYm94LmFwcGVuZChvdmVybGF5KTtcblxuICAgICAgc2V0dGluZ3Mub25Mb2FkU3RhcnQuY2FsbChib3gpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvbmUoYm94KSB7XG4gICAgICAvL1JlbW92ZSBvdmVybGF5IGFuZCBsb2FkaW5nIGltZ1xuICAgICAgYm94LmZpbmQob3ZlcmxheSkucmVtb3ZlKCk7XG5cbiAgICAgIHNldHRpbmdzLm9uTG9hZERvbmUuY2FsbChib3gpO1xuICAgIH1cblxuICB9O1xuICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyO1xufTtcblxuLypcbiAqIEVYUExJQ0lUIEJPWCBBQ1RJVkFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBpcyBhIGN1c3RvbSBwbHVnaW4gdG8gdXNlIHdpdGggdGhlIGNvbXBvbmVudCBCT1guIEl0IGFsbG93cyB5b3UgdG8gYWN0aXZhdGVcbiAqIGEgYm94IGluc2VydGVkIGluIHRoZSBET00gYWZ0ZXIgdGhlIGFwcC5qcyB3YXMgbG9hZGVkLlxuICpcbiAqIEB0eXBlIHBsdWdpblxuICogQHVzYWdlICQoXCIjYm94LXdpZGdldFwiKS5hY3RpdmF0ZUJveCgpO1xuICovXG4kLkxheW91dE1hbmFnZXIuYWN0aXZhdGVCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAkLmZuLmFjdGl2YXRlQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICQuTGF5b3V0TWFuYWdlci5ib3hXaWRnZXQuYWN0aXZhdGUodGhpcyk7XG4gIH07XG4gIFxuICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyO1xufTtcblxuLypcbiAqIFRPRE8gTElTVCBDVVNUT00gUExVR0lOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBwbHVnaW4gZGVwZW5kcyBvbiBpQ2hlY2sgcGx1Z2luIGZvciBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzXG4gKlxuICogQHR5cGUgcGx1Z2luXG4gKiBAdXNhZ2UgJChcIiN0b2RvLXdpZGdldFwiKS50b2RvbGlzdCggb3B0aW9ucyApO1xuICovXG5cbiQuTGF5b3V0TWFuYWdlci5saXN0Q3VzdG9tUGx1Z2luID0gZnVuY3Rpb24gKCkge1xuXG5cdCAgJ3VzZSBzdHJpY3QnO1xuXG5cdCAgJC5mbi50b2RvbGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICAvLyBSZW5kZXIgb3B0aW9uc1xuXHQgICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe1xuXHQgICAgICAvL1doZW4gdGhlIHVzZXIgY2hlY2tzIHRoZSBpbnB1dFxuXHQgICAgICBvbkNoZWNrOiBmdW5jdGlvbiAoZWxlKSB7XG5cdCAgICAgICAgcmV0dXJuIGVsZTtcblx0ICAgICAgfSxcblx0ICAgICAgLy9XaGVuIHRoZSB1c2VyIHVuY2hlY2tzIHRoZSBpbnB1dFxuXHQgICAgICBvblVuY2hlY2s6IGZ1bmN0aW9uIChlbGUpIHtcblx0ICAgICAgICByZXR1cm4gZWxlO1xuXHQgICAgICB9XG5cdCAgICB9LCBvcHRpb25zKTtcblxuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cblx0ICAgICAgaWYgKHR5cGVvZiAkLmZuLmlDaGVjayAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICQoJ2lucHV0JywgdGhpcykub24oJ2lmQ2hlY2tlZCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBlbGUgPSAkKHRoaXMpLnBhcmVudHMoXCJsaVwiKS5maXJzdCgpO1xuXHQgICAgICAgICAgZWxlLnRvZ2dsZUNsYXNzKFwiZG9uZVwiKTtcblx0ICAgICAgICAgIHNldHRpbmdzLm9uQ2hlY2suY2FsbChlbGUpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJCgnaW5wdXQnLCB0aGlzKS5vbignaWZVbmNoZWNrZWQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgZWxlID0gJCh0aGlzKS5wYXJlbnRzKFwibGlcIikuZmlyc3QoKTtcblx0ICAgICAgICAgIGVsZS50b2dnbGVDbGFzcyhcImRvbmVcIik7XG5cdCAgICAgICAgICBzZXR0aW5ncy5vblVuY2hlY2suY2FsbChlbGUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICQoJ2lucHV0JywgdGhpcykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBlbGUgPSAkKHRoaXMpLnBhcmVudHMoXCJsaVwiKS5maXJzdCgpO1xuXHQgICAgICAgICAgZWxlLnRvZ2dsZUNsYXNzKFwiZG9uZVwiKTtcblx0ICAgICAgICAgIGlmICgkKCdpbnB1dCcsIGVsZSkuaXMoXCI6Y2hlY2tlZFwiKSkge1xuXHQgICAgICAgICAgICBzZXR0aW5ncy5vbkNoZWNrLmNhbGwoZWxlKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHNldHRpbmdzLm9uVW5jaGVjay5jYWxsKGVsZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgcmV0dXJuICQuTGF5b3V0TWFuYWdlcjtcblx0fTtcblx0XG5cdC8qIC0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKiAtIEltcGxlbWVudGF0aW9uIC1cblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIFRoZSBuZXh0IGJsb2NrIG9mIGNvZGUgaW1wbGVtZW50cyBMYXlvdXRNYW5hZ2VyJ3Ncblx0ICogZnVuY3Rpb25zIGFuZCBwbHVnaW5zIGFzIHNwZWNpZmllZCBieSB0aGVcblx0ICogb3B0aW9ucyBhYm92ZS5cblx0ICovXG5cdCQuTGF5b3V0TWFuYWdlci5zZXR1cCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0ICBcInVzZSBzdHJpY3RcIjtcblxuXHQgIC8vRml4IGZvciBJRSBwYWdlIHRyYW5zaXRpb25zXG5cdCAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJob2xkLXRyYW5zaXRpb25cIik7XG5cblx0ICAvL0V4dGVuZCBvcHRpb25zIGlmIGV4dGVybmFsIG9wdGlvbnMgZXhpc3Rcblx0ICBpZiAodHlwZW9mIExheW91dE1hbmFnZXJPcHRpb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAkLmV4dGVuZCh0cnVlLFxuXHQgICAgICAgICAgICAkLkxheW91dE1hbmFnZXIub3B0aW9ucyxcblx0ICAgICAgICAgICAgTGF5b3V0TWFuYWdlck9wdGlvbnMpO1xuXHQgIH1cblxuXHQgIC8vRWFzeSBhY2Nlc3MgdG8gb3B0aW9uc1xuXHQgIHZhciBvID0gJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnM7XG5cblx0ICAvL1NldCB1cCB0aGUgb2JqZWN0XG5cdCAgJC5MYXlvdXRNYW5hZ2VyLl9pbml0KCk7XG5cblx0ICAvL0FjdGl2YXRlIHRoZSBsYXlvdXQgbWFrZXJcblx0ICAkLkxheW91dE1hbmFnZXIubGF5b3V0LmFjdGl2YXRlKCk7XG5cblx0ICAvL0VuYWJsZSBzaWRlYmFyIHRyZWUgdmlldyBjb250cm9sc1xuXHQgICQuTGF5b3V0TWFuYWdlci50cmVlKCcuc2lkZWJhcicpO1xuXG5cdCAgLy9FbmFibGUgY29udHJvbCBzaWRlYmFyXG5cdCAgaWYgKG8uZW5hYmxlQ29udHJvbFNpZGViYXIpIHtcblx0ICAgICQuTGF5b3V0TWFuYWdlci5jb250cm9sU2lkZWJhci5hY3RpdmF0ZSgpO1xuXHQgIH1cblxuXHQgIC8vQWRkIHNsaW1zY3JvbGwgdG8gbmF2YmFyIGRyb3Bkb3duXG5cdCAgaWYgKG8ubmF2YmFyTWVudVNsaW1zY3JvbGwgJiYgdHlwZW9mICQuZm4uc2xpbXNjcm9sbCAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgJChcIi5uYXZiYXIgLm1lbnVcIikuc2xpbXNjcm9sbCh7XG5cdCAgICAgIGhlaWdodDogby5uYXZiYXJNZW51SGVpZ2h0LFxuXHQgICAgICBhbHdheXNWaXNpYmxlOiBmYWxzZSxcblx0ICAgICAgc2l6ZTogby5uYXZiYXJNZW51U2xpbXNjcm9sbFdpZHRoXG5cdCAgICB9KS5jc3MoXCJ3aWR0aFwiLCBcIjEwMCVcIik7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBzaWRlYmFyIHB1c2ggbWVudVxuXHQgIGlmIChvLnNpZGViYXJQdXNoTWVudSkge1xuXHQgICAgJC5MYXlvdXRNYW5hZ2VyLnB1c2hNZW51LmFjdGl2YXRlKG8uc2lkZWJhclRvZ2dsZVNlbGVjdG9yKTtcblx0ICB9XG5cblx0ICAvL0FjdGl2YXRlIEJvb3RzdHJhcCB0b29sdGlwXG5cdCAgaWYgKG8uZW5hYmxlQlNUb3BwbHRpcCkge1xuXHQgICAgJCgnYm9keScpLnRvb2x0aXAoe1xuXHQgICAgICBzZWxlY3Rvcjogby5CU1Rvb2x0aXBTZWxlY3RvclxuXHQgICAgfSk7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBib3ggd2lkZ2V0XG5cdCAgaWYgKG8uZW5hYmxlQm94V2lkZ2V0KSB7XG5cdCAgICAkLkxheW91dE1hbmFnZXIuYm94V2lkZ2V0LmFjdGl2YXRlKCk7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBmYXN0IGNsaWNrXG5cdCAgaWYgKG8uZW5hYmxlRmFzdGNsaWNrICYmIHR5cGVvZiBGYXN0Q2xpY2sgIT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIEZhc3RDbGljay5hdHRhY2goZG9jdW1lbnQuYm9keSk7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBkaXJlY3QgY2hhdCB3aWRnZXRcblx0ICBpZiAoby5kaXJlY3RDaGF0LmVuYWJsZSkge1xuXHQgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgby5kaXJlY3RDaGF0LmNvbnRhY3RUb2dnbGVTZWxlY3RvciwgZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgYm94ID0gJCh0aGlzKS5wYXJlbnRzKCcuZGlyZWN0LWNoYXQnKS5maXJzdCgpO1xuXHQgICAgICBib3gudG9nZ2xlQ2xhc3MoJ2RpcmVjdC1jaGF0LWNvbnRhY3RzLW9wZW4nKTtcblx0ICAgIH0pO1xuXHQgIH1cblxuXHQgIC8qXG5cdCAgICogSU5JVElBTElaRSBCVVRUT04gVE9HR0xFXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdCAgJCgnLmJ0bi1ncm91cFtkYXRhLXRvZ2dsZT1cImJ0bi10b2dnbGVcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBncm91cCA9ICQodGhpcyk7XG5cdCAgICAkKHRoaXMpLmZpbmQoXCIuYnRuXCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIGdyb3VwLmZpbmQoXCIuYnRuLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcblx0ICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblx0ICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgfSk7XG5cblx0ICB9KTtcblx0ICBcblx0ICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyXG5cdCAgXHQuYWRkUmVmcmVzaEJ1dHRvbigpXG5cdCAgXHQuYWN0aXZhdGVCb3goKVxuXHQgIFx0Lmxpc3RDdXN0b21QbHVnaW4oKTtcblx0fTtcdFxuXG5tb2R1bGUuZXhwb3J0cyA9ICQuTGF5b3V0TWFuYWdlcjtcblxufSx7fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGxpIGNsYXNzPVxcXCJ0cmVldmlld1xcXCI+XFxuICA8YSBocmVmPVxcXCIjXFxcIj5cXG4gICAgPGkgOmNsYXNzPVxcXCJkYXRhSWNvblxcXCI+PC9pPlxcbiAgICA8c3Bhbj57e2RhdGFMYWJlbCB8IHR9fTwvc3Bhbj4gXFxuICAgIDxpIHYtaWY9XFxcIihkYXRhVHlwZSA9PT0gJ2lubGluZScpXFxcIiBjbGFzcz1cXFwiZmEgZmEtYW5nbGUtbGVmdCBwdWxsLXJpZ2h0XFxcIj48L2k+XFxuICA8L2E+XFxuICA8dWwgdi1pZj1cXFwiKGRhdGFUeXBlID09PSAnaW5saW5lJylcXFwiIGNsYXNzPVxcXCJ0cmVldmlldy1tZW51XFxcIj5cXG4gICAgPHNsb3Q+PC9zbG90PlxcbiAgPC91bD5cXG48L2xpPlxcblwiO1xuXG59LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPCEtLSBpdGVtIHRlbXBsYXRlIC0tPlxcbjxkaXYgaWQ9XFxcImNhdGFsb2dcXFwiIGNsYXNzPVxcXCJ0YWJiYWJsZS1wYW5lbFxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJ0YWJiYWJsZS1saW5lXFxcIj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRvb2wtYm94LWljb24gYmctYXF1YVxcXCI+PGkgZGF0YS10b2dnbGU9XFxcImNvbnRyb2wtc2lkZWJhclxcXCIgY2xhc3M9XFxcImZhXFxcIiA6Y2xhc3M9XFxcImRhdGFJY29uXFxcIj48L2k+PC9zcGFuPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0b29sLWJveC1jb250ZW50XFxcIj5cXG4gICAgICA8c3BhbiAgY2xhc3M9XFxcInRvb2wtYm94LW5hbWVcXFwiPkl0ZXJuZXQ8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgICA8IS0tIC8uaW5mby1ib3gtY29udGVudCAtLT5cXG4gIDwvZGl2PlxcbiAgPCEtLSAvLmluZm8tYm94IC0tPlxcbjwvZGl2PlxcblwiO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGFzaWRlIGNsYXNzPVxcXCJtYWluLXNpZGViYXJcXFwiPlxcbiAgPCEtLSBzaWRlYmFyOiBzdHlsZSBjYW4gYmUgZm91bmQgaW4gc2lkZWJhci5sZXNzIC0tPlxcblxcdDxzZWN0aW9uIGNsYXNzPVxcXCJzaWRlYmFyXFxcIj5cXG4gICAgPGczdy10b29scy1wYW5lbD48L2czdy10b29scy1wYW5lbD5cXG5cXHQgIDx1bCB2LWlmPVxcXCJhY3RpdmVQbHVnaW4uYWN0aXZlUGx1Z2luID09ICcnXFxcIiBjbGFzcz1cXFwic2lkZWJhci1tZW51XFxcIj5cXG5cXHQgICAgPCEtLTxzaWRlYmFyLWl0ZW0gZGF0YS1pY29uPVxcXCJmYSBmYS1zZWFyY2hcXFwiIGRhdGEtbGFiZWw9XFxcInNlYXJjaFxcXCIgZGF0YS10eXBlPVxcXCJpbmxpbmVcXFwiPlxcbiAgICAgICAgPGczdy1zZWFyY2g+PC9nM3ctc2VhcmNoPlxcbiAgICAgIDwvc2lkZWJhci1pdGVtPi0tPlxcbiAgICAgIDxzaWRlYmFyLWl0ZW0gZGF0YS1pY29uPVxcXCJmYSBmYS1kYXRhYmFzZVxcXCIgZGF0YS1sYWJlbD1cXFwiY2F0YWxvZ1xcXCIgZGF0YS10eXBlPVxcXCJpbmxpbmVcXFwiPlxcbiAgICAgICAgPGczdy1jYXRhbG9nPjwvZzN3LWNhdGFsb2c+XFxuICAgICAgPC9zaWRlYmFyLWl0ZW0+XFxuICAgICAgPHNpZGViYXItaXRlbSBkYXRhLWljb249XFxcImZhIGZhLWdlYXJzXFxcIiBkYXRhLWxhYmVsPVxcXCJ0b29sc1xcXCIgZGF0YS10eXBlPVxcXCJpbmxpbmVcXFwiPlxcbiAgICAgICAgPGczdy10b29scz48L2czdy10b29scz5cXG4gICAgICA8L3NpZGViYXItaXRlbT5cXG5cXHQgIDwvdWw+XFxuXFx0PC9zZWN0aW9uPlxcblxcdDwhLS0gLy5zaWRlYmFyIC0tPlxcbjwvYXNpZGU+XFxuXCI7XG5cbn0se31dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB0ID0gcmVxdWlyZSgnaTE4bi5zZXJ2aWNlJyk7XG5yZXF1aXJlKCdnM3cvZ3VpL2NhdGFsb2cvY2F0YWxvZycpO1xucmVxdWlyZSgnZzN3L2d1aS9zZWFyY2gvc2VhcmNoJyk7XG5yZXF1aXJlKCdnM3cvZ3VpL3BsdWdpbnMvcGx1Z2lucycpO1xuXG52YXIgUGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCdnM3cvY29yZS9wbHVnaW5zcmVnaXN0cnknKTtcbnZhciBQbHVnaW5zU2VydmljZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3BsdWdpbnNzZXJ2aWNlJyk7XG5cblZ1ZS5jb21wb25lbnQoJ3NpZGViYXInLHtcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zaWRlYmFyLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICBcdHJldHVybiB7XG4gICAgICAgIGJPcGVuOiB0cnVlLFxuICAgIFx0XHRiUGFnZU1vZGU6IGZhbHNlLFxuICAgIFx0XHRoZWFkZXI6IHQoJ21haW4gbmF2aWdhdGlvbicpLFxuICAgIFx0XHRhY3RpdmVQbHVnaW46IFBsdWdpbnNTZXJ2aWNlLnN0YXRlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgXHRhY3RpdmVNb2R1bGU6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgXHRcdGlmICh0aGlzLmN1cnJlbnRNb2R1bGUgPT09IGluZGV4KSB7XG4gICAgXHRcdFx0dGhpcy5jdXJyZW50TW9kdWxlID0gdW5kZWZpbmVkO1xuICAgIFx0XHRcdHJldHVybiBmYWxzZTtcbiAgICBcdFx0fVxuICAgIFx0XHR0aGlzLmN1cnJlbnRNb2R1bGUgPSBpbmRleDtcbiAgICBcdH1cblxuXHR9XG59KTtcblxuVnVlLmNvbXBvbmVudCgnc2lkZWJhci1pdGVtJyx7XG5cdHByb3BzOiBbJ2RhdGEtaWNvbicsJ2RhdGEtbGFiZWwnLCdkYXRhLXR5cGUnXSxcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zaWRlYmFyLWl0ZW0uaHRtbCcpLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIFx0cmV0dXJuIHtcbiAgICAgICAgXHRtYWluOiB0cnVlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgXHRcblx0fVxufSk7XG5cblZ1ZS5jb21wb25lbnQoJ3NpZGViYXItdG9vbCcse1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3NpZGViYXItdG9vbC5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgXHRyZXR1cm4ge1xuICAgICAgICBzdG9yZTogUGx1Z2luUmVnaXN0cnkuc3RvcmVcbiAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdCAgfVxufSk7XG5cbn0se1wiLi9zaWRlYmFyLWl0ZW0uaHRtbFwiOjksXCIuL3NpZGViYXItdG9vbC5odG1sXCI6MTAsXCIuL3NpZGViYXIuaHRtbFwiOjExLFwiZzN3L2NvcmUvcGx1Z2luc3JlZ2lzdHJ5XCI6MjMsXCJnM3cvY29yZS9wbHVnaW5zc2VydmljZVwiOjI0LFwiZzN3L2d1aS9jYXRhbG9nL2NhdGFsb2dcIjozMCxcImczdy9ndWkvcGx1Z2lucy9wbHVnaW5zXCI6NTEsXCJnM3cvZ3VpL3NlYXJjaC9zZWFyY2hcIjo1NSxcImkxOG4uc2VydmljZVwiOjV9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz17XG4gICAgXCJpdFwiOiB7XG4gICAgICAgIFwidHJhbnNsYXRpb25cIjoge1xuICAgICAgICAgICAgXCJzZWFyY2hcIjogXCJSaWNlcmNhXCIsXG4gICAgICAgICAgICBcImNhdGFsb2dcIjogXCJDYXRhbG9nbyBkYXRpXCIsXG4gICAgICAgICAgICBcInRvb2xzXCI6IFwiU3RydW1lbnRpXCIsXG4gICAgICAgICAgICBcInRyZWVcIjogXCJEYXRpXCIsXG4gICAgICAgICAgICBcImxlZ2VuZFwiOiBcIkxlZ2VuZGFcIixcbiAgICAgICAgICAgIFwic3RyZWV0X3NlYXJjaFwiOiBcIkNlcmNhIGluZGlyaXp6b1wiXG4gICAgICAgIH1cbiAgICB9XG59XG5cbn0se31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBtYXBoZWxwZXJzID0gcmVxdWlyZSgnLi9tYXAvbWFwaGVscGVycycpO1xuXG4oZnVuY3Rpb24gKG5hbWUsIHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmYWN0b3J5KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfVxuICBlbHNlIHtcbiAgICByb290W25hbWVdID0gZmFjdG9yeSgpO1xuICB9XG59KSgnZzN3b2wzJywgdGhpcywgZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIFxuICBmdW5jdGlvbiBtZXJnZShvYmoxLG9iajIpe1xuICAgIHZhciBvYmozID0ge307XG4gICAgZm9yICh2YXIgYXR0cm5hbWUgaW4gb2JqMSkgeyBvYmozW2F0dHJuYW1lXSA9IG9iajFbYXR0cm5hbWVdOyB9XG4gICAgZm9yICh2YXIgYXR0cm5hbWUgaW4gb2JqMikgeyBvYmozW2F0dHJuYW1lXSA9IG9iajJbYXR0cm5hbWVdOyB9XG4gICAgcmV0dXJuIG9iajM7XG4gIH07XG4gIFxuICB2YXIgaGVscGVycyA9IG1lcmdlKHt9LG1hcGhlbHBlcnMpO1xuICBcbiAgcmV0dXJuIHtcbiAgICBoZWxwZXJzOiBoZWxwZXJzXG4gIH1cbn0pO1xuXG59LHtcIi4vbWFwL21hcGhlbHBlcnNcIjoxN31dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBCYXNlTGF5ZXJzID0ge307XG5cbkJhc2VMYXllcnMuT1NNID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuT1NNKHtcbiAgICBhdHRyaWJ1dGlvbnM6IFtcbiAgICAgIG5ldyBvbC5BdHRyaWJ1dGlvbih7XG4gICAgICAgIGh0bWw6ICdBbGwgbWFwcyAmY29weTsgJyArXG4gICAgICAgICAgICAnPGEgaHJlZj1cImh0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4nXG4gICAgICB9KSxcbiAgICAgIG9sLnNvdXJjZS5PU00uQVRUUklCVVRJT05cbiAgICBdLFxuICAgIHVybDogJ2h0dHA6Ly97YS1jfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsXG4gICAgY3Jvc3NPcmlnaW46IG51bGxcbiAgfSksXG4gIGlkOiAnb3NtJyxcbiAgdGl0bGU6ICdPU00nLFxuICBiYXNlbWFwOiB0cnVlXG59KTtcblxuQmFzZUxheWVycy5CSU5HID0ge307XG5cbkJhc2VMYXllcnMuQklORy5Sb2FkID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICBuYW1lOidSb2FkJyxcbiAgdmlzaWJsZTogZmFsc2UsXG4gIHByZWxvYWQ6IEluZmluaXR5LFxuICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuQmluZ01hcHMoe1xuICAgIGtleTogJ0FtX21BU25VQS1qdFczTzNNeElZbU9PUExPdkwzOWR3TXZSbnlvSHhmS2ZfRVBOWWdmV005aW1xR0VUV0tHVm4nLFxuICAgIGltYWdlcnlTZXQ6ICdSb2FkJ1xuICAgICAgLy8gdXNlIG1heFpvb20gMTkgdG8gc2VlIHN0cmV0Y2hlZCB0aWxlcyBpbnN0ZWFkIG9mIHRoZSBCaW5nTWFwc1xuICAgICAgLy8gXCJubyBwaG90b3MgYXQgdGhpcyB6b29tIGxldmVsXCIgdGlsZXNcbiAgICAgIC8vIG1heFpvb206IDE5XG4gIH0pLFxuICBiYXNlbWFwOiB0cnVlXG59KTtcblxuQmFzZUxheWVycy5CSU5HLkFlcmlhbFdpdGhMYWJlbHMgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gIG5hbWU6ICdBZXJpYWxXaXRoTGFiZWxzJyxcbiAgdmlzaWJsZTogdHJ1ZSxcbiAgcHJlbG9hZDogSW5maW5pdHksXG4gIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5CaW5nTWFwcyh7XG4gICAga2V5OiAnQW1fbUFTblVBLWp0VzNPM014SVltT09QTE92TDM5ZHdNdlJueW9IeGZLZl9FUE5ZZ2ZXTTlpbXFHRVRXS0dWbicsXG4gICAgaW1hZ2VyeVNldDogJ0FlcmlhbFdpdGhMYWJlbHMnXG4gICAgICAvLyB1c2UgbWF4Wm9vbSAxOSB0byBzZWUgc3RyZXRjaGVkIHRpbGVzIGluc3RlYWQgb2YgdGhlIEJpbmdNYXBzXG4gICAgICAvLyBcIm5vIHBob3RvcyBhdCB0aGlzIHpvb20gbGV2ZWxcIiB0aWxlc1xuICAgICAgLy8gbWF4Wm9vbTogMTlcbiAgfSksXG4gIGJhc2VtYXA6IHRydWVcbn0pO1xuXG5CYXNlTGF5ZXJzLkJJTkcuQWVyaWFsID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICBuYW1lOiAnQWVyaWFsJyxcbiAgdmlzaWJsZTogZmFsc2UsXG4gIHByZWxvYWQ6IEluZmluaXR5LFxuICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuQmluZ01hcHMoe1xuICAgIGtleTogJ0FtX21BU25VQS1qdFczTzNNeElZbU9PUExPdkwzOWR3TXZSbnlvSHhmS2ZfRVBOWWdmV005aW1xR0VUV0tHVm4nLFxuICAgIGltYWdlcnlTZXQ6ICdBZXJpYWwnXG4gICAgICAvLyB1c2UgbWF4Wm9vbSAxOSB0byBzZWUgc3RyZXRjaGVkIHRpbGVzIGluc3RlYWQgb2YgdGhlIEJpbmdNYXBzXG4gICAgICAvLyBcIm5vIHBob3RvcyBhdCB0aGlzIHpvb20gbGV2ZWxcIiB0aWxlc1xuICAgICAgLy8gbWF4Wm9vbTogMTlcbiAgfSksXG4gIGJhc2VtYXA6IHRydWVcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VMYXllcnM7XG5cbn0se31dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSYXN0ZXJMYXllcnMgPSB7fTtcblxuUmFzdGVyTGF5ZXJzLlRpbGVkV01TTGF5ZXIgPSBmdW5jdGlvbihsYXllck9iail7XG4gIHZhciBsYXllciA9IG5ldyBvbC5sYXllci5JbWFnZSh7XG4gICAgbmFtZTogbGF5ZXJPYmoubmFtZSxcbiAgICBvcGFjaXR5OiBsYXllck9iai5vcGFjaXR5IHx8IDEuMCxcbiAgICBzb3VyY2U6IG5ldyBvbC5zb3VyY2UuVGlsZVdNUyh7XG4gICAgICB1cmw6IGxheWVyT2JqLnVybCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBMQVlFUlM6IGxheWVyT2JqLmxheWVycyB8fCAnJyxcbiAgICAgICAgVkVSU0lPTjogJzEuMy4wJyxcbiAgICAgICAgVFJBTlNQQVJFTlQ6IHRydWVcbiAgICAgIH1cbiAgICB9KSxcbiAgICB2aXNpYmxlOmxheWVyT2JqLnZpc2libGVcbiAgfSk7XG5cbiAgcmV0dXJuIGxheWVyO1xufTtcblxuUmFzdGVyTGF5ZXJzLldNU0xheWVyID0gZnVuY3Rpb24obGF5ZXJPYmope1xuICB2YXIgbGF5ZXIgPSBuZXcgb2wubGF5ZXIuSW1hZ2Uoe1xuICAgIG5hbWU6IGxheWVyT2JqLm5hbWUsXG4gICAgb3BhY2l0eTogbGF5ZXJPYmoub3BhY2l0eSB8fCAxLjAsXG4gICAgc291cmNlOiBuZXcgb2wuc291cmNlLkltYWdlV01TKHtcbiAgICAgIHVybDogbGF5ZXJPYmoudXJsLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIExBWUVSUzogbGF5ZXJPYmoubGF5ZXJzIHx8ICcnLFxuICAgICAgICBWRVJTSU9OOiAnMS4zLjAnLFxuICAgICAgICBUUkFOU1BBUkVOVDogdHJ1ZVxuICAgICAgfVxuICAgIH0pLFxuICAgIHZpc2libGU6bGF5ZXJPYmoudmlzaWJsZVxuICB9KTtcbiAgXG4gIHJldHVybiBsYXllcjtcbn07XG5cblJhc3RlckxheWVycy5UaWxlZFdNU0xheWVyID0gZnVuY3Rpb24obGF5ZXJPYmope1xuICB2YXIgbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gICAgbmFtZTogbGF5ZXJPYmoubmFtZSxcbiAgICBvcGFjaXR5OiAxLjAsXG4gICAgc291cmNlOiBuZXcgb2wuc291cmNlLlRpbGVXTVMoe1xuICAgICAgdXJsOiBsYXllck9iai51cmwsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgTEFZRVJTOiBsYXllck9iai5sYXllcnMgfHwgJycsXG4gICAgICAgIFZFUlNJT046ICcxLjMuMCcsXG4gICAgICAgIFRSQU5TUEFSRU5UOiB0cnVlXG4gICAgICB9XG4gICAgfSksXG4gICAgdmlzaWJsZTogbGF5ZXJPYmoudmlzaWJsZVxuICB9KTtcbiAgXG4gIHJldHVybiBsYXllcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmFzdGVyTGF5ZXJzO1xuXG5cbn0se31dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbkJhc2VMYXllcnMgPSByZXF1aXJlKCcuLi9sYXllcnMvYmFzZXMnKTtcblxudmFyIE1hcEhlbHBlcnMgPSB7XG4gIGNyZWF0ZVZpZXdlcjogZnVuY3Rpb24ob3B0cyl7XG4gICAgcmV0dXJuIG5ldyBfVmlld2VyKG9wdHMpO1xuICB9XG59O1xuXG52YXIgX1ZpZXdlciA9IGZ1bmN0aW9uKG9wdHMpe1xuICB2YXIgY29udHJvbHMgPSBvbC5jb250cm9sLmRlZmF1bHRzKHtcbiAgICBhdHRyaWJ1dGlvbk9wdGlvbnM6IHtcbiAgICAgIGNvbGxhcHNpYmxlOiBmYWxzZVxuICAgIH1cbiAgfSkuZXh0ZW5kKFtuZXcgb2wuY29udHJvbC5ab29tKCldKTtcbiAgdmFyIHZpZXcgPSBuZXcgb2wuVmlldyhvcHRzLnZpZXcpO1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgaW50ZXJhY3Rpb25zOiBvbC5pbnRlcmFjdGlvbi5kZWZhdWx0cygpLmV4dGVuZChbXG4gICAgICBuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ1JvdGF0ZSgpXG4gICAgXSksXG4gICAgb2wzTG9nbzogZmFsc2UsXG4gICAgLy9cbiAgICB2aWV3OiB2aWV3XG4gIH07XG4gIGlmIChvcHRzLmlkKXtcbiAgICBvcHRpb25zLnRhcmdldCA9IG9wdHMuaWQ7XG4gIH1cbiAgdmFyIG1hcCAgPSBuZXcgb2wuTWFwKG9wdGlvbnMpO1xuICB0aGlzLm1hcCA9IG1hcDtcbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLnVwZGF0ZU1hcCA9IGZ1bmN0aW9uKG1hcE9iamVjdCl7fTtcblxuX1ZpZXdlci5wcm90b3R5cGUudXBkYXRlVmlldyA9IGZ1bmN0aW9uKCl7fTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ2V0TWFwID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMubWFwO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuc2V0VGFyZ2V0ID0gZnVuY3Rpb24oaWQpe1xuICB0aGlzLm1hcC5zZXRUYXJnZXQoaWQpO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ29UbyA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzLCB6b29tKXtcbiAgdmFyIHZpZXcgPSB0aGlzLm1hcC5nZXRWaWV3KCk7XG4gIHZpZXcuc2V0Q2VudGVyKGNvb3JkaW5hdGVzKTtcbiAgdmlldy5zZXRab29tKHpvb20pO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ2V0Wm9vbSA9IGZ1bmN0aW9uKCl7XG4gIHZhciB2aWV3ID0gdGhpcy5tYXAuZ2V0VmlldygpO1xuICByZXR1cm4gdmlldy5nZXRab29tKCk7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5nZXRMYXllckJ5TmFtZSA9IGZ1bmN0aW9uKGxheWVyTmFtZSkge1xuICB2YXIgbGF5ZXJzID0gdGhpcy5tYXAuZ2V0TGF5ZXJzKCk7XG4gIHZhciBsZW5ndGggPSBsYXllcnMuZ2V0TGVuZ3RoKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGF5ZXJOYW1lID09PSBsYXllcnMuaXRlbShpKS5nZXQoJ25hbWUnKSkge1xuICAgICAgcmV0dXJuIGxheWVycy5pdGVtKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qIFJFTU9WRSBOQU1FIEJZIE5BTUUgKi9cbl9WaWV3ZXIucHJvdG90eXBlLnJlbW92ZUxheWVyQnlOYW1lID0gZnVuY3Rpb24obGF5ZXJOYW1lKXtcbiAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllckJ5TmFtZShsYXllck5hbWUpO1xuICBpZiAobGF5ZXIpe1xuICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKGxheWVyKTtcbiAgfVxufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ2V0QWN0aXZlTGF5ZXJzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGFjdGl2ZWxheWVycyA9IFtdO1xuICB0aGlzLm1hcC5nZXRMYXllcnMoKS5mb3JFYWNoKGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgdmFyIHByb3BzID0gbGF5ZXIuZ2V0UHJvcGVydGllcygpO1xuICAgIGlmIChwcm9wcy5iYXNlbWFwICE9IHRydWUgJiYgcHJvcHMudmlzaWJsZSl7XG4gICAgICAgYWN0aXZlbGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gYWN0aXZlbGF5ZXJzO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ2V0TGF5ZXJzTm9CYXNlID0gZnVuY3Rpb24oKXtcbiAgdmFyIGxheWVycyA9IFtdO1xuICB0aGlzLm1hcC5nZXRMYXllcnMoKS5mb3JFYWNoKGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgdmFyIHByb3BzID0gbGF5ZXIuZ2V0UHJvcGVydGllcygpO1xuICAgIGlmIChwcm9wcy5iYXNlbWFwICE9IHRydWUpe1xuICAgICAgbGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gbGF5ZXJzO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuYWRkQmFzZUxheWVyID0gZnVuY3Rpb24odHlwZSl7XG4gIHZhciBsYXllcjtcbiAgdHlwZSA/IGxheWVyID0gQmFzZUxheWVyc1t0eXBlXTogIGxheWVyID0gQmFzZUxheWVycy5CSU5HLkFlcmlhbDtcbiAgdGhpcy5tYXAuYWRkTGF5ZXIobGF5ZXIpO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuY2hhbmdlQmFzZUxheWVyID0gZnVuY3Rpb24obGF5ZXJOYW1lKXtcbiAgdmFyIGJhc2VMYXllciA9IHRoaXMuZ2V0TGF5ZXJCeU5hbWUobGF5ZXJuYW1lKTtcbiAgdmFyIGxheWVycyA9IHRoaXMubWFwLmdldExheWVycygpO1xuICBsYXllcnMuaW5zZXJ0QXQoMCwgYmFzZUxheWVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwSGVscGVycztcblxufSx7XCIuLi9sYXllcnMvYmFzZXNcIjoxNX1dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnZzN3L2NvcmUvdXRpbHMnKS5pbmhlcml0O1xuXG52YXIgRzNXT2JqZWN0ID0gZnVuY3Rpb24oKXt9O1xuaW5oZXJpdChHM1dPYmplY3QsRXZlbnRFbWl0dGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBHM1dPYmplY3Q7XG5cblxufSx7XCJnM3cvY29yZS91dGlsc1wiOjI4fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdnM3cvY29yZS91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdnM3cvY29yZS9nM3dvYmplY3QnKTtcblxuZnVuY3Rpb24gTm9taW5hdGltKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy51cmwgPSBcImh0dHA6Ly9ub21pbmF0aW0ub3BlbnN0cmVldG1hcC5vcmdcIjtcbiAgXG4gIHRoaXMuc2VhcmNoID0gZnVuY3Rpb24ocXVlcnkpe1xuICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICB2YXIgc2VhcmNoVXJsID0gdGhpcy51cmwrXCIvc2VhcmNoP2Zvcm1hdD1qc29uJnBvbHlnb25fZ2VvanNvbj0xJnE9XCIrcXVlcnk7XG4gICAgJC5nZXQoc2VhcmNoVXJsLGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICBzZWxmLmVtaXQoXCJyZXN1bHRzXCIscmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcbiAgXG4gIGJhc2UodGhpcyk7XG59XG5pbmhlcml0KE5vbWluYXRpbSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTm9taW5hdGltOiBuZXcgTm9taW5hdGltXG59O1xuXG59LHtcImczdy9jb3JlL2czd29iamVjdFwiOjE4LFwiZzN3L2NvcmUvdXRpbHNcIjoyOH1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSYXN0ZXJMYXllcnMgPSByZXF1aXJlKCdnM3ctb2wzL3NyYy9sYXllcnMvcmFzdGVycycpO1xuXG5mdW5jdGlvbiBNYXBMYXllcihvcHRpb25zKXtcbiAgdmFyIF9tYXBMYXllciA9IG5ldyBfTWFwTGF5ZXIob3B0aW9ucyk7XG4gIFxuICB0aGlzLmdldE9sTGF5ZXIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBfbWFwTGF5ZXIub2xMYXllcjtcbiAgfTtcbiAgXG4gIHRoaXMuZ2V0TGF5ZXJJZCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIF9tYXBMYXllci5sYXllcklkO1xuICB9O1xuICBcbiAgdGhpcy5hZGRMYXllciA9IGZ1bmN0aW9uKGxheWVyKXtcbiAgICBfbWFwTGF5ZXIuYWRkTGF5ZXIobGF5ZXIpO1xuICB9O1xuICBcbiAgdGhpcy50b2dnbGVMYXllciA9IGZ1bmN0aW9uKGxheWVyKXtcbiAgICBfLmZvckVhY2goX21hcExheWVyLmxheWVycyxmdW5jdGlvbihfbGF5ZXIpe1xuICAgICAgaWYgKF9sYXllci5pZCA9PSBsYXllci5pZCl7XG4gICAgICAgIF9sYXllci52aXNpYmxlID0gbGF5ZXIudmlzaWJsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfbWFwTGF5ZXIudXBkYXRlTGF5ZXJzKCk7XG4gIH07XG4gIFxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgX21hcExheWVyLnVwZGF0ZUxheWVycygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9NYXBMYXllcihvcHRpb25zKXtcbiAgdGhpcy5MQVlFUlRZUEUgPSB7XG4gICAgTEFZRVI6ICdsYXllcicsXG4gICAgTUVUQUxBWUVSOiAnbWV0YWxheWVyJ1xuICB9O1xuICBcbiAgdGhpcy5sYXllcklkID0gb3B0aW9ucy5sYXllcklkO1xuICB0aGlzLm9sTGF5ZXIgPSBudWxsO1xuICB0aGlzLmxheWVycyA9IFtdO1xuICBcbiAgdmFyIHdtc0NvbmZpZyA9IHtcbiAgICBuYW1lOiB0aGlzLmxheWVySWQsXG4gICAgdXJsOiBvcHRpb25zLnVybFxuICB9XG4gIHRoaXMub2xMYXllciA9IG5ldyBSYXN0ZXJMYXllcnMuV01TTGF5ZXIod21zQ29uZmlnKTtcbn1cblxudmFyIHByb3RvID0gX01hcExheWVyLnByb3RvdHlwZTtcblxucHJvdG8uYWRkTGF5ZXIgPSBmdW5jdGlvbihsYXllckNvbmZpZyl7XG4gIHRoaXMubGF5ZXJzLnB1c2gobGF5ZXJDb25maWcpO1xufTtcblxucHJvdG8uZ2V0VmlzaWJsZUxheWVycyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB2aXNpYmxlTGF5ZXJzID0gW107XG4gIF8uZm9yRWFjaCh0aGlzLmxheWVycyxmdW5jdGlvbihsYXllcil7XG4gICAgaWYgKGxheWVyLnZpc2libGUpe1xuICAgICAgdmlzaWJsZUxheWVycy5wdXNoKGxheWVyKTtcbiAgICB9ICAgIFxuICB9KVxuICByZXR1cm4gdmlzaWJsZUxheWVycztcbn1cblxucHJvdG8udXBkYXRlTGF5ZXJzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHZpc2libGVMYXllcnMgPSB0aGlzLmdldFZpc2libGVMYXllcnMoKTtcbiAgdGhpcy5vbExheWVyLmdldFNvdXJjZSgpLnVwZGF0ZVBhcmFtcyh7XG4gICAgbGF5ZXJzOiBfLmpvaW4oXy5tYXAodmlzaWJsZUxheWVycywnbmFtZScpLCcsJylcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcExheWVyO1xuXG5cbn0se1wiZzN3LW9sMy9zcmMvbGF5ZXJzL3Jhc3RlcnNcIjoxNn1dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnLi91dGlscycpLmluaGVyaXQ7XG52YXIgZGVmZXJyZWRWYWx1ZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5kZWZlcnJlZFZhbHVlO1xudmFyIFN0YXRlUHJvdmlkZXIgPSByZXF1aXJlKCcuL3N0YXRlcHJvdmlkZXInKTtcbnZhciBQcm9qZWN0c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG52YXIgUHJvamVjdFNlcnZpY2UgPSByZXF1aXJlKCcuL3Byb2plY3RzZXJ2aWNlJyk7XG52YXIgb2wzaGVscGVycyA9IHJlcXVpcmUoJ2czdy1vbDMvc3JjL2czdy5vbDMnKS5oZWxwZXJzO1xudmFyIE1hcExheWVyID0gcmVxdWlyZSgnLi9tYXBsYXllcicpO1xuXG5mdW5jdGlvbiBNYXBTZXJ2aWNlKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy52aWV3ZXI7XG4gIHRoaXMubWFwTGF5ZXJzID0ge307XG4gIHRoaXMuc3RhdGUgPSB7fTtcbiAgXG4gIFByb2plY3RTZXJ2aWNlLm9uKCdwcm9qZWN0c2V0JyxmdW5jdGlvbigpe1xuICAgICRzY3JpcHQoXCJodHRwOi8vZXBzZy5pby9cIitQcm9qZWN0U2VydmljZS5zdGF0ZS5jcnMrXCIuanNcIik7XG4gICAgaWYgKCFzZWxmLnZpZXdlcil7XG4gICAgICBzZWxmLnNldHVwVmlld2VyKCk7XG4gICAgfVxuICAgIHNlbGYuc2V0dXBMYXllcnMoKTtcbiAgfSk7XG4gIFxuICBQcm9qZWN0U2VydmljZS5vbmFmdGVyKCdzZXRMYXllcnNWaXNpYmxlJyxmdW5jdGlvbihsYXllcnMpe1xuICAgIF8uZm9yRWFjaChsYXllcnMsZnVuY3Rpb24obGF5ZXIpe1xuICAgICAgdmFyIG1hcExheWVyID0gc2VsZi5nZXRNYXBMYXllckZvckxheWVyKGxheWVyKTtcbiAgICAgIG1hcExheWVyLnVwZGF0ZSgpO1xuICAgIH0pXG4gIH0pO1xuICBcbiAgdGhpcy5zZXR1cFZpZXdlciA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGV4dGVudCA9IFByb2plY3RTZXJ2aWNlLnN0YXRlLmV4dGVudDtcbiAgICB2YXIgcHJvamVjdGlvbiA9IG5ldyBvbC5wcm9qLlByb2plY3Rpb24oe1xuICAgICAgY29kZTogXCJFUFNHOlwiK1Byb2plY3RTZXJ2aWNlLnN0YXRlLmNycyxcbiAgICAgIGV4dGVudDogZXh0ZW50XG4gICAgfSk7XG4gICAgdGhpcy52aWV3ZXIgPSBvbDNoZWxwZXJzLmNyZWF0ZVZpZXdlcih7XG4gICAgICB2aWV3OiB7XG4gICAgICAgIHByb2plY3Rpb246IHByb2plY3Rpb24sXG4gICAgICAgIGNlbnRlcjogb2wuZXh0ZW50LmdldENlbnRlcihQcm9qZWN0U2VydmljZS5zdGF0ZS5leHRlbnQpLFxuICAgICAgICB6b29tOiAxIFxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBcbiAgdGhpcy5zZXR1cExheWVycyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGxheWVyc0FycmF5ID0gdGhpcy50cmF2ZXJzZUxheWVyc1RyZWUoUHJvamVjdFNlcnZpY2Uuc3RhdGUubGF5ZXJzdHJlZSk7XG4gICAgbGF5ZXJzQXJyYXkuZm9yRWFjaChmdW5jdGlvbihsYXllcil7XG4gICAgICAvLyDDqCB1biBsYXllciB2ZXJvLCBub24gdW4gZm9sZGVyXG4gICAgICBpZighXy5nZXQobGF5ZXIsJ25vZGVzJykpe1xuICAgICAgICB2YXIgbGF5ZXJJZCA9ICdsYXllcl8nK2xheWVyLm1ldGFsYXllcjtcbiAgICAgICAgdmFyIG1hcExheWVyID0gXy5nZXQoc2VsZi5tYXBMYXllcnMsbGF5ZXJJZCk7XG4gICAgICAgIGlmICghbWFwTGF5ZXIpe1xuICAgICAgICAgIHVybCA9IFByb2plY3RTZXJ2aWNlLmdldFdtc1VybCgpO1xuICAgICAgICAgIG1hcExheWVyID0gc2VsZi5tYXBMYXllcnNbbGF5ZXJJZF0gPSBuZXcgTWFwTGF5ZXIoe1xuICAgICAgICAgICAgaWQ6IGxheWVySWQsXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlbGYudmlld2VyLm1hcC5hZGRMYXllcihtYXBMYXllci5nZXRPbExheWVyKCkpO1xuICAgICAgICB9XG4gICAgICAgIG1hcExheWVyLmFkZExheWVyKGxheWVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBfLmZvckVhY2godGhpcy5tYXBMYXllcnMsZnVuY3Rpb24obWFwTGF5ZXIpe1xuICAgICAgbWFwTGF5ZXIudXBkYXRlKCk7XG4gICAgfSlcbiAgfTtcbiAgXG4gIHRoaXMuZ2V0TWFwTGF5ZXJGb3JMYXllciA9IGZ1bmN0aW9uKGxheWVyKXtcbiAgICByZXR1cm4gdGhpcy5tYXBMYXllcnNbJ2xheWVyXycrbGF5ZXIubWV0YWxheWVyXTtcbiAgfTtcbiAgXG4gIHRoaXMudHJhdmVyc2VMYXllcnNUcmVlID0gZnVuY3Rpb24obGF5ZXJzVHJlZSl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBsYXllcnNBcnJheSA9IFtdO1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKG9iail7XG4gICAgICBfLmZvckluKG9iaiwgZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgICAgICAgaWYgKCFfLmlzTmlsKHZhbC5pZCkpIHtcbiAgICAgICAgICAgICAgbGF5ZXJzQXJyYXkudW5zaGlmdCh2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV8uaXNOaWwodmFsLm5vZGVzKSkge1xuICAgICAgICAgICAgICB0cmF2ZXJzZSh2YWwubm9kZXMpO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0cmF2ZXJzZShsYXllcnNUcmVlKTtcbiAgICByZXR1cm4gbGF5ZXJzQXJyYXk7XG4gIH07XG4gIFxuICB0aGlzLnNob3dWaWV3ZXIgPSBmdW5jdGlvbihlbElkKXtcbiAgICB0aGlzLnZpZXdlci5zZXRUYXJnZXQoZWxJZCk7XG4gIH07XG4gIFxuICB0aGlzLmdvVG8gPSBmdW5jdGlvbihjb29yZGluYXRlcyx6b29tKXtcbiAgICB2YXIgem9vbSA9IHpvb20gfHwgNTtcbiAgICB0aGlzLnZpZXdlci5nb1RvKGNvb3JkaW5hdGVzLHpvb20pO1xuICB9O1xuICBcbiAgdGhpcy5nb1RvV0dTODQgPSBmdW5jdGlvbihjb29yZGluYXRlcyx6b29tKXtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvbC5wcm9qLnRyYW5zZm9ybShjb29yZGluYXRlcywnRVBTRzo0MzI2JywnRVBTRzonK1Byb2plY3RTZXJ2aWNlLnN0YXRlLmNycyk7XG4gICAgdGhpcy5nb1RvKGNvb3JkaW5hdGVzLHpvb20pO1xuICB9O1xufTtcblxuaW5oZXJpdChQcm9qZWN0U2VydmljZSxTdGF0ZVByb3ZpZGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgTWFwU2VydmljZVxuXG59LHtcIi4vbWFwbGF5ZXJcIjoyMCxcIi4vcHJvamVjdHNlcnZpY2VcIjoyNSxcIi4vcHJvamVjdHNyZWdpc3RyeVwiOjI2LFwiLi9zdGF0ZXByb3ZpZGVyXCI6MjcsXCIuL3V0aWxzXCI6MjgsXCJnM3ctb2wzL3NyYy9nM3cub2wzXCI6MTR9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY29uZmlnID0gW1xuICAgIHtcbiAgICAgIG5hbWU6IFwiaW5mb1wiLFxuICAgICAgYWN0aXZlOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcImVkaXRvclwiLFxuICAgICAgYWN0aXZlOiB0cnVlXG4gICAgfVxuXVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZztcbn0se31dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnZzN3L2NvcmUvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdnM3cvY29yZS91dGlscycpLmJhc2U7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnZzN3L2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgUGx1Z2luc1NlcnZpY2UgPSByZXF1aXJlKCcuL3BsdWdpbnNzZXJ2aWNlJyk7XG5cbi8vIFB1YmxpYyBpbnRlcmZhY2VcbmZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc3RhdGUgPSBfcmVnaXN0cnkuc3RhdGU7XG4gIC8vY29uZmlnIGdlbmVyYWxlXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZyl7XG4gICAgcmV0dXJuIF9yZWdpc3RyeS5pbml0KGNvbmZpZykudGhlbihmdW5jdGlvbigpe1xuICAgICAgc2VsZi5lbWl0KCdsb2FkZWQnKTtcbiAgICB9KVxuICB9O1xuICB0aGlzLmFkZFBsdWdpbiA9IGZ1bmN0aW9uKHBsdWdpbk5hbWUpe1xuICAgIF9yZWdpc3RyeS5hZGRQbHVnaW4ocGx1Z2luTmFtZSk7XG4gIH07XG4gIHRoaXMuZ2V0UGx1Z2luID0gZnVuY3Rpb24ocGx1Z2luTmFtZSl7XG4gICAgcmV0dXJuIF9yZWdpc3RyeS5nZXRQbHVnaW4ocGx1Z2luTmFtZSk7XG4gIH07XG4gIHRoaXMucmVtb3ZlUGx1Z2luID0gZnVuY3Rpb24ocGx1Z2luTmFtZSl7XG4gICAgcmV0dXJuIF9yZWdpc3RyeS5yZW1vdmVQbHVnaW4ocGx1Z2luTmFtZSk7XG4gIH07XG4gIFxuICBiYXNlKHRoaXMpO1xufVxuaW5oZXJpdChQbHVnaW5zUmVnaXN0cnksRzNXT2JqZWN0KTtcblxuLy8gUHJpdmF0ZVxudmFyIF9yZWdpc3RyeSA9IHtcbiAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBjb25maWc6IG51bGwsXG4gIHRlc3Rpbmc6IHRydWUsXG4gIHN0YXRlOiB7XG4gICAgcGx1Z2luczogW11cbiAgfSxcbiAgLy9jb25maWcgZ2VuZXJhbGVcbiAgaW5pdDogZnVuY3Rpb24oY29uZmlnKXtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpe1xuICAgICAgcmV0dXJuIHRoaXMuc2V0dXBTdGF0ZSgpO1xuICAgIH1cbiAgfSxcbiAgc2V0dXBTdGF0ZTogZnVuY3Rpb24oKXtcbiAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICB2YXIgcGx1Z2luRnVsbENvbmZpZ3VyYXRpb24gPSB0aGlzLmdldFBsdWdpbnNGdWxsQ29uZmlnKCk7XG4gICAgIHJldHVybiBwbHVnaW5GdWxsQ29uZmlndXJhdGlvbi50aGVuKGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24oX3BsdWdpbil7XG4gICAgICAgICAgaWYoX3BsdWdpbi5hY3RpdmUpe1xuICAgICAgICAgICAgc2VsZi5zdGF0ZS5wbHVnaW5zLnB1c2goX3BsdWdpbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICB9KVxuXG4gIH0sXG4gIHNldEFjdGl2ZVBsdWdpbjogZnVuY3Rpb24ocGx1Z2luTmFtZSl7XG4gICAgdmFyIHByb2plY3QgPSB0aGlzLmdldFByb2plY3QocGx1Z2luTmFtZSk7XG4gICAgaWYoIXByb2plY3Qpe1xuICAgICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnJlamVjdChcIlBsdWdpbiBkb2Vzbid0IGV4aXN0XCIpO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIFBsdWdpbnNTZXJ2aWNlLnNldEFjdGl2ZVBsdWdpbihwcm9qZWN0KTtcbiAgICB9O1xuICB9LFxuICByZW1vdmVQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbk5hbWUpIHtcbiAgICB2YXIgcGx1Z2luID0gdGhpcy5nZXRQbHVnaW4ocGx1Z2luTmFtZSk7XG4gICAgdmFyIGFjdGl2ZVBsdWdpbjtcbiAgICBpZiAocGx1Z2luKSB7XG4gICAgICBhY3RpdmVQbHVnaW4gPSBQbHVnaW5zU2VydmljZS5nZXRBY3RpdmVQbHVnaW4ocGx1Z2luTmFtZSk7XG4gICAgICBpZiAoYWN0aXZlUGx1Z2luID09IHBsdWdpbi5uYW1lKXtcbiAgICAgICAgUGx1Z2luc1NlcnZpY2Uuc2V0QWN0aXZlUGx1Z2luKCcnKTtcbiAgICAgIH1cbiAgICAgIF8ucHVsbCh0aGlzLnN0YXRlLnBsdWdpbnMscGx1Z2luKTtcbiAgICB9XG4gIH0sXG4gIGdldFBsdWdpbjogZnVuY3Rpb24ocGx1Z2luTmFtZSl7XG4gICAgdmFyIHBsdWdpbiA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZS5wbHVnaW5zLmZvckVhY2goZnVuY3Rpb24oX3BsdWdpbil7XG4gICAgICBpZiAocGx1Z2luLm5hbWUgPT0gcGx1Z2luTmFtZSkge1xuICAgICAgICBwbHVnaW4gPSBwbHVnaW47XG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcGx1Z2luO1xuICB9LFxuXG4gIC8vcml0b3JuYSB1bmEgcHJvbWlzZXNcbiAgZ2V0UGx1Z2luc0Z1bGxDb25maWc6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAvL25lbCBjYXNvIGRpIHRlc3QgbG9jYWxlXG4gICAgaWYgKHRoaXMudGVzdGluZyl7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBwbHVnaW5zRnVsbENvbmZpZztcbiAgICAgICAgcGx1Z2luc0Z1bGxDb25maWcgPSByZXF1aXJlKCcuL3BsdWdpbnNfdGVzdF9jb25maWd1cmF0aW9ucycpO1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHBsdWdpbnNGdWxsQ29uZmlnKTtcbiAgICAgIH0sMTAwKTtcbiAgICB9Ly9hbHRyaW1lbnRpIG5lbGxhIHJlYWx0w6AgZmEgdW5hIGNoaWFtYXRhIGFsIHNlcnZlciBlIHVuYSB2b2x0YSBvdHRlbnV0byBpbCBwcm9nZXR0byByaXNvbHZlIGwnb2dnZXR0byBkZWZlciA/Pz9cbiAgICBlbHNlIHtcbiAgICAgIC8vZGEgaW1wbGVtZW50YXJlIHNlIGlsIGNhc28gdXJsIGRvdmUgcml0b3JuYSBsYSBjb25maWd1cmFpb25lIGRlaSBwbHVnaW5cbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfSxcbn07XG5cbi8vY29tZSB0ZXN0IGlzdGFuemlvIHBsdWdpbiByZWdpc3RyeVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcblxufSx7XCIuL3BsdWdpbnNfdGVzdF9jb25maWd1cmF0aW9uc1wiOjIyLFwiLi9wbHVnaW5zc2VydmljZVwiOjI0LFwiZzN3L2NvcmUvZzN3b2JqZWN0XCI6MTgsXCJnM3cvY29yZS91dGlsc1wiOjI4fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCcuL3V0aWxzJykuaW5oZXJpdDtcblxuZnVuY3Rpb24gUGx1Z2luc1NlcnZpY2UoKXtcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBhY3RpdmVQbHVnaW46ICcnLFxuICAgIGFjdGl2ZVBhbmVsOiB7fVxuICB9O1xuICB0aGlzLnNldEFjdGl2ZVBsdWdpbiA9IGZ1bmN0aW9uKHBsdWdpbk5hbWUpIHtcbiAgICB0aGlzLnN0YXRlLmFjdGl2ZVBsdWdpbiA9IHBsdWdpbk5hbWU7XG4gIH07XG4gIHRoaXMuZ2V0QWN0aXZlUGx1Z2luID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5hY3RpdmVQbHVnaW47XG4gIH07XG4gIHRoaXMuc2V0QWN0aXZlUGFuZWwgPSBmdW5jdGlvbihwYW5lbENvbXBvbmVudCkge1xuICAgIHRoaXMuc3RhdGUuYWN0aXZlUGFuZWwgPSBuZXcgcGFuZWxDb21wb25lbnQ7XG4gIH07XG4gIHRoaXMuZ2V0QWN0aXZlUGFuZWwgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmFjdGl2ZVBhbmVsO1xuICB9O1xufTtcblxuLy8gTWFrZSB0aGUgcHVibGljIHNlcnZpY2UgZW4gRXZlbnQgRW1pdHRlclxuaW5oZXJpdChQbHVnaW5zU2VydmljZSxFdmVudEVtaXR0ZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBQbHVnaW5zU2VydmljZVxuXG59LHtcIi4vdXRpbHNcIjoyOH1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnLi91dGlscycpLmluaGVyaXQ7XG52YXIgU3RhdGVQcm92aWRlciA9IHJlcXVpcmUoJy4vc3RhdGVwcm92aWRlcicpO1xuXG5mdW5jdGlvbiBQcm9qZWN0U2VydmljZSgpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgdGhpcy5sYXllcnMgPSB7fTtcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBsYXllcnN0cmVlOiBbXVxuICB9O1xuICBcbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oY29uZmlnKXtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfTtcbiAgXG4gIC8vIGdlbmVyYSBsJ29nZ2V0dG8gbGF5ZXJzIChwZXIgcmlmZXJpbWVudG8pLCBwZXIgc2VtcGxpZmljYXJlIGdsaSBhZ2dpb3JuYW1lbnRpIGRlbGxvIHN0YXRvIGRlbCBsYXllcnN0cmVlXG4gIHRoaXMubWFrZUxheWVyc09iaiA9IGZ1bmN0aW9uKGxheWVyc3RyZWUpe1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKG9iail7XG4gICAgICBfLmZvckluKG9iaiwgZnVuY3Rpb24gKGxheWVyLCBrZXkpIHtcbiAgICAgICAgICAgIC8vdmVyaWZpY2EgY2hlIGlsIHZhbG9yZSBkZWxsJ2lkIG5vbiBzaWEgbnVsbG9cbiAgICAgICAgICAgIGlmICghXy5pc05pbChsYXllci5pZCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmxheWVyc1tsYXllci5pZF0gPSBsYXllcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghXy5pc05pbChsYXllci5ub2RlcykpIHtcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZShsYXllci5ub2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB0cmF2ZXJzZShsYXllcnN0cmVlKTtcbiAgfTtcbiAgXG4gIHRoaXMuc2V0UHJvamVjdCA9IGZ1bmN0aW9uKHByb2plY3Qpe1xuICAgIC8qIHN0cnV0dHVyYSBvZ2dldHRvICdwcm9qZWN0J1xuICAgIHtcbiAgICAgIGlkLFxuICAgICAgdHlwZSxcbiAgICAgIGdpZCxcbiAgICAgIG5hbWUsXG4gICAgICBjcnMsXG4gICAgICBleHRlbnQsXG4gICAgICBsYXllcnN0cmVlXG4gICAgfVxuICAgICovXG4gICAgdGhpcy5zdGF0ZSA9IHByb2plY3Q7XG4gICAgdGhpcy5tYWtlTGF5ZXJzT2JqKHByb2plY3QubGF5ZXJzdHJlZSk7XG4gICAgdGhpcy5lbWl0KCdwcm9qZWN0c2V0Jyk7XG4gIH07XG4gIFxuICB2YXIgc2V0dGVycyA9IHtcbiAgICBzZXRMYXllcnNWaXNpYmxlOiBmdW5jdGlvbihsYXllcnMsdmlzaWJsZSl7XG4gICAgICBfLmZvckVhY2gobGF5ZXJzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgICAgc2VsZi5sYXllcnNbbGF5ZXIuaWRdLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgfSlcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLmluaXRTZXR0ZXJzKHNldHRlcnMpO1xuICBcbiAgdGhpcy5nZXRMYXllciA9IGZ1bmN0aW9uKGlkKXtcbiAgICByZXR1cm4gdGhpcy5sYXllcnNbaWRdO1xuICB9O1xuICBcbiAgdGhpcy50b2dnbGVMYXllciA9IGZ1bmN0aW9uKGxheWVyLHZpc2libGUpe1xuICAgIHZhciB2aXNpYmxlID0gdmlzaWJsZSB8fCAhbGF5ZXIudmlzaWJsZTtcbiAgICBzZWxmLnNldExheWVyc1Zpc2libGUoW2xheWVyXSx2aXNpYmxlKTtcbiAgfTtcbiAgXG4gIHRoaXMudG9nZ2xlTGF5ZXJzID0gZnVuY3Rpb24obGF5ZXJzLHZpc2libGUpe1xuICAgIHNlbGYuc2V0TGF5ZXJzVmlzaWJsZShsYXllcnMsdmlzaWJsZSk7XG4gIH07XG4gIFxuICB0aGlzLmdldFdtc1VybCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmdldFdtc1VybCh0aGlzLnN0YXRlKTtcbiAgfTtcbiAgXG4gIHRoaXMuZ2V0TGVnZW5kVXJsID0gZnVuY3Rpb24obGF5ZXIpe1xuICAgIHJldHVybiB0aGlzLmdldFdtc1VybCh0aGlzLnN0YXRlKSsnP1NFUlZJQ0U9V01TJlZFUlNJT049MS4zLjAmUkVRVUVTVD1HZXRMZWdlbmRHcmFwaGljJkZPUk1BVD1pbWFnZS9wbmcmTEFZRVJUSVRMRT1GYWxzZSZJVEVNRk9OVFNJWkU9MTAmTEFZRVI9JytsYXllci5uYW1lO1xuICB9O1xufTtcblxuaW5oZXJpdChQcm9qZWN0U2VydmljZSxTdGF0ZVByb3ZpZGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgUHJvamVjdFNlcnZpY2VcblxufSx7XCIuL3N0YXRlcHJvdmlkZXJcIjoyNyxcIi4vdXRpbHNcIjoyOH1dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnLi91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdnM3cvY29yZS9nM3dvYmplY3QnKTtcbnZhciByZXNvbHZlZFZhbHVlID0gcmVxdWlyZSgnLi91dGlscycpLnJlc29sdmVkVmFsdWU7XG52YXIgcmVqZWN0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5yZWplY3RlZFZhbHVlO1xudmFyIFByb2plY3RTZXJ2aWNlID0gcmVxdWlyZSgnLi9wcm9qZWN0c2VydmljZScpO1xuXG4vKiBzZXJ2aWNlXG5GdW56aW9uZSBjb3N0cnV0dG9yZSBjb250ZW50ZW50ZSB0cmUgcHJvcHJpZXRhJzpcbiAgICBzZXR1cDogbWV0b2RvIGRpIGluaXppYWxpenphemlvbmVcbiAgICBnZXRMYXllcnNTdGF0ZTogcml0b3JuYSBsJ29nZ2V0dG8gTGF5ZXJzU3RhdGVcbiAgICBnZXRMYXllcnNUcmVlOiByaXRvcm5hIGwnYXJyYXkgbGF5ZXJzVHJlZSBkYWxsJ29nZ2V0dG8gTGF5ZXJzU3RhdGVcbiovXG5cbi8vIFB1YmxpYyBpbnRlcmZhY2VcbmZ1bmN0aW9uIFByb2plY3RzUmVnaXN0cnkoKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnN0YXRlID0gX3JlZ2lzdHJ5LnN0YXRlO1xuICAvL2NvbmZpZyBnZW5lcmFsZVxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihjb25maWcpe1xuICAgIHJldHVybiBfcmVnaXN0cnkuaW5pdChjb25maWcpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgIHNlbGYuZW1pdCgnbG9hZGVkJyk7XG4gICAgfSlcbiAgfTtcbiAgXG4gIHRoaXMuYWRkUHJvamVjdCA9IGZ1bmN0aW9uKHByb2plY3RHaWQpe1xuICAgIF9yZWdpc3RyeS5hZGRQcm9qZWN0KHByb2plY3RHaWQpO1xuICB9O1xuICBcbiAgdGhpcy5nZXRQcm9qZWN0ID0gZnVuY3Rpb24ocHJvamVjdEdpZCl7XG4gICAgcmV0dXJuIF9yZWdpc3RyeS5nZXRQcm9qZWN0KHByb2plY3RHaWQpO1xuICB9O1xuICBcbiAgdGhpcy5nZXRDdXJyZW50UHJvamVjdCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvamVjdChfcmVnaXN0cnkuY3VycmVudFByb2plY3QuZ2lkKTtcbiAgfTtcbiAgXG4gIHRoaXMuc2V0Q3VycmVudFByb2plY3QgPSBmdW5jdGlvbihwcm9qZWN0R2lkKXtcbiAgICBfcmVnaXN0cnkuc2V0Q3VycmVudFByb2plY3QocHJvamVjdEdpZCk7XG4gIH07XG4gIFxuICBiYXNlKHRoaXMpO1xufVxuXG4vLyBNYWtlIHRoZSBwdWJsaWMgc2VydmljZSBlbiBFdmVudCBFbWl0dGVyXG5pbmhlcml0KFByb2plY3RzUmVnaXN0cnksRzNXT2JqZWN0KTtcblxuLy8gUHJpdmF0ZVxudmFyIF9yZWdpc3RyeSA9IHtcbiAgY29uZmlnOiBudWxsLFxuICBpbml0aWFsaXplZDogZmFsc2UsXG4gIHN0YXRlOiB7XG4gICAgYmFzZUxheWVyczoge30sXG4gICAgbWluU2NhbGU6IG51bGwsXG4gICAgbWF4c2NhbGU6IG51bGwsXG4gICAgcHJvamVjdHM6IFtdXG4gIH0sXG4gIC8vY29uZmlnIGdlbmVyYWxlXG4gIGluaXQ6IGZ1bmN0aW9uKGNvbmZpZyl7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKXtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgdGhpcy5zZXR1cFN0YXRlKCk7XG4gICAgICBQcm9qZWN0U2VydmljZS5pbml0KGNvbmZpZyk7XG4gICAgICByZXR1cm4gdGhpcy5zZXRDdXJyZW50UHJvamVjdChjb25maWcuaW5pdHByb2plY3QpO1xuICAgIH1cbiAgfSxcbiAgXG4gIHNldHVwU3RhdGU6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIFxuICAgIHNlbGYuc3RhdGUuYmFzZUxheWVycyA9IHNlbGYuY29uZmlnLmJhc2VsYXllcnM7XG4gICAgc2VsZi5zdGF0ZS5taW5TY2FsZSA9IHNlbGYuY29uZmlnLm1pbnNjYWxlO1xuICAgIHNlbGYuc3RhdGUubWF4U2NhbGUgPSBzZWxmLmNvbmZpZy5tYXhzY2FsZTtcbiAgICBzZWxmLnN0YXRlLmNycyA9IHNlbGYuY29uZmlnLmNycztcbiAgICBzZWxmLmNvbmZpZy5wcm9qZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKHByb2plY3Qpe1xuICAgICAgcHJvamVjdC5iYXNlTGF5ZXJzID0gc2VsZi5jb25maWcuYmFzZWxheWVycztcbiAgICAgIHByb2plY3QubWluU2NhbGUgPSBzZWxmLmNvbmZpZy5taW5zY2FsZTtcbiAgICAgIHByb2plY3QubWF4U2NhbGUgPSBzZWxmLmNvbmZpZy5tYXhzY2FsZTtcbiAgICAgIHByb2plY3QuY3JzID0gc2VsZi5jb25maWcuY3JzO1xuICAgICAgc2VsZi5zdGF0ZS5wcm9qZWN0cy5wdXNoKHByb2plY3QpO1xuICAgIH0pXG4gICAgLy90aGlzLnN0YXRlLnByb2plY3RzID0gY29uZmlnLmdyb3VwLnByb2plY3RzO1xuICB9LFxuICBcbiAgc2V0Q3VycmVudFByb2plY3Q6IGZ1bmN0aW9uKHByb2plY3RHaWQpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdChwcm9qZWN0R2lkKTtcbiAgICBpZighcHJvamVjdCl7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRWYWx1ZShcIlByb2plY3QgZG9lc24ndCBleGlzdFwiKTtcbiAgICB9XG4gICAgdmFyIGlzRnVsbEZpbGxlZCA9ICFfLmlzTmlsKHByb2plY3QubGF5ZXJzKTtcbiAgICBpZiAoaXNGdWxsRmlsbGVkKXtcbiAgICAgIFByb2plY3RTZXJ2aWNlLnNldFByb2plY3QocHJvamVjdCk7XG4gICAgICByZXR1cm4gcmVzb2x2ZWRWYWx1ZShwcm9qZWN0KTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHJldHVybiB0aGlzLmdldFByb2plY3RGdWxsQ29uZmlnKHByb2plY3QpXG4gICAgICAudGhlbihmdW5jdGlvbihwcm9qZWN0RnVsbENvbmZpZyl7XG4gICAgICAgIHByb2plY3QgPSBfLm1lcmdlKHByb2plY3QscHJvamVjdEZ1bGxDb25maWcpO1xuICAgICAgICBzZWxmLmJ1aWxkUHJvamVjdFRyZWUocHJvamVjdCk7XG4gICAgICAgIFByb2plY3RTZXJ2aWNlLnNldFByb2plY3QocHJvamVjdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIFxuICBidWlsZFByb2plY3RUcmVlOiBmdW5jdGlvbihwcm9qZWN0KXtcbiAgICB2YXIgbGF5ZXJzID0gXy5rZXlCeShwcm9qZWN0LmxheWVycywnaWQnKTtcbiAgICB2YXIgbGF5ZXJzVHJlZSA9IF8uY2xvbmVEZWVwKHByb2plY3QubGF5ZXJzdHJlZSk7XG4gICAgXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uob2JqKXtcbiAgICAgIF8uZm9ySW4ob2JqLCBmdW5jdGlvbiAobGF5ZXIsIGtleSkge1xuICAgICAgICAgIC8vdmVyaWZpY2EgY2hlIGlsIG5vZG8gc2lhIHVuIGxheWVyIGUgbm9uIHVuIGZvbGRlclxuICAgICAgICAgIGlmICghXy5pc05pbChsYXllci5pZCkpIHtcbiAgICAgICAgICAgICAgdmFyIGZ1bGxsYXllciA9IF8ubWVyZ2UobGF5ZXIsbGF5ZXJzW2xheWVyLmlkXSk7XG4gICAgICAgICAgICAgIG9ialtwYXJzZUludChrZXkpXSA9IGZ1bGxsYXllcjtcbiAgICAgICAgICAgICAgdmFyIGEgPTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghXy5pc05pbChsYXllci5ub2Rlcykpe1xuICAgICAgICAgICAgLy8gYWdnaXVuZ28gcHJvcHJpZXTDoCB0aXRsZSBwZXIgbCdhbGJlcm9cbiAgICAgICAgICAgIGxheWVyLnRpdGxlID0gbGF5ZXIubmFtZTtcbiAgICAgICAgICAgIHRyYXZlcnNlKGxheWVyLm5vZGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB0cmF2ZXJzZShsYXllcnNUcmVlKTtcbiAgICBwcm9qZWN0LmxheWVyc3RyZWUgPSBsYXllcnNUcmVlO1xuICB9LFxuXG4gIGdldFByb2plY3Q6IGZ1bmN0aW9uKHByb2plY3RHaWQpe1xuICAgIHZhciBwcm9qZWN0ID0gbnVsbDtcbiAgICB0aGlzLnN0YXRlLnByb2plY3RzLmZvckVhY2goZnVuY3Rpb24oX3Byb2plY3Qpe1xuICAgICAgaWYgKF9wcm9qZWN0LmdpZCA9PSBwcm9qZWN0R2lkKSB7XG4gICAgICAgIHByb2plY3QgPSBfcHJvamVjdDtcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9LFxuICBcbiAgLy9yaXRvcm5hIHVuYSBwcm9taXNlc1xuICBnZXRQcm9qZWN0RnVsbENvbmZpZzogZnVuY3Rpb24ocHJvamVjdEJhc2VDb25maWcpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgdmFyIHVybCA9IHRoaXMuY29uZmlnLmdldFByb2plY3RDb25maWdVcmwocHJvamVjdEJhc2VDb25maWcpO1xuICAgICQuZ2V0KHVybCkuZG9uZShmdW5jdGlvbihwcm9qZWN0RnVsbENvbmZpZyl7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUocHJvamVjdEZ1bGxDb25maWcpO1xuICAgIH0pXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFByb2plY3RzUmVnaXN0cnkoKTtcblxufSx7XCIuL3Byb2plY3RzZXJ2aWNlXCI6MjUsXCIuL3V0aWxzXCI6MjgsXCJnM3cvY29yZS9nM3dvYmplY3RcIjoxOCxcImczdy9jb3JlL3V0aWxzXCI6Mjh9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJy4vdXRpbHMnKS5pbmhlcml0O1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2czdy9jb3JlL2czd29iamVjdCcpO1xuXG4vLyBVbmEgY2xhc3NlIGNoZSBlcmVkaXRhIGRhIFN0YXRlUHJvdmlkZXIgZm9ybmlyw6AgdW5vIHN0YXRvICh1dGlsaXp6YXRvIGFkIGVzLiBkYWxsZSBjb21wb25lbnRpIGRlbGxhIEdVSSkuXG4vLyBTZSBmb3JuaXNjZSBkZWkgbWV0b2RpIHNldHRlcnMsIGFsbCdpbnRlcm5vIGRpIHVuIG9nZ2V0dG8gXCJzZXR0ZXJzXCIsIMOoIHBvc3NpYmlsZSByZWdpc3RyYXJlIGRlaSBsaXN0ZW5lcnMgUFJJTUEgZS9vIERPUE8gbCdlc2VjdXppb25lIGRpIHRhbGkgbWV0b2RpLlxuLy8gUXVhbmRvIHZpZW5lIGVzZWd1aXRvIHVuIHNldHRlciB2aWVuZSBhbmNoZSBlbWVzc28gdW4gZXZlbnRvIFwic3RhdGVDaGFuZ2VkXCIuXG5mdW5jdGlvbiBTdGF0ZVByb3ZpZGVyKCl7fVxuaW5oZXJpdChTdGF0ZVByb3ZpZGVyLEczV09iamVjdCk7XG5cbnZhciBwcm90byA9IFN0YXRlUHJvdmlkZXIucHJvdG90eXBlO1xuXG5wcm90by5zdGF0ZVNldCA9IGZ1bmN0aW9uKHBhdGgsdmFsdWUpe1xuICB2YXIgb2xkVmFsdWUgPSBfLmdldCh0aGlzLnN0YXRlLHBhdGgsbnVsbCk7XG4gIGlmKCFvbGRWYWx1ZSl7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBwYXRoS2V5ID0gdGhpcy5nZXRQYXRoS2V5KHBhdGgpO1xuICB2YXIgc2V0dGVyc0xpc3RlbmVycyA9IHRoaXMuZ2V0c2V0dGVyc0xpc3RlbmVycygpO1xuICB2YXIgbGlzdGVuZXJzID0gc2V0dGVyc0xpc3RlbmVyc1twYXRoS2V5XTtcbiAgdmFyIGNhblNldCA9IHRydWU7XG4gIF8uZm9yRWFjaChsaXN0ZW5lcnMsZnVuY3Rpb24obGlzdGVuZXIsIGtleSl7XG4gICAgY2FuU2V0ICY9IGxpc3RlbmVyLmFwcGx5KHRoaXMsW3ZhbHVlLG9sZFZhbHVlXSk7XG4gIH0pXG4gIGlmKGNhblNldCl7XG4gICAgY29uc29sZS5sb2coXCJTZXR0aW5nOiBcIitwYXRoK1wiPVwiK3ZhbHVlKTtcbiAgICBfLnNldCh0aGlzLnN0YXRlLHBhdGgsdmFsdWUpO1xuICB9XG59O1xuXG4vLyB1biBsaXN0ZW5lciBwdcOyIHJlZ2lzdHJhcnNpIGluIG1vZG8gZGEgZXNzZXJlIGVzZWd1aXRvIERPUE8gbCdlc2VjdXppb25lIGRlbCBtZXRvZG8gc2V0dGVyLlxucHJvdG8ub25hZnRlciA9IGZ1bmN0aW9uKHNldHRlcixsaXN0ZW5lcil7XG4gIHRoaXMub25zZXR0ZXIoJ2FmdGVyJyxzZXR0ZXIsbGlzdGVuZXIpO1xufTtcblxuLy8gdW4gbGlzdGVuZXIgcHXDsiByZWdpc3RyYXJzaSBpbiBtb2RvIGRhIGVzc2VyZSBlc2VndWl0byBQUklNQSBkZWxsJ2VzZWN1emlvbmUgZGVsIG1ldG9kbyBzZXR0ZXIuIFB1w7Igcml0b3JuYXJlIHRydWUvZmFsc2UgcGVyXG4vLyB2b3RhcmUgYSBmYXZvcmUgbyBtZW5vIGRlbGwnZXNlY3V6aW9uZSBkZWwgc2V0dGVyLiBTZSBub24gcml0b3JuYSBudWxsYSBvIHVuZGVmaW5lZCwgbm9uIHZpZW5lIGNvbnNpZGVyYXRvIHZvdGFudGVcbnByb3RvLm9uYmVmb3JlID0gZnVuY3Rpb24oc2V0dGVyLGxpc3RlbmVyKXtcbiAgdGhpcy5vbnNldHRlcignYmVmb3JlJyxzZXR0ZXIsbGlzdGVuZXIpO1xufVxuXG5wcm90by5vbnNldHRlciA9IGZ1bmN0aW9uKHdoZW4sc2V0dGVyLGxpc3RlbmVyKXtcbiAgdmFyIHNldHRlcnNMaXN0ZW5lcnMgPSB0aGlzLnNldHRlcnNMaXN0ZW5lcnNbd2hlbl07XG4gIGlmIChfLmlzVW5kZWZpbmVkKHNldHRlcnNMaXN0ZW5lcnNbc2V0dGVyXSkpe1xuICAgIHNldHRlcnNMaXN0ZW5lcnNbc2V0dGVyXSA9IHt9O1xuICB9XG4gIHZhciBsaXN0ZW5lcktleSA9IFwiXCIrTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMDAwMDApK1wiXCIrRGF0ZS5ub3coKTtcbiAgc2V0dGVyc0xpc3RlbmVyc1tzZXR0ZXJdW2xpc3RlbmVyS2V5XSA9IGxpc3RlbmVyO1xuICByZXR1cm4gdGhpcy5nZW5lcmF0ZVVuTGlzdGVuZXIoc2V0dGVyLGxpc3RlbmVyS2V5KTtcbn07XG5cbnByb3RvLmdlbmVyYXRlVW5MaXN0ZW5lciA9IGZ1bmN0aW9uKHNldHRlcnNMaXN0ZW5lcnMsc2V0dGVyLGxpc3RlbmVyS2V5KXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICBzZXR0ZXJzTGlzdGVuZXJzW3NldHRlcl1bbGlzdGVuZXJLZXldID0gbnVsbDtcbiAgICBkZWxldGUgc2V0dGVyc0xpc3RlbmVyc1tzZXR0ZXJdW2xpc3RlbmVyS2V5XTtcbiAgfVxufTtcblxuLy8gaW5pemlhbGl6emEgdHV0dGkgaSBtZXRvZGkgZGVmaW5pdGkgbmVsbCdvZ2dldHRvIFwic2V0dGVyc1wiIGRlbGxhIGNsYXNzZSBmaWdsaWEuXG5wcm90by5pbml0U2V0dGVycyA9IGZ1bmN0aW9uKHNldHRlcnMpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2V0dGVyc0xpc3RlbmVycyA9IHthZnRlcjp7fSxiZWZvcmU6e319O1xuICB0aGlzLnNldHRlcnMgPSBzZXR0ZXJzO1xuICBfLmZvckVhY2goc2V0dGVycyxmdW5jdGlvbihzZXR0ZXJGbmMsc2V0dGVyKXtcbiAgICBzZWxmW3NldHRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAvLyBlc2VndW8gaSBsaXN0ZW5lciByZWdpc3RyYXRpIHBlciBpbCBiZWZvcmVcbiAgICAgIHZhciBiZWZvcmVMaXN0ZW5lcnMgPSB0aGlzLnNldHRlcnNMaXN0ZW5lcnNbJ2JlZm9yZSddW3NldHRlcl07XG4gICAgICB2YXIgY2FuU2V0ID0gdHJ1ZTtcbiAgICAgIF8uZm9yRWFjaChiZWZvcmVMaXN0ZW5lcnMsZnVuY3Rpb24obGlzdGVuZXIsIGtleSl7XG4gICAgICAgIHZhciB2b3RlID0gbGlzdGVuZXIuYXBwbHkodGhpcyxhcmdzKTtcbiAgICAgICAgaWYgKCFfLmlzTmlsKHZvdGUpKXtcbiAgICAgICAgICBjYW5TZXQgJj0gdm90ZTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGlmKCFjYW5TZXQpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBlc2VndW8gbGEgZnVuemlvbmVcbiAgICAgIHNldHRlckZuYy5hcHBseShzZWxmLGFyZ3MpO1xuICAgICAgLy8gZXNlZ3VvIGkgbGlzdGVuZXIgcmVnaXN0cmF0aSBwZXIgbCdhZnRlclxuICAgICAgdmFyIGFmdGVyTGlzdGVuZXJzID0gdGhpcy5zZXR0ZXJzTGlzdGVuZXJzWydhZnRlciddW3NldHRlcl07XG4gICAgICBfLmZvckVhY2goYWZ0ZXJMaXN0ZW5lcnMsZnVuY3Rpb24obGlzdGVuZXIsIGtleSl7XG4gICAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsYXJncyk7XG4gICAgICB9KVxuICAgICAgc2VsZi5lbWl0KFwic3RhdGVDaGFuZ2VkXCIpO1xuICAgIH1cbiAgfSlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdGVQcm92aWRlcjtcblxufSx7XCIuL3V0aWxzXCI6MjgsXCJnM3cvY29yZS9nM3dvYmplY3RcIjoxOH1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB1dGlscyA9IHtcbiAgbWl4aW46IGZ1bmN0aW9uIG1peGluKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZShkZXN0aW5hdGlvbi5wcm90b3R5cGUsIHNvdXJjZSk7XG4gIH0sXG4gIFxuICBtaXhpbmluc3RhbmNlOiBmdW5jdGlvbiBtaXhpbmluc3RhbmNlKGRlc3RpbmF0aW9uLHNvdXJjZSl7XG4gICAgICB2YXIgc291cmNlSW5zdGFuY2UgPSBuZXcgc291cmNlO1xuICAgICAgdXRpbHMubWVyZ2UoZGVzdGluYXRpb24sIHNvdXJjZUluc3RhbmNlKTtcbiAgICAgIHV0aWxzLm1lcmdlKGRlc3RpbmF0aW9uLnByb3RvdHlwZSwgc291cmNlLnByb3RvdHlwZSk7XG4gIH0sXG5cblxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2UoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgdmFyIGtleTtcblxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKHV0aWxzLmhhc093bihzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfSxcblxuICBoYXNPd246IGZ1bmN0aW9uIGhhc093bihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gIH0sXG4gIFxuICBpbmhlcml0OmZ1bmN0aW9uKGNoaWxkQ3RvciwgcGFyZW50Q3Rvcikge1xuICAgIGZ1bmN0aW9uIHRlbXBDdG9yKCkge307XG4gICAgdGVtcEN0b3IucHJvdG90eXBlID0gcGFyZW50Q3Rvci5wcm90b3R5cGU7XG4gICAgY2hpbGRDdG9yLnN1cGVyQ2xhc3NfID0gcGFyZW50Q3Rvci5wcm90b3R5cGU7XG4gICAgY2hpbGRDdG9yLnByb3RvdHlwZSA9IG5ldyB0ZW1wQ3RvcigpO1xuICAgIGNoaWxkQ3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjaGlsZEN0b3I7XG4gIH0sXG4gIFxuICBiYXNlOiBmdW5jdGlvbihtZSwgb3B0X21ldGhvZE5hbWUsIHZhcl9hcmdzKSB7XG4gICAgdmFyIGNhbGxlciA9IGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO1xuICAgIGlmIChjYWxsZXIuc3VwZXJDbGFzc18pIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBjb25zdHJ1Y3Rvci4gQ2FsbCB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci5cbiAgICAgIHJldHVybiBjYWxsZXIuc3VwZXJDbGFzc18uY29uc3RydWN0b3IuYXBwbHkoXG4gICAgICAgICAgbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIH1cblxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgZm91bmRDYWxsZXIgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBjdG9yID0gbWUuY29uc3RydWN0b3I7XG4gICAgICAgICBjdG9yOyBjdG9yID0gY3Rvci5zdXBlckNsYXNzXyAmJiBjdG9yLnN1cGVyQ2xhc3NfLmNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoY3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdID09PSBjYWxsZXIpIHtcbiAgICAgICAgZm91bmRDYWxsZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZENhbGxlcikge1xuICAgICAgICByZXR1cm4gY3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdLmFwcGx5KG1lLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBkaWQgbm90IGZpbmQgdGhlIGNhbGxlciBpbiB0aGUgcHJvdG90eXBlIGNoYWluLFxuICAgIC8vIHRoZW4gb25lIG9mIHR3byB0aGluZ3MgaGFwcGVuZWQ6XG4gICAgLy8gMSkgVGhlIGNhbGxlciBpcyBhbiBpbnN0YW5jZSBtZXRob2QuXG4gICAgLy8gMikgVGhpcyBtZXRob2Qgd2FzIG5vdCBjYWxsZWQgYnkgdGhlIHJpZ2h0IGNhbGxlci5cbiAgICBpZiAobWVbb3B0X21ldGhvZE5hbWVdID09PSBjYWxsZXIpIHtcbiAgICAgIHJldHVybiBtZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdLmFwcGx5KG1lLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgJ2Jhc2UgY2FsbGVkIGZyb20gYSBtZXRob2Qgb2Ygb25lIG5hbWUgJyArXG4gICAgICAgICAgJ3RvIGEgbWV0aG9kIG9mIGEgZGlmZmVyZW50IG5hbWUnKTtcbiAgICB9XG4gIH0sXG4gIFxuICBub29wOiBmdW5jdGlvbigpe30sXG4gIFxuICByZXNvbHZlZFZhbHVlOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgIGRlZmVycmVkLnJlc29sdmUodmFsdWUpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gIH0sXG4gIFxuICByZWplY3RlZFZhbHVlOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgIGRlZmVycmVkLnJlamVjdCh2YWx1ZSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlscztcblxufSx7fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjwhLS0gaXRlbSB0ZW1wbGF0ZSAtLT5cXG48ZGl2IGlkPVxcXCJjYXRhbG9nXFxcIiBjbGFzcz1cXFwidGFiYmFibGUtcGFuZWwgY2F0YWxvZ1xcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJ0YWJiYWJsZS1saW5lXFxcIj5cXG4gICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2LXRhYnNcXFwiIHJvbGU9XFxcInRhYmxpc3RcXFwiPlxcbiAgICAgIDxsaSByb2xlPVxcXCJwcmVzZW50YXRpb25cXFwiIGNsYXNzPVxcXCJhY3RpdmVcXFwiPjxhIGhyZWY9XFxcIiN0cmVlXFxcIiBhcmlhLWNvbnRyb2xzPVxcXCJ0cmVlXFxcIiByb2xlPVxcXCJ0YWJcXFwiIGRhdGEtdG9nZ2xlPVxcXCJ0YWJcXFwiIGRhdGEtaTE4bj1cXFwidHJlZVxcXCI+PC9hPjwvbGk+XFxuICAgICAgPGxpIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCI+PGEgaHJlZj1cXFwiI2xlZ2VuZFxcXCIgYXJpYS1jb250cm9scz1cXFwibGVnZW5kXFxcIiByb2xlPVxcXCJ0YWJcXFwiIGRhdGEtdG9nZ2xlPVxcXCJ0YWJcXFwiIGRhdGEtaTE4bj1cXFwibGVnZW5kXFxcIj48L2E+PC9saT5cXG4gICAgPC91bD5cXG4gICAgPGRpdiAgY2xhc3M9XFxcInRhYi1jb250ZW50XFxcIj5cXG4gICAgICA8ZGl2IHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwidGFiLXBhbmUgYWN0aXZlIHRyZWVcXFwiIGlkPVxcXCJ0cmVlXFxcIj5cXG4gICAgICAgIDx1bCBjbGFzcz1cXFwidHJlZS1yb290XFxcIj5cXG4gICAgICAgICAgPHRyZWUgOmxheWVyc3RyZWU9XFxcImxheWVyc3RyZWVcXFwiIGNsYXNzPVxcXCJpdGVtXFxcIiB2LWZvcj1cXFwibGF5ZXJzdHJlZSBpbiBsYXllcnN0cmVlXFxcIj5cXG4gICAgICAgICAgPC90cmVlPlxcbiAgICAgICAgPC91bD5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8bGVnZW5kIDpsYXllcnN0cmVlPVxcXCJsYXllcnN0cmVlXFxcIj48L2xlZ2VuZD5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcblxufSx7fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHQgPSByZXF1aXJlKCdpMThuLnNlcnZpY2UnKTtcbnZhciBHVUkgPSByZXF1aXJlKCdnM3cvZ3VpL2d1aScpO1xudmFyIFByb2plY3RTZXJ2aWNlID0gcmVxdWlyZSgnZzN3L2NvcmUvcHJvamVjdHNlcnZpY2UnKTtcblxuVnVlLmNvbXBvbmVudCgnZzN3LWNhdGFsb2cnLHtcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jYXRhbG9nLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb2plY3Q6IFByb2plY3RTZXJ2aWNlLnN0YXRlXG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgbGF5ZXJzdHJlZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdC5sYXllcnN0cmVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgLy9jb2RpY2UgcXVpXG4gICAgfSxcbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAvL1xuICAgIH1cbn0pO1xuXG4vLyB0cmVlIGNvbXBvbmVudFxuVnVlLmNvbXBvbmVudCgndHJlZScsIHtcbiAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdHJlZS5odG1sJyksXG4gIHByb3BzOiB7XG4gICAgbGF5ZXJzdHJlZTogW10sXG4gICAgLy9lcmVkaXRvIGlsIG51bWVybyBkaSBjaGlsZHMgZGFsIHBhcmVudFxuICAgIG5fcGFyZW50Q2hpbGRzIDogMCxcbiAgICBjaGVja2VkOiBmYWxzZVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cGFuZGVkOiB0aGlzLmxheWVyc3RyZWUuZXhwYW5kZWQsXG4gICAgICBwYXJlbnRDaGVja2VkOiBmYWxzZSxcbiAgICAgIC8vcHJvcHJpZXRhIGNoZSBzZXJ2ZSBwZXIgZmFyZSBjb25mcm9udG8gcGVyIGlsIHRyaXN0YXRlXG4gICAgICBuX2NoaWxkczogdGhpcy5sYXllcnN0cmVlLm5vZGVzID8gdGhpcy5sYXllcnN0cmVlLm5vZGVzLmxlbmd0aCA6IDBcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgICAnY2hlY2tlZCc6IGZ1bmN0aW9uICh2YWwpe1xuICAgICAgICB0aGlzLmxheWVyc3RyZWUudmlzaWJsZSA9IHZhbDtcbiAgICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBpc0ZvbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzRm9sZGVyID0gdGhpcy5uX2NoaWxkcyA/IHRydWUgOiBmYWxzZTtcbiAgICAgIGlmIChpc0ZvbGRlcikge1xuICAgICAgICB2YXIgX3Zpc2libGVDaGlsZHMgPSAwO1xuICAgICAgICBfLmZvckVhY2godGhpcy5sYXllcnN0cmVlLm5vZGVzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgICAgICBpZiAobGF5ZXIudmlzaWJsZSl7XG4gICAgICAgICAgICBfdmlzaWJsZUNoaWxkcyArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubl9wYXJlbnRDaGlsZHMgPSB0aGlzLm5fY2hpbGRzIC0gX3Zpc2libGVDaGlsZHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNGb2xkZXJcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB0b2dnbGU6IGZ1bmN0aW9uIChjaGVja0FsbExheWVycykge1xuICAgICAgdmFyIGNoZWNrQWxsID0gY2hlY2tBbGxMYXllcnMgPT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuaXNGb2xkZXIgJiYgIWNoZWNrQWxsKSB7XG4gICAgICAgIHRoaXMubGF5ZXJzdHJlZS5leHBhbmRlZCA9ICF0aGlzLmxheWVyc3RyZWUuZXhwYW5kZWQ7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjaGVja0FsbCl7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudENoZWNrZWQgJiYgIXRoaXMubl9wYXJlbnRDaGlsZHMpe1xuICAgICAgICAgIHRoaXMucGFyZW50Q2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50Q2hlY2tlZCAmJiB0aGlzLm5fcGFyZW50Q2hpbGRzKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnRDaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBhcmVudENoZWNrZWQgPSAhdGhpcy5wYXJlbnRDaGVja2VkO1xuICAgICAgICB9XG4gICAgICAgIFByb2plY3RTZXJ2aWNlLnRvZ2dsZUxheWVycyh0aGlzLmxheWVyc3RyZWUubm9kZXMsdGhpcy5wYXJlbnRDaGVja2VkKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBQcm9qZWN0U2VydmljZS50b2dnbGVMYXllcih0aGlzLmxheWVyc3RyZWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJpQ2xhc3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5uX3BhcmVudENoaWxkcykge1xuICAgICAgICByZXR1cm4gJ2ZhLWNoZWNrLXNxdWFyZS1vJztcbiAgICAgIH0gZWxzZSBpZiAoKHRoaXMubl9wYXJlbnRDaGlsZHMgPiAwKSAmJiAodGhpcy5uX3BhcmVudENoaWxkcyA8IHRoaXMubl9jaGlsZHMpKSB7XG4gICAgICAgIHJldHVybiAnZmEtc3F1YXJlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnZmEtc3F1YXJlLW8nO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuVnVlLmNvbXBvbmVudCgnbGVnZW5kJyx7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vbGVnZW5kLmh0bWwnKSxcbiAgICBwcm9wczogWydsYXllcnN0cmVlJ10sXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvL2RhdGEgcXVpXG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgdmlzaWJsZWxheWVyczogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIF92aXNpYmxlbGF5ZXJzID0gW107XG4gICAgICAgIHZhciBsYXllcnN0cmVlID0gdGhpcy5sYXllcnN0cmVlO1xuICAgICAgICBmdW5jdGlvbiB0cmF2ZXJzZShvYmope1xuICAgICAgICBfLmZvckluKG9iaiwgZnVuY3Rpb24gKGxheWVyLCBrZXkpIHtcbiAgICAgICAgICAgICAgLy92ZXJpZmljYSBjaGUgaWwgdmFsb3JlIGRlbGwnaWQgbm9uIHNpYSBudWxsb1xuICAgICAgICAgICAgICBpZiAoIV8uaXNOaWwobGF5ZXIuaWQpICYmIGxheWVyLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgIF92aXNpYmxlbGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghXy5pc05pbChsYXllci5ub2RlcykpIHtcbiAgICAgICAgICAgICAgICAgIHRyYXZlcnNlKGxheWVyLm5vZGVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyYXZlcnNlKGxheWVyc3RyZWUpO1xuICAgICAgICByZXR1cm4gX3Zpc2libGVsYXllcnM7XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgJ2xheWVyc3RyZWUnOiB7XG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHZhbCwgb2xkKXtcbiAgICAgICAgICAvL2NvZGljZSBxdWlcbiAgICAgICAgfSxcbiAgICAgICAgZGVlcDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgLy9jb2RpY2UgcXVpXG4gICAgfVxufSk7XG5cblZ1ZS5jb21wb25lbnQoJ2xlZ2VuZC1pdGVtJyx7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuL2xlZ2VuZF9pdGVtLmh0bWwnKSxcbiAgcHJvcHM6IFsnbGF5ZXInXSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsZWdlbmR1cmw6IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBpbiBhdHRlc2EgZGkgcmlzb2x2ZXJlIGxvIHNjaGlhbnRvIGRpIFFHU0kgU2VydmVyLi4uXG4gICAgICAvL3JldHVybiBcImh0dHA6Ly9sb2NhbGhvc3QvY2dpLWJpbi9xZ2lzX21hcHNlcnYuZmNnaT9tYXA9L2hvbWUvZ2lvaGFwcHkvU2NyaXZhbmlhL0Rldi9HM1cvZzN3LWNsaWVudC90ZXN0L3Byb2dldHRvL3Rlc3QucWdzJlNFUlZJQ0U9V01TJlZFUlNJT049MS4zLjAmUkVRVUVTVD1HZXRMZWdlbmRHcmFwaGljJkZPUk1BVD1pbWFnZS9wbmcmTEFZRVJUSVRMRT1GYWxzZSZJVEVNRk9OVFNJWkU9MTAmTEFZRVI9XCIrdGhpcy5sYXllci5uYW1lO1xuICAgICAgcmV0dXJuIFByb2plY3RTZXJ2aWNlLmdldExlZ2VuZFVybCh0aGlzLmxheWVyKTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvLyBlc2VtcGlvIHV0aWxpenpvIGRlbCBzZXJ2aXppbyBHVUlcbiAgICBvcGVuZm9ybTogZnVuY3Rpb24oKXtcbiAgICAgIC8vR1VJLm5vdGlmeS5zdWNjZXNzKFwiQXBybyB1biBmb3JtXCIpO1xuICAgICAgLy9HVUkuc2hvd0Zvcm0oKTtcbiAgICB9XG4gIH1cbn0pXG5cbn0se1wiLi9jYXRhbG9nLmh0bWxcIjoyOSxcIi4vbGVnZW5kLmh0bWxcIjozMSxcIi4vbGVnZW5kX2l0ZW0uaHRtbFwiOjMyLFwiLi90cmVlLmh0bWxcIjozMyxcImczdy9jb3JlL3Byb2plY3RzZXJ2aWNlXCI6MjUsXCJnM3cvZ3VpL2d1aVwiOjM3LFwiaTE4bi5zZXJ2aWNlXCI6NX1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIGlkPVxcXCJsZWdlbmRcXFwiPlxcbiAgPGxlZ2VuZC1pdGVtIDpsYXllcj1cXFwibGF5ZXJcXFwiIHYtZm9yPVxcXCJsYXllciBpbiB2aXNpYmxlbGF5ZXJzXFxcIj48L2xlZ2VuZC1pdGVtPlxcbjwvZGl2PlxcblwiO1xuXG59LHt9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBAY2xpY2s9XFxcIm9wZW5mb3JtKClcXFwiPnt7IGxheWVyLnRpdGxlIH19PC9kaXY+XFxuPGRpdj48aW1nIDpzcmM9XFxcImxlZ2VuZHVybFxcXCI+PC9kaXY+XFxuXCI7XG5cbn0se31dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gXCI8bGkgY2xhc3M9XFxcInRyZWUtaXRlbVxcXCI+XFxuICA8c3BhbiA6Y2xhc3M9XFxcIntib2xkOiBpc0ZvbGRlciwgJ2ZhLWNoZXZyb24tZG93bic6IGxheWVyc3RyZWUuZXhwYW5kZWQsICdmYS1jaGV2cm9uLXJpZ2h0JzogIWxheWVyc3RyZWUuZXhwYW5kZWR9XFxcIiBAY2xpY2s9XFxcInRvZ2dsZVxcXCIgdi1pZj1cXFwiaXNGb2xkZXJcXFwiIGNsYXNzPVxcXCJmYVxcXCI+PC9zcGFuPlxcbiAgPHNwYW4gdi1pZj1cXFwiaXNGb2xkZXJcXFwiIEBjbGljaz1cXFwidG9nZ2xlKCd0cnVlJylcXFwiIDpjbGFzcz1cXFwiW3RyaUNsYXNzKCldXFxcIiBjbGFzcz1cXFwiZmFcXFwiPjwvc3Bhbj5cXG4gIDxzcGFuIHYtZWxzZSBAY2xpY2s9XFxcInRvZ2dsZVxcXCIgOmNsYXNzPVxcXCJbbGF5ZXJzdHJlZS52aXNpYmxlICA/ICdmYS1jaGVjay1zcXVhcmUtbyc6ICdmYS1zcXVhcmUtbyddXFxcIiBjbGFzcz1cXFwiZmFcXFwiPjwvc3Bhbj5cXG4gIDxzcGFuIDpjbGFzcz1cXFwie2JvbGQ6IGlzRm9sZGVyfVxcXCIgQGNsaWNrPVxcXCJ0b2dnbGVcXFwiPnt7bGF5ZXJzdHJlZS50aXRsZX19PC9zcGFuPlxcbiAgPHVsIHYtc2hvdz1cXFwibGF5ZXJzdHJlZS5leHBhbmRlZFxcXCIgdi1pZj1cXFwiaXNGb2xkZXJcXFwiPlxcbiAgICA8dHJlZSA6bl9wYXJlbnQtY2hpbGRzLnN5bmM9XFxcIm5fcGFyZW50Q2hpbGRzXFxcIiA6bGF5ZXJzdHJlZT1cXFwibGF5ZXJzdHJlZVxcXCIgOmNoZWNrZWQ9XFxcInBhcmVudENoZWNrZWRcXFwiIHYtZm9yPVxcXCJsYXllcnN0cmVlIGluIGxheWVyc3RyZWUubm9kZXNcXFwiPlxcbiAgICA8L3RyZWU+XFxuICA8L3VsPlxcbjwvbGk+XFxuXFxuXFxuXFxuXCI7XG5cbn0se31dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBNYXBTZXJ2aWNlID0gcmVxdWlyZSgnZzN3L2NvcmUvbWFwc2VydmljZScpO1xuXG52YXIgUmVzdWx0c0xpc3QgPSBWdWUuZXh0ZW5kKHtcbiAgdGVtcGxhdGU6ICc8dWw+PGxpIHYtZm9yPVwicmVzdWx0IGluIHJlc3VsdHNcIiBAY2xpY2s9XCJnb3RvKHJlc3VsdC5sb24scmVzdWx0LmxhdClcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyXCI+e3sgcmVzdWx0LmRpc3BsYXlfbmFtZSB9fTwvbGk+PC91bD4nLFxuICBkYXRhOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzOiBbXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnb3RvOiBmdW5jdGlvbih4LHkpe1xuICAgICAgTWFwU2VydmljZS5nb1RvV0dTODQoW3gseV0pO1xuICAgIH1cbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzdWx0c0xpc3Q7XG5cbn0se1wiZzN3L2NvcmUvbWFwc2VydmljZVwiOjIxfV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjxmb3JtIGNsYXNzPVxcXCJuYXZiYXItZm9ybVxcXCIgcm9sZT1cXFwic2VhcmNoXFxcIiBAc3VibWl0LnByZXZlbnQ+XFxuICA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiA6cGxhY2Vob2xkZXI9XFxcInBsYWNlaG9sZGVyXFxcIiB2LW1vZGVsPVxcXCJxdWVyeVxcXCIgIG5hbWU9XFxcInNyY2gtdGVybVxcXCIgaWQ9XFxcInNyY2gtdGVybVxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwLWJ0blxcXCI+XFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgQGNsaWNrPVxcXCJzZWFyY2hcXFwiPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXNlYXJjaFxcXCI+PC9pPjwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZm9ybT5cXG5cIjtcblxufSx7fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHQgPSByZXF1aXJlKCdpMThuLnNlcnZpY2UnKTtcbnZhciBHZW9jb2RpbmdTZXJ2aWNlID0gcmVxdWlyZSgnZzN3L2NvcmUvZ2VvY29kaW5nc2VydmljZScpO1xuXG5WdWUuY29tcG9uZW50KFwiZ2VvY29kZXJcIix7XG4gIHRlbXBsYXRlOiByZXF1aXJlKFwiLi9nZW9jb2RpbmcuaHRtbFwiKSxcbiAgcHJvcHM6IFsndHlwZSddLFxuICBkYXRhOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICBxdWVyeTogXCJcIixcbiAgICAgIHBsYWNlaG9sZGVyOiB0KFwic3RyZWV0X3NlYXJjaFwiKVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHNlYXJjaDogZnVuY3Rpb24oZSl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgICAgdGhpcy5zZXJ2aWNlLnNlYXJjaChxdWVyeSk7XG4gICAgfVxuICB9LFxuICByZWFkeTogZnVuY3Rpb24oKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5zZXJ2aWNlID0gR2VvY29kaW5nU2VydmljZVt0aGlzLnR5cGVdO1xuICAgIHRoaXMuc2VydmljZS5vbihcInJlc3VsdHNcIixmdW5jdGlvbigpe1xuICAgICAgc2VsZi5xdWVyeSA9IFwiXCI7XG4gICAgfSlcbiAgfVxufSk7XG5cbn0se1wiLi9nZW9jb2RpbmcuaHRtbFwiOjM1LFwiZzN3L2NvcmUvZ2VvY29kaW5nc2VydmljZVwiOjE5LFwiaTE4bi5zZXJ2aWNlXCI6NX1dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm5vb3AgPSByZXF1aXJlKCdnM3cvY29yZS91dGlscycpLm5vb3A7XG5cbi8vIHJhcHByZXNlbnRhIGwnaW50ZXJmYWNjaWEgZ2xvYmFsZSBkZWxsJ0FQSSBkZWxsYSBHVUkuIFxuLy8gbWV0b2RpIGRldm9ubyBlc3NlcmUgaW1wbGVtZW50YXRpIChkZWZpbml0aSkgZGFsbCdhcHBsaWNhemlvbmUgb3NwaXRlXG5mdW5jdGlvbiBHVUkoKXtcbiAgdGhpcy5zaG93Rm9ybSA9IG5vb3A7XG4gIFxuICB0b2FzdHIub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gJ3RvYXN0LXRvcC1jZW50ZXInO1xuICAvLyBwcm94eSBkZWxsYSBsaWJyZXJpYSB0b2FzdHJcbiAgdGhpcy5ub3RpZnkgPSB0b2FzdHI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEdVSTtcblxufSx7XCJnM3cvY29yZS91dGlsc1wiOjI4fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcInt7aWR9fVxcXCIgc3R5bGU9XFxcIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCVcXFwiPjwvZGl2PlxcblwiO1xuXG59LHt9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdCA9IHJlcXVpcmUoJ2kxOG4uc2VydmljZScpO1xudmFyIE1hcFNlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9tYXBzZXJ2aWNlJyk7XG52YXIgUHJvamVjdFNlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9wcm9qZWN0c2VydmljZScpO1xuXG52YXIgb2wzaGVscGVycyA9IHJlcXVpcmUoJ2czdy1vbDMvc3JjL2czdy5vbDMnKS5oZWxwZXJzO1xuXG5WdWUuY29tcG9uZW50KCdnM3ctbWFwJyx7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuL21hcC5odG1sJyksXG4gIHByb3BzOiBbJ2lkJ10sXG4gIHJlYWR5OiBmdW5jdGlvbigpe1xuICAgIE1hcFNlcnZpY2Uuc2hvd1ZpZXdlcih0aGlzLiRlbC5pZCk7XG4gIH1cbn0pXG5cbn0se1wiLi9tYXAuaHRtbFwiOjM4LFwiZzN3LW9sMy9zcmMvZzN3Lm9sM1wiOjE0LFwiZzN3L2NvcmUvbWFwc2VydmljZVwiOjIxLFwiZzN3L2NvcmUvcHJvamVjdHNlcnZpY2VcIjoyNSxcImkxOG4uc2VydmljZVwiOjV9XSw0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiIDxmb3JtIHJvbGU9XFxcImZvcm1cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgIDxsYWJlbCBmb3I9XFxcImVtYWlsXFxcIj5FbWFpbCBhZGRyZXNzIEVkaXRvcjo8L2xhYmVsPlxcbiAgICA8aW5wdXQgdHlwZT1cXFwiZW1haWxcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJlbWFpbFxcXCI+XFxuICA8L2Rpdj5cXG4gIDxidXR0b24gdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIj5TdWJtaXQ8L2J1dHRvbj5cXG48L2Zvcm0+XCI7XG5cbn0se31dLDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBQbHVnaW5zU2VydmljZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3BsdWdpbnNzZXJ2aWNlJyk7XG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID0gcmVxdWlyZSgnZzN3L2NvcmUvcGx1Z2luc3JlZ2lzdHJ5Jyk7XG52YXIgUGFuZWxDb21wb25lbnQgPSByZXF1aXJlKCdnM3cvZ3VpL3BsdWdpbnMvcGFuZWxtaXhpbicpO1xuXG52YXIgdG9vbFBhbmVsID0gUGFuZWxDb21wb25lbnQuZXh0ZW5kKHtcbiAgICB0ZW1wbGF0ZSA6IHJlcXVpcmUoJy4vcGFuZWwuaHRtbCcpXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvb2xQYW5lbDtcblxufSx7XCIuL3BhbmVsLmh0bWxcIjo0MCxcImczdy9jb3JlL3BsdWdpbnNyZWdpc3RyeVwiOjIzLFwiZzN3L2NvcmUvcGx1Z2luc3NlcnZpY2VcIjoyNCxcImczdy9ndWkvcGx1Z2lucy9wYW5lbG1peGluXCI6NDh9XSw0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBzdHlsZT1cXFwiY29sb3I6d2hpdGU7XFxcIiBAY2xpY2s9XFxcImFjdGl2ZVRvb2wobmFtZSlcXFwiIHRpdGxlPVxcXCJ7eyBuYW1lIH19XFxcIj5cXG4ge3sgbmFtZSB9fVxcbjwvZGl2PlwiO1xuXG59LHt9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUGx1Z2luTWl4aW4gPSByZXF1aXJlKCdnM3cvZ3VpL3BsdWdpbnMvcGx1Z2lubWl4aW4nKTtcbi8vIGRlZmluZSBhIGNvbXBvbmVudCB0aGF0IHVzZXMgdGhpcyBtaXhpblxudmFyIHRvb2xQbHVnaW4gPSBQbHVnaW5NaXhpbi5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3BsdWdpbi5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24gKCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6J2VkaXRvcidcbiAgICAgIH1cbiAgICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gdG9vbFBsdWdpbjtcbn0se1wiLi9wbHVnaW4uaHRtbFwiOjQyLFwiZzN3L2d1aS9wbHVnaW5zL3BsdWdpbm1peGluXCI6NDl9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiIDxmb3JtIHJvbGU9XFxcImZvcm1cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgIDxsYWJlbCBmb3I9XFxcImVtYWlsXFxcIj5FbWFpbCBhZGRyZXNzOjwvbGFiZWw+XFxuICAgIDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImVtYWlsXFxcIj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgIDxsYWJlbCBmb3I9XFxcInB3ZFxcXCI+UGFzc3dvcmQ6PC9sYWJlbD5cXG4gICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwicHdkXFxcIj5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiY2hlY2tib3hcXFwiPlxcbiAgICA8bGFiZWw+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIj4gUmVtZW1iZXIgbWU8L2xhYmVsPlxcbiAgPC9kaXY+XFxuICA8YnV0dG9uIHR5cGU9XFxcInN1Ym1pdFxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCI+U3VibWl0PC9idXR0b24+XFxuPC9mb3JtPlwiO1xuXG59LHt9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUGx1Z2luc1NlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9wbHVnaW5zc2VydmljZScpO1xudmFyIFBsdWdpbnNSZWdpc3RyeSA9IHJlcXVpcmUoJ2czdy9jb3JlL3BsdWdpbnNyZWdpc3RyeScpO1xudmFyIFBhbmVsTWl4aW5Db21wb25lbnQgPSByZXF1aXJlKCdnM3cvZ3VpL3BsdWdpbnMvcGFuZWxtaXhpbicpO1xuXG52YXIgdG9vbFBhbmVsID0gUGFuZWxNaXhpbkNvbXBvbmVudC5leHRlbmQoe1xuICAgIHRlbXBsYXRlIDogcmVxdWlyZSgnLi9wYW5lbC5odG1sJylcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gdG9vbFBhbmVsO1xufSx7XCIuL3BhbmVsLmh0bWxcIjo0NCxcImczdy9jb3JlL3BsdWdpbnNyZWdpc3RyeVwiOjIzLFwiZzN3L2NvcmUvcGx1Z2luc3NlcnZpY2VcIjoyNCxcImczdy9ndWkvcGx1Z2lucy9wYW5lbG1peGluXCI6NDh9XSw0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBzdHlsZT1cXFwiY29sb3I6d2hpdGU7XFxcIiBAY2xpY2s9XFxcImFjdGl2ZVBsdWdpbihuYW1lKVxcXCIgIHRpdGxlPVxcXCJ7eyBuYW1lIH19XFxcIj5cXG4ge3sgbmFtZSB9fVxcbjwvZGl2PlwiO1xuXG59LHt9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUGx1Z2luTWl4aW4gPSByZXF1aXJlKCdnM3cvZ3VpL3BsdWdpbnMvcGx1Z2lubWl4aW4nKTtcbi8vIGRlZmluZSBhIGNvbXBvbmVudCB0aGF0IHVzZXMgdGhpcyBtaXhpblxudmFyIHRvb2xQbHVnaW4gPSBQbHVnaW5NaXhpbi5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3BsdWdpbi5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24gKCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6J2luZm8nXG4gICAgICB9XG4gICAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IHRvb2xQbHVnaW47XG59LHtcIi4vcGx1Z2luLmh0bWxcIjo0NixcImczdy9ndWkvcGx1Z2lucy9wbHVnaW5taXhpblwiOjQ5fV0sNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFBsdWdpbnNTZXJ2aWNlID0gcmVxdWlyZSgnZzN3L2NvcmUvcGx1Z2luc3NlcnZpY2UnKTtcbnZhciBQbHVnaW5zUmVnaXN0cnkgPSByZXF1aXJlKCdnM3cvY29yZS9wbHVnaW5zcmVnaXN0cnknKTtcblxudmFyIFBhbmVsQ29tcG9uZW50ID0gVnVlLmV4dGVuZCh7XG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZTogUGx1Z2luc1NlcnZpY2Uuc3RhdGVcbiAgICAgIH1cbiAgICB9XG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhbmVsQ29tcG9uZW50O1xuXG59LHtcImczdy9jb3JlL3BsdWdpbnNyZWdpc3RyeVwiOjIzLFwiZzN3L2NvcmUvcGx1Z2luc3NlcnZpY2VcIjoyNH1dLDQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB0ID0gcmVxdWlyZSgnaTE4bi5zZXJ2aWNlJyk7XG52YXIgUGx1Z2luc1NlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9wbHVnaW5zc2VydmljZScpO1xudmFyIFRvb2xzUGFuZWxzID0gcmVxdWlyZSgnLi9wbHVnaW5zbW9kdWxlcycpO1xuXG52YXIgcGx1Z2luTWl4aW5Db21wb25lbnQgPSBWdWUuZXh0ZW5kKHtcbiAgbWV0aG9kczoge1xuICAgIGFjdGl2ZVBsdWdpbjogZnVuY3Rpb24ocGx1Z2luTmFtZSl7XG4gICAgICBjb25zb2xlLmxvZyhUb29sc1BhbmVscylcbiAgICAgIFBsdWdpbnNTZXJ2aWNlLnNldEFjdGl2ZVBsdWdpbihwbHVnaW5OYW1lKTtcbiAgICAgIHZhciBwYW5lbCA9IFRvb2xzUGFuZWxzLmdldFBsdWdpblBhbmVsKHBsdWdpbk5hbWUpO1xuICAgICAgcGFuZWwgPSBuZXcgcGFuZWwoKTtcbiAgICAgIHBhbmVsLiRtb3VudCgpLiRhcHBlbmRUbygnI2czdy1wYW5lbCcpO1xuICAgICAgUGx1Z2luc1NlcnZpY2Uuc2V0QWN0aXZlUGFuZWwocGFuZWwpO1xuICAgIH1cbiAgfVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBwbHVnaW5NaXhpbkNvbXBvbmVudDtcbn0se1wiLi9wbHVnaW5zbW9kdWxlc1wiOjUyLFwiZzN3L2NvcmUvcGx1Z2luc3NlcnZpY2VcIjoyNCxcImkxOG4uc2VydmljZVwiOjV9XSw1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBpZD1cXFwidG9vbHNcXFwiPlxcbjwvZGl2PlwiO1xuXG59LHt9XSw1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID0gcmVxdWlyZSgnZzN3L2NvcmUvcGx1Z2luc3JlZ2lzdHJ5Jyk7XG52YXIgUGx1Z2luc01vZHVsZSA9IHJlcXVpcmUoJy4vcGx1Z2luc21vZHVsZXMnKTtcbnZhciBQbHVnaW5zU2VydmljZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3BsdWdpbnNzZXJ2aWNlJyk7XG5cblZ1ZS5jb21wb25lbnQoJ2czdy10b29scy1wYW5lbCcse1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3Rvb2xzLXBhbmVsLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICBcdHJldHVybiB7XG4gICAgICAgICAgc3RhdGU6IFBsdWdpbnNTZXJ2aWNlLnN0YXRlXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgXHRzaG93U2lkZWJhcjogZnVuY3Rpb24oKSB7XG4gICAgXHQgIFBsdWdpbnNTZXJ2aWNlLnNldEFjdGl2ZVBsdWdpbignJyk7XG4gICAgXHQgIHZhciBhY3RpdmVQYW5lbCA9IFBsdWdpbnNTZXJ2aWNlLmdldEFjdGl2ZVBhbmVsKCk7XG4gICAgXHQgIGFjdGl2ZVBhbmVsLiRyZW1vdmUoKTtcbiAgICBcdCAgUGx1Z2luc1NlcnZpY2Uuc2V0QWN0aXZlUGFuZWwoe30pO1xuICAgIFx0fVxuXHR9XG59KTtcblxuVnVlLmNvbXBvbmVudCgnZzN3LXRvb2xzJyx7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vcGx1Z2lucy5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZTogUGx1Z2luc1JlZ2lzdHJ5LnN0YXRlXG4gICAgICB9XG4gICAgfSxcbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGx1Z2luO1xuICAgICAgdGhpcy5zdGF0ZS5wbHVnaW5zLmZvckVhY2goZnVuY3Rpb24oX3BsdWdpbil7XG4gICAgICAgIHBsdWdpbiA9IFBsdWdpbnNNb2R1bGUuZ2V0UGx1Z2luTW9kdWxlKF9wbHVnaW4ubmFtZSk7XG4gICAgICAgIHBsdWdpbiA9IG5ldyBwbHVnaW47XG4gICAgICAgIHBsdWdpbi4kbW91bnQoKS4kYXBwZW5kVG8oJyN0b29scycpO1xuICAgICAgfSlcbiAgICB9XG59KTtcblxufSx7XCIuL3BsdWdpbnMuaHRtbFwiOjUwLFwiLi9wbHVnaW5zbW9kdWxlc1wiOjUyLFwiLi90b29scy1wYW5lbC5odG1sXCI6NTMsXCJnM3cvY29yZS9wbHVnaW5zcmVnaXN0cnlcIjoyMyxcImczdy9jb3JlL3BsdWdpbnNzZXJ2aWNlXCI6MjR9XSw1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUGx1Z2luc01vZHVsZSA9IHtcbiAgbW9kdWxlczogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdpbmZvJyxcbiAgICAgIHBsdWdpbk1vZHVsZTogcmVxdWlyZSgnZzN3L2d1aS9wbHVnaW5zL2luZm8vcGx1Z2luJyksXG4gICAgICBwYW5lbE1vZHVsZTogcmVxdWlyZSgnZzN3L2d1aS9wbHVnaW5zL2luZm8vcGFuZWwnKVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2VkaXRvcicsXG4gICAgICBwbHVnaW5Nb2R1bGU6IHJlcXVpcmUoJ2czdy9ndWkvcGx1Z2lucy9lZGl0b3IvcGx1Z2luJyksXG4gICAgICBwYW5lbE1vZHVsZTogcmVxdWlyZSgnZzN3L2d1aS9wbHVnaW5zL2VkaXRvci9wYW5lbCcpXG4gICAgfVxuICBdLFxuICBnZXRQbHVnaW5Nb2R1bGU6IGZ1bmN0aW9uKG1vZHVsZU5hbWUpIHtcbiAgICB2YXIgdG9vbCA9IGZhbHNlO1xuICAgIHRoaXMubW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uKF9tb2R1bGUpIHtcbiAgICAgIGlmIChtb2R1bGVOYW1lID09IF9tb2R1bGUubmFtZSkge1xuICAgICAgICAgIHRvb2wgPSBfbW9kdWxlLnBsdWdpbk1vZHVsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdG9vbFxuICB9LFxuICBnZXRQbHVnaW5QYW5lbDogZnVuY3Rpb24ocGFuZWxOYW1lKSB7XG4gICAgdmFyIHBhbmVsID0gZmFsc2U7XG4gICAgdGhpcy5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24oX21vZHVsZSkge1xuICAgICAgaWYgKHBhbmVsTmFtZSA9PSBfbW9kdWxlLm5hbWUpIHtcbiAgICAgICAgICBwYW5lbCA9IF9tb2R1bGUucGFuZWxNb2R1bGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhbmVsXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbHVnaW5zTW9kdWxlO1xufSx7XCJnM3cvZ3VpL3BsdWdpbnMvZWRpdG9yL3BhbmVsXCI6NDEsXCJnM3cvZ3VpL3BsdWdpbnMvZWRpdG9yL3BsdWdpblwiOjQzLFwiZzN3L2d1aS9wbHVnaW5zL2luZm8vcGFuZWxcIjo0NSxcImczdy9ndWkvcGx1Z2lucy9pbmZvL3BsdWdpblwiOjQ3fV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+XFxuICA8aGVhZGVyIHYtaWY9XFxcInN0YXRlLmFjdGl2ZVBsdWdpbiAhPSAnJ1xcXCI+XFxuICAgIDxidXR0b24gQGNsaWNrPVxcXCJzaG93U2lkZWJhclxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5CYWNrPC9idXR0b24+XFxuICA8L2hlYWRlcj5cXG4gIDxkaXYgc3R5bGU9XFxcImNvbG9yOiNmZmZmZmZcXFwiIGlkPVxcXCJnM3ctcGFuZWxcXFwiPjwvZGl2PlxcbjwvZGl2PlwiO1xuXG59LHt9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGxpPlxcbjxmb3JtIHJvbGU9XFxcImZvcm1cXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwiYm94LWJvZHlcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICA8bGFiZWwgZm9yPVxcXCJleGFtcGxlSW5wdXRFbWFpbDFcXFwiIHN0eWxlPVxcXCJjb2xvcjogd2hpdGVcXFwiPkVtYWlsIGFkZHJlc3M8L2xhYmVsPlxcbiAgICAgIDxpbnB1dCB0eXBlPVxcXCJlbWFpbFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImV4YW1wbGVJbnB1dEVtYWlsMVxcXCIgcGxhY2Vob2xkZXI9XFxcIlxcXCI+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG4gICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCI+Q2lhbzwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZm9ybT5cXG48L2xpPlwiO1xuXG59LHt9XSw1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdCA9IHJlcXVpcmUoJ2kxOG4uc2VydmljZScpO1xuXG5WdWUuY29tcG9uZW50KCdnM3ctc2VhcmNoJyx7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vc2VhcmNoLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICBcdHJldHVybiB7XG4gICAgICAgIFx0XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgXHRcblx0fVxufSk7XG5cbn0se1wiLi9zZWFyY2guaHRtbFwiOjU0LFwiaTE4bi5zZXJ2aWNlXCI6NX1dfSx7fSxbMV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
