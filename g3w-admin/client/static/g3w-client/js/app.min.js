!function e(t,i,r){function n(s,a){if(!i[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return n(i?i:e)},u,u.exports,e,t,i,r)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(e,t,i){var r="G3W Client",n={},o={tools:[]},s=["zoom","zoombox","query"],a={resources:e("./locales/app.js")},l={debug:!0,local:!1},c={urls:{ows:"/ows",api:"/api",config:"/api/config",staticurl:""}};t.exports={apptitle:r,client:l,server:c,plugins:n,tools:o,map:{controls:s},i18n:a}},{"./locales/app.js":2}],2:[function(e,t,i){var r={it:{translation:{component:"Componente Generico",search:"Ricerca",catalog:"Catalogo dati",baselayers:"Basi",tools:"Strumenti",tree:"Dati",legend:"Legenda",street_search:"Cerca indirizzo"}}};t.exports=r},{}],3:[function(e,t,i){function r(){return{apptitle:c.apptitle||"",debug:c.client.debug||!1,group:c.group,urls:c.server.urls,resourcesurl:c.server.urls.staticurl,projects:c.group.projects,initproject:c.group.initproject,baselayers:c.group.baselayers,crs:c.group.crs,proj4:c.group.proj4,minscale:c.group.minscale,maxscale:c.group.maxscale,getWmsUrl:function(e){return c.server.urls.ows+"/"+c.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return c.server.urls.config+"/"+c.group.id+"/"+e.type+"/"+e.id},plugins:c.group.plugins,tools:c.tools,views:c.views||{},map:c.map}}function n(){var t=e("sdk").gui.vue.CatalogComponent,i=e("sdk").gui.vue.SearchComponent,r=e("sdk").gui.vue.ToolsComponent,n=e("sdk").gui.vue.MapComponent;return{title:c.apptitle,placeholders:{navbar:{components:[]},sidebar:{components:[new i({id:"search",openOnStart:!1,dataIcon:"fa fa-search"}),new t({id:"catalog",openOnStart:!0,dataIcon:"fa fa-database"}),new r({id:"tools",openOnStart:!1,dataIcon:"fa fa-gear"})]},content:{components:[]},floatbar:{components:[]}},viewport:{map:new n({id:"map"}),contentx:null}}}function o(){var e=$.Deferred();return window.initConfig?e.resolve(window.initConfig):($(document).on("initconfigReady",function(t,i){return e.resolve(i)}),e.promise())}var s=e("sdk").core.i18n.init,a=e("sdk/sdk").core.ApplicationService,l=e("./template/js/template");window.g3wsdk=e("sdk");var c=e("./config/config.js");a.on("ready",function(){var e=n();applicationTemplate=new l(e,this),applicationTemplate.init()}),bootstrap=function(){s(c.i18n),o().then(function(e){c.server.urls.staticurl=e.staticurl,c.group=e.group;var t=r();a.init(t)})}()},{"./config/config.js":1,"./template/js/template":15,sdk:78,"sdk/sdk":78}],4:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Toggle button on navbar only for mobile -->\n      <a v-if="isMobile()" href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  <sidebar></sidebar>\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <viewport></viewport>\n  </div>\n  <!-- /.content-wrapper -->\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],5:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <a v-show="panelsinstack" href="#" class="floatbar-aside-toggle" data-toggle="control-sidebar" role="button">\n    <span class="sr-only">Expand</span>\n  </a>\n  <div v-show="panelsinstack" class="g3w-sidebarpanel">\n    <div class="row">\n      <div class="col-xs-12 col-sm-12 col-md-12">\n        <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button>\n      </div>\n    </div>\n    <div>\n      <h4 class="g3w-floatbarpanel-name">{{ panelname }}</h2>\n    </div>\n    <div id="g3w-floatbarpanel-placeholder" class="g3w-floatbarpanel-placeholder"></div>\n  </div>\n</aside>\n'},{}],6:[function(e,t,i){t.exports='<li class="treeview" :class="{\'active\': openOnStart}">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span class="treeview-label">{{dataLabel | t}}</span>\n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <div id="g3w-sidebarcomponent-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n  </ul>\n</li>\n'},{}],7:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n  <!-- Sidebar toggle button-->\n  <!-- Toggle button on the left side of main sidebar only if not mobile -->\n  <a v-if="!isMobile()" href="#" class="sidebar-aside-toggle" data-toggle="offcanvas" role="button">\n    <span class="sr-only">Expand</span>\n  </a>\n	<section class="sidebar">\n    <div v-show="panelsinstack" class="g3w-sidebarpanel">\n      <div class="row">\n        <div class="col-xs-12 col-sm-12 col-md-12">\n          <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button></div>\n      </div>\n      <div>\n        <h4>{{ panelname }}</h2>\n      </div>\n      <div id="g3w-sidebarpanel-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n    </div>\n	  <ul id="g3w-sidebarcomponents" v-show="componentsinstack" class="sidebar-menu">\n	    <!--<sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n        <g3w-search></g3w-search>\n      </sidebar-item>\n      <sidebar-item open-on-start="true" data-icon="fa fa-database" data-label="catalog" data-type="inline">\n        <g3w-catalog></g3w-catalog>\n      </sidebar-item>\n      <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n        <g3w-tools></g3w-tools>\n      </sidebar-item>-->\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],8:[function(e,t,i){t.exports='<div>\n  <div v-if="primary">\n  </div>\n</div>\n\n'},{}],9:[function(e,t,i){t.exports='<div>\n  <div id="g3w-map-view"></div>\n  <div id="g3w-contenx-view"></div>\n</div>\n'},{}],10:[function(e,t,i){var r=e("./layout"),n=Vue.extend({template:e("../html/app.html"),ready:function(){function e(){$(i).css("max-height",$(window).innerHeight()),$(".g3w-sidebarpanel").height($(window).innerHeight()-$(".main-header").innerHeight())}function t(){$("#g3w-modal-overlay").height($(window).innerHeight())}r.loading(!1),r.setup(),$("body").toggleClass("fixed"),r.layout.fixSidebar(),r.pushMenu.expandOnHover(),r.layout.activate(),r.controlSidebar._fix($(".control-sidebar-bg")),r.controlSidebar._fix($(".control-sidebar"));var i=r.options.controlSidebarOptions.selector;e(),$(window).resize(function(){e(),t()})},methods:{closePanel:function(){sidebarService.closePanel()},isMobile:function(){return isMobile.any}}});t.exports=n},{"../html/app.html":4,"./layout":13}],11:[function(e,t,i){function r(){this._panels=[],this.state={panels:[]}}var n=e("sdk/core/utils/utils").inherit,o=e("sdk/core/g3wobject");n(r,o);var s=r.prototype;s.push=function(e,t){var i=this,r=e.getId();_.forEach(i.state.panels,function(e){e.id==r&&(console.log("esiste g"),i._panels[e.position].unmount(),i._panels[e.position]=e)}),e.mount(t).then(function(){var t=i._panels.push(e)-1;i.state.panels.push({id:e.getId(),title:e.getTitle(),position:t})})},s.pop=function(){var e=this,t=this._panels.slice(-1)[0];t.unmount().then(function(){e.state.panels.pop(),e._panels.pop()})},t.exports=r},{"sdk/core/g3wobject":19,"sdk/core/utils/utils":40}],12:[function(e,t,i){function r(){this.stack=new n,this.init=function(e){this.layout=e,this.closable=!0,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector),this._zindex=this.sidebarEl.css("z-index"),this._modalOverlay=null,this._modal=!1},this.showPanel=function(e,t){var t=t||{},i=t.modal||!1;this.closable=t.closable||!0,this.stack.push(e,"#g3w-floatbarpanel-placeholder"),this.layout.floatBar.open(this.sidebarEl,!0),i&&(this._modal=!0,o.setModal(),this.sidebarEl.css("z-index",5e3),this.sidebarEl.css("padding-top","0px"),$(".control-sidebar-bg").css("z-index",4999),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"))},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy(),this.stack.length||(this._modal?(o.setModal(!1),this.layout.floatBar.close(this.sidebarEl,!0),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"),this.sidebarEl.css("z-index",""),this.sidebarEl.css("padding-top","50px"),$(".control-sidebar-bg").css("z-index",""),this._modal=!1):this.layout.floatBar.close(this.sidebarEl,!0))},this.hidePanel=function(){this.layout.floatBar.close(this.sidebarEl,!0)}}var n=(e("sdk/core/i18n/i18n.service").t,e("./barstack.js")),o=e("sdk/gui/gui"),s=new r,a=Vue.extend({template:e("../html/floatbar.html"),data:function(){return{stack:s.stack.state}},computed:{panelsinstack:function(){return this.stack.panels.length>0},panelname:function(){var e="";return this.stack.panels.length&&(e=this.stack.panels.slice(-1)[0].name),e},closable:function(){return s.closable}},watch:{"stack.panels":function(){var e=$("#g3w-floatbarpanel-placeholder").children();_.forEach(e,function(t,i){i==e.length-1?$(t).show():$(t).hide()})}},methods:{closePanel:function(){s.closePanel()}}});t.exports={FloatbarService:s,FloatbarComponent:a}},{"../html/floatbar.html":5,"./barstack.js":11,"sdk/core/i18n/i18n.service":22,"sdk/gui/gui":54}],13:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var r;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),r=t-e):($(".content-wrapper, .right-side").css("min-height",i),r=i);var n=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof n&&n.height()>r&&$(".content-wrapper, .right-side").css("min-height",n.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,i=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var r=$(this),n=r.next();if(n.is(".treeview-menu")&&n.is(":visible"))n.slideUp(i,function(){n.parent("li.treeview").removeClass("active"),n.removeClass("menu-open")});else if(n.is(".treeview-menu")&&!n.is(":visible")){var o,s=r.parents("ul").first(),a=r.parent("li"),l=a.siblings(),c=s.height()-s.find("li.header").outerHeight(),u=a.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var p=c-u;n.css({height:p+"px","max-height":p+"px","overflow-y":"auto"});var h=s.find("ul.treeview-menu:visible").slideUp(i);h.removeClass("menu-open"),n.slideDown(i,function(){n.addClass("menu-open"),o=s.find("li.treeview.active"),o.removeClass("active"),a.addClass("active"),t.layout.fix()})}n.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,i=$(t.selector),r=$(t.toggleBtnSelector);r.on("click",function(r){r.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var n=$(".control-sidebar-bg");e._fix(n),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),r=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),r.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),r.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(n),r.onLoadStart.call(e)}function i(e){e.find(n).remove(),r.onLoadDone.call(e)}var r=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),n=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===r.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),n=e.find(r.trigger).first();n.on("click",function(n){n.preventDefault(),t(e),e.find(".box-body").load(r.source,function(){i(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},$.LayoutManager.loading=function(e){var e=_.isBoolean(e)?e:!0;e?$("body").append('<div id="loadspinner" class="loading"></div>'):$("#loadspinner").remove()},t.exports=$.LayoutManager},{}],14:[function(e,t,i){function r(){this.stack=new o,this.state={components:[]},this.init=function(e){this.layout=e},this.addComponent=function(e){this.state.components.push(e);var t=(new s).$mount().$appendTo("#g3w-sidebarcomponents");t.dataLabel=e.title||t.dataLabel,t.openOnStart=void 0===e.openOnStart?t.openOnStart:e.openOnStart,t.dataIcon=e.dataIcon||t.dataIcon,e.mount("#g3w-sidebarcomponent-placeholder"),_.has(e,"initService")&&e.initService()},this.removeComponent=function(){},this.showPanel=function(e){var t="#g3w-sidebarpanel-placeholder";this.stack.push(e,t)},this.closePanel=function(){this.stack.pop()}}var n=e("sdk/core/i18n/i18n.service").t,o=e("./barstack.js"),s=Vue.extend({template:e("../html/sidebar-item.html"),data:function(){return{main:!0,component:null,active:!1,dataType:"inline",dataLabel:"component",dataIcon:null,openOnStart:!0}}}),a=new r,l=Vue.extend({template:e("../html/sidebar.html"),data:function(){return{components:a.state.components,panels:a.stack.state.panels,bOpen:!0,bPageMode:!1,header:n("main navigation")}},computed:{panelsinstack:function(){return this.panels.length>0},componentsinstack:function(){return this.components.length>0},componentname:function(){var e="";return this.components.length&&(e=this.components.slice(-1)[0].getName()),e},panelname:function(){var e="";return this.panels.length&&(e=this.panels.slice(-1)[0].name),e}},methods:{closePanel:function(){a.closePanel()},isMobile:function(){return isMobile.any}},ready:function(){}});t.exports={SidebarService:a,SidebarComponent:l}},{"../html/sidebar-item.html":6,"../html/sidebar.html":7,"./barstack.js":11,"sdk/core/i18n/i18n.service":22}],15:[function(e,t,i){var r=e("sdk/core/i18n/i18n.service").t;e("sdk/gui/vue/vue.directives");var n=e("sdk/gui/componentsregistry"),o=e("sdk/gui/gui"),s=e("./sidebar"),a=(e("./floatbar"),e("./viewport")),l=(e("./applicationui"),e("./layout"));l.loading();var c=function(t,i){self=this,this.templateConfig=t,this.ApplicationService=i,this.init=function(){var e=i.getConfig();e.debug&&(Vue.config.debug=!0),this._setupInterface(),this._setupLayout()},this._setupLayout=function(){Vue.filter("t",function(e){return r(e)});var t=e("./sidebar").SidebarComponent,i=e("./floatbar").FloatbarComponent,n=e("./applicationui");Vue.component("sidebar",t),Vue.component("floatbar",i),Vue.component("app",n);new Vue({el:"body",ready:function(){$(document).localize(),self._buildTemplate()}})},this._buildTemplate=function(){var e=this,t=this.templateConfig.placeholders;_.forEach(t,function(t,i){_.forEach(t.components,function(t){e._addComponent(i,t)})});var i=this.templateConfig.viewport.map;a.init(i,null),o.ready()},this._addComponent=function(e,t){if(c.PLACEHOLDERS.indexOf(e)>-1){var i=c.PlaceholdersServices[e];i&&(i.addComponent(t),n.addComponent(t))}},this._removeComponent=function(e,t){n.removeComponent(component)},this._showSidebar=function(){},this._hideSidebar=function(){},this._addToolsGroup=function(e){},this._removeToolsGroup=function(e){},this._addTools=function(e,t){},this._removeTool=function(e){},this._setupInterface=function(){o.addComponent=_.bind(this._addComponent,this),o.removeComponent=_.bind(this._removeComponent,this),o.getResourcesUrl=_.bind(function(){return this.ApplicationService.config.resourcesurl},this),o.showForm=function(){},o.closeForm=function(){},o.showList=function(){},o.closeList=function(){},o.showTable=function(){},o.closeTable=function(){},o.showPanel=_.bind(s.SidebarService.showPanel,s.SidebarService),o.closePanel=_.bind(s.SidebarService.closePanel,s.SidebarService),toastr.options.positionClass="toast-top-center",toastr.options.preventDuplicates=!0,o.notify=toastr,o.dialog=bootbox,o.showSpinner=function(){},o.hideSpinner=function(){},o.showFloatbar=function(){},o.hideFloatbar=function(){},o.showSidebar=_.bind(this._showSidebar,this),o.hideSidebar=_.bind(this._hideSidebar,this),o.addToolsGroup=_.bind(this._addToolsGroup,this),o.removeToolsGroup=_.bind(this._removeToolsGroup,this),o.addTool=_.bind(this._addTools,this),o.removeTool=_.bind(this._removeTool,this)}};c.PLACEHOLDERS=["navbar","sidebar","map","content","floatbar"],c.PlaceholdersServices={navbar:null,sidebar:s.SidebarService,map:null,content:null,floatbar:s.FloatbarService},t.exports=c},{"./applicationui":10,"./floatbar":12,"./layout":13,"./sidebar":14,"./viewport":16,"sdk/core/i18n/i18n.service":22,"sdk/gui/componentsregistry":53,"sdk/gui/gui":54,"sdk/gui/vue/vue.directives":77}],16:[function(e,t,i){var r=e("core/utils/utils").inherit,n=(e("core/utils/utils").base,e("core/utils/utils").merge,e("core/g3wobject")),o=Vue.extend({template:e("../html/view.html"),replace:!1,data:function(){return{primary:!1,width:3,visible:!1}}}),s=(Vue.component("viewport",{template:e("../html/viewport.html"),components:{map:o,content:o}}),function(){this.state={primaryView:"map"},this.views={map:null,contenx:null},this.init=function(e,t){var i=new o({el:"#g3w-map-view"});this.views.map=i;var r=new o({el:"#g3w-contenx-view"});this.views.contentx=r,this.setPrimaryView("map"),e.mount("#g3w-contenx-view")},this.setPrimaryView=function(e){this.state.primaryView=e,_.forEach(this.view,function(e){e.primary=!1}),this.views[e].primary=!0},this.showSecondaryView=function(e){[2,3].indexOf(e)>-1},this.getContentView=function(){return this.state,views.contentx.component}});r(s,n),t.exports=new s},{"../html/view.html":8,"../html/viewport.html":9,"core/g3wobject":19,"core/utils/utils":40}],17:[function(e,t,i){function r(){this._config=null,this._baseUrl=null,this._apiUrls={},this.init=function(e){this._config=e,this._baseUrl=e.urls.api,this._apiEndpoints=e.urls.apiEndpoints};var e=0;this._incrementLoaders=function(){0==e&&this.emit("apiquerystart"),e+=1},this._decrementLoaders=function(){e-=1,0==e&&this.emit("apiqueryend")},this.get=function(e,t){var i=this,r=this._apiEndpoints[e];if(r){var n=this._baseUrl+"/"+r;t.request&&(n=n+"/"+t.request);var o=t.params||{};return i.emit(e+"querystart"),this._incrementLoaders(),$.get(n,o).done(function(t){return i.emit(e+"queryend",t),t}).fail(function(t){return i.emit(e+"queryfail",t),t}).always(function(){i._decrementLoaders()})}return a()},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("core/utils/utils").reject;n(r,s),t.exports=new r},{"core/g3wobject":19,"core/utils/utils":40}],18:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/g3wobject"),s=e("core/apiservice"),a=e("core/project/projectsregistry"),l=e("core/plugin/pluginsregistry"),c=function(){this.secret="### G3W Client Application Service ###";this.initialized=!1,this._modalOverlay=null,this.config={},n(this),this.init=function(e){this._config=e,this._bootstrap()},this.getConfig=function(){return this._config},this._bootstrap=function(){var e=this;this.initialized||$.when(s.init(this._config),a.init(this._config),l.init({plusingBaseUrl:this._config.urls.staticurl,pluginsConfigs:this._config.plugins})).then(function(){e.emit("ready"),this.initialized=!0})}};r(c,o),t.exports=new c},{"core/apiservice":17,"core/g3wobject":19,"core/plugin/pluginsregistry":32,"core/project/projectsregistry":34,"core/utils/utils":40}],19:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").noop,o=function(){this.setters&&this._setupListenersChain(this.setters)};r(o,EventEmitter);var s=o.prototype;s.onafter=function(e,t){return this._onsetter("after",e,t,!1)},s.onbefore=function(e,t){return this._onsetter("before",e,t,!1)},s.onbeforeasync=function(e,t){return this._onsetter("before",e,t,!0)},s.un=function(e,t){_.forEach(this.settersListeners,function(i,r){_.forEach(i[e],function(e){e.key==t&&delete e})})},s._onsetter=function(e,t,i,r){var n=this.settersListeners[e],o=""+Math.floor(1e6*Math.random())+Date.now();return n[t].push({key:o,fnc:i,async:r}),o},s._setupListenersChain=function(e){var t=this;this.settersListeners={after:{},before:{}},_.forEach(e,function(e,i){var r=n,o=n;_.isFunction(e)?r=e:(r=e.fnc,o=e.fallback||n),t.settersListeners.after[i]=[],t.settersListeners.before[i]=[],t[i]=function(){function e(){c=r.apply(t,a),l.resolve(c);var e=t.settersListeners.after[i];_.forEach(e,function(e,i){e.fnc.apply(t,a)})}function n(){o.apply(t,a),l.reject()}function s(r){var o=!0;_.isBoolean(r)&&(o=r);var l=Array.prototype.slice.call(a);if(o===!1||u==p.length)o===!1?n.apply(t,a):(completed=e.apply(t,a),(_.isUndefined(completed)||completed===!0)&&t.emitEvent("set:"+i,a));else if(o){var c=p[u].fnc;if(p[u].async)l.push(s),u+=1,c.apply(t,l);else{var h=c.apply(t,l);u+=1,s(h)}}}var a=arguments,l=$.Deferred(),c=null,u=0,p=this.settersListeners.before[i];return u=0,s(),l.promise()}})},t.exports=o},{"core/utils/utils":40}],20:[function(e,t,i){var r={distance:function(e,t){return Math.sqrt(r.squaredDistance(e,t))},squaredDistance:function(e,t){var i=e[0],r=e[1],n=t[0],o=t[1],s=n-i,a=o-r;return s*s+a*a},closestOnSegment:function(e,t){var i,r,n=e[0],o=e[1],s=t[0],a=t[1],l=s[0],c=s[1],u=a[0],p=a[1],h=u-l,d=p-c,f=0===h&&0===d?0:(h*(n-l)+d*(o-c))/(h*h+d*d||0);return 0>=f?(i=l,r=c):f>=1?(i=u,r=p):(i=l+f*h,r=c+f*d),[i,r]}};t.exports=r},{}],21:[function(e,t,i){var r={};r.GeometryTypes={POINT:"Point",MULTIPOINT:"MultiPoint",LINESTRING:"Line",MULTILINESTRING:"MultiLine",POLYGON:"Polygon",MULTIPOLYGON:"MultiPolygon",GEOMETRYCOLLECTION:"GeometryCollection"},r.SupportedGeometryTypes=[r.GeometryTypes.POINT,r.GeometryTypes.MULTIPOINT,r.GeometryTypes.LINESTRING,r.GeometryTypes.MULTILINESTRING,r.GeometryTypes.POLYGON,r.GeometryTypes.MULTIPOLYGON],t.exports=r},{}],22:[function(e,t,i){function r(e){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e.resources}),jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0})}var n=function(e){var t=i18next.t(e);return t};t.exports={init:r,t:n}},{}],23:[function(e,t,i){var r={PICKED:"picked"},n=function(e,t){this.type=e,this.coordinate=t},o=function(e){this.previousCursor_=null,ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_})};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return!0},o.handleUpEvent_=function(e){return this.dispatchEvent(new n(r.PICKED,e.coordinate)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement();t.style.cursor="pointer"},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e)},t.exports=o},{}],24:[function(e,t,i){var r={PICKED:"picked"},n=function(e,t,i){this.type=e,this.feature=i,this.coordinate=t},o=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_}),this.features_=e.features||null,this.layers_=e.layers||null,this.pickedFeature_=null;var t=this;this.layerFilter_=function(e){return _.includes(t.layers_,e)}};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return this.pickedFeature_=this.featuresAtPixel_(e.pixel,e.map),!0},o.handleUpEvent_=function(e){return this.pickedFeature_&&this.dispatchEvent(new n(r.PICKED,e.coordinate,this.pickedFeature_)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=this.featuresAtPixel_(e.pixel,e.map);i?t.style.cursor="pointer":t.style.cursor=""},o.prototype.featuresAtPixel_=function(e,t){var i=null,r=t.forEachFeatureAtPixel(e,function(e){return this.features_?this.features_.indexOf(e)>-1?e:null:e},this,this.layerFilter_);return r&&(i=r),i},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e);
},t.exports=o},{}],25:[function(e,t,i){var r=(e("core/utils/utils").inherit,e("core/utils/utils").base,e("core/g3wobject"),e("core/geometry/geometry").GeometryTypes,{QUERY:1,EDIT:2});LayerState={},LayerState.ServerTypes={OGC:"OGC",QGIS:"QGIS",Mapserver:"Mapserver",Geoserver:"Geoserver",ArcGIS:"ArcGIS"},LayerState.getGeometryType=function(e){return e.geometrytype},LayerState.getAttributes=function(e){var t=[];return e.attributes&&(t=_.map(e.attributes,function(e){return e.name})),t},LayerState.isQueryable=function(e){var t=!1,i=!!(e.capabilities&&e.capabilities&&r.QUERY);if(i)var t=e.visible&&!e.disabled||e.infowhennotvisible&&e.infowhennotvisible===!0;return t},LayerState.getQueryLayerName=function(e){var t;return t=e.infolayer&&""!=e.infolayer?e.infolayer:e.name},LayerState.getServerType=function(e){return e.servertype&&""!=e.servertype?e.servertype:LayerState.ServerTypes.QGIS},LayerState.isExternalWMS=function(e){return e.source&&e.source.url},LayerState.getWMSLayerName=function(e){var t=e.name;return e.source&&e.source.layers&&(t=e.source.layers),t},LayerState.getOriginURL=function(e){var t;return e.source&&"wms"==e.source.type&&e.source.url&&(t=e.source.url),t},t.exports=LayerState},{"core/g3wobject":19,"core/geometry/geometry":21,"core/utils/utils":40}],26:[function(e,t,i){function r(e){var e=e||{};this.geometrytype=e.geometrytype||null,this.format=e.format||null,this.crs=e.crs||null,this.id=e.id||null,this.name=e.name||"",this.pk=e.pk||"id",this._olSource=new ol.source.Vector({features:new ol.Collection}),this._olLayer=new ol.layer.Vector({name:this.name,source:this._olSource}),this._PKinAttributes=!1,this._featuresFilter=null,this._fields=null,this.lazyRelations=!0,this._relations=null}var n=e("core/utils/utils").inherit,o=(e("core/utils/utils").truefnc,e("core/utils/utils").resolve),s=(e("core/utils/utils").reject,e("core/g3wobject"));n(r,s),t.exports=r;var a=r.prototype;a.setData=function(e){var t,i=this;if(this.format){switch(this.format){case"GeoJSON":var r=new ol.format.GeoJSON({defaultDataProjection:this.crs,geometryName:"geometry"});t=r.readFeatures(e)}if(t&&t.length){if(!_.isNull(this._featuresFilter))var t=_.map(t,function(e){return i._featuresFilter(e)});var n=this.getFeatureIds(),o=_.filter(t,function(e){return!_.includes(n,e.getId())});this._olSource.addFeatures(o);var s=this.getSource().getFeatures()[0].getProperties();this._PKinAttributes=!!_.get(s,this.pk)}}else console.log("VectorLayer format not defined")},a.setFeatureData=function(e,t,i,r){var n=this.getFeatureById(e);if(t&&n.setId(t),i&&n.setGeometry(i),r){var o=n.getProperties(),s=_.assign(o,r);n.setProperties(s)}return n},a.addFeatures=function(e){this.getSource().addFeatures(e)},a.setFeaturesFilter=function(e){this._featuresFilter=e},a.setFields=function(e){this._fields=e},a.setPkField=function(){var e=this,t=!1;_.forEach(this._fields,function(i){i.name==e.pk&&(t=!0)}),t||this._fields},a.getFeatures=function(){return this.getSource().getFeatures()},a.getFeatureIds=function(){var e=_.map(this.getSource().getFeatures(),function(e){return e.getId()});return e},a.getFields=function(){return _.cloneDeep(this._fields)},a.getFieldsNames=function(){return _.map(this._fields,function(e){return e.name})},a.getFieldsWithAttributes=function(e){var t,i,r=this,n=_.cloneDeep(this._fields);return e instanceof ol.Feature?t=e:e&&(t=this.getFeatureById(e)),t&&(i=t.getProperties()),_.forEach(n,function(e){t?this._PKinAttributes||e.name!=r.pk?e.value=i[e.name]:e.value=t.getId():e.value=null}),n},a.setRelations=function(e){_.forEach(e,function(e,t){e.name=t}),this._relations=e},a.getRelations=function(){return this._relations},a.hasRelations=function(){return!_.isNull(this._relations)},a.getRelationsNames=function(){return _.keys(this._relations)},a.getRelationsFksKeys=function(){var e=[];return _.forEach(this._relations,function(t){e.push(t.fk)}),e},a.getRelationFieldsNames=function(e){var t=this._relations[e];return t?_.map(t,function(e){return e.name}):null},a.getRelationsWithAttributes=function(e){var t=_.cloneDeep(this._relations);if(!e||!this.getFeatureById(e))return _.forEach(t,function(e,t){_.forEach(e.fields,function(e){e.value=null})}),o(t);if(this.lazyRelations){var i=$.Deferred(),r=this.getFeatureById(e).getProperties(),n={};return _.forEach(t,function(e,t){e.url;_.forEach(e.fk,function(e){n[e]=r[e]})}),this.getRelationsWithAttributesFromFks(n).then(function(e){i.resolve(e)}).fail(function(){i.reject()}),i.promise()}},a.getRelationsWithAttributesFromFks=function(e){var t=_.cloneDeep(this._relations),i=[];return _.forEach(t,function(t,r){var n=t.url,o=[];_.forEach(t.fk,function(t){var i=e[t];o.push(t+"="+i)});var s=_.join(o,"&");n+="?"+s,i.push($.get(n).then(function(e){_.forEach(t.fields,function(t){t.value=e[0][t.name]})}))}),$.when.apply(this,i).then(function(){return t})},a.setStyle=function(e){this._olLayer.setStyle(e)},a.getLayer=function(){return this._olLayer},a.getSource=function(){return this._olLayer.getSource()},a.getFeatureById=function(e){return this._olLayer.getSource().getFeatureById(e)},a.clear=function(){this.getSource().clear()},a.addToMap=function(e){e.addLayer(this._olLayer)},a.featureHasRelationsFksWithValues=function(e){var t=e.getProperties(),i=this.getRelationsFksKeys();return _.every(i,function(e){var i=t[e];return!_.isNil(i)&&""!=i})},a.getRelationsFksWithValuesForFeature=function(e){var t=e.getProperties(),i={},r=this.getRelationsFksKeys();return _.forEach(r,function(e){i[e]=t[e]}),i}},{"core/g3wobject":19,"core/utils/utils":40}],27:[function(e,t,i){function r(e,t){this.LAYERTYPE={LAYER:"layer",MULTILAYER:"multilayer"},this.extraParams=t,this.layers=[],o(this,e)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/layer/layerstate"),a=e("core/map/maplayer"),l=e("g3w-ol3/src/layers/rasters");n(r,a);var c=r.prototype;c.getOLLayer=function(){var e=this._olLayer;return e||(e=this._olLayer=this._makeOlLayer()),e},c.getSource=function(){return this.getOLLayer().getSource()},c.getInfoFormat=function(){return"application/vnd.ogc.gml"},c.getGetFeatureInfoUrl=function(e,t,i,r){return this.getOLLayer().getSource().getGetFeatureInfoUrl(e,t,i,r)},c.getLayerConfigs=function(){return this.layers},c.addLayer=function(e){this.layers.push(e)},c.toggleLayer=function(e){_.forEach(this.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),this._updateLayers()},c.update=function(e,t){this._updateLayers(e,t)},c.isVisible=function(){return this._getVisibleLayers().length>0},c.getQueryUrl=function(){var e=this.layers[0];return e.infourl&&""!=e.infourl?e.infourl:this.config.url},c.getQueryLayers=function(){var e=(this.layers[0],[]);return _.forEach(this.layers,function(t){s.isQueryable(t)&&e.push({layerName:s.getWMSLayerName(t),queryLayerName:s.getQueryLayerName(t),geometryType:s.getGeometryType(t),attributes:s.getAttributes(t)})}),e},c._makeOlLayer=function(){var e=this,t={url:this.config.url,id:this.config.id},i=this.layers[0];i.source&&"wms"==i.source.type&&i.source.url&&(t.url=i.source.url);var r=new l.WMSLayer(t,this.extraParams);return r.getSource().on("imageloadstart",function(){e.emit("loadstart")}),r.getSource().on("imageloadend",function(){e.emit("loadend")}),r},c._getVisibleLayers=function(e){var t=[];return _.forEach(this.layers,function(i){var r=i.maxresolution?i.maxresolution&&i.maxresolution>e.resolution:!0;i.visible&&r&&t.push(i)}),t},c.checkLayerDisabled=function(e,t){var i=e.disabled||!1;e.maxresolution&&(i=e.maxresolution<t),e.minresolution&&(e.disabled=i&&e.minresolution>t),e.disabled=i},c.checkLayersDisabled=function(e){var t=this;_.forEach(this.layers,function(i){t.checkLayerDisabled(i,e)})},c._updateLayers=function(e,t){this.checkLayersDisabled(e.resolution);var i=this._getVisibleLayers(e);if(i.length>0){var r={LAYERS:_.join(_.map(i,function(e){return s.getWMSLayerName(e)}),",")};t&&(r=_.assign(r,t)),this._olLayer.setVisible(!0),this._olLayer.getSource().updateParams(r)}else this._olLayer.setVisible(!1)},t.exports=r},{"core/layer/layerstate":25,"core/map/maplayer":28,"core/utils/utils":40,"g3w-ol3/src/layers/rasters":49}],28:[function(e,t,i){function r(e){this.config=e||{},this.id=e.id,this._olLayer=null,o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject");n(r,s);var a=r.prototype;a.getId=function(){return this.id},t.exports=r},{"core/g3wobject":19,"core/utils/utils":40}],29:[function(e,t,i){function r(){o(this),this.init=function(e){this.map=e},this.queryPoint=function(e,t){var i=this,r=$.Deferred(),n={};_.forEach(t,function(e){var t=e.getQueryUrl(),i=t.hashCode().toString();-1==_.keys(n).indexOf(i)&&(n[i]={url:t,mapLayers:[]}),n[i].mapLayers.push(e)});var o=[];_.forEach(n,function(t){var r=t.mapLayers[0],n=i.getGetFeatureInfoUrl(r,e),s=n.split("?")[0],a=n.split("?")[1],l={};_.forEach(a.split("&"),function(e){var t=e.split("="),i=t[0],r=t[1];l[i]=r});var c=[];if(_.forEach(t.mapLayers,function(e){var t=e.getQueryLayers();t.length&&(c=_.concat(c,t))}),c.length){delete l.STYLES,l.LAYERS=_.map(c,"queryLayerName"),l.QUERY_LAYERS=_.map(c,"queryLayerName"),l.FEATURE_COUNT=1e3;var u=s,p=[];_.forEach(l,function(e,t){p.push(t+"="+e)}),u=s+"?"+p.join("&"),o.push({url:u,queryLayers:c})}});var s={};return o.length>0?_.forEach(o,function(t){var n=t.url,o=t.queryLayers;$.get(n).then(function(t){var n,a=new X2JS;try{n=_.isString(t)?a.xml_str2json(t):a.xml2json(t)}catch(l){r.reject(l)}var c,u,p=_.keys(n)[0];switch(p){case"FeatureCollection":c=i._parseLayerFeatureCollection,u=n;break;case"msGMLOutput":c=i._parseLayermsGMLOutput,u=t}var h=0;_.forEach(o,function(e){var t=c.call(i,e,u);h+=t.length,s[e.layerName]=t}),r.resolve(e,h,s)}).fail(function(e){r.reject(e)})}):r.resolve(e,0,s),r.promise()},this._parseLayerFeatureCollection=function(e,t){var i=e.queryLayerName,r=_.cloneDeep(t);r.FeatureCollection.featureMember=[];var n=t.FeatureCollection.featureMember;_.forEach(n,function(e){var t=_.get(e,i);t&&r.FeatureCollection.featureMember.push(e)});var o=new X2JS,s=o.json2xml_str(r),a=new ol.format.WMSGetFeatureInfo;return a.readFeatures(s)},this._parseLayermsGMLOutput=function(e,t){var i=new ol.format.WMSGetFeatureInfo({layers:[e.queryLayerName]});return i.readFeatures(t)},this.queryRect=function(e,t){},this._query=function(e,t){var i,r=a.getCurrentProject();i=t?[r.getLayer(t)]:r.getLayers()},this.getGetFeatureInfoUrl=function(e,t){var i=this.map.getView().getResolution(),r=this.map.getView().getProjection().getCode(),n={QUERY_LAYERS:_.map(e.getQueryLayers(),"queryLayerName"),INFO_FORMAT:e.getInfoFormat(),FI_POINT_TOLERANCE:10,FI_LINE_TOLERANCE:10,FI_POLYGON_TOLERANCE:10},o=e.getGetFeatureInfoUrl(t,i,r,n);return o}}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=(e("core/geometry/geometry"),e("core/project/projectsregistry"));n(r,s),t.exports=new r},{"core/g3wobject":19,"core/geometry/geometry":21,"core/project/projectsregistry":34,"core/utils/utils":40}],30:[function(e,t,i){function r(){o(this),this._mapsServices={},this.addMap=function(e){this._registerMapService(e)},this._registerMapService=function(e){var e=this._mapsServices[e.id];_.isUndefined(e)&&(this._mapsServices[e.id]=e)}}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject");n(r,s),t.exports=r},{"core/g3wobject":19,"core/utils/utils":40}],31:[function(e,t,i){function r(e){this.name=name,this.tools=[]}var n=e("core/utils/utils").inherit,o=e("core/g3wobject");n(r,o);var s=r.prototype;s.load=function(){var e=$.Deferred(),t="lib/plugins/"+this.name;return $script(t,function(){e.resolve()}),e.promise()},s.providesTools=function(){return this.tools.length>0},s.getTools=function(){return this.tools},s.getActions=function(e){return e.actions},t.exports=r},{"core/g3wobject":19,"core/utils/utils":40}],32:[function(e,t,i){function r(){var e=this;this.config=null,this._plugins={},this.state={toolsproviders:[]},this.setters={setToolsProvider:function(t){e.state.toolsproviders.push(t)},registerPlugin:function(t){e._plugins[t.name]||(e._plugins[t.name]=t,console.log("Registrato plugin "+t.name))}},n(this),this.init=function(e){var t=this;this.pluginsBaseUrl=e.plusingBaseUrl,this.pluginsConfigs=e.pluginsConfigs,_.forEach(this.pluginsConfigs,function(e,i){t._setup(i,e)})},this._setup=function(e,t){if(t){var i=this.pluginsBaseUrl+"/plugins/"+e+".js";$script(i)}},this.activate=function(e){var t=e.getTools();t.length&&ToolsService.registerToolsProvider(e)}}var n=e("core/utils/utils").base,o=e("core/utils/utils").inherit,s=e("core/g3wobject");o(r,s),t.exports=new r},{"core/g3wobject":19,"core/utils/utils":40}],33:[function(e,t,i){function r(e){function t(e){_.forIn(e,function(e,r){_.isNil(e.id)||(i._layers[e.id]=e),_.isNil(e.nodes)||t(e.nodes)})}var i=this;this.state=e,this._layers={},t(e.layerstree),this.setters={setLayersVisible:function(e,t){_.forEach(e,function(e){i._layers[e.id].visible=t})},setBaseLayer:function(e){_.forEach(i.state.baseLayers,function(t){t.visible=t.id==e})}},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils//utils").base,s=e("core/g3wobject");e("core/applicationservice");n(r,s);var a=r.prototype;a.getLayer=function(e){return this._layers[e]},a.getLayers=function(){return this._layers},a.getLayerById=function(e){var t=null;return _.forEach(this.getLayers(),function(i){i.id==e&&(t=i)}),t},a.getLayerByName=function(e){var t=null;return _.forEach(this.getLayers(),function(i){i.name==e&&(t=i)}),t},a.getQueryableLayers=function(){var e=[];return _.forEach(this.getLayers(),function(t){LayerState.isQueryable(t)&&e.push(t)}),e},a.getLayerAttributes=function(e){return this._layers[e].attributes},a.getLayerAttributeLabel=function(e,t){var i="";return _.forEach(this._layers[e].attributes,function(e){e.name==t&&(i=e.label)}),i},a.toggleLayer=function(e,t){var t=t||!e.visible;this.setLayersVisible([e],t)},a.toggleLayers=function(e,t){this.setLayersVisible(e,t)},a.setGetWmsUrl=function(e){this._getWmsUrlFnc=e},a.getWmsUrl=function(){return this._getWmsUrlFnc(this.state)},a.getLegendUrl=function(e){var t=this.getWmsUrl();return sep=t.indexOf("?")>-1?"&":"?",this.getWmsUrl()+sep+"SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&SLD_VERSION=1.1.0&FORMAT=image/png&TRANSPARENT=true&ITEMFONTCOLOR=white&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name},t.exports=r},{"core/applicationservice":18,"core/g3wobject":19,"core/utils//utils":40,"core/utils/utils":40}],34:[function(e,t,i){function r(){this.config=null,this.initialized=!1,this.projectType=null,this.setters={setCurrentProject:function(e){this.state.currentProject=e}},this.state={baseLayers:{},minScale:null,maxscale:null,currentProject:null},this._pendingProjects=[],this._projects={},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=(e("core/utils/utils").resolve,e("core/utils/utils").reject),a=e("core/g3wobject"),l=e("core/project/project");n(r,a);var c=r.prototype;c.init=function(e){var t=this;return this.initialized?void 0:(this.initialized=!0,this.config=e,this.projectType=this.config.group.overviewproject.type,this.setupState(),this.getProject(e.initproject).then(function(e){t.setCurrentProject(e)}))},c.setupState=function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.state.proj4=e.config.proj4,e.config.projects.forEach(function(t){t.baselayers=e.config.baselayers,t.minscale=e.config.minscale,t.maxscale=e.config.maxscale,t.crs=e.config.crs,t.proj4=e.config.proj4,e._pendingProjects.push(t)})},c.getProjectType=function(){return this.projectType},c.getPendingProjects=function(){return this._pendingProjects()},c.getCurrentProject=function(){return this.state.currentProject},c.getProject=function(e){var t=this,i=$.Deferred(),r=!1,n=null;return this._pendingProjects.forEach(function(i){i.gid==e&&(r=i,n=t._projects[e])}),r?n?i.resolve(n):this._getProjectFullConfig(r).then(function(e){var n=_.merge(r,e);t._buildProjectTree(n);var o=new l(n);return o.setGetWmsUrl(t.config.getWmsUrl),t._projects[n.gid]=o,i.resolve(o)}):s("Project doesn't exist")},c._getProjectFullConfig=function(e){var t=$.Deferred(),i=this.config.getProjectConfigUrl(e);return $.get(i).done(function(e){t.resolve(e)}),t.promise()},c._buildProjectTree=function(e){function t(e){_.forIn(e,function(r,n){if(!_.isNil(r.id)){var o=_.merge(r,i[r.id]);e[parseInt(n)]=o}_.isNil(r.nodes)||(r.title=r.name,t(r.nodes))})}var i=_.keyBy(e.layers,"id"),r=_.cloneDeep(e.layerstree);t(r),e.layerstree=r},t.exports=new r},{"core/g3wobject":19,"core/project/project":33,"core/utils/utils":40}],35:[function(e,t,i){var r={QDJANGO:"qdjango",OGR:"ogr"};t.exports=r},{}],36:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/utils/utils").Base64,s=e("core/g3wobject"),a=function(){var e=this;this._route="",this.setters={setRoute:function(e){this._route=e}},History.Adapter.bind(window,"statechange",function(){var t=History.getState(),i=t.hash;e.setRouteFromHash(i)}),n(this)};r(a,s);var l=a.prototype;l.initRoute=function(){var e=window.location.search;this.setRouteFromHash(e)},l["goto"]=function(e){var t=o.encode(e);History.pushState({path:e},null,"?p="+t)},l.setRouteFromHash=function(e){var t=this.getQueryParams(e).p,i=t?o.decode(t):"";this.setRoute(i)},l.slicePath=function(e){return e.split("?")[0].split("/")},l.sliceFirst=function(e){var t=e.split("?"),i=t[1],r=t[0].split("/"),n=r[0];return e=r.slice(1).join("/"),e=[e,i].join("?"),[n,e]},l.getQueryParams=function(e){var t={};try{var i=e.split("?")[1],r=i.split("&"),t={};_.forEach(r,function(e){var i=e.split("="),r=i[0],n=i[1];t[r]=n})}catch(n){}return t},l.getQueryString=function(e){return e.split("?")[1]},l.makeQueryString=function(e){},t.exports=new a},{"core/g3wobject":19,"core/utils/utils":40}],37:[function(e,t,i){function r(){self=this,this.submitGetFeatureInfo=function(e){var t=e.url||"",i=e.querylayer||null,r=e.filter||null,n=e.bbox||s.getCurrentProject().state.extent.join(","),o=null,a=e.crs||"4326;";return $.get(t,{SERVICE:"WMS",VERSION:"1.3.0",REQUEST:"GetFeatureInfo",LAYERS:i,QUERY_LAYERS:i,FEATURE_COUNT:o||50,INFO_FORMAT:"text/xml",CRS:"EPSG:"+a,FILTER:r,BBOX:n})},this.doSearch=function(e){var t=e.url,i=e.querylayer,r=e.filterObject,n=e.crs,o=this.createFilter(r,i),s=this.submitGetFeatureInfo({url:t,crs:n,filter:o,querylayer:i});return s},this.createFilter=function(e,t){function i(e){var t,r=[],n="",o="",s="";return _.forEach(e,function(e,l,c){t=a[l],_.forEach(e,function(e){_.forEach(e,function(t,l,c){_.isArray(t)?n=i(c):("LIKE"!=l&&"ILIKE"!=l||(o="%"),filterOp=a[l],_.forEach(e,function(e,t,i){_.forEach(e,function(e,t,i){s=isNaN(e)?"'":"",n='"'+t+'" '+filterOp+" "+s+o+e+o+s})})),r.push(n)})}),t=r.join(" "+t+" ")}),t}var r=[];return r=t+":"+i(e)}}var n=e("core/utils/utils").inherit,o=(e("core/utils/utils").base,e("core/g3wobject")),s=(e("core/utils/utils").resolve,e("core/project/projectsregistry")),a={eq:"=",gt:">",gte:">=",lt:"<",lte:"=<",LIKE:"LIKE",ILIKE:"ILIKE",AND:"AND",OR:"OR",NOT:"!="};n(r,o),t.exports=new r},{"core/g3wobject":19,"core/project/projectsregistry":34,"core/utils/utils":40}],38:[function(e,t,i){function r(){var e=this,t=$.Deferred();this.doSearch=function(e){var t=e.servertype,i=e.url,r=e.querylayer,n=e.filterObject,o=e.crs;c.srsName+=o||"4326";var s,l;switch(t){case"OGC":return l=this.createStandardFilter(n,r),s=this.standardSearch(i,l),a(s);case"qgis":return l=this.createQgisFilter(n),s=this.qgisSearch(r,i,l),a(s);case"mapserver":return l=this.createMapserverFilter(n),s=this.mapserverSearch(r,i,l),a(s);case"geoserver":return l=this.createGeoserverFilter(n),s=this.geoserverSearch(r,i,l),a(s);default:return!1}},this.standardSearch=function(e,t){console.log(t)},this.createStandardFilter=function(e,t){function i(e){var t,r=[],n="";return _.forEach(e,function(e,o,s){t=u[o],_.forEach(e,function(e){_.forEach(e,function(t,o,s){_.isArray(t)?n=i(s):(n=u[o],_.forEach(e,function(e,t,i){_.forEach(e,function(e,t,i){n=n(t,e)})})),r.push(n)})}),t=r.length>1?t.apply(this,r):r[0]}),t}c.featureTypes.push(t);var r=[];return c.filter=i(e),r=(new ol.format.WFS).writeGetFeature(c)},this.qgisSearch=function(i,r){return $.get(searchUrl).then(function(t){e.emit("searchdone",t)}),t.promise()},this.createQGisFilter=function(e){var t;return t},this.mapserverSearch=function(e,i,r){return t.promise()},this.createMapserverFilter=function(e){var t;return t},this.geoserverSearch=function(e,i,r){return t.promise()},this.createGeoserverFilter=function(e){var t;return t},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("core/utils/utils").resolve,l=ol.format.ogc.filter,c={srsName:"EPSG:",featureNS:"",featurePrefix:"",featureTypes:[],outputFormat:"application/json",filter:null},u={eq:l.equalTo,gt:l.greaterThan,gte:l.greaterThanOrEqualTo,lt:l.lessThan,lte:l.lessThanOrEqualTo,like:l.like,ilike:"",bbox:l.bbox,AND:l.and,OR:l.or,NOT:l.not};(function(){var e={propertyName:"<PropertyName>[PROP]</PropertyName>",literal:"<Literal>[VALUE]</Literal>"};return{eq:"<PropertyIsEqualTo>"+e.propertyName+e.literal+"</PropertyIsEqualTo>",gt:"<PropertyIsGreaterThan>"+e.propertyName+e.literal+"</PropertyIsGreaterThan>",gte:"",lt:"",lte:"",like:"",ilike:"",AND:"<And>[AND]</And>",OR:"<Or>[OR]</Or>"}})();n(r,s),t.exports=new r},{"core/g3wobject":19,"core/utils/utils":40}],39:[function(e,t,i){function r(){var e=this;this.url="",this.filterObject={},this.queryFilterObject={},this.setFilterObject=function(e){this.filterObject=e},this.getFilterObject=function(){return this.filterObject},this.createQueryFilterFromConfig=function(e){function t(e){return evalObject={},_.forEach(e,function(e,t){return _.isArray(e)?i(t,e):void 0}),n=e.attribute,r=e.op,evalObject[r]={},evalObject[r][n]=null,evalObject}function i(e,i){return s={},s[e]=[],_.forEach(i,function(i){s[e].push(t(i))}),s}var r,n,o={},s={};return _.forEach(e,function(e,t,r){o=i(t,e)}),o},this.createQueryFilterObject=function(e,t){var i=this.getLayerInfoUrlFromProjectConfig(e);return{type:"standard",url:i.url,querylayer:i.name,servertype:i.servertype,crs:i.crs,filterObject:t}},this.getLayerInfoUrlFromProjectConfig=function(e){var t={},i=a.getCurrentProject(),r=i.getLayerById(e);return r&&(t.name=r.name,t.crs=r.crs,t.servertype=r.servertype,r.source&&r.source.url?t.url=r.source.url:t.url=i.getWmsUrl()),t},this.doQuerySearch=function(t){var i=u[t.servertype];i.doSearch(t).then(function(t){console.log(t),e.emit("searchresults",t)})},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("core/project/projectsregistry"),l=e("./queryWFSProvider"),c=e("./queryQGISWMSProvider"),u={QGIS:c,OGC:l};n(r,s),t.exports=new r},{"./queryQGISWMSProvider":37,"./queryWFSProvider":38,"core/g3wobject":19,"core/project/projectsregistry":34,"core/utils/utils":40}],40:[function(e,t,i){function r(e,t,i){return"undefined"==typeof i||0===+i?Math[e](t):(t=+t,i=+i,isNaN(t)||"number"!=typeof i||i%1!==0?NaN:(t=t.toString().split("e"),t=Math[e](+(t[0]+"e"+(t[1]?+t[1]-i:-i))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+i:i))))}Math.round10||(Math.round10=function(e,t){return r("round",e,t)}),Math.floor10||(Math.floor10=function(e,t){return r("floor",e,t)}),Math.ceil10||(Math.ceil10=function(e,t){return r("ceil",e,t)}),String.prototype.hashCode=function(){var e,t,i,r=0;if(0===this.length)return r;for(e=0,i=this.length;i>e;e++)t=this.charCodeAt(e),r=(r<<5)-r+t,r|=0;return r};var n={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t,i,r,o,s,a,l,c="",u=0;for(e=n._utf8_encode(e);u<e.length;)t=e.charCodeAt(u++),i=e.charCodeAt(u++),r=e.charCodeAt(u++),o=t>>2,s=(3&t)<<4|i>>4,a=(15&i)<<2|r>>6,l=63&r,isNaN(i)?a=l=64:isNaN(r)&&(l=64),c=c+this._keyStr.charAt(o)+this._keyStr.charAt(s)+this._keyStr.charAt(a)+this._keyStr.charAt(l);return c},decode:function(e){var t,i,r,o,s,a,l,c="",u=0;for(e=e.replace(/[^A-Za-z0-9+\/=]/g,"");u<e.length;)o=this._keyStr.indexOf(e.charAt(u++)),s=this._keyStr.indexOf(e.charAt(u++)),a=this._keyStr.indexOf(e.charAt(u++)),l=this._keyStr.indexOf(e.charAt(u++)),t=o<<2|s>>4,i=(15&s)<<4|a>>2,r=(3&a)<<6|l,c+=String.fromCharCode(t),64!=a&&(c+=String.fromCharCode(i)),64!=l&&(c+=String.fromCharCode(r));return c=n._utf8_decode(c)},_utf8_encode:function(e){e=e.replace(/rn/g,"n");for(var t="",i=0;i<e.length;i++){var r=e.charCodeAt(i);128>r?t+=String.fromCharCode(r):r>127&&2048>r?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t},_utf8_decode:function(e){for(var t="",i=0,r=c1=c2=0;i<e.length;)r=e.charCodeAt(i),128>r?(t+=String.fromCharCode(r),i++):r>191&&224>r?(c2=e.charCodeAt(i+1),t+=String.fromCharCode((31&r)<<6|63&c2),i+=2):(c2=e.charCodeAt(i+1),c3=e.charCodeAt(i+2),t+=String.fromCharCode((15&r)<<12|(63&c2)<<6|63&c3),i+=3);return t}},o={mixin:function(e,t){return o.merge(e.prototype,t)},mixininstance:function(e,t){var i=new t;o.merge(e,i),o.merge(e.prototype,t.prototype)},merge:function(e,t){var i;for(i in t)o.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function i(){}i.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new i,e.prototype.constructor=e},base:function(e,t,i){var r=arguments.callee.caller;if(r.superClass_)return r.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var n=Array.prototype.slice.call(arguments,2),o=!1,s=e.constructor;s;s=s.superClass_&&s.superClass_.constructor)if(s.prototype[t]===r)o=!0;else if(o)return s.prototype[t].apply(e,n);if(e[t]===r)return e.constructor.prototype[t].apply(e,n);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},truefnc:function(){return!0},falsefnc:function(){return!0},resolve:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},reject:function(e){var t=$.Deferred();return t.reject(e),t.promise()},Base64:n};t.exports=o},{}],41:[function(e,t,i){var r=function(e){var t=e.name||"?";if(this.name=t.split(" ").join("-").toLowerCase(),this.id=this.name+"_"+Math.floor(1e6*Math.random()),!e.element){var i="ol-"+this.name.split(" ").join("-").toLowerCase(),n=e.tipLabel||this.name,o=e.label||"?";e.element=$('<div class="'+i+' ol-unselectable ol-control"><button type="button" title="'+n+'">'+o+"</button></div>")[0]}var s=e.buttonClickHandler||r.prototype._handleClick.bind(this);$(e.element).on("click",s),ol.control.Control.call(this,e),this._postRender()};ol.inherits(r,ol.control.Control);var n=r.prototype;n._handleClick=function(){var e=this,t=this.getMap(),i=null,r=t.getControls();r.forEach(function(t){t.id&&t.toggle&&t.id!=e.id&&(t.toggle(!1),"reset"==t.name&&(i=t))}),!e._toggled&&i&&i.toggle(!0)},n._postRender=function(){},t.exports=r},{}],42:[function(e,t,i){var r=e("./control"),n=function(e){this._toggled=this._toggled||!1,this._interaction=e.interaction||null,this._autountoggle=e.autountoggle||!1,e.buttonClickHandler=n.prototype._handleClick.bind(this),r.call(this,e)};ol.inherits(n,r);var o=n.prototype;o.toggle=function(e){var e=void 0!==e?e:!this._toggled;this._toggled=e;var t=this.getMap(),i=$(this.element).find("button").first();e?(this._interaction&&t.addInteraction(this._interaction),i.addClass("g3w-ol-toggled")):(this._interaction&&t.removeInteraction(this._interaction),i.removeClass("g3w-ol-toggled"))},o._handleClick=function(e){this.toggle(),r.prototype._handleClick.call(this,e)},t.exports=n},{"./control":41}],43:[function(e,t,i){var r=e("../utils"),n=e("./interactioncontrol"),o=e("../interactions/pickcoordinatesinteraction"),s=function(e){var t=this,i={name:"querylayer",tipLabel:"Query layer",label:"",interaction:new o};e=r.merge(e,i),n.call(this,e),this._interaction.on("picked",function(e){t.dispatchEvent({type:"picked",coordinates:e.coordinate}),t._autountoggle&&t.toggle()})};ol.inherits(s,n),t.exports=s},{"../interactions/pickcoordinatesinteraction":47,"../utils":51,"./interactioncontrol":42}],44:[function(e,t,i){var r=e("../utils"),n=e("./interactioncontrol"),o=function(e){this._toggled=!0,this._startCoordinate=null;var t={name:"reset",tipLabel:"Pan",label:""};e=r.merge(e,t),n.call(this,e)};ol.inherits(o,n),t.exports=o;var s=o.prototype;s._postRender=function(){this.toggle(!0)}},{"../utils":51,"./interactioncontrol":42}],45:[function(e,t,i){var r=e("../utils"),n=e("./interactioncontrol"),o=function(e){var t=this;this._startCoordinate=null;var i={name:"zoombox",tipLabel:"Zoom to box",label:"",interaction:new ol.interaction.DragBox};e=r.merge(e,i),n.call(this,e),this._interaction.on("boxstart",function(e){t._startCoordinate=e.coordinate}),this._interaction.on("boxend",function(e){var i=t._startCoordinate,r=e.coordinate,n=ol.extent.boundingExtent([i,r]);t.dispatchEvent({type:"zoomend",extent:n}),t._startCoordinate=null,t._autountoggle&&t.toggle()})};ol.inherits(o,n),t.exports=o},{"../utils":51,"./interactioncontrol":42}],46:[function(e,t,i){var r=e("./utils"),n=e("./map/maphelpers");!function(e,r,n){"function"==typeof define&&define.amd?define(n):"object"==typeof i?t.exports=n():r[e]=n()}("g3wol3",this,function(){"use strict";var e=r.merge({},n);return{helpers:e}})},{"./map/maphelpers":50,"./utils":51}],47:[function(e,t,i){arguments[4][23][0].apply(i,arguments)},{dup:23}],48:[function(e,t,i){var r={};r.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),r.BING={},r.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),r.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),r.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=r},{}],49:[function(e,t,i){var r=e("../utils"),n={};n.TiledWMSLayer=function(e,t){var i={layerObj:e,extraParams:t||{},tiled:!0};return n._WMSLayer(i)},n.WMSLayer=function(e,t){var i={layerObj:e,extraParams:t||{}};return n._WMSLayer(i)},n._WMSLayer=function(e){var t=e.layerObj,i=e.extraParams,n=e.tiled||!1,o={LAYERS:t.layers||"",VERSION:"1.3.0",TRANSPARENT:!0,SLD_VERSION:"1.1.0"};o=r.merge(o,i);var s,a,l={url:t.url,params:o,ratio:1},c={id:t.id,name:t.name,opacity:t.opacity||1,visible:t.visible,maxResolution:t.maxResolution};n?(a=new ol.source.TileWMS(l),s=ol.layer.Tile):(a=new ol.source.ImageWMS(l),s=ol.layer.Image),c.source=a;var u=new s(c);return u},t.exports=n},{"../utils":51}],50:[function(e,t,i){BaseLayers=e("../layers/bases");var r={createViewer:function(e){return new n(e)}},n=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1},zoom:!1,attribution:!1}),i=ol.interaction.defaults().extend([new ol.interaction.DragRotate]);i.removeAt(1);var r;r=e.view instanceof ol.View?e.view:new ol.View(e.view);var n={controls:t,interactions:i,ol3Logo:!1,view:r,keyboardEventTarget:document};e.id&&(n.target=e.id);var o=new ol.Map(n);this.map=o};n.prototype.destroy=function(){this.map&&(this.map.dispose(),this.map=null)},n.prototype.getView=function(){return this.map.getView()},n.prototype.updateMap=function(e){},n.prototype.updateView=function(){},n.prototype.getMap=function(){return this.map},n.prototype.setTarget=function(e){this.map.setTarget(e)},n.prototype.goTo=function(e,t){var i=i||{},r=i.animate||!0,n=this.map.getView();if(r){var o=ol.animation.pan({duration:500,
source:n.getCenter()}),t=ol.animation.zoom({duration:500,resolution:n.getResolution()});this.map.beforeRender(o,t)}n.setCenter(e),n.setZoom(t)},n.prototype.goToRes=function(e,t){var i=i||{},r=i.animate||!0,n=this.map.getView();if(r){var o=ol.animation.pan({duration:500,source:n.getCenter()}),s=ol.animation.zoom({duration:500,resolution:n.getResolution()});this.map.beforeRender(o,s)}n.setCenter(e),n.setResolution(t)},n.prototype.fit=function(e,t){var i=this.map.getView(),t=t||{},r=t.animate||!0;if(r){var n=ol.animation.pan({duration:500,source:i.getCenter()}),o=ol.animation.zoom({duration:500,resolution:i.getResolution()});this.map.beforeRender(n,o)}t.animate&&delete t.animate,t.constrainResolution=t.constrainResolution||!1,i.fit(e,this.map.getSize(),t)},n.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},n.prototype.getResolution=function(){var e=this.map.getView();return e.getResolution()},n.prototype.getCenter=function(){var e=this.map.getView();return e.getCenter()},n.prototype.getBBOX=function(){return this.map.getView().calculateExtent(this.map.getSize())},n.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),i=t.getLength(),r=0;i>r;r++)if(e===t.item(r).get("name"))return t.item(r);return null},n.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&(this.map.removeLayer(t),delete t)},n.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&i.visible&&e.push(t)}),e},n.prototype.removeLayers=function(){this.map.getLayers().clear()},n.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&e.push(t)}),e},n.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},n.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),i=this.map.getLayers();i.insertAt(0,t)},t.exports=r},{"../layers/bases":48}],51:[function(e,t,i){var r={merge:function(e,t){var i={};for(var r in e)i[r]=e[r];for(var r in t)i[r]=t[r];return i}};t.exports=r},{}],52:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/g3wobject"),o=function(e){var e=e||{};this.id=e.id||1e3*Math.random(),this.title=e.title||"",this.internalComponent=null};r(o,n);var s=o.prototype;s.getId=function(){return self.id},s.getName=function(){return self.name},s.getTitle=function(){return self.title},s.mount=function(e){},s.unmount=function(){},s.onResize=function(e,t){},t.exports=o},{"core/g3wobject":19,"core/utils/utils":40}],53:[function(e,t,i){function r(){this.components={},this.addComponent=function(e){var t=e.getId();this.components[t]||(this.components[t]=e)},this.getComponent=function(e){return this.components[e]},this.removeComponent=function(e){var t=this._components[e];t&&(_.isFunction(t.destroy)&&t.destroy(),delete t,this._components[e]=null)}}var n=e("core/g3wobject"),o=e("core/utils/utils").inherit;e("core/utils/utils").base;o(r,n),t.exports=new r},{"core/g3wobject":19,"core/utils/utils":40}],54:[function(e,t,i){function r(){this.getResourcesUrl=noop,this.showForm=noop,this.closeForm=noop,this.showListing=noop,this.closeListing=noop,this.hideListing=noop,this.showPanel=noop,this.hidePanel=noop,this.addComponent=noop,this.removeComponent=noop,this.getComponent=function(e){return s.getComponent(e)},this.ready=function(){this.emit("guiready")},this.guiResized=function(){this.emit("guiresized")},this.showSpinner=noop,this.hideSpinner=noop,this.notify=noop,this.dialog=noop}noop=e("core/utils/utils").noop;var n=e("core/utils/utils").inherit,o=e("core/g3wobject"),s=e("gui/componentsregistry");n(r,o),t.exports=new r},{"core/g3wobject":19,"core/utils/utils":40,"gui/componentsregistry":53}],55:[function(e,t,i){t.exports="<div>\n  Lista di oggetti\n</div>\n"},{}],56:[function(e,t,i){function r(e){this.panelComponent=null,this.options=e||{},this.id=e.id||null,this.name=e.name||null,this.state={list:e.list||[]},this._listPanelComponent=e.listPanelComponent||s}var n=e("core/utils/utils").resolve,o=(e("core/utils/utils").reject,e("gui/gui")),s=Vue.extend({template:e("./listpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),o.closeForm()}}}),a=r.prototype;a.onShow=function(e){var t=this._setupPanel();return this._mountPanel(t,e),n(!0)},a.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,n(!0)},a._setupPanel=function(){var e=this.panelComponent=new this._listPanelComponent({panel:this});return e.state=this.state,e},a._mountPanel=function(e,t){e.$mount().$appendTo(t)},t.exports={ListPanelComponent:s,ListPanel:r}},{"./listpanel.html":55,"core/utils/utils":40,"gui/gui":54}],57:[function(e,t,i){function r(e){var t=this;this.config,this.viewer,this.mapLayers={},this.mapBaseLayers={},this.layersAssociation={},this.layersExtraParams={},this.state={bbox:[],resolution:null,center:null,loading:!1},this.config=l.getConfig().map,this._howManyAreLoading=0,this._incrementLoaders=function(){0==this._howManyAreLoading&&this.emit("loadstart"),this._howManyAreLoading+=1},this._decrementLoaders=function(){this._howManyAreLoading-=1,0==this._howManyAreLoading&&this.emit("loadend")},this._interactionsStack=[],_.isNil(e)?this.project=c.getCurrentProject():this.project=e,this.setters={setMapView:function(e,t,i){this.state.bbox=e,this.state.resolution=t,this.state.center=i,this.updateMapLayers(this.mapLayers)},setupViewer:function(){proj4.defs("EPSG:"+t.project.state.crs,this.project.state.proj4),t.viewer&&(t.viewer.destroy(),t.viewer=null),t._setupViewer(),t.setupControls(),t.setupLayers(),t.emit("viewerset")}},this._setupViewer=function(){var e=this.project.state.extent,i=new ol.proj.Projection({code:"EPSG:"+this.project.state.crs,extent:e});this.viewer=h.createViewer({view:{projection:i,center:ol.extent.getCenter(e),zoom:0,extent:e,minZoom:0,maxZoom:28}}),this.viewer.map.on("moveend",function(e){t._setMapView()}),y.init(this.viewer.map),this.emit("ready")},this.project.on("projectset",function(){t.setupViewer()}),this.project.on("projectswitch",function(){t.setupLayers()}),this.project.onafter("setLayersVisible",function(e){var i=_.map(e,function(e){return t.getMapLayerForLayer(e)});t.updateMapLayers(i)}),this.project.onafter("setBaseLayer",function(){t.updateMapLayers(t.mapBaseLayers)}),o(this),this.setupViewer()}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("gui/gui"),l=e("core/applicationservice"),c=e("core/project/projectsregistry"),u=e("core/project/projecttypes"),p=e("core/geometry/geometry").GeometryTypes,h=e("g3w-ol3/src/g3w.ol3").helpers,d=e("g3w-ol3/src/controls/resetcontrol"),f=e("g3w-ol3/src/controls/querycontrol"),g=e("g3w-ol3/src/controls/zoomboxcontrol"),m=e("g3w-ol3/src/interactions/pickcoordinatesinteraction"),v=e("core/layer/wmslayer"),y=e("core/map/mapqueryservice"),b={};b[u.QDJANGO]={},b[u.QDJANGO][p.POINT]="FI_POINT_TOLERANCE",b[u.QDJANGO][p.LINESTRING]="FI_LINE_TOLERANCE",b[u.QDJANGO][p.POLYGON]="FI_POLYGON_TOLERANCE";var w={};w[p.POINT]=5,w[p.LINESTRING]=5,w[p.POLYGON]=5,n(r,s);var L=r.prototype;L.slaveOf=function(e,t){},L.setLayersExtraParams=function(e,t){this.layersExtraParams=_.assign(this.layersExtraParams,e),this.emit("extraParamsSet",e,t)},L.getMap=function(){return this.viewer.map},L.getViewerElement=function(){return this.viewer.map.getTargetElement()},L.getViewport=function(){return this.viewer.map.getViewport()},L.setupControls=function(){var e=this;e.viewer.map;this.config&&this.config.controls&&_.forEach(this.config.controls,function(t){var i;switch(t){case"reset":isMobile.any||(i=new d);break;case"zoom":i=new ol.control.Zoom({zoomInLabel:"",zoomOutLabel:""});break;case"zoombox":isMobile.any||(i=new g,i.on("zoomend",function(t){e.viewer.fit(t.extent)}));break;case"zoomtoextent":i=new ol.control.ZoomToExtent({label:"",extent:e.config.constraintextent});break;case"query":i=new f,i.on("picked",function(t){var i=t.coordinates;y.queryPoint(i,e.mapLayers).then(function(t,i,r){var n=[];_.forEach(r,function(e,t){var i=this.project.layers[t];n.push({layer:i,features:e})}),e.emit("mapqueryend",n,i,t,e.state.resolution)})})}i&&e.addControl(i)})},L.addControl=function(e){this.viewer.map.addControl(e)},L.setupBaseLayers=function(){if(this.project.state.baselayers){var e=this;this.mapBaseLayers={};var t=(c.config.initbaselayer,this.project.state.baselayers);_.forEach(t,function(e){var t=!0;this.project.state.initbaselayer&&(t=e.id==this.project.state.initbaselayer),e.fixed&&(t=e.fixed),e.visible=t}),t.forEach(function(t){var i={url:this.project.getWmsUrl(),id:t.id,tiled:!0},r=new v(i);e.registerListeners(r),r.addLayer(t),e.mapBaseLayers[t.id]=r}),_.forEach(_.values(this.mapBaseLayers).reverse(),function(t){e.viewer.map.addLayer(t.getOLLayer()),t.update(e.state)})}},L.setupLayers=function(){var e=this;this.viewer.removeLayers(),this.setupBaseLayers(),this.mapLayers={},this.layersAssociation={};var t=this.traverseLayersTree(this.project.state.layerstree),i=_.filter(t,function(e){return!_.get(e,"nodes")}),r=_.groupBy(i,function(e){return e.multilayer});_.forEach(r,function(t,i){var r="layer_"+i,n=_.get(e.mapLayers,r),o=t[0].tiled,s={url:e.project.getWmsUrl(),id:r,tiled:o};n=e.mapLayers[r]=new v(s,e.layersExtraParams),e.registerListeners(n),t.forEach(function(t){n.addLayer(t),e.layersAssociation[t.id]=r})}),_.forEach(_.values(this.mapLayers).reverse(),function(t){e.viewer.map.addLayer(t.getOLLayer()),t.update(e.state,e.layersExtraParams)})},L.updateMapLayers=function(e){var t=this;_.forEach(_.values(e),function(e){e.update(t.state,t.layersExtraParams)})},L.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.multilayer]},L.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,r){_.isNil(e.id)||i.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var i=[];return t(e),i},L.registerListeners=function(e){var t=this;e.on("loadstart",function(){t._incrementLoaders()}),e.on("loadend",function(){t._decrementLoaders(!1)}),this.on("extraParamsSet",function(t,i){i&&e.update(this.state,t)})},L.showViewer=function(e){var t=this;this.viewer.setTarget(e);this.viewer.map;a.on("guiready",function(){t._setMapView()})},L.pushInteraction=function(e){if(this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!1)}):t.setActive(!1)}this.viewer.map.addInteraction(e),e.setActive(!0),this._interactionsStack.push(e)},L.popInteraction=function(){var e=this._interactionsStack.pop();if(this.viewer.map.removeInteraction(e),this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!0)}):t.setActive(!0)}},L.goTo=function(e,t){var t=t||6;this.viewer.goTo(e,t)},L.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+this.project.state.crs);this.goTo(e,t)},L.extentToWGS84=function(e){return ol.proj.transformExtent(e,"EPSG:"+this.project.state.crs,"EPSG:4326")},L.getFeatureInfo=function(e){var t=this,i=$.Deferred();return this._pickInteraction=new m,this.pushInteraction(this._pickInteraction),this._pickInteraction.on("picked",function(r){t._completeGetFeatureInfo(e,r.coordinate,i)}),i.promise()},L._completeGetFeatureInfo=function(e,t,i){var r=this,n=this.project.state.type,o=this.mapLayers[this.layersAssociation[e]],s=r.viewer.getResolution(),a=r.viewer.map.getView().getProjection().getCode(),l={QUERY_LAYERS:Project.getLayer(e).name,INFO_FORMAT:"text/xml"};if(n==u.QDJANGO){var c=b[n];if(c){var p=this.project.getLayer(e).geometrytype;l[c[p]]=w[p]}}var h=o.getSource().getGetFeatureInfoUrl(t,s,a,l);$.get(h).then(function(e){var t=new X2JS,r=t.xml2json(e);if(r.GetFeatureInfoResponse.Layer.Feature){var n=r.GetFeatureInfoResponse.Layer.Feature.Attribute,o={};_.forEach(n,function(e){o[e._name]=e._value}),i.resolve(o)}i.reject()}).fail(function(){i.reject()}).always(function(){r.popInteraction(),r._pickInteraction=null})},L.highlightGeometry=function(e,t){var i;e instanceof ol.geom.Geometry?i=e:(format=new ol.format.GeoJSON,i=format.readGeometry(e)),t.zoom&&this.viewer.fit(i);var r=t.duration||4e3;t.fromWGS84&&i.transform("EPSG:4326","EPSG:"+this.project.project.crs);var n=new ol.Feature({geometry:i}),o=new ol.source.Vector;o.addFeatures([n]);var s=new ol.layer.Vector({source:o,style:function(e){var t=[],i=e.getGeometry().getType();if("LineString"==i){var r=new ol.style.Style({stroke:new ol.style.Stroke({color:"rgb(255,255,0)",width:4})});t.push(r)}else if("Point"==i){var r=new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"rgb(255,255,0)"})}),zIndex:1/0});t.push(r)}return t}});s.setMap(this.viewer.map),setTimeout(function(){s.setMap(null)},r)},L.refreshMap=function(){_.forEach(this.mapLayers,function(e){e.getLayer().getSource().updateParams({time:Date.now()})})},L._setMapView=function(){var e=this.viewer.getBBOX(),t=this.viewer.getResolution(),i=this.viewer.getCenter();this.setMapView(e,t,i)},t.exports=r},{"core/applicationservice":18,"core/g3wobject":19,"core/geometry/geometry":21,"core/layer/wmslayer":27,"core/map/mapqueryservice":29,"core/project/projectsregistry":34,"core/project/projecttypes":35,"core/utils/utils":40,"g3w-ol3/src/controls/querycontrol":43,"g3w-ol3/src/controls/resetcontrol":44,"g3w-ol3/src/controls/zoomboxcontrol":45,"g3w-ol3/src/g3w.ol3":46,"g3w-ol3/src/interactions/pickcoordinatesinteraction":47,"gui/gui":54}],58:[function(e,t,i){t.exports='<div id="map" style="width:100%;height:100%">\n</div>\n'},{}],59:[function(e,t,i){function r(){var e=$(".navbar").innerHeight(),t=0;return $(".bottombar").is(":visible")&&(t=$(".bottombar").innerHeight()),$(window).innerHeight()-e-t}function n(e){var t=r();$("#map").height(t),e.updateSize()}function o(e){var t=$(".main-sidebar").offset().left,i=$(".main-sidebar").innerWidth(),r=i+t;$("#map").width($(window).innerWidth()-r),e.updateSize()}function s(e){l(this,e),this.id="map-component",this.title="Catalogo dati",this.mapService=new h,c(this,e),this.internalComponent=new f({mapService:this.mapService})}var a=e("core/utils/utils").inherit,l=e("core/utils/utils").base,c=e("core/utils/utils").merge,u=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/gui")),p=e("gui/vue/component"),h=(e("core/router"),e("g3w-ol3/src/g3w.ol3").helpers,e("core/map/mapsregistry"),e("../mapservice")),d={template:e("./map.html"),ready:function(){var e=this,t=this.$options.mapService;t.showViewer(this.$el.id),t.onafter("setupViewer",function(){t.showViewer(e.$el.id)}),u.on("guiready",function(){function e(){r===!0?(r=!1,i=!0,n(t.getMap()),o(t.getMap()),requestAnimationFrame(e)):i=!1}n(t.getMap()),$(".main-sidebar").on("webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd",function(){$(this).trigger("trans-end"),o(t.getMap())});var i=!1,r=!1;u.on("guiresized",function(){r=!0,e()}),$(window).resize(function(){i===!1&&(r=!0,e())})})}},f=Vue.extend(d);Vue.component("g3w-map",d),a(s,p);s.prototype;t.exports=s},{"../mapservice":57,"./map.html":58,"core/i18n/i18n.service":22,"core/map/mapsregistry":30,"core/router":36,"core/utils/utils":40,"g3w-ol3/src/g3w.ol3":46,"gui/gui":54,"gui/vue/component":76}],60:[function(e,t,i){var r=e("core/i18n/i18n.service").t,n=e("core/utils/utils").inherit,o=e("core/utils/utils").resolve,s=e("core/g3wobject"),a=function(e){self=this;var e=e||{};self.id=e.id||null,self.title=e.title||""};n(a,s);var l=a.prototype;l.getId=function(){return self.id},l.getTitle=function(){return self.title},l.mount=function(e){var t=this.InternalPanel;return t.$mount().$appendTo(e),r(),o(!0)},l.unmount=function(){var e=this.InternalPanel,t=$.Deferred();return e.$destroy(!0),t.resolve(),t.promise()},l.onResize=function(e,t){},t.exports=a},{"core/g3wobject":19,"core/i18n/i18n.service":22,"core/utils/utils":40}],61:[function(e,t,i){function r(){this.init=function(e){var t=e||s.getCurrentProject().state.search;this.state.searches=t},this.state={searches:[]},this.showSearchPanel=function(e){return panel=new l,panel.init(e),o.showPanel(panel),panel},this.cleanSearchPanels=function(){this.state.panels={}},this.stop=function(){var e=$.Deferred();return e.resolve(),e.promise()}}var n=e("core/utils/utils").inherit,o=e("gui/gui"),s=e("core/project/projectsregistry"),a=e("core/g3wobject"),l=e("gui/search/vue/panel/searchpanel");n(r,a),t.exports=new r},{"core/g3wobject":19,"core/project/projectsregistry":34,"core/utils/utils":40,"gui/gui":54,"gui/search/vue/panel/searchpanel":63}],62:[function(e,t,i){t.exports='<div class="g3w-search-panel form-group">\n  <form id="g3w-search-form">\n    <template v-for="forminput in forminputs">\n       <template v-if="forminput.input.type == \'numberfield\'" class="numeric">\n         <label for="{{ forminput.id }} ">{{ forminput.label }}</label>\n         <input type="number" v-model="formInputValues[$index].value" class="form-control" id="{{ forminput.id }}">\n       </template>\n      <template v-if="forminput.input.type == \'textfield\'" class="text">\n         <label for="{{ forminput.id }}">{{ forminput.label }}</label>\n         <input type="text" v-model="formInputValues[$index].value" class="form-control" id="{{ forminput.id }}">\n       </template>\n    </template>\n    <button class="btn btn-primary" @click="doSearch($event)" data-i18n="dosearch">Search</button>\n  </form>\n</div>\n'},{}],63:[function(e,t,i){function r(e,t,i){function n(e,t){switch(e){case"numberfield":t=parseInt(t)}return t}return _.forEach(e.filterObject,function(e,o){_.forEach(e,function(e,o){_.forEach(e,function(s,a,l){_.isArray(s)?r(e,t,o):_.forEach(s,function(e,r,s){index=i?i+o:o,s[r]=n(t[index].type,t[index].value)})})})}),e}function n(){self=this,this.config={},this.filter={},this.id=null,this.querylayerid=null,this.InternalPanel=new p,this.init=function(e){this.config=e||{},this.name=this.config.name||this.name,this.id=this.config.id||this.id,this.filter=this.config.options.filter||this.filter,this.querylayerid=this.config.options.querylayerid||this.querylayerid,this.fillInputsFormFromFilter();var t=a.createQueryFilterFromConfig(this.filter);this.InternalPanel.filterObject=a.createQueryFilterObject(this.querylayerid,t)},this.fillInputsFormFromFilter=function(){var e,t=0;_.forEach(this.filter,function(i,r,n){_.forEach(i,function(i){e={},i.id=t,e.type=i.input.type,e.value=null,self.InternalPanel.formInputValues.push(e),self.InternalPanel.forminputs.push(i),t+=1})})}}var o=e("core/utils/utils").inherit,s=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/gui")),a=e("core/search/searchqueryservice"),l=e("gui/listpanel").ListPanel,c=e("gui/panel"),u=e("gui/search/vue/results/resultpanel"),p=(e("core/project/projectsregistry"),Vue.extend({template:e("./searchpanel.html"),data:function(){return{forminputs:[],filterObject:{},formInputValues:[]}},methods:{doSearch:function(e){e.preventDefault(),this.filterObject=r(this.filterObject,this.formInputValues),a.doQuerySearch(this.filterObject)}}}));o(n,c),a.on("searchresults",function(e){var t=new l({name:"Risultati ricerca",id:"nominatim_results",list:e,listPanelComponent:u});s.showListing(t)}),t.exports=n},{"./searchpanel.html":62,"core/i18n/i18n.service":22,"core/project/projectsregistry":34,"core/search/searchqueryservice":39,"core/utils/utils":40,"gui/gui":54,"gui/listpanel":56,"gui/panel":60,"gui/search/vue/results/resultpanel":65}],64:[function(e,t,i){t.exports='<div id="search-results">\n  <table style="width:100px;" id="search-results-table">\n    <thead>\n      <tr>\n        <th v-for="header in state.list.headers"  style="cursor:pointer">{{ header }}</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for="values in state.list.values" style="cursor:pointer">\n        <td v-for="value in values">\n          {{ value }}\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n'},{}],65:[function(e,t,i){var r=Vue.extend({template:e("./resultpanel.html"),methods:{},created:function(){$("#search-results-table").footable({calculateWidthOverride:function(){return{width:$("#search-results").width()}}})}});t.exports=r},{"./resultpanel.html":64}],66:[function(e,t,i){t.exports='<div id="g3w-search" class="g3w-search g3w-tools">\n  <ul>\n    <li v-for="search in searches.search">\n      <div style="margin-bottom: 5px;"class="search-header tool-header" @click="showSearchPanel(search)">\n        <span style="">{{ search.name }}</span>\n      </div>\n    </li>\n  </ul>\n</div>\n\n'},{}],67:[function(e,t,i){function r(e){o(this,e),this.id="search-component",this.title="search",this.internalComponent=new p,s(this,e),this.initService=function(){c.init()}}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/vue/component")),l=(e("gui/gui"),e("core/project/projectsregistry")),l=(e("core/g3wobject"),e("gui/search/vue/panel/searchpanel"),e("core/project/projectsregistry")),c=e("gui/search/searchesservice"),u={template:e("./search.html"),data:function(){return{searches:l.getCurrentProject().state}},methods:{showSearchPanel:function(e){c.showSearchPanel(e)}}},p=Vue.extend(u);n(r,a),t.exports=r},{"./search.html":66,"core/g3wobject":19,"core/i18n/i18n.service":22,"core/project/projectsregistry":34,"core/utils/utils":40,"gui/gui":54,"gui/search/searchesservice":61,"gui/search/vue/panel/searchpanel":63,"gui/vue/component":76}],68:[function(e,t,i){function r(){var e=this;this.config=null,this._actions={},this.state={tools:[]},this.init=function(e){this.config=e,this.setState()},this.setState=function(){this._mergeTools(this.config.tools)},this.registerToolsProvider=function(t){e._mergeTools(t.getTools()),e._addActions(t)},this.fireAction=function(e){var t=this._actions[e],i=this._actionMethod(e);t[i]()},this._actionMethod=function(e){var t=e.split(":");return t.pop()},this._mergeTools=function(t){e.state.tools=_.concat(e.state.tools,t)},this._addActions=function(t){_.forEach(t.getTools(),function(i){_.forEach(t.getActions(i),function(i){e._actions[i.id]=t})})}}var n=e("core/utils/utils").inherit,o=e("core/g3wobject");n(r,o),t.exports=r},{"core/g3wobject":19,"core/utils/utils":40}],69:[function(e,t,i){t.exports='<div class="g3w-tools">\n  <ul>\n    <li v-for="tool in tools">\n      <div data-toggle="collapse" data-target="#iternet-tools" class="tool-header">\n        <span style="">{{ tool.name }}</span>\n      </div>\n      <div id="iternet-tools" class="tool-box collapse">\n        <template v-for="action in tool.actions">\n          <i class="glyphicon glyphicon-cog"></i>\n          <span @click="fireAction(action.id)">{{ action.name }}</span>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],70:[function(e,t,i){function r(e){o(this,e),this.id="tools-component",this.title="tools",this.toolsService=new l,s(this,e),this.internalComponent=new c({toolsService:this.toolsService})}var n=(e("core/i18n/i18n.service").t,e("core/utils/utils").inherit),o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=e("gui/vue/component"),l=e("gui/tools/toolsservice"),c=Vue.extend({template:e("./tools.html"),data:function(){return{}},methods:{fireAction:function(e){}}});n(r,a),t.exports=r},{"./tools.html":69,"core/i18n/i18n.service":22,"core/utils/utils":40,"gui/tools/toolsservice":68,"gui/vue/component":76}],71:[function(e,t,i){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree">Data</a></li>\n      <li v-if="hasBaseLayers" role="presentation"><a href="#baselayers" aria-controls="baselayers" role="tab" data-toggle="tab" data-i18n="baselayers">Layer Base</a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend">Legenda</a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tristate-tree v-if="!isHidden" :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tristate-tree>\n        </ul>\n      </div>\n      <div v-if="hasBaseLayers" role="tabpanel" class="tab-pane baselayers" id="baselayers">\n        <form>\n          <ul>\n            <li v-if="!baselayer.fixed" v-for="baselayer in baselayers">\n              <div class="radio">\n                <label><input type="radio" name="baselayer" v-checked="baselayer.visible" @click="setBaseLayer(baselayer.id)">{{ baselayer.title }}</label>\n              </div>\n            </li>\n          </ul>\n        </form>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],72:[function(e,t,i){function r(e){this.id="catalog-component",this.title="catalog",this.internalComponent=new c,o(this,e)}var n=e("core/utils/utils").inherit,o=(e("core/utils/utils").base,e("core/utils/utils").merge),s=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/vue/component")),a=(e("gui/gui"),e("core/project/projectsregistry")),l={template:e("./catalog.html"),data:function(){return{project:a.getCurrentProject()}},computed:{layerstree:function(){return this.project.state.layerstree},baselayers:function(){return this.project.state.baselayers},hasBaseLayers:function(){return this.project.state.baselayers.length>0}},methods:{setBaseLayer:function(e){this.project.setBaseLayer(e)}},ready:function(){var e=this;this.$on("treenodetoogled",function(t){e.project.toggleLayer(t)}),this.$on("treenodestoogled",function(t,i){e.project.toggleLayers(t,i)})}},c=Vue.extend(l);Vue.component("g3w-catalog",l),Vue.component("tristate-tree",{template:e("./tristate-tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e},isHidden:function(){return this.layerstree.hidden&&this.layerstree.hidden===!0}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,this.$dispatch("treenodestoogled",this.layerstree.nodes,this.parentChecked)):this.$dispatch("treenodetoogled",this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(i){_.forIn(i,function(i,r){!_.isNil(i.id)&&i.visible&&t.push(i),_.isNil(i.nodes)||e(i.nodes)})}var t=[],i=this.layerstree;return e(i),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return a.getCurrentProject().getLegendUrl(this.layer)}},methods:{openform:function(){}}}),n(r,s),t.exports=r},{"./catalog.html":71,"./legend.html":73,"./legend_item.html":74,"./tristate-tree.html":75,"core/i18n/i18n.service":22,"core/project/projectsregistry":34,"core/utils/utils":40,"gui/gui":54,"gui/vue/component":76}],73:[function(e,t,i){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],74:[function(e,t,i){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],75:[function(e,t,i){t.exports='<li class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\',layerstree.disabled  ? \'disabled\': \'\']" class="fa" style="cursor:default"></span>\n  <span :class="{bold: isFolder, disabled: layerstree.disabled}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tristate-tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n\n'},{}],76:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/utils/utils").resolve,s=(e("core/utils/utils").reject,e("gui/component")),a=function(e){n(this,e)};r(a,s);var l=a.prototype;l.mount=function(e){return this.internalComponent.$mount(e),o(!0)},l.unmount=function(){return this.internalComponent.$destroy(!0),this.internalComponent=null,o()},t.exports=a},{"core/utils/utils":40,"gui/component":52}],77:[function(e,t,i){Vue.directive("disabled",function(e){e?this.el.setAttribute("disabled","disabled"):this.el.removeAttribute("disabled")}),Vue.directive("checked",function(e){e?this.el.setAttribute("checked","checked"):this.el.removeAttribute("checked")}),Vue.directive("selected-first",function(e){0==e?this.el.setAttribute("selected",""):this.el.removeAttribute("selected")})},{}],78:[function(e,t,i){var r=r||{};r.core={G3WObject:e("core/g3wobject"),utils:e("core/utils/utils"),ApplicationService:e("core/applicationservice"),ApiService:e("core/apiservice"),Router:e("core/router"),ProjectsRegistry:e("core/project/projectsregistry"),Project:e("core/project/project"),MapQueryService:e("core/map/mapqueryservice"),MapLayer:e("core/map/maplayer"),LayerState:e("core/layer/layerstate"),VectorLayer:e("core/layer/vectorlayer"),WmsLayer:e("core/layer/wmslayer"),Geometry:e("core/geometry/geometry"),geom:e("core/geometry/geom"),PickCoordinatesInteraction:e("core/interactions/pickcoordinatesinteraction"),PickFeatureInteraction:e("core/interactions/pickfeatureinteraction"),i18n:e("core/i18n/i18n.service"),Plugin:e("core/plugin/plugin"),PluginsRegistry:e("core/plugin/pluginsregistry")},r.gui={gui:e("gui/gui"),vue:{SearchComponent:e("gui/search/vue/search"),CatalogComponent:e("gui/vue/catalog/catalog"),MapComponent:e("gui/map/vue/map"),ToolsComponent:e("gui/tools/vue/tools")}},t.exports={core:r.core,gui:r.gui}},{"core/apiservice":17,"core/applicationservice":18,"core/g3wobject":19,"core/geometry/geom":20,"core/geometry/geometry":21,"core/i18n/i18n.service":22,"core/interactions/pickcoordinatesinteraction":23,"core/interactions/pickfeatureinteraction":24,"core/layer/layerstate":25,"core/layer/vectorlayer":26,"core/layer/wmslayer":27,"core/map/maplayer":28,"core/map/mapqueryservice":29,"core/plugin/plugin":31,"core/plugin/pluginsregistry":32,"core/project/project":33,"core/project/projectsregistry":34,"core/router":36,"core/utils/utils":40,"gui/gui":54,"gui/map/vue/map":59,"gui/search/vue/search":67,"gui/tools/vue/tools":70,"gui/vue/catalog/catalog":72}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
