!function e(t,i,n){function r(s,a){if(!i[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return r(i?i:e)},u,u.exports,e,t,i,n)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(e,t,i){var n={iternet:e("plugins/g3w-iternet/plugin")},r={tools:[]},o=["zoom","zoombox"],s={resources:e("./locales/app.js")},a={debug:!1,local:!1},l={urls:{ows:"/ows",api:"/api",config:"/api/config",staticurl:""}},c={app:e("../templates/app.html"),sidebar:e("../templates/sidebar.html"),floatbar:e("../templates/floatbar.html")};t.exports={client:a,server:l,templates:c,plugins:n,tools:r,map:{controls:o},i18n:s}},{"../templates/app.html":4,"../templates/floatbar.html":5,"../templates/sidebar.html":6,"./locales/app.js":2,"plugins/g3w-iternet/plugin":87}],2:[function(e,t,i){var n={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",baselayers:"Basi",tools:"Strumenti",tree:"Dati",legend:"Legenda",street_search:"Cerca indirizzo"}}};t.exports=n},{}],3:[function(e,t,i){var n=e("g3w-base-app/bootstrap"),r=e("g3w/core/geocodingservice").Nominatim,o=e("g3w/gui/geocoding/listpanel"),s=e("g3w/gui/listpanel").ListPanel,a=e("g3w/gui/gui"),l=e("./config/config.js");$(function(){l.getWmsUrl=function(e){return l.server.urls.ows+"/"+l.group.id+"/"+e.type+"/"+e.id},l.getProjectConfigUrl=function(e){return l.server.urls.config+"/"+l.group.id+"/"+e.type+"/"+e.id},n(l),r.on("results",function(e,t){var i=new s({name:"Risultati ricerca '"+t+"'",id:"nominatim_results",list:e,listPanelComponent:o});a.showListing(i)})})},{"./config/config.js":1,"g3w-base-app/bootstrap":7,"g3w/core/geocodingservice":29,"g3w/gui/geocoding/listpanel":54,"g3w/gui/gui":55,"g3w/gui/listpanel":57}],4:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Toggle button on navbar only for mobile -->\n      <a v-if="isMobile()" href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <geocoder type="Nominatim"></geocoder>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  <sidebar></sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <viewport></viewport>\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],5:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <a v-show="panelsinstack" href="#" class="floatbar-aside-toggle" data-toggle="control-sidebar" role="button">\n    <span class="sr-only">Expand</span>\n  </a>\n  <div v-show="panelsinstack" class="g3w-sidebarpanel">\n    <div class="row" v-if="closable">\n      <div class="col-xs-12 col-sm-12 col-md-12">\n        <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button>\n      </div>\n    </div>\n    <div>\n      <h4 class="g3w-floatbarpanel-name">{{ panelname }}</h2>\n    </div>\n    <div id="g3w-floatbarpanel-placeholder" class="g3w-floatbarpanel-placeholder"></div>\n  </div>\n</aside>\n'},{}],6:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n  <!-- Sidebar toggle button-->\n  <!-- Toggle button on the left side of main sidebar only if not mobile -->\n  <a v-if="!isMobile()" href="#" class="sidebar-aside-toggle" data-toggle="offcanvas" role="button">\n    <span class="sr-only">Expand</span>\n  </a>\n	<section class="sidebar">\n    <div v-show="panelsinstack" class="g3w-sidebarpanel">\n      <div class="row">\n        <div class="col-xs-12 col-sm-12 col-md-12">\n          <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button></div>\n      </div>\n      <div>\n        <h4>{{ panelname }}</h2>\n      </div>\n      <div id="g3w-sidebarpanel-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n    </div>\n    \n	  <ul v-show="!panelsinstack" class="sidebar-menu">\n	    <!--<sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n        <g3w-search></g3w-search>\n      </sidebar-item>-->\n      <sidebar-item open-on-start="true" data-icon="fa fa-database" data-label="catalog" data-type="inline">\n        <g3w-catalog></g3w-catalog>\n      </sidebar-item>\n      <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n        <g3w-tools></g3w-tools>\n      </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],7:[function(e,t,i){var n=e("i18n/i18n.service").init,r=e("i18n/i18n.service").t;e("g3w/gui/vue.directives");var o=e("g3w/gui/vue.mixins").isMobileMixin,s=e("./js/layout/layout"),a=null,l=e("./js/app.service"),c=function(t){function i(e){return{debug:t.client.debug||!1,group:null,urls:t.server.urls,resourcesurl:t.server.urls.staticurl,projects:t.group.projects,initproject:t.group.initproject,baselayers:t.group.baselayers,crs:t.group.crs,minscale:t.group.minscale,maxscale:t.group.maxscale,getWmsUrl:t.getWmsUrl,getProjectConfigUrl:t.getProjectConfigUrl,plugins:{plugins:t.plugins,configs:t.group.plugins},tools:t.tools,views:t.views||{},map:t.map}}function c(){a=new Vue({el:"body",ready:function(){$(document).localize()}})}n(t.i18n),Vue.filter("t",function(e){return r(e)}),t.client.debug&&(Vue.config.debug=!0),Vue.mixin(o);var u=e("g3w-base-app/js/layout/sidebar").SidebarComponent,d=e("g3w-base-app/js/layout/floatbar").FloatbarComponent,h=e("g3w-base-app/js/app.ui"),f=u.extend({mixins:[o],template:t.templates.sidebar});Vue.component("sidebar",f);var p=d.extend({template:t.templates.floatbar});Vue.component("floatbar",p);var g=h.extend({template:t.templates.app});if(Vue.component("app",g),s.loading(),l.on("ready",function(){c()}),window.initConfig){t.server.urls.staticurl=initConfig.staticurl,t.group=window.initConfig.group;var v=i(v);l.init(v)}else $(document).on("initconfigReady",function(e,n){t.server.urls.staticurl=n.staticurl,t.group=n.group;var r=i(r);l.init(r)})};t.exports=c},{"./js/app.service":8,"./js/layout/layout":12,"g3w-base-app/js/app.ui":9,"g3w-base-app/js/layout/floatbar":11,"g3w-base-app/js/layout/sidebar":13,"g3w/gui/vue.directives":66,"g3w/gui/vue.mixins":67,"i18n/i18n.service":68}],8:[function(e,t,i){var n=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,o=e("g3w/core/g3wobject"),s=e("g3w/core/apiservice"),a=e("g3w/core/projectsregistry"),l=e("g3w/core/pluginsregistry"),c=e("g3w/core/mapservice"),u=e("g3w/core/toolsservice"),d=(e("g3w/gui/map/map"),function(){this.initialized=!1,this._modalOverlay=null,this.config={},r(this)});n(d,o);var h=d.prototype;h.init=function(e){this.config=e,this._bootstrap()},h._bootstrap=function(){var e=this;this.initialized||$.when(s.init(this.config),a.init(this.config),l.init(this.config.plugins),c.init(this.config.map),u.init(this.config.tools)).then(function(){e.emit("ready"),this.initialized=!0})},h.showModalOverlay=function(e){this._modalOverlay||(this._modalOverlay=$('<div id="g3w-modal-overlay" style="background-color: #000000; opacity: 0.7;z-index:4000;position:fixed;top:0px;left:0px"></div>'),$("body").append(this._modalOverlay),this._modalOverlay.width($(window).innerWidth()),this._modalOverlay.height($(window).innerHeight())),_.isUndefined(e)||e===!0?this._modalOverlay.show():this._modalOverlay.hide()},h.getDefaultView=function(){var t;return t=this.config.views&&this.config.views["default"]?this.config.views["default"]:e("g3w/gui/map/map"),t.getViewComponent()},t.exports=new d},{"g3w/core/apiservice":27,"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/pluginsregistry":35,"g3w/core/projectsregistry":37,"g3w/core/toolsservice":39,"g3w/core/utils":40,"g3w/gui/map/map":59}],9:[function(e,t,i){var n=(e("i18n/i18n.service").t,e("g3w/core/mapservice")),r=e("g3w/core/router"),o=e("g3w/gui/gui.js"),s=e("g3w/gui/view/viewport");e("g3w/gui/geocoding/geocoding"),e("g3w/gui/vue.directives");var a=e("./layout/layout"),l=e("./layout/sidebar").SidebarService,c=e("./layout/floatbar").FloatbarService,u=e("./app.service.js"),d=Vue.extend({ready:function(){function e(){$(i).css("max-height",$(window).innerHeight()),$(".g3w-sidebarpanel").height($(window).innerHeight()-$(".main-header").innerHeight())}function t(){$("#g3w-modal-overlay").height($(window).innerHeight())}a.loading(!1),a.setup(),$("body").toggleClass("fixed"),a.layout.fixSidebar(),a.pushMenu.expandOnHover(),a.layout.activate(),a.controlSidebar._fix($(".control-sidebar-bg")),a.controlSidebar._fix($(".control-sidebar")),c.init(a);var i=a.options.controlSidebarOptions.selector;e(),$(window).resize(function(){e(),t()}),s.setView(u.getDefaultView()),o.getResourcesUrl=function(){return u.config.resourcesurl},o.showForm=_.bind(c.showPanel,c),o.closeForm=_.bind(c.closePanel,c),o.showListing=_.bind(c.showPanel,c),o.closeListing=_.bind(c.closePanel,c),o.hideListing=_.bind(c.hidePanel,c),o.showPanel=_.bind(l.showPanel,l),o.setModal=_.bind(u.showModalOverlay,u),o.showSpinner=function(e){var t=e.container||"body",i=e.id||"loadspinner",n=e.where||"prepend",r=e.style||"",o=e.transparent?"background-color: transparent":"";$("#"+i).length||$(t)[n].call($(t),'<div id="'+i+'" class="spinner-wrapper '+r+'" style="'+o+'"><div class="spinner '+r+'"></div></div>')},o.hideSpinner=function(e){$("#"+e).remove()},o.ready(),r.initRoute(),$(n.getViewport()).prepend('<div id="map-spinner" style="position:absolute;right:0px;"></div>'),n.on("loadstart",function(){o.showSpinner({container:$("#map-spinner"),id:"maploadspinner",style:"blue"})}),n.on("loadend",function(){o.hideSpinner("maploadspinner")})}});t.exports=d},{"./app.service.js":8,"./layout/floatbar":11,"./layout/layout":12,"./layout/sidebar":13,"g3w/core/mapservice":33,"g3w/core/router":38,"g3w/gui/geocoding/geocoding":52,"g3w/gui/gui.js":55,"g3w/gui/view/viewport":65,"g3w/gui/vue.directives":66,"i18n/i18n.service":68}],10:[function(e,t,i){function n(){this._panels=[],this.state={panels:[]}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/g3wobject");r(n,o);var s=n.prototype;s.push=function(e,t){var i=this;e.onShow(t).then(function(){i._panels.push(e),i.state.panels.push({id:e.id,name:e.name})})},s.pop=function(){var e=this,t=this._panels.slice(-1)[0];t.onClose().then(function(){e.state.panels.pop(),e._panels.pop()})},t.exports=n},{"g3w/core/g3wobject":28,"g3w/core/utils":40}],11:[function(e,t,i){function n(){this.stack=new r,this.init=function(e){this.layout=e,this.closable=!0,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector),this._zindex=this.sidebarEl.css("z-index"),this._modalOverlay=null,this._modal=!1},this.showPanel=function(e,t){var t=t||{},i=t.modal||!1;this.closable=t.closable||!0,this.stack.push(e,"#g3w-floatbarpanel-placeholder"),this.layout.floatBar.open(this.sidebarEl,!0),i&&(this._modal=!0,o.setModal(),this.sidebarEl.css("z-index",5e3),this.sidebarEl.css("padding-top","0px"),$(".control-sidebar-bg").css("z-index",4999),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"))},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy(),this.stack.length||(this._modal?(o.setModal(!1),this.layout.floatBar.close(this.sidebarEl,!0),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"),this.sidebarEl.css("z-index",""),this.sidebarEl.css("padding-top","50px"),$(".control-sidebar-bg").css("z-index",""),this._modal=!1):this.layout.floatBar.close(this.sidebarEl,!0))},this.hidePanel=function(){this.layout.floatBar.close(this.sidebarEl,!0)}}var r=(e("i18n/i18n.service").t,e("./barstack.js")),o=e("g3w/gui/gui"),s=new n,a=Vue.extend({data:function(){return{stack:s.stack.state}},computed:{panelsinstack:function(){return this.stack.panels.length>0},panelname:function(){var e="";return this.stack.panels.length&&(e=this.stack.panels.slice(-1)[0].name),e},closable:function(){return s.closable}},watch:{"stack.panels":function(){var e=$("#g3w-floatbarpanel-placeholder").children();_.forEach(e,function(t,i){i==e.length-1?$(t).show():$(t).hide()})}},methods:{closePanel:function(){s.closePanel()}}});t.exports={FloatbarService:s,FloatbarComponent:a}},{"./barstack.js":10,"g3w/gui/gui":55,"i18n/i18n.service":68}],12:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var n;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),n=t-e):($(".content-wrapper, .right-side").css("min-height",i),n=i);var r=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof r&&r.height()>n&&$(".content-wrapper, .right-side").css("min-height",r.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,i=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var n=$(this),r=n.next();if(r.is(".treeview-menu")&&r.is(":visible"))r.slideUp(i,function(){r.parent("li.treeview").removeClass("active"),r.removeClass("menu-open")});else if(r.is(".treeview-menu")&&!r.is(":visible")){var o,s=n.parents("ul").first(),a=n.parent("li"),l=a.siblings(),c=s.height()-s.find("li.header").outerHeight(),u=a.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var d=c-u;r.css({height:d+"px","max-height":d+"px","overflow-y":"auto"});var h=s.find("ul.treeview-menu:visible").slideUp(i);h.removeClass("menu-open"),r.slideDown(i,function(){r.addClass("menu-open"),o=s.find("li.treeview.active"),o.removeClass("active"),a.addClass("active"),t.layout.fix()})}r.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,i=$(t.selector),n=$(t.toggleBtnSelector);n.on("click",function(n){n.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var r=$(".control-sidebar-bg");e._fix(r),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),n=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),n.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),n.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(r),n.onLoadStart.call(e)}function i(e){e.find(r).remove(),n.onLoadDone.call(e)}var n=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),r=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===n.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),r=e.find(n.trigger).first();r.on("click",function(r){r.preventDefault(),t(e),e.find(".box-body").load(n.source,function(){i(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},$.LayoutManager.loading=function(e){var e=_.isBoolean(e)?e:!0;e?$("body").append('<div id="loadspinner" class="loading"></div>'):$("#loadspinner").remove()},t.exports=$.LayoutManager},{}],13:[function(e,t,i){function n(){this.stack=new o,this.init=function(e){this.layout=e},this.showPanel=function(e){this.stack.push(e,"#g3w-sidebarpanel-placeholder")},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy()}}var r=e("i18n/i18n.service").t;e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),e("g3w/gui/tools/tools");var o=e("./barstack.js"),s=new n,a=Vue.extend({data:function(){return{panels:s.stack.state.panels,bOpen:!0,bPageMode:!1,header:r("main navigation")}},computed:{panelsinstack:function(){return this.panels.length>0},panelname:function(){var e="";return this.panels.length&&(e=this.panels.slice(-1)[0].name),e}},methods:{closePanel:function(){s.closePanel()}},ready:function(){}});Vue.component("sidebar-item",{props:["data-icon","data-label","data-type","open-on-start"],template:e("./templates/sidebar-item.html"),data:function(){return{main:!0}}}),t.exports={SidebarService:s,SidebarComponent:a}},{"./barstack.js":10,"./templates/sidebar-item.html":14,"g3w/gui/catalog/catalog":45,"g3w/gui/search/search":61,"g3w/gui/tools/tools":63,"i18n/i18n.service":68}],14:[function(e,t,i){t.exports='<li class="treeview" :class="{\'active\': openOnStart}">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span class="treeview-label">{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],15:[function(e,t,i){var n=function(e){var t=e.name||"?";if(this.name=t.split(" ").join("-").toLowerCase(),this.id=this.name+"_"+Math.floor(1e6*Math.random()),!e.element){var i="ol-"+this.name.split(" ").join("-").toLowerCase(),r=e.tipLabel||this.name,o=e.label||"?";e.element=$('<div class="'+i+' ol-unselectable ol-control"><button type="button" title="'+r+'">'+o+"</button></div>")[0]}var s=e.buttonClickHandler||n.prototype._handleClick.bind(this);$(e.element).on("click",s),ol.control.Control.call(this,e),this._postRender()};ol.inherits(n,ol.control.Control);var r=n.prototype;r._handleClick=function(){var e=this,t=this.getMap(),i=null,n=t.getControls();n.forEach(function(t){t.id&&t.toggle&&t.id!=e.id&&(t.toggle(!1),"reset"==t.name&&(i=t))}),!e._toggled&&i&&i.toggle(!0)},r._postRender=function(){},t.exports=n},{}],16:[function(e,t,i){var n=e("./control"),r=function(e){this._toggled=this._toggled||!1,this._interaction=e.interaction||null,this._autountoggle=e.autountoggle||!1,e.buttonClickHandler=r.prototype._handleClick.bind(this),n.call(this,e)};ol.inherits(r,n);var o=r.prototype;o.toggle=function(e){var e=void 0!==e?e:!this._toggled;this._toggled=e;var t=this.getMap(),i=$(this.element).find("button").first();e?(this._interaction&&t.addInteraction(this._interaction),i.addClass("g3w-ol-toggled")):(this._interaction&&t.removeInteraction(this._interaction),i.removeClass("g3w-ol-toggled"))},o._handleClick=function(e){this.toggle(),n.prototype._handleClick.call(this,e)},t.exports=r},{"./control":15}],17:[function(e,t,i){var n=e("../utils"),r=e("./interactioncontrol"),o=e("../interactions/pickcoordinatesinteraction"),s=function(e){var t=this,i={name:"querylayer",tipLabel:"Query layer",label:"",interaction:new o};e=n.merge(e,i),r.call(this,e),this._interaction.on("picked",function(e){t.dispatchEvent({type:"picked",coordinates:e.coordinate}),t._autountoggle&&t.toggle()})};ol.inherits(s,r),t.exports=s},{"../interactions/pickcoordinatesinteraction":21,"../utils":26,"./interactioncontrol":16}],18:[function(e,t,i){var n=e("../utils"),r=e("./interactioncontrol"),o=function(e){this._toggled=!0,this._startCoordinate=null;var t={name:"reset",tipLabel:"Pan",label:""};e=n.merge(e,t),r.call(this,e)};ol.inherits(o,r),t.exports=o;var s=o.prototype;s._postRender=function(){this.toggle(!0)}},{"../utils":26,"./interactioncontrol":16}],19:[function(e,t,i){var n=e("../utils"),r=e("./interactioncontrol"),o=function(e){var t=this;this._startCoordinate=null;var i={name:"zoombox",tipLabel:"Zoom to box",label:"",interaction:new ol.interaction.DragBox};e=n.merge(e,i),r.call(this,e),this._interaction.on("boxstart",function(e){t._startCoordinate=e.coordinate}),this._interaction.on("boxend",function(e){var i=t._startCoordinate,n=e.coordinate,r=ol.extent.boundingExtent([i,n]);t.dispatchEvent({type:"zoomend",extent:r}),t._startCoordinate=null,t._autountoggle&&t.toggle()})};ol.inherits(o,r),t.exports=o},{"../utils":26,"./interactioncontrol":16}],20:[function(e,t,i){var n=e("./utils"),r=e("./map/maphelpers");!function(e,n,r){"function"==typeof define&&define.amd?define(r):"object"==typeof i?t.exports=r():n[e]=r()}("g3wol3",this,function(){"use strict";var e=n.merge({},r);return{helpers:e}})},{"./map/maphelpers":25,"./utils":26}],21:[function(e,t,i){var n={PICKED:"picked"},r=function(e,t){this.type=e,this.coordinate=t},o=function(e){this.previousCursor_=null,ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_})};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return!0},o.handleUpEvent_=function(e){return this.dispatchEvent(new r(n.PICKED,e.coordinate)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement();t.style.cursor="pointer"},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e)},t.exports=o},{}],22:[function(e,t,i){var n={PICKED:"picked"},r=function(e,t,i){this.type=e,this.feature=i,this.coordinate=t},o=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_}),this.features_=e.features||null,this.layers_=e.layers||null,this.pickedFeature_=null;var t=this;this.layerFilter_=function(e){return _.includes(t.layers_,e)}};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return this.pickedFeature_=this.featuresAtPixel_(e.pixel,e.map),!0},o.handleUpEvent_=function(e){return this.pickedFeature_&&this.dispatchEvent(new r(n.PICKED,e.coordinate,this.pickedFeature_)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=this.featuresAtPixel_(e.pixel,e.map);i?t.style.cursor="pointer":t.style.cursor=""},o.prototype.featuresAtPixel_=function(e,t){var i=null,n=t.forEachFeatureAtPixel(e,function(e){return this.features_?this.features_.indexOf(e)>-1?e:null:e},this,this.layerFilter_);return n&&(i=n),i},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e)},t.exports=o},{}],23:[function(e,t,i){var n={};n.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),n.BING={},n.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),n.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),n.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=n},{}],24:[function(e,t,i){var n=e("../utils"),r={};r.TiledWMSLayer=function(e,t){var i={layerObj:e,extraParams:t||{},tiled:!0};return r._WMSLayer(i)},r.WMSLayer=function(e,t){var i={layerObj:e,extraParams:t||{}};return r._WMSLayer(i)},r._WMSLayer=function(e){var t=e.layerObj,i=e.extraParams,r=e.tiled||!1,o={LAYERS:t.layers||"",VERSION:"1.3.0",TRANSPARENT:!0,SLD_VERSION:"1.1.0"};o=n.merge(o,i);var s,a,l={url:t.url,params:o,ratio:1},c={id:t.id,name:t.name,opacity:t.opacity||1,visible:t.visible,maxResolution:t.maxResolution};r?(a=new ol.source.TileWMS(l),s=ol.layer.Tile):(a=new ol.source.ImageWMS(l),s=ol.layer.Image),c.source=a;var u=new s(c);return u},t.exports=r},{"../utils":26}],25:[function(e,t,i){BaseLayers=e("../layers/bases");var n={createViewer:function(e){return new r(e)}},r=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1},zoom:!1,attribution:!1}),i=ol.interaction.defaults().extend([new ol.interaction.DragRotate]);
i.removeAt(1);var n=new ol.View(e.view),r={controls:t,interactions:i,ol3Logo:!1,view:n,keyboardEventTarget:document};e.id&&(r.target=e.id);var o=new ol.Map(r);this.map=o};r.prototype.destroy=function(){this.map&&(this.map.dispose(),this.map=null)},r.prototype.updateMap=function(e){},r.prototype.updateView=function(){},r.prototype.getMap=function(){return this.map},r.prototype.setTarget=function(e){this.map.setTarget(e)},r.prototype.goTo=function(e,t){var i=i||{},n=i.animate||!0,r=this.map.getView();if(n){var o=ol.animation.pan({duration:500,source:r.getCenter()}),t=ol.animation.zoom({duration:500,resolution:r.getResolution()});this.map.beforeRender(o,t)}r.setCenter(e),r.setZoom(t)},r.prototype.goToRes=function(e,t){var i=i||{},n=i.animate||!0,r=this.map.getView();if(n){var o=ol.animation.pan({duration:500,source:r.getCenter()}),s=ol.animation.zoom({duration:500,resolution:r.getResolution()});this.map.beforeRender(o,s)}r.setCenter(e),r.setResolution(t)},r.prototype.fit=function(e,t){var i=this.map.getView(),t=t||{},n=t.animate||!0;if(n){var r=ol.animation.pan({duration:500,source:i.getCenter()}),o=ol.animation.zoom({duration:500,resolution:i.getResolution()});this.map.beforeRender(r,o)}t.animate&&delete t.animate,t.constrainResolution=t.constrainResolution||!1,i.fit(e,this.map.getSize(),t)},r.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},r.prototype.getResolution=function(){var e=this.map.getView();return e.getResolution()},r.prototype.getCenter=function(){var e=this.map.getView();return e.getCenter()},r.prototype.getBBOX=function(){return this.map.getView().calculateExtent(this.map.getSize())},r.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),i=t.getLength(),n=0;i>n;n++)if(e===t.item(n).get("name"))return t.item(n);return null},r.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&(this.map.removeLayer(t),delete t)},r.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&i.visible&&e.push(t)}),e},r.prototype.removeLayers=function(){this.map.getLayers().clear()},r.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&e.push(t)}),e},r.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},r.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),i=this.map.getLayers();i.insertAt(0,t)},t.exports=n},{"../layers/bases":23}],26:[function(e,t,i){var n={merge:function(e,t){var i={};for(var n in e)i[n]=e[n];for(var n in t)i[n]=t[n];return i}};t.exports=n},{}],27:[function(e,t,i){function n(){this._config=null,this._baseUrl=null,this._apiUrls={},this.init=function(e){this._config=e,this._baseUrl=e.urls.api,this._apiEndpoints=e.urls.apiEndpoints};var e=0;this._incrementLoaders=function(){0==e&&this.emit("apiquerystart"),e+=1},this._decrementLoaders=function(){e-=1,0==e&&this.emit("apiqueryend")},this.get=function(e,t){var i=this,n=this._apiEndpoints[e];if(n){var r=this._baseUrl+"/"+n;t.request&&(r=r+"/"+t.request);var o=t.params||{};return i.emit(e+"querystart"),this._incrementLoaders(),$.get(r,o).done(function(t){return i.emit(e+"queryend",t),t}).fail(function(t){return i.emit(e+"queryfail",t),t}).always(function(){i._decrementLoaders()})}return a()},o(this)}var r=e("./utils").inherit,o=e("./utils").base,s=e("g3w/core/g3wobject"),a=e("./utils").rejectedValue;r(n,s),t.exports=new n},{"./utils":40,"g3w/core/g3wobject":28}],28:[function(e,t,i){var n=e("g3w/core/utils").inherit,r=e("g3w/core/utils").noop,o=function(){this.setters&&this._setupListenersChain(this.setters)};n(o,EventEmitter);var s=o.prototype;s.onafter=function(e,t){return this._onsetter("after",e,t,!1)},s.onbefore=function(e,t){return this._onsetter("before",e,t,!1)},s.onbeforeasync=function(e,t){return this._onsetter("before",e,t,!0)},s.un=function(e,t){_.forEach(this.settersListeners,function(i,n){_.forEach(i[e],function(e){e.key==t&&delete e})})},s._onsetter=function(e,t,i,n){var r=this.settersListeners[e],o=""+Math.floor(1e6*Math.random())+Date.now();return r[t].push({key:o,fnc:i,async:n}),o},s._setupListenersChain=function(e){var t=this;this.settersListeners={after:{},before:{}},_.forEach(e,function(e,i){var n=r,o=r;_.isFunction(e)?n=e:(n=e.fnc,o=e.fallback||r),t.settersListeners.after[i]=[],t.settersListeners.before[i]=[],t[i]=function(){function e(){c=n.apply(t,a),l.resolve(c);var e=t.settersListeners.after[i];_.forEach(e,function(e,i){e.fnc.apply(t,a)})}function r(){o.apply(t,a),l.reject()}function s(n){var o=!0;_.isBoolean(n)&&(o=n);var l=Array.prototype.slice.call(a);if(o===!1||u==d.length)o===!1?r.apply(t,a):(completed=e.apply(t,a),(_.isUndefined(completed)||completed===!0)&&t.emitEvent("set:"+i,a));else if(o){var c=d[u].fnc;if(d[u].async)l.push(s),u+=1,c.apply(t,l);else{var h=c.apply(t,l);u+=1,s(h)}}}var a=arguments,l=$.Deferred(),c=null,u=0,d=this.settersListeners.before[i];return u=0,s(),l.promise()}})},t.exports=o},{"g3w/core/utils":40}],29:[function(e,t,i){function n(){var e=this;this.url="http://nominatim.openstreetmap.org",this.search=function(t){var i=($.Deferred(),l.extentToWGS84(a.state.project.extent));bboxstring=_.join(i,",");var n=this.url+"/search?viewboxlbrt="+bboxstring+"&bounded=1&format=json&polygon_geojson=1&q="+t;$.get(n,function(i){e.emit("results",i,t)})},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/projectservice").ProjectService,l=e("g3w/core/mapservice");r(n,s),t.exports={Nominatim:new n}},{"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/projectservice":36,"g3w/core/utils":40}],30:[function(e,t,i){var n={distance:function(e,t){return Math.sqrt(n.squaredDistance(e,t))},squaredDistance:function(e,t){var i=e[0],n=e[1],r=t[0],o=t[1],s=r-i,a=o-n;return s*s+a*a},closestOnSegment:function(e,t){var i,n,r=e[0],o=e[1],s=t[0],a=t[1],l=s[0],c=s[1],u=a[0],d=a[1],h=u-l,f=d-c,p=0===h&&0===f?0:(h*(r-l)+f*(o-c))/(h*h+f*f||0);return 0>=p?(i=l,n=c):p>=1?(i=u,n=d):(i=l+p*h,n=c+p*f),[i,n]}};t.exports=n},{}],31:[function(e,t,i){function n(e){this.config=e||{},this.id=e.id,o(this)}var r=e("./utils").inherit,o=e("./utils").base,s=e("g3w/core/g3wobject"),a={QUERY:1,EDIT:2};r(n,s);var l=n.prototype;l.getQueryUrl=function(){},l.getQueryLayers=function(){},n.isQueryable=function(e){var t=!1,i=!!(e.capabilities&&e.capabilities&&a.QUERY);if(i)var t=e.visible&&!e.disabled||e.infowhennotvisible&&e.infowhennotvisible===!0;return t},n.getQueryLayerName=function(e){var t;return t=e.infolayer&&""!=e.infolayer?e.infolayer:e.name},t.exports=n},{"./utils":40,"g3w/core/g3wobject":28}],32:[function(e,t,i){function n(){o(this),this.init=function(e){this.map=e},this.queryPoint=function(e,t){var i=this,n=$.Deferred(),r={};_.forEach(t,function(e){var t=e.getQueryUrl(),i=t.hashCode().toString();-1==_.keys(r).indexOf(i)&&(r[i]={url:t,mapLayers:[]}),r[i].mapLayers.push(e)});var o=[];_.forEach(r,function(t){var n=t.mapLayers[0],r=i.getGetFeatureInfoUrl(n,e),s=r.split("?")[0],a=r.split("?")[1],l={};_.forEach(a.split("&"),function(e){var t=e.split("="),i=t[0],n=t[1];l[i]=n});var c=[];if(_.forEach(t.mapLayers,function(e){var t=e.getQueryLayers();t.length&&(c=_.concat(c,t))}),c.length){delete l.STYLES,l.LAYERS=_.map(c,"queryLayerName"),l.QUERY_LAYERS=_.map(c,"queryLayerName"),l.FEATURE_COUNT=1e3;var u=s,d=[];_.forEach(l,function(e,t){d.push(t+"="+e)}),u=s+"?"+d.join("&"),o.push({url:u,queryLayers:c})}});var s={};return o.length>0?_.forEach(o,function(t){var i=t.url,r=t.queryLayers;$.get(i).then(function(t){var i=0;_.forEach(r,function(e){var n=new ol.format.WMSGetFeatureInfo({layers:[e.queryLayerName]}),r=n.readFeatures(t);i+=r.length,s[e.layerName]=r}),n.resolve(e,i,s)}).fail(function(e){n.reject(e)})}):n.resolve(e,0,s),n.promise()},this.queryRect=function(e,t){},this._query=function(e,t){var i;i=t?[a.getLayer(t)]:a.getLayers()},this.getGetFeatureInfoUrl=function(e,t){var i=this.map.getView().getResolution(),n=this.map.getView().getProjection().getCode(),r={QUERY_LAYERS:e.getLayer().getSource().getParams().LAYERS,INFO_FORMAT:"application/vnd.ogc.gml"},o=e.getLayer().getSource().getGetFeatureInfoUrl(t,i,n,r);return o}}var r=e("./utils").inherit,o=e("./utils").base,s=e("./g3wobject"),a=(e("../gui/gui"),e("./projectservice").ProjectService);e("./layer");r(n,s),t.exports=new n},{"../gui/gui":55,"./g3wobject":28,"./layer":31,"./projectservice":36,"./utils":40}],33:[function(e,t,i){function n(){var e=this;this.config,this.viewer,this.mapLayers={},this.mapBaseLayers={},this.layersAssociation={},this.layersExtraParams={},this.state={bbox:[],resolution:null,center:null,loading:!1},this.init=function(e){this.config=e},this._howManyAreLoading=0,this._incrementLoaders=function(){0==this._howManyAreLoading&&this.emit("loadstart"),this._howManyAreLoading+=1},this._decrementLoaders=function(){this._howManyAreLoading-=1,0==this._howManyAreLoading&&this.emit("loadend")},this._interactionsStack=[],this.setters={setMapView:function(e,t,i){this.state.bbox=e,this.state.resolution=t,this.state.center=i,this.checkLayersDisabled(t)},setupViewer:function(){$script("http://epsg.io/"+c.state.project.crs+".js"),e.viewer&&(this.viewer.destroy(),this.viewer=null),e._setupViewer(),e.setupControls(),e.setupLayers(),e.emit("viewerset")}},c.on("projectset",function(){e.setupViewer()}),c.on("projectswitch",function(){e.setupLayers()}),c.onafter("setLayersVisible",function(t){_.forEach(t,function(t){var i=e.getMapLayerForLayer(t);i.update()})}),this.checkLayerDisabled=function(e,t){var i=e.disabled||!1;e.maxresolution&&(i=e.maxresolution<t),e.minresolution&&(e.disabled=i&&e.minresolution>t),e.disabled=i},this.checkLayersDisabled=function(e){var t=this;_.forEach(this.mapLayers,function(i){_.forEach(i.getLayerConfigs(),function(i){t.checkLayerDisabled(i,e)})})},c.onafter("setBaseLayer",function(){_.forEach(e.mapBaseLayers,function(e){e.update()})}),this._setupViewer=function(){var t=c.state.project.extent,i=new ol.proj.Projection({code:"EPSG:"+c.state.project.crs,extent:t});this.viewer=h.createViewer({view:{projection:i,center:this.config.initcenter||ol.extent.getCenter(c.state.project.extent),zoom:this.config.initzoom||0,extent:this.config.constraintextent||t,minZoom:this.config.minzoom||0,maxZoom:this.config.maxzoom||28}}),this.viewer.map.on("moveend",function(t){e._setMapView()}),b.init(this.viewer.map),this.emit("ready")},this.getViewerElement=function(){this.viewer.map.getTargetElement()},this.getViewport=function(){return this.viewer.map.getViewport()},this.setupControls=function(){var e=this;e.viewer.map;this.config&&this.config.controls&&_.forEach(this.config.controls,function(t){var i;switch(t){case"reset":isMobile.any||(i=new f);break;case"zoom":i=new ol.control.Zoom({zoomInLabel:"",zoomOutLabel:""});break;case"zoombox":isMobile.any||(i=new g,i.on("zoomend",function(t){e.viewer.fit(t.extent)}));break;case"zoomtoextent":i=new ol.control.ZoomToExtent({label:"",extent:e.config.constraintextent});break;case"query":i=new p,i.on("picked",function(t){var i=t.coordinates;b.queryPoint(i,e.mapLayers).then(function(t,i,n){var r=[];_.forEach(n,function(e,t){var i=c.layers[t];r.push({layer:i,features:e})}),e.emit("mapqueryend",r,i,t,e.state.resolution)})})}i&&e.addControl(i)})},this.addControl=function(e){this.viewer.map.addControl(e)},this.setLayersExtraParams=function(e,t){this.layersExtraParams=_.assign(this.layersExtraParams,e),this.emit("extraParamsSet",e,t)},this.setupBaseLayers=function(){if(l.state.baseLayers){var e=this;this.mapBaseLayers={};var t=(c.config.initbaselayer,c.state.baseLayers);_.forEach(t,function(e){var t=!0;c.state.project.initbaselayer&&(t=e.id==c.state.project.initbaselayer),e.fixed&&(t=e.fixed),e.visible=t}),t.forEach(function(t){var i={defaultUrl:c.getWmsUrl(),id:t.id,tiled:!0},n=new y(i);e.registerListeners(n),n.addLayer(t),e.mapBaseLayers[t.id]=n}),_.forEach(_.values(this.mapBaseLayers).reverse(),function(t){e.viewer.map.addLayer(t.getLayer()),t.update()})}},this.setupLayers=function(){this.viewer.removeLayers(),this.setupBaseLayers(),this.mapLayers={},this.layersAssociation={};var t=this.traverseLayersTree(c.state.project.layerstree),i=_.filter(t,function(e){return!_.get(e,"nodes")}),n=_.groupBy(i,function(e){return e.multilayer});_.forEach(n,function(t,i){var n=t.length,r="layer_"+i,o=_.get(e.mapLayers,r),s=t[0].tiled,a=n>1?m:y,l={defaultUrl:c.getWmsUrl(),id:r,tiled:s};o=e.mapLayers[r]=new a(l,e.layersExtraParams),e.registerListeners(o),t.forEach(function(t){var i=e.viewer.map.getView().getResolution();e.checkLayerDisabled(t,i),o.addLayer(t),e.layersAssociation[t.id]=r})}),_.forEach(_.values(this.mapLayers).reverse(),function(t){e.viewer.map.addLayer(t.getLayer()),t.update(e.layersExtraParams)})},this.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.multilayer]},this.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,n){_.isNil(e.id)||i.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var i=[];return t(e),i},this.registerListeners=function(t){t.on("loadstart",function(){e._incrementLoaders()}),t.on("loadend",function(){e._decrementLoaders(!1)}),this.on("extraParamsSet",function(e,i){i&&t.update(e)})},this.showViewer=function(t){this.viewer.setTarget(t);this.viewer.map;a.on("guiready",function(){e._setMapView()})},this.pushInteraction=function(e){if(this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!1)}):t.setActive(!1)}this.viewer.map.addInteraction(e),e.setActive(!0),this._interactionsStack.push(e)},this.popInteraction=function(){var e=this._interactionsStack.pop();if(this.viewer.map.removeInteraction(e),this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!0)}):t.setActive(!0)}},this.goTo=function(e,t){var t=t||6;this.viewer.goTo(e,t)},this.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+c.state.project.crs);this.goTo(e,t)},this.extentToWGS84=function(e){return ol.proj.transformExtent(e,"EPSG:"+c.state.project.crs,"EPSG:4326")},this.getFeatureInfo=function(e){var t=this,i=$.Deferred();return this._pickInteraction=new v,this.pushInteraction(this._pickInteraction),this._pickInteraction.on("picked",function(n){t._completeGetFeatureInfo(e,n.coordinate,i)}),i.promise()},this._completeGetFeatureInfo=function(e,t,i){var n=this,r=c.state.project.type,o=this.mapLayers[this.layersAssociation[e]],s=n.viewer.getResolution(),a=n.viewer.map.getView().getProjection().getCode(),l={QUERY_LAYERS:c.getLayer(e).name,INFO_FORMAT:"text/xml"};if(r==u.QDJANGO){var d=w[r];if(d){var h=c.getLayer(e).geometrytype;l[d[h]]=L[h]}}var f=o.getSource().getGetFeatureInfoUrl(t,s,a,l);$.get(f).then(function(e){var t=new X2JS,n=t.xml2json(e);if(n.GetFeatureInfoResponse.Layer.Feature){var r=n.GetFeatureInfoResponse.Layer.Feature.Attribute,o={};_.forEach(r,function(e){o[e._name]=e._value}),i.resolve(o)}i.reject()}).fail(function(){i.reject()}).always(function(){n.popInteraction(),n._pickInteraction=null})},this.highlightGeometry=function(e,t){var i;e instanceof ol.geom.Geometry?i=e:(format=new ol.format.GeoJSON,i=format.readGeometry(e)),t.zoom&&this.viewer.fit(i);var n=t.duration||4e3;t.fromWGS84&&i.transform("EPSG:4326","EPSG:"+c.state.project.crs);var r=new ol.Feature({geometry:i}),o=new ol.source.Vector;o.addFeatures([r]);var s=new ol.layer.Vector({source:o,style:function(e){var t=[],i=e.getGeometry().getType();if("LineString"==i){var n=new ol.style.Style({stroke:new ol.style.Stroke({color:"rgb(255,255,0)",width:4})});t.push(n)}else if("Point"==i){var n=new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"rgb(255,255,0)"})}),zIndex:1/0});t.push(n)}return t}});s.setMap(this.viewer.map),setTimeout(function(){s.setMap(null)},n)},this.refreshMap=function(){_.forEach(this.mapLayers,function(e){e.getLayer().getSource().updateParams({time:Date.now()})})},o(this),this._setMapView=function(){var e=this.viewer.getBBOX(),t=this.viewer.getResolution(),i=this.viewer.getCenter();this.setMapView(e,t,i)}}var r=e("./utils").inherit,o=e("./utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/gui/gui"),l=e("./projectsregistry"),c=e("./projectservice").ProjectService,u=e("./projectservice").ProjectTypes,d=e("./projectservice").GeometryTypes,h=e("g3w-ol3/src/g3w.ol3").helpers,f=e("g3w-ol3/src/controls/resetcontrol"),p=e("g3w-ol3/src/controls/querycontrol"),g=e("g3w-ol3/src/controls/zoomboxcontrol"),v=e("g3w-ol3/src/interactions/pickcoordinatesinteraction"),y=e("./wmssinglelayer"),m=e("./wmsmultilayer"),b=e("./mapqueryservice"),w={};w[u.QDJANGO]={},w[u.QDJANGO][d.POINT]="FI_POINT_TOLERANCE",w[u.QDJANGO][d.LINESTRING]="FI_LINE_TOLERANCE",w[u.QDJANGO][d.POLYGON]="FI_POLYGON_TOLERANCE";var L={};L[d.POINT]=5,L[d.LINESTRING]=5,L[d.POLYGON]=5,r(n,s),t.exports=new n},{"./mapqueryservice":32,"./projectservice":36,"./projectsregistry":37,"./utils":40,"./wmsmultilayer":42,"./wmssinglelayer":43,"g3w-ol3/src/controls/querycontrol":17,"g3w-ol3/src/controls/resetcontrol":18,"g3w-ol3/src/controls/zoomboxcontrol":19,"g3w-ol3/src/g3w.ol3":20,"g3w-ol3/src/interactions/pickcoordinatesinteraction":21,"g3w/core/g3wobject":28,"g3w/gui/gui":55}],34:[function(e,t,i){function n(){this.id="plugin",this.tools=[]}var r=e("./utils").inherit,o=e("g3w/core/g3wobject");r(n,o);var s=n.prototype;s.providesTools=function(){return this.tools.length>0},s.getTools=function(){return this.tools},s.getActions=function(e){return e.actions},t.exports=n},{"./utils":40,"g3w/core/g3wobject":28}],35:[function(e,t,i){function n(){var e=this;this.config=null,this.plugins={},this.state={toolsproviders:[]},this.setters={setToolsProvider:function(t){e.state.toolsproviders.push(t)}},r(this),this.init=function(e){var t=this;this.config=e,_.forEach(e.plugins,function(e){t._setup(e)})},this.register=function(e){this.plugins[e.name]||this._setup(e)},this._setup=function(e){var t=this,i=this.config.configs[e.name];i&&(e.init(i),t.plugins[name]=e)},this.activate=function(e){var t=e.getTools();t.length&&a.registerToolsProvider(e)}}var r=e("./utils").base,o=e("./utils").inherit,s=e("g3w/core/g3wobject"),a=e("g3w/core/toolsservice");o(n,s),t.exports=new n},{"./utils":40,"g3w/core/g3wobject":28,"g3w/core/toolsservice":39}],36:[function(e,t,i){function n(){var e=this;this.config=null,this.layers={},this.state={project:null,baseLayers:[]},this.setters={setLayersVisible:function(t,i){_.forEach(t,function(t){e.layers[t.id].visible=i})},setBaseLayer:function(t){_.forEach(e.state.baseLayers,function(e){e.visible=e.id==t})}},this.init=function(e){this.config=e},this.makeLayersObj=function(t){function i(t){_.forIn(t,function(t,n){_.isNil(t.id)||(e.layers[t.id]=t),_.isNil(t.nodes)||i(t.nodes)})}this.layers={},i(t)},this.getCurrentProject=function(){return this.state.project},this.setProject=function(e,t){this.state.project=e,this.state.baseLayers=e.baseLayers,this.makeLayersObj(e.layerstree);var i="projectset";t&&t===!0&&(i="projectswitch"),this.emit(i)},this.switchProject=function(e){this.setProject(e,!0)},this.getLayer=function(e){return this.layers[e]},this.getLayers=function(){return this.layers},this.getLayerById=function(e){var t=null;return _.forEach(this.getLayers(),function(i){i.id==e&&(t=i)}),t},this.getLayerByName=function(e){var t=null;return _.forEach(this.getLayers(),function(i){i.name==e&&(t=i)}),t},this.getQueryableLayers=function(){var e=[];return _.forEach(this.getLayers(),function(t){a.isQueryable(t)&&e.push(t)}),e},this.getLayerAttributes=function(e){return this.layers[e].attributes},this.getLayerAttributeLabel=function(e,t){var i="";return _.forEach(this.layers[e].attributes,function(e){e.name==t&&(i=e.label)}),i},this.toggleLayer=function(t,i){var i=i||!t.visible;e.setLayersVisible([t],i)},this.toggleLayers=function(t,i){e.setLayersVisible(t,i)},this.getWmsUrl=function(){return this.config.getWmsUrl(this.state.project)},this.getLegendUrl=function(e){var t=this.getWmsUrl(this.state);return sep=t.indexOf("?")>-1?"&":"?",this.getWmsUrl(this.state)+sep+"SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&SLD_VERSION=1.1.0&FORMAT=image/png&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name},o(this)}var r=e("./utils").inherit,o=e("./utils").base,s=e("./g3wobject"),a=e("./layer.js"),l={QDJANGO:"qdjango",OGR:"ogr"},c={POINT:"Point",LINESTRING:"Line",POLYGON:"Polygon"};r(n,s),t.exports={ProjectService:new n,ProjectTypes:l,GeometryTypes:c}},{"./g3wobject":28,"./layer.js":31,"./utils":40}],37:[function(e,t,i){function n(){this.config=null,this.initialized=!1,this.setters={setCurrentProject:function(e){this.state.currentProject=e}},this.state={baseLayers:{},minScale:null,maxscale:null,projects:[],currentProject:null},o(this)}var r=e("./utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=(e("./utils").resolvedValue,e("./utils").rejectedValue),l=e("./projectservice").ProjectService;r(n,s);var c=n.prototype;c.init=function(e){return this.initialized?void 0:(this.initialized=!0,this.config=e,this.setupState(),l.init(e),this.setProject(e.initproject))},c.setupState=function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.config.projects.forEach(function(t){t.baseLayers=e.config.baselayers,t.minScale=e.config.minscale,t.maxScale=e.config.maxscale,t.crs=e.config.crs,e.state.projects.push(t)})},c.getCurrentProject=function(){return this.state.currentProject},c.setProject=function(e){var t=this;return this.getProject(e).then(function(e){l.setProject(e),t.setCurrentProject(e)})},c.switchProject=function(e){var t=this;return this.getProject(e).then(function(e){l.switchProject(e),t.setCurrentProject(e)})},c.buildProjectTree=function(e){function t(e){_.forIn(e,function(n,r){if(!_.isNil(n.id)){var o=_.merge(n,i[n.id]);e[parseInt(r)]=o}_.isNil(n.nodes)||(n.title=n.name,t(n.nodes))})}var i=_.keyBy(e.layers,"id"),n=_.cloneDeep(e.layerstree);t(n),e.layerstree=n},c.getProject=function(e){var t=this,i=$.Deferred(),n=null;if(this.state.projects.forEach(function(t){t.gid==e&&(n=t)}),!n)return a("Project doesn't exist");var r=!_.isNil(n.layers);return r?i.resolve(n):this.getProjectFullConfig(n).then(function(e){return n=_.merge(n,e),t.buildProjectTree(n),i.resolve(n)})},c.getProjectFullConfig=function(e){var t=$.Deferred(),i=this.config.getProjectConfigUrl(e);return $.get(i).done(function(e){t.resolve(e)}),t.promise()},t.exports=new n},{"./projectservice":36,"./utils":40,"g3w/core/g3wobject":28,"g3w/core/utils":40}],38:[function(e,t,i){var n=e("./utils").inherit,r=e("./utils").base,o=e("./utils").Base64,s=e("./g3wobject"),a=function(){var e=this;this._route="",this.setters={setRoute:function(e){this._route=e}},History.Adapter.bind(window,"statechange",function(){var t=History.getState(),i=t.hash;e.setRouteFromHash(i)}),r(this)};n(a,s);var l=a.prototype;l.initRoute=function(){var e=window.location.search;this.setRouteFromHash(e)},l["goto"]=function(e){var t=o.encode(e);History.pushState({path:e},null,"?p="+t)},l.setRouteFromHash=function(e){var t=this.getQueryParams(e).p,i=t?o.decode(t):"";this.setRoute(i)},l.slicePath=function(e){return e.split("?")[0].split("/")},l.sliceFirst=function(e){var t=e.split("?"),i=t[1],n=t[0].split("/"),r=n[0];return e=n.slice(1).join("/"),e=[e,i].join("?"),[r,e]},l.getQueryParams=function(e){var t={};try{var i=e.split("?")[1],n=i.split("&"),t={};_.forEach(n,function(e){var i=e.split("="),n=i[0],r=i[1];t[n]=r})}catch(r){}return t},l.getQueryString=function(e){return e.split("?")[1]},l.makeQueryString=function(e){},t.exports=new a},{"./g3wobject":28,"./utils":40}],39:[function(e,t,i){function n(){var e=this;this.config=null,this._actions={},this.state={tools:[]},this.init=function(e){this.config=e,this.setState()},this.setState=function(){this._mergeTools(this.config.tools)},this.registerToolsProvider=function(t){e._mergeTools(t.getTools()),e._addActions(t)},this.fireAction=function(e){var t=this._actions[e],i=this._actionMethod(e);t[i]()},this._actionMethod=function(e){var t=e.split(":");return t.pop()},this._mergeTools=function(t){e.state.tools=_.concat(e.state.tools,t)},this._addActions=function(t){_.forEach(t.getTools(),function(i){_.forEach(t.getActions(i),function(i){e._actions[i.id]=t})})}}var r=e("./utils").inherit,o=e("g3w/core/g3wobject");r(n,o),t.exports=new n},{"./utils":40,"g3w/core/g3wobject":28}],40:[function(e,t,i){function n(e,t,i){return"undefined"==typeof i||0===+i?Math[e](t):(t=+t,i=+i,isNaN(t)||"number"!=typeof i||i%1!==0?NaN:(t=t.toString().split("e"),t=Math[e](+(t[0]+"e"+(t[1]?+t[1]-i:-i))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+i:i))))}Math.round10||(Math.round10=function(e,t){return n("round",e,t)}),Math.floor10||(Math.floor10=function(e,t){return n("floor",e,t)}),Math.ceil10||(Math.ceil10=function(e,t){return n("ceil",e,t)}),String.prototype.hashCode=function(){var e,t,i,n=0;if(0===this.length)return n;for(e=0,i=this.length;i>e;e++)t=this.charCodeAt(e),n=(n<<5)-n+t,n|=0;return n};var r={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t,i,n,o,s,a,l,c="",u=0;for(e=r._utf8_encode(e);u<e.length;)t=e.charCodeAt(u++),i=e.charCodeAt(u++),n=e.charCodeAt(u++),o=t>>2,s=(3&t)<<4|i>>4,a=(15&i)<<2|n>>6,l=63&n,isNaN(i)?a=l=64:isNaN(n)&&(l=64),c=c+this._keyStr.charAt(o)+this._keyStr.charAt(s)+this._keyStr.charAt(a)+this._keyStr.charAt(l);return c},decode:function(e){var t,i,n,o,s,a,l,c="",u=0;for(e=e.replace(/[^A-Za-z0-9+\/=]/g,"");u<e.length;)o=this._keyStr.indexOf(e.charAt(u++)),s=this._keyStr.indexOf(e.charAt(u++)),a=this._keyStr.indexOf(e.charAt(u++)),l=this._keyStr.indexOf(e.charAt(u++)),t=o<<2|s>>4,i=(15&s)<<4|a>>2,n=(3&a)<<6|l,c+=String.fromCharCode(t),64!=a&&(c+=String.fromCharCode(i)),64!=l&&(c+=String.fromCharCode(n));return c=r._utf8_decode(c)},_utf8_encode:function(e){e=e.replace(/rn/g,"n");for(var t="",i=0;i<e.length;i++){var n=e.charCodeAt(i);128>n?t+=String.fromCharCode(n):n>127&&2048>n?(t+=String.fromCharCode(n>>6|192),t+=String.fromCharCode(63&n|128)):(t+=String.fromCharCode(n>>12|224),t+=String.fromCharCode(n>>6&63|128),t+=String.fromCharCode(63&n|128))}return t},_utf8_decode:function(e){for(var t="",i=0,n=c1=c2=0;i<e.length;)n=e.charCodeAt(i),128>n?(t+=String.fromCharCode(n),i++):n>191&&224>n?(c2=e.charCodeAt(i+1),t+=String.fromCharCode((31&n)<<6|63&c2),i+=2):(c2=e.charCodeAt(i+1),c3=e.charCodeAt(i+2),t+=String.fromCharCode((15&n)<<12|(63&c2)<<6|63&c3),i+=3);return t}},o={mixin:function(e,t){return o.merge(e.prototype,t)},mixininstance:function(e,t){var i=new t;o.merge(e,i),o.merge(e.prototype,t.prototype)},merge:function(e,t){var i;for(i in t)o.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function i(){}i.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new i,e.prototype.constructor=e},base:function(e,t,i){var n=arguments.callee.caller;if(n.superClass_)return n.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var r=Array.prototype.slice.call(arguments,2),o=!1,s=e.constructor;s;s=s.superClass_&&s.superClass_.constructor)if(s.prototype[t]===n)o=!0;else if(o)return s.prototype[t].apply(e,r);if(e[t]===n)return e.constructor.prototype[t].apply(e,r);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},truefnc:function(){return!0},falsefnc:function(){return!0},resolvedValue:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},rejectedValue:function(e){var t=$.Deferred();return t.reject(e),t.promise()},Base64:r};t.exports=o},{}],41:[function(e,t,i){function n(e){var e=e||{};this.geometrytype=e.geometrytype||null,this.format=e.format||null,this.crs=e.crs||null,this.id=e.id||null,this.name=e.name||"",this.pk=e.pk||"id",this._olSource=new ol.source.Vector({features:new ol.Collection}),this._olLayer=new ol.layer.Vector({name:this.name,source:this._olSource}),this._PKinAttributes=!1,this._featuresFilter=null,this._fields=null,this.lazyRelations=!0,this._relations=null}var r=e("g3w/core/utils").inherit,o=(e("g3w/core/utils").truefnc,e("g3w/core/utils").resolvedValue),s=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject"));r(n,s),t.exports=n;var a=n.prototype;a.setData=function(e){var t,i=this;if(this.format){switch(this.format){case"GeoJSON":var n=new ol.format.GeoJSON({defaultDataProjection:this.crs,geometryName:"geometry"});t=n.readFeatures(e)}if(t&&t.length){if(!_.isNull(this._featuresFilter))var t=_.map(t,function(e){return i._featuresFilter(e)});var r=this.getFeatureIds(),o=_.filter(t,function(e){return!_.includes(r,e.getId())});this._olSource.addFeatures(o);var s=this.getSource().getFeatures()[0].getProperties();this._PKinAttributes=!!_.get(s,this.pk)}}else console.log("VectorLayer format not defined")},a.setFeatureData=function(e,t,i,n){var r=this.getFeatureById(e);if(t&&r.setId(t),i&&r.setGeometry(i),n){var o=r.getProperties(),s=_.assign(o,n);r.setProperties(s)}return r},a.addFeatures=function(e){this.getSource().addFeatures(e)},a.setFeaturesFilter=function(e){this._featuresFilter=e},a.setFields=function(e){this._fields=e},a.setPkField=function(){var e=this,t=!1;_.forEach(this._fields,function(i){i.name==e.pk&&(t=!0)}),t||this._fields},a.getFeatures=function(){return this.getSource().getFeatures()},a.getFeatureIds=function(){var e=_.map(this.getSource().getFeatures(),function(e){return e.getId()});return e},a.getFields=function(){return _.cloneDeep(this._fields)},a.getFieldsNames=function(){return _.map(this._fields,function(e){return e.name})},a.getFieldsWithAttributes=function(e){var t,i,n=this,r=_.cloneDeep(this._fields);return e instanceof ol.Feature?t=e:e&&(t=this.getFeatureById(e)),t&&(i=t.getProperties()),_.forEach(r,function(e){t?this._PKinAttributes||e.name!=n.pk?e.value=i[e.name]:e.value=t.getId():e.value=null}),r},a.setRelations=function(e){_.forEach(e,function(e,t){e.name=t}),this._relations=e},a.getRelations=function(){return this._relations},a.hasRelations=function(){return!_.isNull(this._relations)},a.getRelationsNames=function(){return _.keys(this._relations)},a.getRelationsFksKeys=function(){var e=[];return _.forEach(this._relations,function(t){e.push(t.fk)}),e},a.getRelationFieldsNames=function(e){var t=this._relations[e];return t?_.map(t,function(e){return e.name}):null},a.getRelationsWithAttributes=function(e){var t=_.cloneDeep(this._relations);if(!e||!this.getFeatureById(e))return _.forEach(t,function(e,t){_.forEach(e.fields,function(e){e.value=null})}),o(t);if(this.lazyRelations){var i=$.Deferred(),n=this.getFeatureById(e).getProperties(),r={};return _.forEach(t,function(e,t){e.url;_.forEach(e.fk,function(e){r[e]=n[e]})}),this.getRelationsWithAttributesFromFks(r).then(function(e){i.resolve(e)}).fail(function(){i.reject()}),i.promise()}},a.getRelationsWithAttributesFromFks=function(e){var t=_.cloneDeep(this._relations),i=[];return _.forEach(t,function(t,n){var r=t.url,o=[];_.forEach(t.fk,function(t){var i=e[t];o.push(t+"="+i)});var s=_.join(o,"&");r+="?"+s,i.push($.get(r).then(function(e){_.forEach(t.fields,function(t){t.value=e[0][t.name]})}))}),$.when.apply(this,i).then(function(){return t})},a.setStyle=function(e){this._olLayer.setStyle(e)},a.getLayer=function(){return this._olLayer},a.getSource=function(){return this._olLayer.getSource()},a.getFeatureById=function(e){return this._olLayer.getSource().getFeatureById(e)},a.clear=function(){this.getSource().clear()},a.addToMap=function(e){e.addLayer(this._olLayer)},a.featureHasRelationsFksWithValues=function(e){var t=e.getProperties(),i=this.getRelationsFksKeys();return _.every(i,function(e){var i=t[e];return!_.isNil(i)&&""!=i})},a.getRelationsFksWithValuesForFeature=function(e){var t=e.getProperties(),i={},n=this.getRelationsFksKeys();return _.forEach(n,function(e){i[e]=t[e]}),i}},{"g3w/core/g3wobject":28,"g3w/core/utils":40}],42:[function(e,t,i){
function n(e,t){o(this,e);this._olLayer=null,this.layers=[],this.extraParams=t,this._olLayer=null}var r=e("./utils").inherit,o=e("./utils").base,s=e("./layer"),a=e("g3w-ol3/src/layers/rasters");r(n,s);var l=n.prototype;l.getLayer=function(){var e=this._olLayer;return e||(e=this._olLayer=this._makeOlLayer()),e},l.getLayerConfigs=function(){return this.layers},l.getSource=function(){return this._olLayer.getSource()},l.getId=function(){return this.id},l._makeOlLayer=function(){var e=this,t={url:this.config.defaultUrl,id:this.config.id},i=new a.WMSLayer(t,this.extraParams);return i.getSource().on("imageloadstart",function(){e.emit("loadstart")}),i.getSource().on("imageloadend",function(){e.emit("loadend")}),i},l.addLayer=function(e){this.layers.push(e)},l.toggleLayer=function(e){_.forEach(this.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),this._updateLayers()},l.update=function(e){this._updateLayers(e)},l.isVisible=function(){return this._getVisibleLayers().length>0},l._getVisibleLayers=function(){var e=[];return _.forEach(this.layers,function(t){t.visible&&e.push(t)}),e},l._updateLayers=function(e){var t=this._getVisibleLayers();if(t.length>0){var i={LAYERS:_.join(_.map(t,"name"),",")};e&&(i=_.assign(e,i)),this._olLayer.setVisible(!0),this._olLayer.getSource().updateParams(i)}else this._olLayer.setVisible(!1)},l.getQueryUrl=function(){var e=this.layers[0];return e.infourl&&""!=e.infourl?e.infourl:this.config.defaultUrl},l.getQueryLayers=function(){},t.exports=n},{"./layer":31,"./utils":40,"g3w-ol3/src/layers/rasters":24}],43:[function(e,t,i){function n(e,t){o(this,e);this.LAYERTYPE={LAYER:"layer",MULTILAYER:"multilayer"},this._olLayer=null,this.layer=null,this.extraParams=t}var r=e("./utils").inherit,o=e("./utils").base,s=e("./layer"),a=e("g3w-ol3/src/layers/rasters");r(n,s);var l=n.prototype;l.getLayer=function(){var e=this._olLayer;return e||(e=this._olLayer=this._makeOlLayer()),e},l.getLayerConfigs=function(){return[this.layer]},l.getSource=function(){return this._olLayer.getSource()},l.getId=function(){return this.id},l._makeOlLayer=function(){var e=this,t={url:this.config.defaultUrl,id:this.config.id,layers:this.layer.name,maxResolution:this.layer.maxresolution};this.layer.source&&"wms"==this.layer.source.type&&(t.url=this.layer.source.url,t.layers=this.layer.source.layers);var i;i=this.config.tiled?a.TiledWMSLayer:a.WMSLayer;var n=new i(t,this.extraParams);return n.getSource().on("imageloadstart",function(){e.emit("loadstart")}),n.getSource().on("imageloadend",function(){e.emit("loadend")}),n},l.addLayer=function(e){this.layer=e},l.toggleLayer=function(e){var t=this._olLayer.getVisible();this._olLayer.setVisible(!t)},l.update=function(e){var t=this.getLayer();e&&t.getSource().updateParams(e),t.setVisible(this.layer.visible)},l.isVisible=function(){return this.layer.visible},l.getQueryUrl=function(){return this.layer.infourl&&""!=this.layer.infourl?this.layer.infourl:this.config.defaultUrl},l.getQueryLayers=function(){var e=[];return s.isQueryable(this.layer)&&e.push({layerName:this.layer.name,queryLayerName:s.getQueryLayerName(this.layer)}),e},t.exports=n},{"./layer":31,"./utils":40,"g3w-ol3/src/layers/rasters":24}],44:[function(e,t,i){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree"></a></li>\n      <li v-if="hasBaseLayers" role="presentation"><a href="#baselayers" aria-controls="baselayers" role="tab" data-toggle="tab" data-i18n="baselayers"></a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend"></a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tristate-tree :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tristate-tree>\n        </ul>\n      </div>\n      <div v-if="hasBaseLayers" role="tabpanel" class="tab-pane baselayers" id="baselayers">\n        <form>\n          <ul>\n            <li v-if="!baselayer.fixed" v-for="baselayer in baselayers">\n              <div class="radio">\n                <label><input type="radio" name="baselayer" v-checked="baselayer.visible" @click="setBaseLayer(baselayer.id)">{{ baselayer.title }}</label>\n              </div>\n            </li>\n          </ul>\n        </form>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],45:[function(e,t,i){var n=(e("i18n/i18n.service").t,e("g3w/gui/gui"),e("g3w/core/projectsregistry"),e("g3w/core/projectservice").ProjectService);Vue.component("g3w-catalog",{template:e("./catalog.html"),data:function(){return{state:n.state}},computed:{layerstree:function(){return this.state.project.layerstree},baselayers:function(){return this.state.baseLayers},hasBaseLayers:function(){return this.state.baseLayers.length>0}},methods:{setBaseLayer:function(e){n.setBaseLayer(e)}},ready:function(){}}),Vue.component("tristate-tree",{template:e("./tristate-tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e},isHidden:function(){return this.layerstree.hidden&&this.layerstree.hidden===!0}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,n.toggleLayers(this.layerstree.nodes,this.parentChecked)):n.toggleLayer(this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(i){_.forIn(i,function(i,n){!_.isNil(i.id)&&i.visible&&t.push(i),_.isNil(i.nodes)||e(i.nodes)})}var t=[],i=this.layerstree;return e(i),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return n.getLegendUrl(this.layer)}},methods:{openform:function(){}}})},{"./catalog.html":44,"./legend.html":46,"./legend_item.html":47,"./tristate-tree.html":48,"g3w/core/projectservice":36,"g3w/core/projectsregistry":37,"g3w/gui/gui":55,"i18n/i18n.service":68}],46:[function(e,t,i){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],47:[function(e,t,i){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],48:[function(e,t,i){t.exports='<li v-if="!isHidden" class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\',layerstree.disabled  ? \'disabled\': \'\']" class="fa" style="cursor:default"></span>\n  <span :class="{bold: isFolder, disabled: layerstree.disabled}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tristate-tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n'},{}],49:[function(e,t,i){function n(e){this.panelComponent=null,this.options=e||{},this.id=e.id,this.name=e.name,this.dataid=e.dataid,this.pk=e.pk||null,this.isnew=!_.isNil(e.isnew)&&_.isBoolean(e.isnew)?e.isnew:!0,this.state={fields:e.fields,relations:e.relations},this._formPanel=e.formPanel||l,this._defaults=e.defaults||c.defaults}var r=e("g3w/core/utils").resolvedValue,o=(e("g3w/core/utils").rejectedValue,e("g3w/gui/gui")),s=e("g3w/core/projectservice").ProjectService,a=e("g3w/core/mapservice");Vue.filter("startcase",function(e){return _.startCase(e)}),Vue.validator("email",function(e){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)}),Vue.validator("integer",function(e){return/^(-?[1-9]\d*|0)$/.test(e)});var l=Vue.extend({template:e("./formpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),o.closeForm()},btnEnabled:function(e){return"save"!=e.type||"save"==e.type&&this.$validation.valid},hasFieldsRequired:function(){return this.$options.form._hasFieldsRequired()},isEditable:function(e){return this.$options.form._isEditable(e)},isSimple:function(e){return this.$options.form._isSimple(e)},isSelect:function(e){return this.$options.form._isSelect(e)},isLayerPicker:function(e){return this.$options.form._isLayerPicker(e)},layerPickerPlaceHolder:function(e){return this.$options.form._getlayerPickerLayerName(e.input.options.layerid)},pickLayer:function(e){this.$options.form._pickLayer(e)},isVisible:function(e){return this.$options.form._isVisible(e)},showRelation:function(e){return this.$options.form._shouldShowRelation(e)}},computed:{isValid:function(e){return this.$validate(e.name)}}}),c={};c.STRING="string",c.INTEGER="integer",c.FLOAT="float",c.defaults={},c.defaults[c.STRING]="",c.defaults[c.INTEGER]=0,c.defaults[c.FLOAT]=0,c.simpleFieldTypes=[c.STRING,c.INTEGER,c.FLOAT],c.SELECT="select",c.LAYERPICKER="layerpicker",c.specialInputs=[c.SELECT,c.LAYERPICKER];var u=n.prototype;u.onShow=function(e){this._setupFields();var t=this._setupPanel();return this._mountPanel(t,e),r(!0)},u.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,r(!0)},u._isNew=function(){return this.isnew},u._hasFieldsRequired=function(){var e=_.some(this.state.fields,function(e){return e.validate&&e.validate.required}),t=_.some(this.state.relations,function(e){return e.validate&&e.validate.required});return e||t},u._isVisible=function(e){return!(!e.editable&&(""==e.value||_.isNull(e.value)))},u._isEditable=function(e){return e.editable},u._isSimple=function(e){return _.includes(c.specialInputs,e.input.type)?!1:_.includes(c.simpleFieldTypes,e.type)},u._isSelect=function(e){return _.includes(c.specialInputs,e.input.type)&&e.input.type==c.SELECT},u._isLayerPicker=function(e){return _.includes(c.specialInputs,e.input.type)&&e.input.type==c.LAYERPICKER},u._pickLayer=function(e){var t=$.Deferred();o.setModal(!1);var i=e.input.options.layerid,n=e.input.options.field,r=s.getLayerAttributeLabel(i,e.input.options.field);return a.getFeatureInfo(i).then(function(i){var o=i[n]?i[n]:i[r];e.value=o,t.resolve(i)}).always(function(){o.setModal(!0),t.reject()}),t.promise()},u._getDefaultValue=function(e){var t=null;return e.input&&e.input.options&&e.input.options["default"]?t=e.input.options["default"]:this._isSelect(e)&&(t=e.input.options.values[0].key),t},u._getlayerPickerLayerName=function(e){var t=s.getLayer(e);return t?t.name:""},u._shouldShowRelation=function(e){return!0},u._setupFields=function(){var e=this,t=_.filter(this.state.fields,function(t){return e.pk&&null==t.value?t.name!=e.pk:!0});if(_.forEach(t,function(t){if(_.isNil(t.value)){var i=e._getDefaultValue(t);i&&(t.value=i)}}),this.state.relations){var i=this.state.relations;_.forEach(i,function(t){_.forEach(t.fields,function(t){if(_.isNil(t.value)){var i=e._getDefaultValue(t);i&&(t.value=i)}})})}},u._setupPanel=function(){var e=this.panelComponent=new this._formPanel({form:this});return this.options.buttons&&(e.buttons=this.options.buttons),e.state=this.state,e},u._mountPanel=function(e,t){e.$mount().$appendTo(t)},u._getField=function(e){var t=null;return _.forEach(this.state.fields,function(i){i.name==e&&(t=i)}),t},u._getRelationField=function(e,t){var i=null;return _.forEach(this.state.relations,function(n,r){t==r&&_.forEach(n.fields,function(t){t.name==e&&(i=t)})}),i},t.exports={Form:n,FormPanel:l}},{"./formpanel.html":50,"g3w/core/mapservice":33,"g3w/core/projectservice":36,"g3w/core/utils":40,"g3w/gui/gui":55}],50:[function(e,t,i){t.exports='<div>\n  <validator name="validation">\n    <form novalidate class="form-horizontal g3w-form" :class="[$validation[relfield.name].invalid ? \'has-error\': \'\']">\n      <template v-for="field in state.fields">\n        <div v-if="isVisible(field)" class="form-group has-feedback">\n          <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}<span v-if="field.validate && field.validate.required">*</span></label>\n          <div class="col-sm-8">\n            <input v-if="isSimple(field)" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n            <select v-if="isSelect(field)" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n              <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n            </select>\n            <div v-if="isLayerPicker(field)">\n              <input class="form-control" @click="pickLayer(field)" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" onfocus="blur()" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\'" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n              <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n            </div>\n          </div>\n        </div>\n      </template>\n      <div v-for="relation in state.relations">\n        <div v-if="showRelation(relation)" transition="expand">\n          <div class="g3w-relationname">{{ relation.name | startcase }}</div>\n          <template v-for="relfield in relation.fields">\n            <div v-if="isVisible(relfield)" class="form-group has-feedback" :class="[$validation[relfield.name].invalid ? \'has-error\': \'\']">\n              <label :for="relfield.name" class="col-sm-4 control-label">{{relfield.label}}<span v-if="relfield.validate && relfield.validate.required">*</span></label>\n              <div class="col-sm-8">\n                <input v-if="isSimple(relfield)" :field="relfield.name" v-validate="relfield.validate" v-disabled="!isEditable(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n                <select v-if="isSelect(relfield)" :field="relfield.name" v-validate="relfield.validate" v-disabled="!isEditable(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n                  <option v-for="relvalue in relfield.input.options.values" value="{{ relvalue.key }}">{{ relvalue.value }}</option>\n                </select>\n                <div v-if="isLayerPicker(relfield)">\n                  <input class="form-control" @click="pickLayer(relfield)" :field="relfield.name" v-validate="relfield.validate" v-disabled="!isEditable(relfield)" onfocus="blur()" style="cursor:pointer" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(relfield) }}\'" v-model="relfield.value" :id="relfield.name" :placeholder="\'[\'+layerPickerPlaceHolder(relfield)+\']\'">\n                  <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n                </div>\n              </div>\n            </div>\n          </template>\n        </div>\n      </div>\n      <div class="form-group">\n        <div class="col-sm-offset-4 col-sm-8">\n          <div v-if="hasFieldsRequired" style="margin-bottom:10px">\n            <span>* Campi richiesti</span>\n          </div>\n          <span v-for="button in buttons">\n            <button class="btn " :class="[button.class]" @click.stop.prevent="exec(button.cbk)" v-disabled="!btnEnabled(button)">{{ button.title }}</button>\n          </span>\n        </div>\n      </div>\n    </form>\n  </validator>\n</div>\n'},{}],51:[function(e,t,i){t.exports='<form class="navbar-form" role="search" @submit.prevent>\n  <div class="input-group">\n    <input type="text" class="form-control" :placeholder="placeholder" v-model="query"  name="srch-term" id="srch-term">\n    <div class="input-group-btn">\n        <button class="btn btn-default" type="submit" @click="search"><i class="glyphicon glyphicon-search"></i></button>\n    </div>\n  </div>\n</form>\n'},{}],52:[function(e,t,i){var n=e("i18n/i18n.service").t,r=(e("g3w/gui/gui"),e("g3w/core/geocodingservice"));Vue.component("geocoder",{template:e("./geocoding.html"),props:["type"],data:function(){return{query:"",placeholder:n("street_search")}},methods:{search:function(e){e.preventDefault();var t=this.query;this.service.search(t)}},ready:function(){var e=this;this.service=r[this.type],this.service.on("results",function(){e.query=""})}})},{"./geocoding.html":51,"g3w/core/geocodingservice":29,"g3w/gui/gui":55,"i18n/i18n.service":68}],53:[function(e,t,i){t.exports='<div>\n  <ul>\n    <li v-for="item in state.list" @click="goto(item)" style="cursor:pointer">{{ item.display_name }}</li>\n  </ul>\n</div>\n'},{}],54:[function(e,t,i){var n=e("g3w/gui/gui"),r=e("g3w/core/mapservice"),o=Vue.extend({template:e("./listpanel.html"),methods:{"goto":function(e){var t=parseFloat(e.lon),i=parseFloat(e.lat);r.goToWGS84([t,i]);var o=e.geojson;r.highlightGeometry(o,4e3,!0),n.closeListing()}}});t.exports=o},{"./listpanel.html":53,"g3w/core/mapservice":33,"g3w/gui/gui":55}],55:[function(e,t,i){function n(){this.getResourcesUrl=noop,this.showForm=noop,this.closeForm=noop,this.showListing=noop,this.closeListing=noop,this.hideListing=noop,this.showPanel=noop,this.ready=function(){this.emit("guiready")},this.guiResized=function(){this.emit("guiresized")},this.showSpinner=noop,this.hideSpinner=noop,toastr.options.positionClass="toast-top-center",toastr.options.preventDuplicates=!0,this.notify=toastr,this.dialog=bootbox}noop=e("g3w/core/utils").noop;var r=e("g3w/core/utils").inherit,o=e("g3w/core/g3wobject");r(n,o),t.exports=new n},{"g3w/core/g3wobject":28,"g3w/core/utils":40}],56:[function(e,t,i){t.exports="<div>\n  Lista di oggetti\n</div>\n"},{}],57:[function(e,t,i){function n(e){this.panelComponent=null,this.options=e||{},this.id=e.id||null,this.name=e.name||null,this.state={list:e.list||[]},this._listPanelComponent=e.listPanelComponent||s}var r=e("g3w/core/utils").resolvedValue,o=(e("g3w/core/utils").rejectedValue,e("g3w/gui/gui")),s=(e("g3w/core/projectservice").ProjectService,e("g3w/core/mapservice"),Vue.extend({template:e("./listpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),o.closeForm()}}})),a=n.prototype;a.onShow=function(e){var t=this._setupPanel();return this._mountPanel(t,e),r(!0)},a.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,r(!0)},a._setupPanel=function(){var e=this.panelComponent=new this._listPanelComponent({panel:this});return e.state=this.state,e},a._mountPanel=function(e,t){e.$mount().$appendTo(t)},t.exports={ListPanelComponent:s,ListPanel:n}},{"./listpanel.html":56,"g3w/core/mapservice":33,"g3w/core/projectservice":36,"g3w/core/utils":40,"g3w/gui/gui":55}],58:[function(e,t,i){t.exports='<div id="map" style="width:100%;height:100%">\n</div>\n'},{}],59:[function(e,t,i){function n(){var e=$(".navbar").innerHeight(),t=0;return $(".bottombar").is(":visible")&&(t=$(".bottombar").innerHeight()),$(window).innerHeight()-e-t}function r(){var e=n();$("#map").height(e),c.viewer.map.updateSize()}function o(){var e=$(".main-sidebar").offset().left,t=$(".main-sidebar").innerWidth(),i=t+e;$("#map").width($(window).innerWidth()-i),c.viewer.map.updateSize()}function s(){var e,t=this;this.getViewComponent=function(){return e||(e=new u),e},this.show=function(e){var t=l.sliceFirst(e)[0];if("map"==t){var i=l.getQueryParams(e);if(i.point){var n=i.point.split(",");2==n.length&&(c.viewer.goToRes(n,.5),c.highlightGeometry(new ol.geom.Point(n),1e4))}}},l.onafter("setRoute",function(e){t.show(e)})}var a=(e("i18n/i18n.service").t,e("g3w/gui/gui.js")),l=e("g3w/core/router"),c=e("g3w/core/mapservice"),u=(e("g3w-ol3/src/g3w.ol3").helpers,Vue.component("g3w-map",{template:e("./map.html"),ready:function(){var e=this;c.showViewer(this.$el.id),c.onafter("setupViewer",function(){c.showViewer(e.$el.id)}),a.on("guiready",function(){function e(){i===!0?(i=!1,t=!0,r(),o(),requestAnimationFrame(e)):t=!1}r(),$(".main-sidebar").on("webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd",function(){$(this).trigger("trans-end"),o()});var t=!1,i=!1;a.on("guiresized",function(){i=!0,e()}),$(window).resize(function(){t===!1&&(i=!0,e())})})}}));t.exports=new s},{"./map.html":58,"g3w-ol3/src/g3w.ol3":20,"g3w/core/mapservice":33,"g3w/core/router":38,"g3w/gui/gui.js":55,"i18n/i18n.service":68}],60:[function(e,t,i){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],61:[function(e,t,i){e("i18n/i18n.service").t;Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":60,"i18n/i18n.service":68}],62:[function(e,t,i){t.exports='<div class="g3w-tools">\n  <ul>\n    <li v-for="tool in tools">\n      <div data-toggle="collapse" data-target="#iternet-tools" class="tool-header">\n        <span style="">{{ tool.name }}</span>\n      </div>\n      <div id="iternet-tools" class="tool-box collapse">\n        <template v-for="action in tool.actions">\n          <i class="glyphicon glyphicon-cog"></i>\n          <span @click="fireAction(action.id)">{{ action.name }}</span>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],63:[function(e,t,i){var n=(e("i18n/i18n.service").t,e("g3w/core/toolsservice"));Vue.component("g3w-tools",{template:e("./tools.html"),data:function(){return{tools:n.state.tools}},methods:{fireAction:function(e){n.fireAction(e)}}})},{"./tools.html":62,"g3w/core/toolsservice":39,"i18n/i18n.service":68}],64:[function(e,t,i){t.exports='<div id="viewport" class="viewport"></div>\n'},{}],65:[function(e,t,i){Vue.component("viewport",{template:e("./viewport.html")});var n=function(){var e="#viewport";this.init=function(e){},this.setView=function(t){t.$mount().$appendTo(e)}};t.exports=new n},{"./viewport.html":64}],66:[function(e,t,i){Vue.directive("disabled",function(e){e?this.el.setAttribute("disabled","disabled"):this.el.removeAttribute("disabled")}),Vue.directive("checked",function(e){e?this.el.setAttribute("checked","checked"):this.el.removeAttribute("checked")}),Vue.directive("selected-first",function(e){0==e?this.el.setAttribute("selected",""):this.el.removeAttribute("selected")})},{}],67:[function(e,t,i){var n={methods:{isMobile:function(){return isMobile.any}}};t.exports={isMobileMixin:n}},{}],68:[function(e,t,i){function n(e){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e.resources}),jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0})}var r=function(e){var t=i18next.t(e);return t};t.exports={init:n,t:r}},{}],69:[function(e,t,i){function n(e){this._editor=e,this._origVectorLayer=new ol.layer.Vector({source:new ol.source.Vector}),this._cloneLayer(),this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/g3wobject");r(n,o),t.exports=n;var s=n.prototype;s.commit=function(){var e=this._editor.getEditVectorLayer().getFeatures();this._editor.getVectorLayer().addFeatures(e),this._editor.getEditVectorLayer().clear(),this._clearBuffers(),this._cloneLayer()},s.undoAll=function(){this._resetVectorLayer(),this._clearBuffers()},s.destroy=function(){this._clearBuffers()},s.generateId=function(){return this._editor.generateId()},s.addFeature=function(e){e.getId()||e.setId(this.generateId()),this._addEditToGeometryBuffer(e,"add"),console.log("Inserita nuova feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.updateFeature=function(e){this._addEditToGeometryBuffer(e,"update"),console.log("Modificata feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.deleteFeature=function(e){this._addEditToGeometryBuffer(e,"delete"),console.log("Rimossa feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.updateAttributes=function(e,t){e.getId()||e.setId(this.generateId()),this._addEditToAttributesBuffer(e,t),console.log("Modificati attributi feature: (ID: "+e.getId()+")")},s.getFeatureAttributes=function(e){return this._attributesBuffer[e]?this._attributesBuffer[e].slice(-1)[0]:null},s.areFeatureAttributesEdited=function(e){return this._attributesBuffer[e]?this._attributesBuffer[e].length>-1:!1},s.getRelationsAttributes=function(e){return this._relationsAttributesBuffer[e].slice(-1)[0]},s.areFeatureRelationsEdited=function(e){return this._relationsAttributesBuffer[e]?this._relationsAttributesBuffer[e].length>-1:!1},s.collectFeatureIds=function(){var e=this._geometriesBuffer,t=this._attributesBuffer,i=[];return i=_.concat(i,_.keys(e)),i=_.concat(i,_.keys(t)),_.uniq(i)},s.collectFeatures=function(e,t){var i,n=this,t=(this._geometriesBuffer,this._attributesBuffer,t||!1),r=new ol.format.GeoJSON,o=this.collectFeatureIds();i="new"==e?n._editor.getEditVectorLayer():n._editor.getVectorLayer();var s=[];return _.forEach(o,function(o){var a=i.getFeatureById(o),l=n._isNewFeature(o),c="new"==e&&l&&a,u="updated"==e&&!l&&a,d="deleted"==e&&!l&&!a;c||u?(t&&(a=r.writeFeatureObject(a)),s.push(a)):d&&s.push(o)}),s},s.createFeature=function(e,t,i){var n=new ol.Feature;return n.setId(e),n.setGeometry(t),n.setProperties(i),n},s.collectRelationsAttributes=function(){var e={};return _.forEach(this._relationsAttributesBuffer,function(t,i){lastRelationsAttributes=t[t.length-1],e[i]=lastRelationsAttributes}),e},s._addEditToGeometryBuffer=function(e,t){var i=this._geometriesBuffer,n=e.getId(),r=e.getGeometry();if("delete"==t){r=null;var o=this._isNewFeature(n)?this._editor._editVectorLayer:this._editor._vectorLayer;o.getSource().removeFeature(e)}_.has(i,n)||(i[n]=[]),i[n].push(r),this._setDirty()},s._addEditToAttributesBuffer=function(e,t){var i=e.getId(),n=e.getProperties(),r=this._attributesBuffer;_.has(r,i)||(r[i]=[]),r[i].push(n),t&&(_.has(this._relationsAttributesBuffer,i)||(this._relationsAttributesBuffer[i]=[]),this._relationsAttributesBuffer[i].push(t)),this._setDirty()},s._isNewFeature=function(e){return this._editor.isNewFeature(e)},s._setDirty=function(){this._editor._setDirty()},s._resetVectorLayer=function(){this._editor.vectoLayer=this._origVectorLayer,this._origVectorLayer.getSource().clear()},s._clearBuffers=function(){this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={},this._editor._setDirty(!1)},s._cloneLayer=function(){var e=[];this._editor._vectorLayer.getSource().forEachFeature(function(t){e.push(t.clone())},this),this._origVectorLayer.getSource().addFeatures(e)}},{"g3w/core/g3wobject":28,"g3w/core/utils":40}],70:[function(e,t,i){function n(e){this._vectorLayer=null,this._editVectorLayer=null,this._editBuffer=null,this._activeTool=null,this._dirty=!1,this._newPrefix="_new_",this._withFeatureLocks=!1,this._featureLocks=null,this._started=!1,this._setterslisteners={before:{},after:{}},this._geometrytypes=["Point","LineString","MultiLineString"],this._toolsForGeometryTypes={Point:{addfeature:u,movefeature:d,deletefeature:f,editattributes:p},LineString:{addfeature:u,modifyvertex:h,movefeature:d,deletefeature:f,editattributes:p,cutline:g}},this._activeTool=new function(){this.type=null,this.instance=null,this.setTool=function(e,t){this.type=e,this.instance=t},this.getType=function(){return this.type},this.getTool=function(){return this.instance},this.clear=function(){this.type=null,this.instance=null}},this._tools={},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/utils").resolvedValue,a=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject")),l=e("g3w/core/mapservice"),c=e("g3w/core/vectorlayer"),u=e("./tools/addfeaturetool"),d=e("./tools/movepointtool"),h=e("./tools/modifyfeaturetool"),f=e("./tools/deletefeaturetool"),p=e("./tools/pickfeaturetool"),g=e("./tools/cutlinetool"),v=e("./editbuffer");r(n,a),t.exports=n;var y=n.prototype;y.setVectorLayer=function(e){var t=e.geometrytype;if(!t||!this._isCompatibleType(t))throw Error("Vector geometry type "+t+" is not valid for editing");this._setToolsForVectorType(t),this._vectorLayer=e},y.start=function(){var e=!1;return this._vectorLayer&&(this.stop(),this._editVectorLayer=new c({name:"editvector",geometrytype:this._vectorLayer.geometrytype}),l.viewer.map.addLayer(this._editVectorLayer.getLayer()),this._editBuffer=new v(this),this._setStarted(!0),e=!0),e},y.stop=function(){return this.isStarted()?this.stopTool()?(this._editBuffer.destroy(),this._editBuffer=null,this.removeAllListeners(),l.viewer.removeLayerByName(this._editVectorLayer.name),this._setStarted(!1),!0):!1:!0},y.setTool=function(e,t){if(!this.stopTool())return!1;var i=this._tools[e];if(i){var n=new i(this,t);return this._activeTool.setTool(e,n),this._setToolSettersListeners(n,this._setterslisteners),n.run(),!0}},y.stopTool=function(){return this._activeTool.instance&&!this._activeTool.instance.stop()?!1:(this._activeTool.clear(),!0)},y.getActiveTool=function(){return this._activeTool},y.isStarted=function(){return this._started},y.hasActiveTool=function(){return!_.isNull(this._activeTool.instance)},y.isToolActive=function(e){return this._activeTool.toolType?this._activeTool.toolType==e:!1},y.generateId=function(){return this._editBuffer.generateId()},y.commit=function(e){this._editBuffer.commit(e)},y.undoAll=function(){this._editBuffer.undoAll()},y.setFeatureLocks=function(e){this._withFeatureLocks=!0,this._featureLocks=e},y.getFeatureLocks=function(e){return this._featureLocks},y.getFeatureLockIds=function(){return _.map(this._featureLocks,function(e){return e.lockid})},y.getFeatureLocksLockIds=function(e){var e=e||this._featureLocks;return _.map(e,function(e){return e.lockid})},y.getFeatureLocksFeatureIds=function(e){var e=e||this._featureLocks;return _.map(e,function(e){return e.featureid})},y.getFeatureLockIdsForFeatureIds=function(e){var t=_.filter(this._featureLocks,function(t){return _.includes(e,t.featureid)});return this.getFeatureLocksLockIds(t)},y.getEditedFeatures=function(){var e=this._editBuffer.collectFeatureIds(),t=this.getFeatureLockIdsForFeatureIds(e);return{add:this._editBuffer.collectFeatures("new",!0),update:this._editBuffer.collectFeatures("updated",!0),"delete":this._editBuffer.collectFeatures("deleted",!0),relationsattributes:this._editBuffer.collectRelationsAttributes(),
lockids:t}},y.setFieldsWithAttributes=function(e,t,i){var n={};_.forEach(t,function(e){n[e.name]=e.value});var r=null;if(i){var r={};_.forEach(i,function(e,t){var i={};_.forEach(e.fields,function(e){i[e.name]=e.value}),r[t]=i})}e.setProperties(n),this._editBuffer.updateAttributes(e,r)},y.setAttributes=function(e,t){e.setProperties(t),this._editBuffer.updateAttributes(e)},y.getRelationsWithAttributes=function(e){var t=e.getId();if(this._vectorLayer.hasRelations()){var i;if(t)if(this._vectorLayer.getFeatureById(t)){var n=this._editBuffer.areFeatureRelationsEdited(t);if(n){var r=this._vectorLayer.getRelations(),o=this._editBuffer.getRelationsAttributes(t);_.forEach(o,function(e,t){_.forEach(r[t].fields,function(e){e.value=o[t][e.name]})}),i=s(r)}else i=this._vectorLayer.getRelationsWithAttributes(t)}else if(this._vectorLayer.featureHasRelationsFksWithValues(e)){var a=this._vectorLayer.getRelationsFksWithValuesForFeature(e);i=this._vectorLayer.getRelationsWithAttributesFromFks(a)}else i=this._vectorLayer.getRelationsWithAttributes();else i=this._vectorLayer.getRelationsWithAttributes()}else i=s(null);return i},y.getField=function(e,t){var t=t||this.getVectorLayer().getFieldsWithAttributes(),i=null;return _.forEach(t,function(t){t.name==e&&(i=t)}),i},y.isDirty=function(){return this._dirty},y.onafter=function(e,t){this._onaftertoolaction(e,t)},y.onbefore=function(e,t){this._onbeforetoolaction(e,t,!1)},y.onbeforeasync=function(e,t){this._onbeforetoolaction(e,t,!0)},y.addFeature=function(e){this._editBuffer.addFeature(e)},y.updateFeature=function(e){this._editBuffer.updateFeature(e)},y.deleteFeature=function(e){this._editBuffer.deleteFeature(e)},y.getVectorLayer=function(){return this._vectorLayer},y.getEditVectorLayer=function(){return this._editVectorLayer},y.generateId=function(){return this._newPrefix+Date.now()},y.isNewFeature=function(e){return e?0==e.toString().indexOf(this._newPrefix):!0},y._isCompatibleType=function(e){return this._geometrytypes.indexOf(e)>-1},y._setToolsForVectorType=function(e){var t=this,i=this._toolsForGeometryTypes[e];_.forEach(i,function(e,i){t._tools[i]=e})},y._onaftertoolaction=function(e,t){_.get(this._setterslisteners.after,e)||(this._setterslisteners.after[e]=[]),this._setterslisteners.after[e].push({fnc:t})},y._onbeforetoolaction=function(e,t,i){_.get(this._setterslisteners.before,e)||(this._setterslisteners.before[e]=[]),this._setterslisteners.before[e].push({fnc:t,how:i?"async":"sync"})},y._setToolSettersListeners=function(e,t){_.forEach(t.before,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){"sync"==t.how?e.onbefore(i,t.fnc):e.onbeforeasync(i,t.fnc)})}),_.forEach(t.after,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){e.onafter(i,t.fnc)})})},y._setStarted=function(e){this._started=e},y._setDirty=function(e){_.isNil(e)?this._dirty=!0:this._dirty=e,this.emit("dirty",this._dirty)}},{"./editbuffer":69,"./tools/addfeaturetool":71,"./tools/cutlinetool":72,"./tools/deletefeaturetool":74,"./tools/modifyfeaturetool":75,"./tools/movepointtool":76,"./tools/pickfeaturetool":77,"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40,"g3w/core/vectorlayer":41}],71:[function(e,t,i){function n(e,t){var t=t||{};this._running=!1,this._busy=!1,this.editor=e,this.source=e.getEditVectorLayer().getLayer().getSource(),this.isPausable=!0,this.drawInteraction=null,this._snap=t.snap||null,this._snapInteraction=null,this._finishCondition=t.finishCondition||_.constant(!0),this._condition=t.condition||_.constant(!0),this.setters={addFeature:{fnc:n.prototype._addFeature,fallback:n.prototype._fallBack}},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.drawInteraction=new ol.interaction.Draw({type:this.editor.getEditVectorLayer().geometrytype,source:this.source,condition:this._condition,finishCondition:this._finishCondition}),t.addInteraction(this.drawInteraction),this.drawInteraction.setActive(!0),this.drawInteraction.on("drawstart",function(t){e.editor.emit("drawstart",t)}),this.drawInteraction.on("drawend",function(t){e.editor.emit("drawend",t),e._busy||(e._busy=!0,e.pause(),e.addFeature(t.feature))}),this._snap&&(this._snapInteraction=new ol.interaction.Snap({source:this._snap.vectorLayer.getSource()}),t.addInteraction(this._snapInteraction))},l.pause=function(e){_.isUndefined(e)||e?(this._snapInteraction&&this._snapInteraction.setActive(!1),this.drawInteraction.setActive(!1)):(this._snapInteraction&&this._snapInteraction.setActive(!0),this.drawInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._snapInteraction&&(e.removeInteraction(this._snapInteraction),this._snapInteraction=null),e.removeInteraction(this.drawInteraction),this.drawInteraction=null,!0},l.removeLastPoint=function(){if(this.drawInteraction)try{this.drawInteraction.removeLastPoint()}catch(e){}},l._addFeature=function(e){return this.editor.addFeature(e),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.source.getFeaturesCollection().pop(),this.pause(!1)}},{"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40}],72:[function(e,t,i){function n(e,t){this.setters={cutLine:n.prototype._cutLine},o(this,e,t);this.isPausable=!0,this.steps=new c.Steps(n.steps),this._origFeature=null,this._origGeometry=null,this._newFeatures=[],this._linePickInteraction=null,this._pointPickInteraction=null,this._selectLineToKeepInteraction=null,this._pointLayer=t.pointLayer||null,this._minCutPointDistance=t.minCutPointDistance||1/0,this._modType=t.modType||"MODONCUT",this._selectedLineOverlay=new ol.layer.Vector({source:new ol.source.Vector,style:new ol.style.Style({stroke:new ol.style.Stroke({color:"rgb(255,255,0)",width:4})})}),this._lineToKeepOverlay=new ol.layer.Vector({source:new ol.source.Vector})}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/geom"),a=(e("g3w/core/mapservice"),e("g3w-ol3/src/interactions/pickfeatureinteraction")),l=e("g3w-ol3/src/interactions/pickcoordinatesinteraction"),c=e("./tool");r(n,c),t.exports=n;var u=n.prototype;u.run=function(){var e=this;this._linePickInteraction=new a({layers:[this.layer,this.editingLayer]}),this.map.addInteraction(this._linePickInteraction),e.steps.next(),this._linePickInteraction.on("picked",function(t){var i,n=e._origFeature=t.feature;e._origGeometry=n.getGeometry().clone(),e._showSelection(e._origGeometry,300),e.map.removeInteraction(this),e._pointLayer?e._pointPickInteraction=new a({layers:[e._pointLayer]}):e._pointPickInteraction=new l,e.steps.next(),e._pointPickInteraction.on("picked",function(t){e.map.removeInteraction(this);var r;if(t.feature?(i=t.feature,r=i.getGeometry().getCoordinates()):r=t.coordinate,r){var o=n.getGeometry().getClosestPoint(r),a=s.distance(r,o);if(a<e._minCutPointDistance){var l=e._cut(n.getGeometry(),o);if(l){var c=l[0],u=l[1],d=e.editor.generateId();c.setId(d+"_1"),u.setId(d+"_2");var h=n.getProperties();if(delete h[n.getGeometryName()],e._showSelection(c.getGeometry(),300),setTimeout(function(){e._showSelection(u.getGeometry(),300)},300),"MODONCUT"==e._modType)e.steps.next(),e._selectLineToKeep(c,u).then(function(t){n.setGeometry(t.getGeometry().clone());var r;c.getId()==t.getId()?(delete c,r=u):u.getId()==t.getId()&&(delete u,r=c),e._newFeatures.push(r),r.setProperties(h),e.editingLayer.getSource().addFeatures([r]);var o={added:[r],updated:n,cutfeature:i};e.cutLine(o,e._modType).fail(function(){e._rollBack(),e.rerun()})});else{e.layer.getSource().removeFeature(n),e._newFeatures.push(c),e._newFeatures.push(u),e.editingLayer.getSource().addFeatures([featureToAdd,c]);var f={added:[c,u],removed:n};e.cutLine(f,e._modType).fail(function(){e._rollBack(),e.rerun()})}}else e.rerun()}}}),e.map.addInteraction(e._pointPickInteraction)})},u.pause=function(e){_.isUndefined(e)||e?(this._linePickInteraction.setActive(!1),this._pointPickInteraction.setActive(!1)):(this._linePickInteraction.setActive(!0),this._pointPickInteraction.setActive(!0))},u.rerun=function(){this.stop(),this.run()},u.stop=function(){this._cleanUp();var e=c.prototype.stop.call(this);return e&&(this.map.removeInteraction(this._linePickInteraction),this.map.removeInteraction(this._pointPickInteraction),this._linePickInteraction=null,this._pointPickInteraction=null),e},u._cleanUp=function(){this._origFeature=null,this._origGeometry=null,this._newFeatures=[],this._lineToKeepOverlay.setMap(null),this._selectedLineOverlay.setMap(null)},u._rollBack=function(){this._origFeature.setGeometry(this._origGeometry);try{_.forEach(this._newFeatures,function(e){self.editingLayer.getSource().removeFeature(e)})}catch(e){}},u._cutLine=function(e,t){if("MODONCUT"==t){var i=e.updated,n=e.added[0];this.editor.updateFeature(i),this.editor.addFeature(n)}else{var r=e.removed,o=e.added[0],s=e.added[1];this.editor.deleteFeature(r),this.editor.addFeature(o),this.editor.addFeature(s)}return this._busy=!1,this.pause(!1),this.steps.completed(),this.rerun(),!0},u._selectLineToKeep=function(e,t){var i=$.Deferred(),n=this,r=this._lineToKeepOverlay;r.getSource().addFeatures([e,t]),r.setMap(this.map);var o=new a({layers:[this._lineToKeepOverlay]});return this.map.addInteraction(o),o.on("picked",function(e){r.setMap(null),n.map.removeInteraction(this),i.resolve(e.feature)}),i.promise()},u._fallBack=function(e){this._busy=!1,this.pause(!1)},u._cut=function(e,t){for(;t.length<e.getStride();)t.push(0);var i=1/0,n=0,r=0;e.forEachSegment(function(e,o){var a=s.closestOnSegment(t,[e,o]),l=s.distance(t,a);i>l&&(i=l,n=r),r+=1});var o=e.getCoordinates(),a=o.slice(0,n+1);a.splice(a.length,0,t);var l=o.slice(n);if(l.splice(0,1,t),a.length<2||l.length<2)return!1;var c=new ol.geom.LineString;c.setCoordinates(a);var u=new ol.geom.LineString;u.setCoordinates(l);var d=new ol.Feature({geometry:c}),h=new ol.Feature({geometry:u});return[d,h]},u._showSelection=function(e,t){var i=this,t=t||null,n=this._selectedLineOverlay,r=new ol.Feature;r.setGeometry(e),n.getSource().addFeatures([r]),n.setMap(this.map),t&&setTimeout(function(){n.setMap(null),i._selectedLineOverlay.getSource().clear()},t)},u._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))},n.steps=[{type:"selectline"},{type:"selectcutpoint"},{type:"selectparttokeep"}]},{"./tool":78,"g3w-ol3/src/interactions/pickcoordinatesinteraction":21,"g3w-ol3/src/interactions/pickfeatureinteraction":22,"g3w/core/geom":30,"g3w/core/mapservice":33,"g3w/core/utils":40}],73:[function(e,t,i){var n=function(e,t,i){this.type=e,this.features=t,this.coordinate=i},r=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:r.handleDownEvent_,handleMoveEvent:r.handleMoveEvent_,handleUpEvent:r.handleUpEvent_,handleEvent:r.handleEvent_}),this.previousCursor_=void 0,this.lastCoordinate_=null,this.features_=void 0!==e.features?e.features:null};ol.inherits(r,ol.interaction.Pointer),r.handleEvent_=function(e){return"keydown"!=e.type?ol.interaction.Pointer.handleEvent.call(this,e):this.features_.getArray().length&&46==e.originalEvent.keyCode?(this.dispatchEvent(new n("deleteend",this.features_,event.coordinate)),!0):void 0},r.handleDownEvent_=function(e){return this.lastFeature_=this.featuresAtPixel_(e.pixel,e.map),this.lastFeature_?(r.handleMoveEvent_.call(this,e),this.dispatchEvent(new n("deleteend",this.features_,e.coordinate)),!0):!1},r.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=e.map.forEachFeatureAtPixel(e.pixel,function(e){return e});i?(this.previousCursor_=t.style.cursor,t.style.cursor="pointer"):(t.style.cursor=void 0!==this.previousCursor_?this.previousCursor_:"",this.previousCursor_=void 0)},r.prototype.featuresAtPixel_=function(e,t){var i=null,n=t.forEachFeatureAtPixel(e,function(e){return e});return this.features_&&_.includes(this.features_.getArray(),n)&&(i=n),i},t.exports=r},{}],74:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this.setters={deleteFeature:n.prototype._deleteFeature},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice"),l=e("./deletefeatureinteraction");r(n,s),t.exports=n;var c=n.prototype;ol.geom.GeometryType={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"};var u={},d=[255,255,255,1],h=[255,0,0,1],f=3;u[ol.geom.GeometryType.POLYGON]=[new ol.style.Style({fill:new ol.style.Fill({color:[255,255,255,.5]})})],u[ol.geom.GeometryType.MULTI_POLYGON]=u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]=[new ol.style.Style({stroke:new ol.style.Stroke({color:d,width:f+2})}),new ol.style.Style({stroke:new ol.style.Stroke({color:h,width:f})})],u[ol.geom.GeometryType.MULTI_LINE_STRING]=u[ol.geom.GeometryType.LINE_STRING],u[ol.geom.GeometryType.CIRCLE]=u[ol.geom.GeometryType.POLYGON].concat(u[ol.geom.GeometryType.LINE_STRING]),u[ol.geom.GeometryType.POINT]=[new ol.style.Style({image:new ol.style.Circle({radius:2*f,fill:new ol.style.Fill({color:h}),stroke:new ol.style.Stroke({color:d,width:f/2})}),zIndex:1/0})],u[ol.geom.GeometryType.MULTI_POINT]=u[ol.geom.GeometryType.POINT],u[ol.geom.GeometryType.GEOMETRY_COLLECTION]=u[ol.geom.GeometryType.POLYGON].concat(u[ol.geom.GeometryType.LINE_STRING],u[ol.geom.GeometryType.POINT]),u[ol.geom.GeometryType.POLYGON]=_.concat(u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]),u[ol.geom.GeometryType.GEOMETRY_COLLECTION]=_.concat(u[ol.geom.GeometryType.GEOMETRY_COLLECTION],u[ol.geom.GeometryType.LINE_STRING]),c.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click,style:function(e,t){return u[e.getGeometry().getType()]}}),t.addInteraction(this._selectInteraction),this._deleteInteraction=new l({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._deleteInteraction);this._deleteInteraction.on("deleteend",function(t){var i=t.features.getArray()[0],n=e._isNew(i);e._busy||(e._busy=!0,e.pause(!0),e.deleteFeature(i,n).always(function(){e._busy=!1,e.pause(!1)}))})},c.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._deleteInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._deleteInteraction.setActive(!0))},c.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),this._selectInteraction=null,e.removeInteraction(this._deleteInteraction),this._deleteInteraction=null,!0},c._deleteFeature=function(e,t){return this.editor.deleteFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},c._fallBack=function(e){this._busy=!1,this.pause(!1)},c._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"./deletefeatureinteraction":73,"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40}],75:[function(e,t,i){function n(e,t){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._deleteCondition=t.deleteCondition||void 0,this._snap=t.snap||null,this._snapInteraction=null,this.setters={modifyFeature:n.prototype._modifyFeature},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer]}),t.addInteraction(this._selectInteraction),this._modifyInteraction=new ol.interaction.Modify({features:this._selectInteraction.getFeatures(),deleteCondition:this._deleteCondition}),t.addInteraction(this._modifyInteraction);var i=null;this._modifyInteraction.on("modifystart",function(e){var t=e.features.getArray()[0];i=t.getGeometry().clone()}),this._modifyInteraction.on("modifyend",function(t){var n=t.features.getArray()[0],r=e._isNew(n);e._busy||(e._busy=!0,e.pause(!0),e.modifyFeature(n,r).fail(function(){n.setGeometry(i)}).always(function(){e._busy=!1,e.pause(!1)}))}),this._snap&&(this._snapInteraction=new ol.interaction.Snap({source:this._snap.vectorLayer.getSource()}),t.addInteraction(this._snapInteraction))},l.pause=function(e){_.isUndefined(e)||e?(this._snapInteraction&&this._snapInteraction.setActive(!1),this._selectInteraction.setActive(!1),this._modifyInteraction.setActive(!1)):(this._snapInteraction&&this._snapInteraction.setActive(!0),this._selectInteraction.setActive(!0),this._modifyInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),this._snapInteraction&&(e.removeInteraction(this._snapInteraction),this._snapInteraction=null),e.removeInteraction(this._selectInteraction),this._selectInteraction=null,e.removeInteraction(this._modifyInteraction),this._modifyInteraction=null,!0},l._modifyFeature=function(e,t){return this.editor.updateFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l.removePoint=function(e){if(this._modifyInteraction)try{this._modifyInteraction.removePoint()}catch(t){console.log(t)}},l._fallBack=function(e){this._busy=!1,this.pause(!1)},l._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40}],76:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._origGeometry=null,this.setters={moveFeature:{fnc:n.prototype._moveFeature,fallback:n.prototype._fallBack}},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click}),t.addInteraction(this._selectInteraction),this._translateInteraction=new ol.interaction.Translate({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._translateInteraction),this._translateInteraction.on("translatestart",function(t){var i=t.features.getArray()[0];e._origGeometry=i.getGeometry().clone(),e.editor.emit("movestart",i)}),this._translateInteraction.on("translateend",function(t){var i=t.features.getArray()[0];e._busy||(e._busy=!0,e.pause(),e.moveFeature(i).then(function(t){e.pause(!1)}).fail(function(){i.setGeometry(e._origGeometry)}))})},l.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._translateInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._translateInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),this._selectInteraction=null,e.removeInteraction(this._translateInteraction),this._translateInteraction=null,!0},l._moveFeature=function(e){return this.editor.emit("moveend",e),this.editor.updateFeature(e),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40}],77:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.pickFeatureInteraction=null,this._running=!1,this._busy=!1,this.setters={pickFeature:s},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/utils").noop,a=e("g3w/core/g3wobject"),l=e("g3w-ol3/src/interactions/pickfeatureinteraction"),c=e("g3w/core/mapservice");r(n,a),t.exports=n;var u=n.prototype;u.run=function(){var e=this,t=[this.editor.getVectorLayer().getLayer(),this.editor.getEditVectorLayer().getLayer()];this.pickFeatureInteraction=new l({layers:t}),this.pickFeatureInteraction.on("picked",function(t){e._busy||(e._busy=!0,e.pause(!0),e.pickFeature(t.feature).then(function(t){e._busy=!1,e.pause(!1)}))}),c.pushInteraction(this.pickFeatureInteraction)},u.pause=function(e){_.isUndefined(e)||e?this.pickFeatureInteraction.setActive(!1):this.pickFeatureInteraction.setActive(!0)},u.stop=function(){return c.popInteraction(),!0},u._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w-ol3/src/interactions/pickfeatureinteraction":22,"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40}],78:[function(e,t,i){function n(e,t){this.editor=e,this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this.map=a.viewer.map,this.isPausable=!1,this.options=t||{},this.steps=null,o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s);var l=n.prototype;l.stop=function(){return this.steps&&this.steps.destroy(),!0},n.Steps=function(e){var t=-1,e=e;this.next=function(){t+=1;var i=e[t];this.emit("step",t,i)},this.currentStep=function(){return e[t]},this.currentStepIndex=function(){return t},this.totalSteps=function(){return e.length},this.reset=function(){t=0},this.destroy=function(){this.removeAllListeners()},this.completed=function(){this.emit("complete"),this.reset()},this.insertStepAt=function(t,i){e.splice(t,0,i)}},r(n.Steps,s),t.exports=n},{"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/utils":40}],79:[function(e,t,i){t.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode,tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode,tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"></img>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div>\n    <button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-success\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>\n    <button class="btn btn-danger" v-disabled="!state.hasEdits" @click="saveEdits">{{ savebtnlabel }}</button>\n    <img v-show="state.retrievingData" :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],80:[function(e,t,i){function n(){this.id="iternet-editing-panel",this.name="Gestione dati ITERNET",this.panelComponent=null}var r=e("g3w/core/utils").resolvedValue,o=e("g3w/gui/gui"),s=e("./iternetservice"),a=Vue.extend({template:e("./editorpanel.html"),data:function(){return{state:s.state,resourcesurl:o.getResourcesUrl(),editorstoolbars:[{name:"Accessi",layercode:"accessi",tools:[{title:"Aggiungi accesso",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta accesso",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi accesso",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Giunzioni stradali",layercode:"giunzioni",tools:[{title:"Aggiungi giunzione",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta giunzione",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi giunzione",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Elementi stradali",layercode:"strade",tools:[{title:"Aggiungi strada",tooltype:"addfeature",icon:"iternetAddLine.png"},{title:"Sposta vertice strada",tooltype:"modifyvertex",icon:"iternetMoveVertex.png"},{title:"Taglia su giunzione",tooltype:"cutline",icon:"iternetCutOnVertex.png"},{title:"Sposta strada",tooltype:"movefeature",icon:"iternetMoveLine.png"},{title:"Rimuovi strada",tooltype:"deletefeature",icon:"iternetDeleteLine.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){s.toggleEditing()},saveEdits:function(){s.saveEdits()},toggleEditTool:function(e,t){""!=t&&this.state.editing.on&&s.toggleEditTool(e,t)},editingtoolbtnToggled:function(e,t){return this.state.editing.layerCode==e&&this.state.editing.toolType==t},editingtoolbtnEnabled:function(e){return""!=e.tooltype}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var e="";if(this.state.editing.enabled){if(this.state.editing.toolstep.message){var t=this.state.editing.toolstep.n,i=this.state.editing.toolstep.total,n=this.state.editing.toolstep.message;e='<div style="margin-top:20px">GUIDA STRUMENTO:</div><div><span>['+t+"/"+i+'] </span><span style="color: yellow">'+n+"</span></div>"}}else e='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing';return e}}}),l=n.prototype;l.onShow=function(e){var t=this.panelComponent=new a;return t.$mount().$appendTo(e),r(!0)},l.onClose=function(){var e=this,t=$.Deferred();return s.stop().then(function(){e.panelComponent.$destroy(!0),e.panelComponent=null,t.resolve()}).fail(function(){t.reject()}),t.promise()},t.exports=n},{"./editorpanel.html":79,"./iternetservice":86,"g3w/core/utils":40,"g3w/gui/gui":55}],81:[function(e,t,i){function n(e){o(this,e)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("./iterneteditor");r(n,s),t.exports=n},{"./iterneteditor":84,"g3w/core/utils":40}],82:[function(e,t,i){function n(e){o(this,e),this._formPanel=c}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/projectservice").ProjectService,a=e("g3w/gui/form").FormPanel,l=e("g3w/gui/form").Form,c=a.extend({});r(n,l);var u=n.prototype;u._isVisible=function(e){var t=!0;switch(e.name){case"cod_acc_est":var i=this._getField("tip_acc");"0101"==i.value&&(t=!1);break;case"cod_acc_int":var i=this._getField("tip_acc");"0101"!=i.value&&"0501"!=i.value||(t=!1)}return t},u._isEditable=function(e){return"tip_acc"!=e.name||this._isNew()?l.prototype._isEditable.call(this,e):!1},u._shouldShowRelation=function(e){if("numero_civico"==e.name){var t=this._getField("tip_acc");if("0102"==t.value)return!1}return!0},u._pickLayer=function(e){var t=this,i=e.input.options.layerid;l.prototype._pickLayer.call(this,e).then(function(n){var r,o;switch(e.name){case"cod_ele":r=t._getRelationField("cod_top","numero_civico");break;case"cod_top":r=t._getField("cod_ele")}r&&(o=s.getLayerAttributeLabel(i,r.input.options.field),r&&n[o]&&(r.value=n[o]))})},t.exports=n},{"g3w/core/projectservice":36,"g3w/core/utils":40,"g3w/gui/form":49}],83:[function(e,t,i){function n(e){o(this,e),this._service=null,this._stradeEditor=null,this._giunzioneGeomListener=null,this._setupMoveGiunzioniListener=function(){var e=this;this.on("movestart",function(t){e._startMovingGiunzione(t)})},this._stradeToUpdate=[],this._startMovingGiunzione=function(e){var t=this,i=(this.getVectorLayer(),this._stradeEditor),n=e,r=n.get("cod_gnz");this._stradeToUpdate=[];var o=i.getVectorLayer().getSource().getFeatures();_.forEach(o,function(e){var i=e.get("nod_ini"),o=e.get("nod_fin"),s=i==r,a=o==r;if(s||a){var l=!!s;t._stradeToUpdate.push(e),t._startGiunzioniStradeTopologicalEditing(n,e,l)}}),this.once("moveend",function(e){t._stradeToUpdate.length&&(i.isStarted()||i.start(this._service),_.forEach(t._stradeToUpdate,function(e){i.updateFeature(e)}))})},this._startGiunzioniStradeTopologicalEditing=function(e,t,i){var n=t.getGeometry(),r=t.getGeometry().getCoordinates(),o=i?0:r.length-1,s=e.getGeometry(),a=s.on("change",function(e){r[o]=e.target.getCoordinates(),n.setCoordinates(r)});this._giunzioneGeomListener=a},this._setupDeleteGiunzioniListener=function(){var e=this._stradeEditor;this.onbeforeasync("deleteFeature",function(t,i,n){var r=!1,o=e.getVectorLayer();_.forEach(o.getFeatures(),function(e){var i=t.get("cod_gnz"),n=e.get("nod_ini"),o=e.get("nod_fin"),s=n==i,a=o==i;(s||a)&&(r=!0)}),r&&GUI.notify.error("Non è possibile rimuovere la giunzioni perché risulta connessa ad una o più strade"),n(!r)})}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("./iterneteditor");r(n,s),t.exports=n;var a=n.prototype;a.start=function(e){return this._service=e,this._stradeEditor=e._layers[e.layerCodes.STRADE].editor,this._setupMoveGiunzioniListener(),this._setupDeleteGiunzioniListener(),s.prototype.start.call(this)},a.stop=function(){var e=!1;return s.prototype.stop.call(this)&&(e=!0,ol.Observable.unByKey(this._giunzioneGeomListener)),e},a.setTool=function(e){var t;return"addfeature"==e&&(t={snap:{vectorLayer:this._stradeEditor.getVectorLayer()}}),s.prototype.setTool.call(this,e,t)}},{"./iterneteditor":84,"g3w/core/utils":40}],84:[function(e,t,i){function n(e){o(this,e),this._askConfirmToDeleteEditingListener=function(){this.onbeforeasync("deleteFeature",function(e,t,i){s.dialog.confirm("Vuoi eliminare l'elemento selezionato?",function(e){i(e)})})},this._setupAddFeatureAttributesEditingListeners=function(){var e=this;this.onbeforeasync("addFeature",function(t,i){e._openEditorForm("new",t,i)})},this._setupEditAttributesListeners=function(){var e=this;this.onafter("pickFeature",function(t){e._openEditorForm("old",t)})},this._openEditorForm=function(e,t,i){var n=this,r=(t.getId(),this.getVectorLayer()),o=r.getFieldsWithAttributes(t),a=r.pk;a&&_.isNull(this.getField(a))&&_.forEach(t.getProperties(),function(e,t){var i=n.getField(t,o);i&&(i.value=e)});var c=this.getRelationsWithAttributes(t);c.then(function(e){var a=new l({name:"Edita attributi "+r.name,id:"attributes-edit-"+r.name,dataid:r.name,pk:r.pk,isnew:n.isNewFeature(t.getId()),fields:o,relations:e,buttons:[{title:"Salva",type:"save","class":"btn-danger",cbk:function(e,r){n.setFieldsWithAttributes(t,e,r),i&&i(!0)}},{title:"Cancella",type:"cancel","class":"btn-primary",cbk:function(){i&&i(!1)}}]});s.showForm(a,{modal:!0,closable:!1})}).fail(function(){i&&i(!1)})}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/gui/gui"),a=e("g3w-editing/editor"),l=e("./attributesform");r(n,a),t.exports=n;var c=n.prototype;c.start=function(){var e=a.prototype.start.call(this);return this._setupAddFeatureAttributesEditingListeners(),this._setupEditAttributesListeners(),this._askConfirmToDeleteEditingListener(),e}},{"./attributesform":82,"g3w-editing/editor":70,"g3w/core/utils":40,"g3w/gui/gui":55}],85:[function(e,t,i){function n(e){o(this,e),this._service=null,this._giunzioniEditor=null,this._stradeSnaps=null,this._stradeSnapsCollection=function(){var e=[];this.length=0,this.push=function(t){var i=!1;return this.canSnap(t)&&(e.push(t),this.length+=1,i=!0),i},this.getLast=function(){return e[e.length-1]},this.getFirst=function(){return e[0]},this.clear=function(){e.splice(0,e.length),this.length=0},this.getSnaps=function(){return e},this.canSnap=function(e){if(this.isAlreadySnapped(e))return!1;var t=e.get("cod_gnz");return!_.isNil(t)&&""!=t},this.isAlreadySnapped=function(e){return _.includes(this.snaps,e)}},this._updateStradaAttributes=function(e){var t=this._stradeSnaps;e.set("nod_ini",t.getSnaps()[0].get("cod_gnz")),
e.set("nod_fin",t.getSnaps()[1].get("cod_gnz"))},this._loadMissingGiunzioniInView=function(){var e=this.getVectorLayer(),t=this._giunzioniEditor.getVectorLayer(),i=e.getSource(),n=ol.extent.buffer(i.getExtent(),1);this._service._loadVectorData(t,n)},this._drawRemoveLastPoint=_.bind(function(e){var t=this,i=this.getActiveTool().getType();"addfeature"==i&&46==e.keyCode&&(e.preventDefault(),e.stopPropagation(),t.getActiveTool().getTool().removeLastPoint())},this),this._setupDrawStradeConstraints=function(){var e=this;s.viewer.map.getTargetElement().id,s.viewer.map;this.onbefore("addFeature",function(t){var i=e._stradeSnaps;return 2==i.length?(e._updateStradaAttributes(t),i.clear(),!0):!1})},this._getCheckSnapsCondition=function(){var e=this;return function(t){var i=e._stradeSnaps;return 2==i.length?!0:(a.notify.error("L'ultimo vertice deve corrispondere con una giunzione"),!1)}},this._getStradaIsBeingSnappedCondition=function(){var e=this,t=s.viewer.map,i=this._giunzioniEditor.getVectorLayer();return function(n){var r=e._stradeSnaps,o=t.getCoordinateFromPixel(n.pixel),s=i.getSource(),l=ol.extent.buffer([o[0],o[1],o[0],o[1]],1),c=s.getFeaturesInExtent(l)[0];if(2==r.length&&(!c||c!=r.getSnaps()[1])){return a.notify.error("Una strada non può avere vertici intermedi in corrispondenza di giunzioni.<br> Premere <b>CANC</b> per rimuovere l'ultimo vertice."),!1}return c&&r.length<2&&r.push(c),0==r.length?(a.notify.error("Il primo vertice deve corrispondere con una giunzione"),!1):!0}},this._modifyRemovePoint=_.bind(function(e){var t=this,i=this.getActiveTool().getType();"modifyvertex"==i&&46==e.keyCode&&(e.preventDefault(),e.stopPropagation(),t.getActiveTool().getTool().removePoint())},this),this._setupModifyVertexStradeConstraints=function(){var e=this;s.viewer.map;this.onbefore("modifyFeature",function(t){var i=e._stradeSnaps,n=e._checkStradaIsCorrectlySnapped(t.getGeometry());return n&&(e._updateStradaAttributes(t),i.clear()),n})},this._checkStradaIsCorrectlySnapped=function(e){var t=!0,i=(s.viewer.map,this._giunzioniEditor.getVectorLayer());this._stradeSnaps.clear();var n=this._stradeSnaps,r=e.getCoordinates(),o=!1,l=!1;return _.forEach(r,function(e,t){var s=i.getSource(),a=ol.extent.buffer([e[0],e[1],e[0],e[1]],.1),c=s.getFeaturesInExtent(a)[0];c&&(0==t&&n.push(c)?o=!0:t==r.length-1&&n.push(c)&&(l=!0))}),n.length>2&&(a.notify.error("Una strada non può avere vertici intermedi in corrispondenza di giunzioni"),t=!1),o||(a.notify.error("Il primo vertice deve corrispondere con una giunzione"),t=!1),l||(a.notify.error("L'ultimo vertice deve corrispondere con una giunzione"),t=!1),t},this._setupStradeCutterPostSelection=function(){var e=this;this.onbeforeasync("cutLine",function(t,i,n){if("MODONCUT"==i){var r=t.added[0],o=e._getFirstLastSnappedGiunzioni(r.getGeometry());r.set("nod_ini",o[0].get("cod_gnz")),r.set("nod_fin",o[1].get("cod_gnz"));var s=t.updated,a=e._getFirstLastSnappedGiunzioni(s.getGeometry());s.set("nod_ini",a[0].get("cod_gnz")),s.set("nod_fin",a[1].get("cod_gnz")),e._openEditorForm("new",r,n)}else n(!0)})},this._getFirstLastSnappedGiunzioni=function(e){var t=e.getCoordinates(),i=this._giunzioniEditor.getVectorLayer(),n=null,r=null;return _.forEach(t,function(e,o){var s=i.getSource(),a=ol.extent.buffer([e[0],e[1],e[0],e[1]],.1),l=s.getFeaturesInExtent(a)[0];l&&(0==o?n=l:o==t.length-1&&(r=l))}),[n,r]}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/mapservice"),a=e("g3w/gui/gui"),l=e("./iterneteditor");r(n,l),t.exports=n;var c=n.prototype;c.start=function(e){return this._service=e,this._giunzioniEditor=e._layers[e.layerCodes.GIUNZIONI].editor,this._loadMissingGiunzioniInView(),this._setupDrawStradeConstraints(),this._setupModifyVertexStradeConstraints(),this._setupStradeCutterPostSelection(),l.prototype.start.call(this)},c.setTool=function(e){var t,i=this._giunzioniEditor.getVectorLayer();"addfeature"==e&&(t={snap:{vectorLayer:i},finishCondition:this._getCheckSnapsCondition(),condition:this._getStradaIsBeingSnappedCondition()}),"modifyvertex"==e&&(t={snap:{vectorLayer:i},deleteCondition:_.constant(!1)}),"cutline"==e&&(t={pointLayer:i.getLayer()});var n=l.prototype.setTool.call(this,e,t);return n&&(this._stradeSnaps=new this._stradeSnapsCollection,$("body").keyup(this._drawRemoveLastPoint),$("body").keyup(this._modifyRemovePoint)),n},c.stopTool=function(){var e=!1;return e=l.prototype.stopTool.call(this),e&&(this._stradeSnaps=null,$("body").off("keyup",this._drawRemoveLastPoint),$("body").off("keyup",this._modifyRemovePoint)),e}},{"./iterneteditor":84,"g3w/core/mapservice":33,"g3w/core/utils":40,"g3w/gui/gui":55}],86:[function(e,t,i){function n(){var e=this;this._runningEditor=null;var t=this.layerCodes={STRADE:"strade",GIUNZIONI:"giunzioni",ACCESSI:"accessi"};this._editorClasses={},this._editorClasses[t.ACCESSI]=u,this._editorClasses[t.GIUNZIONI]=d,this._editorClasses[t.STRADE]=h,this._layers={},this._layers[t.ACCESSI]={layerCode:t.ACCESSI,vector:null,editor:null,style:function(e){var t="#d9b581";switch(e.get("tip_acc")){case"0101":t="#d9b581";break;case"0102":t="#d9bc29";break;case"0501":t="#68aad9";break;default:t="#d9b581"}return[new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:t})})})]}},this._layers[t.GIUNZIONI]={layerCode:t.GIUNZIONI,vector:null,editor:null,style:new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:"#0000ff"})})})},this._layers[t.STRADE]={layerCode:t.STRADE,vector:null,editor:null,style:new ol.style.Style({stroke:new ol.style.Stroke({width:3,color:"#ff7d2d"})})},this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this._loadedExtent=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null,toolstep:{n:null,total:null,message:null}},retrievingData:!1,hasEdits:!1};var i={resolution:2};a.onafter("setMapView",function(t,n,r){e.state.editing.enabled=n<i.resolution}),this.init=function(e){this.config=e,_.forEach(this._layers,function(t,i){t.name=e.layers[i].name,t.id=e.layers[i].id})},this.stop=function(){var t=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){e._stopEditing(),t.resolve()}).fail(function(){t.reject()}):t.resolve(),t.promise()},this.toggleEditing=function(){var e=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return e.promise()},this.saveEdits=function(){this._cancelOrSave(2)},this.toggleEditTool=function(e,t){var i=this,n=this._layers[e];if(n){var r=this._getCurrentEditingLayer();r&&e==r.layerCode?t==r.editor.getActiveTool().getType()?this._stopEditingTool():(this._stopEditingTool(),this._startEditingTool(r,t)):r&&r.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(n,t)}):this._startEditingTool(n,t)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._startEditing=function(){var e=this;this._setupAndLoadAllVectorsData().then(function(t){e._addToMap(),e.state.editing.on=!0,e.emit("editingstarted"),e._loadDataOnMapViewChangeListener||(e._loadDataOnMapViewChangeListener=a.onafter("setMapView",function(){e.state.editing.on&&e.state.editing.enabled&&e._loadAllVectorsData()}))})},this._stopEditing=function(t){this._stopEditor(t)&&(_.forEach(this._layers,function(t,i){var n=t.vector;a.viewer.removeLayerByName(n.name),t.vector=null,t.editor=null,e._unlockLayer(e.config.layers[i])}),this._updateEditingState(),e.state.editing.on=!1,e._cleanUp(),e.emit("editingstopped"))},this._cleanUp=function(){this._loadedExtent=null},this._startEditor=function(e){return e.editor.start(this)?(this._setCurrentEditingLayer(e),!0):!1},this._startEditingTool=function(e,t,i){var n=!0;return e.editor.isStarted()||(n=this._startEditor(e)),n&&e.editor.setTool(t,i)?(this._updateEditingState(),!0):!1},this._stopEditor=function(e){var t=!0,i=this._getCurrentEditingLayer();return i&&(t=i.editor.stop(e),t&&this._setCurrentEditingLayer()),t},this._stopEditingTool=function(){var e=!0,t=this._getCurrentEditingLayer();return t&&(e=t.editor.stopTool(),e&&this._updateEditingState()),e},this._cancelOrSave=function(e){var t=$.Deferred();try{var i=1;e&&(i=e);var n=this,r={};_.forEach(this._layers,function(e,t){e.editor.isDirty()&&(r[t]=e.editor)}),_.keys(r).length?this._askCancelOrSave(i).then(function(e){"save"===e?n._saveEdits(r).then(function(e){t.resolve()}).fail(function(e){t.reject()}):"nosave"==e?t.resolve():"cancel"==e&&t.reject()}):t.resolve()}catch(o){t.reject()}return t.promise()},this._askCancelOrSave=function(e){var t=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){t.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){t.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){t.resolve("cancel")}}};switch(e){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return c.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),t.promise()},this._saveEdits=function(t){var i=$.Deferred();return this._sendEdits(t).then(function(n){c.notify.success("I dati sono stati salvati correttamente"),e._commitEdits(t,n),a.refreshMap(),i.resolve()}).fail(function(e){c.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(e){var t=$.Deferred(),i=_.map(e,function(e){return{layername:e.getVectorLayer().name,edits:e.getEditedFeatures()}});return this._postData(i).then(function(e){e.result?t.resolve(e.response):t.reject(e.response)}).fail(function(e){t.reject(e.response)}),t.promise()},this._commitEdits=function(e,t){_.forEach(e,function(e){t&&t["new"]&&_.forEach(t["new"],function(t){var i=t.clientid,n=t.id;e.getEditVectorLayer().setFeatureData(i,n,null,t)}),e.commit()})},this._undoEdits=function(e){var t=this._getCurrentEditingLayer().layerCode;e[t];this._stopEditing(!0)},this._updateEditingState=function(){var e=this._getCurrentEditingLayer();e?(this.state.editing.layerCode=e.layerCode,this.state.editing.toolType=e.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null),this._updateToolStepsState()},this._updateToolStepsState=function(e){var e,t=this,i=this._getCurrentEditingLayer();if(i&&(e=i.editor.getActiveTool()),e&&e.getTool()){var n=e.getTool();n.steps&&(this._setToolStepState(e),n.steps.on("step",function(i,n){t._setToolStepState(e)}),n.steps.on("complete",function(){t._setToolStepState()}))}else t._setToolStepState()},this._setToolStepState=function(e){var t,i,n;if(_.isUndefined(e))t=null,i=null,n=null;else{var r=e.getTool(),o=f[e.getType()];t=r.steps.currentStepIndex(),i=r.steps.totalSteps(),n=o[t],_.isUndefined(n)&&(t=null,i=null,n=null)}this.state.editing.toolstep.n=t+1,this.state.editing.toolstep.total=i,this.state.editing.toolstep.message=n},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(e){e?this._currentEditingLayer=e:this._currentEditingLayer=null},this._addToMap=function(){var t=a.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){e._layers[i].vector.addToMap(t)})},this._setupAndLoadAllVectorsData=function(){var e=this,t=$.Deferred(),i=this.getLayerCodes(),n=_.reduce(i,function(t,i){return!_.isNull(e._layers[i].vector)});if(e.state.retrievingData=!0,n)this._loadAllVectorsData().then(function(){t.resolve()}).fail(function(){t.reject()}).always(function(){e.state.retrievingData=!1});else{var r=_.map(i,function(t){return e._setupVectorLayer(e._layers[t])});$.when.apply(this,r).then(function(){var i=Array.prototype.slice.call(arguments),n=e.getLayerCodes(),r=_.zipObject(n,i);_.forEach(r,function(t,i){e._layers[i].vector=t;var n=new e._editorClasses[i];n.setVectorLayer(t),n.on("dirty",function(t){e.state.hasEdits=t}),e._layers[i].editor=n}),e._loadAllVectorsData().then(function(){t.resolve()}).fail(function(){t.reject()}).always(function(){e.state.retrievingData=!1})}).fail(function(){t.reject()})}return t.promise()},this._loadAllVectorsData=function(e){var t=a.state.bbox,i=this._loadedExtent;if(i&&ol.extent.containsExtent(i,t))return o();i?this._loadedExtent=ol.extent.extend(i,t):this._loadedExtent=t;var n=$.Deferred(),r=this,s=_.map(r._layers,function(e){return r._loadVectorData(e.vector,t)});return $.when.apply(this,s).then(function(){var e=Array.prototype.slice.call(arguments),t=r.getLayerCodes(),i=_.zipObject(t,e);_.forEach(i,function(e,t){e.featurelocks&&r._layers[t].editor.setFeatureLocks(e.featurelocks)}),n.resolve()}).fail(function(){n.reject()}),n.promise()},this._setupVectorLayer=function(t){var i=$.Deferred();return e._getVectorLayerConfig(t.name).then(function(n){var r=n.vector,o=e._createVectorLayer({geometrytype:r.geometrytype,format:r.format,crs:"EPSG:3003",id:t.id,name:t.name,pk:r.pk});o.setFields(r.fields);var s=r.relations;s&&(o.lazyRelations=!0,o.setRelations(s)),t.style&&o.setStyle(t.style),i.resolve(o)}).fail(function(){i.reject()}),i.promise()},this._loadVectorData=function(e,t){var i=this;return i._getVectorLayerData(e,t).then(function(t){return e.setData(t.vector.data),t})},this._getVectorLayerConfig=function(e){var t=$.Deferred();return $.get(this.config.baseurl+e+"/?config").done(function(e){t.resolve(e)}).fail(function(){t.reject()}),t.promise()},this._getVectorLayerData=function(e,t){var i=$.Deferred();return $.get(this.config.baseurl+e.name+"/?editing&in_bbox="+t[0]+","+t[1]+","+t[2]+","+t[3]).done(function(e){i.resolve(e)}).fail(function(){i.reject()}),i.promise()},this._postData=function(e){if(e.length>1)return this._postBatchData(e);var t=e[0].layername,i=e[0].edits,n=JSON.stringify(i);return $.post({url:this.config.baseurl+t+"/",data:n,contentType:"application/json"})},this._postBatchData=function(e){var t={};_.forEach(e,function(e){t[e.layername]=e.edits});var i=JSON.stringify(t);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._unlockLayer(e.config.layers[t])})},this._unlockLayer=function(e){$.get(this.config.baseurl+e.name+"/?unlock")},this._createVectorLayer=function(e,t){var i=new l(e);return i}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").resolvedValue,s=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject")),a=(e("g3w/core/projectservice"),e("g3w/core/mapservice")),l=e("g3w/core/vectorlayer"),c=e("g3w/gui/gui"),u=e("./editors/accessieditor"),d=e("./editors/giunzionieditor"),h=e("./editors/stradeeditor"),f={cutline:["Seleziona la strada da tagliare","Seleziona la giunzione di taglio","Seleziona la porizione di strada originale da mantenere"]};r(n,s),t.exports=new n},{"./editors/accessieditor":81,"./editors/giunzionieditor":83,"./editors/stradeeditor":85,"g3w/core/g3wobject":28,"g3w/core/mapservice":33,"g3w/core/projectservice":36,"g3w/core/utils":40,"g3w/core/vectorlayer":41,"g3w/gui/gui":55}],87:[function(e,t,i){function n(){var e=this;this.config=null,this.name="iternet",this.tools=[{name:"ITERNET",actions:[{id:"iternet:startEditing",name:"Gestione dati"}]}],this.init=function(t){this.config=t,o.onafter("setCurrentProject",function(i){e.isCurrentProjectCompatible(t)&&(c.init(e.config),s.activate(e))})},this.isCurrentProjectCompatible=function(e){var t=e.gid,i=o.getCurrentProject();return t==i.gid},this.startEditing=function(){var e=new u;a.showPanel(e)}}var r=e("g3w/core/utils").inherit,o=(e("g3w/core/utils").resolvedValue,e("g3w/core/utils").rejectedValue,e("g3w/core/projectsregistry")),s=e("g3w/core/pluginsregistry"),a=e("g3w/gui/gui"),l=e("g3w/core/plugin"),c=e("./iternetservice"),u=e("./editorpanel");r(n,l),t.exports=new n},{"./editorpanel":80,"./iternetservice":86,"g3w/core/plugin":34,"g3w/core/pluginsregistry":35,"g3w/core/projectsregistry":37,"g3w/core/utils":40,"g3w/gui/gui":55}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
