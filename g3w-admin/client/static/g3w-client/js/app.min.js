!function e(t,i,n){function a(r,s){if(!i[r]){if(!t[r]){var l="function"==typeof require&&require;if(!s&&l)return l(r,!0);if(o)return o(r,!0);var c=new Error("Cannot find module '"+r+"'");throw c.code="MODULE_NOT_FOUND",c}var d=i[r]={exports:{}};t[r][0].call(d.exports,function(e){var i=t[r][1][e];return a(i?i:e)},d,d.exports,e,t,i,n)}return i[r].exports}for(var o="function"==typeof require&&require,r=0;r<n.length;r++)a(n[r]);return a}({1:[function(e,t,i){function n(){r=new Vue({el:"body",data:{iface:o}}),setTimeout(function(){var t=e("g3w/core/layers/layersregistry"),i=t.getLayersTree();i[0].title="POI"},5e3)}var a=e("i18n.service"),o=(e("app.ui"),e("app.service")),r=null,s={client:{debug:!0,local:!1},server:{urls:{ows:"/ows",api:"/api",config:"/api/config"}},group:null};s.client.local?s.group=e("./test.inline_config").group:s.group=initConfig.group,s.client.debug&&(Vue.config.debug=!0),Vue.filter("t",function(e){return a(e)}),function(){o.setup(s),o.on("ready",function(){n()})}()},{"./test.inline_config":14,"app.service":3,"app.ui":4,"g3w/core/layers/layersregistry":15,"i18n.service":5}],2:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    \n    \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Sidebar toggle button-->\n      <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Toggle navigation</span>\n      </a>\n\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n              \n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  \n  <sidebar :iface="iface">\n  </sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper">\n    <!-- Content Header (Page header) -->\n    <section class="content-header">\n      \n\n    </section>\n    <!-- /.content -->\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],3:[function(e,t,i){function n(){var e=this;this.title="G3W Client",this.config=null,this.projectConfig=null,this.setup=function(t){this.config=t,o.once("loaded",function(){e.emit("ready")}),o.setup(t)}}var a=e("g3w/core/utils").inherit,o=e("g3w/core/layers/layersregistry");a(n,EventEmitter),t.exports=new n},{"g3w/core/layers/layersregistry":15,"g3w/core/utils":18}],4:[function(e,t,i){var n=(e("i18n.service"),e("layout/layout"));Vue.component("app",{template:e("./app.html"),props:["iface"],ready:function(){n.setup()}})},{"./app.html":2,"i18n.service":5,"layout/layout":8}],5:[function(e,t,i){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e("../locales/it/app.json")});var n=function(e){var t=i18next.t(e);return t};t.exports=n},{"../locales/it/app.json":13}],6:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-dark">\n\n</aside>\n'},{}],7:[function(e,t,i){Vue.component("floatbar",{template:e("./floatbar.html")})},{"./floatbar.html":6}],8:[function(e,t,i){if(e("./sidebar/sidebar"),e("./floatbar/floatbar"),"undefined"==typeof jQuery)throw new Error("AdminLTE requires jQuery");$.AdminLTE={},$.AdminLTE.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!0,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.AdminLTE._init=function(){"use strict";return $.AdminLTE.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight());else{var n;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),n=t-e):($(".content-wrapper, .right-side").css("min-height",i),n=i);var a=$($.AdminLTE.options.controlSidebarOptions.selector);"undefined"!=typeof a&&a.height()>n&&$(".content-wrapper, .right-side").css("min-height",a.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.AdminLTE.options.sidebarSlimScroll&&"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.AdminLTE.pushMenu={activate:function(e){var t=$.AdminLTE.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.AdminLTE.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.AdminLTE.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.AdminLTE.tree=function(e){var t=this,i=$.AdminLTE.options.animationSpeed;$(document).on("click",e+" li a",function(e){var n=$(this),a=n.next();if(a.is(".treeview-menu")&&a.is(":visible"))a.slideUp(i,function(){a.parent("li").removeClass("active"),a.removeClass("menu-open")});else if(a.is(".treeview-menu")&&!a.is(":visible")){var o,r=n.parents("ul").first(),s=n.parent("li"),l=s.siblings(),c=r.height()-r.find("li.header").outerHeight(),d=s.outerHeight();l.not(".header").each(function(e,t){d+=$(t).find("a").outerHeight()}),a.css({height:c-d+"px"});var u=r.find("ul:visible").slideUp(i);u.removeClass("menu-open"),a.slideDown(i,function(){a.addClass("menu-open"),o=r.find("li.active"),o.removeClass("active"),s.addClass("active"),t.layout.fix()})}a.is(".treeview-menu")&&e.preventDefault()})},$.AdminLTE.controlSidebar={activate:function(){var e=this,t=$.AdminLTE.options.controlSidebarOptions,i=$(t.selector),n=$(t.toggleBtnSelector);n.on("click",function(n){n.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var a=$(".control-sidebar-bg");e._fix(a),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.AdminLTE.boxWidget={selectors:$.AdminLTE.options.boxWidgetOptions.boxWidgetSelectors,icons:$.AdminLTE.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.AdminLTE.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),n=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),n.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),n.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.AdminLTE},$.AdminLTE.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(a),n.onLoadStart.call(e)}function i(e){e.find(a).remove(),n.onLoadDone.call(e)}var n=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),a=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===n.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),a=e.find(n.trigger).first();a.on("click",function(a){a.preventDefault(),t(e),e.find(".box-body").load(n.source,function(){i(e)})})})},$.AdminLTE},$.AdminLTE.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.AdminLTE.boxWidget.activate(this)},$.AdminLTE},$.AdminLTE.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.AdminLTE},$.AdminLTE.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof AdminLTEOptions&&$.extend(!0,$.AdminLTE.options,AdminLTEOptions);var e=$.AdminLTE.options;return $.AdminLTE._init(),$.AdminLTE.layout.activate(),$.AdminLTE.tree(".sidebar"),e.enableControlSidebar&&$.AdminLTE.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.AdminLTE.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.AdminLTE.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.AdminLTE.addRefreshButton().activateBox().listCustomPlugin()},t.exports=$.AdminLTE},{"./floatbar/floatbar":7,"./sidebar/sidebar":12}],9:[function(e,t,i){t.exports='<li class="treeview">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span>{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],10:[function(e,t,i){t.exports='<div class="col-md-6 col-sm-6 col-xs-12 sidebar-tool">\n  <div class="tool-box">\n    <span class="tool-box-icon bg-aqua"><i class="fa" :class="dataIcon"></i></span>\n    <div class="tool-box-content">\n      <span class="tool-box-name">Iternet</span>\n    </div>\n    <!-- /.info-box-content -->\n  </div>\n  <!-- /.info-box -->\n</div>\n'},{}],11:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n	<section class="sidebar">\n	  <ul class="sidebar-menu">\n	    <sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n          <g3w-search :layersservice="iface.layersService"></g3w-search>\n        </sidebar-item>\n        <sidebar-item data-icon="fa fa-database" data-label="catalog" data-type="inline">\n          <g3w-catalog :layersservice="iface.layersService"></g3w-catalog>\n        </sidebar-item>\n        <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n            <sidebar-tool data-icon="fa fa-database">\n                <irpi></irpi>\n            </sidebar-tool>\n            <!--<sidebar-tool>\n                <altrotool></altrotool>\n            </sidebar-tool>\n            <sidebar-tool>\n                <altrotoolancora></altrotoolancora>\n            </sidebar-tool>-->\n        </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],12:[function(e,t,i){var n=e("i18n.service");e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),Vue.component("sidebar",{template:e("./sidebar.html"),props:["iface"],data:function(){return{layersService:this.iface.layersService,bOpen:!0,bPageMode:!1,header:n("main navigation")}},methods:{activeModule:function(e){return this.currentModule===e?(this.currentModule=void 0,!1):void(this.currentModule=e)}}}),Vue.component("sidebar-item",{props:["data-icon","data-label","data-type"],template:e("./sidebar-item.html"),data:function(){return{main:!0}},methods:{}}),Vue.component("sidebar-tool",{props:["data-icon","data-label","data-content","data-component"],template:e("./sidebar-tool.html"),data:function(){return{main:!0}},methods:{}})},{"./sidebar-item.html":9,"./sidebar-tool.html":10,"./sidebar.html":11,"g3w/gui/catalog/catalog":20,"g3w/gui/search/search":22,"i18n.service":5}],13:[function(e,t,i){t.exports={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",tools:"Strumenti"}}}},{}],14:[function(e,t,i){var n={baseUrl:"",group:{name:"Test group",id:"test_group",minscale:1e8,maxscale:1,crs:32632,baselayers:[],projects:[{type:"qdjango",name:"Open Data Firenze",id:"open_data_firenze"}],initproject:{type:"qdjango",name:"Open Data Firenze",id:"open_data_firenze"},overviewproject:null}};t.exports=n},{}],15:[function(e,t,i){function n(){var e=this;this.setup=function(t){r.setup(t).then(function(){e.emit("loaded")})},this.getLayersStore=function(){return r.layersStore},this.getLayersTree=function(){var e=r.layersStore.getLayersTree();return _.isNull(e)&&(e=[]),e}}var a=e("g3w/core/utils").inherit,o=e("./layersstore");a(n,EventEmitter);var r={initialized:!1,config:null,currentProject:null,layersStore:null,setup:function(e){return this.initialized?void 0:(this.config=e,this.loadProject(e.group.initproject))},loadProject:function(e){if(this.projectAvailable(e)){var t=this;return this.getProjectConfig(e).then(function(e){t.currentProject=e,t.layersStore=new o({layers:e.layers,layersTree:e.layerstree}),t.initialized=!0})}},projectAvailable:function(e){var t=!1;return _.forEach(this.config.group.projects,function(i){i.type==e.type&&i.id==e.id&&(t=!0)}),t},getProjectConfig:function(t){var i=Q.defer();if(this.config.client.local)setTimeout(function(){var t=e("./test.project_config");i.resolve(t)},100);else{var n=this.config.server.urls.config+"/"+this.config.group.id+"/"+t.type+"/"+t.id;$.get(n).done(function(e){i.resolve(e)})}return i.promise}};t.exports=new n},{"./layersstore":16,"./test.project_config":17,"g3w/core/utils":18}],16:[function(e,t,i){function n(e){var t=new a(e);this.getLayers=function(){return t.getLayers()},this.getLayersTree=function(){return t.getLayersTree()}}function a(e){var t=this.makeLayersObj(e.layers),i=this.fillLayersTree(e.layersTree,t);this.layers=t,this.layersTree=i}a.prototype.makeLayersObj=function(e){return _.keyBy(e,"id")},a.prototype.fillLayersTree=function(e,t){function i(e){_.forIn(e,function(e,n){_.isNil(e.id)||(e.title=t[e.id].title),_.isNil(e.nodes)||(e.title=e.name,i(e.nodes))})}var n=_.cloneDeep(e);return i(n),n},a.prototype.getLayers=function(){return this.layers},a.prototype.getLayersTree=function(){return this.layersTree},t.exports=n},{}],17:[function(e,t,i){var n={id:"open_data_firenze",name:"Open Data Firenze",extent:[680146.2665581744,4849613.360996419,680654.9281851923,4850025.218814352],layers:[{id:"Unioni_Comuni_Toscana20160316113324322",title:"Unioni Comuni Toscana",name:"uct",crs:32632,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!1,minscale:null,maxscale:null,infourl:"",inforformat:"",capabilities:1,editops:null,metalayer:1},{id:"alberi20160316112747010",title:"Alberi",name:"alberi",crs:3857,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!0,minscale:1e4,maxscale:1,infourl:"",inforformat:"",capabilities:2,editops:7,metalayer:1},{id:"farmacie20160316113417025",title:"Farmacie",name:"farmacie",crs:3857,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!1,minscale:null,maxscale:null,infourl:"",inforformat:"",capabilities:2,editops:2,metalayer:1},{id:"musei20160316112726261",title:"Musei",name:"musei",crs:3003,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!1,minscale:null,maxscale:null,infourl:"",inforformat:"",capabilities:1,editops:null,metalayer:1},{id:"strade20160316113013257",title:"Strade",name:"strade",crs:3857,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!1,minscale:null,maxscale:null,infourl:"",inforformat:"",capabilities:1,editops:null,metalayer:1},{id:"strutture20160316113225408",title:"Grandi strutture",name:"grandi_strutture",crs:3003,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!1,minscale:null,maxscale:null,infourl:"",inforformat:"",capabilities:1,editops:null,metalayer:1},{id:"tracciato_tram20160316113305421",title:"Tracciato tram",name:"tracciato_tram",crs:3003,style:"",attributes:[{name:"",type:""}],scalebasedvisibility:!1,minscale:null,maxscale:null,infourl:"",inforformat:"",capabilities:1,editops:null,metalayer:1}],layerstree:[{name:"punti",expanded:!0,nodes:[{id:"strutture20160316113225408",visible:!1},{id:"alberi20160316112747010",visible:!1},{id:"farmacie20160316113417025",visible:!0},{id:"musei20160316112726261",visible:!0}]},{name:"linee",expanded:!1,nodes:[{id:"tracciato_tram20160316113305421",visible:!0},{id:"strade20160316113013257",visible:!0}]},{id:"Unioni_Comuni_Toscana20160316113324322",visible:!0}],search:{}};t.exports=n},{}],18:[function(e,t,i){var n={inherit:function(e,t,i){var a=e.prototype=n.createObject(t.prototype);a.constructor=e,(i||"undefined"==typeof i)&&(e._super=t.prototype)},createObject:Object.create||function(e){var t=function(){};return t.prototype=e,new t},mixin:function(e,t){return n.merge(e.prototype,t)},merge:function(e,t){var i;for(i in t)n.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};t.exports=n},{}],19:[function(e,t,i){t.exports='<div class="tabbable-panel">\n    <div class="tabbable-line">\n        <ul class="nav nav-tabs" role="tablist">\n            <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab">Tree</a></li>\n            <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab">Legend</a></li>\n        </ul>\n        <div  class="tab-content">\n            <div role="tabpanel" class="tab-pane active" id="tree"></div>\n            <div role="tabpanel" class="tab-pane" id="legend"></div>\n        </div>\n    </div>\n</div>\n'},{}],20:[function(e,t,i){var n=(e("i18n.service"),e("g3w/core/layers/layersregistry"));Vue.component("g3w-catalog",{template:e("./catalog.html"),props:["layersservice"],data:function(){return{layerstree:n.getLayersTree()}},methods:{createlayerstree:function(){var e=$("#tree");e.treeview({data:this.layerstree,showIcon:!1}),e.treeview("collapseAll",{silent:!0})}},watch:{layerstree:{handler:function(e,t){this.createlayerstree()},deep:!0}},ready:function(){this.createlayerstree()}})},{"./catalog.html":19,"g3w/core/layers/layersregistry":15,"i18n.service":5}],21:[function(e,t,i){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],22:[function(e,t,i){e("i18n.service");Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":21,"i18n.service":5}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwxLCJtb2R1bGUiLCJydW4iLCJhcHAiLCJWdWUiLCJlbCIsImRhdGEiLCJpZmFjZSIsImFwcFNlcnZpY2UiLCJzZXRUaW1lb3V0IiwibGF5ZXJzUmVnaXN0cnkiLCJ0cmVlIiwiZ2V0TGF5ZXJzVHJlZSIsInRpdGxlIiwiY29uZmlnIiwiY2xpZW50IiwiZGVidWciLCJsb2NhbCIsInNlcnZlciIsInVybHMiLCJvd3MiLCJhcGkiLCJncm91cCIsImluaXRDb25maWciLCJmaWx0ZXIiLCJ2YWx1ZSIsInNldHVwIiwib24iLCIuL3Rlc3QuaW5saW5lX2NvbmZpZyIsImFwcC5zZXJ2aWNlIiwiYXBwLnVpIiwiZzN3L2NvcmUvbGF5ZXJzL2xheWVyc3JlZ2lzdHJ5IiwiaTE4bi5zZXJ2aWNlIiwyLDMsInNlcnZpY2UiLCJzZWxmIiwidGhpcyIsInByb2plY3RDb25maWciLCJvbmNlIiwiZW1pdCIsImluaGVyaXQiLCJFdmVudEVtaXR0ZXIiLCJnM3cvY29yZS91dGlscyIsNCwibGF5b3V0IiwiY29tcG9uZW50IiwidGVtcGxhdGUiLCJwcm9wcyIsInJlYWR5IiwiLi9hcHAuaHRtbCIsImxheW91dC9sYXlvdXQiLDUsImkxOG5leHQiLCJ1c2UiLCJpMThuZXh0WEhSQmFja2VuZCIsImluaXQiLCJsbmciLCJucyIsImZhbGxiYWNrTG5nIiwicmVzb3VyY2VzIiwidGV4dCIsInRyYWQiLCIuLi9sb2NhbGVzL2l0L2FwcC5qc29uIiw2LDcsIi4vZmxvYXRiYXIuaHRtbCIsOCwialF1ZXJ5IiwiJCIsIkFkbWluTFRFIiwib3B0aW9ucyIsIm5hdmJhck1lbnVTbGltc2Nyb2xsIiwibmF2YmFyTWVudVNsaW1zY3JvbGxXaWR0aCIsIm5hdmJhck1lbnVIZWlnaHQiLCJhbmltYXRpb25TcGVlZCIsInNpZGViYXJUb2dnbGVTZWxlY3RvciIsInNpZGViYXJQdXNoTWVudSIsInNpZGViYXJTbGltU2Nyb2xsIiwic2lkZWJhckV4cGFuZE9uSG92ZXIiLCJlbmFibGVCb3hSZWZyZXNoIiwiZW5hYmxlQlNUb3BwbHRpcCIsIkJTVG9vbHRpcFNlbGVjdG9yIiwiZW5hYmxlRmFzdGNsaWNrIiwiZW5hYmxlQ29udHJvbFNpZGViYXIiLCJjb250cm9sU2lkZWJhck9wdGlvbnMiLCJ0b2dnbGVCdG5TZWxlY3RvciIsInNlbGVjdG9yIiwic2xpZGUiLCJlbmFibGVCb3hXaWRnZXQiLCJib3hXaWRnZXRPcHRpb25zIiwiYm94V2lkZ2V0SWNvbnMiLCJjb2xsYXBzZSIsIm9wZW4iLCJyZW1vdmUiLCJib3hXaWRnZXRTZWxlY3RvcnMiLCJkaXJlY3RDaGF0IiwiZW5hYmxlIiwiY29udGFjdFRvZ2dsZVNlbGVjdG9yIiwiY29sb3JzIiwibGlnaHRCbHVlIiwicmVkIiwiZ3JlZW4iLCJhcXVhIiwieWVsbG93IiwiYmx1ZSIsIm5hdnkiLCJ0ZWFsIiwib2xpdmUiLCJsaW1lIiwib3JhbmdlIiwiZnVjaHNpYSIsInB1cnBsZSIsIm1hcm9vbiIsImJsYWNrIiwiZ3JheSIsInNjcmVlblNpemVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJfaW5pdCIsImFjdGl2YXRlIiwiX3RoaXMiLCJmaXgiLCJmaXhTaWRlYmFyIiwid2luZG93IiwicmVzaXplIiwibmVnIiwib3V0ZXJIZWlnaHQiLCJ3aW5kb3dfaGVpZ2h0IiwiaGVpZ2h0Iiwic2lkZWJhcl9oZWlnaHQiLCJoYXNDbGFzcyIsImNzcyIsInBvc3RTZXRXaWR0aCIsImNvbnRyb2xTaWRlYmFyIiwiZm4iLCJzbGltU2Nyb2xsIiwiY29uc29sZSIsImVycm9yIiwiZGVzdHJveSIsInNsaW1zY3JvbGwiLCJjb2xvciIsInNpemUiLCJwdXNoTWVudSIsInRvZ2dsZUJ0biIsInByZXZlbnREZWZhdWx0Iiwid2lkdGgiLCJyZW1vdmVDbGFzcyIsInRyaWdnZXIiLCJhZGRDbGFzcyIsImNsaWNrIiwiZXhwYW5kT25Ib3ZlciIsInNjcmVlbldpZHRoIiwiaG92ZXIiLCJleHBhbmQiLCJtZW51IiwiZG9jdW1lbnQiLCIkdGhpcyIsImNoZWNrRWxlbWVudCIsIm5leHQiLCJpcyIsInNsaWRlVXAiLCJwYXJlbnQiLCJwYXJlbnRfZmluZF9hY3RpdmUiLCJwYXJlbnRzIiwiZmlyc3QiLCJwYXJlbnRfbGkiLCJsaV9zaWJsaW5ncyIsInNpYmxpbmdzIiwic2lkZWJhcl9jb250ZW50X2hlaWdodCIsImZpbmQiLCJ0cmVldmlld0hlaWdodCIsIm5vdCIsImVhY2giLCJpbmRleCIsInVsIiwic2xpZGVEb3duIiwic2lkZWJhciIsImJ0biIsImNsb3NlIiwiYmciLCJfZml4IiwiX2ZpeEZvckZpeGVkIiwiX2ZpeEZvckNvbnRlbnQiLCJwb3NpdGlvbiIsIm1heC1oZWlnaHQiLCJvdmVyZmxvdyIsInBhZGRpbmctYm90dG9tIiwiYm94V2lkZ2V0Iiwic2VsZWN0b3JzIiwiaWNvbnMiLCJfYm94IiwiZWxlbWVudCIsImJveCIsImJveF9jb250ZW50IiwiY2hpbGRyZW4iLCJhZGRSZWZyZXNoQnV0dG9uIiwiYm94UmVmcmVzaCIsInN0YXJ0IiwiYXBwZW5kIiwib3ZlcmxheSIsInNldHRpbmdzIiwib25Mb2FkU3RhcnQiLCJkb25lIiwib25Mb2FkRG9uZSIsImV4dGVuZCIsInNvdXJjZSIsImxvZyIsInJCdG4iLCJsb2FkIiwiYWN0aXZhdGVCb3giLCJsaXN0Q3VzdG9tUGx1Z2luIiwidG9kb2xpc3QiLCJvbkNoZWNrIiwiZWxlIiwib25VbmNoZWNrIiwiaUNoZWNrIiwidG9nZ2xlQ2xhc3MiLCJBZG1pbkxURU9wdGlvbnMiLCJhbHdheXNWaXNpYmxlIiwidG9vbHRpcCIsIkZhc3RDbGljayIsImF0dGFjaCIsImJvZHkiLCIuL2Zsb2F0YmFyL2Zsb2F0YmFyIiwiLi9zaWRlYmFyL3NpZGViYXIiLDksMTAsMTEsMTIsImxheWVyc1NlcnZpY2UiLCJiT3BlbiIsImJQYWdlTW9kZSIsImhlYWRlciIsIm1ldGhvZHMiLCJhY3RpdmVNb2R1bGUiLCJjdXJyZW50TW9kdWxlIiwidW5kZWZpbmVkIiwibWFpbiIsIi4vc2lkZWJhci1pdGVtLmh0bWwiLCIuL3NpZGViYXItdG9vbC5odG1sIiwiLi9zaWRlYmFyLmh0bWwiLCJnM3cvZ3VpL2NhdGFsb2cvY2F0YWxvZyIsImczdy9ndWkvc2VhcmNoL3NlYXJjaCIsMTMsIml0IiwidHJhbnNsYXRpb24iLCJzZWFyY2giLCJjYXRhbG9nIiwidG9vbHMiLDE0LCJiYXNlVXJsIiwibmFtZSIsImlkIiwibWluc2NhbGUiLCJtYXhzY2FsZSIsImNycyIsImJhc2VsYXllcnMiLCJwcm9qZWN0cyIsInR5cGUiLCJpbml0cHJvamVjdCIsIm92ZXJ2aWV3cHJvamVjdCIsMTUsIl9zZXJ2aWNlIiwidGhlbiIsImdldExheWVyc1N0b3JlIiwibGF5ZXJzU3RvcmUiLCJsYXllcnNUcmVlIiwiXyIsImlzTnVsbCIsIkxheWVyc1N0b3JlIiwiaW5pdGlhbGl6ZWQiLCJjdXJyZW50UHJvamVjdCIsImxvYWRQcm9qZWN0IiwicHJvamVjdCIsInByb2plY3RBdmFpbGFibGUiLCJnZXRQcm9qZWN0Q29uZmlnIiwibGF5ZXJzIiwibGF5ZXJzdHJlZSIsImV4aXN0cyIsImZvckVhY2giLCJ2YWwiLCJkZWZlcnJlZCIsIlEiLCJkZWZlciIsInJlc29sdmUiLCJ1cmwiLCJnZXQiLCJwcm9taXNlIiwiLi9sYXllcnNzdG9yZSIsIi4vdGVzdC5wcm9qZWN0X2NvbmZpZyIsMTYsImluc3RhbmNlIiwiX3N0b3JlIiwiZ2V0TGF5ZXJzIiwibWFrZUxheWVyc09iaiIsImZpbGxMYXllcnNUcmVlIiwicHJvdG90eXBlIiwibGF5ZXJzQ29uZmlnIiwia2V5QnkiLCJ0cmF2ZXJzZSIsIm9iaiIsImZvckluIiwia2V5IiwiaXNOaWwiLCJub2RlcyIsIl9sYXllcnNUcmVlIiwiY2xvbmVEZWVwIiwxNywiZXh0ZW50Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwic2NhbGViYXNlZHZpc2liaWxpdHkiLCJpbmZvdXJsIiwiaW5mb3Jmb3JtYXQiLCJjYXBhYmlsaXRpZXMiLCJlZGl0b3BzIiwibWV0YWxheWVyIiwiZXhwYW5kZWQiLCJ2aXNpYmxlIiwxOCwidXRpbHMiLCJkZXN0aW5hdGlvbiIsImFkZFN1cGVyIiwicHJvdG8iLCJjcmVhdGVPYmplY3QiLCJjb25zdHJ1Y3RvciIsIl9zdXBlciIsIk9iamVjdCIsImNyZWF0ZSIsIkhvc3QiLCJtaXhpbiIsIm1lcmdlIiwiaGFzT3duIiwib2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLDE5LDIwLCJjcmVhdGVsYXllcnN0cmVlIiwidHJlZXZpZXciLCJzaG93SWNvbiIsInNpbGVudCIsIndhdGNoIiwiaGFuZGxlciIsIm9sZCIsImRlZXAiLCIuL2NhdGFsb2cuaHRtbCIsMjEsMjIsIi4vc2VhcmNoLmh0bWwiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxJQUFJSyxHQUFFLEdBQUlDLE9BQU0sdUJBQXVCTixFQUFFLElBQUssTUFBTUssR0FBRUUsS0FBSyxtQkFBbUJGLEVBQUUsR0FBSUcsR0FBRVgsRUFBRUcsSUFBSVMsV0FBWWIsR0FBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FBRUcsR0FBR1MsUUFBa0QsSUFBSSxHQUExQ0wsR0FBa0Isa0JBQVRELFVBQXFCQSxRQUFn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ZUFBZSxJQUFJNlQsSUFBSSxTQUFTdFcsRUFBUVUsRUFBT0osR0FDMUdJLEVBQU9KLFFBQVUscVpBRVhpVyxJQUFJLFNBQVN2VyxFQUFRVSxFQUFPSixHQUMxQk4sRUFBUSxlQUVoQmEsS0FBSTBDLFVBQVUsY0FDVkMsU0FBVXhELEVBQVEsaUJBQ2xCZSxLQUFNLFdBQ0wsVUFJRHNPLGVBS0RtSCxnQkFBZ0IsR0FBRy9ULGVBQWUsU0FBUyIsImZpbGUiOiJidWlsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB0ID0gcmVxdWlyZSgnaTE4bi5zZXJ2aWNlJyk7XG52YXIgYXBwVWkgPSByZXF1aXJlKCdhcHAudWknKTtcbnZhciBhcHBTZXJ2aWNlID0gcmVxdWlyZSgnYXBwLnNlcnZpY2UnKTtcbnZhciBhcHAgPSBudWxsO1xuXG4vKiBleGFtcGxlIG9mIGNvbmZpZ3VyYXRpb24gaW4gbGluZSAqL1xuXG5cbnZhciBjb25maWcgPSB7XG4gIGNsaWVudDoge1xuICAgIGRlYnVnOiB0cnVlLFxuICAgIGxvY2FsOiBmYWxzZVxuICB9LFxuICBzZXJ2ZXI6IHtcbiAgICAgIHVybHM6IHtcbiAgICAgICAgb3dzOiAnL293cycsXG4gICAgICAgIGFwaTogJy9hcGknLFxuICAgICAgICBjb25maWc6ICcvYXBpL2NvbmZpZydcbiAgICAgIH1cbiAgfSxcbiAgZ3JvdXA6IG51bGxcbn1cblxuaWYgKGNvbmZpZy5jbGllbnQubG9jYWwpIHtcbiAgY29uZmlnLmdyb3VwID0gcmVxdWlyZSgnLi90ZXN0LmlubGluZV9jb25maWcnKS5ncm91cDtcbn1cbmVsc2Uge1xuICBjb25maWcuZ3JvdXAgPSBpbml0Q29uZmlnLmdyb3VwOyAvLyBjb25maWcgaXMgaW5saW5lZCBieSBnM3ctYWRtaW4gaW5zaWRlIHRoZSBpbmRleCB0ZW1wbGF0ZSBhcyBhIDxzY3JpcHQ+IHRhZ1xufVxuXG5pZiAoY29uZmlnLmNsaWVudC5kZWJ1Zyl7XG4gIFZ1ZS5jb25maWcuZGVidWcgPSB0cnVlO1xufVxuXG5WdWUuZmlsdGVyKCd0JywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0KHZhbHVlKTtcbn0pO1xuXG5mdW5jdGlvbiBydW4oKXtcbiAgYXBwID0gbmV3IFZ1ZSh7XG4gICAgZWw6ICdib2R5JyxcbiAgICBkYXRhOiB7XG4gICAgICBpZmFjZTogYXBwU2VydmljZVxuICAgIH1cbiAgfSk7XG4gIFxuICAvLyB0ZXN0IGFnZ2lvcm5hbWVudG8gYWxiZXJvXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICB2YXIgbGF5ZXJzUmVnaXN0cnkgPSByZXF1aXJlKCdnM3cvY29yZS9sYXllcnMvbGF5ZXJzcmVnaXN0cnknKTtcbiAgICB2YXIgdHJlZSA9IGxheWVyc1JlZ2lzdHJ5LmdldExheWVyc1RyZWUoKTtcbiAgICB0cmVlWzBdLnRpdGxlID0gXCJQT0lcIjtcbiAgfSw1MDAwKVxufVxuXG4oZnVuY3Rpb24gKCl7XG4gIGFwcFNlcnZpY2Uuc2V0dXAoY29uZmlnKTtcbiAgYXBwU2VydmljZS5vbigncmVhZHknLGZ1bmN0aW9uKCl7XG4gICAgcnVuKCk7XG4gIH0pO1xufSkoKTtcblxufSx7XCIuL3Rlc3QuaW5saW5lX2NvbmZpZ1wiOjE0LFwiYXBwLnNlcnZpY2VcIjozLFwiYXBwLnVpXCI6NCxcImczdy9jb3JlL2xheWVycy9sYXllcnNyZWdpc3RyeVwiOjE1LFwiaTE4bi5zZXJ2aWNlXCI6NX1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIndyYXBwZXJcXFwiPlxcbiAgPGhlYWRlciBjbGFzcz1cXFwibWFpbi1oZWFkZXJcXFwiPlxcbiAgICA8IS0tIExvZ28gLS0+XFxuICAgIDwhLS0gXFxuICAgIFxcbiAgICBcXG4gICAgLS0+XFxuICAgIDwhLS0gSGVhZGVyIE5hdmJhcjogc3R5bGUgY2FuIGJlIGZvdW5kIGluIGhlYWRlci5sZXNzIC0tPlxcbiAgICA8bmF2IGNsYXNzPVxcXCJuYXZiYXIgbmF2YmFyLXN0YXRpYy10b3BcXFwiIHJvbGU9XFxcIm5hdmlnYXRpb25cXFwiPlxcbiAgICAgIDwhLS0gU2lkZWJhciB0b2dnbGUgYnV0dG9uLS0+XFxuICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcInNpZGViYXItdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1cXFwib2ZmY2FudmFzXFxcIiByb2xlPVxcXCJidXR0b25cXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPlxcbiAgICAgIDwvYT5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJuYXZiYXItY3VzdG9tLW1lbnVcXFwiPlxcbiAgICAgICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2YmFyLW5hdlxcXCI+XFxuICAgICAgICAgICAgICBcXG4gICAgICAgIDwvdWw+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvbmF2PlxcbiAgPC9oZWFkZXI+XFxuICA8IS0tIExlZnQgc2lkZSBjb2x1bW4uIGNvbnRhaW5zIHRoZSBsb2dvIGFuZCBzaWRlYmFyIC0tPlxcbiAgXFxuICA8c2lkZWJhciA6aWZhY2U9XFxcImlmYWNlXFxcIj5cXG4gIDwvc2lkZWJhcj5cXG5cXG4gIDwhLS0gQ29udGVudCBXcmFwcGVyLiBDb250YWlucyBwYWdlIGNvbnRlbnQgLS0+XFxuICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LXdyYXBwZXJcXFwiPlxcbiAgICA8IS0tIENvbnRlbnQgSGVhZGVyIChQYWdlIGhlYWRlcikgLS0+XFxuICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJjb250ZW50LWhlYWRlclxcXCI+XFxuICAgICAgXFxuXFxuICAgIDwvc2VjdGlvbj5cXG4gICAgPCEtLSAvLmNvbnRlbnQgLS0+XFxuICA8L2Rpdj5cXG4gIDwhLS0gLy5jb250ZW50LXdyYXBwZXIgLS0+XFxuICBcXG4gIDwhLS0gXFxuICA8Zm9vdGVyIGNsYXNzPVxcXCJtYWluLWZvb3RlclxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInB1bGwtcmlnaHQgaGlkZGVuLXhzXFxcIj5cXG4gICAgICA8Yj5WZXJzaW9uPC9iPiAyLjMuMlxcbiAgICA8L2Rpdj5cXG4gICAgPHN0cm9uZz5Db3B5cmlnaHQgJmNvcHk7IDIwMTQtMjAxNSA8YSBocmVmPVxcXCJodHRwOi8vYWxtc2FlZWRzdHVkaW8uY29tXFxcIj5BbG1zYWVlZCBTdHVkaW88L2E+Ljwvc3Ryb25nPiBBbGwgcmlnaHRzXFxuICAgIHJlc2VydmVkLlxcbiAgPC9mb290ZXI+XFxuICAtLT5cXG5cXG4gIDwhLS0gQ29udHJvbCBTaWRlYmFyIC0tPlxcbiAgPGZsb2F0YmFyPjwvZmxvYXRiYXI+XFxuICA8IS0tIC8uY29udHJvbC1zaWRlYmFyIC0tPlxcbiAgPCEtLSBBZGQgdGhlIHNpZGViYXIncyBiYWNrZ3JvdW5kLiBUaGlzIGRpdiBtdXN0IGJlIHBsYWNlZFxcbiAgICAgICBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29udHJvbCBzaWRlYmFyIC0tPlxcbiAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1zaWRlYmFyLWJnXFxcIj48L2Rpdj5cXG48L2Rpdj5cXG5cIjtcblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKmxpYnJhcnkgaW5oZXJpdCB0b29scyAqL1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdnM3cvY29yZS91dGlscycpLmluaGVyaXQ7XG52YXIgbGF5ZXJzUmVnaXN0cnkgPSByZXF1aXJlKCdnM3cvY29yZS9sYXllcnMvbGF5ZXJzcmVnaXN0cnknKTtcblxuZnVuY3Rpb24gc2VydmljZSgpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnRpdGxlID0gXCJHM1cgQ2xpZW50XCI7XG4gICAgdGhpcy5jb25maWcgPSBudWxsO1xuICAgIHRoaXMucHJvamVjdENvbmZpZyA9IG51bGw7XG4gICAgXG4gICAgdGhpcy5zZXR1cCA9IGZ1bmN0aW9uKGNvbmZpZyl7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvL3VuYSB2b2x0YSBjaGUgbGEgY29uZmlndXJhemlvbmUgZScgc3RhdGEgdGVybWluYXRhIChldmVudG8gbG9hZGVuZCkgZW1lc3NvXG4gICAgICAgIC8vZGFsbCdvZ2dldHRvIGxheWVyc1JlZ2lzdHJ5IGRvcG8gYXZlciB0cm1pbmF0byBpbCBzZXR1cFxuICAgICAgICBsYXllcnNSZWdpc3RyeS5vbmNlKCdsb2FkZWQnLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZWxmLmVtaXQoJ3JlYWR5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL2luaXppYWxpenphIGxhIGNvbmZpZ3VyYXppb25lIGJhc2F0YSBzdWwgZ3J1cHBvIGRpIHByb2dldHRpXG4gICAgICAgIGxheWVyc1JlZ2lzdHJ5LnNldHVwKGNvbmZpZyk7XG4gICAgfTtcbn1cblxuaW5oZXJpdChzZXJ2aWNlLEV2ZW50RW1pdHRlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IHNlcnZpY2UoKTtcblxufSx7XCJnM3cvY29yZS9sYXllcnMvbGF5ZXJzcmVnaXN0cnlcIjoxNSxcImczdy9jb3JlL3V0aWxzXCI6MTh9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciB0ID0gcmVxdWlyZSgnaTE4bi5zZXJ2aWNlJyk7XG4vKiBsYXlvdXQgY29udGFpbnMgQWRtaW5MVEUgY29kZSBzdGFydHVwICovXG52YXIgbGF5b3V0ID0gcmVxdWlyZSgnbGF5b3V0L2xheW91dCcpO1xuXG5WdWUuY29tcG9uZW50KCdhcHAnLHtcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9hcHAuaHRtbCcpLFxuICAgIHByb3BzOiBbJ2lmYWNlJ10sXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCl7XG4gICAgICAvKiBzdGFydCB0byByZW5kZXIgQWRtaW5MVEUgbGF5b3V0ICovXG4gICAgICBsYXlvdXQuc2V0dXAoKTtcbiAgICB9XG59KTtcblxufSx7XCIuL2FwcC5odG1sXCI6MixcImkxOG4uc2VydmljZVwiOjUsXCJsYXlvdXQvbGF5b3V0XCI6OH1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuaTE4bmV4dFxuICAgIC51c2UoaTE4bmV4dFhIUkJhY2tlbmQpXG4gICAgLmluaXQoeyBcbiAgICAgICAgbG5nOiAnaXQnLFxuICAgICAgICBuczogJ2FwcCcsXG4gICAgICAgIGZhbGxiYWNrTG5nOiAnaXQnLFxuICAgICAgICByZXNvdXJjZXM6IHJlcXVpcmUoJy4uL2xvY2FsZXMvaXQvYXBwLmpzb24nKVxuICAgIH0pO1xuICAgIFxudmFyIHQgPSBmdW5jdGlvbih0ZXh0KXtcbiAgICB2YXIgdHJhZCA9IGkxOG5leHQudCh0ZXh0KTtcbiAgICByZXR1cm4gdHJhZDtcbn07XG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IHQ7XG5cbn0se1wiLi4vbG9jYWxlcy9pdC9hcHAuanNvblwiOjEzfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGFzaWRlIGNsYXNzPVxcXCJjb250cm9sLXNpZGViYXIgY29udHJvbC1zaWRlYmFyLWRhcmtcXFwiPlxcblxcbjwvYXNpZGU+XFxuXCI7XG5cbn0se31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuVnVlLmNvbXBvbmVudCgnZmxvYXRiYXInLHtcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9mbG9hdGJhci5odG1sJylcbn0pO1xuXG59LHtcIi4vZmxvYXRiYXIuaHRtbFwiOjZ9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnJlcXVpcmUoJy4vc2lkZWJhci9zaWRlYmFyJyk7XG5yZXF1aXJlKCcuL2Zsb2F0YmFyL2Zsb2F0YmFyJyk7XG5cbi8vTWFrZSBzdXJlIGpRdWVyeSBoYXMgYmVlbiBsb2FkZWQgYmVmb3JlIGFwcC5qc1xuaWYgKHR5cGVvZiBqUXVlcnkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiQWRtaW5MVEUgcmVxdWlyZXMgalF1ZXJ5XCIpO1xufVxuXG4vKiBBZG1pbkxURVxuICpcbiAqIEB0eXBlIE9iamVjdFxuICogQGRlc2NyaXB0aW9uICQuQWRtaW5MVEUgaXMgdGhlIG1haW4gb2JqZWN0IGZvciB0aGUgdGVtcGxhdGUncyBhcHAuXG4gKiAgICAgICAgICAgICAgSXQncyB1c2VkIGZvciBpbXBsZW1lbnRpbmcgZnVuY3Rpb25zIGFuZCBvcHRpb25zIHJlbGF0ZWRcbiAqICAgICAgICAgICAgICB0byB0aGUgdGVtcGxhdGUuIEtlZXBpbmcgZXZlcnl0aGluZyB3cmFwcGVkIGluIGFuIG9iamVjdFxuICogICAgICAgICAgICAgIHByZXZlbnRzIGNvbmZsaWN0IHdpdGggb3RoZXIgcGx1Z2lucyBhbmQgaXMgYSBiZXR0ZXJcbiAqICAgICAgICAgICAgICB3YXkgdG8gb3JnYW5pemUgb3VyIGNvZGUuXG4gKi9cbiQuQWRtaW5MVEUgPSB7fTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIC0gQWRtaW5MVEUgT3B0aW9ucyAtXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogTW9kaWZ5IHRoZXNlIG9wdGlvbnMgdG8gc3VpdCB5b3VyIGltcGxlbWVudGF0aW9uXG4gKi9cbiQuQWRtaW5MVEUub3B0aW9ucyA9IHtcbiAgLy9BZGQgc2xpbXNjcm9sbCB0byBuYXZiYXIgbWVudXNcbiAgLy9UaGlzIHJlcXVpcmVzIHlvdSB0byBsb2FkIHRoZSBzbGltc2Nyb2xsIHBsdWdpblxuICAvL2luIGV2ZXJ5IHBhZ2UgYmVmb3JlIGFwcC5qc1xuICBuYXZiYXJNZW51U2xpbXNjcm9sbDogdHJ1ZSxcbiAgbmF2YmFyTWVudVNsaW1zY3JvbGxXaWR0aDogXCIwcHhcIiwgLy9UaGUgd2lkdGggb2YgdGhlIHNjcm9sbCBiYXJcbiAgbmF2YmFyTWVudUhlaWdodDogXCIyMDBweFwiLCAvL1RoZSBoZWlnaHQgb2YgdGhlIGlubmVyIG1lbnVcbiAgLy9HZW5lcmFsIGFuaW1hdGlvbiBzcGVlZCBmb3IgSlMgYW5pbWF0ZWQgZWxlbWVudHMgc3VjaCBhcyBib3ggY29sbGFwc2UvZXhwYW5kIGFuZFxuICAvL3NpZGViYXIgdHJlZXZpZXcgc2xpZGUgdXAvZG93bi4gVGhpcyBvcHRpb25zIGFjY2VwdHMgYW4gaW50ZWdlciBhcyBtaWxsaXNlY29uZHMsXG4gIC8vJ2Zhc3QnLCAnbm9ybWFsJywgb3IgJ3Nsb3cnXG4gIGFuaW1hdGlvblNwZWVkOidmYXN0JyxcbiAgLy9TaWRlYmFyIHB1c2ggbWVudSB0b2dnbGUgYnV0dG9uIHNlbGVjdG9yXG4gIHNpZGViYXJUb2dnbGVTZWxlY3RvcjogXCJbZGF0YS10b2dnbGU9J29mZmNhbnZhcyddXCIsXG4gIC8vQWN0aXZhdGUgc2lkZWJhciBwdXNoIG1lbnVcbiAgc2lkZWJhclB1c2hNZW51OiB0cnVlLFxuICAvL0FjdGl2YXRlIHNpZGViYXIgc2xpbXNjcm9sbCBpZiB0aGUgZml4ZWQgbGF5b3V0IGlzIHNldCAocmVxdWlyZXMgU2xpbVNjcm9sbCBQbHVnaW4pXG4gIHNpZGViYXJTbGltU2Nyb2xsOiB0cnVlLFxuICAvL0VuYWJsZSBzaWRlYmFyIGV4cGFuZCBvbiBob3ZlciBlZmZlY3QgZm9yIHNpZGViYXIgbWluaVxuICAvL1RoaXMgb3B0aW9uIGlzIGZvcmNlZCB0byB0cnVlIGlmIGJvdGggdGhlIGZpeGVkIGxheW91dCBhbmQgc2lkZWJhciBtaW5pXG4gIC8vYXJlIHVzZWQgdG9nZXRoZXJcbiAgc2lkZWJhckV4cGFuZE9uSG92ZXI6IGZhbHNlLFxuICAvL0JveFJlZnJlc2ggUGx1Z2luXG4gIGVuYWJsZUJveFJlZnJlc2g6IHRydWUsXG4gIC8vQm9vdHN0cmFwLmpzIHRvb2x0aXBcbiAgZW5hYmxlQlNUb3BwbHRpcDogdHJ1ZSxcbiAgQlNUb29sdGlwU2VsZWN0b3I6IFwiW2RhdGEtdG9nZ2xlPSd0b29sdGlwJ11cIixcbiAgLy9FbmFibGUgRmFzdCBDbGljay4gRmFzdGNsaWNrLmpzIGNyZWF0ZXMgYSBtb3JlXG4gIC8vbmF0aXZlIHRvdWNoIGV4cGVyaWVuY2Ugd2l0aCB0b3VjaCBkZXZpY2VzLiBJZiB5b3VcbiAgLy9jaG9vc2UgdG8gZW5hYmxlIHRoZSBwbHVnaW4sIG1ha2Ugc3VyZSB5b3UgbG9hZCB0aGUgc2NyaXB0XG4gIC8vYmVmb3JlIEFkbWluTFRFJ3MgYXBwLmpzXG4gIGVuYWJsZUZhc3RjbGljazogdHJ1ZSxcbiAgLy9Db250cm9sIFNpZGViYXIgT3B0aW9uc1xuICBlbmFibGVDb250cm9sU2lkZWJhcjogdHJ1ZSxcbiAgY29udHJvbFNpZGViYXJPcHRpb25zOiB7XG4gICAgLy9XaGljaCBidXR0b24gc2hvdWxkIHRyaWdnZXIgdGhlIG9wZW4vY2xvc2UgZXZlbnRcbiAgICB0b2dnbGVCdG5TZWxlY3RvcjogXCJbZGF0YS10b2dnbGU9J2NvbnRyb2wtc2lkZWJhciddXCIsXG4gICAgLy9UaGUgc2lkZWJhciBzZWxlY3RvclxuICAgIHNlbGVjdG9yOiBcIi5jb250cm9sLXNpZGViYXJcIixcbiAgICAvL0VuYWJsZSBzbGlkZSBvdmVyIGNvbnRlbnRcbiAgICBzbGlkZTogdHJ1ZVxuICB9LFxuICAvL0JveCBXaWRnZXQgUGx1Z2luLiBFbmFibGUgdGhpcyBwbHVnaW5cbiAgLy90byBhbGxvdyBib3hlcyB0byBiZSBjb2xsYXBzZWQgYW5kL29yIHJlbW92ZWRcbiAgZW5hYmxlQm94V2lkZ2V0OiB0cnVlLFxuICAvL0JveCBXaWRnZXQgcGx1Z2luIG9wdGlvbnNcbiAgYm94V2lkZ2V0T3B0aW9uczoge1xuICAgIGJveFdpZGdldEljb25zOiB7XG4gICAgICAvL0NvbGxhcHNlIGljb25cbiAgICAgIGNvbGxhcHNlOiAnZmEtbWludXMnLFxuICAgICAgLy9PcGVuIGljb25cbiAgICAgIG9wZW46ICdmYS1wbHVzJyxcbiAgICAgIC8vUmVtb3ZlIGljb25cbiAgICAgIHJlbW92ZTogJ2ZhLXRpbWVzJ1xuICAgIH0sXG4gICAgYm94V2lkZ2V0U2VsZWN0b3JzOiB7XG4gICAgICAvL1JlbW92ZSBidXR0b24gc2VsZWN0b3JcbiAgICAgIHJlbW92ZTogJ1tkYXRhLXdpZGdldD1cInJlbW92ZVwiXScsXG4gICAgICAvL0NvbGxhcHNlIGJ1dHRvbiBzZWxlY3RvclxuICAgICAgY29sbGFwc2U6ICdbZGF0YS13aWRnZXQ9XCJjb2xsYXBzZVwiXSdcbiAgICB9XG4gIH0sXG4gIC8vRGlyZWN0IENoYXQgcGx1Z2luIG9wdGlvbnNcbiAgZGlyZWN0Q2hhdDoge1xuICAgIC8vRW5hYmxlIGRpcmVjdCBjaGF0IGJ5IGRlZmF1bHRcbiAgICBlbmFibGU6IHRydWUsXG4gICAgLy9UaGUgYnV0dG9uIHRvIG9wZW4gYW5kIGNsb3NlIHRoZSBjaGF0IGNvbnRhY3RzIHBhbmVcbiAgICBjb250YWN0VG9nZ2xlU2VsZWN0b3I6ICdbZGF0YS13aWRnZXQ9XCJjaGF0LXBhbmUtdG9nZ2xlXCJdJ1xuICB9LFxuICAvL0RlZmluZSB0aGUgc2V0IG9mIGNvbG9ycyB0byB1c2UgZ2xvYmFsbHkgYXJvdW5kIHRoZSB3ZWJzaXRlXG4gIGNvbG9yczoge1xuICAgIGxpZ2h0Qmx1ZTogXCIjM2M4ZGJjXCIsXG4gICAgcmVkOiBcIiNmNTY5NTRcIixcbiAgICBncmVlbjogXCIjMDBhNjVhXCIsXG4gICAgYXF1YTogXCIjMDBjMGVmXCIsXG4gICAgeWVsbG93OiBcIiNmMzljMTJcIixcbiAgICBibHVlOiBcIiMwMDczYjdcIixcbiAgICBuYXZ5OiBcIiMwMDFGM0ZcIixcbiAgICB0ZWFsOiBcIiMzOUNDQ0NcIixcbiAgICBvbGl2ZTogXCIjM0Q5OTcwXCIsXG4gICAgbGltZTogXCIjMDFGRjcwXCIsXG4gICAgb3JhbmdlOiBcIiNGRjg1MUJcIixcbiAgICBmdWNoc2lhOiBcIiNGMDEyQkVcIixcbiAgICBwdXJwbGU6IFwiIzhFMjRBQVwiLFxuICAgIG1hcm9vbjogXCIjRDgxQjYwXCIsXG4gICAgYmxhY2s6IFwiIzIyMjIyMlwiLFxuICAgIGdyYXk6IFwiI2QyZDZkZVwiXG4gIH0sXG4gIC8vVGhlIHN0YW5kYXJkIHNjcmVlbiBzaXplcyB0aGF0IGJvb3RzdHJhcCB1c2VzLlxuICAvL0lmIHlvdSBjaGFuZ2UgdGhlc2UgaW4gdGhlIHZhcmlhYmxlcy5sZXNzIGZpbGUsIGNoYW5nZVxuICAvL3RoZW0gaGVyZSB0b28uXG4gIHNjcmVlblNpemVzOiB7XG4gICAgeHM6IDQ4MCxcbiAgICBzbTogNzY4LFxuICAgIG1kOiA5OTIsXG4gICAgbGc6IDEyMDBcbiAgfVxufTtcblxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAtIEluaXRpYWxpemUgdGhlIEFkbWluTFRFIE9iamVjdCAtXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBbGwgQWRtaW5MVEUgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBiZWxvdy5cbiAqL1xuJC5BZG1pbkxURS5faW5pdCA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIC8qIExheW91dFxuICAgKiA9PT09PT1cbiAgICogRml4ZXMgdGhlIGxheW91dCBoZWlnaHQgaW4gY2FzZSBtaW4taGVpZ2h0IGZhaWxzLlxuICAgKlxuICAgKiBAdHlwZSBPYmplY3RcbiAgICogQHVzYWdlICQuQWRtaW5MVEUubGF5b3V0LmFjdGl2YXRlKClcbiAgICogICAgICAgICQuQWRtaW5MVEUubGF5b3V0LmZpeCgpXG4gICAqICAgICAgICAkLkFkbWluTFRFLmxheW91dC5maXhTaWRlYmFyKClcbiAgICovXG4gICQuQWRtaW5MVEUubGF5b3V0ID0ge1xuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgX3RoaXMuZml4KCk7XG4gICAgICBfdGhpcy5maXhTaWRlYmFyKCk7XG4gICAgICAkKHdpbmRvdywgXCIud3JhcHBlclwiKS5yZXNpemUoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5maXgoKTtcbiAgICAgICAgX3RoaXMuZml4U2lkZWJhcigpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBmaXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vR2V0IHdpbmRvdyBoZWlnaHQgYW5kIHRoZSB3cmFwcGVyIGhlaWdodFxuICAgICAgdmFyIG5lZyA9ICQoJy5tYWluLWhlYWRlcicpLm91dGVySGVpZ2h0KCkgKyAkKCcubWFpbi1mb290ZXInKS5vdXRlckhlaWdodCgpO1xuICAgICAgdmFyIHdpbmRvd19oZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICAgICB2YXIgc2lkZWJhcl9oZWlnaHQgPSAkKFwiLnNpZGViYXJcIikuaGVpZ2h0KCk7XG4gICAgICAvL1NldCB0aGUgbWluLWhlaWdodCBvZiB0aGUgY29udGVudCBhbmQgc2lkZWJhciBiYXNlZCBvbiB0aGVcbiAgICAgIC8vdGhlIGhlaWdodCBvZiB0aGUgZG9jdW1lbnQuXG4gICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoXCJmaXhlZFwiKSkge1xuICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgd2luZG93X2hlaWdodCAtICQoJy5tYWluLWZvb3RlcicpLm91dGVySGVpZ2h0KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBvc3RTZXRXaWR0aDtcbiAgICAgICAgaWYgKHdpbmRvd19oZWlnaHQgPj0gc2lkZWJhcl9oZWlnaHQpIHtcbiAgICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgd2luZG93X2hlaWdodCAtIG5lZyk7XG4gICAgICAgICAgcG9zdFNldFdpZHRoID0gd2luZG93X2hlaWdodCAtIG5lZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgc2lkZWJhcl9oZWlnaHQpO1xuICAgICAgICAgIHBvc3RTZXRXaWR0aCA9IHNpZGViYXJfaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vRml4IGZvciB0aGUgY29udHJvbCBzaWRlYmFyIGhlaWdodFxuICAgICAgICB2YXIgY29udHJvbFNpZGViYXIgPSAkKCQuQWRtaW5MVEUub3B0aW9ucy5jb250cm9sU2lkZWJhck9wdGlvbnMuc2VsZWN0b3IpO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRyb2xTaWRlYmFyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaWYgKGNvbnRyb2xTaWRlYmFyLmhlaWdodCgpID4gcG9zdFNldFdpZHRoKVxuICAgICAgICAgICAgJChcIi5jb250ZW50LXdyYXBwZXIsIC5yaWdodC1zaWRlXCIpLmNzcygnbWluLWhlaWdodCcsIGNvbnRyb2xTaWRlYmFyLmhlaWdodCgpKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfSxcbiAgICBmaXhTaWRlYmFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAvL01ha2Ugc3VyZSB0aGUgYm9keSB0YWcgaGFzIHRoZSAuZml4ZWQgY2xhc3NcbiAgICAgIGlmICghJChcImJvZHlcIikuaGFzQ2xhc3MoXCJmaXhlZFwiKSkge1xuICAgICAgICBpZiAodHlwZW9mICQuZm4uc2xpbVNjcm9sbCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQoXCIuc2lkZWJhclwiKS5zbGltU2Nyb2xsKHtkZXN0cm95OiB0cnVlfSkuaGVpZ2h0KFwiYXV0b1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiAkLmZuLnNsaW1TY3JvbGwgPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoXCJFcnJvcjogdGhlIGZpeGVkIGxheW91dCByZXF1aXJlcyB0aGUgc2xpbXNjcm9sbCBwbHVnaW4hXCIpO1xuICAgICAgfVxuICAgICAgLy9FbmFibGUgc2xpbXNjcm9sbCBmb3IgZml4ZWQgbGF5b3V0XG4gICAgICBpZiAoJC5BZG1pbkxURS5vcHRpb25zLnNpZGViYXJTbGltU2Nyb2xsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJC5mbi5zbGltU2Nyb2xsICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy9EZXN0cm95IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICQoXCIuc2lkZWJhclwiKS5zbGltU2Nyb2xsKHtkZXN0cm95OiB0cnVlfSkuaGVpZ2h0KFwiYXV0b1wiKTtcbiAgICAgICAgICAvL0FkZCBzbGltc2Nyb2xsXG4gICAgICAgICAgJChcIi5zaWRlYmFyXCIpLnNsaW1zY3JvbGwoe1xuICAgICAgICAgICAgaGVpZ2h0OiAoJCh3aW5kb3cpLmhlaWdodCgpIC0gJChcIi5tYWluLWhlYWRlclwiKS5oZWlnaHQoKSkgKyBcInB4XCIsXG4gICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuNylcIixcbiAgICAgICAgICAgIHNpemU6IFwiM3B4XCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKiBQdXNoTWVudSgpXG4gICAqID09PT09PT09PT1cbiAgICogQWRkcyB0aGUgcHVzaCBtZW51IGZ1bmN0aW9uYWxpdHkgdG8gdGhlIHNpZGViYXIuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAqIEB1c2FnZTogJC5BZG1pbkxURS5wdXNoTWVudShcIltkYXRhLXRvZ2dsZT0nb2ZmY2FudmFzJ11cIilcbiAgICovXG4gICQuQWRtaW5MVEUucHVzaE1lbnUgPSB7XG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uICh0b2dnbGVCdG4pIHtcbiAgICAgIC8vR2V0IHRoZSBzY3JlZW4gc2l6ZXNcbiAgICAgIHZhciBzY3JlZW5TaXplcyA9ICQuQWRtaW5MVEUub3B0aW9ucy5zY3JlZW5TaXplcztcblxuICAgICAgLy9FbmFibGUgc2lkZWJhciB0b2dnbGVcbiAgICAgICQodG9nZ2xlQnRuKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy9FbmFibGUgc2lkZWJhciBwdXNoIG1lbnVcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gKHNjcmVlblNpemVzLnNtIC0gMSkpIHtcbiAgICAgICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKSkge1xuICAgICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKS50cmlnZ2VyKCdleHBhbmRlZC5wdXNoTWVudScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpLnRyaWdnZXIoJ2NvbGxhcHNlZC5wdXNoTWVudScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL0hhbmRsZSBzaWRlYmFyIHB1c2ggbWVudSBmb3Igc21hbGwgc2NyZWVuc1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoJ3NpZGViYXItb3BlbicpKSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1vcGVuJykucmVtb3ZlQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKS50cmlnZ2VyKCdjb2xsYXBzZWQucHVzaE1lbnUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoJ3NpZGViYXItb3BlbicpLnRyaWdnZXIoJ2V4cGFuZGVkLnB1c2hNZW51Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgJChcIi5jb250ZW50LXdyYXBwZXJcIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAvL0VuYWJsZSBoaWRlIG1lbnUgd2hlbiBjbGlja2luZyBvbiB0aGUgY29udGVudC13cmFwcGVyIG9uIHNtYWxsIHNjcmVlbnNcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDw9IChzY3JlZW5TaXplcy5zbSAtIDEpICYmICQoXCJib2R5XCIpLmhhc0NsYXNzKFwic2lkZWJhci1vcGVuXCIpKSB7XG4gICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoJ3NpZGViYXItb3BlbicpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy9FbmFibGUgZXhwYW5kIG9uIGhvdmVyIGZvciBzaWRlYmFyIG1pbmlcbiAgICAgIGlmICgkLkFkbWluTFRFLm9wdGlvbnMuc2lkZWJhckV4cGFuZE9uSG92ZXIgfHwgKCQoJ2JvZHknKS5oYXNDbGFzcygnZml4ZWQnKSAmJiAkKCdib2R5JykuaGFzQ2xhc3MoJ3NpZGViYXItbWluaScpKSkge1xuICAgICAgICB0aGlzLmV4cGFuZE9uSG92ZXIoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4cGFuZE9uSG92ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgc2NyZWVuV2lkdGggPSAkLkFkbWluTFRFLm9wdGlvbnMuc2NyZWVuU2l6ZXMuc20gLSAxO1xuICAgICAgLy9FeHBhbmQgc2lkZWJhciBvbiBob3ZlclxuICAgICAgJCgnLm1haW4tc2lkZWJhcicpLmhvdmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnc2lkZWJhci1taW5pJykgJiYgJChcImJvZHlcIikuaGFzQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKSAmJiAkKHdpbmRvdykud2lkdGgoKSA+IHNjcmVlbldpZHRoKSB7XG4gICAgICAgICAgX3RoaXMuZXhwYW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnc2lkZWJhci1taW5pJykgJiYgJCgnYm9keScpLmhhc0NsYXNzKCdzaWRlYmFyLWV4cGFuZGVkLW9uLWhvdmVyJykgJiYgJCh3aW5kb3cpLndpZHRoKCkgPiBzY3JlZW5XaWR0aCkge1xuICAgICAgICAgIF90aGlzLmNvbGxhcHNlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhwYW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpLmFkZENsYXNzKCdzaWRlYmFyLWV4cGFuZGVkLW9uLWhvdmVyJyk7XG4gICAgfSxcbiAgICBjb2xsYXBzZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnc2lkZWJhci1leHBhbmRlZC1vbi1ob3ZlcicpKSB7XG4gICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnc2lkZWJhci1leHBhbmRlZC1vbi1ob3ZlcicpLmFkZENsYXNzKCdzaWRlYmFyLWNvbGxhcHNlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qIFRyZWUoKVxuICAgKiA9PT09PT1cbiAgICogQ29udmVydHMgdGhlIHNpZGViYXIgaW50byBhIG11bHRpbGV2ZWxcbiAgICogdHJlZSB2aWV3IG1lbnUuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAqIEBVc2FnZTogJC5BZG1pbkxURS50cmVlKCcuc2lkZWJhcicpXG4gICAqL1xuICAkLkFkbWluTFRFLnRyZWUgPSBmdW5jdGlvbiAobWVudSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFuaW1hdGlvblNwZWVkID0gJC5BZG1pbkxURS5vcHRpb25zLmFuaW1hdGlvblNwZWVkO1xuICAgIC8vY2xpY2sgZXZlbnQgLy9cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBtZW51ICsgJyBsaSBhJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgLy9HZXQgdGhlIGNsaWNrZWQgbGluayBhbmQgdGhlIG5leHQgZWxlbWVudFxuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgIC8vaXMgdGhlIGNvbnRlbnQgb2YgdGhlIFwiYWNjb3JkaW9uXCIgdWwgLy9cbiAgICAgIHZhciBjaGVja0VsZW1lbnQgPSAkdGhpcy5uZXh0KCk7XG5cbiAgICAgIC8vQ2hlY2sgaWYgdGhlIG5leHQgZWxlbWVudCBpcyBhIG1lbnUgYW5kIGlzIHZpc2libGVcbiAgICAgIGlmICgoY2hlY2tFbGVtZW50LmlzKCcudHJlZXZpZXctbWVudScpKSAmJiAoY2hlY2tFbGVtZW50LmlzKCc6dmlzaWJsZScpKSkge1xuICAgICAgICAvL0Nsb3NlIHRoZSBtZW51XG4gICAgICAgIGNoZWNrRWxlbWVudC5zbGlkZVVwKGFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2hlY2tFbGVtZW50LnBhcmVudChcImxpXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgIGNoZWNrRWxlbWVudC5yZW1vdmVDbGFzcygnbWVudS1vcGVuJyk7XG4gICAgICAgICAgLy9GaXggdGhlIGxheW91dCBpbiBjYXNlIHRoZSBzaWRlYmFyIHN0cmV0Y2hlcyBvdmVyIHRoZSBoZWlnaHQgb2YgdGhlIHdpbmRvd1xuICAgICAgICAgIC8vX3RoaXMubGF5b3V0LmZpeCgpO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuICAgICAgLy9JZiB0aGUgbWVudSBpcyBub3QgdmlzaWJsZVxuICAgICAgZWxzZSBpZiAoKGNoZWNrRWxlbWVudC5pcygnLnRyZWV2aWV3LW1lbnUnKSkgJiYgKCFjaGVja0VsZW1lbnQuaXMoJzp2aXNpYmxlJykpKSB7XG4gICAgICAgIC8vR2V0IHRoZSBwYXJlbnQgbWVudVxuICAgICAgICB2YXIgcGFyZW50ID0gJHRoaXMucGFyZW50cygndWwnKS5maXJzdCgpO1xuICAgICAgICB2YXIgcGFyZW50X2xpID0gJHRoaXMucGFyZW50KFwibGlcIik7XG4gICAgICAgIHZhciBsaV9zaWJsaW5ncyA9IHBhcmVudF9saS5zaWJsaW5ncygpO1xuICAgICAgICB2YXIgcGFyZW50X2ZpbmRfYWN0aXZlO1xuICAgICAgICB2YXIgc2lkZWJhcl9jb250ZW50X2hlaWdodCA9IHBhcmVudC5oZWlnaHQoKSAtIHBhcmVudC5maW5kKCdsaS5oZWFkZXInKS5vdXRlckhlaWdodCgpO1xuICAgICAgICB2YXIgdHJlZXZpZXdIZWlnaHQgPSBwYXJlbnRfbGkub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgbGlfc2libGluZ3Mubm90KCcuaGVhZGVyJykuZWFjaChmdW5jdGlvbihpbmRleCwgZWwpIHtcbiAgICAgICAgICAgICAgICB0cmVldmlld0hlaWdodCs9JChlbCkuZmluZCgnYScpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja0VsZW1lbnQuY3NzKHsnaGVpZ2h0Jzooc2lkZWJhcl9jb250ZW50X2hlaWdodCAtIHRyZWV2aWV3SGVpZ2h0KSArICdweCcgfSk7XG4gICAgICAgIC8vQ2xvc2UgYWxsIG9wZW4gbWVudXMgd2l0aGluIHRoZSBwYXJlbnRcbiAgICAgICAgdmFyIHVsID0gcGFyZW50LmZpbmQoJ3VsOnZpc2libGUnKS5zbGlkZVVwKGFuaW1hdGlvblNwZWVkKTtcbiAgICAgICAgLy9SZW1vdmUgdGhlIG1lbnUtb3BlbiBjbGFzcyBmcm9tIHRoZSBwYXJlbnRcbiAgICAgICAgdWwucmVtb3ZlQ2xhc3MoJ21lbnUtb3BlbicpO1xuICAgICAgICAvL0dldCB0aGUgcGFyZW50IGxpXG4gICAgICAgIC8vT3BlbiB0aGUgdGFyZ2V0IG1lbnUgYW5kIGFkZCB0aGUgbWVudS1vcGVuIGNsYXNzXG4gICAgICAgIGNoZWNrRWxlbWVudC5zbGlkZURvd24oYW5pbWF0aW9uU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvL0FkZCB0aGUgY2xhc3MgYWN0aXZlIHRvIHRoZSBwYXJlbnQgbGlcbiAgICAgICAgICBjaGVja0VsZW1lbnQuYWRkQ2xhc3MoJ21lbnUtb3BlbicpO1xuICAgICAgICAgIHBhcmVudF9maW5kX2FjdGl2ZSA9IHBhcmVudC5maW5kKCdsaS5hY3RpdmUnKTtcbiAgICAgICAgICBwYXJlbnRfZmluZF9hY3RpdmUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIHBhcmVudF9saS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgLy9GaXggdGhlIGxheW91dCBpbiBjYXNlIHRoZSBzaWRlYmFyIHN0cmV0Y2hlcyBvdmVyIHRoZSBoZWlnaHQgb2YgdGhlIHdpbmRvd1xuICAgICAgICAgIF90aGlzLmxheW91dC5maXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvL2lmIHRoaXMgaXNuJ3QgYSBsaW5rLCBwcmV2ZW50IHRoZSBwYWdlIGZyb20gYmVpbmcgcmVkaXJlY3RlZFxuICAgICAgaWYgKGNoZWNrRWxlbWVudC5pcygnLnRyZWV2aWV3LW1lbnUnKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyogQ29udHJvbFNpZGViYXJcbiAgICogPT09PT09PT09PT09PT1cbiAgICogQWRkcyBmdW5jdGlvbmFsaXR5IHRvIHRoZSByaWdodCBzaWRlYmFyXG4gICAqXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKiBAdXNhZ2UgJC5BZG1pbkxURS5jb250cm9sU2lkZWJhci5hY3RpdmF0ZShvcHRpb25zKVxuICAgKi9cbiAgJC5BZG1pbkxURS5jb250cm9sU2lkZWJhciA9IHtcbiAgICAvL2luc3RhbnRpYXRlIHRoZSBvYmplY3RcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgLy9HZXQgdGhlIG9iamVjdFxuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vVXBkYXRlIG9wdGlvbnNcbiAgICAgIHZhciBvID0gJC5BZG1pbkxURS5vcHRpb25zLmNvbnRyb2xTaWRlYmFyT3B0aW9ucztcbiAgICAgIC8vR2V0IHRoZSBzaWRlYmFyXG4gICAgICB2YXIgc2lkZWJhciA9ICQoby5zZWxlY3Rvcik7XG4gICAgICAvL1RoZSB0b2dnbGUgYnV0dG9uXG4gICAgICB2YXIgYnRuID0gJChvLnRvZ2dsZUJ0blNlbGVjdG9yKTtcblxuICAgICAgLy9MaXN0ZW4gdG8gdGhlIGNsaWNrIGV2ZW50XG4gICAgICBidG4ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvL0lmIHRoZSBzaWRlYmFyIGlzIG5vdCBvcGVuXG4gICAgICAgIGlmICghc2lkZWJhci5oYXNDbGFzcygnY29udHJvbC1zaWRlYmFyLW9wZW4nKSAmJiAhJCgnYm9keScpLmhhc0NsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpKSB7XG4gICAgICAgICAgLy9PcGVuIHRoZSBzaWRlYmFyXG4gICAgICAgICAgX3RoaXMub3BlbihzaWRlYmFyLCBvLnNsaWRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZShzaWRlYmFyLCBvLnNsaWRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vSWYgdGhlIGJvZHkgaGFzIGEgYm94ZWQgbGF5b3V0LCBmaXggdGhlIHNpZGViYXIgYmcgcG9zaXRpb25cbiAgICAgIHZhciBiZyA9ICQoXCIuY29udHJvbC1zaWRlYmFyLWJnXCIpO1xuICAgICAgX3RoaXMuX2ZpeChiZyk7XG5cbiAgICAgIC8vSWYgdGhlIGJvZHkgaGFzIGEgZml4ZWQgbGF5b3V0LCBtYWtlIHRoZSBjb250cm9sIHNpZGViYXIgZml4ZWRcbiAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ2ZpeGVkJykpIHtcbiAgICAgICAgX3RoaXMuX2ZpeEZvckZpeGVkKHNpZGViYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9JZiB0aGUgY29udGVudCBoZWlnaHQgaXMgbGVzcyB0aGFuIHRoZSBzaWRlYmFyJ3MgaGVpZ2h0LCBmb3JjZSBtYXggaGVpZ2h0XG4gICAgICAgIGlmICgkKCcuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZScpLmhlaWdodCgpIDwgc2lkZWJhci5oZWlnaHQoKSkge1xuICAgICAgICAgIF90aGlzLl9maXhGb3JDb250ZW50KHNpZGViYXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvL09wZW4gdGhlIGNvbnRyb2wgc2lkZWJhclxuICAgIG9wZW46IGZ1bmN0aW9uIChzaWRlYmFyLCBzbGlkZSkge1xuICAgICAgLy9TbGlkZSBvdmVyIGNvbnRlbnRcbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBzaWRlYmFyLmFkZENsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9QdXNoIHRoZSBjb250ZW50IGJ5IGFkZGluZyB0aGUgb3BlbiBjbGFzcyB0byB0aGUgYm9keSBpbnN0ZWFkXG4gICAgICAgIC8vb2YgdGhlIHNpZGViYXIgaXRzZWxmXG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnY29udHJvbC1zaWRlYmFyLW9wZW4nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vQ2xvc2UgdGhlIGNvbnRyb2wgc2lkZWJhclxuICAgIGNsb3NlOiBmdW5jdGlvbiAoc2lkZWJhciwgc2xpZGUpIHtcbiAgICAgIGlmIChzbGlkZSkge1xuICAgICAgICBzaWRlYmFyLnJlbW92ZUNsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2ZpeDogZnVuY3Rpb24gKHNpZGViYXIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoJ2xheW91dC1ib3hlZCcpKSB7XG4gICAgICAgIHNpZGViYXIuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgICBzaWRlYmFyLmhlaWdodCgkKFwiLndyYXBwZXJcIikuaGVpZ2h0KCkpO1xuICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5fZml4KHNpZGViYXIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpZGViYXIuY3NzKHtcbiAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgICAgICdoZWlnaHQnOiAnYXV0bydcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfZml4Rm9yRml4ZWQ6IGZ1bmN0aW9uIChzaWRlYmFyKSB7XG4gICAgICBzaWRlYmFyLmNzcyh7XG4gICAgICAgICdwb3NpdGlvbic6ICdmaXhlZCcsXG4gICAgICAgICdtYXgtaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAnb3ZlcmZsb3cnOiAnYXV0bycsXG4gICAgICAgICdwYWRkaW5nLWJvdHRvbSc6ICc1MHB4J1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBfZml4Rm9yQ29udGVudDogZnVuY3Rpb24gKHNpZGViYXIpIHtcbiAgICAgICQoXCIuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZVwiKS5jc3MoJ21pbi1oZWlnaHQnLCBzaWRlYmFyLmhlaWdodCgpKTtcbiAgICB9XG4gIH07XG5cbiAgLyogQm94V2lkZ2V0XG4gICAqID09PT09PT09PVxuICAgKiBCb3hXaWRnZXQgaXMgYSBwbHVnaW4gdG8gaGFuZGxlIGNvbGxhcHNpbmcgYW5kXG4gICAqIHJlbW92aW5nIGJveGVzIGZyb20gdGhlIHNjcmVlbi5cbiAgICpcbiAgICogQHR5cGUgT2JqZWN0XG4gICAqIEB1c2FnZSAkLkFkbWluTFRFLmJveFdpZGdldC5hY3RpdmF0ZSgpXG4gICAqICAgICAgICBTZXQgYWxsIHlvdXIgb3B0aW9ucyBpbiB0aGUgbWFpbiAkLkFkbWluTFRFLm9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICAkLkFkbWluTFRFLmJveFdpZGdldCA9IHtcbiAgICBzZWxlY3RvcnM6ICQuQWRtaW5MVEUub3B0aW9ucy5ib3hXaWRnZXRPcHRpb25zLmJveFdpZGdldFNlbGVjdG9ycyxcbiAgICBpY29uczogJC5BZG1pbkxURS5vcHRpb25zLmJveFdpZGdldE9wdGlvbnMuYm94V2lkZ2V0SWNvbnMsXG4gICAgYW5pbWF0aW9uU3BlZWQ6ICQuQWRtaW5MVEUub3B0aW9ucy5hbmltYXRpb25TcGVlZCxcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKF9ib3gpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoIV9ib3gpIHtcbiAgICAgICAgX2JveCA9IGRvY3VtZW50OyAvLyBhY3RpdmF0ZSBhbGwgYm94ZXMgcGVyIGRlZmF1bHRcbiAgICAgIH1cbiAgICAgIC8vTGlzdGVuIGZvciBjb2xsYXBzZSBldmVudCB0cmlnZ2Vyc1xuICAgICAgJChfYm94KS5vbignY2xpY2snLCBfdGhpcy5zZWxlY3RvcnMuY29sbGFwc2UsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuY29sbGFwc2UoJCh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgICAgLy9MaXN0ZW4gZm9yIHJlbW92ZSBldmVudCB0cmlnZ2Vyc1xuICAgICAgJChfYm94KS5vbignY2xpY2snLCBfdGhpcy5zZWxlY3RvcnMucmVtb3ZlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnJlbW92ZSgkKHRoaXMpKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY29sbGFwc2U6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgLy9GaW5kIHRoZSBib3ggcGFyZW50XG4gICAgICB2YXIgYm94ID0gZWxlbWVudC5wYXJlbnRzKFwiLmJveFwiKS5maXJzdCgpO1xuICAgICAgLy9GaW5kIHRoZSBib2R5IGFuZCB0aGUgZm9vdGVyXG4gICAgICB2YXIgYm94X2NvbnRlbnQgPSBib3guZmluZChcIj4gLmJveC1ib2R5LCA+IC5ib3gtZm9vdGVyLCA+IGZvcm0gID4uYm94LWJvZHksID4gZm9ybSA+IC5ib3gtZm9vdGVyXCIpO1xuICAgICAgaWYgKCFib3guaGFzQ2xhc3MoXCJjb2xsYXBzZWQtYm94XCIpKSB7XG4gICAgICAgIC8vQ29udmVydCBtaW51cyBpbnRvIHBsdXNcbiAgICAgICAgZWxlbWVudC5jaGlsZHJlbihcIjpmaXJzdFwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhfdGhpcy5pY29ucy5jb2xsYXBzZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMuaWNvbnMub3Blbik7XG4gICAgICAgIC8vSGlkZSB0aGUgY29udGVudFxuICAgICAgICBib3hfY29udGVudC5zbGlkZVVwKF90aGlzLmFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYm94LmFkZENsYXNzKFwiY29sbGFwc2VkLWJveFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL0NvbnZlcnQgcGx1cyBpbnRvIG1pbnVzXG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW4oXCI6Zmlyc3RcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoX3RoaXMuaWNvbnMub3BlbilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMuaWNvbnMuY29sbGFwc2UpO1xuICAgICAgICAvL1Nob3cgdGhlIGNvbnRlbnRcbiAgICAgICAgYm94X2NvbnRlbnQuc2xpZGVEb3duKF90aGlzLmFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYm94LnJlbW92ZUNsYXNzKFwiY29sbGFwc2VkLWJveFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAvL0ZpbmQgdGhlIGJveCBwYXJlbnRcbiAgICAgIHZhciBib3ggPSBlbGVtZW50LnBhcmVudHMoXCIuYm94XCIpLmZpcnN0KCk7XG4gICAgICBib3guc2xpZGVVcCh0aGlzLmFuaW1hdGlvblNwZWVkKTtcbiAgICB9XG4gIH07XG4gIFxuICByZXR1cm4gJC5BZG1pbkxURTtcbn07XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLVxuICogLSBDdXN0b20gUGx1Z2lucyAtXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFsbCBjdXN0b20gcGx1Z2lucyBhcmUgZGVmaW5lZCBiZWxvdy5cbiAqL1xuXG4vKlxuICogQk9YIFJFRlJFU0ggQlVUVE9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRoaXMgaXMgYSBjdXN0b20gcGx1Z2luIHRvIHVzZSB3aXRoIHRoZSBjb21wb25lbnQgQk9YLiBJdCBhbGxvd3MgeW91IHRvIGFkZFxuICogYSByZWZyZXNoIGJ1dHRvbiB0byB0aGUgYm94LiBJdCBjb252ZXJ0cyB0aGUgYm94J3Mgc3RhdGUgdG8gYSBsb2FkaW5nIHN0YXRlLlxuICpcbiAqIEB0eXBlIHBsdWdpblxuICogQHVzYWdlICQoXCIjYm94LXdpZGdldFwiKS5ib3hSZWZyZXNoKCBvcHRpb25zICk7XG4gKi9cbiQuQWRtaW5MVEUuYWRkUmVmcmVzaEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC5mbi5ib3hSZWZyZXNoID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIC8vIFJlbmRlciBvcHRpb25zXG4gICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe1xuICAgICAgLy9SZWZyZXNoIGJ1dHRvbiBzZWxlY3RvclxuICAgICAgdHJpZ2dlcjogXCIucmVmcmVzaC1idG5cIixcbiAgICAgIC8vRmlsZSBzb3VyY2UgdG8gYmUgbG9hZGVkIChlLmc6IGFqYXgvc3JjLnBocClcbiAgICAgIHNvdXJjZTogXCJcIixcbiAgICAgIC8vQ2FsbGJhY2tzXG4gICAgICBvbkxvYWRTdGFydDogZnVuY3Rpb24gKGJveCkge1xuICAgICAgICByZXR1cm4gYm94O1xuICAgICAgfSwgLy9SaWdodCBhZnRlciB0aGUgYnV0dG9uIGhhcyBiZWVuIGNsaWNrZWRcbiAgICAgIG9uTG9hZERvbmU6IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgIH0gLy9XaGVuIHRoZSBzb3VyY2UgaGFzIGJlZW4gbG9hZGVkXG5cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIC8vVGhlIG92ZXJsYXlcbiAgICB2YXIgb3ZlcmxheSA9ICQoJzxkaXYgY2xhc3M9XCJvdmVybGF5XCI+PGRpdiBjbGFzcz1cImZhIGZhLXJlZnJlc2ggZmEtc3BpblwiPjwvZGl2PjwvZGl2PicpO1xuXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvL2lmIGEgc291cmNlIGlzIHNwZWNpZmllZFxuICAgICAgaWYgKHNldHRpbmdzLnNvdXJjZSA9PT0gXCJcIikge1xuICAgICAgICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coXCJQbGVhc2Ugc3BlY2lmeSBhIHNvdXJjZSBmaXJzdCAtIGJveFJlZnJlc2goKVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvL3RoZSBib3hcbiAgICAgIHZhciBib3ggPSAkKHRoaXMpO1xuICAgICAgLy90aGUgYnV0dG9uXG4gICAgICB2YXIgckJ0biA9IGJveC5maW5kKHNldHRpbmdzLnRyaWdnZXIpLmZpcnN0KCk7XG5cbiAgICAgIC8vT24gdHJpZ2dlciBjbGlja1xuICAgICAgckJ0bi5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vQWRkIGxvYWRpbmcgb3ZlcmxheVxuICAgICAgICBzdGFydChib3gpO1xuXG4gICAgICAgIC8vUGVyZm9ybSBhamF4IGNhbGxcbiAgICAgICAgYm94LmZpbmQoXCIuYm94LWJvZHlcIikubG9hZChzZXR0aW5ncy5zb3VyY2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkb25lKGJveCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzdGFydChib3gpIHtcbiAgICAgIC8vQWRkIG92ZXJsYXkgYW5kIGxvYWRpbmcgaW1nXG4gICAgICBib3guYXBwZW5kKG92ZXJsYXkpO1xuXG4gICAgICBzZXR0aW5ncy5vbkxvYWRTdGFydC5jYWxsKGJveCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9uZShib3gpIHtcbiAgICAgIC8vUmVtb3ZlIG92ZXJsYXkgYW5kIGxvYWRpbmcgaW1nXG4gICAgICBib3guZmluZChvdmVybGF5KS5yZW1vdmUoKTtcblxuICAgICAgc2V0dGluZ3Mub25Mb2FkRG9uZS5jYWxsKGJveCk7XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiAkLkFkbWluTFRFO1xufTtcblxuLypcbiAqIEVYUExJQ0lUIEJPWCBBQ1RJVkFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBpcyBhIGN1c3RvbSBwbHVnaW4gdG8gdXNlIHdpdGggdGhlIGNvbXBvbmVudCBCT1guIEl0IGFsbG93cyB5b3UgdG8gYWN0aXZhdGVcbiAqIGEgYm94IGluc2VydGVkIGluIHRoZSBET00gYWZ0ZXIgdGhlIGFwcC5qcyB3YXMgbG9hZGVkLlxuICpcbiAqIEB0eXBlIHBsdWdpblxuICogQHVzYWdlICQoXCIjYm94LXdpZGdldFwiKS5hY3RpdmF0ZUJveCgpO1xuICovXG4kLkFkbWluTFRFLmFjdGl2YXRlQm94ID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgJC5mbi5hY3RpdmF0ZUJveCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLkFkbWluTFRFLmJveFdpZGdldC5hY3RpdmF0ZSh0aGlzKTtcbiAgfTtcbiAgXG4gIHJldHVybiAkLkFkbWluTFRFO1xufTtcblxuLypcbiAqIFRPRE8gTElTVCBDVVNUT00gUExVR0lOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBwbHVnaW4gZGVwZW5kcyBvbiBpQ2hlY2sgcGx1Z2luIGZvciBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzXG4gKlxuICogQHR5cGUgcGx1Z2luXG4gKiBAdXNhZ2UgJChcIiN0b2RvLXdpZGdldFwiKS50b2RvbGlzdCggb3B0aW9ucyApO1xuICovXG5cbiQuQWRtaW5MVEUubGlzdEN1c3RvbVBsdWdpbiA9IGZ1bmN0aW9uICgpIHtcblxuXHQgICd1c2Ugc3RyaWN0JztcblxuXHQgICQuZm4udG9kb2xpc3QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgLy8gUmVuZGVyIG9wdGlvbnNcblx0ICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcblx0ICAgICAgLy9XaGVuIHRoZSB1c2VyIGNoZWNrcyB0aGUgaW5wdXRcblx0ICAgICAgb25DaGVjazogZnVuY3Rpb24gKGVsZSkge1xuXHQgICAgICAgIHJldHVybiBlbGU7XG5cdCAgICAgIH0sXG5cdCAgICAgIC8vV2hlbiB0aGUgdXNlciB1bmNoZWNrcyB0aGUgaW5wdXRcblx0ICAgICAgb25VbmNoZWNrOiBmdW5jdGlvbiAoZWxlKSB7XG5cdCAgICAgICAgcmV0dXJuIGVsZTtcblx0ICAgICAgfVxuXHQgICAgfSwgb3B0aW9ucyk7XG5cblx0ICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuXG5cdCAgICAgIGlmICh0eXBlb2YgJC5mbi5pQ2hlY2sgIT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAkKCdpbnB1dCcsIHRoaXMpLm9uKCdpZkNoZWNrZWQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgZWxlID0gJCh0aGlzKS5wYXJlbnRzKFwibGlcIikuZmlyc3QoKTtcblx0ICAgICAgICAgIGVsZS50b2dnbGVDbGFzcyhcImRvbmVcIik7XG5cdCAgICAgICAgICBzZXR0aW5ncy5vbkNoZWNrLmNhbGwoZWxlKTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgICQoJ2lucHV0JywgdGhpcykub24oJ2lmVW5jaGVja2VkJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdmFyIGVsZSA9ICQodGhpcykucGFyZW50cyhcImxpXCIpLmZpcnN0KCk7XG5cdCAgICAgICAgICBlbGUudG9nZ2xlQ2xhc3MoXCJkb25lXCIpO1xuXHQgICAgICAgICAgc2V0dGluZ3Mub25VbmNoZWNrLmNhbGwoZWxlKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAkKCdpbnB1dCcsIHRoaXMpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgZWxlID0gJCh0aGlzKS5wYXJlbnRzKFwibGlcIikuZmlyc3QoKTtcblx0ICAgICAgICAgIGVsZS50b2dnbGVDbGFzcyhcImRvbmVcIik7XG5cdCAgICAgICAgICBpZiAoJCgnaW5wdXQnLCBlbGUpLmlzKFwiOmNoZWNrZWRcIikpIHtcblx0ICAgICAgICAgICAgc2V0dGluZ3Mub25DaGVjay5jYWxsKGVsZSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzZXR0aW5ncy5vblVuY2hlY2suY2FsbChlbGUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9O1xuXHQgIHJldHVybiAkLkFkbWluTFRFO1xuXHR9O1xuXHRcblx0LyogLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIC0gSW1wbGVtZW50YXRpb24gLVxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS1cblx0ICogVGhlIG5leHQgYmxvY2sgb2YgY29kZSBpbXBsZW1lbnRzIEFkbWluTFRFJ3Ncblx0ICogZnVuY3Rpb25zIGFuZCBwbHVnaW5zIGFzIHNwZWNpZmllZCBieSB0aGVcblx0ICogb3B0aW9ucyBhYm92ZS5cblx0ICovXG5cdCQuQWRtaW5MVEUuc2V0dXAgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdCAgXCJ1c2Ugc3RyaWN0XCI7XG5cblx0ICAvL0ZpeCBmb3IgSUUgcGFnZSB0cmFuc2l0aW9uc1xuXHQgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiaG9sZC10cmFuc2l0aW9uXCIpO1xuXG5cdCAgLy9FeHRlbmQgb3B0aW9ucyBpZiBleHRlcm5hbCBvcHRpb25zIGV4aXN0XG5cdCAgaWYgKHR5cGVvZiBBZG1pbkxURU9wdGlvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0ICAgICQuZXh0ZW5kKHRydWUsXG5cdCAgICAgICAgICAgICQuQWRtaW5MVEUub3B0aW9ucyxcblx0ICAgICAgICAgICAgQWRtaW5MVEVPcHRpb25zKTtcblx0ICB9XG5cblx0ICAvL0Vhc3kgYWNjZXNzIHRvIG9wdGlvbnNcblx0ICB2YXIgbyA9ICQuQWRtaW5MVEUub3B0aW9ucztcblxuXHQgIC8vU2V0IHVwIHRoZSBvYmplY3Rcblx0ICAkLkFkbWluTFRFLl9pbml0KCk7XG5cblx0ICAvL0FjdGl2YXRlIHRoZSBsYXlvdXQgbWFrZXJcblx0ICAkLkFkbWluTFRFLmxheW91dC5hY3RpdmF0ZSgpO1xuXG5cdCAgLy9FbmFibGUgc2lkZWJhciB0cmVlIHZpZXcgY29udHJvbHNcblx0ICAkLkFkbWluTFRFLnRyZWUoJy5zaWRlYmFyJyk7XG5cblx0ICAvL0VuYWJsZSBjb250cm9sIHNpZGViYXJcblx0ICBpZiAoby5lbmFibGVDb250cm9sU2lkZWJhcikge1xuXHQgICAgJC5BZG1pbkxURS5jb250cm9sU2lkZWJhci5hY3RpdmF0ZSgpO1xuXHQgIH1cblxuXHQgIC8vQWRkIHNsaW1zY3JvbGwgdG8gbmF2YmFyIGRyb3Bkb3duXG5cdCAgaWYgKG8ubmF2YmFyTWVudVNsaW1zY3JvbGwgJiYgdHlwZW9mICQuZm4uc2xpbXNjcm9sbCAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgJChcIi5uYXZiYXIgLm1lbnVcIikuc2xpbXNjcm9sbCh7XG5cdCAgICAgIGhlaWdodDogby5uYXZiYXJNZW51SGVpZ2h0LFxuXHQgICAgICBhbHdheXNWaXNpYmxlOiBmYWxzZSxcblx0ICAgICAgc2l6ZTogby5uYXZiYXJNZW51U2xpbXNjcm9sbFdpZHRoXG5cdCAgICB9KS5jc3MoXCJ3aWR0aFwiLCBcIjEwMCVcIik7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBzaWRlYmFyIHB1c2ggbWVudVxuXHQgIGlmIChvLnNpZGViYXJQdXNoTWVudSkge1xuXHQgICAgJC5BZG1pbkxURS5wdXNoTWVudS5hY3RpdmF0ZShvLnNpZGViYXJUb2dnbGVTZWxlY3Rvcik7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBCb290c3RyYXAgdG9vbHRpcFxuXHQgIGlmIChvLmVuYWJsZUJTVG9wcGx0aXApIHtcblx0ICAgICQoJ2JvZHknKS50b29sdGlwKHtcblx0ICAgICAgc2VsZWN0b3I6IG8uQlNUb29sdGlwU2VsZWN0b3Jcblx0ICAgIH0pO1xuXHQgIH1cblxuXHQgIC8vQWN0aXZhdGUgYm94IHdpZGdldFxuXHQgIGlmIChvLmVuYWJsZUJveFdpZGdldCkge1xuXHQgICAgJC5BZG1pbkxURS5ib3hXaWRnZXQuYWN0aXZhdGUoKTtcblx0ICB9XG5cblx0ICAvL0FjdGl2YXRlIGZhc3QgY2xpY2tcblx0ICBpZiAoby5lbmFibGVGYXN0Y2xpY2sgJiYgdHlwZW9mIEZhc3RDbGljayAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgRmFzdENsaWNrLmF0dGFjaChkb2N1bWVudC5ib2R5KTtcblx0ICB9XG5cblx0ICAvL0FjdGl2YXRlIGRpcmVjdCBjaGF0IHdpZGdldFxuXHQgIGlmIChvLmRpcmVjdENoYXQuZW5hYmxlKSB7XG5cdCAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBvLmRpcmVjdENoYXQuY29udGFjdFRvZ2dsZVNlbGVjdG9yLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBib3ggPSAkKHRoaXMpLnBhcmVudHMoJy5kaXJlY3QtY2hhdCcpLmZpcnN0KCk7XG5cdCAgICAgIGJveC50b2dnbGVDbGFzcygnZGlyZWN0LWNoYXQtY29udGFjdHMtb3BlbicpO1xuXHQgICAgfSk7XG5cdCAgfVxuXG5cdCAgLypcblx0ICAgKiBJTklUSUFMSVpFIEJVVFRPTiBUT0dHTEVcblx0ICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgKi9cblx0ICAkKCcuYnRuLWdyb3VwW2RhdGEtdG9nZ2xlPVwiYnRuLXRvZ2dsZVwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGdyb3VwID0gJCh0aGlzKTtcblx0ICAgICQodGhpcykuZmluZChcIi5idG5cIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgZ3JvdXAuZmluZChcIi5idG4uYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuXHQgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuXHQgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICB9KTtcblxuXHQgIH0pO1xuXHQgIFxuXHQgIHJldHVybiAkLkFkbWluTFRFXG5cdCAgXHQuYWRkUmVmcmVzaEJ1dHRvbigpXG5cdCAgXHQuYWN0aXZhdGVCb3goKVxuXHQgIFx0Lmxpc3RDdXN0b21QbHVnaW4oKTtcblx0fTtcdFxuXG5tb2R1bGUuZXhwb3J0cyA9ICQuQWRtaW5MVEU7XG5cbn0se1wiLi9mbG9hdGJhci9mbG9hdGJhclwiOjcsXCIuL3NpZGViYXIvc2lkZWJhclwiOjEyfV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGxpIGNsYXNzPVxcXCJ0cmVldmlld1xcXCI+XFxuICA8YSBocmVmPVxcXCIjXFxcIj5cXG4gICAgPGkgOmNsYXNzPVxcXCJkYXRhSWNvblxcXCI+PC9pPlxcbiAgICA8c3Bhbj57e2RhdGFMYWJlbCB8IHR9fTwvc3Bhbj4gXFxuICAgIDxpIHYtaWY9XFxcIihkYXRhVHlwZSA9PT0gJ2lubGluZScpXFxcIiBjbGFzcz1cXFwiZmEgZmEtYW5nbGUtbGVmdCBwdWxsLXJpZ2h0XFxcIj48L2k+XFxuICA8L2E+XFxuICA8dWwgdi1pZj1cXFwiKGRhdGFUeXBlID09PSAnaW5saW5lJylcXFwiIGNsYXNzPVxcXCJ0cmVldmlldy1tZW51XFxcIj5cXG4gICAgPHNsb3Q+PC9zbG90PlxcbiAgPC91bD5cXG48L2xpPlxcblwiO1xuXG59LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiY29sLW1kLTYgY29sLXNtLTYgY29sLXhzLTEyIHNpZGViYXItdG9vbFxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJ0b29sLWJveFxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b29sLWJveC1pY29uIGJnLWFxdWFcXFwiPjxpIGNsYXNzPVxcXCJmYVxcXCIgOmNsYXNzPVxcXCJkYXRhSWNvblxcXCI+PC9pPjwvc3Bhbj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidG9vbC1ib3gtY29udGVudFxcXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInRvb2wtYm94LW5hbWVcXFwiPkl0ZXJuZXQ8L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgICA8IS0tIC8uaW5mby1ib3gtY29udGVudCAtLT5cXG4gIDwvZGl2PlxcbiAgPCEtLSAvLmluZm8tYm94IC0tPlxcbjwvZGl2PlxcblwiO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFwiPGFzaWRlIGNsYXNzPVxcXCJtYWluLXNpZGViYXJcXFwiPlxcbiAgPCEtLSBzaWRlYmFyOiBzdHlsZSBjYW4gYmUgZm91bmQgaW4gc2lkZWJhci5sZXNzIC0tPlxcblxcdDxzZWN0aW9uIGNsYXNzPVxcXCJzaWRlYmFyXFxcIj5cXG5cXHQgIDx1bCBjbGFzcz1cXFwic2lkZWJhci1tZW51XFxcIj5cXG5cXHQgICAgPHNpZGViYXItaXRlbSBkYXRhLWljb249XFxcImZhIGZhLXNlYXJjaFxcXCIgZGF0YS1sYWJlbD1cXFwic2VhcmNoXFxcIiBkYXRhLXR5cGU9XFxcImlubGluZVxcXCI+XFxuICAgICAgICAgIDxnM3ctc2VhcmNoIDpsYXllcnNzZXJ2aWNlPVxcXCJpZmFjZS5sYXllcnNTZXJ2aWNlXFxcIj48L2czdy1zZWFyY2g+XFxuICAgICAgICA8L3NpZGViYXItaXRlbT5cXG4gICAgICAgIDxzaWRlYmFyLWl0ZW0gZGF0YS1pY29uPVxcXCJmYSBmYS1kYXRhYmFzZVxcXCIgZGF0YS1sYWJlbD1cXFwiY2F0YWxvZ1xcXCIgZGF0YS10eXBlPVxcXCJpbmxpbmVcXFwiPlxcbiAgICAgICAgICA8ZzN3LWNhdGFsb2cgOmxheWVyc3NlcnZpY2U9XFxcImlmYWNlLmxheWVyc1NlcnZpY2VcXFwiPjwvZzN3LWNhdGFsb2c+XFxuICAgICAgICA8L3NpZGViYXItaXRlbT5cXG4gICAgICAgIDxzaWRlYmFyLWl0ZW0gZGF0YS1pY29uPVxcXCJmYSBmYS1nZWFyc1xcXCIgZGF0YS1sYWJlbD1cXFwidG9vbHNcXFwiIGRhdGEtdHlwZT1cXFwiaW5saW5lXFxcIj5cXG4gICAgICAgICAgICA8c2lkZWJhci10b29sIGRhdGEtaWNvbj1cXFwiZmEgZmEtZGF0YWJhc2VcXFwiPlxcbiAgICAgICAgICAgICAgICA8aXJwaT48L2lycGk+XFxuICAgICAgICAgICAgPC9zaWRlYmFyLXRvb2w+XFxuICAgICAgICAgICAgPCEtLTxzaWRlYmFyLXRvb2w+XFxuICAgICAgICAgICAgICAgIDxhbHRyb3Rvb2w+PC9hbHRyb3Rvb2w+XFxuICAgICAgICAgICAgPC9zaWRlYmFyLXRvb2w+XFxuICAgICAgICAgICAgPHNpZGViYXItdG9vbD5cXG4gICAgICAgICAgICAgICAgPGFsdHJvdG9vbGFuY29yYT48L2FsdHJvdG9vbGFuY29yYT5cXG4gICAgICAgICAgICA8L3NpZGViYXItdG9vbD4tLT5cXG4gICAgICAgIDwvc2lkZWJhci1pdGVtPlxcblxcdCAgPC91bD5cXG5cXHQ8L3NlY3Rpb24+XFxuXFx0PCEtLSAvLnNpZGViYXIgLS0+XFxuPC9hc2lkZT5cXG5cIjtcblxufSx7fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHQgPSByZXF1aXJlKCdpMThuLnNlcnZpY2UnKTtcbnJlcXVpcmUoJ2czdy9ndWkvY2F0YWxvZy9jYXRhbG9nJyk7XG5yZXF1aXJlKCdnM3cvZ3VpL3NlYXJjaC9zZWFyY2gnKTtcblxuVnVlLmNvbXBvbmVudCgnc2lkZWJhcicse1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3NpZGViYXIuaHRtbCcpLFxuICAgIHByb3BzOiBbJ2lmYWNlJ10sXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgXHRyZXR1cm4ge1xuICAgICAgICBsYXllcnNTZXJ2aWNlOiB0aGlzLmlmYWNlLmxheWVyc1NlcnZpY2UsXG4gICAgICAgIGJPcGVuOiB0cnVlLFxuICAgIFx0XHRiUGFnZU1vZGU6IGZhbHNlLFxuICAgIFx0XHRoZWFkZXI6IHQoJ21haW4gbmF2aWdhdGlvbicpXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgXHRhY3RpdmVNb2R1bGU6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgXHRcdGlmICh0aGlzLmN1cnJlbnRNb2R1bGUgPT09IGluZGV4KSB7XG4gICAgXHRcdFx0dGhpcy5jdXJyZW50TW9kdWxlID0gdW5kZWZpbmVkO1xuICAgIFx0XHRcdHJldHVybiBmYWxzZTtcbiAgICBcdFx0fVxuICAgIFx0XHR0aGlzLmN1cnJlbnRNb2R1bGUgPSBpbmRleDtcbiAgICBcdH1cblx0fVxufSk7XG5cblZ1ZS5jb21wb25lbnQoJ3NpZGViYXItaXRlbScse1xuXHRwcm9wczogWydkYXRhLWljb24nLCdkYXRhLWxhYmVsJywnZGF0YS10eXBlJ10sXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vc2lkZWJhci1pdGVtLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICBcdHJldHVybiB7XG4gICAgICAgIFx0bWFpbjogdHJ1ZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIFx0XG5cdH1cbn0pO1xuXG5WdWUuY29tcG9uZW50KCdzaWRlYmFyLXRvb2wnLHtcblx0cHJvcHM6IFsnZGF0YS1pY29uJywnZGF0YS1sYWJlbCcsJ2RhdGEtY29udGVudCcsJ2RhdGEtY29tcG9uZW50J10sXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vc2lkZWJhci10b29sLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICBcdHJldHVybiB7XG4gICAgICAgIFx0bWFpbjogdHJ1ZVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIFx0XG5cdH1cbn0pO1xuXG59LHtcIi4vc2lkZWJhci1pdGVtLmh0bWxcIjo5LFwiLi9zaWRlYmFyLXRvb2wuaHRtbFwiOjEwLFwiLi9zaWRlYmFyLmh0bWxcIjoxMSxcImczdy9ndWkvY2F0YWxvZy9jYXRhbG9nXCI6MjAsXCJnM3cvZ3VpL3NlYXJjaC9zZWFyY2hcIjoyMixcImkxOG4uc2VydmljZVwiOjV9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz17XG4gICAgXCJpdFwiOiB7XG4gICAgICAgIFwidHJhbnNsYXRpb25cIjoge1xuICAgICAgICAgICAgXCJzZWFyY2hcIjogXCJSaWNlcmNhXCIsXG4gICAgICAgICAgICBcImNhdGFsb2dcIjogXCJDYXRhbG9nbyBkYXRpXCIsXG4gICAgICAgICAgICBcInRvb2xzXCI6IFwiU3RydW1lbnRpXCJcbiAgICAgICAgfVxuICAgIH1cbn1cblxufSx7fV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGNvbmZpZyA9IHtcbiAgYmFzZVVybDogXCJcIixcbiAgZ3JvdXA6IHtcbiAgICBuYW1lOiAnVGVzdCBncm91cCcsXG4gICAgaWQ6ICd0ZXN0X2dyb3VwJyxcbiAgICBtaW5zY2FsZToxMDAwMDAwMDAsXG4gICAgbWF4c2NhbGU6MSxcbiAgICBjcnM6IDMyNjMyLFxuICAgIGJhc2VsYXllcnM6IFtdLCAvLyBcIk9TTVwiLCBcIkJJTkdfVEVSUkFJTlwiLCBcIkJJTkdfU0FURUxMSVRFXCIsIFwiQklOR19IWUJSSURcIiwgXCJCSU5HX1JPQURTXCJcbiAgICBwcm9qZWN0czogW1xuICAgICAge1xuICAgICAgICAgIHR5cGU6ICdxZGphbmdvJyxcbiAgICAgICAgICBuYW1lOiAnT3BlbiBEYXRhIEZpcmVuemUnLFxuICAgICAgICAgIGlkOiAnb3Blbl9kYXRhX2ZpcmVuemUnLFxuICAgICAgfSxcbiAgICBdLFxuICAgIGluaXRwcm9qZWN0OiBcbiAgICAgIHtcbiAgICAgICAgICB0eXBlOiAncWRqYW5nbycsXG4gICAgICAgICAgbmFtZTogJ09wZW4gRGF0YSBGaXJlbnplJyxcbiAgICAgICAgICBpZDogJ29wZW5fZGF0YV9maXJlbnplJyxcbiAgICAgIH0sXG4gICAgb3ZlcnZpZXdwcm9qZWN0OiBudWxsXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZmlnO1xuXG59LHt9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2czdy9jb3JlL3V0aWxzJykuaW5oZXJpdDtcbi8vb2dnZXR0byBjaGUgcmVzdGl0dWlzY2UgbGF5ZXJzIGUgbGF5ZXJzdHJlZVxudmFyIExheWVyc1N0b3JlID0gcmVxdWlyZSgnLi9sYXllcnNzdG9yZScpO1xuXG4vKiBzZXJ2aWNlXG5GdW56aW9uZSBjb3N0cnV0dG9yZSBjb250ZW50ZW50ZSB0cmUgcHJvcHJpZXRhJzpcbiAgICBzZXR1cDogbWV0b2RvIGRpIGluaXppYWxpenphemlvbmVcbiAgICBnZXRMYXllcnNTdG9yZTogcml0b3JuYSBsJ29nZ2V0dG8gTGF5ZXJzU3RvcmVcbiAgICBnZXRMYXllcnNUcmVlOiByaXRvcm5hIGwnYXJyYXkgbGF5ZXJzVHJlZSBkYWxsJ29nZ2V0dG8gTGF5ZXJzU3RvcmVcbiovXG5cbi8vIFB1YmxpYyBpbnRlcmZhY2VcbmZ1bmN0aW9uIHNlcnZpY2UoKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAvL2NvbmZpZyBnZW5lcmFsZVxuICB0aGlzLnNldHVwID0gZnVuY3Rpb24oY29uZmlnKXtcbiAgICBfc2VydmljZS5zZXR1cChjb25maWcpXG4gICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgIHNlbGYuZW1pdChcImxvYWRlZFwiKTtcbiAgICB9KTtcbiAgfTtcbiAgdGhpcy5nZXRMYXllcnNTdG9yZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIF9zZXJ2aWNlLmxheWVyc1N0b3JlO1xuICB9O1xuICB0aGlzLmdldExheWVyc1RyZWUgPSBmdW5jdGlvbigpe1xuICAgIHZhciBsYXllcnNUcmVlID0gX3NlcnZpY2UubGF5ZXJzU3RvcmUuZ2V0TGF5ZXJzVHJlZSgpO1xuICAgIGlmIChfLmlzTnVsbChsYXllcnNUcmVlKSl7XG4gICAgICBsYXllcnNUcmVlID0gW107XG4gICAgfVxuICAgIHJldHVybiBsYXllcnNUcmVlO1xuICB9O1xufVxuXG4vLyBNYWtlIHRoZSBwdWJsaWMgc2VydmljZSBlbiBFdmVudCBFbWl0dGVyXG5pbmhlcml0KHNlcnZpY2UsRXZlbnRFbWl0dGVyKTtcblxuLy8gUHJpdmF0ZVxudmFyIF9zZXJ2aWNlID0ge1xuICBpbml0aWFsaXplZDogZmFsc2UsXG4gIGNvbmZpZzogbnVsbCxcbiAgY3VycmVudFByb2plY3Q6IG51bGwsXG4gIGxheWVyc1N0b3JlOiBudWxsLFxuICBcbiAgc2V0dXA6IGZ1bmN0aW9uKGNvbmZpZyl7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKXtcbiAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgcmV0dXJuIHRoaXMubG9hZFByb2plY3QoY29uZmlnLmdyb3VwLmluaXRwcm9qZWN0KTtcbiAgICB9XG4gIH0sXG4gIFxuICBsb2FkUHJvamVjdDogZnVuY3Rpb24ocHJvamVjdCl7XG4gICAgaWYgKHRoaXMucHJvamVjdEF2YWlsYWJsZShwcm9qZWN0KSkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvamVjdENvbmZpZyhwcm9qZWN0KVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocHJvamVjdENvbmZpZyl7XG4gICAgICAgIHNlbGYuY3VycmVudFByb2plY3QgPSBwcm9qZWN0Q29uZmlnO1xuICAgICAgICBzZWxmLmxheWVyc1N0b3JlID0gbmV3IExheWVyc1N0b3JlKHtcbiAgICAgICAgICBsYXllcnM6IHByb2plY3RDb25maWcubGF5ZXJzLFxuICAgICAgICAgIGxheWVyc1RyZWU6IHByb2plY3RDb25maWcubGF5ZXJzdHJlZVxuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIFxuICBwcm9qZWN0QXZhaWxhYmxlOiBmdW5jdGlvbihwcm9qZWN0KXtcbiAgICB2YXIgZXhpc3RzID0gZmFsc2U7XG4gICAgXy5mb3JFYWNoKHRoaXMuY29uZmlnLmdyb3VwLnByb2plY3RzLGZ1bmN0aW9uKHZhbCl7XG4gICAgICBpZiAodmFsLnR5cGUgPT0gcHJvamVjdC50eXBlICYmIHZhbC5pZCA9PSBwcm9qZWN0LmlkKXtcbiAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZXhpc3RzO1xuICB9LFxuICBcbiAgZ2V0UHJvamVjdENvbmZpZzogZnVuY3Rpb24ocHJvamVjdCl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBpZiAodGhpcy5jb25maWcuY2xpZW50LmxvY2FsKXtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHByb2plY3RDb25maWcgPSByZXF1aXJlKCcuL3Rlc3QucHJvamVjdF9jb25maWcnKTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwcm9qZWN0Q29uZmlnKTtcbiAgICAgIH0sMTAwKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgdXJsID0gdGhpcy5jb25maWcuc2VydmVyLnVybHMuY29uZmlnKycvJyt0aGlzLmNvbmZpZy5ncm91cC5pZCsnLycrcHJvamVjdC50eXBlKycvJytwcm9qZWN0LmlkO1xuICAgICAgJC5nZXQodXJsKS5kb25lKGZ1bmN0aW9uKHByb2plY3RDb25maWcpe1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHByb2plY3RDb25maWcpO1xuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IHNlcnZpY2UoKTtcblxufSx7XCIuL2xheWVyc3N0b3JlXCI6MTYsXCIuL3Rlc3QucHJvamVjdF9jb25maWdcIjoxNyxcImczdy9jb3JlL3V0aWxzXCI6MTh9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBjb3N0cnV0dG9yZSBkaSBvZ2dldHRvIGNoZSByaXRvcm5hIGR1ZSBtZXRvZGk6XG4gICBnZXRMYXllcnMgOiByaXRvcm5hIGFycmF5IGxheWVycyBkZWwgZmlsZSBkaSBjb25maWd1cmF6aW9uZVxuICAgZ2V0TGF5ZXJzVHJlZSA6IHJpdG9ybmEgYXJyYXkgbGF5ZXJzdHJlZSBkZWwgZmlsZSBkaSBjb25maWd1cmF6aW9uZVxuICAgcHJlbmRlIGNvbWUgcGFyYW1ldHJvIHVuIG9nZ2V0dG8gY29udGVudGVudGUgcHJvcHJpZXRhIGxheWVycyBlIGxheWVyc1RyZWUgY2hlIG5vbiBlJyBhbHRybyBjaGVcbiAgIGxlIHByb3ByaWV0YSBsYXllcnMgZSBsYXllcnN0cmVlIGRlbGwnb2dnZXR0byBjb25maWd1cmF6aW9uZSBwYXNzYXRvIGRhbCBzZXJ2ZXJcbiovXG5mdW5jdGlvbiBMYXllcnNTdG9yZShjb25maWcpe1xuICAvLyBQcml2YXRlIGxvY2FsIGluc3RhbmNlXG4gIHZhciBpbnN0YW5jZSA9IG5ldyBfc3RvcmUoY29uZmlnKTtcbiAgLy9yaXRvcm5hIGFycmF5IGxheWVyc1xuICB0aGlzLmdldExheWVycyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGluc3RhbmNlLmdldExheWVycygpO1xuICB9O1xuICAvL3JpdG9ybmEgYXJyYXkgbGF5ZXJzdHJlZVxuICB0aGlzLmdldExheWVyc1RyZWUgPWZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGluc3RhbmNlLmdldExheWVyc1RyZWUoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3N0b3JlKGNvbmZpZyl7XG4gIHZhciBsYXllcnMgPSB0aGlzLm1ha2VMYXllcnNPYmooY29uZmlnLmxheWVycyk7IC8vIG9nZ2V0dG8gZG92ZSBsZSBjaGlhdmkgc29ubyBpIG5vbWkgZGVpIGxheWVyc1xuICB2YXIgbGF5ZXJzVHJlZSA9IHRoaXMuZmlsbExheWVyc1RyZWUoY29uZmlnLmxheWVyc1RyZWUsIGxheWVycyk7XG4gIHRoaXMubGF5ZXJzID0gbGF5ZXJzO1xuICB0aGlzLmxheWVyc1RyZWUgPSBsYXllcnNUcmVlO1xufVxuXG5fc3RvcmUucHJvdG90eXBlLm1ha2VMYXllcnNPYmogPSBmdW5jdGlvbihsYXllcnNDb25maWcpe1xuICAvLyB0cmFuc2Zvcm0gbGF5ZXJzIGFycmF5IHRvIG9iamVjdHMgdHJhY2tlZCBieSBpZFxuICByZXR1cm4gXy5rZXlCeShsYXllcnNDb25maWcsJ2lkJyk7XG59O1xuXG5fc3RvcmUucHJvdG90eXBlLmZpbGxMYXllcnNUcmVlID0gZnVuY3Rpb24obGF5ZXJzVHJlZSxsYXllcnMpe1xuICB2YXIgX2xheWVyc1RyZWUgPSBfLmNsb25lRGVlcChsYXllcnNUcmVlKTsvL2NyZWEgdW4gY2xvbmUgbnVvdm8gZGVsbCdhcnJheSBsYXllcnNUcmVlXG4gIGZ1bmN0aW9uIHRyYXZlcnNlKG9iail7XG4gICAgXy5mb3JJbihvYmosIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICAvL3ZlcmlmaWNhIGNoZSBpbCB2YWxvcmUgZGVsbCdpZCBub24gc2lhIG51bGxvXG4gICAgICAgIGlmICghXy5pc05pbCh2YWwuaWQpKSB7XG4gICAgICAgICAgICAvLyBleHRlbmQgbGF5ZXJzIHRyZWUgbGVhZnMgd2l0aCBhIGRpcmVjdCByZWZlcmVuY2UgdG8gdGhlIGxheWVyIG9iamVjdFxuICAgICAgICAgICAgLy9hZ2dpdW5nbyBsYSBwcm9wcmlldGEnIHRpdGxlIGNoZSBzZXJ2ZSBhIGJvb3RzdHJhcC10cmVlIHBlciB2aXN1bGFpenphcmUgaSBub21pXG4gICAgICAgICAgICAvLyBhbGwnaW50ZXJubyBkZWwgY2F0YWxvZ1xuICAgICAgICAgICAgdmFsLnRpdGxlID0gbGF5ZXJzW3ZhbC5pZF0udGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzTmlsKHZhbC5ub2RlcykpIHtcbiAgICAgICAgICAgIHZhbC50aXRsZSA9IHZhbC5uYW1lO1xuICAgICAgICAgICAgLy8gcmljb3JzaXZhIGZhY2NpbyBzdGVzc28gY29udHJvbGxvIHBlciBpIG5vZGkgZGVsIGxheWVydHJlZVxuICAgICAgICAgICAgdHJhdmVyc2UodmFsLm5vZGVzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHRyYXZlcnNlKF9sYXllcnNUcmVlKTtcbiAgcmV0dXJuIF9sYXllcnNUcmVlO1xufTtcblxuX3N0b3JlLnByb3RvdHlwZS5nZXRMYXllcnMgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5sYXllcnM7XG59O1xuXG5fc3RvcmUucHJvdG90eXBlLmdldExheWVyc1RyZWUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5sYXllcnNUcmVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMYXllcnNTdG9yZTtcblxuXG59LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY29uZmlnID0ge1xuICAgIGlkOiAnb3Blbl9kYXRhX2ZpcmVuemUnLFxuICAgIG5hbWU6IFwiT3BlbiBEYXRhIEZpcmVuemVcIixcbiAgICBleHRlbnQ6IFs2ODAxNDYuMjY2NTU4MTc0MzkzMTM5NzgsNDg0OTYxMy4zNjA5OTY0MTg2MzI1NjY5Myw2ODA2NTQuOTI4MTg1MTkyMjg2MDM2OTEsNDg1MDAyNS4yMTg4MTQzNTE1OTU5MzgyMV0sXG4gICAgbGF5ZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnVW5pb25pX0NvbXVuaV9Ub3NjYW5hMjAxNjAzMTYxMTMzMjQzMjInLFxuICAgICAgICAgICAgdGl0bGU6IFwiVW5pb25pIENvbXVuaSBUb3NjYW5hXCIsXG4gICAgICAgICAgICBuYW1lOiBcInVjdFwiLFxuICAgICAgICAgICAgY3JzOiAzMjYzMixcbiAgICAgICAgICAgIC8vYmJveDogW10sIC8vaWwgYmJveCBkaSB1biBsYXllciBub24gw6ggcHJlc2VudGUgbmVsIHByb2dldHRvIGRpIFFHSVMsIG1lbnRyZSBHZXRQcm9qZWN0U2V0dGluZ3MgKG92dmVybyBHZXRDYXBhYmlsaXRpZXMpIGxvIGZvcm5pc2NlIChodHRwOi8vcGFyY29hcHVhbmUuZ2lzM3cuaXQvb3dzLmZjZ2k/bWFwPS9ob21lL3dhbHRlci9hcHAvcWRqYW5nb19wYXJjb2FwdWFuZS93d3cvbWVkaWEvcHJvamVjdHMvY2FydG9ncmFmaWEtZ2VuZXJhbGVfcGVyaW1ldHJhemlvbmUtZGktZGV0dGFnbGlvLWFyZWUtZXN0cmF0dGl2ZS5xZ3MmJlNFUlZJQ0U9V01TJlZFUlNJT049MS4zJlJFUVVFU1Q9R2V0UHJvamVjdFNldHRpbmdzKVxuICAgICAgICAgICAgc3R5bGU6IFwiXCIsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzY2FsZWJhc2VkdmlzaWJpbGl0eTogZmFsc2UsXG4gICAgICAgICAgICBtaW5zY2FsZTogbnVsbCxcbiAgICAgICAgICAgIG1heHNjYWxlOiBudWxsLFxuICAgICAgICAgICAgaW5mb3VybDogXCJcIixcbiAgICAgICAgICAgIGluZm9yZm9ybWF0OiBcIlwiLFxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzOiAxLCAvLyBPUiBCSVRTOiAxPVFVRVJZQUJMRSwgMj1FRElUQUJMRSAtPiBRVUVSWUFCTEUgZSBFRElUQUJMRSA9IDF8MiA9IDNcbiAgICAgICAgICAgIGVkaXRvcHM6IG51bGwsIC8vIE9SIEJJVFM6IDE9SU5TRVJULCAyPVVQREFURSwgND1ERUxFVEUgLT4gSU5TRVJUICsgVVBEQVRFICsgREVMRVRFID0gMXwyfDQgPSA3XG4gICAgICAgICAgICBtZXRhbGF5ZXI6IDEgLy8gb3BwdXJlIG51bGwgcGVyIGxheWVycyBub24gUUdJU1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2FsYmVyaTIwMTYwMzE2MTEyNzQ3MDEwJyxcbiAgICAgICAgICAgIHRpdGxlOiBcIkFsYmVyaVwiLFxuICAgICAgICAgICAgbmFtZTogXCJhbGJlcmlcIixcbiAgICAgICAgICAgIGNyczogMzg1NyxcbiAgICAgICAgICAgIHN0eWxlOiBcIlwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc2NhbGViYXNlZHZpc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICBtaW5zY2FsZTogMTAwMDAsXG4gICAgICAgICAgICBtYXhzY2FsZTogMSxcbiAgICAgICAgICAgIGluZm91cmw6IFwiXCIsXG4gICAgICAgICAgICBpbmZvcmZvcm1hdDogXCJcIixcbiAgICAgICAgICAgIGNhcGFiaWxpdGllczogMiwgLy8gT1IgQklUUzogMT1RVUVSWUFCTEUsIDI9RURJVEFCTEUgLT4gUVVFUllBQkxFIGUgRURJVEFCTEUgPSAxfDIgPSAzXG4gICAgICAgICAgICBlZGl0b3BzOiA3LCAvLyBPUiBCSVRTOiAxPUlOU0VSVCwgMj1VUERBVEUsIDQ9REVMRVRFIC0+IElOU0VSVCArIFVQREFURSArIERFTEVURSA9IDF8Mnw0ID0gN1xuICAgICAgICAgICAgbWV0YWxheWVyOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnZmFybWFjaWUyMDE2MDMxNjExMzQxNzAyNScsXG4gICAgICAgICAgICB0aXRsZTogXCJGYXJtYWNpZVwiLFxuICAgICAgICAgICAgbmFtZTogXCJmYXJtYWNpZVwiLFxuICAgICAgICAgICAgY3JzOiAzODU3LFxuICAgICAgICAgICAgc3R5bGU6IFwiXCIsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzY2FsZWJhc2VkdmlzaWJpbGl0eTogZmFsc2UsXG4gICAgICAgICAgICBtaW5zY2FsZTogbnVsbCxcbiAgICAgICAgICAgIG1heHNjYWxlOiBudWxsLFxuICAgICAgICAgICAgaW5mb3VybDogXCJcIixcbiAgICAgICAgICAgIGluZm9yZm9ybWF0OiBcIlwiLFxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzOiAyLCAvLyBPUiBCSVRTOiAxPVFVRVJZQUJMRSwgMj1FRElUQUJMRSAtPiBRVUVSWUFCTEUgZSBFRElUQUJMRSA9IDF8MiA9IDNcbiAgICAgICAgICAgIGVkaXRvcHM6IDIsIC8vIE9SIEJJVFM6IDE9SU5TRVJULCAyPVVQREFURSwgND1ERUxFVEUgLT4gSU5TRVJUICsgVVBEQVRFICsgREVMRVRFID0gMXwyfDQgPSA3XG4gICAgICAgICAgICBtZXRhbGF5ZXI6IDFcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdtdXNlaTIwMTYwMzE2MTEyNzI2MjYxJyxcbiAgICAgICAgICAgIHRpdGxlOiBcIk11c2VpXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm11c2VpXCIsXG4gICAgICAgICAgICBjcnM6IDMwMDMsXG4gICAgICAgICAgICBzdHlsZTogXCJcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNjYWxlYmFzZWR2aXNpYmlsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgIG1pbnNjYWxlOiBudWxsLFxuICAgICAgICAgICAgbWF4c2NhbGU6IG51bGwsXG4gICAgICAgICAgICBpbmZvdXJsOiBcIlwiLFxuICAgICAgICAgICAgaW5mb3Jmb3JtYXQ6IFwiXCIsXG4gICAgICAgICAgICBjYXBhYmlsaXRpZXM6IDEsIC8vIE9SIEJJVFM6IDE9UVVFUllBQkxFLCAyPUVESVRBQkxFIC0+IFFVRVJZQUJMRSBlIEVESVRBQkxFID0gMXwyID0gM1xuICAgICAgICAgICAgZWRpdG9wczogbnVsbCwgLy8gT1IgQklUUzogMT1JTlNFUlQsIDI9VVBEQVRFLCA0PURFTEVURSAtPiBJTlNFUlQgKyBVUERBVEUgKyBERUxFVEUgPSAxfDJ8NCA9IDdcbiAgICAgICAgICAgIG1ldGFsYXllcjogMVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3N0cmFkZTIwMTYwMzE2MTEzMDEzMjU3JyxcbiAgICAgICAgICAgIHRpdGxlOiBcIlN0cmFkZVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzdHJhZGVcIixcbiAgICAgICAgICAgIGNyczogMzg1NyxcbiAgICAgICAgICAgIHN0eWxlOiBcIlwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc2NhbGViYXNlZHZpc2liaWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgbWluc2NhbGU6IG51bGwsXG4gICAgICAgICAgICBtYXhzY2FsZTogbnVsbCxcbiAgICAgICAgICAgIGluZm91cmw6IFwiXCIsXG4gICAgICAgICAgICBpbmZvcmZvcm1hdDogXCJcIixcbiAgICAgICAgICAgIGNhcGFiaWxpdGllczogMSwgLy8gT1IgQklUUzogMT1RVUVSWUFCTEUsIDI9RURJVEFCTEUgLT4gUVVFUllBQkxFIGUgRURJVEFCTEUgPSAxfDIgPSAzXG4gICAgICAgICAgICBlZGl0b3BzOiBudWxsLCAvLyBPUiBCSVRTOiAxPUlOU0VSVCwgMj1VUERBVEUsIDQ9REVMRVRFIC0+IElOU0VSVCArIFVQREFURSArIERFTEVURSA9IDF8Mnw0ID0gN1xuICAgICAgICAgICAgbWV0YWxheWVyOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnc3RydXR0dXJlMjAxNjAzMTYxMTMyMjU0MDgnLFxuICAgICAgICAgICAgdGl0bGU6IFwiR3JhbmRpIHN0cnV0dHVyZVwiLFxuICAgICAgICAgICAgbmFtZTogXCJncmFuZGlfc3RydXR0dXJlXCIsXG4gICAgICAgICAgICBjcnM6IDMwMDMsXG4gICAgICAgICAgICBzdHlsZTogXCJcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNjYWxlYmFzZWR2aXNpYmlsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgIG1pbnNjYWxlOiBudWxsLFxuICAgICAgICAgICAgbWF4c2NhbGU6IG51bGwsXG4gICAgICAgICAgICBpbmZvdXJsOiBcIlwiLFxuICAgICAgICAgICAgaW5mb3Jmb3JtYXQ6IFwiXCIsXG4gICAgICAgICAgICBjYXBhYmlsaXRpZXM6IDEsIC8vIE9SIEJJVFM6IDE9UVVFUllBQkxFLCAyPUVESVRBQkxFIC0+IFFVRVJZQUJMRSBlIEVESVRBQkxFID0gMXwyID0gM1xuICAgICAgICAgICAgZWRpdG9wczogbnVsbCwgLy8gT1IgQklUUzogMT1JTlNFUlQsIDI9VVBEQVRFLCA0PURFTEVURSAtPiBJTlNFUlQgKyBVUERBVEUgKyBERUxFVEUgPSAxfDJ8NCA9IDdcbiAgICAgICAgICAgIG1ldGFsYXllcjogMVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3RyYWNjaWF0b190cmFtMjAxNjAzMTYxMTMzMDU0MjEnLFxuICAgICAgICAgICAgdGl0bGU6IFwiVHJhY2NpYXRvIHRyYW1cIixcbiAgICAgICAgICAgIG5hbWU6IFwidHJhY2NpYXRvX3RyYW1cIixcbiAgICAgICAgICAgIGNyczogMzAwMyxcbiAgICAgICAgICAgIHN0eWxlOiBcIlwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc2NhbGViYXNlZHZpc2liaWxpdHk6IGZhbHNlLFxuICAgICAgICAgICAgbWluc2NhbGU6IG51bGwsXG4gICAgICAgICAgICBtYXhzY2FsZTogbnVsbCxcbiAgICAgICAgICAgIGluZm91cmw6IFwiXCIsXG4gICAgICAgICAgICBpbmZvcmZvcm1hdDogXCJcIixcbiAgICAgICAgICAgIGNhcGFiaWxpdGllczogMSwgLy8gT1IgQklUUzogMT1RVUVSWUFCTEUsIDI9RURJVEFCTEUgLT4gUVVFUllBQkxFIGUgRURJVEFCTEUgPSAxfDIgPSAzXG4gICAgICAgICAgICBlZGl0b3BzOiBudWxsLCAvLyBPUiBCSVRTOiAxPUlOU0VSVCwgMj1VUERBVEUsIDQ9REVMRVRFIC0+IElOU0VSVCArIFVQREFURSArIERFTEVURSA9IDF8Mnw0ID0gN1xuICAgICAgICAgICAgbWV0YWxheWVyOiAxXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBsYXllcnN0cmVlOiBbXG4gICAgICB7IFxuICAgICAgICBuYW1lOiAncHVudGknLFxuICAgICAgICBleHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgbm9kZXM6IFtcbiAgICAgICAgICB7IFxuICAgICAgICAgICAgaWQ6ICdzdHJ1dHR1cmUyMDE2MDMxNjExMzIyNTQwOCcsXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBcbiAgICAgICAgICAgIGlkOiAnYWxiZXJpMjAxNjAzMTYxMTI3NDcwMTAnLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgXG4gICAgICAgICAgICBpZDogJ2Zhcm1hY2llMjAxNjAzMTYxMTM0MTcwMjUnLFxuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBcbiAgICAgICAgICAgIGlkOiAnbXVzZWkyMDE2MDMxNjExMjcyNjI2MScsXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgeyBcbiAgICAgICAgbmFtZTogJ2xpbmVlJywgXG4gICAgICAgIGV4cGFuZGVkOiBmYWxzZSxcbiAgICAgICAgbm9kZXM6IFtcbiAgICAgICAgICB7IFxuICAgICAgICAgICAgaWQ6ICd0cmFjY2lhdG9fdHJhbTIwMTYwMzE2MTEzMzA1NDIxJyxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgXG4gICAgICAgICAgICBpZDogJ3N0cmFkZTIwMTYwMzE2MTEzMDEzMjU3JyxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7IFxuICAgICAgICBpZDogJ1VuaW9uaV9Db211bmlfVG9zY2FuYTIwMTYwMzE2MTEzMzI0MzIyJyxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAgc2VhcmNoOiB7fVxuICB9O1xuICBcbm1vZHVsZS5leHBvcnRzID0gY29uZmlnO1xuXG59LHt9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdXRpbHMgPSB7XG4gIGluaGVyaXQ6IGZ1bmN0aW9uIGluaGVyaXQoZGVzdGluYXRpb24sIHNvdXJjZSwgYWRkU3VwZXIpIHtcbiAgICAgIHZhciBwcm90byA9IGRlc3RpbmF0aW9uLnByb3RvdHlwZSA9IHV0aWxzLmNyZWF0ZU9iamVjdChzb3VyY2UucHJvdG90eXBlKTtcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gZGVzdGluYXRpb247XG5cbiAgICAgIGlmIChhZGRTdXBlciB8fCB0eXBlb2YgYWRkU3VwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgZGVzdGluYXRpb24uX3N1cGVyID0gc291cmNlLnByb3RvdHlwZTtcbiAgICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc291cmNlIG9iamVjdCBuZXN0bGVkIHdpdGhpbiBpdHNcbiAgICogcHJvdG90eXBlIGNoYWluLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIE1ldGhvZCB0byBpbnNlcnQgaW50byB0aGUgbmV3IG9iamVjdCdzIHByb3RvdHlwZS5cbiAgICogQHJldHVybiB7T2JqZWN0fSBBbiBlbXB0eSBvYmplY3Qgd2l0aCB0aGUgc291cmNlIG9iamVjdCBpbiBpdCdzIHByb3RvdHlwZSBjaGFpbi5cbiAgICovXG4gIGNyZWF0ZU9iamVjdDogT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGVPYmplY3Qoc291cmNlKSB7XG4gICAgICB2YXIgSG9zdCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgSG9zdC5wcm90b3R5cGUgPSBzb3VyY2U7XG4gICAgICByZXR1cm4gbmV3IEhvc3QoKTtcbiAgfSxcblxuICAvKipcbiAgICogTWl4ZXMgdGhlIHNwZWNpZmllZCBvYmplY3QgaW50byB5b3VyIGNsYXNzLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGFkZFxuICAgKiBjZXJ0YWluIGNhcGFiaWxpdGllcyBhbmQgaGVscGVyIG1ldGhvZHMgdG8gYSBjbGFzcyB0aGF0IGlzIGFscmVhZHlcbiAgICogaW5oZXJpdGluZyBmcm9tIHNvbWUgb3RoZXIgY2xhc3MuIFlvdSBjYW4gbWl4IGluIGFzIG1hbnkgb2JqZWN0IGFzXG4gICAqIHlvdSB3YW50LCBidXQgb25seSBpbmhlcml0IGZyb20gb25lLlxuICAgKlxuICAgKiBUaGVzZSB2YWx1ZXMgYXJlIG1peGVkIGludG8gdGhlIGFjdHVhbCBwcm90b3R5cGUgb2JqZWN0IG9mIHlvdXJcbiAgICogY2xhc3MsIHRoZXkgYXJlIG5vdCBhZGRlZCB0byB0aGUgcHJvdG90eXBlIGNoYWluIGxpa2UgaW5oZXJpdC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGVzdGluYXRpb24gQ2xhc3MgdG8gbWl4IHRoZSBvYmplY3QgaW50by5cbiAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBPYmplY3QgdG8gbWl4IGludG8gdGhlIGNsYXNzLlxuICAgKi9cbiAgbWl4aW46IGZ1bmN0aW9uIG1peGluKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZShkZXN0aW5hdGlvbi5wcm90b3R5cGUsIHNvdXJjZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lcmdlcyBvbmUgb2JqZWN0IGludG8gYW5vdGhlciwgY2hhbmdlIHRoZSBvYmplY3QgaW4gcGxhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0aW5hdGlvbiBUaGUgZGVzdGluYXRpb24gZm9yIHRoZSBtZXJnZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9mIHRoZSBwcm9wZXJ0aWVzIHRvIG1lcmdlLlxuICAgKi9cbiAgbWVyZ2U6IGZ1bmN0aW9uIG1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgIHZhciBrZXk7XG5cbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmICh1dGlscy5oYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNob3J0Y3V0IGZvciBgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIFVzZXMgYE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGV0eWAgcmF0aGVyIHRoYW5cbiAgICogYG9iamVjdC5oYXNPd25Qcm9wZXJ0eWAgYXMgaXQgY291bGQgYmUgb3ZlcndyaXR0ZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVja1xuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2sgZm9yLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBEb2VzIG9iamVjdCBoYXZlIGtleSBhcyBhbiBvd24gcHJvcGV0eT9cbiAgICovXG4gIGhhc093bjogZnVuY3Rpb24gaGFzT3duKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlscztcblxufSx7fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInRhYmJhYmxlLXBhbmVsXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidGFiYmFibGUtbGluZVxcXCI+XFxuICAgICAgICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYtdGFic1xcXCIgcm9sZT1cXFwidGFibGlzdFxcXCI+XFxuICAgICAgICAgICAgPGxpIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCIgY2xhc3M9XFxcImFjdGl2ZVxcXCI+PGEgaHJlZj1cXFwiI3RyZWVcXFwiIGFyaWEtY29udHJvbHM9XFxcInRyZWVcXFwiIHJvbGU9XFxcInRhYlxcXCIgZGF0YS10b2dnbGU9XFxcInRhYlxcXCI+VHJlZTwvYT48L2xpPlxcbiAgICAgICAgICAgIDxsaSByb2xlPVxcXCJwcmVzZW50YXRpb25cXFwiPjxhIGhyZWY9XFxcIiNsZWdlbmRcXFwiIGFyaWEtY29udHJvbHM9XFxcImxlZ2VuZFxcXCIgcm9sZT1cXFwidGFiXFxcIiBkYXRhLXRvZ2dsZT1cXFwidGFiXFxcIj5MZWdlbmQ8L2E+PC9saT5cXG4gICAgICAgIDwvdWw+XFxuICAgICAgICA8ZGl2ICBjbGFzcz1cXFwidGFiLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgcm9sZT1cXFwidGFicGFuZWxcXFwiIGNsYXNzPVxcXCJ0YWItcGFuZSBhY3RpdmVcXFwiIGlkPVxcXCJ0cmVlXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIGlkPVxcXCJsZWdlbmRcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuXG59LHt9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdCA9IHJlcXVpcmUoJ2kxOG4uc2VydmljZScpO1xudmFyIGxheWVyc1JlZ2lzdHJ5ID0gcmVxdWlyZSgnZzN3L2NvcmUvbGF5ZXJzL2xheWVyc3JlZ2lzdHJ5Jyk7XG5cblZ1ZS5jb21wb25lbnQoJ2czdy1jYXRhbG9nJyx7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vY2F0YWxvZy5odG1sJyksXG4gICAgcHJvcHM6IFsnbGF5ZXJzc2VydmljZSddLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGF5ZXJzdHJlZTogbGF5ZXJzUmVnaXN0cnkuZ2V0TGF5ZXJzVHJlZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNyZWF0ZWxheWVyc3RyZWUgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0cmVlID0gJCgnI3RyZWUnKTtcbiAgICAgICAgICAgIHRyZWUudHJlZXZpZXcoe2RhdGE6IHRoaXMubGF5ZXJzdHJlZSwgc2hvd0ljb246IGZhbHNlfSk7XG4gICAgICAgICAgICB0cmVlLnRyZWV2aWV3KCdjb2xsYXBzZUFsbCcsIHsgc2lsZW50OiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgJ2xheWVyc3RyZWUnOiB7XG4gICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKHZhbCwgb2xkKXtcbiAgICAgICAgICB0aGlzLmNyZWF0ZWxheWVyc3RyZWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVlcDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZWxheWVyc3RyZWUoKTtcbiAgICB9XG59KTtcblxufSx7XCIuL2NhdGFsb2cuaHRtbFwiOjE5LFwiZzN3L2NvcmUvbGF5ZXJzL2xheWVyc3JlZ2lzdHJ5XCI6MTUsXCJpMThuLnNlcnZpY2VcIjo1fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBcIjxsaT5cXG48Zm9ybSByb2xlPVxcXCJmb3JtXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImJveC1ib2R5XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgPGxhYmVsIGZvcj1cXFwiZXhhbXBsZUlucHV0RW1haWwxXFxcIiBzdHlsZT1cXFwiY29sb3I6IHdoaXRlXFxcIj5FbWFpbCBhZGRyZXNzPC9sYWJlbD5cXG4gICAgICA8aW5wdXQgdHlwZT1cXFwiZW1haWxcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJleGFtcGxlSW5wdXRFbWFpbDFcXFwiIHBsYWNlaG9sZGVyPVxcXCJcXFwiPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkNpYW88L2J1dHRvbj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Zvcm0+XFxuPC9saT5cIjtcblxufSx7fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHQgPSByZXF1aXJlKCdpMThuLnNlcnZpY2UnKTtcblxuVnVlLmNvbXBvbmVudCgnZzN3LXNlYXJjaCcse1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3NlYXJjaC5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgXHRyZXR1cm4ge1xuICAgICAgICBcdFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIFx0XG5cdH1cbn0pO1xuXG59LHtcIi4vc2VhcmNoLmh0bWxcIjoyMSxcImkxOG4uc2VydmljZVwiOjV9XX0se30sWzFdKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
