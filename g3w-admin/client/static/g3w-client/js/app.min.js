!function e(t,i,n){function o(s,a){if(!i[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return o(i?i:e)},u,u.exports,e,t,i,n)}return i[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,i){!function(){function t(e){return{debug:!0,resourcesurl:s.server.urls.staticurl,projects:s.group.projects,initproject:s.group.initproject,baselayers:s.group.baselayers,crs:s.group.crs,minscale:s.group.minscale,maxscale:s.group.maxscale,getWmsUrl:function(e){return s.server.urls.ows+"/"+s.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return s.server.urls.config+"/"+s.group.id+"/"+e.type+"/"+e.id},plugins:s.group.plugins}}function i(){r=new Vue({el:"body",ready:function(){$(document).localize()}})}var n=e("i18n.service"),o=(e("app.ui"),e("app.service")),r=null,s={client:{debug:!0,local:!1},server:{urls:{ows:"/ows",api:"/api",config:"/api/config",staticurl:""}},group:null};if(s.client.debug&&(Vue.config.debug=!0),Vue.filter("t",function(e){return n(e)}),o.on("ready",function(){i()}),window.initConfig){s.server.urls.staticurl=initConfig.staticurl,s.group=window.initConfig.group;var a=t(a);o.init(a)}else $(document).on("initconfigReady",function(e,i){s.server.urls.staticurl=i.staticurl,s.group=i.group;var n=t(n);o.init(n)})}()},{"app.service":3,"app.ui":4,"i18n.service":5}],2:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Sidebar toggle button-->\n      <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <geocoder type="Nominatim"></geocoder>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  \n  <sidebar></sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <g3w-map id="map"></g3w-map>\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],3:[function(e,t,i){var n=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,r=e("g3w/core/g3wobject"),s=e("g3w/core/projectsregistry"),a=e("g3w/core/pluginsservice"),l=e("g3w/core/toolsservice"),c=e("tools.config"),u=e("g3w/core/geocodingservice").Nominatim,d=e("g3w/gui/geocoding/geocode.listing"),f=e("g3w/gui/gui"),h=e("layout/sidebar/sidebar"),p=e("layout/floatbar/floatbar"),g=function(){this.initialized=!1,this._modalOverlay=null,this.config={},o(this)};n(g,r);var v=g.prototype;v.init=function(e){this.config=e,this._bootstrap(),u.on("results",function(e){var t=new d;t.results=e,p.insertVM(t)})},v._bootstrap=function(){var e=this;this.initialized||(f.getResourcesUrl=function(){return e.config.resourcesurl},f.showForm=_.bind(p.showPanel,p),f.closeForm=_.bind(p.closePanel,p),f.showPanel=_.bind(h.showPanel,h),f.setModal=_.bind(this._showModalOverlay,this),$.when(s.init(this.config),a.init(this.config),l.init(c)).then(function(){e.emit("ready"),this.initialized=!0}))},v._showModalOverlay=function(e){this._modalOverlay||(this._modalOverlay=$('<div id="g3w-modal-overlay" style="background-color: #000000; opacity: 0.7;z-index:4000;position:fixed;top:0px;left:0px"></div>'),$("body").append(this._modalOverlay),this._modalOverlay.width($(window).innerWidth()),this._modalOverlay.height($(window).innerHeight())),_.isUndefined(e)||e===!0?this._modalOverlay.show():this._modalOverlay.hide()},t.exports=new g},{"g3w/core/g3wobject":32,"g3w/core/geocodingservice":33,"g3w/core/pluginsservice":38,"g3w/core/projectsregistry":40,"g3w/core/toolsservice":41,"g3w/core/utils":42,"g3w/gui/geocoding/geocode.listing":52,"g3w/gui/gui":55,"layout/floatbar/floatbar":8,"layout/sidebar/sidebar":12,"tools.config":13}],4:[function(e,t,i){e("i18n.service");e("g3w/gui/vue.directives"),e("g3w/gui/map/map"),e("g3w/gui/geocoding/geocoding");var n=e("layout/layout"),o=(e("layout/sidebar/sidebar"),e("layout/floatbar/floatbar")),r=e("g3w/core/mapservice"),s=e("g3w/gui/gui.js");Vue.component("app",{template:e("./app.html"),ready:function(){function e(){return $(window).innerHeight()-$(".navbar").innerHeight()}function t(){$("#map").height(e()),r.viewer.map.updateSize()}function i(e){var t=$(".main-sidebar").offset().left;e||(t-=$(".main-sidebar").innerWidth()),$("#map").width($(window).innerWidth()+t),r.viewer.map.updateSize()}function a(){$(u).css("max-height",$(window).innerHeight())}function l(){$("#g3w-modal-overlay").height($(window).innerHeight())}function c(){f===!0?(f=!1,d=!0,t(),i(!1),requestAnimationFrame(c)):d=!1}n.setup(),$("body").toggleClass("fixed"),n.layout.fixSidebar(),n.pushMenu.expandOnHover(),n.layout.activate(),n.controlSidebar._fix($(".control-sidebar-bg")),n.controlSidebar._fix($(".control-sidebar")),o.init(n),$("body").on("expanded.pushMenu",function(){i(!0)}),$("body").on("collapsed.pushMenu",function(){i(!0)}),t();var u=n.options.controlSidebarOptions.selector;a();var d=!1,f=!1;$(window).resize(function(){d===!1&&(f=!0,c()),a(),l()}),s.ready()}})},{"./app.html":2,"g3w/core/mapservice":36,"g3w/gui/geocoding/geocoding":54,"g3w/gui/gui.js":55,"g3w/gui/map/map":57,"g3w/gui/vue.directives":62,"i18n.service":5,"layout/floatbar/floatbar":8,"layout/layout":9,"layout/sidebar/sidebar":12}],5:[function(e,t,i){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e("../locales/it/app.json")});var n=function(e){var t=i18next.t(e);return t};jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0}),t.exports=n},{"../locales/it/app.json":14}],6:[function(e,t,i){function n(){this._panels=[],this.state={panels:[]}}var o=e("g3w/core/utils").inherit,r=e("g3w/core/g3wobject");o(n,r);var s=n.prototype;s.push=function(e,t){e.onShow(t),this._panels.push(e),this.state.panels.push({id:e.id,name:e.name})},s.pop=function(){var e=this._panels.slice(-1)[0];e.onClose()&&(this.state.panels.pop(),this._panels.pop())},t.exports=n},{"g3w/core/g3wobject":32,"g3w/core/utils":42}],7:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <div v-show="panelsinstack" class="g3w-sidebarpanel">\n    <!--<div class="row">\n      <div class="col-xs-12 col-sm-12 col-md-12">\n        <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button>\n      </div>\n    </div>-->\n    <div>\n      <h4 class="g3w-floatbarpanel-name">{{ panelname }}</h2>\n    </div>\n    <div id="g3w-floatbarpanel-placeholder" class="g3w-floatbarpanel-placeholder"></div>\n  </div>\n</aside>\n'},{}],8:[function(e,t,i){function n(){this.stack=new o,this.init=function(e){this.layout=e,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector),this._zindex=this.sidebarEl.css("z-index"),this._modalOverlay=null,this._modal=!1},this.showPanel=function(e,t){this.stack.push(e,"#g3w-floatbarpanel-placeholder"),this.layout.floatBar.open(this.sidebarEl,!0),t&&(this._modal=!0,r.setModal(),this.sidebarEl.css("z-index",5e3),this.sidebarEl.css("padding-top","0px"),$(".control-sidebar-bg").css("z-index",4999),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"))},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy(),this.stack.length||this._modal&&(r.setModal(!1),this.layout.floatBar.close(this.sidebarEl,!0),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"),this.sidebarEl.css("z-index",""),this.sidebarEl.css("padding-top","50px"),$(".control-sidebar-bg").css("z-index",""),this._modal=!1)}}var o=(e("i18n.service"),e("../barstack.js")),r=e("g3w/gui/gui"),s=new n;t.exports=s,Vue.component("floatbar",{template:e("./floatbar.html"),data:function(){return{stack:s.stack.state}},computed:{panelsinstack:function(){return this.stack.panels.length>0},panelname:function(){var e="";return this.stack.panels.length&&(e=this.stack.panels.slice(-1)[0].name),e}},watch:{"stack.panels":function(){var e=$("#g3w-floatbarpanel-placeholder").children();_.forEach(e,function(t,i){i==e.length-1?$(t).show():$(t).hide()})}},methods:{closePanel:function(){s.closePanel()}}})},{"../barstack.js":6,"./floatbar.html":7,"g3w/gui/gui":55,"i18n.service":5}],9:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var n;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),n=t-e):($(".content-wrapper, .right-side").css("min-height",i),n=i);var o=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof o&&o.height()>n&&$(".content-wrapper, .right-side").css("min-height",o.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,i=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var n=$(this),o=n.next();if(o.is(".treeview-menu")&&o.is(":visible"))o.slideUp(i,function(){o.parent("li.treeview").removeClass("active"),o.removeClass("menu-open")});else if(o.is(".treeview-menu")&&!o.is(":visible")){var r,s=n.parents("ul").first(),a=n.parent("li"),l=a.siblings(),c=s.height()-s.find("li.header").outerHeight(),u=a.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var d=c-u;o.css({height:d+"px","max-height":d+"px","overflow-y":"auto"});var f=s.find("ul.treeview-menu:visible").slideUp(i);f.removeClass("menu-open"),o.slideDown(i,function(){o.addClass("menu-open"),r=s.find("li.treeview.active"),r.removeClass("active"),a.addClass("active"),t.layout.fix()})}o.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,i=$(t.selector),n=$(t.toggleBtnSelector);n.on("click",function(n){n.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var o=$(".control-sidebar-bg");e._fix(o),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),n=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),n.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),n.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(o),n.onLoadStart.call(e)}function i(e){e.find(o).remove(),n.onLoadDone.call(e)}var n=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),o=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===n.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),o=e.find(n.trigger).first();o.on("click",function(o){o.preventDefault(),t(e),e.find(".box-body").load(n.source,function(){i(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},t.exports=$.LayoutManager},{}],10:[function(e,t,i){t.exports='<li class="treeview">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span class="treeview-label">{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],11:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n	<section class="sidebar">\n    \n    <div v-show="panelsinstack" class="g3w-sidebarpanel">\n      <div class="row">\n        <div class="col-xs-12 col-sm-12 col-md-12">\n          <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button></div>\n      </div>\n      <div>\n        <h4>{{ panelname }}</h2>\n      </div>\n      <div id="g3w-sidebarpanel-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n    </div>\n    \n	  <ul v-show="!panelsinstack" class="sidebar-menu">\n	    <!--<sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n        <g3w-search></g3w-search>\n      </sidebar-item>-->\n      <sidebar-item data-icon="fa fa-database" data-label="catalog" data-type="inline">\n        <g3w-catalog></g3w-catalog>\n      </sidebar-item>\n      <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n        <g3w-tools></g3w-tools>\n      </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],12:[function(e,t,i){function n(){this.stack=new r,this.init=function(e){this.layout=e},this.showPanel=function(e){this.stack.push(e,"#g3w-sidebarpanel-placeholder")},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy()}}var o=e("i18n.service");e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),e("g3w/gui/tools/tools");var r=e("../barstack.js"),s=new n;t.exports=s,Vue.component("sidebar",{template:e("./sidebar.html"),data:function(){return{panels:s.stack.state.panels,bOpen:!0,bPageMode:!1,header:o("main navigation")}},computed:{panelsinstack:function(){return this.panels.length>0},panelname:function(){var e="";return this.panels.length&&(e=this.panels.slice(-1)[0].name),e}},methods:{closePanel:function(){s.closePanel()}},ready:function(){var t=e("g3w-iternet/plugin");t.startEditing()}}),Vue.component("sidebar-item",{props:["data-icon","data-label","data-type"],template:e("./sidebar-item.html"),data:function(){return{main:!0}},methods:{}})},{"../barstack.js":6,"./sidebar-item.html":10,"./sidebar.html":11,"g3w-iternet/plugin":27,"g3w/gui/catalog/catalog":46,"g3w/gui/search/search":59,"g3w/gui/tools/tools":61,"i18n.service":5}],13:[function(e,t,i){var n={tools:[]};t.exports=n},{}],14:[function(e,t,i){t.exports={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",tools:"Strumenti",tree:"Dati",legend:"Legenda",street_search:"Cerca indirizzo"}}}},{}],15:[function(e,t,i){function n(e){r(this,e),this._formPanel=l}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/gui/form").FormPanel,a=e("g3w/gui/form").Form,l=s.extend({});o(n,a);var c=n.prototype;c._isFieldVisible=function(e){var t=!0;switch(e.name){case"cod_acc_est":var i=this._getField("tip_acc");"0101"==i.value&&(t=!1);break;case"cod_acc_int":var i=this._getField("tip_acc");"0101"!=i.value&&"0501"!=i.value||(t=!1)}return t},c._shouldShowRelation=function(e){if("numero_civico"==e.name){var t=this._getField("tip_acc");if("0102"==t.value)return!1}return!0},t.exports=n},{"g3w/core/utils":42,"g3w/gui/form":50}],16:[function(e,t,i){t.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editingOn && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode,tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode,tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"></img>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div>\n    <button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-danger\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>\n    <img v-show="state.retrievingData" :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],17:[function(e,t,i){function n(){this.id="iternet-editing-panel",this.name="Gestione dati ITERNET",this.panelComponent=null}var o=e("g3w/gui/gui"),r=e("./iternetservice"),s=Vue.extend({template:e("./editorpanel.html"),data:function(){return{state:r.state,resourcesurl:o.getResourcesUrl(),editorstoolbars:[{name:"Accessi",layercode:"accessi",tools:[{title:"Aggiungi accesso",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Modifica accesso",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi accesso",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"pickfeature",icon:"editAttributes.png"}]},{name:"Giunzioni stradali",layercode:"giunzioni",tools:[{title:"Aggiungi giunzione",tooltype:"",icon:"iternetAddPoint.png"},{title:"Modifica giunzione",tooltype:"",icon:"iternetMovePoint.png"},{title:"Rimuovi giunzione",tooltype:"",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"",icon:"editAttributes.png"}]},{name:"Elementi stradali",layercode:"strade",tools:[{title:"Aggiungi strada",tooltype:"",icon:"iternetAddLine.png"},{title:"Modifica vertice strada",tooltype:"",icon:"iternetMoveVertex.png"},{title:"Rimuovi strada",tooltype:"",icon:"iternetDeleteLine.png"},{title:"Edita attributi",tooltype:"",icon:"editAttributes.png"}]}]}},methods:{toggleEditing:function(){r.togglEditing()},toggleEditTool:function(e,t){""!=t&&this.state.editingOn&&r.toggleEditTool(e,t)},editingtoolbtnToggled:function(e,t){return this.state.editingToolRunning.layerCode==e&&this.state.editingToolRunning.toolType==t},editingtoolbtnEnabled:function(e){return""!=e.tooltype}},computed:{editingbtnlabel:function(){return this.state.editingOn?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editingEnabled?"":"disabled"},message:function(){var e="";return this.state.editingEnabled||(e='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing'),e}}}),a=n.prototype;a.onShow=function(e){var t=this.panelComponent=new s;return t.$mount().$appendTo(e),t},a.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,!0},t.exports=n},{"./editorpanel.html":16,"./iternetservice":26,"g3w/gui/gui":55}],18:[function(e,t,i){function n(e){this.options=e||{},this._fields=e.fields||null,this.setForLayer=function(e){e.editor.onbeforeasync("addFeature",function(e,t){var i=self._layers.accessi.vector.getFieldsWithAttributes(),n=self._layers.accessi.vector.getRelationsAsArray();console.log("Prima di aggiungere una nuova feature...");var o=new Form({name:"Inserisci attributi",id:"attributes-edit",dataid:"accessi",fields:i,relations:n,buttons:[{title:"Salva","class":"btn-danger",cbk:function(e){t(!0)}},{title:"Cancella","class":"btn-primary",cbk:function(e){t(!1)}}]});GUI.showForm(o,!0)})}}t.exports=n},{}],19:[function(e,t,i){function n(e,t){this._vectorLayer=e,this._editVectorLayer=t,this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={}}var o=e("g3w/core/utils").inherit,r=e("g3w/core/g3wobject");o(n,r),t.exports=n;var s=n.prototype;s.addFeature=function(e){e.getId()||e.setId("_new_"+Date.now()),this._addEditToGeometryBuffer(e,"add"),console.log("Inserita nuova feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.updateFeature=function(e){this._addEditToGeometryBuffer(e,"update"),console.log("Modificata feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.deleteFeature=function(e){this._addEditToGeometryBuffer(e,"delete"),console.log("Rimossa feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.setAttributes=function(e,t,i){e.getId()||e.setId("_new_"+Date.now()),this._addEditToAttributesBuffer(e,t,i),console.log("Modificati attributi feature: (ID: "+e.getId()+")")},s.getFeatureAttributes=function(e){return this._attributesBuffer[e].slice(-1)[0]},s.areFeatureAttributesEdited=function(e){return this._attributesBuffer[e]?this._attributesBuffer[e].length>-1:!1},s.getRelationsAttributes=function(e){return this._relationsAttributesBuffer[e].slice(-1)[0]},s.areFeatureRelationsEdited=function(e){return this._relationsAttributesBuffer[e]?this._relationsAttributesBuffer[e].length>-1:!1},s.getFeatures=function(){return{added:this._collectFeatures("new"),updated:this._collectFeatures("updated"),deleted:this._collectFeatures("deleted"),relationsattributes:this._collectRelationsAttributes()}},s._collectFeatures=function(e){var t=this,i=this._geometriesBuffer,n=this._attributesBuffer,o=new ol.format.GeoJSON,r=[];r=_.concat(r,_.keys(i)),r=_.concat(r,_.keys(n)),r=_.uniq(r);var s=[];return _.forEach(r,function(r){var a=t._isNewFeature(r),l=a?t._editVectorLayer:t._vectorLayer,r=r,c=null;if(_.get(i,r)){var u=i[r];c=u[u.length-1]}else c=l.getFeatureById(r).getGeometry();var d={};if(_.get(n,r))d=n[n.length-1];else if(a){var f=t._vectorLayer.getFields();_.forEach(f,function(e){d[e.name]=""})}else{var h=l.getFeatureById(r);h&&(d=h.getProperties())}var p=new ol.Feature,g="new"==e&&a&&!_.isNull(c),v="updated"==e&&!a&&!_.isNull(c),y="deleted"==e&&!a&&_.isNull(c);if(g||v){p.setId(r),p.setGeometry(c),p.setProperties(d);var m=o.writeFeatureObject(p);s.push(m)}else y&&s.push(r)}),s},s._collectRelationsAttributes=function(){var e={};return _.forEach(this._relationsAttributesBuffer,function(t,i){lastRelationsAttributes=t[t.length-1],e[i]=lastRelationsAttributes}),e},s._addEditToGeometryBuffer=function(e,t){var i=this._geometriesBuffer,n=e.getId(),o=e.getGeometry();if("delete"==t){o=null;var r=this._isNewFeature(n)?this._editVectorLayer:this._vectorLayer;r.getSource().removeFeature(e)}_.has(i,n)||(i[n]=[]),i[n].push(o)},s._addEditToAttributesBuffer=function(e,t,i){var n=e.getId(),o=this._attributesBuffer;_.has(o,n)||(o[n]=[]),o[n].push(t),i&&(_.has(this._relationsAttributesBuffer,n)||(this._relationsAttributesBuffer[n]=[]),this._relationsAttributesBuffer[n].push(i))},s._isNewFeature=function(e){return e.toString().indexOf("_new_")>-1},s.isDirty=function(){var e=_.keys(this._geometriesBuffer).length>0,t=_.keys(this._attributesBuffer).length>0;return e||t}},{"g3w/core/g3wobject":32,"g3w/core/utils":42}],20:[function(e,t,i){function n(e){this._vectorLayer=null,this._editVectorLayer=null,this._editBuffer=null,this._withFeatureLocks=!1,this._featureLocks=null,this._started=!1,this._setterslisteners={before:{},after:{}},this._geometrytypes=["Point","LineString","MultiLineString"],this._toolsForTypes={Point:{addfeature:u,movefeature:d,deletefeature:f,pickfeature:h},LineString:{movefeature:d}},this._tools={},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/utils").resolvedValue,a=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject")),l=e("g3w/core/mapservice"),c=e("g3w/core/vectorlayer"),u=e("./tools/addpointtool"),d=e("./tools/movepointtool"),f=e("./tools/deletefeaturetool"),h=e("./tools/pickfeaturetool"),p=e("./editbuffer");o(n,a),t.exports=n;var g=n.prototype;g.setVectorLayer=function(e){var t=e.geometrytype;if(!t||!this._isCompatibleType(t))throw Error("Vector geometry type "+t+" is not valid for editing");this._setToolsForVectorType(t),this._vectorLayer=e},g.setFeatureLocks=function(e){this._withFeatureLocks=!0,this._featureLocks=e},g.start=function(){var e=!1;return this._vectorLayer&&(this._editVectorLayer=new c({name:"editvector"}),l.viewer.map.addLayer(this._editVectorLayer.getLayer()),this._editBuffer=new p(this._vectorLayer,this._editVectorLayer),this._setStarted(!0),e=!0),e},g.stop=function(){return this.isStarted()?this.stopTool()?(this.removeAllListeners(),l.viewer.removeLayerByName(this._editVectorLayer.name),this._editBuffer=null,this._setStarted(!1),!0):!1:!0},g.getEditedFeatures=function(){return this._editBuffer.getFeatures()},g.getFieldsWithAttributes=function(e){if(e){var t,i=this._vectorLayer.getFields(),n=this._editBuffer.areFeatureAttributesEdited(e);return n?(t=this._editBuffer.getFeatureAttributes(e),_.forEach(i,function(e){e.value=t[e.name]})):i=this._vectorLayer.getFieldsWithAttributes(e),i}return this._vectorLayer.getFieldsWithAttributes(e);
},g.getRelationsWithAttributes=function(e){var t;if(e){var i=this._editBuffer.areFeatureRelationsEdited(e);if(i){var n=this._vectorLayer.getRelations(),o=this._editBuffer.getRelationsAttributes(e);_.forEach(o,function(e,t){_.forEach(n[t].fields,function(e){e.value=o[t][e.name]})}),t=s(n)}else t=this._vectorLayer.getRelationsWithAttributes(e)}else t=this._vectorLayer.getRelationsWithAttributes(e);return t},g.isDirty=function(){return this._editBuffer?this._editBuffer.isDirty():!1},g.setTool=function(e){if(!this.stopTool())return!1;var t=this._tools[e];if(t){var i=this._activeTool=new t(this);return this._setToolListeners(i,this._setterslisteners),i.run(),!0}},g.stopTool=function(){return this._activeTool&&!this._activeTool.stop()?!1:(this._activeTool=!1,!0)},g.isStarted=function(){return this._started},g.getActiveTool=function(){return this._activeTool},g.onafter=function(e,t){this._onaftertoolaction(e,t)},g.onbefore=function(e,t){this._onbeforetoolaction(e,t,!1)},g.onbeforeasync=function(e,t){this._onbeforetoolaction(e,t,!0)},g._isCompatibleType=function(e){return this._geometrytypes.indexOf(e)>-1},g._setToolsForVectorType=function(e){var t=this,i=this._toolsForTypes[e];_.forEach(i,function(e,i){t._tools[i]=e})},g._onaftertoolaction=function(e,t){_.get(this._setterslisteners,e)||(this._setterslisteners.after[e]=[]),this._setterslisteners.after[e].push({fnc:t})},g._onbeforetoolaction=function(e,t,i){_.get(this._setterslisteners,e)||(this._setterslisteners.before[e]=[]),this._setterslisteners.before[e].push({fnc:t,how:i?"async":"sync"})},g._setToolListeners=function(e,t){_.forEach(t.before,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){"sync"==t.how?e.onbefore(i,t.fnc):e.onbeforeasync(i,t.fnc)})}),_.forEach(t.after,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){e.onafter(i,t.fnc)})})},g._setStarted=function(e){this._started=e},g.setFieldsWithAttributes=function(e,t,i){var n={};_.forEach(t,function(e){n[e.name]=e.value});var o=null;if(i){var o={};_.forEach(i,function(e,t){var i={};_.forEach(e.fields,function(e){i[e.name]=e.value}),o[t]=i})}this._editBuffer.setAttributes(e,n,o)},g.addFeature=function(e){this._editBuffer.addFeature(e)},g.updateFeature=function(e){this._editBuffer.updateFeature(e)},g.deleteFeature=function(e){this._editBuffer.deleteFeature(e)},g.getVectorLayer=function(){return this._vectorLayer},g.getEditVectorLayer=function(){return this._editVectorLayer}},{"./editbuffer":19,"./tools/addpointtool":21,"./tools/deletefeaturetool":23,"./tools/movepointtool":24,"./tools/pickfeaturetool":25,"g3w/core/g3wobject":32,"g3w/core/mapservice":36,"g3w/core/utils":42,"g3w/core/vectorlayer":43}],21:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this._running=!1,this._busy=!1,this.setters={addFeature:{fnc:n.prototype._addFeature,fallback:n.prototype._fallBack}},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");o(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map,i=this.editor.getEditVectorLayer().getLayer().getSource();i.on("addfeature",function(t){e._busy||(e._busy=!0,e.pause(),e.addFeature(t.feature).then(function(e){}).fail(function(){i.removeFeature(t.feature)}))}),this.drawInteraction=new ol.interaction.Draw({type:"Point",source:i,geometryFunction:function(e,t){return new ol.geom.Point(e)}}),t.addInteraction(this.drawInteraction),this.drawInteraction.setActive(!0)},l.pause=function(e){_.isUndefined(e)||e?this.drawInteraction.setActive(!1):this.drawInteraction.setActive(!0)},l.stop=function(){var e=a.viewer.map;return e.removeInteraction(this.drawInteraction),!0},l._addFeature=function(e){return this.editor.addFeature(e),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w/core/g3wobject":32,"g3w/core/mapservice":36,"g3w/core/utils":42}],22:[function(e,t,i){var n=function(e,t,i){ol.events.Event.call(this,e),this.features=t,this.coordinate=i};ol.inherits(n,ol.events.Event);var o=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleMoveEvent:o.handleMoveEvent_,handleUpEvent:o.handleUpEvent_,handleEvent:o.handleEvent_}),this.previousCursor_=void 0,this.lastCoordinate_=null,this.features_=void 0!==e.features?e.features:null};ol.inherits(o,ol.interaction.Pointer),o.handleEvent_=function(e){return e.type!=ol.events.EventType.KEYDOWN?ol.interaction.Pointer.handleEvent.call(this,e):this.features_.getArray().length&&46==e.originalEvent.keyCode?(this.dispatchEvent(new n("deleteend",this.features_,event.coordinate)),!0):void 0},o.handleDownEvent_=function(e){return this.lastFeature_=this.featuresAtPixel_(e.pixel,e.map),this.lastFeature_?(o.handleMoveEvent_.call(this,e),this.dispatchEvent(new n("deleteend",this.features_,e.coordinate)),!0):!1},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=e.map.forEachFeatureAtPixel(e.pixel,function(e){return e});i?(this.previousCursor_=t.style.cursor,t.style.cursor="pointer"):(t.style.cursor=void 0!==this.previousCursor_?this.previousCursor_:"",this.previousCursor_=void 0)},o.prototype.featuresAtPixel_=function(e,t){var i=null,n=t.forEachFeatureAtPixel(e,function(e){return e});return this.features_&&ol.array.includes(this.features_.getArray(),n)&&(i=n),i},t.exports=o},{}],23:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this.setters={deleteFeature:{fnc:n.prototype._deleteFeature,fallback:n.prototype._fallBack}},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice"),l=e("./deletefeatureinteraction");o(n,s),t.exports=n;var c=n.prototype,u=ol.style.createDefaultEditingStyles(),d=[255,0,0,1],f=[255,255,255,1],h=3;u[ol.geom.GeometryType.LINE_STRING][1]=new ol.style.Style({stroke:new ol.style.Stroke({color:d,width:h})}),u[ol.geom.GeometryType.POINT]=[new ol.style.Style({image:new ol.style.Circle({radius:2*h,fill:new ol.style.Fill({color:d}),stroke:new ol.style.Stroke({color:f,width:h/2})}),zIndex:1/0})],ol.array.extend(u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]),ol.array.extend(u[ol.geom.GeometryType.GEOMETRY_COLLECTION],u[ol.geom.GeometryType.LINE_STRING]),c.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click,style:function(e,t){return u[e.getGeometry().getType()]}}),t.addInteraction(this._selectInteraction),this._deleteInteraction=new l({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._deleteInteraction);var i=null;this._deleteInteraction.on("deletestart",function(e){var t=e.features.getArray()[0];i=t.getGeometry()}),this._deleteInteraction.on("deleteend",function(t){var n=t.features.getArray()[0],o=e._isNew(n);try{e._busy||(e._busy=!0,e.pause(!0),e.deleteFeature(n,o).then(function(t){e.pause(!1)}).fail(function(){n.setGeometry(i)}))}catch(r){console.log(r),n.setGeometry(i)}})},c.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._deleteInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._deleteInteraction.setActive(!0))},c.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),e.removeInteraction(this._deleteInteraction),!0},c._deleteFeature=function(e,t){return this.editor.deleteFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},c._fallBack=function(e){this._busy=!1,this.pause(!1)},c._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"./deletefeatureinteraction":22,"g3w/core/g3wobject":32,"g3w/core/mapservice":36,"g3w/core/utils":42}],24:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._origGeometry=null,this.setters={moveFeature:{fnc:n.prototype._moveFeature,fallback:n.prototype._fallBack}},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");o(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click}),t.addInteraction(this._selectInteraction),this._translateInteraction=new ol.interaction.Translate({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._translateInteraction),this._translateInteraction.on("translatestart",function(t){var i=t.features.getArray()[0];e._origGeometry=i.getGeometry().clone()}),this._translateInteraction.on("translateend",function(t){var i=t.features.getArray()[0];e._busy||(e._busy=!0,e.pause(),e.moveFeature(i).then(function(t){e.pause(!1)}).fail(function(){i.setGeometry(e._origGeometry)}))})},l.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._translateInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._translateInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),e.removeInteraction(this._translateInteraction),!0},l._moveFeature=function(e){return this.editor.updateFeature(e),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w/core/g3wobject":32,"g3w/core/mapservice":36,"g3w/core/utils":42}],25:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.pickFeatureInteraction=null,this._running=!1,this._busy=!1,this.setters={pickFeature:s},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/utils").noop,a=e("g3w/core/g3wobject"),l=e("g3w/core/interactions/pickfeatureinteraction"),c=e("g3w/core/mapservice");o(n,a),t.exports=n;var u=n.prototype;u.run=function(){var e=this,t=[this.editor.getVectorLayer().getLayer(),this.editor.getEditVectorLayer().getLayer()];this.pickFeatureInteraction=new l({layers:t}),this.pickFeatureInteraction.on("picked",function(t){e._busy||(e._busy=!0,e.pause(!0),e.pickFeature(t.feature).then(function(t){e._busy=!1,e.pause(!1)}))}),c.pushInteraction(this.pickFeatureInteraction)},u.pause=function(e){_.isUndefined(e)||e?this.pickFeatureInteraction.setActive(!1):this.pickFeatureInteraction.setActive(!0)},u.stop=function(){return c.popInteraction(),!0},u._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w/core/g3wobject":32,"g3w/core/interactions/pickfeatureinteraction":35,"g3w/core/mapservice":36,"g3w/core/utils":42}],26:[function(e,t,i){function n(){var e=this;this._runningEditor=null;var t=this.layerCodes={STRADE:"strade",GIUNZIONI:"giunzioni",ACCESSI:"accessi"};this._layers={},this._layers[t.ACCESSI]={layerCode:t.ACCESSI,vector:null,editor:null,style:{image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:"#ffcc33"})})}},this._layers[t.GIUNZIONI]={layerCode:t.GIUNZIONI,vector:null,editor:null,style:{image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:"#0000ff"})})}},this._layers[t.STRADE]={layerCode:t.STRADE,vector:null,editor:null,style:{stroke:new ol.style.Stroke({width:3,color:"#ff7d2d"})}},this.state={editingEnabled:!1,editingOn:!1,editingToolRunning:{layerCode:null,toolType:null},retrievingData:!1};var i={resolution:1};s.onafter("setResolution",function(t){e.state.editingEnabled=t<i.resolution}),this.init=function(e){this.config=e},this.togglEditing=function(){this.state.editingEnabled&&!this.state.editingOn?this._startEditing():this.state.editingOn&&this._stopOrSave()},this.toggleEditTool=function(e,t){var i=this._layers[e];if(i){var n=this._getCurrentEditingLayerCode(),o=this._getCurrentEditingToolType();if(e==n)t==o?i.editor.stop()&&this._setEditinToolRunning():i.editor.setTool(t)&&this._setEditinToolRunning(e,t);else{var r=!0;if(n){var s=this._layers[n];s.editor.stop()||(r=!1)}r&&(i.editor.start(),this._setupEditToolsListeners(e),i.editor.setTool(t)&&this._setEditinToolRunning(e,t))}}},this.stopEditTools=function(){var e=!0,t=this;return _.forEach(this._layers,function(t){var i=!0;t.editor&&t.editor.isStarted()&&(i=t.editor.stop(),e=e&&i)}),e&&t._setEditinToolRunning(),e},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._startEditing=function(){try{this.state.retrievingData=!0,this._setupVectors().then(function(t){e._addToMap(),e.state.editingOn=!0})}catch(t){console.log(t),this.state.retrievingData=!1}},this._stopEditing=function(){this.stopEditTools()&&(_.forEach(this._layers,function(e,t){var i=e.vector;s.viewer.removeLayerByName(i.name),e.vector=null}),e.state.editingOn=!1)},this._stopOrSave=function(e){var t=this,i={};_.forEach(this._layers,function(e,t){e.editor.isDirty()&&(i[t]=e.editor)}),_.keys(i).length?l.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:{save:{label:"Salva",className:"btn-danger",callback:function(){t._saveAndStop(i)}},cancel:{label:"Annulla",className:"btn-primary",callback:function(){}}}}):this._stopEditing()},this._saveAndStop=function(e){var t={};_.forEach(e,function(e,i){var n=e.getEditedFeatures();t[i]=n}),console.log(t),console.log("Wants to save"),this._stopEditing()},this._getCurrentEditingLayerCode=function(){return this.state.editingToolRunning.layerCode},this._getCurrentEditingToolType=function(){return this.state.editingToolRunning.toolType},this._setEditinToolRunning=function(e,t){arguments?(this.state.editingToolRunning.layerCode=e,this.state.editingToolRunning.toolType=t):(this.state.editingToolRunning.layerCode=null,this.state.editingToolRunning.toolType=null)},this._setupEditToolsListeners=function(e){this._setupAddFeatureAttributesEditingListeners(e),this._setupEditAttributesListeners(e)},this._setupAddFeatureAttributesEditingListeners=function(e){var t=this;t._layers[e].editor.onbeforeasync("addFeature",function(i,n){t._openEditorForm("new",i,e,n)})},this._setupEditAttributesListeners=function(e){var t=this;t._layers[e].editor.onafter("pickFeature",function(i){t._openEditorForm("old",i,e)})},this._openEditorForm=function(t,i,n,o){var r=i.getId(),s=e._layers[n].editor.getFieldsWithAttributes(r),a=e._layers[n].editor.getRelationsWithAttributes(r);a.then(function(t){var r=new u({name:"Edita attributi "+n,id:"attributes-edit-"+n,dataid:n,pk:e._layers[n].vector.pk,fields:s,relations:t,buttons:[{title:"Salva","class":"btn-danger",cbk:function(t,r){e._layers[n].editor.setFieldsWithAttributes(i,t,r),o&&o(!0)}},{title:"Cancella","class":"btn-primary",cbk:function(){o&&o(!1)}}]});l.showForm(r,!0)}).fail(function(){o&&o(!1)})},this._addToMap=function(){var t=s.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){e._layers[i].vector.addToMap(t)})},this._setupVectors=function(){var t=this.getLayerCodes(),i=_.map(t,function(t){return e._getLayerConfig(e.config.layers[t])}),n=_.map(t,function(t){return e._getLayerData(e.config.layers[t])}),o=_.concat(i,n);return $.when.apply(this,o).then(function(){var i=Array.prototype.slice.call(arguments),n=_.zipObject(t,_.zip(i.slice(0,3),i.slice(3)));_.forEach(n,function(t,i){var n=t[0],o=t[1],r=o.vector,s=e.config.layers[i],a=e._layers[i].vector=e._createVector({geometrytype:r.geometrytype,format:r.format,crs:"EPSG:3003",id:s.id,name:s.name,pk:r.pk});a.setFields(n.vector.fields);var l=n.vector.relations;l&&(a.lazyRelations=!0,a.setRelations(l)),a.setStyle(e._layers[i].style),e._setVectorData(a,r.data);var u=new c;u.setVectorLayer(a),o.featurelocks&&u.setFeatureLocks(o.featurelocks),e._layers[i].editor=u}),e.state.retrievingData=!1}).fail(function(){e.state.retrievingData=!1})},this._setVectorData=function(e,t){e.setData(t)},this._getLayerConfig=function(e){var t=$.Deferred();return $.get("/it/iternet/api/editing/"+e.name+"/?config").done(function(e){t.resolve(e)}).fail(function(){t.reject()}),t.promise()},this._getLayerData=function(e){var t=$.Deferred(),i=s.state.bbox;return $.get("/it/iternet/api/editing/"+e.name+"/?editing&in_bbox="+i[0]+","+i[1]+","+i[2]+","+i[3]).done(function(e){t.resolve(e)}).fail(function(){t.reject()}),t.promise()},this._createVector=function(e,t){var i=new a(e);return i}}var o=e("g3w/core/utils").inherit,r=(e("g3w/core/utils").resolvedValue,e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject")),s=(e("g3w/core/projectservice"),e("g3w/core/mapservice")),a=e("g3w/core/vectorlayer"),l=e("g3w/gui/gui"),c=e("./editors/editor"),u=(e("./editors/attributeseditor"),e("./attributesform"));o(n,r),t.exports=new n},{"./attributesform":15,"./editors/attributeseditor":18,"./editors/editor":20,"g3w/core/g3wobject":32,"g3w/core/mapservice":36,"g3w/core/projectservice":39,"g3w/core/utils":42,"g3w/core/vectorlayer":43,"g3w/gui/gui":55}],27:[function(e,t,i){function n(){this.name="iternet",this.tools=[{name:"ITERNET",actions:[{id:"iternet:startEditing",name:"Gestione dati"}]}],this.init=function(e){a.init(e)},this.startEditing=function(){var e=new l;r.showPanel(e)}}var o=e("g3w/core/utils").inherit,r=e("g3w/gui/gui"),s=e("g3w/core/plugin"),a=e("./iternetservice"),l=e("./editorpanel");o(n,s),t.exports=new n},{"./editorpanel":17,"./iternetservice":26,"g3w/core/plugin":37,"g3w/core/utils":42,"g3w/gui/gui":55}],28:[function(e,t,i){var n=e("./map/maphelpers");!function(e,n,o){"function"==typeof define&&define.amd?define(o):"object"==typeof i?t.exports=o():n[e]=o()}("g3wol3",this,function(){"use strict";function e(e,t){var i={};for(var n in e)i[n]=e[n];for(var n in t)i[n]=t[n];return i}var t=e({},n);return{helpers:t}})},{"./map/maphelpers":31}],29:[function(e,t,i){var n={};n.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),n.BING={},n.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),n.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),n.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=n},{}],30:[function(e,t,i){var n={};n.TiledWMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},n.WMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.ImageWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},n.TiledWMSLayer=function(e){var t=new ol.layer.Tile({name:e.name,opacity:1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},t.exports=n},{}],31:[function(e,t,i){BaseLayers=e("../layers/bases");var n={createViewer:function(e){return new o(e)}},o=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1}}).extend([new ol.control.Zoom]),i=new ol.View(e.view),n={controls:t,interactions:ol.interaction.defaults().extend([new ol.interaction.DragRotate]),ol3Logo:!1,view:i,keyboardEventTarget:document};e.id&&(n.target=e.id);var o=new ol.Map(n);this.map=o};o.prototype.updateMap=function(e){},o.prototype.updateView=function(){},o.prototype.getMap=function(){return this.map},o.prototype.setTarget=function(e){this.map.setTarget(e)},o.prototype.goTo=function(e,t){var i=this.map.getView();i.setCenter(e),i.setZoom(t)},o.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},o.prototype.getResolution=function(){var e=this.map.getView();return e.getResolution()},o.prototype.getCenter=function(){var e=this.map.getView();return e.getCenter()},o.prototype.getBBOX=function(){return this.map.getView().calculateExtent(this.map.getSize())},o.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),i=t.getLength(),n=0;i>n;n++)if(e===t.item(n).get("name"))return t.item(n);return null},o.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&(this.map.removeLayer(t),delete t)},o.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&i.visible&&e.push(t)}),e},o.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&e.push(t)}),e},o.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},o.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),i=this.map.getLayers();i.insertAt(0,t)},t.exports=n},{"../layers/bases":29}],32:[function(e,t,i){var n=e("g3w/core/utils").inherit,o=e("g3w/core/utils").noop,r=function(){this.setters&&this._setupListenersChain(this.setters)};n(r,EventEmitter);var s=r.prototype;s.onafter=function(e,t){this._onsetter("after",e,t,!1)},s.onbefore=function(e,t){this._onsetter("before",e,t,!1)},s.onbeforeasync=function(e,t){this._onsetter("before",e,t,!0)},s._onsetter=function(e,t,i,n){var o=this.settersListeners[e],r=""+Math.floor(1e6*Math.random())+Date.now();"before"!=e||n||(i=this._makeChainable(i)),o[t].push({key:r,fnc:i})},s._makeChainable=function(e){var t=this;return function(){var i=Array.prototype.slice.call(arguments),n=i.pop(),o=e.apply(t,arguments),r=!0;_.isBoolean(o)&&(r=o),n(o)}},s._setupListenersChain=function(e){var t=this;this.settersListeners={after:{},before:{}},_.forEach(e,function(e,i){var n=o,r=o;_.isFunction(e)?n=e:(n=e.fnc,r=e.fallback||o),t.settersListeners.after[i]=[],t.settersListeners.before[i]=[],t[i]=function(){function e(){if(u){l=n.apply(t,s),a.resolve(l);var e=t.settersListeners.after[i];_.forEach(e,function(e,i){e.fnc.apply(t,s)}),t.emit("stateChanged")}else r.apply(t,s),a.reject()}function o(i){var n=!0;if(_.isBoolean(i)&&(n=i),u=u&&n,0==c)e.apply(t,s);else{c-=1;var r=Array.prototype.slice.call(s);r.push(o),d[c].fnc.apply(t,r)}}var s=arguments,a=$.Deferred(),l=null,c=0,u=!0,d=this.settersListeners.before[i];return c=d.length,o(),a.promise()}})},t.exports=r},{"g3w/core/utils":42}],33:[function(e,t,i){function n(){var e=this;this.url="http://nominatim.openstreetmap.org",this.search=function(t){var i=($.Deferred(),this.url+"/search?format=json&polygon_geojson=1&q="+t);$.get(i,function(t){e.emit("results",t)})},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/g3wobject");o(n,s),t.exports={Nominatim:new n}},{"g3w/core/g3wobject":32,"g3w/core/utils":42}],34:[function(e,t,i){var n={PICKED:"picked"},o=function(e,t){ol.events.Event.call(this,e),this.coordinate=t};ol.inherits(o,ol.events.Event);var r=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:r.handleDownEvent_,handleUpEvent:r.handleUpEvent_})};ol.inherits(r,ol.interaction.Pointer),r.handleDownEvent_=function(e){return!0},r.handleUpEvent_=function(e){return this.dispatchEvent(new o(n.PICKED,e.coordinate)),!0},t.exports=r},{}],35:[function(e,t,i){var n={PICKED:"picked"},o=function(e,t,i){ol.events.Event.call(this,e),this.feature=t,this.coordinate=i};ol.inherits(o,ol.events.Event);var r=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:r.handleDownEvent_,handleUpEvent:r.handleUpEvent_,handleMoveEvent:r.handleMoveEvent_}),this.layers_=e.layers,this.pickedFeature_=null,this.layerFilter_=function(t){return ol.array.includes(e.layers,t)}};ol.inherits(r,ol.interaction.Pointer),r.handleDownEvent_=function(e){return this.pickedFeature_=this.featuresAtPixel_(e.pixel,e.map),!!this.pickedFeature_},r.handleUpEvent_=function(e){return this.dispatchEvent(new o(n.PICKED,this.pickedFeature_,e.coordinate)),!0},r.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=this.featuresAtPixel_(e.pixel,e.map);i?(this.previousCursor_=t.style.cursor,t.style.cursor="pointer"):(t.style.cursor=void 0!==this.previousCursor_?this.previousCursor_:"",this.previousCursor_=void 0)},r.prototype.featuresAtPixel_=function(e,t){var i=null,n=t.forEachFeatureAtPixel(e,function(e){return e},this,this.layerFilter_);return n&&(i=n),i},t.exports=r},{}],36:[function(e,t,i){function n(){var e=this;this.viewer,this.mapLayers={},this.layersAssociation={},this.state={bbox:[],resoution:null,center:null},this._interactionsStack=[],this.setters={setViewBBOX:function(t){e.state.bbox=t},setResolution:function(t){e.state.resolution=t},setCenter:function(t){e.state.center=t}},l.on("projectset",function(){$script("http://epsg.io/"+l.state.crs+".js"),e.viewer||e.setupViewer(),e.setupLayers(),e.emit("viewerset")}),l.onafter("setLayersVisible",function(t){_.forEach(t,function(t){var i=e.getMapLayerForLayer(t);i.update()})}),this.setupViewer=function(){var t=l.state.extent,i=new ol.proj.Projection({code:"EPSG:"+l.state.crs,extent:t});this.viewer=d.createViewer({view:{projection:i,center:ol.extent.getCenter(l.state.extent),zoom:8}});var n=this.viewer.map.getView();n.on("change:resolution",function(t){e.setViewBBOX(e.viewer.getBBOX()),e.setResolution(e.viewer.getResolution())}),n.on("change:center",function(t){e.setViewBBOX(e.viewer.getBBOX()),e.setCenter(e.viewer.getCenter())})},this.setupLayers=function(){this.mapLayers={},this.layersAssociation={};var t=this.traverseLayersTree(l.state.layerstree);t.forEach(function(t){if(!_.get(t,"nodes")){var i="layer_"+t.metalayer,n=_.get(e.mapLayers,i);n||(url=l.getWmsUrl(),n=e.mapLayers[i]=new h({id:i,url:url}),e.viewer.map.addLayer(n.getLayer())),n.addLayer(t),e.layersAssociation[t.id]=i}}),_.forEach(this.mapLayers,function(e){e.update()})},this.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.metalayer]},this.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,n){_.isNil(e.id)||i.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var i=[];return t(e),i},this.showViewer=function(t){this.viewer.setTarget(t);this.viewer.map;a.on("guiready",function(){e.setViewBBOX(e.viewer.getBBOX()),e.setResolution(e.viewer.getResolution()),e.setCenter(e.viewer.getCenter())})},this.pushInteraction=function(e){if(this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!1)}):t.setActive(!1)}this.viewer.map.addInteraction(e),e.setActive(!0),this._interactionsStack.push(e)},this.popInteraction=function(){var e=this._interactionsStack.pop();if(this.viewer.map.removeInteraction(e),this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!0)}):t.setActive(!0)}},this.goTo=function(e,t){var t=t||5;this.viewer.goTo(e,t)},this.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+l.state.crs);this.goTo(e,t)},this.getFeatureInfo=function(e){var t=this,i=$.Deferred();return this._pickInteraction=new f,this.pushInteraction(this._pickInteraction),this._pickInteraction.on("picked",function(n){t._completeGetFeatureInfo(e,n.coordinate,i)}),i.promise()},this._completeGetFeatureInfo=function(e,t,i){var n=this,o=l.state.type,r=this.mapLayers[this.layersAssociation[e]],s=n.viewer.getResolution(),a="EPSG:"+l.state.crs,u={QUERY_LAYERS:l.getLayer(e).name,INFO_FORMAT:"text/xml"};if(o==c.QDJANGO){var d=p[o];if(d){var f=l.getLayer(e).geometrytype;u[d[f]]=g[f]}}var h=r.getSource().getGetFeatureInfoUrl(t,s,a,u);$.get(h).then(function(e){var t=new X2JS,n=t.xml2json(e),o=n.GetFeatureInfoResponse.Layer.Feature.Attribute,r={};_.forEach(o,function(e){r[e._name]=e._value}),i.resolve(r)}).fail(function(){i.reject()}).always(function(){n.popInteraction(),n._pickInteraction=null})},r(this)}var o=e("./utils").inherit,r=e("./utils").base,s=(e("./utils").deferredValue,e("g3w/core/g3wobject")),a=e("g3w/gui/gui"),l=(e("./projectsregistry"),e("./projectservice").ProjectService),c=e("./projectservice").ProjectTypes,u=e("./projectservice").GeometryTypes,d=e("g3w-ol3/src/g3w.ol3").helpers,f=e("g3w/core/interactions/pickcoordinatesinteraction"),h=e("./wmslayer"),p={};p[c.QDJANGO]={},p[c.QDJANGO][u.POINT]="FI_POINT_TOLERANCE",p[c.QDJANGO][u.LINESTRING]="FI_LINE_TOLERANCE",p[c.QDJANGO][u.POLYGON]="FI_POLYGON_TOLERANCE";var g={};g[u.POINT]=5,g[u.LINESTRING]=5,g[u.POLYGON]=5,o(n,s),t.exports=new n},{"./projectservice":39,"./projectsregistry":40,"./utils":42,"./wmslayer":44,"g3w-ol3/src/g3w.ol3":28,"g3w/core/g3wobject":32,"g3w/core/interactions/pickcoordinatesinteraction":34,"g3w/gui/gui":55}],37:[function(e,t,i){function n(){this.id="plugin",this.tools=[]}var o=e("./utils").inherit,r=e("g3w/core/g3wobject");o(n,r);var s=n.prototype;s.providesTools=function(){return this.tools.length>0},s.getTools=function(){return this.tools},s.getActions=function(e){return e.actions},t.exports=n},{"./utils":42,"g3w/core/g3wobject":32}],38:[function(e,t,i){function n(){var e=this;this.config=null,this.availablePlugins={},this.state={toolsproviders:[]},this.init=function(t){this.config=t,this._setAvailablePlugins(t),_.forEach(this.availablePlugins,function(t){t.providesTools()&&e.state.toolsproviders.push(t)}),this.emit("initend")},this._setAvailablePlugins=function(t){_.has(t,"plugins")&&_.forEach(s,function(i){_.forEach(t.plugins,function(t,n){i.name==n&&(i.init(t),e.availablePlugins[n]=i)})})}}var o=e("./utils").inherit,r=e("g3w/core/g3wobject"),s={iternet:e("g3w-iternet/plugin")};o(n,r),t.exports=new n},{"./utils":42,"g3w-iternet/plugin":27,"g3w/core/g3wobject":32}],39:[function(e,t,i){function n(){var e=this;this.config=null,this.layers={},this.state={layerstree:[]},this.setters={setLayersVisible:function(t,i){_.forEach(t,function(t){e.layers[t.id].visible=i})}},this.init=function(e){this.config=e},this.makeLayersObj=function(t){function i(t){_.forIn(t,function(t,n){_.isNil(t.id)||(e.layers[t.id]=t),_.isNil(t.nodes)||i(t.nodes)})}i(t)},this.setProject=function(e){this.state=e,this.makeLayersObj(e.layerstree),this.emit("projectset")},this.getLayer=function(e){return this.layers[e]},this.getLayerAttributes=function(e){return this.layers[e].attributes},this.getLayerAttributeLabel=function(e,t){var i="";return _.forEach(this.layers[e].attributes,function(e){e.name==t&&(i=e.label)}),i},this.toggleLayer=function(t,i){var i=i||!t.visible;e.setLayersVisible([t],i)},this.toggleLayers=function(t,i){e.setLayersVisible(t,i)},this.getWmsUrl=function(){return this.config.getWmsUrl(this.state)},this.getLegendUrl=function(e){return this.getWmsUrl(this.state)+"?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&FORMAT=image/png&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name},r(this)}var o=e("./utils").inherit,r=e("./utils").base,s=e("g3w/core/g3wobject"),a={QDJANGO:"qdjango",OGR:"ogr"},l={POINT:"Point",LINESTRING:"Line",POLYGON:"Polygon"};o(n,s),t.exports={ProjectService:new n,ProjectTypes:a,GeometryTypes:l}},{"./utils":42,"g3w/core/g3wobject":32}],40:[function(e,t,i){function n(){var e=this;this.state=u.state,this.init=function(t){return u.init(t).then(function(){e.emit("loaded")})},this.addProject=function(e){u.addProject(e)},this.getProject=function(e){return u.getProject(e)},this.getCurrentProject=function(){return this.getProject(u.currentProject.gid)},this.setCurrentProject=function(e){u.setCurrentProject(e)},r(this)}var o=e("./utils").inherit,r=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("./utils").resolvedValue,l=e("./utils").rejectedValue,c=e("./projectservice").ProjectService;
o(n,s);var u={config:null,initialized:!1,state:{baseLayers:{},minScale:null,maxscale:null,projects:[]},init:function(e){return this.initialized?void 0:(this.config=e,this.setupState(),c.init(e),this.setCurrentProject(e.initproject))},setupState:function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.config.projects.forEach(function(t){t.baseLayers=e.config.baselayers,t.minScale=e.config.minscale,t.maxScale=e.config.maxscale,t.crs=e.config.crs,e.state.projects.push(t)})},setCurrentProject:function(e){var t=this,i=this.getProject(e);if(!i)return l("Project doesn't exist");var n=!_.isNil(i.layers);return n?(c.setProject(i),a(i)):this.getProjectFullConfig(i).then(function(e){i=_.merge(i,e),t.buildProjectTree(i),c.setProject(i)})},buildProjectTree:function(e){function t(e){_.forIn(e,function(n,o){if(!_.isNil(n.id)){var r=_.merge(n,i[n.id]);e[parseInt(o)]=r}_.isNil(n.nodes)||(n.title=n.name,t(n.nodes))})}var i=_.keyBy(e.layers,"id"),n=_.cloneDeep(e.layerstree);t(n),e.layerstree=n},getProject:function(e){var t=null;return this.state.projects.forEach(function(i){i.gid==e&&(t=i)}),t},getProjectFullConfig:function(e){var t=$.Deferred(),i=this.config.getProjectConfigUrl(e);return $.get(i).done(function(e){t.resolve(e)}),t.promise()}};t.exports=new n},{"./projectservice":39,"./utils":42,"g3w/core/g3wobject":32,"g3w/core/utils":42}],41:[function(e,t,i){function n(){var e=this;this.config=null,this._actions={},this.state={tools:[]},s.on("initend",function(){_.forEach(s.state.toolsproviders,function(t){e._mergeTools(t.getTools()),e._addActions(t)})}),this.init=function(e){this.config=e,this.setState()},this.setState=function(){this._mergeTools(this.config.tools)},this.fireAction=function(e){var t=this._actions[e],i=this._actionMethod(e);t[i]()},this._actionMethod=function(e){var t=e.split(":");return t.pop()},this._mergeTools=function(t){e.state.tools=_.concat(e.state.tools,t)},this._addActions=function(t){_.forEach(t.getTools(),function(i){_.forEach(t.getActions(i),function(i){e._actions[i.id]=t})})}}var o=e("./utils").inherit,r=e("g3w/core/g3wobject"),s=e("./pluginsservice");o(n,r),t.exports=new n},{"./pluginsservice":38,"./utils":42,"g3w/core/g3wobject":32}],42:[function(e,t,i){var n={mixin:function(e,t){return n.merge(e.prototype,t)},mixininstance:function(e,t){var i=new t;n.merge(e,i),n.merge(e.prototype,t.prototype)},merge:function(e,t){var i;for(i in t)n.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function i(){}i.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new i,e.prototype.constructor=e},base:function(e,t,i){var n=arguments.callee.caller;if(n.superClass_)return n.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var o=Array.prototype.slice.call(arguments,2),r=!1,s=e.constructor;s;s=s.superClass_&&s.superClass_.constructor)if(s.prototype[t]===n)r=!0;else if(r)return s.prototype[t].apply(e,o);if(e[t]===n)return e.constructor.prototype[t].apply(e,o);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},resolvedValue:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},rejectedValue:function(e){var t=$.Deferred();return t.reject(e),t.promise()}};t.exports=n},{}],43:[function(e,t,i){function n(e){var e=e||{};this.geometrytype=e.geometrytype||null,this.format=e.format||null,this.crs=e.crs||null,this.id=e.id||null,this.name=e.name||"",this.pk=e.pk||"id",this._olSource=new ol.source.Vector,this._olLayer=new ol.layer.Vector({name:this.name,source:this._olSource}),this._PKinAttributes=!1,this._fields=null,this.lazyRelations=!0,this._relations=null}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").resolvedValue,s=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject"));o(n,s),t.exports=n;var a=n.prototype;a.setData=function(e){var e;if(this.format){switch(this.format){case"GeoJSON":var t=new ol.format.GeoJSON({defaultDataProjection:this.crs,geometryName:"geometry"});e=t.readFeatures(e)}if(e){this._olSource.addFeatures(e);var i=this.getSource().getFeatures()[0].getProperties();this._PKinAttributes=!!_.get(i,this.pk)}}else console.log("VectorLayer format not defined")},a.setFields=function(e){this._fields=e},a.setPkField=function(){var e=this,t=!1;_.forEach(this._fields,function(i){i.name==e.pk&&(t=!0)}),t||this._fields},a.getFields=function(){return _.cloneDeep(this._fields)},a.getFieldsWithAttributes=function(e){var t,i,n=this,o=_.cloneDeep(this._fields);return e&&(t=this.getSource().getFeatureById(e),i=t.getProperties()),_.forEach(o,function(o){t?this._PKinAttributes||o.name!=n.pk?o.value=i[o.name]:o.value=e:o.value=null}),o},a.setRelations=function(e){_.forEach(e,function(e,t){e.name=t}),this._relations=e},a.getRelations=function(){return this._relations},a.getRelationsWithAttributes=function(e){var t=_.cloneDeep(this._relations);if(!e)return _.forEach(t,function(e,t){_.forEach(e.fields,function(e){e.value=null})}),r(t);if(this.lazyRelations){var i=$.Deferred(),n=[],o=this.getFeatureById(e).getProperties();return _.forEach(t,function(e,t){var i=e.url,r=[];_.forEach(e.fk,function(e){var t=o[e];r.push(e+"="+t)});var s=_.join(r,"&");i+="?"+s,n.push($.get(i).then(function(t){_.forEach(e.fields,function(e){e.value=t[0][e.name]})}))}),$.when.apply(this,n).then(function(){i.resolve(t)}).fail(function(){i.reject()}),i.promise()}},a.setStyle=function(e){var t=new ol.style.Style(e);this._olLayer.setStyle(t)},a.getLayer=function(){return this._olLayer},a.getSource=function(){return this._olLayer.getSource()},a.getFeatureById=function(e){return this._olLayer.getSource().getFeatureById(e)},a.addToMap=function(e){e.addLayer(this._olLayer)}},{"g3w/core/g3wobject":32,"g3w/core/utils":42}],44:[function(e,t,i){function n(e){var t=new o(e);this.getLayer=function(){return t.olLayer},this.getSource=function(){return t.olLayer.getSource()},this.getLayerId=function(){return t.layerId},this.addLayer=function(e){t.addLayer(e)},this.toggleLayer=function(e){_.forEach(t.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),t.updateLayers()},this.update=function(){t.updateLayers()}}function o(e){this.LAYERTYPE={LAYER:"layer",METALAYER:"metalayer"},this.layerId=e.layerId,this.olLayer=null,this.layers=[];var t={name:this.layerId,url:e.url};this.olLayer=new r.WMSLayer(t)}var r=e("g3w-ol3/src/layers/rasters"),s=o.prototype;s.addLayer=function(e){this.layers.push(e)},s.getVisibleLayers=function(){var e=[];return _.forEach(this.layers,function(t){t.visible&&e.push(t)}),e},s.updateLayers=function(){var e=this.getVisibleLayers();this.olLayer.getSource().updateParams({layers:_.join(_.map(e,"name"),",")})},t.exports=n},{"g3w-ol3/src/layers/rasters":30}],45:[function(e,t,i){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree"></a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend"></a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tristate-tree :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tristate-tree>\n        </ul>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],46:[function(e,t,i){var n=(e("i18n.service"),e("g3w/gui/gui"),e("g3w/core/projectservice").ProjectService);Vue.component("g3w-catalog",{template:e("./catalog.html"),data:function(){return{project:n.state}},computed:{layerstree:function(){return this.project.layerstree}},methods:{},ready:function(){}}),Vue.component("tristate-tree",{template:e("./tristate-tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,n.toggleLayers(this.layerstree.nodes,this.parentChecked)):n.toggleLayer(this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(i){_.forIn(i,function(i,n){!_.isNil(i.id)&&i.visible&&t.push(i),_.isNil(i.nodes)||e(i.nodes)})}var t=[],i=this.layerstree;return e(i),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return n.getLegendUrl(this.layer)}},methods:{openform:function(){}}})},{"./catalog.html":45,"./legend.html":47,"./legend_item.html":48,"./tristate-tree.html":49,"g3w/core/projectservice":39,"g3w/gui/gui":55,"i18n.service":5}],47:[function(e,t,i){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],48:[function(e,t,i){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],49:[function(e,t,i){t.exports='<li class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\']" class="fa"></span>\n  <span :class="{bold: isFolder}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tristate-tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n'},{}],50:[function(e,t,i){function n(e){this.panelComponent=null,this.options=e||{},this.id=e.id,this.name=e.name,this.dataid=e.dataid,this.pk=e.pk||null,this.state={fields:e.fields,relations:e.relations},this._formPanel=e.formPanel||a,this._defaults=e.defaults||l.defaults}var o=e("g3w/gui/gui"),r=e("g3w/core/projectservice").ProjectService,s=e("g3w/core/mapservice");Vue.filter("startcase",function(e){return _.startCase(e)});var a=Vue.extend({template:e("./formpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),o.closeForm()},isNotEditable:function(e){return!this.editable},isSimple:function(e){return this.$options.form._isSimple(e)},isSelect:function(e){return this.$options.form._isSelect(e)},isLayerPicker:function(e){return this.$options.form._isLayerPicker(e)},layerPickerPlaceHolder:function(e){return this.$options.form._getlayerPickerLayerName(e.input.options.layerid)},pickLayer:function(e){this.$options.form._pickLayer(e)},isVisible:function(e){return this.$options.form._isFieldVisible(e)},showRelation:function(e){return this.$options.form._shouldShowRelation(e)}}}),l={};l.STRING="string",l.INTEGER="integer",l.FLOAT="float",l.defaults={},l.defaults[l.STRING]="",l.defaults[l.INTEGER]=0,l.defaults[l.FLOAT]=0,l.simpleFieldTypes=[l.STRING,l.INTEGER,l.FLOAT],l.SELECT="select",l.LAYERPICKER="layerpicker",l.specialInputs=[l.SELECT,l.LAYERPICKER];var c=n.prototype;c.onShow=function(e){this._setupFields();var t=this._setupPanel();return this._mountPanel(t,e),t},c.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,!0},c._isNewInsertForm=function(){var e=this.pk,t=this._getField(e);return e&&_.isNull(t.value)},c._isFieldVisible=function(e){return!(!e.editable&&(""==e.value||_.isNull(e.value)))},c._isSimple=function(e){return _.includes(l.specialInputs,e.input.type)?!1:_.includes(l.simpleFieldTypes,e.type)},c._isSelect=function(e){return _.includes(l.specialInputs,e.input.type)&&e.input.type==l.SELECT},c._isLayerPicker=function(e){return _.includes(l.specialInputs,e.input.type)&&e.input.type==l.LAYERPICKER},c._pickLayer=function(e){o.setModal(!1);var t=e.input.options.layerid,i=e.input.options.field,n=r.getLayerAttributeLabel(t,e.input.options.field);s.getFeatureInfo(t).then(function(t){var o=t[i]?t[i]:t[n];e.value=o}).always(function(){o.setModal(!0)})},c._getDefaultValue=function(e){var t=null;return e.input&&e.input.options["default"]?t=e.input.options["default"]:this._isSelect(e)&&(t=e.input.options.values[0].key),t},c._getlayerPickerLayerName=function(e){var t=r.getLayer(e);return t?t.name:""},c._shouldShowRelation=function(e){return!0},c._setupFields=function(){var e=this,t=_.filter(this.state.fields,function(t){return e.pk&&null==t.value?t.name!=e.pk:!0});if(_.forEach(t,function(t){var i=e._getDefaultValue(t);i&&(t.value=i)}),this.state.relations){var i=this.state.relations;_.forEach(i,function(t){_.forEach(t.fields,function(t){var i=e._getDefaultValue(t);i&&(t.value=i)})})}},c._setupPanel=function(){var e=this.panelComponent=new this._formPanel({form:this});return this.options.buttons&&(e.buttons=this.options.buttons),e.state=this.state,e},c._mountPanel=function(e,t){e.$mount().$appendTo(t)},c._getField=function(e){var t=null;return _.forEach(this.state.fields,function(i){i.name==e&&(t=i)}),t},t.exports={Form:n,FormPanel:a}},{"./formpanel.html":51,"g3w/core/mapservice":36,"g3w/core/projectservice":39,"g3w/gui/gui":55}],51:[function(e,t,i){t.exports='<div>\n  <form class="form-horizontal g3w-form">\n    <template v-for="field in state.fields">\n      <div v-if="isVisible(field)" class="form-group has-feedback">\n        <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}</label>\n        <div class="col-sm-8">\n          <input v-if="isSimple(field)" v-disabled="isNotEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n          <select v-if="isSelect(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n            <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n          </select>\n          <div v-if="isLayerPicker(field)">\n            <input class="form-control" @click="pickLayer(field)" onfocus="blur()" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\'" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n            <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n          </div>\n        </div>\n      </div>\n    </template>\n    <div v-for="relation in state.relations">\n      <div v-if="showRelation(relation)" transition="expand">\n        <div class="g3w-relationname">{{ relation.name | startcase }}</div>\n        <template v-for="relfield in relation.fields">\n          <div v-if="isVisible(relfield)" class="form-group has-feedback">\n            <label :for="relfield.name" class="col-sm-4 control-label">{{ relfield.label }}</label>\n            <div class="col-sm-8">\n              <input v-if="isSimple(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n              <select v-if="isSelect(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n                <option v-for="relvalue in relfield.input.options.values" value="{{ relvalue.key }}">{{ relvalue.value }}</option>\n              </select>\n              <div v-if="isLayerPicker(relfield)">\n                <input class="form-control" @click="pickLayer(relfield)" onfocus="blur()" style="cursor:pointer" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(relfield) }}\'" v-model="relfield.value" :id="relfield.name" :placeholder="\'[\'+layerPickerPlaceHolder(relfield)+\']\'">\n                <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n              </div>\n            </div>\n          </div>\n        </template>\n      </div>\n    </div>\n    <div class="form-group">\n      <div class="col-sm-offset-4 col-sm-8">\n        <button v-for="button in buttons" class="btn " :class="[button.class]" @click.stop.prevent="exec(button.cbk)">{{ button.title }}</button>\n      </div>\n    </div>\n  </form>\n</div>\n'},{}],52:[function(e,t,i){var n=e("g3w/core/mapservice"),o=Vue.extend({template:'<ul><li v-for="result in results" @click="goto(result.lon,result.lat)" style="cursor:pointer">{{ result.display_name }}</li></ul>',data:function(){return{results:[]}},methods:{"goto":function(e,t){n.goToWGS84([e,t])}}});t.exports=o},{"g3w/core/mapservice":36}],53:[function(e,t,i){t.exports='<form class="navbar-form" role="search" @submit.prevent>\n  <div class="input-group">\n    <input type="text" class="form-control" :placeholder="placeholder" v-model="query"  name="srch-term" id="srch-term">\n    <div class="input-group-btn">\n        <button class="btn btn-default" type="submit" @click="search"><i class="glyphicon glyphicon-search"></i></button>\n    </div>\n  </div>\n</form>\n'},{}],54:[function(e,t,i){var n=e("i18n.service"),o=e("g3w/core/geocodingservice");Vue.component("geocoder",{template:e("./geocoding.html"),props:["type"],data:function(){return{query:"",placeholder:n("street_search")}},methods:{search:function(e){e.preventDefault();var t=this.query;this.service.search(t)}},ready:function(){var e=this;this.service=o[this.type],this.service.on("results",function(){e.query=""})}})},{"./geocoding.html":53,"g3w/core/geocodingservice":33,"i18n.service":5}],55:[function(e,t,i){function n(){this.getResourcesUrl=noop,this.showForm=noop,this.closeForm=noop,this.showPanel=noop,this.ready=function(){this.emit("guiready")},toastr.options.positionClass="toast-top-center",this.notify=toastr,this.dialog=bootbox}noop=e("g3w/core/utils").noop;var o=e("g3w/core/utils").inherit,r=e("g3w/core/g3wobject");o(n,r),t.exports=new n},{"g3w/core/g3wobject":32,"g3w/core/utils":42}],56:[function(e,t,i){t.exports='<div id="{{id}}" style="width:100%;height:100%"></div>\n'},{}],57:[function(e,t,i){var n=(e("i18n.service"),e("g3w/core/mapservice"));e("g3w-ol3/src/g3w.ol3").helpers;Vue.component("g3w-map",{template:e("./map.html"),props:["id"],ready:function(){n.showViewer(this.$el.id)}})},{"./map.html":56,"g3w-ol3/src/g3w.ol3":28,"g3w/core/mapservice":36,"i18n.service":5}],58:[function(e,t,i){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],59:[function(e,t,i){e("i18n.service");Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":58,"i18n.service":5}],60:[function(e,t,i){t.exports='<div class="g3w-tools">\n  <ul>\n    <li v-for="tool in tools">\n      <div data-toggle="collapse" data-target="#iternet-tools" class="tool-header">\n        <span style="">{{ tool.name }}</span>\n      </div>\n      <div id="iternet-tools" class="tool-box collapse">\n        <template v-for="action in tool.actions">\n          <i class="glyphicon glyphicon-cog"></i>\n          <span @click="fireAction(action.id)">{{ action.name }}</span>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],61:[function(e,t,i){var n=(e("i18n.service"),e("g3w/core/toolsservice"));Vue.component("g3w-tools",{template:e("./tools.html"),data:function(){return{tools:n.state.tools}},methods:{fireAction:function(e){n.fireAction(e)}}})},{"./tools.html":60,"g3w/core/toolsservice":41,"i18n.service":5}],62:[function(e,t,i){Vue.directive("disabled",function(e){e?this.el.setAttribute("disabled","disabled"):this.el.removeAttribute("disabled")}),Vue.directive("selected-first",function(e){0==e?this.el.setAttribute("selected",""):this.el.removeAttribute("selected")})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
