!function e(t,i,n){function o(a,s){if(!i[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(r)return r(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[a]={exports:{}};t[a][0].call(u.exports,function(e){var i=t[a][1][e];return o(i?i:e)},u,u.exports,e,t,i,n)}return i[a].exports}for(var r="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,i){!function(){function t(e){return{debug:!0,assetsurl:a.server.urls.staticurl,projects:a.group.projects,initproject:a.group.initproject,baselayers:a.group.baselayers,crs:a.group.crs,minscale:a.group.minscale,maxscale:a.group.maxscale,getWmsUrl:function(e){return a.server.urls.ows+"/"+a.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return a.server.urls.config+"/"+a.group.id+"/"+e.type+"/"+e.id}}}function i(){r=new Vue({el:"body",ready:function(){$(document).localize()}})}var n=e("i18n.service"),o=(e("app.ui"),e("app.service")),r=null,a={client:{debug:!0,local:!1},server:{urls:{ows:"/ows",api:"/api",config:"/api/config",staticurl:""}},group:null};if(a.client.debug&&(Vue.config.debug=!0),Vue.filter("t",function(e){return n(e)}),o.on("ready",function(){i()}),window.initConfig){a.server.urls.staticurl=initconfig.staticurl,a.group=window.initConfig.group;var s=t(s);o.init(s)}else $(document).on("initconfigReady",function(e,i){a.server.urls.staticurl=i.staticurl,a.group=i.group;var n=t(n);o.init(n)})}()},{"app.service":3,"app.ui":4,"i18n.service":5}],2:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Sidebar toggle button-->\n      <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <geocoder type="Nominatim"></geocoder>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  \n  <sidebar></sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <g3w-map id="map"></g3w-map>\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],3:[function(e,t,i){var n=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,r=e("g3w/core/g3wobject"),a=e("g3w/core/projectsregistry"),s=e("g3w/core/pluginsservice"),l=e("g3w/core/toolsservice"),c=e("tools.config"),u=e("g3w/core/geocodingservice").Nominatim,d=e("g3w/gui/geocoding/geocode.listing"),p=e("g3w/gui/gui"),f=e("layout/floatbar/floatbar"),g=function(){this.initialized=!1,this.config={},o(this)};n(g,r);var h=g.prototype;h.init=function(e){this.config=e,this._bootstrap(),u.on("results",function(e){var t=new d;t.results=e,f.insertVM(t)})},h._bootstrap=function(){var e=this;this.initialized||(p.showForm=f.open,p.showVMForm=f.insertVM,$.when(a.init(this.config),s.init(this.config),l.init(c)).then(function(){e.emit("ready"),this.initialized=!0}))},t.exports=new g},{"g3w/core/g3wobject":19,"g3w/core/geocodingservice":20,"g3w/core/pluginsservice":24,"g3w/core/projectsregistry":26,"g3w/core/toolsservice":28,"g3w/core/utils":29,"g3w/gui/geocoding/geocode.listing":35,"g3w/gui/gui":38,"layout/floatbar/floatbar":7,"tools.config":12}],4:[function(e,t,i){e("i18n.service");e("g3w/gui/map/map"),e("g3w/gui/geocoding/geocoding");var n=e("layout/layout");e("layout/sidebar/sidebar");var o=e("layout/floatbar/floatbar"),r=e("g3w/core/mapservice");Vue.component("app",{template:e("./app.html"),ready:function(){function e(){$("#map").height($(window).innerHeight()-$(".navbar").innerHeight()),r.viewer.map.updateSize()}function t(e){var t=$(".main-sidebar").offset().left;e||(t-=$(".main-sidebar").innerWidth()),$("#map").width($(window).innerWidth()+t),r.viewer.map.updateSize()}function i(){s===!0?(s=!1,a=!0,e(),t(!1),requestAnimationFrame(i)):a=!1}n.setup(),$("body").toggleClass("fixed"),n.layout.fixSidebar(),n.pushMenu.expandOnHover(),n.layout.activate(),n.controlSidebar._fix($(".control-sidebar-bg")),n.controlSidebar._fix($(".control-sidebar")),o.init(n),$("body").on("expanded.pushMenu",function(){t(!0)}),$("body").on("collapsed.pushMenu",function(){t(!0)}),e();var a=!1,s=!1;$(window).resize(function(){a===!1&&(s=!0,i())})}})},{"./app.html":2,"g3w/core/mapservice":22,"g3w/gui/geocoding/geocoding":37,"g3w/gui/map/map":40,"i18n.service":5,"layout/floatbar/floatbar":7,"layout/layout":8,"layout/sidebar/sidebar":11}],5:[function(e,t,i){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e("../locales/it/app.json")});var n=function(e){var t=i18next.t(e);return t};jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0}),t.exports=n},{"../locales/it/app.json":13}],6:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <div class="row">\n    <div class="col-xs-12 col-sm-12 col-md-12"><button class="glyphicon glyphicon-remove pull-right" @click="close"></button></div>\n  </div>\n  <div class="row">\n    <div class="col-xs-12 col-sm-12 col-md-12"><div id="floatbar-content-wrapper" class="clearfix"></div></div>\n  </div>\n  \n</aside>\n'},{}],7:[function(e,t,i){function n(){this.state={},this.layout=null,this.sidebarEl=null,this.child=null,this.init=function(e){this.layout=e,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector)},this.open=function(){this.layout.floatBar.open(this.sidebarEl,!0)},this.close=function(){this.child&&_.hasIn(this.child,"$destroy")&&(this.child.$destroy(),this.child=null),this.layout.floatBar.close(this.sidebarEl,!0)},this.insertVM=function(e){this.child=e,this.child.$mount("#floatbar-content-wrapper"),this.open()}}var o=new n;t.exports=o,Vue.component("floatbar",{template:e("./floatbar.html"),data:function(){return{content:"Contenuto"}},methods:{close:function(){o.close()}}})},{"./floatbar.html":6}],8:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var n;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),n=t-e):($(".content-wrapper, .right-side").css("min-height",i),n=i);var o=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof o&&o.height()>n&&$(".content-wrapper, .right-side").css("min-height",o.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,i=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var n=$(this),o=n.next();if(o.is(".treeview-menu")&&o.is(":visible"))o.slideUp(i,function(){o.parent("li.treeview").removeClass("active"),o.removeClass("menu-open")});else if(o.is(".treeview-menu")&&!o.is(":visible")){var r,a=n.parents("ul").first(),s=n.parent("li"),l=s.siblings(),c=a.height()-a.find("li.header").outerHeight(),u=s.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var d=c-u;o.css({height:d+"px","max-height":d+"px","overflow-y":"auto"});var p=a.find("ul.treeview-menu:visible").slideUp(i);p.removeClass("menu-open"),o.slideDown(i,function(){o.addClass("menu-open"),r=a.find("li.treeview.active"),r.removeClass("active"),s.addClass("active"),t.layout.fix()})}o.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,i=$(t.selector),n=$(t.toggleBtnSelector);n.on("click",function(n){n.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var o=$(".control-sidebar-bg");e._fix(o),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),n=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),n.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),n.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(o),n.onLoadStart.call(e)}function i(e){e.find(o).remove(),n.onLoadDone.call(e)}var n=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),o=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===n.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),o=e.find(n.trigger).first();o.on("click",function(o){o.preventDefault(),t(e),e.find(".box-body").load(n.source,function(){i(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},t.exports=$.LayoutManager},{}],9:[function(e,t,i){t.exports='<li class="treeview">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span>{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],10:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n	<section class="sidebar">\n	  <ul class="sidebar-menu">\n	    <!--<sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n        <g3w-search></g3w-search>\n      </sidebar-item>-->\n      <sidebar-item data-icon="fa fa-database" data-label="catalog" data-type="inline">\n        <g3w-catalog></g3w-catalog>\n      </sidebar-item>\n      <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n        <g3w-tools></g3w-tools>\n      </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],11:[function(e,t,i){var n=e("i18n.service");e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),e("g3w/gui/tools/tools"),Vue.component("sidebar",{template:e("./sidebar.html"),data:function(){return{bOpen:!0,bPageMode:!1,header:n("main navigation")}}}),Vue.component("sidebar-item",{props:["data-icon","data-label","data-type"],template:e("./sidebar-item.html"),data:function(){return{main:!0}},methods:{}})},{"./sidebar-item.html":9,"./sidebar.html":10,"g3w/gui/catalog/catalog":31,"g3w/gui/search/search":42,"g3w/gui/tools/tools":44,"i18n.service":5}],12:[function(e,t,i){var n={tools:[]};t.exports=n},{}],13:[function(e,t,i){t.exports={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",tools:"Strumenti",tree:"Dati",legend:"Legenda",street_search:"Cerca indirizzo"}}}},{}],14:[function(e,t,i){function n(){this.tools=[{name:"ITERNET",actions:[{id:"iternet:startEditing",name:"Avvio editing"}]}],this.startEditing=function(){r.notify.success("Iternet editing starting")}}var o=e("g3w/core/utils").inherit,r=e("g3w/gui/gui"),a=e("g3w/core/plugin");o(n,a),t.exports=new n},{"g3w/core/plugin":23,"g3w/core/utils":29,"g3w/gui/gui":38}],15:[function(e,t,i){var n=e("./map/maphelpers");!function(e,n,o){"function"==typeof define&&define.amd?define(o):"object"==typeof i?t.exports=o():n[e]=o()}("g3wol3",this,function(){"use strict";function e(e,t){var i={};for(var n in e)i[n]=e[n];for(var n in t)i[n]=t[n];return i}var t=e({},n);return{helpers:t}})},{"./map/maphelpers":18}],16:[function(e,t,i){var n={};n.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),n.BING={},n.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),n.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),n.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=n},{}],17:[function(e,t,i){var n={};n.TiledWMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},n.WMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.ImageWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},n.TiledWMSLayer=function(e){var t=new ol.layer.Tile({name:e.name,opacity:1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},t.exports=n},{}],18:[function(e,t,i){BaseLayers=e("../layers/bases");var n={createViewer:function(e){return new o(e)}},o=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1}}).extend([new ol.control.Zoom]),i=new ol.View(e.view),n={controls:t,interactions:ol.interaction.defaults().extend([new ol.interaction.DragRotate]),ol3Logo:!1,view:i};e.id&&(n.target=e.id);var o=new ol.Map(n);this.map=o};o.prototype.updateMap=function(e){},o.prototype.updateView=function(){},o.prototype.getMap=function(){return this.map},o.prototype.setTarget=function(e){this.map.setTarget(e)},o.prototype.goTo=function(e,t){var i=this.map.getView();i.setCenter(e),i.setZoom(t)},o.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},o.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),i=t.getLength(),n=0;i>n;n++)if(e===t.item(n).get("name"))return t.item(n);return null},o.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&this.map.removeLayer(t)},o.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&i.visible&&e.push(t)}),e},o.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&e.push(t)}),e},o.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},o.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),i=this.map.getLayers();i.insertAt(0,t)},t.exports=n},{"../layers/bases":16}],19:[function(e,t,i){var n=e("g3w/core/utils").inherit,o=function(){};n(o,EventEmitter),t.exports=o},{"g3w/core/utils":29}],20:[function(e,t,i){function n(){var e=this;this.url="http://nominatim.openstreetmap.org",this.search=function(t){var i=($.Deferred(),this.url+"/search?format=json&polygon_geojson=1&q="+t);$.get(i,function(t){e.emit("results",t)})},r(this)}var o=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,a=e("g3w/core/g3wobject");o(n,a),t.exports={Nominatim:new n}},{"g3w/core/g3wobject":19,"g3w/core/utils":29}],21:[function(e,t,i){function n(e){var t=new o(e);this.getOlLayer=function(){return t.olLayer},this.getLayerId=function(){return t.layerId},this.addLayer=function(e){t.addLayer(e)},this.toggleLayer=function(e){_.forEach(t.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),t.updateLayers()},this.update=function(){t.updateLayers()}}function o(e){this.LAYERTYPE={LAYER:"layer",METALAYER:"metalayer"},this.layerId=e.layerId,this.olLayer=null,this.layers=[];var t={name:this.layerId,url:e.url};this.olLayer=new r.WMSLayer(t)}var r=e("g3w-ol3/src/layers/rasters"),a=o.prototype;a.addLayer=function(e){this.layers.push(e)},a.getVisibleLayers=function(){var e=[];return _.forEach(this.layers,function(t){t.visible&&e.push(t)}),e},a.updateLayers=function(){var e=this.getVisibleLayers();this.olLayer.getSource().updateParams({layers:_.join(_.map(e,"name"),",")})},t.exports=n},{"g3w-ol3/src/layers/rasters":17}],22:[function(e,t,i){function n(){var e=this;this.viewer,this.mapLayers={},this.state={},a.on("projectset",function(){$script("http://epsg.io/"+a.state.crs+".js"),e.viewer||e.setupViewer(),e.setupLayers()}),a.onafter("setLayersVisible",function(t){_.forEach(t,function(t){var i=e.getMapLayerForLayer(t);i.update()})}),this.setupViewer=function(){var e=a.state.extent,t=new ol.proj.Projection({code:"EPSG:"+a.state.crs,extent:e});this.viewer=s.createViewer({view:{projection:t,center:ol.extent.getCenter(a.state.extent),zoom:1}})},this.setupLayers=function(){var t=this.traverseLayersTree(a.state.layerstree);t.forEach(function(t){if(!_.get(t,"nodes")){var i="layer_"+t.metalayer,n=_.get(e.mapLayers,i);n||(url=a.getWmsUrl(),n=e.mapLayers[i]=new l({id:i,url:url}),e.viewer.map.addLayer(n.getOlLayer())),n.addLayer(t)}}),_.forEach(this.mapLayers,function(e){e.update()})},this.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.metalayer]},this.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,n){_.isNil(e.id)||i.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var i=[];return t(e),i},this.showViewer=function(e){this.viewer.setTarget(e)},this.goTo=function(e,t){var t=t||5;this.viewer.goTo(e,t)},this.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+a.state.crs);this.goTo(e,t)}}var o=e("./utils").inherit,r=(e("./utils").deferredValue,e("./stateprovider")),a=(e("./projectsregistry"),e("./projectservice")),s=e("g3w-ol3/src/g3w.ol3").helpers,l=e("./maplayer");o(a,r),t.exports=new n},{"./maplayer":21,"./projectservice":25,"./projectsregistry":26,"./stateprovider":27,"./utils":29,"g3w-ol3/src/g3w.ol3":15}],23:[function(e,t,i){function n(){this.tools=[]}var o=e("./utils").inherit,r=e("g3w/core/g3wobject");o(n,r);var a=n.prototype;a.providesTools=function(){return this.tools.length>0},a.getTools=function(){return this.tools},a.getActions=function(e){return e.actions},t.exports=n},{"./utils":29,"g3w/core/g3wobject":19}],24:[function(e,t,i){function n(){var e=this;this.config=null,this.availablePlugins=a,this.state={activeplugins:["g3w-iternet"],toolsproviders:[]},this.init=function(t){this.config=t,_.forEach(this.state.activeplugins,function(t){var i=e.availablePlugins[t];i.providesTools()&&e.state.toolsproviders.push(i)}),this.emit("initend")}}var o=e("./utils").inherit,r=e("./stateprovider"),a={"g3w-iternet":e("g3w-iternet/plugin")};o(n,r),t.exports=new n},{"./stateprovider":27,"./utils":29,"g3w-iternet/plugin":14}],25:[function(e,t,i){function n(){var e=this;this.config=null,this.layers={},this.state={layerstree:[]},this.init=function(e){this.config=e},this.makeLayersObj=function(t){function i(t){_.forIn(t,function(t,n){_.isNil(t.id)||(e.layers[t.id]=t),_.isNil(t.nodes)||i(t.nodes)})}i(t)},this.setProject=function(e){this.state=e,this.makeLayersObj(e.layerstree),this.emit("projectset")};var t={setLayersVisible:function(t,i){_.forEach(t,function(t){e.layers[t.id].visible=i})}};this.initSetters(t),this.getLayer=function(e){return this.layers[e]},this.toggleLayer=function(t,i){var i=i||!t.visible;e.setLayersVisible([t],i)},this.toggleLayers=function(t,i){e.setLayersVisible(t,i)},this.getWmsUrl=function(){return this.config.getWmsUrl(this.state)},this.getLegendUrl=function(e){return this.getWmsUrl(this.state)+"?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&FORMAT=image/png&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name}}var o=e("./utils").inherit,r=e("./stateprovider");o(n,r),t.exports=new n},{"./stateprovider":27,"./utils":29}],26:[function(e,t,i){function n(){var e=this;this.state=u.state,this.init=function(t){return u.init(t).then(function(){e.emit("loaded")})},this.addProject=function(e){u.addProject(e)},this.getProject=function(e){return u.getProject(e)},this.getCurrentProject=function(){return this.getProject(u.currentProject.gid)},this.setCurrentProject=function(e){u.setCurrentProject(e)},r(this)}var o=e("./utils").inherit,r=e("g3w/core/utils").base,a=e("g3w/core/g3wobject"),s=e("./utils").resolvedValue,l=e("./utils").rejectedValue,c=e("./projectservice");o(n,a);var u={config:null,initialized:!1,state:{baseLayers:{},minScale:null,maxscale:null,projects:[]},init:function(e){return this.initialized?void 0:(this.config=e,this.setupState(),c.init(e),this.setCurrentProject(e.initproject))},setupState:function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.config.projects.forEach(function(t){t.baseLayers=e.config.baselayers,t.minScale=e.config.minscale,t.maxScale=e.config.maxscale,t.crs=e.config.crs,e.state.projects.push(t)})},setCurrentProject:function(e){var t=this,i=this.getProject(e);if(!i)return l("Project doesn't exist");var n=!_.isNil(i.layers);return n?(c.setProject(i),s(i)):this.getProjectFullConfig(i).then(function(e){i=_.merge(i,e),t.buildProjectTree(i),c.setProject(i)})},buildProjectTree:function(e){function t(e){_.forIn(e,function(n,o){if(!_.isNil(n.id)){var r=_.merge(n,i[n.id]);e[parseInt(o)]=r}_.isNil(n.nodes)||(n.title=n.name,t(n.nodes))})}var i=_.keyBy(e.layers,"id"),n=_.cloneDeep(e.layerstree);t(n),e.layerstree=n},getProject:function(e){var t=null;return this.state.projects.forEach(function(i){i.gid==e&&(t=i)}),t},getProjectFullConfig:function(e){var t=$.Deferred(),i=this.config.getProjectConfigUrl(e);return $.get(i).done(function(e){t.resolve(e)}),t.promise()}};t.exports=new n},{"./projectservice":25,"./utils":29,"g3w/core/g3wobject":19,"g3w/core/utils":29}],27:[function(e,t,i){function n(){}var o=e("./utils").inherit,r=e("g3w/core/g3wobject");o(n,r);var a=n.prototype;a.stateSet=function(e,t){var i=_.get(this.state,e,null);if(i){var n=this.getPathKey(e),o=this.getsettersListeners(),r=o[n],a=!0;_.forEach(r,function(e,n){a&=e.apply(this,[t,i])}),a&&(console.log("Setting: "+e+"="+t),_.set(this.state,e,t))}},a.onafter=function(e,t){this.onsetter("after",e,t)},a.onbefore=function(e,t){this.onsetter("before",e,t)},a.onsetter=function(e,t,i){var n=this.settersListeners[e];_.isUndefined(n[t])&&(n[t]={});var o=""+Math.floor(1e6*Math.random())+Date.now();return n[t][o]=i,this.generateUnListener(t,o)},a.generateUnListener=function(e,t,i){return function(){e[t][i]=null,delete e[t][i]}},a.initSetters=function(e){var t=this;this.settersListeners={after:{},before:{}},this.setters=e,_.forEach(e,function(e,i){t[i]=function(){var n=arguments,o=this.settersListeners.before[i],r=!0;if(_.forEach(o,function(e,t){var i=e.apply(this,n);_.isNil(i)||(r&=i)}),r){e.apply(t,n);var a=this.settersListeners.after[i];_.forEach(a,function(e,t){e.apply(this,n)}),t.emit("stateChanged")}}})},t.exports=n},{"./utils":29,"g3w/core/g3wobject":19}],28:[function(e,t,i){function n(){var e=this;this.config=null,this._actions={},this.state={tools:[]},a.on("initend",function(){_.forEach(a.state.toolsproviders,function(t){e._mergeTools(t.getTools()),e._addActions(t)})}),this.init=function(e){this.config=e,this.setState()},this.setState=function(){this._mergeTools(this.config.tools)},this.fireAction=function(e){var t=this._actions[e],i=this._actionMethod(e);t[i]()},this._actionMethod=function(e){var t=e.split(":");return t.pop()},this._mergeTools=function(t){e.state.tools=_.concat(e.state.tools,t)},this._addActions=function(t){_.forEach(t.getTools(),function(i){_.forEach(t.getActions(i),function(i){e._actions[i.id]=t})})}}var o=e("./utils").inherit,r=e("./stateprovider"),a=e("./pluginsservice");o(n,r),t.exports=new n},{"./pluginsservice":24,"./stateprovider":27,"./utils":29}],29:[function(e,t,i){var n={mixin:function(e,t){return n.merge(e.prototype,t)},mixininstance:function(e,t){var i=new t;n.merge(e,i),n.merge(e.prototype,t.prototype)},merge:function(e,t){var i;for(i in t)n.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function i(){}i.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new i,e.prototype.constructor=e},base:function(e,t,i){var n=arguments.callee.caller;if(n.superClass_)return n.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var o=Array.prototype.slice.call(arguments,2),r=!1,a=e.constructor;a;a=a.superClass_&&a.superClass_.constructor)if(a.prototype[t]===n)r=!0;else if(r)return a.prototype[t].apply(e,o);
if(e[t]===n)return e.constructor.prototype[t].apply(e,o);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},resolvedValue:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},rejectedValue:function(e){var t=$.Deferred();return t.reject(e),t.promise()}};t.exports=n},{}],30:[function(e,t,i){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree"></a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend"></a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tristate-tree :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tristate-tree>\n        </ul>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],31:[function(e,t,i){var n=(e("i18n.service"),e("g3w/gui/gui"),e("g3w/core/projectservice"));Vue.component("g3w-catalog",{template:e("./catalog.html"),data:function(){return{project:n.state}},computed:{layerstree:function(){return this.project.layerstree}},methods:{},ready:function(){}}),Vue.component("tristate-tree",{template:e("./tristate-tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,n.toggleLayers(this.layerstree.nodes,this.parentChecked)):n.toggleLayer(this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(i){_.forIn(i,function(i,n){!_.isNil(i.id)&&i.visible&&t.push(i),_.isNil(i.nodes)||e(i.nodes)})}var t=[],i=this.layerstree;return e(i),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return n.getLegendUrl(this.layer)}},methods:{openform:function(){}}})},{"./catalog.html":30,"./legend.html":32,"./legend_item.html":33,"./tristate-tree.html":34,"g3w/core/projectservice":25,"g3w/gui/gui":38,"i18n.service":5}],32:[function(e,t,i){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],33:[function(e,t,i){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],34:[function(e,t,i){t.exports='<li class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\']" class="fa"></span>\n  <span :class="{bold: isFolder}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tristate-tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n'},{}],35:[function(e,t,i){var n=e("g3w/core/mapservice"),o=Vue.extend({template:'<ul><li v-for="result in results" @click="goto(result.lon,result.lat)" style="cursor:pointer">{{ result.display_name }}</li></ul>',data:function(){return{results:[]}},methods:{"goto":function(e,t){n.goToWGS84([e,t])}}});t.exports=o},{"g3w/core/mapservice":22}],36:[function(e,t,i){t.exports='<form class="navbar-form" role="search" @submit.prevent>\n  <div class="input-group">\n    <input type="text" class="form-control" :placeholder="placeholder" v-model="query"  name="srch-term" id="srch-term">\n    <div class="input-group-btn">\n        <button class="btn btn-default" type="submit" @click="search"><i class="glyphicon glyphicon-search"></i></button>\n    </div>\n  </div>\n</form>\n'},{}],37:[function(e,t,i){var n=e("i18n.service"),o=e("g3w/core/geocodingservice");Vue.component("geocoder",{template:e("./geocoding.html"),props:["type"],data:function(){return{query:"",placeholder:n("street_search")}},methods:{search:function(e){e.preventDefault();var t=this.query;this.service.search(t)}},ready:function(){var e=this;this.service=o[this.type],this.service.on("results",function(){e.query=""})}})},{"./geocoding.html":36,"g3w/core/geocodingservice":20,"i18n.service":5}],38:[function(e,t,i){function n(){this.showForm=noop,this.showVMForm=noop,toastr.options.positionClass="toast-top-center",this.notify=toastr}noop=e("g3w/core/utils").noop,t.exports=new n},{"g3w/core/utils":29}],39:[function(e,t,i){t.exports='<div id="{{id}}" style="width:100%;height:100%"></div>\n'},{}],40:[function(e,t,i){var n=(e("i18n.service"),e("g3w/core/mapservice"));e("g3w/core/projectservice"),e("g3w-ol3/src/g3w.ol3").helpers;Vue.component("g3w-map",{template:e("./map.html"),props:["id"],ready:function(){n.showViewer(this.$el.id)}})},{"./map.html":39,"g3w-ol3/src/g3w.ol3":15,"g3w/core/mapservice":22,"g3w/core/projectservice":25,"i18n.service":5}],41:[function(e,t,i){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],42:[function(e,t,i){e("i18n.service");Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":41,"i18n.service":5}],43:[function(e,t,i){t.exports='<div class="g3w-tools">\n  <ul>\n    <li v-for="tool in tools">\n      <div data-toggle="collapse" data-target="#iternet-tools" class="tool-header">\n        <span style="">{{ tool.name }}</span>\n      </div>\n      <div id="iternet-tools" class="tool-box collapse">\n        <template v-for="action in tool.actions">\n          <i class="glyphicon glyphicon-cog"></i>\n          <span @click="fireAction(action.id)">{{ action.name }}</span>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],44:[function(e,t,i){var n=(e("i18n.service"),e("g3w/gui/gui"),e("app.service")),o=e("g3w/core/toolsservice");Vue.component("g3w-tools",{template:e("./tools.html"),data:function(){return{tools:o.state.tools}},computed:{assetsurl:function(){return n.config.assetsurl}},methods:{fireAction:function(e){o.fireAction(e)}}})},{"./tools.html":43,"app.service":3,"g3w/core/toolsservice":28,"g3w/gui/gui":38,"i18n.service":5}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
