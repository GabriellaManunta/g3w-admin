!function e(t,i,n){function r(s,a){if(!i[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return r(i?i:e)},u,u.exports,e,t,i,n)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(e,t,i){!function(){function t(e){return{debug:!0,resourcesurl:s.server.urls.staticurl,projects:s.group.projects,initproject:s.group.initproject,baselayers:s.group.baselayers,crs:s.group.crs,minscale:s.group.minscale,maxscale:s.group.maxscale,getWmsUrl:function(e){return s.server.urls.ows+"/"+s.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return s.server.urls.config+"/"+s.group.id+"/"+e.type+"/"+e.id},plugins:s.group.plugins}}function i(){o=new Vue({el:"body",ready:function(){$(document).localize()}})}var n=e("i18n.service"),r=(e("app.ui"),e("app.service")),o=null,s={client:{debug:!0,local:!1},server:{urls:{ows:"/ows",api:"/api",config:"/api/config",staticurl:""}},group:null};if(s.client.debug&&(Vue.config.debug=!0),Vue.filter("t",function(e){return n(e)}),r.on("ready",function(){i()}),window.initConfig){s.server.urls.staticurl=initConfig.staticurl,s.group=window.initConfig.group;var a=t(a);r.init(a)}else $(document).on("initconfigReady",function(e,i){s.server.urls.staticurl=i.staticurl,s.group=i.group;var n=t(n);r.init(n)})}()},{"app.service":3,"app.ui":4,"i18n.service":5}],2:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Sidebar toggle button-->\n      <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <geocoder type="Nominatim"></geocoder>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  \n  <sidebar></sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <g3w-map id="map"></g3w-map>\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],3:[function(e,t,i){var n=e("g3w/core/utils").inherit,r=e("g3w/core/utils").base,o=e("g3w/core/g3wobject"),s=e("g3w/core/projectsregistry"),a=e("g3w/core/pluginsservice"),l=e("g3w/core/toolsservice"),c=e("tools.config"),u=e("g3w/core/geocodingservice").Nominatim,d=e("g3w/gui/geocoding/geocode.listing"),h=e("g3w/gui/gui"),f=e("layout/sidebar/sidebar"),p=e("layout/floatbar/floatbar"),g=function(){this.initialized=!1,this._modalOverlay=null,this.config={},r(this)};n(g,o);var v=g.prototype;v.init=function(e){this.config=e,this._bootstrap(),u.on("results",function(e){var t=new d;t.results=e,p.insertVM(t)})},v._bootstrap=function(){var e=this;this.initialized||(h.getResourcesUrl=function(){return e.config.resourcesurl},h.showForm=_.bind(p.showPanel,p),h.closeForm=_.bind(p.closePanel,p),h.showPanel=_.bind(f.showPanel,f),h.setModal=_.bind(this._showModalOverlay,this),$.when(s.init(this.config),a.init(this.config),l.init(c)).then(function(){e.emit("ready"),this.initialized=!0}))},v._showModalOverlay=function(e){this._modalOverlay||(this._modalOverlay=$('<div id="g3w-modal-overlay" style="background-color: #000000; opacity: 0.7;z-index:4000;position:fixed;top:0px;left:0px"></div>'),$("body").append(this._modalOverlay),this._modalOverlay.width($(window).innerWidth()),this._modalOverlay.height($(window).innerHeight())),_.isUndefined(e)||e===!0?this._modalOverlay.show():this._modalOverlay.hide()},t.exports=new g},{"g3w/core/g3wobject":37,"g3w/core/geocodingservice":38,"g3w/core/pluginsservice":44,"g3w/core/projectsregistry":46,"g3w/core/toolsservice":47,"g3w/core/utils":48,"g3w/gui/geocoding/geocode.listing":58,"g3w/gui/gui":61,"layout/floatbar/floatbar":8,"layout/sidebar/sidebar":12,"tools.config":13}],4:[function(e,t,i){e("i18n.service");e("g3w/gui/vue.directives"),e("g3w/gui/map/map"),e("g3w/gui/geocoding/geocoding");var n=e("layout/layout"),r=(e("layout/sidebar/sidebar"),e("layout/floatbar/floatbar")),o=e("g3w/core/mapservice"),s=e("g3w/gui/gui.js");Vue.component("app",{template:e("./app.html"),ready:function(){function e(){return $(window).innerHeight()-$(".navbar").innerHeight()}function t(){$("#map").height(e()),o.viewer.map.updateSize()}function i(e){var t=$(".main-sidebar").offset().left;e||(t-=$(".main-sidebar").innerWidth()),$("#map").width($(window).innerWidth()+t),o.viewer.map.updateSize()}function a(){$(u).css("max-height",$(window).innerHeight())}function l(){$("#g3w-modal-overlay").height($(window).innerHeight())}function c(){h===!0?(h=!1,d=!0,t(),i(!1),requestAnimationFrame(c)):d=!1}n.setup(),$("body").toggleClass("fixed"),n.layout.fixSidebar(),n.pushMenu.expandOnHover(),n.layout.activate(),n.controlSidebar._fix($(".control-sidebar-bg")),n.controlSidebar._fix($(".control-sidebar")),r.init(n),$("body").on("expanded.pushMenu",function(){i(!0)}),$("body").on("collapsed.pushMenu",function(){i(!0)}),t();var u=n.options.controlSidebarOptions.selector;a();var d=!1,h=!1;$(window).resize(function(){d===!1&&(h=!0,c()),a(),l()}),s.ready()}})},{"./app.html":2,"g3w/core/mapservice":42,"g3w/gui/geocoding/geocoding":60,"g3w/gui/gui.js":61,"g3w/gui/map/map":63,"g3w/gui/vue.directives":68,"i18n.service":5,"layout/floatbar/floatbar":8,"layout/layout":9,"layout/sidebar/sidebar":12}],5:[function(e,t,i){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e("../locales/it/app.json")});var n=function(e){var t=i18next.t(e);return t};jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0}),t.exports=n},{"../locales/it/app.json":14}],6:[function(e,t,i){function n(){this._panels=[],this.state={panels:[]}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/g3wobject");r(n,o);var s=n.prototype;s.push=function(e,t){var i=this;e.onShow(t).then(function(){i._panels.push(e),i.state.panels.push({id:e.id,name:e.name})})},s.pop=function(){var e=this,t=this._panels.slice(-1)[0];t.onClose().then(function(){e.state.panels.pop(),e._panels.pop()})},t.exports=n},{"g3w/core/g3wobject":37,"g3w/core/utils":48}],7:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <div v-show="panelsinstack" class="g3w-sidebarpanel">\n    <!--<div class="row">\n      <div class="col-xs-12 col-sm-12 col-md-12">\n        <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button>\n      </div>\n    </div>-->\n    <div>\n      <h4 class="g3w-floatbarpanel-name">{{ panelname }}</h2>\n    </div>\n    <div id="g3w-floatbarpanel-placeholder" class="g3w-floatbarpanel-placeholder"></div>\n  </div>\n</aside>\n'},{}],8:[function(e,t,i){function n(){this.stack=new r,this.init=function(e){this.layout=e,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector),this._zindex=this.sidebarEl.css("z-index"),this._modalOverlay=null,this._modal=!1},this.showPanel=function(e,t){this.stack.push(e,"#g3w-floatbarpanel-placeholder"),this.layout.floatBar.open(this.sidebarEl,!0),t&&(this._modal=!0,o.setModal(),this.sidebarEl.css("z-index",5e3),this.sidebarEl.css("padding-top","0px"),$(".control-sidebar-bg").css("z-index",4999),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"))},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy(),this.stack.length||this._modal&&(o.setModal(!1),this.layout.floatBar.close(this.sidebarEl,!0),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"),this.sidebarEl.css("z-index",""),this.sidebarEl.css("padding-top","50px"),$(".control-sidebar-bg").css("z-index",""),this._modal=!1)}}var r=(e("i18n.service"),e("../barstack.js")),o=e("g3w/gui/gui"),s=new n;t.exports=s,Vue.component("floatbar",{template:e("./floatbar.html"),data:function(){return{stack:s.stack.state}},computed:{panelsinstack:function(){return this.stack.panels.length>0},panelname:function(){var e="";return this.stack.panels.length&&(e=this.stack.panels.slice(-1)[0].name),e}},watch:{"stack.panels":function(){var e=$("#g3w-floatbarpanel-placeholder").children();_.forEach(e,function(t,i){i==e.length-1?$(t).show():$(t).hide()})}},methods:{closePanel:function(){s.closePanel()}}})},{"../barstack.js":6,"./floatbar.html":7,"g3w/gui/gui":61,"i18n.service":5}],9:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var n;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),n=t-e):($(".content-wrapper, .right-side").css("min-height",i),n=i);var r=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof r&&r.height()>n&&$(".content-wrapper, .right-side").css("min-height",r.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,i=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var n=$(this),r=n.next();if(r.is(".treeview-menu")&&r.is(":visible"))r.slideUp(i,function(){r.parent("li.treeview").removeClass("active"),r.removeClass("menu-open")});else if(r.is(".treeview-menu")&&!r.is(":visible")){var o,s=n.parents("ul").first(),a=n.parent("li"),l=a.siblings(),c=s.height()-s.find("li.header").outerHeight(),u=a.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var d=c-u;r.css({height:d+"px","max-height":d+"px","overflow-y":"auto"});var h=s.find("ul.treeview-menu:visible").slideUp(i);h.removeClass("menu-open"),r.slideDown(i,function(){r.addClass("menu-open"),o=s.find("li.treeview.active"),o.removeClass("active"),a.addClass("active"),t.layout.fix()})}r.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,i=$(t.selector),n=$(t.toggleBtnSelector);n.on("click",function(n){n.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var r=$(".control-sidebar-bg");e._fix(r),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),n=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),n.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),n.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(r),n.onLoadStart.call(e)}function i(e){e.find(r).remove(),n.onLoadDone.call(e)}var n=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),r=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===n.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),r=e.find(n.trigger).first();r.on("click",function(r){r.preventDefault(),t(e),e.find(".box-body").load(n.source,function(){i(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},t.exports=$.LayoutManager},{}],10:[function(e,t,i){t.exports='<li class="treeview" :class="{\'active\': openOnStart}">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span class="treeview-label">{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],11:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n	<section class="sidebar">\n    \n    <div v-show="panelsinstack" class="g3w-sidebarpanel">\n      <div class="row">\n        <div class="col-xs-12 col-sm-12 col-md-12">\n          <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button></div>\n      </div>\n      <div>\n        <h4>{{ panelname }}</h2>\n      </div>\n      <div id="g3w-sidebarpanel-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n    </div>\n    \n	  <ul v-show="!panelsinstack" class="sidebar-menu">\n	    <!--<sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n        <g3w-search></g3w-search>\n      </sidebar-item>-->\n      <sidebar-item open-on-start="true" data-icon="fa fa-database" data-label="catalog" data-type="inline">\n        <g3w-catalog></g3w-catalog>\n      </sidebar-item>\n      <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n        <g3w-tools></g3w-tools>\n      </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],12:[function(e,t,i){function n(){this.stack=new o,this.init=function(e){this.layout=e},this.showPanel=function(e){this.stack.push(e,"#g3w-sidebarpanel-placeholder")},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy()}}var r=e("i18n.service");e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),e("g3w/gui/tools/tools");var o=e("../barstack.js"),s=new n;t.exports=s,Vue.component("sidebar",{template:e("./sidebar.html"),data:function(){return{panels:s.stack.state.panels,bOpen:!0,bPageMode:!1,header:r("main navigation")}},computed:{panelsinstack:function(){return this.panels.length>0},panelname:function(){var e="";return this.panels.length&&(e=this.panels.slice(-1)[0].name),e}},methods:{closePanel:function(){s.closePanel()}},ready:function(){var t=e("g3w-iternet/plugin");t.startEditing()}}),Vue.component("sidebar-item",{props:["data-icon","data-label","data-type","open-on-start"],template:e("./sidebar-item.html"),data:function(){return{main:!0}}})},{"../barstack.js":6,"./sidebar-item.html":10,"./sidebar.html":11,"g3w-iternet/plugin":32,"g3w/gui/catalog/catalog":52,"g3w/gui/search/search":65,"g3w/gui/tools/tools":67,"i18n.service":5}],13:[function(e,t,i){var n={tools:[]};t.exports=n},{}],14:[function(e,t,i){t.exports={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",tools:"Strumenti",tree:"Dati",legend:"Legenda",street_search:"Cerca indirizzo"}}}},{}],15:[function(e,t,i){function n(e){o(this,e),this._formPanel=l}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/gui/form").FormPanel,a=e("g3w/gui/form").Form,l=s.extend({});r(n,a);var c=n.prototype;c._isVisible=function(e){var t=!0;switch(e.name){case"cod_acc_est":var i=this._getField("tip_acc");"0101"==i.value&&(t=!1);break;case"cod_acc_int":var i=this._getField("tip_acc");"0101"!=i.value&&"0501"!=i.value||(t=!1)}return t},c._isEditable=function(e){return"tip_acc"!=e.name||this._isNew()?a.prototype._isEditable.call(this,e):!1},c._shouldShowRelation=function(e){if("numero_civico"==e.name){var t=this._getField("tip_acc");if("0102"==t.value)return!1}return!0},t.exports=n},{"g3w/core/utils":48,"g3w/gui/form":56}],16:[function(e,t,i){function n(e){this._editor=e,this._origVectorLayer=new ol.layer.Vector({source:new ol.source.Vector}),this._cloneLayer(),this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/g3wobject");r(n,o),t.exports=n;var s=n.prototype;s.commit=function(){var e=this._editor.getEditVectorLayer().getFeatures();this._editor.getVectorLayer().addFeatures(e),this._editor.getEditVectorLayer().clear(),this._clearBuffers(),this._cloneLayer()},s.undoAll=function(){this._resetVectorLayer(),this._clearBuffers()},s.destroy=function(){this._clearBuffers()},s.addFeature=function(e){e.getId()||e.setId("_new_"+Date.now()),this._addEditToGeometryBuffer(e,"add"),console.log("Inserita nuova feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.updateFeature=function(e){this._addEditToGeometryBuffer(e,"update"),console.log("Modificata feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.deleteFeature=function(e){this._addEditToGeometryBuffer(e,"delete"),console.log("Rimossa feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.updateAttributes=function(e,t){e.getId()||e.setId("_new_"+Date.now()),this._addEditToAttributesBuffer(e,t),console.log("Modificati attributi feature: (ID: "+e.getId()+")")},s.getFeatureAttributes=function(e){return this._attributesBuffer[e].slice(-1)[0]},s.areFeatureAttributesEdited=function(e){return this._attributesBuffer[e]?this._attributesBuffer[e].length>-1:!1},s.getRelationsAttributes=function(e){return this._relationsAttributesBuffer[e].slice(-1)[0]},s.areFeatureRelationsEdited=function(e){return this._relationsAttributesBuffer[e]?this._relationsAttributesBuffer[e].length>-1:!1},s.collectFeatureIds=function(){var e=this._geometriesBuffer,t=this._attributesBuffer,i=[];return i=_.concat(i,_.keys(e)),i=_.concat(i,_.keys(t)),_.uniq(i)},s.collectFeatures=function(e,t){var i=this,n=this._geometriesBuffer,r=this._attributesBuffer,t=t||!1,o=new ol.format.GeoJSON,s=this.collectFeatureIds(),a=[];return _.forEach(s,function(s){var l=i._isNewFeature(s),c=l?i._editor._editVectorLayer:i._editor._vectorLayer,s=s,u=null,d=n[s];if(d){var d=n[s];u=d[d.length-1]}else u=c.getFeatureById(s).getGeometry();var h={},f=r[s];if(f)h=f[f.length-1];else if(l){var p=i._editor._vectorLayer.getFields();_.forEach(p,function(e){h[e.name]=""})}else{var g=c.getFeatureById(s);g&&(h=g.getProperties())}var v="new"==e&&l&&!_.isNull(u),y="updated"==e&&!l&&!_.isNull(u),m="deleted"==e&&!l&&_.isNull(u);if(v||y){if(b=i.createFeature(s,u,h),t)var b=o.writeFeatureObject(b);a.push(b)}else m&&a.push(s)}),a},s.createFeature=function(e,t,i){var n=new ol.Feature;return n.setId(e),n.setGeometry(t),n.setProperties(i),n},s.collectRelationsAttributes=function(){var e={};return _.forEach(this._relationsAttributesBuffer,function(t,i){lastRelationsAttributes=t[t.length-1],e[i]=lastRelationsAttributes}),e},s._addEditToGeometryBuffer=function(e,t){var i=this._geometriesBuffer,n=e.getId(),r=e.getGeometry();if("delete"==t){r=null;var o=this._isNewFeature(n)?this._editor._editVectorLayer:this._editor._vectorLayer;o.getSource().removeFeature(e)}_.has(i,n)||(i[n]=[]),i[n].push(r),this._setDirty()},s._addEditToAttributesBuffer=function(e,t){var i=e.getId(),n=e.getProperties(),r=this._attributesBuffer;_.has(r,i)||(r[i]=[]),r[i].push(n),t&&(_.has(this._relationsAttributesBuffer,i)||(this._relationsAttributesBuffer[i]=[]),this._relationsAttributesBuffer[i].push(t)),this._setDirty()},s._isNewFeature=function(e){return this._editor.isNewFeature(e)},s._setDirty=function(){this._editor._setDirty()},s._resetVectorLayer=function(){this._editor.vectoLayer=this._origVectorLayer,this._origVectorLayer.getSource().clear()},s._clearBuffers=function(){this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={},this._editor._setDirty(!1)},s._cloneLayer=function(){var e=[];this._editor._vectorLayer.getSource().forEachFeature(function(t){e.push(t.clone())},this),this._origVectorLayer.getSource().addFeatures(e)}},{"g3w/core/g3wobject":37,"g3w/core/utils":48}],17:[function(e,t,i){function n(e){this._vectorLayer=null,this._editVectorLayer=null,this._editBuffer=null,this._activeTool=null,this._dirty=!1,this._withFeatureLocks=!1,this._featureLocks=null,this._started=!1,this._setterslisteners={before:{},after:{}},this._geometrytypes=["Point","LineString","MultiLineString"],this._toolsForGeometryTypes={Point:{addfeature:u,movefeature:d,deletefeature:f,editattributes:p},LineString:{addfeature:u,modifyvertex:h,movefeature:d,deletefeature:f,editattributes:p,cutline:g}},this._activeTool=new function(){this.type=null,this.instance=null,this.setTool=function(e,t){this.type=e,this.instance=t},this.getType=function(){return this.type},this.getTool=function(){return this.instance},this.clear=function(){this.type=null,this.instance=null}},this._tools={},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/utils").resolvedValue,a=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject")),l=e("g3w/core/mapservice"),c=e("g3w/core/vectorlayer"),u=e("./tools/addfeaturetool"),d=e("./tools/movepointtool"),h=e("./tools/modifyfeaturetool"),f=e("./tools/deletefeaturetool"),p=e("./tools/pickfeaturetool"),g=e("./tools/cutlinetool"),v=e("./editbuffer");r(n,a),t.exports=n;var y=n.prototype;y.setVectorLayer=function(e){var t=e.geometrytype;if(!t||!this._isCompatibleType(t))throw Error("Vector geometry type "+t+" is not valid for editing");this._setToolsForVectorType(t),this._vectorLayer=e},y.start=function(){var e=!1;return this._vectorLayer&&(this.stop(),this._editVectorLayer=new c({name:"editvector",geometrytype:this._vectorLayer.geometrytype}),l.viewer.map.addLayer(this._editVectorLayer.getLayer()),this._editBuffer=new v(this),this._setStarted(!0),e=!0),e},y.stop=function(){return this.isStarted()?this.stopTool()?(this._editBuffer.destroy(),this._editBuffer=null,this.removeAllListeners(),l.viewer.removeLayerByName(this._editVectorLayer.name),this._setStarted(!1),!0):!1:!0},y.setTool=function(e,t){if(!this.stopTool())return!1;var i=this._tools[e];if(i){var n=new i(this,t);return this._activeTool.setTool(e,n),this._setToolSettersListeners(n,this._setterslisteners),n.run(),!0}},y.stopTool=function(){return this._activeTool.instance&&!this._activeTool.instance.stop()?!1:(this._activeTool.clear(),!0)},y.getActiveTool=function(){return this._activeTool},y.isStarted=function(){return this._started},y.hasActiveTool=function(){return!_.isNull(this._activeTool.instance)},y.isToolActive=function(e){return this._activeTool.toolType?this._activeTool.toolType==e:!1},y.commit=function(e){this._editBuffer.commit(e)},y.undoAll=function(){this._editBuffer.undoAll()},y.setFeatureLocks=function(e){this._withFeatureLocks=!0,this._featureLocks=e},y.getFeatureLocks=function(e){return this._featureLocks},y.getFeatureLockIds=function(){return _.map(this._featureLocks,function(e){return e.lockid})},y.getFeatureLocksLockIds=function(e){var e=e||this._featureLocks;return _.map(e,function(e){return e.lockid})},y.getFeatureLocksFeatureIds=function(e){var e=e||this._featureLocks;return _.map(e,function(e){return e.featureid})},y.getFeatureLockIdsForFeatureIds=function(e){var t=_.filter(this._featureLocks,function(t){return _.includes(e,t.featureid)});return this.getFeatureLocksLockIds(t)},y.getEditedFeatures=function(){var e=this._editBuffer.collectFeatureIds(),t=this.getFeatureLockIdsForFeatureIds(e);return{add:this._editBuffer.collectFeatures("new",!0),update:this._editBuffer.collectFeatures("updated",!0),"delete":this._editBuffer.collectFeatures("deleted",!0),relationsattributes:this._editBuffer.collectRelationsAttributes(),lockids:t}},y.getFieldsWithAttributes=function(e){if(e){var t,i=this._vectorLayer.getFields(),n=this._editBuffer.areFeatureAttributesEdited(e);return n?(t=this._editBuffer.getFeatureAttributes(e),_.forEach(i,function(e){e.value=t[e.name]})):i=this._vectorLayer.getFieldsWithAttributes(e),i}return this._vectorLayer.getFieldsWithAttributes(e)},y.setFieldsWithAttributes=function(e,t,i){var n={};_.forEach(t,function(e){n[e.name]=e.value});var r=null;if(i){var r={};_.forEach(i,function(e,t){var i={};_.forEach(e.fields,function(e){i[e.name]=e.value}),r[t]=i})}e.setProperties(n),this._editBuffer.updateAttributes(e,r)},y.getRelationsWithAttributes=function(e){var t;if(e){var i=this._editBuffer.areFeatureRelationsEdited(e);if(i){var n=this._vectorLayer.getRelations(),r=this._editBuffer.getRelationsAttributes(e);_.forEach(r,function(e,t){_.forEach(n[t].fields,function(e){e.value=r[t][e.name]})}),t=s(n)}else t=this._vectorLayer.getRelationsWithAttributes(e)}else t=this._vectorLayer.getRelationsWithAttributes(e);return t},y.getField=function(e,t){var t=t||this.getFieldsWithAttributes(),i=null;return _.forEach(t,function(t){t.name==e&&(i=t)}),i},y.isDirty=function(){return this._dirty},y.onafter=function(e,t){this._onaftertoolaction(e,t)},y.onbefore=function(e,t){this._onbeforetoolaction(e,t,!1);
},y.onbeforeasync=function(e,t){this._onbeforetoolaction(e,t,!0)},y.addFeature=function(e){this._editBuffer.addFeature(e)},y.updateFeature=function(e){this._editBuffer.updateFeature(e)},y.deleteFeature=function(e){this._editBuffer.deleteFeature(e)},y.getVectorLayer=function(){return this._vectorLayer},y.getEditVectorLayer=function(){return this._editVectorLayer},y.isNewFeature=function(e){if(!e)return!0;var t=this._editVectorLayer.getFeatureById(e);return!_.isNil(t)},y._isCompatibleType=function(e){return this._geometrytypes.indexOf(e)>-1},y._setToolsForVectorType=function(e){var t=this,i=this._toolsForGeometryTypes[e];_.forEach(i,function(e,i){t._tools[i]=e})},y._onaftertoolaction=function(e,t){_.get(this._setterslisteners.after,e)||(this._setterslisteners.after[e]=[]),this._setterslisteners.after[e].push({fnc:t})},y._onbeforetoolaction=function(e,t,i){_.get(this._setterslisteners.before,e)||(this._setterslisteners.before[e]=[]),this._setterslisteners.before[e].push({fnc:t,how:i?"async":"sync"})},y._setToolSettersListeners=function(e,t){_.forEach(t.before,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){"sync"==t.how?e.onbefore(i,t.fnc):e.onbeforeasync(i,t.fnc)})}),_.forEach(t.after,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){e.onafter(i,t.fnc)})})},y._setStarted=function(e){this._started=e},y._setDirty=function(e){_.isNil(e)?this._dirty=!0:this._dirty=e,this.emit("dirty",this._dirty)}},{"./editbuffer":16,"./tools/addfeaturetool":18,"./tools/cutlinetool":19,"./tools/deletefeaturetool":21,"./tools/modifyfeaturetool":22,"./tools/movepointtool":23,"./tools/pickfeaturetool":24,"g3w/core/g3wobject":37,"g3w/core/mapservice":42,"g3w/core/utils":48,"g3w/core/vectorlayer":49}],18:[function(e,t,i){function n(e,t){var t=t||{};this._running=!1,this._busy=!1,this.editor=e,this.source=e.getEditVectorLayer().getLayer().getSource(),this.isPausable=!0,this.drawInteraction=null,this._snap=t.snap||null,this._snapInteraction=null,this._finishCondition=t.finishCondition||_.constant(!0),this._condition=t.condition||_.constant(!0),this.setters={addFeature:{fnc:n.prototype._addFeature,fallback:n.prototype._fallBack}},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.drawInteraction=new ol.interaction.Draw({type:this.editor.getEditVectorLayer().geometrytype,source:this.source,condition:this._condition,finishCondition:this._finishCondition}),t.addInteraction(this.drawInteraction),this.drawInteraction.setActive(!0),this.drawInteraction.on("drawstart",function(t){e.editor.emit("drawstart",t)}),this.drawInteraction.on("drawend",function(t){e.editor.emit("drawend",t),e._busy||(e._busy=!0,e.pause(),e.addFeature(t.feature))}),this._snap&&(this._snapInteraction=new ol.interaction.Snap({source:this._snap.vectorLayer.getSource()}),t.addInteraction(this._snapInteraction))},l.pause=function(e){_.isUndefined(e)||e?(this._snapInteraction&&this._snapInteraction.setActive(!1),this.drawInteraction.setActive(!1)):(this._snapInteraction&&this._snapInteraction.setActive(!0),this.drawInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._snapInteraction&&e.removeInteraction(this._snapInteraction),e.removeInteraction(this.drawInteraction),!0},l.removeLastPoint=function(){if(this.drawInteraction)try{this.drawInteraction.removeLastPoint()}catch(e){}},l._addFeature=function(e){return this.editor.addFeature(e),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.source.getFeaturesCollection().pop(),this.pause(!1)}},{"g3w/core/g3wobject":37,"g3w/core/mapservice":42,"g3w/core/utils":48}],19:[function(e,t,i){function n(e,t){this.editor=e,this.isPausable=!0,this.layer=null,this.editingLayer=null,this._origGeometry=null,this._linePickInteraction=null,this._pointPickInteraction=null,this._pointLayer=t.pointLayer||null,this._minCutPointDistance=t.minCutPointDistance||1/0,this._selectedLineOverlay=new ol.layer.Vector({source:new ol.source.Vector,style:new ol.style.Style({stroke:new ol.style.Stroke({color:"rgb(255,255,0)",width:4})})}),this.setters={modifyLines:n.prototype._modifyLines},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/geom"),a=e("g3w/core/g3wobject"),l=e("g3w/core/mapservice"),c=e("g3w/core/interactions/pickcoordinatesinteraction"),u=e("g3w/core/interactions/pickfeatureinteraction");r(n,a),t.exports=n;var d=n.prototype;d.run=function(){var e=this,t=l.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._linePickInteraction=new u({layers:[this.layer,this.editingLayer]}),t.addInteraction(this._linePickInteraction),this._linePickInteraction.on("picked",function(i){var n=i.feature;e._showSelection(n,300),e._origGeometry=n.getGeometry(),t.removeInteraction(this),e._pointLayer?e._pointPickInteraction=new u({layers:[e._pointLayer]}):e._pointPickInteraction=new c,e._pointPickInteraction.on("picked",function(t){if(t.feature,t.coordinate){var i=n.getGeometry().getClosestPoint(t.coordinate),r=s.distance(t.coordinate,i);if(r<e._minCutPointDistance){var o=e._cutLine(n.getGeometry(),i);o?e.modifyLines(o).fail(function(){e.loop()}):e.loop()}}}),t.addInteraction(e._pointPickInteraction)})},d.pause=function(e){_.isUndefined(e)||e?(this._linePickInteraction.setActive(!1),this._pointPickInteraction.setActive(!1)):(this._linePickInteraction.setActive(!0),this._pointPickInteraction.setActive(!0))},d.loop=function(){this.stop(),this.run()},d.stop=function(){var e=l.viewer.map;return e.removeInteraction(this._selectInteraction),e.removeInteraction(this._pointPickInteraction),!0},d._modifyLines=function(e){return console.log("Pronto per inserire le modifiche di "+e),this._busy=!1,this.pause(!1),!0},d._fallBack=function(e){this._busy=!1,this.pause(!1)},d._cutLine=function(e,t){for(;t.length<e.getStride();)t.push(0);var i=1/0,n=0,r=0;e.forEachSegment(function(e,o){var a=s.closestOnSegment(t,[e,o]),l=s.distance(t,a);i>l&&(i=l,n=r),r+=1});var o=e.getCoordinates(),a=o.slice(0,n+1);a.splice(a.length,0,t);var l=o.slice(n);if(l.splice(0,1,t),a.length<2||l.length<2)return!1;var c=new ol.geom.LineString;c.setCoordinates(a);var u=new ol.geom.LineString;u.setCoordinates(l);var d=new ol.Feature({geometry:c}),h=new ol.Feature({geometry:u}),f=this;return this._showSelection(d,300),setTimeout(function(){f._showSelection(h,300)},300),[d,h]},d._showSelection=function(e,t){var i=this,t=t||null,n=l.viewer.map,r=this._selectedLineOverlay;r.getSource().addFeatures([e]),r.setMap(n),t&&setTimeout(function(){r.setMap(null),i._selectedLineOverlay.getSource().clear()},t)},d._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"g3w/core/g3wobject":37,"g3w/core/geom":39,"g3w/core/interactions/pickcoordinatesinteraction":40,"g3w/core/interactions/pickfeatureinteraction":41,"g3w/core/mapservice":42,"g3w/core/utils":48}],20:[function(e,t,i){var n=function(e,t,i){this.type=e,this.features=t,this.coordinate=i},r=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:r.handleDownEvent_,handleMoveEvent:r.handleMoveEvent_,handleUpEvent:r.handleUpEvent_,handleEvent:r.handleEvent_}),this.previousCursor_=void 0,this.lastCoordinate_=null,this.features_=void 0!==e.features?e.features:null};ol.inherits(r,ol.interaction.Pointer),r.handleEvent_=function(e){return"keydown"!=e.type?ol.interaction.Pointer.handleEvent.call(this,e):this.features_.getArray().length&&46==e.originalEvent.keyCode?(this.dispatchEvent(new n("deleteend",this.features_,event.coordinate)),!0):void 0},r.handleDownEvent_=function(e){return this.lastFeature_=this.featuresAtPixel_(e.pixel,e.map),this.lastFeature_?(r.handleMoveEvent_.call(this,e),this.dispatchEvent(new n("deleteend",this.features_,e.coordinate)),!0):!1},r.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=e.map.forEachFeatureAtPixel(e.pixel,function(e){return e});i?(this.previousCursor_=t.style.cursor,t.style.cursor="pointer"):(t.style.cursor=void 0!==this.previousCursor_?this.previousCursor_:"",this.previousCursor_=void 0)},r.prototype.featuresAtPixel_=function(e,t){var i=null,n=t.forEachFeatureAtPixel(e,function(e){return e});return this.features_&&_.includes(this.features_.getArray(),n)&&(i=n),i},t.exports=r},{}],21:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this.setters={deleteFeature:n.prototype._deleteFeature},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice"),l=e("./deletefeatureinteraction");r(n,s),t.exports=n;var c=n.prototype;ol.geom.GeometryType={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"};var u={},d=[255,255,255,1],h=[255,0,0,1],f=3;u[ol.geom.GeometryType.POLYGON]=[new ol.style.Style({fill:new ol.style.Fill({color:[255,255,255,.5]})})],u[ol.geom.GeometryType.MULTI_POLYGON]=u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]=[new ol.style.Style({stroke:new ol.style.Stroke({color:d,width:f+2})}),new ol.style.Style({stroke:new ol.style.Stroke({color:h,width:f})})],u[ol.geom.GeometryType.MULTI_LINE_STRING]=u[ol.geom.GeometryType.LINE_STRING],u[ol.geom.GeometryType.CIRCLE]=u[ol.geom.GeometryType.POLYGON].concat(u[ol.geom.GeometryType.LINE_STRING]),u[ol.geom.GeometryType.POINT]=[new ol.style.Style({image:new ol.style.Circle({radius:2*f,fill:new ol.style.Fill({color:h}),stroke:new ol.style.Stroke({color:d,width:f/2})}),zIndex:1/0})],u[ol.geom.GeometryType.MULTI_POINT]=u[ol.geom.GeometryType.POINT],u[ol.geom.GeometryType.GEOMETRY_COLLECTION]=u[ol.geom.GeometryType.POLYGON].concat(u[ol.geom.GeometryType.LINE_STRING],u[ol.geom.GeometryType.POINT]),u[ol.geom.GeometryType.POLYGON]=_.concat(u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]),u[ol.geom.GeometryType.GEOMETRY_COLLECTION]=_.concat(u[ol.geom.GeometryType.GEOMETRY_COLLECTION],u[ol.geom.GeometryType.LINE_STRING]),c.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click,style:function(e,t){return u[e.getGeometry().getType()]}}),t.addInteraction(this._selectInteraction),this._deleteInteraction=new l({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._deleteInteraction);this._deleteInteraction.on("deleteend",function(t){var i=t.features.getArray()[0],n=e._isNew(i);e._busy||(e._busy=!0,e.pause(!0),e.deleteFeature(i,n).always(function(){e._busy=!1,e.pause(!1)}))})},c.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._deleteInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._deleteInteraction.setActive(!0))},c.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),e.removeInteraction(this._deleteInteraction),!0},c._deleteFeature=function(e,t){return this.editor.deleteFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},c._fallBack=function(e){this._busy=!1,this.pause(!1)},c._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"./deletefeatureinteraction":20,"g3w/core/g3wobject":37,"g3w/core/mapservice":42,"g3w/core/utils":48}],22:[function(e,t,i){function n(e,t){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._deleteCondition=t.deleteCondition||void 0,this._snap=t.snap||null,this._snapInteraction=null,this.setters={modifyFeature:n.prototype._modifyFeature},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer]}),t.addInteraction(this._selectInteraction),this._modifyInteraction=new ol.interaction.Modify({features:this._selectInteraction.getFeatures(),deleteCondition:this._deleteCondition}),t.addInteraction(this._modifyInteraction);var i=null;this._modifyInteraction.on("modifystart",function(e){var t=e.features.getArray()[0];i=t.getGeometry().clone()}),this._modifyInteraction.on("modifyend",function(t){var n=t.features.getArray()[0],r=e._isNew(n);e._busy||(e._busy=!0,e.pause(!0),e.modifyFeature(n,r).fail(function(){n.setGeometry(i)}).always(function(){e._busy=!1,e.pause(!1)}))}),this._snap&&(this._snapInteraction=new ol.interaction.Snap({source:this._snap.vectorLayer.getSource()}),t.addInteraction(this._snapInteraction))},l.pause=function(e){_.isUndefined(e)||e?(this._snapInteraction&&this._snapInteraction.setActive(!1),this._selectInteraction.setActive(!1),this._modifyInteraction.setActive(!1)):(this._snapInteraction&&this._snapInteraction.setActive(!0),this._selectInteraction.setActive(!0),this._modifyInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),this._snapInteraction&&e.removeInteraction(this._snapInteraction),e.removeInteraction(this._selectInteraction),e.removeInteraction(this._modifyInteraction),!0},l._modifyFeature=function(e,t){return this.editor.updateFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l.removePoint=function(e){if(this._modifyInteraction)try{this._modifyInteraction.removePoint()}catch(t){console.log(t)}},l._fallBack=function(e){this._busy=!1,this.pause(!1)},l._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"g3w/core/g3wobject":37,"g3w/core/mapservice":42,"g3w/core/utils":48}],23:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._origGeometry=null,this.setters={moveFeature:{fnc:n.prototype._moveFeature,fallback:n.prototype._fallBack}},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("g3w/core/mapservice");r(n,s),t.exports=n;var l=n.prototype;l.run=function(){var e=this,t=a.viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click}),t.addInteraction(this._selectInteraction),this._translateInteraction=new ol.interaction.Translate({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._translateInteraction),this._translateInteraction.on("translatestart",function(t){var i=t.features.getArray()[0];e._origGeometry=i.getGeometry().clone(),e.editor.emit("movestart",i)}),this._translateInteraction.on("translateend",function(t){var i=t.features.getArray()[0];e._busy||(e._busy=!0,e.pause(),e.moveFeature(i).then(function(t){e.pause(!1)}).fail(function(){i.setGeometry(e._origGeometry)}))})},l.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._translateInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._translateInteraction.setActive(!0))},l.stop=function(){var e=a.viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),e.removeInteraction(this._translateInteraction),!0},l._moveFeature=function(e){return this.editor.emit("moveend",e),this.editor.updateFeature(e),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w/core/g3wobject":37,"g3w/core/mapservice":42,"g3w/core/utils":48}],24:[function(e,t,i){function n(e){this.editor=e,this.isPausable=!0,this.pickFeatureInteraction=null,this._running=!1,this._busy=!1,this.setters={pickFeature:s},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/utils").noop,a=e("g3w/core/g3wobject"),l=e("g3w/core/interactions/pickfeatureinteraction"),c=e("g3w/core/mapservice");r(n,a),t.exports=n;var u=n.prototype;u.run=function(){var e=this,t=[this.editor.getVectorLayer().getLayer(),this.editor.getEditVectorLayer().getLayer()];this.pickFeatureInteraction=new l({layers:t}),this.pickFeatureInteraction.on("picked",function(t){e._busy||(e._busy=!0,e.pause(!0),e.pickFeature(t.feature).then(function(t){e._busy=!1,e.pause(!1)}))}),c.pushInteraction(this.pickFeatureInteraction)},u.pause=function(e){_.isUndefined(e)||e?this.pickFeatureInteraction.setActive(!1):this.pickFeatureInteraction.setActive(!0)},u.stop=function(){return c.popInteraction(),!0},u._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"g3w/core/g3wobject":37,"g3w/core/interactions/pickfeatureinteraction":41,"g3w/core/mapservice":42,"g3w/core/utils":48}],25:[function(e,t,i){t.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode,tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode,tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"></img>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div>\n    <button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-success\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>\n    <button class="btn btn-danger" v-disabled="!state.hasEdits" @click="saveEdits">{{ savebtnlabel }}</button>\n    <img v-show="state.retrievingData" :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],26:[function(e,t,i){function n(){this.id="iternet-editing-panel",this.name="Gestione dati ITERNET",this.panelComponent=null}var r=e("g3w/core/utils").resolvedValue,o=e("g3w/gui/gui"),s=e("./iternetservice"),a=Vue.extend({template:e("./editorpanel.html"),data:function(){return{state:s.state,resourcesurl:o.getResourcesUrl(),editorstoolbars:[{name:"Accessi",layercode:"accessi",tools:[{title:"Aggiungi accesso",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta accesso",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi accesso",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Giunzioni stradali",layercode:"giunzioni",tools:[{title:"Aggiungi giunzione",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta giunzione",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi giunzione",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Elementi stradali",layercode:"strade",tools:[{title:"Aggiungi strada",tooltype:"addfeature",icon:"iternetAddLine.png"},{title:"Sposta vertice strada",tooltype:"modifyvertex",icon:"iternetMoveVertex.png"},{title:"Taglia su giunzione",tooltype:"cutline",icon:"iternetCutOnVertex.png"},{title:"Sposta strada",tooltype:"movefeature",icon:"iternetMoveLine.png"},{title:"Rimuovi strada",tooltype:"deletefeature",icon:"iternetDeleteLine.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){s.toggleEditing()},saveEdits:function(){s.saveEdits()},toggleEditTool:function(e,t){""!=t&&this.state.editing.on&&s.toggleEditTool(e,t)},editingtoolbtnToggled:function(e,t){return this.state.editing.layerCode==e&&this.state.editing.toolType==t},editingtoolbtnEnabled:function(e){return""!=e.tooltype}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var e="";return this.state.editing.enabled||(e='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing'),e}}}),l=n.prototype;l.onShow=function(e){var t=this.panelComponent=new a;return t.$mount().$appendTo(e),r(!0)},l.onClose=function(){var e=this,t=$.Deferred();return s.stop().then(function(){e.panelComponent.$destroy(!0),e.panelComponent=null,t.resolve()}).fail(function(){t.reject()}),t.promise()},t.exports=n},{"./editorpanel.html":25,"./iternetservice":31,"g3w/core/utils":48,"g3w/gui/gui":61}],27:[function(e,t,i){function n(e){o(this,e)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("./iterneteditor");r(n,s),t.exports=n},{"./iterneteditor":29,"g3w/core/utils":48}],28:[function(e,t,i){function n(e){o(this,e),this._service=null,this._stradeEditor=null,this._giunzioneGeomListener=null,this._setupMoveGiunzioniListener=function(){var e=this;this.on("movestart",function(t){e._startMovingGiunzione(t)})},this._stradeToUpdate=[],this._startMovingGiunzione=function(e){var t=this,i=(this.getVectorLayer(),this._stradeEditor),n=e,r=n.get("cod_gnz");this._stradeToUpdate=[];var o=i.getVectorLayer().getSource().getFeatures();_.forEach(o,function(e){var i=e.get("nod_ini"),o=e.get("nod_fin"),s=i==r,a=o==r;if(s||a){var l=!!s;t._stradeToUpdate.push(e),t._startGiunzioniStradeTopologicalEditing(n,e,l)}}),this.once("moveend",function(e){t._stradeToUpdate.length&&(i.isStarted()||i.start(this._service),_.forEach(t._stradeToUpdate,function(e){i.updateFeature(e)}))})},this._startGiunzioniStradeTopologicalEditing=function(e,t,i){var n=t.getGeometry(),r=t.getGeometry().getCoordinates(),o=i?0:r.length-1,s=e.getGeometry(),a=s.on("change",function(e){r[o]=e.target.getCoordinates(),n.setCoordinates(r)});this._giunzioneGeomListener=a},this._setupDeleteGiunzioniListener=function(){var e=this._stradeEditor;this.onbeforeasync("deleteFeature",function(t,i,n){var r=!1,o=e.getVectorLayer();_.forEach(o.getFeatures(),function(e){var i=t.get("cod_gnz"),n=e.get("nod_ini"),o=e.get("nod_fin"),s=n==i,a=o==i;(s||a)&&(r=!0)}),r&&GUI.notify.error("Non è possibile rimuovere la giunzioni perché risulta connessa ad una o più strade"),n(!r)})}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("./iterneteditor");r(n,s),t.exports=n;var a=n.prototype;a.start=function(e){return this._service=e,this._stradeEditor=e._layers[e.layerCodes.STRADE].editor,this._setupMoveGiunzioniListener(),this._setupDeleteGiunzioniListener(),s.prototype.start.call(this)},a.stop=function(){var e=!1;return s.prototype.stop.call(this)&&(e=!0,ol.Observable.unByKey(this._giunzioneGeomListener)),e},a.setTool=function(e){var t;return"addfeature"==e&&(t={snap:{vectorLayer:this._stradeEditor.getVectorLayer()}}),s.prototype.setTool.call(this,e,t)}},{"./iterneteditor":29,"g3w/core/utils":48}],29:[function(e,t,i){function n(e){o(this,e),this._askConfirmToDeleteEditingListener=function(){this.onbeforeasync("deleteFeature",function(e,t,i){s.dialog.confirm("Vuoi eliminare l'elemento selezionato?",function(e){i(e)})})},this._setupAddFeatureAttributesEditingListeners=function(){var e=this;this.onbeforeasync("addFeature",function(t,i){e._openEditorForm("new",t,i)})},this._setupEditAttributesListeners=function(){var e=this;this.onafter("pickFeature",function(t){e._openEditorForm("old",t)})},this._openEditorForm=function(e,t,i){var n=this,r=t.getId(),o=this.getFieldsWithAttributes(r),a=this.getVectorLayer(),c=a.pk;c&&_.isNull(this.getField(c))&&_.forEach(t.getProperties(),function(e,t){var i=n.getField(t,o);i&&(i.value=e)});var u=this.getRelationsWithAttributes(r);u.then(function(e){var r=new l({name:"Edita attributi "+a.name,id:"attributes-edit-"+a.name,dataid:a.name,pk:a.pk,isnew:n.isNewFeature(t.getId()),fields:o,relations:e,buttons:[{title:"Salva","class":"btn-danger",cbk:function(e,r){n.setFieldsWithAttributes(t,e,r),i&&i(!0)}},{title:"Cancella","class":"btn-primary",cbk:function(){i&&i(!1)}}]});s.showForm(r,!0)}).fail(function(){i&&i(!1)})}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/gui/gui"),a=e("g3w-editing/editor"),l=e("g3w-editing/attributesform");r(n,a),t.exports=n;var c=n.prototype;c.start=function(){var e=a.prototype.start.call(this);return this._setupAddFeatureAttributesEditingListeners(),this._setupEditAttributesListeners(),this._askConfirmToDeleteEditingListener(),e}},{"g3w-editing/attributesform":15,"g3w-editing/editor":17,"g3w/core/utils":48,"g3w/gui/gui":61}],30:[function(e,t,i){function n(e){o(this,e),this._service=null,this._giunzioniEditor=null,this._stradeSnaps=null,this._stradeSnapsCollection=function(){var e=[];this.length=0,this.push=function(t){var i=!1;return this.canSnap(t)&&(e.push(t),this.length+=1,i=!0),i},this.getLast=function(){return e[e.length-1]},this.getFirst=function(){return e[0]},this.clear=function(){e.splice(0,e.length),this.length=0},this.getSnaps=function(){return e},this.canSnap=function(e){if(this.isAlreadySnapped(e))return!1;var t=e.get("cod_gnz");return!_.isNil(t)&&""!=t},this.isAlreadySnapped=function(e){return _.includes(this.snaps,e)}},this._updateStradaAttributes=function(e){var t=this._stradeSnaps;e.set("nod_ini",t.getSnaps()[0].get("cod_gnz")),e.set("nod_fin",t.getSnaps()[1].get("cod_gnz"))},this._loadMissingGiunzioniInView=function(){var e=this.getVectorLayer(),t=this._giunzioniEditor.getVectorLayer(),i=e.getSource(),n=ol.extent.buffer(i.getExtent(),1);this._service._loadVectorData(t,n)},this._drawRemoveLastPoint=_.bind(function(e){var t=this,i=this.getActiveTool().getType();"addfeature"==i&&46==e.keyCode&&(e.preventDefault(),e.stopPropagation(),t.getActiveTool().getTool().removeLastPoint())},this),this._setupDrawStradeConstraints=function(){var e=this;s.viewer.map.getTargetElement().id,s.viewer.map;this.onbefore("addFeature",function(t){var i=e._stradeSnaps;return 2==i.length?(e._updateStradaAttributes(t),i.clear(),!0):!1})},this._getCheckSnapsCondition=function(){var e=this;return function(t){var i=e._stradeSnaps;return 2==i.length?!0:(a.notify.error("L'ultimo vertice deve corrispondere con una giunzione"),!0)}},this._getStradaIsBeingSnappedCondition=function(){var e=this,t=s.viewer.map,i=this._giunzioniEditor.getVectorLayer();return function(n){var r=e._stradeSnaps,o=t.getCoordinateFromPixel(n.pixel),s=i.getSource(),l=ol.extent.buffer([o[0],o[1],o[0],o[1]],1),c=s.getFeaturesInExtent(l)[0];if(2==r.length&&(!c||c!=r.getSnaps()[1])){return a.notify.error("Una strada non può avere vertici intermedi in corrispondenza di giunzioni.<br> Premere <b>CANC</b> per rimuovere l'ultimo vertice."),!1}return c&&r.length<2&&r.push(c),0==r.length?(a.notify.error("Il primo vertice deve corrispondere con una giunzione"),!1):!0}},this._modifyRemovePoint=_.bind(function(e){var t=this,i=this.getActiveTool().getType();"modifyvertex"==i&&46==e.keyCode&&(e.preventDefault(),e.stopPropagation(),t.getActiveTool().getTool().removePoint())},this),this._setupModifyVertexStradeConstraints=function(){var e=this;s.viewer.map;this.onbefore("modifyFeature",function(t){var i=e._stradeSnaps,n=e._checkStradaIsCorrectlySnapped(t.getGeometry());return n&&(e._updateStradaAttributes(t),i.clear()),n})},this._checkStradaIsCorrectlySnapped=function(e){var t=!0,i=(s.viewer.map,this._giunzioniEditor.getVectorLayer());this._stradeSnaps.clear();var n=this._stradeSnaps,r=e.getCoordinates(),o=!1,l=!1;return _.forEach(r,function(e,t){var s=i.getSource(),a=ol.extent.buffer([e[0],e[1],e[0],e[1]],.1),c=s.getFeaturesInExtent(a)[0];c&&(0==t&&n.push(c)?o=!0:t==r.length-1&&n.push(c)&&(l=!0))}),n.length>2&&(a.notify.error("Una strada non può avere vertici intermedi in corrispondenza di giunzioni"),t=!1),o||(a.notify.error("Il primo vertice deve corrispondere con una giunzione"),t=!1),l||(a.notify.error("L'ultimo vertice deve corrispondere con una giunzione"),t=!1),t}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/mapservice"),a=e("g3w/gui/gui"),l=e("./iterneteditor");r(n,l),t.exports=n;var c=n.prototype;c.start=function(e){return this._service=e,this._giunzioniEditor=e._layers[e.layerCodes.GIUNZIONI].editor,this._loadMissingGiunzioniInView(),this._setupDrawStradeConstraints(),this._setupModifyVertexStradeConstraints(),l.prototype.start.call(this)},c.setTool=function(e){var t,i=this._giunzioniEditor.getVectorLayer();"addfeature"==e&&(t={snap:{vectorLayer:i},finishCondition:this._getCheckSnapsCondition(),condition:this._getStradaIsBeingSnappedCondition()}),"modifyvertex"==e&&(t={snap:{vectorLayer:i},deleteCondition:_.constant(!1)}),"cutline"==e&&(t={pointLayer:i.getLayer()});var n=l.prototype.setTool.call(this,e,t);return n&&(this._stradeSnaps=new this._stradeSnapsCollection,$("body").keyup(this._drawRemoveLastPoint),$("body").keyup(this._modifyRemovePoint)),n},c.stopTool=function(){var e=!1;return e=l.prototype.stopTool.call(this),e&&(this._stradeSnaps=null,$("body").off("keyup",this._drawRemoveLastPoint),$("body").off("keyup",this._modifyRemovePoint)),e}},{"./iterneteditor":29,"g3w/core/mapservice":42,"g3w/core/utils":48,"g3w/gui/gui":61}],31:[function(e,t,i){function n(){var e=this;this._runningEditor=null;var t=this.layerCodes={STRADE:"strade",GIUNZIONI:"giunzioni",ACCESSI:"accessi"};this._editorClasses={},this._editorClasses[t.ACCESSI]=u,this._editorClasses[t.GIUNZIONI]=d,this._editorClasses[t.STRADE]=h,this._layers={},this._layers[t.ACCESSI]={layerCode:t.ACCESSI,vector:null,editor:null,style:function(e){var t="#d9b581";switch(e.get("tip_acc")){case"0101":t="#d9b581";break;case"0102":t="#d9bc29";break;case"0501":t="#68aad9";break;default:t="#d9b581"}return[new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:t})})})]}},this._layers[t.GIUNZIONI]={layerCode:t.GIUNZIONI,vector:null,editor:null,style:new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:"#0000ff"})})})},this._layers[t.STRADE]={layerCode:t.STRADE,vector:null,editor:null,style:new ol.style.Style({stroke:new ol.style.Stroke({width:3,color:"#ff7d2d"})})},this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this._loadedExtent=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null},retrievingData:!1,hasEdits:!1};var i={resolution:1};a.onafter("setMapView",function(t,n,r){e.state.editing.enabled=n<i.resolution}),this.init=function(e){this.config=e,_.forEach(this._layers,function(t,i){t.name=e.layers[i].name,t.id=e.layers[i].id})},this.stop=function(){var t=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){e._stopEditing(),t.resolve()}).fail(function(){t.reject()}):t.resolve(),t.promise()},this.toggleEditing=function(){var e=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return e.promise()},this.saveEdits=function(){this._cancelOrSave(2)},this.toggleEditTool=function(e,t){var i=this,n=this._layers[e];if(n){var r=this._getCurrentEditingLayer();r&&e==r.layerCode?t==r.editor.getActiveTool().getType()?this._stopEditingTool():this._startEditingTool(r,t):r&&r.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(n,t)}):this._startEditingTool(n,t)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._startEditing=function(){var e=this;this._setupAndLoadAllVectorsData().then(function(t){
e._addToMap(),e.state.editing.on=!0,e.emit("editingstarted"),e._loadDataOnMapViewChangeListener||(e._loadDataOnMapViewChangeListener=a.onafter("setMapView",function(){e.state.editing.on&&e.state.editing.enabled&&e._loadAllVectorsData()}))})},this._stopEditing=function(t){this._stopEditor(t)&&(_.forEach(this._layers,function(t,i){var n=t.vector;a.viewer.removeLayerByName(n.name),t.vector=null,t.editor=null,e._unlockLayer(e.config.layers[i])}),this._updateEditingState(),e.state.editing.on=!1,e._cleanUp(),e.emit("editingstopped"))},this._cleanUp=function(){this._loadedExtent=null},this._startEditor=function(e){return e.editor.start(this)?(this._setCurrentEditingLayer(e),!0):!1},this._startEditingTool=function(e,t,i){var n=!0;return e.editor.isStarted()||(n=this._startEditor(e)),n&&e.editor.setTool(t,i)?(this._updateEditingState(),!0):!1},this._stopEditor=function(e){var t=!0,i=this._getCurrentEditingLayer();return i&&(t=i.editor.stop(e),t&&this._setCurrentEditingLayer()),t},this._stopEditingTool=function(){var e=!0,t=this._getCurrentEditingLayer();return t&&(e=t.editor.stopTool(),e&&this._updateEditingState()),e},this._cancelOrSave=function(e){var t=$.Deferred();try{var i=1;e&&(i=e);var n=this,r={};_.forEach(this._layers,function(e,t){e.editor.isDirty()&&(r[t]=e.editor)}),_.keys(r).length?this._askCancelOrSave(i).then(function(e){"save"===e?n._saveEdits(r).then(function(e){t.resolve()}).fail(function(e){t.reject()}):"nosave"==e?t.resolve():"cancel"==e&&t.reject()}):t.resolve()}catch(o){t.reject()}return t.promise()},this._askCancelOrSave=function(e){var t=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){t.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){t.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){t.resolve("cancel")}}};switch(e){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return c.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),t.promise()},this._saveEdits=function(t){var i=$.Deferred();return this._sendEdits(t).then(function(n){c.notify.success("I dati sono stati salvati correttamente"),e._commitEdits(t,n),a.refreshMap(),i.resolve()}).fail(function(e){c.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(e){var t=$.Deferred(),i=_.map(e,function(e){return{layername:e.getVectorLayer().name,edits:e.getEditedFeatures()}});return this._postData(i).then(function(e){e.result?t.resolve(e.response):t.reject(e.response)}).fail(function(e){t.reject(e.response)}),t.promise()},this._commitEdits=function(e,t){_.forEach(e,function(e){t&&t["new"]&&_.forEach(t["new"],function(t){var i=t.clientid,n=t.id;e.getEditVectorLayer().setFeatureData(i,n,null,t)}),e.commit()})},this._undoEdits=function(e){var t=this._getCurrentEditingLayer().layerCode;e[t];this._stopEditing(!0)},this._updateEditingState=function(){var e=this._getCurrentEditingLayer();e?(this.state.editing.layerCode=e.layerCode,this.state.editing.toolType=e.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null)},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(e){e?this._currentEditingLayer=e:this._currentEditingLayer=null},this._addToMap=function(){var t=a.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){e._layers[i].vector.addToMap(t)})},this._setupAndLoadAllVectorsData=function(){var e=this,t=$.Deferred(),i=this.getLayerCodes(),n=_.reduce(i,function(t,i){return!_.isNull(e._layers[i].vector)});if(e.state.retrievingData=!0,n)this._loadAllVectorsData().then(function(){t.resolve()}).fail(function(){t.reject()}).always(function(){e.state.retrievingData=!1});else{var r=_.map(i,function(t){return e._setupVectorLayer(e._layers[t])});$.when.apply(this,r).then(function(){var i=Array.prototype.slice.call(arguments),n=e.getLayerCodes(),r=_.zipObject(n,i);_.forEach(r,function(t,i){e._layers[i].vector=t;var n=new e._editorClasses[i];n.setVectorLayer(t),n.on("dirty",function(t){e.state.hasEdits=t}),e._layers[i].editor=n}),e._loadAllVectorsData().then(function(){t.resolve()}).fail(function(){t.reject()}).always(function(){e.state.retrievingData=!1})}).fail(function(){t.reject()})}return t.promise()},this._loadAllVectorsData=function(e){var t=a.state.bbox,i=this._loadedExtent;if(i&&ol.extent.containsExtent(i,t))return o();i?this._loadedExtent=ol.extent.extend(i,t):this._loadedExtent=t;var n=$.Deferred(),r=this,s=_.map(r._layers,function(e){return r._loadVectorData(e.vector,t)});return $.when.apply(this,s).then(function(){var e=Array.prototype.slice.call(arguments),t=r.getLayerCodes(),i=_.zipObject(t,e);_.forEach(i,function(e,t){e.featurelocks&&r._layers[t].editor.setFeatureLocks(e.featurelocks)}),n.resolve()}).fail(function(){n.reject()}),n.promise()},this._setupVectorLayer=function(t){var i=$.Deferred();return e._getVectorLayerConfig(t.name).then(function(n){var r=n.vector,o=e._createVectorLayer({geometrytype:r.geometrytype,format:r.format,crs:"EPSG:3003",id:t.id,name:t.name,pk:t.pk});o.setFields(r.fields);var s=r.relations;s&&(o.lazyRelations=!0,o.setRelations(s)),t.style&&o.setStyle(t.style),i.resolve(o)}).fail(function(){i.reject()}),i.promise()},this._loadVectorData=function(e,t){var i=this;return i._getVectorLayerData(e,t).then(function(t){return e.setData(t.vector.data),t})},this._getVectorLayerConfig=function(e){var t=$.Deferred();return $.get(this.config.baseurl+e+"/?config").done(function(e){t.resolve(e)}).fail(function(){t.reject()}),t.promise()},this._getVectorLayerData=function(e,t){var i=$.Deferred();return $.get(this.config.baseurl+e.name+"/?editing&in_bbox="+t[0]+","+t[1]+","+t[2]+","+t[3]).done(function(e){i.resolve(e)}).fail(function(){i.reject()}),i.promise()},this._postData=function(e){if(e.length>1)return this._postBatchData(e);var t=e[0].layername,i=e[0].edits,n=JSON.stringify(i);return $.post({url:this.config.baseurl+t+"/",data:n,contentType:"application/json"})},this._postBatchData=function(e){var t={};_.forEach(e,function(e){t[e.layername]=e.edits});var i=JSON.stringify(t);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._unlockLayer(e.config.layers[t])})},this._unlockLayer=function(e){$.get(this.config.baseurl+e.name+"/?unlock")},this._createVectorLayer=function(e,t){var i=new l(e);return i}}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").resolvedValue,s=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject")),a=(e("g3w/core/projectservice"),e("g3w/core/mapservice")),l=e("g3w/core/vectorlayer"),c=e("g3w/gui/gui"),u=e("./editors/accessieditor"),d=e("./editors/giunzionieditor"),h=e("./editors/stradeeditor");r(n,s),t.exports=new n},{"./editors/accessieditor":27,"./editors/giunzionieditor":28,"./editors/stradeeditor":30,"g3w/core/g3wobject":37,"g3w/core/mapservice":42,"g3w/core/projectservice":45,"g3w/core/utils":48,"g3w/core/vectorlayer":49,"g3w/gui/gui":61}],32:[function(e,t,i){function n(){this.name="iternet",this.tools=[{name:"ITERNET",actions:[{id:"iternet:startEditing",name:"Gestione dati"}]}],this.init=function(e){a.init(e)},this.startEditing=function(){var e=new l;o.showPanel(e)}}var r=e("g3w/core/utils").inherit,o=e("g3w/gui/gui"),s=e("g3w/core/plugin"),a=e("./iternetservice"),l=e("./editorpanel");r(n,s),t.exports=new n},{"./editorpanel":26,"./iternetservice":31,"g3w/core/plugin":43,"g3w/core/utils":48,"g3w/gui/gui":61}],33:[function(e,t,i){var n=e("./map/maphelpers");!function(e,n,r){"function"==typeof define&&define.amd?define(r):"object"==typeof i?t.exports=r():n[e]=r()}("g3wol3",this,function(){"use strict";function e(e,t){var i={};for(var n in e)i[n]=e[n];for(var n in t)i[n]=t[n];return i}var t=e({},n);return{helpers:t}})},{"./map/maphelpers":36}],34:[function(e,t,i){var n={};n.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),n.BING={},n.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),n.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),n.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=n},{}],35:[function(e,t,i){var n={};n.TiledWMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},n.WMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.ImageWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},n.TiledWMSLayer=function(e){var t=new ol.layer.Tile({name:e.name,opacity:1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},t.exports=n},{}],36:[function(e,t,i){BaseLayers=e("../layers/bases");var n={createViewer:function(e){return new r(e)}},r=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1}}).extend([new ol.control.Zoom]),i=ol.interaction.defaults().extend([new ol.interaction.DragRotate]);i.removeAt(1);var n=new ol.View(e.view),r={controls:t,interactions:i,ol3Logo:!1,view:n,keyboardEventTarget:document};e.id&&(r.target=e.id);var o=new ol.Map(r);this.map=o};r.prototype.updateMap=function(e){},r.prototype.updateView=function(){},r.prototype.getMap=function(){return this.map},r.prototype.setTarget=function(e){this.map.setTarget(e)},r.prototype.goTo=function(e,t){var i=this.map.getView();i.setCenter(e),i.setZoom(t)},r.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},r.prototype.getResolution=function(){var e=this.map.getView();return e.getResolution()},r.prototype.getCenter=function(){var e=this.map.getView();return e.getCenter()},r.prototype.getBBOX=function(){return this.map.getView().calculateExtent(this.map.getSize())},r.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),i=t.getLength(),n=0;i>n;n++)if(e===t.item(n).get("name"))return t.item(n);return null},r.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&(this.map.removeLayer(t),delete t)},r.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&i.visible&&e.push(t)}),e},r.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&e.push(t)}),e},r.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},r.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),i=this.map.getLayers();i.insertAt(0,t)},t.exports=n},{"../layers/bases":34}],37:[function(e,t,i){var n=e("g3w/core/utils").inherit,r=e("g3w/core/utils").noop,o=function(){this.setters&&this._setupListenersChain(this.setters)};n(o,EventEmitter);var s=o.prototype;s.onafter=function(e,t){return this._onsetter("after",e,t,!1)},s.onbefore=function(e,t){return this._onsetter("before",e,t,!1)},s.onbeforeasync=function(e,t){return this._onsetter("before",e,t,!0)},s.un=function(e,t){_.forEach(this.settersListeners,function(i,n){_.forEach(i[e],function(e){e.key==t&&delete e})})},s._onsetter=function(e,t,i,n){var r=this.settersListeners[e],o=""+Math.floor(1e6*Math.random())+Date.now();return r[t].push({key:o,fnc:i,async:n}),o},s._setupListenersChain=function(e){var t=this;this.settersListeners={after:{},before:{}},_.forEach(e,function(e,i){var n=r,o=r;_.isFunction(e)?n=e:(n=e.fnc,o=e.fallback||r),t.settersListeners.after[i]=[],t.settersListeners.before[i]=[],t[i]=function(){function e(){c=n.apply(t,a),l.resolve(c);var e=t.settersListeners.after[i];_.forEach(e,function(e,i){e.fnc.apply(t,a)})}function r(){o.apply(t,a),l.reject()}function s(n){var o=!0;_.isBoolean(n)&&(o=n);var l=Array.prototype.slice.call(a);if(o===!1||u==d.length)o===!1?r.apply(t,a):(completed=e.apply(t,a),(_.isUndefined(completed)||completed===!0)&&t.emitEvent("set:"+i,a));else if(o){var c=d[u].fnc;if(d[u].async)l.push(s),u+=1,c.apply(t,l);else{var h=c.apply(t,l);u+=1,s(h)}}}var a=arguments,l=$.Deferred(),c=null,u=0,d=this.settersListeners.before[i];return u=0,s(),l.promise()}})},t.exports=o},{"g3w/core/utils":48}],38:[function(e,t,i){function n(){var e=this;this.url="http://nominatim.openstreetmap.org",this.search=function(t){var i=($.Deferred(),this.url+"/search?format=json&polygon_geojson=1&q="+t);$.get(i,function(t){e.emit("results",t)})},o(this)}var r=e("g3w/core/utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject");r(n,s),t.exports={Nominatim:new n}},{"g3w/core/g3wobject":37,"g3w/core/utils":48}],39:[function(e,t,i){var n={distance:function(e,t){return Math.sqrt(n.squaredDistance(e,t))},squaredDistance:function(e,t){var i=e[0],n=e[1],r=t[0],o=t[1],s=r-i,a=o-n;return s*s+a*a},closestOnSegment:function(e,t){var i,n,r=e[0],o=e[1],s=t[0],a=t[1],l=s[0],c=s[1],u=a[0],d=a[1],h=u-l,f=d-c,p=0===h&&0===f?0:(h*(r-l)+f*(o-c))/(h*h+f*f||0);return 0>=p?(i=l,n=c):p>=1?(i=u,n=d):(i=l+p*h,n=c+p*f),[i,n]}};t.exports=n},{}],40:[function(e,t,i){var n={PICKED:"picked"},r=function(e,t){this.type=e,this.coordinate=t},o=function(e){this.previousCursor_=null,ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:PickFeatureInteraction.handleMoveEvent_})};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return!0},o.handleUpEvent_=function(e){return this.dispatchEvent(new r(n.PICKED,e.coordinate)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement();this.previousCursor_=t.style.cursor,t.style.cursor="pointer"},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setActive=function(e){var t=event.map.getTargetElement();t.style.cursor=this.previousCursor_,ol.interaction.Pointer.prototype.setActive.call(this,e)},t.exports=o},{}],41:[function(e,t,i){var n={PICKED:"picked"},r=function(e,t,i){this.type=e,this.feature=i,this.coordinate=t},o=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_}),this.layers_=e.layers,this.pickedFeature_=null,this.layerFilter_=function(t){return _.includes(e.layers,t)}};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return this.pickedFeature_=this.featuresAtPixel_(e.pixel,e.map),!0},o.handleUpEvent_=function(e){return this.pickedFeature_&&this.dispatchEvent(new r(n.PICKED,e.coordinate,this.pickedFeature_)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=this.featuresAtPixel_(e.pixel,e.map);i?(this.previousCursor_=t.style.cursor,t.style.cursor="pointer"):(t.style.cursor=void 0!==this.previousCursor_?this.previousCursor_:"",this.previousCursor_=void 0)},o.prototype.featuresAtPixel_=function(e,t){var i=null,n=t.forEachFeatureAtPixel(e,function(e){return e},this,this.layerFilter_);return n&&(i=n),i},o.prototype.shouldStopEvent=function(){return!1},t.exports=o},{}],42:[function(e,t,i){function n(){var e=this;this.viewer,this.mapLayers={},this.layersAssociation={},this.state={bbox:[],resoution:null,center:null},this._interactionsStack=[],this.setters={setMapView:function(e,t,i){this.state.bbox=e,this.state.resolution=t,this.state.resolutin=i}},l.on("projectset",function(){$script("http://epsg.io/"+l.state.crs+".js"),e.viewer||e.setupViewer(),e.setupLayers(),e.emit("viewerset")}),l.onafter("setLayersVisible",function(t){_.forEach(t,function(t){var i=e.getMapLayerForLayer(t);i.update()})}),this.setupViewer=function(){var t=l.state.extent,i=new ol.proj.Projection({code:"EPSG:"+l.state.crs,extent:t});this.viewer=d.createViewer({view:{projection:i,center:ol.extent.getCenter(l.state.extent),zoom:4}});this.viewer.map.getView();this.viewer.map.on("moveend",function(t){e._setMapView()})},this.setupLayers=function(){this.mapLayers={},this.layersAssociation={};var t=this.traverseLayersTree(l.state.layerstree);t.forEach(function(t){if(!_.get(t,"nodes")){var i="layer_"+t.metalayer,n=_.get(e.mapLayers,i);n||(url=l.getWmsUrl(),n=e.mapLayers[i]=new f({id:i,url:url}),e.viewer.map.addLayer(n.getLayer())),n.addLayer(t),e.layersAssociation[t.id]=i}}),_.forEach(this.mapLayers,function(e){e.update()})},this.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.metalayer]},this.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,n){_.isNil(e.id)||i.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var i=[];return t(e),i},this.showViewer=function(t){this.viewer.setTarget(t);this.viewer.map;a.on("guiready",function(){e._setMapView()})},this.pushInteraction=function(e){if(this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!1)}):t.setActive(!1)}this.viewer.map.addInteraction(e),e.setActive(!0),this._interactionsStack.push(e)},this.popInteraction=function(){var e=this._interactionsStack.pop();if(this.viewer.map.removeInteraction(e),this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!0)}):t.setActive(!0)}},this.goTo=function(e,t){var t=t||5;this.viewer.goTo(e,t)},this.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+l.state.crs);this.goTo(e,t)},this.getFeatureInfo=function(e){var t=this,i=$.Deferred();return this._pickInteraction=new h,this.pushInteraction(this._pickInteraction),this._pickInteraction.on("picked",function(n){t._completeGetFeatureInfo(e,n.coordinate,i)}),i.promise()},this._completeGetFeatureInfo=function(e,t,i){var n=this,r=l.state.type,o=this.mapLayers[this.layersAssociation[e]],s=n.viewer.getResolution(),a="EPSG:"+l.state.crs,u={QUERY_LAYERS:l.getLayer(e).name,INFO_FORMAT:"text/xml"};if(r==c.QDJANGO){var d=p[r];if(d){var h=l.getLayer(e).geometrytype;u[d[h]]=g[h]}}var f=o.getSource().getGetFeatureInfoUrl(t,s,a,u);$.get(f).then(function(e){var t=new X2JS,n=t.xml2json(e);if(n.GetFeatureInfoResponse.Layer.Feature){var r=n.GetFeatureInfoResponse.Layer.Feature.Attribute,o={};_.forEach(r,function(e){o[e._name]=e._value}),i.resolve(o)}i.reject()}).fail(function(){i.reject()}).always(function(){n.popInteraction(),n._pickInteraction=null})},this.refreshMap=function(){_.forEach(this.mapLayers,function(e){e.getLayer().getSource().updateParams({time:Date.now()})})},o(this),this._setMapView=function(){var e=this.viewer.getBBOX(),t=this.viewer.getResolution(),i=this.viewer.getCenter();this.setMapView(e,t,i)}}var r=e("./utils").inherit,o=e("./utils").base,s=(e("./utils").deferredValue,e("g3w/core/g3wobject")),a=e("g3w/gui/gui"),l=(e("./projectsregistry"),e("./projectservice").ProjectService),c=e("./projectservice").ProjectTypes,u=e("./projectservice").GeometryTypes,d=e("g3w-ol3/src/g3w.ol3").helpers,h=e("g3w/core/interactions/pickcoordinatesinteraction"),f=e("./wmslayer"),p={};p[c.QDJANGO]={},p[c.QDJANGO][u.POINT]="FI_POINT_TOLERANCE",p[c.QDJANGO][u.LINESTRING]="FI_LINE_TOLERANCE",p[c.QDJANGO][u.POLYGON]="FI_POLYGON_TOLERANCE";var g={};g[u.POINT]=5,g[u.LINESTRING]=5,g[u.POLYGON]=5,r(n,s),t.exports=new n},{"./projectservice":45,"./projectsregistry":46,"./utils":48,"./wmslayer":50,"g3w-ol3/src/g3w.ol3":33,"g3w/core/g3wobject":37,"g3w/core/interactions/pickcoordinatesinteraction":40,"g3w/gui/gui":61}],43:[function(e,t,i){function n(){this.id="plugin",this.tools=[]}var r=e("./utils").inherit,o=e("g3w/core/g3wobject");r(n,o);var s=n.prototype;s.providesTools=function(){return this.tools.length>0},s.getTools=function(){return this.tools},s.getActions=function(e){return e.actions},t.exports=n},{"./utils":48,"g3w/core/g3wobject":37}],44:[function(e,t,i){function n(){var e=this;this.config=null,this.availablePlugins={},this.state={toolsproviders:[]},this.init=function(t){this.config=t,this._setAvailablePlugins(t),_.forEach(this.availablePlugins,function(t){t.providesTools()&&e.state.toolsproviders.push(t)}),this.emit("initend")},this._setAvailablePlugins=function(t){_.has(t,"plugins")&&_.forEach(s,function(i){_.forEach(t.plugins,function(t,n){i.name==n&&(i.init(t),e.availablePlugins[n]=i)})})}}var r=e("./utils").inherit,o=e("g3w/core/g3wobject"),s={iternet:e("g3w-iternet/plugin")};r(n,o),t.exports=new n},{"./utils":48,"g3w-iternet/plugin":32,"g3w/core/g3wobject":37}],45:[function(e,t,i){function n(){var e=this;this.config=null,this.layers={},this.state={layerstree:[]},this.setters={setLayersVisible:function(t,i){_.forEach(t,function(t){e.layers[t.id].visible=i})}},this.init=function(e){this.config=e},this.makeLayersObj=function(t){function i(t){_.forIn(t,function(t,n){_.isNil(t.id)||(e.layers[t.id]=t),_.isNil(t.nodes)||i(t.nodes)})}i(t)},this.setProject=function(e){this.state=e,this.makeLayersObj(e.layerstree),this.emit("projectset")},this.getLayer=function(e){return this.layers[e]},this.getLayerAttributes=function(e){return this.layers[e].attributes},this.getLayerAttributeLabel=function(e,t){var i="";return _.forEach(this.layers[e].attributes,function(e){e.name==t&&(i=e.label)}),i},this.toggleLayer=function(t,i){var i=i||!t.visible;e.setLayersVisible([t],i)},this.toggleLayers=function(t,i){e.setLayersVisible(t,i)},this.getWmsUrl=function(){return this.config.getWmsUrl(this.state)},this.getLegendUrl=function(e){return this.getWmsUrl(this.state)+"?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&FORMAT=image/png&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name},o(this)}var r=e("./utils").inherit,o=e("./utils").base,s=e("g3w/core/g3wobject"),a={QDJANGO:"qdjango",OGR:"ogr"},l={POINT:"Point",LINESTRING:"Line",POLYGON:"Polygon"};r(n,s),t.exports={ProjectService:new n,ProjectTypes:a,GeometryTypes:l}},{"./utils":48,"g3w/core/g3wobject":37}],46:[function(e,t,i){function n(){var e=this;this.state=u.state,this.init=function(t){return u.init(t).then(function(){e.emit("loaded")})},this.addProject=function(e){u.addProject(e)},this.getProject=function(e){return u.getProject(e)},this.getCurrentProject=function(){return this.getProject(u.currentProject.gid)},this.setCurrentProject=function(e){u.setCurrentProject(e)},o(this)}var r=e("./utils").inherit,o=e("g3w/core/utils").base,s=e("g3w/core/g3wobject"),a=e("./utils").resolvedValue,l=e("./utils").rejectedValue,c=e("./projectservice").ProjectService;r(n,s);var u={config:null,initialized:!1,state:{baseLayers:{},minScale:null,maxscale:null,projects:[]},init:function(e){return this.initialized?void 0:(this.config=e,this.setupState(),c.init(e),this.setCurrentProject(e.initproject))},setupState:function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.config.projects.forEach(function(t){t.baseLayers=e.config.baselayers,t.minScale=e.config.minscale,t.maxScale=e.config.maxscale,t.crs=e.config.crs,e.state.projects.push(t)})},setCurrentProject:function(e){var t=this,i=this.getProject(e);if(!i)return l("Project doesn't exist");var n=!_.isNil(i.layers);return n?(c.setProject(i),a(i)):this.getProjectFullConfig(i).then(function(e){i=_.merge(i,e),t.buildProjectTree(i),c.setProject(i)})},buildProjectTree:function(e){function t(e){_.forIn(e,function(n,r){if(!_.isNil(n.id)){var o=_.merge(n,i[n.id]);e[parseInt(r)]=o}_.isNil(n.nodes)||(n.title=n.name,t(n.nodes))})}var i=_.keyBy(e.layers,"id"),n=_.cloneDeep(e.layerstree);t(n),e.layerstree=n},getProject:function(e){var t=null;return this.state.projects.forEach(function(i){i.gid==e&&(t=i)}),t},getProjectFullConfig:function(e){var t=$.Deferred(),i=this.config.getProjectConfigUrl(e);return $.get(i).done(function(e){t.resolve(e)}),t.promise()}};t.exports=new n},{"./projectservice":45,"./utils":48,"g3w/core/g3wobject":37,"g3w/core/utils":48}],47:[function(e,t,i){function n(){var e=this;this.config=null,this._actions={},this.state={tools:[]},s.on("initend",function(){_.forEach(s.state.toolsproviders,function(t){e._mergeTools(t.getTools()),e._addActions(t)})}),this.init=function(e){this.config=e,this.setState()},this.setState=function(){this._mergeTools(this.config.tools)},this.fireAction=function(e){var t=this._actions[e],i=this._actionMethod(e);t[i]()},this._actionMethod=function(e){var t=e.split(":");return t.pop()},this._mergeTools=function(t){e.state.tools=_.concat(e.state.tools,t)},this._addActions=function(t){_.forEach(t.getTools(),function(i){_.forEach(t.getActions(i),function(i){e._actions[i.id]=t})})}}var r=e("./utils").inherit,o=e("g3w/core/g3wobject"),s=e("./pluginsservice");r(n,o),t.exports=new n},{"./pluginsservice":44,"./utils":48,"g3w/core/g3wobject":37}],48:[function(e,t,i){var n={mixin:function(e,t){return n.merge(e.prototype,t)},mixininstance:function(e,t){var i=new t;n.merge(e,i),n.merge(e.prototype,t.prototype)},merge:function(e,t){var i;for(i in t)n.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function i(){}i.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new i,e.prototype.constructor=e},base:function(e,t,i){var n=arguments.callee.caller;if(n.superClass_)return n.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var r=Array.prototype.slice.call(arguments,2),o=!1,s=e.constructor;s;s=s.superClass_&&s.superClass_.constructor)if(s.prototype[t]===n)o=!0;else if(o)return s.prototype[t].apply(e,r);if(e[t]===n)return e.constructor.prototype[t].apply(e,r);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},truefnc:function(){return!0},falsefnc:function(){return!0},resolvedValue:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},rejectedValue:function(e){var t=$.Deferred();return t.reject(e),t.promise()}};t.exports=n},{}],49:[function(e,t,i){function n(e){var e=e||{};this.geometrytype=e.geometrytype||null,this.format=e.format||null,this.crs=e.crs||null,this.id=e.id||null,this.name=e.name||"",this.pk=e.pk||"id",this._olSource=new ol.source.Vector({features:new ol.Collection}),this._olLayer=new ol.layer.Vector({name:this.name,source:this._olSource}),this._PKinAttributes=!1,this._featuresFilter=null,this._fields=null,this.lazyRelations=!0,this._relations=null}var r=e("g3w/core/utils").inherit,o=(e("g3w/core/utils").truefnc,e("g3w/core/utils").resolvedValue),s=(e("g3w/core/utils").rejectedValue,e("g3w/core/g3wobject"));r(n,s),t.exports=n;var a=n.prototype;a.setData=function(e){var t,i=this;if(this.format){switch(this.format){case"GeoJSON":var n=new ol.format.GeoJSON({defaultDataProjection:this.crs,geometryName:"geometry"});t=n.readFeatures(e)}if(t&&t.length){if(!_.isNull(this._featuresFilter))var t=_.map(t,function(e){return i._featuresFilter(e)});var r=this.getFeatureIds(),o=_.filter(t,function(e){return!_.includes(r,e.getId())});this._olSource.addFeatures(o);var s=this.getSource().getFeatures()[0].getProperties();this._PKinAttributes=!!_.get(s,this.pk)}}else console.log("VectorLayer format not defined")},a.setFeatureData=function(e,t,i,n){var r=this.getFeatureById(e);if(t&&r.setId(t),i&&r.setGeometry(i),n){var o=r.getProperties(),s=_.assign(o,n);r.setProperties(s)}return r},a.addFeatures=function(e){this.getSource().addFeatures(e)},a.setFeaturesFilter=function(e){this._featuresFilter=e},a.setFields=function(e){this._fields=e},a.setPkField=function(){var e=this,t=!1;_.forEach(this._fields,function(i){i.name==e.pk&&(t=!0)}),t||this._fields},a.getFeatures=function(){return this.getSource().getFeatures()},a.getFeatureIds=function(){var e=_.map(this.getSource().getFeatures(),function(e){return e.getId()});return e},a.getFields=function(){return _.cloneDeep(this._fields)},a.getFieldsNames=function(){return _.map(this._fields,function(e){return e.name})},a.getFieldsWithAttributes=function(e){var t,i,n=this,r=_.cloneDeep(this._fields);return e&&(t=this.getSource().getFeatureById(e),i=t.getProperties()),_.forEach(r,function(r){t?this._PKinAttributes||r.name!=n.pk?r.value=i[r.name]:r.value=e:r.value=null}),r},a.setRelations=function(e){_.forEach(e,function(e,t){e.name=t}),this._relations=e},a.getRelations=function(){return this._relations},a.getRelationsNames=function(){return _.keys(this._relations)},a.getRelationFieldsNames=function(e){var t=this._relations[e];return t?_.map(t,function(e){return e.name}):null},a.getRelationsWithAttributes=function(e){var t=_.cloneDeep(this._relations);if(!e)return _.forEach(t,function(e,t){_.forEach(e.fields,function(e){e.value=null})}),o(t);if(this.lazyRelations){var i=$.Deferred(),n=[],r=this.getFeatureById(e).getProperties();return _.forEach(t,function(e,t){var i=e.url,o=[];_.forEach(e.fk,function(e){var t=r[e];o.push(e+"="+t)});var s=_.join(o,"&");i+="?"+s,n.push($.get(i).then(function(t){_.forEach(e.fields,function(e){e.value=t[0][e.name]})}))}),$.when.apply(this,n).then(function(){i.resolve(t)}).fail(function(){i.reject()}),i.promise()}},a.setStyle=function(e){this._olLayer.setStyle(e)},a.getLayer=function(){return this._olLayer},a.getSource=function(){return this._olLayer.getSource()},a.getFeatureById=function(e){return this._olLayer.getSource().getFeatureById(e)},a.clear=function(){this.getSource().clear()},a.addToMap=function(e){e.addLayer(this._olLayer)}},{"g3w/core/g3wobject":37,"g3w/core/utils":48}],50:[function(e,t,i){function n(e){var t=new r(e);this.getLayer=function(){return t.olLayer},this.getSource=function(){return t.olLayer.getSource()},this.getLayerId=function(){return t.layerId},this.addLayer=function(e){t.addLayer(e)},this.toggleLayer=function(e){_.forEach(t.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),t.updateLayers()},this.update=function(){t.updateLayers()}}function r(e){this.LAYERTYPE={LAYER:"layer",METALAYER:"metalayer"},this.layerId=e.layerId,this.olLayer=null,this.layers=[];var t={name:this.layerId,url:e.url};this.olLayer=new o.WMSLayer(t)}var o=e("g3w-ol3/src/layers/rasters"),s=r.prototype;s.addLayer=function(e){this.layers.push(e)},s.getVisibleLayers=function(){var e=[];return _.forEach(this.layers,function(t){t.visible&&e.push(t)}),e},s.updateLayers=function(){var e=this.getVisibleLayers();this.olLayer.getSource().updateParams({layers:_.join(_.map(e,"name"),",")})},t.exports=n},{"g3w-ol3/src/layers/rasters":35}],51:[function(e,t,i){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree"></a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend"></a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tristate-tree :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tristate-tree>\n        </ul>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],52:[function(e,t,i){var n=(e("i18n.service"),e("g3w/gui/gui"),e("g3w/core/projectservice").ProjectService);Vue.component("g3w-catalog",{template:e("./catalog.html"),data:function(){return{project:n.state}},computed:{layerstree:function(){
return this.project.layerstree}},methods:{},ready:function(){}}),Vue.component("tristate-tree",{template:e("./tristate-tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,n.toggleLayers(this.layerstree.nodes,this.parentChecked)):n.toggleLayer(this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(i){_.forIn(i,function(i,n){!_.isNil(i.id)&&i.visible&&t.push(i),_.isNil(i.nodes)||e(i.nodes)})}var t=[],i=this.layerstree;return e(i),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return n.getLegendUrl(this.layer)}},methods:{openform:function(){}}})},{"./catalog.html":51,"./legend.html":53,"./legend_item.html":54,"./tristate-tree.html":55,"g3w/core/projectservice":45,"g3w/gui/gui":61,"i18n.service":5}],53:[function(e,t,i){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],54:[function(e,t,i){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],55:[function(e,t,i){t.exports='<li class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\']" class="fa"></span>\n  <span :class="{bold: isFolder}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tristate-tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n'},{}],56:[function(e,t,i){function n(e){this.panelComponent=null,this.options=e||{},this.id=e.id,this.name=e.name,this.dataid=e.dataid,this.pk=e.pk||null,this.isnew=!_.isNil(e.isnew)&&_.isBoolean(e.isnew)?e.isnew:!0,this.state={fields:e.fields,relations:e.relations},this._formPanel=e.formPanel||l,this._defaults=e.defaults||c.defaults}var r=e("g3w/core/utils").resolvedValue,o=(e("g3w/core/utils").rejectedValue,e("g3w/gui/gui")),s=e("g3w/core/projectservice").ProjectService,a=e("g3w/core/mapservice");Vue.filter("startcase",function(e){return _.startCase(e)});var l=Vue.extend({template:e("./formpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),o.closeForm()},isEditable:function(e){return this.$options.form._isEditable(e)},isSimple:function(e){return this.$options.form._isSimple(e)},isSelect:function(e){return this.$options.form._isSelect(e)},isLayerPicker:function(e){return this.$options.form._isLayerPicker(e)},layerPickerPlaceHolder:function(e){return this.$options.form._getlayerPickerLayerName(e.input.options.layerid)},pickLayer:function(e){this.$options.form._pickLayer(e)},isVisible:function(e){return this.$options.form._isVisible(e)},showRelation:function(e){return this.$options.form._shouldShowRelation(e)}}}),c={};c.STRING="string",c.INTEGER="integer",c.FLOAT="float",c.defaults={},c.defaults[c.STRING]="",c.defaults[c.INTEGER]=0,c.defaults[c.FLOAT]=0,c.simpleFieldTypes=[c.STRING,c.INTEGER,c.FLOAT],c.SELECT="select",c.LAYERPICKER="layerpicker",c.specialInputs=[c.SELECT,c.LAYERPICKER];var u=n.prototype;u.onShow=function(e){this._setupFields();var t=this._setupPanel();return this._mountPanel(t,e),r(!0)},u.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,r(!0)},u._isNew=function(){return this.isnew},u._isVisible=function(e){return!(!e.editable&&(""==e.value||_.isNull(e.value)))},u._isEditable=function(e){return e.editable},u._isSimple=function(e){return _.includes(c.specialInputs,e.input.type)?!1:_.includes(c.simpleFieldTypes,e.type)},u._isSelect=function(e){return _.includes(c.specialInputs,e.input.type)&&e.input.type==c.SELECT},u._isLayerPicker=function(e){return _.includes(c.specialInputs,e.input.type)&&e.input.type==c.LAYERPICKER},u._pickLayer=function(e){o.setModal(!1);var t=e.input.options.layerid,i=e.input.options.field,n=s.getLayerAttributeLabel(t,e.input.options.field);a.getFeatureInfo(t).then(function(t){var r=t[i]?t[i]:t[n];e.value=r}).always(function(){o.setModal(!0)})},u._getDefaultValue=function(e){var t=null;return e.input&&e.input.options["default"]?t=e.input.options["default"]:this._isSelect(e)&&(t=e.input.options.values[0].key),t},u._getlayerPickerLayerName=function(e){var t=s.getLayer(e);return t?t.name:""},u._shouldShowRelation=function(e){return!0},u._setupFields=function(){var e=this,t=_.filter(this.state.fields,function(t){return e.pk&&null==t.value?t.name!=e.pk:!0});if(_.forEach(t,function(t){if(_.isNil(t.value)){var i=e._getDefaultValue(t);i&&(t.value=i)}}),this.state.relations){var i=this.state.relations;_.forEach(i,function(t){_.forEach(t.fields,function(t){if(_.isNil(t.value)){var i=e._getDefaultValue(t);i&&(t.value=i)}})})}},u._setupPanel=function(){var e=this.panelComponent=new this._formPanel({form:this});return this.options.buttons&&(e.buttons=this.options.buttons),e.state=this.state,e},u._mountPanel=function(e,t){e.$mount().$appendTo(t)},u._getField=function(e){var t=null;return _.forEach(this.state.fields,function(i){i.name==e&&(t=i)}),t},t.exports={Form:n,FormPanel:l}},{"./formpanel.html":57,"g3w/core/mapservice":42,"g3w/core/projectservice":45,"g3w/core/utils":48,"g3w/gui/gui":61}],57:[function(e,t,i){t.exports='<div>\n  <form class="form-horizontal g3w-form">\n    <template v-for="field in state.fields">\n      <div v-if="isVisible(field)" class="form-group has-feedback">\n        <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}</label>\n        <div class="col-sm-8">\n          <input v-if="isSimple(field)" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n          <select v-if="isSelect(field)" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n            <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n          </select>\n          <div v-if="isLayerPicker(field)">\n            <input class="form-control" @click="pickLayer(field)" v-disabled="!isEditable(field)" onfocus="blur()" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\'" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n            <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n          </div>\n        </div>\n      </div>\n    </template>\n    <div v-for="relation in state.relations">\n      <div v-if="showRelation(relation)" transition="expand">\n        <div class="g3w-relationname">{{ relation.name | startcase }}</div>\n        <template v-for="relfield in relation.fields">\n          <div v-if="isVisible(relfield)" class="form-group has-feedback">\n            <label :for="relfield.name" class="col-sm-4 control-label">{{ relfield.label }}</label>\n            <div class="col-sm-8">\n              <input v-if="isSimple(relfield)" v-disabled="!isEditable(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n              <select v-if="isSelect(relfield)" v-disabled="!isEditable(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n                <option v-for="relvalue in relfield.input.options.values" value="{{ relvalue.key }}">{{ relvalue.value }}</option>\n              </select>\n              <div v-if="isLayerPicker(relfield)">\n                <input class="form-control" @click="pickLayer(relfield)" v-disabled="!isEditable(relfield)" onfocus="blur()" style="cursor:pointer" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(relfield) }}\'" v-model="relfield.value" :id="relfield.name" :placeholder="\'[\'+layerPickerPlaceHolder(relfield)+\']\'">\n                <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n              </div>\n            </div>\n          </div>\n        </template>\n      </div>\n    </div>\n    <div class="form-group">\n      <div class="col-sm-offset-4 col-sm-8">\n        <button v-for="button in buttons" class="btn " :class="[button.class]" @click.stop.prevent="exec(button.cbk)">{{ button.title }}</button>\n      </div>\n    </div>\n  </form>\n</div>\n'},{}],58:[function(e,t,i){var n=e("g3w/core/mapservice"),r=Vue.extend({template:'<ul><li v-for="result in results" @click="goto(result.lon,result.lat)" style="cursor:pointer">{{ result.display_name }}</li></ul>',data:function(){return{results:[]}},methods:{"goto":function(e,t){n.goToWGS84([e,t])}}});t.exports=r},{"g3w/core/mapservice":42}],59:[function(e,t,i){t.exports='<form class="navbar-form" role="search" @submit.prevent>\n  <div class="input-group">\n    <input type="text" class="form-control" :placeholder="placeholder" v-model="query"  name="srch-term" id="srch-term">\n    <div class="input-group-btn">\n        <button class="btn btn-default" type="submit" @click="search"><i class="glyphicon glyphicon-search"></i></button>\n    </div>\n  </div>\n</form>\n'},{}],60:[function(e,t,i){var n=e("i18n.service"),r=e("g3w/core/geocodingservice");Vue.component("geocoder",{template:e("./geocoding.html"),props:["type"],data:function(){return{query:"",placeholder:n("street_search")}},methods:{search:function(e){e.preventDefault();var t=this.query;this.service.search(t)}},ready:function(){var e=this;this.service=r[this.type],this.service.on("results",function(){e.query=""})}})},{"./geocoding.html":59,"g3w/core/geocodingservice":38,"i18n.service":5}],61:[function(e,t,i){function n(){this.getResourcesUrl=noop,this.showForm=noop,this.closeForm=noop,this.showPanel=noop,this.ready=function(){this.emit("guiready")},toastr.options.positionClass="toast-top-center",toastr.options.preventDuplicates=!0,this.notify=toastr,this.dialog=bootbox}noop=e("g3w/core/utils").noop;var r=e("g3w/core/utils").inherit,o=e("g3w/core/g3wobject");r(n,o),t.exports=new n},{"g3w/core/g3wobject":37,"g3w/core/utils":48}],62:[function(e,t,i){t.exports='<div id="{{id}}" style="width:100%;height:100%"></div>\n'},{}],63:[function(e,t,i){var n=(e("i18n.service"),e("g3w/core/mapservice"));e("g3w-ol3/src/g3w.ol3").helpers;Vue.component("g3w-map",{template:e("./map.html"),props:["id"],ready:function(){n.showViewer(this.$el.id)}})},{"./map.html":62,"g3w-ol3/src/g3w.ol3":33,"g3w/core/mapservice":42,"i18n.service":5}],64:[function(e,t,i){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],65:[function(e,t,i){e("i18n.service");Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":64,"i18n.service":5}],66:[function(e,t,i){t.exports='<div class="g3w-tools">\n  <ul>\n    <li v-for="tool in tools">\n      <div data-toggle="collapse" data-target="#iternet-tools" class="tool-header">\n        <span style="">{{ tool.name }}</span>\n      </div>\n      <div id="iternet-tools" class="tool-box collapse">\n        <template v-for="action in tool.actions">\n          <i class="glyphicon glyphicon-cog"></i>\n          <span @click="fireAction(action.id)">{{ action.name }}</span>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],67:[function(e,t,i){var n=(e("i18n.service"),e("g3w/core/toolsservice"));Vue.component("g3w-tools",{template:e("./tools.html"),data:function(){return{tools:n.state.tools}},methods:{fireAction:function(e){n.fireAction(e)}}})},{"./tools.html":66,"g3w/core/toolsservice":47,"i18n.service":5}],68:[function(e,t,i){Vue.directive("disabled",function(e){e?this.el.setAttribute("disabled","disabled"):this.el.removeAttribute("disabled")}),Vue.directive("selected-first",function(e){0==e?this.el.setAttribute("selected",""):this.el.removeAttribute("selected")})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
