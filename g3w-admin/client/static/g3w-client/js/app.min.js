!function e(t,n,i){function a(o,s){if(!n[o]){if(!t[o]){var l="function"==typeof require&&require;if(!s&&l)return l(o,!0);if(r)return r(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[o]={exports:{}};t[o][0].call(u.exports,function(e){var n=t[o][1][e];return a(n?n:e)},u,u.exports,e,t,n,i)}return n[o].exports}for(var r="function"==typeof require&&require,o=0;o<i.length;o++)a(i[o]);return a}({1:[function(e,t,n){!function(){function t(){a=new Vue({el:"body",data:{iface:i},ready:function(){$(document).localize()}})}var n=e("i18n.service"),i=(e("app.ui"),e("app.service")),a=null,r={client:{debug:!0,local:!1},server:{urls:{ows:"/ows",api:"/api",config:"/api/config"}},group:null};window.initConfig?r.group=window.initConfig.group:$(document).on("initconfigReady",function(e,t){i.setGroup(t.group)}),r.client.debug&&(Vue.config.debug=!0),Vue.filter("t",function(e){return n(e)}),i.setup(r),i.on("ready",function(){t()})}()},{"app.service":3,"app.ui":4,"i18n.service":5}],2:[function(e,t,n){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- \n    -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Sidebar toggle button-->\n      <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <div class="navbar-custom-menu">\n        <ul class="nav navbar-nav">\n        </ul>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  \n  <sidebar :iface="iface">\n  </sidebar>\n\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <g3w-map id="map"></g3w-map>\n  </div>\n  <!-- /.content-wrapper -->\n  \n  <!-- \n  <footer class="main-footer">\n    <div class="pull-right hidden-xs">\n      <b>Version</b> 2.3.2\n    </div>\n    <strong>Copyright &copy; 2014-2015 <a href="http://almsaeedstudio.com">Almsaeed Studio</a>.</strong> All rights\n    reserved.\n  </footer>\n  -->\n\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],3:[function(e,t,n){function i(){var t=this;this.initialized=!1,this.title="G3W Client",this.config=null,this.projectConfig=null,this.setup=function(e){this.config=e,this.config.group&&this.bootstrap()},this.setGroup=function(e){this.config&&(this.config.group=e,this.bootstrap())},this.createContext=function(){var e={debug:!0,getWmsUrl:function(e){return t.config.server.urls.ows+"/"+t.config.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return t.config.server.urls.config+"/"+t.config.group.id+"/"+e.type+"/"+e.id},iface:t,projects:t.config.group.projects,initproject:t.config.group.initproject,baselayers:t.config.group.baselayers,crs:t.config.group.crs,minscale:t.config.group.minscale,maxscale:t.config.group.maxscale};return e},this.bootstrap=function(){if(!this.initialized){var n=this.createContext();$.when(r.init(n),o.init(n)).then(function(){t.emit("ready"),this.initialized=!0;var n=e("g3w/core/projectservice");n.on("aftertoggleLayer",function(){console.log("after togglelayer"+arguments)})})}}}var a=e("g3w/core/utils").inherit,r=e("g3w/core/projectsregistry"),o=e("g3w/core/pluginsregistry");a(i,EventEmitter),t.exports=new i},{"g3w/core/pluginsregistry":21,"g3w/core/projectservice":23,"g3w/core/projectsregistry":24,"g3w/core/utils":26}],4:[function(e,t,n){e("i18n.service");e("g3w/gui/map/map");var i=e("layout/layout"),a=e("g3w/core/mapservice");Vue.component("app",{template:e("./app.html"),props:["iface"],ready:function(){function e(){$("#map").height($(window).innerHeight()-$(".navbar").innerHeight()),a.viewer.map.updateSize()}function t(e){var t=$(".main-sidebar").offset().left;e||(t-=$(".main-sidebar").innerWidth()),$("#map").width($(window).innerWidth()+t),a.viewer.map.updateSize()}function n(){o===!0?(o=!1,r=!0,e(),t(!1),requestAnimationFrame(n)):r=!1}i.setup(),$("body").on("expanded.pushMenu",function(){t(!0)}),$("body").on("collapsed.pushMenu",function(){t(!0)}),e();var r=!1,o=!1;$(window).resize(function(){r===!1&&(o=!0,n())})}})},{"./app.html":2,"g3w/core/mapservice":19,"g3w/gui/map/map":33,"i18n.service":5,"layout/layout":8}],5:[function(e,t,n){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e("../locales/it/app.json")});var i=function(e){var t=i18next.t(e);return t};jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0}),t.exports=i},{"../locales/it/app.json":13}],6:[function(e,t,n){t.exports='<aside class="control-sidebar control-sidebar-dark">\n\n</aside>\n'},{}],7:[function(e,t,n){var i=e("g3w/core/pluginsservice");Vue.component("floatbar",{data:function(){return{store:i.store}},template:e("./floatbar.html")})},{"./floatbar.html":6,"g3w/core/pluginsservice":22}],8:[function(e,t,n){if(e("./sidebar/sidebar"),e("./floatbar/floatbar"),"undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),n=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var i;t>=n?($(".content-wrapper, .right-side").css("min-height",t-e),i=t-e):($(".content-wrapper, .right-side").css("min-height",n),i=n);var a=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof a&&a.height()>i&&$(".content-wrapper, .right-side").css("min-height",a.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,n=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var i=$(this),a=i.next();if(a.is(".treeview-menu")&&a.is(":visible"))a.slideUp(n,function(){a.parent("li.treeview").removeClass("active"),a.removeClass("menu-open")});else if(a.is(".treeview-menu")&&!a.is(":visible")){var r,o=i.parents("ul").first(),s=i.parent("li"),l=s.siblings(),c=o.height()-o.find("li.header").outerHeight(),u=s.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var d=c-u;a.css({height:d+"px","max-height":d+"px","overflow-y":"auto"});var p=o.find("ul.treeview-menu:visible").slideUp(n);p.removeClass("menu-open"),a.slideDown(n,function(){a.addClass("menu-open"),r=o.find("li.treeview.active"),r.removeClass("active"),s.addClass("active"),t.layout.fix()})}a.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,n=$(t.selector),i=$(t.toggleBtnSelector);i.on("click",function(i){i.preventDefault(),n.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(n,t.slide):e.open(n,t.slide)});var a=$(".control-sidebar-bg");e._fix(a),$("body").hasClass("fixed")?e._fixForFixed(n):$(".content-wrapper, .right-side").height()<n.height()&&e._fixForContent(n)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,n=e.parents(".box").first(),i=n.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");n.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),i.slideDown(t.animationSpeed,function(){n.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),i.slideUp(t.animationSpeed,function(){n.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(a),i.onLoadStart.call(e)}function n(e){e.find(a).remove(),i.onLoadDone.call(e)}var i=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),a=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===i.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),a=e.find(i.trigger).first();a.on("click",function(a){a.preventDefault(),t(e),e.find(".box-body").load(i.source,function(){n(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},t.exports=$.LayoutManager},{"./floatbar/floatbar":7,"./sidebar/sidebar":12}],9:[function(e,t,n){t.exports='<li class="treeview">\n  <a href="#">\n    <i :class="dataIcon"></i>\n    <span>{{dataLabel | t}}</span> \n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <slot></slot>\n  </ul>\n</li>\n'},{}],10:[function(e,t,n){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel">\n  <div class="tabbable-line">\n    <span class="tool-box-icon bg-aqua"><i data-toggle="control-sidebar" class="fa" :class="dataIcon"></i></span>\n    <div class="tool-box-content">\n      <span  class="tool-box-name">Iternet</span>\n    </div>\n    <!-- /.info-box-content -->\n  </div>\n  <!-- /.info-box -->\n</div>\n'},{}],11:[function(e,t,n){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n	<section class="sidebar">\n    <g3w-tools-panel></g3w-tools-panel>\n	  <ul v-if="activePlugin.activePlugin == \'\'" class="sidebar-menu">\n	    <sidebar-item data-icon="fa fa-search" data-label="search" data-type="inline">\n          <g3w-search></g3w-search>\n        </sidebar-item>\n        <sidebar-item data-icon="fa fa-database" data-label="catalog" data-type="inline">\n          <g3w-catalog></g3w-catalog>\n        </sidebar-item>\n        <sidebar-item data-icon="fa fa-gears" data-label="tools" data-type="inline">\n          <g3w-tools></g3w-tools>\n        </sidebar-item>\n	  </ul>\n	</section>\n	<!-- /.sidebar -->\n</aside>\n'},{}],12:[function(e,t,n){var i=e("i18n.service");e("g3w/gui/catalog/catalog"),e("g3w/gui/search/search"),e("g3w/gui/plugins/plugins");var a=e("g3w/core/pluginsregistry"),r=e("g3w/core/pluginsservice");Vue.component("sidebar",{template:e("./sidebar.html"),props:["iface"],data:function(){return{layersService:this.iface.layersService,bOpen:!0,bPageMode:!1,header:i("main navigation"),activePlugin:r.state}},methods:{activeModule:function(e){return this.currentModule===e?(this.currentModule=void 0,!1):void(this.currentModule=e)}}}),Vue.component("sidebar-item",{props:["data-icon","data-label","data-type"],template:e("./sidebar-item.html"),data:function(){return{main:!0}},methods:{}}),Vue.component("sidebar-tool",{template:e("./sidebar-tool.html"),data:function(){return{store:a.store}},methods:{}})},{"./sidebar-item.html":9,"./sidebar-tool.html":10,"./sidebar.html":11,"g3w/core/pluginsregistry":21,"g3w/core/pluginsservice":22,"g3w/gui/catalog/catalog":28,"g3w/gui/plugins/plugins":45,"g3w/gui/search/search":49,"i18n.service":5}],13:[function(e,t,n){t.exports={it:{translation:{search:"Ricerca",catalog:"Catalogo dati",tools:"Strumenti",tree:"Dati",legend:"Legenda"}}}},{}],14:[function(e,t,n){var i=e("./map/maphelpers");!function(e,i,a){"function"==typeof define&&define.amd?define(a):"object"==typeof n?t.exports=a():i[e]=a()}("g3wol3",this,function(){"use strict";function e(e,t){var n={};for(var i in e)n[i]=e[i];for(var i in t)n[i]=t[i];return n}var t=e({},i);return{helpers:t}})},{"./map/maphelpers":17}],15:[function(e,t,n){var i={};i.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),i.BING={},i.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),i.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),i.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=i},{}],16:[function(e,t,n){var i={};i.TiledWMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},i.WMSLayer=function(e){var t=new ol.layer.Image({name:e.name,opacity:e.opacity||1,source:new ol.source.ImageWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},i.TiledWMSLayer=function(e){var t=new ol.layer.Tile({name:e.name,opacity:1,source:new ol.source.TileWMS({url:e.url,params:{LAYERS:e.layers||"",VERSION:"1.3.0",TRANSPARENT:!0}}),visible:e.visible});return t},t.exports=i},{}],17:[function(e,t,n){BaseLayers=e("../layers/bases");var i={createViewer:function(e){return new a(e)}},a=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1}}).extend([new ol.control.Zoom]),n=new ol.View(e.view),i={controls:t,interactions:ol.interaction.defaults().extend([new ol.interaction.DragRotate]),ol3Logo:!1,view:n};e.id&&(i.target=e.id);var a=new ol.Map(i);this.map=a};a.prototype.updateMap=function(e){},a.prototype.updateView=function(){},a.prototype.getMap=function(){return this.map},a.prototype.setTarget=function(e){this.map.setTarget(e)},a.prototype.setCenter=function(e,t){var n=this.map.getView();n.setCenter(e),n.setZoom(t)},a.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},a.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),n=t.getLength(),i=0;n>i;i++)if(e===t.item(i).get("name"))return t.item(i);return null},a.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&this.map.removeLayer(t)},a.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var n=t.getProperties();1!=n.basemap&&n.visible&&e.push(t)}),e},a.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var n=t.getProperties();1!=n.basemap&&e.push(t)}),e},a.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},a.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),n=this.map.getLayers();n.insertAt(0,t)},t.exports=i},{"../layers/bases":15}],18:[function(e,t,n){function i(e){var t=new a(e);this.getOlLayer=function(){return t.olLayer},this.getLayerId=function(){return t.layerId},this.addLayer=function(e){t.addLayer(e)},this.toggleLayer=function(e){_.forEach(t.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),t.updateLayers()},this.update=function(){t.updateLayers()}}function a(e){this.LAYERTYPE={LAYER:"layer",METALAYER:"metalayer"},this.layerId=e.layerId,this.olLayer=null,this.layers=[];var t={name:this.layerId,url:e.url};this.olLayer=new r.WMSLayer(t)}var r=e("g3w-ol3/src/layers/rasters"),o=a.prototype;o.addLayer=function(e){this.layers.push(e)},o.getVisibleLayers=function(){var e=[];return _.forEach(this.layers,function(t){t.visible&&e.push(t)}),e},o.updateLayers=function(){var e=this.getVisibleLayers();this.olLayer.getSource().updateParams({layers:_.join(_.map(e,"name"),",")})},t.exports=i},{"g3w-ol3/src/layers/rasters":16}],19:[function(e,t,n){function i(){var e=this;this.viewer,this.mapLayers={},this.state={},o.on("projectset",function(){e.viewer||e.setupViewer(),e.setupLayers()}),o.onafter("setLayersVisible",function(t){_.forEach(t,function(t){var n=e.getMapLayerForLayer(t);n.update()})}),this.setupViewer=function(){var e=o.state.extent,t=new ol.proj.Projection({code:"EPSG:"+o.state.crs,extent:e});this.viewer=s.createViewer({view:{projection:t,center:ol.extent.getCenter(o.state.extent),zoom:1}})},this.setupLayers=function(){var t=this.traverseLayersTree(o.state.layerstree);t.forEach(function(t){if(!_.get(t,"nodes")){var n="layer_"+t.metalayer,i=_.get(e.mapLayers,n);i||(url=o.getWmsUrl(),i=e.mapLayers[n]=new l({id:n,url:url}),e.viewer.map.addLayer(i.getOlLayer())),i.addLayer(t)}}),_.forEach(this.mapLayers,function(e){e.update()})},this.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.metalayer]},this.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,i){_.isNil(e.id)||n.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var n=[];return t(e),n},this.showViewer=function(e){this.viewer.setTarget(e)}}var a=e("./utils").inherit,r=(e("./utils").deferredValue,e("./stateprovider")),o=(e("./projectsregistry"),e("./projectservice")),s=e("g3w-ol3/src/g3w.ol3").helpers,l=e("./maplayer");a(o,r),t.exports=new i},{"./maplayer":18,"./projectservice":23,"./projectsregistry":24,"./stateprovider":25,"./utils":26,"g3w-ol3/src/g3w.ol3":14}],20:[function(e,t,n){var i=[{name:"info",active:!0},{name:"editor",active:!0}];t.exports=i},{}],21:[function(e,t,n){function i(){var e=this;this.state=o.state,this.init=function(t){return o.init(t).then(function(){e.emit("loaded")})},this.addPlugin=function(e){o.addPlugin(e)},this.getPlugin=function(e){return o.getPlugin(e)},this.removePlugin=function(e){return o.removePlugin(e)}}var a=e("./utils").inherit,r=e("./pluginsservice");a(i,EventEmitter);var o={initialized:!1,ctx:null,config:null,testing:!0,state:{plugins:[]},init:function(e){return this.initialized?void 0:this.setupState()},setupState:function(){var e=this,t=this.getPluginsFullConfig();return t.then(function(t){t.forEach(function(t){t.active&&e.state.plugins.push(t)})})},setActivePlugin:function(e){var t=this.getProject(e);if(!t){var n=$.Deferred();return n.reject("Plugin doesn't exist")}r.setActivePlugin(t)},removePlugin:function(e){var t,n=this.getPlugin(e);n&&(t=r.getActivePlugin(e),t==n.name&&r.setActivePlugin(""),_.pull(this.state.plugins,n))},getPlugin:function(e){var t=null;return this.state.plugins.forEach(function(n){t.name==e&&(t=t)}),t},getPluginsFullConfig:function(){var t=$.Deferred();return this.testing&&setTimeout(function(){var n;n=e("./plugins_test_configurations"),t.resolve(n)},100),t.promise()}};t.exports=new i},{"./plugins_test_configurations":20,"./pluginsservice":22,"./utils":26}],22:[function(e,t,n){function i(){this.state={activePlugin:"",activePanel:{}},this.setActivePlugin=function(e){this.state.activePlugin=e},this.getActivePlugin=function(){return this.state.activePlugin},this.setActivePanel=function(e){this.state.activePanel=new e},this.getActivePanel=function(){return this.state.activePanel}}var a=e("./utils").inherit;a(i,EventEmitter),t.exports=new i},{"./utils":26}],23:[function(e,t,n){function i(){var e=this;this.ctx=null,this.layers={},this.state={layerstree:[]},this.init=function(e){this.ctx=e},this.makeLayersObj=function(t){function n(t){_.forIn(t,function(t,i){_.isNil(t.id)||(e.layers[t.id]=t),_.isNil(t.nodes)||n(t.nodes)})}n(t)},this.setProject=function(e){this.state=e,this.makeLayersObj(e.layerstree),this.emit("projectset")};var t={setLayersVisible:function(t,n){_.forEach(t,function(t){e.layers[t.id].visible=n})}};this.initSetters(t),this.getLayer=function(e){return this.layers[e]},this.toggleLayer=function(t,n){var n=n||!t.visible;e.setLayersVisible([t],n)},this.toggleLayers=function(t,n){e.setLayersVisible(t,n)},this.getWmsUrl=function(){return this.ctx.getWmsUrl(this.state)},this.getLegendUrl=function(e){var t=this.getWmsUrl(this.state)+"?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&FORMAT=image/png&LAYER="+e.name;return t}}var a=e("./utils").inherit,r=e("./stateprovider");a(i,r),t.exports=new i},{"./stateprovider":25,"./utils":26}],24:[function(e,t,n){function i(){var e=this;this.state=l.state,this.init=function(t){return l.init(t).then(function(){e.emit("loaded")})},this.addProject=function(e){l.addProject(e)},this.getProject=function(e){return l.getProject(e)},this.getCurrentProject=function(){return this.getProject(l.currentProject.gid)},this.setCurrentProject=function(e){l.setCurrentProject(e)}}var a=e("./utils").inherit,r=e("./utils").resolvedValue,o=e("./utils").rejectedValue,s=e("./projectservice");a(i,EventEmitter);var l={ctx:null,initialized:!1,state:{baseLayers:{},minScale:null,maxscale:null,projects:[]},init:function(e){return this.initialized?void 0:(this.ctx=e,this.setupState(),s.init(e),this.setCurrentProject(e.initproject))},setupState:function(){var e=this;e.state.baseLayers=e.ctx.baselayers,e.state.minScale=e.ctx.minscale,e.state.maxScale=e.ctx.maxscale,e.state.crs=e.ctx.crs,e.ctx.projects.forEach(function(t){t.baseLayers=e.ctx.baselayers,t.minScale=e.ctx.minscale,t.maxScale=e.ctx.maxscale,t.crs=e.ctx.crs,e.state.projects.push(t)})},setCurrentProject:function(e){var t=this,n=this.getProject(e);if(!n)return o("Project doesn't exist");var i=!_.isNil(n.layers);return i?(s.setProject(n),r(n)):this.getProjectFullConfig(n).then(function(e){n=_.merge(n,e),t.buildProjectTree(n),s.setProject(n)})},buildProjectTree:function(e){function t(e){_.forIn(e,function(i,a){if(!_.isNil(i.id)){var r=_.merge(i,n[i.id]);e[parseInt(a)]=r}_.isNil(i.nodes)||(i.title=i.name,t(i.nodes))})}var n=_.keyBy(e.layers,"id"),i=_.cloneDeep(e.layerstree);t(i),e.layerstree=i},getProject:function(e){var t=null;return this.state.projects.forEach(function(n){n.gid==e&&(t=n)}),t},getProjectFullConfig:function(e){var t=$.Deferred(),n=this.ctx.getProjectConfigUrl(e);return $.get(n).done(function(e){t.resolve(e)}),t.promise()}};t.exports=new i},{"./projectservice":23,"./utils":26}],25:[function(e,t,n){function i(){}var a=e("./utils").inherit;a(i,EventEmitter);var r=i.prototype;r.stateSet=function(e,t){var n=_.get(this.state,e,null);if(n){var i=this.getPathKey(e),a=this.getsettersListeners(),r=a[i],o=!0;_.forEach(r,function(e,i){o&=e.apply(this,[t,n])}),o&&(console.log("Setting: "+e+"="+t),_.set(this.state,e,t))}},r.onafter=function(e,t){this.onsetter("after",e,t)},r.onbefore=function(e,t){this.onsetter("before",e,t)},r.onsetter=function(e,t,n){var i=this.settersListeners[e];_.isUndefined(i[t])&&(i[t]={});var a=""+Math.floor(1e6*Math.random())+Date.now();return i[t][a]=n,this.generateUnListener(t,a)},r.generateUnListener=function(e,t,n){return function(){e[t][n]=null,delete e[t][n]}},r.initSetters=function(e){var t=this;this.settersListeners={after:{},before:{}},this.setters=e,_.forEach(e,function(e,n){t[n]=function(){var i=arguments,a=this.settersListeners.before[n],r=!0;if(_.forEach(a,function(e,t){var n=e.apply(this,i);_.isNil(n)||(r&=n)}),r){e.apply(t,i);var o=this.settersListeners.after[n];_.forEach(o,function(e,t){e.apply(this,i)}),t.emit("stateChanged")}}})},t.exports=i},{"./utils":26}],26:[function(e,t,n){var i={inherit:function(e,t,n){var a=e.prototype=i.createObject(t.prototype);a.constructor=e,(n||"undefined"==typeof n)&&(e._super=t.prototype)},createObject:Object.create||function(e){var t=function(){};return t.prototype=e,new t},mixin:function(e,t){return i.merge(e.prototype,t)},mixininstance:function(e,t){var n=new t;i.merge(e,n),i.merge(e.prototype,t.prototype)},merge:function(e,t){var n;for(n in t)i.hasOwn(t,n)&&(e[n]=t[n])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},resolvedValue:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},rejectedValue:function(e){var t=$.Deferred();return t.reject(e),t.promise()}};t.exports=i},{}],27:[function(e,t,n){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree"></a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend"></a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tree :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tree>\n        </ul>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],28:[function(e,t,n){var i=(e("i18n.service"),e("g3w/core/projectservice"));Vue.component("g3w-catalog",{template:e("./catalog.html"),data:function(){return{project:i.state}},computed:{layerstree:function(){return this.project.layerstree}},methods:{},ready:function(){}}),Vue.component("tree",{template:e("./tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,
i.toggleLayers(this.layerstree.nodes,this.parentChecked)):i.toggleLayer(this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(n){_.forIn(n,function(n,i){!_.isNil(n.id)&&n.visible&&t.push(n),_.isNil(n.nodes)||e(n.nodes)})}var t=[],n=this.layerstree;return e(n),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return i.getLegendUrl(this.layer)}}})},{"./catalog.html":27,"./legend.html":29,"./legend_item.html":30,"./tree.html":31,"g3w/core/projectservice":23,"i18n.service":5}],29:[function(e,t,n){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],30:[function(e,t,n){t.exports='<div>{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],31:[function(e,t,n){t.exports='<li class="tree-item">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\']" class="fa"></span>\n  <span :class="{bold: isFolder}" @click="toggle">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tree>\n  </ul>\n</li>\n\n\n\n'},{}],32:[function(e,t,n){t.exports='<div id="{{id}}" style="width:100%;height:100%"></div>\n'},{}],33:[function(e,t,n){var i=(e("i18n.service"),e("g3w/core/mapservice"));e("g3w/core/projectservice"),e("g3w-ol3/src/g3w.ol3").helpers;Vue.component("g3w-map",{template:e("./map.html"),props:["id"],ready:function(){i.showViewer(this.$el.id)}})},{"./map.html":32,"g3w-ol3/src/g3w.ol3":14,"g3w/core/mapservice":19,"g3w/core/projectservice":23,"i18n.service":5}],34:[function(e,t,n){t.exports=' <form role="form">\n  <div class="form-group">\n    <label for="email">Email address Editor:</label>\n    <input type="email" class="form-control" id="email">\n  </div>\n  <button type="submit" class="btn btn-default">Submit</button>\n</form>'},{}],35:[function(e,t,n){var i=(e("g3w/core/pluginsservice"),e("g3w/core/pluginsregistry"),e("g3w/gui/plugins/panelmixin")),a=i.extend({template:e("./panel.html")});t.exports=a},{"./panel.html":34,"g3w/core/pluginsregistry":21,"g3w/core/pluginsservice":22,"g3w/gui/plugins/panelmixin":42}],36:[function(e,t,n){t.exports='<div style="color:white;" @click="activeTool(name)" title="{{ name }}">\n {{ name }}\n</div>'},{}],37:[function(e,t,n){var i=e("g3w/gui/plugins/pluginmixin"),a=i.extend({template:e("./plugin.html"),data:function(){return{name:"editor"}}});t.exports=a},{"./plugin.html":36,"g3w/gui/plugins/pluginmixin":43}],38:[function(e,t,n){t.exports=' <form role="form">\n  <div class="form-group">\n    <label for="email">Email address:</label>\n    <input type="email" class="form-control" id="email">\n  </div>\n  <div class="form-group">\n    <label for="pwd">Password:</label>\n    <input type="password" class="form-control" id="pwd">\n  </div>\n  <div class="checkbox">\n    <label><input type="checkbox"> Remember me</label>\n  </div>\n  <button type="submit" class="btn btn-default">Submit</button>\n</form>'},{}],39:[function(e,t,n){arguments[4][35][0].apply(n,arguments)},{"./panel.html":38,dup:35,"g3w/core/pluginsregistry":21,"g3w/core/pluginsservice":22,"g3w/gui/plugins/panelmixin":42}],40:[function(e,t,n){t.exports='<div style="color:white;" @click="activePlugin(name)"  title="{{ name }}">\n {{ name }}\n</div>'},{}],41:[function(e,t,n){var i=e("g3w/gui/plugins/pluginmixin"),a=i.extend({template:e("./plugin.html"),data:function(){return{name:"info"}}});t.exports=a},{"./plugin.html":40,"g3w/gui/plugins/pluginmixin":43}],42:[function(e,t,n){var i=e("g3w/core/pluginsservice"),a=(e("g3w/core/pluginsregistry"),Vue.extend({data:function(){return{state:i.state}}}));t.exports=a},{"g3w/core/pluginsregistry":21,"g3w/core/pluginsservice":22}],43:[function(e,t,n){var i=(e("i18n.service"),e("g3w/core/pluginsservice")),a=e("./pluginsmodules"),r=Vue.extend({methods:{activePlugin:function(e){console.log(a),i.setActivePlugin(e);var t=a.getPluginPanel(e);t=new t,t.$mount().$appendTo("#g3w-panel"),i.setActivePanel(t)}}});t.exports=r},{"./pluginsmodules":46,"g3w/core/pluginsservice":22,"i18n.service":5}],44:[function(e,t,n){t.exports='<div id="tools">\n</div>'},{}],45:[function(e,t,n){var i=e("g3w/core/pluginsregistry"),a=e("./pluginsmodules"),r=e("g3w/core/pluginsservice");Vue.component("g3w-tools-panel",{template:e("./tools-panel.html"),data:function(){return{state:r.state}},methods:{showSidebar:function(){r.setActivePlugin("");var e=r.getActivePanel();e.$remove(),r.setActivePanel({})}}}),Vue.component("g3w-tools",{template:e("./plugins.html"),data:function(){return{state:i.state}},ready:function(){var e;this.state.plugins.forEach(function(t){e=a.getPluginModule(t.name),e=new e,e.$mount().$appendTo("#tools")})}})},{"./plugins.html":44,"./pluginsmodules":46,"./tools-panel.html":47,"g3w/core/pluginsregistry":21,"g3w/core/pluginsservice":22}],46:[function(e,t,n){var i={modules:[{name:"info",pluginModule:e("g3w/gui/plugins/info/plugin"),panelModule:e("g3w/gui/plugins/info/panel")},{name:"editor",pluginModule:e("g3w/gui/plugins/editor/plugin"),panelModule:e("g3w/gui/plugins/editor/panel")}],getPluginModule:function(e){var t=!1;return this.modules.forEach(function(n){e==n.name&&(t=n.pluginModule)}),t},getPluginPanel:function(e){var t=!1;return this.modules.forEach(function(n){e==n.name&&(t=n.panelModule)}),t}};t.exports=i},{"g3w/gui/plugins/editor/panel":35,"g3w/gui/plugins/editor/plugin":37,"g3w/gui/plugins/info/panel":39,"g3w/gui/plugins/info/plugin":41}],47:[function(e,t,n){t.exports='<div>\n  <header v-if="state.activePlugin != \'\'">\n    <button @click="showSidebar" type="button" class="btn btn-primary">Back</button>\n  </header>\n  <div style="color:#ffffff" id="g3w-panel"></div>\n</div>'},{}],48:[function(e,t,n){t.exports='<li>\n<form role="form">\n  <div class="box-body">\n    <div class="form-group">\n      <label for="exampleInputEmail1" style="color: white">Email address</label>\n      <input type="email" class="form-control" id="exampleInputEmail1" placeholder="">\n    </div>\n    <div class="form-group">\n      <button type="button" class="btn btn-primary">Ciao</button>\n    </div>\n  </div>\n</form>\n</li>'},{}],49:[function(e,t,n){e("i18n.service");Vue.component("g3w-search",{template:e("./search.html"),data:function(){return{}},methods:{}})},{"./search.html":48,"i18n.service":5}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
