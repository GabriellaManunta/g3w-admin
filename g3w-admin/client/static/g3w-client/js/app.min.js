(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var apptitle = "G3W Client";

var plugins = {
};

var tools = {
  tools:  []
};

var i18n = {
  resources: require('./locales/app.js')
};

var client =  {
  debug:  true,
  local:  false
};

var server =  {
  urls:  {
    ows:  '/ows',
    api:  '/api',
    initconfig:  '/api/initconfig',
    config:  '/api/config',
    staticurl:  '',
  }
};

/*var templates =  {
  app:  require('../templates/app.html'),
  sidebar:  require('../templates/sidebar.html'),
  floatbar:  require('../templates/floatbar.html'),
};*/

module.exports = {
  apptitle: apptitle,
  client: client,
  server: server,
  plugins:  plugins,
  tools:  tools,
  i18n: i18n
};

},{"./locales/app.js":2}],2:[function(require,module,exports){
var translations = {
    "it": {
        "translation": {
            "component": "Componente Generico",
            "search": "Ricerca",
            "dosearch": "Cerca",
            "catalog": "Mappa",
            "baselayers": "Basi",
            "tools": "Strumenti",
            "tree": "Strati",
            "legend": "Legenda",
            "street_search": "Cerca indirizzo",
            "show": "Mostra",
            "hide": "Nascondi",
            "street_search": "Cerca indirizzo",
            "copy_form_data": "Copia i dati del modulo",
            "paste_form_data": "Incolla",
            "copy_form_data_from_feature": "Copia i dati dalla mappa"
        }
    }
};

module.exports = translations;

},{}],3:[function(require,module,exports){
var i18ninit = require('sdk').core.i18n.init;
var ApplicationService = require('sdk/sdk').core.ApplicationService;
var ApplicationTemplate = require('./template/js/template');

// SETTO LA VARIABILE GLOBALE g3wsdk, COME SE AVESSI USATO sdk.js
window.g3wsdk = require('sdk');

var config = require('./config/config.js');

// funzione temporanea che aggiunge il plugin (configurazioni) per caricare
// il plugin geonodes con il layer accessi
function aggiungiGeonodesPlugin(plugins) {

  var pluginGeonodeObj = _.cloneDeep(plugins.iternet);
  plugins.geonotes = pluginGeonodeObj;
  return plugins;
}

function createApplicationConfig() {
  //aggiungo temporaneamente il plugin Geodotes
  aggiungiGeonodesPlugin(config.group.plugins);
  return {
    apptitle: config.apptitle || '',
    logo_img: config.group.header_logo_img,
    logo_link: config.group.header_logo_link,
    terms_of_use_text: config.group.header_terms_of_use_text,
    terms_of_use_link: config.group.terms_of_use_link,
    debug: config.client.debug || false,
    group: config.group,
    urls: config.server.urls,
    mediaurl: config.server.urls.mediaurl,
    resourcesurl: config.server.urls.staticurl,
    projects: config.group.projects,
    initproject: config.group.initproject,
    overviewproject: config.group.overviewproject,
    baselayers: config.group.baselayers,
    mapcontrols: config.group.mapcontrols,
    background_color: config.group.background_color,
    crs: config.group.crs,
    proj4: config.group.proj4,
    minscale: config.group.minscale,
    maxscale: config.group.maxscale,
    // richiesto da ProjectService
    getWmsUrl: function(project){
      return config.server.urls.ows+'/'+config.group.id+'/'+project.type+'/'+project.id;
    },
    // richiesto da ProjectsRegistry
    getProjectConfigUrl: function(project){
      return config.server.urls.config+'/'+config.group.id+'/'+project.type+'/'+project.id;
    },
    plugins: config.group.plugins,
    tools: config.tools,
    views: config.views || {}
  };
};

// questa è la configurazione base del template che conterrà tutti gli
// elementi previsti dal template. Nella definizione sono tutti oggetti vuoti
// Sarà l'applicazione a scegliere di riempire gli elementi
function createTemplateConfig(){
  var CatalogComponent = require('sdk').gui.vue.CatalogComponent;
  var SearchComponent = require('sdk').gui.vue.SearchComponent;
  var ToolsComponent = require('sdk').gui.vue.ToolsComponent;
  var MapComponent = require('sdk').gui.vue.MapComponent;
  var ContentsComponent = require('./template/js/contents');
  //al momento si utilizza quesllo quenerico ma si potrebbe costruire un componente
  //ad hoc per i risultati
  var QueryResultsComponent = require('sdk').gui.vue.QueryResultsComponent;
  
  return {
    title: config.apptitle,
    placeholders: {
      navbar: {
        components: []
      },
      sidebar: {
        components: [
          new SearchComponent({
            id: 'search',
            open: false,
            icon: "fa fa-search"
          }),
          new CatalogComponent({
            id: 'catalog',
            open: true,
            icon: "fa fa-database"
          }),
          new ToolsComponent({
            id: 'tools',
            open: false,
            icon: "fa fa-gear"
          })
        ]
      },
      viewport: { // placeholder del contenuto (view content) inizialmente Vista Secondaria (nascosta)
        components: [
          new MapComponent({
            id: 'map'
          }),
          new ContentsComponent({
            id: 'contents'
          })
        ]
      }, 
      floatbar:{
        components: []
      }
    },
    othercomponents: [
      new QueryResultsComponent({
          id: 'queryresults'
      })
    ]
  };
}

function obtainInitConfig(initConfigUrl) {

  var d = $.Deferred();
  //se esiste un oggetto globale initiConfig
  //risolvo con quell'oggetto
  if (window.initConfig) {
    return d.resolve(window.initConfig);
  }
  // altrimenti devo prenderlo dal server usando il percorso indicato in ?project=<percorso>
  else{
    var projectPath;
    var queryTuples = location.search.substring(1).split('&');
    _.forEach(queryTuples, function(queryTuple) {
      //se esiste la parola project nel url
      if (queryTuple.indexOf("project") > -1) {
        //prendo il valore del path progetto (nomeprogetto/tipoprogetto/idprogetto)
        //esempio comune-di-capannori/qdjango/22/
        projectPath = queryTuple.split("=")[1];
      }
    });
    if (projectPath){
      var initUrl = initConfigUrl+'/'+projectPath;
      //recupro dal server la configurazione di quel progetto
      $.get(initUrl, function(initConfig) {
        //initConfig è l'oggetto contenete:
        //group, mediaurl, staticurl, user
        initConfig.staticurl = "../build/"; // in locale forziamo il path degli asset
        d.resolve(initConfig);
      })
    }
  }
  return d.promise();
}

ApplicationService.on('ready',function(){
  //istanzio l'appication template passando la configurazione del template e l'applicationService che fornisce API del progetto
  var templateConfig = createTemplateConfig();
  //istanzio l'application Template
  applicationTemplate = new ApplicationTemplate(templateConfig, this);
  applicationTemplate.on('ready',function(){
    ApplicationService.postBootstrap();
  })
  //inizializzo e faccio partire con il metodo init
  applicationTemplate.init();
});

bootstrap = function(){
  i18ninit(config.i18n);
  obtainInitConfig(config.server.urls.initconfig)
  .then(function(initConfig) {
    config.server.urls.staticurl = initConfig.staticurl;
    config.server.urls.mediaurl = initConfig.mediaurl;
    config.group = initConfig.group;
    var applicationConfig = createApplicationConfig();
    ApplicationService.init(applicationConfig, true); // lancio manualmente il postBootstrp
  })
}();



},{"./config/config.js":1,"./template/js/contents":12,"./template/js/template":16,"sdk":97,"sdk/sdk":97}],4:[function(require,module,exports){
module.exports = "<div class=\"wrapper\">\n  <header class=\"main-header\">\n    <!-- Logo -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class=\"navbar navbar-static-top\" role=\"navigation\">\n      <!-- Toggle button on navbar only for mobile -->\n      <a v-if=\"isMobile()\" href=\"#\" class=\"sidebar-toggle\" data-toggle=\"offcanvas\" role=\"button\">\n        <span class=\"sr-only\">Expand</span>\n      </a>\n      <div class=\"logo-wrapper\">\n        <a v-if=\"logo_url\" :href=\"logo_link\" :target=\"logo_link_target\" class=\"\"><img :src=\"logo_url\" style=\"height:40px\"></a>\n        <span class=\"\">{{project_title}}</span>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  <sidebar></sidebar>\n  <!-- Content Wrapper. Contains page content -->\n  <div class=\"content-wrapper\" style=\"background-color:white\">\n    <viewport></viewport>\n  </div>\n  <!-- /.content-wrapper -->\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar's background. This div must be placed\n       immediately after the control sidebar -->\n  <div class=\"control-sidebar-bg\"></div>\n</div>\n";

},{}],5:[function(require,module,exports){
module.exports = "<div id=\"contents\"></div>\n";

},{}],6:[function(require,module,exports){
module.exports = "<aside class=\"control-sidebar control-sidebar-light\" >\n  <a v-show=\"panelsinstack\" href=\"#\" class=\"floatbar-aside-toggle\" data-toggle=\"control-sidebar\" role=\"button\">\n    <span class=\"sr-only\">Expand</span>\n  </a>\n  <div id=\"floatbar-spinner\" style=\"position:absolute\"></div>\n  <div v-show=\"panelsinstack\" class=\"g3w-sidebarpanel\">\n    <div v-if=\"closable\" class=\"row\">\n      <div class=\"col-xs-12 col-sm-12 col-md-12\">\n        <button class=\"glyphicon glyphicon-remove pull-right close-panel-button\" @click=\"closePanel\"></button>\n      </div>\n    </div>\n    <div v-if=\"panelname\">\n      <h4 class=\"g3w-floatbarpanel-name\">{{ panelname }}</h4>\n    </div>\n    <div id=\"g3w-floatbarpanel-placeholder\" class=\"g3w-floatbarpanel-placeholder\"></div>\n  </div>\n</aside>\n";

},{}],7:[function(require,module,exports){
module.exports = "<li v-show=\"state.visible\" class=\"treeview\" :class=\"{'active': open}\">\n  <a href=\"#\">\n    <i :class=\"icon\"></i>\n    <span class=\"treeview-label\">{{title | t}}</span>\n    <i v-if=\"(dataType === 'inline')\" class=\"fa fa-angle-left pull-right\"></i>\n  </a>\n  <ul v-if=\"(dataType === 'inline')\" class=\"treeview-menu\">\n    <div id=\"g3w-sidebarcomponent-placeholder\"></div>\n  </ul>\n</li>\n";

},{}],8:[function(require,module,exports){
module.exports = "<aside class=\"main-sidebar\">\n  <!-- sidebar: style can be found in sidebar.less -->\n  <!-- Sidebar toggle button-->\n  <!-- Toggle button on the left side of main sidebar only if not mobile -->\n  <a v-if=\"!isMobile()\" href=\"#\" class=\"sidebar-aside-toggle\" data-toggle=\"offcanvas\" role=\"button\">\n    <span class=\"sr-only\">Expand</span>\n  </a>\n  <!--<div class=\"quick-actions-menu\">\n    <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-share-alt\"></button>\n    <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-modal-window\"></button>\n    <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-print\"></button>\n    <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-search\"></button>\n  </div>-->\n\t<section class=\"sidebar\">\n    <div v-show=\"panelsinstack\" class=\"g3w-sidebarpanel\">\n      <div style=\"overflow: hidden;line-height: 14px;margin-top: 4px; font-size:1.5em\">\n          <button class=\"glyphicon glyphicon-remove pull-right close-panel-button\" @click=\"closePanel\"></button>\n      </div>\n      <div id=\"g3w-sidebarpanel-placeholder\" class=\"g3w-sidebarpanel-placeholder\"></div>\n    </div>\n\t  <ul id=\"g3w-sidebarcomponents\" v-show=\"showmainpanel\" class=\"sidebar-menu\"></ul>\n\t</section>\n\t<!-- /.sidebar -->\n</aside>\n";

},{}],9:[function(require,module,exports){
module.exports = "<div class=\"g3w-viewport\">\n  <div id=\"g3w-view-one\" class=\"g3w-view one\" :style=\"{width:state.viewSizes.one.width+'px',height:state.viewSizes.one.height+'px'}\"></div>\n  <div id=\"g3w-view-two\" class=\"g3w-view two\" :style=\"{width:state.viewSizes.two.width+'px',height:state.viewSizes.two.height+'px'}\"></div>\n</div>\n";

},{}],10:[function(require,module,exports){
var ApplicationService = require('core/applicationservice');
var ProjectsRegistry = require('core/project/projectsregistry');
var layout = require('./layout');
var AppUI = Vue.extend({
  template: require('../html/app.html'),
  ready: function(){
    /* start to render LayoutManager layout */
    layout.loading(false);
    layout.setup();
    //Fix the problem with right sidebar and layout boxed
    layout.pushMenu.expandOnHover();
    layout.controlSidebar._fix($(".control-sidebar-bg"));
    layout.controlSidebar._fix($(".control-sidebar"));
    var controlsidebarEl = layout.options.controlSidebarOptions.selector;
    function setFloatBarMaxHeight(){
      $(controlsidebarEl).css('max-height',$(window).innerHeight());
      $('.g3w-sidebarpanel').css('height',$(window).height() - $(".main-header").height());
    }
    setFloatBarMaxHeight();
    function setModalHeight(){
      $('#g3w-modal-overlay').css('height',$(window).height());
    }
    $(window).resize(function() {
      setFloatBarMaxHeight();
      setModalHeight();
    });
   },
   computed: {
    logo_url: function() {
      var config = ApplicationService.getConfig();
      var logo_url;
      if (config.logo_img && config.logo_img!='') {
        logo_url = config.mediaurl+config.logo_img;
      }
      return logo_url;
    },
    logo_link: function() {
      var logo_link = this.getLogoLink();
      return logo_link ? logo_link : "#";
    },
    logo_link_target: function() {
      var logo_link = this.getLogoLink();
      return logo_link ? "_blank" : "";
    },
    project_title: function() {
      var currentProject = ProjectsRegistry.getCurrentProject();
      return currentProject.state.name;
    }
   },
   methods: {
      closePanel: function(){
        sidebarService.closePanel();
      },
      isMobile: function(){return isMobile.any},
      getLogoLink: function() {
        var logo_link = null;
        if (ApplicationService.getConfig().logo_link) {
          logo_link = ApplicationService.getConfig().logo_link;
        }
        return logo_link;
      }
    },
});

module.exports = AppUI;

},{"../html/app.html":4,"./layout":14,"core/applicationservice":19,"core/project/projectsregistry":45}],11:[function(require,module,exports){
var inherit = require('sdk/core/utils/utils').inherit;
var G3WObject = require('sdk/core/g3wobject');

function BarStack(){
  this.state = {
    panels: []
  }
  /*this.state = {
    panels: []
  };*/
}

inherit(BarStack,G3WObject);

var proto = BarStack.prototype;

proto.push = function(panel, parent, append){
  var self = this;
  var append = append || false;
  this.remove(panel); // nel caso esista già prima lo rimuovo
  panel.mount(parent, append)
  .then(function(){
    $(parent).localize();
    self.state.panels.push(panel);
  });
};

proto.pop = function(){
  // qui potremo chiedere al pannello se può essere chiuso...
  var self = this;
  if (this.state.panels.length) {
    var panel = this.state.panels.slice(-1)[0];
    panel.unmount()
    .then(function(){
      //self.state.panels.pop();
      self.state.panels.pop();
    });
  }
};

proto.remove = function(panel) {
  var self = this;
  var idxToRemove = null;
  var id = panel.getId();
  _.forEach(this.state.panels, function(_panel,idx) {
    if (_panel.getId() == id) {
      idxToRemove = idx;
    };
  });
  if (!_.isNull(idxToRemove)) {
    var _panel = self.state.panels[idxToRemove];
    _panel.unmount()
    .then(function() {
      self.state.panels.splice(idxToRemove,1);
    });
  }
};

proto.getLength = function() {
  return this.state.panels.length;
};

module.exports = BarStack;

},{"sdk/core/g3wobject":31,"sdk/core/utils/utils":52}],12:[function(require,module,exports){
var t = require('core/i18n/i18n.service').t;
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var merge = require('core/utils/utils').merge;
var Component = require('gui/vue/component');

var InternalComponent = Vue.extend({
    template: require('../html/contents.html'),
    data: function() {
      return {
        state: null
      }
    },
});

function ContentsComponent(options){
  base(this,options);
  var self = this;
  this._service = this;
  this.id = "contents";
  this.title = "contents";
  this.state.visible = true;
  
  this._content = null;
  
  merge(this, options);
  this.internalComponent = new InternalComponent({
    service: this
  });
  this.internalComponent.state = this.state;
};
inherit(ContentsComponent, Component);

var proto = ContentsComponent.prototype;

proto.setContent = function(content) {
  if (this._content) {
    this.removeContent();
  }
  if (content instanceof jQuery) {
    this._setDOMContent(content[0]);
  }
  else if (content instanceof Component) {
    this._setVueContent(content);
  }
  else if (_.isString(content)) {
    this._setDOMContent($(content)[0]);
  }
  else {
    this._setDOMContent(content);
  }
};

proto.removeContent = function(content) {
  if(this._content instanceof Component) {
    this._content.unmount();
  }
  else {
    $(this.internalComponent.$el).empty();
  }
};

proto._setDOMContent = function(content) {
  this.internalComponent.$el.appendChild(content);
  this._content = content;
};
proto._setVueContent = function(component) {
  var self = this;
  component.mount(this.internalComponent.$el).
  then(function(){
    self._content = component;
  });
};

module.exports = ContentsComponent;

},{"../html/contents.html":5,"core/i18n/i18n.service":34,"core/utils/utils":52,"gui/vue/component":95}],13:[function(require,module,exports){
var t = require('sdk/core/i18n/i18n.service').t;
var Stack = require('./barstack.js');
var GUI = require('sdk/gui/gui');

function FloatbarService(){
  this.stack = new Stack();
  this.init = function(layout){
    this.layout = layout;
    this.closable = true;
    this.sidebarEl = $(this.layout.options.controlSidebarOptions.selector);
    this._zindex = this.sidebarEl.css("z-index");
    this._modalOverlay = null;
    this._modal = false;
    this._isopen = false;
  };

  this.isOpen = function() {
    return this._isopen;
  };

  this.open = function() {
    this.layout.floatBar.open(this.sidebarEl,true);
    this._isopen = true;
  };

  this.close = function() {
    this.layout.floatBar.close(this.sidebarEl,true);
    this._isopen = false;
  };

  this.showPanel = function(panel,options){
    var options = options || {};
    var append = options.append || false;
    var modal = options.modal || false;
    this.closable = options.closable || true;
    this.stack.push(panel,"#g3w-floatbarpanel-placeholder", append);
    if (!this._isopen) {
      this.open();
    };
    // TODO: per adesso diabilito il modale
    /*if (modal){
      this._modal = true;
      GUI.setModal();
      this.sidebarEl.css("z-index",5000);
      this.sidebarEl.css("padding-top","0px");
      $('.control-sidebar-bg').css("z-index",4999);
      $('.control-sidebar-bg').toggleClass('control-sidebar-bg-shadow');
    }*/
  };
  
  this.closePanel = function(panel){
    if (panel) {
      this.stack.remove(panel);
    }
    else {
      this.stack.pop();
    }
    if (!this.stack.getLength()) {
      if (this._modal){
        GUI.setModal(false);
        this.close();
        $('.control-sidebar-bg').toggleClass('control-sidebar-bg-shadow');
        this.sidebarEl.css("z-index","");
        this.sidebarEl.css("padding-top","50px");
        $('.control-sidebar-bg').css("z-index","");
        this._modal = false;
      }
      else {
        this.close();
      }
    }
  };
  
  this.hidePanel = function(){
    this.close();
  };
}

var floatbarService = new FloatbarService();

var FloatbarComponent = Vue.extend({
    template: require('../html/floatbar.html'),
    data: function() {
    	return {
        stack: floatbarService.stack.state,
      };
    },
    computed: {
      // quanti pannelli sono attivi nello stack
      panelsinstack: function(){
        return this.stack.panels.length>0;
      },
      panelname: function(){
        var name;
        if (this.stack.panels.length){
          name = this.stack.panels.slice(-1)[0].getTitle();
        }
        return name;
      },
      closable: function() {
        return floatbarService.closable;
      }
    },
    watch: {
      // TODO: Brutto, ma è l'unico (per ora) modo flessibile che ho trovato per implementare il concetto di stack... 
      "stack.panels": function(){
        var children = $("#g3w-floatbarpanel-placeholder").children();
        _.forEach(children,function(child,index){
          if (index == children.length-1){
            $(child).show();
          }
          else {
            $(child).hide();
          }
        })
      }
    },
    methods: {
      closePanel: function(){
        floatbarService.closePanel();
      }
    }
});

module.exports = {
  FloatbarService: floatbarService,
  FloatbarComponent: FloatbarComponent
}

},{"../html/floatbar.html":6,"./barstack.js":11,"sdk/core/i18n/i18n.service":34,"sdk/gui/gui":76}],14:[function(require,module,exports){
//Make sure jQuery has been loaded before app.js
if (typeof jQuery === "undefined") {
  throw new Error("LayoutManager requires jQuery");
}

$.LayoutManager = {};

/* --------------------
 * - LayoutManager Options -
 * --------------------
 * Modify these options to suit your implementation
 */
$.LayoutManager.options = {
  //Add slimscroll to navbar menus
  //This requires you to load the slimscroll plugin
  //in every page before app.js
  navbarMenuSlimscroll: true,
  navbarMenuSlimscrollWidth: "0px", //The width of the scroll bar
  navbarMenuHeight: "200px", //The height of the inner menu
  //General animation speed for JS animated elements such as box collapse/expand and
  //sidebar treeview slide up/down. This options accepts an integer as milliseconds,
  //'fast', 'normal', or 'slow'
  animationSpeed:'fast',
  //Sidebar push menu toggle button selector
  sidebarToggleSelector: "[data-toggle='offcanvas']",
  //Activate sidebar push menu
  sidebarPushMenu: true,
  //Activate sidebar slimscroll if the fixed layout is set (requires SlimScroll Plugin)
  sidebarSlimScroll: true,
  //Enable sidebar expand on hover effect for sidebar mini
  //This option is forced to true if both the fixed layout and sidebar mini
  //are used together
  sidebarExpandOnHover: false,
  //BoxRefresh Plugin
  enableBoxRefresh: true,
  //Bootstrap.js tooltip
  enableBSToppltip: true,
  BSTooltipSelector: "[data-toggle='tooltip']",
  //Enable Fast Click. Fastclick.js creates a more
  //native touch experience with touch devices. If you
  //choose to enable the plugin, make sure you load the script
  //before LayoutManager's app.js
  enableFastclick: true,
  //Control Sidebar Options
  enableControlSidebar: true,
  controlSidebarOptions: {
    //Which button should trigger the open/close event
    toggleBtnSelector: "[data-toggle='control-sidebar']",
    //The sidebar selector
    selector: ".control-sidebar",
    //Enable slide over content
    slide: true
  },
  //Box Widget Plugin. Enable this plugin
  //to allow boxes to be collapsed and/or removed
  enableBoxWidget: true,
  //Box Widget plugin options
  boxWidgetOptions: {
    boxWidgetIcons: {
      //Collapse icon
      collapse: 'fa-minus',
      //Open icon
      open: 'fa-plus',
      //Remove icon
      remove: 'fa-times'
    },
    boxWidgetSelectors: {
      //Remove button selector
      remove: '[data-widget="remove"]',
      //Collapse button selector
      collapse: '[data-widget="collapse"]'
    }
  },
  //Direct Chat plugin options
  directChat: {
    //Enable direct chat by default
    enable: true,
    //The button to open and close the chat contacts pane
    contactToggleSelector: '[data-widget="chat-pane-toggle"]'
  },
  //Define the set of colors to use globally around the website
  colors: {
    lightBlue: "#3c8dbc",
    red: "#f56954",
    green: "#00a65a",
    aqua: "#00c0ef",
    yellow: "#f39c12",
    blue: "#0073b7",
    navy: "#001F3F",
    teal: "#39CCCC",
    olive: "#3D9970",
    lime: "#01FF70",
    orange: "#FF851B",
    fuchsia: "#F012BE",
    purple: "#8E24AA",
    maroon: "#D81B60",
    black: "#222222",
    gray: "#d2d6de"
  },
  //The standard screen sizes that bootstrap uses.
  //If you change these in the variables.less file, change
  //them here too.
  screenSizes: {
    xs: 480,
    sm: 768,
    md: 992,
    lg: 1200
  }
};


/* ----------------------------------
 * - Initialize the LayoutManager Object -
 * ----------------------------------
 * All LayoutManager functions are implemented below.
 */
$.LayoutManager._init = function() {
  'use strict';
  /* Layout
   * ======
   * Fixes the layout height in case min-height fails.
   *
   * @type Object
   * @usage $.LayoutManager.layout.activate()
   *        $.LayoutManager.layout.fix()
   *        $.LayoutManager.layout.fixSidebar()
   */
  $.LayoutManager.layout = {
    activate: function () {
      var _this = this;
      _this.fix();
      _this.fixSidebar();
      $(window, ".wrapper").resize(function () {
        _this.fix();
        _this.fixSidebar();
      });
    },
    fix: function () {
      //Get window height and the wrapper height
      var neg = $('.main-header').outerHeight() + $('.main-footer').outerHeight();
      var window_height = $(window).height();
      var sidebar_height = $(".sidebar").height();
      //Set the min-height of the content and sidebar based on the
      //the height of the document.
      if ($("body").hasClass("fixed")) {
        $(".content-wrapper, .right-side").css('min-height', window_height - $('.main-footer').outerHeight());
        $(".content-wrapper, .right-side").css('height', window_height - $('.main-footer').outerHeight());
      } else {
        var postSetWidth;
        if (window_height >= sidebar_height) {
          $(".content-wrapper, .right-side").css('min-height', window_height - neg);
          postSetWidth = window_height - neg;
        } else {
          $(".content-wrapper, .right-side").css('min-height', sidebar_height);
          postSetWidth = sidebar_height;
        }
        //Fix for the control sidebar height
        var controlSidebar = $($.LayoutManager.options.controlSidebarOptions.selector);
        if (typeof controlSidebar !== "undefined") {
          if (controlSidebar.height() > postSetWidth)
            $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
        }

      }
    },
    fixSidebar: function () {
      //Make sure the body tag has the .fixed class
      if (!$("body").hasClass("fixed")) {
        if (typeof $.fn.slimScroll != 'undefined') {
          $(".sidebar").slimScroll({destroy: true}).height("auto");
        }
        return;
      } else if (typeof $.fn.slimScroll == 'undefined' && window.console) {
        window.console.error("Error: the fixed layout requires the slimscroll plugin!");
      }
      //Enable slimscroll for fixed layout
      if ($.LayoutManager.options.sidebarSlimScroll) {
        if (typeof $.fn.slimScroll != 'undefined') {
          //Destroy if it exists
          $(".sidebar").slimScroll({destroy: true}).height("auto");
          //Add slimscroll
          $(".sidebar").slimscroll({
            height: ($(window).height() - $(".main-header").height()) + "px",
            color: "rgba(255,255,255,0.7)",
            size: "3px"
          });
        }
      }
      else {
         $(".sidebar").css({'height': ($(window).height() - $(".main-header").height()) + "px"})
      }
      
      /*$(".sidebar li a").each(function(){
        var $this = $(this);
        var checkElement = $this.next();
        if ((checkElement.is('.treeview-menu')) && (!checkElement.is(':visible'))) {
          //Get the parent menu
          var parent = $this.parents('ul').first();
          var parent_li = $this.parent("li");
          var li_siblings = parent_li.siblings();
          var parent_find_active;
          var sidebar_content_height = parent.height() - parent.find('li.header').outerHeight();
          var treeviewHeight = parent_li.outerHeight();
          li_siblings.not('.header').each(function(index, el) {
                  treeviewHeight+=$(el).find('a').outerHeight();
          });
          var section_height = (sidebar_content_height - treeviewHeight);
          checkElement.css({
            'height': section_height + 'px',
            'max-height':section_height + 'px',
            'overflow-y': 'auto'
          });
        }
      });*/
      
    }
    
  };

  /* PushMenu()
   * ==========
   * Adds the push menu functionality to the sidebar.
   *
   * @type Function
   * @usage: $.LayoutManager.pushMenu("[data-toggle='offcanvas']")
   */
  $.LayoutManager.pushMenu = {
    activate: function (toggleBtn) {
      //Get the screen sizes
      var screenSizes = $.LayoutManager.options.screenSizes;

      //Enable sidebar toggle
      $(toggleBtn).on('click', function (e) {
        e.preventDefault();

        //Enable sidebar push menu
        if ($(window).width() > (screenSizes.sm - 1)) {
          if ($("body").hasClass('sidebar-collapse')) {
            $("body").removeClass('sidebar-collapse').trigger('expanded.pushMenu');
          } else {
            $("body").addClass('sidebar-collapse').trigger('collapsed.pushMenu');
          }
        }
        //Handle sidebar push menu for small screens
        else {
          if ($("body").hasClass('sidebar-open')) {
            $("body").removeClass('sidebar-open').removeClass('sidebar-collapse').trigger('collapsed.pushMenu');
          } else {
            $("body").addClass('sidebar-open').trigger('expanded.pushMenu');
          }
        }
      });

      /*$(".content-wrapper").click(function () {
        //Enable hide menu when clicking on the content-wrapper on small screens
        if ($(window).width() <= (screenSizes.sm - 1) && $("body").hasClass("sidebar-open")) {
          $("body").removeClass('sidebar-open');
        }
      });*/

      //Enable expand on hover for sidebar mini
      if ($.LayoutManager.options.sidebarExpandOnHover || ($('body').hasClass('fixed') && $('body').hasClass('sidebar-mini'))) {
        this.expandOnHover();
      }
    },
    expandOnHover: function () {
      var _this = this;
      var screenWidth = $.LayoutManager.options.screenSizes.sm - 1;
      //Expand sidebar on hover
      $('.main-sidebar').hover(function () {
        if ($('body').hasClass('sidebar-mini') && $("body").hasClass('sidebar-collapse') && $(window).width() > screenWidth) {
          _this.expand();
        }
      }, function () {
        if ($('body').hasClass('sidebar-mini') && $('body').hasClass('sidebar-expanded-on-hover') && $(window).width() > screenWidth) {
          _this.collapse();
        }
      });
    },
    expand: function () {
      $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
    },
    collapse: function () {
      if ($('body').hasClass('sidebar-expanded-on-hover')) {
        $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
      }
    }
  };

  /* Tree()
   * ======
   * Converts the sidebar into a multilevel
   * tree view menu.
   *
   * @type Function
   * @Usage: $.LayoutManager.tree('.sidebar')
   */
  $.LayoutManager.tree = function (menu) {
    var _this = this;
    var animationSpeed = $.LayoutManager.options.animationSpeed;
    //click event //
    $(document).on('click', menu + ' li a', function (e) {

      //Get the clicked link and the next element
      var $this = $(this);
      //is the content of the "accordion" ul //
      var checkElement = $this.next();

      //Check if the next element is a menu and is visible
      if ((checkElement.is('.treeview-menu')) && (checkElement.is(':visible'))) {
        //Close the menu
        checkElement.slideUp(animationSpeed, function () {
          checkElement.parent("li.treeview").removeClass("active");
          checkElement.removeClass('menu-open');
          //Fix the layout in case the sidebar stretches over the height of the window
          //_this.layout.fix();
        });

      }
      //If the menu is not visible
      else if ((checkElement.is('.treeview-menu')) && (!checkElement.is(':visible'))) {
        //Get the parent menu
        var parent = $this.parents('ul').first();
        var parent_li = $this.parent("li");
        var li_siblings = parent_li.siblings();
        var parent_find_active;
        var sidebar_content_height = parent.height() - parent.find('li.header').outerHeight();
        var treeviewHeight = parent_li.outerHeight();
        li_siblings.not('.header').each(function(index, el) {
                treeviewHeight+=$(el).find('a').outerHeight();
        });
        var section_height = (sidebar_content_height - treeviewHeight);
        /*checkElement.css({
          'height': section_height + 'px',
          'max-height':section_height + 'px',
          //'overflow-y': 'auto'
        });*/
        //Close all open menus within the parent
        var ul = parent.find('ul.treeview-menu:visible').slideUp(animationSpeed);
        //Remove the menu-open class from the parent
        ul.removeClass('menu-open');
        //Get the parent li
        //Open the target menu and add the menu-open class
        checkElement.slideDown(animationSpeed, function () {
          //Add the class active to the parent li
          checkElement.addClass('menu-open');
          parent_find_active = parent.find('li.treeview.active');
          parent_find_active.removeClass('active');
          parent_li.addClass('active');
          //Fix the layout in case the sidebar stretches over the height of the window
          _this.layout.fix();
        });
      }
      //if this isn't a link, prevent the page from being redirected
      if (checkElement.is('.treeview-menu')) {
        e.preventDefault();
      }
      
      //$.LayoutManager.layout.fix();
      //$.LayoutManager.layout.fixSidebar();
    });
  };

  /* ControlSidebar
   * ==============
   * Adds functionality to the right sidebar
   *
   * @type Object
   * @usage $.LayoutManager.controlSidebar.activate(options)
   */
  $.LayoutManager.floatBar = $.LayoutManager.controlSidebar = {
    //instantiate the object
    activate: function () {
      //Get the object
      var _this = this;
      //Update options
      var o = $.LayoutManager.options.controlSidebarOptions;
      //Get the sidebar
      var sidebar = $(o.selector);
      //The toggle button
      var btn = $(o.toggleBtnSelector);

      //Listen to the click event
      btn.on('click', function (e) {
        e.preventDefault();
        //If the sidebar is not open
        if (!sidebar.hasClass('control-sidebar-open') && !$('body').hasClass('control-sidebar-open')) {
          //Open the sidebar
          _this.open(sidebar, o.slide);
        } else {
          _this.close(sidebar, o.slide);
        }
      });

      //If the body has a boxed layout, fix the sidebar bg position
      var bg = $(".control-sidebar-bg");
      _this._fix(bg);

      //If the body has a fixed layout, make the control sidebar fixed
      if ($('body').hasClass('fixed')) {
        _this._fixForFixed(sidebar);
      } else {
        //If the content height is less than the sidebar's height, force max height
        if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
          _this._fixForContent(sidebar);
        }
      }
    },
    //Open the control sidebar
    open: function (sidebar, slide) {
      //Slide over content
      if (slide) {
        sidebar.addClass('control-sidebar-open');
      } else {
        //Push the content by adding the open class to the body instead
        //of the sidebar itself
        $('body').addClass('control-sidebar-open');
      }
    },
    //Close the control sidebar
    close: function (sidebar, slide) {
      if (slide) {
        sidebar.removeClass('control-sidebar-open');
      } else {
        $('body').removeClass('control-sidebar-open');
      }
    },
    _fix: function (sidebar) {
      var _this = this;
      if ($("body").hasClass('layout-boxed')) {
        sidebar.css('position', 'absolute');
        sidebar.height($(".wrapper").height());
        $(window).resize(function () {
          _this._fix(sidebar);
        });
      } else {
        sidebar.css({
          'position': 'fixed',
          'height': 'auto'
        });
      }
    },
    _fixForFixed: function (sidebar) {
      sidebar.css({
        'position': 'fixed',
        'max-height': '100%',
        //'overflow': 'auto',  // non dovrebbe fare danni questo commento, serve per non nascondere il pulsanti "Chiudi pannello"
        'padding-bottom': '50px'
      });
    },
    _fixForContent: function (sidebar) {
      $(".content-wrapper, .right-side").css('min-height', sidebar.height());
    }
  };

  /* BoxWidget
   * =========
   * BoxWidget is a plugin to handle collapsing and
   * removing boxes from the screen.
   *
   * @type Object
   * @usage $.LayoutManager.boxWidget.activate()
   *        Set all your options in the main $.LayoutManager.options object
   */
  $.LayoutManager.boxWidget = {
    selectors: $.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,
    icons: $.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,
    animationSpeed: $.LayoutManager.options.animationSpeed,
    activate: function (_box) {
      var _this = this;
      if (!_box) {
        _box = document; // activate all boxes per default
      }
      //Listen for collapse event triggers
      $(_box).on('click', _this.selectors.collapse, function (e) {
        e.preventDefault();
        _this.collapse($(this));
      });

      //Listen for remove event triggers
      $(_box).on('click', _this.selectors.remove, function (e) {
        e.preventDefault();
        _this.remove($(this));
      });
    },
    collapse: function (element) {
      var _this = this;
      //Find the box parent
      var box = element.parents(".box").first();
      //Find the body and the footer
      var box_content = box.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");
      if (!box.hasClass("collapsed-box")) {
        //Convert minus into plus
        element.find(".btn-collapser")
                .removeClass(_this.icons.collapse)
                .addClass(_this.icons.open);
        //Hide the content
        box_content.slideUp(_this.animationSpeed, function () {
          box.addClass("collapsed-box");
        });
      } else {
        //Convert plus into minus
        element.find(".btn-collapser")
                .removeClass(_this.icons.open)
                .addClass(_this.icons.collapse);
        //Show the content
        box_content.slideDown(_this.animationSpeed, function () {
          box.removeClass("collapsed-box");
        });
      }
    },
    remove: function (element) {
      //Find the box parent
      var box = element.parents(".box").first();
      box.slideUp(this.animationSpeed);
    }
  };
  
  return $.LayoutManager;
};

/* ------------------
 * - Custom Plugins -
 * ------------------
 * All custom plugins are defined below.
 */

/*
 * BOX REFRESH BUTTON
 * ------------------
 * This is a custom plugin to use with the component BOX. It allows you to add
 * a refresh button to the box. It converts the box's state to a loading state.
 *
 * @type plugin
 * @usage $("#box-widget").boxRefresh( options );
 */
$.LayoutManager.addRefreshButton = function () {
  "use strict";

  $.fn.boxRefresh = function (options) {

    // Render options
    var settings = $.extend({
      //Refresh button selector
      trigger: ".refresh-btn",
      //File source to be loaded (e.g: ajax/src.php)
      source: "",
      //Callbacks
      onLoadStart: function (box) {
        return box;
      }, //Right after the button has been clicked
      onLoadDone: function (box) {
        return box;
      } //When the source has been loaded

    }, options);

    //The overlay
    var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');

    return this.each(function () {
      //if a source is specified
      if (settings.source === "") {
        if (window.console) {
          window.console.log("Please specify a source first - boxRefresh()");
        }
        return;
      }
      //the box
      var box = $(this);
      //the button
      var rBtn = box.find(settings.trigger).first();

      //On trigger click
      rBtn.on('click', function (e) {
        e.preventDefault();
        //Add loading overlay
        start(box);

        //Perform ajax call
        box.find(".box-body").load(settings.source, function () {
          done(box);
        });
      });
    });

    function start(box) {
      //Add overlay and loading img
      box.append(overlay);

      settings.onLoadStart.call(box);
    }

    function done(box) {
      //Remove overlay and loading img
      box.find(overlay).remove();

      settings.onLoadDone.call(box);
    }

  };
  return $.LayoutManager;
};

/*
 * EXPLICIT BOX ACTIVATION
 * -----------------------
 * This is a custom plugin to use with the component BOX. It allows you to activate
 * a box inserted in the DOM after the app.js was loaded.
 *
 * @type plugin
 * @usage $("#box-widget").activateBox();
 */
$.LayoutManager.activateBox = function () {
  'use strict';

  $.fn.activateBox = function () {
    $.LayoutManager.boxWidget.activate(this);
  };
  
  return $.LayoutManager;
};

/*
 * TODO LIST CUSTOM PLUGIN
 * -----------------------
 * This plugin depends on iCheck plugin for checkbox and radio inputs
 *
 * @type plugin
 * @usage $("#todo-widget").todolist( options );
 */

$.LayoutManager.listCustomPlugin = function () {

	  'use strict';

	  $.fn.todolist = function (options) {
	    // Render options
	    var settings = $.extend({
	      //When the user checks the input
	      onCheck: function (ele) {
	        return ele;
	      },
	      //When the user unchecks the input
	      onUncheck: function (ele) {
	        return ele;
	      }
	    }, options);

	    return this.each(function () {

	      if (typeof $.fn.iCheck != 'undefined') {
	        $('input', this).on('ifChecked', function () {
	          var ele = $(this).parents("li").first();
	          ele.toggleClass("done");
	          settings.onCheck.call(ele);
	        });

	        $('input', this).on('ifUnchecked', function () {
	          var ele = $(this).parents("li").first();
	          ele.toggleClass("done");
	          settings.onUncheck.call(ele);
	        });
	      } else {
	        $('input', this).on('change', function () {
	          var ele = $(this).parents("li").first();
	          ele.toggleClass("done");
	          if ($('input', ele).is(":checked")) {
	            settings.onCheck.call(ele);
	          } else {
	            settings.onUncheck.call(ele);
	          }
	        });
	      }
	    });
	  };
	  return $.LayoutManager;
	};
	
	/* ------------------
	 * - Implementation -
	 * ------------------
	 * The next block of code implements LayoutManager's
	 * functions and plugins as specified by the
	 * options above.
	 */
	$.LayoutManager.setup = function ()
	{
	  "use strict";

	  //Fix for IE page transitions
	  $("body").removeClass("hold-transition");

	  //Extend options if external options exist
	  if (typeof LayoutManagerOptions !== "undefined") {
	    $.extend(true,
	            $.LayoutManager.options,
	            LayoutManagerOptions);
	  }

	  //Easy access to options
	  var o = $.LayoutManager.options;

	  //Set up the object
	  $.LayoutManager._init();

	  //Activate the layout maker
	  $.LayoutManager.layout.activate();

	  //Enable sidebar tree view controls
	  $.LayoutManager.tree('.sidebar');

	  //Enable control sidebar
	  if (o.enableControlSidebar) {
	    $.LayoutManager.controlSidebar.activate();
	  }

	  //Add slimscroll to navbar dropdown
	  if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
	    $(".navbar .menu").slimscroll({
	      height: o.navbarMenuHeight,
	      alwaysVisible: false,
	      size: o.navbarMenuSlimscrollWidth
	    }).css("width", "100%");
	  }

	  //Activate sidebar push menu
	  if (o.sidebarPushMenu) {
	    $.LayoutManager.pushMenu.activate(o.sidebarToggleSelector);
	  }

	  //Activate Bootstrap tooltip
	  if (o.enableBSToppltip) {
	    $('body').tooltip({
	      selector: o.BSTooltipSelector
	    });
	  }

	  //Activate box widget
	  if (o.enableBoxWidget) {
	    $.LayoutManager.boxWidget.activate();
	  }

	  //Activate fast click
	  if (o.enableFastclick && typeof FastClick != 'undefined') {
	    FastClick.attach(document.body);
	  }

	  //Activate direct chat widget
	  if (o.directChat.enable) {
	    $(document).on('click', o.directChat.contactToggleSelector, function () {
	      var box = $(this).parents('.direct-chat').first();
	      box.toggleClass('direct-chat-contacts-open');
	    });
	  }

	  /*
	   * INITIALIZE BUTTON TOGGLE
	   * ------------------------
	   */
	  $('.btn-group[data-toggle="btn-toggle"]').each(function () {
	    var group = $(this);
	    $(this).find(".btn").on('click', function (e) {
	      group.find(".btn.active").removeClass("active");
	      $(this).addClass("active");
	      e.preventDefault();
	    });

	  });
	  
	  return $.LayoutManager
	  	.addRefreshButton()
	  	.activateBox()
	  	.listCustomPlugin();
	};

$.LayoutManager.loading = function(start){
  var start = _.isBoolean(start) ? start : true;
  if (start) {
    $('body').append('<div id="loadspinner" class="loading"></div>');
  }
  else {
    $('#loadspinner').remove();
  }
}

module.exports = $.LayoutManager;

},{}],15:[function(require,module,exports){
var t = require('sdk/core/i18n/i18n.service').t;
var Stack = require('./barstack.js');

//sidebar item che non è altro che un li della sidebar dove sarà possobile impostare
//titolo tipo di icona etc .. customizzata per ogni componente

var SidebarItem = Vue.extend({
  template: require('../html/sidebar-item.html'),
  data: function() {
    return {
        main: true,
        component: null,
        active: false,
        dataType: 'inline',
        title: 'component',
        icon: null,
        open: true,
        state: null
      };
  }
});

function SidebarService(){
  this.stack = new Stack();
  this.state = {
    components: []
  };
  
  this.init = function(layout){
    this.layout = layout;
  };
  
  this.addComponents = function(components){
    var self = this;
    _.forEach(components,function(component){
      self.addComponent(component);
    });
    return true;
  };
  
  this.addComponent = function(component) {
    //aggiungo componente
    this.state.components.push(component);
    //faccio montare il sedebar-item che contiene al suo interno il placeholder del componente vero e proprio
    //in questo modo il componente non si dovrà occupare di costruire anche l'elemento li della sidebar
    //ma conterrà solo il contenuto
    var sidebarItem = new SidebarItem();
    //setto le parti della sidebar-item che cambiano da componente a componente (da rivedere)
    sidebarItem.title = component.title || sidebarItem.title;
    sidebarItem.open = (component.open === undefined) ? sidebarItem.open : component.open;
    sidebarItem.icon = component.dataIcon || sidebarItem.icon;
    sidebarItem.state = component.state || true;
    sidebarItem.$mount().$appendTo('#g3w-sidebarcomponents');
    
    //monto il componete nella sidebar
    component.mount("#g3w-sidebarcomponent-placeholder");
    if (_.has(component, 'initService')) {
      component.initService();
    };
    return true;
  };
  
  this.removeComponent = function(){
    //da vedere
  };

  this.showPanel = function(panel){
    var parent = "#g3w-sidebarpanel-placeholder";
    this.stack.push(panel, parent);
  };

  this.closePanel = function(){
    var panel = this.stack.pop();
  };
}

var sidebarService = new SidebarService();

var SidebarComponent = Vue.extend({
    template: require('../html/sidebar.html'),
    data: function() {
    	return {
        components: sidebarService.state.components,
        panels: sidebarService.stack.state.panels,
        bOpen: true,
    		bPageMode: false,
    		header: t('main navigation'),
        };
    },
    computed: {
      // quanti pannelli sono attivi nello stack
      panelsinstack: function(){
        return this.panels.length>0;
      },
      showmainpanel: function(){
        return this.components.length>0 && !this.panelsinstack;
      },
      componentname: function(){
        var name = "";
        if (this.components.length){
          name = this.components.slice(-1)[0].getTitle();
        }
        return name;
      },
      panelname: function(){
        var name = "";
        if (this.panels.length){
          name = this.panels.slice(-1)[0].getTitle();
        }
        return name;
      }
    },
    methods: {
      closePanel: function(){
        sidebarService.closePanel();
      },
      isMobile: function(){
        return isMobile.any
      }
    },
    ready: function(){
    }
});

module.exports = {
  SidebarService: sidebarService,
  SidebarComponent: SidebarComponent
}

},{"../html/sidebar-item.html":7,"../html/sidebar.html":8,"./barstack.js":11,"sdk/core/i18n/i18n.service":34}],16:[function(require,module,exports){
var t = require('sdk/core/i18n/i18n.service').t;
require('sdk/gui/vue/vue.directives');
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var ComponentsRegistry = require('sdk/gui/componentsregistry');
var GUI = require('sdk/gui/gui');
// temporaneo per far funzionare le cose
var config = {
    client:{}
};

var sidebar = require('./sidebar');
var floatbar = require('./floatbar');
var viewport = require('./viewport');
var AppUI = require('./applicationui');
var layout = require('./layout');

// forse da trovare un posto migliore per attivare lo spinner iniziale...
layout.loading();

var ApplicationTemplate = function(templateConfig, ApplicationService) {
  self = this;
  this.templateConfig = templateConfig;
  this.ApplicationService = ApplicationService;
  
  this.init = function() {
    var config = ApplicationService.getConfig();
    if (config.debug){
      Vue.config.debug = true;
    }
    this._setupInterface();
    this._setupLayout();
  };
  
  this._setupLayout = function(){  
    Vue.filter('t', function (value) {
      return t(value);
    });

    var AppUI = require('./applicationui');

    Vue.component('sidebar', sidebar.SidebarComponent);
    Vue.component('viewport', viewport.ViewportComponent);
    Vue.component('floatbar', floatbar.FloatbarComponent);
    Vue.component('app', AppUI);
    //inizializza l'applicazione Vue
    var template = this;  
    var app = new Vue({
      el: 'body',
      ready: function(){
        self._buildTemplate();
        $(document).localize();
      }
    });
  }
  
  this._buildTemplate = function() {
    var self = this;
    floatbar.FloatbarService.init(layout);
    var placeholdersConfig = this.templateConfig.placeholders;
    _.forEach(placeholdersConfig, function(components, placeholder){
      // per ogni placeholder ci possono essere più componenti ciclo e aggiungo
      self._addComponents(components.components,placeholder);
    });
    //registro altri componenti che non hanno una collocazione spaziale precisa
    // come da esempio i risultati che possono essere montati sulla floatbar o altre parti del template
    this._addOtherComponents();
    this.emit('ready');
    GUI.ready();
  };

  //aggiungere compineti non legati ad un placeholder
  this._addOtherComponents = function() {
    var self = this;
    if (this.templateConfig.othercomponents) {
      self._addComponents(this.templateConfig.othercomponents);
    };
  };
  
  this._addComponent = function(component,placeholder) {
    this._addComponents([component],placeholder);
  };
  
  this._addComponents = function(components,placeholder) {
    var register = true;
    if (placeholder && ApplicationTemplate.PLACEHOLDERS.indexOf(placeholder) > -1){
      var placeholderService = ApplicationTemplate.PlaceholdersServices[placeholder];
      if (placeholderService) {
        register = placeholderService.addComponents(components);
      }
    }
    _.forEach(components,function(component){
      if (register) {
        ComponentsRegistry.registerComponent(component);
      }
    })
  };
  
  this._removeComponent = function(plceholder,componentId) {
    ComponentsRegistry.unregisterComponent(component);
  };
  
  this._showModalOverlay = function(bool){
    /*if (!this._modalOverlay){
      this._modalOverlay = $('<div id="g3w-modal-overlay" style="background-color: #000000; opacity: 0.7;z-index:4000;position:fixed;top:0px;left:0px"></div>');
      $("body").append(this._modalOverlay);
      this._modalOverlay.width($(window).innerWidth());
      this._modalOverlay.height($(window).innerHeight());
    }
    if (_.isUndefined(bool) || bool === true){
      this._modalOverlay.width($(window).innerWidth());
      this._modalOverlay.height($(window).innerHeight());
      this._modalOverlay.show();
    }
    else {
      this._modalOverlay.hide();
    }*/
  };

  this._showSidebar = function() {
    //codice qui
  };
  this._hideSidebar = function() {
    //codice qui
  };
  
  this._setupInterface = function() {
    /* DEFINIZIONE INTERFACCIA PUBBLICA */
    
    /* Metodi comuni a tutti i template */
    GUI.layout = layout;
    GUI.addComponent = _.bind(this._addComponent, this);
    GUI.removeComponent = _.bind(this._removeComponent, this);
    
    /* Metodi da definire (tramite binding) */
    GUI.getResourcesUrl = _.bind(function() {
      return this.ApplicationService.getConfig().resourcesurl;
    },this);
    
    GUI.showForm = _.bind(floatbar.FloatbarService.showPanel,floatbar.FloatbarService);
    GUI.closeForm = _.bind(floatbar.FloatbarService.closePanel,floatbar.FloatbarService);
    GUI.showList = _.bind(floatbar.FloatbarService.showPanel,floatbar.FloatbarService);
    GUI.closeList = _.bind(floatbar.FloatbarService.closePanel,floatbar.FloatbarService);
    GUI.hideList = _.bind(floatbar.FloatbarService.hidePanel,floatbar.FloatbarService);
    
    GUI.showTable = function() {};
    GUI.closeTable = function() {};
    
    // Qui si implementa il metodo per la visualizzazione dei risultati
    // derivanti da una query

    //esempio di metodo generico
    GUI.showResultsFactory = function(type) {
      var showPanelResults;
      switch (type) {
        case 'query':
          GUI.showFloatbar();
          showPanelResults = GUI.showQueryResults;
          break;
      };
      return showPanelResults;
    };

    GUI.showQueryResults = function(title,results) {
      // istanziare il componente queryresults
      var queryResultsComponent = GUI.getComponent('queryresults');
      // passarlo a Floatbar
      var queryResultService = queryResultsComponent.getService();
      queryResultService.reset();
      queryResultService.setTitle(title);
      if (results) {
        queryResultService.setQueryResponse(results);
      }
      //rimuovo spinner
      var options = {append: true};
      floatbar.FloatbarService.showPanel(queryResultsComponent, options);
      return queryResultService;
    };
    
    GUI.hideQueryResults = _.bind(floatbar.FloatbarService.hidePanel,floatbar.FloatbarService);
    //temporaneo show panel
    GUI.showPanel = _.bind(sidebar.SidebarService.showPanel, sidebar.SidebarService);
    GUI.closePanel = _.bind(sidebar.SidebarService.closePanel, sidebar.SidebarService);
    /* ------------------ */

    toastr.options.positionClass = 'toast-top-center';
    toastr.options.preventDuplicates = true;
    // proxy della libreria toastr
    GUI.notify = toastr;
    // proxy della libreria bootbox
    GUI.dialog = bootbox;
    /* spinner */
    GUI.showSpinner = function(options){
      var container = options.container || 'body';
      var id = options.id || 'loadspinner';
      var where = options.where || 'prepend'; // append | prepend
      var style = options.style || '';
      var transparent = options.transparent ? 'background-color: transparent' : '';
      if (!$("#"+id).length) {
        $(container)[where].call($(container),'<div id="'+id+'" class="spinner-wrapper '+style+'" style="'+transparent+'"><div class="spinner '+style+'"></div></div>');
      }
    };
    GUI.hideSpinner = function(id){
      $("#"+id).remove();
    };
    /* end spinner*/

    /* fine metodi comuni */
    
    /* Metodi specifici del template */
    // FLOATBAR //
    GUI.showFloatbar = function() {
      floatbar.FloatbarService.open();
    };
    GUI.hideFloatbar = function() {
      floatbar.FloatbarService.close();
    };

    // SIDEBAR //
    GUI.showSidebar = _.bind(this._showSidebar, this);
    GUI.hideSidebar = _.bind(this._hideSidebar, this);
    
    GUI.setModal = _.bind(this._showModalOverlay,this);
    
    // Mostra la mappa come vista principale
    GUI.showMap = function() {
      viewport.ViewportService.setPrimaryComponent('map');
    };
    // Mostra la mappa come vista aside, impostando il rapporto vista principale / vista secondaria (es. 2 per 1/2, 3 per vista secondaria 1/ di quella primaria, ecc.)
    GUI.showMapAside = function(split,ratio) {
      
    };
    // Mostra il contenuto come vista principale. Il contenuto può essere una string HTML, un elemento DOM o un componente Vue
    GUI.showContent = function(content) {
      var contentComponent = ComponentsRegistry.getComponent('contents');
      // contentComponent.setContent(content);  DA IMPLEMENTARE: Il secondo componente settato in fase di configurazione (ancora non presente) dovrà implementare il metodo setContent
      // che accetterà o una stringa HTML, o un elemento DOM, oppure un componente Vue
      viewport.ViewportService.setPrimaryComponent('contents');
    };
    // Mostra i contenuto come vista aside
    GUI.showContentAside = function(content,split,ratio) {
      var contentComponent = ComponentsRegistry.getComponent('contents');
      contentComponent.setContent(content);
      viewport.ViewportService.setPrimaryComponent('map');
      viewport.ViewportService.showSecondaryView(split,ratio);
    };
    // Nasconde la vista secondaria
    GUI.hideAside = function() {
      viewport.ViewportService.hideSecondaryView();
      var contentComponent = ComponentsRegistry.getComponent('contents');
      contentComponent.removeContent();
    };
    /* fine metodi specifici */
    
    /* FINE DEFINIZIONE INTERFACCIA PUBBLICA */
  };
  
  base(this);
};
inherit(ApplicationTemplate,G3WObject);

ApplicationTemplate.PLACEHOLDERS = [
  'navbar',
  'sidebar',
  'viewport',
  'floatbar'
];

ApplicationTemplate.PlaceholdersServices = {
  navbar: null,
  sidebar: sidebar.SidebarService,
  viewport: viewport.ViewportService,
  floatbar: sidebar.FloatbarService,
};

module.exports =  ApplicationTemplate;


},{"./applicationui":10,"./floatbar":13,"./layout":14,"./sidebar":15,"./viewport":17,"core/g3wobject":31,"core/utils/utils":52,"sdk/core/i18n/i18n.service":34,"sdk/gui/componentsregistry":73,"sdk/gui/gui":76,"sdk/gui/vue/vue.directives":96}],17:[function(require,module,exports){
var inherit = require('sdk').core.utils.inherit;
var base = require('sdk').core.utils.base;
var merge = require('sdk').core.utils.merge;
var G3WObject = require('sdk').core.G3WObject;
var GUI = require('sdk').gui.GUI;

var ViewportService = function(){  
  this.state = {
    primaryViewTag: 'one', // di default la vista primaria è la prima
    secondaryVisible: false,
    ratioDenom: 2,
    split: 'h',
    viewSizes: {
      one: {
        width: 0,
        height: 0
      },
      two: {
        width: 0,
        height: 0
      }
    }
  };
  
  this.setters = {
    setPrimaryComponent: function(componentId) {
      var component = this._viewsByComponentId[componentId];
      if(component) {
        var viewTag = component.viewTag;
        this._setPrimaryView(viewTag);
      }
    }
  }
  
  this._viewsByComponentId = {};
  var _components = null;
  this._secondaryViewMinWidth = 300;
  this._secondaryViewMinHeight = 200;
  
  /* INTERFACCIA PUBBLICA */
  
  this.addComponents = function(components){
    var self = this;
    var regiteredComponents = _.keys(self._viewsByComponentId);

    // la viewport ha al massimo due viste, ognuna contente al massimo un componente. Se viene richiesta l'aggiunta di più di due componenti questi vengono ignorati
    components = components.slice(0,3);
    if (regiteredComponents.length == 2) {
      return false;
    }
    
    var sliceStart = regiteredComponents.length;
    var sliceEnd = regiteredComponents.length + components.length;
    var viewTags = ['one','two'].slice(sliceStart,sliceEnd);
    _.forEach(viewTags, function(viewTag,idx){
      var component = components[idx];
      component.mount('#g3w-view-'+viewTag,true).
      then(function(){
        var componentId = component.getId();
        self._viewsByComponentId[componentId] = {
          viewTag: viewTag,
          component: component
        }
      });
    })
    return true;
  };
  
  this.addComponent = function(component) {
    return this.addComponents[component];
  };
  
  this.showSecondaryView = function(split,ratioDenom) {
    this.state.secondaryVisible = true;
    this.state.split = split ? split : this.state.split;
    this.state.ratioDenom = ratioDenom ? ratioDenom : this.state.ratioDenom;
    this._layout();
  };
  
  this.hideSecondaryView = function() {
    this.state.secondaryVisible = false;
    this._layout();
  };
  
  /* FINE INTERFACCIA PUBBLICA */
  
  this._otherTag = function(viewTag) {
    return (viewTag == 'one') ? 'two' : 'one';
  };
  
  // meccanismo per il ricalcolo delle dimensioni della viewport e dei suoi componenti figli
  
  this._setPrimaryView = function(viewTag) {
    this.state.primaryView = viewTag;
    //this._layout();
  };
  
  this._prepareLayout = function() {
    var self = this;
    var drawing = false;
    var resizeFired = false;
    
    function triggerResize() {
      resizeFired = true;
      drawResize();
    } 

    function drawResize() {
      if (resizeFired === true) {
          resizeFired = false;
          drawing = true;
          self._layout();
          requestAnimationFrame(drawResize);
      } else {
          drawing = false;
      }
    }
    
    GUI.on('ready',function(){
      // primo layout
      var primaryViewTag = self.state.primaryViewTag;
      var seondaryViewTag = self._otherTag(primaryViewTag);
      var secondaryEl = $(".g3w-viewport ."+seondaryViewTag);
      
      var seondaryViewMinWidth = secondaryEl.css('min-width');
      if ((seondaryViewMinWidth != "") && !_.isNaN(parseFloat(seondaryViewMinWidth))) {
        self._secondaryViewMinWidth =  parseFloat(seondaryViewMinWidth);
      }
      var seondaryViewMinHeight = secondaryEl.css('min-height');
      if ((seondaryViewMinHeight != "") && !_.isNaN(parseFloat(seondaryViewMinHeight))) {
        self._secondaryViewMinHeight =  parseFloat(seondaryViewMinHeight);
      }

      self._layout();
      
      // resize scatenato da GUI
      GUI.on('guiresized',function(){
        triggerResize();
      });
      
      // resize della window
      $(window).resize(function() {
        // set resizedFired to true and execute drawResize if it's not already running
        if (drawing === false) {
            triggerResize();
        }
      });
      
      // resize sul ridimensionamento della sidebar
      $('.main-sidebar').on('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function () {
          $(this).trigger('trans-end');
          triggerResize();
      });
    });
  };
  
  this._setViewSizes = function() {
    var primaryViewTag = this.state.primaryViewTag;
    var seondaryViewTag = this._otherTag(primaryViewTag);
    
    var viewportWidth = this._viewportWidth();
    var viewportHeight = this._viewportHeight();
    
    var primaryWidth = viewportWidth;
    var primaryHeight = viewportHeight;
    
    var ratio = this.state.ratioDenom;
    if (ratio > 0) {
      if (this.state.split == 'h') {
        secondaryWidth = this.state.secondaryVisible ? Math.max((viewportWidth / ratio),this._secondaryViewMinWidth) : 0;
        secondaryHeight = viewportHeight;
        primaryWidth = viewportWidth - secondaryWidth;
        primaryHeight = viewportHeight;
      }
      else {
        secondaryWidth = viewportWidth;
        secondaryHeight = this.state.secondaryVisible ? Math.max((viewportHeight / ratio),this._secondaryViewMinHeight) : 0;
        primaryWidth = viewportWidth;
        primaryHeight = viewportHeight - secondaryHeight;
      }
    }
    
    this.state.viewSizes[primaryViewTag].width = primaryWidth;
    this.state.viewSizes[primaryViewTag].height = primaryHeight;
    //var primaryEl = $(".g3w-viewport ."+primaryViewTag);
    
    
    this.state.viewSizes[seondaryViewTag].width = secondaryWidth;
    this.state.viewSizes[seondaryViewTag].height = secondaryHeight;
    //var secondaryEl = $(".g3w-viewport ."+seondaryViewTag);
  };
  
  this._viewportHeight = function() {
    var topHeight = $(".navbar").innerHeight();
    return $(window).innerHeight() - topHeight;
  };
    
  this._viewportWidth = function() {
    var offset = $(".main-sidebar").offset().left;
    var width = $(".main-sidebar").innerWidth();
    var sideBarSpace = width + offset;
    return $(window).innerWidth() - sideBarSpace;
  };
  
  this._layout = function() {
    var splitClassToAdd = (this.state.split == 'h') ? 'split-h' : 'split-v';
    var splitClassToRemove =  (this.state.split == 'h') ? 'split-v' : 'split-c';
    $(".g3w-viewport .g3w-view").addClass(splitClassToAdd);
    $(".g3w-viewport .g3w-view").removeClass(splitClassToRemove);
    
    this._setViewSizes();
    this._layoutComponents();
  };
  
  this._layoutComponents = function() {
    var self = this;
    if (!_components){
      _components = _.map(this._viewsByComponentId,function(view){ return view.component; });
    }
    _.forEach(_components,function(component){
      // viene chiamato il metodo per il ricacolo delle dimensioni nei componenti figli
      var viewTag = self._viewsByComponentId[component.getId()].viewTag;
      var width = self.state.viewSizes[viewTag].width;
      var height = self.state.viewSizes[viewTag].height;
      component.layout(width,height);
    })
  };
  
  this._prepareLayout();
  base(this);
};
inherit(ViewportService, G3WObject);

var viewportService = new ViewportService;

var ViewportComponent = Vue.extend({
  template: require('../html/viewport.html'),
  data: function() {
    return {
      state: viewportService.state
    }
  }
});

module.exports = {
  ViewportService: viewportService,
  ViewportComponent: ViewportComponent
}

},{"../html/viewport.html":9,"sdk":97}],18:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var reject = require('core/utils/utils').reject;

function ApiService(){
  this._config = null;
  this._baseUrl = null;
  this._apiUrls = {};
  
  this.init = function(config) {

    this._config = config;
    this._baseUrl = config.urls.api;
    this._apiEndpoints = config.urls.apiEndpoints;
  };
  
  var howManyAreLoading = 0;
  this._incrementLoaders = function(){
    if (howManyAreLoading == 0){
      this.emit('apiquerystart');
    }
    howManyAreLoading += 1;
  };
  
  this._decrementLoaders = function(){
    howManyAreLoading -= 1;
    if (howManyAreLoading == 0){
      this.emit('apiqueryend');
    }
  };
  
  this.get = function(api, options) {
    var self = this;
    var apiEndPoint = this._apiEndpoints[api];
    if (apiEndPoint) {
      var completeUrl = this._baseUrl + '/' + apiEndPoint;
      if (options.request) {
         completeUrl = completeUrl + '/' + options.request;
      }
      var params = options.params || {};
      
      self.emit(api+'querystart');
      this._incrementLoaders();
      return $.get(completeUrl,params)
      .done(function(response){
        self.emit(api+'queryend',response);
        return response;
      })
      .fail(function(e){
        self.emit(api+'queryfail',e);
        return e;
      })
      .always(function(){
        self._decrementLoaders();
      });
    }
    else {
      return reject();
    }
  };
  
  base(this);
}
inherit(ApiService,G3WObject);

module.exports = new ApiService;

},{"core/g3wobject":31,"core/utils/utils":52}],19:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var ApiService = require('core/apiservice');
var RouterService = require('core/router');
var ProjectsRegistry = require('core/project/projectsregistry');
var PluginsRegistry = require('core/plugin/pluginsregistry');
var ClipboardService = require('core/clipboardservice');

var ApplicationService = function(){
  this.secret = "### G3W Client Application Service ###";
  var self = this;
  this.ready = false;
  this.complete = false;
  this._modalOverlay = null;
  this._acquirePostBoostrap = false;
  this.config = {};

  // chiama il costruttore di G3WObject (che in questo momento non fa niente)
  base(this);
  
  this.init = function(config, acquirePostBoostrap){
    this._config = config;
    if (acquirePostBoostrap) {
      this._acquirePostBoostrap = true;
    }
    this._bootstrap();
  };
  
  this.getConfig = function() {
    return this._config;
  };
  
  this.getRouterService = function() {
    return RouterService;
  };

  this.getClipboardService = function() {
    return ClipboardService;
  }
  
  this.postBootstrap = function() {

    if (!this.complete) {
      RouterService.init();
      this.complete = true;
    }
  };
  
  this._bootstrap = function(){
    var self = this;
    //nel caso in cui (prima volta) l'application service non è pronta
    //faccio una serie di cose
    if (!this.ready) {
      // Inizializza la configurazione dei servizi.
      // Ognungo cercherà dal config quello di cui avrà bisogno
      // una volta finita la configurazione emetto l'evento ready.
      // A questo punto potrò avviare l'istanza Vue globale
      $.when(
        ApiService.init(this._config),
        ProjectsRegistry.init(this._config)
      ).then(function(){
        PluginsRegistry.init({
          plusingBaseUrl: self._config.urls.staticurl,
          pluginsConfigs: self._config.plugins
        });
        self.emit('ready');
        if (!self._acquirePostBoostrap) {
          self.postBootstrap();
        }
        this.initialized = true;
      });
    };
  };
};
inherit(ApplicationService,G3WObject);

module.exports = new ApplicationService;

},{"core/apiservice":18,"core/clipboardservice":20,"core/g3wobject":31,"core/plugin/pluginsregistry":42,"core/project/projectsregistry":45,"core/router":50,"core/utils/utils":52}],20:[function(require,module,exports){
function ClipboardService(){
  var _data = {};
  this.set = function(clipBoardId, data) {
    // id della feature copiata, data sono fileds e relations passate al form
    _data[clipBoardId] = data;
  };

  this.get = function(clipBoardId) {
    if (_data) {
      var data = _data[clipBoardId];
      // poi vado a cancellare i dati
      delete _data[clipBoardId];
      // retituisce i dati che sono stati salvati
      return data;
    } else {
      return _data
    }
  }
}
module.exports = new ClipboardService;

},{}],21:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var G3WObject = require('core/g3wobject');
var RelationEditBuffer = require('./relationeditbuffer');

function EditBuffer(editor) {
  this._editor = editor;

  this._origVectorLayer = new ol.layer.Vector({
    source: new ol.source.Vector()
  });
  this._cloneLayer();

  //buffer delle geometrie
  this._geometriesBuffer = {};

  // buffer degli attributi
  this._attributesBuffer = {};

  // buffer degli attributi delle relazioni
  this._relationsBuffers = {};


}
inherit(EditBuffer,G3WObject);

module.exports = EditBuffer;

var proto = EditBuffer.prototype;

//funzione commit
proto.commit = function() {
  // prendo tutte le feature dal vettore di editing dell'editor
  var newFeatures = this._editor.getEditVectorLayer().getFeatures();
  //aggiungo le features nuove al layer vettoriale originale
  this._editor.getVectorLayer().addFeatures(newFeatures);
  // faccio il clear del layere di editing
  this._editor.getEditVectorLayer().clear();
  // faccio il clear del buffer
  this._clearBuffers();
  //faccio il clone del Layer Vector originale della mappa
  this._cloneLayer();
};

proto.undoAll = function(){
  this._resetVectorLayer();
  this._clearBuffers();
};

proto.destroy = function(){
  this._clearBuffers();
};

proto.generateId = function() {
  return this._editor.generateId();
};

// funzione che agginge la feature geometrica nel buffer
// geometry
proto.addFeature = function(feature) {
  // nel caso non abbia una un id (caso nuova feature) la genero causale
  if(!feature.getId()) {
    feature.setId(this.generateId());
  }
  // aggiungo la feature al buffer (nel cso di nuova feature
  this._addEditToGeometryBuffer(feature, 'add');
  console.log("Inserita nuova feature: (ID: "+feature.getId()+" "+feature.getGeometry().getCoordinates()+") nel buffer");
};
// funzione chiamata in fase di update della Feature
proto.updateFeature = function(feature) {
  this._addEditToGeometryBuffer(feature, 'update');
  console.log("Modificata feature: (ID: "+feature.getId()+" "+feature.getGeometry().getCoordinates()+") nel buffer");
};

proto.deleteFeature = function(feature){
  this._addEditToGeometryBuffer(feature,'delete');
  console.log("Rimossa feature: (ID: "+feature.getId()+" "+feature.getGeometry().getCoordinates()+") nel buffer");
};
// funzione che server per fare update di una feature
proto.updateFields = function(feature, relations) {
  // nel caso di una nuova feature
  if(!feature.getId()) {
    // genero id random e lo setto alla feature
    feature.setId(this.generateId());
  }
  this._addEditToValuesBuffers(feature, relations);
  console.log("Modificati attributi feature: (ID: "+feature.getId()+")");
};

proto.getFeatureAttributes = function(fid){
  if(this._attributesBuffer[fid]){
    return this._attributesBuffer[fid].slice(-1)[0];
  }
  return null;
};

proto.areFeatureAttributesEdited = function(fid){
  if (this._attributesBuffer[fid]){
    return this._attributesBuffer[fid].length > -1;
  }
  return false;
};
// funzione che se nel buffer delle relazioni
// è stato inserito già modifiche su relazioni di quella feature
proto.hasRelationsEdits = function(fid){
  var hasEdits = false;
  _.forEach(this._relationsBuffers[fid], function(relationBuffer) {
    hasEdits = hasEdits || relationBuffer.hasRelationElements();
  })
  return hasEdits;
};

proto.getRelationsEdits = function(fid){
  var relations = {};
  _.forEach(this._relationsBuffers[fid],function(relationBuffer){
    relations[relationBuffer.getRelationName()] = relationBuffer.getRelationElements();
  });
  return relations;
};
// funzione che colleziona tutti gli (unici) delle featues modificate
// dei buffer geometry e attribute
proto.collectFeatureIds = function() {
  var geometriesBuffers = this._geometriesBuffer;
  var attributesBuffers = this._attributesBuffer;
  var modifiedFids = [];
  modifiedFids = _.concat(modifiedFids,_.keys(geometriesBuffers));
  modifiedFids = _.concat(modifiedFids,_.keys(attributesBuffers));
  return _.uniq(modifiedFids);
};
// che colleziona tutte le modifche fatte quando viene premuto o fatto salva
// dall'editor o passaggio da un editing di un layer all'altro
proto.collectFeatures = function(state, asGeoJSON){
  var self = this;
  var geometriesBuffers = this._geometriesBuffer;
  var attributesBuffers = this._attributesBuffer;
  var asGeoJSON = asGeoJSON || false;
  // prendo il jsono format per poter poi fare il posto verso il server
  var GeoJSONFormat = new ol.format.GeoJSON();
  var modifiedFids = this.collectFeatureIds();
  var layer;
  if (state == 'new') {
    layer = self._editor.getEditVectorLayer();
  }
  else {
    layer = self._editor.getVectorLayer();
  }

  var features = [];
  _.forEach(modifiedFids,function(fid){

    var feature = layer.getFeatureById(fid);
    var isNew = self._isNewFeature(fid);
    var addedFeature = (state == 'new' && isNew && feature);
    var updatedFeature = (state == 'updated' && !isNew && feature);
    var deletedFeature = (state == 'deleted' && !isNew && !feature);

    if (addedFeature || updatedFeature){
      if (asGeoJSON){
        feature = GeoJSONFormat.writeFeatureObject(feature);
      }
      features.push(feature);
    }
    else if (deletedFeature) {
      features.push(fid);
    }
  });
  return features;
};

proto.createFeature = function(fid,geometry,attributes){
  var feature = new ol.Feature();
  feature.setId(fid);
  feature.setGeometry(geometry);
  feature.setProperties(attributes);
  return feature;
};

proto.collectRelations = function(){
  var relationsEdits = {
    add: [],
    delete: [],
    update: []
  };

  var relationsElements = {};
  _.forEach(this._relationsBuffers,function(relationsBuffers,fid){

    var newRelationEdits = {
      fid: fid,
      relations: {}
    };
    var updatedRelationEdits = {
      fid: fid,
      relations: {}
    };
    var deletedRelationEdits = {
      fid: fid,
      relations: {}
    };

    _.forEach(relationsBuffers,function (relationBuffer) {
      var relationName = relationBuffer.getRelationName();

      var newElements = relationBuffer.getRelationElementsOnlyFieldsValues('NEW');
      var updatedElements = relationBuffer.getRelationElementsOnlyFieldsValues('OLD'); // nel buffer vengono inseriti sempre tutti gli elementi preesistenti (che siano effettivamente affiornati o meno)
      var deletedElements = relationBuffer.getRelationElementsOnlyFieldsValues('DELETED');


      var newElementsEdits = [];
      var updatedElementsEdits = [];
      var deletedElementsEdits = [];

      _.forEach(newElements,function(element){
        newElementsEdits.push({
          id: element.id,
          fields: element.fields
        })
      });

      _.forEach(updatedElements,function(element){
        updatedElementsEdits.push({
          id: element.id,
          fields: element.fields
        })
      });

      _.forEach(deletedElements,function(element){
        deletedElementsEdits.push({
          id: element.id
        })
      });

      newRelationEdits.relations[relationName] = newElementsEdits;
      updatedRelationEdits.relations[relationName] = updatedElementsEdits;
      deletedRelationEdits.relations[relationName] = deletedElementsEdits;

    });
    relationsEdits.add.push(newRelationEdits);
    relationsEdits.update.push(updatedRelationEdits);
    relationsEdits.delete.push(deletedRelationEdits);

  });
  return relationsEdits;
};

proto._addEditToGeometryBuffer = function(feature, operation) {
  // al momento non prende in considerazione, update , add valori di operation
  // in quanto verifica se è una nuova feature o no
  // recupero il buffer delle geometrie
  var geometriesBuffer = this._geometriesBuffer;
  // recupero l'ide della feature
  var id = feature.getId();
  // recupero la geometria
  var geometry = feature.getGeometry();
  // caso operazione delete
  if (operation == 'delete'){
    geometry = null;
    // prendo il layer originale o l'editing Layer
    var layer = this._isNewFeature(id) ? this._editor.getEditVectorLayer() : this._editor.getVectorLayer();
    // rimuovo la feature dalla source
    layer.getSource().removeFeature(feature);
  }
  // se non presente nel geometry buffer
  // creo array riferita a quella feature per monitorare tutte le modifice che avverranno
  // su quella feature
  if (!_.has(geometriesBuffer,id)) {
    geometriesBuffer[id] = [];
  }
  geometriesBuffer[id].push(geometry);
  this._setDirty(true);
};
// funzione che mette in relazione feature e relazioni
proto._addEditToValuesBuffers = function(feature, relations){
  var self = this;
  // prende id della feature
  var fid = feature.getId();
  // prende gli attributi della feature
  var attributes = feature.getProperties();
  // prendo il buffer degli attributi
  var attributesBuffer = this._attributesBuffer;
  //verifica se l'oggetto attributebuffer ha l'id del layer
  if (!_.has(attributesBuffer, fid)) {
    //nel caso non ci sia crea la chiave e assegna un array vuoto
    attributesBuffer[fid] = [];
  }
  // a quel punto inserisco una nuova modifica nell'array delle modifiche
  // che rigurada quella particolare feature identificata dalla chiave id
  attributesBuffer[fid].push(attributes);
  // se snono state passate relazioni
  if (relations) {
    // clico su ognuna di essere
    _.forEach(relations, function(relation) {
      //se esiste già nell'oggetto relation buffer legate a quella feature
      if (!_.has(self._relationsBuffers, fid)) {
        // atrimenti faccio come ho fatto sopra per il buffer degli attributi
        // ma ora sul buffer delle relazioni e non più un array ma un ogetto
        // caratterizzato dal nome della relazione
        self._relationsBuffers[fid] = {};
      }
      // verifico oltre alla chiave della feature se contiene il nome della relazione
      // che non è altro il nome del layer che in relazione con la feature del layer che si sta
      // editando
      if (!_.has(self._relationsBuffers[fid], relation.name)) {
        // se non presente creo una nuova istanza di RelationEditBuffer
        self._relationsBuffers[fid][relation.name] = new RelationEditBuffer(self, relation.name);
      }
      // prendo l'istanza di RelationEditBuffer (creata sul momento o esistente)
      var relationBuffer = self._relationsBuffers[fid][relation.name];
      // chiamo il metodo updateRelation dell'istanza
      relationBuffer.updateRelation(relation);
    });
  }
  this._setDirty(true);
};

// guardo se è una feature già  presente nel buffer delle nuove geometrie
proto._isNewFeature = function(fid){
  //return id.toString().indexOf('_new_') > -1;
  return this._editor.isNewFeature(fid);
};
// funzione edit buffer che chiama il set dirty
proto._setDirty = function(bool) {
  // faccio un OR logico tra quello inviato da qualsiasi punto del'edit buffer
  // o quello dal relationEditBuffer object (che si può verificare)
  // nel caso in cui faccio un clena dell'editing della relazione
  // e la verifica sei i vari buffer sono oggetti vuoti
  var isDirty = bool || !_.isEmpty(this._geometriesBuffer) || !_.isEmpty(this._attributesBuffer) || !_.isEmpty(this._relationsAttributesBuffer);
  this._editor._setDirty(isDirty);
};

proto._resetVectorLayer = function(){
  this._editor.vectoLayer = this._origVectorLayer;
  this._origVectorLayer.getSource().clear();
};
// fa il cela di tutti i buffers
// e chiama il setDirty dell'edito passanogli false
// quindi disabilitando il tasto salva per inviare le modifiche
proto._clearBuffers = function() {
  this._geometriesBuffer = {};
  this._attributesBuffer = {};
  this._relationsAttributesBuffer = {};
  this._editor._setDirty(false);
};
//funzione cloneLayer
proto._cloneLayer = function() {
  var clonedFeatures = [];
  //ciclo sul tutte le feature del layer vettoriale originale
  this._editor._vectorLayer.getSource().forEachFeature(function(feature) {
    clonedFeatures.push(feature.clone());
  }, this);
  // aggiungo tali feature sul layer "originale del buffer"
  this._origVectorLayer.getSource().addFeatures(clonedFeatures);
};
},{"./relationeditbuffer":23,"core/g3wobject":31,"core/utils/utils":52}],22:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var resolve = require('core/utils/utils').resolve;
var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');
var VectorLayer = require('core/map/layer/vectorlayer');
// BASE TOOLS ////
var AddFeatureTool = require('./tools/addfeaturetool');
var MoveFeatureTool = require('./tools/movepointtool');
var ModifyFeatureTool = require('./tools/modifyfeaturetool');
var DeleteFeatureTool = require('./tools/deletefeaturetool');
var PickFeatureTool = require('./tools/pickfeaturetool');
var CutLineTool = require('./tools/cutlinetool');
/// BUFFER /////
var EditBuffer = require('./editbuffer');

var Form = require('gui/form');
var form = null; // brutto ma devo tenerlo esterno sennò si crea un clico di riferimenti che manda in palla Vue

// Editor di vettori puntuali
function Editor(options) {

  this._mapService = options.mapService || {};
  this._vectorLayer = null;
  this._editVectorLayer = null;
  this._editBuffer = null;
  this._activeTool = null;
  this._formClass = options.formClass || Form;
  this._dirty = false;
  this._newPrefix = '_new_';
  this._featureLocks = null;
  this._started = false;

  this._setterslisteners = {
    before: {},
    after: {}
  };

  this._geometrytypes = [
    'Point',
    'LineString',
    'MultiLineString'
  ];

  // elenco dei tool e delle relative classi per tipo di geometria (in base a vector.geometrytype)
  this._toolsForGeometryTypes = {
    'Point': {
      addfeature: AddFeatureTool,
      movefeature: MoveFeatureTool,
      deletefeature: DeleteFeatureTool,
      editattributes: PickFeatureTool
    },
    'LineString': {
      addfeature: AddFeatureTool,
      modifyvertex: ModifyFeatureTool,
      movefeature: MoveFeatureTool,
      deletefeature: DeleteFeatureTool,
      editattributes: PickFeatureTool,
      cutline: CutLineTool
    }
  };
  //ACTIVE TOOL -- ISTANZA CON I SUOI METODI E ATTRIBUTI
  this._activeTool = new function() {
    this.type = null;
    this.instance = null;

    this.setTool = function(type, instance) {
      this.type = type;
      this.instance = instance;
    };

    this.getType = function() {
      return this.type;
    };

    this.getTool = function() {
      return this.instance;
    };

    this.clear = function() {
      this.type = null;
      this.instance = null;
    };
  }
  // TOOLS
  //terrà traccia dei tool attivi per quel layer vettoriale
  //ad esempio nel caso di un layer Point
  //avrà tale struttura
  /*
   this._tools = {
     addfeature: AddFeatureTool,
     movefeature: MoveFeatureTool,
     deletefeature: DeleteFeatureTool,
     editattributes: PickFeatureTool
  }
  */
  this._tools = {};

  this._setupAddFeatureAttributesEditingListeners();
  this._setupEditAttributesListeners();
  this._askConfirmToDeleteEditingListener();

  base(this);
}

inherit(Editor, G3WObject);

var proto = Editor.prototype;

proto.getMapService = function() {
  return this._mapService;
};

// associa l'oggetto VectorLayer su cui si vuole fare l'editing
// inoltre setta i tipi di tools da poter collegare
// al tipo di layer sempre in base al tipo di geometria del layer
proto.setVectorLayer = function(vectorLayer) {
  //verifica il tipo di geometria del layer vettoriale
  var geometrytype = vectorLayer.geometrytype;
  //verifica se è nella tipologia di geometria compatibile con l'editor
  if (!geometrytype || ! this._isCompatibleType(geometrytype)) {
    throw Error("Vector geometry type "+geometrytype+" is not valid for editing");
  }
  //nel caso in cui la geometria riscontrata corrisponde ad una geometria valida dell'editor
  //setta i tools dell'editor relativi al tipo di geometria
  this._setToolsForVectorType(geometrytype);
  //assegno il layer vettoriale alla proprità dell'editor
  this._vectorLayer = vectorLayer;
};

// funzione che crea e aggiunge il layer vettoraile di editing alla mappa
proto.addEditingLayerToMap = function(geometryType) {
  // istanzio l'editVectorLayer che è un vettore di appoggio (nuovo)
  // dove vado a fare le modifiche
  this._editVectorLayer = new VectorLayer({
    name: "editvector",
    geometrytype: geometryType
  });
  //il getMapLyer non è altro che la versione ol.Vector del vectorLayer oggetto
  this._mapService.viewer.map.addLayer(this._editVectorLayer.getMapLayer());
};

//funzione che rimove il vettore di eding dalla mappa e lo resetta
proto.removeEditingLayerFromMap = function() {
  this._mapService.viewer.removeLayerByName(this._editVectorLayer.name);
  this._editVectorLayer = null;
};

// avvia la sessione di editazione con un determinato tool (es. addfeature)
proto.start = function() {
  console.log('start della classe Editor');
  // TODO: aggiungere notifica nel caso questo if non si verifichi
  var res = false;
  // se è sia stato settato il vectorLayer
  if (this._vectorLayer) {
    //prima di tutto stoppo editor
    this.stop();
    //chiamo la funzione che mi crea il vettoriale di edting dove vendono apportate
    // tutte le modifice del layer
    this.addEditingLayerToMap(this._vectorLayer.geometrytype);
    // istanzio l'EditBuffer
    this._editBuffer = new EditBuffer(this);
    //assegno all'attributo _started true;
    this._setStarted(true);
    res = true;
  }
  return res;
};

// termina l'editazione
proto.stop = function() {

  if (this.isStarted()) {
    if (this.stopTool()) {
      if (form) {
        GUI.closeForm(form);
        this.form = null;
      }
      //distruggo l'edit buffer
      this._editBuffer.destroy();
      //lo setto a null
      this._editBuffer = null;
      //rimuovo i listeners
      this.removeAllListeners();
      //rimuovo il layer dalla mappa
      this.removeEditingLayerFromMap();
      //setto editor started a false
      this._setStarted(false);
      return true;
    }
    return false;
  }
  return true;
};

//setta il tool corrent per il layer in editing
proto.setTool = function(toolType, options) {
  // al momento stopTool ritorna sempre true
  // quindi if sotto mai verificata
  if (!this.stopTool()) {
    return false;
  }
  // recupera il tool dai tols assegnati in base al tipo di tools richiesto
  // es. toolType = editattributes per editare gli attributi di una featue
  var toolClass = this._tools[toolType];
  // se esiste il tool richiesto
  if (toolClass ) {
    //creo l'istanza della classe Tool
    var toolInstance = new toolClass(this, options);
    // setto le proprità type dell'oggetto acriveTool
    // instance e type
    this._activeTool.setTool(toolType, toolInstance);
    // setto i listeners legati al tool scelto
    this._setToolSettersListeners(toolInstance);
    // faccio partire (chiamando il metodo run dell'istanza tool) il tool
    toolInstance.run();
    return true;
  }
};

// funzione chiamata da fuori (verosimilmente da pluginservice)
// al fine di interrompere l'editing sul layer
proto.stopTool = function() {
  //verifica se esiste l'istanza del tool (come attiva)
  // e se se nella stop del tool (che non fa altro che rimuovere le interaction dalla mappa)
  // si è verificato o meno un errore (tale funzione al momento ritorna true)
  if (this._activeTool.instance && !this._activeTool.instance.stop()) {
    return false;
  }
  GUI.closeForm();
  // se non è verificata la condizione sopra (dovuta ad esempio alla non istanziazione di nessus tool)
  // si chiama il metodo clea
  // dell'active Tool che setta il type e l'instace a null (al momento si verifica sempre)
  this._activeTool.clear();
  return true;
};


// ritorna l'activeTool
proto.getActiveTool = function() {
  return this._activeTool;
};

proto.isStarted = function() {
  return this._started;
};

proto.hasActiveTool = function() {
  return !_.isNull(this._activeTool.instance);
};

proto.isToolActive = function(toolType) {
  if (this._activeTool.toolType) {
    return this._activeTool.toolType == toolType;
  }
  return false;
};

proto.commit = function(newFeatures) {
  this._editBuffer.commit(newFeatures);
};

proto.undoAll = function() {
  this._editBuffer.undoAll();
};

proto.setFeatureLocks = function(featureLocks) {
  this._featureLocks = featureLocks;
};

proto.getFeatureLocks = function() {
  return this._featureLocks;
};

proto.getFeatureLockIds = function() {
  return _.map(this._featureLocks,function(featurelock) {
    return featurelock.lockid;
  });
};

proto.getFeatureLocksLockIds = function(featureLocks) {
  var featureLocks = featureLocks || this._featureLocks;
  return _.map(featureLocks,function(featurelock) {
    return featurelock.lockid;
  });
};

proto.getFeatureLocksFeatureIds = function(featureLocks) {
  var featureLocks = featureLocks || this._featureLocks;
  return _.map(featureLocks,function(featurelock) {
    return featurelock.featureid;
  });
};

proto.getFeatureLockIdsForFeatureIds = function(fids) {
  var featurelocksForFids = _.filter(this._featureLocks,function(featurelock) {
    return _.includes(fids,featurelock.featureid);
  });

  return this.getFeatureLocksLockIds(featurelocksForFids);
};
// funzione che prende le feature nuove, aggiornate e cancellate
//dall'edit buffer
proto.getEditedFeatures = function(){
  var modifiedFids = this._editBuffer.collectFeatureIds();
  var lockIds = this.getFeatureLockIdsForFeatureIds(modifiedFids);
  return {
    add: this._editBuffer.collectFeatures('new',true),
    update: this._editBuffer.collectFeatures('updated',true),
    delete: this._editBuffer.collectFeatures('deleted',true),
    //relations: this._editBuffer.collectRelationsAttributes(),
    relationsedits: this.collectRelations(),
    lockids: lockIds
  }
};

proto.collectRelations = function() {
  relationsEdits = this._editBuffer.collectRelations();
  /*_.forEach(this._vectorLayer.getRelations(),function(relation){
   var relationEdits = {
   add: [],
   update: [],
   delete: []
   }
   relationsEdits[relation.name] = relationEdits;
   })*/
  return relationsEdits;
};
// viene chamato quando si preme ad esempio Salva sul Form degli
// attributi di una
proto.setFieldsWithValues = function(feature, fields, relations) {
  var attributes = {};
  _.forEach(fields,function(field) {
    attributes[field.name] = field.value;
  });
  var relationsAttributes = null;
  if (relations) {
    var relationsAttributes = {};
    _.forEach(relations,function(relation) {
      var attributes = {};
      _.forEach(relation.fields,function(field) {
        attributes[field.name] = field.value;
      });
      relationsAttributes[relation.name] = attributes;
    });
  }
  feature.setProperties(attributes);
  this._editBuffer.updateFields(feature, relationsAttributes);
};

proto.setFieldsWithValues = function(feature,fields,relations){
  var attributes = {};
  _.forEach(fields,function(field){
    attributes[field.name] = field.value;
  });

  feature.setProperties(attributes);
  this._editBuffer.updateFields(feature,relations);
};
//funzione che in base alla feature passata recupera le relazioni associata ad essa
proto.getRelationsWithValues = function(feature) {
  var fid = feature.getId();
  //verifica se il layer ha relazioni
  // restituisce il valore del campo _relation (se esiste è un array) del vectorLayer
  if (this._vectorLayer.hasRelations()) {
    var fieldsPromise;
    // se non ha fid vuol dire che è nuovo e senza attributi, quindi prendo i fields vuoti
    if (!fid) {
      fieldsPromise = this._vectorLayer.getRelationsWithValues();
    }
    // se per caso ha un fid ma è un vettoriale nuovo
    else if (!this._vectorLayer.getFeatureById(fid)){
      // se questa feature, ancora non presente nel vectorLayer, ha comunque i valori delle FKs popolate, allora le estraggo
      if (this._vectorLayer.featureHasRelationsFksWithValues(feature)){
        var fks = this._vectorLayer.getRelationsFksWithValuesForFeature(feature);
        fieldsPromise = this._vectorLayer.getRelationsWithValuesFromFks(fks);
      }
      // altrimenti prendo i fields vuoti
      else {
        fieldsPromise = this._vectorLayer.getRelationsWithValues();
      }
    }
    // se invece è una feature già presente e quindi non nuova
    // verifico se ha dati delle relazioni già  editati
    else {
      var hasEdits = this._editBuffer.hasRelationsEdits(fid);
      if (hasEdits){
        var relationsEdits = this._editBuffer.getRelationsEdits(fid);
        var relations = this._vectorLayer.getRelations();
        _.forEach(relations,function (relation) {
          relation.elements = _.cloneDeep(relationsEdits[relation.name]);
        });
        fieldsPromise = resolve(relations);
      }
      // se non ce li ha vuol dire che devo caricare i dati delle relazioni da remoto
      else {
        fieldsPromise = this._vectorLayer.getRelationsWithValues(fid);
      }
    }
  }
  else {
    // nel caso di nessuna relazione risolvo la promise
    // passando il valore null
    fieldsPromise = resolve(null);
  }
  return fieldsPromise;
};

proto.createRelationElement = function(relation) {
  var element = {};
  element.fields = _.cloneDeep(this._vectorLayer.getRelationFields(relation));
  element.id = this.generateId();
  element.state = 'NEW';
  return element;
};

proto.getRelationPkFieldIndex = function(relationName) {
  return this._vectorLayer.getRelationPkFieldIndex(relationName);
};

proto.getField = function(name, fields) {
  var fields = fields || this.getVectorLayer().getFieldsWithValues();
  var field = null;
  _.forEach(fields, function(f) {
    if (f.name == name) {
      field = f;
    }
  });
  return field;
};

proto.isDirty = function() {
  return this._dirty;
};
// METODI CHE SOVRASCRIVONO ONAFTER, ONBEFORE, ONBEFOREASYNC DELL'OGGETTO G3WOBJECT
// la loro funzione è quella di settare la propriteà dell'editor
// _setterslisteners in modo corretto da poter poi essere sfruttata dal metodd
// _setToolSettersListeners  --- !!!! DA COMPLETARE LA SPIEGAZIONE !!!----

proto.onafter = function(setter, listener, priority) {
  this._onaftertoolaction(setter, listener, priority);
};

// permette di inserire un setter listener sincrono prima che venga effettuata una operazione da un tool (es. addfeature)
proto.onbefore = function(setter, listener, priority) {
  this._onbeforetoolaction(setter, listener, false, priority);
};

// come onbefore() ma per listener asincroni
proto.onbeforeasync = function(setter, listener, priority) {
  this._onbeforetoolaction(setter, listener, true, priority);
};

proto._onaftertoolaction = function(setter,listener,priority) {
  priority = priority || 0;
  if (!_.get(this._setterslisteners.after,setter)) {
    this._setterslisteners.after[setter] = [];
  }
  this._setterslisteners.after[setter].push({
    fnc: listener,
    priority: priority
  });
};

proto._onbeforetoolaction = function(setter, listener, async, priority) {
  priority = priority || 0;
  if (!_.get(this._setterslisteners.before, setter)){
    this._setterslisteners.before[setter] = [];
  }
  this._setterslisteners.before[setter].push({
    fnc: listener,
    how: async ? 'async' : 'sync',
    priority: priority
  });
};

/////////////////////////////////////

// una volta istanziato il tool aggiungo a questo tutti i listener definiti a livello di editor
proto._setToolSettersListeners = function(tool) {
  //scorro su i stterListerns impostati dagli editor custom (GeonotesEditor ad esempio)
  // in modo da poter richiamare e settare gli onbefore o onbeefore async o on after
  // nativi dell'oggetto g3wobject sui tool
  //verifico gli on before
  _.forEach(this._setterslisteners.before, function(listeners, setter) {
    // verifico se il tool in questione ha setters
    if (_.hasIn(tool.setters, setter)) {
      // se il tool prevede setters
      _.forEach(listeners, function(listener) {
        // per ogni listener (sono tutti oggetti con
        // chiave fnc, how (vedi sopra)
        // verifico se è un onbefore or un onbeforesync
        // vado a settare la funzione listeners quando il metodo del tool setter
        // viene chiamato
        if (listener.how == 'sync') {
          tool.onbefore(setter, listener.fnc, listener.priority);
        }
        else {
          tool.onbeforeasync(setter, listener.fnc, listener.priority);
        }
      })
    }
  });
  //come sopra ma per gli onafter
  _.forEach(this._setterslisteners.after, function(listeners,setter) {
    if (_.hasIn(tool.setters, setter)) {
      _.forEach(listeners,function(listener) {
        tool.onafter(setter,listener.fnc, listener.priority);
      })
    }
  })
};
// metodo add Feature che non fa alto che aggiungere la feature al buffer
proto.addFeature = function(feature) {
  this._editBuffer.addFeature(feature);
};
// non fa aalctro che aggiornare la feature del buffer
proto.updateFeature = function(feature) {
  this._editBuffer.updateFeature(feature);
};
// non fa altro che cancellare la feature dall'edit buffer
proto.deleteFeature = function(feature) {
  this._editBuffer.deleteFeature(feature);
};

proto.getVectorLayer = function() {
  return this._vectorLayer;
};

proto.getEditVectorLayer = function() {
  return this._editVectorLayer;
};

proto.generateId = function() {
  return this._newPrefix+Date.now();
};

proto.isNewFeature = function(fid) {
  if (fid) {
    return fid.toString().indexOf(this._newPrefix) == 0;
  }
  return true;
};

proto._isCompatibleType = function(geometrytype) {
  return this._geometrytypes.indexOf(geometrytype) > -1;
};
//setta i tools relativi alla geometria del layer vettoriale passato
proto._setToolsForVectorType = function(geometrytype) {
  var self = this;
  var tools = this._toolsForGeometryTypes[geometrytype];
  _.forEach(tools, function(toolClass, tool) {
    //assegnazione
    self._tools[tool] = toolClass;
  })
};

proto._setStarted = function(bool) {
  this._started = bool;
};
// funzione setDirty dell'editor che fa si che questo possa emettere
// l'evento dirty in questo modo psso fare qualcosa quando è stata fatta una modifica
// nei layers dell'editor
proto._setDirty = function(bool) {
  // se non specificato lo setto a vero
  if (_.isNil(bool)) {
    this._dirty = true;
  }
  else {
    this._dirty = bool;
  }
  // emetto l'evento dirty dell'editor
  this.emit("dirty",this._dirty);
};

proto._askConfirmToDeleteEditingListener = function() {
  var self = this;
  this.onbeforeasync('deleteFeature', function(feature, isNew, next) {
    GUI.dialog.confirm("Vuoi eliminare l'elemento selezionato?",function(result){
      next(result);
    })
  });
};

// apre form attributi per i  nserimento
proto._setupAddFeatureAttributesEditingListeners = function(){
  var self = this;
  this.onbeforeasync('addFeature',function(feature,next){
    self._openEditorForm('new',feature,next);
  },100);
};

// apre form attributi per editazione
proto._setupEditAttributesListeners = function() {
  var self = this;
  this.onbeforeasync('pickFeature',function(feature,next){
    self._openEditorForm('old',feature,next);
  });
};

proto._openEditorForm = function(isNew, feature, next) {
  var self = this;
  var fid = feature.getId();
  var vectorLayer = this.getVectorLayer();
  var fields = vectorLayer.getFieldsWithValues(feature);
  // nel caso qualcuno, durante la catena di setterListeners, abbia settato un attributo (solo nel caso di un nuovo inserimento)
  // usato ad esempio nell'editing delle strade, dove viene settato in fase di inserimento/modifica il codice dei campi nod_ini e nod_fin
  var pk = vectorLayer.pk;
  if (pk && _.isNull(this.getField(pk))){
    _.forEach(feature.getProperties(),function(value,attribute){
      var field = self.getField(attribute,fields);
      if(field){
        field.value = value;
      }
    });
  }

  var relationsPromise = this.getRelationsWithValues(feature);
  relationsPromise
    .then(function(relations){
      form = new self._formClass({
        provider: self,
        name: "Edita attributi "+vectorLayer.name,
        id: "attributes-edit-"+vectorLayer.name,
        dataid: vectorLayer.name,
        vectorLayer: vectorLayer,
        pk: vectorLayer.pk,
        isnew: self.isNewFeature(feature.getId()),
        fields: fields,
        relations: relations,
        editor: self,
        buttons:[
          {
            title: "Salva",
            type: "save",
            class: "btn-danger",
            cbk: function(fields, relations){
              self.setFieldsWithValues(feature, fields, relations);
              if (next){
                next(true);
              }
            }
          },
          {
            title: "Cancella",
            type: "cancel",
            class: "btn-primary",
            cbk: function() {
              if (next) {
                next(false);
              }
            }
          }
        ]
      });
      GUI.showForm(form,{
        modal: true,
        closable: false
      });
    })
    .fail(function(){
      if (next){
        next(false);
      }
    })
};

module.exports = Editor;
},{"./editbuffer":21,"./tools/addfeaturetool":24,"./tools/cutlinetool":25,"./tools/deletefeaturetool":26,"./tools/modifyfeaturetool":28,"./tools/movepointtool":29,"./tools/pickfeaturetool":30,"core/g3wobject":31,"core/map/layer/vectorlayer":38,"core/utils/utils":52,"gui/form":74,"gui/gui":76}],23:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var G3WObject = require('core/g3wobject');

// Oggetto RelationEditBuffer
// Utilizzato dall'editor per tenere traccia delle modifiche alle relazioni
// legate alla particolare feature del layer in editing in quel momento
function RelationEditBuffer(editor, relationName) {
  // i due parametry sono l'editor buffer a cui si lega la relazione/i
  //il nome della relazione che non è altro che il nome del layer legato al
  // layer che stiamo editando
  this._relationName = relationName;
  this._editor = editor;
  // buffer degli elementi
  this._elementsBuffer = {};
}
inherit(RelationEditBuffer, G3WObject);

module.exports = RelationEditBuffer;

var proto = RelationEditBuffer.prototype;
// clear Buffer
proto.commit = function() {
  this._clearBuffers();
};
// undoAll Relation
proto.undoAll = function(){
  this._clearBuffers();
};
// distrugge tutte le relaioni
proto.destroy = function(){
  this._clearBuffers();
};
//restituisce il nome della relazione
proto.getRelationName = function(){
  return this._relationName;
};
// genar id della relazione (utile quando si crea una nuova relazione)
proto.generateId = function(){
  return this._editor.generateId();
};

proto.getAddedElements = function() {

};

proto.getDeletedElements = function() {

};

proto.getUpdatedElements = function() {

};
//metodo che fa l'aggiornamento della relazione
proto.updateRelation = function(relation) {
  var self = this;
  // ciclo sugli emeneti della relazione
  _.forEach(relation.elements, function(element) {
    //chiama l'aggiornamento dell'elemento nel buffer
    self._editBuffer(element);
    console.log("Modificata elemento relazione  "+self._relationName +" (ID: "+element.id+" nel buffer");
  })
};
// Modifica elemento nel buffer
proto._editBuffer = function(element) {
  // un elemento con tutti i campi vuoti non lo aggiungo
  var filled = _.some(element.fields, function (field) {
    // verifica se il valore è nullo o undefined
    return !_.isNil(field.value);
  });
  // se sono tutti vuoti
  if (!filled) {
    return;
  }
  // estraggo l'id dell'elemento
  var id = element.id;
  // verifico se esiste già tra le chiavi del buffer degli elementi
  if (!_.has(this._elementsBuffer, id)) {
    // se non esiste come nel caso del buffere delle feature creo l'array associandolo
    // alla chiave id dell'elemento
    this._elementsBuffer[id] = [];
  }
  // aggiungo all'array delle modifiche dell'elelemento
  this._elementsBuffer[id].push(element);
  // richiamo la funzione SetDirty
  this._setDirty(true);
};

// il filtro può essere 'ALL', 'NEW', 'OLD', 'DELETED'
proto.getRelationElements = function(filter,onlyfieldsvalues) {
  var elements = [];
  _.forEach(this._elementsBuffer, function(elementBuffer) {
    // element buffer sono gli arry ( e quindi le modifche) di ogni elemento della
    // relazione
    var element = elementBuffer.slice(-1)[0];
    if (element || (filter=='ALL')) { // lo prenso solo se non Ã¨ null
      if (!filter || (filter && element.state==filter)) {

        if(onlyfieldsvalues) {
          element = _.cloneDeep(element);
          element.fields = _.map(element.fields,function(field){
            return {
              name: field.name,
              value: field.value
            }
          })
        }

        elements.push(element);
      }
    }
  });
  return elements;
};

proto.getRelationElementsOnlyFieldsValues = function(filter) {
  return this.getRelationElements(filter,true);
}

// funzione ha elementi
proto.hasRelationElements = function(){
  var hasEdits = false;
  _.forEach(this._elementsBuffer, function(elementBuffer) {
    hasEdits = hasEdits || (elementBuffer.length > 0);
  });
  return hasEdits;
};
// la funzione setDirty server per far scatenre la funzione
// _setDirtu dall 'editor delle relazioni (qui) all'editor buffer all' editor
proto._setDirty = function(bool) {
  this._editor._setDirty(bool);
};
// non fa altro che risettare gli elements buffer a oggetto vuoto
// e settare _setDirty a false
proto._clearBuffers = function(){
  this._elementsBuffer = {};
  this._setDirty(false);
};
},{"core/g3wobject":31,"core/utils/utils":52}],24:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;

var EditingTool = require('./editingtool');

function AddFeatureTool(editor, options) {

  var options = options || {};
  this._running = false;
  this._busy = false;
  this.source = editor.getEditVectorLayer().getMapLayer().getSource();
  this.drawInteraction = null;
  this._snap = options.snap || null;
  this._snapInteraction = null;
  this._finishCondition = options.finishCondition || _.constant(true);
  this._condition = options.condition || _.constant(true);
  // qui si definiscono i metodi che vogliamo poter intercettare,
  // ed eventualmente bloccare (vedi API G3WObject)
  this.setters = {
    addFeature: {
      fnc: AddFeatureTool.prototype._addFeature,
      fallback: AddFeatureTool.prototype._fallBack
    }
  };
  
  base(this, editor);
}

inherit(AddFeatureTool, EditingTool);

module.exports = AddFeatureTool;

var proto = AddFeatureTool.prototype;

// metodo eseguito all'avvio del tool
proto.run = function() {
  var self = this;
  //definisce l'interazione che deve essere aggiunta
  this.drawInteraction = new ol.interaction.Draw({
    type: this.editor.getEditVectorLayer().geometrytype,
    source: this.source,
    condition: this._condition,
    finishCondition: this._finishCondition // disponibile da https://github.com/openlayers/ol3/commit/d425f75bea05cb77559923e494f54156c6690c0b
  });
  //aggiunge l'interazione tramite il metodo generale di editor.js
  // che non fa altro che chaimare il mapservice
  this.addInteraction(this.drawInteraction);
  //setta attiva l'interazione
  this.drawInteraction.setActive(true);
  // viene settato sull'inizio del draw l'evento drawstart dell'editor
  this.drawInteraction.on('drawstart',function(e) {
    self.editor.emit('drawstart',e);
  });
  // viene settato l'evento drawend
  this.drawInteraction.on('drawend', function(e) {
    self.editor.emit('drawend',e);
    if (!self._busy) {
      self._busy = true;
      self.pause();
      //viene chiamato l'addFeature del che  tool (modificata da G3wobject) che
      // chiama l'addfeature del buffer
      // il metodo (essendo un "setter") scatena gli eventuali listeners
      // dati da onbefore, onafter, onbeforeasync
      self.addFeature(e.feature);
    }
  });
  //snapping
  if (this._snap) {
    this._snapInteraction = new ol.interaction.Snap({
      source: this._snap.vectorLayer.getSource()
    });
    this.addInteraction(this._snapInteraction);
  }
};
//metodo pausa
proto.pause = function(pause) {
  // se non definito o true disattiva (setActive false) le iteractions
  if (_.isUndefined(pause) || pause) {
    if (this._snapInteraction) {
      this._snapInteraction.setActive(false);
    }
    this.drawInteraction.setActive(false);
  }
  else {
    if (this._snapInteraction) {
      this._snapInteraction.setActive(true);
    }
    this.drawInteraction.setActive(true);
  }
};

// metodo eseguito alla disattivazione del tool
proto.stop = function() {
  //rimuove e setta a null la _snapInteraction
  if (this._snapInteraction) {
     this.removeInteraction(this._snapInteraction);
     this._snapInteraction = null;
  }
  //rimove l'interazione e setta a null drawInteracion
  this.removeInteraction(this.drawInteraction);
  this.drawInteraction = null;
  return true;
};

proto.removeLastPoint = function() {
  if (this.drawInteraction) {
    // provo a rimuovere l'ultimo punto. Nel caso non esista la geometria gestisco silenziosamente l'errore
    try{
      this.drawInteraction.removeLastPoint();
    }
    catch (e) {
      //
    }
  }
};
// add Feature fnc setter function
proto._addFeature = function(feature) {
  // aggiungo la geometria nell'edit buffer
  console.log('add Feature add Feature Tool');
  this.editor.addFeature(feature);
  this._busy = false;
  this.pause(false);
  return true;
};
// funzione di call back del setter addFeature
proto._fallBack = function(feature) {
  this._busy = false;
  // rimuovo l'ultima feature inserita, ovvero quella disegnata ma che non si vuole salvare
  this.source.getFeaturesCollection().pop();
  this.pause(false);
};

},{"./editingtool":27,"core/utils/utils":52}],25:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var geom = require('core/geometry/geom');
var PickFeatureInteraction = require('g3w-ol3/src/interactions/pickfeatureinteraction');
var PickCoordinatesInteraction = require('g3w-ol3/src/interactions/pickcoordinatesinteraction');

var EditingTool = require('./editingtool');

function CutLineTool(editor,options){
  this.setters = {
    cutLine: CutLineTool.prototype._cutLine
  };
  
  base(this,editor,options);
  
  var self = this;
  this.isPausable = true;
  this.steps = new EditingTool.Steps(CutLineTool.steps);
  
  this._origFeature = null;
  this._origGeometry = null;
  this._newFeatures = [];
  this._linePickInteraction = null;
  this._pointPickInteraction = null;
  this._selectLineToKeepInteraction = null;
  this._pointLayer = options.pointLayer || null;
  this._minCutPointDistance = options.minCutPointDistance || Infinity;
  this._modType = options.modType || 'MODONCUT'; // 'NEWONCUT' | 'MODONCUT'
  
  this._selectedLineOverlay = new ol.layer.Vector({
    source: new ol.source.Vector(),
    style: new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgb(255,255,0)',
        width: 4
      })
    })
  });
  
  //var cutLineIdx = 0;
  //var cutLineColors = ['rgb(255,0,0)','rgb(0,0,255)']
  this._lineToKeepOverlay = new ol.layer.Vector({
    source: new ol.source.Vector(),
    /*style: function(feature){ 
      cutLineIdx += 1;
      return [new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: cutLineColors[cutLineIdx%2],
          width: 4
        })
      })]
    }*/
  });

  
}
inherit(CutLineTool,EditingTool);
module.exports = CutLineTool;

var proto = CutLineTool.prototype;

proto.run = function(){
  var self = this;
  
  this._linePickInteraction = new PickFeatureInteraction({
    layers: [this.layer,this.editingLayer]
  });
  
  this.addInteraction(this._linePickInteraction);
  
  // seleziono la linea da tagliare
  self.steps.next();
  this._linePickInteraction.on('picked',function(e){
    var cutFeature;
    var feature = self._origFeature = e.feature;
    self._origGeometry = feature.getGeometry().clone();
    self._showSelection(self._origGeometry,300);
    self.removeInteraction(this);

    
    if (self._pointLayer){
      self._pointPickInteraction = new PickFeatureInteraction({
        layers: [self._pointLayer]
      });
    }
    else {
      self._pointPickInteraction = new PickCoordinatesInteraction();
    }
    
    // pesco coordinata o feature di taglio selezionata
    self.steps.next();
    self._pointPickInteraction.on('picked',function(e){
      self.removeInteraction(this);
      var coordinate;
      if (e.feature){
        cutFeature = e.feature;
        coordinate = cutFeature.getGeometry().getCoordinates();
      }
      else {
        coordinate = e.coordinate;
      }
      if (coordinate){
        // snappo sulla linea
        var closestCoordinate = feature.getGeometry().getClosestPoint(coordinate);
        var distance = geom.distance(coordinate,closestCoordinate);
        // se lo snap è entro la tolleranza
        if (distance < self._minCutPointDistance){
          // taglio la linea e ottengo l'array con le due nuove feature
          var slicedLines = self._cut(feature.getGeometry(),closestCoordinate);
          if (slicedLines){
            var prevLineFeature = slicedLines[0];
            var nextLineFeature = slicedLines[1];
            
            var newId = self.editor.generateId();
            prevLineFeature.setId(newId+'_1');
            nextLineFeature.setId(newId+'_2');
            
            // prendo le proprietà della feature originale (esclusa la geometria)
            var origProperties = feature.getProperties();
            delete origProperties[feature.getGeometryName()];
            
            self._showSelection(prevLineFeature.getGeometry(),300);
            setTimeout(function(){
              self._showSelection(nextLineFeature.getGeometry(),300);
            },300)
            
            // nel caso di modifica su taglio
            if (self._modType == 'MODONCUT'){
              // seleziono la porzione da mantenere/modificare
              self.steps.next();
              self._selectLineToKeep(prevLineFeature,nextLineFeature)
              .then(function(featureToKeep){
                // aggiorno la feature originale con la geometria della feature che si è selezionato da mantenere
                feature.setGeometry(featureToKeep.getGeometry().clone());
                
                var featureToAdd;
                
                // rimuovo una delle due nuove feature e mi tengo l'unica feature da aggiungere come nuova
                if (prevLineFeature.getId() == featureToKeep.getId()){
                  delete prevLineFeature;
                  featureToAdd = nextLineFeature;
                }
                else if (nextLineFeature.getId() == featureToKeep.getId()){
                  delete nextLineFeature;
                  featureToAdd = prevLineFeature;
                }
                
                self._newFeatures.push(featureToAdd);
                
                // tramite l'editor assegno alla nuova feature gli stessi attributi dell'altra, originale, modificata
                featureToAdd.setProperties(origProperties);
                // e la aggiungo al layer di editing, così mi viene mostrata come nuova feature sulla mappa
                self.editingLayer.getSource().addFeatures([featureToAdd]);
                
                var data = {
                  added: [featureToAdd],
                  updated: feature,
                  cutfeature:cutFeature
                }
                
                // a questo punto avvio il setter, che si occuperò di aggiornare l'editbuffer a seconda del tipo di modifica
                self.cutLine(data,self._modType)
                .fail(function(){
                  self._rollBack();
                  self.rerun();
                })
              })
            }
            else {
              // nel caso la modifica sia aggiungo su taglia, allora rimuovo l'originale e aggiungo le due nuove feature
              self.layer.getSource().removeFeature(feature);
              //self.editor.setAttributes(prevLineFeature,origProperties);
              //self.editor.setAttributes(nextLineFeature,origProperties);
              self._newFeatures.push(prevLineFeature);
              self._newFeatures.push(nextLineFeature);
              self.editingLayer.getSource().addFeatures([featureToAdd,prevLineFeature]);
              
              var data = {
                added: [prevLineFeature,nextLineFeature],
                removed: feature
              }
              
              self.cutLine(data,self._modType)
              .fail(function(){
                self._rollBack();
                self.rerun();
              })
            }
          }
          else {
            self.rerun();
          }
        }
      }
    })
    self.addInteraction(self._pointPickInteraction);
  });
};

proto.pause = function(pause){
  if (_.isUndefined(pause) || pause){
    this._linePickInteraction.setActive(false);
    this._pointPickInteraction.setActive(false);
  }
  else {
    this._linePickInteraction.setActive(true);
    this._pointPickInteraction.setActive(true);
  }
};

proto.rerun = function(){
  this.stop();
  this.run();
};

proto.stop = function(){
  this._cleanUp();
  
  var stop = EditingTool.prototype.stop.call(this);
  
  if (stop) {
    this.removeInteraction(this._linePickInteraction);
    this.removeInteraction(this._pointPickInteraction);
    this._linePickInteraction = null;
    this._pointPickInteraction = null;
  }

  return stop;
};

proto._cleanUp = function(){
  this._origFeature = null;
  this._origGeometry = null;
  this._newFeatures = [];
  this._lineToKeepOverlay.setMap(null);
  this._selectedLineOverlay.setMap(null);
};

proto._rollBack = function(){
  // rimetto la vecchia geometria
  this._origFeature.setGeometry(this._origGeometry);
  // rimuovo le feature (nuove) editate dal layer di editazione
  try {
    _.forEach(this._newFeatures,function(feature){
      self.editingLayer.getSource().removeFeature(feature);
    });
  }
  catch (e) {};
};

proto._cutLine = function(data,modType){
  // se modifico su taglio aggiorno la vecchia feature e aggiungo la nuova
  if (modType == 'MODONCUT'){
    var featureToUpdate = data.updated;
    var featureToAdd = data.added[0];
    this.editor.updateFeature(featureToUpdate);
    this.editor.addFeature(featureToAdd);
  }
  // altrimenti rimuovo la vecchia e aggiungo le nuove
  else{
    var featureToRemove = data.removed;
    var featureToAdd1 = data.added[0];
    var featureToAdd2 = data.added[1];
    this.editor.deleteFeature(featureToRemove);
    this.editor.addFeature(featureToAdd1);
    this.editor.addFeature(featureToAdd2);
  }
  this._busy = false;
  this.pause(false);
  this.steps.completed();
  this.rerun();
  return true;
};

proto._selectLineToKeep = function(prevLineFeature,nextLineFeature){
  var d = $.Deferred();
  var self = this;
  var layer = this._lineToKeepOverlay;
  layer.getSource().addFeatures([prevLineFeature,nextLineFeature]);
  layer.setMap(this.editor.getMapService().viewer.map);
  
  var selectLineInteraction = new PickFeatureInteraction({
    layers: [this._lineToKeepOverlay],
  });
  this.addInteraction(selectLineInteraction);
  
  selectLineInteraction.on('picked',function(e){
    layer.setMap(null);
    self.removeInteraction(this);
    d.resolve(e.feature);
  });
  
  return d.promise();
};

proto._fallBack = function(feature){
  this._busy = false;
  this.pause(false);
};

proto._cut = function(geometry,cutCoordinate){
  while (cutCoordinate.length < geometry.getStride()) {
    cutCoordinate.push(0);
  }

  var minDistance = Infinity;
  var closestIndex = 0;
  var index = 0;
  // cerco l'indice del segmento lineare su cui ricade la coordinata di taglio
  geometry.forEachSegment(function(v0,v1){
    var segmentPoint = geom.closestOnSegment(cutCoordinate,[v0,v1]);
    var distance = geom.distance(cutCoordinate,segmentPoint);
    if (distance < minDistance){
      minDistance = distance;
      closestIndex = index;
    }
    index += 1;
  })
  
  var coordinates = geometry.getCoordinates();
  // prendo la prima porzione di coordinate
  var prevCoords = coordinates.slice(0,closestIndex+1);
  // aggiungo la coordinata di taglio alla prima porzione
  prevCoords.splice(prevCoords.length,0,cutCoordinate);
  // prendo la seconda porzione di coordinate
  var nextCoords = coordinates.slice(closestIndex);
  // aggiungo la coordinata di taglio alla seconda porzione
  nextCoords.splice(0,1,cutCoordinate);
  
  if (prevCoords.length < 2 || nextCoords.length < 2){
    return false;
  }
  
  // creo le geometrie
  var prevLine = new ol.geom.LineString();
  prevLine.setCoordinates(prevCoords);
  var nextLine = new ol.geom.LineString();
  nextLine.setCoordinates(nextCoords);
  
  // creo le nuove feature
  var prevLineFeat = new ol.Feature({
    geometry: prevLine
  });
  var nextLineFeat = new ol.Feature({
    geometry: nextLine
  });
  
  return [prevLineFeat,nextLineFeat];
};


// TODO questo andrà spostato dentro MapService o comunque in una libreria core
proto._showSelection = function(geometry,duration){
  var self = this;
  var duration = duration || null;
  var overlay = this._selectedLineOverlay;
  
  var feature = new ol.Feature();
  feature.setGeometry(geometry);
  overlay.getSource().addFeatures([feature]);
  overlay.setMap(this.editor.getMapService().viewer.map);
  if(duration){
    setTimeout(function(){
      overlay.setMap(null);
      self._selectedLineOverlay.getSource().clear();
    },duration);
  }
};

proto._isNew = function(feature){
  return (!_.isNil(this.editingLayer.getSource().getFeatureById(feature.getId())));
};

CutLineTool.steps = [
  {
    type: "selectline"
  },
  {
    type: "selectcutpoint"
  },
  {
    type: "selectparttokeep"
  }
]

},{"./editingtool":27,"core/geometry/geom":32,"core/utils/utils":52,"g3w-ol3/src/interactions/pickcoordinatesinteraction":61,"g3w-ol3/src/interactions/pickfeatureinteraction":62}],26:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var DeleteInteraction = require('g3w-ol3/src/interactions/deletefeatureinteraction');
var GUI = require('gui/gui');

var EditingTool = require('./editingtool');

function DeleteFeatureTool(editor) {
  var self = this;
  this.editor = editor;
  this.isPausable = true;
  this.drawInteraction = null;
  this.layer = null;
  this.editingLayer = null;

  this.setters = {
    deleteFeature: DeleteFeatureTool.prototype._deleteFeature
  };
  
  base(this,editor);
}
inherit(DeleteFeatureTool, EditingTool);
module.exports = DeleteFeatureTool;

var proto = DeleteFeatureTool.prototype;

/* BRUTTISSIMO! Tocca ridefinire tutte le parti internet di OL3 non esposte dalle API */

ol.geom.GeometryType = {
  POINT: 'Point',
  LINE_STRING: 'LineString',
  LINEAR_RING: 'LinearRing',
  POLYGON: 'Polygon',
  MULTI_POINT: 'MultiPoint',
  MULTI_LINE_STRING: 'MultiLineString',
  MULTI_POLYGON: 'MultiPolygon',
  GEOMETRY_COLLECTION: 'GeometryCollection',
  CIRCLE: 'Circle'
};

var styles = {};
var white = [255, 255, 255, 1];
var blue = [0, 153, 255, 1];
var red = [255, 0, 0, 1];
var width = 3;
styles[ol.geom.GeometryType.POLYGON] = [
  new ol.style.Style({
    fill: new ol.style.Fill({
      color: [255, 255, 255, 0.5]
    })
  })
];
styles[ol.geom.GeometryType.MULTI_POLYGON] =
    styles[ol.geom.GeometryType.POLYGON];

styles[ol.geom.GeometryType.LINE_STRING] = [
  new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: white,
      width: width + 2
    })
  }),
  new ol.style.Style({
    stroke: new ol.style.Stroke({
      color: red,
      width: width
    })
  })
];
styles[ol.geom.GeometryType.MULTI_LINE_STRING] =
    styles[ol.geom.GeometryType.LINE_STRING];

styles[ol.geom.GeometryType.CIRCLE] =
    styles[ol.geom.GeometryType.POLYGON].concat(
        styles[ol.geom.GeometryType.LINE_STRING]
    );


styles[ol.geom.GeometryType.POINT] = [
  new ol.style.Style({
    image: new ol.style.Circle({
      radius: width * 2,
      fill: new ol.style.Fill({
        color: red
      }),
      stroke: new ol.style.Stroke({
        color: white,
        width: width / 2
      })
    }),
    zIndex: Infinity
  })
];
styles[ol.geom.GeometryType.MULTI_POINT] =
    styles[ol.geom.GeometryType.POINT];

styles[ol.geom.GeometryType.GEOMETRY_COLLECTION] =
    styles[ol.geom.GeometryType.POLYGON].concat(
        styles[ol.geom.GeometryType.LINE_STRING],
        styles[ol.geom.GeometryType.POINT]
    );


styles[ol.geom.GeometryType.POLYGON] = _.concat(styles[ol.geom.GeometryType.POLYGON],styles[ol.geom.GeometryType.LINE_STRING]);
styles[ol.geom.GeometryType.GEOMETRY_COLLECTION] = _.concat(styles[ol.geom.GeometryType.GEOMETRY_COLLECTION],styles[ol.geom.GeometryType.LINE_STRING]);
    
/* FINE BRUTTISSIMO! */

proto.run = function() {
  var self = this;
  this.layer = this.editor.getVectorLayer().getMapLayer();
  this.editingLayer = this.editor.getEditVectorLayer().getMapLayer();
  
  this._selectInteraction = new ol.interaction.Select({
    layers: [this.layer,this.editingLayer],
    condition: ol.events.condition.click,
    style: function(feature, resolution) {
      return styles[feature.getGeometry().getType()];
    }
  });
  this.addInteraction(this._selectInteraction);
  
  this._deleteInteraction = new DeleteInteraction({
    features: this._selectInteraction.getFeatures()
  });
  this.addInteraction(this._deleteInteraction);
  
  var origGeometry = null;
  
  /*this._selectInteraction.on('select',function(e){
    var feature = e.selected[0];
    origGeometry = feature.getGeometry();
  });*/
  
  this._deleteInteraction.on('deleteend',function(e){
    var feature = e.features.getArray()[0];
    var isNew = self._isNew(feature);
    //try {
      if (!self._busy){
        self._busy = true;
        self.pause(true);
        self.deleteFeature(feature,isNew)
        .always(function(){
          self._busy = false;
          self.pause(false);
        })
      }
    //}
    /*catch (error){
      console.log(error);
      feature.setGeometry(origGeometry);
    }*/
  });

};

proto.pause = function(pause){
  if (_.isUndefined(pause) || pause){
    this._selectInteraction.setActive(false);
    this._deleteInteraction.setActive(false);
  }
  else {
    this._selectInteraction.setActive(true);
    this._deleteInteraction.setActive(true);
  }
};

proto.stop = function(){
  this._selectInteraction.getFeatures().clear();
  this.removeInteraction(this._selectInteraction);
  this._selectInteraction = null;
  this.removeInteraction(this._deleteInteraction);
  this._deleteInteraction = null;
  return true;
};

proto._deleteFeature = function(feature,isNew){
  this.editor.deleteFeature(feature,isNew);
  this._selectInteraction.getFeatures().clear();
  this._busy = false;
  this.pause(false);
  return true;
};

proto._fallBack = function(feature){
  this._busy = false;
  this.pause(false);
};

proto._isNew = function(feature){
  return (!_.isNil(this.editingLayer.getSource().getFeatureById(feature.getId())));
};

},{"./editingtool":27,"core/g3wobject":31,"core/utils/utils":52,"g3w-ol3/src/interactions/deletefeatureinteraction":60,"gui/gui":76}],27:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

// CLASSE PADRE DI TUTTI GLI EDITING TOOL
function EditingTool(editor, options) {

  this._interactions = [];
  this.editor = editor;
  this.layer = this.editor.getVectorLayer().getMapLayer();
  this.editingLayer = this.editor.getEditVectorLayer().getMapLayer();
  this.options = options || {};
  this.steps = null;
  
  base(this);
}

inherit(EditingTool, G3WObject);

var proto = EditingTool.prototype;

proto.addInteraction = function(interaction) {
  var mapService = this.editor.getMapService();
  mapService.addInteraction(interaction);
  this._interactions.push(interaction);
};

proto.removeInteraction = function(interaction) {
  var _interactions = this._interactions;
  var mapService = this.editor.getMapService();
  _.forEach(_interactions,function(_interaction,idx) {
    if (_interaction == interaction) {
      _interactions.splice(idx,1);
    }
  });
  mapService.removeInteraction(interaction);
};

proto.ownsInteraction = function(interaction) {
  var owns = false;
  _.forEach(this._interactions, function(_interaction) {
    if (_interaction == interaction) {
      owns = true;
    }
  });
  return owns;
};

proto.stop = function(){
  if (this.steps) {
    this.steps.destroy();
  }
  return true;
};

// metodo che deve essere sovrascritto dalle
// sottoclassi
proto.run = function() {
  console.log('Se appare quasto messaggio significa che non è stato sovrascritto il metodo run() dalla sottoclasse');
};

EditingTool.Steps = function(steps) {
  var index = -1;
  //ARRAY
  var steps = steps;
  
  this.next = function(){
    index += 1;
    var step = steps[index];
    this.emit('step', index, step);
  };
  
  this.currentStep = function() {
    return steps[index];
  };
  
  this.currentStepIndex = function(){
    return index;
  };
  
  this.totalSteps = function(){
    return steps.length;
  };
  
  this.reset = function(){
    index = 0;
  };
  
  this.destroy = function(){
    this.removeAllListeners();
  };
  
  this.completed = function(){
    this.emit('complete');
    this.reset();
  };
  
  this.insertStepAt = function(idx,step){
    steps.splice(idx,0,step);
  }
};

inherit(EditingTool.Steps,G3WObject);

module.exports = EditingTool;

},{"core/g3wobject":31,"core/utils/utils":52}],28:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

var EditingTool = require('./editingtool');

function ModifyFeatureTool(editor,options){
  var self = this;
  this.editor = editor;
  this.isPausable = true;
  this.drawInteraction = null;
  this.layer = null;
  this.editingLayer = null;
  this._deleteCondition = options.deleteCondition || undefined;
  this._snap = options.snap || null;
  this._snapInteraction = null; 

  this.setters = {
    modifyFeature: ModifyFeatureTool.prototype._modifyFeature
  };
  
  base(this,editor);
}
inherit(ModifyFeatureTool,EditingTool);
module.exports = ModifyFeatureTool;

var proto = ModifyFeatureTool.prototype;

proto.run = function(){
  var self = this;
  this.layer = this.editor.getVectorLayer().getMapLayer();
  this.editingLayer = this.editor.getEditVectorLayer().getMapLayer();
  
  this._selectInteraction = new ol.interaction.Select({
    layers: [this.layer,this.editingLayer],
  });
  this.addInteraction(this._selectInteraction);
  
  this._modifyInteraction = new ol.interaction.Modify({
    features: this._selectInteraction.getFeatures(),
    deleteCondition: this._deleteCondition,
  });
  this.addInteraction(this._modifyInteraction);
  
  var origGeometry = null;
  
  this._modifyInteraction.on('modifystart',function(e){
    var feature = e.features.getArray()[0];
    origGeometry = feature.getGeometry().clone();
  });
  
  this._modifyInteraction.on('modifyend',function(e){
    var feature = e.features.getArray()[0];
    var isNew = self._isNew(feature);
    //try {
      if (!self._busy){
        self._busy = true;
        self.pause(true);
        self.modifyFeature(feature,isNew)
        .fail(function(){
          feature.setGeometry(origGeometry);
        })
        .always(function(){
          self._busy = false;
          self.pause(false);
        })
      }
  });
  
  if (this._snap){
    this._snapInteraction = new ol.interaction.Snap({
      source: this._snap.vectorLayer.getSource()
    });
    this.addInteraction(this._snapInteraction);
  }
};

proto.pause = function(pause){
  if (_.isUndefined(pause) || pause){
    if (this._snapInteraction){
      this._snapInteraction.setActive(false);
    }
    this._selectInteraction.setActive(false);
    this._modifyInteraction.setActive(false);
  }
  else {
    if (this._snapInteraction){
      this._snapInteraction.setActive(true);
    }
    this._selectInteraction.setActive(true);
    this._modifyInteraction.setActive(true);
  }
};

proto.stop = function(){
  this._selectInteraction.getFeatures().clear();
  if (this._snapInteraction){
     this.removeInteraction(this._snapInteraction);
     this._snapInteraction = null;
  }
  this.removeInteraction(this._selectInteraction);
  this._selectInteraction = null;
  this.removeInteraction(this._modifyInteraction);
  this._modifyInteraction = null;
  return true;
};

proto._modifyFeature = function(feature,isNew){
  // aggionro la geometria nel buffer di editing
  this.editor.updateFeature(feature,isNew);
  this._selectInteraction.getFeatures().clear();
  this._busy = false;
  this.pause(false);
  return true;
};

proto.removePoint = function(coordinate){
  if (this._modifyInteraction){
    // provo a rimuovere l'ultimo punto. Nel caso non esista la geometria gestisco silenziosamente l'errore
    try{
      this._modifyInteraction.removePoint();
    }
    catch (e){
      console.log(e);
    }
  }
};

proto._fallBack = function(feature){
  this._busy = false;
  this.pause(false);
};

proto._isNew = function(feature){
  return (!_.isNil(this.editingLayer.getSource().getFeatureById(feature.getId())));
};

},{"./editingtool":27,"core/g3wobject":31,"core/utils/utils":52}],29:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;

var EditingTool = require('./editingtool');

function MoveFeatureTool(editor){
  var self = this;
  this.editor = editor;
  this.isPausable = true;
  this.drawInteraction = null;
  this.layer = null;
  this.editingLayer = null;
  
  this._origGeometry = null;

  this.setters = {
    moveFeature: {
      fnc: MoveFeatureTool.prototype._moveFeature,
      fallback: MoveFeatureTool.prototype._fallBack
    }
  };
  
  base(this,editor);
}
inherit(MoveFeatureTool,EditingTool);
module.exports = MoveFeatureTool;

var proto = MoveFeatureTool.prototype;

proto.run = function(){
  var self = this;
  this.layer = this.editor.getVectorLayer().getMapLayer();
  this.editingLayer = this.editor.getEditVectorLayer().getMapLayer();
  
  this._selectInteraction = new ol.interaction.Select({
    layers: [this.layer,this.editingLayer],
    condition: ol.events.condition.click
  });
  this.addInteraction(this._selectInteraction);
  
  this._translateInteraction = new ol.interaction.Translate({
    features: this._selectInteraction.getFeatures()
  });
  this.addInteraction(this._translateInteraction);
  
  this._translateInteraction.on('translatestart',function(e){
    var feature = e.features.getArray()[0];
    self._origGeometry = feature.getGeometry().clone();
    self.editor.emit('movestart',feature);
  });
  
  this._translateInteraction.on('translateend',function(e){
    var feature = e.features.getArray()[0];
    //try {
      if (!self._busy){
        self._busy = true;
        self.pause();
        self.moveFeature(feature)
        .then(function(res){
          self.pause(false);
        })
        .fail(function(){
          feature.setGeometry(self._origGeometry);
        });
      }
    //}
    /*catch (error){
      console.log(error);
      feature.setGeometry(self._origGeometry);
    }*/
  });

};

proto.pause = function(pause){
  if (_.isUndefined(pause) || pause){
    this._selectInteraction.setActive(false);
    this._translateInteraction.setActive(false);
  }
  else {
    this._selectInteraction.setActive(true);
    this._translateInteraction.setActive(true);
  }
};

proto.stop = function(){
  this._selectInteraction.getFeatures().clear();
  this.removeInteraction(this._selectInteraction);
  this._selectInteraction = null;
  this.removeInteraction(this._translateInteraction);
  this._translateInteraction = null;
  return true;
};

proto._moveFeature = function(feature){
  this.editor.emit('moveend',feature);
  this.editor.updateFeature(feature);
  this._selectInteraction.getFeatures().clear();
  this._busy = false;
  this.pause(false);
  return true;
};

proto._fallBack = function(feature){
  this._busy = false;
  this.pause(false);
};

},{"./editingtool":27,"core/utils/utils":52}],30:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var noop = require('core/utils/utils').noop;
var PickFeatureInteraction = require('g3w-ol3/src/interactions/pickfeatureinteraction');

var EditingTool = require('./editingtool');

function PickFeatureTool(editor){
  var self = this;
  this.isPausable = true;
  this.pickFeatureInteraction = null;
  this._running = false;
  this._busy = false;
  
  // qui si definiscono i metodi che vogliamo poter intercettare, ed eventualmente bloccare (vedi API G3WObject)
  this.setters = {
    pickFeature: {
      fnc: noop,
      fallback: PickFeatureTool.prototype._fallBack
    },
  };
  
  base(this, editor);
}
inherit(PickFeatureTool, EditingTool);

module.exports = PickFeatureTool;

var proto = PickFeatureTool.prototype;

// metodo eseguito all'avvio del tool
proto.run = function() {
  var self = this;
  var layers = [this.editor.getVectorLayer().getMapLayer(),this.editor.getEditVectorLayer().getMapLayer()];
  this.pickFeatureInteraction = new PickFeatureInteraction({
    layers: layers
  });
  
  this.pickFeatureInteraction.on('picked',function(e){
    if (!self._busy){
      self._busy = true;
      self.pause(true);
      self.pickFeature(e.feature)
      .then(function(res){
        self._busy = false;
        self.pause(false);
      })
    }
  });
  
  this.addInteraction(this.pickFeatureInteraction);
};

proto.pause = function(pause){
  if (_.isUndefined(pause) || pause){
    this.pickFeatureInteraction.setActive(false);
  }
  else {
    this.pickFeatureInteraction.setActive(true);
  }
};

// metodo eseguito alla disattivazione del tool
proto.stop = function(){
  this.removeInteraction(this.pickFeatureInteraction);
  this.pickFeatureInteraction = null;
  return true;
};

proto._fallBack = function(feature){
  this._busy = false;
  this.pause(false);
};

},{"./editingtool":27,"core/utils/utils":52,"g3w-ol3/src/interactions/pickfeatureinteraction":62}],31:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var noop = require('core/utils/utils').noop;

/**
 * Un oggetto base in grado di gestire eventuali setter e relativa catena di listeners.
 * @constructor
 */
var G3WObject = function(){
  if (this.setters){
    this._setupListenersChain(this.setters);
  }
};
inherit(G3WObject,EventEmitter);

var proto = G3WObject.prototype;

/**
 * Inserisce un listener dopo che è stato eseguito il setter
 * @param {string} setter - Il nome del metodo su cui si cuole registrare una funzione listener
 * @param {function} listener - Una funzione listener (solo sincrona)
 * @param {number} priority - Priorità di esecuzione: valore minore viene eseuito prima
 */
proto.onafter = function(setter,listener,priority){
  return this._onsetter('after',setter,listener,false,priority);
};

// un listener può registrarsi in modo da essere eseguito PRIMA dell'esecuzione del metodo setter. Può ritornare true/false per
// votare a favore o meno dell'esecuzione del setter. Se non ritorna nulla o undefined, non viene considerato votante
/**
 * Inserisce un listener prima che venga eseguito il setter. Se ritorna false il setter non viene eseguito
 * @param {string} setter - Il nome del metodo su cui si cuole registrare una funzione listener
 * @param {function} listener - Una funzione listener, a cui viene passato una funzione "next" come ultimo parametro, da usare nel caso di listener asincroni
 * @param {number} priority - Priorità di esecuzione: valore minore viene eseuito prima
 */
proto.onbefore = function(setter,listener,priority){
  return this._onsetter('before',setter,listener,false,priority);
};

/**
 * Inserisce un listener prima che venga eseguito il setter. Al listener viene passato una funzione "next" come ultimo parametro, da chiamare con parametro true/false per far proseguire o meno il setter
 * @param {string} setter - Il nome del metodo su cui si cuole registrare una funzione listener
 * @param {function} listener - Una funzione listener, a cui
 * @param {number} priority - Priorità di esecuzione: valore minore viene eseuito prima
 */
proto.onbeforeasync = function(setter,listener,priority){
  return this._onsetter('before',setter,listener,true,priority);
};

proto.un = function(setter,key){
  _.forEach(this.settersListeners,function(settersListeners){
    _.forEach(settersListeners[setter],function(setterListener,idx){
      if(setterListener.key == key){
        settersListeners[setter].slice(idx,1);
      }
    })
  })
};

proto._onsetter = function(when,setter,listener,async,priority){ /*when=before|after, type=sync|async*/
  var settersListeners = this.settersListeners[when];
  var listenerKey = ""+Math.floor(Math.random()*1000000)+""+Date.now();
  /*if ((when == 'before') && !async){
    listener = this._makeChainable(listener);
  }*/

  priority = priority || 0;

  var settersListeneres = settersListeners[setter];

  settersListeneres.push({
    key: listenerKey,
    fnc: listener,
    async: async,
    priority: priority
  });

  settersListeners[setter] = _.sortBy(settersListeneres,function(setterListener){
    return setterListener.priority;
  });

  return listenerKey;
  //return this.generateUnListener(setter,listenerKey);
};

// trasformo un listener sincrono in modo da poter essere usato nella catena di listeners (richiamando next col valore di ritorno del listener)
/*proto._makeChainable = function(listener){
  var self = this
  return function(){
    var args = Array.prototype.slice.call(arguments);
    // rimuovo next dai parametri prima di chiamare il listener
    var next = args.pop();
    var canSet = listener.apply(self,arguments);
    var _canSet = true;
    if (_.isBoolean(canSet)){
      _canSet = canSet;
    }
    next(canSet);
  }
};*/

proto._setupListenersChain = function(setters){
  // inizializza tutti i metodi definiti nell'oggetto "setters" della classe figlia.
  var self = this;
  this.settersListeners = {
    after:{},
    before:{}
  };
  // per ogni setter viene definito l'array dei listeners e fiene sostituito il metodo originale con la funzioni che gestisce la coda di listeners
  _.forEach(setters,function(setterOption,setter){
    var setterFnc = noop;
    var setterFallback = noop;
    if (_.isFunction(setterOption)){
      setterFnc = setterOption
    }
    else {
      setterFnc = setterOption.fnc;
      setterFallback = setterOption.fallback || noop;
    }
    self.settersListeners.after[setter] = [];
    self.settersListeners.before[setter] = [];
    // setter sostituito
    self[setter] = function(){
      var args = arguments;
      // eseguo i listener registrati per il before
      var deferred = $.Deferred();
      var returnVal = null;
      var counter = 0;
      var canSet = true;
      
      function complete(){
        // eseguo la funzione
        returnVal = setterFnc.apply(self,args);
        // e risolvo la promessa (eventualmente utilizzata da chi ha invocato il setter
        deferred.resolve(returnVal);
        
        var afterListeners = self.settersListeners.after[setter];
        _.forEach(afterListeners,function(listener){
          listener.fnc.apply(self,args);
        })
      }
      
      function abort(){
          // se non posso proseguire ...
          // chiamo l'eventuale funzione di fallback
          setterFallback.apply(self,args);
          // e rigetto la promessa
          deferred.reject();
      }
      
      var beforeListeners = self.settersListeners['before'][setter];
      // contatore dei listener che verrà decrementato ad ogni chiamata a next()
      counter = 0;
      
      // funzione passata come ultimo parametro ai listeners, che ***SE SONO STATI AGGIUNTI COME ASINCRONI la DEVONO*** richiamare per poter proseguire la catena
      function next(bool){
        var cont = true;
        if (_.isBoolean(bool)){
          cont = bool;
        }
        var _args = Array.prototype.slice.call(args);
        // se la catena è stata bloccata o se siamo arrivati alla fine dei beforelisteners
        if (cont === false || (counter == beforeListeners.length)){
          if(cont === false)
            abort.apply(self,args);
          else{
            completed = complete.apply(self,args);
            if(_.isUndefined(completed) || completed === true){
              self.emitEvent('set:'+setter,args);
            }
          }
        }
        else {
          if (cont){
            var listenerFnc = beforeListeners[counter].fnc;
            if (beforeListeners[counter].async){
              // aggiungo next come ulitmo parametro
              _args.push(next);
              counter += 1;
              listenerFnc.apply(self,_args)
            }
            else {
              var _cont = listenerFnc.apply(self,_args);
              counter += 1;
              next(_cont);
            }
          }
        }
      }
      
      next();
      return deferred.promise();
    }
  })
};

proto.un = function(listenerKey) {
  _.forEach(this.settersListeners,function(setterListeners){
      _.forEach(setterListeners,function(listener,idx){
        if (listener.key == listenerKey) {
          setterListeners.splice(idx,1);
        }
      })
  })
};

module.exports = G3WObject;

},{"core/utils/utils":52}],32:[function(require,module,exports){
var geom = {
  distance: function(c1,c2){
    return Math.sqrt(geom.squaredDistance(c1,c2));
  },
  squaredDistance: function(c1,c2){
    var x1 = c1[0];
    var y1 = c1[1];
    var x2 = c2[0];
    var y2 = c2[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    return dx * dx + dy * dy;
  },
  closestOnSegment: function(coordinate, segment) {
    var x0 = coordinate[0];
    var y0 = coordinate[1];
    var start = segment[0];
    var end = segment[1];
    var x1 = start[0];
    var y1 = start[1];
    var x2 = end[0];
    var y2 = end[1];
    var dx = x2 - x1;
    var dy = y2 - y1;
    var along = (dx === 0 && dy === 0) ? 0 :
        ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);
    var x, y;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }
}

module.exports = geom;

},{}],33:[function(require,module,exports){
var Geometry = {};

Geometry.GeometryTypes = {
  POINT: "Point",
  MULTIPOINT: "MultiPoint",
  LINESTRING: "Line", // per seguire la definizione di QGis.GeometryType, che definisce Line invece di Linestring.
  MULTILINESTRING: "MultiLine",
  POLYGON: "Polygon",
  MULTIPOLYGON: "MultiPolygon",
  GEOMETRYCOLLECTION: "GeometryCollection"
};

Geometry.SupportedGeometryTypes = [
  Geometry.GeometryTypes.POINT,
  Geometry.GeometryTypes.MULTIPOINT,
  Geometry.GeometryTypes.LINESTRING,
  Geometry.GeometryTypes.MULTILINESTRING,
  Geometry.GeometryTypes.POLYGON,
  Geometry.GeometryTypes.MULTIPOLYGON
]

module.exports = Geometry;

},{}],34:[function(require,module,exports){
function init(config) {
  i18next
  .use(i18nextXHRBackend)
  .init({ 
      lng: 'it',
      ns: 'app',
      fallbackLng: 'it',
      resources: config.resources
  });
  
  jqueryI18next.init(i18next, $, {
    tName: 't', // --> appends $.t = i18next.t
    i18nName: 'i18n', // --> appends $.i18n = i18next
    handleName: 'localize', // --> appends $(selector).localize(opts);
    selectorAttr: 'data-i18n', // selector for translating elements
    targetAttr: 'data-i18n-target', // element attribute to grab target element to translate (if diffrent then itself)
    optionsAttr: 'data-i18n-options', // element attribute that contains options, will load/set if useOptionsAttr = true
    useOptionsAttr: false, // see optionsAttr
    parseDefaultValueFromContent: true // parses default values from content ele.val or ele.text
  });
}
    
var t = function(text){
    var trad = i18next.t(text);
    return trad;
};
    
module.exports = {
  init: init,
  t: t
}

},{}],35:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

function LoaderLayerService() {
    this._layers = {};
    this._type = 'tipo di layers';
    base(this);
}
inherit(LoaderLayerService, G3WObject);

var proto = LoaderLayerService.prototype;

proto.getLoaderType = function() {
    return this._type;
};

proto.getLayers = function() {
  return this._layers;
};

proto.getLayer = function(layerName) {
    return this._layers[layerName];
};

proto.loadLayer = function(url, options) {
  //TODO
};
proto.loadLayers = function() {
  //TODO
};

proto.cleanUpLayers = function() {
  //TODO
};

module.exports = LoaderLayerService;

},{"core/g3wobject":31,"core/utils/utils":52}],36:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var resolvedValue = require('core/utils/utils').resolve;
var rejectedValue = require('core/utils/utils').reject;
var VectorLayer = require('core/map/layer/vectorlayer');
var LoaderLayer = require('./loaderlayer');

function VectorLoaderLayer() {

    this._layer = {};
    this._type = 'vector';
    this._layerCodes = [];
    this._baseUrl = '';
    this._mapService = null;
    this._loadedExtent = null;

    base(this);

    //setto le proprià che mi interessano
    this.init = function(options) {
        //i layers provenienti dal plugin
        this._layers = options.layers || {};
        // il base url per poter fare richieste al server
        this._baseUrl = options.baseurl || '';
        // il map service per ineragire con la mappa
        // recuperando il bbox del layer vettoriale
        this._mapService = options.mapService || null;
        // i codice dei layers per poter recuperare le informazioni
        // dei layers passati dal plugin
        this._layerCodes = _.keys(this._layers);
    };
}

inherit(VectorLoaderLayer, LoaderLayer);

var proto = VectorLoaderLayer.prototype;
// funzione principale, starting point, chiamata dal plugin per
// il recupero dei vettoriali (chiamata verso il server)
proto.loadLayers = function() {

    var self = this;
    var deferred = $.Deferred();
    // tiene conto dei codici dei layer ch enon sono stati caricati come vector
    var noVectorlayerCodes = [];
    //verifica se sono stati caricati i vettoriali dei layer
    // attraverso la proprietà vector del layer passato dal plugin
    _.forEach(this._layers, function(layer, layerCode) {
        if (_.isNull(layer.vector)) {
            noVectorlayerCodes.push(layerCode);
        }
    });
    // eseguo le richieste delle configurazioni e mi tengo le promesse
    var vectorLayersSetup = _.map(noVectorlayerCodes, function(layerCode) {
            return self._setupVectorLayer(self._layers[layerCode]);
    });
    // aspetto tutte le promesse del setup vector
    $.when.apply(this, vectorLayersSetup)
        .then(function() {
            var arrayVectorLayers = Array.prototype.slice.call(arguments);
            // lego i  modo chiave valore i layers code ai relativi layer vettoriali
            var vectorLayers = _.zipObject(noVectorlayerCodes, arrayVectorLayers);
            self.emit('retriewvectorlayers', true, vectorLayers);
            self.loadAllVectorsData(noVectorlayerCodes)
                .then(function(layerCodes) {
                    self.emit('retriewvectolayersdata', true);
                    deferred.resolve();
                })
                .fail(function() {
                    self.emit('retriewvectolayersdata', false);
                    deferred.reject();
                }).always(function() {
                    // questa mi server per segnalare che il loadind dei dati è finito
                    self.emit('retriewvectolayersdata', false);
                })
            })
        .fail(function() {
            self.emit('retriewvectorlayers', false);
            deferred.reject();
        });

    return deferred.promise();
};

//funzione che permette di ottenere tutti i dati relativi ai layer vettoriali caricati
//prima si è ottenuta la coinfigurazione, ora si ottengono i dati veri e propri
proto.loadAllVectorsData = function(layerCodes) {

    var self = this;
    var deferred = $.Deferred();
    var layers = this._layers;
    // verifico che il BBOX attuale non sia stato già  caricato
    var bbox = this._mapService.state.bbox;
    var loadedExtent = this._loadedExtent;
    if (loadedExtent && ol.extent.containsExtent(loadedExtent, bbox)) {
        return resolvedValue();
    }
    if (!loadedExtent){
        this._loadedExtent = bbox;
    } else {
        this._loadedExtent = ol.extent.extend(loadedExtent, bbox);
    }
    if (layerCodes) {
        layers = [];
        _.forEach(layerCodes, function(layerCode) {
            layers.push(self._layers[layerCode]);
        });
    }
    //per ogni layer del plugin che non ha il layer vado a caricare i dati del layer vettoriale
    var vectorDataRequests = _.map(layers, function(Layer) {
        return self._loadVectorData(Layer.vector, bbox);
    });
    $.when.apply(this, vectorDataRequests)
        .then(function() {
            var vectorsDataResponse = Array.prototype.slice.call(arguments);
            var vectorDataResponseForCode = _.zipObject(self._layerCodes, vectorsDataResponse);
            _.forEach(vectorDataResponseForCode, function(vectorDataResponse, layerCode) {
                //nel caso ci sono vengono restituiti features locked (è un array di feature locked)
                if (vectorDataResponse.featurelocks) {
                    self.emit('featurelocks', layerCode, vectorDataResponse.featurelocks);
                }
            });
            deferred.resolve(layerCodes);
        })
        .fail(function(){
            deferred.reject();
        });

    return deferred.promise();
};
// funzione che dato la configurazione del layer fornito dal plugin (style, editor, vctor etc..)
// esegue richieste al server al fine di ottenere configurazione vettoriale del layer
proto._setupVectorLayer = function(layerConfig) {

    var self = this;
    var deferred = $.Deferred();
    // eseguo le richieste delle configurazioni
    this._getVectorLayerConfig(layerConfig.name)
        .then(function(vectorConfigResponse) {
            var vectorConfig = vectorConfigResponse.vector;
            // una volta ottenuta dal server la configurazione vettoriale,
            // provvedo alla creazione del layer vettoriale
            var vectorLayer = self._createVectorLayer({
                geometrytype: vectorConfig.geometrytype,
                format: vectorConfig.format,
                crs: "EPSG:3003",
                id: layerConfig.id,
                name: layerConfig.name,
                pk: vectorConfig.pk
            });
            // setto i campi del layer
            vectorLayer.setFields(vectorConfig.fields);
            // questo è la proprietà della configurazione del config layer
            // che specifica se esistono relazioni con altri layer
            // sono array di oggetti che specificano una serie di
            // informazioni su come i layer sono relazionati (nome della relazione == nome layer)
            // foreign key etc ..
            var relations = vectorConfig.relations;
            if(relations){
                // per dire a vectorLayer che i dati
                // delle relazioni verranno caricati solo quando
                // richiesti (es. aperture form di editing)
                vectorLayer.lazyRelations = true;
                //vado a settare le relazioni del vector layer
                vectorLayer.setRelations(relations);
            }
            // setto lo stile del layer OL
            if (layerConfig.style) {
                vectorLayer.setStyle(layerConfig.style);
            }
            deferred.resolve(vectorLayer);
        })
        .fail(function(){
            deferred.reject();
        });
    return deferred.promise();
};
//in base all bbox e la layer chiedo al server di restituirmi il vettoriale (geojson) del layer
proto._loadVectorData = function(vectorLayer, bbox) {
    var self = this;
    // eseguo le richieste deI dati al server al fine di ottenere il geojson,
    // vettoriale, del layer richiesto
    return self._getVectorLayerData(vectorLayer, bbox)
        .then(function(vectorDataResponse) {
            // setto i dati vettoriali del layer vettoriale
            vectorLayer.setData(vectorDataResponse.vector.data);
            return vectorDataResponse;
        });
};

// ottiene la configurazione del vettoriale
// (qui richiesto solo per la definizione degli input)
proto._getVectorLayerConfig = function(layerName) {

    var d = $.Deferred();
    $.get(this._baseUrl+layerName+"/?config")
        .done(function(data) {
            d.resolve(data);
        })
        .fail(function(){
            d.reject();
        });
    return d.promise();
};

// ottiene il vettoriale in modalità  editing
proto._getVectorLayerData = function(vectorLayer, bbox) {
    var d = $.Deferred();
    $.get(this._baseUrl+vectorLayer.name+"/?editing&in_bbox="+bbox[0]+","+bbox[1]+","+bbox[2]+","+bbox[3])
        .done(function(data) {
            d.resolve(data);
        })
        .fail(function(){
            d.reject();
        });
    return d.promise();
};
// funzione per creare il layer vettoriale
proto._createVectorLayer = function(options){

    var vector = new VectorLayer(options);
    return vector;
};
//funzione chiamata dal plugin quando si vuole fare un cleanUp dei layers
// !!! -- DA RIVEDERE -- !!!
proto.cleanUpLayers = function() {
    this._loadedExtent = null;
};

module.exports = VectorLoaderLayer;
},{"./loaderlayer":35,"core/map/layer/vectorlayer":38,"core/utils/utils":52}],37:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');


function MapLayer(config){
  this.config = config || {};
  this.id = config.id;
  
  this._olLayer = null;
  
  base(this);
}
inherit(MapLayer,G3WObject);

var proto = MapLayer.prototype;

proto.getId = function(){
  return this.id;
};

module.exports = MapLayer;

},{"core/g3wobject":31,"core/utils/utils":52}],38:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var truefnc = require('core/utils/utils').truefnc;
var resolve = require('core/utils/utils').resolve;
var reject = require('core/utils/utils').reject;
var G3WObject = require('core/g3wobject');

function VectorLayer(config) {

  var config = config || {};
  this.geometrytype = config.geometrytype || null;
  this.format = config.format || null;
  this.crs = config.crs  || null;
  this.id = config.id || null;
  this.name = config.name || "";
  this.pk = config.pk || "id"; // TODO: il GeoJSON setta l'id della feature da sé, e nasconde il campo PK dalle properties. In altri formati va verificato, e casomai usare feature.setId()
  
  this._olSource = new ol.source.Vector({
    features: new ol.Collection()
  });
  this._olLayer = new ol.layer.Vector({
    name: this.name,
    source: this._olSource
  });
  
  /*
   * Array di oggetti:
   * {
   *  name: Nome dell'attributo,
   *  type: integer | float | string | boolean | date | time | datetime,
   *  input: {
   *    label: Nome del campo di input,
   *    type: select | check | radio | coordspicker | boxpicker | layerpicker | fielddepend,
   *    options: {
   *      Le opzioni per lo spcifico tipo di input (es. "values" per la lista di valori di select, check e radio)
   *    }
   *  }
   * }
  */
  this._PKinAttributes = false;
  this._featuresFilter = null;
  this._fields = null;
  this._relationsDataLoaded = {};
  this.lazyRelations = true;
  this._relations = null;
}
inherit(VectorLayer,G3WObject);
module.exports = VectorLayer;

var proto = VectorLayer.prototype;

proto.setData = function(featuresData){
  var self = this;
  var features;
  if (this.format) {
    switch (this.format){
      case "GeoJSON":
        var geojson = new ol.format.GeoJSON({
          defaultDataProjection: this.crs,
          geometryName: "geometry"
        });
        features = geojson.readFeatures(featuresData);
        break;
    }
    
    if (features && features.length) {
      if (!_.isNull(this._featuresFilter)){
        var features = _.map(features,function(feature){
          return self._featuresFilter(feature);
        });
      }
      
      var alreadyLoadedIds = this.getFeatureIds();
      var featuresToLoad = _.filter(features,function(feature){
        return !_.includes(alreadyLoadedIds,feature.getId());
      });
      
      this._olSource.addFeatures(featuresToLoad);
      
      // verifico, prendendo la prima feature, se la PK è presente o meno tra gli attributi
      var attributes = this.getSource().getFeatures()[0].getProperties();
      this._PKinAttributes = _.get(attributes,this.pk) ? true : false;
    }
  }
  else {
    console.log("VectorLayer format not defined");
  }
};

proto.setFeatureData = function(oldfid,fid,geometry,attributes){
  var feature = this.getFeatureById(oldfid);
  if (fid){
    feature.setId(fid);
  }
  
  if (geometry){
    feature.setGeometry(geometry);
  }
  
  if (attributes){
    var oldAttributes = feature.getProperties();
    var newAttributes =_.assign(oldAttributes,attributes);
    feature.setProperties(newAttributes);
  }
  
  return feature;
};

proto.addFeatures = function(features){
  this.getSource().addFeatures(features);
};

proto.setFeaturesFilter = function(featuresFilter){
  this._featuresFilter = featuresFilter;
};

proto.setFields = function(fields){
  this._fields = fields;
};

proto.setPkField = function(){
  var self = this;
  var pkfieldSet = false;
  _.forEach(this._fields,function(field){
    if (field.name == self.pk ){
      pkfieldSet = true;
    }
  });
  
  if (!pkfieldSet){
    this._fields
  }
};

proto.getFeatures = function(){
  return this.getSource().getFeatures();
};

proto.getFeatureIds = function(){
  var featureIds = _.map(this.getSource().getFeatures(),function(feature){
    return feature.getId();
  });
  return featureIds
};

proto.getFields = function(){
  return _.cloneDeep(this._fields);
};

proto.getFieldsNames = function(){
  return _.map(this._fields,function(field){
    return field.name;
  });
};

proto.getFieldsWithValues = function(obj){
  var self = this;
  /*var fields = _.cloneDeep(_.filter(this._fields,function(field){
    return ((field.name != self.pk) && field.editable);
  }));*/
  var fields = _.cloneDeep(this._fields);
  
  var feature, attributes;
  
  // il metodo accetta sia feature che fid
  if (obj instanceof ol.Feature){
    feature = obj;
  }
  else if (obj){
    feature = this.getFeatureById(obj);
  }
  if (feature){
    attributes = feature.getProperties();
  }
  
  _.forEach(fields,function(field){
    if (feature){
      if (!this._PKinAttributes && field.name == self.pk){
        field.value = feature.getId();
      }
      else{
        field.value = attributes[field.name];
      }
    }
    else{
      field.value = null;
    }
  });
  return fields;
};

proto.setRelations = function(relations) {
  this._relations = relations;
  // è un array contenete le relazioni con altri layers
  _.forEach(relations, function(relation) {
    // per ogni relazione scorro sull'attributo fields (array) di oggetti
    // che descrivono  i campi del layer relazione
    _.forEach(relation.fields, function(field, idx) {
      if (field.name == relation.pk) {
        // aggiung ll'atributo pkFieldIndex
        // che mi servirà per recuperare il campo
        // primary del layer relazione
        relation.pkFieldIndex = idx
      }
    })
  })
};
// resituisce le relazioni
proto.getRelations = function() {
  return this._relations;
};

proto.getRelation = function(relationName) {
  var relation;
  _.forEach(this._relations,function(_relation){
    if (_relation.name == relationName) {
      relation = _relation;
    }
  });
  return relation;
};

proto.hasRelations = function(){
  return !_.isNull(this._relations);
};

proto.getRelationPkFieldIndex = function(relation) {
  var pkFieldIndex;
  _.forEach(relation.fields,function(field,idx){
    if (field.name == relation.pk) {
      pkFieldIndex = idx;
    }
  });
  return pkFieldIndex;
};

proto.getRelationElementPkValue = function(relation,element) {
  var pkFieldIndex = this.getRelationPkFieldIndex(relation);
  return element.fields[pkFieldIndex].value;
};

proto.getRelationsFksKeys = function(){
  var fks = [];
  _.forEach(this._relations,function(relation){
    fks.push(relation.fk);
  });
  return fks;
};

proto.getRelationFields = function(relation) {
  return relation.fields;
};

proto.getRelationFieldsNames = function(relation){
  return _.map(relationFields,function(field){
    return field.name;
  });
};

// ottengo le relazioni a partire dal fid di una feature esistente
proto.getRelationsWithValues = function(fid) {
  var self = this;
  if (!this._relations) {
    // se non ha nessuna relazione
    // rirotno array vuoto
    resolve([]);
  }
  // altrimenti creo un cloe dell'attributo relations
  var relations = _.cloneDeep(this._relations);
  // -- DA CAPIRE MEGLIO --
  if (!fid || !this.getFeatureById(fid)) {
    _.forEach(relations, function(relation) {
      relation.elements = [];
    });
    return resolve(relations);
  }
  else {
    if (this.lazyRelations){
      if (!self._relationsDataLoaded[fid]) {
        var deferred = $.Deferred();
        var attributes = this.getFeatureById(fid).getProperties();
        var fks = {};
        _.forEach(relations, function(relation) {
          var keyVals = [];
          _.forEach(relation.fk, function(fkKey) {
            fks[fkKey] = attributes[fkKey];
          });
        });

        this.getRelationsWithValuesFromFks(fks)
          .then(function(relationsResponse){
            self._relationsDataLoaded[fid] = relationsResponse;
            deferred.resolve(relationsResponse);
          })
          .fail(function(){
            deferred.reject();
          });
        return deferred.promise();
      }
      else {
        return resolve(this._relationsDataLoaded[fid]);
      }
    }
    else {
      return resolve(this._relations); // vuol dire che gli elementi delle relazioni sono stati già inseriti in fase di creazione del vettoriale
    }
  }
};

// ottengo le relazioni valorizzate a partire da un oggetto con le chiavi FK come keys e i loro valori come values
proto.getRelationsWithValuesFromFks = function(fks){
  var self = this;
  var relations = _.cloneDeep(this._relations);
  var relationsRequests = [];

  _.forEach(relations,function(relation){

    relation.elements = []; // creo la proprietà che accoglierà gli elementi della relazione ( e che quindi li cacherà)
    var url = relation.url;
    var keyVals = [];
    _.forEach(relation.fk,function(fkKey){
      var fkValue = fks[fkKey];
      keyVals.push(fkKey+"="+fkValue);
    });
    var fkParams = _.join(keyVals,"&");
    url += "?"+fkParams;
    relationsRequests.push($.get(url)
      .then(function(relationsElements){
        if (relationsElements.length) {
          _.forEach(relationsElements,function(relationElement){
            var element = {};
            element.fields = _.cloneDeep(relation.fields); // i campi li metto anche in ogni elemento, in modo da poterne assegnarne i valori
            _.forEach(element.fields,function(field){ // assegno i valori ai campi
              field.value = relationElement[field.name];
              if (field.name == relation.pk) {
                element.id = field.value // aggiungo element.id dandogli il valore della chiave primaria della relazione
                element.state = 'OLD'; // flag usato per identificare elemento: 'NEW', 'OLD', 'DELETED'
              }
            });
            relation.elements.push(element);
          })
        }
      })
    )
  });
  
  return $.when.apply(this,relationsRequests)
  .then(function(){
    return relations; // le relazioni e i loro elementi sono immutabili; le modifiche vanno nei RelationEditBuffer
  });
}

// data una feature verifico se ha tra gli attributi i valori delle FK delle (eventuali) relazioni
proto.featureHasRelationsFksWithValues = function(feature){
  var attributes = feature.getProperties();
  var fksKeys = this.getRelationsFksKeys();
  return _.every(fksKeys,function(fkKey){
    var value = attributes[fkKey];
    return (!_.isNil(value) && value != '');
  })
};

// data una feature popolo un oggetto con chiavi/valori delle FK delle (eventuali) relazione
proto.getRelationsFksWithValuesForFeature = function(feature){
  var attributes = feature.getProperties();
  var fks = {};
  var fksKeys = this.getRelationsFksKeys();
  _.forEach(fksKeys,function(fkKey){
    fks[fkKey] = attributes[fkKey];
  });
  return fks;
};

// ancora mai usato, perché in generale i dati delle relazioni vengono caricati in modo lazy su richieste per la singola feature
proto.setRelationsData = function (relationsData) {
  var self = this;
  _.forEach(this._relations,function(relation){
    // popolare gli elementi delle relazioni
    self._relationsDataLoaded = true;
  });
}

proto.setStyle = function(style){
  this._olLayer.setStyle(style);
};

proto.getMapLayer = function(){
  return this._olLayer;
};

proto.getSource = function(){
  return this._olLayer.getSource();
};

proto.getFeatureById = function(id){
  return this._olLayer.getSource().getFeatureById(id);
};

proto.clear = function(){
  this.getSource().clear();
};

proto.addToMap = function(map){
  map.addLayer(this._olLayer);
};

},{"core/g3wobject":31,"core/utils/utils":52}],39:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var geo = require('core/utils/geo');
var MapLayer = require('core/map/layer/maplayer');
var RasterLayers = require('g3w-ol3/src/layers/rasters');

function WMSLayer(options,extraParams){
  var self = this;
  this.LAYERTYPE = {
    LAYER: 'layer',
    MULTILAYER: 'multilayer'
  };

  this.extraParams = extraParams
  this.layers = [];
  
  base(this,options);
}
inherit(WMSLayer,MapLayer)
var proto = WMSLayer.prototype;

proto.getOLLayer = function(withLayers){
  var olLayer = this._olLayer;
  if (!olLayer){
    olLayer = this._olLayer = this._makeOlLayer(withLayers);
  }
  return olLayer;
};

proto.getSource = function(){
  return this.getOLLayer().getSource();
};

proto.getInfoFormat = function() {
  return 'application/vnd.ogc.gml';
};

proto.getGetFeatureInfoUrl = function(coordinate,resolution,epsg,params){
  return this.getOLLayer().getSource().getGetFeatureInfoUrl(coordinate,resolution,epsg,params);
};

proto.getLayerConfigs = function(){
  return this.layers;
};

proto.addLayer = function(layer){
  this.layers.push(layer);
};

proto.toggleLayer = function(layer){
  _.forEach(this.layers,function(_layer){
    if (_layer.id == layer.id){
      _layer.visible = layer.visible;
    }
  });
  this._updateLayers();
};
  
proto.update = function(mapState,extraParams){
  this._updateLayers(mapState,extraParams);
};

proto.isVisible = function(){
  return this._getVisibleLayers().length > 0;
};

proto.getQueryUrl = function(){
  var layer = this.layers[0];
  if (layer.infourl && layer.infourl != '') {
    return layer.infourl;
  }
  return this.config.url;
};

proto.getQueryableLayers = function(){ 
  return _.filter(this.layers,function(layer){
    return layer.isQueryable();
  });
};

proto._getVisibleLayers = function(mapState){
  var self = this;
  var visibleLayers = [];
  _.forEach(this.layers,function(layer){
    var resolutionBasedVisibility = layer.state.maxresolution ? (layer.state.maxresolution && layer.state.maxresolution > mapState.resolution) : true;
    if (layer.state.visible && resolutionBasedVisibility) {
      visibleLayers.push(layer);
    }    
  })
  return visibleLayers;
};

proto._makeOlLayer = function(withLayers){
  var self = this;
  var wmsConfig = {
    url: this.config.url,
    id: this.config.id
  };
  
  if (withLayers) {
    wmsConfig.layers = _.map(this.layers,function(layer){
      return layer.getWMSLayerName();
    });
  }
  
  var representativeLayer = this.layers[0]; //BRUTTO, DEVO PRENDERE UN LAYER A CASO (IL PRIMO) PER VEDERE SE PUNTA AD UN SOURCE DIVERSO (dovrebbe accadere solo per i layer singoli, WMS esterni)
  
  if (representativeLayer.state.source && representativeLayer.state.source.type == 'wms' && representativeLayer.state.source.url){
    wmsConfig.url = representativeLayer.state.source.url;
  };
  
  var olLayer = new RasterLayers.WMSLayer(wmsConfig,this.extraParams);
  
  olLayer.getSource().on('imageloadstart', function() {
        self.emit("loadstart");
      });
  olLayer.getSource().on('imageloadend', function() {
      self.emit("loadend");
  });
  
  return olLayer
};

proto.checkLayerDisabled = function(layer,resolution) {
  var scale = geo.resToScale(resolution);
  var enabled = true;
  if (layer.state.maxresolution){
    enabled = enabled && (layer.state.maxresolution > resolution);
  }
  if (layer.state.minresolution){
    enabled = enabled && (layer.state.minresolution < resolution);
  }
  if (layer.state.minscale) {
    enabled = enabled && (layer.state.minscale > scale);
  }
  if (layer.state.maxscale) {
    enabled = enabled && (layer.state.maxscale < scale);
  }
  layer.state.disabled = !enabled;
};

proto.checkLayersDisabled = function(resolution){
  var self = this;
  _.forEach(this.layers,function(layer){
    self.checkLayerDisabled(layer,resolution);
  });
};

proto._updateLayers = function(mapState,extraParams){
  this.checkLayersDisabled(mapState.resolution);
  var visibleLayers = this._getVisibleLayers(mapState);
  if (visibleLayers.length > 0) {
    var params = {
      LAYERS: _.join(_.map(visibleLayers,function(layer){
        return layer.getWMSLayerName();
      }),',')
    };
    if (extraParams) {
      params = _.assign(params,extraParams);
    }
    this._olLayer.setVisible(true);
    this._olLayer.getSource().updateParams(params);
  }
  else {
    this._olLayer.setVisible(false);
  }
};

module.exports = WMSLayer;

},{"core/map/layer/maplayer":37,"core/utils/geo":51,"core/utils/utils":52,"g3w-ol3/src/layers/rasters":64}],40:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

function MapsRegistry() {
  base(this);
  
  this._mapsServices = {
  };
  
  this.addMap = function(mapService) {
    this._registerMapService(mapService);
  };
  
  this._registerMapService = function(mapService) {
    var mapService = this._mapsServices[mapService.id]
    if (_.isUndefined(mapService)) {
      this._mapsServices[mapService.id] = mapService;
    }
  };
} 
inherit(MapsRegistry,G3WObject);

module.exports = MapsRegistry;

},{"core/g3wobject":31,"core/utils/utils":52}],41:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var ProjectsRegistry = require('core/project/projectsregistry');
var PluginsRegistry = require('./pluginsregistry');

var Plugin = function() {

  this.name = '(no name)';
  this.config = null;
  base(this);

};

inherit(Plugin,G3WObject);

var proto = Plugin.prototype;

//recuperare il servizio associato al plugin
proto.getPluginService = function() {
  return this.service
};

//settare un servizio
proto.setPluginService = function(Service) {
  this.service = Service;
};

//recupero il nome
proto.getName = function() {
  return this.name;
};

//setto il nome
proto.setName = function(name) {
  this.name = name;
};

//recupero la configurazione del plugin dal registro dei plugins
proto.getPluginConfig = function() {
  return PluginsRegistry.getPluginConfig(this.name);
};

//verifica la compatibilià con il progetto corrente
proto.isCurrentProjectCompatible = function(projectId) {
  var project = ProjectsRegistry.getCurrentProject();
  return projectId == project.getGid();
};

//registrazione plugin se compatibile con il progetto corrente
proto.registerPlugin = function(projectId) {
  if (this.isCurrentProjectCompatible(projectId)) {
    PluginsRegistry.registerPlugin(this);
    return true;
  }
  return false;
};

// setup dell'interfaccia
proto.setupGui = function() {
  //al momento niente non so se verrà usata
};

module.exports = Plugin;

},{"./pluginsregistry":42,"core/g3wobject":31,"core/project/projectsregistry":45,"core/utils/utils":52}],42:[function(require,module,exports){
var base = require('core/utils/utils').base;
var inherit = require('core/utils/utils').inherit;
var G3WObject = require('core/g3wobject');

function PluginsRegistry() {
  var self = this;
  this.config = null;
  // un domani questo sarà dinamico
  this._plugins = {};

  this.setters = {
    registerPlugin: function(plugin){
      if (!self._plugins[plugin.name]) {
        self._plugins[plugin.name] = plugin;
        console.log("Registrato plugin "+plugin.name);
      }
    }
  };
  
  base(this);
  
  this.init = function(options){
    var self = this;
    this.pluginsBaseUrl = options.plusingBaseUrl
    this.pluginsConfigs = options.pluginsConfigs;
    _.forEach(this.pluginsConfigs,function(pluginConfig,name){
      self._setup(name,pluginConfig);
    })
  };
  
  this._setup = function(name,pluginConfig) {

    if (pluginConfig){
      var url = this.pluginsBaseUrl+'plugins/'+name+'/plugin.js';
      $script(url);
    }
  };
  
  this.getPluginConfig = function(pluginName) {
    return this.pluginsConfigs[pluginName];
  };

}

inherit(PluginsRegistry,G3WObject);

module.exports = new PluginsRegistry

},{"core/g3wobject":31,"core/utils/utils":52}],43:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils//utils').base;
var G3WObject = require('core/g3wobject');
var ApplicationService = require('core/applicationservice');

var ProjectLayer = require('./projectlayer');

function Project(projectConfig) {
  var self = this;
  
  /* struttura oggetto 'project'
  {
    id,
    type,
    gid,
    name,
    crs,
    extent,
    layerstree,
    overviewprojectgid
  }
  */
  this.state = projectConfig;
  
  this._layers = {};
  function traverse(obj){
    _.forIn(obj, function (layerConfig, key) {
        //verifica che il valore dell'id non sia nullo
        if (!_.isNil(layerConfig.id)) {
            var layer = self.buildProjectLayer(layerConfig);
            self._layers[layer.getId()] = layer;
        }
        if (!_.isNil(layerConfig.nodes)) {
            traverse(layerConfig.nodes);
        }
    });
  }
  traverse(projectConfig.layerstree);
  
  /*var eventType = 'projectset';
  if (doswitch && doswitch === true) {
    eventType = 'projectswitch';
  }
  this.emit(eventType);*/
  
  this.setters = {
    setLayersVisible: function(layersIds,visible){
      _.forEach(layersIds,function(layerId){
        self.getLayerById(layerId).state.visible = visible;
      })
    },
    setBaseLayer: function(id){
      _.forEach(self.state.baseLayers,function(baseLayer){
        baseLayer.visible = (baseLayer.id == id);
      })
    },
    setLayerSelected: function(layerId,selected){
      _.forEach(this._layers,function(layer){
        layer.state.selected = ((layerId == layer.state.id) && selected) || false;
      })
    }
  };

  base(this);
}
inherit(Project,G3WObject);

var proto = Project.prototype;

proto.buildProjectLayer = function(layerConfig) {
  var layer = new ProjectLayer(layerConfig);
  layer.setProject(this);
  
  // aggiungo proprietà non ottenute dalla consfigurazione
  layer.state.selected = false;
  layer.state.disabled = false;
  
  return layer;
};

proto.getGid = function() {
  return this.state.gid;
};

proto.getOverviewProjectGid = function() {
  return this.state.overviewprojectgid.gid;
};

proto.getLayersDict = function(options){
  var options = options || {};

  var filterQueryable = options.QUERYABLE;
  
  var filterVisible = options.VISIBLE;
  
  var filterSelected = options.SELECTED;
  var filterSelectedOrAll = options.SELECTEDORALL;
  
  if (filterSelectedOrAll) {
    filterSelected = null;
  }
  
  if (_.isUndefined(filterQueryable) && _.isUndefined(filterVisible) && _.isUndefined(filterSelected) && _.isUndefined(filterSelectedOrAll)) {
    return this._layers;
  }
  
  var layers = this._layers;
  
  if (filterQueryable) {
    layers = _.filter(layers,function(layer){
      return filterQueryable && layer.isQueryable();
    });
  }
  
  if (filterVisible) {
    layers = _.filter(layers,function(layer){
      return filterVisible && layer.isVisible();
    });
  }
  
  if (filterSelected) {
    layers = _.filter(layers,function(layer){
      return filterSelected && layer.isSelected();
    });
  }
  
  if (filterSelectedOrAll) {
    var _layers = layers;
    layers = _.filter(layers,function(layer){
      return layer.isSelected();
    });
    layers = layers.length ? layers : _layers;
  }
  
  return layers;
};

// ritorna l'array dei layers (con opzioni di ricerca)
proto.getLayers = function(options) {
  var layers = this.getLayersDict(options);
  return _.values(layers);
}

proto.getLayerById = function(layerId) {
  return this.getLayersDict()[layerId];
};

proto.getLayerByName = function(name) {
  var layer = null;
  _.forEach(this.getLayers(),function(layer){
    if (layer.getName() == name){
      layer = _layer;
    }
  });
  return layer;
};

proto.getLayerAttributes = function(layerId){
  return this.getLayerById(layerId).getAttributes();
};

proto.getLayerAttributeLabel = function(layerId,name){
  return this.getLayerById(layerId).getAttributeLabel(name);
};

proto.toggleLayer = function(layerId,visible){
  var layer = this.getLayerById(layerId);
  var visible = visible || !layer.state.visible;
  this.setLayersVisible([layerId],visible);
};

proto.toggleLayers = function(layersIds,visible){
  this.setLayersVisible(layersIds,visible);
};

proto.selectLayer = function(layerId){
  this.setLayerSelected(layerId,true);
};

proto.unselectLayer = function(layerId) {
  this.setLayerSelected(layerId,false);
};

proto.getCrs = function() {
  return this.state.crs;
}

proto.getInfoFormat = function() {
  return 'application/vnd.ogc.gml';
};

proto.getWmsUrl = function(){
  return this.state.WMSUrl;
};

proto.getLegendUrl = function(layer){
  var url = this.getWmsUrl();
  sep = (url.indexOf('?') > -1) ? '&' : '?';
  return this.getWmsUrl()+sep+'SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&SLD_VERSION=1.1.0&FORMAT=image/png&TRANSPARENT=true&ITEMFONTCOLOR=white&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER='+layer.name;
};

module.exports = Project;

},{"./projectlayer":44,"core/applicationservice":19,"core/g3wobject":31,"core/utils//utils":52,"core/utils/utils":52}],44:[function(require,module,exports){
var GeometryTypes = require('core/geometry/geometry').GeometryTypes;

var CAPABILITIES = {
  QUERY: 1,
  EDIT: 2
};

var EDITOPS = {
  INSERT: 1,
  UPDATE: 2,
  DELETE: 4
};

function ProjectLayer(state) {
  /*this.state = {
    fields: options.fields,
    bbox: options.bbox,
    capabilities: options.capabilities,
    crs: options.crs,
    disabled: options.disabled,
    editops: options.editops,
    geometrytype: options.geometrytype,
    id: options.id,
    infoformat: options.infoformat,
    infourl: options.infourl,
    maxscale: options.maxscale,
    minscale: options.minscale,
    multilayer: options.multilayer,
    name: options.name,
    origname: options.origname,
    relations: options.relations,
    scalebasedvisibility: options.scalebasedvisibility,
    selected: options.selected,
    servertype: options.servertype,
    source: options.source,
    title: options.title,
    visible: options.visible,
    selected: options.selected | false,
    disabled: options.disabled | false
  }*/
  
  // lo stato è sincronizzato con quello del layerstree
  this.state = state;
  
  this._project = null;
};

var proto = ProjectLayer.prototype;

proto.getProject = function() {
  return this._project;
};

proto.setProject = function(project) {
  this._project = project
};

proto.getId = function() {
  return this.state.id;
};

proto.getName = function() {
  return this.state.name;
};

proto.getOrigName = function() {
  return this.state.origname;
};

proto.getGeometryType = function() {
  return this.state.geometrytype;
};

proto.getAttributes = function() {
  return this.state.fields;
};

proto.getAttributeLabel = function(name) {
  var label;
  _.forEach(this.getAttributes(),function(field){
    if (field.name == name){
      label = field.label;
    }
  })
  return label;
};

proto.isSelected = function() {
  return this.state.selected;
};

proto.isDisabled = function() {
  return this.state.disabled;
};

proto.isQueryable = function(){
  var queryEnabled = false;
  var queryableForCababilities = (this.state.capabilities && (this.state.capabilities && CAPABILITIES.QUERY)) ? true : false;
  if (queryableForCababilities) {
    // è interrogabile se visibile e non disabilitato (per scala) oppure se interrogabile comunque (forzato dalla proprietà infowhennotvisible)
    queryEnabled = (this.state.visible && !this.state.disabled);
    if (!_.isUndefined(this.state.infowhennotvisible) && (this.state.infowhennotvisible === true)) {
      queryEnabled = true;
    }
  }
  return queryEnabled;
};

proto.isVisible = function() {
  return this.state.visible;
}

proto.getQueryLayerName = function() {
  var queryLayerName;
  if (this.state.infolayer && this.state.infolayer != '') {
    queryLayerName = this.state.infolayer;
  }
  else {
    queryLayerName = this.state.name;
  }
  return queryLayerName;
};

proto.getServerType = function() {
  if (this.state.servertype && this.state.servertype != '') {
    return this.state.servertype;
  }
  else {
    return ProjectLayer.ServerTypes.QGIS;
  }
};

proto.getCrs = function() {
  return this.getProject().getCrs();
}

proto.isExternalWMS = function() {
  return (this.state.source && this.state.source.url);
};

proto.getWMSLayerName = function() {
  var layerName = this.state.name;
  if (this.state.source && this.state.source.layers){
    layerName = this.state.source.layers;
  };
  return layerName;
};

proto.getQueryUrl = function() {
  if (this.state.infourl && this.state.infourl != '') {
    return this.state.infourl;
  }
  else {
    return this.getProject().getWmsUrl();
  }
};

proto.setQueryUrl = function(queryUrl) {
  this.state.inforurl = queryUrl;
};

proto.getInfoFormat = function() {
  if (this.state.infoformat && this.state.infoformat != '') {
    return this.state.infoformat;
  }
  else {
    return this.getProject().getInfoFormat();
  }
};

proto.setInfoFormat = function(infoFormat) {
  this.state.infoformat = infoFormat;
};

proto.getWmsUrl = function() {
  var url;
  if (this.state.source && this.state.source.type == 'wms' && this.state.source.url){
    url = this.state.source.url
  }
  else {
    url = this.getProject().getWmsUrl();
  }
  return url;
};

proto.getLegendUrl = function() {
  var url = this.getWmsUrl();
  sep = (url.indexOf('?') > -1) ? '&' : '?';
  return this.getWmsUrl()+sep+'SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&SLD_VERSION=1.1.0&FORMAT=image/png&TRANSPARENT=true&ITEMFONTCOLOR=white&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER='+this.getWMSLayerName();
};

ProjectLayer.ServerTypes = {
  OGC: "OGC",
  QGIS: "QGIS",
  Mapserver: "Mapserver",
  Geoserver: "Geoserver",
  ArcGIS: "ArcGIS"
};

module.exports = ProjectLayer;

},{"core/geometry/geometry":33}],45:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var resolve = require('core/utils/utils').resolve;
var reject = require('core/utils/utils').reject;
var G3WObject = require('core/g3wobject');
var Project = require('core/project/project');


/* service
Funzione costruttore contentente tre proprieta':
    setup: metodo di inizializzazione
    getLayersState: ritorna l'oggetto LayersState
    getLayersTree: ritorna l'array layersTree dall'oggetto LayersState
*/

// Public interface
function ProjectsRegistry() {

  var self = this;
  this.config = null;
  this.initialized = false;
  //tipo di progetto
  this.projectType = null;
  
  this.setters = {
    setCurrentProject: function(project){
      self.state.currentProject = project;
    }
  };
  //stato del registro progetti
  this.state = {
    baseLayers: {},
    minScale: null,
    maxscale: null,
    currentProject: null
  };
  
  // tutte le configurazioni di base dei progetti, ma di cui non è detto che
  // sia ancora disponibile l'istanza (lazy loading)
  this._pendingProjects = [];
  this._projects = {};
  
  base(this);
}
inherit(ProjectsRegistry, G3WObject);

var proto = ProjectsRegistry.prototype;

proto.init = function(config) {

  var self = this;
  //verifico se è già stato inizilizzato
  if (!this.initialized){
    this.initialized = true;
    //salva la configurazione
    this.config = config;
    //setta lo state
    this.setupState();
    return this.getProject(config.initproject)
    .then(function(project) {
      self.setCurrentProject(project);
      //aggiunto tipo progetto
      self.setProjectType(project.state.type);
    });
  }
};

proto.setProjectType = function(projectType) {
   this.projectType = projectType;
};

proto.setupState = function() {

  var self = this;
  
  self.state.baseLayers = self.config.baselayers;
  self.state.minScale = self.config.minscale;
  self.state.maxScale = self.config.maxscale;
  self.state.crs = self.config.crs;
  self.state.proj4 = self.config.proj4;

  // setto  quale progetto deve essere impostato come overview
  //questo è settato da django-admin
  var overViewProject = (self.config.overviewproject && self.config.overviewproject.gid) ? self.config.overviewproject : null;
  //per ogni progetto ciclo e setto tutti gli attributi comuni
  // come i base layers etc ..
  self.config.projects.forEach(function(project){
    project.baselayers = self.config.baselayers;
    project.minscale = self.config.minscale;
    project.maxscale = self.config.maxscale;
    project.crs = self.config.crs;
    project.proj4 = self.config.proj4;
    project.overviewprojectgid = overViewProject;
    //aggiungo tutti i progetti ai pending project
    self._pendingProjects.push(project);
  });
};

proto.getProjectType = function() {
  return this.projectType;
};

proto.getPendingProjects = function() {
  return this._pendingProjects;
};

proto.getCurrentProject = function(){
  return this.state.currentProject;
};

// ottengo il progetto dal suo gid;
// ritorna una promise nel caso non fosse stato ancora scaricato
// il config completo (e quindi non sia ancora istanziato Project)
proto.getProject = function(projectGid) {
  var self = this;
  var d = $.Deferred();
  var pendingProject = false;
  var project = null;
  // scorro atraverso i pending project che contengono oggetti
  // di configurazione dei progetti del gruppo
  this._pendingProjects.forEach(function(_pendingProject) {
    if (_pendingProject.gid == projectGid) {
      pendingProject = _pendingProject;
      project = self._projects[projectGid];
    }
  });
  if (!pendingProject) {
    return reject("Project doesn't exist");
  }

  if (project) {
    return d.resolve(project);
  } else {
    return this._getProjectFullConfig(pendingProject)
    .then(function(projectFullConfig){
      var projectConfig = _.merge(pendingProject,projectFullConfig);
      self._buildProjectTree(projectConfig);
      projectConfig.WMSUrl = self.config.getWmsUrl(projectConfig);
      var project = new Project(projectConfig);
      self._projects[projectConfig.gid] = project;
      return d.resolve(project);
    });
  }
  
  return d.promise();
};
  
//ritorna una promises
proto._getProjectFullConfig = function(projectBaseConfig) {
  var self = this;
  var deferred = $.Deferred();
  var url = this.config.getProjectConfigUrl(projectBaseConfig);
  $.get(url).done(function(projectFullConfig) {
      deferred.resolve(projectFullConfig);
  });
  return deferred.promise();
};

proto._buildProjectTree = function(project){
  var layers = _.keyBy(project.layers,'id');
  var layersTree = _.cloneDeep(project.layerstree);
  
  function traverse(obj){
    _.forIn(obj, function (layer, key) {
      //verifica che il nodo sia un layer e non un folder
      if (!_.isNil(layer.id)) {
          var fulllayer = _.merge(layer,layers[layer.id]);
          obj[parseInt(key)] = fulllayer;
      }
      if (!_.isNil(layer.nodes)){
        // aggiungo proprietà title per l'albero
        layer.title = layer.name;
        traverse(layer.nodes);
      }
    });
  }
  traverse(layersTree);
  project.layerstree = layersTree;
};

module.exports = new ProjectsRegistry();

},{"core/g3wobject":31,"core/project/project":43,"core/utils/utils":52}],46:[function(require,module,exports){
var ProjectTypes = {
  QDJANGO: 'qdjango',
  OGR: 'ogr'
};

module.exports = ProjectTypes;
},{}],47:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var resolve = require('core/utils/utils').resolve;
var ProjectsRegistry = require('core/project/projectsregistry');

// FILTRI
var Filters = {
  eq: '=',
  gt: '>',
  gte: '>=',
  lt: '<',
  lte: '=<',
  LIKE: 'LIKE',
  ILIKE: 'ILIKE',
  AND: 'AND',
  OR: 'OR',
  NOT: '!='
};

function QueryQGISWMSProvider() {

  self = this;
  //funzione che fa la richiesta vera e propria al server qgis
  this.submitGetFeatureInfo = function(options) {
    var url = options.url || '';
    var querylayername = options.querylayername || null;
    var filter = options.filter || null;
    var bbox = options.bbox || ProjectsRegistry.getCurrentProject().state.extent.join(',');
    var simpleWmsSearchMaxResults = null;
    var crs = options.crs || '4326;'
    return $.get( url, {
        'SERVICE': 'WMS',
        'VERSION': '1.3.0',
        'REQUEST': 'GetFeatureInfo',
        'LAYERS': querylayername,
        'QUERY_LAYERS': querylayername,
        'FEATURE_COUNT': simpleWmsSearchMaxResults ||  50,
        'INFO_FORMAT': 'application/vnd.ogc.gml',
        'CRS': 'EPSG:'+ crs,
        'FILTER': filter,
        // Temporary fix for https://hub.qgis.org/issues/8656 (fixed in QGIS master)
        'BBOX': bbox // QUI CI VA IL BBOX DELLA MAPPA
      }
    );
   };

  //funzione che fa la ricerca
  this.doSearch = function(queryFilterObject) {
    var querylayer = queryFilterObject.queryLayer;
    var url = querylayer.getQueryUrl();
    var crs = querylayer.getCrs();
    var filterObject = queryFilterObject.filterObject;
    //creo il filtro
    var filter = this.createFilter(filterObject, querylayer.getQueryLayerName());
    //eseguo la richiesta e restituisco come risposta la promise del $.get
    var response = this.submitGetFeatureInfo({
      url: url,
      crs: crs,
      filter: filter,
      querylayername: querylayer.getQueryLayerName()
    });
    return response;
  };

  this.createFilter = function(filterObject, querylayername) {

    /////inserisco il nome del layer (typename) ///
    var filter = [];
    function createSingleFilter(booleanObject) {
      var filterElements = [];
      var filterElement = '';
      var valueExtra = "";
      var valueQuotes = "";
      var rootFilter;
      _.forEach(booleanObject, function(v, k, obj) {
        //creo il filtro root che sarà AND OR
        rootFilter = Filters[k];
        //qui c'è array degli elementi di un booleano
        _.forEach(v, function(input){
          //scorro su oggetto
          _.forEach(input, function(v, k, obj) {
          //verifico se il valore dell'oggetto è array e quindi è altro oggetto padre booleano
            if (_.isArray(v)) {
              filterElement = createSingleFilter(obj);
            } else { // è un oggetto operatore
              if (k == 'LIKE' || k == 'ILIKE') {
                valueExtra = "%";
              };
              filterOp = Filters[k];
              _.forEach(input, function(v, k, obj) {
                _.forEach(v, function(v, k, obj) {
                  //verifico se il valore non è un numero e quindi aggiungo singolo apice
                  if(isNaN(v)) {
                    valueQuotes = "'";
                  } else {
                    valueQuotes = "";
                  };
                  filterElement = "\"" + k + "\" "+ filterOp +" " + valueQuotes + valueExtra + v + valueExtra + valueQuotes;
                });
              });
            };
            filterElements.push(filterElement);
          });
        });
        rootFilter = filterElements.join(" "+ rootFilter + " ");
      });
      return rootFilter;
    };
    //assegno il filtro creato
    filter = querylayername + ":" + createSingleFilter(filterObject);
    return filter;
  };

};

inherit(QueryQGISWMSProvider, G3WObject);

module.exports =  new QueryQGISWMSProvider();

},{"core/g3wobject":31,"core/project/projectsregistry":45,"core/utils/utils":52}],48:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var resolve = require('core/utils/utils').resolve;
//definisco il filtro ol3
var ol3OGCFilter = ol.format.ogc.filter;

//oggetto che viene passato per effetturare il la search
var ol3GetFeatureRequestObject = {
  srsName: 'EPSG:',
  featureNS: '',
  featurePrefix: '',
  featureTypes: [],
  outputFormat: 'application/json',
  filter: null // esempio filtro composto ol3OGCFilter.and(ol3OGCFilter.bbox('the_geom', [1, 2, 3, 4], 'urn:ogc:def:crs:EPSG::4326'),ol3OGCFilter.like('name', 'New*'))
};

// FILTRI OL3
var ol3Filters = {
  eq: ol3OGCFilter.equalTo,
  gt: ol3OGCFilter.greaterThan,
  gte: ol3OGCFilter.greaterThanOrEqualTo,
  lt: ol3OGCFilter.lessThan,
  lte: ol3OGCFilter.lessThanOrEqualTo,
  like: ol3OGCFilter.like,
  ilike: "",
  bbox: ol3OGCFilter.bbox,
  AND: ol3OGCFilter.and,
  OR: ol3OGCFilter.or,
  NOT: ol3OGCFilter.not
};


// CREATO UN FILTRO DI ESEMPIO PER VERIFICARE LA CORRETTEZZA DELLA FUNZIONE CREAZIONE FILTRO
var testFilter = {
  'AND':
    [
      {
        eq:
          {
            gid : 10
          }
      },
      {
        'OR':
          [
            {
              eq: {
                pippo : 'lallo'
              }
            },
            {
              gt: {
                id : 5
              }
            }

          ]
      }
   ]
}
//////////////

///FILTRI CUSTOM
var standardFilterTemplates = function() {
  var common = {
    propertyName:
          "<PropertyName>" +
            "[PROP]" +
          "</PropertyName>",
    literal:
          "<Literal>" +
            "[VALUE]" +
          "</Literal>"
  };
  return {
    eq: "<PropertyIsEqualTo>" +
            common.propertyName +
            common.literal +
        "</PropertyIsEqualTo>",
    gt: "<PropertyIsGreaterThan>" +
            common.propertyName +
            common.literal +
         "</PropertyIsGreaterThan>",
    gte:"",
    lt: "",
    lte: "",
    like: "",
    ilike: "",
    AND: "<And>[AND]</And>",
    OR: "<Or>[OR]</Or>",
  }
}();

/////
var qgisFilterTemplates = {
  // codice qui
};

var mapserverFilterTemplates = {
  // codice qui
};

var geoserverFilterTemplates = {
  // codice qui
};

function QueryWFSProvider(){
  var self = this;
  var d = $.Deferred();
  var results = {
    headers:[],
    values:[]
  };

  this.doSearch = function(queryFilterObject){
    var querylayer = queryFilterObject.queryLayer;
    var url = querylayer.getQueryUrl();
    var crs = querylayer.getCrs();
    var filterObject = queryFilterObject.filterObject;
    //setto il srs
    ol3GetFeatureRequestObject.srsName+=crs || '4326';
    var response, filter;
    switch (ogcservertype) {
      case 'OGC':
        filter = this.createStandardFilter(filterObject, querylayer);
        response = this.standardSearch(url, filter);
        return resolve(response)
        break;
      case 'qgis':
        filter = this.createQgisFilter(filterObject);
        response = this.qgisSearch(querylayer, url, filter);
        return resolve(response)
        break;
      case 'mapserver':
        filter = this.createMapserverFilter(filterObject);
        response = this.mapserverSearch(querylayer, url, filter);
        return resolve(response)
        break;
      case 'geoserver':
        filter = this.createGeoserverFilter(filterObject);
        response = this.geoserverSearch(querylayer, url, filter);
        return resolve(response)
        break;
      default:
        return false
    }
  };

  this.standardSearch = function(url, filter){
    console.log(filter)
  };
  this.createStandardFilter = function(filterObject, querylayer) {
    /////inserisco il nome del layer (typename) ///
    ol3GetFeatureRequestObject.featureTypes.push(querylayer.getQueryLayerName);
    var filter = [];
    function createSingleFilter(booleanObject) {
      var filterElements = [];
      var filterElement = '';
      var rootFilter;
      _.forEach(booleanObject, function(v, k, obj) {
        //creo il filtro root che sarà AND OR
        rootFilter = ol3Filters[k];
        //qui c'è array degli elementi di un booleano
        _.forEach(v, function(input){
          //scorro su oggetto operatore
          _.forEach(input, function(v, k, obj) {
          //è un array e quindi è altro oggetto padre booleano
            if (_.isArray(v)) {
              filterElement = createSingleFilter(obj);
            } else {
              filterElement = ol3Filters[k];
              _.forEach(input, function(v, k, obj) {
                _.forEach(v, function(v, k, obj) {
                  filterElement = filterElement(k, v);
                });
              });
            };
            filterElements.push(filterElement);
          });
        });
        //verifico che ci siano almeno due condizione nel filtro AND. Nel caso di una sola condizione (esempio : un solo input)
        //estraggo solo l'elemento filtro altrimenti da errore -- DA VERIFICARE SE CAMBIARLO
        if (filterElements.length > 1) {
          rootFilter = rootFilter.apply(this, filterElements);
        } else {
          rootFilter = filterElements[0];
        };
      });
      return rootFilter;
    };
    //assegno il filtro creato
    ol3GetFeatureRequestObject.filter = createSingleFilter(filterObject);
    //creo il filtro utilizzando ol3
    filter = new ol.format.WFS().writeGetFeature(ol3GetFeatureRequestObject);
    return filter;
  };

  this.qgisSearch = function(urls, filter){
    $.get(searchUrl).then(function(result){
      self.emit("searchdone",result);
    });
    return d.promise();
  };
  this.createQGisFilter = function(filterObject) {
    var filter;
    return filter
  };
  this.mapserverSearch = function(querylayer, url, filter){
    return d.promise();
  };
  this.createMapserverFilter = function(filterObject) {
    var filter;
    return filter
  };
  this.geoserverSearch = function(querylayer, url, filter){
    return d.promise();
  };
  this.createGeoserverFilter = function(filterObject) {
    var filter;
    return filter
  };
  base(this);
}
inherit(QueryWFSProvider,G3WObject);

module.exports =  new QueryWFSProvider()


},{"core/g3wobject":31,"core/utils/utils":52}],49:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var ProjectsRegistry = require('core/project/projectsregistry');
var QueryWFSProvider = require('./queryWFSProvider');
var QueryQGISWMSProvider = require('./queryQGISWMSProvider');
var ComponentsRegistry = require('gui/componentsregistry');

var Provider = {
  'QGIS': QueryQGISWMSProvider,
  'OGC': QueryWFSProvider
};

/*var PickToleranceParams = {};
PickToleranceParams[ProjectTypes.QDJANGO] = {};
PickToleranceParams[ProjectTypes.QDJANGO][GeometryTypes.POINT] = "FI_POINT_TOLERANCE";
PickToleranceParams[ProjectTypes.QDJANGO][GeometryTypes.LINESTRING] = "FI_LINE_TOLERANCE";
PickToleranceParams[ProjectTypes.QDJANGO][GeometryTypes.POLYGON] = "FI_POLYGON_TOLERANCE";

var PickToleranceValues = {}
PickToleranceValues[GeometryTypes.POINT] = 5;
PickToleranceValues[GeometryTypes.LINESTRING] = 5;
PickToleranceValues[GeometryTypes.POLYGON] = 5;*/


//oggetto query service
function QueryService(){
  var self = this;
  this.url = "";
  this.filterObject = {};
  this.queryFilterObject = {};
  //me lo porto da mapqueryservice ma vediamo cosa succede
  this.setMapService = function(mapService){
    this._mapService = mapService;
  };

  this.setFilterObject = function(filterObject){
    this.filterObject = filterObject;
  };

  this.getFilterObject = function() {
    return this.filterObject;
  };
  //dato l'oggetto filter restituito dal server ricostruisco la struttura del filterObject
  //interpretato da queryWMSProvider
  this.createQueryFilterFromConfig = function(filter) {

    var queryFilter = {};
    var attribute;
    var operator;
    var field;
    var operatorObject = {};
    var booleanObject = {};
    //funzione che costruisce l'oggetto operatore es. {'=':{'nomecampo':null}}
    function createOperatorObject(obj) {
      //rinizializzo a oggetto vuoto
      evalObject = {};
      //verifico che l'oggetto passato non sia a sua volta un oggetto 'BOOLEANO'
      _.forEach(obj, function(v,k) {
        if (_.isArray(v)) {
          return createBooleanObject(k,v);
        };
      });
      field = obj.attribute;
      operator = obj.op;
      evalObject[operator] = {};
      evalObject[operator][field] = null;
      return evalObject;
    }
    //functione che costruisce oggetti BOOLEANI caso AND OR contenente array di oggetti fornit dalla funzione createOperatorObject
    function createBooleanObject(booleanOperator, operations) {
      booleanObject = {};
      booleanObject[booleanOperator] = [];
      _.forEach(operations, function(operation){
        booleanObject[booleanOperator].push(createOperatorObject(operation));
      });
      return booleanObject;
    }
    /*
    // vado a creare l'oggetto filtro principale. Questo è un oggetto che contiene l'operatore booleano come root (chiave)
    // come valore un array di oggetti operatori che contengono il tipo di operatore come chiave e come valore un oggetto contenete
    // nome campo e valore passato
    */
    _.forEach(filter, function(v,k,obj) {
      queryFilter = createBooleanObject(k,v);
    });
    return queryFilter;
  };

  this.createQueryFilterObject = function(layer, filterObject){
    return {
      type: 'standard',
      queryLayer: layer,
      filterObject : filterObject
    };
  };

  /////PARSERS //////////////////

  // Brutto ma per ora unica soluzione trovata per dividere per layer i risultati di un doc xml wfs.FeatureCollection.
  // OL3 li parserizza tutti insieme non distinguendo le features dei diversi layers
  this._parseLayerFeatureCollection = function(queryLayer, data) {
    var features = [];
    var layerName = queryLayer.getWMSLayerName();
    var layerData = _.cloneDeep(data);
    layerData.FeatureCollection.featureMember = [];
    
    var featureMembers = data.FeatureCollection.featureMember;
    featureMembers = _.isArray(featureMembers) ? featureMembers : [featureMembers];
    _.forEach(featureMembers,function(featureMember){
      layerName = layerName.replace(/ /g,''); // QGIS SERVER rimuove gli spazi dal nome del layer per creare l'elemento FeatureMember
      var isLayerMember = _.get(featureMember,layerName)

      if (isLayerMember) {
        layerData.FeatureCollection.featureMember.push(featureMember);
      }
    });

    var x2js = new X2JS();
    var layerFeatureCollectionXML = x2js.json2xml_str(layerData);
    var parser = new ol.format.WMSGetFeatureInfo();
    return parser.readFeatures(layerFeatureCollectionXML);
  };

  // mentre con i risultati in msGLMOutput (da Mapserver) il parser può essere istruito per parserizzare in base ad un layer di filtro
  this._parseLayermsGMLOutput = function(queryLayer, data){
    var parser = new ol.format.WMSGetFeatureInfo({
      layers: [queryLayer.queryLayerName]
    });
    return parser.readFeatures(data);
  };
  
  this._parseLayerGeoJSON = function(queryLayer, data) {
    var geojson = new ol.format.GeoJSON({
      defaultDataProjection: this.crs,
      geometryName: "geometry"
    });
    return geojson.readFeatures(data);
  };

  //// FINE PARSER ///

  //INIZO SEZIONE QUERIES ///

  // Messo qui generale la funzione che si prende cura della trasformazione dell'xml di risposta
  // dal server così da avere una risposta coerente in termini di formato risultati da presentare
  // nel componente QueryResults
  this.handleQueryResponseFromServer = function(response, infoFormat, queryLayers) {
    var jsonresponse;
    var featuresForLayers = [];
    var parser, data;
    switch (infoFormat) {
      case 'json':
        parser = this._parseLayerGeoJSON;
        data = response.vector.data;
        break;
      default:
        var x2js = new X2JS();
        try {
          if (_.isString(response)) {
            jsonresponse = x2js.xml_str2json(response);
          } else {
            jsonresponse = x2js.xml2json(response);
          }
        }
        catch (e) {
          return;
        }
        var rootNode = _.keys(jsonresponse)[0];
        
        switch (rootNode) {
          case 'FeatureCollection':
            parser = this._parseLayerFeatureCollection;
            data = jsonresponse;
            break;
          case "msGMLOutput":
            parser = this._parseLayermsGMLOutput;
            data = response;
            break;
        };
    }
    
    var nfeatures = 0
    _.forEach(queryLayers,function(queryLayer) {
      var features = parser.call(self, queryLayer, data)
      nfeatures += features.length;
      featuresForLayers.push({
        layer: queryLayer,
        features: features
      })
    });

    return featuresForLayers;
  };
  // query basato sul filtro

  this.queryByFilter = function(queryFilterObject) {
    var self = this;
    var d = $.Deferred();
    //parte da rivedere nel filtro
    var provider = Provider[queryFilterObject.queryLayer.getServerType()];
    //ritorna una promise poi gestita da che la chiede
    provider.doSearch(queryFilterObject).
    then(function(response) {
      //al momento qui replico struttura per i parser
      var queryLayer = queryFilterObject.queryLayer;
      var featuresForLayers = self.handleQueryResponseFromServer(response, queryLayer.getInfoFormat(), [queryLayer])
      d.resolve({
        data: featuresForLayers,
        query: {
          filter: queryFilterObject
        }
      });
    })
    .fail(function(e){
          d.reject(e);
    })
    return d.promise();
  };
  
  this.queryByLocation = function(coordinates, layers) {
    var self = this;
    var d = $.Deferred();
    var urlsForLayers = {};
    _.forEach(layers, function(layer){
      var queryUrl = layer.getQueryUrl();
      console.log(queryUrl);
      var urlHash = queryUrl.hashCode().toString();
      if (_.keys(urlsForLayers).indexOf(urlHash) == -1) {
        urlsForLayers[urlHash] = {
          url: queryUrl,
          layers: []
        };
      }
      urlsForLayers[urlHash].layers.push(layer);
    });

    var queryUrlsForLayers = [];
    _.forEach(urlsForLayers,function(urlForLayers){
      var queryLayers = urlForLayers.layers;
      var infoFormat = queryLayers[0].getInfoFormat();
      var params = {
        LAYERS: _.map(queryLayers,function(layer){ return layer.getQueryLayerName(); }),
        QUERY_LAYERS: _.map(queryLayers,function(layer){ return layer.getQueryLayerName(); }),
        INFO_FORMAT: infoFormat,
        // PARAMETRI DI TOLLERANZA PER QGIS SERVER
        FI_POINT_TOLERANCE: 10,
        FI_LINE_TOLERANCE: 10,
        FI_POLYGON_TOLERANCE: 10
      };
      
      var resolution = self._mapService.getResolution();
      var epsg = self._mapService.getEpsg();
      var getFeatureInfoUrl = self._mapService.getGetFeatureInfoUrlForLayer(queryLayers[0],coordinates,resolution,epsg,params);
      var queryString = getFeatureInfoUrl.split('?')[1];
      var url = urlForLayers.url+'?'+queryString;
      queryUrlsForLayers.push({
        url: url,
        infoformat: infoFormat,
        queryLayers: queryLayers
      });
    });
    if (queryUrlsForLayers.length > 0) {
      var queryRequests = [];
      var queryRequestsContext = [];
      var featuresForLayers = [];
      _.forEach(queryUrlsForLayers,function(queryUrlForLayers){
        var url = queryUrlForLayers.url;
        var queryLayers = queryUrlForLayers.queryLayers;
        var infoFormat = queryUrlForLayers.infoformat;
        var request = self.doRequestAndParse(url,infoFormat,queryLayers);
        queryRequests.push(request);
      });
      $.when.apply(this,queryRequests).
      then(function(){
        var vectorsDataResponse = Array.prototype.slice.call(arguments);
        _.forEach(vectorsDataResponse,function(_featuresForLayers,idx){
          if(featuresForLayers){
            featuresForLayers = _.concat(featuresForLayers,_featuresForLayers);
          }
        });
        d.resolve({
          data: featuresForLayers,
          query: {
            coordinates: coordinates
          }
        });
      })
      .fail(function(e){
        d.reject(e);
      });
    }
    else {
      d.resolve(coordinates,0,{});
    }
    return d.promise();
  };
  
  this.doRequestAndParse = function(url,infoFormat,queryLayers){
    var self = this;
    var d = $.Deferred();
    $.get(url).
    done(function(response){
      var featuresForLayers = self.handleQueryResponseFromServer(response, infoFormat, queryLayers);
      d.resolve(featuresForLayers);
    })
    .fail(function(){
      d.reject();
    });
    return d;
  }

  //query by BBOX
  this.queryByBoundingBox = function(bbox) {
    //codice qui
  };


  base(this);
}
inherit(QueryService,G3WObject);

module.exports =  new QueryService


},{"./queryQGISWMSProvider":47,"./queryWFSProvider":48,"core/g3wobject":31,"core/project/projectsregistry":45,"core/utils/utils":52,"gui/componentsregistry":73}],50:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var Base64 = require('core/utils/utils').Base64;
var G3WObject = require('core/g3wobject');

/*
 * RouterService basato su History.js (https://github.com/browserstate/history.js) e Crossroads (https://github.com/millermedeiros/crossroads.js)
 * Il concetto di base è una RouteQuery, del tipo "map?point=21.2,42.1&zoom=12", 
 * che viene inserito nello stato dell'history del browser e nella URL come parametro querystring in forma codificata (q=map@point!21.2,41.1|zoom!12).
 * Per invocare una RouteQuery:
 * 
 * RouterService.goto("map?point=21.2,42.1&zoom=12");
 * 
 * Chiunque voglia rispondere ad una RouteQuery deve aggiungere una route con RouterService.addRoute(pattern, callback). Es.:
 * 
 * var route = RouterService.addRoute('map/{?query}',function(query){
 *  console.log(query.point);
 *  console.log(query.zoom);
 * });
 * 
 * Patterns:
 *  "map/{foo}": la porzione "foo" è richiesta, ed viene passata come parametro alla callback
 *  "map/:foo:": la porzione "foo" è opzionale, ed eventualmente viene passata come parametro alla callback
 *  "map/:foo*: tutto quello che viene dopo "map/"
 *  "map/{?querystring}": obbligatoria querystring, passata alla callback come oggetto dei parametri
 *  "map/:?querystring:": eventuale querystring, passata alla callback come oggetto dei parametri
 * 
 * Per rimuovere una route:
 * RouterService.removeRoute(route);
*/

var RouterService = function(){
  var self = this;
  this._initialLocationQuery;
  this._routeQuery = '';
  this.setters = {
    setRouteQuery: function(routeQuery){
      this._routeQuery = routeQuery;
      crossroads.parse(routeQuery);
    }
  }
  
  History.Adapter.bind(window,'statechange',function(){
      var state = History.getState();
      var locationQuery = state.hash;
      if(state.data && state.data.routequery){
         self.setRouteQuery(state.data.routequery);
      }
      else {
        self._setRouteQueryFromLocationQuery(locationQuery);
      }
  });
  
  base(this);
};
inherit(RouterService,G3WObject);

var proto = RouterService.prototype;

proto.init = function(){
  var query = window.location.search;
  this._setRouteQueryFromLocationQuery(query);
};

proto.addRoute = function(pattern,handler,priority) {
  return crossroads.addRoute(pattern,handler,priority);
};

proto.removeRoute = function(route) {
  return crossroads.removeRoute(route);
};

proto.removeAllRoutes = function() {
  return crossroads.removeAllRoutes();
};

proto.parse = function(request,defaultArgs) {
  return crossroads.parse(request,defaultArgs);
};

proto.goto = function(routeQuery){
  //var pathb64 = Base64.encode(path);
  //History.pushState({path:path},null,'?p='+pathb64);
  if (!this._initialQuery) {
    this._initialLocationQuery = this._stripInitialQuery(location.search.substring(1));
  }
  if (routeQuery) {
    encodedRouteQuery = this._encodeRouteQuery(routeQuery);
    var path = '?'+this._initialLocationQuery + '&q='+encodedRouteQuery;
    History.pushState({routequery:routeQuery},null,path);
  }
};

proto.makeQueryString = function(queryParams){};

proto.slicePath = function(path){
  return path.split('?')[0].split('/');
};
  
proto.sliceFirst = function(path){
  var pathAndQuery = path.split('?');
  var queryString = pathAndQuery[1];
  var pathArr = pathAndQuery[0].split('/')
  var firstPath = pathArr[0];
  path = pathArr.slice(1).join('/');
  path = [path,queryString].join('?')
  return [firstPath,path];
};
  
proto.getQueryParams = function(query){
  query = query.replace('?','');
  var queryParams = {};
  var queryPairs = [];
  if (query != "" && query.indexOf("&") == -1) {
    queryPairs = [query];
  }
  else {
    queryPairs = query.split('&');
  }
  try {
    _.forEach(queryPairs,function(queryPair){
      var pair = queryPair.split('=');
      var key = pair[0];
      var value = pair[1];
      queryParams[key] = value;
    });
  }
  catch (e) {}
  return queryParams;
};

proto.getQueryString = function(path){
  return path.split('?')[1];
};

proto._getQueryPortion = function(query,queryKey){
  var queryPortion;
  try {
    var queryPairs = query.split('&');
    var queryParams = {};
    _.forEach(queryPairs,function(queryPair){
      var pair = queryPair.split('=');
      var key = pair[0];
      if (key == queryKey) {
        queryPortion = queryPair;
      }
    });
  }
  catch (e) {}
  return queryPortion;
};

proto._encodeRouteQuery = function(routeQuery) {
  routeQuery = routeQuery.replace('?','@');
  routeQuery = routeQuery.replace('&','|');
  routeQuery = routeQuery.replace('=','!');
  return routeQuery;
};

proto._decodeRouteQuery = function(routeQuery) {
  routeQuery = routeQuery.replace('@','?');
  routeQuery = routeQuery.replace('|','&');
  routeQuery = routeQuery.replace('!','=');
  return routeQuery;
};

proto._setRouteQueryFromLocationQuery = function(locationQuery) {
  //var pathb64 = this.getQueryParams(locationQuery)['q'];
  //var path = pathb64 ? Base64.decode(pathb64) : '';
  var encodedRouteQuery = this._getRouteQueryFromLocationQuery(locationQuery);
  if (encodedRouteQuery) {
    var routeQuery = this._decodeRouteQuery(encodedRouteQuery);
    this.setRouteQuery(routeQuery);
  }
};

proto._getRouteQueryFromLocationQuery = function(locationQuery) {
  return this.getQueryParams(locationQuery)['q'];
};

proto._stripInitialQuery = function(locationQuery) {
  var previousQuery = this._getQueryPortion(locationQuery,'q');
  if (previousQuery) {
    var previousQueryLength = previousQuery.length;
    var previousQueryPosition = locationQuery.indexOf(previousQuery);
    queryPrefix = _.trimEnd(locationQuery.substring(0,previousQueryPosition),"&");
    querySuffix = locationQuery.substring(previousQueryPosition+previousQueryLength);
    querySuffix = (queryPrefix != "") ? querySuffix : _.trimStart(querySuffix,"&");
    locationQuery = queryPrefix + querySuffix;
  }
  return locationQuery;
};

module.exports = new RouterService;

},{"core/g3wobject":31,"core/utils/utils":52}],51:[function(require,module,exports){
var OGC_PIXEL_WIDTH = 0.28;
var OGC_DPI = 25.4/OGC_PIXEL_WIDTH;

module.exports = {
  resToScale: function(res, metric) {
    var metric = metric || 'm';
    var scale;
    switch (metric) {
      case 'm':
        var scale = (res*1000) / OGC_PIXEL_WIDTH;
        break
    }
    return scale;
  }
};

},{}],52:[function(require,module,exports){

/**
 * Decimal adjustment of a number.
 *
 * @param {String}  type  The type of adjustment.
 * @param {Number}  value The number.
 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
 * @returns {Number} The adjusted value.
 */
function decimalAdjust(type, value, exp) {
  // If the exp is undefined or zero...
  if (typeof exp === 'undefined' || +exp === 0) {
    return Math[type](value);
  }
  value = +value;
  exp = +exp;
  // If the value is not a number or the exp is not an integer...
  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
    return NaN;
  }
  // Shift
  value = value.toString().split('e');
  value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
  // Shift back
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
}

// Decimal round
if (!Math.round10) {
  Math.round10 = function(value, exp) {
    return decimalAdjust('round', value, exp);
  };
}
// Decimal floor
if (!Math.floor10) {
  Math.floor10 = function(value, exp) {
    return decimalAdjust('floor', value, exp);
  };
}
// Decimal ceil
if (!Math.ceil10) {
  Math.ceil10 = function(value, exp) {
    return decimalAdjust('ceil', value, exp);
  };
}

String.prototype.hashCode = function() {
  var hash = 0, i, chr, len;
  if (this.length === 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr   = this.charCodeAt(i);
    hash  = ((hash << 5) - hash) + chr;
    hash |= 0;
  }
  return hash;
};

var Base64 = {_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}};


var utils = {
  mixin: function mixin(destination, source) {
      return utils.merge(destination.prototype, source);
  },
  
  mixininstance: function mixininstance(destination,source){
      var sourceInstance = new source;
      utils.merge(destination, sourceInstance);
      utils.merge(destination.prototype, source.prototype);
  },


  merge: function merge(destination, source) {
      var key;

      for (key in source) {
          if (utils.hasOwn(source, key)) {
              destination[key] = source[key];
          }
      }
  },

  hasOwn: function hasOwn(object, key) {
      return Object.prototype.hasOwnProperty.call(object, key);
  },
  
  inherit:function(childCtor, parentCtor) {
    function tempCtor() {};
    tempCtor.prototype = parentCtor.prototype;
    childCtor.superClass_ = parentCtor.prototype;
    childCtor.prototype = new tempCtor();
    childCtor.prototype.constructor = childCtor;
  },
  
  base: function(me, opt_methodName, var_args) {

    var caller = arguments.callee.caller;
    if (caller.superClass_) {
      // This is a constructor. Call the superclass constructor.
      return caller.superClass_.constructor.apply(
          me, Array.prototype.slice.call(arguments, 1));
    }

    var args = Array.prototype.slice.call(arguments, 2);
    var foundCaller = false;
    for (var ctor = me.constructor;
         ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
      if (ctor.prototype[opt_methodName] === caller) {
        foundCaller = true;
      } else if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }

    // If we did not find the caller in the prototype chain,
    // then one of two things happened:
    // 1) The caller is an instance method.
    // 2) This method was not called by the right caller.
    if (me[opt_methodName] === caller) {
      return me.constructor.prototype[opt_methodName].apply(me, args);
    } else {
      throw Error(
          'base called from a method of one name ' +
          'to a method of a different name');
    }
  },
  
  noop: function(){},
  
  truefnc: function(){return true},
  
  falsefnc: function(){return true},
  
  resolve: function(value){
    var deferred = $.Deferred();
    deferred.resolve(value);
    return deferred.promise();
  },
  
  reject: function(value){
    var deferred = $.Deferred();
    deferred.reject(value);
    return deferred.promise();
  },
  
  Base64: Base64
};

module.exports = utils;

},{}],53:[function(require,module,exports){
var Control = function(options){
  var name = options.name || "?";
  this.name = name.split(' ').join('-').toLowerCase();
  this.id = this.name+'_'+(Math.floor(Math.random() * 1000000));
  
  this.positionCode = options.position || 'tl';
  
  
  if (!options.element) {
    var className = "ol-"+this.name.split(' ').join('-').toLowerCase();
    var tipLabel = options.tipLabel || this.name;
    var label = options.label || "?";
    
    options.element = $('<div class="'+className+' ol-unselectable ol-control"><button type="button" title="'+tipLabel+'">'+label+'</button></div>')[0];
  }
  
  $(options.element).addClass("ol-control-"+this.positionCode);
  
  var buttonClickHandler = options.buttonClickHandler || Control.prototype._handleClick.bind(this);
  
  $(options.element).on('click',buttonClickHandler);
  
  ol.control.Control.call(this,options);
  
  this._postRender();
}
ol.inherits(Control, ol.control.Control);

var proto = Control.prototype;

proto.getPosition = function(positionCode) {
  var positionCode = positionCode || this.positionCode;
  var position = {};
  position['top'] = (positionCode.indexOf('t') > -1) ? true : false;
  position['left'] = (positionCode.indexOf('l') > -1) ? true : false;
  return position;
};

proto._handleClick = function(){
  event.preventDefault();
  var self = this;
  var map = this.getMap();
  
  var resetControl = null;
  // remove all the other, eventually toggled, interactioncontrols
  var controls = map.getControls();
  controls.forEach(function(control){
    if(control.id && control.toggle && (control.id != self.id)) {
      control.toggle(false);
      if (control.name == 'reset') {
        resetControl = control;
      }
    }
  });
  if (!self._toggled && resetControl) {
    resetControl.toggle(true);
  }
};

proto.setMap = function(map){
  var position =  this.getPosition();
  var viewPort = map.getViewport();
  var previusControls = $(viewPort).find('.ol-control-'+this.positionCode);
  if (previusControls.length) {
    previusControl = previusControls.last();
    var previousOffset = position.left ? previusControl.position().left : previusControl.position().right;
    var hWhere = position.left ? 'left' : 'right';
    var previousWidth = previusControl[0].offsetWidth;
    var hOffset = $(this.element).position()[hWhere] + previousOffset + previousWidth + 2;
    $(this.element).css(hWhere,hOffset+'px');
  }
  
  ol.control.Control.prototype.setMap.call(this,map);
};

proto._postRender = function() {};

module.exports = Control;

},{}],54:[function(require,module,exports){
var Control = require('./control');

var InteractionControl = function(options){
  this._toggled = this._toggled || false;
  this._interactionClass = options.interactionClass || null;
  this._interaction = null;
  this._autountoggle = options.autountoggle || false;

  
  options.buttonClickHandler = InteractionControl.prototype._handleClick.bind(this);
  
  Control.call(this,options);
};
ol.inherits(InteractionControl, Control);

var proto = InteractionControl.prototype;

proto.toggle = function(toggle){
  var toggle = toggle !== undefined ? toggle : !this._toggled
  this._toggled = toggle;
  var map = this.getMap();
  var controlButton = $(this.element).find('button').first();
  
  if (toggle) {
    if (this._interaction) {
      //map.addInteraction(this._interaction);
      this._interaction.setActive(true);
    }
    controlButton.addClass('g3w-ol-toggled');
  }
  else {
    if (this._interaction) {
      //map.removeInteraction(this._interaction);
      this._interaction.setActive(false);
    }
    controlButton.removeClass('g3w-ol-toggled');
  }
};

proto.setMap = function(map) {
  if (!this._interaction) {
    this._interaction = new this._interactionClass;
    map.addInteraction(this._interaction);
    this._interaction.setActive(false);
  }
  Control.prototype.setMap.call(this,map);
};

proto._handleClick = function(e){
  this.toggle();
  Control.prototype._handleClick.call(this,e);
};

module.exports = InteractionControl;

},{"./control":53}],55:[function(require,module,exports){
var OLControl = function(options){
  this._control = null;
  
  this.positionCode = options.position || 'tl';
  
  switch (options.type) {
    case 'zoom':
      this._control = new ol.control.Zoom(options);
      break;
    case 'scaleline':
      this._control = new ol.control.ScaleLine(options);
      break;
    case 'overview':
      this._control = new ol.control.OverviewMap(options);
  }
  
  $(this._control.element).addClass("ol-control-"+this.positionCode);
  
  ol.control.Control.call(this,{
    element: this._control.element
  });
}
ol.inherits(OLControl, ol.control.Control);
module.exports = OLControl;

var proto = OLControl.prototype;

proto.getPosition = function(positionCode) {
  var positionCode = positionCode || this.positionCode;
  var position = {};
  position['top'] = (positionCode.indexOf('t') > -1) ? true : false;
  position['left'] = (positionCode.indexOf('l') > -1) ? true : false;
  return position;
};

proto.setMap = function(map){
  var position =  this.getPosition();
  var viewPort = map.getViewport();
  var previusControls = $(viewPort).find('.ol-control-'+this.positionCode);
  if (previusControls.length) {
    previusControl = previusControls.last();
    var previousOffset = position.left ? previusControl.position().left : previusControl.position().right;
    var hWhere = position.left ? 'left' : 'right';
    var previousWidth = previusControl[0].offsetWidth;    
    var hOffset = $(this.element).position()[hWhere] + previousOffset + previousWidth + 2;
    $(this.element).css(hWhere,hOffset+'px');
  }
  
  this._control.setMap(map);
};

},{}],56:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');

var PickCoordinatesInteraction = require('../interactions/pickcoordinatesinteraction');

var QueryControl = function(options){
  var self = this;
  var _options = {
    name: "querylayer",
    tipLabel: "Query layer",
    label: "\uea0f",
    interactionClass: PickCoordinatesInteraction
  };
  
  options = utils.merge(options,_options);
  
  InteractionControl.call(this,options);
}
ol.inherits(QueryControl, InteractionControl);

var proto = QueryControl.prototype;

proto.setMap = function(map) {
  var self = this;
  InteractionControl.prototype.setMap.call(this,map);
  this._interaction.on('boxstart',function(e){
    self._startCoordinate = e.coordinate;
  });
  
  this._interaction.on('picked',function(e){
    self.dispatchEvent({
      type: 'picked',
      coordinates: e.coordinate
    });
    if (self._autountoggle) {
      self.toggle();
    }
  });
};

module.exports = QueryControl;

},{"../interactions/pickcoordinatesinteraction":61,"../utils":66,"./interactioncontrol":54}],57:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');

var ResetControl = function(options){
  var self = this;
  this._toggled = true;
  this._startCoordinate = null;
  var _options = {
      name: "reset",
      tipLabel: "Pan",
      label: "\ue901",
    };
  
  options = utils.merge(options,_options);
  
  InteractionControl.call(this,options);
}
ol.inherits(ResetControl, InteractionControl);
module.exports = ResetControl;

var proto = ResetControl.prototype;

proto._postRender = function(){
  this.toggle(true);
};

},{"../utils":66,"./interactioncontrol":54}],58:[function(require,module,exports){
var utils = require('../utils');
var InteractionControl = require('./interactioncontrol');

var ZoomBoxControl = function(options){
  var self = this;
  this._startCoordinate = null;
  var _options = {
      name: "zoombox",
      tipLabel: "Zoom to box",
      label: "\ue900",
      interactionClass: ol.interaction.DragBox
    };
  
  options = utils.merge(options,_options);
  
  InteractionControl.call(this,options);
}
ol.inherits(ZoomBoxControl, InteractionControl);
module.exports = ZoomBoxControl;

var proto = ZoomBoxControl.prototype;

proto.setMap = function(map) {
  var self = this;
  InteractionControl.prototype.setMap.call(this,map);
  this._interaction.on('boxstart',function(e){
    self._startCoordinate = e.coordinate;
  });
  
  this._interaction.on('boxend',function(e){
    var start_coordinate = self._startCoordinate;
    var end_coordinate = e.coordinate;
    var extent = ol.extent.boundingExtent([start_coordinate,end_coordinate]);
    self.dispatchEvent({
      type: 'zoomend',
      extent: extent
    });
    self._startCoordinate = null;
    if (self._autountoggle) {
      self.toggle();
    }
  })
};

},{"../utils":66,"./interactioncontrol":54}],59:[function(require,module,exports){
var utils = require('./utils');
var maphelpers = require('./map/maphelpers');

(function (name, root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(factory);
  }
  else if (typeof exports === 'object') {
    module.exports = factory();
  }
  else {
    root[name] = factory();
  }
})('g3wol3', this, function () {
  'use strict';
  
  var helpers = utils.merge({},maphelpers);
  
  return {
    helpers: helpers
  }
});

},{"./map/maphelpers":65,"./utils":66}],60:[function(require,module,exports){
var DeleteInteractionEvent = function(type, features, coordinate) {

  this.type = type;
  this.features = features;
  this.coordinate = coordinate;
};

var DeleteInteraction = function(options) {
  ol.interaction.Pointer.call(this, {
    handleDownEvent: DeleteInteraction.handleDownEvent_,
    handleMoveEvent: DeleteInteraction.handleMoveEvent_,
    handleUpEvent: DeleteInteraction.handleUpEvent_,
    handleEvent: DeleteInteraction.handleEvent_,
  });

  this.previousCursor_ = undefined;
  this.lastCoordinate_ = null;
  this.features_ = options.features !== undefined ? options.features : null;
};
ol.inherits(DeleteInteraction, ol.interaction.Pointer);

DeleteInteraction.handleEvent_ = function(mapBrowserEvent) {
  if (mapBrowserEvent.type == 'keydown'){
    if(this.features_.getArray().length && mapBrowserEvent.originalEvent.keyCode == 46){
      this.dispatchEvent(
          new DeleteInteractionEvent(
              'deleteend', this.features_,
              event.coordinate));
      return true;
    }
  }
  else{
    return ol.interaction.Pointer.handleEvent.call(this,mapBrowserEvent);
  }
};

DeleteInteraction.handleDownEvent_ = function(event) {
  this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  if (this.lastFeature_) {
    DeleteInteraction.handleMoveEvent_.call(this, event);
    this.dispatchEvent(
            new DeleteInteractionEvent(
                'deleteend', this.features_,
                event.coordinate));
    return true;
  }
  return false;
};

DeleteInteraction.handleMoveEvent_ = function(event) {
  var elem = event.map.getTargetElement();
  var intersectingFeature = event.map.forEachFeatureAtPixel(event.pixel,
      function(feature) {
        return feature;
      });

  if (intersectingFeature) {
    this.previousCursor_ = elem.style.cursor;

    elem.style.cursor =  'pointer';

  } else {
    elem.style.cursor = this.previousCursor_ !== undefined ?
        this.previousCursor_ : '';
    this.previousCursor_ = undefined;
  }
};

DeleteInteraction.prototype.featuresAtPixel_ = function(pixel, map) {
  var found = null;

  var intersectingFeature = map.forEachFeatureAtPixel(pixel,
      function(feature) {
        return feature;
      });

  if (this.features_ &&
     _.includes(this.features_.getArray(), intersectingFeature)) {
    found = intersectingFeature;
  }

  return found;
};

module.exports = DeleteInteraction;

},{}],61:[function(require,module,exports){
var PickCoordinatesEventType = {
  PICKED: 'picked'
};

var PickCoordinatesEvent = function(type, coordinate) {
  this.type = type;
  this.coordinate = coordinate;
};

var PickCoordinatesInteraction = function(options) {
  this.previousCursor_ = null;
  
  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickCoordinatesInteraction.handleDownEvent_,
    handleUpEvent: PickCoordinatesInteraction.handleUpEvent_,
    handleMoveEvent: PickCoordinatesInteraction.handleMoveEvent_,
  });
};
ol.inherits(PickCoordinatesInteraction, ol.interaction.Pointer);

PickCoordinatesInteraction.handleDownEvent_ = function(event) {
  return true;
};

PickCoordinatesInteraction.handleUpEvent_ = function(event) {
  this.dispatchEvent(
          new PickCoordinatesEvent(
              PickCoordinatesEventType.PICKED,
              event.coordinate));
  return true;
};

PickCoordinatesInteraction.handleMoveEvent_ = function(event) {
  var elem = event.map.getTargetElement();
  elem.style.cursor =  'pointer';
};

PickCoordinatesInteraction.prototype.shouldStopEvent = function(){
  return false;
};

PickCoordinatesInteraction.prototype.setActive = function(active){
  var map = this.getMap();
  if (map) {
    var elem = map.getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setActive.call(this,active);
};

PickCoordinatesInteraction.prototype.setMap = function(map){
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this,map);
};

module.exports = PickCoordinatesInteraction;

},{}],62:[function(require,module,exports){
  var PickFeatureEventType = {
  PICKED: 'picked'
};

var PickFeatureEvent = function(type, coordinate, feature) {
  this.type = type;
  this.feature = feature;
  this.coordinate = coordinate;
};

var PickFeatureInteraction = function(options) {
  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickFeatureInteraction.handleDownEvent_,
    handleUpEvent: PickFeatureInteraction.handleUpEvent_,
    handleMoveEvent: PickFeatureInteraction.handleMoveEvent_,
  });
  
  this.features_ = options.features || null;
  
  this.layers_ = options.layers || null;
  
  this.pickedFeature_ = null;
  
  var self = this;
  this.layerFilter_ = function(layer) {
    return _.includes(self.layers_, layer);
  };
};
ol.inherits(PickFeatureInteraction, ol.interaction.Pointer);

PickFeatureInteraction.handleDownEvent_ = function(event) {
  this.pickedFeature_ = this.featuresAtPixel_(event.pixel, event.map);
  return true;
};

PickFeatureInteraction.handleUpEvent_ = function(event) {
  if(this.pickedFeature_){
    this.dispatchEvent(
            new PickFeatureEvent(
                PickFeatureEventType.PICKED,
                event.coordinate,
                this.pickedFeature_));
  }
  return true;
};

PickFeatureInteraction.handleMoveEvent_ = function(event) {
  var elem = event.map.getTargetElement();
  var intersectingFeature = this.featuresAtPixel_(event.pixel, event.map);

  if (intersectingFeature) {
    elem.style.cursor =  'pointer';
  } else {
    elem.style.cursor = '';
  }
};

PickFeatureInteraction.prototype.featuresAtPixel_ = function(pixel, map) {
  var found = null;

  var intersectingFeature = map.forEachFeatureAtPixel(pixel,
      function(feature) {
        if (this.features_) {
          if (this.features_.indexOf(feature) > -1){
            return feature
          }
          else{
            return null;
          }
        }
        return feature;
      },this,this.layerFilter_);
  
  if(intersectingFeature){
    found = intersectingFeature;
  }
  return found;
};

PickFeatureInteraction.prototype.shouldStopEvent = function(){
  return false;
};

PickFeatureInteraction.prototype.setMap = function(map){
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this,map);
};

module.exports = PickFeatureInteraction;

},{}],63:[function(require,module,exports){
var BaseLayers = {};

BaseLayers.OSM = new ol.layer.Tile({
  source: new ol.source.OSM({
    attributions: [
      new ol.Attribution({
        html: 'All maps &copy; ' +
            '<a href="http://www.openstreetmap.org/">OpenStreetMap</a>'
      }),
      ol.source.OSM.ATTRIBUTION
    ],
    url: 'http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    crossOrigin: null
  }),
  id: 'osm',
  title: 'OSM',
  basemap: true
});

BaseLayers.BING = {};

BaseLayers.BING.Road = new ol.layer.Tile({
  name:'Road',
  visible: false,
  preload: Infinity,
  source: new ol.source.BingMaps({
    key: 'Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn',
    imagerySet: 'Road'
      // use maxZoom 19 to see stretched tiles instead of the BingMaps
      // "no photos at this zoom level" tiles
      // maxZoom: 19
  }),
  basemap: true
});

BaseLayers.BING.AerialWithLabels = new ol.layer.Tile({
  name: 'AerialWithLabels',
  visible: true,
  preload: Infinity,
  source: new ol.source.BingMaps({
    key: 'Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn',
    imagerySet: 'AerialWithLabels'
      // use maxZoom 19 to see stretched tiles instead of the BingMaps
      // "no photos at this zoom level" tiles
      // maxZoom: 19
  }),
  basemap: true
});

BaseLayers.BING.Aerial = new ol.layer.Tile({
  name: 'Aerial',
  visible: false,
  preload: Infinity,
  source: new ol.source.BingMaps({
    key: 'Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn',
    imagerySet: 'Aerial'
      // use maxZoom 19 to see stretched tiles instead of the BingMaps
      // "no photos at this zoom level" tiles
      // maxZoom: 19
  }),
  basemap: true
});

module.exports = BaseLayers;

},{}],64:[function(require,module,exports){
var utils = require('../utils');
var RasterLayers = {};

RasterLayers.TiledWMSLayer = function(layerObj,extraParams){
  var options = {
    layerObj: layerObj,
    extraParams: extraParams || {},
    tiled: true
  }
  return RasterLayers._WMSLayer(options);
};

RasterLayers.WMSLayer = function(layerObj,extraParams){
  var options = {
    layerObj: layerObj,
    extraParams: extraParams || {}
  }
  return RasterLayers._WMSLayer(options);
};

RasterLayers._WMSLayer = function(options){
  var layerObj = options.layerObj;
  var extraParams = options.extraParams;
  var tiled = options.tiled || false;
  
  var params = {
    LAYERS: layerObj.layers || '',
    VERSION: '1.3.0',
    TRANSPARENT: true,
    SLD_VERSION: '1.1.0'
  };
  
  params = utils.merge(params,extraParams);
  
  var sourceOptions = {
    url: layerObj.url,
    params: params,
    ratio: 1
  };
  
  var imageOptions = {
    id: layerObj.id,
    name: layerObj.name,
    opacity: layerObj.opacity || 1.0,
    visible:layerObj.visible,
    maxResolution: layerObj.maxResolution
  }
  
  var imageClass;
  var source;
  if (tiled) {
    source = new ol.source.TileWMS(sourceOptions);
    imageClass = ol.layer.Tile;
    //imageOptions.extent = [1134867,3873002,2505964,5596944];
  }
  else {
    source = new ol.source.ImageWMS(sourceOptions)
    imageClass = ol.layer.Image;
  }
  
  imageOptions.source = source;
  
  var layer = new imageClass(imageOptions);
  
  return layer;
};

/*RasterLayers.TiledWMSLayer = function(layerObj){
  var layer = new ol.layer.Tile({
    name: layerObj.name,
    opacity: 1.0,
    source: new ol.source.TileWMS({
      url: layerObj.url,
      params: {
        LAYERS: layerObj.layers || '',
        VERSION: '1.3.0',
        TRANSPARENT: true
      }
    }),
    visible: layerObj.visible
  });
  
  return layer;
};*/

module.exports = RasterLayers;


},{"../utils":66}],65:[function(require,module,exports){
BaseLayers = require('../layers/bases');

var MapHelpers = {
  createViewer: function(opts){
    return new _Viewer(opts);
  }
};

var _Viewer = function(opts){
  var controls = ol.control.defaults({
    attributionOptions: {
      collapsible: false
    },
    zoom: false,
    attribution: false
  });//.extend([new ol.control.Zoom()]);
  
  var interactions = ol.interaction.defaults()
    .extend([
      new ol.interaction.DragRotate()
    ]);
  interactions.removeAt(1) // rimuovo douclickzoom
  
  var view;
  if (opts.view instanceof ol.View) {
    view = opts.view;
  }
  else {
    view = new ol.View(opts.view);
  }
  var options = {
    controls: controls,
    interactions: interactions,
    ol3Logo: false,
    view: view,
    keyboardEventTarget: document
  };
  if (opts.id){
    options.target = opts.id;
  }
  var map  = new ol.Map(options);
  this.map = map;
};

_Viewer.prototype.destroy = function(){
  if (this.map) {
    this.map.dispose();
    this.map = null
  }
};

_Viewer.prototype.getView = function() {
  return this.map.getView();
}

_Viewer.prototype.updateMap = function(mapObject){};

_Viewer.prototype.updateView = function(){};

_Viewer.prototype.getMap = function(){
  return this.map;
};

_Viewer.prototype.setTarget = function(id){
  this.map.setTarget(id);
};

_Viewer.prototype.goTo = function(coordinates, options){
  var options = options || {};
  var animate = options.animate || true;
  var zoom = options.zoom || false;
  var view = this.map.getView();
  
  if (animate) {
    var panAnimation = ol.animation.pan({
      duration: 500,
      source: view.getCenter()
    });
    var zoomAnimation = ol.animation.zoom({
      duration: 500,
      resolution: view.getResolution()
    });
    this.map.beforeRender(panAnimation,zoomAnimation);
  }
  
  view.setCenter(coordinates);
  if (zoom) {
    view.setZoom(zoom);
  }
};

_Viewer.prototype.goToRes = function(coordinates, resolution){
  var options = options || {};
  var animate = options.animate || true;
  var view = this.map.getView();
  
  if (animate) {
    var panAnimation = ol.animation.pan({
      duration: 300,
      source: view.getCenter()
    });
    var zoomAnimation = ol.animation.zoom({
      duration: 300,
      resolution: view.getResolution()
    });
    this.map.beforeRender(panAnimation,zoomAnimation);
  }

  view.setCenter(coordinates);
  view.setResolution(resolution);
};

_Viewer.prototype.fit = function(geometry, options){
  var view = this.map.getView();
  
  var options = options || {};
  var animate = options.animate || true;
  
  if (animate) {
    var panAnimation = ol.animation.pan({
      duration: 300,
      source: view.getCenter()
    });
    var zoomAnimation = ol.animation.zoom({
      duration: 300,
      resolution: view.getResolution()
    });
    this.map.beforeRender(panAnimation,zoomAnimation);
  }
  
  if (options.animate) {
    delete options.animate; // non lo passo al metodo di OL3 perché è un'opzione interna
  }
  options.constrainResolution = options.constrainResolution || true;
  
  view.fit(geometry,this.map.getSize(),options);
};

_Viewer.prototype.getZoom = function(){
  var view = this.map.getView();
  return view.getZoom();
};

_Viewer.prototype.getResolution = function(){
  var view = this.map.getView();
  return view.getResolution();
};

_Viewer.prototype.getCenter = function(){
  var view = this.map.getView();
  return view.getCenter();
};

_Viewer.prototype.getBBOX = function(){
  return this.map.getView().calculateExtent(this.map.getSize());
};

_Viewer.prototype.getLayerByName = function(layerName) {
  var layers = this.map.getLayers();
  var length = layers.getLength();
  for (var i = 0; i < length; i++) {
    if (layerName === layers.item(i).get('name')) {
      return layers.item(i);
    }
  }
  return null;
};

_Viewer.prototype.removeLayerByName = function(layerName){
  var layer = this.getLayerByName(layerName);
  if (layer){
    this.map.removeLayer(layer);
    delete layer;
  }
};

_Viewer.prototype.getActiveLayers = function(){
  var activelayers = [];
  this.map.getLayers().forEach(function(layer) {
    var props = layer.getProperties();
    if (props.basemap != true && props.visible){
       activelayers.push(layer);
    }
  });
  
  return activelayers;
};

_Viewer.prototype.removeLayers = function(){
  this.map.getLayers().clear();
};

_Viewer.prototype.getLayersNoBase = function(){
  var layers = [];
  this.map.getLayers().forEach(function(layer) {
    var props = layer.getProperties();
    if (props.basemap != true){
      layers.push(layer);
    }
  });
  
  return layers;
};

_Viewer.prototype.addBaseLayer = function(type){
  var layer;
  type ? layer = BaseLayers[type]:  layer = BaseLayers.BING.Aerial;
  this.map.addLayer(layer);
};

_Viewer.prototype.changeBaseLayer = function(layerName){
  var baseLayer = this.getLayerByName(layername);
  var layers = this.map.getLayers();
  layers.insertAt(0, baseLayer);
};

module.exports = MapHelpers;

},{"../layers/bases":63}],66:[function(require,module,exports){
var utils = {
  merge: function(obj1,obj2){
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
  }
}

module.exports = utils;

},{}],67:[function(require,module,exports){
module.exports = "<!-- item template -->\n<div id=\"catalog\" class=\"tabbable-panel catalog\">\n  <div class=\"tabbable-line\">\n    <ul class=\"nav nav-tabs\" role=\"tablist\">\n      <li role=\"presentation\" class=\"active\"><a href=\"#tree\" aria-controls=\"tree\" role=\"tab\" data-toggle=\"tab\" data-i18n=\"tree\">Data</a></li>\n      <li v-if=\"hasBaseLayers\" role=\"presentation\"><a href=\"#baselayers\" aria-controls=\"baselayers\" role=\"tab\" data-toggle=\"tab\" data-i18n=\"baselayers\">Layer Base</a></li>\n      <li role=\"presentation\"><a href=\"#legend\" aria-controls=\"legend\" role=\"tab\" data-toggle=\"tab\" data-i18n=\"legend\">Legenda</a></li>\n    </ul>\n    <div  class=\"tab-content\">\n      <div role=\"tabpanel\" class=\"tab-pane active tree\" id=\"tree\">\n        <ul class=\"tree-root\">\n          <tristate-tree v-if=\"!isHidden\" :layerstree=\"layerstree\" class=\"item\" v-for=\"layerstree in layerstree\">\n          </tristate-tree>\n        </ul>\n      </div>\n      <div v-if=\"hasBaseLayers\" role=\"tabpanel\" class=\"tab-pane baselayers\" id=\"baselayers\">\n        <form>\n          <ul>\n            <li v-if=\"!baselayer.fixed\" v-for=\"baselayer in baselayers\">\n              <div class=\"radio\">\n                <label><input type=\"radio\" name=\"baselayer\" v-checked=\"baselayer.visible\" @click=\"setBaseLayer(baselayer.id)\">{{ baselayer.title }}</label>\n              </div>\n            </li>\n          </ul>\n        </form>\n      </div>\n      <legend :layerstree=\"layerstree\"></legend>\n    </div>\n  </div>\n</div>\n";

},{}],68:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var merge = require('core/utils/utils').merge;
var t = require('core/i18n/i18n.service').t;
var resolve = require('core/utils/utils').resolve;
var Component = require('gui/vue/component');
var GUI = require('gui/gui');
var ProjectsRegistry = require('core/project/projectsregistry');

var vueComponentOptions = {
  template: require('./catalog.html'),
  data: function() {
    return {
      project: ProjectsRegistry.getCurrentProject()
    }
  },
  computed: {
    layerstree: function(){
      return this.project.state.layerstree;
    },
    baselayers: function(){
      return this.project.state.baselayers;
    },
    hasBaseLayers: function(){
      return this.project.state.baselayers.length>0;
    }
  },
  methods: {
    setBaseLayer: function(id) {
      this.project.setBaseLayer(id);
    }
  },
  ready: function() {
    var self = this;
    this.$on('treenodetoogled',function(node){
      self.project.toggleLayer(node.id);
    });

    this.$on('treenodestoogled',function(nodes,parentChecked){
      var layersIds = _.map(nodes,'id');
      self.project.toggleLayers(layersIds,parentChecked);
    });
    
    this.$on('treenodeselected',function(node){
      if (!node.selected) {
        self.project.selectLayer(node.id);
      } else {
        self.project.unselectLayer(node.id);
      }
    });
  }
}

// se lo voglio istanziare manualmente
var InternalComponent = Vue.extend(vueComponentOptions);

// se lo voglio usare come componente come elemento html
Vue.component('g3w-catalog', vueComponentOptions);


/* COMPONENTI FIGLI */

// tree component


Vue.component('tristate-tree', {
  template: require('./tristate-tree.html'),
  props: {
    layerstree: [],
    //eredito il numero di childs dal parent
    n_parentChilds : 0,
    checked: false
  },
  data: function () {
    return {
      expanded: this.layerstree.expanded,
      parentChecked: false,
      //proprieta che serve per fare confronto per il tristate
      n_childs: this.layerstree.nodes ? this.layerstree.nodes.length : 0
    }
  },
  watch: {
      'checked': function (val){
        this.layerstree.visible = val;
      }
  },
  computed: {
    isFolder: function () {
      var isFolder = this.n_childs ? true : false;
      if (isFolder) {
        var _visibleChilds = 0;
        _.forEach(this.layerstree.nodes,function(layer){
          if (layer.visible){
            _visibleChilds += 1;
          }
        });
        this.n_parentChilds = this.n_childs - _visibleChilds;
      }
      return isFolder
    },
    isHidden: function() {
      return this.layerstree.hidden && (this.layerstree.hidden === true);
    },
    selected: function() {
      var isSelected = this.layerstree.selected ? "SI" : "NO";
      console.log(isSelected);
      return isSelected;
    }
  },
  methods: {
    toggle: function (checkAllLayers) {
      var checkAll = checkAllLayers == 'true' ? true : false;
      if (this.isFolder && !checkAll) {
        this.layerstree.expanded = !this.layerstree.expanded;
      }
      else if (checkAll){
        if (this.parentChecked && !this.n_parentChilds){
          this.parentChecked = false;
        } else if (this.parentChecked && this.n_parentChilds) {
          this.parentChecked = true;
        }
        else {
          this.parentChecked = !this.parentChecked;
        }
        this.$dispatch('treenodestoogled',this.layerstree.nodes,this.parentChecked);
      }
      else {
        this.$dispatch('treenodetoogled',this.layerstree);
      }
    },
    select: function () {
      if (!this.isFolder) {
        this.$dispatch('treenodeselected',this.layerstree);
      }
    },
    triClass: function () {
      if (!this.n_parentChilds) {
        return 'fa-check-square-o';
      } else if ((this.n_parentChilds > 0) && (this.n_parentChilds < this.n_childs)) {
        return 'fa-square';
      } else {
        return 'fa-square-o';
      }
    }
  }
})

Vue.component('legend',{
    template: require('./legend.html'),
    props: ['layerstree'],
    data: function() {
      return {
        //data qui
      }
    },
    computed: {
      visiblelayers: function(){
        var _visiblelayers = [];
        var layerstree = this.layerstree;
        function traverse(obj){
        _.forIn(obj, function (layer, key) {
              //verifica che il valore dell'id non sia nullo
              if (!_.isNil(layer.id) && layer.visible) {
                  _visiblelayers.push(layer);
              }
              if (!_.isNil(layer.nodes)) {
                  traverse(layer.nodes);
              }
          });
        }
        traverse(layerstree);
        return _visiblelayers;
      }
    },
    watch: {
      'layerstree': {
        handler: function(val, old){
          //codice qui
        },
        deep: true
      }
    },
    ready: function() {
      //codice qui
    }
});

Vue.component('legend-item',{
  template: require('./legend_item.html'),
  props: ['layer'],
  computed: {
    legendurl: function(){
      // in attesa di risolvere lo schianto di QGSI Server...
      //return "http://localhost/cgi-bin/qgis_mapserv.fcgi?map=/home/giohappy/Scrivania/Dev/G3W/g3w-client/test/progetto/test.qgs&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&FORMAT=image/png&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+this.layer.name;
      return ProjectsRegistry.getCurrentProject().getLayerById(this.layer.id).getLegendUrl();
    }
  },
  methods: {
    // esempio utilizzo del servizio GUI
    openform: function(){
      //GUI.notify.success("Apro un form");
      //GUI.showForm();
    }
  }
});

/* FINE COMPONENTI FIGLI */

/* INTERFACCIA PUBBLICA */
function CatalogComponent(options){
  base(this);
  this.id = "catalog-component";
  this.title = "catalog";
  this.internalComponent = new InternalComponent;
  //mergio opzioni con proprità di default del componente
  merge(this, options);
}

inherit(CatalogComponent, Component);

module.exports = CatalogComponent;

},{"./catalog.html":67,"./legend.html":69,"./legend_item.html":70,"./tristate-tree.html":71,"core/i18n/i18n.service":34,"core/project/projectsregistry":45,"core/utils/utils":52,"gui/gui":76,"gui/vue/component":95}],69:[function(require,module,exports){
module.exports = "<div role=\"tabpanel\" class=\"tab-pane\" id=\"legend\">\n  <legend-item :layer=\"layer\" v-for=\"layer in visiblelayers\"></legend-item>\n</div>\n";

},{}],70:[function(require,module,exports){
module.exports = "<div @click=\"openform()\">{{ layer.title }}</div>\n<div><img :src=\"legendurl\"></div>\n";

},{}],71:[function(require,module,exports){
module.exports = "<li class=\"tree-item\" :class=\"{selected: layerstree.selected}\">\n  <span :class=\"{bold: isFolder, 'fa-chevron-down': layerstree.expanded, 'fa-chevron-right': !layerstree.expanded}\" @click=\"toggle\" v-if=\"isFolder\" class=\"fa\"></span>\n  <span v-if=\"isFolder\" @click=\"toggle('true')\" :class=\"[triClass()]\" class=\"fa\"></span>\n  <span v-else @click=\"toggle\" :class=\"[layerstree.visible  ? 'fa-check-square-o': 'fa-square-o',layerstree.disabled  ? 'disabled': '']\" class=\"fa\" style=\"cursor:default\"></span>\n  <span id=\"tree-node-title\" :class=\"{bold: isFolder, disabled: layerstree.disabled}\" @click=\"select\">{{layerstree.title}}</span>\n  <ul v-show=\"layerstree.expanded\" v-if=\"isFolder\">\n    <tristate-tree :n_parent-childs.sync=\"n_parentChilds\" :layerstree=\"layerstree\" :checked=\"parentChecked\" v-for=\"layerstree in layerstree.nodes\">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n\n";

},{}],72:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var G3WObject = require('core/g3wobject');

var Component = function(options) {
  var options = options || {};
  this.internalComponent = null;
  this.id = options.id || Math.random() * 1000;
  this.title = options.title || ''
  this.state = {
    visible: options.visible || true,
    open: options.open || false
  }
};
inherit(Component,G3WObject);

var proto = Component.prototype;

proto.getId = function(){
  return this.id;
};

proto.getTitle = function(){
  return this.state.title;
};

proto.setTitle = function(title) {
  this.state.title = title;
};

//implementati due metodi per poter unificare il metodo di recupero del servizio
//legato al componente

proto.getService = function() {
  return this._service;
};

proto.setService = function(serviceInstance) {
  this._service = serviceInstance;
};

////////// fine metodi Service Components //////////

/* HOOKS */

/* 
 * Il metodo permette al componente di montarsi nel DOM
 * parentEl: elemento DOM padre, su cui inserirsi; 
 * ritorna una promise, risolta nel momento in cui sarà terminato il montaggio
*/
proto.mount = function(parent){};

/*
 * Metodo richiamato quando si vuole rimuovere il componente.
 * Ritorna una promessa che sarà risolta nel momento in cui il componente avrà completato la propria rimozione (ed eventuale rilascio di risorse dipendenti)
*/
proto.unmount = function(){};

/* 
 * Metodo (opzionale) che offre l'opportunità di ricalcolare proprietà dipendenti dalle dimensioni del padre
 * parentHeight: nuova altezza del parent
 * parentWidth: nuova larghezza del parent
 * richiamato ogni volta che il parent subisce un ridimensionamento
*/
proto.layout = function(parentWidth,parentHeight){};


module.exports = Component;

},{"core/g3wobject":31,"core/utils/utils":52}],73:[function(require,module,exports){
var G3WObject = require('core/g3wobject');
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;

function ComponentsRegistry() {
  this.components = {};
  
  this.registerComponent = function(component) {
    var id = component.getId();
    if (!this.components[id]) {
      this.components[id] = component;
    }
  }; 
  
  this.getComponent = function(id) {
    return this.components[id];
  };
  
  this.unregisterComponent = function(id) {
    var component = this._components[id];
    if (component) {
      if (_.isFunction(component.destroy)) {
        component.destroy();
      }
      delete component;
      this._components[id] = null;
    }
  };
}
inherit(ComponentsRegistry,G3WObject);

module.exports = new ComponentsRegistry;

},{"core/g3wobject":31,"core/utils/utils":52}],74:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var resolve = require('core/utils/utils').resolve;
var GUI = require('gui/gui');
var Panel =  require('gui/panel');
var PickCoordinatesInteraction = require('g3w-ol3/src/interactions/pickcoordinatesinteraction');
var QueryService = require('core/query/queryservice');
var ClipBoard = require('core/clipboardservice');

Vue.filter('startcase', function (value) {
  return _.startCase(value);
});

Vue.filter('lowerCase', function (value) {
  return _.lowerCase(value);
});

Vue.filter('relationplural', function (relation) {
  return (relation.plural) ? relation.plural : _.startCase(relation.name);
});

Vue.validator('email', function (val) {
  return /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(val)
});

Vue.validator('integer', function (val) {
  return /^(-?[1-9]\d*|0)$/.test(val);
});

var FormPanel = Vue.extend({
  template: require('./formpanel.html'),
  data: function() {
    return {
      state: {}
    }
  },
  transitions: {'addremovetransition': 'showhide'},
  methods: {
    exec: function(cbk){
      var relations = this.state.relations || null;
      cbk(this.state.fields,relations);
      GUI.closeForm();
    },
    btnEnabled: function(button) {
      return button.type != 'save' || (button.type == 'save' && this.$validation.valid);
    },
    hasFieldsRequired: function() {
      return this.$options.form._hasFieldsRequired();
    },
    isEditable: function(field){
      return this.$options.form._isEditable(field);
    },
    isSimple: function(field){
      return this.$options.form._isSimple(field);
    },
    isTextarea: function(field) {
      return this.$options.form._isTextarea(field);
    },
    isSelect: function(field){
      return this.$options.form._isSelect(field);
    },
    isLayerPicker: function(field){
      return this.$options.form._isLayerPicker(field);
    },
    layerPickerPlaceHolder: function(field){
      return this.$options.form._getlayerPickerLayerName(field.input.options.layerid);
    },
    pickLayer: function(field){
      this.$options.form._pickLayer(field);
    },
    isVisible: function(field){
      return this.$options.form._isVisible(field);
    },
    visibleElements: function(relation) {
      return _.filter(relation.elements,function(element){
        return element.state != 'DELETED';
      });
    },
    showRelation: function(relation){
      return this.$options.form._shouldShowRelation(relation);
    },
    relationPkFieldName: function(relation) {
      return relation.pk;
    },
    isRelationElementDeletable: function(relation,element) {
      if (element.new) {
        return true;
      }
      var min;
      if (relation.type == 'ONE') {
        min = 1;
      }
      else {
        min = Number.NEGATIVE_INFINITY;
      }

      if (relation.min) {
        min = Math.min(min.relation.min);
      }
      return min < relation.elements.length;
    },
    canAddRelationElements: function(relation) {
      var canAdd = true;
      if (relation.type == 'ONE') {
        canAdd = (relation.elements.length) ? false : true // se è una relazione 1:1 e non ho elementi, lo posso aggiungere, altrimenti no
      }
      else {
        var max = relation.max ? relation.max : Number.POSITIVE_INFINITY;
        canAdd = relation.elements.length < max; 
      }
      return canAdd;
    },
    addRelationElement: function(relation) {
      this.$options.form._addRelationElement(relation);
    },
    removeRelationElement: function(relation,element){
      this.$options.form._removeRelationElement(relation,element);
    },
    fieldsSubset: function(fields) {
      var end = Math.min(3,fields.length);
      return fields.slice(0,end);
    },
    fieldsSubsetLength: function(fields) {
      return this.fieldsSubset(fields).length;
    },
    collapseElementBox: function(relation,element) {
      var boxid = this.getUniqueRelationElementId(relation,element);
      if (this.state.elementsBoxes[boxid]) {
        return this.state.elementsBoxes[boxid].collapsed;
      }
    },
    toggleElementBox: function(relation, element) {
      var boxid = this.getUniqueRelationElementId(relation, element);
      console.log(boxid);
      this.state.elementsBoxes[boxid].collapsed = !this.state.elementsBoxes[boxid].collapsed;
    },
    getUniqueRelationElementId: function(relation, element) {
      return this.$options.form.getUniqueRelationElementId(relation, element);
    },
    pasteToClipBoard : function() {
      console.log('Paste');
    },
    copyToClipBoard : function() {
      this.$options.form._copyFormToClipBoard();
    },
    pickLayerToClipBoard: function() {
      this.$options.form._pickLayerToClipBoard();
    }
  },
  computed: {
    isValid: function(field) {
      return this.$validate(field.name);
    },
    hasRelations: function(){
      return this.state.relations.length;
    },
    canPaste: function() {
      return !this.state.copied;
    },
    cambiatofields: function() {
      console.log(this.state.fields);
    }
  }
});

var Inputs = {};
Inputs.STRING = 'string';
Inputs.INTEGER = 'integer';
Inputs.FLOAT = 'float';

Inputs.defaults = {};
Inputs.defaults[Inputs.STRING] = "";
Inputs.defaults[Inputs.INTEGER] = 0;
Inputs.defaults[Inputs.FLOAT] = 0.0;
Inputs.simpleFieldTypes = [Inputs.STRING,Inputs.INTEGER,Inputs.FLOAT];

Inputs.TEXTAREA = 'textarea';
Inputs.SELECT = 'select';
Inputs.LAYERPICKER = 'layerpicker';

Inputs.specialInputs = [Inputs.TEXTAREA,Inputs.SELECT,Inputs.LAYERPICKER];

function Form(options) {
  // proprietà necessarie. In futuro le mettermo in una classe Panel da cui deriveranno tutti i pannelli che vogliono essere mostrati nella sidebar
  this.internalComponent = null;
  this.options =  options || {};
  this.provider = options.provider;
  this.id = options.id; // id del form
  this.name = options.name; // nome del form
  this.dataid = options.dataid; // "accessi", "giunzioni", ecc.
  this.editor = options.editor || {};
  this.pk = options.pk || null; // eventuale chiave primaria (non tutti i form potrebbero avercela o averne bisogno
  this.isnew = (!_.isNil(options.isnew) && _.isBoolean(options.isnew)) ? options.isnew : true;
  this.state = {
    // i dati del form possono avere o meno una primary key
    fields: options.fields,
    relations: options.relations
  };
  this._clipBoard = ClipBoard.get();
  this._formPanel = options.formPanel || FormPanel;
  this._defaults = options.defaults || Inputs.defaults;
}
inherit(Form, Panel);

var proto = Form.prototype;

// viene richiamato dalla toolbar quando
// il plugin chiede di mostrare un proprio pannello nella GUI (GUI.showPanel)
proto.mount = function(container){
  this._setupFields();
  var panel = this._setupPanel();
  this._mountPanel(panel, container);
  return resolve(true);
};

proto._mountPanel = function(panel, container) {
  panel.$mount().$appendTo(container);
};

// richiamato quando la GUI chiede di chiudere il pannello. Se ritorna false il pannello non viene chiuso
proto.unmount = function(){
  this.internalComponent.$destroy(true);
  this.internalComponent = null;
  return resolve(true);
};

proto._copyFormToClipBoard = function() {
  var form = _.cloneDeep(this.state);
  return form;
};

proto._isNew = function(){
  return this.isnew;
};

proto._hasFieldsRequired = function() {
  var someFieldsRequired = _.some(this.state.fields, function(field){
    return field.validate && field.validate.required;
  });
  var someRelationsRequired = _.some(this.state.relations,function(relation){
    return relation.validate && relation.validate.required;
  });
  return someFieldsRequired || someRelationsRequired;
};

proto._isVisible = function(field){
  return !(!field.editable && (field.value == "" || _.isNull(field.value)));
};

proto._isEditable = function(field){
  return field.editable;
};

proto._isSimple = function(field){
  if (_.includes(Inputs.specialInputs,field.input.type)){
    return false;
  }
  return _.includes(Inputs.simpleFieldTypes,field.type)
};

proto._isTextarea = function(field) {
  return (field.input.type == Inputs.TEXTAREA);
};

proto._isSelect = function(field){
  return (_.includes(Inputs.specialInputs,field.input.type) && field.input.type == Inputs.SELECT);
};

proto._isLayerPicker = function(field){
  return (_.includes(Inputs.specialInputs,field.input.type) && field.input.type == Inputs.LAYERPICKER);
};

proto._pickLayer = function(field){
  var self = this;
  // ritorno una promessa, se qualcun altro volesse usare il risultato (es. per settare altri campi in base alla feature selezionata)
  var d = $.Deferred();
  // disabilito temporanemante lo strato modale per permettere l'interazione con la mappa
  GUI.setModal(false);
  mapService = GUI.getComponent('map').getService();
  var layer = mapService.getProject().getLayerById(field.input.options.layerid);
  var relFieldName = field.input.options.field;
  var relFieldLabel = layer.getAttributeLabel(field.input.options.field);
  this._pickInteraction = new PickCoordinatesInteraction();
  mapService.addInteraction(this._pickInteraction);
  this._pickInteraction.on('picked',function(e){   
    QueryService.queryByLocation(e.coordinate, [layer])
    .then(function(response){
      var featuresForLayers = response.data;
      if (featuresForLayers.length && featuresForLayers[0].features.length) { 
        var attributes = featuresForLayers[0].features[0].getProperties(); // prendo la prima feature del primo (e unico) layer
        var value = attributes[relFieldName] ? attributes[relFieldName] : attributes[relFieldLabel];
        field.value = value;
        d.resolve(attributes);
      }
      else {
        d.reject();
      }
    })
    .fail(function(){
      d.reject();
    })
    .always(function(){
      mapService.removeInteraction(self._pickInteraction);
      self._pickInteraction = null;
    })
  });
  return d.promise();
};
//funzione che server per poter copiare lo state di una feature identificata
// sul form attuale di un'altra feature
proto._pickLayerToClipBoard = function() {
  //TODO
  var self = this;
  // ritorno una promessa, se qualcun altro volesse
  // usare il risultato (es. per settare altri campi in base alla feature selezionata)
  var d = $.Deferred();
  // disabilito temporanemante lo strato modale per permettere l'interazione con la mappa
  GUI.setModal(false);
  // recupero mapservice perchè mi permette di ineteragire con la mappa
  mapService = GUI.getComponent('map').getService();
  var vectorLayer = this.editor.getVectorLayer();
  var layer = mapService.getProject().getLayerById(vectorLayer.id);
  // creo il pickCoordinate interaction da permettermi così di interagire con la mappa
  this._pickInteraction = new PickCoordinatesInteraction();
  // l'aggiungo alla mappa
  mapService.addInteraction(this._pickInteraction);
  // on picked
  this._pickInteraction.on('picked',function(e) {
    // qui passo lo stessso layer su cui sto agendo
    QueryService.queryByLocation(e.coordinate, [layer])
        .then(function(response) {
          console.log(response);
          var featuresForLayers = response.data;
          // verifico se ci sono features selezionate
          if (featuresForLayers.length && featuresForLayers[0].features.length) {
            // rpendo la prima feature
            var feature = featuresForLayers[0].features[0];
            var fields = vectorLayer.getFieldsWithValues(feature);
            var relationsPromise = self.editor.getRelationsWithValues(feature);
            relationsPromise
            .then(function(relations) {
              self.state.fields = fields;
              self.state.relations = relations;
              var elementsBoxes = self.getUniqueRelationsElementId();
              self.state.elementsBoxes = elementsBoxes;
            });
          }
        })
        .fail(function(){
          d.reject();
        })
        .always(function(){
          mapService.removeInteraction(self._pickInteraction);
          self._pickInteraction = null;
          // riattivo lo strato modale per permettere l'interazione con la mappa
          GUI.setModal(true);
        })
  });
  console.log('pickClipBoard');
};

proto._getDefaultValue = function(field){
  var defaultValue = null;
  if (field.input && field.input.options && field.input.options.default){
    defaultValue = field.input.options.default;
  }
  else if (this._isSelect(field)){
    defaultValue = field.input.options.values[0].key;
  }
  /*else {
    defaultValue = this._defaults[field.type];
  }*/
  return defaultValue;
};

proto._getlayerPickerLayerName = function(layerId){
  mapService = GUI.getComponent('map').getService();
  var layer = mapService.getProject().getLayerById(layerId);
  if (layer){
    return layer.getName();
  }
  return "";
};

proto._shouldShowRelation = function(relation){
  return true;
};

// per definire i valori di default nel caso si tratta di un nuovo inserimento
proto._setupFields = function() {
  var self = this;
  
  var fields = _.filter(this.state.fields,function(field){
    // tutti i campi eccetto la PK (se non nulla)
    if (self.pk && field.value==null){
      return ((field.name != self.pk));
    }
    return true;
  });
  
  _.forEach(fields,function(field){
    if(_.isNil(field.value)){
      var defaultValue = self._getDefaultValue(field);
      if (defaultValue){
        field.value = defaultValue;
      }
    }
  });
  
  if (this.state.relations){
    var relations = this.state.relations;
    _.forEach(relations,function(relation){
      _.forEach(relation.elements,function(element){
        _.forEach(relation.fields,function(field){
          if(_.isNil(field.value)){
            var defaultValue = self._getDefaultValue(field);
            if (defaultValue){
              field.value = defaultValue;
            }
          }
        })
      })
    });
  }
};

proto._setupPanel = function(){
  var self = this;
  var panel = this.internalComponent = new this._formPanel({
    form: this
  });
  if (this.options.buttons) {
    panel.buttons = this.options.buttons;
  }
  var elementsBoxes = this.getUniqueRelationsElementId();
  this.state.elementsBoxes = elementsBoxes;
  panel.state = this.state;
  return panel;
};

proto.getUniqueRelationsElementId = function() {
  var self = this;
  var elementsBoxes = {};
  _.forEach(this.state.relations,function(relation){
    _.forEach(relation.elements,function(element){
      var boxid = self.getUniqueRelationElementId(relation,element);
      elementsBoxes[boxid] = {
        collapsed: true
      }
    })
  });
  return elementsBoxes;

};

proto.getUniqueRelationElementId = function(relation, element){
  return relation.name+'_'+element.id;
};

proto._getField = function(fieldName){
  var field = null;
  _.forEach(this.state.fields,function(f){
    if (f.name == fieldName){
      field = f;
    }
  })
  return field;
};

proto._addRelationElement = function(relation) {
  var element = this.provider.createRelationElement(relation);
  var elementBoxId = this.getUniqueRelationElementId(relation,element);
  Vue.set(this.state.elementsBoxes,elementBoxId,{collapsed:false});
  relation.elements.push(element);
};

proto._removeRelationElement = function(relation,element){
  var self = this;
  _.forEach(relation.elements,function(_element,idxToRemove){
    if (_element.id == element.id) {
      //relation.elements.splice(idxToRemove,1);
      element.state = 'DELETED'; // lo marco come elminato
      delete self.state.elementsBoxes.elmentBoxId;
    }
  })
};

proto._getRelationField = function(fieldName,relationName){
  var field = null;
  _.forEach(this.state.relations,function(relation,name){
    if (relationName == name){
      _.forEach(relation.fields,function(f){
        if (f.name == fieldName){
          field = f;
        }
      })
    }
  });
  return field;
};

module.exports = {
  Form: Form,
  FormPanel: FormPanel
};

},{"./formpanel.html":75,"core/clipboardservice":20,"core/query/queryservice":49,"core/utils/utils":52,"g3w-ol3/src/interactions/pickcoordinatesinteraction":61,"gui/gui":76,"gui/panel":83}],75:[function(require,module,exports){
module.exports = "<div>\n    <div class=\"quick-actions-menu\">\n        <div class=\"pull-right\">\n            <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-screenshot\" data-placement=\"bottom\" @click=\"pickLayerToClipBoard\"  data-i18n=\"[title]copy_form_data_from_feature\"></button>\n            <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-copy\" data-placement=\"bottom\" @click=\"copyToClipBoard\"  data-i18n=\"[title]copy_form_data\"></button>\n            <button class=\"btn btn-default btn-circle-medium glyphicon glyphicon-paste\" data-placement=\"bottom\" @click=\"pasteToClipBoard\" v-disabled=\"canPaste\"> data-i18n=\"[title]paste_form_data\"></button>\n        </div>\n    </div>\n    <div>\n        <validator name=\"validation\">\n            <form novalidate class=\"form-horizontal g3w-form\">\n                <div class=\"box box-primary\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">Attributi elemento</h3>\n                        <div class=\"box-tools pull-right\">\n                        </div>\n                    </div>\n                    <div class=\"box-body\">\n                        <template v-for=\"field in state.fields\">\n                            <div v-if=\"isVisible(field)\" class=\"form-group has-feedback\">\n                                <label :for=\"field.name\" class=\"col-sm-4 control-label\">{{ field.label }}<span v-if=\"field.validate && field.validate.required\">*</span></label>\n                                <div class=\"col-sm-8\">\n                                    <input v-if=\"isSimple(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" class=\"form-control\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"field.input.label\">\n                                    <textarea v-if=\"isTextarea(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" class=\"form-control\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"field.input.label\">\n                                    </textarea>\n                                    <select v-if=\"isSelect(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" class=\"form-control\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"field.input.label\">\n                                        <option v-for=\"value in field.input.options.values\" value=\"{{ value.key }}\">{{ value.value }}</option>\n                                    </select>\n                                    <div v-if=\"isLayerPicker(field)\">\n                                        <input class=\"form-control\" @click=\"pickLayer(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" onfocus=\"blur()\" data-toggle=\"tooltip\" title=\"Ottieni il dato da un elemento del layer '{{ layerPickerPlaceHolder(field) }}'\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"'['+layerPickerPlaceHolder(field)+']'\">\n                                        <i class=\"glyphicon glyphicon-screenshot form-control-feedback\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </template>\n                    </div>\n                </div>\n                <div v-for=\"relation in state.relations\" style=\"margin-top:10px\">\n                    <div v-if=\"showRelation(relation)\" transition=\"expand\">\n                        <div class=\"box box-default\">\n                            <div class=\"box-header with-border\">\n                                <h3 class=\"box-title\">{{ relation | relationplural }}</h3>\n                            </div>\n                            <div class=\"box-body\">\n                                <table v-if=\"relation.elements.length\" class=\"table table-striped\">\n                                    <thead>\n                                    <tr>\n                                        <th v-for=\"field in fieldsSubset(relation.fields)\">{{field.label}}</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    <template v-for=\"element in visibleElements(relation)\">\n                                        <tr class=\"attributes-preview\" @click=\"toggleElementBox(relation,element)\">\n                                            <td v-for=\"relfield in fieldsSubset(element.fields)\">\n                                                <span>{{relfield.value}}</span>\n                                            </td>\n                                            <td>\n                                                <i v-if=\"isRelationElementDeletable(relation,element)\" class=\"glyphicon glyphicon glyphicon-trash link trash\" @click.stop.prevent=\"removeRelationElement(relation,element)\"></i>\n                                                <i class=\"glyphicon glyphicon-option-horizontal link morelink\"></i>\n                                            </td>\n                                        </tr>\n                                        <tr v-show=\"!collapseElementBox(relation,element)\" class=\"queryresults-featurebox\">\n                                            <td :colspan=\"fieldsSubsetLength(element.fields)+1\">\n                                                <template v-for=\"field in element.fields\">\n                                                    <div v-if=\"isVisible(field)\" class=\"form-group has-feedback\">\n                                                        <label :for=\"field.name\" class=\"col-sm-4 control-label\">{{ field.label }}<span v-if=\"field.validate && field.validate.required\">*</span></label>\n                                                        <div class=\"col-sm-8\">\n                                                            <input v-if=\"isSimple(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" class=\"form-control\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"field.input.label\">\n                                                            <textarea v-if=\"isTextarea(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" class=\"form-control\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"field.input.label\"></textarea>\n                                                            <select v-if=\"isSelect(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" class=\"form-control\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"field.input.label\">\n                                                                <option v-for=\"value in field.input.options.values\" value=\"{{ value.key }}\">{{ value.value }}</option>\n                                                            </select>\n                                                            <div v-if=\"isLayerPicker(field)\">\n                                                                <input class=\"form-control\" @click=\"pickLayer(field)\" :field=\"field.name\" v-validate=\"field.validate\" v-disabled=\"!isEditable(field)\" onfocus=\"blur()\" data-toggle=\"tooltip\" title=\"Ottieni il dato da un elemento del layer '{{ layerPickerPlaceHolder(field) }}'\" v-model=\"field.value\" :id=\"field.name\" :placeholder=\"'['+layerPickerPlaceHolder(field)+']'\">\n                                                                <i class=\"glyphicon glyphicon-screenshot form-control-feedback\"></i>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </template>\n                                            </td>\n                                        </tr>\n                                    </template>\n                                    </tbody>\n                                </table>\n                                <div v-if=\"canAddRelationElements(relation)\" class=\"row\" style=\"margin:0px\"><i class=\"glyphicon glyphicon-plus-sign pull-right btn-add\" @click=\"addRelationElement(relation)\"></i></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-4 col-sm-8\">\n                        <div v-if=\"hasFieldsRequired\" style=\"margin-bottom:10px\">\n                            <span>* Campi richiesti</span>\n                        </div>\n                        <span v-for=\"button in buttons\">\n                <button class=\"btn \" :class=\"[button.class]\" @click.stop.prevent=\"exec(button.cbk)\" v-disabled=\"!btnEnabled(button)\">{{ button.title }}</button>\n              </span>\n                    </div>\n                </div>\n            </form>\n        </validator>\n    </div>\n</div>\n";

},{}],76:[function(require,module,exports){
var noop = require('core/utils/utils').noop;
var inherit = require('core/utils/utils').inherit;
var G3WObject = require('core/g3wobject');
var ComponentsRegistry = require('gui/componentsregistry');

// rappresenta l'interfaccia globale dell'API della GUI. 
// metodi devono essere implementati (definiti) dall'applicazione ospite
// l'app ospite dovrebbe chiamare anche la funzione GUI.ready() quando la UI è pronta
function GUI(){
  this.ready = false;
  // url delle risorse (immagini, ecc.)
  this.getResourcesUrl = noop;
  // show a Vue form
  this.showForm = noop;
  this.closeForm = noop;
  
  // mostra una lista di oggetti (es. lista di risultati)
  this.showListing = noop;
  this.closeListing = noop;
  this.hideListing = noop;
  
  // options conterrà i vari dati sui risultati. Sicuramente avrà la prprietà options.features
  // nel caso di queryByLocation avrà anche options.coordinate
  this.showQueryResults = function(options) {};
  this.hideQueryResults = noop;

  /* panel */
  this.showPanel = noop;
  this.hidePanel = noop;

  //metodi componente
  // aggiunge (e registra) un componente in un placeholder del template - Metodo implementato dal template
  this.addComponent = function(component,placeholder) {};
  this.removeComponent = function(id) {};
  // registra globalmente un componente (non legato ad uno specifico placeholder. Es. componente per mostrare risultati interrogazion)
  this.setComponent = function(component) {
    ComponentsRegistry.registerComponent(component);
  };
  this.getComponent = function(id) {
    return ComponentsRegistry.getComponent(id);
  };
  //fine metodi componente

  this.ready = function(){
    this.emit('ready');
    this.ready = true;
  };
  
  this.guiResized = function(){
    this.emit('guiresized');
  };

  /* spinner */
  GUI.showSpinner = function(options){};

  GUI.hideSpinner = function(id){};

  
  this.notify = noop;
  this.dialog = noop;
}

inherit(GUI,G3WObject);

module.exports = new GUI;

},{"core/g3wobject":31,"core/utils/utils":52,"gui/componentsregistry":73}],77:[function(require,module,exports){
module.exports = "<div>\n  Lista di oggetti\n</div>\n";

},{}],78:[function(require,module,exports){
var resolve = require('core/utils/utils').resolve;
var reject = require('core/utils/utils').reject;
var GUI = require('gui/gui');
//var MapService = require('core/map/mapservice');

var ListPanelComponent = Vue.extend({
  template: require('./listpanel.html'),
  methods: {
    exec: function(cbk){
      var relations = this.state.relations || null;
      cbk(this.state.fields,relations);
      GUI.closeForm();
    }
  }
});


function ListPanel(options){
  // proprietà necessarie. In futuro le mettermo in una classe Panel da cui deriveranno tutti i pannelli che vogliono essere mostrati nella sidebar
  this.panelComponent = null;
  this.options =  options || {};
  this.id = options.id || null; // id del form
  this.name = options.name || null; // nome del form
  
  this.state = {
    list: options.list || []
  }
  
  this._listPanelComponent = options.listPanelComponent || ListPanelComponent;
}

var proto = ListPanel.prototype;

// viene richiamato dalla toolbar quando il plugin chiede di mostrare un proprio pannello nella GUI (GUI.showPanel)
proto.onShow = function(container){
  var panel = this._setupPanel();
  this._mountPanel(panel,container);
  return resolve(true);
};

// richiamato quando la GUI chiede di chiudere il pannello. Se ritorna false il pannello non viene chiuso
proto.onClose = function(){
  this.panelComponent.$destroy(true);
  this.panelComponent = null;
  return resolve(true);
};

proto._setupPanel = function(){
  var panel = this.panelComponent = new this._listPanelComponent({
    panel: this
  });
  panel.state = this.state;
  return panel
};

proto._mountPanel = function(panel,container){
  panel.$mount().$appendTo(container);
};

module.exports = {
  ListPanelComponent: ListPanelComponent,
  ListPanel: ListPanel
}

},{"./listpanel.html":77,"core/utils/utils":52,"gui/gui":76}],79:[function(require,module,exports){
var ResetControl = require('g3w-ol3/src/controls/resetcontrol');
var QueryControl = require('g3w-ol3/src/controls/querycontrol');
var ZoomBoxControl = require('g3w-ol3/src/controls/zoomboxcontrol');

var OLControl = require('g3w-ol3/src/controls/olcontrol');

var ControlsFactory = {
  create: function(options) {
    var control;
    var ControlClass = ControlsFactory.CONTROLS[options.type];
    if (ControlClass) {
      control = new ControlClass(options);
    }
    return control;
  }
};

ControlsFactory.CONTROLS = {
  'reset': ResetControl,
  'zoombox': ZoomBoxControl,
  'query': QueryControl,
  'zoom': OLControl,
  'scaleline': OLControl,
  'overview': OLControl
};

module.exports = ControlsFactory;

},{"g3w-ol3/src/controls/olcontrol":55,"g3w-ol3/src/controls/querycontrol":56,"g3w-ol3/src/controls/resetcontrol":57,"g3w-ol3/src/controls/zoomboxcontrol":58}],80:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');
var GUI = require('gui/gui');
var ApplicationService = require('core/applicationservice');
var ProjectsRegistry = require('core/project/projectsregistry');
var ProjectTypes = require('core/project/projecttypes');
var GeometryTypes = require('core/geometry/geometry').GeometryTypes;
var ol3helpers = require('g3w-ol3/src/g3w.ol3').helpers;
var WMSLayer = require('core/map/layer/wmslayer');
var ControlsFactory = require('gui/map/control/factory');
var QueryService = require('core/query/queryservice');

function MapService(project){
  var self = this;
  this.config;
  this.viewer;
  this.target;
  this._mapControls = [],
  this._mapLayers = [];
  this.mapBaseLayers = {};
  this.layersExtraParams = {};
  this.state = {
      bbox: [],
      resolution: null,
      center: null,
      loading: false
  };
  this.config = ApplicationService.getConfig();
  
  var routerService = ApplicationService.getRouterService();
  routerService.addRoute('map/{?query}',function(query){
    var query = query || {};
    if (query.center) {
      console.log('Centra mappa su: '+query.center);
    }
  });
  
  this._howManyAreLoading = 0;
  this._incrementLoaders = function(){
    if (this._howManyAreLoading == 0){
      this.emit('loadstart');
      GUI.showSpinner({
        container: $('#map-spinner'),
        id: 'maploadspinner',
        style: 'blue'
      });
    }
    this._howManyAreLoading += 1;
  };
  
  this._decrementLoaders = function(){
    this._howManyAreLoading -= 1;
    if (this._howManyAreLoading == 0){
      this.emit('loadend');
      GUI.hideSpinner('maploadspinner');
    }
  };
  
  this._interactionsStack = [];
  if(!_.isNil(project)) {
    this.project = project;
  }
  else {
    this.project = ProjectsRegistry.getCurrentProject();
  }

  this.setters = {
    setMapView: function(bbox,resolution,center){
      this.state.bbox = bbox;
      this.state.resolution = resolution;
      this.state.center = center;
      this.updateMapLayers(this.mapLayers);
    },
    setupViewer: function(initialResolution){
      //$script("http://epsg.io/"+ProjectService.state.project.crs+".js");
      proj4.defs("EPSG:"+self.project.state.crs,this.project.state.proj4);
      if (self.viewer) {
        self.viewer.destroy();
        self.viewer = null;
      }
      self._setupViewer(initialResolution);
      self.setupControls();
      self.setupLayers();
      self.emit('viewerset');
    }
  };
  
  this._setupViewer = function(initialResolution){
    var extent = this.project.state.extent;
    var projection = this.getProjection();
    
    /*var constrain_extent;
    if (this.config.constraintextent) {
      var extent = this.config.constraintextent;
      var dx = extent[2]-extent[0];
      var dy = extent[3]-extent[1];
      var dx4 = dx/4;
      var dy4 = dy/4;
      var bbox_xmin = extent[0] + dx4;
      var bbox_xmax = extent[2] - dx4;
      var bbox_ymin = extent[1] + dy4;
      var bbox_ymax = extent[3] - dy4;
      
      constrain_extent = [bbox_xmin,bbox_ymin,bbox_xmax,bbox_ymax];
    }*/
    
    this.viewer = ol3helpers.createViewer({
      id: this.target,
      view: {
        projection: projection,
        /*center: this.config.initcenter || ol.extent.getCenter(extent),
        zoom: this.config.initzoom || 0,
        extent: this.config.constraintextent || extent,
        minZoom: this.config.minzoom || 0, // default di OL3 3.16.0
        maxZoom: this.config.maxzoom || 28 // default di OL3 3.16.0*/
        center: ol.extent.getCenter(extent),
        extent: extent,
        //minZoom: 0, // default di OL3 3.16.0
        //maxZoom: 28 // default di OL3 3.16.0
        maxResolution: initialResolution
      }
    });
    
    if (this.config.background_color) {
      $('#' + this.target).css('background-color', this.config.background_color);
    }
    
    $(this.viewer.map.getViewport()).prepend('<div id="map-spinner" style="position:absolute;right:0px;"></div>');
    
    this.viewer.map.getInteractions().forEach(function(interaction){
      self._watchInteraction(interaction);
    });
    
    this.viewer.map.getInteractions().on('add',function(interaction){
      self._watchInteraction(interaction.element);
    });
    
    this.viewer.map.getInteractions().on('remove',function(interaction){
      //self._onRemoveInteraction(interaction);
    });

    this.viewer.map.getView().setResolution(initialResolution);
    
    this.viewer.map.on('moveend',function(e){
      self._setMapView();
    });

    //AL MOMENTO LASCIO COSÌ POI VEDIAMO
    QueryService.setMapService(this);

    this.emit('ready');
  };
  
  this.project.on('projectswitch',function(){
    self.setupLayers();
  });
  
  this.project.onafter('setLayersVisible',function(layersIds){
    var mapLayers = _.map(layersIds,function(layerId){
      var layer = self.project.getLayerById(layerId);
      return self.getMapLayerForLayer(layer);
    });
    self.updateMapLayers(self.getMapLayers());
  });
  
  this.project.onafter('setBaseLayer',function(){
    self.updateMapLayers(self.mapBaseLayers);
  });
  
  base(this);
}
inherit(MapService,G3WObject);

var proto = MapService.prototype;

// rende questo mapservice slave di un altro MapService
proto.slaveOf = function(mapService, sameLayers){
  // se impostare i layer iniziali uguali a quelli del mapService master
  var sameLayers = sameLayers || false;
};

proto.setLayersExtraParams = function(params,update){
  this.layersExtraParams = _.assign(this.layersExtraParams,params);
  this.emit('extraParamsSet',params,update);
};

proto.getProject = function() {
  return this.project;
};

proto.getMap = function() {
  return this.viewer.map;
};

proto.getProjection = function() {
  var extent = this.project.state.extent;
  var projection = new ol.proj.Projection({
    code: "EPSG:"+this.project.state.crs,
    extent: extent
  });
  return projection;
};

proto.getViewerElement = function(){
  return this.viewer.map.getTargetElement();
};

proto.getViewport = function(){
  return this.viewer.map.getViewport();
};

proto.getResolution = function() {
  return this.viewer.map.getView().getResolution();
};

proto.getEpsg = function() {
  return this.viewer.map.getView().getProjection().getCode();
};

proto.getGetFeatureInfoUrlForLayer = function(layer,coordinates,resolution,epsg,params) {
  var mapLayer = this.getMapLayerForLayer(layer);
  return mapLayer.getGetFeatureInfoUrl(coordinates,resolution,epsg,params);
};

proto.setupControls = function(){
  var self = this;
  var map = self.viewer.map;
  if (this.config && this.config.mapcontrols) {
    _.forEach(this.config.mapcontrols,function(controlType){
      var control;
      switch (controlType) {
        case 'reset':
          if (!isMobile.any) {
            control = ControlsFactory.create({
              type: controlType
            });
          }
          self.addControl(control);
          break;
        case 'zoom':
          control = ControlsFactory.create({
            type: controlType,
            zoomInLabel: "\ue98a",
            zoomOutLabel: "\ue98b"
          });
          self.addControl(control);
          break;
        case 'zoombox': 
          if (!isMobile.any) {
            control = ControlsFactory.create({
              type: controlType
            });
            control.on('zoomend', function (e) {
              self.viewer.fit(e.extent);
            })
            self.addControl(control);
          }
          break;
        case 'zoomtoextent':
          if (!isMobile.any) {
            control = ControlsFactory.create({
              type: controlType,
              label: "\ue98c",
              extent: self.config.constraintextent
            });
            self.addControl(control);
          }
          break;
        case 'query':
          control = ControlsFactory.create({
            type: controlType
          });
          control.on('picked',function(e){
            var coordinates = e.coordinates;
            var showQueryResults = GUI.showResultsFactory('query');
            
            var layers = self.project.getLayers({
              QUERYABLE: true,
              SELECTEDORALL: true
            });
            
            //faccio query by location su i layers selezionati o tutti
            var queryResultsPanel = showQueryResults('interrogazione');
            QueryService.queryByLocation(coordinates, layers)
            .then(function(results){
              queryResultsPanel.setQueryResponse(results);
            });
          });
          self.addControl(control);
          break;
        case 'scaleline':
          control = ControlsFactory.create({
            type: controlType,
            position: 'br'
          });
          self.addControl(control);
          break;
        case 'overview':
          if (!isMobile.any) {
            var overviewProjectGid = self.project.getOverviewProjectGid();
            if (overviewProjectGid) {
              ProjectsRegistry.getProject(overviewProjectGid)
              .then(function(project){
                var overViewMapLayers = self.getOverviewMapLayers(project);
                control = ControlsFactory.create({
                  type: controlType,
                  position: 'bl',
                  className: 'ol-overviewmap ol-custom-overviewmap',
                  collapseLabel: $('<span class="glyphicon glyphicon-menu-left"></span>')[0],
                  label: $('<span class="glyphicon glyphicon-menu-right"></span>')[0],
                  collapsed: false,
                  layers: overViewMapLayers,
                  view: new ol.View({
                    projection: self.getProjection()
                  })
                });
                self.addControl(control);
              });
            }
          }
          break;
      }
    });
  }
};

proto.addControl = function(control){
  this.viewer.map.addControl(control);
  this._mapControls.push(control);
};

proto.addMapLayer = function(mapLayer) {
  this._mapLayers.push(mapLayer);
};

proto.getMapLayers = function() {
  return this._mapLayers;
};

proto.getMapLayerForLayer = function(layer){
  var mapLayer;
  var multilayerId = 'layer_'+layer.state.multilayer;
  _.forEach(this.getMapLayers(),function(_mapLayer){
    if (_mapLayer.getId() == multilayerId) {
      mapLayer = _mapLayer;
    }
  });
  return mapLayer;
};

proto.setupBaseLayers = function(){
  var self = this;
  if (!this.project.state.baselayers){
    return;
  }
  var self = this;
  this.mapBaseLayers = {};
  
  var initBaseLayer = ProjectsRegistry.config.initbaselayer;
  var baseLayersArray = this.project.state.baselayers;
  
  _.forEach(baseLayersArray,function(baseLayer){
    var visible = true;
    if (self.project.state.initbaselayer) {
      visible = baseLayer.id == (self.project.state.initbaselayer);
    }
    if (baseLayer.fixed) {
      visible = baseLayer.fixed;
    }
    baseLayer.visible = visible;
  });
  
  baseLayersArray.forEach(function(layer){     
    var config = {
      url: self.project.getWmsUrl(),
      id: layer.id,
      tiled: true
    };
    
    var mapLayer = new WMSLayer(config);
    self.registerListeners(mapLayer);
    
    mapLayer.addLayer(layer);
    self.mapBaseLayers[layer.id] = mapLayer;
  });
  
  _.forEach(_.values(this.mapBaseLayers).reverse(),function(mapLayer){
    self.viewer.map.addLayer(mapLayer.getOLLayer());
    mapLayer.update(self.state);
  })
};

proto.setupLayers = function(){
  var self = this;
  this.viewer.removeLayers();
  this.setupBaseLayers();
  this._reset();
  var layers = this.project.getLayers();
  //raggruppo per valore del multilayer con chiave valore multilayer e valore array
  var multiLayers = _.groupBy(layers,function(layer){
    return layer.state.multilayer;
  });
  _.forEach(multiLayers,function(layers,id){
    var multilayerId = 'layer_'+id;
    var tiled = layers[0].state.tiled;
    var config = {
      url: self.project.getWmsUrl(),
      id: multilayerId,
      tiled: tiled
    };
    var mapLayer = new WMSLayer(config,self.layersExtraParams);
    self.addMapLayer(mapLayer);
    self.registerListeners(mapLayer);
    _.forEach(layers.reverse(),function(layer){
      mapLayer.addLayer(layer);
    });
  });
  
  _.forEach(this.getMapLayers().reverse(),function(mapLayer){
    self.viewer.map.addLayer(mapLayer.getOLLayer());
    mapLayer.update(self.state,self.layersExtraParams);
  });
  return this.mapLayers;
};

proto.getOverviewMapLayers = function(project) {
  var self = this;
  var projectLayers = project.getLayers({
    'VISIBLE': true
  });

  var multiLayers = _.groupBy(projectLayers,function(layer){
    return layer.state.multilayer;
  });
  
  var overviewMapLayers = [];
  _.forEach(multiLayers,function(layers,id){
    var multilayerId = 'overview_layer_'+id;
    var tiled = layers[0].state.tiled;
    var config = {
      url: project.getWmsUrl(),
      id: multilayerId,
      tiled: tiled
    };
    var mapLayer = new WMSLayer(config);
    _.forEach(layers.reverse(),function(layer){
      mapLayer.addLayer(layer);
    });
    overviewMapLayers.push(mapLayer.getOLLayer(true));
  });
  
  return overviewMapLayers.reverse();
};

proto.updateMapLayers = function(mapLayers) {
  var self = this;
  _.forEach(mapLayers,function(mapLayer){
    mapLayer.update(self.state,self.layersExtraParams);
  })
};

proto.registerListeners = function(mapLayer){
  var self = this;
  mapLayer.on('loadstart',function(){
    self._incrementLoaders();
  });
  mapLayer.on('loadend',function(){
    self._decrementLoaders(false);
  });
  
  this.on('extraParamsSet',function(extraParams,update){
    if (update) {
      mapLayer.update(this.state,extraParams);
    }
  })
};

proto.setTarget = function(elId){
  this.target = elId;
};

proto.addInteraction = function(interaction) {

  this._unsetControls();
  this.viewer.map.addInteraction(interaction);
  interaction.setActive(true);
};

proto.removeInteraction = function(interaction){
  this.viewer.map.removeInteraction(interaction);
};

// emetto evento quando viene attivata un interazione di tipo Pointer (utile ad es. per disattivare/riattivare i tool di editing)
proto._watchInteraction = function(interaction) {
  var self = this;
  interaction.on('change:active',function(e){
    if ((e.target instanceof ol.interaction.Pointer) && e.target.getActive()) {
      self.emit('pointerInteractionSet',e.target);
    }
  })
};

proto.goTo = function(coordinates,zoom){
  var zoom = zoom || 6;
  this.viewer.goTo(coordinates,zoom);
};

proto.goToWGS84 = function(coordinates,zoom){
  var coordinates = ol.proj.transform(coordinates,'EPSG:4326','EPSG:'+this.project.state.crs);
  this.goTo(coordinates,zoom);
};

proto.extentToWGS84 = function(extent){
  return ol.proj.transformExtent(extent,'EPSG:'+this.project.state.crs,'EPSG:4326');
};

proto.highlightGeometry = function(geometryObj,options){
  var options = options || {};
  var zoom = options.zoom || true;
  
  var view = this.viewer.map.getView();
  
  var geometry;
  if (geometryObj instanceof ol.geom.Geometry){
    geometry = geometryObj;
  }
  else {
    var format = new ol.format.GeoJSON;
    geometry = format.readGeometry(geometryObj);
  }
  
  var geometryType = geometry.getType();
  if (geometryType == 'Point') {
    this.viewer.goTo(geometry.getCoordinates());
  }
  else {
    if (zoom) {
      this.viewer.fit(geometry,options);
    }
  }

  var duration = options.duration || 4000;
  
  if (options.fromWGS84) {
    geometry.transform('EPSG:4326','EPSG:'+ProjectService.state.project.crs);
  }
  
  var feature = new ol.Feature({
    geometry: geometry
  });
  var source = new ol.source.Vector();
  source.addFeatures([feature]);
  var layer = new ol.layer.Vector({
    source: source,
    style: function(feature){
      var styles = [];
      var geometryType = feature.getGeometry().getType();
      if (geometryType == 'LineString') {
        var style = new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: 'rgb(255,255,0)',
            width: 4
          })
        });
        styles.push(style);
      }
      else if (geometryType == 'Point'){
        var style = new ol.style.Style({
          image: new ol.style.Circle({
            radius: 6,
            fill: new ol.style.Fill({
              color: 'rgb(255,255,0)',
            })
          }),
          zIndex: Infinity
        });
        styles.push(style);
      }
      
      return styles;
    }
  });
  layer.setMap(this.viewer.map);
  
  setTimeout(function(){
    layer.setMap(null);
  },duration);
};

proto.refreshMap = function(){
  _.forEach(this.mapLayers,function(wmsLayer){
    wmsLayer.getOLLayer().getSource().updateParams({"time": Date.now()});
  })
};

proto.resize = function(width,height) {
  if (!this.viewer) {
    var initialExtent = this.project.state.extent;
    var xRes = ol.extent.getWidth(initialExtent) / width;
    var yRes = ol.extent.getHeight(initialExtent) / height;
    var res = Math.max(xRes,yRes);
    this.setupViewer(res);
  }
  this.getMap().updateSize();
  this._setMapView();
};

proto._reset = function() {
  this._mapLayers = [];
};

proto._unsetControls = function() {
  _.forEach(this._mapControls,function(control){
    if (control.toggle) {
      control.toggle(false);
    }
  })
};

proto._setMapView = function(){
  var bbox = this.viewer.getBBOX();
  var resolution = this.viewer.getResolution();
  var center = this.viewer.getCenter();
  this.setMapView(bbox,resolution,center);
};

module.exports = MapService;

},{"core/applicationservice":19,"core/g3wobject":31,"core/geometry/geometry":33,"core/map/layer/wmslayer":39,"core/project/projectsregistry":45,"core/project/projecttypes":46,"core/query/queryservice":49,"core/utils/utils":52,"g3w-ol3/src/g3w.ol3":59,"gui/gui":76,"gui/map/control/factory":79}],81:[function(require,module,exports){
module.exports = "<div id=\"map\" style=\"width:100%;height:100%\"></div>\n";

},{}],82:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var merge = require('core/utils/utils').merge;
var t = require('core/i18n/i18n.service').t;
var resolve = require('core/utils/utils').resolve;
var GUI = require('gui/gui');   
var Component = require('gui/vue/component');
var RouterService = require('core/router');
var ol3helpers = require('g3w-ol3/src/g3w.ol3').helpers;
var MapsRegistry = require('core/map/mapsregistry');
var MapService = require('../mapservice');

var vueComponentOptions = {
  template: require('./map.html'),
  ready: function(){
    var self = this;
    
    var mapService = this.$options.mapService;
    
    mapService.setTarget(this.$el.id);
    
    // questo serve per quando viene cambiato progetto/vista cartografica, in cui viene ricreato il viewer (e quindi la mappa)
    mapService.onafter('setupViewer',function(){
      mapService.setTarget(self.$el.id);
    });
  }
}

var InternalComponent = Vue.extend(vueComponentOptions);

Vue.component('g3w-map', vueComponentOptions);

function MapComponent(options){
  base(this,options);
  this.id = "map-component";
  this.title = "Catalogo dati";
  this._service = new MapService;
  merge(this, options);
  this.internalComponent = new InternalComponent({
    mapService: this._service
  });
};

inherit(MapComponent, Component);
var proto = MapComponent.prototype;

proto.layout = function(width,height) {
  $("#map").height(height);
  $("#map").width(width);
  this._service.resize(width,height);
};

module.exports =  MapComponent;

},{"../mapservice":80,"./map.html":81,"core/i18n/i18n.service":34,"core/map/mapsregistry":40,"core/router":50,"core/utils/utils":52,"g3w-ol3/src/g3w.ol3":59,"gui/gui":76,"gui/vue/component":95}],83:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var resolvedValue = require('core/utils/utils').resolve;
var G3WObject = require('core/g3wobject');

var Panel = function(options) {
  this.internalPanel = null;
  var options = options || {};
  this.id = options.id || null;
  this.title = options.title || '';
};

inherit(Panel, G3WObject);

var proto = Panel.prototype;

proto.getId = function(){
  return this.id;
};

proto.getTitle = function(){
  return this.title;
};

/* HOOKS */

/*
 * Il metodo permette al pannello di montarsi nel DOM
 * parent: elemento DOM padre, su cui inserirsi;
 * ritorna una promise, risolta nel momento in cui sarà terminato il montaggio
*/

// SONO DUE TIPOLOGIE DI MONTAGGIO CON IL QUALE IL PANNELLO
// CHE VERRA' MONTATO AL VOLO CON IL METODO MOUNT A SECONDA DEL TIPO DI PANNELLO RICHIESTO

// richiamato quando la GUI chiede di chiudere il pannello. Se ritorna false il pannello non viene chiuso

proto.mount = function(parent) {
  var panel = this.internalPanel;
  panel.$mount().$appendTo(parent);
  $(parent).localize();
  return resolvedValue(true);
};

/*
 * Metodo richiamato quando si vuole rimuovere il panello.
 * Ritorna una promessa che sarà risolta nel momento in cui il pannello avrà completato la propria rimozione (ed eventuale rilascio di risorse dipendenti)
*/
proto.unmount = function(){
  var panel = this.internalPanel;
  var deferred = $.Deferred();
  panel.$destroy(true);
  deferred.resolve();
  return deferred.promise();
};

/*
 * Metodo (opzionale) che offre l'opportunità di ricalcolare proprietà dipendenti dalle dimensioni del padre
 * parentHeight: nuova altezza del parent
 * parentWidth: nuova larghezza del parent
 * richiamato ogni volta che il parent subisce un ridimensionamento
*/
proto.onResize = function(parentWidth,parentHeight){};


module.exports = Panel;

},{"core/g3wobject":31,"core/utils/utils":52}],84:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var GUI = require('gui/gui');
var G3WObject = require('core/g3wobject');
var ComponentsRegistry = require('gui/componentsregistry');
var ProjectsRegistry = require('core/project/projectsregistry');

function QueryResultsService(){
  var self = this;
  this._actions = {
    'zoomto': QueryResultsService.zoomToElement,
    'gotogeometry': QueryResultsService.goToGeometry
  };
  
  this.init = function(options) {
    this.clearState();
  };
  
  this.state = {
    layers: [],
    query: {},
    querytitle: "",
    loading: true
  };
  
  this.setters = {
    setQueryResponse: function(queryResponse) {
      this.state.layers = [];
      this.state.query = queryResponse.query;
      this._digestFeaturesForLayers(queryResponse.data);
      this.state.loading = false;
    }
  };
  
  this.clearState = function() {
    this.state = {
      layers: [],
      query: {},
      querytitle: "",
      loading: true
    };
  };
  
  this.setTitle = function(querytitle) {
    this.state.querytitle = querytitle || "";
  };
  
  this.reset = function() {
    this.clearState();
  };
  
  this._digestFeaturesForLayers = function(featuresForLayers) {
    var self = this;
    _.forEach(featuresForLayers,function(featuresForLayer){
      var layer = featuresForLayer.layer;
      if (featuresForLayer.features.length) {
        var layerObj = {
          title: layer.state.title,
          id: layer.state.id,
          attributes: self._parseAttributes(layer.getAttributes(),featuresForLayer.features[0].getProperties()), // prendo solo gli attributi effettivamente ritornati dal WMS (usando la prima feature disponibile)
          features: []
        };
        _.forEach(featuresForLayer.features,function(feature){      
          var featureObj = {
            id: feature.getId(),
            attributes: feature.getProperties(),
            geometry: feature.getGeometry()
          }
          layerObj.features.push(featureObj);
        })
        self.state.layers.push(layerObj);
      }
    })
  };
  
  this._parseAttributes = function(layerAttributes,featureAttributes) {
    var featureAttributesNames = _.keys(featureAttributes);
    if (layerAttributes.length) {
      var featureAttributesNames = _.keys(featureAttributes);
      return _.filter(layerAttributes,function(attribute){
        return featureAttributesNames.indexOf(attribute.name) > -1;
      })
    }
    // se layer.attributes è vuoto (es. quando l'interrogazione è verso un layer esterno di cui non so i campi) costruisco la struttura "fittizia" usando l'attributo sia ocme name che come label
    else {
      return _.map(featureAttributesNames,function(featureAttributesName){
        return {
          name: featureAttributesName,
          label: featureAttributesName
        }
      })
    }
  }
  
  this.trigger = function(action,layer,feature) {
    var actionMethod = this._actions[action];
    if (actionMethod) {
      actionMethod(layer,feature);
    }
  };
  
  base(this);
};

QueryResultsService.zoomToElement = function(layer,feature) {
  console.log(feature.geometry);
};

QueryResultsService.goToGeometry = function(layer,feature) {
  if (feature.geometry) {
    GUI.hideQueryResults();
    var mapService = ComponentsRegistry.getComponent('map').getService();
    mapService.highlightGeometry(feature.geometry);
  }
};

// Make the public service en Event Emitter
inherit(QueryResultsService, G3WObject);

module.exports = QueryResultsService;

},{"core/g3wobject":31,"core/project/projectsregistry":45,"core/utils/utils":52,"gui/componentsregistry":73,"gui/gui":76}],85:[function(require,module,exports){
module.exports = "<!--<div id=\"search-results\">\n  <div v-for=\"layer in state.layers\" style=\"cursor:pointer\">\n    <h4>{{ layer.title }}</h4>\n    <p>Numero di features: {{ layer.features.length }}</p>\n  </div>\n</div>-->\n<div id=\"search-results\" class=\"queryresults-container\">\n  <h3>Risultati {{state.querytitle | lowercase}}</h3>\n  <div v-show=\"state.loading\" class=\"bar-loader\"></div>\n  <ul v-if=\"hasResults()\" class=\"queryresults\" id=\"queryresults\">\n    <li v-if=\"layerHasFeatures(layer)\" v-for=\"layer in state.layers\">\n      <div class=\"box box-primary\">\n        <div class=\"box-header with-border\">\n          <h3 class=\"box-title\">{{ layer.title }} ({{layer.features.length}})</h3>\n          <div class=\"box-tools pull-right\">\n            <button class=\"btn btn-box-tool\" data-widget=\"collapse\"><i class=\"fa fa-minus\"></i></button>\n          </div>\n        </div>\n        <div class=\"box-body\">\n          <table class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th v-for=\"attribute in attributesSubset(layer.attributes)\">{{attribute.label}}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <template v-for=\"feature in layer.features\">\n                <tr class=\"attributes-preview\" @click=\"toggleFeatureBox(layer,feature)\">\n                  <td v-for=\"attribute in attributesSubset(layer.attributes)\">\n                    <span>{{feature.attributes[attribute.name]}}</span>\n                    <!--<span v-if=\"isSimple(layer,feature,attribute)\">{{feature.attributes[attribute.name]}}</span>-->\n                    <!--<span v-if=\"isRoute(layer,feature,attribute)\" class=\"link dashboardlink\" @click=\"goto(layer,feature.attributes[attribute.name])\">{{ feature.attributes[attribute.name] }}</span>-->\n                    <!--<img v-if=\"isPhoto(layer,feature,attribute)\" data-url=\"{{getPhotoUrl(feature.attributes[attribute.name])}}\" style=\"max-width:50px\" :src=\"getPhotoUrl(feature.attributes[attribute.name],thumb)\" />-->\n                    <!--<a v-if=\"isLink(layer,feature,attribute)\" href=\"layer.feature.attributes[attribute.name]\" class=\"glyphicon glyphicon-link\"></a>-->\n                  </td>\n                  <td><span class=\"glyphicon glyphicon-option-horizontal link morelink\"></span></td>\n              </tr>\n              <tr v-show=\"collapseFeatureBox(layer,feature)\" class=\"queryresults-featurebox\">\n                <td :colspan=\"attributesSubsetLength(layer.attributes)+1\">\n                  <div class=\"action-buttons-container\">\n                    <div v-if=\"geometryAvailable(feature)\" class=\"action-button hint--top-right\" aria-label=\"Visualizza sulla mappa\">\n                      <span class=\"action-button-icon glyphicon glyphicon-map-marker\" @click=\"trigger('gotogeometry',layer,feature)\"></span>\n                    </div>\n                    <!--<div class=\"action-button hint--top-right\" aria-label=\"Link all'elemento\">\n                      <span class=\"action-button-icon glyphicon glyphicon-link\"></span>\n                    </div>-->\n                  </div>\n                  <table>\n                    <tr v-for=\"attribute in layer.attributes\">\n                      <td class=\"attr-label\">{{attribute.label}}</td>\n                      <td class=\"attr-value\">{{feature.attributes[attribute.name]}}</td>\n                    </tr>\n                  </table>\n                </td>\n              </tr>\n              </template>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </li>\n  </ul>\n  <span v-if=\"!hasResults()\">Nessun risultato</span>\n</div>\n\n";

},{}],86:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var merge = require('core/utils/utils').merge;
var Component = require('gui/vue/component');
var G3WObject = require('core/g3wobject');
var QueryResultsService = require('gui/queryresults/queryresultsservice');

var vueComponentOptions = {
  template: require('./queryresults.html'),
  data: function() {
    return {
      state: this.$options.queryResultsService.state,
      layersFeaturesBoxes: {},
    }
  },
  replace: false,
  methods: {
    layerHasFeatures: function(layer) {
      if (layer.features) {
        return layer.features.length > 0;
      }
      return false;
    },
    hasResults: function() {
      return this.state.layers.length;
    },
    geometryAvailable: function(feature) {
      return feature.geometry ? true : false;
    },
    attributesSubset: function(attributes) {
      var end = Math.min(3,attributes.length);
      return attributes.slice(0,end);
    },
    attributesSubsetLength: function(attributes) {
      return this.attributesSubset(attributes).length;
    },
    collapseFeatureBox: function(layer,feature) {
      var collapsed = true;
      var boxid = layer.id+'_'+feature.id;
      if (this.layersFeaturesBoxes[boxid]) {
        collapsed = this.layersFeaturesBoxes[boxid].collapsed;
      }
      return collapsed;
    },
    toggleFeatureBox: function(layer,feature) {
      var boxid = layer.id+'_'+feature.id;
      this.layersFeaturesBoxes[boxid].collapsed = !this.layersFeaturesBoxes[boxid].collapsed;
    },
    trigger: function(action,layer,feature) {
      this.$options.queryResultsService.trigger(action,layer,feature);
    }
  }
};

// se lo voglio istanziare manualmente
var InternalComponent = Vue.extend(vueComponentOptions);

function QueryResultsComponent(options){
  base(this,options);
  var self = this;
  this.id = "queryresults";
  this.title = "Query Results";
  this._service = new QueryResultsService();
  //usato quando è stato distrutto
  this.setInternalComponent = function() {
    this.internalComponent = new InternalComponent({
      queryResultsService: this._service
    });
    this.createLayersFeaturesBoxes();
    this.internalComponent.querytitle = this._service.state.querytitle;
  }
  
  this._service.onafter('setQueryResponse',function(){
    self.createLayersFeaturesBoxes();
  })
  merge(this, options);
  
  this.createLayersFeaturesBoxes = function() {
    var layersFeaturesBoxes = {}
    var layers = this._service.state.layers;
    _.forEach(layers,function(layer){
      _.forEach(layer.features,function(feature){
        var boxid = layer.id+'_'+feature.id
        layersFeaturesBoxes[boxid] = {
          collapsed: false
        }
      })
    })
    this.internalComponent.layersFeaturesBoxes = layersFeaturesBoxes;
  };
};

inherit(QueryResultsComponent, Component);

module.exports = QueryResultsComponent;

/*

var resolvedValue = require('g3w/core/utils').resolvedValue;
var inherit = require('g3w/core/utils').inherit;
var base = require('g3w/core/utils').base;
var G3WObject = require('g3w/core/g3wobject');
var GUI = require('g3w/gui/gui');
var ApiService = require('g3w/core/apiservice');
var ProjectService = require('g3w/core/projectservice').ProjectService;
var MapService = require('g3w/core/mapservice');
var RouterService = require('g3w/core/router');

var TplService = require('./tplservice');

var Fields = {};
Fields.STRING = 'string';
Fields.INTEGER = 'integer';
Fields.FLOAT = 'float';


Fields.simpleFieldTypes = [Fields.STRING,Fields.INTEGER,Fields.FLOAT];
Fields.LINK = 'link';
Fields.PHOTO = 'photo';
Fields.POINTLINK = 'pointlink';
Fields.ROUTE = 'route';

var FieldsRules = {
  varianti: {
    id: Fields.ROUTE
  },
  paline: {
    id: Fields.ROUTE
  }
};

function getFieldType(layer,feature,attribute) {
  var fieldTypeFromRules = _.get(FieldsRules,layer.id+'.'+attribute.name);
  if (fieldTypeFromRules) {
    return fieldTypeFromRules;
  }
  
  var URLPattern = /^(https?:\/\/[^\s]+)/g;
  var PhotoPattern = /[^\s]+.(png|jpg|jpeg)$/g;
  var value = feature.attributes[attribute.name].toString();
  
  var extension = value.split('.').pop();
  if (value.match(URLPattern)) {
    return Fields.LINK;
  }
  
  if (value.match(PhotoPattern)) {
    return Fields.PHOTO;
  }
  
  if (Fields.simpleFieldTypes.indexOf(attribute.type) > -1) {
    return attribute.type;
  }
};

function isSimple(layer,feature,attribute) {
  var fieldType = getFieldType(layer,feature,attribute);
  return Fields.simpleFieldTypes.indexOf(fieldType) > -1;
};

function isLink(layer,feature,attribute) {
  var fieldType = getFieldType(layer,feature,attribute);
  return Fields.LINK == fieldType;
};

function isPhoto(layer,feature,attribute) {
  var fieldType = getFieldType(layer,feature,attribute);
  return Fields.PHOTO == fieldType;
};

function isRoute(layer,feature,attribute) {
  var fieldType = getFieldType(layer,feature,attribute);
  return Fields.ROUTE == fieldType;
};

var TplQueryResultsComponent = Vue.extend({
  template: require('./tplqueryresults.html'),
  data: function(){
    return {
      lotto: null,
      day: null,
      territorial_details: {},
      layers: [],
      basePhotoUrl: ''
    }
  },
  ready: function(){
    try {
      var viewer = new Viewer(document.getElementById('tpl-mapqueryresults'), {
        url: 'data-url',
        zIndex: 10000
      });
    }
    catch(err){
    }
  },
  methods: {
    layerHasFeatures: function(layer) {
      if (layer.features) {
        return layer.features.length > 0;
      }
      return false;
    },
    calcKm: function(meters) {
      return Math.round10((meters/1000),-2);
    },
    showFeature: function(feature) {
      GUI.hideListing();
      MapService.highlightGeometry(feature.geometry,{zoom: true});
    },
    hasGeometry: function(feature) {
      return _.isNil(feature.getGeometry);
    },
    isSimple: function(layer,feature,attribute) {
      return isSimple(layer,feature,attribute);
    },
    isPhoto: function(layer,feature,attribute) {
      return isPhoto(layer,feature,attribute);
    },
    isLink: function(layer,feature,attribute) {
      return isLink(layer,feature,attribute);
    },
    isRoute: function(layer,feature,attribute) {
      return isRoute(layer,feature,attribute);
    },
    getPhotoUrl: function(path,thumb) {
      var pathsplit = path.split('/');
      var photoName = pathsplit[pathsplit.length - 1];
      var photoSplit = photoName.split('_').slice(1);
      var prefix = 'foto';
      if (thumb) {
        prefix = 'thumb';
      }
      var thumbName = prefix+"_"+photoSplit.join('_');
      return this.basePhotoUrl + '/' + thumbName;
    },
    getLabel: function(layerName){
      return this.labels_territorio[layerName].denominazione;
    },
    getOrBlank: function(path) {
      var value = _.get(this,path);
      return (value && value != '') ? value : '-';
    },
    goto: function(layer,value) {
      switch (layer.id) {
        case 'varianti':
          GUI.hideListing();
          var lotto = this.lotto;
          var day = this.day;
          RouterService.goto('dashboard/corsevariante/'+value+'?day='+this.day);
          break;
        case 'paline':
          GUI.hideListing();
          var day = this.day;
          RouterService.goto('dashboard/fermata/'+value+'?day='+day);
          break;
      }
    },
    showVariante: function(id_variante) {
      GUI.hideListing();
      var lotto = this.lotto;
      var day = this.day;
      RouterService.goto('dashboard/varianti/'+this.lotto+'/###/'+id_variante+'?day='+this.day);
    },
    showFermata: function(id_fermata) {
      GUI.hideListing();
      var day = this.day;
      RouterService.goto('dashboard/fermata/'+id_fermata+'?day='+day);
    }
  }
})

var TplQueryResultsPanel = function(context){
  this.panelComponent = null;
  this.context = context;
  
  this.onShow = function(container){
    var self = this;
    var panel = this.panelComponent = new TplQueryResultsComponent();
    panel.layers = [];
    panel.labels_territorio = null;
    
    var layerData = _.keyBy(context.layersResults,'id');
    
    var territorial_details = {};
    var layers_labels_territorio = ['province','comuni','bacini','localita'];
    
    _.forEach(layers_labels_territorio,function(layerName){
      if (layerData[layerName].features && layerData[layerName].features.length) {
        territorial_details[layerName] =  layerData[layerName].features[0].attributes
      }
    });
    
    panel.lotto = context.lottoId;
    panel.day = context.day;
    panel.territorial_details = territorial_details;   
    
    var layersFromApi = ['varianti'];
    
    this.queryVarianti(this.context)
    .then(function(features){
      panel.layers.push({
        title: 'Varianti',
        id: 'varianti',
        attributes: ProjectService.getLayerByName('varianti').attributes,
        features: features
      })
    });
    
    var excludedLayers = _.concat(layers_labels_territorio,layersFromApi);
    var queryableLayers = _.filter(this.context.queryableLayers,function(layer){
      return excludedLayers.indexOf(layer.name) == -1;
    });
    
    _.forEach(queryableLayers,function(queryableLayer){
        var features = self.processResults(queryableLayer.name,self.context)
        panel.layers.push({
          title: queryableLayer.title,
          id: queryableLayer.name,
          attributes: queryableLayer.attributes,
          features: features
        });
    })

    panel.basePhotoUrl = context.urls.basePhotoUrl;
    
    panel.$mount().$appendTo(container);
    
    return resolvedValue(true);
  };
  
  this.onClose = function(){
    this.panelComponent.$destroy(true);
    this.panelComponent = null;
    return resolvedValue(true);
  };
  
  this.processResults = function(layerName,context) {
    var layerData = _.keyBy(context.layersResults,'id');
    var features = [];
    if (layerData[layerName]) {
      features = layerData[layerName].features;
    }
    return features;
  };
  
  this.queryVarianti = function(context){
    return ApiService.get('VARIANTIQUERYMAP',{
      params: {
        day: context.day,
        lotto: context.lottoId,
        coords: context.coordinates.join(','),
        res: context.resolution
      }
    })
    .then(function(response){
      return _.map(response,function(rowData){
        return {
          attributes: rowData
        }
      })
    });
  }
}
inherit(TplQueryResultsPanel,G3WObject);

module.exports = TplQueryResultsPanel;

*/

},{"./queryresults.html":85,"core/g3wobject":31,"core/utils/utils":52,"gui/queryresults/queryresultsservice":84,"gui/vue/component":95}],87:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var GUI = require('gui/gui');
var ProjectsRegistry = require('core/project/projectsregistry');
var G3WObject = require('core/g3wobject');
var SearchPanel = require('gui/search/vue/panel/searchpanel');

function SearchesService(){
  var self = this;
  //this._searchPanelService = new SearchPanelService();
  this.init = function(searchesObject) {
    var searches = searchesObject || ProjectsRegistry.getCurrentProject().state.search;
    this.state.searches = searches;
  };
  this.state = {
    searches: []
  };

  this.showSearchPanel = function(panelConfig) {
    var panel =  new SearchPanel();// creo panello search
    panel.init(panelConfig);//inizializzo pannello se
    GUI.showPanel(panel);
    return panel;
  };

  this.cleanSearchPanels = function() {
    this.state.panels = {};
  };

  this.stop = function(){
    var deferred = $.Deferred();
    deferred.resolve();
    return deferred.promise();
  };

};

// Make the public service en Event Emitter
inherit(SearchesService, G3WObject);

module.exports = SearchesService;

},{"core/g3wobject":31,"core/project/projectsregistry":45,"core/utils/utils":52,"gui/gui":76,"gui/search/vue/panel/searchpanel":89}],88:[function(require,module,exports){
module.exports = "<div class=\"g3w-search-panel form-group\">\n  <h3>{{title}}</h3>\n  <form id=\"g3w-search-form\">\n    <template v-for=\"forminput in forminputs\">\n      <div v-if=\"forminput.input.type == 'numberfield'\" class=\"form-group numeric\">\n        <label for=\"{{ forminput.id }} \">{{ forminput.label }}</label>\n        <input type=\"number\" v-model=\"formInputValues[$index].value\" class=\"form-control\" id=\"{{ forminput.id }}\">\n      </div>\n      <div v-if=\"forminput.input.type == 'textfield'\" class=\"form-group text\">\n        <label for=\"{{ forminput.id }}\">{{ forminput.label }}</label>\n        <input type=\"text\" v-model=\"formInputValues[$index].value\" class=\"form-control\" id=\"{{ forminput.id }}\">\n      </div>\n    </template>\n    <div class=\"form-group\">\n      <button class=\"btn btn-primary pull-right\" @click=\"doSearch($event)\" data-i18n=\"dosearch\">Search</button>\n    </div>\n  </form>\n</div>\n";

},{}],89:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var localize = require('core/i18n/i18n.service').t;
var resolve = require('core/utils/utils').resolve;
var GUI = require('gui/gui');
var QueryService = require('core/query/queryservice');
var ListPanel = require('gui/listpanel').ListPanel;
var Panel = require('gui/panel');
var ProjectsRegistry = require('core/project/projectsregistry');

//componente vue pannello search
var SearchPanelComponet = Vue.extend({
  template: require('./searchpanel.html'),
  data: function() {
    return {
      title: "",
      forminputs: [],
      filterObject: {},
      formInputValues : []
    }
  },
  methods: {
    doSearch: function(event) {
      var self = this;
      event.preventDefault();
      //al momento molto farragginoso ma da rivedere
      //per associazione valore input
      var showQueryResults = GUI.showResultsFactory('query');
      var queryResultsPanel = showQueryResults(self.title);
      this.filterObject = this.fillFilterInputsWithValues(this.filterObject, this.formInputValues);
      QueryService.queryByFilter(this.filterObject)
      .then(function(results){
        queryResultsPanel.setQueryResponse(results);
      })
    }
  }
});

//costruttore del pannello e del suo componente vue
function SearchPanel() {
  self = this;
  this.config = {};
  this.filter = {};
  this.id = null;
  this.querylayerid = null;
  this.internalPanel = new SearchPanelComponet();
  //funzione inizializzazione
  this.init = function(config) {
    this.config = config || {};
    this.name = this.config.name || this.name;
    this.id = this.config.id || this.id;
    this.filter = this.config.options.filter || this.filter;
    var queryLayerId = this.config.options.querylayerid || this.querylayerid;
    this.queryLayer = ProjectsRegistry.getCurrentProject().getLayerById(queryLayerId);
    //vado a riempire gli input del form del pannello
    this.fillInputsFormFromFilter();
    //creo e assegno l'oggetto filtro
    var filterObjFromConfig = QueryService.createQueryFilterFromConfig(this.filter);
    //alla fine creo l'ggetto finale del filtro da passare poi al provider QGISWMS o WFS etc.. che contiene sia
    //il filtro che url, il nome del layer il tipo di server etc ..
    this.internalPanel.filterObject = QueryService.createQueryFilterObject(this.queryLayer, filterObjFromConfig);
    //soluzione momentanea assegno  la funzione del SearchPanle ma come pattern è sbagliato
    //vorrei delegarlo a SearchesService ma lo stesso stanzia questo (loop) come uscirne???
    //creare un searchpanelservice?
    this.internalPanel.fillFilterInputsWithValues = this.fillFilterInputsWithValues;
    this.internalPanel.title = this.name;
  };
  //funzione che popola gli inputs che ci saranno nel form del pannello ricerca
  //oltre costruire un oggetto che legherà i valori degli inputs del form con gli oggetti
  //'operazionali' del filtro
  this.fillInputsFormFromFilter = function() {
    var id = 0;
    var formValue;
    _.forEach(this.filter,function(v,k,obj) {
      _.forEach(v, function(input){
        //sempre nuovo oggetto
        formValue = {};
        //inserisco l'id all'input
        input.id = id
        //aggiungo il tipo al valore per fare conversione da stringa a tipo input
        formValue.type = input.input.type;
        ////TEMPORANEO !!! DEVO PRENDERE IL VERO VALORE DI DEFAULT
        formValue.value = null;
        //popolo gli inputs:
        // valori
        self.internalPanel.formInputValues.push(formValue);
        //input
        self.internalPanel.forminputs.push(input);
        id+=1;
      });
    });
  };
  //funzione che associa i valori dell'inputs form al relativo oggetto "operazionde del filtro"
  this.fillFilterInputsWithValues = function(filterObject, formInputValues, globalIndex) {
    //funzione conversione da valore restituito dall'input (sempre stringa) al vero tipo di valore
    function convertInputValueToInputType(type, value) {
      switch(type) {
        case 'numberfield':
             value = parseInt(value);
             break;
        default:
             break;
      }
      return value;
    }
    //ciclo sull'oggetto filtro che ha come chiave root 'AND' o 'OR'
    _.forEach(filterObject.filterObject, function(v,k) {
      //scorro attraverso l'array di elementi operazionali da confrontare
      _.forEach(v, function(input, idx) {
        //elemento operazionale {'=':{}}
        _.forEach(input, function(v, k, obj) {
          //vado a leggere l'oggetto attributo
          if (_.isArray(v)) {
            //richiama la funzione ricorsivamente .. andrà bene ?
            fillFilterInputsWithValues(input, formInputValues, idx);
          } else {
            _.forEach(v, function(v, k, obj) {
              //considero l'index globale in modo che inputs di operazioni booleane interne
              //vengono considerate
              index = (globalIndex) ? globalIndex + idx : idx;
              obj[k] = convertInputValueToInputType(formInputValues[index].type, formInputValues[index].value);
            });
          };
        });
      });
    });
    return filterObject;
  };
};

inherit(SearchPanel, Panel);
module.exports = SearchPanel;

},{"./searchpanel.html":88,"core/i18n/i18n.service":34,"core/project/projectsregistry":45,"core/query/queryservice":49,"core/utils/utils":52,"gui/gui":76,"gui/listpanel":78,"gui/panel":83}],90:[function(require,module,exports){
module.exports = "<div id=\"g3w-search\" class=\"g3w-search g3w-tools\">\n  <ul>\n    <li v-for=\"search in project.search\">\n      <div class=\"search-header tool-header\" @click=\"showSearchPanel(search)\">\n        <span style=\"\">{{ search.name }}</span>\n      </div>\n    </li>\n  </ul>\n</div>\n";

},{}],91:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var merge = require('core/utils/utils').merge;
var t = require('core/i18n/i18n.service').t;
var resolve = require('core/utils/utils').resolve;
var Component = require('gui/vue/component');
var GUI = require('gui/gui');
var ProjectsRegistry = require('core/project/projectsregistry');
var G3WObject = require('core/g3wobject');
var SearchPanel = require('gui/search/vue/panel/searchpanel');
var ProjectsRegistry = require('core/project/projectsregistry');
var SearchesService = require('gui/search/searchesservice');

var vueComponentOptions = {
   template: require('./search.html'),
   data: function() {
    	return {
    	  project: ProjectsRegistry.getCurrentProject().state
    	};
   },
   methods: {
    showSearchPanel: function(search) {
        var panel = this.$options.searchesService.showSearchPanel(search);
    }
  }
};

// se lo voglio istanziare manualmente
var InternalComponent = Vue.extend(vueComponentOptions);
// se lo voglio usare come componente come elemento html
//Vue.component('g3w-search',vueComponentOptions);

/* COMPONENTI FIGLI */
/* FINE COMPONENTI FIGLI */

/* INTERFACCIA PUBBLICA */
function SearchComponent(options){
  base(this,options);
  this.id = "search-component";
  this.title = "search";
  this._service = new SearchesService();
  this.internalComponent = new InternalComponent({
    searchesService: this._service
  });
  this.state.visible = ProjectsRegistry.getCurrentProject().state.search.length > 0;
  merge(this, options);
  this.initService = function() {
    //inizializzo il servizio
    this._service.init();
  };
};

inherit(SearchComponent, Component);
module.exports = SearchComponent;

},{"./search.html":90,"core/g3wobject":31,"core/i18n/i18n.service":34,"core/project/projectsregistry":45,"core/utils/utils":52,"gui/gui":76,"gui/search/searchesservice":87,"gui/search/vue/panel/searchpanel":89,"gui/vue/component":95}],92:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var G3WObject = require('core/g3wobject');

function ToolsService(){
  var self = this;
  this.config = null;
  this._actions = {};
  this.state = {
    toolsGroups: []
  };
  
  this.setters = {
    //inserita possibilità di dare ordine al plugin di visualizzazione
    addToolGroup: function(order, group) {
      //console.log(order);
      self.state.toolsGroups.splice(order, 0, group);
      //console.log(self.state.toolsGroups);
    }
  };
  
  this.addTools = function(order, groupName, tools) {
    var self = this;
    var group = this._getToolsGroup(groupName);
    if (!group) {
      group = {
        name: groupName,
        tools: []
      };
      this.addToolGroup(order, group);
    }
    _.forEach(tools, function(tool){
      group.tools.push(tool);
      self._addAction(tool);
    });
  };
  
  this.removeTool = function(toolId) {
  };
  
  this.fireAction = function(actionId){
    var action = this._actions[actionId];
    action();
  };
  
  this._getToolsGroup = function(groupName) {
    var group = null;
    _.forEach(this.state.toolsGroups,function(_group){
      if (_group.name == groupName) {
        group = _group;
      }
    });
    return group;
  };
  
  this._addAction = function(tool) {
    var actionId = Math.floor(Math.random() * 1000000)+1;
    tool.actionId = actionId;
    this._actions[actionId] = tool.action;
  };
  
  base(this);
}

inherit(ToolsService, G3WObject);

module.exports = ToolsService;

},{"core/g3wobject":31,"core/utils/utils":52}],93:[function(require,module,exports){
module.exports = "<div class=\"g3w-tools\">\n  <ul>\n    <li v-for=\"group in state.toolsGroups\">\n      <div class=\"tool-header\">\n        <span style=\"\">{{ group.name }}</span>\n      </div>\n      <div id=\"{{ group.name }}-tools\" class=\"tool-box\">\n        <template v-for=\"tool in group.tools\">\n          <div v-if=\"tool.type == 'checkbox' \" class=\"checkbox tool\">\n            <label><input type=\"checkbox\" @click=\"fireAction(tool.actionId)\" value=\"\">{{ tool.name }}</label>\n          </div>\n          <div class=\"tool\" v-else>\n            <i class=\"glyphicon glyphicon-cog\"></i>\n            <span @click=\"fireAction(tool.actionId)\">{{ tool.name }}</span>\n          </div>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n";

},{}],94:[function(require,module,exports){
var t = require('core/i18n/i18n.service').t;
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var merge = require('core/utils/utils').merge;
var Component = require('gui/vue/component');
var ToolsService = require('gui/tools/toolsservice');

var InternalComponent = Vue.extend({
    template: require('./tools.html'),
    data: function() {
      return {
        state: null
      }
    },
    methods: {
      fireAction: function(actionid){
        this.$options.toolsService.fireAction(actionid);
      }
    }
});

function ToolsComponent(options) {

  base(this,options);
  var self = this;
  this._service = new ToolsService();
  this.id = "tools-component";
  this.title = "tools";
  this.state.visible = false;
  this._service.onafter('addToolGroup', function() {
    self.state.visible = self._service.state.toolsGroups.length > 0;
  });
  merge(this, options);
  this.internalComponent = new InternalComponent({
    toolsService: this._service
  });
  //sostituisco lo state del servizio allo state del componente vue interno
  this.internalComponent.state = this._service.state
}

inherit(ToolsComponent, Component);

var proto = ToolsComponent.prototype;

module.exports = ToolsComponent;

},{"./tools.html":93,"core/i18n/i18n.service":34,"core/utils/utils":52,"gui/tools/toolsservice":92,"gui/vue/component":95}],95:[function(require,module,exports){
var inherit = require('core/utils/utils').inherit;
var base = require('core/utils/utils').base;
var resolve = require('core/utils/utils').resolve;
var reject = require('core/utils/utils').reject;
var BaseComponent = require('gui/component');

var Component = function(options) {
  base(this,options);
};

inherit(Component, BaseComponent);

var proto = Component.prototype;

// viene richiamato dalla toolbar quando il plugin chiede di mostrare un proprio pannello nella GUI (GUI.showPanel)
proto.mount = function(parent,append) {
  if (!this.internalComponent) {
    this.setInternalComponent();
  };
  if(append) {
    this.internalComponent.$mount().$appendTo(parent);
  }
  else {
    this.internalComponent.$mount(parent);
  }
  $(parent).localize();
  return resolve(true);
};

// richiamato quando la GUI chiede di chiudere il pannello. Se ritorna false il pannello non viene chiuso
proto.unmount = function() {
  // il problema che distruggere
  this.internalComponent.$destroy(true);
  this.internalComponent = null;
  return resolve();
};

proto.hide = function() {
  console.log(this.internalComponent.$el);
};

module.exports = Component;

},{"core/utils/utils":52,"gui/component":72}],96:[function(require,module,exports){
var t = require('core/i18n/i18n.service').t;

Vue.directive("disabled",function(value){
    if (value){
      this.el.setAttribute('disabled','disabled');
    }
    else {
      this.el.removeAttribute('disabled');
    }
  }
);

Vue.directive("checked",function(value){
    if (value){
      this.el.setAttribute('checked','checked');
    }
    else {
      this.el.removeAttribute('checked');
    }
  }
);

Vue.directive("selected-first",function(value){
    if (value==0){
      this.el.setAttribute('selected','');
    }
    else {
      this.el.removeAttribute('selected');
    }
  }
);

Vue.directive("t",function(text){
  return t(text);
})

},{"core/i18n/i18n.service":34}],97:[function(require,module,exports){
var g3w = g3w || {};

g3w.core = {
   G3WObject: require('core/g3wobject'),
   utils: require('core/utils/utils'),
   ApplicationService: require('core/applicationservice'),
   ApiService: require('core/apiservice'),
   Router: require('core/router'),
   ProjectsRegistry: require('core/project/projectsregistry'),
   Project: require('core/project/project'),
   QueryService: require('core/query/queryservice'),
   MapLayer: require('core/map/layer/maplayer'),
   VectorLayer: require('core/map/layer/vectorlayer'),
   WmsLayer: require('core/map/layer/wmslayer'),
   VectorLayerLoader: require('core/map/layer/loader/vectorloaderlayer'),
   Geometry: require('core/geometry/geometry'),
   geom: require('core/geometry/geom'),
   PickCoordinatesInteraction: require('g3w-ol3/src/interactions/pickcoordinatesinteraction'),
   PickFeatureInteraction: require('g3w-ol3/src/interactions/pickfeatureinteraction'),
   i18n: require('core/i18n/i18n.service'),
   Plugin: require('core/plugin/plugin'),
   PluginsRegistry: require('core/plugin/pluginsregistry'),
   Editor: require('core/editing/editor')
};

g3w.gui = {
  GUI: require('gui/gui'),
  Form: require('gui/form').Form,
  FormPanel: require('gui/form').FormPanel,
  Panel: require('gui/panel'),
  vue: {
    //GeocodingComponent: require('gui/vue/geocoding/geocoding'),
    SearchComponent: require('gui/search/vue/search'),
    CatalogComponent: require('gui/catalog/vue/catalog'),
    MapComponent: require('gui/map/vue/map'),
    ToolsComponent: require('gui/tools/vue/tools'),
    QueryResultsComponent : require('gui/queryresults/vue/queryresults')
  }
};

module.exports = {
  core: g3w.core,
  gui: g3w.gui
};

},{"core/apiservice":18,"core/applicationservice":19,"core/editing/editor":22,"core/g3wobject":31,"core/geometry/geom":32,"core/geometry/geometry":33,"core/i18n/i18n.service":34,"core/map/layer/loader/vectorloaderlayer":36,"core/map/layer/maplayer":37,"core/map/layer/vectorlayer":38,"core/map/layer/wmslayer":39,"core/plugin/plugin":41,"core/plugin/pluginsregistry":42,"core/project/project":43,"core/project/projectsregistry":45,"core/query/queryservice":49,"core/router":50,"core/utils/utils":52,"g3w-ol3/src/interactions/pickcoordinatesinteraction":61,"g3w-ol3/src/interactions/pickfeatureinteraction":62,"gui/catalog/vue/catalog":68,"gui/form":74,"gui/gui":76,"gui/map/vue/map":82,"gui/panel":83,"gui/queryresults/vue/queryresults":86,"gui/search/vue/search":91,"gui/tools/vue/tools":94}]},{},[3])


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXBwL2NvbmZpZy9jb25maWcuanMiLCJzcmMvYXBwL2NvbmZpZy9sb2NhbGVzL2FwcC5qcyIsInNyYy9hcHAvaW5kZXguanMiLCJzcmMvYXBwL3RlbXBsYXRlL2h0bWwvYXBwLmh0bWwiLCJzcmMvYXBwL3RlbXBsYXRlL2h0bWwvY29udGVudHMuaHRtbCIsInNyYy9hcHAvdGVtcGxhdGUvaHRtbC9mbG9hdGJhci5odG1sIiwic3JjL2FwcC90ZW1wbGF0ZS9odG1sL3NpZGViYXItaXRlbS5odG1sIiwic3JjL2FwcC90ZW1wbGF0ZS9odG1sL3NpZGViYXIuaHRtbCIsInNyYy9hcHAvdGVtcGxhdGUvaHRtbC92aWV3cG9ydC5odG1sIiwic3JjL2FwcC90ZW1wbGF0ZS9qcy9hcHBsaWNhdGlvbnVpLmpzIiwic3JjL2FwcC90ZW1wbGF0ZS9qcy9iYXJzdGFjay5qcyIsInNyYy9hcHAvdGVtcGxhdGUvanMvY29udGVudHMuanMiLCJzcmMvYXBwL3RlbXBsYXRlL2pzL2Zsb2F0YmFyLmpzIiwic3JjL2FwcC90ZW1wbGF0ZS9qcy9sYXlvdXQuanMiLCJzcmMvYXBwL3RlbXBsYXRlL2pzL3NpZGViYXIuanMiLCJzcmMvYXBwL3RlbXBsYXRlL2pzL3RlbXBsYXRlLmpzIiwic3JjL2FwcC90ZW1wbGF0ZS9qcy92aWV3cG9ydC5qcyIsInNyYy9saWJzL3Nkay9jb3JlL2FwaXNlcnZpY2UuanMiLCJzcmMvbGlicy9zZGsvY29yZS9hcHBsaWNhdGlvbnNlcnZpY2UuanMiLCJzcmMvbGlicy9zZGsvY29yZS9jbGlwYm9hcmRzZXJ2aWNlLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvZWRpdGluZy9lZGl0YnVmZmVyLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvZWRpdGluZy9lZGl0b3IuanMiLCJzcmMvbGlicy9zZGsvY29yZS9lZGl0aW5nL3JlbGF0aW9uZWRpdGJ1ZmZlci5qcyIsInNyYy9saWJzL3Nkay9jb3JlL2VkaXRpbmcvdG9vbHMvYWRkZmVhdHVyZXRvb2wuanMiLCJzcmMvbGlicy9zZGsvY29yZS9lZGl0aW5nL3Rvb2xzL2N1dGxpbmV0b29sLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvZWRpdGluZy90b29scy9kZWxldGVmZWF0dXJldG9vbC5qcyIsInNyYy9saWJzL3Nkay9jb3JlL2VkaXRpbmcvdG9vbHMvZWRpdGluZ3Rvb2wuanMiLCJzcmMvbGlicy9zZGsvY29yZS9lZGl0aW5nL3Rvb2xzL21vZGlmeWZlYXR1cmV0b29sLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvZWRpdGluZy90b29scy9tb3ZlcG9pbnR0b29sLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvZWRpdGluZy90b29scy9waWNrZmVhdHVyZXRvb2wuanMiLCJzcmMvbGlicy9zZGsvY29yZS9nM3dvYmplY3QuanMiLCJzcmMvbGlicy9zZGsvY29yZS9nZW9tZXRyeS9nZW9tLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvZ2VvbWV0cnkvZ2VvbWV0cnkuanMiLCJzcmMvbGlicy9zZGsvY29yZS9pMThuL2kxOG4uc2VydmljZS5qcyIsInNyYy9saWJzL3Nkay9jb3JlL21hcC9sYXllci9sb2FkZXIvbG9hZGVybGF5ZXIuanMiLCJzcmMvbGlicy9zZGsvY29yZS9tYXAvbGF5ZXIvbG9hZGVyL3ZlY3RvcmxvYWRlcmxheWVyLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvbWFwL2xheWVyL21hcGxheWVyLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvbWFwL2xheWVyL3ZlY3RvcmxheWVyLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvbWFwL2xheWVyL3dtc2xheWVyLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvbWFwL21hcHNyZWdpc3RyeS5qcyIsInNyYy9saWJzL3Nkay9jb3JlL3BsdWdpbi9wbHVnaW4uanMiLCJzcmMvbGlicy9zZGsvY29yZS9wbHVnaW4vcGx1Z2luc3JlZ2lzdHJ5LmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvcHJvamVjdC9wcm9qZWN0LmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvcHJvamVjdC9wcm9qZWN0bGF5ZXIuanMiLCJzcmMvbGlicy9zZGsvY29yZS9wcm9qZWN0L3Byb2plY3RzcmVnaXN0cnkuanMiLCJzcmMvbGlicy9zZGsvY29yZS9wcm9qZWN0L3Byb2plY3R0eXBlcy5qcyIsInNyYy9saWJzL3Nkay9jb3JlL3F1ZXJ5L3F1ZXJ5UUdJU1dNU1Byb3ZpZGVyLmpzIiwic3JjL2xpYnMvc2RrL2NvcmUvcXVlcnkvcXVlcnlXRlNQcm92aWRlci5qcyIsInNyYy9saWJzL3Nkay9jb3JlL3F1ZXJ5L3F1ZXJ5c2VydmljZS5qcyIsInNyYy9saWJzL3Nkay9jb3JlL3JvdXRlci5qcyIsInNyYy9saWJzL3Nkay9jb3JlL3V0aWxzL2dlby5qcyIsInNyYy9saWJzL3Nkay9jb3JlL3V0aWxzL3V0aWxzLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL2NvbnRyb2xzL2NvbnRyb2wuanMiLCJzcmMvbGlicy9zZGsvZzN3LW9sMy9zcmMvY29udHJvbHMvaW50ZXJhY3Rpb25jb250cm9sLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL2NvbnRyb2xzL29sY29udHJvbC5qcyIsInNyYy9saWJzL3Nkay9nM3ctb2wzL3NyYy9jb250cm9scy9xdWVyeWNvbnRyb2wuanMiLCJzcmMvbGlicy9zZGsvZzN3LW9sMy9zcmMvY29udHJvbHMvcmVzZXRjb250cm9sLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL2NvbnRyb2xzL3pvb21ib3hjb250cm9sLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL2czdy5vbDMuanMiLCJzcmMvbGlicy9zZGsvZzN3LW9sMy9zcmMvaW50ZXJhY3Rpb25zL2RlbGV0ZWZlYXR1cmVpbnRlcmFjdGlvbi5qcyIsInNyYy9saWJzL3Nkay9nM3ctb2wzL3NyYy9pbnRlcmFjdGlvbnMvcGlja2Nvb3JkaW5hdGVzaW50ZXJhY3Rpb24uanMiLCJzcmMvbGlicy9zZGsvZzN3LW9sMy9zcmMvaW50ZXJhY3Rpb25zL3BpY2tmZWF0dXJlaW50ZXJhY3Rpb24uanMiLCJzcmMvbGlicy9zZGsvZzN3LW9sMy9zcmMvbGF5ZXJzL2Jhc2VzLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL2xheWVycy9yYXN0ZXJzLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL21hcC9tYXBoZWxwZXJzLmpzIiwic3JjL2xpYnMvc2RrL2czdy1vbDMvc3JjL3V0aWxzLmpzIiwic3JjL2xpYnMvc2RrL2d1aS9jYXRhbG9nL3Z1ZS9jYXRhbG9nLmh0bWwiLCJzcmMvbGlicy9zZGsvZ3VpL2NhdGFsb2cvdnVlL2NhdGFsb2cuanMiLCJzcmMvbGlicy9zZGsvZ3VpL2NhdGFsb2cvdnVlL2xlZ2VuZC5odG1sIiwic3JjL2xpYnMvc2RrL2d1aS9jYXRhbG9nL3Z1ZS9sZWdlbmRfaXRlbS5odG1sIiwic3JjL2xpYnMvc2RrL2d1aS9jYXRhbG9nL3Z1ZS90cmlzdGF0ZS10cmVlLmh0bWwiLCJzcmMvbGlicy9zZGsvZ3VpL2NvbXBvbmVudC5qcyIsInNyYy9saWJzL3Nkay9ndWkvY29tcG9uZW50c3JlZ2lzdHJ5LmpzIiwic3JjL2xpYnMvc2RrL2d1aS9mb3JtLmpzIiwic3JjL2xpYnMvc2RrL2d1aS9mb3JtcGFuZWwuaHRtbCIsInNyYy9saWJzL3Nkay9ndWkvZ3VpLmpzIiwic3JjL2xpYnMvc2RrL2d1aS9saXN0cGFuZWwuaHRtbCIsInNyYy9saWJzL3Nkay9ndWkvbGlzdHBhbmVsLmpzIiwic3JjL2xpYnMvc2RrL2d1aS9tYXAvY29udHJvbC9mYWN0b3J5LmpzIiwic3JjL2xpYnMvc2RrL2d1aS9tYXAvbWFwc2VydmljZS5qcyIsInNyYy9saWJzL3Nkay9ndWkvbWFwL3Z1ZS9tYXAuaHRtbCIsInNyYy9saWJzL3Nkay9ndWkvbWFwL3Z1ZS9tYXAuanMiLCJzcmMvbGlicy9zZGsvZ3VpL3BhbmVsLmpzIiwic3JjL2xpYnMvc2RrL2d1aS9xdWVyeXJlc3VsdHMvcXVlcnlyZXN1bHRzc2VydmljZS5qcyIsInNyYy9saWJzL3Nkay9ndWkvcXVlcnlyZXN1bHRzL3Z1ZS9xdWVyeXJlc3VsdHMuaHRtbCIsInNyYy9saWJzL3Nkay9ndWkvcXVlcnlyZXN1bHRzL3Z1ZS9xdWVyeXJlc3VsdHMuanMiLCJzcmMvbGlicy9zZGsvZ3VpL3NlYXJjaC9zZWFyY2hlc3NlcnZpY2UuanMiLCJzcmMvbGlicy9zZGsvZ3VpL3NlYXJjaC92dWUvcGFuZWwvc2VhcmNocGFuZWwuaHRtbCIsInNyYy9saWJzL3Nkay9ndWkvc2VhcmNoL3Z1ZS9wYW5lbC9zZWFyY2hwYW5lbC5qcyIsInNyYy9saWJzL3Nkay9ndWkvc2VhcmNoL3Z1ZS9zZWFyY2guaHRtbCIsInNyYy9saWJzL3Nkay9ndWkvc2VhcmNoL3Z1ZS9zZWFyY2guanMiLCJzcmMvbGlicy9zZGsvZ3VpL3Rvb2xzL3Rvb2xzc2VydmljZS5qcyIsInNyYy9saWJzL3Nkay9ndWkvdG9vbHMvdnVlL3Rvb2xzLmh0bWwiLCJzcmMvbGlicy9zZGsvZ3VpL3Rvb2xzL3Z1ZS90b29scy5qcyIsInNyYy9saWJzL3Nkay9ndWkvdnVlL2NvbXBvbmVudC5qcyIsInNyYy9saWJzL3Nkay9ndWkvdnVlL3Z1ZS5kaXJlY3RpdmVzLmpzIiwic3JjL2xpYnMvc2RrL3Nkay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0tBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbnhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDak1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcFpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDektBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN05BO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeGZBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pFQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwbkJBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgYXBwdGl0bGUgPSBcIkczVyBDbGllbnRcIjtcblxudmFyIHBsdWdpbnMgPSB7XG59O1xuXG52YXIgdG9vbHMgPSB7XG4gIHRvb2xzOiAgW11cbn07XG5cbnZhciBpMThuID0ge1xuICByZXNvdXJjZXM6IHJlcXVpcmUoJy4vbG9jYWxlcy9hcHAuanMnKVxufTtcblxudmFyIGNsaWVudCA9ICB7XG4gIGRlYnVnOiAgdHJ1ZSxcbiAgbG9jYWw6ICBmYWxzZVxufTtcblxudmFyIHNlcnZlciA9ICB7XG4gIHVybHM6ICB7XG4gICAgb3dzOiAgJy9vd3MnLFxuICAgIGFwaTogICcvYXBpJyxcbiAgICBpbml0Y29uZmlnOiAgJy9hcGkvaW5pdGNvbmZpZycsXG4gICAgY29uZmlnOiAgJy9hcGkvY29uZmlnJyxcbiAgICBzdGF0aWN1cmw6ICAnJyxcbiAgfVxufTtcblxuLyp2YXIgdGVtcGxhdGVzID0gIHtcbiAgYXBwOiAgcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2FwcC5odG1sJyksXG4gIHNpZGViYXI6ICByZXF1aXJlKCcuLi90ZW1wbGF0ZXMvc2lkZWJhci5odG1sJyksXG4gIGZsb2F0YmFyOiAgcmVxdWlyZSgnLi4vdGVtcGxhdGVzL2Zsb2F0YmFyLmh0bWwnKSxcbn07Ki9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwcHRpdGxlOiBhcHB0aXRsZSxcbiAgY2xpZW50OiBjbGllbnQsXG4gIHNlcnZlcjogc2VydmVyLFxuICBwbHVnaW5zOiAgcGx1Z2lucyxcbiAgdG9vbHM6ICB0b29scyxcbiAgaTE4bjogaTE4blxufTtcbiIsInZhciB0cmFuc2xhdGlvbnMgPSB7XG4gICAgXCJpdFwiOiB7XG4gICAgICAgIFwidHJhbnNsYXRpb25cIjoge1xuICAgICAgICAgICAgXCJjb21wb25lbnRcIjogXCJDb21wb25lbnRlIEdlbmVyaWNvXCIsXG4gICAgICAgICAgICBcInNlYXJjaFwiOiBcIlJpY2VyY2FcIixcbiAgICAgICAgICAgIFwiZG9zZWFyY2hcIjogXCJDZXJjYVwiLFxuICAgICAgICAgICAgXCJjYXRhbG9nXCI6IFwiTWFwcGFcIixcbiAgICAgICAgICAgIFwiYmFzZWxheWVyc1wiOiBcIkJhc2lcIixcbiAgICAgICAgICAgIFwidG9vbHNcIjogXCJTdHJ1bWVudGlcIixcbiAgICAgICAgICAgIFwidHJlZVwiOiBcIlN0cmF0aVwiLFxuICAgICAgICAgICAgXCJsZWdlbmRcIjogXCJMZWdlbmRhXCIsXG4gICAgICAgICAgICBcInN0cmVldF9zZWFyY2hcIjogXCJDZXJjYSBpbmRpcml6em9cIixcbiAgICAgICAgICAgIFwic2hvd1wiOiBcIk1vc3RyYVwiLFxuICAgICAgICAgICAgXCJoaWRlXCI6IFwiTmFzY29uZGlcIixcbiAgICAgICAgICAgIFwic3RyZWV0X3NlYXJjaFwiOiBcIkNlcmNhIGluZGlyaXp6b1wiLFxuICAgICAgICAgICAgXCJjb3B5X2Zvcm1fZGF0YVwiOiBcIkNvcGlhIGkgZGF0aSBkZWwgbW9kdWxvXCIsXG4gICAgICAgICAgICBcInBhc3RlX2Zvcm1fZGF0YVwiOiBcIkluY29sbGFcIixcbiAgICAgICAgICAgIFwiY29weV9mb3JtX2RhdGFfZnJvbV9mZWF0dXJlXCI6IFwiQ29waWEgaSBkYXRpIGRhbGxhIG1hcHBhXCJcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNsYXRpb25zO1xuIiwidmFyIGkxOG5pbml0ID0gcmVxdWlyZSgnc2RrJykuY29yZS5pMThuLmluaXQ7XG52YXIgQXBwbGljYXRpb25TZXJ2aWNlID0gcmVxdWlyZSgnc2RrL3NkaycpLmNvcmUuQXBwbGljYXRpb25TZXJ2aWNlO1xudmFyIEFwcGxpY2F0aW9uVGVtcGxhdGUgPSByZXF1aXJlKCcuL3RlbXBsYXRlL2pzL3RlbXBsYXRlJyk7XG5cbi8vIFNFVFRPIExBIFZBUklBQklMRSBHTE9CQUxFIGczd3NkaywgQ09NRSBTRSBBVkVTU0kgVVNBVE8gc2RrLmpzXG53aW5kb3cuZzN3c2RrID0gcmVxdWlyZSgnc2RrJyk7XG5cbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZy9jb25maWcuanMnKTtcblxuLy8gZnVuemlvbmUgdGVtcG9yYW5lYSBjaGUgYWdnaXVuZ2UgaWwgcGx1Z2luIChjb25maWd1cmF6aW9uaSkgcGVyIGNhcmljYXJlXG4vLyBpbCBwbHVnaW4gZ2Vvbm9kZXMgY29uIGlsIGxheWVyIGFjY2Vzc2lcbmZ1bmN0aW9uIGFnZ2l1bmdpR2Vvbm9kZXNQbHVnaW4ocGx1Z2lucykge1xuXG4gIHZhciBwbHVnaW5HZW9ub2RlT2JqID0gXy5jbG9uZURlZXAocGx1Z2lucy5pdGVybmV0KTtcbiAgcGx1Z2lucy5nZW9ub3RlcyA9IHBsdWdpbkdlb25vZGVPYmo7XG4gIHJldHVybiBwbHVnaW5zO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcHBsaWNhdGlvbkNvbmZpZygpIHtcbiAgLy9hZ2dpdW5nbyB0ZW1wb3JhbmVhbWVudGUgaWwgcGx1Z2luIEdlb2RvdGVzXG4gIGFnZ2l1bmdpR2Vvbm9kZXNQbHVnaW4oY29uZmlnLmdyb3VwLnBsdWdpbnMpO1xuICByZXR1cm4ge1xuICAgIGFwcHRpdGxlOiBjb25maWcuYXBwdGl0bGUgfHwgJycsXG4gICAgbG9nb19pbWc6IGNvbmZpZy5ncm91cC5oZWFkZXJfbG9nb19pbWcsXG4gICAgbG9nb19saW5rOiBjb25maWcuZ3JvdXAuaGVhZGVyX2xvZ29fbGluayxcbiAgICB0ZXJtc19vZl91c2VfdGV4dDogY29uZmlnLmdyb3VwLmhlYWRlcl90ZXJtc19vZl91c2VfdGV4dCxcbiAgICB0ZXJtc19vZl91c2VfbGluazogY29uZmlnLmdyb3VwLnRlcm1zX29mX3VzZV9saW5rLFxuICAgIGRlYnVnOiBjb25maWcuY2xpZW50LmRlYnVnIHx8IGZhbHNlLFxuICAgIGdyb3VwOiBjb25maWcuZ3JvdXAsXG4gICAgdXJsczogY29uZmlnLnNlcnZlci51cmxzLFxuICAgIG1lZGlhdXJsOiBjb25maWcuc2VydmVyLnVybHMubWVkaWF1cmwsXG4gICAgcmVzb3VyY2VzdXJsOiBjb25maWcuc2VydmVyLnVybHMuc3RhdGljdXJsLFxuICAgIHByb2plY3RzOiBjb25maWcuZ3JvdXAucHJvamVjdHMsXG4gICAgaW5pdHByb2plY3Q6IGNvbmZpZy5ncm91cC5pbml0cHJvamVjdCxcbiAgICBvdmVydmlld3Byb2plY3Q6IGNvbmZpZy5ncm91cC5vdmVydmlld3Byb2plY3QsXG4gICAgYmFzZWxheWVyczogY29uZmlnLmdyb3VwLmJhc2VsYXllcnMsXG4gICAgbWFwY29udHJvbHM6IGNvbmZpZy5ncm91cC5tYXBjb250cm9scyxcbiAgICBiYWNrZ3JvdW5kX2NvbG9yOiBjb25maWcuZ3JvdXAuYmFja2dyb3VuZF9jb2xvcixcbiAgICBjcnM6IGNvbmZpZy5ncm91cC5jcnMsXG4gICAgcHJvajQ6IGNvbmZpZy5ncm91cC5wcm9qNCxcbiAgICBtaW5zY2FsZTogY29uZmlnLmdyb3VwLm1pbnNjYWxlLFxuICAgIG1heHNjYWxlOiBjb25maWcuZ3JvdXAubWF4c2NhbGUsXG4gICAgLy8gcmljaGllc3RvIGRhIFByb2plY3RTZXJ2aWNlXG4gICAgZ2V0V21zVXJsOiBmdW5jdGlvbihwcm9qZWN0KXtcbiAgICAgIHJldHVybiBjb25maWcuc2VydmVyLnVybHMub3dzKycvJytjb25maWcuZ3JvdXAuaWQrJy8nK3Byb2plY3QudHlwZSsnLycrcHJvamVjdC5pZDtcbiAgICB9LFxuICAgIC8vIHJpY2hpZXN0byBkYSBQcm9qZWN0c1JlZ2lzdHJ5XG4gICAgZ2V0UHJvamVjdENvbmZpZ1VybDogZnVuY3Rpb24ocHJvamVjdCl7XG4gICAgICByZXR1cm4gY29uZmlnLnNlcnZlci51cmxzLmNvbmZpZysnLycrY29uZmlnLmdyb3VwLmlkKycvJytwcm9qZWN0LnR5cGUrJy8nK3Byb2plY3QuaWQ7XG4gICAgfSxcbiAgICBwbHVnaW5zOiBjb25maWcuZ3JvdXAucGx1Z2lucyxcbiAgICB0b29sczogY29uZmlnLnRvb2xzLFxuICAgIHZpZXdzOiBjb25maWcudmlld3MgfHwge31cbiAgfTtcbn07XG5cbi8vIHF1ZXN0YSDDqCBsYSBjb25maWd1cmF6aW9uZSBiYXNlIGRlbCB0ZW1wbGF0ZSBjaGUgY29udGVycsOgIHR1dHRpIGdsaVxuLy8gZWxlbWVudGkgcHJldmlzdGkgZGFsIHRlbXBsYXRlLiBOZWxsYSBkZWZpbml6aW9uZSBzb25vIHR1dHRpIG9nZ2V0dGkgdnVvdGlcbi8vIFNhcsOgIGwnYXBwbGljYXppb25lIGEgc2NlZ2xpZXJlIGRpIHJpZW1waXJlIGdsaSBlbGVtZW50aVxuZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGVDb25maWcoKXtcbiAgdmFyIENhdGFsb2dDb21wb25lbnQgPSByZXF1aXJlKCdzZGsnKS5ndWkudnVlLkNhdGFsb2dDb21wb25lbnQ7XG4gIHZhciBTZWFyY2hDb21wb25lbnQgPSByZXF1aXJlKCdzZGsnKS5ndWkudnVlLlNlYXJjaENvbXBvbmVudDtcbiAgdmFyIFRvb2xzQ29tcG9uZW50ID0gcmVxdWlyZSgnc2RrJykuZ3VpLnZ1ZS5Ub29sc0NvbXBvbmVudDtcbiAgdmFyIE1hcENvbXBvbmVudCA9IHJlcXVpcmUoJ3NkaycpLmd1aS52dWUuTWFwQ29tcG9uZW50O1xuICB2YXIgQ29udGVudHNDb21wb25lbnQgPSByZXF1aXJlKCcuL3RlbXBsYXRlL2pzL2NvbnRlbnRzJyk7XG4gIC8vYWwgbW9tZW50byBzaSB1dGlsaXp6YSBxdWVzbGxvIHF1ZW5lcmljbyBtYSBzaSBwb3RyZWJiZSBjb3N0cnVpcmUgdW4gY29tcG9uZW50ZVxuICAvL2FkIGhvYyBwZXIgaSByaXN1bHRhdGlcbiAgdmFyIFF1ZXJ5UmVzdWx0c0NvbXBvbmVudCA9IHJlcXVpcmUoJ3NkaycpLmd1aS52dWUuUXVlcnlSZXN1bHRzQ29tcG9uZW50O1xuICBcbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogY29uZmlnLmFwcHRpdGxlLFxuICAgIHBsYWNlaG9sZGVyczoge1xuICAgICAgbmF2YmFyOiB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtdXG4gICAgICB9LFxuICAgICAgc2lkZWJhcjoge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgbmV3IFNlYXJjaENvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogJ3NlYXJjaCcsXG4gICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGljb246IFwiZmEgZmEtc2VhcmNoXCJcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgQ2F0YWxvZ0NvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogJ2NhdGFsb2cnLFxuICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgIGljb246IFwiZmEgZmEtZGF0YWJhc2VcIlxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBUb29sc0NvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogJ3Rvb2xzJyxcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICAgICAgaWNvbjogXCJmYSBmYS1nZWFyXCJcbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgdmlld3BvcnQ6IHsgLy8gcGxhY2Vob2xkZXIgZGVsIGNvbnRlbnV0byAodmlldyBjb250ZW50KSBpbml6aWFsbWVudGUgVmlzdGEgU2Vjb25kYXJpYSAobmFzY29zdGEpXG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICBuZXcgTWFwQ29tcG9uZW50KHtcbiAgICAgICAgICAgIGlkOiAnbWFwJ1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG5ldyBDb250ZW50c0NvbXBvbmVudCh7XG4gICAgICAgICAgICBpZDogJ2NvbnRlbnRzJ1xuICAgICAgICAgIH0pXG4gICAgICAgIF1cbiAgICAgIH0sIFxuICAgICAgZmxvYXRiYXI6e1xuICAgICAgICBjb21wb25lbnRzOiBbXVxuICAgICAgfVxuICAgIH0sXG4gICAgb3RoZXJjb21wb25lbnRzOiBbXG4gICAgICBuZXcgUXVlcnlSZXN1bHRzQ29tcG9uZW50KHtcbiAgICAgICAgICBpZDogJ3F1ZXJ5cmVzdWx0cydcbiAgICAgIH0pXG4gICAgXVxuICB9O1xufVxuXG5mdW5jdGlvbiBvYnRhaW5Jbml0Q29uZmlnKGluaXRDb25maWdVcmwpIHtcblxuICB2YXIgZCA9ICQuRGVmZXJyZWQoKTtcbiAgLy9zZSBlc2lzdGUgdW4gb2dnZXR0byBnbG9iYWxlIGluaXRpQ29uZmlnXG4gIC8vcmlzb2x2byBjb24gcXVlbGwnb2dnZXR0b1xuICBpZiAod2luZG93LmluaXRDb25maWcpIHtcbiAgICByZXR1cm4gZC5yZXNvbHZlKHdpbmRvdy5pbml0Q29uZmlnKTtcbiAgfVxuICAvLyBhbHRyaW1lbnRpIGRldm8gcHJlbmRlcmxvIGRhbCBzZXJ2ZXIgdXNhbmRvIGlsIHBlcmNvcnNvIGluZGljYXRvIGluID9wcm9qZWN0PTxwZXJjb3Jzbz5cbiAgZWxzZXtcbiAgICB2YXIgcHJvamVjdFBhdGg7XG4gICAgdmFyIHF1ZXJ5VHVwbGVzID0gbG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKS5zcGxpdCgnJicpO1xuICAgIF8uZm9yRWFjaChxdWVyeVR1cGxlcywgZnVuY3Rpb24ocXVlcnlUdXBsZSkge1xuICAgICAgLy9zZSBlc2lzdGUgbGEgcGFyb2xhIHByb2plY3QgbmVsIHVybFxuICAgICAgaWYgKHF1ZXJ5VHVwbGUuaW5kZXhPZihcInByb2plY3RcIikgPiAtMSkge1xuICAgICAgICAvL3ByZW5kbyBpbCB2YWxvcmUgZGVsIHBhdGggcHJvZ2V0dG8gKG5vbWVwcm9nZXR0by90aXBvcHJvZ2V0dG8vaWRwcm9nZXR0bylcbiAgICAgICAgLy9lc2VtcGlvIGNvbXVuZS1kaS1jYXBhbm5vcmkvcWRqYW5nby8yMi9cbiAgICAgICAgcHJvamVjdFBhdGggPSBxdWVyeVR1cGxlLnNwbGl0KFwiPVwiKVsxXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocHJvamVjdFBhdGgpe1xuICAgICAgdmFyIGluaXRVcmwgPSBpbml0Q29uZmlnVXJsKycvJytwcm9qZWN0UGF0aDtcbiAgICAgIC8vcmVjdXBybyBkYWwgc2VydmVyIGxhIGNvbmZpZ3VyYXppb25lIGRpIHF1ZWwgcHJvZ2V0dG9cbiAgICAgICQuZ2V0KGluaXRVcmwsIGZ1bmN0aW9uKGluaXRDb25maWcpIHtcbiAgICAgICAgLy9pbml0Q29uZmlnIMOoIGwnb2dnZXR0byBjb250ZW5ldGU6XG4gICAgICAgIC8vZ3JvdXAsIG1lZGlhdXJsLCBzdGF0aWN1cmwsIHVzZXJcbiAgICAgICAgaW5pdENvbmZpZy5zdGF0aWN1cmwgPSBcIi4uL2J1aWxkL1wiOyAvLyBpbiBsb2NhbGUgZm9yemlhbW8gaWwgcGF0aCBkZWdsaSBhc3NldFxuICAgICAgICBkLnJlc29sdmUoaW5pdENvbmZpZyk7XG4gICAgICB9KVxuICAgIH1cbiAgfVxuICByZXR1cm4gZC5wcm9taXNlKCk7XG59XG5cbkFwcGxpY2F0aW9uU2VydmljZS5vbigncmVhZHknLGZ1bmN0aW9uKCl7XG4gIC8vaXN0YW56aW8gbCdhcHBpY2F0aW9uIHRlbXBsYXRlIHBhc3NhbmRvIGxhIGNvbmZpZ3VyYXppb25lIGRlbCB0ZW1wbGF0ZSBlIGwnYXBwbGljYXRpb25TZXJ2aWNlIGNoZSBmb3JuaXNjZSBBUEkgZGVsIHByb2dldHRvXG4gIHZhciB0ZW1wbGF0ZUNvbmZpZyA9IGNyZWF0ZVRlbXBsYXRlQ29uZmlnKCk7XG4gIC8vaXN0YW56aW8gbCdhcHBsaWNhdGlvbiBUZW1wbGF0ZVxuICBhcHBsaWNhdGlvblRlbXBsYXRlID0gbmV3IEFwcGxpY2F0aW9uVGVtcGxhdGUodGVtcGxhdGVDb25maWcsIHRoaXMpO1xuICBhcHBsaWNhdGlvblRlbXBsYXRlLm9uKCdyZWFkeScsZnVuY3Rpb24oKXtcbiAgICBBcHBsaWNhdGlvblNlcnZpY2UucG9zdEJvb3RzdHJhcCgpO1xuICB9KVxuICAvL2luaXppYWxpenpvIGUgZmFjY2lvIHBhcnRpcmUgY29uIGlsIG1ldG9kbyBpbml0XG4gIGFwcGxpY2F0aW9uVGVtcGxhdGUuaW5pdCgpO1xufSk7XG5cbmJvb3RzdHJhcCA9IGZ1bmN0aW9uKCl7XG4gIGkxOG5pbml0KGNvbmZpZy5pMThuKTtcbiAgb2J0YWluSW5pdENvbmZpZyhjb25maWcuc2VydmVyLnVybHMuaW5pdGNvbmZpZylcbiAgLnRoZW4oZnVuY3Rpb24oaW5pdENvbmZpZykge1xuICAgIGNvbmZpZy5zZXJ2ZXIudXJscy5zdGF0aWN1cmwgPSBpbml0Q29uZmlnLnN0YXRpY3VybDtcbiAgICBjb25maWcuc2VydmVyLnVybHMubWVkaWF1cmwgPSBpbml0Q29uZmlnLm1lZGlhdXJsO1xuICAgIGNvbmZpZy5ncm91cCA9IGluaXRDb25maWcuZ3JvdXA7XG4gICAgdmFyIGFwcGxpY2F0aW9uQ29uZmlnID0gY3JlYXRlQXBwbGljYXRpb25Db25maWcoKTtcbiAgICBBcHBsaWNhdGlvblNlcnZpY2UuaW5pdChhcHBsaWNhdGlvbkNvbmZpZywgdHJ1ZSk7IC8vIGxhbmNpbyBtYW51YWxtZW50ZSBpbCBwb3N0Qm9vdHN0cnBcbiAgfSlcbn0oKTtcblxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwid3JhcHBlclxcXCI+XFxuICA8aGVhZGVyIGNsYXNzPVxcXCJtYWluLWhlYWRlclxcXCI+XFxuICAgIDwhLS0gTG9nbyAtLT5cXG4gICAgPCEtLSBIZWFkZXIgTmF2YmFyOiBzdHlsZSBjYW4gYmUgZm91bmQgaW4gaGVhZGVyLmxlc3MgLS0+XFxuICAgIDxuYXYgY2xhc3M9XFxcIm5hdmJhciBuYXZiYXItc3RhdGljLXRvcFxcXCIgcm9sZT1cXFwibmF2aWdhdGlvblxcXCI+XFxuICAgICAgPCEtLSBUb2dnbGUgYnV0dG9uIG9uIG5hdmJhciBvbmx5IGZvciBtb2JpbGUgLS0+XFxuICAgICAgPGEgdi1pZj1cXFwiaXNNb2JpbGUoKVxcXCIgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcInNpZGViYXItdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1cXFwib2ZmY2FudmFzXFxcIiByb2xlPVxcXCJidXR0b25cXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNyLW9ubHlcXFwiPkV4cGFuZDwvc3Bhbj5cXG4gICAgICA8L2E+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwibG9nby13cmFwcGVyXFxcIj5cXG4gICAgICAgIDxhIHYtaWY9XFxcImxvZ29fdXJsXFxcIiA6aHJlZj1cXFwibG9nb19saW5rXFxcIiA6dGFyZ2V0PVxcXCJsb2dvX2xpbmtfdGFyZ2V0XFxcIiBjbGFzcz1cXFwiXFxcIj48aW1nIDpzcmM9XFxcImxvZ29fdXJsXFxcIiBzdHlsZT1cXFwiaGVpZ2h0OjQwcHhcXFwiPjwvYT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJcXFwiPnt7cHJvamVjdF90aXRsZX19PC9zcGFuPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L25hdj5cXG4gIDwvaGVhZGVyPlxcbiAgPCEtLSBMZWZ0IHNpZGUgY29sdW1uLiBjb250YWlucyB0aGUgbG9nbyBhbmQgc2lkZWJhciAtLT5cXG4gIDxzaWRlYmFyPjwvc2lkZWJhcj5cXG4gIDwhLS0gQ29udGVudCBXcmFwcGVyLiBDb250YWlucyBwYWdlIGNvbnRlbnQgLS0+XFxuICA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LXdyYXBwZXJcXFwiIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOndoaXRlXFxcIj5cXG4gICAgPHZpZXdwb3J0Pjwvdmlld3BvcnQ+XFxuICA8L2Rpdj5cXG4gIDwhLS0gLy5jb250ZW50LXdyYXBwZXIgLS0+XFxuICA8IS0tIENvbnRyb2wgU2lkZWJhciAtLT5cXG4gIDxmbG9hdGJhcj48L2Zsb2F0YmFyPlxcbiAgPCEtLSAvLmNvbnRyb2wtc2lkZWJhciAtLT5cXG4gIDwhLS0gQWRkIHRoZSBzaWRlYmFyJ3MgYmFja2dyb3VuZC4gVGhpcyBkaXYgbXVzdCBiZSBwbGFjZWRcXG4gICAgICAgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbnRyb2wgc2lkZWJhciAtLT5cXG4gIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtc2lkZWJhci1iZ1xcXCI+PC9kaXY+XFxuPC9kaXY+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBpZD1cXFwiY29udGVudHNcXFwiPjwvZGl2PlxcblwiO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxhc2lkZSBjbGFzcz1cXFwiY29udHJvbC1zaWRlYmFyIGNvbnRyb2wtc2lkZWJhci1saWdodFxcXCIgPlxcbiAgPGEgdi1zaG93PVxcXCJwYW5lbHNpbnN0YWNrXFxcIiBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwiZmxvYXRiYXItYXNpZGUtdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1cXFwiY29udHJvbC1zaWRlYmFyXFxcIiByb2xlPVxcXCJidXR0b25cXFwiPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+RXhwYW5kPC9zcGFuPlxcbiAgPC9hPlxcbiAgPGRpdiBpZD1cXFwiZmxvYXRiYXItc3Bpbm5lclxcXCIgc3R5bGU9XFxcInBvc2l0aW9uOmFic29sdXRlXFxcIj48L2Rpdj5cXG4gIDxkaXYgdi1zaG93PVxcXCJwYW5lbHNpbnN0YWNrXFxcIiBjbGFzcz1cXFwiZzN3LXNpZGViYXJwYW5lbFxcXCI+XFxuICAgIDxkaXYgdi1pZj1cXFwiY2xvc2FibGVcXFwiIGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC14cy0xMiBjb2wtc20tMTIgY29sLW1kLTEyXFxcIj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQgY2xvc2UtcGFuZWwtYnV0dG9uXFxcIiBAY2xpY2s9XFxcImNsb3NlUGFuZWxcXFwiPjwvYnV0dG9uPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiB2LWlmPVxcXCJwYW5lbG5hbWVcXFwiPlxcbiAgICAgIDxoNCBjbGFzcz1cXFwiZzN3LWZsb2F0YmFycGFuZWwtbmFtZVxcXCI+e3sgcGFuZWxuYW1lIH19PC9oND5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgaWQ9XFxcImczdy1mbG9hdGJhcnBhbmVsLXBsYWNlaG9sZGVyXFxcIiBjbGFzcz1cXFwiZzN3LWZsb2F0YmFycGFuZWwtcGxhY2Vob2xkZXJcXFwiPjwvZGl2PlxcbiAgPC9kaXY+XFxuPC9hc2lkZT5cXG5cIjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8bGkgdi1zaG93PVxcXCJzdGF0ZS52aXNpYmxlXFxcIiBjbGFzcz1cXFwidHJlZXZpZXdcXFwiIDpjbGFzcz1cXFwieydhY3RpdmUnOiBvcGVufVxcXCI+XFxuICA8YSBocmVmPVxcXCIjXFxcIj5cXG4gICAgPGkgOmNsYXNzPVxcXCJpY29uXFxcIj48L2k+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0cmVldmlldy1sYWJlbFxcXCI+e3t0aXRsZSB8IHR9fTwvc3Bhbj5cXG4gICAgPGkgdi1pZj1cXFwiKGRhdGFUeXBlID09PSAnaW5saW5lJylcXFwiIGNsYXNzPVxcXCJmYSBmYS1hbmdsZS1sZWZ0IHB1bGwtcmlnaHRcXFwiPjwvaT5cXG4gIDwvYT5cXG4gIDx1bCB2LWlmPVxcXCIoZGF0YVR5cGUgPT09ICdpbmxpbmUnKVxcXCIgY2xhc3M9XFxcInRyZWV2aWV3LW1lbnVcXFwiPlxcbiAgICA8ZGl2IGlkPVxcXCJnM3ctc2lkZWJhcmNvbXBvbmVudC1wbGFjZWhvbGRlclxcXCI+PC9kaXY+XFxuICA8L3VsPlxcbjwvbGk+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGFzaWRlIGNsYXNzPVxcXCJtYWluLXNpZGViYXJcXFwiPlxcbiAgPCEtLSBzaWRlYmFyOiBzdHlsZSBjYW4gYmUgZm91bmQgaW4gc2lkZWJhci5sZXNzIC0tPlxcbiAgPCEtLSBTaWRlYmFyIHRvZ2dsZSBidXR0b24tLT5cXG4gIDwhLS0gVG9nZ2xlIGJ1dHRvbiBvbiB0aGUgbGVmdCBzaWRlIG9mIG1haW4gc2lkZWJhciBvbmx5IGlmIG5vdCBtb2JpbGUgLS0+XFxuICA8YSB2LWlmPVxcXCIhaXNNb2JpbGUoKVxcXCIgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcInNpZGViYXItYXNpZGUtdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1cXFwib2ZmY2FudmFzXFxcIiByb2xlPVxcXCJidXR0b25cXFwiPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwic3Itb25seVxcXCI+RXhwYW5kPC9zcGFuPlxcbiAgPC9hPlxcbiAgPCEtLTxkaXYgY2xhc3M9XFxcInF1aWNrLWFjdGlvbnMtbWVudVxcXCI+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tY2lyY2xlLW1lZGl1bSBnbHlwaGljb24gZ2x5cGhpY29uLXNoYXJlLWFsdFxcXCI+PC9idXR0b24+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tY2lyY2xlLW1lZGl1bSBnbHlwaGljb24gZ2x5cGhpY29uLW1vZGFsLXdpbmRvd1xcXCI+PC9idXR0b24+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tY2lyY2xlLW1lZGl1bSBnbHlwaGljb24gZ2x5cGhpY29uLXByaW50XFxcIj48L2J1dHRvbj5cXG4gICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1jaXJjbGUtbWVkaXVtIGdseXBoaWNvbiBnbHlwaGljb24tc2VhcmNoXFxcIj48L2J1dHRvbj5cXG4gIDwvZGl2Pi0tPlxcblxcdDxzZWN0aW9uIGNsYXNzPVxcXCJzaWRlYmFyXFxcIj5cXG4gICAgPGRpdiB2LXNob3c9XFxcInBhbmVsc2luc3RhY2tcXFwiIGNsYXNzPVxcXCJnM3ctc2lkZWJhcnBhbmVsXFxcIj5cXG4gICAgICA8ZGl2IHN0eWxlPVxcXCJvdmVyZmxvdzogaGlkZGVuO2xpbmUtaGVpZ2h0OiAxNHB4O21hcmdpbi10b3A6IDRweDsgZm9udC1zaXplOjEuNWVtXFxcIj5cXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcHVsbC1yaWdodCBjbG9zZS1wYW5lbC1idXR0b25cXFwiIEBjbGljaz1cXFwiY2xvc2VQYW5lbFxcXCI+PC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBpZD1cXFwiZzN3LXNpZGViYXJwYW5lbC1wbGFjZWhvbGRlclxcXCIgY2xhc3M9XFxcImczdy1zaWRlYmFycGFuZWwtcGxhY2Vob2xkZXJcXFwiPjwvZGl2PlxcbiAgICA8L2Rpdj5cXG5cXHQgIDx1bCBpZD1cXFwiZzN3LXNpZGViYXJjb21wb25lbnRzXFxcIiB2LXNob3c9XFxcInNob3dtYWlucGFuZWxcXFwiIGNsYXNzPVxcXCJzaWRlYmFyLW1lbnVcXFwiPjwvdWw+XFxuXFx0PC9zZWN0aW9uPlxcblxcdDwhLS0gLy5zaWRlYmFyIC0tPlxcbjwvYXNpZGU+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiZzN3LXZpZXdwb3J0XFxcIj5cXG4gIDxkaXYgaWQ9XFxcImczdy12aWV3LW9uZVxcXCIgY2xhc3M9XFxcImczdy12aWV3IG9uZVxcXCIgOnN0eWxlPVxcXCJ7d2lkdGg6c3RhdGUudmlld1NpemVzLm9uZS53aWR0aCsncHgnLGhlaWdodDpzdGF0ZS52aWV3U2l6ZXMub25lLmhlaWdodCsncHgnfVxcXCI+PC9kaXY+XFxuICA8ZGl2IGlkPVxcXCJnM3ctdmlldy10d29cXFwiIGNsYXNzPVxcXCJnM3ctdmlldyB0d29cXFwiIDpzdHlsZT1cXFwie3dpZHRoOnN0YXRlLnZpZXdTaXplcy50d28ud2lkdGgrJ3B4JyxoZWlnaHQ6c3RhdGUudmlld1NpemVzLnR3by5oZWlnaHQrJ3B4J31cXFwiPjwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwidmFyIEFwcGxpY2F0aW9uU2VydmljZSA9IHJlcXVpcmUoJ2NvcmUvYXBwbGljYXRpb25zZXJ2aWNlJyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcHJvamVjdC9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG52YXIgbGF5b3V0ID0gcmVxdWlyZSgnLi9sYXlvdXQnKTtcbnZhciBBcHBVSSA9IFZ1ZS5leHRlbmQoe1xuICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vaHRtbC9hcHAuaHRtbCcpLFxuICByZWFkeTogZnVuY3Rpb24oKXtcbiAgICAvKiBzdGFydCB0byByZW5kZXIgTGF5b3V0TWFuYWdlciBsYXlvdXQgKi9cbiAgICBsYXlvdXQubG9hZGluZyhmYWxzZSk7XG4gICAgbGF5b3V0LnNldHVwKCk7XG4gICAgLy9GaXggdGhlIHByb2JsZW0gd2l0aCByaWdodCBzaWRlYmFyIGFuZCBsYXlvdXQgYm94ZWRcbiAgICBsYXlvdXQucHVzaE1lbnUuZXhwYW5kT25Ib3ZlcigpO1xuICAgIGxheW91dC5jb250cm9sU2lkZWJhci5fZml4KCQoXCIuY29udHJvbC1zaWRlYmFyLWJnXCIpKTtcbiAgICBsYXlvdXQuY29udHJvbFNpZGViYXIuX2ZpeCgkKFwiLmNvbnRyb2wtc2lkZWJhclwiKSk7XG4gICAgdmFyIGNvbnRyb2xzaWRlYmFyRWwgPSBsYXlvdXQub3B0aW9ucy5jb250cm9sU2lkZWJhck9wdGlvbnMuc2VsZWN0b3I7XG4gICAgZnVuY3Rpb24gc2V0RmxvYXRCYXJNYXhIZWlnaHQoKXtcbiAgICAgICQoY29udHJvbHNpZGViYXJFbCkuY3NzKCdtYXgtaGVpZ2h0JywkKHdpbmRvdykuaW5uZXJIZWlnaHQoKSk7XG4gICAgICAkKCcuZzN3LXNpZGViYXJwYW5lbCcpLmNzcygnaGVpZ2h0JywkKHdpbmRvdykuaGVpZ2h0KCkgLSAkKFwiLm1haW4taGVhZGVyXCIpLmhlaWdodCgpKTtcbiAgICB9XG4gICAgc2V0RmxvYXRCYXJNYXhIZWlnaHQoKTtcbiAgICBmdW5jdGlvbiBzZXRNb2RhbEhlaWdodCgpe1xuICAgICAgJCgnI2czdy1tb2RhbC1vdmVybGF5JykuY3NzKCdoZWlnaHQnLCQod2luZG93KS5oZWlnaHQoKSk7XG4gICAgfVxuICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XG4gICAgICBzZXRGbG9hdEJhck1heEhlaWdodCgpO1xuICAgICAgc2V0TW9kYWxIZWlnaHQoKTtcbiAgICB9KTtcbiAgIH0sXG4gICBjb21wdXRlZDoge1xuICAgIGxvZ29fdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb25maWcgPSBBcHBsaWNhdGlvblNlcnZpY2UuZ2V0Q29uZmlnKCk7XG4gICAgICB2YXIgbG9nb191cmw7XG4gICAgICBpZiAoY29uZmlnLmxvZ29faW1nICYmIGNvbmZpZy5sb2dvX2ltZyE9JycpIHtcbiAgICAgICAgbG9nb191cmwgPSBjb25maWcubWVkaWF1cmwrY29uZmlnLmxvZ29faW1nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvZ29fdXJsO1xuICAgIH0sXG4gICAgbG9nb19saW5rOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2dvX2xpbmsgPSB0aGlzLmdldExvZ29MaW5rKCk7XG4gICAgICByZXR1cm4gbG9nb19saW5rID8gbG9nb19saW5rIDogXCIjXCI7XG4gICAgfSxcbiAgICBsb2dvX2xpbmtfdGFyZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2dvX2xpbmsgPSB0aGlzLmdldExvZ29MaW5rKCk7XG4gICAgICByZXR1cm4gbG9nb19saW5rID8gXCJfYmxhbmtcIiA6IFwiXCI7XG4gICAgfSxcbiAgICBwcm9qZWN0X3RpdGxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJyZW50UHJvamVjdCA9IFByb2plY3RzUmVnaXN0cnkuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICAgIHJldHVybiBjdXJyZW50UHJvamVjdC5zdGF0ZS5uYW1lO1xuICAgIH1cbiAgIH0sXG4gICBtZXRob2RzOiB7XG4gICAgICBjbG9zZVBhbmVsOiBmdW5jdGlvbigpe1xuICAgICAgICBzaWRlYmFyU2VydmljZS5jbG9zZVBhbmVsKCk7XG4gICAgICB9LFxuICAgICAgaXNNb2JpbGU6IGZ1bmN0aW9uKCl7cmV0dXJuIGlzTW9iaWxlLmFueX0sXG4gICAgICBnZXRMb2dvTGluazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsb2dvX2xpbmsgPSBudWxsO1xuICAgICAgICBpZiAoQXBwbGljYXRpb25TZXJ2aWNlLmdldENvbmZpZygpLmxvZ29fbGluaykge1xuICAgICAgICAgIGxvZ29fbGluayA9IEFwcGxpY2F0aW9uU2VydmljZS5nZXRDb25maWcoKS5sb2dvX2xpbms7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvZ29fbGluaztcbiAgICAgIH1cbiAgICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwVUk7XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ3Nkay9jb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdzZGsvY29yZS9nM3dvYmplY3QnKTtcblxuZnVuY3Rpb24gQmFyU3RhY2soKXtcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBwYW5lbHM6IFtdXG4gIH1cbiAgLyp0aGlzLnN0YXRlID0ge1xuICAgIHBhbmVsczogW11cbiAgfTsqL1xufVxuXG5pbmhlcml0KEJhclN0YWNrLEczV09iamVjdCk7XG5cbnZhciBwcm90byA9IEJhclN0YWNrLnByb3RvdHlwZTtcblxucHJvdG8ucHVzaCA9IGZ1bmN0aW9uKHBhbmVsLCBwYXJlbnQsIGFwcGVuZCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGFwcGVuZCA9IGFwcGVuZCB8fCBmYWxzZTtcbiAgdGhpcy5yZW1vdmUocGFuZWwpOyAvLyBuZWwgY2FzbyBlc2lzdGEgZ2nDoCBwcmltYSBsbyByaW11b3ZvXG4gIHBhbmVsLm1vdW50KHBhcmVudCwgYXBwZW5kKVxuICAudGhlbihmdW5jdGlvbigpe1xuICAgICQocGFyZW50KS5sb2NhbGl6ZSgpO1xuICAgIHNlbGYuc3RhdGUucGFuZWxzLnB1c2gocGFuZWwpO1xuICB9KTtcbn07XG5cbnByb3RvLnBvcCA9IGZ1bmN0aW9uKCl7XG4gIC8vIHF1aSBwb3RyZW1vIGNoaWVkZXJlIGFsIHBhbm5lbGxvIHNlIHB1w7IgZXNzZXJlIGNoaXVzby4uLlxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh0aGlzLnN0YXRlLnBhbmVscy5sZW5ndGgpIHtcbiAgICB2YXIgcGFuZWwgPSB0aGlzLnN0YXRlLnBhbmVscy5zbGljZSgtMSlbMF07XG4gICAgcGFuZWwudW5tb3VudCgpXG4gICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgIC8vc2VsZi5zdGF0ZS5wYW5lbHMucG9wKCk7XG4gICAgICBzZWxmLnN0YXRlLnBhbmVscy5wb3AoKTtcbiAgICB9KTtcbiAgfVxufTtcblxucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24ocGFuZWwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaWR4VG9SZW1vdmUgPSBudWxsO1xuICB2YXIgaWQgPSBwYW5lbC5nZXRJZCgpO1xuICBfLmZvckVhY2godGhpcy5zdGF0ZS5wYW5lbHMsIGZ1bmN0aW9uKF9wYW5lbCxpZHgpIHtcbiAgICBpZiAoX3BhbmVsLmdldElkKCkgPT0gaWQpIHtcbiAgICAgIGlkeFRvUmVtb3ZlID0gaWR4O1xuICAgIH07XG4gIH0pO1xuICBpZiAoIV8uaXNOdWxsKGlkeFRvUmVtb3ZlKSkge1xuICAgIHZhciBfcGFuZWwgPSBzZWxmLnN0YXRlLnBhbmVsc1tpZHhUb1JlbW92ZV07XG4gICAgX3BhbmVsLnVubW91bnQoKVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5zdGF0ZS5wYW5lbHMuc3BsaWNlKGlkeFRvUmVtb3ZlLDEpO1xuICAgIH0pO1xuICB9XG59O1xuXG5wcm90by5nZXRMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUucGFuZWxzLmxlbmd0aDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmFyU3RhY2s7XG4iLCJ2YXIgdCA9IHJlcXVpcmUoJ2NvcmUvaTE4bi9pMThuLnNlcnZpY2UnKS50O1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykubWVyZ2U7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnZ3VpL3Z1ZS9jb21wb25lbnQnKTtcblxudmFyIEludGVybmFsQ29tcG9uZW50ID0gVnVlLmV4dGVuZCh7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL2h0bWwvY29udGVudHMuaHRtbCcpLFxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgIH1cbiAgICB9LFxufSk7XG5cbmZ1bmN0aW9uIENvbnRlbnRzQ29tcG9uZW50KG9wdGlvbnMpe1xuICBiYXNlKHRoaXMsb3B0aW9ucyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fc2VydmljZSA9IHRoaXM7XG4gIHRoaXMuaWQgPSBcImNvbnRlbnRzXCI7XG4gIHRoaXMudGl0bGUgPSBcImNvbnRlbnRzXCI7XG4gIHRoaXMuc3RhdGUudmlzaWJsZSA9IHRydWU7XG4gIFxuICB0aGlzLl9jb250ZW50ID0gbnVsbDtcbiAgXG4gIG1lcmdlKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLmludGVybmFsQ29tcG9uZW50ID0gbmV3IEludGVybmFsQ29tcG9uZW50KHtcbiAgICBzZXJ2aWNlOiB0aGlzXG4gIH0pO1xuICB0aGlzLmludGVybmFsQ29tcG9uZW50LnN0YXRlID0gdGhpcy5zdGF0ZTtcbn07XG5pbmhlcml0KENvbnRlbnRzQ29tcG9uZW50LCBDb21wb25lbnQpO1xuXG52YXIgcHJvdG8gPSBDb250ZW50c0NvbXBvbmVudC5wcm90b3R5cGU7XG5cbnByb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIGlmICh0aGlzLl9jb250ZW50KSB7XG4gICAgdGhpcy5yZW1vdmVDb250ZW50KCk7XG4gIH1cbiAgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkpIHtcbiAgICB0aGlzLl9zZXRET01Db250ZW50KGNvbnRlbnRbMF0pO1xuICB9XG4gIGVsc2UgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcbiAgICB0aGlzLl9zZXRWdWVDb250ZW50KGNvbnRlbnQpO1xuICB9XG4gIGVsc2UgaWYgKF8uaXNTdHJpbmcoY29udGVudCkpIHtcbiAgICB0aGlzLl9zZXRET01Db250ZW50KCQoY29udGVudClbMF0pO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuX3NldERPTUNvbnRlbnQoY29udGVudCk7XG4gIH1cbn07XG5cbnByb3RvLnJlbW92ZUNvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIGlmKHRoaXMuX2NvbnRlbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcbiAgICB0aGlzLl9jb250ZW50LnVubW91bnQoKTtcbiAgfVxuICBlbHNlIHtcbiAgICAkKHRoaXMuaW50ZXJuYWxDb21wb25lbnQuJGVsKS5lbXB0eSgpO1xuICB9XG59O1xuXG5wcm90by5fc2V0RE9NQ29udGVudCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudC4kZWwuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xufTtcbnByb3RvLl9zZXRWdWVDb250ZW50ID0gZnVuY3Rpb24oY29tcG9uZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY29tcG9uZW50Lm1vdW50KHRoaXMuaW50ZXJuYWxDb21wb25lbnQuJGVsKS5cbiAgdGhlbihmdW5jdGlvbigpe1xuICAgIHNlbGYuX2NvbnRlbnQgPSBjb21wb25lbnQ7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZW50c0NvbXBvbmVudDtcbiIsInZhciB0ID0gcmVxdWlyZSgnc2RrL2NvcmUvaTE4bi9pMThuLnNlcnZpY2UnKS50O1xudmFyIFN0YWNrID0gcmVxdWlyZSgnLi9iYXJzdGFjay5qcycpO1xudmFyIEdVSSA9IHJlcXVpcmUoJ3Nkay9ndWkvZ3VpJyk7XG5cbmZ1bmN0aW9uIEZsb2F0YmFyU2VydmljZSgpe1xuICB0aGlzLnN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGxheW91dCl7XG4gICAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XG4gICAgdGhpcy5jbG9zYWJsZSA9IHRydWU7XG4gICAgdGhpcy5zaWRlYmFyRWwgPSAkKHRoaXMubGF5b3V0Lm9wdGlvbnMuY29udHJvbFNpZGViYXJPcHRpb25zLnNlbGVjdG9yKTtcbiAgICB0aGlzLl96aW5kZXggPSB0aGlzLnNpZGViYXJFbC5jc3MoXCJ6LWluZGV4XCIpO1xuICAgIHRoaXMuX21vZGFsT3ZlcmxheSA9IG51bGw7XG4gICAgdGhpcy5fbW9kYWwgPSBmYWxzZTtcbiAgICB0aGlzLl9pc29wZW4gPSBmYWxzZTtcbiAgfTtcblxuICB0aGlzLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9pc29wZW47XG4gIH07XG5cbiAgdGhpcy5vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5sYXlvdXQuZmxvYXRCYXIub3Blbih0aGlzLnNpZGViYXJFbCx0cnVlKTtcbiAgICB0aGlzLl9pc29wZW4gPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxheW91dC5mbG9hdEJhci5jbG9zZSh0aGlzLnNpZGViYXJFbCx0cnVlKTtcbiAgICB0aGlzLl9pc29wZW4gPSBmYWxzZTtcbiAgfTtcblxuICB0aGlzLnNob3dQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsLG9wdGlvbnMpe1xuICAgIHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYXBwZW5kID0gb3B0aW9ucy5hcHBlbmQgfHwgZmFsc2U7XG4gICAgdmFyIG1vZGFsID0gb3B0aW9ucy5tb2RhbCB8fCBmYWxzZTtcbiAgICB0aGlzLmNsb3NhYmxlID0gb3B0aW9ucy5jbG9zYWJsZSB8fCB0cnVlO1xuICAgIHRoaXMuc3RhY2sucHVzaChwYW5lbCxcIiNnM3ctZmxvYXRiYXJwYW5lbC1wbGFjZWhvbGRlclwiLCBhcHBlbmQpO1xuICAgIGlmICghdGhpcy5faXNvcGVuKSB7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9O1xuICAgIC8vIFRPRE86IHBlciBhZGVzc28gZGlhYmlsaXRvIGlsIG1vZGFsZVxuICAgIC8qaWYgKG1vZGFsKXtcbiAgICAgIHRoaXMuX21vZGFsID0gdHJ1ZTtcbiAgICAgIEdVSS5zZXRNb2RhbCgpO1xuICAgICAgdGhpcy5zaWRlYmFyRWwuY3NzKFwiei1pbmRleFwiLDUwMDApO1xuICAgICAgdGhpcy5zaWRlYmFyRWwuY3NzKFwicGFkZGluZy10b3BcIixcIjBweFwiKTtcbiAgICAgICQoJy5jb250cm9sLXNpZGViYXItYmcnKS5jc3MoXCJ6LWluZGV4XCIsNDk5OSk7XG4gICAgICAkKCcuY29udHJvbC1zaWRlYmFyLWJnJykudG9nZ2xlQ2xhc3MoJ2NvbnRyb2wtc2lkZWJhci1iZy1zaGFkb3cnKTtcbiAgICB9Ki9cbiAgfTtcbiAgXG4gIHRoaXMuY2xvc2VQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsKXtcbiAgICBpZiAocGFuZWwpIHtcbiAgICAgIHRoaXMuc3RhY2sucmVtb3ZlKHBhbmVsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhY2suZ2V0TGVuZ3RoKCkpIHtcbiAgICAgIGlmICh0aGlzLl9tb2RhbCl7XG4gICAgICAgIEdVSS5zZXRNb2RhbChmYWxzZSk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgJCgnLmNvbnRyb2wtc2lkZWJhci1iZycpLnRvZ2dsZUNsYXNzKCdjb250cm9sLXNpZGViYXItYmctc2hhZG93Jyk7XG4gICAgICAgIHRoaXMuc2lkZWJhckVsLmNzcyhcInotaW5kZXhcIixcIlwiKTtcbiAgICAgICAgdGhpcy5zaWRlYmFyRWwuY3NzKFwicGFkZGluZy10b3BcIixcIjUwcHhcIik7XG4gICAgICAgICQoJy5jb250cm9sLXNpZGViYXItYmcnKS5jc3MoXCJ6LWluZGV4XCIsXCJcIik7XG4gICAgICAgIHRoaXMuX21vZGFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIHRoaXMuaGlkZVBhbmVsID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH07XG59XG5cbnZhciBmbG9hdGJhclNlcnZpY2UgPSBuZXcgRmxvYXRiYXJTZXJ2aWNlKCk7XG5cbnZhciBGbG9hdGJhckNvbXBvbmVudCA9IFZ1ZS5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi9odG1sL2Zsb2F0YmFyLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICBcdHJldHVybiB7XG4gICAgICAgIHN0YWNrOiBmbG9hdGJhclNlcnZpY2Uuc3RhY2suc3RhdGUsXG4gICAgICB9O1xuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIC8vIHF1YW50aSBwYW5uZWxsaSBzb25vIGF0dGl2aSBuZWxsbyBzdGFja1xuICAgICAgcGFuZWxzaW5zdGFjazogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2sucGFuZWxzLmxlbmd0aD4wO1xuICAgICAgfSxcbiAgICAgIHBhbmVsbmFtZTogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgIGlmICh0aGlzLnN0YWNrLnBhbmVscy5sZW5ndGgpe1xuICAgICAgICAgIG5hbWUgPSB0aGlzLnN0YWNrLnBhbmVscy5zbGljZSgtMSlbMF0uZ2V0VGl0bGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgIH0sXG4gICAgICBjbG9zYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmbG9hdGJhclNlcnZpY2UuY2xvc2FibGU7XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgLy8gVE9ETzogQnJ1dHRvLCBtYSDDqCBsJ3VuaWNvIChwZXIgb3JhKSBtb2RvIGZsZXNzaWJpbGUgY2hlIGhvIHRyb3ZhdG8gcGVyIGltcGxlbWVudGFyZSBpbCBjb25jZXR0byBkaSBzdGFjay4uLiBcbiAgICAgIFwic3RhY2sucGFuZWxzXCI6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9ICQoXCIjZzN3LWZsb2F0YmFycGFuZWwtcGxhY2Vob2xkZXJcIikuY2hpbGRyZW4oKTtcbiAgICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuLGZ1bmN0aW9uKGNoaWxkLGluZGV4KXtcbiAgICAgICAgICBpZiAoaW5kZXggPT0gY2hpbGRyZW4ubGVuZ3RoLTEpe1xuICAgICAgICAgICAgJChjaGlsZCkuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICQoY2hpbGQpLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBjbG9zZVBhbmVsOiBmdW5jdGlvbigpe1xuICAgICAgICBmbG9hdGJhclNlcnZpY2UuY2xvc2VQYW5lbCgpO1xuICAgICAgfVxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRmxvYXRiYXJTZXJ2aWNlOiBmbG9hdGJhclNlcnZpY2UsXG4gIEZsb2F0YmFyQ29tcG9uZW50OiBGbG9hdGJhckNvbXBvbmVudFxufVxuIiwiLy9NYWtlIHN1cmUgalF1ZXJ5IGhhcyBiZWVuIGxvYWRlZCBiZWZvcmUgYXBwLmpzXG5pZiAodHlwZW9mIGpRdWVyeSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJMYXlvdXRNYW5hZ2VyIHJlcXVpcmVzIGpRdWVyeVwiKTtcbn1cblxuJC5MYXlvdXRNYW5hZ2VyID0ge307XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAtIExheW91dE1hbmFnZXIgT3B0aW9ucyAtXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogTW9kaWZ5IHRoZXNlIG9wdGlvbnMgdG8gc3VpdCB5b3VyIGltcGxlbWVudGF0aW9uXG4gKi9cbiQuTGF5b3V0TWFuYWdlci5vcHRpb25zID0ge1xuICAvL0FkZCBzbGltc2Nyb2xsIHRvIG5hdmJhciBtZW51c1xuICAvL1RoaXMgcmVxdWlyZXMgeW91IHRvIGxvYWQgdGhlIHNsaW1zY3JvbGwgcGx1Z2luXG4gIC8vaW4gZXZlcnkgcGFnZSBiZWZvcmUgYXBwLmpzXG4gIG5hdmJhck1lbnVTbGltc2Nyb2xsOiB0cnVlLFxuICBuYXZiYXJNZW51U2xpbXNjcm9sbFdpZHRoOiBcIjBweFwiLCAvL1RoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsIGJhclxuICBuYXZiYXJNZW51SGVpZ2h0OiBcIjIwMHB4XCIsIC8vVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgbWVudVxuICAvL0dlbmVyYWwgYW5pbWF0aW9uIHNwZWVkIGZvciBKUyBhbmltYXRlZCBlbGVtZW50cyBzdWNoIGFzIGJveCBjb2xsYXBzZS9leHBhbmQgYW5kXG4gIC8vc2lkZWJhciB0cmVldmlldyBzbGlkZSB1cC9kb3duLiBUaGlzIG9wdGlvbnMgYWNjZXB0cyBhbiBpbnRlZ2VyIGFzIG1pbGxpc2Vjb25kcyxcbiAgLy8nZmFzdCcsICdub3JtYWwnLCBvciAnc2xvdydcbiAgYW5pbWF0aW9uU3BlZWQ6J2Zhc3QnLFxuICAvL1NpZGViYXIgcHVzaCBtZW51IHRvZ2dsZSBidXR0b24gc2VsZWN0b3JcbiAgc2lkZWJhclRvZ2dsZVNlbGVjdG9yOiBcIltkYXRhLXRvZ2dsZT0nb2ZmY2FudmFzJ11cIixcbiAgLy9BY3RpdmF0ZSBzaWRlYmFyIHB1c2ggbWVudVxuICBzaWRlYmFyUHVzaE1lbnU6IHRydWUsXG4gIC8vQWN0aXZhdGUgc2lkZWJhciBzbGltc2Nyb2xsIGlmIHRoZSBmaXhlZCBsYXlvdXQgaXMgc2V0IChyZXF1aXJlcyBTbGltU2Nyb2xsIFBsdWdpbilcbiAgc2lkZWJhclNsaW1TY3JvbGw6IHRydWUsXG4gIC8vRW5hYmxlIHNpZGViYXIgZXhwYW5kIG9uIGhvdmVyIGVmZmVjdCBmb3Igc2lkZWJhciBtaW5pXG4gIC8vVGhpcyBvcHRpb24gaXMgZm9yY2VkIHRvIHRydWUgaWYgYm90aCB0aGUgZml4ZWQgbGF5b3V0IGFuZCBzaWRlYmFyIG1pbmlcbiAgLy9hcmUgdXNlZCB0b2dldGhlclxuICBzaWRlYmFyRXhwYW5kT25Ib3ZlcjogZmFsc2UsXG4gIC8vQm94UmVmcmVzaCBQbHVnaW5cbiAgZW5hYmxlQm94UmVmcmVzaDogdHJ1ZSxcbiAgLy9Cb290c3RyYXAuanMgdG9vbHRpcFxuICBlbmFibGVCU1RvcHBsdGlwOiB0cnVlLFxuICBCU1Rvb2x0aXBTZWxlY3RvcjogXCJbZGF0YS10b2dnbGU9J3Rvb2x0aXAnXVwiLFxuICAvL0VuYWJsZSBGYXN0IENsaWNrLiBGYXN0Y2xpY2suanMgY3JlYXRlcyBhIG1vcmVcbiAgLy9uYXRpdmUgdG91Y2ggZXhwZXJpZW5jZSB3aXRoIHRvdWNoIGRldmljZXMuIElmIHlvdVxuICAvL2Nob29zZSB0byBlbmFibGUgdGhlIHBsdWdpbiwgbWFrZSBzdXJlIHlvdSBsb2FkIHRoZSBzY3JpcHRcbiAgLy9iZWZvcmUgTGF5b3V0TWFuYWdlcidzIGFwcC5qc1xuICBlbmFibGVGYXN0Y2xpY2s6IHRydWUsXG4gIC8vQ29udHJvbCBTaWRlYmFyIE9wdGlvbnNcbiAgZW5hYmxlQ29udHJvbFNpZGViYXI6IHRydWUsXG4gIGNvbnRyb2xTaWRlYmFyT3B0aW9uczoge1xuICAgIC8vV2hpY2ggYnV0dG9uIHNob3VsZCB0cmlnZ2VyIHRoZSBvcGVuL2Nsb3NlIGV2ZW50XG4gICAgdG9nZ2xlQnRuU2VsZWN0b3I6IFwiW2RhdGEtdG9nZ2xlPSdjb250cm9sLXNpZGViYXInXVwiLFxuICAgIC8vVGhlIHNpZGViYXIgc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogXCIuY29udHJvbC1zaWRlYmFyXCIsXG4gICAgLy9FbmFibGUgc2xpZGUgb3ZlciBjb250ZW50XG4gICAgc2xpZGU6IHRydWVcbiAgfSxcbiAgLy9Cb3ggV2lkZ2V0IFBsdWdpbi4gRW5hYmxlIHRoaXMgcGx1Z2luXG4gIC8vdG8gYWxsb3cgYm94ZXMgdG8gYmUgY29sbGFwc2VkIGFuZC9vciByZW1vdmVkXG4gIGVuYWJsZUJveFdpZGdldDogdHJ1ZSxcbiAgLy9Cb3ggV2lkZ2V0IHBsdWdpbiBvcHRpb25zXG4gIGJveFdpZGdldE9wdGlvbnM6IHtcbiAgICBib3hXaWRnZXRJY29uczoge1xuICAgICAgLy9Db2xsYXBzZSBpY29uXG4gICAgICBjb2xsYXBzZTogJ2ZhLW1pbnVzJyxcbiAgICAgIC8vT3BlbiBpY29uXG4gICAgICBvcGVuOiAnZmEtcGx1cycsXG4gICAgICAvL1JlbW92ZSBpY29uXG4gICAgICByZW1vdmU6ICdmYS10aW1lcydcbiAgICB9LFxuICAgIGJveFdpZGdldFNlbGVjdG9yczoge1xuICAgICAgLy9SZW1vdmUgYnV0dG9uIHNlbGVjdG9yXG4gICAgICByZW1vdmU6ICdbZGF0YS13aWRnZXQ9XCJyZW1vdmVcIl0nLFxuICAgICAgLy9Db2xsYXBzZSBidXR0b24gc2VsZWN0b3JcbiAgICAgIGNvbGxhcHNlOiAnW2RhdGEtd2lkZ2V0PVwiY29sbGFwc2VcIl0nXG4gICAgfVxuICB9LFxuICAvL0RpcmVjdCBDaGF0IHBsdWdpbiBvcHRpb25zXG4gIGRpcmVjdENoYXQ6IHtcbiAgICAvL0VuYWJsZSBkaXJlY3QgY2hhdCBieSBkZWZhdWx0XG4gICAgZW5hYmxlOiB0cnVlLFxuICAgIC8vVGhlIGJ1dHRvbiB0byBvcGVuIGFuZCBjbG9zZSB0aGUgY2hhdCBjb250YWN0cyBwYW5lXG4gICAgY29udGFjdFRvZ2dsZVNlbGVjdG9yOiAnW2RhdGEtd2lkZ2V0PVwiY2hhdC1wYW5lLXRvZ2dsZVwiXSdcbiAgfSxcbiAgLy9EZWZpbmUgdGhlIHNldCBvZiBjb2xvcnMgdG8gdXNlIGdsb2JhbGx5IGFyb3VuZCB0aGUgd2Vic2l0ZVxuICBjb2xvcnM6IHtcbiAgICBsaWdodEJsdWU6IFwiIzNjOGRiY1wiLFxuICAgIHJlZDogXCIjZjU2OTU0XCIsXG4gICAgZ3JlZW46IFwiIzAwYTY1YVwiLFxuICAgIGFxdWE6IFwiIzAwYzBlZlwiLFxuICAgIHllbGxvdzogXCIjZjM5YzEyXCIsXG4gICAgYmx1ZTogXCIjMDA3M2I3XCIsXG4gICAgbmF2eTogXCIjMDAxRjNGXCIsXG4gICAgdGVhbDogXCIjMzlDQ0NDXCIsXG4gICAgb2xpdmU6IFwiIzNEOTk3MFwiLFxuICAgIGxpbWU6IFwiIzAxRkY3MFwiLFxuICAgIG9yYW5nZTogXCIjRkY4NTFCXCIsXG4gICAgZnVjaHNpYTogXCIjRjAxMkJFXCIsXG4gICAgcHVycGxlOiBcIiM4RTI0QUFcIixcbiAgICBtYXJvb246IFwiI0Q4MUI2MFwiLFxuICAgIGJsYWNrOiBcIiMyMjIyMjJcIixcbiAgICBncmF5OiBcIiNkMmQ2ZGVcIlxuICB9LFxuICAvL1RoZSBzdGFuZGFyZCBzY3JlZW4gc2l6ZXMgdGhhdCBib290c3RyYXAgdXNlcy5cbiAgLy9JZiB5b3UgY2hhbmdlIHRoZXNlIGluIHRoZSB2YXJpYWJsZXMubGVzcyBmaWxlLCBjaGFuZ2VcbiAgLy90aGVtIGhlcmUgdG9vLlxuICBzY3JlZW5TaXplczoge1xuICAgIHhzOiA0ODAsXG4gICAgc206IDc2OCxcbiAgICBtZDogOTkyLFxuICAgIGxnOiAxMjAwXG4gIH1cbn07XG5cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogLSBJbml0aWFsaXplIHRoZSBMYXlvdXRNYW5hZ2VyIE9iamVjdCAtXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBbGwgTGF5b3V0TWFuYWdlciBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIGJlbG93LlxuICovXG4kLkxheW91dE1hbmFnZXIuX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvKiBMYXlvdXRcbiAgICogPT09PT09XG4gICAqIEZpeGVzIHRoZSBsYXlvdXQgaGVpZ2h0IGluIGNhc2UgbWluLWhlaWdodCBmYWlscy5cbiAgICpcbiAgICogQHR5cGUgT2JqZWN0XG4gICAqIEB1c2FnZSAkLkxheW91dE1hbmFnZXIubGF5b3V0LmFjdGl2YXRlKClcbiAgICogICAgICAgICQuTGF5b3V0TWFuYWdlci5sYXlvdXQuZml4KClcbiAgICogICAgICAgICQuTGF5b3V0TWFuYWdlci5sYXlvdXQuZml4U2lkZWJhcigpXG4gICAqL1xuICAkLkxheW91dE1hbmFnZXIubGF5b3V0ID0ge1xuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgX3RoaXMuZml4KCk7XG4gICAgICBfdGhpcy5maXhTaWRlYmFyKCk7XG4gICAgICAkKHdpbmRvdywgXCIud3JhcHBlclwiKS5yZXNpemUoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5maXgoKTtcbiAgICAgICAgX3RoaXMuZml4U2lkZWJhcigpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBmaXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vR2V0IHdpbmRvdyBoZWlnaHQgYW5kIHRoZSB3cmFwcGVyIGhlaWdodFxuICAgICAgdmFyIG5lZyA9ICQoJy5tYWluLWhlYWRlcicpLm91dGVySGVpZ2h0KCkgKyAkKCcubWFpbi1mb290ZXInKS5vdXRlckhlaWdodCgpO1xuICAgICAgdmFyIHdpbmRvd19oZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICAgICB2YXIgc2lkZWJhcl9oZWlnaHQgPSAkKFwiLnNpZGViYXJcIikuaGVpZ2h0KCk7XG4gICAgICAvL1NldCB0aGUgbWluLWhlaWdodCBvZiB0aGUgY29udGVudCBhbmQgc2lkZWJhciBiYXNlZCBvbiB0aGVcbiAgICAgIC8vdGhlIGhlaWdodCBvZiB0aGUgZG9jdW1lbnQuXG4gICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoXCJmaXhlZFwiKSkge1xuICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgd2luZG93X2hlaWdodCAtICQoJy5tYWluLWZvb3RlcicpLm91dGVySGVpZ2h0KCkpO1xuICAgICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdoZWlnaHQnLCB3aW5kb3dfaGVpZ2h0IC0gJCgnLm1haW4tZm9vdGVyJykub3V0ZXJIZWlnaHQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcG9zdFNldFdpZHRoO1xuICAgICAgICBpZiAod2luZG93X2hlaWdodCA+PSBzaWRlYmFyX2hlaWdodCkge1xuICAgICAgICAgICQoXCIuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZVwiKS5jc3MoJ21pbi1oZWlnaHQnLCB3aW5kb3dfaGVpZ2h0IC0gbmVnKTtcbiAgICAgICAgICBwb3N0U2V0V2lkdGggPSB3aW5kb3dfaGVpZ2h0IC0gbmVnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQoXCIuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZVwiKS5jc3MoJ21pbi1oZWlnaHQnLCBzaWRlYmFyX2hlaWdodCk7XG4gICAgICAgICAgcG9zdFNldFdpZHRoID0gc2lkZWJhcl9oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy9GaXggZm9yIHRoZSBjb250cm9sIHNpZGViYXIgaGVpZ2h0XG4gICAgICAgIHZhciBjb250cm9sU2lkZWJhciA9ICQoJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuY29udHJvbFNpZGViYXJPcHRpb25zLnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb250cm9sU2lkZWJhciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGlmIChjb250cm9sU2lkZWJhci5oZWlnaHQoKSA+IHBvc3RTZXRXaWR0aClcbiAgICAgICAgICAgICQoXCIuY29udGVudC13cmFwcGVyLCAucmlnaHQtc2lkZVwiKS5jc3MoJ21pbi1oZWlnaHQnLCBjb250cm9sU2lkZWJhci5oZWlnaHQoKSk7XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0sXG4gICAgZml4U2lkZWJhcjogZnVuY3Rpb24gKCkge1xuICAgICAgLy9NYWtlIHN1cmUgdGhlIGJvZHkgdGFnIGhhcyB0aGUgLmZpeGVkIGNsYXNzXG4gICAgICBpZiAoISQoXCJib2R5XCIpLmhhc0NsYXNzKFwiZml4ZWRcIikpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkLmZuLnNsaW1TY3JvbGwgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkKFwiLnNpZGViYXJcIikuc2xpbVNjcm9sbCh7ZGVzdHJveTogdHJ1ZX0pLmhlaWdodChcImF1dG9cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgJC5mbi5zbGltU2Nyb2xsID09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKFwiRXJyb3I6IHRoZSBmaXhlZCBsYXlvdXQgcmVxdWlyZXMgdGhlIHNsaW1zY3JvbGwgcGx1Z2luIVwiKTtcbiAgICAgIH1cbiAgICAgIC8vRW5hYmxlIHNsaW1zY3JvbGwgZm9yIGZpeGVkIGxheW91dFxuICAgICAgaWYgKCQuTGF5b3V0TWFuYWdlci5vcHRpb25zLnNpZGViYXJTbGltU2Nyb2xsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJC5mbi5zbGltU2Nyb2xsICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy9EZXN0cm95IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICQoXCIuc2lkZWJhclwiKS5zbGltU2Nyb2xsKHtkZXN0cm95OiB0cnVlfSkuaGVpZ2h0KFwiYXV0b1wiKTtcbiAgICAgICAgICAvL0FkZCBzbGltc2Nyb2xsXG4gICAgICAgICAgJChcIi5zaWRlYmFyXCIpLnNsaW1zY3JvbGwoe1xuICAgICAgICAgICAgaGVpZ2h0OiAoJCh3aW5kb3cpLmhlaWdodCgpIC0gJChcIi5tYWluLWhlYWRlclwiKS5oZWlnaHQoKSkgKyBcInB4XCIsXG4gICAgICAgICAgICBjb2xvcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuNylcIixcbiAgICAgICAgICAgIHNpemU6IFwiM3B4XCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAkKFwiLnNpZGViYXJcIikuY3NzKHsnaGVpZ2h0JzogKCQod2luZG93KS5oZWlnaHQoKSAtICQoXCIubWFpbi1oZWFkZXJcIikuaGVpZ2h0KCkpICsgXCJweFwifSlcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLyokKFwiLnNpZGViYXIgbGkgYVwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgIHZhciBjaGVja0VsZW1lbnQgPSAkdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmICgoY2hlY2tFbGVtZW50LmlzKCcudHJlZXZpZXctbWVudScpKSAmJiAoIWNoZWNrRWxlbWVudC5pcygnOnZpc2libGUnKSkpIHtcbiAgICAgICAgICAvL0dldCB0aGUgcGFyZW50IG1lbnVcbiAgICAgICAgICB2YXIgcGFyZW50ID0gJHRoaXMucGFyZW50cygndWwnKS5maXJzdCgpO1xuICAgICAgICAgIHZhciBwYXJlbnRfbGkgPSAkdGhpcy5wYXJlbnQoXCJsaVwiKTtcbiAgICAgICAgICB2YXIgbGlfc2libGluZ3MgPSBwYXJlbnRfbGkuc2libGluZ3MoKTtcbiAgICAgICAgICB2YXIgcGFyZW50X2ZpbmRfYWN0aXZlO1xuICAgICAgICAgIHZhciBzaWRlYmFyX2NvbnRlbnRfaGVpZ2h0ID0gcGFyZW50LmhlaWdodCgpIC0gcGFyZW50LmZpbmQoJ2xpLmhlYWRlcicpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgdmFyIHRyZWV2aWV3SGVpZ2h0ID0gcGFyZW50X2xpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgbGlfc2libGluZ3Mubm90KCcuaGVhZGVyJykuZWFjaChmdW5jdGlvbihpbmRleCwgZWwpIHtcbiAgICAgICAgICAgICAgICAgIHRyZWV2aWV3SGVpZ2h0Kz0kKGVsKS5maW5kKCdhJykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgc2VjdGlvbl9oZWlnaHQgPSAoc2lkZWJhcl9jb250ZW50X2hlaWdodCAtIHRyZWV2aWV3SGVpZ2h0KTtcbiAgICAgICAgICBjaGVja0VsZW1lbnQuY3NzKHtcbiAgICAgICAgICAgICdoZWlnaHQnOiBzZWN0aW9uX2hlaWdodCArICdweCcsXG4gICAgICAgICAgICAnbWF4LWhlaWdodCc6c2VjdGlvbl9oZWlnaHQgKyAncHgnLFxuICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnYXV0bydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7Ki9cbiAgICAgIFxuICAgIH1cbiAgICBcbiAgfTtcblxuICAvKiBQdXNoTWVudSgpXG4gICAqID09PT09PT09PT1cbiAgICogQWRkcyB0aGUgcHVzaCBtZW51IGZ1bmN0aW9uYWxpdHkgdG8gdGhlIHNpZGViYXIuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uXG4gICAqIEB1c2FnZTogJC5MYXlvdXRNYW5hZ2VyLnB1c2hNZW51KFwiW2RhdGEtdG9nZ2xlPSdvZmZjYW52YXMnXVwiKVxuICAgKi9cbiAgJC5MYXlvdXRNYW5hZ2VyLnB1c2hNZW51ID0ge1xuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAodG9nZ2xlQnRuKSB7XG4gICAgICAvL0dldCB0aGUgc2NyZWVuIHNpemVzXG4gICAgICB2YXIgc2NyZWVuU2l6ZXMgPSAkLkxheW91dE1hbmFnZXIub3B0aW9ucy5zY3JlZW5TaXplcztcblxuICAgICAgLy9FbmFibGUgc2lkZWJhciB0b2dnbGVcbiAgICAgICQodG9nZ2xlQnRuKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy9FbmFibGUgc2lkZWJhciBwdXNoIG1lbnVcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gKHNjcmVlblNpemVzLnNtIC0gMSkpIHtcbiAgICAgICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKSkge1xuICAgICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKS50cmlnZ2VyKCdleHBhbmRlZC5wdXNoTWVudScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpLnRyaWdnZXIoJ2NvbGxhcHNlZC5wdXNoTWVudScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL0hhbmRsZSBzaWRlYmFyIHB1c2ggbWVudSBmb3Igc21hbGwgc2NyZWVuc1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoJChcImJvZHlcIikuaGFzQ2xhc3MoJ3NpZGViYXItb3BlbicpKSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1vcGVuJykucmVtb3ZlQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKS50cmlnZ2VyKCdjb2xsYXBzZWQucHVzaE1lbnUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoJ3NpZGViYXItb3BlbicpLnRyaWdnZXIoJ2V4cGFuZGVkLnB1c2hNZW51Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLyokKFwiLmNvbnRlbnQtd3JhcHBlclwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vRW5hYmxlIGhpZGUgbWVudSB3aGVuIGNsaWNraW5nIG9uIHRoZSBjb250ZW50LXdyYXBwZXIgb24gc21hbGwgc2NyZWVuc1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPD0gKHNjcmVlblNpemVzLnNtIC0gMSkgJiYgJChcImJvZHlcIikuaGFzQ2xhc3MoXCJzaWRlYmFyLW9wZW5cIikpIHtcbiAgICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcygnc2lkZWJhci1vcGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pOyovXG5cbiAgICAgIC8vRW5hYmxlIGV4cGFuZCBvbiBob3ZlciBmb3Igc2lkZWJhciBtaW5pXG4gICAgICBpZiAoJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuc2lkZWJhckV4cGFuZE9uSG92ZXIgfHwgKCQoJ2JvZHknKS5oYXNDbGFzcygnZml4ZWQnKSAmJiAkKCdib2R5JykuaGFzQ2xhc3MoJ3NpZGViYXItbWluaScpKSkge1xuICAgICAgICB0aGlzLmV4cGFuZE9uSG92ZXIoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4cGFuZE9uSG92ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgc2NyZWVuV2lkdGggPSAkLkxheW91dE1hbmFnZXIub3B0aW9ucy5zY3JlZW5TaXplcy5zbSAtIDE7XG4gICAgICAvL0V4cGFuZCBzaWRlYmFyIG9uIGhvdmVyXG4gICAgICAkKCcubWFpbi1zaWRlYmFyJykuaG92ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdzaWRlYmFyLW1pbmknKSAmJiAkKFwiYm9keVwiKS5oYXNDbGFzcygnc2lkZWJhci1jb2xsYXBzZScpICYmICQod2luZG93KS53aWR0aCgpID4gc2NyZWVuV2lkdGgpIHtcbiAgICAgICAgICBfdGhpcy5leHBhbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdzaWRlYmFyLW1pbmknKSAmJiAkKCdib2R5JykuaGFzQ2xhc3MoJ3NpZGViYXItZXhwYW5kZWQtb24taG92ZXInKSAmJiAkKHdpbmRvdykud2lkdGgoKSA+IHNjcmVlbldpZHRoKSB7XG4gICAgICAgICAgX3RoaXMuY29sbGFwc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBleHBhbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKCdzaWRlYmFyLWNvbGxhcHNlJykuYWRkQ2xhc3MoJ3NpZGViYXItZXhwYW5kZWQtb24taG92ZXInKTtcbiAgICB9LFxuICAgIGNvbGxhcHNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdzaWRlYmFyLWV4cGFuZGVkLW9uLWhvdmVyJykpIHtcbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdzaWRlYmFyLWV4cGFuZGVkLW9uLWhvdmVyJykuYWRkQ2xhc3MoJ3NpZGViYXItY29sbGFwc2UnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyogVHJlZSgpXG4gICAqID09PT09PVxuICAgKiBDb252ZXJ0cyB0aGUgc2lkZWJhciBpbnRvIGEgbXVsdGlsZXZlbFxuICAgKiB0cmVlIHZpZXcgbWVudS5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb25cbiAgICogQFVzYWdlOiAkLkxheW91dE1hbmFnZXIudHJlZSgnLnNpZGViYXInKVxuICAgKi9cbiAgJC5MYXlvdXRNYW5hZ2VyLnRyZWUgPSBmdW5jdGlvbiAobWVudSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFuaW1hdGlvblNwZWVkID0gJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuYW5pbWF0aW9uU3BlZWQ7XG4gICAgLy9jbGljayBldmVudCAvL1xuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsIG1lbnUgKyAnIGxpIGEnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAvL0dldCB0aGUgY2xpY2tlZCBsaW5rIGFuZCB0aGUgbmV4dCBlbGVtZW50XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgLy9pcyB0aGUgY29udGVudCBvZiB0aGUgXCJhY2NvcmRpb25cIiB1bCAvL1xuICAgICAgdmFyIGNoZWNrRWxlbWVudCA9ICR0aGlzLm5leHQoKTtcblxuICAgICAgLy9DaGVjayBpZiB0aGUgbmV4dCBlbGVtZW50IGlzIGEgbWVudSBhbmQgaXMgdmlzaWJsZVxuICAgICAgaWYgKChjaGVja0VsZW1lbnQuaXMoJy50cmVldmlldy1tZW51JykpICYmIChjaGVja0VsZW1lbnQuaXMoJzp2aXNpYmxlJykpKSB7XG4gICAgICAgIC8vQ2xvc2UgdGhlIG1lbnVcbiAgICAgICAgY2hlY2tFbGVtZW50LnNsaWRlVXAoYW5pbWF0aW9uU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjaGVja0VsZW1lbnQucGFyZW50KFwibGkudHJlZXZpZXdcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAgICAgY2hlY2tFbGVtZW50LnJlbW92ZUNsYXNzKCdtZW51LW9wZW4nKTtcbiAgICAgICAgICAvL0ZpeCB0aGUgbGF5b3V0IGluIGNhc2UgdGhlIHNpZGViYXIgc3RyZXRjaGVzIG92ZXIgdGhlIGhlaWdodCBvZiB0aGUgd2luZG93XG4gICAgICAgICAgLy9fdGhpcy5sYXlvdXQuZml4KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9XG4gICAgICAvL0lmIHRoZSBtZW51IGlzIG5vdCB2aXNpYmxlXG4gICAgICBlbHNlIGlmICgoY2hlY2tFbGVtZW50LmlzKCcudHJlZXZpZXctbWVudScpKSAmJiAoIWNoZWNrRWxlbWVudC5pcygnOnZpc2libGUnKSkpIHtcbiAgICAgICAgLy9HZXQgdGhlIHBhcmVudCBtZW51XG4gICAgICAgIHZhciBwYXJlbnQgPSAkdGhpcy5wYXJlbnRzKCd1bCcpLmZpcnN0KCk7XG4gICAgICAgIHZhciBwYXJlbnRfbGkgPSAkdGhpcy5wYXJlbnQoXCJsaVwiKTtcbiAgICAgICAgdmFyIGxpX3NpYmxpbmdzID0gcGFyZW50X2xpLnNpYmxpbmdzKCk7XG4gICAgICAgIHZhciBwYXJlbnRfZmluZF9hY3RpdmU7XG4gICAgICAgIHZhciBzaWRlYmFyX2NvbnRlbnRfaGVpZ2h0ID0gcGFyZW50LmhlaWdodCgpIC0gcGFyZW50LmZpbmQoJ2xpLmhlYWRlcicpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIHZhciB0cmVldmlld0hlaWdodCA9IHBhcmVudF9saS5vdXRlckhlaWdodCgpO1xuICAgICAgICBsaV9zaWJsaW5ncy5ub3QoJy5oZWFkZXInKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbCkge1xuICAgICAgICAgICAgICAgIHRyZWV2aWV3SGVpZ2h0Kz0kKGVsKS5maW5kKCdhJykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzZWN0aW9uX2hlaWdodCA9IChzaWRlYmFyX2NvbnRlbnRfaGVpZ2h0IC0gdHJlZXZpZXdIZWlnaHQpO1xuICAgICAgICAvKmNoZWNrRWxlbWVudC5jc3Moe1xuICAgICAgICAgICdoZWlnaHQnOiBzZWN0aW9uX2hlaWdodCArICdweCcsXG4gICAgICAgICAgJ21heC1oZWlnaHQnOnNlY3Rpb25faGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgICAvLydvdmVyZmxvdy15JzogJ2F1dG8nXG4gICAgICAgIH0pOyovXG4gICAgICAgIC8vQ2xvc2UgYWxsIG9wZW4gbWVudXMgd2l0aGluIHRoZSBwYXJlbnRcbiAgICAgICAgdmFyIHVsID0gcGFyZW50LmZpbmQoJ3VsLnRyZWV2aWV3LW1lbnU6dmlzaWJsZScpLnNsaWRlVXAoYW5pbWF0aW9uU3BlZWQpO1xuICAgICAgICAvL1JlbW92ZSB0aGUgbWVudS1vcGVuIGNsYXNzIGZyb20gdGhlIHBhcmVudFxuICAgICAgICB1bC5yZW1vdmVDbGFzcygnbWVudS1vcGVuJyk7XG4gICAgICAgIC8vR2V0IHRoZSBwYXJlbnQgbGlcbiAgICAgICAgLy9PcGVuIHRoZSB0YXJnZXQgbWVudSBhbmQgYWRkIHRoZSBtZW51LW9wZW4gY2xhc3NcbiAgICAgICAgY2hlY2tFbGVtZW50LnNsaWRlRG93bihhbmltYXRpb25TcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vQWRkIHRoZSBjbGFzcyBhY3RpdmUgdG8gdGhlIHBhcmVudCBsaVxuICAgICAgICAgIGNoZWNrRWxlbWVudC5hZGRDbGFzcygnbWVudS1vcGVuJyk7XG4gICAgICAgICAgcGFyZW50X2ZpbmRfYWN0aXZlID0gcGFyZW50LmZpbmQoJ2xpLnRyZWV2aWV3LmFjdGl2ZScpO1xuICAgICAgICAgIHBhcmVudF9maW5kX2FjdGl2ZS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgcGFyZW50X2xpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAvL0ZpeCB0aGUgbGF5b3V0IGluIGNhc2UgdGhlIHNpZGViYXIgc3RyZXRjaGVzIG92ZXIgdGhlIGhlaWdodCBvZiB0aGUgd2luZG93XG4gICAgICAgICAgX3RoaXMubGF5b3V0LmZpeCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vaWYgdGhpcyBpc24ndCBhIGxpbmssIHByZXZlbnQgdGhlIHBhZ2UgZnJvbSBiZWluZyByZWRpcmVjdGVkXG4gICAgICBpZiAoY2hlY2tFbGVtZW50LmlzKCcudHJlZXZpZXctbWVudScpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8kLkxheW91dE1hbmFnZXIubGF5b3V0LmZpeCgpO1xuICAgICAgLy8kLkxheW91dE1hbmFnZXIubGF5b3V0LmZpeFNpZGViYXIoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKiBDb250cm9sU2lkZWJhclxuICAgKiA9PT09PT09PT09PT09PVxuICAgKiBBZGRzIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIHJpZ2h0IHNpZGViYXJcbiAgICpcbiAgICogQHR5cGUgT2JqZWN0XG4gICAqIEB1c2FnZSAkLkxheW91dE1hbmFnZXIuY29udHJvbFNpZGViYXIuYWN0aXZhdGUob3B0aW9ucylcbiAgICovXG4gICQuTGF5b3V0TWFuYWdlci5mbG9hdEJhciA9ICQuTGF5b3V0TWFuYWdlci5jb250cm9sU2lkZWJhciA9IHtcbiAgICAvL2luc3RhbnRpYXRlIHRoZSBvYmplY3RcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgLy9HZXQgdGhlIG9iamVjdFxuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vVXBkYXRlIG9wdGlvbnNcbiAgICAgIHZhciBvID0gJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuY29udHJvbFNpZGViYXJPcHRpb25zO1xuICAgICAgLy9HZXQgdGhlIHNpZGViYXJcbiAgICAgIHZhciBzaWRlYmFyID0gJChvLnNlbGVjdG9yKTtcbiAgICAgIC8vVGhlIHRvZ2dsZSBidXR0b25cbiAgICAgIHZhciBidG4gPSAkKG8udG9nZ2xlQnRuU2VsZWN0b3IpO1xuXG4gICAgICAvL0xpc3RlbiB0byB0aGUgY2xpY2sgZXZlbnRcbiAgICAgIGJ0bi5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vSWYgdGhlIHNpZGViYXIgaXMgbm90IG9wZW5cbiAgICAgICAgaWYgKCFzaWRlYmFyLmhhc0NsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpICYmICEkKCdib2R5JykuaGFzQ2xhc3MoJ2NvbnRyb2wtc2lkZWJhci1vcGVuJykpIHtcbiAgICAgICAgICAvL09wZW4gdGhlIHNpZGViYXJcbiAgICAgICAgICBfdGhpcy5vcGVuKHNpZGViYXIsIG8uc2xpZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmNsb3NlKHNpZGViYXIsIG8uc2xpZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy9JZiB0aGUgYm9keSBoYXMgYSBib3hlZCBsYXlvdXQsIGZpeCB0aGUgc2lkZWJhciBiZyBwb3NpdGlvblxuICAgICAgdmFyIGJnID0gJChcIi5jb250cm9sLXNpZGViYXItYmdcIik7XG4gICAgICBfdGhpcy5fZml4KGJnKTtcblxuICAgICAgLy9JZiB0aGUgYm9keSBoYXMgYSBmaXhlZCBsYXlvdXQsIG1ha2UgdGhlIGNvbnRyb2wgc2lkZWJhciBmaXhlZFxuICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygnZml4ZWQnKSkge1xuICAgICAgICBfdGhpcy5fZml4Rm9yRml4ZWQoc2lkZWJhcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL0lmIHRoZSBjb250ZW50IGhlaWdodCBpcyBsZXNzIHRoYW4gdGhlIHNpZGViYXIncyBoZWlnaHQsIGZvcmNlIG1heCBoZWlnaHRcbiAgICAgICAgaWYgKCQoJy5jb250ZW50LXdyYXBwZXIsIC5yaWdodC1zaWRlJykuaGVpZ2h0KCkgPCBzaWRlYmFyLmhlaWdodCgpKSB7XG4gICAgICAgICAgX3RoaXMuX2ZpeEZvckNvbnRlbnQoc2lkZWJhcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vT3BlbiB0aGUgY29udHJvbCBzaWRlYmFyXG4gICAgb3BlbjogZnVuY3Rpb24gKHNpZGViYXIsIHNsaWRlKSB7XG4gICAgICAvL1NsaWRlIG92ZXIgY29udGVudFxuICAgICAgaWYgKHNsaWRlKSB7XG4gICAgICAgIHNpZGViYXIuYWRkQ2xhc3MoJ2NvbnRyb2wtc2lkZWJhci1vcGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL1B1c2ggdGhlIGNvbnRlbnQgYnkgYWRkaW5nIHRoZSBvcGVuIGNsYXNzIHRvIHRoZSBib2R5IGluc3RlYWRcbiAgICAgICAgLy9vZiB0aGUgc2lkZWJhciBpdHNlbGZcbiAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdjb250cm9sLXNpZGViYXItb3BlbicpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy9DbG9zZSB0aGUgY29udHJvbCBzaWRlYmFyXG4gICAgY2xvc2U6IGZ1bmN0aW9uIChzaWRlYmFyLCBzbGlkZSkge1xuICAgICAgaWYgKHNsaWRlKSB7XG4gICAgICAgIHNpZGViYXIucmVtb3ZlQ2xhc3MoJ2NvbnRyb2wtc2lkZWJhci1vcGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2NvbnRyb2wtc2lkZWJhci1vcGVuJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfZml4OiBmdW5jdGlvbiAoc2lkZWJhcikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGlmICgkKFwiYm9keVwiKS5oYXNDbGFzcygnbGF5b3V0LWJveGVkJykpIHtcbiAgICAgICAgc2lkZWJhci5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgICAgIHNpZGViYXIuaGVpZ2h0KCQoXCIud3JhcHBlclwiKS5oZWlnaHQoKSk7XG4gICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLl9maXgoc2lkZWJhcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2lkZWJhci5jc3Moe1xuICAgICAgICAgICdwb3NpdGlvbic6ICdmaXhlZCcsXG4gICAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9maXhGb3JGaXhlZDogZnVuY3Rpb24gKHNpZGViYXIpIHtcbiAgICAgIHNpZGViYXIuY3NzKHtcbiAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICAgJ21heC1oZWlnaHQnOiAnMTAwJScsXG4gICAgICAgIC8vJ292ZXJmbG93JzogJ2F1dG8nLCAgLy8gbm9uIGRvdnJlYmJlIGZhcmUgZGFubmkgcXVlc3RvIGNvbW1lbnRvLCBzZXJ2ZSBwZXIgbm9uIG5hc2NvbmRlcmUgaWwgcHVsc2FudGkgXCJDaGl1ZGkgcGFubmVsbG9cIlxuICAgICAgICAncGFkZGluZy1ib3R0b20nOiAnNTBweCdcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgX2ZpeEZvckNvbnRlbnQ6IGZ1bmN0aW9uIChzaWRlYmFyKSB7XG4gICAgICAkKFwiLmNvbnRlbnQtd3JhcHBlciwgLnJpZ2h0LXNpZGVcIikuY3NzKCdtaW4taGVpZ2h0Jywgc2lkZWJhci5oZWlnaHQoKSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIEJveFdpZGdldFxuICAgKiA9PT09PT09PT1cbiAgICogQm94V2lkZ2V0IGlzIGEgcGx1Z2luIHRvIGhhbmRsZSBjb2xsYXBzaW5nIGFuZFxuICAgKiByZW1vdmluZyBib3hlcyBmcm9tIHRoZSBzY3JlZW4uXG4gICAqXG4gICAqIEB0eXBlIE9iamVjdFxuICAgKiBAdXNhZ2UgJC5MYXlvdXRNYW5hZ2VyLmJveFdpZGdldC5hY3RpdmF0ZSgpXG4gICAqICAgICAgICBTZXQgYWxsIHlvdXIgb3B0aW9ucyBpbiB0aGUgbWFpbiAkLkxheW91dE1hbmFnZXIub3B0aW9ucyBvYmplY3RcbiAgICovXG4gICQuTGF5b3V0TWFuYWdlci5ib3hXaWRnZXQgPSB7XG4gICAgc2VsZWN0b3JzOiAkLkxheW91dE1hbmFnZXIub3B0aW9ucy5ib3hXaWRnZXRPcHRpb25zLmJveFdpZGdldFNlbGVjdG9ycyxcbiAgICBpY29uczogJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuYm94V2lkZ2V0T3B0aW9ucy5ib3hXaWRnZXRJY29ucyxcbiAgICBhbmltYXRpb25TcGVlZDogJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnMuYW5pbWF0aW9uU3BlZWQsXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uIChfYm94KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYgKCFfYm94KSB7XG4gICAgICAgIF9ib3ggPSBkb2N1bWVudDsgLy8gYWN0aXZhdGUgYWxsIGJveGVzIHBlciBkZWZhdWx0XG4gICAgICB9XG4gICAgICAvL0xpc3RlbiBmb3IgY29sbGFwc2UgZXZlbnQgdHJpZ2dlcnNcbiAgICAgICQoX2JveCkub24oJ2NsaWNrJywgX3RoaXMuc2VsZWN0b3JzLmNvbGxhcHNlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLmNvbGxhcHNlKCQodGhpcykpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vTGlzdGVuIGZvciByZW1vdmUgZXZlbnQgdHJpZ2dlcnNcbiAgICAgICQoX2JveCkub24oJ2NsaWNrJywgX3RoaXMuc2VsZWN0b3JzLnJlbW92ZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5yZW1vdmUoJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbGxhcHNlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vRmluZCB0aGUgYm94IHBhcmVudFxuICAgICAgdmFyIGJveCA9IGVsZW1lbnQucGFyZW50cyhcIi5ib3hcIikuZmlyc3QoKTtcbiAgICAgIC8vRmluZCB0aGUgYm9keSBhbmQgdGhlIGZvb3RlclxuICAgICAgdmFyIGJveF9jb250ZW50ID0gYm94LmZpbmQoXCI+IC5ib3gtYm9keSwgPiAuYm94LWZvb3RlciwgPiBmb3JtICA+LmJveC1ib2R5LCA+IGZvcm0gPiAuYm94LWZvb3RlclwiKTtcbiAgICAgIGlmICghYm94Lmhhc0NsYXNzKFwiY29sbGFwc2VkLWJveFwiKSkge1xuICAgICAgICAvL0NvbnZlcnQgbWludXMgaW50byBwbHVzXG4gICAgICAgIGVsZW1lbnQuZmluZChcIi5idG4tY29sbGFwc2VyXCIpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKF90aGlzLmljb25zLmNvbGxhcHNlKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhfdGhpcy5pY29ucy5vcGVuKTtcbiAgICAgICAgLy9IaWRlIHRoZSBjb250ZW50XG4gICAgICAgIGJveF9jb250ZW50LnNsaWRlVXAoX3RoaXMuYW5pbWF0aW9uU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBib3guYWRkQ2xhc3MoXCJjb2xsYXBzZWQtYm94XCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vQ29udmVydCBwbHVzIGludG8gbWludXNcbiAgICAgICAgZWxlbWVudC5maW5kKFwiLmJ0bi1jb2xsYXBzZXJcIilcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoX3RoaXMuaWNvbnMub3BlbilcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMuaWNvbnMuY29sbGFwc2UpO1xuICAgICAgICAvL1Nob3cgdGhlIGNvbnRlbnRcbiAgICAgICAgYm94X2NvbnRlbnQuc2xpZGVEb3duKF90aGlzLmFuaW1hdGlvblNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYm94LnJlbW92ZUNsYXNzKFwiY29sbGFwc2VkLWJveFwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAvL0ZpbmQgdGhlIGJveCBwYXJlbnRcbiAgICAgIHZhciBib3ggPSBlbGVtZW50LnBhcmVudHMoXCIuYm94XCIpLmZpcnN0KCk7XG4gICAgICBib3guc2xpZGVVcCh0aGlzLmFuaW1hdGlvblNwZWVkKTtcbiAgICB9XG4gIH07XG4gIFxuICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyO1xufTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAtIEN1c3RvbSBQbHVnaW5zIC1cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLVxuICogQWxsIGN1c3RvbSBwbHVnaW5zIGFyZSBkZWZpbmVkIGJlbG93LlxuICovXG5cbi8qXG4gKiBCT1ggUkVGUkVTSCBCVVRUT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBpcyBhIGN1c3RvbSBwbHVnaW4gdG8gdXNlIHdpdGggdGhlIGNvbXBvbmVudCBCT1guIEl0IGFsbG93cyB5b3UgdG8gYWRkXG4gKiBhIHJlZnJlc2ggYnV0dG9uIHRvIHRoZSBib3guIEl0IGNvbnZlcnRzIHRoZSBib3gncyBzdGF0ZSB0byBhIGxvYWRpbmcgc3RhdGUuXG4gKlxuICogQHR5cGUgcGx1Z2luXG4gKiBAdXNhZ2UgJChcIiNib3gtd2lkZ2V0XCIpLmJveFJlZnJlc2goIG9wdGlvbnMgKTtcbiAqL1xuJC5MYXlvdXRNYW5hZ2VyLmFkZFJlZnJlc2hCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICQuZm4uYm94UmVmcmVzaCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICAvLyBSZW5kZXIgb3B0aW9uc1xuICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcbiAgICAgIC8vUmVmcmVzaCBidXR0b24gc2VsZWN0b3JcbiAgICAgIHRyaWdnZXI6IFwiLnJlZnJlc2gtYnRuXCIsXG4gICAgICAvL0ZpbGUgc291cmNlIHRvIGJlIGxvYWRlZCAoZS5nOiBhamF4L3NyYy5waHApXG4gICAgICBzb3VyY2U6IFwiXCIsXG4gICAgICAvL0NhbGxiYWNrc1xuICAgICAgb25Mb2FkU3RhcnQ6IGZ1bmN0aW9uIChib3gpIHtcbiAgICAgICAgcmV0dXJuIGJveDtcbiAgICAgIH0sIC8vUmlnaHQgYWZ0ZXIgdGhlIGJ1dHRvbiBoYXMgYmVlbiBjbGlja2VkXG4gICAgICBvbkxvYWREb25lOiBmdW5jdGlvbiAoYm94KSB7XG4gICAgICAgIHJldHVybiBib3g7XG4gICAgICB9IC8vV2hlbiB0aGUgc291cmNlIGhhcyBiZWVuIGxvYWRlZFxuXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICAvL1RoZSBvdmVybGF5XG4gICAgdmFyIG92ZXJsYXkgPSAkKCc8ZGl2IGNsYXNzPVwib3ZlcmxheVwiPjxkaXYgY2xhc3M9XCJmYSBmYS1yZWZyZXNoIGZhLXNwaW5cIj48L2Rpdj48L2Rpdj4nKTtcblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgLy9pZiBhIHNvdXJjZSBpcyBzcGVjaWZpZWRcbiAgICAgIGlmIChzZXR0aW5ncy5zb3VyY2UgPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKFwiUGxlYXNlIHNwZWNpZnkgYSBzb3VyY2UgZmlyc3QgLSBib3hSZWZyZXNoKClcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy90aGUgYm94XG4gICAgICB2YXIgYm94ID0gJCh0aGlzKTtcbiAgICAgIC8vdGhlIGJ1dHRvblxuICAgICAgdmFyIHJCdG4gPSBib3guZmluZChzZXR0aW5ncy50cmlnZ2VyKS5maXJzdCgpO1xuXG4gICAgICAvL09uIHRyaWdnZXIgY2xpY2tcbiAgICAgIHJCdG4ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvL0FkZCBsb2FkaW5nIG92ZXJsYXlcbiAgICAgICAgc3RhcnQoYm94KTtcblxuICAgICAgICAvL1BlcmZvcm0gYWpheCBjYWxsXG4gICAgICAgIGJveC5maW5kKFwiLmJveC1ib2R5XCIpLmxvYWQoc2V0dGluZ3Muc291cmNlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZG9uZShib3gpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gc3RhcnQoYm94KSB7XG4gICAgICAvL0FkZCBvdmVybGF5IGFuZCBsb2FkaW5nIGltZ1xuICAgICAgYm94LmFwcGVuZChvdmVybGF5KTtcblxuICAgICAgc2V0dGluZ3Mub25Mb2FkU3RhcnQuY2FsbChib3gpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvbmUoYm94KSB7XG4gICAgICAvL1JlbW92ZSBvdmVybGF5IGFuZCBsb2FkaW5nIGltZ1xuICAgICAgYm94LmZpbmQob3ZlcmxheSkucmVtb3ZlKCk7XG5cbiAgICAgIHNldHRpbmdzLm9uTG9hZERvbmUuY2FsbChib3gpO1xuICAgIH1cblxuICB9O1xuICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyO1xufTtcblxuLypcbiAqIEVYUExJQ0lUIEJPWCBBQ1RJVkFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBpcyBhIGN1c3RvbSBwbHVnaW4gdG8gdXNlIHdpdGggdGhlIGNvbXBvbmVudCBCT1guIEl0IGFsbG93cyB5b3UgdG8gYWN0aXZhdGVcbiAqIGEgYm94IGluc2VydGVkIGluIHRoZSBET00gYWZ0ZXIgdGhlIGFwcC5qcyB3YXMgbG9hZGVkLlxuICpcbiAqIEB0eXBlIHBsdWdpblxuICogQHVzYWdlICQoXCIjYm94LXdpZGdldFwiKS5hY3RpdmF0ZUJveCgpO1xuICovXG4kLkxheW91dE1hbmFnZXIuYWN0aXZhdGVCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAkLmZuLmFjdGl2YXRlQm94ID0gZnVuY3Rpb24gKCkge1xuICAgICQuTGF5b3V0TWFuYWdlci5ib3hXaWRnZXQuYWN0aXZhdGUodGhpcyk7XG4gIH07XG4gIFxuICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyO1xufTtcblxuLypcbiAqIFRPRE8gTElTVCBDVVNUT00gUExVR0lOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGhpcyBwbHVnaW4gZGVwZW5kcyBvbiBpQ2hlY2sgcGx1Z2luIGZvciBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzXG4gKlxuICogQHR5cGUgcGx1Z2luXG4gKiBAdXNhZ2UgJChcIiN0b2RvLXdpZGdldFwiKS50b2RvbGlzdCggb3B0aW9ucyApO1xuICovXG5cbiQuTGF5b3V0TWFuYWdlci5saXN0Q3VzdG9tUGx1Z2luID0gZnVuY3Rpb24gKCkge1xuXG5cdCAgJ3VzZSBzdHJpY3QnO1xuXG5cdCAgJC5mbi50b2RvbGlzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgICAvLyBSZW5kZXIgb3B0aW9uc1xuXHQgICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe1xuXHQgICAgICAvL1doZW4gdGhlIHVzZXIgY2hlY2tzIHRoZSBpbnB1dFxuXHQgICAgICBvbkNoZWNrOiBmdW5jdGlvbiAoZWxlKSB7XG5cdCAgICAgICAgcmV0dXJuIGVsZTtcblx0ICAgICAgfSxcblx0ICAgICAgLy9XaGVuIHRoZSB1c2VyIHVuY2hlY2tzIHRoZSBpbnB1dFxuXHQgICAgICBvblVuY2hlY2s6IGZ1bmN0aW9uIChlbGUpIHtcblx0ICAgICAgICByZXR1cm4gZWxlO1xuXHQgICAgICB9XG5cdCAgICB9LCBvcHRpb25zKTtcblxuXHQgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cblx0ICAgICAgaWYgKHR5cGVvZiAkLmZuLmlDaGVjayAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICQoJ2lucHV0JywgdGhpcykub24oJ2lmQ2hlY2tlZCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBlbGUgPSAkKHRoaXMpLnBhcmVudHMoXCJsaVwiKS5maXJzdCgpO1xuXHQgICAgICAgICAgZWxlLnRvZ2dsZUNsYXNzKFwiZG9uZVwiKTtcblx0ICAgICAgICAgIHNldHRpbmdzLm9uQ2hlY2suY2FsbChlbGUpO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgJCgnaW5wdXQnLCB0aGlzKS5vbignaWZVbmNoZWNrZWQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgZWxlID0gJCh0aGlzKS5wYXJlbnRzKFwibGlcIikuZmlyc3QoKTtcblx0ICAgICAgICAgIGVsZS50b2dnbGVDbGFzcyhcImRvbmVcIik7XG5cdCAgICAgICAgICBzZXR0aW5ncy5vblVuY2hlY2suY2FsbChlbGUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICQoJ2lucHV0JywgdGhpcykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBlbGUgPSAkKHRoaXMpLnBhcmVudHMoXCJsaVwiKS5maXJzdCgpO1xuXHQgICAgICAgICAgZWxlLnRvZ2dsZUNsYXNzKFwiZG9uZVwiKTtcblx0ICAgICAgICAgIGlmICgkKCdpbnB1dCcsIGVsZSkuaXMoXCI6Y2hlY2tlZFwiKSkge1xuXHQgICAgICAgICAgICBzZXR0aW5ncy5vbkNoZWNrLmNhbGwoZWxlKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHNldHRpbmdzLm9uVW5jaGVjay5jYWxsKGVsZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH07XG5cdCAgcmV0dXJuICQuTGF5b3V0TWFuYWdlcjtcblx0fTtcblx0XG5cdC8qIC0tLS0tLS0tLS0tLS0tLS0tLVxuXHQgKiAtIEltcGxlbWVudGF0aW9uIC1cblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAqIFRoZSBuZXh0IGJsb2NrIG9mIGNvZGUgaW1wbGVtZW50cyBMYXlvdXRNYW5hZ2VyJ3Ncblx0ICogZnVuY3Rpb25zIGFuZCBwbHVnaW5zIGFzIHNwZWNpZmllZCBieSB0aGVcblx0ICogb3B0aW9ucyBhYm92ZS5cblx0ICovXG5cdCQuTGF5b3V0TWFuYWdlci5zZXR1cCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0ICBcInVzZSBzdHJpY3RcIjtcblxuXHQgIC8vRml4IGZvciBJRSBwYWdlIHRyYW5zaXRpb25zXG5cdCAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJob2xkLXRyYW5zaXRpb25cIik7XG5cblx0ICAvL0V4dGVuZCBvcHRpb25zIGlmIGV4dGVybmFsIG9wdGlvbnMgZXhpc3Rcblx0ICBpZiAodHlwZW9mIExheW91dE1hbmFnZXJPcHRpb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAkLmV4dGVuZCh0cnVlLFxuXHQgICAgICAgICAgICAkLkxheW91dE1hbmFnZXIub3B0aW9ucyxcblx0ICAgICAgICAgICAgTGF5b3V0TWFuYWdlck9wdGlvbnMpO1xuXHQgIH1cblxuXHQgIC8vRWFzeSBhY2Nlc3MgdG8gb3B0aW9uc1xuXHQgIHZhciBvID0gJC5MYXlvdXRNYW5hZ2VyLm9wdGlvbnM7XG5cblx0ICAvL1NldCB1cCB0aGUgb2JqZWN0XG5cdCAgJC5MYXlvdXRNYW5hZ2VyLl9pbml0KCk7XG5cblx0ICAvL0FjdGl2YXRlIHRoZSBsYXlvdXQgbWFrZXJcblx0ICAkLkxheW91dE1hbmFnZXIubGF5b3V0LmFjdGl2YXRlKCk7XG5cblx0ICAvL0VuYWJsZSBzaWRlYmFyIHRyZWUgdmlldyBjb250cm9sc1xuXHQgICQuTGF5b3V0TWFuYWdlci50cmVlKCcuc2lkZWJhcicpO1xuXG5cdCAgLy9FbmFibGUgY29udHJvbCBzaWRlYmFyXG5cdCAgaWYgKG8uZW5hYmxlQ29udHJvbFNpZGViYXIpIHtcblx0ICAgICQuTGF5b3V0TWFuYWdlci5jb250cm9sU2lkZWJhci5hY3RpdmF0ZSgpO1xuXHQgIH1cblxuXHQgIC8vQWRkIHNsaW1zY3JvbGwgdG8gbmF2YmFyIGRyb3Bkb3duXG5cdCAgaWYgKG8ubmF2YmFyTWVudVNsaW1zY3JvbGwgJiYgdHlwZW9mICQuZm4uc2xpbXNjcm9sbCAhPSAndW5kZWZpbmVkJykge1xuXHQgICAgJChcIi5uYXZiYXIgLm1lbnVcIikuc2xpbXNjcm9sbCh7XG5cdCAgICAgIGhlaWdodDogby5uYXZiYXJNZW51SGVpZ2h0LFxuXHQgICAgICBhbHdheXNWaXNpYmxlOiBmYWxzZSxcblx0ICAgICAgc2l6ZTogby5uYXZiYXJNZW51U2xpbXNjcm9sbFdpZHRoXG5cdCAgICB9KS5jc3MoXCJ3aWR0aFwiLCBcIjEwMCVcIik7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBzaWRlYmFyIHB1c2ggbWVudVxuXHQgIGlmIChvLnNpZGViYXJQdXNoTWVudSkge1xuXHQgICAgJC5MYXlvdXRNYW5hZ2VyLnB1c2hNZW51LmFjdGl2YXRlKG8uc2lkZWJhclRvZ2dsZVNlbGVjdG9yKTtcblx0ICB9XG5cblx0ICAvL0FjdGl2YXRlIEJvb3RzdHJhcCB0b29sdGlwXG5cdCAgaWYgKG8uZW5hYmxlQlNUb3BwbHRpcCkge1xuXHQgICAgJCgnYm9keScpLnRvb2x0aXAoe1xuXHQgICAgICBzZWxlY3Rvcjogby5CU1Rvb2x0aXBTZWxlY3RvclxuXHQgICAgfSk7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBib3ggd2lkZ2V0XG5cdCAgaWYgKG8uZW5hYmxlQm94V2lkZ2V0KSB7XG5cdCAgICAkLkxheW91dE1hbmFnZXIuYm94V2lkZ2V0LmFjdGl2YXRlKCk7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBmYXN0IGNsaWNrXG5cdCAgaWYgKG8uZW5hYmxlRmFzdGNsaWNrICYmIHR5cGVvZiBGYXN0Q2xpY2sgIT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIEZhc3RDbGljay5hdHRhY2goZG9jdW1lbnQuYm9keSk7XG5cdCAgfVxuXG5cdCAgLy9BY3RpdmF0ZSBkaXJlY3QgY2hhdCB3aWRnZXRcblx0ICBpZiAoby5kaXJlY3RDaGF0LmVuYWJsZSkge1xuXHQgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgby5kaXJlY3RDaGF0LmNvbnRhY3RUb2dnbGVTZWxlY3RvciwgZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgYm94ID0gJCh0aGlzKS5wYXJlbnRzKCcuZGlyZWN0LWNoYXQnKS5maXJzdCgpO1xuXHQgICAgICBib3gudG9nZ2xlQ2xhc3MoJ2RpcmVjdC1jaGF0LWNvbnRhY3RzLW9wZW4nKTtcblx0ICAgIH0pO1xuXHQgIH1cblxuXHQgIC8qXG5cdCAgICogSU5JVElBTElaRSBCVVRUT04gVE9HR0xFXG5cdCAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCAgICovXG5cdCAgJCgnLmJ0bi1ncm91cFtkYXRhLXRvZ2dsZT1cImJ0bi10b2dnbGVcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBncm91cCA9ICQodGhpcyk7XG5cdCAgICAkKHRoaXMpLmZpbmQoXCIuYnRuXCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIGdyb3VwLmZpbmQoXCIuYnRuLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcblx0ICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblx0ICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgfSk7XG5cblx0ICB9KTtcblx0ICBcblx0ICByZXR1cm4gJC5MYXlvdXRNYW5hZ2VyXG5cdCAgXHQuYWRkUmVmcmVzaEJ1dHRvbigpXG5cdCAgXHQuYWN0aXZhdGVCb3goKVxuXHQgIFx0Lmxpc3RDdXN0b21QbHVnaW4oKTtcblx0fTtcblxuJC5MYXlvdXRNYW5hZ2VyLmxvYWRpbmcgPSBmdW5jdGlvbihzdGFydCl7XG4gIHZhciBzdGFydCA9IF8uaXNCb29sZWFuKHN0YXJ0KSA/IHN0YXJ0IDogdHJ1ZTtcbiAgaWYgKHN0YXJ0KSB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cImxvYWRzcGlubmVyXCIgY2xhc3M9XCJsb2FkaW5nXCI+PC9kaXY+Jyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgJCgnI2xvYWRzcGlubmVyJykucmVtb3ZlKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkLkxheW91dE1hbmFnZXI7XG4iLCJ2YXIgdCA9IHJlcXVpcmUoJ3Nkay9jb3JlL2kxOG4vaTE4bi5zZXJ2aWNlJykudDtcbnZhciBTdGFjayA9IHJlcXVpcmUoJy4vYmFyc3RhY2suanMnKTtcblxuLy9zaWRlYmFyIGl0ZW0gY2hlIG5vbiDDqCBhbHRybyBjaGUgdW4gbGkgZGVsbGEgc2lkZWJhciBkb3ZlIHNhcsOgIHBvc3NvYmlsZSBpbXBvc3RhcmVcbi8vdGl0b2xvIHRpcG8gZGkgaWNvbmEgZXRjIC4uIGN1c3RvbWl6emF0YSBwZXIgb2duaSBjb21wb25lbnRlXG5cbnZhciBTaWRlYmFySXRlbSA9IFZ1ZS5leHRlbmQoe1xuICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vaHRtbC9zaWRlYmFyLWl0ZW0uaHRtbCcpLFxuICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWluOiB0cnVlLFxuICAgICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGRhdGFUeXBlOiAnaW5saW5lJyxcbiAgICAgICAgdGl0bGU6ICdjb21wb25lbnQnLFxuICAgICAgICBpY29uOiBudWxsLFxuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIFNpZGViYXJTZXJ2aWNlKCl7XG4gIHRoaXMuc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBjb21wb25lbnRzOiBbXVxuICB9O1xuICBcbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24obGF5b3V0KXtcbiAgICB0aGlzLmxheW91dCA9IGxheW91dDtcbiAgfTtcbiAgXG4gIHRoaXMuYWRkQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGNvbXBvbmVudHMpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBfLmZvckVhY2goY29tcG9uZW50cyxmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgc2VsZi5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgXG4gIHRoaXMuYWRkQ29tcG9uZW50ID0gZnVuY3Rpb24oY29tcG9uZW50KSB7XG4gICAgLy9hZ2dpdW5nbyBjb21wb25lbnRlXG4gICAgdGhpcy5zdGF0ZS5jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAvL2ZhY2NpbyBtb250YXJlIGlsIHNlZGViYXItaXRlbSBjaGUgY29udGllbmUgYWwgc3VvIGludGVybm8gaWwgcGxhY2Vob2xkZXIgZGVsIGNvbXBvbmVudGUgdmVybyBlIHByb3ByaW9cbiAgICAvL2luIHF1ZXN0byBtb2RvIGlsIGNvbXBvbmVudGUgbm9uIHNpIGRvdnLDoCBvY2N1cGFyZSBkaSBjb3N0cnVpcmUgYW5jaGUgbCdlbGVtZW50byBsaSBkZWxsYSBzaWRlYmFyXG4gICAgLy9tYSBjb250ZXJyw6Agc29sbyBpbCBjb250ZW51dG9cbiAgICB2YXIgc2lkZWJhckl0ZW0gPSBuZXcgU2lkZWJhckl0ZW0oKTtcbiAgICAvL3NldHRvIGxlIHBhcnRpIGRlbGxhIHNpZGViYXItaXRlbSBjaGUgY2FtYmlhbm8gZGEgY29tcG9uZW50ZSBhIGNvbXBvbmVudGUgKGRhIHJpdmVkZXJlKVxuICAgIHNpZGViYXJJdGVtLnRpdGxlID0gY29tcG9uZW50LnRpdGxlIHx8IHNpZGViYXJJdGVtLnRpdGxlO1xuICAgIHNpZGViYXJJdGVtLm9wZW4gPSAoY29tcG9uZW50Lm9wZW4gPT09IHVuZGVmaW5lZCkgPyBzaWRlYmFySXRlbS5vcGVuIDogY29tcG9uZW50Lm9wZW47XG4gICAgc2lkZWJhckl0ZW0uaWNvbiA9IGNvbXBvbmVudC5kYXRhSWNvbiB8fCBzaWRlYmFySXRlbS5pY29uO1xuICAgIHNpZGViYXJJdGVtLnN0YXRlID0gY29tcG9uZW50LnN0YXRlIHx8IHRydWU7XG4gICAgc2lkZWJhckl0ZW0uJG1vdW50KCkuJGFwcGVuZFRvKCcjZzN3LXNpZGViYXJjb21wb25lbnRzJyk7XG4gICAgXG4gICAgLy9tb250byBpbCBjb21wb25ldGUgbmVsbGEgc2lkZWJhclxuICAgIGNvbXBvbmVudC5tb3VudChcIiNnM3ctc2lkZWJhcmNvbXBvbmVudC1wbGFjZWhvbGRlclwiKTtcbiAgICBpZiAoXy5oYXMoY29tcG9uZW50LCAnaW5pdFNlcnZpY2UnKSkge1xuICAgICAgY29tcG9uZW50LmluaXRTZXJ2aWNlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgXG4gIHRoaXMucmVtb3ZlQ29tcG9uZW50ID0gZnVuY3Rpb24oKXtcbiAgICAvL2RhIHZlZGVyZVxuICB9O1xuXG4gIHRoaXMuc2hvd1BhbmVsID0gZnVuY3Rpb24ocGFuZWwpe1xuICAgIHZhciBwYXJlbnQgPSBcIiNnM3ctc2lkZWJhcnBhbmVsLXBsYWNlaG9sZGVyXCI7XG4gICAgdGhpcy5zdGFjay5wdXNoKHBhbmVsLCBwYXJlbnQpO1xuICB9O1xuXG4gIHRoaXMuY2xvc2VQYW5lbCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhbmVsID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgfTtcbn1cblxudmFyIHNpZGViYXJTZXJ2aWNlID0gbmV3IFNpZGViYXJTZXJ2aWNlKCk7XG5cbnZhciBTaWRlYmFyQ29tcG9uZW50ID0gVnVlLmV4dGVuZCh7XG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4uL2h0bWwvc2lkZWJhci5odG1sJyksXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgXHRyZXR1cm4ge1xuICAgICAgICBjb21wb25lbnRzOiBzaWRlYmFyU2VydmljZS5zdGF0ZS5jb21wb25lbnRzLFxuICAgICAgICBwYW5lbHM6IHNpZGViYXJTZXJ2aWNlLnN0YWNrLnN0YXRlLnBhbmVscyxcbiAgICAgICAgYk9wZW46IHRydWUsXG4gICAgXHRcdGJQYWdlTW9kZTogZmFsc2UsXG4gICAgXHRcdGhlYWRlcjogdCgnbWFpbiBuYXZpZ2F0aW9uJyksXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgLy8gcXVhbnRpIHBhbm5lbGxpIHNvbm8gYXR0aXZpIG5lbGxvIHN0YWNrXG4gICAgICBwYW5lbHNpbnN0YWNrOiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5lbHMubGVuZ3RoPjA7XG4gICAgICB9LFxuICAgICAgc2hvd21haW5wYW5lbDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5sZW5ndGg+MCAmJiAhdGhpcy5wYW5lbHNpbnN0YWNrO1xuICAgICAgfSxcbiAgICAgIGNvbXBvbmVudG5hbWU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBuYW1lID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cy5sZW5ndGgpe1xuICAgICAgICAgIG5hbWUgPSB0aGlzLmNvbXBvbmVudHMuc2xpY2UoLTEpWzBdLmdldFRpdGxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICB9LFxuICAgICAgcGFuZWxuYW1lOiBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgbmFtZSA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLnBhbmVscy5sZW5ndGgpe1xuICAgICAgICAgIG5hbWUgPSB0aGlzLnBhbmVscy5zbGljZSgtMSlbMF0uZ2V0VGl0bGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGNsb3NlUGFuZWw6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHNpZGViYXJTZXJ2aWNlLmNsb3NlUGFuZWwoKTtcbiAgICAgIH0sXG4gICAgICBpc01vYmlsZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGlzTW9iaWxlLmFueVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCl7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTaWRlYmFyU2VydmljZTogc2lkZWJhclNlcnZpY2UsXG4gIFNpZGViYXJDb21wb25lbnQ6IFNpZGViYXJDb21wb25lbnRcbn1cbiIsInZhciB0ID0gcmVxdWlyZSgnc2RrL2NvcmUvaTE4bi9pMThuLnNlcnZpY2UnKS50O1xucmVxdWlyZSgnc2RrL2d1aS92dWUvdnVlLmRpcmVjdGl2ZXMnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgQ29tcG9uZW50c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnc2RrL2d1aS9jb21wb25lbnRzcmVnaXN0cnknKTtcbnZhciBHVUkgPSByZXF1aXJlKCdzZGsvZ3VpL2d1aScpO1xuLy8gdGVtcG9yYW5lbyBwZXIgZmFyIGZ1bnppb25hcmUgbGUgY29zZVxudmFyIGNvbmZpZyA9IHtcbiAgICBjbGllbnQ6e31cbn07XG5cbnZhciBzaWRlYmFyID0gcmVxdWlyZSgnLi9zaWRlYmFyJyk7XG52YXIgZmxvYXRiYXIgPSByZXF1aXJlKCcuL2Zsb2F0YmFyJyk7XG52YXIgdmlld3BvcnQgPSByZXF1aXJlKCcuL3ZpZXdwb3J0Jyk7XG52YXIgQXBwVUkgPSByZXF1aXJlKCcuL2FwcGxpY2F0aW9udWknKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKCcuL2xheW91dCcpO1xuXG4vLyBmb3JzZSBkYSB0cm92YXJlIHVuIHBvc3RvIG1pZ2xpb3JlIHBlciBhdHRpdmFyZSBsbyBzcGlubmVyIGluaXppYWxlLi4uXG5sYXlvdXQubG9hZGluZygpO1xuXG52YXIgQXBwbGljYXRpb25UZW1wbGF0ZSA9IGZ1bmN0aW9uKHRlbXBsYXRlQ29uZmlnLCBBcHBsaWNhdGlvblNlcnZpY2UpIHtcbiAgc2VsZiA9IHRoaXM7XG4gIHRoaXMudGVtcGxhdGVDb25maWcgPSB0ZW1wbGF0ZUNvbmZpZztcbiAgdGhpcy5BcHBsaWNhdGlvblNlcnZpY2UgPSBBcHBsaWNhdGlvblNlcnZpY2U7XG4gIFxuICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29uZmlnID0gQXBwbGljYXRpb25TZXJ2aWNlLmdldENvbmZpZygpO1xuICAgIGlmIChjb25maWcuZGVidWcpe1xuICAgICAgVnVlLmNvbmZpZy5kZWJ1ZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3NldHVwSW50ZXJmYWNlKCk7XG4gICAgdGhpcy5fc2V0dXBMYXlvdXQoKTtcbiAgfTtcbiAgXG4gIHRoaXMuX3NldHVwTGF5b3V0ID0gZnVuY3Rpb24oKXsgIFxuICAgIFZ1ZS5maWx0ZXIoJ3QnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB0KHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHZhciBBcHBVSSA9IHJlcXVpcmUoJy4vYXBwbGljYXRpb251aScpO1xuXG4gICAgVnVlLmNvbXBvbmVudCgnc2lkZWJhcicsIHNpZGViYXIuU2lkZWJhckNvbXBvbmVudCk7XG4gICAgVnVlLmNvbXBvbmVudCgndmlld3BvcnQnLCB2aWV3cG9ydC5WaWV3cG9ydENvbXBvbmVudCk7XG4gICAgVnVlLmNvbXBvbmVudCgnZmxvYXRiYXInLCBmbG9hdGJhci5GbG9hdGJhckNvbXBvbmVudCk7XG4gICAgVnVlLmNvbXBvbmVudCgnYXBwJywgQXBwVUkpO1xuICAgIC8vaW5pemlhbGl6emEgbCdhcHBsaWNhemlvbmUgVnVlXG4gICAgdmFyIHRlbXBsYXRlID0gdGhpczsgIFxuICAgIHZhciBhcHAgPSBuZXcgVnVlKHtcbiAgICAgIGVsOiAnYm9keScsXG4gICAgICByZWFkeTogZnVuY3Rpb24oKXtcbiAgICAgICAgc2VsZi5fYnVpbGRUZW1wbGF0ZSgpO1xuICAgICAgICAkKGRvY3VtZW50KS5sb2NhbGl6ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIFxuICB0aGlzLl9idWlsZFRlbXBsYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZsb2F0YmFyLkZsb2F0YmFyU2VydmljZS5pbml0KGxheW91dCk7XG4gICAgdmFyIHBsYWNlaG9sZGVyc0NvbmZpZyA9IHRoaXMudGVtcGxhdGVDb25maWcucGxhY2Vob2xkZXJzO1xuICAgIF8uZm9yRWFjaChwbGFjZWhvbGRlcnNDb25maWcsIGZ1bmN0aW9uKGNvbXBvbmVudHMsIHBsYWNlaG9sZGVyKXtcbiAgICAgIC8vIHBlciBvZ25pIHBsYWNlaG9sZGVyIGNpIHBvc3Nvbm8gZXNzZXJlIHBpw7kgY29tcG9uZW50aSBjaWNsbyBlIGFnZ2l1bmdvXG4gICAgICBzZWxmLl9hZGRDb21wb25lbnRzKGNvbXBvbmVudHMuY29tcG9uZW50cyxwbGFjZWhvbGRlcik7XG4gICAgfSk7XG4gICAgLy9yZWdpc3RybyBhbHRyaSBjb21wb25lbnRpIGNoZSBub24gaGFubm8gdW5hIGNvbGxvY2F6aW9uZSBzcGF6aWFsZSBwcmVjaXNhXG4gICAgLy8gY29tZSBkYSBlc2VtcGlvIGkgcmlzdWx0YXRpIGNoZSBwb3Nzb25vIGVzc2VyZSBtb250YXRpIHN1bGxhIGZsb2F0YmFyIG8gYWx0cmUgcGFydGkgZGVsIHRlbXBsYXRlXG4gICAgdGhpcy5fYWRkT3RoZXJDb21wb25lbnRzKCk7XG4gICAgdGhpcy5lbWl0KCdyZWFkeScpO1xuICAgIEdVSS5yZWFkeSgpO1xuICB9O1xuXG4gIC8vYWdnaXVuZ2VyZSBjb21waW5ldGkgbm9uIGxlZ2F0aSBhZCB1biBwbGFjZWhvbGRlclxuICB0aGlzLl9hZGRPdGhlckNvbXBvbmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHRoaXMudGVtcGxhdGVDb25maWcub3RoZXJjb21wb25lbnRzKSB7XG4gICAgICBzZWxmLl9hZGRDb21wb25lbnRzKHRoaXMudGVtcGxhdGVDb25maWcub3RoZXJjb21wb25lbnRzKTtcbiAgICB9O1xuICB9O1xuICBcbiAgdGhpcy5fYWRkQ29tcG9uZW50ID0gZnVuY3Rpb24oY29tcG9uZW50LHBsYWNlaG9sZGVyKSB7XG4gICAgdGhpcy5fYWRkQ29tcG9uZW50cyhbY29tcG9uZW50XSxwbGFjZWhvbGRlcik7XG4gIH07XG4gIFxuICB0aGlzLl9hZGRDb21wb25lbnRzID0gZnVuY3Rpb24oY29tcG9uZW50cyxwbGFjZWhvbGRlcikge1xuICAgIHZhciByZWdpc3RlciA9IHRydWU7XG4gICAgaWYgKHBsYWNlaG9sZGVyICYmIEFwcGxpY2F0aW9uVGVtcGxhdGUuUExBQ0VIT0xERVJTLmluZGV4T2YocGxhY2Vob2xkZXIpID4gLTEpe1xuICAgICAgdmFyIHBsYWNlaG9sZGVyU2VydmljZSA9IEFwcGxpY2F0aW9uVGVtcGxhdGUuUGxhY2Vob2xkZXJzU2VydmljZXNbcGxhY2Vob2xkZXJdO1xuICAgICAgaWYgKHBsYWNlaG9sZGVyU2VydmljZSkge1xuICAgICAgICByZWdpc3RlciA9IHBsYWNlaG9sZGVyU2VydmljZS5hZGRDb21wb25lbnRzKGNvbXBvbmVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBfLmZvckVhY2goY29tcG9uZW50cyxmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgaWYgKHJlZ2lzdGVyKSB7XG4gICAgICAgIENvbXBvbmVudHNSZWdpc3RyeS5yZWdpc3RlckNvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH0pXG4gIH07XG4gIFxuICB0aGlzLl9yZW1vdmVDb21wb25lbnQgPSBmdW5jdGlvbihwbGNlaG9sZGVyLGNvbXBvbmVudElkKSB7XG4gICAgQ29tcG9uZW50c1JlZ2lzdHJ5LnVucmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfTtcbiAgXG4gIHRoaXMuX3Nob3dNb2RhbE92ZXJsYXkgPSBmdW5jdGlvbihib29sKXtcbiAgICAvKmlmICghdGhpcy5fbW9kYWxPdmVybGF5KXtcbiAgICAgIHRoaXMuX21vZGFsT3ZlcmxheSA9ICQoJzxkaXYgaWQ9XCJnM3ctbW9kYWwtb3ZlcmxheVwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDsgb3BhY2l0eTogMC43O3otaW5kZXg6NDAwMDtwb3NpdGlvbjpmaXhlZDt0b3A6MHB4O2xlZnQ6MHB4XCI+PC9kaXY+Jyk7XG4gICAgICAkKFwiYm9keVwiKS5hcHBlbmQodGhpcy5fbW9kYWxPdmVybGF5KTtcbiAgICAgIHRoaXMuX21vZGFsT3ZlcmxheS53aWR0aCgkKHdpbmRvdykuaW5uZXJXaWR0aCgpKTtcbiAgICAgIHRoaXMuX21vZGFsT3ZlcmxheS5oZWlnaHQoJCh3aW5kb3cpLmlubmVySGVpZ2h0KCkpO1xuICAgIH1cbiAgICBpZiAoXy5pc1VuZGVmaW5lZChib29sKSB8fCBib29sID09PSB0cnVlKXtcbiAgICAgIHRoaXMuX21vZGFsT3ZlcmxheS53aWR0aCgkKHdpbmRvdykuaW5uZXJXaWR0aCgpKTtcbiAgICAgIHRoaXMuX21vZGFsT3ZlcmxheS5oZWlnaHQoJCh3aW5kb3cpLmlubmVySGVpZ2h0KCkpO1xuICAgICAgdGhpcy5fbW9kYWxPdmVybGF5LnNob3coKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9tb2RhbE92ZXJsYXkuaGlkZSgpO1xuICAgIH0qL1xuICB9O1xuXG4gIHRoaXMuX3Nob3dTaWRlYmFyID0gZnVuY3Rpb24oKSB7XG4gICAgLy9jb2RpY2UgcXVpXG4gIH07XG4gIHRoaXMuX2hpZGVTaWRlYmFyID0gZnVuY3Rpb24oKSB7XG4gICAgLy9jb2RpY2UgcXVpXG4gIH07XG4gIFxuICB0aGlzLl9zZXR1cEludGVyZmFjZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8qIERFRklOSVpJT05FIElOVEVSRkFDQ0lBIFBVQkJMSUNBICovXG4gICAgXG4gICAgLyogTWV0b2RpIGNvbXVuaSBhIHR1dHRpIGkgdGVtcGxhdGUgKi9cbiAgICBHVUkubGF5b3V0ID0gbGF5b3V0O1xuICAgIEdVSS5hZGRDb21wb25lbnQgPSBfLmJpbmQodGhpcy5fYWRkQ29tcG9uZW50LCB0aGlzKTtcbiAgICBHVUkucmVtb3ZlQ29tcG9uZW50ID0gXy5iaW5kKHRoaXMuX3JlbW92ZUNvbXBvbmVudCwgdGhpcyk7XG4gICAgXG4gICAgLyogTWV0b2RpIGRhIGRlZmluaXJlICh0cmFtaXRlIGJpbmRpbmcpICovXG4gICAgR1VJLmdldFJlc291cmNlc1VybCA9IF8uYmluZChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLkFwcGxpY2F0aW9uU2VydmljZS5nZXRDb25maWcoKS5yZXNvdXJjZXN1cmw7XG4gICAgfSx0aGlzKTtcbiAgICBcbiAgICBHVUkuc2hvd0Zvcm0gPSBfLmJpbmQoZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlLnNob3dQYW5lbCxmbG9hdGJhci5GbG9hdGJhclNlcnZpY2UpO1xuICAgIEdVSS5jbG9zZUZvcm0gPSBfLmJpbmQoZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlLmNsb3NlUGFuZWwsZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlKTtcbiAgICBHVUkuc2hvd0xpc3QgPSBfLmJpbmQoZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlLnNob3dQYW5lbCxmbG9hdGJhci5GbG9hdGJhclNlcnZpY2UpO1xuICAgIEdVSS5jbG9zZUxpc3QgPSBfLmJpbmQoZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlLmNsb3NlUGFuZWwsZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlKTtcbiAgICBHVUkuaGlkZUxpc3QgPSBfLmJpbmQoZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlLmhpZGVQYW5lbCxmbG9hdGJhci5GbG9hdGJhclNlcnZpY2UpO1xuICAgIFxuICAgIEdVSS5zaG93VGFibGUgPSBmdW5jdGlvbigpIHt9O1xuICAgIEdVSS5jbG9zZVRhYmxlID0gZnVuY3Rpb24oKSB7fTtcbiAgICBcbiAgICAvLyBRdWkgc2kgaW1wbGVtZW50YSBpbCBtZXRvZG8gcGVyIGxhIHZpc3VhbGl6emF6aW9uZSBkZWkgcmlzdWx0YXRpXG4gICAgLy8gZGVyaXZhbnRpIGRhIHVuYSBxdWVyeVxuXG4gICAgLy9lc2VtcGlvIGRpIG1ldG9kbyBnZW5lcmljb1xuICAgIEdVSS5zaG93UmVzdWx0c0ZhY3RvcnkgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICB2YXIgc2hvd1BhbmVsUmVzdWx0cztcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdxdWVyeSc6XG4gICAgICAgICAgR1VJLnNob3dGbG9hdGJhcigpO1xuICAgICAgICAgIHNob3dQYW5lbFJlc3VsdHMgPSBHVUkuc2hvd1F1ZXJ5UmVzdWx0cztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2hvd1BhbmVsUmVzdWx0cztcbiAgICB9O1xuXG4gICAgR1VJLnNob3dRdWVyeVJlc3VsdHMgPSBmdW5jdGlvbih0aXRsZSxyZXN1bHRzKSB7XG4gICAgICAvLyBpc3RhbnppYXJlIGlsIGNvbXBvbmVudGUgcXVlcnlyZXN1bHRzXG4gICAgICB2YXIgcXVlcnlSZXN1bHRzQ29tcG9uZW50ID0gR1VJLmdldENvbXBvbmVudCgncXVlcnlyZXN1bHRzJyk7XG4gICAgICAvLyBwYXNzYXJsbyBhIEZsb2F0YmFyXG4gICAgICB2YXIgcXVlcnlSZXN1bHRTZXJ2aWNlID0gcXVlcnlSZXN1bHRzQ29tcG9uZW50LmdldFNlcnZpY2UoKTtcbiAgICAgIHF1ZXJ5UmVzdWx0U2VydmljZS5yZXNldCgpO1xuICAgICAgcXVlcnlSZXN1bHRTZXJ2aWNlLnNldFRpdGxlKHRpdGxlKTtcbiAgICAgIGlmIChyZXN1bHRzKSB7XG4gICAgICAgIHF1ZXJ5UmVzdWx0U2VydmljZS5zZXRRdWVyeVJlc3BvbnNlKHJlc3VsdHMpO1xuICAgICAgfVxuICAgICAgLy9yaW11b3ZvIHNwaW5uZXJcbiAgICAgIHZhciBvcHRpb25zID0ge2FwcGVuZDogdHJ1ZX07XG4gICAgICBmbG9hdGJhci5GbG9hdGJhclNlcnZpY2Uuc2hvd1BhbmVsKHF1ZXJ5UmVzdWx0c0NvbXBvbmVudCwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gcXVlcnlSZXN1bHRTZXJ2aWNlO1xuICAgIH07XG4gICAgXG4gICAgR1VJLmhpZGVRdWVyeVJlc3VsdHMgPSBfLmJpbmQoZmxvYXRiYXIuRmxvYXRiYXJTZXJ2aWNlLmhpZGVQYW5lbCxmbG9hdGJhci5GbG9hdGJhclNlcnZpY2UpO1xuICAgIC8vdGVtcG9yYW5lbyBzaG93IHBhbmVsXG4gICAgR1VJLnNob3dQYW5lbCA9IF8uYmluZChzaWRlYmFyLlNpZGViYXJTZXJ2aWNlLnNob3dQYW5lbCwgc2lkZWJhci5TaWRlYmFyU2VydmljZSk7XG4gICAgR1VJLmNsb3NlUGFuZWwgPSBfLmJpbmQoc2lkZWJhci5TaWRlYmFyU2VydmljZS5jbG9zZVBhbmVsLCBzaWRlYmFyLlNpZGViYXJTZXJ2aWNlKTtcbiAgICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAgIHRvYXN0ci5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSAndG9hc3QtdG9wLWNlbnRlcic7XG4gICAgdG9hc3RyLm9wdGlvbnMucHJldmVudER1cGxpY2F0ZXMgPSB0cnVlO1xuICAgIC8vIHByb3h5IGRlbGxhIGxpYnJlcmlhIHRvYXN0clxuICAgIEdVSS5ub3RpZnkgPSB0b2FzdHI7XG4gICAgLy8gcHJveHkgZGVsbGEgbGlicmVyaWEgYm9vdGJveFxuICAgIEdVSS5kaWFsb2cgPSBib290Ym94O1xuICAgIC8qIHNwaW5uZXIgKi9cbiAgICBHVUkuc2hvd1NwaW5uZXIgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICAgIHZhciBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCAnYm9keSc7XG4gICAgICB2YXIgaWQgPSBvcHRpb25zLmlkIHx8ICdsb2Fkc3Bpbm5lcic7XG4gICAgICB2YXIgd2hlcmUgPSBvcHRpb25zLndoZXJlIHx8ICdwcmVwZW5kJzsgLy8gYXBwZW5kIHwgcHJlcGVuZFxuICAgICAgdmFyIHN0eWxlID0gb3B0aW9ucy5zdHlsZSB8fCAnJztcbiAgICAgIHZhciB0cmFuc3BhcmVudCA9IG9wdGlvbnMudHJhbnNwYXJlbnQgPyAnYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQnIDogJyc7XG4gICAgICBpZiAoISQoXCIjXCIraWQpLmxlbmd0aCkge1xuICAgICAgICAkKGNvbnRhaW5lcilbd2hlcmVdLmNhbGwoJChjb250YWluZXIpLCc8ZGl2IGlkPVwiJytpZCsnXCIgY2xhc3M9XCJzcGlubmVyLXdyYXBwZXIgJytzdHlsZSsnXCIgc3R5bGU9XCInK3RyYW5zcGFyZW50KydcIj48ZGl2IGNsYXNzPVwic3Bpbm5lciAnK3N0eWxlKydcIj48L2Rpdj48L2Rpdj4nKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEdVSS5oaWRlU3Bpbm5lciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgICQoXCIjXCIraWQpLnJlbW92ZSgpO1xuICAgIH07XG4gICAgLyogZW5kIHNwaW5uZXIqL1xuXG4gICAgLyogZmluZSBtZXRvZGkgY29tdW5pICovXG4gICAgXG4gICAgLyogTWV0b2RpIHNwZWNpZmljaSBkZWwgdGVtcGxhdGUgKi9cbiAgICAvLyBGTE9BVEJBUiAvL1xuICAgIEdVSS5zaG93RmxvYXRiYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZsb2F0YmFyLkZsb2F0YmFyU2VydmljZS5vcGVuKCk7XG4gICAgfTtcbiAgICBHVUkuaGlkZUZsb2F0YmFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBmbG9hdGJhci5GbG9hdGJhclNlcnZpY2UuY2xvc2UoKTtcbiAgICB9O1xuXG4gICAgLy8gU0lERUJBUiAvL1xuICAgIEdVSS5zaG93U2lkZWJhciA9IF8uYmluZCh0aGlzLl9zaG93U2lkZWJhciwgdGhpcyk7XG4gICAgR1VJLmhpZGVTaWRlYmFyID0gXy5iaW5kKHRoaXMuX2hpZGVTaWRlYmFyLCB0aGlzKTtcbiAgICBcbiAgICBHVUkuc2V0TW9kYWwgPSBfLmJpbmQodGhpcy5fc2hvd01vZGFsT3ZlcmxheSx0aGlzKTtcbiAgICBcbiAgICAvLyBNb3N0cmEgbGEgbWFwcGEgY29tZSB2aXN0YSBwcmluY2lwYWxlXG4gICAgR1VJLnNob3dNYXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZpZXdwb3J0LlZpZXdwb3J0U2VydmljZS5zZXRQcmltYXJ5Q29tcG9uZW50KCdtYXAnKTtcbiAgICB9O1xuICAgIC8vIE1vc3RyYSBsYSBtYXBwYSBjb21lIHZpc3RhIGFzaWRlLCBpbXBvc3RhbmRvIGlsIHJhcHBvcnRvIHZpc3RhIHByaW5jaXBhbGUgLyB2aXN0YSBzZWNvbmRhcmlhIChlcy4gMiBwZXIgMS8yLCAzIHBlciB2aXN0YSBzZWNvbmRhcmlhIDEvIGRpIHF1ZWxsYSBwcmltYXJpYSwgZWNjLilcbiAgICBHVUkuc2hvd01hcEFzaWRlID0gZnVuY3Rpb24oc3BsaXQscmF0aW8pIHtcbiAgICAgIFxuICAgIH07XG4gICAgLy8gTW9zdHJhIGlsIGNvbnRlbnV0byBjb21lIHZpc3RhIHByaW5jaXBhbGUuIElsIGNvbnRlbnV0byBwdcOyIGVzc2VyZSB1bmEgc3RyaW5nIEhUTUwsIHVuIGVsZW1lbnRvIERPTSBvIHVuIGNvbXBvbmVudGUgVnVlXG4gICAgR1VJLnNob3dDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgdmFyIGNvbnRlbnRDb21wb25lbnQgPSBDb21wb25lbnRzUmVnaXN0cnkuZ2V0Q29tcG9uZW50KCdjb250ZW50cycpO1xuICAgICAgLy8gY29udGVudENvbXBvbmVudC5zZXRDb250ZW50KGNvbnRlbnQpOyAgREEgSU1QTEVNRU5UQVJFOiBJbCBzZWNvbmRvIGNvbXBvbmVudGUgc2V0dGF0byBpbiBmYXNlIGRpIGNvbmZpZ3VyYXppb25lIChhbmNvcmEgbm9uIHByZXNlbnRlKSBkb3Zyw6AgaW1wbGVtZW50YXJlIGlsIG1ldG9kbyBzZXRDb250ZW50XG4gICAgICAvLyBjaGUgYWNjZXR0ZXLDoCBvIHVuYSBzdHJpbmdhIEhUTUwsIG8gdW4gZWxlbWVudG8gRE9NLCBvcHB1cmUgdW4gY29tcG9uZW50ZSBWdWVcbiAgICAgIHZpZXdwb3J0LlZpZXdwb3J0U2VydmljZS5zZXRQcmltYXJ5Q29tcG9uZW50KCdjb250ZW50cycpO1xuICAgIH07XG4gICAgLy8gTW9zdHJhIGkgY29udGVudXRvIGNvbWUgdmlzdGEgYXNpZGVcbiAgICBHVUkuc2hvd0NvbnRlbnRBc2lkZSA9IGZ1bmN0aW9uKGNvbnRlbnQsc3BsaXQscmF0aW8pIHtcbiAgICAgIHZhciBjb250ZW50Q29tcG9uZW50ID0gQ29tcG9uZW50c1JlZ2lzdHJ5LmdldENvbXBvbmVudCgnY29udGVudHMnKTtcbiAgICAgIGNvbnRlbnRDb21wb25lbnQuc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgIHZpZXdwb3J0LlZpZXdwb3J0U2VydmljZS5zZXRQcmltYXJ5Q29tcG9uZW50KCdtYXAnKTtcbiAgICAgIHZpZXdwb3J0LlZpZXdwb3J0U2VydmljZS5zaG93U2Vjb25kYXJ5VmlldyhzcGxpdCxyYXRpbyk7XG4gICAgfTtcbiAgICAvLyBOYXNjb25kZSBsYSB2aXN0YSBzZWNvbmRhcmlhXG4gICAgR1VJLmhpZGVBc2lkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmlld3BvcnQuVmlld3BvcnRTZXJ2aWNlLmhpZGVTZWNvbmRhcnlWaWV3KCk7XG4gICAgICB2YXIgY29udGVudENvbXBvbmVudCA9IENvbXBvbmVudHNSZWdpc3RyeS5nZXRDb21wb25lbnQoJ2NvbnRlbnRzJyk7XG4gICAgICBjb250ZW50Q29tcG9uZW50LnJlbW92ZUNvbnRlbnQoKTtcbiAgICB9O1xuICAgIC8qIGZpbmUgbWV0b2RpIHNwZWNpZmljaSAqL1xuICAgIFxuICAgIC8qIEZJTkUgREVGSU5JWklPTkUgSU5URVJGQUNDSUEgUFVCQkxJQ0EgKi9cbiAgfTtcbiAgXG4gIGJhc2UodGhpcyk7XG59O1xuaW5oZXJpdChBcHBsaWNhdGlvblRlbXBsYXRlLEczV09iamVjdCk7XG5cbkFwcGxpY2F0aW9uVGVtcGxhdGUuUExBQ0VIT0xERVJTID0gW1xuICAnbmF2YmFyJyxcbiAgJ3NpZGViYXInLFxuICAndmlld3BvcnQnLFxuICAnZmxvYXRiYXInXG5dO1xuXG5BcHBsaWNhdGlvblRlbXBsYXRlLlBsYWNlaG9sZGVyc1NlcnZpY2VzID0ge1xuICBuYXZiYXI6IG51bGwsXG4gIHNpZGViYXI6IHNpZGViYXIuU2lkZWJhclNlcnZpY2UsXG4gIHZpZXdwb3J0OiB2aWV3cG9ydC5WaWV3cG9ydFNlcnZpY2UsXG4gIGZsb2F0YmFyOiBzaWRlYmFyLkZsb2F0YmFyU2VydmljZSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gIEFwcGxpY2F0aW9uVGVtcGxhdGU7XG5cbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnc2RrJykuY29yZS51dGlscy5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdzZGsnKS5jb3JlLnV0aWxzLmJhc2U7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCdzZGsnKS5jb3JlLnV0aWxzLm1lcmdlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ3NkaycpLmNvcmUuRzNXT2JqZWN0O1xudmFyIEdVSSA9IHJlcXVpcmUoJ3NkaycpLmd1aS5HVUk7XG5cbnZhciBWaWV3cG9ydFNlcnZpY2UgPSBmdW5jdGlvbigpeyAgXG4gIHRoaXMuc3RhdGUgPSB7XG4gICAgcHJpbWFyeVZpZXdUYWc6ICdvbmUnLCAvLyBkaSBkZWZhdWx0IGxhIHZpc3RhIHByaW1hcmlhIMOoIGxhIHByaW1hXG4gICAgc2Vjb25kYXJ5VmlzaWJsZTogZmFsc2UsXG4gICAgcmF0aW9EZW5vbTogMixcbiAgICBzcGxpdDogJ2gnLFxuICAgIHZpZXdTaXplczoge1xuICAgICAgb25lOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDBcbiAgICAgIH0sXG4gICAgICB0d286IHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMFxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIHRoaXMuc2V0dGVycyA9IHtcbiAgICBzZXRQcmltYXJ5Q29tcG9uZW50OiBmdW5jdGlvbihjb21wb25lbnRJZCkge1xuICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3ZpZXdzQnlDb21wb25lbnRJZFtjb21wb25lbnRJZF07XG4gICAgICBpZihjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIHZpZXdUYWcgPSBjb21wb25lbnQudmlld1RhZztcbiAgICAgICAgdGhpcy5fc2V0UHJpbWFyeVZpZXcodmlld1RhZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICB0aGlzLl92aWV3c0J5Q29tcG9uZW50SWQgPSB7fTtcbiAgdmFyIF9jb21wb25lbnRzID0gbnVsbDtcbiAgdGhpcy5fc2Vjb25kYXJ5Vmlld01pbldpZHRoID0gMzAwO1xuICB0aGlzLl9zZWNvbmRhcnlWaWV3TWluSGVpZ2h0ID0gMjAwO1xuICBcbiAgLyogSU5URVJGQUNDSUEgUFVCQkxJQ0EgKi9cbiAgXG4gIHRoaXMuYWRkQ29tcG9uZW50cyA9IGZ1bmN0aW9uKGNvbXBvbmVudHMpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcmVnaXRlcmVkQ29tcG9uZW50cyA9IF8ua2V5cyhzZWxmLl92aWV3c0J5Q29tcG9uZW50SWQpO1xuXG4gICAgLy8gbGEgdmlld3BvcnQgaGEgYWwgbWFzc2ltbyBkdWUgdmlzdGUsIG9nbnVuYSBjb250ZW50ZSBhbCBtYXNzaW1vIHVuIGNvbXBvbmVudGUuIFNlIHZpZW5lIHJpY2hpZXN0YSBsJ2FnZ2l1bnRhIGRpIHBpw7kgZGkgZHVlIGNvbXBvbmVudGkgcXVlc3RpIHZlbmdvbm8gaWdub3JhdGlcbiAgICBjb21wb25lbnRzID0gY29tcG9uZW50cy5zbGljZSgwLDMpO1xuICAgIGlmIChyZWdpdGVyZWRDb21wb25lbnRzLmxlbmd0aCA9PSAyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIHZhciBzbGljZVN0YXJ0ID0gcmVnaXRlcmVkQ29tcG9uZW50cy5sZW5ndGg7XG4gICAgdmFyIHNsaWNlRW5kID0gcmVnaXRlcmVkQ29tcG9uZW50cy5sZW5ndGggKyBjb21wb25lbnRzLmxlbmd0aDtcbiAgICB2YXIgdmlld1RhZ3MgPSBbJ29uZScsJ3R3byddLnNsaWNlKHNsaWNlU3RhcnQsc2xpY2VFbmQpO1xuICAgIF8uZm9yRWFjaCh2aWV3VGFncywgZnVuY3Rpb24odmlld1RhZyxpZHgpe1xuICAgICAgdmFyIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaWR4XTtcbiAgICAgIGNvbXBvbmVudC5tb3VudCgnI2czdy12aWV3LScrdmlld1RhZyx0cnVlKS5cbiAgICAgIHRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGNvbXBvbmVudElkID0gY29tcG9uZW50LmdldElkKCk7XG4gICAgICAgIHNlbGYuX3ZpZXdzQnlDb21wb25lbnRJZFtjb21wb25lbnRJZF0gPSB7XG4gICAgICAgICAgdmlld1RhZzogdmlld1RhZyxcbiAgICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBcbiAgdGhpcy5hZGRDb21wb25lbnQgPSBmdW5jdGlvbihjb21wb25lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRDb21wb25lbnRzW2NvbXBvbmVudF07XG4gIH07XG4gIFxuICB0aGlzLnNob3dTZWNvbmRhcnlWaWV3ID0gZnVuY3Rpb24oc3BsaXQscmF0aW9EZW5vbSkge1xuICAgIHRoaXMuc3RhdGUuc2Vjb25kYXJ5VmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5zdGF0ZS5zcGxpdCA9IHNwbGl0ID8gc3BsaXQgOiB0aGlzLnN0YXRlLnNwbGl0O1xuICAgIHRoaXMuc3RhdGUucmF0aW9EZW5vbSA9IHJhdGlvRGVub20gPyByYXRpb0Rlbm9tIDogdGhpcy5zdGF0ZS5yYXRpb0Rlbm9tO1xuICAgIHRoaXMuX2xheW91dCgpO1xuICB9O1xuICBcbiAgdGhpcy5oaWRlU2Vjb25kYXJ5VmlldyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3RhdGUuc2Vjb25kYXJ5VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuX2xheW91dCgpO1xuICB9O1xuICBcbiAgLyogRklORSBJTlRFUkZBQ0NJQSBQVUJCTElDQSAqL1xuICBcbiAgdGhpcy5fb3RoZXJUYWcgPSBmdW5jdGlvbih2aWV3VGFnKSB7XG4gICAgcmV0dXJuICh2aWV3VGFnID09ICdvbmUnKSA/ICd0d28nIDogJ29uZSc7XG4gIH07XG4gIFxuICAvLyBtZWNjYW5pc21vIHBlciBpbCByaWNhbGNvbG8gZGVsbGUgZGltZW5zaW9uaSBkZWxsYSB2aWV3cG9ydCBlIGRlaSBzdW9pIGNvbXBvbmVudGkgZmlnbGlcbiAgXG4gIHRoaXMuX3NldFByaW1hcnlWaWV3ID0gZnVuY3Rpb24odmlld1RhZykge1xuICAgIHRoaXMuc3RhdGUucHJpbWFyeVZpZXcgPSB2aWV3VGFnO1xuICAgIC8vdGhpcy5fbGF5b3V0KCk7XG4gIH07XG4gIFxuICB0aGlzLl9wcmVwYXJlTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkcmF3aW5nID0gZmFsc2U7XG4gICAgdmFyIHJlc2l6ZUZpcmVkID0gZmFsc2U7XG4gICAgXG4gICAgZnVuY3Rpb24gdHJpZ2dlclJlc2l6ZSgpIHtcbiAgICAgIHJlc2l6ZUZpcmVkID0gdHJ1ZTtcbiAgICAgIGRyYXdSZXNpemUoKTtcbiAgICB9IFxuXG4gICAgZnVuY3Rpb24gZHJhd1Jlc2l6ZSgpIHtcbiAgICAgIGlmIChyZXNpemVGaXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJlc2l6ZUZpcmVkID0gZmFsc2U7XG4gICAgICAgICAgZHJhd2luZyA9IHRydWU7XG4gICAgICAgICAgc2VsZi5fbGF5b3V0KCk7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdSZXNpemUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmF3aW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIEdVSS5vbigncmVhZHknLGZ1bmN0aW9uKCl7XG4gICAgICAvLyBwcmltbyBsYXlvdXRcbiAgICAgIHZhciBwcmltYXJ5Vmlld1RhZyA9IHNlbGYuc3RhdGUucHJpbWFyeVZpZXdUYWc7XG4gICAgICB2YXIgc2VvbmRhcnlWaWV3VGFnID0gc2VsZi5fb3RoZXJUYWcocHJpbWFyeVZpZXdUYWcpO1xuICAgICAgdmFyIHNlY29uZGFyeUVsID0gJChcIi5nM3ctdmlld3BvcnQgLlwiK3Nlb25kYXJ5Vmlld1RhZyk7XG4gICAgICBcbiAgICAgIHZhciBzZW9uZGFyeVZpZXdNaW5XaWR0aCA9IHNlY29uZGFyeUVsLmNzcygnbWluLXdpZHRoJyk7XG4gICAgICBpZiAoKHNlb25kYXJ5Vmlld01pbldpZHRoICE9IFwiXCIpICYmICFfLmlzTmFOKHBhcnNlRmxvYXQoc2VvbmRhcnlWaWV3TWluV2lkdGgpKSkge1xuICAgICAgICBzZWxmLl9zZWNvbmRhcnlWaWV3TWluV2lkdGggPSAgcGFyc2VGbG9hdChzZW9uZGFyeVZpZXdNaW5XaWR0aCk7XG4gICAgICB9XG4gICAgICB2YXIgc2VvbmRhcnlWaWV3TWluSGVpZ2h0ID0gc2Vjb25kYXJ5RWwuY3NzKCdtaW4taGVpZ2h0Jyk7XG4gICAgICBpZiAoKHNlb25kYXJ5Vmlld01pbkhlaWdodCAhPSBcIlwiKSAmJiAhXy5pc05hTihwYXJzZUZsb2F0KHNlb25kYXJ5Vmlld01pbkhlaWdodCkpKSB7XG4gICAgICAgIHNlbGYuX3NlY29uZGFyeVZpZXdNaW5IZWlnaHQgPSAgcGFyc2VGbG9hdChzZW9uZGFyeVZpZXdNaW5IZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9sYXlvdXQoKTtcbiAgICAgIFxuICAgICAgLy8gcmVzaXplIHNjYXRlbmF0byBkYSBHVUlcbiAgICAgIEdVSS5vbignZ3VpcmVzaXplZCcsZnVuY3Rpb24oKXtcbiAgICAgICAgdHJpZ2dlclJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIHJlc2l6ZSBkZWxsYSB3aW5kb3dcbiAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHNldCByZXNpemVkRmlyZWQgdG8gdHJ1ZSBhbmQgZXhlY3V0ZSBkcmF3UmVzaXplIGlmIGl0J3Mgbm90IGFscmVhZHkgcnVubmluZ1xuICAgICAgICBpZiAoZHJhd2luZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyaWdnZXJSZXNpemUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIHJlc2l6ZSBzdWwgcmlkaW1lbnNpb25hbWVudG8gZGVsbGEgc2lkZWJhclxuICAgICAgJCgnLm1haW4tc2lkZWJhcicpLm9uKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQgbXNUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQodGhpcykudHJpZ2dlcigndHJhbnMtZW5kJyk7XG4gICAgICAgICAgdHJpZ2dlclJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIFxuICB0aGlzLl9zZXRWaWV3U2l6ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJpbWFyeVZpZXdUYWcgPSB0aGlzLnN0YXRlLnByaW1hcnlWaWV3VGFnO1xuICAgIHZhciBzZW9uZGFyeVZpZXdUYWcgPSB0aGlzLl9vdGhlclRhZyhwcmltYXJ5Vmlld1RhZyk7XG4gICAgXG4gICAgdmFyIHZpZXdwb3J0V2lkdGggPSB0aGlzLl92aWV3cG9ydFdpZHRoKCk7XG4gICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gdGhpcy5fdmlld3BvcnRIZWlnaHQoKTtcbiAgICBcbiAgICB2YXIgcHJpbWFyeVdpZHRoID0gdmlld3BvcnRXaWR0aDtcbiAgICB2YXIgcHJpbWFyeUhlaWdodCA9IHZpZXdwb3J0SGVpZ2h0O1xuICAgIFxuICAgIHZhciByYXRpbyA9IHRoaXMuc3RhdGUucmF0aW9EZW5vbTtcbiAgICBpZiAocmF0aW8gPiAwKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5zcGxpdCA9PSAnaCcpIHtcbiAgICAgICAgc2Vjb25kYXJ5V2lkdGggPSB0aGlzLnN0YXRlLnNlY29uZGFyeVZpc2libGUgPyBNYXRoLm1heCgodmlld3BvcnRXaWR0aCAvIHJhdGlvKSx0aGlzLl9zZWNvbmRhcnlWaWV3TWluV2lkdGgpIDogMDtcbiAgICAgICAgc2Vjb25kYXJ5SGVpZ2h0ID0gdmlld3BvcnRIZWlnaHQ7XG4gICAgICAgIHByaW1hcnlXaWR0aCA9IHZpZXdwb3J0V2lkdGggLSBzZWNvbmRhcnlXaWR0aDtcbiAgICAgICAgcHJpbWFyeUhlaWdodCA9IHZpZXdwb3J0SGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlY29uZGFyeVdpZHRoID0gdmlld3BvcnRXaWR0aDtcbiAgICAgICAgc2Vjb25kYXJ5SGVpZ2h0ID0gdGhpcy5zdGF0ZS5zZWNvbmRhcnlWaXNpYmxlID8gTWF0aC5tYXgoKHZpZXdwb3J0SGVpZ2h0IC8gcmF0aW8pLHRoaXMuX3NlY29uZGFyeVZpZXdNaW5IZWlnaHQpIDogMDtcbiAgICAgICAgcHJpbWFyeVdpZHRoID0gdmlld3BvcnRXaWR0aDtcbiAgICAgICAgcHJpbWFyeUhlaWdodCA9IHZpZXdwb3J0SGVpZ2h0IC0gc2Vjb25kYXJ5SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0aGlzLnN0YXRlLnZpZXdTaXplc1twcmltYXJ5Vmlld1RhZ10ud2lkdGggPSBwcmltYXJ5V2lkdGg7XG4gICAgdGhpcy5zdGF0ZS52aWV3U2l6ZXNbcHJpbWFyeVZpZXdUYWddLmhlaWdodCA9IHByaW1hcnlIZWlnaHQ7XG4gICAgLy92YXIgcHJpbWFyeUVsID0gJChcIi5nM3ctdmlld3BvcnQgLlwiK3ByaW1hcnlWaWV3VGFnKTtcbiAgICBcbiAgICBcbiAgICB0aGlzLnN0YXRlLnZpZXdTaXplc1tzZW9uZGFyeVZpZXdUYWddLndpZHRoID0gc2Vjb25kYXJ5V2lkdGg7XG4gICAgdGhpcy5zdGF0ZS52aWV3U2l6ZXNbc2VvbmRhcnlWaWV3VGFnXS5oZWlnaHQgPSBzZWNvbmRhcnlIZWlnaHQ7XG4gICAgLy92YXIgc2Vjb25kYXJ5RWwgPSAkKFwiLmczdy12aWV3cG9ydCAuXCIrc2VvbmRhcnlWaWV3VGFnKTtcbiAgfTtcbiAgXG4gIHRoaXMuX3ZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRvcEhlaWdodCA9ICQoXCIubmF2YmFyXCIpLmlubmVySGVpZ2h0KCk7XG4gICAgcmV0dXJuICQod2luZG93KS5pbm5lckhlaWdodCgpIC0gdG9wSGVpZ2h0O1xuICB9O1xuICAgIFxuICB0aGlzLl92aWV3cG9ydFdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9mZnNldCA9ICQoXCIubWFpbi1zaWRlYmFyXCIpLm9mZnNldCgpLmxlZnQ7XG4gICAgdmFyIHdpZHRoID0gJChcIi5tYWluLXNpZGViYXJcIikuaW5uZXJXaWR0aCgpO1xuICAgIHZhciBzaWRlQmFyU3BhY2UgPSB3aWR0aCArIG9mZnNldDtcbiAgICByZXR1cm4gJCh3aW5kb3cpLmlubmVyV2lkdGgoKSAtIHNpZGVCYXJTcGFjZTtcbiAgfTtcbiAgXG4gIHRoaXMuX2xheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzcGxpdENsYXNzVG9BZGQgPSAodGhpcy5zdGF0ZS5zcGxpdCA9PSAnaCcpID8gJ3NwbGl0LWgnIDogJ3NwbGl0LXYnO1xuICAgIHZhciBzcGxpdENsYXNzVG9SZW1vdmUgPSAgKHRoaXMuc3RhdGUuc3BsaXQgPT0gJ2gnKSA/ICdzcGxpdC12JyA6ICdzcGxpdC1jJztcbiAgICAkKFwiLmczdy12aWV3cG9ydCAuZzN3LXZpZXdcIikuYWRkQ2xhc3Moc3BsaXRDbGFzc1RvQWRkKTtcbiAgICAkKFwiLmczdy12aWV3cG9ydCAuZzN3LXZpZXdcIikucmVtb3ZlQ2xhc3Moc3BsaXRDbGFzc1RvUmVtb3ZlKTtcbiAgICBcbiAgICB0aGlzLl9zZXRWaWV3U2l6ZXMoKTtcbiAgICB0aGlzLl9sYXlvdXRDb21wb25lbnRzKCk7XG4gIH07XG4gIFxuICB0aGlzLl9sYXlvdXRDb21wb25lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghX2NvbXBvbmVudHMpe1xuICAgICAgX2NvbXBvbmVudHMgPSBfLm1hcCh0aGlzLl92aWV3c0J5Q29tcG9uZW50SWQsZnVuY3Rpb24odmlldyl7IHJldHVybiB2aWV3LmNvbXBvbmVudDsgfSk7XG4gICAgfVxuICAgIF8uZm9yRWFjaChfY29tcG9uZW50cyxmdW5jdGlvbihjb21wb25lbnQpe1xuICAgICAgLy8gdmllbmUgY2hpYW1hdG8gaWwgbWV0b2RvIHBlciBpbCByaWNhY29sbyBkZWxsZSBkaW1lbnNpb25pIG5laSBjb21wb25lbnRpIGZpZ2xpXG4gICAgICB2YXIgdmlld1RhZyA9IHNlbGYuX3ZpZXdzQnlDb21wb25lbnRJZFtjb21wb25lbnQuZ2V0SWQoKV0udmlld1RhZztcbiAgICAgIHZhciB3aWR0aCA9IHNlbGYuc3RhdGUudmlld1NpemVzW3ZpZXdUYWddLndpZHRoO1xuICAgICAgdmFyIGhlaWdodCA9IHNlbGYuc3RhdGUudmlld1NpemVzW3ZpZXdUYWddLmhlaWdodDtcbiAgICAgIGNvbXBvbmVudC5sYXlvdXQod2lkdGgsaGVpZ2h0KTtcbiAgICB9KVxuICB9O1xuICBcbiAgdGhpcy5fcHJlcGFyZUxheW91dCgpO1xuICBiYXNlKHRoaXMpO1xufTtcbmluaGVyaXQoVmlld3BvcnRTZXJ2aWNlLCBHM1dPYmplY3QpO1xuXG52YXIgdmlld3BvcnRTZXJ2aWNlID0gbmV3IFZpZXdwb3J0U2VydmljZTtcblxudmFyIFZpZXdwb3J0Q29tcG9uZW50ID0gVnVlLmV4dGVuZCh7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuLi9odG1sL3ZpZXdwb3J0Lmh0bWwnKSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiB2aWV3cG9ydFNlcnZpY2Uuc3RhdGVcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVmlld3BvcnRTZXJ2aWNlOiB2aWV3cG9ydFNlcnZpY2UsXG4gIFZpZXdwb3J0Q29tcG9uZW50OiBWaWV3cG9ydENvbXBvbmVudFxufVxuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciByZWplY3QgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVqZWN0O1xuXG5mdW5jdGlvbiBBcGlTZXJ2aWNlKCl7XG4gIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gIHRoaXMuX2Jhc2VVcmwgPSBudWxsO1xuICB0aGlzLl9hcGlVcmxzID0ge307XG4gIFxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihjb25maWcpIHtcblxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9iYXNlVXJsID0gY29uZmlnLnVybHMuYXBpO1xuICAgIHRoaXMuX2FwaUVuZHBvaW50cyA9IGNvbmZpZy51cmxzLmFwaUVuZHBvaW50cztcbiAgfTtcbiAgXG4gIHZhciBob3dNYW55QXJlTG9hZGluZyA9IDA7XG4gIHRoaXMuX2luY3JlbWVudExvYWRlcnMgPSBmdW5jdGlvbigpe1xuICAgIGlmIChob3dNYW55QXJlTG9hZGluZyA9PSAwKXtcbiAgICAgIHRoaXMuZW1pdCgnYXBpcXVlcnlzdGFydCcpO1xuICAgIH1cbiAgICBob3dNYW55QXJlTG9hZGluZyArPSAxO1xuICB9O1xuICBcbiAgdGhpcy5fZGVjcmVtZW50TG9hZGVycyA9IGZ1bmN0aW9uKCl7XG4gICAgaG93TWFueUFyZUxvYWRpbmcgLT0gMTtcbiAgICBpZiAoaG93TWFueUFyZUxvYWRpbmcgPT0gMCl7XG4gICAgICB0aGlzLmVtaXQoJ2FwaXF1ZXJ5ZW5kJyk7XG4gICAgfVxuICB9O1xuICBcbiAgdGhpcy5nZXQgPSBmdW5jdGlvbihhcGksIG9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFwaUVuZFBvaW50ID0gdGhpcy5fYXBpRW5kcG9pbnRzW2FwaV07XG4gICAgaWYgKGFwaUVuZFBvaW50KSB7XG4gICAgICB2YXIgY29tcGxldGVVcmwgPSB0aGlzLl9iYXNlVXJsICsgJy8nICsgYXBpRW5kUG9pbnQ7XG4gICAgICBpZiAob3B0aW9ucy5yZXF1ZXN0KSB7XG4gICAgICAgICBjb21wbGV0ZVVybCA9IGNvbXBsZXRlVXJsICsgJy8nICsgb3B0aW9ucy5yZXF1ZXN0O1xuICAgICAgfVxuICAgICAgdmFyIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IHt9O1xuICAgICAgXG4gICAgICBzZWxmLmVtaXQoYXBpKydxdWVyeXN0YXJ0Jyk7XG4gICAgICB0aGlzLl9pbmNyZW1lbnRMb2FkZXJzKCk7XG4gICAgICByZXR1cm4gJC5nZXQoY29tcGxldGVVcmwscGFyYW1zKVxuICAgICAgLmRvbmUoZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICBzZWxmLmVtaXQoYXBpKydxdWVyeWVuZCcscmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9KVxuICAgICAgLmZhaWwoZnVuY3Rpb24oZSl7XG4gICAgICAgIHNlbGYuZW1pdChhcGkrJ3F1ZXJ5ZmFpbCcsZSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfSlcbiAgICAgIC5hbHdheXMoZnVuY3Rpb24oKXtcbiAgICAgICAgc2VsZi5fZGVjcmVtZW50TG9hZGVycygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgIH1cbiAgfTtcbiAgXG4gIGJhc2UodGhpcyk7XG59XG5pbmhlcml0KEFwaVNlcnZpY2UsRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQXBpU2VydmljZTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgQXBpU2VydmljZSA9IHJlcXVpcmUoJ2NvcmUvYXBpc2VydmljZScpO1xudmFyIFJvdXRlclNlcnZpY2UgPSByZXF1aXJlKCdjb3JlL3JvdXRlcicpO1xudmFyIFByb2plY3RzUmVnaXN0cnkgPSByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdHNyZWdpc3RyeScpO1xudmFyIFBsdWdpbnNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcGx1Z2luL3BsdWdpbnNyZWdpc3RyeScpO1xudmFyIENsaXBib2FyZFNlcnZpY2UgPSByZXF1aXJlKCdjb3JlL2NsaXBib2FyZHNlcnZpY2UnKTtcblxudmFyIEFwcGxpY2F0aW9uU2VydmljZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuc2VjcmV0ID0gXCIjIyMgRzNXIENsaWVudCBBcHBsaWNhdGlvbiBTZXJ2aWNlICMjI1wiO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgdGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuICB0aGlzLl9tb2RhbE92ZXJsYXkgPSBudWxsO1xuICB0aGlzLl9hY3F1aXJlUG9zdEJvb3N0cmFwID0gZmFsc2U7XG4gIHRoaXMuY29uZmlnID0ge307XG5cbiAgLy8gY2hpYW1hIGlsIGNvc3RydXR0b3JlIGRpIEczV09iamVjdCAoY2hlIGluIHF1ZXN0byBtb21lbnRvIG5vbiBmYSBuaWVudGUpXG4gIGJhc2UodGhpcyk7XG4gIFxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihjb25maWcsIGFjcXVpcmVQb3N0Qm9vc3RyYXApe1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICBpZiAoYWNxdWlyZVBvc3RCb29zdHJhcCkge1xuICAgICAgdGhpcy5fYWNxdWlyZVBvc3RCb29zdHJhcCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX2Jvb3RzdHJhcCgpO1xuICB9O1xuICBcbiAgdGhpcy5nZXRDb25maWcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xuICB9O1xuICBcbiAgdGhpcy5nZXRSb3V0ZXJTZXJ2aWNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFJvdXRlclNlcnZpY2U7XG4gIH07XG5cbiAgdGhpcy5nZXRDbGlwYm9hcmRTZXJ2aWNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIENsaXBib2FyZFNlcnZpY2U7XG4gIH1cbiAgXG4gIHRoaXMucG9zdEJvb3RzdHJhcCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgaWYgKCF0aGlzLmNvbXBsZXRlKSB7XG4gICAgICBSb3V0ZXJTZXJ2aWNlLmluaXQoKTtcbiAgICAgIHRoaXMuY29tcGxldGUgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgXG4gIHRoaXMuX2Jvb3RzdHJhcCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vbmVsIGNhc28gaW4gY3VpIChwcmltYSB2b2x0YSkgbCdhcHBsaWNhdGlvbiBzZXJ2aWNlIG5vbiDDqCBwcm9udGFcbiAgICAvL2ZhY2NpbyB1bmEgc2VyaWUgZGkgY29zZVxuICAgIGlmICghdGhpcy5yZWFkeSkge1xuICAgICAgLy8gSW5pemlhbGl6emEgbGEgY29uZmlndXJhemlvbmUgZGVpIHNlcnZpemkuXG4gICAgICAvLyBPZ251bmdvIGNlcmNoZXLDoCBkYWwgY29uZmlnIHF1ZWxsbyBkaSBjdWkgYXZyw6AgYmlzb2dub1xuICAgICAgLy8gdW5hIHZvbHRhIGZpbml0YSBsYSBjb25maWd1cmF6aW9uZSBlbWV0dG8gbCdldmVudG8gcmVhZHkuXG4gICAgICAvLyBBIHF1ZXN0byBwdW50byBwb3Ryw7IgYXZ2aWFyZSBsJ2lzdGFuemEgVnVlIGdsb2JhbGVcbiAgICAgICQud2hlbihcbiAgICAgICAgQXBpU2VydmljZS5pbml0KHRoaXMuX2NvbmZpZyksXG4gICAgICAgIFByb2plY3RzUmVnaXN0cnkuaW5pdCh0aGlzLl9jb25maWcpXG4gICAgICApLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgUGx1Z2luc1JlZ2lzdHJ5LmluaXQoe1xuICAgICAgICAgIHBsdXNpbmdCYXNlVXJsOiBzZWxmLl9jb25maWcudXJscy5zdGF0aWN1cmwsXG4gICAgICAgICAgcGx1Z2luc0NvbmZpZ3M6IHNlbGYuX2NvbmZpZy5wbHVnaW5zXG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLmVtaXQoJ3JlYWR5Jyk7XG4gICAgICAgIGlmICghc2VsZi5fYWNxdWlyZVBvc3RCb29zdHJhcCkge1xuICAgICAgICAgIHNlbGYucG9zdEJvb3RzdHJhcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn07XG5pbmhlcml0KEFwcGxpY2F0aW9uU2VydmljZSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBBcHBsaWNhdGlvblNlcnZpY2U7XG4iLCJmdW5jdGlvbiBDbGlwYm9hcmRTZXJ2aWNlKCl7XG4gIHZhciBfZGF0YSA9IHt9O1xuICB0aGlzLnNldCA9IGZ1bmN0aW9uKGNsaXBCb2FyZElkLCBkYXRhKSB7XG4gICAgLy8gaWQgZGVsbGEgZmVhdHVyZSBjb3BpYXRhLCBkYXRhIHNvbm8gZmlsZWRzIGUgcmVsYXRpb25zIHBhc3NhdGUgYWwgZm9ybVxuICAgIF9kYXRhW2NsaXBCb2FyZElkXSA9IGRhdGE7XG4gIH07XG5cbiAgdGhpcy5nZXQgPSBmdW5jdGlvbihjbGlwQm9hcmRJZCkge1xuICAgIGlmIChfZGF0YSkge1xuICAgICAgdmFyIGRhdGEgPSBfZGF0YVtjbGlwQm9hcmRJZF07XG4gICAgICAvLyBwb2kgdmFkbyBhIGNhbmNlbGxhcmUgaSBkYXRpXG4gICAgICBkZWxldGUgX2RhdGFbY2xpcEJvYXJkSWRdO1xuICAgICAgLy8gcmV0aXR1aXNjZSBpIGRhdGkgY2hlIHNvbm8gc3RhdGkgc2FsdmF0aVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfZGF0YVxuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQ2xpcGJvYXJkU2VydmljZTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciBSZWxhdGlvbkVkaXRCdWZmZXIgPSByZXF1aXJlKCcuL3JlbGF0aW9uZWRpdGJ1ZmZlcicpO1xuXG5mdW5jdGlvbiBFZGl0QnVmZmVyKGVkaXRvcikge1xuICB0aGlzLl9lZGl0b3IgPSBlZGl0b3I7XG5cbiAgdGhpcy5fb3JpZ1ZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgc291cmNlOiBuZXcgb2wuc291cmNlLlZlY3RvcigpXG4gIH0pO1xuICB0aGlzLl9jbG9uZUxheWVyKCk7XG5cbiAgLy9idWZmZXIgZGVsbGUgZ2VvbWV0cmllXG4gIHRoaXMuX2dlb21ldHJpZXNCdWZmZXIgPSB7fTtcblxuICAvLyBidWZmZXIgZGVnbGkgYXR0cmlidXRpXG4gIHRoaXMuX2F0dHJpYnV0ZXNCdWZmZXIgPSB7fTtcblxuICAvLyBidWZmZXIgZGVnbGkgYXR0cmlidXRpIGRlbGxlIHJlbGF6aW9uaVxuICB0aGlzLl9yZWxhdGlvbnNCdWZmZXJzID0ge307XG5cblxufVxuaW5oZXJpdChFZGl0QnVmZmVyLEczV09iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdEJ1ZmZlcjtcblxudmFyIHByb3RvID0gRWRpdEJ1ZmZlci5wcm90b3R5cGU7XG5cbi8vZnVuemlvbmUgY29tbWl0XG5wcm90by5jb21taXQgPSBmdW5jdGlvbigpIHtcbiAgLy8gcHJlbmRvIHR1dHRlIGxlIGZlYXR1cmUgZGFsIHZldHRvcmUgZGkgZWRpdGluZyBkZWxsJ2VkaXRvclxuICB2YXIgbmV3RmVhdHVyZXMgPSB0aGlzLl9lZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkuZ2V0RmVhdHVyZXMoKTtcbiAgLy9hZ2dpdW5nbyBsZSBmZWF0dXJlcyBudW92ZSBhbCBsYXllciB2ZXR0b3JpYWxlIG9yaWdpbmFsZVxuICB0aGlzLl9lZGl0b3IuZ2V0VmVjdG9yTGF5ZXIoKS5hZGRGZWF0dXJlcyhuZXdGZWF0dXJlcyk7XG4gIC8vIGZhY2NpbyBpbCBjbGVhciBkZWwgbGF5ZXJlIGRpIGVkaXRpbmdcbiAgdGhpcy5fZWRpdG9yLmdldEVkaXRWZWN0b3JMYXllcigpLmNsZWFyKCk7XG4gIC8vIGZhY2NpbyBpbCBjbGVhciBkZWwgYnVmZmVyXG4gIHRoaXMuX2NsZWFyQnVmZmVycygpO1xuICAvL2ZhY2NpbyBpbCBjbG9uZSBkZWwgTGF5ZXIgVmVjdG9yIG9yaWdpbmFsZSBkZWxsYSBtYXBwYVxuICB0aGlzLl9jbG9uZUxheWVyKCk7XG59O1xuXG5wcm90by51bmRvQWxsID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fcmVzZXRWZWN0b3JMYXllcigpO1xuICB0aGlzLl9jbGVhckJ1ZmZlcnMoKTtcbn07XG5cbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9jbGVhckJ1ZmZlcnMoKTtcbn07XG5cbnByb3RvLmdlbmVyYXRlSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2VkaXRvci5nZW5lcmF0ZUlkKCk7XG59O1xuXG4vLyBmdW56aW9uZSBjaGUgYWdnaW5nZSBsYSBmZWF0dXJlIGdlb21ldHJpY2EgbmVsIGJ1ZmZlclxuLy8gZ2VvbWV0cnlcbnByb3RvLmFkZEZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIC8vIG5lbCBjYXNvIG5vbiBhYmJpYSB1bmEgdW4gaWQgKGNhc28gbnVvdmEgZmVhdHVyZSkgbGEgZ2VuZXJvIGNhdXNhbGVcbiAgaWYoIWZlYXR1cmUuZ2V0SWQoKSkge1xuICAgIGZlYXR1cmUuc2V0SWQodGhpcy5nZW5lcmF0ZUlkKCkpO1xuICB9XG4gIC8vIGFnZ2l1bmdvIGxhIGZlYXR1cmUgYWwgYnVmZmVyIChuZWwgY3NvIGRpIG51b3ZhIGZlYXR1cmVcbiAgdGhpcy5fYWRkRWRpdFRvR2VvbWV0cnlCdWZmZXIoZmVhdHVyZSwgJ2FkZCcpO1xuICBjb25zb2xlLmxvZyhcIkluc2VyaXRhIG51b3ZhIGZlYXR1cmU6IChJRDogXCIrZmVhdHVyZS5nZXRJZCgpK1wiIFwiK2ZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpK1wiKSBuZWwgYnVmZmVyXCIpO1xufTtcbi8vIGZ1bnppb25lIGNoaWFtYXRhIGluIGZhc2UgZGkgdXBkYXRlIGRlbGxhIEZlYXR1cmVcbnByb3RvLnVwZGF0ZUZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIHRoaXMuX2FkZEVkaXRUb0dlb21ldHJ5QnVmZmVyKGZlYXR1cmUsICd1cGRhdGUnKTtcbiAgY29uc29sZS5sb2coXCJNb2RpZmljYXRhIGZlYXR1cmU6IChJRDogXCIrZmVhdHVyZS5nZXRJZCgpK1wiIFwiK2ZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpK1wiKSBuZWwgYnVmZmVyXCIpO1xufTtcblxucHJvdG8uZGVsZXRlRmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUpe1xuICB0aGlzLl9hZGRFZGl0VG9HZW9tZXRyeUJ1ZmZlcihmZWF0dXJlLCdkZWxldGUnKTtcbiAgY29uc29sZS5sb2coXCJSaW1vc3NhIGZlYXR1cmU6IChJRDogXCIrZmVhdHVyZS5nZXRJZCgpK1wiIFwiK2ZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpK1wiKSBuZWwgYnVmZmVyXCIpO1xufTtcbi8vIGZ1bnppb25lIGNoZSBzZXJ2ZXIgcGVyIGZhcmUgdXBkYXRlIGRpIHVuYSBmZWF0dXJlXG5wcm90by51cGRhdGVGaWVsZHMgPSBmdW5jdGlvbihmZWF0dXJlLCByZWxhdGlvbnMpIHtcbiAgLy8gbmVsIGNhc28gZGkgdW5hIG51b3ZhIGZlYXR1cmVcbiAgaWYoIWZlYXR1cmUuZ2V0SWQoKSkge1xuICAgIC8vIGdlbmVybyBpZCByYW5kb20gZSBsbyBzZXR0byBhbGxhIGZlYXR1cmVcbiAgICBmZWF0dXJlLnNldElkKHRoaXMuZ2VuZXJhdGVJZCgpKTtcbiAgfVxuICB0aGlzLl9hZGRFZGl0VG9WYWx1ZXNCdWZmZXJzKGZlYXR1cmUsIHJlbGF0aW9ucyk7XG4gIGNvbnNvbGUubG9nKFwiTW9kaWZpY2F0aSBhdHRyaWJ1dGkgZmVhdHVyZTogKElEOiBcIitmZWF0dXJlLmdldElkKCkrXCIpXCIpO1xufTtcblxucHJvdG8uZ2V0RmVhdHVyZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbihmaWQpe1xuICBpZih0aGlzLl9hdHRyaWJ1dGVzQnVmZmVyW2ZpZF0pe1xuICAgIHJldHVybiB0aGlzLl9hdHRyaWJ1dGVzQnVmZmVyW2ZpZF0uc2xpY2UoLTEpWzBdO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxucHJvdG8uYXJlRmVhdHVyZUF0dHJpYnV0ZXNFZGl0ZWQgPSBmdW5jdGlvbihmaWQpe1xuICBpZiAodGhpcy5fYXR0cmlidXRlc0J1ZmZlcltmaWRdKXtcbiAgICByZXR1cm4gdGhpcy5fYXR0cmlidXRlc0J1ZmZlcltmaWRdLmxlbmd0aCA+IC0xO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4vLyBmdW56aW9uZSBjaGUgc2UgbmVsIGJ1ZmZlciBkZWxsZSByZWxhemlvbmlcbi8vIMOoIHN0YXRvIGluc2VyaXRvIGdpw6AgbW9kaWZpY2hlIHN1IHJlbGF6aW9uaSBkaSBxdWVsbGEgZmVhdHVyZVxucHJvdG8uaGFzUmVsYXRpb25zRWRpdHMgPSBmdW5jdGlvbihmaWQpe1xuICB2YXIgaGFzRWRpdHMgPSBmYWxzZTtcbiAgXy5mb3JFYWNoKHRoaXMuX3JlbGF0aW9uc0J1ZmZlcnNbZmlkXSwgZnVuY3Rpb24ocmVsYXRpb25CdWZmZXIpIHtcbiAgICBoYXNFZGl0cyA9IGhhc0VkaXRzIHx8IHJlbGF0aW9uQnVmZmVyLmhhc1JlbGF0aW9uRWxlbWVudHMoKTtcbiAgfSlcbiAgcmV0dXJuIGhhc0VkaXRzO1xufTtcblxucHJvdG8uZ2V0UmVsYXRpb25zRWRpdHMgPSBmdW5jdGlvbihmaWQpe1xuICB2YXIgcmVsYXRpb25zID0ge307XG4gIF8uZm9yRWFjaCh0aGlzLl9yZWxhdGlvbnNCdWZmZXJzW2ZpZF0sZnVuY3Rpb24ocmVsYXRpb25CdWZmZXIpe1xuICAgIHJlbGF0aW9uc1tyZWxhdGlvbkJ1ZmZlci5nZXRSZWxhdGlvbk5hbWUoKV0gPSByZWxhdGlvbkJ1ZmZlci5nZXRSZWxhdGlvbkVsZW1lbnRzKCk7XG4gIH0pO1xuICByZXR1cm4gcmVsYXRpb25zO1xufTtcbi8vIGZ1bnppb25lIGNoZSBjb2xsZXppb25hIHR1dHRpIGdsaSAodW5pY2kpIGRlbGxlIGZlYXR1ZXMgbW9kaWZpY2F0ZVxuLy8gZGVpIGJ1ZmZlciBnZW9tZXRyeSBlIGF0dHJpYnV0ZVxucHJvdG8uY29sbGVjdEZlYXR1cmVJZHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdlb21ldHJpZXNCdWZmZXJzID0gdGhpcy5fZ2VvbWV0cmllc0J1ZmZlcjtcbiAgdmFyIGF0dHJpYnV0ZXNCdWZmZXJzID0gdGhpcy5fYXR0cmlidXRlc0J1ZmZlcjtcbiAgdmFyIG1vZGlmaWVkRmlkcyA9IFtdO1xuICBtb2RpZmllZEZpZHMgPSBfLmNvbmNhdChtb2RpZmllZEZpZHMsXy5rZXlzKGdlb21ldHJpZXNCdWZmZXJzKSk7XG4gIG1vZGlmaWVkRmlkcyA9IF8uY29uY2F0KG1vZGlmaWVkRmlkcyxfLmtleXMoYXR0cmlidXRlc0J1ZmZlcnMpKTtcbiAgcmV0dXJuIF8udW5pcShtb2RpZmllZEZpZHMpO1xufTtcbi8vIGNoZSBjb2xsZXppb25hIHR1dHRlIGxlIG1vZGlmY2hlIGZhdHRlIHF1YW5kbyB2aWVuZSBwcmVtdXRvIG8gZmF0dG8gc2FsdmFcbi8vIGRhbGwnZWRpdG9yIG8gcGFzc2FnZ2lvIGRhIHVuIGVkaXRpbmcgZGkgdW4gbGF5ZXIgYWxsJ2FsdHJvXG5wcm90by5jb2xsZWN0RmVhdHVyZXMgPSBmdW5jdGlvbihzdGF0ZSwgYXNHZW9KU09OKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZ2VvbWV0cmllc0J1ZmZlcnMgPSB0aGlzLl9nZW9tZXRyaWVzQnVmZmVyO1xuICB2YXIgYXR0cmlidXRlc0J1ZmZlcnMgPSB0aGlzLl9hdHRyaWJ1dGVzQnVmZmVyO1xuICB2YXIgYXNHZW9KU09OID0gYXNHZW9KU09OIHx8IGZhbHNlO1xuICAvLyBwcmVuZG8gaWwganNvbm8gZm9ybWF0IHBlciBwb3RlciBwb2kgZmFyZSBpbCBwb3N0byB2ZXJzbyBpbCBzZXJ2ZXJcbiAgdmFyIEdlb0pTT05Gb3JtYXQgPSBuZXcgb2wuZm9ybWF0Lkdlb0pTT04oKTtcbiAgdmFyIG1vZGlmaWVkRmlkcyA9IHRoaXMuY29sbGVjdEZlYXR1cmVJZHMoKTtcbiAgdmFyIGxheWVyO1xuICBpZiAoc3RhdGUgPT0gJ25ldycpIHtcbiAgICBsYXllciA9IHNlbGYuX2VkaXRvci5nZXRFZGl0VmVjdG9yTGF5ZXIoKTtcbiAgfVxuICBlbHNlIHtcbiAgICBsYXllciA9IHNlbGYuX2VkaXRvci5nZXRWZWN0b3JMYXllcigpO1xuICB9XG5cbiAgdmFyIGZlYXR1cmVzID0gW107XG4gIF8uZm9yRWFjaChtb2RpZmllZEZpZHMsZnVuY3Rpb24oZmlkKXtcblxuICAgIHZhciBmZWF0dXJlID0gbGF5ZXIuZ2V0RmVhdHVyZUJ5SWQoZmlkKTtcbiAgICB2YXIgaXNOZXcgPSBzZWxmLl9pc05ld0ZlYXR1cmUoZmlkKTtcbiAgICB2YXIgYWRkZWRGZWF0dXJlID0gKHN0YXRlID09ICduZXcnICYmIGlzTmV3ICYmIGZlYXR1cmUpO1xuICAgIHZhciB1cGRhdGVkRmVhdHVyZSA9IChzdGF0ZSA9PSAndXBkYXRlZCcgJiYgIWlzTmV3ICYmIGZlYXR1cmUpO1xuICAgIHZhciBkZWxldGVkRmVhdHVyZSA9IChzdGF0ZSA9PSAnZGVsZXRlZCcgJiYgIWlzTmV3ICYmICFmZWF0dXJlKTtcblxuICAgIGlmIChhZGRlZEZlYXR1cmUgfHwgdXBkYXRlZEZlYXR1cmUpe1xuICAgICAgaWYgKGFzR2VvSlNPTil7XG4gICAgICAgIGZlYXR1cmUgPSBHZW9KU09ORm9ybWF0LndyaXRlRmVhdHVyZU9iamVjdChmZWF0dXJlKTtcbiAgICAgIH1cbiAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRlbGV0ZWRGZWF0dXJlKSB7XG4gICAgICBmZWF0dXJlcy5wdXNoKGZpZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZlYXR1cmVzO1xufTtcblxucHJvdG8uY3JlYXRlRmVhdHVyZSA9IGZ1bmN0aW9uKGZpZCxnZW9tZXRyeSxhdHRyaWJ1dGVzKXtcbiAgdmFyIGZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSgpO1xuICBmZWF0dXJlLnNldElkKGZpZCk7XG4gIGZlYXR1cmUuc2V0R2VvbWV0cnkoZ2VvbWV0cnkpO1xuICBmZWF0dXJlLnNldFByb3BlcnRpZXMoYXR0cmlidXRlcyk7XG4gIHJldHVybiBmZWF0dXJlO1xufTtcblxucHJvdG8uY29sbGVjdFJlbGF0aW9ucyA9IGZ1bmN0aW9uKCl7XG4gIHZhciByZWxhdGlvbnNFZGl0cyA9IHtcbiAgICBhZGQ6IFtdLFxuICAgIGRlbGV0ZTogW10sXG4gICAgdXBkYXRlOiBbXVxuICB9O1xuXG4gIHZhciByZWxhdGlvbnNFbGVtZW50cyA9IHt9O1xuICBfLmZvckVhY2godGhpcy5fcmVsYXRpb25zQnVmZmVycyxmdW5jdGlvbihyZWxhdGlvbnNCdWZmZXJzLGZpZCl7XG5cbiAgICB2YXIgbmV3UmVsYXRpb25FZGl0cyA9IHtcbiAgICAgIGZpZDogZmlkLFxuICAgICAgcmVsYXRpb25zOiB7fVxuICAgIH07XG4gICAgdmFyIHVwZGF0ZWRSZWxhdGlvbkVkaXRzID0ge1xuICAgICAgZmlkOiBmaWQsXG4gICAgICByZWxhdGlvbnM6IHt9XG4gICAgfTtcbiAgICB2YXIgZGVsZXRlZFJlbGF0aW9uRWRpdHMgPSB7XG4gICAgICBmaWQ6IGZpZCxcbiAgICAgIHJlbGF0aW9uczoge31cbiAgICB9O1xuXG4gICAgXy5mb3JFYWNoKHJlbGF0aW9uc0J1ZmZlcnMsZnVuY3Rpb24gKHJlbGF0aW9uQnVmZmVyKSB7XG4gICAgICB2YXIgcmVsYXRpb25OYW1lID0gcmVsYXRpb25CdWZmZXIuZ2V0UmVsYXRpb25OYW1lKCk7XG5cbiAgICAgIHZhciBuZXdFbGVtZW50cyA9IHJlbGF0aW9uQnVmZmVyLmdldFJlbGF0aW9uRWxlbWVudHNPbmx5RmllbGRzVmFsdWVzKCdORVcnKTtcbiAgICAgIHZhciB1cGRhdGVkRWxlbWVudHMgPSByZWxhdGlvbkJ1ZmZlci5nZXRSZWxhdGlvbkVsZW1lbnRzT25seUZpZWxkc1ZhbHVlcygnT0xEJyk7IC8vIG5lbCBidWZmZXIgdmVuZ29ubyBpbnNlcml0aSBzZW1wcmUgdHV0dGkgZ2xpIGVsZW1lbnRpIHByZWVzaXN0ZW50aSAoY2hlIHNpYW5vIGVmZmV0dGl2YW1lbnRlIGFmZmlvcm5hdGkgbyBtZW5vKVxuICAgICAgdmFyIGRlbGV0ZWRFbGVtZW50cyA9IHJlbGF0aW9uQnVmZmVyLmdldFJlbGF0aW9uRWxlbWVudHNPbmx5RmllbGRzVmFsdWVzKCdERUxFVEVEJyk7XG5cblxuICAgICAgdmFyIG5ld0VsZW1lbnRzRWRpdHMgPSBbXTtcbiAgICAgIHZhciB1cGRhdGVkRWxlbWVudHNFZGl0cyA9IFtdO1xuICAgICAgdmFyIGRlbGV0ZWRFbGVtZW50c0VkaXRzID0gW107XG5cbiAgICAgIF8uZm9yRWFjaChuZXdFbGVtZW50cyxmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgbmV3RWxlbWVudHNFZGl0cy5wdXNoKHtcbiAgICAgICAgICBpZDogZWxlbWVudC5pZCxcbiAgICAgICAgICBmaWVsZHM6IGVsZW1lbnQuZmllbGRzXG4gICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgXy5mb3JFYWNoKHVwZGF0ZWRFbGVtZW50cyxmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgdXBkYXRlZEVsZW1lbnRzRWRpdHMucHVzaCh7XG4gICAgICAgICAgaWQ6IGVsZW1lbnQuaWQsXG4gICAgICAgICAgZmllbGRzOiBlbGVtZW50LmZpZWxkc1xuICAgICAgICB9KVxuICAgICAgfSk7XG5cbiAgICAgIF8uZm9yRWFjaChkZWxldGVkRWxlbWVudHMsZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgIGRlbGV0ZWRFbGVtZW50c0VkaXRzLnB1c2goe1xuICAgICAgICAgIGlkOiBlbGVtZW50LmlkXG4gICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgbmV3UmVsYXRpb25FZGl0cy5yZWxhdGlvbnNbcmVsYXRpb25OYW1lXSA9IG5ld0VsZW1lbnRzRWRpdHM7XG4gICAgICB1cGRhdGVkUmVsYXRpb25FZGl0cy5yZWxhdGlvbnNbcmVsYXRpb25OYW1lXSA9IHVwZGF0ZWRFbGVtZW50c0VkaXRzO1xuICAgICAgZGVsZXRlZFJlbGF0aW9uRWRpdHMucmVsYXRpb25zW3JlbGF0aW9uTmFtZV0gPSBkZWxldGVkRWxlbWVudHNFZGl0cztcblxuICAgIH0pO1xuICAgIHJlbGF0aW9uc0VkaXRzLmFkZC5wdXNoKG5ld1JlbGF0aW9uRWRpdHMpO1xuICAgIHJlbGF0aW9uc0VkaXRzLnVwZGF0ZS5wdXNoKHVwZGF0ZWRSZWxhdGlvbkVkaXRzKTtcbiAgICByZWxhdGlvbnNFZGl0cy5kZWxldGUucHVzaChkZWxldGVkUmVsYXRpb25FZGl0cyk7XG5cbiAgfSk7XG4gIHJldHVybiByZWxhdGlvbnNFZGl0cztcbn07XG5cbnByb3RvLl9hZGRFZGl0VG9HZW9tZXRyeUJ1ZmZlciA9IGZ1bmN0aW9uKGZlYXR1cmUsIG9wZXJhdGlvbikge1xuICAvLyBhbCBtb21lbnRvIG5vbiBwcmVuZGUgaW4gY29uc2lkZXJhemlvbmUsIHVwZGF0ZSAsIGFkZCB2YWxvcmkgZGkgb3BlcmF0aW9uXG4gIC8vIGluIHF1YW50byB2ZXJpZmljYSBzZSDDqCB1bmEgbnVvdmEgZmVhdHVyZSBvIG5vXG4gIC8vIHJlY3VwZXJvIGlsIGJ1ZmZlciBkZWxsZSBnZW9tZXRyaWVcbiAgdmFyIGdlb21ldHJpZXNCdWZmZXIgPSB0aGlzLl9nZW9tZXRyaWVzQnVmZmVyO1xuICAvLyByZWN1cGVybyBsJ2lkZSBkZWxsYSBmZWF0dXJlXG4gIHZhciBpZCA9IGZlYXR1cmUuZ2V0SWQoKTtcbiAgLy8gcmVjdXBlcm8gbGEgZ2VvbWV0cmlhXG4gIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgLy8gY2FzbyBvcGVyYXppb25lIGRlbGV0ZVxuICBpZiAob3BlcmF0aW9uID09ICdkZWxldGUnKXtcbiAgICBnZW9tZXRyeSA9IG51bGw7XG4gICAgLy8gcHJlbmRvIGlsIGxheWVyIG9yaWdpbmFsZSBvIGwnZWRpdGluZyBMYXllclxuICAgIHZhciBsYXllciA9IHRoaXMuX2lzTmV3RmVhdHVyZShpZCkgPyB0aGlzLl9lZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkgOiB0aGlzLl9lZGl0b3IuZ2V0VmVjdG9yTGF5ZXIoKTtcbiAgICAvLyByaW11b3ZvIGxhIGZlYXR1cmUgZGFsbGEgc291cmNlXG4gICAgbGF5ZXIuZ2V0U291cmNlKCkucmVtb3ZlRmVhdHVyZShmZWF0dXJlKTtcbiAgfVxuICAvLyBzZSBub24gcHJlc2VudGUgbmVsIGdlb21ldHJ5IGJ1ZmZlclxuICAvLyBjcmVvIGFycmF5IHJpZmVyaXRhIGEgcXVlbGxhIGZlYXR1cmUgcGVyIG1vbml0b3JhcmUgdHV0dGUgbGUgbW9kaWZpY2UgY2hlIGF2dmVycmFubm9cbiAgLy8gc3UgcXVlbGxhIGZlYXR1cmVcbiAgaWYgKCFfLmhhcyhnZW9tZXRyaWVzQnVmZmVyLGlkKSkge1xuICAgIGdlb21ldHJpZXNCdWZmZXJbaWRdID0gW107XG4gIH1cbiAgZ2VvbWV0cmllc0J1ZmZlcltpZF0ucHVzaChnZW9tZXRyeSk7XG4gIHRoaXMuX3NldERpcnR5KHRydWUpO1xufTtcbi8vIGZ1bnppb25lIGNoZSBtZXR0ZSBpbiByZWxhemlvbmUgZmVhdHVyZSBlIHJlbGF6aW9uaVxucHJvdG8uX2FkZEVkaXRUb1ZhbHVlc0J1ZmZlcnMgPSBmdW5jdGlvbihmZWF0dXJlLCByZWxhdGlvbnMpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIHByZW5kZSBpZCBkZWxsYSBmZWF0dXJlXG4gIHZhciBmaWQgPSBmZWF0dXJlLmdldElkKCk7XG4gIC8vIHByZW5kZSBnbGkgYXR0cmlidXRpIGRlbGxhIGZlYXR1cmVcbiAgdmFyIGF0dHJpYnV0ZXMgPSBmZWF0dXJlLmdldFByb3BlcnRpZXMoKTtcbiAgLy8gcHJlbmRvIGlsIGJ1ZmZlciBkZWdsaSBhdHRyaWJ1dGlcbiAgdmFyIGF0dHJpYnV0ZXNCdWZmZXIgPSB0aGlzLl9hdHRyaWJ1dGVzQnVmZmVyO1xuICAvL3ZlcmlmaWNhIHNlIGwnb2dnZXR0byBhdHRyaWJ1dGVidWZmZXIgaGEgbCdpZCBkZWwgbGF5ZXJcbiAgaWYgKCFfLmhhcyhhdHRyaWJ1dGVzQnVmZmVyLCBmaWQpKSB7XG4gICAgLy9uZWwgY2FzbyBub24gY2kgc2lhIGNyZWEgbGEgY2hpYXZlIGUgYXNzZWduYSB1biBhcnJheSB2dW90b1xuICAgIGF0dHJpYnV0ZXNCdWZmZXJbZmlkXSA9IFtdO1xuICB9XG4gIC8vIGEgcXVlbCBwdW50byBpbnNlcmlzY28gdW5hIG51b3ZhIG1vZGlmaWNhIG5lbGwnYXJyYXkgZGVsbGUgbW9kaWZpY2hlXG4gIC8vIGNoZSByaWd1cmFkYSBxdWVsbGEgcGFydGljb2xhcmUgZmVhdHVyZSBpZGVudGlmaWNhdGEgZGFsbGEgY2hpYXZlIGlkXG4gIGF0dHJpYnV0ZXNCdWZmZXJbZmlkXS5wdXNoKGF0dHJpYnV0ZXMpO1xuICAvLyBzZSBzbm9ubyBzdGF0ZSBwYXNzYXRlIHJlbGF6aW9uaVxuICBpZiAocmVsYXRpb25zKSB7XG4gICAgLy8gY2xpY28gc3Ugb2dudW5hIGRpIGVzc2VyZVxuICAgIF8uZm9yRWFjaChyZWxhdGlvbnMsIGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gICAgICAvL3NlIGVzaXN0ZSBnacOgIG5lbGwnb2dnZXR0byByZWxhdGlvbiBidWZmZXIgbGVnYXRlIGEgcXVlbGxhIGZlYXR1cmVcbiAgICAgIGlmICghXy5oYXMoc2VsZi5fcmVsYXRpb25zQnVmZmVycywgZmlkKSkge1xuICAgICAgICAvLyBhdHJpbWVudGkgZmFjY2lvIGNvbWUgaG8gZmF0dG8gc29wcmEgcGVyIGlsIGJ1ZmZlciBkZWdsaSBhdHRyaWJ1dGlcbiAgICAgICAgLy8gbWEgb3JhIHN1bCBidWZmZXIgZGVsbGUgcmVsYXppb25pIGUgbm9uIHBpw7kgdW4gYXJyYXkgbWEgdW4gb2dldHRvXG4gICAgICAgIC8vIGNhcmF0dGVyaXp6YXRvIGRhbCBub21lIGRlbGxhIHJlbGF6aW9uZVxuICAgICAgICBzZWxmLl9yZWxhdGlvbnNCdWZmZXJzW2ZpZF0gPSB7fTtcbiAgICAgIH1cbiAgICAgIC8vIHZlcmlmaWNvIG9sdHJlIGFsbGEgY2hpYXZlIGRlbGxhIGZlYXR1cmUgc2UgY29udGllbmUgaWwgbm9tZSBkZWxsYSByZWxhemlvbmVcbiAgICAgIC8vIGNoZSBub24gw6ggYWx0cm8gaWwgbm9tZSBkZWwgbGF5ZXIgY2hlIGluIHJlbGF6aW9uZSBjb24gbGEgZmVhdHVyZSBkZWwgbGF5ZXIgY2hlIHNpIHN0YVxuICAgICAgLy8gZWRpdGFuZG9cbiAgICAgIGlmICghXy5oYXMoc2VsZi5fcmVsYXRpb25zQnVmZmVyc1tmaWRdLCByZWxhdGlvbi5uYW1lKSkge1xuICAgICAgICAvLyBzZSBub24gcHJlc2VudGUgY3JlbyB1bmEgbnVvdmEgaXN0YW56YSBkaSBSZWxhdGlvbkVkaXRCdWZmZXJcbiAgICAgICAgc2VsZi5fcmVsYXRpb25zQnVmZmVyc1tmaWRdW3JlbGF0aW9uLm5hbWVdID0gbmV3IFJlbGF0aW9uRWRpdEJ1ZmZlcihzZWxmLCByZWxhdGlvbi5uYW1lKTtcbiAgICAgIH1cbiAgICAgIC8vIHByZW5kbyBsJ2lzdGFuemEgZGkgUmVsYXRpb25FZGl0QnVmZmVyIChjcmVhdGEgc3VsIG1vbWVudG8gbyBlc2lzdGVudGUpXG4gICAgICB2YXIgcmVsYXRpb25CdWZmZXIgPSBzZWxmLl9yZWxhdGlvbnNCdWZmZXJzW2ZpZF1bcmVsYXRpb24ubmFtZV07XG4gICAgICAvLyBjaGlhbW8gaWwgbWV0b2RvIHVwZGF0ZVJlbGF0aW9uIGRlbGwnaXN0YW56YVxuICAgICAgcmVsYXRpb25CdWZmZXIudXBkYXRlUmVsYXRpb24ocmVsYXRpb24pO1xuICAgIH0pO1xuICB9XG4gIHRoaXMuX3NldERpcnR5KHRydWUpO1xufTtcblxuLy8gZ3VhcmRvIHNlIMOoIHVuYSBmZWF0dXJlIGdpw6AgIHByZXNlbnRlIG5lbCBidWZmZXIgZGVsbGUgbnVvdmUgZ2VvbWV0cmllXG5wcm90by5faXNOZXdGZWF0dXJlID0gZnVuY3Rpb24oZmlkKXtcbiAgLy9yZXR1cm4gaWQudG9TdHJpbmcoKS5pbmRleE9mKCdfbmV3XycpID4gLTE7XG4gIHJldHVybiB0aGlzLl9lZGl0b3IuaXNOZXdGZWF0dXJlKGZpZCk7XG59O1xuLy8gZnVuemlvbmUgZWRpdCBidWZmZXIgY2hlIGNoaWFtYSBpbCBzZXQgZGlydHlcbnByb3RvLl9zZXREaXJ0eSA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgLy8gZmFjY2lvIHVuIE9SIGxvZ2ljbyB0cmEgcXVlbGxvIGludmlhdG8gZGEgcXVhbHNpYXNpIHB1bnRvIGRlbCdlZGl0IGJ1ZmZlclxuICAvLyBvIHF1ZWxsbyBkYWwgcmVsYXRpb25FZGl0QnVmZmVyIG9iamVjdCAoY2hlIHNpIHB1w7IgdmVyaWZpY2FyZSlcbiAgLy8gbmVsIGNhc28gaW4gY3VpIGZhY2NpbyB1biBjbGVuYSBkZWxsJ2VkaXRpbmcgZGVsbGEgcmVsYXppb25lXG4gIC8vIGUgbGEgdmVyaWZpY2Egc2VpIGkgdmFyaSBidWZmZXIgc29ubyBvZ2dldHRpIHZ1b3RpXG4gIHZhciBpc0RpcnR5ID0gYm9vbCB8fCAhXy5pc0VtcHR5KHRoaXMuX2dlb21ldHJpZXNCdWZmZXIpIHx8ICFfLmlzRW1wdHkodGhpcy5fYXR0cmlidXRlc0J1ZmZlcikgfHwgIV8uaXNFbXB0eSh0aGlzLl9yZWxhdGlvbnNBdHRyaWJ1dGVzQnVmZmVyKTtcbiAgdGhpcy5fZWRpdG9yLl9zZXREaXJ0eShpc0RpcnR5KTtcbn07XG5cbnByb3RvLl9yZXNldFZlY3RvckxheWVyID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fZWRpdG9yLnZlY3RvTGF5ZXIgPSB0aGlzLl9vcmlnVmVjdG9yTGF5ZXI7XG4gIHRoaXMuX29yaWdWZWN0b3JMYXllci5nZXRTb3VyY2UoKS5jbGVhcigpO1xufTtcbi8vIGZhIGlsIGNlbGEgZGkgdHV0dGkgaSBidWZmZXJzXG4vLyBlIGNoaWFtYSBpbCBzZXREaXJ0eSBkZWxsJ2VkaXRvIHBhc3Nhbm9nbGkgZmFsc2Vcbi8vIHF1aW5kaSBkaXNhYmlsaXRhbmRvIGlsIHRhc3RvIHNhbHZhIHBlciBpbnZpYXJlIGxlIG1vZGlmaWNoZVxucHJvdG8uX2NsZWFyQnVmZmVycyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9nZW9tZXRyaWVzQnVmZmVyID0ge307XG4gIHRoaXMuX2F0dHJpYnV0ZXNCdWZmZXIgPSB7fTtcbiAgdGhpcy5fcmVsYXRpb25zQXR0cmlidXRlc0J1ZmZlciA9IHt9O1xuICB0aGlzLl9lZGl0b3IuX3NldERpcnR5KGZhbHNlKTtcbn07XG4vL2Z1bnppb25lIGNsb25lTGF5ZXJcbnByb3RvLl9jbG9uZUxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjbG9uZWRGZWF0dXJlcyA9IFtdO1xuICAvL2NpY2xvIHN1bCB0dXR0ZSBsZSBmZWF0dXJlIGRlbCBsYXllciB2ZXR0b3JpYWxlIG9yaWdpbmFsZVxuICB0aGlzLl9lZGl0b3IuX3ZlY3RvckxheWVyLmdldFNvdXJjZSgpLmZvckVhY2hGZWF0dXJlKGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgICBjbG9uZWRGZWF0dXJlcy5wdXNoKGZlYXR1cmUuY2xvbmUoKSk7XG4gIH0sIHRoaXMpO1xuICAvLyBhZ2dpdW5nbyB0YWxpIGZlYXR1cmUgc3VsIGxheWVyIFwib3JpZ2luYWxlIGRlbCBidWZmZXJcIlxuICB0aGlzLl9vcmlnVmVjdG9yTGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoY2xvbmVkRmVhdHVyZXMpO1xufTsiLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciByZXNvbHZlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG52YXIgVmVjdG9yTGF5ZXIgPSByZXF1aXJlKCdjb3JlL21hcC9sYXllci92ZWN0b3JsYXllcicpO1xuLy8gQkFTRSBUT09MUyAvLy8vXG52YXIgQWRkRmVhdHVyZVRvb2wgPSByZXF1aXJlKCcuL3Rvb2xzL2FkZGZlYXR1cmV0b29sJyk7XG52YXIgTW92ZUZlYXR1cmVUb29sID0gcmVxdWlyZSgnLi90b29scy9tb3ZlcG9pbnR0b29sJyk7XG52YXIgTW9kaWZ5RmVhdHVyZVRvb2wgPSByZXF1aXJlKCcuL3Rvb2xzL21vZGlmeWZlYXR1cmV0b29sJyk7XG52YXIgRGVsZXRlRmVhdHVyZVRvb2wgPSByZXF1aXJlKCcuL3Rvb2xzL2RlbGV0ZWZlYXR1cmV0b29sJyk7XG52YXIgUGlja0ZlYXR1cmVUb29sID0gcmVxdWlyZSgnLi90b29scy9waWNrZmVhdHVyZXRvb2wnKTtcbnZhciBDdXRMaW5lVG9vbCA9IHJlcXVpcmUoJy4vdG9vbHMvY3V0bGluZXRvb2wnKTtcbi8vLyBCVUZGRVIgLy8vLy9cbnZhciBFZGl0QnVmZmVyID0gcmVxdWlyZSgnLi9lZGl0YnVmZmVyJyk7XG5cbnZhciBGb3JtID0gcmVxdWlyZSgnZ3VpL2Zvcm0nKTtcbnZhciBmb3JtID0gbnVsbDsgLy8gYnJ1dHRvIG1hIGRldm8gdGVuZXJsbyBlc3Rlcm5vIHNlbm7DsiBzaSBjcmVhIHVuIGNsaWNvIGRpIHJpZmVyaW1lbnRpIGNoZSBtYW5kYSBpbiBwYWxsYSBWdWVcblxuLy8gRWRpdG9yIGRpIHZldHRvcmkgcHVudHVhbGlcbmZ1bmN0aW9uIEVkaXRvcihvcHRpb25zKSB7XG5cbiAgdGhpcy5fbWFwU2VydmljZSA9IG9wdGlvbnMubWFwU2VydmljZSB8fCB7fTtcbiAgdGhpcy5fdmVjdG9yTGF5ZXIgPSBudWxsO1xuICB0aGlzLl9lZGl0VmVjdG9yTGF5ZXIgPSBudWxsO1xuICB0aGlzLl9lZGl0QnVmZmVyID0gbnVsbDtcbiAgdGhpcy5fYWN0aXZlVG9vbCA9IG51bGw7XG4gIHRoaXMuX2Zvcm1DbGFzcyA9IG9wdGlvbnMuZm9ybUNsYXNzIHx8IEZvcm07XG4gIHRoaXMuX2RpcnR5ID0gZmFsc2U7XG4gIHRoaXMuX25ld1ByZWZpeCA9ICdfbmV3Xyc7XG4gIHRoaXMuX2ZlYXR1cmVMb2NrcyA9IG51bGw7XG4gIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcblxuICB0aGlzLl9zZXR0ZXJzbGlzdGVuZXJzID0ge1xuICAgIGJlZm9yZToge30sXG4gICAgYWZ0ZXI6IHt9XG4gIH07XG5cbiAgdGhpcy5fZ2VvbWV0cnl0eXBlcyA9IFtcbiAgICAnUG9pbnQnLFxuICAgICdMaW5lU3RyaW5nJyxcbiAgICAnTXVsdGlMaW5lU3RyaW5nJ1xuICBdO1xuXG4gIC8vIGVsZW5jbyBkZWkgdG9vbCBlIGRlbGxlIHJlbGF0aXZlIGNsYXNzaSBwZXIgdGlwbyBkaSBnZW9tZXRyaWEgKGluIGJhc2UgYSB2ZWN0b3IuZ2VvbWV0cnl0eXBlKVxuICB0aGlzLl90b29sc0Zvckdlb21ldHJ5VHlwZXMgPSB7XG4gICAgJ1BvaW50Jzoge1xuICAgICAgYWRkZmVhdHVyZTogQWRkRmVhdHVyZVRvb2wsXG4gICAgICBtb3ZlZmVhdHVyZTogTW92ZUZlYXR1cmVUb29sLFxuICAgICAgZGVsZXRlZmVhdHVyZTogRGVsZXRlRmVhdHVyZVRvb2wsXG4gICAgICBlZGl0YXR0cmlidXRlczogUGlja0ZlYXR1cmVUb29sXG4gICAgfSxcbiAgICAnTGluZVN0cmluZyc6IHtcbiAgICAgIGFkZGZlYXR1cmU6IEFkZEZlYXR1cmVUb29sLFxuICAgICAgbW9kaWZ5dmVydGV4OiBNb2RpZnlGZWF0dXJlVG9vbCxcbiAgICAgIG1vdmVmZWF0dXJlOiBNb3ZlRmVhdHVyZVRvb2wsXG4gICAgICBkZWxldGVmZWF0dXJlOiBEZWxldGVGZWF0dXJlVG9vbCxcbiAgICAgIGVkaXRhdHRyaWJ1dGVzOiBQaWNrRmVhdHVyZVRvb2wsXG4gICAgICBjdXRsaW5lOiBDdXRMaW5lVG9vbFxuICAgIH1cbiAgfTtcbiAgLy9BQ1RJVkUgVE9PTCAtLSBJU1RBTlpBIENPTiBJIFNVT0kgTUVUT0RJIEUgQVRUUklCVVRJXG4gIHRoaXMuX2FjdGl2ZVRvb2wgPSBuZXcgZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50eXBlID0gbnVsbDtcbiAgICB0aGlzLmluc3RhbmNlID0gbnVsbDtcblxuICAgIHRoaXMuc2V0VG9vbCA9IGZ1bmN0aW9uKHR5cGUsIGluc3RhbmNlKSB7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFR5cGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgfTtcblxuICAgIHRoaXMuZ2V0VG9vbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfTtcblxuICAgIHRoaXMuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgICB0aGlzLmluc3RhbmNlID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8vIFRPT0xTXG4gIC8vdGVycsOgIHRyYWNjaWEgZGVpIHRvb2wgYXR0aXZpIHBlciBxdWVsIGxheWVyIHZldHRvcmlhbGVcbiAgLy9hZCBlc2VtcGlvIG5lbCBjYXNvIGRpIHVuIGxheWVyIFBvaW50XG4gIC8vYXZyw6AgdGFsZSBzdHJ1dHR1cmFcbiAgLypcbiAgIHRoaXMuX3Rvb2xzID0ge1xuICAgICBhZGRmZWF0dXJlOiBBZGRGZWF0dXJlVG9vbCxcbiAgICAgbW92ZWZlYXR1cmU6IE1vdmVGZWF0dXJlVG9vbCxcbiAgICAgZGVsZXRlZmVhdHVyZTogRGVsZXRlRmVhdHVyZVRvb2wsXG4gICAgIGVkaXRhdHRyaWJ1dGVzOiBQaWNrRmVhdHVyZVRvb2xcbiAgfVxuICAqL1xuICB0aGlzLl90b29scyA9IHt9O1xuXG4gIHRoaXMuX3NldHVwQWRkRmVhdHVyZUF0dHJpYnV0ZXNFZGl0aW5nTGlzdGVuZXJzKCk7XG4gIHRoaXMuX3NldHVwRWRpdEF0dHJpYnV0ZXNMaXN0ZW5lcnMoKTtcbiAgdGhpcy5fYXNrQ29uZmlybVRvRGVsZXRlRWRpdGluZ0xpc3RlbmVyKCk7XG5cbiAgYmFzZSh0aGlzKTtcbn1cblxuaW5oZXJpdChFZGl0b3IsIEczV09iamVjdCk7XG5cbnZhciBwcm90byA9IEVkaXRvci5wcm90b3R5cGU7XG5cbnByb3RvLmdldE1hcFNlcnZpY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX21hcFNlcnZpY2U7XG59O1xuXG4vLyBhc3NvY2lhIGwnb2dnZXR0byBWZWN0b3JMYXllciBzdSBjdWkgc2kgdnVvbGUgZmFyZSBsJ2VkaXRpbmdcbi8vIGlub2x0cmUgc2V0dGEgaSB0aXBpIGRpIHRvb2xzIGRhIHBvdGVyIGNvbGxlZ2FyZVxuLy8gYWwgdGlwbyBkaSBsYXllciBzZW1wcmUgaW4gYmFzZSBhbCB0aXBvIGRpIGdlb21ldHJpYSBkZWwgbGF5ZXJcbnByb3RvLnNldFZlY3RvckxheWVyID0gZnVuY3Rpb24odmVjdG9yTGF5ZXIpIHtcbiAgLy92ZXJpZmljYSBpbCB0aXBvIGRpIGdlb21ldHJpYSBkZWwgbGF5ZXIgdmV0dG9yaWFsZVxuICB2YXIgZ2VvbWV0cnl0eXBlID0gdmVjdG9yTGF5ZXIuZ2VvbWV0cnl0eXBlO1xuICAvL3ZlcmlmaWNhIHNlIMOoIG5lbGxhIHRpcG9sb2dpYSBkaSBnZW9tZXRyaWEgY29tcGF0aWJpbGUgY29uIGwnZWRpdG9yXG4gIGlmICghZ2VvbWV0cnl0eXBlIHx8ICEgdGhpcy5faXNDb21wYXRpYmxlVHlwZShnZW9tZXRyeXR5cGUpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJWZWN0b3IgZ2VvbWV0cnkgdHlwZSBcIitnZW9tZXRyeXR5cGUrXCIgaXMgbm90IHZhbGlkIGZvciBlZGl0aW5nXCIpO1xuICB9XG4gIC8vbmVsIGNhc28gaW4gY3VpIGxhIGdlb21ldHJpYSByaXNjb250cmF0YSBjb3JyaXNwb25kZSBhZCB1bmEgZ2VvbWV0cmlhIHZhbGlkYSBkZWxsJ2VkaXRvclxuICAvL3NldHRhIGkgdG9vbHMgZGVsbCdlZGl0b3IgcmVsYXRpdmkgYWwgdGlwbyBkaSBnZW9tZXRyaWFcbiAgdGhpcy5fc2V0VG9vbHNGb3JWZWN0b3JUeXBlKGdlb21ldHJ5dHlwZSk7XG4gIC8vYXNzZWdubyBpbCBsYXllciB2ZXR0b3JpYWxlIGFsbGEgcHJvcHJpdMOgIGRlbGwnZWRpdG9yXG4gIHRoaXMuX3ZlY3RvckxheWVyID0gdmVjdG9yTGF5ZXI7XG59O1xuXG4vLyBmdW56aW9uZSBjaGUgY3JlYSBlIGFnZ2l1bmdlIGlsIGxheWVyIHZldHRvcmFpbGUgZGkgZWRpdGluZyBhbGxhIG1hcHBhXG5wcm90by5hZGRFZGl0aW5nTGF5ZXJUb01hcCA9IGZ1bmN0aW9uKGdlb21ldHJ5VHlwZSkge1xuICAvLyBpc3RhbnppbyBsJ2VkaXRWZWN0b3JMYXllciBjaGUgw6ggdW4gdmV0dG9yZSBkaSBhcHBvZ2dpbyAobnVvdm8pXG4gIC8vIGRvdmUgdmFkbyBhIGZhcmUgbGUgbW9kaWZpY2hlXG4gIHRoaXMuX2VkaXRWZWN0b3JMYXllciA9IG5ldyBWZWN0b3JMYXllcih7XG4gICAgbmFtZTogXCJlZGl0dmVjdG9yXCIsXG4gICAgZ2VvbWV0cnl0eXBlOiBnZW9tZXRyeVR5cGVcbiAgfSk7XG4gIC8vaWwgZ2V0TWFwTHllciBub24gw6ggYWx0cm8gY2hlIGxhIHZlcnNpb25lIG9sLlZlY3RvciBkZWwgdmVjdG9yTGF5ZXIgb2dnZXR0b1xuICB0aGlzLl9tYXBTZXJ2aWNlLnZpZXdlci5tYXAuYWRkTGF5ZXIodGhpcy5fZWRpdFZlY3RvckxheWVyLmdldE1hcExheWVyKCkpO1xufTtcblxuLy9mdW56aW9uZSBjaGUgcmltb3ZlIGlsIHZldHRvcmUgZGkgZWRpbmcgZGFsbGEgbWFwcGEgZSBsbyByZXNldHRhXG5wcm90by5yZW1vdmVFZGl0aW5nTGF5ZXJGcm9tTWFwID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX21hcFNlcnZpY2Uudmlld2VyLnJlbW92ZUxheWVyQnlOYW1lKHRoaXMuX2VkaXRWZWN0b3JMYXllci5uYW1lKTtcbiAgdGhpcy5fZWRpdFZlY3RvckxheWVyID0gbnVsbDtcbn07XG5cbi8vIGF2dmlhIGxhIHNlc3Npb25lIGRpIGVkaXRhemlvbmUgY29uIHVuIGRldGVybWluYXRvIHRvb2wgKGVzLiBhZGRmZWF0dXJlKVxucHJvdG8uc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJ3N0YXJ0IGRlbGxhIGNsYXNzZSBFZGl0b3InKTtcbiAgLy8gVE9ETzogYWdnaXVuZ2VyZSBub3RpZmljYSBuZWwgY2FzbyBxdWVzdG8gaWYgbm9uIHNpIHZlcmlmaWNoaVxuICB2YXIgcmVzID0gZmFsc2U7XG4gIC8vIHNlIMOoIHNpYSBzdGF0byBzZXR0YXRvIGlsIHZlY3RvckxheWVyXG4gIGlmICh0aGlzLl92ZWN0b3JMYXllcikge1xuICAgIC8vcHJpbWEgZGkgdHV0dG8gc3RvcHBvIGVkaXRvclxuICAgIHRoaXMuc3RvcCgpO1xuICAgIC8vY2hpYW1vIGxhIGZ1bnppb25lIGNoZSBtaSBjcmVhIGlsIHZldHRvcmlhbGUgZGkgZWR0aW5nIGRvdmUgdmVuZG9ubyBhcHBvcnRhdGVcbiAgICAvLyB0dXR0ZSBsZSBtb2RpZmljZSBkZWwgbGF5ZXJcbiAgICB0aGlzLmFkZEVkaXRpbmdMYXllclRvTWFwKHRoaXMuX3ZlY3RvckxheWVyLmdlb21ldHJ5dHlwZSk7XG4gICAgLy8gaXN0YW56aW8gbCdFZGl0QnVmZmVyXG4gICAgdGhpcy5fZWRpdEJ1ZmZlciA9IG5ldyBFZGl0QnVmZmVyKHRoaXMpO1xuICAgIC8vYXNzZWdubyBhbGwnYXR0cmlidXRvIF9zdGFydGVkIHRydWU7XG4gICAgdGhpcy5fc2V0U3RhcnRlZCh0cnVlKTtcbiAgICByZXMgPSB0cnVlO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG4vLyB0ZXJtaW5hIGwnZWRpdGF6aW9uZVxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLmlzU3RhcnRlZCgpKSB7XG4gICAgaWYgKHRoaXMuc3RvcFRvb2woKSkge1xuICAgICAgaWYgKGZvcm0pIHtcbiAgICAgICAgR1VJLmNsb3NlRm9ybShmb3JtKTtcbiAgICAgICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vZGlzdHJ1Z2dvIGwnZWRpdCBidWZmZXJcbiAgICAgIHRoaXMuX2VkaXRCdWZmZXIuZGVzdHJveSgpO1xuICAgICAgLy9sbyBzZXR0byBhIG51bGxcbiAgICAgIHRoaXMuX2VkaXRCdWZmZXIgPSBudWxsO1xuICAgICAgLy9yaW11b3ZvIGkgbGlzdGVuZXJzXG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgLy9yaW11b3ZvIGlsIGxheWVyIGRhbGxhIG1hcHBhXG4gICAgICB0aGlzLnJlbW92ZUVkaXRpbmdMYXllckZyb21NYXAoKTtcbiAgICAgIC8vc2V0dG8gZWRpdG9yIHN0YXJ0ZWQgYSBmYWxzZVxuICAgICAgdGhpcy5fc2V0U3RhcnRlZChmYWxzZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLy9zZXR0YSBpbCB0b29sIGNvcnJlbnQgcGVyIGlsIGxheWVyIGluIGVkaXRpbmdcbnByb3RvLnNldFRvb2wgPSBmdW5jdGlvbih0b29sVHlwZSwgb3B0aW9ucykge1xuICAvLyBhbCBtb21lbnRvIHN0b3BUb29sIHJpdG9ybmEgc2VtcHJlIHRydWVcbiAgLy8gcXVpbmRpIGlmIHNvdHRvIG1haSB2ZXJpZmljYXRhXG4gIGlmICghdGhpcy5zdG9wVG9vbCgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIHJlY3VwZXJhIGlsIHRvb2wgZGFpIHRvbHMgYXNzZWduYXRpIGluIGJhc2UgYWwgdGlwbyBkaSB0b29scyByaWNoaWVzdG9cbiAgLy8gZXMuIHRvb2xUeXBlID0gZWRpdGF0dHJpYnV0ZXMgcGVyIGVkaXRhcmUgZ2xpIGF0dHJpYnV0aSBkaSB1bmEgZmVhdHVlXG4gIHZhciB0b29sQ2xhc3MgPSB0aGlzLl90b29sc1t0b29sVHlwZV07XG4gIC8vIHNlIGVzaXN0ZSBpbCB0b29sIHJpY2hpZXN0b1xuICBpZiAodG9vbENsYXNzICkge1xuICAgIC8vY3JlbyBsJ2lzdGFuemEgZGVsbGEgY2xhc3NlIFRvb2xcbiAgICB2YXIgdG9vbEluc3RhbmNlID0gbmV3IHRvb2xDbGFzcyh0aGlzLCBvcHRpb25zKTtcbiAgICAvLyBzZXR0byBsZSBwcm9wcml0w6AgdHlwZSBkZWxsJ29nZ2V0dG8gYWNyaXZlVG9vbFxuICAgIC8vIGluc3RhbmNlIGUgdHlwZVxuICAgIHRoaXMuX2FjdGl2ZVRvb2wuc2V0VG9vbCh0b29sVHlwZSwgdG9vbEluc3RhbmNlKTtcbiAgICAvLyBzZXR0byBpIGxpc3RlbmVycyBsZWdhdGkgYWwgdG9vbCBzY2VsdG9cbiAgICB0aGlzLl9zZXRUb29sU2V0dGVyc0xpc3RlbmVycyh0b29sSW5zdGFuY2UpO1xuICAgIC8vIGZhY2NpbyBwYXJ0aXJlIChjaGlhbWFuZG8gaWwgbWV0b2RvIHJ1biBkZWxsJ2lzdGFuemEgdG9vbCkgaWwgdG9vbFxuICAgIHRvb2xJbnN0YW5jZS5ydW4oKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gZnVuemlvbmUgY2hpYW1hdGEgZGEgZnVvcmkgKHZlcm9zaW1pbG1lbnRlIGRhIHBsdWdpbnNlcnZpY2UpXG4vLyBhbCBmaW5lIGRpIGludGVycm9tcGVyZSBsJ2VkaXRpbmcgc3VsIGxheWVyXG5wcm90by5zdG9wVG9vbCA9IGZ1bmN0aW9uKCkge1xuICAvL3ZlcmlmaWNhIHNlIGVzaXN0ZSBsJ2lzdGFuemEgZGVsIHRvb2wgKGNvbWUgYXR0aXZhKVxuICAvLyBlIHNlIHNlIG5lbGxhIHN0b3AgZGVsIHRvb2wgKGNoZSBub24gZmEgYWx0cm8gY2hlIHJpbXVvdmVyZSBsZSBpbnRlcmFjdGlvbiBkYWxsYSBtYXBwYSlcbiAgLy8gc2kgw6ggdmVyaWZpY2F0byBvIG1lbm8gdW4gZXJyb3JlICh0YWxlIGZ1bnppb25lIGFsIG1vbWVudG8gcml0b3JuYSB0cnVlKVxuICBpZiAodGhpcy5fYWN0aXZlVG9vbC5pbnN0YW5jZSAmJiAhdGhpcy5fYWN0aXZlVG9vbC5pbnN0YW5jZS5zdG9wKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgR1VJLmNsb3NlRm9ybSgpO1xuICAvLyBzZSBub24gw6ggdmVyaWZpY2F0YSBsYSBjb25kaXppb25lIHNvcHJhIChkb3Z1dGEgYWQgZXNlbXBpbyBhbGxhIG5vbiBpc3RhbnppYXppb25lIGRpIG5lc3N1cyB0b29sKVxuICAvLyBzaSBjaGlhbWEgaWwgbWV0b2RvIGNsZWFcbiAgLy8gZGVsbCdhY3RpdmUgVG9vbCBjaGUgc2V0dGEgaWwgdHlwZSBlIGwnaW5zdGFjZSBhIG51bGwgKGFsIG1vbWVudG8gc2kgdmVyaWZpY2Egc2VtcHJlKVxuICB0aGlzLl9hY3RpdmVUb29sLmNsZWFyKCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG4vLyByaXRvcm5hIGwnYWN0aXZlVG9vbFxucHJvdG8uZ2V0QWN0aXZlVG9vbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fYWN0aXZlVG9vbDtcbn07XG5cbnByb3RvLmlzU3RhcnRlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcbn07XG5cbnByb3RvLmhhc0FjdGl2ZVRvb2wgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICFfLmlzTnVsbCh0aGlzLl9hY3RpdmVUb29sLmluc3RhbmNlKTtcbn07XG5cbnByb3RvLmlzVG9vbEFjdGl2ZSA9IGZ1bmN0aW9uKHRvb2xUeXBlKSB7XG4gIGlmICh0aGlzLl9hY3RpdmVUb29sLnRvb2xUeXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRvb2wudG9vbFR5cGUgPT0gdG9vbFR5cGU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxucHJvdG8uY29tbWl0ID0gZnVuY3Rpb24obmV3RmVhdHVyZXMpIHtcbiAgdGhpcy5fZWRpdEJ1ZmZlci5jb21taXQobmV3RmVhdHVyZXMpO1xufTtcblxucHJvdG8udW5kb0FsbCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9lZGl0QnVmZmVyLnVuZG9BbGwoKTtcbn07XG5cbnByb3RvLnNldEZlYXR1cmVMb2NrcyA9IGZ1bmN0aW9uKGZlYXR1cmVMb2Nrcykge1xuICB0aGlzLl9mZWF0dXJlTG9ja3MgPSBmZWF0dXJlTG9ja3M7XG59O1xuXG5wcm90by5nZXRGZWF0dXJlTG9ja3MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2ZlYXR1cmVMb2Nrcztcbn07XG5cbnByb3RvLmdldEZlYXR1cmVMb2NrSWRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfLm1hcCh0aGlzLl9mZWF0dXJlTG9ja3MsZnVuY3Rpb24oZmVhdHVyZWxvY2spIHtcbiAgICByZXR1cm4gZmVhdHVyZWxvY2subG9ja2lkO1xuICB9KTtcbn07XG5cbnByb3RvLmdldEZlYXR1cmVMb2Nrc0xvY2tJZHMgPSBmdW5jdGlvbihmZWF0dXJlTG9ja3MpIHtcbiAgdmFyIGZlYXR1cmVMb2NrcyA9IGZlYXR1cmVMb2NrcyB8fCB0aGlzLl9mZWF0dXJlTG9ja3M7XG4gIHJldHVybiBfLm1hcChmZWF0dXJlTG9ja3MsZnVuY3Rpb24oZmVhdHVyZWxvY2spIHtcbiAgICByZXR1cm4gZmVhdHVyZWxvY2subG9ja2lkO1xuICB9KTtcbn07XG5cbnByb3RvLmdldEZlYXR1cmVMb2Nrc0ZlYXR1cmVJZHMgPSBmdW5jdGlvbihmZWF0dXJlTG9ja3MpIHtcbiAgdmFyIGZlYXR1cmVMb2NrcyA9IGZlYXR1cmVMb2NrcyB8fCB0aGlzLl9mZWF0dXJlTG9ja3M7XG4gIHJldHVybiBfLm1hcChmZWF0dXJlTG9ja3MsZnVuY3Rpb24oZmVhdHVyZWxvY2spIHtcbiAgICByZXR1cm4gZmVhdHVyZWxvY2suZmVhdHVyZWlkO1xuICB9KTtcbn07XG5cbnByb3RvLmdldEZlYXR1cmVMb2NrSWRzRm9yRmVhdHVyZUlkcyA9IGZ1bmN0aW9uKGZpZHMpIHtcbiAgdmFyIGZlYXR1cmVsb2Nrc0ZvckZpZHMgPSBfLmZpbHRlcih0aGlzLl9mZWF0dXJlTG9ja3MsZnVuY3Rpb24oZmVhdHVyZWxvY2spIHtcbiAgICByZXR1cm4gXy5pbmNsdWRlcyhmaWRzLGZlYXR1cmVsb2NrLmZlYXR1cmVpZCk7XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzLmdldEZlYXR1cmVMb2Nrc0xvY2tJZHMoZmVhdHVyZWxvY2tzRm9yRmlkcyk7XG59O1xuLy8gZnVuemlvbmUgY2hlIHByZW5kZSBsZSBmZWF0dXJlIG51b3ZlLCBhZ2dpb3JuYXRlIGUgY2FuY2VsbGF0ZVxuLy9kYWxsJ2VkaXQgYnVmZmVyXG5wcm90by5nZXRFZGl0ZWRGZWF0dXJlcyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtb2RpZmllZEZpZHMgPSB0aGlzLl9lZGl0QnVmZmVyLmNvbGxlY3RGZWF0dXJlSWRzKCk7XG4gIHZhciBsb2NrSWRzID0gdGhpcy5nZXRGZWF0dXJlTG9ja0lkc0ZvckZlYXR1cmVJZHMobW9kaWZpZWRGaWRzKTtcbiAgcmV0dXJuIHtcbiAgICBhZGQ6IHRoaXMuX2VkaXRCdWZmZXIuY29sbGVjdEZlYXR1cmVzKCduZXcnLHRydWUpLFxuICAgIHVwZGF0ZTogdGhpcy5fZWRpdEJ1ZmZlci5jb2xsZWN0RmVhdHVyZXMoJ3VwZGF0ZWQnLHRydWUpLFxuICAgIGRlbGV0ZTogdGhpcy5fZWRpdEJ1ZmZlci5jb2xsZWN0RmVhdHVyZXMoJ2RlbGV0ZWQnLHRydWUpLFxuICAgIC8vcmVsYXRpb25zOiB0aGlzLl9lZGl0QnVmZmVyLmNvbGxlY3RSZWxhdGlvbnNBdHRyaWJ1dGVzKCksXG4gICAgcmVsYXRpb25zZWRpdHM6IHRoaXMuY29sbGVjdFJlbGF0aW9ucygpLFxuICAgIGxvY2tpZHM6IGxvY2tJZHNcbiAgfVxufTtcblxucHJvdG8uY29sbGVjdFJlbGF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZWxhdGlvbnNFZGl0cyA9IHRoaXMuX2VkaXRCdWZmZXIuY29sbGVjdFJlbGF0aW9ucygpO1xuICAvKl8uZm9yRWFjaCh0aGlzLl92ZWN0b3JMYXllci5nZXRSZWxhdGlvbnMoKSxmdW5jdGlvbihyZWxhdGlvbil7XG4gICB2YXIgcmVsYXRpb25FZGl0cyA9IHtcbiAgIGFkZDogW10sXG4gICB1cGRhdGU6IFtdLFxuICAgZGVsZXRlOiBbXVxuICAgfVxuICAgcmVsYXRpb25zRWRpdHNbcmVsYXRpb24ubmFtZV0gPSByZWxhdGlvbkVkaXRzO1xuICAgfSkqL1xuICByZXR1cm4gcmVsYXRpb25zRWRpdHM7XG59O1xuLy8gdmllbmUgY2hhbWF0byBxdWFuZG8gc2kgcHJlbWUgYWQgZXNlbXBpbyBTYWx2YSBzdWwgRm9ybSBkZWdsaVxuLy8gYXR0cmlidXRpIGRpIHVuYVxucHJvdG8uc2V0RmllbGRzV2l0aFZhbHVlcyA9IGZ1bmN0aW9uKGZlYXR1cmUsIGZpZWxkcywgcmVsYXRpb25zKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0ge307XG4gIF8uZm9yRWFjaChmaWVsZHMsZnVuY3Rpb24oZmllbGQpIHtcbiAgICBhdHRyaWJ1dGVzW2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7XG4gIH0pO1xuICB2YXIgcmVsYXRpb25zQXR0cmlidXRlcyA9IG51bGw7XG4gIGlmIChyZWxhdGlvbnMpIHtcbiAgICB2YXIgcmVsYXRpb25zQXR0cmlidXRlcyA9IHt9O1xuICAgIF8uZm9yRWFjaChyZWxhdGlvbnMsZnVuY3Rpb24ocmVsYXRpb24pIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0ge307XG4gICAgICBfLmZvckVhY2gocmVsYXRpb24uZmllbGRzLGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbZmllbGQubmFtZV0gPSBmaWVsZC52YWx1ZTtcbiAgICAgIH0pO1xuICAgICAgcmVsYXRpb25zQXR0cmlidXRlc1tyZWxhdGlvbi5uYW1lXSA9IGF0dHJpYnV0ZXM7XG4gICAgfSk7XG4gIH1cbiAgZmVhdHVyZS5zZXRQcm9wZXJ0aWVzKGF0dHJpYnV0ZXMpO1xuICB0aGlzLl9lZGl0QnVmZmVyLnVwZGF0ZUZpZWxkcyhmZWF0dXJlLCByZWxhdGlvbnNBdHRyaWJ1dGVzKTtcbn07XG5cbnByb3RvLnNldEZpZWxkc1dpdGhWYWx1ZXMgPSBmdW5jdGlvbihmZWF0dXJlLGZpZWxkcyxyZWxhdGlvbnMpe1xuICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICBfLmZvckVhY2goZmllbGRzLGZ1bmN0aW9uKGZpZWxkKXtcbiAgICBhdHRyaWJ1dGVzW2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7XG4gIH0pO1xuXG4gIGZlYXR1cmUuc2V0UHJvcGVydGllcyhhdHRyaWJ1dGVzKTtcbiAgdGhpcy5fZWRpdEJ1ZmZlci51cGRhdGVGaWVsZHMoZmVhdHVyZSxyZWxhdGlvbnMpO1xufTtcbi8vZnVuemlvbmUgY2hlIGluIGJhc2UgYWxsYSBmZWF0dXJlIHBhc3NhdGEgcmVjdXBlcmEgbGUgcmVsYXppb25pIGFzc29jaWF0YSBhZCBlc3NhXG5wcm90by5nZXRSZWxhdGlvbnNXaXRoVmFsdWVzID0gZnVuY3Rpb24oZmVhdHVyZSkge1xuICB2YXIgZmlkID0gZmVhdHVyZS5nZXRJZCgpO1xuICAvL3ZlcmlmaWNhIHNlIGlsIGxheWVyIGhhIHJlbGF6aW9uaVxuICAvLyByZXN0aXR1aXNjZSBpbCB2YWxvcmUgZGVsIGNhbXBvIF9yZWxhdGlvbiAoc2UgZXNpc3RlIMOoIHVuIGFycmF5KSBkZWwgdmVjdG9yTGF5ZXJcbiAgaWYgKHRoaXMuX3ZlY3RvckxheWVyLmhhc1JlbGF0aW9ucygpKSB7XG4gICAgdmFyIGZpZWxkc1Byb21pc2U7XG4gICAgLy8gc2Ugbm9uIGhhIGZpZCB2dW9sIGRpcmUgY2hlIMOoIG51b3ZvIGUgc2VuemEgYXR0cmlidXRpLCBxdWluZGkgcHJlbmRvIGkgZmllbGRzIHZ1b3RpXG4gICAgaWYgKCFmaWQpIHtcbiAgICAgIGZpZWxkc1Byb21pc2UgPSB0aGlzLl92ZWN0b3JMYXllci5nZXRSZWxhdGlvbnNXaXRoVmFsdWVzKCk7XG4gICAgfVxuICAgIC8vIHNlIHBlciBjYXNvIGhhIHVuIGZpZCBtYSDDqCB1biB2ZXR0b3JpYWxlIG51b3ZvXG4gICAgZWxzZSBpZiAoIXRoaXMuX3ZlY3RvckxheWVyLmdldEZlYXR1cmVCeUlkKGZpZCkpe1xuICAgICAgLy8gc2UgcXVlc3RhIGZlYXR1cmUsIGFuY29yYSBub24gcHJlc2VudGUgbmVsIHZlY3RvckxheWVyLCBoYSBjb211bnF1ZSBpIHZhbG9yaSBkZWxsZSBGS3MgcG9wb2xhdGUsIGFsbG9yYSBsZSBlc3RyYWdnb1xuICAgICAgaWYgKHRoaXMuX3ZlY3RvckxheWVyLmZlYXR1cmVIYXNSZWxhdGlvbnNGa3NXaXRoVmFsdWVzKGZlYXR1cmUpKXtcbiAgICAgICAgdmFyIGZrcyA9IHRoaXMuX3ZlY3RvckxheWVyLmdldFJlbGF0aW9uc0Zrc1dpdGhWYWx1ZXNGb3JGZWF0dXJlKGZlYXR1cmUpO1xuICAgICAgICBmaWVsZHNQcm9taXNlID0gdGhpcy5fdmVjdG9yTGF5ZXIuZ2V0UmVsYXRpb25zV2l0aFZhbHVlc0Zyb21Ga3MoZmtzKTtcbiAgICAgIH1cbiAgICAgIC8vIGFsdHJpbWVudGkgcHJlbmRvIGkgZmllbGRzIHZ1b3RpXG4gICAgICBlbHNlIHtcbiAgICAgICAgZmllbGRzUHJvbWlzZSA9IHRoaXMuX3ZlY3RvckxheWVyLmdldFJlbGF0aW9uc1dpdGhWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gc2UgaW52ZWNlIMOoIHVuYSBmZWF0dXJlIGdpw6AgcHJlc2VudGUgZSBxdWluZGkgbm9uIG51b3ZhXG4gICAgLy8gdmVyaWZpY28gc2UgaGEgZGF0aSBkZWxsZSByZWxhemlvbmkgZ2nDoCAgZWRpdGF0aVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGhhc0VkaXRzID0gdGhpcy5fZWRpdEJ1ZmZlci5oYXNSZWxhdGlvbnNFZGl0cyhmaWQpO1xuICAgICAgaWYgKGhhc0VkaXRzKXtcbiAgICAgICAgdmFyIHJlbGF0aW9uc0VkaXRzID0gdGhpcy5fZWRpdEJ1ZmZlci5nZXRSZWxhdGlvbnNFZGl0cyhmaWQpO1xuICAgICAgICB2YXIgcmVsYXRpb25zID0gdGhpcy5fdmVjdG9yTGF5ZXIuZ2V0UmVsYXRpb25zKCk7XG4gICAgICAgIF8uZm9yRWFjaChyZWxhdGlvbnMsZnVuY3Rpb24gKHJlbGF0aW9uKSB7XG4gICAgICAgICAgcmVsYXRpb24uZWxlbWVudHMgPSBfLmNsb25lRGVlcChyZWxhdGlvbnNFZGl0c1tyZWxhdGlvbi5uYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWVsZHNQcm9taXNlID0gcmVzb2x2ZShyZWxhdGlvbnMpO1xuICAgICAgfVxuICAgICAgLy8gc2Ugbm9uIGNlIGxpIGhhIHZ1b2wgZGlyZSBjaGUgZGV2byBjYXJpY2FyZSBpIGRhdGkgZGVsbGUgcmVsYXppb25pIGRhIHJlbW90b1xuICAgICAgZWxzZSB7XG4gICAgICAgIGZpZWxkc1Byb21pc2UgPSB0aGlzLl92ZWN0b3JMYXllci5nZXRSZWxhdGlvbnNXaXRoVmFsdWVzKGZpZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIG5lbCBjYXNvIGRpIG5lc3N1bmEgcmVsYXppb25lIHJpc29sdm8gbGEgcHJvbWlzZVxuICAgIC8vIHBhc3NhbmRvIGlsIHZhbG9yZSBudWxsXG4gICAgZmllbGRzUHJvbWlzZSA9IHJlc29sdmUobnVsbCk7XG4gIH1cbiAgcmV0dXJuIGZpZWxkc1Byb21pc2U7XG59O1xuXG5wcm90by5jcmVhdGVSZWxhdGlvbkVsZW1lbnQgPSBmdW5jdGlvbihyZWxhdGlvbikge1xuICB2YXIgZWxlbWVudCA9IHt9O1xuICBlbGVtZW50LmZpZWxkcyA9IF8uY2xvbmVEZWVwKHRoaXMuX3ZlY3RvckxheWVyLmdldFJlbGF0aW9uRmllbGRzKHJlbGF0aW9uKSk7XG4gIGVsZW1lbnQuaWQgPSB0aGlzLmdlbmVyYXRlSWQoKTtcbiAgZWxlbWVudC5zdGF0ZSA9ICdORVcnO1xuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbnByb3RvLmdldFJlbGF0aW9uUGtGaWVsZEluZGV4ID0gZnVuY3Rpb24ocmVsYXRpb25OYW1lKSB7XG4gIHJldHVybiB0aGlzLl92ZWN0b3JMYXllci5nZXRSZWxhdGlvblBrRmllbGRJbmRleChyZWxhdGlvbk5hbWUpO1xufTtcblxucHJvdG8uZ2V0RmllbGQgPSBmdW5jdGlvbihuYW1lLCBmaWVsZHMpIHtcbiAgdmFyIGZpZWxkcyA9IGZpZWxkcyB8fCB0aGlzLmdldFZlY3RvckxheWVyKCkuZ2V0RmllbGRzV2l0aFZhbHVlcygpO1xuICB2YXIgZmllbGQgPSBudWxsO1xuICBfLmZvckVhY2goZmllbGRzLCBmdW5jdGlvbihmKSB7XG4gICAgaWYgKGYubmFtZSA9PSBuYW1lKSB7XG4gICAgICBmaWVsZCA9IGY7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZpZWxkO1xufTtcblxucHJvdG8uaXNEaXJ0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZGlydHk7XG59O1xuLy8gTUVUT0RJIENIRSBTT1ZSQVNDUklWT05PIE9OQUZURVIsIE9OQkVGT1JFLCBPTkJFRk9SRUFTWU5DIERFTEwnT0dHRVRUTyBHM1dPQkpFQ1Rcbi8vIGxhIGxvcm8gZnVuemlvbmUgw6ggcXVlbGxhIGRpIHNldHRhcmUgbGEgcHJvcHJpdGXDoCBkZWxsJ2VkaXRvclxuLy8gX3NldHRlcnNsaXN0ZW5lcnMgaW4gbW9kbyBjb3JyZXR0byBkYSBwb3RlciBwb2kgZXNzZXJlIHNmcnV0dGF0YSBkYWwgbWV0b2RkXG4vLyBfc2V0VG9vbFNldHRlcnNMaXN0ZW5lcnMgIC0tLSAhISEhIERBIENPTVBMRVRBUkUgTEEgU1BJRUdBWklPTkUgISEhLS0tLVxuXG5wcm90by5vbmFmdGVyID0gZnVuY3Rpb24oc2V0dGVyLCBsaXN0ZW5lciwgcHJpb3JpdHkpIHtcbiAgdGhpcy5fb25hZnRlcnRvb2xhY3Rpb24oc2V0dGVyLCBsaXN0ZW5lciwgcHJpb3JpdHkpO1xufTtcblxuLy8gcGVybWV0dGUgZGkgaW5zZXJpcmUgdW4gc2V0dGVyIGxpc3RlbmVyIHNpbmNyb25vIHByaW1hIGNoZSB2ZW5nYSBlZmZldHR1YXRhIHVuYSBvcGVyYXppb25lIGRhIHVuIHRvb2wgKGVzLiBhZGRmZWF0dXJlKVxucHJvdG8ub25iZWZvcmUgPSBmdW5jdGlvbihzZXR0ZXIsIGxpc3RlbmVyLCBwcmlvcml0eSkge1xuICB0aGlzLl9vbmJlZm9yZXRvb2xhY3Rpb24oc2V0dGVyLCBsaXN0ZW5lciwgZmFsc2UsIHByaW9yaXR5KTtcbn07XG5cbi8vIGNvbWUgb25iZWZvcmUoKSBtYSBwZXIgbGlzdGVuZXIgYXNpbmNyb25pXG5wcm90by5vbmJlZm9yZWFzeW5jID0gZnVuY3Rpb24oc2V0dGVyLCBsaXN0ZW5lciwgcHJpb3JpdHkpIHtcbiAgdGhpcy5fb25iZWZvcmV0b29sYWN0aW9uKHNldHRlciwgbGlzdGVuZXIsIHRydWUsIHByaW9yaXR5KTtcbn07XG5cbnByb3RvLl9vbmFmdGVydG9vbGFjdGlvbiA9IGZ1bmN0aW9uKHNldHRlcixsaXN0ZW5lcixwcmlvcml0eSkge1xuICBwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG4gIGlmICghXy5nZXQodGhpcy5fc2V0dGVyc2xpc3RlbmVycy5hZnRlcixzZXR0ZXIpKSB7XG4gICAgdGhpcy5fc2V0dGVyc2xpc3RlbmVycy5hZnRlcltzZXR0ZXJdID0gW107XG4gIH1cbiAgdGhpcy5fc2V0dGVyc2xpc3RlbmVycy5hZnRlcltzZXR0ZXJdLnB1c2goe1xuICAgIGZuYzogbGlzdGVuZXIsXG4gICAgcHJpb3JpdHk6IHByaW9yaXR5XG4gIH0pO1xufTtcblxucHJvdG8uX29uYmVmb3JldG9vbGFjdGlvbiA9IGZ1bmN0aW9uKHNldHRlciwgbGlzdGVuZXIsIGFzeW5jLCBwcmlvcml0eSkge1xuICBwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG4gIGlmICghXy5nZXQodGhpcy5fc2V0dGVyc2xpc3RlbmVycy5iZWZvcmUsIHNldHRlcikpe1xuICAgIHRoaXMuX3NldHRlcnNsaXN0ZW5lcnMuYmVmb3JlW3NldHRlcl0gPSBbXTtcbiAgfVxuICB0aGlzLl9zZXR0ZXJzbGlzdGVuZXJzLmJlZm9yZVtzZXR0ZXJdLnB1c2goe1xuICAgIGZuYzogbGlzdGVuZXIsXG4gICAgaG93OiBhc3luYyA/ICdhc3luYycgOiAnc3luYycsXG4gICAgcHJpb3JpdHk6IHByaW9yaXR5XG4gIH0pO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vLyB1bmEgdm9sdGEgaXN0YW56aWF0byBpbCB0b29sIGFnZ2l1bmdvIGEgcXVlc3RvIHR1dHRpIGkgbGlzdGVuZXIgZGVmaW5pdGkgYSBsaXZlbGxvIGRpIGVkaXRvclxucHJvdG8uX3NldFRvb2xTZXR0ZXJzTGlzdGVuZXJzID0gZnVuY3Rpb24odG9vbCkge1xuICAvL3Njb3JybyBzdSBpIHN0dGVyTGlzdGVybnMgaW1wb3N0YXRpIGRhZ2xpIGVkaXRvciBjdXN0b20gKEdlb25vdGVzRWRpdG9yIGFkIGVzZW1waW8pXG4gIC8vIGluIG1vZG8gZGEgcG90ZXIgcmljaGlhbWFyZSBlIHNldHRhcmUgZ2xpIG9uYmVmb3JlIG8gb25iZWVmb3JlIGFzeW5jIG8gb24gYWZ0ZXJcbiAgLy8gbmF0aXZpIGRlbGwnb2dnZXR0byBnM3dvYmplY3Qgc3VpIHRvb2xcbiAgLy92ZXJpZmljbyBnbGkgb24gYmVmb3JlXG4gIF8uZm9yRWFjaCh0aGlzLl9zZXR0ZXJzbGlzdGVuZXJzLmJlZm9yZSwgZnVuY3Rpb24obGlzdGVuZXJzLCBzZXR0ZXIpIHtcbiAgICAvLyB2ZXJpZmljbyBzZSBpbCB0b29sIGluIHF1ZXN0aW9uZSBoYSBzZXR0ZXJzXG4gICAgaWYgKF8uaGFzSW4odG9vbC5zZXR0ZXJzLCBzZXR0ZXIpKSB7XG4gICAgICAvLyBzZSBpbCB0b29sIHByZXZlZGUgc2V0dGVyc1xuICAgICAgXy5mb3JFYWNoKGxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgICAgLy8gcGVyIG9nbmkgbGlzdGVuZXIgKHNvbm8gdHV0dGkgb2dnZXR0aSBjb25cbiAgICAgICAgLy8gY2hpYXZlIGZuYywgaG93ICh2ZWRpIHNvcHJhKVxuICAgICAgICAvLyB2ZXJpZmljbyBzZSDDqCB1biBvbmJlZm9yZSBvciB1biBvbmJlZm9yZXN5bmNcbiAgICAgICAgLy8gdmFkbyBhIHNldHRhcmUgbGEgZnVuemlvbmUgbGlzdGVuZXJzIHF1YW5kbyBpbCBtZXRvZG8gZGVsIHRvb2wgc2V0dGVyXG4gICAgICAgIC8vIHZpZW5lIGNoaWFtYXRvXG4gICAgICAgIGlmIChsaXN0ZW5lci5ob3cgPT0gJ3N5bmMnKSB7XG4gICAgICAgICAgdG9vbC5vbmJlZm9yZShzZXR0ZXIsIGxpc3RlbmVyLmZuYywgbGlzdGVuZXIucHJpb3JpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRvb2wub25iZWZvcmVhc3luYyhzZXR0ZXIsIGxpc3RlbmVyLmZuYywgbGlzdGVuZXIucHJpb3JpdHkpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSk7XG4gIC8vY29tZSBzb3ByYSBtYSBwZXIgZ2xpIG9uYWZ0ZXJcbiAgXy5mb3JFYWNoKHRoaXMuX3NldHRlcnNsaXN0ZW5lcnMuYWZ0ZXIsIGZ1bmN0aW9uKGxpc3RlbmVycyxzZXR0ZXIpIHtcbiAgICBpZiAoXy5oYXNJbih0b29sLnNldHRlcnMsIHNldHRlcikpIHtcbiAgICAgIF8uZm9yRWFjaChsaXN0ZW5lcnMsZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgICAgdG9vbC5vbmFmdGVyKHNldHRlcixsaXN0ZW5lci5mbmMsIGxpc3RlbmVyLnByaW9yaXR5KTtcbiAgICAgIH0pXG4gICAgfVxuICB9KVxufTtcbi8vIG1ldG9kbyBhZGQgRmVhdHVyZSBjaGUgbm9uIGZhIGFsdG8gY2hlIGFnZ2l1bmdlcmUgbGEgZmVhdHVyZSBhbCBidWZmZXJcbnByb3RvLmFkZEZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIHRoaXMuX2VkaXRCdWZmZXIuYWRkRmVhdHVyZShmZWF0dXJlKTtcbn07XG4vLyBub24gZmEgYWFsY3RybyBjaGUgYWdnaW9ybmFyZSBsYSBmZWF0dXJlIGRlbCBidWZmZXJcbnByb3RvLnVwZGF0ZUZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIHRoaXMuX2VkaXRCdWZmZXIudXBkYXRlRmVhdHVyZShmZWF0dXJlKTtcbn07XG4vLyBub24gZmEgYWx0cm8gY2hlIGNhbmNlbGxhcmUgbGEgZmVhdHVyZSBkYWxsJ2VkaXQgYnVmZmVyXG5wcm90by5kZWxldGVGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSkge1xuICB0aGlzLl9lZGl0QnVmZmVyLmRlbGV0ZUZlYXR1cmUoZmVhdHVyZSk7XG59O1xuXG5wcm90by5nZXRWZWN0b3JMYXllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fdmVjdG9yTGF5ZXI7XG59O1xuXG5wcm90by5nZXRFZGl0VmVjdG9yTGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2VkaXRWZWN0b3JMYXllcjtcbn07XG5cbnByb3RvLmdlbmVyYXRlSWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX25ld1ByZWZpeCtEYXRlLm5vdygpO1xufTtcblxucHJvdG8uaXNOZXdGZWF0dXJlID0gZnVuY3Rpb24oZmlkKSB7XG4gIGlmIChmaWQpIHtcbiAgICByZXR1cm4gZmlkLnRvU3RyaW5nKCkuaW5kZXhPZih0aGlzLl9uZXdQcmVmaXgpID09IDA7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5wcm90by5faXNDb21wYXRpYmxlVHlwZSA9IGZ1bmN0aW9uKGdlb21ldHJ5dHlwZSkge1xuICByZXR1cm4gdGhpcy5fZ2VvbWV0cnl0eXBlcy5pbmRleE9mKGdlb21ldHJ5dHlwZSkgPiAtMTtcbn07XG4vL3NldHRhIGkgdG9vbHMgcmVsYXRpdmkgYWxsYSBnZW9tZXRyaWEgZGVsIGxheWVyIHZldHRvcmlhbGUgcGFzc2F0b1xucHJvdG8uX3NldFRvb2xzRm9yVmVjdG9yVHlwZSA9IGZ1bmN0aW9uKGdlb21ldHJ5dHlwZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0b29scyA9IHRoaXMuX3Rvb2xzRm9yR2VvbWV0cnlUeXBlc1tnZW9tZXRyeXR5cGVdO1xuICBfLmZvckVhY2godG9vbHMsIGZ1bmN0aW9uKHRvb2xDbGFzcywgdG9vbCkge1xuICAgIC8vYXNzZWduYXppb25lXG4gICAgc2VsZi5fdG9vbHNbdG9vbF0gPSB0b29sQ2xhc3M7XG4gIH0pXG59O1xuXG5wcm90by5fc2V0U3RhcnRlZCA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgdGhpcy5fc3RhcnRlZCA9IGJvb2w7XG59O1xuLy8gZnVuemlvbmUgc2V0RGlydHkgZGVsbCdlZGl0b3IgY2hlIGZhIHNpIGNoZSBxdWVzdG8gcG9zc2EgZW1ldHRlcmVcbi8vIGwnZXZlbnRvIGRpcnR5IGluIHF1ZXN0byBtb2RvIHBzc28gZmFyZSBxdWFsY29zYSBxdWFuZG8gw6ggc3RhdGEgZmF0dGEgdW5hIG1vZGlmaWNhXG4vLyBuZWkgbGF5ZXJzIGRlbGwnZWRpdG9yXG5wcm90by5fc2V0RGlydHkgPSBmdW5jdGlvbihib29sKSB7XG4gIC8vIHNlIG5vbiBzcGVjaWZpY2F0byBsbyBzZXR0byBhIHZlcm9cbiAgaWYgKF8uaXNOaWwoYm9vbCkpIHtcbiAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fZGlydHkgPSBib29sO1xuICB9XG4gIC8vIGVtZXR0byBsJ2V2ZW50byBkaXJ0eSBkZWxsJ2VkaXRvclxuICB0aGlzLmVtaXQoXCJkaXJ0eVwiLHRoaXMuX2RpcnR5KTtcbn07XG5cbnByb3RvLl9hc2tDb25maXJtVG9EZWxldGVFZGl0aW5nTGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLm9uYmVmb3JlYXN5bmMoJ2RlbGV0ZUZlYXR1cmUnLCBmdW5jdGlvbihmZWF0dXJlLCBpc05ldywgbmV4dCkge1xuICAgIEdVSS5kaWFsb2cuY29uZmlybShcIlZ1b2kgZWxpbWluYXJlIGwnZWxlbWVudG8gc2VsZXppb25hdG8/XCIsZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgIG5leHQocmVzdWx0KTtcbiAgICB9KVxuICB9KTtcbn07XG5cbi8vIGFwcmUgZm9ybSBhdHRyaWJ1dGkgcGVyIGkgIG5zZXJpbWVudG9cbnByb3RvLl9zZXR1cEFkZEZlYXR1cmVBdHRyaWJ1dGVzRWRpdGluZ0xpc3RlbmVycyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5vbmJlZm9yZWFzeW5jKCdhZGRGZWF0dXJlJyxmdW5jdGlvbihmZWF0dXJlLG5leHQpe1xuICAgIHNlbGYuX29wZW5FZGl0b3JGb3JtKCduZXcnLGZlYXR1cmUsbmV4dCk7XG4gIH0sMTAwKTtcbn07XG5cbi8vIGFwcmUgZm9ybSBhdHRyaWJ1dGkgcGVyIGVkaXRhemlvbmVcbnByb3RvLl9zZXR1cEVkaXRBdHRyaWJ1dGVzTGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5vbmJlZm9yZWFzeW5jKCdwaWNrRmVhdHVyZScsZnVuY3Rpb24oZmVhdHVyZSxuZXh0KXtcbiAgICBzZWxmLl9vcGVuRWRpdG9yRm9ybSgnb2xkJyxmZWF0dXJlLG5leHQpO1xuICB9KTtcbn07XG5cbnByb3RvLl9vcGVuRWRpdG9yRm9ybSA9IGZ1bmN0aW9uKGlzTmV3LCBmZWF0dXJlLCBuZXh0KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGZpZCA9IGZlYXR1cmUuZ2V0SWQoKTtcbiAgdmFyIHZlY3RvckxheWVyID0gdGhpcy5nZXRWZWN0b3JMYXllcigpO1xuICB2YXIgZmllbGRzID0gdmVjdG9yTGF5ZXIuZ2V0RmllbGRzV2l0aFZhbHVlcyhmZWF0dXJlKTtcbiAgLy8gbmVsIGNhc28gcXVhbGN1bm8sIGR1cmFudGUgbGEgY2F0ZW5hIGRpIHNldHRlckxpc3RlbmVycywgYWJiaWEgc2V0dGF0byB1biBhdHRyaWJ1dG8gKHNvbG8gbmVsIGNhc28gZGkgdW4gbnVvdm8gaW5zZXJpbWVudG8pXG4gIC8vIHVzYXRvIGFkIGVzZW1waW8gbmVsbCdlZGl0aW5nIGRlbGxlIHN0cmFkZSwgZG92ZSB2aWVuZSBzZXR0YXRvIGluIGZhc2UgZGkgaW5zZXJpbWVudG8vbW9kaWZpY2EgaWwgY29kaWNlIGRlaSBjYW1waSBub2RfaW5pIGUgbm9kX2ZpblxuICB2YXIgcGsgPSB2ZWN0b3JMYXllci5waztcbiAgaWYgKHBrICYmIF8uaXNOdWxsKHRoaXMuZ2V0RmllbGQocGspKSl7XG4gICAgXy5mb3JFYWNoKGZlYXR1cmUuZ2V0UHJvcGVydGllcygpLGZ1bmN0aW9uKHZhbHVlLGF0dHJpYnV0ZSl7XG4gICAgICB2YXIgZmllbGQgPSBzZWxmLmdldEZpZWxkKGF0dHJpYnV0ZSxmaWVsZHMpO1xuICAgICAgaWYoZmllbGQpe1xuICAgICAgICBmaWVsZC52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHJlbGF0aW9uc1Byb21pc2UgPSB0aGlzLmdldFJlbGF0aW9uc1dpdGhWYWx1ZXMoZmVhdHVyZSk7XG4gIHJlbGF0aW9uc1Byb21pc2VcbiAgICAudGhlbihmdW5jdGlvbihyZWxhdGlvbnMpe1xuICAgICAgZm9ybSA9IG5ldyBzZWxmLl9mb3JtQ2xhc3Moe1xuICAgICAgICBwcm92aWRlcjogc2VsZixcbiAgICAgICAgbmFtZTogXCJFZGl0YSBhdHRyaWJ1dGkgXCIrdmVjdG9yTGF5ZXIubmFtZSxcbiAgICAgICAgaWQ6IFwiYXR0cmlidXRlcy1lZGl0LVwiK3ZlY3RvckxheWVyLm5hbWUsXG4gICAgICAgIGRhdGFpZDogdmVjdG9yTGF5ZXIubmFtZSxcbiAgICAgICAgdmVjdG9yTGF5ZXI6IHZlY3RvckxheWVyLFxuICAgICAgICBwazogdmVjdG9yTGF5ZXIucGssXG4gICAgICAgIGlzbmV3OiBzZWxmLmlzTmV3RmVhdHVyZShmZWF0dXJlLmdldElkKCkpLFxuICAgICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgICAgcmVsYXRpb25zOiByZWxhdGlvbnMsXG4gICAgICAgIGVkaXRvcjogc2VsZixcbiAgICAgICAgYnV0dG9uczpbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IFwiU2FsdmFcIixcbiAgICAgICAgICAgIHR5cGU6IFwic2F2ZVwiLFxuICAgICAgICAgICAgY2xhc3M6IFwiYnRuLWRhbmdlclwiLFxuICAgICAgICAgICAgY2JrOiBmdW5jdGlvbihmaWVsZHMsIHJlbGF0aW9ucyl7XG4gICAgICAgICAgICAgIHNlbGYuc2V0RmllbGRzV2l0aFZhbHVlcyhmZWF0dXJlLCBmaWVsZHMsIHJlbGF0aW9ucyk7XG4gICAgICAgICAgICAgIGlmIChuZXh0KXtcbiAgICAgICAgICAgICAgICBuZXh0KHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aXRsZTogXCJDYW5jZWxsYVwiLFxuICAgICAgICAgICAgdHlwZTogXCJjYW5jZWxcIixcbiAgICAgICAgICAgIGNsYXNzOiBcImJ0bi1wcmltYXJ5XCIsXG4gICAgICAgICAgICBjYms6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIEdVSS5zaG93Rm9ybShmb3JtLHtcbiAgICAgICAgbW9kYWw6IHRydWUsXG4gICAgICAgIGNsb3NhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSlcbiAgICAuZmFpbChmdW5jdGlvbigpe1xuICAgICAgaWYgKG5leHQpe1xuICAgICAgICBuZXh0KGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0b3I7IiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xuXG4vLyBPZ2dldHRvIFJlbGF0aW9uRWRpdEJ1ZmZlclxuLy8gVXRpbGl6emF0byBkYWxsJ2VkaXRvciBwZXIgdGVuZXJlIHRyYWNjaWEgZGVsbGUgbW9kaWZpY2hlIGFsbGUgcmVsYXppb25pXG4vLyBsZWdhdGUgYWxsYSBwYXJ0aWNvbGFyZSBmZWF0dXJlIGRlbCBsYXllciBpbiBlZGl0aW5nIGluIHF1ZWwgbW9tZW50b1xuZnVuY3Rpb24gUmVsYXRpb25FZGl0QnVmZmVyKGVkaXRvciwgcmVsYXRpb25OYW1lKSB7XG4gIC8vIGkgZHVlIHBhcmFtZXRyeSBzb25vIGwnZWRpdG9yIGJ1ZmZlciBhIGN1aSBzaSBsZWdhIGxhIHJlbGF6aW9uZS9pXG4gIC8vaWwgbm9tZSBkZWxsYSByZWxhemlvbmUgY2hlIG5vbiDDqCBhbHRybyBjaGUgaWwgbm9tZSBkZWwgbGF5ZXIgbGVnYXRvIGFsXG4gIC8vIGxheWVyIGNoZSBzdGlhbW8gZWRpdGFuZG9cbiAgdGhpcy5fcmVsYXRpb25OYW1lID0gcmVsYXRpb25OYW1lO1xuICB0aGlzLl9lZGl0b3IgPSBlZGl0b3I7XG4gIC8vIGJ1ZmZlciBkZWdsaSBlbGVtZW50aVxuICB0aGlzLl9lbGVtZW50c0J1ZmZlciA9IHt9O1xufVxuaW5oZXJpdChSZWxhdGlvbkVkaXRCdWZmZXIsIEczV09iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXRpb25FZGl0QnVmZmVyO1xuXG52YXIgcHJvdG8gPSBSZWxhdGlvbkVkaXRCdWZmZXIucHJvdG90eXBlO1xuLy8gY2xlYXIgQnVmZmVyXG5wcm90by5jb21taXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJCdWZmZXJzKCk7XG59O1xuLy8gdW5kb0FsbCBSZWxhdGlvblxucHJvdG8udW5kb0FsbCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuX2NsZWFyQnVmZmVycygpO1xufTtcbi8vIGRpc3RydWdnZSB0dXR0ZSBsZSByZWxhaW9uaVxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuX2NsZWFyQnVmZmVycygpO1xufTtcbi8vcmVzdGl0dWlzY2UgaWwgbm9tZSBkZWxsYSByZWxhemlvbmVcbnByb3RvLmdldFJlbGF0aW9uTmFtZSA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLl9yZWxhdGlvbk5hbWU7XG59O1xuLy8gZ2VuYXIgaWQgZGVsbGEgcmVsYXppb25lICh1dGlsZSBxdWFuZG8gc2kgY3JlYSB1bmEgbnVvdmEgcmVsYXppb25lKVxucHJvdG8uZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLl9lZGl0b3IuZ2VuZXJhdGVJZCgpO1xufTtcblxucHJvdG8uZ2V0QWRkZWRFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuXG59O1xuXG5wcm90by5nZXREZWxldGVkRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcblxufTtcblxucHJvdG8uZ2V0VXBkYXRlZEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG5cbn07XG4vL21ldG9kbyBjaGUgZmEgbCdhZ2dpb3JuYW1lbnRvIGRlbGxhIHJlbGF6aW9uZVxucHJvdG8udXBkYXRlUmVsYXRpb24gPSBmdW5jdGlvbihyZWxhdGlvbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIGNpY2xvIHN1Z2xpIGVtZW5ldGkgZGVsbGEgcmVsYXppb25lXG4gIF8uZm9yRWFjaChyZWxhdGlvbi5lbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIC8vY2hpYW1hIGwnYWdnaW9ybmFtZW50byBkZWxsJ2VsZW1lbnRvIG5lbCBidWZmZXJcbiAgICBzZWxmLl9lZGl0QnVmZmVyKGVsZW1lbnQpO1xuICAgIGNvbnNvbGUubG9nKFwiTW9kaWZpY2F0YSBlbGVtZW50byByZWxhemlvbmUgIFwiK3NlbGYuX3JlbGF0aW9uTmFtZSArXCIgKElEOiBcIitlbGVtZW50LmlkK1wiIG5lbCBidWZmZXJcIik7XG4gIH0pXG59O1xuLy8gTW9kaWZpY2EgZWxlbWVudG8gbmVsIGJ1ZmZlclxucHJvdG8uX2VkaXRCdWZmZXIgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIC8vIHVuIGVsZW1lbnRvIGNvbiB0dXR0aSBpIGNhbXBpIHZ1b3RpIG5vbiBsbyBhZ2dpdW5nb1xuICB2YXIgZmlsbGVkID0gXy5zb21lKGVsZW1lbnQuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAvLyB2ZXJpZmljYSBzZSBpbCB2YWxvcmUgw6ggbnVsbG8gbyB1bmRlZmluZWRcbiAgICByZXR1cm4gIV8uaXNOaWwoZmllbGQudmFsdWUpO1xuICB9KTtcbiAgLy8gc2Ugc29ubyB0dXR0aSB2dW90aVxuICBpZiAoIWZpbGxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBlc3RyYWdnbyBsJ2lkIGRlbGwnZWxlbWVudG9cbiAgdmFyIGlkID0gZWxlbWVudC5pZDtcbiAgLy8gdmVyaWZpY28gc2UgZXNpc3RlIGdpw6AgdHJhIGxlIGNoaWF2aSBkZWwgYnVmZmVyIGRlZ2xpIGVsZW1lbnRpXG4gIGlmICghXy5oYXModGhpcy5fZWxlbWVudHNCdWZmZXIsIGlkKSkge1xuICAgIC8vIHNlIG5vbiBlc2lzdGUgY29tZSBuZWwgY2FzbyBkZWwgYnVmZmVyZSBkZWxsZSBmZWF0dXJlIGNyZW8gbCdhcnJheSBhc3NvY2lhbmRvbG9cbiAgICAvLyBhbGxhIGNoaWF2ZSBpZCBkZWxsJ2VsZW1lbnRvXG4gICAgdGhpcy5fZWxlbWVudHNCdWZmZXJbaWRdID0gW107XG4gIH1cbiAgLy8gYWdnaXVuZ28gYWxsJ2FycmF5IGRlbGxlIG1vZGlmaWNoZSBkZWxsJ2VsZWxlbWVudG9cbiAgdGhpcy5fZWxlbWVudHNCdWZmZXJbaWRdLnB1c2goZWxlbWVudCk7XG4gIC8vIHJpY2hpYW1vIGxhIGZ1bnppb25lIFNldERpcnR5XG4gIHRoaXMuX3NldERpcnR5KHRydWUpO1xufTtcblxuLy8gaWwgZmlsdHJvIHB1w7IgZXNzZXJlICdBTEwnLCAnTkVXJywgJ09MRCcsICdERUxFVEVEJ1xucHJvdG8uZ2V0UmVsYXRpb25FbGVtZW50cyA9IGZ1bmN0aW9uKGZpbHRlcixvbmx5ZmllbGRzdmFsdWVzKSB7XG4gIHZhciBlbGVtZW50cyA9IFtdO1xuICBfLmZvckVhY2godGhpcy5fZWxlbWVudHNCdWZmZXIsIGZ1bmN0aW9uKGVsZW1lbnRCdWZmZXIpIHtcbiAgICAvLyBlbGVtZW50IGJ1ZmZlciBzb25vIGdsaSBhcnJ5ICggZSBxdWluZGkgbGUgbW9kaWZjaGUpIGRpIG9nbmkgZWxlbWVudG8gZGVsbGFcbiAgICAvLyByZWxhemlvbmVcbiAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRCdWZmZXIuc2xpY2UoLTEpWzBdO1xuICAgIGlmIChlbGVtZW50IHx8IChmaWx0ZXI9PSdBTEwnKSkgeyAvLyBsbyBwcmVuc28gc29sbyBzZSBub24gw4PCqCBudWxsXG4gICAgICBpZiAoIWZpbHRlciB8fCAoZmlsdGVyICYmIGVsZW1lbnQuc3RhdGU9PWZpbHRlcikpIHtcblxuICAgICAgICBpZihvbmx5ZmllbGRzdmFsdWVzKSB7XG4gICAgICAgICAgZWxlbWVudCA9IF8uY2xvbmVEZWVwKGVsZW1lbnQpO1xuICAgICAgICAgIGVsZW1lbnQuZmllbGRzID0gXy5tYXAoZWxlbWVudC5maWVsZHMsZnVuY3Rpb24oZmllbGQpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZTogZmllbGQubmFtZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGZpZWxkLnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGVsZW1lbnRzO1xufTtcblxucHJvdG8uZ2V0UmVsYXRpb25FbGVtZW50c09ubHlGaWVsZHNWYWx1ZXMgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0UmVsYXRpb25FbGVtZW50cyhmaWx0ZXIsdHJ1ZSk7XG59XG5cbi8vIGZ1bnppb25lIGhhIGVsZW1lbnRpXG5wcm90by5oYXNSZWxhdGlvbkVsZW1lbnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGhhc0VkaXRzID0gZmFsc2U7XG4gIF8uZm9yRWFjaCh0aGlzLl9lbGVtZW50c0J1ZmZlciwgZnVuY3Rpb24oZWxlbWVudEJ1ZmZlcikge1xuICAgIGhhc0VkaXRzID0gaGFzRWRpdHMgfHwgKGVsZW1lbnRCdWZmZXIubGVuZ3RoID4gMCk7XG4gIH0pO1xuICByZXR1cm4gaGFzRWRpdHM7XG59O1xuLy8gbGEgZnVuemlvbmUgc2V0RGlydHkgc2VydmVyIHBlciBmYXIgc2NhdGVucmUgbGEgZnVuemlvbmVcbi8vIF9zZXREaXJ0dSBkYWxsICdlZGl0b3IgZGVsbGUgcmVsYXppb25pIChxdWkpIGFsbCdlZGl0b3IgYnVmZmVyIGFsbCcgZWRpdG9yXG5wcm90by5fc2V0RGlydHkgPSBmdW5jdGlvbihib29sKSB7XG4gIHRoaXMuX2VkaXRvci5fc2V0RGlydHkoYm9vbCk7XG59O1xuLy8gbm9uIGZhIGFsdHJvIGNoZSByaXNldHRhcmUgZ2xpIGVsZW1lbnRzIGJ1ZmZlciBhIG9nZ2V0dG8gdnVvdG9cbi8vIGUgc2V0dGFyZSBfc2V0RGlydHkgYSBmYWxzZVxucHJvdG8uX2NsZWFyQnVmZmVycyA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuX2VsZW1lbnRzQnVmZmVyID0ge307XG4gIHRoaXMuX3NldERpcnR5KGZhbHNlKTtcbn07IiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG5cbnZhciBFZGl0aW5nVG9vbCA9IHJlcXVpcmUoJy4vZWRpdGluZ3Rvb2wnKTtcblxuZnVuY3Rpb24gQWRkRmVhdHVyZVRvb2woZWRpdG9yLCBvcHRpb25zKSB7XG5cbiAgdmFyIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gIHRoaXMuX2J1c3kgPSBmYWxzZTtcbiAgdGhpcy5zb3VyY2UgPSBlZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkuZ2V0TWFwTGF5ZXIoKS5nZXRTb3VyY2UoKTtcbiAgdGhpcy5kcmF3SW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLl9zbmFwID0gb3B0aW9ucy5zbmFwIHx8IG51bGw7XG4gIHRoaXMuX3NuYXBJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX2ZpbmlzaENvbmRpdGlvbiA9IG9wdGlvbnMuZmluaXNoQ29uZGl0aW9uIHx8IF8uY29uc3RhbnQodHJ1ZSk7XG4gIHRoaXMuX2NvbmRpdGlvbiA9IG9wdGlvbnMuY29uZGl0aW9uIHx8IF8uY29uc3RhbnQodHJ1ZSk7XG4gIC8vIHF1aSBzaSBkZWZpbmlzY29ubyBpIG1ldG9kaSBjaGUgdm9nbGlhbW8gcG90ZXIgaW50ZXJjZXR0YXJlLFxuICAvLyBlZCBldmVudHVhbG1lbnRlIGJsb2NjYXJlICh2ZWRpIEFQSSBHM1dPYmplY3QpXG4gIHRoaXMuc2V0dGVycyA9IHtcbiAgICBhZGRGZWF0dXJlOiB7XG4gICAgICBmbmM6IEFkZEZlYXR1cmVUb29sLnByb3RvdHlwZS5fYWRkRmVhdHVyZSxcbiAgICAgIGZhbGxiYWNrOiBBZGRGZWF0dXJlVG9vbC5wcm90b3R5cGUuX2ZhbGxCYWNrXG4gICAgfVxuICB9O1xuICBcbiAgYmFzZSh0aGlzLCBlZGl0b3IpO1xufVxuXG5pbmhlcml0KEFkZEZlYXR1cmVUb29sLCBFZGl0aW5nVG9vbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWRkRmVhdHVyZVRvb2w7XG5cbnZhciBwcm90byA9IEFkZEZlYXR1cmVUb29sLnByb3RvdHlwZTtcblxuLy8gbWV0b2RvIGVzZWd1aXRvIGFsbCdhdnZpbyBkZWwgdG9vbFxucHJvdG8ucnVuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgLy9kZWZpbmlzY2UgbCdpbnRlcmF6aW9uZSBjaGUgZGV2ZSBlc3NlcmUgYWdnaXVudGFcbiAgdGhpcy5kcmF3SW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uRHJhdyh7XG4gICAgdHlwZTogdGhpcy5lZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkuZ2VvbWV0cnl0eXBlLFxuICAgIHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgY29uZGl0aW9uOiB0aGlzLl9jb25kaXRpb24sXG4gICAgZmluaXNoQ29uZGl0aW9uOiB0aGlzLl9maW5pc2hDb25kaXRpb24gLy8gZGlzcG9uaWJpbGUgZGEgaHR0cHM6Ly9naXRodWIuY29tL29wZW5sYXllcnMvb2wzL2NvbW1pdC9kNDI1Zjc1YmVhMDVjYjc3NTU5OTIzZTQ5NGY1NDE1NmM2NjkwYzBiXG4gIH0pO1xuICAvL2FnZ2l1bmdlIGwnaW50ZXJhemlvbmUgdHJhbWl0ZSBpbCBtZXRvZG8gZ2VuZXJhbGUgZGkgZWRpdG9yLmpzXG4gIC8vIGNoZSBub24gZmEgYWx0cm8gY2hlIGNoYWltYXJlIGlsIG1hcHNlcnZpY2VcbiAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLmRyYXdJbnRlcmFjdGlvbik7XG4gIC8vc2V0dGEgYXR0aXZhIGwnaW50ZXJhemlvbmVcbiAgdGhpcy5kcmF3SW50ZXJhY3Rpb24uc2V0QWN0aXZlKHRydWUpO1xuICAvLyB2aWVuZSBzZXR0YXRvIHN1bGwnaW5pemlvIGRlbCBkcmF3IGwnZXZlbnRvIGRyYXdzdGFydCBkZWxsJ2VkaXRvclxuICB0aGlzLmRyYXdJbnRlcmFjdGlvbi5vbignZHJhd3N0YXJ0JyxmdW5jdGlvbihlKSB7XG4gICAgc2VsZi5lZGl0b3IuZW1pdCgnZHJhd3N0YXJ0JyxlKTtcbiAgfSk7XG4gIC8vIHZpZW5lIHNldHRhdG8gbCdldmVudG8gZHJhd2VuZFxuICB0aGlzLmRyYXdJbnRlcmFjdGlvbi5vbignZHJhd2VuZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICBzZWxmLmVkaXRvci5lbWl0KCdkcmF3ZW5kJyxlKTtcbiAgICBpZiAoIXNlbGYuX2J1c3kpIHtcbiAgICAgIHNlbGYuX2J1c3kgPSB0cnVlO1xuICAgICAgc2VsZi5wYXVzZSgpO1xuICAgICAgLy92aWVuZSBjaGlhbWF0byBsJ2FkZEZlYXR1cmUgZGVsIGNoZSAgdG9vbCAobW9kaWZpY2F0YSBkYSBHM3dvYmplY3QpIGNoZVxuICAgICAgLy8gY2hpYW1hIGwnYWRkZmVhdHVyZSBkZWwgYnVmZmVyXG4gICAgICAvLyBpbCBtZXRvZG8gKGVzc2VuZG8gdW4gXCJzZXR0ZXJcIikgc2NhdGVuYSBnbGkgZXZlbnR1YWxpIGxpc3RlbmVyc1xuICAgICAgLy8gZGF0aSBkYSBvbmJlZm9yZSwgb25hZnRlciwgb25iZWZvcmVhc3luY1xuICAgICAgc2VsZi5hZGRGZWF0dXJlKGUuZmVhdHVyZSk7XG4gICAgfVxuICB9KTtcbiAgLy9zbmFwcGluZ1xuICBpZiAodGhpcy5fc25hcCkge1xuICAgIHRoaXMuX3NuYXBJbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5TbmFwKHtcbiAgICAgIHNvdXJjZTogdGhpcy5fc25hcC52ZWN0b3JMYXllci5nZXRTb3VyY2UoKVxuICAgIH0pO1xuICAgIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fc25hcEludGVyYWN0aW9uKTtcbiAgfVxufTtcbi8vbWV0b2RvIHBhdXNhXG5wcm90by5wYXVzZSA9IGZ1bmN0aW9uKHBhdXNlKSB7XG4gIC8vIHNlIG5vbiBkZWZpbml0byBvIHRydWUgZGlzYXR0aXZhIChzZXRBY3RpdmUgZmFsc2UpIGxlIGl0ZXJhY3Rpb25zXG4gIGlmIChfLmlzVW5kZWZpbmVkKHBhdXNlKSB8fCBwYXVzZSkge1xuICAgIGlmICh0aGlzLl9zbmFwSW50ZXJhY3Rpb24pIHtcbiAgICAgIHRoaXMuX3NuYXBJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgIH1cbiAgICB0aGlzLmRyYXdJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICB9XG4gIGVsc2Uge1xuICAgIGlmICh0aGlzLl9zbmFwSW50ZXJhY3Rpb24pIHtcbiAgICAgIHRoaXMuX3NuYXBJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuZHJhd0ludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgfVxufTtcblxuLy8gbWV0b2RvIGVzZWd1aXRvIGFsbGEgZGlzYXR0aXZhemlvbmUgZGVsIHRvb2xcbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgLy9yaW11b3ZlIGUgc2V0dGEgYSBudWxsIGxhIF9zbmFwSW50ZXJhY3Rpb25cbiAgaWYgKHRoaXMuX3NuYXBJbnRlcmFjdGlvbikge1xuICAgICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuX3NuYXBJbnRlcmFjdGlvbik7XG4gICAgIHRoaXMuX3NuYXBJbnRlcmFjdGlvbiA9IG51bGw7XG4gIH1cbiAgLy9yaW1vdmUgbCdpbnRlcmF6aW9uZSBlIHNldHRhIGEgbnVsbCBkcmF3SW50ZXJhY2lvblxuICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuZHJhd0ludGVyYWN0aW9uKTtcbiAgdGhpcy5kcmF3SW50ZXJhY3Rpb24gPSBudWxsO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnByb3RvLnJlbW92ZUxhc3RQb2ludCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kcmF3SW50ZXJhY3Rpb24pIHtcbiAgICAvLyBwcm92byBhIHJpbXVvdmVyZSBsJ3VsdGltbyBwdW50by4gTmVsIGNhc28gbm9uIGVzaXN0YSBsYSBnZW9tZXRyaWEgZ2VzdGlzY28gc2lsZW56aW9zYW1lbnRlIGwnZXJyb3JlXG4gICAgdHJ5e1xuICAgICAgdGhpcy5kcmF3SW50ZXJhY3Rpb24ucmVtb3ZlTGFzdFBvaW50KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAvL1xuICAgIH1cbiAgfVxufTtcbi8vIGFkZCBGZWF0dXJlIGZuYyBzZXR0ZXIgZnVuY3Rpb25cbnByb3RvLl9hZGRGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSkge1xuICAvLyBhZ2dpdW5nbyBsYSBnZW9tZXRyaWEgbmVsbCdlZGl0IGJ1ZmZlclxuICBjb25zb2xlLmxvZygnYWRkIEZlYXR1cmUgYWRkIEZlYXR1cmUgVG9vbCcpO1xuICB0aGlzLmVkaXRvci5hZGRGZWF0dXJlKGZlYXR1cmUpO1xuICB0aGlzLl9idXN5ID0gZmFsc2U7XG4gIHRoaXMucGF1c2UoZmFsc2UpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG4vLyBmdW56aW9uZSBkaSBjYWxsIGJhY2sgZGVsIHNldHRlciBhZGRGZWF0dXJlXG5wcm90by5fZmFsbEJhY2sgPSBmdW5jdGlvbihmZWF0dXJlKSB7XG4gIHRoaXMuX2J1c3kgPSBmYWxzZTtcbiAgLy8gcmltdW92byBsJ3VsdGltYSBmZWF0dXJlIGluc2VyaXRhLCBvdnZlcm8gcXVlbGxhIGRpc2VnbmF0YSBtYSBjaGUgbm9uIHNpIHZ1b2xlIHNhbHZhcmVcbiAgdGhpcy5zb3VyY2UuZ2V0RmVhdHVyZXNDb2xsZWN0aW9uKCkucG9wKCk7XG4gIHRoaXMucGF1c2UoZmFsc2UpO1xufTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIGdlb20gPSByZXF1aXJlKCdjb3JlL2dlb21ldHJ5L2dlb20nKTtcbnZhciBQaWNrRmVhdHVyZUludGVyYWN0aW9uID0gcmVxdWlyZSgnZzN3LW9sMy9zcmMvaW50ZXJhY3Rpb25zL3BpY2tmZWF0dXJlaW50ZXJhY3Rpb24nKTtcbnZhciBQaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbiA9IHJlcXVpcmUoJ2czdy1vbDMvc3JjL2ludGVyYWN0aW9ucy9waWNrY29vcmRpbmF0ZXNpbnRlcmFjdGlvbicpO1xuXG52YXIgRWRpdGluZ1Rvb2wgPSByZXF1aXJlKCcuL2VkaXRpbmd0b29sJyk7XG5cbmZ1bmN0aW9uIEN1dExpbmVUb29sKGVkaXRvcixvcHRpb25zKXtcbiAgdGhpcy5zZXR0ZXJzID0ge1xuICAgIGN1dExpbmU6IEN1dExpbmVUb29sLnByb3RvdHlwZS5fY3V0TGluZVxuICB9O1xuICBcbiAgYmFzZSh0aGlzLGVkaXRvcixvcHRpb25zKTtcbiAgXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5pc1BhdXNhYmxlID0gdHJ1ZTtcbiAgdGhpcy5zdGVwcyA9IG5ldyBFZGl0aW5nVG9vbC5TdGVwcyhDdXRMaW5lVG9vbC5zdGVwcyk7XG4gIFxuICB0aGlzLl9vcmlnRmVhdHVyZSA9IG51bGw7XG4gIHRoaXMuX29yaWdHZW9tZXRyeSA9IG51bGw7XG4gIHRoaXMuX25ld0ZlYXR1cmVzID0gW107XG4gIHRoaXMuX2xpbmVQaWNrSW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLl9wb2ludFBpY2tJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX3NlbGVjdExpbmVUb0tlZXBJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX3BvaW50TGF5ZXIgPSBvcHRpb25zLnBvaW50TGF5ZXIgfHwgbnVsbDtcbiAgdGhpcy5fbWluQ3V0UG9pbnREaXN0YW5jZSA9IG9wdGlvbnMubWluQ3V0UG9pbnREaXN0YW5jZSB8fCBJbmZpbml0eTtcbiAgdGhpcy5fbW9kVHlwZSA9IG9wdGlvbnMubW9kVHlwZSB8fCAnTU9ET05DVVQnOyAvLyAnTkVXT05DVVQnIHwgJ01PRE9OQ1VUJ1xuICBcbiAgdGhpcy5fc2VsZWN0ZWRMaW5lT3ZlcmxheSA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe1xuICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSxcbiAgICBzdHlsZTogbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgIGNvbG9yOiAncmdiKDI1NSwyNTUsMCknLFxuICAgICAgICB3aWR0aDogNFxuICAgICAgfSlcbiAgICB9KVxuICB9KTtcbiAgXG4gIC8vdmFyIGN1dExpbmVJZHggPSAwO1xuICAvL3ZhciBjdXRMaW5lQ29sb3JzID0gWydyZ2IoMjU1LDAsMCknLCdyZ2IoMCwwLDI1NSknXVxuICB0aGlzLl9saW5lVG9LZWVwT3ZlcmxheSA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe1xuICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5WZWN0b3IoKSxcbiAgICAvKnN0eWxlOiBmdW5jdGlvbihmZWF0dXJlKXsgXG4gICAgICBjdXRMaW5lSWR4ICs9IDE7XG4gICAgICByZXR1cm4gW25ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgY29sb3I6IGN1dExpbmVDb2xvcnNbY3V0TGluZUlkeCUyXSxcbiAgICAgICAgICB3aWR0aDogNFxuICAgICAgICB9KVxuICAgICAgfSldXG4gICAgfSovXG4gIH0pO1xuXG4gIFxufVxuaW5oZXJpdChDdXRMaW5lVG9vbCxFZGl0aW5nVG9vbCk7XG5tb2R1bGUuZXhwb3J0cyA9IEN1dExpbmVUb29sO1xuXG52YXIgcHJvdG8gPSBDdXRMaW5lVG9vbC5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgXG4gIHRoaXMuX2xpbmVQaWNrSW50ZXJhY3Rpb24gPSBuZXcgUGlja0ZlYXR1cmVJbnRlcmFjdGlvbih7XG4gICAgbGF5ZXJzOiBbdGhpcy5sYXllcix0aGlzLmVkaXRpbmdMYXllcl1cbiAgfSk7XG4gIFxuICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMuX2xpbmVQaWNrSW50ZXJhY3Rpb24pO1xuICBcbiAgLy8gc2VsZXppb25vIGxhIGxpbmVhIGRhIHRhZ2xpYXJlXG4gIHNlbGYuc3RlcHMubmV4dCgpO1xuICB0aGlzLl9saW5lUGlja0ludGVyYWN0aW9uLm9uKCdwaWNrZWQnLGZ1bmN0aW9uKGUpe1xuICAgIHZhciBjdXRGZWF0dXJlO1xuICAgIHZhciBmZWF0dXJlID0gc2VsZi5fb3JpZ0ZlYXR1cmUgPSBlLmZlYXR1cmU7XG4gICAgc2VsZi5fb3JpZ0dlb21ldHJ5ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmNsb25lKCk7XG4gICAgc2VsZi5fc2hvd1NlbGVjdGlvbihzZWxmLl9vcmlnR2VvbWV0cnksMzAwKTtcbiAgICBzZWxmLnJlbW92ZUludGVyYWN0aW9uKHRoaXMpO1xuXG4gICAgXG4gICAgaWYgKHNlbGYuX3BvaW50TGF5ZXIpe1xuICAgICAgc2VsZi5fcG9pbnRQaWNrSW50ZXJhY3Rpb24gPSBuZXcgUGlja0ZlYXR1cmVJbnRlcmFjdGlvbih7XG4gICAgICAgIGxheWVyczogW3NlbGYuX3BvaW50TGF5ZXJdXG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzZWxmLl9wb2ludFBpY2tJbnRlcmFjdGlvbiA9IG5ldyBQaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbigpO1xuICAgIH1cbiAgICBcbiAgICAvLyBwZXNjbyBjb29yZGluYXRhIG8gZmVhdHVyZSBkaSB0YWdsaW8gc2VsZXppb25hdGFcbiAgICBzZWxmLnN0ZXBzLm5leHQoKTtcbiAgICBzZWxmLl9wb2ludFBpY2tJbnRlcmFjdGlvbi5vbigncGlja2VkJyxmdW5jdGlvbihlKXtcbiAgICAgIHNlbGYucmVtb3ZlSW50ZXJhY3Rpb24odGhpcyk7XG4gICAgICB2YXIgY29vcmRpbmF0ZTtcbiAgICAgIGlmIChlLmZlYXR1cmUpe1xuICAgICAgICBjdXRGZWF0dXJlID0gZS5mZWF0dXJlO1xuICAgICAgICBjb29yZGluYXRlID0gY3V0RmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29vcmRpbmF0ZSA9IGUuY29vcmRpbmF0ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjb29yZGluYXRlKXtcbiAgICAgICAgLy8gc25hcHBvIHN1bGxhIGxpbmVhXG4gICAgICAgIHZhciBjbG9zZXN0Q29vcmRpbmF0ZSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDbG9zZXN0UG9pbnQoY29vcmRpbmF0ZSk7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGdlb20uZGlzdGFuY2UoY29vcmRpbmF0ZSxjbG9zZXN0Q29vcmRpbmF0ZSk7XG4gICAgICAgIC8vIHNlIGxvIHNuYXAgw6ggZW50cm8gbGEgdG9sbGVyYW56YVxuICAgICAgICBpZiAoZGlzdGFuY2UgPCBzZWxmLl9taW5DdXRQb2ludERpc3RhbmNlKXtcbiAgICAgICAgICAvLyB0YWdsaW8gbGEgbGluZWEgZSBvdHRlbmdvIGwnYXJyYXkgY29uIGxlIGR1ZSBudW92ZSBmZWF0dXJlXG4gICAgICAgICAgdmFyIHNsaWNlZExpbmVzID0gc2VsZi5fY3V0KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSxjbG9zZXN0Q29vcmRpbmF0ZSk7XG4gICAgICAgICAgaWYgKHNsaWNlZExpbmVzKXtcbiAgICAgICAgICAgIHZhciBwcmV2TGluZUZlYXR1cmUgPSBzbGljZWRMaW5lc1swXTtcbiAgICAgICAgICAgIHZhciBuZXh0TGluZUZlYXR1cmUgPSBzbGljZWRMaW5lc1sxXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIG5ld0lkID0gc2VsZi5lZGl0b3IuZ2VuZXJhdGVJZCgpO1xuICAgICAgICAgICAgcHJldkxpbmVGZWF0dXJlLnNldElkKG5ld0lkKydfMScpO1xuICAgICAgICAgICAgbmV4dExpbmVGZWF0dXJlLnNldElkKG5ld0lkKydfMicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBwcmVuZG8gbGUgcHJvcHJpZXTDoCBkZWxsYSBmZWF0dXJlIG9yaWdpbmFsZSAoZXNjbHVzYSBsYSBnZW9tZXRyaWEpXG4gICAgICAgICAgICB2YXIgb3JpZ1Byb3BlcnRpZXMgPSBmZWF0dXJlLmdldFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgIGRlbGV0ZSBvcmlnUHJvcGVydGllc1tmZWF0dXJlLmdldEdlb21ldHJ5TmFtZSgpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VsZi5fc2hvd1NlbGVjdGlvbihwcmV2TGluZUZlYXR1cmUuZ2V0R2VvbWV0cnkoKSwzMDApO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBzZWxmLl9zaG93U2VsZWN0aW9uKG5leHRMaW5lRmVhdHVyZS5nZXRHZW9tZXRyeSgpLDMwMCk7XG4gICAgICAgICAgICB9LDMwMClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbmVsIGNhc28gZGkgbW9kaWZpY2Egc3UgdGFnbGlvXG4gICAgICAgICAgICBpZiAoc2VsZi5fbW9kVHlwZSA9PSAnTU9ET05DVVQnKXtcbiAgICAgICAgICAgICAgLy8gc2VsZXppb25vIGxhIHBvcnppb25lIGRhIG1hbnRlbmVyZS9tb2RpZmljYXJlXG4gICAgICAgICAgICAgIHNlbGYuc3RlcHMubmV4dCgpO1xuICAgICAgICAgICAgICBzZWxmLl9zZWxlY3RMaW5lVG9LZWVwKHByZXZMaW5lRmVhdHVyZSxuZXh0TGluZUZlYXR1cmUpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGZlYXR1cmVUb0tlZXApe1xuICAgICAgICAgICAgICAgIC8vIGFnZ2lvcm5vIGxhIGZlYXR1cmUgb3JpZ2luYWxlIGNvbiBsYSBnZW9tZXRyaWEgZGVsbGEgZmVhdHVyZSBjaGUgc2kgw6ggc2VsZXppb25hdG8gZGEgbWFudGVuZXJlXG4gICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShmZWF0dXJlVG9LZWVwLmdldEdlb21ldHJ5KCkuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGZlYXR1cmVUb0FkZDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyByaW11b3ZvIHVuYSBkZWxsZSBkdWUgbnVvdmUgZmVhdHVyZSBlIG1pIHRlbmdvIGwndW5pY2EgZmVhdHVyZSBkYSBhZ2dpdW5nZXJlIGNvbWUgbnVvdmFcbiAgICAgICAgICAgICAgICBpZiAocHJldkxpbmVGZWF0dXJlLmdldElkKCkgPT0gZmVhdHVyZVRvS2VlcC5nZXRJZCgpKXtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcmV2TGluZUZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlVG9BZGQgPSBuZXh0TGluZUZlYXR1cmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5leHRMaW5lRmVhdHVyZS5nZXRJZCgpID09IGZlYXR1cmVUb0tlZXAuZ2V0SWQoKSl7XG4gICAgICAgICAgICAgICAgICBkZWxldGUgbmV4dExpbmVGZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgZmVhdHVyZVRvQWRkID0gcHJldkxpbmVGZWF0dXJlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzZWxmLl9uZXdGZWF0dXJlcy5wdXNoKGZlYXR1cmVUb0FkZCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gdHJhbWl0ZSBsJ2VkaXRvciBhc3NlZ25vIGFsbGEgbnVvdmEgZmVhdHVyZSBnbGkgc3Rlc3NpIGF0dHJpYnV0aSBkZWxsJ2FsdHJhLCBvcmlnaW5hbGUsIG1vZGlmaWNhdGFcbiAgICAgICAgICAgICAgICBmZWF0dXJlVG9BZGQuc2V0UHJvcGVydGllcyhvcmlnUHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgLy8gZSBsYSBhZ2dpdW5nbyBhbCBsYXllciBkaSBlZGl0aW5nLCBjb3PDrCBtaSB2aWVuZSBtb3N0cmF0YSBjb21lIG51b3ZhIGZlYXR1cmUgc3VsbGEgbWFwcGFcbiAgICAgICAgICAgICAgICBzZWxmLmVkaXRpbmdMYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhbZmVhdHVyZVRvQWRkXSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICBhZGRlZDogW2ZlYXR1cmVUb0FkZF0sXG4gICAgICAgICAgICAgICAgICB1cGRhdGVkOiBmZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgY3V0ZmVhdHVyZTpjdXRGZWF0dXJlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGEgcXVlc3RvIHB1bnRvIGF2dmlvIGlsIHNldHRlciwgY2hlIHNpIG9jY3VwZXLDsiBkaSBhZ2dpb3JuYXJlIGwnZWRpdGJ1ZmZlciBhIHNlY29uZGEgZGVsIHRpcG8gZGkgbW9kaWZpY2FcbiAgICAgICAgICAgICAgICBzZWxmLmN1dExpbmUoZGF0YSxzZWxmLl9tb2RUeXBlKVxuICAgICAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICBzZWxmLl9yb2xsQmFjaygpO1xuICAgICAgICAgICAgICAgICAgc2VsZi5yZXJ1bigpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmVsIGNhc28gbGEgbW9kaWZpY2Egc2lhIGFnZ2l1bmdvIHN1IHRhZ2xpYSwgYWxsb3JhIHJpbXVvdm8gbCdvcmlnaW5hbGUgZSBhZ2dpdW5nbyBsZSBkdWUgbnVvdmUgZmVhdHVyZVxuICAgICAgICAgICAgICBzZWxmLmxheWVyLmdldFNvdXJjZSgpLnJlbW92ZUZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICAgIC8vc2VsZi5lZGl0b3Iuc2V0QXR0cmlidXRlcyhwcmV2TGluZUZlYXR1cmUsb3JpZ1Byb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAvL3NlbGYuZWRpdG9yLnNldEF0dHJpYnV0ZXMobmV4dExpbmVGZWF0dXJlLG9yaWdQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgc2VsZi5fbmV3RmVhdHVyZXMucHVzaChwcmV2TGluZUZlYXR1cmUpO1xuICAgICAgICAgICAgICBzZWxmLl9uZXdGZWF0dXJlcy5wdXNoKG5leHRMaW5lRmVhdHVyZSk7XG4gICAgICAgICAgICAgIHNlbGYuZWRpdGluZ0xheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmVzKFtmZWF0dXJlVG9BZGQscHJldkxpbmVGZWF0dXJlXSk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhZGRlZDogW3ByZXZMaW5lRmVhdHVyZSxuZXh0TGluZUZlYXR1cmVdLFxuICAgICAgICAgICAgICAgIHJlbW92ZWQ6IGZlYXR1cmVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgc2VsZi5jdXRMaW5lKGRhdGEsc2VsZi5fbW9kVHlwZSlcbiAgICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBzZWxmLl9yb2xsQmFjaygpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVydW4oKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnJlcnVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICBzZWxmLmFkZEludGVyYWN0aW9uKHNlbGYuX3BvaW50UGlja0ludGVyYWN0aW9uKTtcbiAgfSk7XG59O1xuXG5wcm90by5wYXVzZSA9IGZ1bmN0aW9uKHBhdXNlKXtcbiAgaWYgKF8uaXNVbmRlZmluZWQocGF1c2UpIHx8IHBhdXNlKXtcbiAgICB0aGlzLl9saW5lUGlja0ludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5fcG9pbnRQaWNrSW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLl9saW5lUGlja0ludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICB0aGlzLl9wb2ludFBpY2tJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gIH1cbn07XG5cbnByb3RvLnJlcnVuID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5zdG9wKCk7XG4gIHRoaXMucnVuKCk7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fY2xlYW5VcCgpO1xuICBcbiAgdmFyIHN0b3AgPSBFZGl0aW5nVG9vbC5wcm90b3R5cGUuc3RvcC5jYWxsKHRoaXMpO1xuICBcbiAgaWYgKHN0b3ApIHtcbiAgICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuX2xpbmVQaWNrSW50ZXJhY3Rpb24pO1xuICAgIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fcG9pbnRQaWNrSW50ZXJhY3Rpb24pO1xuICAgIHRoaXMuX2xpbmVQaWNrSW50ZXJhY3Rpb24gPSBudWxsO1xuICAgIHRoaXMuX3BvaW50UGlja0ludGVyYWN0aW9uID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBzdG9wO1xufTtcblxucHJvdG8uX2NsZWFuVXAgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9vcmlnRmVhdHVyZSA9IG51bGw7XG4gIHRoaXMuX29yaWdHZW9tZXRyeSA9IG51bGw7XG4gIHRoaXMuX25ld0ZlYXR1cmVzID0gW107XG4gIHRoaXMuX2xpbmVUb0tlZXBPdmVybGF5LnNldE1hcChudWxsKTtcbiAgdGhpcy5fc2VsZWN0ZWRMaW5lT3ZlcmxheS5zZXRNYXAobnVsbCk7XG59O1xuXG5wcm90by5fcm9sbEJhY2sgPSBmdW5jdGlvbigpe1xuICAvLyByaW1ldHRvIGxhIHZlY2NoaWEgZ2VvbWV0cmlhXG4gIHRoaXMuX29yaWdGZWF0dXJlLnNldEdlb21ldHJ5KHRoaXMuX29yaWdHZW9tZXRyeSk7XG4gIC8vIHJpbXVvdm8gbGUgZmVhdHVyZSAobnVvdmUpIGVkaXRhdGUgZGFsIGxheWVyIGRpIGVkaXRhemlvbmVcbiAgdHJ5IHtcbiAgICBfLmZvckVhY2godGhpcy5fbmV3RmVhdHVyZXMsZnVuY3Rpb24oZmVhdHVyZSl7XG4gICAgICBzZWxmLmVkaXRpbmdMYXllci5nZXRTb3VyY2UoKS5yZW1vdmVGZWF0dXJlKGZlYXR1cmUpO1xuICAgIH0pO1xuICB9XG4gIGNhdGNoIChlKSB7fTtcbn07XG5cbnByb3RvLl9jdXRMaW5lID0gZnVuY3Rpb24oZGF0YSxtb2RUeXBlKXtcbiAgLy8gc2UgbW9kaWZpY28gc3UgdGFnbGlvIGFnZ2lvcm5vIGxhIHZlY2NoaWEgZmVhdHVyZSBlIGFnZ2l1bmdvIGxhIG51b3ZhXG4gIGlmIChtb2RUeXBlID09ICdNT0RPTkNVVCcpe1xuICAgIHZhciBmZWF0dXJlVG9VcGRhdGUgPSBkYXRhLnVwZGF0ZWQ7XG4gICAgdmFyIGZlYXR1cmVUb0FkZCA9IGRhdGEuYWRkZWRbMF07XG4gICAgdGhpcy5lZGl0b3IudXBkYXRlRmVhdHVyZShmZWF0dXJlVG9VcGRhdGUpO1xuICAgIHRoaXMuZWRpdG9yLmFkZEZlYXR1cmUoZmVhdHVyZVRvQWRkKTtcbiAgfVxuICAvLyBhbHRyaW1lbnRpIHJpbXVvdm8gbGEgdmVjY2hpYSBlIGFnZ2l1bmdvIGxlIG51b3ZlXG4gIGVsc2V7XG4gICAgdmFyIGZlYXR1cmVUb1JlbW92ZSA9IGRhdGEucmVtb3ZlZDtcbiAgICB2YXIgZmVhdHVyZVRvQWRkMSA9IGRhdGEuYWRkZWRbMF07XG4gICAgdmFyIGZlYXR1cmVUb0FkZDIgPSBkYXRhLmFkZGVkWzFdO1xuICAgIHRoaXMuZWRpdG9yLmRlbGV0ZUZlYXR1cmUoZmVhdHVyZVRvUmVtb3ZlKTtcbiAgICB0aGlzLmVkaXRvci5hZGRGZWF0dXJlKGZlYXR1cmVUb0FkZDEpO1xuICAgIHRoaXMuZWRpdG9yLmFkZEZlYXR1cmUoZmVhdHVyZVRvQWRkMik7XG4gIH1cbiAgdGhpcy5fYnVzeSA9IGZhbHNlO1xuICB0aGlzLnBhdXNlKGZhbHNlKTtcbiAgdGhpcy5zdGVwcy5jb21wbGV0ZWQoKTtcbiAgdGhpcy5yZXJ1bigpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnByb3RvLl9zZWxlY3RMaW5lVG9LZWVwID0gZnVuY3Rpb24ocHJldkxpbmVGZWF0dXJlLG5leHRMaW5lRmVhdHVyZSl7XG4gIHZhciBkID0gJC5EZWZlcnJlZCgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBsYXllciA9IHRoaXMuX2xpbmVUb0tlZXBPdmVybGF5O1xuICBsYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhbcHJldkxpbmVGZWF0dXJlLG5leHRMaW5lRmVhdHVyZV0pO1xuICBsYXllci5zZXRNYXAodGhpcy5lZGl0b3IuZ2V0TWFwU2VydmljZSgpLnZpZXdlci5tYXApO1xuICBcbiAgdmFyIHNlbGVjdExpbmVJbnRlcmFjdGlvbiA9IG5ldyBQaWNrRmVhdHVyZUludGVyYWN0aW9uKHtcbiAgICBsYXllcnM6IFt0aGlzLl9saW5lVG9LZWVwT3ZlcmxheV0sXG4gIH0pO1xuICB0aGlzLmFkZEludGVyYWN0aW9uKHNlbGVjdExpbmVJbnRlcmFjdGlvbik7XG4gIFxuICBzZWxlY3RMaW5lSW50ZXJhY3Rpb24ub24oJ3BpY2tlZCcsZnVuY3Rpb24oZSl7XG4gICAgbGF5ZXIuc2V0TWFwKG51bGwpO1xuICAgIHNlbGYucmVtb3ZlSW50ZXJhY3Rpb24odGhpcyk7XG4gICAgZC5yZXNvbHZlKGUuZmVhdHVyZSk7XG4gIH0pO1xuICBcbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcblxucHJvdG8uX2ZhbGxCYWNrID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIHRoaXMuX2J1c3kgPSBmYWxzZTtcbiAgdGhpcy5wYXVzZShmYWxzZSk7XG59O1xuXG5wcm90by5fY3V0ID0gZnVuY3Rpb24oZ2VvbWV0cnksY3V0Q29vcmRpbmF0ZSl7XG4gIHdoaWxlIChjdXRDb29yZGluYXRlLmxlbmd0aCA8IGdlb21ldHJ5LmdldFN0cmlkZSgpKSB7XG4gICAgY3V0Q29vcmRpbmF0ZS5wdXNoKDApO1xuICB9XG5cbiAgdmFyIG1pbkRpc3RhbmNlID0gSW5maW5pdHk7XG4gIHZhciBjbG9zZXN0SW5kZXggPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICAvLyBjZXJjbyBsJ2luZGljZSBkZWwgc2VnbWVudG8gbGluZWFyZSBzdSBjdWkgcmljYWRlIGxhIGNvb3JkaW5hdGEgZGkgdGFnbGlvXG4gIGdlb21ldHJ5LmZvckVhY2hTZWdtZW50KGZ1bmN0aW9uKHYwLHYxKXtcbiAgICB2YXIgc2VnbWVudFBvaW50ID0gZ2VvbS5jbG9zZXN0T25TZWdtZW50KGN1dENvb3JkaW5hdGUsW3YwLHYxXSk7XG4gICAgdmFyIGRpc3RhbmNlID0gZ2VvbS5kaXN0YW5jZShjdXRDb29yZGluYXRlLHNlZ21lbnRQb2ludCk7XG4gICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2Upe1xuICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgIGNsb3Nlc3RJbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICBpbmRleCArPSAxO1xuICB9KVxuICBcbiAgdmFyIGNvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgLy8gcHJlbmRvIGxhIHByaW1hIHBvcnppb25lIGRpIGNvb3JkaW5hdGVcbiAgdmFyIHByZXZDb29yZHMgPSBjb29yZGluYXRlcy5zbGljZSgwLGNsb3Nlc3RJbmRleCsxKTtcbiAgLy8gYWdnaXVuZ28gbGEgY29vcmRpbmF0YSBkaSB0YWdsaW8gYWxsYSBwcmltYSBwb3J6aW9uZVxuICBwcmV2Q29vcmRzLnNwbGljZShwcmV2Q29vcmRzLmxlbmd0aCwwLGN1dENvb3JkaW5hdGUpO1xuICAvLyBwcmVuZG8gbGEgc2Vjb25kYSBwb3J6aW9uZSBkaSBjb29yZGluYXRlXG4gIHZhciBuZXh0Q29vcmRzID0gY29vcmRpbmF0ZXMuc2xpY2UoY2xvc2VzdEluZGV4KTtcbiAgLy8gYWdnaXVuZ28gbGEgY29vcmRpbmF0YSBkaSB0YWdsaW8gYWxsYSBzZWNvbmRhIHBvcnppb25lXG4gIG5leHRDb29yZHMuc3BsaWNlKDAsMSxjdXRDb29yZGluYXRlKTtcbiAgXG4gIGlmIChwcmV2Q29vcmRzLmxlbmd0aCA8IDIgfHwgbmV4dENvb3Jkcy5sZW5ndGggPCAyKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgXG4gIC8vIGNyZW8gbGUgZ2VvbWV0cmllXG4gIHZhciBwcmV2TGluZSA9IG5ldyBvbC5nZW9tLkxpbmVTdHJpbmcoKTtcbiAgcHJldkxpbmUuc2V0Q29vcmRpbmF0ZXMocHJldkNvb3Jkcyk7XG4gIHZhciBuZXh0TGluZSA9IG5ldyBvbC5nZW9tLkxpbmVTdHJpbmcoKTtcbiAgbmV4dExpbmUuc2V0Q29vcmRpbmF0ZXMobmV4dENvb3Jkcyk7XG4gIFxuICAvLyBjcmVvIGxlIG51b3ZlIGZlYXR1cmVcbiAgdmFyIHByZXZMaW5lRmVhdCA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICBnZW9tZXRyeTogcHJldkxpbmVcbiAgfSk7XG4gIHZhciBuZXh0TGluZUZlYXQgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgZ2VvbWV0cnk6IG5leHRMaW5lXG4gIH0pO1xuICBcbiAgcmV0dXJuIFtwcmV2TGluZUZlYXQsbmV4dExpbmVGZWF0XTtcbn07XG5cblxuLy8gVE9ETyBxdWVzdG8gYW5kcsOgIHNwb3N0YXRvIGRlbnRybyBNYXBTZXJ2aWNlIG8gY29tdW5xdWUgaW4gdW5hIGxpYnJlcmlhIGNvcmVcbnByb3RvLl9zaG93U2VsZWN0aW9uID0gZnVuY3Rpb24oZ2VvbWV0cnksZHVyYXRpb24pe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IG51bGw7XG4gIHZhciBvdmVybGF5ID0gdGhpcy5fc2VsZWN0ZWRMaW5lT3ZlcmxheTtcbiAgXG4gIHZhciBmZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoKTtcbiAgZmVhdHVyZS5zZXRHZW9tZXRyeShnZW9tZXRyeSk7XG4gIG92ZXJsYXkuZ2V0U291cmNlKCkuYWRkRmVhdHVyZXMoW2ZlYXR1cmVdKTtcbiAgb3ZlcmxheS5zZXRNYXAodGhpcy5lZGl0b3IuZ2V0TWFwU2VydmljZSgpLnZpZXdlci5tYXApO1xuICBpZihkdXJhdGlvbil7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgb3ZlcmxheS5zZXRNYXAobnVsbCk7XG4gICAgICBzZWxmLl9zZWxlY3RlZExpbmVPdmVybGF5LmdldFNvdXJjZSgpLmNsZWFyKCk7XG4gICAgfSxkdXJhdGlvbik7XG4gIH1cbn07XG5cbnByb3RvLl9pc05ldyA9IGZ1bmN0aW9uKGZlYXR1cmUpe1xuICByZXR1cm4gKCFfLmlzTmlsKHRoaXMuZWRpdGluZ0xheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVCeUlkKGZlYXR1cmUuZ2V0SWQoKSkpKTtcbn07XG5cbkN1dExpbmVUb29sLnN0ZXBzID0gW1xuICB7XG4gICAgdHlwZTogXCJzZWxlY3RsaW5lXCJcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwic2VsZWN0Y3V0cG9pbnRcIlxuICB9LFxuICB7XG4gICAgdHlwZTogXCJzZWxlY3RwYXJ0dG9rZWVwXCJcbiAgfVxuXVxuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciBEZWxldGVJbnRlcmFjdGlvbiA9IHJlcXVpcmUoJ2czdy1vbDMvc3JjL2ludGVyYWN0aW9ucy9kZWxldGVmZWF0dXJlaW50ZXJhY3Rpb24nKTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG5cbnZhciBFZGl0aW5nVG9vbCA9IHJlcXVpcmUoJy4vZWRpdGluZ3Rvb2wnKTtcblxuZnVuY3Rpb24gRGVsZXRlRmVhdHVyZVRvb2woZWRpdG9yKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gIHRoaXMuaXNQYXVzYWJsZSA9IHRydWU7XG4gIHRoaXMuZHJhd0ludGVyYWN0aW9uID0gbnVsbDtcbiAgdGhpcy5sYXllciA9IG51bGw7XG4gIHRoaXMuZWRpdGluZ0xheWVyID0gbnVsbDtcblxuICB0aGlzLnNldHRlcnMgPSB7XG4gICAgZGVsZXRlRmVhdHVyZTogRGVsZXRlRmVhdHVyZVRvb2wucHJvdG90eXBlLl9kZWxldGVGZWF0dXJlXG4gIH07XG4gIFxuICBiYXNlKHRoaXMsZWRpdG9yKTtcbn1cbmluaGVyaXQoRGVsZXRlRmVhdHVyZVRvb2wsIEVkaXRpbmdUb29sKTtcbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlRmVhdHVyZVRvb2w7XG5cbnZhciBwcm90byA9IERlbGV0ZUZlYXR1cmVUb29sLnByb3RvdHlwZTtcblxuLyogQlJVVFRJU1NJTU8hIFRvY2NhIHJpZGVmaW5pcmUgdHV0dGUgbGUgcGFydGkgaW50ZXJuZXQgZGkgT0wzIG5vbiBlc3Bvc3RlIGRhbGxlIEFQSSAqL1xuXG5vbC5nZW9tLkdlb21ldHJ5VHlwZSA9IHtcbiAgUE9JTlQ6ICdQb2ludCcsXG4gIExJTkVfU1RSSU5HOiAnTGluZVN0cmluZycsXG4gIExJTkVBUl9SSU5HOiAnTGluZWFyUmluZycsXG4gIFBPTFlHT046ICdQb2x5Z29uJyxcbiAgTVVMVElfUE9JTlQ6ICdNdWx0aVBvaW50JyxcbiAgTVVMVElfTElORV9TVFJJTkc6ICdNdWx0aUxpbmVTdHJpbmcnLFxuICBNVUxUSV9QT0xZR09OOiAnTXVsdGlQb2x5Z29uJyxcbiAgR0VPTUVUUllfQ09MTEVDVElPTjogJ0dlb21ldHJ5Q29sbGVjdGlvbicsXG4gIENJUkNMRTogJ0NpcmNsZSdcbn07XG5cbnZhciBzdHlsZXMgPSB7fTtcbnZhciB3aGl0ZSA9IFsyNTUsIDI1NSwgMjU1LCAxXTtcbnZhciBibHVlID0gWzAsIDE1MywgMjU1LCAxXTtcbnZhciByZWQgPSBbMjU1LCAwLCAwLCAxXTtcbnZhciB3aWR0aCA9IDM7XG5zdHlsZXNbb2wuZ2VvbS5HZW9tZXRyeVR5cGUuUE9MWUdPTl0gPSBbXG4gIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgZmlsbDogbmV3IG9sLnN0eWxlLkZpbGwoe1xuICAgICAgY29sb3I6IFsyNTUsIDI1NSwgMjU1LCAwLjVdXG4gICAgfSlcbiAgfSlcbl07XG5zdHlsZXNbb2wuZ2VvbS5HZW9tZXRyeVR5cGUuTVVMVElfUE9MWUdPTl0gPVxuICAgIHN0eWxlc1tvbC5nZW9tLkdlb21ldHJ5VHlwZS5QT0xZR09OXTtcblxuc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLkxJTkVfU1RSSU5HXSA9IFtcbiAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgY29sb3I6IHdoaXRlLFxuICAgICAgd2lkdGg6IHdpZHRoICsgMlxuICAgIH0pXG4gIH0pLFxuICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICBjb2xvcjogcmVkLFxuICAgICAgd2lkdGg6IHdpZHRoXG4gICAgfSlcbiAgfSlcbl07XG5zdHlsZXNbb2wuZ2VvbS5HZW9tZXRyeVR5cGUuTVVMVElfTElORV9TVFJJTkddID1cbiAgICBzdHlsZXNbb2wuZ2VvbS5HZW9tZXRyeVR5cGUuTElORV9TVFJJTkddO1xuXG5zdHlsZXNbb2wuZ2VvbS5HZW9tZXRyeVR5cGUuQ0lSQ0xFXSA9XG4gICAgc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLlBPTFlHT05dLmNvbmNhdChcbiAgICAgICAgc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLkxJTkVfU1RSSU5HXVxuICAgICk7XG5cblxuc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLlBPSU5UXSA9IFtcbiAgbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICBpbWFnZTogbmV3IG9sLnN0eWxlLkNpcmNsZSh7XG4gICAgICByYWRpdXM6IHdpZHRoICogMixcbiAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgY29sb3I6IHJlZFxuICAgICAgfSksXG4gICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICBjb2xvcjogd2hpdGUsXG4gICAgICAgIHdpZHRoOiB3aWR0aCAvIDJcbiAgICAgIH0pXG4gICAgfSksXG4gICAgekluZGV4OiBJbmZpbml0eVxuICB9KVxuXTtcbnN0eWxlc1tvbC5nZW9tLkdlb21ldHJ5VHlwZS5NVUxUSV9QT0lOVF0gPVxuICAgIHN0eWxlc1tvbC5nZW9tLkdlb21ldHJ5VHlwZS5QT0lOVF07XG5cbnN0eWxlc1tvbC5nZW9tLkdlb21ldHJ5VHlwZS5HRU9NRVRSWV9DT0xMRUNUSU9OXSA9XG4gICAgc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLlBPTFlHT05dLmNvbmNhdChcbiAgICAgICAgc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLkxJTkVfU1RSSU5HXSxcbiAgICAgICAgc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLlBPSU5UXVxuICAgICk7XG5cblxuc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLlBPTFlHT05dID0gXy5jb25jYXQoc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLlBPTFlHT05dLHN0eWxlc1tvbC5nZW9tLkdlb21ldHJ5VHlwZS5MSU5FX1NUUklOR10pO1xuc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLkdFT01FVFJZX0NPTExFQ1RJT05dID0gXy5jb25jYXQoc3R5bGVzW29sLmdlb20uR2VvbWV0cnlUeXBlLkdFT01FVFJZX0NPTExFQ1RJT05dLHN0eWxlc1tvbC5nZW9tLkdlb21ldHJ5VHlwZS5MSU5FX1NUUklOR10pO1xuICAgIFxuLyogRklORSBCUlVUVElTU0lNTyEgKi9cblxucHJvdG8ucnVuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5sYXllciA9IHRoaXMuZWRpdG9yLmdldFZlY3RvckxheWVyKCkuZ2V0TWFwTGF5ZXIoKTtcbiAgdGhpcy5lZGl0aW5nTGF5ZXIgPSB0aGlzLmVkaXRvci5nZXRFZGl0VmVjdG9yTGF5ZXIoKS5nZXRNYXBMYXllcigpO1xuICBcbiAgdGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uU2VsZWN0KHtcbiAgICBsYXllcnM6IFt0aGlzLmxheWVyLHRoaXMuZWRpdGluZ0xheWVyXSxcbiAgICBjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uY2xpY2ssXG4gICAgc3R5bGU6IGZ1bmN0aW9uKGZlYXR1cmUsIHJlc29sdXRpb24pIHtcbiAgICAgIHJldHVybiBzdHlsZXNbZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKV07XG4gICAgfVxuICB9KTtcbiAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbik7XG4gIFxuICB0aGlzLl9kZWxldGVJbnRlcmFjdGlvbiA9IG5ldyBEZWxldGVJbnRlcmFjdGlvbih7XG4gICAgZmVhdHVyZXM6IHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLmdldEZlYXR1cmVzKClcbiAgfSk7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fZGVsZXRlSW50ZXJhY3Rpb24pO1xuICBcbiAgdmFyIG9yaWdHZW9tZXRyeSA9IG51bGw7XG4gIFxuICAvKnRoaXMuX3NlbGVjdEludGVyYWN0aW9uLm9uKCdzZWxlY3QnLGZ1bmN0aW9uKGUpe1xuICAgIHZhciBmZWF0dXJlID0gZS5zZWxlY3RlZFswXTtcbiAgICBvcmlnR2VvbWV0cnkgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCk7XG4gIH0pOyovXG4gIFxuICB0aGlzLl9kZWxldGVJbnRlcmFjdGlvbi5vbignZGVsZXRlZW5kJyxmdW5jdGlvbihlKXtcbiAgICB2YXIgZmVhdHVyZSA9IGUuZmVhdHVyZXMuZ2V0QXJyYXkoKVswXTtcbiAgICB2YXIgaXNOZXcgPSBzZWxmLl9pc05ldyhmZWF0dXJlKTtcbiAgICAvL3RyeSB7XG4gICAgICBpZiAoIXNlbGYuX2J1c3kpe1xuICAgICAgICBzZWxmLl9idXN5ID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5wYXVzZSh0cnVlKTtcbiAgICAgICAgc2VsZi5kZWxldGVGZWF0dXJlKGZlYXR1cmUsaXNOZXcpXG4gICAgICAgIC5hbHdheXMoZnVuY3Rpb24oKXtcbiAgICAgICAgICBzZWxmLl9idXN5ID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5wYXVzZShmYWxzZSk7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgLy99XG4gICAgLypjYXRjaCAoZXJyb3Ipe1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShvcmlnR2VvbWV0cnkpO1xuICAgIH0qL1xuICB9KTtcblxufTtcblxucHJvdG8ucGF1c2UgPSBmdW5jdGlvbihwYXVzZSl7XG4gIGlmIChfLmlzVW5kZWZpbmVkKHBhdXNlKSB8fCBwYXVzZSl7XG4gICAgdGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgICB0aGlzLl9kZWxldGVJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICB0aGlzLl9kZWxldGVJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gIH1cbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbi5nZXRGZWF0dXJlcygpLmNsZWFyKCk7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24pO1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fZGVsZXRlSW50ZXJhY3Rpb24pO1xuICB0aGlzLl9kZWxldGVJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8uX2RlbGV0ZUZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLGlzTmV3KXtcbiAgdGhpcy5lZGl0b3IuZGVsZXRlRmVhdHVyZShmZWF0dXJlLGlzTmV3KTtcbiAgdGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24uZ2V0RmVhdHVyZXMoKS5jbGVhcigpO1xuICB0aGlzLl9idXN5ID0gZmFsc2U7XG4gIHRoaXMucGF1c2UoZmFsc2UpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnByb3RvLl9mYWxsQmFjayA9IGZ1bmN0aW9uKGZlYXR1cmUpe1xuICB0aGlzLl9idXN5ID0gZmFsc2U7XG4gIHRoaXMucGF1c2UoZmFsc2UpO1xufTtcblxucHJvdG8uX2lzTmV3ID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIHJldHVybiAoIV8uaXNOaWwodGhpcy5lZGl0aW5nTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZUJ5SWQoZmVhdHVyZS5nZXRJZCgpKSkpO1xufTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG5cbi8vIENMQVNTRSBQQURSRSBESSBUVVRUSSBHTEkgRURJVElORyBUT09MXG5mdW5jdGlvbiBFZGl0aW5nVG9vbChlZGl0b3IsIG9wdGlvbnMpIHtcblxuICB0aGlzLl9pbnRlcmFjdGlvbnMgPSBbXTtcbiAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gIHRoaXMubGF5ZXIgPSB0aGlzLmVkaXRvci5nZXRWZWN0b3JMYXllcigpLmdldE1hcExheWVyKCk7XG4gIHRoaXMuZWRpdGluZ0xheWVyID0gdGhpcy5lZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkuZ2V0TWFwTGF5ZXIoKTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5zdGVwcyA9IG51bGw7XG4gIFxuICBiYXNlKHRoaXMpO1xufVxuXG5pbmhlcml0KEVkaXRpbmdUb29sLCBHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBFZGl0aW5nVG9vbC5wcm90b3R5cGU7XG5cbnByb3RvLmFkZEludGVyYWN0aW9uID0gZnVuY3Rpb24oaW50ZXJhY3Rpb24pIHtcbiAgdmFyIG1hcFNlcnZpY2UgPSB0aGlzLmVkaXRvci5nZXRNYXBTZXJ2aWNlKCk7XG4gIG1hcFNlcnZpY2UuYWRkSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pO1xuICB0aGlzLl9pbnRlcmFjdGlvbnMucHVzaChpbnRlcmFjdGlvbik7XG59O1xuXG5wcm90by5yZW1vdmVJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKGludGVyYWN0aW9uKSB7XG4gIHZhciBfaW50ZXJhY3Rpb25zID0gdGhpcy5faW50ZXJhY3Rpb25zO1xuICB2YXIgbWFwU2VydmljZSA9IHRoaXMuZWRpdG9yLmdldE1hcFNlcnZpY2UoKTtcbiAgXy5mb3JFYWNoKF9pbnRlcmFjdGlvbnMsZnVuY3Rpb24oX2ludGVyYWN0aW9uLGlkeCkge1xuICAgIGlmIChfaW50ZXJhY3Rpb24gPT0gaW50ZXJhY3Rpb24pIHtcbiAgICAgIF9pbnRlcmFjdGlvbnMuc3BsaWNlKGlkeCwxKTtcbiAgICB9XG4gIH0pO1xuICBtYXBTZXJ2aWNlLnJlbW92ZUludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbn07XG5cbnByb3RvLm93bnNJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKGludGVyYWN0aW9uKSB7XG4gIHZhciBvd25zID0gZmFsc2U7XG4gIF8uZm9yRWFjaCh0aGlzLl9pbnRlcmFjdGlvbnMsIGZ1bmN0aW9uKF9pbnRlcmFjdGlvbikge1xuICAgIGlmIChfaW50ZXJhY3Rpb24gPT0gaW50ZXJhY3Rpb24pIHtcbiAgICAgIG93bnMgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvd25zO1xufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIGlmICh0aGlzLnN0ZXBzKSB7XG4gICAgdGhpcy5zdGVwcy5kZXN0cm95KCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBtZXRvZG8gY2hlIGRldmUgZXNzZXJlIHNvdnJhc2NyaXR0byBkYWxsZVxuLy8gc290dG9jbGFzc2lcbnByb3RvLnJ1biA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnU2UgYXBwYXJlIHF1YXN0byBtZXNzYWdnaW8gc2lnbmlmaWNhIGNoZSBub24gw6ggc3RhdG8gc292cmFzY3JpdHRvIGlsIG1ldG9kbyBydW4oKSBkYWxsYSBzb3R0b2NsYXNzZScpO1xufTtcblxuRWRpdGluZ1Rvb2wuU3RlcHMgPSBmdW5jdGlvbihzdGVwcykge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgLy9BUlJBWVxuICB2YXIgc3RlcHMgPSBzdGVwcztcbiAgXG4gIHRoaXMubmV4dCA9IGZ1bmN0aW9uKCl7XG4gICAgaW5kZXggKz0gMTtcbiAgICB2YXIgc3RlcCA9IHN0ZXBzW2luZGV4XTtcbiAgICB0aGlzLmVtaXQoJ3N0ZXAnLCBpbmRleCwgc3RlcCk7XG4gIH07XG4gIFxuICB0aGlzLmN1cnJlbnRTdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXBzW2luZGV4XTtcbiAgfTtcbiAgXG4gIHRoaXMuY3VycmVudFN0ZXBJbmRleCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9O1xuICBcbiAgdGhpcy50b3RhbFN0ZXBzID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gc3RlcHMubGVuZ3RoO1xuICB9O1xuICBcbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gICAgaW5kZXggPSAwO1xuICB9O1xuICBcbiAgdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9O1xuICBcbiAgdGhpcy5jb21wbGV0ZWQgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuZW1pdCgnY29tcGxldGUnKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH07XG4gIFxuICB0aGlzLmluc2VydFN0ZXBBdCA9IGZ1bmN0aW9uKGlkeCxzdGVwKXtcbiAgICBzdGVwcy5zcGxpY2UoaWR4LDAsc3RlcCk7XG4gIH1cbn07XG5cbmluaGVyaXQoRWRpdGluZ1Rvb2wuU3RlcHMsRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0aW5nVG9vbDtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG5cbnZhciBFZGl0aW5nVG9vbCA9IHJlcXVpcmUoJy4vZWRpdGluZ3Rvb2wnKTtcblxuZnVuY3Rpb24gTW9kaWZ5RmVhdHVyZVRvb2woZWRpdG9yLG9wdGlvbnMpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuICB0aGlzLmlzUGF1c2FibGUgPSB0cnVlO1xuICB0aGlzLmRyYXdJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMubGF5ZXIgPSBudWxsO1xuICB0aGlzLmVkaXRpbmdMYXllciA9IG51bGw7XG4gIHRoaXMuX2RlbGV0ZUNvbmRpdGlvbiA9IG9wdGlvbnMuZGVsZXRlQ29uZGl0aW9uIHx8IHVuZGVmaW5lZDtcbiAgdGhpcy5fc25hcCA9IG9wdGlvbnMuc25hcCB8fCBudWxsO1xuICB0aGlzLl9zbmFwSW50ZXJhY3Rpb24gPSBudWxsOyBcblxuICB0aGlzLnNldHRlcnMgPSB7XG4gICAgbW9kaWZ5RmVhdHVyZTogTW9kaWZ5RmVhdHVyZVRvb2wucHJvdG90eXBlLl9tb2RpZnlGZWF0dXJlXG4gIH07XG4gIFxuICBiYXNlKHRoaXMsZWRpdG9yKTtcbn1cbmluaGVyaXQoTW9kaWZ5RmVhdHVyZVRvb2wsRWRpdGluZ1Rvb2wpO1xubW9kdWxlLmV4cG9ydHMgPSBNb2RpZnlGZWF0dXJlVG9vbDtcblxudmFyIHByb3RvID0gTW9kaWZ5RmVhdHVyZVRvb2wucHJvdG90eXBlO1xuXG5wcm90by5ydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMubGF5ZXIgPSB0aGlzLmVkaXRvci5nZXRWZWN0b3JMYXllcigpLmdldE1hcExheWVyKCk7XG4gIHRoaXMuZWRpdGluZ0xheWVyID0gdGhpcy5lZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkuZ2V0TWFwTGF5ZXIoKTtcbiAgXG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNlbGVjdCh7XG4gICAgbGF5ZXJzOiBbdGhpcy5sYXllcix0aGlzLmVkaXRpbmdMYXllcl0sXG4gIH0pO1xuICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMuX3NlbGVjdEludGVyYWN0aW9uKTtcbiAgXG4gIHRoaXMuX21vZGlmeUludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLk1vZGlmeSh7XG4gICAgZmVhdHVyZXM6IHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLmdldEZlYXR1cmVzKCksXG4gICAgZGVsZXRlQ29uZGl0aW9uOiB0aGlzLl9kZWxldGVDb25kaXRpb24sXG4gIH0pO1xuICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMuX21vZGlmeUludGVyYWN0aW9uKTtcbiAgXG4gIHZhciBvcmlnR2VvbWV0cnkgPSBudWxsO1xuICBcbiAgdGhpcy5fbW9kaWZ5SW50ZXJhY3Rpb24ub24oJ21vZGlmeXN0YXJ0JyxmdW5jdGlvbihlKXtcbiAgICB2YXIgZmVhdHVyZSA9IGUuZmVhdHVyZXMuZ2V0QXJyYXkoKVswXTtcbiAgICBvcmlnR2VvbWV0cnkgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuY2xvbmUoKTtcbiAgfSk7XG4gIFxuICB0aGlzLl9tb2RpZnlJbnRlcmFjdGlvbi5vbignbW9kaWZ5ZW5kJyxmdW5jdGlvbihlKXtcbiAgICB2YXIgZmVhdHVyZSA9IGUuZmVhdHVyZXMuZ2V0QXJyYXkoKVswXTtcbiAgICB2YXIgaXNOZXcgPSBzZWxmLl9pc05ldyhmZWF0dXJlKTtcbiAgICAvL3RyeSB7XG4gICAgICBpZiAoIXNlbGYuX2J1c3kpe1xuICAgICAgICBzZWxmLl9idXN5ID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5wYXVzZSh0cnVlKTtcbiAgICAgICAgc2VsZi5tb2RpZnlGZWF0dXJlKGZlYXR1cmUsaXNOZXcpXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShvcmlnR2VvbWV0cnkpO1xuICAgICAgICB9KVxuICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgc2VsZi5fYnVzeSA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYucGF1c2UoZmFsc2UpO1xuICAgICAgICB9KVxuICAgICAgfVxuICB9KTtcbiAgXG4gIGlmICh0aGlzLl9zbmFwKXtcbiAgICB0aGlzLl9zbmFwSW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uU25hcCh7XG4gICAgICBzb3VyY2U6IHRoaXMuX3NuYXAudmVjdG9yTGF5ZXIuZ2V0U291cmNlKClcbiAgICB9KTtcbiAgICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMuX3NuYXBJbnRlcmFjdGlvbik7XG4gIH1cbn07XG5cbnByb3RvLnBhdXNlID0gZnVuY3Rpb24ocGF1c2Upe1xuICBpZiAoXy5pc1VuZGVmaW5lZChwYXVzZSkgfHwgcGF1c2Upe1xuICAgIGlmICh0aGlzLl9zbmFwSW50ZXJhY3Rpb24pe1xuICAgICAgdGhpcy5fc25hcEludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgfVxuICAgIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5fbW9kaWZ5SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAodGhpcy5fc25hcEludGVyYWN0aW9uKXtcbiAgICAgIHRoaXMuX3NuYXBJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICB0aGlzLl9tb2RpZnlJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gIH1cbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbi5nZXRGZWF0dXJlcygpLmNsZWFyKCk7XG4gIGlmICh0aGlzLl9zbmFwSW50ZXJhY3Rpb24pe1xuICAgICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuX3NuYXBJbnRlcmFjdGlvbik7XG4gICAgIHRoaXMuX3NuYXBJbnRlcmFjdGlvbiA9IG51bGw7XG4gIH1cbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbik7XG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uID0gbnVsbDtcbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLl9tb2RpZnlJbnRlcmFjdGlvbik7XG4gIHRoaXMuX21vZGlmeUludGVyYWN0aW9uID0gbnVsbDtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5wcm90by5fbW9kaWZ5RmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUsaXNOZXcpe1xuICAvLyBhZ2dpb25ybyBsYSBnZW9tZXRyaWEgbmVsIGJ1ZmZlciBkaSBlZGl0aW5nXG4gIHRoaXMuZWRpdG9yLnVwZGF0ZUZlYXR1cmUoZmVhdHVyZSxpc05ldyk7XG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLmdldEZlYXR1cmVzKCkuY2xlYXIoKTtcbiAgdGhpcy5fYnVzeSA9IGZhbHNlO1xuICB0aGlzLnBhdXNlKGZhbHNlKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5wcm90by5yZW1vdmVQb2ludCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGUpe1xuICBpZiAodGhpcy5fbW9kaWZ5SW50ZXJhY3Rpb24pe1xuICAgIC8vIHByb3ZvIGEgcmltdW92ZXJlIGwndWx0aW1vIHB1bnRvLiBOZWwgY2FzbyBub24gZXNpc3RhIGxhIGdlb21ldHJpYSBnZXN0aXNjbyBzaWxlbnppb3NhbWVudGUgbCdlcnJvcmVcbiAgICB0cnl7XG4gICAgICB0aGlzLl9tb2RpZnlJbnRlcmFjdGlvbi5yZW1vdmVQb2ludCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cbn07XG5cbnByb3RvLl9mYWxsQmFjayA9IGZ1bmN0aW9uKGZlYXR1cmUpe1xuICB0aGlzLl9idXN5ID0gZmFsc2U7XG4gIHRoaXMucGF1c2UoZmFsc2UpO1xufTtcblxucHJvdG8uX2lzTmV3ID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIHJldHVybiAoIV8uaXNOaWwodGhpcy5lZGl0aW5nTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZUJ5SWQoZmVhdHVyZS5nZXRJZCgpKSkpO1xufTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xuXG52YXIgRWRpdGluZ1Rvb2wgPSByZXF1aXJlKCcuL2VkaXRpbmd0b29sJyk7XG5cbmZ1bmN0aW9uIE1vdmVGZWF0dXJlVG9vbChlZGl0b3Ipe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuICB0aGlzLmlzUGF1c2FibGUgPSB0cnVlO1xuICB0aGlzLmRyYXdJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMubGF5ZXIgPSBudWxsO1xuICB0aGlzLmVkaXRpbmdMYXllciA9IG51bGw7XG4gIFxuICB0aGlzLl9vcmlnR2VvbWV0cnkgPSBudWxsO1xuXG4gIHRoaXMuc2V0dGVycyA9IHtcbiAgICBtb3ZlRmVhdHVyZToge1xuICAgICAgZm5jOiBNb3ZlRmVhdHVyZVRvb2wucHJvdG90eXBlLl9tb3ZlRmVhdHVyZSxcbiAgICAgIGZhbGxiYWNrOiBNb3ZlRmVhdHVyZVRvb2wucHJvdG90eXBlLl9mYWxsQmFja1xuICAgIH1cbiAgfTtcbiAgXG4gIGJhc2UodGhpcyxlZGl0b3IpO1xufVxuaW5oZXJpdChNb3ZlRmVhdHVyZVRvb2wsRWRpdGluZ1Rvb2wpO1xubW9kdWxlLmV4cG9ydHMgPSBNb3ZlRmVhdHVyZVRvb2w7XG5cbnZhciBwcm90byA9IE1vdmVGZWF0dXJlVG9vbC5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5sYXllciA9IHRoaXMuZWRpdG9yLmdldFZlY3RvckxheWVyKCkuZ2V0TWFwTGF5ZXIoKTtcbiAgdGhpcy5lZGl0aW5nTGF5ZXIgPSB0aGlzLmVkaXRvci5nZXRFZGl0VmVjdG9yTGF5ZXIoKS5nZXRNYXBMYXllcigpO1xuICBcbiAgdGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uU2VsZWN0KHtcbiAgICBsYXllcnM6IFt0aGlzLmxheWVyLHRoaXMuZWRpdGluZ0xheWVyXSxcbiAgICBjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uY2xpY2tcbiAgfSk7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24pO1xuICBcbiAgdGhpcy5fdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBuZXcgb2wuaW50ZXJhY3Rpb24uVHJhbnNsYXRlKHtcbiAgICBmZWF0dXJlczogdGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24uZ2V0RmVhdHVyZXMoKVxuICB9KTtcbiAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbik7XG4gIFxuICB0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbi5vbigndHJhbnNsYXRlc3RhcnQnLGZ1bmN0aW9uKGUpe1xuICAgIHZhciBmZWF0dXJlID0gZS5mZWF0dXJlcy5nZXRBcnJheSgpWzBdO1xuICAgIHNlbGYuX29yaWdHZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpO1xuICAgIHNlbGYuZWRpdG9yLmVtaXQoJ21vdmVzdGFydCcsZmVhdHVyZSk7XG4gIH0pO1xuICBcbiAgdGhpcy5fdHJhbnNsYXRlSW50ZXJhY3Rpb24ub24oJ3RyYW5zbGF0ZWVuZCcsZnVuY3Rpb24oZSl7XG4gICAgdmFyIGZlYXR1cmUgPSBlLmZlYXR1cmVzLmdldEFycmF5KClbMF07XG4gICAgLy90cnkge1xuICAgICAgaWYgKCFzZWxmLl9idXN5KXtcbiAgICAgICAgc2VsZi5fYnVzeSA9IHRydWU7XG4gICAgICAgIHNlbGYucGF1c2UoKTtcbiAgICAgICAgc2VsZi5tb3ZlRmVhdHVyZShmZWF0dXJlKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpe1xuICAgICAgICAgIHNlbGYucGF1c2UoZmFsc2UpO1xuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbigpe1xuICAgICAgICAgIGZlYXR1cmUuc2V0R2VvbWV0cnkoc2VsZi5fb3JpZ0dlb21ldHJ5KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgLy99XG4gICAgLypjYXRjaCAoZXJyb3Ipe1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShzZWxmLl9vcmlnR2VvbWV0cnkpO1xuICAgIH0qL1xuICB9KTtcblxufTtcblxucHJvdG8ucGF1c2UgPSBmdW5jdGlvbihwYXVzZSl7XG4gIGlmIChfLmlzVW5kZWZpbmVkKHBhdXNlKSB8fCBwYXVzZSl7XG4gICAgdGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24uc2V0QWN0aXZlKGZhbHNlKTtcbiAgICB0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICB0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gIH1cbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbi5nZXRGZWF0dXJlcygpLmNsZWFyKCk7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fc2VsZWN0SW50ZXJhY3Rpb24pO1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fdHJhbnNsYXRlSW50ZXJhY3Rpb24pO1xuICB0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8uX21vdmVGZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIHRoaXMuZWRpdG9yLmVtaXQoJ21vdmVlbmQnLGZlYXR1cmUpO1xuICB0aGlzLmVkaXRvci51cGRhdGVGZWF0dXJlKGZlYXR1cmUpO1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbi5nZXRGZWF0dXJlcygpLmNsZWFyKCk7XG4gIHRoaXMuX2J1c3kgPSBmYWxzZTtcbiAgdGhpcy5wYXVzZShmYWxzZSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8uX2ZhbGxCYWNrID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIHRoaXMuX2J1c3kgPSBmYWxzZTtcbiAgdGhpcy5wYXVzZShmYWxzZSk7XG59O1xuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgbm9vcCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5ub29wO1xudmFyIFBpY2tGZWF0dXJlSW50ZXJhY3Rpb24gPSByZXF1aXJlKCdnM3ctb2wzL3NyYy9pbnRlcmFjdGlvbnMvcGlja2ZlYXR1cmVpbnRlcmFjdGlvbicpO1xuXG52YXIgRWRpdGluZ1Rvb2wgPSByZXF1aXJlKCcuL2VkaXRpbmd0b29sJyk7XG5cbmZ1bmN0aW9uIFBpY2tGZWF0dXJlVG9vbChlZGl0b3Ipe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuaXNQYXVzYWJsZSA9IHRydWU7XG4gIHRoaXMucGlja0ZlYXR1cmVJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgdGhpcy5fYnVzeSA9IGZhbHNlO1xuICBcbiAgLy8gcXVpIHNpIGRlZmluaXNjb25vIGkgbWV0b2RpIGNoZSB2b2dsaWFtbyBwb3RlciBpbnRlcmNldHRhcmUsIGVkIGV2ZW50dWFsbWVudGUgYmxvY2NhcmUgKHZlZGkgQVBJIEczV09iamVjdClcbiAgdGhpcy5zZXR0ZXJzID0ge1xuICAgIHBpY2tGZWF0dXJlOiB7XG4gICAgICBmbmM6IG5vb3AsXG4gICAgICBmYWxsYmFjazogUGlja0ZlYXR1cmVUb29sLnByb3RvdHlwZS5fZmFsbEJhY2tcbiAgICB9LFxuICB9O1xuICBcbiAgYmFzZSh0aGlzLCBlZGl0b3IpO1xufVxuaW5oZXJpdChQaWNrRmVhdHVyZVRvb2wsIEVkaXRpbmdUb29sKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrRmVhdHVyZVRvb2w7XG5cbnZhciBwcm90byA9IFBpY2tGZWF0dXJlVG9vbC5wcm90b3R5cGU7XG5cbi8vIG1ldG9kbyBlc2VndWl0byBhbGwnYXZ2aW8gZGVsIHRvb2xcbnByb3RvLnJ1biA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBsYXllcnMgPSBbdGhpcy5lZGl0b3IuZ2V0VmVjdG9yTGF5ZXIoKS5nZXRNYXBMYXllcigpLHRoaXMuZWRpdG9yLmdldEVkaXRWZWN0b3JMYXllcigpLmdldE1hcExheWVyKCldO1xuICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24gPSBuZXcgUGlja0ZlYXR1cmVJbnRlcmFjdGlvbih7XG4gICAgbGF5ZXJzOiBsYXllcnNcbiAgfSk7XG4gIFxuICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24ub24oJ3BpY2tlZCcsZnVuY3Rpb24oZSl7XG4gICAgaWYgKCFzZWxmLl9idXN5KXtcbiAgICAgIHNlbGYuX2J1c3kgPSB0cnVlO1xuICAgICAgc2VsZi5wYXVzZSh0cnVlKTtcbiAgICAgIHNlbGYucGlja0ZlYXR1cmUoZS5mZWF0dXJlKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgc2VsZi5fYnVzeSA9IGZhbHNlO1xuICAgICAgICBzZWxmLnBhdXNlKGZhbHNlKTtcbiAgICAgIH0pXG4gICAgfVxuICB9KTtcbiAgXG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5waWNrRmVhdHVyZUludGVyYWN0aW9uKTtcbn07XG5cbnByb3RvLnBhdXNlID0gZnVuY3Rpb24ocGF1c2Upe1xuICBpZiAoXy5pc1VuZGVmaW5lZChwYXVzZSkgfHwgcGF1c2Upe1xuICAgIHRoaXMucGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMucGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gIH1cbn07XG5cbi8vIG1ldG9kbyBlc2VndWl0byBhbGxhIGRpc2F0dGl2YXppb25lIGRlbCB0b29sXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24pO1xuICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24gPSBudWxsO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnByb3RvLl9mYWxsQmFjayA9IGZ1bmN0aW9uKGZlYXR1cmUpe1xuICB0aGlzLl9idXN5ID0gZmFsc2U7XG4gIHRoaXMucGF1c2UoZmFsc2UpO1xufTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgbm9vcCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5ub29wO1xuXG4vKipcbiAqIFVuIG9nZ2V0dG8gYmFzZSBpbiBncmFkbyBkaSBnZXN0aXJlIGV2ZW50dWFsaSBzZXR0ZXIgZSByZWxhdGl2YSBjYXRlbmEgZGkgbGlzdGVuZXJzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBHM1dPYmplY3QgPSBmdW5jdGlvbigpe1xuICBpZiAodGhpcy5zZXR0ZXJzKXtcbiAgICB0aGlzLl9zZXR1cExpc3RlbmVyc0NoYWluKHRoaXMuc2V0dGVycyk7XG4gIH1cbn07XG5pbmhlcml0KEczV09iamVjdCxFdmVudEVtaXR0ZXIpO1xuXG52YXIgcHJvdG8gPSBHM1dPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIEluc2VyaXNjZSB1biBsaXN0ZW5lciBkb3BvIGNoZSDDqCBzdGF0byBlc2VndWl0byBpbCBzZXR0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXR0ZXIgLSBJbCBub21lIGRlbCBtZXRvZG8gc3UgY3VpIHNpIGN1b2xlIHJlZ2lzdHJhcmUgdW5hIGZ1bnppb25lIGxpc3RlbmVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIFVuYSBmdW56aW9uZSBsaXN0ZW5lciAoc29sbyBzaW5jcm9uYSlcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eSAtIFByaW9yaXTDoCBkaSBlc2VjdXppb25lOiB2YWxvcmUgbWlub3JlIHZpZW5lIGVzZXVpdG8gcHJpbWFcbiAqL1xucHJvdG8ub25hZnRlciA9IGZ1bmN0aW9uKHNldHRlcixsaXN0ZW5lcixwcmlvcml0eSl7XG4gIHJldHVybiB0aGlzLl9vbnNldHRlcignYWZ0ZXInLHNldHRlcixsaXN0ZW5lcixmYWxzZSxwcmlvcml0eSk7XG59O1xuXG4vLyB1biBsaXN0ZW5lciBwdcOyIHJlZ2lzdHJhcnNpIGluIG1vZG8gZGEgZXNzZXJlIGVzZWd1aXRvIFBSSU1BIGRlbGwnZXNlY3V6aW9uZSBkZWwgbWV0b2RvIHNldHRlci4gUHXDsiByaXRvcm5hcmUgdHJ1ZS9mYWxzZSBwZXJcbi8vIHZvdGFyZSBhIGZhdm9yZSBvIG1lbm8gZGVsbCdlc2VjdXppb25lIGRlbCBzZXR0ZXIuIFNlIG5vbiByaXRvcm5hIG51bGxhIG8gdW5kZWZpbmVkLCBub24gdmllbmUgY29uc2lkZXJhdG8gdm90YW50ZVxuLyoqXG4gKiBJbnNlcmlzY2UgdW4gbGlzdGVuZXIgcHJpbWEgY2hlIHZlbmdhIGVzZWd1aXRvIGlsIHNldHRlci4gU2Ugcml0b3JuYSBmYWxzZSBpbCBzZXR0ZXIgbm9uIHZpZW5lIGVzZWd1aXRvXG4gKiBAcGFyYW0ge3N0cmluZ30gc2V0dGVyIC0gSWwgbm9tZSBkZWwgbWV0b2RvIHN1IGN1aSBzaSBjdW9sZSByZWdpc3RyYXJlIHVuYSBmdW56aW9uZSBsaXN0ZW5lclxuICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgLSBVbmEgZnVuemlvbmUgbGlzdGVuZXIsIGEgY3VpIHZpZW5lIHBhc3NhdG8gdW5hIGZ1bnppb25lIFwibmV4dFwiIGNvbWUgdWx0aW1vIHBhcmFtZXRybywgZGEgdXNhcmUgbmVsIGNhc28gZGkgbGlzdGVuZXIgYXNpbmNyb25pXG4gKiBAcGFyYW0ge251bWJlcn0gcHJpb3JpdHkgLSBQcmlvcml0w6AgZGkgZXNlY3V6aW9uZTogdmFsb3JlIG1pbm9yZSB2aWVuZSBlc2V1aXRvIHByaW1hXG4gKi9cbnByb3RvLm9uYmVmb3JlID0gZnVuY3Rpb24oc2V0dGVyLGxpc3RlbmVyLHByaW9yaXR5KXtcbiAgcmV0dXJuIHRoaXMuX29uc2V0dGVyKCdiZWZvcmUnLHNldHRlcixsaXN0ZW5lcixmYWxzZSxwcmlvcml0eSk7XG59O1xuXG4vKipcbiAqIEluc2VyaXNjZSB1biBsaXN0ZW5lciBwcmltYSBjaGUgdmVuZ2EgZXNlZ3VpdG8gaWwgc2V0dGVyLiBBbCBsaXN0ZW5lciB2aWVuZSBwYXNzYXRvIHVuYSBmdW56aW9uZSBcIm5leHRcIiBjb21lIHVsdGltbyBwYXJhbWV0cm8sIGRhIGNoaWFtYXJlIGNvbiBwYXJhbWV0cm8gdHJ1ZS9mYWxzZSBwZXIgZmFyIHByb3NlZ3VpcmUgbyBtZW5vIGlsIHNldHRlclxuICogQHBhcmFtIHtzdHJpbmd9IHNldHRlciAtIElsIG5vbWUgZGVsIG1ldG9kbyBzdSBjdWkgc2kgY3VvbGUgcmVnaXN0cmFyZSB1bmEgZnVuemlvbmUgbGlzdGVuZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVW5hIGZ1bnppb25lIGxpc3RlbmVyLCBhIGN1aVxuICogQHBhcmFtIHtudW1iZXJ9IHByaW9yaXR5IC0gUHJpb3JpdMOgIGRpIGVzZWN1emlvbmU6IHZhbG9yZSBtaW5vcmUgdmllbmUgZXNldWl0byBwcmltYVxuICovXG5wcm90by5vbmJlZm9yZWFzeW5jID0gZnVuY3Rpb24oc2V0dGVyLGxpc3RlbmVyLHByaW9yaXR5KXtcbiAgcmV0dXJuIHRoaXMuX29uc2V0dGVyKCdiZWZvcmUnLHNldHRlcixsaXN0ZW5lcix0cnVlLHByaW9yaXR5KTtcbn07XG5cbnByb3RvLnVuID0gZnVuY3Rpb24oc2V0dGVyLGtleSl7XG4gIF8uZm9yRWFjaCh0aGlzLnNldHRlcnNMaXN0ZW5lcnMsZnVuY3Rpb24oc2V0dGVyc0xpc3RlbmVycyl7XG4gICAgXy5mb3JFYWNoKHNldHRlcnNMaXN0ZW5lcnNbc2V0dGVyXSxmdW5jdGlvbihzZXR0ZXJMaXN0ZW5lcixpZHgpe1xuICAgICAgaWYoc2V0dGVyTGlzdGVuZXIua2V5ID09IGtleSl7XG4gICAgICAgIHNldHRlcnNMaXN0ZW5lcnNbc2V0dGVyXS5zbGljZShpZHgsMSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn07XG5cbnByb3RvLl9vbnNldHRlciA9IGZ1bmN0aW9uKHdoZW4sc2V0dGVyLGxpc3RlbmVyLGFzeW5jLHByaW9yaXR5KXsgLyp3aGVuPWJlZm9yZXxhZnRlciwgdHlwZT1zeW5jfGFzeW5jKi9cbiAgdmFyIHNldHRlcnNMaXN0ZW5lcnMgPSB0aGlzLnNldHRlcnNMaXN0ZW5lcnNbd2hlbl07XG4gIHZhciBsaXN0ZW5lcktleSA9IFwiXCIrTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMDAwMDApK1wiXCIrRGF0ZS5ub3coKTtcbiAgLyppZiAoKHdoZW4gPT0gJ2JlZm9yZScpICYmICFhc3luYyl7XG4gICAgbGlzdGVuZXIgPSB0aGlzLl9tYWtlQ2hhaW5hYmxlKGxpc3RlbmVyKTtcbiAgfSovXG5cbiAgcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXG4gIHZhciBzZXR0ZXJzTGlzdGVuZXJlcyA9IHNldHRlcnNMaXN0ZW5lcnNbc2V0dGVyXTtcblxuICBzZXR0ZXJzTGlzdGVuZXJlcy5wdXNoKHtcbiAgICBrZXk6IGxpc3RlbmVyS2V5LFxuICAgIGZuYzogbGlzdGVuZXIsXG4gICAgYXN5bmM6IGFzeW5jLFxuICAgIHByaW9yaXR5OiBwcmlvcml0eVxuICB9KTtcblxuICBzZXR0ZXJzTGlzdGVuZXJzW3NldHRlcl0gPSBfLnNvcnRCeShzZXR0ZXJzTGlzdGVuZXJlcyxmdW5jdGlvbihzZXR0ZXJMaXN0ZW5lcil7XG4gICAgcmV0dXJuIHNldHRlckxpc3RlbmVyLnByaW9yaXR5O1xuICB9KTtcblxuICByZXR1cm4gbGlzdGVuZXJLZXk7XG4gIC8vcmV0dXJuIHRoaXMuZ2VuZXJhdGVVbkxpc3RlbmVyKHNldHRlcixsaXN0ZW5lcktleSk7XG59O1xuXG4vLyB0cmFzZm9ybW8gdW4gbGlzdGVuZXIgc2luY3Jvbm8gaW4gbW9kbyBkYSBwb3RlciBlc3NlcmUgdXNhdG8gbmVsbGEgY2F0ZW5hIGRpIGxpc3RlbmVycyAocmljaGlhbWFuZG8gbmV4dCBjb2wgdmFsb3JlIGRpIHJpdG9ybm8gZGVsIGxpc3RlbmVyKVxuLypwcm90by5fbWFrZUNoYWluYWJsZSA9IGZ1bmN0aW9uKGxpc3RlbmVyKXtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAvLyByaW11b3ZvIG5leHQgZGFpIHBhcmFtZXRyaSBwcmltYSBkaSBjaGlhbWFyZSBpbCBsaXN0ZW5lclxuICAgIHZhciBuZXh0ID0gYXJncy5wb3AoKTtcbiAgICB2YXIgY2FuU2V0ID0gbGlzdGVuZXIuYXBwbHkoc2VsZixhcmd1bWVudHMpO1xuICAgIHZhciBfY2FuU2V0ID0gdHJ1ZTtcbiAgICBpZiAoXy5pc0Jvb2xlYW4oY2FuU2V0KSl7XG4gICAgICBfY2FuU2V0ID0gY2FuU2V0O1xuICAgIH1cbiAgICBuZXh0KGNhblNldCk7XG4gIH1cbn07Ki9cblxucHJvdG8uX3NldHVwTGlzdGVuZXJzQ2hhaW4gPSBmdW5jdGlvbihzZXR0ZXJzKXtcbiAgLy8gaW5pemlhbGl6emEgdHV0dGkgaSBtZXRvZGkgZGVmaW5pdGkgbmVsbCdvZ2dldHRvIFwic2V0dGVyc1wiIGRlbGxhIGNsYXNzZSBmaWdsaWEuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXR0ZXJzTGlzdGVuZXJzID0ge1xuICAgIGFmdGVyOnt9LFxuICAgIGJlZm9yZTp7fVxuICB9O1xuICAvLyBwZXIgb2duaSBzZXR0ZXIgdmllbmUgZGVmaW5pdG8gbCdhcnJheSBkZWkgbGlzdGVuZXJzIGUgZmllbmUgc29zdGl0dWl0byBpbCBtZXRvZG8gb3JpZ2luYWxlIGNvbiBsYSBmdW56aW9uaSBjaGUgZ2VzdGlzY2UgbGEgY29kYSBkaSBsaXN0ZW5lcnNcbiAgXy5mb3JFYWNoKHNldHRlcnMsZnVuY3Rpb24oc2V0dGVyT3B0aW9uLHNldHRlcil7XG4gICAgdmFyIHNldHRlckZuYyA9IG5vb3A7XG4gICAgdmFyIHNldHRlckZhbGxiYWNrID0gbm9vcDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHNldHRlck9wdGlvbikpe1xuICAgICAgc2V0dGVyRm5jID0gc2V0dGVyT3B0aW9uXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc2V0dGVyRm5jID0gc2V0dGVyT3B0aW9uLmZuYztcbiAgICAgIHNldHRlckZhbGxiYWNrID0gc2V0dGVyT3B0aW9uLmZhbGxiYWNrIHx8IG5vb3A7XG4gICAgfVxuICAgIHNlbGYuc2V0dGVyc0xpc3RlbmVycy5hZnRlcltzZXR0ZXJdID0gW107XG4gICAgc2VsZi5zZXR0ZXJzTGlzdGVuZXJzLmJlZm9yZVtzZXR0ZXJdID0gW107XG4gICAgLy8gc2V0dGVyIHNvc3RpdHVpdG9cbiAgICBzZWxmW3NldHRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAvLyBlc2VndW8gaSBsaXN0ZW5lciByZWdpc3RyYXRpIHBlciBpbCBiZWZvcmVcbiAgICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgIHZhciByZXR1cm5WYWwgPSBudWxsO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIGNhblNldCA9IHRydWU7XG4gICAgICBcbiAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlKCl7XG4gICAgICAgIC8vIGVzZWd1byBsYSBmdW56aW9uZVxuICAgICAgICByZXR1cm5WYWwgPSBzZXR0ZXJGbmMuYXBwbHkoc2VsZixhcmdzKTtcbiAgICAgICAgLy8gZSByaXNvbHZvIGxhIHByb21lc3NhIChldmVudHVhbG1lbnRlIHV0aWxpenphdGEgZGEgY2hpIGhhIGludm9jYXRvIGlsIHNldHRlclxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJldHVyblZhbCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgYWZ0ZXJMaXN0ZW5lcnMgPSBzZWxmLnNldHRlcnNMaXN0ZW5lcnMuYWZ0ZXJbc2V0dGVyXTtcbiAgICAgICAgXy5mb3JFYWNoKGFmdGVyTGlzdGVuZXJzLGZ1bmN0aW9uKGxpc3RlbmVyKXtcbiAgICAgICAgICBsaXN0ZW5lci5mbmMuYXBwbHkoc2VsZixhcmdzKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZnVuY3Rpb24gYWJvcnQoKXtcbiAgICAgICAgICAvLyBzZSBub24gcG9zc28gcHJvc2VndWlyZSAuLi5cbiAgICAgICAgICAvLyBjaGlhbW8gbCdldmVudHVhbGUgZnVuemlvbmUgZGkgZmFsbGJhY2tcbiAgICAgICAgICBzZXR0ZXJGYWxsYmFjay5hcHBseShzZWxmLGFyZ3MpO1xuICAgICAgICAgIC8vIGUgcmlnZXR0byBsYSBwcm9tZXNzYVxuICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgfVxuICAgICAgXG4gICAgICB2YXIgYmVmb3JlTGlzdGVuZXJzID0gc2VsZi5zZXR0ZXJzTGlzdGVuZXJzWydiZWZvcmUnXVtzZXR0ZXJdO1xuICAgICAgLy8gY29udGF0b3JlIGRlaSBsaXN0ZW5lciBjaGUgdmVycsOgIGRlY3JlbWVudGF0byBhZCBvZ25pIGNoaWFtYXRhIGEgbmV4dCgpXG4gICAgICBjb3VudGVyID0gMDtcbiAgICAgIFxuICAgICAgLy8gZnVuemlvbmUgcGFzc2F0YSBjb21lIHVsdGltbyBwYXJhbWV0cm8gYWkgbGlzdGVuZXJzLCBjaGUgKioqU0UgU09OTyBTVEFUSSBBR0dJVU5USSBDT01FIEFTSU5DUk9OSSBsYSBERVZPTk8qKiogcmljaGlhbWFyZSBwZXIgcG90ZXIgcHJvc2VndWlyZSBsYSBjYXRlbmFcbiAgICAgIGZ1bmN0aW9uIG5leHQoYm9vbCl7XG4gICAgICAgIHZhciBjb250ID0gdHJ1ZTtcbiAgICAgICAgaWYgKF8uaXNCb29sZWFuKGJvb2wpKXtcbiAgICAgICAgICBjb250ID0gYm9vbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2FyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcbiAgICAgICAgLy8gc2UgbGEgY2F0ZW5hIMOoIHN0YXRhIGJsb2NjYXRhIG8gc2Ugc2lhbW8gYXJyaXZhdGkgYWxsYSBmaW5lIGRlaSBiZWZvcmVsaXN0ZW5lcnNcbiAgICAgICAgaWYgKGNvbnQgPT09IGZhbHNlIHx8IChjb3VudGVyID09IGJlZm9yZUxpc3RlbmVycy5sZW5ndGgpKXtcbiAgICAgICAgICBpZihjb250ID09PSBmYWxzZSlcbiAgICAgICAgICAgIGFib3J0LmFwcGx5KHNlbGYsYXJncyk7XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGNvbXBsZXRlZCA9IGNvbXBsZXRlLmFwcGx5KHNlbGYsYXJncyk7XG4gICAgICAgICAgICBpZihfLmlzVW5kZWZpbmVkKGNvbXBsZXRlZCkgfHwgY29tcGxldGVkID09PSB0cnVlKXtcbiAgICAgICAgICAgICAgc2VsZi5lbWl0RXZlbnQoJ3NldDonK3NldHRlcixhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGNvbnQpe1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVyRm5jID0gYmVmb3JlTGlzdGVuZXJzW2NvdW50ZXJdLmZuYztcbiAgICAgICAgICAgIGlmIChiZWZvcmVMaXN0ZW5lcnNbY291bnRlcl0uYXN5bmMpe1xuICAgICAgICAgICAgICAvLyBhZ2dpdW5nbyBuZXh0IGNvbWUgdWxpdG1vIHBhcmFtZXRyb1xuICAgICAgICAgICAgICBfYXJncy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICBjb3VudGVyICs9IDE7XG4gICAgICAgICAgICAgIGxpc3RlbmVyRm5jLmFwcGx5KHNlbGYsX2FyZ3MpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIF9jb250ID0gbGlzdGVuZXJGbmMuYXBwbHkoc2VsZixfYXJncyk7XG4gICAgICAgICAgICAgIGNvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgICAgbmV4dChfY29udCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIG5leHQoKTtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gICAgfVxuICB9KVxufTtcblxucHJvdG8udW4gPSBmdW5jdGlvbihsaXN0ZW5lcktleSkge1xuICBfLmZvckVhY2godGhpcy5zZXR0ZXJzTGlzdGVuZXJzLGZ1bmN0aW9uKHNldHRlckxpc3RlbmVycyl7XG4gICAgICBfLmZvckVhY2goc2V0dGVyTGlzdGVuZXJzLGZ1bmN0aW9uKGxpc3RlbmVyLGlkeCl7XG4gICAgICAgIGlmIChsaXN0ZW5lci5rZXkgPT0gbGlzdGVuZXJLZXkpIHtcbiAgICAgICAgICBzZXR0ZXJMaXN0ZW5lcnMuc3BsaWNlKGlkeCwxKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfSlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRzNXT2JqZWN0O1xuIiwidmFyIGdlb20gPSB7XG4gIGRpc3RhbmNlOiBmdW5jdGlvbihjMSxjMil7XG4gICAgcmV0dXJuIE1hdGguc3FydChnZW9tLnNxdWFyZWREaXN0YW5jZShjMSxjMikpO1xuICB9LFxuICBzcXVhcmVkRGlzdGFuY2U6IGZ1bmN0aW9uKGMxLGMyKXtcbiAgICB2YXIgeDEgPSBjMVswXTtcbiAgICB2YXIgeTEgPSBjMVsxXTtcbiAgICB2YXIgeDIgPSBjMlswXTtcbiAgICB2YXIgeTIgPSBjMlsxXTtcbiAgICB2YXIgZHggPSB4MiAtIHgxO1xuICAgIHZhciBkeSA9IHkyIC0geTE7XG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuICB9LFxuICBjbG9zZXN0T25TZWdtZW50OiBmdW5jdGlvbihjb29yZGluYXRlLCBzZWdtZW50KSB7XG4gICAgdmFyIHgwID0gY29vcmRpbmF0ZVswXTtcbiAgICB2YXIgeTAgPSBjb29yZGluYXRlWzFdO1xuICAgIHZhciBzdGFydCA9IHNlZ21lbnRbMF07XG4gICAgdmFyIGVuZCA9IHNlZ21lbnRbMV07XG4gICAgdmFyIHgxID0gc3RhcnRbMF07XG4gICAgdmFyIHkxID0gc3RhcnRbMV07XG4gICAgdmFyIHgyID0gZW5kWzBdO1xuICAgIHZhciB5MiA9IGVuZFsxXTtcbiAgICB2YXIgZHggPSB4MiAtIHgxO1xuICAgIHZhciBkeSA9IHkyIC0geTE7XG4gICAgdmFyIGFsb25nID0gKGR4ID09PSAwICYmIGR5ID09PSAwKSA/IDAgOlxuICAgICAgICAoKGR4ICogKHgwIC0geDEpKSArIChkeSAqICh5MCAtIHkxKSkpIC8gKChkeCAqIGR4ICsgZHkgKiBkeSkgfHwgMCk7XG4gICAgdmFyIHgsIHk7XG4gICAgaWYgKGFsb25nIDw9IDApIHtcbiAgICAgIHggPSB4MTtcbiAgICAgIHkgPSB5MTtcbiAgICB9IGVsc2UgaWYgKGFsb25nID49IDEpIHtcbiAgICAgIHggPSB4MjtcbiAgICAgIHkgPSB5MjtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHgxICsgYWxvbmcgKiBkeDtcbiAgICAgIHkgPSB5MSArIGFsb25nICogZHk7XG4gICAgfVxuICAgIHJldHVybiBbeCwgeV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZW9tO1xuIiwidmFyIEdlb21ldHJ5ID0ge307XG5cbkdlb21ldHJ5Lkdlb21ldHJ5VHlwZXMgPSB7XG4gIFBPSU5UOiBcIlBvaW50XCIsXG4gIE1VTFRJUE9JTlQ6IFwiTXVsdGlQb2ludFwiLFxuICBMSU5FU1RSSU5HOiBcIkxpbmVcIiwgLy8gcGVyIHNlZ3VpcmUgbGEgZGVmaW5pemlvbmUgZGkgUUdpcy5HZW9tZXRyeVR5cGUsIGNoZSBkZWZpbmlzY2UgTGluZSBpbnZlY2UgZGkgTGluZXN0cmluZy5cbiAgTVVMVElMSU5FU1RSSU5HOiBcIk11bHRpTGluZVwiLFxuICBQT0xZR09OOiBcIlBvbHlnb25cIixcbiAgTVVMVElQT0xZR09OOiBcIk11bHRpUG9seWdvblwiLFxuICBHRU9NRVRSWUNPTExFQ1RJT046IFwiR2VvbWV0cnlDb2xsZWN0aW9uXCJcbn07XG5cbkdlb21ldHJ5LlN1cHBvcnRlZEdlb21ldHJ5VHlwZXMgPSBbXG4gIEdlb21ldHJ5Lkdlb21ldHJ5VHlwZXMuUE9JTlQsXG4gIEdlb21ldHJ5Lkdlb21ldHJ5VHlwZXMuTVVMVElQT0lOVCxcbiAgR2VvbWV0cnkuR2VvbWV0cnlUeXBlcy5MSU5FU1RSSU5HLFxuICBHZW9tZXRyeS5HZW9tZXRyeVR5cGVzLk1VTFRJTElORVNUUklORyxcbiAgR2VvbWV0cnkuR2VvbWV0cnlUeXBlcy5QT0xZR09OLFxuICBHZW9tZXRyeS5HZW9tZXRyeVR5cGVzLk1VTFRJUE9MWUdPTlxuXVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdlb21ldHJ5O1xuIiwiZnVuY3Rpb24gaW5pdChjb25maWcpIHtcbiAgaTE4bmV4dFxuICAudXNlKGkxOG5leHRYSFJCYWNrZW5kKVxuICAuaW5pdCh7IFxuICAgICAgbG5nOiAnaXQnLFxuICAgICAgbnM6ICdhcHAnLFxuICAgICAgZmFsbGJhY2tMbmc6ICdpdCcsXG4gICAgICByZXNvdXJjZXM6IGNvbmZpZy5yZXNvdXJjZXNcbiAgfSk7XG4gIFxuICBqcXVlcnlJMThuZXh0LmluaXQoaTE4bmV4dCwgJCwge1xuICAgIHROYW1lOiAndCcsIC8vIC0tPiBhcHBlbmRzICQudCA9IGkxOG5leHQudFxuICAgIGkxOG5OYW1lOiAnaTE4bicsIC8vIC0tPiBhcHBlbmRzICQuaTE4biA9IGkxOG5leHRcbiAgICBoYW5kbGVOYW1lOiAnbG9jYWxpemUnLCAvLyAtLT4gYXBwZW5kcyAkKHNlbGVjdG9yKS5sb2NhbGl6ZShvcHRzKTtcbiAgICBzZWxlY3RvckF0dHI6ICdkYXRhLWkxOG4nLCAvLyBzZWxlY3RvciBmb3IgdHJhbnNsYXRpbmcgZWxlbWVudHNcbiAgICB0YXJnZXRBdHRyOiAnZGF0YS1pMThuLXRhcmdldCcsIC8vIGVsZW1lbnQgYXR0cmlidXRlIHRvIGdyYWIgdGFyZ2V0IGVsZW1lbnQgdG8gdHJhbnNsYXRlIChpZiBkaWZmcmVudCB0aGVuIGl0c2VsZilcbiAgICBvcHRpb25zQXR0cjogJ2RhdGEtaTE4bi1vcHRpb25zJywgLy8gZWxlbWVudCBhdHRyaWJ1dGUgdGhhdCBjb250YWlucyBvcHRpb25zLCB3aWxsIGxvYWQvc2V0IGlmIHVzZU9wdGlvbnNBdHRyID0gdHJ1ZVxuICAgIHVzZU9wdGlvbnNBdHRyOiBmYWxzZSwgLy8gc2VlIG9wdGlvbnNBdHRyXG4gICAgcGFyc2VEZWZhdWx0VmFsdWVGcm9tQ29udGVudDogdHJ1ZSAvLyBwYXJzZXMgZGVmYXVsdCB2YWx1ZXMgZnJvbSBjb250ZW50IGVsZS52YWwgb3IgZWxlLnRleHRcbiAgfSk7XG59XG4gICAgXG52YXIgdCA9IGZ1bmN0aW9uKHRleHQpe1xuICAgIHZhciB0cmFkID0gaTE4bmV4dC50KHRleHQpO1xuICAgIHJldHVybiB0cmFkO1xufTtcbiAgICBcbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbml0OiBpbml0LFxuICB0OiB0XG59XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xuXG5mdW5jdGlvbiBMb2FkZXJMYXllclNlcnZpY2UoKSB7XG4gICAgdGhpcy5fbGF5ZXJzID0ge307XG4gICAgdGhpcy5fdHlwZSA9ICd0aXBvIGRpIGxheWVycyc7XG4gICAgYmFzZSh0aGlzKTtcbn1cbmluaGVyaXQoTG9hZGVyTGF5ZXJTZXJ2aWNlLCBHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBMb2FkZXJMYXllclNlcnZpY2UucHJvdG90eXBlO1xuXG5wcm90by5nZXRMb2FkZXJUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XG59O1xuXG5wcm90by5nZXRMYXllcnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2xheWVycztcbn07XG5cbnByb3RvLmdldExheWVyID0gZnVuY3Rpb24obGF5ZXJOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xheWVyc1tsYXllck5hbWVdO1xufTtcblxucHJvdG8ubG9hZExheWVyID0gZnVuY3Rpb24odXJsLCBvcHRpb25zKSB7XG4gIC8vVE9ET1xufTtcbnByb3RvLmxvYWRMYXllcnMgPSBmdW5jdGlvbigpIHtcbiAgLy9UT0RPXG59O1xuXG5wcm90by5jbGVhblVwTGF5ZXJzID0gZnVuY3Rpb24oKSB7XG4gIC8vVE9ET1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkZXJMYXllclNlcnZpY2U7XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciByZXNvbHZlZFZhbHVlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgcmVqZWN0ZWRWYWx1ZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5yZWplY3Q7XG52YXIgVmVjdG9yTGF5ZXIgPSByZXF1aXJlKCdjb3JlL21hcC9sYXllci92ZWN0b3JsYXllcicpO1xudmFyIExvYWRlckxheWVyID0gcmVxdWlyZSgnLi9sb2FkZXJsYXllcicpO1xuXG5mdW5jdGlvbiBWZWN0b3JMb2FkZXJMYXllcigpIHtcblxuICAgIHRoaXMuX2xheWVyID0ge307XG4gICAgdGhpcy5fdHlwZSA9ICd2ZWN0b3InO1xuICAgIHRoaXMuX2xheWVyQ29kZXMgPSBbXTtcbiAgICB0aGlzLl9iYXNlVXJsID0gJyc7XG4gICAgdGhpcy5fbWFwU2VydmljZSA9IG51bGw7XG4gICAgdGhpcy5fbG9hZGVkRXh0ZW50ID0gbnVsbDtcblxuICAgIGJhc2UodGhpcyk7XG5cbiAgICAvL3NldHRvIGxlIHByb3ByacOgIGNoZSBtaSBpbnRlcmVzc2Fub1xuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgLy9pIGxheWVycyBwcm92ZW5pZW50aSBkYWwgcGx1Z2luXG4gICAgICAgIHRoaXMuX2xheWVycyA9IG9wdGlvbnMubGF5ZXJzIHx8IHt9O1xuICAgICAgICAvLyBpbCBiYXNlIHVybCBwZXIgcG90ZXIgZmFyZSByaWNoaWVzdGUgYWwgc2VydmVyXG4gICAgICAgIHRoaXMuX2Jhc2VVcmwgPSBvcHRpb25zLmJhc2V1cmwgfHwgJyc7XG4gICAgICAgIC8vIGlsIG1hcCBzZXJ2aWNlIHBlciBpbmVyYWdpcmUgY29uIGxhIG1hcHBhXG4gICAgICAgIC8vIHJlY3VwZXJhbmRvIGlsIGJib3ggZGVsIGxheWVyIHZldHRvcmlhbGVcbiAgICAgICAgdGhpcy5fbWFwU2VydmljZSA9IG9wdGlvbnMubWFwU2VydmljZSB8fCBudWxsO1xuICAgICAgICAvLyBpIGNvZGljZSBkZWkgbGF5ZXJzIHBlciBwb3RlciByZWN1cGVyYXJlIGxlIGluZm9ybWF6aW9uaVxuICAgICAgICAvLyBkZWkgbGF5ZXJzIHBhc3NhdGkgZGFsIHBsdWdpblxuICAgICAgICB0aGlzLl9sYXllckNvZGVzID0gXy5rZXlzKHRoaXMuX2xheWVycyk7XG4gICAgfTtcbn1cblxuaW5oZXJpdChWZWN0b3JMb2FkZXJMYXllciwgTG9hZGVyTGF5ZXIpO1xuXG52YXIgcHJvdG8gPSBWZWN0b3JMb2FkZXJMYXllci5wcm90b3R5cGU7XG4vLyBmdW56aW9uZSBwcmluY2lwYWxlLCBzdGFydGluZyBwb2ludCwgY2hpYW1hdGEgZGFsIHBsdWdpbiBwZXJcbi8vIGlsIHJlY3VwZXJvIGRlaSB2ZXR0b3JpYWxpIChjaGlhbWF0YSB2ZXJzbyBpbCBzZXJ2ZXIpXG5wcm90by5sb2FkTGF5ZXJzID0gZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgIC8vIHRpZW5lIGNvbnRvIGRlaSBjb2RpY2kgZGVpIGxheWVyIGNoIGVub24gc29ubyBzdGF0aSBjYXJpY2F0aSBjb21lIHZlY3RvclxuICAgIHZhciBub1ZlY3RvcmxheWVyQ29kZXMgPSBbXTtcbiAgICAvL3ZlcmlmaWNhIHNlIHNvbm8gc3RhdGkgY2FyaWNhdGkgaSB2ZXR0b3JpYWxpIGRlaSBsYXllclxuICAgIC8vIGF0dHJhdmVyc28gbGEgcHJvcHJpZXTDoCB2ZWN0b3IgZGVsIGxheWVyIHBhc3NhdG8gZGFsIHBsdWdpblxuICAgIF8uZm9yRWFjaCh0aGlzLl9sYXllcnMsIGZ1bmN0aW9uKGxheWVyLCBsYXllckNvZGUpIHtcbiAgICAgICAgaWYgKF8uaXNOdWxsKGxheWVyLnZlY3RvcikpIHtcbiAgICAgICAgICAgIG5vVmVjdG9ybGF5ZXJDb2Rlcy5wdXNoKGxheWVyQ29kZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBlc2VndW8gbGUgcmljaGllc3RlIGRlbGxlIGNvbmZpZ3VyYXppb25pIGUgbWkgdGVuZ28gbGUgcHJvbWVzc2VcbiAgICB2YXIgdmVjdG9yTGF5ZXJzU2V0dXAgPSBfLm1hcChub1ZlY3RvcmxheWVyQ29kZXMsIGZ1bmN0aW9uKGxheWVyQ29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3NldHVwVmVjdG9yTGF5ZXIoc2VsZi5fbGF5ZXJzW2xheWVyQ29kZV0pO1xuICAgIH0pO1xuICAgIC8vIGFzcGV0dG8gdHV0dGUgbGUgcHJvbWVzc2UgZGVsIHNldHVwIHZlY3RvclxuICAgICQud2hlbi5hcHBseSh0aGlzLCB2ZWN0b3JMYXllcnNTZXR1cClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXlWZWN0b3JMYXllcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gbGVnbyBpICBtb2RvIGNoaWF2ZSB2YWxvcmUgaSBsYXllcnMgY29kZSBhaSByZWxhdGl2aSBsYXllciB2ZXR0b3JpYWxpXG4gICAgICAgICAgICB2YXIgdmVjdG9yTGF5ZXJzID0gXy56aXBPYmplY3Qobm9WZWN0b3JsYXllckNvZGVzLCBhcnJheVZlY3RvckxheWVycyk7XG4gICAgICAgICAgICBzZWxmLmVtaXQoJ3JldHJpZXd2ZWN0b3JsYXllcnMnLCB0cnVlLCB2ZWN0b3JMYXllcnMpO1xuICAgICAgICAgICAgc2VsZi5sb2FkQWxsVmVjdG9yc0RhdGEobm9WZWN0b3JsYXllckNvZGVzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGxheWVyQ29kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lbWl0KCdyZXRyaWV3dmVjdG9sYXllcnNkYXRhJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoJ3JldHJpZXd2ZWN0b2xheWVyc2RhdGEnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcXVlc3RhIG1pIHNlcnZlciBwZXIgc2VnbmFsYXJlIGNoZSBpbCBsb2FkaW5kIGRlaSBkYXRpIMOoIGZpbml0b1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoJ3JldHJpZXd2ZWN0b2xheWVyc2RhdGEnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5lbWl0KCdyZXRyaWV3dmVjdG9ybGF5ZXJzJywgZmFsc2UpO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG5cbi8vZnVuemlvbmUgY2hlIHBlcm1ldHRlIGRpIG90dGVuZXJlIHR1dHRpIGkgZGF0aSByZWxhdGl2aSBhaSBsYXllciB2ZXR0b3JpYWxpIGNhcmljYXRpXG4vL3ByaW1hIHNpIMOoIG90dGVudXRhIGxhIGNvaW5maWd1cmF6aW9uZSwgb3JhIHNpIG90dGVuZ29ubyBpIGRhdGkgdmVyaSBlIHByb3ByaVxucHJvdG8ubG9hZEFsbFZlY3RvcnNEYXRhID0gZnVuY3Rpb24obGF5ZXJDb2Rlcykge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5fbGF5ZXJzO1xuICAgIC8vIHZlcmlmaWNvIGNoZSBpbCBCQk9YIGF0dHVhbGUgbm9uIHNpYSBzdGF0byBnacOgICBjYXJpY2F0b1xuICAgIHZhciBiYm94ID0gdGhpcy5fbWFwU2VydmljZS5zdGF0ZS5iYm94O1xuICAgIHZhciBsb2FkZWRFeHRlbnQgPSB0aGlzLl9sb2FkZWRFeHRlbnQ7XG4gICAgaWYgKGxvYWRlZEV4dGVudCAmJiBvbC5leHRlbnQuY29udGFpbnNFeHRlbnQobG9hZGVkRXh0ZW50LCBiYm94KSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZWRWYWx1ZSgpO1xuICAgIH1cbiAgICBpZiAoIWxvYWRlZEV4dGVudCl7XG4gICAgICAgIHRoaXMuX2xvYWRlZEV4dGVudCA9IGJib3g7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbG9hZGVkRXh0ZW50ID0gb2wuZXh0ZW50LmV4dGVuZChsb2FkZWRFeHRlbnQsIGJib3gpO1xuICAgIH1cbiAgICBpZiAobGF5ZXJDb2Rlcykge1xuICAgICAgICBsYXllcnMgPSBbXTtcbiAgICAgICAgXy5mb3JFYWNoKGxheWVyQ29kZXMsIGZ1bmN0aW9uKGxheWVyQ29kZSkge1xuICAgICAgICAgICAgbGF5ZXJzLnB1c2goc2VsZi5fbGF5ZXJzW2xheWVyQ29kZV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy9wZXIgb2duaSBsYXllciBkZWwgcGx1Z2luIGNoZSBub24gaGEgaWwgbGF5ZXIgdmFkbyBhIGNhcmljYXJlIGkgZGF0aSBkZWwgbGF5ZXIgdmV0dG9yaWFsZVxuICAgIHZhciB2ZWN0b3JEYXRhUmVxdWVzdHMgPSBfLm1hcChsYXllcnMsIGZ1bmN0aW9uKExheWVyKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9sb2FkVmVjdG9yRGF0YShMYXllci52ZWN0b3IsIGJib3gpO1xuICAgIH0pO1xuICAgICQud2hlbi5hcHBseSh0aGlzLCB2ZWN0b3JEYXRhUmVxdWVzdHMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZlY3RvcnNEYXRhUmVzcG9uc2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgdmFyIHZlY3RvckRhdGFSZXNwb25zZUZvckNvZGUgPSBfLnppcE9iamVjdChzZWxmLl9sYXllckNvZGVzLCB2ZWN0b3JzRGF0YVJlc3BvbnNlKTtcbiAgICAgICAgICAgIF8uZm9yRWFjaCh2ZWN0b3JEYXRhUmVzcG9uc2VGb3JDb2RlLCBmdW5jdGlvbih2ZWN0b3JEYXRhUmVzcG9uc2UsIGxheWVyQ29kZSkge1xuICAgICAgICAgICAgICAgIC8vbmVsIGNhc28gY2kgc29ubyB2ZW5nb25vIHJlc3RpdHVpdGkgZmVhdHVyZXMgbG9ja2VkICjDqCB1biBhcnJheSBkaSBmZWF0dXJlIGxvY2tlZClcbiAgICAgICAgICAgICAgICBpZiAodmVjdG9yRGF0YVJlc3BvbnNlLmZlYXR1cmVsb2Nrcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoJ2ZlYXR1cmVsb2NrcycsIGxheWVyQ29kZSwgdmVjdG9yRGF0YVJlc3BvbnNlLmZlYXR1cmVsb2Nrcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGxheWVyQ29kZXMpO1xuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG4vLyBmdW56aW9uZSBjaGUgZGF0byBsYSBjb25maWd1cmF6aW9uZSBkZWwgbGF5ZXIgZm9ybml0byBkYWwgcGx1Z2luIChzdHlsZSwgZWRpdG9yLCB2Y3RvciBldGMuLilcbi8vIGVzZWd1ZSByaWNoaWVzdGUgYWwgc2VydmVyIGFsIGZpbmUgZGkgb3R0ZW5lcmUgY29uZmlndXJhemlvbmUgdmV0dG9yaWFsZSBkZWwgbGF5ZXJcbnByb3RvLl9zZXR1cFZlY3RvckxheWVyID0gZnVuY3Rpb24obGF5ZXJDb25maWcpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgLy8gZXNlZ3VvIGxlIHJpY2hpZXN0ZSBkZWxsZSBjb25maWd1cmF6aW9uaVxuICAgIHRoaXMuX2dldFZlY3RvckxheWVyQ29uZmlnKGxheWVyQ29uZmlnLm5hbWUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHZlY3RvckNvbmZpZ1Jlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgdmVjdG9yQ29uZmlnID0gdmVjdG9yQ29uZmlnUmVzcG9uc2UudmVjdG9yO1xuICAgICAgICAgICAgLy8gdW5hIHZvbHRhIG90dGVudXRhIGRhbCBzZXJ2ZXIgbGEgY29uZmlndXJhemlvbmUgdmV0dG9yaWFsZSxcbiAgICAgICAgICAgIC8vIHByb3Z2ZWRvIGFsbGEgY3JlYXppb25lIGRlbCBsYXllciB2ZXR0b3JpYWxlXG4gICAgICAgICAgICB2YXIgdmVjdG9yTGF5ZXIgPSBzZWxmLl9jcmVhdGVWZWN0b3JMYXllcih7XG4gICAgICAgICAgICAgICAgZ2VvbWV0cnl0eXBlOiB2ZWN0b3JDb25maWcuZ2VvbWV0cnl0eXBlLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogdmVjdG9yQ29uZmlnLmZvcm1hdCxcbiAgICAgICAgICAgICAgICBjcnM6IFwiRVBTRzozMDAzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IGxheWVyQ29uZmlnLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGxheWVyQ29uZmlnLm5hbWUsXG4gICAgICAgICAgICAgICAgcGs6IHZlY3RvckNvbmZpZy5wa1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBzZXR0byBpIGNhbXBpIGRlbCBsYXllclxuICAgICAgICAgICAgdmVjdG9yTGF5ZXIuc2V0RmllbGRzKHZlY3RvckNvbmZpZy5maWVsZHMpO1xuICAgICAgICAgICAgLy8gcXVlc3RvIMOoIGxhIHByb3ByaWV0w6AgZGVsbGEgY29uZmlndXJhemlvbmUgZGVsIGNvbmZpZyBsYXllclxuICAgICAgICAgICAgLy8gY2hlIHNwZWNpZmljYSBzZSBlc2lzdG9ubyByZWxhemlvbmkgY29uIGFsdHJpIGxheWVyXG4gICAgICAgICAgICAvLyBzb25vIGFycmF5IGRpIG9nZ2V0dGkgY2hlIHNwZWNpZmljYW5vIHVuYSBzZXJpZSBkaVxuICAgICAgICAgICAgLy8gaW5mb3JtYXppb25pIHN1IGNvbWUgaSBsYXllciBzb25vIHJlbGF6aW9uYXRpIChub21lIGRlbGxhIHJlbGF6aW9uZSA9PSBub21lIGxheWVyKVxuICAgICAgICAgICAgLy8gZm9yZWlnbiBrZXkgZXRjIC4uXG4gICAgICAgICAgICB2YXIgcmVsYXRpb25zID0gdmVjdG9yQ29uZmlnLnJlbGF0aW9ucztcbiAgICAgICAgICAgIGlmKHJlbGF0aW9ucyl7XG4gICAgICAgICAgICAgICAgLy8gcGVyIGRpcmUgYSB2ZWN0b3JMYXllciBjaGUgaSBkYXRpXG4gICAgICAgICAgICAgICAgLy8gZGVsbGUgcmVsYXppb25pIHZlcnJhbm5vIGNhcmljYXRpIHNvbG8gcXVhbmRvXG4gICAgICAgICAgICAgICAgLy8gcmljaGllc3RpIChlcy4gYXBlcnR1cmUgZm9ybSBkaSBlZGl0aW5nKVxuICAgICAgICAgICAgICAgIHZlY3RvckxheWVyLmxhenlSZWxhdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vdmFkbyBhIHNldHRhcmUgbGUgcmVsYXppb25pIGRlbCB2ZWN0b3IgbGF5ZXJcbiAgICAgICAgICAgICAgICB2ZWN0b3JMYXllci5zZXRSZWxhdGlvbnMocmVsYXRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNldHRvIGxvIHN0aWxlIGRlbCBsYXllciBPTFxuICAgICAgICAgICAgaWYgKGxheWVyQ29uZmlnLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgdmVjdG9yTGF5ZXIuc2V0U3R5bGUobGF5ZXJDb25maWcuc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2ZWN0b3JMYXllcik7XG4gICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG4vL2luIGJhc2UgYWxsIGJib3ggZSBsYSBsYXllciBjaGllZG8gYWwgc2VydmVyIGRpIHJlc3RpdHVpcm1pIGlsIHZldHRvcmlhbGUgKGdlb2pzb24pIGRlbCBsYXllclxucHJvdG8uX2xvYWRWZWN0b3JEYXRhID0gZnVuY3Rpb24odmVjdG9yTGF5ZXIsIGJib3gpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gZXNlZ3VvIGxlIHJpY2hpZXN0ZSBkZUkgZGF0aSBhbCBzZXJ2ZXIgYWwgZmluZSBkaSBvdHRlbmVyZSBpbCBnZW9qc29uLFxuICAgIC8vIHZldHRvcmlhbGUsIGRlbCBsYXllciByaWNoaWVzdG9cbiAgICByZXR1cm4gc2VsZi5fZ2V0VmVjdG9yTGF5ZXJEYXRhKHZlY3RvckxheWVyLCBiYm94KVxuICAgICAgICAudGhlbihmdW5jdGlvbih2ZWN0b3JEYXRhUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vIHNldHRvIGkgZGF0aSB2ZXR0b3JpYWxpIGRlbCBsYXllciB2ZXR0b3JpYWxlXG4gICAgICAgICAgICB2ZWN0b3JMYXllci5zZXREYXRhKHZlY3RvckRhdGFSZXNwb25zZS52ZWN0b3IuZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdmVjdG9yRGF0YVJlc3BvbnNlO1xuICAgICAgICB9KTtcbn07XG5cbi8vIG90dGllbmUgbGEgY29uZmlndXJhemlvbmUgZGVsIHZldHRvcmlhbGVcbi8vIChxdWkgcmljaGllc3RvIHNvbG8gcGVyIGxhIGRlZmluaXppb25lIGRlZ2xpIGlucHV0KVxucHJvdG8uX2dldFZlY3RvckxheWVyQ29uZmlnID0gZnVuY3Rpb24obGF5ZXJOYW1lKSB7XG5cbiAgICB2YXIgZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAkLmdldCh0aGlzLl9iYXNlVXJsK2xheWVyTmFtZStcIi8/Y29uZmlnXCIpXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGQucmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbi8vIG90dGllbmUgaWwgdmV0dG9yaWFsZSBpbiBtb2RhbGl0w6AgIGVkaXRpbmdcbnByb3RvLl9nZXRWZWN0b3JMYXllckRhdGEgPSBmdW5jdGlvbih2ZWN0b3JMYXllciwgYmJveCkge1xuICAgIHZhciBkID0gJC5EZWZlcnJlZCgpO1xuICAgICQuZ2V0KHRoaXMuX2Jhc2VVcmwrdmVjdG9yTGF5ZXIubmFtZStcIi8/ZWRpdGluZyZpbl9iYm94PVwiK2Jib3hbMF0rXCIsXCIrYmJveFsxXStcIixcIitiYm94WzJdK1wiLFwiK2Jib3hbM10pXG4gICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGQucmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkLnByb21pc2UoKTtcbn07XG4vLyBmdW56aW9uZSBwZXIgY3JlYXJlIGlsIGxheWVyIHZldHRvcmlhbGVcbnByb3RvLl9jcmVhdGVWZWN0b3JMYXllciA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xuXG4gICAgdmFyIHZlY3RvciA9IG5ldyBWZWN0b3JMYXllcihvcHRpb25zKTtcbiAgICByZXR1cm4gdmVjdG9yO1xufTtcbi8vZnVuemlvbmUgY2hpYW1hdGEgZGFsIHBsdWdpbiBxdWFuZG8gc2kgdnVvbGUgZmFyZSB1biBjbGVhblVwIGRlaSBsYXllcnNcbi8vICEhISAtLSBEQSBSSVZFREVSRSAtLSAhISFcbnByb3RvLmNsZWFuVXBMYXllcnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9sb2FkZWRFeHRlbnQgPSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWZWN0b3JMb2FkZXJMYXllcjsiLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xuXG5cbmZ1bmN0aW9uIE1hcExheWVyKGNvbmZpZyl7XG4gIHRoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB0aGlzLmlkID0gY29uZmlnLmlkO1xuICBcbiAgdGhpcy5fb2xMYXllciA9IG51bGw7XG4gIFxuICBiYXNlKHRoaXMpO1xufVxuaW5oZXJpdChNYXBMYXllcixHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBNYXBMYXllci5wcm90b3R5cGU7XG5cbnByb3RvLmdldElkID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuaWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcExheWVyO1xuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciB0cnVlZm5jID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnRydWVmbmM7XG52YXIgcmVzb2x2ZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5yZXNvbHZlO1xudmFyIHJlamVjdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5yZWplY3Q7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcblxuZnVuY3Rpb24gVmVjdG9yTGF5ZXIoY29uZmlnKSB7XG5cbiAgdmFyIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgdGhpcy5nZW9tZXRyeXR5cGUgPSBjb25maWcuZ2VvbWV0cnl0eXBlIHx8IG51bGw7XG4gIHRoaXMuZm9ybWF0ID0gY29uZmlnLmZvcm1hdCB8fCBudWxsO1xuICB0aGlzLmNycyA9IGNvbmZpZy5jcnMgIHx8IG51bGw7XG4gIHRoaXMuaWQgPSBjb25maWcuaWQgfHwgbnVsbDtcbiAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWUgfHwgXCJcIjtcbiAgdGhpcy5wayA9IGNvbmZpZy5wayB8fCBcImlkXCI7IC8vIFRPRE86IGlsIEdlb0pTT04gc2V0dGEgbCdpZCBkZWxsYSBmZWF0dXJlIGRhIHPDqSwgZSBuYXNjb25kZSBpbCBjYW1wbyBQSyBkYWxsZSBwcm9wZXJ0aWVzLiBJbiBhbHRyaSBmb3JtYXRpIHZhIHZlcmlmaWNhdG8sIGUgY2Fzb21haSB1c2FyZSBmZWF0dXJlLnNldElkKClcbiAgXG4gIHRoaXMuX29sU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgIGZlYXR1cmVzOiBuZXcgb2wuQ29sbGVjdGlvbigpXG4gIH0pO1xuICB0aGlzLl9vbExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgbmFtZTogdGhpcy5uYW1lLFxuICAgIHNvdXJjZTogdGhpcy5fb2xTb3VyY2VcbiAgfSk7XG4gIFxuICAvKlxuICAgKiBBcnJheSBkaSBvZ2dldHRpOlxuICAgKiB7XG4gICAqICBuYW1lOiBOb21lIGRlbGwnYXR0cmlidXRvLFxuICAgKiAgdHlwZTogaW50ZWdlciB8IGZsb2F0IHwgc3RyaW5nIHwgYm9vbGVhbiB8IGRhdGUgfCB0aW1lIHwgZGF0ZXRpbWUsXG4gICAqICBpbnB1dDoge1xuICAgKiAgICBsYWJlbDogTm9tZSBkZWwgY2FtcG8gZGkgaW5wdXQsXG4gICAqICAgIHR5cGU6IHNlbGVjdCB8IGNoZWNrIHwgcmFkaW8gfCBjb29yZHNwaWNrZXIgfCBib3hwaWNrZXIgfCBsYXllcnBpY2tlciB8IGZpZWxkZGVwZW5kLFxuICAgKiAgICBvcHRpb25zOiB7XG4gICAqICAgICAgTGUgb3B6aW9uaSBwZXIgbG8gc3BjaWZpY28gdGlwbyBkaSBpbnB1dCAoZXMuIFwidmFsdWVzXCIgcGVyIGxhIGxpc3RhIGRpIHZhbG9yaSBkaSBzZWxlY3QsIGNoZWNrIGUgcmFkaW8pXG4gICAqICAgIH1cbiAgICogIH1cbiAgICogfVxuICAqL1xuICB0aGlzLl9QS2luQXR0cmlidXRlcyA9IGZhbHNlO1xuICB0aGlzLl9mZWF0dXJlc0ZpbHRlciA9IG51bGw7XG4gIHRoaXMuX2ZpZWxkcyA9IG51bGw7XG4gIHRoaXMuX3JlbGF0aW9uc0RhdGFMb2FkZWQgPSB7fTtcbiAgdGhpcy5sYXp5UmVsYXRpb25zID0gdHJ1ZTtcbiAgdGhpcy5fcmVsYXRpb25zID0gbnVsbDtcbn1cbmluaGVyaXQoVmVjdG9yTGF5ZXIsRzNXT2JqZWN0KTtcbm1vZHVsZS5leHBvcnRzID0gVmVjdG9yTGF5ZXI7XG5cbnZhciBwcm90byA9IFZlY3RvckxheWVyLnByb3RvdHlwZTtcblxucHJvdG8uc2V0RGF0YSA9IGZ1bmN0aW9uKGZlYXR1cmVzRGF0YSl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGZlYXR1cmVzO1xuICBpZiAodGhpcy5mb3JtYXQpIHtcbiAgICBzd2l0Y2ggKHRoaXMuZm9ybWF0KXtcbiAgICAgIGNhc2UgXCJHZW9KU09OXCI6XG4gICAgICAgIHZhciBnZW9qc29uID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OKHtcbiAgICAgICAgICBkZWZhdWx0RGF0YVByb2plY3Rpb246IHRoaXMuY3JzLFxuICAgICAgICAgIGdlb21ldHJ5TmFtZTogXCJnZW9tZXRyeVwiXG4gICAgICAgIH0pO1xuICAgICAgICBmZWF0dXJlcyA9IGdlb2pzb24ucmVhZEZlYXR1cmVzKGZlYXR1cmVzRGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZmVhdHVyZXMgJiYgZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoIV8uaXNOdWxsKHRoaXMuX2ZlYXR1cmVzRmlsdGVyKSl7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IF8ubWFwKGZlYXR1cmVzLGZ1bmN0aW9uKGZlYXR1cmUpe1xuICAgICAgICAgIHJldHVybiBzZWxmLl9mZWF0dXJlc0ZpbHRlcihmZWF0dXJlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHZhciBhbHJlYWR5TG9hZGVkSWRzID0gdGhpcy5nZXRGZWF0dXJlSWRzKCk7XG4gICAgICB2YXIgZmVhdHVyZXNUb0xvYWQgPSBfLmZpbHRlcihmZWF0dXJlcyxmdW5jdGlvbihmZWF0dXJlKXtcbiAgICAgICAgcmV0dXJuICFfLmluY2x1ZGVzKGFscmVhZHlMb2FkZWRJZHMsZmVhdHVyZS5nZXRJZCgpKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICB0aGlzLl9vbFNvdXJjZS5hZGRGZWF0dXJlcyhmZWF0dXJlc1RvTG9hZCk7XG4gICAgICBcbiAgICAgIC8vIHZlcmlmaWNvLCBwcmVuZGVuZG8gbGEgcHJpbWEgZmVhdHVyZSwgc2UgbGEgUEsgw6ggcHJlc2VudGUgbyBtZW5vIHRyYSBnbGkgYXR0cmlidXRpXG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKVswXS5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgICB0aGlzLl9QS2luQXR0cmlidXRlcyA9IF8uZ2V0KGF0dHJpYnV0ZXMsdGhpcy5waykgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKFwiVmVjdG9yTGF5ZXIgZm9ybWF0IG5vdCBkZWZpbmVkXCIpO1xuICB9XG59O1xuXG5wcm90by5zZXRGZWF0dXJlRGF0YSA9IGZ1bmN0aW9uKG9sZGZpZCxmaWQsZ2VvbWV0cnksYXR0cmlidXRlcyl7XG4gIHZhciBmZWF0dXJlID0gdGhpcy5nZXRGZWF0dXJlQnlJZChvbGRmaWQpO1xuICBpZiAoZmlkKXtcbiAgICBmZWF0dXJlLnNldElkKGZpZCk7XG4gIH1cbiAgXG4gIGlmIChnZW9tZXRyeSl7XG4gICAgZmVhdHVyZS5zZXRHZW9tZXRyeShnZW9tZXRyeSk7XG4gIH1cbiAgXG4gIGlmIChhdHRyaWJ1dGVzKXtcbiAgICB2YXIgb2xkQXR0cmlidXRlcyA9IGZlYXR1cmUuZ2V0UHJvcGVydGllcygpO1xuICAgIHZhciBuZXdBdHRyaWJ1dGVzID1fLmFzc2lnbihvbGRBdHRyaWJ1dGVzLGF0dHJpYnV0ZXMpO1xuICAgIGZlYXR1cmUuc2V0UHJvcGVydGllcyhuZXdBdHRyaWJ1dGVzKTtcbiAgfVxuICBcbiAgcmV0dXJuIGZlYXR1cmU7XG59O1xuXG5wcm90by5hZGRGZWF0dXJlcyA9IGZ1bmN0aW9uKGZlYXR1cmVzKXtcbiAgdGhpcy5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlcyhmZWF0dXJlcyk7XG59O1xuXG5wcm90by5zZXRGZWF0dXJlc0ZpbHRlciA9IGZ1bmN0aW9uKGZlYXR1cmVzRmlsdGVyKXtcbiAgdGhpcy5fZmVhdHVyZXNGaWx0ZXIgPSBmZWF0dXJlc0ZpbHRlcjtcbn07XG5cbnByb3RvLnNldEZpZWxkcyA9IGZ1bmN0aW9uKGZpZWxkcyl7XG4gIHRoaXMuX2ZpZWxkcyA9IGZpZWxkcztcbn07XG5cbnByb3RvLnNldFBrRmllbGQgPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwa2ZpZWxkU2V0ID0gZmFsc2U7XG4gIF8uZm9yRWFjaCh0aGlzLl9maWVsZHMsZnVuY3Rpb24oZmllbGQpe1xuICAgIGlmIChmaWVsZC5uYW1lID09IHNlbGYucGsgKXtcbiAgICAgIHBrZmllbGRTZXQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIFxuICBpZiAoIXBrZmllbGRTZXQpe1xuICAgIHRoaXMuX2ZpZWxkc1xuICB9XG59O1xuXG5wcm90by5nZXRGZWF0dXJlcyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG59O1xuXG5wcm90by5nZXRGZWF0dXJlSWRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGZlYXR1cmVJZHMgPSBfLm1hcCh0aGlzLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCksZnVuY3Rpb24oZmVhdHVyZSl7XG4gICAgcmV0dXJuIGZlYXR1cmUuZ2V0SWQoKTtcbiAgfSk7XG4gIHJldHVybiBmZWF0dXJlSWRzXG59O1xuXG5wcm90by5nZXRGaWVsZHMgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gXy5jbG9uZURlZXAodGhpcy5fZmllbGRzKTtcbn07XG5cbnByb3RvLmdldEZpZWxkc05hbWVzID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIF8ubWFwKHRoaXMuX2ZpZWxkcyxmdW5jdGlvbihmaWVsZCl7XG4gICAgcmV0dXJuIGZpZWxkLm5hbWU7XG4gIH0pO1xufTtcblxucHJvdG8uZ2V0RmllbGRzV2l0aFZhbHVlcyA9IGZ1bmN0aW9uKG9iail7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgLyp2YXIgZmllbGRzID0gXy5jbG9uZURlZXAoXy5maWx0ZXIodGhpcy5fZmllbGRzLGZ1bmN0aW9uKGZpZWxkKXtcbiAgICByZXR1cm4gKChmaWVsZC5uYW1lICE9IHNlbGYucGspICYmIGZpZWxkLmVkaXRhYmxlKTtcbiAgfSkpOyovXG4gIHZhciBmaWVsZHMgPSBfLmNsb25lRGVlcCh0aGlzLl9maWVsZHMpO1xuICBcbiAgdmFyIGZlYXR1cmUsIGF0dHJpYnV0ZXM7XG4gIFxuICAvLyBpbCBtZXRvZG8gYWNjZXR0YSBzaWEgZmVhdHVyZSBjaGUgZmlkXG4gIGlmIChvYmogaW5zdGFuY2VvZiBvbC5GZWF0dXJlKXtcbiAgICBmZWF0dXJlID0gb2JqO1xuICB9XG4gIGVsc2UgaWYgKG9iail7XG4gICAgZmVhdHVyZSA9IHRoaXMuZ2V0RmVhdHVyZUJ5SWQob2JqKTtcbiAgfVxuICBpZiAoZmVhdHVyZSl7XG4gICAgYXR0cmlidXRlcyA9IGZlYXR1cmUuZ2V0UHJvcGVydGllcygpO1xuICB9XG4gIFxuICBfLmZvckVhY2goZmllbGRzLGZ1bmN0aW9uKGZpZWxkKXtcbiAgICBpZiAoZmVhdHVyZSl7XG4gICAgICBpZiAoIXRoaXMuX1BLaW5BdHRyaWJ1dGVzICYmIGZpZWxkLm5hbWUgPT0gc2VsZi5wayl7XG4gICAgICAgIGZpZWxkLnZhbHVlID0gZmVhdHVyZS5nZXRJZCgpO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgZmllbGQudmFsdWUgPSBhdHRyaWJ1dGVzW2ZpZWxkLm5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNle1xuICAgICAgZmllbGQudmFsdWUgPSBudWxsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmaWVsZHM7XG59O1xuXG5wcm90by5zZXRSZWxhdGlvbnMgPSBmdW5jdGlvbihyZWxhdGlvbnMpIHtcbiAgdGhpcy5fcmVsYXRpb25zID0gcmVsYXRpb25zO1xuICAvLyDDqCB1biBhcnJheSBjb250ZW5ldGUgbGUgcmVsYXppb25pIGNvbiBhbHRyaSBsYXllcnNcbiAgXy5mb3JFYWNoKHJlbGF0aW9ucywgZnVuY3Rpb24ocmVsYXRpb24pIHtcbiAgICAvLyBwZXIgb2duaSByZWxhemlvbmUgc2NvcnJvIHN1bGwnYXR0cmlidXRvIGZpZWxkcyAoYXJyYXkpIGRpIG9nZ2V0dGlcbiAgICAvLyBjaGUgZGVzY3Jpdm9ubyAgaSBjYW1waSBkZWwgbGF5ZXIgcmVsYXppb25lXG4gICAgXy5mb3JFYWNoKHJlbGF0aW9uLmZpZWxkcywgZnVuY3Rpb24oZmllbGQsIGlkeCkge1xuICAgICAgaWYgKGZpZWxkLm5hbWUgPT0gcmVsYXRpb24ucGspIHtcbiAgICAgICAgLy8gYWdnaXVuZyBsbCdhdHJpYnV0byBwa0ZpZWxkSW5kZXhcbiAgICAgICAgLy8gY2hlIG1pIHNlcnZpcsOgIHBlciByZWN1cGVyYXJlIGlsIGNhbXBvXG4gICAgICAgIC8vIHByaW1hcnkgZGVsIGxheWVyIHJlbGF6aW9uZVxuICAgICAgICByZWxhdGlvbi5wa0ZpZWxkSW5kZXggPSBpZHhcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufTtcbi8vIHJlc2l0dWlzY2UgbGUgcmVsYXppb25pXG5wcm90by5nZXRSZWxhdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3JlbGF0aW9ucztcbn07XG5cbnByb3RvLmdldFJlbGF0aW9uID0gZnVuY3Rpb24ocmVsYXRpb25OYW1lKSB7XG4gIHZhciByZWxhdGlvbjtcbiAgXy5mb3JFYWNoKHRoaXMuX3JlbGF0aW9ucyxmdW5jdGlvbihfcmVsYXRpb24pe1xuICAgIGlmIChfcmVsYXRpb24ubmFtZSA9PSByZWxhdGlvbk5hbWUpIHtcbiAgICAgIHJlbGF0aW9uID0gX3JlbGF0aW9uO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZWxhdGlvbjtcbn07XG5cbnByb3RvLmhhc1JlbGF0aW9ucyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhXy5pc051bGwodGhpcy5fcmVsYXRpb25zKTtcbn07XG5cbnByb3RvLmdldFJlbGF0aW9uUGtGaWVsZEluZGV4ID0gZnVuY3Rpb24ocmVsYXRpb24pIHtcbiAgdmFyIHBrRmllbGRJbmRleDtcbiAgXy5mb3JFYWNoKHJlbGF0aW9uLmZpZWxkcyxmdW5jdGlvbihmaWVsZCxpZHgpe1xuICAgIGlmIChmaWVsZC5uYW1lID09IHJlbGF0aW9uLnBrKSB7XG4gICAgICBwa0ZpZWxkSW5kZXggPSBpZHg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBrRmllbGRJbmRleDtcbn07XG5cbnByb3RvLmdldFJlbGF0aW9uRWxlbWVudFBrVmFsdWUgPSBmdW5jdGlvbihyZWxhdGlvbixlbGVtZW50KSB7XG4gIHZhciBwa0ZpZWxkSW5kZXggPSB0aGlzLmdldFJlbGF0aW9uUGtGaWVsZEluZGV4KHJlbGF0aW9uKTtcbiAgcmV0dXJuIGVsZW1lbnQuZmllbGRzW3BrRmllbGRJbmRleF0udmFsdWU7XG59O1xuXG5wcm90by5nZXRSZWxhdGlvbnNGa3NLZXlzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGZrcyA9IFtdO1xuICBfLmZvckVhY2godGhpcy5fcmVsYXRpb25zLGZ1bmN0aW9uKHJlbGF0aW9uKXtcbiAgICBma3MucHVzaChyZWxhdGlvbi5mayk7XG4gIH0pO1xuICByZXR1cm4gZmtzO1xufTtcblxucHJvdG8uZ2V0UmVsYXRpb25GaWVsZHMgPSBmdW5jdGlvbihyZWxhdGlvbikge1xuICByZXR1cm4gcmVsYXRpb24uZmllbGRzO1xufTtcblxucHJvdG8uZ2V0UmVsYXRpb25GaWVsZHNOYW1lcyA9IGZ1bmN0aW9uKHJlbGF0aW9uKXtcbiAgcmV0dXJuIF8ubWFwKHJlbGF0aW9uRmllbGRzLGZ1bmN0aW9uKGZpZWxkKXtcbiAgICByZXR1cm4gZmllbGQubmFtZTtcbiAgfSk7XG59O1xuXG4vLyBvdHRlbmdvIGxlIHJlbGF6aW9uaSBhIHBhcnRpcmUgZGFsIGZpZCBkaSB1bmEgZmVhdHVyZSBlc2lzdGVudGVcbnByb3RvLmdldFJlbGF0aW9uc1dpdGhWYWx1ZXMgPSBmdW5jdGlvbihmaWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoIXRoaXMuX3JlbGF0aW9ucykge1xuICAgIC8vIHNlIG5vbiBoYSBuZXNzdW5hIHJlbGF6aW9uZVxuICAgIC8vIHJpcm90bm8gYXJyYXkgdnVvdG9cbiAgICByZXNvbHZlKFtdKTtcbiAgfVxuICAvLyBhbHRyaW1lbnRpIGNyZW8gdW4gY2xvZSBkZWxsJ2F0dHJpYnV0byByZWxhdGlvbnNcbiAgdmFyIHJlbGF0aW9ucyA9IF8uY2xvbmVEZWVwKHRoaXMuX3JlbGF0aW9ucyk7XG4gIC8vIC0tIERBIENBUElSRSBNRUdMSU8gLS1cbiAgaWYgKCFmaWQgfHwgIXRoaXMuZ2V0RmVhdHVyZUJ5SWQoZmlkKSkge1xuICAgIF8uZm9yRWFjaChyZWxhdGlvbnMsIGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gICAgICByZWxhdGlvbi5lbGVtZW50cyA9IFtdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXNvbHZlKHJlbGF0aW9ucyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHRoaXMubGF6eVJlbGF0aW9ucyl7XG4gICAgICBpZiAoIXNlbGYuX3JlbGF0aW9uc0RhdGFMb2FkZWRbZmlkXSkge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5nZXRGZWF0dXJlQnlJZChmaWQpLmdldFByb3BlcnRpZXMoKTtcbiAgICAgICAgdmFyIGZrcyA9IHt9O1xuICAgICAgICBfLmZvckVhY2gocmVsYXRpb25zLCBmdW5jdGlvbihyZWxhdGlvbikge1xuICAgICAgICAgIHZhciBrZXlWYWxzID0gW107XG4gICAgICAgICAgXy5mb3JFYWNoKHJlbGF0aW9uLmZrLCBmdW5jdGlvbihma0tleSkge1xuICAgICAgICAgICAgZmtzW2ZrS2V5XSA9IGF0dHJpYnV0ZXNbZmtLZXldO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmdldFJlbGF0aW9uc1dpdGhWYWx1ZXNGcm9tRmtzKGZrcylcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihyZWxhdGlvbnNSZXNwb25zZSl7XG4gICAgICAgICAgICBzZWxmLl9yZWxhdGlvbnNEYXRhTG9hZGVkW2ZpZF0gPSByZWxhdGlvbnNSZXNwb25zZTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVsYXRpb25zUmVzcG9uc2UpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZhaWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuX3JlbGF0aW9uc0RhdGFMb2FkZWRbZmlkXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc29sdmUodGhpcy5fcmVsYXRpb25zKTsgLy8gdnVvbCBkaXJlIGNoZSBnbGkgZWxlbWVudGkgZGVsbGUgcmVsYXppb25pIHNvbm8gc3RhdGkgZ2nDoCBpbnNlcml0aSBpbiBmYXNlIGRpIGNyZWF6aW9uZSBkZWwgdmV0dG9yaWFsZVxuICAgIH1cbiAgfVxufTtcblxuLy8gb3R0ZW5nbyBsZSByZWxhemlvbmkgdmFsb3JpenphdGUgYSBwYXJ0aXJlIGRhIHVuIG9nZ2V0dG8gY29uIGxlIGNoaWF2aSBGSyBjb21lIGtleXMgZSBpIGxvcm8gdmFsb3JpIGNvbWUgdmFsdWVzXG5wcm90by5nZXRSZWxhdGlvbnNXaXRoVmFsdWVzRnJvbUZrcyA9IGZ1bmN0aW9uKGZrcyl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHJlbGF0aW9ucyA9IF8uY2xvbmVEZWVwKHRoaXMuX3JlbGF0aW9ucyk7XG4gIHZhciByZWxhdGlvbnNSZXF1ZXN0cyA9IFtdO1xuXG4gIF8uZm9yRWFjaChyZWxhdGlvbnMsZnVuY3Rpb24ocmVsYXRpb24pe1xuXG4gICAgcmVsYXRpb24uZWxlbWVudHMgPSBbXTsgLy8gY3JlbyBsYSBwcm9wcmlldMOgIGNoZSBhY2NvZ2xpZXLDoCBnbGkgZWxlbWVudGkgZGVsbGEgcmVsYXppb25lICggZSBjaGUgcXVpbmRpIGxpIGNhY2hlcsOgKVxuICAgIHZhciB1cmwgPSByZWxhdGlvbi51cmw7XG4gICAgdmFyIGtleVZhbHMgPSBbXTtcbiAgICBfLmZvckVhY2gocmVsYXRpb24uZmssZnVuY3Rpb24oZmtLZXkpe1xuICAgICAgdmFyIGZrVmFsdWUgPSBma3NbZmtLZXldO1xuICAgICAga2V5VmFscy5wdXNoKGZrS2V5K1wiPVwiK2ZrVmFsdWUpO1xuICAgIH0pO1xuICAgIHZhciBma1BhcmFtcyA9IF8uam9pbihrZXlWYWxzLFwiJlwiKTtcbiAgICB1cmwgKz0gXCI/XCIrZmtQYXJhbXM7XG4gICAgcmVsYXRpb25zUmVxdWVzdHMucHVzaCgkLmdldCh1cmwpXG4gICAgICAudGhlbihmdW5jdGlvbihyZWxhdGlvbnNFbGVtZW50cyl7XG4gICAgICAgIGlmIChyZWxhdGlvbnNFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBfLmZvckVhY2gocmVsYXRpb25zRWxlbWVudHMsZnVuY3Rpb24ocmVsYXRpb25FbGVtZW50KXtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0ge307XG4gICAgICAgICAgICBlbGVtZW50LmZpZWxkcyA9IF8uY2xvbmVEZWVwKHJlbGF0aW9uLmZpZWxkcyk7IC8vIGkgY2FtcGkgbGkgbWV0dG8gYW5jaGUgaW4gb2duaSBlbGVtZW50bywgaW4gbW9kbyBkYSBwb3Rlcm5lIGFzc2VnbmFybmUgaSB2YWxvcmlcbiAgICAgICAgICAgIF8uZm9yRWFjaChlbGVtZW50LmZpZWxkcyxmdW5jdGlvbihmaWVsZCl7IC8vIGFzc2Vnbm8gaSB2YWxvcmkgYWkgY2FtcGlcbiAgICAgICAgICAgICAgZmllbGQudmFsdWUgPSByZWxhdGlvbkVsZW1lbnRbZmllbGQubmFtZV07XG4gICAgICAgICAgICAgIGlmIChmaWVsZC5uYW1lID09IHJlbGF0aW9uLnBrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5pZCA9IGZpZWxkLnZhbHVlIC8vIGFnZ2l1bmdvIGVsZW1lbnQuaWQgZGFuZG9nbGkgaWwgdmFsb3JlIGRlbGxhIGNoaWF2ZSBwcmltYXJpYSBkZWxsYSByZWxhemlvbmVcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0YXRlID0gJ09MRCc7IC8vIGZsYWcgdXNhdG8gcGVyIGlkZW50aWZpY2FyZSBlbGVtZW50bzogJ05FVycsICdPTEQnLCAnREVMRVRFRCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWxhdGlvbi5lbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKVxuICB9KTtcbiAgXG4gIHJldHVybiAkLndoZW4uYXBwbHkodGhpcyxyZWxhdGlvbnNSZXF1ZXN0cylcbiAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gcmVsYXRpb25zOyAvLyBsZSByZWxhemlvbmkgZSBpIGxvcm8gZWxlbWVudGkgc29ubyBpbW11dGFiaWxpOyBsZSBtb2RpZmljaGUgdmFubm8gbmVpIFJlbGF0aW9uRWRpdEJ1ZmZlclxuICB9KTtcbn1cblxuLy8gZGF0YSB1bmEgZmVhdHVyZSB2ZXJpZmljbyBzZSBoYSB0cmEgZ2xpIGF0dHJpYnV0aSBpIHZhbG9yaSBkZWxsZSBGSyBkZWxsZSAoZXZlbnR1YWxpKSByZWxhemlvbmlcbnByb3RvLmZlYXR1cmVIYXNSZWxhdGlvbnNGa3NXaXRoVmFsdWVzID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIHZhciBhdHRyaWJ1dGVzID0gZmVhdHVyZS5nZXRQcm9wZXJ0aWVzKCk7XG4gIHZhciBma3NLZXlzID0gdGhpcy5nZXRSZWxhdGlvbnNGa3NLZXlzKCk7XG4gIHJldHVybiBfLmV2ZXJ5KGZrc0tleXMsZnVuY3Rpb24oZmtLZXkpe1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbZmtLZXldO1xuICAgIHJldHVybiAoIV8uaXNOaWwodmFsdWUpICYmIHZhbHVlICE9ICcnKTtcbiAgfSlcbn07XG5cbi8vIGRhdGEgdW5hIGZlYXR1cmUgcG9wb2xvIHVuIG9nZ2V0dG8gY29uIGNoaWF2aS92YWxvcmkgZGVsbGUgRksgZGVsbGUgKGV2ZW50dWFsaSkgcmVsYXppb25lXG5wcm90by5nZXRSZWxhdGlvbnNGa3NXaXRoVmFsdWVzRm9yRmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUpe1xuICB2YXIgYXR0cmlidXRlcyA9IGZlYXR1cmUuZ2V0UHJvcGVydGllcygpO1xuICB2YXIgZmtzID0ge307XG4gIHZhciBma3NLZXlzID0gdGhpcy5nZXRSZWxhdGlvbnNGa3NLZXlzKCk7XG4gIF8uZm9yRWFjaChma3NLZXlzLGZ1bmN0aW9uKGZrS2V5KXtcbiAgICBma3NbZmtLZXldID0gYXR0cmlidXRlc1tma0tleV07XG4gIH0pO1xuICByZXR1cm4gZmtzO1xufTtcblxuLy8gYW5jb3JhIG1haSB1c2F0bywgcGVyY2jDqSBpbiBnZW5lcmFsZSBpIGRhdGkgZGVsbGUgcmVsYXppb25pIHZlbmdvbm8gY2FyaWNhdGkgaW4gbW9kbyBsYXp5IHN1IHJpY2hpZXN0ZSBwZXIgbGEgc2luZ29sYSBmZWF0dXJlXG5wcm90by5zZXRSZWxhdGlvbnNEYXRhID0gZnVuY3Rpb24gKHJlbGF0aW9uc0RhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBfLmZvckVhY2godGhpcy5fcmVsYXRpb25zLGZ1bmN0aW9uKHJlbGF0aW9uKXtcbiAgICAvLyBwb3BvbGFyZSBnbGkgZWxlbWVudGkgZGVsbGUgcmVsYXppb25pXG4gICAgc2VsZi5fcmVsYXRpb25zRGF0YUxvYWRlZCA9IHRydWU7XG4gIH0pO1xufVxuXG5wcm90by5zZXRTdHlsZSA9IGZ1bmN0aW9uKHN0eWxlKXtcbiAgdGhpcy5fb2xMYXllci5zZXRTdHlsZShzdHlsZSk7XG59O1xuXG5wcm90by5nZXRNYXBMYXllciA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLl9vbExheWVyO1xufTtcblxucHJvdG8uZ2V0U291cmNlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuX29sTGF5ZXIuZ2V0U291cmNlKCk7XG59O1xuXG5wcm90by5nZXRGZWF0dXJlQnlJZCA9IGZ1bmN0aW9uKGlkKXtcbiAgcmV0dXJuIHRoaXMuX29sTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZUJ5SWQoaWQpO1xufTtcblxucHJvdG8uY2xlYXIgPSBmdW5jdGlvbigpe1xuICB0aGlzLmdldFNvdXJjZSgpLmNsZWFyKCk7XG59O1xuXG5wcm90by5hZGRUb01hcCA9IGZ1bmN0aW9uKG1hcCl7XG4gIG1hcC5hZGRMYXllcih0aGlzLl9vbExheWVyKTtcbn07XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciBnZW8gPSByZXF1aXJlKCdjb3JlL3V0aWxzL2dlbycpO1xudmFyIE1hcExheWVyID0gcmVxdWlyZSgnY29yZS9tYXAvbGF5ZXIvbWFwbGF5ZXInKTtcbnZhciBSYXN0ZXJMYXllcnMgPSByZXF1aXJlKCdnM3ctb2wzL3NyYy9sYXllcnMvcmFzdGVycycpO1xuXG5mdW5jdGlvbiBXTVNMYXllcihvcHRpb25zLGV4dHJhUGFyYW1zKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLkxBWUVSVFlQRSA9IHtcbiAgICBMQVlFUjogJ2xheWVyJyxcbiAgICBNVUxUSUxBWUVSOiAnbXVsdGlsYXllcidcbiAgfTtcblxuICB0aGlzLmV4dHJhUGFyYW1zID0gZXh0cmFQYXJhbXNcbiAgdGhpcy5sYXllcnMgPSBbXTtcbiAgXG4gIGJhc2UodGhpcyxvcHRpb25zKTtcbn1cbmluaGVyaXQoV01TTGF5ZXIsTWFwTGF5ZXIpXG52YXIgcHJvdG8gPSBXTVNMYXllci5wcm90b3R5cGU7XG5cbnByb3RvLmdldE9MTGF5ZXIgPSBmdW5jdGlvbih3aXRoTGF5ZXJzKXtcbiAgdmFyIG9sTGF5ZXIgPSB0aGlzLl9vbExheWVyO1xuICBpZiAoIW9sTGF5ZXIpe1xuICAgIG9sTGF5ZXIgPSB0aGlzLl9vbExheWVyID0gdGhpcy5fbWFrZU9sTGF5ZXIod2l0aExheWVycyk7XG4gIH1cbiAgcmV0dXJuIG9sTGF5ZXI7XG59O1xuXG5wcm90by5nZXRTb3VyY2UgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5nZXRPTExheWVyKCkuZ2V0U291cmNlKCk7XG59O1xuXG5wcm90by5nZXRJbmZvRm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnYXBwbGljYXRpb24vdm5kLm9nYy5nbWwnO1xufTtcblxucHJvdG8uZ2V0R2V0RmVhdHVyZUluZm9VcmwgPSBmdW5jdGlvbihjb29yZGluYXRlLHJlc29sdXRpb24sZXBzZyxwYXJhbXMpe1xuICByZXR1cm4gdGhpcy5nZXRPTExheWVyKCkuZ2V0U291cmNlKCkuZ2V0R2V0RmVhdHVyZUluZm9VcmwoY29vcmRpbmF0ZSxyZXNvbHV0aW9uLGVwc2cscGFyYW1zKTtcbn07XG5cbnByb3RvLmdldExheWVyQ29uZmlncyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLmxheWVycztcbn07XG5cbnByb3RvLmFkZExheWVyID0gZnVuY3Rpb24obGF5ZXIpe1xuICB0aGlzLmxheWVycy5wdXNoKGxheWVyKTtcbn07XG5cbnByb3RvLnRvZ2dsZUxheWVyID0gZnVuY3Rpb24obGF5ZXIpe1xuICBfLmZvckVhY2godGhpcy5sYXllcnMsZnVuY3Rpb24oX2xheWVyKXtcbiAgICBpZiAoX2xheWVyLmlkID09IGxheWVyLmlkKXtcbiAgICAgIF9sYXllci52aXNpYmxlID0gbGF5ZXIudmlzaWJsZTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLl91cGRhdGVMYXllcnMoKTtcbn07XG4gIFxucHJvdG8udXBkYXRlID0gZnVuY3Rpb24obWFwU3RhdGUsZXh0cmFQYXJhbXMpe1xuICB0aGlzLl91cGRhdGVMYXllcnMobWFwU3RhdGUsZXh0cmFQYXJhbXMpO1xufTtcblxucHJvdG8uaXNWaXNpYmxlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuX2dldFZpc2libGVMYXllcnMoKS5sZW5ndGggPiAwO1xufTtcblxucHJvdG8uZ2V0UXVlcnlVcmwgPSBmdW5jdGlvbigpe1xuICB2YXIgbGF5ZXIgPSB0aGlzLmxheWVyc1swXTtcbiAgaWYgKGxheWVyLmluZm91cmwgJiYgbGF5ZXIuaW5mb3VybCAhPSAnJykge1xuICAgIHJldHVybiBsYXllci5pbmZvdXJsO1xuICB9XG4gIHJldHVybiB0aGlzLmNvbmZpZy51cmw7XG59O1xuXG5wcm90by5nZXRRdWVyeWFibGVMYXllcnMgPSBmdW5jdGlvbigpeyBcbiAgcmV0dXJuIF8uZmlsdGVyKHRoaXMubGF5ZXJzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICByZXR1cm4gbGF5ZXIuaXNRdWVyeWFibGUoKTtcbiAgfSk7XG59O1xuXG5wcm90by5fZ2V0VmlzaWJsZUxheWVycyA9IGZ1bmN0aW9uKG1hcFN0YXRlKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdmlzaWJsZUxheWVycyA9IFtdO1xuICBfLmZvckVhY2godGhpcy5sYXllcnMsZnVuY3Rpb24obGF5ZXIpe1xuICAgIHZhciByZXNvbHV0aW9uQmFzZWRWaXNpYmlsaXR5ID0gbGF5ZXIuc3RhdGUubWF4cmVzb2x1dGlvbiA/IChsYXllci5zdGF0ZS5tYXhyZXNvbHV0aW9uICYmIGxheWVyLnN0YXRlLm1heHJlc29sdXRpb24gPiBtYXBTdGF0ZS5yZXNvbHV0aW9uKSA6IHRydWU7XG4gICAgaWYgKGxheWVyLnN0YXRlLnZpc2libGUgJiYgcmVzb2x1dGlvbkJhc2VkVmlzaWJpbGl0eSkge1xuICAgICAgdmlzaWJsZUxheWVycy5wdXNoKGxheWVyKTtcbiAgICB9ICAgIFxuICB9KVxuICByZXR1cm4gdmlzaWJsZUxheWVycztcbn07XG5cbnByb3RvLl9tYWtlT2xMYXllciA9IGZ1bmN0aW9uKHdpdGhMYXllcnMpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB3bXNDb25maWcgPSB7XG4gICAgdXJsOiB0aGlzLmNvbmZpZy51cmwsXG4gICAgaWQ6IHRoaXMuY29uZmlnLmlkXG4gIH07XG4gIFxuICBpZiAod2l0aExheWVycykge1xuICAgIHdtc0NvbmZpZy5sYXllcnMgPSBfLm1hcCh0aGlzLmxheWVycyxmdW5jdGlvbihsYXllcil7XG4gICAgICByZXR1cm4gbGF5ZXIuZ2V0V01TTGF5ZXJOYW1lKCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIHZhciByZXByZXNlbnRhdGl2ZUxheWVyID0gdGhpcy5sYXllcnNbMF07IC8vQlJVVFRPLCBERVZPIFBSRU5ERVJFIFVOIExBWUVSIEEgQ0FTTyAoSUwgUFJJTU8pIFBFUiBWRURFUkUgU0UgUFVOVEEgQUQgVU4gU09VUkNFIERJVkVSU08gKGRvdnJlYmJlIGFjY2FkZXJlIHNvbG8gcGVyIGkgbGF5ZXIgc2luZ29saSwgV01TIGVzdGVybmkpXG4gIFxuICBpZiAocmVwcmVzZW50YXRpdmVMYXllci5zdGF0ZS5zb3VyY2UgJiYgcmVwcmVzZW50YXRpdmVMYXllci5zdGF0ZS5zb3VyY2UudHlwZSA9PSAnd21zJyAmJiByZXByZXNlbnRhdGl2ZUxheWVyLnN0YXRlLnNvdXJjZS51cmwpe1xuICAgIHdtc0NvbmZpZy51cmwgPSByZXByZXNlbnRhdGl2ZUxheWVyLnN0YXRlLnNvdXJjZS51cmw7XG4gIH07XG4gIFxuICB2YXIgb2xMYXllciA9IG5ldyBSYXN0ZXJMYXllcnMuV01TTGF5ZXIod21zQ29uZmlnLHRoaXMuZXh0cmFQYXJhbXMpO1xuICBcbiAgb2xMYXllci5nZXRTb3VyY2UoKS5vbignaW1hZ2Vsb2Fkc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5lbWl0KFwibG9hZHN0YXJ0XCIpO1xuICAgICAgfSk7XG4gIG9sTGF5ZXIuZ2V0U291cmNlKCkub24oJ2ltYWdlbG9hZGVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5lbWl0KFwibG9hZGVuZFwiKTtcbiAgfSk7XG4gIFxuICByZXR1cm4gb2xMYXllclxufTtcblxucHJvdG8uY2hlY2tMYXllckRpc2FibGVkID0gZnVuY3Rpb24obGF5ZXIscmVzb2x1dGlvbikge1xuICB2YXIgc2NhbGUgPSBnZW8ucmVzVG9TY2FsZShyZXNvbHV0aW9uKTtcbiAgdmFyIGVuYWJsZWQgPSB0cnVlO1xuICBpZiAobGF5ZXIuc3RhdGUubWF4cmVzb2x1dGlvbil7XG4gICAgZW5hYmxlZCA9IGVuYWJsZWQgJiYgKGxheWVyLnN0YXRlLm1heHJlc29sdXRpb24gPiByZXNvbHV0aW9uKTtcbiAgfVxuICBpZiAobGF5ZXIuc3RhdGUubWlucmVzb2x1dGlvbil7XG4gICAgZW5hYmxlZCA9IGVuYWJsZWQgJiYgKGxheWVyLnN0YXRlLm1pbnJlc29sdXRpb24gPCByZXNvbHV0aW9uKTtcbiAgfVxuICBpZiAobGF5ZXIuc3RhdGUubWluc2NhbGUpIHtcbiAgICBlbmFibGVkID0gZW5hYmxlZCAmJiAobGF5ZXIuc3RhdGUubWluc2NhbGUgPiBzY2FsZSk7XG4gIH1cbiAgaWYgKGxheWVyLnN0YXRlLm1heHNjYWxlKSB7XG4gICAgZW5hYmxlZCA9IGVuYWJsZWQgJiYgKGxheWVyLnN0YXRlLm1heHNjYWxlIDwgc2NhbGUpO1xuICB9XG4gIGxheWVyLnN0YXRlLmRpc2FibGVkID0gIWVuYWJsZWQ7XG59O1xuXG5wcm90by5jaGVja0xheWVyc0Rpc2FibGVkID0gZnVuY3Rpb24ocmVzb2x1dGlvbil7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgXy5mb3JFYWNoKHRoaXMubGF5ZXJzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICBzZWxmLmNoZWNrTGF5ZXJEaXNhYmxlZChsYXllcixyZXNvbHV0aW9uKTtcbiAgfSk7XG59O1xuXG5wcm90by5fdXBkYXRlTGF5ZXJzID0gZnVuY3Rpb24obWFwU3RhdGUsZXh0cmFQYXJhbXMpe1xuICB0aGlzLmNoZWNrTGF5ZXJzRGlzYWJsZWQobWFwU3RhdGUucmVzb2x1dGlvbik7XG4gIHZhciB2aXNpYmxlTGF5ZXJzID0gdGhpcy5fZ2V0VmlzaWJsZUxheWVycyhtYXBTdGF0ZSk7XG4gIGlmICh2aXNpYmxlTGF5ZXJzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgTEFZRVJTOiBfLmpvaW4oXy5tYXAodmlzaWJsZUxheWVycyxmdW5jdGlvbihsYXllcil7XG4gICAgICAgIHJldHVybiBsYXllci5nZXRXTVNMYXllck5hbWUoKTtcbiAgICAgIH0pLCcsJylcbiAgICB9O1xuICAgIGlmIChleHRyYVBhcmFtcykge1xuICAgICAgcGFyYW1zID0gXy5hc3NpZ24ocGFyYW1zLGV4dHJhUGFyYW1zKTtcbiAgICB9XG4gICAgdGhpcy5fb2xMYXllci5zZXRWaXNpYmxlKHRydWUpO1xuICAgIHRoaXMuX29sTGF5ZXIuZ2V0U291cmNlKCkudXBkYXRlUGFyYW1zKHBhcmFtcyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5fb2xMYXllci5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXTVNMYXllcjtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIE1hcHNSZWdpc3RyeSgpIHtcbiAgYmFzZSh0aGlzKTtcbiAgXG4gIHRoaXMuX21hcHNTZXJ2aWNlcyA9IHtcbiAgfTtcbiAgXG4gIHRoaXMuYWRkTWFwID0gZnVuY3Rpb24obWFwU2VydmljZSkge1xuICAgIHRoaXMuX3JlZ2lzdGVyTWFwU2VydmljZShtYXBTZXJ2aWNlKTtcbiAgfTtcbiAgXG4gIHRoaXMuX3JlZ2lzdGVyTWFwU2VydmljZSA9IGZ1bmN0aW9uKG1hcFNlcnZpY2UpIHtcbiAgICB2YXIgbWFwU2VydmljZSA9IHRoaXMuX21hcHNTZXJ2aWNlc1ttYXBTZXJ2aWNlLmlkXVxuICAgIGlmIChfLmlzVW5kZWZpbmVkKG1hcFNlcnZpY2UpKSB7XG4gICAgICB0aGlzLl9tYXBzU2VydmljZXNbbWFwU2VydmljZS5pZF0gPSBtYXBTZXJ2aWNlO1xuICAgIH1cbiAgfTtcbn0gXG5pbmhlcml0KE1hcHNSZWdpc3RyeSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcHNSZWdpc3RyeTtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcHJvamVjdC9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9wbHVnaW5zcmVnaXN0cnknKTtcblxudmFyIFBsdWdpbiA9IGZ1bmN0aW9uKCkge1xuXG4gIHRoaXMubmFtZSA9ICcobm8gbmFtZSknO1xuICB0aGlzLmNvbmZpZyA9IG51bGw7XG4gIGJhc2UodGhpcyk7XG5cbn07XG5cbmluaGVyaXQoUGx1Z2luLEczV09iamVjdCk7XG5cbnZhciBwcm90byA9IFBsdWdpbi5wcm90b3R5cGU7XG5cbi8vcmVjdXBlcmFyZSBpbCBzZXJ2aXppbyBhc3NvY2lhdG8gYWwgcGx1Z2luXG5wcm90by5nZXRQbHVnaW5TZXJ2aWNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNlcnZpY2Vcbn07XG5cbi8vc2V0dGFyZSB1biBzZXJ2aXppb1xucHJvdG8uc2V0UGx1Z2luU2VydmljZSA9IGZ1bmN0aW9uKFNlcnZpY2UpIHtcbiAgdGhpcy5zZXJ2aWNlID0gU2VydmljZTtcbn07XG5cbi8vcmVjdXBlcm8gaWwgbm9tZVxucHJvdG8uZ2V0TmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5uYW1lO1xufTtcblxuLy9zZXR0byBpbCBub21lXG5wcm90by5zZXROYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xufTtcblxuLy9yZWN1cGVybyBsYSBjb25maWd1cmF6aW9uZSBkZWwgcGx1Z2luIGRhbCByZWdpc3RybyBkZWkgcGx1Z2luc1xucHJvdG8uZ2V0UGx1Z2luQ29uZmlnID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBQbHVnaW5zUmVnaXN0cnkuZ2V0UGx1Z2luQ29uZmlnKHRoaXMubmFtZSk7XG59O1xuXG4vL3ZlcmlmaWNhIGxhIGNvbXBhdGliaWxpw6AgY29uIGlsIHByb2dldHRvIGNvcnJlbnRlXG5wcm90by5pc0N1cnJlbnRQcm9qZWN0Q29tcGF0aWJsZSA9IGZ1bmN0aW9uKHByb2plY3RJZCkge1xuICB2YXIgcHJvamVjdCA9IFByb2plY3RzUmVnaXN0cnkuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgcmV0dXJuIHByb2plY3RJZCA9PSBwcm9qZWN0LmdldEdpZCgpO1xufTtcblxuLy9yZWdpc3RyYXppb25lIHBsdWdpbiBzZSBjb21wYXRpYmlsZSBjb24gaWwgcHJvZ2V0dG8gY29ycmVudGVcbnByb3RvLnJlZ2lzdGVyUGx1Z2luID0gZnVuY3Rpb24ocHJvamVjdElkKSB7XG4gIGlmICh0aGlzLmlzQ3VycmVudFByb2plY3RDb21wYXRpYmxlKHByb2plY3RJZCkpIHtcbiAgICBQbHVnaW5zUmVnaXN0cnkucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8gc2V0dXAgZGVsbCdpbnRlcmZhY2NpYVxucHJvdG8uc2V0dXBHdWkgPSBmdW5jdGlvbigpIHtcbiAgLy9hbCBtb21lbnRvIG5pZW50ZSBub24gc28gc2UgdmVycsOgIHVzYXRhXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBsdWdpbjtcbiIsInZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmNvbmZpZyA9IG51bGw7XG4gIC8vIHVuIGRvbWFuaSBxdWVzdG8gc2Fyw6AgZGluYW1pY29cbiAgdGhpcy5fcGx1Z2lucyA9IHt9O1xuXG4gIHRoaXMuc2V0dGVycyA9IHtcbiAgICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICAgIGlmICghc2VsZi5fcGx1Z2luc1twbHVnaW4ubmFtZV0pIHtcbiAgICAgICAgc2VsZi5fcGx1Z2luc1twbHVnaW4ubmFtZV0gPSBwbHVnaW47XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVnaXN0cmF0byBwbHVnaW4gXCIrcGx1Z2luLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIGJhc2UodGhpcyk7XG4gIFxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5wbHVnaW5zQmFzZVVybCA9IG9wdGlvbnMucGx1c2luZ0Jhc2VVcmxcbiAgICB0aGlzLnBsdWdpbnNDb25maWdzID0gb3B0aW9ucy5wbHVnaW5zQ29uZmlncztcbiAgICBfLmZvckVhY2godGhpcy5wbHVnaW5zQ29uZmlncyxmdW5jdGlvbihwbHVnaW5Db25maWcsbmFtZSl7XG4gICAgICBzZWxmLl9zZXR1cChuYW1lLHBsdWdpbkNvbmZpZyk7XG4gICAgfSlcbiAgfTtcbiAgXG4gIHRoaXMuX3NldHVwID0gZnVuY3Rpb24obmFtZSxwbHVnaW5Db25maWcpIHtcblxuICAgIGlmIChwbHVnaW5Db25maWcpe1xuICAgICAgdmFyIHVybCA9IHRoaXMucGx1Z2luc0Jhc2VVcmwrJ3BsdWdpbnMvJytuYW1lKycvcGx1Z2luLmpzJztcbiAgICAgICRzY3JpcHQodXJsKTtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLmdldFBsdWdpbkNvbmZpZyA9IGZ1bmN0aW9uKHBsdWdpbk5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5wbHVnaW5zQ29uZmlnc1twbHVnaW5OYW1lXTtcbiAgfTtcblxufVxuXG5pbmhlcml0KFBsdWdpbnNSZWdpc3RyeSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBQbHVnaW5zUmVnaXN0cnlcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIEFwcGxpY2F0aW9uU2VydmljZSA9IHJlcXVpcmUoJ2NvcmUvYXBwbGljYXRpb25zZXJ2aWNlJyk7XG5cbnZhciBQcm9qZWN0TGF5ZXIgPSByZXF1aXJlKCcuL3Byb2plY3RsYXllcicpO1xuXG5mdW5jdGlvbiBQcm9qZWN0KHByb2plY3RDb25maWcpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBcbiAgLyogc3RydXR0dXJhIG9nZ2V0dG8gJ3Byb2plY3QnXG4gIHtcbiAgICBpZCxcbiAgICB0eXBlLFxuICAgIGdpZCxcbiAgICBuYW1lLFxuICAgIGNycyxcbiAgICBleHRlbnQsXG4gICAgbGF5ZXJzdHJlZSxcbiAgICBvdmVydmlld3Byb2plY3RnaWRcbiAgfVxuICAqL1xuICB0aGlzLnN0YXRlID0gcHJvamVjdENvbmZpZztcbiAgXG4gIHRoaXMuX2xheWVycyA9IHt9O1xuICBmdW5jdGlvbiB0cmF2ZXJzZShvYmope1xuICAgIF8uZm9ySW4ob2JqLCBmdW5jdGlvbiAobGF5ZXJDb25maWcsIGtleSkge1xuICAgICAgICAvL3ZlcmlmaWNhIGNoZSBpbCB2YWxvcmUgZGVsbCdpZCBub24gc2lhIG51bGxvXG4gICAgICAgIGlmICghXy5pc05pbChsYXllckNvbmZpZy5pZCkpIHtcbiAgICAgICAgICAgIHZhciBsYXllciA9IHNlbGYuYnVpbGRQcm9qZWN0TGF5ZXIobGF5ZXJDb25maWcpO1xuICAgICAgICAgICAgc2VsZi5fbGF5ZXJzW2xheWVyLmdldElkKCldID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzTmlsKGxheWVyQ29uZmlnLm5vZGVzKSkge1xuICAgICAgICAgICAgdHJhdmVyc2UobGF5ZXJDb25maWcubm9kZXMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gIH1cbiAgdHJhdmVyc2UocHJvamVjdENvbmZpZy5sYXllcnN0cmVlKTtcbiAgXG4gIC8qdmFyIGV2ZW50VHlwZSA9ICdwcm9qZWN0c2V0JztcbiAgaWYgKGRvc3dpdGNoICYmIGRvc3dpdGNoID09PSB0cnVlKSB7XG4gICAgZXZlbnRUeXBlID0gJ3Byb2plY3Rzd2l0Y2gnO1xuICB9XG4gIHRoaXMuZW1pdChldmVudFR5cGUpOyovXG4gIFxuICB0aGlzLnNldHRlcnMgPSB7XG4gICAgc2V0TGF5ZXJzVmlzaWJsZTogZnVuY3Rpb24obGF5ZXJzSWRzLHZpc2libGUpe1xuICAgICAgXy5mb3JFYWNoKGxheWVyc0lkcyxmdW5jdGlvbihsYXllcklkKXtcbiAgICAgICAgc2VsZi5nZXRMYXllckJ5SWQobGF5ZXJJZCkuc3RhdGUudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICB9KVxuICAgIH0sXG4gICAgc2V0QmFzZUxheWVyOiBmdW5jdGlvbihpZCl7XG4gICAgICBfLmZvckVhY2goc2VsZi5zdGF0ZS5iYXNlTGF5ZXJzLGZ1bmN0aW9uKGJhc2VMYXllcil7XG4gICAgICAgIGJhc2VMYXllci52aXNpYmxlID0gKGJhc2VMYXllci5pZCA9PSBpZCk7XG4gICAgICB9KVxuICAgIH0sXG4gICAgc2V0TGF5ZXJTZWxlY3RlZDogZnVuY3Rpb24obGF5ZXJJZCxzZWxlY3RlZCl7XG4gICAgICBfLmZvckVhY2godGhpcy5fbGF5ZXJzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgICAgbGF5ZXIuc3RhdGUuc2VsZWN0ZWQgPSAoKGxheWVySWQgPT0gbGF5ZXIuc3RhdGUuaWQpICYmIHNlbGVjdGVkKSB8fCBmYWxzZTtcbiAgICAgIH0pXG4gICAgfVxuICB9O1xuXG4gIGJhc2UodGhpcyk7XG59XG5pbmhlcml0KFByb2plY3QsRzNXT2JqZWN0KTtcblxudmFyIHByb3RvID0gUHJvamVjdC5wcm90b3R5cGU7XG5cbnByb3RvLmJ1aWxkUHJvamVjdExheWVyID0gZnVuY3Rpb24obGF5ZXJDb25maWcpIHtcbiAgdmFyIGxheWVyID0gbmV3IFByb2plY3RMYXllcihsYXllckNvbmZpZyk7XG4gIGxheWVyLnNldFByb2plY3QodGhpcyk7XG4gIFxuICAvLyBhZ2dpdW5nbyBwcm9wcmlldMOgIG5vbiBvdHRlbnV0ZSBkYWxsYSBjb25zZmlndXJhemlvbmVcbiAgbGF5ZXIuc3RhdGUuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgbGF5ZXIuc3RhdGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgXG4gIHJldHVybiBsYXllcjtcbn07XG5cbnByb3RvLmdldEdpZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5naWQ7XG59O1xuXG5wcm90by5nZXRPdmVydmlld1Byb2plY3RHaWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUub3ZlcnZpZXdwcm9qZWN0Z2lkLmdpZDtcbn07XG5cbnByb3RvLmdldExheWVyc0RpY3QgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgdmFyIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBmaWx0ZXJRdWVyeWFibGUgPSBvcHRpb25zLlFVRVJZQUJMRTtcbiAgXG4gIHZhciBmaWx0ZXJWaXNpYmxlID0gb3B0aW9ucy5WSVNJQkxFO1xuICBcbiAgdmFyIGZpbHRlclNlbGVjdGVkID0gb3B0aW9ucy5TRUxFQ1RFRDtcbiAgdmFyIGZpbHRlclNlbGVjdGVkT3JBbGwgPSBvcHRpb25zLlNFTEVDVEVET1JBTEw7XG4gIFxuICBpZiAoZmlsdGVyU2VsZWN0ZWRPckFsbCkge1xuICAgIGZpbHRlclNlbGVjdGVkID0gbnVsbDtcbiAgfVxuICBcbiAgaWYgKF8uaXNVbmRlZmluZWQoZmlsdGVyUXVlcnlhYmxlKSAmJiBfLmlzVW5kZWZpbmVkKGZpbHRlclZpc2libGUpICYmIF8uaXNVbmRlZmluZWQoZmlsdGVyU2VsZWN0ZWQpICYmIF8uaXNVbmRlZmluZWQoZmlsdGVyU2VsZWN0ZWRPckFsbCkpIHtcbiAgICByZXR1cm4gdGhpcy5fbGF5ZXJzO1xuICB9XG4gIFxuICB2YXIgbGF5ZXJzID0gdGhpcy5fbGF5ZXJzO1xuICBcbiAgaWYgKGZpbHRlclF1ZXJ5YWJsZSkge1xuICAgIGxheWVycyA9IF8uZmlsdGVyKGxheWVycyxmdW5jdGlvbihsYXllcil7XG4gICAgICByZXR1cm4gZmlsdGVyUXVlcnlhYmxlICYmIGxheWVyLmlzUXVlcnlhYmxlKCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIGlmIChmaWx0ZXJWaXNpYmxlKSB7XG4gICAgbGF5ZXJzID0gXy5maWx0ZXIobGF5ZXJzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgIHJldHVybiBmaWx0ZXJWaXNpYmxlICYmIGxheWVyLmlzVmlzaWJsZSgpO1xuICAgIH0pO1xuICB9XG4gIFxuICBpZiAoZmlsdGVyU2VsZWN0ZWQpIHtcbiAgICBsYXllcnMgPSBfLmZpbHRlcihsYXllcnMsZnVuY3Rpb24obGF5ZXIpe1xuICAgICAgcmV0dXJuIGZpbHRlclNlbGVjdGVkICYmIGxheWVyLmlzU2VsZWN0ZWQoKTtcbiAgICB9KTtcbiAgfVxuICBcbiAgaWYgKGZpbHRlclNlbGVjdGVkT3JBbGwpIHtcbiAgICB2YXIgX2xheWVycyA9IGxheWVycztcbiAgICBsYXllcnMgPSBfLmZpbHRlcihsYXllcnMsZnVuY3Rpb24obGF5ZXIpe1xuICAgICAgcmV0dXJuIGxheWVyLmlzU2VsZWN0ZWQoKTtcbiAgICB9KTtcbiAgICBsYXllcnMgPSBsYXllcnMubGVuZ3RoID8gbGF5ZXJzIDogX2xheWVycztcbiAgfVxuICBcbiAgcmV0dXJuIGxheWVycztcbn07XG5cbi8vIHJpdG9ybmEgbCdhcnJheSBkZWkgbGF5ZXJzIChjb24gb3B6aW9uaSBkaSByaWNlcmNhKVxucHJvdG8uZ2V0TGF5ZXJzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICB2YXIgbGF5ZXJzID0gdGhpcy5nZXRMYXllcnNEaWN0KG9wdGlvbnMpO1xuICByZXR1cm4gXy52YWx1ZXMobGF5ZXJzKTtcbn1cblxucHJvdG8uZ2V0TGF5ZXJCeUlkID0gZnVuY3Rpb24obGF5ZXJJZCkge1xuICByZXR1cm4gdGhpcy5nZXRMYXllcnNEaWN0KClbbGF5ZXJJZF07XG59O1xuXG5wcm90by5nZXRMYXllckJ5TmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGxheWVyID0gbnVsbDtcbiAgXy5mb3JFYWNoKHRoaXMuZ2V0TGF5ZXJzKCksZnVuY3Rpb24obGF5ZXIpe1xuICAgIGlmIChsYXllci5nZXROYW1lKCkgPT0gbmFtZSl7XG4gICAgICBsYXllciA9IF9sYXllcjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGF5ZXI7XG59O1xuXG5wcm90by5nZXRMYXllckF0dHJpYnV0ZXMgPSBmdW5jdGlvbihsYXllcklkKXtcbiAgcmV0dXJuIHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpLmdldEF0dHJpYnV0ZXMoKTtcbn07XG5cbnByb3RvLmdldExheWVyQXR0cmlidXRlTGFiZWwgPSBmdW5jdGlvbihsYXllcklkLG5hbWUpe1xuICByZXR1cm4gdGhpcy5nZXRMYXllckJ5SWQobGF5ZXJJZCkuZ2V0QXR0cmlidXRlTGFiZWwobmFtZSk7XG59O1xuXG5wcm90by50b2dnbGVMYXllciA9IGZ1bmN0aW9uKGxheWVySWQsdmlzaWJsZSl7XG4gIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpO1xuICB2YXIgdmlzaWJsZSA9IHZpc2libGUgfHwgIWxheWVyLnN0YXRlLnZpc2libGU7XG4gIHRoaXMuc2V0TGF5ZXJzVmlzaWJsZShbbGF5ZXJJZF0sdmlzaWJsZSk7XG59O1xuXG5wcm90by50b2dnbGVMYXllcnMgPSBmdW5jdGlvbihsYXllcnNJZHMsdmlzaWJsZSl7XG4gIHRoaXMuc2V0TGF5ZXJzVmlzaWJsZShsYXllcnNJZHMsdmlzaWJsZSk7XG59O1xuXG5wcm90by5zZWxlY3RMYXllciA9IGZ1bmN0aW9uKGxheWVySWQpe1xuICB0aGlzLnNldExheWVyU2VsZWN0ZWQobGF5ZXJJZCx0cnVlKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0TGF5ZXIgPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIHRoaXMuc2V0TGF5ZXJTZWxlY3RlZChsYXllcklkLGZhbHNlKTtcbn07XG5cbnByb3RvLmdldENycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5jcnM7XG59XG5cbnByb3RvLmdldEluZm9Gb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdhcHBsaWNhdGlvbi92bmQub2djLmdtbCc7XG59O1xuXG5wcm90by5nZXRXbXNVcmwgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5zdGF0ZS5XTVNVcmw7XG59O1xuXG5wcm90by5nZXRMZWdlbmRVcmwgPSBmdW5jdGlvbihsYXllcil7XG4gIHZhciB1cmwgPSB0aGlzLmdldFdtc1VybCgpO1xuICBzZXAgPSAodXJsLmluZGV4T2YoJz8nKSA+IC0xKSA/ICcmJyA6ICc/JztcbiAgcmV0dXJuIHRoaXMuZ2V0V21zVXJsKCkrc2VwKydTRVJWSUNFPVdNUyZWRVJTSU9OPTEuMy4wJlJFUVVFU1Q9R2V0TGVnZW5kR3JhcGhpYyZTTERfVkVSU0lPTj0xLjEuMCZGT1JNQVQ9aW1hZ2UvcG5nJlRSQU5TUEFSRU5UPXRydWUmSVRFTUZPTlRDT0xPUj13aGl0ZSZMQVlFUlRJVExFPUZhbHNlJklURU1GT05UU0laRT0xMCZMQVlFUj0nK2xheWVyLm5hbWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3Q7XG4iLCJ2YXIgR2VvbWV0cnlUeXBlcyA9IHJlcXVpcmUoJ2NvcmUvZ2VvbWV0cnkvZ2VvbWV0cnknKS5HZW9tZXRyeVR5cGVzO1xuXG52YXIgQ0FQQUJJTElUSUVTID0ge1xuICBRVUVSWTogMSxcbiAgRURJVDogMlxufTtcblxudmFyIEVESVRPUFMgPSB7XG4gIElOU0VSVDogMSxcbiAgVVBEQVRFOiAyLFxuICBERUxFVEU6IDRcbn07XG5cbmZ1bmN0aW9uIFByb2plY3RMYXllcihzdGF0ZSkge1xuICAvKnRoaXMuc3RhdGUgPSB7XG4gICAgZmllbGRzOiBvcHRpb25zLmZpZWxkcyxcbiAgICBiYm94OiBvcHRpb25zLmJib3gsXG4gICAgY2FwYWJpbGl0aWVzOiBvcHRpb25zLmNhcGFiaWxpdGllcyxcbiAgICBjcnM6IG9wdGlvbnMuY3JzLFxuICAgIGRpc2FibGVkOiBvcHRpb25zLmRpc2FibGVkLFxuICAgIGVkaXRvcHM6IG9wdGlvbnMuZWRpdG9wcyxcbiAgICBnZW9tZXRyeXR5cGU6IG9wdGlvbnMuZ2VvbWV0cnl0eXBlLFxuICAgIGlkOiBvcHRpb25zLmlkLFxuICAgIGluZm9mb3JtYXQ6IG9wdGlvbnMuaW5mb2Zvcm1hdCxcbiAgICBpbmZvdXJsOiBvcHRpb25zLmluZm91cmwsXG4gICAgbWF4c2NhbGU6IG9wdGlvbnMubWF4c2NhbGUsXG4gICAgbWluc2NhbGU6IG9wdGlvbnMubWluc2NhbGUsXG4gICAgbXVsdGlsYXllcjogb3B0aW9ucy5tdWx0aWxheWVyLFxuICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICBvcmlnbmFtZTogb3B0aW9ucy5vcmlnbmFtZSxcbiAgICByZWxhdGlvbnM6IG9wdGlvbnMucmVsYXRpb25zLFxuICAgIHNjYWxlYmFzZWR2aXNpYmlsaXR5OiBvcHRpb25zLnNjYWxlYmFzZWR2aXNpYmlsaXR5LFxuICAgIHNlbGVjdGVkOiBvcHRpb25zLnNlbGVjdGVkLFxuICAgIHNlcnZlcnR5cGU6IG9wdGlvbnMuc2VydmVydHlwZSxcbiAgICBzb3VyY2U6IG9wdGlvbnMuc291cmNlLFxuICAgIHRpdGxlOiBvcHRpb25zLnRpdGxlLFxuICAgIHZpc2libGU6IG9wdGlvbnMudmlzaWJsZSxcbiAgICBzZWxlY3RlZDogb3B0aW9ucy5zZWxlY3RlZCB8IGZhbHNlLFxuICAgIGRpc2FibGVkOiBvcHRpb25zLmRpc2FibGVkIHwgZmFsc2VcbiAgfSovXG4gIFxuICAvLyBsbyBzdGF0byDDqCBzaW5jcm9uaXp6YXRvIGNvbiBxdWVsbG8gZGVsIGxheWVyc3RyZWVcbiAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICBcbiAgdGhpcy5fcHJvamVjdCA9IG51bGw7XG59O1xuXG52YXIgcHJvdG8gPSBQcm9qZWN0TGF5ZXIucHJvdG90eXBlO1xuXG5wcm90by5nZXRQcm9qZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9wcm9qZWN0O1xufTtcblxucHJvdG8uc2V0UHJvamVjdCA9IGZ1bmN0aW9uKHByb2plY3QpIHtcbiAgdGhpcy5fcHJvamVjdCA9IHByb2plY3Rcbn07XG5cbnByb3RvLmdldElkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmlkO1xufTtcblxucHJvdG8uZ2V0TmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5uYW1lO1xufTtcblxucHJvdG8uZ2V0T3JpZ05hbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUub3JpZ25hbWU7XG59O1xuXG5wcm90by5nZXRHZW9tZXRyeVR5cGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuZ2VvbWV0cnl0eXBlO1xufTtcblxucHJvdG8uZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5maWVsZHM7XG59O1xuXG5wcm90by5nZXRBdHRyaWJ1dGVMYWJlbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGxhYmVsO1xuICBfLmZvckVhY2godGhpcy5nZXRBdHRyaWJ1dGVzKCksZnVuY3Rpb24oZmllbGQpe1xuICAgIGlmIChmaWVsZC5uYW1lID09IG5hbWUpe1xuICAgICAgbGFiZWwgPSBmaWVsZC5sYWJlbDtcbiAgICB9XG4gIH0pXG4gIHJldHVybiBsYWJlbDtcbn07XG5cbnByb3RvLmlzU2VsZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWQ7XG59O1xuXG5wcm90by5pc0Rpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmRpc2FibGVkO1xufTtcblxucHJvdG8uaXNRdWVyeWFibGUgPSBmdW5jdGlvbigpe1xuICB2YXIgcXVlcnlFbmFibGVkID0gZmFsc2U7XG4gIHZhciBxdWVyeWFibGVGb3JDYWJhYmlsaXRpZXMgPSAodGhpcy5zdGF0ZS5jYXBhYmlsaXRpZXMgJiYgKHRoaXMuc3RhdGUuY2FwYWJpbGl0aWVzICYmIENBUEFCSUxJVElFUy5RVUVSWSkpID8gdHJ1ZSA6IGZhbHNlO1xuICBpZiAocXVlcnlhYmxlRm9yQ2FiYWJpbGl0aWVzKSB7XG4gICAgLy8gw6ggaW50ZXJyb2dhYmlsZSBzZSB2aXNpYmlsZSBlIG5vbiBkaXNhYmlsaXRhdG8gKHBlciBzY2FsYSkgb3BwdXJlIHNlIGludGVycm9nYWJpbGUgY29tdW5xdWUgKGZvcnphdG8gZGFsbGEgcHJvcHJpZXTDoCBpbmZvd2hlbm5vdHZpc2libGUpXG4gICAgcXVlcnlFbmFibGVkID0gKHRoaXMuc3RhdGUudmlzaWJsZSAmJiAhdGhpcy5zdGF0ZS5kaXNhYmxlZCk7XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMuc3RhdGUuaW5mb3doZW5ub3R2aXNpYmxlKSAmJiAodGhpcy5zdGF0ZS5pbmZvd2hlbm5vdHZpc2libGUgPT09IHRydWUpKSB7XG4gICAgICBxdWVyeUVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcXVlcnlFbmFibGVkO1xufTtcblxucHJvdG8uaXNWaXNpYmxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLnZpc2libGU7XG59XG5cbnByb3RvLmdldFF1ZXJ5TGF5ZXJOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBxdWVyeUxheWVyTmFtZTtcbiAgaWYgKHRoaXMuc3RhdGUuaW5mb2xheWVyICYmIHRoaXMuc3RhdGUuaW5mb2xheWVyICE9ICcnKSB7XG4gICAgcXVlcnlMYXllck5hbWUgPSB0aGlzLnN0YXRlLmluZm9sYXllcjtcbiAgfVxuICBlbHNlIHtcbiAgICBxdWVyeUxheWVyTmFtZSA9IHRoaXMuc3RhdGUubmFtZTtcbiAgfVxuICByZXR1cm4gcXVlcnlMYXllck5hbWU7XG59O1xuXG5wcm90by5nZXRTZXJ2ZXJUeXBlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnN0YXRlLnNlcnZlcnR5cGUgJiYgdGhpcy5zdGF0ZS5zZXJ2ZXJ0eXBlICE9ICcnKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VydmVydHlwZTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gUHJvamVjdExheWVyLlNlcnZlclR5cGVzLlFHSVM7XG4gIH1cbn07XG5cbnByb3RvLmdldENycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRQcm9qZWN0KCkuZ2V0Q3JzKCk7XG59XG5cbnByb3RvLmlzRXh0ZXJuYWxXTVMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICh0aGlzLnN0YXRlLnNvdXJjZSAmJiB0aGlzLnN0YXRlLnNvdXJjZS51cmwpO1xufTtcblxucHJvdG8uZ2V0V01TTGF5ZXJOYW1lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsYXllck5hbWUgPSB0aGlzLnN0YXRlLm5hbWU7XG4gIGlmICh0aGlzLnN0YXRlLnNvdXJjZSAmJiB0aGlzLnN0YXRlLnNvdXJjZS5sYXllcnMpe1xuICAgIGxheWVyTmFtZSA9IHRoaXMuc3RhdGUuc291cmNlLmxheWVycztcbiAgfTtcbiAgcmV0dXJuIGxheWVyTmFtZTtcbn07XG5cbnByb3RvLmdldFF1ZXJ5VXJsID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnN0YXRlLmluZm91cmwgJiYgdGhpcy5zdGF0ZS5pbmZvdXJsICE9ICcnKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaW5mb3VybDtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9qZWN0KCkuZ2V0V21zVXJsKCk7XG4gIH1cbn07XG5cbnByb3RvLnNldFF1ZXJ5VXJsID0gZnVuY3Rpb24ocXVlcnlVcmwpIHtcbiAgdGhpcy5zdGF0ZS5pbmZvcnVybCA9IHF1ZXJ5VXJsO1xufTtcblxucHJvdG8uZ2V0SW5mb0Zvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5zdGF0ZS5pbmZvZm9ybWF0ICYmIHRoaXMuc3RhdGUuaW5mb2Zvcm1hdCAhPSAnJykge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmluZm9mb3JtYXQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvamVjdCgpLmdldEluZm9Gb3JtYXQoKTtcbiAgfVxufTtcblxucHJvdG8uc2V0SW5mb0Zvcm1hdCA9IGZ1bmN0aW9uKGluZm9Gb3JtYXQpIHtcbiAgdGhpcy5zdGF0ZS5pbmZvZm9ybWF0ID0gaW5mb0Zvcm1hdDtcbn07XG5cbnByb3RvLmdldFdtc1VybCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdXJsO1xuICBpZiAodGhpcy5zdGF0ZS5zb3VyY2UgJiYgdGhpcy5zdGF0ZS5zb3VyY2UudHlwZSA9PSAnd21zJyAmJiB0aGlzLnN0YXRlLnNvdXJjZS51cmwpe1xuICAgIHVybCA9IHRoaXMuc3RhdGUuc291cmNlLnVybFxuICB9XG4gIGVsc2Uge1xuICAgIHVybCA9IHRoaXMuZ2V0UHJvamVjdCgpLmdldFdtc1VybCgpO1xuICB9XG4gIHJldHVybiB1cmw7XG59O1xuXG5wcm90by5nZXRMZWdlbmRVcmwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHVybCA9IHRoaXMuZ2V0V21zVXJsKCk7XG4gIHNlcCA9ICh1cmwuaW5kZXhPZignPycpID4gLTEpID8gJyYnIDogJz8nO1xuICByZXR1cm4gdGhpcy5nZXRXbXNVcmwoKStzZXArJ1NFUlZJQ0U9V01TJlZFUlNJT049MS4zLjAmUkVRVUVTVD1HZXRMZWdlbmRHcmFwaGljJlNMRF9WRVJTSU9OPTEuMS4wJkZPUk1BVD1pbWFnZS9wbmcmVFJBTlNQQVJFTlQ9dHJ1ZSZJVEVNRk9OVENPTE9SPXdoaXRlJkxBWUVSVElUTEU9RmFsc2UmSVRFTUZPTlRTSVpFPTEwJkxBWUVSPScrdGhpcy5nZXRXTVNMYXllck5hbWUoKTtcbn07XG5cblByb2plY3RMYXllci5TZXJ2ZXJUeXBlcyA9IHtcbiAgT0dDOiBcIk9HQ1wiLFxuICBRR0lTOiBcIlFHSVNcIixcbiAgTWFwc2VydmVyOiBcIk1hcHNlcnZlclwiLFxuICBHZW9zZXJ2ZXI6IFwiR2Vvc2VydmVyXCIsXG4gIEFyY0dJUzogXCJBcmNHSVNcIlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9qZWN0TGF5ZXI7XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciByZXNvbHZlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgcmVqZWN0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlamVjdDtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIFByb2plY3QgPSByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdCcpO1xuXG5cbi8qIHNlcnZpY2VcbkZ1bnppb25lIGNvc3RydXR0b3JlIGNvbnRlbnRlbnRlIHRyZSBwcm9wcmlldGEnOlxuICAgIHNldHVwOiBtZXRvZG8gZGkgaW5pemlhbGl6emF6aW9uZVxuICAgIGdldExheWVyc1N0YXRlOiByaXRvcm5hIGwnb2dnZXR0byBMYXllcnNTdGF0ZVxuICAgIGdldExheWVyc1RyZWU6IHJpdG9ybmEgbCdhcnJheSBsYXllcnNUcmVlIGRhbGwnb2dnZXR0byBMYXllcnNTdGF0ZVxuKi9cblxuLy8gUHVibGljIGludGVyZmFjZVxuZnVuY3Rpb24gUHJvamVjdHNSZWdpc3RyeSgpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAvL3RpcG8gZGkgcHJvZ2V0dG9cbiAgdGhpcy5wcm9qZWN0VHlwZSA9IG51bGw7XG4gIFxuICB0aGlzLnNldHRlcnMgPSB7XG4gICAgc2V0Q3VycmVudFByb2plY3Q6IGZ1bmN0aW9uKHByb2plY3Qpe1xuICAgICAgc2VsZi5zdGF0ZS5jdXJyZW50UHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICB9O1xuICAvL3N0YXRvIGRlbCByZWdpc3RybyBwcm9nZXR0aVxuICB0aGlzLnN0YXRlID0ge1xuICAgIGJhc2VMYXllcnM6IHt9LFxuICAgIG1pblNjYWxlOiBudWxsLFxuICAgIG1heHNjYWxlOiBudWxsLFxuICAgIGN1cnJlbnRQcm9qZWN0OiBudWxsXG4gIH07XG4gIFxuICAvLyB0dXR0ZSBsZSBjb25maWd1cmF6aW9uaSBkaSBiYXNlIGRlaSBwcm9nZXR0aSwgbWEgZGkgY3VpIG5vbiDDqCBkZXR0byBjaGVcbiAgLy8gc2lhIGFuY29yYSBkaXNwb25pYmlsZSBsJ2lzdGFuemEgKGxhenkgbG9hZGluZylcbiAgdGhpcy5fcGVuZGluZ1Byb2plY3RzID0gW107XG4gIHRoaXMuX3Byb2plY3RzID0ge307XG4gIFxuICBiYXNlKHRoaXMpO1xufVxuaW5oZXJpdChQcm9qZWN0c1JlZ2lzdHJ5LCBHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBQcm9qZWN0c1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxucHJvdG8uaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgLy92ZXJpZmljbyBzZSDDqCBnacOgIHN0YXRvIGluaXppbGl6emF0b1xuICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpe1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIC8vc2FsdmEgbGEgY29uZmlndXJhemlvbmVcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAvL3NldHRhIGxvIHN0YXRlXG4gICAgdGhpcy5zZXR1cFN0YXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvamVjdChjb25maWcuaW5pdHByb2plY3QpXG4gICAgLnRoZW4oZnVuY3Rpb24ocHJvamVjdCkge1xuICAgICAgc2VsZi5zZXRDdXJyZW50UHJvamVjdChwcm9qZWN0KTtcbiAgICAgIC8vYWdnaXVudG8gdGlwbyBwcm9nZXR0b1xuICAgICAgc2VsZi5zZXRQcm9qZWN0VHlwZShwcm9qZWN0LnN0YXRlLnR5cGUpO1xuICAgIH0pO1xuICB9XG59O1xuXG5wcm90by5zZXRQcm9qZWN0VHlwZSA9IGZ1bmN0aW9uKHByb2plY3RUeXBlKSB7XG4gICB0aGlzLnByb2plY3RUeXBlID0gcHJvamVjdFR5cGU7XG59O1xuXG5wcm90by5zZXR1cFN0YXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBcbiAgc2VsZi5zdGF0ZS5iYXNlTGF5ZXJzID0gc2VsZi5jb25maWcuYmFzZWxheWVycztcbiAgc2VsZi5zdGF0ZS5taW5TY2FsZSA9IHNlbGYuY29uZmlnLm1pbnNjYWxlO1xuICBzZWxmLnN0YXRlLm1heFNjYWxlID0gc2VsZi5jb25maWcubWF4c2NhbGU7XG4gIHNlbGYuc3RhdGUuY3JzID0gc2VsZi5jb25maWcuY3JzO1xuICBzZWxmLnN0YXRlLnByb2o0ID0gc2VsZi5jb25maWcucHJvajQ7XG5cbiAgLy8gc2V0dG8gIHF1YWxlIHByb2dldHRvIGRldmUgZXNzZXJlIGltcG9zdGF0byBjb21lIG92ZXJ2aWV3XG4gIC8vcXVlc3RvIMOoIHNldHRhdG8gZGEgZGphbmdvLWFkbWluXG4gIHZhciBvdmVyVmlld1Byb2plY3QgPSAoc2VsZi5jb25maWcub3ZlcnZpZXdwcm9qZWN0ICYmIHNlbGYuY29uZmlnLm92ZXJ2aWV3cHJvamVjdC5naWQpID8gc2VsZi5jb25maWcub3ZlcnZpZXdwcm9qZWN0IDogbnVsbDtcbiAgLy9wZXIgb2duaSBwcm9nZXR0byBjaWNsbyBlIHNldHRvIHR1dHRpIGdsaSBhdHRyaWJ1dGkgY29tdW5pXG4gIC8vIGNvbWUgaSBiYXNlIGxheWVycyBldGMgLi5cbiAgc2VsZi5jb25maWcucHJvamVjdHMuZm9yRWFjaChmdW5jdGlvbihwcm9qZWN0KXtcbiAgICBwcm9qZWN0LmJhc2VsYXllcnMgPSBzZWxmLmNvbmZpZy5iYXNlbGF5ZXJzO1xuICAgIHByb2plY3QubWluc2NhbGUgPSBzZWxmLmNvbmZpZy5taW5zY2FsZTtcbiAgICBwcm9qZWN0Lm1heHNjYWxlID0gc2VsZi5jb25maWcubWF4c2NhbGU7XG4gICAgcHJvamVjdC5jcnMgPSBzZWxmLmNvbmZpZy5jcnM7XG4gICAgcHJvamVjdC5wcm9qNCA9IHNlbGYuY29uZmlnLnByb2o0O1xuICAgIHByb2plY3Qub3ZlcnZpZXdwcm9qZWN0Z2lkID0gb3ZlclZpZXdQcm9qZWN0O1xuICAgIC8vYWdnaXVuZ28gdHV0dGkgaSBwcm9nZXR0aSBhaSBwZW5kaW5nIHByb2plY3RcbiAgICBzZWxmLl9wZW5kaW5nUHJvamVjdHMucHVzaChwcm9qZWN0KTtcbiAgfSk7XG59O1xuXG5wcm90by5nZXRQcm9qZWN0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wcm9qZWN0VHlwZTtcbn07XG5cbnByb3RvLmdldFBlbmRpbmdQcm9qZWN0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcGVuZGluZ1Byb2plY3RzO1xufTtcblxucHJvdG8uZ2V0Q3VycmVudFByb2plY3QgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5zdGF0ZS5jdXJyZW50UHJvamVjdDtcbn07XG5cbi8vIG90dGVuZ28gaWwgcHJvZ2V0dG8gZGFsIHN1byBnaWQ7XG4vLyByaXRvcm5hIHVuYSBwcm9taXNlIG5lbCBjYXNvIG5vbiBmb3NzZSBzdGF0byBhbmNvcmEgc2NhcmljYXRvXG4vLyBpbCBjb25maWcgY29tcGxldG8gKGUgcXVpbmRpIG5vbiBzaWEgYW5jb3JhIGlzdGFuemlhdG8gUHJvamVjdClcbnByb3RvLmdldFByb2plY3QgPSBmdW5jdGlvbihwcm9qZWN0R2lkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGQgPSAkLkRlZmVycmVkKCk7XG4gIHZhciBwZW5kaW5nUHJvamVjdCA9IGZhbHNlO1xuICB2YXIgcHJvamVjdCA9IG51bGw7XG4gIC8vIHNjb3JybyBhdHJhdmVyc28gaSBwZW5kaW5nIHByb2plY3QgY2hlIGNvbnRlbmdvbm8gb2dnZXR0aVxuICAvLyBkaSBjb25maWd1cmF6aW9uZSBkZWkgcHJvZ2V0dGkgZGVsIGdydXBwb1xuICB0aGlzLl9wZW5kaW5nUHJvamVjdHMuZm9yRWFjaChmdW5jdGlvbihfcGVuZGluZ1Byb2plY3QpIHtcbiAgICBpZiAoX3BlbmRpbmdQcm9qZWN0LmdpZCA9PSBwcm9qZWN0R2lkKSB7XG4gICAgICBwZW5kaW5nUHJvamVjdCA9IF9wZW5kaW5nUHJvamVjdDtcbiAgICAgIHByb2plY3QgPSBzZWxmLl9wcm9qZWN0c1twcm9qZWN0R2lkXTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmdQcm9qZWN0KSB7XG4gICAgcmV0dXJuIHJlamVjdChcIlByb2plY3QgZG9lc24ndCBleGlzdFwiKTtcbiAgfVxuXG4gIGlmIChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIGQucmVzb2x2ZShwcm9qZWN0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0UHJvamVjdEZ1bGxDb25maWcocGVuZGluZ1Byb2plY3QpXG4gICAgLnRoZW4oZnVuY3Rpb24ocHJvamVjdEZ1bGxDb25maWcpe1xuICAgICAgdmFyIHByb2plY3RDb25maWcgPSBfLm1lcmdlKHBlbmRpbmdQcm9qZWN0LHByb2plY3RGdWxsQ29uZmlnKTtcbiAgICAgIHNlbGYuX2J1aWxkUHJvamVjdFRyZWUocHJvamVjdENvbmZpZyk7XG4gICAgICBwcm9qZWN0Q29uZmlnLldNU1VybCA9IHNlbGYuY29uZmlnLmdldFdtc1VybChwcm9qZWN0Q29uZmlnKTtcbiAgICAgIHZhciBwcm9qZWN0ID0gbmV3IFByb2plY3QocHJvamVjdENvbmZpZyk7XG4gICAgICBzZWxmLl9wcm9qZWN0c1twcm9qZWN0Q29uZmlnLmdpZF0gPSBwcm9qZWN0O1xuICAgICAgcmV0dXJuIGQucmVzb2x2ZShwcm9qZWN0KTtcbiAgICB9KTtcbiAgfVxuICBcbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcbiAgXG4vL3JpdG9ybmEgdW5hIHByb21pc2VzXG5wcm90by5fZ2V0UHJvamVjdEZ1bGxDb25maWcgPSBmdW5jdGlvbihwcm9qZWN0QmFzZUNvbmZpZykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgdmFyIHVybCA9IHRoaXMuY29uZmlnLmdldFByb2plY3RDb25maWdVcmwocHJvamVjdEJhc2VDb25maWcpO1xuICAkLmdldCh1cmwpLmRvbmUoZnVuY3Rpb24ocHJvamVjdEZ1bGxDb25maWcpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUocHJvamVjdEZ1bGxDb25maWcpO1xuICB9KTtcbiAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLl9idWlsZFByb2plY3RUcmVlID0gZnVuY3Rpb24ocHJvamVjdCl7XG4gIHZhciBsYXllcnMgPSBfLmtleUJ5KHByb2plY3QubGF5ZXJzLCdpZCcpO1xuICB2YXIgbGF5ZXJzVHJlZSA9IF8uY2xvbmVEZWVwKHByb2plY3QubGF5ZXJzdHJlZSk7XG4gIFxuICBmdW5jdGlvbiB0cmF2ZXJzZShvYmope1xuICAgIF8uZm9ySW4ob2JqLCBmdW5jdGlvbiAobGF5ZXIsIGtleSkge1xuICAgICAgLy92ZXJpZmljYSBjaGUgaWwgbm9kbyBzaWEgdW4gbGF5ZXIgZSBub24gdW4gZm9sZGVyXG4gICAgICBpZiAoIV8uaXNOaWwobGF5ZXIuaWQpKSB7XG4gICAgICAgICAgdmFyIGZ1bGxsYXllciA9IF8ubWVyZ2UobGF5ZXIsbGF5ZXJzW2xheWVyLmlkXSk7XG4gICAgICAgICAgb2JqW3BhcnNlSW50KGtleSldID0gZnVsbGxheWVyO1xuICAgICAgfVxuICAgICAgaWYgKCFfLmlzTmlsKGxheWVyLm5vZGVzKSl7XG4gICAgICAgIC8vIGFnZ2l1bmdvIHByb3ByaWV0w6AgdGl0bGUgcGVyIGwnYWxiZXJvXG4gICAgICAgIGxheWVyLnRpdGxlID0gbGF5ZXIubmFtZTtcbiAgICAgICAgdHJhdmVyc2UobGF5ZXIubm9kZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHRyYXZlcnNlKGxheWVyc1RyZWUpO1xuICBwcm9qZWN0LmxheWVyc3RyZWUgPSBsYXllcnNUcmVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgUHJvamVjdHNSZWdpc3RyeSgpO1xuIiwidmFyIFByb2plY3RUeXBlcyA9IHtcbiAgUURKQU5HTzogJ3FkamFuZ28nLFxuICBPR1I6ICdvZ3InXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2plY3RUeXBlczsiLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIHJlc29sdmUgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVzb2x2ZTtcbnZhciBQcm9qZWN0c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnY29yZS9wcm9qZWN0L3Byb2plY3RzcmVnaXN0cnknKTtcblxuLy8gRklMVFJJXG52YXIgRmlsdGVycyA9IHtcbiAgZXE6ICc9JyxcbiAgZ3Q6ICc+JyxcbiAgZ3RlOiAnPj0nLFxuICBsdDogJzwnLFxuICBsdGU6ICc9PCcsXG4gIExJS0U6ICdMSUtFJyxcbiAgSUxJS0U6ICdJTElLRScsXG4gIEFORDogJ0FORCcsXG4gIE9SOiAnT1InLFxuICBOT1Q6ICchPSdcbn07XG5cbmZ1bmN0aW9uIFF1ZXJ5UUdJU1dNU1Byb3ZpZGVyKCkge1xuXG4gIHNlbGYgPSB0aGlzO1xuICAvL2Z1bnppb25lIGNoZSBmYSBsYSByaWNoaWVzdGEgdmVyYSBlIHByb3ByaWEgYWwgc2VydmVyIHFnaXNcbiAgdGhpcy5zdWJtaXRHZXRGZWF0dXJlSW5mbyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgdXJsID0gb3B0aW9ucy51cmwgfHwgJyc7XG4gICAgdmFyIHF1ZXJ5bGF5ZXJuYW1lID0gb3B0aW9ucy5xdWVyeWxheWVybmFtZSB8fCBudWxsO1xuICAgIHZhciBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlciB8fCBudWxsO1xuICAgIHZhciBiYm94ID0gb3B0aW9ucy5iYm94IHx8IFByb2plY3RzUmVnaXN0cnkuZ2V0Q3VycmVudFByb2plY3QoKS5zdGF0ZS5leHRlbnQuam9pbignLCcpO1xuICAgIHZhciBzaW1wbGVXbXNTZWFyY2hNYXhSZXN1bHRzID0gbnVsbDtcbiAgICB2YXIgY3JzID0gb3B0aW9ucy5jcnMgfHwgJzQzMjY7J1xuICAgIHJldHVybiAkLmdldCggdXJsLCB7XG4gICAgICAgICdTRVJWSUNFJzogJ1dNUycsXG4gICAgICAgICdWRVJTSU9OJzogJzEuMy4wJyxcbiAgICAgICAgJ1JFUVVFU1QnOiAnR2V0RmVhdHVyZUluZm8nLFxuICAgICAgICAnTEFZRVJTJzogcXVlcnlsYXllcm5hbWUsXG4gICAgICAgICdRVUVSWV9MQVlFUlMnOiBxdWVyeWxheWVybmFtZSxcbiAgICAgICAgJ0ZFQVRVUkVfQ09VTlQnOiBzaW1wbGVXbXNTZWFyY2hNYXhSZXN1bHRzIHx8ICA1MCxcbiAgICAgICAgJ0lORk9fRk9STUFUJzogJ2FwcGxpY2F0aW9uL3ZuZC5vZ2MuZ21sJyxcbiAgICAgICAgJ0NSUyc6ICdFUFNHOicrIGNycyxcbiAgICAgICAgJ0ZJTFRFUic6IGZpbHRlcixcbiAgICAgICAgLy8gVGVtcG9yYXJ5IGZpeCBmb3IgaHR0cHM6Ly9odWIucWdpcy5vcmcvaXNzdWVzLzg2NTYgKGZpeGVkIGluIFFHSVMgbWFzdGVyKVxuICAgICAgICAnQkJPWCc6IGJib3ggLy8gUVVJIENJIFZBIElMIEJCT1ggREVMTEEgTUFQUEFcbiAgICAgIH1cbiAgICApO1xuICAgfTtcblxuICAvL2Z1bnppb25lIGNoZSBmYSBsYSByaWNlcmNhXG4gIHRoaXMuZG9TZWFyY2ggPSBmdW5jdGlvbihxdWVyeUZpbHRlck9iamVjdCkge1xuICAgIHZhciBxdWVyeWxheWVyID0gcXVlcnlGaWx0ZXJPYmplY3QucXVlcnlMYXllcjtcbiAgICB2YXIgdXJsID0gcXVlcnlsYXllci5nZXRRdWVyeVVybCgpO1xuICAgIHZhciBjcnMgPSBxdWVyeWxheWVyLmdldENycygpO1xuICAgIHZhciBmaWx0ZXJPYmplY3QgPSBxdWVyeUZpbHRlck9iamVjdC5maWx0ZXJPYmplY3Q7XG4gICAgLy9jcmVvIGlsIGZpbHRyb1xuICAgIHZhciBmaWx0ZXIgPSB0aGlzLmNyZWF0ZUZpbHRlcihmaWx0ZXJPYmplY3QsIHF1ZXJ5bGF5ZXIuZ2V0UXVlcnlMYXllck5hbWUoKSk7XG4gICAgLy9lc2VndW8gbGEgcmljaGllc3RhIGUgcmVzdGl0dWlzY28gY29tZSByaXNwb3N0YSBsYSBwcm9taXNlIGRlbCAkLmdldFxuICAgIHZhciByZXNwb25zZSA9IHRoaXMuc3VibWl0R2V0RmVhdHVyZUluZm8oe1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBjcnM6IGNycyxcbiAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgcXVlcnlsYXllcm5hbWU6IHF1ZXJ5bGF5ZXIuZ2V0UXVlcnlMYXllck5hbWUoKVxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfTtcblxuICB0aGlzLmNyZWF0ZUZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlck9iamVjdCwgcXVlcnlsYXllcm5hbWUpIHtcblxuICAgIC8vLy8vaW5zZXJpc2NvIGlsIG5vbWUgZGVsIGxheWVyICh0eXBlbmFtZSkgLy8vXG4gICAgdmFyIGZpbHRlciA9IFtdO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNpbmdsZUZpbHRlcihib29sZWFuT2JqZWN0KSB7XG4gICAgICB2YXIgZmlsdGVyRWxlbWVudHMgPSBbXTtcbiAgICAgIHZhciBmaWx0ZXJFbGVtZW50ID0gJyc7XG4gICAgICB2YXIgdmFsdWVFeHRyYSA9IFwiXCI7XG4gICAgICB2YXIgdmFsdWVRdW90ZXMgPSBcIlwiO1xuICAgICAgdmFyIHJvb3RGaWx0ZXI7XG4gICAgICBfLmZvckVhY2goYm9vbGVhbk9iamVjdCwgZnVuY3Rpb24odiwgaywgb2JqKSB7XG4gICAgICAgIC8vY3JlbyBpbCBmaWx0cm8gcm9vdCBjaGUgc2Fyw6AgQU5EIE9SXG4gICAgICAgIHJvb3RGaWx0ZXIgPSBGaWx0ZXJzW2tdO1xuICAgICAgICAvL3F1aSBjJ8OoIGFycmF5IGRlZ2xpIGVsZW1lbnRpIGRpIHVuIGJvb2xlYW5vXG4gICAgICAgIF8uZm9yRWFjaCh2LCBmdW5jdGlvbihpbnB1dCl7XG4gICAgICAgICAgLy9zY29ycm8gc3Ugb2dnZXR0b1xuICAgICAgICAgIF8uZm9yRWFjaChpbnB1dCwgZnVuY3Rpb24odiwgaywgb2JqKSB7XG4gICAgICAgICAgLy92ZXJpZmljbyBzZSBpbCB2YWxvcmUgZGVsbCdvZ2dldHRvIMOoIGFycmF5IGUgcXVpbmRpIMOoIGFsdHJvIG9nZ2V0dG8gcGFkcmUgYm9vbGVhbm9cbiAgICAgICAgICAgIGlmIChfLmlzQXJyYXkodikpIHtcbiAgICAgICAgICAgICAgZmlsdGVyRWxlbWVudCA9IGNyZWF0ZVNpbmdsZUZpbHRlcihvYmopO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gw6ggdW4gb2dnZXR0byBvcGVyYXRvcmVcbiAgICAgICAgICAgICAgaWYgKGsgPT0gJ0xJS0UnIHx8IGsgPT0gJ0lMSUtFJykge1xuICAgICAgICAgICAgICAgIHZhbHVlRXh0cmEgPSBcIiVcIjtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZmlsdGVyT3AgPSBGaWx0ZXJzW2tdO1xuICAgICAgICAgICAgICBfLmZvckVhY2goaW5wdXQsIGZ1bmN0aW9uKHYsIGssIG9iaikge1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh2LCBmdW5jdGlvbih2LCBrLCBvYmopIHtcbiAgICAgICAgICAgICAgICAgIC8vdmVyaWZpY28gc2UgaWwgdmFsb3JlIG5vbiDDqCB1biBudW1lcm8gZSBxdWluZGkgYWdnaXVuZ28gc2luZ29sbyBhcGljZVxuICAgICAgICAgICAgICAgICAgaWYoaXNOYU4odikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVRdW90ZXMgPSBcIidcIjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlUXVvdGVzID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBmaWx0ZXJFbGVtZW50ID0gXCJcXFwiXCIgKyBrICsgXCJcXFwiIFwiKyBmaWx0ZXJPcCArXCIgXCIgKyB2YWx1ZVF1b3RlcyArIHZhbHVlRXh0cmEgKyB2ICsgdmFsdWVFeHRyYSArIHZhbHVlUXVvdGVzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmaWx0ZXJFbGVtZW50cy5wdXNoKGZpbHRlckVsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcm9vdEZpbHRlciA9IGZpbHRlckVsZW1lbnRzLmpvaW4oXCIgXCIrIHJvb3RGaWx0ZXIgKyBcIiBcIik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByb290RmlsdGVyO1xuICAgIH07XG4gICAgLy9hc3NlZ25vIGlsIGZpbHRybyBjcmVhdG9cbiAgICBmaWx0ZXIgPSBxdWVyeWxheWVybmFtZSArIFwiOlwiICsgY3JlYXRlU2luZ2xlRmlsdGVyKGZpbHRlck9iamVjdCk7XG4gICAgcmV0dXJuIGZpbHRlcjtcbiAgfTtcblxufTtcblxuaW5oZXJpdChRdWVyeVFHSVNXTVNQcm92aWRlciwgRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSAgbmV3IFF1ZXJ5UUdJU1dNU1Byb3ZpZGVyKCk7XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIHJlc29sdmUgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVzb2x2ZTtcbi8vZGVmaW5pc2NvIGlsIGZpbHRybyBvbDNcbnZhciBvbDNPR0NGaWx0ZXIgPSBvbC5mb3JtYXQub2djLmZpbHRlcjtcblxuLy9vZ2dldHRvIGNoZSB2aWVuZSBwYXNzYXRvIHBlciBlZmZldHR1cmFyZSBpbCBsYSBzZWFyY2hcbnZhciBvbDNHZXRGZWF0dXJlUmVxdWVzdE9iamVjdCA9IHtcbiAgc3JzTmFtZTogJ0VQU0c6JyxcbiAgZmVhdHVyZU5TOiAnJyxcbiAgZmVhdHVyZVByZWZpeDogJycsXG4gIGZlYXR1cmVUeXBlczogW10sXG4gIG91dHB1dEZvcm1hdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICBmaWx0ZXI6IG51bGwgLy8gZXNlbXBpbyBmaWx0cm8gY29tcG9zdG8gb2wzT0dDRmlsdGVyLmFuZChvbDNPR0NGaWx0ZXIuYmJveCgndGhlX2dlb20nLCBbMSwgMiwgMywgNF0sICd1cm46b2djOmRlZjpjcnM6RVBTRzo6NDMyNicpLG9sM09HQ0ZpbHRlci5saWtlKCduYW1lJywgJ05ldyonKSlcbn07XG5cbi8vIEZJTFRSSSBPTDNcbnZhciBvbDNGaWx0ZXJzID0ge1xuICBlcTogb2wzT0dDRmlsdGVyLmVxdWFsVG8sXG4gIGd0OiBvbDNPR0NGaWx0ZXIuZ3JlYXRlclRoYW4sXG4gIGd0ZTogb2wzT0dDRmlsdGVyLmdyZWF0ZXJUaGFuT3JFcXVhbFRvLFxuICBsdDogb2wzT0dDRmlsdGVyLmxlc3NUaGFuLFxuICBsdGU6IG9sM09HQ0ZpbHRlci5sZXNzVGhhbk9yRXF1YWxUbyxcbiAgbGlrZTogb2wzT0dDRmlsdGVyLmxpa2UsXG4gIGlsaWtlOiBcIlwiLFxuICBiYm94OiBvbDNPR0NGaWx0ZXIuYmJveCxcbiAgQU5EOiBvbDNPR0NGaWx0ZXIuYW5kLFxuICBPUjogb2wzT0dDRmlsdGVyLm9yLFxuICBOT1Q6IG9sM09HQ0ZpbHRlci5ub3Rcbn07XG5cblxuLy8gQ1JFQVRPIFVOIEZJTFRSTyBESSBFU0VNUElPIFBFUiBWRVJJRklDQVJFIExBIENPUlJFVFRFWlpBIERFTExBIEZVTlpJT05FIENSRUFaSU9ORSBGSUxUUk9cbnZhciB0ZXN0RmlsdGVyID0ge1xuICAnQU5EJzpcbiAgICBbXG4gICAgICB7XG4gICAgICAgIGVxOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGdpZCA6IDEwXG4gICAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ09SJzpcbiAgICAgICAgICBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVxOiB7XG4gICAgICAgICAgICAgICAgcGlwcG8gOiAnbGFsbG8nXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGd0OiB7XG4gICAgICAgICAgICAgICAgaWQgOiA1XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIF1cbiAgICAgIH1cbiAgIF1cbn1cbi8vLy8vLy8vLy8vLy8vXG5cbi8vL0ZJTFRSSSBDVVNUT01cbnZhciBzdGFuZGFyZEZpbHRlclRlbXBsYXRlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29tbW9uID0ge1xuICAgIHByb3BlcnR5TmFtZTpcbiAgICAgICAgICBcIjxQcm9wZXJ0eU5hbWU+XCIgK1xuICAgICAgICAgICAgXCJbUFJPUF1cIiArXG4gICAgICAgICAgXCI8L1Byb3BlcnR5TmFtZT5cIixcbiAgICBsaXRlcmFsOlxuICAgICAgICAgIFwiPExpdGVyYWw+XCIgK1xuICAgICAgICAgICAgXCJbVkFMVUVdXCIgK1xuICAgICAgICAgIFwiPC9MaXRlcmFsPlwiXG4gIH07XG4gIHJldHVybiB7XG4gICAgZXE6IFwiPFByb3BlcnR5SXNFcXVhbFRvPlwiICtcbiAgICAgICAgICAgIGNvbW1vbi5wcm9wZXJ0eU5hbWUgK1xuICAgICAgICAgICAgY29tbW9uLmxpdGVyYWwgK1xuICAgICAgICBcIjwvUHJvcGVydHlJc0VxdWFsVG8+XCIsXG4gICAgZ3Q6IFwiPFByb3BlcnR5SXNHcmVhdGVyVGhhbj5cIiArXG4gICAgICAgICAgICBjb21tb24ucHJvcGVydHlOYW1lICtcbiAgICAgICAgICAgIGNvbW1vbi5saXRlcmFsICtcbiAgICAgICAgIFwiPC9Qcm9wZXJ0eUlzR3JlYXRlclRoYW4+XCIsXG4gICAgZ3RlOlwiXCIsXG4gICAgbHQ6IFwiXCIsXG4gICAgbHRlOiBcIlwiLFxuICAgIGxpa2U6IFwiXCIsXG4gICAgaWxpa2U6IFwiXCIsXG4gICAgQU5EOiBcIjxBbmQ+W0FORF08L0FuZD5cIixcbiAgICBPUjogXCI8T3I+W09SXTwvT3I+XCIsXG4gIH1cbn0oKTtcblxuLy8vLy9cbnZhciBxZ2lzRmlsdGVyVGVtcGxhdGVzID0ge1xuICAvLyBjb2RpY2UgcXVpXG59O1xuXG52YXIgbWFwc2VydmVyRmlsdGVyVGVtcGxhdGVzID0ge1xuICAvLyBjb2RpY2UgcXVpXG59O1xuXG52YXIgZ2Vvc2VydmVyRmlsdGVyVGVtcGxhdGVzID0ge1xuICAvLyBjb2RpY2UgcXVpXG59O1xuXG5mdW5jdGlvbiBRdWVyeVdGU1Byb3ZpZGVyKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGQgPSAkLkRlZmVycmVkKCk7XG4gIHZhciByZXN1bHRzID0ge1xuICAgIGhlYWRlcnM6W10sXG4gICAgdmFsdWVzOltdXG4gIH07XG5cbiAgdGhpcy5kb1NlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5RmlsdGVyT2JqZWN0KXtcbiAgICB2YXIgcXVlcnlsYXllciA9IHF1ZXJ5RmlsdGVyT2JqZWN0LnF1ZXJ5TGF5ZXI7XG4gICAgdmFyIHVybCA9IHF1ZXJ5bGF5ZXIuZ2V0UXVlcnlVcmwoKTtcbiAgICB2YXIgY3JzID0gcXVlcnlsYXllci5nZXRDcnMoKTtcbiAgICB2YXIgZmlsdGVyT2JqZWN0ID0gcXVlcnlGaWx0ZXJPYmplY3QuZmlsdGVyT2JqZWN0O1xuICAgIC8vc2V0dG8gaWwgc3JzXG4gICAgb2wzR2V0RmVhdHVyZVJlcXVlc3RPYmplY3Quc3JzTmFtZSs9Y3JzIHx8ICc0MzI2JztcbiAgICB2YXIgcmVzcG9uc2UsIGZpbHRlcjtcbiAgICBzd2l0Y2ggKG9nY3NlcnZlcnR5cGUpIHtcbiAgICAgIGNhc2UgJ09HQyc6XG4gICAgICAgIGZpbHRlciA9IHRoaXMuY3JlYXRlU3RhbmRhcmRGaWx0ZXIoZmlsdGVyT2JqZWN0LCBxdWVyeWxheWVyKTtcbiAgICAgICAgcmVzcG9uc2UgPSB0aGlzLnN0YW5kYXJkU2VhcmNoKHVybCwgZmlsdGVyKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzcG9uc2UpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncWdpcyc6XG4gICAgICAgIGZpbHRlciA9IHRoaXMuY3JlYXRlUWdpc0ZpbHRlcihmaWx0ZXJPYmplY3QpO1xuICAgICAgICByZXNwb25zZSA9IHRoaXMucWdpc1NlYXJjaChxdWVyeWxheWVyLCB1cmwsIGZpbHRlcik7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHJlc3BvbnNlKVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21hcHNlcnZlcic6XG4gICAgICAgIGZpbHRlciA9IHRoaXMuY3JlYXRlTWFwc2VydmVyRmlsdGVyKGZpbHRlck9iamVjdCk7XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5tYXBzZXJ2ZXJTZWFyY2gocXVlcnlsYXllciwgdXJsLCBmaWx0ZXIpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXNwb25zZSlcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdnZW9zZXJ2ZXInOlxuICAgICAgICBmaWx0ZXIgPSB0aGlzLmNyZWF0ZUdlb3NlcnZlckZpbHRlcihmaWx0ZXJPYmplY3QpO1xuICAgICAgICByZXNwb25zZSA9IHRoaXMuZ2Vvc2VydmVyU2VhcmNoKHF1ZXJ5bGF5ZXIsIHVybCwgZmlsdGVyKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzcG9uc2UpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc3RhbmRhcmRTZWFyY2ggPSBmdW5jdGlvbih1cmwsIGZpbHRlcil7XG4gICAgY29uc29sZS5sb2coZmlsdGVyKVxuICB9O1xuICB0aGlzLmNyZWF0ZVN0YW5kYXJkRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyT2JqZWN0LCBxdWVyeWxheWVyKSB7XG4gICAgLy8vLy9pbnNlcmlzY28gaWwgbm9tZSBkZWwgbGF5ZXIgKHR5cGVuYW1lKSAvLy9cbiAgICBvbDNHZXRGZWF0dXJlUmVxdWVzdE9iamVjdC5mZWF0dXJlVHlwZXMucHVzaChxdWVyeWxheWVyLmdldFF1ZXJ5TGF5ZXJOYW1lKTtcbiAgICB2YXIgZmlsdGVyID0gW107XG4gICAgZnVuY3Rpb24gY3JlYXRlU2luZ2xlRmlsdGVyKGJvb2xlYW5PYmplY3QpIHtcbiAgICAgIHZhciBmaWx0ZXJFbGVtZW50cyA9IFtdO1xuICAgICAgdmFyIGZpbHRlckVsZW1lbnQgPSAnJztcbiAgICAgIHZhciByb290RmlsdGVyO1xuICAgICAgXy5mb3JFYWNoKGJvb2xlYW5PYmplY3QsIGZ1bmN0aW9uKHYsIGssIG9iaikge1xuICAgICAgICAvL2NyZW8gaWwgZmlsdHJvIHJvb3QgY2hlIHNhcsOgIEFORCBPUlxuICAgICAgICByb290RmlsdGVyID0gb2wzRmlsdGVyc1trXTtcbiAgICAgICAgLy9xdWkgYyfDqCBhcnJheSBkZWdsaSBlbGVtZW50aSBkaSB1biBib29sZWFub1xuICAgICAgICBfLmZvckVhY2godiwgZnVuY3Rpb24oaW5wdXQpe1xuICAgICAgICAgIC8vc2NvcnJvIHN1IG9nZ2V0dG8gb3BlcmF0b3JlXG4gICAgICAgICAgXy5mb3JFYWNoKGlucHV0LCBmdW5jdGlvbih2LCBrLCBvYmopIHtcbiAgICAgICAgICAvL8OoIHVuIGFycmF5IGUgcXVpbmRpIMOoIGFsdHJvIG9nZ2V0dG8gcGFkcmUgYm9vbGVhbm9cbiAgICAgICAgICAgIGlmIChfLmlzQXJyYXkodikpIHtcbiAgICAgICAgICAgICAgZmlsdGVyRWxlbWVudCA9IGNyZWF0ZVNpbmdsZUZpbHRlcihvYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmlsdGVyRWxlbWVudCA9IG9sM0ZpbHRlcnNba107XG4gICAgICAgICAgICAgIF8uZm9yRWFjaChpbnB1dCwgZnVuY3Rpb24odiwgaywgb2JqKSB7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHYsIGZ1bmN0aW9uKHYsIGssIG9iaikge1xuICAgICAgICAgICAgICAgICAgZmlsdGVyRWxlbWVudCA9IGZpbHRlckVsZW1lbnQoaywgdik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZpbHRlckVsZW1lbnRzLnB1c2goZmlsdGVyRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL3ZlcmlmaWNvIGNoZSBjaSBzaWFubyBhbG1lbm8gZHVlIGNvbmRpemlvbmUgbmVsIGZpbHRybyBBTkQuIE5lbCBjYXNvIGRpIHVuYSBzb2xhIGNvbmRpemlvbmUgKGVzZW1waW8gOiB1biBzb2xvIGlucHV0KVxuICAgICAgICAvL2VzdHJhZ2dvIHNvbG8gbCdlbGVtZW50byBmaWx0cm8gYWx0cmltZW50aSBkYSBlcnJvcmUgLS0gREEgVkVSSUZJQ0FSRSBTRSBDQU1CSUFSTE9cbiAgICAgICAgaWYgKGZpbHRlckVsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByb290RmlsdGVyID0gcm9vdEZpbHRlci5hcHBseSh0aGlzLCBmaWx0ZXJFbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm9vdEZpbHRlciA9IGZpbHRlckVsZW1lbnRzWzBdO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcm9vdEZpbHRlcjtcbiAgICB9O1xuICAgIC8vYXNzZWdubyBpbCBmaWx0cm8gY3JlYXRvXG4gICAgb2wzR2V0RmVhdHVyZVJlcXVlc3RPYmplY3QuZmlsdGVyID0gY3JlYXRlU2luZ2xlRmlsdGVyKGZpbHRlck9iamVjdCk7XG4gICAgLy9jcmVvIGlsIGZpbHRybyB1dGlsaXp6YW5kbyBvbDNcbiAgICBmaWx0ZXIgPSBuZXcgb2wuZm9ybWF0LldGUygpLndyaXRlR2V0RmVhdHVyZShvbDNHZXRGZWF0dXJlUmVxdWVzdE9iamVjdCk7XG4gICAgcmV0dXJuIGZpbHRlcjtcbiAgfTtcblxuICB0aGlzLnFnaXNTZWFyY2ggPSBmdW5jdGlvbih1cmxzLCBmaWx0ZXIpe1xuICAgICQuZ2V0KHNlYXJjaFVybCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgc2VsZi5lbWl0KFwic2VhcmNoZG9uZVwiLHJlc3VsdCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGQucHJvbWlzZSgpO1xuICB9O1xuICB0aGlzLmNyZWF0ZVFHaXNGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXJPYmplY3QpIHtcbiAgICB2YXIgZmlsdGVyO1xuICAgIHJldHVybiBmaWx0ZXJcbiAgfTtcbiAgdGhpcy5tYXBzZXJ2ZXJTZWFyY2ggPSBmdW5jdGlvbihxdWVyeWxheWVyLCB1cmwsIGZpbHRlcil7XG4gICAgcmV0dXJuIGQucHJvbWlzZSgpO1xuICB9O1xuICB0aGlzLmNyZWF0ZU1hcHNlcnZlckZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlck9iamVjdCkge1xuICAgIHZhciBmaWx0ZXI7XG4gICAgcmV0dXJuIGZpbHRlclxuICB9O1xuICB0aGlzLmdlb3NlcnZlclNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5bGF5ZXIsIHVybCwgZmlsdGVyKXtcbiAgICByZXR1cm4gZC5wcm9taXNlKCk7XG4gIH07XG4gIHRoaXMuY3JlYXRlR2Vvc2VydmVyRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyT2JqZWN0KSB7XG4gICAgdmFyIGZpbHRlcjtcbiAgICByZXR1cm4gZmlsdGVyXG4gIH07XG4gIGJhc2UodGhpcyk7XG59XG5pbmhlcml0KFF1ZXJ5V0ZTUHJvdmlkZXIsRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSAgbmV3IFF1ZXJ5V0ZTUHJvdmlkZXIoKVxuXG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIGJhc2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIFByb2plY3RzUmVnaXN0cnkgPSByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdHNyZWdpc3RyeScpO1xudmFyIFF1ZXJ5V0ZTUHJvdmlkZXIgPSByZXF1aXJlKCcuL3F1ZXJ5V0ZTUHJvdmlkZXInKTtcbnZhciBRdWVyeVFHSVNXTVNQcm92aWRlciA9IHJlcXVpcmUoJy4vcXVlcnlRR0lTV01TUHJvdmlkZXInKTtcbnZhciBDb21wb25lbnRzUmVnaXN0cnkgPSByZXF1aXJlKCdndWkvY29tcG9uZW50c3JlZ2lzdHJ5Jyk7XG5cbnZhciBQcm92aWRlciA9IHtcbiAgJ1FHSVMnOiBRdWVyeVFHSVNXTVNQcm92aWRlcixcbiAgJ09HQyc6IFF1ZXJ5V0ZTUHJvdmlkZXJcbn07XG5cbi8qdmFyIFBpY2tUb2xlcmFuY2VQYXJhbXMgPSB7fTtcblBpY2tUb2xlcmFuY2VQYXJhbXNbUHJvamVjdFR5cGVzLlFESkFOR09dID0ge307XG5QaWNrVG9sZXJhbmNlUGFyYW1zW1Byb2plY3RUeXBlcy5RREpBTkdPXVtHZW9tZXRyeVR5cGVzLlBPSU5UXSA9IFwiRklfUE9JTlRfVE9MRVJBTkNFXCI7XG5QaWNrVG9sZXJhbmNlUGFyYW1zW1Byb2plY3RUeXBlcy5RREpBTkdPXVtHZW9tZXRyeVR5cGVzLkxJTkVTVFJJTkddID0gXCJGSV9MSU5FX1RPTEVSQU5DRVwiO1xuUGlja1RvbGVyYW5jZVBhcmFtc1tQcm9qZWN0VHlwZXMuUURKQU5HT11bR2VvbWV0cnlUeXBlcy5QT0xZR09OXSA9IFwiRklfUE9MWUdPTl9UT0xFUkFOQ0VcIjtcblxudmFyIFBpY2tUb2xlcmFuY2VWYWx1ZXMgPSB7fVxuUGlja1RvbGVyYW5jZVZhbHVlc1tHZW9tZXRyeVR5cGVzLlBPSU5UXSA9IDU7XG5QaWNrVG9sZXJhbmNlVmFsdWVzW0dlb21ldHJ5VHlwZXMuTElORVNUUklOR10gPSA1O1xuUGlja1RvbGVyYW5jZVZhbHVlc1tHZW9tZXRyeVR5cGVzLlBPTFlHT05dID0gNTsqL1xuXG5cbi8vb2dnZXR0byBxdWVyeSBzZXJ2aWNlXG5mdW5jdGlvbiBRdWVyeVNlcnZpY2UoKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnVybCA9IFwiXCI7XG4gIHRoaXMuZmlsdGVyT2JqZWN0ID0ge307XG4gIHRoaXMucXVlcnlGaWx0ZXJPYmplY3QgPSB7fTtcbiAgLy9tZSBsbyBwb3J0byBkYSBtYXBxdWVyeXNlcnZpY2UgbWEgdmVkaWFtbyBjb3NhIHN1Y2NlZGVcbiAgdGhpcy5zZXRNYXBTZXJ2aWNlID0gZnVuY3Rpb24obWFwU2VydmljZSl7XG4gICAgdGhpcy5fbWFwU2VydmljZSA9IG1hcFNlcnZpY2U7XG4gIH07XG5cbiAgdGhpcy5zZXRGaWx0ZXJPYmplY3QgPSBmdW5jdGlvbihmaWx0ZXJPYmplY3Qpe1xuICAgIHRoaXMuZmlsdGVyT2JqZWN0ID0gZmlsdGVyT2JqZWN0O1xuICB9O1xuXG4gIHRoaXMuZ2V0RmlsdGVyT2JqZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyT2JqZWN0O1xuICB9O1xuICAvL2RhdG8gbCdvZ2dldHRvIGZpbHRlciByZXN0aXR1aXRvIGRhbCBzZXJ2ZXIgcmljb3N0cnVpc2NvIGxhIHN0cnV0dHVyYSBkZWwgZmlsdGVyT2JqZWN0XG4gIC8vaW50ZXJwcmV0YXRvIGRhIHF1ZXJ5V01TUHJvdmlkZXJcbiAgdGhpcy5jcmVhdGVRdWVyeUZpbHRlckZyb21Db25maWcgPSBmdW5jdGlvbihmaWx0ZXIpIHtcblxuICAgIHZhciBxdWVyeUZpbHRlciA9IHt9O1xuICAgIHZhciBhdHRyaWJ1dGU7XG4gICAgdmFyIG9wZXJhdG9yO1xuICAgIHZhciBmaWVsZDtcbiAgICB2YXIgb3BlcmF0b3JPYmplY3QgPSB7fTtcbiAgICB2YXIgYm9vbGVhbk9iamVjdCA9IHt9O1xuICAgIC8vZnVuemlvbmUgY2hlIGNvc3RydWlzY2UgbCdvZ2dldHRvIG9wZXJhdG9yZSBlcy4geyc9Jzp7J25vbWVjYW1wbyc6bnVsbH19XG4gICAgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JPYmplY3Qob2JqKSB7XG4gICAgICAvL3Jpbml6aWFsaXp6byBhIG9nZ2V0dG8gdnVvdG9cbiAgICAgIGV2YWxPYmplY3QgPSB7fTtcbiAgICAgIC8vdmVyaWZpY28gY2hlIGwnb2dnZXR0byBwYXNzYXRvIG5vbiBzaWEgYSBzdWEgdm9sdGEgdW4gb2dnZXR0byAnQk9PTEVBTk8nXG4gICAgICBfLmZvckVhY2gob2JqLCBmdW5jdGlvbih2LGspIHtcbiAgICAgICAgaWYgKF8uaXNBcnJheSh2KSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVCb29sZWFuT2JqZWN0KGssdik7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIGZpZWxkID0gb2JqLmF0dHJpYnV0ZTtcbiAgICAgIG9wZXJhdG9yID0gb2JqLm9wO1xuICAgICAgZXZhbE9iamVjdFtvcGVyYXRvcl0gPSB7fTtcbiAgICAgIGV2YWxPYmplY3Rbb3BlcmF0b3JdW2ZpZWxkXSA9IG51bGw7XG4gICAgICByZXR1cm4gZXZhbE9iamVjdDtcbiAgICB9XG4gICAgLy9mdW5jdGlvbmUgY2hlIGNvc3RydWlzY2Ugb2dnZXR0aSBCT09MRUFOSSBjYXNvIEFORCBPUiBjb250ZW5lbnRlIGFycmF5IGRpIG9nZ2V0dGkgZm9ybml0IGRhbGxhIGZ1bnppb25lIGNyZWF0ZU9wZXJhdG9yT2JqZWN0XG4gICAgZnVuY3Rpb24gY3JlYXRlQm9vbGVhbk9iamVjdChib29sZWFuT3BlcmF0b3IsIG9wZXJhdGlvbnMpIHtcbiAgICAgIGJvb2xlYW5PYmplY3QgPSB7fTtcbiAgICAgIGJvb2xlYW5PYmplY3RbYm9vbGVhbk9wZXJhdG9yXSA9IFtdO1xuICAgICAgXy5mb3JFYWNoKG9wZXJhdGlvbnMsIGZ1bmN0aW9uKG9wZXJhdGlvbil7XG4gICAgICAgIGJvb2xlYW5PYmplY3RbYm9vbGVhbk9wZXJhdG9yXS5wdXNoKGNyZWF0ZU9wZXJhdG9yT2JqZWN0KG9wZXJhdGlvbikpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYm9vbGVhbk9iamVjdDtcbiAgICB9XG4gICAgLypcbiAgICAvLyB2YWRvIGEgY3JlYXJlIGwnb2dnZXR0byBmaWx0cm8gcHJpbmNpcGFsZS4gUXVlc3RvIMOoIHVuIG9nZ2V0dG8gY2hlIGNvbnRpZW5lIGwnb3BlcmF0b3JlIGJvb2xlYW5vIGNvbWUgcm9vdCAoY2hpYXZlKVxuICAgIC8vIGNvbWUgdmFsb3JlIHVuIGFycmF5IGRpIG9nZ2V0dGkgb3BlcmF0b3JpIGNoZSBjb250ZW5nb25vIGlsIHRpcG8gZGkgb3BlcmF0b3JlIGNvbWUgY2hpYXZlIGUgY29tZSB2YWxvcmUgdW4gb2dnZXR0byBjb250ZW5ldGVcbiAgICAvLyBub21lIGNhbXBvIGUgdmFsb3JlIHBhc3NhdG9cbiAgICAqL1xuICAgIF8uZm9yRWFjaChmaWx0ZXIsIGZ1bmN0aW9uKHYsayxvYmopIHtcbiAgICAgIHF1ZXJ5RmlsdGVyID0gY3JlYXRlQm9vbGVhbk9iamVjdChrLHYpO1xuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeUZpbHRlcjtcbiAgfTtcblxuICB0aGlzLmNyZWF0ZVF1ZXJ5RmlsdGVyT2JqZWN0ID0gZnVuY3Rpb24obGF5ZXIsIGZpbHRlck9iamVjdCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzdGFuZGFyZCcsXG4gICAgICBxdWVyeUxheWVyOiBsYXllcixcbiAgICAgIGZpbHRlck9iamVjdCA6IGZpbHRlck9iamVjdFxuICAgIH07XG4gIH07XG5cbiAgLy8vLy9QQVJTRVJTIC8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8vIEJydXR0byBtYSBwZXIgb3JhIHVuaWNhIHNvbHV6aW9uZSB0cm92YXRhIHBlciBkaXZpZGVyZSBwZXIgbGF5ZXIgaSByaXN1bHRhdGkgZGkgdW4gZG9jIHhtbCB3ZnMuRmVhdHVyZUNvbGxlY3Rpb24uXG4gIC8vIE9MMyBsaSBwYXJzZXJpenphIHR1dHRpIGluc2llbWUgbm9uIGRpc3Rpbmd1ZW5kbyBsZSBmZWF0dXJlcyBkZWkgZGl2ZXJzaSBsYXllcnNcbiAgdGhpcy5fcGFyc2VMYXllckZlYXR1cmVDb2xsZWN0aW9uID0gZnVuY3Rpb24ocXVlcnlMYXllciwgZGF0YSkge1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIHZhciBsYXllck5hbWUgPSBxdWVyeUxheWVyLmdldFdNU0xheWVyTmFtZSgpO1xuICAgIHZhciBsYXllckRhdGEgPSBfLmNsb25lRGVlcChkYXRhKTtcbiAgICBsYXllckRhdGEuRmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZU1lbWJlciA9IFtdO1xuICAgIFxuICAgIHZhciBmZWF0dXJlTWVtYmVycyA9IGRhdGEuRmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZU1lbWJlcjtcbiAgICBmZWF0dXJlTWVtYmVycyA9IF8uaXNBcnJheShmZWF0dXJlTWVtYmVycykgPyBmZWF0dXJlTWVtYmVycyA6IFtmZWF0dXJlTWVtYmVyc107XG4gICAgXy5mb3JFYWNoKGZlYXR1cmVNZW1iZXJzLGZ1bmN0aW9uKGZlYXR1cmVNZW1iZXIpe1xuICAgICAgbGF5ZXJOYW1lID0gbGF5ZXJOYW1lLnJlcGxhY2UoLyAvZywnJyk7IC8vIFFHSVMgU0VSVkVSIHJpbXVvdmUgZ2xpIHNwYXppIGRhbCBub21lIGRlbCBsYXllciBwZXIgY3JlYXJlIGwnZWxlbWVudG8gRmVhdHVyZU1lbWJlclxuICAgICAgdmFyIGlzTGF5ZXJNZW1iZXIgPSBfLmdldChmZWF0dXJlTWVtYmVyLGxheWVyTmFtZSlcblxuICAgICAgaWYgKGlzTGF5ZXJNZW1iZXIpIHtcbiAgICAgICAgbGF5ZXJEYXRhLkZlYXR1cmVDb2xsZWN0aW9uLmZlYXR1cmVNZW1iZXIucHVzaChmZWF0dXJlTWVtYmVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB4MmpzID0gbmV3IFgySlMoKTtcbiAgICB2YXIgbGF5ZXJGZWF0dXJlQ29sbGVjdGlvblhNTCA9IHgyanMuanNvbjJ4bWxfc3RyKGxheWVyRGF0YSk7XG4gICAgdmFyIHBhcnNlciA9IG5ldyBvbC5mb3JtYXQuV01TR2V0RmVhdHVyZUluZm8oKTtcbiAgICByZXR1cm4gcGFyc2VyLnJlYWRGZWF0dXJlcyhsYXllckZlYXR1cmVDb2xsZWN0aW9uWE1MKTtcbiAgfTtcblxuICAvLyBtZW50cmUgY29uIGkgcmlzdWx0YXRpIGluIG1zR0xNT3V0cHV0IChkYSBNYXBzZXJ2ZXIpIGlsIHBhcnNlciBwdcOyIGVzc2VyZSBpc3RydWl0byBwZXIgcGFyc2VyaXp6YXJlIGluIGJhc2UgYWQgdW4gbGF5ZXIgZGkgZmlsdHJvXG4gIHRoaXMuX3BhcnNlTGF5ZXJtc0dNTE91dHB1dCA9IGZ1bmN0aW9uKHF1ZXJ5TGF5ZXIsIGRhdGEpe1xuICAgIHZhciBwYXJzZXIgPSBuZXcgb2wuZm9ybWF0LldNU0dldEZlYXR1cmVJbmZvKHtcbiAgICAgIGxheWVyczogW3F1ZXJ5TGF5ZXIucXVlcnlMYXllck5hbWVdXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlci5yZWFkRmVhdHVyZXMoZGF0YSk7XG4gIH07XG4gIFxuICB0aGlzLl9wYXJzZUxheWVyR2VvSlNPTiA9IGZ1bmN0aW9uKHF1ZXJ5TGF5ZXIsIGRhdGEpIHtcbiAgICB2YXIgZ2VvanNvbiA9IG5ldyBvbC5mb3JtYXQuR2VvSlNPTih7XG4gICAgICBkZWZhdWx0RGF0YVByb2plY3Rpb246IHRoaXMuY3JzLFxuICAgICAgZ2VvbWV0cnlOYW1lOiBcImdlb21ldHJ5XCJcbiAgICB9KTtcbiAgICByZXR1cm4gZ2VvanNvbi5yZWFkRmVhdHVyZXMoZGF0YSk7XG4gIH07XG5cbiAgLy8vLyBGSU5FIFBBUlNFUiAvLy9cblxuICAvL0lOSVpPIFNFWklPTkUgUVVFUklFUyAvLy9cblxuICAvLyBNZXNzbyBxdWkgZ2VuZXJhbGUgbGEgZnVuemlvbmUgY2hlIHNpIHByZW5kZSBjdXJhIGRlbGxhIHRyYXNmb3JtYXppb25lIGRlbGwneG1sIGRpIHJpc3Bvc3RhXG4gIC8vIGRhbCBzZXJ2ZXIgY29zw6wgZGEgYXZlcmUgdW5hIHJpc3Bvc3RhIGNvZXJlbnRlIGluIHRlcm1pbmkgZGkgZm9ybWF0byByaXN1bHRhdGkgZGEgcHJlc2VudGFyZVxuICAvLyBuZWwgY29tcG9uZW50ZSBRdWVyeVJlc3VsdHNcbiAgdGhpcy5oYW5kbGVRdWVyeVJlc3BvbnNlRnJvbVNlcnZlciA9IGZ1bmN0aW9uKHJlc3BvbnNlLCBpbmZvRm9ybWF0LCBxdWVyeUxheWVycykge1xuICAgIHZhciBqc29ucmVzcG9uc2U7XG4gICAgdmFyIGZlYXR1cmVzRm9yTGF5ZXJzID0gW107XG4gICAgdmFyIHBhcnNlciwgZGF0YTtcbiAgICBzd2l0Y2ggKGluZm9Gb3JtYXQpIHtcbiAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgICBwYXJzZXIgPSB0aGlzLl9wYXJzZUxheWVyR2VvSlNPTjtcbiAgICAgICAgZGF0YSA9IHJlc3BvbnNlLnZlY3Rvci5kYXRhO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciB4MmpzID0gbmV3IFgySlMoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoXy5pc1N0cmluZyhyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIGpzb25yZXNwb25zZSA9IHgyanMueG1sX3N0cjJqc29uKHJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAganNvbnJlc3BvbnNlID0geDJqcy54bWwyanNvbihyZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciByb290Tm9kZSA9IF8ua2V5cyhqc29ucmVzcG9uc2UpWzBdO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoIChyb290Tm9kZSkge1xuICAgICAgICAgIGNhc2UgJ0ZlYXR1cmVDb2xsZWN0aW9uJzpcbiAgICAgICAgICAgIHBhcnNlciA9IHRoaXMuX3BhcnNlTGF5ZXJGZWF0dXJlQ29sbGVjdGlvbjtcbiAgICAgICAgICAgIGRhdGEgPSBqc29ucmVzcG9uc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibXNHTUxPdXRwdXRcIjpcbiAgICAgICAgICAgIHBhcnNlciA9IHRoaXMuX3BhcnNlTGF5ZXJtc0dNTE91dHB1dDtcbiAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICB2YXIgbmZlYXR1cmVzID0gMFxuICAgIF8uZm9yRWFjaChxdWVyeUxheWVycyxmdW5jdGlvbihxdWVyeUxheWVyKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBwYXJzZXIuY2FsbChzZWxmLCBxdWVyeUxheWVyLCBkYXRhKVxuICAgICAgbmZlYXR1cmVzICs9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIGZlYXR1cmVzRm9yTGF5ZXJzLnB1c2goe1xuICAgICAgICBsYXllcjogcXVlcnlMYXllcixcbiAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzXG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZlYXR1cmVzRm9yTGF5ZXJzO1xuICB9O1xuICAvLyBxdWVyeSBiYXNhdG8gc3VsIGZpbHRyb1xuXG4gIHRoaXMucXVlcnlCeUZpbHRlciA9IGZ1bmN0aW9uKHF1ZXJ5RmlsdGVyT2JqZWN0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkID0gJC5EZWZlcnJlZCgpO1xuICAgIC8vcGFydGUgZGEgcml2ZWRlcmUgbmVsIGZpbHRyb1xuICAgIHZhciBwcm92aWRlciA9IFByb3ZpZGVyW3F1ZXJ5RmlsdGVyT2JqZWN0LnF1ZXJ5TGF5ZXIuZ2V0U2VydmVyVHlwZSgpXTtcbiAgICAvL3JpdG9ybmEgdW5hIHByb21pc2UgcG9pIGdlc3RpdGEgZGEgY2hlIGxhIGNoaWVkZVxuICAgIHByb3ZpZGVyLmRvU2VhcmNoKHF1ZXJ5RmlsdGVyT2JqZWN0KS5cbiAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAvL2FsIG1vbWVudG8gcXVpIHJlcGxpY28gc3RydXR0dXJhIHBlciBpIHBhcnNlclxuICAgICAgdmFyIHF1ZXJ5TGF5ZXIgPSBxdWVyeUZpbHRlck9iamVjdC5xdWVyeUxheWVyO1xuICAgICAgdmFyIGZlYXR1cmVzRm9yTGF5ZXJzID0gc2VsZi5oYW5kbGVRdWVyeVJlc3BvbnNlRnJvbVNlcnZlcihyZXNwb25zZSwgcXVlcnlMYXllci5nZXRJbmZvRm9ybWF0KCksIFtxdWVyeUxheWVyXSlcbiAgICAgIGQucmVzb2x2ZSh7XG4gICAgICAgIGRhdGE6IGZlYXR1cmVzRm9yTGF5ZXJzLFxuICAgICAgICBxdWVyeToge1xuICAgICAgICAgIGZpbHRlcjogcXVlcnlGaWx0ZXJPYmplY3RcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSlcbiAgICAuZmFpbChmdW5jdGlvbihlKXtcbiAgICAgICAgICBkLnJlamVjdChlKTtcbiAgICB9KVxuICAgIHJldHVybiBkLnByb21pc2UoKTtcbiAgfTtcbiAgXG4gIHRoaXMucXVlcnlCeUxvY2F0aW9uID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMsIGxheWVycykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZCA9ICQuRGVmZXJyZWQoKTtcbiAgICB2YXIgdXJsc0ZvckxheWVycyA9IHt9O1xuICAgIF8uZm9yRWFjaChsYXllcnMsIGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgIHZhciBxdWVyeVVybCA9IGxheWVyLmdldFF1ZXJ5VXJsKCk7XG4gICAgICBjb25zb2xlLmxvZyhxdWVyeVVybCk7XG4gICAgICB2YXIgdXJsSGFzaCA9IHF1ZXJ5VXJsLmhhc2hDb2RlKCkudG9TdHJpbmcoKTtcbiAgICAgIGlmIChfLmtleXModXJsc0ZvckxheWVycykuaW5kZXhPZih1cmxIYXNoKSA9PSAtMSkge1xuICAgICAgICB1cmxzRm9yTGF5ZXJzW3VybEhhc2hdID0ge1xuICAgICAgICAgIHVybDogcXVlcnlVcmwsXG4gICAgICAgICAgbGF5ZXJzOiBbXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdXJsc0ZvckxheWVyc1t1cmxIYXNoXS5sYXllcnMucHVzaChsYXllcik7XG4gICAgfSk7XG5cbiAgICB2YXIgcXVlcnlVcmxzRm9yTGF5ZXJzID0gW107XG4gICAgXy5mb3JFYWNoKHVybHNGb3JMYXllcnMsZnVuY3Rpb24odXJsRm9yTGF5ZXJzKXtcbiAgICAgIHZhciBxdWVyeUxheWVycyA9IHVybEZvckxheWVycy5sYXllcnM7XG4gICAgICB2YXIgaW5mb0Zvcm1hdCA9IHF1ZXJ5TGF5ZXJzWzBdLmdldEluZm9Gb3JtYXQoKTtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIExBWUVSUzogXy5tYXAocXVlcnlMYXllcnMsZnVuY3Rpb24obGF5ZXIpeyByZXR1cm4gbGF5ZXIuZ2V0UXVlcnlMYXllck5hbWUoKTsgfSksXG4gICAgICAgIFFVRVJZX0xBWUVSUzogXy5tYXAocXVlcnlMYXllcnMsZnVuY3Rpb24obGF5ZXIpeyByZXR1cm4gbGF5ZXIuZ2V0UXVlcnlMYXllck5hbWUoKTsgfSksXG4gICAgICAgIElORk9fRk9STUFUOiBpbmZvRm9ybWF0LFxuICAgICAgICAvLyBQQVJBTUVUUkkgREkgVE9MTEVSQU5aQSBQRVIgUUdJUyBTRVJWRVJcbiAgICAgICAgRklfUE9JTlRfVE9MRVJBTkNFOiAxMCxcbiAgICAgICAgRklfTElORV9UT0xFUkFOQ0U6IDEwLFxuICAgICAgICBGSV9QT0xZR09OX1RPTEVSQU5DRTogMTBcbiAgICAgIH07XG4gICAgICBcbiAgICAgIHZhciByZXNvbHV0aW9uID0gc2VsZi5fbWFwU2VydmljZS5nZXRSZXNvbHV0aW9uKCk7XG4gICAgICB2YXIgZXBzZyA9IHNlbGYuX21hcFNlcnZpY2UuZ2V0RXBzZygpO1xuICAgICAgdmFyIGdldEZlYXR1cmVJbmZvVXJsID0gc2VsZi5fbWFwU2VydmljZS5nZXRHZXRGZWF0dXJlSW5mb1VybEZvckxheWVyKHF1ZXJ5TGF5ZXJzWzBdLGNvb3JkaW5hdGVzLHJlc29sdXRpb24sZXBzZyxwYXJhbXMpO1xuICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gZ2V0RmVhdHVyZUluZm9Vcmwuc3BsaXQoJz8nKVsxXTtcbiAgICAgIHZhciB1cmwgPSB1cmxGb3JMYXllcnMudXJsKyc/JytxdWVyeVN0cmluZztcbiAgICAgIHF1ZXJ5VXJsc0ZvckxheWVycy5wdXNoKHtcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGluZm9mb3JtYXQ6IGluZm9Gb3JtYXQsXG4gICAgICAgIHF1ZXJ5TGF5ZXJzOiBxdWVyeUxheWVyc1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHF1ZXJ5VXJsc0ZvckxheWVycy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgcXVlcnlSZXF1ZXN0cyA9IFtdO1xuICAgICAgdmFyIHF1ZXJ5UmVxdWVzdHNDb250ZXh0ID0gW107XG4gICAgICB2YXIgZmVhdHVyZXNGb3JMYXllcnMgPSBbXTtcbiAgICAgIF8uZm9yRWFjaChxdWVyeVVybHNGb3JMYXllcnMsZnVuY3Rpb24ocXVlcnlVcmxGb3JMYXllcnMpe1xuICAgICAgICB2YXIgdXJsID0gcXVlcnlVcmxGb3JMYXllcnMudXJsO1xuICAgICAgICB2YXIgcXVlcnlMYXllcnMgPSBxdWVyeVVybEZvckxheWVycy5xdWVyeUxheWVycztcbiAgICAgICAgdmFyIGluZm9Gb3JtYXQgPSBxdWVyeVVybEZvckxheWVycy5pbmZvZm9ybWF0O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHNlbGYuZG9SZXF1ZXN0QW5kUGFyc2UodXJsLGluZm9Gb3JtYXQscXVlcnlMYXllcnMpO1xuICAgICAgICBxdWVyeVJlcXVlc3RzLnB1c2gocmVxdWVzdCk7XG4gICAgICB9KTtcbiAgICAgICQud2hlbi5hcHBseSh0aGlzLHF1ZXJ5UmVxdWVzdHMpLlxuICAgICAgdGhlbihmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdmVjdG9yc0RhdGFSZXNwb25zZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIF8uZm9yRWFjaCh2ZWN0b3JzRGF0YVJlc3BvbnNlLGZ1bmN0aW9uKF9mZWF0dXJlc0ZvckxheWVycyxpZHgpe1xuICAgICAgICAgIGlmKGZlYXR1cmVzRm9yTGF5ZXJzKXtcbiAgICAgICAgICAgIGZlYXR1cmVzRm9yTGF5ZXJzID0gXy5jb25jYXQoZmVhdHVyZXNGb3JMYXllcnMsX2ZlYXR1cmVzRm9yTGF5ZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkLnJlc29sdmUoe1xuICAgICAgICAgIGRhdGE6IGZlYXR1cmVzRm9yTGF5ZXJzLFxuICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZXNcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5mYWlsKGZ1bmN0aW9uKGUpe1xuICAgICAgICBkLnJlamVjdChlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGQucmVzb2x2ZShjb29yZGluYXRlcywwLHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIGQucHJvbWlzZSgpO1xuICB9O1xuICBcbiAgdGhpcy5kb1JlcXVlc3RBbmRQYXJzZSA9IGZ1bmN0aW9uKHVybCxpbmZvRm9ybWF0LHF1ZXJ5TGF5ZXJzKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGQgPSAkLkRlZmVycmVkKCk7XG4gICAgJC5nZXQodXJsKS5cbiAgICBkb25lKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgIHZhciBmZWF0dXJlc0ZvckxheWVycyA9IHNlbGYuaGFuZGxlUXVlcnlSZXNwb25zZUZyb21TZXJ2ZXIocmVzcG9uc2UsIGluZm9Gb3JtYXQsIHF1ZXJ5TGF5ZXJzKTtcbiAgICAgIGQucmVzb2x2ZShmZWF0dXJlc0ZvckxheWVycyk7XG4gICAgfSlcbiAgICAuZmFpbChmdW5jdGlvbigpe1xuICAgICAgZC5yZWplY3QoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZDtcbiAgfVxuXG4gIC8vcXVlcnkgYnkgQkJPWFxuICB0aGlzLnF1ZXJ5QnlCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKGJib3gpIHtcbiAgICAvL2NvZGljZSBxdWlcbiAgfTtcblxuXG4gIGJhc2UodGhpcyk7XG59XG5pbmhlcml0KFF1ZXJ5U2VydmljZSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICBuZXcgUXVlcnlTZXJ2aWNlXG5cbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEJhc2U2NCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5CYXNlNjQ7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcblxuLypcbiAqIFJvdXRlclNlcnZpY2UgYmFzYXRvIHN1IEhpc3RvcnkuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9icm93c2Vyc3RhdGUvaGlzdG9yeS5qcykgZSBDcm9zc3JvYWRzIChodHRwczovL2dpdGh1Yi5jb20vbWlsbGVybWVkZWlyb3MvY3Jvc3Nyb2Fkcy5qcylcbiAqIElsIGNvbmNldHRvIGRpIGJhc2Ugw6ggdW5hIFJvdXRlUXVlcnksIGRlbCB0aXBvIFwibWFwP3BvaW50PTIxLjIsNDIuMSZ6b29tPTEyXCIsIFxuICogY2hlIHZpZW5lIGluc2VyaXRvIG5lbGxvIHN0YXRvIGRlbGwnaGlzdG9yeSBkZWwgYnJvd3NlciBlIG5lbGxhIFVSTCBjb21lIHBhcmFtZXRybyBxdWVyeXN0cmluZyBpbiBmb3JtYSBjb2RpZmljYXRhIChxPW1hcEBwb2ludCEyMS4yLDQxLjF8em9vbSExMikuXG4gKiBQZXIgaW52b2NhcmUgdW5hIFJvdXRlUXVlcnk6XG4gKiBcbiAqIFJvdXRlclNlcnZpY2UuZ290byhcIm1hcD9wb2ludD0yMS4yLDQyLjEmem9vbT0xMlwiKTtcbiAqIFxuICogQ2hpdW5xdWUgdm9nbGlhIHJpc3BvbmRlcmUgYWQgdW5hIFJvdXRlUXVlcnkgZGV2ZSBhZ2dpdW5nZXJlIHVuYSByb3V0ZSBjb24gUm91dGVyU2VydmljZS5hZGRSb3V0ZShwYXR0ZXJuLCBjYWxsYmFjaykuIEVzLjpcbiAqIFxuICogdmFyIHJvdXRlID0gUm91dGVyU2VydmljZS5hZGRSb3V0ZSgnbWFwL3s/cXVlcnl9JyxmdW5jdGlvbihxdWVyeSl7XG4gKiAgY29uc29sZS5sb2cocXVlcnkucG9pbnQpO1xuICogIGNvbnNvbGUubG9nKHF1ZXJ5Lnpvb20pO1xuICogfSk7XG4gKiBcbiAqIFBhdHRlcm5zOlxuICogIFwibWFwL3tmb299XCI6IGxhIHBvcnppb25lIFwiZm9vXCIgw6ggcmljaGllc3RhLCBlZCB2aWVuZSBwYXNzYXRhIGNvbWUgcGFyYW1ldHJvIGFsbGEgY2FsbGJhY2tcbiAqICBcIm1hcC86Zm9vOlwiOiBsYSBwb3J6aW9uZSBcImZvb1wiIMOoIG9wemlvbmFsZSwgZWQgZXZlbnR1YWxtZW50ZSB2aWVuZSBwYXNzYXRhIGNvbWUgcGFyYW1ldHJvIGFsbGEgY2FsbGJhY2tcbiAqICBcIm1hcC86Zm9vKjogdHV0dG8gcXVlbGxvIGNoZSB2aWVuZSBkb3BvIFwibWFwL1wiXG4gKiAgXCJtYXAvez9xdWVyeXN0cmluZ31cIjogb2JibGlnYXRvcmlhIHF1ZXJ5c3RyaW5nLCBwYXNzYXRhIGFsbGEgY2FsbGJhY2sgY29tZSBvZ2dldHRvIGRlaSBwYXJhbWV0cmlcbiAqICBcIm1hcC86P3F1ZXJ5c3RyaW5nOlwiOiBldmVudHVhbGUgcXVlcnlzdHJpbmcsIHBhc3NhdGEgYWxsYSBjYWxsYmFjayBjb21lIG9nZ2V0dG8gZGVpIHBhcmFtZXRyaVxuICogXG4gKiBQZXIgcmltdW92ZXJlIHVuYSByb3V0ZTpcbiAqIFJvdXRlclNlcnZpY2UucmVtb3ZlUm91dGUocm91dGUpO1xuKi9cblxudmFyIFJvdXRlclNlcnZpY2UgPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX2luaXRpYWxMb2NhdGlvblF1ZXJ5O1xuICB0aGlzLl9yb3V0ZVF1ZXJ5ID0gJyc7XG4gIHRoaXMuc2V0dGVycyA9IHtcbiAgICBzZXRSb3V0ZVF1ZXJ5OiBmdW5jdGlvbihyb3V0ZVF1ZXJ5KXtcbiAgICAgIHRoaXMuX3JvdXRlUXVlcnkgPSByb3V0ZVF1ZXJ5O1xuICAgICAgY3Jvc3Nyb2Fkcy5wYXJzZShyb3V0ZVF1ZXJ5KTtcbiAgICB9XG4gIH1cbiAgXG4gIEhpc3RvcnkuQWRhcHRlci5iaW5kKHdpbmRvdywnc3RhdGVjaGFuZ2UnLGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgc3RhdGUgPSBIaXN0b3J5LmdldFN0YXRlKCk7XG4gICAgICB2YXIgbG9jYXRpb25RdWVyeSA9IHN0YXRlLmhhc2g7XG4gICAgICBpZihzdGF0ZS5kYXRhICYmIHN0YXRlLmRhdGEucm91dGVxdWVyeSl7XG4gICAgICAgICBzZWxmLnNldFJvdXRlUXVlcnkoc3RhdGUuZGF0YS5yb3V0ZXF1ZXJ5KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxmLl9zZXRSb3V0ZVF1ZXJ5RnJvbUxvY2F0aW9uUXVlcnkobG9jYXRpb25RdWVyeSk7XG4gICAgICB9XG4gIH0pO1xuICBcbiAgYmFzZSh0aGlzKTtcbn07XG5pbmhlcml0KFJvdXRlclNlcnZpY2UsRzNXT2JqZWN0KTtcblxudmFyIHByb3RvID0gUm91dGVyU2VydmljZS5wcm90b3R5cGU7XG5cbnByb3RvLmluaXQgPSBmdW5jdGlvbigpe1xuICB2YXIgcXVlcnkgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuICB0aGlzLl9zZXRSb3V0ZVF1ZXJ5RnJvbUxvY2F0aW9uUXVlcnkocXVlcnkpO1xufTtcblxucHJvdG8uYWRkUm91dGUgPSBmdW5jdGlvbihwYXR0ZXJuLGhhbmRsZXIscHJpb3JpdHkpIHtcbiAgcmV0dXJuIGNyb3Nzcm9hZHMuYWRkUm91dGUocGF0dGVybixoYW5kbGVyLHByaW9yaXR5KTtcbn07XG5cbnByb3RvLnJlbW92ZVJvdXRlID0gZnVuY3Rpb24ocm91dGUpIHtcbiAgcmV0dXJuIGNyb3Nzcm9hZHMucmVtb3ZlUm91dGUocm91dGUpO1xufTtcblxucHJvdG8ucmVtb3ZlQWxsUm91dGVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjcm9zc3JvYWRzLnJlbW92ZUFsbFJvdXRlcygpO1xufTtcblxucHJvdG8ucGFyc2UgPSBmdW5jdGlvbihyZXF1ZXN0LGRlZmF1bHRBcmdzKSB7XG4gIHJldHVybiBjcm9zc3JvYWRzLnBhcnNlKHJlcXVlc3QsZGVmYXVsdEFyZ3MpO1xufTtcblxucHJvdG8uZ290byA9IGZ1bmN0aW9uKHJvdXRlUXVlcnkpe1xuICAvL3ZhciBwYXRoYjY0ID0gQmFzZTY0LmVuY29kZShwYXRoKTtcbiAgLy9IaXN0b3J5LnB1c2hTdGF0ZSh7cGF0aDpwYXRofSxudWxsLCc/cD0nK3BhdGhiNjQpO1xuICBpZiAoIXRoaXMuX2luaXRpYWxRdWVyeSkge1xuICAgIHRoaXMuX2luaXRpYWxMb2NhdGlvblF1ZXJ5ID0gdGhpcy5fc3RyaXBJbml0aWFsUXVlcnkobG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gIH1cbiAgaWYgKHJvdXRlUXVlcnkpIHtcbiAgICBlbmNvZGVkUm91dGVRdWVyeSA9IHRoaXMuX2VuY29kZVJvdXRlUXVlcnkocm91dGVRdWVyeSk7XG4gICAgdmFyIHBhdGggPSAnPycrdGhpcy5faW5pdGlhbExvY2F0aW9uUXVlcnkgKyAnJnE9JytlbmNvZGVkUm91dGVRdWVyeTtcbiAgICBIaXN0b3J5LnB1c2hTdGF0ZSh7cm91dGVxdWVyeTpyb3V0ZVF1ZXJ5fSxudWxsLHBhdGgpO1xuICB9XG59O1xuXG5wcm90by5tYWtlUXVlcnlTdHJpbmcgPSBmdW5jdGlvbihxdWVyeVBhcmFtcyl7fTtcblxucHJvdG8uc2xpY2VQYXRoID0gZnVuY3Rpb24ocGF0aCl7XG4gIHJldHVybiBwYXRoLnNwbGl0KCc/JylbMF0uc3BsaXQoJy8nKTtcbn07XG4gIFxucHJvdG8uc2xpY2VGaXJzdCA9IGZ1bmN0aW9uKHBhdGgpe1xuICB2YXIgcGF0aEFuZFF1ZXJ5ID0gcGF0aC5zcGxpdCgnPycpO1xuICB2YXIgcXVlcnlTdHJpbmcgPSBwYXRoQW5kUXVlcnlbMV07XG4gIHZhciBwYXRoQXJyID0gcGF0aEFuZFF1ZXJ5WzBdLnNwbGl0KCcvJylcbiAgdmFyIGZpcnN0UGF0aCA9IHBhdGhBcnJbMF07XG4gIHBhdGggPSBwYXRoQXJyLnNsaWNlKDEpLmpvaW4oJy8nKTtcbiAgcGF0aCA9IFtwYXRoLHF1ZXJ5U3RyaW5nXS5qb2luKCc/JylcbiAgcmV0dXJuIFtmaXJzdFBhdGgscGF0aF07XG59O1xuICBcbnByb3RvLmdldFF1ZXJ5UGFyYW1zID0gZnVuY3Rpb24ocXVlcnkpe1xuICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoJz8nLCcnKTtcbiAgdmFyIHF1ZXJ5UGFyYW1zID0ge307XG4gIHZhciBxdWVyeVBhaXJzID0gW107XG4gIGlmIChxdWVyeSAhPSBcIlwiICYmIHF1ZXJ5LmluZGV4T2YoXCImXCIpID09IC0xKSB7XG4gICAgcXVlcnlQYWlycyA9IFtxdWVyeV07XG4gIH1cbiAgZWxzZSB7XG4gICAgcXVlcnlQYWlycyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICBfLmZvckVhY2gocXVlcnlQYWlycyxmdW5jdGlvbihxdWVyeVBhaXIpe1xuICAgICAgdmFyIHBhaXIgPSBxdWVyeVBhaXIuc3BsaXQoJz0nKTtcbiAgICAgIHZhciBrZXkgPSBwYWlyWzBdO1xuICAgICAgdmFyIHZhbHVlID0gcGFpclsxXTtcbiAgICAgIHF1ZXJ5UGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuICBjYXRjaCAoZSkge31cbiAgcmV0dXJuIHF1ZXJ5UGFyYW1zO1xufTtcblxucHJvdG8uZ2V0UXVlcnlTdHJpbmcgPSBmdW5jdGlvbihwYXRoKXtcbiAgcmV0dXJuIHBhdGguc3BsaXQoJz8nKVsxXTtcbn07XG5cbnByb3RvLl9nZXRRdWVyeVBvcnRpb24gPSBmdW5jdGlvbihxdWVyeSxxdWVyeUtleSl7XG4gIHZhciBxdWVyeVBvcnRpb247XG4gIHRyeSB7XG4gICAgdmFyIHF1ZXJ5UGFpcnMgPSBxdWVyeS5zcGxpdCgnJicpO1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHt9O1xuICAgIF8uZm9yRWFjaChxdWVyeVBhaXJzLGZ1bmN0aW9uKHF1ZXJ5UGFpcil7XG4gICAgICB2YXIgcGFpciA9IHF1ZXJ5UGFpci5zcGxpdCgnPScpO1xuICAgICAgdmFyIGtleSA9IHBhaXJbMF07XG4gICAgICBpZiAoa2V5ID09IHF1ZXJ5S2V5KSB7XG4gICAgICAgIHF1ZXJ5UG9ydGlvbiA9IHF1ZXJ5UGFpcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjYXRjaCAoZSkge31cbiAgcmV0dXJuIHF1ZXJ5UG9ydGlvbjtcbn07XG5cbnByb3RvLl9lbmNvZGVSb3V0ZVF1ZXJ5ID0gZnVuY3Rpb24ocm91dGVRdWVyeSkge1xuICByb3V0ZVF1ZXJ5ID0gcm91dGVRdWVyeS5yZXBsYWNlKCc/JywnQCcpO1xuICByb3V0ZVF1ZXJ5ID0gcm91dGVRdWVyeS5yZXBsYWNlKCcmJywnfCcpO1xuICByb3V0ZVF1ZXJ5ID0gcm91dGVRdWVyeS5yZXBsYWNlKCc9JywnIScpO1xuICByZXR1cm4gcm91dGVRdWVyeTtcbn07XG5cbnByb3RvLl9kZWNvZGVSb3V0ZVF1ZXJ5ID0gZnVuY3Rpb24ocm91dGVRdWVyeSkge1xuICByb3V0ZVF1ZXJ5ID0gcm91dGVRdWVyeS5yZXBsYWNlKCdAJywnPycpO1xuICByb3V0ZVF1ZXJ5ID0gcm91dGVRdWVyeS5yZXBsYWNlKCd8JywnJicpO1xuICByb3V0ZVF1ZXJ5ID0gcm91dGVRdWVyeS5yZXBsYWNlKCchJywnPScpO1xuICByZXR1cm4gcm91dGVRdWVyeTtcbn07XG5cbnByb3RvLl9zZXRSb3V0ZVF1ZXJ5RnJvbUxvY2F0aW9uUXVlcnkgPSBmdW5jdGlvbihsb2NhdGlvblF1ZXJ5KSB7XG4gIC8vdmFyIHBhdGhiNjQgPSB0aGlzLmdldFF1ZXJ5UGFyYW1zKGxvY2F0aW9uUXVlcnkpWydxJ107XG4gIC8vdmFyIHBhdGggPSBwYXRoYjY0ID8gQmFzZTY0LmRlY29kZShwYXRoYjY0KSA6ICcnO1xuICB2YXIgZW5jb2RlZFJvdXRlUXVlcnkgPSB0aGlzLl9nZXRSb3V0ZVF1ZXJ5RnJvbUxvY2F0aW9uUXVlcnkobG9jYXRpb25RdWVyeSk7XG4gIGlmIChlbmNvZGVkUm91dGVRdWVyeSkge1xuICAgIHZhciByb3V0ZVF1ZXJ5ID0gdGhpcy5fZGVjb2RlUm91dGVRdWVyeShlbmNvZGVkUm91dGVRdWVyeSk7XG4gICAgdGhpcy5zZXRSb3V0ZVF1ZXJ5KHJvdXRlUXVlcnkpO1xuICB9XG59O1xuXG5wcm90by5fZ2V0Um91dGVRdWVyeUZyb21Mb2NhdGlvblF1ZXJ5ID0gZnVuY3Rpb24obG9jYXRpb25RdWVyeSkge1xuICByZXR1cm4gdGhpcy5nZXRRdWVyeVBhcmFtcyhsb2NhdGlvblF1ZXJ5KVsncSddO1xufTtcblxucHJvdG8uX3N0cmlwSW5pdGlhbFF1ZXJ5ID0gZnVuY3Rpb24obG9jYXRpb25RdWVyeSkge1xuICB2YXIgcHJldmlvdXNRdWVyeSA9IHRoaXMuX2dldFF1ZXJ5UG9ydGlvbihsb2NhdGlvblF1ZXJ5LCdxJyk7XG4gIGlmIChwcmV2aW91c1F1ZXJ5KSB7XG4gICAgdmFyIHByZXZpb3VzUXVlcnlMZW5ndGggPSBwcmV2aW91c1F1ZXJ5Lmxlbmd0aDtcbiAgICB2YXIgcHJldmlvdXNRdWVyeVBvc2l0aW9uID0gbG9jYXRpb25RdWVyeS5pbmRleE9mKHByZXZpb3VzUXVlcnkpO1xuICAgIHF1ZXJ5UHJlZml4ID0gXy50cmltRW5kKGxvY2F0aW9uUXVlcnkuc3Vic3RyaW5nKDAscHJldmlvdXNRdWVyeVBvc2l0aW9uKSxcIiZcIik7XG4gICAgcXVlcnlTdWZmaXggPSBsb2NhdGlvblF1ZXJ5LnN1YnN0cmluZyhwcmV2aW91c1F1ZXJ5UG9zaXRpb24rcHJldmlvdXNRdWVyeUxlbmd0aCk7XG4gICAgcXVlcnlTdWZmaXggPSAocXVlcnlQcmVmaXggIT0gXCJcIikgPyBxdWVyeVN1ZmZpeCA6IF8udHJpbVN0YXJ0KHF1ZXJ5U3VmZml4LFwiJlwiKTtcbiAgICBsb2NhdGlvblF1ZXJ5ID0gcXVlcnlQcmVmaXggKyBxdWVyeVN1ZmZpeDtcbiAgfVxuICByZXR1cm4gbG9jYXRpb25RdWVyeTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFJvdXRlclNlcnZpY2U7XG4iLCJ2YXIgT0dDX1BJWEVMX1dJRFRIID0gMC4yODtcbnZhciBPR0NfRFBJID0gMjUuNC9PR0NfUElYRUxfV0lEVEg7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZXNUb1NjYWxlOiBmdW5jdGlvbihyZXMsIG1ldHJpYykge1xuICAgIHZhciBtZXRyaWMgPSBtZXRyaWMgfHwgJ20nO1xuICAgIHZhciBzY2FsZTtcbiAgICBzd2l0Y2ggKG1ldHJpYykge1xuICAgICAgY2FzZSAnbSc6XG4gICAgICAgIHZhciBzY2FsZSA9IChyZXMqMTAwMCkgLyBPR0NfUElYRUxfV0lEVEg7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBEZWNpbWFsIGFkanVzdG1lbnQgb2YgYSBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9ICB0eXBlICBUaGUgdHlwZSBvZiBhZGp1c3RtZW50LlxuICogQHBhcmFtIHtOdW1iZXJ9ICB2YWx1ZSBUaGUgbnVtYmVyLlxuICogQHBhcmFtIHtJbnRlZ2VyfSBleHAgICBUaGUgZXhwb25lbnQgKHRoZSAxMCBsb2dhcml0aG0gb2YgdGhlIGFkanVzdG1lbnQgYmFzZSkuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYWRqdXN0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGRlY2ltYWxBZGp1c3QodHlwZSwgdmFsdWUsIGV4cCkge1xuICAvLyBJZiB0aGUgZXhwIGlzIHVuZGVmaW5lZCBvciB6ZXJvLi4uXG4gIGlmICh0eXBlb2YgZXhwID09PSAndW5kZWZpbmVkJyB8fCArZXhwID09PSAwKSB7XG4gICAgcmV0dXJuIE1hdGhbdHlwZV0odmFsdWUpO1xuICB9XG4gIHZhbHVlID0gK3ZhbHVlO1xuICBleHAgPSArZXhwO1xuICAvLyBJZiB0aGUgdmFsdWUgaXMgbm90IGEgbnVtYmVyIG9yIHRoZSBleHAgaXMgbm90IGFuIGludGVnZXIuLi5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCAhKHR5cGVvZiBleHAgPT09ICdudW1iZXInICYmIGV4cCAlIDEgPT09IDApKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICAvLyBTaGlmdFxuICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJ2UnKTtcbiAgdmFsdWUgPSBNYXRoW3R5cGVdKCsodmFsdWVbMF0gKyAnZScgKyAodmFsdWVbMV0gPyAoK3ZhbHVlWzFdIC0gZXhwKSA6IC1leHApKSk7XG4gIC8vIFNoaWZ0IGJhY2tcbiAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KCdlJyk7XG4gIHJldHVybiArKHZhbHVlWzBdICsgJ2UnICsgKHZhbHVlWzFdID8gKCt2YWx1ZVsxXSArIGV4cCkgOiBleHApKTtcbn1cblxuLy8gRGVjaW1hbCByb3VuZFxuaWYgKCFNYXRoLnJvdW5kMTApIHtcbiAgTWF0aC5yb3VuZDEwID0gZnVuY3Rpb24odmFsdWUsIGV4cCkge1xuICAgIHJldHVybiBkZWNpbWFsQWRqdXN0KCdyb3VuZCcsIHZhbHVlLCBleHApO1xuICB9O1xufVxuLy8gRGVjaW1hbCBmbG9vclxuaWYgKCFNYXRoLmZsb29yMTApIHtcbiAgTWF0aC5mbG9vcjEwID0gZnVuY3Rpb24odmFsdWUsIGV4cCkge1xuICAgIHJldHVybiBkZWNpbWFsQWRqdXN0KCdmbG9vcicsIHZhbHVlLCBleHApO1xuICB9O1xufVxuLy8gRGVjaW1hbCBjZWlsXG5pZiAoIU1hdGguY2VpbDEwKSB7XG4gIE1hdGguY2VpbDEwID0gZnVuY3Rpb24odmFsdWUsIGV4cCkge1xuICAgIHJldHVybiBkZWNpbWFsQWRqdXN0KCdjZWlsJywgdmFsdWUsIGV4cCk7XG4gIH07XG59XG5cblN0cmluZy5wcm90b3R5cGUuaGFzaENvZGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhhc2ggPSAwLCBpLCBjaHIsIGxlbjtcbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgZm9yIChpID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNociAgID0gdGhpcy5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XG4gICAgaGFzaCB8PSAwO1xuICB9XG4gIHJldHVybiBoYXNoO1xufTtcblxudmFyIEJhc2U2NCA9IHtfa2V5U3RyOlwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIixlbmNvZGU6ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjt2YXIgbixyLGkscyxvLHUsYTt2YXIgZj0wO2U9QmFzZTY0Ll91dGY4X2VuY29kZShlKTt3aGlsZShmPGUubGVuZ3RoKXtuPWUuY2hhckNvZGVBdChmKyspO3I9ZS5jaGFyQ29kZUF0KGYrKyk7aT1lLmNoYXJDb2RlQXQoZisrKTtzPW4+PjI7bz0obiYzKTw8NHxyPj40O3U9KHImMTUpPDwyfGk+PjY7YT1pJjYzO2lmKGlzTmFOKHIpKXt1PWE9NjR9ZWxzZSBpZihpc05hTihpKSl7YT02NH10PXQrdGhpcy5fa2V5U3RyLmNoYXJBdChzKSt0aGlzLl9rZXlTdHIuY2hhckF0KG8pK3RoaXMuX2tleVN0ci5jaGFyQXQodSkrdGhpcy5fa2V5U3RyLmNoYXJBdChhKX1yZXR1cm4gdH0sZGVjb2RlOmZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7dmFyIG4scixpO3ZhciBzLG8sdSxhO3ZhciBmPTA7ZT1lLnJlcGxhY2UoL1teQS1aYS16MC05Ky89XS9nLFwiXCIpO3doaWxlKGY8ZS5sZW5ndGgpe3M9dGhpcy5fa2V5U3RyLmluZGV4T2YoZS5jaGFyQXQoZisrKSk7bz10aGlzLl9rZXlTdHIuaW5kZXhPZihlLmNoYXJBdChmKyspKTt1PXRoaXMuX2tleVN0ci5pbmRleE9mKGUuY2hhckF0KGYrKykpO2E9dGhpcy5fa2V5U3RyLmluZGV4T2YoZS5jaGFyQXQoZisrKSk7bj1zPDwyfG8+PjQ7cj0obyYxNSk8PDR8dT4+MjtpPSh1JjMpPDw2fGE7dD10K1N0cmluZy5mcm9tQ2hhckNvZGUobik7aWYodSE9NjQpe3Q9dCtTdHJpbmcuZnJvbUNoYXJDb2RlKHIpfWlmKGEhPTY0KXt0PXQrU3RyaW5nLmZyb21DaGFyQ29kZShpKX19dD1CYXNlNjQuX3V0ZjhfZGVjb2RlKHQpO3JldHVybiB0fSxfdXRmOF9lbmNvZGU6ZnVuY3Rpb24oZSl7ZT1lLnJlcGxhY2UoL3JuL2csXCJuXCIpO3ZhciB0PVwiXCI7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWUuY2hhckNvZGVBdChuKTtpZihyPDEyOCl7dCs9U3RyaW5nLmZyb21DaGFyQ29kZShyKX1lbHNlIGlmKHI+MTI3JiZyPDIwNDgpe3QrPVN0cmluZy5mcm9tQ2hhckNvZGUocj4+NnwxOTIpO3QrPVN0cmluZy5mcm9tQ2hhckNvZGUociY2M3wxMjgpfWVsc2V7dCs9U3RyaW5nLmZyb21DaGFyQ29kZShyPj4xMnwyMjQpO3QrPVN0cmluZy5mcm9tQ2hhckNvZGUocj4+NiY2M3wxMjgpO3QrPVN0cmluZy5mcm9tQ2hhckNvZGUociY2M3wxMjgpfX1yZXR1cm4gdH0sX3V0ZjhfZGVjb2RlOmZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7dmFyIG49MDt2YXIgcj1jMT1jMj0wO3doaWxlKG48ZS5sZW5ndGgpe3I9ZS5jaGFyQ29kZUF0KG4pO2lmKHI8MTI4KXt0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKHIpO24rK31lbHNlIGlmKHI+MTkxJiZyPDIyNCl7YzI9ZS5jaGFyQ29kZUF0KG4rMSk7dCs9U3RyaW5nLmZyb21DaGFyQ29kZSgociYzMSk8PDZ8YzImNjMpO24rPTJ9ZWxzZXtjMj1lLmNoYXJDb2RlQXQobisxKTtjMz1lLmNoYXJDb2RlQXQobisyKTt0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKChyJjE1KTw8MTJ8KGMyJjYzKTw8NnxjMyY2Myk7bis9M319cmV0dXJuIHR9fTtcblxuXG52YXIgdXRpbHMgPSB7XG4gIG1peGluOiBmdW5jdGlvbiBtaXhpbihkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UoZGVzdGluYXRpb24ucHJvdG90eXBlLCBzb3VyY2UpO1xuICB9LFxuICBcbiAgbWl4aW5pbnN0YW5jZTogZnVuY3Rpb24gbWl4aW5pbnN0YW5jZShkZXN0aW5hdGlvbixzb3VyY2Upe1xuICAgICAgdmFyIHNvdXJjZUluc3RhbmNlID0gbmV3IHNvdXJjZTtcbiAgICAgIHV0aWxzLm1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2VJbnN0YW5jZSk7XG4gICAgICB1dGlscy5tZXJnZShkZXN0aW5hdGlvbi5wcm90b3R5cGUsIHNvdXJjZS5wcm90b3R5cGUpO1xuICB9LFxuXG5cbiAgbWVyZ2U6IGZ1bmN0aW9uIG1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgIHZhciBrZXk7XG5cbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmICh1dGlscy5oYXNPd24oc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gIH0sXG5cbiAgaGFzT3duOiBmdW5jdGlvbiBoYXNPd24ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICB9LFxuICBcbiAgaW5oZXJpdDpmdW5jdGlvbihjaGlsZEN0b3IsIHBhcmVudEN0b3IpIHtcbiAgICBmdW5jdGlvbiB0ZW1wQ3RvcigpIHt9O1xuICAgIHRlbXBDdG9yLnByb3RvdHlwZSA9IHBhcmVudEN0b3IucHJvdG90eXBlO1xuICAgIGNoaWxkQ3Rvci5zdXBlckNsYXNzXyA9IHBhcmVudEN0b3IucHJvdG90eXBlO1xuICAgIGNoaWxkQ3Rvci5wcm90b3R5cGUgPSBuZXcgdGVtcEN0b3IoKTtcbiAgICBjaGlsZEN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY2hpbGRDdG9yO1xuICB9LFxuICBcbiAgYmFzZTogZnVuY3Rpb24obWUsIG9wdF9tZXRob2ROYW1lLCB2YXJfYXJncykge1xuXG4gICAgdmFyIGNhbGxlciA9IGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO1xuICAgIGlmIChjYWxsZXIuc3VwZXJDbGFzc18pIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBjb25zdHJ1Y3Rvci4gQ2FsbCB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci5cbiAgICAgIHJldHVybiBjYWxsZXIuc3VwZXJDbGFzc18uY29uc3RydWN0b3IuYXBwbHkoXG4gICAgICAgICAgbWUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIH1cblxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgZm91bmRDYWxsZXIgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBjdG9yID0gbWUuY29uc3RydWN0b3I7XG4gICAgICAgICBjdG9yOyBjdG9yID0gY3Rvci5zdXBlckNsYXNzXyAmJiBjdG9yLnN1cGVyQ2xhc3NfLmNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoY3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdID09PSBjYWxsZXIpIHtcbiAgICAgICAgZm91bmRDYWxsZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmb3VuZENhbGxlcikge1xuICAgICAgICByZXR1cm4gY3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdLmFwcGx5KG1lLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBkaWQgbm90IGZpbmQgdGhlIGNhbGxlciBpbiB0aGUgcHJvdG90eXBlIGNoYWluLFxuICAgIC8vIHRoZW4gb25lIG9mIHR3byB0aGluZ3MgaGFwcGVuZWQ6XG4gICAgLy8gMSkgVGhlIGNhbGxlciBpcyBhbiBpbnN0YW5jZSBtZXRob2QuXG4gICAgLy8gMikgVGhpcyBtZXRob2Qgd2FzIG5vdCBjYWxsZWQgYnkgdGhlIHJpZ2h0IGNhbGxlci5cbiAgICBpZiAobWVbb3B0X21ldGhvZE5hbWVdID09PSBjYWxsZXIpIHtcbiAgICAgIHJldHVybiBtZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdLmFwcGx5KG1lLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgJ2Jhc2UgY2FsbGVkIGZyb20gYSBtZXRob2Qgb2Ygb25lIG5hbWUgJyArXG4gICAgICAgICAgJ3RvIGEgbWV0aG9kIG9mIGEgZGlmZmVyZW50IG5hbWUnKTtcbiAgICB9XG4gIH0sXG4gIFxuICBub29wOiBmdW5jdGlvbigpe30sXG4gIFxuICB0cnVlZm5jOiBmdW5jdGlvbigpe3JldHVybiB0cnVlfSxcbiAgXG4gIGZhbHNlZm5jOiBmdW5jdGlvbigpe3JldHVybiB0cnVlfSxcbiAgXG4gIHJlc29sdmU6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfSxcbiAgXG4gIHJlamVjdDogZnVuY3Rpb24odmFsdWUpe1xuICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICBkZWZlcnJlZC5yZWplY3QodmFsdWUpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gIH0sXG4gIFxuICBCYXNlNjQ6IEJhc2U2NFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlscztcbiIsInZhciBDb250cm9sID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IFwiP1wiO1xuICB0aGlzLm5hbWUgPSBuYW1lLnNwbGl0KCcgJykuam9pbignLScpLnRvTG93ZXJDYXNlKCk7XG4gIHRoaXMuaWQgPSB0aGlzLm5hbWUrJ18nKyhNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKSk7XG4gIFxuICB0aGlzLnBvc2l0aW9uQ29kZSA9IG9wdGlvbnMucG9zaXRpb24gfHwgJ3RsJztcbiAgXG4gIFxuICBpZiAoIW9wdGlvbnMuZWxlbWVudCkge1xuICAgIHZhciBjbGFzc05hbWUgPSBcIm9sLVwiK3RoaXMubmFtZS5zcGxpdCgnICcpLmpvaW4oJy0nKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciB0aXBMYWJlbCA9IG9wdGlvbnMudGlwTGFiZWwgfHwgdGhpcy5uYW1lO1xuICAgIHZhciBsYWJlbCA9IG9wdGlvbnMubGFiZWwgfHwgXCI/XCI7XG4gICAgXG4gICAgb3B0aW9ucy5lbGVtZW50ID0gJCgnPGRpdiBjbGFzcz1cIicrY2xhc3NOYW1lKycgb2wtdW5zZWxlY3RhYmxlIG9sLWNvbnRyb2xcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiB0aXRsZT1cIicrdGlwTGFiZWwrJ1wiPicrbGFiZWwrJzwvYnV0dG9uPjwvZGl2PicpWzBdO1xuICB9XG4gIFxuICAkKG9wdGlvbnMuZWxlbWVudCkuYWRkQ2xhc3MoXCJvbC1jb250cm9sLVwiK3RoaXMucG9zaXRpb25Db2RlKTtcbiAgXG4gIHZhciBidXR0b25DbGlja0hhbmRsZXIgPSBvcHRpb25zLmJ1dHRvbkNsaWNrSGFuZGxlciB8fCBDb250cm9sLnByb3RvdHlwZS5faGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcbiAgXG4gICQob3B0aW9ucy5lbGVtZW50KS5vbignY2xpY2snLGJ1dHRvbkNsaWNrSGFuZGxlcik7XG4gIFxuICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLG9wdGlvbnMpO1xuICBcbiAgdGhpcy5fcG9zdFJlbmRlcigpO1xufVxub2wuaW5oZXJpdHMoQ29udHJvbCwgb2wuY29udHJvbC5Db250cm9sKTtcblxudmFyIHByb3RvID0gQ29udHJvbC5wcm90b3R5cGU7XG5cbnByb3RvLmdldFBvc2l0aW9uID0gZnVuY3Rpb24ocG9zaXRpb25Db2RlKSB7XG4gIHZhciBwb3NpdGlvbkNvZGUgPSBwb3NpdGlvbkNvZGUgfHwgdGhpcy5wb3NpdGlvbkNvZGU7XG4gIHZhciBwb3NpdGlvbiA9IHt9O1xuICBwb3NpdGlvblsndG9wJ10gPSAocG9zaXRpb25Db2RlLmluZGV4T2YoJ3QnKSA+IC0xKSA/IHRydWUgOiBmYWxzZTtcbiAgcG9zaXRpb25bJ2xlZnQnXSA9IChwb3NpdGlvbkNvZGUuaW5kZXhPZignbCcpID4gLTEpID8gdHJ1ZSA6IGZhbHNlO1xuICByZXR1cm4gcG9zaXRpb247XG59O1xuXG5wcm90by5faGFuZGxlQ2xpY2sgPSBmdW5jdGlvbigpe1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBtYXAgPSB0aGlzLmdldE1hcCgpO1xuICBcbiAgdmFyIHJlc2V0Q29udHJvbCA9IG51bGw7XG4gIC8vIHJlbW92ZSBhbGwgdGhlIG90aGVyLCBldmVudHVhbGx5IHRvZ2dsZWQsIGludGVyYWN0aW9uY29udHJvbHNcbiAgdmFyIGNvbnRyb2xzID0gbWFwLmdldENvbnRyb2xzKCk7XG4gIGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24oY29udHJvbCl7XG4gICAgaWYoY29udHJvbC5pZCAmJiBjb250cm9sLnRvZ2dsZSAmJiAoY29udHJvbC5pZCAhPSBzZWxmLmlkKSkge1xuICAgICAgY29udHJvbC50b2dnbGUoZmFsc2UpO1xuICAgICAgaWYgKGNvbnRyb2wubmFtZSA9PSAncmVzZXQnKSB7XG4gICAgICAgIHJlc2V0Q29udHJvbCA9IGNvbnRyb2w7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgaWYgKCFzZWxmLl90b2dnbGVkICYmIHJlc2V0Q29udHJvbCkge1xuICAgIHJlc2V0Q29udHJvbC50b2dnbGUodHJ1ZSk7XG4gIH1cbn07XG5cbnByb3RvLnNldE1hcCA9IGZ1bmN0aW9uKG1hcCl7XG4gIHZhciBwb3NpdGlvbiA9ICB0aGlzLmdldFBvc2l0aW9uKCk7XG4gIHZhciB2aWV3UG9ydCA9IG1hcC5nZXRWaWV3cG9ydCgpO1xuICB2YXIgcHJldml1c0NvbnRyb2xzID0gJCh2aWV3UG9ydCkuZmluZCgnLm9sLWNvbnRyb2wtJyt0aGlzLnBvc2l0aW9uQ29kZSk7XG4gIGlmIChwcmV2aXVzQ29udHJvbHMubGVuZ3RoKSB7XG4gICAgcHJldml1c0NvbnRyb2wgPSBwcmV2aXVzQ29udHJvbHMubGFzdCgpO1xuICAgIHZhciBwcmV2aW91c09mZnNldCA9IHBvc2l0aW9uLmxlZnQgPyBwcmV2aXVzQ29udHJvbC5wb3NpdGlvbigpLmxlZnQgOiBwcmV2aXVzQ29udHJvbC5wb3NpdGlvbigpLnJpZ2h0O1xuICAgIHZhciBoV2hlcmUgPSBwb3NpdGlvbi5sZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHByZXZpdXNDb250cm9sWzBdLm9mZnNldFdpZHRoO1xuICAgIHZhciBoT2Zmc2V0ID0gJCh0aGlzLmVsZW1lbnQpLnBvc2l0aW9uKClbaFdoZXJlXSArIHByZXZpb3VzT2Zmc2V0ICsgcHJldmlvdXNXaWR0aCArIDI7XG4gICAgJCh0aGlzLmVsZW1lbnQpLmNzcyhoV2hlcmUsaE9mZnNldCsncHgnKTtcbiAgfVxuICBcbiAgb2wuY29udHJvbC5Db250cm9sLnByb3RvdHlwZS5zZXRNYXAuY2FsbCh0aGlzLG1hcCk7XG59O1xuXG5wcm90by5fcG9zdFJlbmRlciA9IGZ1bmN0aW9uKCkge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udHJvbDtcbiIsInZhciBDb250cm9sID0gcmVxdWlyZSgnLi9jb250cm9sJyk7XG5cbnZhciBJbnRlcmFjdGlvbkNvbnRyb2wgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgdGhpcy5fdG9nZ2xlZCA9IHRoaXMuX3RvZ2dsZWQgfHwgZmFsc2U7XG4gIHRoaXMuX2ludGVyYWN0aW9uQ2xhc3MgPSBvcHRpb25zLmludGVyYWN0aW9uQ2xhc3MgfHwgbnVsbDtcbiAgdGhpcy5faW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLl9hdXRvdW50b2dnbGUgPSBvcHRpb25zLmF1dG91bnRvZ2dsZSB8fCBmYWxzZTtcblxuICBcbiAgb3B0aW9ucy5idXR0b25DbGlja0hhbmRsZXIgPSBJbnRlcmFjdGlvbkNvbnRyb2wucHJvdG90eXBlLl9oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xuICBcbiAgQ29udHJvbC5jYWxsKHRoaXMsb3B0aW9ucyk7XG59O1xub2wuaW5oZXJpdHMoSW50ZXJhY3Rpb25Db250cm9sLCBDb250cm9sKTtcblxudmFyIHByb3RvID0gSW50ZXJhY3Rpb25Db250cm9sLnByb3RvdHlwZTtcblxucHJvdG8udG9nZ2xlID0gZnVuY3Rpb24odG9nZ2xlKXtcbiAgdmFyIHRvZ2dsZSA9IHRvZ2dsZSAhPT0gdW5kZWZpbmVkID8gdG9nZ2xlIDogIXRoaXMuX3RvZ2dsZWRcbiAgdGhpcy5fdG9nZ2xlZCA9IHRvZ2dsZTtcbiAgdmFyIG1hcCA9IHRoaXMuZ2V0TWFwKCk7XG4gIHZhciBjb250cm9sQnV0dG9uID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2J1dHRvbicpLmZpcnN0KCk7XG4gIFxuICBpZiAodG9nZ2xlKSB7XG4gICAgaWYgKHRoaXMuX2ludGVyYWN0aW9uKSB7XG4gICAgICAvL21hcC5hZGRJbnRlcmFjdGlvbih0aGlzLl9pbnRlcmFjdGlvbik7XG4gICAgICB0aGlzLl9pbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgfVxuICAgIGNvbnRyb2xCdXR0b24uYWRkQ2xhc3MoJ2czdy1vbC10b2dnbGVkJyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHRoaXMuX2ludGVyYWN0aW9uKSB7XG4gICAgICAvL21hcC5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLl9pbnRlcmFjdGlvbik7XG4gICAgICB0aGlzLl9pbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICAgIH1cbiAgICBjb250cm9sQnV0dG9uLnJlbW92ZUNsYXNzKCdnM3ctb2wtdG9nZ2xlZCcpO1xuICB9XG59O1xuXG5wcm90by5zZXRNYXAgPSBmdW5jdGlvbihtYXApIHtcbiAgaWYgKCF0aGlzLl9pbnRlcmFjdGlvbikge1xuICAgIHRoaXMuX2ludGVyYWN0aW9uID0gbmV3IHRoaXMuX2ludGVyYWN0aW9uQ2xhc3M7XG4gICAgbWFwLmFkZEludGVyYWN0aW9uKHRoaXMuX2ludGVyYWN0aW9uKTtcbiAgICB0aGlzLl9pbnRlcmFjdGlvbi5zZXRBY3RpdmUoZmFsc2UpO1xuICB9XG4gIENvbnRyb2wucHJvdG90eXBlLnNldE1hcC5jYWxsKHRoaXMsbWFwKTtcbn07XG5cbnByb3RvLl9oYW5kbGVDbGljayA9IGZ1bmN0aW9uKGUpe1xuICB0aGlzLnRvZ2dsZSgpO1xuICBDb250cm9sLnByb3RvdHlwZS5faGFuZGxlQ2xpY2suY2FsbCh0aGlzLGUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmFjdGlvbkNvbnRyb2w7XG4iLCJ2YXIgT0xDb250cm9sID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gIHRoaXMuX2NvbnRyb2wgPSBudWxsO1xuICBcbiAgdGhpcy5wb3NpdGlvbkNvZGUgPSBvcHRpb25zLnBvc2l0aW9uIHx8ICd0bCc7XG4gIFxuICBzd2l0Y2ggKG9wdGlvbnMudHlwZSkge1xuICAgIGNhc2UgJ3pvb20nOlxuICAgICAgdGhpcy5fY29udHJvbCA9IG5ldyBvbC5jb250cm9sLlpvb20ob3B0aW9ucyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzY2FsZWxpbmUnOlxuICAgICAgdGhpcy5fY29udHJvbCA9IG5ldyBvbC5jb250cm9sLlNjYWxlTGluZShvcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ292ZXJ2aWV3JzpcbiAgICAgIHRoaXMuX2NvbnRyb2wgPSBuZXcgb2wuY29udHJvbC5PdmVydmlld01hcChvcHRpb25zKTtcbiAgfVxuICBcbiAgJCh0aGlzLl9jb250cm9sLmVsZW1lbnQpLmFkZENsYXNzKFwib2wtY29udHJvbC1cIit0aGlzLnBvc2l0aW9uQ29kZSk7XG4gIFxuICBvbC5jb250cm9sLkNvbnRyb2wuY2FsbCh0aGlzLHtcbiAgICBlbGVtZW50OiB0aGlzLl9jb250cm9sLmVsZW1lbnRcbiAgfSk7XG59XG5vbC5pbmhlcml0cyhPTENvbnRyb2wsIG9sLmNvbnRyb2wuQ29udHJvbCk7XG5tb2R1bGUuZXhwb3J0cyA9IE9MQ29udHJvbDtcblxudmFyIHByb3RvID0gT0xDb250cm9sLnByb3RvdHlwZTtcblxucHJvdG8uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbihwb3NpdGlvbkNvZGUpIHtcbiAgdmFyIHBvc2l0aW9uQ29kZSA9IHBvc2l0aW9uQ29kZSB8fCB0aGlzLnBvc2l0aW9uQ29kZTtcbiAgdmFyIHBvc2l0aW9uID0ge307XG4gIHBvc2l0aW9uWyd0b3AnXSA9IChwb3NpdGlvbkNvZGUuaW5kZXhPZigndCcpID4gLTEpID8gdHJ1ZSA6IGZhbHNlO1xuICBwb3NpdGlvblsnbGVmdCddID0gKHBvc2l0aW9uQ29kZS5pbmRleE9mKCdsJykgPiAtMSkgPyB0cnVlIDogZmFsc2U7XG4gIHJldHVybiBwb3NpdGlvbjtcbn07XG5cbnByb3RvLnNldE1hcCA9IGZ1bmN0aW9uKG1hcCl7XG4gIHZhciBwb3NpdGlvbiA9ICB0aGlzLmdldFBvc2l0aW9uKCk7XG4gIHZhciB2aWV3UG9ydCA9IG1hcC5nZXRWaWV3cG9ydCgpO1xuICB2YXIgcHJldml1c0NvbnRyb2xzID0gJCh2aWV3UG9ydCkuZmluZCgnLm9sLWNvbnRyb2wtJyt0aGlzLnBvc2l0aW9uQ29kZSk7XG4gIGlmIChwcmV2aXVzQ29udHJvbHMubGVuZ3RoKSB7XG4gICAgcHJldml1c0NvbnRyb2wgPSBwcmV2aXVzQ29udHJvbHMubGFzdCgpO1xuICAgIHZhciBwcmV2aW91c09mZnNldCA9IHBvc2l0aW9uLmxlZnQgPyBwcmV2aXVzQ29udHJvbC5wb3NpdGlvbigpLmxlZnQgOiBwcmV2aXVzQ29udHJvbC5wb3NpdGlvbigpLnJpZ2h0O1xuICAgIHZhciBoV2hlcmUgPSBwb3NpdGlvbi5sZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHByZXZpdXNDb250cm9sWzBdLm9mZnNldFdpZHRoOyAgICBcbiAgICB2YXIgaE9mZnNldCA9ICQodGhpcy5lbGVtZW50KS5wb3NpdGlvbigpW2hXaGVyZV0gKyBwcmV2aW91c09mZnNldCArIHByZXZpb3VzV2lkdGggKyAyO1xuICAgICQodGhpcy5lbGVtZW50KS5jc3MoaFdoZXJlLGhPZmZzZXQrJ3B4Jyk7XG4gIH1cbiAgXG4gIHRoaXMuX2NvbnRyb2wuc2V0TWFwKG1hcCk7XG59O1xuIiwidmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBJbnRlcmFjdGlvbkNvbnRyb2wgPSByZXF1aXJlKCcuL2ludGVyYWN0aW9uY29udHJvbCcpO1xuXG52YXIgUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcmFjdGlvbnMvcGlja2Nvb3JkaW5hdGVzaW50ZXJhY3Rpb24nKTtcblxudmFyIFF1ZXJ5Q29udHJvbCA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBfb3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcInF1ZXJ5bGF5ZXJcIixcbiAgICB0aXBMYWJlbDogXCJRdWVyeSBsYXllclwiLFxuICAgIGxhYmVsOiBcIlxcdWVhMGZcIixcbiAgICBpbnRlcmFjdGlvbkNsYXNzOiBQaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvblxuICB9O1xuICBcbiAgb3B0aW9ucyA9IHV0aWxzLm1lcmdlKG9wdGlvbnMsX29wdGlvbnMpO1xuICBcbiAgSW50ZXJhY3Rpb25Db250cm9sLmNhbGwodGhpcyxvcHRpb25zKTtcbn1cbm9sLmluaGVyaXRzKFF1ZXJ5Q29udHJvbCwgSW50ZXJhY3Rpb25Db250cm9sKTtcblxudmFyIHByb3RvID0gUXVlcnlDb250cm9sLnByb3RvdHlwZTtcblxucHJvdG8uc2V0TWFwID0gZnVuY3Rpb24obWFwKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgSW50ZXJhY3Rpb25Db250cm9sLnByb3RvdHlwZS5zZXRNYXAuY2FsbCh0aGlzLG1hcCk7XG4gIHRoaXMuX2ludGVyYWN0aW9uLm9uKCdib3hzdGFydCcsZnVuY3Rpb24oZSl7XG4gICAgc2VsZi5fc3RhcnRDb29yZGluYXRlID0gZS5jb29yZGluYXRlO1xuICB9KTtcbiAgXG4gIHRoaXMuX2ludGVyYWN0aW9uLm9uKCdwaWNrZWQnLGZ1bmN0aW9uKGUpe1xuICAgIHNlbGYuZGlzcGF0Y2hFdmVudCh7XG4gICAgICB0eXBlOiAncGlja2VkJyxcbiAgICAgIGNvb3JkaW5hdGVzOiBlLmNvb3JkaW5hdGVcbiAgICB9KTtcbiAgICBpZiAoc2VsZi5fYXV0b3VudG9nZ2xlKSB7XG4gICAgICBzZWxmLnRvZ2dsZSgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5Q29udHJvbDtcbiIsInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgSW50ZXJhY3Rpb25Db250cm9sID0gcmVxdWlyZSgnLi9pbnRlcmFjdGlvbmNvbnRyb2wnKTtcblxudmFyIFJlc2V0Q29udHJvbCA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX3RvZ2dsZWQgPSB0cnVlO1xuICB0aGlzLl9zdGFydENvb3JkaW5hdGUgPSBudWxsO1xuICB2YXIgX29wdGlvbnMgPSB7XG4gICAgICBuYW1lOiBcInJlc2V0XCIsXG4gICAgICB0aXBMYWJlbDogXCJQYW5cIixcbiAgICAgIGxhYmVsOiBcIlxcdWU5MDFcIixcbiAgICB9O1xuICBcbiAgb3B0aW9ucyA9IHV0aWxzLm1lcmdlKG9wdGlvbnMsX29wdGlvbnMpO1xuICBcbiAgSW50ZXJhY3Rpb25Db250cm9sLmNhbGwodGhpcyxvcHRpb25zKTtcbn1cbm9sLmluaGVyaXRzKFJlc2V0Q29udHJvbCwgSW50ZXJhY3Rpb25Db250cm9sKTtcbm1vZHVsZS5leHBvcnRzID0gUmVzZXRDb250cm9sO1xuXG52YXIgcHJvdG8gPSBSZXNldENvbnRyb2wucHJvdG90eXBlO1xuXG5wcm90by5fcG9zdFJlbmRlciA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMudG9nZ2xlKHRydWUpO1xufTtcbiIsInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgSW50ZXJhY3Rpb25Db250cm9sID0gcmVxdWlyZSgnLi9pbnRlcmFjdGlvbmNvbnRyb2wnKTtcblxudmFyIFpvb21Cb3hDb250cm9sID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fc3RhcnRDb29yZGluYXRlID0gbnVsbDtcbiAgdmFyIF9vcHRpb25zID0ge1xuICAgICAgbmFtZTogXCJ6b29tYm94XCIsXG4gICAgICB0aXBMYWJlbDogXCJab29tIHRvIGJveFwiLFxuICAgICAgbGFiZWw6IFwiXFx1ZTkwMFwiLFxuICAgICAgaW50ZXJhY3Rpb25DbGFzczogb2wuaW50ZXJhY3Rpb24uRHJhZ0JveFxuICAgIH07XG4gIFxuICBvcHRpb25zID0gdXRpbHMubWVyZ2Uob3B0aW9ucyxfb3B0aW9ucyk7XG4gIFxuICBJbnRlcmFjdGlvbkNvbnRyb2wuY2FsbCh0aGlzLG9wdGlvbnMpO1xufVxub2wuaW5oZXJpdHMoWm9vbUJveENvbnRyb2wsIEludGVyYWN0aW9uQ29udHJvbCk7XG5tb2R1bGUuZXhwb3J0cyA9IFpvb21Cb3hDb250cm9sO1xuXG52YXIgcHJvdG8gPSBab29tQm94Q29udHJvbC5wcm90b3R5cGU7XG5cbnByb3RvLnNldE1hcCA9IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEludGVyYWN0aW9uQ29udHJvbC5wcm90b3R5cGUuc2V0TWFwLmNhbGwodGhpcyxtYXApO1xuICB0aGlzLl9pbnRlcmFjdGlvbi5vbignYm94c3RhcnQnLGZ1bmN0aW9uKGUpe1xuICAgIHNlbGYuX3N0YXJ0Q29vcmRpbmF0ZSA9IGUuY29vcmRpbmF0ZTtcbiAgfSk7XG4gIFxuICB0aGlzLl9pbnRlcmFjdGlvbi5vbignYm94ZW5kJyxmdW5jdGlvbihlKXtcbiAgICB2YXIgc3RhcnRfY29vcmRpbmF0ZSA9IHNlbGYuX3N0YXJ0Q29vcmRpbmF0ZTtcbiAgICB2YXIgZW5kX2Nvb3JkaW5hdGUgPSBlLmNvb3JkaW5hdGU7XG4gICAgdmFyIGV4dGVudCA9IG9sLmV4dGVudC5ib3VuZGluZ0V4dGVudChbc3RhcnRfY29vcmRpbmF0ZSxlbmRfY29vcmRpbmF0ZV0pO1xuICAgIHNlbGYuZGlzcGF0Y2hFdmVudCh7XG4gICAgICB0eXBlOiAnem9vbWVuZCcsXG4gICAgICBleHRlbnQ6IGV4dGVudFxuICAgIH0pO1xuICAgIHNlbGYuX3N0YXJ0Q29vcmRpbmF0ZSA9IG51bGw7XG4gICAgaWYgKHNlbGYuX2F1dG91bnRvZ2dsZSkge1xuICAgICAgc2VsZi50b2dnbGUoKTtcbiAgICB9XG4gIH0pXG59O1xuIiwidmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG1hcGhlbHBlcnMgPSByZXF1aXJlKCcuL21hcC9tYXBoZWxwZXJzJyk7XG5cbihmdW5jdGlvbiAobmFtZSwgcm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9XG4gIGVsc2Uge1xuICAgIHJvb3RbbmFtZV0gPSBmYWN0b3J5KCk7XG4gIH1cbn0pKCdnM3dvbDMnLCB0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgXG4gIHZhciBoZWxwZXJzID0gdXRpbHMubWVyZ2Uoe30sbWFwaGVscGVycyk7XG4gIFxuICByZXR1cm4ge1xuICAgIGhlbHBlcnM6IGhlbHBlcnNcbiAgfVxufSk7XG4iLCJ2YXIgRGVsZXRlSW50ZXJhY3Rpb25FdmVudCA9IGZ1bmN0aW9uKHR5cGUsIGZlYXR1cmVzLCBjb29yZGluYXRlKSB7XG5cbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICB0aGlzLmNvb3JkaW5hdGUgPSBjb29yZGluYXRlO1xufTtcblxudmFyIERlbGV0ZUludGVyYWN0aW9uID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvbC5pbnRlcmFjdGlvbi5Qb2ludGVyLmNhbGwodGhpcywge1xuICAgIGhhbmRsZURvd25FdmVudDogRGVsZXRlSW50ZXJhY3Rpb24uaGFuZGxlRG93bkV2ZW50XyxcbiAgICBoYW5kbGVNb3ZlRXZlbnQ6IERlbGV0ZUludGVyYWN0aW9uLmhhbmRsZU1vdmVFdmVudF8sXG4gICAgaGFuZGxlVXBFdmVudDogRGVsZXRlSW50ZXJhY3Rpb24uaGFuZGxlVXBFdmVudF8sXG4gICAgaGFuZGxlRXZlbnQ6IERlbGV0ZUludGVyYWN0aW9uLmhhbmRsZUV2ZW50XyxcbiAgfSk7XG5cbiAgdGhpcy5wcmV2aW91c0N1cnNvcl8gPSB1bmRlZmluZWQ7XG4gIHRoaXMubGFzdENvb3JkaW5hdGVfID0gbnVsbDtcbiAgdGhpcy5mZWF0dXJlc18gPSBvcHRpb25zLmZlYXR1cmVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZlYXR1cmVzIDogbnVsbDtcbn07XG5vbC5pbmhlcml0cyhEZWxldGVJbnRlcmFjdGlvbiwgb2wuaW50ZXJhY3Rpb24uUG9pbnRlcik7XG5cbkRlbGV0ZUludGVyYWN0aW9uLmhhbmRsZUV2ZW50XyA9IGZ1bmN0aW9uKG1hcEJyb3dzZXJFdmVudCkge1xuICBpZiAobWFwQnJvd3NlckV2ZW50LnR5cGUgPT0gJ2tleWRvd24nKXtcbiAgICBpZih0aGlzLmZlYXR1cmVzXy5nZXRBcnJheSgpLmxlbmd0aCAmJiBtYXBCcm93c2VyRXZlbnQub3JpZ2luYWxFdmVudC5rZXlDb2RlID09IDQ2KXtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICBuZXcgRGVsZXRlSW50ZXJhY3Rpb25FdmVudChcbiAgICAgICAgICAgICAgJ2RlbGV0ZWVuZCcsIHRoaXMuZmVhdHVyZXNfLFxuICAgICAgICAgICAgICBldmVudC5jb29yZGluYXRlKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZWxzZXtcbiAgICByZXR1cm4gb2wuaW50ZXJhY3Rpb24uUG9pbnRlci5oYW5kbGVFdmVudC5jYWxsKHRoaXMsbWFwQnJvd3NlckV2ZW50KTtcbiAgfVxufTtcblxuRGVsZXRlSW50ZXJhY3Rpb24uaGFuZGxlRG93bkV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIHRoaXMubGFzdEZlYXR1cmVfID0gdGhpcy5mZWF0dXJlc0F0UGl4ZWxfKGV2ZW50LnBpeGVsLCBldmVudC5tYXApO1xuICBpZiAodGhpcy5sYXN0RmVhdHVyZV8pIHtcbiAgICBEZWxldGVJbnRlcmFjdGlvbi5oYW5kbGVNb3ZlRXZlbnRfLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBEZWxldGVJbnRlcmFjdGlvbkV2ZW50KFxuICAgICAgICAgICAgICAgICdkZWxldGVlbmQnLCB0aGlzLmZlYXR1cmVzXyxcbiAgICAgICAgICAgICAgICBldmVudC5jb29yZGluYXRlKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuRGVsZXRlSW50ZXJhY3Rpb24uaGFuZGxlTW92ZUV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIHZhciBlbGVtID0gZXZlbnQubWFwLmdldFRhcmdldEVsZW1lbnQoKTtcbiAgdmFyIGludGVyc2VjdGluZ0ZlYXR1cmUgPSBldmVudC5tYXAuZm9yRWFjaEZlYXR1cmVBdFBpeGVsKGV2ZW50LnBpeGVsLFxuICAgICAgZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgIH0pO1xuXG4gIGlmIChpbnRlcnNlY3RpbmdGZWF0dXJlKSB7XG4gICAgdGhpcy5wcmV2aW91c0N1cnNvcl8gPSBlbGVtLnN0eWxlLmN1cnNvcjtcblxuICAgIGVsZW0uc3R5bGUuY3Vyc29yID0gICdwb2ludGVyJztcblxuICB9IGVsc2Uge1xuICAgIGVsZW0uc3R5bGUuY3Vyc29yID0gdGhpcy5wcmV2aW91c0N1cnNvcl8gIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIHRoaXMucHJldmlvdXNDdXJzb3JfIDogJyc7XG4gICAgdGhpcy5wcmV2aW91c0N1cnNvcl8gPSB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbkRlbGV0ZUludGVyYWN0aW9uLnByb3RvdHlwZS5mZWF0dXJlc0F0UGl4ZWxfID0gZnVuY3Rpb24ocGl4ZWwsIG1hcCkge1xuICB2YXIgZm91bmQgPSBudWxsO1xuXG4gIHZhciBpbnRlcnNlY3RpbmdGZWF0dXJlID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChwaXhlbCxcbiAgICAgIGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgICB9KTtcblxuICBpZiAodGhpcy5mZWF0dXJlc18gJiZcbiAgICAgXy5pbmNsdWRlcyh0aGlzLmZlYXR1cmVzXy5nZXRBcnJheSgpLCBpbnRlcnNlY3RpbmdGZWF0dXJlKSkge1xuICAgIGZvdW5kID0gaW50ZXJzZWN0aW5nRmVhdHVyZTtcbiAgfVxuXG4gIHJldHVybiBmb3VuZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlSW50ZXJhY3Rpb247XG4iLCJ2YXIgUGlja0Nvb3JkaW5hdGVzRXZlbnRUeXBlID0ge1xuICBQSUNLRUQ6ICdwaWNrZWQnXG59O1xuXG52YXIgUGlja0Nvb3JkaW5hdGVzRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBjb29yZGluYXRlKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGU7XG59O1xuXG52YXIgUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMucHJldmlvdXNDdXJzb3JfID0gbnVsbDtcbiAgXG4gIG9sLmludGVyYWN0aW9uLlBvaW50ZXIuY2FsbCh0aGlzLCB7XG4gICAgaGFuZGxlRG93bkV2ZW50OiBQaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbi5oYW5kbGVEb3duRXZlbnRfLFxuICAgIGhhbmRsZVVwRXZlbnQ6IFBpY2tDb29yZGluYXRlc0ludGVyYWN0aW9uLmhhbmRsZVVwRXZlbnRfLFxuICAgIGhhbmRsZU1vdmVFdmVudDogUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24uaGFuZGxlTW92ZUV2ZW50XyxcbiAgfSk7XG59O1xub2wuaW5oZXJpdHMoUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24sIG9sLmludGVyYWN0aW9uLlBvaW50ZXIpO1xuXG5QaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbi5oYW5kbGVEb3duRXZlbnRfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5QaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbi5oYW5kbGVVcEV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICBuZXcgUGlja0Nvb3JkaW5hdGVzRXZlbnQoXG4gICAgICAgICAgICAgIFBpY2tDb29yZGluYXRlc0V2ZW50VHlwZS5QSUNLRUQsXG4gICAgICAgICAgICAgIGV2ZW50LmNvb3JkaW5hdGUpKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5QaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbi5oYW5kbGVNb3ZlRXZlbnRfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIGVsZW0gPSBldmVudC5tYXAuZ2V0VGFyZ2V0RWxlbWVudCgpO1xuICBlbGVtLnN0eWxlLmN1cnNvciA9ICAncG9pbnRlcic7XG59O1xuXG5QaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbi5wcm90b3R5cGUuc2hvdWxkU3RvcEV2ZW50ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24ucHJvdG90eXBlLnNldEFjdGl2ZSA9IGZ1bmN0aW9uKGFjdGl2ZSl7XG4gIHZhciBtYXAgPSB0aGlzLmdldE1hcCgpO1xuICBpZiAobWFwKSB7XG4gICAgdmFyIGVsZW0gPSBtYXAuZ2V0VGFyZ2V0RWxlbWVudCgpO1xuICAgIGVsZW0uc3R5bGUuY3Vyc29yID0gJyc7XG4gIH1cbiAgb2wuaW50ZXJhY3Rpb24uUG9pbnRlci5wcm90b3R5cGUuc2V0QWN0aXZlLmNhbGwodGhpcyxhY3RpdmUpO1xufTtcblxuUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24ucHJvdG90eXBlLnNldE1hcCA9IGZ1bmN0aW9uKG1hcCl7XG4gIGlmICghbWFwKSB7XG4gICAgdmFyIGVsZW0gPSB0aGlzLmdldE1hcCgpLmdldFRhcmdldEVsZW1lbnQoKTtcbiAgICBlbGVtLnN0eWxlLmN1cnNvciA9ICcnO1xuICB9XG4gIG9sLmludGVyYWN0aW9uLlBvaW50ZXIucHJvdG90eXBlLnNldE1hcC5jYWxsKHRoaXMsbWFwKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb247XG4iLCIgIHZhciBQaWNrRmVhdHVyZUV2ZW50VHlwZSA9IHtcbiAgUElDS0VEOiAncGlja2VkJ1xufTtcblxudmFyIFBpY2tGZWF0dXJlRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBjb29yZGluYXRlLCBmZWF0dXJlKSB7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuZmVhdHVyZSA9IGZlYXR1cmU7XG4gIHRoaXMuY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGU7XG59O1xuXG52YXIgUGlja0ZlYXR1cmVJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb2wuaW50ZXJhY3Rpb24uUG9pbnRlci5jYWxsKHRoaXMsIHtcbiAgICBoYW5kbGVEb3duRXZlbnQ6IFBpY2tGZWF0dXJlSW50ZXJhY3Rpb24uaGFuZGxlRG93bkV2ZW50XyxcbiAgICBoYW5kbGVVcEV2ZW50OiBQaWNrRmVhdHVyZUludGVyYWN0aW9uLmhhbmRsZVVwRXZlbnRfLFxuICAgIGhhbmRsZU1vdmVFdmVudDogUGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5oYW5kbGVNb3ZlRXZlbnRfLFxuICB9KTtcbiAgXG4gIHRoaXMuZmVhdHVyZXNfID0gb3B0aW9ucy5mZWF0dXJlcyB8fCBudWxsO1xuICBcbiAgdGhpcy5sYXllcnNfID0gb3B0aW9ucy5sYXllcnMgfHwgbnVsbDtcbiAgXG4gIHRoaXMucGlja2VkRmVhdHVyZV8gPSBudWxsO1xuICBcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmxheWVyRmlsdGVyXyA9IGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgcmV0dXJuIF8uaW5jbHVkZXMoc2VsZi5sYXllcnNfLCBsYXllcik7XG4gIH07XG59O1xub2wuaW5oZXJpdHMoUGlja0ZlYXR1cmVJbnRlcmFjdGlvbiwgb2wuaW50ZXJhY3Rpb24uUG9pbnRlcik7XG5cblBpY2tGZWF0dXJlSW50ZXJhY3Rpb24uaGFuZGxlRG93bkV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIHRoaXMucGlja2VkRmVhdHVyZV8gPSB0aGlzLmZlYXR1cmVzQXRQaXhlbF8oZXZlbnQucGl4ZWwsIGV2ZW50Lm1hcCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuUGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5oYW5kbGVVcEV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmKHRoaXMucGlja2VkRmVhdHVyZV8pe1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBQaWNrRmVhdHVyZUV2ZW50KFxuICAgICAgICAgICAgICAgIFBpY2tGZWF0dXJlRXZlbnRUeXBlLlBJQ0tFRCxcbiAgICAgICAgICAgICAgICBldmVudC5jb29yZGluYXRlLFxuICAgICAgICAgICAgICAgIHRoaXMucGlja2VkRmVhdHVyZV8pKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblBpY2tGZWF0dXJlSW50ZXJhY3Rpb24uaGFuZGxlTW92ZUV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIHZhciBlbGVtID0gZXZlbnQubWFwLmdldFRhcmdldEVsZW1lbnQoKTtcbiAgdmFyIGludGVyc2VjdGluZ0ZlYXR1cmUgPSB0aGlzLmZlYXR1cmVzQXRQaXhlbF8oZXZlbnQucGl4ZWwsIGV2ZW50Lm1hcCk7XG5cbiAgaWYgKGludGVyc2VjdGluZ0ZlYXR1cmUpIHtcbiAgICBlbGVtLnN0eWxlLmN1cnNvciA9ICAncG9pbnRlcic7XG4gIH0gZWxzZSB7XG4gICAgZWxlbS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgfVxufTtcblxuUGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5wcm90b3R5cGUuZmVhdHVyZXNBdFBpeGVsXyA9IGZ1bmN0aW9uKHBpeGVsLCBtYXApIHtcbiAgdmFyIGZvdW5kID0gbnVsbDtcblxuICB2YXIgaW50ZXJzZWN0aW5nRmVhdHVyZSA9IG1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwocGl4ZWwsXG4gICAgICBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICAgIGlmICh0aGlzLmZlYXR1cmVzXykge1xuICAgICAgICAgIGlmICh0aGlzLmZlYXR1cmVzXy5pbmRleE9mKGZlYXR1cmUpID4gLTEpe1xuICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmVcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgIH0sdGhpcyx0aGlzLmxheWVyRmlsdGVyXyk7XG4gIFxuICBpZihpbnRlcnNlY3RpbmdGZWF0dXJlKXtcbiAgICBmb3VuZCA9IGludGVyc2VjdGluZ0ZlYXR1cmU7XG4gIH1cbiAgcmV0dXJuIGZvdW5kO1xufTtcblxuUGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5wcm90b3R5cGUuc2hvdWxkU3RvcEV2ZW50ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuUGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5wcm90b3R5cGUuc2V0TWFwID0gZnVuY3Rpb24obWFwKXtcbiAgaWYgKCFtYXApIHtcbiAgICB2YXIgZWxlbSA9IHRoaXMuZ2V0TWFwKCkuZ2V0VGFyZ2V0RWxlbWVudCgpO1xuICAgIGVsZW0uc3R5bGUuY3Vyc29yID0gJyc7XG4gIH1cbiAgb2wuaW50ZXJhY3Rpb24uUG9pbnRlci5wcm90b3R5cGUuc2V0TWFwLmNhbGwodGhpcyxtYXApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrRmVhdHVyZUludGVyYWN0aW9uO1xuIiwidmFyIEJhc2VMYXllcnMgPSB7fTtcblxuQmFzZUxheWVycy5PU00gPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5PU00oe1xuICAgIGF0dHJpYnV0aW9uczogW1xuICAgICAgbmV3IG9sLkF0dHJpYnV0aW9uKHtcbiAgICAgICAgaHRtbDogJ0FsbCBtYXBzICZjb3B5OyAnICtcbiAgICAgICAgICAgICc8YSBocmVmPVwiaHR0cDovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9cIj5PcGVuU3RyZWV0TWFwPC9hPidcbiAgICAgIH0pLFxuICAgICAgb2wuc291cmNlLk9TTS5BVFRSSUJVVElPTlxuICAgIF0sXG4gICAgdXJsOiAnaHR0cDovL3thLWN9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nJyxcbiAgICBjcm9zc09yaWdpbjogbnVsbFxuICB9KSxcbiAgaWQ6ICdvc20nLFxuICB0aXRsZTogJ09TTScsXG4gIGJhc2VtYXA6IHRydWVcbn0pO1xuXG5CYXNlTGF5ZXJzLkJJTkcgPSB7fTtcblxuQmFzZUxheWVycy5CSU5HLlJvYWQgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gIG5hbWU6J1JvYWQnLFxuICB2aXNpYmxlOiBmYWxzZSxcbiAgcHJlbG9hZDogSW5maW5pdHksXG4gIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5CaW5nTWFwcyh7XG4gICAga2V5OiAnQW1fbUFTblVBLWp0VzNPM014SVltT09QTE92TDM5ZHdNdlJueW9IeGZLZl9FUE5ZZ2ZXTTlpbXFHRVRXS0dWbicsXG4gICAgaW1hZ2VyeVNldDogJ1JvYWQnXG4gICAgICAvLyB1c2UgbWF4Wm9vbSAxOSB0byBzZWUgc3RyZXRjaGVkIHRpbGVzIGluc3RlYWQgb2YgdGhlIEJpbmdNYXBzXG4gICAgICAvLyBcIm5vIHBob3RvcyBhdCB0aGlzIHpvb20gbGV2ZWxcIiB0aWxlc1xuICAgICAgLy8gbWF4Wm9vbTogMTlcbiAgfSksXG4gIGJhc2VtYXA6IHRydWVcbn0pO1xuXG5CYXNlTGF5ZXJzLkJJTkcuQWVyaWFsV2l0aExhYmVscyA9IG5ldyBvbC5sYXllci5UaWxlKHtcbiAgbmFtZTogJ0FlcmlhbFdpdGhMYWJlbHMnLFxuICB2aXNpYmxlOiB0cnVlLFxuICBwcmVsb2FkOiBJbmZpbml0eSxcbiAgc291cmNlOiBuZXcgb2wuc291cmNlLkJpbmdNYXBzKHtcbiAgICBrZXk6ICdBbV9tQVNuVUEtanRXM08zTXhJWW1PT1BMT3ZMMzlkd012Um55b0h4ZktmX0VQTllnZldNOWltcUdFVFdLR1ZuJyxcbiAgICBpbWFnZXJ5U2V0OiAnQWVyaWFsV2l0aExhYmVscydcbiAgICAgIC8vIHVzZSBtYXhab29tIDE5IHRvIHNlZSBzdHJldGNoZWQgdGlsZXMgaW5zdGVhZCBvZiB0aGUgQmluZ01hcHNcbiAgICAgIC8vIFwibm8gcGhvdG9zIGF0IHRoaXMgem9vbSBsZXZlbFwiIHRpbGVzXG4gICAgICAvLyBtYXhab29tOiAxOVxuICB9KSxcbiAgYmFzZW1hcDogdHJ1ZVxufSk7XG5cbkJhc2VMYXllcnMuQklORy5BZXJpYWwgPSBuZXcgb2wubGF5ZXIuVGlsZSh7XG4gIG5hbWU6ICdBZXJpYWwnLFxuICB2aXNpYmxlOiBmYWxzZSxcbiAgcHJlbG9hZDogSW5maW5pdHksXG4gIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5CaW5nTWFwcyh7XG4gICAga2V5OiAnQW1fbUFTblVBLWp0VzNPM014SVltT09QTE92TDM5ZHdNdlJueW9IeGZLZl9FUE5ZZ2ZXTTlpbXFHRVRXS0dWbicsXG4gICAgaW1hZ2VyeVNldDogJ0FlcmlhbCdcbiAgICAgIC8vIHVzZSBtYXhab29tIDE5IHRvIHNlZSBzdHJldGNoZWQgdGlsZXMgaW5zdGVhZCBvZiB0aGUgQmluZ01hcHNcbiAgICAgIC8vIFwibm8gcGhvdG9zIGF0IHRoaXMgem9vbSBsZXZlbFwiIHRpbGVzXG4gICAgICAvLyBtYXhab29tOiAxOVxuICB9KSxcbiAgYmFzZW1hcDogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUxheWVycztcbiIsInZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgUmFzdGVyTGF5ZXJzID0ge307XG5cblJhc3RlckxheWVycy5UaWxlZFdNU0xheWVyID0gZnVuY3Rpb24obGF5ZXJPYmosZXh0cmFQYXJhbXMpe1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBsYXllck9iajogbGF5ZXJPYmosXG4gICAgZXh0cmFQYXJhbXM6IGV4dHJhUGFyYW1zIHx8IHt9LFxuICAgIHRpbGVkOiB0cnVlXG4gIH1cbiAgcmV0dXJuIFJhc3RlckxheWVycy5fV01TTGF5ZXIob3B0aW9ucyk7XG59O1xuXG5SYXN0ZXJMYXllcnMuV01TTGF5ZXIgPSBmdW5jdGlvbihsYXllck9iaixleHRyYVBhcmFtcyl7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIGxheWVyT2JqOiBsYXllck9iaixcbiAgICBleHRyYVBhcmFtczogZXh0cmFQYXJhbXMgfHwge31cbiAgfVxuICByZXR1cm4gUmFzdGVyTGF5ZXJzLl9XTVNMYXllcihvcHRpb25zKTtcbn07XG5cblJhc3RlckxheWVycy5fV01TTGF5ZXIgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgdmFyIGxheWVyT2JqID0gb3B0aW9ucy5sYXllck9iajtcbiAgdmFyIGV4dHJhUGFyYW1zID0gb3B0aW9ucy5leHRyYVBhcmFtcztcbiAgdmFyIHRpbGVkID0gb3B0aW9ucy50aWxlZCB8fCBmYWxzZTtcbiAgXG4gIHZhciBwYXJhbXMgPSB7XG4gICAgTEFZRVJTOiBsYXllck9iai5sYXllcnMgfHwgJycsXG4gICAgVkVSU0lPTjogJzEuMy4wJyxcbiAgICBUUkFOU1BBUkVOVDogdHJ1ZSxcbiAgICBTTERfVkVSU0lPTjogJzEuMS4wJ1xuICB9O1xuICBcbiAgcGFyYW1zID0gdXRpbHMubWVyZ2UocGFyYW1zLGV4dHJhUGFyYW1zKTtcbiAgXG4gIHZhciBzb3VyY2VPcHRpb25zID0ge1xuICAgIHVybDogbGF5ZXJPYmoudXJsLFxuICAgIHBhcmFtczogcGFyYW1zLFxuICAgIHJhdGlvOiAxXG4gIH07XG4gIFxuICB2YXIgaW1hZ2VPcHRpb25zID0ge1xuICAgIGlkOiBsYXllck9iai5pZCxcbiAgICBuYW1lOiBsYXllck9iai5uYW1lLFxuICAgIG9wYWNpdHk6IGxheWVyT2JqLm9wYWNpdHkgfHwgMS4wLFxuICAgIHZpc2libGU6bGF5ZXJPYmoudmlzaWJsZSxcbiAgICBtYXhSZXNvbHV0aW9uOiBsYXllck9iai5tYXhSZXNvbHV0aW9uXG4gIH1cbiAgXG4gIHZhciBpbWFnZUNsYXNzO1xuICB2YXIgc291cmNlO1xuICBpZiAodGlsZWQpIHtcbiAgICBzb3VyY2UgPSBuZXcgb2wuc291cmNlLlRpbGVXTVMoc291cmNlT3B0aW9ucyk7XG4gICAgaW1hZ2VDbGFzcyA9IG9sLmxheWVyLlRpbGU7XG4gICAgLy9pbWFnZU9wdGlvbnMuZXh0ZW50ID0gWzExMzQ4NjcsMzg3MzAwMiwyNTA1OTY0LDU1OTY5NDRdO1xuICB9XG4gIGVsc2Uge1xuICAgIHNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuSW1hZ2VXTVMoc291cmNlT3B0aW9ucylcbiAgICBpbWFnZUNsYXNzID0gb2wubGF5ZXIuSW1hZ2U7XG4gIH1cbiAgXG4gIGltYWdlT3B0aW9ucy5zb3VyY2UgPSBzb3VyY2U7XG4gIFxuICB2YXIgbGF5ZXIgPSBuZXcgaW1hZ2VDbGFzcyhpbWFnZU9wdGlvbnMpO1xuICBcbiAgcmV0dXJuIGxheWVyO1xufTtcblxuLypSYXN0ZXJMYXllcnMuVGlsZWRXTVNMYXllciA9IGZ1bmN0aW9uKGxheWVyT2JqKXtcbiAgdmFyIGxheWVyID0gbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgIG5hbWU6IGxheWVyT2JqLm5hbWUsXG4gICAgb3BhY2l0eTogMS4wLFxuICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5UaWxlV01TKHtcbiAgICAgIHVybDogbGF5ZXJPYmoudXJsLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIExBWUVSUzogbGF5ZXJPYmoubGF5ZXJzIHx8ICcnLFxuICAgICAgICBWRVJTSU9OOiAnMS4zLjAnLFxuICAgICAgICBUUkFOU1BBUkVOVDogdHJ1ZVxuICAgICAgfVxuICAgIH0pLFxuICAgIHZpc2libGU6IGxheWVyT2JqLnZpc2libGVcbiAgfSk7XG4gIFxuICByZXR1cm4gbGF5ZXI7XG59OyovXG5cbm1vZHVsZS5leHBvcnRzID0gUmFzdGVyTGF5ZXJzO1xuXG4iLCJCYXNlTGF5ZXJzID0gcmVxdWlyZSgnLi4vbGF5ZXJzL2Jhc2VzJyk7XG5cbnZhciBNYXBIZWxwZXJzID0ge1xuICBjcmVhdGVWaWV3ZXI6IGZ1bmN0aW9uKG9wdHMpe1xuICAgIHJldHVybiBuZXcgX1ZpZXdlcihvcHRzKTtcbiAgfVxufTtcblxudmFyIF9WaWV3ZXIgPSBmdW5jdGlvbihvcHRzKXtcbiAgdmFyIGNvbnRyb2xzID0gb2wuY29udHJvbC5kZWZhdWx0cyh7XG4gICAgYXR0cmlidXRpb25PcHRpb25zOiB7XG4gICAgICBjb2xsYXBzaWJsZTogZmFsc2VcbiAgICB9LFxuICAgIHpvb206IGZhbHNlLFxuICAgIGF0dHJpYnV0aW9uOiBmYWxzZVxuICB9KTsvLy5leHRlbmQoW25ldyBvbC5jb250cm9sLlpvb20oKV0pO1xuICBcbiAgdmFyIGludGVyYWN0aW9ucyA9IG9sLmludGVyYWN0aW9uLmRlZmF1bHRzKClcbiAgICAuZXh0ZW5kKFtcbiAgICAgIG5ldyBvbC5pbnRlcmFjdGlvbi5EcmFnUm90YXRlKClcbiAgICBdKTtcbiAgaW50ZXJhY3Rpb25zLnJlbW92ZUF0KDEpIC8vIHJpbXVvdm8gZG91Y2xpY2t6b29tXG4gIFxuICB2YXIgdmlldztcbiAgaWYgKG9wdHMudmlldyBpbnN0YW5jZW9mIG9sLlZpZXcpIHtcbiAgICB2aWV3ID0gb3B0cy52aWV3O1xuICB9XG4gIGVsc2Uge1xuICAgIHZpZXcgPSBuZXcgb2wuVmlldyhvcHRzLnZpZXcpO1xuICB9XG4gIHZhciBvcHRpb25zID0ge1xuICAgIGNvbnRyb2xzOiBjb250cm9scyxcbiAgICBpbnRlcmFjdGlvbnM6IGludGVyYWN0aW9ucyxcbiAgICBvbDNMb2dvOiBmYWxzZSxcbiAgICB2aWV3OiB2aWV3LFxuICAgIGtleWJvYXJkRXZlbnRUYXJnZXQ6IGRvY3VtZW50XG4gIH07XG4gIGlmIChvcHRzLmlkKXtcbiAgICBvcHRpb25zLnRhcmdldCA9IG9wdHMuaWQ7XG4gIH1cbiAgdmFyIG1hcCAgPSBuZXcgb2wuTWFwKG9wdGlvbnMpO1xuICB0aGlzLm1hcCA9IG1hcDtcbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpe1xuICBpZiAodGhpcy5tYXApIHtcbiAgICB0aGlzLm1hcC5kaXNwb3NlKCk7XG4gICAgdGhpcy5tYXAgPSBudWxsXG4gIH1cbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLmdldFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmdldFZpZXcoKTtcbn1cblxuX1ZpZXdlci5wcm90b3R5cGUudXBkYXRlTWFwID0gZnVuY3Rpb24obWFwT2JqZWN0KXt9O1xuXG5fVmlld2VyLnByb3RvdHlwZS51cGRhdGVWaWV3ID0gZnVuY3Rpb24oKXt9O1xuXG5fVmlld2VyLnByb3RvdHlwZS5nZXRNYXAgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5tYXA7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5zZXRUYXJnZXQgPSBmdW5jdGlvbihpZCl7XG4gIHRoaXMubWFwLnNldFRhcmdldChpZCk7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5nb1RvID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMsIG9wdGlvbnMpe1xuICB2YXIgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBhbmltYXRlID0gb3B0aW9ucy5hbmltYXRlIHx8IHRydWU7XG4gIHZhciB6b29tID0gb3B0aW9ucy56b29tIHx8IGZhbHNlO1xuICB2YXIgdmlldyA9IHRoaXMubWFwLmdldFZpZXcoKTtcbiAgXG4gIGlmIChhbmltYXRlKSB7XG4gICAgdmFyIHBhbkFuaW1hdGlvbiA9IG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgIHNvdXJjZTogdmlldy5nZXRDZW50ZXIoKVxuICAgIH0pO1xuICAgIHZhciB6b29tQW5pbWF0aW9uID0gb2wuYW5pbWF0aW9uLnpvb20oe1xuICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpXG4gICAgfSk7XG4gICAgdGhpcy5tYXAuYmVmb3JlUmVuZGVyKHBhbkFuaW1hdGlvbix6b29tQW5pbWF0aW9uKTtcbiAgfVxuICBcbiAgdmlldy5zZXRDZW50ZXIoY29vcmRpbmF0ZXMpO1xuICBpZiAoem9vbSkge1xuICAgIHZpZXcuc2V0Wm9vbSh6b29tKTtcbiAgfVxufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ29Ub1JlcyA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzLCByZXNvbHV0aW9uKXtcbiAgdmFyIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgYW5pbWF0ZSA9IG9wdGlvbnMuYW5pbWF0ZSB8fCB0cnVlO1xuICB2YXIgdmlldyA9IHRoaXMubWFwLmdldFZpZXcoKTtcbiAgXG4gIGlmIChhbmltYXRlKSB7XG4gICAgdmFyIHBhbkFuaW1hdGlvbiA9IG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIHNvdXJjZTogdmlldy5nZXRDZW50ZXIoKVxuICAgIH0pO1xuICAgIHZhciB6b29tQW5pbWF0aW9uID0gb2wuYW5pbWF0aW9uLnpvb20oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpXG4gICAgfSk7XG4gICAgdGhpcy5tYXAuYmVmb3JlUmVuZGVyKHBhbkFuaW1hdGlvbix6b29tQW5pbWF0aW9uKTtcbiAgfVxuXG4gIHZpZXcuc2V0Q2VudGVyKGNvb3JkaW5hdGVzKTtcbiAgdmlldy5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb24pO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZml0ID0gZnVuY3Rpb24oZ2VvbWV0cnksIG9wdGlvbnMpe1xuICB2YXIgdmlldyA9IHRoaXMubWFwLmdldFZpZXcoKTtcbiAgXG4gIHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGFuaW1hdGUgPSBvcHRpb25zLmFuaW1hdGUgfHwgdHJ1ZTtcbiAgXG4gIGlmIChhbmltYXRlKSB7XG4gICAgdmFyIHBhbkFuaW1hdGlvbiA9IG9sLmFuaW1hdGlvbi5wYW4oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIHNvdXJjZTogdmlldy5nZXRDZW50ZXIoKVxuICAgIH0pO1xuICAgIHZhciB6b29tQW5pbWF0aW9uID0gb2wuYW5pbWF0aW9uLnpvb20oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIHJlc29sdXRpb246IHZpZXcuZ2V0UmVzb2x1dGlvbigpXG4gICAgfSk7XG4gICAgdGhpcy5tYXAuYmVmb3JlUmVuZGVyKHBhbkFuaW1hdGlvbix6b29tQW5pbWF0aW9uKTtcbiAgfVxuICBcbiAgaWYgKG9wdGlvbnMuYW5pbWF0ZSkge1xuICAgIGRlbGV0ZSBvcHRpb25zLmFuaW1hdGU7IC8vIG5vbiBsbyBwYXNzbyBhbCBtZXRvZG8gZGkgT0wzIHBlcmNow6kgw6ggdW4nb3B6aW9uZSBpbnRlcm5hXG4gIH1cbiAgb3B0aW9ucy5jb25zdHJhaW5SZXNvbHV0aW9uID0gb3B0aW9ucy5jb25zdHJhaW5SZXNvbHV0aW9uIHx8IHRydWU7XG4gIFxuICB2aWV3LmZpdChnZW9tZXRyeSx0aGlzLm1hcC5nZXRTaXplKCksb3B0aW9ucyk7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5nZXRab29tID0gZnVuY3Rpb24oKXtcbiAgdmFyIHZpZXcgPSB0aGlzLm1hcC5nZXRWaWV3KCk7XG4gIHJldHVybiB2aWV3LmdldFpvb20oKTtcbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLmdldFJlc29sdXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgdmlldyA9IHRoaXMubWFwLmdldFZpZXcoKTtcbiAgcmV0dXJuIHZpZXcuZ2V0UmVzb2x1dGlvbigpO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ2V0Q2VudGVyID0gZnVuY3Rpb24oKXtcbiAgdmFyIHZpZXcgPSB0aGlzLm1hcC5nZXRWaWV3KCk7XG4gIHJldHVybiB2aWV3LmdldENlbnRlcigpO1xufTtcblxuX1ZpZXdlci5wcm90b3R5cGUuZ2V0QkJPWCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLm1hcC5nZXRWaWV3KCkuY2FsY3VsYXRlRXh0ZW50KHRoaXMubWFwLmdldFNpemUoKSk7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5nZXRMYXllckJ5TmFtZSA9IGZ1bmN0aW9uKGxheWVyTmFtZSkge1xuICB2YXIgbGF5ZXJzID0gdGhpcy5tYXAuZ2V0TGF5ZXJzKCk7XG4gIHZhciBsZW5ndGggPSBsYXllcnMuZ2V0TGVuZ3RoKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGF5ZXJOYW1lID09PSBsYXllcnMuaXRlbShpKS5nZXQoJ25hbWUnKSkge1xuICAgICAgcmV0dXJuIGxheWVycy5pdGVtKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLnJlbW92ZUxheWVyQnlOYW1lID0gZnVuY3Rpb24obGF5ZXJOYW1lKXtcbiAgdmFyIGxheWVyID0gdGhpcy5nZXRMYXllckJ5TmFtZShsYXllck5hbWUpO1xuICBpZiAobGF5ZXIpe1xuICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKGxheWVyKTtcbiAgICBkZWxldGUgbGF5ZXI7XG4gIH1cbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLmdldEFjdGl2ZUxheWVycyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBhY3RpdmVsYXllcnMgPSBbXTtcbiAgdGhpcy5tYXAuZ2V0TGF5ZXJzKCkuZm9yRWFjaChmdW5jdGlvbihsYXllcikge1xuICAgIHZhciBwcm9wcyA9IGxheWVyLmdldFByb3BlcnRpZXMoKTtcbiAgICBpZiAocHJvcHMuYmFzZW1hcCAhPSB0cnVlICYmIHByb3BzLnZpc2libGUpe1xuICAgICAgIGFjdGl2ZWxheWVycy5wdXNoKGxheWVyKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgcmV0dXJuIGFjdGl2ZWxheWVycztcbn07XG5cbl9WaWV3ZXIucHJvdG90eXBlLnJlbW92ZUxheWVycyA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMubWFwLmdldExheWVycygpLmNsZWFyKCk7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5nZXRMYXllcnNOb0Jhc2UgPSBmdW5jdGlvbigpe1xuICB2YXIgbGF5ZXJzID0gW107XG4gIHRoaXMubWFwLmdldExheWVycygpLmZvckVhY2goZnVuY3Rpb24obGF5ZXIpIHtcbiAgICB2YXIgcHJvcHMgPSBsYXllci5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgaWYgKHByb3BzLmJhc2VtYXAgIT0gdHJ1ZSl7XG4gICAgICBsYXllcnMucHVzaChsYXllcik7XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBsYXllcnM7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5hZGRCYXNlTGF5ZXIgPSBmdW5jdGlvbih0eXBlKXtcbiAgdmFyIGxheWVyO1xuICB0eXBlID8gbGF5ZXIgPSBCYXNlTGF5ZXJzW3R5cGVdOiAgbGF5ZXIgPSBCYXNlTGF5ZXJzLkJJTkcuQWVyaWFsO1xuICB0aGlzLm1hcC5hZGRMYXllcihsYXllcik7XG59O1xuXG5fVmlld2VyLnByb3RvdHlwZS5jaGFuZ2VCYXNlTGF5ZXIgPSBmdW5jdGlvbihsYXllck5hbWUpe1xuICB2YXIgYmFzZUxheWVyID0gdGhpcy5nZXRMYXllckJ5TmFtZShsYXllcm5hbWUpO1xuICB2YXIgbGF5ZXJzID0gdGhpcy5tYXAuZ2V0TGF5ZXJzKCk7XG4gIGxheWVycy5pbnNlcnRBdCgwLCBiYXNlTGF5ZXIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBIZWxwZXJzO1xuIiwidmFyIHV0aWxzID0ge1xuICBtZXJnZTogZnVuY3Rpb24ob2JqMSxvYmoyKXtcbiAgICB2YXIgb2JqMyA9IHt9O1xuICAgIGZvciAodmFyIGF0dHJuYW1lIGluIG9iajEpIHsgb2JqM1thdHRybmFtZV0gPSBvYmoxW2F0dHJuYW1lXTsgfVxuICAgIGZvciAodmFyIGF0dHJuYW1lIGluIG9iajIpIHsgb2JqM1thdHRybmFtZV0gPSBvYmoyW2F0dHJuYW1lXTsgfVxuICAgIHJldHVybiBvYmozO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPCEtLSBpdGVtIHRlbXBsYXRlIC0tPlxcbjxkaXYgaWQ9XFxcImNhdGFsb2dcXFwiIGNsYXNzPVxcXCJ0YWJiYWJsZS1wYW5lbCBjYXRhbG9nXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcInRhYmJhYmxlLWxpbmVcXFwiPlxcbiAgICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYtdGFic1xcXCIgcm9sZT1cXFwidGFibGlzdFxcXCI+XFxuICAgICAgPGxpIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCIgY2xhc3M9XFxcImFjdGl2ZVxcXCI+PGEgaHJlZj1cXFwiI3RyZWVcXFwiIGFyaWEtY29udHJvbHM9XFxcInRyZWVcXFwiIHJvbGU9XFxcInRhYlxcXCIgZGF0YS10b2dnbGU9XFxcInRhYlxcXCIgZGF0YS1pMThuPVxcXCJ0cmVlXFxcIj5EYXRhPC9hPjwvbGk+XFxuICAgICAgPGxpIHYtaWY9XFxcImhhc0Jhc2VMYXllcnNcXFwiIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCI+PGEgaHJlZj1cXFwiI2Jhc2VsYXllcnNcXFwiIGFyaWEtY29udHJvbHM9XFxcImJhc2VsYXllcnNcXFwiIHJvbGU9XFxcInRhYlxcXCIgZGF0YS10b2dnbGU9XFxcInRhYlxcXCIgZGF0YS1pMThuPVxcXCJiYXNlbGF5ZXJzXFxcIj5MYXllciBCYXNlPC9hPjwvbGk+XFxuICAgICAgPGxpIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCI+PGEgaHJlZj1cXFwiI2xlZ2VuZFxcXCIgYXJpYS1jb250cm9scz1cXFwibGVnZW5kXFxcIiByb2xlPVxcXCJ0YWJcXFwiIGRhdGEtdG9nZ2xlPVxcXCJ0YWJcXFwiIGRhdGEtaTE4bj1cXFwibGVnZW5kXFxcIj5MZWdlbmRhPC9hPjwvbGk+XFxuICAgIDwvdWw+XFxuICAgIDxkaXYgIGNsYXNzPVxcXCJ0YWItY29udGVudFxcXCI+XFxuICAgICAgPGRpdiByb2xlPVxcXCJ0YWJwYW5lbFxcXCIgY2xhc3M9XFxcInRhYi1wYW5lIGFjdGl2ZSB0cmVlXFxcIiBpZD1cXFwidHJlZVxcXCI+XFxuICAgICAgICA8dWwgY2xhc3M9XFxcInRyZWUtcm9vdFxcXCI+XFxuICAgICAgICAgIDx0cmlzdGF0ZS10cmVlIHYtaWY9XFxcIiFpc0hpZGRlblxcXCIgOmxheWVyc3RyZWU9XFxcImxheWVyc3RyZWVcXFwiIGNsYXNzPVxcXCJpdGVtXFxcIiB2LWZvcj1cXFwibGF5ZXJzdHJlZSBpbiBsYXllcnN0cmVlXFxcIj5cXG4gICAgICAgICAgPC90cmlzdGF0ZS10cmVlPlxcbiAgICAgICAgPC91bD5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IHYtaWY9XFxcImhhc0Jhc2VMYXllcnNcXFwiIHJvbGU9XFxcInRhYnBhbmVsXFxcIiBjbGFzcz1cXFwidGFiLXBhbmUgYmFzZWxheWVyc1xcXCIgaWQ9XFxcImJhc2VsYXllcnNcXFwiPlxcbiAgICAgICAgPGZvcm0+XFxuICAgICAgICAgIDx1bD5cXG4gICAgICAgICAgICA8bGkgdi1pZj1cXFwiIWJhc2VsYXllci5maXhlZFxcXCIgdi1mb3I9XFxcImJhc2VsYXllciBpbiBiYXNlbGF5ZXJzXFxcIj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInJhZGlvXFxcIj5cXG4gICAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiYmFzZWxheWVyXFxcIiB2LWNoZWNrZWQ9XFxcImJhc2VsYXllci52aXNpYmxlXFxcIiBAY2xpY2s9XFxcInNldEJhc2VMYXllcihiYXNlbGF5ZXIuaWQpXFxcIj57eyBiYXNlbGF5ZXIudGl0bGUgfX08L2xhYmVsPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgPC91bD5cXG4gICAgICAgIDwvZm9ybT5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8bGVnZW5kIDpsYXllcnN0cmVlPVxcXCJsYXllcnN0cmVlXFxcIj48L2xlZ2VuZD5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIG1lcmdlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLm1lcmdlO1xudmFyIHQgPSByZXF1aXJlKCdjb3JlL2kxOG4vaTE4bi5zZXJ2aWNlJykudDtcbnZhciByZXNvbHZlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnZ3VpL3Z1ZS9jb21wb25lbnQnKTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcHJvamVjdC9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG5cbnZhciB2dWVDb21wb25lbnRPcHRpb25zID0ge1xuICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jYXRhbG9nLmh0bWwnKSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2plY3Q6IFByb2plY3RzUmVnaXN0cnkuZ2V0Q3VycmVudFByb2plY3QoKVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsYXllcnN0cmVlOiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMucHJvamVjdC5zdGF0ZS5sYXllcnN0cmVlO1xuICAgIH0sXG4gICAgYmFzZWxheWVyczogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB0aGlzLnByb2plY3Quc3RhdGUuYmFzZWxheWVycztcbiAgICB9LFxuICAgIGhhc0Jhc2VMYXllcnM6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5wcm9qZWN0LnN0YXRlLmJhc2VsYXllcnMubGVuZ3RoPjA7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgc2V0QmFzZUxheWVyOiBmdW5jdGlvbihpZCkge1xuICAgICAgdGhpcy5wcm9qZWN0LnNldEJhc2VMYXllcihpZCk7XG4gICAgfVxuICB9LFxuICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuJG9uKCd0cmVlbm9kZXRvb2dsZWQnLGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgc2VsZi5wcm9qZWN0LnRvZ2dsZUxheWVyKG5vZGUuaWQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kb24oJ3RyZWVub2Rlc3Rvb2dsZWQnLGZ1bmN0aW9uKG5vZGVzLHBhcmVudENoZWNrZWQpe1xuICAgICAgdmFyIGxheWVyc0lkcyA9IF8ubWFwKG5vZGVzLCdpZCcpO1xuICAgICAgc2VsZi5wcm9qZWN0LnRvZ2dsZUxheWVycyhsYXllcnNJZHMscGFyZW50Q2hlY2tlZCk7XG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy4kb24oJ3RyZWVub2Rlc2VsZWN0ZWQnLGZ1bmN0aW9uKG5vZGUpe1xuICAgICAgaWYgKCFub2RlLnNlbGVjdGVkKSB7XG4gICAgICAgIHNlbGYucHJvamVjdC5zZWxlY3RMYXllcihub2RlLmlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYucHJvamVjdC51bnNlbGVjdExheWVyKG5vZGUuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8vIHNlIGxvIHZvZ2xpbyBpc3RhbnppYXJlIG1hbnVhbG1lbnRlXG52YXIgSW50ZXJuYWxDb21wb25lbnQgPSBWdWUuZXh0ZW5kKHZ1ZUNvbXBvbmVudE9wdGlvbnMpO1xuXG4vLyBzZSBsbyB2b2dsaW8gdXNhcmUgY29tZSBjb21wb25lbnRlIGNvbWUgZWxlbWVudG8gaHRtbFxuVnVlLmNvbXBvbmVudCgnZzN3LWNhdGFsb2cnLCB2dWVDb21wb25lbnRPcHRpb25zKTtcblxuXG4vKiBDT01QT05FTlRJIEZJR0xJICovXG5cbi8vIHRyZWUgY29tcG9uZW50XG5cblxuVnVlLmNvbXBvbmVudCgndHJpc3RhdGUtdHJlZScsIHtcbiAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vdHJpc3RhdGUtdHJlZS5odG1sJyksXG4gIHByb3BzOiB7XG4gICAgbGF5ZXJzdHJlZTogW10sXG4gICAgLy9lcmVkaXRvIGlsIG51bWVybyBkaSBjaGlsZHMgZGFsIHBhcmVudFxuICAgIG5fcGFyZW50Q2hpbGRzIDogMCxcbiAgICBjaGVja2VkOiBmYWxzZVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cGFuZGVkOiB0aGlzLmxheWVyc3RyZWUuZXhwYW5kZWQsXG4gICAgICBwYXJlbnRDaGVja2VkOiBmYWxzZSxcbiAgICAgIC8vcHJvcHJpZXRhIGNoZSBzZXJ2ZSBwZXIgZmFyZSBjb25mcm9udG8gcGVyIGlsIHRyaXN0YXRlXG4gICAgICBuX2NoaWxkczogdGhpcy5sYXllcnN0cmVlLm5vZGVzID8gdGhpcy5sYXllcnN0cmVlLm5vZGVzLmxlbmd0aCA6IDBcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgICAnY2hlY2tlZCc6IGZ1bmN0aW9uICh2YWwpe1xuICAgICAgICB0aGlzLmxheWVyc3RyZWUudmlzaWJsZSA9IHZhbDtcbiAgICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBpc0ZvbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzRm9sZGVyID0gdGhpcy5uX2NoaWxkcyA/IHRydWUgOiBmYWxzZTtcbiAgICAgIGlmIChpc0ZvbGRlcikge1xuICAgICAgICB2YXIgX3Zpc2libGVDaGlsZHMgPSAwO1xuICAgICAgICBfLmZvckVhY2godGhpcy5sYXllcnN0cmVlLm5vZGVzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgICAgICBpZiAobGF5ZXIudmlzaWJsZSl7XG4gICAgICAgICAgICBfdmlzaWJsZUNoaWxkcyArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubl9wYXJlbnRDaGlsZHMgPSB0aGlzLm5fY2hpbGRzIC0gX3Zpc2libGVDaGlsZHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNGb2xkZXJcbiAgICB9LFxuICAgIGlzSGlkZGVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxheWVyc3RyZWUuaGlkZGVuICYmICh0aGlzLmxheWVyc3RyZWUuaGlkZGVuID09PSB0cnVlKTtcbiAgICB9LFxuICAgIHNlbGVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpc1NlbGVjdGVkID0gdGhpcy5sYXllcnN0cmVlLnNlbGVjdGVkID8gXCJTSVwiIDogXCJOT1wiO1xuICAgICAgY29uc29sZS5sb2coaXNTZWxlY3RlZCk7XG4gICAgICByZXR1cm4gaXNTZWxlY3RlZDtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB0b2dnbGU6IGZ1bmN0aW9uIChjaGVja0FsbExheWVycykge1xuICAgICAgdmFyIGNoZWNrQWxsID0gY2hlY2tBbGxMYXllcnMgPT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuaXNGb2xkZXIgJiYgIWNoZWNrQWxsKSB7XG4gICAgICAgIHRoaXMubGF5ZXJzdHJlZS5leHBhbmRlZCA9ICF0aGlzLmxheWVyc3RyZWUuZXhwYW5kZWQ7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjaGVja0FsbCl7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudENoZWNrZWQgJiYgIXRoaXMubl9wYXJlbnRDaGlsZHMpe1xuICAgICAgICAgIHRoaXMucGFyZW50Q2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50Q2hlY2tlZCAmJiB0aGlzLm5fcGFyZW50Q2hpbGRzKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnRDaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBhcmVudENoZWNrZWQgPSAhdGhpcy5wYXJlbnRDaGVja2VkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJGRpc3BhdGNoKCd0cmVlbm9kZXN0b29nbGVkJyx0aGlzLmxheWVyc3RyZWUubm9kZXMsdGhpcy5wYXJlbnRDaGVja2VkKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLiRkaXNwYXRjaCgndHJlZW5vZGV0b29nbGVkJyx0aGlzLmxheWVyc3RyZWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2VsZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNGb2xkZXIpIHtcbiAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3RyZWVub2Rlc2VsZWN0ZWQnLHRoaXMubGF5ZXJzdHJlZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmlDbGFzczogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLm5fcGFyZW50Q2hpbGRzKSB7XG4gICAgICAgIHJldHVybiAnZmEtY2hlY2stc3F1YXJlLW8nO1xuICAgICAgfSBlbHNlIGlmICgodGhpcy5uX3BhcmVudENoaWxkcyA+IDApICYmICh0aGlzLm5fcGFyZW50Q2hpbGRzIDwgdGhpcy5uX2NoaWxkcykpIHtcbiAgICAgICAgcmV0dXJuICdmYS1zcXVhcmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdmYS1zcXVhcmUtbyc7XG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuXG5WdWUuY29tcG9uZW50KCdsZWdlbmQnLHtcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9sZWdlbmQuaHRtbCcpLFxuICAgIHByb3BzOiBbJ2xheWVyc3RyZWUnXSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vZGF0YSBxdWlcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICB2aXNpYmxlbGF5ZXJzOiBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgX3Zpc2libGVsYXllcnMgPSBbXTtcbiAgICAgICAgdmFyIGxheWVyc3RyZWUgPSB0aGlzLmxheWVyc3RyZWU7XG4gICAgICAgIGZ1bmN0aW9uIHRyYXZlcnNlKG9iail7XG4gICAgICAgIF8uZm9ySW4ob2JqLCBmdW5jdGlvbiAobGF5ZXIsIGtleSkge1xuICAgICAgICAgICAgICAvL3ZlcmlmaWNhIGNoZSBpbCB2YWxvcmUgZGVsbCdpZCBub24gc2lhIG51bGxvXG4gICAgICAgICAgICAgIGlmICghXy5pc05pbChsYXllci5pZCkgJiYgbGF5ZXIudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgX3Zpc2libGVsYXllcnMucHVzaChsYXllcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFfLmlzTmlsKGxheWVyLm5vZGVzKSkge1xuICAgICAgICAgICAgICAgICAgdHJhdmVyc2UobGF5ZXIubm9kZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhdmVyc2UobGF5ZXJzdHJlZSk7XG4gICAgICAgIHJldHVybiBfdmlzaWJsZWxheWVycztcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAnbGF5ZXJzdHJlZSc6IHtcbiAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24odmFsLCBvbGQpe1xuICAgICAgICAgIC8vY29kaWNlIHF1aVxuICAgICAgICB9LFxuICAgICAgICBkZWVwOiB0cnVlXG4gICAgICB9XG4gICAgfSxcbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAvL2NvZGljZSBxdWlcbiAgICB9XG59KTtcblxuVnVlLmNvbXBvbmVudCgnbGVnZW5kLWl0ZW0nLHtcbiAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vbGVnZW5kX2l0ZW0uaHRtbCcpLFxuICBwcm9wczogWydsYXllciddLFxuICBjb21wdXRlZDoge1xuICAgIGxlZ2VuZHVybDogZnVuY3Rpb24oKXtcbiAgICAgIC8vIGluIGF0dGVzYSBkaSByaXNvbHZlcmUgbG8gc2NoaWFudG8gZGkgUUdTSSBTZXJ2ZXIuLi5cbiAgICAgIC8vcmV0dXJuIFwiaHR0cDovL2xvY2FsaG9zdC9jZ2ktYmluL3FnaXNfbWFwc2Vydi5mY2dpP21hcD0vaG9tZS9naW9oYXBweS9TY3JpdmFuaWEvRGV2L0czVy9nM3ctY2xpZW50L3Rlc3QvcHJvZ2V0dG8vdGVzdC5xZ3MmU0VSVklDRT1XTVMmVkVSU0lPTj0xLjMuMCZSRVFVRVNUPUdldExlZ2VuZEdyYXBoaWMmRk9STUFUPWltYWdlL3BuZyZMQVlFUlRJVExFPUZhbHNlJklURU1GT05UU0laRT0xMCZMQVlFUj1cIit0aGlzLmxheWVyLm5hbWU7XG4gICAgICByZXR1cm4gUHJvamVjdHNSZWdpc3RyeS5nZXRDdXJyZW50UHJvamVjdCgpLmdldExheWVyQnlJZCh0aGlzLmxheWVyLmlkKS5nZXRMZWdlbmRVcmwoKTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAvLyBlc2VtcGlvIHV0aWxpenpvIGRlbCBzZXJ2aXppbyBHVUlcbiAgICBvcGVuZm9ybTogZnVuY3Rpb24oKXtcbiAgICAgIC8vR1VJLm5vdGlmeS5zdWNjZXNzKFwiQXBybyB1biBmb3JtXCIpO1xuICAgICAgLy9HVUkuc2hvd0Zvcm0oKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKiBGSU5FIENPTVBPTkVOVEkgRklHTEkgKi9cblxuLyogSU5URVJGQUNDSUEgUFVCQkxJQ0EgKi9cbmZ1bmN0aW9uIENhdGFsb2dDb21wb25lbnQob3B0aW9ucyl7XG4gIGJhc2UodGhpcyk7XG4gIHRoaXMuaWQgPSBcImNhdGFsb2ctY29tcG9uZW50XCI7XG4gIHRoaXMudGl0bGUgPSBcImNhdGFsb2dcIjtcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudCA9IG5ldyBJbnRlcm5hbENvbXBvbmVudDtcbiAgLy9tZXJnaW8gb3B6aW9uaSBjb24gcHJvcHJpdMOgIGRpIGRlZmF1bHQgZGVsIGNvbXBvbmVudGVcbiAgbWVyZ2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoQ2F0YWxvZ0NvbXBvbmVudCwgQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXRhbG9nQ29tcG9uZW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgcm9sZT1cXFwidGFicGFuZWxcXFwiIGNsYXNzPVxcXCJ0YWItcGFuZVxcXCIgaWQ9XFxcImxlZ2VuZFxcXCI+XFxuICA8bGVnZW5kLWl0ZW0gOmxheWVyPVxcXCJsYXllclxcXCIgdi1mb3I9XFxcImxheWVyIGluIHZpc2libGVsYXllcnNcXFwiPjwvbGVnZW5kLWl0ZW0+XFxuPC9kaXY+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBAY2xpY2s9XFxcIm9wZW5mb3JtKClcXFwiPnt7IGxheWVyLnRpdGxlIH19PC9kaXY+XFxuPGRpdj48aW1nIDpzcmM9XFxcImxlZ2VuZHVybFxcXCI+PC9kaXY+XFxuXCI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGxpIGNsYXNzPVxcXCJ0cmVlLWl0ZW1cXFwiIDpjbGFzcz1cXFwie3NlbGVjdGVkOiBsYXllcnN0cmVlLnNlbGVjdGVkfVxcXCI+XFxuICA8c3BhbiA6Y2xhc3M9XFxcIntib2xkOiBpc0ZvbGRlciwgJ2ZhLWNoZXZyb24tZG93bic6IGxheWVyc3RyZWUuZXhwYW5kZWQsICdmYS1jaGV2cm9uLXJpZ2h0JzogIWxheWVyc3RyZWUuZXhwYW5kZWR9XFxcIiBAY2xpY2s9XFxcInRvZ2dsZVxcXCIgdi1pZj1cXFwiaXNGb2xkZXJcXFwiIGNsYXNzPVxcXCJmYVxcXCI+PC9zcGFuPlxcbiAgPHNwYW4gdi1pZj1cXFwiaXNGb2xkZXJcXFwiIEBjbGljaz1cXFwidG9nZ2xlKCd0cnVlJylcXFwiIDpjbGFzcz1cXFwiW3RyaUNsYXNzKCldXFxcIiBjbGFzcz1cXFwiZmFcXFwiPjwvc3Bhbj5cXG4gIDxzcGFuIHYtZWxzZSBAY2xpY2s9XFxcInRvZ2dsZVxcXCIgOmNsYXNzPVxcXCJbbGF5ZXJzdHJlZS52aXNpYmxlICA/ICdmYS1jaGVjay1zcXVhcmUtbyc6ICdmYS1zcXVhcmUtbycsbGF5ZXJzdHJlZS5kaXNhYmxlZCAgPyAnZGlzYWJsZWQnOiAnJ11cXFwiIGNsYXNzPVxcXCJmYVxcXCIgc3R5bGU9XFxcImN1cnNvcjpkZWZhdWx0XFxcIj48L3NwYW4+XFxuICA8c3BhbiBpZD1cXFwidHJlZS1ub2RlLXRpdGxlXFxcIiA6Y2xhc3M9XFxcIntib2xkOiBpc0ZvbGRlciwgZGlzYWJsZWQ6IGxheWVyc3RyZWUuZGlzYWJsZWR9XFxcIiBAY2xpY2s9XFxcInNlbGVjdFxcXCI+e3tsYXllcnN0cmVlLnRpdGxlfX08L3NwYW4+XFxuICA8dWwgdi1zaG93PVxcXCJsYXllcnN0cmVlLmV4cGFuZGVkXFxcIiB2LWlmPVxcXCJpc0ZvbGRlclxcXCI+XFxuICAgIDx0cmlzdGF0ZS10cmVlIDpuX3BhcmVudC1jaGlsZHMuc3luYz1cXFwibl9wYXJlbnRDaGlsZHNcXFwiIDpsYXllcnN0cmVlPVxcXCJsYXllcnN0cmVlXFxcIiA6Y2hlY2tlZD1cXFwicGFyZW50Q2hlY2tlZFxcXCIgdi1mb3I9XFxcImxheWVyc3RyZWUgaW4gbGF5ZXJzdHJlZS5ub2Rlc1xcXCI+XFxuICAgIDwvdHJpc3RhdGUtdHJlZT5cXG4gIDwvdWw+XFxuPC9saT5cXG5cXG5cXG5cXG5cXG5cIjtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcblxudmFyIENvbXBvbmVudCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLmludGVybmFsQ29tcG9uZW50ID0gbnVsbDtcbiAgdGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgTWF0aC5yYW5kb20oKSAqIDEwMDA7XG4gIHRoaXMudGl0bGUgPSBvcHRpb25zLnRpdGxlIHx8ICcnXG4gIHRoaXMuc3RhdGUgPSB7XG4gICAgdmlzaWJsZTogb3B0aW9ucy52aXNpYmxlIHx8IHRydWUsXG4gICAgb3Blbjogb3B0aW9ucy5vcGVuIHx8IGZhbHNlXG4gIH1cbn07XG5pbmhlcml0KENvbXBvbmVudCxHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG5wcm90by5nZXRJZCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLmlkO1xufTtcblxucHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5zdGF0ZS50aXRsZTtcbn07XG5cbnByb3RvLnNldFRpdGxlID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgdGhpcy5zdGF0ZS50aXRsZSA9IHRpdGxlO1xufTtcblxuLy9pbXBsZW1lbnRhdGkgZHVlIG1ldG9kaSBwZXIgcG90ZXIgdW5pZmljYXJlIGlsIG1ldG9kbyBkaSByZWN1cGVybyBkZWwgc2Vydml6aW9cbi8vbGVnYXRvIGFsIGNvbXBvbmVudGVcblxucHJvdG8uZ2V0U2VydmljZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fc2VydmljZTtcbn07XG5cbnByb3RvLnNldFNlcnZpY2UgPSBmdW5jdGlvbihzZXJ2aWNlSW5zdGFuY2UpIHtcbiAgdGhpcy5fc2VydmljZSA9IHNlcnZpY2VJbnN0YW5jZTtcbn07XG5cbi8vLy8vLy8vLy8gZmluZSBtZXRvZGkgU2VydmljZSBDb21wb25lbnRzIC8vLy8vLy8vLy9cblxuLyogSE9PS1MgKi9cblxuLyogXG4gKiBJbCBtZXRvZG8gcGVybWV0dGUgYWwgY29tcG9uZW50ZSBkaSBtb250YXJzaSBuZWwgRE9NXG4gKiBwYXJlbnRFbDogZWxlbWVudG8gRE9NIHBhZHJlLCBzdSBjdWkgaW5zZXJpcnNpOyBcbiAqIHJpdG9ybmEgdW5hIHByb21pc2UsIHJpc29sdGEgbmVsIG1vbWVudG8gaW4gY3VpIHNhcsOgIHRlcm1pbmF0byBpbCBtb250YWdnaW9cbiovXG5wcm90by5tb3VudCA9IGZ1bmN0aW9uKHBhcmVudCl7fTtcblxuLypcbiAqIE1ldG9kbyByaWNoaWFtYXRvIHF1YW5kbyBzaSB2dW9sZSByaW11b3ZlcmUgaWwgY29tcG9uZW50ZS5cbiAqIFJpdG9ybmEgdW5hIHByb21lc3NhIGNoZSBzYXLDoCByaXNvbHRhIG5lbCBtb21lbnRvIGluIGN1aSBpbCBjb21wb25lbnRlIGF2csOgIGNvbXBsZXRhdG8gbGEgcHJvcHJpYSByaW1vemlvbmUgKGVkIGV2ZW50dWFsZSByaWxhc2NpbyBkaSByaXNvcnNlIGRpcGVuZGVudGkpXG4qL1xucHJvdG8udW5tb3VudCA9IGZ1bmN0aW9uKCl7fTtcblxuLyogXG4gKiBNZXRvZG8gKG9wemlvbmFsZSkgY2hlIG9mZnJlIGwnb3Bwb3J0dW5pdMOgIGRpIHJpY2FsY29sYXJlIHByb3ByaWV0w6AgZGlwZW5kZW50aSBkYWxsZSBkaW1lbnNpb25pIGRlbCBwYWRyZVxuICogcGFyZW50SGVpZ2h0OiBudW92YSBhbHRlenphIGRlbCBwYXJlbnRcbiAqIHBhcmVudFdpZHRoOiBudW92YSBsYXJnaGV6emEgZGVsIHBhcmVudFxuICogcmljaGlhbWF0byBvZ25pIHZvbHRhIGNoZSBpbCBwYXJlbnQgc3ViaXNjZSB1biByaWRpbWVuc2lvbmFtZW50b1xuKi9cbnByb3RvLmxheW91dCA9IGZ1bmN0aW9uKHBhcmVudFdpZHRoLHBhcmVudEhlaWdodCl7fTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudDtcbiIsInZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG5cbmZ1bmN0aW9uIENvbXBvbmVudHNSZWdpc3RyeSgpIHtcbiAgdGhpcy5jb21wb25lbnRzID0ge307XG4gIFxuICB0aGlzLnJlZ2lzdGVyQ29tcG9uZW50ID0gZnVuY3Rpb24oY29tcG9uZW50KSB7XG4gICAgdmFyIGlkID0gY29tcG9uZW50LmdldElkKCk7XG4gICAgaWYgKCF0aGlzLmNvbXBvbmVudHNbaWRdKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudHNbaWRdID0gY29tcG9uZW50O1xuICAgIH1cbiAgfTsgXG4gIFxuICB0aGlzLmdldENvbXBvbmVudCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50c1tpZF07XG4gIH07XG4gIFxuICB0aGlzLnVucmVnaXN0ZXJDb21wb25lbnQgPSBmdW5jdGlvbihpZCkge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzLl9jb21wb25lbnRzW2lkXTtcbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKGNvbXBvbmVudC5kZXN0cm95KSkge1xuICAgICAgICBjb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGNvbXBvbmVudDtcbiAgICAgIHRoaXMuX2NvbXBvbmVudHNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5pbmhlcml0KENvbXBvbmVudHNSZWdpc3RyeSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21wb25lbnRzUmVnaXN0cnk7XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIHJlc29sdmUgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVzb2x2ZTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG52YXIgUGFuZWwgPSAgcmVxdWlyZSgnZ3VpL3BhbmVsJyk7XG52YXIgUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24gPSByZXF1aXJlKCdnM3ctb2wzL3NyYy9pbnRlcmFjdGlvbnMvcGlja2Nvb3JkaW5hdGVzaW50ZXJhY3Rpb24nKTtcbnZhciBRdWVyeVNlcnZpY2UgPSByZXF1aXJlKCdjb3JlL3F1ZXJ5L3F1ZXJ5c2VydmljZScpO1xudmFyIENsaXBCb2FyZCA9IHJlcXVpcmUoJ2NvcmUvY2xpcGJvYXJkc2VydmljZScpO1xuXG5WdWUuZmlsdGVyKCdzdGFydGNhc2UnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF8uc3RhcnRDYXNlKHZhbHVlKTtcbn0pO1xuXG5WdWUuZmlsdGVyKCdsb3dlckNhc2UnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF8ubG93ZXJDYXNlKHZhbHVlKTtcbn0pO1xuXG5WdWUuZmlsdGVyKCdyZWxhdGlvbnBsdXJhbCcsIGZ1bmN0aW9uIChyZWxhdGlvbikge1xuICByZXR1cm4gKHJlbGF0aW9uLnBsdXJhbCkgPyByZWxhdGlvbi5wbHVyYWwgOiBfLnN0YXJ0Q2FzZShyZWxhdGlvbi5uYW1lKTtcbn0pO1xuXG5WdWUudmFsaWRhdG9yKCdlbWFpbCcsIGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLnRlc3QodmFsKVxufSk7XG5cblZ1ZS52YWxpZGF0b3IoJ2ludGVnZXInLCBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiAvXigtP1sxLTldXFxkKnwwKSQvLnRlc3QodmFsKTtcbn0pO1xuXG52YXIgRm9ybVBhbmVsID0gVnVlLmV4dGVuZCh7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuL2Zvcm1wYW5lbC5odG1sJyksXG4gIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0ZToge31cbiAgICB9XG4gIH0sXG4gIHRyYW5zaXRpb25zOiB7J2FkZHJlbW92ZXRyYW5zaXRpb24nOiAnc2hvd2hpZGUnfSxcbiAgbWV0aG9kczoge1xuICAgIGV4ZWM6IGZ1bmN0aW9uKGNiayl7XG4gICAgICB2YXIgcmVsYXRpb25zID0gdGhpcy5zdGF0ZS5yZWxhdGlvbnMgfHwgbnVsbDtcbiAgICAgIGNiayh0aGlzLnN0YXRlLmZpZWxkcyxyZWxhdGlvbnMpO1xuICAgICAgR1VJLmNsb3NlRm9ybSgpO1xuICAgIH0sXG4gICAgYnRuRW5hYmxlZDogZnVuY3Rpb24oYnV0dG9uKSB7XG4gICAgICByZXR1cm4gYnV0dG9uLnR5cGUgIT0gJ3NhdmUnIHx8IChidXR0b24udHlwZSA9PSAnc2F2ZScgJiYgdGhpcy4kdmFsaWRhdGlvbi52YWxpZCk7XG4gICAgfSxcbiAgICBoYXNGaWVsZHNSZXF1aXJlZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5mb3JtLl9oYXNGaWVsZHNSZXF1aXJlZCgpO1xuICAgIH0sXG4gICAgaXNFZGl0YWJsZTogZnVuY3Rpb24oZmllbGQpe1xuICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZm9ybS5faXNFZGl0YWJsZShmaWVsZCk7XG4gICAgfSxcbiAgICBpc1NpbXBsZTogZnVuY3Rpb24oZmllbGQpe1xuICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZm9ybS5faXNTaW1wbGUoZmllbGQpO1xuICAgIH0sXG4gICAgaXNUZXh0YXJlYTogZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZvcm0uX2lzVGV4dGFyZWEoZmllbGQpO1xuICAgIH0sXG4gICAgaXNTZWxlY3Q6IGZ1bmN0aW9uKGZpZWxkKXtcbiAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZvcm0uX2lzU2VsZWN0KGZpZWxkKTtcbiAgICB9LFxuICAgIGlzTGF5ZXJQaWNrZXI6IGZ1bmN0aW9uKGZpZWxkKXtcbiAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLmZvcm0uX2lzTGF5ZXJQaWNrZXIoZmllbGQpO1xuICAgIH0sXG4gICAgbGF5ZXJQaWNrZXJQbGFjZUhvbGRlcjogZnVuY3Rpb24oZmllbGQpe1xuICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZm9ybS5fZ2V0bGF5ZXJQaWNrZXJMYXllck5hbWUoZmllbGQuaW5wdXQub3B0aW9ucy5sYXllcmlkKTtcbiAgICB9LFxuICAgIHBpY2tMYXllcjogZnVuY3Rpb24oZmllbGQpe1xuICAgICAgdGhpcy4kb3B0aW9ucy5mb3JtLl9waWNrTGF5ZXIoZmllbGQpO1xuICAgIH0sXG4gICAgaXNWaXNpYmxlOiBmdW5jdGlvbihmaWVsZCl7XG4gICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5mb3JtLl9pc1Zpc2libGUoZmllbGQpO1xuICAgIH0sXG4gICAgdmlzaWJsZUVsZW1lbnRzOiBmdW5jdGlvbihyZWxhdGlvbikge1xuICAgICAgcmV0dXJuIF8uZmlsdGVyKHJlbGF0aW9uLmVsZW1lbnRzLGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICByZXR1cm4gZWxlbWVudC5zdGF0ZSAhPSAnREVMRVRFRCc7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNob3dSZWxhdGlvbjogZnVuY3Rpb24ocmVsYXRpb24pe1xuICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZm9ybS5fc2hvdWxkU2hvd1JlbGF0aW9uKHJlbGF0aW9uKTtcbiAgICB9LFxuICAgIHJlbGF0aW9uUGtGaWVsZE5hbWU6IGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gICAgICByZXR1cm4gcmVsYXRpb24ucGs7XG4gICAgfSxcbiAgICBpc1JlbGF0aW9uRWxlbWVudERlbGV0YWJsZTogZnVuY3Rpb24ocmVsYXRpb24sZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQubmV3KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1pbjtcbiAgICAgIGlmIChyZWxhdGlvbi50eXBlID09ICdPTkUnKSB7XG4gICAgICAgIG1pbiA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWluID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVsYXRpb24ubWluKSB7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbi5yZWxhdGlvbi5taW4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1pbiA8IHJlbGF0aW9uLmVsZW1lbnRzLmxlbmd0aDtcbiAgICB9LFxuICAgIGNhbkFkZFJlbGF0aW9uRWxlbWVudHM6IGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gICAgICB2YXIgY2FuQWRkID0gdHJ1ZTtcbiAgICAgIGlmIChyZWxhdGlvbi50eXBlID09ICdPTkUnKSB7XG4gICAgICAgIGNhbkFkZCA9IChyZWxhdGlvbi5lbGVtZW50cy5sZW5ndGgpID8gZmFsc2UgOiB0cnVlIC8vIHNlIMOoIHVuYSByZWxhemlvbmUgMToxIGUgbm9uIGhvIGVsZW1lbnRpLCBsbyBwb3NzbyBhZ2dpdW5nZXJlLCBhbHRyaW1lbnRpIG5vXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIG1heCA9IHJlbGF0aW9uLm1heCA/IHJlbGF0aW9uLm1heCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY2FuQWRkID0gcmVsYXRpb24uZWxlbWVudHMubGVuZ3RoIDwgbWF4OyBcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYW5BZGQ7XG4gICAgfSxcbiAgICBhZGRSZWxhdGlvbkVsZW1lbnQ6IGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZvcm0uX2FkZFJlbGF0aW9uRWxlbWVudChyZWxhdGlvbik7XG4gICAgfSxcbiAgICByZW1vdmVSZWxhdGlvbkVsZW1lbnQ6IGZ1bmN0aW9uKHJlbGF0aW9uLGVsZW1lbnQpe1xuICAgICAgdGhpcy4kb3B0aW9ucy5mb3JtLl9yZW1vdmVSZWxhdGlvbkVsZW1lbnQocmVsYXRpb24sZWxlbWVudCk7XG4gICAgfSxcbiAgICBmaWVsZHNTdWJzZXQ6IGZ1bmN0aW9uKGZpZWxkcykge1xuICAgICAgdmFyIGVuZCA9IE1hdGgubWluKDMsZmllbGRzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gZmllbGRzLnNsaWNlKDAsZW5kKTtcbiAgICB9LFxuICAgIGZpZWxkc1N1YnNldExlbmd0aDogZnVuY3Rpb24oZmllbGRzKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWVsZHNTdWJzZXQoZmllbGRzKS5sZW5ndGg7XG4gICAgfSxcbiAgICBjb2xsYXBzZUVsZW1lbnRCb3g6IGZ1bmN0aW9uKHJlbGF0aW9uLGVsZW1lbnQpIHtcbiAgICAgIHZhciBib3hpZCA9IHRoaXMuZ2V0VW5pcXVlUmVsYXRpb25FbGVtZW50SWQocmVsYXRpb24sZWxlbWVudCk7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5lbGVtZW50c0JveGVzW2JveGlkXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5lbGVtZW50c0JveGVzW2JveGlkXS5jb2xsYXBzZWQ7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b2dnbGVFbGVtZW50Qm94OiBmdW5jdGlvbihyZWxhdGlvbiwgZWxlbWVudCkge1xuICAgICAgdmFyIGJveGlkID0gdGhpcy5nZXRVbmlxdWVSZWxhdGlvbkVsZW1lbnRJZChyZWxhdGlvbiwgZWxlbWVudCk7XG4gICAgICBjb25zb2xlLmxvZyhib3hpZCk7XG4gICAgICB0aGlzLnN0YXRlLmVsZW1lbnRzQm94ZXNbYm94aWRdLmNvbGxhcHNlZCA9ICF0aGlzLnN0YXRlLmVsZW1lbnRzQm94ZXNbYm94aWRdLmNvbGxhcHNlZDtcbiAgICB9LFxuICAgIGdldFVuaXF1ZVJlbGF0aW9uRWxlbWVudElkOiBmdW5jdGlvbihyZWxhdGlvbiwgZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZm9ybS5nZXRVbmlxdWVSZWxhdGlvbkVsZW1lbnRJZChyZWxhdGlvbiwgZWxlbWVudCk7XG4gICAgfSxcbiAgICBwYXN0ZVRvQ2xpcEJvYXJkIDogZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygnUGFzdGUnKTtcbiAgICB9LFxuICAgIGNvcHlUb0NsaXBCb2FyZCA6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5mb3JtLl9jb3B5Rm9ybVRvQ2xpcEJvYXJkKCk7XG4gICAgfSxcbiAgICBwaWNrTGF5ZXJUb0NsaXBCb2FyZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRvcHRpb25zLmZvcm0uX3BpY2tMYXllclRvQ2xpcEJvYXJkKCk7XG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy4kdmFsaWRhdGUoZmllbGQubmFtZSk7XG4gICAgfSxcbiAgICBoYXNSZWxhdGlvbnM6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5yZWxhdGlvbnMubGVuZ3RoO1xuICAgIH0sXG4gICAgY2FuUGFzdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLnN0YXRlLmNvcGllZDtcbiAgICB9LFxuICAgIGNhbWJpYXRvZmllbGRzOiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUuZmllbGRzKTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgSW5wdXRzID0ge307XG5JbnB1dHMuU1RSSU5HID0gJ3N0cmluZyc7XG5JbnB1dHMuSU5URUdFUiA9ICdpbnRlZ2VyJztcbklucHV0cy5GTE9BVCA9ICdmbG9hdCc7XG5cbklucHV0cy5kZWZhdWx0cyA9IHt9O1xuSW5wdXRzLmRlZmF1bHRzW0lucHV0cy5TVFJJTkddID0gXCJcIjtcbklucHV0cy5kZWZhdWx0c1tJbnB1dHMuSU5URUdFUl0gPSAwO1xuSW5wdXRzLmRlZmF1bHRzW0lucHV0cy5GTE9BVF0gPSAwLjA7XG5JbnB1dHMuc2ltcGxlRmllbGRUeXBlcyA9IFtJbnB1dHMuU1RSSU5HLElucHV0cy5JTlRFR0VSLElucHV0cy5GTE9BVF07XG5cbklucHV0cy5URVhUQVJFQSA9ICd0ZXh0YXJlYSc7XG5JbnB1dHMuU0VMRUNUID0gJ3NlbGVjdCc7XG5JbnB1dHMuTEFZRVJQSUNLRVIgPSAnbGF5ZXJwaWNrZXInO1xuXG5JbnB1dHMuc3BlY2lhbElucHV0cyA9IFtJbnB1dHMuVEVYVEFSRUEsSW5wdXRzLlNFTEVDVCxJbnB1dHMuTEFZRVJQSUNLRVJdO1xuXG5mdW5jdGlvbiBGb3JtKG9wdGlvbnMpIHtcbiAgLy8gcHJvcHJpZXTDoCBuZWNlc3NhcmllLiBJbiBmdXR1cm8gbGUgbWV0dGVybW8gaW4gdW5hIGNsYXNzZSBQYW5lbCBkYSBjdWkgZGVyaXZlcmFubm8gdHV0dGkgaSBwYW5uZWxsaSBjaGUgdm9nbGlvbm8gZXNzZXJlIG1vc3RyYXRpIG5lbGxhIHNpZGViYXJcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudCA9IG51bGw7XG4gIHRoaXMub3B0aW9ucyA9ICBvcHRpb25zIHx8IHt9O1xuICB0aGlzLnByb3ZpZGVyID0gb3B0aW9ucy5wcm92aWRlcjtcbiAgdGhpcy5pZCA9IG9wdGlvbnMuaWQ7IC8vIGlkIGRlbCBmb3JtXG4gIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTsgLy8gbm9tZSBkZWwgZm9ybVxuICB0aGlzLmRhdGFpZCA9IG9wdGlvbnMuZGF0YWlkOyAvLyBcImFjY2Vzc2lcIiwgXCJnaXVuemlvbmlcIiwgZWNjLlxuICB0aGlzLmVkaXRvciA9IG9wdGlvbnMuZWRpdG9yIHx8IHt9O1xuICB0aGlzLnBrID0gb3B0aW9ucy5wayB8fCBudWxsOyAvLyBldmVudHVhbGUgY2hpYXZlIHByaW1hcmlhIChub24gdHV0dGkgaSBmb3JtIHBvdHJlYmJlcm8gYXZlcmNlbGEgbyBhdmVybmUgYmlzb2dub1xuICB0aGlzLmlzbmV3ID0gKCFfLmlzTmlsKG9wdGlvbnMuaXNuZXcpICYmIF8uaXNCb29sZWFuKG9wdGlvbnMuaXNuZXcpKSA/IG9wdGlvbnMuaXNuZXcgOiB0cnVlO1xuICB0aGlzLnN0YXRlID0ge1xuICAgIC8vIGkgZGF0aSBkZWwgZm9ybSBwb3Nzb25vIGF2ZXJlIG8gbWVubyB1bmEgcHJpbWFyeSBrZXlcbiAgICBmaWVsZHM6IG9wdGlvbnMuZmllbGRzLFxuICAgIHJlbGF0aW9uczogb3B0aW9ucy5yZWxhdGlvbnNcbiAgfTtcbiAgdGhpcy5fY2xpcEJvYXJkID0gQ2xpcEJvYXJkLmdldCgpO1xuICB0aGlzLl9mb3JtUGFuZWwgPSBvcHRpb25zLmZvcm1QYW5lbCB8fCBGb3JtUGFuZWw7XG4gIHRoaXMuX2RlZmF1bHRzID0gb3B0aW9ucy5kZWZhdWx0cyB8fCBJbnB1dHMuZGVmYXVsdHM7XG59XG5pbmhlcml0KEZvcm0sIFBhbmVsKTtcblxudmFyIHByb3RvID0gRm9ybS5wcm90b3R5cGU7XG5cbi8vIHZpZW5lIHJpY2hpYW1hdG8gZGFsbGEgdG9vbGJhciBxdWFuZG9cbi8vIGlsIHBsdWdpbiBjaGllZGUgZGkgbW9zdHJhcmUgdW4gcHJvcHJpbyBwYW5uZWxsbyBuZWxsYSBHVUkgKEdVSS5zaG93UGFuZWwpXG5wcm90by5tb3VudCA9IGZ1bmN0aW9uKGNvbnRhaW5lcil7XG4gIHRoaXMuX3NldHVwRmllbGRzKCk7XG4gIHZhciBwYW5lbCA9IHRoaXMuX3NldHVwUGFuZWwoKTtcbiAgdGhpcy5fbW91bnRQYW5lbChwYW5lbCwgY29udGFpbmVyKTtcbiAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG59O1xuXG5wcm90by5fbW91bnRQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsLCBjb250YWluZXIpIHtcbiAgcGFuZWwuJG1vdW50KCkuJGFwcGVuZFRvKGNvbnRhaW5lcik7XG59O1xuXG4vLyByaWNoaWFtYXRvIHF1YW5kbyBsYSBHVUkgY2hpZWRlIGRpIGNoaXVkZXJlIGlsIHBhbm5lbGxvLiBTZSByaXRvcm5hIGZhbHNlIGlsIHBhbm5lbGxvIG5vbiB2aWVuZSBjaGl1c29cbnByb3RvLnVubW91bnQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmludGVybmFsQ29tcG9uZW50LiRkZXN0cm95KHRydWUpO1xuICB0aGlzLmludGVybmFsQ29tcG9uZW50ID0gbnVsbDtcbiAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG59O1xuXG5wcm90by5fY29weUZvcm1Ub0NsaXBCb2FyZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZm9ybSA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUpO1xuICByZXR1cm4gZm9ybTtcbn07XG5cbnByb3RvLl9pc05ldyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLmlzbmV3O1xufTtcblxucHJvdG8uX2hhc0ZpZWxkc1JlcXVpcmVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzb21lRmllbGRzUmVxdWlyZWQgPSBfLnNvbWUodGhpcy5zdGF0ZS5maWVsZHMsIGZ1bmN0aW9uKGZpZWxkKXtcbiAgICByZXR1cm4gZmllbGQudmFsaWRhdGUgJiYgZmllbGQudmFsaWRhdGUucmVxdWlyZWQ7XG4gIH0pO1xuICB2YXIgc29tZVJlbGF0aW9uc1JlcXVpcmVkID0gXy5zb21lKHRoaXMuc3RhdGUucmVsYXRpb25zLGZ1bmN0aW9uKHJlbGF0aW9uKXtcbiAgICByZXR1cm4gcmVsYXRpb24udmFsaWRhdGUgJiYgcmVsYXRpb24udmFsaWRhdGUucmVxdWlyZWQ7XG4gIH0pO1xuICByZXR1cm4gc29tZUZpZWxkc1JlcXVpcmVkIHx8IHNvbWVSZWxhdGlvbnNSZXF1aXJlZDtcbn07XG5cbnByb3RvLl9pc1Zpc2libGUgPSBmdW5jdGlvbihmaWVsZCl7XG4gIHJldHVybiAhKCFmaWVsZC5lZGl0YWJsZSAmJiAoZmllbGQudmFsdWUgPT0gXCJcIiB8fCBfLmlzTnVsbChmaWVsZC52YWx1ZSkpKTtcbn07XG5cbnByb3RvLl9pc0VkaXRhYmxlID0gZnVuY3Rpb24oZmllbGQpe1xuICByZXR1cm4gZmllbGQuZWRpdGFibGU7XG59O1xuXG5wcm90by5faXNTaW1wbGUgPSBmdW5jdGlvbihmaWVsZCl7XG4gIGlmIChfLmluY2x1ZGVzKElucHV0cy5zcGVjaWFsSW5wdXRzLGZpZWxkLmlucHV0LnR5cGUpKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIF8uaW5jbHVkZXMoSW5wdXRzLnNpbXBsZUZpZWxkVHlwZXMsZmllbGQudHlwZSlcbn07XG5cbnByb3RvLl9pc1RleHRhcmVhID0gZnVuY3Rpb24oZmllbGQpIHtcbiAgcmV0dXJuIChmaWVsZC5pbnB1dC50eXBlID09IElucHV0cy5URVhUQVJFQSk7XG59O1xuXG5wcm90by5faXNTZWxlY3QgPSBmdW5jdGlvbihmaWVsZCl7XG4gIHJldHVybiAoXy5pbmNsdWRlcyhJbnB1dHMuc3BlY2lhbElucHV0cyxmaWVsZC5pbnB1dC50eXBlKSAmJiBmaWVsZC5pbnB1dC50eXBlID09IElucHV0cy5TRUxFQ1QpO1xufTtcblxucHJvdG8uX2lzTGF5ZXJQaWNrZXIgPSBmdW5jdGlvbihmaWVsZCl7XG4gIHJldHVybiAoXy5pbmNsdWRlcyhJbnB1dHMuc3BlY2lhbElucHV0cyxmaWVsZC5pbnB1dC50eXBlKSAmJiBmaWVsZC5pbnB1dC50eXBlID09IElucHV0cy5MQVlFUlBJQ0tFUik7XG59O1xuXG5wcm90by5fcGlja0xheWVyID0gZnVuY3Rpb24oZmllbGQpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIHJpdG9ybm8gdW5hIHByb21lc3NhLCBzZSBxdWFsY3VuIGFsdHJvIHZvbGVzc2UgdXNhcmUgaWwgcmlzdWx0YXRvIChlcy4gcGVyIHNldHRhcmUgYWx0cmkgY2FtcGkgaW4gYmFzZSBhbGxhIGZlYXR1cmUgc2VsZXppb25hdGEpXG4gIHZhciBkID0gJC5EZWZlcnJlZCgpO1xuICAvLyBkaXNhYmlsaXRvIHRlbXBvcmFuZW1hbnRlIGxvIHN0cmF0byBtb2RhbGUgcGVyIHBlcm1ldHRlcmUgbCdpbnRlcmF6aW9uZSBjb24gbGEgbWFwcGFcbiAgR1VJLnNldE1vZGFsKGZhbHNlKTtcbiAgbWFwU2VydmljZSA9IEdVSS5nZXRDb21wb25lbnQoJ21hcCcpLmdldFNlcnZpY2UoKTtcbiAgdmFyIGxheWVyID0gbWFwU2VydmljZS5nZXRQcm9qZWN0KCkuZ2V0TGF5ZXJCeUlkKGZpZWxkLmlucHV0Lm9wdGlvbnMubGF5ZXJpZCk7XG4gIHZhciByZWxGaWVsZE5hbWUgPSBmaWVsZC5pbnB1dC5vcHRpb25zLmZpZWxkO1xuICB2YXIgcmVsRmllbGRMYWJlbCA9IGxheWVyLmdldEF0dHJpYnV0ZUxhYmVsKGZpZWxkLmlucHV0Lm9wdGlvbnMuZmllbGQpO1xuICB0aGlzLl9waWNrSW50ZXJhY3Rpb24gPSBuZXcgUGlja0Nvb3JkaW5hdGVzSW50ZXJhY3Rpb24oKTtcbiAgbWFwU2VydmljZS5hZGRJbnRlcmFjdGlvbih0aGlzLl9waWNrSW50ZXJhY3Rpb24pO1xuICB0aGlzLl9waWNrSW50ZXJhY3Rpb24ub24oJ3BpY2tlZCcsZnVuY3Rpb24oZSl7ICAgXG4gICAgUXVlcnlTZXJ2aWNlLnF1ZXJ5QnlMb2NhdGlvbihlLmNvb3JkaW5hdGUsIFtsYXllcl0pXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgdmFyIGZlYXR1cmVzRm9yTGF5ZXJzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgIGlmIChmZWF0dXJlc0ZvckxheWVycy5sZW5ndGggJiYgZmVhdHVyZXNGb3JMYXllcnNbMF0uZmVhdHVyZXMubGVuZ3RoKSB7IFxuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGZlYXR1cmVzRm9yTGF5ZXJzWzBdLmZlYXR1cmVzWzBdLmdldFByb3BlcnRpZXMoKTsgLy8gcHJlbmRvIGxhIHByaW1hIGZlYXR1cmUgZGVsIHByaW1vIChlIHVuaWNvKSBsYXllclxuICAgICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3JlbEZpZWxkTmFtZV0gPyBhdHRyaWJ1dGVzW3JlbEZpZWxkTmFtZV0gOiBhdHRyaWJ1dGVzW3JlbEZpZWxkTGFiZWxdO1xuICAgICAgICBmaWVsZC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBkLnJlc29sdmUoYXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZC5yZWplY3QoKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5mYWlsKGZ1bmN0aW9uKCl7XG4gICAgICBkLnJlamVjdCgpO1xuICAgIH0pXG4gICAgLmFsd2F5cyhmdW5jdGlvbigpe1xuICAgICAgbWFwU2VydmljZS5yZW1vdmVJbnRlcmFjdGlvbihzZWxmLl9waWNrSW50ZXJhY3Rpb24pO1xuICAgICAgc2VsZi5fcGlja0ludGVyYWN0aW9uID0gbnVsbDtcbiAgICB9KVxuICB9KTtcbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcbi8vZnVuemlvbmUgY2hlIHNlcnZlciBwZXIgcG90ZXIgY29waWFyZSBsbyBzdGF0ZSBkaSB1bmEgZmVhdHVyZSBpZGVudGlmaWNhdGFcbi8vIHN1bCBmb3JtIGF0dHVhbGUgZGkgdW4nYWx0cmEgZmVhdHVyZVxucHJvdG8uX3BpY2tMYXllclRvQ2xpcEJvYXJkID0gZnVuY3Rpb24oKSB7XG4gIC8vVE9ET1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIHJpdG9ybm8gdW5hIHByb21lc3NhLCBzZSBxdWFsY3VuIGFsdHJvIHZvbGVzc2VcbiAgLy8gdXNhcmUgaWwgcmlzdWx0YXRvIChlcy4gcGVyIHNldHRhcmUgYWx0cmkgY2FtcGkgaW4gYmFzZSBhbGxhIGZlYXR1cmUgc2VsZXppb25hdGEpXG4gIHZhciBkID0gJC5EZWZlcnJlZCgpO1xuICAvLyBkaXNhYmlsaXRvIHRlbXBvcmFuZW1hbnRlIGxvIHN0cmF0byBtb2RhbGUgcGVyIHBlcm1ldHRlcmUgbCdpbnRlcmF6aW9uZSBjb24gbGEgbWFwcGFcbiAgR1VJLnNldE1vZGFsKGZhbHNlKTtcbiAgLy8gcmVjdXBlcm8gbWFwc2VydmljZSBwZXJjaMOoIG1pIHBlcm1ldHRlIGRpIGluZXRlcmFnaXJlIGNvbiBsYSBtYXBwYVxuICBtYXBTZXJ2aWNlID0gR1VJLmdldENvbXBvbmVudCgnbWFwJykuZ2V0U2VydmljZSgpO1xuICB2YXIgdmVjdG9yTGF5ZXIgPSB0aGlzLmVkaXRvci5nZXRWZWN0b3JMYXllcigpO1xuICB2YXIgbGF5ZXIgPSBtYXBTZXJ2aWNlLmdldFByb2plY3QoKS5nZXRMYXllckJ5SWQodmVjdG9yTGF5ZXIuaWQpO1xuICAvLyBjcmVvIGlsIHBpY2tDb29yZGluYXRlIGludGVyYWN0aW9uIGRhIHBlcm1ldHRlcm1pIGNvc8OsIGRpIGludGVyYWdpcmUgY29uIGxhIG1hcHBhXG4gIHRoaXMuX3BpY2tJbnRlcmFjdGlvbiA9IG5ldyBQaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbigpO1xuICAvLyBsJ2FnZ2l1bmdvIGFsbGEgbWFwcGFcbiAgbWFwU2VydmljZS5hZGRJbnRlcmFjdGlvbih0aGlzLl9waWNrSW50ZXJhY3Rpb24pO1xuICAvLyBvbiBwaWNrZWRcbiAgdGhpcy5fcGlja0ludGVyYWN0aW9uLm9uKCdwaWNrZWQnLGZ1bmN0aW9uKGUpIHtcbiAgICAvLyBxdWkgcGFzc28gbG8gc3Rlc3NzbyBsYXllciBzdSBjdWkgc3RvIGFnZW5kb1xuICAgIFF1ZXJ5U2VydmljZS5xdWVyeUJ5TG9jYXRpb24oZS5jb29yZGluYXRlLCBbbGF5ZXJdKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICB2YXIgZmVhdHVyZXNGb3JMYXllcnMgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgIC8vIHZlcmlmaWNvIHNlIGNpIHNvbm8gZmVhdHVyZXMgc2VsZXppb25hdGVcbiAgICAgICAgICBpZiAoZmVhdHVyZXNGb3JMYXllcnMubGVuZ3RoICYmIGZlYXR1cmVzRm9yTGF5ZXJzWzBdLmZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gcnBlbmRvIGxhIHByaW1hIGZlYXR1cmVcbiAgICAgICAgICAgIHZhciBmZWF0dXJlID0gZmVhdHVyZXNGb3JMYXllcnNbMF0uZmVhdHVyZXNbMF07XG4gICAgICAgICAgICB2YXIgZmllbGRzID0gdmVjdG9yTGF5ZXIuZ2V0RmllbGRzV2l0aFZhbHVlcyhmZWF0dXJlKTtcbiAgICAgICAgICAgIHZhciByZWxhdGlvbnNQcm9taXNlID0gc2VsZi5lZGl0b3IuZ2V0UmVsYXRpb25zV2l0aFZhbHVlcyhmZWF0dXJlKTtcbiAgICAgICAgICAgIHJlbGF0aW9uc1Byb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlbGF0aW9ucykge1xuICAgICAgICAgICAgICBzZWxmLnN0YXRlLmZpZWxkcyA9IGZpZWxkcztcbiAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5yZWxhdGlvbnMgPSByZWxhdGlvbnM7XG4gICAgICAgICAgICAgIHZhciBlbGVtZW50c0JveGVzID0gc2VsZi5nZXRVbmlxdWVSZWxhdGlvbnNFbGVtZW50SWQoKTtcbiAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5lbGVtZW50c0JveGVzID0gZWxlbWVudHNCb3hlcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICBkLnJlamVjdCgpO1xuICAgICAgICB9KVxuICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgbWFwU2VydmljZS5yZW1vdmVJbnRlcmFjdGlvbihzZWxmLl9waWNrSW50ZXJhY3Rpb24pO1xuICAgICAgICAgIHNlbGYuX3BpY2tJbnRlcmFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgLy8gcmlhdHRpdm8gbG8gc3RyYXRvIG1vZGFsZSBwZXIgcGVybWV0dGVyZSBsJ2ludGVyYXppb25lIGNvbiBsYSBtYXBwYVxuICAgICAgICAgIEdVSS5zZXRNb2RhbCh0cnVlKTtcbiAgICAgICAgfSlcbiAgfSk7XG4gIGNvbnNvbGUubG9nKCdwaWNrQ2xpcEJvYXJkJyk7XG59O1xuXG5wcm90by5fZ2V0RGVmYXVsdFZhbHVlID0gZnVuY3Rpb24oZmllbGQpe1xuICB2YXIgZGVmYXVsdFZhbHVlID0gbnVsbDtcbiAgaWYgKGZpZWxkLmlucHV0ICYmIGZpZWxkLmlucHV0Lm9wdGlvbnMgJiYgZmllbGQuaW5wdXQub3B0aW9ucy5kZWZhdWx0KXtcbiAgICBkZWZhdWx0VmFsdWUgPSBmaWVsZC5pbnB1dC5vcHRpb25zLmRlZmF1bHQ7XG4gIH1cbiAgZWxzZSBpZiAodGhpcy5faXNTZWxlY3QoZmllbGQpKXtcbiAgICBkZWZhdWx0VmFsdWUgPSBmaWVsZC5pbnB1dC5vcHRpb25zLnZhbHVlc1swXS5rZXk7XG4gIH1cbiAgLyplbHNlIHtcbiAgICBkZWZhdWx0VmFsdWUgPSB0aGlzLl9kZWZhdWx0c1tmaWVsZC50eXBlXTtcbiAgfSovXG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuXG5wcm90by5fZ2V0bGF5ZXJQaWNrZXJMYXllck5hbWUgPSBmdW5jdGlvbihsYXllcklkKXtcbiAgbWFwU2VydmljZSA9IEdVSS5nZXRDb21wb25lbnQoJ21hcCcpLmdldFNlcnZpY2UoKTtcbiAgdmFyIGxheWVyID0gbWFwU2VydmljZS5nZXRQcm9qZWN0KCkuZ2V0TGF5ZXJCeUlkKGxheWVySWQpO1xuICBpZiAobGF5ZXIpe1xuICAgIHJldHVybiBsYXllci5nZXROYW1lKCk7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59O1xuXG5wcm90by5fc2hvdWxkU2hvd1JlbGF0aW9uID0gZnVuY3Rpb24ocmVsYXRpb24pe1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIHBlciBkZWZpbmlyZSBpIHZhbG9yaSBkaSBkZWZhdWx0IG5lbCBjYXNvIHNpIHRyYXR0YSBkaSB1biBudW92byBpbnNlcmltZW50b1xucHJvdG8uX3NldHVwRmllbGRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgXG4gIHZhciBmaWVsZHMgPSBfLmZpbHRlcih0aGlzLnN0YXRlLmZpZWxkcyxmdW5jdGlvbihmaWVsZCl7XG4gICAgLy8gdHV0dGkgaSBjYW1waSBlY2NldHRvIGxhIFBLIChzZSBub24gbnVsbGEpXG4gICAgaWYgKHNlbGYucGsgJiYgZmllbGQudmFsdWU9PW51bGwpe1xuICAgICAgcmV0dXJuICgoZmllbGQubmFtZSAhPSBzZWxmLnBrKSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgXG4gIF8uZm9yRWFjaChmaWVsZHMsZnVuY3Rpb24oZmllbGQpe1xuICAgIGlmKF8uaXNOaWwoZmllbGQudmFsdWUpKXtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBzZWxmLl9nZXREZWZhdWx0VmFsdWUoZmllbGQpO1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSl7XG4gICAgICAgIGZpZWxkLnZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICBpZiAodGhpcy5zdGF0ZS5yZWxhdGlvbnMpe1xuICAgIHZhciByZWxhdGlvbnMgPSB0aGlzLnN0YXRlLnJlbGF0aW9ucztcbiAgICBfLmZvckVhY2gocmVsYXRpb25zLGZ1bmN0aW9uKHJlbGF0aW9uKXtcbiAgICAgIF8uZm9yRWFjaChyZWxhdGlvbi5lbGVtZW50cyxmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgXy5mb3JFYWNoKHJlbGF0aW9uLmZpZWxkcyxmdW5jdGlvbihmaWVsZCl7XG4gICAgICAgICAgaWYoXy5pc05pbChmaWVsZC52YWx1ZSkpe1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHNlbGYuX2dldERlZmF1bHRWYWx1ZShmaWVsZCk7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlKXtcbiAgICAgICAgICAgICAgZmllbGQudmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxufTtcblxucHJvdG8uX3NldHVwUGFuZWwgPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwYW5lbCA9IHRoaXMuaW50ZXJuYWxDb21wb25lbnQgPSBuZXcgdGhpcy5fZm9ybVBhbmVsKHtcbiAgICBmb3JtOiB0aGlzXG4gIH0pO1xuICBpZiAodGhpcy5vcHRpb25zLmJ1dHRvbnMpIHtcbiAgICBwYW5lbC5idXR0b25zID0gdGhpcy5vcHRpb25zLmJ1dHRvbnM7XG4gIH1cbiAgdmFyIGVsZW1lbnRzQm94ZXMgPSB0aGlzLmdldFVuaXF1ZVJlbGF0aW9uc0VsZW1lbnRJZCgpO1xuICB0aGlzLnN0YXRlLmVsZW1lbnRzQm94ZXMgPSBlbGVtZW50c0JveGVzO1xuICBwYW5lbC5zdGF0ZSA9IHRoaXMuc3RhdGU7XG4gIHJldHVybiBwYW5lbDtcbn07XG5cbnByb3RvLmdldFVuaXF1ZVJlbGF0aW9uc0VsZW1lbnRJZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBlbGVtZW50c0JveGVzID0ge307XG4gIF8uZm9yRWFjaCh0aGlzLnN0YXRlLnJlbGF0aW9ucyxmdW5jdGlvbihyZWxhdGlvbil7XG4gICAgXy5mb3JFYWNoKHJlbGF0aW9uLmVsZW1lbnRzLGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgdmFyIGJveGlkID0gc2VsZi5nZXRVbmlxdWVSZWxhdGlvbkVsZW1lbnRJZChyZWxhdGlvbixlbGVtZW50KTtcbiAgICAgIGVsZW1lbnRzQm94ZXNbYm94aWRdID0ge1xuICAgICAgICBjb2xsYXBzZWQ6IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcbiAgcmV0dXJuIGVsZW1lbnRzQm94ZXM7XG5cbn07XG5cbnByb3RvLmdldFVuaXF1ZVJlbGF0aW9uRWxlbWVudElkID0gZnVuY3Rpb24ocmVsYXRpb24sIGVsZW1lbnQpe1xuICByZXR1cm4gcmVsYXRpb24ubmFtZSsnXycrZWxlbWVudC5pZDtcbn07XG5cbnByb3RvLl9nZXRGaWVsZCA9IGZ1bmN0aW9uKGZpZWxkTmFtZSl7XG4gIHZhciBmaWVsZCA9IG51bGw7XG4gIF8uZm9yRWFjaCh0aGlzLnN0YXRlLmZpZWxkcyxmdW5jdGlvbihmKXtcbiAgICBpZiAoZi5uYW1lID09IGZpZWxkTmFtZSl7XG4gICAgICBmaWVsZCA9IGY7XG4gICAgfVxuICB9KVxuICByZXR1cm4gZmllbGQ7XG59O1xuXG5wcm90by5fYWRkUmVsYXRpb25FbGVtZW50ID0gZnVuY3Rpb24ocmVsYXRpb24pIHtcbiAgdmFyIGVsZW1lbnQgPSB0aGlzLnByb3ZpZGVyLmNyZWF0ZVJlbGF0aW9uRWxlbWVudChyZWxhdGlvbik7XG4gIHZhciBlbGVtZW50Qm94SWQgPSB0aGlzLmdldFVuaXF1ZVJlbGF0aW9uRWxlbWVudElkKHJlbGF0aW9uLGVsZW1lbnQpO1xuICBWdWUuc2V0KHRoaXMuc3RhdGUuZWxlbWVudHNCb3hlcyxlbGVtZW50Qm94SWQse2NvbGxhcHNlZDpmYWxzZX0pO1xuICByZWxhdGlvbi5lbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xufTtcblxucHJvdG8uX3JlbW92ZVJlbGF0aW9uRWxlbWVudCA9IGZ1bmN0aW9uKHJlbGF0aW9uLGVsZW1lbnQpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIF8uZm9yRWFjaChyZWxhdGlvbi5lbGVtZW50cyxmdW5jdGlvbihfZWxlbWVudCxpZHhUb1JlbW92ZSl7XG4gICAgaWYgKF9lbGVtZW50LmlkID09IGVsZW1lbnQuaWQpIHtcbiAgICAgIC8vcmVsYXRpb24uZWxlbWVudHMuc3BsaWNlKGlkeFRvUmVtb3ZlLDEpO1xuICAgICAgZWxlbWVudC5zdGF0ZSA9ICdERUxFVEVEJzsgLy8gbG8gbWFyY28gY29tZSBlbG1pbmF0b1xuICAgICAgZGVsZXRlIHNlbGYuc3RhdGUuZWxlbWVudHNCb3hlcy5lbG1lbnRCb3hJZDtcbiAgICB9XG4gIH0pXG59O1xuXG5wcm90by5fZ2V0UmVsYXRpb25GaWVsZCA9IGZ1bmN0aW9uKGZpZWxkTmFtZSxyZWxhdGlvbk5hbWUpe1xuICB2YXIgZmllbGQgPSBudWxsO1xuICBfLmZvckVhY2godGhpcy5zdGF0ZS5yZWxhdGlvbnMsZnVuY3Rpb24ocmVsYXRpb24sbmFtZSl7XG4gICAgaWYgKHJlbGF0aW9uTmFtZSA9PSBuYW1lKXtcbiAgICAgIF8uZm9yRWFjaChyZWxhdGlvbi5maWVsZHMsZnVuY3Rpb24oZil7XG4gICAgICAgIGlmIChmLm5hbWUgPT0gZmllbGROYW1lKXtcbiAgICAgICAgICBmaWVsZCA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZpZWxkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZvcm06IEZvcm0sXG4gIEZvcm1QYW5lbDogRm9ybVBhbmVsXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInF1aWNrLWFjdGlvbnMtbWVudVxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwdWxsLXJpZ2h0XFxcIj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLWNpcmNsZS1tZWRpdW0gZ2x5cGhpY29uIGdseXBoaWNvbi1zY3JlZW5zaG90XFxcIiBkYXRhLXBsYWNlbWVudD1cXFwiYm90dG9tXFxcIiBAY2xpY2s9XFxcInBpY2tMYXllclRvQ2xpcEJvYXJkXFxcIiAgZGF0YS1pMThuPVxcXCJbdGl0bGVdY29weV9mb3JtX2RhdGFfZnJvbV9mZWF0dXJlXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLWNpcmNsZS1tZWRpdW0gZ2x5cGhpY29uIGdseXBoaWNvbi1jb3B5XFxcIiBkYXRhLXBsYWNlbWVudD1cXFwiYm90dG9tXFxcIiBAY2xpY2s9XFxcImNvcHlUb0NsaXBCb2FyZFxcXCIgIGRhdGEtaTE4bj1cXFwiW3RpdGxlXWNvcHlfZm9ybV9kYXRhXFxcIj48L2J1dHRvbj5cXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLWNpcmNsZS1tZWRpdW0gZ2x5cGhpY29uIGdseXBoaWNvbi1wYXN0ZVxcXCIgZGF0YS1wbGFjZW1lbnQ9XFxcImJvdHRvbVxcXCIgQGNsaWNrPVxcXCJwYXN0ZVRvQ2xpcEJvYXJkXFxcIiB2LWRpc2FibGVkPVxcXCJjYW5QYXN0ZVxcXCI+IGRhdGEtaTE4bj1cXFwiW3RpdGxlXXBhc3RlX2Zvcm1fZGF0YVxcXCI+PC9idXR0b24+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXY+XFxuICAgICAgICA8dmFsaWRhdG9yIG5hbWU9XFxcInZhbGlkYXRpb25cXFwiPlxcbiAgICAgICAgICAgIDxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XFxcImZvcm0taG9yaXpvbnRhbCBnM3ctZm9ybVxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJveCBib3gtcHJpbWFyeVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib3gtaGVhZGVyIHdpdGgtYm9yZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XFxcImJveC10aXRsZVxcXCI+QXR0cmlidXRpIGVsZW1lbnRvPC9oMz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib3gtdG9vbHMgcHVsbC1yaWdodFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJveC1ib2R5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XFxcImZpZWxkIGluIHN0YXRlLmZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cXFwiaXNWaXNpYmxlKGZpZWxkKVxcXCIgY2xhc3M9XFxcImZvcm0tZ3JvdXAgaGFzLWZlZWRiYWNrXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVxcXCJmaWVsZC5uYW1lXFxcIiBjbGFzcz1cXFwiY29sLXNtLTQgY29udHJvbC1sYWJlbFxcXCI+e3sgZmllbGQubGFiZWwgfX08c3BhbiB2LWlmPVxcXCJmaWVsZC52YWxpZGF0ZSAmJiBmaWVsZC52YWxpZGF0ZS5yZXF1aXJlZFxcXCI+Kjwvc3Bhbj48L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLXNtLThcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2LWlmPVxcXCJpc1NpbXBsZShmaWVsZClcXFwiIDpmaWVsZD1cXFwiZmllbGQubmFtZVxcXCIgdi12YWxpZGF0ZT1cXFwiZmllbGQudmFsaWRhdGVcXFwiIHYtZGlzYWJsZWQ9XFxcIiFpc0VkaXRhYmxlKGZpZWxkKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgdi1tb2RlbD1cXFwiZmllbGQudmFsdWVcXFwiIDppZD1cXFwiZmllbGQubmFtZVxcXCIgOnBsYWNlaG9sZGVyPVxcXCJmaWVsZC5pbnB1dC5sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIHYtaWY9XFxcImlzVGV4dGFyZWEoZmllbGQpXFxcIiA6ZmllbGQ9XFxcImZpZWxkLm5hbWVcXFwiIHYtdmFsaWRhdGU9XFxcImZpZWxkLnZhbGlkYXRlXFxcIiB2LWRpc2FibGVkPVxcXCIhaXNFZGl0YWJsZShmaWVsZClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIHYtbW9kZWw9XFxcImZpZWxkLnZhbHVlXFxcIiA6aWQ9XFxcImZpZWxkLm5hbWVcXFwiIDpwbGFjZWhvbGRlcj1cXFwiZmllbGQuaW5wdXQubGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCB2LWlmPVxcXCJpc1NlbGVjdChmaWVsZClcXFwiIDpmaWVsZD1cXFwiZmllbGQubmFtZVxcXCIgdi12YWxpZGF0ZT1cXFwiZmllbGQudmFsaWRhdGVcXFwiIHYtZGlzYWJsZWQ9XFxcIiFpc0VkaXRhYmxlKGZpZWxkKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgdi1tb2RlbD1cXFwiZmllbGQudmFsdWVcXFwiIDppZD1cXFwiZmllbGQubmFtZVxcXCIgOnBsYWNlaG9sZGVyPVxcXCJmaWVsZC5pbnB1dC5sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1mb3I9XFxcInZhbHVlIGluIGZpZWxkLmlucHV0Lm9wdGlvbnMudmFsdWVzXFxcIiB2YWx1ZT1cXFwie3sgdmFsdWUua2V5IH19XFxcIj57eyB2YWx1ZS52YWx1ZSB9fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cXFwiaXNMYXllclBpY2tlcihmaWVsZClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgQGNsaWNrPVxcXCJwaWNrTGF5ZXIoZmllbGQpXFxcIiA6ZmllbGQ9XFxcImZpZWxkLm5hbWVcXFwiIHYtdmFsaWRhdGU9XFxcImZpZWxkLnZhbGlkYXRlXFxcIiB2LWRpc2FibGVkPVxcXCIhaXNFZGl0YWJsZShmaWVsZClcXFwiIG9uZm9jdXM9XFxcImJsdXIoKVxcXCIgZGF0YS10b2dnbGU9XFxcInRvb2x0aXBcXFwiIHRpdGxlPVxcXCJPdHRpZW5pIGlsIGRhdG8gZGEgdW4gZWxlbWVudG8gZGVsIGxheWVyICd7eyBsYXllclBpY2tlclBsYWNlSG9sZGVyKGZpZWxkKSB9fSdcXFwiIHYtbW9kZWw9XFxcImZpZWxkLnZhbHVlXFxcIiA6aWQ9XFxcImZpZWxkLm5hbWVcXFwiIDpwbGFjZWhvbGRlcj1cXFwiJ1snK2xheWVyUGlja2VyUGxhY2VIb2xkZXIoZmllbGQpKyddJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXNjcmVlbnNob3QgZm9ybS1jb250cm9sLWZlZWRiYWNrXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cXFwicmVsYXRpb24gaW4gc3RhdGUucmVsYXRpb25zXFxcIiBzdHlsZT1cXFwibWFyZ2luLXRvcDoxMHB4XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cXFwic2hvd1JlbGF0aW9uKHJlbGF0aW9uKVxcXCIgdHJhbnNpdGlvbj1cXFwiZXhwYW5kXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib3ggYm94LWRlZmF1bHRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib3gtaGVhZGVyIHdpdGgtYm9yZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwiYm94LXRpdGxlXFxcIj57eyByZWxhdGlvbiB8IHJlbGF0aW9ucGx1cmFsIH19PC9oMz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJveC1ib2R5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSB2LWlmPVxcXCJyZWxhdGlvbi5lbGVtZW50cy5sZW5ndGhcXFwiIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1zdHJpcGVkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdi1mb3I9XFxcImZpZWxkIGluIGZpZWxkc1N1YnNldChyZWxhdGlvbi5maWVsZHMpXFxcIj57e2ZpZWxkLmxhYmVsfX08L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVxcXCJlbGVtZW50IGluIHZpc2libGVFbGVtZW50cyhyZWxhdGlvbilcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcImF0dHJpYnV0ZXMtcHJldmlld1xcXCIgQGNsaWNrPVxcXCJ0b2dnbGVFbGVtZW50Qm94KHJlbGF0aW9uLGVsZW1lbnQpXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2LWZvcj1cXFwicmVsZmllbGQgaW4gZmllbGRzU3Vic2V0KGVsZW1lbnQuZmllbGRzKVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3tyZWxmaWVsZC52YWx1ZX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSB2LWlmPVxcXCJpc1JlbGF0aW9uRWxlbWVudERlbGV0YWJsZShyZWxhdGlvbixlbGVtZW50KVxcXCIgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24gZ2x5cGhpY29uLXRyYXNoIGxpbmsgdHJhc2hcXFwiIEBjbGljay5zdG9wLnByZXZlbnQ9XFxcInJlbW92ZVJlbGF0aW9uRWxlbWVudChyZWxhdGlvbixlbGVtZW50KVxcXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9wdGlvbi1ob3Jpem9udGFsIGxpbmsgbW9yZWxpbmtcXFwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LXNob3c9XFxcIiFjb2xsYXBzZUVsZW1lbnRCb3gocmVsYXRpb24sZWxlbWVudClcXFwiIGNsYXNzPVxcXCJxdWVyeXJlc3VsdHMtZmVhdHVyZWJveFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgOmNvbHNwYW49XFxcImZpZWxkc1N1YnNldExlbmd0aChlbGVtZW50LmZpZWxkcykrMVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVxcXCJmaWVsZCBpbiBlbGVtZW50LmZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cXFwiaXNWaXNpYmxlKGZpZWxkKVxcXCIgY2xhc3M9XFxcImZvcm0tZ3JvdXAgaGFzLWZlZWRiYWNrXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVxcXCJmaWVsZC5uYW1lXFxcIiBjbGFzcz1cXFwiY29sLXNtLTQgY29udHJvbC1sYWJlbFxcXCI+e3sgZmllbGQubGFiZWwgfX08c3BhbiB2LWlmPVxcXCJmaWVsZC52YWxpZGF0ZSAmJiBmaWVsZC52YWxpZGF0ZS5yZXF1aXJlZFxcXCI+Kjwvc3Bhbj48L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLXNtLThcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB2LWlmPVxcXCJpc1NpbXBsZShmaWVsZClcXFwiIDpmaWVsZD1cXFwiZmllbGQubmFtZVxcXCIgdi12YWxpZGF0ZT1cXFwiZmllbGQudmFsaWRhdGVcXFwiIHYtZGlzYWJsZWQ9XFxcIiFpc0VkaXRhYmxlKGZpZWxkKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgdi1tb2RlbD1cXFwiZmllbGQudmFsdWVcXFwiIDppZD1cXFwiZmllbGQubmFtZVxcXCIgOnBsYWNlaG9sZGVyPVxcXCJmaWVsZC5pbnB1dC5sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIHYtaWY9XFxcImlzVGV4dGFyZWEoZmllbGQpXFxcIiA6ZmllbGQ9XFxcImZpZWxkLm5hbWVcXFwiIHYtdmFsaWRhdGU9XFxcImZpZWxkLnZhbGlkYXRlXFxcIiB2LWRpc2FibGVkPVxcXCIhaXNFZGl0YWJsZShmaWVsZClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIHYtbW9kZWw9XFxcImZpZWxkLnZhbHVlXFxcIiA6aWQ9XFxcImZpZWxkLm5hbWVcXFwiIDpwbGFjZWhvbGRlcj1cXFwiZmllbGQuaW5wdXQubGFiZWxcXFwiPjwvdGV4dGFyZWE+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCB2LWlmPVxcXCJpc1NlbGVjdChmaWVsZClcXFwiIDpmaWVsZD1cXFwiZmllbGQubmFtZVxcXCIgdi12YWxpZGF0ZT1cXFwiZmllbGQudmFsaWRhdGVcXFwiIHYtZGlzYWJsZWQ9XFxcIiFpc0VkaXRhYmxlKGZpZWxkKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgdi1tb2RlbD1cXFwiZmllbGQudmFsdWVcXFwiIDppZD1cXFwiZmllbGQubmFtZVxcXCIgOnBsYWNlaG9sZGVyPVxcXCJmaWVsZC5pbnB1dC5sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1mb3I9XFxcInZhbHVlIGluIGZpZWxkLmlucHV0Lm9wdGlvbnMudmFsdWVzXFxcIiB2YWx1ZT1cXFwie3sgdmFsdWUua2V5IH19XFxcIj57eyB2YWx1ZS52YWx1ZSB9fTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cXFwiaXNMYXllclBpY2tlcihmaWVsZClcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgQGNsaWNrPVxcXCJwaWNrTGF5ZXIoZmllbGQpXFxcIiA6ZmllbGQ9XFxcImZpZWxkLm5hbWVcXFwiIHYtdmFsaWRhdGU9XFxcImZpZWxkLnZhbGlkYXRlXFxcIiB2LWRpc2FibGVkPVxcXCIhaXNFZGl0YWJsZShmaWVsZClcXFwiIG9uZm9jdXM9XFxcImJsdXIoKVxcXCIgZGF0YS10b2dnbGU9XFxcInRvb2x0aXBcXFwiIHRpdGxlPVxcXCJPdHRpZW5pIGlsIGRhdG8gZGEgdW4gZWxlbWVudG8gZGVsIGxheWVyICd7eyBsYXllclBpY2tlclBsYWNlSG9sZGVyKGZpZWxkKSB9fSdcXFwiIHYtbW9kZWw9XFxcImZpZWxkLnZhbHVlXFxcIiA6aWQ9XFxcImZpZWxkLm5hbWVcXFwiIDpwbGFjZWhvbGRlcj1cXFwiJ1snK2xheWVyUGlja2VyUGxhY2VIb2xkZXIoZmllbGQpKyddJ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXNjcmVlbnNob3QgZm9ybS1jb250cm9sLWZlZWRiYWNrXFxcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cXFwiY2FuQWRkUmVsYXRpb25FbGVtZW50cyhyZWxhdGlvbilcXFwiIGNsYXNzPVxcXCJyb3dcXFwiIHN0eWxlPVxcXCJtYXJnaW46MHB4XFxcIj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzLXNpZ24gcHVsbC1yaWdodCBidG4tYWRkXFxcIiBAY2xpY2s9XFxcImFkZFJlbGF0aW9uRWxlbWVudChyZWxhdGlvbilcXFwiPjwvaT48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLXNtLW9mZnNldC00IGNvbC1zbS04XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XFxcImhhc0ZpZWxkc1JlcXVpcmVkXFxcIiBzdHlsZT1cXFwibWFyZ2luLWJvdHRvbToxMHB4XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+KiBDYW1waSByaWNoaWVzdGk8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1mb3I9XFxcImJ1dHRvbiBpbiBidXR0b25zXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIFxcXCIgOmNsYXNzPVxcXCJbYnV0dG9uLmNsYXNzXVxcXCIgQGNsaWNrLnN0b3AucHJldmVudD1cXFwiZXhlYyhidXR0b24uY2JrKVxcXCIgdi1kaXNhYmxlZD1cXFwiIWJ0bkVuYWJsZWQoYnV0dG9uKVxcXCI+e3sgYnV0dG9uLnRpdGxlIH19PC9idXR0b24+XFxuICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9mb3JtPlxcbiAgICAgICAgPC92YWxpZGF0b3I+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuIiwidmFyIG5vb3AgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykubm9vcDtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciBDb21wb25lbnRzUmVnaXN0cnkgPSByZXF1aXJlKCdndWkvY29tcG9uZW50c3JlZ2lzdHJ5Jyk7XG5cbi8vIHJhcHByZXNlbnRhIGwnaW50ZXJmYWNjaWEgZ2xvYmFsZSBkZWxsJ0FQSSBkZWxsYSBHVUkuIFxuLy8gbWV0b2RpIGRldm9ubyBlc3NlcmUgaW1wbGVtZW50YXRpIChkZWZpbml0aSkgZGFsbCdhcHBsaWNhemlvbmUgb3NwaXRlXG4vLyBsJ2FwcCBvc3BpdGUgZG92cmViYmUgY2hpYW1hcmUgYW5jaGUgbGEgZnVuemlvbmUgR1VJLnJlYWR5KCkgcXVhbmRvIGxhIFVJIMOoIHByb250YVxuZnVuY3Rpb24gR1VJKCl7XG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgLy8gdXJsIGRlbGxlIHJpc29yc2UgKGltbWFnaW5pLCBlY2MuKVxuICB0aGlzLmdldFJlc291cmNlc1VybCA9IG5vb3A7XG4gIC8vIHNob3cgYSBWdWUgZm9ybVxuICB0aGlzLnNob3dGb3JtID0gbm9vcDtcbiAgdGhpcy5jbG9zZUZvcm0gPSBub29wO1xuICBcbiAgLy8gbW9zdHJhIHVuYSBsaXN0YSBkaSBvZ2dldHRpIChlcy4gbGlzdGEgZGkgcmlzdWx0YXRpKVxuICB0aGlzLnNob3dMaXN0aW5nID0gbm9vcDtcbiAgdGhpcy5jbG9zZUxpc3RpbmcgPSBub29wO1xuICB0aGlzLmhpZGVMaXN0aW5nID0gbm9vcDtcbiAgXG4gIC8vIG9wdGlvbnMgY29udGVycsOgIGkgdmFyaSBkYXRpIHN1aSByaXN1bHRhdGkuIFNpY3VyYW1lbnRlIGF2csOgIGxhIHBycHJpZXTDoCBvcHRpb25zLmZlYXR1cmVzXG4gIC8vIG5lbCBjYXNvIGRpIHF1ZXJ5QnlMb2NhdGlvbiBhdnLDoCBhbmNoZSBvcHRpb25zLmNvb3JkaW5hdGVcbiAgdGhpcy5zaG93UXVlcnlSZXN1bHRzID0gZnVuY3Rpb24ob3B0aW9ucykge307XG4gIHRoaXMuaGlkZVF1ZXJ5UmVzdWx0cyA9IG5vb3A7XG5cbiAgLyogcGFuZWwgKi9cbiAgdGhpcy5zaG93UGFuZWwgPSBub29wO1xuICB0aGlzLmhpZGVQYW5lbCA9IG5vb3A7XG5cbiAgLy9tZXRvZGkgY29tcG9uZW50ZVxuICAvLyBhZ2dpdW5nZSAoZSByZWdpc3RyYSkgdW4gY29tcG9uZW50ZSBpbiB1biBwbGFjZWhvbGRlciBkZWwgdGVtcGxhdGUgLSBNZXRvZG8gaW1wbGVtZW50YXRvIGRhbCB0ZW1wbGF0ZVxuICB0aGlzLmFkZENvbXBvbmVudCA9IGZ1bmN0aW9uKGNvbXBvbmVudCxwbGFjZWhvbGRlcikge307XG4gIHRoaXMucmVtb3ZlQ29tcG9uZW50ID0gZnVuY3Rpb24oaWQpIHt9O1xuICAvLyByZWdpc3RyYSBnbG9iYWxtZW50ZSB1biBjb21wb25lbnRlIChub24gbGVnYXRvIGFkIHVubyBzcGVjaWZpY28gcGxhY2Vob2xkZXIuIEVzLiBjb21wb25lbnRlIHBlciBtb3N0cmFyZSByaXN1bHRhdGkgaW50ZXJyb2dhemlvbilcbiAgdGhpcy5zZXRDb21wb25lbnQgPSBmdW5jdGlvbihjb21wb25lbnQpIHtcbiAgICBDb21wb25lbnRzUmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfTtcbiAgdGhpcy5nZXRDb21wb25lbnQgPSBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBDb21wb25lbnRzUmVnaXN0cnkuZ2V0Q29tcG9uZW50KGlkKTtcbiAgfTtcbiAgLy9maW5lIG1ldG9kaSBjb21wb25lbnRlXG5cbiAgdGhpcy5yZWFkeSA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5lbWl0KCdyZWFkeScpO1xuICAgIHRoaXMucmVhZHkgPSB0cnVlO1xuICB9O1xuICBcbiAgdGhpcy5ndWlSZXNpemVkID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVtaXQoJ2d1aXJlc2l6ZWQnKTtcbiAgfTtcblxuICAvKiBzcGlubmVyICovXG4gIEdVSS5zaG93U3Bpbm5lciA9IGZ1bmN0aW9uKG9wdGlvbnMpe307XG5cbiAgR1VJLmhpZGVTcGlubmVyID0gZnVuY3Rpb24oaWQpe307XG5cbiAgXG4gIHRoaXMubm90aWZ5ID0gbm9vcDtcbiAgdGhpcy5kaWFsb2cgPSBub29wO1xufVxuXG5pbmhlcml0KEdVSSxHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBHVUk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdj5cXG4gIExpc3RhIGRpIG9nZ2V0dGlcXG48L2Rpdj5cXG5cIjtcbiIsInZhciByZXNvbHZlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgcmVqZWN0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlamVjdDtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG4vL3ZhciBNYXBTZXJ2aWNlID0gcmVxdWlyZSgnY29yZS9tYXAvbWFwc2VydmljZScpO1xuXG52YXIgTGlzdFBhbmVsQ29tcG9uZW50ID0gVnVlLmV4dGVuZCh7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuL2xpc3RwYW5lbC5odG1sJyksXG4gIG1ldGhvZHM6IHtcbiAgICBleGVjOiBmdW5jdGlvbihjYmspe1xuICAgICAgdmFyIHJlbGF0aW9ucyA9IHRoaXMuc3RhdGUucmVsYXRpb25zIHx8IG51bGw7XG4gICAgICBjYmsodGhpcy5zdGF0ZS5maWVsZHMscmVsYXRpb25zKTtcbiAgICAgIEdVSS5jbG9zZUZvcm0oKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cbmZ1bmN0aW9uIExpc3RQYW5lbChvcHRpb25zKXtcbiAgLy8gcHJvcHJpZXTDoCBuZWNlc3NhcmllLiBJbiBmdXR1cm8gbGUgbWV0dGVybW8gaW4gdW5hIGNsYXNzZSBQYW5lbCBkYSBjdWkgZGVyaXZlcmFubm8gdHV0dGkgaSBwYW5uZWxsaSBjaGUgdm9nbGlvbm8gZXNzZXJlIG1vc3RyYXRpIG5lbGxhIHNpZGViYXJcbiAgdGhpcy5wYW5lbENvbXBvbmVudCA9IG51bGw7XG4gIHRoaXMub3B0aW9ucyA9ICBvcHRpb25zIHx8IHt9O1xuICB0aGlzLmlkID0gb3B0aW9ucy5pZCB8fCBudWxsOyAvLyBpZCBkZWwgZm9ybVxuICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgbnVsbDsgLy8gbm9tZSBkZWwgZm9ybVxuICBcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBsaXN0OiBvcHRpb25zLmxpc3QgfHwgW11cbiAgfVxuICBcbiAgdGhpcy5fbGlzdFBhbmVsQ29tcG9uZW50ID0gb3B0aW9ucy5saXN0UGFuZWxDb21wb25lbnQgfHwgTGlzdFBhbmVsQ29tcG9uZW50O1xufVxuXG52YXIgcHJvdG8gPSBMaXN0UGFuZWwucHJvdG90eXBlO1xuXG4vLyB2aWVuZSByaWNoaWFtYXRvIGRhbGxhIHRvb2xiYXIgcXVhbmRvIGlsIHBsdWdpbiBjaGllZGUgZGkgbW9zdHJhcmUgdW4gcHJvcHJpbyBwYW5uZWxsbyBuZWxsYSBHVUkgKEdVSS5zaG93UGFuZWwpXG5wcm90by5vblNob3cgPSBmdW5jdGlvbihjb250YWluZXIpe1xuICB2YXIgcGFuZWwgPSB0aGlzLl9zZXR1cFBhbmVsKCk7XG4gIHRoaXMuX21vdW50UGFuZWwocGFuZWwsY29udGFpbmVyKTtcbiAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG59O1xuXG4vLyByaWNoaWFtYXRvIHF1YW5kbyBsYSBHVUkgY2hpZWRlIGRpIGNoaXVkZXJlIGlsIHBhbm5lbGxvLiBTZSByaXRvcm5hIGZhbHNlIGlsIHBhbm5lbGxvIG5vbiB2aWVuZSBjaGl1c29cbnByb3RvLm9uQ2xvc2UgPSBmdW5jdGlvbigpe1xuICB0aGlzLnBhbmVsQ29tcG9uZW50LiRkZXN0cm95KHRydWUpO1xuICB0aGlzLnBhbmVsQ29tcG9uZW50ID0gbnVsbDtcbiAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG59O1xuXG5wcm90by5fc2V0dXBQYW5lbCA9IGZ1bmN0aW9uKCl7XG4gIHZhciBwYW5lbCA9IHRoaXMucGFuZWxDb21wb25lbnQgPSBuZXcgdGhpcy5fbGlzdFBhbmVsQ29tcG9uZW50KHtcbiAgICBwYW5lbDogdGhpc1xuICB9KTtcbiAgcGFuZWwuc3RhdGUgPSB0aGlzLnN0YXRlO1xuICByZXR1cm4gcGFuZWxcbn07XG5cbnByb3RvLl9tb3VudFBhbmVsID0gZnVuY3Rpb24ocGFuZWwsY29udGFpbmVyKXtcbiAgcGFuZWwuJG1vdW50KCkuJGFwcGVuZFRvKGNvbnRhaW5lcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTGlzdFBhbmVsQ29tcG9uZW50OiBMaXN0UGFuZWxDb21wb25lbnQsXG4gIExpc3RQYW5lbDogTGlzdFBhbmVsXG59XG4iLCJ2YXIgUmVzZXRDb250cm9sID0gcmVxdWlyZSgnZzN3LW9sMy9zcmMvY29udHJvbHMvcmVzZXRjb250cm9sJyk7XG52YXIgUXVlcnlDb250cm9sID0gcmVxdWlyZSgnZzN3LW9sMy9zcmMvY29udHJvbHMvcXVlcnljb250cm9sJyk7XG52YXIgWm9vbUJveENvbnRyb2wgPSByZXF1aXJlKCdnM3ctb2wzL3NyYy9jb250cm9scy96b29tYm94Y29udHJvbCcpO1xuXG52YXIgT0xDb250cm9sID0gcmVxdWlyZSgnZzN3LW9sMy9zcmMvY29udHJvbHMvb2xjb250cm9sJyk7XG5cbnZhciBDb250cm9sc0ZhY3RvcnkgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBjb250cm9sO1xuICAgIHZhciBDb250cm9sQ2xhc3MgPSBDb250cm9sc0ZhY3RvcnkuQ09OVFJPTFNbb3B0aW9ucy50eXBlXTtcbiAgICBpZiAoQ29udHJvbENsYXNzKSB7XG4gICAgICBjb250cm9sID0gbmV3IENvbnRyb2xDbGFzcyhvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2w7XG4gIH1cbn07XG5cbkNvbnRyb2xzRmFjdG9yeS5DT05UUk9MUyA9IHtcbiAgJ3Jlc2V0JzogUmVzZXRDb250cm9sLFxuICAnem9vbWJveCc6IFpvb21Cb3hDb250cm9sLFxuICAncXVlcnknOiBRdWVyeUNvbnRyb2wsXG4gICd6b29tJzogT0xDb250cm9sLFxuICAnc2NhbGVsaW5lJzogT0xDb250cm9sLFxuICAnb3ZlcnZpZXcnOiBPTENvbnRyb2xcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udHJvbHNGYWN0b3J5O1xuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG52YXIgQXBwbGljYXRpb25TZXJ2aWNlID0gcmVxdWlyZSgnY29yZS9hcHBsaWNhdGlvbnNlcnZpY2UnKTtcbnZhciBQcm9qZWN0c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnY29yZS9wcm9qZWN0L3Byb2plY3RzcmVnaXN0cnknKTtcbnZhciBQcm9qZWN0VHlwZXMgPSByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdHR5cGVzJyk7XG52YXIgR2VvbWV0cnlUeXBlcyA9IHJlcXVpcmUoJ2NvcmUvZ2VvbWV0cnkvZ2VvbWV0cnknKS5HZW9tZXRyeVR5cGVzO1xudmFyIG9sM2hlbHBlcnMgPSByZXF1aXJlKCdnM3ctb2wzL3NyYy9nM3cub2wzJykuaGVscGVycztcbnZhciBXTVNMYXllciA9IHJlcXVpcmUoJ2NvcmUvbWFwL2xheWVyL3dtc2xheWVyJyk7XG52YXIgQ29udHJvbHNGYWN0b3J5ID0gcmVxdWlyZSgnZ3VpL21hcC9jb250cm9sL2ZhY3RvcnknKTtcbnZhciBRdWVyeVNlcnZpY2UgPSByZXF1aXJlKCdjb3JlL3F1ZXJ5L3F1ZXJ5c2VydmljZScpO1xuXG5mdW5jdGlvbiBNYXBTZXJ2aWNlKHByb2plY3Qpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuY29uZmlnO1xuICB0aGlzLnZpZXdlcjtcbiAgdGhpcy50YXJnZXQ7XG4gIHRoaXMuX21hcENvbnRyb2xzID0gW10sXG4gIHRoaXMuX21hcExheWVycyA9IFtdO1xuICB0aGlzLm1hcEJhc2VMYXllcnMgPSB7fTtcbiAgdGhpcy5sYXllcnNFeHRyYVBhcmFtcyA9IHt9O1xuICB0aGlzLnN0YXRlID0ge1xuICAgICAgYmJveDogW10sXG4gICAgICByZXNvbHV0aW9uOiBudWxsLFxuICAgICAgY2VudGVyOiBudWxsLFxuICAgICAgbG9hZGluZzogZmFsc2VcbiAgfTtcbiAgdGhpcy5jb25maWcgPSBBcHBsaWNhdGlvblNlcnZpY2UuZ2V0Q29uZmlnKCk7XG4gIFxuICB2YXIgcm91dGVyU2VydmljZSA9IEFwcGxpY2F0aW9uU2VydmljZS5nZXRSb3V0ZXJTZXJ2aWNlKCk7XG4gIHJvdXRlclNlcnZpY2UuYWRkUm91dGUoJ21hcC97P3F1ZXJ5fScsZnVuY3Rpb24ocXVlcnkpe1xuICAgIHZhciBxdWVyeSA9IHF1ZXJ5IHx8IHt9O1xuICAgIGlmIChxdWVyeS5jZW50ZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDZW50cmEgbWFwcGEgc3U6ICcrcXVlcnkuY2VudGVyKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgdGhpcy5faG93TWFueUFyZUxvYWRpbmcgPSAwO1xuICB0aGlzLl9pbmNyZW1lbnRMb2FkZXJzID0gZnVuY3Rpb24oKXtcbiAgICBpZiAodGhpcy5faG93TWFueUFyZUxvYWRpbmcgPT0gMCl7XG4gICAgICB0aGlzLmVtaXQoJ2xvYWRzdGFydCcpO1xuICAgICAgR1VJLnNob3dTcGlubmVyKHtcbiAgICAgICAgY29udGFpbmVyOiAkKCcjbWFwLXNwaW5uZXInKSxcbiAgICAgICAgaWQ6ICdtYXBsb2Fkc3Bpbm5lcicsXG4gICAgICAgIHN0eWxlOiAnYmx1ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9ob3dNYW55QXJlTG9hZGluZyArPSAxO1xuICB9O1xuICBcbiAgdGhpcy5fZGVjcmVtZW50TG9hZGVycyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5faG93TWFueUFyZUxvYWRpbmcgLT0gMTtcbiAgICBpZiAodGhpcy5faG93TWFueUFyZUxvYWRpbmcgPT0gMCl7XG4gICAgICB0aGlzLmVtaXQoJ2xvYWRlbmQnKTtcbiAgICAgIEdVSS5oaWRlU3Bpbm5lcignbWFwbG9hZHNwaW5uZXInKTtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLl9pbnRlcmFjdGlvbnNTdGFjayA9IFtdO1xuICBpZighXy5pc05pbChwcm9qZWN0KSkge1xuICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5wcm9qZWN0ID0gUHJvamVjdHNSZWdpc3RyeS5nZXRDdXJyZW50UHJvamVjdCgpO1xuICB9XG5cbiAgdGhpcy5zZXR0ZXJzID0ge1xuICAgIHNldE1hcFZpZXc6IGZ1bmN0aW9uKGJib3gscmVzb2x1dGlvbixjZW50ZXIpe1xuICAgICAgdGhpcy5zdGF0ZS5iYm94ID0gYmJveDtcbiAgICAgIHRoaXMuc3RhdGUucmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG4gICAgICB0aGlzLnN0YXRlLmNlbnRlciA9IGNlbnRlcjtcbiAgICAgIHRoaXMudXBkYXRlTWFwTGF5ZXJzKHRoaXMubWFwTGF5ZXJzKTtcbiAgICB9LFxuICAgIHNldHVwVmlld2VyOiBmdW5jdGlvbihpbml0aWFsUmVzb2x1dGlvbil7XG4gICAgICAvLyRzY3JpcHQoXCJodHRwOi8vZXBzZy5pby9cIitQcm9qZWN0U2VydmljZS5zdGF0ZS5wcm9qZWN0LmNycytcIi5qc1wiKTtcbiAgICAgIHByb2o0LmRlZnMoXCJFUFNHOlwiK3NlbGYucHJvamVjdC5zdGF0ZS5jcnMsdGhpcy5wcm9qZWN0LnN0YXRlLnByb2o0KTtcbiAgICAgIGlmIChzZWxmLnZpZXdlcikge1xuICAgICAgICBzZWxmLnZpZXdlci5kZXN0cm95KCk7XG4gICAgICAgIHNlbGYudmlld2VyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHNlbGYuX3NldHVwVmlld2VyKGluaXRpYWxSZXNvbHV0aW9uKTtcbiAgICAgIHNlbGYuc2V0dXBDb250cm9scygpO1xuICAgICAgc2VsZi5zZXR1cExheWVycygpO1xuICAgICAgc2VsZi5lbWl0KCd2aWV3ZXJzZXQnKTtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLl9zZXR1cFZpZXdlciA9IGZ1bmN0aW9uKGluaXRpYWxSZXNvbHV0aW9uKXtcbiAgICB2YXIgZXh0ZW50ID0gdGhpcy5wcm9qZWN0LnN0YXRlLmV4dGVudDtcbiAgICB2YXIgcHJvamVjdGlvbiA9IHRoaXMuZ2V0UHJvamVjdGlvbigpO1xuICAgIFxuICAgIC8qdmFyIGNvbnN0cmFpbl9leHRlbnQ7XG4gICAgaWYgKHRoaXMuY29uZmlnLmNvbnN0cmFpbnRleHRlbnQpIHtcbiAgICAgIHZhciBleHRlbnQgPSB0aGlzLmNvbmZpZy5jb25zdHJhaW50ZXh0ZW50O1xuICAgICAgdmFyIGR4ID0gZXh0ZW50WzJdLWV4dGVudFswXTtcbiAgICAgIHZhciBkeSA9IGV4dGVudFszXS1leHRlbnRbMV07XG4gICAgICB2YXIgZHg0ID0gZHgvNDtcbiAgICAgIHZhciBkeTQgPSBkeS80O1xuICAgICAgdmFyIGJib3hfeG1pbiA9IGV4dGVudFswXSArIGR4NDtcbiAgICAgIHZhciBiYm94X3htYXggPSBleHRlbnRbMl0gLSBkeDQ7XG4gICAgICB2YXIgYmJveF95bWluID0gZXh0ZW50WzFdICsgZHk0O1xuICAgICAgdmFyIGJib3hfeW1heCA9IGV4dGVudFszXSAtIGR5NDtcbiAgICAgIFxuICAgICAgY29uc3RyYWluX2V4dGVudCA9IFtiYm94X3htaW4sYmJveF95bWluLGJib3hfeG1heCxiYm94X3ltYXhdO1xuICAgIH0qL1xuICAgIFxuICAgIHRoaXMudmlld2VyID0gb2wzaGVscGVycy5jcmVhdGVWaWV3ZXIoe1xuICAgICAgaWQ6IHRoaXMudGFyZ2V0LFxuICAgICAgdmlldzoge1xuICAgICAgICBwcm9qZWN0aW9uOiBwcm9qZWN0aW9uLFxuICAgICAgICAvKmNlbnRlcjogdGhpcy5jb25maWcuaW5pdGNlbnRlciB8fCBvbC5leHRlbnQuZ2V0Q2VudGVyKGV4dGVudCksXG4gICAgICAgIHpvb206IHRoaXMuY29uZmlnLmluaXR6b29tIHx8IDAsXG4gICAgICAgIGV4dGVudDogdGhpcy5jb25maWcuY29uc3RyYWludGV4dGVudCB8fCBleHRlbnQsXG4gICAgICAgIG1pblpvb206IHRoaXMuY29uZmlnLm1pbnpvb20gfHwgMCwgLy8gZGVmYXVsdCBkaSBPTDMgMy4xNi4wXG4gICAgICAgIG1heFpvb206IHRoaXMuY29uZmlnLm1heHpvb20gfHwgMjggLy8gZGVmYXVsdCBkaSBPTDMgMy4xNi4wKi9cbiAgICAgICAgY2VudGVyOiBvbC5leHRlbnQuZ2V0Q2VudGVyKGV4dGVudCksXG4gICAgICAgIGV4dGVudDogZXh0ZW50LFxuICAgICAgICAvL21pblpvb206IDAsIC8vIGRlZmF1bHQgZGkgT0wzIDMuMTYuMFxuICAgICAgICAvL21heFpvb206IDI4IC8vIGRlZmF1bHQgZGkgT0wzIDMuMTYuMFxuICAgICAgICBtYXhSZXNvbHV0aW9uOiBpbml0aWFsUmVzb2x1dGlvblxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmICh0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kX2NvbG9yKSB7XG4gICAgICAkKCcjJyArIHRoaXMudGFyZ2V0KS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCB0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kX2NvbG9yKTtcbiAgICB9XG4gICAgXG4gICAgJCh0aGlzLnZpZXdlci5tYXAuZ2V0Vmlld3BvcnQoKSkucHJlcGVuZCgnPGRpdiBpZD1cIm1hcC1zcGlubmVyXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowcHg7XCI+PC9kaXY+Jyk7XG4gICAgXG4gICAgdGhpcy52aWV3ZXIubWFwLmdldEludGVyYWN0aW9ucygpLmZvckVhY2goZnVuY3Rpb24oaW50ZXJhY3Rpb24pe1xuICAgICAgc2VsZi5fd2F0Y2hJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy52aWV3ZXIubWFwLmdldEludGVyYWN0aW9ucygpLm9uKCdhZGQnLGZ1bmN0aW9uKGludGVyYWN0aW9uKXtcbiAgICAgIHNlbGYuX3dhdGNoSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24uZWxlbWVudCk7XG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy52aWV3ZXIubWFwLmdldEludGVyYWN0aW9ucygpLm9uKCdyZW1vdmUnLGZ1bmN0aW9uKGludGVyYWN0aW9uKXtcbiAgICAgIC8vc2VsZi5fb25SZW1vdmVJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG4gICAgfSk7XG5cbiAgICB0aGlzLnZpZXdlci5tYXAuZ2V0VmlldygpLnNldFJlc29sdXRpb24oaW5pdGlhbFJlc29sdXRpb24pO1xuICAgIFxuICAgIHRoaXMudmlld2VyLm1hcC5vbignbW92ZWVuZCcsZnVuY3Rpb24oZSl7XG4gICAgICBzZWxmLl9zZXRNYXBWaWV3KCk7XG4gICAgfSk7XG5cbiAgICAvL0FMIE1PTUVOVE8gTEFTQ0lPIENPU8OMIFBPSSBWRURJQU1PXG4gICAgUXVlcnlTZXJ2aWNlLnNldE1hcFNlcnZpY2UodGhpcyk7XG5cbiAgICB0aGlzLmVtaXQoJ3JlYWR5Jyk7XG4gIH07XG4gIFxuICB0aGlzLnByb2plY3Qub24oJ3Byb2plY3Rzd2l0Y2gnLGZ1bmN0aW9uKCl7XG4gICAgc2VsZi5zZXR1cExheWVycygpO1xuICB9KTtcbiAgXG4gIHRoaXMucHJvamVjdC5vbmFmdGVyKCdzZXRMYXllcnNWaXNpYmxlJyxmdW5jdGlvbihsYXllcnNJZHMpe1xuICAgIHZhciBtYXBMYXllcnMgPSBfLm1hcChsYXllcnNJZHMsZnVuY3Rpb24obGF5ZXJJZCl7XG4gICAgICB2YXIgbGF5ZXIgPSBzZWxmLnByb2plY3QuZ2V0TGF5ZXJCeUlkKGxheWVySWQpO1xuICAgICAgcmV0dXJuIHNlbGYuZ2V0TWFwTGF5ZXJGb3JMYXllcihsYXllcik7XG4gICAgfSk7XG4gICAgc2VsZi51cGRhdGVNYXBMYXllcnMoc2VsZi5nZXRNYXBMYXllcnMoKSk7XG4gIH0pO1xuICBcbiAgdGhpcy5wcm9qZWN0Lm9uYWZ0ZXIoJ3NldEJhc2VMYXllcicsZnVuY3Rpb24oKXtcbiAgICBzZWxmLnVwZGF0ZU1hcExheWVycyhzZWxmLm1hcEJhc2VMYXllcnMpO1xuICB9KTtcbiAgXG4gIGJhc2UodGhpcyk7XG59XG5pbmhlcml0KE1hcFNlcnZpY2UsRzNXT2JqZWN0KTtcblxudmFyIHByb3RvID0gTWFwU2VydmljZS5wcm90b3R5cGU7XG5cbi8vIHJlbmRlIHF1ZXN0byBtYXBzZXJ2aWNlIHNsYXZlIGRpIHVuIGFsdHJvIE1hcFNlcnZpY2VcbnByb3RvLnNsYXZlT2YgPSBmdW5jdGlvbihtYXBTZXJ2aWNlLCBzYW1lTGF5ZXJzKXtcbiAgLy8gc2UgaW1wb3N0YXJlIGkgbGF5ZXIgaW5pemlhbGkgdWd1YWxpIGEgcXVlbGxpIGRlbCBtYXBTZXJ2aWNlIG1hc3RlclxuICB2YXIgc2FtZUxheWVycyA9IHNhbWVMYXllcnMgfHwgZmFsc2U7XG59O1xuXG5wcm90by5zZXRMYXllcnNFeHRyYVBhcmFtcyA9IGZ1bmN0aW9uKHBhcmFtcyx1cGRhdGUpe1xuICB0aGlzLmxheWVyc0V4dHJhUGFyYW1zID0gXy5hc3NpZ24odGhpcy5sYXllcnNFeHRyYVBhcmFtcyxwYXJhbXMpO1xuICB0aGlzLmVtaXQoJ2V4dHJhUGFyYW1zU2V0JyxwYXJhbXMsdXBkYXRlKTtcbn07XG5cbnByb3RvLmdldFByb2plY3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucHJvamVjdDtcbn07XG5cbnByb3RvLmdldE1hcCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy52aWV3ZXIubWFwO1xufTtcblxucHJvdG8uZ2V0UHJvamVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZXh0ZW50ID0gdGhpcy5wcm9qZWN0LnN0YXRlLmV4dGVudDtcbiAgdmFyIHByb2plY3Rpb24gPSBuZXcgb2wucHJvai5Qcm9qZWN0aW9uKHtcbiAgICBjb2RlOiBcIkVQU0c6XCIrdGhpcy5wcm9qZWN0LnN0YXRlLmNycyxcbiAgICBleHRlbnQ6IGV4dGVudFxuICB9KTtcbiAgcmV0dXJuIHByb2plY3Rpb247XG59O1xuXG5wcm90by5nZXRWaWV3ZXJFbGVtZW50ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMudmlld2VyLm1hcC5nZXRUYXJnZXRFbGVtZW50KCk7XG59O1xuXG5wcm90by5nZXRWaWV3cG9ydCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLnZpZXdlci5tYXAuZ2V0Vmlld3BvcnQoKTtcbn07XG5cbnByb3RvLmdldFJlc29sdXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudmlld2VyLm1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbigpO1xufTtcblxucHJvdG8uZ2V0RXBzZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy52aWV3ZXIubWFwLmdldFZpZXcoKS5nZXRQcm9qZWN0aW9uKCkuZ2V0Q29kZSgpO1xufTtcblxucHJvdG8uZ2V0R2V0RmVhdHVyZUluZm9VcmxGb3JMYXllciA9IGZ1bmN0aW9uKGxheWVyLGNvb3JkaW5hdGVzLHJlc29sdXRpb24sZXBzZyxwYXJhbXMpIHtcbiAgdmFyIG1hcExheWVyID0gdGhpcy5nZXRNYXBMYXllckZvckxheWVyKGxheWVyKTtcbiAgcmV0dXJuIG1hcExheWVyLmdldEdldEZlYXR1cmVJbmZvVXJsKGNvb3JkaW5hdGVzLHJlc29sdXRpb24sZXBzZyxwYXJhbXMpO1xufTtcblxucHJvdG8uc2V0dXBDb250cm9scyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG1hcCA9IHNlbGYudmlld2VyLm1hcDtcbiAgaWYgKHRoaXMuY29uZmlnICYmIHRoaXMuY29uZmlnLm1hcGNvbnRyb2xzKSB7XG4gICAgXy5mb3JFYWNoKHRoaXMuY29uZmlnLm1hcGNvbnRyb2xzLGZ1bmN0aW9uKGNvbnRyb2xUeXBlKXtcbiAgICAgIHZhciBjb250cm9sO1xuICAgICAgc3dpdGNoIChjb250cm9sVHlwZSkge1xuICAgICAgICBjYXNlICdyZXNldCc6XG4gICAgICAgICAgaWYgKCFpc01vYmlsZS5hbnkpIHtcbiAgICAgICAgICAgIGNvbnRyb2wgPSBDb250cm9sc0ZhY3RvcnkuY3JlYXRlKHtcbiAgICAgICAgICAgICAgdHlwZTogY29udHJvbFR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLmFkZENvbnRyb2woY29udHJvbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3pvb20nOlxuICAgICAgICAgIGNvbnRyb2wgPSBDb250cm9sc0ZhY3RvcnkuY3JlYXRlKHtcbiAgICAgICAgICAgIHR5cGU6IGNvbnRyb2xUeXBlLFxuICAgICAgICAgICAgem9vbUluTGFiZWw6IFwiXFx1ZTk4YVwiLFxuICAgICAgICAgICAgem9vbU91dExhYmVsOiBcIlxcdWU5OGJcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlbGYuYWRkQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnem9vbWJveCc6IFxuICAgICAgICAgIGlmICghaXNNb2JpbGUuYW55KSB7XG4gICAgICAgICAgICBjb250cm9sID0gQ29udHJvbHNGYWN0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgICAgIHR5cGU6IGNvbnRyb2xUeXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRyb2wub24oJ3pvb21lbmQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBzZWxmLnZpZXdlci5maXQoZS5leHRlbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHNlbGYuYWRkQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3pvb210b2V4dGVudCc6XG4gICAgICAgICAgaWYgKCFpc01vYmlsZS5hbnkpIHtcbiAgICAgICAgICAgIGNvbnRyb2wgPSBDb250cm9sc0ZhY3RvcnkuY3JlYXRlKHtcbiAgICAgICAgICAgICAgdHlwZTogY29udHJvbFR5cGUsXG4gICAgICAgICAgICAgIGxhYmVsOiBcIlxcdWU5OGNcIixcbiAgICAgICAgICAgICAgZXh0ZW50OiBzZWxmLmNvbmZpZy5jb25zdHJhaW50ZXh0ZW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuYWRkQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgICAgICBjb250cm9sID0gQ29udHJvbHNGYWN0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgICB0eXBlOiBjb250cm9sVHlwZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRyb2wub24oJ3BpY2tlZCcsZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBlLmNvb3JkaW5hdGVzO1xuICAgICAgICAgICAgdmFyIHNob3dRdWVyeVJlc3VsdHMgPSBHVUkuc2hvd1Jlc3VsdHNGYWN0b3J5KCdxdWVyeScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbGF5ZXJzID0gc2VsZi5wcm9qZWN0LmdldExheWVycyh7XG4gICAgICAgICAgICAgIFFVRVJZQUJMRTogdHJ1ZSxcbiAgICAgICAgICAgICAgU0VMRUNURURPUkFMTDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vZmFjY2lvIHF1ZXJ5IGJ5IGxvY2F0aW9uIHN1IGkgbGF5ZXJzIHNlbGV6aW9uYXRpIG8gdHV0dGlcbiAgICAgICAgICAgIHZhciBxdWVyeVJlc3VsdHNQYW5lbCA9IHNob3dRdWVyeVJlc3VsdHMoJ2ludGVycm9nYXppb25lJyk7XG4gICAgICAgICAgICBRdWVyeVNlcnZpY2UucXVlcnlCeUxvY2F0aW9uKGNvb3JkaW5hdGVzLCBsYXllcnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHRzKXtcbiAgICAgICAgICAgICAgcXVlcnlSZXN1bHRzUGFuZWwuc2V0UXVlcnlSZXNwb25zZShyZXN1bHRzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlbGYuYWRkQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2NhbGVsaW5lJzpcbiAgICAgICAgICBjb250cm9sID0gQ29udHJvbHNGYWN0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgICB0eXBlOiBjb250cm9sVHlwZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYnInXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi5hZGRDb250cm9sKGNvbnRyb2wpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvdmVydmlldyc6XG4gICAgICAgICAgaWYgKCFpc01vYmlsZS5hbnkpIHtcbiAgICAgICAgICAgIHZhciBvdmVydmlld1Byb2plY3RHaWQgPSBzZWxmLnByb2plY3QuZ2V0T3ZlcnZpZXdQcm9qZWN0R2lkKCk7XG4gICAgICAgICAgICBpZiAob3ZlcnZpZXdQcm9qZWN0R2lkKSB7XG4gICAgICAgICAgICAgIFByb2plY3RzUmVnaXN0cnkuZ2V0UHJvamVjdChvdmVydmlld1Byb2plY3RHaWQpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHByb2plY3Qpe1xuICAgICAgICAgICAgICAgIHZhciBvdmVyVmlld01hcExheWVycyA9IHNlbGYuZ2V0T3ZlcnZpZXdNYXBMYXllcnMocHJvamVjdCk7XG4gICAgICAgICAgICAgICAgY29udHJvbCA9IENvbnRyb2xzRmFjdG9yeS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogY29udHJvbFR5cGUsXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2JsJyxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ29sLW92ZXJ2aWV3bWFwIG9sLWN1c3RvbS1vdmVydmlld21hcCcsXG4gICAgICAgICAgICAgICAgICBjb2xsYXBzZUxhYmVsOiAkKCc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbWVudS1sZWZ0XCI+PC9zcGFuPicpWzBdLFxuICAgICAgICAgICAgICAgICAgbGFiZWw6ICQoJzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tZW51LXJpZ2h0XCI+PC9zcGFuPicpWzBdLFxuICAgICAgICAgICAgICAgICAgY29sbGFwc2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGxheWVyczogb3ZlclZpZXdNYXBMYXllcnMsXG4gICAgICAgICAgICAgICAgICB2aWV3OiBuZXcgb2wuVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb246IHNlbGYuZ2V0UHJvamVjdGlvbigpXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlbGYuYWRkQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5wcm90by5hZGRDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCl7XG4gIHRoaXMudmlld2VyLm1hcC5hZGRDb250cm9sKGNvbnRyb2wpO1xuICB0aGlzLl9tYXBDb250cm9scy5wdXNoKGNvbnRyb2wpO1xufTtcblxucHJvdG8uYWRkTWFwTGF5ZXIgPSBmdW5jdGlvbihtYXBMYXllcikge1xuICB0aGlzLl9tYXBMYXllcnMucHVzaChtYXBMYXllcik7XG59O1xuXG5wcm90by5nZXRNYXBMYXllcnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX21hcExheWVycztcbn07XG5cbnByb3RvLmdldE1hcExheWVyRm9yTGF5ZXIgPSBmdW5jdGlvbihsYXllcil7XG4gIHZhciBtYXBMYXllcjtcbiAgdmFyIG11bHRpbGF5ZXJJZCA9ICdsYXllcl8nK2xheWVyLnN0YXRlLm11bHRpbGF5ZXI7XG4gIF8uZm9yRWFjaCh0aGlzLmdldE1hcExheWVycygpLGZ1bmN0aW9uKF9tYXBMYXllcil7XG4gICAgaWYgKF9tYXBMYXllci5nZXRJZCgpID09IG11bHRpbGF5ZXJJZCkge1xuICAgICAgbWFwTGF5ZXIgPSBfbWFwTGF5ZXI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1hcExheWVyO1xufTtcblxucHJvdG8uc2V0dXBCYXNlTGF5ZXJzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoIXRoaXMucHJvamVjdC5zdGF0ZS5iYXNlbGF5ZXJzKXtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLm1hcEJhc2VMYXllcnMgPSB7fTtcbiAgXG4gIHZhciBpbml0QmFzZUxheWVyID0gUHJvamVjdHNSZWdpc3RyeS5jb25maWcuaW5pdGJhc2VsYXllcjtcbiAgdmFyIGJhc2VMYXllcnNBcnJheSA9IHRoaXMucHJvamVjdC5zdGF0ZS5iYXNlbGF5ZXJzO1xuICBcbiAgXy5mb3JFYWNoKGJhc2VMYXllcnNBcnJheSxmdW5jdGlvbihiYXNlTGF5ZXIpe1xuICAgIHZhciB2aXNpYmxlID0gdHJ1ZTtcbiAgICBpZiAoc2VsZi5wcm9qZWN0LnN0YXRlLmluaXRiYXNlbGF5ZXIpIHtcbiAgICAgIHZpc2libGUgPSBiYXNlTGF5ZXIuaWQgPT0gKHNlbGYucHJvamVjdC5zdGF0ZS5pbml0YmFzZWxheWVyKTtcbiAgICB9XG4gICAgaWYgKGJhc2VMYXllci5maXhlZCkge1xuICAgICAgdmlzaWJsZSA9IGJhc2VMYXllci5maXhlZDtcbiAgICB9XG4gICAgYmFzZUxheWVyLnZpc2libGUgPSB2aXNpYmxlO1xuICB9KTtcbiAgXG4gIGJhc2VMYXllcnNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGxheWVyKXsgICAgIFxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICB1cmw6IHNlbGYucHJvamVjdC5nZXRXbXNVcmwoKSxcbiAgICAgIGlkOiBsYXllci5pZCxcbiAgICAgIHRpbGVkOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgbWFwTGF5ZXIgPSBuZXcgV01TTGF5ZXIoY29uZmlnKTtcbiAgICBzZWxmLnJlZ2lzdGVyTGlzdGVuZXJzKG1hcExheWVyKTtcbiAgICBcbiAgICBtYXBMYXllci5hZGRMYXllcihsYXllcik7XG4gICAgc2VsZi5tYXBCYXNlTGF5ZXJzW2xheWVyLmlkXSA9IG1hcExheWVyO1xuICB9KTtcbiAgXG4gIF8uZm9yRWFjaChfLnZhbHVlcyh0aGlzLm1hcEJhc2VMYXllcnMpLnJldmVyc2UoKSxmdW5jdGlvbihtYXBMYXllcil7XG4gICAgc2VsZi52aWV3ZXIubWFwLmFkZExheWVyKG1hcExheWVyLmdldE9MTGF5ZXIoKSk7XG4gICAgbWFwTGF5ZXIudXBkYXRlKHNlbGYuc3RhdGUpO1xuICB9KVxufTtcblxucHJvdG8uc2V0dXBMYXllcnMgPSBmdW5jdGlvbigpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMudmlld2VyLnJlbW92ZUxheWVycygpO1xuICB0aGlzLnNldHVwQmFzZUxheWVycygpO1xuICB0aGlzLl9yZXNldCgpO1xuICB2YXIgbGF5ZXJzID0gdGhpcy5wcm9qZWN0LmdldExheWVycygpO1xuICAvL3JhZ2dydXBwbyBwZXIgdmFsb3JlIGRlbCBtdWx0aWxheWVyIGNvbiBjaGlhdmUgdmFsb3JlIG11bHRpbGF5ZXIgZSB2YWxvcmUgYXJyYXlcbiAgdmFyIG11bHRpTGF5ZXJzID0gXy5ncm91cEJ5KGxheWVycyxmdW5jdGlvbihsYXllcil7XG4gICAgcmV0dXJuIGxheWVyLnN0YXRlLm11bHRpbGF5ZXI7XG4gIH0pO1xuICBfLmZvckVhY2gobXVsdGlMYXllcnMsZnVuY3Rpb24obGF5ZXJzLGlkKXtcbiAgICB2YXIgbXVsdGlsYXllcklkID0gJ2xheWVyXycraWQ7XG4gICAgdmFyIHRpbGVkID0gbGF5ZXJzWzBdLnN0YXRlLnRpbGVkO1xuICAgIHZhciBjb25maWcgPSB7XG4gICAgICB1cmw6IHNlbGYucHJvamVjdC5nZXRXbXNVcmwoKSxcbiAgICAgIGlkOiBtdWx0aWxheWVySWQsXG4gICAgICB0aWxlZDogdGlsZWRcbiAgICB9O1xuICAgIHZhciBtYXBMYXllciA9IG5ldyBXTVNMYXllcihjb25maWcsc2VsZi5sYXllcnNFeHRyYVBhcmFtcyk7XG4gICAgc2VsZi5hZGRNYXBMYXllcihtYXBMYXllcik7XG4gICAgc2VsZi5yZWdpc3Rlckxpc3RlbmVycyhtYXBMYXllcik7XG4gICAgXy5mb3JFYWNoKGxheWVycy5yZXZlcnNlKCksZnVuY3Rpb24obGF5ZXIpe1xuICAgICAgbWFwTGF5ZXIuYWRkTGF5ZXIobGF5ZXIpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIF8uZm9yRWFjaCh0aGlzLmdldE1hcExheWVycygpLnJldmVyc2UoKSxmdW5jdGlvbihtYXBMYXllcil7XG4gICAgc2VsZi52aWV3ZXIubWFwLmFkZExheWVyKG1hcExheWVyLmdldE9MTGF5ZXIoKSk7XG4gICAgbWFwTGF5ZXIudXBkYXRlKHNlbGYuc3RhdGUsc2VsZi5sYXllcnNFeHRyYVBhcmFtcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcy5tYXBMYXllcnM7XG59O1xuXG5wcm90by5nZXRPdmVydmlld01hcExheWVycyA9IGZ1bmN0aW9uKHByb2plY3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcHJvamVjdExheWVycyA9IHByb2plY3QuZ2V0TGF5ZXJzKHtcbiAgICAnVklTSUJMRSc6IHRydWVcbiAgfSk7XG5cbiAgdmFyIG11bHRpTGF5ZXJzID0gXy5ncm91cEJ5KHByb2plY3RMYXllcnMsZnVuY3Rpb24obGF5ZXIpe1xuICAgIHJldHVybiBsYXllci5zdGF0ZS5tdWx0aWxheWVyO1xuICB9KTtcbiAgXG4gIHZhciBvdmVydmlld01hcExheWVycyA9IFtdO1xuICBfLmZvckVhY2gobXVsdGlMYXllcnMsZnVuY3Rpb24obGF5ZXJzLGlkKXtcbiAgICB2YXIgbXVsdGlsYXllcklkID0gJ292ZXJ2aWV3X2xheWVyXycraWQ7XG4gICAgdmFyIHRpbGVkID0gbGF5ZXJzWzBdLnN0YXRlLnRpbGVkO1xuICAgIHZhciBjb25maWcgPSB7XG4gICAgICB1cmw6IHByb2plY3QuZ2V0V21zVXJsKCksXG4gICAgICBpZDogbXVsdGlsYXllcklkLFxuICAgICAgdGlsZWQ6IHRpbGVkXG4gICAgfTtcbiAgICB2YXIgbWFwTGF5ZXIgPSBuZXcgV01TTGF5ZXIoY29uZmlnKTtcbiAgICBfLmZvckVhY2gobGF5ZXJzLnJldmVyc2UoKSxmdW5jdGlvbihsYXllcil7XG4gICAgICBtYXBMYXllci5hZGRMYXllcihsYXllcik7XG4gICAgfSk7XG4gICAgb3ZlcnZpZXdNYXBMYXllcnMucHVzaChtYXBMYXllci5nZXRPTExheWVyKHRydWUpKTtcbiAgfSk7XG4gIFxuICByZXR1cm4gb3ZlcnZpZXdNYXBMYXllcnMucmV2ZXJzZSgpO1xufTtcblxucHJvdG8udXBkYXRlTWFwTGF5ZXJzID0gZnVuY3Rpb24obWFwTGF5ZXJzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgXy5mb3JFYWNoKG1hcExheWVycyxmdW5jdGlvbihtYXBMYXllcil7XG4gICAgbWFwTGF5ZXIudXBkYXRlKHNlbGYuc3RhdGUsc2VsZi5sYXllcnNFeHRyYVBhcmFtcyk7XG4gIH0pXG59O1xuXG5wcm90by5yZWdpc3Rlckxpc3RlbmVycyA9IGZ1bmN0aW9uKG1hcExheWVyKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBtYXBMYXllci5vbignbG9hZHN0YXJ0JyxmdW5jdGlvbigpe1xuICAgIHNlbGYuX2luY3JlbWVudExvYWRlcnMoKTtcbiAgfSk7XG4gIG1hcExheWVyLm9uKCdsb2FkZW5kJyxmdW5jdGlvbigpe1xuICAgIHNlbGYuX2RlY3JlbWVudExvYWRlcnMoZmFsc2UpO1xuICB9KTtcbiAgXG4gIHRoaXMub24oJ2V4dHJhUGFyYW1zU2V0JyxmdW5jdGlvbihleHRyYVBhcmFtcyx1cGRhdGUpe1xuICAgIGlmICh1cGRhdGUpIHtcbiAgICAgIG1hcExheWVyLnVwZGF0ZSh0aGlzLnN0YXRlLGV4dHJhUGFyYW1zKTtcbiAgICB9XG4gIH0pXG59O1xuXG5wcm90by5zZXRUYXJnZXQgPSBmdW5jdGlvbihlbElkKXtcbiAgdGhpcy50YXJnZXQgPSBlbElkO1xufTtcblxucHJvdG8uYWRkSW50ZXJhY3Rpb24gPSBmdW5jdGlvbihpbnRlcmFjdGlvbikge1xuXG4gIHRoaXMuX3Vuc2V0Q29udHJvbHMoKTtcbiAgdGhpcy52aWV3ZXIubWFwLmFkZEludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgaW50ZXJhY3Rpb24uc2V0QWN0aXZlKHRydWUpO1xufTtcblxucHJvdG8ucmVtb3ZlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbihpbnRlcmFjdGlvbil7XG4gIHRoaXMudmlld2VyLm1hcC5yZW1vdmVJbnRlcmFjdGlvbihpbnRlcmFjdGlvbik7XG59O1xuXG4vLyBlbWV0dG8gZXZlbnRvIHF1YW5kbyB2aWVuZSBhdHRpdmF0YSB1biBpbnRlcmF6aW9uZSBkaSB0aXBvIFBvaW50ZXIgKHV0aWxlIGFkIGVzLiBwZXIgZGlzYXR0aXZhcmUvcmlhdHRpdmFyZSBpIHRvb2wgZGkgZWRpdGluZylcbnByb3RvLl93YXRjaEludGVyYWN0aW9uID0gZnVuY3Rpb24oaW50ZXJhY3Rpb24pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpbnRlcmFjdGlvbi5vbignY2hhbmdlOmFjdGl2ZScsZnVuY3Rpb24oZSl7XG4gICAgaWYgKChlLnRhcmdldCBpbnN0YW5jZW9mIG9sLmludGVyYWN0aW9uLlBvaW50ZXIpICYmIGUudGFyZ2V0LmdldEFjdGl2ZSgpKSB7XG4gICAgICBzZWxmLmVtaXQoJ3BvaW50ZXJJbnRlcmFjdGlvblNldCcsZS50YXJnZXQpO1xuICAgIH1cbiAgfSlcbn07XG5cbnByb3RvLmdvVG8gPSBmdW5jdGlvbihjb29yZGluYXRlcyx6b29tKXtcbiAgdmFyIHpvb20gPSB6b29tIHx8IDY7XG4gIHRoaXMudmlld2VyLmdvVG8oY29vcmRpbmF0ZXMsem9vbSk7XG59O1xuXG5wcm90by5nb1RvV0dTODQgPSBmdW5jdGlvbihjb29yZGluYXRlcyx6b29tKXtcbiAgdmFyIGNvb3JkaW5hdGVzID0gb2wucHJvai50cmFuc2Zvcm0oY29vcmRpbmF0ZXMsJ0VQU0c6NDMyNicsJ0VQU0c6Jyt0aGlzLnByb2plY3Quc3RhdGUuY3JzKTtcbiAgdGhpcy5nb1RvKGNvb3JkaW5hdGVzLHpvb20pO1xufTtcblxucHJvdG8uZXh0ZW50VG9XR1M4NCA9IGZ1bmN0aW9uKGV4dGVudCl7XG4gIHJldHVybiBvbC5wcm9qLnRyYW5zZm9ybUV4dGVudChleHRlbnQsJ0VQU0c6Jyt0aGlzLnByb2plY3Quc3RhdGUuY3JzLCdFUFNHOjQzMjYnKTtcbn07XG5cbnByb3RvLmhpZ2hsaWdodEdlb21ldHJ5ID0gZnVuY3Rpb24oZ2VvbWV0cnlPYmosb3B0aW9ucyl7XG4gIHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHpvb20gPSBvcHRpb25zLnpvb20gfHwgdHJ1ZTtcbiAgXG4gIHZhciB2aWV3ID0gdGhpcy52aWV3ZXIubWFwLmdldFZpZXcoKTtcbiAgXG4gIHZhciBnZW9tZXRyeTtcbiAgaWYgKGdlb21ldHJ5T2JqIGluc3RhbmNlb2Ygb2wuZ2VvbS5HZW9tZXRyeSl7XG4gICAgZ2VvbWV0cnkgPSBnZW9tZXRyeU9iajtcbiAgfVxuICBlbHNlIHtcbiAgICB2YXIgZm9ybWF0ID0gbmV3IG9sLmZvcm1hdC5HZW9KU09OO1xuICAgIGdlb21ldHJ5ID0gZm9ybWF0LnJlYWRHZW9tZXRyeShnZW9tZXRyeU9iaik7XG4gIH1cbiAgXG4gIHZhciBnZW9tZXRyeVR5cGUgPSBnZW9tZXRyeS5nZXRUeXBlKCk7XG4gIGlmIChnZW9tZXRyeVR5cGUgPT0gJ1BvaW50Jykge1xuICAgIHRoaXMudmlld2VyLmdvVG8oZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHpvb20pIHtcbiAgICAgIHRoaXMudmlld2VyLmZpdChnZW9tZXRyeSxvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uIHx8IDQwMDA7XG4gIFxuICBpZiAob3B0aW9ucy5mcm9tV0dTODQpIHtcbiAgICBnZW9tZXRyeS50cmFuc2Zvcm0oJ0VQU0c6NDMyNicsJ0VQU0c6JytQcm9qZWN0U2VydmljZS5zdGF0ZS5wcm9qZWN0LmNycyk7XG4gIH1cbiAgXG4gIHZhciBmZWF0dXJlID0gbmV3IG9sLkZlYXR1cmUoe1xuICAgIGdlb21ldHJ5OiBnZW9tZXRyeVxuICB9KTtcbiAgdmFyIHNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKCk7XG4gIHNvdXJjZS5hZGRGZWF0dXJlcyhbZmVhdHVyZV0pO1xuICB2YXIgbGF5ZXIgPSBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdHlsZTogZnVuY3Rpb24oZmVhdHVyZSl7XG4gICAgICB2YXIgc3R5bGVzID0gW107XG4gICAgICB2YXIgZ2VvbWV0cnlUeXBlID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKTtcbiAgICAgIGlmIChnZW9tZXRyeVR5cGUgPT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICAgIGNvbG9yOiAncmdiKDI1NSwyNTUsMCknLFxuICAgICAgICAgICAgd2lkdGg6IDRcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgc3R5bGVzLnB1c2goc3R5bGUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZ2VvbWV0cnlUeXBlID09ICdQb2ludCcpe1xuICAgICAgICB2YXIgc3R5bGUgPSBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgIHJhZGl1czogNixcbiAgICAgICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICAgICAgY29sb3I6ICdyZ2IoMjU1LDI1NSwwKScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHpJbmRleDogSW5maW5pdHlcbiAgICAgICAgfSk7XG4gICAgICAgIHN0eWxlcy5wdXNoKHN0eWxlKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICB9XG4gIH0pO1xuICBsYXllci5zZXRNYXAodGhpcy52aWV3ZXIubWFwKTtcbiAgXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICBsYXllci5zZXRNYXAobnVsbCk7XG4gIH0sZHVyYXRpb24pO1xufTtcblxucHJvdG8ucmVmcmVzaE1hcCA9IGZ1bmN0aW9uKCl7XG4gIF8uZm9yRWFjaCh0aGlzLm1hcExheWVycyxmdW5jdGlvbih3bXNMYXllcil7XG4gICAgd21zTGF5ZXIuZ2V0T0xMYXllcigpLmdldFNvdXJjZSgpLnVwZGF0ZVBhcmFtcyh7XCJ0aW1lXCI6IERhdGUubm93KCl9KTtcbiAgfSlcbn07XG5cbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLGhlaWdodCkge1xuICBpZiAoIXRoaXMudmlld2VyKSB7XG4gICAgdmFyIGluaXRpYWxFeHRlbnQgPSB0aGlzLnByb2plY3Quc3RhdGUuZXh0ZW50O1xuICAgIHZhciB4UmVzID0gb2wuZXh0ZW50LmdldFdpZHRoKGluaXRpYWxFeHRlbnQpIC8gd2lkdGg7XG4gICAgdmFyIHlSZXMgPSBvbC5leHRlbnQuZ2V0SGVpZ2h0KGluaXRpYWxFeHRlbnQpIC8gaGVpZ2h0O1xuICAgIHZhciByZXMgPSBNYXRoLm1heCh4UmVzLHlSZXMpO1xuICAgIHRoaXMuc2V0dXBWaWV3ZXIocmVzKTtcbiAgfVxuICB0aGlzLmdldE1hcCgpLnVwZGF0ZVNpemUoKTtcbiAgdGhpcy5fc2V0TWFwVmlldygpO1xufTtcblxucHJvdG8uX3Jlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX21hcExheWVycyA9IFtdO1xufTtcblxucHJvdG8uX3Vuc2V0Q29udHJvbHMgPSBmdW5jdGlvbigpIHtcbiAgXy5mb3JFYWNoKHRoaXMuX21hcENvbnRyb2xzLGZ1bmN0aW9uKGNvbnRyb2wpe1xuICAgIGlmIChjb250cm9sLnRvZ2dsZSkge1xuICAgICAgY29udHJvbC50b2dnbGUoZmFsc2UpO1xuICAgIH1cbiAgfSlcbn07XG5cbnByb3RvLl9zZXRNYXBWaWV3ID0gZnVuY3Rpb24oKXtcbiAgdmFyIGJib3ggPSB0aGlzLnZpZXdlci5nZXRCQk9YKCk7XG4gIHZhciByZXNvbHV0aW9uID0gdGhpcy52aWV3ZXIuZ2V0UmVzb2x1dGlvbigpO1xuICB2YXIgY2VudGVyID0gdGhpcy52aWV3ZXIuZ2V0Q2VudGVyKCk7XG4gIHRoaXMuc2V0TWFwVmlldyhiYm94LHJlc29sdXRpb24sY2VudGVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwU2VydmljZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPVxcXCJtYXBcXFwiIHN0eWxlPVxcXCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlXFxcIj48L2Rpdj5cXG5cIjtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIG1lcmdlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLm1lcmdlO1xudmFyIHQgPSByZXF1aXJlKCdjb3JlL2kxOG4vaTE4bi5zZXJ2aWNlJykudDtcbnZhciByZXNvbHZlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgR1VJID0gcmVxdWlyZSgnZ3VpL2d1aScpOyAgIFxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoJ2d1aS92dWUvY29tcG9uZW50Jyk7XG52YXIgUm91dGVyU2VydmljZSA9IHJlcXVpcmUoJ2NvcmUvcm91dGVyJyk7XG52YXIgb2wzaGVscGVycyA9IHJlcXVpcmUoJ2czdy1vbDMvc3JjL2czdy5vbDMnKS5oZWxwZXJzO1xudmFyIE1hcHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvbWFwL21hcHNyZWdpc3RyeScpO1xudmFyIE1hcFNlcnZpY2UgPSByZXF1aXJlKCcuLi9tYXBzZXJ2aWNlJyk7XG5cbnZhciB2dWVDb21wb25lbnRPcHRpb25zID0ge1xuICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9tYXAuaHRtbCcpLFxuICByZWFkeTogZnVuY3Rpb24oKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXG4gICAgdmFyIG1hcFNlcnZpY2UgPSB0aGlzLiRvcHRpb25zLm1hcFNlcnZpY2U7XG4gICAgXG4gICAgbWFwU2VydmljZS5zZXRUYXJnZXQodGhpcy4kZWwuaWQpO1xuICAgIFxuICAgIC8vIHF1ZXN0byBzZXJ2ZSBwZXIgcXVhbmRvIHZpZW5lIGNhbWJpYXRvIHByb2dldHRvL3Zpc3RhIGNhcnRvZ3JhZmljYSwgaW4gY3VpIHZpZW5lIHJpY3JlYXRvIGlsIHZpZXdlciAoZSBxdWluZGkgbGEgbWFwcGEpXG4gICAgbWFwU2VydmljZS5vbmFmdGVyKCdzZXR1cFZpZXdlcicsZnVuY3Rpb24oKXtcbiAgICAgIG1hcFNlcnZpY2Uuc2V0VGFyZ2V0KHNlbGYuJGVsLmlkKTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgSW50ZXJuYWxDb21wb25lbnQgPSBWdWUuZXh0ZW5kKHZ1ZUNvbXBvbmVudE9wdGlvbnMpO1xuXG5WdWUuY29tcG9uZW50KCdnM3ctbWFwJywgdnVlQ29tcG9uZW50T3B0aW9ucyk7XG5cbmZ1bmN0aW9uIE1hcENvbXBvbmVudChvcHRpb25zKXtcbiAgYmFzZSh0aGlzLG9wdGlvbnMpO1xuICB0aGlzLmlkID0gXCJtYXAtY29tcG9uZW50XCI7XG4gIHRoaXMudGl0bGUgPSBcIkNhdGFsb2dvIGRhdGlcIjtcbiAgdGhpcy5fc2VydmljZSA9IG5ldyBNYXBTZXJ2aWNlO1xuICBtZXJnZSh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudCA9IG5ldyBJbnRlcm5hbENvbXBvbmVudCh7XG4gICAgbWFwU2VydmljZTogdGhpcy5fc2VydmljZVxuICB9KTtcbn07XG5cbmluaGVyaXQoTWFwQ29tcG9uZW50LCBDb21wb25lbnQpO1xudmFyIHByb3RvID0gTWFwQ29tcG9uZW50LnByb3RvdHlwZTtcblxucHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24od2lkdGgsaGVpZ2h0KSB7XG4gICQoXCIjbWFwXCIpLmhlaWdodChoZWlnaHQpO1xuICAkKFwiI21hcFwiKS53aWR0aCh3aWR0aCk7XG4gIHRoaXMuX3NlcnZpY2UucmVzaXplKHdpZHRoLGhlaWdodCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICBNYXBDb21wb25lbnQ7XG4iLCJ2YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5pbmhlcml0O1xudmFyIHJlc29sdmVkVmFsdWUgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVzb2x2ZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xuXG52YXIgUGFuZWwgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMuaW50ZXJuYWxQYW5lbCA9IG51bGw7XG4gIHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgbnVsbDtcbiAgdGhpcy50aXRsZSA9IG9wdGlvbnMudGl0bGUgfHwgJyc7XG59O1xuXG5pbmhlcml0KFBhbmVsLCBHM1dPYmplY3QpO1xuXG52YXIgcHJvdG8gPSBQYW5lbC5wcm90b3R5cGU7XG5cbnByb3RvLmdldElkID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuaWQ7XG59O1xuXG5wcm90by5nZXRUaXRsZSA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLnRpdGxlO1xufTtcblxuLyogSE9PS1MgKi9cblxuLypcbiAqIElsIG1ldG9kbyBwZXJtZXR0ZSBhbCBwYW5uZWxsbyBkaSBtb250YXJzaSBuZWwgRE9NXG4gKiBwYXJlbnQ6IGVsZW1lbnRvIERPTSBwYWRyZSwgc3UgY3VpIGluc2VyaXJzaTtcbiAqIHJpdG9ybmEgdW5hIHByb21pc2UsIHJpc29sdGEgbmVsIG1vbWVudG8gaW4gY3VpIHNhcsOgIHRlcm1pbmF0byBpbCBtb250YWdnaW9cbiovXG5cbi8vIFNPTk8gRFVFIFRJUE9MT0dJRSBESSBNT05UQUdHSU8gQ09OIElMIFFVQUxFIElMIFBBTk5FTExPXG4vLyBDSEUgVkVSUkEnIE1PTlRBVE8gQUwgVk9MTyBDT04gSUwgTUVUT0RPIE1PVU5UIEEgU0VDT05EQSBERUwgVElQTyBESSBQQU5ORUxMTyBSSUNISUVTVE9cblxuLy8gcmljaGlhbWF0byBxdWFuZG8gbGEgR1VJIGNoaWVkZSBkaSBjaGl1ZGVyZSBpbCBwYW5uZWxsby4gU2Ugcml0b3JuYSBmYWxzZSBpbCBwYW5uZWxsbyBub24gdmllbmUgY2hpdXNvXG5cbnByb3RvLm1vdW50ID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gIHZhciBwYW5lbCA9IHRoaXMuaW50ZXJuYWxQYW5lbDtcbiAgcGFuZWwuJG1vdW50KCkuJGFwcGVuZFRvKHBhcmVudCk7XG4gICQocGFyZW50KS5sb2NhbGl6ZSgpO1xuICByZXR1cm4gcmVzb2x2ZWRWYWx1ZSh0cnVlKTtcbn07XG5cbi8qXG4gKiBNZXRvZG8gcmljaGlhbWF0byBxdWFuZG8gc2kgdnVvbGUgcmltdW92ZXJlIGlsIHBhbmVsbG8uXG4gKiBSaXRvcm5hIHVuYSBwcm9tZXNzYSBjaGUgc2Fyw6Agcmlzb2x0YSBuZWwgbW9tZW50byBpbiBjdWkgaWwgcGFubmVsbG8gYXZyw6AgY29tcGxldGF0byBsYSBwcm9wcmlhIHJpbW96aW9uZSAoZWQgZXZlbnR1YWxlIHJpbGFzY2lvIGRpIHJpc29yc2UgZGlwZW5kZW50aSlcbiovXG5wcm90by51bm1vdW50ID0gZnVuY3Rpb24oKXtcbiAgdmFyIHBhbmVsID0gdGhpcy5pbnRlcm5hbFBhbmVsO1xuICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gIHBhbmVsLiRkZXN0cm95KHRydWUpO1xuICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG59O1xuXG4vKlxuICogTWV0b2RvIChvcHppb25hbGUpIGNoZSBvZmZyZSBsJ29wcG9ydHVuaXTDoCBkaSByaWNhbGNvbGFyZSBwcm9wcmlldMOgIGRpcGVuZGVudGkgZGFsbGUgZGltZW5zaW9uaSBkZWwgcGFkcmVcbiAqIHBhcmVudEhlaWdodDogbnVvdmEgYWx0ZXp6YSBkZWwgcGFyZW50XG4gKiBwYXJlbnRXaWR0aDogbnVvdmEgbGFyZ2hlenphIGRlbCBwYXJlbnRcbiAqIHJpY2hpYW1hdG8gb2duaSB2b2x0YSBjaGUgaWwgcGFyZW50IHN1YmlzY2UgdW4gcmlkaW1lbnNpb25hbWVudG9cbiovXG5wcm90by5vblJlc2l6ZSA9IGZ1bmN0aW9uKHBhcmVudFdpZHRoLHBhcmVudEhlaWdodCl7fTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhbmVsO1xuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgR1VJID0gcmVxdWlyZSgnZ3VpL2d1aScpO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgQ29tcG9uZW50c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnZ3VpL2NvbXBvbmVudHNyZWdpc3RyeScpO1xudmFyIFByb2plY3RzUmVnaXN0cnkgPSByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdHNyZWdpc3RyeScpO1xuXG5mdW5jdGlvbiBRdWVyeVJlc3VsdHNTZXJ2aWNlKCl7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fYWN0aW9ucyA9IHtcbiAgICAnem9vbXRvJzogUXVlcnlSZXN1bHRzU2VydmljZS56b29tVG9FbGVtZW50LFxuICAgICdnb3RvZ2VvbWV0cnknOiBRdWVyeVJlc3VsdHNTZXJ2aWNlLmdvVG9HZW9tZXRyeVxuICB9O1xuICBcbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuY2xlYXJTdGF0ZSgpO1xuICB9O1xuICBcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBsYXllcnM6IFtdLFxuICAgIHF1ZXJ5OiB7fSxcbiAgICBxdWVyeXRpdGxlOiBcIlwiLFxuICAgIGxvYWRpbmc6IHRydWVcbiAgfTtcbiAgXG4gIHRoaXMuc2V0dGVycyA9IHtcbiAgICBzZXRRdWVyeVJlc3BvbnNlOiBmdW5jdGlvbihxdWVyeVJlc3BvbnNlKSB7XG4gICAgICB0aGlzLnN0YXRlLmxheWVycyA9IFtdO1xuICAgICAgdGhpcy5zdGF0ZS5xdWVyeSA9IHF1ZXJ5UmVzcG9uc2UucXVlcnk7XG4gICAgICB0aGlzLl9kaWdlc3RGZWF0dXJlc0ZvckxheWVycyhxdWVyeVJlc3BvbnNlLmRhdGEpO1xuICAgICAgdGhpcy5zdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBcbiAgdGhpcy5jbGVhclN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxheWVyczogW10sXG4gICAgICBxdWVyeToge30sXG4gICAgICBxdWVyeXRpdGxlOiBcIlwiLFxuICAgICAgbG9hZGluZzogdHJ1ZVxuICAgIH07XG4gIH07XG4gIFxuICB0aGlzLnNldFRpdGxlID0gZnVuY3Rpb24ocXVlcnl0aXRsZSkge1xuICAgIHRoaXMuc3RhdGUucXVlcnl0aXRsZSA9IHF1ZXJ5dGl0bGUgfHwgXCJcIjtcbiAgfTtcbiAgXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNsZWFyU3RhdGUoKTtcbiAgfTtcbiAgXG4gIHRoaXMuX2RpZ2VzdEZlYXR1cmVzRm9yTGF5ZXJzID0gZnVuY3Rpb24oZmVhdHVyZXNGb3JMYXllcnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXy5mb3JFYWNoKGZlYXR1cmVzRm9yTGF5ZXJzLGZ1bmN0aW9uKGZlYXR1cmVzRm9yTGF5ZXIpe1xuICAgICAgdmFyIGxheWVyID0gZmVhdHVyZXNGb3JMYXllci5sYXllcjtcbiAgICAgIGlmIChmZWF0dXJlc0ZvckxheWVyLmZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgbGF5ZXJPYmogPSB7XG4gICAgICAgICAgdGl0bGU6IGxheWVyLnN0YXRlLnRpdGxlLFxuICAgICAgICAgIGlkOiBsYXllci5zdGF0ZS5pZCxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBzZWxmLl9wYXJzZUF0dHJpYnV0ZXMobGF5ZXIuZ2V0QXR0cmlidXRlcygpLGZlYXR1cmVzRm9yTGF5ZXIuZmVhdHVyZXNbMF0uZ2V0UHJvcGVydGllcygpKSwgLy8gcHJlbmRvIHNvbG8gZ2xpIGF0dHJpYnV0aSBlZmZldHRpdmFtZW50ZSByaXRvcm5hdGkgZGFsIFdNUyAodXNhbmRvIGxhIHByaW1hIGZlYXR1cmUgZGlzcG9uaWJpbGUpXG4gICAgICAgICAgZmVhdHVyZXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIF8uZm9yRWFjaChmZWF0dXJlc0ZvckxheWVyLmZlYXR1cmVzLGZ1bmN0aW9uKGZlYXR1cmUpeyAgICAgIFxuICAgICAgICAgIHZhciBmZWF0dXJlT2JqID0ge1xuICAgICAgICAgICAgaWQ6IGZlYXR1cmUuZ2V0SWQoKSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGZlYXR1cmUuZ2V0UHJvcGVydGllcygpLFxuICAgICAgICAgICAgZ2VvbWV0cnk6IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXllck9iai5mZWF0dXJlcy5wdXNoKGZlYXR1cmVPYmopO1xuICAgICAgICB9KVxuICAgICAgICBzZWxmLnN0YXRlLmxheWVycy5wdXNoKGxheWVyT2JqKTtcbiAgICAgIH1cbiAgICB9KVxuICB9O1xuICBcbiAgdGhpcy5fcGFyc2VBdHRyaWJ1dGVzID0gZnVuY3Rpb24obGF5ZXJBdHRyaWJ1dGVzLGZlYXR1cmVBdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGZlYXR1cmVBdHRyaWJ1dGVzTmFtZXMgPSBfLmtleXMoZmVhdHVyZUF0dHJpYnV0ZXMpO1xuICAgIGlmIChsYXllckF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICB2YXIgZmVhdHVyZUF0dHJpYnV0ZXNOYW1lcyA9IF8ua2V5cyhmZWF0dXJlQXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gXy5maWx0ZXIobGF5ZXJBdHRyaWJ1dGVzLGZ1bmN0aW9uKGF0dHJpYnV0ZSl7XG4gICAgICAgIHJldHVybiBmZWF0dXJlQXR0cmlidXRlc05hbWVzLmluZGV4T2YoYXR0cmlidXRlLm5hbWUpID4gLTE7XG4gICAgICB9KVxuICAgIH1cbiAgICAvLyBzZSBsYXllci5hdHRyaWJ1dGVzIMOoIHZ1b3RvIChlcy4gcXVhbmRvIGwnaW50ZXJyb2dhemlvbmUgw6ggdmVyc28gdW4gbGF5ZXIgZXN0ZXJubyBkaSBjdWkgbm9uIHNvIGkgY2FtcGkpIGNvc3RydWlzY28gbGEgc3RydXR0dXJhIFwiZml0dGl6aWFcIiB1c2FuZG8gbCdhdHRyaWJ1dG8gc2lhIG9jbWUgbmFtZSBjaGUgY29tZSBsYWJlbFxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIF8ubWFwKGZlYXR1cmVBdHRyaWJ1dGVzTmFtZXMsZnVuY3Rpb24oZmVhdHVyZUF0dHJpYnV0ZXNOYW1lKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBmZWF0dXJlQXR0cmlidXRlc05hbWUsXG4gICAgICAgICAgbGFiZWw6IGZlYXR1cmVBdHRyaWJ1dGVzTmFtZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBcbiAgdGhpcy50cmlnZ2VyID0gZnVuY3Rpb24oYWN0aW9uLGxheWVyLGZlYXR1cmUpIHtcbiAgICB2YXIgYWN0aW9uTWV0aG9kID0gdGhpcy5fYWN0aW9uc1thY3Rpb25dO1xuICAgIGlmIChhY3Rpb25NZXRob2QpIHtcbiAgICAgIGFjdGlvbk1ldGhvZChsYXllcixmZWF0dXJlKTtcbiAgICB9XG4gIH07XG4gIFxuICBiYXNlKHRoaXMpO1xufTtcblxuUXVlcnlSZXN1bHRzU2VydmljZS56b29tVG9FbGVtZW50ID0gZnVuY3Rpb24obGF5ZXIsZmVhdHVyZSkge1xuICBjb25zb2xlLmxvZyhmZWF0dXJlLmdlb21ldHJ5KTtcbn07XG5cblF1ZXJ5UmVzdWx0c1NlcnZpY2UuZ29Ub0dlb21ldHJ5ID0gZnVuY3Rpb24obGF5ZXIsZmVhdHVyZSkge1xuICBpZiAoZmVhdHVyZS5nZW9tZXRyeSkge1xuICAgIEdVSS5oaWRlUXVlcnlSZXN1bHRzKCk7XG4gICAgdmFyIG1hcFNlcnZpY2UgPSBDb21wb25lbnRzUmVnaXN0cnkuZ2V0Q29tcG9uZW50KCdtYXAnKS5nZXRTZXJ2aWNlKCk7XG4gICAgbWFwU2VydmljZS5oaWdobGlnaHRHZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5KTtcbiAgfVxufTtcblxuLy8gTWFrZSB0aGUgcHVibGljIHNlcnZpY2UgZW4gRXZlbnQgRW1pdHRlclxuaW5oZXJpdChRdWVyeVJlc3VsdHNTZXJ2aWNlLCBHM1dPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5UmVzdWx0c1NlcnZpY2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPCEtLTxkaXYgaWQ9XFxcInNlYXJjaC1yZXN1bHRzXFxcIj5cXG4gIDxkaXYgdi1mb3I9XFxcImxheWVyIGluIHN0YXRlLmxheWVyc1xcXCIgc3R5bGU9XFxcImN1cnNvcjpwb2ludGVyXFxcIj5cXG4gICAgPGg0Pnt7IGxheWVyLnRpdGxlIH19PC9oND5cXG4gICAgPHA+TnVtZXJvIGRpIGZlYXR1cmVzOiB7eyBsYXllci5mZWF0dXJlcy5sZW5ndGggfX08L3A+XFxuICA8L2Rpdj5cXG48L2Rpdj4tLT5cXG48ZGl2IGlkPVxcXCJzZWFyY2gtcmVzdWx0c1xcXCIgY2xhc3M9XFxcInF1ZXJ5cmVzdWx0cy1jb250YWluZXJcXFwiPlxcbiAgPGgzPlJpc3VsdGF0aSB7e3N0YXRlLnF1ZXJ5dGl0bGUgfCBsb3dlcmNhc2V9fTwvaDM+XFxuICA8ZGl2IHYtc2hvdz1cXFwic3RhdGUubG9hZGluZ1xcXCIgY2xhc3M9XFxcImJhci1sb2FkZXJcXFwiPjwvZGl2PlxcbiAgPHVsIHYtaWY9XFxcImhhc1Jlc3VsdHMoKVxcXCIgY2xhc3M9XFxcInF1ZXJ5cmVzdWx0c1xcXCIgaWQ9XFxcInF1ZXJ5cmVzdWx0c1xcXCI+XFxuICAgIDxsaSB2LWlmPVxcXCJsYXllckhhc0ZlYXR1cmVzKGxheWVyKVxcXCIgdi1mb3I9XFxcImxheWVyIGluIHN0YXRlLmxheWVyc1xcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiYm94IGJveC1wcmltYXJ5XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImJveC1oZWFkZXIgd2l0aC1ib3JkZXJcXFwiPlxcbiAgICAgICAgICA8aDMgY2xhc3M9XFxcImJveC10aXRsZVxcXCI+e3sgbGF5ZXIudGl0bGUgfX0gKHt7bGF5ZXIuZmVhdHVyZXMubGVuZ3RofX0pPC9oMz5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYm94LXRvb2xzIHB1bGwtcmlnaHRcXFwiPlxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tYm94LXRvb2xcXFwiIGRhdGEtd2lkZ2V0PVxcXCJjb2xsYXBzZVxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLW1pbnVzXFxcIj48L2k+PC9idXR0b24+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib3gtYm9keVxcXCI+XFxuICAgICAgICAgIDx0YWJsZSBjbGFzcz1cXFwidGFibGUgdGFibGUtc3RyaXBlZFxcXCI+XFxuICAgICAgICAgICAgPHRoZWFkPlxcbiAgICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICA8dGggdi1mb3I9XFxcImF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzU3Vic2V0KGxheWVyLmF0dHJpYnV0ZXMpXFxcIj57e2F0dHJpYnV0ZS5sYWJlbH19PC90aD5cXG4gICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgICAgICA8dGJvZHk+XFxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XFxcImZlYXR1cmUgaW4gbGF5ZXIuZmVhdHVyZXNcXFwiPlxcbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcImF0dHJpYnV0ZXMtcHJldmlld1xcXCIgQGNsaWNrPVxcXCJ0b2dnbGVGZWF0dXJlQm94KGxheWVyLGZlYXR1cmUpXFxcIj5cXG4gICAgICAgICAgICAgICAgICA8dGQgdi1mb3I9XFxcImF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzU3Vic2V0KGxheWVyLmF0dHJpYnV0ZXMpXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7ZmVhdHVyZS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXX19PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPCEtLTxzcGFuIHYtaWY9XFxcImlzU2ltcGxlKGxheWVyLGZlYXR1cmUsYXR0cmlidXRlKVxcXCI+e3tmZWF0dXJlLmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdfX08L3NwYW4+LS0+XFxuICAgICAgICAgICAgICAgICAgICA8IS0tPHNwYW4gdi1pZj1cXFwiaXNSb3V0ZShsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSlcXFwiIGNsYXNzPVxcXCJsaW5rIGRhc2hib2FyZGxpbmtcXFwiIEBjbGljaz1cXFwiZ290byhsYXllcixmZWF0dXJlLmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKVxcXCI+e3sgZmVhdHVyZS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSB9fTwvc3Bhbj4tLT5cXG4gICAgICAgICAgICAgICAgICAgIDwhLS08aW1nIHYtaWY9XFxcImlzUGhvdG8obGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpXFxcIiBkYXRhLXVybD1cXFwie3tnZXRQaG90b1VybChmZWF0dXJlLmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKX19XFxcIiBzdHlsZT1cXFwibWF4LXdpZHRoOjUwcHhcXFwiIDpzcmM9XFxcImdldFBob3RvVXJsKGZlYXR1cmUuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0sdGh1bWIpXFxcIiAvPi0tPlxcbiAgICAgICAgICAgICAgICAgICAgPCEtLTxhIHYtaWY9XFxcImlzTGluayhsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSlcXFwiIGhyZWY9XFxcImxheWVyLmZlYXR1cmUuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV1cXFwiIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWxpbmtcXFwiPjwvYT4tLT5cXG4gICAgICAgICAgICAgICAgICA8L3RkPlxcbiAgICAgICAgICAgICAgICAgIDx0ZD48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1vcHRpb24taG9yaXpvbnRhbCBsaW5rIG1vcmVsaW5rXFxcIj48L3NwYW4+PC90ZD5cXG4gICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICA8dHIgdi1zaG93PVxcXCJjb2xsYXBzZUZlYXR1cmVCb3gobGF5ZXIsZmVhdHVyZSlcXFwiIGNsYXNzPVxcXCJxdWVyeXJlc3VsdHMtZmVhdHVyZWJveFxcXCI+XFxuICAgICAgICAgICAgICAgIDx0ZCA6Y29sc3Bhbj1cXFwiYXR0cmlidXRlc1N1YnNldExlbmd0aChsYXllci5hdHRyaWJ1dGVzKSsxXFxcIj5cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhY3Rpb24tYnV0dG9ucy1jb250YWluZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVxcXCJnZW9tZXRyeUF2YWlsYWJsZShmZWF0dXJlKVxcXCIgY2xhc3M9XFxcImFjdGlvbi1idXR0b24gaGludC0tdG9wLXJpZ2h0XFxcIiBhcmlhLWxhYmVsPVxcXCJWaXN1YWxpenphIHN1bGxhIG1hcHBhXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImFjdGlvbi1idXR0b24taWNvbiBnbHlwaGljb24gZ2x5cGhpY29uLW1hcC1tYXJrZXJcXFwiIEBjbGljaz1cXFwidHJpZ2dlcignZ290b2dlb21ldHJ5JyxsYXllcixmZWF0dXJlKVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8IS0tPGRpdiBjbGFzcz1cXFwiYWN0aW9uLWJ1dHRvbiBoaW50LS10b3AtcmlnaHRcXFwiIGFyaWEtbGFiZWw9XFxcIkxpbmsgYWxsJ2VsZW1lbnRvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImFjdGlvbi1idXR0b24taWNvbiBnbHlwaGljb24gZ2x5cGhpY29uLWxpbmtcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pi0tPlxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgIDx0YWJsZT5cXG4gICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj1cXFwiYXR0cmlidXRlIGluIGxheWVyLmF0dHJpYnV0ZXNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImF0dHItbGFiZWxcXFwiPnt7YXR0cmlidXRlLmxhYmVsfX08L3RkPlxcbiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcImF0dHItdmFsdWVcXFwiPnt7ZmVhdHVyZS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXX19PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgICAgICAgICAgPC90ZD5cXG4gICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgIDwvdGJvZHk+XFxuICAgICAgICAgIDwvdGFibGU+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9saT5cXG4gIDwvdWw+XFxuICA8c3BhbiB2LWlmPVxcXCIhaGFzUmVzdWx0cygpXFxcIj5OZXNzdW4gcmlzdWx0YXRvPC9zcGFuPlxcbjwvZGl2PlxcblxcblwiO1xuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykubWVyZ2U7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnZ3VpL3Z1ZS9jb21wb25lbnQnKTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdjb3JlL2czd29iamVjdCcpO1xudmFyIFF1ZXJ5UmVzdWx0c1NlcnZpY2UgPSByZXF1aXJlKCdndWkvcXVlcnlyZXN1bHRzL3F1ZXJ5cmVzdWx0c3NlcnZpY2UnKTtcblxudmFyIHZ1ZUNvbXBvbmVudE9wdGlvbnMgPSB7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuL3F1ZXJ5cmVzdWx0cy5odG1sJyksXG4gIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0ZTogdGhpcy4kb3B0aW9ucy5xdWVyeVJlc3VsdHNTZXJ2aWNlLnN0YXRlLFxuICAgICAgbGF5ZXJzRmVhdHVyZXNCb3hlczoge30sXG4gICAgfVxuICB9LFxuICByZXBsYWNlOiBmYWxzZSxcbiAgbWV0aG9kczoge1xuICAgIGxheWVySGFzRmVhdHVyZXM6IGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgICBpZiAobGF5ZXIuZmVhdHVyZXMpIHtcbiAgICAgICAgcmV0dXJuIGxheWVyLmZlYXR1cmVzLmxlbmd0aCA+IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBoYXNSZXN1bHRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmxheWVycy5sZW5ndGg7XG4gICAgfSxcbiAgICBnZW9tZXRyeUF2YWlsYWJsZTogZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgcmV0dXJuIGZlYXR1cmUuZ2VvbWV0cnkgPyB0cnVlIDogZmFsc2U7XG4gICAgfSxcbiAgICBhdHRyaWJ1dGVzU3Vic2V0OiBmdW5jdGlvbihhdHRyaWJ1dGVzKSB7XG4gICAgICB2YXIgZW5kID0gTWF0aC5taW4oMyxhdHRyaWJ1dGVzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gYXR0cmlidXRlcy5zbGljZSgwLGVuZCk7XG4gICAgfSxcbiAgICBhdHRyaWJ1dGVzU3Vic2V0TGVuZ3RoOiBmdW5jdGlvbihhdHRyaWJ1dGVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzU3Vic2V0KGF0dHJpYnV0ZXMpLmxlbmd0aDtcbiAgICB9LFxuICAgIGNvbGxhcHNlRmVhdHVyZUJveDogZnVuY3Rpb24obGF5ZXIsZmVhdHVyZSkge1xuICAgICAgdmFyIGNvbGxhcHNlZCA9IHRydWU7XG4gICAgICB2YXIgYm94aWQgPSBsYXllci5pZCsnXycrZmVhdHVyZS5pZDtcbiAgICAgIGlmICh0aGlzLmxheWVyc0ZlYXR1cmVzQm94ZXNbYm94aWRdKSB7XG4gICAgICAgIGNvbGxhcHNlZCA9IHRoaXMubGF5ZXJzRmVhdHVyZXNCb3hlc1tib3hpZF0uY29sbGFwc2VkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxhcHNlZDtcbiAgICB9LFxuICAgIHRvZ2dsZUZlYXR1cmVCb3g6IGZ1bmN0aW9uKGxheWVyLGZlYXR1cmUpIHtcbiAgICAgIHZhciBib3hpZCA9IGxheWVyLmlkKydfJytmZWF0dXJlLmlkO1xuICAgICAgdGhpcy5sYXllcnNGZWF0dXJlc0JveGVzW2JveGlkXS5jb2xsYXBzZWQgPSAhdGhpcy5sYXllcnNGZWF0dXJlc0JveGVzW2JveGlkXS5jb2xsYXBzZWQ7XG4gICAgfSxcbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihhY3Rpb24sbGF5ZXIsZmVhdHVyZSkge1xuICAgICAgdGhpcy4kb3B0aW9ucy5xdWVyeVJlc3VsdHNTZXJ2aWNlLnRyaWdnZXIoYWN0aW9uLGxheWVyLGZlYXR1cmUpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc2UgbG8gdm9nbGlvIGlzdGFuemlhcmUgbWFudWFsbWVudGVcbnZhciBJbnRlcm5hbENvbXBvbmVudCA9IFZ1ZS5leHRlbmQodnVlQ29tcG9uZW50T3B0aW9ucyk7XG5cbmZ1bmN0aW9uIFF1ZXJ5UmVzdWx0c0NvbXBvbmVudChvcHRpb25zKXtcbiAgYmFzZSh0aGlzLG9wdGlvbnMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuaWQgPSBcInF1ZXJ5cmVzdWx0c1wiO1xuICB0aGlzLnRpdGxlID0gXCJRdWVyeSBSZXN1bHRzXCI7XG4gIHRoaXMuX3NlcnZpY2UgPSBuZXcgUXVlcnlSZXN1bHRzU2VydmljZSgpO1xuICAvL3VzYXRvIHF1YW5kbyDDqCBzdGF0byBkaXN0cnV0dG9cbiAgdGhpcy5zZXRJbnRlcm5hbENvbXBvbmVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW50ZXJuYWxDb21wb25lbnQgPSBuZXcgSW50ZXJuYWxDb21wb25lbnQoe1xuICAgICAgcXVlcnlSZXN1bHRzU2VydmljZTogdGhpcy5fc2VydmljZVxuICAgIH0pO1xuICAgIHRoaXMuY3JlYXRlTGF5ZXJzRmVhdHVyZXNCb3hlcygpO1xuICAgIHRoaXMuaW50ZXJuYWxDb21wb25lbnQucXVlcnl0aXRsZSA9IHRoaXMuX3NlcnZpY2Uuc3RhdGUucXVlcnl0aXRsZTtcbiAgfVxuICBcbiAgdGhpcy5fc2VydmljZS5vbmFmdGVyKCdzZXRRdWVyeVJlc3BvbnNlJyxmdW5jdGlvbigpe1xuICAgIHNlbGYuY3JlYXRlTGF5ZXJzRmVhdHVyZXNCb3hlcygpO1xuICB9KVxuICBtZXJnZSh0aGlzLCBvcHRpb25zKTtcbiAgXG4gIHRoaXMuY3JlYXRlTGF5ZXJzRmVhdHVyZXNCb3hlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsYXllcnNGZWF0dXJlc0JveGVzID0ge31cbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5fc2VydmljZS5zdGF0ZS5sYXllcnM7XG4gICAgXy5mb3JFYWNoKGxheWVycyxmdW5jdGlvbihsYXllcil7XG4gICAgICBfLmZvckVhY2gobGF5ZXIuZmVhdHVyZXMsZnVuY3Rpb24oZmVhdHVyZSl7XG4gICAgICAgIHZhciBib3hpZCA9IGxheWVyLmlkKydfJytmZWF0dXJlLmlkXG4gICAgICAgIGxheWVyc0ZlYXR1cmVzQm94ZXNbYm94aWRdID0ge1xuICAgICAgICAgIGNvbGxhcHNlZDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMuaW50ZXJuYWxDb21wb25lbnQubGF5ZXJzRmVhdHVyZXNCb3hlcyA9IGxheWVyc0ZlYXR1cmVzQm94ZXM7XG4gIH07XG59O1xuXG5pbmhlcml0KFF1ZXJ5UmVzdWx0c0NvbXBvbmVudCwgQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeVJlc3VsdHNDb21wb25lbnQ7XG5cbi8qXG5cbnZhciByZXNvbHZlZFZhbHVlID0gcmVxdWlyZSgnZzN3L2NvcmUvdXRpbHMnKS5yZXNvbHZlZFZhbHVlO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdnM3cvY29yZS91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3V0aWxzJykuYmFzZTtcbnZhciBHM1dPYmplY3QgPSByZXF1aXJlKCdnM3cvY29yZS9nM3dvYmplY3QnKTtcbnZhciBHVUkgPSByZXF1aXJlKCdnM3cvZ3VpL2d1aScpO1xudmFyIEFwaVNlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9hcGlzZXJ2aWNlJyk7XG52YXIgUHJvamVjdFNlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9wcm9qZWN0c2VydmljZScpLlByb2plY3RTZXJ2aWNlO1xudmFyIE1hcFNlcnZpY2UgPSByZXF1aXJlKCdnM3cvY29yZS9tYXBzZXJ2aWNlJyk7XG52YXIgUm91dGVyU2VydmljZSA9IHJlcXVpcmUoJ2czdy9jb3JlL3JvdXRlcicpO1xuXG52YXIgVHBsU2VydmljZSA9IHJlcXVpcmUoJy4vdHBsc2VydmljZScpO1xuXG52YXIgRmllbGRzID0ge307XG5GaWVsZHMuU1RSSU5HID0gJ3N0cmluZyc7XG5GaWVsZHMuSU5URUdFUiA9ICdpbnRlZ2VyJztcbkZpZWxkcy5GTE9BVCA9ICdmbG9hdCc7XG5cblxuRmllbGRzLnNpbXBsZUZpZWxkVHlwZXMgPSBbRmllbGRzLlNUUklORyxGaWVsZHMuSU5URUdFUixGaWVsZHMuRkxPQVRdO1xuRmllbGRzLkxJTksgPSAnbGluayc7XG5GaWVsZHMuUEhPVE8gPSAncGhvdG8nO1xuRmllbGRzLlBPSU5UTElOSyA9ICdwb2ludGxpbmsnO1xuRmllbGRzLlJPVVRFID0gJ3JvdXRlJztcblxudmFyIEZpZWxkc1J1bGVzID0ge1xuICB2YXJpYW50aToge1xuICAgIGlkOiBGaWVsZHMuUk9VVEVcbiAgfSxcbiAgcGFsaW5lOiB7XG4gICAgaWQ6IEZpZWxkcy5ST1VURVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRGaWVsZFR5cGUobGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpIHtcbiAgdmFyIGZpZWxkVHlwZUZyb21SdWxlcyA9IF8uZ2V0KEZpZWxkc1J1bGVzLGxheWVyLmlkKycuJythdHRyaWJ1dGUubmFtZSk7XG4gIGlmIChmaWVsZFR5cGVGcm9tUnVsZXMpIHtcbiAgICByZXR1cm4gZmllbGRUeXBlRnJvbVJ1bGVzO1xuICB9XG4gIFxuICB2YXIgVVJMUGF0dGVybiA9IC9eKGh0dHBzPzpcXC9cXC9bXlxcc10rKS9nO1xuICB2YXIgUGhvdG9QYXR0ZXJuID0gL1teXFxzXSsuKHBuZ3xqcGd8anBlZykkL2c7XG4gIHZhciB2YWx1ZSA9IGZlYXR1cmUuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0udG9TdHJpbmcoKTtcbiAgXG4gIHZhciBleHRlbnNpb24gPSB2YWx1ZS5zcGxpdCgnLicpLnBvcCgpO1xuICBpZiAodmFsdWUubWF0Y2goVVJMUGF0dGVybikpIHtcbiAgICByZXR1cm4gRmllbGRzLkxJTks7XG4gIH1cbiAgXG4gIGlmICh2YWx1ZS5tYXRjaChQaG90b1BhdHRlcm4pKSB7XG4gICAgcmV0dXJuIEZpZWxkcy5QSE9UTztcbiAgfVxuICBcbiAgaWYgKEZpZWxkcy5zaW1wbGVGaWVsZFR5cGVzLmluZGV4T2YoYXR0cmlidXRlLnR5cGUpID4gLTEpIHtcbiAgICByZXR1cm4gYXR0cmlidXRlLnR5cGU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzU2ltcGxlKGxheWVyLGZlYXR1cmUsYXR0cmlidXRlKSB7XG4gIHZhciBmaWVsZFR5cGUgPSBnZXRGaWVsZFR5cGUobGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpO1xuICByZXR1cm4gRmllbGRzLnNpbXBsZUZpZWxkVHlwZXMuaW5kZXhPZihmaWVsZFR5cGUpID4gLTE7XG59O1xuXG5mdW5jdGlvbiBpc0xpbmsobGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpIHtcbiAgdmFyIGZpZWxkVHlwZSA9IGdldEZpZWxkVHlwZShsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSk7XG4gIHJldHVybiBGaWVsZHMuTElOSyA9PSBmaWVsZFR5cGU7XG59O1xuXG5mdW5jdGlvbiBpc1Bob3RvKGxheWVyLGZlYXR1cmUsYXR0cmlidXRlKSB7XG4gIHZhciBmaWVsZFR5cGUgPSBnZXRGaWVsZFR5cGUobGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpO1xuICByZXR1cm4gRmllbGRzLlBIT1RPID09IGZpZWxkVHlwZTtcbn07XG5cbmZ1bmN0aW9uIGlzUm91dGUobGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpIHtcbiAgdmFyIGZpZWxkVHlwZSA9IGdldEZpZWxkVHlwZShsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSk7XG4gIHJldHVybiBGaWVsZHMuUk9VVEUgPT0gZmllbGRUeXBlO1xufTtcblxudmFyIFRwbFF1ZXJ5UmVzdWx0c0NvbXBvbmVudCA9IFZ1ZS5leHRlbmQoe1xuICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi90cGxxdWVyeXJlc3VsdHMuaHRtbCcpLFxuICBkYXRhOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICBsb3R0bzogbnVsbCxcbiAgICAgIGRheTogbnVsbCxcbiAgICAgIHRlcnJpdG9yaWFsX2RldGFpbHM6IHt9LFxuICAgICAgbGF5ZXJzOiBbXSxcbiAgICAgIGJhc2VQaG90b1VybDogJydcbiAgICB9XG4gIH0sXG4gIHJlYWR5OiBmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICB2YXIgdmlld2VyID0gbmV3IFZpZXdlcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHBsLW1hcHF1ZXJ5cmVzdWx0cycpLCB7XG4gICAgICAgIHVybDogJ2RhdGEtdXJsJyxcbiAgICAgICAgekluZGV4OiAxMDAwMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoKGVycil7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgbGF5ZXJIYXNGZWF0dXJlczogZnVuY3Rpb24obGF5ZXIpIHtcbiAgICAgIGlmIChsYXllci5mZWF0dXJlcykge1xuICAgICAgICByZXR1cm4gbGF5ZXIuZmVhdHVyZXMubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGNhbGNLbTogZnVuY3Rpb24obWV0ZXJzKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZDEwKChtZXRlcnMvMTAwMCksLTIpO1xuICAgIH0sXG4gICAgc2hvd0ZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgICAgIEdVSS5oaWRlTGlzdGluZygpO1xuICAgICAgTWFwU2VydmljZS5oaWdobGlnaHRHZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5LHt6b29tOiB0cnVlfSk7XG4gICAgfSxcbiAgICBoYXNHZW9tZXRyeTogZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgcmV0dXJuIF8uaXNOaWwoZmVhdHVyZS5nZXRHZW9tZXRyeSk7XG4gICAgfSxcbiAgICBpc1NpbXBsZTogZnVuY3Rpb24obGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiBpc1NpbXBsZShsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSk7XG4gICAgfSxcbiAgICBpc1Bob3RvOiBmdW5jdGlvbihsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIGlzUGhvdG8obGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpO1xuICAgIH0sXG4gICAgaXNMaW5rOiBmdW5jdGlvbihsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIGlzTGluayhsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSk7XG4gICAgfSxcbiAgICBpc1JvdXRlOiBmdW5jdGlvbihsYXllcixmZWF0dXJlLGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIGlzUm91dGUobGF5ZXIsZmVhdHVyZSxhdHRyaWJ1dGUpO1xuICAgIH0sXG4gICAgZ2V0UGhvdG9Vcmw6IGZ1bmN0aW9uKHBhdGgsdGh1bWIpIHtcbiAgICAgIHZhciBwYXRoc3BsaXQgPSBwYXRoLnNwbGl0KCcvJyk7XG4gICAgICB2YXIgcGhvdG9OYW1lID0gcGF0aHNwbGl0W3BhdGhzcGxpdC5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBwaG90b1NwbGl0ID0gcGhvdG9OYW1lLnNwbGl0KCdfJykuc2xpY2UoMSk7XG4gICAgICB2YXIgcHJlZml4ID0gJ2ZvdG8nO1xuICAgICAgaWYgKHRodW1iKSB7XG4gICAgICAgIHByZWZpeCA9ICd0aHVtYic7XG4gICAgICB9XG4gICAgICB2YXIgdGh1bWJOYW1lID0gcHJlZml4K1wiX1wiK3Bob3RvU3BsaXQuam9pbignXycpO1xuICAgICAgcmV0dXJuIHRoaXMuYmFzZVBob3RvVXJsICsgJy8nICsgdGh1bWJOYW1lO1xuICAgIH0sXG4gICAgZ2V0TGFiZWw6IGZ1bmN0aW9uKGxheWVyTmFtZSl7XG4gICAgICByZXR1cm4gdGhpcy5sYWJlbHNfdGVycml0b3Jpb1tsYXllck5hbWVdLmRlbm9taW5hemlvbmU7XG4gICAgfSxcbiAgICBnZXRPckJsYW5rOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfLmdldCh0aGlzLHBhdGgpO1xuICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSAhPSAnJykgPyB2YWx1ZSA6ICctJztcbiAgICB9LFxuICAgIGdvdG86IGZ1bmN0aW9uKGxheWVyLHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKGxheWVyLmlkKSB7XG4gICAgICAgIGNhc2UgJ3ZhcmlhbnRpJzpcbiAgICAgICAgICBHVUkuaGlkZUxpc3RpbmcoKTtcbiAgICAgICAgICB2YXIgbG90dG8gPSB0aGlzLmxvdHRvO1xuICAgICAgICAgIHZhciBkYXkgPSB0aGlzLmRheTtcbiAgICAgICAgICBSb3V0ZXJTZXJ2aWNlLmdvdG8oJ2Rhc2hib2FyZC9jb3JzZXZhcmlhbnRlLycrdmFsdWUrJz9kYXk9Jyt0aGlzLmRheSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BhbGluZSc6XG4gICAgICAgICAgR1VJLmhpZGVMaXN0aW5nKCk7XG4gICAgICAgICAgdmFyIGRheSA9IHRoaXMuZGF5O1xuICAgICAgICAgIFJvdXRlclNlcnZpY2UuZ290bygnZGFzaGJvYXJkL2Zlcm1hdGEvJyt2YWx1ZSsnP2RheT0nK2RheSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93VmFyaWFudGU6IGZ1bmN0aW9uKGlkX3ZhcmlhbnRlKSB7XG4gICAgICBHVUkuaGlkZUxpc3RpbmcoKTtcbiAgICAgIHZhciBsb3R0byA9IHRoaXMubG90dG87XG4gICAgICB2YXIgZGF5ID0gdGhpcy5kYXk7XG4gICAgICBSb3V0ZXJTZXJ2aWNlLmdvdG8oJ2Rhc2hib2FyZC92YXJpYW50aS8nK3RoaXMubG90dG8rJy8jIyMvJytpZF92YXJpYW50ZSsnP2RheT0nK3RoaXMuZGF5KTtcbiAgICB9LFxuICAgIHNob3dGZXJtYXRhOiBmdW5jdGlvbihpZF9mZXJtYXRhKSB7XG4gICAgICBHVUkuaGlkZUxpc3RpbmcoKTtcbiAgICAgIHZhciBkYXkgPSB0aGlzLmRheTtcbiAgICAgIFJvdXRlclNlcnZpY2UuZ290bygnZGFzaGJvYXJkL2Zlcm1hdGEvJytpZF9mZXJtYXRhKyc/ZGF5PScrZGF5KTtcbiAgICB9XG4gIH1cbn0pXG5cbnZhciBUcGxRdWVyeVJlc3VsdHNQYW5lbCA9IGZ1bmN0aW9uKGNvbnRleHQpe1xuICB0aGlzLnBhbmVsQ29tcG9uZW50ID0gbnVsbDtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgXG4gIHRoaXMub25TaG93ID0gZnVuY3Rpb24oY29udGFpbmVyKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHBhbmVsID0gdGhpcy5wYW5lbENvbXBvbmVudCA9IG5ldyBUcGxRdWVyeVJlc3VsdHNDb21wb25lbnQoKTtcbiAgICBwYW5lbC5sYXllcnMgPSBbXTtcbiAgICBwYW5lbC5sYWJlbHNfdGVycml0b3JpbyA9IG51bGw7XG4gICAgXG4gICAgdmFyIGxheWVyRGF0YSA9IF8ua2V5QnkoY29udGV4dC5sYXllcnNSZXN1bHRzLCdpZCcpO1xuICAgIFxuICAgIHZhciB0ZXJyaXRvcmlhbF9kZXRhaWxzID0ge307XG4gICAgdmFyIGxheWVyc19sYWJlbHNfdGVycml0b3JpbyA9IFsncHJvdmluY2UnLCdjb211bmknLCdiYWNpbmknLCdsb2NhbGl0YSddO1xuICAgIFxuICAgIF8uZm9yRWFjaChsYXllcnNfbGFiZWxzX3RlcnJpdG9yaW8sZnVuY3Rpb24obGF5ZXJOYW1lKXtcbiAgICAgIGlmIChsYXllckRhdGFbbGF5ZXJOYW1lXS5mZWF0dXJlcyAmJiBsYXllckRhdGFbbGF5ZXJOYW1lXS5mZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgdGVycml0b3JpYWxfZGV0YWlsc1tsYXllck5hbWVdID0gIGxheWVyRGF0YVtsYXllck5hbWVdLmZlYXR1cmVzWzBdLmF0dHJpYnV0ZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBwYW5lbC5sb3R0byA9IGNvbnRleHQubG90dG9JZDtcbiAgICBwYW5lbC5kYXkgPSBjb250ZXh0LmRheTtcbiAgICBwYW5lbC50ZXJyaXRvcmlhbF9kZXRhaWxzID0gdGVycml0b3JpYWxfZGV0YWlsczsgICBcbiAgICBcbiAgICB2YXIgbGF5ZXJzRnJvbUFwaSA9IFsndmFyaWFudGknXTtcbiAgICBcbiAgICB0aGlzLnF1ZXJ5VmFyaWFudGkodGhpcy5jb250ZXh0KVxuICAgIC50aGVuKGZ1bmN0aW9uKGZlYXR1cmVzKXtcbiAgICAgIHBhbmVsLmxheWVycy5wdXNoKHtcbiAgICAgICAgdGl0bGU6ICdWYXJpYW50aScsXG4gICAgICAgIGlkOiAndmFyaWFudGknLFxuICAgICAgICBhdHRyaWJ1dGVzOiBQcm9qZWN0U2VydmljZS5nZXRMYXllckJ5TmFtZSgndmFyaWFudGknKS5hdHRyaWJ1dGVzLFxuICAgICAgICBmZWF0dXJlczogZmVhdHVyZXNcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgXG4gICAgdmFyIGV4Y2x1ZGVkTGF5ZXJzID0gXy5jb25jYXQobGF5ZXJzX2xhYmVsc190ZXJyaXRvcmlvLGxheWVyc0Zyb21BcGkpO1xuICAgIHZhciBxdWVyeWFibGVMYXllcnMgPSBfLmZpbHRlcih0aGlzLmNvbnRleHQucXVlcnlhYmxlTGF5ZXJzLGZ1bmN0aW9uKGxheWVyKXtcbiAgICAgIHJldHVybiBleGNsdWRlZExheWVycy5pbmRleE9mKGxheWVyLm5hbWUpID09IC0xO1xuICAgIH0pO1xuICAgIFxuICAgIF8uZm9yRWFjaChxdWVyeWFibGVMYXllcnMsZnVuY3Rpb24ocXVlcnlhYmxlTGF5ZXIpe1xuICAgICAgICB2YXIgZmVhdHVyZXMgPSBzZWxmLnByb2Nlc3NSZXN1bHRzKHF1ZXJ5YWJsZUxheWVyLm5hbWUsc2VsZi5jb250ZXh0KVxuICAgICAgICBwYW5lbC5sYXllcnMucHVzaCh7XG4gICAgICAgICAgdGl0bGU6IHF1ZXJ5YWJsZUxheWVyLnRpdGxlLFxuICAgICAgICAgIGlkOiBxdWVyeWFibGVMYXllci5uYW1lLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHF1ZXJ5YWJsZUxheWVyLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgZmVhdHVyZXM6IGZlYXR1cmVzXG4gICAgICAgIH0pO1xuICAgIH0pXG5cbiAgICBwYW5lbC5iYXNlUGhvdG9VcmwgPSBjb250ZXh0LnVybHMuYmFzZVBob3RvVXJsO1xuICAgIFxuICAgIHBhbmVsLiRtb3VudCgpLiRhcHBlbmRUbyhjb250YWluZXIpO1xuICAgIFxuICAgIHJldHVybiByZXNvbHZlZFZhbHVlKHRydWUpO1xuICB9O1xuICBcbiAgdGhpcy5vbkNsb3NlID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnBhbmVsQ29tcG9uZW50LiRkZXN0cm95KHRydWUpO1xuICAgIHRoaXMucGFuZWxDb21wb25lbnQgPSBudWxsO1xuICAgIHJldHVybiByZXNvbHZlZFZhbHVlKHRydWUpO1xuICB9O1xuICBcbiAgdGhpcy5wcm9jZXNzUmVzdWx0cyA9IGZ1bmN0aW9uKGxheWVyTmFtZSxjb250ZXh0KSB7XG4gICAgdmFyIGxheWVyRGF0YSA9IF8ua2V5QnkoY29udGV4dC5sYXllcnNSZXN1bHRzLCdpZCcpO1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIGlmIChsYXllckRhdGFbbGF5ZXJOYW1lXSkge1xuICAgICAgZmVhdHVyZXMgPSBsYXllckRhdGFbbGF5ZXJOYW1lXS5mZWF0dXJlcztcbiAgICB9XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xuICB9O1xuICBcbiAgdGhpcy5xdWVyeVZhcmlhbnRpID0gZnVuY3Rpb24oY29udGV4dCl7XG4gICAgcmV0dXJuIEFwaVNlcnZpY2UuZ2V0KCdWQVJJQU5USVFVRVJZTUFQJyx7XG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgZGF5OiBjb250ZXh0LmRheSxcbiAgICAgICAgbG90dG86IGNvbnRleHQubG90dG9JZCxcbiAgICAgICAgY29vcmRzOiBjb250ZXh0LmNvb3JkaW5hdGVzLmpvaW4oJywnKSxcbiAgICAgICAgcmVzOiBjb250ZXh0LnJlc29sdXRpb25cbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgIHJldHVybiBfLm1hcChyZXNwb25zZSxmdW5jdGlvbihyb3dEYXRhKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzOiByb3dEYXRhXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbn1cbmluaGVyaXQoVHBsUXVlcnlSZXN1bHRzUGFuZWwsRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcGxRdWVyeVJlc3VsdHNQYW5lbDtcblxuKi9cbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgR1VJID0gcmVxdWlyZSgnZ3VpL2d1aScpO1xudmFyIFByb2plY3RzUmVnaXN0cnkgPSByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdHNyZWdpc3RyeScpO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG52YXIgU2VhcmNoUGFuZWwgPSByZXF1aXJlKCdndWkvc2VhcmNoL3Z1ZS9wYW5lbC9zZWFyY2hwYW5lbCcpO1xuXG5mdW5jdGlvbiBTZWFyY2hlc1NlcnZpY2UoKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAvL3RoaXMuX3NlYXJjaFBhbmVsU2VydmljZSA9IG5ldyBTZWFyY2hQYW5lbFNlcnZpY2UoKTtcbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oc2VhcmNoZXNPYmplY3QpIHtcbiAgICB2YXIgc2VhcmNoZXMgPSBzZWFyY2hlc09iamVjdCB8fCBQcm9qZWN0c1JlZ2lzdHJ5LmdldEN1cnJlbnRQcm9qZWN0KCkuc3RhdGUuc2VhcmNoO1xuICAgIHRoaXMuc3RhdGUuc2VhcmNoZXMgPSBzZWFyY2hlcztcbiAgfTtcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBzZWFyY2hlczogW11cbiAgfTtcblxuICB0aGlzLnNob3dTZWFyY2hQYW5lbCA9IGZ1bmN0aW9uKHBhbmVsQ29uZmlnKSB7XG4gICAgdmFyIHBhbmVsID0gIG5ldyBTZWFyY2hQYW5lbCgpOy8vIGNyZW8gcGFuZWxsbyBzZWFyY2hcbiAgICBwYW5lbC5pbml0KHBhbmVsQ29uZmlnKTsvL2luaXppYWxpenpvIHBhbm5lbGxvIHNlXG4gICAgR1VJLnNob3dQYW5lbChwYW5lbCk7XG4gICAgcmV0dXJuIHBhbmVsO1xuICB9O1xuXG4gIHRoaXMuY2xlYW5TZWFyY2hQYW5lbHMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0YXRlLnBhbmVscyA9IHt9O1xuICB9O1xuXG4gIHRoaXMuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICB9O1xuXG59O1xuXG4vLyBNYWtlIHRoZSBwdWJsaWMgc2VydmljZSBlbiBFdmVudCBFbWl0dGVyXG5pbmhlcml0KFNlYXJjaGVzU2VydmljZSwgRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWFyY2hlc1NlcnZpY2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiZzN3LXNlYXJjaC1wYW5lbCBmb3JtLWdyb3VwXFxcIj5cXG4gIDxoMz57e3RpdGxlfX08L2gzPlxcbiAgPGZvcm0gaWQ9XFxcImczdy1zZWFyY2gtZm9ybVxcXCI+XFxuICAgIDx0ZW1wbGF0ZSB2LWZvcj1cXFwiZm9ybWlucHV0IGluIGZvcm1pbnB1dHNcXFwiPlxcbiAgICAgIDxkaXYgdi1pZj1cXFwiZm9ybWlucHV0LmlucHV0LnR5cGUgPT0gJ251bWJlcmZpZWxkJ1xcXCIgY2xhc3M9XFxcImZvcm0tZ3JvdXAgbnVtZXJpY1xcXCI+XFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJ7eyBmb3JtaW5wdXQuaWQgfX0gXFxcIj57eyBmb3JtaW5wdXQubGFiZWwgfX08L2xhYmVsPlxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgdi1tb2RlbD1cXFwiZm9ybUlucHV0VmFsdWVzWyRpbmRleF0udmFsdWVcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJ7eyBmb3JtaW5wdXQuaWQgfX1cXFwiPlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgdi1pZj1cXFwiZm9ybWlucHV0LmlucHV0LnR5cGUgPT0gJ3RleHRmaWVsZCdcXFwiIGNsYXNzPVxcXCJmb3JtLWdyb3VwIHRleHRcXFwiPlxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwie3sgZm9ybWlucHV0LmlkIH19XFxcIj57eyBmb3JtaW5wdXQubGFiZWwgfX08L2xhYmVsPlxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIHYtbW9kZWw9XFxcImZvcm1JbnB1dFZhbHVlc1skaW5kZXhdLnZhbHVlXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiBpZD1cXFwie3sgZm9ybWlucHV0LmlkIH19XFxcIj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC90ZW1wbGF0ZT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IHB1bGwtcmlnaHRcXFwiIEBjbGljaz1cXFwiZG9TZWFyY2goJGV2ZW50KVxcXCIgZGF0YS1pMThuPVxcXCJkb3NlYXJjaFxcXCI+U2VhcmNoPC9idXR0b24+XFxuICAgIDwvZGl2PlxcbiAgPC9mb3JtPlxcbjwvZGl2PlxcblwiO1xuIiwidmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBsb2NhbGl6ZSA9IHJlcXVpcmUoJ2NvcmUvaTE4bi9pMThuLnNlcnZpY2UnKS50O1xudmFyIHJlc29sdmUgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVzb2x2ZTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG52YXIgUXVlcnlTZXJ2aWNlID0gcmVxdWlyZSgnY29yZS9xdWVyeS9xdWVyeXNlcnZpY2UnKTtcbnZhciBMaXN0UGFuZWwgPSByZXF1aXJlKCdndWkvbGlzdHBhbmVsJykuTGlzdFBhbmVsO1xudmFyIFBhbmVsID0gcmVxdWlyZSgnZ3VpL3BhbmVsJyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcHJvamVjdC9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG5cbi8vY29tcG9uZW50ZSB2dWUgcGFubmVsbG8gc2VhcmNoXG52YXIgU2VhcmNoUGFuZWxDb21wb25ldCA9IFZ1ZS5leHRlbmQoe1xuICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zZWFyY2hwYW5lbC5odG1sJyksXG4gIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogXCJcIixcbiAgICAgIGZvcm1pbnB1dHM6IFtdLFxuICAgICAgZmlsdGVyT2JqZWN0OiB7fSxcbiAgICAgIGZvcm1JbnB1dFZhbHVlcyA6IFtdXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZG9TZWFyY2g6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy9hbCBtb21lbnRvIG1vbHRvIGZhcnJhZ2dpbm9zbyBtYSBkYSByaXZlZGVyZVxuICAgICAgLy9wZXIgYXNzb2NpYXppb25lIHZhbG9yZSBpbnB1dFxuICAgICAgdmFyIHNob3dRdWVyeVJlc3VsdHMgPSBHVUkuc2hvd1Jlc3VsdHNGYWN0b3J5KCdxdWVyeScpO1xuICAgICAgdmFyIHF1ZXJ5UmVzdWx0c1BhbmVsID0gc2hvd1F1ZXJ5UmVzdWx0cyhzZWxmLnRpdGxlKTtcbiAgICAgIHRoaXMuZmlsdGVyT2JqZWN0ID0gdGhpcy5maWxsRmlsdGVySW5wdXRzV2l0aFZhbHVlcyh0aGlzLmZpbHRlck9iamVjdCwgdGhpcy5mb3JtSW5wdXRWYWx1ZXMpO1xuICAgICAgUXVlcnlTZXJ2aWNlLnF1ZXJ5QnlGaWx0ZXIodGhpcy5maWx0ZXJPYmplY3QpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXN1bHRzKXtcbiAgICAgICAgcXVlcnlSZXN1bHRzUGFuZWwuc2V0UXVlcnlSZXNwb25zZShyZXN1bHRzKTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KTtcblxuLy9jb3N0cnV0dG9yZSBkZWwgcGFubmVsbG8gZSBkZWwgc3VvIGNvbXBvbmVudGUgdnVlXG5mdW5jdGlvbiBTZWFyY2hQYW5lbCgpIHtcbiAgc2VsZiA9IHRoaXM7XG4gIHRoaXMuY29uZmlnID0ge307XG4gIHRoaXMuZmlsdGVyID0ge307XG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnF1ZXJ5bGF5ZXJpZCA9IG51bGw7XG4gIHRoaXMuaW50ZXJuYWxQYW5lbCA9IG5ldyBTZWFyY2hQYW5lbENvbXBvbmV0KCk7XG4gIC8vZnVuemlvbmUgaW5pemlhbGl6emF6aW9uZVxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbmZpZy5uYW1lIHx8IHRoaXMubmFtZTtcbiAgICB0aGlzLmlkID0gdGhpcy5jb25maWcuaWQgfHwgdGhpcy5pZDtcbiAgICB0aGlzLmZpbHRlciA9IHRoaXMuY29uZmlnLm9wdGlvbnMuZmlsdGVyIHx8IHRoaXMuZmlsdGVyO1xuICAgIHZhciBxdWVyeUxheWVySWQgPSB0aGlzLmNvbmZpZy5vcHRpb25zLnF1ZXJ5bGF5ZXJpZCB8fCB0aGlzLnF1ZXJ5bGF5ZXJpZDtcbiAgICB0aGlzLnF1ZXJ5TGF5ZXIgPSBQcm9qZWN0c1JlZ2lzdHJ5LmdldEN1cnJlbnRQcm9qZWN0KCkuZ2V0TGF5ZXJCeUlkKHF1ZXJ5TGF5ZXJJZCk7XG4gICAgLy92YWRvIGEgcmllbXBpcmUgZ2xpIGlucHV0IGRlbCBmb3JtIGRlbCBwYW5uZWxsb1xuICAgIHRoaXMuZmlsbElucHV0c0Zvcm1Gcm9tRmlsdGVyKCk7XG4gICAgLy9jcmVvIGUgYXNzZWdubyBsJ29nZ2V0dG8gZmlsdHJvXG4gICAgdmFyIGZpbHRlck9iakZyb21Db25maWcgPSBRdWVyeVNlcnZpY2UuY3JlYXRlUXVlcnlGaWx0ZXJGcm9tQ29uZmlnKHRoaXMuZmlsdGVyKTtcbiAgICAvL2FsbGEgZmluZSBjcmVvIGwnZ2dldHRvIGZpbmFsZSBkZWwgZmlsdHJvIGRhIHBhc3NhcmUgcG9pIGFsIHByb3ZpZGVyIFFHSVNXTVMgbyBXRlMgZXRjLi4gY2hlIGNvbnRpZW5lIHNpYVxuICAgIC8vaWwgZmlsdHJvIGNoZSB1cmwsIGlsIG5vbWUgZGVsIGxheWVyIGlsIHRpcG8gZGkgc2VydmVyIGV0YyAuLlxuICAgIHRoaXMuaW50ZXJuYWxQYW5lbC5maWx0ZXJPYmplY3QgPSBRdWVyeVNlcnZpY2UuY3JlYXRlUXVlcnlGaWx0ZXJPYmplY3QodGhpcy5xdWVyeUxheWVyLCBmaWx0ZXJPYmpGcm9tQ29uZmlnKTtcbiAgICAvL3NvbHV6aW9uZSBtb21lbnRhbmVhIGFzc2Vnbm8gIGxhIGZ1bnppb25lIGRlbCBTZWFyY2hQYW5sZSBtYSBjb21lIHBhdHRlcm4gw6ggc2JhZ2xpYXRvXG4gICAgLy92b3JyZWkgZGVsZWdhcmxvIGEgU2VhcmNoZXNTZXJ2aWNlIG1hIGxvIHN0ZXNzbyBzdGFuemlhIHF1ZXN0byAobG9vcCkgY29tZSB1c2Npcm5lPz8/XG4gICAgLy9jcmVhcmUgdW4gc2VhcmNocGFuZWxzZXJ2aWNlP1xuICAgIHRoaXMuaW50ZXJuYWxQYW5lbC5maWxsRmlsdGVySW5wdXRzV2l0aFZhbHVlcyA9IHRoaXMuZmlsbEZpbHRlcklucHV0c1dpdGhWYWx1ZXM7XG4gICAgdGhpcy5pbnRlcm5hbFBhbmVsLnRpdGxlID0gdGhpcy5uYW1lO1xuICB9O1xuICAvL2Z1bnppb25lIGNoZSBwb3BvbGEgZ2xpIGlucHV0cyBjaGUgY2kgc2FyYW5ubyBuZWwgZm9ybSBkZWwgcGFubmVsbG8gcmljZXJjYVxuICAvL29sdHJlIGNvc3RydWlyZSB1biBvZ2dldHRvIGNoZSBsZWdoZXLDoCBpIHZhbG9yaSBkZWdsaSBpbnB1dHMgZGVsIGZvcm0gY29uIGdsaSBvZ2dldHRpXG4gIC8vJ29wZXJhemlvbmFsaScgZGVsIGZpbHRyb1xuICB0aGlzLmZpbGxJbnB1dHNGb3JtRnJvbUZpbHRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZCA9IDA7XG4gICAgdmFyIGZvcm1WYWx1ZTtcbiAgICBfLmZvckVhY2godGhpcy5maWx0ZXIsZnVuY3Rpb24odixrLG9iaikge1xuICAgICAgXy5mb3JFYWNoKHYsIGZ1bmN0aW9uKGlucHV0KXtcbiAgICAgICAgLy9zZW1wcmUgbnVvdm8gb2dnZXR0b1xuICAgICAgICBmb3JtVmFsdWUgPSB7fTtcbiAgICAgICAgLy9pbnNlcmlzY28gbCdpZCBhbGwnaW5wdXRcbiAgICAgICAgaW5wdXQuaWQgPSBpZFxuICAgICAgICAvL2FnZ2l1bmdvIGlsIHRpcG8gYWwgdmFsb3JlIHBlciBmYXJlIGNvbnZlcnNpb25lIGRhIHN0cmluZ2EgYSB0aXBvIGlucHV0XG4gICAgICAgIGZvcm1WYWx1ZS50eXBlID0gaW5wdXQuaW5wdXQudHlwZTtcbiAgICAgICAgLy8vL1RFTVBPUkFORU8gISEhIERFVk8gUFJFTkRFUkUgSUwgVkVSTyBWQUxPUkUgREkgREVGQVVMVFxuICAgICAgICBmb3JtVmFsdWUudmFsdWUgPSBudWxsO1xuICAgICAgICAvL3BvcG9sbyBnbGkgaW5wdXRzOlxuICAgICAgICAvLyB2YWxvcmlcbiAgICAgICAgc2VsZi5pbnRlcm5hbFBhbmVsLmZvcm1JbnB1dFZhbHVlcy5wdXNoKGZvcm1WYWx1ZSk7XG4gICAgICAgIC8vaW5wdXRcbiAgICAgICAgc2VsZi5pbnRlcm5hbFBhbmVsLmZvcm1pbnB1dHMucHVzaChpbnB1dCk7XG4gICAgICAgIGlkKz0xO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIC8vZnVuemlvbmUgY2hlIGFzc29jaWEgaSB2YWxvcmkgZGVsbCdpbnB1dHMgZm9ybSBhbCByZWxhdGl2byBvZ2dldHRvIFwib3BlcmF6aW9uZGUgZGVsIGZpbHRyb1wiXG4gIHRoaXMuZmlsbEZpbHRlcklucHV0c1dpdGhWYWx1ZXMgPSBmdW5jdGlvbihmaWx0ZXJPYmplY3QsIGZvcm1JbnB1dFZhbHVlcywgZ2xvYmFsSW5kZXgpIHtcbiAgICAvL2Z1bnppb25lIGNvbnZlcnNpb25lIGRhIHZhbG9yZSByZXN0aXR1aXRvIGRhbGwnaW5wdXQgKHNlbXByZSBzdHJpbmdhKSBhbCB2ZXJvIHRpcG8gZGkgdmFsb3JlXG4gICAgZnVuY3Rpb24gY29udmVydElucHV0VmFsdWVUb0lucHV0VHlwZSh0eXBlLCB2YWx1ZSkge1xuICAgICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnbnVtYmVyZmllbGQnOlxuICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvL2NpY2xvIHN1bGwnb2dnZXR0byBmaWx0cm8gY2hlIGhhIGNvbWUgY2hpYXZlIHJvb3QgJ0FORCcgbyAnT1InXG4gICAgXy5mb3JFYWNoKGZpbHRlck9iamVjdC5maWx0ZXJPYmplY3QsIGZ1bmN0aW9uKHYsaykge1xuICAgICAgLy9zY29ycm8gYXR0cmF2ZXJzbyBsJ2FycmF5IGRpIGVsZW1lbnRpIG9wZXJhemlvbmFsaSBkYSBjb25mcm9udGFyZVxuICAgICAgXy5mb3JFYWNoKHYsIGZ1bmN0aW9uKGlucHV0LCBpZHgpIHtcbiAgICAgICAgLy9lbGVtZW50byBvcGVyYXppb25hbGUgeyc9Jzp7fX1cbiAgICAgICAgXy5mb3JFYWNoKGlucHV0LCBmdW5jdGlvbih2LCBrLCBvYmopIHtcbiAgICAgICAgICAvL3ZhZG8gYSBsZWdnZXJlIGwnb2dnZXR0byBhdHRyaWJ1dG9cbiAgICAgICAgICBpZiAoXy5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgICAvL3JpY2hpYW1hIGxhIGZ1bnppb25lIHJpY29yc2l2YW1lbnRlIC4uIGFuZHLDoCBiZW5lID9cbiAgICAgICAgICAgIGZpbGxGaWx0ZXJJbnB1dHNXaXRoVmFsdWVzKGlucHV0LCBmb3JtSW5wdXRWYWx1ZXMsIGlkeCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uZm9yRWFjaCh2LCBmdW5jdGlvbih2LCBrLCBvYmopIHtcbiAgICAgICAgICAgICAgLy9jb25zaWRlcm8gbCdpbmRleCBnbG9iYWxlIGluIG1vZG8gY2hlIGlucHV0cyBkaSBvcGVyYXppb25pIGJvb2xlYW5lIGludGVybmVcbiAgICAgICAgICAgICAgLy92ZW5nb25vIGNvbnNpZGVyYXRlXG4gICAgICAgICAgICAgIGluZGV4ID0gKGdsb2JhbEluZGV4KSA/IGdsb2JhbEluZGV4ICsgaWR4IDogaWR4O1xuICAgICAgICAgICAgICBvYmpba10gPSBjb252ZXJ0SW5wdXRWYWx1ZVRvSW5wdXRUeXBlKGZvcm1JbnB1dFZhbHVlc1tpbmRleF0udHlwZSwgZm9ybUlucHV0VmFsdWVzW2luZGV4XS52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJPYmplY3Q7XG4gIH07XG59O1xuXG5pbmhlcml0KFNlYXJjaFBhbmVsLCBQYW5lbCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNlYXJjaFBhbmVsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgaWQ9XFxcImczdy1zZWFyY2hcXFwiIGNsYXNzPVxcXCJnM3ctc2VhcmNoIGczdy10b29sc1xcXCI+XFxuICA8dWw+XFxuICAgIDxsaSB2LWZvcj1cXFwic2VhcmNoIGluIHByb2plY3Quc2VhcmNoXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzZWFyY2gtaGVhZGVyIHRvb2wtaGVhZGVyXFxcIiBAY2xpY2s9XFxcInNob3dTZWFyY2hQYW5lbChzZWFyY2gpXFxcIj5cXG4gICAgICAgIDxzcGFuIHN0eWxlPVxcXCJcXFwiPnt7IHNlYXJjaC5uYW1lIH19PC9zcGFuPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2xpPlxcbiAgPC91bD5cXG48L2Rpdj5cXG5cIjtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIG1lcmdlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLm1lcmdlO1xudmFyIHQgPSByZXF1aXJlKCdjb3JlL2kxOG4vaTE4bi5zZXJ2aWNlJykudDtcbnZhciByZXNvbHZlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLnJlc29sdmU7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnZ3VpL3Z1ZS9jb21wb25lbnQnKTtcbnZhciBHVUkgPSByZXF1aXJlKCdndWkvZ3VpJyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcHJvamVjdC9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG52YXIgRzNXT2JqZWN0ID0gcmVxdWlyZSgnY29yZS9nM3dvYmplY3QnKTtcbnZhciBTZWFyY2hQYW5lbCA9IHJlcXVpcmUoJ2d1aS9zZWFyY2gvdnVlL3BhbmVsL3NlYXJjaHBhbmVsJyk7XG52YXIgUHJvamVjdHNSZWdpc3RyeSA9IHJlcXVpcmUoJ2NvcmUvcHJvamVjdC9wcm9qZWN0c3JlZ2lzdHJ5Jyk7XG52YXIgU2VhcmNoZXNTZXJ2aWNlID0gcmVxdWlyZSgnZ3VpL3NlYXJjaC9zZWFyY2hlc3NlcnZpY2UnKTtcblxudmFyIHZ1ZUNvbXBvbmVudE9wdGlvbnMgPSB7XG4gICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zZWFyY2guaHRtbCcpLFxuICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgXHRyZXR1cm4ge1xuICAgIFx0ICBwcm9qZWN0OiBQcm9qZWN0c1JlZ2lzdHJ5LmdldEN1cnJlbnRQcm9qZWN0KCkuc3RhdGVcbiAgICBcdH07XG4gICB9LFxuICAgbWV0aG9kczoge1xuICAgIHNob3dTZWFyY2hQYW5lbDogZnVuY3Rpb24oc2VhcmNoKSB7XG4gICAgICAgIHZhciBwYW5lbCA9IHRoaXMuJG9wdGlvbnMuc2VhcmNoZXNTZXJ2aWNlLnNob3dTZWFyY2hQYW5lbChzZWFyY2gpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gc2UgbG8gdm9nbGlvIGlzdGFuemlhcmUgbWFudWFsbWVudGVcbnZhciBJbnRlcm5hbENvbXBvbmVudCA9IFZ1ZS5leHRlbmQodnVlQ29tcG9uZW50T3B0aW9ucyk7XG4vLyBzZSBsbyB2b2dsaW8gdXNhcmUgY29tZSBjb21wb25lbnRlIGNvbWUgZWxlbWVudG8gaHRtbFxuLy9WdWUuY29tcG9uZW50KCdnM3ctc2VhcmNoJyx2dWVDb21wb25lbnRPcHRpb25zKTtcblxuLyogQ09NUE9ORU5USSBGSUdMSSAqL1xuLyogRklORSBDT01QT05FTlRJIEZJR0xJICovXG5cbi8qIElOVEVSRkFDQ0lBIFBVQkJMSUNBICovXG5mdW5jdGlvbiBTZWFyY2hDb21wb25lbnQob3B0aW9ucyl7XG4gIGJhc2UodGhpcyxvcHRpb25zKTtcbiAgdGhpcy5pZCA9IFwic2VhcmNoLWNvbXBvbmVudFwiO1xuICB0aGlzLnRpdGxlID0gXCJzZWFyY2hcIjtcbiAgdGhpcy5fc2VydmljZSA9IG5ldyBTZWFyY2hlc1NlcnZpY2UoKTtcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudCA9IG5ldyBJbnRlcm5hbENvbXBvbmVudCh7XG4gICAgc2VhcmNoZXNTZXJ2aWNlOiB0aGlzLl9zZXJ2aWNlXG4gIH0pO1xuICB0aGlzLnN0YXRlLnZpc2libGUgPSBQcm9qZWN0c1JlZ2lzdHJ5LmdldEN1cnJlbnRQcm9qZWN0KCkuc3RhdGUuc2VhcmNoLmxlbmd0aCA+IDA7XG4gIG1lcmdlKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLmluaXRTZXJ2aWNlID0gZnVuY3Rpb24oKSB7XG4gICAgLy9pbml6aWFsaXp6byBpbCBzZXJ2aXppb1xuICAgIHRoaXMuX3NlcnZpY2UuaW5pdCgpO1xuICB9O1xufTtcblxuaW5oZXJpdChTZWFyY2hDb21wb25lbnQsIENvbXBvbmVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNlYXJjaENvbXBvbmVudDtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIEczV09iamVjdCA9IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIFRvb2xzU2VydmljZSgpe1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgdGhpcy5fYWN0aW9ucyA9IHt9O1xuICB0aGlzLnN0YXRlID0ge1xuICAgIHRvb2xzR3JvdXBzOiBbXVxuICB9O1xuICBcbiAgdGhpcy5zZXR0ZXJzID0ge1xuICAgIC8vaW5zZXJpdGEgcG9zc2liaWxpdMOgIGRpIGRhcmUgb3JkaW5lIGFsIHBsdWdpbiBkaSB2aXN1YWxpenphemlvbmVcbiAgICBhZGRUb29sR3JvdXA6IGZ1bmN0aW9uKG9yZGVyLCBncm91cCkge1xuICAgICAgLy9jb25zb2xlLmxvZyhvcmRlcik7XG4gICAgICBzZWxmLnN0YXRlLnRvb2xzR3JvdXBzLnNwbGljZShvcmRlciwgMCwgZ3JvdXApO1xuICAgICAgLy9jb25zb2xlLmxvZyhzZWxmLnN0YXRlLnRvb2xzR3JvdXBzKTtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLmFkZFRvb2xzID0gZnVuY3Rpb24ob3JkZXIsIGdyb3VwTmFtZSwgdG9vbHMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGdyb3VwID0gdGhpcy5fZ2V0VG9vbHNHcm91cChncm91cE5hbWUpO1xuICAgIGlmICghZ3JvdXApIHtcbiAgICAgIGdyb3VwID0ge1xuICAgICAgICBuYW1lOiBncm91cE5hbWUsXG4gICAgICAgIHRvb2xzOiBbXVxuICAgICAgfTtcbiAgICAgIHRoaXMuYWRkVG9vbEdyb3VwKG9yZGVyLCBncm91cCk7XG4gICAgfVxuICAgIF8uZm9yRWFjaCh0b29scywgZnVuY3Rpb24odG9vbCl7XG4gICAgICBncm91cC50b29scy5wdXNoKHRvb2wpO1xuICAgICAgc2VsZi5fYWRkQWN0aW9uKHRvb2wpO1xuICAgIH0pO1xuICB9O1xuICBcbiAgdGhpcy5yZW1vdmVUb29sID0gZnVuY3Rpb24odG9vbElkKSB7XG4gIH07XG4gIFxuICB0aGlzLmZpcmVBY3Rpb24gPSBmdW5jdGlvbihhY3Rpb25JZCl7XG4gICAgdmFyIGFjdGlvbiA9IHRoaXMuX2FjdGlvbnNbYWN0aW9uSWRdO1xuICAgIGFjdGlvbigpO1xuICB9O1xuICBcbiAgdGhpcy5fZ2V0VG9vbHNHcm91cCA9IGZ1bmN0aW9uKGdyb3VwTmFtZSkge1xuICAgIHZhciBncm91cCA9IG51bGw7XG4gICAgXy5mb3JFYWNoKHRoaXMuc3RhdGUudG9vbHNHcm91cHMsZnVuY3Rpb24oX2dyb3VwKXtcbiAgICAgIGlmIChfZ3JvdXAubmFtZSA9PSBncm91cE5hbWUpIHtcbiAgICAgICAgZ3JvdXAgPSBfZ3JvdXA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdyb3VwO1xuICB9O1xuICBcbiAgdGhpcy5fYWRkQWN0aW9uID0gZnVuY3Rpb24odG9vbCkge1xuICAgIHZhciBhY3Rpb25JZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApKzE7XG4gICAgdG9vbC5hY3Rpb25JZCA9IGFjdGlvbklkO1xuICAgIHRoaXMuX2FjdGlvbnNbYWN0aW9uSWRdID0gdG9vbC5hY3Rpb247XG4gIH07XG4gIFxuICBiYXNlKHRoaXMpO1xufVxuXG5pbmhlcml0KFRvb2xzU2VydmljZSwgRzNXT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sc1NlcnZpY2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiZzN3LXRvb2xzXFxcIj5cXG4gIDx1bD5cXG4gICAgPGxpIHYtZm9yPVxcXCJncm91cCBpbiBzdGF0ZS50b29sc0dyb3Vwc1xcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwidG9vbC1oZWFkZXJcXFwiPlxcbiAgICAgICAgPHNwYW4gc3R5bGU9XFxcIlxcXCI+e3sgZ3JvdXAubmFtZSB9fTwvc3Bhbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGlkPVxcXCJ7eyBncm91cC5uYW1lIH19LXRvb2xzXFxcIiBjbGFzcz1cXFwidG9vbC1ib3hcXFwiPlxcbiAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVxcXCJ0b29sIGluIGdyb3VwLnRvb2xzXFxcIj5cXG4gICAgICAgICAgPGRpdiB2LWlmPVxcXCJ0b29sLnR5cGUgPT0gJ2NoZWNrYm94JyBcXFwiIGNsYXNzPVxcXCJjaGVja2JveCB0b29sXFxcIj5cXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBAY2xpY2s9XFxcImZpcmVBY3Rpb24odG9vbC5hY3Rpb25JZClcXFwiIHZhbHVlPVxcXCJcXFwiPnt7IHRvb2wubmFtZSB9fTwvbGFiZWw+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0b29sXFxcIiB2LWVsc2U+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY29nXFxcIj48L2k+XFxuICAgICAgICAgICAgPHNwYW4gQGNsaWNrPVxcXCJmaXJlQWN0aW9uKHRvb2wuYWN0aW9uSWQpXFxcIj57eyB0b29sLm5hbWUgfX08L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9saT5cXG4gIDwvdWw+XFxuPC9kaXY+XFxuXCI7XG4iLCJ2YXIgdCA9IHJlcXVpcmUoJ2NvcmUvaTE4bi9pMThuLnNlcnZpY2UnKS50O1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykuaW5oZXJpdDtcbnZhciBiYXNlID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmJhc2U7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykubWVyZ2U7XG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnZ3VpL3Z1ZS9jb21wb25lbnQnKTtcbnZhciBUb29sc1NlcnZpY2UgPSByZXF1aXJlKCdndWkvdG9vbHMvdG9vbHNzZXJ2aWNlJyk7XG5cbnZhciBJbnRlcm5hbENvbXBvbmVudCA9IFZ1ZS5leHRlbmQoe1xuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3Rvb2xzLmh0bWwnKSxcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlOiBudWxsXG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBmaXJlQWN0aW9uOiBmdW5jdGlvbihhY3Rpb25pZCl7XG4gICAgICAgIHRoaXMuJG9wdGlvbnMudG9vbHNTZXJ2aWNlLmZpcmVBY3Rpb24oYWN0aW9uaWQpO1xuICAgICAgfVxuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBUb29sc0NvbXBvbmVudChvcHRpb25zKSB7XG5cbiAgYmFzZSh0aGlzLG9wdGlvbnMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX3NlcnZpY2UgPSBuZXcgVG9vbHNTZXJ2aWNlKCk7XG4gIHRoaXMuaWQgPSBcInRvb2xzLWNvbXBvbmVudFwiO1xuICB0aGlzLnRpdGxlID0gXCJ0b29sc1wiO1xuICB0aGlzLnN0YXRlLnZpc2libGUgPSBmYWxzZTtcbiAgdGhpcy5fc2VydmljZS5vbmFmdGVyKCdhZGRUb29sR3JvdXAnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLnN0YXRlLnZpc2libGUgPSBzZWxmLl9zZXJ2aWNlLnN0YXRlLnRvb2xzR3JvdXBzLmxlbmd0aCA+IDA7XG4gIH0pO1xuICBtZXJnZSh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudCA9IG5ldyBJbnRlcm5hbENvbXBvbmVudCh7XG4gICAgdG9vbHNTZXJ2aWNlOiB0aGlzLl9zZXJ2aWNlXG4gIH0pO1xuICAvL3Nvc3RpdHVpc2NvIGxvIHN0YXRlIGRlbCBzZXJ2aXppbyBhbGxvIHN0YXRlIGRlbCBjb21wb25lbnRlIHZ1ZSBpbnRlcm5vXG4gIHRoaXMuaW50ZXJuYWxDb21wb25lbnQuc3RhdGUgPSB0aGlzLl9zZXJ2aWNlLnN0YXRlXG59XG5cbmluaGVyaXQoVG9vbHNDb21wb25lbnQsIENvbXBvbmVudCk7XG5cbnZhciBwcm90byA9IFRvb2xzQ29tcG9uZW50LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sc0NvbXBvbmVudDtcbiIsInZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLmluaGVyaXQ7XG52YXIgYmFzZSA9IHJlcXVpcmUoJ2NvcmUvdXRpbHMvdXRpbHMnKS5iYXNlO1xudmFyIHJlc29sdmUgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVzb2x2ZTtcbnZhciByZWplY3QgPSByZXF1aXJlKCdjb3JlL3V0aWxzL3V0aWxzJykucmVqZWN0O1xudmFyIEJhc2VDb21wb25lbnQgPSByZXF1aXJlKCdndWkvY29tcG9uZW50Jyk7XG5cbnZhciBDb21wb25lbnQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGJhc2UodGhpcyxvcHRpb25zKTtcbn07XG5cbmluaGVyaXQoQ29tcG9uZW50LCBCYXNlQ29tcG9uZW50KTtcblxudmFyIHByb3RvID0gQ29tcG9uZW50LnByb3RvdHlwZTtcblxuLy8gdmllbmUgcmljaGlhbWF0byBkYWxsYSB0b29sYmFyIHF1YW5kbyBpbCBwbHVnaW4gY2hpZWRlIGRpIG1vc3RyYXJlIHVuIHByb3ByaW8gcGFubmVsbG8gbmVsbGEgR1VJIChHVUkuc2hvd1BhbmVsKVxucHJvdG8ubW91bnQgPSBmdW5jdGlvbihwYXJlbnQsYXBwZW5kKSB7XG4gIGlmICghdGhpcy5pbnRlcm5hbENvbXBvbmVudCkge1xuICAgIHRoaXMuc2V0SW50ZXJuYWxDb21wb25lbnQoKTtcbiAgfTtcbiAgaWYoYXBwZW5kKSB7XG4gICAgdGhpcy5pbnRlcm5hbENvbXBvbmVudC4kbW91bnQoKS4kYXBwZW5kVG8ocGFyZW50KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLmludGVybmFsQ29tcG9uZW50LiRtb3VudChwYXJlbnQpO1xuICB9XG4gICQocGFyZW50KS5sb2NhbGl6ZSgpO1xuICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbn07XG5cbi8vIHJpY2hpYW1hdG8gcXVhbmRvIGxhIEdVSSBjaGllZGUgZGkgY2hpdWRlcmUgaWwgcGFubmVsbG8uIFNlIHJpdG9ybmEgZmFsc2UgaWwgcGFubmVsbG8gbm9uIHZpZW5lIGNoaXVzb1xucHJvdG8udW5tb3VudCA9IGZ1bmN0aW9uKCkge1xuICAvLyBpbCBwcm9ibGVtYSBjaGUgZGlzdHJ1Z2dlcmVcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudC4kZGVzdHJveSh0cnVlKTtcbiAgdGhpcy5pbnRlcm5hbENvbXBvbmVudCA9IG51bGw7XG4gIHJldHVybiByZXNvbHZlKCk7XG59O1xuXG5wcm90by5oaWRlID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKHRoaXMuaW50ZXJuYWxDb21wb25lbnQuJGVsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50O1xuIiwidmFyIHQgPSByZXF1aXJlKCdjb3JlL2kxOG4vaTE4bi5zZXJ2aWNlJykudDtcblxuVnVlLmRpcmVjdGl2ZShcImRpc2FibGVkXCIsZnVuY3Rpb24odmFsdWUpe1xuICAgIGlmICh2YWx1ZSl7XG4gICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxuKTtcblxuVnVlLmRpcmVjdGl2ZShcImNoZWNrZWRcIixmdW5jdGlvbih2YWx1ZSl7XG4gICAgaWYgKHZhbHVlKXtcbiAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdjaGVja2VkJywnY2hlY2tlZCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKCdjaGVja2VkJyk7XG4gICAgfVxuICB9XG4pO1xuXG5WdWUuZGlyZWN0aXZlKFwic2VsZWN0ZWQtZmlyc3RcIixmdW5jdGlvbih2YWx1ZSl7XG4gICAgaWYgKHZhbHVlPT0wKXtcbiAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsJycpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuICAgIH1cbiAgfVxuKTtcblxuVnVlLmRpcmVjdGl2ZShcInRcIixmdW5jdGlvbih0ZXh0KXtcbiAgcmV0dXJuIHQodGV4dCk7XG59KVxuIiwidmFyIGczdyA9IGczdyB8fCB7fTtcblxuZzN3LmNvcmUgPSB7XG4gICBHM1dPYmplY3Q6IHJlcXVpcmUoJ2NvcmUvZzN3b2JqZWN0JyksXG4gICB1dGlsczogcmVxdWlyZSgnY29yZS91dGlscy91dGlscycpLFxuICAgQXBwbGljYXRpb25TZXJ2aWNlOiByZXF1aXJlKCdjb3JlL2FwcGxpY2F0aW9uc2VydmljZScpLFxuICAgQXBpU2VydmljZTogcmVxdWlyZSgnY29yZS9hcGlzZXJ2aWNlJyksXG4gICBSb3V0ZXI6IHJlcXVpcmUoJ2NvcmUvcm91dGVyJyksXG4gICBQcm9qZWN0c1JlZ2lzdHJ5OiByZXF1aXJlKCdjb3JlL3Byb2plY3QvcHJvamVjdHNyZWdpc3RyeScpLFxuICAgUHJvamVjdDogcmVxdWlyZSgnY29yZS9wcm9qZWN0L3Byb2plY3QnKSxcbiAgIFF1ZXJ5U2VydmljZTogcmVxdWlyZSgnY29yZS9xdWVyeS9xdWVyeXNlcnZpY2UnKSxcbiAgIE1hcExheWVyOiByZXF1aXJlKCdjb3JlL21hcC9sYXllci9tYXBsYXllcicpLFxuICAgVmVjdG9yTGF5ZXI6IHJlcXVpcmUoJ2NvcmUvbWFwL2xheWVyL3ZlY3RvcmxheWVyJyksXG4gICBXbXNMYXllcjogcmVxdWlyZSgnY29yZS9tYXAvbGF5ZXIvd21zbGF5ZXInKSxcbiAgIFZlY3RvckxheWVyTG9hZGVyOiByZXF1aXJlKCdjb3JlL21hcC9sYXllci9sb2FkZXIvdmVjdG9ybG9hZGVybGF5ZXInKSxcbiAgIEdlb21ldHJ5OiByZXF1aXJlKCdjb3JlL2dlb21ldHJ5L2dlb21ldHJ5JyksXG4gICBnZW9tOiByZXF1aXJlKCdjb3JlL2dlb21ldHJ5L2dlb20nKSxcbiAgIFBpY2tDb29yZGluYXRlc0ludGVyYWN0aW9uOiByZXF1aXJlKCdnM3ctb2wzL3NyYy9pbnRlcmFjdGlvbnMvcGlja2Nvb3JkaW5hdGVzaW50ZXJhY3Rpb24nKSxcbiAgIFBpY2tGZWF0dXJlSW50ZXJhY3Rpb246IHJlcXVpcmUoJ2czdy1vbDMvc3JjL2ludGVyYWN0aW9ucy9waWNrZmVhdHVyZWludGVyYWN0aW9uJyksXG4gICBpMThuOiByZXF1aXJlKCdjb3JlL2kxOG4vaTE4bi5zZXJ2aWNlJyksXG4gICBQbHVnaW46IHJlcXVpcmUoJ2NvcmUvcGx1Z2luL3BsdWdpbicpLFxuICAgUGx1Z2luc1JlZ2lzdHJ5OiByZXF1aXJlKCdjb3JlL3BsdWdpbi9wbHVnaW5zcmVnaXN0cnknKSxcbiAgIEVkaXRvcjogcmVxdWlyZSgnY29yZS9lZGl0aW5nL2VkaXRvcicpXG59O1xuXG5nM3cuZ3VpID0ge1xuICBHVUk6IHJlcXVpcmUoJ2d1aS9ndWknKSxcbiAgRm9ybTogcmVxdWlyZSgnZ3VpL2Zvcm0nKS5Gb3JtLFxuICBGb3JtUGFuZWw6IHJlcXVpcmUoJ2d1aS9mb3JtJykuRm9ybVBhbmVsLFxuICBQYW5lbDogcmVxdWlyZSgnZ3VpL3BhbmVsJyksXG4gIHZ1ZToge1xuICAgIC8vR2VvY29kaW5nQ29tcG9uZW50OiByZXF1aXJlKCdndWkvdnVlL2dlb2NvZGluZy9nZW9jb2RpbmcnKSxcbiAgICBTZWFyY2hDb21wb25lbnQ6IHJlcXVpcmUoJ2d1aS9zZWFyY2gvdnVlL3NlYXJjaCcpLFxuICAgIENhdGFsb2dDb21wb25lbnQ6IHJlcXVpcmUoJ2d1aS9jYXRhbG9nL3Z1ZS9jYXRhbG9nJyksXG4gICAgTWFwQ29tcG9uZW50OiByZXF1aXJlKCdndWkvbWFwL3Z1ZS9tYXAnKSxcbiAgICBUb29sc0NvbXBvbmVudDogcmVxdWlyZSgnZ3VpL3Rvb2xzL3Z1ZS90b29scycpLFxuICAgIFF1ZXJ5UmVzdWx0c0NvbXBvbmVudCA6IHJlcXVpcmUoJ2d1aS9xdWVyeXJlc3VsdHMvdnVlL3F1ZXJ5cmVzdWx0cycpXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb3JlOiBnM3cuY29yZSxcbiAgZ3VpOiBnM3cuZ3VpXG59O1xuIl19
