!function e(t,i,r){function n(s,a){if(!i[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=i[s]={exports:{}};t[s][0].call(u.exports,function(e){var i=t[s][1][e];return n(i?i:e)},u,u.exports,e,t,i,r)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)n(r[s]);return n}({1:[function(e,t,i){var r="G3W Client",n={},o={tools:[]},s=["zoom","zoombox","query","scaleline"],a={resources:e("./locales/app.js")},l={debug:!0,local:!1},c={urls:{ows:"/ows",api:"/api",config:"/api/config",staticurl:""}};t.exports={apptitle:r,client:l,server:c,plugins:n,tools:o,map:{controls:s},i18n:a}},{"./locales/app.js":2}],2:[function(e,t,i){var r={it:{translation:{component:"Componente Generico",search:"Ricerca",dosearch:"Cerca",catalog:"Mappa",baselayers:"Basi",tools:"Strumenti",tree:"Strati",legend:"Legenda",street_search:"Cerca indirizzo"}}};t.exports=r},{}],3:[function(e,t,i){function r(){return{apptitle:c.apptitle||"",logo_img:c.group.header_logo_img,logo_link:c.group.header_logo_link,terms_of_use_text:c.group.header_terms_of_use_text,terms_of_use_link:c.group.terms_of_use_link,debug:c.client.debug||!1,group:c.group,urls:c.server.urls,mediaurl:c.server.urls.mediaurl,resourcesurl:c.server.urls.staticurl,projects:c.group.projects,initproject:c.group.initproject,baselayers:c.group.baselayers,crs:c.group.crs,proj4:c.group.proj4,minscale:c.group.minscale,maxscale:c.group.maxscale,getWmsUrl:function(e){return c.server.urls.ows+"/"+c.group.id+"/"+e.type+"/"+e.id},getProjectConfigUrl:function(e){return c.server.urls.config+"/"+c.group.id+"/"+e.type+"/"+e.id},plugins:c.group.plugins,tools:c.tools,views:c.views||{},map:c.map}}function n(){var t=e("sdk").gui.vue.CatalogComponent,i=e("sdk").gui.vue.SearchComponent,r=e("sdk").gui.vue.ToolsComponent,n=e("sdk").gui.vue.MapComponent,o=e("sdk").gui.vue.QueryResultsComponent;return{title:c.apptitle,placeholders:{navbar:{components:[]},sidebar:{components:[new i({id:"search",open:!1,icon:"fa fa-search"}),new t({id:"catalog",open:!0,icon:"fa fa-database"}),new r({id:"tools",open:!1,icon:"fa fa-gear"})]},viewport:{components:[new n({id:"map"})]},floatbar:{components:[]}},othercomponents:[new o({id:"queryresults"})]}}function o(){var e=$.Deferred();return window.initConfig?e.resolve(window.initConfig):($(document).on("initconfigReady",function(t,i){return e.resolve(i)}),e.promise())}var s=e("sdk").core.i18n.init,a=e("sdk/sdk").core.ApplicationService,l=e("./template/js/template");window.g3wsdk=e("sdk");var c=e("./config/config.js");a.on("ready",function(){var e=n();applicationTemplate=new l(e,this),applicationTemplate.init()}),bootstrap=function(){s(c.i18n),o().then(function(e){c.server.urls.staticurl=e.staticurl,c.server.urls.mediaurl=e.mediaurl,c.group=e.group;var t=r();a.init(t)})}()},{"./config/config.js":1,"./template/js/template":14,sdk:91,"sdk/sdk":91}],4:[function(e,t,i){t.exports='<div class="wrapper">\n  <header class="main-header">\n    <!-- Logo -->\n    <!-- Header Navbar: style can be found in header.less -->\n    <nav class="navbar navbar-static-top" role="navigation">\n      <!-- Toggle button on navbar only for mobile -->\n      <a v-if="isMobile()" href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">\n        <span class="sr-only">Expand</span>\n      </a>\n      <a v-if="logo_url" :href="logo_link" :target="logo_link_target" class="navbar-left g3w-logo"><img :src="logo_url"></a>\n      <div class="title-box">\n        <span class="title">{{project_title}}</span>\n      </div>\n    </nav>\n  </header>\n  <!-- Left side column. contains the logo and sidebar -->\n  <sidebar></sidebar>\n  <!-- Content Wrapper. Contains page content -->\n  <div class="content-wrapper" style="background-color:white">\n    <viewport></viewport>\n  </div>\n  <!-- /.content-wrapper -->\n  <!-- Control Sidebar -->\n  <floatbar></floatbar>\n  <!-- /.control-sidebar -->\n  <!-- Add the sidebar\'s background. This div must be placed\n       immediately after the control sidebar -->\n  <div class="control-sidebar-bg"></div>\n</div>\n'},{}],5:[function(e,t,i){t.exports='<aside class="control-sidebar control-sidebar-light" >\n  <a v-show="panelsinstack" href="#" class="floatbar-aside-toggle" data-toggle="control-sidebar" role="button">\n    <span class="sr-only">Expand</span>\n  </a>\n  <div id="floatbar-spinner" style="position:absolute"></div>\n  <div v-show="panelsinstack" class="g3w-sidebarpanel">\n    <div class="row">\n      <div class="col-xs-12 col-sm-12 col-md-12">\n        <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button>\n      </div>\n    </div>\n    <div>\n      <h4 class="g3w-floatbarpanel-name">{{ panelname }}</h2>\n    </div>\n    <div id="g3w-floatbarpanel-placeholder" class="g3w-floatbarpanel-placeholder"></div>\n  </div>\n</aside>\n'},{}],6:[function(e,t,i){t.exports='<li v-show="state.visible" class="treeview" :class="{\'active\': open}">\n  <a href="#">\n    <i :class="icon"></i>\n    <span class="treeview-label">{{title | t}}</span>\n    <i v-if="(dataType === \'inline\')" class="fa fa-angle-left pull-right"></i>\n  </a>\n  <ul v-if="(dataType === \'inline\')" class="treeview-menu">\n    <div id="g3w-sidebarcomponent-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n  </ul>\n</li>\n'},{}],7:[function(e,t,i){t.exports='<aside class="main-sidebar">\n  <!-- sidebar: style can be found in sidebar.less -->\n  <!-- Sidebar toggle button-->\n  <!-- Toggle button on the left side of main sidebar only if not mobile -->\n  <a v-if="!isMobile()" href="#" class="sidebar-aside-toggle" data-toggle="offcanvas" role="button">\n    <span class="sr-only">Expand</span>\n  </a>\n\t<section class="sidebar">\n    <div v-show="panelsinstack" class="g3w-sidebarpanel">\n      <div class="row">\n        <div class="col-xs-12 col-sm-12 col-md-12">\n          <button class="glyphicon glyphicon-remove pull-right close-panel-button" @click="closePanel"></button></div>\n      </div>\n      <div>\n        <h4>{{ panelname }}</h2>\n      </div>\n      <div id="g3w-sidebarpanel-placeholder" class="g3w-sidebarpanel-placeholder"></div>\n    </div>\n\t  <ul id="g3w-sidebarcomponents" v-show="componentsinstack" class="sidebar-menu"></ul>\n\t</section>\n\t<!-- /.sidebar -->\n</aside>\n'},{}],8:[function(e,t,i){t.exports='<div>\n  <div id="g3w-view-one" class="g3w-view one" :style="{width:state.viewSizes.one.width+\'px\',height:state.viewSizes.one.height+\'px\'}"></div>\n  <div v-show="state.secondaryVisible" id="g3w-view-two" class="g3w-view two" :style="{width:state.viewSizes.two.width+\'px\',height:state.viewSizes.two.height+\'px\'}">\n    <div>TEST CONTENUTO X</div>\n  </div>\n</div>\n'},{}],9:[function(e,t,i){var r=e("core/applicationservice"),n=e("core/project/projectsregistry"),o=e("./layout"),s=Vue.extend({template:e("../html/app.html"),ready:function(){function e(){$(i).css("max-height",$(window).innerHeight()),$(".g3w-sidebarpanel").height($(window).innerHeight()-$(".main-header").innerHeight())}function t(){$("#g3w-modal-overlay").height($(window).innerHeight())}o.loading(!1),o.setup(),$("body").toggleClass("fixed"),o.layout.fixSidebar(),o.pushMenu.expandOnHover(),o.layout.activate(),o.controlSidebar._fix($(".control-sidebar-bg")),o.controlSidebar._fix($(".control-sidebar"));var i=o.options.controlSidebarOptions.selector;e(),$(window).resize(function(){e(),t()})},computed:{logo_url:function(){var e,t=r.getConfig();return t.logo_img&&""!=t.logo_img&&(e=t.mediaurl+t.logo_img),e},logo_link:function(){var e=this.getLogoLink();return e?e:"#"},logo_link_target:function(){var e=this.getLogoLink();return e?"_blank":""},project_title:function(){var e=n.getCurrentProject();return e.state.name}},methods:{closePanel:function(){sidebarService.closePanel()},isMobile:function(){return isMobile.any},getLogoLink:function(){var e=null;return r.getConfig().logo_link&&(e=r.getConfig().logo_link),e}}});t.exports=s},{"../html/app.html":4,"./layout":12,"core/applicationservice":17,"core/project/projectsregistry":42}],10:[function(e,t,i){function r(){this._panels=[],this.state={panels:[]}}var n=e("sdk/core/utils/utils").inherit,o=e("sdk/core/g3wobject");n(r,o);var s=r.prototype;s.push=function(e,t,i){var r=this,i=i||!1,n=!1,o=e.getId();_.forEach(r.state.panels,function(t){t.id==o&&(n=!0,r._panels[t.position].unmount(),r._panels[t.position]=e)}),e.mount(t,i).then(function(){if(!n){var t=r._panels.push(e)-1;r.state.panels.push({id:e.getId(),title:e.getTitle(),position:t})}})},s.pop=function(){var e=this,t=this._panels.slice(-1)[0];t.unmount().then(function(){e.state.panels.pop(),e._panels.pop()})},t.exports=r},{"sdk/core/g3wobject":28,"sdk/core/utils/utils":49}],11:[function(e,t,i){function r(){this.stack=new n,this.init=function(e){this.layout=e,this.closable=!0,this.sidebarEl=$(this.layout.options.controlSidebarOptions.selector),this._zindex=this.sidebarEl.css("z-index"),this._modalOverlay=null,this._modal=!1,this._isopen=!1},this.isOpen=function(){return this._isopen},this.open=function(){this.layout.floatBar.open(this.sidebarEl,!0),this._isopen=!0},this.close=function(){this.layout.floatBar.close(this.sidebarEl,!0),this._isopen=!1},this.showPanel=function(e,t){var t=t||{},i=t.append||!1,r=t.modal||!1;this.closable=t.closable||!0,this.stack.push(e,"#g3w-floatbarpanel-placeholder",i),this._isopen||this.open(),r&&(this._modal=!0,o.setModal(),this.sidebarEl.css("z-index",5e3),this.sidebarEl.css("padding-top","0px"),$(".control-sidebar-bg").css("z-index",4999),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"))},this.closePanel=function(){var e=this.stack.pop();e&&_.hasIn(e,"$destroy")&&e.$destroy(),this.stack.length||(this._modal?(o.setModal(!1),this.close(),$(".control-sidebar-bg").toggleClass("control-sidebar-bg-shadow"),this.sidebarEl.css("z-index",""),this.sidebarEl.css("padding-top","50px"),$(".control-sidebar-bg").css("z-index",""),this._modal=!1):this.close())},this.hidePanel=function(){this.close()}}var n=(e("sdk/core/i18n/i18n.service").t,e("./barstack.js")),o=e("sdk/gui/gui"),s=new r,a=Vue.extend({template:e("../html/floatbar.html"),data:function(){return{stack:s.stack.state}},computed:{panelsinstack:function(){return this.stack.panels.length>0},panelname:function(){var e="";return this.stack.panels.length&&(e=this.stack.panels.slice(-1)[0].name),e},closable:function(){return s.closable}},watch:{"stack.panels":function(){var e=$("#g3w-floatbarpanel-placeholder").children();_.forEach(e,function(t,i){i==e.length-1?$(t).show():$(t).hide()})}},methods:{closePanel:function(){s.closePanel()}}});t.exports={FloatbarService:s,FloatbarComponent:a}},{"../html/floatbar.html":5,"./barstack.js":10,"sdk/core/i18n/i18n.service":31,"sdk/gui/gui":71}],12:[function(e,t,i){if("undefined"==typeof jQuery)throw new Error("LayoutManager requires jQuery");$.LayoutManager={},$.LayoutManager.options={navbarMenuSlimscroll:!0,navbarMenuSlimscrollWidth:"0px",navbarMenuHeight:"200px",animationSpeed:"fast",sidebarToggleSelector:"[data-toggle='offcanvas']",sidebarPushMenu:!0,sidebarSlimScroll:!1,sidebarExpandOnHover:!1,enableBoxRefresh:!0,enableBSToppltip:!0,BSTooltipSelector:"[data-toggle='tooltip']",enableFastclick:!0,enableControlSidebar:!0,controlSidebarOptions:{toggleBtnSelector:"[data-toggle='control-sidebar']",selector:".control-sidebar",slide:!0},enableBoxWidget:!0,boxWidgetOptions:{boxWidgetIcons:{collapse:"fa-minus",open:"fa-plus",remove:"fa-times"},boxWidgetSelectors:{remove:'[data-widget="remove"]',collapse:'[data-widget="collapse"]'}},directChat:{enable:!0,contactToggleSelector:'[data-widget="chat-pane-toggle"]'},colors:{lightBlue:"#3c8dbc",red:"#f56954",green:"#00a65a",aqua:"#00c0ef",yellow:"#f39c12",blue:"#0073b7",navy:"#001F3F",teal:"#39CCCC",olive:"#3D9970",lime:"#01FF70",orange:"#FF851B",fuchsia:"#F012BE",purple:"#8E24AA",maroon:"#D81B60",black:"#222222",gray:"#d2d6de"},screenSizes:{xs:480,sm:768,md:992,lg:1200}},$.LayoutManager._init=function(){"use strict";return $.LayoutManager.layout={activate:function(){var e=this;e.fix(),e.fixSidebar(),$(window,".wrapper").resize(function(){e.fix(),e.fixSidebar()})},fix:function(){var e=$(".main-header").outerHeight()+$(".main-footer").outerHeight(),t=$(window).height(),i=$(".sidebar").height();if($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height",t-$(".main-footer").outerHeight()),$(".content-wrapper, .right-side").css("height",t-$(".main-footer").outerHeight());else{var r;t>=i?($(".content-wrapper, .right-side").css("min-height",t-e),r=t-e):($(".content-wrapper, .right-side").css("min-height",i),r=i);var n=$($.LayoutManager.options.controlSidebarOptions.selector);"undefined"!=typeof n&&n.height()>r&&$(".content-wrapper, .right-side").css("min-height",n.height())}},fixSidebar:function(){return $("body").hasClass("fixed")?("undefined"==typeof $.fn.slimScroll&&window.console&&window.console.error("Error: the fixed layout requires the slimscroll plugin!"),void($.LayoutManager.options.sidebarSlimScroll?"undefined"!=typeof $.fn.slimScroll&&($(".sidebar").slimScroll({destroy:!0}).height("auto"),$(".sidebar").slimscroll({height:$(window).height()-$(".main-header").height()+"px",color:"rgba(255,255,255,0.7)",size:"3px"})):$(".sidebar").css({height:$(window).height()-$(".main-header").height()+"px"}))):void("undefined"!=typeof $.fn.slimScroll&&$(".sidebar").slimScroll({destroy:!0}).height("auto"))}},$.LayoutManager.pushMenu={activate:function(e){var t=$.LayoutManager.options.screenSizes;$(e).on("click",function(e){e.preventDefault(),$(window).width()>t.sm-1?$("body").hasClass("sidebar-collapse")?$("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu"):$("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").hasClass("sidebar-open")?$("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu"):$("body").addClass("sidebar-open").trigger("expanded.pushMenu")}),$(".content-wrapper").click(function(){$(window).width()<=t.sm-1&&$("body").hasClass("sidebar-open")&&$("body").removeClass("sidebar-open")}),($.LayoutManager.options.sidebarExpandOnHover||$("body").hasClass("fixed")&&$("body").hasClass("sidebar-mini"))&&this.expandOnHover()},expandOnHover:function(){var e=this,t=$.LayoutManager.options.screenSizes.sm-1;$(".main-sidebar").hover(function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-collapse")&&$(window).width()>t&&e.expand()},function(){$("body").hasClass("sidebar-mini")&&$("body").hasClass("sidebar-expanded-on-hover")&&$(window).width()>t&&e.collapse()})},expand:function(){$("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")},collapse:function(){$("body").hasClass("sidebar-expanded-on-hover")&&$("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")}},$.LayoutManager.tree=function(e){var t=this,i=$.LayoutManager.options.animationSpeed;$(document).on("click",e+" li a",function(e){var r=$(this),n=r.next();if(n.is(".treeview-menu")&&n.is(":visible"))n.slideUp(i,function(){n.parent("li.treeview").removeClass("active"),n.removeClass("menu-open")});else if(n.is(".treeview-menu")&&!n.is(":visible")){var o,s=r.parents("ul").first(),a=r.parent("li"),l=a.siblings(),c=s.height()-s.find("li.header").outerHeight(),u=a.outerHeight();l.not(".header").each(function(e,t){u+=$(t).find("a").outerHeight()});var h=c-u;n.css({height:h+"px","max-height":h+"px","overflow-y":"auto"});var d=s.find("ul.treeview-menu:visible").slideUp(i);d.removeClass("menu-open"),n.slideDown(i,function(){n.addClass("menu-open"),o=s.find("li.treeview.active"),o.removeClass("active"),a.addClass("active"),t.layout.fix()})}n.is(".treeview-menu")&&e.preventDefault()})},$.LayoutManager.floatBar=$.LayoutManager.controlSidebar={activate:function(){var e=this,t=$.LayoutManager.options.controlSidebarOptions,i=$(t.selector),r=$(t.toggleBtnSelector);r.on("click",function(r){r.preventDefault(),i.hasClass("control-sidebar-open")||$("body").hasClass("control-sidebar-open")?e.close(i,t.slide):e.open(i,t.slide)});var n=$(".control-sidebar-bg");e._fix(n),$("body").hasClass("fixed")?e._fixForFixed(i):$(".content-wrapper, .right-side").height()<i.height()&&e._fixForContent(i)},open:function(e,t){t?e.addClass("control-sidebar-open"):$("body").addClass("control-sidebar-open")},close:function(e,t){t?e.removeClass("control-sidebar-open"):$("body").removeClass("control-sidebar-open")},_fix:function(e){var t=this;$("body").hasClass("layout-boxed")?(e.css("position","absolute"),e.height($(".wrapper").height()),$(window).resize(function(){t._fix(e)})):e.css({position:"fixed",height:"auto"})},_fixForFixed:function(e){e.css({position:"fixed","max-height":"100%",overflow:"auto","padding-bottom":"50px"})},_fixForContent:function(e){$(".content-wrapper, .right-side").css("min-height",e.height())}},$.LayoutManager.boxWidget={selectors:$.LayoutManager.options.boxWidgetOptions.boxWidgetSelectors,icons:$.LayoutManager.options.boxWidgetOptions.boxWidgetIcons,animationSpeed:$.LayoutManager.options.animationSpeed,activate:function(e){var t=this;e||(e=document),$(e).on("click",t.selectors.collapse,function(e){e.preventDefault(),t.collapse($(this))}),$(e).on("click",t.selectors.remove,function(e){e.preventDefault(),t.remove($(this))})},collapse:function(e){var t=this,i=e.parents(".box").first(),r=i.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");i.hasClass("collapsed-box")?(e.children(":first").removeClass(t.icons.open).addClass(t.icons.collapse),r.slideDown(t.animationSpeed,function(){i.removeClass("collapsed-box")})):(e.children(":first").removeClass(t.icons.collapse).addClass(t.icons.open),r.slideUp(t.animationSpeed,function(){i.addClass("collapsed-box")}))},remove:function(e){var t=e.parents(".box").first();t.slideUp(this.animationSpeed)}},$.LayoutManager},$.LayoutManager.addRefreshButton=function(){"use strict";return $.fn.boxRefresh=function(e){function t(e){e.append(n),r.onLoadStart.call(e)}function i(e){e.find(n).remove(),r.onLoadDone.call(e)}var r=$.extend({trigger:".refresh-btn",source:"",onLoadStart:function(e){return e},onLoadDone:function(e){return e}},e),n=$('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');return this.each(function(){if(""===r.source)return void(window.console&&window.console.log("Please specify a source first - boxRefresh()"));var e=$(this),n=e.find(r.trigger).first();n.on("click",function(n){n.preventDefault(),t(e),e.find(".box-body").load(r.source,function(){i(e)})})})},$.LayoutManager},$.LayoutManager.activateBox=function(){"use strict";return $.fn.activateBox=function(){$.LayoutManager.boxWidget.activate(this)},$.LayoutManager},$.LayoutManager.listCustomPlugin=function(){"use strict";return $.fn.todolist=function(e){var t=$.extend({onCheck:function(e){return e},onUncheck:function(e){return e}},e);return this.each(function(){"undefined"!=typeof $.fn.iCheck?($("input",this).on("ifChecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onCheck.call(e)}),$("input",this).on("ifUnchecked",function(){var e=$(this).parents("li").first();e.toggleClass("done"),t.onUncheck.call(e)})):$("input",this).on("change",function(){var e=$(this).parents("li").first();e.toggleClass("done"),$("input",e).is(":checked")?t.onCheck.call(e):t.onUncheck.call(e)})})},$.LayoutManager},$.LayoutManager.setup=function(){"use strict";$("body").removeClass("hold-transition"),"undefined"!=typeof LayoutManagerOptions&&$.extend(!0,$.LayoutManager.options,LayoutManagerOptions);var e=$.LayoutManager.options;return $.LayoutManager._init(),$.LayoutManager.layout.activate(),$.LayoutManager.tree(".sidebar"),e.enableControlSidebar&&$.LayoutManager.controlSidebar.activate(),e.navbarMenuSlimscroll&&"undefined"!=typeof $.fn.slimscroll&&$(".navbar .menu").slimscroll({height:e.navbarMenuHeight,alwaysVisible:!1,size:e.navbarMenuSlimscrollWidth}).css("width","100%"),e.sidebarPushMenu&&$.LayoutManager.pushMenu.activate(e.sidebarToggleSelector),e.enableBSToppltip&&$("body").tooltip({selector:e.BSTooltipSelector}),e.enableBoxWidget&&$.LayoutManager.boxWidget.activate(),e.enableFastclick&&"undefined"!=typeof FastClick&&FastClick.attach(document.body),e.directChat.enable&&$(document).on("click",e.directChat.contactToggleSelector,function(){var e=$(this).parents(".direct-chat").first();e.toggleClass("direct-chat-contacts-open")}),$('.btn-group[data-toggle="btn-toggle"]').each(function(){var e=$(this);$(this).find(".btn").on("click",function(t){e.find(".btn.active").removeClass("active"),$(this).addClass("active"),t.preventDefault()})}),$.LayoutManager.addRefreshButton().activateBox().listCustomPlugin()},$.LayoutManager.loading=function(e){var e=!_.isBoolean(e)||e;e?$("body").append('<div id="loadspinner" class="loading"></div>'):$("#loadspinner").remove()},t.exports=$.LayoutManager},{}],13:[function(e,t,i){function r(){this.stack=new o,this.state={components:[]},this.init=function(e){this.layout=e},this.addComponent=function(e){this.state.components.push(e);var t=new s;t.title=e.title||t.title,t.open=void 0===e.open?t.open:e.open,t.icon=e.dataIcon||t.icon,t.state=e.state||!0,t.$mount().$appendTo("#g3w-sidebarcomponents"),e.mount("#g3w-sidebarcomponent-placeholder"),_.has(e,"initService")&&e.initService()},this.removeComponent=function(){},this.showPanel=function(e){var t="#g3w-sidebarpanel-placeholder";this.stack.push(e,t)},this.closePanel=function(){this.stack.pop()}}var n=e("sdk/core/i18n/i18n.service").t,o=e("./barstack.js"),s=Vue.extend({template:e("../html/sidebar-item.html"),data:function(){return{main:!0,component:null,active:!1,dataType:"inline",title:"component",icon:null,open:!0,state:null}}}),a=new r,l=Vue.extend({template:e("../html/sidebar.html"),data:function(){return{components:a.state.components,panels:a.stack.state.panels,bOpen:!0,bPageMode:!1,header:n("main navigation")}},computed:{panelsinstack:function(){return this.panels.length>0},componentsinstack:function(){return this.components.length>0},componentname:function(){var e="";return this.components.length&&(e=this.components.slice(-1)[0].getName()),e},panelname:function(){var e="";return this.panels.length&&(e=this.panels.slice(-1)[0].name),e}},methods:{closePanel:function(){a.closePanel()},isMobile:function(){return isMobile.any}},ready:function(){}});t.exports={SidebarService:a,SidebarComponent:l}},{"../html/sidebar-item.html":6,"../html/sidebar.html":7,"./barstack.js":10,"sdk/core/i18n/i18n.service":31}],14:[function(e,t,i){var r=e("sdk/core/i18n/i18n.service").t;e("sdk/gui/vue/vue.directives");var n=e("sdk/gui/componentsregistry"),o=e("sdk/gui/gui"),s=e("./sidebar"),a=e("./floatbar"),l=e("./viewport"),c=(e("./applicationui"),e("./layout"));c.loading();var u=function(t,i){self=this,this.templateConfig=t,this.ApplicationService=i,this.init=function(){var e=i.getConfig();e.debug&&(Vue.config.debug=!0),this._setupInterface(),this._setupLayout()},this._setupLayout=function(){Vue.filter("t",function(e){return r(e)});var t=e("./applicationui");Vue.component("sidebar",s.SidebarComponent),Vue.component("viewport",l.ViewportComponent),Vue.component("floatbar",a.FloatbarComponent),Vue.component("app",t);new Vue({el:"body",ready:function(){self._buildTemplate(),$(document).localize()}})},this._buildTemplate=function(){var e=this;a.FloatbarService.init(c);var t=this.templateConfig.placeholders;_.forEach(t,function(t,i){_.forEach(t.components,function(t){e._addComponent(i,t)})}),this._addOtherComponents(),o.ready()},this._addOtherComponents=function(){var e=this;this.templateConfig.othercomponents&&_.forEach(this.templateConfig.othercomponents,function(t){e._addComponent("othercomponents",t)})},this._addComponent=function(e,t){if(u.PLACEHOLDERS.indexOf(e)>-1){var i=u.PlaceholdersServices[e];i&&(i.addComponent(t),n.registerComponent(t))}else n.registerComponent(t)},this._removeComponent=function(e,t){n.unregisterComponent(component)},this._showModalOverlay=function(e){},this._showSidebar=function(){},this._hideSidebar=function(){},this._setupInterface=function(){o.addComponent=_.bind(this._addComponent,this),o.removeComponent=_.bind(this._removeComponent,this),o.getResourcesUrl=_.bind(function(){return this.ApplicationService.getConfig().resourcesurl},this),o.showForm=_.bind(a.FloatbarService.showPanel,a.FloatbarService),o.closeForm=_.bind(a.FloatbarService.closePanel,a.FloatbarService),o.showList=_.bind(a.FloatbarService.showPanel,a.FloatbarService),o.closeList=_.bind(a.FloatbarService.closePanel,a.FloatbarService),o.hideList=_.bind(a.FloatbarService.hidePanel,a.FloatbarService),o.showTable=function(){},o.closeTable=function(){},o.showResultsFactory=function(e){var t;switch(e){case"query":o.showFloatbar(),t=o.showQueryResults}return t},o.showQueryResults=function(e,t){var i=o.getComponent("queryresults"),r=i.getService();r.reset(),r.setTitle(e),t&&r.setQueryResponse(t);var n={append:!0};return a.FloatbarService.showPanel(i,n),r},o.hideQueryResults=_.bind(a.FloatbarService.hidePanel,a.FloatbarService),o.showPanel=_.bind(s.SidebarService.showPanel,s.SidebarService),o.closePanel=_.bind(s.SidebarService.closePanel,s.SidebarService),toastr.options.positionClass="toast-top-center",toastr.options.preventDuplicates=!0,o.notify=toastr,o.dialog=bootbox,o.showSpinner=function(e){var t=e.container||"body",i=e.id||"loadspinner",r=e.where||"prepend",n=e.style||"",o=e.transparent?"background-color: transparent":"";$("#"+i).length||$(t)[r].call($(t),'<div id="'+i+'" class="spinner-wrapper '+n+'" style="'+o+'"><div class="spinner '+n+'"></div></div>')},o.hideSpinner=function(e){$("#"+e).remove()},o.showFloatbar=function(){a.FloatbarService.open()},o.hideFloatbar=function(){a.FloatbarService.close()},o.showSidebar=_.bind(this._showSidebar,this),o.hideSidebar=_.bind(this._hideSidebar,this),o.setModal=_.bind(this._showModalOverlay,this),o.showMap=function(){l.ViewportService.setPrimaryComponent("map")},o.showMapAside=function(e,t){},o.showContent=function(e){n.getComponent("content");l.ViewportService.setPrimaryComponent("content")},o.showContentAside=function(e,t,i){n.getComponent("content");l.ViewportService.setPrimaryComponent("map"),l.ViewportService.showSecondaryView(t,i)},o.hideAside=function(){l.ViewportService.hideSecondaryView()}}};u.PLACEHOLDERS=["navbar","sidebar","viewport","floatbar"],u.PlaceholdersServices={navbar:null,sidebar:s.SidebarService,viewport:l.ViewportService,floatbar:s.FloatbarService},t.exports=u},{"./applicationui":9,"./floatbar":11,"./layout":12,"./sidebar":13,"./viewport":15,"sdk/core/i18n/i18n.service":31,"sdk/gui/componentsregistry":68,"sdk/gui/gui":71,"sdk/gui/vue/vue.directives":90}],15:[function(e,t,i){var r=e("sdk").core.utils.inherit,n=e("sdk").core.utils.base,o=(e("sdk").core.utils.merge,e("sdk").core.G3WObject),s=e("sdk").gui.GUI,a=function(){this.state={primaryViewTag:"one",secondaryVisible:!1,ratioDenom:2,split:"h",viewSizes:{one:{width:0,height:0},two:{width:0,height:0}}},this.setters={setPrimaryComponent:function(e){var t=this._viewsByComponentId[e];if(t){var i=t.viewTag;this._setPrimaryView(i)}}},this._viewsByComponentId={};var e=null;this.addComponent=function(e){var t=this,i=2-_.keys(t._viewsByComponentId).length;if(!(i<=0)){var r=2==i?"one":"two";e.mount("#g3w-view-"+r,!0).then(function(){var i=e.getId();t._viewsByComponentId[i]={viewTag:r,component:e}})}},this.showSecondaryView=function(e,t){this.state.secondaryVisible=!0,this.state.split=e?e:this.state.split,this.state.ratioDenom=t?t:this.state.ratioDenom,this._layout()},this.hideSecondaryView=function(){this.state.secondaryVisible=!1,this._layout()},this._otherTag=function(e){return"one"==e?"two":"one"},this._setPrimaryView=function(e){this.state.primaryView=e,this._layout()},this._prepareLayout=function(){function e(){n=!0,t()}function t(){n===!0?(n=!1,r=!0,i._layout(),requestAnimationFrame(t)):r=!1}var i=this,r=!1,n=!1;s.on("ready",function(){i._layout(),s.on("guiresized",function(){e()}),$(window).resize(function(){r===!1&&e()}),$(".main-sidebar").on("webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd",function(){$(this).trigger("trans-end"),e()})})},this._calcViewSizes=function(){var e=this.state.primaryViewTag,t=this._otherTag(e),i=this._viewportWidth(),r=this._viewportHeight(),n=i,o=r,s=0,a=0;if(this.state.secondaryVisible){var l=this.state.ratioDenom;l>0?"h"==this.state.split?(s=i/l,a=r,n=i-s,o=r):(s=i,a=r/l,n=i,o=r-a):this.state.secondaryVisible=!1}this.state.viewSizes[e].width=n,this.state.viewSizes[e].height=o,this.state.viewSizes[t].width=s,this.state.viewSizes[t].height=a},this._viewportHeight=function(){var e=$(".navbar").innerHeight();return $(window).innerHeight()-e},this._viewportWidth=function(){var e=$(".main-sidebar").offset().left,t=$(".main-sidebar").innerWidth(),i=t+e;return $(window).innerWidth()-i},this._layout=function(){var t=this;e||(e=_.map(this._viewsByComponentId,function(e){return e.component})),this._calcViewSizes(),_.forEach(e,function(e){var i=t._viewsByComponentId[e.getId()].viewTag,r=t.state.viewSizes[i].width,n=t.state.viewSizes[i].height;e.layout(r,n)})},this._prepareLayout(),n(this)};r(a,o);var l=new a,c=Vue.extend({template:e("../html/viewport.html"),data:function(){return{state:l.state}}});t.exports={ViewportService:l,ViewportComponent:c}},{"../html/viewport.html":8,sdk:91}],16:[function(e,t,i){function r(){this._config=null,this._baseUrl=null,this._apiUrls={},this.init=function(e){this._config=e,this._baseUrl=e.urls.api,this._apiEndpoints=e.urls.apiEndpoints};var e=0;this._incrementLoaders=function(){0==e&&this.emit("apiquerystart"),e+=1},this._decrementLoaders=function(){e-=1,0==e&&this.emit("apiqueryend")},this.get=function(e,t){var i=this,r=this._apiEndpoints[e];if(r){var n=this._baseUrl+"/"+r;t.request&&(n=n+"/"+t.request);var o=t.params||{};return i.emit(e+"querystart"),this._incrementLoaders(),$.get(n,o).done(function(t){return i.emit(e+"queryend",t),t}).fail(function(t){return i.emit(e+"queryfail",t),t}).always(function(){i._decrementLoaders()})}return a()},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("core/utils/utils").reject;n(r,s),t.exports=new r},{"core/g3wobject":28,"core/utils/utils":49}],17:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/g3wobject"),s=e("core/apiservice"),a=e("core/project/projectsregistry"),l=e("core/plugin/pluginsregistry"),c=function(){this.secret="### G3W Client Application Service ###";this.initialized=!1,this._modalOverlay=null,this.config={},n(this),this.init=function(e){this._config=e,this._bootstrap()},this.getConfig=function(){return this._config},this._bootstrap=function(){var e=this;this.initialized||$.when(s.init(this._config),a.init(this._config)).then(function(){l.init({plusingBaseUrl:e._config.urls.staticurl,pluginsConfigs:e._config.plugins}),e.emit("ready"),this.initialized=!0})}};r(c,o),t.exports=new c},{"core/apiservice":16,"core/g3wobject":28,"core/plugin/pluginsregistry":40,"core/project/projectsregistry":42,"core/utils/utils":49}],18:[function(e,t,i){function r(e){this._editor=e,this._origVectorLayer=new ol.layer.Vector({source:new ol.source.Vector}),this._cloneLayer(),this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={}}var n=e("core/utils/utils").inherit,o=e("core/g3wobject");n(r,o),t.exports=r;var s=r.prototype;s.commit=function(){var e=this._editor.getEditVectorLayer().getFeatures();this._editor.getVectorLayer().addFeatures(e),this._editor.getEditVectorLayer().clear(),this._clearBuffers(),this._cloneLayer()},s.undoAll=function(){this._resetVectorLayer(),this._clearBuffers()},s.destroy=function(){this._clearBuffers()},s.generateId=function(){return this._editor.generateId()},s.addFeature=function(e){e.getId()||e.setId(this.generateId()),this._addEditToGeometryBuffer(e,"add"),console.log("Inserita nuova feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer");
},s.updateFeature=function(e){this._addEditToGeometryBuffer(e,"update"),console.log("Modificata feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.deleteFeature=function(e){this._addEditToGeometryBuffer(e,"delete"),console.log("Rimossa feature: (ID: "+e.getId()+" "+e.getGeometry().getCoordinates()+") nel buffer")},s.updateAttributes=function(e,t){e.getId()||e.setId(this.generateId()),this._addEditToAttributesBuffer(e,t),console.log("Modificati attributi feature: (ID: "+e.getId()+")")},s.getFeatureAttributes=function(e){return this._attributesBuffer[e]?this._attributesBuffer[e].slice(-1)[0]:null},s.areFeatureAttributesEdited=function(e){return!!this._attributesBuffer[e]&&this._attributesBuffer[e].length>-1},s.getRelationsAttributes=function(e){return this._relationsAttributesBuffer[e].slice(-1)[0]},s.areFeatureRelationsEdited=function(e){return!!this._relationsAttributesBuffer[e]&&this._relationsAttributesBuffer[e].length>-1},s.collectFeatureIds=function(){var e=this._geometriesBuffer,t=this._attributesBuffer,i=[];return i=_.concat(i,_.keys(e)),i=_.concat(i,_.keys(t)),_.uniq(i)},s.collectFeatures=function(e,t){var i,r=this,t=(this._geometriesBuffer,this._attributesBuffer,t||!1),n=new ol.format.GeoJSON,o=this.collectFeatureIds();i="new"==e?r._editor.getEditVectorLayer():r._editor.getVectorLayer();var s=[];return _.forEach(o,function(o){var a=i.getFeatureById(o),l=r._isNewFeature(o),c="new"==e&&l&&a,u="updated"==e&&!l&&a,h="deleted"==e&&!l&&!a;c||u?(t&&(a=n.writeFeatureObject(a)),s.push(a)):h&&s.push(o)}),s},s.createFeature=function(e,t,i){var r=new ol.Feature;return r.setId(e),r.setGeometry(t),r.setProperties(i),r},s.collectRelationsAttributes=function(){var e={};return _.forEach(this._relationsAttributesBuffer,function(t,i){lastRelationsAttributes=t[t.length-1],e[i]=lastRelationsAttributes}),e},s._addEditToGeometryBuffer=function(e,t){var i=this._geometriesBuffer,r=e.getId(),n=e.getGeometry();if("delete"==t){n=null;var o=this._isNewFeature(r)?this._editor._editVectorLayer:this._editor._vectorLayer;o.getSource().removeFeature(e)}_.has(i,r)||(i[r]=[]),i[r].push(n),this._setDirty()},s._addEditToAttributesBuffer=function(e,t){var i=e.getId(),r=e.getProperties(),n=this._attributesBuffer;_.has(n,i)||(n[i]=[]),n[i].push(r),t&&(_.has(this._relationsAttributesBuffer,i)||(this._relationsAttributesBuffer[i]=[]),this._relationsAttributesBuffer[i].push(t)),this._setDirty()},s._isNewFeature=function(e){return this._editor.isNewFeature(e)},s._setDirty=function(){this._editor._setDirty()},s._resetVectorLayer=function(){this._editor.vectoLayer=this._origVectorLayer,this._origVectorLayer.getSource().clear()},s._clearBuffers=function(){this._geometriesBuffer={},this._attributesBuffer={},this._relationsAttributesBuffer={},this._editor._setDirty(!1)},s._cloneLayer=function(){var e=[];this._editor._vectorLayer.getSource().forEachFeature(function(t){e.push(t.clone())},this),this._origVectorLayer.getSource().addFeatures(e)}},{"core/g3wobject":28,"core/utils/utils":49}],19:[function(e,t,i){function r(e){this._vectorLayer=null,this._editVectorLayer=null,this._editBuffer=null,this._activeTool=null,this._dirty=!1,this._newPrefix="_new_",this._withFeatureLocks=!1,this._featureLocks=null,this._started=!1,this._setterslisteners={before:{},after:{}},this._geometrytypes=["Point","LineString","MultiLineString"],this._toolsForGeometryTypes={Point:{addfeature:u,movefeature:h,deletefeature:p,editattributes:f},LineString:{addfeature:u,modifyvertex:d,movefeature:h,deletefeature:p,editattributes:f,cutline:g}},this._activeTool=new function(){this.type=null,this.instance=null,this.setTool=function(e,t){this.type=e,this.instance=t},this.getType=function(){return this.type},this.getTool=function(){return this.instance},this.clear=function(){this.type=null,this.instance=null}},this._tools={},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").resolve,a=(e("core/utils/utils").reject,e("core/g3wobject")),l=e("gui/gui"),c=e("core/layer/vectorlayer"),u=e("./tools/addfeaturetool"),h=e("./tools/movepointtool"),d=e("./tools/modifyfeaturetool"),p=e("./tools/deletefeaturetool"),f=e("./tools/pickfeaturetool"),g=e("./tools/cutlinetool"),v=e("./editbuffer");n(r,a),t.exports=r;var y=r.prototype;y.setVectorLayer=function(e){var t=e.geometrytype;if(!t||!this._isCompatibleType(t))throw Error("Vector geometry type "+t+" is not valid for editing");this._setToolsForVectorType(t),this._vectorLayer=e},y.start=function(){var e=!1;return this._vectorLayer&&(this.stop(),this._editVectorLayer=new c({name:"editvector",geometrytype:this._vectorLayer.geometrytype}),l.getComponent("map").getService().viewer.map.addLayer(this._editVectorLayer.getLayer()),this._editBuffer=new v(this),this._setStarted(!0),e=!0),e},y.stop=function(){return!this.isStarted()||!!this.stopTool()&&(this._editBuffer.destroy(),this._editBuffer=null,this.removeAllListeners(),l.getComponent("map").getService().viewer.removeLayerByName(this._editVectorLayer.name),this._setStarted(!1),!0)},y.setTool=function(e,t){if(!this.stopTool())return!1;var i=this._tools[e];if(i){var r=new i(this,t);return this._activeTool.setTool(e,r),this._setToolSettersListeners(r,this._setterslisteners),r.run(),!0}},y.stopTool=function(){return!(this._activeTool.instance&&!this._activeTool.instance.stop())&&(this._activeTool.clear(),!0)},y.getActiveTool=function(){return this._activeTool},y.isStarted=function(){return this._started},y.hasActiveTool=function(){return!_.isNull(this._activeTool.instance)},y.isToolActive=function(e){return!!this._activeTool.toolType&&this._activeTool.toolType==e},y.generateId=function(){return this._editBuffer.generateId()},y.commit=function(e){this._editBuffer.commit(e)},y.undoAll=function(){this._editBuffer.undoAll()},y.setFeatureLocks=function(e){this._withFeatureLocks=!0,this._featureLocks=e},y.getFeatureLocks=function(e){return this._featureLocks},y.getFeatureLockIds=function(){return _.map(this._featureLocks,function(e){return e.lockid})},y.getFeatureLocksLockIds=function(e){var e=e||this._featureLocks;return _.map(e,function(e){return e.lockid})},y.getFeatureLocksFeatureIds=function(e){var e=e||this._featureLocks;return _.map(e,function(e){return e.featureid})},y.getFeatureLockIdsForFeatureIds=function(e){var t=_.filter(this._featureLocks,function(t){return _.includes(e,t.featureid)});return this.getFeatureLocksLockIds(t)},y.getEditedFeatures=function(){var e=this._editBuffer.collectFeatureIds(),t=this.getFeatureLockIdsForFeatureIds(e);return{add:this._editBuffer.collectFeatures("new",!0),update:this._editBuffer.collectFeatures("updated",!0),"delete":this._editBuffer.collectFeatures("deleted",!0),relationsattributes:this._editBuffer.collectRelationsAttributes(),lockids:t}},y.setFieldsWithAttributes=function(e,t,i){var r={};_.forEach(t,function(e){r[e.name]=e.value});var n=null;if(i){var n={};_.forEach(i,function(e,t){var i={};_.forEach(e.fields,function(e){i[e.name]=e.value}),n[t]=i})}e.setProperties(r),this._editBuffer.updateAttributes(e,n)},y.setAttributes=function(e,t){e.setProperties(t),this._editBuffer.updateAttributes(e)},y.getRelationsWithAttributes=function(e){var t=e.getId();if(this._vectorLayer.hasRelations()){var i;if(t)if(this._vectorLayer.getFeatureById(t)){var r=this._editBuffer.areFeatureRelationsEdited(t);if(r){var n=this._vectorLayer.getRelations(),o=this._editBuffer.getRelationsAttributes(t);_.forEach(o,function(e,t){_.forEach(n[t].fields,function(e){e.value=o[t][e.name]})}),i=s(n)}else i=this._vectorLayer.getRelationsWithAttributes(t)}else if(this._vectorLayer.featureHasRelationsFksWithValues(e)){var a=this._vectorLayer.getRelationsFksWithValuesForFeature(e);i=this._vectorLayer.getRelationsWithAttributesFromFks(a)}else i=this._vectorLayer.getRelationsWithAttributes();else i=this._vectorLayer.getRelationsWithAttributes()}else i=s(null);return i},y.getField=function(e,t){var t=t||this.getVectorLayer().getFieldsWithAttributes(),i=null;return _.forEach(t,function(t){t.name==e&&(i=t)}),i},y.isDirty=function(){return this._dirty},y.onafter=function(e,t){this._onaftertoolaction(e,t)},y.onbefore=function(e,t){this._onbeforetoolaction(e,t,!1)},y.onbeforeasync=function(e,t){this._onbeforetoolaction(e,t,!0)},y.addFeature=function(e){this._editBuffer.addFeature(e)},y.updateFeature=function(e){this._editBuffer.updateFeature(e)},y.deleteFeature=function(e){this._editBuffer.deleteFeature(e)},y.getVectorLayer=function(){return this._vectorLayer},y.getEditVectorLayer=function(){return this._editVectorLayer},y.generateId=function(){return this._newPrefix+Date.now()},y.isNewFeature=function(e){return!e||0==e.toString().indexOf(this._newPrefix)},y._isCompatibleType=function(e){return this._geometrytypes.indexOf(e)>-1},y._setToolsForVectorType=function(e){var t=this,i=this._toolsForGeometryTypes[e];_.forEach(i,function(e,i){t._tools[i]=e})},y._onaftertoolaction=function(e,t){_.get(this._setterslisteners.after,e)||(this._setterslisteners.after[e]=[]),this._setterslisteners.after[e].push({fnc:t})},y._onbeforetoolaction=function(e,t,i){_.get(this._setterslisteners.before,e)||(this._setterslisteners.before[e]=[]),this._setterslisteners.before[e].push({fnc:t,how:i?"async":"sync"})},y._setToolSettersListeners=function(e,t){_.forEach(t.before,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){"sync"==t.how?e.onbefore(i,t.fnc):e.onbeforeasync(i,t.fnc)})}),_.forEach(t.after,function(t,i){_.hasIn(e.setters,i)&&_.forEach(t,function(t){e.onafter(i,t.fnc)})})},y._setStarted=function(e){this._started=e},y._setDirty=function(e){_.isNil(e)?this._dirty=!0:this._dirty=e,this.emit("dirty",this._dirty)}},{"./editbuffer":18,"./tools/addfeaturetool":20,"./tools/cutlinetool":21,"./tools/deletefeaturetool":23,"./tools/modifyfeaturetool":24,"./tools/movepointtool":25,"./tools/pickfeaturetool":26,"core/g3wobject":28,"core/layer/vectorlayer":35,"core/utils/utils":49,"gui/gui":71}],20:[function(e,t,i){function r(e,t){var t=t||{};this._running=!1,this._busy=!1,this.editor=e,this.source=e.getEditVectorLayer().getLayer().getSource(),this.isPausable=!0,this.drawInteraction=null,this._snap=t.snap||null,this._snapInteraction=null,this._finishCondition=t.finishCondition||_.constant(!0),this._condition=t.condition||_.constant(!0),this.setters={addFeature:{fnc:r.prototype._addFeature,fallback:r.prototype._fallBack}},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("gui/gui");n(r,s),t.exports=r;var l=r.prototype;l.run=function(){var e=this,t=a.getComponent("map").getService().viewer.map;this.drawInteraction=new ol.interaction.Draw({type:this.editor.getEditVectorLayer().geometrytype,source:this.source,condition:this._condition,finishCondition:this._finishCondition}),t.addInteraction(this.drawInteraction),this.drawInteraction.setActive(!0),this.drawInteraction.on("drawstart",function(t){e.editor.emit("drawstart",t)}),this.drawInteraction.on("drawend",function(t){e.editor.emit("drawend",t),e._busy||(e._busy=!0,e.pause(),e.addFeature(t.feature))}),this._snap&&(this._snapInteraction=new ol.interaction.Snap({source:this._snap.vectorLayer.getSource()}),t.addInteraction(this._snapInteraction))},l.pause=function(e){_.isUndefined(e)||e?(this._snapInteraction&&this._snapInteraction.setActive(!1),this.drawInteraction.setActive(!1)):(this._snapInteraction&&this._snapInteraction.setActive(!0),this.drawInteraction.setActive(!0))},l.stop=function(){var e=a.getComponent("map").getService().viewer.map;return this._snapInteraction&&(e.removeInteraction(this._snapInteraction),this._snapInteraction=null),e.removeInteraction(this.drawInteraction),this.drawInteraction=null,!0},l.removeLastPoint=function(){if(this.drawInteraction)try{this.drawInteraction.removeLastPoint()}catch(e){}},l._addFeature=function(e){return this.editor.addFeature(e),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.source.getFeaturesCollection().pop(),this.pause(!1)}},{"core/g3wobject":28,"core/utils/utils":49,"gui/gui":71}],21:[function(e,t,i){function r(e,t){this.setters={cutLine:r.prototype._cutLine},o(this,e,t);this.isPausable=!0,this.steps=new c.Steps(r.steps),this._origFeature=null,this._origGeometry=null,this._newFeatures=[],this._linePickInteraction=null,this._pointPickInteraction=null,this._selectLineToKeepInteraction=null,this._pointLayer=t.pointLayer||null,this._minCutPointDistance=t.minCutPointDistance||1/0,this._modType=t.modType||"MODONCUT",this._selectedLineOverlay=new ol.layer.Vector({source:new ol.source.Vector,style:new ol.style.Style({stroke:new ol.style.Stroke({color:"rgb(255,255,0)",width:4})})}),this._lineToKeepOverlay=new ol.layer.Vector({source:new ol.source.Vector})}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/geometry/geom"),a=e("g3w-ol3/src/interactions/pickfeatureinteraction"),l=e("g3w-ol3/src/interactions/pickcoordinatesinteraction"),c=(e("gui/gui"),e("./tool"));n(r,c),t.exports=r;var u=r.prototype;u.run=function(){var e=this;this._linePickInteraction=new a({layers:[this.layer,this.editingLayer]}),this.map.addInteraction(this._linePickInteraction),e.steps.next(),this._linePickInteraction.on("picked",function(t){var i,r=e._origFeature=t.feature;e._origGeometry=r.getGeometry().clone(),e._showSelection(e._origGeometry,300),e.map.removeInteraction(this),e._pointLayer?e._pointPickInteraction=new a({layers:[e._pointLayer]}):e._pointPickInteraction=new l,e.steps.next(),e._pointPickInteraction.on("picked",function(t){e.map.removeInteraction(this);var n;if(t.feature?(i=t.feature,n=i.getGeometry().getCoordinates()):n=t.coordinate,n){var o=r.getGeometry().getClosestPoint(n),a=s.distance(n,o);if(a<e._minCutPointDistance){var l=e._cut(r.getGeometry(),o);if(l){var c=l[0],u=l[1],h=e.editor.generateId();c.setId(h+"_1"),u.setId(h+"_2");var d=r.getProperties();if(delete d[r.getGeometryName()],e._showSelection(c.getGeometry(),300),setTimeout(function(){e._showSelection(u.getGeometry(),300)},300),"MODONCUT"==e._modType)e.steps.next(),e._selectLineToKeep(c,u).then(function(t){r.setGeometry(t.getGeometry().clone());var n;c.getId()==t.getId()?(delete c,n=u):u.getId()==t.getId()&&(delete u,n=c),e._newFeatures.push(n),n.setProperties(d),e.editingLayer.getSource().addFeatures([n]);var o={added:[n],updated:r,cutfeature:i};e.cutLine(o,e._modType).fail(function(){e._rollBack(),e.rerun()})});else{e.layer.getSource().removeFeature(r),e._newFeatures.push(c),e._newFeatures.push(u),e.editingLayer.getSource().addFeatures([featureToAdd,c]);var p={added:[c,u],removed:r};e.cutLine(p,e._modType).fail(function(){e._rollBack(),e.rerun()})}}else e.rerun()}}}),e.map.addInteraction(e._pointPickInteraction)})},u.pause=function(e){_.isUndefined(e)||e?(this._linePickInteraction.setActive(!1),this._pointPickInteraction.setActive(!1)):(this._linePickInteraction.setActive(!0),this._pointPickInteraction.setActive(!0))},u.rerun=function(){this.stop(),this.run()},u.stop=function(){this._cleanUp();var e=c.prototype.stop.call(this);return e&&(this.map.removeInteraction(this._linePickInteraction),this.map.removeInteraction(this._pointPickInteraction),this._linePickInteraction=null,this._pointPickInteraction=null),e},u._cleanUp=function(){this._origFeature=null,this._origGeometry=null,this._newFeatures=[],this._lineToKeepOverlay.setMap(null),this._selectedLineOverlay.setMap(null)},u._rollBack=function(){this._origFeature.setGeometry(this._origGeometry);try{_.forEach(this._newFeatures,function(e){self.editingLayer.getSource().removeFeature(e)})}catch(e){}},u._cutLine=function(e,t){if("MODONCUT"==t){var i=e.updated,r=e.added[0];this.editor.updateFeature(i),this.editor.addFeature(r)}else{var n=e.removed,o=e.added[0],s=e.added[1];this.editor.deleteFeature(n),this.editor.addFeature(o),this.editor.addFeature(s)}return this._busy=!1,this.pause(!1),this.steps.completed(),this.rerun(),!0},u._selectLineToKeep=function(e,t){var i=$.Deferred(),r=this,n=this._lineToKeepOverlay;n.getSource().addFeatures([e,t]),n.setMap(this.map);var o=new a({layers:[this._lineToKeepOverlay]});return this.map.addInteraction(o),o.on("picked",function(e){n.setMap(null),r.map.removeInteraction(this),i.resolve(e.feature)}),i.promise()},u._fallBack=function(e){this._busy=!1,this.pause(!1)},u._cut=function(e,t){for(;t.length<e.getStride();)t.push(0);var i=1/0,r=0,n=0;e.forEachSegment(function(e,o){var a=s.closestOnSegment(t,[e,o]),l=s.distance(t,a);l<i&&(i=l,r=n),n+=1});var o=e.getCoordinates(),a=o.slice(0,r+1);a.splice(a.length,0,t);var l=o.slice(r);if(l.splice(0,1,t),a.length<2||l.length<2)return!1;var c=new ol.geom.LineString;c.setCoordinates(a);var u=new ol.geom.LineString;u.setCoordinates(l);var h=new ol.Feature({geometry:c}),d=new ol.Feature({geometry:u});return[h,d]},u._showSelection=function(e,t){var i=this,t=t||null,r=this._selectedLineOverlay,n=new ol.Feature;n.setGeometry(e),r.getSource().addFeatures([n]),r.setMap(this.map),t&&setTimeout(function(){r.setMap(null),i._selectedLineOverlay.getSource().clear()},t)},u._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))},r.steps=[{type:"selectline"},{type:"selectcutpoint"},{type:"selectparttokeep"}]},{"./tool":27,"core/geometry/geom":29,"core/utils/utils":49,"g3w-ol3/src/interactions/pickcoordinatesinteraction":56,"g3w-ol3/src/interactions/pickfeatureinteraction":57,"gui/gui":71}],22:[function(e,t,i){var r=function(e,t,i){this.type=e,this.features=t,this.coordinate=i},n=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:n.handleDownEvent_,handleMoveEvent:n.handleMoveEvent_,handleUpEvent:n.handleUpEvent_,handleEvent:n.handleEvent_}),this.previousCursor_=void 0,this.lastCoordinate_=null,this.features_=void 0!==e.features?e.features:null};ol.inherits(n,ol.interaction.Pointer),n.handleEvent_=function(e){return"keydown"!=e.type?ol.interaction.Pointer.handleEvent.call(this,e):this.features_.getArray().length&&46==e.originalEvent.keyCode?(this.dispatchEvent(new r("deleteend",this.features_,event.coordinate)),!0):void 0},n.handleDownEvent_=function(e){return this.lastFeature_=this.featuresAtPixel_(e.pixel,e.map),!!this.lastFeature_&&(n.handleMoveEvent_.call(this,e),this.dispatchEvent(new r("deleteend",this.features_,e.coordinate)),!0)},n.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=e.map.forEachFeatureAtPixel(e.pixel,function(e){return e});i?(this.previousCursor_=t.style.cursor,t.style.cursor="pointer"):(t.style.cursor=void 0!==this.previousCursor_?this.previousCursor_:"",this.previousCursor_=void 0)},n.prototype.featuresAtPixel_=function(e,t){var i=null,r=t.forEachFeatureAtPixel(e,function(e){return e});return this.features_&&_.includes(this.features_.getArray(),r)&&(i=r),i},t.exports=n},{}],23:[function(e,t,i){function r(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this.setters={deleteFeature:r.prototype._deleteFeature},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("gui/gui"),l=e("./deletefeatureinteraction");n(r,s),t.exports=r;var c=r.prototype;ol.geom.GeometryType={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"};var u={},h=[255,255,255,1],d=[255,0,0,1],p=3;u[ol.geom.GeometryType.POLYGON]=[new ol.style.Style({fill:new ol.style.Fill({color:[255,255,255,.5]})})],u[ol.geom.GeometryType.MULTI_POLYGON]=u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]=[new ol.style.Style({stroke:new ol.style.Stroke({color:h,width:p+2})}),new ol.style.Style({stroke:new ol.style.Stroke({color:d,width:p})})],u[ol.geom.GeometryType.MULTI_LINE_STRING]=u[ol.geom.GeometryType.LINE_STRING],u[ol.geom.GeometryType.CIRCLE]=u[ol.geom.GeometryType.POLYGON].concat(u[ol.geom.GeometryType.LINE_STRING]),u[ol.geom.GeometryType.POINT]=[new ol.style.Style({image:new ol.style.Circle({radius:2*p,fill:new ol.style.Fill({color:d}),stroke:new ol.style.Stroke({color:h,width:p/2})}),zIndex:1/0})],u[ol.geom.GeometryType.MULTI_POINT]=u[ol.geom.GeometryType.POINT],u[ol.geom.GeometryType.GEOMETRY_COLLECTION]=u[ol.geom.GeometryType.POLYGON].concat(u[ol.geom.GeometryType.LINE_STRING],u[ol.geom.GeometryType.POINT]),u[ol.geom.GeometryType.POLYGON]=_.concat(u[ol.geom.GeometryType.POLYGON],u[ol.geom.GeometryType.LINE_STRING]),u[ol.geom.GeometryType.GEOMETRY_COLLECTION]=_.concat(u[ol.geom.GeometryType.GEOMETRY_COLLECTION],u[ol.geom.GeometryType.LINE_STRING]),c.run=function(){var e=this,t=a.getComponent("map").getService().viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click,style:function(e,t){return u[e.getGeometry().getType()]}}),t.addInteraction(this._selectInteraction),this._deleteInteraction=new l({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._deleteInteraction);this._deleteInteraction.on("deleteend",function(t){var i=t.features.getArray()[0],r=e._isNew(i);e._busy||(e._busy=!0,e.pause(!0),e.deleteFeature(i,r).always(function(){e._busy=!1,e.pause(!1)}))})},c.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._deleteInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._deleteInteraction.setActive(!0))},c.stop=function(){var e=a.getComponent("map").getService().viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),this._selectInteraction=null,e.removeInteraction(this._deleteInteraction),this._deleteInteraction=null,!0},c._deleteFeature=function(e,t){return this.editor.deleteFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},c._fallBack=function(e){this._busy=!1,this.pause(!1)},c._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"./deletefeatureinteraction":22,"core/g3wobject":28,"core/utils/utils":49,"gui/gui":71}],24:[function(e,t,i){function r(e,t){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._deleteCondition=t.deleteCondition||void 0,this._snap=t.snap||null,this._snapInteraction=null,this.setters={modifyFeature:r.prototype._modifyFeature},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("gui/gui");n(r,s),t.exports=r;var l=r.prototype;l.run=function(){var e=this,t=a.getComponent("map").getService().viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer]}),t.addInteraction(this._selectInteraction),this._modifyInteraction=new ol.interaction.Modify({features:this._selectInteraction.getFeatures(),deleteCondition:this._deleteCondition}),t.addInteraction(this._modifyInteraction);var i=null;this._modifyInteraction.on("modifystart",function(e){var t=e.features.getArray()[0];i=t.getGeometry().clone()}),this._modifyInteraction.on("modifyend",function(t){var r=t.features.getArray()[0],n=e._isNew(r);e._busy||(e._busy=!0,e.pause(!0),e.modifyFeature(r,n).fail(function(){r.setGeometry(i)}).always(function(){e._busy=!1,e.pause(!1)}))}),this._snap&&(this._snapInteraction=new ol.interaction.Snap({source:this._snap.vectorLayer.getSource()}),t.addInteraction(this._snapInteraction))},l.pause=function(e){_.isUndefined(e)||e?(this._snapInteraction&&this._snapInteraction.setActive(!1),this._selectInteraction.setActive(!1),this._modifyInteraction.setActive(!1)):(this._snapInteraction&&this._snapInteraction.setActive(!0),this._selectInteraction.setActive(!0),this._modifyInteraction.setActive(!0))},l.stop=function(){var e=a.getComponent("map").getService().viewer.map;return this._selectInteraction.getFeatures().clear(),this._snapInteraction&&(e.removeInteraction(this._snapInteraction),this._snapInteraction=null),e.removeInteraction(this._selectInteraction),this._selectInteraction=null,e.removeInteraction(this._modifyInteraction),this._modifyInteraction=null,!0},l._modifyFeature=function(e,t){return this.editor.updateFeature(e,t),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l.removePoint=function(e){if(this._modifyInteraction)try{this._modifyInteraction.removePoint()}catch(t){console.log(t)}},l._fallBack=function(e){this._busy=!1,this.pause(!1)},l._isNew=function(e){return!_.isNil(this.editingLayer.getSource().getFeatureById(e.getId()))}},{"core/g3wobject":28,"core/utils/utils":49,"gui/gui":71}],25:[function(e,t,i){function r(e){this.editor=e,this.isPausable=!0,this.drawInteraction=null,this.layer=null,this.editingLayer=null,this._origGeometry=null,this.setters={moveFeature:{fnc:r.prototype._moveFeature,fallback:r.prototype._fallBack}},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("gui/gui");n(r,s),t.exports=r;var l=r.prototype;l.run=function(){var e=this,t=a.getComponent("map").getService().viewer.map;this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this._selectInteraction=new ol.interaction.Select({layers:[this.layer,this.editingLayer],condition:ol.events.condition.click}),t.addInteraction(this._selectInteraction),this._translateInteraction=new ol.interaction.Translate({features:this._selectInteraction.getFeatures()}),t.addInteraction(this._translateInteraction),this._translateInteraction.on("translatestart",function(t){var i=t.features.getArray()[0];e._origGeometry=i.getGeometry().clone(),e.editor.emit("movestart",i)}),this._translateInteraction.on("translateend",function(t){var i=t.features.getArray()[0];e._busy||(e._busy=!0,e.pause(),e.moveFeature(i).then(function(t){e.pause(!1)}).fail(function(){i.setGeometry(e._origGeometry)}))})},l.pause=function(e){_.isUndefined(e)||e?(this._selectInteraction.setActive(!1),this._translateInteraction.setActive(!1)):(this._selectInteraction.setActive(!0),this._translateInteraction.setActive(!0))},l.stop=function(){var e=a.getComponent("map").getService().viewer.map;return this._selectInteraction.getFeatures().clear(),e.removeInteraction(this._selectInteraction),this._selectInteraction=null,e.removeInteraction(this._translateInteraction),this._translateInteraction=null,!0},l._moveFeature=function(e){return this.editor.emit("moveend",e),this.editor.updateFeature(e),this._selectInteraction.getFeatures().clear(),this._busy=!1,this.pause(!1),!0},l._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"core/g3wobject":28,"core/utils/utils":49,"gui/gui":71}],26:[function(e,t,i){function r(e){this.editor=e,this.isPausable=!0,this.pickFeatureInteraction=null,this._running=!1,this._busy=!1,this.setters={pickFeature:s},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").noop,a=e("core/g3wobject"),l=e("g3w-ol3/src/interactions/pickfeatureinteraction"),c=e("gui/gui");n(r,a),t.exports=r;var u=r.prototype;u.run=function(){var e=this,t=[this.editor.getVectorLayer().getLayer(),this.editor.getEditVectorLayer().getLayer()];this.pickFeatureInteraction=new l({layers:t}),this.pickFeatureInteraction.on("picked",function(t){e._busy||(e._busy=!0,e.pause(!0),e.pickFeature(t.feature).then(function(t){e._busy=!1,e.pause(!1)}))}),c.getComponent("map").getService().pushInteraction(this.pickFeatureInteraction)},u.pause=function(e){_.isUndefined(e)||e?this.pickFeatureInteraction.setActive(!1):this.pickFeatureInteraction.setActive(!0)},u.stop=function(){return c.getComponent("map").getService().popInteraction(),!0},u._fallBack=function(e){this._busy=!1,this.pause(!1)}},{"core/g3wobject":28,"core/utils/utils":49,"g3w-ol3/src/interactions/pickfeatureinteraction":57,"gui/gui":71}],27:[function(e,t,i){function r(e,t){this.editor=e,this.layer=this.editor.getVectorLayer().getLayer(),this.editingLayer=this.editor.getEditVectorLayer().getLayer(),this.map=GUI.getComponent("map").getService().viewer.map,this.isPausable=!1,this.options=t||{},this.steps=null,o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject");n(r,s);var a=r.prototype;a.stop=function(){return this.steps&&this.steps.destroy(),!0},r.Steps=function(e){var t=-1,e=e;this.next=function(){t+=1;var i=e[t];this.emit("step",t,i)},this.currentStep=function(){return e[t]},this.currentStepIndex=function(){return t},this.totalSteps=function(){return e.length},this.reset=function(){t=0},this.destroy=function(){this.removeAllListeners()},this.completed=function(){this.emit("complete"),this.reset()},this.insertStepAt=function(t,i){e.splice(t,0,i)}},n(r.Steps,s),t.exports=r},{"core/g3wobject":28,"core/utils/utils":49}],28:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").noop,o=function(){this.setters&&this._setupListenersChain(this.setters)};r(o,EventEmitter);var s=o.prototype;s.onafter=function(e,t){return this._onsetter("after",e,t,!1)},s.onbefore=function(e,t){return this._onsetter("before",e,t,!1)},s.onbeforeasync=function(e,t){return this._onsetter("before",e,t,!0)},s.un=function(e,t){_.forEach(this.settersListeners,function(i,r){_.forEach(i[e],function(e){e.key==t&&delete e})})},s._onsetter=function(e,t,i,r){var n=this.settersListeners[e],o=""+Math.floor(1e6*Math.random())+Date.now();return n[t].push({key:o,fnc:i,async:r}),o},s._setupListenersChain=function(e){var t=this;this.settersListeners={after:{},before:{}},_.forEach(e,function(e,i){var r=n,o=n;_.isFunction(e)?r=e:(r=e.fnc,o=e.fallback||n),t.settersListeners.after[i]=[],t.settersListeners.before[i]=[],t[i]=function(){function e(){c=r.apply(t,a),l.resolve(c);var e=t.settersListeners.after[i];_.forEach(e,function(e,i){e.fnc.apply(t,a)})}function n(){o.apply(t,a),l.reject()}function s(r){var o=!0;_.isBoolean(r)&&(o=r);var l=Array.prototype.slice.call(a);if(o===!1||u==h.length)o===!1?n.apply(t,a):(completed=e.apply(t,a),(_.isUndefined(completed)||completed===!0)&&t.emitEvent("set:"+i,a));else if(o){var c=h[u].fnc;if(h[u].async)l.push(s),u+=1,c.apply(t,l);else{var d=c.apply(t,l);u+=1,s(d)}}}var a=arguments,l=$.Deferred(),c=null,u=0,h=this.settersListeners.before[i];return u=0,s(),l.promise()}})},t.exports=o},{"core/utils/utils":49}],29:[function(e,t,i){var r={distance:function(e,t){return Math.sqrt(r.squaredDistance(e,t))},squaredDistance:function(e,t){var i=e[0],r=e[1],n=t[0],o=t[1],s=n-i,a=o-r;return s*s+a*a},closestOnSegment:function(e,t){var i,r,n=e[0],o=e[1],s=t[0],a=t[1],l=s[0],c=s[1],u=a[0],h=a[1],d=u-l,p=h-c,f=0===d&&0===p?0:(d*(n-l)+p*(o-c))/(d*d+p*p||0);return f<=0?(i=l,r=c):f>=1?(i=u,r=h):(i=l+f*d,r=c+f*p),[i,r]}};t.exports=r},{}],30:[function(e,t,i){var r={};r.GeometryTypes={POINT:"Point",MULTIPOINT:"MultiPoint",LINESTRING:"Line",MULTILINESTRING:"MultiLine",POLYGON:"Polygon",MULTIPOLYGON:"MultiPolygon",GEOMETRYCOLLECTION:"GeometryCollection"},r.SupportedGeometryTypes=[r.GeometryTypes.POINT,r.GeometryTypes.MULTIPOINT,r.GeometryTypes.LINESTRING,r.GeometryTypes.MULTILINESTRING,r.GeometryTypes.POLYGON,r.GeometryTypes.MULTIPOLYGON],t.exports=r},{}],31:[function(e,t,i){function r(e){i18next.use(i18nextXHRBackend).init({lng:"it",ns:"app",fallbackLng:"it",resources:e.resources}),jqueryI18next.init(i18next,$,{tName:"t",i18nName:"i18n",handleName:"localize",selectorAttr:"data-i18n",targetAttr:"data-i18n-target",optionsAttr:"data-i18n-options",useOptionsAttr:!1,parseDefaultValueFromContent:!0})}var n=function(e){var t=i18next.t(e);return t};t.exports={init:r,t:n}},{}],32:[function(e,t,i){var r={PICKED:"picked"},n=function(e,t){this.type=e,this.coordinate=t},o=function(e){this.previousCursor_=null,ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_})};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){
return!0},o.handleUpEvent_=function(e){return this.dispatchEvent(new n(r.PICKED,e.coordinate)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement();t.style.cursor="pointer"},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e)},t.exports=o},{}],33:[function(e,t,i){var r={PICKED:"picked"},n=function(e,t,i){this.type=e,this.feature=i,this.coordinate=t},o=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_}),this.features_=e.features||null,this.layers_=e.layers||null,this.pickedFeature_=null;var t=this;this.layerFilter_=function(e){return _.includes(t.layers_,e)}};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return this.pickedFeature_=this.featuresAtPixel_(e.pixel,e.map),!0},o.handleUpEvent_=function(e){return this.pickedFeature_&&this.dispatchEvent(new n(r.PICKED,e.coordinate,this.pickedFeature_)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=this.featuresAtPixel_(e.pixel,e.map);i?t.style.cursor="pointer":t.style.cursor=""},o.prototype.featuresAtPixel_=function(e,t){var i=null,r=t.forEachFeatureAtPixel(e,function(e){return this.features_?this.features_.indexOf(e)>-1?e:null:e},this,this.layerFilter_);return r&&(i=r),i},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e)},t.exports=o},{}],34:[function(e,t,i){var r=(e("core/utils/utils").inherit,e("core/utils/utils").base,e("core/g3wobject"),e("core/geometry/geometry").GeometryTypes,{QUERY:1,EDIT:2});LayerState={},LayerState.ServerTypes={OGC:"OGC",QGIS:"QGIS",Mapserver:"Mapserver",Geoserver:"Geoserver",ArcGIS:"ArcGIS"},LayerState.getGeometryType=function(e){return e.geometrytype},LayerState.getAttributes=function(e){var t=[];return e.attributes&&(t=_.map(e.attributes,function(e){return e.name})),t},LayerState.isQueryable=function(e){var t=!1,i=!!(e.capabilities&&e.capabilities&&r.QUERY);if(i)var t=e.visible&&!e.disabled||e.infowhennotvisible&&e.infowhennotvisible===!0;return t},LayerState.getQueryLayerName=function(e){var t;return t=e.infolayer&&""!=e.infolayer?e.infolayer:e.name},LayerState.getServerType=function(e){return e.servertype&&""!=e.servertype?e.servertype:LayerState.ServerTypes.QGIS},LayerState.isExternalWMS=function(e){return e.source&&e.source.url},LayerState.getWMSLayerName=function(e){var t=e.name;return e.source&&e.source.layers&&(t=e.source.layers),t},LayerState.getOriginURL=function(e){var t;return e.source&&"wms"==e.source.type&&e.source.url&&(t=e.source.url),t},t.exports=LayerState},{"core/g3wobject":28,"core/geometry/geometry":30,"core/utils/utils":49}],35:[function(e,t,i){function r(e){var e=e||{};this.geometrytype=e.geometrytype||null,this.format=e.format||null,this.crs=e.crs||null,this.id=e.id||null,this.name=e.name||"",this.pk=e.pk||"id",this._olSource=new ol.source.Vector({features:new ol.Collection}),this._olLayer=new ol.layer.Vector({name:this.name,source:this._olSource}),this._PKinAttributes=!1,this._featuresFilter=null,this._fields=null,this.lazyRelations=!0,this._relations=null}var n=e("core/utils/utils").inherit,o=(e("core/utils/utils").truefnc,e("core/utils/utils").resolve),s=(e("core/utils/utils").reject,e("core/g3wobject"));n(r,s),t.exports=r;var a=r.prototype;a.setData=function(e){var t,i=this;if(this.format){switch(this.format){case"GeoJSON":var r=new ol.format.GeoJSON({defaultDataProjection:this.crs,geometryName:"geometry"});t=r.readFeatures(e)}if(t&&t.length){if(!_.isNull(this._featuresFilter))var t=_.map(t,function(e){return i._featuresFilter(e)});var n=this.getFeatureIds(),o=_.filter(t,function(e){return!_.includes(n,e.getId())});this._olSource.addFeatures(o);var s=this.getSource().getFeatures()[0].getProperties();this._PKinAttributes=!!_.get(s,this.pk)}}else console.log("VectorLayer format not defined")},a.setFeatureData=function(e,t,i,r){var n=this.getFeatureById(e);if(t&&n.setId(t),i&&n.setGeometry(i),r){var o=n.getProperties(),s=_.assign(o,r);n.setProperties(s)}return n},a.addFeatures=function(e){this.getSource().addFeatures(e)},a.setFeaturesFilter=function(e){this._featuresFilter=e},a.setFields=function(e){this._fields=e},a.setPkField=function(){var e=this,t=!1;_.forEach(this._fields,function(i){i.name==e.pk&&(t=!0)}),t||this._fields},a.getFeatures=function(){return this.getSource().getFeatures()},a.getFeatureIds=function(){var e=_.map(this.getSource().getFeatures(),function(e){return e.getId()});return e},a.getFields=function(){return _.cloneDeep(this._fields)},a.getFieldsNames=function(){return _.map(this._fields,function(e){return e.name})},a.getFieldsWithAttributes=function(e){var t,i,r=this,n=_.cloneDeep(this._fields);return e instanceof ol.Feature?t=e:e&&(t=this.getFeatureById(e)),t&&(i=t.getProperties()),_.forEach(n,function(e){t?this._PKinAttributes||e.name!=r.pk?e.value=i[e.name]:e.value=t.getId():e.value=null}),n},a.setRelations=function(e){_.forEach(e,function(e,t){e.name=t}),this._relations=e},a.getRelations=function(){return this._relations},a.hasRelations=function(){return!_.isNull(this._relations)},a.getRelationsNames=function(){return _.keys(this._relations)},a.getRelationsFksKeys=function(){var e=[];return _.forEach(this._relations,function(t){e.push(t.fk)}),e},a.getRelationFieldsNames=function(e){var t=this._relations[e];return t?_.map(t,function(e){return e.name}):null},a.getRelationsWithAttributes=function(e){var t=_.cloneDeep(this._relations);if(!e||!this.getFeatureById(e))return _.forEach(t,function(e,t){_.forEach(e.fields,function(e){e.value=null})}),o(t);if(this.lazyRelations){var i=$.Deferred(),r=this.getFeatureById(e).getProperties(),n={};return _.forEach(t,function(e,t){e.url;_.forEach(e.fk,function(e){n[e]=r[e]})}),this.getRelationsWithAttributesFromFks(n).then(function(e){i.resolve(e)}).fail(function(){i.reject()}),i.promise()}},a.getRelationsWithAttributesFromFks=function(e){var t=_.cloneDeep(this._relations),i=[];return _.forEach(t,function(t,r){var n=t.url,o=[];_.forEach(t.fk,function(t){var i=e[t];o.push(t+"="+i)});var s=_.join(o,"&");n+="?"+s,i.push($.get(n).then(function(e){_.forEach(t.fields,function(t){t.value=e[0][t.name]})}))}),$.when.apply(this,i).then(function(){return t})},a.setStyle=function(e){this._olLayer.setStyle(e)},a.getLayer=function(){return this._olLayer},a.getSource=function(){return this._olLayer.getSource()},a.getFeatureById=function(e){return this._olLayer.getSource().getFeatureById(e)},a.clear=function(){this.getSource().clear()},a.addToMap=function(e){e.addLayer(this._olLayer)},a.featureHasRelationsFksWithValues=function(e){var t=e.getProperties(),i=this.getRelationsFksKeys();return _.every(i,function(e){var i=t[e];return!_.isNil(i)&&""!=i})},a.getRelationsFksWithValuesForFeature=function(e){var t=e.getProperties(),i={},r=this.getRelationsFksKeys();return _.forEach(r,function(e){i[e]=t[e]}),i}},{"core/g3wobject":28,"core/utils/utils":49}],36:[function(e,t,i){function r(e,t){this.LAYERTYPE={LAYER:"layer",MULTILAYER:"multilayer"},this.extraParams=t,this.layers=[],o(this,e)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/geo"),a=e("core/layer/layerstate"),l=e("core/map/maplayer"),c=e("g3w-ol3/src/layers/rasters");n(r,l);var u=r.prototype;u.getOLLayer=function(){var e=this._olLayer;return e||(e=this._olLayer=this._makeOlLayer()),e},u.getSource=function(){return this.getOLLayer().getSource()},u.getInfoFormat=function(){return"application/vnd.ogc.gml"},u.getGetFeatureInfoUrl=function(e,t,i,r){return this.getOLLayer().getSource().getGetFeatureInfoUrl(e,t,i,r)},u.getLayerConfigs=function(){return this.layers},u.addLayer=function(e){this.layers.push(e)},u.toggleLayer=function(e){_.forEach(this.layers,function(t){t.id==e.id&&(t.visible=e.visible)}),this._updateLayers()},u.update=function(e,t){this._updateLayers(e,t)},u.isVisible=function(){return this._getVisibleLayers().length>0},u.getQueryUrl=function(){var e=this.layers[0];return e.infourl&&""!=e.infourl?e.infourl:this.config.url},u.getQueryLayers=function(){var e=(this.layers[0],[]);return _.forEach(this.layers,function(t){a.isQueryable(t)&&e.push({layerName:a.getWMSLayerName(t),queryLayerName:a.getQueryLayerName(t),geometryType:a.getGeometryType(t),attributes:a.getAttributes(t)})}),e},u._makeOlLayer=function(){var e=this,t={url:this.config.url,id:this.config.id},i=this.layers[0];i.source&&"wms"==i.source.type&&i.source.url&&(t.url=i.source.url);var r=new c.WMSLayer(t,this.extraParams);return r.getSource().on("imageloadstart",function(){e.emit("loadstart")}),r.getSource().on("imageloadend",function(){e.emit("loadend")}),r},u._getVisibleLayers=function(e){var t=[];return _.forEach(this.layers,function(i){var r=!i.maxresolution||i.maxresolution&&i.maxresolution>e.resolution;i.visible&&r&&t.push(i)}),t},u.checkLayerDisabled=function(e,t){var i=s.resToScale(t),r=!0;e.maxresolution&&(r=r&&e.maxresolution>t),e.minresolution&&(r=r&&e.minresolution<t),e.minscale&&(r=r&&e.minscale>i),e.maxscale&&(r=r&&e.maxscale<i),e.disabled=!r},u.checkLayersDisabled=function(e){var t=this;_.forEach(this.layers,function(i){t.checkLayerDisabled(i,e)})},u._updateLayers=function(e,t){this.checkLayersDisabled(e.resolution);var i=this._getVisibleLayers(e);if(i.length>0){var r={LAYERS:_.join(_.map(i,function(e){return a.getWMSLayerName(e)}),",")};t&&(r=_.assign(r,t)),this._olLayer.setVisible(!0),this._olLayer.getSource().updateParams(r)}else this._olLayer.setVisible(!1)},t.exports=r},{"core/layer/layerstate":34,"core/map/maplayer":37,"core/utils/geo":48,"core/utils/utils":49,"g3w-ol3/src/layers/rasters":59}],37:[function(e,t,i){function r(e){this.config=e||{},this.id=e.id,this._olLayer=null,o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject");n(r,s);var a=r.prototype;a.getId=function(){return this.id},t.exports=r},{"core/g3wobject":28,"core/utils/utils":49}],38:[function(e,t,i){function r(){o(this),this._mapsServices={},this.addMap=function(e){this._registerMapService(e)},this._registerMapService=function(e){var e=this._mapsServices[e.id];_.isUndefined(e)&&(this._mapsServices[e.id]=e)}}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject");n(r,s),t.exports=r},{"core/g3wobject":28,"core/utils/utils":49}],39:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/g3wobject"),s=function(){this.name="(no name)",this.config=null,n(this)};r(s,o);s.prototype;t.exports=s},{"core/g3wobject":28,"core/utils/utils":49}],40:[function(e,t,i){function r(){var e=this;this.config=null,this._plugins={},this.setters={registerPlugin:function(t){e._plugins[t.name]||(e._plugins[t.name]=t,console.log("Registrato plugin "+t.name))}},n(this),this.init=function(e){var t=this;this.pluginsBaseUrl=e.plusingBaseUrl,this.pluginsConfigs=e.pluginsConfigs,_.forEach(this.pluginsConfigs,function(e,i){t._setup(i,e)})},this._setup=function(e,t){if(t){var i=this.pluginsBaseUrl+"plugins/"+e+"/plugin.js";$script(i)}},this.getPluginConfig=function(e){return this.pluginsConfigs[e]},this.activate=function(e){var t=e.getTools();t.length&&ToolsService.registerToolsProvider(e)}}var n=e("core/utils/utils").base,o=e("core/utils/utils").inherit,s=e("core/g3wobject");e("core/applicationservice");o(r,s),t.exports=new r},{"core/applicationservice":17,"core/g3wobject":28,"core/utils/utils":49}],41:[function(e,t,i){function r(e){function t(e){_.forIn(e,function(e,r){_.isNil(e.id)||(i._layers[e.id]=e),_.isNil(e.nodes)||t(e.nodes)})}var i=this;this.state=e,this._layers={},t(e.layerstree),this.setters={setLayersVisible:function(e,t){_.forEach(e,function(e){i._layers[e.id].visible=t})},setBaseLayer:function(e){_.forEach(i.state.baseLayers,function(t){t.visible=t.id==e})},setLayerSelected:function(e){_.forEach(this._layers,function(t){t.selected=e.id==t.id})}},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils//utils").base,s=e("core/g3wobject");e("core/applicationservice");n(r,s);var a=r.prototype;a.getGid=function(){return this.state.gid},a.getLayer=function(e){return this._layers[e]},a.getLayers=function(){return this._layers},a.getLayerById=function(e){var t=null;return _.forEach(this.getLayers(),function(i){i.id==e&&(t=i)}),t},a.getLayerByName=function(e){var t=null;return _.forEach(this.getLayers(),function(i){i.name==e&&(t=i)}),t},a.getQueryableLayers=function(){var e=[];return _.forEach(this.getLayers(),function(t){LayerState.isQueryable(t)&&e.push(t)}),e},a.getLayerAttributes=function(e){return this._layers[e].attributes},a.getLayerAttributeLabel=function(e,t){var i="";return _.forEach(this._layers[e].attributes,function(e){e.name==t&&(i=e.label)}),i},a.toggleLayer=function(e,t){var t=t||!e.visible;this.setLayersVisible([e],t)},a.toggleLayers=function(e,t){this.setLayersVisible(e,t)},a.selectLayer=function(e){this.setLayerSelected(e)},a.unselectLayer=function(e){_.forEach(this.getLayers(),function(t){t==e&&(t.selected=!1)})},a.getSelectedLayers=function(){var e=[];return _.forEach(this.getLayers(),function(t){t.selected&&e.push(t)}),e},a.setGetWmsUrl=function(e){this._getWmsUrlFnc=e},a.getWmsUrl=function(){return this._getWmsUrlFnc(this.state)},a.getLegendUrl=function(e){var t=this.getWmsUrl();return sep=t.indexOf("?")>-1?"&":"?",this.getWmsUrl()+sep+"SERVICE=WMS&VERSION=1.3.0&REQUEST=GetLegendGraphic&SLD_VERSION=1.1.0&FORMAT=image/png&TRANSPARENT=true&ITEMFONTCOLOR=white&LAYERTITLE=False&ITEMFONTSIZE=10&LAYER="+e.name},t.exports=r},{"core/applicationservice":17,"core/g3wobject":28,"core/utils//utils":49,"core/utils/utils":49}],42:[function(e,t,i){function r(){this.config=null,this.initialized=!1,this.projectType=null,this.setters={setCurrentProject:function(e){this.state.currentProject=e}},this.state={baseLayers:{},minScale:null,maxscale:null,currentProject:null},this._pendingProjects=[],this._projects={},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=(e("core/utils/utils").resolve,e("core/utils/utils").reject),a=e("core/g3wobject"),l=e("core/project/project");n(r,a);var c=r.prototype;c.init=function(e){var t=this;if(!this.initialized)return this.initialized=!0,this.config=e,this.setupState(),this.getProject(e.initproject).then(function(e){t.setCurrentProject(e),t.setProjectType(e.state.type)})},c.setProjectType=function(e){this.projectType=e},c.setupState=function(){var e=this;e.state.baseLayers=e.config.baselayers,e.state.minScale=e.config.minscale,e.state.maxScale=e.config.maxscale,e.state.crs=e.config.crs,e.state.proj4=e.config.proj4,e.config.projects.forEach(function(t){t.baselayers=e.config.baselayers,t.minscale=e.config.minscale,t.maxscale=e.config.maxscale,t.crs=e.config.crs,t.proj4=e.config.proj4,e._pendingProjects.push(t)})},c.getProjectType=function(){return this.projectType},c.getPendingProjects=function(){return this._pendingProjects()},c.getCurrentProject=function(){return this.state.currentProject},c.getProject=function(e){var t=this,i=$.Deferred(),r=!1,n=null;return this._pendingProjects.forEach(function(i){i.gid==e&&(r=i,n=t._projects[e])}),r?n?i.resolve(n):this._getProjectFullConfig(r).then(function(e){var n=_.merge(r,e);t._buildProjectTree(n);var o=new l(n);return o.setGetWmsUrl(t.config.getWmsUrl),t._projects[n.gid]=o,i.resolve(o)}):s("Project doesn't exist")},c._getProjectFullConfig=function(e){var t=$.Deferred(),i=this.config.getProjectConfigUrl(e);return $.get(i).done(function(e){t.resolve(e)}),t.promise()},c._buildProjectTree=function(e){function t(e){_.forIn(e,function(r,n){if(!_.isNil(r.id)){var o=_.merge(r,i[r.id]);e[parseInt(n)]=o,r.selected=!1,r.disabled=!1}_.isNil(r.nodes)||(r.title=r.name,t(r.nodes))})}var i=_.keyBy(e.layers,"id"),r=_.cloneDeep(e.layerstree);t(r),e.layerstree=r},t.exports=new r},{"core/g3wobject":28,"core/project/project":41,"core/utils/utils":49}],43:[function(e,t,i){var r={QDJANGO:"qdjango",OGR:"ogr"};t.exports=r},{}],44:[function(e,t,i){function r(){self=this,this.submitGetFeatureInfo=function(e){var t=e.url||"",i=e.querylayer||null,r=e.filter||null,n=e.bbox||s.getCurrentProject().state.extent.join(","),o=null,a=e.crs||"4326;";return $.get(t,{SERVICE:"WMS",VERSION:"1.3.0",REQUEST:"GetFeatureInfo",LAYERS:i,QUERY_LAYERS:i,FEATURE_COUNT:o||50,INFO_FORMAT:"application/vnd.ogc.gml",CRS:"EPSG:"+a,FILTER:r,BBOX:n})},this.doSearch=function(e){var t=e.url,i=e.querylayer,r=e.filterObject,n=e.crs,o=this.createFilter(r,i),s=this.submitGetFeatureInfo({url:t,crs:n,filter:o,querylayer:i});return s},this.createFilter=function(e,t){function i(e){var t,r=[],n="",o="",s="";return _.forEach(e,function(e,l,c){t=a[l],_.forEach(e,function(e){_.forEach(e,function(t,l,c){_.isArray(t)?n=i(c):("LIKE"!=l&&"ILIKE"!=l||(o="%"),filterOp=a[l],_.forEach(e,function(e,t,i){_.forEach(e,function(e,t,i){s=isNaN(e)?"'":"",n='"'+t+'" '+filterOp+" "+s+o+e+o+s})})),r.push(n)})}),t=r.join(" "+t+" ")}),t}var r=[];return r=t+":"+i(e)}}var n=e("core/utils/utils").inherit,o=(e("core/utils/utils").base,e("core/g3wobject")),s=(e("core/utils/utils").resolve,e("core/project/projectsregistry")),a={eq:"=",gt:">",gte:">=",lt:"<",lte:"=<",LIKE:"LIKE",ILIKE:"ILIKE",AND:"AND",OR:"OR",NOT:"!="};n(r,o),t.exports=new r},{"core/g3wobject":28,"core/project/projectsregistry":42,"core/utils/utils":49}],45:[function(e,t,i){function r(){var e=this,t=$.Deferred();this.doSearch=function(e){var t=e.servertype,i=e.url,r=e.querylayer,n=e.filterObject,o=e.crs;c.srsName+=o||"4326";var s,l;switch(t){case"OGC":return l=this.createStandardFilter(n,r),s=this.standardSearch(i,l),a(s);case"qgis":return l=this.createQgisFilter(n),s=this.qgisSearch(r,i,l),a(s);case"mapserver":return l=this.createMapserverFilter(n),s=this.mapserverSearch(r,i,l),a(s);case"geoserver":return l=this.createGeoserverFilter(n),s=this.geoserverSearch(r,i,l),a(s);default:return!1}},this.standardSearch=function(e,t){console.log(t)},this.createStandardFilter=function(e,t){function i(e){var t,r=[],n="";return _.forEach(e,function(e,o,s){t=u[o],_.forEach(e,function(e){_.forEach(e,function(t,o,s){_.isArray(t)?n=i(s):(n=u[o],_.forEach(e,function(e,t,i){_.forEach(e,function(e,t,i){n=n(t,e)})})),r.push(n)})}),t=r.length>1?t.apply(this,r):r[0]}),t}c.featureTypes.push(t);var r=[];return c.filter=i(e),r=(new ol.format.WFS).writeGetFeature(c)},this.qgisSearch=function(i,r){return $.get(searchUrl).then(function(t){e.emit("searchdone",t)}),t.promise()},this.createQGisFilter=function(e){var t;return t},this.mapserverSearch=function(e,i,r){return t.promise()},this.createMapserverFilter=function(e){var t;return t},this.geoserverSearch=function(e,i,r){return t.promise()},this.createGeoserverFilter=function(e){var t;return t},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("core/utils/utils").resolve,l=ol.format.ogc.filter,c={srsName:"EPSG:",featureNS:"",featurePrefix:"",featureTypes:[],outputFormat:"application/json",filter:null},u={eq:l.equalTo,gt:l.greaterThan,gte:l.greaterThanOrEqualTo,lt:l.lessThan,lte:l.lessThanOrEqualTo,like:l.like,ilike:"",bbox:l.bbox,AND:l.and,OR:l.or,NOT:l.not};(function(){var e={propertyName:"<PropertyName>[PROP]</PropertyName>",literal:"<Literal>[VALUE]</Literal>"};return{eq:"<PropertyIsEqualTo>"+e.propertyName+e.literal+"</PropertyIsEqualTo>",gt:"<PropertyIsGreaterThan>"+e.propertyName+e.literal+"</PropertyIsGreaterThan>",gte:"",lt:"",lte:"",like:"",ilike:"",AND:"<And>[AND]</And>",OR:"<Or>[OR]</Or>"}})();n(r,s),t.exports=new r},{"core/g3wobject":28,"core/utils/utils":49}],46:[function(e,t,i){function r(){var e=this;this.url="",this.filterObject={},this.queryFilterObject={},this.init=function(e){this.map=e},this.setFilterObject=function(e){this.filterObject=e},this.getFilterObject=function(){return this.filterObject},this.createQueryFilterFromConfig=function(e){function t(e){return evalObject={},_.forEach(e,function(e,t){if(_.isArray(e))return i(t,e)}),n=e.attribute,r=e.op,evalObject[r]={},evalObject[r][n]=null,evalObject}function i(e,i){return s={},s[e]=[],_.forEach(i,function(i){s[e].push(t(i))}),s}var r,n,o={},s={};return _.forEach(e,function(e,t,r){o=i(t,e)}),o},this.createQueryFilterObject=function(e,t){var i=(a.getCurrentProject(),this.getLayerInfoUrlFromProjectConfig(e));return{type:"standard",url:i.url,querylayer:i.name,servertype:i.servertype,crs:i.crs,filterObject:t}},this.getLayerInfoUrlFromProjectConfig=function(e){var t={},i=a.getCurrentProject(),r=i.getLayerById(e);return r&&(t.name=r.name,t.crs=i.state.crs,t.servertype=r.servertype,r.source&&r.source.url?t.url=r.source.url:t.url=i.getWmsUrl()),t},this._parseLayerFeatureCollection=function(e,t){var i=e.queryLayerName,r=_.cloneDeep(t);r.FeatureCollection.featureMember=[];var n=t.FeatureCollection.featureMember;n=_.isArray(n)?n:[n],_.forEach(n,function(e){var t=_.get(e,i);t&&r.FeatureCollection.featureMember.push(e)});var o=new X2JS,s=o.json2xml_str(r),a=new ol.format.WMSGetFeatureInfo;return a.readFeatures(s)},this._parseLayermsGMLOutput=function(e,t){var i=new ol.format.WMSGetFeatureInfo({layers:[e.queryLayerName]});return i.readFeatures(t)},this.getGetFeatureInfoUrl=function(e,t){var i=this.map.getView().getResolution(),r=this.map.getView().getProjection().getCode(),n={QUERY_LAYERS:_.map(e.getQueryLayers(),"queryLayerName"),INFO_FORMAT:e.getInfoFormat(),FI_POINT_TOLERANCE:10,FI_LINE_TOLERANCE:10,FI_POLYGON_TOLERANCE:10},o=e.getGetFeatureInfoUrl(t,i,r,n);return o},this.handleQueryResponseFromServer=function(t,i){var r,n={},o=$.Deferred(),s=new X2JS;try{r=_.isString(t)?s.xml_str2json(t):s.xml2json(t)}catch(l){o.reject(l)}var c,u,h=_.keys(r)[0];switch(h){case"FeatureCollection":c=this._parseLayerFeatureCollection,u=r;break;case"msGMLOutput":c=this._parseLayermsGMLOutput,u=t}var d=0;_.forEach(i,function(t){var i=c.call(e,t,u);d+=i.length,n[t.layerName]=i});var p,f=a.getCurrentProject().getLayers(),g=[];return _.forEach(n,function(e,t){_.forEach(f,function(e,i){return e.name==t?(p=e,!0):e.source&&e.source.layers==t?(p=e,!0):void 0}),g.push({layer:p,features:e})}),o.resolve(g),o.promise()},this.queryByFilter=function(e){var t=this,i=$.Deferred(),r=u[e.servertype];return r.doSearch(e).then(function(r){var n=[],o={};o.queryLayerName=o.layerName=e.querylayer,n.push(o),t.handleQueryResponseFromServer(r,n).then(function(t){i.resolve({data:t,query:{filter:e}})})}).fail(function(e){i.reject(e)}),i.promise()},this.queryByLocation=function(e,t){var i=this,r=$.Deferred(),n={};_.forEach(t,function(e){var t=e.getQueryUrl(),i=t.hashCode().toString();_.keys(n).indexOf(i)==-1&&(n[i]={url:t,mapLayers:[]}),n[i].mapLayers.push(e)});var o=[];return _.forEach(n,function(t){var r=t.mapLayers[0],n=i.getGetFeatureInfoUrl(r,e),s=n.split("?")[0],a=n.split("?")[1],l={};_.forEach(a.split("&"),function(e){var t=e.split("="),i=t[0],r=t[1];l[i]=r});var c=[];if(_.forEach(t.mapLayers,function(e){var t=e.getQueryLayers();t.length&&(c=_.concat(c,t))}),c.length){delete l.STYLES,l.LAYERS=_.map(c,"queryLayerName"),l.QUERY_LAYERS=_.map(c,"queryLayerName"),l.FEATURE_COUNT=1e3;var u=s,h=[];_.forEach(l,function(e,t){h.push(t+"="+e)}),u=s+"?"+h.join("&"),o.push({url:u,queryLayers:c})}}),o.length>0?_.forEach(o,function(t){var n=t.url,o=t.queryLayers;$.get(n).then(function(t){i.handleQueryResponseFromServer(t,o,e).then(function(t){r.resolve({data:t,query:{coordinates:e}})})}).fail(function(e){r.reject(e)})}):r.resolve(e,0,{}),r.promise()},this.queryByBoundingBox=function(e){},this._query=function(e,t){var i,r=a.getCurrentProject();i=t?[r.getLayer(t)]:r.getLayers()},this.showQueryResults=function(e){},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("core/project/projectsregistry"),l=e("./queryWFSProvider"),c=e("./queryQGISWMSProvider"),u=(e("sdk/gui/componentsregistry"),{QGIS:c,OGC:l});n(r,s),t.exports=new r},{"./queryQGISWMSProvider":44,"./queryWFSProvider":45,"core/g3wobject":28,"core/project/projectsregistry":42,"core/utils/utils":49,"sdk/gui/componentsregistry":68}],47:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/utils/utils").Base64,s=e("core/g3wobject"),a=function(){var e=this;this._route="",this.setters={setRoute:function(e){this._route=e}},History.Adapter.bind(window,"statechange",function(){var t=History.getState(),i=t.hash;e.setRouteFromHash(i)}),n(this)};r(a,s);var l=a.prototype;l.initRoute=function(){var e=window.location.search;this.setRouteFromHash(e)},l["goto"]=function(e){var t=o.encode(e);History.pushState({path:e},null,"?p="+t)},l.setRouteFromHash=function(e){var t=this.getQueryParams(e).p,i=t?o.decode(t):"";this.setRoute(i)},l.slicePath=function(e){return e.split("?")[0].split("/")},l.sliceFirst=function(e){var t=e.split("?"),i=t[1],r=t[0].split("/"),n=r[0];return e=r.slice(1).join("/"),e=[e,i].join("?"),[n,e]},l.getQueryParams=function(e){var t={};try{var i=e.split("?")[1],r=i.split("&"),t={};_.forEach(r,function(e){var i=e.split("="),r=i[0],n=i[1];t[r]=n})}catch(n){}return t},l.getQueryString=function(e){return e.split("?")[1]},l.makeQueryString=function(e){},t.exports=new a},{"core/g3wobject":28,"core/utils/utils":49}],48:[function(e,t,i){var r=.28;t.exports={resToScale:function(e,t){var i,t=t||"m";switch(t){case"m":var i=1e3*e/r}return i}}},{}],49:[function(e,t,i){function r(e,t,i){return"undefined"==typeof i||0===+i?Math[e](t):(t=+t,i=+i,isNaN(t)||"number"!=typeof i||i%1!==0?NaN:(t=t.toString().split("e"),t=Math[e](+(t[0]+"e"+(t[1]?+t[1]-i:-i))),t=t.toString().split("e"),+(t[0]+"e"+(t[1]?+t[1]+i:i))))}Math.round10||(Math.round10=function(e,t){return r("round",e,t)}),Math.floor10||(Math.floor10=function(e,t){return r("floor",e,t)}),Math.ceil10||(Math.ceil10=function(e,t){return r("ceil",e,t)}),String.prototype.hashCode=function(){var e,t,i,r=0;if(0===this.length)return r;for(e=0,i=this.length;e<i;e++)t=this.charCodeAt(e),r=(r<<5)-r+t,r|=0;return r};var n={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t,i,r,o,s,a,l,c="",u=0;for(e=n._utf8_encode(e);u<e.length;)t=e.charCodeAt(u++),i=e.charCodeAt(u++),r=e.charCodeAt(u++),o=t>>2,s=(3&t)<<4|i>>4,a=(15&i)<<2|r>>6,l=63&r,isNaN(i)?a=l=64:isNaN(r)&&(l=64),c=c+this._keyStr.charAt(o)+this._keyStr.charAt(s)+this._keyStr.charAt(a)+this._keyStr.charAt(l);return c},decode:function(e){var t,i,r,o,s,a,l,c="",u=0;for(e=e.replace(/[^A-Za-z0-9+\/=]/g,"");u<e.length;)o=this._keyStr.indexOf(e.charAt(u++)),s=this._keyStr.indexOf(e.charAt(u++)),a=this._keyStr.indexOf(e.charAt(u++)),l=this._keyStr.indexOf(e.charAt(u++)),t=o<<2|s>>4,i=(15&s)<<4|a>>2,r=(3&a)<<6|l,c+=String.fromCharCode(t),64!=a&&(c+=String.fromCharCode(i)),64!=l&&(c+=String.fromCharCode(r));return c=n._utf8_decode(c)},_utf8_encode:function(e){e=e.replace(/rn/g,"n");for(var t="",i=0;i<e.length;i++){var r=e.charCodeAt(i);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t},_utf8_decode:function(e){for(var t="",i=0,r=c1=c2=0;i<e.length;)r=e.charCodeAt(i),r<128?(t+=String.fromCharCode(r),i++):r>191&&r<224?(c2=e.charCodeAt(i+1),t+=String.fromCharCode((31&r)<<6|63&c2),i+=2):(c2=e.charCodeAt(i+1),c3=e.charCodeAt(i+2),t+=String.fromCharCode((15&r)<<12|(63&c2)<<6|63&c3),i+=3);return t}},o={mixin:function(e,t){return o.merge(e.prototype,t)},mixininstance:function(e,t){var i=new t;o.merge(e,i),o.merge(e.prototype,t.prototype)},merge:function(e,t){var i;for(i in t)o.hasOwn(t,i)&&(e[i]=t[i])},hasOwn:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},inherit:function(e,t){function i(){}i.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new i,e.prototype.constructor=e},base:function(e,t,i){var r=arguments.callee.caller;if(r.superClass_)return r.superClass_.constructor.apply(e,Array.prototype.slice.call(arguments,1));for(var n=Array.prototype.slice.call(arguments,2),o=!1,s=e.constructor;s;s=s.superClass_&&s.superClass_.constructor)if(s.prototype[t]===r)o=!0;else if(o)return s.prototype[t].apply(e,n);if(e[t]===r)return e.constructor.prototype[t].apply(e,n);throw Error("base called from a method of one name to a method of a different name")},noop:function(){},truefnc:function(){return!0},falsefnc:function(){return!0},resolve:function(e){var t=$.Deferred();return t.resolve(e),t.promise()},reject:function(e){var t=$.Deferred();return t.reject(e),t.promise()},Base64:n};t.exports=o},{}],50:[function(e,t,i){var r=function(e){var t=e.name||"?";if(this.name=t.split(" ").join("-").toLowerCase(),this.id=this.name+"_"+Math.floor(1e6*Math.random()),!e.element){var i="ol-"+this.name.split(" ").join("-").toLowerCase(),n=e.tipLabel||this.name,o=e.label||"?";e.element=$('<div class="'+i+' ol-unselectable ol-control"><button type="button" title="'+n+'">'+o+"</button></div>")[0]}var s=e.buttonClickHandler||r.prototype._handleClick.bind(this);$(e.element).on("click",s),ol.control.Control.call(this,e),this._postRender()};ol.inherits(r,ol.control.Control);var n=r.prototype;n._handleClick=function(){var e=this,t=this.getMap(),i=null,r=t.getControls();r.forEach(function(t){t.id&&t.toggle&&t.id!=e.id&&(t.toggle(!1),"reset"==t.name&&(i=t))}),!e._toggled&&i&&i.toggle(!0)},n._postRender=function(){},t.exports=r},{}],51:[function(e,t,i){var r=e("./control"),n=function(e){this._toggled=this._toggled||!1,this._interaction=e.interaction||null,this._autountoggle=e.autountoggle||!1,e.buttonClickHandler=n.prototype._handleClick.bind(this),r.call(this,e)};ol.inherits(n,r);var o=n.prototype;o.toggle=function(e){var e=void 0!==e?e:!this._toggled;this._toggled=e;var t=this.getMap(),i=$(this.element).find("button").first();e?(this._interaction&&t.addInteraction(this._interaction),i.addClass("g3w-ol-toggled")):(this._interaction&&t.removeInteraction(this._interaction),i.removeClass("g3w-ol-toggled"))},o._handleClick=function(e){this.toggle(),r.prototype._handleClick.call(this,e)},t.exports=n},{"./control":50}],52:[function(e,t,i){var r=e("../utils"),n=e("./interactioncontrol"),o=e("../interactions/pickcoordinatesinteraction"),s=function(e){var t=this,i={name:"querylayer",tipLabel:"Query layer",label:"",interaction:new o};e=r.merge(e,i),n.call(this,e),this._interaction.on("picked",function(e){t.dispatchEvent({type:"picked",coordinates:e.coordinate}),t._autountoggle&&t.toggle()})};ol.inherits(s,n),t.exports=s},{"../interactions/pickcoordinatesinteraction":56,"../utils":61,"./interactioncontrol":51}],53:[function(e,t,i){var r=e("../utils"),n=e("./interactioncontrol"),o=function(e){this._toggled=!0,this._startCoordinate=null;var t={name:"reset",tipLabel:"Pan",label:""};e=r.merge(e,t),n.call(this,e)};ol.inherits(o,n),t.exports=o;var s=o.prototype;s._postRender=function(){this.toggle(!0)}},{"../utils":61,"./interactioncontrol":51}],54:[function(e,t,i){var r=e("../utils"),n=e("./interactioncontrol"),o=function(e){var t=this;this._startCoordinate=null;var i={name:"zoombox",tipLabel:"Zoom to box",label:"",interaction:new ol.interaction.DragBox};e=r.merge(e,i),n.call(this,e),this._interaction.on("boxstart",function(e){t._startCoordinate=e.coordinate}),this._interaction.on("boxend",function(e){var i=t._startCoordinate,r=e.coordinate,n=ol.extent.boundingExtent([i,r]);t.dispatchEvent({type:"zoomend",extent:n}),t._startCoordinate=null,t._autountoggle&&t.toggle()})};ol.inherits(o,n),t.exports=o},{"../utils":61,"./interactioncontrol":51}],55:[function(e,t,i){var r=e("./utils"),n=e("./map/maphelpers");!function(e,r,n){"function"==typeof define&&define.amd?define(n):"object"==typeof i?t.exports=n():r[e]=n()}("g3wol3",this,function(){"use strict";var e=r.merge({},n);return{helpers:e}})},{"./map/maphelpers":60,"./utils":61}],56:[function(e,t,i){arguments[4][32][0].apply(i,arguments)},{dup:32}],57:[function(e,t,i){var r={PICKED:"picked"},n=function(e,t,i){
this.type=e,this.feature=i,this.coordinate=t},o=function(e){ol.interaction.Pointer.call(this,{handleDownEvent:o.handleDownEvent_,handleUpEvent:o.handleUpEvent_,handleMoveEvent:o.handleMoveEvent_}),this.features_=e.features||null,this.layers_=e.layers||null,this.pickedFeature_=null;var t=this;this.layerFilter_=function(e){return _.includes(t.layers_,e)}};ol.inherits(o,ol.interaction.Pointer),o.handleDownEvent_=function(e){return this.pickedFeature_=this.featuresAtPixel_(e.pixel,e.map),!0},o.handleUpEvent_=function(e){return this.pickedFeature_&&this.dispatchEvent(new n(r.PICKED,e.coordinate,this.pickedFeature_)),!0},o.handleMoveEvent_=function(e){var t=e.map.getTargetElement(),i=this.featuresAtPixel_(e.pixel,e.map);i?t.style.cursor="pointer":t.style.cursor=""},o.prototype.featuresAtPixel_=function(e,t){var i=null,r=t.forEachFeatureAtPixel(e,function(e){return this.features_?this.features_.indexOf(e)>-1?e:null:e},this,this.layerFilter_);return r&&(i=r),i},o.prototype.shouldStopEvent=function(){return!1},o.prototype.setMap=function(e){if(!e){var t=this.getMap().getTargetElement();t.style.cursor=""}ol.interaction.Pointer.prototype.setMap.call(this,e)},t.exports=o},{}],58:[function(e,t,i){var r={};r.OSM=new ol.layer.Tile({source:new ol.source.OSM({attributions:[new ol.Attribution({html:'All maps &copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'}),ol.source.OSM.ATTRIBUTION],url:"http://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png",crossOrigin:null}),id:"osm",title:"OSM",basemap:!0}),r.BING={},r.BING.Road=new ol.layer.Tile({name:"Road",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Road"}),basemap:!0}),r.BING.AerialWithLabels=new ol.layer.Tile({name:"AerialWithLabels",visible:!0,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"AerialWithLabels"}),basemap:!0}),r.BING.Aerial=new ol.layer.Tile({name:"Aerial",visible:!1,preload:1/0,source:new ol.source.BingMaps({key:"Am_mASnUA-jtW3O3MxIYmOOPLOvL39dwMvRnyoHxfKf_EPNYgfWM9imqGETWKGVn",imagerySet:"Aerial"}),basemap:!0}),t.exports=r},{}],59:[function(e,t,i){var r=e("../utils"),n={};n.TiledWMSLayer=function(e,t){var i={layerObj:e,extraParams:t||{},tiled:!0};return n._WMSLayer(i)},n.WMSLayer=function(e,t){var i={layerObj:e,extraParams:t||{}};return n._WMSLayer(i)},n._WMSLayer=function(e){var t=e.layerObj,i=e.extraParams,n=e.tiled||!1,o={LAYERS:t.layers||"",VERSION:"1.3.0",TRANSPARENT:!0,SLD_VERSION:"1.1.0"};o=r.merge(o,i);var s,a,l={url:t.url,params:o,ratio:1},c={id:t.id,name:t.name,opacity:t.opacity||1,visible:t.visible,maxResolution:t.maxResolution};n?(a=new ol.source.TileWMS(l),s=ol.layer.Tile):(a=new ol.source.ImageWMS(l),s=ol.layer.Image),c.source=a;var u=new s(c);return u},t.exports=n},{"../utils":61}],60:[function(e,t,i){BaseLayers=e("../layers/bases");var r={createViewer:function(e){return new n(e)}},n=function(e){var t=ol.control.defaults({attributionOptions:{collapsible:!1},zoom:!1,attribution:!1}),i=ol.interaction.defaults().extend([new ol.interaction.DragRotate]);i.removeAt(1);var r;r=e.view instanceof ol.View?e.view:new ol.View(e.view);var n={controls:t,interactions:i,ol3Logo:!1,view:r,keyboardEventTarget:document};e.id&&(n.target=e.id);var o=new ol.Map(n);this.map=o};n.prototype.destroy=function(){this.map&&(this.map.dispose(),this.map=null)},n.prototype.getView=function(){return this.map.getView()},n.prototype.updateMap=function(e){},n.prototype.updateView=function(){},n.prototype.getMap=function(){return this.map},n.prototype.setTarget=function(e){this.map.setTarget(e)},n.prototype.goTo=function(e,t){var i=i||{},r=i.animate||!0,n=this.map.getView();if(r){var o=ol.animation.pan({duration:500,source:n.getCenter()}),t=ol.animation.zoom({duration:500,resolution:n.getResolution()});this.map.beforeRender(o,t)}n.setCenter(e),n.setZoom(t)},n.prototype.goToRes=function(e,t){var i=i||{},r=i.animate||!0,n=this.map.getView();if(r){var o=ol.animation.pan({duration:500,source:n.getCenter()}),s=ol.animation.zoom({duration:500,resolution:n.getResolution()});this.map.beforeRender(o,s)}n.setCenter(e),n.setResolution(t)},n.prototype.fit=function(e,t){var i=this.map.getView(),t=t||{},r=t.animate||!0;if(r){var n=ol.animation.pan({duration:500,source:i.getCenter()}),o=ol.animation.zoom({duration:500,resolution:i.getResolution()});this.map.beforeRender(n,o)}t.animate&&delete t.animate,t.constrainResolution=t.constrainResolution||!1,i.fit(e,this.map.getSize(),t)},n.prototype.getZoom=function(){var e=this.map.getView();return e.getZoom()},n.prototype.getResolution=function(){var e=this.map.getView();return e.getResolution()},n.prototype.getCenter=function(){var e=this.map.getView();return e.getCenter()},n.prototype.getBBOX=function(){return this.map.getView().calculateExtent(this.map.getSize())},n.prototype.getLayerByName=function(e){for(var t=this.map.getLayers(),i=t.getLength(),r=0;r<i;r++)if(e===t.item(r).get("name"))return t.item(r);return null},n.prototype.removeLayerByName=function(e){var t=this.getLayerByName(e);t&&(this.map.removeLayer(t),delete t)},n.prototype.getActiveLayers=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&i.visible&&e.push(t)}),e},n.prototype.removeLayers=function(){this.map.getLayers().clear()},n.prototype.getLayersNoBase=function(){var e=[];return this.map.getLayers().forEach(function(t){var i=t.getProperties();1!=i.basemap&&e.push(t)}),e},n.prototype.addBaseLayer=function(e){var t;t=e?BaseLayers[e]:BaseLayers.BING.Aerial,this.map.addLayer(t)},n.prototype.changeBaseLayer=function(e){var t=this.getLayerByName(layername),i=this.map.getLayers();i.insertAt(0,t)},t.exports=r},{"../layers/bases":58}],61:[function(e,t,i){var r={merge:function(e,t){var i={};for(var r in e)i[r]=e[r];for(var r in t)i[r]=t[r];return i}};t.exports=r},{}],62:[function(e,t,i){t.exports='<!-- item template -->\n<div id="catalog" class="tabbable-panel catalog">\n  <div class="tabbable-line">\n    <ul class="nav nav-tabs" role="tablist">\n      <li role="presentation" class="active"><a href="#tree" aria-controls="tree" role="tab" data-toggle="tab" data-i18n="tree">Data</a></li>\n      <li v-if="hasBaseLayers" role="presentation"><a href="#baselayers" aria-controls="baselayers" role="tab" data-toggle="tab" data-i18n="baselayers">Layer Base</a></li>\n      <li role="presentation"><a href="#legend" aria-controls="legend" role="tab" data-toggle="tab" data-i18n="legend">Legenda</a></li>\n    </ul>\n    <div  class="tab-content">\n      <div role="tabpanel" class="tab-pane active tree" id="tree">\n        <ul class="tree-root">\n          <tristate-tree v-if="!isHidden" :layerstree="layerstree" class="item" v-for="layerstree in layerstree">\n          </tristate-tree>\n        </ul>\n      </div>\n      <div v-if="hasBaseLayers" role="tabpanel" class="tab-pane baselayers" id="baselayers">\n        <form>\n          <ul>\n            <li v-if="!baselayer.fixed" v-for="baselayer in baselayers">\n              <div class="radio">\n                <label><input type="radio" name="baselayer" v-checked="baselayer.visible" @click="setBaseLayer(baselayer.id)">{{ baselayer.title }}</label>\n              </div>\n            </li>\n          </ul>\n        </form>\n      </div>\n      <legend :layerstree="layerstree"></legend>\n    </div>\n  </div>\n</div>\n'},{}],63:[function(e,t,i){function r(e){o(this),this.id="catalog-component",this.title="catalog",this.internalComponent=new u,s(this,e)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/vue/component")),l=(e("gui/gui"),e("core/project/projectsregistry")),c={template:e("./catalog.html"),data:function(){return{project:l.getCurrentProject()}},computed:{layerstree:function(){return this.project.state.layerstree},baselayers:function(){return this.project.state.baselayers},hasBaseLayers:function(){return this.project.state.baselayers.length>0}},methods:{setBaseLayer:function(e){this.project.setBaseLayer(e)}},ready:function(){var e=this;this.$on("treenodetoogled",function(t){e.project.toggleLayer(t)}),this.$on("treenodestoogled",function(t,i){e.project.toggleLayers(t,i)}),this.$on("treenodeselected",function(t){t.selected?e.project.unselectLayer(t):e.project.selectLayer(t)})}},u=Vue.extend(c);Vue.component("g3w-catalog",c),Vue.component("tristate-tree",{template:e("./tristate-tree.html"),props:{layerstree:[],n_parentChilds:0,checked:!1},data:function(){return{expanded:this.layerstree.expanded,parentChecked:!1,n_childs:this.layerstree.nodes?this.layerstree.nodes.length:0}},watch:{checked:function(e){this.layerstree.visible=e}},computed:{isFolder:function(){var e=!!this.n_childs;if(e){var t=0;_.forEach(this.layerstree.nodes,function(e){e.visible&&(t+=1)}),this.n_parentChilds=this.n_childs-t}return e},isHidden:function(){return this.layerstree.hidden&&this.layerstree.hidden===!0},selected:function(){var e=this.layerstree.selected?"SI":"NO";return console.log(e),e}},methods:{toggle:function(e){var t="true"==e;this.isFolder&&!t?this.layerstree.expanded=!this.layerstree.expanded:t?(this.parentChecked&&!this.n_parentChilds?this.parentChecked=!1:this.parentChecked&&this.n_parentChilds?this.parentChecked=!0:this.parentChecked=!this.parentChecked,this.$dispatch("treenodestoogled",this.layerstree.nodes,this.parentChecked)):this.$dispatch("treenodetoogled",this.layerstree)},select:function(){this.isFolder||this.$dispatch("treenodeselected",this.layerstree)},triClass:function(){return this.n_parentChilds?this.n_parentChilds>0&&this.n_parentChilds<this.n_childs?"fa-square":"fa-square-o":"fa-check-square-o"}}}),Vue.component("legend",{template:e("./legend.html"),props:["layerstree"],data:function(){return{}},computed:{visiblelayers:function(){function e(i){_.forIn(i,function(i,r){!_.isNil(i.id)&&i.visible&&t.push(i),_.isNil(i.nodes)||e(i.nodes)})}var t=[],i=this.layerstree;return e(i),t}},watch:{layerstree:{handler:function(e,t){},deep:!0}},ready:function(){}}),Vue.component("legend-item",{template:e("./legend_item.html"),props:["layer"],computed:{legendurl:function(){return l.getCurrentProject().getLegendUrl(this.layer)}},methods:{openform:function(){}}}),n(r,a),t.exports=r},{"./catalog.html":62,"./legend.html":64,"./legend_item.html":65,"./tristate-tree.html":66,"core/i18n/i18n.service":31,"core/project/projectsregistry":42,"core/utils/utils":49,"gui/gui":71,"gui/vue/component":89}],64:[function(e,t,i){t.exports='<div role="tabpanel" class="tab-pane" id="legend">\n  <legend-item :layer="layer" v-for="layer in visiblelayers"></legend-item>\n</div>\n'},{}],65:[function(e,t,i){t.exports='<div @click="openform()">{{ layer.title }}</div>\n<div><img :src="legendurl"></div>\n'},{}],66:[function(e,t,i){t.exports='<li class="tree-item" :class="{selected: layerstree.selected}">\n  <span :class="{bold: isFolder, \'fa-chevron-down\': layerstree.expanded, \'fa-chevron-right\': !layerstree.expanded}" @click="toggle" v-if="isFolder" class="fa"></span>\n  <span v-if="isFolder" @click="toggle(\'true\')" :class="[triClass()]" class="fa"></span>\n  <span v-else @click="toggle" :class="[layerstree.visible  ? \'fa-check-square-o\': \'fa-square-o\',layerstree.disabled  ? \'disabled\': \'\']" class="fa" style="cursor:default"></span>\n  <span id="tree-node-title" :class="{bold: isFolder, disabled: layerstree.disabled}" @click="select">{{layerstree.title}}</span>\n  <ul v-show="layerstree.expanded" v-if="isFolder">\n    <tristate-tree :n_parent-childs.sync="n_parentChilds" :layerstree="layerstree" :checked="parentChecked" v-for="layerstree in layerstree.nodes">\n    </tristate-tree>\n  </ul>\n</li>\n\n\n\n\n'},{}],67:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/g3wobject"),o=function(e){var e=e||{};this.internalComponent=null,this.id=e.id||1e3*Math.random(),this.title=e.title||"",this.state={visible:e.visible||!0,open:e.open||!1}};r(o,n);var s=o.prototype;s.getId=function(){return this.id},s.getTitle=function(){return this.state.title},s.setTitle=function(e){this.state.title=e},s.getService=function(){return this._service},s.setService=function(e){this._service=e},s.mount=function(e){},s.unmount=function(){},s.layout=function(e,t){},t.exports=o},{"core/g3wobject":28,"core/utils/utils":49}],68:[function(e,t,i){function r(){this.components={},this.registerComponent=function(e){var t=e.getId();this.components[t]||(this.components[t]=e)},this.getComponent=function(e){return this.components[e]},this.unregisterComponent=function(e){var t=this._components[e];t&&(_.isFunction(t.destroy)&&t.destroy(),delete t,this._components[e]=null)}}var n=e("core/g3wobject"),o=e("core/utils/utils").inherit;e("core/utils/utils").base;o(r,n),t.exports=new r},{"core/g3wobject":28,"core/utils/utils":49}],69:[function(e,t,i){function r(e){this.internalComponent=null,this.options=e||{},this.id=e.id,this.name=e.name,this.dataid=e.dataid,this.pk=e.pk||null,this.isnew=!(!_.isNil(e.isnew)&&_.isBoolean(e.isnew))||e.isnew,this.state={fields:e.fields,relations:e.relations},this._formPanel=e.formPanel||c,this._defaults=e.defaults||u.defaults}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").resolve,s=(e("core/utils/utils").reject,e("gui/gui")),a=e("gui/panel"),l=e("core/project/projectsregistry");Vue.filter("startcase",function(e){return _.startCase(e)}),Vue.validator("email",function(e){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)}),Vue.validator("integer",function(e){return/^(-?[1-9]\d*|0)$/.test(e)});var c=Vue.extend({template:e("./formpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),s.closeForm()},btnEnabled:function(e){return"save"!=e.type||"save"==e.type&&this.$validation.valid},hasFieldsRequired:function(){return this.$options.form._hasFieldsRequired()},isEditable:function(e){return this.$options.form._isEditable(e)},isSimple:function(e){return this.$options.form._isSimple(e)},isSelect:function(e){return this.$options.form._isSelect(e)},isLayerPicker:function(e){return this.$options.form._isLayerPicker(e)},layerPickerPlaceHolder:function(e){return this.$options.form._getlayerPickerLayerName(e.input.options.layerid)},pickLayer:function(e){this.$options.form._pickLayer(e)},isVisible:function(e){return this.$options.form._isVisible(e)},showRelation:function(e){return this.$options.form._shouldShowRelation(e)}},computed:{isValid:function(e){return this.$validate(e.name)}}}),u={};u.STRING="string",u.INTEGER="integer",u.FLOAT="float",u.defaults={},u.defaults[u.STRING]="",u.defaults[u.INTEGER]=0,u.defaults[u.FLOAT]=0,u.simpleFieldTypes=[u.STRING,u.INTEGER,u.FLOAT],u.SELECT="select",u.LAYERPICKER="layerpicker",u.specialInputs=[u.SELECT,u.LAYERPICKER],n(r,a);var h=r.prototype;h.mount=function(e){this._setupFields();var t=this._setupPanel();return this._mountPanel(t,e),o(!0)},h.unmount=function(){return this.internalComponent.$destroy(!0),this.internalComponent=null,o(!0)},h._isNew=function(){return this.isnew},h._hasFieldsRequired=function(){var e=_.some(this.state.fields,function(e){return e.validate&&e.validate.required}),t=_.some(this.state.relations,function(e){return e.validate&&e.validate.required});return e||t},h._isVisible=function(e){return!(!e.editable&&(""==e.value||_.isNull(e.value)))},h._isEditable=function(e){return e.editable},h._isSimple=function(e){return!_.includes(u.specialInputs,e.input.type)&&_.includes(u.simpleFieldTypes,e.type)},h._isSelect=function(e){return _.includes(u.specialInputs,e.input.type)&&e.input.type==u.SELECT},h._isLayerPicker=function(e){return _.includes(u.specialInputs,e.input.type)&&e.input.type==u.LAYERPICKER},h._pickLayer=function(e){var t=$.Deferred();s.setModal(!1);var i=e.input.options.layerid,r=e.input.options.field,n=l.getCurrentProject().getLayerAttributeLabel(i,e.input.options.field),o=s.getComponent("map").getService();return o.getFeatureInfo(i).then(function(i){var o=i[r]?i[r]:i[n];e.value=o,t.resolve(i)}).always(function(){s.setModal(!0),t.reject()}),t.promise()},h._getDefaultValue=function(e){var t=null;return e.input&&e.input.options&&e.input.options["default"]?t=e.input.options["default"]:this._isSelect(e)&&(t=e.input.options.values[0].key),t},h._getlayerPickerLayerName=function(e){var t=l.getCurrentProject().getLayer(e);return t?t.name:""},h._shouldShowRelation=function(e){return!0},h._setupFields=function(){var e=this,t=_.filter(this.state.fields,function(t){return!e.pk||null!=t.value||t.name!=e.pk});if(_.forEach(t,function(t){if(_.isNil(t.value)){var i=e._getDefaultValue(t);i&&(t.value=i)}}),this.state.relations){var i=this.state.relations;_.forEach(i,function(t){_.forEach(t.fields,function(t){if(_.isNil(t.value)){var i=e._getDefaultValue(t);i&&(t.value=i)}})})}},h._setupPanel=function(){var e=this.internalComponent=new this._formPanel({form:this});return this.options.buttons&&(e.buttons=this.options.buttons),e.state=this.state,e},h._mountPanel=function(e,t){e.$mount().$appendTo(t)},h._getField=function(e){var t=null;return _.forEach(this.state.fields,function(i){i.name==e&&(t=i)}),t},h._getRelationField=function(e,t){var i=null;return _.forEach(this.state.relations,function(r,n){t==n&&_.forEach(r.fields,function(t){t.name==e&&(i=t)})}),i},t.exports={Form:r,FormPanel:c}},{"./formpanel.html":70,"core/project/projectsregistry":42,"core/utils/utils":49,"gui/gui":71,"gui/panel":77}],70:[function(e,t,i){t.exports='<div>\n  <validator name="validation">\n    <form novalidate class="form-horizontal g3w-form">\n      <template v-for="field in state.fields">\n        <div v-if="isVisible(field)" class="form-group has-feedback">\n          <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}<span v-if="field.validate && field.validate.required">*</span></label>\n          <div class="col-sm-8">\n            <input v-if="isSimple(field)" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n            <select v-if="isSelect(field)" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n              <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n            </select>\n            <div v-if="isLayerPicker(field)">\n              <input class="form-control" @click="pickLayer(field)" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" onfocus="blur()" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\'" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n              <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n            </div>\n          </div>\n        </div>\n      </template>\n      <div v-for="relation in state.relations">\n        <div v-if="showRelation(relation)" transition="expand">\n          <div class="g3w-relationname">{{ relation.name | startcase }}</div>\n          <template v-for="relfield in relation.fields">\n            <div v-if="isVisible(relfield)" class="form-group has-feedback">\n              <label :for="relfield.name" class="col-sm-4 control-label">{{relfield.label}}<span v-if="relfield.validate && relfield.validate.required">*</span></label>\n              <div class="col-sm-8">\n                <input v-if="isSimple(relfield)" :field="relfield.name" v-validate="relfield.validate" v-disabled="!isEditable(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n                <select v-if="isSelect(relfield)" :field="relfield.name" v-validate="relfield.validate" v-disabled="!isEditable(relfield)" class="form-control" v-model="relfield.value" :id="relfield.name" :placeholder="relfield.input.label">\n                  <option v-for="relvalue in relfield.input.options.values" value="{{ relvalue.key }}">{{ relvalue.value }}</option>\n                </select>\n                <div v-if="isLayerPicker(relfield)">\n                  <input class="form-control" @click="pickLayer(relfield)" :field="relfield.name" v-validate="relfield.validate" v-disabled="!isEditable(relfield)" onfocus="blur()" style="cursor:pointer" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(relfield) }}\'" v-model="relfield.value" :id="relfield.name" :placeholder="\'[\'+layerPickerPlaceHolder(relfield)+\']\'">\n                  <i class="glyphicon glyphicon-screenshot form-control-feedback"></i>\n                </div>\n              </div>\n            </div>\n          </template>\n        </div>\n      </div>\n      <div class="form-group">\n        <div class="col-sm-offset-4 col-sm-8">\n          <div v-if="hasFieldsRequired" style="margin-bottom:10px">\n            <span>* Campi richiesti</span>\n          </div>\n          <span v-for="button in buttons">\n            <button class="btn " :class="[button.class]" @click.stop.prevent="exec(button.cbk)" v-disabled="!btnEnabled(button)">{{ button.title }}</button>\n          </span>\n        </div>\n      </div>\n    </form>\n  </validator>\n</div>\n'},{}],71:[function(e,t,i){function r(){this.ready=!1,this.getResourcesUrl=n,this.showForm=n,this.closeForm=n,this.showListing=n,this.closeListing=n,this.hideListing=n,this.showQueryResults=function(e){},this.hideQueryResults=n,this.showPanel=n,this.hidePanel=n,this.addComponent=function(e,t){},this.removeComponent=function(e){},this.setComponent=function(e){a.registerComponent(e)},this.getComponent=function(e){return a.getComponent(e)},this.ready=function(){this.emit("ready"),this.ready=!0},this.guiResized=function(){this.emit("guiresized")},r.showSpinner=function(e){},r.hideSpinner=function(e){},this.notify=n,this.dialog=n}var n=e("core/utils/utils").noop,o=e("core/utils/utils").inherit,s=e("core/g3wobject"),a=e("gui/componentsregistry");o(r,s),t.exports=new r},{"core/g3wobject":28,"core/utils/utils":49,"gui/componentsregistry":68}],72:[function(e,t,i){t.exports="<div>\n  Lista di oggetti\n</div>\n"},{}],73:[function(e,t,i){function r(e){this.panelComponent=null,this.options=e||{},this.id=e.id||null,this.name=e.name||null,this.state={list:e.list||[]},this._listPanelComponent=e.listPanelComponent||s}var n=e("core/utils/utils").resolve,o=(e("core/utils/utils").reject,e("gui/gui")),s=Vue.extend({template:e("./listpanel.html"),methods:{exec:function(e){var t=this.state.relations||null;e(this.state.fields,t),o.closeForm()}}}),a=r.prototype;a.onShow=function(e){var t=this._setupPanel();return this._mountPanel(t,e),n(!0)},a.onClose=function(){return this.panelComponent.$destroy(!0),this.panelComponent=null,n(!0)},a._setupPanel=function(){var e=this.panelComponent=new this._listPanelComponent({panel:this});return e.state=this.state,e},a._mountPanel=function(e,t){e.$mount().$appendTo(t)},t.exports={ListPanelComponent:s,ListPanel:r}},{"./listpanel.html":72,"core/utils/utils":49,"gui/gui":71}],74:[function(e,t,i){function r(e){var t=this;this.config,this.viewer,this.target,this.mapLayers={},this.mapBaseLayers={},this.layersAssociation={},this.layersExtraParams={},this.state={bbox:[],resolution:null,center:null,loading:!1},this.config=l.getConfig().map,this._howManyAreLoading=0,this._incrementLoaders=function(){0==this._howManyAreLoading&&this.emit("loadstart"),this._howManyAreLoading+=1},this._decrementLoaders=function(){this._howManyAreLoading-=1,0==this._howManyAreLoading&&this.emit("loadend")},this._interactionsStack=[],_.isNil(e)?this.project=c.getCurrentProject():this.project=e,this.setters={setMapView:function(e,t,i){this.state.bbox=e,this.state.resolution=t,this.state.center=i,this.updateMapLayers(this.mapLayers)},setupViewer:function(e){proj4.defs("EPSG:"+t.project.state.crs,this.project.state.proj4),t.viewer&&(t.viewer.destroy(),t.viewer=null),t._setupViewer(e),t.setupControls(),t.setupLayers(),t.emit("viewerset")}},this._setupViewer=function(e){var i=this.project.state.extent,r=new ol.proj.Projection({code:"EPSG:"+this.project.state.crs,extent:i});this.viewer=d.createViewer({id:this.target,view:{projection:r,center:ol.extent.getCenter(i),extent:i,maxResolution:e}}),this.viewer.map.getView().setResolution(e),this.viewer.map.on("moveend",function(e){t._setMapView()}),m.init(this.viewer.map),this.emit("ready")},this.project.on("projectswitch",function(){t.setupLayers()}),this.project.onafter("setLayersVisible",function(e){var i=_.map(e,function(e){return t.getMapLayerForLayer(e)});t.updateMapLayers(i)}),this.project.onafter("setBaseLayer",function(){t.updateMapLayers(t.mapBaseLayers)}),o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject"),a=e("gui/gui"),l=e("core/applicationservice"),c=e("core/project/projectsregistry"),u=e("core/project/projecttypes"),h=e("core/geometry/geometry").GeometryTypes,d=e("g3w-ol3/src/g3w.ol3").helpers,p=e("g3w-ol3/src/controls/resetcontrol"),f=e("g3w-ol3/src/controls/querycontrol"),g=e("g3w-ol3/src/controls/zoomboxcontrol"),v=e("g3w-ol3/src/interactions/pickcoordinatesinteraction"),y=e("core/layer/wmslayer"),m=e("core/query/queryservice"),b={};b[u.QDJANGO]={},b[u.QDJANGO][h.POINT]="FI_POINT_TOLERANCE",b[u.QDJANGO][h.LINESTRING]="FI_LINE_TOLERANCE",b[u.QDJANGO][h.POLYGON]="FI_POLYGON_TOLERANCE";var w={};w[h.POINT]=5,w[h.LINESTRING]=5,w[h.POLYGON]=5,n(r,s);var L=r.prototype;L.slaveOf=function(e,t){},L.setLayersExtraParams=function(e,t){this.layersExtraParams=_.assign(this.layersExtraParams,e),this.emit("extraParamsSet",e,t)},L.getMap=function(){return this.viewer.map},L.getViewerElement=function(){return this.viewer.map.getTargetElement()},L.getViewport=function(){return this.viewer.map.getViewport()},L.setupControls=function(){var e=this;e.viewer.map;this.config&&this.config.controls&&_.forEach(this.config.controls,function(t){var i;switch(t){case"reset":isMobile.any||(i=new p);break;case"zoom":i=new ol.control.Zoom({zoomInLabel:"",zoomOutLabel:""});break;case"zoombox":isMobile.any||(i=new g,i.on("zoomend",function(t){e.viewer.fit(t.extent)}));break;case"zoomtoextent":i=new ol.control.ZoomToExtent({label:"",extent:e.config.constraintextent});break;case"query":i=new f,i.on("picked",function(t){var i=t.coordinates,r=a.showResultsFactory("query"),n=e.mapLayers,o=e.project.getSelectedLayers();o.length&&_.forEach(o,function(e){_.forEach(n,function(t){if(_.find(t.layers,e))return t.layers=o,!0})});var s=r("interrogazione");m.queryByLocation(i,n,o).then(function(t){s.setQueryResponse(t),e.setupLayers()})});break;case"scaleline":}i&&e.addControl(i)})},L.addControl=function(e){this.viewer.map.addControl(e)},L.setupBaseLayers=function(){var e=this;if(this.project.state.baselayers){var e=this;this.mapBaseLayers={};var t=(c.config.initbaselayer,this.project.state.baselayers);_.forEach(t,function(t){var i=!0;e.project.state.initbaselayer&&(i=t.id==e.project.state.initbaselayer),t.fixed&&(i=t.fixed),t.visible=i}),t.forEach(function(t){var i={url:e.project.getWmsUrl(),id:t.id,tiled:!0},r=new y(i);e.registerListeners(r),r.addLayer(t),e.mapBaseLayers[t.id]=r}),_.forEach(_.values(this.mapBaseLayers).reverse(),function(t){e.viewer.map.addLayer(t.getOLLayer()),t.update(e.state)})}},L.setupLayers=function(){var e=this;this.viewer.removeLayers(),this.setupBaseLayers(),this.mapLayers={},this.layersAssociation={};var t=this.traverseLayersTree(this.project.state.layerstree),i=_.filter(t,function(e){return!_.get(e,"nodes")}),r=_.groupBy(i,function(e){return e.multilayer});return _.forEach(r,function(t,i){var r="layer_"+i,n=_.get(e.mapLayers,r),o=t[0].tiled,s={url:e.project.getWmsUrl(),id:r,tiled:o};n=e.mapLayers[r]=new y(s,e.layersExtraParams),e.registerListeners(n),t.forEach(function(t){n.addLayer(t),e.layersAssociation[t.id]=r})}),_.forEach(_.values(this.mapLayers).reverse(),function(t){e.viewer.map.addLayer(t.getOLLayer()),t.update(e.state,e.layersExtraParams)}),this.mapLayers},L.updateMapLayers=function(e){var t=this;_.forEach(_.values(e),function(e){e.update(t.state,t.layersExtraParams)})},L.getMapLayerForLayer=function(e){return this.mapLayers["layer_"+e.multilayer]},L.traverseLayersTree=function(e){function t(e){_.forIn(e,function(e,r){_.isNil(e.id)||i.unshift(e),_.isNil(e.nodes)||t(e.nodes)})}var i=[];return t(e),i},L.registerListeners=function(e){var t=this;e.on("loadstart",function(){t._incrementLoaders()}),e.on("loadend",function(){t._decrementLoaders(!1)}),this.on("extraParamsSet",function(t,i){i&&e.update(this.state,t)})},L.setTarget=function(e){this.target=e},L.pushInteraction=function(e){if(this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!1)}):t.setActive(!1)}this.viewer.map.addInteraction(e),e.setActive(!0),this._interactionsStack.push(e)},L.popInteraction=function(){var e=this._interactionsStack.pop();if(this.viewer.map.removeInteraction(e),this._interactionsStack.length){var t=this._interactionsStack.slice(-1)[0];_.isArray(t)?_.forEach(t,function(e){e.setActive(!0)}):t.setActive(!0)}},L.goTo=function(e,t){var t=t||6;this.viewer.goTo(e,t)},L.goToWGS84=function(e,t){var e=ol.proj.transform(e,"EPSG:4326","EPSG:"+this.project.state.crs);this.goTo(e,t)},L.extentToWGS84=function(e){return ol.proj.transformExtent(e,"EPSG:"+this.project.state.crs,"EPSG:4326")},L.getFeatureInfo=function(e){var t=this,i=$.Deferred();return this._pickInteraction=new v,this.pushInteraction(this._pickInteraction),this._pickInteraction.on("picked",function(r){t._completeGetFeatureInfo(e,r.coordinate,i)}),i.promise()},L._completeGetFeatureInfo=function(e,t,i){var r=this,n=this.project.state.type,o=this.mapLayers[this.layersAssociation[e]],s=this.viewer.getResolution(),a=r.viewer.map.getView().getProjection().getCode(),l={QUERY_LAYERS:this.project.getLayer(e).name,INFO_FORMAT:"text/xml"};if(n==u.QDJANGO){var c=b[n];if(c){var h=this.project.getLayer(e).geometrytype;l[c[h]]=w[h]}}var d=o.getSource().getGetFeatureInfoUrl(t,s,a,l);$.get(d).then(function(e){var t=new X2JS,r=t.xml2json(e);if(r.GetFeatureInfoResponse.Layer.Feature){var n=r.GetFeatureInfoResponse.Layer.Feature.Attribute,o={};_.forEach(n,function(e){o[e._name]=e._value}),i.resolve(o)}i.reject()}).fail(function(){i.reject()}).always(function(){r.popInteraction(),r._pickInteraction=null})},L.highlightGeometry=function(e,t){var i;e instanceof ol.geom.Geometry?i=e:(format=new ol.format.GeoJSON,i=format.readGeometry(e)),t.zoom&&this.viewer.fit(i);var r=t.duration||4e3;t.fromWGS84&&i.transform("EPSG:4326","EPSG:"+this.project.project.crs);var n=new ol.Feature({geometry:i}),o=new ol.source.Vector;o.addFeatures([n]);var s=new ol.layer.Vector({source:o,style:function(e){var t=[],i=e.getGeometry().getType();if("LineString"==i){var r=new ol.style.Style({stroke:new ol.style.Stroke({color:"rgb(255,255,0)",width:4})});t.push(r)}else if("Point"==i){var r=new ol.style.Style({image:new ol.style.Circle({radius:6,fill:new ol.style.Fill({color:"rgb(255,255,0)"})}),zIndex:1/0});t.push(r)}return t}});s.setMap(this.viewer.map),setTimeout(function(){s.setMap(null)},r)},L.refreshMap=function(){_.forEach(this.mapLayers,function(e){e.getOLLayer().getSource().updateParams({time:Date.now()})})},L.resize=function(e,t){if(!this.viewer){var i=this.project.state.extent,r=ol.extent.getWidth(i)/e,n=ol.extent.getHeight(i)/t,o=Math.max(r,n);this.setupViewer(o)}this.getMap().updateSize(),this._setMapView()},L._setMapView=function(){var e=this.viewer.getBBOX(),t=this.viewer.getResolution(),i=this.viewer.getCenter();this.setMapView(e,t,i)},t.exports=r},{"core/applicationservice":17,"core/g3wobject":28,"core/geometry/geometry":30,
"core/layer/wmslayer":36,"core/project/projectsregistry":42,"core/project/projecttypes":43,"core/query/queryservice":46,"core/utils/utils":49,"g3w-ol3/src/controls/querycontrol":52,"g3w-ol3/src/controls/resetcontrol":53,"g3w-ol3/src/controls/zoomboxcontrol":54,"g3w-ol3/src/g3w.ol3":55,"g3w-ol3/src/interactions/pickcoordinatesinteraction":56,"gui/gui":71}],75:[function(e,t,i){t.exports='<div id="map" style="width:100%;height:100%"></div>\n'},{}],76:[function(e,t,i){function r(e){o(this,e),this.id="map-component",this.title="Catalogo dati",this._service=new l,s(this,e),this.internalComponent=new u({mapService:this._service})}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/gui"),e("gui/vue/component")),l=(e("core/router"),e("g3w-ol3/src/g3w.ol3").helpers,e("core/map/mapsregistry"),e("../mapservice")),c={template:e("./map.html"),ready:function(){var e=this,t=this.$options.mapService;t.setTarget(this.$el.id),t.onafter("setupViewer",function(){t.setTarget(e.$el.id)})}},u=Vue.extend(c);Vue.component("g3w-map",c),n(r,a);var h=r.prototype;h.layout=function(e,t){$("#map").height(t),$("#map").width(e),this._service.resize(e,t)},t.exports=r},{"../mapservice":74,"./map.html":75,"core/i18n/i18n.service":31,"core/map/mapsregistry":38,"core/router":47,"core/utils/utils":49,"g3w-ol3/src/g3w.ol3":55,"gui/gui":71,"gui/vue/component":89}],77:[function(e,t,i){var r=e("core/i18n/i18n.service").t,n=e("core/utils/utils").inherit,o=e("core/utils/utils").resolve,s=e("core/g3wobject"),a=function(e){self=this,this.internalPanel=null;var e=e||{};self.id=e.id||null,self.title=e.title||""};n(a,s);var l=a.prototype;l.getId=function(){return self.id},l.getTitle=function(){return self.title},l.mount=function(e){var t=this.internalPanel;return t.$mount().$appendTo(e),r(),o(!0)},l.unmount=function(){var e=this.internalPanel,t=$.Deferred();return e.$destroy(!0),t.resolve(),t.promise()},l.onResize=function(e,t){},t.exports=a},{"core/g3wobject":28,"core/i18n/i18n.service":31,"core/utils/utils":49}],78:[function(e,t,i){function r(){this.init=function(e){this.clearState()},this.state={layers:[],query:{},querytitle:"",loading:!0},this.setters={setQueryResponse:function(e){this.state.layers=[],this.state.query=e.query,this.digestFeaturesForLayers(e.data),this.state.loading=!1}},this.clearState=function(){this.state={layers:[],query:{},querytitle:"",loading:!0}},this.setTitle=function(e){this.state.querytitle=e||""},this.reset=function(){this.clearState()},this.digestFeaturesForLayers=function(e){var t=this;_.forEach(e,function(e){var i=e.layer,r={title:i.title,id:i.id,attributes:i.attributes,features:[]};_.forEach(e.features,function(e){var t={id:e.getId(),attributes:e.getProperties(),geometry:e.getGeometry()};r.features.push(t)}),t.state.layers.push(r)})},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=(e("gui/gui"),e("core/g3wobject"));e("core/project/projectsregistry");n(r,s),t.exports=r},{"core/g3wobject":28,"core/project/projectsregistry":42,"core/utils/utils":49,"gui/gui":71}],79:[function(e,t,i){t.exports='<!--<div id="search-results">\n  <div v-for="layer in state.layers" style="cursor:pointer">\n    <h4>{{ layer.title }}</h4>\n    <p>Numero di features: {{ layer.features.length }}</p>\n  </div>\n</div>-->\n<div id="search-results" class="queryresults-container">\n  <h3>Risultati {{state.querytitle | lowercase}}</h3>\n  <div v-show="state.loading" class="bar-loader"></div>\n  <ul class="queryresults" id="queryresults">\n    <li v-if="layerHasFeatures(layer)" v-for="layer in state.layers">\n      <div class="box box-primary">\n        <div class="box-header with-border">\n          <h3 class="box-title">{{ layer.title }} ({{layer.features.length}})</h3>\n          <div class="box-tools pull-right">\n            <button class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>\n          </div>\n        </div>\n        <div class="box-body">\n          <table class="table table-striped">\n            <thead>\n              <tr>\n                <th v-for="attribute in attributesSubset(layer.attributes)">{{attribute.label}}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <template v-for="feature in layer.features">\n                <tr>\n                  <td v-for="attribute in attributesSubset(layer.attributes)">\n                    <span>{{feature.attributes[attribute.name]}}</span>\n                    <!--<span v-if="isSimple(layer,feature,attribute)">{{feature.attributes[attribute.name]}}</span>-->\n                    <!--<span v-if="isRoute(layer,feature,attribute)" class="link dashboardlink" @click="goto(layer,feature.attributes[attribute.name])">{{ feature.attributes[attribute.name] }}</span>-->\n                    <!--<img v-if="isPhoto(layer,feature,attribute)" data-url="{{getPhotoUrl(feature.attributes[attribute.name])}}" style="max-width:50px" :src="getPhotoUrl(feature.attributes[attribute.name],thumb)" />-->\n                    <!--<a v-if="isLink(layer,feature,attribute)" href="layer.feature.attributes[attribute.name]" class="glyphicon glyphicon-link"></a>-->\n                  </td>\n                  <td><span @click="toggleFeatureBox(layer,feature)" class="glyphicon glyphicon-option-horizontal link morelink"></span></td>\n              </tr>\n              <tr v-show="collapseFeatureBox(layer,feature)" class="queryresults-featurebox">\n                <td :colspan="attributesSubsetLength(layer.attributes)">\n                  <table>\n                    <tr v-for="attribute in layer.attributes">\n                      <td class="attr-label">{{attribute.label}}</td>\n                      <td class="attr-value">{{feature.attributes[attribute.name]}}</td>\n                    </tr>\n                  </table>\n                </td>\n              </tr>\n              </template>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n\n'},{}],80:[function(e,t,i){function r(e){o(this,e);var t=this;this.id="queryresults",this.title="Query Results",this._service=new l,this.setInternalComponent=function(){this.internalComponent=new u({queryResultsService:this._service}),this.createLayersFeaturesBoxes(),this.internalComponent.querytitle=this._service.state.querytitle},this._service.onafter("setQueryResponse",function(){t.createLayersFeaturesBoxes()}),s(this,e),this.createLayersFeaturesBoxes=function(){var e={},t=this._service.state.layers;_.forEach(t,function(t){_.forEach(t.features,function(i){var r=t.id+"_"+i.id;e[r]={collapsed:!1}})}),this.internalComponent.layersFeaturesBoxes=e}}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=e("gui/vue/component"),l=(e("core/g3wobject"),e("gui/queryresults/queryresultsservice")),c={template:e("./queryresults.html"),data:function(){return{state:this.$options.queryResultsService.state,layersFeaturesBoxes:{}}},replace:!1,methods:{layerHasFeatures:function(e){return!!e.features&&e.features.length>0},attributesSubset:function(e){var t=Math.min(3,e.length)+1;return e.slice(0,t)},attributesSubsetLength:function(e){return this.attributesSubset(e).length},collapseFeatureBox:function(e,t){var i=!0,r=e.id+"_"+t.id;return this.layersFeaturesBoxes[r]&&(i=this.layersFeaturesBoxes[r].collapsed),i},toggleFeatureBox:function(e,t){var i=e.id+"_"+t.id;this.layersFeaturesBoxes[i].collapsed=!this.layersFeaturesBoxes[i].collapsed}}},u=Vue.extend(c);n(r,a),t.exports=r},{"./queryresults.html":79,"core/g3wobject":28,"core/utils/utils":49,"gui/queryresults/queryresultsservice":78,"gui/vue/component":89}],81:[function(e,t,i){function r(){this.init=function(e){var t=e||s.getCurrentProject().state.search;this.state.searches=t},this.state={searches:[]},this.showSearchPanel=function(e){var t=new l;return t.init(e),o.showPanel(t),t},this.cleanSearchPanels=function(){this.state.panels={}},this.stop=function(){var e=$.Deferred();return e.resolve(),e.promise()}}var n=e("core/utils/utils").inherit,o=e("gui/gui"),s=e("core/project/projectsregistry"),a=e("core/g3wobject"),l=e("gui/search/vue/panel/searchpanel");n(r,a),t.exports=r},{"core/g3wobject":28,"core/project/projectsregistry":42,"core/utils/utils":49,"gui/gui":71,"gui/search/vue/panel/searchpanel":83}],82:[function(e,t,i){t.exports='<div class="g3w-search-panel form-group">\n  <h3>{{title}}</h3>\n  <form id="g3w-search-form">\n    <template v-for="forminput in forminputs">\n      <div v-if="forminput.input.type == \'numberfield\'" class="form-group numeric">\n        <label for="{{ forminput.id }} ">{{ forminput.label }}</label>\n        <input type="number" v-model="formInputValues[$index].value" class="form-control" id="{{ forminput.id }}">\n      </div>\n      <div v-if="forminput.input.type == \'textfield\'" class="form-group text">\n        <label for="{{ forminput.id }}">{{ forminput.label }}</label>\n        <input type="text" v-model="formInputValues[$index].value" class="form-control" id="{{ forminput.id }}">\n      </div>\n    </template>\n    <div class="form-group">\n      <button class="btn btn-primary btn-noround" @click="doSearch($event)" data-i18n="dosearch">Search</button>\n    </div>\n  </form>\n</div>\n'},{}],83:[function(e,t,i){function r(){self=this,this.config={},this.filter={},this.id=null,this.querylayerid=null,this.internalPanel=new l,this.init=function(e){this.config=e||{},this.name=this.config.name||this.name,this.id=this.config.id||this.id,this.filter=this.config.options.filter||this.filter,this.querylayerid=this.config.options.querylayerid||this.querylayerid,this.fillInputsFormFromFilter();var t=s.createQueryFilterFromConfig(this.filter);this.internalPanel.filterObject=s.createQueryFilterObject(this.querylayerid,t),this.internalPanel.fillFilterInputsWithValues=this.fillFilterInputsWithValues,this.internalPanel.title=this.name},this.fillInputsFormFromFilter=function(){var e,t=0;_.forEach(this.filter,function(i,r,n){_.forEach(i,function(i){e={},i.id=t,e.type=i.input.type,e.value=null,self.internalPanel.formInputValues.push(e),self.internalPanel.forminputs.push(i),t+=1})})},this.fillFilterInputsWithValues=function(e,t,i){function r(e,t){switch(e){case"numberfield":t=parseInt(t)}return t}return _.forEach(e.filterObject,function(e,n){_.forEach(e,function(e,n){_.forEach(e,function(o,s,a){_.isArray(o)?fillFilterInputsWithValues(e,t,n):_.forEach(o,function(e,o,s){index=i?i+n:n,s[o]=r(t[index].type,t[index].value)})})})}),e}}var n=e("core/utils/utils").inherit,o=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/gui")),s=e("core/query/queryservice"),a=(e("gui/listpanel").ListPanel,e("gui/panel")),l=(e("core/project/projectsregistry"),Vue.extend({template:e("./searchpanel.html"),data:function(){return{title:"",forminputs:[],filterObject:{},formInputValues:[]}},methods:{doSearch:function(e){var t=this;e.preventDefault();var i=o.showResultsFactory("query"),r=i(t.title);this.filterObject=this.fillFilterInputsWithValues(this.filterObject,this.formInputValues),s.queryByFilter(this.filterObject).then(function(e){r.setQueryResponse(e)})}}}));n(r,a),t.exports=r},{"./searchpanel.html":82,"core/i18n/i18n.service":31,"core/project/projectsregistry":42,"core/query/queryservice":46,"core/utils/utils":49,"gui/gui":71,"gui/listpanel":73,"gui/panel":77}],84:[function(e,t,i){t.exports='<div id="g3w-search" class="g3w-search g3w-tools">\n  <ul>\n    <li v-for="search in project.search">\n      <div style="margin-bottom: 5px;" class="search-header tool-header" @click="showSearchPanel(search)">\n        <span style="">{{ search.name }}</span>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],85:[function(e,t,i){function r(e){o(this,e),this.id="search-component",this.title="search",this._service=new c,this.internalComponent=new h({searchesService:this._service}),this.state.visible=l.getCurrentProject().state.search.length>0,s(this,e),this.initService=function(){this._service.init()}}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=(e("core/i18n/i18n.service").t,e("core/utils/utils").resolve,e("gui/vue/component")),l=(e("gui/gui"),e("core/project/projectsregistry")),l=(e("core/g3wobject"),e("gui/search/vue/panel/searchpanel"),e("core/project/projectsregistry")),c=e("gui/search/searchesservice"),u={template:e("./search.html"),data:function(){return{project:l.getCurrentProject().state}},methods:{showSearchPanel:function(e){this.$options.searchesService.showSearchPanel(e)}}},h=Vue.extend(u);n(r,a),t.exports=r},{"./search.html":84,"core/g3wobject":28,"core/i18n/i18n.service":31,"core/project/projectsregistry":42,"core/utils/utils":49,"gui/gui":71,"gui/search/searchesservice":81,"gui/search/vue/panel/searchpanel":83,"gui/vue/component":89}],86:[function(e,t,i){function r(){this.config=null,this._actions={},this.state={toolsGroups:[]},this.setters={addToolGroup:function(e){this.state.toolsGroups.push(e)}},this.addTools=function(e,t){var i=this,r=this._getToolsGroup(e);r||(r={name:e,tools:[]},this.addToolGroup(r)),_.forEach(t,function(e){r.tools.push(e),i._addAction(e)})},this.removeTool=function(e){},this.fireAction=function(e){var t=this._actions[e];t()},this._getToolsGroup=function(e){var t=null;return _.forEach(this.state.toolsGroups,function(i){i.name==e&&(t=i)}),t},this._addAction=function(e){var t=Math.floor(1e6*Math.random())+1;e.actionId=t,this._actions[t]=e.action},o(this)}var n=e("core/utils/utils").inherit,o=e("core/utils/utils").base,s=e("core/g3wobject");n(r,s),t.exports=r},{"core/g3wobject":28,"core/utils/utils":49}],87:[function(e,t,i){t.exports='<div class="g3w-tools">\n  <ul>\n    <li v-for="group in state.toolsGroups">\n      <div data-toggle="collapse" data-target="#{{ group.name }}-tools" class="tool-header">\n        <span style="">{{ group.name }}</span>\n      </div>\n      <div id="{{ group.name }}-tools" class="tool-box collapse">\n        <template v-for="tool in group.tools">\n          <i class="glyphicon glyphicon-cog"></i>\n          <span @click="fireAction(tool.actionId)">{{ tool.name }}</span>\n        </template>\n      </div>\n    </li>\n  </ul>\n</div>\n'},{}],88:[function(e,t,i){function r(e){o(this,e);var t=this;this._service=new l,this.id="tools-component",this.title="tools",this.state.visible=!1,this._service.onafter("addToolGroup",function(){t.state.visible=t._service.state.toolsGroups.length>0}),s(this,e),this.internalComponent=new c({toolsService:this._service}),this.internalComponent.state=this._service.state}var n=(e("core/i18n/i18n.service").t,e("core/utils/utils").inherit),o=e("core/utils/utils").base,s=e("core/utils/utils").merge,a=e("gui/vue/component"),l=e("gui/tools/toolsservice"),c=Vue.extend({template:e("./tools.html"),data:function(){return{state:null}},methods:{fireAction:function(e){this.$options.toolsService.fireAction(e)}}});n(r,a);r.prototype;t.exports=r},{"./tools.html":87,"core/i18n/i18n.service":31,"core/utils/utils":49,"gui/tools/toolsservice":86,"gui/vue/component":89}],89:[function(e,t,i){var r=e("core/utils/utils").inherit,n=e("core/utils/utils").base,o=e("core/utils/utils").resolve,s=(e("core/utils/utils").reject,e("gui/component")),a=function(e){n(this,e)};r(a,s);var l=a.prototype;l.mount=function(e,t){return this.internalComponent||this.setInternalComponent(),t?this.internalComponent.$mount().$appendTo(e):this.internalComponent.$mount(e),o(!0)},l.unmount=function(){return this.internalComponent.$destroy(!0),this.internalComponent=null,o()},t.exports=a},{"core/utils/utils":49,"gui/component":67}],90:[function(e,t,i){Vue.directive("disabled",function(e){e?this.el.setAttribute("disabled","disabled"):this.el.removeAttribute("disabled")}),Vue.directive("checked",function(e){e?this.el.setAttribute("checked","checked"):this.el.removeAttribute("checked")}),Vue.directive("selected-first",function(e){0==e?this.el.setAttribute("selected",""):this.el.removeAttribute("selected")})},{}],91:[function(e,t,i){var r=r||{};r.core={G3WObject:e("core/g3wobject"),utils:e("core/utils/utils"),ApplicationService:e("core/applicationservice"),ApiService:e("core/apiservice"),Router:e("core/router"),ProjectsRegistry:e("core/project/projectsregistry"),Project:e("core/project/project"),QueryService:e("core/query/queryservice"),MapLayer:e("core/map/maplayer"),LayerState:e("core/layer/layerstate"),VectorLayer:e("core/layer/vectorlayer"),WmsLayer:e("core/layer/wmslayer"),Geometry:e("core/geometry/geometry"),geom:e("core/geometry/geom"),PickCoordinatesInteraction:e("core/interactions/pickcoordinatesinteraction"),PickFeatureInteraction:e("core/interactions/pickfeatureinteraction"),i18n:e("core/i18n/i18n.service"),Plugin:e("core/plugin/plugin"),PluginsRegistry:e("core/plugin/pluginsregistry"),Editor:e("core/editing/editor")},r.gui={GUI:e("gui/gui"),Form:e("gui/form").Form,FormPanel:e("gui/form").FormPanel,Panel:e("gui/panel"),vue:{SearchComponent:e("gui/search/vue/search"),CatalogComponent:e("gui/catalog/vue/catalog"),MapComponent:e("gui/map/vue/map"),ToolsComponent:e("gui/tools/vue/tools"),QueryResultsComponent:e("gui/queryresults/vue/queryresults")}},t.exports={core:r.core,gui:r.gui}},{"core/apiservice":16,"core/applicationservice":17,"core/editing/editor":19,"core/g3wobject":28,"core/geometry/geom":29,"core/geometry/geometry":30,"core/i18n/i18n.service":31,"core/interactions/pickcoordinatesinteraction":32,"core/interactions/pickfeatureinteraction":33,"core/layer/layerstate":34,"core/layer/vectorlayer":35,"core/layer/wmslayer":36,"core/map/maplayer":37,"core/plugin/plugin":39,"core/plugin/pluginsregistry":40,"core/project/project":41,"core/project/projectsregistry":42,"core/query/queryservice":46,"core/router":47,"core/utils/utils":49,"gui/catalog/vue/catalog":63,"gui/form":69,"gui/gui":71,"gui/map/vue/map":76,"gui/panel":77,"gui/queryresults/vue/queryresults":80,"gui/search/vue/search":85,"gui/tools/vue/tools":88}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
