!function e(t,i,n){function s(r,a){if(!i[r]){if(!t[r]){var l="function"==typeof require&&require;if(!a&&l)return l(r,!0);if(o)return o(r,!0);var c=new Error("Cannot find module '"+r+"'");throw c.code="MODULE_NOT_FOUND",c}var d=i[r]={exports:{}};t[r][0].call(d.exports,function(e){var i=t[r][1][e];return s(i?i:e)},d,d.exports,e,t,i,n)}return i[r].exports}for(var o="function"==typeof require&&require,r=0;r<n.length;r++)s(n[r]);return s}({1:[function(t,e,i){function n(t){o(this,t),this._formPanel=l}var s=g3wsdk.core.utils.inherit,o=g3wsdk.core.utils.base,r=g3wsdk.gui.FormPanel,a=g3wsdk.gui.Form,l=r.extend({});s(n,a),e.exports=n},{}],2:[function(t,e,i){function n(t){t.formTools=[],o(this,t);var e=function(){a.saveEdits()};this.onafter("addFeature",e),this.onafter("deleteFeature",e),this.onafter("moveFeature",e),this.onafter("pickFeature",e)}var s=g3wsdk.core.utils.inherit,o=g3wsdk.core.utils.base,r=g3wsdk.core.Editor,a=t("../pluginservice");t("./attributesform");s(n,r),e.exports=n},{"../pluginservice":7,"./attributesform":1}],3:[function(t,e,i){var n=g3wsdk.core.utils.inherit,s=g3wsdk.core.utils.base,o=g3wsdk.core.Plugin,r=g3wsdk.gui.GUI,a=g3wsdk.core.ProjectsRegistry,l=t("pluginconfig"),c=t("./pluginservice"),d=t("./panel"),u=function(){s(this),this.name="notes",this.config=null,this.service=null,this.tools=null,this.init=function(){this.setPluginService(c),this.config=this.getPluginConfig(),this.setUpIconUrl(this.config.layers),this.registerPlugin(this.config.gid)&&(r.ready?this.setupGui():r.on("ready",_.bind(this.setupGui,this)),l.customUrlParameters=this.createPluginCustomUrlParameters(),this.service.init(this.config,l))},this.setupGui=function(){var t=r.getComponent("tools"),e=t.getService();this.tools=l.tools(this),this.service.setPluginTools(this.tools),e.addTools(1,"GEONOTES",this.tools)},this.toolsActions={showHideLayer:function(){this.service.showHideLayer(l.layersCode.GEONOTES)},showEditingPanel:function(){var t=new d;this.service.toggleEditing(),r.showPanel(t)}},this.createPluginCustomUrlParameters=function(){var t="&",e=a.getCurrentProject();return t+="project_type="+e.getType()+"&project_id="+e.getId()},this.setUpIconUrl=function(t){_.forEach(t,function(t){l.layers[t.name].iconurl=t.iconurl})},this.setupToolsAction=function(t){_.forEach(t,function(t){})}};n(u,o),function(t){t.init()}(new u)},{"./panel":5,"./pluginservice":7,pluginconfig:6}],4:[function(t,e,i){e.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode, tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode, tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"></img>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div v-show="state.retrievingData" style="color:#ffffff">\n    <!--<button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-success\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>-->\n    <!--<button class="btn btn-danger" v-disabled="!state.hasEdits" @click="saveEdits">{{ savebtnlabel }}</button>-->\n    <span>Caricamento Dati ... </span><img :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],5:[function(t,e,i){function n(){this.id="geonotes-editing-panel",this.name="Gestione dati GEONOTES",this.internalPanel=new c}var s=g3wsdk.core.utils.resolve,o=g3wsdk.core.utils.inherit,r=g3wsdk.gui.GUI,a=g3wsdk.gui.Panel,l=t("./pluginservice"),c=Vue.extend({template:t("./panel.html"),data:function(){return{state:l.state,resourcesurl:r.getResourcesUrl(),editorstoolbars:[{name:"Geonotes",layercode:l.layerCodes.GEONOTES,tools:[{title:"Aggiungi Geonota",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta Geonota",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi Geonota",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita geonota",tooltype:"editattributes",icon:"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){l.toggleEditing()},saveEdits:function(){l.saveEdits()},toggleEditTool:function(t,e){""!=e&&this.state.editing.on&&l.toggleEditTool(t,e)},editingtoolbtnToggled:function(t,e){return this.state.editing.layerCode==t&&this.state.editing.toolType==e},editingtoolbtnEnabled:function(t){return""!=t.tooltype},onClose:function(){l.stop()}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var t="";if(this.state.editing.enabled){if(this.state.editing.toolstep.message){var e=this.state.editing.toolstep.n,i=this.state.editing.toolstep.total,n=this.state.editing.toolstep.message;t='<div style="margin-top:20px">GUIDA STRUMENTO:</div><div><span>['+e+"/"+i+'] </span><span style="color: yellow">'+n+"</span></div>"}}else t='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing';return t}}});o(n,a);var d=a.prototype;d.onShow=function(t){console.log("onshow");var e=this.internalPanel;return e.$mount().$appendTo(t),s(!0)},d.onClose=function(){console.log("close");var t=this,e=$.Deferred();return l.stop().then(function(){t.internalPanel.$destroy(!0),t.internalPanel=null,e.resolve()}).fail(function(){e.reject()}),e.promise()},e.exports=n},{"./panel.html":4,"./pluginservice":7}],6:[function(t,e,i){function n(t){return n=[{layerName:"note",name:"Geonotes",type:"checkbox",isCheck:!1,action:_.bind(t.toolsActions.showHideLayer,t)},{name:"Edita Geonotes",action:_.bind(t.toolsActions.showEditingPanel,t)}]}var s=t("./editors/geonoteseditor"),o=this.layerCodes={GEONOTES:"note"},r={};r[o.GEONOTES]=s;var a={},l={},c={};l[o.GEONOTES]=function(t){var e=t.iconurl||null;return new ol.style.Style({image:new ol.style.Icon({anchor:[.5,.5],src:e})})},a[o.GEONOTES]={layerCode:o.GEONOTES,vector:null,editor:null,iconurl:null,crs:null,style:new ol.style.Style({image:new ol.style.Icon({anchor:[.5,.5],src:"fake.png"})})},e.exports={layersCode:o,layers:a,layersStyle:l,layersEditingStyle:c,editorClass:r,tools:n}},{"./editors/geonoteseditor":2}],7:[function(e,i,n){function s(){var e=this;this._mapService=null,this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this._pluginTools=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null,startingEditingTool:!1,toolstep:{n:null,total:null,message:null}},retrievingData:!1,hasEdits:!1},this._loader=new l;this.init=function(t,e){var i=this;this.config=t,this._crs=null,this._layers=e.layers,this._editorClass=e.editorClass,this.layerCodes=e.layersCode,this._layersStyle=e.layersStyle,this._layersEditingStyle=e.layersEditingStyle,this._customUrlParameters=e.customUrlParameters||null,this._mapService=a.getComponent("map").getService(),_.forEach(this.config.layers,function(t,e){i._layers[e].infourl=t.infourl,i._layers[e].crs="EPSG:"+t.crs,i.setLayerStyle(e)});var n={layers:this._layers,baseurl:this.config.baseurl,mapService:this._mapService};this._loader.init(n),this._loader.on("loadingvectorlayersstart",function(){i.state.retrievingData=!0}),this._loader.on("loadingvectorlayersend",function(){i.state.retrievingData=!1}),this._loader.on("setmode",function(t){switch(t){case"w":i.state.editing.on=!0,i.emit("editingstarted");break;case"r":i.state.editing.on=!1}}),this._mapService.on("pointerInteractionSet",function(t){var e=i._getCurrentEditingLayer();if(e){var n=e.editor.getActiveTool().instance;n&&!n.ownsInteraction(t)&&i._stopEditingTool()}}),this.state.editing.enabled=!0,_.forEach(this._layers,function(e,n){var s=t.layers[n].id,o=t.layers[n].name,r=i._mapService.getProject().getLayerById(s);r?(e.name=r.getOrigName(),e.id=s):(e.name=o,e.id=s)})},this.setPluginTools=function(t){this._pluginTools=t},this.getPluginTools=function(){return this._pluginTools},this.setLayerStyle=function(t){var e=this._layers[t].iconurl,i={iconurl:e},n=this._layersStyle[t](i);this._layers[t].style=n,this._layersEditingStyle[t]=n},this.getLayerStyle=function(t){return this._layers[t].style},this._toggleCheckBoxPluginTool=function(t){var i=e.getPluginTools();_.forEach(i,function(e,n){_.has(e,"type")&&e.layerName==t&&"checkbox"==e.type&&(i[n].isCheck=!0)})},this.isLayerVisible=function(t){var e=this._layers[t].vector;return e.isVisible()},this.showHideLayer=function(t){var e=this,i=null;this._loader.isReady()?(i=this._layers[t].vector,i.setVisible(!i.isVisible())):this._loader.loadLayers("r",this._customUrlParameters).then(function(){e._addToMap()})},this.stop=function(){var t=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){e._stopEditing(),t.resolve()}).fail(function(){t.reject()}):t.resolve(),t.promise()},this.toggleEditing=function(){var t=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return t.promise()},this.saveEdits=function(){this._saveWithoutAsk()},this.toggleEditTool=function(t,e){var i=this,n=this._layers[t];if(n){var s=this._getCurrentEditingLayer();s&&t==s.layerCode?e==s.editor.getActiveTool().getType()?this._stopEditingTool():(this._stopEditingTool(),this._startEditingTool(s,e)):s&&s.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(n,e)}):this._startEditingTool(n,e)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._setUpVectorLayer=function(t,e){this._layers[t].vector=e},this._setUpEditor=function(t){var e=this,i={mapService:e._mapService,formClass:c,editingVectorStyle:this._layersEditingStyle[t]},n=this._layers[t].vector,s=new e._editorClass[t](i);s.setVectorLayer(n),s.on("dirty",function(t){e.state.hasEdits=t}),this._layers[t].editor=s},this._startEditing=function(){if(!this.state.editing.on&&!this.state.retrievingData){var e=this;if(this._loader.isReady()){this._loader.setMode("w");var i=this._loader.getVectorLayersCodes();_.forEach(i,function(t){e._loader.setVectorFeaturesLock(e._layers[t].vector,e._loader.getVectorLayerData(t).featurelocks),e._setUpEditor(t),e._toggleCheckBoxPluginTool(t)}),e.state.editing.on=!0}else this._loader.loadLayers("w",this._customUrlParameters).then(function(t){_.forEach(t,function(t){e._setUpEditor(t),e._toggleCheckBoxPluginTool(t)}),e._addToMap()}).fail(function(){a.notify.error(t("could_not_load_vector_layers"))})}},this._stopEditing=function(t){this._stopEditor(t)&&(_.forEach(this._layers,function(t,i){t.vector;t.editor=null,e._unlockLayer(e._layers[i])}),this._updateEditingState(),this._loader.setMode("r"),e._cleanUp(),e.emit("editingstopped"))},this._cleanUp=function(){this._loader.cleanUpLayers()},this._startEditor=function(t){return!!t.editor.start(this)&&(this._setCurrentEditingLayer(t),!0)},this._startEditingTool=function(t,e,i){this.state.startingEditingTool=!0;var n=!0;return t.editor.isStarted()||(n=this._startEditor(t)),n&&t.editor.setTool(e,i)?(this._updateEditingState(),this.state.startingEditingTool=!1,!0):(this.state.startingEditingTool=!1,!1)},this._stopEditor=function(t){var e=!0,i=this._getCurrentEditingLayer();return i&&(e=i.editor.stop(t),e&&this._setCurrentEditingLayer()),e},this._stopEditingTool=function(){var t=!0,e=this._getCurrentEditingLayer();return e&&(t=e.editor.stopTool(),t&&this._updateEditingState()),t},this._saveWithoutAsk=function(){var t=$.Deferred(),e={};_.forEach(this._layers,function(t,i){t.editor.isDirty()&&(e[i]=t.editor)}),this._saveEdits(e).then(function(e){t.resolve()}).fail(function(e){t.reject()})},this._cancelOrSave=function(t){var e=$.Deferred();try{var i=1;t&&(i=t);var n=this,s={};_.forEach(this._layers,function(t,e){t.editor.isDirty()&&(s[e]=t.editor)}),_.keys(s).length?this._askCancelOrSave(i).then(function(t){"save"===t?n._saveEdits(s).then(function(t){e.resolve()}).fail(function(t){e.reject()}):"nosave"==t?e.resolve():"cancel"==t&&e.reject()}):e.resolve()}catch(o){e.reject()}return e.promise()},this._askCancelOrSave=function(t){var e=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){e.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){e.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){e.resolve("cancel")}}};switch(t){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return a.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),e.promise()},this._saveEdits=function(t){var e=this,i=$.Deferred();return this._sendEdits(t).then(function(n){a.notify.success("I dati sono stati salvati correttamente"),e._commitEdits(t,n),i.resolve()}).fail(function(t){a.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(t){var e=$.Deferred(),i=_.map(t,function(t){return{layername:t.getVectorLayer().name,edits:t.getEditedFeatures()}});return this._postData(i).then(function(t){t.result?e.resolve(t.response):e.reject(t.response)}).fail(function(t){e.reject(t.response)}),e.promise()},this._commitEdits=function(t,e){_.forEach(t,function(t){e&&e["new"]&&_.forEach(e["new"],function(i){var n=i.clientid,s=i.id;t.getEditVectorLayer().setFeatureData(n,s,null,i),_.forEach(e.new_lockids,function(e){t.getVectorLayer().addLockId(e)})}),t.commit()})},this._undoEdits=function(t){var e=this._getCurrentEditingLayer().layerCode;t[e];this._stopEditing(!0)},this._updateEditingState=function(){var t=this._getCurrentEditingLayer();t?(this.state.editing.layerCode=t.layerCode,this.state.editing.toolType=t.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null),this._updateToolStepsState()},this._updateToolStepsState=function(){var t,e=this,i=this._getCurrentEditingLayer();if(i&&(t=i.editor.getActiveTool()),t&&t.getTool()){var n=t.getTool();n.steps&&(this._setToolStepState(t),n.steps.on("step",function(i,n){e._setToolStepState(t)}),n.steps.on("complete",function(){e._setToolStepState()}))}else e._setToolStepState()},this._setToolStepState=function(t){var e,i,n;if(_.isUndefined(t))e=null,i=null,n=null;else{var s=t.getTool(),o=toolStepsMessages[t.getType()];e=s.steps.currentStepIndex(),i=s.steps.totalSteps(),n=o[e],_.isUndefined(n)&&(e=null,i=null,n=null)}this.state.editing.toolstep.n=e+1,this.state.editing.toolstep.total=i,this.state.editing.toolstep.message=n},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(t){t?this._currentEditingLayer=t:this._currentEditingLayer=null},this._addToMap=function(){var t=this,e=this._mapService.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){t._layers[i].vector.addToMap(e)}),this._loadDataOnMapViewChangeListener||(this._loadDataOnMapViewChangeListener=this._mapService.onafter("setMapView",function(){t.state.editing.on&&t.state.editing.enabled&&t._loader.loadAllVectorsData()}))},this._postData=function(t){var e=this;if(t.length>1)return this._postBatchData(t);var i=t[0].layername,n=t[0].edits,s=JSON.stringify(n);return $.post({url:this.config.baseurl+i+"/?"+e._customUrlParameters,data:s,contentType:"application/json"})},this._postBatchData=function(t){var e={};_.forEach(t,function(t){e[t.layername]=t.edits});var i=JSON.stringify(e);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._unlockLayer(e._layers[t])})},this._unlockLayer=function(t){$.get(this.config.baseurl+t.name+"/?unlock"+this._customUrlParameters)},this.getLoader=function(){return this._loader}}var o=g3wsdk.core.utils.inherit,r=g3wsdk.core.G3WObject,a=g3wsdk.gui.GUI,l=g3wsdk.core.VectorLayerLoader,c=e("./editors/attributesform");o(s,r),i.exports=new s},{"./editors/attributesform":1}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
