!function e(t,i,n){function o(r,a){if(!i[r]){if(!t[r]){var l="function"==typeof require&&require;if(!a&&l)return l(r,!0);if(s)return s(r,!0);var c=new Error("Cannot find module '"+r+"'");throw c.code="MODULE_NOT_FOUND",c}var d=i[r]={exports:{}};t[r][0].call(d.exports,function(e){var i=t[r][1][e];return o(i?i:e)},d,d.exports,e,t,i,n)}return i[r].exports}for(var s="function"==typeof require&&require,r=0;r<n.length;r++)o(n[r]);return o}({1:[function(t,e,i){function n(t){s(this,t),this._formPanel=l}var o=g3wsdk.core.utils.inherit,s=g3wsdk.core.utils.base,r=g3wsdk.gui.FormPanel,a=g3wsdk.gui.Form,l=r.extend({});o(n,a),e.exports=n},{}],2:[function(t,e,i){function n(t){s(this,t),this._saveFromEditForm=!0,this._saveEdits=_.bind(a.saveEdits,a)}var o=g3wsdk.core.utils.inherit,s=g3wsdk.core.utils.base,r=g3wsdk.core.Editor,a=t("../pluginservice");t("./attributesform");o(n,r),e.exports=n},{"../pluginservice":7,"./attributesform":1}],3:[function(t,e,i){var n=g3wsdk.core.utils.inherit,o=g3wsdk.core.utils.base,s=g3wsdk.core.Plugin,r=g3wsdk.gui.GUI,a=g3wsdk.core.ProjectsRegistry,l=t("pluginconfig"),c=t("./pluginservice"),d=t("./panel"),u=function(){o(this),this.name="notes",this.config=null,this.service=null,this.init=function(){this.setPluginService(c),this.config=this.getPluginConfig(),this.setUpIconUrl(this.config.layers),this.registerPlugin(this.config.gid)&&(r.ready?this.setupGui():r.on("ready",_.bind(this.setupGui,this)),l.customUrlParameters=this.createPluginCustomUrlParameters(),this.service.init(this.config,l))},this.setupGui=function(){var t=r.getComponent("tools"),e=t.getService(),i=l.tools(this);e.addTools(1,"GEONOTES",i)},this.toolsActions={showHideLayer:function(){console.log("showHideLayer")},showEditingPanel:function(){var t=new d;this.service.toggleEditing(),r.showPanel(t)}},this.createPluginCustomUrlParameters=function(){var t="&",e=a.getCurrentProject();return t+="project_type="+e.getType()+"&project_id="+e.getId()},this.setUpIconUrl=function(t){_.forEach(t,function(t){l.layers[t.name].iconurl=t.iconurl})},this.setupToolsAction=function(t){_.forEach(t,function(t){})}};n(u,s),function(t){t.init()}(new u)},{"./panel":5,"./pluginservice":7,pluginconfig:6}],4:[function(t,e,i){e.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode, tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode, tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"></img>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div>\n    <!--<button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-success\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>-->\n    <!--<button class="btn btn-danger" v-disabled="!state.hasEdits" @click="saveEdits">{{ savebtnlabel }}</button>-->\n    <span>Caricamento Dati ... </span><img v-show="state.retrievingData" :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],5:[function(t,e,i){function n(){this.id="iternet-editing-panel",this.name="Gestione dati ITERNET",this.internalPanel=new c}var o=g3wsdk.core.utils.resolve,s=g3wsdk.core.utils.inherit,r=g3wsdk.gui.GUI,a=g3wsdk.gui.Panel,l=t("./pluginservice"),c=Vue.extend({template:t("./panel.html"),data:function(){return{state:l.state,resourcesurl:r.getResourcesUrl(),editorstoolbars:[{name:"Geonotes",layercode:l.layerCodes.GEONOTES,tools:[{title:"Aggiungi Geonota",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta Geonota",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi Geonota",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita geonota",tooltype:"editattributes",icon:"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){l.toggleEditing()},saveEdits:function(){l.saveEdits()},toggleEditTool:function(t,e){""!=e&&this.state.editing.on&&l.toggleEditTool(t,e)},editingtoolbtnToggled:function(t,e){return this.state.editing.layerCode==t&&this.state.editing.toolType==e},editingtoolbtnEnabled:function(t){return""!=t.tooltype}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var t="";if(this.state.editing.enabled){if(this.state.editing.toolstep.message){var e=this.state.editing.toolstep.n,i=this.state.editing.toolstep.total,n=this.state.editing.toolstep.message;t='<div style="margin-top:20px">GUIDA STRUMENTO:</div><div><span>['+e+"/"+i+'] </span><span style="color: yellow">'+n+"</span></div>"}}else t='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing';return t}}});s(n,a);var d=a.prototype;d.onShow=function(t){var e=this.internalPanel;return e.$mount().$appendTo(t),o(!0)},d.onClose=function(){var t=this,e=$.Deferred();return l.stop().then(function(){t.internalPanel.$destroy(!0),t.internalPanel=null,e.resolve()}).fail(function(){e.reject()}),e.promise()},e.exports=n},{"./panel.html":4,"./pluginservice":7}],6:[function(t,e,i){function n(t){return n=[{name:"Visualizza Geonotes",type:"checkbox",action:_.bind(t.toolsActions.showHideLayer,t)},{name:"Strumenti Geonotes",action:_.bind(t.toolsActions.showEditingPanel,t)}]}var o=t("./editors/geonoteseditor"),s=this.layerCodes={GEONOTES:"note"},r={};r[s.GEONOTES]=o;var a={};a[s.GEONOTES]={layerCode:s.GEONOTES,vector:null,editor:null,iconurl:null,style:function(t){var e,i=this.iconurl;return e=i?new ol.style.Style({image:new ol.style.Icon({anchor:[.5,46],anchorXUnits:"fraction",anchorYUnits:"pixels",opacity:.75,src:i})}):new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:color})})}),[e]}},e.exports={layersCode:s,layers:a,editorClass:r,tools:n}},{"./editors/geonoteseditor":2}],7:[function(e,i,n){function o(){var e=this;this._mapService=null,this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this._loadedExtent=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null,startingEditingTool:!1,toolstep:{n:null,total:null,message:null}},retrievingData:!1,hasEdits:!1},this._loader=new l;var i={resolution:1};this.init=function(t,e){var n=this;this.config=t,this._layers=e.layers,this._editorClass=e.editorClass,this.layerCodes=e.layersCode,this._customUrlParameters=e.customUrlParameters||null,this._mapService=a.getComponent("map").getService();var o={layers:this._layers,baseurl:this.config.baseurl,mapService:this._mapService};this._loader.init(o),this._loader.on("loadingvectorlayersstart",function(){n.state.retrievingData=!0}),this._loader.on("loadingvectorlayersend",function(){n.state.retrievingData=!1}),this._mapService.on("pointerInteractionSet",function(t){var e=n._getCurrentEditingLayer();if(e){var i=e.editor.getActiveTool().instance;i&&!i.ownsInteraction(t)&&n._stopEditingTool()}}),this._mapService.onafter("setMapView",function(t,e,o){n.state.editing.enabled=e<i.resolution}),this.state.editing.enabled=this._mapService.getResolution()<i.resolution,_.forEach(this._layers,function(e,i){var o=t.layers[i].id,s=t.layers[i].name,r=n._mapService.getProject().getLayerById(o);r?(e.name=r.getOrigName(),e.id=o):(e.name=s,e.id=o)})},this.stop=function(){var t=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){e._stopEditing(),t.resolve()}).fail(function(){t.reject()}):t.resolve(),t.promise()},this.toggleEditing=function(){var t=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return t.promise()},this.saveEdits=function(){this._cancelOrSave(2)},this.toggleEditTool=function(t,e){var i=this,n=this._layers[t];if(n){var o=this._getCurrentEditingLayer();o&&t==o.layerCode?e==o.editor.getActiveTool().getType()?this._stopEditingTool():(this._stopEditingTool(),this._startEditingTool(o,e)):o&&o.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(n,e)}):this._startEditingTool(n,e)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._setUpVectorLayer=function(t,e){this._layers[t].vector=e},this._setUpEditor=function(t){var e=this,i={mapService:e._mapService,formClass:c},n=this._layers[t].vector,o=new e._editorClass[t](i);o.setVectorLayer(n),o.on("dirty",function(t){e.state.hasEdits=t}),this._layers[t].editor=o},this._startEditing=function(){if(!this.state.editing.on&&!this.state.retrievingData){var e=this;this._loader.loadLayers("w",this._customUrlParameters).then(function(t){console.log(t),_.forEach(t,function(t){e._setUpEditor(t)}),e._addToMap(),e.state.editing.on=!0,e.emit("editingstarted"),e._loadDataOnMapViewChangeListener||(e._loadDataOnMapViewChangeListener=e._mapService.onafter("setMapView",function(){e.state.editing.on&&e.state.editing.enabled&&e._loader.loadAllVectorsData()}))}).fail(function(){a.notify.error(t("could_not_load_vector_layers"))})}},this._stopEditing=function(t){this._stopEditor(t)&&(_.forEach(this._layers,function(t,i){var n=t.vector;e._mapService.viewer.removeLayerByName(n.name),t.vector=null,t.editor=null,e._unlockLayer(e._layers[i])}),this._updateEditingState(),e.state.editing.on=!1,e._cleanUp(),e.emit("editingstopped"))},this._cleanUp=function(){this._loader.cleanUpLayers()},this._startEditor=function(t){return!!t.editor.start(this)&&(this._setCurrentEditingLayer(t),!0)},this._startEditingTool=function(t,e,i){this.state.startingEditingTool=!0;var n=!0;return t.editor.isStarted()||(n=this._startEditor(t)),n&&t.editor.setTool(e,i)?(this._updateEditingState(),this.state.startingEditingTool=!1,!0):(this.state.startingEditingTool=!1,!1)},this._stopEditor=function(t){var e=!0,i=this._getCurrentEditingLayer();return i&&(e=i.editor.stop(t),e&&this._setCurrentEditingLayer()),e},this._stopEditingTool=function(){var t=!0,e=this._getCurrentEditingLayer();return e&&(t=e.editor.stopTool(),t&&this._updateEditingState()),t},this._cancelOrSave=function(t){var e=$.Deferred();try{var i=1;t&&(i=t);var n=this,o={};_.forEach(this._layers,function(t,e){t.editor.isDirty()&&(o[e]=t.editor)}),_.keys(o).length?this._askCancelOrSave(i).then(function(t){"save"===t?n._saveEdits(o).then(function(t){e.resolve()}).fail(function(t){e.reject()}):"nosave"==t?e.resolve():"cancel"==t&&e.reject()}):e.resolve()}catch(s){e.reject()}return e.promise()},this._askCancelOrSave=function(t){var e=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){e.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){e.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){e.resolve("cancel")}}};switch(t){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return a.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),e.promise()},this._saveEdits=function(t){var i=$.Deferred();return this._sendEdits(t).then(function(n){a.notify.success("I dati sono stati salvati correttamente"),e._commitEdits(t,n),e._mapService.refreshMap(),i.resolve()}).fail(function(t){a.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(t){var e=$.Deferred(),i=_.map(t,function(t){return{layername:t.getVectorLayer().name,edits:t.getEditedFeatures()}});return console.log(i),this._postData(i).then(function(t){t.result?e.resolve(t.response):e.reject(t.response)}).fail(function(t){e.reject(t.response)}),e.promise()},this._commitEdits=function(t,e){_.forEach(t,function(t){e&&e["new"]&&_.forEach(e["new"],function(i){var n=i.clientid,o=i.id;t.getEditVectorLayer().setFeatureData(n,o,null,i),_.forEach(e.new_lockids,function(e){t.getVectorLayer().addLockId(e)})}),t.commit()})},this._undoEdits=function(t){var e=this._getCurrentEditingLayer().layerCode;t[e];this._stopEditing(!0)},this._updateEditingState=function(){var t=this._getCurrentEditingLayer();t?(this.state.editing.layerCode=t.layerCode,this.state.editing.toolType=t.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null),this._updateToolStepsState()},this._updateToolStepsState=function(){var t,e=this,i=this._getCurrentEditingLayer();if(i&&(t=i.editor.getActiveTool()),t&&t.getTool()){var n=t.getTool();n.steps&&(this._setToolStepState(t),n.steps.on("step",function(i,n){e._setToolStepState(t)}),n.steps.on("complete",function(){e._setToolStepState()}))}else e._setToolStepState()},this._setToolStepState=function(t){var e,i,n;if(_.isUndefined(t))e=null,i=null,n=null;else{var o=t.getTool(),s=toolStepsMessages[t.getType()];e=o.steps.currentStepIndex(),i=o.steps.totalSteps(),n=s[e],_.isUndefined(n)&&(e=null,i=null,n=null)}this.state.editing.toolstep.n=e+1,this.state.editing.toolstep.total=i,this.state.editing.toolstep.message=n},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(t){t?this._currentEditingLayer=t:this._currentEditingLayer=null},this._addToMap=function(){var t=this._mapService.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){e._layers[i].vector.addToMap(t)})},this._postData=function(t){var e=this;if(t.length>1)return this._postBatchData(t);var i=t[0].layername,n=t[0].edits;console.log(n);var o=JSON.stringify(n);return $.post({url:this.config.baseurl+i+"/?"+e._customUrlParameters,data:o,contentType:"application/json"})},this._postBatchData=function(t){var e={};_.forEach(t,function(t){e[t.layername]=t.edits});var i=JSON.stringify(e);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._unlockLayer(e._layers[t])})},this._unlockLayer=function(t){$.get(this.config.baseurl+t.name+"/?unlock")},this.getLoader=function(){return this._loader}}var s=g3wsdk.core.utils.inherit,r=g3wsdk.core.G3WObject,a=g3wsdk.gui.GUI,l=g3wsdk.core.VectorLayerLoader,c=e("./editors/attributesform");s(o,r),i.exports=new o},{"./editors/attributesform":1}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsIkdlb25vdGVGb3JtIiwib3B0aW9ucyIsImJhc2UiLCJ0aGlzIiwiX2Zvcm1QYW5lbCIsIkdlb25vdGVGb3JtUGFuZWwiLCJpbmhlcml0IiwiZzN3c2RrIiwiY29yZSIsInV0aWxzIiwiRm9ybVBhbmVsIiwiZ3VpIiwiRm9ybSIsImV4dGVuZCIsIjIiLCJHZW9ub3Rlc0VkaXRvciIsIl9zYXZlRnJvbUVkaXRGb3JtIiwiX3NhdmVFZGl0cyIsIl8iLCJiaW5kIiwiUGx1Z2luU2VydmljZSIsInNhdmVFZGl0cyIsIkVkaXRvciIsIi4uL3BsdWdpbnNlcnZpY2UiLCIuL2F0dHJpYnV0ZXNmb3JtIiwiMyIsIlBsdWdpbiIsIkdVSSIsIlByb2plY3RzUmVnaXN0cnkiLCJwbHVnaW5Db25maWciLCJTZXJ2aWNlIiwiRWRpdGluZ1BhbmVsIiwiX1BsdWdpbiIsIm5hbWUiLCJjb25maWciLCJzZXJ2aWNlIiwiaW5pdCIsInNldFBsdWdpblNlcnZpY2UiLCJnZXRQbHVnaW5Db25maWciLCJzZXRVcEljb25VcmwiLCJsYXllcnMiLCJyZWdpc3RlclBsdWdpbiIsImdpZCIsInJlYWR5Iiwic2V0dXBHdWkiLCJvbiIsImN1c3RvbVVybFBhcmFtZXRlcnMiLCJjcmVhdGVQbHVnaW5DdXN0b21VcmxQYXJhbWV0ZXJzIiwidG9vbHNDb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJ0b29sc1NlcnZpY2UiLCJnZXRTZXJ2aWNlIiwidG9vbHMiLCJhZGRUb29scyIsInRvb2xzQWN0aW9ucyIsInNob3dIaWRlTGF5ZXIiLCJjb25zb2xlIiwibG9nIiwic2hvd0VkaXRpbmdQYW5lbCIsInBhbmVsIiwidG9nZ2xlRWRpdGluZyIsInNob3dQYW5lbCIsImN1cnJlbnRQcm9qZWN0IiwiZ2V0Q3VycmVudFByb2plY3QiLCJnZXRUeXBlIiwiZ2V0SWQiLCJsYXllcnNDb25maWciLCJmb3JFYWNoIiwibGF5ZXJDb25maWciLCJpY29udXJsIiwic2V0dXBUb29sc0FjdGlvbiIsInRvb2wiLCJwbHVnaW4iLCIuL3BhbmVsIiwiLi9wbHVnaW5zZXJ2aWNlIiwicGx1Z2luY29uZmlnIiwiNCIsIjUiLCJFZGl0b3JQYW5lbCIsImlkIiwiaW50ZXJuYWxQYW5lbCIsIlBhbmVsQ29tcG9uZW50IiwicmVzb2x2ZWRWYWx1ZSIsInJlc29sdmUiLCJQYW5lbCIsIlZ1ZSIsInRlbXBsYXRlIiwiZGF0YSIsInN0YXRlIiwicmVzb3VyY2VzdXJsIiwiZ2V0UmVzb3VyY2VzVXJsIiwiZWRpdG9yc3Rvb2xiYXJzIiwibGF5ZXJjb2RlIiwibGF5ZXJDb2RlcyIsIkdFT05PVEVTIiwidGl0bGUiLCJ0b29sdHlwZSIsImljb24iLCJzYXZlYnRubGFiZWwiLCJtZXRob2RzIiwidG9nZ2xlRWRpdFRvb2wiLCJsYXllckNvZGUiLCJ0b29sVHlwZSIsImVkaXRpbmciLCJlZGl0aW5ndG9vbGJ0blRvZ2dsZWQiLCJlZGl0aW5ndG9vbGJ0bkVuYWJsZWQiLCJjb21wdXRlZCIsImVkaXRpbmdidG5sYWJlbCIsImVkaXRpbmdidG5FbmFibGVkIiwiZW5hYmxlZCIsIm1lc3NhZ2UiLCJ0b29sc3RlcCIsInRvdGFsIiwic3RlcG1lc3NhZ2UiLCJwcm90byIsInByb3RvdHlwZSIsIm9uU2hvdyIsImNvbnRhaW5lciIsIiRtb3VudCIsIiRhcHBlbmRUbyIsIm9uQ2xvc2UiLCJzZWxmIiwiZGVmZXJyZWQiLCIkIiwiRGVmZXJyZWQiLCJzdG9wIiwidGhlbiIsIiRkZXN0cm95IiwiZmFpbCIsInJlamVjdCIsInByb21pc2UiLCIuL3BhbmVsLmh0bWwiLCI2IiwidHlwZSIsImFjdGlvbiIsImVkaXRvckNsYXNzIiwidmVjdG9yIiwiZWRpdG9yIiwic3R5bGUiLCJmZWF0dXJlIiwiZmVhdHVyZVN0eWxlIiwib2wiLCJTdHlsZSIsImltYWdlIiwiSWNvbiIsImFuY2hvciIsImFuY2hvclhVbml0cyIsImFuY2hvcllVbml0cyIsIm9wYWNpdHkiLCJzcmMiLCJDaXJjbGUiLCJyYWRpdXMiLCJmaWxsIiwiRmlsbCIsImNvbG9yIiwibGF5ZXJzQ29kZSIsIi4vZWRpdG9ycy9nZW9ub3Rlc2VkaXRvciIsIjciLCJHZW9ub3Rlc1NlcnZpY2UiLCJfbWFwU2VydmljZSIsIl9sb2FkRGF0YU9uTWFwVmlld0NoYW5nZUxpc3RlbmVyIiwiX2N1cnJlbnRFZGl0aW5nTGF5ZXIiLCJfbG9hZGVkRXh0ZW50Iiwic3RhcnRpbmdFZGl0aW5nVG9vbCIsInJldHJpZXZpbmdEYXRhIiwiaGFzRWRpdHMiLCJfbG9hZGVyIiwiVmVjdG9yTG9hZGVyTGF5ZXIiLCJlZGl0aW5nQ29uc3RyYWludHMiLCJyZXNvbHV0aW9uIiwiX2xheWVycyIsIl9lZGl0b3JDbGFzcyIsIl9jdXN0b21VcmxQYXJhbWV0ZXJzIiwib3B0aW9uc19sb2FkZXIiLCJiYXNldXJsIiwibWFwU2VydmljZSIsImludGVyYWN0aW9uIiwiY3VycmVudEVkaXRpbmdMYXllciIsIl9nZXRDdXJyZW50RWRpdGluZ0xheWVyIiwiYWN0aXZlVG9vbCIsImdldEFjdGl2ZVRvb2wiLCJpbnN0YW5jZSIsIm93bnNJbnRlcmFjdGlvbiIsIl9zdG9wRWRpdGluZ1Rvb2wiLCJvbmFmdGVyIiwiYmJveCIsImNlbnRlciIsImdldFJlc29sdXRpb24iLCJMYXllciIsImxheWVySWQiLCJsYXllck5hbWUiLCJsYXllciIsImdldFByb2plY3QiLCJnZXRMYXllckJ5SWQiLCJnZXRPcmlnTmFtZSIsIl9jYW5jZWxPclNhdmUiLCJfc3RvcEVkaXRpbmciLCJfc3RhcnRFZGl0aW5nIiwiX3N0YXJ0RWRpdGluZ1Rvb2wiLCJpc1N0YXJ0ZWQiLCJfc3RvcEVkaXRvciIsImdldExheWVyQ29kZXMiLCJ2YWx1ZXMiLCJfc2V0VXBWZWN0b3JMYXllciIsInZlY3RvckxheWVyIiwiX3NldFVwRWRpdG9yIiwib3B0aW9uc19lZGl0b3IiLCJmb3JtQ2xhc3MiLCJGb3JtQ2xhc3MiLCJzZXRWZWN0b3JMYXllciIsImRpcnR5IiwibG9hZExheWVycyIsInZlY3RvckxheWVyc0xvYWRlZCIsIl9hZGRUb01hcCIsImVtaXQiLCJsb2FkQWxsVmVjdG9yc0RhdGEiLCJub3RpZnkiLCJlcnJvciIsInJlc2V0Iiwidmlld2VyIiwicmVtb3ZlTGF5ZXJCeU5hbWUiLCJfdW5sb2NrTGF5ZXIiLCJfdXBkYXRlRWRpdGluZ1N0YXRlIiwiX2NsZWFuVXAiLCJjbGVhblVwTGF5ZXJzIiwiX3N0YXJ0RWRpdG9yIiwic3RhcnQiLCJfc2V0Q3VycmVudEVkaXRpbmdMYXllciIsImNhblN0YXJ0VG9vbCIsInNldFRvb2wiLCJyZXQiLCJzdG9wVG9vbCIsIl9hc2tUeXBlIiwiZGlydHlFZGl0b3JzIiwiaXNEaXJ0eSIsImtleXMiLCJfYXNrQ2FuY2VsT3JTYXZlIiwicmVzdWx0IiwiYnV0dG9uVHlwZXMiLCJTQVZFIiwibGFiZWwiLCJjbGFzc05hbWUiLCJjYWxsYmFjayIsIk5PU0FWRSIsIkNBTkNFTCIsImJ1dHRvbnMiLCJzYXZlIiwibm9zYXZlIiwiY2FuY2VsIiwiZGlhbG9nIiwiX3NlbmRFZGl0cyIsInJlc3BvbnNlIiwic3VjY2VzcyIsIl9jb21taXRFZGl0cyIsInJlZnJlc2hNYXAiLCJlcnJvcnMiLCJlZGl0c1RvUHVzaCIsIm1hcCIsImxheWVybmFtZSIsImdldFZlY3RvckxheWVyIiwiZWRpdHMiLCJnZXRFZGl0ZWRGZWF0dXJlcyIsIl9wb3N0RGF0YSIsInJldHVybmVkIiwiZWRpdG9ycyIsInVwZGF0ZWRGZWF0dXJlQXR0cmlidXRlcyIsIm9sZGZpZCIsImNsaWVudGlkIiwiZmlkIiwiZ2V0RWRpdFZlY3RvckxheWVyIiwic2V0RmVhdHVyZURhdGEiLCJuZXdfbG9ja2lkcyIsIm5ld2xvY2tJZCIsImFkZExvY2tJZCIsImNvbW1pdCIsIl91bmRvRWRpdHMiLCJjdXJyZW50RWRpdGluZ0xheWVyQ29kZSIsIl91cGRhdGVUb29sU3RlcHNTdGF0ZSIsImdldFRvb2wiLCJ0b29sSW5zdGFuY2UiLCJzdGVwcyIsIl9zZXRUb29sU3RlcFN0YXRlIiwiaW5kZXgiLCJzdGVwIiwiaXNVbmRlZmluZWQiLCJtZXNzYWdlcyIsInRvb2xTdGVwc01lc3NhZ2VzIiwiY3VycmVudFN0ZXBJbmRleCIsInRvdGFsU3RlcHMiLCJhZGRUb01hcCIsIl9wb3N0QmF0Y2hEYXRhIiwianNvbkRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwicG9zdCIsInVybCIsImNvbnRlbnRUeXBlIiwibXVsdGlFZGl0c1RvUHVzaCIsIl91bmxvY2siLCJnZXQiLCJnZXRMb2FkZXIiLCJHM1dPYmplY3QiLCJWZWN0b3JMYXllckxvYWRlciIsIi4vZWRpdG9ycy9hdHRyaWJ1dGVzZm9ybSJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBVUEsR0FBRUMsRUFBRUMsRUFBRUMsR0FBRyxRQUFTQyxHQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsR0FBSUUsR0FBa0Isa0JBQVRDLFVBQXFCQSxPQUFRLEtBQUlGLEdBQUdDLEVBQUUsTUFBT0EsR0FBRUYsR0FBRSxFQUFJLElBQUdJLEVBQUUsTUFBT0EsR0FBRUosR0FBRSxFQUFJLElBQUlLLEdBQUUsR0FBSUMsT0FBTSx1QkFBdUJOLEVBQUUsSUFBSyxNQUFNSyxHQUFFRSxLQUFLLG1CQUFtQkYsRUFBRSxHQUFJRyxHQUFFWCxFQUFFRyxJQUFJUyxXQUFZYixHQUFFSSxHQUFHLEdBQUdVLEtBQUtGLEVBQUVDLFFBQVEsU0FBU2QsR0FBRyxHQUFJRSxHQUFFRCxFQUFFSSxHQUFHLEdBQUdMLEVBQUcsT0FBT0ksR0FBRUYsRUFBRUEsRUFBRUYsSUFBSWEsRUFBRUEsRUFBRUMsUUFBUWQsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxNQUFPRCxHQUFFRyxHQUFHUyxRQUFrRCxJQUFJLEdBQTFDTCxHQUFrQixrQkFBVEQsVUFBcUJBLFFBQWdCSCxFQUFFLEVBQUVBLEVBQUVG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QmlCLEdBQVF3SixFQUFpQitJLEdBQ3pCOVMsRUFBT0osUUFBVSxHQUFJbUssS0FDbEJpSiwyQkFBMkIsU0FBUyIsImZpbGUiOiJidWlsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gZzN3c2RrLmNvcmUudXRpbHMuaW5oZXJpdDtcbnZhciBiYXNlID0gZzN3c2RrLmNvcmUudXRpbHMuYmFzZTtcbnZhciBGb3JtUGFuZWwgPSBnM3dzZGsuZ3VpLkZvcm1QYW5lbDtcbnZhciBGb3JtID0gZzN3c2RrLmd1aS5Gb3JtO1xuXG52YXIgR2Vvbm90ZUZvcm1QYW5lbCA9IEZvcm1QYW5lbC5leHRlbmQoe1xuICAvL3RlbXBsYXRlOiByZXF1aXJlKCcuL2F0dHJpYnV0ZXNmb3JtLmh0bWwnKVxufSk7XG5cbmZ1bmN0aW9uIEdlb25vdGVGb3JtKG9wdGlvbnMpe1xuICBiYXNlKHRoaXMsb3B0aW9ucyk7XG4gIHRoaXMuX2Zvcm1QYW5lbCA9IEdlb25vdGVGb3JtUGFuZWw7XG59XG5pbmhlcml0KEdlb25vdGVGb3JtLEZvcm0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdlb25vdGVGb3JtO1xuXG59LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gZzN3c2RrLmNvcmUudXRpbHMuaW5oZXJpdDtcbnZhciBiYXNlID0gZzN3c2RrLmNvcmUudXRpbHMuYmFzZTtcbnZhciBFZGl0b3IgPSBnM3dzZGsuY29yZS5FZGl0b3I7XG52YXIgUGx1Z2luU2VydmljZSA9IHJlcXVpcmUoJy4uL3BsdWdpbnNlcnZpY2UnKTtcbnZhciBGb3JtID0gcmVxdWlyZSgnLi9hdHRyaWJ1dGVzZm9ybScpO1xudmFyIGZvcm0gPSBudWxsOyAvLyBicnV0dG8gbWEgZGV2byB0ZW5lcmxvIGVzdGVybm8gc2VubsOyIHNpIGNyZWEgdW4gY2xpY28gZGkgcmlmZXJpbWVudGkgY2hlIG1hbmRhIGluIHBhbGxhIFZ1ZVxuXG5cbmZ1bmN0aW9uIEdlb25vdGVzRWRpdG9yKG9wdGlvbnMpIHtcblxuICAvLyBpbiBxdWVzdG8gbW9kbyBwYXNzaWFtbyBpbCBtYXBzZXJ2aWNlIGNvbWUgYXJnb21lbnRvIGFsIHN1cGVyY2xhc3MgKGVkaXRvcilcbiAgLy8gZGkgaXRlcm5ldGVkaXRvciBpbiBtb2RvIGRhIGFzc2VnbmFyYWUgYW5jaGUgYSBpdGVybmV0ZWRpdG9yIGlsIG1hcHNlcnZlaWNlIGNoZSB4c2Vydmlyw6AgYWQgZXNlbXBpbyBhZCBhZ2dpdW5nZXJlXG4gIC8vIGwnaW50ZXJhY3Rpb24gYWxsYSBtYXBwYSBxdWFuZG8gdmllbmUgY2xpY2NhdG8gc3UgdW4gdG9vbFxuXG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX3NhdmVGcm9tRWRpdEZvcm0gPSB0cnVlO1xuICB0aGlzLl9zYXZlRWRpdHMgPSBfLmJpbmQoUGx1Z2luU2VydmljZS5zYXZlRWRpdHMsIFBsdWdpblNlcnZpY2UpO1xuICAvLyBhcHJlIGZvcm0gYXR0cmlidXRpIHBlciBpbnNlcmltZW50b1xufVxuXG5pbmhlcml0KEdlb25vdGVzRWRpdG9yLCBFZGl0b3IpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdlb25vdGVzRWRpdG9yO1xufSx7XCIuLi9wbHVnaW5zZXJ2aWNlXCI6NyxcIi4vYXR0cmlidXRlc2Zvcm1cIjoxfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBTREsgLy8vXG52YXIgaW5oZXJpdCA9IGczd3Nkay5jb3JlLnV0aWxzLmluaGVyaXQ7XG52YXIgYmFzZSA9IGczd3Nkay5jb3JlLnV0aWxzLmJhc2U7XG52YXIgUGx1Z2luID0gZzN3c2RrLmNvcmUuUGx1Z2luO1xudmFyIEdVSSA9IGczd3Nkay5ndWkuR1VJO1xudmFyIFByb2plY3RzUmVnaXN0cnkgPSBnM3dzZGsuY29yZS5Qcm9qZWN0c1JlZ2lzdHJ5O1xuLy8vIFBMVUdJTiAvL1xudmFyIHBsdWdpbkNvbmZpZyA9IHJlcXVpcmUoJ3BsdWdpbmNvbmZpZycpO1xudmFyIFNlcnZpY2UgPSByZXF1aXJlKCcuL3BsdWdpbnNlcnZpY2UnKTtcbnZhciBFZGl0aW5nUGFuZWwgPSByZXF1aXJlKCcuL3BhbmVsJyk7XG5cbnZhciBfUGx1Z2luID0gZnVuY3Rpb24oKSB7XG5cbiAgYmFzZSh0aGlzKTtcbiAgdGhpcy5uYW1lID0gJ25vdGVzJztcbiAgdGhpcy5jb25maWcgPSBudWxsO1xuICB0aGlzLnNlcnZpY2UgPSBudWxsO1xuICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy9zZXR0byBpbCBzZXJ2aXppb1xuICAgIHRoaXMuc2V0UGx1Z2luU2VydmljZShTZXJ2aWNlKTtcbiAgICAvL3JlY3VwZXJvIGNvbmZpZ3VyYXppb25lIGRlbCBwbHVnaW5cbiAgICB0aGlzLmNvbmZpZyA9IHRoaXMuZ2V0UGx1Z2luQ29uZmlnKCk7XG4gICAgdGhpcy5zZXRVcEljb25VcmwodGhpcy5jb25maWcubGF5ZXJzKTtcbiAgICAvL3JlZ2l0cm8gaWwgcGx1Z2luXG4gICAgaWYgKHRoaXMucmVnaXN0ZXJQbHVnaW4odGhpcy5jb25maWcuZ2lkKSkge1xuICAgICAgaWYgKCFHVUkucmVhZHkpIHtcbiAgICAgICAgR1VJLm9uKCdyZWFkeScsIF8uYmluZCh0aGlzLnNldHVwR3VpLCB0aGlzKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXR1cEd1aSgpO1xuICAgICAgfVxuICAgICAgLy9pbml6aWFsaXp6byBpbCBzZXJ2aXppby4gSWwgc2Vydml6aW8gw6ggbCdpc3RhbnphIGRlbGxhIGNsYXNzZSBzZXJ2aXppb1xuICAgICAgcGx1Z2luQ29uZmlnLmN1c3RvbVVybFBhcmFtZXRlcnMgPSB0aGlzLmNyZWF0ZVBsdWdpbkN1c3RvbVVybFBhcmFtZXRlcnMoKTtcbiAgICAgIHRoaXMuc2VydmljZS5pbml0KHRoaXMuY29uZmlnLCBwbHVnaW5Db25maWcpO1xuICAgIH1cbiAgfTtcbiAgLy8gZnVuemlvbmUgY2hlIHVuYSB2b2x0YSBjaGUgbGEgR1VJIGhhIGVtZXNzbyBsJ2V2ZW50byAncmVhZHknXG4gIC8vIHNlcnZlIGEgbW9udGFyZSBpIGNvbXBvZW50aSBkZWwgcGx1Z2luIHN1bGxhIHNpZGViYXJcbiAgdGhpcy5zZXR1cEd1aSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b29sc0NvbXBvbmVudCA9IEdVSS5nZXRDb21wb25lbnQoJ3Rvb2xzJyk7XG4gICAgdmFyIHRvb2xzU2VydmljZSA9IHRvb2xzQ29tcG9uZW50LmdldFNlcnZpY2UoKTtcbiAgICB2YXIgdG9vbHMgPSBwbHVnaW5Db25maWcudG9vbHModGhpcyk7XG4gICAgdG9vbHNTZXJ2aWNlLmFkZFRvb2xzKDEgLCdHRU9OT1RFUycsIHRvb2xzKVxuICB9O1xuICAvLyBhemlvbmkgY2hlIHNvbm8gbGVnYXRpIGFpIHRvb2xzXG4gIHRoaXMudG9vbHNBY3Rpb25zID0ge1xuICAgIHNob3dIaWRlTGF5ZXI6ICBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdzaG93SGlkZUxheWVyJyk7XG4gICAgfSxcbiAgICBzaG93RWRpdGluZ1BhbmVsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYW5lbCA9IG5ldyBFZGl0aW5nUGFuZWwoKTtcbiAgICAgIHRoaXMuc2VydmljZS50b2dnbGVFZGl0aW5nKCk7XG4gICAgICBHVUkuc2hvd1BhbmVsKHBhbmVsKTtcbiAgICB9XG4gIH07XG5cbiAgLy9zZXR1cFBsdWdpbkN1c3RvbVBhcmFtZXRlcnNcbiAgdGhpcy5jcmVhdGVQbHVnaW5DdXN0b21VcmxQYXJhbWV0ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGN1c3RvbVVybFBhcmFtZXRlcnM9JyYnO1xuICAgIHZhciBjdXJyZW50UHJvamVjdCA9IFByb2plY3RzUmVnaXN0cnkuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICBjdXN0b21VcmxQYXJhbWV0ZXJzKz0ncHJvamVjdF90eXBlPScrY3VycmVudFByb2plY3QuZ2V0VHlwZSgpKycmcHJvamVjdF9pZD0nK2N1cnJlbnRQcm9qZWN0LmdldElkKCk7XG4gICAgcmV0dXJuIGN1c3RvbVVybFBhcmFtZXRlcnNcbiAgfTtcbiAgLy8gc2V0dXAgaWNvblVybCBmb3IgTGF5ZXJcbiAgdGhpcy5zZXRVcEljb25VcmwgPSBmdW5jdGlvbihsYXllcnNDb25maWcpIHtcbiAgICBfLmZvckVhY2gobGF5ZXJzQ29uZmlnLCBmdW5jdGlvbihsYXllckNvbmZpZykge1xuICAgICAgcGx1Z2luQ29uZmlnLmxheWVyc1tsYXllckNvbmZpZy5uYW1lXS5pY29udXJsID0gbGF5ZXJDb25maWcuaWNvbnVybDtcbiAgICB9KVxuICB9O1xuXG4gIHRoaXMuc2V0dXBUb29sc0FjdGlvbiA9IGZ1bmN0aW9uKHRvb2xzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIF8uZm9yRWFjaCh0b29scywgZnVuY3Rpb24odG9vbCl7XG4gICAgICAvL1RPRE9cbiAgICB9KVxuICB9XG59O1xuXG5pbmhlcml0KF9QbHVnaW4sIFBsdWdpbik7XG5cbihmdW5jdGlvbihwbHVnaW4pe1xuICBwbHVnaW4uaW5pdCgpO1xufSkobmV3IF9QbHVnaW4pO1xuXG5cblxuXG59LHtcIi4vcGFuZWxcIjo1LFwiLi9wbHVnaW5zZXJ2aWNlXCI6NyxcInBsdWdpbmNvbmZpZ1wiOjZ9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJnM3ctaXRlcm5ldC1lZGl0aW5nLXBhbmVsXFxcIj5cXG4gIDx0ZW1wbGF0ZSB2LWZvcj1cXFwidG9vbGJhciBpbiBlZGl0b3JzdG9vbGJhcnNcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbC1wcmltYXJ5XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbC1oZWFkaW5nXFxcIj5cXG4gICAgICAgIDxoMyBjbGFzcz1cXFwicGFuZWwtdGl0bGVcXFwiPnt7IHRvb2xiYXIubmFtZSB9fTwvaDM+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCI+XFxuICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XFxcInRvb2wgaW4gdG9vbGJhci50b29sc1xcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImVkaXRidG5cXFwiIDpjbGFzcz1cXFwieydlbmFibGVkJyA6IChzdGF0ZS5lZGl0aW5nLm9uICYmIGVkaXRpbmd0b29sYnRuRW5hYmxlZCh0b29sKSksICd0b2dnbGVkJyA6IGVkaXRpbmd0b29sYnRuVG9nZ2xlZCh0b29sYmFyLmxheWVyY29kZSwgdG9vbC50b29sdHlwZSl9XFxcIj5cXG4gICAgICAgICAgICA8aW1nIGhlaWdodD1cXFwiMzBweFxcXCIgd2lkdGg9XFxcIjMwcHhcXFwiIEBjbGljaz1cXFwidG9nZ2xlRWRpdFRvb2wodG9vbGJhci5sYXllcmNvZGUsIHRvb2wudG9vbHR5cGUpXFxcIiA6YWx0Lm9uY2U9XFxcInRvb2wudGl0bGVcXFwiIDp0aXRsZS5vbmNlPVxcXCJ0b29sLnRpdGxlXFxcIiA6c3JjLm9uY2U9XFxcInJlc291cmNlc3VybCsnaW1hZ2VzLycrdG9vbC5pY29uXFxcIj48L2ltZz5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvdGVtcGxhdGU+XFxuICA8ZGl2PlxcbiAgICA8IS0tPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiB2LWRpc2FibGVkPVxcXCJlZGl0aW5nYnRuRW5hYmxlZFxcXCIgOmNsYXNzPVxcXCJ7J2J0bi1zdWNjZXNzJyA6IHN0YXRlLmVkaXRpbmdPbn1cXFwiIEBjbGljaz1cXFwidG9nZ2xlRWRpdGluZ1xcXCI+e3sgZWRpdGluZ2J0bmxhYmVsIH19PC9idXR0b24+LS0+XFxuICAgIDwhLS08YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRhbmdlclxcXCIgdi1kaXNhYmxlZD1cXFwiIXN0YXRlLmhhc0VkaXRzXFxcIiBAY2xpY2s9XFxcInNhdmVFZGl0c1xcXCI+e3sgc2F2ZWJ0bmxhYmVsIH19PC9idXR0b24+LS0+XFxuICAgIDxzcGFuPkNhcmljYW1lbnRvIERhdGkgLi4uIDwvc3Bhbj48aW1nIHYtc2hvdz1cXFwic3RhdGUucmV0cmlldmluZ0RhdGFcXFwiIDpzcmM9XFxcInJlc291cmNlc3VybCArJ2ltYWdlcy9sb2FkZXIuc3ZnJ1xcXCI+XFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcIm1lc3NhZ2VcXFwiPlxcbiAgICB7e3sgbWVzc2FnZSB9fX1cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiO1xuXG59LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciByZXNvbHZlZFZhbHVlID0gZzN3c2RrLmNvcmUudXRpbHMucmVzb2x2ZTtcbnZhciBpbmhlcml0ID0gZzN3c2RrLmNvcmUudXRpbHMuaW5oZXJpdDtcbnZhciBHVUkgPSBnM3dzZGsuZ3VpLkdVSTtcbi8vIGJhc2UgY2xhc3MgUGFuZWxcbnZhciBQYW5lbCA9ICBnM3dzZGsuZ3VpLlBhbmVsO1xudmFyIFNlcnZpY2UgPSByZXF1aXJlKCcuL3BsdWdpbnNlcnZpY2UnKTtcblxudmFyIFBhbmVsQ29tcG9uZW50ID0gVnVlLmV4dGVuZCh7XG4gIHRlbXBsYXRlOiByZXF1aXJlKCcuL3BhbmVsLmh0bWwnKSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiBTZXJ2aWNlLnN0YXRlLFxuICAgICAgcmVzb3VyY2VzdXJsOiBHVUkuZ2V0UmVzb3VyY2VzVXJsKCksXG4gICAgICBlZGl0b3JzdG9vbGJhcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6IFwiR2Vvbm90ZXNcIixcbiAgICAgICAgICBsYXllcmNvZGU6IFNlcnZpY2UubGF5ZXJDb2Rlcy5HRU9OT1RFUyxcbiAgICAgICAgICB0b29sczpbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiBcIkFnZ2l1bmdpIEdlb25vdGFcIixcbiAgICAgICAgICAgICAgLy8gdG9vbHR5cGUgw6ggbCdhdHRyaWJ1dG8gY2hlIHNlcnZlciBwZXIgc2NlZ2xpZXJlIGlsIHRpcG8gZGkgdG9vbFxuICAgICAgICAgICAgICAvLyBkZWxsJ2VkaXRvciBnZW5lcmFsZSBjaGUgZG92csOgIGVzc2VyZSBpbXBvc3RhdG9cbiAgICAgICAgICAgICAgdG9vbHR5cGU6ICdhZGRmZWF0dXJlJyxcbiAgICAgICAgICAgICAgaWNvbjogJ2l0ZXJuZXRBZGRQb2ludC5wbmcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogXCJTcG9zdGEgR2Vvbm90YVwiLFxuICAgICAgICAgICAgICB0b29sdHlwZTogJ21vdmVmZWF0dXJlJyxcbiAgICAgICAgICAgICAgaWNvbjogJ2l0ZXJuZXRNb3ZlUG9pbnQucG5nJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6IFwiUmltdW92aSBHZW9ub3RhXCIsXG4gICAgICAgICAgICAgIHRvb2x0eXBlOiAnZGVsZXRlZmVhdHVyZScsXG4gICAgICAgICAgICAgIGljb246ICdpdGVybmV0RGVsZXRlUG9pbnQucG5nJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6IFwiRWRpdGEgZ2Vvbm90YVwiLFxuICAgICAgICAgICAgICB0b29sdHlwZTogJ2VkaXRhdHRyaWJ1dGVzJyxcbiAgICAgICAgICAgICAgaWNvbjogJ2VkaXRBdHRyaWJ1dGVzLnBuZydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBzYXZlYnRubGFiZWw6IFwiU2FsdmFcIlxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8vbWV0b2RvIGNoaWFtYXRvIHF1YW5kbyBzaSBjbGljY2Egc3UgYXZ2aWEvdGVybWluYSBlZGl0aW5nXG4gICAgdG9nZ2xlRWRpdGluZzogZnVuY3Rpb24oKSB7XG4gICAgICBTZXJ2aWNlLnRvZ2dsZUVkaXRpbmcoKTtcbiAgICB9LFxuICAgIHNhdmVFZGl0czogZnVuY3Rpb24oKXtcbiAgICAgIFNlcnZpY2Uuc2F2ZUVkaXRzKCk7XG4gICAgfSxcbiAgICAvLyBjaGFpbWF0byBxdWFuZG8gc2kgY2xpY2NhIHN1bCB1biB0b29sIGRlbGwnZWRpdG9yXG4gICAgLy8gY29tZSBhZCBlc2VtcGlvICBhZGQgbW92ZSBlZGl0IGF0dHJpYnV0ZXMgZXRjIC4uXG4gICAgdG9nZ2xlRWRpdFRvb2w6IGZ1bmN0aW9uKGxheWVyQ29kZSwgdG9vbFR5cGUpIHtcbiAgICAgIGlmICh0b29sVHlwZSA9PSAnJyl7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vdmVyaWZpY2Egc2UgbCdlZGl0b3Igw6ggaW4gZWRpdGluZyBvbiB0cnVlXG4gICAgICBpZiAodGhpcy5zdGF0ZS5lZGl0aW5nLm9uKSB7XG4gICAgICAgIFNlcnZpY2UudG9nZ2xlRWRpdFRvb2wobGF5ZXJDb2RlLCB0b29sVHlwZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBtZXRvZG8gY2hlIHZpZW5lIGNoaWFtYXRvIHBlciB2ZXJpZmljYXJlIGUgc2V0dGFyZVxuICAgIC8vIGxhIGNsYXNzZSAocHJlbXV0byBvIG5vIGRlbCBib3R0b25lIHRvb2wgaW4gcXVlc3Rpb25lKVxuICAgIGVkaXRpbmd0b29sYnRuVG9nZ2xlZDogZnVuY3Rpb24obGF5ZXJDb2RlLCB0b29sVHlwZSkge1xuICAgICAgcmV0dXJuICh0aGlzLnN0YXRlLmVkaXRpbmcubGF5ZXJDb2RlID09IGxheWVyQ29kZSAmJiB0aGlzLnN0YXRlLmVkaXRpbmcudG9vbFR5cGUgPT0gdG9vbFR5cGUpO1xuICAgIH0sXG4gICAgLy8gZnVuemlvbmUgY2hlIHZlcmlmaWNhIHNlIGFiaWxpdGFyZSBvIG1lbm8gaSBib3R0b25pIGRlaSB0b29sc1xuICAgIGVkaXRpbmd0b29sYnRuRW5hYmxlZDogZnVuY3Rpb24odG9vbCl7XG4gICAgICByZXR1cm4gdG9vbC50b29sdHlwZSAhPSAnJztcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgZWRpdGluZ2J0bmxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmVkaXRpbmcub24gPyBcIlRlcm1pbmEgZWRpdGluZ1wiIDogXCJBdnZpYSBlZGl0aW5nXCI7XG4gICAgfSxcbiAgICBlZGl0aW5nYnRuRW5hYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKHRoaXMuc3RhdGUuZWRpdGluZy5lbmFibGVkIHx8IHRoaXMuc3RhdGUuZWRpdGluZy5vbikgPyBcIlwiIDogXCJkaXNhYmxlZFwiO1xuICAgIH0sXG4gICAgbWVzc2FnZTogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBtZXNzYWdlID0gXCJcIjtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5lZGl0aW5nLmVuYWJsZWQpe1xuICAgICAgICBtZXNzYWdlID0gJzxzcGFuIHN0eWxlPVwiY29sb3I6IHJlZFwiPkF1bWVudGFyZSBpbCBsaXZlbGxvIGRpIHpvb20gcGVyIGFiaWxpdGFyZSBsXFwnZWRpdGluZyc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcudG9vbHN0ZXAubWVzc2FnZSl7XG4gICAgICAgIHZhciBuID0gdGhpcy5zdGF0ZS5lZGl0aW5nLnRvb2xzdGVwLm47XG4gICAgICAgIHZhciB0b3RhbCA9IHRoaXMuc3RhdGUuZWRpdGluZy50b29sc3RlcC50b3RhbDtcbiAgICAgICAgdmFyIHN0ZXBtZXNzYWdlID0gdGhpcy5zdGF0ZS5lZGl0aW5nLnRvb2xzdGVwLm1lc3NhZ2U7XG4gICAgICAgIG1lc3NhZ2UgPSAnPGRpdiBzdHlsZT1cIm1hcmdpbi10b3A6MjBweFwiPkdVSURBIFNUUlVNRU5UTzo8L2Rpdj4nICtcbiAgICAgICAgICAnPGRpdj48c3Bhbj5bJytuKycvJyt0b3RhbCsnXSA8L3NwYW4+PHNwYW4gc3R5bGU9XCJjb2xvcjogeWVsbG93XCI+JytzdGVwbWVzc2FnZSsnPC9zcGFuPjwvZGl2Pic7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBFZGl0b3JQYW5lbCgpIHtcbiAgLy8gcHJvcHJpZXTDoCBuZWNlc3NhcmllLiBJbiBmdXR1cm8gbGUgbWV0dGVybW8gaW4gdW5hXG4gIC8vIGNsYXNzZSBQYW5lbCBkYSBjdWkgZGVyaXZlcmFubm8gdHV0dGkgaSBwYW5uZWxsaSBjaGUgdm9nbGlvbm8gZXNzZXJlIG1vc3RyYXRpIG5lbGxhIHNpZGViYXJcbiAgdGhpcy5pZCA9IFwiaXRlcm5ldC1lZGl0aW5nLXBhbmVsXCI7XG4gIHRoaXMubmFtZSA9IFwiR2VzdGlvbmUgZGF0aSBJVEVSTkVUXCI7XG4gIHRoaXMuaW50ZXJuYWxQYW5lbCA9IG5ldyBQYW5lbENvbXBvbmVudCgpO1xufVxuXG5pbmhlcml0KEVkaXRvclBhbmVsLCBQYW5lbCk7XG5cbnZhciBwcm90byA9IFBhbmVsLnByb3RvdHlwZTtcblxuLy8gdmllbmUgcmljaGlhbWF0byBkYWxsYSB0b29sYmFyXG4vLyBxdWFuZG8gaWwgcGx1Z2luIGNoaWVkZSBkaSBtb3N0cmFyZSB1biBwcm9wcmlvIHBhbm5lbGxvIG5lbGxhIEdVSSAoR1VJLnNob3dQYW5lbClcbnByb3RvLm9uU2hvdyA9IGZ1bmN0aW9uKGNvbnRhaW5lcil7XG4gIHZhciBwYW5lbCA9IHRoaXMuaW50ZXJuYWxQYW5lbDtcbiAgcGFuZWwuJG1vdW50KCkuJGFwcGVuZFRvKGNvbnRhaW5lcik7XG4gIHJldHVybiByZXNvbHZlZFZhbHVlKHRydWUpO1xufTtcblxuLy8gcmljaGlhbWF0byBxdWFuZG8gbGEgR1VJIGNoaWVkZSBkaSBjaGl1ZGVyZSBpbCBwYW5uZWxsby4gU2Ugcml0b3JuYSBmYWxzZSBpbCBwYW5uZWxsbyBub24gdmllbmUgY2hpdXNvXG5wcm90by5vbkNsb3NlID0gZnVuY3Rpb24oKXtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gIFNlcnZpY2Uuc3RvcCgpXG4gIC50aGVuKGZ1bmN0aW9uKCl7XG4gICAgc2VsZi5pbnRlcm5hbFBhbmVsLiRkZXN0cm95KHRydWUpO1xuICAgIHNlbGYuaW50ZXJuYWxQYW5lbCA9IG51bGw7XG4gICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICB9KVxuICAuZmFpbChmdW5jdGlvbigpe1xuICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICB9KTtcbiAgXG4gIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRvclBhbmVsO1xuXG59LHtcIi4vcGFuZWwuaHRtbFwiOjQsXCIuL3BsdWdpbnNlcnZpY2VcIjo3fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vL1F1aSBjaSBzb25vIGdsaSBlZGl0b3IgKGNsYXNzaSkgdXNhdGkgZGFpIHZhcmkgbGF5ZXJcbnZhciBHZW9ub3Rlc0VkaXRvciA9IHJlcXVpcmUoJy4vZWRpdG9ycy9nZW9ub3Rlc2VkaXRvcicpO1xuXG4vL2RlZmluaXNjbyBpIGNvZGljaSBsYXllclxudmFyIGxheWVyQ29kZXMgPSB0aGlzLmxheWVyQ29kZXMgPSB7XG4gICAgR0VPTk9URVM6ICdub3RlJ1xufTtcbi8vIGNsYXNzaSBlZGl0b3JcbnZhciBlZGl0b3JDbGFzcyA9IHt9O1xuZWRpdG9yQ2xhc3NbbGF5ZXJDb2Rlcy5HRU9OT1RFU10gPSBHZW9ub3Rlc0VkaXRvcjtcblxuLy9kZmluaXNjbyBsYXllciBkZWwgcGx1Z2luIGNvbWUgb2dnZXR0b1xudmFyIGxheWVycyA9IHt9O1xubGF5ZXJzW2xheWVyQ29kZXMuR0VPTk9URVNdID0ge1xuICAgIGxheWVyQ29kZTogbGF5ZXJDb2Rlcy5HRU9OT1RFUyxcbiAgICB2ZWN0b3I6IG51bGwsXG4gICAgZWRpdG9yOiBudWxsLFxuICAgIGljb251cmw6IG51bGwsXG4gICAgLy9kZWZpbmlzY28gbG8gc3RpbGVcbiAgICBzdHlsZTogZnVuY3Rpb24oZmVhdHVyZSkge1xuICAgICAgICB2YXIgZmVhdHVyZVN0eWxlO1xuICAgICAgICB2YXIgaWNvbnVybCA9IHRoaXMuaWNvbnVybDtcbiAgICAgICAgaWYgKGljb251cmwpIHtcbiAgICAgICAgICBmZWF0dXJlU3R5bGUgPSBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5JY29uKHtcbiAgICAgICAgICAgICAgYW5jaG9yOiBbMC41LCA0Nl0sXG4gICAgICAgICAgICAgIGFuY2hvclhVbml0czogJ2ZyYWN0aW9uJyxcbiAgICAgICAgICAgICAgYW5jaG9yWVVuaXRzOiAncGl4ZWxzJywgb3BhY2l0eTogMC43NSxcbiAgICAgICAgICAgICAgc3JjOiBpY29udXJsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmVhdHVyZVN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgICAgICAgcmFkaXVzOiA1LFxuICAgICAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZlYXR1cmVTdHlsZVxuICAgICAgICBdXG4gICAgfVxufTtcblxuLy8gZGVmaW5pc2NvIGkgdG9vbHNcbmZ1bmN0aW9uIHRvb2xzKHBsdWdpbikge1xuXG4gICAgcmV0dXJuIHRvb2xzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIlZpc3VhbGl6emEgR2Vvbm90ZXNcIixcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICBhY3Rpb246IF8uYmluZChwbHVnaW4udG9vbHNBY3Rpb25zLnNob3dIaWRlTGF5ZXIsIHBsdWdpbilcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJTdHJ1bWVudGkgR2Vvbm90ZXNcIixcbiAgICAgICAgICAgIGFjdGlvbjogXy5iaW5kKHBsdWdpbi50b29sc0FjdGlvbnMuc2hvd0VkaXRpbmdQYW5lbCwgcGx1Z2luKVxuICAgICAgICB9XG4gICAgXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbGF5ZXJzQ29kZTogbGF5ZXJDb2RlcyxcbiAgICBsYXllcnM6IGxheWVycyxcbiAgICBlZGl0b3JDbGFzczogZWRpdG9yQ2xhc3MsXG4gICAgdG9vbHM6IHRvb2xzXG59O1xuXG59LHtcIi4vZWRpdG9ycy9nZW9ub3Rlc2VkaXRvclwiOjJ9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmhlcml0ID0gZzN3c2RrLmNvcmUudXRpbHMuaW5oZXJpdDtcbnZhciBHM1dPYmplY3QgPSBnM3dzZGsuY29yZS5HM1dPYmplY3Q7XG52YXIgR1VJID0gZzN3c2RrLmd1aS5HVUk7XG52YXIgVmVjdG9yTG9hZGVyTGF5ZXIgPSBnM3dzZGsuY29yZS5WZWN0b3JMYXllckxvYWRlcjtcbnZhciBGb3JtQ2xhc3MgPSByZXF1aXJlKCcuL2VkaXRvcnMvYXR0cmlidXRlc2Zvcm0nKTtcblxuZnVuY3Rpb24gR2Vvbm90ZXNTZXJ2aWNlKCkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgLy9xdWkgdmFkbyAgYSBzZXR0YXJlIGlsIG1hcHNlcnZpY2VcbiAgdGhpcy5fbWFwU2VydmljZSA9IG51bGw7XG4gIHRoaXMuX2xvYWREYXRhT25NYXBWaWV3Q2hhbmdlTGlzdGVuZXIgPSBudWxsO1xuICB0aGlzLl9jdXJyZW50RWRpdGluZ0xheWVyID0gbnVsbDtcbiAgdGhpcy5fbG9hZGVkRXh0ZW50ID0gbnVsbDtcblxuICB0aGlzLnN0YXRlID0ge1xuICAgIGVkaXRpbmc6IHtcbiAgICAgIG9uOiBmYWxzZSxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbGF5ZXJDb2RlOiBudWxsLFxuICAgICAgdG9vbFR5cGU6IG51bGwsXG4gICAgICBzdGFydGluZ0VkaXRpbmdUb29sOiBmYWxzZSxcbiAgICAgIHRvb2xzdGVwOiB7XG4gICAgICAgIG46IG51bGwsXG4gICAgICAgIHRvdGFsOiBudWxsLFxuICAgICAgICBtZXNzYWdlOiBudWxsXG4gICAgICB9XG4gICAgfSxcbiAgICByZXRyaWV2aW5nRGF0YTogZmFsc2UsXG4gICAgaGFzRWRpdHM6IGZhbHNlXG4gIH07XG5cbiAgLy9kZWZpbmlzY28gaWwgbG9hZGVyIGRlbCBwbHVnaW5cbiAgdGhpcy5fbG9hZGVyID0gbmV3IFZlY3RvckxvYWRlckxheWVyO1xuICAvLyB2aW5jb2xpIGFsbGEgcG9zc2liaWxpdMOgICBkaSBhdHRpdmFyZSBsJ2VkaXRpbmdcbiAgdmFyIGVkaXRpbmdDb25zdHJhaW50cyA9IHtcbiAgICByZXNvbHV0aW9uOiAxIC8vIHZpbmNvbG8gZGkgcmlzb2x1emlvbmUgbWFzc2ltYVxuICB9O1xuICAvLyBpbml6aWFsaXp6YXppb25lIGRlbCBwbHVnaW5cbiAgLy8gY2hpYW10byBkYWxsICRzY3JpcHQodXJsKSBkZWwgcGx1Z2luIHJlZ2lzdHJ5XG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZywgcGx1Z2luQ29uZmlnKSB7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fbGF5ZXJzID0gcGx1Z2luQ29uZmlnLmxheWVycztcbiAgICB0aGlzLl9lZGl0b3JDbGFzcyA9IHBsdWdpbkNvbmZpZy5lZGl0b3JDbGFzcztcbiAgICB0aGlzLmxheWVyQ29kZXMgPSBwbHVnaW5Db25maWcubGF5ZXJzQ29kZTtcbiAgICB0aGlzLl9jdXN0b21VcmxQYXJhbWV0ZXJzID0gcGx1Z2luQ29uZmlnLmN1c3RvbVVybFBhcmFtZXRlcnMgfHwgbnVsbDtcbiAgICAvLyBzZXR0byBpbCBtYXBzZXJ2aWNlIGNoZSBtaSBwZXJtZXR0ZSBkaSBpbmVyYWdpcmUgY29uIGxhIG1hcHBhXG4gICAgdGhpcy5fbWFwU2VydmljZSA9IEdVSS5nZXRDb21wb25lbnQoJ21hcCcpLmdldFNlcnZpY2UoKTtcbiAgICAvL2luaXppYWxpenpvIGlsIGxvYWRlclxuICAgIC8vIHBhc3NhbmRvZ2xpOlxuICAgIC8vIDEgLSBsYXllcnMgZGVsIHBsdWdpbiAoc3R5bGUgZXRjLi4pXG4gICAgLy8gMiAtIGxhIGJhc2V1cmwgY2hlIG1pIHNlcnZlciBwZXIgaW50ZXJhZ2lyZSBjb24gaWwgc2VydmVyIHBlciBmYXJlIHR1dHRlIGxlIG1vZGlmaWNoZVxuICAgIHZhciBvcHRpb25zX2xvYWRlciA9IHtcbiAgICAgICdsYXllcnMnOiB0aGlzLl9sYXllcnMsXG4gICAgICAnYmFzZXVybCc6IHRoaXMuY29uZmlnLmJhc2V1cmwsXG4gICAgICAnbWFwU2VydmljZSc6IHRoaXMuX21hcFNlcnZpY2VcbiAgICB9O1xuICAgIC8vaW5pemlhbGl6em8gaWwgbG9hZGVyXG4gICAgdGhpcy5fbG9hZGVyLmluaXQob3B0aW9uc19sb2FkZXIpO1xuICAgIC8vY2FzbyBkaSBsb2FkaW5nIGRhdGFcbiAgICB0aGlzLl9sb2FkZXIub24oJ2xvYWRpbmd2ZWN0b3JsYXllcnNzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5zdGF0ZS5yZXRyaWV2aW5nRGF0YSA9IHRydWU7XG4gICAgfSk7XG4gICAgdGhpcy5fbG9hZGVyLm9uKCdsb2FkaW5ndmVjdG9ybGF5ZXJzZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnN0YXRlLnJldHJpZXZpbmdEYXRhID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICAvLyBkaXNhYmlsaXRvIGwnZXZlbnR1YWxlIHRvb2wgYXR0aXZvIHNlIHZpZW5lIGF0dGl2YXRhXG4gICAgLy8gdW4naW50ZXJhemlvbmUgZGkgdGlwbyBwb2ludGVySW50ZXJhY3Rpb25TZXQgc3VsbGEgbWFwcGFcbiAgICB0aGlzLl9tYXBTZXJ2aWNlLm9uKCdwb2ludGVySW50ZXJhY3Rpb25TZXQnLCBmdW5jdGlvbihpbnRlcmFjdGlvbikge1xuICAgICAgdmFyIGN1cnJlbnRFZGl0aW5nTGF5ZXIgPSBzZWxmLl9nZXRDdXJyZW50RWRpdGluZ0xheWVyKCk7XG4gICAgICBpZiAoY3VycmVudEVkaXRpbmdMYXllcikge1xuICAgICAgICB2YXIgYWN0aXZlVG9vbCA9IGN1cnJlbnRFZGl0aW5nTGF5ZXIuZWRpdG9yLmdldEFjdGl2ZVRvb2woKS5pbnN0YW5jZTtcbiAgICAgICAgLy8gZGV2byB2ZXJpZmljYXJlIGNoZSBub24gc2lhIHVuJ2ludGVyYXppb25lIGF0dGl2YXRhIGRhIHVubyBkZWkgdG9vbCBkaSBlZGl0aW5nIGRlbCBwbHVnaW5cbiAgICAgICAgaWYgKGFjdGl2ZVRvb2wgJiYgIWFjdGl2ZVRvb2wub3duc0ludGVyYWN0aW9uKGludGVyYWN0aW9uKSkge1xuICAgICAgICAgIHNlbGYuX3N0b3BFZGl0aW5nVG9vbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gIGFiaWxpdG8gbyBtZW5vIGwnZWRpdGluZyBpbiBiYXNlIGFsbGEgcmlzb2x1emlvbmUgZGVsbGEgbWFwcGFcbiAgICB0aGlzLl9tYXBTZXJ2aWNlLm9uYWZ0ZXIoJ3NldE1hcFZpZXcnLGZ1bmN0aW9uKGJib3gsIHJlc29sdXRpb24sIGNlbnRlcil7XG4gICAgICBzZWxmLnN0YXRlLmVkaXRpbmcuZW5hYmxlZCA9IChyZXNvbHV0aW9uIDwgZWRpdGluZ0NvbnN0cmFpbnRzLnJlc29sdXRpb24pID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0pO1xuICAgIC8vIGF0dHJpYnV0byBkZWxsbyBzdGF0byBkZWwgc3Jldml6aW8gY2hlIG1pIHBlcm1ldHRlIGRpIGFjY2VuZGVyZSBvIHNwZW5nZXJlIGwnZWRpdGluZ1xuICAgIC8vIHNlcnZlIGFuY2hlIHBlciBwb3RlciBpbiBmYXNlIGRpIHRvZ2dsZUVkaXRpbmcoYm90dG9uZSBkaSBhdnZpbyBlZGl0aW5nKSBkaSB2ZWRlcmUgc2UgcG9zc28gaW56aWFyZSBvIG1lbm9cbiAgICAvLyBjYXJpY2FyZSBpIHZldHRvcmlhbGkgZXRjLi5cbiAgICB0aGlzLnN0YXRlLmVkaXRpbmcuZW5hYmxlZCA9ICh0aGlzLl9tYXBTZXJ2aWNlLmdldFJlc29sdXRpb24oKSA8IGVkaXRpbmdDb25zdHJhaW50cy5yZXNvbHV0aW9uKSA/IHRydWUgOiBmYWxzZTtcbiAgICAvLyBwZXIgb2duaSBsYXllciBkZWZpbml0aSBuZWwgcGx1Z2luIHNldHRvIG5hbWUgZSBpZFxuICAgIC8vIHJlY3VwZXJhdGkgZ3JhemllIGFsIG1hcHNlcnZpY2VcbiAgICBfLmZvckVhY2godGhpcy5fbGF5ZXJzLCBmdW5jdGlvbihMYXllciwgbGF5ZXJDb2RlKSB7XG4gICAgICAvL3JlY3VwZXJvIGwnaWQgZGFsbGEgY29uZmlndXJhemlvbmUgZGVsIHBsdWdpblxuICAgICAgLy8gaSBsYXllcnMgbmVsbGEgY29uZmlndXJhemlvbmUgcGFzc2F0YSBpIGxheWVycyBoYW5ubyBkdWUgYXR0cmlidXRpOiBpZCBlIG5hbWVcbiAgICAgIHZhciBsYXllcklkID0gY29uZmlnLmxheWVyc1tsYXllckNvZGVdLmlkO1xuICAgICAgdmFyIGxheWVyTmFtZSA9IGNvbmZpZy5sYXllcnNbbGF5ZXJDb2RlXS5uYW1lO1xuICAgICAgLy8gcmVjdXBlcmEgaWwgbGF5ZXIgZGFsIG1hcHNlcnZpY2VcbiAgICAgIHZhciBsYXllciA9IHNlbGYuX21hcFNlcnZpY2UuZ2V0UHJvamVjdCgpLmdldExheWVyQnlJZChsYXllcklkKTtcbiAgICAgIC8vIG1lc3NvIGFsIG1vbWVudG8gZ2VuZXJpY28gcGVyIHJpcHJlbmRlcmUgc3Rlc3NvIGNvbm1wb3J0YW1lbnRvIEl0ZXJuZXRcbiAgICAgIGlmIChsYXllcikge1xuICAgICAgICAvLyByZWN1cGVybyBsJ29yaWdpbiBuYW1lIGRhbCBwcm9qZWN0bGF5ZXJcbiAgICAgICAgTGF5ZXIubmFtZSA9IGxheWVyLmdldE9yaWdOYW1lKCk7XG4gICAgICAgIExheWVyLmlkID0gbGF5ZXJJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIExheWVyLm5hbWUgPSBsYXllck5hbWU7XG4gICAgICAgIExheWVyLmlkID0gbGF5ZXJJZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgLy8gZmluZSBkZWwgbWV0b2RvIElOSVRcblxuICAvL3N0b3BcbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgaWYgKHRoaXMuc3RhdGUuZWRpdGluZy5vbikge1xuICAgICAgdGhpcy5fY2FuY2VsT3JTYXZlKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2VsZi5fc3RvcEVkaXRpbmcoKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgICB9KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfTtcblxuICAvLyBhdnZpbyBvIHRlcm1pbm8gbGEgc2Vzc2lvbmUgZGkgZWRpdGluZyBnZW5lcmFsZVxuICAvLyB1bnRvIGRpIHBhcnRlbnphIGRlbGwnYXZ2aW8gZGVsbCdlZGl0aW5nXG4gIHRoaXMudG9nZ2xlRWRpdGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGNyZW8gb2dnZXR0byBkZWZlcnJlZCBwZXIgcmVzdGl0dWlyZSB1bmEgcHJvbWlzZVxuICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAvLyBxdWkgZGljZSBjaGUgc2UgbmVsIGNhc28gbGEgcmlzb2x1emlvbmUgZGVsbGEgbWFwcGEgdmEgYmVuZSAoc3RhdGUuZWRpdGluZy5lbmFibGVkKVxuICAgIC8vIGUgbm9uIMOoIGFuY29yYSBzdGF0byBhdHRpdmF0byBsJ2VkaXRpbmdcbiAgICAvLyBxdWluZGkgY2FzbyBwcmltYSB2b2x0YVxuICAgIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcuZW5hYmxlZCAmJiAhdGhpcy5zdGF0ZS5lZGl0aW5nLm9uKSB7XG4gICAgICAvLyBmYWNjaW8gcGFydGlyZSBlZGl0aW5nXG4gICAgICB0aGlzLl9zdGFydEVkaXRpbmcoKTtcbiAgICB9XG4gICAgLy8gYWx0cmltZW50aSBzZSDDqCBnacOgIGluIGVkaXRpbmcgY2hpYW1vIGxvIHN0b3AgZGVsIHBsdWdpblxuICAgIC8vIGNoZSBub24gw6ggYWx0cm8gY2hlIGxvcyB0b3BvIGRlbGwnZWRpdGluZ1xuICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUuZWRpdGluZy5vbikge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcCgpO1xuICAgIH1cbiAgICAvLyByZXN0aXR1aXNjbyB1bmEgcHJvbWVzc2FcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICB9O1xuXG4gIHRoaXMuc2F2ZUVkaXRzID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLl9jYW5jZWxPclNhdmUoMik7XG4gIH07XG5cbiAgLy8gYXZ2aWEgdW5vIGRlaSB0b29sIGRpIGVkaXRpbmcgdHJhIHF1ZWxsaSBzdXBwb3J0YXRpIGRhIEVkaXRvciAoYWRkZmVhdHVyZSwgZWNjLilcbiAgLy8gZnVuemlvbmUgZGVsbCdlbGVtZW50byBwYW5lbCB2dWVcbiAgdGhpcy50b2dnbGVFZGl0VG9vbCA9IGZ1bmN0aW9uKGxheWVyQ29kZSwgdG9vbFR5cGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy9wcmVuZG8gaWwgbGF5ZXIgaW4gYmFzZSBhbCBjb2RpY2UgcGFzc2F0byBkYWxsIGNvbXBvbmVudGUgdnVlXG4gICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVyQ29kZV07XG4gICAgaWYgKGxheWVyKSB7XG4gICAgICAvL3JlY3VwcmVybyBpbCBjdXJyZW50IGxheWVyIGluIGVkaXRpbmdcbiAgICAgIHZhciBjdXJyZW50RWRpdGluZ0xheWVyID0gdGhpcy5fZ2V0Q3VycmVudEVkaXRpbmdMYXllcigpO1xuICAgICAgLy8gc2Ugc2kgc3RhIHVzYW5kbyB1biB0b29sIGNoZSBwcmV2ZWRlIGxvIHN0ZXNzbyBsYXllciBpbiBlZGl0YXppb25lXG4gICAgICBpZiAoY3VycmVudEVkaXRpbmdMYXllciAmJiBsYXllckNvZGUgPT0gY3VycmVudEVkaXRpbmdMYXllci5sYXllckNvZGUpIHtcbiAgICAgICAgLy8gZSBsbyBzdGVzc28gdG9vbCBhbGxvcmEgZGlzYXR0aXZvIGlsIHRvb2wgKGluIHF1YW50byDDqFxuICAgICAgICAvLyBwcmVtdXRvIHN1bGxvIHN0ZXNzbyBib3R0b25lKVxuICAgICAgICBpZiAodG9vbFR5cGUgPT0gY3VycmVudEVkaXRpbmdMYXllci5lZGl0b3IuZ2V0QWN0aXZlVG9vbCgpLmdldFR5cGUoKSkge1xuICAgICAgICAgIC8vIHN0ZXNzbyB0aXBvIGRpIHRvb2wgcXVpbmRpIHNpIMOoIHZlcmlmaWNhdG8gdW4gdG9nZ2xlIG5lbCBib3R0b25lXG4gICAgICAgICAgLy8gYWxsb3JhIHN0aXBwbyBsJ2VkaXRpbmcgVG9vbFxuICAgICAgICAgIHRoaXMuX3N0b3BFZGl0aW5nVG9vbCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFsdHJpbWVudGkgYXR0aXZvIGlsIHRvb2wgcmljaGllc3RvXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vc3RvcHBvIHByZXZlbnRpdmFtZW50ZSBsJ2VkaXRpbmcgdG9vbCBhdHRpdm9cbiAgICAgICAgICB0aGlzLl9zdG9wRWRpdGluZ1Rvb2woKTtcbiAgICAgICAgICAvL2ZhY2NpbyBwYXJ0aXJlIGwnZWRpdG5nIHRvb2wgcGFzc2FuZG8gY3VycmVudCBFZGl0aW5nIExheWVyIGUgaWwgdGlwbyBkaSB0b29sXG4gICAgICAgICAgdGhpcy5fc3RhcnRFZGl0aW5nVG9vbChjdXJyZW50RWRpdGluZ0xheWVyLCB0b29sVHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsdHJpbWVudGkgY2FzbyBpbiBjdWkgbm9uIMOoIHN0YXRvIHNldHRhdG8gaWwgY3VycmVudCBlZGl0aW5nIGxheWVyIG9cbiAgICAgICAgLy8gaWwgbGF5ZXIgY2hlIHNpIHN0YSBjZXJjYW5kbyBkaSBlZGl0YXJlIMOoIGRpdmVyc28gZGEgcXVlbGxvIGluIGVkaXRpbmcgaW4gcHJlY2VkZW56YVxuICAgICAgICAvLyBuZWwgY2FzbyBzaWEgZ2nDoCAgYXR0aXZvIHVuIGVkaXRvciB2ZXJpZmljbyBkaSBwb3RlcmxvIHN0b3BwYXJlXG4gICAgICAgIGlmIChjdXJyZW50RWRpdGluZ0xheWVyICYmIGN1cnJlbnRFZGl0aW5nTGF5ZXIuZWRpdG9yLmlzU3RhcnRlZCgpKSB7XG4gICAgICAgICAgLy8gc2UgbGEgdGVybWluYXppb25lIGRlbGwnZWRpdGluZyBzYXLDoCAgYW5kYXRhIGEgYnVvbiBmaW5lLCBzZXR0byBpbCB0b29sXG4gICAgICAgICAgLy8gcHJvdm8gYSBzdG9wcGFyZVxuICAgICAgICAgIHRoaXMuX2NhbmNlbE9yU2F2ZSgyKVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl9zdG9wRWRpdG9yKCkpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYuX3N0YXJ0RWRpdGluZ1Rvb2wobGF5ZXIsIHRvb2xUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL25lbCBjYXNvIHNpYSBsYSBwcmltYSB2b2x0YSBjaGUgaW50ZXJhZ2lzY28gY29uIHVuIHRvb2xcbiAgICAgICAgICAvLyBlIHF1aW5kaSBub24gw6ggc3RhdG8gc2V0dGF0byBuZXNzdW4gbGF5ZXIgaW4gZWRpdGluZ1xuICAgICAgICAgIHRoaXMuX3N0YXJ0RWRpdGluZ1Rvb2wobGF5ZXIsIHRvb2xUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvL2Z1bnppb25lIGNoZSByZXN0aXR1aXNjZSBsJ2FycmF5IGRlaSBjb2RpY2kgZGVpIGxheWVyc1xuICB0aGlzLmdldExheWVyQ29kZXMgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBfLnZhbHVlcyh0aGlzLmxheWVyQ29kZXMpO1xuICB9O1xuXG4gIC8qIE1FVE9ESSBQUklWQVRJICovXG4gIC8vIGZ1bnppb25lIHBlciBzZXR0YXJlIGlsIHZlY3RvcmxheWVyIGFsbGEgcHJvcmlldMOgIHZlY3RvciBkZWwgbGF5ZXJcbiAgdGhpcy5fc2V0VXBWZWN0b3JMYXllciA9IGZ1bmN0aW9uKGxheWVyQ29kZSwgdmVjdG9yTGF5ZXIpIHtcbiAgICB0aGlzLl9sYXllcnNbbGF5ZXJDb2RlXS52ZWN0b3IgPSB2ZWN0b3JMYXllcjtcbiAgfTtcblxuICAvL2Z1bnppb25lIGNoZSBwZXJtZXR0ZSBkaSBmYXJlIGlsIHNldHVwIGRlbGwnZWRpdG9yIGUgYXNzZWdhbnJsbyBhbCBsYXllclxuICB0aGlzLl9zZXRVcEVkaXRvciA9IGZ1bmN0aW9uKGxheWVyQ29kZSkge1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vb3B0aW9uIGVkaXRvclxuICAgIHZhciBvcHRpb25zX2VkaXRvciA9IHtcbiAgICAgICdtYXBTZXJ2aWNlJzogc2VsZi5fbWFwU2VydmljZSxcbiAgICAgICdmb3JtQ2xhc3MnOiBGb3JtQ2xhc3NcbiAgICB9O1xuICAgIC8vIHByZW5kbyBpbCB2ZWN0b3IgbGF5ZXIgZGVsIGxheWVyXG4gICAgdmFyIHZlY3RvckxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVyQ29kZV0udmVjdG9yO1xuICAgIC8vR0VTVElPTkUgRSBJTklaSUFMSVpaQVpJT05FIERFTEwnRURJVE9SIFJFTEFUSVZPIEFMIExBWUVSIFZFVFRPUklBTEVcbiAgICAvL2NyZW8gbCdpc3RhbnphIGRlbGwnZWRpdG9yIGNoZSBnZXN0aXLDoCBpbCBsYXllclxuICAgIHZhciBlZGl0b3IgPSBuZXcgc2VsZi5fZWRpdG9yQ2xhc3NbbGF5ZXJDb2RlXShvcHRpb25zX2VkaXRvcik7XG4gICAgLy9zZXR0byBpbCBsYXllciB2ZXR0b3JpYWxlIGFzc29jaWF0byBhbGwnZWRpdG9yXG4gICAgLy8gZSBpIHRpcGkgZGkgdG9vbHMgYXNzb2NpYXRpIGFkIGVzc29cbiAgICBlZGl0b3Iuc2V0VmVjdG9yTGF5ZXIodmVjdG9yTGF5ZXIpO1xuICAgIC8vZW1ldHRlIGV2ZW50byBjaGUgw6ggc3RhdGEgZ2VuZXJhdGEgdW5hIG1vZGlmaWNhIGxhIGxheWVyXG4gICAgZWRpdG9yLm9uKFwiZGlydHlcIiwgZnVuY3Rpb24gKGRpcnR5KSB7XG4gICAgICBzZWxmLnN0YXRlLmhhc0VkaXRzID0gZGlydHk7XG4gICAgfSk7XG4gICAgLy9hc3NlZ25vIGwnaXN0YW56YSBlZGl0b3IgYWwgbGF5ZXIgdHJhbWl0ZSBsYSBwcm9wcmlldMOgIGVkaXRvclxuICAgIHRoaXMuX2xheWVyc1tsYXllckNvZGVdLmVkaXRvciA9IGVkaXRvcjtcbiAgICAvLy8vIEZJTkUgR0VTVElPTkUgRURJVE9SXG4gIH07XG5cbiAgLy9mYSBwYXJ0aXJlIGwnZWRpdGluZ1xuICB0aGlzLl9zdGFydEVkaXRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBtaSBhc3NpY3VybyBjaGUgc2UgcGVyIHF1YWxzaXNpIG1vdGl2b1xuICAgIC8vIGZhY2NpbyB1bm8gc3RhcmVkaXRpbmcgZGkgdW4gZWRpdGluZyBnacOgIGF2dmlhdG9cbiAgICAvLyByaXRvcm5vIHBlcmNow6ggaG8gZ2nDoCB0dXR0byAobG8gZmFjY2lvIHBlciBzaWN1cmVubnphIG5vbiBzaSBzYSBtYWkpXG4gICAgaWYgKHRoaXMuc3RhdGUuZWRpdGluZy5vbiB8fCB0aGlzLnN0YXRlLnJldHJpZXZpbmdEYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBjaGllZG8gYWwgbG9hZGVyIGRpIGNhcmljYXJlIGkgZGF0aVxuICAgIHRoaXMuX2xvYWRlci5sb2FkTGF5ZXJzKCd3JywgdGhpcy5fY3VzdG9tVXJsUGFyYW1ldGVycykgLy8gY2FyaWNvIGkgbGF5ZXIgaW4gbW9kYWxpdMOgIGVkaXRpbmcgKHNjcml0dHVyYSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24odmVjdG9yTGF5ZXJzTG9hZGVkKSB7XG4gICAgICAgICAgY29uc29sZS5sb2codmVjdG9yTGF5ZXJzTG9hZGVkKTtcbiAgICAgICAgICAvL3VuYSB2b2x0YSBjaGUgaWwgbG9hZGVyIGhhIGZpbml0byBkaSBjYXJpY2FyZSBpIGxheWVyIHZldHRvcmlhbGlcbiAgICAgICAgICAvL3F1ZXN0byBtaSByZXN0aXR1aXNjZSBpIGNvZGljZSBkZWkgbGF5ZXIgY2hlIHNvbm8gc3RhdGkgY2FyaWNhdGkoYXJyYXkpXG4gICAgICAgICAgXy5mb3JFYWNoKHZlY3RvckxheWVyc0xvYWRlZCwgZnVuY3Rpb24gKGxheWVyQ29kZSkge1xuICAgICAgICAgICAgLy8gcGVyIG9nbmkgbGF5ZXIgZmFjY2lvIGlsIHNldHVwIGRlbGwnZWRpdG9yXG4gICAgICAgICAgICBzZWxmLl9zZXRVcEVkaXRvcihsYXllckNvZGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIHNlIHR1dHRvICDDqCBhbmRhdG8gYSBidW9uIGZpbmUgYWdnaXVuZ28gaSBWZWN0b3JMYXllciBhbGxhIG1hcHBhXG4gICAgICAgICAgc2VsZi5fYWRkVG9NYXAoKTtcbiAgICAgICAgICBzZWxmLnN0YXRlLmVkaXRpbmcub24gPSB0cnVlO1xuICAgICAgICAgIHNlbGYuZW1pdChcImVkaXRpbmdzdGFydGVkXCIpO1xuICAgICAgICAgIGlmICghc2VsZi5fbG9hZERhdGFPbk1hcFZpZXdDaGFuZ2VMaXN0ZW5lcikge1xuICAgICAgICAgICAgLy92aWVuZSByaXRvcm5hdGEgbGEgbGlzdGVuZXIga2V5XG4gICAgICAgICAgICBzZWxmLl9sb2FkRGF0YU9uTWFwVmlld0NoYW5nZUxpc3RlbmVyID0gc2VsZi5fbWFwU2VydmljZS5vbmFmdGVyKCdzZXRNYXBWaWV3JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLnN0YXRlLmVkaXRpbmcub24gJiYgc2VsZi5zdGF0ZS5lZGl0aW5nLmVuYWJsZWQpe1xuICAgICAgICAgICAgICAgIHNlbGYuX2xvYWRlci5sb2FkQWxsVmVjdG9yc0RhdGEoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbigpe1xuICAgICAgICAgIEdVSS5ub3RpZnkuZXJyb3IodCgnY291bGRfbm90X2xvYWRfdmVjdG9yX2xheWVycycpKTtcbiAgICAgICAgfSlcbiAgfTtcblxuICB0aGlzLl9zdG9wRWRpdGluZyA9IGZ1bmN0aW9uKHJlc2V0KXtcbiAgICAvLyBzZSBwb3NzbyBzdG9wcGFyZSB0dXR0aSBnbGkgZWRpdG9yLi4uXG4gICAgaWYgKHRoaXMuX3N0b3BFZGl0b3IocmVzZXQpKXtcbiAgICAgIF8uZm9yRWFjaCh0aGlzLl9sYXllcnMsIGZ1bmN0aW9uKGxheWVyLCBsYXllckNvZGUpe1xuICAgICAgICB2YXIgdmVjdG9yID0gbGF5ZXIudmVjdG9yO1xuICAgICAgICBzZWxmLl9tYXBTZXJ2aWNlLnZpZXdlci5yZW1vdmVMYXllckJ5TmFtZSh2ZWN0b3IubmFtZSk7XG4gICAgICAgIGxheWVyLnZlY3Rvcj0gbnVsbDtcbiAgICAgICAgbGF5ZXIuZWRpdG9yPSBudWxsO1xuICAgICAgICBzZWxmLl91bmxvY2tMYXllcihzZWxmLl9sYXllcnNbbGF5ZXJDb2RlXSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3VwZGF0ZUVkaXRpbmdTdGF0ZSgpO1xuICAgICAgc2VsZi5zdGF0ZS5lZGl0aW5nLm9uID0gZmFsc2U7XG4gICAgICBzZWxmLl9jbGVhblVwKCk7XG4gICAgICBzZWxmLmVtaXQoXCJlZGl0aW5nc3RvcHBlZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5fY2xlYW5VcCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vdmFkbyBhZCBhbm51bGFyZSBsJ2VzdGVuemlvbmUgZGVsIGxvYWRlciBwZXIgcG90ZXIgcmljYXJpY2FyZSBpIGRhdGkgdmV0dHRvcmlhbGlcbiAgICAvL2RhIHJpdmVkZXJlO1xuICAgIHRoaXMuX2xvYWRlci5jbGVhblVwTGF5ZXJzKCk7XG5cbiAgfTtcbiAgLy9zZSBub24gw6ggYW5jb3JhIHBhcnRpdG8gZmFjY2lvIHBhcnRpcmUgbG8gc3RhcnQgZWRpdG9yXG4gIHRoaXMuX3N0YXJ0RWRpdG9yID0gZnVuY3Rpb24obGF5ZXIpe1xuICAgIC8vIGF2dmlvIGwnZWRpdG9yXG4gICAgLy8gcGFzc2FuZG9saSBpbCBzZXJ2aWNlIGNoZSBsbyBhY2NldHRhXG4gICAgaWYgKGxheWVyLmVkaXRvci5zdGFydCh0aGlzKSkge1xuICAgICAgLy8gcmVnaXN0cm8gaWwgY3VycmVudCBsYXllciBpbiBlZGl0aW5nXG4gICAgICB0aGlzLl9zZXRDdXJyZW50RWRpdGluZ0xheWVyKGxheWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIC8vZnVuemlvbmUgY2hlIHZpZW5lIGNoaWFtYXRhIGFsIGNsaWNrIHN1IHVuIHRvb2wgZGVsbCdlZGl0aW5nIGUgc2VcbiAgLy9ub24gw6ggc3RhdG8gYXNzZWduYXRvIGFuY29yYSBuZXNzdW4gbGF5ZXIgY29tZSBjdXJyZW50IGxheWVyIGVkaXRpbmdcbiAgdGhpcy5fc3RhcnRFZGl0aW5nVG9vbCA9IGZ1bmN0aW9uKGxheWVyLCB0b29sVHlwZSwgb3B0aW9ucykge1xuICAgIC8vYXNzZWdubyB0cnVlIGFsbG8gc3RhcnRFZGl0aW5nVG9vbCBhdHRyaWJ1dG8gZGVsbGxvIHN0YXRlXG4gICAgdGhpcy5zdGF0ZS5zdGFydGluZ0VkaXRpbmdUb29sID0gdHJ1ZTtcbiAgICB2YXIgY2FuU3RhcnRUb29sID0gdHJ1ZTtcbiAgICAvL3ZlcmlmaWNvIHNlIGwnZWRpdG9yIMOoIHBhcnRpdG8gbyBtZW5vXG4gICAgaWYgKCFsYXllci5lZGl0b3IuaXNTdGFydGVkKCkpIHtcbiAgICAgIC8vc2Ugbm9uIMOoIGFuY29yYSBwYXJ0aXRvIGxvIGZhY2NpbyBwYXJ0aXJlIGUgbmUgcHJlbmRvIGlsIHJpc3VsdGF0b1xuICAgICAgLy8gdHJ1ZSBvIGZhbHNlXG4gICAgICBjYW5TdGFydFRvb2wgPSB0aGlzLl9zdGFydEVkaXRvcihsYXllcik7XG4gICAgfVxuICAgIC8vIHZlcmlmaWNhIHNlIGlsIHRvb2wgcHXDsiBlc3NlcmUgYXR0aXZhdG9cbiAgICAvLyBsJ2VkaXRvciB2ZXJpZmljYSBzZSBpbCB0b29sIHJpY2hpZXN0byDDqCBjb21wYXRpYmlsZVxuICAgIC8vIGNvbiBpIHRvb2xzIHByZXZpc3RpIGRhbGwnZWRpdG9yLiBDcmVhIGlzdGFuemEgZGkgdG9vbCBlIGF2dmlhIGlsIHRvb2xcbiAgICAvLyBhdHRyYXZlcnNvIGlsIG1ldG9kbyBydW5cbiAgICBpZiAoY2FuU3RhcnRUb29sICYmIGxheWVyLmVkaXRvci5zZXRUb29sKHRvb2xUeXBlLCBvcHRpb25zKSkge1xuICAgICAgdGhpcy5fdXBkYXRlRWRpdGluZ1N0YXRlKCk7XG4gICAgICB0aGlzLnN0YXRlLnN0YXJ0aW5nRWRpdGluZ1Rvb2wgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlLnN0YXJ0aW5nRWRpdGluZ1Rvb2wgPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5fc3RvcEVkaXRvciA9IGZ1bmN0aW9uKHJlc2V0KXtcbiAgICB2YXIgcmV0ID0gdHJ1ZTtcbiAgICB2YXIgbGF5ZXIgPSB0aGlzLl9nZXRDdXJyZW50RWRpdGluZ0xheWVyKCk7XG4gICAgaWYgKGxheWVyKSB7XG4gICAgICByZXQgPSBsYXllci5lZGl0b3Iuc3RvcChyZXNldCk7XG4gICAgICBpZiAocmV0KXtcbiAgICAgICAgdGhpcy5fc2V0Q3VycmVudEVkaXRpbmdMYXllcigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuICAvLyBmdW56aW9uZSBjaGUgc2kgb2NjdXBhIGRpIGludGVycm9tZXBlcmUgbCdlZHRpbmcgdG9vbFxuICB0aGlzLl9zdG9wRWRpdGluZ1Rvb2wgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmV0ID0gdHJ1ZTtcbiAgICAvLyByZWN1cGVyZSBpbCBsYXllciBpbiBjdXJyZW50IGVkaXRpbmdcbiAgICB2YXIgbGF5ZXIgPSB0aGlzLl9nZXRDdXJyZW50RWRpdGluZ0xheWVyKCk7XG4gICAgLy8gc2UgZXNpc3RlIGVkIGVyYSBzdGF0byBzZXR0YXRvXG4gICAgaWYgKGxheWVyKSB7XG4gICAgICAvLyBzZSBhbmRhdG8gYmVuZSByaXRvcm5hIHRydWVcbiAgICAgIHJldCA9IGxheWVyLmVkaXRvci5zdG9wVG9vbCgpO1xuICAgICAgaWYgKHJldCkge1xuICAgICAgICB0aGlzLl91cGRhdGVFZGl0aW5nU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbiAgLy8gZnVuemlvbmUgY2hlIGFjY2V0dGEgY29tZSBwYXJhbWV0cm8gaWwgdGlwbyBkaVxuICAvLyBvcGVyYXppb25lIGRhIGZhcmUgYSBzZWNvbmRhIGRpY29zYSDDqCBhdnZlbnV0b1xuICB0aGlzLl9jYW5jZWxPclNhdmUgPSBmdW5jdGlvbih0eXBlKXtcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgLy8gcGVyIHNpY3VyZXp6YSB0ZW5nbyB0dXR0byBkZW50cm8gdW4gZ3Jvc3NvIHRyeS9jYXRjaCxcbiAgICAvLyBwZXIgbm9uIHJpc2NoaWFyZSBkaSBwcm92b2NhcmUgaW5jb25zaXN0ZW56ZSBuZWkgZGF0aSBkdXJhbnRlIGlsIHNhbHZhdGFnZ2lvXG4gICAgdHJ5IHtcbiAgICAgIHZhciBfYXNrVHlwZSA9IDE7XG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBfYXNrVHlwZSA9IHR5cGVcbiAgICAgIH1cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBjaG9pY2UgPSBcImNhbmNlbFwiO1xuICAgICAgdmFyIGRpcnR5RWRpdG9ycyA9IHt9O1xuICAgICAgLy8gdmVyaWZpY28gcGVyIG9nbmkgbGF5ZXIgc2UgbCdlZGl0byBhc3NvY2lhdG8gw6ggRGlydHlcbiAgICAgIF8uZm9yRWFjaCh0aGlzLl9sYXllcnMsIGZ1bmN0aW9uKGxheWVyLCBsYXllckNvZGUpIHtcbiAgICAgICAgaWYgKGxheWVyLmVkaXRvci5pc0RpcnR5KCkpIHtcbiAgICAgICAgICBkaXJ0eUVkaXRvcnNbbGF5ZXJDb2RlXSA9IGxheWVyLmVkaXRvcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyB2ZXJpZmljbyBzZSBjaSBzb25vIG8gbWVubyBlZGl0b3Igc3BvcmNoaVxuICAgICAgaWYoXy5rZXlzKGRpcnR5RWRpdG9ycykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2Fza0NhbmNlbE9yU2F2ZShfYXNrVHlwZSkuXG4gICAgICAgIHRoZW4oZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgICAgLy8gcml0b3JuYSBpbCB0aXBvIGRpIGF6aW9uZSBkYSBmYXJlXG4gICAgICAgICAgLy8gc2F2ZSwgY2FuY2VsLCBub3NhdmVcbiAgICAgICAgICBpZiAoYWN0aW9uID09PSAnc2F2ZScpIHtcbiAgICAgICAgICAgIC8vIHBhc3NvIGdsaSBlZGl0b3Igc3BvY2hpIGFsbGEgZnVuemlvbmUgX3NhdmVFZGl0c1xuICAgICAgICAgICAgc2VsZi5fc2F2ZUVkaXRzKGRpcnR5RWRpdG9ycykuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09ICdub3NhdmUnKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gJ2NhbmNlbCcpIHtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfTtcbiAgLy8gZnVuemlvbmUgY2hlIGluIGJhc2UgYWwgdGlwbyBkaSBhc2tUeXBlXG4gIC8vIHZpc3VhbGl6emEgaWwgbW9kYWxlIGEgY3VpIHJpc3BvbmRlcmUsIHNhbHZhIGV0YyAuLlxuICB0aGlzLl9hc2tDYW5jZWxPclNhdmUgPSBmdW5jdGlvbih0eXBlKXtcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgdmFyIGJ1dHRvblR5cGVzID0ge1xuICAgICAgU0FWRToge1xuICAgICAgICBsYWJlbDogXCJTYWx2YVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiYnRuLXN1Y2Nlc3NcIixcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnc2F2ZScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgTk9TQVZFOiB7XG4gICAgICAgIGxhYmVsOiBcIlRlcm1pbmEgc2VuemEgc2FsdmFyZVwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiYnRuLWRhbmdlclwiLFxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKXtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdub3NhdmUnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIENBTkNFTDoge1xuICAgICAgICBsYWJlbDogXCJBbm51bGxhXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJidG4tcHJpbWFyeVwiLFxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKXtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdjYW5jZWwnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgc3dpdGNoICh0eXBlKXtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgYnV0dG9ucyA9IHtcbiAgICAgICAgICBzYXZlOiBidXR0b25UeXBlcy5TQVZFLFxuICAgICAgICAgIG5vc2F2ZTogYnV0dG9uVHlwZXMuTk9TQVZFLFxuICAgICAgICAgIGNhbmNlbDogYnV0dG9uVHlwZXMuQ0FOQ0VMXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBidXR0b25zID0ge1xuICAgICAgICAgIHNhdmU6IGJ1dHRvblR5cGVzLlNBVkUsXG4gICAgICAgICAgY2FuY2VsOiBidXR0b25UeXBlcy5DQU5DRUxcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIEdVSS5kaWFsb2cuZGlhbG9nKHtcbiAgICAgIG1lc3NhZ2U6IFwiVnVvaSBzYWx2YXJlIGRlZmluaXRpdmFtZW50ZSBsZSBtb2RpZmljaGU/XCIsXG4gICAgICB0aXRsZTogXCJTYWx2YXRhZ2dpbyBtb2RpZmljYVwiLFxuICAgICAgYnV0dG9uczogYnV0dG9uc1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gIH07XG4gIC8vIGZ1bnppb25lIGNoZSBzYWx2YSBpIGRhdGkgcmVsYXRpdmkgYWwgbGF5ZXIgdmV0dG9yaWFsZVxuICAvLyBkZWwgZGlydHlFZGl0b3JcbiAgdGhpcy5fc2F2ZUVkaXRzID0gZnVuY3Rpb24oZGlydHlFZGl0b3JzKXtcbiAgICB2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgdGhpcy5fc2VuZEVkaXRzKGRpcnR5RWRpdG9ycylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgIEdVSS5ub3RpZnkuc3VjY2VzcyhcIkkgZGF0aSBzb25vIHN0YXRpIHNhbHZhdGkgY29ycmV0dGFtZW50ZVwiKTtcbiAgICAgICAgICBzZWxmLl9jb21taXRFZGl0cyhkaXJ0eUVkaXRvcnMsIHJlc3BvbnNlKTtcbiAgICAgICAgICBzZWxmLl9tYXBTZXJ2aWNlLnJlZnJlc2hNYXAoKTtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKGVycm9ycyl7XG4gICAgICAgICAgR1VJLm5vdGlmeS5lcnJvcihcIkVycm9yZSBuZWwgc2FsdmF0YWdnaW8gc3VsIHNlcnZlclwiKTtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gIH07XG4gIC8vIGZ1bnppb25lIGNoZSBwcmVuZGUgY29tZSBpbmdyZXNzbyBnbGkgZWRpdG9yIHNwb3JjaGlcbiAgdGhpcy5fc2VuZEVkaXRzID0gZnVuY3Rpb24oZGlydHlFZGl0b3JzKSB7XG4gICAgdmFyIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgIHZhciBlZGl0c1RvUHVzaCA9IF8ubWFwKGRpcnR5RWRpdG9ycywgZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXllcm5hbWU6IGVkaXRvci5nZXRWZWN0b3JMYXllcigpLm5hbWUsXG4gICAgICAgIGVkaXRzOiBlZGl0b3IuZ2V0RWRpdGVkRmVhdHVyZXMoKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKGVkaXRzVG9QdXNoKTtcbiAgICAvLyBlc2VndWUgaWwgcG9zdCBkZWkgZGF0aVxuICAgIHRoaXMuX3Bvc3REYXRhKGVkaXRzVG9QdXNoKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXR1cm5lZCl7XG4gICAgICAgICAgaWYgKHJldHVybmVkLnJlc3VsdCl7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJldHVybmVkLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmV0dXJuZWQucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24ocmV0dXJuZWQpe1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXR1cm5lZC5yZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gIH07XG5cbiAgdGhpcy5fY29tbWl0RWRpdHMgPSBmdW5jdGlvbihlZGl0b3JzLHJlc3BvbnNlKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgXy5mb3JFYWNoKGVkaXRvcnMsZnVuY3Rpb24oZWRpdG9yKXtcbiAgICAgIHZhciBuZXdBdHRyaWJ1dGVzRnJvbVNlcnZlciA9IG51bGw7XG4gICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UubmV3KXtcbiAgICAgICAgXy5mb3JFYWNoKHJlc3BvbnNlLm5ldyxmdW5jdGlvbih1cGRhdGVkRmVhdHVyZUF0dHJpYnV0ZXMpe1xuICAgICAgICAgIHZhciBvbGRmaWQgPSB1cGRhdGVkRmVhdHVyZUF0dHJpYnV0ZXMuY2xpZW50aWQ7XG4gICAgICAgICAgdmFyIGZpZCA9IHVwZGF0ZWRGZWF0dXJlQXR0cmlidXRlcy5pZDtcbiAgICAgICAgICBlZGl0b3IuZ2V0RWRpdFZlY3RvckxheWVyKCkuc2V0RmVhdHVyZURhdGEob2xkZmlkLGZpZCxudWxsLHVwZGF0ZWRGZWF0dXJlQXR0cmlidXRlcyk7XG4gICAgICAgICAgXy5mb3JFYWNoKHJlc3BvbnNlLm5ld19sb2NraWRzLCBmdW5jdGlvbihuZXdsb2NrSWQpe1xuICAgICAgICAgICAgZWRpdG9yLmdldFZlY3RvckxheWVyKCkuYWRkTG9ja0lkKG5ld2xvY2tJZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBlZGl0b3IuY29tbWl0KCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5fdW5kb0VkaXRzID0gZnVuY3Rpb24oZGlydHlFZGl0b3JzKXtcbiAgICB2YXIgY3VycmVudEVkaXRpbmdMYXllckNvZGUgPSB0aGlzLl9nZXRDdXJyZW50RWRpdGluZ0xheWVyKCkubGF5ZXJDb2RlO1xuICAgIHZhciBlZGl0b3IgPSBkaXJ0eUVkaXRvcnNbY3VycmVudEVkaXRpbmdMYXllckNvZGVdO1xuICAgIHRoaXMuX3N0b3BFZGl0aW5nKHRydWUpO1xuICB9O1xuICAvLyBlc2VndWUgbCd1cGRhdGUgZGVsbG8gc3RhdGUgbmVsIGNhc28gYWQgZXNlbXBpbyBkaSB1biB0b2dnbGUgZGVsIGJvdHRvbmUgdG9vbFxuICB0aGlzLl91cGRhdGVFZGl0aW5nU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBwcmVuZGUgaWwgbGF5ZXIgaW4gRWRpdGluZ1xuICAgIHZhciBsYXllciA9IHRoaXMuX2dldEN1cnJlbnRFZGl0aW5nTGF5ZXIoKTtcbiAgICBpZiAobGF5ZXIpIHtcbiAgICAgIHRoaXMuc3RhdGUuZWRpdGluZy5sYXllckNvZGUgPSBsYXllci5sYXllckNvZGU7XG4gICAgICB0aGlzLnN0YXRlLmVkaXRpbmcudG9vbFR5cGUgPSBsYXllci5lZGl0b3IuZ2V0QWN0aXZlVG9vbCgpLmdldFR5cGUoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlLmVkaXRpbmcubGF5ZXJDb2RlID0gbnVsbDtcbiAgICAgIHRoaXMuc3RhdGUuZWRpdGluZy50b29sVHlwZSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZVRvb2xTdGVwc1N0YXRlKCk7XG4gIH07XG5cbiAgdGhpcy5fdXBkYXRlVG9vbFN0ZXBzU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGxheWVyID0gdGhpcy5fZ2V0Q3VycmVudEVkaXRpbmdMYXllcigpO1xuICAgIHZhciBhY3RpdmVUb29sO1xuICAgIGlmIChsYXllcikge1xuICAgICAgYWN0aXZlVG9vbCA9IGxheWVyLmVkaXRvci5nZXRBY3RpdmVUb29sKCk7XG4gICAgfVxuICAgIGlmIChhY3RpdmVUb29sICYmIGFjdGl2ZVRvb2wuZ2V0VG9vbCgpKSB7XG4gICAgICB2YXIgdG9vbEluc3RhbmNlID0gYWN0aXZlVG9vbC5nZXRUb29sKCk7XG4gICAgICBpZiAodG9vbEluc3RhbmNlLnN0ZXBzKXtcbiAgICAgICAgdGhpcy5fc2V0VG9vbFN0ZXBTdGF0ZShhY3RpdmVUb29sKTtcbiAgICAgICAgdG9vbEluc3RhbmNlLnN0ZXBzLm9uKCdzdGVwJywgZnVuY3Rpb24oaW5kZXgsc3RlcCkge1xuICAgICAgICAgIHNlbGYuX3NldFRvb2xTdGVwU3RhdGUoYWN0aXZlVG9vbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0b29sSW5zdGFuY2Uuc3RlcHMub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICBzZWxmLl9zZXRUb29sU3RlcFN0YXRlKCk7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc2VsZi5fc2V0VG9vbFN0ZXBTdGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9zZXRUb29sU3RlcFN0YXRlID0gZnVuY3Rpb24oYWN0aXZlVG9vbCl7XG4gICAgdmFyIGluZGV4LCB0b3RhbCwgbWVzc2FnZTtcbiAgICBpZiAoXy5pc1VuZGVmaW5lZChhY3RpdmVUb29sKSl7XG4gICAgICBpbmRleCA9IG51bGw7XG4gICAgICB0b3RhbCA9IG51bGw7XG4gICAgICBtZXNzYWdlID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgdG9vbCA9IGFjdGl2ZVRvb2wuZ2V0VG9vbCgpO1xuICAgICAgdmFyIG1lc3NhZ2VzID0gdG9vbFN0ZXBzTWVzc2FnZXNbYWN0aXZlVG9vbC5nZXRUeXBlKCldO1xuICAgICAgaW5kZXggPSB0b29sLnN0ZXBzLmN1cnJlbnRTdGVwSW5kZXgoKTtcbiAgICAgIHRvdGFsID0gdG9vbC5zdGVwcy50b3RhbFN0ZXBzKCk7XG4gICAgICBtZXNzYWdlID0gbWVzc2FnZXNbaW5kZXhdO1xuICAgICAgaWYgKF8uaXNVbmRlZmluZWQobWVzc2FnZSkpIHtcbiAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB0b3RhbCA9IG51bGw7XG4gICAgICAgIG1lc3NhZ2UgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0YXRlLmVkaXRpbmcudG9vbHN0ZXAubiA9IGluZGV4ICsgMTtcbiAgICB0aGlzLnN0YXRlLmVkaXRpbmcudG9vbHN0ZXAudG90YWwgPSB0b3RhbDtcbiAgICB0aGlzLnN0YXRlLmVkaXRpbmcudG9vbHN0ZXAubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH07XG5cbiAgdGhpcy5fZ2V0Q3VycmVudEVkaXRpbmdMYXllciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50RWRpdGluZ0xheWVyO1xuICB9O1xuXG4gIHRoaXMuX3NldEN1cnJlbnRFZGl0aW5nTGF5ZXIgPSBmdW5jdGlvbihsYXllcil7XG4gICAgaWYgKCFsYXllcil7XG4gICAgICB0aGlzLl9jdXJyZW50RWRpdGluZ0xheWVyID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9jdXJyZW50RWRpdGluZ0xheWVyID0gbGF5ZXI7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuX2FkZFRvTWFwID0gZnVuY3Rpb24oKSB7XG4gICAgLy9yZWN1cGVybyBsJ2VsZW1lbnRvIG1hcCBvbDNcbiAgICB2YXIgbWFwID0gdGhpcy5fbWFwU2VydmljZS52aWV3ZXIubWFwO1xuICAgIHZhciBsYXllckNvZGVzID0gdGhpcy5nZXRMYXllckNvZGVzKCk7XG4gICAgLy9vZ25pIGxheWVyIGxvIGFnZ2l1bmdvIGFsbGEgbWFwcGFcbiAgICAvL2NvbiBpbCBtZXRvZG8gYWRkVG9NYXAgZGkgdmVjdG9yTGF5ZXJcbiAgICBfLmZvckVhY2gobGF5ZXJDb2RlcywgZnVuY3Rpb24obGF5ZXJDb2RlKSB7XG4gICAgICBzZWxmLl9sYXllcnNbbGF5ZXJDb2RlXS52ZWN0b3IuYWRkVG9NYXAobWFwKTtcbiAgICB9KVxuICB9O1xuXG4gIHRoaXMuX3Bvc3REYXRhID0gZnVuY3Rpb24oZWRpdHNUb1B1c2gpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gbWFuZG8gdW4gb2dnZXR0byBjb21lIG5lbCBjYXNvIGRlbCBiYXRjaCxcbiAgICAvLyBtYSBpbiBxdWVzdG8gY2FzbyBkZXZvIHByZW5kZXJlIHNvbG8gaWwgcHJpbW8sIGUgdW5pY28sIGVsZW1lbnRvXG4gICAgaWYgKGVkaXRzVG9QdXNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wb3N0QmF0Y2hEYXRhKGVkaXRzVG9QdXNoKTtcbiAgICB9XG4gICAgdmFyIGxheWVyTmFtZSA9IGVkaXRzVG9QdXNoWzBdLmxheWVybmFtZTtcbiAgICB2YXIgZWRpdHMgPSBlZGl0c1RvUHVzaFswXS5lZGl0cztcbiAgICBjb25zb2xlLmxvZyhlZGl0cyk7XG4gICAgdmFyIGpzb25EYXRhID0gSlNPTi5zdHJpbmdpZnkoZWRpdHMpO1xuICAgIHJldHVybiAkLnBvc3Qoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy5iYXNldXJsK2xheWVyTmFtZStcIi8/XCIrc2VsZi5fY3VzdG9tVXJsUGFyYW1ldGVycyxcbiAgICAgIGRhdGE6IGpzb25EYXRhLFxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5fcG9zdEJhdGNoRGF0YSA9IGZ1bmN0aW9uKG11bHRpRWRpdHNUb1B1c2gpe1xuICAgIHZhciBlZGl0cyA9IHt9O1xuICAgIF8uZm9yRWFjaChtdWx0aUVkaXRzVG9QdXNoLGZ1bmN0aW9uKGVkaXRzVG9QdXNoKXtcbiAgICAgIGVkaXRzW2VkaXRzVG9QdXNoLmxheWVybmFtZV0gPSBlZGl0c1RvUHVzaC5lZGl0cztcbiAgICB9KTtcbiAgICB2YXIganNvbkRhdGEgPSBKU09OLnN0cmluZ2lmeShlZGl0cyk7XG4gICAgcmV0dXJuICQucG9zdCh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLmJhc2V1cmwsXG4gICAgICBkYXRhOiBqc29uRGF0YSxcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuX3VubG9jayA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGxheWVyQ29kZXMgPSB0aGlzLmdldExheWVyQ29kZXMoKTtcbiAgICAvLyBlc2VndW8gbGUgcmljaGllc3RlIGRlbGxlIGNvbmZpZ3VyYXppb25pIGUgbWkgdGVuZ28gbGUgcHJvbWVzc2VcbiAgICB2YXIgdW5sb2NrUmVxdWVzdHMgPSBfLm1hcChsYXllckNvZGVzLGZ1bmN0aW9uKGxheWVyQ29kZSl7XG4gICAgICByZXR1cm4gc2VsZi5fdW5sb2NrTGF5ZXIoc2VsZi5fbGF5ZXJzW2xheWVyQ29kZV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuX3VubG9ja0xheWVyID0gZnVuY3Rpb24obGF5ZXJDb25maWcpe1xuICAgICQuZ2V0KHRoaXMuY29uZmlnLmJhc2V1cmwrbGF5ZXJDb25maWcubmFtZStcIi8/dW5sb2NrXCIpO1xuICB9O1xuICAvL2dldCBsb2FkZXIgc2VydmljZVxuICB0aGlzLmdldExvYWRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZXI7XG4gIH1cbn1cblxuaW5oZXJpdChHZW9ub3Rlc1NlcnZpY2UsIEczV09iamVjdCk7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBHZW9ub3Rlc1NlcnZpY2U7XG59LHtcIi4vZWRpdG9ycy9hdHRyaWJ1dGVzZm9ybVwiOjF9XX0se30sWzNdKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
