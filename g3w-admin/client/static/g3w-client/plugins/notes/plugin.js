!function e(t,i,o){function n(r,a){if(!i[r]){if(!t[r]){var l="function"==typeof require&&require;if(!a&&l)return l(r,!0);if(s)return s(r,!0);var c=new Error("Cannot find module '"+r+"'");throw c.code="MODULE_NOT_FOUND",c}var d=i[r]={exports:{}};t[r][0].call(d.exports,function(e){var i=t[r][1][e];return n(i?i:e)},d,d.exports,e,t,i,o)}return i[r].exports}for(var s="function"==typeof require&&require,r=0;r<o.length;r++)n(o[r]);return n}({1:[function(t,e,i){function o(t){s(this,t),this._formPanel=l}var n=g3wsdk.core.utils.inherit,s=g3wsdk.core.utils.base,r=g3wsdk.gui.FormPanel,a=g3wsdk.gui.Form,l=r.extend({});n(o,a),e.exports=o},{}],2:[function(t,e,i){function o(t){t.formTools=[],s(this,t);var e=function(){a.saveEdits()};this.onafter("addFeature",e),this.onafter("deleteFeature",e),this.onafter("moveFeature",e),this.onafter("pickFeature",e)}var n=g3wsdk.core.utils.inherit,s=g3wsdk.core.utils.base,r=g3wsdk.core.Editor,a=t("../pluginservice");t("./attributesform");n(o,r),e.exports=o},{"../pluginservice":7,"./attributesform":1}],3:[function(t,e,i){var o=g3wsdk.core.utils.inherit,n=g3wsdk.core.utils.base,s=g3wsdk.core.Plugin,r=g3wsdk.gui.GUI,a=g3wsdk.core.ProjectsRegistry,l=t("pluginconfig"),c=t("./pluginservice"),d=t("./panel"),u=function(){n(this),this.name="notes",this.config=null,this.service=null,this.init=function(){this.setPluginService(c),this.config=this.getPluginConfig(),this.setUpIconsUrl(this.config.layers),this.registerPlugin(this.config.gid)&&(r.ready?this.setupGui():r.on("ready",_.bind(this.setupGui,this)),l.customUrlParameters=this.createPluginCustomUrlParameters(),this.service.init(this.config,l))},this.setupGui=function(){var t=r.getComponent("tools"),e=t.getService(),i=l.tools(this);this.service.setPluginToolsService(e),e.addTools(1,"GEONOTES",i)},this.toolsActions={showHideLayer:function(){this.service.showHideLayer(l.layersCode.GEONOTES)},showEditingPanel:function(){var t=new d;_.forEach(this.config.layers,function(e,i){t.setIconsTool(i,e.icontools)}),this.service.toggleEditing(),r.showPanel(t)},isChecked:function(t){return this.service.isLayerVisible()}},this.createPluginCustomUrlParameters=function(){var t="&",e=a.getCurrentProject();return t+="project_type="+e.getType()+"&project_id="+e.getId()},this.setUpIconsUrl=function(t){_.forEach(t,function(t){l.layers[t.name].icons=t.icons})},this.setupToolsAction=function(t){_.forEach(t,function(t){})}};o(u,s),function(t){t.init()}(new u)},{"./panel":5,"./pluginservice":7,pluginconfig:6}],4:[function(t,e,i){e.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode, tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode, tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="tool.icon"></img>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div v-show="state.retrievingData" style="color:#ffffff">\n    <span>Caricamento Dati ... </span><img :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],5:[function(t,e,i){function o(){this.id="geonotes-editing-panel",this.name="Gestione dati GEONOTES",this.internalPanel=new c}var n=g3wsdk.core.utils.resolve,s=g3wsdk.core.utils.inherit,r=g3wsdk.gui.GUI,a=g3wsdk.gui.Panel,l=t("./pluginservice"),c=Vue.extend({template:t("./panel.html"),data:function(){var t=r.getResourcesUrl()+"images/";return{state:l.state,resourcesurl:r.getResourcesUrl(),editorstoolbars:[{name:"Geonotes",layercode:l.layerCodes.GEONOTES,tools:[{title:"Aggiungi Geonota",tooltype:"addfeature",icontool:"add",icon:t+"iternetAddPoint.png"},{title:"Sposta Geonota",tooltype:"movefeature",icontool:"move",icon:t+"iternetMovePoint.png"},{title:"Rimuovi Geonota",tooltype:"deletefeature",icontool:"delete",icon:t+"iternetDeletePoint.png"},{title:"Edita geonota",tooltype:"editattributes",icontool:"edit",icon:t+"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){l.toggleEditing()},saveEdits:function(){l.saveEdits()},toggleEditTool:function(t,e){""!=e&&this.state.editing.on&&l.toggleEditTool(t,e)},editingtoolbtnToggled:function(t,e){return this.state.editing.layerCode==t&&this.state.editing.toolType==e},editingtoolbtnEnabled:function(t){return""!=t.tooltype},onClose:function(){l.stop()}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var t="";if(this.state.editing.enabled){if(this.state.editing.toolstep.message){var e=this.state.editing.toolstep.n,i=this.state.editing.toolstep.total,o=this.state.editing.toolstep.message;t='<div style="margin-top:20px">GUIDA STRUMENTO:</div><div><span>['+e+"/"+i+'] </span><span style="color: yellow">'+o+"</span></div>"}}else t='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing';return t}}});s(o,a);var d=a.prototype;d.onShow=function(t){var e=this.internalPanel;return e.$mount().$appendTo(t),n(!0)},d.onClose=function(){console.log("close");var t=this,e=$.Deferred();return l.stop().then(function(){t.internalPanel.$destroy(!0),t.internalPanel=null,e.resolve()}).fail(function(){e.reject()}),e.promise()},d.setIconsTool=function(t,e){var i=this.internalPanel.editorstoolbars;_.forEach(i,function(o,n){t==o.layercode&&_.forEach(o.tools,function(t,o){e[t.icontool]&&(i[n].tools[o].icon=e[t.icontool])})})},e.exports=o},{"./panel.html":4,"./pluginservice":7}],6:[function(t,e,i){function o(t){return o=[{name:"Geonotes",layerName:"note",type:"checkbox",isCheck:!1,action:_.bind(t.toolsActions.showHideLayer,t)},{name:"Edita Geonotes",action:_.bind(t.toolsActions.showEditingPanel,t)}]}var n=t("./editors/geonoteseditor"),s=this.layerCodes={GEONOTES:"note"},r={};r[s.GEONOTES]=n;var a={},l={},c={},d=function(t){var e=t.iconurl;return new ol.style.Style({image:new ol.style.Icon({anchor:[.5,.5],offset:[0,0],src:e})})};l[s.GEONOTES]={url:d,add:d,"delete":d,edit:d,move:d},c[s.GEONOTES]={},a[s.GEONOTES]={layerCode:s.GEONOTES,vector:null,editor:null,iconurl:null,crs:null,style:l[s.GEONOTES]},e.exports={layersCode:s,layers:a,layersStyle:l,layersEditingStyle:c,editorClass:r,tools:o}},{"./editors/geonoteseditor":2}],7:[function(e,i,o){function n(){var e=this;this._mapService=null,this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null,startingEditingTool:!1,toolstep:{n:null,total:null,message:null}},retrievingData:!1,hasEdits:!1},this._loader=new l;this.init=function(t,e){var i=this;this.config=t,this._crs=null,this._layers=e.layers,this._editorClass=e.editorClass,this.layerCodes=e.layersCode,this._layersStyle=e.layersStyle,this._layersEditingStyle=e.layersEditingStyle,this._customUrlParameters=e.customUrlParameters||null,this._mapService=a.getComponent("map").getService(),_.forEach(this.config.layers,function(t,e){i._layers[e].infourl=t.infourl,i._layers[e].crs="EPSG:"+t.crs,i.setLayerStyle(e)});var o={layers:this._layers,baseurl:this.config.baseurl,mapService:this._mapService};this._loader.init(o),this._loader.on("loadingvectorlayersstart",function(){i.state.retrievingData=!0}),this._loader.on("loadingvectorlayersend",function(){i.state.retrievingData=!1}),this._loader.on("setmode",function(t){switch(t){case"w":i.state.editing.on=!0,i.emit("editingstarted");break;case"r":i.state.editing.on=!1}}),this._mapService.on("pointerInteractionSet",function(t){var e=i._getCurrentEditingLayer();if(e){var o=e.editor.getActiveTool().instance;o&&!o.ownsInteraction(t)&&i._stopEditingTool()}}),this.state.editing.enabled=!0,_.forEach(this._layers,function(e,o){var n=t.layers[o].id,s=t.layers[o].name,r=i._mapService.getProject().getLayerById(n);r?(e.name=r.getOrigName(),e.id=n):(e.name=s,e.id=n)})},this.setPluginToolsService=function(t){this._pluginToolsService=t},this.setLayerStyle=function(t){var e=this,i=this._layers[t].icons;_.forEach(i,function(i,o){"url"==o&&(e._layers[t].style=e._layersStyle[t][o]({iconurl:i})),e._layersEditingStyle[t][o]=e._layersStyle[t][o]({iconurl:i})})},this.getLayerStyle=function(t){return this._layers[t].style},this._toggleCheckBoxPluginTool=function(t){var e=this,i=0;this._pluginToolsService.getState().toolsGroups.length>1&&(i=1);var o=this._pluginToolsService.getState().toolsGroups[i].tools,n=this._layers[t].vector;_.forEach(o,function(s,r){if(_.has(s,"type")&&s.layerName==t&&"checkbox"==s.type){var a=o[r];a.isCheck=!0,o[r]=a,e._pluginToolsService.updateToolsGroup(i,{name:"GEONOTES",tools:o}),n.setVisible(!0)}})},this.isLayerVisible=function(t){var e=this._layers[t].vector;return e.isVisible()},this.showHideLayer=function(t){var e=this,i=null;this._loader.isReady()?(i=this._layers[t].vector,i.setVisible(!i.isVisible())):this._loader.loadLayers("r",this._customUrlParameters).then(function(){e._addToMap()})},this.stop=function(){var t=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){e._stopEditing(),t.resolve()}).fail(function(){t.reject()}):t.resolve(),t.promise()},this.toggleEditing=function(){var t=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return t.promise()},this.saveEdits=function(){this._saveWithoutAsk()},this.toggleEditTool=function(t,e){var i=this,o=this._layers[t];if(o){var n=this._getCurrentEditingLayer();n&&t==n.layerCode?e==n.editor.getActiveTool().getType()?this._stopEditingTool():(this._stopEditingTool(),this._startEditingTool(n,e)):n&&n.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(o,e)}):this._startEditingTool(o,e)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._setUpVectorLayer=function(t,e){this._layers[t].vector=e},this._setUpEditor=function(t){var e=this,i={mapService:e._mapService,formClass:c,editingVectorStyle:this._layersEditingStyle[t]},o=this._layers[t].vector,n=new e._editorClass[t](i);n.setVectorLayer(o),n.on("dirty",function(t){e.state.hasEdits=t}),this._layers[t].editor=n},this._startEditing=function(){if(!this.state.editing.on&&!this.state.retrievingData){var e=this;if(this._loader.isReady()){this._loader.setMode("w");var i=this._loader.getVectorLayersCodes();_.forEach(i,function(t){e._loader.lockFeatures(e._layers[t].name).then(function(i){e._setUpEditor(t),e._toggleCheckBoxPluginTool(t)})}),e.state.editing.on=!0}else this._loader.loadLayers("w",this._customUrlParameters).then(function(t){_.forEach(t,function(t){e._setUpEditor(t),e._toggleCheckBoxPluginTool(t)}),e._addToMap()}).fail(function(){a.notify.error(t("could_not_load_vector_layers"))})}},this._stopEditing=function(t){this._stopEditor(t)&&(_.forEach(this._layers,function(t,i){t.vector;t.editor=null,e._unlockLayer(e._layers[i])}),this._updateEditingState(),this._loader.setMode("r"),e._cleanUp(),e.emit("editingstopped"))},this._cleanUp=function(){this._loader.cleanUpLayers()},this._startEditor=function(t){return!!t.editor.start(this)&&(this._setCurrentEditingLayer(t),!0)},this._startEditingTool=function(t,e,i){this.state.startingEditingTool=!0;var o=!0;return t.editor.isStarted()||(o=this._startEditor(t)),o&&t.editor.setTool(e,i)?(this._updateEditingState(),this.state.startingEditingTool=!1,!0):(this.state.startingEditingTool=!1,!1)},this._stopEditor=function(t){var e=!0,i=this._getCurrentEditingLayer();return i&&(e=i.editor.stop(t),e&&this._setCurrentEditingLayer()),e},this._stopEditingTool=function(){var t=!0,e=this._getCurrentEditingLayer();return e&&(t=e.editor.stopTool(),t&&this._updateEditingState()),t},this._saveWithoutAsk=function(){var t=$.Deferred(),e={};_.forEach(this._layers,function(t,i){t.editor.isDirty()&&(e[i]=t.editor)}),this._saveEdits(e).then(function(e){t.resolve()}).fail(function(e){t.reject()})},this._cancelOrSave=function(t){var e=$.Deferred();try{var i=1;t&&(i=t);var o=this,n={};_.forEach(this._layers,function(t,e){t.editor.isDirty()&&(n[e]=t.editor)}),_.keys(n).length?this._askCancelOrSave(i).then(function(t){"save"===t?o._saveEdits(n).then(function(t){e.resolve()}).fail(function(t){e.reject()}):"nosave"==t?e.resolve():"cancel"==t&&e.reject()}):e.resolve()}catch(s){e.reject()}return e.promise()},this._askCancelOrSave=function(t){var e=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){e.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){e.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){e.resolve("cancel")}}};switch(t){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return a.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),e.promise()},this._saveEdits=function(t){var e=this,i=$.Deferred();return this._sendEdits(t).then(function(o){a.notify.success("I dati sono stati salvati correttamente"),e._commitEdits(t,o),i.resolve()}).fail(function(t){a.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(t){var e=$.Deferred(),i=_.map(t,function(t){return{layername:t.getVectorLayer().name,edits:t.getEditedFeatures()}});return this._postData(i).then(function(t){t.result?e.resolve(t.response):e.reject(t.response)}).fail(function(t){e.reject(t.response)}),e.promise()},this._commitEdits=function(t,e){_.forEach(t,function(t){e&&e["new"]&&_.forEach(e["new"],function(i){var o=i.clientid,n=i.id;t.getEditVectorLayer().setFeatureData(o,n,null,i),_.forEach(e.new_lockids,function(e){t.getVectorLayer().addLockId(e)})}),console.log("editor commit"),t.commit()})},this._undoEdits=function(t){var e=this._getCurrentEditingLayer().layerCode;t[e];this._stopEditing(!0)},this._updateEditingState=function(){var t=this._getCurrentEditingLayer();t?(this.state.editing.layerCode=t.layerCode,this.state.editing.toolType=t.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null),this._updateToolStepsState()},this._updateToolStepsState=function(){var t,e=this,i=this._getCurrentEditingLayer();if(i&&(t=i.editor.getActiveTool()),t&&t.getTool()){var o=t.getTool();o.steps&&(this._setToolStepState(t),o.steps.on("step",function(i,o){e._setToolStepState(t)}),o.steps.on("complete",function(){e._setToolStepState()}))}else e._setToolStepState()},this._setToolStepState=function(t){var e,i,o;if(_.isUndefined(t))e=null,i=null,o=null;else{var n=t.getTool(),s=toolStepsMessages[t.getType()];e=n.steps.currentStepIndex(),i=n.steps.totalSteps(),o=s[e],_.isUndefined(o)&&(e=null,i=null,o=null)}this.state.editing.toolstep.n=e+1,this.state.editing.toolstep.total=i,this.state.editing.toolstep.message=o},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(t){t?this._currentEditingLayer=t:this._currentEditingLayer=null},this._addToMap=function(){var t=this,e=this._mapService.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){t._layers[i].vector.addToMap(e)}),this._loadDataOnMapViewChangeListener||(this._loadDataOnMapViewChangeListener=this._mapService.onafter("setMapView",function(){t.state.editing.on&&t.state.editing.enabled&&t._loader.loadAllVectorsData()}))},this._postData=function(t){var e=this;if(t.length>1)return this._postBatchData(t);var i=t[0].layername,o=t[0].edits,n=JSON.stringify(o),s=new FormData;return _.forEach(o,function(t,e){s.append(e,t)}),$.ajax({type:"POST",url:this.config.baseurl+i+"/?"+e._customUrlParameters,contentType:"application/json",data:n})},this._postBatchData=function(t){var e={};_.forEach(t,function(t){e[t.layername]=t.edits});var i=JSON.stringify(e);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._unlockLayer(e._layers[t])})},this._lockLayer=function(t){var e=this._loader._vectorLayersData[t.name].featurelocks,i=JSON.stringify(e);return $.post({url:this.config.baseurl+t.name+"/?lock"+this._customUrlParameters,data:i,contentType:"application/json"})},this._lockLayers=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._lockLayer(e._layers[t])})},this._unlockLayer=function(t){$.get(this.config.baseurl+t.name+"/?unlock"+this._customUrlParameters)},this.getLoader=function(){return this._loader}}var s=g3wsdk.core.utils.inherit,r=g3wsdk.core.G3WObject,a=g3wsdk.gui.GUI,l=g3wsdk.core.VectorLayerLoader,c=e("./editors/attributesform");s(n,r),i.exports=new n},{"./editors/attributesform":1}]},{},[3]);
//# sourceMappingURL=data:application/json;base64,
