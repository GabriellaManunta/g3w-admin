!function t(e,i,n){function o(s,a){if(!i[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var d=new Error("Cannot find module '"+s+"'");throw d.code="MODULE_NOT_FOUND",d}var c=i[s]={exports:{}};e[s][0].call(c.exports,function(t){var i=e[s][1][t];return o(i?i:t)},c,c.exports,t,e,i,n)}return i[s].exports}for(var r="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(t,e,i){function n(t){var e={layer:["cod_acc"],relations:{interno:["cod_acc"],numero_civico:["cod_civ"]}};t.copyAndPasteFieldsNotOverwritable=e;var t=t;this._askConfirmToDeleteEditingListener=function(){this.onbeforeasync("deleteFeature",function(t,e,i){"0102"==t.get("tip_acc")?s.dialog.confirm("Vuoi eliminare l'elemento selezionato e gli elementi ad essi collegati?",function(t){i(t)}):r(this,"_deleteFeatureDialog",i)})},r(this,t)}var o=g3wsdk.core.utils.inherit,r=g3wsdk.core.utils.base,s=g3wsdk.gui.GUI,a=t("./iterneteditor");o(n,a),e.exports=n},{"./iterneteditor":4}],2:[function(t,e,i){function n(t){r(this,t),this._formPanel=d}var o=g3wsdk.core.utils.inherit,r=g3wsdk.core.utils.base,s=g3wsdk.core.ProjectsRegistry,a=g3wsdk.gui.FormPanel,l=g3wsdk.gui.Form,d=a.extend({});o(n,l);var c=n.prototype;c._isVisible=function(t){var e=!0;switch(t.name){case"cod_acc_est":var i=this._getField("tip_acc");"0101"==i.value&&(e=!1);break;case"cod_acc_int":var i=this._getField("tip_acc");"0101"!=i.value&&"0501"!=i.value||(e=!1)}return e},c._isEditable=function(t){return!("tip_acc"==t.name&&!this._isNew())&&l.prototype._isEditable.call(this,t)},c._shouldShowRelation=function(t){if("numero_civico"==t.name){var e=this._getField("tip_acc");if("0102"==e.value)return!1}return!0},c._pickLayer=function(t){var e=this,i=t.input.options.layerid;l.prototype._pickLayer.call(this,t).then(function(n){var o,r;switch(t.name){case"cod_ele":o=e._getRelationField("cod_top","numero_civico");break;case"cod_top":o=e._getField("cod_ele")}if(o){var a=s.getCurrentProject();r=a.getLayerAttributeLabel(i,o.input.options.field),o&&n[r]&&(o.value=n[r])}})},e.exports=n},{}],3:[function(t,e,i){function n(t){r(this,t),this._service=null,this._stradeEditor=null,this._giunzioneGeomListener=null,this._setupMoveGiunzioniListener=function(){var t=this;this.on("movestart",function(e){t._startMovingGiunzione(e)})},this._stradeToUpdate=[],this._startMovingGiunzione=function(t){var e=this,i=(this.getVectorLayer(),this._stradeEditor),n=t,o=n.get("cod_gnz");this._stradeToUpdate=[];var r=i.getVectorLayer().getSource().getFeatures();_.forEach(r,function(t){var i=t.get("nod_ini"),r=t.get("nod_fin"),s=i==o,a=r==o;if(s||a){var l=!!s;e._stradeToUpdate.push(t),e._startGiunzioniStradeTopologicalEditing(n,t,l)}}),this.once("moveend",function(t){e._stradeToUpdate.length&&(i.isStarted()||i.start(this._service),_.forEach(e._stradeToUpdate,function(t){i.updateFeature(t)}))})},this._startGiunzioniStradeTopologicalEditing=function(t,e,i){var n=e.getGeometry(),o=e.getGeometry().getCoordinates(),r=i?0:o.length-1,s=t.getGeometry(),a=s.on("change",function(t){o[r]=t.target.getCoordinates(),n.setCoordinates(o)});this._giunzioneGeomListener=a},this._setupDeleteGiunzioniListener=function(){var t=this._stradeEditor;this.onbeforeasync("deleteFeature",function(e,i,n){var o=!1,r=t.getVectorLayer();_.forEach(r.getFeatures(),function(t){var i=e.get("cod_gnz"),n=t.get("nod_ini"),r=t.get("nod_fin"),s=n==i,a=r==i;(s||a)&&(o=!0)}),o&&GUI.notify.error("Non è possibile rimuovere la giunzioni perché risulta connessa ad una o più strade"),n(!o)})}}var o=g3wsdk.core.utils.inherit,r=g3wsdk.core.utils.base,s=t("./iterneteditor");o(n,s),e.exports=n;var a=n.prototype;a.start=function(t){return this._service=t,this._stradeEditor=t._layers[t.layerCodes.STRADE].editor,this._setupMoveGiunzioniListener(),this._setupDeleteGiunzioniListener(),s.prototype.start.call(this)},a.stop=function(){var t=!1;return s.prototype.stop.call(this)&&(t=!0,ol.Observable.unByKey(this._giunzioneGeomListener)),t},a.setTool=function(t){var e;return"addfeature"==t&&(e={snap:{vectorLayer:this._stradeEditor.getVectorLayer()}}),s.prototype.setTool.call(this,t,e)}},{"./iterneteditor":4}],4:[function(t,e,i){function n(t){r(this,t)}var o=g3wsdk.core.utils.inherit,r=g3wsdk.core.utils.base,s=g3wsdk.core.Editor;t("./attributesform");o(n,s),e.exports=n},{"./attributesform":2}],5:[function(t,e,i){function n(t){r(this,t),this._service=null,this._giunzioniEditor=null,this._mapService=s.getComponent("map").getService(),this._stradeSnaps=null,this._stradeSnapsCollection=function(){var t=[];this.length=0,this.push=function(e){var i=!1;return this.canSnap(e)&&(t.push(e),this.length+=1,i=!0),i},this.getLast=function(){return t[t.length-1]},this.getFirst=function(){return t[0]},this.clear=function(){t.splice(0,t.length),this.length=0},this.getSnaps=function(){return t},this.canSnap=function(t){if(this.isAlreadySnapped(t))return!1;var e=t.get("cod_gnz");return!_.isNil(e)&&""!=e},this.isAlreadySnapped=function(t){return _.includes(this.snaps,t)}},this._updateStradaAttributes=function(t){var e=this._stradeSnaps;t.set("nod_ini",e.getSnaps()[0].get("cod_gnz")),t.set("nod_fin",e.getSnaps()[1].get("cod_gnz"))},this._loadMissingGiunzioniInView=function(){var t=this.getVectorLayer(),e=this._giunzioniEditor.getVectorLayer(),i=t.getSource(),n=ol.extent.buffer(i.getExtent(),1),o=this._service.getLoader();o._loadVectorData(e,n)},this._drawRemoveLastPoint=_.bind(function(t){var e=this,i=this.getActiveTool().getType();"addfeature"==i&&46==t.keyCode&&(t.preventDefault(),t.stopPropagation(),e.getActiveTool().getTool().removeLastPoint())},this),this._setupDrawStradeConstraints=function(){var t=this;this.onbefore("addFeature",function(e){var i=t._stradeSnaps;return 2==i.length&&(t._updateStradaAttributes(e),i.clear(),!0)},0)},this._getCheckSnapsCondition=function(){var t=this;return function(e){var i=t._stradeSnaps;return 2==i.length||(s.notify.error("L'ultimo vertice deve corrispondere con una giunzione"),!1)}},this._getStradaIsBeingSnappedCondition=function(){var t=this,e=this._mapService.viewer.map,i=this._giunzioniEditor.getVectorLayer();return function(n){var o=t._stradeSnaps,r=e.getCoordinateFromPixel(n.pixel),a=i.getSource(),l=ol.extent.buffer([r[0],r[1],r[0],r[1]],1),d=a.getFeaturesInExtent(l)[0];if(2==o.length&&(!d||d!=o.getSnaps()[1])){return s.notify.error("Una strada non può avere vertici intermedi in corrispondenza di giunzioni.<br> Premere <b>CANC</b> per rimuovere l'ultimo vertice."),!1}return d&&o.length<2&&o.push(d),0!=o.length||(s.notify.error("Il primo vertice deve corrispondere con una giunzione"),!1)}},this._modifyRemovePoint=_.bind(function(t){var e=this,i=this.getActiveTool().getType();"modifyvertex"==i&&46==t.keyCode&&(t.preventDefault(),t.stopPropagation(),e.getActiveTool().getTool().removePoint())},this),this._setupModifyVertexStradeConstraints=function(){var t=this;this._mapService.viewer.map;this.onbefore("modifyFeature",function(e){var i=t._stradeSnaps,n=t._checkStradaIsCorrectlySnapped(e.getGeometry());return n&&(t._updateStradaAttributes(e),i.clear()),n})},this._checkStradaIsCorrectlySnapped=function(t){var e=!0,i=(this._mapService.viewer.map,this._giunzioniEditor.getVectorLayer());this._stradeSnaps.clear();var n=this._stradeSnaps,o=t.getCoordinates(),r=!1,a=!1;return _.forEach(o,function(t,e){var s=i.getSource(),l=ol.extent.buffer([t[0],t[1],t[0],t[1]],.1),d=s.getFeaturesInExtent(l)[0];d&&(0==e&&n.push(d)?r=!0:e==o.length-1&&n.push(d)&&(a=!0))}),n.length>2&&(s.notify.error("Una strada non può avere vertici intermedi in corrispondenza di giunzioni"),e=!1),r||(s.notify.error("Il primo vertice deve corrispondere con una giunzione"),e=!1),a||(s.notify.error("L'ultimo vertice deve corrispondere con una giunzione"),e=!1),e},this._setupStradeCutterPostSelection=function(){var t=this;this.onbeforeasync("cutLine",function(e,i,n){if("MODONCUT"==i){var o=e.added[0],r=t._getFirstLastSnappedGiunzioni(o.getGeometry());o.set("nod_ini",r[0].get("cod_gnz")),o.set("nod_fin",r[1].get("cod_gnz"));var s=e.updated,a=t._getFirstLastSnappedGiunzioni(s.getGeometry());s.set("nod_ini",a[0].get("cod_gnz")),s.set("nod_fin",a[1].get("cod_gnz")),t._openEditorForm("new",o,n)}else n(!0)})},this._getFirstLastSnappedGiunzioni=function(t){var e=t.getCoordinates(),i=this._giunzioniEditor.getVectorLayer(),n=null,o=null;return _.forEach(e,function(t,r){var s=i.getSource(),a=ol.extent.buffer([t[0],t[1],t[0],t[1]],.1),l=s.getFeaturesInExtent(a)[0];l&&(0==r?n=l:r==e.length-1&&(o=l))}),[n,o]},this._setupDrawStradeConstraints(),this._setupModifyVertexStradeConstraints(),this._setupStradeCutterPostSelection()}var o=g3wsdk.core.utils.inherit,r=g3wsdk.core.utils.base,s=g3wsdk.gui.GUI,a=t("./iterneteditor");o(n,a),e.exports=n;var l=n.prototype;l.start=function(t){return this._service=t,this._giunzioniEditor=t._layers[t.layerCodes.GIUNZIONI].editor,this._loadMissingGiunzioniInView(),r(this,"start")},l.setTool=function(t){var e,i=this._giunzioniEditor.getVectorLayer();"addfeature"==t&&(e={snap:{vectorLayer:i},finishCondition:this._getCheckSnapsCondition(),condition:this._getStradaIsBeingSnappedCondition()}),"modifyvertex"==t&&(e={snap:{vectorLayer:i},deleteCondition:_.constant(!1)}),"cutline"==t&&(e={pointLayer:i.getMapLayer()});var n=r(this,"setTool",t,e);return n&&(this._stradeSnaps=new this._stradeSnapsCollection,$("body").keyup(this._drawRemoveLastPoint),$("body").keyup(this._modifyRemovePoint)),n},l.stopTool=function(){var t=!1;return t=a.prototype.stopTool.call(this),t&&(this._stradeSnaps=null,$("body").off("keyup",this._drawRemoveLastPoint),$("body").off("keyup",this._modifyRemovePoint)),t}},{"./iterneteditor":4}],6:[function(t,e,i){var n=g3wsdk.core.utils.inherit,o=g3wsdk.core.utils.base,r=g3wsdk.core.Plugin,s=g3wsdk.gui.GUI,a=t("./pluginservice"),l=t("./panel"),d=function(){o(this),this.name="iternet",this.config=null,this.service=null,this.init=function(){this.setPluginService(a),this.config=this.getPluginConfig(),this.registerPlugin(this.config.gid)&&(s.ready?this.setupGui():s.on("ready",_.bind(this.setupGui,this)),this.service.init(this.config))},this.setupGui=function(){var t=this,e=s.getComponent("tools"),i=e.getService();i.addTools(0,"ITERNET",[{name:"Editing dati",action:_.bind(t.showEditingPanel,this)}])},this.showEditingPanel=function(){var t=new l;s.showPanel(t)}};n(d,r),function(t){t.init()}(new d)},{"./panel":8,"./pluginservice":9}],7:[function(t,e,i){e.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode,tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode,tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"/>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div>\n    <button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-success\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>\n    <button class="btn btn-danger" v-disabled="!state.hasEdits" @click="saveEdits">{{ savebtnlabel }}</button>\n    <img v-show="state.retrievingData" :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],8:[function(t,e,i){function n(){this.id="iternet-editing-panel",this.name="Gestione dati ITERNET",this.internalPanel=new d}var o=g3wsdk.core.utils.resolve,r=g3wsdk.core.utils.inherit,s=g3wsdk.gui.GUI,a=g3wsdk.gui.Panel,l=t("./pluginservice"),d=Vue.extend({template:t("./panel.html"),data:function(){return{state:l.state,resourcesurl:s.getResourcesUrl(),editorstoolbars:[{name:"Accessi",layercode:l.layerCodes.ACCESSI,tools:[{title:"Aggiungi accesso",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta accesso",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi accesso",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Giunzioni stradali",layercode:l.layerCodes.GIUNZIONI,tools:[{title:"Aggiungi giunzione",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta giunzione",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi giunzione",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Elementi stradali",layercode:l.layerCodes.STRADE,tools:[{title:"Aggiungi strada",tooltype:"addfeature",icon:"iternetAddLine.png"},{title:"Sposta vertice strada",tooltype:"modifyvertex",icon:"iternetMoveVertex.png"},{title:"Taglia su giunzione",tooltype:"cutline",icon:"iternetCutOnVertex.png"},{title:"Rimuovi strada",tooltype:"deletefeature",icon:"iternetDeleteLine.png"},{title:"Edita attributi",tooltype:"editattributes",icon:"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){l.toggleEditing()},saveEdits:function(){l.saveEdits()},toggleEditTool:function(t,e){""!=e&&this.state.editing.on&&l.toggleEditTool(t,e)},editingtoolbtnToggled:function(t,e){return this.state.editing.layerCode==t&&this.state.editing.toolType==e},editingtoolbtnEnabled:function(t){return""!=t.tooltype}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var t="";if(this.state.editing.enabled){if(this.state.editing.toolstep.message){var e=this.state.editing.toolstep.n,i=this.state.editing.toolstep.total,n=this.state.editing.toolstep.message;t='<div style="margin-top:20px">GUIDA STRUMENTO:</div><div><span>['+e+"/"+i+'] </span><span style="color: yellow">'+n+"</span></div>"}}else t='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing';return t}}});r(n,a);var c=a.prototype;c.onShow=function(t){console.log("ciao");var e=this.internalPanel;return e.$mount().$appendTo(t),o(!0)},c.onClose=function(){var t=this,e=$.Deferred();return l.stop().then(function(){t.internalPanel.$destroy(!0),t.internalPanel=null,e.resolve()}).fail(function(){e.reject()}),e.promise()},e.exports=n},{"./panel.html":7,"./pluginservice":9}],9:[function(t,e,i){function n(){var t=this;this._mapService=null,this._runningEditor=null;var e=this.layerCodes={STRADE:"strade",GIUNZIONI:"giunzioni",ACCESSI:"accessi"};this._editorClass={},this._editorClass[e.ACCESSI]=d,this._editorClass[e.GIUNZIONI]=c,this._editorClass[e.STRADE]=u,this._layers={},this._layers[e.ACCESSI]={layerCode:e.ACCESSI,vector:null,editor:null,style:function(t){var e="#d9b581";switch(t.get("tip_acc")){case"0101":e="#d9b581";break;case"0102":e="#d9bc29";break;case"0501":e="#68aad9";break;default:e="#d9b581"}return[new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:e})})})]}},this._layers[e.GIUNZIONI]={layerCode:e.GIUNZIONI,vector:null,editor:null,style:new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:"#0000ff"})})})},this._layers[e.STRADE]={layerCode:e.STRADE,vector:null,editor:null,style:new ol.style.Style({stroke:new ol.style.Stroke({width:3,color:"#ff7d2d"})})},this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this._loadedExtent=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null,startingEditingTool:!1,toolstep:{n:null,total:null,message:null}},retrievingData:!1,hasEdits:!1},this._loader=new a,this.init=function(t){var e=this;this.config=t,this._mapService=s.getComponent("map").getService();var i={layers:this._layers,baseurl:this.config.baseurl,mapService:this._mapService};this._loader.init(i),this._loader.on("retriewvectorlayers",function(t,i){_.forEach(i,function(i,n){t&&(e._setUpVectorLayer(n,i),e._setUpEditor(n)),e.state.retrievingData=t})}),this._loader.on("retriewvectolayersdata",function(t){e.state.retrievingData=t}),this._loader.on("featurelocks",function(t,i){e._layers[t].editor.setFeatureLocks(i)}),this._mapService.on("pointerInteractionSet",function(t){var i=e._getCurrentEditingLayer();if(i){var n=i.editor.getActiveTool().instance;n&&!n.ownsInteraction(t)&&e._stopEditingTool()}}),this.state.editing.enabled=!0,_.forEach(this._layers,function(i,n){var o=t.layers[n].id,r=e._mapService.getProject().getLayerById(o);i.name=r.getOrigName(),i.id=o})},this.stop=function(){var e=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){t._stopEditing(),e.resolve()}).fail(function(){e.reject()}):e.resolve(),e.promise()},this.toggleEditing=function(){var t=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return t.promise()},this.saveEdits=function(){this._cancelOrSave(2)},this.toggleEditTool=function(t,e){var i=this,n=this._layers[t];if(n){var o=this._getCurrentEditingLayer();o&&t==o.layerCode?e==o.editor.getActiveTool().getType()?this._stopEditingTool():(this._stopEditingTool(),this._startEditingTool(o,e)):o&&o.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(n,e)}):this._startEditingTool(n,e)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._setUpVectorLayer=function(t,e){this._layers[t].vector=e},this._setUpEditor=function(t){var e=this,i={mapService:e._mapService,formClass:l},n=this._layers[t].vector,o=new e._editorClass[t](i);o.setVectorLayer(n),o.on("dirty",function(t){e.state.hasEdits=t}),this._layers[t].editor=o},this._startEditing=function(){var t=this;this._loader.loadLayers().then(function(e){t._addToMap(),t.state.editing.on=!0,t.emit("editingstarted"),t._loadDataOnMapViewChangeListener||(t._loadDataOnMapViewChangeListener=t._mapService.onafter("setMapView",function(){t.state.editing.on&&t.state.editing.enabled&&t._loader.loadAllVectorsData()}))})},this._stopEditing=function(e){this._stopEditor(e)&&(_.forEach(this._layers,function(e,i){var n=e.vector;t._mapService.viewer.removeLayerByName(n.name),e.vector=null,e.editor=null,t._unlockLayer(t._layers[i])}),this._updateEditingState(),t.state.editing.on=!1,t._cleanUp(),t.emit("editingstopped"))},this._cleanUp=function(){this._loader.cleanUpLayers()},this._startEditor=function(t){return!!t.editor.start(this)&&(this._setCurrentEditingLayer(t),!0)},this._startEditingTool=function(t,e,i){this.state.startingEditingTool=!0;var n=!0;return t.editor.isStarted()||(n=this._startEditor(t)),n&&t.editor.setTool(e,i)?(this._updateEditingState(),this.state.startingEditingTool=!1,!0):(this.state.startingEditingTool=!1,!1)},this._stopEditor=function(t){var e=!0,i=this._getCurrentEditingLayer();return i&&(e=i.editor.stop(t),e&&this._setCurrentEditingLayer()),e},this._stopEditingTool=function(){var t=!0,e=this._getCurrentEditingLayer();return e&&(t=e.editor.stopTool(),t&&this._updateEditingState()),t},this._cancelOrSave=function(t){var e=$.Deferred();try{var i=1;t&&(i=t);var n=this,o={};_.forEach(this._layers,function(t,e){t.editor.isDirty()&&(o[e]=t.editor)}),_.keys(o).length?this._askCancelOrSave(i).then(function(t){"save"===t?n._saveEdits(o).then(function(t){e.resolve()}).fail(function(t){e.reject()}):"nosave"==t?e.resolve():"cancel"==t&&e.reject()}):e.resolve()}catch(r){e.reject()}return e.promise()},this._askCancelOrSave=function(t){var e=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){e.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){e.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){e.resolve("cancel")}}};switch(t){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return s.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),e.promise()},this._saveEdits=function(e){var i=$.Deferred();return this._sendEdits(e).then(function(n){s.notify.success("I dati sono stati salvati correttamente"),t._commitEdits(e,n),t._mapService.refreshMap(),i.resolve()}).fail(function(t){s.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(t){var e=$.Deferred(),i=_.map(t,function(t){return{layername:t.getVectorLayer().name,edits:t.getEditedFeatures()}});return this._postData(i).then(function(t){t.result?e.resolve(t.response):e.reject(t.response)}).fail(function(t){e.reject(t.response)}),e.promise()},this._commitEdits=function(t,e){_.forEach(t,function(t){e&&e["new"]&&_.forEach(e["new"],function(e){var i=e.clientid,n=e.id;t.getEditVectorLayer().setFeatureData(i,n,null,e)}),t.commit()})},this._undoEdits=function(t){var e=this._getCurrentEditingLayer().layerCode;t[e];this._stopEditing(!0)},this._updateEditingState=function(){var t=this._getCurrentEditingLayer();t?(this.state.editing.layerCode=t.layerCode,this.state.editing.toolType=t.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null),this._updateToolStepsState()},this._updateToolStepsState=function(){var t,e=this,i=this._getCurrentEditingLayer();if(i&&(t=i.editor.getActiveTool()),t&&t.getTool()){var n=t.getTool();n.steps&&(this._setToolStepState(t),n.steps.on("step",function(i,n){e._setToolStepState(t)}),n.steps.on("complete",function(){e._setToolStepState()}))}else e._setToolStepState()},this._setToolStepState=function(t){var e,i,n;if(_.isUndefined(t))e=null,i=null,n=null;else{var o=t.getTool(),r=g[t.getType()];e=o.steps.currentStepIndex(),i=o.steps.totalSteps(),n=r[e],_.isUndefined(n)&&(e=null,i=null,n=null)}this.state.editing.toolstep.n=e+1,this.state.editing.toolstep.total=i,this.state.editing.toolstep.message=n},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(t){t?this._currentEditingLayer=t:this._currentEditingLayer=null},this._addToMap=function(){var e=this._mapService.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){t._layers[i].vector.addToMap(e)})},this._postData=function(t){if(t.length>1)return this._postBatchData(t);var e=t[0].layername,i=t[0].edits,n=JSON.stringify(i);return $.post({url:this.config.baseurl+e+"/",data:n,contentType:"application/json"})},this._postBatchData=function(t){var e={};_.forEach(t,function(t){e[t.layername]=t.edits});var i=JSON.stringify(e);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var e=this.getLayerCodes();_.map(e,function(e){return t._unlockLayer(t._layers[e])})},this._unlockLayer=function(t){$.get(this.config.baseurl+t.name+"/?unlock")},this.getLoader=function(){return this._loader}}var o=g3wsdk.core.utils.inherit,r=(g3wsdk.core.utils.resolve,g3wsdk.core.utils.reject,g3wsdk.core.G3WObject),s=g3wsdk.gui.GUI,a=(g3wsdk.core.VectorLayer,g3wsdk.core.VectorLayerLoader),l=t("./editors/attributesform"),d=t("./editors/accessieditor"),c=t("./editors/giunzionieditor"),u=t("./editors/stradeeditor"),g={cutline:["Seleziona la strada da tagliare","Seleziona la giunzione di taglio","Seleziona la porizione di strada originale da mantenere"]};o(n,r),e.exports=new n},{"./editors/accessieditor":1,"./editors/attributesform":2,"./editors/giunzionieditor":3,"./editors/stradeeditor":5}]},{},[6]);
//# sourceMappingURL=data:application/json;base64,
