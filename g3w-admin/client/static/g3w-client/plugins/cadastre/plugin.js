!function e(t,i,n){function l(o,s){if(!i[o]){if(!t[o]){var r="function"==typeof require&&require;if(!s&&r)return r(o,!0);if(a)return a(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var c=i[o]={exports:{}};t[o][0].call(c.exports,function(e){var i=t[o][1][e];return l(i?i:e)},c,c.exports,e,t,i,n)}return i[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)l(n[o]);return l}({1:[function(e,t,i){function n(e){var e=e||{},t={layer:[]};e.checkOneRelation=!0,e.copyAndPasteFieldsNotOverwritable=t,e.formComponent=new s,a(this,e)}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.utils.base,o=(g3wsdk.gui.GUI,e("./plugineditor")),s=e("./form/catasto/catastoformcomponent");l(n,o),t.exports=n},{"./form/catasto/catastoformcomponent":3,"./plugineditor":8}],2:[function(e,t,i){function n(e){var e=e||{},t={layer:[]};e.checkOneRelation=!0,e.copyAndPasteFieldsNotOverwritable=t,e.formComponent=new s,a(this,e)}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.utils.base,o=(g3wsdk.gui.GUI,e("./plugineditor")),s=e("./form/civici/civiciformcomponent");l(n,o),t.exports=n},{"./form/civici/civiciformcomponent":5,"./plugineditor":8}],3:[function(e,t,i){function n(e){a(this,e),this.id="cadastre"}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.utils.base,o=e("./../pluginformcomponent");l(n,o),t.exports=n},{"./../pluginformcomponent":7}],4:[function(e,t,i){t.exports='<div>\n  <h3>Form ah hoc per Camaiore CIVICI</h3>\n  <div class="quick-actions-menu">\n    <div v-if="state.tools.copypaste" class="pull-right">\n      <button v-if=\'state.isnew\' class="btn btn-default glyphicon glyphicon-screenshot" data-placement="bottom" @click="pickLayerToClipBoard"  data-i18n="[title]copy_form_data_from_feature"></button>\n      <button v-if=\'!state.isnew\' class="btn btn-default glyphicon glyphicon-copy" data-placement="bottom" @click="copyToClipBoard"  data-i18n="[title]copy_form_data"></button>\n      <button v-if=\'state.isnew\' class="btn btn-default glyphicon glyphicon-paste" data-placement="bottom" @click="pasteClipBoardToForm" v-disabled="!state.canpaste" data-i18n="[title]paste_form_data"></button>\n    </div>\n  </div>\n  <div>\n    <validator name="validation">\n      <form novalidate class="form-horizontal g3w-form">\n        <div class="box box-primary">\n          <div class="box-header with-border">\n            <h3 class="box-title">Attributi elemento</h3>\n            <div class="box-tools pull-right">\n            </div>\n          </div>\n          <div class="box-body">\n            <template v-for="field in state.fields">\n              <div v-if="isVisible(field)" class="form-group has-feedback">\n                <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}<span v-if="field.validate && field.validate.required">*</span></label>\n                <div class="col-sm-8">\n                  <input v-if="isSimple(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                  <textarea v-if="isTextarea(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                  </textarea>\n                  <select v-if="isSelect(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                    <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n                  </select>\n                  <div v-if="isLayerPicker(field)">\n                    <input class="form-control picklayerinput" @click="pickLayer(field)" @change="pickLayerInputChange" :field="field.name" v-validate="field.validate" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\' o scrivilo direttamente qui" v-disabled="!isEditable(field)" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n                    <i class="glyphicon glyphicon-screenshot form-control-feedback" ></i>\n                  </div>\n                  <div v-if="isFile(field)">\n                    <img v-if="checkFileSrc(field.value)" class="photo-preview img-responsive img-thumbnail"  :src="field.value" />\n                    <input type="file" :name="field.name" data-url="{{ field.uploadurl }}" :field="field.name" title="Foto" accept="image/*;capture=camera"  @change="onFileChange(field, $event)">\n                  </div>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n        <div v-for="relation in state.relations" style="margin-top:10px">\n          <div v-if="showRelation(relation)" transition="expand">\n            <div class="box box-default">\n              <div class="box-header with-border">\n                <h3 class="box-title">{{ relation | relationplural }}</h3>\n              </div>\n              <div class="box-body">\n                <table v-if="relation.elements.length" class="table table-striped">\n                  <thead>\n                  <tr>\n                    <th v-for="field in fieldsSubset(relation.fields)">{{field.label}}</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <template v-for="element in visibleElements(relation)">\n                    <tr class="attributes-preview" @click="toggleElementBox(relation,element)">\n                      <td v-for="relfield in fieldsSubset(element.fields)">\n                        <span>{{relfield.value}}</span>\n                      </td>\n                      <td>\n                        <i v-if="isRelationElementDeletable(relation,element)" class="glyphicon glyphicon glyphicon-trash link trash" @click.stop.prevent="removeRelationElement(relation,element)"></i>\n                        <i class="glyphicon glyphicon-option-horizontal link morelink"></i>\n                      </td>\n                    </tr>\n                    <tr v-show="!collapseElementBox(relation,element)" class="queryresults-featurebox">\n                      <td :colspan="fieldsSubsetLength(element.fields)+1">\n                        <template v-for="field in element.fields">\n                          <div v-if="isVisible(field)" class="form-group has-feedback">\n                            <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}<span v-if="field.validate && field.validate.required">*</span></label>\n                            <div class="col-sm-8">\n                              <input v-if="isSimple(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                              <textarea v-if="isTextarea(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label"></textarea>\n                              <select v-if="isSelect(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                                <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n                              </select>\n                              <div v-if="isLayerPicker(field)">\n                                <input class="form-control picklayerinput" @click="pickLayer(field, relation)" @input="pickLayerInputFieldChange(field, relation)"  :field="field.name" v-validate="field.validate" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\' o scrivilo direttamente qui" v-disabled="!isEditable(field)" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n                                <i class="glyphicon glyphicon-screenshot form-control-feedback" ></i>\n                              </div>\n                            </div>\n                          </div>\n                        </template>\n                      </td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n                <div v-if="canAddRelationElements(relation)" class="row" style="margin:0px"><i class="glyphicon glyphicon-plus-sign pull-right btn-add" @click="addRelationElement(relation)"></i></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <div v-if="hasFieldsRequired" style="margin-bottom:10px">\n              <span>* Campi richiesti</span>\n            </div>\n            <span v-for="button in state.buttons">\n              <button class="btn " :class="[button.class]" @click.stop.prevent="exec(button.cbk)" v-disabled="!btnEnabled(button)">{{ button.title }}</button>\n            </span>\n          </div>\n        </div>\n      </form>\n    </validator>\n  </div>\n</div>'},{}],5:[function(e,t,i){function n(e){var e=e||{};e.template=s,a(this,e),this.id="cadastre"}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.utils.base,o=e("./../pluginformcomponent"),s=e("./civiciform.html");l(n,o),t.exports=n},{"./../pluginformcomponent":7,"./civiciform.html":4}],6:[function(e,t,i){t.exports='<div>\n  <h3>Form ah hoc per Camaiore GENERICO</h3>\n  <div class="quick-actions-menu">\n    <div v-if="state.tools.copypaste" class="pull-right">\n      <button v-if=\'state.isnew\' class="btn btn-default glyphicon glyphicon-screenshot" data-placement="bottom" @click="pickLayerToClipBoard"  data-i18n="[title]copy_form_data_from_feature"></button>\n      <button v-if=\'!state.isnew\' class="btn btn-default glyphicon glyphicon-copy" data-placement="bottom" @click="copyToClipBoard"  data-i18n="[title]copy_form_data"></button>\n      <button v-if=\'state.isnew\' class="btn btn-default glyphicon glyphicon-paste" data-placement="bottom" @click="pasteClipBoardToForm" v-disabled="!state.canpaste" data-i18n="[title]paste_form_data"></button>\n    </div>\n  </div>\n  <div>\n    <validator name="validation">\n      <form novalidate class="form-horizontal g3w-form">\n        <div class="box box-primary">\n          <div class="box-header with-border">\n            <h3 class="box-title">Attributi elemento</h3>\n            <div class="box-tools pull-right">\n            </div>\n          </div>\n          <div class="box-body">\n            <template v-for="field in state.fields">\n              <div v-if="isVisible(field)" class="form-group has-feedback">\n                <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}<span v-if="field.validate && field.validate.required">*</span></label>\n                <div class="col-sm-8">\n                  <input v-if="isSimple(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                  <textarea v-if="isTextarea(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                  </textarea>\n                  <select v-if="isSelect(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                    <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n                  </select>\n                  <div v-if="isLayerPicker(field)">\n                    <input class="form-control picklayerinput" @click="pickLayer(field)" @change="pickLayerInputChange" :field="field.name" v-validate="field.validate" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\' o scrivilo direttamente qui" v-disabled="!isEditable(field)" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n                    <i class="glyphicon glyphicon-screenshot form-control-feedback" ></i>\n                  </div>\n                  <div v-if="isFile(field)">\n                    <img v-if="checkFileSrc(field.value)" class="photo-preview img-responsive img-thumbnail"  :src="field.value" />\n                    <input type="file" :name="field.name" data-url="{{ field.uploadurl }}" :field="field.name" title="Foto" accept="image/*;capture=camera"  @change="onFileChange(field, $event)">\n                  </div>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n        <div v-for="relation in state.relations" style="margin-top:10px">\n          <div v-if="showRelation(relation)" transition="expand">\n            <div class="box box-default">\n              <div class="box-header with-border">\n                <h3 class="box-title">{{ relation | relationplural }}</h3>\n              </div>\n              <div class="box-body">\n                <table v-if="relation.elements.length" class="table table-striped">\n                  <thead>\n                  <tr>\n                    <th v-for="field in fieldsSubset(relation.fields)">{{field.label}}</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  <template v-for="element in visibleElements(relation)">\n                    <tr class="attributes-preview" @click="toggleElementBox(relation,element)">\n                      <td v-for="relfield in fieldsSubset(element.fields)">\n                        <span>{{relfield.value}}</span>\n                      </td>\n                      <td>\n                        <i v-if="isRelationElementDeletable(relation,element)" class="glyphicon glyphicon glyphicon-trash link trash" @click.stop.prevent="removeRelationElement(relation,element)"></i>\n                        <i class="glyphicon glyphicon-option-horizontal link morelink"></i>\n                      </td>\n                    </tr>\n                    <tr v-show="!collapseElementBox(relation,element)" class="queryresults-featurebox">\n                      <td :colspan="fieldsSubsetLength(element.fields)+1">\n                        <template v-for="field in element.fields">\n                          <div v-if="isVisible(field)" class="form-group has-feedback">\n                            <label :for="field.name" class="col-sm-4 control-label">{{ field.label }}<span v-if="field.validate && field.validate.required">*</span></label>\n                            <div class="col-sm-8">\n                              <input v-if="isSimple(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                              <textarea v-if="isTextarea(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label"></textarea>\n                              <select v-if="isSelect(field)" @focus="checkPickLayer" :field="field.name" v-validate="field.validate" v-disabled="!isEditable(field)" class="form-control" v-model="field.value" :id="field.name" :placeholder="field.input.label">\n                                <option v-for="value in field.input.options.values" value="{{ value.key }}">{{ value.value }}</option>\n                              </select>\n                              <div v-if="isLayerPicker(field)">\n                                <input class="form-control picklayerinput" @click="pickLayer(field, relation)" @input="pickLayerInputFieldChange(field, relation)"  :field="field.name" v-validate="field.validate" data-toggle="tooltip" title="Ottieni il dato da un elemento del layer \'{{ layerPickerPlaceHolder(field) }}\' o scrivilo direttamente qui" v-disabled="!isEditable(field)" v-model="field.value" :id="field.name" :placeholder="\'[\'+layerPickerPlaceHolder(field)+\']\'">\n                                <i class="glyphicon glyphicon-screenshot form-control-feedback" ></i>\n                              </div>\n                            </div>\n                          </div>\n                        </template>\n                      </td>\n                    </tr>\n                  </template>\n                  </tbody>\n                </table>\n                <div v-if="canAddRelationElements(relation)" class="row" style="margin:0px"><i class="glyphicon glyphicon-plus-sign pull-right btn-add" @click="addRelationElement(relation)"></i></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <div v-if="hasFieldsRequired" style="margin-bottom:10px">\n              <span>* Campi richiesti</span>\n            </div>\n            <span v-for="button in state.buttons">\n              <button class="btn " :class="[button.class]" @click.stop.prevent="exec(button.cbk)" v-disabled="!btnEnabled(button)">{{ button.title }}</button>\n            </span>\n          </div>\n        </div>\n      </form>\n    </validator>\n  </div>\n</div>'},{}],7:[function(e,t,i){function n(e){var e=e||{};e.template=e.template||s,a(this,e),this.id="cadastre"}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.utils.base,o=g3wsdk.gui.vue.FormComponent,s=e("./pluginform.html");l(n,o),t.exports=n},{"./pluginform.html":6}],8:[function(e,t,i){function n(e){var e=e||{};e.formComponent=e.formComponent||new s,a(this,e)}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.utils.base,o=g3wsdk.core.Editor,s=e("./form/pluginformcomponent");l(n,o),t.exports=n},{"./form/pluginformcomponent":7}],9:[function(e,t,i){var n=g3wsdk.core.utils.inherit,l=g3wsdk.core.utils.base,a=g3wsdk.core.Plugin,o=g3wsdk.gui.GUI,s=e("./pluginservice"),r=e("./panel"),d=function(){l(this),this.name="cadastre",this.config=null,this.service=null,this.init=function(){this.setPluginService(s),this.config=this.getPluginConfig(),this.registerPlugin(this.config.gid)&&(o.ready?this.setupGui():o.on("ready",_.bind(this.setupGui,this)),this.service.init(this.config))},this.setupGui=function(){var e=this,t=o.getComponent("tools"),i=t.getService();i.addTools(0,"CATASTO",[{name:"Editing dati",action:_.bind(e.showEditingPanel,this)}])},this.showEditingPanel=function(){var e=new r;o.showPanel(e)}};n(d,a),function(e){e.init()}(new d)},{"./panel":11,"./pluginservice":12}],10:[function(e,t,i){t.exports='<div class="g3w-iternet-editing-panel">\n  <template v-for="toolbar in editorstoolbars">\n    <div class="panel panel-primary">\n      <div class="panel-heading">\n        <h3 class="panel-title">{{ toolbar.name }}</h3>\n      </div>\n      <div class="panel-body">\n        <template v-for="tool in toolbar.tools">\n          <div class="editbtn" :class="{\'enabled\' : (state.editing.on && editingtoolbtnEnabled(tool)), \'toggled\' : editingtoolbtnToggled(toolbar.layercode,tool.tooltype)}">\n            <img height="30px" width="30px" @click="toggleEditTool(toolbar.layercode,tool.tooltype)" :alt.once="tool.title" :title.once="tool.title" :src.once="resourcesurl+\'images/\'+tool.icon"/>\n          </div>\n        </template>\n      </div>\n    </div>\n  </template>\n  <div>\n    <button class="btn btn-primary" v-disabled="editingbtnEnabled" :class="{\'btn-success\' : state.editingOn}" @click="toggleEditing">{{ editingbtnlabel }}</button>\n    <button class="btn btn-danger" v-disabled="!state.hasEdits" @click="saveEdits">{{ savebtnlabel }}</button>\n    <img v-show="state.retrievingData" :src="resourcesurl +\'images/loader.svg\'">\n  </div>\n  <div class="message">\n    {{{ message }}}\n  </div>\n</div>\n'},{}],11:[function(e,t,i){function n(){this.id="iternet-editing-panel",this.name="Gestione dati ITERNET",this.internalPanel=new d}var l=g3wsdk.core.utils.resolve,a=g3wsdk.core.utils.inherit,o=g3wsdk.gui.GUI,s=g3wsdk.gui.Panel,r=e("./pluginservice"),d=Vue.extend({template:e("./panel.html"),data:function(){return{state:r.state,resourcesurl:o.getResourcesUrl(),editorstoolbars:[{name:"Civici",layercode:r.layerCodes.CIVICI,tools:[{title:"Aggiungi civico",tooltype:"addfeature",icon:"iternetAddPoint.png"},{title:"Sposta civico",tooltype:"movefeature",icon:"iternetMovePoint.png"},{title:"Rimuovi civico",tooltype:"deletefeature",icon:"iternetDeletePoint.png"},{title:"Edita civico",tooltype:"editattributes",icon:"editAttributes.png"}]},{name:"Catasto",layercode:r.layerCodes.CATASTO,tools:[{title:"Aggiungi elemento",tooltype:"addfeature",icon:"AddPolygon.png"},{title:"Sposta elemento",tooltype:"movefeature",icon:"MovePolygon.png"},{title:"Rimuovi elemento",tooltype:"deletefeature",icon:"DeletePolygon.png"},{title:"Edita elemento",tooltype:"editattributes",icon:"editAttributes.png"}]}],savebtnlabel:"Salva"}},methods:{toggleEditing:function(){r.toggleEditing()},saveEdits:function(){r.saveEdits()},toggleEditTool:function(e,t){""!=t&&this.state.editing.on&&r.toggleEditTool(e,t)},editingtoolbtnToggled:function(e,t){return this.state.editing.layerCode==e&&this.state.editing.toolType==t},editingtoolbtnEnabled:function(e){return""!=e.tooltype},onClose:function(){r.stop()}},computed:{editingbtnlabel:function(){return this.state.editing.on?"Termina editing":"Avvia editing"},editingbtnEnabled:function(){return this.state.editing.enabled||this.state.editing.on?"":"disabled"},message:function(){var e="";if(this.state.editing.enabled){if(this.state.editing.toolstep.message){var t=this.state.editing.toolstep.n,i=this.state.editing.toolstep.total,n=this.state.editing.toolstep.message;e='<div style="margin-top:20px">GUIDA STRUMENTO:</div><div><span>['+t+"/"+i+'] </span><span style="color: yellow">'+n+"</span></div>"}}else e='<span style="color: red">Aumentare il livello di zoom per abilitare l\'editing';return e}}});a(n,s);var c=s.prototype;c.onShow=function(e){var t=this.internalPanel;return t.$mount().$appendTo(e),l(!0)},c.onClose=function(){var e=this,t=$.Deferred();return r.stop().then(function(){e.internalPanel.$destroy(!0),e.internalPanel=null,t.resolve()}).fail(function(){t.reject()}),t.promise()},t.exports=n},{"./panel.html":10,"./pluginservice":12}],12:[function(e,t,i){function n(){var e=this;this._mapService=null;var t=this.layerCodes={CIVICI:"civici",CATASTO:"catasto"};this._editorClass={},this._editorClass[t.CIVICI]=d,this._editorClass[t.CATASTO]=c,this._layers={},this._layers[t.CIVICI]={layerCode:t.CIVICI,vector:null,editor:null,style:function(e){var t="#d9b581";switch(e.get("tip_acc")){case"0101":t="#d9b581";break;case"0102":t="#d9bc29";break;case"0501":t="#68aad9";break;default:t="#d9b581"}return[new ol.style.Style({image:new ol.style.Circle({radius:5,fill:new ol.style.Fill({color:t})})})]}},this._layers[t.CATASTO]={layerCode:t.CATASTO,vector:null,editor:null,style:new ol.style.Style({stroke:new ol.style.Stroke({color:"blue",width:3}),fill:new ol.style.Fill({color:"rgba(0, 0, 255, 0.1)"})})},this._loadDataOnMapViewChangeListener=null,this._currentEditingLayer=null,this.state={editing:{on:!1,enabled:!1,layerCode:null,toolType:null,startingEditingTool:!1,toolstep:{n:null,total:null,message:null}},retrievingData:!1,hasEdits:!1},this._loader=new r;var i={resolution:1};this.init=function(e){var t=this;this.config=e,this._mapService=s.getComponent("map").getService();var n={layers:this._layers,baseurl:this.config.baseurl,mapService:this._mapService};this._loader.init(n),this._loader.on("loadingvectorlayersstart",function(){t.state.retrievingData=!0}),this._loader.on("loadingvectorlayersend",function(){t.state.retrievingData=!1}),this._mapService.on("pointerInteractionSet",function(e){var i=t._getCurrentEditingLayer();if(i){var n=i.editor.getActiveTool().instance;n&&!n.ownsInteraction(e)&&t._stopEditingTool()}}),this._mapService.onafter("setMapView",function(e,n,l){t.state.editing.enabled=n<i.resolution}),this.state.editing.enabled=this._mapService.getResolution()<i.resolution,_.forEach(this._layers,function(i,n){var l=e.layers[n].id,a=t._mapService.getProject().getLayerById(l);i.name=a.getOrigName(),i.id=l})},this.stop=function(){var t=$.Deferred();return this.state.editing.on?this._cancelOrSave().then(function(){e._stopEditing(),t.resolve()}).fail(function(){t.reject()}):t.resolve(),t.promise()},this.toggleEditing=function(){var e=$.Deferred();if(this.state.editing.enabled&&!this.state.editing.on)this._startEditing();else if(this.state.editing.on)return this.stop();return e.promise()},this.saveEdits=function(){this._cancelOrSave(2)},this.toggleEditTool=function(e,t){var i=this,n=this._layers[e];if(n){var l=this._getCurrentEditingLayer();l&&e==l.layerCode?t==l.editor.getActiveTool().getType()?this._stopEditingTool():(this._stopEditingTool(),this._startEditingTool(l,t)):l&&l.editor.isStarted()?this._cancelOrSave(2).then(function(){i._stopEditor()&&i._startEditingTool(n,t)}):this._startEditingTool(n,t)}},this.getLayerCodes=function(){return _.values(this.layerCodes)},this._setUpVectorLayer=function(e,t){this._layers[e].vector=t},this._setUpEditor=function(e){var t=this,i={mapService:t._mapService},n=this._layers[e].vector,l=new t._editorClass[e](i);l.setVectorLayer(n),l.on("dirty",function(e){t.state.hasEdits=e}),this._layers[e].editor=l},this._startEditing=function(){if(!this.state.editing.on&&!this.state.retrievingData){var e=this;this._loader.loadLayers("w").then(function(t){_.forEach(t,function(t){e._setUpEditor(t)}),e._addToMap(),e.state.editing.on=!0,e.emit("editingstarted"),e._loadDataOnMapViewChangeListener||(e._loadDataOnMapViewChangeListener=e._mapService.onafter("setMapView",function(){e.state.editing.on&&e.state.editing.enabled&&e._loader.loadAllVectorsData()}))}).fail(function(){s.notify.error(o("could_not_load_vector_layers"))})}},this._stopEditing=function(t){this._stopEditor(t)&&(_.forEach(this._layers,function(t,i){var n=t.vector;e._mapService.viewer.removeLayerByName(n.name),t.vector=null,t.editor.destroy(),t.editor=null,e._unlockLayer(e._layers[i])}),this._updateEditingState(),e.state.editing.on=!1,e._cleanUp(),e.emit("editingstopped"))},this._cleanUp=function(){this._loader.cleanUpLayers()},this._startEditor=function(e){return!!e.editor.start(this)&&(this._setCurrentEditingLayer(e),!0)},this._startEditingTool=function(e,t,i){this.state.startingEditingTool=!0;var n=!0;return e.editor.isStarted()||(n=this._startEditor(e)),n&&e.editor.setTool(t,i)?(this._updateEditingState(),this.state.startingEditingTool=!1,!0):(this.state.startingEditingTool=!1,!1)},this._stopEditor=function(e){var t=!0,i=this._getCurrentEditingLayer();return i&&(t=i.editor.stop(e),t&&this._setCurrentEditingLayer()),t},this._stopEditingTool=function(){var e=!0,t=this._getCurrentEditingLayer();return t&&(e=t.editor.stopTool(),e&&this._updateEditingState()),e},this._cancelOrSave=function(e){var t=$.Deferred();try{var i=1;e&&(i=e);var n=this,l={};_.forEach(this._layers,function(e,t){e.editor.isDirty()&&(l[t]=e.editor)}),_.keys(l).length?this._askCancelOrSave(i).then(function(e){"save"===e?n._saveEdits(l).then(function(e){t.resolve()}).fail(function(e){t.reject()}):"nosave"==e?t.resolve():"cancel"==e&&t.reject()}):t.resolve()}catch(a){t.reject()}return t.promise()},this._askCancelOrSave=function(e){var t=$.Deferred(),i={SAVE:{label:"Salva",className:"btn-success",callback:function(){t.resolve("save")}},NOSAVE:{label:"Termina senza salvare",className:"btn-danger",callback:function(){t.resolve("nosave")}},CANCEL:{label:"Annulla",className:"btn-primary",callback:function(){t.resolve("cancel")}}};switch(e){case 1:buttons={save:i.SAVE,nosave:i.NOSAVE,cancel:i.CANCEL};break;case 2:buttons={save:i.SAVE,cancel:i.CANCEL}}return s.dialog.dialog({message:"Vuoi salvare definitivamente le modifiche?",title:"Salvataggio modifica",buttons:buttons}),t.promise()},this._saveEdits=function(t){var i=$.Deferred();return this._sendEdits(t).then(function(n){s.notify.success("I dati sono stati salvati correttamente"),e._commitEdits(t,n),e._mapService.refreshMap(),i.resolve()}).fail(function(e){s.notify.error("Errore nel salvataggio sul server"),i.resolve()}),i.promise()},this._sendEdits=function(e){var t=$.Deferred(),i=_.map(e,function(e){return{layername:e.getVectorLayer().name,edits:e.getEditedFeatures()}});return this._postData(i).then(function(e){e.result?t.resolve(e.response):t.reject(e.response)}).fail(function(e){t.reject(e.response)}),t.promise()},this._commitEdits=function(e,t){_.forEach(e,function(e){t&&t["new"]&&_.forEach(t["new"],function(i){var n=i.clientid,l=i.id;e.getEditVectorLayer().setFeatureData(n,l,null,i),_.forEach(t.new_lockids,function(t){e.getVectorLayer().addLockId(t)})}),e.commit()})},this._undoEdits=function(e){var t=this._getCurrentEditingLayer().layerCode;e[t];this._stopEditing(!0)},this._updateEditingState=function(){var e=this._getCurrentEditingLayer();e?(this.state.editing.layerCode=e.layerCode,this.state.editing.toolType=e.editor.getActiveTool().getType()):(this.state.editing.layerCode=null,this.state.editing.toolType=null),this._updateToolStepsState()},this._updateToolStepsState=function(){var e,t=this,i=this._getCurrentEditingLayer();if(i&&(e=i.editor.getActiveTool()),e&&e.getTool()){var n=e.getTool();n.steps&&(this._setToolStepState(e),n.steps.on("step",function(i,n){t._setToolStepState(e)}),n.steps.on("complete",function(){t._setToolStepState()}))}else t._setToolStepState()},this._setToolStepState=function(e){var t,i,n;if(_.isUndefined(e))t=null,i=null,n=null;else{var l=e.getTool(),a=toolStepsMessages[e.getType()];t=l.steps.currentStepIndex(),i=l.steps.totalSteps(),n=a[t],_.isUndefined(n)&&(t=null,i=null,n=null)}this.state.editing.toolstep.n=t+1,this.state.editing.toolstep.total=i,this.state.editing.toolstep.message=n},this._getCurrentEditingLayer=function(){return this._currentEditingLayer},this._setCurrentEditingLayer=function(e){e?this._currentEditingLayer=e:this._currentEditingLayer=null},this._addToMap=function(){var t=this._mapService.viewer.map,i=this.getLayerCodes();_.forEach(i,function(i){e._layers[i].vector.addToMap(t)})},this._postData=function(e){if(e.length>1)return this._postBatchData(e);var t=e[0].layername,i=e[0].edits,n=JSON.stringify(i);return $.post({url:this.config.baseurl+t+"/",data:n,contentType:"application/json"})},this._postBatchData=function(e){var t={};_.forEach(e,function(e){t[e.layername]=e.edits});var i=JSON.stringify(t);return $.post({url:this.config.baseurl,data:i,contentType:"application/json"})},this._unlock=function(){var t=this.getLayerCodes();_.map(t,function(t){return e._unlockLayer(e._layers[t])})},this._unlockLayer=function(e){$.get(this.config.baseurl+e.name+"/?unlock")},this.getLoader=function(){return this._loader}}var l=g3wsdk.core.utils.inherit,a=g3wsdk.core.G3WObject,o=g3wsdk.core.i18n.t,s=g3wsdk.gui.GUI,r=g3wsdk.core.VectorLayerLoader,d=e("./editors/civicieditor"),c=e("./editors/catastoeditor");l(n,a),t.exports=new n},{"./editors/catastoeditor":1,"./editors/civicieditor":2}]},{},[9]);