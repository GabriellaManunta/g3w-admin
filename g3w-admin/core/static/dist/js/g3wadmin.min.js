/**
 * Created by walter on 18/02/16.
 */

/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */

window.g3wadmin = {};

_.extend(g3wadmin,{
    tpl: {}, // templates space
    widget: {}, //  widget space
    ui: {}, // UI
    forms: {}, // forms related
    utils: {},
    currentModal: null,
    currentForm: null,
    
    bootstrap: function(){

        var that = this;
        //Initialize widgets
        // Detail Widget
        this.ui.initCrudDetailWidget();

        // Delete Widget
        this.ui.initCrudDeleteWidget();

        // Load Html Widget
        var $htmlLoads = $('[data-widget-type="htmlItem"]');
        $.each($htmlLoads,function(){
            that.widget.loadHtmlItem($(this));
        });

        // Add projects modal Widget
        $('[data-widget-type="addProjectGroup"]').click(function(e){
            that.widget.addProjectGroup($(this));
        });

        // Ajax upload form
        that.widget.ajaxUpload($('[data-widget-type="ajaxUpload"]'));


        // start bootstrap3-wysihtml5
        $('.wys5').wysihtml5();

        //Flat red color scheme for iCheck
        this.ui.initRadioCheckbox();

        //Init bootstrap-datepicker
        this.ui.initBootstrapDatepicker();

        //Init bootstrap-datepicker
        this.ui.initBootstrapColorpicker();
        
        //Init select2 plugin
        this.ui.initSelect2();

        //Init button back history
        this.ui.initBackHistory();

        //Init formWidget
        this.ui.initAjaxFormWidget();

        //Init filerWidget
        this.ui.initAjaxFilerWidget();

        //Init ajaxDownload
        this.ui.initAjaxDownload();

        //Init PushMenu
        this.ui.initPushMenu();

        //Init showMessageOnLoad
        this.ui.showMessageOnLoad();

        //  INIT SetProjectPanoramicWidget
        this.ui.initSetProjectPanoramicWidget();

        // INIT initMapSetExtent
        this.ui.initMapSetExtent();
        

        /*
        TODO: try to perfom this issue server side
        //If form present che collapsed box
        var $formsInContent = $('.content').find('form');
        if ($formsInContent.length > 0) {

            //check box to open
            $formBoxes = $formsInContent.find('.collapsed-box > .box-body');
            $.each($formBoxes, function(index, item){
                that.forms.checkBoxToOpen($(item));
            });
        }
        */
    }
});

window.ga = g3wadmin;



/**
 * Created by walter on 18/02/16.
 */

/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */

_.extend(g3wadmin.tpl, {

    tplDefValues: {
        dialog :{
            modalTitle: gettext('Title'),
            modalBody: gettext('Content'),
            modalClass: '',
            modalSize: '',
            closeButton: true,
            closeButtonText: gettext('Close'),
            confirmButton: true,
            confirmButtonText: 'Ok'
        },

        ajaxError: {
            textStatus: '500',
            errorMessage: '',
            moreInfo: null
        },

        pageAlert: {
            status: 'success',
            title: 'OK',
            body: ''
        },


    },

    dialog : _.template('\
    <div class="modal fade" tabindex="-1" role="dialog">\
        <div class="modal-dialog <%= modalClass %> <%= modalSize %>">\
        <div class="modal-content">\
          <div class="modal-header">\
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>\
            <h4 class="modal-title"><%= modalTitle %></h4>\
          </div>\
          <div class="modal-body">\
            <%= modalBody %>\
          </div>\
          <div class="modal-footer">\
            <% if(closeButton) { %>\
            <button type="button" class="modal-button-close btn btn-default" data-dismiss="modal"><i class="fa fa-close"></i> <%= closeButtonText %></button>\
            <% } %>\
            <% if(confirmButton) { %>\
            <button type="button" class="modal-button-confirm btn btn-success"><i class="fa fa-check"></i> <%= confirmButtonText %></button>\
            <% } %>\
          </div>\
        </div>\
      </div>\
    </div>'),

    ajaxError: _.template('\
    <h3><%= textStatus %></h3>\
    <p><%= errorMessage %></p>\
    <% if(moreInfo) { %>\
        <p><%= moreInfo %></p>\
    <% } %>'),

    ajaxFormFieldError: _.template('\
    <span id="<%= errorId %>" class="help-block"><strong><%= errorMessage %></strong></span>\
    '),

    ajaxFiler: _.template('\
    <form action="<%= actionUrl %>" method="post" enctype="multipart/form-data">\
        <%= plusFormInputs %>\
        <input type="file" name="files[]" id="filer_input" multiple="multiple">\
    </form>\
    '),

    ajaxFiler_changeInput: _.template('\
    <div class="jFiler-input-dragDrop"><div class="jFiler-input-inner"><div class="jFiler-input-icon"><i class="icon-jfi-cloud-up-o"></i></div><div class="jFiler-input-text"><h3><%= drag_drop_message %></h3> <span style="display:inline-block; margin: 15px 0">or</span></div><a class="jFiler-input-choose-btn blue"><%= browse_button %></a></div></div>\
    '),

    ajaxFiler_box: _.template('\
    <ul class="jFiler-items-list jFiler-items-grid"></ul>\
    '),

    ajaxFiler_item: _.template('\
    <li class="jFiler-item">\
        <div class="jFiler-item-container">\
            <div class="jFiler-item-inner">\
                <div class="jFiler-item-thumb">\
                    <div class="jFiler-item-status"></div>\
                    <div class="jFiler-item-info">\
                        <span class="jFiler-item-title"><b title="{{fi-name}}">{{fi-name | limitTo: 25}}</b></span>\
                        <span class="jFiler-item-others">{{fi-size2}}</span>\
                    </div>\
                    {{fi-image}}\
                </div>\
                <div class="jFiler-item-assets jFiler-row">\
                    <ul class="list-inline pull-left">\
                        <li>{{fi-progressBar}}</li>\
                    </ul>\
                    <ul class="list-inline pull-right">\
                        <li><a class="icon-jfi-trash jFiler-item-trash-action"></a></li>\
                    </ul>\
                </div>\
            </div>\
        </div>\
    </li>\
    '),

    ajaxFiler_itemAppend: _.template('\
    <li class="jFiler-item">\
        <div class="jFiler-item-container">\
            <div class="jFiler-item-inner">\
                <div class="jFiler-item-thumb">\
                    <div class="jFiler-item-status"></div>\
                    <div class="jFiler-item-info">\
                        <span class="jFiler-item-title"><b title="{{fi-name}}">{{fi-name | limitTo: 25}}</b></span>\
                        <span class="jFiler-item-others">{{fi-size2}}</span>\
                    </div>\
                    {{fi-image}}\
                </div>\
                <div class="jFiler-item-assets jFiler-row">\
                    <ul class="list-inline pull-left">\
                        <li><span class="jFiler-item-others">{{fi-icon}}</span></li>\
                    </ul>\
                    <ul class="list-inline pull-right">\
                        <li><a class="icon-jfi-trash jFiler-item-trash-action"></a></li>\
                    </ul>\
                </div>\
            </div>\
        </div>\
    </li>\
    '),

    loading_box: _.template('\
        <div class="overlay">\
            <i class="fa fa-refresh fa-spin"></i>\
        </div>\
        '),

    ajaxFiler_progresBar: _.template('\
    <div class="bar"></div>\
    '),

    ajaxFiler_successMsg: _.template('\
    <div class="jFiler-item-others text-success"><i class="icon-jfi-check-circle"></i> Success</div>\
    '),

    ajaxFiler_errorMsg: _.template('\
    <div class="jFiler-item-others text-error"><i class="icon-jfi-minus-circle"></i> Error</div>\
    '),

    mapContainer: _.template('\
    <div id="modalMap" class="modalMap"></div>\
    '),
    
    pageAlert: _.template('\
    <div class="alert alert-<%= status %> alert-dismissable">\
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">Ã—</button>\
        <h4><i class="icon fa fa-check"></i> <%= title %>!</h4>\
        <p class="body-alert"><%= body %></p>\
    </div>\
    ')
});
/**
 * Created by walter on 18/02/16.
 */


/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */



_.extend(g3wadmin.ui, {

    modal:  function($modal){

        this.$modal = $modal;

        this.data = new Object();

        // on hidden model destroy dom
        this.$modal.on('hidden.bs.modal',function(e){
            $(this).remove();
        });

        this.show = function (){
            this.$modal.modal('show');
        }

        this.hide = function (){
            this.$modal.modal('hide');
        }

        this.setBody = function(bodyContent) {
            this.$modal.find('.modal-body').html(bodyContent);
        }

        this.setTitle = function(titleContent) {
            this.$modal.find('.modal-title').html(titleContent);
        }

        this.setConfirmButtonAction = function (action) {
            this.$modal.find('.modal-button-confirm').click(action);
        }

        this.setCloseButtonAction = function (action) {
            this.$modal.find('.modal-button-close').click(action);
        }
    },

    _buildModal: function (options) {

        //build the modal jquery object
        var $modal = $(ga.tpl.dialog(_.extendOwn(_.clone(ga.tpl.tplDefValues.dialog),options)));
        return new this.modal($modal);
    },

    buildDefaultModal: function (options) {
        if (!_.isObject(options)){
            options = {};
        }
        options.modalClass = '';
        return this._buildModal(options);
    },

    buildDangerModal: function(options) {
        if (!_.isObject(options)){
            options = {};
        }
        options.modalClass = 'modal-danger';
        return this._buildModal(options);
    },

    buildWarningModal: function(options) {
        if (!_.isObject(options)){
            options = {};
        }
        options.modalClass = 'modal-warning';
        return this._buildModal(options);
    },

    pageAlert:  function($pageAlert){

        this.$pageAlert = $pageAlert;

        this.setBody = function(bodyContent){
            this.$pageAlert.find('.body-alert').html(bodyContent);
        }
        
        this.show = function($before) {
            $before.after(this.$pageAlert);
        }
    },

    buildPageAlert: function (options) {
        if (!_.isObject(options)){
            options = {};
        }
        var $modal = $(ga.tpl.pageAlert(_.extendOwn(_.clone(ga.tpl.tplDefValues.pageAlert),options)));
        return new this.pageAlert($modal);
    },
    
    mapModal: function(options) {
        if (!_.isObject(options)){
            options = {};
        }
        _.extend(options, {modalBody: ga.tpl.mapContainer()});
        var modal = this._buildModal(options);

        // set geo data
        var extent = options['extent'];
        modal.map = {};
        modal.$modal.on('shown.bs.modal',function(e){
             modal.map = L.map($(this).find('#modalMap')[0], {
                center: [0, 0],
                zoom: 1
            });
            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar'}).addTo(modal.map);
            modal.drawnItems = new L.FeatureGroup();
            if (_.has(options, 'bboxLayer') && !_.isNull(options['bboxLayer'])) {
                var bboxCoords = options['bboxLayer'].split(',');
                var bounds = [[bboxCoords[1],bboxCoords[0]], [bboxCoords[3], bboxCoords[2]]];
                modal.drawnLayer = L.rectangle(bounds);
                modal.drawnLayer.editing.enable();
                modal.drawnItems.addLayer(modal.drawnLayer);
                modal.map.fitBounds(bounds);
            } else {
                modal.drawnLayer = {};
            }

            modal.map.addLayer(modal.drawnItems);

            // Initialise the draw control and pass it the FeatureGroup of editable layers
            var drawControl = new L.Control.Draw({
                draw:{
                    polyline: false,
                    polygon: false,
                    circle: false,
                    marker: false,
                },
                edit: {
                    featureGroup: modal.drawnItems,
                    edit: false,
                    remove: false
                }
            });
            modal.map.addControl(drawControl);

            modal.map.on('draw:drawstart', function (e) {
                modal.drawnItems.clearLayers();
            });

            modal.map.on('draw:created', function (e) {
                var type = e.layerType
                modal.drawnLayer = e.layer;

                // Do whatever else you need to. (save to db, add to map etc)
                modal.drawnLayer.editing.enable();
                modal.drawnItems.addLayer(modal.drawnLayer);

                // set in editing mode

            });
        });
        return modal;
        
    },

    initCrudDeleteWidget: function() {
        $(document).on('click', '[data-widget-type="deleteItem"]', function(e){
            ga.widget.deleteItem($(this));
        });
    },

    initCrudDetailWidget: function() {
        $(document).on('click', '[data-widget-type="detailItem"]', function(e){
            ga.widget.showDetailItem($(this));
        });
    },

    initSetProjectPanoramicWidget: function() {
        $(document).on('ifChecked', '[data-widget-type="setProjectPanoramic"]', function(e){
            ga.widget.setProjectPanoramic($(this));
        });
    },

    initLinkWidget2Layer: function() {
        $(document).on('ifChecked', '[data-widget-type="linkWidget2Layer"]', function(e){
            ga.widget.linkWidget2Layer($(this));
        }).on('ifUnchecked', '[data-widget-type="linkWidget2Layer"]', function(e){
            ga.widget.linkWidget2Layer($(this), false);
        });
    },

    initSetLayerCached: function() {
        $(document).on('ifChecked', '[data-widget-type="setLayerCached"]', function(e){
            ga.widget.setLayerCached($(this));
        }).on('ifUnchecked', '[data-widget-type="setLayerCached"]', function(e){
            ga.widget.setLayerCached($(this), false);
        });
    },

    initRadioCheckbox: function(context) {
        if (!_.isUndefined(context)) {
            var $widgetItem = $(context).find('input[type="checkbox"], input[type="radio"]');
        }
        else {
            var $widgetItem = $('input[type="checkbox"], input[type="radio"]');
        }
        $widgetItem.iCheck({
          checkboxClass: 'icheckbox_flat-green',
          radioClass: 'iradio_flat-green'
        });
    },

    initBootstrapDatepicker: function(context) {
        if (!_.isUndefined(context)) {
            var $widgetItem = $(context).find('.datepicker');
        }
        else {
            var $widgetItem = $('.datepicker');
        }
        $widgetItem.datepicker({
            language:CURRENT_LANGUAGE_CODE
        });
    },

    initBootstrapColorpicker: function(context) {
        if (!_.isUndefined(context)) {
            var $widgetItem = $(context).find('.colorpicker');
        }
        else {
            var $widgetItem = $('.colorpicker');
        }
        $widgetItem.parent().addClass('colorpicker-component').colorpicker();
    },

    initSelect2: function(context) {
        if (!_.isUndefined(context)) {
            var $widgetItem = $(context).find('.select2');
        }
        else {
            var $widgetItem = $('.select2');
        }
        $widgetItem.select2();
    },

    initBackHistory: function() {
        $('[data-widget-type="backHistory"]').click(function(){
            parent.history.back();
            return false;
        });
    },

    initAjaxFormWidget: function() {
        $(document).on('click', '[data-widget-type="ajaxForm"]', function(e){
            ga.widget.ajaxForm($(this));
        });
    },

    initAjaxFilerWidget: function() {
         $(document).on('click', '[data-widget-type="ajaxFiler"]', function(e){
             // if disabled do not nothing
             e.preventDefault();
            if (!$(this).hasClass('disabled')) {
                ga.widget.ajaxFiler($(this));
            }

        });
    },

    initAjaxDownload: function() {
         $(document).on('click', '[data-widget-type="ajaxDownload"]', function(e){
            ga.widget.ajaxDownload($(this));
        });
    },

    initMapSetExtent: function() {
         $(document).on('click', '[data-widget-type="mapSetExtent"]', function(e){
            ga.widget.mapSetExtent($(this));
        });
    },

    showMessageOnLoad: function(context) {
        if (!_.isUndefined(context)) {
            var $widgetItem = $(context).find('[data-widget-type="showMessageOnLoad"]');
        }
        else {
            var $widgetItem = $('[data-widget-type="showMessageOnLoad"]');
        }
            if ($widgetItem.length > 0){
                ga.widget.showMessageOnLoad($widgetItem);
            }

    },

    initPushMenu: function(){

        var $body = $("body");
        var cookieOptions = {path: '/'};
        // init event on pushMenu
        $body
            .on('collapsed.pushMenu', function(e) {

                // set coockie on collapsed
                $.cookie('g3wadmin_sidebar_status', 'collapsed', cookieOptions);
            })
            .on('expanded.pushMenu', function(e) {

                // set coockie on exanded
                $.cookie('g3wadmin_sidebar_status', 'expanded', cookieOptions);
            })
    },

    /**
     * Init datatable jquery object
     * @param options
     */
    initDataTable: function(context, options){

        //
        if (_.isObject(context)){
            options = context;
            context = undefined;
        }

        if (!_.isUndefined(context)) {
            var $widgetItem = $(context).find('[data-widget-type="dataTable"]');
        }
        else {
            var $widgetItem = $('[data-widget-type="dataTable"]');
        }

        // add widgect for details
        // before init datatable because it will work only on first page
        $widgetItem.find('[data-widget-type="detailItemDataTable"]').on('click', function(e){
            ga.widget.showDetailItemDataTable($dataTable, $(this));
        });

        var $dataTable = $widgetItem.DataTable(options);


    }






});
/**
 * Created by walter on 18/02/16.
 */

/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */

_.extend(g3wadmin.widget, {

    /**
     * Data-<param> DOM attributes to find in item (jqeury object) for deleteItem widget.
     */
    _deleteItemParams: [
        'delete-url',
        'item-selector',
        'modal-title'
    ],

    /**
     * Data-<param> DOM attributes to find in item (jquery object) for detailItem widget.
     */
    _detailItemParams: [
        'detail-url',
        'modal-title'
    ],

    _detailItemDataTableParams: [
        'detail-url',
    ],

    _loadHtmlItemParams: [
        'html-url',
        'target-selector'
    ],

    _ajaxFormParams: [
        'form-url',
        'modal-title',
        'modal-size'
    ],

    _ajaxFilerParams: [
        'action-url',
        'modal-title',
        'file-extensions',
        'item-plus-form' // #selector to DOM contains addtitional form inputs.
    ],

    _setProjectPanoramic: [
        'ajax-url',
    ],

    _linkWidget2Layer: [
        'ajax-url',
    ],

    _setLayerCached: [
        'ajax-url',
    ],

    _setAjaxDownload: [
        'ajax-url',
    ],

    _mapSetExtent: [
        'crs',
    ],

    /**
     * Widget to delete a item from database by ajax call.
     * @param $item jquery object
     */
    deleteItem: function($item){

        try {
            // search into $item attrs
            var params = ga.utils.getDataAttrs($item, this._deleteItemParams);
            if (_.isUndefined(params['delete-url'])) {
                throw new Error('Attribute data-delete-url not defined');
            }

            // check for pre-delete-message
            var preMessage = $item.parent().find('.pre-delete-message').html();

            // open modal to confirm delete
            var modal = ga.ui.buildDefaultModal({
                modalTitle: 'Delete item',
                modalBody: 'Are you sure to delete this Item?' + preMessage ,
                closeButtonText: 'No'
            });

            //call ajax delete url
            var actionDelete = function () {
                var data = {};
                ga.utils.addCsfrtokenData(data);
                $.ajax({
                    method: 'post',
                    url: params['delete-url'],
                    data: data,
                    success: function (res) {
                        var $itemToDelete = $(params['item-selector']);
                        $itemToDelete.toggle(300,function(){
                            $(this).remove();
                        })
                        modal.hide();
                    },
                    error: function (xhr, textStatus, errorMessage) {
                        ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                    }


                });
            }
            modal.setConfirmButtonAction(actionDelete);
            modal.show();

        } catch (e) {
            this.showError(e.message);
        }

    },

    /**
     * Widget to show a item deatil from database by ajax call.
     * @param $item
     */
    showDetailItem: function($item){

        try {

            var params = ga.utils.getDataAttrs($item, this._detailItemParams);
            if (_.isUndefined(params['detail-url'])) {
                throw new Error('Attribute data-detail-url not defined');
            }

            // ajax call to get deatail data
             $.ajax({
                 method: 'get',
                 url: params['detail-url'],
                 success: function (res) {
                    // open modal to show detail data
                    var modal = ga.ui.buildDefaultModal({
                        modalTitle: ((_.isUndefined(params['modal-title']) ? gettext('Detail object') : params['modal-title'])),
                        modalBody: res,
                        closeButtonText: gettext('Close'),
                        confirmButton: false
                    });
                    modal.show();
                 },
                 error: function (xhr, textStatus, errorMessage) {
                     ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                 }
             });

        } catch (e) {
            this.showError(e.message);
        }


    },

    /**
     * Widget to show deatilitem for dataTable, under the row
     * @param $item
     */
    showDetailItemDataTable: function($dataTable, $item , refresh){

        try {

            var params = ga.utils.getDataAttrs($item, this._detailItemParams);
            if (_.isUndefined(params['detail-url'])) {
                throw new Error('Attribute data-detail-url not defined');
            }

            refresh = _.isUndefined(refresh) ? false : true;

            var tr = $item.closest('tr');
            var row = $dataTable.row(tr);
            var idx = $.inArray( tr.attr('id'), [] );

            var getDetail = function(){
                $.ajax({
                     method: 'get',
                     url: params['detail-url'],
                     success: function (res) {
                        row.child(res).show();
                     },
                     complete: function(){
                         var status = arguments[1];
                         if (status == 'success') {
                            ga.ui.initRadioCheckbox(row.child());
                         }
                     },
                     error: function (xhr, textStatus, errorMessage) {
                         ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                     }
                });
            }

            if (refresh){
                getDetail();
            } else {
                if ( row.child.isShown() ) {
                    tr.removeClass( 'details' );
                    row.child.hide();
                } else {
                    tr.addClass( 'details' );

                    // ajax call to get deatail data
                    getDetail();
                }
            }

        } catch (e) {
            this.showError(e.message);
        }


    },

    /**
     * load data from html-url and punt into target item
     * @param $item
     */
    loadHtmlItem: function($item){
        try {

            var params = ga.utils.getDataAttrs($item, this._loadHtmlItemParams);
            if (_.isUndefined(params['html-url'])) {
                throw new Error('Attribute data-html-url not defined');
            }

            // ajax call to get deatail data
             $.ajax({
                 method: 'get',
                 url: params['html-url'],
                 success: function (res) {

                    //punt re into target
                     $(params['target-selector']).html(res);

                 },
                 complete: function(){
                     var status = arguments[1];
                     if (status == 'success') {
                        ga.ui.initRadioCheckbox(params['target-selector'])
                     }
                 },
                 error: function (xhr, textStatus, errorMessage) {
                     ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                 }
             });

        } catch (e) {
            this.showError(e.message);
        }
    },

    /**
     * ajax form from form-url and send data by ajax call
     * @param $item
     */
    ajaxForm: function($item){
        try {

            var params = ga.utils.getDataAttrs($item, this._ajaxFormParams);
            if (_.isUndefined(params['form-url'])) {
                throw new Error('Attribute data-form-url not defined');
            }

            // ajax call to get deatail data
             $.ajax({
                 method: 'get',
                 url: params['form-url'],
                 success: function (res) {

                    // open modal to show list of add links
                    var modal = ga.currentModal = ga.ui.buildDefaultModal({
                        modalTitle: ((_.isUndefined(params['modal-title']) ? gettext('Form title') : params['modal-title'])),
                        modalBody: res,
                        modalSize: (_.isUndefined(params['modal-size']) ? '' : params['modal-size'])
                    });

                    modal.data.$evoker = $item;
                    modal.show();

                    var form = ga.currentForm = new ga.forms.form(modal.$modal.find('form'));
                    form.setAction(params['form-url']);
                    form.setOnSuccesAction(function(){

                        // close modal and reload page
                        modal.hide();
                        window.location.reload();
                    })
                     

                    // add form send data action
                    modal.setConfirmButtonAction(form.sendData)

                    // init form input plugins
                    ga.ui.initRadioCheckbox(modal.$modal);
                    ga.ui.initBootstrapDatepicker(modal.$modal);
                    ga.ui.initSelect2(modal.$modal);
                     
                 },
                 error: function (xhr, textStatus, errorMessage) {
                     ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                 }
             });

        } catch (e) {
            this.showError(e.message);
        }
    },

    /**
     * Create a modal form with jquery.filer plugin
     * @param $item
     */
    ajaxFiler: function($item){
        try {

            var params = ga.utils.getDataAttrs($item, this._ajaxFilerParams);
            if (_.isUndefined(params['action-url'])) {
                throw new Error('Attribute data-action-url not defined');
            }

            var templateOptions = {actionUrl: params['action-url'], plusFormInputs: ''};

            if (!_.isUndefined(params['item-plus-form'])) {
                var $itemFormPlus = $('#'+params['item-plus-form']);
                templateOptions['plusFormInputs'] = '<div id="plus_filer_input">' + $itemFormPlus.html()+ '</div>'
            }
            
            // open modal to show form filer
            var modal = ga.ui.buildDefaultModal({
                confirmButton: false,
                modalTitle: ((_.isUndefined(params['modal-title']) ? gettext('Upload file') : params['modal-title'])),
                modalBody: ga.tpl.ajaxFiler(templateOptions)
            });

            modal.setCloseButtonAction(function(e){
                modal.hide();
                window.location.reload();
            });

            modal.show();

            // add crftoken
            var data = {}
            ga.utils.addCsfrtokenData(data);

            // get extentions
            var extensions = _.isUndefined(params['file-extensions']) ? null : params['file-extensions'].split('|')
            
            $(modal.$modal.find('#filer_input')).filer({
                changeInput: ga.tpl.ajaxFiler_changeInput({
                    drag_drop_message: gettext('Drag&Drop files here'),
                    browse_button: gettext('Browse Files')
                }),
                showThumbs: true,
                limit: 1,
                extensions: extensions,
                theme: "dragdropbox",
                captions: {
                    button: "Choose Files",
                    feedback: "Choose files To Upload",
                    feedback2: "files were chosen",
                    drop: "Drop file here to Upload",
                    removeConfirmation: "Are you sure you want to remove this file?",
                    errors: {
                        filesLimit: "Only {{fi-limit}} files are allowed to be uploaded.",
                        filesType: "Only Images are allowed to be uploaded.",
                        filesSize: "{{fi-name}} is too large! Please upload file up to {{fi-fileMaxSize}} MB.",
                        filesSizeAll: "Files you've choosed are too large! Please upload files up to {{fi-maxSize}} MB.",
                        folderUpload: "You are not allowed to upload folders."
                    }
                },
                templates: {
                    box: ga.tpl.ajaxFiler_box(),
                    item: ga.tpl.ajaxFiler_item(),
                    itemAppend: ga.tpl.ajaxFiler_itemAppend(),
                    progressBar: ga.tpl.ajaxFiler_progresBar(),
                    itemAppendToEnd: false,
                    removeConfirmation: true,
                    _selectors: {
                        list: '.jFiler-items-list',
                        item: '.jFiler-item',
                        progressBar: '.bar',
                        remove: '.jFiler-item-trash-action'
                    }
                },
                uploadFile: {
                    url: params['action-url'],
                    data: data,
                    type: 'post',
                    enctype: 'multipart/form-data',
                    beforeSend: function() {
                        var upload = arguments[7]
                        if (!_.isUndefined(params['item-plus-form'])) {
                            var inputs = $('#plus_filer_input').find(':input').serializeArray();
                            for (idx in inputs) {
                                var d = inputs[idx];
                                upload.data.append(d['name'], d['value']);
                            }
                        }

                    },
                    success: function(data, el){
                        var parent = el.find(".jFiler-jProgressBar").parent();
                        el.find(".jFiler-jProgressBar").fadeOut("slow", function(){
                            $(ga.tpl.ajaxFiler_successMsg()).hide().appendTo(parent).fadeIn("slow");
                        });

                        el.after(data)
                    },
                    error: function(el){
                        if (_.isUndefined(arguments[6].responseJSON)) {
                            var errMsg = arguments[6].responseText;
                        } else {
                            var errMsg = arguments[6].responseJSON.errors;
                        }
                        var parent = el.find(".jFiler-jProgressBar").parent();
                        el.find(".jFiler-jProgressBar").fadeOut("slow", function(){
                            $(ga.tpl.ajaxFiler_errorMsg()).hide().appendTo(parent).fadeIn("slow");
                            //modal.hide()
                            //ga.widget.showError(ga.utils.buildAjaxErrorMessage(500, errorMessage));
                            var $errMsg = $('<div class="callout callout-danger"></div>');
                            $errMsg.append($('<h4>'+gettext('ERROR')+'</h4>'));
                            $errMsg.append($('<p></p>').html(errMsg));
                            el.after($errMsg);
                        });
                    },
                }
            });

            
         

        } catch (e) {
            this.showError(e.message);
        }
    },

    addProjectGroup: function($item){

        try {

            var $bodyContent = $item.next('.add-links');
            if ($bodyContent.length == 0) {
                throw new Error('No add add links choices set');
            }

            // open modal to show list of add links
            var modal = ga.ui.buildDefaultModal({
                modalTitle: 'Add a project',
                modalBody: $bodyContent.html(),
                closeButtonText: 'No'
            });

            modal.show();

        } catch (e) {
            this.showError(e.message);
        }

    },

    ajaxUpload: function($item){
        initUploadFields($item);
    },

    /**
     * Simple widget to show error message ina modal-danger type
     * @param message string to show in modal
     */
    showError: function(message){

        // delete every modal opened
        $('.modal,.fade').remove();
        var modal = ga.ui.buildDangerModal({modalTitle:'ERROR', modalBody:message, confirmButton:false});
        modal.show();
    },

    // -----------------------------------------------------
    // Specific widget for g3w-admin modules
    // -----------------------------------------------------

    /**
     * Set by ajax call project id and type for panoramic map
     * @param $item
     */
    setProjectPanoramic: function($item) {

        try {
            var params = ga.utils.getDataAttrs($item, this._setProjectPanoramic);
            if (_.isUndefined(params['ajax-url'])) {
                throw new Error('Attribute data-ajax-url not defined');
            }

            $.ajax({
                method: 'get',
                url: params['ajax-url'],
                error: function (xhr, textStatus, errorMessage) {
                    ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                }
            });

        } catch (e) {
            this.showError(e.message);
        }
    },

    linkWidget2Layer: function($item, linked) {

        try {
            var params = ga.utils.getDataAttrs($item, this._linkWidget2Layer);
            if (_.isUndefined(params['ajax-url'])) {
                throw new Error('Attribute data-ajax-url not defined');
            }

            var data = {};
            if (!_.isUndefined(linked) && !linked) {
                data['unlink'] = 'unlink';
            }

            $.ajax({
                method: 'get',
                url: params['ajax-url'],
                data: data,
                success: function(res){

                },
                error: function (xhr, textStatus, errorMessage) {
                    ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                }
            });


        } catch (e) {
            this.showError(e.message);
        }
    },

    /**
     * Set data for caching layer by tilestache
     * @param $item
     */
    setLayerCached: function($item, cached) {

        try {
            var params = ga.utils.getDataAttrs($item, this._setLayerCached);
            if (_.isUndefined(params['ajax-url'])) {
                throw new Error('Attribute data-ajax-url not defined');
            }

            var ajaxUrl = params['ajax-url']
            if (!_.isUndefined(cached) && !cached) {
                ajaxUrl += '?cached=0'
            }

            $.ajax({
                method: 'get',
                url: ajaxUrl,
                error: function (xhr, textStatus, errorMessage) {
                    ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                }
            });

        } catch (e) {
            this.showError(e.message);
        }
    },

    /**
     * Make download file by ajax call
     * selector: ajaxDownload
     * widget parameters:
     *      data-ajax-url: url of file to download
     * @param $item
     */
    ajaxDownload: function($item) {

        try {
            var params = ga.utils.getDataAttrs($item, this._setAjaxDownload);
            if (_.isUndefined(params['ajax-url'])) {
                throw new Error('Attribute data-ajax-url not defined');
            }

            $.fileDownload(params['ajax-url'])
                .fail(function(){
                    ga.widget.showError(ga.utils.buildAjaxErrorMessage(500, 'File download Failed!'));
                });

        } catch (e) {
            this.showError(e.message);
        }
    },

    /**
     * Show message on load page by modal
     * @param $item
     */
    showMessageOnLoad: function($item) {

        var modal = ga.ui.buildWarningModal({
                modalTitle: 'Warnings!',
                modalBody: $item.html(),
                closeButtonText: 'Close',
                confirmButton: false

            });

        modal.show();
    },

    /**
     * Widget map to get and set extent
     * @param $item
     */
    mapSetExtent: function($item) {
        try {
            var params = ga.utils.getDataAttrs($item, this._mapSetExtent);
            if (_.isUndefined(params['crs'])) {
                throw new Error('Attribute data-crs not defined');
            }

            var $input = $item.parents('.input-group').find('input');
            var bboxLayer = null;
            if ($input.val()) {
                bboxLayer = ga.utils.transformBBoxToWGS84(params['crs'], $input.val());
            }

            var modal = ga.ui.mapModal({bboxLayer: bboxLayer});
            modal.setConfirmButtonAction(function(e){
                $input.val(ga.utils.transformBBoxFromWGS84(params['crs'], modal.drawnLayer.getBounds().toBBoxString()));
                modal.hide();
            });
        modal.show();
        } catch (e) {
            this.showError(e.message);
        }


    }



});
/**
 * Created by walter on 18/02/16.
 */

/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */

_.extend(g3wadmin.utils, {

    getDataAttrs: function($item, paramsToFind){

        // search into $item attrs
        var params = {};
        _.each(paramsToFind,function(el){
            params[el] = this.$item.attr('data-'+el);
        },{$item:$item,params:params});

        return params;
    },

    buildAjaxErrorMessage: function(textStatus,errorMessage,moreInfo) {
        return ga.tpl.ajaxError(_.extendOwn(ga.tpl.tplDefValues.ajaxError,{textStatus:textStatus, errorMessage:errorMessage, moreInfo:moreInfo}));
    },

    addCsfrtokenData: function(data) {
        _.extend(data,{
            csrfmiddlewaretoken: $.cookie('csrftoken')
        });
    },

    transformBBoxToWGS84: function(crs, bbox) {
        var coords = bbox.split(',');
        var so = proj4(crs).inverse([coords[0],coords[1]]);
        var ne = proj4(crs).inverse([coords[2],coords[3]]);

        return [so[0], so[1], ne[0], ne[1]].join();
    },

    transformBBoxFromWGS84: function(crs, bbox) {
        var coords = bbox.split(',');
        var so = proj4(crs).forward([coords[0],coords[1]]);
        var ne = proj4(crs).forward([coords[2],coords[3]]);

        return [so[0], so[1], ne[0], ne[1]].join();
    },

    /**
     * Fill at runtime textare with wysihtml5 pluign
     * @param selector
     * @param content
     */
    setEditorWys5Content: function(selector, content){
        if (selector instanceof jQuery) {
            $selector = selector;
        } else {
            $selector = $(selector);
        }

        var editorObj = $selector.data('wysihtml5');
        var editor = editorObj.editor;
        editor.setValue(content);
    }


});
/**
 * Created by walter on 26/02/16.
 */

/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */

_.extend(g3wadmin.forms, {

    INSERT_STATE: 0,
    UPDATE_STATE: 1,

    checkItemsEmpty: function($item) {

        $formElements = $item.find(':input');

        var empty = true;
        $.each($formElements, function(index, formElement){

            var $formElement = $(formElement);
            console.log($formElement);
            var type = this.tagName.toLowerCase();
            console.log(type);
            switch (type) {
                case 'select':
                    console.log($formElement.val());
                    break;

                case 'radio':
                case 'checkbox':
                    console.log($formElement.attr('checked'));
                    break;
                default:
                    console.log($formElement.val());
            }
        })
    },

    checkBoxToOpen: function($item) {

        this.checkItemsEmpty($item);
    },

    form: function($form) {

        var that = this;
        this.$form = $form;

        var customEvents = [
            'preSendForm',
            'postSendForm'
        ]

        /**
         * Wrop jeyr on method on ga.form.form object
         * @param event
         * @param target
         */
        this.on = function(event, target){
            that.$form.on(event, target);
        }

        /**
         * Send dato form to action url
         */
        this.sendData = function() {
            that.$form.trigger('preSendForm');
            $.ajax({
                method: 'post',
                data: that.getData(),
                url: that.$form.attr('action'),
                success: function (res) {

                    if(res.status == 'error') {
                        if (_.has(res,'errors_form')) {
                            that.showErrors(res.errors_form);
                        } else {
                            that.showErrors();
                        }
                    } else {
                        if(!_.isUndefined(that.successAction)) {
                            that.successAction();
                        }
                    }
                },
                complete: function(jqXHR, textStatus){
                    that.$form.trigger('postSendForm');
                },
                error: function (xhr, textStatus, errorMessage) {
                    ga.widget.showError(ga.utils.buildAjaxErrorMessage(xhr.status, errorMessage));
                    
                }
            });
        };

        this.setOnSuccesAction = function (func) {
            this.successAction = func;
        }

        /**
         * Show error message on form and fields.
         * @param errors array of error message by key field
         */
        this.showErrors = function(errors) {

            // first remove error class
            this.$form.find('.has-error').removeClass('has-error');
            this.$form.find('span.help-block').remove();

            // show error form message
            this.$form.find('.error-form-message').removeClass('hidden');
            if (!_.isUndefined(errors) && _.isObject(errors)) {
                _.mapObject(errors, function(val, key){
                    var $input = that.$form.find('#div_id_'+key);
                    $input.addClass('has-error');
                    var $control = $input.find('.controls');
                    _.map(val, function(error){
                        $control.append(ga.tpl.ajaxFormFieldError({errorId:'error_id_'+key, errorMessage: error}));
                    });
                });

                }
        };

        /**
         * Set action url form
         * @param action string
         */
        this.setAction = function(action) {
            this.$form.attr('action',action);
        };


        /**
         * Get data from form for post send
         * @returns Object
         */
        this.getData = function() {

            return this.$form.serialize();
            /*
            // refresh obejct form
            var dataArray = this.$form.serializeArray();
            var dataToRet = {};

            // rebuild data for ajax post
            for (i in dataArray) {
                var objData = dataArray[i];
                dataToRet[objData['name']] = objData['value'];
            }

            return dataToRet;
            */
        };
    }

});
/**
 * Created by walter on 18/02/16.
 */

/**
 * Use of https://github.com/sinkswim/javascript-style-guide for javascript coding style.
 */

var $m;

$(document).ready(function(){
    ga.bootstrap();
});
