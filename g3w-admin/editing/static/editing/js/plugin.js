(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":1,"timers":2}],3:[function(require,module,exports){
var Vue // late bind
var version
var map = Object.create(null)
if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map
}
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) { return }
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
        'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  if(map[id]) { return }

  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  }
}

/**
 * Check if module is recorded
 *
 * @param {String} id
 */

exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined'
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render
    options.render = function (h, ctx) {
      var instances = map[id].instances
      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent)
      }
      return render(h, ctx)
    }
  } else {
    injectHook(options, initHookName, function() {
      var record = map[id]
      if (!record.Ctor) {
        record.Ctor = this.constructor
      }
      record.instances.push(this)
    })
    injectHook(options, 'beforeDestroy', function() {
      var instances = map[id].instances
      instances.splice(instances.indexOf(this), 1)
    })
  }
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook]
    : [hook]
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg)
    } catch (e) {
      console.error(e)
      console.warn(
        'Something went wrong during Vue component hot-reload. Full reload required.'
      )
    }
  }
}

function updateOptions (oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key]
    }
  }
  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1]
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  if (record.Ctor) {
    record.Ctor.options.render = options.render
    record.Ctor.options.staticRenderFns = options.staticRenderFns
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render
      instance.$options.staticRenderFns = options.staticRenderFns
      // reset static trees
      // pre 2.5, all static trees are cached together on the instance
      if (instance._staticTrees) {
        instance._staticTrees = []
      }
      // 2.5.0
      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = []
      }
      // 2.5.3
      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = []
      }

      // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)

      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update
      var restore = patchScopedSlots(instance)
      instance.$forceUpdate()
      instance.$nextTick(restore)
    })
  } else {
    // functional or no instance created yet
    record.options.render = options.render
    record.options.staticRenderFns = options.staticRenderFns

    // handle functional component re-render
    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options)
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles
        if (injectStyles) {
          var render = options.render
          record.options.render = function (h, ctx) {
            injectStyles.call(ctx)
            return render(h, ctx)
          }
        }
      }
      record.options._Ctor = null
      // 2.5.3
      if (Array.isArray(record.options.cached)) {
        record.options.cached = []
      }
      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate()
      })
    }
  }
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options
      }
      var newCtor = record.Ctor.super.extend(options)
      // prevent record.options._Ctor from being overwritten accidentally
      newCtor.options._Ctor = record.options._Ctor
      record.Ctor.options = newCtor.options
      record.Ctor.cid = newCtor.cid
      record.Ctor.prototype = newCtor.prototype
      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release()
      }
    } else {
      updateOptions(record.options, options)
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn(
        'Root or manually mounted instance modified. Full reload required.'
      )
    }
  })
})

// 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.
function patchScopedSlots (instance) {
  if (!instance._u) { return }
  // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js
  var original = instance._u
  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true)
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true)
    }
  }
  return function () {
    instance._u = original
  }
}

},{}],4:[function(require,module,exports){
(function (global,setImmediate){(function (){
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (isDef(data) && isDef(data.nativeOn)) {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.12';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */

/*  */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

module.exports = Vue;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":2}],5:[function(require,module,exports){
(function (process){(function (){
if (process.env.NODE_ENV === 'production') {
  module.exports = require('./vue.runtime.common.prod.js')
} else {
  module.exports = require('./vue.runtime.common.dev.js')
}

}).call(this)}).call(this,require('_process'))

},{"./vue.runtime.common.dev.js":4,"./vue.runtime.common.prod.js":6,"_process":1}],6:[function(require,module,exports){
(function (global,setImmediate){(function (){
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
"use strict";var t=Object.freeze({});function e(t){return null==t}function n(t){return null!=t}function r(t){return!0===t}function o(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function i(t){return null!==t&&"object"==typeof t}var a=Object.prototype.toString;function s(t){return"[object Object]"===a.call(t)}function c(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function u(t){return n(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function l(t){return null==t?"":Array.isArray(t)||s(t)&&t.toString===a?JSON.stringify(t,null,2):String(t)}function f(t){var e=parseFloat(t);return isNaN(e)?t:e}function p(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var d=p("key,ref,slot,slot-scope,is");function v(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var h=Object.prototype.hasOwnProperty;function m(t,e){return h.call(t,e)}function y(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var g=/-(\w)/g,_=y(function(t){return t.replace(g,function(t,e){return e?e.toUpperCase():""})}),b=y(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),C=/\B([A-Z])/g,$=y(function(t){return t.replace(C,"-$1").toLowerCase()});var w=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function A(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function x(t,e){for(var n in e)t[n]=e[n];return t}function O(t){for(var e={},n=0;n<t.length;n++)t[n]&&x(e,t[n]);return e}function k(t,e,n){}var S=function(t,e,n){return!1},E=function(t){return t};function j(t,e){if(t===e)return!0;var n=i(t),r=i(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),a=Array.isArray(e);if(o&&a)return t.length===e.length&&t.every(function(t,n){return j(t,e[n])});if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||a)return!1;var s=Object.keys(t),c=Object.keys(e);return s.length===c.length&&s.every(function(n){return j(t[n],e[n])})}catch(t){return!1}}function T(t,e){for(var n=0;n<t.length;n++)if(j(t[n],e))return n;return-1}function I(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var D="data-server-rendered",N=["component","directive","filter"],P=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],L={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:S,isReservedAttr:S,isUnknownElement:S,getTagNamespace:k,parsePlatformTagName:E,mustUseProp:S,async:!0,_lifecycleHooks:P};function M(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var F=new RegExp("[^"+/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source+".$_\\d]");var R,U="__proto__"in{},H="undefined"!=typeof window,B="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,V=B&&WXEnvironment.platform.toLowerCase(),z=H&&window.navigator.userAgent.toLowerCase(),W=z&&/msie|trident/.test(z),q=z&&z.indexOf("msie 9.0")>0,K=z&&z.indexOf("edge/")>0,X=(z&&z.indexOf("android"),z&&/iphone|ipad|ipod|ios/.test(z)||"ios"===V),G=(z&&/chrome\/\d+/.test(z),z&&/phantomjs/.test(z),z&&z.match(/firefox\/(\d+)/)),Z={}.watch,J=!1;if(H)try{var Q={};Object.defineProperty(Q,"passive",{get:function(){J=!0}}),window.addEventListener("test-passive",null,Q)}catch(t){}var Y=function(){return void 0===R&&(R=!H&&!B&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),R},tt=H&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function et(t){return"function"==typeof t&&/native code/.test(t.toString())}var nt,rt="undefined"!=typeof Symbol&&et(Symbol)&&"undefined"!=typeof Reflect&&et(Reflect.ownKeys);nt="undefined"!=typeof Set&&et(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ot=k,it=0,at=function(){this.id=it++,this.subs=[]};at.prototype.addSub=function(t){this.subs.push(t)},at.prototype.removeSub=function(t){v(this.subs,t)},at.prototype.depend=function(){at.target&&at.target.addDep(this)},at.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},at.target=null;var st=[];function ct(t){st.push(t),at.target=t}function ut(){st.pop(),at.target=st[st.length-1]}var lt=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ft={child:{configurable:!0}};ft.child.get=function(){return this.componentInstance},Object.defineProperties(lt.prototype,ft);var pt=function(t){void 0===t&&(t="");var e=new lt;return e.text=t,e.isComment=!0,e};function dt(t){return new lt(void 0,void 0,void 0,String(t))}function vt(t){var e=new lt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var ht=Array.prototype,mt=Object.create(ht);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=ht[t];M(mt,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i})});var yt=Object.getOwnPropertyNames(mt),gt=!0;function _t(t){gt=t}var bt=function(t){var e;this.value=t,this.dep=new at,this.vmCount=0,M(t,"__ob__",this),Array.isArray(t)?(U?(e=mt,t.__proto__=e):function(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];M(t,i,e[i])}}(t,mt,yt),this.observeArray(t)):this.walk(t)};function Ct(t,e){var n;if(i(t)&&!(t instanceof lt))return m(t,"__ob__")&&t.__ob__ instanceof bt?n=t.__ob__:gt&&!Y()&&(Array.isArray(t)||s(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new bt(t)),e&&n&&n.vmCount++,n}function $t(t,e,n,r,o){var i=new at,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&Ct(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return at.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,o=e.length;r<o;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var r=s?s.call(t):n;e===r||e!=e&&r!=r||s&&!c||(c?c.call(t,e):n=e,u=!o&&Ct(e),i.notify())}})}}function wt(t,e,n){if(Array.isArray(t)&&c(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?($t(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function At(t,e){if(Array.isArray(t)&&c(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||m(t,e)&&(delete t[e],n&&n.dep.notify())}}bt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)$t(t,e[n])},bt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Ct(t[e])};var xt=L.optionMergeStrategies;function Ot(t,e){if(!e)return t;for(var n,r,o,i=rt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=t[n],o=e[n],m(t,n)?r!==o&&s(r)&&s(o)&&Ot(r,o):wt(t,n,o));return t}function kt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?Ot(r,o):o}:e?t?function(){return Ot("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function St(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Et(t,e,n,r){var o=Object.create(t||null);return e?x(o,e):o}xt.data=function(t,e,n){return n?kt(t,e,n):e&&"function"!=typeof e?t:kt(t,e)},P.forEach(function(t){xt[t]=St}),N.forEach(function(t){xt[t+"s"]=Et}),xt.watch=function(t,e,n,r){if(t===Z&&(t=void 0),e===Z&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in x(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},xt.props=xt.methods=xt.inject=xt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return x(o,t),e&&x(o,e),o},xt.provide=kt;var jt=function(t,e){return void 0===e?t:e};function Tt(t,e,n){if("function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[_(o)]={type:null});else if(s(n))for(var a in n)o=n[a],i[_(a)]=s(o)?o:{type:o};t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(s(n))for(var i in n){var a=n[i];r[i]=s(a)?x({from:i},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=Tt(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=Tt(t,e.mixins[r],n);var i,a={};for(i in t)c(i);for(i in e)m(t,i)||c(i);function c(r){var o=xt[r]||jt;a[r]=o(t[r],e[r],n,r)}return a}function It(t,e,n,r){if("string"==typeof n){var o=t[e];if(m(o,n))return o[n];var i=_(n);if(m(o,i))return o[i];var a=b(i);return m(o,a)?o[a]:o[n]||o[i]||o[a]}}function Dt(t,e,n,r){var o=e[t],i=!m(n,t),a=n[t],s=Lt(Boolean,o.type);if(s>-1)if(i&&!m(o,"default"))a=!1;else if(""===a||a===$(t)){var c=Lt(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!m(e,"default"))return;var r=e.default;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Nt(e.type)?r.call(t):r}(r,o,t);var u=gt;_t(!0),Ct(a),_t(u)}return a}function Nt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Pt(t,e){return Nt(t)===Nt(e)}function Lt(t,e){if(!Array.isArray(e))return Pt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Pt(e[n],t))return n;return-1}function Mt(t,e,n){ct();try{if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){Rt(t,r,"errorCaptured hook")}}Rt(t,e,n)}finally{ut()}}function Ft(t,e,n,r,o){var i;try{(i=n?t.apply(e,n):t.call(e))&&!i._isVue&&u(i)&&!i._handled&&(i.catch(function(t){return Mt(t,r,o+" (Promise/async)")}),i._handled=!0)}catch(t){Mt(t,r,o)}return i}function Rt(t,e,n){if(L.errorHandler)try{return L.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Ut(e,null,"config.errorHandler")}Ut(t,e,n)}function Ut(t,e,n){if(!H&&!B||"undefined"==typeof console)throw t;console.error(t)}var Ht,Bt=!1,Vt=[],zt=!1;function Wt(){zt=!1;var t=Vt.slice(0);Vt.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&et(Promise)){var qt=Promise.resolve();Ht=function(){qt.then(Wt),X&&setTimeout(k)},Bt=!0}else if(W||"undefined"==typeof MutationObserver||!et(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ht="undefined"!=typeof setImmediate&&et(setImmediate)?function(){setImmediate(Wt)}:function(){setTimeout(Wt,0)};else{var Kt=1,Xt=new MutationObserver(Wt),Gt=document.createTextNode(String(Kt));Xt.observe(Gt,{characterData:!0}),Ht=function(){Kt=(Kt+1)%2,Gt.data=String(Kt)},Bt=!0}function Zt(t,e){var n;if(Vt.push(function(){if(t)try{t.call(e)}catch(t){Mt(t,e,"nextTick")}else n&&n(e)}),zt||(zt=!0,Ht()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var Jt=new nt;function Qt(t){!function t(e,n){var r,o;var a=Array.isArray(e);if(!a&&!i(e)||Object.isFrozen(e)||e instanceof lt)return;if(e.__ob__){var s=e.__ob__.dep.id;if(n.has(s))return;n.add(s)}if(a)for(r=e.length;r--;)t(e[r],n);else for(o=Object.keys(e),r=o.length;r--;)t(e[o[r]],n)}(t,Jt),Jt.clear()}var Yt=y(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function te(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Ft(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)Ft(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function ee(t,n,o,i,a,s){var c,u,l,f;for(c in t)u=t[c],l=n[c],f=Yt(c),e(u)||(e(l)?(e(u.fns)&&(u=t[c]=te(u,s)),r(f.once)&&(u=t[c]=a(f.name,u,f.capture)),o(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,t[c]=l));for(c in n)e(t[c])&&i((f=Yt(c)).name,n[c],f.capture)}function ne(t,o,i){var a;t instanceof lt&&(t=t.data.hook||(t.data.hook={}));var s=t[o];function c(){i.apply(this,arguments),v(a.fns,c)}e(s)?a=te([c]):n(s.fns)&&r(s.merged)?(a=s).fns.push(c):a=te([s,c]),a.merged=!0,t[o]=a}function re(t,e,r,o,i){if(n(e)){if(m(e,r))return t[r]=e[r],i||delete e[r],!0;if(m(e,o))return t[r]=e[o],i||delete e[o],!0}return!1}function oe(t){return o(t)?[dt(t)]:Array.isArray(t)?function t(i,a){var s=[];var c,u,l,f;for(c=0;c<i.length;c++)e(u=i[c])||"boolean"==typeof u||(l=s.length-1,f=s[l],Array.isArray(u)?u.length>0&&(ie((u=t(u,(a||"")+"_"+c))[0])&&ie(f)&&(s[l]=dt(f.text+u[0].text),u.shift()),s.push.apply(s,u)):o(u)?ie(f)?s[l]=dt(f.text+u):""!==u&&s.push(dt(u)):ie(u)&&ie(f)?s[l]=dt(f.text+u.text):(r(i._isVList)&&n(u.tag)&&e(u.key)&&n(a)&&(u.key="__vlist"+a+"_"+c+"__"),s.push(u)));return s}(t):void 0}function ie(t){return n(t)&&n(t.text)&&!1===t.isComment}function ae(t,e){if(t){for(var n=Object.create(null),r=rt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=t[i].from,s=e;s;){if(s._provided&&m(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s&&"default"in t[i]){var c=t[i].default;n[i]="function"==typeof c?c.call(e):c}}}return n}}function se(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(ce)&&delete n[u];return n}function ce(t){return t.isComment&&!t.asyncFactory||" "===t.text}function ue(e,n,r){var o,i=Object.keys(n).length>0,a=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&r&&r!==t&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=le(n,c,e[c]))}else o={};for(var u in n)u in o||(o[u]=fe(n,u));return e&&Object.isExtensible(e)&&(e._normalized=o),M(o,"$stable",a),M(o,"$key",s),M(o,"$hasNormal",i),o}function le(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:oe(t))&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function fe(t,e){return function(){return t[e]}}function pe(t,e){var r,o,a,s,c;if(Array.isArray(t)||"string"==typeof t)for(r=new Array(t.length),o=0,a=t.length;o<a;o++)r[o]=e(t[o],o);else if("number"==typeof t)for(r=new Array(t),o=0;o<t;o++)r[o]=e(o+1,o);else if(i(t))if(rt&&t[Symbol.iterator]){r=[];for(var u=t[Symbol.iterator](),l=u.next();!l.done;)r.push(e(l.value,r.length)),l=u.next()}else for(s=Object.keys(t),r=new Array(s.length),o=0,a=s.length;o<a;o++)c=s[o],r[o]=e(t[c],c,o);return n(r)||(r=[]),r._isVList=!0,r}function de(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(n=x(x({},r),n)),o=i(n)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function ve(t){return It(this.$options,"filters",t)||E}function he(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function me(t,e,n,r,o){var i=L.keyCodes[e]||n;return o&&r&&!L.keyCodes[e]?he(o,r):i?he(i,t):r?$(r)!==e:void 0}function ye(t,e,n,r,o){if(n)if(i(n)){var a;Array.isArray(n)&&(n=O(n));var s=function(i){if("class"===i||"style"===i||d(i))a=t;else{var s=t.attrs&&t.attrs.type;a=r||L.mustUseProp(e,s,i)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=_(i),u=$(i);c in a||u in a||(a[i]=n[i],o&&((t.on||(t.on={}))["update:"+i]=function(t){n[i]=t}))};for(var c in n)s(c)}else;return t}function ge(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(be(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function _e(t,e,n){return be(t,"__once__"+e+(n?"_"+n:""),!0),t}function be(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ce(t[r],e+"_"+r,n);else Ce(t,e,n)}function Ce(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function $e(t,e){if(e)if(s(e)){var n=t.on=t.on?x({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function we(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?we(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Ae(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r&&(t[e[n]]=e[n+1])}return t}function xe(t,e){return"string"==typeof t?e+t:t}function Oe(t){t._o=_e,t._n=f,t._s=l,t._l=pe,t._t=de,t._q=j,t._i=T,t._m=ge,t._f=ve,t._k=me,t._b=ye,t._v=dt,t._e=pt,t._u=we,t._g=$e,t._d=Ae,t._p=xe}function ke(e,n,o,i,a){var s,c=this,u=a.options;m(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var l=r(u._compiled),f=!l;this.data=e,this.props=n,this.children=o,this.parent=i,this.listeners=e.on||t,this.injections=ae(u.inject,i),this.slots=function(){return c.$slots||ue(e.scopedSlots,c.$slots=se(o,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ue(e.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ue(e.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var o=Le(s,t,e,n,r,f);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return Le(s,t,e,n,r,f)}}function Se(t,e,n,r,o){var i=vt(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Ee(t,e){for(var n in e)t[_(n)]=e[n]}Oe(ke.prototype);var je={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var r=t;je.prepatch(r,r)}else{(t.componentInstance=function(t,e){var r={_isComponent:!0,_parentVnode:t,parent:e},o=t.data.inlineTemplate;n(o)&&(r.render=o.render,r.staticRenderFns=o.staticRenderFns);return new t.componentOptions.Ctor(r)}(t,qe)).$mount(e?t.elm:void 0,e)}},prepatch:function(e,n){var r=n.componentOptions;!function(e,n,r,o,i){var a=o.data.scopedSlots,s=e.$scopedSlots,c=!!(a&&!a.$stable||s!==t&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key),u=!!(i||e.$options._renderChildren||c);e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o);if(e.$options._renderChildren=i,e.$attrs=o.data.attrs||t,e.$listeners=r||t,n&&e.$options.props){_t(!1);for(var l=e._props,f=e.$options._propKeys||[],p=0;p<f.length;p++){var d=f[p],v=e.$options.props;l[d]=Dt(d,v,n,e)}_t(!0),e.$options.propsData=n}r=r||t;var h=e.$options._parentListeners;e.$options._parentListeners=r,We(e,r,h),u&&(e.$slots=se(i,o.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Ze(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Qe.push(e)):Ge(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,Xe(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);Ze(e,"deactivated")}}(e,!0):e.$destroy())}},Te=Object.keys(je);function Ie(o,a,s,c,l){if(!e(o)){var f=s.$options._base;if(i(o)&&(o=f.extend(o)),"function"==typeof o){var p;if(e(o.cid)&&void 0===(o=function(t,o){if(r(t.error)&&n(t.errorComp))return t.errorComp;if(n(t.resolved))return t.resolved;var a=Fe;a&&n(t.owners)&&-1===t.owners.indexOf(a)&&t.owners.push(a);if(r(t.loading)&&n(t.loadingComp))return t.loadingComp;if(a&&!n(t.owners)){var s=t.owners=[a],c=!0,l=null,f=null;a.$on("hook:destroyed",function(){return v(s,a)});var p=function(t){for(var e=0,n=s.length;e<n;e++)s[e].$forceUpdate();t&&(s.length=0,null!==l&&(clearTimeout(l),l=null),null!==f&&(clearTimeout(f),f=null))},d=I(function(e){t.resolved=Re(e,o),c?s.length=0:p(!0)}),h=I(function(e){n(t.errorComp)&&(t.error=!0,p(!0))}),m=t(d,h);return i(m)&&(u(m)?e(t.resolved)&&m.then(d,h):u(m.component)&&(m.component.then(d,h),n(m.error)&&(t.errorComp=Re(m.error,o)),n(m.loading)&&(t.loadingComp=Re(m.loading,o),0===m.delay?t.loading=!0:l=setTimeout(function(){l=null,e(t.resolved)&&e(t.error)&&(t.loading=!0,p(!1))},m.delay||200)),n(m.timeout)&&(f=setTimeout(function(){f=null,e(t.resolved)&&h(null)},m.timeout)))),c=!1,t.loading?t.loadingComp:t.resolved}}(p=o,f)))return function(t,e,n,r,o){var i=pt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(p,a,s,c,l);a=a||{},_n(o),n(a.model)&&function(t,e){var r=t.model&&t.model.prop||"value",o=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[r]=e.model.value;var i=e.on||(e.on={}),a=i[o],s=e.model.callback;n(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[o]=[s].concat(a)):i[o]=s}(o.options,a);var d=function(t,r,o){var i=r.options.props;if(!e(i)){var a={},s=t.attrs,c=t.props;if(n(s)||n(c))for(var u in i){var l=$(u);re(a,c,u,l,!0)||re(a,s,u,l,!1)}return a}}(a,o);if(r(o.options.functional))return function(e,r,o,i,a){var s=e.options,c={},u=s.props;if(n(u))for(var l in u)c[l]=Dt(l,u,r||t);else n(o.attrs)&&Ee(c,o.attrs),n(o.props)&&Ee(c,o.props);var f=new ke(o,c,a,i,e),p=s.render.call(null,f._c,f);if(p instanceof lt)return Se(p,o,f.parent,s);if(Array.isArray(p)){for(var d=oe(p)||[],v=new Array(d.length),h=0;h<d.length;h++)v[h]=Se(d[h],o,f.parent,s);return v}}(o,d,a,s,c);var h=a.on;if(a.on=a.nativeOn,r(o.options.abstract)){var m=a.slot;a={},m&&(a.slot=m)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Te.length;n++){var r=Te[n],o=e[r],i=je[r];o===i||o&&o._merged||(e[r]=o?De(i,o):i)}}(a);var y=o.options.name||l;return new lt("vue-component-"+o.cid+(y?"-"+y:""),a,void 0,void 0,void 0,s,{Ctor:o,propsData:d,listeners:h,tag:l,children:c},p)}}}function De(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}var Ne=1,Pe=2;function Le(t,a,s,c,u,l){return(Array.isArray(s)||o(s))&&(u=c,c=s,s=void 0),r(l)&&(u=Pe),function(t,o,a,s,c){if(n(a)&&n(a.__ob__))return pt();n(a)&&n(a.is)&&(o=a.is);if(!o)return pt();Array.isArray(s)&&"function"==typeof s[0]&&((a=a||{}).scopedSlots={default:s[0]},s.length=0);c===Pe?s=oe(s):c===Ne&&(s=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(s));var u,l;if("string"==typeof o){var f;l=t.$vnode&&t.$vnode.ns||L.getTagNamespace(o),u=L.isReservedTag(o)?new lt(L.parsePlatformTagName(o),a,s,void 0,void 0,t):a&&a.pre||!n(f=It(t.$options,"components",o))?new lt(o,a,s,void 0,void 0,t):Ie(f,a,t,s,o)}else u=Ie(o,a,t,s);return Array.isArray(u)?u:n(u)?(n(l)&&function t(o,i,a){o.ns=i;"foreignObject"===o.tag&&(i=void 0,a=!0);if(n(o.children))for(var s=0,c=o.children.length;s<c;s++){var u=o.children[s];n(u.tag)&&(e(u.ns)||r(a)&&"svg"!==u.tag)&&t(u,i,a)}}(u,l),n(a)&&function(t){i(t.style)&&Qt(t.style);i(t.class)&&Qt(t.class)}(a),u):pt()}(t,a,s,c,u)}var Me,Fe=null;function Re(t,e){return(t.__esModule||rt&&"Module"===t[Symbol.toStringTag])&&(t=t.default),i(t)?e.extend(t):t}function Ue(t){return t.isComment&&t.asyncFactory}function He(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var r=t[e];if(n(r)&&(n(r.componentOptions)||Ue(r)))return r}}function Be(t,e){Me.$on(t,e)}function Ve(t,e){Me.$off(t,e)}function ze(t,e){var n=Me;return function r(){null!==e.apply(null,arguments)&&n.$off(t,r)}}function We(t,e,n){Me=t,ee(e,n||{},Be,Ve,ze,t),Me=void 0}var qe=null;function Ke(t){var e=qe;return qe=t,function(){qe=e}}function Xe(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Ge(t,e){if(e){if(t._directInactive=!1,Xe(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Ge(t.$children[n]);Ze(t,"activated")}}function Ze(t,e){ct();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)Ft(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),ut()}var Je=[],Qe=[],Ye={},tn=!1,en=!1,nn=0;var rn=0,on=Date.now;if(H&&!W){var an=window.performance;an&&"function"==typeof an.now&&on()>document.createEvent("Event").timeStamp&&(on=function(){return an.now()})}function sn(){var t,e;for(rn=on(),en=!0,Je.sort(function(t,e){return t.id-e.id}),nn=0;nn<Je.length;nn++)(t=Je[nn]).before&&t.before(),e=t.id,Ye[e]=null,t.run();var n=Qe.slice(),r=Je.slice();nn=Je.length=Qe.length=0,Ye={},tn=en=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Ge(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Ze(r,"updated")}}(r),tt&&L.devtools&&tt.emit("flush")}var cn=0,un=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++cn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new nt,this.newDepIds=new nt,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!F.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=k)),this.value=this.lazy?void 0:this.get()};un.prototype.get=function(){var t;ct(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Mt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Qt(t),ut(),this.cleanupDeps()}return t},un.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},un.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},un.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Ye[e]){if(Ye[e]=!0,en){for(var n=Je.length-1;n>nn&&Je[n].id>t.id;)n--;Je.splice(n+1,0,t)}else Je.push(t);tn||(tn=!0,Zt(sn))}}(this)},un.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||i(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Mt(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},un.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},un.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},un.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||v(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var ln={enumerable:!0,configurable:!0,get:k,set:k};function fn(t,e,n){ln.get=function(){return this[e][n]},ln.set=function(t){this[e][n]=t},Object.defineProperty(t,n,ln)}function pn(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&_t(!1);var i=function(i){o.push(i);var a=Dt(i,e,n,t);$t(r,i,a),i in t||fn(t,"_props",i)};for(var a in e)i(a);_t(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]="function"!=typeof e[n]?k:w(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;s(e=t._data="function"==typeof e?function(t,e){ct();try{return t.call(e,e)}catch(t){return Mt(t,e,"data()"),{}}finally{ut()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);for(;o--;){var i=n[o];r&&m(r,i)||(a=void 0,36!==(a=(i+"").charCodeAt(0))&&95!==a&&fn(t,"_data",i))}var a;Ct(e,!0)}(t):Ct(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=Y();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;r||(n[o]=new un(t,a||k,k,dn)),o in t||vn(t,o,i)}}(t,e.computed),e.watch&&e.watch!==Z&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)yn(t,n,r[o]);else yn(t,n,r)}}(t,e.watch)}var dn={lazy:!0};function vn(t,e,n){var r=!Y();"function"==typeof n?(ln.get=r?hn(e):mn(n),ln.set=k):(ln.get=n.get?r&&!1!==n.cache?hn(e):mn(n.get):k,ln.set=n.set||k),Object.defineProperty(t,e,ln)}function hn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),at.target&&e.depend(),e.value}}function mn(t){return function(){return t.call(this,this)}}function yn(t,e,n,r){return s(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var gn=0;function _n(t){var e=t.options;if(t.super){var n=_n(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}(t);r&&x(t.extendOptions,r),(e=t.options=Tt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function bn(t){this._init(t)}function Cn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name,a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Tt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)fn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)vn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,N.forEach(function(t){a[t]=n[t]}),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=x({},a.options),o[r]=a,a}}function $n(t){return t&&(t.Ctor.options.name||t.tag)}function wn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:(n=t,"[object RegExp]"===a.call(n)&&t.test(e));var n}function An(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=$n(a.componentOptions);s&&!e(s)&&xn(n,i,r,o)}}}function xn(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,v(n,e)}!function(e){e.prototype._init=function(e){var n=this;n._uid=gn++,n._isVue=!0,e&&e._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(n,e):n.$options=Tt(_n(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(n),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&We(t,e)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,r=e.$vnode=n._parentVnode,o=r&&r.context;e.$slots=se(n._renderChildren,o),e.$scopedSlots=t,e._c=function(t,n,r,o){return Le(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return Le(e,t,n,r,o,!0)};var i=r&&r.data;$t(e,"$attrs",i&&i.attrs||t,null,!0),$t(e,"$listeners",n._parentListeners||t,null,!0)}(n),Ze(n,"beforeCreate"),function(t){var e=ae(t.$options.inject,t);e&&(_t(!1),Object.keys(e).forEach(function(n){$t(t,n,e[n])}),_t(!0))}(n),pn(n),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(n),Ze(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(bn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=wt,t.prototype.$delete=At,t.prototype.$watch=function(t,e,n){if(s(e))return yn(this,t,e,n);(n=n||{}).user=!0;var r=new un(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){Mt(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(bn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((i=a[s])===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this._events[t];if(e){e=e.length>1?A(e):e;for(var n=A(arguments,1),r='event handler for "'+t+'"',o=0,i=e.length;o<i;o++)Ft(e[o],this,n,this,r)}return this}}(bn),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=Ke(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Ze(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||v(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Ze(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(bn),function(t){Oe(t.prototype),t.prototype.$nextTick=function(t){return Zt(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=ue(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{Fe=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){Mt(n,e,"render"),t=e._vnode}finally{Fe=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof lt||(t=pt()),t.parent=o,t}}(bn);var On=[String,RegExp,Array],kn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:On,exclude:On,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)xn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){An(t,function(t){return wn(e,t)})}),this.$watch("exclude",function(e){An(t,function(t){return!wn(e,t)})})},render:function(){var t=this.$slots.default,e=He(t),n=e&&e.componentOptions;if(n){var r=$n(n),o=this.include,i=this.exclude;if(o&&(!r||!wn(o,r))||i&&r&&wn(i,r))return e;var a=this.cache,s=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,v(s,c),s.push(c)):(a[c]=e,s.push(c),this.max&&s.length>parseInt(this.max)&&xn(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return L}};Object.defineProperty(t,"config",e),t.util={warn:ot,extend:x,mergeOptions:Tt,defineReactive:$t},t.set=wt,t.delete=At,t.nextTick=Zt,t.observable=function(t){return Ct(t),t},t.options=Object.create(null),N.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,x(t.options.components,kn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=A(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Tt(this.options,t),this}}(t),Cn(t),function(t){N.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&s(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(bn),Object.defineProperty(bn.prototype,"$isServer",{get:Y}),Object.defineProperty(bn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(bn,"FunctionalRenderContext",{value:ke}),bn.version="2.6.12";var Sn=p("style,class"),En=p("input,textarea,option,select,progress"),jn=p("contenteditable,draggable,spellcheck"),Tn=p("events,caret,typing,plaintext-only"),In=function(t,e){return Mn(e)||"false"===e?"false":"contenteditable"===t&&Tn(e)?e:"true"},Dn=p("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Nn="http://www.w3.org/1999/xlink",Pn=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Ln=function(t){return Pn(t)?t.slice(6,t.length):""},Mn=function(t){return null==t||!1===t};function Fn(t){for(var e=t.data,r=t,o=t;n(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(e=Rn(o.data,e));for(;n(r=r.parent);)r&&r.data&&(e=Rn(e,r.data));return function(t,e){if(n(t)||n(e))return Un(t,Hn(e));return""}(e.staticClass,e.class)}function Rn(t,e){return{staticClass:Un(t.staticClass,e.staticClass),class:n(t.class)?[t.class,e.class]:e.class}}function Un(t,e){return t?e?t+" "+e:t:e||""}function Hn(t){return Array.isArray(t)?function(t){for(var e,r="",o=0,i=t.length;o<i;o++)n(e=Hn(t[o]))&&""!==e&&(r&&(r+=" "),r+=e);return r}(t):i(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Bn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Vn=p("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),zn=p("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Wn=function(t){return Vn(t)||zn(t)};var qn=Object.create(null);var Kn=p("text,number,password,search,email,tel,url");var Xn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Bn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Gn={create:function(t,e){Zn(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Zn(t,!0),Zn(e))},destroy:function(t){Zn(t,!0)}};function Zn(t,e){var r=t.data.ref;if(n(r)){var o=t.context,i=t.componentInstance||t.elm,a=o.$refs;e?Array.isArray(a[r])?v(a[r],i):a[r]===i&&(a[r]=void 0):t.data.refInFor?Array.isArray(a[r])?a[r].indexOf(i)<0&&a[r].push(i):a[r]=[i]:a[r]=i}}var Jn=new lt("",{},[]),Qn=["create","activate","update","remove","destroy"];function Yn(t,o){return t.key===o.key&&(t.tag===o.tag&&t.isComment===o.isComment&&n(t.data)===n(o.data)&&function(t,e){if("input"!==t.tag)return!0;var r,o=n(r=t.data)&&n(r=r.attrs)&&r.type,i=n(r=e.data)&&n(r=r.attrs)&&r.type;return o===i||Kn(o)&&Kn(i)}(t,o)||r(t.isAsyncPlaceholder)&&t.asyncFactory===o.asyncFactory&&e(o.asyncFactory.error))}function tr(t,e,r){var o,i,a={};for(o=e;o<=r;++o)n(i=t[o].key)&&(a[i]=o);return a}var er={create:nr,update:nr,destroy:function(t){nr(t,Jn)}};function nr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Jn,a=e===Jn,s=or(t.data.directives,t.context),c=or(e.data.directives,e.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,ar(o,"update",e,t),o.def&&o.def.componentUpdated&&l.push(o)):(ar(o,"bind",e,t),o.def&&o.def.inserted&&u.push(o));if(u.length){var f=function(){for(var n=0;n<u.length;n++)ar(u[n],"inserted",e,t)};i?ne(e,"insert",f):f()}l.length&&ne(e,"postpatch",function(){for(var n=0;n<l.length;n++)ar(l[n],"componentUpdated",e,t)});if(!i)for(n in s)c[n]||ar(s[n],"unbind",t,t,a)}(t,e)}var rr=Object.create(null);function or(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=rr),o[ir(r)]=r,r.def=It(e.$options,"directives",r.name);return o}function ir(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function ar(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Mt(r,n.context,"directive "+t.name+" "+e+" hook")}}var sr=[Gn,er];function cr(t,r){var o=r.componentOptions;if(!(n(o)&&!1===o.Ctor.options.inheritAttrs||e(t.data.attrs)&&e(r.data.attrs))){var i,a,s=r.elm,c=t.data.attrs||{},u=r.data.attrs||{};for(i in n(u.__ob__)&&(u=r.data.attrs=x({},u)),u)a=u[i],c[i]!==a&&ur(s,i,a);for(i in(W||K)&&u.value!==c.value&&ur(s,"value",u.value),c)e(u[i])&&(Pn(i)?s.removeAttributeNS(Nn,Ln(i)):jn(i)||s.removeAttribute(i))}}function ur(t,e,n){t.tagName.indexOf("-")>-1?lr(t,e,n):Dn(e)?Mn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):jn(e)?t.setAttribute(e,In(e,n)):Pn(e)?Mn(n)?t.removeAttributeNS(Nn,Ln(e)):t.setAttributeNS(Nn,e,n):lr(t,e,n)}function lr(t,e,n){if(Mn(n))t.removeAttribute(e);else{if(W&&!q&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var fr={create:cr,update:cr};function pr(t,r){var o=r.elm,i=r.data,a=t.data;if(!(e(i.staticClass)&&e(i.class)&&(e(a)||e(a.staticClass)&&e(a.class)))){var s=Fn(r),c=o._transitionClasses;n(c)&&(s=Un(s,Hn(c))),s!==o._prevClass&&(o.setAttribute("class",s),o._prevClass=s)}}var dr,vr={create:pr,update:pr},hr="__r",mr="__c";function yr(t,e,n){var r=dr;return function o(){null!==e.apply(null,arguments)&&br(t,o,n,r)}}var gr=Bt&&!(G&&Number(G[1])<=53);function _r(t,e,n,r){if(gr){var o=rn,i=e;e=i._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=o||t.timeStamp<=0||t.target.ownerDocument!==document)return i.apply(this,arguments)}}dr.addEventListener(t,e,J?{capture:n,passive:r}:n)}function br(t,e,n,r){(r||dr).removeEventListener(t,e._wrapper||e,n)}function Cr(t,r){if(!e(t.data.on)||!e(r.data.on)){var o=r.data.on||{},i=t.data.on||{};dr=r.elm,function(t){if(n(t[hr])){var e=W?"change":"input";t[e]=[].concat(t[hr],t[e]||[]),delete t[hr]}n(t[mr])&&(t.change=[].concat(t[mr],t.change||[]),delete t[mr])}(o),ee(o,i,_r,br,yr,r.context),dr=void 0}}var $r,wr={create:Cr,update:Cr};function Ar(t,r){if(!e(t.data.domProps)||!e(r.data.domProps)){var o,i,a=r.elm,s=t.data.domProps||{},c=r.data.domProps||{};for(o in n(c.__ob__)&&(c=r.data.domProps=x({},c)),s)o in c||(a[o]="");for(o in c){if(i=c[o],"textContent"===o||"innerHTML"===o){if(r.children&&(r.children.length=0),i===s[o])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===o&&"PROGRESS"!==a.tagName){a._value=i;var u=e(i)?"":String(i);xr(a,u)&&(a.value=u)}else if("innerHTML"===o&&zn(a.tagName)&&e(a.innerHTML)){($r=$r||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var l=$r.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(i!==s[o])try{a[o]=i}catch(t){}}}}function xr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var r=t.value,o=t._vModifiers;if(n(o)){if(o.number)return f(r)!==f(e);if(o.trim)return r.trim()!==e.trim()}return r!==e}(t,e))}var Or={create:Ar,update:Ar},kr=y(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function Sr(t){var e=Er(t.style);return t.staticStyle?x(t.staticStyle,e):e}function Er(t){return Array.isArray(t)?O(t):"string"==typeof t?kr(t):t}var jr,Tr=/^--/,Ir=/\s*!important$/,Dr=function(t,e,n){if(Tr.test(e))t.style.setProperty(e,n);else if(Ir.test(n))t.style.setProperty($(e),n.replace(Ir,""),"important");else{var r=Pr(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},Nr=["Webkit","Moz","ms"],Pr=y(function(t){if(jr=jr||document.createElement("div").style,"filter"!==(t=_(t))&&t in jr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Nr.length;n++){var r=Nr[n]+e;if(r in jr)return r}});function Lr(t,r){var o=r.data,i=t.data;if(!(e(o.staticStyle)&&e(o.style)&&e(i.staticStyle)&&e(i.style))){var a,s,c=r.elm,u=i.staticStyle,l=i.normalizedStyle||i.style||{},f=u||l,p=Er(r.data.style)||{};r.data.normalizedStyle=n(p.__ob__)?x({},p):p;var d=function(t,e){var n,r={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=Sr(o.data))&&x(r,n);(n=Sr(t.data))&&x(r,n);for(var i=t;i=i.parent;)i.data&&(n=Sr(i.data))&&x(r,n);return r}(r,!0);for(s in f)e(d[s])&&Dr(c,s,"");for(s in d)(a=d[s])!==f[s]&&Dr(c,s,null==a?"":a)}}var Mr={create:Lr,update:Lr},Fr=/\s+/;function Rr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Fr).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Ur(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Fr).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Hr(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&x(e,Br(t.name||"v")),x(e,t),e}return"string"==typeof t?Br(t):void 0}}var Br=y(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Vr=H&&!q,zr="transition",Wr="animation",qr="transition",Kr="transitionend",Xr="animation",Gr="animationend";Vr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(qr="WebkitTransition",Kr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Xr="WebkitAnimation",Gr="webkitAnimationEnd"));var Zr=H?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Jr(t){Zr(function(){Zr(t)})}function Qr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Rr(t,e))}function Yr(t,e){t._transitionClasses&&v(t._transitionClasses,e),Ur(t,e)}function to(t,e,n){var r=no(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===zr?Kr:Gr,c=0,u=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++c>=a&&u()};setTimeout(function(){c<a&&u()},i+1),t.addEventListener(s,l)}var eo=/\b(transform|all)(,|$)/;function no(t,e){var n,r=window.getComputedStyle(t),o=(r[qr+"Delay"]||"").split(", "),i=(r[qr+"Duration"]||"").split(", "),a=ro(o,i),s=(r[Xr+"Delay"]||"").split(", "),c=(r[Xr+"Duration"]||"").split(", "),u=ro(s,c),l=0,f=0;return e===zr?a>0&&(n=zr,l=a,f=i.length):e===Wr?u>0&&(n=Wr,l=u,f=c.length):f=(n=(l=Math.max(a,u))>0?a>u?zr:Wr:null)?n===zr?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===zr&&eo.test(r[qr+"Property"])}}function ro(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return oo(e)+oo(t[n])}))}function oo(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function io(t,r){var o=t.elm;n(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var a=Hr(t.data.transition);if(!e(a)&&!n(o._enterCb)&&1===o.nodeType){for(var s=a.css,c=a.type,u=a.enterClass,l=a.enterToClass,p=a.enterActiveClass,d=a.appearClass,v=a.appearToClass,h=a.appearActiveClass,m=a.beforeEnter,y=a.enter,g=a.afterEnter,_=a.enterCancelled,b=a.beforeAppear,C=a.appear,$=a.afterAppear,w=a.appearCancelled,A=a.duration,x=qe,O=qe.$vnode;O&&O.parent;)x=O.context,O=O.parent;var k=!x._isMounted||!t.isRootInsert;if(!k||C||""===C){var S=k&&d?d:u,E=k&&h?h:p,j=k&&v?v:l,T=k&&b||m,D=k&&"function"==typeof C?C:y,N=k&&$||g,P=k&&w||_,L=f(i(A)?A.enter:A),M=!1!==s&&!q,F=co(D),R=o._enterCb=I(function(){M&&(Yr(o,j),Yr(o,E)),R.cancelled?(M&&Yr(o,S),P&&P(o)):N&&N(o),o._enterCb=null});t.data.show||ne(t,"insert",function(){var e=o.parentNode,n=e&&e._pending&&e._pending[t.key];n&&n.tag===t.tag&&n.elm._leaveCb&&n.elm._leaveCb(),D&&D(o,R)}),T&&T(o),M&&(Qr(o,S),Qr(o,E),Jr(function(){Yr(o,S),R.cancelled||(Qr(o,j),F||(so(L)?setTimeout(R,L):to(o,c,R)))})),t.data.show&&(r&&r(),D&&D(o,R)),M||F||R()}}}function ao(t,r){var o=t.elm;n(o._enterCb)&&(o._enterCb.cancelled=!0,o._enterCb());var a=Hr(t.data.transition);if(e(a)||1!==o.nodeType)return r();if(!n(o._leaveCb)){var s=a.css,c=a.type,u=a.leaveClass,l=a.leaveToClass,p=a.leaveActiveClass,d=a.beforeLeave,v=a.leave,h=a.afterLeave,m=a.leaveCancelled,y=a.delayLeave,g=a.duration,_=!1!==s&&!q,b=co(v),C=f(i(g)?g.leave:g),$=o._leaveCb=I(function(){o.parentNode&&o.parentNode._pending&&(o.parentNode._pending[t.key]=null),_&&(Yr(o,l),Yr(o,p)),$.cancelled?(_&&Yr(o,u),m&&m(o)):(r(),h&&h(o)),o._leaveCb=null});y?y(w):w()}function w(){$.cancelled||(!t.data.show&&o.parentNode&&((o.parentNode._pending||(o.parentNode._pending={}))[t.key]=t),d&&d(o),_&&(Qr(o,u),Qr(o,p),Jr(function(){Yr(o,u),$.cancelled||(Qr(o,l),b||(so(C)?setTimeout($,C):to(o,c,$)))})),v&&v(o,$),_||b||$())}}function so(t){return"number"==typeof t&&!isNaN(t)}function co(t){if(e(t))return!1;var r=t.fns;return n(r)?co(Array.isArray(r)?r[0]:r):(t._length||t.length)>1}function uo(t,e){!0!==e.data.show&&io(e)}var lo=function(t){var i,a,s={},c=t.modules,u=t.nodeOps;for(i=0;i<Qn.length;++i)for(s[Qn[i]]=[],a=0;a<c.length;++a)n(c[a][Qn[i]])&&s[Qn[i]].push(c[a][Qn[i]]);function l(t){var e=u.parentNode(t);n(e)&&u.removeChild(e,t)}function f(t,e,o,i,a,c,l){if(n(t.elm)&&n(c)&&(t=c[l]=vt(t)),t.isRootInsert=!a,!function(t,e,o,i){var a=t.data;if(n(a)){var c=n(t.componentInstance)&&a.keepAlive;if(n(a=a.hook)&&n(a=a.init)&&a(t,!1),n(t.componentInstance))return d(t,e),v(o,t.elm,i),r(c)&&function(t,e,r,o){for(var i,a=t;a.componentInstance;)if(a=a.componentInstance._vnode,n(i=a.data)&&n(i=i.transition)){for(i=0;i<s.activate.length;++i)s.activate[i](Jn,a);e.push(a);break}v(r,t.elm,o)}(t,e,o,i),!0}}(t,e,o,i)){var f=t.data,p=t.children,m=t.tag;n(m)?(t.elm=t.ns?u.createElementNS(t.ns,m):u.createElement(m,t),g(t),h(t,p,e),n(f)&&y(t,e),v(o,t.elm,i)):r(t.isComment)?(t.elm=u.createComment(t.text),v(o,t.elm,i)):(t.elm=u.createTextNode(t.text),v(o,t.elm,i))}}function d(t,e){n(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,m(t)?(y(t,e),g(t)):(Zn(t),e.push(t))}function v(t,e,r){n(t)&&(n(r)?u.parentNode(r)===t&&u.insertBefore(t,e,r):u.appendChild(t,e))}function h(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r);else o(t.text)&&u.appendChild(t.elm,u.createTextNode(String(t.text)))}function m(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return n(t.tag)}function y(t,e){for(var r=0;r<s.create.length;++r)s.create[r](Jn,t);n(i=t.data.hook)&&(n(i.create)&&i.create(Jn,t),n(i.insert)&&e.push(t))}function g(t){var e;if(n(e=t.fnScopeId))u.setStyleScope(t.elm,e);else for(var r=t;r;)n(e=r.context)&&n(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e),r=r.parent;n(e=qe)&&e!==t.context&&e!==t.fnContext&&n(e=e.$options._scopeId)&&u.setStyleScope(t.elm,e)}function _(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function b(t){var e,r,o=t.data;if(n(o))for(n(e=o.hook)&&n(e=e.destroy)&&e(t),e=0;e<s.destroy.length;++e)s.destroy[e](t);if(n(e=t.children))for(r=0;r<t.children.length;++r)b(t.children[r])}function C(t,e,r){for(;e<=r;++e){var o=t[e];n(o)&&(n(o.tag)?($(o),b(o)):l(o.elm))}}function $(t,e){if(n(e)||n(t.data)){var r,o=s.remove.length+1;for(n(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,o),n(r=t.componentInstance)&&n(r=r._vnode)&&n(r.data)&&$(r,e),r=0;r<s.remove.length;++r)s.remove[r](t,e);n(r=t.data.hook)&&n(r=r.remove)?r(t,e):e()}else l(t.elm)}function w(t,e,r,o){for(var i=r;i<o;i++){var a=e[i];if(n(a)&&Yn(t,a))return i}}function A(t,o,i,a,c,l){if(t!==o){n(o.elm)&&n(a)&&(o=a[c]=vt(o));var p=o.elm=t.elm;if(r(t.isAsyncPlaceholder))n(o.asyncFactory.resolved)?k(t.elm,o,i):o.isAsyncPlaceholder=!0;else if(r(o.isStatic)&&r(t.isStatic)&&o.key===t.key&&(r(o.isCloned)||r(o.isOnce)))o.componentInstance=t.componentInstance;else{var d,v=o.data;n(v)&&n(d=v.hook)&&n(d=d.prepatch)&&d(t,o);var h=t.children,y=o.children;if(n(v)&&m(o)){for(d=0;d<s.update.length;++d)s.update[d](t,o);n(d=v.hook)&&n(d=d.update)&&d(t,o)}e(o.text)?n(h)&&n(y)?h!==y&&function(t,r,o,i,a){for(var s,c,l,p=0,d=0,v=r.length-1,h=r[0],m=r[v],y=o.length-1,g=o[0],b=o[y],$=!a;p<=v&&d<=y;)e(h)?h=r[++p]:e(m)?m=r[--v]:Yn(h,g)?(A(h,g,i,o,d),h=r[++p],g=o[++d]):Yn(m,b)?(A(m,b,i,o,y),m=r[--v],b=o[--y]):Yn(h,b)?(A(h,b,i,o,y),$&&u.insertBefore(t,h.elm,u.nextSibling(m.elm)),h=r[++p],b=o[--y]):Yn(m,g)?(A(m,g,i,o,d),$&&u.insertBefore(t,m.elm,h.elm),m=r[--v],g=o[++d]):(e(s)&&(s=tr(r,p,v)),e(c=n(g.key)?s[g.key]:w(g,r,p,v))?f(g,i,t,h.elm,!1,o,d):Yn(l=r[c],g)?(A(l,g,i,o,d),r[c]=void 0,$&&u.insertBefore(t,l.elm,h.elm)):f(g,i,t,h.elm,!1,o,d),g=o[++d]);p>v?_(t,e(o[y+1])?null:o[y+1].elm,o,d,y,i):d>y&&C(r,p,v)}(p,h,y,i,l):n(y)?(n(t.text)&&u.setTextContent(p,""),_(p,null,y,0,y.length-1,i)):n(h)?C(h,0,h.length-1):n(t.text)&&u.setTextContent(p,""):t.text!==o.text&&u.setTextContent(p,o.text),n(v)&&n(d=v.hook)&&n(d=d.postpatch)&&d(t,o)}}}function x(t,e,o){if(r(o)&&n(t.parent))t.parent.data.pendingInsert=e;else for(var i=0;i<e.length;++i)e[i].data.hook.insert(e[i])}var O=p("attrs,class,staticClass,staticStyle,key");function k(t,e,o,i){var a,s=e.tag,c=e.data,u=e.children;if(i=i||c&&c.pre,e.elm=t,r(e.isComment)&&n(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(n(c)&&(n(a=c.hook)&&n(a=a.init)&&a(e,!0),n(a=e.componentInstance)))return d(e,o),!0;if(n(s)){if(n(u))if(t.hasChildNodes())if(n(a=c)&&n(a=a.domProps)&&n(a=a.innerHTML)){if(a!==t.innerHTML)return!1}else{for(var l=!0,f=t.firstChild,p=0;p<u.length;p++){if(!f||!k(f,u[p],o,i)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else h(e,u,o);if(n(c)){var v=!1;for(var m in c)if(!O(m)){v=!0,y(e,o);break}!v&&c.class&&Qt(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,o,i,a){if(!e(o)){var c,l=!1,p=[];if(e(t))l=!0,f(o,p);else{var d=n(t.nodeType);if(!d&&Yn(t,o))A(t,o,p,null,null,a);else{if(d){if(1===t.nodeType&&t.hasAttribute(D)&&(t.removeAttribute(D),i=!0),r(i)&&k(t,o,p))return x(o,p,!0),t;c=t,t=new lt(u.tagName(c).toLowerCase(),{},[],void 0,c)}var v=t.elm,h=u.parentNode(v);if(f(o,p,v._leaveCb?null:h,u.nextSibling(v)),n(o.parent))for(var y=o.parent,g=m(o);y;){for(var _=0;_<s.destroy.length;++_)s.destroy[_](y);if(y.elm=o.elm,g){for(var $=0;$<s.create.length;++$)s.create[$](Jn,y);var w=y.data.hook.insert;if(w.merged)for(var O=1;O<w.fns.length;O++)w.fns[O]()}else Zn(y);y=y.parent}n(h)?C([t],0,0):n(t.tag)&&b(t)}}return x(o,p,l),o.elm}n(t)&&b(t)}}({nodeOps:Xn,modules:[fr,vr,wr,Or,Mr,H?{create:uo,activate:uo,remove:function(t,e){!0!==t.data.show?ao(t,e):e()}}:{}].concat(sr)});q&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&_o(t,"input")});var fo={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ne(n,"postpatch",function(){fo.componentUpdated(t,e,n)}):po(t,e,n.context),t._vOptions=[].map.call(t.options,mo)):("textarea"===n.tag||Kn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",yo),t.addEventListener("compositionend",go),t.addEventListener("change",go),q&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){po(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,mo);if(o.some(function(t,e){return!j(t,r[e])}))(t.multiple?e.value.some(function(t){return ho(t,o)}):e.value!==e.oldValue&&ho(e.value,o))&&_o(t,"change")}}};function po(t,e,n){vo(t,e,n),(W||K)&&setTimeout(function(){vo(t,e,n)},0)}function vo(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=t.options.length;s<c;s++)if(a=t.options[s],o)i=T(r,mo(a))>-1,a.selected!==i&&(a.selected=i);else if(j(mo(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));o||(t.selectedIndex=-1)}}function ho(t,e){return e.every(function(e){return!j(e,t)})}function mo(t){return"_value"in t?t._value:t.value}function yo(t){t.target.composing=!0}function go(t){t.target.composing&&(t.target.composing=!1,_o(t.target,"input"))}function _o(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function bo(t){return!t.componentInstance||t.data&&t.data.transition?t:bo(t.componentInstance._vnode)}var Co={model:fo,show:{bind:function(t,e,n){var r=e.value,o=(n=bo(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,io(n,function(){t.style.display=i})):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=bo(n)).data&&n.data.transition?(n.data.show=!0,r?io(n,function(){t.style.display=t.__vOriginalDisplay}):ao(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},$o={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wo(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?wo(He(e.children)):t}function Ao(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[_(i)]=o[i];return e}function xo(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var Oo=function(t){return t.tag||Ue(t)},ko=function(t){return"show"===t.name},So={name:"transition",props:$o,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(Oo)).length){var r=this.mode,i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var a=wo(i);if(!a)return i;if(this._leaving)return xo(t,i);var s="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?s+"comment":s+a.tag:o(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var c=(a.data||(a.data={})).transition=Ao(this),u=this._vnode,l=wo(u);if(a.data.directives&&a.data.directives.some(ko)&&(a.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(a,l)&&!Ue(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=x({},c);if("out-in"===r)return this._leaving=!0,ne(f,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),xo(t,i);if("in-out"===r){if(Ue(a))return u;var p,d=function(){p()};ne(c,"afterEnter",d),ne(c,"enterCancelled",d),ne(f,"delayLeave",function(t){p=t})}}return i}}},Eo=x({tag:String,moveClass:String},$o);function jo(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function To(t){t.data.newPos=t.elm.getBoundingClientRect()}function Io(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete Eo.mode;var Do={Transition:So,TransitionGroup:{props:Eo,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var o=Ke(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,o(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=Ao(this),s=0;s<o.length;s++){var c=o[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?u.push(p):l.push(p)}this.kept=t(e,null,u),this.removed=l}return t(e,null,i)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(jo),t.forEach(To),t.forEach(Io),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Qr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Kr,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Kr,t),n._moveCb=null,Yr(n,e))})}}))},methods:{hasMove:function(t,e){if(!Vr)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){Ur(n,t)}),Rr(n,e),n.style.display="none",this.$el.appendChild(n);var r=no(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};bn.config.mustUseProp=function(t,e,n){return"value"===n&&En(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},bn.config.isReservedTag=Wn,bn.config.isReservedAttr=Sn,bn.config.getTagNamespace=function(t){return zn(t)?"svg":"math"===t?"math":void 0},bn.config.isUnknownElement=function(t){if(!H)return!0;if(Wn(t))return!1;if(t=t.toLowerCase(),null!=qn[t])return qn[t];var e=document.createElement(t);return t.indexOf("-")>-1?qn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:qn[t]=/HTMLUnknownElement/.test(e.toString())},x(bn.options.directives,Co),x(bn.options.components,Do),bn.prototype.__patch__=H?lo:k,bn.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=pt),Ze(t,"beforeMount"),r=function(){t._update(t._render(),n)},new un(t,r,k,{before:function(){t._isMounted&&!t._isDestroyed&&Ze(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Ze(t,"mounted")),t}(this,t=t&&H?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},H&&setTimeout(function(){L.devtools&&tt&&tt.emit("init",bn)},0),module.exports=bn;
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":2}],7:[function(require,module,exports){
var inserted = exports.cache = {}

function noop () {}

exports.insert = function (css) {
  if (inserted[css]) return noop
  inserted[css] = true

  var elem = document.createElement('style')
  elem.setAttribute('type', 'text/css')

  if ('textContent' in elem) {
    elem.textContent = css
  } else {
    elem.styleSheet.cssText = css
  }

  document.getElementsByTagName('head')[0].appendChild(elem)
  return function () {
    document.getElementsByTagName('head')[0].removeChild(elem)
    inserted[css] = false
  }
}

},{}],8:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var API = function API() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      service = _ref.service,
      plugin = _ref.plugin;

  this.addFormComponents = function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        layerId = _ref2.layerId,
        _ref2$components = _ref2.components,
        components = _ref2$components === undefined ? [] : _ref2$components;

    service.addFormComponents({
      layerId: layerId,
      components: components
    });
  };

  this.getEditableLayersId = function () {
    return Object.keys(service.getEditableLayers());
  };

  this.getSession = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return service.getSession(options);
  };

  this.getFeature = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return service.getFeature(options);
  };

  /**
   * Methos to subscrive editing event
   * @param event
   * @param fnc
   * @returns {Promise<PushSubscription>}
   */
  this.subscribe = function (event, fnc) {
    return service.subscribe(event, fnc);
  };

  /**
   * Method to unsubscrive editing event
   * @param event
   * @param fnc
   * @returns {Promise<PushSubscription>}
   */
  this.unsubscribe = function (event, fnc) {
    return service.unsubscribe(event, fnc);
  };

  /**
   * Show editing panel
   * @param options
   */
  this.showPanel = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var toolboxes = options.toolboxes;

    toolboxes && Array.isArray(toolboxes) && service.getToolBoxes().forEach(function (toolbox) {
      return toolbox.setShow(toolboxes.indexOf(toolbox.getId()) !== -1);
    });
    service.getPlugin().showEditingPanel(options);
  };

  /**
   * Method to hide Editing Panel
   * @param options
   */
  this.hidePanel = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    service.getPlugin().hideEditingPanel(options);
  };

  /**
   * Return Toolbx by id if exist
   * @param toolboxId
   * @returns {*}
   */
  this.getToolBoxById = function (toolboxId) {
    return service.getToolBoxById(toolboxId);
  };

  /**
   * Method to start editing api
   * @param layerId
   * @param options
   * @returns {Promise<unknown>}
   */
  this.startEditing = function (layerId) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var tools = options.tools,
        feature = options.feature,
        _options$selected = options.selected,
        selected = _options$selected === undefined ? true : _options$selected,
        title = options.title,
        _options$disablemapco = options.disablemapcontrols,
        disablemapcontrols = _options$disablemapco === undefined ? false : _options$disablemapco;

    return new Promise(function (resolve, reject) {
      // get toolbox related to layer id
      var toolbox = service.getToolBoxById(layerId);
      //setselected
      if (toolbox) {
        toolbox.setSelected(selected);
        // set seletcted toolbox
        selected && service.setSelectedToolbox(toolbox);
        title && toolbox.setTitle(title);
        // start editing toolbox (options contain also filter type)
        toolbox.start(options).then(function (data) {
          //disablemapcontrols in conflict
          disablemapcontrols && service.disableMapControlsConflict(true);
          //opts contain information about start editing has features loaded
          data ? resolve({
            toolbox: toolbox,
            data: data
          }) : resolve(toolbox);
        }).fail(function (err) {
          reject(err);
        });
      } else reject();
    });
  };

  /*
  * Save mode editing : 
  * default: each change is save temporary. Press floppy or stoop editing toolbox to save data permanently on database
  * autosave: each change we ahe to commit
  * */
  this.setSaveConfig = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    service.setSaveConfig(options);
  };

  this.addNewFeature = function (layerId) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return service.addNewFeature(layerId, options);
  };

  /**
   * Method to Stop editing on layerId
   * @param layerId
   * @param options
   * @returns {Promise<unknown>}
   */
  this.stopEditing = function (layerId) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      var toolbox = service.getToolBoxById(layerId);
      toolbox.stop(options).then(resolve).fail(reject);
    });
  };

  this.commitChanges = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return service.commit(options);
  };

  /**
   *   used to reset default toolbox state modified by other plugin
   *
  */
  this.resetDefault = function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref3$plugin = _ref3.plugin,
        plugin = _ref3$plugin === undefined ? true : _ref3$plugin,
        _ref3$toolboxes = _ref3.toolboxes,
        toolboxes = _ref3$toolboxes === undefined ? true : _ref3$toolboxes;

    toolboxes && service.getToolBoxes().forEach(function (toolbox) {
      toolbox.resetDefault(options);
    });
    plugin && service.resetDefault();
  };

  /**
   * Method to setup permanenty contraints on editing as filter to get features, filter layers to edit etc...
   * @param options
   */
  this.setApplicationEditingConstraints = function () {
    var constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    service.setApplicationEditingConstraints(constraints);
  };

  /**
   *
   */
  this.getMapService = function () {
    return service.getMapService();
  };
};

exports.default = API;

},{}],9:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".choose-and-zoom-to-feature[data-v-3c5d6465]{\n display: flex;\n flex-direction: column;\n justify-content: space-between;\n}\n\n#editing-layers-choose-feature .editing-choose-feature-radio-input[data-v-3c5d6465]{\n  align-items: center;\n  padding: 5px;\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #eeeeee;\n}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var G3W_FID = g3wsdk.constant.G3W_FID;
var GUI = g3wsdk.gui.GUI;
var getAlphanumericPropertiesFromFeature = g3wsdk.core.geoutils.getAlphanumericPropertiesFromFeature;
exports.default = {
  name: 'choosefeature',
  data: function data() {
    return {
      feature: this.$options.feature
    };
  },

  methods: {
    selectFeature: function selectFeature(feature) {
      this.feature.splice(0);
      this.feature.push(feature);
    },
    getAttributesFeature: function getAttributesFeature(feature) {
      return getAlphanumericPropertiesFromFeature(feature.getProperties()).map(function (attribute) {
        return {
          attribute: attribute,
          value: feature.get(attribute)
        };
      }).filter(function (attributeObject) {
        return attributeObject.attribute !== G3W_FID;
      });
    },
    zoomToFeature: function zoomToFeature(feature) {
      var mapService = GUI.getService('map');
      mapService.seSelectionLayerVisible(false);
      mapService.zoomToFeatures([feature], {
        highlight: true,
        duration: 1000
      }).then(function () {
        return mapService.seSelectionLayerVisible(true);
      });
    }
  },
  mounted: function mounted() {
    GUI.closeContent();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"editing-layers-choose-feature"}},_vm._l((_vm.$options.features),function(feature,index){return _c('div',{staticClass:"editing-choose-feature-radio-input"},[_c('section',{staticClass:"choose-and-zoom-to-feature"},[_c('div',[_c('input',{staticClass:"magic-radio",attrs:{"id":("choose_feature_" + index),"name":"radio","type":"radio"},on:{"click":function($event){$event.stopPropagation();return _vm.selectFeature(feature)}}}),_vm._v(" "),_c('label',{staticStyle:{"color":"transparent"},attrs:{"for":("choose_feature_" + index)}},[_vm._v(_vm._s(feature.getId()))])]),_vm._v(" "),_c('div',{staticClass:"skin-color",class:_vm.g3wtemplate.font['marker'],staticStyle:{"padding-left":"3px","font-size":"1.3em","cursor":"pointer","margin-top":"10px"},on:{"click":function($event){$event.stopPropagation();return _vm.zoomToFeature(feature)}}})]),_vm._v(" "),_c('section',{staticStyle:{"overflow-x":"auto","display":"flex"}},_vm._l((_vm.getAttributesFeature(feature)),function(ref){
var attribute = ref.attribute;
var value = ref.value;
return _c('div',{staticStyle:{"display":"flex","flex-direction":"column","justify-content":"space-between","padding":"5px"}},[_c('span',{staticStyle:{"font-weight":"bold","margin-bottom":"10px"}},[_vm._v(_vm._s(_vm.$options.attributes[attribute]))]),_vm._v(" "),_c('span',{staticStyle:{"align-self":"start","white-space":"nowrap"}},[_vm._v(_vm._s(value))])])}),0)])}),0)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-3c5d6465"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-3c5d6465", __vue__options__)
  } else {
    hotAPI.reload("data-v-3c5d6465", __vue__options__)
  }
})()}

},{"vue":5,"vue-hot-reload-api":3,"vueify/lib/insert-css":7}],10:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var G3W_FID = g3wsdk.constant.G3W_FID;
var GUI = g3wsdk.gui.GUI;
var getAlphanumericPropertiesFromFeature = g3wsdk.core.geoutils.getAlphanumericPropertiesFromFeature;
var MapLayersStoreRegistry = g3wsdk.core.map.MapLayersStoreRegistry;
exports.default = {
  name: 'Copyfeaturesfromotherlayers',
  data: function data() {
    return {
      selectedFeatures: this.$options.selectedFeatures
    };
  },

  methods: {
    getAttributesFeature: function getAttributesFeature(feature, layerId) {
      var _$options$layers$laye = this.$options.layers[layerId],
          external = _$options$layers$laye.external,
          fields = _$options$layers$laye.fields;

      return getAlphanumericPropertiesFromFeature(feature.getProperties()).filter(function (property) {
        return property !== G3W_FID;
      }).map(function (attribute) {
        return {
          attribute: !external ? fields.find(function (field) {
            return field.name === attribute;
          }).label : attribute,
          value: feature.get(attribute)
        };
      });
    },
    selectFeature: function selectFeature(feature) {
      var find = this.selectedFeatures.find(function (selectedFeature) {
        return selectedFeature === feature;
      });
      if (find) this.selectedFeatures = this.selectedFeatures.filter(function (selectedFeature) {
        return selectedFeature !== feature;
      });else this.selectedFeatures.push(feature);
    },
    getLayerTitle: function getLayerTitle(layerId) {
      if (MapLayersStoreRegistry.getLayerById(layerId)) return MapLayersStoreRegistry.getLayerById(layerId).getTitle();else return GUI.getService('map').getLayerById(layerId).get('name');
    },
    zoomToFeature: function zoomToFeature(feature) {
      var mapService = GUI.getService('map');
      mapService.seSelectionLayerVisible(false);
      mapService.zoomToFeatures([feature], {
        highlight: true,
        duration: 1000
      }).then(function () {
        return mapService.seSelectionLayerVisible(true);
      });
    }
  },
  mounted: function mounted() {
    GUI.closeContent();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"editing-layers-features"},_vm._l((Object.keys(_vm.$options.layers)),function(layerId){return _c('div',[_c('div',{staticClass:"skin-color",staticStyle:{"font-weight":"bold","font-size":"1.2em"}},[_vm._v(_vm._s(_vm.getLayerTitle(layerId)))]),_vm._v(" "),_c('divider'),_vm._v(" "),_c('div',{staticClass:"copy-features-for-layer-content",staticStyle:{"overflow-x":"auto"}},_vm._l((_vm.$options.layers[layerId].features),function(feature,index){return _c('div',{staticStyle:{"padding":"5px","position":"relative","display":"flex","align-items":"baseline","border-bottom":"1px solid #eeeeee"}},[_c('div',{staticStyle:{"display":"flex","flex-direction":"column","border-right":"1px solid #eeeeee"}},[_c('div',{staticClass:"skin-color",class:_vm.g3wtemplate.font['marker'],staticStyle:{"padding":"0 5px 15px 5px","font-size":"1.1em","cursor":"pointer","margin-right":"5px"},on:{"click":function($event){$event.stopPropagation();return _vm.zoomToFeature(feature)}}}),_vm._v(" "),_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('plugins.editing.steps.help.select_elements'),expression:"'plugins.editing.steps.help.select_elements'",arg:"right",modifiers:{"create":true}}]},[_c('input',{staticClass:"magic-checkbox",attrs:{"id":(layerId + "_" + index + "_select_feature_from_layer"),"type":"checkbox"},on:{"click":function($event){$event.stopPropagation();return _vm.selectFeature(feature)}}}),_vm._v(" "),_c('label',{staticStyle:{"color":"#FFFFFF"},attrs:{"for":(layerId + "_" + index + "_select_feature_from_layer")}},[_vm._v(" "+_vm._s(feature.getId())+" ")])])]),_vm._v(" "),_vm._l((_vm.getAttributesFeature(feature, layerId)),function(ref){
var attribute = ref.attribute;
var value = ref.value;
return _c('div',{staticStyle:{"display":"flex","flex-direction":"column","padding":"10px"}},[_c('span',{staticStyle:{"font-weight":"bold","margin-bottom":"10px"}},[_vm._v(_vm._s(attribute))]),_vm._v(" "),_c('span',{staticStyle:{"align-self":"start"}},[_vm._v(_vm._s(value))])])})],2)}),0)],1)}),0)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0a61c6b7", __vue__options__)
  } else {
    hotAPI.reload("data-v-0a61c6b7", __vue__options__)
  }
})()}

},{"vue":5,"vue-hot-reload-api":3}],11:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var G3W_FID = g3wsdk.constant.G3W_FID;
var GUI = g3wsdk.gui.GUI;
var getAlphanumericPropertiesFromFeature = g3wsdk.core.geoutils.getAlphanumericPropertiesFromFeature;
var MapLayersStoreRegistry = g3wsdk.core.map.MapLayersStoreRegistry;
exports.default = {
  name: 'Copyfeaturesfromotherlayers',
  data: function data() {
    return {
      features: this.$options.features,
      selectfeature: null,
      selectedFeatures: this.$options.selectedFeatures
    };
  },

  methods: {
    getAttributesFeature: function getAttributesFeature(feature) {
      var fields = this.$options.fields;

      return getAlphanumericPropertiesFromFeature(feature.getProperties()).filter(function (property) {
        return property !== G3W_FID;
      }).map(function (attribute) {
        return {
          attribute: fields ? fields.find(function (field) {
            return field.name === attribute;
          }).label : attribute,
          value: feature.get(attribute)
        };
      });
    },
    getLayerTitle: function getLayerTitle(layerId) {
      return MapLayersStoreRegistry.getLayerById(layerId).getTitle();
    },
    zoomToFeature: function zoomToFeature(feature) {
      var mapService = GUI.getService('map');
      mapService.seSelectionLayerVisible(false);
      mapService.zoomToFeatures([feature], {
        highlight: true,
        duration: 1000
      }).then(function () {
        return mapService.seSelectionLayerVisible(true);
      });
    }
  },
  watch: {
    selectfeature: function selectfeature(feature) {
      this.selectedFeatures.splice(0, 1, feature);
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"editing-layers-features"},[_c('div',{staticClass:"copy-features-for-layer-content",staticStyle:{"overflow-x":"auto"}},_vm._l((_vm.features),function(feature,index){return _c('div',{staticStyle:{"padding":"5px","position":"relative","display":"flex","align-items":"baseline","border-bottom":"1px solid #eeeeee"}},[_c('div',{staticStyle:{"display":"flex","flex-direction":"column","border-right":"1px solid #eeeeee"}},[_c('div',{staticClass:"skin-color",class:_vm.g3wtemplate.font['marker'],staticStyle:{"padding":"0 5px 15px 5px","font-size":"1.1em","cursor":"pointer","margin-right":"5px"},on:{"click":function($event){$event.stopPropagation();return _vm.zoomToFeature(feature)}}}),_vm._v(" "),_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('plugins.editing.steps.help.select_elements'),expression:"'plugins.editing.steps.help.select_elements'",arg:"right",modifiers:{"create":true}}]},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.selectfeature),expression:"selectfeature"}],staticClass:"magic-radio",attrs:{"id":(_vm.layerId + "_" + index + "_select_feature_from_layer"),"name":"radio","type":"radio"},domProps:{"value":feature,"checked":_vm._q(_vm.selectfeature,feature)},on:{"change":function($event){_vm.selectfeature=feature}}}),_vm._v(" "),_c('label',{staticStyle:{"color":"#FFFFFF"},attrs:{"for":(_vm.layerId + "_" + index + "_select_feature_from_layer")}},[_vm._v(_vm._s(index))])])]),_vm._v(" "),_vm._l((_vm.getAttributesFeature(feature)),function(ref){
var attribute = ref.attribute;
var value = ref.value;
return _c('div',{staticStyle:{"display":"flex","flex-direction":"column","padding":"10px"}},[_c('span',{staticStyle:{"font-weight":"bold","margin-bottom":"10px"}},[_vm._v(_vm._s(attribute))]),_vm._v(" "),_c('span',{staticStyle:{"align-self":"start"}},[_vm._v(_vm._s(value))])])})],2)}),0)])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-9d236326", __vue__options__)
  } else {
    hotAPI.reload("data-v-9d236326", __vue__options__)
  }
})()}

},{"vue":5,"vue-hot-reload-api":3}],12:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Toolbox = require('./Toolbox.vue');

var _Toolbox2 = _interopRequireDefault(_Toolbox);

var _SelectEditingLayers = require('./SelectEditingLayers.vue');

var _SelectEditingLayers2 = _interopRequireDefault(_SelectEditingLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GUI = g3wsdk.gui.GUI;
var t = g3wsdk.core.i18n.tPlugin;
var ApplicationState = g3wsdk.core.ApplicationState;
exports.default = {
  name: 'Editing',
  data: function data() {
    return {
      saving: false };
  },

  components: {
    toolbox: _Toolbox2.default,
    selectlayers: _SelectEditingLayers2.default
  },
  transitions: { 'addremovetransition': 'showhide' },
  methods: {
    undo: function undo() {
      this.$options.service.undo();
    },
    redo: function redo() {
      this.$options.service.redo();
    },
    commit: function commit(toolboxId) {
      var _this = this;

      this.saving = true;
      var toolbox = this.$options.service.getToolBoxById(toolboxId);
      this.$options.service.commit({
        toolbox: toolbox,
        modal: false
      }).always(function () {
        return _this.saving = false;
      });
    },
    saveAll: function saveAll() {},
    startToolBox: function startToolBox(toolboxId) {
      var toolbox = this._getToolBoxById(toolboxId);
      ApplicationState.online && toolbox.canEdit() && toolbox.start();
    },
    stopToolBox: function stopToolBox(toolboxId) {
      var toolbox = this._getToolBoxById(toolboxId);
      if (toolbox.state.editing.history.commit) this.$options.service.commit().always(function () {
        return toolbox.stop();
      });else toolbox.stop();
    },
    saveToolBox: function saveToolBox(toolboxId) {
      var toolbox = this._getToolBoxById(toolboxId);
      toolbox.save();
    },
    _setActiveToolOfToolbooxSelected: function _setActiveToolOfToolbooxSelected(toolId, toolboxId) {
      var toolbox = this._getToolBoxById(toolboxId);
      this.state.toolboxidactivetool = toolboxId;
      var tool = toolbox.getToolById(toolId);
      toolbox.setActiveTool(tool);
    },
    startActiveTool: function startActiveTool(toolId, toolboxId) {
      var _this2 = this;

      if (this.state.toolboxidactivetool && toolboxId !== this.state.toolboxidactivetool) {
        var dirtyToolBox = this.state.toolboxidactivetool;
        this._checkDirtyToolBoxes(dirtyToolBox).then(function (toolbox) {
          toolbox && toolbox.stopActiveTool();
          _this2._setActiveToolOfToolbooxSelected(toolId, toolboxId);
        });
      } else this._setActiveToolOfToolbooxSelected(toolId, toolboxId);
    },
    stopActiveTool: function stopActiveTool(toolboxId) {
      var toolbox = this._getToolBoxById(toolboxId);
      toolbox.stopActiveTool();
    },
    setSelectedToolbox: function setSelectedToolbox(toolboxId) {
      var service = this.$options.service;
      var toolbox = this._getToolBoxById(toolboxId);
      var toolboxes = service.getToolBoxes();
      var toolboxSelected = toolboxes.find(function (toolbox) {
        return toolbox.isSelected();
      });
      toolboxSelected && toolboxSelected.setSelected(false);
      toolbox.setSelected(true);
      this.state.toolboxselected = toolbox;
      if (toolbox.getDependencies().length) {
        this.state.message = "<div>\n" + t("editing.messages.change_toolbox_relation") + "\n" + "</div>";
      } else {
        this.state.message = null;
      }
    },
    _checkDirtyToolBoxes: function _checkDirtyToolBoxes(toolboxId) {
      return this.$options.service.commitDirtyToolBoxes(toolboxId);
    },
    _getToolBoxById: function _getToolBoxById(toolboxId) {
      var service = this.$options.service;
      var toolbox = service.getToolBoxById(toolboxId);
      return toolbox;
    },
    _enableEditingButtons: function _enableEditingButtons(bool) {
      this.editingButtonsEnabled = !bool;
    }
  },
  computed: {
    message: function message() {
      var message = "";
      return message;
    },

    canCommit: function canCommit() {
      return this.$options.service.getSaveConfig().mode === 'default' && this.state.toolboxselected && this.state.toolboxselected.state.editing.history.commit && this.editingButtonsEnabled;
    },
    canUndo: function canUndo() {
      var toolbox = this.state.toolboxselected;
      var canUndo = toolbox && toolbox.state.editing.history.undo && this.editingButtonsEnabled;
      this.$options.service.fireEvent('canUndo', canUndo);
      return canUndo;
    },
    canRedo: function canRedo() {
      var toolbox = this.state.toolboxselected;
      var canRedo = toolbox && toolbox.state.editing.history.redo && this.editingButtonsEnabled;
      this.$options.service.fireEvent('canRedo', canRedo);
      return canRedo;
    }
  },
  watch: {
    canCommit: function canCommit(bool) {
      this.$options.service.registerLeavePage(bool);
    }
  },
  created: function created() {
    this.appState = ApplicationState;
    this.$options.service.registerOnLineOffLineEvent();
    GUI.closeContent();
    this.$options.service.setOpenEditingPanel(true);
    GUI.on('opencontent', this._enableEditingButtons);
    GUI.on('closeform', this._enableEditingButtons);
    GUI.on('closecontent', this._enableEditingButtons);
  },
  beforeDestroy: function beforeDestroy() {
    this.$options.service.setOpenEditingPanel(false);
    GUI.off('opencontent', this._enableEditingButtons);
    GUI.off('closeform', this._enableEditingButtons);
    GUI.off('closecontent', this._enableEditingButtons);
    this.$options.service.unregisterOnLineOffLineEvent();

    this.$options.service.fireEvent('closeeditingpanel');
    this.$options.service.onCloseEditingPanel();
    this.$options.service.clearAllLayersUniqueFieldsValues();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3w-editing-panel"},[_c('bar-loader',{attrs:{"loading":_vm.saving}}),_vm._v(" "),(!_vm.appState.online)?_c('div',{staticStyle:{"margin-bottom":"5px","padding":"5px","border-radius":"3px","background-color":"orange","color":"white","font-weight":"bold"},attrs:{"id":"onlineofflinemessage"}},[_c('div',{directives:[{name:"t-plugin",rawName:"v-t-plugin",value:('editing.messages.offline'),expression:"'editing.messages.offline'"}]})]):_vm._e(),_vm._v(" "),(_vm.showcommitbar)?_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.saving),expression:"saving"}],staticStyle:{"display":"flex","justify-content":"flex-end","margin-bottom":"5px"}},[_c('div',{staticClass:"editing-button",class:{'enabled' : _vm.canCommit },staticStyle:{"margin-right":"auto"},on:{"click":function($event){_vm.canCommit ? _vm.commit(): null}}},[_c('span',{staticClass:"editing-icon",class:_vm.g3wtemplate.font['save']})]),_vm._v(" "),_c('div',{staticClass:"editing-button ",class:{'enabled' : _vm.canUndo },on:{"click":function($event){_vm.canUndo ? _vm.undo(): null}}},[_c('span',{staticClass:"editing-icon",class:_vm.g3wtemplate.font['arrow-left']})]),_vm._v(" "),_c('div',{staticClass:"editing-button ",class:{'enabled' : _vm.canRedo },on:{"click":function($event){_vm.canRedo ? _vm.redo(): null}}},[_c('span',{staticClass:"editing-icon",class:_vm.g3wtemplate.font['arrow-right']})])]):_c('div',{staticStyle:{"height":"10px"}}),_vm._v(" "),(_vm.state.toolboxes.length > 1)?_c('selectlayers'):_vm._e(),_vm._v(" "),_c('div',{attrs:{"id":"toolboxes"}},_vm._l((_vm.state.toolboxes),function(toolbox){return _c('toolbox',{key:toolbox.id,attrs:{"state":toolbox,"resourcesurl":_vm.resourcesurl},on:{"setselectedtoolbox":_vm.setSelectedToolbox,"starttoolbox":_vm.startToolBox,"stoptoolbox":_vm.stopToolBox,"savetoolbox":_vm.saveToolBox,"setactivetool":_vm.startActiveTool,"stopactivetool":_vm.stopActiveTool}})}),1)],1)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-cb98e6ce", __vue__options__)
  } else {
    hotAPI.reload("data-v-cb98e6ce", __vue__options__)
  }
})()}

},{"./SelectEditingLayers.vue":15,"./Toolbox.vue":18,"vue":5,"vue-hot-reload-api":3}],13:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var t = g3wsdk.core.i18n.tPlugin;
var toRawType = g3wsdk.core.utils.toRawType;

var RelationService = require('../services/relationservice');
var Layer = g3wsdk.core.layer.Layer;
var _g3wsdk$gui$vue$Mixin = g3wsdk.gui.vue.Mixins,
    fieldsMixin = _g3wsdk$gui$vue$Mixin.fieldsMixin,
    resizeMixin = _g3wsdk$gui$vue$Mixin.resizeMixin,
    mediaMixin = _g3wsdk$gui$vue$Mixin.mediaMixin;


var relationsTable = void 0;

exports.default = {
  mixins: [mediaMixin, fieldsMixin, resizeMixin],
  name: 'g3w-relation',
  data: function data() {
    return {
      showAddVectorRelationTools: false,
      copylayerid: null,
      active: false,
      showallfieldsindex: null,
      tooltips: {
        add_relation: "plugins.editing.form.relations.tooltips.add_relation",
        link_relation: "plugins.editing.form.relations.tooltips.link_relation",
        open_relation_tool: "plugins.editing.form.relations.tooltips.open_relation_tools",
        unlink_relation: "plugins.editing.form.relations.tooltips.unlink_relation"
      },
      value: null,
      placeholdersearch: t('editing.search') + ' ...'
    };
  },

  methods: {
    resize: function resize() {
      if (this.active && this.$el.style.display !== 'none') {
        var formBodyHeight = $(".g3wform_body").height();
        var formFooterHeight = $('.g3wform_footer').height();
        var relationHeaderTitle = $(this.$refs.relation_header_title).outerHeight();
        var relationHeaderTools = $(this.$refs.relation_header_tools).outerHeight();
        var dataTables_scrollHead_Height = $(this.$el).find('.dataTables_scrollHead').outerHeight();
        var dataTables_paginate_Height = $(this.$el).find('.dataTables_paginate.paging_simple_numbers').outerHeight();
        var editingSaveAllFormHeight = $('.editing-save-all-form').outerHeight();
        var dataTables_scrollBody_Height = formBodyHeight - formFooterHeight - relationHeaderTitle - relationHeaderTools - dataTables_scrollHead_Height - dataTables_paginate_Height - editingSaveAllFormHeight;
        if (this.isVectorRelation && this.showAddVectorRelationTools) {
          dataTables_scrollBody_Height = dataTables_scrollBody_Height - $(this.$refs.relation_vector_tools).outerHeight();
        }
        $(this.$refs.relation_body).find('div.dataTables_scrollBody').height(dataTables_scrollBody_Height);
        relationsTable && relationsTable.columns.adjust();
      }
    },
    unlinkRelation: function unlinkRelation(index) {
      this._service.unlinkRelation(index);
    },
    copyFeatureFromOtherLayer: function copyFeatureFromOtherLayer() {
      var _this = this;

      var EditingService = require('../services/editingservice');
      var copyLayer = this.copyFeatureLayers.find(function (layerObj) {
        return layerObj.id === _this.copylayerid;
      });
      if (copyLayer.external) {
        var layer = EditingService.getMapService().getLayerById(this.copylayerid);
        this._service.addRelationFromOtherLayer({
          layer: layer,
          external: true
        });
      } else {
        var _layer = EditingService.getProjectLayerById(this.copylayerid);
        this._service.addRelationFromOtherLayer({
          layer: _layer,
          external: false
        });
      }
    },
    addVectorRelation: function addVectorRelation() {
      this._service.addRelation();
      this.showAddVectorRelationTools = false;
    },
    addRelationAndLink: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.isVectorRelation && this.copyFeatureLayers.length)) {
                  _context.next = 7;
                  break;
                }

                this.showAddVectorRelationTools = !this.showAddVectorRelationTools;
                _context.next = 4;
                return this.$nextTick();

              case 4:
                this.resize();
                _context.next = 8;
                break;

              case 7:
                this._service.addRelation();

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addRelationAndLink() {
        return _ref.apply(this, arguments);
      }

      return addRelationAndLink;
    }(),
    startTool: function startTool(relationtool, index) {
      this._service.startTool(relationtool, index).then(function () {}).catch(function (error) {
        return console.log(error);
      });
    },
    linkRelation: function linkRelation() {
      this._service.linkRelation();
    },
    updateExternalKeyValueRelations: function updateExternalKeyValueRelations(input) {
      this._service.updateExternalKeyValueRelations(input);
    },
    isRequired: function isRequired() {
      return this._service.isRequired();
    },
    relationAttributesSubset: function relationAttributesSubset(relation) {
      var attributes = [];
      var fields = this.relationsFields(relation);
      fields.forEach(function (field) {
        if (Array.isArray(field.value)) return;
        var label = field.label,
            value = field.value;

        attributes.push({
          label: label,
          value: value
        });
      });
      return attributes;
    },
    relationsAttributesSubsetLength: function relationsAttributesSubsetLength(relation) {
      return this.relationAttributesSubset(relation).length;
    },
    relationsFields: function relationsFields(relation) {
      return this._service.relationFields(relation);
    },
    showAllRelationFields: function showAllRelationFields(index) {
      this.showallfieldsindex = this.showallfieldsindex == index ? null : index;
    },
    showAllFieds: function showAllFieds(index) {
      return this.showallfieldsindex == index;
    },
    getRelationTools: function getRelationTools() {
      return this._service.getRelationTools();
    },
    isLink: function isLink(field) {
      return ['photo', 'link'].indexOf(this.getFieldType(field)) !== -1;
    },
    getValue: function getValue(value) {
      if (value && toRawType(value) === 'Object') value = value.value;else if (typeof value == 'string' && value.indexOf('_new_') === 0) value = null;
      this.value = value;
      return value;
    },
    getFileName: function getFileName(value) {
      return this.getValue(value).split('/').pop();
    },
    _setDataTableSearch: function _setDataTableSearch() {
      $('#filterRelation').on('keyup', function () {
        relationsTable.search($(this).val()).draw();
      });
    },
    _createDataTable: function _createDataTable() {
      relationsTable = $('.g3wform-relation-table').DataTable({
        "scrollX": true,
        "order": [2, 'asc'],
        "destroy": true,
        "scrollResize": true,
        "scrollCollapse": true,
        "pageLength": 10,
        columnDefs: [{ orderable: false, targets: [0, 1] }]
      });
      $(".dataTables_filter, .dataTables_length").hide();
      this._setDataTableSearch();
    },
    destroyTable: function destroyTable() {
      if (relationsTable) {
        relationsTable = relationsTable.destroy();
        relationsTable = null;
        $('#filterRelation').off();
      }
    }
  },
  computed: {
    relationsLength: function relationsLength() {
      return this.relations.length;
    },
    fieldrequired: function fieldrequired() {
      return this._service.isRequired();
    },
    enableAddLinkButtons: function enableAddLinkButtons() {
      return !this.relations.length || this.relations.length && this.relation.type !== 'ONE';
    }
  },
  watch: {
    relations: function relations(updatedrelations) {
      updatedrelations.length === 0 && this.destroyTable();
    }
  },
  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
  },
  created: function created() {
    var _this2 = this;

    var EditingService = require('../services/editingservice');
    var relationLayer = EditingService.getLayerById(this.relation.child);
    this.isVectorRelation = relationLayer.getType() === Layer.LayerTypes.VECTOR;

    if (this.isVectorRelation) {
      this.copyFeatureLayers = EditingService.getProjectLayersWithSameGeometryOfLayer(relationLayer, { exclude: [this.relation.father] }).map(function (layer) {
        return {
          id: layer.getId(),
          name: layer.getName(),
          external: false
        };
      });
      var externalLayerWithSameGeometryType = EditingService.getExternalLayersWithSameGeometryOfLayer(relationLayer);
      externalLayerWithSameGeometryType.forEach(function (externalLayer) {
        _this2.copyFeatureLayers.push({
          id: externalLayer.get('id'),
          name: externalLayer.get('name'),
          external: true
        });
      });
      if (this.copyFeatureLayers.length) {
        this.copyFeatureLayers.sort(function (_ref2, _ref3) {
          var name1 = _ref2.name;
          var name2 = _ref3.name;

          name1 = name1.toLowerCase();
          name2 = name2.toLowerCase();
          if (name1 < name2) return -1;
          if (name1 > name2) return 1;
          return 0;
        });

        this.copylayerid = this.copyFeatureLayers[0].id;
      } else this.copylayerid = null;
    }
    this.loadEventuallyRelationValuesForInputs = false;
    this._service = new RelationService(this.layerId, {
      relation: this.relation,
      relations: this.relations });
    this.capabilities = this._service.getEditingCapabilities();
    this.formeventbus.$on('changeinput', this.updateExternalKeyValueRelations);
  },
  activated: function () {
    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      var EditingService;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.active = true;
              this.showAddVectorRelationTools = false;
              if (!this.loadEventuallyRelationValuesForInputs) {
                EditingService = require('../services/editingservice');

                EditingService.runEventHandler({
                  type: 'show-relation-editing',
                  id: EditingService._getRelationId({
                    layerId: this.layerId,
                    relation: this.relation
                  }),
                  component: this
                });
                this.loadEventuallyRelationValuesForInputs = true;
              }
              _context2.next = 5;
              return this.$nextTick();

            case 5:
              !relationsTable && this.relationsLength && this._createDataTable();
              this.resize();

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function activated() {
      return _ref4.apply(this, arguments);
    }

    return activated;
  }(),
  deactivated: function deactivated() {
    this.destroyTable();
    this.active = false;
  },
  beforeDestroy: function beforeDestroy() {
    this.loadEventuallyRelationValuesForInputs = true;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.active)?_c('div',{staticStyle:{"margin-bottom":"5px"}},[_c('div',{ref:"relation_header_title",staticClass:"box-header with-border skin-color",staticStyle:{"width":"100%","display":"flex","font-weight":"bold","font-size":"1.3em","align-items":"center","margin-button":"3px","background-color":"#ffffff"}},[_c('span',{directives:[{name:"t",rawName:"v-t",value:('plugins.editing.edit_relation'),expression:"'plugins.editing.edit_relation'"}]}),_vm._v(" "),_c('span',{staticStyle:{"margin-left":"2px"}},[_vm._v(": "+_vm._s(_vm.relation.name.toUpperCase()))])]),_vm._v(" "),_c('div',{ref:"relation_header_tools",staticClass:"box-header with-border",staticStyle:{"width":"100%","display":"flex","margin-button":"3px","background-color":"#ffffff"}},[_c('div',{staticStyle:{"margin-right":"auto"},attrs:{"id":"search-box"}},[(_vm.relationsLength)?_c('input',{staticClass:"form-control",attrs:{"type":"text","id":"filterRelation","placeholder":_vm.placeholdersearch}}):_vm._e()]),_vm._v(" "),_c('div',{staticStyle:{"display":"flex","justify-content":"flex-end"}},[(_vm.capabilities.relation.find(function (capability) { return capability === 'change_attr_feature'; }) !== undefined)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:bottom.create",value:(_vm.tooltips.link_relation),expression:"tooltips.link_relation",arg:"bottom",modifiers:{"create":true}}],staticClass:"g3w-icon add-link",class:[{'disabled': !_vm.enableAddLinkButtons}, _vm.g3wtemplate.font['link']],attrs:{"align":"center"},on:{"click":function($event){_vm.enableAddLinkButtons ? _vm.linkRelation() : null}}}):_vm._e(),_vm._v(" "),(_vm.capabilities.relation.find(function (capability) { return capability === 'add_feature'; }) !== undefined)?_c('span',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:bottom.create",value:(_vm.tooltips.link_relation),expression:"tooltips.link_relation",arg:"bottom",modifiers:{"create":true}}],staticClass:"g3w-icon add-link pull-right",class:[{'disabled' : !_vm.enableAddLinkButtons}, _vm.g3wtemplate.font['plus']],on:{"click":function($event){_vm.enableAddLinkButtons ? _vm.addRelationAndLink() : null}}}):_vm._e()])]),_vm._v(" "),(_vm.showAddVectorRelationTools)?_c('section',{ref:"relation_vector_tools",staticStyle:{"display":"flex","flex-direction":"column","border":"2px solid #eeeeee","background-color":"#ffffff","padding":"10px"}},[_c('button',{staticClass:"btn skin-button",staticStyle:{"width":"100%"},on:{"click":function($event){$event.stopPropagation();return _vm.addVectorRelation($event)}}},[_c('i',{class:_vm.g3wtemplate.font['pencil']})]),_vm._v(" "),_c('divider'),_vm._v(" "),_c('div',{staticClass:"skin-color",staticStyle:{"flex-grow":"1","display":"flex"},attrs:{"id":"g3w-select-editable-layers-content"}},[_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('copylayerid'),expression:"'copylayerid'"}],attrs:{"id":"g3w-select-editable-layers-to-copy"}},_vm._l((_vm.copyFeatureLayers),function(copyFeatureLayer){return _c('option',{key:copyFeatureLayer.id,domProps:{"value":copyFeatureLayer.id}},[_vm._v(_vm._s(copyFeatureLayer.name))])}),0),_vm._v(" "),_c('button',{staticClass:"btn skin-button",staticStyle:{"margin-left":"2px"},on:{"click":function($event){$event.stopPropagation();return _vm.copyFeatureFromOtherLayer($event)}}},[_c('i',{class:_vm.g3wtemplate.font['clipboard']})])])],1):_vm._e(),_vm._v(" "),_c('div',{ref:"relation_body",staticClass:"box-body",staticStyle:{"padding":"0"}},[(_vm.relationsLength)?[_c('table',{staticClass:"table g3wform-relation-table table-striped",staticStyle:{"width":"100%"}},[_c('thead',[_c('tr',[_c('th',{directives:[{name:"t",rawName:"v-t",value:('tools'),expression:"'tools'"}]}),_vm._v(" "),_c('th'),_vm._v(" "),_vm._l((_vm.relationAttributesSubset(_vm.relations[0])),function(attribute){return _c('th',[_vm._v(_vm._s(attribute.label))])})],2)]),_vm._v(" "),_c('tbody',_vm._l((_vm.relations),function(relation,index){return _c('tr',{staticClass:"featurebox-header"},[_c('td',[_c('div',{staticStyle:{"display":"flex"}},_vm._l((_vm.getRelationTools()),function(relationtool){return _c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:plugin",value:(relationtool.state.name),expression:"relationtool.state.name",arg:"plugin"}],key:relationtool.state.name,staticClass:"skin-tooltip-right editbtn enabled",attrs:{"data-toggle":"tooltip","data-placement":"right"},on:{"click":function($event){return _vm.startTool(relationtool, index)}}},[_c('img',{attrs:{"height":"20px","width":"20px","src":(_vm.resourcesurl + "images/" + (relationtool.state.icon))}})])}),0)]),_vm._v(" "),_c('td',{staticClass:"action-cell"},[(!_vm.fieldrequired && _vm.capabilities.relation.find(function (capability) { return capability === 'change_attr_feature'; }) !== undefined)?_c('div',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:(_vm.tooltips.unlink_relation),expression:"tooltips.unlink_relation",arg:"right",modifiers:{"create":true}}],staticClass:"g3w-mini-relation-icon g3w-icon",class:_vm.g3wtemplate.font['unlink'],attrs:{"aria-hidden":"true"},on:{"click":function($event){return _vm.unlinkRelation(index)}}}):_vm._e()]),_vm._v(" "),_vm._l((_vm.relationAttributesSubset(relation)),function(attribute){return _c('td',{directives:[{name:"show",rawName:"v-show",value:(!_vm.showAllFieds(index)),expression:"!showAllFieds(index)"}]},[(_vm.isMedia(attribute.value) && _vm.getValue(attribute.value))?[_c('div',{staticClass:"preview"},[_c('a',{attrs:{"href":_vm.getValue(attribute.value),"target":"_blank"}},[_c('div',{staticClass:"previewtype",class:_vm.getMediaType(attribute.value.mime_type).type},[_c('i',{staticClass:"fa-2x",class:_vm.g3wtemplate.font[_vm.getMediaType(attribute.value.mime_type).type]})])]),_vm._v(" "),_c('div',{staticClass:"filename"},[_vm._v(_vm._s(_vm.getFileName(attribute.value)))])])]:(_vm.isLink(attribute))?_c('a',{attrs:{"href":_vm.getValue(attribute.value),"target":"_blank"}},[_vm._v(_vm._s(_vm.getValue(attribute.value)))]):_c('span',[_vm._v(_vm._s(_vm.getValue(attribute.value)))])],2)})],2)}),0)])]:_vm._e()],2)]):_vm._e()}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-112912af", __vue__options__)
  } else {
    hotAPI.reload("data-v-112912af", __vue__options__)
  }
})()}

},{"../services/editingservice":42,"../services/relationservice":43,"vue":5,"vue-hot-reload-api":3}],14:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var WorkflowsStack = g3wsdk.core.workflow.WorkflowsStack;
var FormService = g3wsdk.gui.vue.services.FormService;
exports.default = {
  props: {
    update: {
      type: Boolean
    },
    valid: {
      type: Boolean
    }
  },
  name: 'Saveall',
  data: function data() {
    return {
      loading: false,
      enabled: false
    };
  },

  computed: {
    disabled: function disabled() {
      return !this.enabled && (!this.valid || !this.update);
    }
  },
  methods: {
    save: function save() {
      var _this = this;

      var EditingService = require('../services/editingservice');
      this.loading = true;
      var savePromises = [].concat(_toConsumableArray(WorkflowsStack._workflows)).reverse().map(function (workflow) {
        return workflow.getLastStep().getTask().saveAll(workflow.getContext().service.state.fields);
      });
      Promise.allSettled(savePromises).then(function () {
        EditingService.commit({
          modal: false
        }).then(function () {
          WorkflowsStack._workflows.forEach(function (workflow) {
            return workflow.getContext().service.setUpdate(false, {
              force: false
            });
          });
        }).fail(function () {}).always(function () {
          _this.loading = false;
        });
      });
    }
  },
  created: function created() {
    if (WorkflowsStack.getLength() > 1) {
      this.enabled = WorkflowsStack._workflows.slice(0, WorkflowsStack.getLength() - 1).reduce(function (accumulator, workflow) {
        var _ref = workflow.getContext().service instanceof FormService ? workflow.getContext().service.getState() : {},
            _ref$valid = _ref.valid,
            valid = _ref$valid === undefined ? true : _ref$valid,
            _ref$update = _ref.update,
            update = _ref$update === undefined ? false : _ref$update;

        return valid && update && accumulator;
      }, true);
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticClass:"editing-save-all-form"},[_c('bar-loader',{attrs:{"loading":_vm.loading}}),_vm._v(" "),_c('div',{staticClass:"editing-button",staticStyle:{"background-color":"#ffffff","display":"flex","justify-content":"flex-end","width":"100%"}},[_c('span',{directives:[{name:"disabled",rawName:"v-disabled",value:(_vm.disabled),expression:"disabled"}],on:{"click":function($event){$event.stopPropagation();$event.preventDefault();return _vm.save($event)}}},[_c('i',{staticClass:"skin-color",class:_vm.g3wtemplate.font['save'],staticStyle:{"font-size":"1.8em","padding":"5px","border-radius":"5px","cursor":"pointer","box-shadow":"0 3px 5px rgba(0,0,0,0.5)","margin":"5px"}})])])],1)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0c0483e5", __vue__options__)
  } else {
    hotAPI.reload("data-v-0c0483e5", __vue__options__)
  }
})()}

},{"../services/editingservice":42,"vue":5,"vue-hot-reload-api":3}],15:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("#g3w-select-editable-layers-content[data-v-45d7f042] {\n  margin-bottom: 10px;\n  font-weight: bold;\n}\n#g3w-select-editable-layers-content label[data-v-45d7f042] {\n  color: #ffffff !important;\n}\n#g3w-select-editable-layers-to-show[data-v-45d7f042] {\n  cursor: pointer;\n}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var EditingService = require('../services/editingservice');

exports.default = {
  name: 'Selecteditinglayers',
  data: function data() {
    var editinglayers = Object.entries(EditingService.getEditableLayers()).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          layerId = _ref2[0],
          layer = _ref2[1];

      return {
        id: layerId,
        name: layer.getName(),
        title: layer.getTitle()
      };
    });
    return {
      selectedlayers: [],
      editinglayers: editinglayers
    };
  },

  watch: {
    selectedlayers: function selectedlayers(layers) {
      if (layers.length > 0) this.editinglayers.forEach(function (_ref3) {
        var id = _ref3.id;

        var bool = layers.indexOf(id) !== -1;
        var toolbox = EditingService.getToolBoxById(id);
        toolbox.setShow(bool);
        if (!bool) {
          if (toolbox.state.editing.history.commit) EditingService.commit({ toolbox: toolbox }).always(function () {
            return toolbox.stop();
          });else toolbox.stop();
        }
      });else this.editinglayers.forEach(function (_ref4) {
        var id = _ref4.id;
        return EditingService.getToolBoxById(id).setShow(true);
      });
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"skin-color",attrs:{"id":"g3w-select-editable-layers-content"}},[_c('label',{directives:[{name:"t",rawName:"v-t",value:('Layers'),expression:"'Layers'"}],attrs:{"for":"g3w-select-editable-layers-to-show"}}),_vm._v(" "),_c('select',{directives:[{name:"select2",rawName:"v-select2",value:('selectedlayers'),expression:"'selectedlayers'"}],attrs:{"id":"g3w-select-editable-layers-to-show","multiple":"multiple","clear":"true"}},_vm._l((_vm.editinglayers),function(editinglayer){return _c('option',{key:editinglayer.id,domProps:{"value":editinglayer.id}},[_vm._v(_vm._s(editinglayer.name))])}),0)])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-45d7f042"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-45d7f042", __vue__options__)
  } else {
    hotAPI.reload("data-v-45d7f042", __vue__options__)
  }
})()}

},{"../services/editingservice":42,"vue":5,"vue-hot-reload-api":3,"vueify/lib/insert-css":7}],16:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var resizeMixin = g3wsdk.gui.vue.Mixins.resizeMixin;

var Media_Field = g3wsdk.gui.vue.Fields.media_field;
var TableService = require('../services/tableservice');

exports.default = {
  name: 'Table',
  mixins: [resizeMixin],
  components: {
    'g3w-media': Media_Field
  },
  data: function data() {
    this.dataTable = null;
    return {
      state: null,
      show: true
    };
  },

  methods: {
    changeSize: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$nextTick();

              case 2:
                setTimeout(function () {
                  return _this.resize();
                });

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function changeSize() {
        return _ref.apply(this, arguments);
      }

      return changeSize;
    }(),
    showTool: function showTool(type) {
      return this.state.capabilities.find(function (capability) {
        return capability === type;
      }) !== undefined;
    },
    resize: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var tableHeight, closePanelBlockHeight, tableHeaderHeight, OtherElementHeight;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.$el.style.display !== 'none')) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 3;
                return this.$nextTick();

              case 3:
                tableHeight = $(".content").height();
                closePanelBlockHeight = $('.close-panel-block').outerHeight();
                tableHeaderHeight = $('#editing_table  div.dataTables_scrollHeadInner').outerHeight();
                OtherElementHeight = $('.editing_table_title').outerHeight() + $('.editing_table_header').outerHeight() + $('.editing_table_relation_messagge').outerHeight() + $('.dataTables_length').outerHeight() + $('.dataTables_paginate.paging_simple_numbers').outerHeight() + $('.dataTables_info').outerHeight() + $('.dataTables_filter').outerHeight() + $('.table_editing_footer_buttons').outerHeight() + $('#editing_table .dataTables_paginate.paging_simple_numbers').outerHeight();

                $('#editing_table  div.dataTables_scrollBody').height(tableHeight - closePanelBlockHeight - tableHeaderHeight - OtherElementHeight);
                this.dataTable && this.dataTable.columns.adjust();

              case 9:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function resize() {
        return _ref2.apply(this, arguments);
      }

      return resize;
    }(),
    showValue: function showValue(key) {
      return !!this.state.headers.find(function (header) {
        return header.name === key;
      });
    },
    isMediaField: function isMediaField(name) {
      return this.$options.service.isMediaField(name);
    },
    stop: function stop() {
      this.$options.service.cancel();
    },
    save: function save() {
      this.state.isrelation ? this.$options.service.linkFeatures(this._linkFeatures) : this.$options.service.save();
    },
    cancel: function cancel() {
      this.$options.service.cancel();
    },
    deleteFeature: function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(uid) {
        var _this2 = this;

        var element;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                element = $('#editing_table table tr#' + uid);

                this.$options.service.deleteFeature(uid).then(_asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _this2.dataTable.row(element).remove().draw();
                          _context3.next = 3;
                          return _this2.$nextTick();

                        case 3:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, _this2);
                }))).catch(function () {});

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function deleteFeature(_x) {
        return _ref3.apply(this, arguments);
      }

      return deleteFeature;
    }(),
    copyFeature: function copyFeature(uid) {
      var _this3 = this;

      this.$options.service.copyFeature(uid).then(function () {
        var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(feature) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _this3.show = false;
                  _this3.dataTable.destroy();
                  _context5.next = 4;
                  return _this3.$nextTick();

                case 4:
                  _this3.show = true;
                  _context5.next = 7;
                  return _this3.$nextTick();

                case 7:
                  _this3.setDataTable();

                case 8:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, _this3);
        }));

        return function (_x2) {
          return _ref5.apply(this, arguments);
        };
      }());
    },
    editFeature: function editFeature(uid) {
      this.$options.service.editFeature(uid);
    },
    linkFeature: function linkFeature(index, evt) {
      if (evt.target.checked) this._linkFeatures.push(index);else this._linkFeatures = this._linkFeatures.filter(function (addindex) {
        return addindex !== index;
      });
    },
    _setLayout: function _setLayout() {
      return this.$options.service._setLayout();
    },
    getValue: function getValue(value) {
      if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.constructor === Object) value = value.value;else if (typeof value == 'string' && value.indexOf('_new_') === 0) value = null;
      return value;
    },
    setDataTable: function setDataTable() {
      this.dataTable = $('#editing_table table').DataTable({
        "pageLength": 10,
        "scrollX": true,
        "scrollCollapse": true,
        "scrollResize": true,
        "order": [1, 'asc'],
        columnDefs: [{ orderable: false, targets: 0 }]
      });
      this.resize();
    }
  },
  watch: {
    'state.features': function stateFeatures(features) {}
  },
  beforeCreate: function beforeCreate() {
    this.delayType = 'debounce';
  },
  mounted: function () {
    var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.$nextTick();

            case 2:
              if (this.state.isrelation) this._linkFeatures = [];
              this.setDataTable();
              $('#table-editing-tools i').tooltip();
              this.$options.service.emit('ready');
              this.resize();

            case 7:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function mounted() {
      return _ref6.apply(this, arguments);
    }

    return mounted;
  }(),
  beforeDestroy: function beforeDestroy() {
    if (this._linkFeatures) this._linkFeatures = null;
    this.dataTable.destroy();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"g3w-editing-table",attrs:{"id":"editing_table"}},[_c('div',{ref:"editing_table_header",staticClass:"editing_table_header"},[_c('div',{staticStyle:{"display":"flex","justify-content":"space-between","align-items":"baseline"}},[_c('h3',{staticClass:"editing_table_title"},[_vm._v(_vm._s(_vm.state.title))]),_vm._v(" "),_c('h-resize',{on:{"h_size_change":_vm.changeSize}})],1),_vm._v(" "),(_vm.state.isrelation)?_c('div',{directives:[{name:"t-plugin",rawName:"v-t-plugin",value:('editing.relation.table.info'),expression:"'editing.relation.table.info'"}],staticClass:"editing_table_relation_messagge",staticStyle:{"font-weight":"bold"}}):_vm._e()]),_vm._v(" "),(_vm.show)?_c('table',{staticClass:"display",staticStyle:{"width":"100%"}},[_c('thead',[_c('tr',[(!_vm.state.isrelation)?_c('th',{staticStyle:{"max-width":"60px"}}):_vm._e(),_vm._v(" "),(_vm.state.isrelation)?_c('th'):_vm._e(),_vm._v(" "),_vm._l((_vm.state.headers),function(header){return _c('th',[_vm._v(_vm._s(header.label))])})],2)]),_vm._v(" "),_c('tbody',_vm._l((_vm.state.features),function(feature,index){return _c('tr',{key:feature.__gis3w_feature_uid,attrs:{"id":feature.__gis3w_feature_uid}},[(!_vm.state.isrelation)?_c('td',[_c('div',{staticStyle:{"display":"flex","justify-content":"space-between"},attrs:{"id":"table-editing-tools"}},[(_vm.showTool('change_attr_feature'))?_c('i',{directives:[{name:"t-title",rawName:"v-t-title:plugin",value:('editing.table.edit'),expression:"'editing.table.edit'",arg:"plugin"}],staticClass:"g3w-icon skin-tooltip-right",class:_vm.g3wtemplate.font['pencil'],staticStyle:{"color":"#30cce7"},attrs:{"data-placement":"right","aria-hidden":"true"},on:{"click":function($event){$event.stopPropagation();return _vm.editFeature(feature.__gis3w_feature_uid)}}}):_vm._e(),_vm._v(" "),(_vm.showTool('add_feature'))?_c('i',{directives:[{name:"t-title",rawName:"v-t-title:plugin",value:('editing.table.copy'),expression:"'editing.table.copy'",arg:"plugin"}],staticClass:"g3w-icon skin-tooltip-right",class:_vm.g3wtemplate.font['copy-paste'],staticStyle:{"color":"#d98b14","padding":"5px 7px 5px 7px"},attrs:{"data-placement":"right","aria-hidden":"true"},on:{"click":function($event){$event.stopPropagation();return _vm.copyFeature(feature.__gis3w_feature_uid)}}}):_vm._e(),_vm._v(" "),(_vm.showTool('delete_feature'))?_c('i',{directives:[{name:"t-title",rawName:"v-t-title:plugin",value:('editing.table.delete'),expression:"'editing.table.delete'",arg:"plugin"}],staticClass:"g3w-icon skin-tooltip-right",class:_vm.g3wtemplate.font['trash-o'],staticStyle:{"color":"red"},attrs:{"data-placement":"right","aria-hidden":"true"},on:{"click":function($event){$event.stopPropagation();return _vm.deleteFeature(feature.__gis3w_feature_uid)}}}):_vm._e()])]):_vm._e(),_vm._v(" "),(_vm.state.isrelation)?_c('td',[_c('input',{staticClass:"magic-checkbox",attrs:{"id":("relation__" + index),"type":"checkbox"},on:{"change":function($event){return _vm.linkFeature(index, $event)}}}),_vm._v(" "),_c('label',{attrs:{"for":("relation__" + index)}})]):_vm._e(),_vm._v(" "),_vm._l((feature),function(value,key){return (_vm.showValue(key))?_c('td',{key:key},[( _vm.getValue(value) && _vm.isMediaField(key))?_c('g3w-media',{attrs:{"state":value}}):_c('p',[_vm._v(_vm._s(_vm.getValue(value)))])],1):_vm._e()})],2)}),0)]):_vm._e(),_vm._v(" "),_c('div',{ref:"table_editing_footer_buttons",staticClass:"table_editing_footer_buttons",staticStyle:{"position":"absolute","bottom":"10px","width":"100%","display":"flex","justify-content":"center"},attrs:{"id":"buttons"}},[_c('button',{directives:[{name:"t-plugin",rawName:"v-t-plugin",value:(_vm.state.isrelation ? 'editing.form.buttons.save_and_back' : 'editing.form.buttons.save'),expression:"state.isrelation ? 'editing.form.buttons.save_and_back' : 'editing.form.buttons.save'"}],staticClass:"btn btn-success",staticStyle:{"margin-right":"10px"},on:{"click":_vm.save}}),_vm._v(" "),_c('button',{directives:[{name:"t-plugin",rawName:"v-t-plugin",value:('editing.form.buttons.cancel'),expression:"'editing.form.buttons.cancel'"}],staticClass:"btn btn-danger",on:{"click":_vm.cancel}})])])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-13f4ce0f", __vue__options__)
  } else {
    hotAPI.reload("data-v-13f4ce0f", __vue__options__)
  }
})()}

},{"../services/tableservice":44,"vue":5,"vue-hot-reload-api":3}],17:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: 'Tool',
  props: ['state', 'resourcesurl'],
  data: function data() {
    return {};
  },
  methods: {
    toggletool: function toggletool() {
      if (this.state.active) this.$emit('stopactivetool');else this.$emit('setactivetool', this.state.id);
    }
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.state.visible)?_c('div',{staticClass:"editbtn",class:{'enabled' : _vm.state.enabled, 'toggled' : _vm.state.active},on:{"click":function($event){$event.preventDefault();$event.stopPropagation();_vm.state.enabled && _vm.toggletool()}}},[_c('img',{directives:[{name:"t-title",rawName:"v-t-title:plugin",value:(("" + (_vm.state.name))),expression:"`${state.name}`",arg:"plugin"}],attrs:{"height":"25px","width":"25px","src":_vm.resourcesurl + 'images/'+ _vm.state.icon}})]):_vm._e()}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7f742067", __vue__options__)
  } else {
    hotAPI.reload("data-v-7f742067", __vue__options__)
  }
})()}

},{"vue":5,"vue-hot-reload-api":3}],18:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert(".toolbox[data-v-c4a84298] {\n  padding-bottom: 5px;\n}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Tool = require('./Tool.vue');

var _Tool2 = _interopRequireDefault(_Tool);

var _ToolsOfTool = require('./ToolsOfTool.vue');

var _ToolsOfTool2 = _interopRequireDefault(_ToolsOfTool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var ApplicationState = g3wsdk.core.ApplicationState;

exports.default = {
  name: 'Toolbox',
  props: ['state', 'resourcesurl'],
  data: function data() {
    return {
      active: false,
      currenttoolname: null
    };
  },

  components: {
    'tool': _Tool2.default,
    'toolsoftool': _ToolsOfTool2.default
  },
  methods: {
    select: function select() {
      if (!this.isLayerReady) return;
      if (!this.state.selected) this.$emit('setselectedtoolbox', this.state.id);
    },
    toggleEditing: function toggleEditing() {
      this.select();
      if (!this.state.layerstate.editing.ready || this.state.loading) return;
      this.state.editing.on ? this.$emit('stoptoolbox', this.state.id) : this.$emit('starttoolbox', this.state.id);
    },
    saveEdits: function saveEdits() {
      this.$emit('savetoolbox', this.state.id);
    },
    stopActiveTool: function stopActiveTool() {
      this.$emit('stopactivetool', this.state.id);
    },
    setActiveTool: function setActiveTool(toolId) {
      this.$emit('setactivetool', toolId, this.state.id);
    }
  },
  computed: {
    toolsrow1: function toolsrow1() {
      return this.state.tools.filter(function (tool) {
        return tool.row === 1;
      });
    },
    toolsrow2: function toolsrow2() {
      return this.state.tools.filter(function (tool) {
        return tool.row === 2;
      });
    },
    toolsrow3: function toolsrow3() {
      return this.state.tools.filter(function (tool) {
        return tool.row === 3;
      });
    },
    canEdit: function canEdit() {
      return this.state.editing.canEdit;
    },
    father: function father() {
      return this.state.editing.father && !!this.state.editing.dependencies.length;
    },
    showtoolsoftool: function showtoolsoftool() {
      return !!this.state.toolsoftool.length;
    },
    isLayerReady: function isLayerReady() {
      return this.state.layerstate.editing.ready;
    }
  },
  created: function created() {
    this.edit_layer_tooltip = 'editing.tooltip.edit_layer';
    this.$emit('canEdit', {
      id: this.state.id
    });
  },
  mounted: function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.$nextTick();

            case 2:
              $(this.$refs.editingbutton).tooltip();

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function mounted() {
      return _ref.apply(this, arguments);
    }

    return mounted;
  }(),

  watch: {
    'state.activetool': function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(activetool) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.$nextTick();

              case 2:
                this.currenttoolname = activetool && activetool.getName();

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function stateActivetool(_x) {
        return _ref2.apply(this, arguments);
      }

      return stateActivetool;
    }()
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.state.show),expression:"state.show"}],staticClass:"toolbox"},[_c('div',{class:{'disableddiv' : !_vm.isLayerReady || !_vm.canEdit },attrs:{"id":'id_toolbox_'+ _vm.state.id}},[_c('div',{staticClass:"panel",class:{'mobile': _vm.isMobile(), 'toolboxselected': _vm.state.selected },staticStyle:{"margin-bottom":"8px"},on:{"click":_vm.select}},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.isLayerReady),expression:"!isLayerReady"}],staticClass:"bar-loader"}),_vm._v(" "),(_vm.state.toolboxheader)?_c('div',{staticClass:"panel-heading container",staticStyle:{"width":"100%"},style:({ background: _vm.state.color})},[(_vm.father)?_c('div',{staticClass:"pull-left enabled dropdown",staticStyle:{"margin-right":"5px","cursor":"pointer"}},[_c('span',{class:_vm.g3wtemplate.font['relation']}),_vm._v(" "),_c('div',{staticClass:"dropdown-content skin-background-color",staticStyle:{"padding":"5px","border-radius":"3px"}},_vm._l((_vm.state.editing.dependencies),function(dependency){return _c('div',{staticStyle:{"font-weight":"bold"}},[_vm._v(_vm._s(dependency))])}),0)]):_vm._e(),_vm._v(" "),_c('div',{directives:[{name:"t-plugin",rawName:"v-t-plugin:pre",value:('editing.toolbox.title'),expression:"'editing.toolbox.title'",arg:"pre"}],staticClass:"panel-title",class:[_vm.father ? 'col-md-6' : 'col-md-8']},[_vm._v(_vm._s(_vm.state.title))]),_vm._v(" "),_c('div',{directives:[{name:"disabled",rawName:"v-disabled",value:(!_vm.state.startstopediting),expression:"!state.startstopediting"},{name:"t-title",rawName:"v-t-title:plugin",value:(_vm.edit_layer_tooltip),expression:"edit_layer_tooltip",arg:"plugin"}],ref:"editingbutton",staticClass:"start-editing editbtn skin-tooltip-left",class:{'pull-right': !_vm.isMobile(), 'enabled' : _vm.isLayerReady,  'g3w-icon-toggled' : _vm.state.editing.on},attrs:{"data-placement":"left","data-toggle":"tooltip"},on:{"click":function($event){$event.stopPropagation();return _vm.toggleEditing($event)}}},[_c('span',{class:_vm.g3wtemplate.font['pencil'],staticStyle:{"font-size":"1.1em","padding":"5px"}})])]):_vm._e(),_vm._v(" "),_c('bar-loader',{attrs:{"loading":_vm.state.loading || _vm.state.changingtools}}),_vm._v(" "),_c('div',{directives:[{name:"show",rawName:"v-show",value:(!_vm.state.changingtools),expression:"!state.changingtools"}],staticClass:"panel-body"},[_c('div',{staticClass:"tools-content row1",staticStyle:{"display":"flex","flex-wrap":"wrap"}},_vm._l((_vm.toolsrow1),function(toolstate){return _c('tool',{key:toolstate.id,attrs:{"state":toolstate,"resourcesurl":_vm.resourcesurl},on:{"stopactivetool":_vm.stopActiveTool,"setactivetool":_vm.setActiveTool}})}),1),_vm._v(" "),_c('div',{staticClass:"tools-content row2",staticStyle:{"display":"flex","flex-wrap":"wrap"}},_vm._l((_vm.toolsrow2),function(toolstate){return _c('tool',{key:toolstate.id,attrs:{"state":toolstate,"resourcesurl":_vm.resourcesurl},on:{"stopactivetool":_vm.stopActiveTool,"setactivetool":_vm.setActiveTool}})}),1),_vm._v(" "),_c('div',{staticClass:"tools-content row3",staticStyle:{"display":"flex","flex-wrap":"wrap"}},_vm._l((_vm.toolsrow3),function(toolstate){return _c('tool',{key:toolstate.id,attrs:{"state":toolstate,"resourcesurl":_vm.resourcesurl},on:{"stopactivetool":_vm.stopActiveTool,"setactivetool":_vm.setActiveTool}})}),1),_vm._v(" "),_c('div',{staticClass:"message",staticStyle:{"margin-top":"5px"},attrs:{"id":'id_toolbox_messages_'+ _vm.state.id}},[_c('div',{domProps:{"innerHTML":_vm._s(_vm.state.message)}}),_vm._v(" "),_c('transition',{attrs:{"name":"fade"}},[(_vm.showtoolsoftool)?_c('toolsoftool',{attrs:{"tools":_vm.state.toolsoftool}}):_vm._e()],1),_vm._v(" "),(_vm.currenttoolname)?_c('div',{directives:[{name:"t-plugin",rawName:"v-t-plugin",value:(_vm.currenttoolname),expression:"currenttoolname"}],staticClass:"toolbox_help_message"}):_vm._e()],1)])],1)])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-c4a84298"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c4a84298", __vue__options__)
  } else {
    hotAPI.reload("data-v-c4a84298", __vue__options__)
  }
})()}

},{"./Tool.vue":17,"./ToolsOfTool.vue":19,"vue":5,"vue-hot-reload-api":3,"vueify/lib/insert-css":7}],19:[function(require,module,exports){
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ToolsOfToolSnap = require('./ToolsOfToolSnap.vue');

var _ToolsOfToolSnap2 = _interopRequireDefault(_ToolsOfToolSnap);

var _ToolsOfToolMeasure = require('./ToolsOfToolMeasure.vue');

var _ToolsOfToolMeasure2 = _interopRequireDefault(_ToolsOfToolMeasure);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  name: 'Toolsoftool',
  props: ['tools'],
  components: {
    snap: _ToolsOfToolSnap2.default,
    measure: _ToolsOfToolMeasure2.default
  },
  data: function data() {
    return {};
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex","flex-direction":"column","margin":"5px","padding":"5px","border-radius":"5px"},attrs:{"id":"toolsoftoolcontainer"}},[_vm._l((_vm.tools),function(tool){return [_c(tool.type,{tag:"component",attrs:{"options":tool.options}}),_vm._v(" "),_c('divider')]})],2)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-21f6c16a", __vue__options__)
  } else {
    hotAPI.reload("data-v-21f6c16a", __vue__options__)
  }
})()}

},{"./ToolsOfToolMeasure.vue":20,"./ToolsOfToolSnap.vue":21,"vue":5,"vue-hot-reload-api":3}],20:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("label span[data-v-0b8314c3] {\n  color: #222d32 !important;\n}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  name: "measure",
  props: ['options'],
  data: function data() {
    return {
      checked: this.options.checked
    };
  },

  watch: {
    'checked': function checked(bool) {
      this.options.onChange(bool);
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.options.onBeforeDestroy();
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.checked),expression:"checked"}],staticClass:"magic-checkbox snap_tools_of_tools",attrs:{"type":"checkbox","id":"g3w_editing_show_measure_tool"},domProps:{"checked":Array.isArray(_vm.checked)?_vm._i(_vm.checked,null)>-1:(_vm.checked)},on:{"change":function($event){var $$a=_vm.checked,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.checked=$$a.concat([$$v]))}else{$$i>-1&&(_vm.checked=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.checked=$$c}}}}),_vm._v(" "),_c('label',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('plugins.editing.toolsoftool.measure'),expression:"'plugins.editing.toolsoftool.measure'",arg:"right",modifiers:{"create":true}}],attrs:{"for":"g3w_editing_show_measure_tool"}},[_c('span',{class:_vm.g3wtemplate.font['measure'],staticStyle:{"font-weight":"bold"}})])])}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-0b8314c3"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0b8314c3", __vue__options__)
  } else {
    hotAPI.reload("data-v-0b8314c3", __vue__options__)
  }
})()}

},{"vue":5,"vue-hot-reload-api":3,"vueify/lib/insert-css":7}],21:[function(require,module,exports){
var __vueify_style_dispose__ = require("vueify/lib/insert-css").insert("label span[data-v-66af2696] {\n  color: #222d32 !important;\n}")
;(function(){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var GUI = g3wsdk.gui.GUI;
var Layer = g3wsdk.core.layer.Layer;

var snapInteraction = void 0;
var mapService = GUI.getService('map');
var editingService = require('../services/editingservice');
exports.default = {
  name: "snap",
  props: ['options'],
  data: function data() {
    return {
      id: 'snap_' + Date.now(),
      idAll: 'snap_' + Date.now() + '_all',
      checked: false,
      checkedAll: false,
      showSnapAll: false
    };
  },

  computed: {
    add: function add() {
      return (this.checked || this.checkedAll) && this.options.active;
    }
  },
  methods: {
    addFeatures: function addFeatures(features) {
      this.features.extend(features);
    },
    addFeature: function addFeature(feature) {
      this.addFeatures([feature]);
    },
    removeFeatures: function removeFeatures(features) {
      var _this = this;

      features.forEach(function (feature) {
        return _this.features.remove(feature);
      });
    },
    setShowSnapAll: function setShowSnapAll() {
      this.showSnapAll = this.vectorToolboxesEditingState.find(function (editing) {
        return editing.on;
      }) && true || false;
      this.checkedAll = this.showSnapAll ? this.checkedAll : false;
    },
    activeSnapInteraction: function activeSnapInteraction() {
      var snap = this.add;
      snapInteraction && mapService.removeInteraction(snapInteraction);
      snapInteraction = null;
      if (snap) {
        snapInteraction = new ol.interaction.Snap({
          source: this.checked && !this.checkedAll && this.options.source,
          features: this.checkedAll && this.features
        });
        mapService.addInteraction(snapInteraction);
      }
    },
    enableSnapInteraction: function enableSnapInteraction(bool) {
      if (bool) this.activeSnapInteraction();else snapInteraction && mapService.removeInteraction(snapInteraction);
    }
  },
  watch: {
    checked: function checked(bool) {
      this.options.checked = bool;
      this.activeSnapInteraction();
    },
    checkedAll: function checkedAll(bool) {
      this.options.checkedAll = bool;
      this.activeSnapInteraction();
    },
    'options.active': function optionsActive(bool) {
      this.enableSnapInteraction(bool);
    }
  },
  created: function created() {
    var _this2 = this;

    this.features = new ol.Collection();
    this.sourcesAndEventsKeys = [];

    this.vectorToolboxesEditingState = [];

    this.unwatches = [];
    editingService.getLayers().forEach(function (layer) {
      var layerId = layer.getId();
      if (layer.getType() === Layer.LayerTypes.VECTOR) {
        var toolbox = editingService.getToolBoxById(layerId);
        var source = toolbox.getLayer().getEditingSource();
        _this2.features.extend(source.readFeatures());
        var addFeaturesKey = source.onbefore('addFeatures', _this2.addFeatures);
        var addFeatureKey = source.onbefore('addFeature', _this2.addFeatures);
        var clearKey = source.onbefore('clear', function () {
          var features = source.readFeatures();
          _this2.removeFeatures(features);
        });
        var olKey = source.getFeaturesCollection().on('add', function (evt) {
          return _this2.addFeature(evt.element);
        });
        _this2.sourcesAndEventsKeys.push({
          source: source,
          settersAndKeys: {
            'addFeatures': addFeaturesKey,
            'addFeature': addFeatureKey,
            'clear': clearKey
          },
          olKey: olKey
        });

        if (_this2.options.layerId !== layerId) {
          var editing = toolbox.getState().editing;
          var unwatch = _this2.$watch(function () {
            return editing.on;
          }, _this2.setShowSnapAll);
          _this2.unwatches.push(unwatch);
          _this2.vectorToolboxesEditingState.push(editing);
        }
      }
    });
    this.setShowSnapAll();
  },
  beforeDestroy: function beforeDestroy() {
    this.sourcesAndEventsKeys.forEach(function (sourceAndKey) {
      var source = sourceAndKey.source,
          settersAndKeys = sourceAndKey.settersAndKeys,
          olKey = sourceAndKey.olKey;

      Object.keys(settersAndKeys).forEach(function (eventName) {
        var key = settersAndKeys[eventName];
        source.un(eventName, key);
      });
      ol.Observable.unByKey(olKey);
    });
    this.unwatches.forEach(function (unwatch) {
      return unwatch();
    });
    snapInteraction = null;
    this.unwatches = null;
    this.vectorToolboxesEditingState = null;
    this.sourcesAndEventsKeys = null;
  }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{"display":"flex","width":"100%","justify-content":"space-between"}},[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.checked),expression:"checked"}],staticClass:"magic-checkbox snap_tools_of_tools",attrs:{"type":"checkbox","id":_vm.id},domProps:{"checked":Array.isArray(_vm.checked)?_vm._i(_vm.checked,null)>-1:(_vm.checked)},on:{"change":function($event){var $$a=_vm.checked,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.checked=$$a.concat([$$v]))}else{$$i>-1&&(_vm.checked=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.checked=$$c}}}}),_vm._v(" "),_c('label',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:right.create",value:('plugins.editing.toolsoftool.snap'),expression:"'plugins.editing.toolsoftool.snap'",arg:"right",modifiers:{"create":true}}],attrs:{"for":_vm.id}},[_c('span',{class:_vm.g3wtemplate.font['magnete']})]),_vm._v(" "),(_vm.showSnapAll)?[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.checkedAll),expression:"checkedAll"}],staticClass:"magic-checkbox snap_tools_of_tools",attrs:{"type":"checkbox","id":_vm.idAll},domProps:{"checked":Array.isArray(_vm.checkedAll)?_vm._i(_vm.checkedAll,null)>-1:(_vm.checkedAll)},on:{"change":function($event){var $$a=_vm.checkedAll,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.checkedAll=$$a.concat([$$v]))}else{$$i>-1&&(_vm.checkedAll=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.checkedAll=$$c}}}}),_vm._v(" "),_c('label',{directives:[{name:"t-tooltip",rawName:"v-t-tooltip:left.create",value:('plugins.editing.toolsoftool.snapall'),expression:"'plugins.editing.toolsoftool.snapall'",arg:"left",modifiers:{"create":true}}],attrs:{"for":_vm.idAll}},[_c('span',{class:_vm.g3wtemplate.font['magnete']}),_vm._v(" "),_c('span',{class:_vm.g3wtemplate.font['layers'],staticStyle:{"font-weight":"bold"}})])]:_vm._e()],2)}
__vue__options__.staticRenderFns = []
__vue__options__._scopeId = "data-v-66af2696"
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  module.hot.dispose(__vueify_style_dispose__)
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-66af2696", __vue__options__)
  } else {
    hotAPI.reload("data-v-66af2696", __vue__options__)
  }
})()}

},{"../services/editingservice":42,"vue":5,"vue-hot-reload-api":3,"vueify/lib/insert-css":7}],22:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "Es tritt ein Fehler auf. Es ist nicht möglich, Layer zu bearbeiten",
    some_layers: "Es tritt ein Fehler auf: Es ist nicht möglich, einige Layer zu bearbeiten"
  },
  search: "Suche",
  editing_changes: "Änderungen bearbeiten",
  editing_data: "Layer bearbeiten",
  editing_attributes: "Attribute bearbeiten",
  relations: "Relationen",
  edit_relation: "Relation bearbeiten",
  back_to_relations: "Zurück zu Relationen",
  no_relations_found: "Keine Relationen gefunden",
  relation_data: "Relationsdaten",
  relation_already_added: "Relation bereits hinzugefügt",
  list_of_relations_feature: "Liste der Relations-Features ",
  tooltip: {
    edit_layer: "Layer bearbeiten"
  },
  toolbox: {
    title: 'bearbeiten'
  },
  table: {
    edit: "Feature bearbeiten",
    copy: "Kopie erstellen",
    delete: "Feature löschen"
  },
  tools: {
    copy: "Features kopieren",
    pastefeaturesfromotherlayers: "Paste features from other layer",
    addpart: "Teil zu Multipart hinzufügen",
    deletepart: "Teil aus Multipart löschen",
    merge: "Feature auflösen",
    split: "Feature trennen",
    add_feature: "Feature hinzufügen",
    delete_feature: "Feature löschen",
    move_feature: "Feature verschieben",
    update_vertex: "Feature vertex aktualisieren",
    update_feature: "Feature-Attribut aktualisieren",
    update_multi_features: "Attribute ausgewählter Features aktualisieren",
    copyfeaturefromexternallayer: "Create Feature from existing feature"
  },
  toolsoftool: {
    measure: "Messung anzeigen",
    snap: "Snap Layer",
    snapall: "Snap auf alle Layer"
  },
  steps: {
    help: {
      select_elements: "Features auswählen",
      select_element: "Feature auswählen",
      copy: "Neue Kopie der ausgewählten Features erstellen",
      merge: "Features auflösen",
      split: "Feature trennen",
      new: "Neues Feature erstellen",
      edit_table: "Features der Tabelle bearbeiten",
      draw_new_feature: "Feature auf Karte zeichnen",
      action_confirm: "Aktion bestätigen",
      double_click_delete: "Zu löschendes Feature auf der Karte auswählen",
      edit_feature_vertex: "Ändern oder Hinzufügen eines Eckpunktes auf dem ausgewählten Feature",
      move: "Ausgewähltes Feature verschieben",
      select_feature_to_relation: "Feature auswählen, welches die Relation verknüpft",
      show_edit_feature_form: "Feature-Formular zum Bearbeiten von Attributen anzeigen",
      pick_feature: "Zu änderndes Feature auf der Karte auswählen",
      insert_attributes_feature: "Attribute des Features einfügen"
    }
  },
  workflow: {
    steps: {
      select: 'Zum Auswählen auf ein Feature klicken',
      draw_part: "Neues Teil zeichnen",
      merge: 'Feature zum Auflösen auswählen',
      selectSHIFT: 'Features auswählen indem ein Rechteck mit SHIFT gezeichnet wird',
      selectDrawBox: "Features auswählen, indem man ein Rechteck mit zwei gegenüberliegenden Eckpunkten zeichnet",
      selectDrawBoxAtLeast2Feature: "Mindestens Features auswählen, indem man ein Rechteck mit zwei gegenüberliegenden Eckpunkten zeichnet",
      selectPoint: "Zum Auswählen auf ein Feature klicken",
      selectPointSHIFT: 'Features auswählen, indem ein Rechteck mit SHIFT gezeichnet wird (Multifeatures) oder auf ein Feature klicken',
      selectMultiPointSHIFT: 'Features auswählen, indem man ein Rechteck zeichnet und SHIFT drückt oder auf ein Feature klickt',
      selectMultiPointSHIFTAtLeast2Feature: 'Mindestens 2 Features auswählen und mit SHIFT ein Rechteck zeichnen oder auf ein Feature klicken',
      copyCTRL: 'Kopieren ausgewählter Features mit CTRL+C',
      selectStartVertex: 'Start-Eckpunkt der ausgewählten Features auswählen',
      selectToPaste: 'Den Punkt auswählen, an dem die ausgewählten Features eingefügt werden sollen',
      draw_split_line: "Eine Linie zeichnen, um das ausgewählte Feature zu teilen"
    }
  },
  messages: {
    featureslockbyotheruser: "Einige Geometrien/Datensätze können nicht bearbeitet werden, da sie von anderen Benutzern bearbeitet werden",
    splitted: "Getrennt",
    nosplittedfeature: "Feature nicht getrennt",
    press_esc: "Mit ESC zurück",
    online: "Wieder ONLINE. Jetzt kann man die Änderungen in der Datenbank speichern",
    offline: "OFFLINE. Alle Änderungen werden lokal gespeichert",
    delete_feature: "Soll das ausgewählte Feature gelöscht werden?",
    delete_feature_relations: "Wenn ein Feature Verknüpfungen beinhaltet, werden diese Relationen verwaist. Wir schlagen vor, diese Relationen zu behandeln, bevor das Feature gelöscht wird",
    unlink_relation: "Soll die Verknüpfung aufgehoben werden?",
    commit_feature: "Änderungen speichern?",
    change_toolbox_relation: "Layer hat Relation(en). Bevor man zur Bearbeitung wechselt, muss man die Änderungen speichern.",
    saved: "Daten erfolgreich gespeichert",
    saved_local: "Daten erfolgreich lokal gespeichert",
    loading_data: "Daten laden",
    saving: "Daten werden gespeichert. Bitte warten ...",
    constraints: {
      enable_editing: "Bitte zoomen Sie hinein, um die Editier-Tools zu aktivieren \nAktivierungsskala bei 1:"
    },
    pdf: "Dokumentenvorschau nicht verfügbar. Bitte hier klicken ",
    commit: {
      header: "Die folgende Liste zeigt alle zu übernehmenden Änderungen.",
      header_add: "<b>Hinzufgefügt</b> Die Anzahl der hinzugefügten Features anzeigen",
      header_update_delete: "<b>Bearbeitet</b> und <b>Gelöscht</b> Die Liste der Feature-ID anzeigen",
      add: "Hinzugefügt(n. Features)",
      delete: "Gelöscht(id)",
      update: "Bearbeitet(id)"
    },
    loading_table_data: "Datentabelle wird erstellt. Bitte warten ...",
    copy_and_paste_from_other_layer_mandatory_fields: "Vor dem Speichern müssen alle Pflichtfelder des eingegebenen features ausgefüllt werden",
    no_feature_selected: "Keine feature ausgewählt"
  },
  relation: {
    table: {
      info: "\n                  <div>\n                    W\xE4hlen Sie Relationen aus, um sie mit dem aktuellen Feature zu verkn\xFCpfen.\n                  </div>\n                  <div>\n               \n                "
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Zurück zur Bearbeitung des Vaters",
        add_relation: "Neue Relation erstellen und verknüpfen",
        link_relation: "Eine Relation zu diesem Feature herstellen",
        open_relation_tools: "Relationstools anzeigen",
        unlink_relation: "Relation trennen"
      }
    },
    buttons: {
      save: "Speichern und schließen",
      save_and_back: "Speichern und zurück",
      cancel: "Änderungen ignorieren"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Select feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Select one feature"
      }
    }
  }
};

},{}],23:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "An error occurs. It's no possible to edit layers",
    some_layers: "An error occurs: It's no possible to edit some layers"
  },
  search: "Search",
  editing_changes: "Editing Changes",
  editing_data: "Editing Layers",
  editing_attributes: "Editing attributes",
  relations: "Relations",
  edit_relation: "Edit relation",
  back_to_relations: "Back to Relations",
  no_relations_found: "No relations found",
  relation_data: "Relation data",
  relation_already_added: "Relation already added",
  list_of_relations_feature: "List of relations feature ",
  tooltip: {
    edit_layer: "Edit Layer"
  },
  toolbox: {
    title: 'Edit'
  },
  table: {
    edit: "Edit feature",
    copy: "Create a copy",
    delete: "Delete feature"
  },
  tools: {
    copy: "Copy features",
    pastefeaturesfromotherlayers: "Paste features from other layer",
    addpart: "Add part to multipart",
    deletepart: "Delete part from multipart",
    merge: "Dissolve features",
    split: "Split Feature",
    add_feature: "Add feature",
    delete_feature: "Delete feature",
    move_feature: "Move feature",
    update_vertex: "Update feature vertex",
    update_feature: "Update feature attribute",
    update_multi_features: "Update attributes of selected features",
    copyfeaturefromexternallayer: "Create Feature from existing feature"
  },
  toolsoftool: {
    measure: "Show measure",
    snap: "Snap layer",
    snapall: "Snap to all layers"
  },
  steps: {
    help: {
      select_elements: "Select features",
      select_element: "Select feature",
      copy: "Create new copy of selected features",
      merge: "Dissolve features",
      split: "Split Feature",
      new: "Create new feature",
      edit_table: "Edit table features",
      draw_new_feature: "Draw feature on map",
      action_confirm: "Confirm action",
      double_click_delete: "Select feature on map to delete",
      edit_feature_vertex: "Modify or add a vertex on selected feature",
      move: "Move selected feature",
      select_feature_to_relation: "Select feature that you bind relation",
      show_edit_feature_form: "Show feature form to edit attributes",
      pick_feature: "Select feature on map to modify",
      insert_attributes_feature: "Insert attributes of the feature"
    }
  },
  workflow: {
    steps: {
      select: 'Click on feature to select',
      draw_part: "Draw new part",
      merge: 'Select featurewhere dissolve',
      selectSHIFT: 'Select features drawing a rectangle pressing SHIFT',
      selectDrawBox: "Select features drawing a rectangle by two point of opposite corners",
      selectDrawBoxAtLeast2Feature: "Select at least features drawing a rectangle by two point of opposite corners",
      selectPoint: "Click on feature to select",
      selectPointSHIFT: 'Select features drawing a rectangle pressing SHIFT (multifeatures) or click on one feature',
      selectMultiPointSHIFT: 'Select features drawing a rectangle pressing SHIFT or click on feature',
      selectMultiPointSHIFTAtLeast2Feature: 'Select at least 2 features drawing a rectangle pressing SHIFT or click on feature',
      copyCTRL: 'Copy selected features using CTRL+C',
      selectStartVertex: 'Select starting vertex of selected features',
      selectToPaste: 'Select the point where paste the features selected',
      draw_split_line: "Draw a line to split selected feature"
    }
  },
  messages: {
    featureslockbyotheruser: "Some geometries/records are not editable because in editing by other user",
    splitted: "Splitted",
    nosplittedfeature: "Feature not spitted",
    press_esc: "Press ESC to back",
    online: "Back ONLINE. Now you can save your changes on database",
    offline: "You are OFFLINE. All changes are saved locally",
    delete_feature: "Do you want delete selected feature ?",
    delete_feature_relations: "If feature has bindings relations, these relations become orphans. We suggest to handle these relations before detele this feature",
    unlink_relation: "Do you want unlink relation?",
    commit_feature: "Do you want to save the changes",
    change_toolbox_relation: "Layer has relation/relations. Before switch editing you need to save changes done.",
    saved: "Data saved successfully",
    saved_local: "Data saved locally successfully",
    loading_data: "Loading data",
    saving: "Saving data. Please wait ...",
    constraints: {
      enable_editing: "Please Zoom In to enable editing tools \nActivation scale at 1:"
    },
    pdf: "Document preview not available. Please click here ",
    commit: {
      header: "The following list show all changes to commit.",
      header_add: "<b>Added</b> show the number of features added",
      header_update_delete: "<b>Modified</b> and <b>Deleted</b> show the list of features id",
      add: "Added(n. features)",
      delete: "Deleted(id)",
      update: "Modified(id)"
    },
    loading_table_data: "Building Data Table. Please wait ...",
    copy_and_paste_from_other_layer_mandatory_fields: "It is necessary to fill in any mandatory fields on the features pasted before saving",
    no_feature_selected: "No feature selected"
  },
  relation: {
    table: {
      info: "\n                  <div>\n                    Select relations to link it to current editing feature.\n                  </div>\n                  <div>\n               \n                "
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Back to edit father",
        add_relation: "Create and link new relation",
        link_relation: "Join a relation to this feature",
        open_relation_tools: "Show relation tools",
        unlink_relation: "Unlink relation"
      }
    },
    buttons: {
      save: "Save and Exit",
      save_and_back: "Save and Back",
      cancel: "Ignore Changes"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Select feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Select a feature"
      }
    }
  }
};

},{}],24:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "Tapahtui virhe. Tasoja ei ole mahdollista muokata.",
    some_layers: "Tapahtui virhe. Jotkin tasot eivät ole muokattavissa."
  },
  search: "Haku",
  editing_changes: "Editing Changes",
  editing_data: "Muokataan tasoja",
  editing_attributes: "Muokataan attribuutteja",
  relations: "Relaatiot",
  edit_relation: "Muokkaa relaatiota",
  back_to_relations: "Takaisin relaatioihin",
  no_relations_found: "Relaatioita ei löytynyt",
  relation_data: "Relaation tiedot",
  relation_already_added: "Relaatio on jo lisätty",
  list_of_relations_feature: "Lista relaation ominaisuuksista",
  tooltip: {
    edit_layer: "Muokkaa tasoa"
  },
  toolbox: {
    title: 'Muokkaa'
  },
  table: {
    edit: "Muokkaa ominaisuutta",
    copy: "Luo kopio",
    delete: "Poista ominaisuus"
  },
  tools: {
    copy: "Kopio ominaisuuksia",
    pastefeaturesfromotherlayers: "Paste features from other layer",
    addpart: "Lisää osa",
    deletepart: "Poista osa",
    merge: "Yhdistä ominaisuudet",
    split: "Leikkaa ominaisuus",
    add_feature: "Lisää ominaisuus",
    delete_feature: "Poista ominaisuus",
    move_feature: "Siirrä ominaisuutta",
    update_vertex: "Päivitä pisteen ominaisuutta",
    update_feature: "Päivitä ominaisuus",
    copyfeaturefromexternallayer: "Create Feature from existing feature"
  },
  toolsoftool: {
    measure: "Show measure",
    snap: "Snap layer",
    snapall: "Snap to all layers"
  },
  steps: {
    help: {
      select_elements: "Valitse ominaisuudet",
      select_element: "Valitse ominaisuus",
      copy: "Luo kopio valituista ominaisuuksista",
      merge: "Yhdistä ominaisuudet",
      split: "Leikkaa ominaisuus",
      new: "Luo uusi ominaisuus",
      edit_table: "Muuta taulun ominaisuuksia",
      draw_new_feature: "Piirrä ominaisuus kartalle",
      action_confirm: "Hyväksy toiminto",
      double_click_delete: "Valitse poistettava ominaisuus kartalta",
      edit_feature_vertex: "Muuta pistettä tai lisää piste valittuun ominaisuuteen",
      move: "Siirrä valittu ominaisuus",
      select_feature_to_relation: "Valitse relaatio",
      show_edit_feature_form: "Näytä ominaisuuslomake muokataksesi attribuutteja",
      pick_feature: "Valitse muokattava ominaisuus kartalta",
      insert_attributes_feature: "Lisää ominaisuuden attribuutit"
    }
  },
  workflow: {
    steps: {
      select: 'Valitse ominaisuus',
      draw_part: "Piirrä uusi osa",
      merge: 'Valitse ominaisuus yhdistääksesi',
      selectSHIFT: 'Paina SHIFT, jos haluat valita kohteita suorakulmiovalinnalla.', //Tero 10.12.2020
      selectDrawBox: "Piirrä suorakulmio, jonka siältä kohteet valitaan ", //Tero 10.12.2020
      selectDrawBoxAtLeast2Feature: "Piirrä suorakulmio, jonka siältä kohteet vähintään 2 valitaan ",
      selectPoint: "Valitse ominaisuus",
      selectPointSHIFT: 'Paina SHIFT, jos haluat valita ominaisuuksia suorakulmiovalinnalla, tai valitse yksittäinen ominaisuus.',
      selectMultiPointSHIFT: 'Paina SHIFT, jos haluat valita ominaisuuksia suorakulmiovalinnalla, tai valitse yksittäinen ominaisuus.',
      selectMultiPointSHIFTAtLeast2Feature: 'Paina SHIFT, jos haluat valita vähintään 2 ominaisuuksia suorakulmiovalinnalla, tai valitse yksittäinen ominaisuus.',
      copyCTRL: 'CTRL+C, voit kopioida valitut ominaisuudet.', //Tero 10.12.2020
      selectStartVertex: 'Osoita valittujen ominaisuuksien alkupiste.',
      selectToPaste: 'Valitse kohta, johon liität valitut ominaisuudet.',
      draw_split_line: "Piirrä viiva, jonka mukaan valittu ominaisuus jaetaan."
    }
  },
  messages: {
    featureslockbyotheruser: "Some features are locked by another user",
    splitted: "Jaettu",
    nosplittedfeature: "Ominaisuutta ei jaettu",
    press_esc: "Paina ESC palataksesi",
    online: "Yhteys muodostettu. Muutokset voidaan tallentaa tietokantaan.",
    offline: "Olet offline-tilassa. Muutokset tallennetaan paikallisesti",
    delete_feature: "Haluatko poistaa valitun ominaisuuden?",
    delete_feature_relations: "Mikäli ominaisuudella on sitovia relaatioita, näistä relaatiosta tulee orpoja. Suosittelemme käsittelemään nämä relaatiot ennen poistamista",
    unlink_relation: "Haluatko poistaa relaation?",
    commit_feature: "Tallennetaanko muutokset?",
    change_toolbox_relation: "Tasolla on relaatio/relaatiota. Ennen muokkauksen aloittamista tulee muutokset tallenttaa.",
    saved: "Tiedot tallennettu onnistuneesti",
    saved_local: "Tiedot on tallennettu onnistuneesti paikallisesti.",
    loading_data: "Ladataan tietoja",
    saving: "Tallentaan tietoja. Odota...",
    constraints: {
      enable_editing: "Lähennä ottaaksesi muokkaustyökalut käyttöön \nAktivointi mittakaava 1:"
    },
    pdf: "Dokumentin esikatselu ei ole saatavilla. Paina tästä ",
    commit: {
      header: "Seuraava luettelo näyttää kaikki muutokset.",
      header_add: "<b>Lisätty</b> näytä lisättyjen ominaisuuksien lukumäärä",
      header_update_delete: "<b>Muokattu</b> ja <b>Poistettu</b> Näytä listä ominaisuuksien id:stä",
      add: "Lisätty(n. ominaisuutta)",
      delete: "Poistettu(id)",
      update: "Muokattu(id)"
    },
    loading_table_data: "Building Data Table. Please wait ...",
    copy_and_paste_from_other_layer_mandatory_fields: "It is necessary to fill in any mandatory fields on the features pasted before saving",
    no_feature_selected: "No feature selected"
  },
  relation: {
    table: {
      info: "\n                  <div>\n\t\t\t\t\tValitse relaatiota linkitt\xE4\xE4ksesi ne muokattavaan ominaisuuteen.\n                  </div>\n                  <div>\n               \n                "
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Back to edit father",
        add_relation: "Luo ja linkitä uusi relaatio",
        link_relation: "Liitä relaatio tähän ominaisuuteen",
        open_relation_tools: "Näytä relaatiotyökalut",
        unlink_relation: "Poista relaatio"
      }
    },
    buttons: {
      save: "Tallenna ja poistu",
      save_and_back: "Tallenna ja palaa",
      cancel: "Peruuta"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Select feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Select a feature"
      }
    }
  }
};

},{}],25:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "Une erreur s'est produite lors du chargement des layers dans l'édition.",
    some_layers: "Une erreur s'est produite lors du chargement de certaines layers dans l'édition."
  },
  search: "Recherche",
  editing_changes: "Editing Changes",
  editing_data: "Modifier les donnes",
  editing_attributes: "Modifier les attributs",
  relations: "Relations",
  edit_relation: "Modifier la relation",
  back_to_relations: "Retour aux relations",
  no_relations_found: "Il n'y a pas de relations",
  relation_data: "Données sur les relations",
  relation_already_added: "Relation déjà présente",
  list_of_relations_feature: "Lister les relations de la fonctionnalité",
  tooltip: {
    edit_layer: "Modifier le layer"
  },
  toolbox: {
    title: 'Modifier'
  },
  tools: {
    copy: "Copier les fonctionnalités",
    pastefeaturesfromotherlayers: "Paste features from other layer",
    addpart: "Ajouter une pièce à la géométrie",
    deletepart: "Supprimer la partie de la géométrie",
    merge: "Dissoudre les fonctionnalités",
    split: "Couper la fonctionnalité",
    add_feature: "Ajouter une fonctionnalité",
    delete_feature: "Supprimer la fonctionnalité",
    move_feature: "Déplacez la fonctionnalité",
    update_vertex: "Mettre à jour les sommets des fonctionnalités",
    update_feature: "Modifier les attributs des fonctionnalités",
    update_multi_features: "Modifier les attributs des fonctionnalités sélectionnées",
    copyfeaturefromexternallayer: "Create Feature from existing feature"
  },
  toolsoftool: {
    measure: "Show measure",
    snap: "Snap layer",
    snapall: "Snap to all layers"
  },
  table: {
    edit: "Modifier fonctionnalités",
    copy: "Créer une copie",
    delete: "Supprimer la fonctionnalité"
  },
  steps: {
    help: {
      select_elements: "Sélectionner les fonctionnalités",
      select_element: "Sélectionner une fonctionnalité",
      copy: "Créer une copie des fonctionnalités sélectionnées",
      merge: "Dissoudre les fonctionnalités",
      split: "Couper la fonctionnalité",
      new: "Créer une nouvelle fonctionnalité",
      edit_table: "Modifier les fonctionnalités de la table",
      draw_new_feature: "Dessiner une fonctionnalité sur la carte",
      action_confirm: "Confirmer l'action",
      double_click_delete: "Sélectionner la fonctionnalité sur la carte à supprimer",
      edit_feature_vertex: "Modifier ou ajouter un sommet à la fonctionnalité sélectionnée",
      move: "Déplacer la fonctionnalité sélectionnée",
      select_feature_to_relation: "Sélectionner la fonctionnalité que vous souhaitez mettre en relation",
      show_edit_feature_form: "Afficher le formulaire de la fonctionnalité permettant de modifier les attributs",
      pick_feature: "Sélectionner l'élément de la carte à modifier",
      insert_attributes_feature: "Insérer les attributs de la fonctionnalité"
    }
  },
  workflow: {
    steps: {
      select: 'Cliquer sur la fonctionnalité à sélectionner',
      draw_part: "Dessiner la nouvelle partie",
      merge: 'Sélectionner la fonction à introduire en fondu',
      selectPoint: "Cliquer sur la fonctionnalité pour la sélectionner",
      selectSHIFT: 'Sélectionner des fonctionnalités en maintenant la touche SHIFT enfoncée',
      selectDrawBox: "Sélectionner les fonctionnalités en dessinant un rectangle par la création des deux points de la diagonale",
      selectDrawBoxAtLeast2Feature: "Sélectionner au moins 2 fonctionnalités en dessinant un rectangle par la création des deux points de la diagonale",
      selectPointSHIFT: 'Sélectionner des caractéristiques en maintenant la touche SHIFT enfoncée (multi-sélection) ou en cliquant sur une seule caractéristique',
      selectMultiPointSHIFT: 'Sélectionner des fonctionnalités en maintenant la touche SHIFT appuyée ou en cliquant sur la fonctionnalité individuelle',
      selectMultiPointSHIFTAtLeast2Feature: 'Sélectionner au moins 2 fonctionnalités en maintenant la touche SHIFT appuyée ou en cliquant sur la fonctionnalité individuelle',
      copyCTRL: 'Copier les fonctionnalités sélectionnées avec CTRL+C',
      selectStartVertex: 'Sélectionner le sommet de départ des fonctionnalités choisies',
      selectToPaste: 'Sélectionner le point où les fonctionnalités sélectionnées seront collées',
      draw_split_line: "Tracez une ligne pour couper la fonctionnalité sélectionnée"
    }
  },
  messages: {
    featureslockbyotheruser: "Certaines géométries/enregistrements ne sont pas modifiables car ils ont été modifiés par un autre utilisateur",
    splitted: "Fonctionnalité(s) divisé(es)",
    nosplittedfeature: "La (les) fonctionnalité(s) n’a (n'ont) pas été divisé(es)",
    press_esc: "Appuyez sur ESC pour revenir",
    online: "Vous êtes à nouveau EN LIGNE. Vous pouvez enregistrer les modifications de façon permanente",
    offline: "Vous êtes HORS LIGNE. Toutes les modifications seront enregistrées temporairement en local",
    delete_feature: "Voulez-vous supprimer la fonctionnalité sélectionnée ?",
    delete_feature_relations: "La suppression d'une fonctionnalité avec des relations associées laissera ces relations orphelines. Il est recommandé de gérer ces relations avant de supprimer la fonctionnalité",
    unlink_relation: "Voulez-vous détacher la relation ?",
    commit_feature: "Voulez-vous enregistrer définitivement les changements ?",
    change_toolbox_relation: "Layer en relation. Il est obligatoire d'enregistrer les modifications en cours avant de passer à d'autres modifications.",
    saved: "Les données ont été enregistrées correctement",
    saved_local: "Les données ont été correctement sauvegardées localement",
    loading_data: "Chargement des données",
    saving: "Sauvegarde des données. Veuillez patienter ...",
    constraints: {
      enable_editing: "Augmenter le niveau de zoom pour permettre l'édition \nEchelle de déclenchement 1 :"
    },
    commit: {
      header: "La liste ci-dessous montre toutes les modifications qui seront enregistrées.",
      header_add: "<b>Ajouts</b> indique le nombre de fonctionnalités ajoutées",
      header_update_delete: "<b>Modifié</b> e <b>Supprimé</b> liste les ids",
      add: "Ajouté (n. fonctionnalités)",
      delete: "Supprimé(id)",
      update: "Modifié(id)"
    },
    loading_table_data: "Building Data Table. Please wait ...",
    copy_and_paste_from_other_layer_mandatory_fields: "Avant d'enregistrer, il est nécessaire de remplir tous les champs obligatoires du features saisi",
    no_feature_selected: "Aucune feature sélectionnée"
  },
  relation: {
    table: {
      info: "<div>S\xE9lectionner les relations pour les associer \xE0 l'\xE9l\xE9ment en cours d'\xE9dition.</div>"
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Back to edit father",
        add_relation: "Créer et ajouter une nouvelle relation",
        link_relation: "Associer une relation existante à cette fonctionnalité",
        open_relation_tools: "Outils de relation ouverte",
        unlink_relation: "Annuler la relation"
      }
    },
    buttons: {
      save: "Sauvegarder et quitter",
      save_and_back: "Sauvegarder et retourner au parent",
      cancel: "Ignorer modifications"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Select feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Select a feature"
      }
    }
  }
};

},{}],26:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _it = require('./it');

var _it2 = _interopRequireDefault(_it);

var _en = require('./en');

var _en2 = _interopRequireDefault(_en);

var _fi = require('./fi');

var _fi2 = _interopRequireDefault(_fi);

var _se = require('./se');

var _se2 = _interopRequireDefault(_se);

var _fr = require('./fr');

var _fr2 = _interopRequireDefault(_fr);

var _de = require('./de');

var _de2 = _interopRequireDefault(_de);

var _ro = require('./ro');

var _ro2 = _interopRequireDefault(_ro);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  it: _it2.default,
  en: _en2.default,
  fi: _fi2.default,
  se: _se2.default,
  fr: _fr2.default,
  de: _de2.default,
  ro: _ro2.default
};

},{"./de":22,"./en":23,"./fi":24,"./fr":25,"./it":27,"./ro":28,"./se":29}],27:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "Si è verificato un errore nel caricamento dei layers in editing.",
    some_layers: "Si è verificato un errore nel caricamento di alcuni layers in editing"
  },
  search: "Cerca",
  editing_changes: "Modifiche Editing",
  editing_data: "Edita Dati",
  editing_attributes: "Edita attributi",
  relations: "Relazioni",
  edit_relation: "Edita relazione",
  back_to_relations: "Ritorna alle Relazioni",
  no_relations_found: "Non ci sono relazioni",
  relation_data: "Dati relativi alla relazione",
  relation_already_added: "Relazione già presente",
  list_of_relations_feature: "Elenco Relazioni della feature ",
  tooltip: {
    edit_layer: "Modifica Layer"
  },
  toolbox: {
    title: 'Edita'
  },
  tools: {
    copy: "Copia features",
    pastefeaturesfromotherlayers: "Copia features da altro layer",
    addpart: "Aggiungi parte alla geometria",
    deletepart: "Cancella parte dalla geometria",
    merge: "Dissolvi features",
    split: "Taglia Feature",
    add_feature: "Aggiungi feature",
    delete_feature: "Elimina feature",
    move_feature: "Muovi feature",
    update_vertex: "Aggiorna vertici feature",
    update_feature: "Modifica attributi feature",
    update_multi_features: "Modifica gli attributi delle features selezionate",
    copyfeaturefromexternallayer: "Crea feature dal layer esistente"
  },
  toolsoftool: {
    measure: "Visualizza misura",
    snap: "Snap sul layer",
    snapall: "Snap su tutti i layer"
  },
  table: {
    edit: "Edita feature",
    copy: "Crea una copia",
    delete: "Cancella feature"
  },
  steps: {
    help: {
      select_elements: "Seleziona le features",
      select_element: "Seleziona la feature",
      copy: "Crea una copia delle feature selezionate",
      merge: "Dissolvi features",
      split: "Taglia Feature",
      new: "Creo una nuova feature",
      edit_table: "Edita le features della tabella",
      draw_new_feature: "Disegna sulla mappa la feature",
      action_confirm: "Conferma azione",
      double_click_delete: "Seleziona la feature sulla mappa da cancellare",
      edit_feature_vertex: "Modifica o aggiungi un vertice alla feature selezionata",
      move: "Muovi la feature selezionata",
      select_feature_to_relation: "Seleziona la feature che vuoi mettere in relazione",
      show_edit_feature_form: "Mostra il form della feature per poter editare gli attributi",
      pick_feature: "Seleziona la feature sulla mappa da modificare",
      insert_attributes_feature: "Inserisci gli attributi della feature"
    }
  },
  workflow: {
    steps: {
      select: 'Clicca sulla feature da selezionare',
      draw_part: "Disegna la nuova parte",
      merge: 'Seleziona la feature su cui dissolvere',
      selectPoint: "Clicca sulla feature per selezionarla",
      selectSHIFT: 'Seleziona le features tenedo premuto il tasto SHIFT',
      selectDrawBox: "Seleziona le features disegnando un rettangolo mediante la creazione dei due punti della diagonale",
      selectDrawBoxAtLeast2Feature: "Seleziona almeno 2 features disegnando un rettangolo mediante la creazione dei due punti della diagonale",
      selectPointSHIFT: 'Seleziona le features tenedo premuto il tasto SHIFT (multiselezione) oppure cliccando sulla singola feature',
      selectMultiPointSHIFT: 'Seleziona le features tenedo premuto il tasto SHIFT oppure cliccando sulla singola feature',
      selectMultiPointSHIFTAtLeast2Feature: 'Seleziona almeno 2 features tenedo premuto il tasto SHIFT oppure cliccando sulla singola feature',
      copyCTRL: 'Copia le features selezionate con CTRL+C',
      selectStartVertex: 'Seleziona il vertice di partenza delle feature selezionate',
      selectToPaste: 'Seleziona il punto dove verranno incollate le features selezionate',
      draw_split_line: "Disegna una linea per tagliare la feature selezionata"
    }
  },
  messages: {
    featureslockbyotheruser: "Ci sono alcune geometrie/records non editabili perchè in modifica da altri utenti",
    splitted: "Feature(s) splittata(e)",
    nosplittedfeature: "La(e) feature(s) non è stata splittata",
    press_esc: "Premi ESC per tornare indietro",
    online: "Ora sei di nuovo ONLINE. Puoi slavare le modifiche in modo permanente",
    offline: "Sei OFFLINE. Tutte le modifiche saranno salvate temporaneamente in locale",
    delete_feature: "Vuoi eliminare l'elemento selezionato?",
    delete_feature_relations: "Cancellando una feature con relazioni associate, tale relazioni rimarranno orfane. Si consiglia di gestire tali relazioni prima di cancellare la feature",
    unlink_relation: "Vuoi staccare la relazione?",
    commit_feature: "Vuoi salvare definitivamente le modifiche",
    change_toolbox_relation: "Layer in relazione. Prima di passare ad altri editing è obbligatorio salvare le modifiche correnti.",
    saved: "I dati sono stati salvati correttamente",
    saved_local: "I dati sono stati salvati correttamente in locale",
    loading_data: "Caricamento dati",
    saving: "Salvataggio dati in corso. Attendere ...",
    constraints: {
      enable_editing: "Aumentare il livello di zoom per abilitare l'editing \nScala di attivazione 1:"
    },
    commit: {
      header: "La lista sotto riporta tutte le modifiche che verranno salvate.",
      header_add: "<b>Aggiunte</b> riporta il numero delle features aggiunte",
      header_update_delete: "<b>Modificate</b> e <b>Cancellate</b> riporta la lista degli id",
      add: "Aggiunte (n. features)",
      delete: "Cancellate(id)",
      update: "Modificate(id)"
    },
    loading_table_data: "Costruzione tabella dati in corso. Attendere ...",
    copy_and_paste_from_other_layer_mandatory_fields: "Necessario compilare eventuali campi obbligatori sulle features incollate prima del salvataggio",
    no_feature_selected: "Nessuna feature selezionata"
  },
  relation: {
    table: {
      info: "<div>Seleziona le relazioni per associarle alla feature in editing.</div>"
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Torna ad editare il padre",
        add_relation: "Crea ed aggiungi nuova relazione",
        link_relation: "Associa una relazione esistente a questa feature",
        open_relation_tools: "Apri strumenti relatione",
        unlink_relation: "Annulla relazione"
      }
    },
    buttons: {
      save: "Salva ed Esci",
      save_and_back: "Salva e torna al padre",
      cancel: "Ignora Modifiche"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Seleziona feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Seleziona una feature"
      }
    }
  }
};

},{}],28:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "Avem o eroare. Straturile nu sunt editabile",
    some_layers: "Avem o eroare: Anumite straturi nu se pot edita"
  },
  search: "Caută",
  editing_changes: "Modificare schimbări",
  editing_data: "Modificare straturi",
  editing_attributes: "Modificare atribute",
  relations: "Relații",
  edit_relation: "Modifică relația",
  back_to_relations: "Înapoi la Relații",
  no_relations_found: "Nu am găsit relații",
  relation_data: "Date relații",
  relation_already_added: "Relație adăugată deja",
  list_of_relations_feature: "Lista relații entitatea ",
  tooltip: {
    edit_layer: "Modifică strat"
  },
  toolbox: {
    title: 'Modifică'
  },
  table: {
    edit: "Modifică entitate",
    copy: "Creează o copie",
    delete: "Elimină entitatea"
  },
  tools: {
    copy: "Copiază entitățile",
    pastefeaturesfromotherlayers: "Paste features from other layer",
    addpart: "Adaugă o parte la multiparte",
    deletepart: "Elimină partea din multiparte",
    merge: "Dizolvare entități",
    split: "Divizare Entitate",
    add_feature: "Adaugă entitate",
    delete_feature: "Eliminare entitate",
    move_feature: "Mută entitate",
    update_vertex: "Actualizează vertecșii entității",
    update_feature: "Actualizează atributul entității",
    update_multi_features: "Actualizează atributele entităților selectate",
    copyfeaturefromexternallayer: "Create Feature from existing feature"
  },
  toolsoftool: {
    measure: "Arată măsurătorile",
    snap: "Acroșare strat",
    snapall: "Acroșare pe toate straturile"
  },
  steps: {
    help: {
      select_elements: "Selectează entități",
      select_element: "Selectează entitate",
      copy: "Creează o nouă copie a entităților selectate",
      merge: "Dizolvă entitățile",
      split: "Divizare Entitate",
      new: "Creează o entitate",
      edit_table: "Modifică entitățile tabelare",
      draw_new_feature: "Desenează entitate pe hartă",
      action_confirm: "Confirmă acțiunea",
      double_click_delete: "Selectează entitatea de eliminat din hartă",
      edit_feature_vertex: "Modifică sau adaugă un vertex la entitatea selectată",
      move: "Mută entitatea selectată",
      select_feature_to_relation: "Selectează entitate pentru relaționare",
      show_edit_feature_form: "Arată formularul entității pentru modificări",
      pick_feature: "Selectează entitățile de modificat din hartă",
      insert_attributes_feature: "Inserează atributele entității"
    }
  },
  workflow: {
    steps: {
      select: 'Click pe entitate pentru a o selecta',
      draw_part: "Desenează o parte nouă",
      merge: 'Selectează partea de dizolvat',
      selectSHIFT: 'Selectează entități prin desen triunghi apăsând SHIFT',
      selectDrawBox: "Selectează entități desenând un dreptunghi prin două puncte opuse",
      selectDrawBoxAtLeast2Feature: "Selectează cel puțin 2 entități prin desenul unui dreptunghi",
      selectPoint: "Click pe entitate pentru selectare",
      selectPointSHIFT: 'Selectează entități prin desen dreptunghi apăsând SHIFT (multientități) sau prin click pe entitate',
      selectMultiPointSHIFT: 'Selectează entități prin desen dreptunghi apăsând SHIFT sau prin click pe entitate',
      selectMultiPointSHIFTAtLeast2Feature: 'Selectează cel puțin 2 entități prin desen dreptunghi apăsând SHIFT sau prin click pe entitate',
      copyCTRL: 'Copiază entitățile selectate folosint CTRL+C',
      selectStartVertex: 'Selectează vertexul de start a entităților selectate',
      selectToPaste: 'Selectează punctul unde să lipim entitățile selectate',
      draw_split_line: "Desenează o linie pentru a diviza entitatea selectată"
    }
  },
  messages: {
    featureslockbyotheruser: "Unele geometrii/înregistrări nu sunt editabile deoarece sunt editate de către alt utilizator",
    splitted: "Divizat",
    nosplittedfeature: "Entitate nedivizată",
    press_esc: "ESC pentru înapoi",
    online: "Înapoi ONLINE. Acum se pot salva schimbările",
    offline: "OFFLINE. Schimbările sunt salvate local",
    delete_feature: "Șterg entitatea selectată?",
    delete_feature_relations: "Dacă entitatea are relații care trimit la ea, acele relații devin orfane. Sugerăm să vă ocupați de acele elemente înainte să eliminați această entitate.",
    unlink_relation: "Dorești să eliminați legătura cu relația?",
    commit_feature: "Salvăm?",
    change_toolbox_relation: "Stratul este relaționat. Înainte de a trece la alte modificări trebuiesc salvate modificările.",
    saved: "Datele sunt salvate",
    saved_local: "Datele s-au salvat local",
    loading_data: "Datele se încarcă.",
    saving: "Salvăm datele. Așteptați ...",
    constraints: {
      enable_editing: "Pentru a activa Modificare faceți zoom la \nScara de activare 1:"
    },
    pdf: "Previzualizarea documentului nu este disponibilă. Click aici ",
    commit: {
      header: "Lista cu toate modificările.",
      header_add: "<b>Adăugate</b> arată nr. de entități adăugate",
      header_update_delete: "<b>Modificate</b> și <b>Șterse</b> arată lista de id-uri de entități",
      add: "Adăugate(n. entități)",
      delete: "Eliminate(id)",
      update: "Modificate(id)"
    },
    loading_table_data: "Încărcăm tabelul de date ...",
    copy_and_paste_from_other_layer_mandatory_fields: "Înainte de a salva, este necesar să completați toate câmpurile obligatorii ale entități introduse",
    no_feature_selected: "Nicio feature selectată"
  },
  relation: {
    table: {
      info: "\n                  <div>\n                    Selecteaz\u0103 rela\u021Biile pentru a face leg\u0103tura cu entitatea curent\u0103.\n                  </div>\n                  <div>\n                "
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Înapoi la modificările entității părinte",
        add_relation: "Creează și fă legătura unei relații noi",
        link_relation: "Leagă o relație de entitate",
        open_relation_tools: "Arată instrumentele pentru relații",
        unlink_relation: "Elimină legătura la relație"
      }
    },
    buttons: {
      save: "Salvează și ieși",
      save_and_back: "Salvează și dă înapoi",
      cancel: "Ignorați modificările"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Select feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Select a feature"
      }
    }
  }
};

},{}],29:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  errors: {
    no_layers: "Ett fel uppstod. Nivåerna kan inte redigeras.",
    some_layers: "Ett fel uppstod. Vissa nivåer kan inte redigeras."
  },
  search: "Sökning",
  editing_changes: "Editing Changes",
  editing_data: "Nivåerna redigeras",
  editing_attributes: "Attributen redigeras",
  relations: "Relationer",
  edit_relation: "Redigera relationen",
  back_to_relations: "Tillbaka till relationerna",
  no_relations_found: "Inga relationer hittades",
  relation_data: "Relationsuppgifter",
  relation_already_added: "Relationen har redan lagts till",
  list_of_relations_feature: "Lista på relationens egenskaper",
  tooltip: {
    edit_layer: "Redigera nivån"
  },
  toolbox: {
    title: 'Redigera'
  },
  table: {
    edit: "Redigera egenskap",
    copy: "Skapa en kopia",
    delete: "Ta bort egenskap"
  },
  tools: {
    copy: "Kopiera egenskaper",
    pastefeaturesfromotherlayers: "Paste features from other layer",
    addpart: "Lägg till del",
    deletepart: "Ta bort del",
    merge: "Slå samman egenskaper",
    split: "Dela upp egenskap",
    add_feature: "Lägg till egenskap",
    delete_feature: "Ta bort egenskap",
    move_feature: "Flytta egenskap",
    update_vertex: "Uppdatera punktens egenskap",
    update_feature: "Uppdatera egenskap",
    copyfeaturefromexternallayer: "Create Feature from existing feature"
  },
  toolsoftool: {
    measure: "Show measure",
    snap: "Snap layer",
    snapall: "Snap to all layers"
  },
  steps: {
    help: {
      select_elements: "Välj egenskaper",
      select_element: "Välj egenskapalitse ominaisuus",
      copy: "Skapa kopia av valda egenskaper",
      merge: "Slå samman egenskaper",
      split: "Dela upp egenskap",
      new: "Skapa ny egenskap",
      edit_table: "Ändra egenskaper i tabellen",
      draw_new_feature: "Piirrä ominaisuus kartalle",
      action_confirm: "Godkänn funktionen",
      double_click_delete: "Välj funktionen som du vill ta bort på kartan",
      edit_feature_vertex: "Ändra punkten eller lägg till punkten till den valda egenskapen",
      move: "Flytta den valda egenskapen",
      select_feature_to_relation: "Välj relation",
      show_edit_feature_form: "Visa egenskapsformuläret för redigering av attribut",
      pick_feature: "Välj funktion på kartan för att ändras",
      insert_attributes_feature: "Lägg till egenskapens attribut"
    }
  },
  workflow: {
    steps: {
      select: 'Välj egenskap',
      draw_part: "Rita ny del",
      merge: 'Välj egenskap att slå samman',
      selectSHIFT: 'Tryck SHIFT, om du vill välja objekt med hjälp av rektangel.', //Tero 10.12.2020
      selectDrawBox: "Rita upp den rektangel inom vilken objekten väljs ", //Tero 10.12.2020
      selectDrawBoxAtLeast2Feature: "Rita rektangeln inom vilken minst två objekt är markerade ",
      selectPoint: "Välj egenskap",
      selectPointSHIFT: 'Tryck SHIFT, om du vill välja objekt med hjälp av rektangel, eller välj en enskild egenskap.',
      selectMultiPointSHIFT: 'Tryck SHIFT, om du vill välja objekt med hjälp av rektangel, eller välj en enskild egenskap.',
      selectMultiPointSHIFTAtLeast2Feature: 'Tryck på SKIFT för att välja minst två objekt med en rektangel eller välj en enda egenskap. ',
      copyCTRL: 'CTRL+C, du kan kopiera valda egenskaper.', //Tero 10.12.2020
      selectStartVertex: 'Visa startpunkten för valda egenskaper.',
      selectToPaste: 'Välj punkt till vilken de valda egenskaperna ska fogas.',
      draw_split_line: "Rita en linje enligt vilken den valda egenskapen ska uppdelas."
    }
  },
  messages: {
    featureslockbyotheruser: "Jotkut geometriat/tietueet eivät ole muokattavissa, koska muut käyttäjät muokkaavat niitä",
    splitted: "Uppdelad",
    nosplittedfeature: "Egenskapen har inte delats upp",
    press_esc: "Tryck ESC för att gå tillbaka",
    online: "Förbindelsen har upprättats. Ändringar kan sparas i databasen.",
    offline: "Du är i offline-läge. Ändringarna sparas lokalt",
    delete_feature: "Vill du ta bort den valda egenskapen?",
    delete_feature_relations: "Om egenskapen saknar bindande relationer blir dessa relationer föräldralösa. Vi rekommenderar att du behandlar dessa relationer innan du lämnar programmet",
    unlink_relation: "Vill du ta bort relationen?",
    commit_feature: "Ska ändringarna sparas?",
    change_toolbox_relation: "Nivån har en relation/relationer. Spara ändringarna innan du börjar redigera.",
    saved: "Uppgifterna sparades",
    saved_local: "Uppgifterna sparades lokalt.",
    loading_data: "Uppgifterna laddas",
    saving: "Uppgifterna sparas. Vänta...",
    constraints: {
      enable_editing: "Zooma in för att börja använda redigeringsverktyg \nAktivering skala 1:"
    },
    pdf: "Förhandsgranskning av dokument är inte tillgänglig. Tryck här",
    commit: {
      header: "Följande lista visar alla ändringar.",
      header_add: "<b>Tillagda</b> visar antalet egenskaper som lagts till",
      header_update_delete: "<b>Redigerad</b> och <b>Borttagen</b> Visa en lista på egenskapernas id",
      add: "(n. egenskaper) har lagts till",
      delete: "Borttagen (id)",
      update: "Redigerad(id)"
    },
    loading_table_data: "Building Data Table. Please wait ...",
    copy_and_paste_from_other_layer_mandatory_fields: "It is necessary to fill in any mandatory fields on the features pasted before saving",
    no_feature_selected: "No feature selected"
  },
  relation: {
    table: {
      info: "\n                  <div>\n\t\t\t\t\tV\xE4lj relation f\xF6r l\xE4nkning till egenskap som ska redigeras.\n                  </div>\n                  <div>\n               \n                "
    }
  },
  form: {
    relations: {
      tooltips: {
        back_to_father: "Back to edit father",
        add_relation: "Skapa och länka ny relation",
        link_relation: "Foga relationen till denna egenskap",
        open_relation_tools: "Visa relationsverktyg",
        unlink_relation: "Ta bort relation"
      }
    },
    buttons: {
      save: "Spara och avsluta",
      save_and_back: "Spara och gå tillbaka",
      cancel: "Ignorera ändringar"
    }
  },
  modal: {
    tools: {
      copyfeaturefromotherlayer: {
        title: "Select feature/s"
      },
      copyfeaturefromprojectlayer: {
        title: "Select a feature"
      }
    }
  }
};

},{}],30:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  i18n: _i18n2.default
};

},{"./i18n":26}],31:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;
var FormComponent = g3wsdk.gui.vue.FormComponent;

var EditingFormService = require('./editingformservice');

function EditingFormComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  var EditingService = require('../services/editingservice');
  var relationsOptions = options.context_inputs || null;
  var layer = options.layer;

  var layerId = layer.getId();
  if (relationsOptions) {
    var feature = relationsOptions.inputs.features[relationsOptions.inputs.features.length - 1];
    var promise = feature.isNew() ? Promise.resolve() : EditingService.getLayersDependencyFeatures(layerId, {
      feature: feature,
      filterType: 'fid'
    });
    promise.then(function () {
      relationsOptions.formEventBus = _this.getService().getEventBus();
      var service = new EditingFormService(relationsOptions);
      var RelationComponents = service.buildRelationComponents();
      var customFormComponents = EditingService.getFormComponentsById(layerId);
      //check if add components to add
      customFormComponents.length && _this.addFormComponents(customFormComponents);
      // add relation component
      RelationComponents.length && _this.addFormComponents(RelationComponents);
      _this.getService().handleRelation = function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
          var relation = _ref.relation,
              layerId = _ref.layerId,
              feature = _ref.feature;
          var relationId;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  GUI.setLoadingContent(true);
                  relationId = relation.name;
                  _context.next = 4;
                  return EditingService.setLayerUniqueFieldValues(layer.getRelationById(relationId).getChild());

                case 4:
                  this.setCurrentComponentById(relationId);
                  GUI.setLoadingContent(false);

                case 6:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }();
    });
  }
}

inherit(EditingFormComponent, FormComponent);

module.exports = EditingFormComponent;

},{"../services/editingservice":42,"./editingformservice":32}],32:[function(require,module,exports){
var GUI = g3wsdk.gui.GUI;

var RelationComponent = require('../components/FormRelation.vue');
var EditingFormService = function EditingFormService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var EditingService = require('../services/editingservice');
  this.state = {
    relations: []
  };

  var _ref = options.inputs || {},
      layer = _ref.layer,
      features = _ref.features;
  // get back to Father function


  this._formEventBus = options.formEventBus || null;
  var layerId = layer.getId();
  // get feature
  var feature = features[features.length - 1];
  // get only relation with type not ONE and layer is the father
  var relations = layer.getRelations().getArray().filter(function (relation) {
    return relation.getType() !== 'ONE' && relation.getFather() === layerId;
  });
  /**
   * get relation layers that set in editing on g3w-admin
   */
  relations = EditingService.getRelationsInEditing({ layerId: layerId, relations: relations, feature: feature });
  this.hasRelations = function () {
    return !!relations.length;
  };
  this.buildRelationComponents = function () {
    var self = this;
    var relationComponents = [];
    relations.forEach(function (relation) {
      var relationComponent = Vue.extend({
        mixins: [RelationComponent],
        name: 'relation_' + Date.now(),
        methods: {
          getService: function getService() {
            return self._relationsService;
          }
        },
        data: function data() {
          return {
            layerId: layerId,
            relation: relation.relation,
            relations: relation.relations,
            resourcesurl: GUI.getResourcesUrl(),
            formeventbus: self._formEventBus
          };
        }
      });
      relationComponents.push({
        title: "plugins.editing.edit_relation",
        name: relation.relation.name,
        id: relation.relation.id,
        header: false, // not show to header form
        component: relationComponent
      });
    });
    return relationComponents;
  };
};

module.exports = EditingFormService;

},{"../components/FormRelation.vue":13,"../services/editingservice":42}],33:[function(require,module,exports){
var _ChooseFeatureToEdit = require('../components/ChooseFeatureToEdit.vue');

var _ChooseFeatureToEdit2 = _interopRequireDefault(_ChooseFeatureToEdit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ChooseFeatureToEditComponent() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$features = _ref.features,
      features = _ref$features === undefined ? [] : _ref$features,
      _ref$feature = _ref.feature,
      feature = _ref$feature === undefined ? null : _ref$feature,
      _ref$attributes = _ref.attributes,
      attributes = _ref$attributes === undefined ? [] : _ref$attributes;

  var Component = Vue.extend(_ChooseFeatureToEdit2.default);
  return new Component({
    features: features,
    feature: feature,
    attributes: attributes
  });
}

module.exports = ChooseFeatureToEditComponent;

},{"../components/ChooseFeatureToEdit.vue":9}],34:[function(require,module,exports){
var _Editing = require('../components/Editing.vue');

var _Editing2 = _interopRequireDefault(_Editing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit,
    merge = _g3wsdk$core$utils.merge; /* ORIGINAL SOURCE:
                                      * vue/editing.js@v3.4
                                      */

var GUI = g3wsdk.gui.GUI;
var Component = g3wsdk.gui.vue.Component;

var EditingService = require('../services/editingservice');

function PanelComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.vueComponent = _Editing2.default;
  var _options$name = options.name,
      name = _options$name === undefined ? 'Editing data' : _options$name;

  this.name = name;
  merge(this, options);
  this._resourcesUrl = options.resourcesUrl || GUI.getResourcesUrl();
  this._service = options.service || EditingService;
  var InternalComponent = Vue.extend(this.vueComponent);
  this.internalComponent = new InternalComponent({
    service: this._service,
    data: function data() {
      return {
        state: _this._service.state,
        resourcesurl: _this._resourcesUrl,
        showcommitbar: options.showcommitbar,
        editingButtonsEnabled: true
      };
    }
  });

  this.mount = function (parent) {
    return base(this, 'mount', parent, true);
  };

  this.unmount = function () {
    var _this2 = this;

    var d = $.Deferred();
    this._service.stop().finally(function () {
      _this2.unmount = function () {
        base(this, 'unmount').then(function () {
          return d.resolve();
        });
      };
      _this2.unmount();
    });
    return d.promise();
  };
}

inherit(PanelComponent, Component);

module.exports = PanelComponent;

},{"../components/Editing.vue":12,"../services/editingservice":42}],35:[function(require,module,exports){
var _CopyFeaturesFromOtherLayers = require('../components/CopyFeaturesFromOtherLayers.vue');

var _CopyFeaturesFromOtherLayers2 = _interopRequireDefault(_CopyFeaturesFromOtherLayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CatalogLayersStoresRegistry = g3wsdk.core.catalog.CatalogLayersStoresRegistry;


function SelectFeaturesFromOtherLayersComponent() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$features = _ref.features,
      features = _ref$features === undefined ? [] : _ref$features,
      _ref$selectedFeatures = _ref.selectedFeatures,
      selectedFeatures = _ref$selectedFeatures === undefined ? [] : _ref$selectedFeatures;

  var layers = {};
  features.forEach(function (feature) {
    var layerId = feature.__layerId;
    if (layers[layerId] === undefined) {
      var external = !CatalogLayersStoresRegistry.getLayerById(layerId);
      layers[layerId] = {
        external: external,
        fields: !external && CatalogLayersStoresRegistry.getLayerById(layerId).getFields(),
        features: []
      };
    }
    layers[layerId].features.push(feature);
  });
  var Component = Vue.extend(_CopyFeaturesFromOtherLayers2.default);
  return new Component({
    layers: layers,
    selectedFeatures: selectedFeatures
  });
}

module.exports = SelectFeaturesFromOtherLayersComponent;

},{"../components/CopyFeaturesFromOtherLayers.vue":10}],36:[function(require,module,exports){
var _CopyFeaturesFromOtherProjectLayer = require('../components/CopyFeaturesFromOtherProjectLayer.vue');

var _CopyFeaturesFromOtherProjectLayer2 = _interopRequireDefault(_CopyFeaturesFromOtherProjectLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CatalogLayersStoresRegistry = g3wsdk.core.catalog.CatalogLayersStoresRegistry;


function SelectFeaturesFromOtherLayersComponent() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref.layer,
      external = _ref.external,
      _ref$features = _ref.features,
      features = _ref$features === undefined ? [] : _ref$features,
      _ref$selectedFeatures = _ref.selectedFeatures,
      selectedFeatures = _ref$selectedFeatures === undefined ? [] : _ref$selectedFeatures;

  var Component = Vue.extend(_CopyFeaturesFromOtherProjectLayer2.default);
  return new Component({
    features: features,
    fields: !external ? CatalogLayersStoresRegistry.getLayerById(layer.getId()).getFields() : null,
    selectedFeatures: selectedFeatures
  });
}

module.exports = SelectFeaturesFromOtherLayersComponent;

},{"../components/CopyFeaturesFromOtherProjectLayer.vue":11}],37:[function(require,module,exports){
/* ORIGINAL SOURCE:
* vue/components/selectfeatures/selectfeatures.js@v3.4
*/

var toRawType = g3wsdk.core.utils.toRawType;


function SelectFeaturesDom() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      features = _ref.features,
      events = _ref.events;

  var Component = Vue.extend({
    data: function data() {
      return {
        selected: null
      };
    },
    render: function render(h) {
      var _this = this;

      var columns = Object.keys(features[0].getAlphanumericProperties());
      var header = columns.map(function (property) {
        return h('th', property);
      });
      var thead = h('thead', [h('tr', header)]);
      var rows = features.map(function (feature, index) {
        var values = columns.map(function (column) {
          var value = feature.get(column);
          value = toRawType(value) === 'Object' ? value.value : value;
          return h('td', value);
        });
        return h('tr', {
          on: {
            click: function click() {
              _this.selected = index;
              events.click(index);
            }
          },
          style: {
            cursor: 'pointer'
          },
          class: {
            'skin-background-color lighten': _this.selected === index
          }
        }, values);
      });
      var tbody = h('tbody', rows);
      var table = h('table', {
        class: {
          'table table-responsive table-striped': true
        }
      }, [thead, tbody]);
      return h('div', {
        style: {
          width: '100%',
          'overflow': 'auto'
        }
      }, [table]);
    }
  });
  return new Component().$mount().$el;
}

module.exports = SelectFeaturesDom;

},{}],38:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* ORIGINAL SOURCE:
                                                                                                                                                                                                                                                                  * table/table.js@v3.4
                                                                                                                                                                                                                                                                  */

var _Table = require('../components/Table.vue');

var _Table2 = _interopRequireDefault(_Table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var Component = g3wsdk.gui.vue.Component;
var TableService = require('../services/tableservice');

var InternalComponent = Vue.extend(_Table2.default);

var TableComponent = function TableComponent() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  var service = options.service || new TableService(_extends({}, options));
  this.setService(service);
  var internalComponent = new InternalComponent({
    service: service
  });
  this.setInternalComponent(internalComponent);
  internalComponent.state = service.state;
  service.once('ready', function () {
    return _this.emit('ready');
  });
  this.unmount = function () {
    service.cancel();
    return base(this, 'unmount');
  };
};

inherit(TableComponent, Component);

module.exports = TableComponent;

},{"../components/Table.vue":16,"../services/tableservice":44}],39:[function(require,module,exports){
var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var BasePlugin = g3wsdk.core.plugin.Plugin;

var GUI = g3wsdk.gui.GUI;
var Service = require('./services/editingservice');
var EditingPanel = require('./panel');

var Plugin = function Plugin() {
  var _this = this;

  base(this, {
    name: 'editing',
    i18n: _config2.default.i18n,
    service: Service,
    fontClasses: [{
      name: 'measure',
      className: "fas fa-ruler-combined"
    }, {
      name: 'magnete',
      className: "fas fa-magnet"
    }, {
      name: 'clipboard',
      className: "fas fa-clipboard"
    }]
  });
  var pluginGroupTool = {
    position: 0,
    title: 'EDITING'
  };
  var show_errors = {
    some_layers: false
  };
  this.panel; // editing panel reference

  // check if exist any layer to edit
  if (this.service.loadPlugin()) {
    this.setHookLoading({
      loading: true
    });
    this.service.once('ready', function () {
      //plugin registry
      if (_this.registerPlugin(_this.config.gid)) {
        if (!GUI.isready) GUI.on('ready', _this.setupGui.bind(_this));else _this.setupGui();
      }
      _this.setHookLoading({
        loading: false
      });
      var api = _this.service.getApi();
      _this.setApi(api);
      _this.setReady(true);
    });
    //inizialize service
    this.service.init(this.config);
  }

  //setup plugin interface
  this.setupGui = function () {
    if (this.config.visible === false) return false;
    this.config.name = this.config.name || "plugins.editing.editing_data";
    this.addToolGroup(pluginGroupTool);
    this.addTools({
      action: this.showEditingPanel,
      offline: false,
      icon: 'pencil'
    }, pluginGroupTool);
  };

  //method to show editing panel
  this.showEditingPanel = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this.service.getLayers().length > 0) {
      this.panel = new EditingPanel(options);
      GUI.showPanel(this.panel);
      if (!show_errors.some_layers && this.service.getLayersInError()) {
        GUI.showUserMessage({
          type: 'warning',
          message: 'plugins.editing.errors.some_layers',
          closable: true
        });
        show_errors.some_layers = true;
      }
    } else {
      GUI.showUserMessage({
        type: 'alert',
        message: 'plugins.editing.errors.no_layers'
      });
    }
    return this.panel;
  };

  this.hideEditingPanel = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.panel && GUI.closePanel();
    this.panel = null;
  };

  this.unload = function () {
    this.panel = null;
    this.config.visible && this.removeTools();
    this.service.clear();
  };
};

inherit(Plugin, BasePlugin);

new Plugin();

},{"./config":30,"./panel":41,"./services/editingservice":42}],40:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var PickFeaturesEventType = {
  PICKED: 'picked'
};

var PickFeaturesEvent = function PickFeaturesEvent(type, coordinate, layer, features) {
  this.type = type;
  this.features = features;
  this.coordinate = coordinate;
  this.layer = layer;
};

var PickFeaturesInteraction = exports.PickFeaturesInteraction = function PickFeaturesInteraction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  ol.interaction.Pointer.call(this, {
    handleDownEvent: PickFeaturesInteraction.handleDownEvent_,
    handleUpEvent: PickFeaturesInteraction.handleUpEvent_,
    handleMoveEvent: PickFeaturesInteraction.handleMoveEvent_
  });
  this.layer = options.layer;
  this.pickedFeatures = [];
};

ol.inherits(PickFeaturesInteraction, ol.interaction.Pointer);

PickFeaturesInteraction.handleDownEvent_ = function (event) {
  this.pickedFeatures = this.featuresAtPixel(event);
  return this.pickedFeatures;
};

PickFeaturesInteraction.handleUpEvent_ = function (event) {
  if (this.pickedFeatures && this.pickedFeatures.length) {
    this.dispatchEvent(new PickFeaturesEvent(PickFeaturesEventType.PICKED, event.coordinate, this.layer, this.pickedFeatures));
  }
  return true;
};

PickFeaturesInteraction.prototype.featuresAtPixel = function () {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      pixel = _ref.pixel,
      map = _ref.map;

  return map.getFeaturesAtPixel(pixel, {
    layerFilter: function layerFilter(layer) {
      return layer === _this.layer;
    },
    hitTolerance: isMobile && isMobile.any ? 10 : 0
  });
};

PickFeaturesInteraction.handleMoveEvent_ = function (event) {
  var elem = event.map.getTargetElement();
  var intersectingFeatures = this.featuresAtPixel(event);
  elem.style.cursor = intersectingFeatures ? 'pointer' : '';
};

PickFeaturesInteraction.prototype.shouldStopEvent = function () {
  return false;
};

PickFeaturesInteraction.prototype.setMap = function (map) {
  if (!map) {
    var elem = this.getMap().getTargetElement();
    elem.style.cursor = '';
  }
  ol.interaction.Pointer.prototype.setMap.call(this, map);
};

},{}],41:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingComponent = require('./g3w-editing-components/editing');

function EditingPanelComponent() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // editortoolsbars
  options.id = "editing-panel";
  options.title = options.title || "plugins.editing.editing_data";
  options.name = "Editing Layer";
  options.toolboxes = options.toolboxes || null;
  options.showcommitbar = options.showcommitbar === undefined ? true : options.showcommitbar;
  base(this, options);
}

inherit(EditingPanelComponent, EditingComponent);

module.exports = EditingPanelComponent;

},{"./g3w-editing-components/editing":34}],42:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _api = require('../api');

var _api2 = _interopRequireDefault(_api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var G3W_FID = g3wsdk.constant.G3W_FID;
var _g3wsdk$core = g3wsdk.core,
    ApplicationState = _g3wsdk$core.ApplicationState,
    ApplicationService = _g3wsdk$core.ApplicationService;
var DataRouterService = g3wsdk.core.data.DataRouterService;
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit,
    XHR = _g3wsdk$core$utils.XHR;
var Geometry = g3wsdk.core.geometry.Geometry;
var _g3wsdk$core$geoutils = g3wsdk.core.geoutils,
    getFeaturesFromResponseVectorApi = _g3wsdk$core$geoutils.getFeaturesFromResponseVectorApi,
    isSameBaseGeometryType = _g3wsdk$core$geoutils.isSameBaseGeometryType;
var WorkflowsStack = g3wsdk.core.workflow.WorkflowsStack;
var PluginService = g3wsdk.core.plugin.PluginService;
var SessionsRegistry = g3wsdk.core.editing.SessionsRegistry;
var CatalogLayersStoresRegistry = g3wsdk.core.catalog.CatalogLayersStoresRegistry;
var MapLayersStoreRegistry = g3wsdk.core.map.MapLayersStoreRegistry;
var _g3wsdk$core$layer = g3wsdk.core.layer,
    Layer = _g3wsdk$core$layer.Layer,
    LayersStore = _g3wsdk$core$layer.LayersStore;
var Feature = g3wsdk.core.layer.features.Feature;
var GUI = g3wsdk.gui.GUI;
var serverErrorParser = g3wsdk.core.errors.parsers.Server;

var t = g3wsdk.core.i18n.tPlugin;
var _g3wsdk$ol$utils = g3wsdk.ol.utils,
    getScaleFromResolution = _g3wsdk$ol$utils.getScaleFromResolution,
    getResolutionFromScale = _g3wsdk$ol$utils.getResolutionFromScale;

var ToolBoxesFactory = require('../toolboxes/toolboxesfactory');
var CommitFeaturesWorkflow = require('../workflows/commitfeaturesworkflow');
var MAPCONTROL_TOGGLED_EVENT_NAME = 'mapcontrol:toggled';
var OFFLINE_ITEMS = {
  CHANGES: 'EDITING_CHANGES'
};

function EditingService() {
  var _this = this;

  base(this);
  // contains alla sessions
  this._sessions = {};
  // constraints
  this.constraints = {};
  this._vectorUrl;
  this._projectType;
  // contain array of object setter(as key), key to unby (as value)
  this._unByKeys = [];
  // store setter keys event listerner
  this.setterKeys = [];
  // events
  this._events = {
    layer: {
      start_editing: {
        before: {},
        after: {}
      }
    }
  };
  /**
   * Store unique fields value for each layer
   * @type {{mode: string, messages: undefined, modal: boolean, cb: {error: undefined, done: undefined}}}
   */
  this.layersUniqueFieldsValues = {};

  this.saveConfig = {
    mode: "default", // default, autosave
    modal: false,
    messages: undefined, // object to set custom message
    cb: {
      done: undefined, // function after commit change done
      error: undefined // function after commit chenges error
    }
  };

  //application editing contraints
  //Usefult if some plgin or case we need to setup a editing contrains such as layer, filter to get features
  this.applicationEditingConstraints = {
    toolboxes: {},
    showToolboxesExcluded: true
  };

  // state of editing
  this.state = {
    open: false, // check if panel is open or not
    toolboxes: [],
    toolboxselected: null,
    toolboxidactivetool: null,
    message: null,
    relations: []
  };

  /**
   */
  this.loadLayersFeaturesToResultWhenCloseEditing = {
    // KEY LAYERID, VALUES ARRAY OF FEATURE FID CHANGES OR ADDED
  };

  this._layers_in_error = false;
  //mapservice
  this._mapService = GUI.getService('map');
  //set mapcontrol toggle event
  this.mapControlToggleEventHandler = function (evt) {
    if (evt.target.isToggled() && evt.target.isClickMap()) {
      var toolboxselected = _this.state.toolboxselected;
      toolboxselected && toolboxselected.getActiveTool() && toolboxselected.stopActiveTool();
    }
  };

  this._mapService.on(MAPCONTROL_TOGGLED_EVENT_NAME, this.mapControlToggleEventHandler);
  //plugin components
  this._formComponents = {};
  this._subscribers = {};
  this.init = function () {
    var _this2 = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this._vectorUrl = config.vectorurl;
    this._projectType = config.project_type;
    this._layersstore = new LayersStore({
      id: 'editing',
      queryable: false
    });
    //add editing layer store to mapstoreregistry
    MapLayersStoreRegistry.addLayersStore(this._layersstore);
    this.config = config;
    this._editableLayers = {};
    this._toolboxes = [];
    this.state.toolboxes = [];
    var layers = this._getEditableLayersFromCatalog();
    var EditableLayersPromises = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = layers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var layer = _step.value;

        // getLayerForEditing return a promise with layer usefult for editing
        EditableLayersPromises.push(layer.getLayerForEditing({
          vectorurl: this._vectorUrl,
          project_type: this._projectType
        }));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    Promise.allSettled(EditableLayersPromises).then(function (editableLayers) {
      editableLayers.forEach(function (promise) {
        var status = promise.status,
            value = promise.value;

        if (status === "fulfilled") {
          var editableLayer = value;
          var layerId = editableLayer.getId();
          _this2._editableLayers[layerId] = editableLayer;
          _this2._attachLayerWidgetsEvent(editableLayer);
          _this2._sessions[layerId] = null;
        } else _this2._layers_in_error = true;
      });
      _this2._ready();
    });
  };
  this._ready = function () {
    this.registerFeaturesLockByOtherUserSetterHandler();
    // set toolbox colors
    this.setLayersColor();
    // after add layers to layerstore
    this._layersstore.addLayers(this.getLayers());
    // create toolboxes
    this._buildToolBoxes();
    // create a dependencies tree
    this._createToolBoxDependencies();
    //setApi
    this.setApi({
      api: new _api2.default({
        service: this
      })
    });
    this.registerResultEditingAction();
    this.emit('ready');
  };
}

inherit(EditingService, PluginService);

var proto = EditingService.prototype;

//api methods

proto.getAppState = function () {
  return ApplicationState;
};

proto.getFormComponentsById = function (layerId) {
  return this._formComponents[layerId] || [];
};

proto.getFormComponents = function () {
  return this._formComponents;
};

proto.addFormComponents = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref.layerId,
      _ref$components = _ref.components,
      components = _ref$components === undefined ? [] : _ref$components;

  if (!this._formComponents[layerId]) this._formComponents[layerId] = [];
  for (var i = 0; i < components.length; i++) {
    var component = components[i];
    this._formComponents[layerId].push(component);
  }
};

proto.getSession = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref2.layerId;

  var toolbox = this.getToolBoxById(layerId);
  return toolbox.getSession();
};

proto.getFeature = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref3.layerId;

  var toolbox = this.getToolBoxById(layerId);
  var tool = toolbox.getActiveTool();
  return tool.getFeature();
};

proto.subscribe = function (event, fnc) {
  if (!this._subscribers[event]) this._subscribers[event] = [];
  if (!this._subscribers[event].find(function (subscribe) {
    return subscribe === fnc;
  })) this._subscribers[event].push(fnc);
  return fnc;
};

proto.unsubscribe = function (event, fnc) {
  this._subscribers[event] = this._subscribers[event].filter(function (subscribe) {
    return subscribe !== fnc;
  });
};

// END API

proto.registerFeaturesLockByOtherUserSetterHandler = function () {
  this.getLayers().forEach(function (editingLayer) {
    editingLayer.getFeaturesStore().onafter('featuresLockedByOtherUser', function () {
      GUI.showUserMessage({
        type: 'warning',
        subtitle: editingLayer.getName().toUpperCase(),
        message: 'plugins.editing.messages.featureslockbyotheruser'
      });
    });
  });
};

/**
 * Register result editing action
 */
proto.registerResultEditingAction = function () {
  var _this3 = this;

  var queryResultsService = GUI.getService('queryresults');
  this.setterKeys.push({
    setter: 'editFeature',
    key: queryResultsService.onafter('editFeature', function (_ref4) {
      var layer = _ref4.layer,
          feature = _ref4.feature;

      _this3.editResultLayerFeature({
        layer: layer,
        feature: feature
      });
    })
  });
};

proto.unregisterResultEditingAction = function () {
  var queryResultsService = GUI.getService('queryresults');
  this.setterKeys.forEach(function (_ref5) {
    var setter = _ref5.setter,
        key = _ref5.key;
    return queryResultsService.un(setter, key);
  });
};

/**
 * function to start to edit feature selected from results;
 *
 */
proto.editResultLayerFeature = function () {
  var _this4 = this;

  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref6.layer,
      feature = _ref6.feature;

  // get Layer Id
  var layerId = layer.id;
  // get Feature id
  var featureId = feature.attributes[G3W_FID];
  this.getToolBoxes().forEach(function (toolbox) {
    return toolbox.setShow(toolbox.getId() === layerId);
  });
  this.getPlugin().showEditingPanel();
  var toolBox = this.getToolBoxById(layerId);
  //get scale constraint from setting layer

  var _toolBox$getEditingCo = toolBox.getEditingConstraints(),
      scale = _toolBox$getEditingCo.scale;
  // if feature has geometry


  if (feature.geometry) {
    typeof scale !== "undefined" && this._mapService.getMap().once('moveend', function () {
      var mapUnits = _this4._mapService.getMapUnits();
      var map = _this4._mapService.getMap();
      //check current scale after zoom to feature
      var currentScale = parseInt(getScaleFromResolution(map.getView().getResolution(), mapUnits));
      // if currentScale is more that scale constraint set by layer editing
      // need to go to scale setting by layer editing constraint
      if (currentScale > scale) {
        var resolution = getResolutionFromScale(scale, mapUnits);
        map.getView().setResolution(resolution);
      }
    });
  }
  // start toolbox
  toolBox.start({
    filter: {
      fids: featureId // filter by fid (feature id)
    }
  }).then(function (_ref7) {
    var _ref7$features = _ref7.features,
        features = _ref7$features === undefined ? [] : _ref7$features;

    //const feature = features.find(feature => feature.getId() == featureId);
    /**
     *
     * Need to get feature from Editing layer source because it has a style layer
     */
    var feature = toolBox.getLayer().getEditingLayer().getSource().getFeatures().find(function (feature) {
      return feature.getId() == featureId;
    });
    if (feature) {
      feature.getGeometry() && _this4._mapService.zoomToGeometry(feature.getGeometry());
      toolBox.setSelected(true);
      var session = toolBox.getSession();
      _this4.setSelectedToolbox(toolBox);
      var workflow = require('../workflows/editnopickmapfeatureattributesworkflow');
      var options = {
        inputs: {
          layer: toolBox.getLayer(),
          features: [feature]
        },
        context: {
          session: session
        }
      };
      var editFeatureWorkFlow = new workflow({
        runOnce: true
      });
      editFeatureWorkFlow.start(options).then(function () {
        return session.save().then(function () {
          return _this4.saveChange();
        });
      }).fail(function () {
        return session.rollback();
      });
    }
  }).fail(function (err) {
    return console.log(err);
  });
};

/**
 *
 */
proto.disableMapControlsConflict = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this._mapService.disableClickMapControls(bool);
};

/**
 * Used on commit if no toolbox is passed as parameter
 * @param toolbox
 */
proto.setSelectedToolbox = function (toolbox) {
  this.state.toolboxselected = toolbox;
};

/**
 * 
 */
proto.getToolboxSelected = function () {
  return this.state.toolboxselected;
};

/**
 * 
 */

// create a new feature
proto.addNewFeature = function (layerId) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var geometry = options.geometry,
      properties = options.properties;

  var feature = new Feature();
  geometry && feature.setGeometry(new ol.geom[geometry.type](geometry.coordinates));
  feature.setProperties(properties);
  feature.setTemporaryId();
  var toolbox = this.getToolBoxById(layerId);
  var editingLayer = toolbox.getLayer().getEditingLayer();
  var session = toolbox.getSession();
  editingLayer.getSource().addFeature(feature);
  session.pushAdd(layerId, feature, false);
  return feature;
};

proto.getLayersInError = function () {
  return this._layers_in_error;
};

proto.getMapService = function () {
  return this._mapService;
};

proto._initOffLineItems = function () {
  for (var id in OFFLINE_ITEMS) {
    !this.getOfflineItem(OFFLINE_ITEMS[id]) && ApplicationService.setOfflineItem(OFFLINE_ITEMS[id]);
  }
};

proto._handleOfflineChangesBeforeSave = function (data) {
  var changes = ApplicationService.getOfflineItem(OFFLINE_ITEMS.CHANGES);
  var applyChanges = function applyChanges(_ref8) {
    var layerId = _ref8.layerId,
        current = _ref8.current,
        previous = _ref8.previous;

    current[layerId].add = [].concat(_toConsumableArray(previous[layerId].add), _toConsumableArray(current[layerId].add));
    current[layerId].delete = [].concat(_toConsumableArray(previous[layerId].delete), _toConsumableArray(current[layerId].delete));
    previous[layerId].update.forEach(function (updateItem) {
      var id = updateItem.id;

      var find = current[layerId].update.find(function (updateItem) {
        return updateItem.id === id;
      });
      !find && current[layerId].update.unshift(updateItem);
    });
    var lockids = previous[layerId].lockids || [];
    lockids.forEach(function (lockidItem) {
      var featureid = lockidItem.featureid;

      var find = current[layerId].lockids.find(function (lockidItem) {
        return lockidItem.featureid === featureid;
      });
      !find && current[layerId].update.unshift(lockidItem);
    });
  };
  for (var layerId in changes) {
    // check if previous changes are made in the same layer or in relationlayer of current
    var current = data[layerId] ? data : data[Object.keys(data)[0]].relations[layerId] ? data[Object.keys(data)[0]].relations : null;
    if (current) applyChanges({
      layerId: layerId,
      current: current,
      previous: changes
    });else {
      // check if in the last changes
      var currentLayerId = Object.keys(data)[0];
      var relationsIds = Object.keys(changes[layerId].relations);
      if (relationsIds.length) {
        if (relationsIds.indexOf(currentLayerId) !== -1) {
          applyChanges({
            layerId: currentLayerId,
            current: data,
            previous: changes[layerId].relations
          });
          changes[layerId].relations[currentLayerId] = data[currentLayerId];
          data = changes;
        }
      } else data[layerId] = changes[layerId];
    }
  }
  return data;
};

proto.saveOfflineItem = function () {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref9.id,
      data = _ref9.data;

  if (id === OFFLINE_ITEMS.CHANGES) data = this._handleOfflineChangesBeforeSave(data);
  return ApplicationService.setOfflineItem(id, data);
};

proto.setOfflineItem = function (id, data) {
  ApplicationService.setOfflineItem(id, data);
};

proto.getOfflineItem = function (id) {
  return ApplicationService.getOfflineItem(id);
};

/**
 * Check if alread have off lines changes
 * @param modal
 * @returns {Promise<unknown>}
 */
proto.checkOfflineChanges = function () {
  var _this5 = this;

  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref10$modal = _ref10.modal,
      modal = _ref10$modal === undefined ? true : _ref10$modal,
      _ref10$unlock = _ref10.unlock,
      unlock = _ref10$unlock === undefined ? false : _ref10$unlock;

  return new Promise(function (resolve, reject) {
    var changes = ApplicationService.getOfflineItem(OFFLINE_ITEMS.CHANGES);
    // if find changes offline previously
    if (changes) {
      var promises = [];
      var layerIds = [];
      //FORCE TO WAIT OTHERWISE STILL OFF LINE
      setTimeout(function () {
        for (var layerId in changes) {
          layerIds.push(layerId);
          var toolbox = _this5.getToolBoxById(layerId);
          var commitItems = changes[layerId];
          promises.push(_this5.commit({
            toolbox: toolbox,
            commitItems: commitItems,
            modal: modal
          }));
        }
        $.when.apply(_this5, promises).then(function () {
          return resolve();
        }).fail(function (error) {
          return reject(error);
        }).always(function () {
          unlock && layerIds.forEach(function (layerId) {
            _this5.getLayerById(layerId).unlock();
          });
          // always reset items to null
          _this5.setOfflineItem(OFFLINE_ITEMS.CHANGES);
        });
      }, 1000);
    }
  });
};

/**
 * called by Editng Panel on creation time
 */
proto.registerOnLineOffLineEvent = function () {
  var _this6 = this;

  // in case of starting panel editing check if there arae some chenging pending
  // if true i have to commit chanhes on server and ulock all layers features temporary locked
  if (ApplicationState.online) this.checkOfflineChanges({
    unlock: true
  });
  var offlineKey = ApplicationService.onafter('offline', function () {});
  var onlineKey = ApplicationService.onafter('online', function () {
    _this6.checkOfflineChanges({
      modal: false
    }).then(function () {}).catch(function (error) {
      return GUI.notify.error(error);
    });
  });

  this._unByKeys.push({
    owner: ApplicationService,
    setter: 'offline',
    key: offlineKey
  });

  this._unByKeys.push({
    owner: ApplicationService,
    setter: 'online',
    key: onlineKey
  });
};

proto.unregisterOnLineOffLineEvent = function () {
  this.unregisterSettersEvents(['online', 'offline']);
};

proto.unregisterSettersEvents = function () {
  var setters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  this._unByKeys.forEach(function (registered) {
    var owner = registered.owner,
        setter = registered.setter,
        key = registered.key;

    owner.un(setter, key);
  });
};

proto.fireEvent = function (event) {
  var _this7 = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return new Promise(function (resolve) {
    _this7._subscribers[event] && _this7._subscribers[event].forEach(function (fnc) {
      var response = fnc(options);
      response && response.once && _this7.unsubscribe(event, fnc);
    });
    resolve();
  });
};

proto.activeQueryInfo = function () {
  this._mapService.activeMapControl('query');
};

proto.setLayersColor = function () {

  var LAYERS_COLOR = ["#C43C39", '#d95f02', "#91522D", "#7F9801", "#0B2637", "#8D5A99", "#85B66F", "#8D2307", "#2B83BA", "#7D8B8F", "#E8718D", "#1E434C", "#9B4F07", '#1b9e77', "#FF9E17", '#7570b3', "#204B24", "#9795A3", "#C94F44", "#7B9F35", "#373276", "#882D61", "#AA9039", "#F38F3A", "#712333", "#3B3A73", "#9E5165", "#A51E22", "#261326", "#e4572e", "#29335c", "#f3a712", "#669bbc", "#eb6841", "#4f372d", "#cc2a36", "#00a0b0", "#00b159", "#f37735", "#ffc425"];

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = this.getLayers()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var layer = _step2.value;

      !layer.getColor() ? layer.setColor(LAYERS_COLOR.splice(0, 1)[0]) : null;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
};

proto._layerChildrenRelationInEditing = function (layer) {
  var _this8 = this;

  var relations = layer.getChildren();
  var childrenrealtioninediting = relations.filter(function (relation) {
    return _this8.getLayerById(relation);
  });
  return childrenrealtioninediting;
};

/**
 * Undo method
 */
proto.undo = function () {
  var session = this.state.toolboxselected.getSession();
  var layerId = session.getId();
  var sessionItems = session.getLastHistoryState().items;
  this.undoRedoLayerUniqueFieldValues({
    layerId: layerId,
    sessionItems: sessionItems,
    action: 'undo'
  });
  var undoItems = session.undo();

  this.undoRedoRelationUniqueFieldValues({
    relationSessionItems: undoItems,
    action: 'undo'
  });

  this.undoRelations(undoItems);
};

// undo relations
proto.undoRelations = function (undoItems) {
  var _this9 = this;

  Object.entries(undoItems).forEach(function (_ref11) {
    var _ref12 = _slicedToArray(_ref11, 2),
        toolboxId = _ref12[0],
        items = _ref12[1];

    var toolbox = _this9.getToolBoxById(toolboxId);
    var session = toolbox.getSession();
    session.undo(items);
  });
};

// undo relations
proto.rollbackRelations = function (rollbackItems) {
  var _this10 = this;

  Object.entries(rollbackItems).forEach(function (_ref13) {
    var _ref14 = _slicedToArray(_ref13, 2),
        toolboxId = _ref14[0],
        items = _ref14[1];

    var toolbox = _this10.getToolBoxById(toolboxId);
    var session = toolbox.getSession();
    session.rollback(items);
  });
};

/**
 *  method
 */
proto.redo = function () {
  var session = this.state.toolboxselected.getSession();
  var layerId = session.getId();
  var sessionItems = session.getLastHistoryState().items;
  this.undoRedoLayerUniqueFieldValues({
    layerId: layerId,
    sessionItems: sessionItems,
    action: 'redo'
  });
  var redoItems = session.redo();

  this.undoRedoRelationUniqueFieldValues({
    relationSessionItems: redoItems,
    action: 'redo'
  });

  this.redoRelations(redoItems);
};

// redo relations
proto.redoRelations = function (redoItems) {
  var _this11 = this;

  Object.entries(redoItems).forEach(function (_ref15) {
    var _ref16 = _slicedToArray(_ref15, 2),
        toolboxId = _ref16[0],
        items = _ref16[1];

    var toolbox = _this11.getToolBoxById(toolboxId);
    var session = toolbox.getSession();
    session.redo(items);
  });
};

proto.getEditingLayer = function (id) {
  return this._editableLayers[id].getEditingLayer();
};

/**
 * options contain eventually editing type (create/update/delete)
 * @param options
 * @private
 */
proto._buildToolBoxes = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = this.getLayers()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var layer = _step3.value;

      var toolbox = ToolBoxesFactory.build(layer, options);
      this.addToolBox(toolbox);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

proto.addToolBox = function (toolbox) {
  this._toolboxes.push(toolbox);
  // add session
  this._sessions[toolbox.getId()] = toolbox.getSession();
  this.state.toolboxes.push(toolbox.state);
};

//** Method to set state in editing 
proto.setOpenEditingPanel = function (bool) {
  this.state.open = bool;
  this._getEditableLayersFromCatalog().forEach(function (layer) {
    return layer.setInEditing(bool);
  });
};

/*
* Add event
* @param {String} type - Event Type
* @param
* */
proto.addEvent = function () {
  var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref17.type,
      id = _ref17.id,
      fnc = _ref17.fnc;

  if (!this._events[type]) this._events[type] = {};
  if (!this._events[type][id]) this._events[type][id] = [];
  this._events[type][id].push(fnc);
};

/*
* Add event
* @param {String} type - Event Type
* @param
* */
proto.addEvents = function () {
  var _this12 = this;

  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref18$types = _ref18.types,
      types = _ref18$types === undefined ? [] : _ref18$types,
      id = _ref18.id,
      fnc = _ref18.fnc;

  types.forEach(function (type) {
    return _this12.addEvent({
      type: type,
      id: id,
      fnc: fnc
    });
  });
};

proto.runEventHandler = function () {
  var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref19.type,
      id = _ref19.id;

  this._events[type] && this._events[type][id] && this._events[type][id].forEach(function (fnc) {
    return fnc();
  });
};

/**
 *
 * @param mode -  default or autosave
 * @param cb object contain done/error two functions
 * @param modal - Boolean true or false to show to ask
 * @param messages - object success or error
 */
proto.setSaveConfig = function () {
  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref20$mode = _ref20.mode,
      mode = _ref20$mode === undefined ? 'default' : _ref20$mode,
      _ref20$cb = _ref20.cb,
      cb = _ref20$cb === undefined ? {} : _ref20$cb,
      _ref20$modal = _ref20.modal,
      modal = _ref20$modal === undefined ? false : _ref20$modal,
      messages = _ref20.messages;

  this.saveConfig.mode = mode;
  this.saveConfig.modal = modal;
  this.saveConfig.messages = messages;
  this.saveConfig.cb = _extends({}, this.saveConfig.cb, cb);
};

//return save mode
proto.getSaveConfig = function () {
  return this.saveConfig;
};

/**
 * Reset default values
 */
proto.resetDefault = function () {
  this.saveConfig = {
    mode: "default", // default, autosave
    modal: false,
    messages: null, // object to set custom message
    cb: {
      done: null, // function Called after save
      error: null // function called affte commit error
    }
  };
  this.disableMapControlsConflict(false);
};

proto._attachLayerWidgetsEvent = function (layer) {
  var _this13 = this;

  var fields = layer.getEditingFields();

  var _loop = function _loop(i) {
    var field = fields[i];
    if (field.input) {
      if (field.input.type === 'select_autocomplete' && !field.input.options.filter_expression) {
        var options = field.input.options;
        var key = options.key,
            values = options.values,
            value = options.value,
            usecompleter = options.usecompleter,
            layer_id = options.layer_id,
            loading = options.loading;

        var self = _this13;
        if (!usecompleter) {
          _this13.addEvents({
            types: ['start-editing', 'show-relation-editing'],
            id: layer.getId(),
            fnc: function fnc() {
              // remove all values
              loading.state = 'loading';
              field.input.options.values = [];
              var relationLayer = CatalogLayersStoresRegistry.getLayerById(layer_id);
              if (relationLayer) {
                if (relationLayer) {
                  relationLayer.getDataTable({
                    ordering: key
                  }).then(function (response) {
                    if (response && response.features) {
                      var features = response.features;
                      self.fireEvent('autocomplete', {
                        field: field,
                        features: features
                      });
                      for (var _i = 0; _i < features.length; _i++) {
                        field.input.options.values.push({
                          key: features[_i].properties[key],
                          value: features[_i].properties[value]
                        });
                      }
                      loading.state = 'ready';
                    }
                  }).fail(function (error) {
                    loading.state = 'error';
                  });
                } else {
                  loading.state = 'error';
                }
              } else {
                self.fireEvent('autocomplete', {
                  field: field,
                  features: []
                });
                loading.state = 'ready';
              }
            }
          });
        }
      }
    }
  };

  for (var i = 0; i < fields.length; i++) {
    _loop(i);
  }
};

proto._createToolBoxDependencies = function () {
  var _this14 = this;

  this._toolboxes.forEach(function (toolbox) {
    var layer = toolbox.getLayer();
    toolbox.setFather(layer.isFather());
    toolbox.state.editing.dependencies = _this14._getToolBoxEditingDependencies(layer);
    if (layer.isFather() && toolbox.hasDependencies()) {
      var layerRelations = layer.getRelations().getRelations();
      for (var relationName in layerRelations) {
        var relation = layerRelations[relationName];
        toolbox.addRelation(relation);
      }
    }
  });
};

/**
 * Check if field of layer is required
 * @param layerId
 * @param fieldName
 * @returns {*}
 */
proto.isFieldRequired = function (layerId, fieldName) {
  return this.getLayerById(layerId).isFieldRequired(fieldName);
};

proto._getToolBoxEditingDependencies = function (layer) {
  var _this15 = this;

  var relationLayers = [].concat(_toConsumableArray(layer.getChildren()), _toConsumableArray(layer.getFathers()));
  return relationLayers.filter(function (layerName) {
    return !!_this15.getLayerById(layerName);
  });
};

proto._hasEditingDependencies = function (layer) {
  var toolboxesIds = this._getToolBoxEditingDependencies(layer);
  return !!toolboxesIds.length;
};

proto.handleToolboxDependencies = function (toolbox) {
  var _this16 = this;

  var dependecyToolBox = void 0;
  if (toolbox.isFather()) this.getLayersDependencyFeatures(toolbox.getId());
  toolbox.getDependencies().forEach(function (toolboxId) {
    dependecyToolBox = _this16.getToolBoxById(toolboxId);
    dependecyToolBox.setEditing(false);
  });
};

proto._getEditableLayersFromCatalog = function () {
  var layers = CatalogLayersStoresRegistry.getLayers({
    EDITABLE: true
  });
  return layers;
};

proto.getLayers = function () {
  return Object.values(this._editableLayers);
};

proto.getCurrentWorkflow = function () {
  return WorkflowsStack.getCurrent();
};

proto.getCurrentWorkflowData = function () {
  var currentWorkFlow = WorkflowsStack.getCurrent();
  return {
    session: currentWorkFlow.getSession(),
    inputs: currentWorkFlow.getInputs(),
    context: currentWorkFlow.getContext(),
    feature: currentWorkFlow.getCurrentFeature(),
    layer: currentWorkFlow.getLayer()
  };
};

proto.getRelationsAttributesByFeature = function () {
  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref21.layerId,
      relation = _ref21.relation,
      feature = _ref21.feature;

  var layer = this.getToolBoxById(layerId).getLayer();
  var relations = this.getRelationsByFeature({ layerId: layerId, relation: relation, feature: feature });
  return relations.map(function (relation) {
    return {
      fields: layer.getFieldsWithValues(relation, {
        relation: true
      }),
      id: relation.getId()
    };
  });
};

proto._getRelationLayerId = function () {
  var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref22.layerId,
      relation = _ref22.relation;

  return relation.getChild() === layerId ? relation.getFather() : relation.getChild();
};

proto.getRelationsByFeature = function () {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref23.layerId,
      relation = _ref23.relation,
      feature = _ref23.feature,
      layerType = _ref23.layerType;

  var _getRelationFieldsFro = this._getRelationFieldsFromRelation({
    layerId: layerId,
    relation: relation
  }),
      ownField = _getRelationFieldsFro.ownField,
      relationField = _getRelationFieldsFro.relationField;

  var featureValue = feature.get(relationField);
  var features = this._getFeaturesByLayerId(layerId);
  return features.filter(function (feature) {
    return feature.get(ownField) == featureValue;
  });
};

proto.registerLeavePage = function (bool) {
  ApplicationService.registerLeavePage({
    bool: bool
  });
};

proto.loadPlugin = function () {
  return this._load = !!this._getEditableLayersFromCatalog().length;
};

proto.getLayerById = function (layerId) {
  return this._editableLayers[layerId];
};

proto.beforeEditingStart = function () {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref24.layer;

  this._checkLayerWidgets(layer);
};

proto.afterEditingStart = function () {
  //TODO

  var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref25.layer;
};

proto.getToolBoxById = function (toolboxId) {
  return this._toolboxes.find(function (toolbox) {
    return toolbox.getId() === toolboxId;
  });
};

/**
 * Method to apply filter editing contsraint to toolbox editing 
 * @param constinst
 */
proto.setApplicationEditingConstraints = function () {
  var _this17 = this;

  var constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { showToolboxesExcluded: true, toolboxes: {} };

  this.applicationEditingConstraints = _extends({}, this.applicationEditingConstraints, constraints);

  var toolboxes = constraints.toolboxes,
      showToolboxesExcluded = constraints.showToolboxesExcluded;

  var toolboxIds = Object.keys(toolboxes);
  !showToolboxesExcluded && this.state.toolboxes.forEach(function (toolbox) {
    return toolbox.show = toolboxIds.indexOf(toolbox.id) !== -1;
  });
  toolboxIds.forEach(function (toolboxId) {
    var toolbox = _this17.getToolBoxById(toolboxId);
    toolbox.setEditingConstraints(toolboxes[toolboxId]);
  });
};

/**
 * Get application editing contraints if applied
 */

proto.getApplicationEditingConstraints = function () {
  return this.applicationEditingConstraints;
};

/**
 *
 */

proto.getApplicationEditingConstraintById = function (toolboxId) {
  return this.applicationEditingConstraints.toolboxes[toolboxId];
};

proto.getToolBoxes = function () {
  return this._toolboxes;
};

proto.getEditableLayers = function () {
  return this._editableLayers;
};

proto._cancelOrSave = function () {
  return resolve();
};

proto.stop = function () {
  var _this18 = this;

  return new Promise(function (resolve, reject) {
    var commitpromises = [];
    _this18._toolboxes.forEach(function (toolbox) {
      // check if temp changes are waiting to save on server
      if (toolbox.getSession().getHistory().state.commit) {
        // ask to commit before exit
        commitpromises.push(_this18.commit(toolbox, true));
      }
    });
    $.when.apply(_this18, commitpromises).always(function () {
      _this18._toolboxes.forEach(function (toolbox) {
        return toolbox.stop();
      });
      _this18.clearState();
      //this.activeQueryInfo();
      _this18._mapService.refreshMap();
      resolve();
    });
  });
};

// remove Editing LayersStore
proto.clear = function () {
  MapLayersStoreRegistry.removeLayersStore(this._layersstore);
  SessionsRegistry.clear();
  //turn off events
  this._mapService.off(MAPCONTROL_TOGGLED_EVENT_NAME, this.mapControlToggleEventHandler);
  this.unregisterResultEditingAction();
};

proto.clearState = function () {
  this.state.toolboxselected = null;
  this.state.toolboxidactivetool = null;
  this.state.message = null;
};

/**
 * Get Relation in editing
 * @param layerId
 * @param relations
 * @param feature
 * @returns {[]}
 */
proto.getRelationsInEditing = function () {
  var _this19 = this;

  var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref26.layerId,
      _ref26$relations = _ref26.relations,
      relations = _ref26$relations === undefined ? [] : _ref26$relations,
      feature = _ref26.feature;

  var relationsinediting = [];
  var relationinediting = void 0;
  relations.forEach(function (relation) {
    var relationLayerId = _this19._getRelationLayerId({ layerId: layerId, relation: relation });
    if (_this19.getLayerById(relationLayerId)) {
      relationinediting = {
        relation: relation.getState(),
        relations: _this19.getRelationsAttributesByFeature({
          layerId: relationLayerId,
          relation: relation,
          feature: feature
        })
      };
      relationinediting.validate = {
        valid: true
      };
      relationsinediting.push(relationinediting);
    }
  });
  return relationsinediting;
};

proto._filterRelationsInEditing = function (_ref27) {
  var _this20 = this;

  var layerId = _ref27.layerId,
      _ref27$relations = _ref27.relations,
      relations = _ref27$relations === undefined ? [] : _ref27$relations;

  return relations.filter(function (relation) {
    var relationId = _this20._getRelationId({
      layerId: layerId,
      relation: relation
    });
    return _this20.getToolBoxById(relationId);
  });
};

proto.stopToolboxesChildren = function (layerId) {
  var _this21 = this;

  var layer = this.getLayerById(layerId);
  var relations = this._filterRelationsInEditing({
    relations: layer.getRelations() ? layer.getRelations().getArray() : [],
    layerId: layerId
  });
  relations.filter(function (relation) {
    return relation.getFather() === layerId;
  }).forEach(function (relation) {
    var relationId = _this21._getRelationId({
      layerId: layerId,
      relation: relation
    });
    _this21.getToolBoxById(relationId).inEditing() && _this21.getToolBoxById(relationId).stop();
  });
};

proto.stopSessionChildren = function (layerId) {
  var _this22 = this;

  var layer = this.getLayerById(layerId);
  var relations = this._filterRelationsInEditing({
    relations: layer.getRelations() ? layer.getRelations().getArray() : [],
    layerId: layerId
  });
  relations.filter(function (relation) {
    return relation.getFather() === layerId;
  }).forEach(function (relation) {
    var relationId = _this22._getRelationId({
      layerId: layerId,
      relation: relation
    });
    // In case of no editing is started (click on pencil of relation layer) need to stop (unlock) features
    if (!_this22.getToolBoxById(relationId).inEditing()) {
      _this22._sessions[relationId].stop();
    }
  });
};

proto.fatherInEditing = function (layerId) {
  var _this23 = this;

  var inEditing = false;
  var toolbox = void 0;
  var relationLayerFathers = this.getLayerById(layerId).getFathers();
  relationLayerFathers.forEach(function (id) {
    toolbox = _this23.getToolBoxById(id);
    if (toolbox && toolbox.inEditing()) {
      inEditing = true;
      return false;
    }
  });
  return inEditing;
};

proto._getRelationFieldsFromRelation = function () {
  var _ref28 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref28.layerId,
      relation = _ref28.relation;

  var childId = relation.getChild ? relation.getChild() : relation.child;
  var isChild = childId !== layerId;
  var _fatherField = relation.getFatherField ? relation.getFatherField() : relation.fatherField;
  var _childField = relation.getChildField ? relation.getChildField() : relation.childField;
  var ownField = isChild ? _fatherField : _childField;
  var relationField = isChild ? _childField : _fatherField;
  return {
    ownField: ownField,
    relationField: relationField
  };
};

proto.createEditingDataOptions = function () {
  var filterType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var feature = options.feature,
      relation = options.relation,
      field = options.field,
      layerId = options.layerId,
      operator = options.operator;

  var filter = void 0;
  switch (filterType) {
    //case all leave filter undefined
    case 'all':
      break;
    case 'bbox':
      filter = {
        bbox: this._mapService.getMapBBOX()
      };
      break;
    case 'field':
      // case of field
      filter = {
        field: {
          field: field,
          type: 'editing'
        }
      };
      break;
    case 'fid':
      // case to get relations of current feature
      if (operator !== 'not') filter = {
        fid: {
          fid: feature.getId(),
          layer: {
            id: layerId
          },
          type: 'editing',
          relation: relation.state,
          formatter: 0 //add formatter 0 to get stored value
        }
      };
      break;
  }
  return {
    registerEvents: true, // usefult to get register vent on toolbox example mapmoveend
    editing: true,
    filter: filter
  };
};

proto._getFeaturesByLayerId = function (layerId) {
  return this.getLayerById(layerId).readEditingFeatures();
};

proto.getLayersDependencyFeaturesFromSource = function () {
  var _this24 = this;

  var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref29.layerId,
      relation = _ref29.relation,
      feature = _ref29.feature,
      _ref29$operator = _ref29.operator,
      operator = _ref29$operator === undefined ? 'eq' : _ref29$operator;

  return new Promise(function (resolve) {
    var features = _this24._getFeaturesByLayerId(layerId);

    var _getRelationFieldsFro2 = _this24._getRelationFieldsFromRelation({
      layerId: layerId,
      relation: relation
    }),
        ownField = _getRelationFieldsFro2.ownField,
        relationField = _getRelationFieldsFro2.relationField;

    var featureValue = feature.get(relationField);
    var find = operator === 'eq' ? features.find(function (featureSource) {
      var featureSourceValue = featureSource.get(ownField);
      return featureSourceValue == featureValue;
    }) : false;
    resolve(find);
  });
};

proto._getRelationId = function () {
  var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layerId = _ref30.layerId,
      relation = _ref30.relation;

  var fatherId = relation.getFather ? relation.getFather() : relation.father;
  var childId = relation.getChild ? relation.getChild() : relation.child;
  return fatherId === layerId ? childId : fatherId;
};

proto.getLayersDependencyFeatures = function (layerId) {
  var _this25 = this;

  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var promises = [];
  var layer = this.getLayerById(layerId);
  var relations = opts.relations ? opts.relations : layer.getChildren().length && layer.getRelations() ? this._filterRelationsInEditing({
    relations: layer.getRelations().getArray().filter(function (relation) {
      return relation.getFather() === layerId;
    }),
    layerId: layerId
  }) : [];
  var online = ApplicationState.online;
  relations.forEach(function (relation) {
    if (relation.setLoading) relation.setLoading(true);else relation.loading = true;
    var id = _this25._getRelationId({
      layerId: layerId,
      relation: relation
    });
    var promise = new Promise(function (resolve) {
      var filterType = opts.filterType || 'fid';
      opts.relation = relation;
      opts.layerId = layerId;
      var options = _this25.createEditingDataOptions(filterType, opts);
      var session = _this25._sessions[id];
      var toolbox = _this25.getToolBoxById(id);
      if (online && session) {
        toolbox.startLoading();
        if (!session.isStarted()) session.start(options).always(function (promise) {
          promise.always(function () {
            toolbox.stopLoading();
            resolve(id);
          });
        });else {
          _this25.getLayersDependencyFeaturesFromSource({
            layerId: id,
            relation: relation,
            feature: opts.feature,
            operator: opts.operator
          }).then(function (find) {
            if (find) {
              resolve(id);
              toolbox.stopLoading();
            } else {
              session.getFeatures(options).always(function (promise) {
                promise.always(function () {
                  toolbox.stopLoading();
                  resolve(id);
                });
              });
            }
          });
        }
      } else {
        _this25.getLayersDependencyFeaturesFromSource({
          layerId: id,
          relation: relation,
          feature: opts.feature,
          operator: opts.operator
        }).then(function () {
          return resolve(id);
        });
      }
    });
    promises.push(promise);
  });
  // at the end se loading false
  Promise.all(promises).finally(function () {
    return relations.forEach(function (relation) {
      if (relation.setLoading) relation.setLoading(false);else relation.loading = false;
    });
  });
  return Promise.all(promises);
};

proto.commitDirtyToolBoxes = function (layerId) {
  var _this26 = this;

  return new Promise(function (resolve) {
    var toolbox = _this26.getToolBoxById(layerId);
    var children = _this26.getLayerById(layerId).getChildren();
    if (toolbox.isDirty() && toolbox.hasDependencies()) {
      _this26.commit(toolbox).fail(function () {
        toolbox.revert().then(function () {
          toolbox.getDependencies().forEach(function (layerId) {
            children.indexOf(layerId) !== -1 && _this26.getToolBoxById(layerId).revert();
          });
        });
      }).always(function () {
        return resolve(toolbox);
      });
    } else resolve(toolbox);
  });
};

proto._createCommitMessage = function (commitItems) {
  function create_changes_list_dom_element(add, update, del) {
    var changeIds = {};
    changeIds['' + t('editing.messages.commit.add')] = add.length;
    changeIds['' + t('editing.messages.commit.update')] = '[' + update.map(function (item) {
      return item.id;
    }).join(',') + ']';
    changeIds['' + t('editing.messages.commit.delete')] = '[' + del.join(',') + ']';
    var dom = '<h4>' + t('editing.messages.commit.header') + '</h4>';
    dom += '<h5>' + t('editing.messages.commit.header_add') + '</h5>';
    dom += '<h5>' + t('editing.messages.commit.header_update_delete') + '</h5>';
    dom += '<ul style=\'border-bottom-color: #f4f4f4;\'>';
    Object.entries(changeIds).forEach(function (_ref31) {
      var _ref32 = _slicedToArray(_ref31, 2),
          action = _ref32[0],
          ids = _ref32[1];

      dom += '<li>' + action + ' : ' + ids + ' </li>';
    });
    dom += '</ul>';
    return dom;
  }

  var message = "";
  message += create_changes_list_dom_element(commitItems.add, commitItems.update, commitItems.delete);
  if (!_.isEmpty(commitItems.relations)) {
    message += "<div style='height:1px; background:#f4f4f4;border-bottom:1px solid #f4f4f4;'></div>";
    message += "<div style='margin-left: 40%'><h4>" + t('editing.relations') + "</h4></div>";
    Object.entries(commitItems.relations).forEach(function (_ref33) {
      var _ref34 = _slicedToArray(_ref33, 2),
          relationName = _ref34[0],
          commits = _ref34[1];

      message += "<div><span style='font-weight: bold'>" + relationName + "</span></div>";
      message += create_changes_list_dom_element(commits.add, commits.update, commits.delete);
    });
  }
  return message;
};

proto.showCommitModalWindow = function (_ref35) {
  var _this27 = this;

  var layer = _ref35.layer,
      commitItems = _ref35.commitItems,
      close = _ref35.close,
      commitPromise = _ref35.commitPromise;

  // messages set to commit
  var messages = {
    success: {
      message: "plugins.editing.messages.saved",
      autoclose: true
    },
    error: {}
  };

  return new Promise(function (resolve, reject) {
    var workflow = new CommitFeaturesWorkflow({
      type: 'commit'
    });
    workflow.start({
      inputs: {
        layer: layer,
        message: _this27._createCommitMessage(commitItems),
        close: close
      }
    }).then(function () {
      var dialog = GUI.dialog.dialog({
        message: '<h4 class="text-center"><i style="margin-right: 5px;" class=' + GUI.getFontClass('spinner') + '></i>' + t('editing.messages.saving') + '</h4>',
        closeButton: false
      });
      resolve(messages);
      commitPromise.always(function () {
        return dialog.modal('hide');
      }); // hide saving dialog
    }).fail(function (error) {
      return reject(error);
    }).always(function () {
      return workflow.stop();
    });
  });
};

/**
 * Functioncalled very single change saved temporary
 */
proto.saveChange = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = this.saveConfig.mode;
          _context.next = _context.t0 === 'autosave' ? 3 : 4;
          break;

        case 3:
          return _context.abrupt('return', this.commit({
            modal: false // set to not show modal ask window
          }));

        case 4:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this);
}));

proto.addLayersFeaturesToShowOnResult = function (_ref37) {
  var _this28 = this;

  var layerId = _ref37.layerId,
      _ref37$fids = _ref37.fids,
      fids = _ref37$fids === undefined ? [] : _ref37$fids;

  if (this.loadLayersFeaturesToResultWhenCloseEditing[layerId] === undefined) this.loadLayersFeaturesToResultWhenCloseEditing[layerId] = new Set();
  fids.forEach(function (fid) {
    return _this28.loadLayersFeaturesToResultWhenCloseEditing[layerId].add(fid);
  });
};

/**
 * Called on close editingpanel panel
 */
proto.onCloseEditingPanel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return this.showChangesToResult();

        case 2:
          this.getToolBoxes().forEach(function (toolbox) {
            return toolbox.resetDefault();
          });

        case 3:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this);
}));

/**
 *
 * Method to show feature that are updated or created with editing on result content
 * @returns {Promise<void>}
 */
proto.showChangesToResult = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _this29 = this;

  var layerIdChanges, inputs, promise;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          layerIdChanges = Object.keys(this.loadLayersFeaturesToResultWhenCloseEditing);

          if (!layerIdChanges.length) {
            _context3.next = 12;
            break;
          }

          inputs = {
            layers: [],
            fids: [],
            formatter: 1
          };

          layerIdChanges.forEach(function (layerId) {
            var fids = [].concat(_toConsumableArray(_this29.loadLayersFeaturesToResultWhenCloseEditing[layerId]));
            if (fids.length) {
              var layer = CatalogLayersStoresRegistry.getLayerById(layerId);
              inputs.layers.push(layer);
              inputs.fids.push(fids);
            }
          });
          promise = inputs.layers.length ? DataRouterService.getData('search:layersfids', {
            inputs: inputs,
            outputs: {
              title: 'plugins.editing.editing_changes',
              show: {
                loading: false
              }
            }
          }) : Promise.resolve();
          _context3.prev = 5;
          _context3.next = 8;
          return promise;

        case 8:
          _context3.next = 12;
          break;

        case 10:
          _context3.prev = 10;
          _context3.t0 = _context3['catch'](5);

        case 12:
          this.loadLayersFeaturesToResultWhenCloseEditing = {};

        case 13:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this, [[5, 10]]);
}));

/**
 * Metyhod to commit and save changes on server persistently
 *
 * @param toolbox
 * @param commitItems
 * @param messages
 * @param done
 * @param modal
 * @param close
 * @returns {*}
 */
proto.commit = function () {
  var _this30 = this;

  var _ref40 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      toolbox = _ref40.toolbox,
      commitItems = _ref40.commitItems,
      _ref40$modal = _ref40.modal,
      modal = _ref40$modal === undefined ? true : _ref40$modal,
      _ref40$close = _ref40.close,
      close = _ref40$close === undefined ? false : _ref40$close;

  var d = $.Deferred();
  var commitPromise = d.promise();
  var _saveConfig = this.saveConfig,
      _saveConfig$cb = _saveConfig.cb,
      cb = _saveConfig$cb === undefined ? {} : _saveConfig$cb,
      _saveConfig$messages = _saveConfig.messages,
      messages = _saveConfig$messages === undefined ? { success: {}, error: {} } : _saveConfig$messages;

  toolbox = toolbox || this.state.toolboxselected;
  var session = toolbox.getSession();
  var layer = toolbox.getLayer();
  var layerType = layer.getType();
  var items = commitItems;
  commitItems = commitItems || session.getCommitItems();
  var _commitItems = commitItems,
      _commitItems$add = _commitItems.add,
      add = _commitItems$add === undefined ? [] : _commitItems$add,
      _commitItems$delete = _commitItems.delete,
      cancel = _commitItems$delete === undefined ? [] : _commitItems$delete,
      _commitItems$update = _commitItems.update,
      update = _commitItems$update === undefined ? [] : _commitItems$update,
      _commitItems$relation = _commitItems.relations,
      relations = _commitItems$relation === undefined ? {} : _commitItems$relation;

  if ([].concat(_toConsumableArray(add), _toConsumableArray(cancel), _toConsumableArray(update), _toConsumableArray(Object.keys(relations))).length === 0) {
    GUI.showUserMessage({
      type: 'info',
      message: 'Nothing to save',
      autoclose: true,
      closable: false
    });
    d.resolve(toolbox);
    return d.promise();
  }
  var promise = modal ? this.showCommitModalWindow({
    layer: layer,
    commitItems: commitItems,
    close: close,
    commitPromise: commitPromise // add a commit promise
  }) : Promise.resolve(messages);
  promise.then(function (messages) {
    if (ApplicationState.online) {
      session.commit({ items: items || commitItems }).then(function (commitItems, response) {
        if (ApplicationState.online) {
          if (response.result) {
            var _messages$success = messages.success,
                _messages$success$aut = _messages$success.autoclose,
                autoclose = _messages$success$aut === undefined ? true : _messages$success$aut,
                _messages$success$mes = _messages$success.message,
                message = _messages$success$mes === undefined ? "plugins.editing.messages.saved" : _messages$success$mes;

            if (messages && messages.success) GUI.showUserMessage({
              type: 'success',
              message: message,
              duration: 3000,
              autoclose: autoclose
            });
            layerType === Layer.LayerTypes.VECTOR && _this30._mapService.refreshMap({ force: true });
            cb.done && cb.done instanceof Function && cb.done(toolbox);
            _this30.addLayersFeaturesToShowOnResult({
              layerId: toolbox.getId(),
              fids: [].concat(_toConsumableArray(response.response.new.map(function (_ref41) {
                var id = _ref41.id;
                return id;
              })), _toConsumableArray(commitItems.update.map(function (update) {
                return update.id;
              })))
            });
          } else {
            var parser = new serverErrorParser({
              error: response.errors
            });
            var errorMessage = parser.parse({
              type: 'String'
            });

            var _messages$error = messages.error,
                _messages$error$autoc = _messages$error.autoclose,
                _autoclose = _messages$error$autoc === undefined ? false : _messages$error$autoc,
                _message = _messages$error.message;

            GUI.showUserMessage({
              type: 'alert',
              message: _message || errorMessage,
              textMessage: !_message,
              autoclose: _autoclose
            });
            cb.error && cb.error instanceof Function && cb.error(toolbox, _message || errorMessage);
          }
          d.resolve(toolbox);
        }
      }).fail(function () {
        var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var parser = new serverErrorParser({
          error: error.errors ? error.errors : error
        });
        var errorMessage = parser.parse({
          type: 'String'
        });
        var _messages$error2 = messages.error,
            _messages$error2$auto = _messages$error2.autoclose,
            autoclose = _messages$error2$auto === undefined ? false : _messages$error2$auto,
            message = _messages$error2.message;

        GUI.showUserMessage({
          type: 'alert',
          message: message || errorMessage,
          textMessage: !message,
          autoclose: autoclose
        });
        d.reject(toolbox);
        cb.error && cb.error instanceof Function && cb.error(toolbox, message || errorMessage);
      });
      //case offline
    } else _this30.saveOfflineItem({
      data: _defineProperty({}, session.getId(), commitItems),
      id: OFFLINE_ITEMS.CHANGES
    }).then(function () {
      GUI.showUserMessage({
        type: 'success',
        message: "plugins.editing.messages.saved_local",
        autoclose: true
      });
      session.clearHistory();
      d.resolve(toolbox);
    }).catch(function (error) {
      GUI.showUserMessage({
        type: 'alert',
        message: error,
        textMessage: true
      });
      d.reject(toolbox);
    });
  }).catch(function () {
    d.reject(toolbox);
  });
  return commitPromise;
};

/**
 * Unique field layer values handler
 */

proto.clearAllLayersUniqueFieldsValues = function () {
  this.layersUniqueFieldsValues = {};
};

proto.clearLayerUniqueFieldsValues = function (layerId) {
  this.layersUniqueFieldsValues[layerId] = {};
};

proto.removeLayerUniqueFieldValuesFromFeature = function (_ref42) {
  var _this31 = this;

  var layerId = _ref42.layerId,
      feature = _ref42.feature;

  if (this.layersUniqueFieldsValues[layerId]) {
    Object.keys(feature.getProperties()).forEach(function (property) {
      if (typeof _this31.layersUniqueFieldsValues[layerId][property] !== "undefined") _this31.layersUniqueFieldsValues[layerId][property].delete(feature.get(property));
    });
  }
};

proto.removeRelationLayerUniqueFieldValuesFromFeature = function (_ref43) {
  var _this32 = this;

  var layerId = _ref43.layerId,
      relationLayerId = _ref43.relationLayerId,
      feature = _ref43.feature;

  if (typeof this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations === "undefined") this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations = {};
  Object.keys(feature.getProperties()).forEach(function (property) {
    if (typeof _this32.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId] === "undefined") _this32.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId] = {};
    if (typeof _this32.layersUniqueFieldsValues[layerId][property] !== "undefined") {
      _this32.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][property] = new Set(_this32.layersUniqueFieldsValues[layerId][property]);
      _this32.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][property].delete(feature.get(property));
    }
  });
};

proto.setLayerUniqueFieldValues = function () {
  var _ref44 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(layerId) {
    var _this33 = this;

    var uniqueFieldValuesPromises, layer;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            uniqueFieldValuesPromises = [];
            layer = CatalogLayersStoresRegistry.getLayerById(layerId);

            layer.getEditingFields().forEach(function (field) {
              if (field.validate.unique) {
                if (typeof _this33.getLayerUniqueFieldValues({ layerId: layerId, field: field }) === "undefined") {
                  var promise = layer.getFilterData({ unique: field.name });
                  promise.then(function () {
                    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

                    if (typeof _this33.layersUniqueFieldsValues[layerId] === "undefined") _this33.layersUniqueFieldsValues[layerId] = {};
                    _this33.layersUniqueFieldsValues[layerId][field.name] = new Set(values);
                  });
                  uniqueFieldValuesPromises.push(promise);
                }
              }
            });
            _context4.next = 5;
            return Promise.allSettled(uniqueFieldValuesPromises);

          case 5:
            return _context4.abrupt('return', this.layersUniqueFieldsValues[layerId]);

          case 6:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x32) {
    return _ref44.apply(this, arguments);
  };
}();

/**
 * save tamperary relation feature changes on father (root) layer feature
 * @param layerId
 */
proto.saveTemporaryRelationsUniqueFieldsValues = function (layerId) {
  var _this34 = this;

  if (typeof this.layersUniqueFieldsValues[layerId].__uniqueFieldsValuesRelations !== "undefined") {
    Object.keys(this.layersUniqueFieldsValues[layerId].__uniqueFieldsValuesRelations).forEach(function (relationLayerId) {
      Object.entries(_this34.layersUniqueFieldsValues[layerId].__uniqueFieldsValuesRelations[relationLayerId]).forEach(function (_ref45) {
        var _ref46 = _slicedToArray(_ref45, 2),
            fieldName = _ref46[0],
            uniqueValues = _ref46[1];

        _this34.layersUniqueFieldsValues[relationLayerId][fieldName] = uniqueValues;
      });
    });
    this.clearTemporaryRelationsUniqueFieldsValues(layerId);
  }
};

proto.clearTemporaryRelationsUniqueFieldsValues = function (layerId) {
  delete this.layersUniqueFieldsValues[layerId].__uniqueFieldsValuesRelations;
};

proto.getLayerUniqueFieldValues = function (_ref47) {
  var layerId = _ref47.layerId,
      field = _ref47.field;

  return this.layersUniqueFieldsValues[layerId] && this.layersUniqueFieldsValues[layerId][field.name];
};

proto.getChildLayerUniqueFieldValues = function (_ref48) {
  var layerId = _ref48.layerId,
      relationLayerId = _ref48.relationLayerId,
      field = _ref48.field;

  if (typeof this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations !== "undefined") {
    if (typeof this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId] !== "undefined") if (typeof this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][field.name] !== "undefined") return this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][field.name];
  }
  return this.getLayerUniqueFieldValues({
    layerId: layerId,
    field: field
  });
};

proto.changeLayerUniqueFieldValues = function (_ref49) {
  var layerId = _ref49.layerId,
      field = _ref49.field,
      oldValue = _ref49.oldValue,
      newValue = _ref49.newValue;

  this.layersUniqueFieldsValues[layerId][field.name].delete(oldValue);
  this.layersUniqueFieldsValues[layerId][field.name].add(newValue);
};

proto.changeRelationLayerUniqueFieldValues = function (_ref50) {
  var layerId = _ref50.layerId,
      relationLayerId = _ref50.relationLayerId,
      field = _ref50.field,
      oldValue = _ref50.oldValue,
      newValue = _ref50.newValue;

  if (typeof this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations === "undefined") this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations = {};
  if (typeof this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId] === "undefined") this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId] = {};
  this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][field.name] = new Set(this.layersUniqueFieldsValues[layerId][field.name]);
  this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][field.name].delete(oldValue);
  this.layersUniqueFieldsValues[relationLayerId].__uniqueFieldsValuesRelations[layerId][field.name].add(newValue);
};

proto.addLayerUniqueFieldValue = function (_ref51) {
  var layerId = _ref51.layerId,
      field = _ref51.field,
      value = _ref51.value;

  this.layersUniqueFieldsValues[layerId][field.name].add(value);
};

proto.deleteLayerUniqueFieldValue = function (_ref52) {
  var layerId = _ref52.layerId,
      field = _ref52.field,
      value = _ref52.value;

  this.layersUniqueFieldsValues[layerId][field.name].delete(value);
};

proto.undoRedoLayerUniqueFieldValues = function (_ref53) {
  var _this35 = this;

  var layerId = _ref53.layerId,
      _ref53$sessionItems = _ref53.sessionItems,
      sessionItems = _ref53$sessionItems === undefined ? [] : _ref53$sessionItems,
      action = _ref53.action;

  if (typeof this.layersUniqueFieldsValues[layerId] !== "undefined") {
    sessionItems.forEach(function (item) {
      Object.keys(_this35.layersUniqueFieldsValues[layerId]).forEach(function (name) {
        if (Array.isArray(item)) {
          /**
           * case of update feature that contain new and ol values of feature
           */
          var _item = _slicedToArray(item, 2),
              oldfeature = _item[0].feature,
              newfeature = _item[1].feature;

          if (newfeature.get(name) != oldfeature.get(name)) {
            var oldValue = action === 'undo' ? newfeature.get(name) : oldfeature.get(name);
            var newValue = action === 'undo' ? oldfeature.get(name) : newfeature.get(name);
            _this35.changeLayerUniqueFieldValues({
              layerId: layerId,
              field: {
                name: name
              },
              oldValue: oldValue,
              newValue: newValue
            });
          }
        } else {
          var feature = item.feature;
          /**
           * two possible state 'add' or 'delete'
           *
           */

          var featureState = feature.getState();
          /**
           * in case of state add or delete
           */
          _this35[(featureState === 'add' ? 'delete' : 'add') + 'LayerUniqueFieldValue']({
            layerId: layerId,
            field: {
              name: name
            },
            value: feature.get(name)
          });
        }
      });
    });
  }
};

proto.undoRedoRelationUniqueFieldValues = function (_ref54) {
  var _this36 = this;

  var relationSessionItems = _ref54.relationSessionItems,
      action = _ref54.action;

  Object.entries(relationSessionItems).forEach(function (_ref55) {
    var _ref56 = _slicedToArray(_ref55, 2),
        layerId = _ref56[0],
        _ref56$ = _ref56[1],
        sessionItems = _ref56$.own,
        relationSessionItems = _ref56$.dependencies;

    _this36.undoRedoLayerUniqueFieldValues({
      layerId: layerId,
      sessionItems: sessionItems,
      action: action
    });
    _this36.undoRedoRelationUniqueFieldValues({
      relationSessionItems: relationSessionItems,
      action: action
    });
  });
};

/*
* end unique fields
* */
proto.getProjectLayerById = function (layerId) {
  return CatalogLayersStoresRegistry.getLayerById(layerId);
};

proto.getProjectLayerFeatureById = function () {
  var _ref58 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref57) {
    var layerId = _ref57.layerId,
        fid = _ref57.fid;
    var feature, layer, response, features;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            feature = void 0;
            layer = this.getProjectLayerById(layerId);
            _context5.prev = 2;
            _context5.next = 5;
            return XHR.get({
              url: layer.getUrl('data'),
              params: {
                fids: fid
              }
            });

          case 5:
            response = _context5.sent;
            features = getFeaturesFromResponseVectorApi(response);

            if (features.length) feature = features[0];
            _context5.next = 12;
            break;

          case 10:
            _context5.prev = 10;
            _context5.t0 = _context5['catch'](2);

          case 12:
            return _context5.abrupt('return', feature);

          case 13:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[2, 10]]);
  }));

  return function (_x34) {
    return _ref58.apply(this, arguments);
  };
}();

proto.getProjectLayersWithSameGeometryOfLayer = function (layer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { exclude: [] };
  var _options$exclude = options.exclude,
      exclude = _options$exclude === undefined ? [] : _options$exclude;

  var geometryType = layer.getGeometryType();
  return CatalogLayersStoresRegistry.getLayers().filter(function (layer) {
    return layer.isGeoLayer() && layer.getGeometryType && layer.getGeometryType() && exclude.indexOf(layer.getId()) === -1 && (layer.getGeometryType() === geometryType || isSameBaseGeometryType(layer.getGeometryType(), geometryType) && Geometry.isMultiGeometry(geometryType));
  });
};

/**
 *  return (geometryType === featureGeometryType)
 *  || Geometry.isMultiGeometry(geometryType)
 *  || !Geometry.isMultiGeometry(featureGeometryType);
 */

proto.getExternalLayersWithSameGeometryOfLayer = function (layer) {
  var geometryType = layer.getGeometryType();
  return this._mapService.getExternalLayers().filter(function (externalLayer) {
    var features = externalLayer.getSource().getFeatures();
    if (features && features.length) {
      return features[0].getGeometry() ? geometryType === features[0].getGeometry().getType() || isSameBaseGeometryType(geometryType, features[0].getGeometry().getType()) : false;
    } else return false;
  });
};

EditingService.EDITING_FIELDS_TYPE = ['unique'];

module.exports = new EditingService();

},{"../api":8,"../toolboxes/toolboxesfactory":47,"../workflows/commitfeaturesworkflow":53,"../workflows/editnopickmapfeatureattributesworkflow":61}],43:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GUI = g3wsdk.gui.GUI;

var t = g3wsdk.core.i18n.tPlugin;
var Layer = g3wsdk.core.layer.Layer;
var WorkflowsStack = g3wsdk.core.workflow.WorkflowsStack;

// what we can do with each type of relation element

var RELATIONTOOLS = {
  default: ['editattributes', 'deletefeature'],
  'table': [],
  'Point': ['movefeature'],
  'LineString': ['movevertex'],
  'Polygon': ['movefeature', 'movevertex']
};

var RelationService = function RelationService(layerId) {
  var _this = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // layerId is id of the parent of relation
  this._parentLayerId = layerId;
  this._parentWorkFlow = this.getCurrentWorkflow();
  this._parentLayer = this._parentWorkFlow.getLayer();
  /**
   * relation: contain information about relation from parent layer and current relation layer (ex. child, fields, relationid, etc....)
   * relations: Array of relations object id and fields linked to current parent feature that is in editing
   *
   */
  var relation = options.relation,
      relations = options.relations;

  this.relation = relation;
  // relation feature link to current parent feature
  this.relations = relations;
  //editing service (main service of plugin)
  this._editingService;
  this._isExternalFieldRequired = false;
  // this._relationLayerId is layer id of relation layer
  this._relationLayerId = this.relation.child === this._parentLayerId ? this.relation.father : this.relation.child;
  // layer in relation
  var relationLayer = this.getLayer();
  this._layerType = relationLayer.getType();
  //get type of relation
  var relationLayerType = this._layerType === Layer.LayerTypes.VECTOR ? relationLayer.getGeometryType() : Layer.LayerTypes.TABLE;
  //

  var _getEditingService$_g = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._parentLayerId,
    relation: this.relation
  }),
      fatherRelationField = _getEditingService$_g.ownField;
  // check if father is editable field. It is useful to fill relation filed of relation feature


  this._isFatherFieldEditable = this._parentLayer.isEditingFieldEditable(fatherRelationField);
  this._isExternalFieldRequired = this._checkIfExternalFieldRequired();
  // check if parent field is editable. If not get the id of parent feature so the server can genratate the right value
  // to fill the field of relation layer feature when commit
  this._currentParentFeatureRelationFieldValue = this._isFatherFieldEditable ? this.getCurrentWorkflowData().feature.get(fatherRelationField) : this.getCurrentWorkflowData().feature.getId();
  ///////////////////////////////////////
  this._relationTools = [];
  this._add_link_workflow = null;
  //get editing contstraint type
  this.capabilities = {
    parent: this._parentLayer.getEditingCapabilities(),
    relation: this._parentLayer.getEditingCapabilities()
  };
  //check if relationLayer is a TABLE Layer and with capabilities value check add tools
  if (relationLayerType === Layer.LayerTypes.TABLE) {
    this.capabilities.relation.find(function (capability) {
      return capability === 'delete_feature';
    }) !== undefined && this._relationTools.push({
      state: {
        icon: 'deleteTableRow.png',
        id: 'deletefeature',
        name: "editing.tools.delete_feature"
      }
    });
    this.capabilities.relation.find(function (capability) {
      return capability === 'change_attr_feature';
    }) !== undefined && this._relationTools.push({
      state: {
        icon: 'editAttributes.png',
        id: 'editattributes',
        name: "editing.tools.update_feature"
      }
    });
  } else {
    var allrelationtools = this.getEditingService().getToolBoxById(this._relationLayerId).getTools();
    allrelationtools.forEach(function (tool) {
      if (_.concat(RELATIONTOOLS[relationLayerType], RELATIONTOOLS.default).indexOf(tool.getId()) !== -1) _this._relationTools.push(_.cloneDeep(tool));
    });
  }
  this._setAddLinkWorkflow();
};

var proto = RelationService.prototype;

proto.getEditingCapabilities = function () {
  return this.capabilities;
};

proto._setAddLinkWorkflow = function () {
  var _add_link_workflow;

  var add_link_workflow = (_add_link_workflow = {}, _defineProperty(_add_link_workflow, Layer.LayerTypes.VECTOR, {
    link: require('../workflows/linkrelationworkflow'),
    add: require('../workflows/addfeatureworkflow'),
    selectandcopy: require('../workflows/selectandcopyfeaturesfromotherlayerworkflow')
  }), _defineProperty(_add_link_workflow, Layer.LayerTypes.TABLE, {
    link: require('../workflows/edittableworkflow'),
    add: require('../workflows/addtablefeatureworkflow')
  }), _add_link_workflow);
  this._add_link_workflow = add_link_workflow[this._layerType];
};

proto._getLinkFeatureWorkflow = function () {
  return new this._add_link_workflow.link();
};

proto._getAddFeatureWorkflow = function () {
  return new this._add_link_workflow.add();
};

proto._getSelectCopyWorkflow = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return new this._add_link_workflow.selectandcopy(options);
};

proto.getRelationTools = function () {
  return this._relationTools;
};

proto._highlightRelationSelect = function (relation) {
  var originalStyle = this.getLayer().getEditingLayer().getStyle();
  var geometryType = this.getLayer().getGeometryType();
  var style = void 0;
  if (geometryType === 'LineString' || geometryType === 'MultiLineString') {
    style = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgb(255,255,0)',
        width: 4
      })
    });
  } else if (geometryType === 'Point' || geometryType === 'MultiPoint') {
    style = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 8,
        fill: new ol.style.Fill({
          color: 'rgb(255,255,0)'
        })
      })
    });
  } else if (geometryType === 'MultiPolygon' || geometryType === 'Polygon') {
    style = new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'rgb(255,255,0)',
        width: 4
      }),
      fill: new ol.style.Fill({
        color: 'rgba(255, 255, 0, 0.5)'
      })
    });
  }
  relation.setStyle(style);
  return originalStyle;
};

proto.startTool = function (relationtool, index) {
  var _this2 = this;

  if (relationtool.state.id === 'movefeature') GUI.hideContent(true);
  return new Promise(function (resolve, reject) {
    var toolPromise = _this2._layerType === Layer.LayerTypes.VECTOR && _this2.startVectorTool(relationtool, index) || _this2._layerType === Layer.LayerTypes.TABLE && _this2.startTableTool(relationtool, index);
    toolPromise.then(function () {
      _this2.emitEventToParentWorkFlow();
      resolve();
    }).fail(function (err) {
      return reject(err);
    }).always(function () {
      return GUI.hideContent(false);
    });
  });
};

/**
 * force parent workflow form service to be update
 */
proto.forceParentsFromServiceWorkflowToUpdated = function () {
  var workflowParents = WorkflowsStack.getParents() || [this.getCurrentWorkflow()];
  workflowParents.forEach(function (workflow) {
    return workflow.getContext().service.setUpdate(true, {
      force: true
    });
  });
};

proto.startTableTool = function (relationtool, index) {
  var _this3 = this;

  var d = $.Deferred();
  var relation = this.relations[index];
  var featurestore = this.getLayer().getEditingSource();
  var relationfeature = featurestore.getFeatureById(relation.id);
  var options = this._createWorkflowOptions({
    features: [relationfeature]
  });
  // delete feature
  if (relationtool.state.id === 'deletefeature') {
    GUI.dialog.confirm(t("editing.messages.delete_feature"), function (result) {
      if (result) {
        _this3.getCurrentWorkflowData().session.pushDelete(_this3._relationLayerId, relationfeature);
        _this3.relations.splice(index, 1);
        _this3.getEditingService().removeRelationLayerUniqueFieldValuesFromFeature({
          layerId: _this3._relationLayerId,
          relationLayerId: _this3._parentLayerId,
          feature: relationfeature
        });
        featurestore.removeFeature(relationfeature);
        _this3.forceParentsFromServiceWorkflowToUpdated();
        d.resolve(result);
      } else d.reject(result);
    });
  }
  if (relationtool.state.id === 'editattributes') {
    var EditTableFeatureWorkflow = require('../workflows/edittablefeatureworkflow');
    var workflow = new EditTableFeatureWorkflow();
    workflow.start(options).then(function () {
      var fields = _this3._getRelationFieldsValue(relationfeature);
      fields.forEach(function (_field) {
        relation.fields.forEach(function (field) {
          if (field.name === _field.name) field.value = _field.value;
        });
      });
      d.resolve(true);
    }).fail(function (err) {
      return d.reject(false);
    }).always(function () {
      workflow.stop();
    });
  }
  return d.promise();
};

proto.startVectorTool = function (relationtool, index) {
  var _this4 = this;

  var d = $.Deferred();
  var relation = this.relations[index];
  var relationfeature = this._getRelationFeature(relation.id);
  var workflows = {
    ModifyGeometryVertexWorkflow: require('../workflows/modifygeometryvertexworkflow'),
    MoveFeatureWorkflow: require('../workflows/movefeatureworkflow'),
    DeleteFeatureWorkflow: require('../workflows/deletefeatureworkflow'),
    EditFeatureAttributesWorkflow: require('../workflows/editfeatureattributesworkflow')
  };
  GUI.setModal(false);
  var options = this._createWorkflowOptions({
    features: [relationfeature]
  });
  var ClassWorkflow = Object.values(workflows).find(function (classworkflow) {
    return relationtool.getOperator() instanceof classworkflow;
  });
  var workflow = new ClassWorkflow();
  var originalStyle = this._highlightRelationSelect(relationfeature);
  var promise = (workflow instanceof workflows.DeleteFeatureWorkflow || workflow instanceof workflows.EditFeatureAttributesWorkflow) && workflow.startFromLastStep(options) || workflow.start(options);
  workflow.bindEscKeyUp(function () {
    return relationfeature.setStyle(_this4._originalLayerStyle);
  });
  promise.then(function (outputs) {
    if (relationtool.getId() === 'deletefeature') {
      relationfeature.setStyle(_this4._originalLayerStyle);
      _this4.getCurrentWorkflowData().session.pushDelete(_this4._relationLayerId, relationfeature);
      _this4.relations.splice(index, 1);
      _this4.forceParentsFromServiceWorkflowToUpdated();
    }
    if (relationtool.getId() === 'editattributes') {
      var fields = _this4._getRelationFieldsValue(relationfeature);
      fields.forEach(function (_field) {
        return relation.fields.forEach(function (field) {
          if (field.name === _field.name) field.value = _field.value;
        });
      });
    }
    d.resolve(outputs);
  }).fail(function (err) {
    return d.reject(err);
  }).always(function () {
    workflow.stop();
    GUI.hideContent(false);
    workflow.unbindEscKeyUp();
    GUI.setModal(true);
    relationfeature.setStyle(originalStyle);
  });
  return d.promise();
};

proto.getLayer = function () {
  return this.getEditingService().getLayerById(this._relationLayerId);
};

proto.getEditingLayer = function () {
  return this.getEditingService().getEditingLayer(this._relationLayerId);
};

proto.getEditingService = function () {
  this._editingService = this._editingService || require('./editingservice');
  return this._editingService;
};

/**
 * function that change the relation field value when and if parent change the value of relation field 
 * @param input
 */
proto.updateExternalKeyValueRelations = function (input) {
  var _this5 = this;

  var session = this.getEditingService().getToolBoxById(this._relationLayerId).getSession();
  //ownFiled is the field of relation feature link to parent feature layer

  var _getEditingService$_g2 = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._relationLayerId,
    relation: this.relation
  }),
      ownField = _getEditingService$_g2.ownField,
      relationField = _getEditingService$_g2.relationField;
  // check if parent form input that is changing is the field in relation of the current feature relation Layer


  if (this._isFatherFieldEditable && input.name === relationField) {
    // chnage currentParentFieature relation value
    this._currentParentFeatureRelationFieldValue = input.value;
    // loop all features relations
    this.relations.forEach(function (relation) {
      var fields = relation.fields;
      // field relation field of current relation feature
      var field = fields.find(function (field) {
        return field.name === ownField;
      });
      if (field) field.value = _this5._currentParentFeatureRelationFieldValue;
      relation = _this5._getRelationFeature(relation.id);
      var originalRelation = relation.clone();
      relation.set(ownField, input.value);
      if (!relation.isNew()) session.pushUpdate(_this5._relationLayerId, relation, originalRelation);
    });
  }
};

proto._getRelationFieldsValue = function (relation) {
  var layer = this.getLayer();
  return layer.getFieldsWithValues(relation, {
    relation: true
  });
};

proto._createRelationObj = function (relation) {
  return {
    fields: this._getRelationFieldsValue(relation),
    id: relation.getId()
  };
};

proto.emitEventToParentWorkFlow = function (type) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  //type=set-main-component event name to set table parent visible
  type && this._parentWorkFlow.getContextService().getEventBus().$emit(type, options);
};

proto._getRelationAsFatherStyleColor = function (type) {
  var fatherLayer = this.getEditingLayer(this._parentLayerId);
  var fatherLayerStyle = fatherLayer.getStyle();
  var fatherLayerStyleColor = void 0;
  switch (type) {
    case 'Point':
      fatherLayerStyleColor = fatherLayerStyle.getImage() && fatherLayerStyle.getImage().getFill();
      break;
    case 'Line':
      fatherLayerStyleColor = fatherLayerStyle.getStroke() || fatherLayerStyle.getFill();
      break;
    case 'Polygon':
      fatherLayerStyleColor = fatherLayerStyle.getFill() || fatherLayerStyle.getStroke();
      break;
  }
  return fatherLayerStyleColor && fatherLayerStyleColor.getColor() || '#000000';
};

/**
 * Add Relation from project layer
 * @param layer
 */
proto.addRelationFromOtherLayer = function (_ref) {
  var layer = _ref.layer,
      external = _ref.external;

  var workflow = void 0;
  var isVector = false;
  if (external || layer.isGeoLayer()) {
    isVector = true;
    workflow = this._getSelectCopyWorkflow({
      copyLayer: layer,
      isVector: isVector,
      external: external
    });
  }
  this.runAddRelationWorkflow({
    workflow: workflow,
    isVector: isVector
  });
};

/**
 * add relation method
 */
proto.addRelation = function () {
  var isVector = this._layerType === Layer.LayerTypes.VECTOR;
  var workflow = this._getAddFeatureWorkflow();
  this.runAddRelationWorkflow({
    workflow: workflow,
    isVector: isVector
  });
};

/**
 * Common method to add a relation
 */
proto.runAddRelationWorkflow = function () {
  var _this6 = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      workflow = _ref2.workflow,
      _ref2$isVector = _ref2.isVector,
      isVector = _ref2$isVector === undefined ? false : _ref2$isVector;

  if (isVector) {
    GUI.setModal(false);
    GUI.hideContent(true);
  }
  var options = this._createWorkflowOptions();
  var session = options.context.session;

  var _getEditingService$_g3 = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._relationLayerId,
    relation: this.relation
  }),
      ownField = _getEditingService$_g3.ownField,
      relationField = _getEditingService$_g3.relationField;

  var parentFeature = options.parentFeature;

  var promise = workflow.start(options);
  isVector && workflow.bindEscKeyUp();
  promise.then(function (outputs) {
    var _outputs$relationFeat = outputs.relationFeatures,
        newFeatures = _outputs$relationFeat.newFeatures,
        originalFeatures = _outputs$relationFeat.originalFeatures;

    var setRelationFieldValue = function setRelationFieldValue(value) {
      newFeatures.forEach(function (newFeature, index) {
        var originalFeature = originalFeatures[index];
        newFeature.set(ownField, value);
        if (parentFeature.isNew()) originalFeature.set(ownField, value);
        _this6.getLayer().getEditingSource().updateFeature(newFeature);
        session.pushUpdate(_this6._relationLayerId, newFeature, originalFeature);
      });
    };
    setRelationFieldValue(_this6._currentParentFeatureRelationFieldValue);
    if (parentFeature.isNew() && _this6._isFatherFieldEditable) {
      var keyRelationFeatureChange = parentFeature.on('propertychange', function (evt) {
        if (parentFeature.isNew()) {
          if (evt.key === relationField) {
            var value = evt.target.get(relationField);
            setRelationFieldValue(value, true);
          }
        } else ol.Observable.unByKey(keyRelationFeatureChange);
      });
    }
    newFeatures.forEach(function (newFeature) {
      var newRelation = _this6._createRelationObj(newFeature);
      _this6.relations.push(newRelation);
    });
    _this6.emitEventToParentWorkFlow();
  }).fail(function (inputs) {
    if (inputs && inputs.relationFeatures) {
      /**
       * needed in case of save all pressed on openformtask
       */
      var _inputs$relationFeatu = inputs.relationFeatures.newFeatures,
          newFeatures = _inputs$relationFeatu === undefined ? [] : _inputs$relationFeatu;

      newFeatures.forEach(function (newFeature) {
        var newRelation = _this6._createRelationObj(newFeature);
        _this6.relations.push(newRelation);
      });
    }
    session.rollbackDependecies([_this6._relationLayerId]);
  }).always(function () {
    workflow.stop();
    if (isVector) {
      workflow.unbindEscKeyUp();
      GUI.hideContent(false);
      GUI.setModal(true);
    }
  });
};

/**
 * Link relation (bind) to parent feature layer
 */
proto.linkRelation = function () {
  var _this7 = this;

  var isVector = this._layerType === Layer.LayerTypes.VECTOR;
  if (isVector) {
    GUI.setModal(false);
    GUI.hideContent(true);
  }
  var workflow = this._getLinkFeatureWorkflow();
  var options = this._createWorkflowOptions();
  var session = options.context.session;

  var _getEditingService$_g4 = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._relationLayerId,
    relation: this.relation
  }),
      ownField = _getEditingService$_g4.ownField;
  //add options to exclude features


  options.context.exclude = {
    value: this._currentParentFeatureRelationFieldValue,
    field: ownField
  };
  if (isVector) options.context.style = this.getUnlinkedStyle();
  var feature = this.getCurrentWorkflowData().feature;
  var dependencyOptions = {
    relations: [this.relation],
    feature: feature,
    operator: 'not',
    filterType: isVector ? 'bbox' : 'fid'
  };
  var getRelationFeatures = function getRelationFeatures() {
    return _this7.getEditingService().getLayersDependencyFeatures(_this7._parentLayerId, dependencyOptions);
  };
  var preWorkflowStart = void 0;
  if (isVector) {
    var mapService = this.getEditingService().getMapService();
    options.context.beforeRun = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              mapService.showMapSpinner();
              _context.next = 3;
              return new Promise(function (resolve) {
                setTimeout(function () {
                  resolve();
                });
              });

            case 3:
              _context.next = 5;
              return getRelationFeatures();

            case 5:
              mapService.hideMapSpinner();
              GUI.showUserMessage({
                type: 'info',
                size: 'small',
                message: t('editing.messages.press_esc'),
                closable: false
              });

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this7);
    }));
    preWorkflowStart = new Promise(function (resolve) {
      workflow.bindEscKeyUp();
      var promise = workflow.start(options);
      resolve({
        promise: promise,
        showContent: true
      });
    });
  } else preWorkflowStart = new Promise(function (resolve) {
    getRelationFeatures().then(function () {
      resolve({});
    });
  });

  preWorkflowStart.then(function () {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        promise = _ref4.promise,
        _ref4$showContent = _ref4.showContent,
        showContent = _ref4$showContent === undefined ? false : _ref4$showContent;

    var linked = false;
    promise = promise || workflow.start(options);
    promise.then(function (outputs) {
      if (outputs.features.length) {
        outputs.features.forEach(function (relation) {
          var relationAlreadyLinked = _this7.relations.find(function (rel) {
            return rel.id === relation.getId();
          });
          if (!relationAlreadyLinked) {
            linked = linked || true;
            var originalRelation = relation.clone();
            relation.set(ownField, _this7._currentParentFeatureRelationFieldValue);
            _this7.getCurrentWorkflowData().session.pushUpdate(_this7._relationLayerId, relation, originalRelation);
            _this7.relations.push(_this7._createRelationObj(relation));
            _this7.emitEventToParentWorkFlow();
          } else GUI.notify.warning(t("editing.relation_already_added"));
        });
      }
    }).fail(function (err) {
      session.rollbackDependecies([_this7._relationLayerId]);
    }).always(function () {
      if (showContent) {
        GUI.closeUserMessage();
        GUI.hideContent(false);
        workflow.unbindEscKeyUp();
      }
      linked && _this7.forceParentsFromServiceWorkflowToUpdated();
      workflow.stop();
    });
  });
};

/**
 *
 * @returns {*}
 * @private
 */
proto._checkIfExternalFieldRequired = function () {
  // own Field is relation Field of Relation Layer
  var _getEditingService$_g5 = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._relationLayerId,
    relation: this.relation
  }),
      ownField = _getEditingService$_g5.ownField;

  return this.getEditingService().isFieldRequired(this._relationLayerId, ownField);
};

proto.isRequired = function () {
  return this._isExternalFieldRequired;
};

proto._getRelationFeature = function (featureId) {
  var layer = this.getLayer();
  return layer.getEditingSource().getFeatureById(featureId);
};

proto.unlinkRelation = function (index) {
  var _this8 = this;

  var dialog = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var d = $.Deferred();

  var _getEditingService$_g6 = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._relationLayerId,
    relation: this.relation
  }),
      ownField = _getEditingService$_g6.ownField;

  var unlink = function unlink() {
    var relation = _this8.relations[index];
    var feature = _this8.getLayer().getEditingSource().getFeatureById(relation.id);
    var originalRelation = feature.clone();
    feature.set(ownField, null);
    _this8.getCurrentWorkflowData().session.pushUpdate(_this8._relationLayerId, feature, originalRelation);
    _this8.relations.splice(index, 1);
    _this8.forceParentsFromServiceWorkflowToUpdated();
    d.resolve(true);
  };
  if (dialog) {
    GUI.dialog.confirm(t("editing.messages.unlink_relation"), function (result) {
      if (result) unlink();else d.reject(false);
    });
  } else unlink();

  return d.promise();
};

proto.getCurrentWorkflow = function () {
  return this.getEditingService().getCurrentWorkflow();
};

proto.getCurrentWorkflowData = function () {
  return this.getEditingService().getCurrentWorkflowData();
};

proto._createWorkflowOptions = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _getEditingService$_g7 = this.getEditingService()._getRelationFieldsFromRelation({
    layerId: this._relationLayerId,
    relation: this.relation
  }),
      ownField = _getEditingService$_g7.ownField;

  var workflow_options = {
    parentFeature: this.getCurrentWorkflowData().feature,
    context: {
      session: this.getCurrentWorkflowData().session,
      excludeFields: [ownField],
      fatherValue: this._currentParentFeatureRelationFieldValue, // field of father relation layer
      fatherField: ownField // value of father relationField
    },
    inputs: {
      features: options.features || [],
      layer: this.getLayer()
    }
  };
  return workflow_options;
};

proto.getUnlinkedStyle = function () {
  var style = void 0;
  var geometryType = this.getLayer().getGeometryType();
  switch (geometryType) {
    case 'Point' || 'MultiPoint':
      style = new ol.style.Style({
        image: new ol.style.Circle({
          radius: 8,
          fill: new ol.style.Fill({
            color: this._getRelationAsFatherStyleColor('Point')
          }),
          stroke: new ol.style.Stroke({
            width: 5,
            color: 'yellow'
          })
        })
      });
      break;
    case 'Line' || 'MultiLine':
      style = new ol.style.Style({
        fill: new ol.style.Fill({
          color: this._getRelationAsFatherStyleColor('Line')
        }),
        stroke: new ol.style.Stroke({
          width: 5,
          color: 'yellow'
        })
      });
      break;
    case 'Polygon' || 'MultiPolygon':
      style = new ol.style.Style({
        stroke: new ol.style.Stroke({
          color: 'yellow',
          width: 5
        }),
        fill: new ol.style.Fill({
          color: this._getRelationAsFatherStyleColor('Polygon'),
          opacity: 0.5
        })
      });
  }
  return style;
};

proto.relationFields = function (relation) {
  var attributes = [];
  relation.fields.forEach(function (field) {
    var value = field.value;
    attributes.push({ label: field.label, value: value });
  });
  return attributes;
};

module.exports = RelationService;

},{"../workflows/addfeatureworkflow":50,"../workflows/addtablefeatureworkflow":52,"../workflows/deletefeatureworkflow":56,"../workflows/editfeatureattributesworkflow":58,"../workflows/edittablefeatureworkflow":62,"../workflows/edittableworkflow":63,"../workflows/linkrelationworkflow":64,"../workflows/modifygeometryvertexworkflow":66,"../workflows/movefeatureworkflow":67,"../workflows/selectandcopyfeaturesfromotherlayerworkflow":68,"./editingservice":42}],44:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var G3WObject = g3wsdk.core.G3WObject;
var GUI = g3wsdk.gui.GUI;

var t = g3wsdk.core.i18n.tPlugin;

var TableService = function TableService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._features = options.features || []; // original features
  this._promise = options.promise;
  this._context = options.context;
  this._inputs = options.inputs;
  this._fatherValue = options.fatherValue;
  this._foreignKey = options.foreignKey;
  this._workflow = null;
  this._deleteFeaturesIndexes = [];
  this._isrelation = options.isrelation || false;
  var capabilities = options.capabilities,
      _options$headers = options.headers,
      headers = _options$headers === undefined ? [] : _options$headers,
      _options$title = options.title,
      title = _options$title === undefined ? 'Link relation' : _options$title,
      isrelation = options.push;

  this.state = {
    headers: headers,
    features: [],
    title: title,
    isrelation: isrelation,
    capabilities: capabilities
  };

  this.init = function () {
    var _this = this;

    //filter the original feature based on if is a relation
    this._features = !this._isrelation ? this._features : this._features.filter(function (feature) {
      return feature.get(_this._foreignKey) !== _this._fatherValue;
    });
    // set values
    if (this._features.length) {
      var baseFeature = this._features[0];
      var properties = Object.keys(baseFeature.getProperties());
      this.state.headers = this.state.headers.filter(function (header) {
        return properties.indexOf(header.name) !== -1;
      });
      var _headers = this.state.headers.map(function (header) {
        return header.name;
      });
      this.state.features = this._features.map(function (feature) {
        var properties = feature.getProperties();
        var orderedProperties = {};
        _headers.forEach(function (header) {
          orderedProperties[header] = properties[header];
        });
        orderedProperties.__gis3w_feature_uid = feature.getUid();
        return orderedProperties;
      });
    }
  };
  this.init();
  base(this);
};

inherit(TableService, G3WObject);

var proto = TableService.prototype;

proto.isMediaField = function (name) {
  var isMedia = false;
  for (var i = 0; i < this.state.headers.length; i++) {
    var header = this.state.headers[i];
    if (header.name === name && header.input.type === 'media') {
      isMedia = true;
      break;
    }
  }
  return isMedia;
};

proto.save = function () {
  this._promise.resolve();
};

proto.cancel = function () {
  this._promise.reject();
};

proto.deleteFeature = function (uid) {
  var _this2 = this;

  var EditingService = require('./editingservice');
  var layer = this._inputs.layer;
  var layerId = layer.getId();
  var childRelations = layer.getChildren();
  var relationinediting = childRelations.length && EditingService._filterRelationsInEditing({
    layerId: layerId,
    relations: layer.getRelations().getArray()
  }).length > 0;
  return new Promise(function (resolve, reject) {
    GUI.dialog.confirm('<h4>' + t('editing.messages.delete_feature') + '</h4>\n                        <div style="font-size:1.2em;">' + (relationinediting ? t('editing.messages.delete_feature_relations') : '') + '</div>', function (result) {
      if (result) {
        var index = void 0;
        var feature = _this2._features.find(function (feature, featureIdx) {
          if (feature.getUid() === uid) {
            index = featureIdx;
            return true;
          }
        });
        var session = _this2._context.session;
        var _layerId = _this2._inputs.layer.getId();
        _this2._inputs.layer.getEditingSource().removeFeature(feature);
        session.pushDelete(_layerId, feature);
        _this2.state.features.splice(index, 1);
        resolve();
      } else reject();
    });
  });
};

proto.copyFeature = function (uid) {
  var _this3 = this;

  return new Promise(function (resolve, reject) {
    var feature = _this3._features.find(function (feature) {
      return feature.getUid() === uid;
    }).cloneNew();
    var addTableFeatureWorflow = require('../workflows/addtablefeatureworkflow');
    _this3._workflow = new addTableFeatureWorflow();
    var inputs = _this3._inputs;
    inputs.features.push(feature);
    var options = {
      context: _this3._context,
      inputs: inputs
    };
    _this3._workflow.start(options).then(function (outputs) {
      var feature = outputs.features[outputs.features.length - 1];
      var newFeature = {};
      Object.entries(_this3.state.features[0]).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        newFeature[key] = feature.get(key);
      });
      newFeature.__gis3w_feature_uid = feature.getUid();
      _this3.state.features.push(newFeature);
      resolve(newFeature);
    }).fail(function (err) {
      return reject(err);
    });
  });
};

proto.editFeature = function (uid) {
  var _this4 = this;

  var index = void 0;
  var feature = this._features.find(function (feature, featureIndex) {
    if (feature.getUid() === uid) {
      index = featureIndex;
      return true;
    }
  });
  var EditTableFeatureWorkflow = require('../workflows/edittablefeatureworkflow');
  this._workflow = new EditTableFeatureWorkflow();
  var inputs = this._inputs;
  inputs.features.push(feature);
  var options = {
    context: this._context,
    inputs: inputs
  };
  this._workflow.start(options).then(function (outputs) {
    var feature = outputs.features[outputs.features.length - 1];
    Object.entries(_this4.state.features[index]).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];

      _this4.state.features[index][key] = feature.get(key);
    });
  }).fail(function (err) {}).always(function () {
    return _this4._workflow.stop();
  });
};

proto.linkFeatures = function () {
  var _this5 = this;

  var featuresIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var features = featuresIndex.map(function (index) {
    return _this5._features[index];
  });
  this._promise.resolve({
    features: features
  });
};

proto.linkFeature = function (index) {
  var feature = this._features[index];
  this._promise.resolve({
    features: [feature]
  });
};

module.exports = TableService;

},{"../workflows/addtablefeatureworkflow":52,"../workflows/edittablefeatureworkflow":62,"./editingservice":42}],45:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit,
    toRawType = _g3wsdk$core$utils.toRawType;
var GUI = g3wsdk.gui.GUI;
var G3WObject = g3wsdk.core.G3WObject;


function Tool() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this.editingService = require('../services/editingservice');
  var name = options.name,
      row = options.row,
      id = options.id,
      icon = options.icon,
      session = options.session,
      layer = options.layer,
      _options$once = options.once,
      once = _options$once === undefined ? false : _options$once,
      _options$type = options.type,
      type = _options$type === undefined ? [] : _options$type,
      _options$visible = options.visible,
      visible = _options$visible === undefined ? true : _options$visible,
      _options$conditions = options.conditions,
      conditions = _options$conditions === undefined ? {} : _options$conditions;

  this._options = null;
  this._session = session;
  this._layer = layer;
  this._op = new options.op({
    layer: layer
  });
  this._once = once;
  this.type = type;
  this.conditions = conditions;
  this.disabledtoolsoftools = [];
  this.state = {
    id: id,
    name: name,
    enabled: false,
    visible: visible instanceof Function ? function () {
      return visible(_this);
    }() : visible,
    active: false,
    icon: icon,
    message: null,
    row: row || 1,
    messages: this._op.getMessages()
  };
}

inherit(Tool, G3WObject);

var proto = Tool.prototype;

proto.setOptions = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var messages = options.messages,
      _options$enabled = options.enabled,
      enabled = _options$enabled === undefined ? false : _options$enabled,
      _options$visible2 = options.visible,
      visible = _options$visible2 === undefined ? true : _options$visible2,
      _options$disabledtool = options.disabledtoolsoftools,
      disabledtoolsoftools = _options$disabledtool === undefined ? [] : _options$disabledtool;

  this.state.messages = messages || this.state.messages;
  this.state.visible = visible;
  this.state.enabled = enabled;
  this.disabledtoolsoftools = disabledtoolsoftools;
};

/**
 * Return layer owner of tool
 */
proto.getLayer = function () {
  return this._layer;
};

proto.getType = function () {
  return this.type;
};

proto.getFeature = function () {
  return this._options.inputs.features[0];
};

proto.createOperatorOptions = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { features: [] };
  var _options$features = options.features,
      features = _options$features === undefined ? [] : _options$features;

  return {
    inputs: {
      layer: this._layer,
      features: features
    },
    context: {
      session: this._session
    }
  };
};

/**
 * 
 * @param hideSidebar
 */
proto.start = function () {
  var _this2 = this;

  var hideSidebar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var options = this.createOperatorOptions();
  this._options = options;
  var startOp = function startOp(options) {
    _this2._op.once('settoolsoftool', function (tools) {
      // filter eventually disable tools of tools
      tools = tools.filter(function (tool) {
        return !_this2.disabledtoolsoftools.includes(tool.type);
      });
      tools.length && _this2.emit('settoolsoftool', tools);
    });
    _this2._op.once('active', function (index) {
      return _this2.emit('active', index);
    });
    _this2._op.once('deactive', function (index) {
      return _this2.emit('deactive', index);
    });
    //reset features
    options.inputs.features = [];
    hideSidebar && GUI.hideSidebar();
    _this2._op.start(options).then(function () {
      _this2._session.save().then(function () {
        return _this2.editingService.saveChange();
      }); // after save temp change check if editing service has a autosave
    }).fail(function () {
      hideSidebar && GUI.showSidebar();
      _this2._session.rollback().then(function () {});
    }).always(function () {
      if (!_this2._once && _this2._layer.getType() !== 'table') startOp(options);else _this2.stop();
    });
  };
  if (this._op) {
    this.state.active = true;
    setTimeout(function () {
      // used to prevent renderind change state
      startOp(options);
    });
  }
};

proto.stop = function () {
  var _this3 = this;

  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var d = $.Deferred();
  if (this._op) {
    this._op.stop(force).then(function () {}).fail(function () {
      return _this3._session.rollback();
    }).always(function () {
      _this3._options = null;
      _this3.state.active = false;
      _this3.emit('stop', {
        session: _this3._session
      });
      d.resolve();
    });
  } else {
    this.emit('stop', {
      session: this._session
    });
    d.resolve();
  }
  return d.promise();
};

proto.getState = function () {
  return this.state;
};

proto.setState = function (state) {
  this.state = state;
};

proto.getId = function () {
  return this.state.id;
};

proto.setId = function (id) {
  this.state.id = id;
};

proto.getName = function () {
  return this.state.name;
};

proto.setActive = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.active = bool;
};

proto.isActive = function () {
  return this.state.active;
};

proto.getIcon = function () {
  return this.state.icon;
};

proto.setIcon = function (icon) {
  this.state.icon = icon;
};

proto.setEnabled = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.enabled = bool;
};

proto.isEnabled = function () {
  return this.state.enabled;
};

proto.setVisible = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.state.visible = bool;
};

proto.isVisible = function () {
  return this.state.visible;
};

proto.getOperator = function () {
  return this._op;
};

proto.getSession = function () {
  return this._session;
};

proto.setSession = function (session) {
  this._session = session;
};

proto.clear = function () {
  this.state.enabled = false;
  this.state.active = false;
};

proto.getMessage = function () {
  var operator = this.getOperator();
  return operator.getHelpMessage() || operator.getRunningStep() ? this.state.messages : null;
};

proto.setMessage = function (message) {
  this.state.message = message;
};

proto.clearMessage = function () {
  this.state.message = null;
};

proto.resetDefault = function () {
  this.state.visible = true;
  this.state.enabled = false;
  this.state.messages = this._op.getMessages();
  this.disabledtoolsoftools = []; //reset disabled tools eventually set by other
};

module.exports = Tool;

},{"../services/editingservice":42}],46:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _g3wsdk$core = g3wsdk.core,
    ApplicationState = _g3wsdk$core.ApplicationState,
    G3WObject = _g3wsdk$core.G3WObject;
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit,
    debounce = _g3wsdk$core$utils.debounce,
    toRawType = _g3wsdk$core$utils.toRawType;
var GUI = g3wsdk.gui.GUI;
var t = g3wsdk.core.i18n.tPlugin;
var Layer = g3wsdk.core.layer.Layer;
var Session = g3wsdk.core.editing.Session;
var getScaleFromResolution = g3wsdk.ol.utils.getScaleFromResolution;


function ToolBox() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this);
  this.editingService = require('../services/editingservice');
  this._mapService = GUI.getService('map');
  this._start = false;
  this._constraints = options.constraints || {};
  this._layer = options.layer;
  this.uniqueFields = this.getUniqueFieldsType(this._layer.getEditingFields());
  this.uniqueFields && this.getFieldUniqueValuesFromServer();
  this._layerType = options.type || Layer.LayerTypes.VECTOR;
  this._loadedExtent = null;
  this._tools = options.tools;
  this._enabledtools;
  this._disabledtools;
  this._getFeaturesOption = {};
  var toolsstate = [];
  this._tools.forEach(function (tool) {
    return toolsstate.push(tool.getState());
  });
  this.constraints = {
    filter: null,
    show: null,
    tools: []
  }; // is used to constraint loading features to a filter set
  this._session = new Session({
    id: options.id,
    editor: this._layer.getEditor()
  });

  // get informed when save on server
  this.uniqueFields && this._session.onafter('saveChangesOnServer', function () {
    _this._resetUniqueValues();
  });

  this._getFeaturesOption = {};
  var historystate = this._session.getHistory().state;
  var sessionstate = this._session.state;

  this.state = {
    id: options.id,
    changingtools: false, // used to show or not tools during change phase
    show: true, // used to show or not the toolbox if we nee to filtered
    color: options.color || 'blue',
    title: options.title || "Edit Layer",
    customTitle: false,
    loading: false,
    enabled: false,
    toolboxheader: true,
    startstopediting: true,
    message: null,
    toolmessages: {
      help: null
    },
    toolsoftool: [],
    tools: toolsstate,
    selected: false,
    activetool: null,
    editing: {
      session: sessionstate,
      history: historystate,
      on: false,
      dependencies: [],
      relations: [],
      father: false,
      canEdit: true
    },
    layerstate: this._layer.state
  };

  /**
   *  save original value of state in case of custom changes
   * 
   */
  this.originalState = {
    title: this.state.title,
    toolsoftool: [].concat(_toConsumableArray(this.state.toolsoftool))
  };

  this._tools.forEach(function (tool) {
    return tool.setSession(_this._session);
  });

  this._session.onafter('stop', function () {
    if (_this.inEditing()) {
      ApplicationState.online && _this.editingService.stopSessionChildren(_this.state.id);
      _this._getFeaturesOption.registerEvents && _this._unregisterGetFeaturesEvent();
    }
  });

  this._session.onafter('start', function (options) {
    if (options.registerEvents) {
      _this._getFeaturesEvent = {
        event: null,
        fnc: null
      };
      _this._getFeaturesOption = options;
      _this._registerGetFeaturesEvent(_this._getFeaturesOption);
      if (options.type === Layer.LayerTypes.VECTOR && GUI.getContentLength()) GUI.once('closecontent', function () {
        return setTimeout(function () {
          return _this._mapService.getMap().dispatchEvent(_this._getFeaturesEvent.event);
        });
      });
    }
  });
}

inherit(ToolBox, G3WObject);

var proto = ToolBox.prototype;

proto.getState = function () {
  return this.state;
};

proto.setShow = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.state.show = bool;
};

proto.getLayer = function () {
  return this._layer;
};

proto.setFather = function (bool) {
  this.state.editing.father = bool;
};

proto.isFather = function () {
  return this.state.editing.father;
};

proto.addRelations = function (relations) {
  var _this2 = this;

  relations.forEach(function (relation) {
    return _this2.addRelation(relation);
  });
};

proto.revert = function () {
  return this._session.revert();
};

proto.addRelation = function (relation) {
  this.state.editing.relations.push(relation);
};

proto.getDependencies = function () {
  return this.state.editing.dependencies;
};

proto.hasDependencies = function () {
  return !!this.state.editing.dependencies.length;
};

proto.addDependencies = function (dependencies) {
  var _this3 = this;

  dependencies.forEach(function (dependency) {
    return _this3.addDependency(dependency);
  });
};

proto.addDependency = function (dependency) {
  this.state.editing.dependencies.push(dependency);
};

proto.getFieldUniqueValuesFromServer = function () {
  var _this4 = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$reset = _ref.reset,
      reset = _ref$reset === undefined ? false : _ref$reset;

  var fieldsName = Object.values(this.uniqueFields).map(function (field) {
    return field.name;
  });
  this._layer.getWidgetData({
    type: 'unique',
    fields: fieldsName.join()
  }).then(function (response) {
    var data = response.data;
    Object.entries(data).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          fieldName = _ref3[0],
          values = _ref3[1];

      reset && _this4.uniqueFields[fieldName].input.options.values.splice(0);
      values.forEach(function (value) {
        return _this4.uniqueFields[fieldName].input.options.values.push(value);
      });
    });
  }).fail(console.log);
};

proto.getUniqueFieldsType = function (fields) {
  var uniqueFields = {};
  var find = false;
  fields.forEach(function (field) {
    if (field.input && field.input.type === 'unique') {
      uniqueFields[field.name] = field;
      find = true;
    }
  });
  return find && uniqueFields || null;
};

proto._resetUniqueValues = function () {
  this.getFieldUniqueValuesFromServer({
    reset: true
  });
};

/*
check if vectorLayer
 */
proto.isVectorLayer = function () {
  return this._layerType === Layer.LayerTypes.VECTOR;
};

/**
 * Method to create getFeatures options
 * @param filter
 */
proto.setFeaturesOptions = function () {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      filter = _ref4.filter;

  if (filter) {
    // in case of no features filter request check if no features_filed is present otherwise i get first field
    if (filter.nofeatures) filter.nofeatures_field = filter.nofeatures_field || this._layer.getEditingFields()[0].name;
    this._getFeaturesOption = {
      filter: filter,
      editing: true,
      registerEvents: false
    };
    // in case of constarint attribute set the filter as constraint
    filter.constraint && this.setConstraintFeaturesFilter(filter);
  } else {
    var filterType = this._layerType === Layer.LayerTypes.TABLE ? 'all' : 'bbox';
    this._getFeaturesOption = this.editingService.createEditingDataOptions(filterType, {
      layerId: this.getId()
    });
  }
};

proto.setEditingConstraints = function () {
  var _this5 = this;

  var constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  Object.keys(constraints).forEach(function (constraint) {
    return _this5.constraints[constraint] = constraints[constraint];
  });
};

proto.setLayerUniqueFieldValues = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return this.editingService.setLayerUniqueFieldValues(this.getId());

        case 2:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, this);
}));

proto.clearLayerUniqueFieldsValues = function () {
  this.editingService.clearLayerUniqueFieldsValues(this.getId());
};

//added option object to start method to have a control by other plugin how
proto.start = function () {
  var _this6 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var filter = options.filter,
      _options$toolboxheade = options.toolboxheader,
      toolboxheader = _options$toolboxheade === undefined ? true : _options$toolboxheade,
      _options$startstopedi = options.startstopediting,
      startstopediting = _options$startstopedi === undefined ? true : _options$startstopedi,
      _options$showtools = options.showtools,
      showtools = _options$showtools === undefined ? true : _options$showtools,
      tools = options.tools,
      _options$changingtool = options.changingtools,
      changingtools = _options$changingtool === undefined ? false : _options$changingtool;

  this.state.changingtools = changingtools;
  tools && this.setEnablesDisablesTools(tools);
  this.state.toolboxheader = toolboxheader;
  this.state.startstopediting = startstopediting;
  var EventName = 'start-editing';
  var d = $.Deferred();
  var id = this.getId();
  var applicationConstraint = this.editingService.getApplicationEditingConstraintById(this.getId());
  filter = applicationConstraint && applicationConstraint.filter || this.constraints.filter || filter;
  // set filterOptions
  this.setFeaturesOptions({
    filter: filter
  });

  var handlerAfterSessionGetFeatures = function handlerAfterSessionGetFeatures(promise) {
    _this6.emit(EventName);
    _this6.setLayerUniqueFieldValues().then(function () {
      _this6.editingService.runEventHandler({
        type: EventName,
        id: id
      });
      promise.then(function (features) {
        _this6.stopLoading();
        _this6.setEditing(true);
        _this6.editingService.runEventHandler({
          type: 'get-features-editing',
          id: id,
          options: {
            features: features
          }
        });

        d.resolve({
          features: features
        });
      }).fail(function (error) {
        GUI.notify.error(error.message);
        _this6.editingService.runEventHandler({
          type: 'error-editing',
          id: id,
          error: error
        });
        _this6.stop();
        _this6.stopLoading();
        d.reject(error);
      });
    });
  };
  if (this._session) {
    if (!this._session.isStarted()) {
      //added case of mobile
      if (ApplicationState.ismobile && this._mapService.isMapHidden() && this._layerType === Layer.LayerTypes.VECTOR) {
        this.setEditing(true);
        GUI.getService('map').onceafter('setHidden', function () {
          setTimeout(function () {
            _this6._start = true;
            _this6.startLoading();
            _this6.setFeaturesOptions({
              filter: filter
            });
            _this6._session.start(_this6._getFeaturesOption).then(handlerAfterSessionGetFeatures).fail(function () {
              return _this6.setEditing(false);
            });
          }, 300);
        });
      } else {
        this._start = true;
        this.startLoading();
        this._session.start(this._getFeaturesOption).then(handlerAfterSessionGetFeatures);
      }
    } else {
      if (!this._start) {
        this.startLoading();
        this._session.getFeatures(this._getFeaturesOption).then(handlerAfterSessionGetFeatures);
        this._start = true;
      }
      this.setEditing(true);
    }
  }
  return d.promise();
};

proto.startLoading = function () {
  this.state.loading = true;
};

proto.stopLoading = function () {
  this.state.loading = false;
};

proto.getFeaturesOption = function () {
  return this._getFeaturesOption;
};

proto.stop = function () {
  var _this7 = this;

  var EventName = 'stop-editing';
  var d = $.Deferred();
  this.disableCanEditEvent && this.disableCanEditEvent();
  if (this._session && this._session.isStarted()) {
    var is_there_a_father_in_editing = this.editingService.fatherInEditing(this.state.id);
    if (ApplicationState.online && !is_there_a_father_in_editing) {
      this._session.stop().then(function () {
        _this7._start = false;
        _this7.state.editing.on = false;
        _this7.state.enabled = false;
        _this7.stopLoading();
        _this7._getFeaturesOption = {};
        _this7.stopActiveTool();
        _this7.enableTools(false);
        _this7.clearToolboxMessages();
        _this7.setSelected(false);
        _this7.emit(EventName);
        _this7.clearLayerUniqueFieldsValues();
        d.resolve(true);
      }).fail(function (err) {
        return d.reject(err);
      }).always(function () {
        return _this7.setSelected(false);
      });
    } else {
      this.stopActiveTool();
      // need to be sure to clear
      this._layer.getEditingLayer().getSource().clear();
      this.state.editing.on = false;
      this.enableTools(false);
      this.clearToolboxMessages();
      this._unregisterGetFeaturesEvent();
      this.editingService.stopSessionChildren(this.state.id);
      this.setSelected(false);
      this.clearLayerUniqueFieldsValues();
    }
  } else {
    this.setSelected(false);
    d.resolve(true);
  }
  return d.promise();
};

proto.save = function () {
  this._session.commit();
};

proto._unregisterGetFeaturesEvent = function () {
  switch (this._layerType) {
    case Layer.LayerTypes.VECTOR:
      this._mapService.getMap().un(this._getFeaturesEvent.event, this._getFeaturesEvent.fnc);
      break;
    default:
      return;
  }
};

proto._registerGetFeaturesEvent = function () {
  var _this8 = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  switch (this._layerType) {
    case Layer.LayerTypes.VECTOR:
      // only in case filter bbox
      if (options.filter.bbox) {
        var fnc = function fnc() {
          var canEdit = _this8.state.editing.canEdit;
          _this8._layer.getEditingLayer().setVisible(canEdit);
          //added ApplicationState.online
          if (ApplicationState.online && canEdit && GUI.getContentLength() === 0) {
            var bbox = _this8._mapService.getMapBBOX();
            options.filter.bbox = bbox;
            _this8.state.loading = true;
            _this8._session.getFeatures(options).then(function (promise) {
              promise.then(function () {
                _this8.state.loading = false;
              });
            });
          }
        };
        this._getFeaturesEvent.event = 'moveend';
        this._getFeaturesEvent.fnc = debounce(fnc, 300);
        var map = this._mapService.getMap();
        map.on('moveend', this._getFeaturesEvent.fnc);
      }
      break;
    default:
      return;
  }
};

proto.setConstraintFeaturesFilter = function (filter) {
  this.constraintFeatureFilter = filter;
};

proto.getEditingConstraints = function () {
  return this._constraints;
};

proto.getEditingConstraint = function (type) {
  return this.getEditingConstraints()[type];
};

proto.canEdit = function () {
  return this.state.editing.canEdit;
};

proto._canEdit = function () {
  var _this9 = this;

  if (this._constraints.scale) {
    var scale = this._constraints.scale;
    var message = ('' + t('editing.messages.constraints.enable_editing') + scale).toUpperCase();
    this.state.editing.canEdit = getScaleFromResolution(this._mapService.getMap().getView().getResolution()) <= scale;
    GUI.setModal(!this.state.editing.canEdit, message);
    var fnc = function fnc(event) {
      _this9.state.editing.canEdit = getScaleFromResolution(event.target.getResolution()) <= scale;
      GUI.setModal(!_this9.state.editing.canEdit, message);
    };
    this._mapService.getMap().getView().on('change:resolution', fnc);
    this.disableCanEditEvent = function () {
      GUI.setModal(false);
      _this9._mapService.getMap().getView().un('change:resolution', fnc);
    };
  }
};

proto._disableCanEdit = function () {
  this.state.editing.canEdit = true;
  this.disableCanEditEvent && this.disableCanEditEvent();
};

proto.setMessage = function (message) {
  this.state.message = message;
};

proto.getMessage = function () {
  return this.state.message;
};

proto.clearMessage = function () {
  this.setMessage(null);
};

proto.clearToolboxMessages = function () {
  this.clearToolMessage();
  this.clearMessage();
};

proto.getId = function () {
  return this.state.id;
};

proto.setId = function (id) {
  this.state.id = id;
};

proto.getTitle = function () {
  return this.state.title;
};

proto.setTitle = function (title) {
  this.state.customTitle = true;
  this.state.title = title;
};

proto.getColor = function () {
  return this.state.color;
};

/**
 * Function that enable toolbox
 * @param bool
 */
proto.setEditing = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  this.setEnable(bool);
  this.state.editing.on = bool;
  this.enableTools(bool);
};

proto.inEditing = function () {
  return this.state.editing.on;
};

proto.isEnabled = function () {
  return this.state.enabled;
};

proto.setEnable = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.enabled = bool;
  return this.state.enabled;
};

proto.isLoading = function () {
  return this.state.loading;
};

proto.isDirty = function () {
  return this.state.editing.history.commit;
};

proto.isSelected = function () {
  return this.state.selected;
};

proto.setSelected = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  this.state.selected = bool;
  this.state.selected ? this._canEdit() : this._disableCanEdit();
};

proto.getTools = function () {
  return this._tools;
};

/**
 *
 * Return tool by id
 * @param toolId
 * @returns {*|number|bigint|T|T}
 */
proto.getToolById = function (toolId) {
  return this._tools.find(function (tool) {
    return toolId === tool.getId();
  });
};

/**
 *
 * @param tool
 */
proto.setEnableTool = function (toolId) {
  var tool = this._tools.find(function (tool) {
    return tool.getId() === toolId;
  });
  tool.setEnabled(true);
};

/**
 * method to set tools bases on add
 * editing_constraints : true // follow the tools related toi editing conttraints configuration
 */

proto.setAddEnableTools = function () {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$tools = _ref6.tools,
      tools = _ref6$tools === undefined ? {} : _ref6$tools,
      _ref6$options = _ref6.options,
      options = _ref6$options === undefined ? { editing_constraints: true } : _ref6$options;

  var _options$editing_cons = options.editing_constraints,
      editing_constraints = _options$editing_cons === undefined ? false : _options$editing_cons;

  var ADDONEFEATUREONLYTOOLSID = ['addfeature', 'editattributes', 'movefeature', 'movevertex'];
  var add_tools = this._tools.filter(function (tool) {
    return editing_constraints ? tool.getType().find(function (type) {
      return type === 'add_feature';
    }) : ADDONEFEATUREONLYTOOLSID.indexOf(tool.getId()) !== -1;
  }).map(function (tool) {
    var id = tool.getId();
    return {
      id: id,
      options: tools[id]
    };
  });

  this.setEnablesDisablesTools({
    enabled: add_tools
  });

  this.enableTools(true);
};

/**
 * method to set tools bases on update
 */
proto.setUpdateEnableTools = function (_ref7) {
  var _ref7$tools = _ref7.tools,
      tools = _ref7$tools === undefined ? {} : _ref7$tools,
      _ref7$excludetools = _ref7.excludetools,
      excludetools = _ref7$excludetools === undefined ? [] : _ref7$excludetools,
      _ref7$options = _ref7.options,
      options = _ref7$options === undefined ? { editing_constraints: true } : _ref7$options;
  var _options$editing_cons2 = options.editing_constraints,
      editing_constraints = _options$editing_cons2 === undefined ? false : _options$editing_cons2;

  var UPDATEONEFEATUREONLYTOOLSID = ['editattributes', 'movefeature', 'movevertex'];
  var update_tools = this._tools.filter(function (tool) {
    // exclude
    if (excludetools.indexOf(tool.getId()) !== -1) return false;
    return editing_constraints ? tool.getType().find(function (type) {
      return type === 'change_feature' || type === 'change_attr_feature';
    }) : UPDATEONEFEATUREONLYTOOLSID.indexOf(tool.getId()) !== -1;
  }).map(function (tool) {
    var id = tool.getId();
    return {
      id: id,
      options: tools[id]
    };
  });

  this.setEnablesDisablesTools({
    enabled: update_tools
  });
  this.enableTools(true);
};

/**
 * method to set tools bases on delete
 */

proto.setDeleteEnableTools = function () {
  //TODO

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
};

/**
 * Method to set enable tools
 *
 * @param tools
 */
proto.setEnablesDisablesTools = function (tools) {
  var _this10 = this;

  if (tools) {
    this.state.changingtools = true;
    // Check if tools is an array
    var _tools$enabled = tools.enabled,
        enableTools = _tools$enabled === undefined ? [] : _tools$enabled,
        _tools$disabled = tools.disabled,
        disableTools = _tools$disabled === undefined ? [] : _tools$disabled;

    var toolsId = enableTools.length ? [] : this._tools.map(function (tool) {
      return tool.getId();
    });
    enableTools.forEach(function (_ref8) {
      var id = _ref8.id,
          _ref8$options = _ref8.options,
          options = _ref8$options === undefined ? {} : _ref8$options;

      //check if id of tool passed as argument is right
      var tool = _this10.getToolById(id);
      if (tool) {
        var _options$active = options.active,
            active = _options$active === undefined ? false : _options$active;

        tool.setOptions(options);
        tool.isVisible() && toolsId.push(id);
        active && _this10.setActiveTool(tool);
        if (_this10._enabledtools === undefined) _this10._enabledtools = [];
        _this10._enabledtools.push(tool);
      }
    });
    //disabled and visible
    disableTools.forEach(function (_ref9) {
      var id = _ref9.id,
          options = _ref9.options;

      var tool = _this10.getToolById(id);
      if (tool) {
        if (_this10._disabledtools === undefined) _this10._disabledtools = [];
        _this10._disabledtools.push(id);
        //add it toi visible tools
        toolsId.push(id);
      }
    });
    //set not visible all remain
    this._tools.forEach(function (tool) {
      return !toolsId.includes(tool.getId()) && tool.setVisible(false);
    });
    this.state.changingtools = false;
  }
};

// enable all tools
proto.enableTools = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var tools = this._enabledtools || this._tools;
  var disabledtools = this._disabledtools || [];
  tools.forEach(function (tool) {
    var _tool$conditions$enab = tool.conditions.enabled,
        enabled = _tool$conditions$enab === undefined ? bool : _tool$conditions$enab;

    var enableTool = bool && disabledtools.length ? disabledtools.indexOf(tool.getId()) === -1 : toRawType(enabled) === 'Boolean' ? enabled : enabled({
      bool: bool,
      tool: tool
    });
    tool.setEnabled(enableTool);
    !bool && tool.setActive(bool);
  });
};

proto.setActiveTool = function (tool) {
  var _this11 = this;

  this.stopActiveTool(tool).then(function () {
    _this11.clearToolsOfTool();
    _this11.state.activetool = tool;
    tool.once('settoolsoftool', function (tools) {
      return tools.forEach(function (tool) {
        return _this11.state.toolsoftool.push(tool);
      });
    });
    var _activedeactivetooloftools = function _activedeactivetooloftools(activetools, active) {
      _this11.state.toolsoftool.forEach(function (tooloftool) {
        if (activetools.indexOf(tooloftool.type) !== -1) tooloftool.options.active = active;
      });
    };

    tool.on('active', function () {
      var activetools = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return _activedeactivetooloftools(activetools, true);
    });
    tool.on('deactive', function () {
      var activetools = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return _activedeactivetooloftools(activetools, false);
    });

    var hideSidebar = _this11._mapService.isMapHidden();
    tool.start(hideSidebar);
    var message = _this11.getToolMessage();
    _this11.setToolMessage(message);
  });
};

proto.clearToolsOfTool = function () {
  this.state.toolsoftool.splice(0);
};

proto.getActiveTool = function () {
  return this.state.activetool;
};

proto.restartActiveTool = function () {
  var activeTool = this.getActiveTool();
  this.stopActiveTool();
  this.setActiveTool(activeTool);
};

proto.stopActiveTool = function (tool) {
  var _this12 = this;

  var d = $.Deferred();
  var activeTool = this.getActiveTool();
  if (activeTool && activeTool !== tool) {
    activeTool.removeAllListeners();
    activeTool.stop(true).then(function () {
      _this12.clearToolsOfTool();
      _this12.clearToolMessage();
      _this12.state.activetool = null;
      setTimeout(d.resolve);
    });
  } else {
    tool ? tool.removeAllListeners() : null;
    d.resolve();
  }
  return d.promise();
};

proto.clearToolMessage = function () {
  this.state.toolmessages.help = null;
};

proto.getToolMessage = function () {
  var tool = this.getActiveTool();
  return tool.getMessage();
};

proto.setToolMessage = function () {
  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.state.toolmessages.help = messages && messages.help || null;
};

proto.getSession = function () {
  return this._session;
};

proto.getEditor = function () {
  return this._editor;
};

proto.setEditor = function (editor) {
  this._editor = editor;
};

proto.hasChildren = function () {
  return this._layer.hasChildren();
};

proto.hasFathers = function () {
  return this._layer.hasFathers();
};

proto.hasRelations = function () {
  return this._layer.hasRelations();
};

/**
 * Method to reset default values
 */
proto.resetDefault = function () {
  this.state.title = this.originalState.title;
  this.state.toolboxheader = true;
  this.state.startstopediting = true;
  this.constraints = {
    filter: null,
    show: null,
    tools: []
  };

  if (this._enabledtools) {
    this._enabledtools = undefined;
    this.enableTools();
    this._tools.forEach(function (tool) {
      return tool.resetDefault();
    });
  }
  this._disabledtools = null;
  this.setShow(true);
};

module.exports = ToolBox;

},{"../services/editingservice":42}],47:[function(require,module,exports){
var Layer = g3wsdk.core.layer.Layer;

var EditToolsFactory = require('./toolsfactory');
var ToolBox = require('./toolbox');

function EditorToolBoxesFactory() {
  this.build = function (layer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    //get editing contsraints
    var constraints = layer.getEditingConstrains();
    // get editing capabilities (create, update_attributes, update_geometry, delete)
    var capabilities = layer.getEditingCapabilities();
    var type = layer.getType();
    var id = layer.getId();
    var color = layer.getColor();
    var tools = [];
    switch (type) {
      case Layer.LayerTypes.VECTOR:
        var geometryType = layer.getGeometryType();
        tools = EditToolsFactory.build({
          layer: layer,
          geometryType: geometryType,
          type: type,
          capabilities: capabilities
        });
        break;
      case Layer.LayerTypes.TABLE:
        tools = EditToolsFactory.build({
          layer: layer,
          type: type,
          capabilities: capabilities
        });
        break;
      default:
        break;
    }
    return new ToolBox({
      id: id,
      color: color,
      type: type,
      layer: layer,
      tools: tools,
      lngTitle: 'editing.toolbox.title',
      title: ' ' + layer.getName(),
      constraints: constraints
    });
  };
}

module.exports = new EditorToolBoxesFactory();

},{"./toolbox":46,"./toolsfactory":48}],48:[function(require,module,exports){
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Layer = g3wsdk.core.layer.Layer;
var Geometry = g3wsdk.core.geometry.Geometry;
var GUI = g3wsdk.gui.GUI;
var isSameBaseGeometryType = g3wsdk.core.geoutils.isSameBaseGeometryType;

var Tool = require('./tool');
var AddFeatureWorkflow = require('../workflows/addfeatureworkflow');
var ModifyGeometryVertexWorkflow = require('../workflows/modifygeometryvertexworkflow');
var MoveFeatureWorkflow = require('../workflows/movefeatureworkflow');
var DeleteFeatureWorkflow = require('../workflows/deletefeatureworkflow');
var EditFeatureAttributesWorkflow = require('../workflows/editfeatureattributesworkflow');
var EditTableFeaturesWorkflow = require('../workflows/edittableworkflow');
var AddTableFeatureWorflow = require('../workflows/addtablefeatureworkflow');
var CopyFeaturesWorflow = require('../workflows/copyfeaturesworkflow');
var SplitFeatureWorkflow = require('../workflows/splitfeatureworkflow');
var MergeFeaturesWorkflow = require('../workflows/mergefeaturesworkflow');
var AddPartToMultigeometriesWorkflow = require('../workflows/addparttomultigeometriesworkflow');
var DeletePartFromMultigeometriesWorkflow = require('../workflows/deletepartfrommultigeometriesworkflow');
var EditMultiFeatureAttributesWorkflow = require('../workflows/editmultifeatureattributesworkflow');
var AddFeatureFromMapVectorLayersWorflow = require('../workflows/addfeaturefrommapvectorlayersworkflow');
var CopyFeaturesFromOtherLayerWorkflow = require('../workflows/copyfeaturesfromotherlayerworkflow');

function EditorToolsFactory() {
  /**
   * Method to create tools base on type (point, Line, e..t) editing type (create/update/detele)
   * @param type Point, Line, Polygon, Table
   * @param layer
   * @param capabilities (create/update, delete) or undefined meaning all possible tools base on type
   */
  this.createTools = function (_ref) {
    var type = _ref.type,
        isMultiGeometry = _ref.isMultiGeometry,
        layer = _ref.layer,
        capabilities = _ref.capabilities;

    var tools = [];
    var mapService = GUI.getService('map');
    switch (type) {
      case 'Point':
        tools = [{
          config: {
            id: 'addfeature',
            name: "editing.tools.add_feature",
            icon: "addPoint.png",
            layer: layer,
            row: 1,
            op: AddFeatureWorkflow,
            type: ['add_feature']
          }
        }, {
          config: {
            id: 'editattributes',
            name: "editing.tools.update_feature",
            icon: "editAttributes.png",
            layer: layer,
            row: 1,
            op: EditFeatureAttributesWorkflow,
            type: ['change_attr_feature']
          }
        }, {
          config: {
            id: 'deletefeature',
            name: "editing.tools.delete_feature",
            icon: "deletePoint.png",
            layer: layer,
            row: 1,
            op: DeleteFeatureWorkflow,
            type: ['delete_feature']
          }
        }, {
          config: {
            id: 'editmultiattributes',
            name: "editing.tools.update_multi_features",
            icon: "multiEditAttributes.png",
            layer: layer,
            row: 2,
            once: true,
            op: EditMultiFeatureAttributesWorkflow,
            type: ['change_attr_feature']
          }
        }, {
          config: {
            id: 'movefeature',
            name: "editing.tools.move_feature",
            icon: "movePoint.png",
            layer: layer,
            row: 2,
            op: MoveFeatureWorkflow,
            type: ['change_feature']
          }
        }, {
          config: {
            id: 'copyfeaturesfromotherlayer',
            name: "editing.tools.pastefeaturesfromotherlayers",
            icon: "pasteFeaturesFromOtherLayers.png",
            layer: layer,
            once: true,
            conditions: {
              enabled: function () {
                var layerId = layer.getId();
                var geometryType = layer.getGeometryType();
                var selectionLayerSource = mapService.defaultsLayers.selectionLayer.getSource();
                var data = {
                  bool: false,
                  tool: undefined
                };
                var checkSelectedFeatureLayers = function checkSelectedFeatureLayers() {
                  var bool = data.bool,
                      tool = data.tool;

                  var featuresFilter = selectionLayerSource.getFeatures().filter(function (feature) {
                    var featureGeometryType = feature.getGeometry() && feature.getGeometry().getType();
                    if (feature.__layerId !== layerId && isSameBaseGeometryType(geometryType, featureGeometryType)) {
                      return geometryType === featureGeometryType || Geometry.isMultiGeometry(geometryType) || !Geometry.isMultiGeometry(featureGeometryType);
                    }
                    return false;
                  });
                  var enabled = bool && featuresFilter.length > 0;
                  tool.setEnabled(enabled);
                  return enabled;
                };
                return function (_ref2) {
                  var bool = _ref2.bool,
                      _ref2$tool = _ref2.tool,
                      tool = _ref2$tool === undefined ? {} : _ref2$tool;

                  data.tool = tool;
                  data.bool = bool;
                  selectionLayerSource[bool ? 'on' : 'un']('addfeature', checkSelectedFeatureLayers);
                  selectionLayerSource[bool ? 'on' : 'un']('removefeature', checkSelectedFeatureLayers);
                  return checkSelectedFeatureLayers();
                };
              }()
            },
            row: 2,
            op: CopyFeaturesFromOtherLayerWorkflow,
            type: ['add_feature']
          }
        }, {
          config: {
            id: 'copyfeatures',
            name: "editing.tools.copy",
            icon: "copyPoint.png",
            layer: layer,
            once: true,
            row: 2,
            op: CopyFeaturesWorflow,
            type: ['add_feature']
          }
        }].concat(_toConsumableArray(isMultiGeometry ? [{
          config: {
            id: 'addPart',
            name: "editing.tools.addpart",
            icon: "addPart.png",
            layer: layer,
            once: true,
            row: 3,
            op: AddPartToMultigeometriesWorkflow,
            type: ['add_feature', 'change_feature']
          }
        }] : []), _toConsumableArray(isMultiGeometry ? [{
          config: {
            id: 'deletePart',
            name: "editing.tools.deletepart",
            icon: "deletePart.png",
            layer: layer,
            row: 3,
            op: DeletePartFromMultigeometriesWorkflow,
            type: ['change_feature']
          }
        }] : []));
        break;
      case 'Line':
      case 'Polygon':
        tools = [{
          config: {
            id: 'addfeature',
            name: "editing.tools.add_feature",
            icon: 'add' + type + '.png',
            layer: layer,
            row: 1,
            op: AddFeatureWorkflow,
            type: ['add_feature']
          }
        }, {
          config: {
            id: 'editattributes',
            name: "editing.tools.update_feature",
            icon: "editAttributes.png",
            layer: layer,
            row: 1,
            op: EditFeatureAttributesWorkflow,
            type: ['change_attr_feature']
          }
        }, {
          config: {
            id: 'movevertex',
            name: "editing.tools.update_vertex",
            icon: "moveVertex.png",
            layer: layer,
            row: 1,
            op: ModifyGeometryVertexWorkflow,
            type: ['change_feature']
          }
        }, {
          config: {
            id: 'deletefeature',
            name: "editing.tools.delete_feature",
            icon: 'delete' + type + '.png',
            layer: layer,
            row: 1,
            op: DeleteFeatureWorkflow,
            type: ['delete_feature']
          }
        }, {
          config: {
            id: 'editmultiattributes',
            name: "editing.tools.update_multi_features",
            icon: "multiEditAttributes.png",
            layer: layer,
            row: 2,
            once: true,
            op: EditMultiFeatureAttributesWorkflow,
            type: ['change_attr_feature']
          }
        }, {
          config: {
            id: 'movefeature',
            name: "editing.tools.move_feature",
            icon: 'move' + type + '.png',
            layer: layer,
            row: 2,
            op: MoveFeatureWorkflow,
            type: ['change_feature']
          }
        }, {
          config: {
            id: 'copyfeaturesfromotherlayer',
            name: "editing.tools.pastefeaturesfromotherlayers",
            icon: "pasteFeaturesFromOtherLayers.png",
            layer: layer,
            once: true,
            conditions: {
              enabled: function () {
                var layerId = layer.getId();
                var geometryType = layer.getGeometryType();
                var selectionLayerSource = mapService.defaultsLayers.selectionLayer.getSource();
                var data = {
                  bool: false,
                  tool: undefined
                };
                var checkSelectedFeatureLayers = function checkSelectedFeatureLayers() {
                  var bool = data.bool,
                      tool = data.tool;

                  var featuresFilter = selectionLayerSource.getFeatures().filter(function (feature) {
                    var featureGeometryType = feature.getGeometry() && feature.getGeometry().getType();
                    if (feature.__layerId !== layerId && isSameBaseGeometryType(geometryType, featureGeometryType)) {
                      return geometryType === featureGeometryType || Geometry.isMultiGeometry(geometryType) || !Geometry.isMultiGeometry(featureGeometryType);
                    }
                    return false;
                  });
                  var enabled = bool && featuresFilter.length > 0;
                  tool.setEnabled(enabled);
                  return enabled;
                };
                return function (_ref3) {
                  var bool = _ref3.bool,
                      _ref3$tool = _ref3.tool,
                      tool = _ref3$tool === undefined ? {} : _ref3$tool;

                  data.tool = tool;
                  data.bool = bool;
                  selectionLayerSource[bool ? 'on' : 'un']('addfeature', checkSelectedFeatureLayers);
                  selectionLayerSource[bool ? 'on' : 'un']('removefeature', checkSelectedFeatureLayers);
                  return checkSelectedFeatureLayers();
                };
              }()
            },
            row: 2,
            op: CopyFeaturesFromOtherLayerWorkflow,
            type: ['add_feature']
          }
        }, {
          config: {
            id: 'copyfeatures',
            name: "editing.tools.copy",
            icon: 'copy' + type + '.png',
            layer: layer,
            row: 2,
            once: true,
            op: CopyFeaturesWorflow,
            type: ['add_feature']
          }
        }].concat(_toConsumableArray(isMultiGeometry ? [{
          config: {
            id: 'addPart',
            name: "editing.tools.addpart",
            icon: "addPart.png",
            layer: layer,
            row: 3,
            once: true,
            op: AddPartToMultigeometriesWorkflow,
            type: ['add_feature', 'change_feature']
          }
        }] : []), _toConsumableArray(isMultiGeometry ? [{
          config: {
            id: 'deletePart',
            name: "editing.tools.deletepart",
            icon: "deletePart.png",
            layer: layer,
            row: 3,
            op: DeletePartFromMultigeometriesWorkflow,
            type: ['change_feature']
          }
        }] : []), [{
          config: {
            id: 'splitfeature',
            name: "editing.tools.split",
            icon: "splitFeatures.png",
            layer: layer,
            row: 3,
            once: true,
            op: SplitFeatureWorkflow,
            type: ['change_feature']
          }
        }, {
          config: {
            id: 'mergefeatures',
            name: "editing.tools.merge",
            icon: "mergeFeatures.png",
            layer: layer,
            row: 3,
            once: true,
            op: MergeFeaturesWorkflow,
            type: ['change_feature']
          }
        }, {
          config: {
            id: 'copyfeaturefromexternallayer',
            name: "editing.tools.copyfeaturefromexternallayer",
            icon: "copyPolygonFromFeature.png",
            layer: layer,
            row: 3,
            once: true,
            visible: function visible(tool) {
              var layerGeometryType = tool.getLayer().getGeometryType();
              var checkIfLayerHasTheSameBaseGeometryType = function checkIfLayerHasTheSameBaseGeometryType(layer) {
                var sameBaseGeometry = true;
                var type = layer.getType();
                // check if tool is visible and the layer is a Vector
                if (type === 'VECTOR') {
                  var features = layer.getSource().getFeatures();
                  if (features.length) {
                    var feature = features[0];
                    var geometryType = feature.getGeometry().getType();
                    sameBaseGeometry = isSameBaseGeometryType(geometryType, layerGeometryType);
                  }
                }
                return sameBaseGeometry;
              };
              mapService.onbefore('loadExternalLayer', function (layer) {
                return !tool.isVisible() && tool.setVisible(checkIfLayerHasTheSameBaseGeometryType(layer));
              });
              mapService.onafter('unloadExternalLayer', function (layer) {
                var type = layer.getType();
                if (tool.isVisible() && type === 'VECTOR') {
                  var features = layer.getSource().getFeatures();
                  if (features.length) {
                    var feature = features[0];
                    var geometryType = feature.getGeometry().getType();
                    if (isSameBaseGeometryType(geometryType, layerGeometryType)) {
                      var visible = mapService.getExternalLayers().find(function (externalLayer) {
                        return checkIfLayerHasTheSameBaseGeometryType(externalLayer);
                      }) !== undefined;
                      tool.setVisible(visible);
                    }
                  }
                }
              });
              return false;
            },
            op: AddFeatureFromMapVectorLayersWorflow,
            type: ['add_feature']
          }
        }]);
        break;
      case 'Table':
        tools = [{
          config: {
            id: 'addfeature',
            name: "editing.tools.add_feature",
            icon: "addTableRow.png",
            layer: layer,
            op: AddTableFeatureWorflow,
            type: ['add_feature']
          }
        }, {
          config: {
            id: 'edittable',
            name: "editing.tools.update_feature",
            icon: "editAttributes.png",
            layer: layer,
            op: EditTableFeaturesWorkflow,
            type: ['delete_feature', 'change_attr_feature']
          }
        }];
        break;
    }
    return capabilities ? tools.filter(function (tool) {
      return tool.config.type.filter(function (type) {
        return capabilities.includes(type);
      }).length > 0;
    }).map(function (tool) {
      // in case of capabilities all tools on line
      tool.config.row = 1;
      return new Tool(tool.config);
    }) : tools.map(function (tool) {
      return new Tool(tool.config);
    });
  };
  this.build = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _options$type = options.type,
        type = _options$type === undefined ? Layer.LayerTypes.VECTOR : _options$type,
        layer = options.layer,
        capabilities = options.capabilities;

    var tools = [];
    switch (type) {
      case Layer.LayerTypes.VECTOR:
        var geometryType = options.geometryType;
        // check if multigeometry
        var isMultiGeometry = Geometry.isMultiGeometry(geometryType);
        // in case of Point Geometry
        if (Geometry.isPointGeometryType(geometryType)) {
          tools = this.createTools({
            layer: layer,
            capabilities: capabilities,
            type: 'Point',
            isMultiGeometry: isMultiGeometry
          });
        }
        // in case of Line geometry
        else if (Geometry.isLineGeometryType(geometryType)) {
            tools = this.createTools({
              layer: layer,
              type: 'Line',
              capabilities: capabilities,
              isMultiGeometry: isMultiGeometry
            });
          }
          // in case of Polygon Geometry
          else if (Geometry.isPolygonGeometryType(geometryType)) {
              tools = tools = this.createTools({
                layer: layer,
                type: 'Polygon',
                capabilities: capabilities,
                isMultiGeometry: isMultiGeometry
              });
            }
        break;
      case Layer.LayerTypes.TABLE:
        tools = this.createTools({
          layer: layer,
          type: 'Table',
          capabilities: capabilities
        });
        break;
      default:
        tools = [];
        break;
    }
    return tools;
  };
}

module.exports = new EditorToolsFactory();

},{"../workflows/addfeaturefrommapvectorlayersworkflow":49,"../workflows/addfeatureworkflow":50,"../workflows/addparttomultigeometriesworkflow":51,"../workflows/addtablefeatureworkflow":52,"../workflows/copyfeaturesfromotherlayerworkflow":54,"../workflows/copyfeaturesworkflow":55,"../workflows/deletefeatureworkflow":56,"../workflows/deletepartfrommultigeometriesworkflow":57,"../workflows/editfeatureattributesworkflow":58,"../workflows/editmultifeatureattributesworkflow":60,"../workflows/edittableworkflow":63,"../workflows/mergefeaturesworkflow":65,"../workflows/modifygeometryvertexworkflow":66,"../workflows/movefeatureworkflow":67,"../workflows/splitfeatureworkflow":69,"./tool":45}],49:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var SelectElementsStep = require('./steps/selectelementsstep');
var OpenFormStep = require('./steps/openformstep');

function AddFeatureFromMapVectorLayersWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.type = 'external';
  options.help = 'editing.steps.help.copy';
  options.steps = [];
  var selectelementssteps = new SelectElementsStep(options, false);
  var openformstep = new OpenFormStep(options);
  options.steps = [selectelementssteps, openformstep];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(AddFeatureFromMapVectorLayersWorflow, EditingWorkflow);

module.exports = AddFeatureFromMapVectorLayersWorflow;

},{"./editingworkflow":59,"./steps/openformstep":86,"./steps/selectelementsstep":90}],50:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var AddFeatureStep = require('./steps/addfeaturestep');
var OpenFormStep = require('./steps/openformstep');

function AddFeatureWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var addfeaturestep = new AddFeatureStep(options);
  var openformstep = new OpenFormStep(options);
  options.steps = [addfeaturestep, openformstep];
  base(this, options);
  this.addToolsOfTools({
    step: addfeaturestep,
    tools: ['snap', 'measure']
  });
}

inherit(AddFeatureWorflow, EditingWorkflow);

module.exports = AddFeatureWorflow;

},{"./editingworkflow":59,"./steps/addfeaturestep":70,"./steps/openformstep":86}],51:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var PickFeatureStep = require('./steps/pickfeaturestep');
var ChooseFeatureStep = require('./steps/choosefeaturestep');
var AddFeatureStep = require('./steps/addfeaturestep');
var AddPartToMultigeometriesStep = require('./steps/addparttomultigeometriesstep');

function AddPartToMultigeometriesWorflow() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.type = 'single';
  options.helpMessage = 'editing.tools.addpart';
  options.help = 'editing.steps.help.select_element';
  var selectelementssteps = new PickFeatureStep();
  selectelementssteps.getTask().setSteps({
    select: {
      description: 'editing.workflow.steps.select',
      directive: 't-plugin',
      done: false
    }
  });
  options.add = false;
  var addfeaturestep = new AddFeatureStep(options);
  addfeaturestep.getTask().setSteps({
    addfeature: {
      description: 'editing.workflow.steps.draw_part',
      directive: 't-plugin',
      done: false
    }
  });
  addfeaturestep.on('run', function (_ref) {
    var inputs = _ref.inputs,
        context = _ref.context;

    var layer = inputs.layer;
    var snapTool = {
      type: 'snap',
      options: {
        layerId: layer.getId(),
        source: layer.getEditingLayer().getSource(),
        active: true
      }
    };
    _this.emit('settoolsoftool', [snapTool]);
  });
  addfeaturestep.on('run', function () {
    _this.emit('active', ['snap']);
  });
  addfeaturestep.on('stop', function () {
    _this.emit('deactive', ['snap']);
  });
  var addparttogeometriesstep = new AddPartToMultigeometriesStep(options);
  options.steps = [selectelementssteps, new ChooseFeatureStep(), addfeaturestep, addparttogeometriesstep];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(AddPartToMultigeometriesWorflow, EditingWorkflow);

module.exports = AddPartToMultigeometriesWorflow;

},{"./editingworkflow":59,"./steps/addfeaturestep":70,"./steps/addparttomultigeometriesstep":71,"./steps/choosefeaturestep":73,"./steps/pickfeaturestep":88}],52:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var AddTableFeatureStep = require('./steps/addtablefeaturestep');
var OpenFormStep = require('./steps/openformstep');

function AddTableFeatureWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.steps = [new AddTableFeatureStep(), new OpenFormStep()];
  base(this, options);
}

inherit(AddTableFeatureWorflow, EditingWorkflow);

module.exports = AddTableFeatureWorflow;

},{"./editingworkflow":59,"./steps/addtablefeaturestep":72,"./steps/openformstep":86}],53:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var ConfirmStep = require('./steps/confirmstep');

function CommitFeatureWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.steps = [new ConfirmStep(options)];
  base(this, options);
}

inherit(CommitFeatureWorflow, EditingWorkflow);

module.exports = CommitFeatureWorflow;

},{"./editingworkflow":59,"./steps/confirmstep":74}],54:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var CopyFeaturesFromOtherLayerStep = require('./steps/copyfeaturesfromotherlayerstep');
var OpenFormStep = require('./steps/openformstep');

function CopyFeaturesFromOtherLayerWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.help = 'editing.steps.help.copy';
  options.steps = [new CopyFeaturesFromOtherLayerStep(options), new OpenFormStep(options)];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(CopyFeaturesFromOtherLayerWorflow, EditingWorkflow);

module.exports = CopyFeaturesFromOtherLayerWorflow;

},{"./editingworkflow":59,"./steps/copyfeaturesfromotherlayerstep":75,"./steps/openformstep":86}],55:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var SelectElementsStep = require('./steps/selectelementsstep');
var GetVertexStep = require('./steps/getvertexstep');
var MoveElementsStep = require('./steps/movelementsstep');
var ApplicationState = g3wsdk.core.ApplicationState;

function CopyFeaturesWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var isPointLayer = options.layer.getGeometryType().indexOf('Point') !== -1;
  options.type = ApplicationState.ismobile ? 'single' : 'multiple';
  options.help = 'editing.steps.help.copy';
  options.steps = [];
  var selectelementssteps = new SelectElementsStep(options, true);
  selectelementssteps.getTask().setSteps({
    select: {
      description: options.type === 'multiple' ? 'editing.workflow.steps.selectPointSHIFT' : 'editing.workflow.steps.selectPoint',
      directive: 't-plugin',
      done: false
    }
  });
  options.steps.push(selectelementssteps);
  if (!isPointLayer) {
    var getvertexstep = new GetVertexStep(options, true);
    getvertexstep.getTask().setSteps({
      from: {
        description: 'editing.workflow.steps.selectStartVertex',
        directive: 't-plugin',
        done: false
      }
    });
    options.steps.push(getvertexstep);
  }
  var moveelementssteps = new MoveElementsStep(options, true);
  moveelementssteps.getTask().setSteps({
    to: {
      description: 'editing.workflow.steps.selectToPaste',
      directive: 't-plugin',
      done: false
    }
  });
  options.steps.push(moveelementssteps);
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(CopyFeaturesWorflow, EditingWorkflow);

module.exports = CopyFeaturesWorflow;

},{"./editingworkflow":59,"./steps/getvertexstep":80,"./steps/movelementsstep":85,"./steps/selectelementsstep":90}],56:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var DeleteFeatureStep = require('./steps/deletefeaturestep');
var PickFeatureStep = require('./steps/pickfeaturestep');
var ChooseFeatureStep = require('./steps/choosefeaturestep');
var ConfirmStep = require('./steps/confirmstep');

function DeleteFeatureWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.steps = [new PickFeatureStep(), new ChooseFeatureStep(), new DeleteFeatureStep(), new ConfirmStep({ type: 'delete' })];
  base(this, options);
}

inherit(DeleteFeatureWorflow, EditingWorkflow);

module.exports = DeleteFeatureWorflow;

},{"./editingworkflow":59,"./steps/choosefeaturestep":73,"./steps/confirmstep":74,"./steps/deletefeaturestep":77,"./steps/pickfeaturestep":88}],57:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var DeletePartFromMultigeometriesStep = require('./steps/deletepartfrommultigeometriesstep');
var PickFeatureStep = require('./steps/pickfeaturestep');
var ChooseFeatureStep = require('./steps/choosefeaturestep');

function DeletePartToMultigeometriesWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.helpMessage = 'editing.tools.deletepart';
  options.steps = [new PickFeatureStep(), new ChooseFeatureStep(), new DeletePartFromMultigeometriesStep(options)];
  base(this, options);
}

inherit(DeletePartToMultigeometriesWorflow, EditingWorkflow);

module.exports = DeletePartToMultigeometriesWorflow;

},{"./editingworkflow":59,"./steps/choosefeaturestep":73,"./steps/deletepartfrommultigeometriesstep":78,"./steps/pickfeaturestep":88}],58:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var PickFeatureStep = require('./steps/pickfeaturestep');
var ChooseFeatureStep = require('./steps/choosefeaturestep');
var OpenFormStep = require('./steps/openformstep');

function EditFeatureAttributesWorkflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.helpMessage = 'editing.tools.update_feature';
  options.steps = [new PickFeatureStep(), new ChooseFeatureStep(), new OpenFormStep()];
  base(this, options);
}

inherit(EditFeatureAttributesWorkflow, EditingWorkflow);

module.exports = EditFeatureAttributesWorkflow;

},{"./editingworkflow":59,"./steps/choosefeaturestep":73,"./steps/openformstep":86,"./steps/pickfeaturestep":88}],59:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Workflow = g3wsdk.core.workflow.Workflow;
var Layer = g3wsdk.core.layer.Layer;
var isPointGeometryType = g3wsdk.core.geometry.Geometry.isPointGeometryType;


function EditingWorkflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this.helpMessage = options.helpMessage ? { help: options.helpMessage } : null;
  this._toolsoftool = [];
}

inherit(EditingWorkflow, Workflow);

var proto = EditingWorkflow.prototype;

proto.addToolsOfTools = function (_ref) {
  var _this2 = this;

  var step = _ref.step,
      _ref$tools = _ref.tools,
      tools = _ref$tools === undefined ? [] : _ref$tools;

  var toolsOfTools = {
    snap: {
      type: 'snap',
      options: {
        checkedAll: false,
        checked: false,
        active: true,
        run: function run(_ref2) {
          var layer = _ref2.layer;

          this.active = true;
          this.layerId = this.layerId || layer.getId();
          this.source = this.source || layer.getEditingLayer().getSource();
        },
        stop: function stop() {
          this.active = false;
        }
      }
    },
    measure: {
      type: 'measure',
      options: {
        checked: false,
        run: function run() {
          var _this = this;

          setTimeout(function () {
            _this.onChange(_this.checked);
          });
        },
        stop: function stop() {
          step.getTask().removeMeasureInteraction();
        },
        onChange: function onChange(bool) {
          this.checked = bool;
          step.getTask()[bool ? 'addMeasureInteraction' : 'removeMeasureInteraction']();
        },
        onBeforeDestroy: function onBeforeDestroy() {
          this.onChange(false);
        }
      }
    }
  };
  step.on('run', function (_ref3) {
    var inputs = _ref3.inputs,
        context = _ref3.context;

    var layer = inputs.layer;
    if (_this2._toolsoftool.length == 0) {
      tools.forEach(function (tool) {
        if (tool === 'measure') {
          if (layer.getType() === Layer.LayerTypes.VECTOR && !isPointGeometryType(layer.getGeometryType())) _this2._toolsoftool.push(toolsOfTools[tool]);
        } else _this2._toolsoftool.push(toolsOfTools[tool]);
      });
    }
    _this2._toolsoftool.forEach(function (tooloftool) {
      return tooloftool.options.run({ layer: layer });
    });
    _this2.emit('settoolsoftool', _this2._toolsoftool);
  });
  step.on('stop', function () {
    _this2._toolsoftool.forEach(function (tooloftool) {
      return tooloftool.options.stop();
    });
  });
};

proto.setHelpMessage = function (message) {
  this.helpMessage = {
    help: message
  };
};

proto.getHelpMessage = function () {
  return this.helpMessage;
};

proto.getFeatures = function () {
  return this.getInputs().features;
};

proto.startFromLastStep = function (options) {
  var steps = this.getSteps();
  this.setSteps([steps.pop()]);
  return this.start(options);
};

proto.getCurrentFeature = function () {
  var features = this.getFeatures();
  var length = this.getFeatures().length;
  return features[length - 1];
};

proto.getLayer = function () {
  return this.getSession().getEditor().getLayer();
};

proto.getSession = function () {
  return this.getContext().session;
};

//bind interrupt event
proto.escKeyUpHandler = function (evt) {
  if (evt.keyCode === 27) {
    evt.data.workflow.reject();
    evt.data.callback();
  }
};

proto.unbindEscKeyUp = function () {
  $(document).unbind('keyup', this.escKeyUpHandler);
};

proto.bindEscKeyUp = function () {
  var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

  $(document).on('keyup', {
    workflow: this,
    callback: callback
  }, this.escKeyUpHandler);
};

proto.registerEscKeyEvent = function (callback) {
  var _this3 = this;

  this.on('start', function () {
    return _this3.bindEscKeyUp(callback);
  });
  this.on('stop', function () {
    return _this3.unbindEscKeyUp();
  });
};
/////

module.exports = EditingWorkflow;

},{}],60:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var ApplicationState = g3wsdk.core.ApplicationState;

var EditingWorkflow = require('./editingworkflow');
var SelectElementsStep = require('./steps/selectelementsstep');
var OpenFormStep = require('./steps/openformstep');

function EditMultiFeatureAttributesWorkflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.helpMessage = 'editing.tools.update_multi_features';
  var selectstep = new SelectElementsStep({
    type: 'multiple'
  });
  selectstep.getTask().setSteps({
    select: {
      description: ApplicationState.ismobile ? 'editing.workflow.steps.selectDrawBoxAtLeast2Feature' : 'editing.workflow.steps.selectMultiPointSHIFTAtLeast2Feature',
      buttonnext: {
        disabled: true,
        condition: function condition(_ref) {
          var _ref$features = _ref.features,
              features = _ref$features === undefined ? [] : _ref$features;
          return features.length < 2;
        },
        done: function done() {}
      },
      directive: 't-plugin',
      dynamic: 0,
      done: false
    }
  });
  options.steps = [selectstep, new OpenFormStep({
    multi: true
  })];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(EditMultiFeatureAttributesWorkflow, EditingWorkflow);

module.exports = EditMultiFeatureAttributesWorkflow;

},{"./editingworkflow":59,"./steps/openformstep":86,"./steps/selectelementsstep":90}],61:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    inherit = _g3wsdk$core$utils.inherit,
    base = _g3wsdk$core$utils.base;

var EditingWorkflow = require('./editingworkflow');
var OpenFormStep = require('./steps/openformstep');

function EditFeatureAttributesWorkflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.helpMessage = 'editing.tools.update_feature';
  var step = new OpenFormStep();
  options.steps = [step];
  base(this, options);
}

inherit(EditFeatureAttributesWorkflow, EditingWorkflow);

module.exports = EditFeatureAttributesWorkflow;

},{"./editingworkflow":59,"./steps/openformstep":86}],62:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var OpenFormStep = require('./steps/openformstep');

function EditTableFeatureWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.steps = [new OpenFormStep()];
  base(this, options);
}

inherit(EditTableFeatureWorflow, EditingWorkflow);

module.exports = EditTableFeatureWorflow;

},{"./editingworkflow":59,"./steps/openformstep":86}],63:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var OpenTableStep = require('./steps/opentablestep');

function EditTableFeaturesWorkflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.steps = [new OpenTableStep()];
  base(this, options);
}

inherit(EditTableFeaturesWorkflow, EditingWorkflow);

module.exports = EditTableFeaturesWorkflow;

},{"./editingworkflow":59,"./steps/opentablestep":87}],64:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var LinkRelationStep = require('./steps/linkrelationstep');

function LinkRelationWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.steps = [new LinkRelationStep()];
  base(this, options);
}

inherit(LinkRelationWorflow, EditingWorkflow);

module.exports = LinkRelationWorflow;

},{"./editingworkflow":59,"./steps/linkrelationstep":81}],65:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var ApplicationState = g3wsdk.core.ApplicationState;

var EditingWorkflow = require('./editingworkflow');
var SelectElementsStep = require('./steps/selectelementsstep');
var MergeFeaturesStep = require('./steps/mergefeaturesstep');
function MergeFeaturesWorkflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.type = 'bbox';
  options.help = 'editing.steps.help.merge';
  var selectelementssteps = new SelectElementsStep(options, true);
  selectelementssteps.getTask().setSteps({
    select: {
      description: ApplicationState.ismobile ? 'editing.workflow.steps.selectDrawBox' : 'editing.workflow.steps.selectSHIFT',
      directive: 't-plugin',
      done: false
    }
  });
  var mergefeaturesstep = new MergeFeaturesStep(options, true);
  mergefeaturesstep.getTask().setSteps({
    choose: {
      description: 'editing.workflow.steps.merge',
      directive: 't-plugin',
      done: false
    }
  });
  options.steps = [selectelementssteps, mergefeaturesstep];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(MergeFeaturesWorkflow, EditingWorkflow);

module.exports = MergeFeaturesWorkflow;

},{"./editingworkflow":59,"./steps/mergefeaturesstep":82,"./steps/selectelementsstep":90}],66:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var PickFeatureStep = require('./steps/pickfeaturestep');
var ChooseFeatureStep = require('./steps/choosefeaturestep');
var ModifyGeometryVertexStep = require('./steps/modifygeometryvertexstep');

function ModifyGeometryVertexWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.helpMessage = 'editing.tools.update_vertex';
  var pickstep = new PickFeatureStep(options);
  var modifyvertexstep = new ModifyGeometryVertexStep();
  options.steps = [pickstep, new ChooseFeatureStep(), modifyvertexstep];
  base(this, options);
  this.addToolsOfTools({
    step: modifyvertexstep,
    tools: ['snap', 'measure']
  });
}

inherit(ModifyGeometryVertexWorflow, EditingWorkflow);

module.exports = ModifyGeometryVertexWorflow;

},{"./editingworkflow":59,"./steps/choosefeaturestep":73,"./steps/modifygeometryvertexstep":83,"./steps/pickfeaturestep":88}],67:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var PickFeatureStep = require('./steps/pickfeaturestep');
var ChooseFeatureStep = require('./steps/choosefeaturestep');
var MoveFeatureStep = require('./steps/movefeaturestep');

function MoveFeatureWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.helpMessage = 'editing.tools.move_feature';
  options.steps = [new PickFeatureStep(), new ChooseFeatureStep(), new MoveFeatureStep()];
  base(this, options);
}

inherit(MoveFeatureWorflow, EditingWorkflow);

module.exports = MoveFeatureWorflow;

},{"./editingworkflow":59,"./steps/choosefeaturestep":73,"./steps/movefeaturestep":84,"./steps/pickfeaturestep":88}],68:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var PickProjectLayerFeaturesStep = require('./steps/pickprojectlayerfeaturesstep');
var CopyFeaturesFromOtherProjectLayerStep = require('./steps/copyfeaturesfromotherprojectlayerstep');
var OpenFormStep = require('./steps/openformstep');

function SelectAndCopyFeaturesFromOtherLayerWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.help = 'editing.steps.help.copy';
  options.steps = [new PickProjectLayerFeaturesStep(options), new CopyFeaturesFromOtherProjectLayerStep(options), new OpenFormStep(options)];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(SelectAndCopyFeaturesFromOtherLayerWorflow, EditingWorkflow);

module.exports = SelectAndCopyFeaturesFromOtherLayerWorflow;

},{"./editingworkflow":59,"./steps/copyfeaturesfromotherprojectlayerstep":76,"./steps/openformstep":86,"./steps/pickprojectlayerfeaturesstep":89}],69:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingWorkflow = require('./editingworkflow');
var SelectElementsStep = require('./steps/selectelementsstep');
var SplitFeatureStep = require('./steps/splitfeaturestep');
var ApplicationState = g3wsdk.core.ApplicationState;

function SplitFeaturesWorflow() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.type = ApplicationState.ismobile ? 'single' : 'multiple';
  options.help = 'editing.steps.help.split';
  var selectelementssteps = new SelectElementsStep(options, true);
  selectelementssteps.getTask().setSteps({
    select: {
      description: options.type === 'multiple' ? 'editing.workflow.steps.selectPointSHIFT' : 'editing.workflow.steps.selectPoint',
      directive: 't-plugin',
      done: false
    }
  });
  var splitfeaturestep = new SplitFeatureStep(options, true);
  splitfeaturestep.getTask().setSteps({
    draw_line: {
      description: 'editing.workflow.steps.draw_split_line',
      directive: 't-plugin',
      done: false
    }
  });
  options.steps = [selectelementssteps, splitfeaturestep];
  this.registerEscKeyEvent();
  base(this, options);
}

inherit(SplitFeaturesWorflow, EditingWorkflow);

module.exports = SplitFeaturesWorflow;

},{"./editingworkflow":59,"./steps/selectelementsstep":90,"./steps/splitfeaturestep":91}],70:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var AddFeatureTask = require('./tasks/addfeaturetask');

var AddFeatureStep = function AddFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new AddFeatureTask(options);
  options.help = "editing.steps.help.draw_new_feature";
  base(this, options);
};

inherit(AddFeatureStep, EditingStep);

module.exports = AddFeatureStep;

},{"./editingstep":79,"./tasks/addfeaturetask":93}],71:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var AddPartToMuligeometriesTask = require('./tasks/addparttomultigeometriestask');

var AddPartToMuligeometriesStep = function AddPartToMuligeometriesStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new AddPartToMuligeometriesTask(options);
  base(this, options);
};

inherit(AddPartToMuligeometriesStep, EditingStep);

module.exports = AddPartToMuligeometriesStep;

},{"./editingstep":79,"./tasks/addparttomultigeometriestask":94}],72:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;

var AddFeatureTableTask = require('./tasks/addfeaturetabletask');

//creato uno step per apriore il form
var AddTableFeatureStep = function AddTableFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new AddFeatureTableTask();
  options.help = "editing.steps.help.new";
  base(this, options);
};

inherit(AddTableFeatureStep, Step);

module.exports = AddTableFeatureStep;

},{"./tasks/addfeaturetabletask":92}],73:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;

var ChooseFeatureTask = require('./tasks/choosefeaturetask');

//creato uno step per apriore il form
var ChooseFeatureStep = function ChooseFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new ChooseFeatureTask(options);
  base(this, options);
};

inherit(ChooseFeatureStep, Step);

module.exports = ChooseFeatureStep;

},{"./tasks/choosefeaturetask":95}],74:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var ConfirmTask = require('./tasks/confirmtask');

var ConfirmStep = function ConfirmStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new ConfirmTask(options);
  base(this, options);
};

inherit(ConfirmStep, EditingStep);

module.exports = ConfirmStep;

},{"./editingstep":79,"./tasks/confirmtask":96}],75:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var Task = require('./tasks/copyfeaturesfromotherlayertask');

var CopyFeaturesFromOtherLayerStep = function CopyFeaturesFromOtherLayerStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new Task(options);
  options.help = "editing.steps.help.draw_new_feature";
  base(this, options);
};

inherit(CopyFeaturesFromOtherLayerStep, EditingStep);

module.exports = CopyFeaturesFromOtherLayerStep;

},{"./editingstep":79,"./tasks/copyfeaturesfromotherlayertask":97}],76:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var Task = require('./tasks/copyfeaturesfromotherprojectlayertask');

var CopyFeaturesFromOtherProjectLayerStep = function CopyFeaturesFromOtherProjectLayerStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new Task(options);
  options.help = "editing.steps.help.draw_new_feature";
  base(this, options);
};

inherit(CopyFeaturesFromOtherProjectLayerStep, EditingStep);

module.exports = CopyFeaturesFromOtherProjectLayerStep;

},{"./editingstep":79,"./tasks/copyfeaturesfromotherprojectlayertask":98}],77:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var DeleteFeatureTask = require('./tasks/deletefeaturetask');

var DeleteFeatureStep = function DeleteFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new DeleteFeatureTask();
  options.help = "editing.steps.help.double_click_delete";
  base(this, options);
};

inherit(DeleteFeatureStep, EditingStep);

module.exports = DeleteFeatureStep;

},{"./editingstep":79,"./tasks/deletefeaturetask":99}],78:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var DeletePartFromMultigeometriesTask = require('./tasks/deletepartfrommultigeometriestask');

var DeletePartFromMuligeometriesStep = function DeletePartFromMuligeometriesStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new DeletePartFromMultigeometriesTask(options);
  base(this, options);
};

inherit(DeletePartFromMuligeometriesStep, EditingStep);

module.exports = DeletePartFromMuligeometriesStep;

},{"./editingstep":79,"./tasks/deletepartfrommultigeometriestask":100}],79:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;


var EditingStep = function EditingStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
};

inherit(EditingStep, Step);

module.exports = EditingStep;

},{}],80:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var GetVertexTask = require('./tasks/getvertextask');

var GetVertexStep = function GetVertexStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new GetVertexTask(options);
  options.help = "editing.steps.help.select";
  base(this, options);
};

inherit(GetVertexStep, EditingStep);

module.exports = GetVertexStep;

},{"./editingstep":79,"./tasks/getvertextask":102}],81:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var LinkRelationTask = require('./tasks/linkrelationtask');

var LinkRelationStep = function LinkRelationStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new LinkRelationTask();
  options.help = "editing.steps.help.select_feature_to_relation";
  base(this, options);
};

inherit(LinkRelationStep, EditingStep);

module.exports = LinkRelationStep;

},{"./editingstep":79,"./tasks/linkrelationtask":103}],82:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var MergeFeaturesTask = require('./tasks/mergefeaturestask');

var MergeFeatureStep = function MergeFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new MergeFeaturesTask();
  options.help = "editing.steps.help.merge";
  base(this, options);
};

inherit(MergeFeatureStep, EditingStep);

module.exports = MergeFeatureStep;

},{"./editingstep":79,"./tasks/mergefeaturestask":104}],83:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var ModifyGeometryVertexTask = require('./tasks/modifygeometryvertextask');

var ModifyGeometryVertexStep = function ModifyGeometryVertexStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { snap: true };

  var task = new ModifyGeometryVertexTask(options);
  options.task = task;
  options.help = "editing.steps.help.edit_feature_vertex";
  base(this, options);
};

inherit(ModifyGeometryVertexStep, EditingStep);

module.exports = ModifyGeometryVertexStep;

},{"./editingstep":79,"./tasks/modifygeometryvertextask":105}],84:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var MoveFeatureTask = require('./tasks/movefeaturettask');

var MoveFeatureStep = function MoveFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new MoveFeatureTask(options);
  options.help = "editing.steps.help.move";
  base(this, options);
};

inherit(MoveFeatureStep, EditingStep);

module.exports = MoveFeatureStep;

},{"./editingstep":79,"./tasks/movefeaturettask":107}],85:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var MoveElementTask = require('./tasks/moveelementstask');

var MoveElementsStep = function MoveElementsStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var chain = arguments[1];

  var task = new MoveElementTask(options);
  options.task = task;
  options.help = "editing.steps.help.select_vertex_to_paste";
  base(this, options);
};

inherit(MoveElementsStep, EditingStep);

module.exports = MoveElementsStep;

},{"./editingstep":79,"./tasks/moveelementstask":106}],86:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;

var OpenFormTask = require('./tasks/openformtask');

//creato uno step per apriore il form
var OpenFormStep = function OpenFormStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new OpenFormTask(options);
  options.help = "editing.steps.help.insert_attributes_feature";
  base(this, options);
};

inherit(OpenFormStep, Step);

module.exports = OpenFormStep;

},{"./tasks/openformtask":108}],87:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;

var OpenTableTask = require('./tasks/opentabletask');

//creato uno step per apriore il form
var OpenTableStep = function OpenTableStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new OpenTableTask();
  options.help = "editing.steps.help.edit_table";
  base(this, options);
};

inherit(OpenTableStep, Step);

module.exports = OpenTableStep;

},{"./tasks/opentabletask":109}],88:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;

var PickFeatureTask = require('./tasks/pickfeaturetask');

var PickFeatureStep = function PickFeatureStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var task = new PickFeatureTask(options);
  options.task = task;
  options.help = "editing.steps.help.pick_feature";
  base(this, options);
};

inherit(PickFeatureStep, Step);

module.exports = PickFeatureStep;

},{"./tasks/pickfeaturetask":110}],89:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Step = g3wsdk.core.workflow.Step;

var PickProjectLayerFeaturesTask = require('./tasks/pickprojectlayerfeaturestask');

var PickProjectLayerFeaturesStep = function PickProjectLayerFeaturesStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  options.task = new PickProjectLayerFeaturesTask(options);
  options.help = "editing.steps.help.pick_feature";
  base(this, options);
};

inherit(PickProjectLayerFeaturesStep, Step);

module.exports = PickProjectLayerFeaturesStep;

},{"./tasks/pickprojectlayerfeaturestask":111}],90:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var t = g3wsdk.core.i18n.tPlugin;
var EditingStep = require('./editingstep');
var SelectElementsTask = require('./tasks/selectelementstask');

var SelectElementsStep = function SelectElementsStep() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var chain = arguments[1];

  options.task = new SelectElementsTask(options);
  options.help = options.help || "editing.steps.help.select_elements";
  chain && this.on('run', function () {
    _this.emit('next-step', t("editing.steps.help.select_elements"));
  });
  base(this, options);
};

inherit(SelectElementsStep, EditingStep);

module.exports = SelectElementsStep;

},{"./editingstep":79,"./tasks/selectelementstask":112}],91:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingStep = require('./editingstep');
var SplitFeatureTask = require('./tasks/splitfeaturetask');

var MoveElementsStep = function MoveElementsStep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var task = new SplitFeatureTask(options);
  options.task = task;
  options.help = '';
  base(this, options);
};

inherit(MoveElementsStep, EditingStep);

module.exports = MoveElementsStep;

},{"./editingstep":79,"./tasks/splitfeaturetask":113}],92:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function AddFeatureTableTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(AddFeatureTableTask, EditingTask);

var proto = AddFeatureTableTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  var session = context.session;
  var originalLayer = inputs.layer;
  var layerId = originalLayer.getId();
  var editingLayer = originalLayer.getEditingLayer();
  var feature = inputs.features.length ? inputs.features[inputs.features.length - 1] : originalLayer.createNewFeature();
  feature.setTemporaryId();
  editingLayer.getEditingSource().addFeature(feature);
  session.pushAdd(layerId, feature);
  inputs.features.push(feature);
  this.setContextGetDefaultValue(true);
  d.resolve(inputs, context);
  return d.promise();
};

proto.stop = function () {};

module.exports = AddFeatureTableTask;

},{"./editingtask":101}],93:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Layer = g3wsdk.core.layer.Layer;
var Geometry = g3wsdk.core.geometry.Geometry;
var Feature = g3wsdk.core.layer.features.Feature;
var _g3wsdk$ol$interactio = g3wsdk.ol.interactions.measure,
    AreaInteraction = _g3wsdk$ol$interactio.AreaInteraction,
    LengthInteraction = _g3wsdk$ol$interactio.LengthInteraction;

var EditingTask = require('./editingtask');

function AddFeatureTask() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._add = options.add === undefined ? true : options.add;
  this._busy = false;
  this.drawInteraction;
  this.measeureInteraction;
  this.drawingFeature;
  this._snap = options.snap === false ? false : true;
  this._finishCondition = options.finishCondition || function () {
    return true;
  };
  this._condition = options.condition || function () {
    return true;
  };
  /**
   *
   * @param event
   * @returns {boolean|void}
   * @private
   * callback of pressing esc to remove last point drawed
   */
  this._delKeyRemoveLastPoint = function (event) {
    return event.keyCode === 46 && _this.removeLastPoint();
  };
  base(this, options);
}

inherit(AddFeatureTask, EditingTask);

var proto = AddFeatureTask.prototype;

proto.run = function (inputs, context) {
  var _this2 = this;

  var d = $.Deferred();
  var originalLayer = inputs.layer;
  var editingLayer = originalLayer.getEditingLayer();
  var session = context.session;
  var layerId = originalLayer.getId();
  switch (originalLayer.getType()) {
    case Layer.LayerTypes.VECTOR:
      var originalGeometryType = originalLayer.getEditingGeometryType();
      this.geometryType = Geometry.getOLGeometry(originalGeometryType);
      var source = editingLayer.getSource();
      var attributes = originalLayer.getEditingFields();
      var temporarySource = new ol.source.Vector();
      this.drawInteraction = new ol.interaction.Draw({
        type: this.geometryType,
        source: temporarySource,
        condition: this._condition,
        freehandCondition: ol.events.condition.never,
        finishCondition: this._finishCondition
      });
      this.addInteraction(this.drawInteraction);
      this.drawInteraction.setActive(true);

      this.drawInteraction.on('drawstart', function (_ref) {
        var feature = _ref.feature;

        _this2.drawingFeature = feature;
        document.addEventListener('keydown', _this2._delKeyRemoveLastPoint);
      });
      this.drawInteraction.on('drawend', function (e) {
        var feature = void 0;
        if (_this2._add) {
          attributes.forEach(function (attribute) {
            e.feature.set(attribute.name, null);
          });
          feature = new Feature({
            feature: e.feature
          });
          feature.setTemporaryId();
          source.addFeature(feature);
          session.pushAdd(layerId, feature, false);
        } else feature = e.feature;
        // set Z values based on layer Geometry
        feature = Geometry.addZValueToOLFeatureGeometry({
          feature: feature,
          geometryType: originalGeometryType
        });
        _this2.evaluateGeometryExpressionField({
          inputs: inputs,
          context: context,
          feature: feature
        }).finally(function () {
          inputs.features.push(feature);
          _this2.setContextGetDefaultValue(true);
          _this2.fireEvent('addfeature', feature); // emit event to get from subscribers
          d.resolve(inputs);
        });
      });
      break;
  }
  return d.promise();
};

/**
 * Method to add Measure
 * @param geometryType
 */
proto.addMeasureInteraction = function () {
  var mapProjection = this.getMapService().getProjection();
  var measureOptions = {
    projection: mapProjection,
    drawColor: 'transparent',
    feature: this.drawingFeature
  };
  if (Geometry.isLineGeometryType(this.geometryType)) this.measureInteraction = new LengthInteraction(measureOptions);else if (Geometry.isPolygonGeometryType(this.geometryType)) this.measureInteraction = new AreaInteraction(measureOptions);
  if (this.measureInteraction) {
    this.measureInteraction.setActive(true);
    this.addInteraction(this.measureInteraction);
  }
};

/**
 * Remove Measure Interaction
 */
proto.removeMeasureInteraction = function () {
  if (this.measureInteraction) {
    this.measureInteraction.clear();
    this.removeInteraction(this.measureInteraction);
    this.measureInteraction = null;
  }
};

proto.stop = function () {
  this.removeInteraction(this.drawInteraction);
  this.removeMeasureInteraction();
  this.drawInteraction = null;
  this.drawingFeature = null;
  document.removeEventListener('keydown', this._delKeyRemoveLastPoint);
  return true;
};

proto.removeLastPoint = function () {
  if (this.drawInteraction) {
    try {
      this.drawInteraction.removeLastPoint();
    } catch (err) {
      console.log(err);
    }
  }
};

module.exports = AddFeatureTask;

},{"./editingtask":101}],94:[function(require,module,exports){
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function AddPartToMuligeometriesTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(AddPartToMuligeometriesTask, EditingTask);

var proto = AddPartToMuligeometriesTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  var layer = inputs.layer,
      features = inputs.features;

  var layerId = layer.getId();
  var session = context.session;
  var feature = features[0];
  var featureGeometry = feature.getGeometry();
  var originalFeature = feature.clone();
  featureGeometry.setCoordinates([].concat(_toConsumableArray(featureGeometry.getCoordinates()), _toConsumableArray(features[1].getGeometry().getCoordinates())));
  /**
   * evaluated geometry expression
   */
  this.evaluateGeometryExpressionField({
    inputs: inputs,
    context: context,
    feature: feature
  }).finally(function () {
    session.pushUpdate(layerId, feature, originalFeature);
    inputs.features = [feature];
    d.resolve(inputs);
  });
  /**
   * end of evaluated
   */

  return d.promise();
};

proto.stop = function () {};

module.exports = AddPartToMuligeometriesTask;

},{"./editingtask":101}],95:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;

var t = g3wsdk.core.i18n.tPlugin;
var EditingTask = require('./editingtask');
var ChooseFeatureToEditComponent = require('../../../g3w-editing-components/choosefeaturetoedit');

function CopyFeaturesFromOtherLayerTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(CopyFeaturesFromOtherLayerTask, EditingTask);

var proto = CopyFeaturesFromOtherLayerTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  var originalLayer = inputs.layer;
  var features = inputs.features;
  var attributes = {};
  originalLayer.getEditingFields().forEach(function (_ref) {
    var name = _ref.name,
        label = _ref.label;

    attributes[name] = label;
  });
  if (features.length === 1) d.resolve(inputs);else {
    var feature = [];
    var vueInstance = ChooseFeatureToEditComponent({
      features: features,
      feature: feature,
      attributes: attributes
    });
    var message = vueInstance.$mount().$el;
    var dialog = GUI.showModalDialog({
      title: t('editing.modal.tools.copyfeaturefromprojectlayer.title'),
      className: 'modal-left',
      closeButton: false,
      message: message,
      buttons: {
        cancel: {
          label: 'Cancel',
          className: 'btn-danger',
          callback: function callback() {
            d.reject();
          }
        },
        ok: {
          label: 'Ok',
          className: 'btn-success',
          callback: function callback() {
            inputs.features = feature;
            d.resolve(inputs);
          }
        }
      }
    });
    dialog.find('button.btn-success').prop('disabled', true);
    vueInstance.$watch('feature', function (feature) {
      return dialog.find('button.btn-success').prop('disabled', feature === null);
    });
  }
  return d.promise();
};

proto.stop = function () {
  return true;
};

module.exports = CopyFeaturesFromOtherLayerTask;

},{"../../../g3w-editing-components/choosefeaturetoedit":33,"./editingtask":101}],96:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;
var _g3wsdk$core$i18n = g3wsdk.core.i18n,
    t = _g3wsdk$core$i18n.t,
    tPlugin = _g3wsdk$core$i18n.tPlugin;

var EditingTask = require('./editingtask');

var Dialogs = {
  delete: {
    fnc: function fnc(inputs) {
      var d = $.Deferred();
      var EditingService = require('../../../services/editingservice');
      var layer = inputs.layer;
      var editingLayer = layer.getEditingLayer();
      var feature = inputs.features[0];
      var layerId = layer.getId();
      var childRelations = layer.getChildren();
      var relationinediting = childRelations.length && EditingService._filterRelationsInEditing({
        layerId: layerId,
        relations: layer.getRelations().getArray()
      }).length > 0;

      GUI.dialog.confirm('<h4>' + tPlugin('editing.messages.delete_feature') + '</h4>\n                        <div style="font-size:1.2em;">' + (relationinediting ? tPlugin('editing.messages.delete_feature_relations') : '') + '</div>', function (result) {
        if (result) {
          editingLayer.getSource().removeFeature(feature);
          EditingService.removeLayerUniqueFieldValuesFromFeature({
            layerId: layerId,
            feature: feature
          });
          d.resolve(inputs);
        } else d.reject(inputs);
      });
      return d.promise();
    }
  },
  commit: {
    fnc: function fnc(inputs) {
      var d = $.Deferred();
      var close = inputs.close;
      var buttons = {
        SAVE: {
          label: t("save"),
          className: "btn-success",
          callback: function callback() {
            d.resolve(inputs);
          }
        },
        CANCEL: {
          label: close ? t("exitnosave") : t("annul"),
          className: "btn-danger",
          callback: function callback() {
            d.reject();
          }
        }
      };
      if (close) {
        buttons.CLOSEMODAL = {
          label: t("annul"),
          className: "btn-primary",
          callback: function callback() {
            dialog.modal('hide');
          }
        };
      }
      // NOW I HAVE TO IMPLEMENT WHAT HAPPEND ID NO ACTION HAPPEND
      var dialog = GUI.dialog.dialog({
        message: inputs.message,
        title: tPlugin("editing.messages.commit_feature") + " " + inputs.layer.getName() + "?",
        buttons: buttons
      });
      return d.promise();
    }
  }
};

function ConfirmTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var type = options.type || "default";
  this._dialog = Dialogs[type];
  base(this, options);
}

inherit(ConfirmTask, EditingTask);

var proto = ConfirmTask.prototype;

proto.run = function (inputs, context) {
  var promise = this._dialog.fnc(inputs, context);
  inputs.features && this.setAndUnsetSelectedFeaturesStyle({
    promise: promise
  });
  return promise;
};

proto.stop = function () {
  return true;
};

module.exports = ConfirmTask;

},{"../../../services/editingservice":42,"./editingtask":101}],97:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var G3W_FID = g3wsdk.constant.G3W_FID;
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;

var t = g3wsdk.core.i18n.tPlugin;
var Feature = g3wsdk.core.layer.features.Feature;

var EditingTask = require('./editingtask');
var SelectCopyFeaturesFormOtherLayersComponent = require('../../../g3w-editing-components/selectcopyotherlayersfeatures');

function CopyFeaturesFromOtherLayerTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(CopyFeaturesFromOtherLayerTask, EditingTask);

var proto = CopyFeaturesFromOtherLayerTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  var originalLayer = inputs.layer;
  var geometryType = originalLayer.getGeometryType();
  var layerId = originalLayer.getId();
  var attributes = originalLayer.getEditingFields().filter(function (attribute) {
    return !attribute.pk;
  });
  var session = context.session;
  var editingLayer = originalLayer.getEditingLayer();
  var source = editingLayer.getSource();
  var features = this.getFeaturesFromSelectionFeatures({
    layerId: layerId,
    geometryType: geometryType
  });
  var selectedFeatures = [];
  var vueInstance = SelectCopyFeaturesFormOtherLayersComponent({
    features: features,
    selectedFeatures: selectedFeatures
  });
  var message = vueInstance.$mount().$el;
  var dialog = GUI.showModalDialog({
    title: t('editing.modal.tools.copyfeaturefromotherlayer.title'),
    className: 'modal-left',
    closeButton: false,
    message: message,
    buttons: {
      cancel: {
        label: 'Cancel',
        className: 'btn-danger',
        callback: function callback() {
          d.reject();
        }
      },
      ok: {
        label: 'Ok',
        className: 'btn-success',
        callback: function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var features, isThereEmptyFieldRequiredNotDefined, promisesFeatures, featurePromises;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    features = [];
                    isThereEmptyFieldRequiredNotDefined = false;
                    promisesFeatures = [];

                    selectedFeatures.forEach(function (selectedFeature) {
                      /**
                       * check if layer belong to project or not
                       */
                      if (_this.getEditingService().getProjectLayerById(selectedFeature.__layerId)) {
                        promisesFeatures.push(_this.getEditingService().getProjectLayerFeatureById({
                          layerId: selectedFeature.__layerId,
                          fid: selectedFeature.get(G3W_FID)
                        }));
                      } else {
                        promisesFeatures.push({
                          properties: selectedFeature.getProperties()
                        });
                      }
                    });
                    _context.next = 6;
                    return Promise.allSettled(promisesFeatures);

                  case 6:
                    featurePromises = _context.sent;

                    featurePromises.forEach(function (_ref2, index) {
                      var status = _ref2.status,
                          layerFeature = _ref2.value;

                      if (status === "fulfilled") {
                        var selectedFeature = selectedFeatures[index];
                        attributes.forEach(function (_ref3) {
                          var name = _ref3.name,
                              _ref3$validate$requir = _ref3.validate.required,
                              required = _ref3$validate$requir === undefined ? false : _ref3$validate$requir;

                          var value = layerFeature.properties[name] || null;
                          isThereEmptyFieldRequiredNotDefined = isThereEmptyFieldRequiredNotDefined || value === null && required;
                          selectedFeature.set(name, value);
                        });
                        var feature = new Feature({
                          feature: selectedFeature,
                          properties: attributes.map(function (attribute) {
                            return attribute.name;
                          })
                        });
                        feature.setTemporaryId();
                        source.addFeature(feature);
                        features.push(feature);
                        session.pushAdd(layerId, feature, false);
                      }
                    });
                    if (features.length && features.length === 1) inputs.features.push(features[0]);else {
                      isThereEmptyFieldRequiredNotDefined && GUI.showUserMessage({
                        type: 'warning',
                        message: 'plugins.editing.messages.copy_and_paste_from_other_layer_mandatory_fields',
                        autoclose: true,
                        duration: 2000
                      });
                      inputs.features.push(features);
                    }
                    features.forEach(function (feature) {
                      return _this.fireEvent('addfeature', feature);
                    });
                    d.resolve(inputs);

                  case 11:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, _this);
          }));

          function callback() {
            return _ref.apply(this, arguments);
          }

          return callback;
        }()
      }
    }
  });
  dialog.find('button.btn-success').prop('disabled', true);
  vueInstance.$watch('selectedFeatures', function (features) {
    return dialog.find('button.btn-success').prop('disabled', features.length === 0);
  });
  return d.promise();
};

proto.stop = function () {
  return true;
};

module.exports = CopyFeaturesFromOtherLayerTask;

},{"../../../g3w-editing-components/selectcopyotherlayersfeatures":35,"./editingtask":101}],98:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var G3W_FID = g3wsdk.constant.G3W_FID;
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;

var t = g3wsdk.core.i18n.tPlugin;
var Feature = g3wsdk.core.layer.features.Feature;

var EditingTask = require('./editingtask');
var SelectCopyFeaturesFormOtherProjectLayerComponent = require('../../../g3w-editing-components/selectcopyotherprojectlayerfeatures');

function CopyFeaturesFromOtherProjectLayerTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyLayer = options.copyLayer,
      external = options.external,
      isVector = options.isVector;

  this.copyLayer = copyLayer;
  this.external = external;
  this.isVector = isVector;
  base(this, options);
}

inherit(CopyFeaturesFromOtherProjectLayerTask, EditingTask);

var proto = CopyFeaturesFromOtherProjectLayerTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  var features = inputs.features,
      originalLayer = inputs.layer;

  var layerId = originalLayer.getId();
  var attributes = originalLayer.getEditingFields().filter(function (attribute) {
    return !attribute.pk;
  });
  var session = context.session;
  var editingLayer = originalLayer.getEditingLayer();
  var source = editingLayer.getSource();
  var selectedFeatures = [];
  var vueInstance = SelectCopyFeaturesFormOtherProjectLayerComponent({
    external: this.external,
    layer: this.copyLayer,
    features: features,
    selectedFeatures: selectedFeatures
  });
  var message = vueInstance.$mount().$el;
  var dialog = GUI.showModalDialog({
    title: t('editing.modal.tools.copyfeaturefromprojectlayer.title'),
    className: 'modal-left',
    closeButton: false,
    message: message,
    buttons: {
      cancel: {
        label: 'Cancel',
        className: 'btn-danger',
        callback: function callback() {
          d.reject();
        }
      },
      ok: {
        label: 'Ok',
        className: 'btn-success',
        callback: function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var features, isThereEmptyFieldRequiredNotDefined, selectedFeature, createFeatureWithPropertiesOfSelectedFeature, layerProjectFeature;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    features = [];
                    isThereEmptyFieldRequiredNotDefined = false;

                    if (!selectedFeatures.length) {
                      _context.next = 21;
                      break;
                    }

                    selectedFeature = selectedFeatures[0];

                    createFeatureWithPropertiesOfSelectedFeature = function createFeatureWithPropertiesOfSelectedFeature(properties) {
                      attributes.forEach(function (_ref2) {
                        var name = _ref2.name,
                            _ref2$validate$requir = _ref2.validate.required,
                            required = _ref2$validate$requir === undefined ? false : _ref2$validate$requir;

                        var value = properties[name] || null;
                        isThereEmptyFieldRequiredNotDefined = isThereEmptyFieldRequiredNotDefined || value === null && required;
                        selectedFeature.set(name, value);
                      });
                      var feature = new Feature({
                        feature: selectedFeature,
                        properties: attributes.map(function (attribute) {
                          return attribute.name;
                        })
                      });
                      feature.setTemporaryId();
                      source.addFeature(feature);
                      features.push(feature);
                      session.pushAdd(layerId, feature, false);
                    };
                    // case vector layer


                    if (!_this.isVector) {
                      _context.next = 21;
                      break;
                    }

                    if (!_this.external) {
                      _context.next = 10;
                      break;
                    }

                    createFeatureWithPropertiesOfSelectedFeature(selectedFeature.getProperties());
                    _context.next = 19;
                    break;

                  case 10:
                    _context.prev = 10;
                    _context.next = 13;
                    return _this.getEditingService().getProjectLayerFeatureById({
                      layerId: _this.copyLayer.getId(),
                      fid: selectedFeature.get(G3W_FID)
                    });

                  case 13:
                    layerProjectFeature = _context.sent;

                    if (layerProjectFeature) createFeatureWithPropertiesOfSelectedFeature(layerProjectFeature.properties);
                    _context.next = 19;
                    break;

                  case 17:
                    _context.prev = 17;
                    _context.t0 = _context['catch'](10);

                  case 19:
                    _context.next = 21;
                    break;

                  case 21:
                    if (features.length && features.length === 1) inputs.features.push(features[0]);else {
                      isThereEmptyFieldRequiredNotDefined && GUI.showUserMessage({
                        type: 'warning',
                        message: 'plugins.editing.messages.copy_and_paste_from_other_layer_mandatory_fields',
                        autoclose: true,
                        duration: 2000
                      });
                      inputs.features.push(features);
                    }
                    features.forEach(function (feature) {
                      return _this.fireEvent('addfeature', feature);
                    });
                    d.resolve(inputs);

                  case 24:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, _this, [[10, 17]]);
          }));

          function callback() {
            return _ref.apply(this, arguments);
          }

          return callback;
        }()
      }
    }
  });
  dialog.find('button.btn-success').prop('disabled', true);
  vueInstance.$watch('selectedFeatures', function (features) {
    return dialog.find('button.btn-success').prop('disabled', features.length === 0);
  });
  return d.promise();
};

proto.stop = function () {
  return true;
};

module.exports = CopyFeaturesFromOtherProjectLayerTask;

},{"../../../g3w-editing-components/selectcopyotherprojectlayerfeatures":36,"./editingtask":101}],99:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function DeleteFeatureTask(options) {
  this.drawInteraction = null;
  this._selectInteraction = null;
  base(this, options);
}

inherit(DeleteFeatureTask, EditingTask);

var proto = DeleteFeatureTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  var originaLayer = inputs.layer;
  var layerId = originaLayer.getId();
  var session = context.session;
  var feature = inputs.features[0];
  var EditingService = require('../../../services/editingservice');
  var RelationService = require('../../../services/relationservice');
  var relations = EditingService._filterRelationsInEditing({
    layerId: layerId,
    relations: originaLayer.getRelations() ? originaLayer.getRelations().getArray() : []
  }).filter(function (relation) {
    var relationId = EditingService._getRelationId({
      layerId: layerId,
      relation: relation
    });
    var relationLayer = EditingService.getLayerById(relationId);

    var _EditingService$_getR = EditingService._getRelationFieldsFromRelation({
      layerId: relationId,
      relation: relation
    }),
        ownField = _EditingService$_getR.ownField;

    var field = relationLayer.getEditingFields().find(function (field) {
      return field.name === ownField;
    });
    return !field.validate.required;
  });
  var promise = relations.length ? EditingService.getLayersDependencyFeatures(layerId, {
    feature: feature,
    relations: relations
  }) : Promise.resolve();
  promise.then(function () {
    var relationsInEditing = EditingService.getRelationsInEditing({
      layerId: layerId,
      relations: relations,
      feature: feature
    });
    inputs.features = [feature];
    relationsInEditing.forEach(function (relationInEditing) {
      var relation = relationInEditing.relation,
          relations = relationInEditing.relations;

      var relationService = new RelationService(layerId, {
        relation: relation,
        relations: relations
      });
      var relationsLength = relations.length;
      for (var index = 0; index < relationsLength; index++) {
        relationService.unlinkRelation(0, false);
      }
    });
    session.pushDelete(layerId, feature);
    d.resolve(inputs);
  });

  return d.promise();
};

proto.stop = function () {
  return new Promise(function (resolve, reject) {
    resolve(true);
  });
};

module.exports = DeleteFeatureTask;

},{"../../../services/editingservice":42,"../../../services/relationservice":43,"./editingtask":101}],100:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var _g3wsdk$core$geoutils = g3wsdk.core.geoutils,
    multiGeometryToSingleGeometries = _g3wsdk$core$geoutils.multiGeometryToSingleGeometries,
    singleGeometriesToMultiGeometry = _g3wsdk$core$geoutils.singleGeometriesToMultiGeometry;

var EditingTask = require('./editingtask');

function DeletePartToMuligeometriesTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.pickFeatureInteraction = null;
  base(this, options);
}

inherit(DeletePartToMuligeometriesTask, EditingTask);

var proto = DeletePartToMuligeometriesTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  var originaLayer = inputs.layer;
  var editingLayer = inputs.layer.getEditingLayer();
  var layerId = originaLayer.getId();
  var session = context.session;
  var features = inputs.features,
      coordinate = inputs.coordinate;

  var feature = features[0];
  var originalFeature = feature.clone();
  var geometry = feature.getGeometry();
  var geometries = multiGeometryToSingleGeometries(geometry);
  var source = new ol.source.Vector({
    features: geometries.map(function (geometry) {
      return new ol.Feature(geometry);
    })
  });
  var map = this.getMap();
  var pixel = map.getPixelFromCoordinate(coordinate);
  var tempLayer = new ol.layer.Vector({
    source: source,
    style: editingLayer.getStyle()
  });
  map.addLayer(tempLayer);
  map.once('postrender', function () {
    var _this = this;

    var found = false;
    this.forEachFeatureAtPixel(pixel, function (_feature) {
      if (!found) {
        source.removeFeature(_feature);
        if (source.getFeatures().length) {
          var newGeometry = singleGeometriesToMultiGeometry(source.getFeatures().map(function (feature) {
            return feature.getGeometry();
          }));
          feature.setGeometry(newGeometry);
          /**
           * evaluated geometry expression
           */
          _this.evaluateGeometryExpressionField({
            inputs: inputs,
            context: context,
            feature: feature
          }).finally(function () {
            session.pushUpdate(layerId, feature, originalFeature);
            d.resolve(inputs);
          });
          /**
           * end of evaluated
           */
        } else {
          editingLayer.getSource().removeFeature(feature);
          session.pushDelete(layerId, feature);
          d.resolve(inputs);
        }
        found = true;
      }
    }, {
      layerFilter: function layerFilter(layer) {
        return layer === tempLayer;
      },

      hitTolerance: 1
    });
    this.removeLayer(tempLayer);
    tempLayer = null;
  });
  return d.promise();
};

proto.stop = function () {};

module.exports = DeletePartToMuligeometriesTask;

},{"./editingtask":101}],101:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var Geometry = g3wsdk.core.geometry.Geometry;
var _g3wsdk$core$geoutils = g3wsdk.core.geoutils,
    convertSingleMultiGeometry = _g3wsdk$core$geoutils.convertSingleMultiGeometry,
    isSameBaseGeometryType = _g3wsdk$core$geoutils.isSameBaseGeometryType,
    createSelectedStyle = _g3wsdk$core$geoutils.createSelectedStyle,
    areCoordinatesEqual = _g3wsdk$core$geoutils.areCoordinatesEqual;
var Layer = g3wsdk.core.layer.Layer;
var GUI = g3wsdk.gui.GUI;
var Task = g3wsdk.core.workflow.Task;
var WorkflowsStack = g3wsdk.core.workflow.WorkflowsStack;
var inputService = g3wsdk.core.input.inputService;

/**
 * List of placeholder in default_expression expression to call server for getting value of input
 * @type {string[]}
 */

var GEOMETRY_DEFAULT_EXPRESSION_PLACEHOLDERS = ["$area", "$perimeter", "$length", "$x", "$y", "$geometry"];

function EditingTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._editingServive;
  this._mapService = GUI.getService('map');
  this.addInteraction = function (interaction) {
    this._mapService.addInteraction(interaction);
  };
  this.removeInteraction = function (interaction) {
    var _this = this;

    //needed to avoid a issue on Openlayers
    setTimeout(function () {
      return _this._mapService.removeInteraction(interaction);
    });
  };
}

inherit(EditingTask, Task);

var proto = EditingTask.prototype;

//get editing type from editing config
proto.getEditingType = function () {
  return null;
};

proto.registerPointerMoveCursor = function () {
  this._mapService.getMap().on("pointermove", this._pointerMoveCursor);
};

proto.unregisterPointerMoveCursor = function () {
  this._mapService.getMap().un("pointermove", this._pointerMoveCursor);
};

proto._pointerMoveCursor = function (evt) {
  var hit = this.forEachFeatureAtPixel(evt.pixel, function () {
    return true;
  });
  if (hit) this.getTargetElement().style.cursor = 'pointer';else this.getTargetElement().style.cursor = '';
};

proto.setSteps = function () {
  var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._steps = steps;
  this.setUserMessageSteps(steps);
};

proto.getSteps = function () {
  return this._steps;
};

proto.getMapService = function () {
  return this._mapService;
};

proto.getMap = function () {
  return this._mapService.getMap();
};

proto.areCoordinatesEqual = function (_ref) {
  var feature = _ref.feature,
      coordinates = _ref.coordinates;

  var featureGeometry = feature.getGeometry();
  var geometryType = featureGeometry.getType();
  switch (geometryType) {
    case 'MultiLineString':
      return !!_.flatMap(featureGeometry.getCoordinates()).find(function (f_coordinates) {
        return areCoordinatesEqual(coordinates, f_coordinates);
      });
      break;
    case 'LineString':
      return !!featureGeometry.getCoordinates().find(function (f_coordinates) {
        return areCoordinatesEqual(coordinates, f_coordinates);
      });
      break;
    case 'Polygon':
      return !!_.flatMap(featureGeometry.getCoordinates()).find(function (f_coordinates) {
        return areCoordinatesEqual(coordinates, f_coordinates);
      });
      break;
    case 'MultiPolygon':
      return !!featureGeometry.getPolygons().find(function (polygon) {
        return !!_.flatMap(polygon.getCoordinates()).find(function (f_coordinates) {
          return areCoordinatesEqual(coordinates, f_coordinates);
        });
      });
      break;
    case 'Point':
      return areCoordinatesEqual(coordinates, featureGeometry.getCoordinates());
      break;
    case 'MultiPoint':
      return !!featureGeometry.getCoordinates().find(function (f_coordinates) {
        return areCoordinatesEqual(coordinates, f_coordinates);
      });
      break;
  }
  return false;
};

proto.setFeaturesSelectedStyle = function () {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (features.length) {
    var _getSelectedStyle = this.getSelectedStyle(features[0]),
        originalStyle = _getSelectedStyle.originalStyle,
        selectedStyle = _getSelectedStyle.selectedStyle;

    features.forEach(function (feature) {
      return feature.setStyle(selectedStyle);
    });
    return originalStyle;
  }
};

proto.setAndUnsetSelectedFeaturesStyle = function () {
  var _this2 = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      promise = _ref2.promise;

  /*
  Temporary needed to fix issue on pending promise
   */
  var _getInputs = this.getInputs(),
      layer = _getInputs.layer,
      features = _getInputs.features;
  /*
  To improve: notice that if coming from relation ( WorkflowsStack.getLength() > 1 )
  no need setTimeout because we already has selected style so original is the same selected.
  In case of current layer need to wait. TO DO
   */


  var selectOriginalStyleHandle = function selectOriginalStyleHandle() {
    var originalStyle = _this2.setFeaturesSelectedStyle(features);
    promise.always(function () {
      features.forEach(function (feature) {
        return feature.setStyle(originalStyle);
      });
    });
  };
  if (layer.getType() === Layer.LayerTypes.VECTOR) {
    WorkflowsStack.getLength() === 1 ? setTimeout(function () {
      selectOriginalStyleHandle();
    }) : selectOriginalStyleHandle();
  }
};

proto.getSelectedStyle = function (feature) {
  var geometryType = feature.getGeometry().getType();
  var originalStyle = feature.getStyle();
  var selectedStyle = createSelectedStyle({
    geometryType: geometryType
  });
  return {
    originalStyle: originalStyle,
    selectedStyle: selectedStyle
  };
};

proto.disableSidebar = function () {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  !this._isContentChild && GUI.disableSideBar(bool);
};

proto.getEditingService = function () {
  this._editingServive = this._editingServive || require('../../../services/editingservice');
  return this._editingServive;
};

proto.fireEvent = function (event) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return this.getEditingService().fireEvent(event, options);
};

proto.setNullMediaFields = function () {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref3.layer,
      feature = _ref3.feature;

  var mediaFields = layer.getEditingMediaFields({});
  mediaFields.forEach(function (field) {
    return feature.set(field, null);
  });
};

proto.run = function (inputs, context) {};

proto.stop = function () {};

/**
 * Function that handle single task 
 */
proto.saveSingle = function (input, context) {
  var _this3 = this;

  context.session.save().then(function () {
    return _this3.getEditingService().saveChange();
  });
};

/**
 * Function cancel single
 * @param input
 * @param context
 */
proto.cancelSingle = function (input, context) {
  context.session.rollback();
};

/**
 * method that return in case of relation child  workflow the layerId root
 * @returns {*}
 */
proto.getRootWorkflowLayerId = function () {
  return WorkflowsStack.getFirst().getInputs().layer.getId();
};

/**
 * get form fields
 */

proto.getFormFields = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _this4 = this;

  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      inputs = _ref5.inputs,
      context = _ref5.context,
      feature = _ref5.feature,
      _ref5$isChild = _ref5.isChild,
      isChild = _ref5$isChild === undefined ? false : _ref5$isChild;

  var hasUniqueValue, relationLayerId, layer, features, layerId, unique_values_feature_field_Obj, exclude, _context$get_default_, get_default_value, fields, savedfeatureFnc;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          hasUniqueValue = false;
          relationLayerId = this.getRootWorkflowLayerId();
          layer = inputs.layer, features = inputs.features;
          layerId = layer.getId();
          unique_values_feature_field_Obj = [];
          exclude = context.excludeFields, _context$get_default_ = context.get_default_value, get_default_value = _context$get_default_ === undefined ? false : _context$get_default_;
          fields = layer.getFieldsWithValues(feature, {
            exclude: exclude,
            get_default_value: get_default_value
          });
          /**
           * check for unique validate
           */

          fields.forEach(function (field) {
            if (field.validate.unique) {
              hasUniqueValue = true;
              var current_feature_value = feature.get(field.name); // current editing feature field value
              unique_values_feature_field_Obj.push({
                current_feature_value: current_feature_value,
                field: field
              });
            }
          });
          unique_values_feature_field_Obj.forEach(function (_ref6) {
            var current_feature_value = _ref6.current_feature_value,
                field = _ref6.field;

            /**
             * current editing feature add to
             */
            var layerUniqueFieldValues = void 0;
            if (isChild) {
              layerUniqueFieldValues = _this4.getEditingService().getChildLayerUniqueFieldValues({
                layerId: layerId,
                relationLayerId: relationLayerId,
                field: field
              });
            } else {
              layerUniqueFieldValues = _this4.getEditingService().getLayerUniqueFieldValues({
                layerId: layerId,
                field: field
              });
            }
            layerUniqueFieldValues.forEach(function (value) {
              return field.validate.exclude_values.add(value);
            });

            /**
             * add eventually current feature field unique value that are changed during editing
             */
            features.forEach(function (feature) {
              var value = feature.get(field.name);
              if (value !== null || typeof value !== "undefined") field.validate.exclude_values.add(value);
            });
            //remove current value from exclude_values
            field.validate.exclude_values.delete(current_feature_value);
          });

          if (hasUniqueValue) {
            savedfeatureFnc = function savedfeatureFnc() {
              unique_values_feature_field_Obj.forEach(function (_ref7) {
                var current_feature_value = _ref7.current_feature_value,
                    field = _ref7.field;

                if (current_feature_value !== field.value) {
                  if (isChild) _this4.getEditingService().changeRelationLayerUniqueFieldValues({
                    layerId: layerId,
                    relationLayerId: relationLayerId,
                    field: field,
                    oldValue: current_feature_value,
                    newValueconvertSingleMultiGeometry: field.value
                  });else _this4.getEditingService().changeLayerUniqueFieldValues({
                    layerId: layerId,
                    field: field,
                    oldValue: current_feature_value,
                    newValue: field.value
                  });
                }
              });
              if (!isChild) _this4.getEditingService().saveTemporaryRelationsUniqueFieldsValues(layerId);
              return {
                once: true
              };
            };

            this.getEditingService().subscribe("savedfeature_" + layerId, savedfeatureFnc);
            this.getEditingService().subscribe("closeform_" + layerId, function () {
              _this4.getEditingService().unsubscribe("savedfeature_" + layerId, savedfeatureFnc);
              _this4.getEditingService().clearTemporaryRelationsUniqueFieldsValues(layerId);
              return {
                once: true
              };
            });
          }
          return _context.abrupt("return", fields);

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}));

/**
 * Evaluated Expression checking inp
 */
proto.evaluateGeometryExpressionField = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _this5 = this;

  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      inputs = _ref9.inputs,
      context = _ref9.context,
      feature = _ref9.feature;

  var expression_eval_promises, layer, exclude, _context$get_default_2, get_default_value, fields;

  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          expression_eval_promises = []; // promises from expression evaluation

          layer = inputs.layer;
          exclude = context.excludeFields, _context$get_default_2 = context.get_default_value, get_default_value = _context$get_default_2 === undefined ? false : _context$get_default_2;
          fields = layer.getFieldsWithValues(feature, {
            exclude: exclude,
            get_default_value: get_default_value
          });

          fields.forEach(function (field) {
            var default_expression = field.input.options.default_expression;

            if (default_expression) {
              var evaluate = false;
              var expression = default_expression.expression,
                  _default_expression$a = default_expression.apply_on_update,
                  apply_on_update = _default_expression$a === undefined ? false : _default_expression$a;
              /*
              check if always update apply_on_update = true or only is is a new feature
               */

              if (apply_on_update || feature.isNew()) evaluate = GEOMETRY_DEFAULT_EXPRESSION_PLACEHOLDERS.find(function (placeholder) {
                return expression.indexOf(placeholder) !== -1;
              });
              if (evaluate) {
                var qgs_layer_id = inputs.layer.getId();
                var parentData = _this5.getParentFormData();
                var expression_eval_promise = new Promise(function () {
                  var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resolve, reject) {
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return inputService.handleDefaultExpressionFormInput({
                              field: field,
                              feature: feature,
                              qgs_layer_id: qgs_layer_id,
                              parentData: parentData
                            });

                          case 3:
                            feature.set(field.name, field.value);
                            resolve(feature);
                            _context2.next = 10;
                            break;

                          case 7:
                            _context2.prev = 7;
                            _context2.t0 = _context2["catch"](0);

                            reject(_context2.t0);

                          case 10:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, _this5, [[0, 7]]);
                  }));

                  return function (_x10, _x11) {
                    return _ref10.apply(this, arguments);
                  };
                }());
                expression_eval_promises.push(expression_eval_promise);
              }
            }
          });
          _context3.next = 7;
          return Promise.allSettled(expression_eval_promises);

        case 7:
          return _context3.abrupt("return", feature);

        case 8:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}));

/**
 * set
 * @param get_default_value to context of task
 */
proto.setContextGetDefaultValue = function () {
  var get_default_value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var context = this.getContext();
  context.get_default_value = get_default_value;
};

proto.getParentFormData = function () {
  if (WorkflowsStack.getLength() > 1) {
    var _WorkflowsStack$getPa = WorkflowsStack.getParent().getInputs(),
        features = _WorkflowsStack$getPa.features,
        layer = _WorkflowsStack$getPa.layer,
        _WorkflowsStack$getPa2 = _WorkflowsStack$getPa.fields,
        fields = _WorkflowsStack$getPa2 === undefined ? [] : _WorkflowsStack$getPa2;
    // in case of fields (temporary set by form) set temporary value to feature (cloned) parent


    var feature = features[features.length - 1].clone();
    fields.forEach(function (_ref11) {
      var name = _ref11.name,
          value = _ref11.value;

      feature.set(name, value);
    });
    return {
      feature: feature,
      qgs_layer_id: layer.getId()
    };
  }
};

proto.getFeaturesFromSelectionFeatures = function (_ref12) {
  var layerId = _ref12.layerId,
      geometryType = _ref12.geometryType;

  var selectionLayerSource = this._mapService.defaultsLayers.selectionLayer.getSource();
  return this.convertFeaturesGeometryToGeometryTypeOfLayer({
    features: selectionLayerSource.getFeatures().filter(function (feature) {
      return feature.__layerId !== layerId;
    }),
    geometryType: geometryType
  });
};

proto.convertFeaturesGeometryToGeometryTypeOfLayer = function (_ref13) {
  var _ref13$features = _ref13.features,
      features = _ref13$features === undefined ? [] : _ref13$features,
      geometryType = _ref13.geometryType;

  var convertFeatures = [];
  features.forEach(function (feature) {
    var featureGeometryType = feature.getGeometry() && feature.getGeometry().getType();
    if (geometryType === featureGeometryType) convertFeatures.push(feature);else if (isSameBaseGeometryType(featureGeometryType, geometryType) && (Geometry.isMultiGeometry(geometryType) || !Geometry.isMultiGeometry(featureGeometryType))) {
      var cloneFeature = feature.clone();
      cloneFeature.__layerId = feature.__layerId;
      cloneFeature.setGeometry(convertSingleMultiGeometry(feature.getGeometry(), geometryType));
      convertFeatures.push(cloneFeature);
    }
  });
  return convertFeatures;
};

module.exports = EditingTask;

},{"../../../services/editingservice":42}],102:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function GetVertexTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._drawInteraction;
  this._snapIteraction;
  base(this, options);
}

inherit(GetVertexTask, EditingTask);

var proto = GetVertexTask.prototype;

proto.run = function (inputs) {
  var _this = this;

  var d = $.Deferred();
  var features = inputs.features;

  if (!features.length) return;
  this._snapIteraction = new ol.interaction.Snap({
    features: new ol.Collection(features),
    edge: false
  });
  this._drawIteraction = new ol.interaction.Draw({
    type: 'Point',
    condition: function condition(evt) {
      var coordinates = evt.coordinate;
      return !!features.find(function (feature) {
        return _this.areCoordinatesEqual({ feature: feature, coordinates: coordinates });
      });
    }
  });
  this._drawIteraction.on('drawend', function (evt) {
    inputs.coordinates = evt.feature.getGeometry().getCoordinates();
    _this.setUserMessageStepDone('from');
    d.resolve(inputs);
  });

  this.addInteraction(this._drawIteraction);
  this.addInteraction(this._snapIteraction);

  return d.promise();
};

proto.stop = function () {
  this.removeInteraction(this._drawIteraction);
  this.removeInteraction(this._snapIteraction);
  this._snapIteraction = null;
  this._drawIteraction = null;
};

module.exports = GetVertexTask;

},{"./editingtask":101}],103:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');
var GUI = g3wsdk.gui.GUI;
var PickFeatureInteraction = g3wsdk.ol.interactions.PickFeatureInteraction;


function LinkRelationTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(LinkRelationTask, EditingTask);

var proto = LinkRelationTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  GUI.setModal(false);
  var editingLayer = inputs.layer.getEditingLayer();
  this._originalLayerStyle = editingLayer.getStyle();
  var beforeRun = context.beforeRun;
  var promise = beforeRun && typeof beforeRun === 'function' ? beforeRun() : Promise.resolve();
  var _context$exclude = context.exclude,
      field = _context$exclude.field,
      value = _context$exclude.value;

  var style = context.style;
  this._features = editingLayer.getSource().getFeatures();
  this._features = field ? this._features.filter(function (feature) {
    return feature.get(field) != value;
  }) : this._features;
  style && this._features.forEach(function (feature) {
    feature.setStyle(style);
  });
  promise.then(function () {
    _this.pickFeatureInteraction = new PickFeatureInteraction({
      layers: [editingLayer],
      features: _this._features
    });
    _this.addInteraction(_this.pickFeatureInteraction);
    _this.pickFeatureInteraction.on('picked', function (e) {
      var relation = e.feature;
      inputs.features.push(relation);
      GUI.setModal(true);
      d.resolve(inputs);
    });
  }).catch(function (err) {
    console.log(err);
    d.reject();
  });
  return d.promise();
};

// metodo eseguito alla disattivazione del tool
proto.stop = function () {
  var _this2 = this;

  GUI.setModal(true);
  this.removeInteraction(this.pickFeatureInteraction);
  this._features.forEach(function (feature) {
    feature.setStyle(_this2._originalLayerStyle);
  });
  this.pickFeatureInteraction = null;
  this._features = null;
  this._originalLayerStyle = null;
  return true;
};

module.exports = LinkRelationTask;

},{"./editingtask":101}],104:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var dissolve = g3wsdk.core.geoutils.dissolve;

var EditingTask = require('./editingtask');
var GUI = g3wsdk.gui.GUI;

var SelectFeaturesDom = require('../../../g3w-editing-components/selectmergefeatures');

function MergeFeaturesTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(MergeFeaturesTask, EditingTask);

var proto = MergeFeaturesTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  var layer = inputs.layer,
      features = inputs.features;

  var editingLayer = layer.getEditingLayer();
  var source = editingLayer.getSource();
  var layerId = layer.getId();
  var session = context.session;
  if (features.length < 2) {
    GUI.showUserMessage({
      type: 'warning',
      message: 'Seleziona come minimo due features',
      autoclose: true
    });
    d.reject();
  } else {
    var mapService = this.getMapService();
    var index = void 0;
    var message = SelectFeaturesDom({
      features: features,
      events: {
        click: function click(idx) {
          index = idx;
          var feature = features[index];
          mapService.highlightGeometry(feature.getGeometry(), {
            zoom: false,
            color: 'red'
          });
        }
      }
    });
    GUI.showModalDialog({
      title: 'seleziona la feature',
      className: 'modal-left',
      closeButton: false,
      message: message,
      buttons: {
        cancel: {
          label: 'Cancel',
          className: 'btn-default',
          callback: function callback() {
            d.reject();
          }
        },
        ok: {
          label: 'Ok',
          className: 'btn-primary',
          callback: function callback() {
            if (index !== undefined) {
              var feature = features[index];
              var originalFeature = feature.clone();
              var newFeature = dissolve({
                features: features,
                index: index
              });
              if (newFeature) {
                session.pushUpdate(layerId, newFeature, originalFeature);
                features.splice(index, 1);
                features.forEach(function (deleteFeature) {
                  session.pushDelete(layerId, deleteFeature);
                  source.removeFeature(deleteFeature);
                });
                inputs.features = [feature];
                d.resolve(inputs);
              } else {
                GUI.showUserMessage({
                  type: 'warning',
                  message: 'No feature disolved',
                  autoclose: true
                });
                d.reject();
              }
            } else {
              GUI.showUserMessage({
                type: 'warning',
                message: 'No feature selected',
                autoclose: true
              });
              d.reject();
            }
          }
        }
      }
    });
  }
  return d.promise();
};
proto.stop = function () {
  this.removeInteraction(this._pickInteraction);
};

module.exports = MergeFeaturesTask;

},{"../../../g3w-editing-components/selectmergefeatures":37,"./editingtask":101}],105:[function(require,module,exports){
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var _g3wsdk$ol$utils = g3wsdk.ol.utils,
    createMeasureTooltip = _g3wsdk$ol$utils.createMeasureTooltip,
    removeMeasureTooltip = _g3wsdk$ol$utils.removeMeasureTooltip;

var EditingTask = require('./editingtask');

function ModifyGeometryVertexTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.drawInteraction = null;
  this._originalStyle = null;
  this._feature = null;
  this.tooltip;
  this._deleteCondition = options.deleteCondition;
  base(this, options);
}

inherit(ModifyGeometryVertexTask, EditingTask);

var proto = ModifyGeometryVertexTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  var originalLayer = inputs.layer;
  var editingLayer = originalLayer.getEditingLayer();
  var session = context.session;
  var layerId = originalLayer.getId();
  var newFeature = void 0,
      originalFeature = void 0;
  var feature = this._feature = inputs.features[0];
  this.deleteVertexKey;
  this._originalStyle = editingLayer.getStyle();
  var style = function style() {
    var image = new ol.style.Circle({
      radius: 5,
      fill: null,
      stroke: new ol.style.Stroke({ color: 'orange', width: 2 })
    });
    return [new ol.style.Style({
      image: image,
      geometry: function geometry(feature) {
        var coordinates = feature.getGeometry().getCoordinates()[0];
        return new ol.geom.MultiPoint(coordinates);
      }
    }), new ol.style.Style({
      stroke: new ol.style.Stroke({
        color: 'yellow',
        width: 4
      })
    })];
  };
  feature.setStyle(style);
  var features = new ol.Collection(inputs.features);
  this._modifyInteraction = new ol.interaction.Modify({
    features: features,
    deleteCondition: this._deleteCondition
  });
  this._modifyInteraction.on('modifystart', function (evt) {
    var feature = evt.features.getArray()[0];
    originalFeature = feature.clone();
  });
  this.addInteraction(this._modifyInteraction);
  this._modifyInteraction.on('modifyend', function (evt) {
    var feature = evt.features.getArray()[0];
    if (feature.getGeometry().getExtent() !== originalFeature.getGeometry().getExtent()) {
      /*
      * evaluate expression geometry check
       */
      _this.evaluateGeometryExpressionField({
        inputs: inputs,
        context: context,
        feature: feature
      }).finally(function () {
        newFeature = feature.clone();
        session.pushUpdate(layerId, newFeature, originalFeature);
        inputs.features.push(newFeature);
        d.resolve(inputs);
      });
      /**
       *
       * end of evaluate
       */
    }
  });
  return d.promise();
};

proto.addMeasureInteraction = function () {
  var _this2 = this;

  var map = this.getMap();
  this._modifyInteraction.on('modifystart', function (evt) {
    var feature = evt.features.getArray()[0];
    _this2.tooltip = createMeasureTooltip({
      map: map,
      feature: feature
    });
  });
};

proto.removeMeasureInteraction = function () {
  var map = this.getMap();
  this.tooltip && removeMeasureTooltip(_extends({
    map: map
  }, this.tooltip));
  this.tooltip = null;
};

proto.stop = function () {
  this._feature.setStyle(this._originalStyle);
  this.removeInteraction(this._modifyInteraction);
  return true;
};

module.exports = ModifyGeometryVertexTask;

},{"./editingtask":101}],106:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function MoveElementsTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(MoveElementsTask, EditingTask);

var proto = MoveElementsTask.prototype;

proto.getDeltaXY = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      x = _ref.x,
      y = _ref.y,
      coordinates = _ref.coordinates;

  var getCoordinates = function getCoordinates(coordinates) {
    if (Array.isArray(coordinates[0])) {
      return getCoordinates(coordinates[0]);
    } else return {
      x: coordinates[0],
      y: coordinates[1]
    };
  };
  var xy = getCoordinates(coordinates);
  return {
    x: x - xy.x,
    y: y - xy.y
  };
};

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  var layer = inputs.layer,
      features = inputs.features,
      coordinates = inputs.coordinates;

  var source = layer.getEditingLayer().getSource();
  var layerId = layer.getId();
  var session = context.session;
  this._snapIteraction = new ol.interaction.Snap({
    source: source,
    edge: false
  });

  this._drawInteraction = new ol.interaction.Draw({
    type: 'Point',
    features: new ol.Collection()
  });

  this._drawInteraction.on('drawend', function (evt) {
    var _evt$feature$getGeome = evt.feature.getGeometry().getCoordinates(),
        _evt$feature$getGeome2 = _slicedToArray(_evt$feature$getGeome, 2),
        x = _evt$feature$getGeome2[0],
        y = _evt$feature$getGeome2[1];

    var deltaXY = coordinates ? _this.getDeltaXY({
      x: x, y: y, coordinates: coordinates
    }) : null;
    var featuresLength = features.length;
    var promisesDefaultEvaluation = [];
    for (var i = 0; i < featuresLength; i++) {
      var feature = features[i].cloneNew();
      if (deltaXY) feature.getGeometry().translate(deltaXY.x, deltaXY.y);else {
        var _coordinates = feature.getGeometry().getCoordinates();
        var _deltaXY = _this.getDeltaXY({
          x: x, y: y, coordinates: _coordinates
        });
        feature.getGeometry().translate(_deltaXY.x, _deltaXY.y);
      }
      _this.setNullMediaFields({
        feature: feature,
        layer: layer
      });
      /**
       * evaluated geometry expression
       */
      var promise = _this.evaluateGeometryExpressionField({
        inputs: inputs,
        context: context,
        feature: feature
      });

      promisesDefaultEvaluation.push(promise);
    }

    Promise.allSettled(promisesDefaultEvaluation).then(function (promises) {
      promises.forEach(function (_ref2) {
        var status = _ref2.status,
            feature = _ref2.value;

        source.addFeature(feature);
        session.pushAdd(layerId, feature);
        inputs.features.push(feature);
      });
    }).finally(function () {
      /**
       * @type {boolean}
       */
      _this._steps.to.done = true;
      d.resolve(inputs);
    });
  });

  this.addInteraction(this._drawInteraction);
  this.addInteraction(this._snapIteraction);
  return d.promise();
};
proto.stop = function () {
  this.removeInteraction(this._drawInteraction);
  this.removeInteraction(this._snapIteraction);
  this._drawInteraction = null;
  this._snapIteraction = null;
  return true;
};

module.exports = MoveElementsTask;

},{"./editingtask":101}],107:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function MoveFeatureTask(options) {
  this.drawInteraction = null;
  this.promise; // need to be set here in case of picked features
  base(this, options);
}

inherit(MoveFeatureTask, EditingTask);

var proto = MoveFeatureTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  this.promise = $.Deferred();
  var originalLayer = inputs.layer;
  var session = context.session;
  var layerId = originalLayer.getId();
  var features = new ol.Collection(inputs.features);
  var originalFeature = null;
  this.changeKey = null; //
  var isGeometryChange = false; // changed if geometry is changed

  this.setAndUnsetSelectedFeaturesStyle({
    promise: this.promise
  });

  this._translateInteraction = new ol.interaction.Translate({
    features: features,
    hitTolerance: isMobile && isMobile.any ? 10 : 0
  });
  this.addInteraction(this._translateInteraction);

  this._translateInteraction.on('translatestart', function (evt) {
    var feature = evt.features.getArray()[0];
    _this.changeKey = feature.once('change', function () {
      return isGeometryChange = true;
    });
    originalFeature = feature.clone();
  });

  this._translateInteraction.on('translateend', function (evt) {
    ol.Observable.unByKey(_this.changeKey);
    var feature = evt.features.getArray()[0];
    if (isGeometryChange) {
      /**
       * evaluated geometry expression
       */
      _this.evaluateGeometryExpressionField({
        inputs: inputs,
        context: context,
        feature: feature
      }).finally(function () {
        var newFeature = feature.clone();
        session.pushUpdate(layerId, newFeature, originalFeature);
        _this.promise.resolve(inputs);
      });
    } else _this.promise.resolve(inputs);
  });

  return this.promise.promise();
};

proto.stop = function () {
  this.promise.resolve();
  this.removeInteraction(this._translateInteraction);
  this._translateInteraction = null;
  this.changeKey = null;
};

module.exports = MoveFeatureTask;

},{"./editingtask":101}],108:[function(require,module,exports){
var _SaveAll = require('../../../components/SaveAll.vue');

var _SaveAll2 = _interopRequireDefault(_SaveAll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;
var WorkflowsStack = g3wsdk.core.workflow.WorkflowsStack;

var EditingTask = require('./editingtask');
var EditingFormComponent = require('../../../form/editingform');

function OpenFormTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._edit_relations = options.edit_relations === undefined ? true : options._edit_relations;
  this._formIdPrefix = 'form_';
  this.layerId;
  this._isContentChild = false;
  this._features;
  this._originalLayer;
  this._editingLayer;
  this._layerName;
  this._originalFeatures;
  this._fields;
  this._session;
  this._editorFormStructure;
  this.promise;
  this._multi = options.multi || false; // set if can handle multi edit features
  base(this, options);
}

inherit(OpenFormTask, EditingTask);

module.exports = OpenFormTask;

var proto = OpenFormTask.prototype;

proto._getForm = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputs, context) {
    var feature, fatherValue, fatherField, editorFormStructure;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            this._session = context.session;
            this._originalLayer = inputs.layer;
            this._editingLayer = this._originalLayer.getEditingLayer();
            this._layerName = this._originalLayer.getName();
            this._features = this._multi ? inputs.features : [inputs.features[inputs.features.length - 1]];
            this._originalFeatures = this._features.map(function (feature) {
              return feature.clone();
            });
            feature = this._features[0];
            /**
             * In case of create a child relation feature set a father relation field value
             */

            if (this._isContentChild) {
              fatherValue = context.fatherValue, fatherField = context.fatherField;

              if (typeof fatherField !== "undefined") {
                feature.set(fatherField, fatherValue);
                this._originalFeatures[0].set(fatherField, fatherValue);
              }
            }
            _context.next = 10;
            return this.getFormFields({
              inputs: inputs,
              context: context,
              feature: feature,
              isChild: this._isContentChild
            });

          case 10:
            this._fields = _context.sent;

            // in case of multi editing set all field to null //
            this._fields = this._multi ? this._fields.map(function (field) {
              var _field = JSON.parse(JSON.stringify(field));
              _field.value = null;
              _field.forceNull = true;
              _field.validate.required = false;
              return _field;
            }).filter(function (field) {
              return !field.pk;
            }) : this._fields;
            if (this._originalLayer.hasFormStructure()) {
              editorFormStructure = this._originalLayer.getEditorFormStructure();

              this._editorFormStructure = editorFormStructure.length ? editorFormStructure : null;
            }

            return _context.abrupt('return', GUI.showContentFactory('form'));

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

proto._cancelFnc = function (promise, inputs) {
  return function () {
    if (!this._isContentChild) {
      GUI.setModal(false);
      // fire event cancel form to emit to subscrivers
      this.fireEvent('cancelform', inputs.features);
    }
    promise.reject(inputs);
  };
};

/**
 *
 * @param fieldssetAndUnsetSelectedFeaturesStyle
 * @returns {Promise<unknown>}
 */
proto.saveAll = function (fields) {
  var _this = this;

  return new Promise(function (resolve, reject) {
    var _getContext = _this.getContext(),
        session = _getContext.session;

    var inputs = _this.getInputs();
    fields = _this._multi ? fields.filter(function (field) {
      return field.value !== null;
    }) : fields;
    if (fields.length) {
      var newFeatures = [];
      _this._features.forEach(function (feature) {
        _this._originalLayer.setFieldsWithValues(feature, fields);
        newFeatures.push(feature.clone());
      });
      if (_this._isContentChild) {
        inputs.relationFeatures = {
          newFeatures: newFeatures,
          originalFeatures: _this._originalFeatures
        };
      }
      _this.fireEvent('saveform', {
        newFeatures: newFeatures,
        originalFeatures: _this._originalFeatures
      }).then(function () {
        newFeatures.forEach(function (newFeature, index) {
          session.pushUpdate(_this.layerId, newFeature, _this._originalFeatures[index]);
        });
        _this.fireEvent('savedfeature', newFeatures); // called after saved
        _this.fireEvent('savedfeature_' + _this.layerId, newFeatures); // called after saved using layerId
        session.save();
        resolve({
          promise: _this.promise
        });
      });
    }
  });
};

proto._saveFeatures = function (_ref2) {
  var _this2 = this;

  var fields = _ref2.fields,
      promise = _ref2.promise,
      session = _ref2.session,
      inputs = _ref2.inputs;

  fields = this._multi ? fields.filter(function (field) {
    return field.value !== null;
  }) : fields;
  if (fields.length) {
    var newFeatures = [];
    this._features.forEach(function (feature) {
      _this2._originalLayer.setFieldsWithValues(feature, fields);
      newFeatures.push(feature.clone());
    });
    if (this._isContentChild) {
      inputs.relationFeatures = {
        newFeatures: newFeatures,
        originalFeatures: this._originalFeatures
      };
    }
    this.fireEvent('saveform', {
      newFeatures: newFeatures,
      originalFeatures: this._originalFeatures
    }).then(function () {
      newFeatures.forEach(function (newFeature, index) {
        session.pushUpdate(_this2.layerId, newFeature, _this2._originalFeatures[index]);
      });
      GUI.setModal(false);
      _this2.fireEvent('savedfeature', newFeatures); // called after saved
      _this2.fireEvent('savedfeature_' + _this2.layerId, newFeatures); // called after saved using layerId
      // In case of save of child it mean that child is updated so also parent
      _this2._isContentChild && WorkflowsStack.getParents().forEach(function (workflow) {
        return workflow.getContext().service.setUpdate(true, {
          force: true
        });
      });
      promise.resolve(inputs);
    });
  } else {
    GUI.setModal(false);
    promise.resolve(inputs);
  }
};

proto._saveFnc = function (promise, context, inputs) {
  return function (fields) {
    var session = context.session;
    this._saveFeatures({
      fields: fields,
      promise: promise,
      session: session,
      inputs: inputs
    });
  };
};

/**
 * Build form
 * @param options
 * @returns {Promise<void>}
 */
proto.startForm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var inputs, context, promise, session, formComponent, Form, feature, isnew, formService, currentWorkflow;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          this.getEditingService().setCurrentLayout();
          inputs = options.inputs, context = options.context, promise = options.promise;
          session = context.session;
          formComponent = options.formComponent || EditingFormComponent;
          _context2.next = 6;
          return this._getForm(inputs, context);

        case 6:
          Form = _context2.sent;
          feature = this._originalFeatures[0];
          isnew = this._originalFeatures.length > 1 ? false : feature.isNew();

          /**
           * set fields. Useful getParentFormData
           */

          WorkflowsStack.getCurrent().setInput({
            key: 'fields',
            value: this._fields
          });

          formService = Form({
            formComponent: formComponent,
            title: "plugins.editing.editing_attributes",
            name: this._layerName,
            crumb: {
              title: this._layerName
            },
            id: this._generateFormId(this._layerName),
            dataid: this._layerName,
            layer: this._originalLayer,
            isnew: isnew, // specify if is a new feature
            feature: feature,
            parentData: this.getParentFormData(),
            fields: this._fields,
            context_inputs: !this._multi && this._edit_relations && {
              context: context,
              inputs: inputs
            },
            formStructure: this._editorFormStructure,
            modal: true,
            push: this._isContentChild,
            showgoback: !this._isContentChild,
            headerComponent: _SaveAll2.default,
            buttons: [{
              id: 'save',
              title: this._isContentChild ? "plugins.editing.form.buttons.save_and_back" : "plugins.editing.form.buttons.save",
              type: "save",
              class: "btn-success",
              cbk: this._saveFnc(promise, context, inputs).bind(this)
            }, {
              id: 'cancel',
              title: "plugins.editing.form.buttons.cancel",
              type: "cancel",
              class: "btn-danger",
              /// buttons in case of change
              eventButtons: {
                update: {
                  false: {
                    id: 'close',
                    title: "close",
                    type: "cancel",
                    class: "btn-danger"
                  }
                }
              },
              cbk: this._cancelFnc(promise, inputs).bind(this)
            }]
          });

          this.fireEvent('openform', {
            layerId: this.layerId,
            session: session,
            feature: this._originalFeature,
            formService: formService
          });
          currentWorkflow = WorkflowsStack.getCurrent();
          // in case of called single task no workflow is set

          currentWorkflow && currentWorkflow.setContextService(formService);

        case 14:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, this);
}));

proto.run = function (inputs, context) {
  var d = $.Deferred();
  this.promise = d;
  this._isContentChild = WorkflowsStack.getLength() > 1;
  var layer = inputs.layer,
      features = inputs.features;

  this.layerId = layer.getId();
  GUI.setLoadingContent(false);
  this.getEditingService().disableMapControlsConflict(true);

  this.setAndUnsetSelectedFeaturesStyle({
    promise: d
  });

  if (!this._multi && Array.isArray(features[features.length - 1])) {
    d.resolve();
  } else {
    this.startForm({
      inputs: inputs,
      context: context,
      promise: d
    });
    this.disableSidebar(true);
  }

  return d.promise();
};

proto._generateFormId = function (layerName) {
  return this._formIdPrefix + layerName;
};

proto.stop = function () {
  this.disableSidebar(false);
  if (!this._isContentChild) {
    this.getEditingService().disableMapControlsConflict(false);
    // at the end if is the parent form set it to false update, and force update
    WorkflowsStack.getCurrent().getContext().service.setUpdate(false, {
      force: false
    });
  }
  GUI.closeForm({
    pop: this._isContentChild
  });
  this.getEditingService().resetCurrentLayout();
  this.fireEvent('closeform');
  this.fireEvent('closeform_' + this.layerId); // need to check layerId
  this.layerId = null;
  this.promise = null;
};

},{"../../../components/SaveAll.vue":14,"../../../form/editingform":31,"./editingtask":101}],109:[function(require,module,exports){
var _g3wsdk$core$utils = g3wsdk.core.utils,
    inherit = _g3wsdk$core$utils.inherit,
    base = _g3wsdk$core$utils.base;
var GUI = g3wsdk.gui.GUI;
var WorkflowsStack = g3wsdk.core.workflow.WorkflowsStack;

var TableComponent = require('../../../g3w-editing-components/table');
var EditingTask = require('./editingtask');

function OpenTableTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._formIdPrefix = 'form_';
  base(this, options);
}

inherit(OpenTableTask, EditingTask);

var proto = OpenTableTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  this.getEditingService().setCurrentLayout();
  var d = $.Deferred();
  var originalLayer = inputs.layer;
  var layerName = originalLayer.getName();
  var headers = originalLayer.getEditingFields();
  this._isContentChild = WorkflowsStack.getLength() > 1;
  var foreignKey = this._isContentChild && context.excludeFields ? context.excludeFields[0] : null;
  var exclude = this._isContentChild && context.exclude;
  var capabilities = originalLayer.getEditingCapabilities();
  var editingLayer = originalLayer.getEditingLayer();
  var features = editingLayer.readEditingFeatures();
  if (exclude && features.length) {
    var value = exclude.value;

    features = features.filter(function (feature) {
      var featureValue = feature.get(foreignKey);
      return featureValue != value;
    });
  }
  var content = new TableComponent({
    title: '' + layerName,
    features: features,
    promise: d,
    push: this._isContentChild,
    headers: headers,
    context: context,
    inputs: inputs,
    capabilities: capabilities,
    fatherValue: context.fatherValue,
    foreignKey: foreignKey
  });
  GUI.disableSideBar(true);
  GUI.showUserMessage({
    type: 'loading',
    message: 'plugins.editing.messages.loading_table_data',
    autoclose: false,
    closable: false
  });

  setTimeout(function () {
    content.once('ready', function () {
      return setTimeout(function () {
        GUI.disableSideBar(false);
        GUI.closeUserMessage();
      });
    });
    GUI.showContent({
      content: content,
      //perc: 100,
      push: _this._isContentChild,
      showgoback: false,
      closable: false
    });
  }, 300);
  return d.promise();
};

proto._generateFormId = function (layerName) {
  return '' + this._formIdPrefix + layerName;
};

proto.stop = function () {
  this.disableSidebar(false);
  this._isContentChild ? GUI.popContent() : GUI.closeContent();
  this.getEditingService().resetCurrentLayout();
};

module.exports = OpenTableTask;

},{"../../../g3w-editing-components/table":38,"./editingtask":101}],110:[function(require,module,exports){
var _pickfeaturesinteraction = require('../../../interactions/pickfeaturesinteraction');

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;

var EditingTask = require('./editingtask');

function PickFeatureTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._options = {
    highlight: options.highlight || false,
    multi: options.multi || false
  };
  this.pickFeatureInteraction = null;
  this._busy = false;
  this._tools = options.tools || [];
  base(this, options);
}

inherit(PickFeatureTask, EditingTask);

var proto = PickFeatureTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  var editingLayer = inputs.layer.getEditingLayer();

  this.pickFeatureInteraction = new _pickfeaturesinteraction.PickFeaturesInteraction({
    layer: editingLayer
  });

  this.addInteraction(this.pickFeatureInteraction);
  this.pickFeatureInteraction.on('picked', function (evt) {
    var features = evt.features,
        coordinate = evt.coordinate;

    if (inputs.features.length === 0) {
      inputs.features = features;
      inputs.coordinate = coordinate;
    }
    _this.setAndUnsetSelectedFeaturesStyle({
      promise: d
    });

    _this._steps && _this.setUserMessageStepDone('select');
    d.resolve(inputs);
  });

  return d.promise();
};

proto.stop = function () {
  this.removeInteraction(this.pickFeatureInteraction);
  this.pickFeatureInteraction = null;
  return true;
};

module.exports = PickFeatureTask;

},{"../../../interactions/pickfeaturesinteraction":40,"./editingtask":101}],111:[function(require,module,exports){
var _pickfeaturesinteraction = require('../../../interactions/pickfeaturesinteraction');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var PickCoordinatesInteraction = g3wsdk.ol.interactions.PickCoordinatesInteraction;
var DataRouterService = g3wsdk.core.data.DataRouterService;
var ProjectsRegistry = g3wsdk.core.project.ProjectsRegistry;
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var GUI = g3wsdk.gui.GUI;

var EditingTask = require('./editingtask');

function PickProjectLayerFeaturesTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var copyLayer = options.copyLayer,
      external = options.external,
      isVector = options.isVector;

  this.copyLayer = copyLayer;
  this.external = external;
  this.isVector = isVector;
  this.pickInteraction = null;
  base(this, options);
}

inherit(PickProjectLayerFeaturesTask, EditingTask);

var proto = PickProjectLayerFeaturesTask.prototype;

proto.run = function (inputs, context) {
  var d = $.Deferred();
  if (this.copyLayer) {
    this.getFeaturesFromLayer({
      inputs: inputs,
      promise: d
    });
  } else {
    //TO DO  Create a component that ask which project layer would like to query
  }
  return d.promise();
};

proto.getFeaturesFromLayer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var _this = this;

  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      inputs = _ref2.inputs,
      promise = _ref2.promise;

  var features, geometryType, interactionPromise;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          features = [];
          geometryType = inputs.layer.getGeometryType();
          interactionPromise = new Promise(function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resolve, reject) {
              var project;
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (_this.isVector) {
                        //In case of external layer
                        if (_this.external) {
                          _this.pickInteraction = new _pickfeaturesinteraction.PickFeaturesInteraction({
                            layer: _this.copyLayer
                          });
                          _this.addInteraction(_this.pickInteraction);
                          _this.pickInteraction.on('picked', function (evt) {
                            var _features = evt.features;

                            features = _this.convertFeaturesGeometryToGeometryTypeOfLayer({
                              features: _features,
                              geometryType: geometryType
                            });
                            resolve();
                          });
                        } else {
                          //In case of TOC/PROJECT layer
                          _this.pickInteraction = new PickCoordinatesInteraction();
                          _this.addInteraction(_this.pickInteraction);
                          project = ProjectsRegistry.getCurrentProject();

                          _this.pickInteraction.once('picked', function () {
                            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(evt) {
                              var coordinates, _ref5, _ref5$data, data;

                              return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      coordinates = evt.coordinate;
                                      _context.prev = 1;
                                      _context.next = 4;
                                      return DataRouterService.getData('query:coordinates', {
                                        inputs: {
                                          coordinates: coordinates,
                                          query_point_tolerance: project.getQueryPointTolerance(),
                                          layerIds: [_this.copyLayer.getId()],
                                          multilayers: false
                                        },
                                        outputs: null
                                      });

                                    case 4:
                                      _ref5 = _context.sent;
                                      _ref5$data = _ref5.data;
                                      data = _ref5$data === undefined ? [] : _ref5$data;

                                      if (data.length) {
                                        features = _this.convertFeaturesGeometryToGeometryTypeOfLayer({
                                          features: data[0].features,
                                          geometryType: geometryType
                                        });
                                      }
                                      _context.next = 13;
                                      break;

                                    case 10:
                                      _context.prev = 10;
                                      _context.t0 = _context['catch'](1);

                                      promise.reject(_context.t0);

                                    case 13:
                                      _context.prev = 13;

                                      resolve();
                                      return _context.finish(13);

                                    case 16:
                                    case 'end':
                                      return _context.stop();
                                  }
                                }
                              }, _callee, _this, [[1, 10, 13, 16]]);
                            }));

                            return function (_x5) {
                              return _ref4.apply(this, arguments);
                            };
                          }());
                        }
                      } else {
                        //TO DO NO VECTOR LAYER
                      }

                    case 1:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, _this);
            }));

            return function (_x3, _x4) {
              return _ref3.apply(this, arguments);
            };
          }());
          _context3.next = 5;
          return interactionPromise;

        case 5:
          if (features.length) {
            inputs.features = features;
            promise.resolve(inputs);
          } else {
            GUI.showUserMessage({
              type: 'warning',
              message: 'plugins.editing.messages.no_feature_selected',
              closable: false,
              autoclose: true
            });
            promise.reject();
          }

        case 6:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, this);
}));

proto.stop = function () {
  this.removeInteraction(this.pickInteraction);
  this.pickInteraction = null;
  return true;
};

module.exports = PickProjectLayerFeaturesTask;

},{"../../../interactions/pickfeaturesinteraction":40,"./editingtask":101}],112:[function(require,module,exports){
var ApplicationState = g3wsdk.core.ApplicationState;
var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var _g3wsdk$core$geoutils = g3wsdk.core.geoutils,
    isSameBaseGeometryType = _g3wsdk$core$geoutils.isSameBaseGeometryType,
    convertSingleMultiGeometry = _g3wsdk$core$geoutils.convertSingleMultiGeometry;
var Feature = g3wsdk.core.layer.features.Feature;
var PickFeatureInteraction = g3wsdk.ol.interactions.PickFeatureInteraction;

var EditingTask = require('./editingtask');

function SelectElementsTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this._type = options.type || 'bbox'; // 'single' 'bbox' 'multiple'
  this._selectInteractions = [];
  this.multipleselectfeatures = [];
  this._originalStyle;
  this._vectorLayer;
  base(this, options);
}

inherit(SelectElementsTask, EditingTask);

var proto = SelectElementsTask.prototype;

proto.addSingleSelectInteraction = function () {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref.layer,
      inputs = _ref.inputs,
      promise = _ref.promise,
      _ref$buttonnext = _ref.buttonnext,
      buttonnext = _ref$buttonnext === undefined ? false : _ref$buttonnext;

  var singleInteraction = new PickFeatureInteraction({
    layers: [layer.getEditingLayer()]
  });
  singleInteraction.on('picked', function (e) {
    var feature = e.feature;
    if (feature) {
      var features = [feature];
      inputs.features = features;
      if (!buttonnext) {
        _this._originalStyle = _this.setFeaturesSelectedStyle(features);
        _this._steps && _this.setUserMessageStepDone('select');
        promise.resolve(inputs);
      } else _this.addRemoveToMultipleSelectFeatures([feature], inputs);
    }
  });
  this._selectInteractions.push(singleInteraction);
  this.addInteraction(singleInteraction);
};

/**
 * Pick to add feature from external layer added to map
 * @param layer
 * @param inputs
 * @param promise
 * @param buttonnext
 */
proto.addExternalSelectInteraction = function () {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref2.layer,
      inputs = _ref2.inputs,
      promise = _ref2.promise,
      _ref2$buttonnext = _ref2.buttonnext,
      buttonnext = _ref2$buttonnext === undefined ? false : _ref2$buttonnext;

  var layerGeometryType = layer.getGeometryType();
  var layerId = layer.getId();
  var source = layer.getEditingLayer().getSource();

  var _getContext = this.getContext(),
      session = _getContext.session;
  // filter external layer only vector - Exclude WMS


  var layers = this.getMapService().getExternalLayers().filter(function (externaLayer) {
    var sameBaseGeometry = true;
    var type = externaLayer.getType();
    if (type === 'VECTOR') {
      var features = externaLayer.getSource().getFeatures();
      if (features.length) {
        var feature = features[0];
        var geometryType = feature.getGeometry().getType();
        sameBaseGeometry = isSameBaseGeometryType(geometryType, layerGeometryType);
      }
    }
    return sameBaseGeometry;
  });
  var singleInteraction = new PickFeatureInteraction({
    layers: layers
  });
  singleInteraction.on('picked', function (evt) {
    if (evt.feature) {
      var attributes = layer.getEditingFields();
      var geometry = evt.feature.getGeometry();
      geometry.getType() !== layerGeometryType && evt.feature.setGeometry(convertSingleMultiGeometry(geometry, layerGeometryType));
      var feature = new Feature({
        feature: evt.feature,
        properties: attributes.filter(function (attribute) {
          //set media attribute to null
          if (attribute.input.type === 'media') evt.feature.set(attribute.name, null);
          return !attribute.pk;
        }).map(function (property) {
          return property.name;
        })
      });

      feature.setTemporaryId();
      source.addFeature(feature);
      session.pushAdd(layerId, feature, false);
      var features = [feature];
      inputs.features = features;
      promise.resolve(inputs);
    } else promise.reject();
  });
  this._selectInteractions.push(singleInteraction);
  this.addInteraction(singleInteraction);
};

proto.addRemoveToMultipleSelectFeatures = function () {
  var _this2 = this;

  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var inputs = arguments[1];

  features.forEach(function (feature) {
    var selIndex = _this2.multipleselectfeatures.indexOf(feature);
    if (selIndex < 0) {
      _this2._originalStyle = _this2.setFeaturesSelectedStyle([feature]);
      _this2.multipleselectfeatures.push(feature);
    } else {
      _this2.multipleselectfeatures.splice(selIndex, 1);
      feature.setStyle(_this2._originalStyle);
    }
    inputs.features = _this2.multipleselectfeatures;
  });
  this._steps.select.buttonnext.disabled = this._steps.select.buttonnext.condition ? this._steps.select.buttonnext.condition({ features: this.multipleselectfeatures }) : this.multipleselectfeatures.length === 0;
  if (this._steps.select.dynamic !== undefined) this._steps.select.dynamic = this.multipleselectfeatures.length;
};

/**
 * Multiple interaction for select features
 * @param layer
 * @param inputs
 * @param promise
 * @param buttonnext
 */
proto.addMultipleSelectInteraction = function () {
  var _this3 = this;

  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      layer = _ref3.layer,
      inputs = _ref3.inputs,
      promise = _ref3.promise,
      _ref3$buttonnext = _ref3.buttonnext,
      buttonnext = _ref3$buttonnext === undefined ? false : _ref3$buttonnext;

  var selectInteractionMultiple = void 0;
  if (ApplicationState.ismobile) {
    var geometryFunction = ol.interaction.Draw.createBox();
    var source = new ol.source.Vector({});
    this._vectorLayer = new ol.layer.Vector({
      source: source
    });

    this.getMap().addLayer(this._vectorLayer);
    selectInteractionMultiple = new ol.interaction.Draw({
      type: 'Circle',
      source: source,
      geometryFunction: geometryFunction
    });

    selectInteractionMultiple.on('drawend', function (evt) {
      var feature = evt.feature;
      var bboxExtent = feature.getGeometry().getExtent();
      var layerSource = layer.getEditingLayer().getSource();
      var features = layerSource.getFeaturesInExtent(bboxExtent);
      if (!buttonnext) {
        if (!features.length) promise.reject();else {
          inputs.features = features;
          _this3._originalStyle = _this3.setFeaturesSelectedStyle(features);
          _this3._steps && _this3.setUserMessageStepDone('select');
          setTimeout(function () {
            promise.resolve(inputs);
          }, 500);
        }
      } else _this3.addRemoveToMultipleSelectFeatures(features, inputs);
    });
  } else {
    selectInteractionMultiple = new ol.interaction.DragBox({
      condition: ol.events.condition.shiftKeyOnly
    });
    selectInteractionMultiple.on('boxend', function (evt) {
      var features = [];
      var extent = selectInteractionMultiple.getGeometry().getExtent();
      var layerSource = layer.getEditingLayer().getSource();
      layerSource.forEachFeatureIntersectingExtent(extent, function (feature) {
        features.push(feature);
      });
      if (!buttonnext) {
        if (!features.length) promise.reject();else {
          inputs.features = features;
          _this3._originalStyle = _this3.setFeaturesSelectedStyle(features);
          _this3._steps && _this3.setUserMessageStepDone('select');
          promise.resolve(inputs);
        }
      } else _this3.addRemoveToMultipleSelectFeatures(features, inputs);
    });
  }
  this._selectInteractions.push(selectInteractionMultiple);
  this.addInteraction(selectInteractionMultiple);
};

proto.run = function (inputs, context, queques) {
  var _this4 = this;

  var layer = inputs.layer;
  var promise = $.Deferred();
  switch (this._type) {
    case 'single':
      this.addSingleSelectInteraction({ layer: layer, inputs: inputs, promise: promise });
      break;
    case 'multiple':
      var buttonnext = !!this._steps.select.buttonnext;
      if (buttonnext) this._steps.select.buttonnext.done = function () {
        promise.resolve(inputs);
      };
      this.addSingleSelectInteraction({ layer: layer, inputs: inputs, promise: promise, buttonnext: buttonnext });
      this.addMultipleSelectInteraction({ layer: layer, inputs: inputs, promise: promise, buttonnext: buttonnext });
      break;
    case 'bbox':
      this.addMultipleSelectInteraction({ layer: layer, inputs: inputs, promise: promise });
      break;
    case 'external':
      this.addExternalSelectInteraction({ layer: layer, inputs: inputs, promise: promise });
      break;
  }
  queques.micro.addTask(function () {
    inputs.features.forEach(function (feature) {
      return feature.setStyle(_this4._originalStyle);
    });
  });
  return promise.promise();
};

proto.stop = function () {
  var _this5 = this;

  this._selectInteractions.forEach(function (interaction) {
    return _this5.removeInteraction(interaction);
  });
  this._vectorLayer && this.getMap().removeLayer(this._vectorLayer);
  this._vectorLayer = null;
  this._originalStyle = null;
  this._selectInteractions = [];
  this.multipleselectfeatures = [];
};

module.exports = SelectElementsTask;

},{"./editingtask":101}],113:[function(require,module,exports){
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _g3wsdk$core$utils = g3wsdk.core.utils,
    base = _g3wsdk$core$utils.base,
    inherit = _g3wsdk$core$utils.inherit;
var splitFeatures = g3wsdk.core.geoutils.splitFeatures;
var Feature = g3wsdk.core.layer.features.Feature;
var GUI = g3wsdk.gui.GUI;

var EditingTask = require('./editingtask');

function SplitFeatureTask() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
}

inherit(SplitFeatureTask, EditingTask);

var proto = SplitFeatureTask.prototype;

proto.run = function (inputs, context) {
  var _this = this;

  var d = $.Deferred();
  var layer = inputs.layer,
      features = inputs.features;

  var source = layer.getEditingLayer().getSource();
  var session = context.session;
  this._snapIteraction = new ol.interaction.Snap({
    source: source,
    edge: true
  });

  this._drawInteraction = new ol.interaction.Draw({
    type: 'LineString',
    features: new ol.Collection(),
    freehandCondition: ol.events.condition.never
  });

  this._drawInteraction.on('drawend', function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(evt) {
      var splitfeature, isSplitted, splittedGeometries, splittedGeometriesLength, _loop, i;

      return regeneratorRuntime.wrap(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              splitfeature = evt.feature;
              isSplitted = false;
              splittedGeometries = splitFeatures({
                splitfeature: splitfeature,
                features: features
              });
              splittedGeometriesLength = splittedGeometries.length;
              _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(i) {
                var _splittedGeometries$i, uid, geometries, feature;

                return regeneratorRuntime.wrap(function _loop$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _splittedGeometries$i = splittedGeometries[i], uid = _splittedGeometries$i.uid, geometries = _splittedGeometries$i.geometries;

                        if (!(geometries.length > 1)) {
                          _context.next = 6;
                          break;
                        }

                        isSplitted = true;
                        feature = features.find(function (feature) {
                          return feature.getUid() === uid;
                        });
                        _context.next = 6;
                        return _this._handleSplitFeature({
                          feature: feature,
                          splittedGeometries: geometries,
                          inputs: inputs,
                          session: session
                        });

                      case 6:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _loop, _this);
              });
              i = 0;

            case 6:
              if (!(i < splittedGeometriesLength)) {
                _context2.next = 11;
                break;
              }

              return _context2.delegateYield(_loop(i), 't0', 8);

            case 8:
              i++;
              _context2.next = 6;
              break;

            case 11:

              if (isSplitted) {
                GUI.showUserMessage({
                  type: 'success',
                  message: 'plugins.editing.messages.splitted',
                  autoclose: true
                });

                d.resolve(inputs);
              } else {
                GUI.showUserMessage({
                  type: 'warning',
                  message: 'plugins.editing.messages.nosplittedfeature',
                  autoclose: true
                });
                d.reject();
              }

            case 12:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x2) {
      return _ref.apply(this, arguments);
    };
  }());
  this.addInteraction(this._drawInteraction);
  this.addInteraction(this._snapIteraction);
  return d.promise();
};

proto._handleSplitFeature = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      feature = _ref3.feature,
      inputs = _ref3.inputs,
      session = _ref3.session,
      _ref3$splittedGeometr = _ref3.splittedGeometries,
      splittedGeometries = _ref3$splittedGeometr === undefined ? [] : _ref3$splittedGeometr;

  var newFeatures, layer, source, layerId, oriFeature, splittedGeometriesLength, index, splittedGeometry, newFeature;
  return regeneratorRuntime.wrap(function _callee2$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          newFeatures = [];
          layer = inputs.layer;
          source = layer.getEditingLayer().getSource();
          layerId = layer.getId();
          oriFeature = feature.clone();

          inputs.features = splittedGeometries.length ? [] : inputs.features;
          splittedGeometriesLength = splittedGeometries.length;
          index = 0;

        case 8:
          if (!(index < splittedGeometriesLength)) {
            _context3.next = 40;
            break;
          }

          splittedGeometry = splittedGeometries[index];

          if (!(index === 0)) {
            _context3.next = 22;
            break;
          }

          /**
           * check geometry evaluated expression
           */
          feature.setGeometry(splittedGeometry);
          _context3.prev = 12;
          _context3.next = 15;
          return this.evaluateGeometryExpressionField({
            inputs: inputs,
            context: context,
            feature: feature
          });

        case 15:
          _context3.next = 19;
          break;

        case 17:
          _context3.prev = 17;
          _context3.t0 = _context3['catch'](12);

        case 19:

          session.pushUpdate(layerId, feature, oriFeature);

          _context3.next = 36;
          break;

        case 22:
          newFeature = oriFeature.cloneNew();

          newFeature.setGeometry(splittedGeometry);

          this.setNullMediaFields({
            layer: layer,
            feature: newFeature
          });

          feature = new Feature({
            feature: newFeature
          });

          feature.setTemporaryId();
          source.addFeature(feature);
          /**
           * * evaluate geometry expression
          */
          _context3.prev = 28;
          _context3.next = 31;
          return this.evaluateGeometryExpressionField({
            inputs: inputs,
            context: context,
            feature: feature
          });

        case 31:
          _context3.next = 35;
          break;

        case 33:
          _context3.prev = 33;
          _context3.t1 = _context3['catch'](28);

        case 35:

          newFeatures.push(session.pushAdd(layerId, feature));

        case 36:
          inputs.features.push(feature);

        case 37:
          index++;
          _context3.next = 8;
          break;

        case 40:
          return _context3.abrupt('return', newFeatures);

        case 41:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee2, this, [[12, 17], [28, 33]]);
}));

proto.stop = function () {
  this.removeInteraction(this._drawInteraction);
  this.removeInteraction(this._snapIteraction);
  this._drawInteraction = null;
  this._snapIteraction = null;
};

module.exports = SplitFeatureTask;

},{"./editingtask":101}]},{},[39])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuY29tbW9uLmRldi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5jb21tb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuY29tbW9uLnByb2QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlaWZ5L2xpYi9pbnNlcnQtY3NzLmpzIiwiYXBpL2luZGV4LmpzIiwiY29tcG9uZW50cy9DaG9vc2VGZWF0dXJlVG9FZGl0LnZ1ZT81MDE4ODA3ZSIsImNvbXBvbmVudHMvQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJzLnZ1ZT80N2EwZmQ1OCIsImNvbXBvbmVudHMvQ29weUZlYXR1cmVzRnJvbU90aGVyUHJvamVjdExheWVyLnZ1ZT9kZTQ5ODY2MiIsImNvbXBvbmVudHMvRWRpdGluZy52dWU/ZGIzYmQ3YjgiLCJjb21wb25lbnRzL0Zvcm1SZWxhdGlvbi52dWU/MDUzMzU1ZGYiLCJjb21wb25lbnRzL1NhdmVBbGwudnVlPzUyMjcyNDQwIiwiY29tcG9uZW50cy9TZWxlY3RFZGl0aW5nTGF5ZXJzLnZ1ZT9jM2FiYzNhZSIsImNvbXBvbmVudHMvVGFibGUudnVlPzQ4NDM1NDlmIiwiY29tcG9uZW50cy9Ub29sLnZ1ZT82M2E1OGM1OCIsImNvbXBvbmVudHMvVG9vbGJveC52dWU/NzBkYTJkZWEiLCJjb21wb25lbnRzL1Rvb2xzT2ZUb29sLnZ1ZT8zYWY5MDA3NiIsImNvbXBvbmVudHMvVG9vbHNPZlRvb2xNZWFzdXJlLnZ1ZT85ZDEwYTJkMiIsImNvbXBvbmVudHMvVG9vbHNPZlRvb2xTbmFwLnZ1ZT83ZWZhMjczNiIsImNvbmZpZy9pMThuL2RlLmpzIiwiY29uZmlnL2kxOG4vZW4uanMiLCJjb25maWcvaTE4bi9maS5qcyIsImNvbmZpZy9pMThuL2ZyLmpzIiwiY29uZmlnL2kxOG4vaW5kZXguanMiLCJjb25maWcvaTE4bi9pdC5qcyIsImNvbmZpZy9pMThuL3JvLmpzIiwiY29uZmlnL2kxOG4vc2UuanMiLCJjb25maWcvaW5kZXguanMiLCJmb3JtL2VkaXRpbmdmb3JtLmpzIiwiZm9ybS9lZGl0aW5nZm9ybXNlcnZpY2UuanMiLCJnM3ctZWRpdGluZy1jb21wb25lbnRzL2Nob29zZWZlYXR1cmV0b2VkaXQuanMiLCJnM3ctZWRpdGluZy1jb21wb25lbnRzL2VkaXRpbmcuanMiLCJnM3ctZWRpdGluZy1jb21wb25lbnRzL3NlbGVjdGNvcHlvdGhlcmxheWVyc2ZlYXR1cmVzLmpzIiwiZzN3LWVkaXRpbmctY29tcG9uZW50cy9zZWxlY3Rjb3B5b3RoZXJwcm9qZWN0bGF5ZXJmZWF0dXJlcy5qcyIsImczdy1lZGl0aW5nLWNvbXBvbmVudHMvc2VsZWN0bWVyZ2VmZWF0dXJlcy5qcyIsImczdy1lZGl0aW5nLWNvbXBvbmVudHMvdGFibGUuanMiLCJpbmRleC5qcyIsImludGVyYWN0aW9ucy9waWNrZmVhdHVyZXNpbnRlcmFjdGlvbi5qcyIsInBhbmVsLmpzIiwic2VydmljZXMvZWRpdGluZ3NlcnZpY2UuanMiLCJzZXJ2aWNlcy9yZWxhdGlvbnNlcnZpY2UuanMiLCJzZXJ2aWNlcy90YWJsZXNlcnZpY2UuanMiLCJ0b29sYm94ZXMvdG9vbC5qcyIsInRvb2xib3hlcy90b29sYm94LmpzIiwidG9vbGJveGVzL3Rvb2xib3hlc2ZhY3RvcnkuanMiLCJ0b29sYm94ZXMvdG9vbHNmYWN0b3J5LmpzIiwid29ya2Zsb3dzL2FkZGZlYXR1cmVmcm9tbWFwdmVjdG9ybGF5ZXJzd29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvYWRkZmVhdHVyZXdvcmtmbG93LmpzIiwid29ya2Zsb3dzL2FkZHBhcnR0b211bHRpZ2VvbWV0cmllc3dvcmtmbG93LmpzIiwid29ya2Zsb3dzL2FkZHRhYmxlZmVhdHVyZXdvcmtmbG93LmpzIiwid29ya2Zsb3dzL2NvbW1pdGZlYXR1cmVzd29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvY29weWZlYXR1cmVzZnJvbW90aGVybGF5ZXJ3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9jb3B5ZmVhdHVyZXN3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9kZWxldGVmZWF0dXJld29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvZGVsZXRlcGFydGZyb21tdWx0aWdlb21ldHJpZXN3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9lZGl0ZmVhdHVyZWF0dHJpYnV0ZXN3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9lZGl0aW5nd29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvZWRpdG11bHRpZmVhdHVyZWF0dHJpYnV0ZXN3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9lZGl0bm9waWNrbWFwZmVhdHVyZWF0dHJpYnV0ZXN3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9lZGl0dGFibGVmZWF0dXJld29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvZWRpdHRhYmxld29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvbGlua3JlbGF0aW9ud29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvbWVyZ2VmZWF0dXJlc3dvcmtmbG93LmpzIiwid29ya2Zsb3dzL21vZGlmeWdlb21ldHJ5dmVydGV4d29ya2Zsb3cuanMiLCJ3b3JrZmxvd3MvbW92ZWZlYXR1cmV3b3JrZmxvdy5qcyIsIndvcmtmbG93cy9zZWxlY3RhbmRjb3B5ZmVhdHVyZXNmcm9tb3RoZXJsYXllcndvcmtmbG93LmpzIiwid29ya2Zsb3dzL3NwbGl0ZmVhdHVyZXdvcmtmbG93LmpzIiwid29ya2Zsb3dzL3N0ZXBzL2FkZGZlYXR1cmVzdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL2FkZHBhcnR0b211bHRpZ2VvbWV0cmllc3N0ZXAuanMiLCJ3b3JrZmxvd3Mvc3RlcHMvYWRkdGFibGVmZWF0dXJlc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9jaG9vc2VmZWF0dXJlc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9jb25maXJtc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9jb3B5ZmVhdHVyZXNmcm9tb3RoZXJsYXllcnN0ZXAuanMiLCJ3b3JrZmxvd3Mvc3RlcHMvY29weWZlYXR1cmVzZnJvbW90aGVycHJvamVjdGxheWVyc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9kZWxldGVmZWF0dXJlc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9kZWxldGVwYXJ0ZnJvbW11bHRpZ2VvbWV0cmllc3N0ZXAuanMiLCJ3b3JrZmxvd3Mvc3RlcHMvZWRpdGluZ3N0ZXAuanMiLCJ3b3JrZmxvd3Mvc3RlcHMvZ2V0dmVydGV4c3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9saW5rcmVsYXRpb25zdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL21lcmdlZmVhdHVyZXNzdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL21vZGlmeWdlb21ldHJ5dmVydGV4c3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9tb3ZlZmVhdHVyZXN0ZXAuanMiLCJ3b3JrZmxvd3Mvc3RlcHMvbW92ZWxlbWVudHNzdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL29wZW5mb3Jtc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9vcGVudGFibGVzdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3BpY2tmZWF0dXJlc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9waWNrcHJvamVjdGxheWVyZmVhdHVyZXNzdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3NlbGVjdGVsZW1lbnRzc3RlcC5qcyIsIndvcmtmbG93cy9zdGVwcy9zcGxpdGZlYXR1cmVzdGVwLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL2FkZGZlYXR1cmV0YWJsZXRhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3MvYWRkZmVhdHVyZXRhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3MvYWRkcGFydHRvbXVsdGlnZW9tZXRyaWVzdGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9jaG9vc2VmZWF0dXJldGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9jb25maXJtdGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9jb3B5ZmVhdHVyZXNmcm9tb3RoZXJsYXllcnRhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3MvY29weWZlYXR1cmVzZnJvbW90aGVycHJvamVjdGxheWVydGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9kZWxldGVmZWF0dXJldGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9kZWxldGVwYXJ0ZnJvbW11bHRpZ2VvbWV0cmllc3Rhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3MvZWRpdGluZ3Rhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3MvZ2V0dmVydGV4dGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9saW5rcmVsYXRpb250YXNrLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL21lcmdlZmVhdHVyZXN0YXNrLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL21vZGlmeWdlb21ldHJ5dmVydGV4dGFzay5qcyIsIndvcmtmbG93cy9zdGVwcy90YXNrcy9tb3ZlZWxlbWVudHN0YXNrLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL21vdmVmZWF0dXJldHRhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3Mvb3BlbmZvcm10YXNrLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL29wZW50YWJsZXRhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3MvcGlja2ZlYXR1cmV0YXNrLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL3BpY2twcm9qZWN0bGF5ZXJmZWF0dXJlc3Rhc2suanMiLCJ3b3JrZmxvd3Mvc3RlcHMvdGFza3Mvc2VsZWN0ZWxlbWVudHN0YXNrLmpzIiwid29ya2Zsb3dzL3N0ZXBzL3Rhc2tzL3NwbGl0ZmVhdHVyZXRhc2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2pSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdnVRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDK0JBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFGQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFHQTtBQUFBO0FBQ0E7QUF4QkE7QUEwQkE7QUFDQTtBQUNBO0FBbkNBOzs7OztBQTlCQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7O0FBQ0E7QUFDQTtBQUFBOztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFGQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUdBO0FBQUE7QUFDQTtBQWxCQTtBQW9CQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBN0JBOzs7OztBQTFCQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNzQ0E7Ozs7QUFDQTs7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTVFQTtBQThFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBeElBOzs7OztBQXhDQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3lGQTs7O0FBRUE7Ozs7Ozs7O0FBSUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBWkE7QUFjQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQTRDQTtBQTVDQTtBQUFBOztBQUFBO0FBOENBO0FBOUNBO0FBQUE7O0FBQUE7QUErQ0E7O0FBL0NBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBaURBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFBQTs7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhJQTtBQWtJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFsTkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBbU5BO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBTkE7QUFRQTtBQUNBO0FBaE9BO0FBQUE7O0FBQUE7QUFrT0E7QUFDQTs7QUFuT0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFzT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE1T0E7Ozs7O0FBakdBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDV0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBREE7QUFKQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBR0E7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUF4QkE7QUEwQkE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQXhEQTs7Ozs7QUFkQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVUE7OztBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOztBQUNBO0FBQ0E7QUFDQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBWkE7QUFiQTs7OztBQVpBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDb0RBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7QUFDQTtBQUNBO0FBREE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFHQTtBQUFBO0FBQUE7O0FBSEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFLQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFSQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7O0FBU0E7QUFDQTs7QUF4QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUEyQkE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMUNBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQTJDQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQTVDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQWlEQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUFBOztBQUFBO0FBSUE7QUFKQTtBQUFBOztBQUFBO0FBTUE7O0FBTkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVVBO0FBQ0E7QUF0RkE7QUF3RkE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUEzR0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUE2R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFqSEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFtSEE7QUFDQTtBQUNBO0FBQ0E7QUF0SEE7Ozs7O0FBbkRBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUpBO0FBTkE7Ozs7O0FBUEE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNtREE7Ozs7QUFDQTs7Ozs7Ozs7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTs7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbEJBO0FBb0JBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBO0FBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBOURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBZ0VBOztBQWhFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFvRUE7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBR0E7O0FBSEE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQXBFQTs7OztBQXZEQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2FBOzs7O0FBQ0E7Ozs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFUQTs7Ozs7QUFoQkE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBZkE7Ozs7QUFWQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNtQkE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQTdCQTtBQStCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQWFBO0FBQUE7O0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFQQTs7QUFVQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuSEE7Ozs7QUF0QkE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQ0plO0FBQ2IsVUFBUTtBQUNOLGVBQVcsb0VBREw7QUFFTixpQkFBYTtBQUZQLEdBREs7QUFLYixVQUFRLE9BTEs7QUFNYixtQkFBaUIsdUJBTko7QUFPYixnQkFBYyxrQkFQRDtBQVFiLHNCQUFvQixzQkFSUDtBQVNiLGFBQVcsWUFURTtBQVViLGlCQUFlLHFCQVZGO0FBV2IscUJBQW1CLHNCQVhOO0FBWWIsc0JBQW9CLDJCQVpQO0FBYWIsaUJBQWUsZ0JBYkY7QUFjYiwwQkFBd0IsOEJBZFg7QUFlYiw2QkFBMkIsK0JBZmQ7QUFnQmIsV0FBUztBQUNQLGdCQUFZO0FBREwsR0FoQkk7QUFtQmIsV0FBUztBQUNQLFdBQU87QUFEQSxHQW5CSTtBQXNCYixTQUFPO0FBQ0wsVUFBTSxvQkFERDtBQUVMLFVBQU0saUJBRkQ7QUFHTCxZQUFRO0FBSEgsR0F0Qk07QUEyQmIsU0FBTztBQUNMLFVBQU0sbUJBREQ7QUFFTCxrQ0FBOEIsaUNBRnpCO0FBR0wsYUFBUyw4QkFISjtBQUlMLGdCQUFZLDRCQUpQO0FBS0wsV0FBTyxrQkFMRjtBQU1MLFdBQU8saUJBTkY7QUFPTCxpQkFBYSxvQkFQUjtBQVFMLG9CQUFnQixpQkFSWDtBQVNMLGtCQUFjLHFCQVRUO0FBVUwsbUJBQWUsOEJBVlY7QUFXTCxvQkFBZ0IsZ0NBWFg7QUFZTCwyQkFBdUIsK0NBWmxCO0FBYUwsa0NBQThCO0FBYnpCLEdBM0JNO0FBMENiLGVBQWE7QUFDWCxhQUFTLGtCQURFO0FBRVgsVUFBTSxZQUZLO0FBR1gsYUFBUztBQUhFLEdBMUNBO0FBK0NiLFNBQU87QUFDTCxVQUFNO0FBQ0osdUJBQWlCLG9CQURiO0FBRUosc0JBQWdCLG1CQUZaO0FBR0osWUFBTSxnREFIRjtBQUlKLGFBQU8sbUJBSkg7QUFLSixhQUFPLGlCQUxIO0FBTUosV0FBSyx5QkFORDtBQU9KLGtCQUFZLGlDQVBSO0FBUUosd0JBQWtCLDRCQVJkO0FBU0osc0JBQWdCLG1CQVRaO0FBVUosMkJBQXFCLCtDQVZqQjtBQVdKLDJCQUFxQixzRUFYakI7QUFZSixZQUFNLGtDQVpGO0FBYUosa0NBQTRCLG1EQWJ4QjtBQWNKLDhCQUF5Qix5REFkckI7QUFlSixvQkFBYyw4Q0FmVjtBQWdCSixpQ0FBMkI7QUFoQnZCO0FBREQsR0EvQ007QUFtRWIsWUFBVTtBQUNSLFdBQU87QUFDTCxjQUFRLHVDQURIO0FBRUwsaUJBQVcscUJBRk47QUFHTCxhQUFPLGdDQUhGO0FBSUwsbUJBQWEsaUVBSlI7QUFLTCxxQkFBZSw0RkFMVjtBQU1MLG9DQUE4Qix1R0FOekI7QUFPTCxtQkFBYSx1Q0FQUjtBQVFMLHdCQUFrQiwrR0FSYjtBQVNMLDZCQUF1QixrR0FUbEI7QUFVTCw0Q0FBc0Msa0dBVmpDO0FBV0wsZ0JBQVUsMkNBWEw7QUFZTCx5QkFBbUIsb0RBWmQ7QUFhTCxxQkFBZSwrRUFiVjtBQWNMLHVCQUFpQjtBQWRaO0FBREMsR0FuRUc7QUFxRmIsWUFBVTtBQUNSLDZCQUF5Qiw2R0FEakI7QUFFUixjQUFVLFVBRkY7QUFHUix1QkFBbUIsd0JBSFg7QUFJUixlQUFXLGdCQUpIO0FBS1IsWUFBUSx5RUFMQTtBQU1SLGFBQVMsbURBTkQ7QUFPUixvQkFBZ0IsK0NBUFI7QUFRUiw4QkFBMEIsK0pBUmxCO0FBU1IscUJBQWlCLHlDQVRUO0FBVVIsb0JBQWdCLHVCQVZSO0FBV1IsNkJBQXlCLGdHQVhqQjtBQVlSLFdBQU8sK0JBWkM7QUFhUixpQkFBWSxxQ0FiSjtBQWNSLGtCQUFjLGFBZE47QUFlUixZQUFRLDRDQWZBO0FBZ0JSLGlCQUFhO0FBQ1gsc0JBQWdCO0FBREwsS0FoQkw7QUFtQlIsU0FBSyx5REFuQkc7QUFvQlIsWUFBUTtBQUNOLGNBQVEsNERBREY7QUFFTixrQkFBWSxvRUFGTjtBQUdOLDRCQUFzQix5RUFIaEI7QUFJTixXQUFLLDBCQUpDO0FBS04sY0FBUSxjQUxGO0FBTU4sY0FBUTtBQU5GLEtBcEJBO0FBNEJSLHdCQUFvQiw4Q0E1Qlo7QUE2QlIsc0RBQWtELHlGQTdCMUM7QUE4QlIseUJBQXFCO0FBOUJiLEdBckZHO0FBcUhiLFlBQVU7QUFDUixXQUFPO0FBQ0w7QUFESztBQURDLEdBckhHO0FBZ0liLFFBQU07QUFDSixlQUFXO0FBQ1QsZ0JBQVU7QUFDUix3QkFBZSxtQ0FEUDtBQUVSLHNCQUFjLHdDQUZOO0FBR1IsdUJBQWUsNENBSFA7QUFJUiw2QkFBcUIseUJBSmI7QUFLUix5QkFBaUI7QUFMVDtBQURELEtBRFA7QUFVSixhQUFTO0FBQ1AsWUFBTSx5QkFEQztBQUVQLHFCQUFlLHNCQUZSO0FBR1AsY0FBUTtBQUhEO0FBVkwsR0FoSU87QUFnSmIsU0FBTztBQUNMLFdBQU87QUFDTCxpQ0FBMkI7QUFDekIsZUFBTztBQURrQixPQUR0QjtBQUlMLG1DQUE2QjtBQUMzQixlQUFPO0FBRG9CO0FBSnhCO0FBREY7QUFoSk0sQzs7Ozs7O2tCQ0FBO0FBQ2IsVUFBUTtBQUNOLGVBQVcsa0RBREw7QUFFTixpQkFBYTtBQUZQLEdBREs7QUFLYixVQUFRLFFBTEs7QUFNYixtQkFBaUIsaUJBTko7QUFPYixnQkFBYyxnQkFQRDtBQVFiLHNCQUFvQixvQkFSUDtBQVNiLGFBQVcsV0FURTtBQVViLGlCQUFlLGVBVkY7QUFXYixxQkFBbUIsbUJBWE47QUFZYixzQkFBb0Isb0JBWlA7QUFhYixpQkFBZSxlQWJGO0FBY2IsMEJBQXdCLHdCQWRYO0FBZWIsNkJBQTJCLDRCQWZkO0FBZ0JiLFdBQVM7QUFDUCxnQkFBWTtBQURMLEdBaEJJO0FBbUJiLFdBQVM7QUFDUCxXQUFPO0FBREEsR0FuQkk7QUFzQmIsU0FBTztBQUNMLFVBQU0sY0FERDtBQUVMLFVBQU0sZUFGRDtBQUdMLFlBQVE7QUFISCxHQXRCTTtBQTJCYixTQUFPO0FBQ0wsVUFBTSxlQUREO0FBRUwsa0NBQThCLGlDQUZ6QjtBQUdMLGFBQVMsdUJBSEo7QUFJTCxnQkFBWSw0QkFKUDtBQUtMLFdBQU8sbUJBTEY7QUFNTCxXQUFPLGVBTkY7QUFPTCxpQkFBYSxhQVBSO0FBUUwsb0JBQWdCLGdCQVJYO0FBU0wsa0JBQWMsY0FUVDtBQVVMLG1CQUFlLHVCQVZWO0FBV0wsb0JBQWdCLDBCQVhYO0FBWUwsMkJBQXVCLHdDQVpsQjtBQWFMLGtDQUE4QjtBQWJ6QixHQTNCTTtBQTBDYixlQUFhO0FBQ1gsYUFBUyxjQURFO0FBRVgsVUFBTSxZQUZLO0FBR1gsYUFBUztBQUhFLEdBMUNBO0FBK0NiLFNBQU87QUFDTCxVQUFNO0FBQ0osdUJBQWlCLGlCQURiO0FBRUosc0JBQWdCLGdCQUZaO0FBR0osWUFBTSxzQ0FIRjtBQUlKLGFBQU8sbUJBSkg7QUFLSixhQUFPLGVBTEg7QUFNSixXQUFLLG9CQU5EO0FBT0osa0JBQVkscUJBUFI7QUFRSix3QkFBa0IscUJBUmQ7QUFTSixzQkFBZ0IsZ0JBVFo7QUFVSiwyQkFBcUIsaUNBVmpCO0FBV0osMkJBQXFCLDRDQVhqQjtBQVlKLFlBQU0sdUJBWkY7QUFhSixrQ0FBNEIsdUNBYnhCO0FBY0osOEJBQXlCLHNDQWRyQjtBQWVKLG9CQUFjLGlDQWZWO0FBZ0JKLGlDQUEyQjtBQWhCdkI7QUFERCxHQS9DTTtBQW1FYixZQUFVO0FBQ1IsV0FBTztBQUNMLGNBQVEsNEJBREg7QUFFTCxpQkFBVyxlQUZOO0FBR0wsYUFBTyw4QkFIRjtBQUlMLG1CQUFhLG9EQUpSO0FBS0wscUJBQWUsc0VBTFY7QUFNTCxvQ0FBOEIsK0VBTnpCO0FBT0wsbUJBQWEsNEJBUFI7QUFRTCx3QkFBa0IsNEZBUmI7QUFTTCw2QkFBdUIsd0VBVGxCO0FBVUwsNENBQXNDLG1GQVZqQztBQVdMLGdCQUFVLHFDQVhMO0FBWUwseUJBQW1CLDZDQVpkO0FBYUwscUJBQWUsb0RBYlY7QUFjTCx1QkFBaUI7QUFkWjtBQURDLEdBbkVHO0FBcUZiLFlBQVU7QUFDUiw2QkFBeUIsMkVBRGpCO0FBRVIsY0FBVSxVQUZGO0FBR1IsdUJBQW1CLHFCQUhYO0FBSVIsZUFBVyxtQkFKSDtBQUtSLFlBQVEsd0RBTEE7QUFNUixhQUFTLGdEQU5EO0FBT1Isb0JBQWdCLHVDQVBSO0FBUVIsOEJBQTBCLG9JQVJsQjtBQVNSLHFCQUFpQiw4QkFUVDtBQVVSLG9CQUFnQixpQ0FWUjtBQVdSLDZCQUF5QixvRkFYakI7QUFZUixXQUFPLHlCQVpDO0FBYVIsaUJBQVksaUNBYko7QUFjUixrQkFBYyxjQWROO0FBZVIsWUFBUSw4QkFmQTtBQWdCUixpQkFBYTtBQUNYLHNCQUFnQjtBQURMLEtBaEJMO0FBbUJSLFNBQUssb0RBbkJHO0FBb0JSLFlBQVE7QUFDTixjQUFRLGdEQURGO0FBRU4sa0JBQVksZ0RBRk47QUFHTiw0QkFBc0IsaUVBSGhCO0FBSU4sV0FBSyxvQkFKQztBQUtOLGNBQVEsYUFMRjtBQU1OLGNBQVE7QUFORixLQXBCQTtBQTRCUix3QkFBb0Isc0NBNUJaO0FBNkJSLHNEQUFrRCxzRkE3QjFDO0FBOEJSLHlCQUFxQjtBQTlCYixHQXJGRztBQXFIYixZQUFVO0FBQ1IsV0FBTztBQUNMO0FBREs7QUFEQyxHQXJIRztBQWdJYixRQUFNO0FBQ0osZUFBVztBQUNULGdCQUFVO0FBQ1Isd0JBQWUscUJBRFA7QUFFUixzQkFBYyw4QkFGTjtBQUdSLHVCQUFlLGlDQUhQO0FBSVIsNkJBQXFCLHFCQUpiO0FBS1IseUJBQWlCO0FBTFQ7QUFERCxLQURQO0FBVUosYUFBUztBQUNQLFlBQU0sZUFEQztBQUVQLHFCQUFlLGVBRlI7QUFHUCxjQUFRO0FBSEQ7QUFWTCxHQWhJTztBQWdKYixTQUFPO0FBQ0wsV0FBTztBQUNMLGlDQUEyQjtBQUN6QixlQUFPO0FBRGtCLE9BRHRCO0FBSUwsbUNBQTZCO0FBQzNCLGVBQU87QUFEb0I7QUFKeEI7QUFERjtBQWhKTSxDOzs7Ozs7a0JDQUE7QUFDYixVQUFRO0FBQ04sZUFBVyxvREFETDtBQUVOLGlCQUFhO0FBRlAsR0FESztBQUtiLFVBQVEsTUFMSztBQU1iLG1CQUFpQixpQkFOSjtBQU9iLGdCQUFjLGtCQVBEO0FBUWIsc0JBQW9CLHlCQVJQO0FBU2IsYUFBVyxXQVRFO0FBVWIsaUJBQWUsb0JBVkY7QUFXYixxQkFBbUIsdUJBWE47QUFZYixzQkFBb0IseUJBWlA7QUFhYixpQkFBZSxrQkFiRjtBQWNiLDBCQUF3Qix3QkFkWDtBQWViLDZCQUEyQixpQ0FmZDtBQWdCYixXQUFTO0FBQ1AsZ0JBQVk7QUFETCxHQWhCSTtBQW1CYixXQUFTO0FBQ1AsV0FBTztBQURBLEdBbkJJO0FBc0JiLFNBQU87QUFDTCxVQUFNLHNCQUREO0FBRUwsVUFBTSxXQUZEO0FBR0wsWUFBUTtBQUhILEdBdEJNO0FBMkJiLFNBQU87QUFDTCxVQUFNLHFCQUREO0FBRUwsa0NBQThCLGlDQUZ6QjtBQUdMLGFBQVMsV0FISjtBQUlMLGdCQUFZLFlBSlA7QUFLTCxXQUFPLHNCQUxGO0FBTUwsV0FBTyxvQkFORjtBQU9MLGlCQUFhLGtCQVBSO0FBUUwsb0JBQWdCLG1CQVJYO0FBU0wsa0JBQWMscUJBVFQ7QUFVTCxtQkFBZSw4QkFWVjtBQVdMLG9CQUFnQixvQkFYWDtBQVlMLGtDQUE4QjtBQVp6QixHQTNCTTtBQXlDYixlQUFhO0FBQ1gsYUFBUyxjQURFO0FBRVgsVUFBTSxZQUZLO0FBR1gsYUFBUztBQUhFLEdBekNBO0FBOENiLFNBQU87QUFDTCxVQUFNO0FBQ0osdUJBQWlCLHNCQURiO0FBRUosc0JBQWdCLG9CQUZaO0FBR0osWUFBTSxzQ0FIRjtBQUlKLGFBQU8sc0JBSkg7QUFLSixhQUFPLG9CQUxIO0FBTUosV0FBSyxxQkFORDtBQU9KLGtCQUFZLDRCQVBSO0FBUUosd0JBQWtCLDRCQVJkO0FBU0osc0JBQWdCLGtCQVRaO0FBVUosMkJBQXFCLHlDQVZqQjtBQVdKLDJCQUFxQix3REFYakI7QUFZSixZQUFNLDJCQVpGO0FBYUosa0NBQTRCLGtCQWJ4QjtBQWNKLDhCQUF5QixtREFkckI7QUFlSixvQkFBYyx3Q0FmVjtBQWdCSixpQ0FBMkI7QUFoQnZCO0FBREQsR0E5Q007QUFrRWIsWUFBVTtBQUNSLFdBQU87QUFDTCxjQUFRLG9CQURIO0FBRUwsaUJBQVcsaUJBRk47QUFHTCxhQUFPLGtDQUhGO0FBSUwsbUJBQWEsZ0VBSlIsRUFJMkU7QUFDaEYscUJBQWUsb0RBTFYsRUFLZ0U7QUFDckUsb0NBQThCLGdFQU56QjtBQU9MLG1CQUFhLG9CQVBSO0FBUUwsd0JBQWtCLHlHQVJiO0FBU0wsNkJBQXVCLHlHQVRsQjtBQVVMLDRDQUFzQyxxSEFWakM7QUFXTCxnQkFBVSw2Q0FYTCxFQVdxRDtBQUMxRCx5QkFBbUIsNkNBWmQ7QUFhTCxxQkFBZSxtREFiVjtBQWNMLHVCQUFpQjtBQWRaO0FBREMsR0FsRUc7QUFvRmIsWUFBVTtBQUNSLDZCQUF5QiwwQ0FEakI7QUFFUixjQUFVLFFBRkY7QUFHUix1QkFBbUIsd0JBSFg7QUFJUixlQUFXLHVCQUpIO0FBS1IsWUFBUSwrREFMQTtBQU1SLGFBQVMsNERBTkQ7QUFPUixvQkFBZ0Isd0NBUFI7QUFRUiw4QkFBMEIsNklBUmxCO0FBU1IscUJBQWlCLDZCQVRUO0FBVVIsb0JBQWdCLDJCQVZSO0FBV1IsNkJBQXlCLDRGQVhqQjtBQVlSLFdBQU8sa0NBWkM7QUFhUixpQkFBWSxvREFiSjtBQWNSLGtCQUFjLGtCQWROO0FBZVIsWUFBUSw4QkFmQTtBQWdCUixpQkFBYTtBQUNYLHNCQUFnQjtBQURMLEtBaEJMO0FBbUJSLFNBQUssdURBbkJHO0FBb0JSLFlBQVE7QUFDTixjQUFRLDZDQURGO0FBRU4sa0JBQVksMERBRk47QUFHTiw0QkFBc0IsdUVBSGhCO0FBSU4sV0FBSywwQkFKQztBQUtOLGNBQVEsZUFMRjtBQU1OLGNBQVE7QUFORixLQXBCQTtBQTRCUix3QkFBb0Isc0NBNUJaO0FBNkJSLHNEQUFrRCxzRkE3QjFDO0FBOEJSLHlCQUFxQjtBQTlCYixHQXBGRztBQW9IYixZQUFVO0FBQ1IsV0FBTztBQUNMO0FBREs7QUFEQyxHQXBIRztBQStIYixRQUFNO0FBQ0osZUFBVztBQUNULGdCQUFVO0FBQ1Isd0JBQWUscUJBRFA7QUFFUixzQkFBYyw4QkFGTjtBQUdSLHVCQUFlLG9DQUhQO0FBSVIsNkJBQXFCLHdCQUpiO0FBS1IseUJBQWlCO0FBTFQ7QUFERCxLQURQO0FBVUosYUFBUztBQUNQLFlBQU0sb0JBREM7QUFFUCxxQkFBZSxtQkFGUjtBQUdQLGNBQVE7QUFIRDtBQVZMLEdBL0hPO0FBK0liLFNBQU87QUFDTCxXQUFPO0FBQ0wsaUNBQTJCO0FBQ3pCLGVBQU87QUFEa0IsT0FEdEI7QUFJTCxtQ0FBNkI7QUFDM0IsZUFBTztBQURvQjtBQUp4QjtBQURGO0FBL0lNLEM7Ozs7OztrQkNBQTtBQUNiLFVBQVE7QUFDTixlQUFXLHlFQURMO0FBRU4saUJBQWE7QUFGUCxHQURLO0FBS2IsVUFBUSxXQUxLO0FBTWIsbUJBQWlCLGlCQU5KO0FBT2IsZ0JBQWMscUJBUEQ7QUFRYixzQkFBb0Isd0JBUlA7QUFTYixhQUFXLFdBVEU7QUFVYixpQkFBZSxzQkFWRjtBQVdiLHFCQUFtQixzQkFYTjtBQVliLHNCQUFvQiwyQkFaUDtBQWFiLGlCQUFlLDJCQWJGO0FBY2IsMEJBQXlCLHdCQWRaO0FBZWIsNkJBQTJCLDJDQWZkO0FBZ0JiLFdBQVE7QUFDTixnQkFBWTtBQUROLEdBaEJLO0FBbUJiLFdBQVM7QUFDUCxXQUFPO0FBREEsR0FuQkk7QUFzQmIsU0FBTztBQUNMLFVBQU0sNEJBREQ7QUFFTCxrQ0FBOEIsaUNBRnpCO0FBR0wsYUFBUyxrQ0FISjtBQUlMLGdCQUFZLHFDQUpQO0FBS0wsV0FBTywrQkFMRjtBQU1MLFdBQU8sMEJBTkY7QUFPTCxpQkFBYSw0QkFQUjtBQVFMLG9CQUFnQiw2QkFSWDtBQVNMLGtCQUFjLDRCQVRUO0FBVUwsbUJBQWUsK0NBVlY7QUFXTCxvQkFBZ0IsNENBWFg7QUFZTCwyQkFBdUIsMERBWmxCO0FBYUwsa0NBQThCO0FBYnpCLEdBdEJNO0FBcUNiLGVBQWE7QUFDWCxhQUFTLGNBREU7QUFFWCxVQUFNLFlBRks7QUFHWCxhQUFTO0FBSEUsR0FyQ0E7QUEwQ2IsU0FBTztBQUNMLFVBQU0sMEJBREQ7QUFFTCxVQUFNLGlCQUZEO0FBR0wsWUFBUTtBQUhILEdBMUNNO0FBK0NiLFNBQU87QUFDTCxVQUFNO0FBQ0osdUJBQWlCLGtDQURiO0FBRUosc0JBQWdCLGlDQUZaO0FBR0osWUFBTSxtREFIRjtBQUlKLGFBQU8sK0JBSkg7QUFLSixhQUFPLDBCQUxIO0FBTUosV0FBSyxtQ0FORDtBQU9KLGtCQUFZLDBDQVBSO0FBUUosd0JBQWtCLDBDQVJkO0FBU0osc0JBQWdCLG9CQVRaO0FBVUosMkJBQXFCLHlEQVZqQjtBQVdKLDJCQUFxQixnRUFYakI7QUFZSixZQUFNLHlDQVpGO0FBYUosa0NBQTRCLHNFQWJ4QjtBQWNKLDhCQUF5QixrRkFkckI7QUFlSixvQkFBYywrQ0FmVjtBQWdCSixpQ0FBMkI7QUFoQnZCO0FBREQsR0EvQ007QUFtRWIsWUFBVTtBQUNSLFdBQU87QUFDTCxjQUFRLDhDQURIO0FBRUwsaUJBQVcsNkJBRk47QUFHTCxhQUFPLGdEQUhGO0FBSUwsbUJBQWEsb0RBSlI7QUFLTCxtQkFBYSx5RUFMUjtBQU1MLHFCQUFlLDRHQU5WO0FBT0wsb0NBQThCLG1IQVB6QjtBQVFMLHdCQUFrQix5SUFSYjtBQVNMLDZCQUF1QiwwSEFUbEI7QUFVTCw0Q0FBc0MsaUlBVmpDO0FBV0wsZ0JBQVUsc0RBWEw7QUFZTCx5QkFBbUIsK0RBWmQ7QUFhTCxxQkFBZSwyRUFiVjtBQWNMLHVCQUFpQjtBQWRaO0FBREMsR0FuRUc7QUFxRmIsWUFBVTtBQUNSLDZCQUF5QixnSEFEakI7QUFFUixjQUFVLDhCQUZGO0FBR1IsdUJBQW1CLDJEQUhYO0FBSVIsZUFBVyw4QkFKSDtBQUtSLFlBQVEsNkZBTEE7QUFNUixhQUFTLDRGQU5EO0FBT1Isb0JBQWdCLHdEQVBSO0FBUVIsOEJBQTBCLG1MQVJsQjtBQVNSLHFCQUFpQixvQ0FUVDtBQVVSLG9CQUFnQiwwREFWUjtBQVdSLDZCQUF5QiwwSEFYakI7QUFZUixXQUFPLCtDQVpDO0FBYVIsaUJBQWEsMERBYkw7QUFjUixrQkFBYyx3QkFkTjtBQWVSLFlBQVEsZ0RBZkE7QUFnQlIsaUJBQWE7QUFDWCxzQkFBZ0I7QUFETCxLQWhCTDtBQW1CUixZQUFRO0FBQ04sY0FBUSw4RUFERjtBQUVOLGtCQUFZLDZEQUZOO0FBR04sNEJBQXNCLGdEQUhoQjtBQUlOLFdBQUssNkJBSkM7QUFLTixjQUFRLGNBTEY7QUFNTixjQUFRO0FBTkYsS0FuQkE7QUEyQlIsd0JBQW9CLHNDQTNCWjtBQTRCUixzREFBa0Qsa0dBNUIxQztBQTZCUix5QkFBcUI7QUE3QmIsR0FyRkc7QUFvSGIsWUFBVTtBQUNSLFdBQU87QUFDTDtBQURLO0FBREMsR0FwSEc7QUF5SGIsUUFBTTtBQUNKLGVBQVc7QUFDVCxnQkFBVTtBQUNSLHdCQUFlLHFCQURQO0FBRVIsc0JBQWMsd0NBRk47QUFHUix1QkFBZSx3REFIUDtBQUlSLDZCQUFxQiw0QkFKYjtBQUtSLHlCQUFpQjtBQUxUO0FBREQsS0FEUDtBQVVKLGFBQVM7QUFDUCxZQUFNLHdCQURDO0FBRVAscUJBQWUsb0NBRlI7QUFHUCxjQUFRO0FBSEQ7QUFWTCxHQXpITztBQXlJYixTQUFPO0FBQ0wsV0FBTztBQUNMLGlDQUEyQjtBQUN6QixlQUFPO0FBRGtCLE9BRHRCO0FBSUwsbUNBQTZCO0FBQzNCLGVBQU87QUFEb0I7QUFKeEI7QUFERjtBQXpJTSxDOzs7Ozs7O0FDQWY7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztrQkFFZTtBQUNiLGtCQURhO0FBRWIsa0JBRmE7QUFHYixrQkFIYTtBQUliLGtCQUphO0FBS2Isa0JBTGE7QUFNYixrQkFOYTtBQU9iO0FBUGEsQzs7Ozs7O2tCQ1JBO0FBQ2IsVUFBUTtBQUNOLGVBQVcsa0VBREw7QUFFTixpQkFBYTtBQUZQLEdBREs7QUFLYixVQUFRLE9BTEs7QUFNYixtQkFBaUIsbUJBTko7QUFPYixnQkFBYyxZQVBEO0FBUWIsc0JBQW9CLGlCQVJQO0FBU2IsYUFBVyxXQVRFO0FBVWIsaUJBQWUsaUJBVkY7QUFXYixxQkFBbUIsd0JBWE47QUFZYixzQkFBb0IsdUJBWlA7QUFhYixpQkFBZSw4QkFiRjtBQWNiLDBCQUF5Qix3QkFkWjtBQWViLDZCQUEyQixpQ0FmZDtBQWdCYixXQUFRO0FBQ04sZ0JBQVk7QUFETixHQWhCSztBQW1CYixXQUFTO0FBQ1AsV0FBTztBQURBLEdBbkJJO0FBc0JiLFNBQU87QUFDTCxVQUFNLGdCQUREO0FBRUwsa0NBQThCLCtCQUZ6QjtBQUdMLGFBQVMsK0JBSEo7QUFJTCxnQkFBWSxnQ0FKUDtBQUtMLFdBQU8sbUJBTEY7QUFNTCxXQUFPLGdCQU5GO0FBT0wsaUJBQWEsa0JBUFI7QUFRTCxvQkFBZ0IsaUJBUlg7QUFTTCxrQkFBYyxlQVRUO0FBVUwsbUJBQWUsMEJBVlY7QUFXTCxvQkFBZ0IsNEJBWFg7QUFZTCwyQkFBdUIsbURBWmxCO0FBYUwsa0NBQThCO0FBYnpCLEdBdEJNO0FBcUNiLGVBQWE7QUFDWCxhQUFTLG1CQURFO0FBRVgsVUFBTSxnQkFGSztBQUdYLGFBQVM7QUFIRSxHQXJDQTtBQTBDYixTQUFPO0FBQ0wsVUFBTSxlQUREO0FBRUwsVUFBTSxnQkFGRDtBQUdMLFlBQVE7QUFISCxHQTFDTTtBQStDYixTQUFPO0FBQ0wsVUFBTTtBQUNKLHVCQUFpQix1QkFEYjtBQUVKLHNCQUFnQixzQkFGWjtBQUdKLFlBQU0sMENBSEY7QUFJSixhQUFPLG1CQUpIO0FBS0osYUFBTyxnQkFMSDtBQU1KLFdBQUssd0JBTkQ7QUFPSixrQkFBWSxpQ0FQUjtBQVFKLHdCQUFrQixnQ0FSZDtBQVNKLHNCQUFnQixpQkFUWjtBQVVKLDJCQUFxQixnREFWakI7QUFXSiwyQkFBcUIseURBWGpCO0FBWUosWUFBTSw4QkFaRjtBQWFKLGtDQUE0QixvREFieEI7QUFjSiw4QkFBeUIsOERBZHJCO0FBZUosb0JBQWMsZ0RBZlY7QUFnQkosaUNBQTJCO0FBaEJ2QjtBQURELEdBL0NNO0FBbUViLFlBQVU7QUFDUixXQUFPO0FBQ0wsY0FBUSxxQ0FESDtBQUVMLGlCQUFXLHdCQUZOO0FBR0wsYUFBTyx3Q0FIRjtBQUlMLG1CQUFhLHVDQUpSO0FBS0wsbUJBQWEscURBTFI7QUFNTCxxQkFBZSxvR0FOVjtBQU9MLG9DQUE4QiwwR0FQekI7QUFRTCx3QkFBa0IsNkdBUmI7QUFTTCw2QkFBdUIsNEZBVGxCO0FBVUwsNENBQXNDLGtHQVZqQztBQVdMLGdCQUFVLDBDQVhMO0FBWUwseUJBQW1CLDREQVpkO0FBYUwscUJBQWUsb0VBYlY7QUFjTCx1QkFBaUI7QUFkWjtBQURDLEdBbkVHO0FBcUZiLFlBQVU7QUFDUiw2QkFBeUIsbUZBRGpCO0FBRVIsY0FBVSx5QkFGRjtBQUdSLHVCQUFtQix3Q0FIWDtBQUlSLGVBQVcsZ0NBSkg7QUFLUixZQUFRLHVFQUxBO0FBTVIsYUFBUywyRUFORDtBQU9SLG9CQUFnQix3Q0FQUjtBQVFSLDhCQUEwQiwwSkFSbEI7QUFTUixxQkFBaUIsNkJBVFQ7QUFVUixvQkFBZ0IsMkNBVlI7QUFXUiw2QkFBeUIscUdBWGpCO0FBWVIsV0FBTyx5Q0FaQztBQWFSLGlCQUFhLG1EQWJMO0FBY1Isa0JBQWMsa0JBZE47QUFlUixZQUFRLDBDQWZBO0FBZ0JSLGlCQUFhO0FBQ1gsc0JBQWdCO0FBREwsS0FoQkw7QUFtQlIsWUFBUTtBQUNOLGNBQVEsaUVBREY7QUFFTixrQkFBWSwyREFGTjtBQUdOLDRCQUFzQixpRUFIaEI7QUFJTixXQUFLLHdCQUpDO0FBS04sY0FBUSxnQkFMRjtBQU1OLGNBQVE7QUFORixLQW5CQTtBQTJCUix3QkFBb0Isa0RBM0JaO0FBNEJSLHNEQUFrRCxpR0E1QjFDO0FBNkJSLHlCQUFxQjtBQTdCYixHQXJGRztBQW9IYixZQUFVO0FBQ1IsV0FBTztBQUNMO0FBREs7QUFEQyxHQXBIRztBQXlIYixRQUFNO0FBQ0osZUFBVztBQUNULGdCQUFVO0FBQ1Isd0JBQWUsMkJBRFA7QUFFUixzQkFBYyxrQ0FGTjtBQUdSLHVCQUFlLGtEQUhQO0FBSVIsNkJBQXFCLDBCQUpiO0FBS1IseUJBQWlCO0FBTFQ7QUFERCxLQURQO0FBVUosYUFBUztBQUNQLFlBQU0sZUFEQztBQUVQLHFCQUFlLHdCQUZSO0FBR1AsY0FBUTtBQUhEO0FBVkwsR0F6SE87QUF5SWIsU0FBTztBQUNMLFdBQU87QUFDTCxpQ0FBMkI7QUFDekIsZUFBTztBQURrQixPQUR0QjtBQUlMLG1DQUE2QjtBQUMzQixlQUFPO0FBRG9CO0FBSnhCO0FBREY7QUF6SU0sQzs7Ozs7O2tCQ0FDO0FBQ2QsVUFBUTtBQUNOLGVBQVcsNkNBREw7QUFFTixpQkFBYTtBQUZQLEdBRE07QUFLZCxVQUFRLE9BTE07QUFNZCxtQkFBaUIsc0JBTkg7QUFPZCxnQkFBYyxxQkFQQTtBQVFkLHNCQUFvQixxQkFSTjtBQVNkLGFBQVcsU0FURztBQVVkLGlCQUFlLGtCQVZEO0FBV2QscUJBQW1CLG1CQVhMO0FBWWQsc0JBQW9CLHFCQVpOO0FBYWQsaUJBQWUsY0FiRDtBQWNkLDBCQUF3Qix1QkFkVjtBQWVkLDZCQUEyQiwwQkFmYjtBQWdCZCxXQUFTO0FBQ1AsZ0JBQVk7QUFETCxHQWhCSztBQW1CZCxXQUFTO0FBQ1AsV0FBTztBQURBLEdBbkJLO0FBc0JkLFNBQU87QUFDTCxVQUFNLG1CQUREO0FBRUwsVUFBTSxpQkFGRDtBQUdMLFlBQVE7QUFISCxHQXRCTztBQTJCZCxTQUFPO0FBQ0wsVUFBTSxvQkFERDtBQUVMLGtDQUE4QixpQ0FGekI7QUFHTCxhQUFTLDhCQUhKO0FBSUwsZ0JBQVksK0JBSlA7QUFLTCxXQUFPLG9CQUxGO0FBTUwsV0FBTyxtQkFORjtBQU9MLGlCQUFhLGlCQVBSO0FBUUwsb0JBQWdCLG9CQVJYO0FBU0wsa0JBQWMsZUFUVDtBQVVMLG1CQUFlLGtDQVZWO0FBV0wsb0JBQWdCLGtDQVhYO0FBWUwsMkJBQXVCLCtDQVpsQjtBQWFMLGtDQUE4QjtBQWJ6QixHQTNCTztBQTBDZCxlQUFhO0FBQ1gsYUFBUyxvQkFERTtBQUVYLFVBQU0sZ0JBRks7QUFHWCxhQUFTO0FBSEUsR0ExQ0M7QUErQ2QsU0FBTztBQUNMLFVBQU07QUFDSix1QkFBaUIscUJBRGI7QUFFSixzQkFBZ0IscUJBRlo7QUFHSixZQUFNLDhDQUhGO0FBSUosYUFBTyxvQkFKSDtBQUtKLGFBQU8sbUJBTEg7QUFNSixXQUFLLG9CQU5EO0FBT0osa0JBQVksOEJBUFI7QUFRSix3QkFBa0IsNkJBUmQ7QUFTSixzQkFBZ0IsbUJBVFo7QUFVSiwyQkFBcUIsNENBVmpCO0FBV0osMkJBQXFCLHNEQVhqQjtBQVlKLFlBQU0sMEJBWkY7QUFhSixrQ0FBNEIsd0NBYnhCO0FBY0osOEJBQXlCLDhDQWRyQjtBQWVKLG9CQUFjLDhDQWZWO0FBZ0JKLGlDQUEyQjtBQWhCdkI7QUFERCxHQS9DTztBQW1FZCxZQUFVO0FBQ1IsV0FBTztBQUNMLGNBQVEsc0NBREg7QUFFTCxpQkFBVyx3QkFGTjtBQUdMLGFBQU8sK0JBSEY7QUFJTCxtQkFBYSx1REFKUjtBQUtMLHFCQUFlLG1FQUxWO0FBTUwsb0NBQThCLDhEQU56QjtBQU9MLG1CQUFhLG9DQVBSO0FBUUwsd0JBQWtCLG9HQVJiO0FBU0wsNkJBQXVCLG9GQVRsQjtBQVVMLDRDQUFzQyxnR0FWakM7QUFXTCxnQkFBVSw4Q0FYTDtBQVlMLHlCQUFtQixzREFaZDtBQWFMLHFCQUFlLHVEQWJWO0FBY0wsdUJBQWlCO0FBZFo7QUFEQyxHQW5FSTtBQXFGZCxZQUFVO0FBQ1IsNkJBQXlCLDhGQURqQjtBQUVSLGNBQVUsU0FGRjtBQUdSLHVCQUFtQixxQkFIWDtBQUlSLGVBQVcsbUJBSkg7QUFLUixZQUFRLDhDQUxBO0FBTVIsYUFBUyx5Q0FORDtBQU9SLG9CQUFnQiw0QkFQUjtBQVFSLDhCQUEwQiwwSkFSbEI7QUFTUixxQkFBaUIsMkNBVFQ7QUFVUixvQkFBZ0IsU0FWUjtBQVdSLDZCQUF5QixnR0FYakI7QUFZUixXQUFPLHFCQVpDO0FBYVIsaUJBQVksMEJBYko7QUFjUixrQkFBYyxvQkFkTjtBQWVSLFlBQVEsOEJBZkE7QUFnQlIsaUJBQWE7QUFDWCxzQkFBZ0I7QUFETCxLQWhCTDtBQW1CUixTQUFLLCtEQW5CRztBQW9CUixZQUFRO0FBQ04sY0FBUSw4QkFERjtBQUVOLGtCQUFZLGdEQUZOO0FBR04sNEJBQXNCLHNFQUhoQjtBQUlOLFdBQUssdUJBSkM7QUFLTixjQUFRLGVBTEY7QUFNTixjQUFRO0FBTkYsS0FwQkE7QUE0QlIsd0JBQW9CLDhCQTVCWjtBQTZCUixzREFBa0QsbUdBN0IxQztBQThCUix5QkFBcUI7QUE5QmIsR0FyRkk7QUFxSGQsWUFBVTtBQUNSLFdBQU87QUFDTDtBQURLO0FBREMsR0FySEk7QUErSGQsUUFBTTtBQUNKLGVBQVc7QUFDVCxnQkFBVTtBQUNSLHdCQUFlLDBDQURQO0FBRVIsc0JBQWMseUNBRk47QUFHUix1QkFBZSw2QkFIUDtBQUlSLDZCQUFxQixvQ0FKYjtBQUtSLHlCQUFpQjtBQUxUO0FBREQsS0FEUDtBQVVKLGFBQVM7QUFDUCxZQUFNLGtCQURDO0FBRVAscUJBQWUsdUJBRlI7QUFHUCxjQUFRO0FBSEQ7QUFWTCxHQS9IUTtBQStJZCxTQUFPO0FBQ0wsV0FBTztBQUNMLGlDQUEyQjtBQUN6QixlQUFPO0FBRGtCLE9BRHRCO0FBSUwsbUNBQTZCO0FBQzNCLGVBQU87QUFEb0I7QUFKeEI7QUFERjtBQS9JTyxDOzs7Ozs7a0JDQUQ7QUFDYixVQUFRO0FBQ04sZUFBVywrQ0FETDtBQUVOLGlCQUFhO0FBRlAsR0FESztBQUtiLFVBQVEsU0FMSztBQU1iLG1CQUFpQixpQkFOSjtBQU9iLGdCQUFjLG9CQVBEO0FBUWIsc0JBQW9CLHNCQVJQO0FBU2IsYUFBVyxZQVRFO0FBVWIsaUJBQWUscUJBVkY7QUFXYixxQkFBbUIsNEJBWE47QUFZYixzQkFBb0IsMEJBWlA7QUFhYixpQkFBZSxvQkFiRjtBQWNiLDBCQUF3QixpQ0FkWDtBQWViLDZCQUEyQixpQ0FmZDtBQWdCYixXQUFTO0FBQ1AsZ0JBQVk7QUFETCxHQWhCSTtBQW1CYixXQUFTO0FBQ1AsV0FBTztBQURBLEdBbkJJO0FBc0JiLFNBQU87QUFDTCxVQUFNLG1CQUREO0FBRUwsVUFBTSxnQkFGRDtBQUdMLFlBQVE7QUFISCxHQXRCTTtBQTJCYixTQUFPO0FBQ0wsVUFBTSxvQkFERDtBQUVMLGtDQUE4QixpQ0FGekI7QUFHTCxhQUFTLGVBSEo7QUFJTCxnQkFBWSxhQUpQO0FBS0wsV0FBTyx1QkFMRjtBQU1MLFdBQU8sbUJBTkY7QUFPTCxpQkFBYSxvQkFQUjtBQVFMLG9CQUFnQixrQkFSWDtBQVNMLGtCQUFjLGlCQVRUO0FBVUwsbUJBQWUsNkJBVlY7QUFXTCxvQkFBZ0Isb0JBWFg7QUFZTCxrQ0FBOEI7QUFaekIsR0EzQk07QUF5Q2IsZUFBYTtBQUNYLGFBQVMsY0FERTtBQUVYLFVBQU0sWUFGSztBQUdYLGFBQVM7QUFIRSxHQXpDQTtBQThDYixTQUFPO0FBQ0wsVUFBTTtBQUNKLHVCQUFpQixpQkFEYjtBQUVKLHNCQUFnQixnQ0FGWjtBQUdKLFlBQU0saUNBSEY7QUFJSixhQUFPLHVCQUpIO0FBS0osYUFBTyxtQkFMSDtBQU1KLFdBQUssbUJBTkQ7QUFPSixrQkFBWSw2QkFQUjtBQVFKLHdCQUFrQiw0QkFSZDtBQVNKLHNCQUFnQixvQkFUWjtBQVVKLDJCQUFxQiwrQ0FWakI7QUFXSiwyQkFBcUIsaUVBWGpCO0FBWUosWUFBTSw2QkFaRjtBQWFKLGtDQUE0QixlQWJ4QjtBQWNKLDhCQUF5QixxREFkckI7QUFlSixvQkFBYyx3Q0FmVjtBQWdCSixpQ0FBMkI7QUFoQnZCO0FBREQsR0E5Q007QUFrRWIsWUFBVTtBQUNSLFdBQU87QUFDTCxjQUFRLGVBREg7QUFFTCxpQkFBVyxhQUZOO0FBR0wsYUFBTyw4QkFIRjtBQUlMLG1CQUFhLDhEQUpSLEVBSXlFO0FBQzlFLHFCQUFlLG9EQUxWLEVBS2dFO0FBQ3JFLG9DQUE4Qiw0REFOekI7QUFPTCxtQkFBYSxlQVBSO0FBUUwsd0JBQWtCLDhGQVJiO0FBU0wsNkJBQXVCLDhGQVRsQjtBQVVMLDRDQUFzQyw4RkFWakM7QUFXTCxnQkFBVSwwQ0FYTCxFQVdrRDtBQUN2RCx5QkFBbUIseUNBWmQ7QUFhTCxxQkFBZSx5REFiVjtBQWNMLHVCQUFpQjtBQWRaO0FBREMsR0FsRUc7QUFvRmIsWUFBVTtBQUNSLDZCQUF5QiwyRkFEakI7QUFFUixjQUFVLFVBRkY7QUFHUix1QkFBbUIsZ0NBSFg7QUFJUixlQUFXLCtCQUpIO0FBS1IsWUFBUSxnRUFMQTtBQU1SLGFBQVMsaURBTkQ7QUFPUixvQkFBZ0IsdUNBUFI7QUFRUiw4QkFBMEIsNEpBUmxCO0FBU1IscUJBQWlCLDZCQVRUO0FBVVIsb0JBQWdCLHlCQVZSO0FBV1IsNkJBQXlCLCtFQVhqQjtBQVlSLFdBQU8sc0JBWkM7QUFhUixpQkFBWSw4QkFiSjtBQWNSLGtCQUFjLG9CQWROO0FBZVIsWUFBUSw4QkFmQTtBQWdCUixpQkFBYTtBQUNYLHNCQUFnQjtBQURMLEtBaEJMO0FBbUJSLFNBQUssK0RBbkJHO0FBb0JSLFlBQVE7QUFDTixjQUFRLHNDQURGO0FBRU4sa0JBQVkseURBRk47QUFHTiw0QkFBc0IseUVBSGhCO0FBSU4sV0FBSyxnQ0FKQztBQUtOLGNBQVEsZ0JBTEY7QUFNTixjQUFRO0FBTkYsS0FwQkE7QUE0QlIsd0JBQW9CLHNDQTVCWjtBQTZCUixzREFBa0Qsc0ZBN0IxQztBQThCUix5QkFBcUI7QUE5QmIsR0FwRkc7QUFvSGIsWUFBVTtBQUNSLFdBQU87QUFDTDtBQURLO0FBREMsR0FwSEc7QUErSGIsUUFBTTtBQUNKLGVBQVc7QUFDVCxnQkFBVTtBQUNSLHdCQUFlLHFCQURQO0FBRVIsc0JBQWMsNkJBRk47QUFHUix1QkFBZSxxQ0FIUDtBQUlSLDZCQUFxQix1QkFKYjtBQUtSLHlCQUFpQjtBQUxUO0FBREQsS0FEUDtBQVVKLGFBQVM7QUFDUCxZQUFNLG1CQURDO0FBRVAscUJBQWUsdUJBRlI7QUFHUCxjQUFRO0FBSEQ7QUFWTCxHQS9ITztBQStJYixTQUFPO0FBQ0wsV0FBTztBQUNMLGlDQUEyQjtBQUN6QixlQUFPO0FBRGtCLE9BRHRCO0FBSUwsbUNBQTZCO0FBQzNCLGVBQU87QUFEb0I7QUFKeEI7QUFERjtBQS9JTSxDOzs7Ozs7O0FDQWY7Ozs7OztrQkFDZTtBQUNiO0FBRGEsQzs7Ozs7eUJDRFMsT0FBTyxJQUFQLENBQVksSztJQUE3QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixHLEdBQU8sT0FBTyxHLENBQWQsRztJQUNBLGEsR0FBaUIsT0FBTyxHQUFQLENBQVcsRyxDQUE1QixhOztBQUNQLElBQU0scUJBQXFCLFFBQVEsc0JBQVIsQ0FBM0I7O0FBRUEsU0FBUyxvQkFBVCxHQUEwQztBQUFBOztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN4QyxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0EsTUFBTSxpQkFBaUIsUUFBUSw0QkFBUixDQUF2QjtBQUNBLE1BQU0sbUJBQW1CLFFBQVEsY0FBUixJQUEwQixJQUFuRDtBQUh3QyxNQUlqQyxLQUppQyxHQUl4QixPQUp3QixDQUlqQyxLQUppQzs7QUFLeEMsTUFBTSxVQUFVLE1BQU0sS0FBTixFQUFoQjtBQUNBLE1BQUksZ0JBQUosRUFBc0I7QUFDcEIsUUFBTSxVQUFVLGlCQUFpQixNQUFqQixDQUF3QixRQUF4QixDQUFpQyxpQkFBaUIsTUFBakIsQ0FBd0IsUUFBeEIsQ0FBaUMsTUFBakMsR0FBd0MsQ0FBekUsQ0FBaEI7QUFDQSxRQUFNLFVBQVcsUUFBUSxLQUFSLEtBQWtCLFFBQVEsT0FBUixFQUFsQixHQUFzQyxlQUFlLDJCQUFmLENBQTJDLE9BQTNDLEVBQW9EO0FBQ3pHLHNCQUR5RztBQUV6RyxrQkFBWTtBQUY2RixLQUFwRCxDQUF2RDtBQUlBLFlBQVEsSUFBUixDQUFhLFlBQUs7QUFDaEIsdUJBQWlCLFlBQWpCLEdBQWdDLE1BQUssVUFBTCxHQUFrQixXQUFsQixFQUFoQztBQUNBLFVBQU0sVUFBVSxJQUFJLGtCQUFKLENBQXVCLGdCQUF2QixDQUFoQjtBQUNBLFVBQU0scUJBQXFCLFFBQVEsdUJBQVIsRUFBM0I7QUFDQSxVQUFNLHVCQUF1QixlQUFlLHFCQUFmLENBQXFDLE9BQXJDLENBQTdCO0FBQ0E7QUFDQSwyQkFBcUIsTUFBckIsSUFBK0IsTUFBSyxpQkFBTCxDQUF1QixvQkFBdkIsQ0FBL0I7QUFDQTtBQUNBLHlCQUFtQixNQUFuQixJQUE2QixNQUFLLGlCQUFMLENBQXVCLGtCQUF2QixDQUE3QjtBQUNBLFlBQUssVUFBTCxHQUFrQixjQUFsQjtBQUFBLDRFQUFtQztBQUFBLGNBQWdCLFFBQWhCLFFBQWdCLFFBQWhCO0FBQUEsY0FBMEIsT0FBMUIsUUFBMEIsT0FBMUI7QUFBQSxjQUFtQyxPQUFuQyxRQUFtQyxPQUFuQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDakMsc0JBQUksaUJBQUosQ0FBc0IsSUFBdEI7QUFDYSw0QkFGb0IsR0FFTixRQUZNLENBRTFCLElBRjBCO0FBQUE7QUFBQSx5QkFHM0IsZUFBZSx5QkFBZixDQUF5QyxNQUFNLGVBQU4sQ0FBc0IsVUFBdEIsRUFBa0MsUUFBbEMsRUFBekMsQ0FIMkI7O0FBQUE7QUFJakMsdUJBQUssdUJBQUwsQ0FBNkIsVUFBN0I7QUFDQSxzQkFBSSxpQkFBSixDQUFzQixLQUF0Qjs7QUFMaUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBbkM7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPRCxLQWhCRDtBQWlCRDtBQUNGOztBQUVELFFBQVEsb0JBQVIsRUFBOEIsYUFBOUI7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLG9CQUFqQjs7O0lDdkNPLEcsR0FBTyxPQUFPLEcsQ0FBZCxHOztBQUNQLElBQU0sb0JBQW9CLFFBQVEsZ0NBQVIsQ0FBMUI7QUFDQSxJQUFNLHFCQUFxQixTQUFyQixrQkFBcUIsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDOUMsTUFBTSxpQkFBaUIsUUFBUSw0QkFBUixDQUF2QjtBQUNBLE9BQUssS0FBTCxHQUFhO0FBQ1gsZUFBVztBQURBLEdBQWI7O0FBRjhDLGFBS3BCLFFBQVEsTUFBUixJQUFrQixFQUxFO0FBQUEsTUFLdkMsS0FMdUMsUUFLdkMsS0FMdUM7QUFBQSxNQUtoQyxRQUxnQyxRQUtoQyxRQUxnQztBQU05Qzs7O0FBQ0EsT0FBSyxhQUFMLEdBQXFCLFFBQVEsWUFBUixJQUF3QixJQUE3QztBQUNBLE1BQU0sVUFBVSxNQUFNLEtBQU4sRUFBaEI7QUFDQTtBQUNBLE1BQU0sVUFBVSxTQUFTLFNBQVMsTUFBVCxHQUFrQixDQUEzQixDQUFoQjtBQUNBO0FBQ0EsTUFBSSxZQUFZLE1BQU0sWUFBTixHQUFxQixRQUFyQixHQUFnQyxNQUFoQyxDQUF1QztBQUFBLFdBQVksU0FBUyxPQUFULE9BQXVCLEtBQXZCLElBQWdDLFNBQVMsU0FBVCxPQUF5QixPQUFyRTtBQUFBLEdBQXZDLENBQWhCO0FBQ0E7OztBQUdBLGNBQVksZUFBZSxxQkFBZixDQUFxQyxFQUFDLGdCQUFELEVBQVUsb0JBQVYsRUFBc0IsZ0JBQXRCLEVBQXJDLENBQVo7QUFDQSxPQUFLLFlBQUwsR0FBb0I7QUFBQSxXQUFNLENBQUMsQ0FBQyxVQUFVLE1BQWxCO0FBQUEsR0FBcEI7QUFDQSxPQUFLLHVCQUFMLEdBQStCLFlBQVc7QUFDeEMsUUFBTSxPQUFPLElBQWI7QUFDQSxRQUFNLHFCQUFxQixFQUEzQjtBQUNBLGNBQVUsT0FBVixDQUFrQixvQkFBWTtBQUM1QixVQUFNLG9CQUFvQixJQUFJLE1BQUosQ0FBVztBQUNuQyxnQkFBUSxDQUFDLGlCQUFELENBRDJCO0FBRW5DLDRCQUFrQixLQUFLLEdBQUwsRUFGaUI7QUFHbkMsaUJBQVM7QUFDUCxvQkFETyx3QkFDTTtBQUNYLG1CQUFPLEtBQUssaUJBQVo7QUFDRDtBQUhNLFNBSDBCO0FBUW5DLFlBUm1DLGtCQVE1QjtBQUNMLGlCQUFPO0FBQ0wsNEJBREs7QUFFTCxzQkFBVSxTQUFTLFFBRmQ7QUFHTCx1QkFBVyxTQUFTLFNBSGY7QUFJTCwwQkFBYyxJQUFJLGVBQUosRUFKVDtBQUtMLDBCQUFjLEtBQUs7QUFMZCxXQUFQO0FBT0Q7QUFoQmtDLE9BQVgsQ0FBMUI7QUFrQkEseUJBQW1CLElBQW5CLENBQXdCO0FBQ3RCLGVBQU8sK0JBRGU7QUFFdEIsY0FBTSxTQUFTLFFBQVQsQ0FBa0IsSUFGRjtBQUd0QixZQUFJLFNBQVMsUUFBVCxDQUFrQixFQUhBO0FBSXRCLGdCQUFRLEtBSmMsRUFJUDtBQUNmLG1CQUFXO0FBTFcsT0FBeEI7QUFPRCxLQTFCRDtBQTJCQSxXQUFPLGtCQUFQO0FBQ0QsR0EvQkQ7QUFnQ0QsQ0FsREQ7O0FBb0RBLE9BQU8sT0FBUCxHQUFrQixrQkFBbEI7OztBQ3REQTs7Ozs7O0FBRUEsU0FBUyw0QkFBVCxHQUFvRjtBQUFBLGlGQUFILEVBQUc7QUFBQSwyQkFBN0MsUUFBNkM7QUFBQSxNQUE3QyxRQUE2QyxpQ0FBcEMsRUFBb0M7QUFBQSwwQkFBaEMsT0FBZ0M7QUFBQSxNQUFoQyxPQUFnQyxnQ0FBeEIsSUFBd0I7QUFBQSw2QkFBbEIsVUFBa0I7QUFBQSxNQUFsQixVQUFrQixtQ0FBUCxFQUFPOztBQUNsRixNQUFNLFlBQVksSUFBSSxNQUFKLENBQVcsNkJBQVgsQ0FBbEI7QUFDQSxTQUFPLElBQUksU0FBSixDQUFjO0FBQ25CLHNCQURtQjtBQUVuQixvQkFGbUI7QUFHbkI7QUFIbUIsR0FBZCxDQUFQO0FBS0Q7O0FBRUQsT0FBTyxPQUFQLEdBQWlCLDRCQUFqQjs7O0FDUEE7Ozs7Ozt5QkFDK0IsT0FBTyxJQUFQLENBQVksSztJQUFwQyxJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFBUyxLLHNCQUFBLEssRUFMdEI7Ozs7SUFNUSxHLEdBQVEsT0FBTyxHLENBQWYsRztJQUNBLFMsR0FBYyxPQUFPLEdBQVAsQ0FBVyxHLENBQXpCLFM7O0FBQ1IsSUFBTSxpQkFBaUIsUUFBUSw0QkFBUixDQUF2Qjs7QUFFQSxTQUFTLGNBQVQsR0FBb0M7QUFBQTs7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDbEMsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNBLE9BQUssWUFBTCxHQUFvQixpQkFBcEI7QUFGa0Msc0JBR0gsT0FIRyxDQUcxQixJQUgwQjtBQUFBLE1BRzFCLElBSDBCLGlDQUdyQixjQUhxQjs7QUFJbEMsT0FBSyxJQUFMLEdBQVksSUFBWjtBQUNBLFFBQU0sSUFBTixFQUFZLE9BQVo7QUFDQSxPQUFLLGFBQUwsR0FBcUIsUUFBUSxZQUFSLElBQXdCLElBQUksZUFBSixFQUE3QztBQUNBLE9BQUssUUFBTCxHQUFnQixRQUFRLE9BQVIsSUFBbUIsY0FBbkM7QUFDQSxNQUFNLG9CQUFvQixJQUFJLE1BQUosQ0FBVyxLQUFLLFlBQWhCLENBQTFCO0FBQ0EsT0FBSyxpQkFBTCxHQUF5QixJQUFJLGlCQUFKLENBQXNCO0FBQzdDLGFBQVMsS0FBSyxRQUQrQjtBQUU3QyxVQUFNLGdCQUFNO0FBQ1YsYUFBTztBQUNMLGVBQU8sTUFBSyxRQUFMLENBQWMsS0FEaEI7QUFFTCxzQkFBYyxNQUFLLGFBRmQ7QUFHTCx1QkFBZSxRQUFRLGFBSGxCO0FBSUwsK0JBQXVCO0FBSmxCLE9BQVA7QUFNRDtBQVQ0QyxHQUF0QixDQUF6Qjs7QUFZQSxPQUFLLEtBQUwsR0FBYSxVQUFTLE1BQVQsRUFBaUI7QUFDNUIsV0FBTyxLQUFLLElBQUwsRUFBVyxPQUFYLEVBQW9CLE1BQXBCLEVBQTRCLElBQTVCLENBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUssT0FBTCxHQUFlLFlBQVc7QUFBQTs7QUFDeEIsUUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBQ0EsU0FBSyxRQUFMLENBQWMsSUFBZCxHQUNHLE9BREgsQ0FDVyxZQUFNO0FBQ2IsYUFBSyxPQUFMLEdBQWUsWUFBVztBQUN4QixhQUFLLElBQUwsRUFBVyxTQUFYLEVBQ0csSUFESCxDQUNRO0FBQUEsaUJBQU0sRUFBRSxPQUFGLEVBQU47QUFBQSxTQURSO0FBRUQsT0FIRDtBQUlBLGFBQUssT0FBTDtBQUNELEtBUEg7QUFRQSxXQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsR0FYRDtBQVlEOztBQUVELFFBQVEsY0FBUixFQUF3QixTQUF4Qjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsY0FBakI7OztBQ25EQTs7Ozs7O0lBQ08sMkIsR0FBK0IsT0FBTyxJQUFQLENBQVksTyxDQUEzQywyQjs7O0FBRVAsU0FBUyxzQ0FBVCxHQUFzRjtBQUFBLGlGQUFILEVBQUc7QUFBQSwyQkFBckMsUUFBcUM7QUFBQSxNQUFyQyxRQUFxQyxpQ0FBNUIsRUFBNEI7QUFBQSxtQ0FBeEIsZ0JBQXdCO0FBQUEsTUFBeEIsZ0JBQXdCLHlDQUFQLEVBQU87O0FBQ3BGLE1BQU0sU0FBUyxFQUFmO0FBQ0EsV0FBUyxPQUFULENBQWlCLG1CQUFXO0FBQzFCLFFBQU0sVUFBVSxRQUFRLFNBQXhCO0FBQ0EsUUFBSSxPQUFPLE9BQVAsTUFBb0IsU0FBeEIsRUFBbUM7QUFDakMsVUFBTSxXQUFXLENBQUMsNEJBQTRCLFlBQTVCLENBQXlDLE9BQXpDLENBQWxCO0FBQ0EsYUFBTyxPQUFQLElBQWtCO0FBQ2hCLDBCQURnQjtBQUVoQixnQkFBUSxDQUFDLFFBQUQsSUFBYSw0QkFBNEIsWUFBNUIsQ0FBeUMsT0FBekMsRUFBa0QsU0FBbEQsRUFGTDtBQUdoQixrQkFBUztBQUhPLE9BQWxCO0FBS0Q7QUFDRCxXQUFPLE9BQVAsRUFBZ0IsUUFBaEIsQ0FBeUIsSUFBekIsQ0FBOEIsT0FBOUI7QUFDRCxHQVhEO0FBWUEsTUFBTSxZQUFZLElBQUksTUFBSixDQUFXLHFDQUFYLENBQWxCO0FBQ0EsU0FBTyxJQUFJLFNBQUosQ0FBYztBQUNuQixrQkFEbUI7QUFFbkI7QUFGbUIsR0FBZCxDQUFQO0FBSUQ7O0FBRUQsT0FBTyxPQUFQLEdBQWlCLHNDQUFqQjs7O0FDeEJBOzs7Ozs7SUFDTywyQixHQUErQixPQUFPLElBQVAsQ0FBWSxPLENBQTNDLDJCOzs7QUFFUCxTQUFTLHNDQUFULEdBQXVHO0FBQUEsaUZBQUgsRUFBRztBQUFBLE1BQXRELEtBQXNELFFBQXRELEtBQXNEO0FBQUEsTUFBL0MsUUFBK0MsUUFBL0MsUUFBK0M7QUFBQSwyQkFBckMsUUFBcUM7QUFBQSxNQUFyQyxRQUFxQyxpQ0FBNUIsRUFBNEI7QUFBQSxtQ0FBeEIsZ0JBQXdCO0FBQUEsTUFBeEIsZ0JBQXdCLHlDQUFQLEVBQU87O0FBQ3JHLE1BQU0sWUFBWSxJQUFJLE1BQUosQ0FBVywyQ0FBWCxDQUFsQjtBQUNBLFNBQU8sSUFBSSxTQUFKLENBQWM7QUFDbkIsc0JBRG1CO0FBRW5CLFlBQVEsQ0FBQyxRQUFELEdBQVksNEJBQTRCLFlBQTVCLENBQXlDLE1BQU0sS0FBTixFQUF6QyxFQUF3RCxTQUF4RCxFQUFaLEdBQWtGLElBRnZFO0FBR25CO0FBSG1CLEdBQWQsQ0FBUDtBQUtEOztBQUVELE9BQU8sT0FBUCxHQUFpQixzQ0FBakI7OztBQ1pBOzs7O0lBSVEsUyxHQUFlLE9BQU8sSUFBUCxDQUFZLEssQ0FBM0IsUzs7O0FBRVIsU0FBUyxpQkFBVCxHQUFpRDtBQUFBLGlGQUFILEVBQUc7QUFBQSxNQUFyQixRQUFxQixRQUFyQixRQUFxQjtBQUFBLE1BQVgsTUFBVyxRQUFYLE1BQVc7O0FBQy9DLE1BQU0sWUFBWSxJQUFJLE1BQUosQ0FBVztBQUMzQixRQUQyQixrQkFDcEI7QUFDTCxhQUFPO0FBQ0wsa0JBQVU7QUFETCxPQUFQO0FBR0QsS0FMMEI7QUFNM0IsVUFOMkIsa0JBTXBCLENBTm9CLEVBTWpCO0FBQUE7O0FBQ1IsVUFBTSxVQUFVLE9BQU8sSUFBUCxDQUFZLFNBQVMsQ0FBVCxFQUFZLHlCQUFaLEVBQVosQ0FBaEI7QUFDQSxVQUFNLFNBQVMsUUFBUSxHQUFSLENBQVk7QUFBQSxlQUFZLEVBQUUsSUFBRixFQUFRLFFBQVIsQ0FBWjtBQUFBLE9BQVosQ0FBZjtBQUNBLFVBQU0sUUFBUSxFQUFFLE9BQUYsRUFBVyxDQUFDLEVBQUUsSUFBRixFQUFRLE1BQVIsQ0FBRCxDQUFYLENBQWQ7QUFDQSxVQUFNLE9BQU8sU0FBUyxHQUFULENBQWEsVUFBQyxPQUFELEVBQVUsS0FBVixFQUFvQjtBQUM1QyxZQUFNLFNBQVMsUUFBUSxHQUFSLENBQVksa0JBQVU7QUFDbkMsY0FBSSxRQUFRLFFBQVEsR0FBUixDQUFZLE1BQVosQ0FBWjtBQUNBLGtCQUFRLFVBQVUsS0FBVixNQUFxQixRQUFyQixHQUFnQyxNQUFNLEtBQXRDLEdBQThDLEtBQXREO0FBQ0EsaUJBQU8sRUFBRSxJQUFGLEVBQVEsS0FBUixDQUFQO0FBQ0QsU0FKYyxDQUFmO0FBS0EsZUFBTyxFQUFFLElBQUYsRUFBUTtBQUNiLGNBQUk7QUFDRixtQkFBTyxpQkFBTTtBQUNYLG9CQUFLLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQSxxQkFBTyxLQUFQLENBQWEsS0FBYjtBQUNEO0FBSkMsV0FEUztBQU9iLGlCQUFPO0FBQ0wsb0JBQVE7QUFESCxXQVBNO0FBVWIsaUJBQU87QUFDTCw2Q0FBaUMsTUFBSyxRQUFMLEtBQWtCO0FBRDlDO0FBVk0sU0FBUixFQWFKLE1BYkksQ0FBUDtBQWNELE9BcEJZLENBQWI7QUFxQkEsVUFBTSxRQUFRLEVBQUUsT0FBRixFQUFXLElBQVgsQ0FBZDtBQUNBLFVBQU0sUUFBUSxFQUFFLE9BQUYsRUFBVztBQUN2QixlQUFPO0FBQ0wsa0RBQXdDO0FBRG5DO0FBRGdCLE9BQVgsRUFJWCxDQUFDLEtBQUQsRUFBUSxLQUFSLENBSlcsQ0FBZDtBQUtBLGFBQU8sRUFBRSxLQUFGLEVBQVM7QUFDZCxlQUFPO0FBQ0wsaUJBQU8sTUFERjtBQUVMLHNCQUFZO0FBRlA7QUFETyxPQUFULEVBS0osQ0FBQyxLQUFELENBTEksQ0FBUDtBQU1EO0FBM0MwQixHQUFYLENBQWxCO0FBNkNBLFNBQU8sSUFBSSxTQUFKLEdBQWdCLE1BQWhCLEdBQXlCLEdBQWhDO0FBQ0Q7O0FBRUQsT0FBTyxPQUFQLEdBQWlCLGlCQUFqQjs7O2tRQ3ZEQTs7OztBQUlBOzs7Ozs7eUJBQ3dCLE9BQU8sSUFBUCxDQUFZLEs7SUFBN0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNiLElBQU0sWUFBWSxPQUFPLEdBQVAsQ0FBVyxHQUFYLENBQWUsU0FBakM7QUFDQSxJQUFNLGVBQWUsUUFBUSwwQkFBUixDQUFyQjs7QUFFQSxJQUFNLG9CQUFvQixJQUFJLE1BQUosQ0FBVyxlQUFYLENBQTFCOztBQUVBLElBQU0saUJBQWlCLFNBQWpCLGNBQWlCLEdBQXFCO0FBQUE7O0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzFDLE9BQUssSUFBTDtBQUNBLE1BQU0sVUFBVSxRQUFRLE9BQVIsSUFBbUIsSUFBSSxZQUFKLGNBQy9CLE9BRCtCLEVBQW5DO0FBR0EsT0FBSyxVQUFMLENBQWdCLE9BQWhCO0FBQ0EsTUFBTSxvQkFBb0IsSUFBSSxpQkFBSixDQUFzQjtBQUM5QztBQUQ4QyxHQUF0QixDQUExQjtBQUdBLE9BQUssb0JBQUwsQ0FBMEIsaUJBQTFCO0FBQ0Esb0JBQWtCLEtBQWxCLEdBQTBCLFFBQVEsS0FBbEM7QUFDQSxVQUFRLElBQVIsQ0FBYSxPQUFiLEVBQXNCO0FBQUEsV0FBSyxNQUFLLElBQUwsQ0FBVSxPQUFWLENBQUw7QUFBQSxHQUF0QjtBQUNBLE9BQUssT0FBTCxHQUFlLFlBQVc7QUFDeEIsWUFBUSxNQUFSO0FBQ0EsV0FBTyxLQUFLLElBQUwsRUFBVyxTQUFYLENBQVA7QUFDRCxHQUhEO0FBSUQsQ0FoQkQ7O0FBa0JBLFFBQVEsY0FBUixFQUF3QixTQUF4Qjs7QUFHQSxPQUFPLE9BQVAsR0FBaUIsY0FBakI7OztBQ2hDQTs7Ozs7O3lCQUN3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNDLFUsR0FBYyxPQUFPLElBQVAsQ0FBWSxNLENBQWpDLE07O0FBQ1AsSUFBTSxNQUFNLE9BQU8sR0FBUCxDQUFXLEdBQXZCO0FBQ0EsSUFBTSxVQUFVLFFBQVEsMkJBQVIsQ0FBaEI7QUFDQSxJQUFNLGVBQWUsUUFBUSxTQUFSLENBQXJCOztBQUVBLElBQU0sU0FBUyxTQUFULE1BQVMsR0FBVztBQUFBOztBQUN4QixPQUFLLElBQUwsRUFBVztBQUNULFVBQU0sU0FERztBQUVULFVBQU0saUJBQWEsSUFGVjtBQUdULGFBQVMsT0FIQTtBQUlULGlCQUFhLENBQ1g7QUFDRSxZQUFNLFNBRFI7QUFFRSxpQkFBVztBQUZiLEtBRFcsRUFLWDtBQUNFLFlBQU0sU0FEUjtBQUVFLGlCQUFXO0FBRmIsS0FMVyxFQVNYO0FBQ0UsWUFBTSxXQURSO0FBRUUsaUJBQVc7QUFGYixLQVRXO0FBSkosR0FBWDtBQW1CQSxNQUFNLGtCQUFrQjtBQUN0QixjQUFVLENBRFk7QUFFdEIsV0FBTztBQUZlLEdBQXhCO0FBSUEsTUFBTSxjQUFjO0FBQ2xCLGlCQUFhO0FBREssR0FBcEI7QUFHQSxPQUFLLEtBQUwsQ0EzQndCLENBMkJaOztBQUVaO0FBQ0EsTUFBSSxLQUFLLE9BQUwsQ0FBYSxVQUFiLEVBQUosRUFBK0I7QUFDN0IsU0FBSyxjQUFMLENBQW9CO0FBQ2xCLGVBQVM7QUFEUyxLQUFwQjtBQUdBLFNBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsT0FBbEIsRUFBMkIsWUFBTTtBQUMvQjtBQUNBLFVBQUksTUFBSyxjQUFMLENBQW9CLE1BQUssTUFBTCxDQUFZLEdBQWhDLENBQUosRUFBMEM7QUFDeEMsWUFBSSxDQUFDLElBQUksT0FBVCxFQUFrQixJQUFJLEVBQUosQ0FBTyxPQUFQLEVBQWdCLE1BQUssUUFBTCxDQUFjLElBQWQsQ0FBbUIsS0FBbkIsQ0FBaEIsRUFBbEIsS0FDSyxNQUFLLFFBQUw7QUFDTjtBQUNELFlBQUssY0FBTCxDQUFvQjtBQUNsQixpQkFBUztBQURTLE9BQXBCO0FBR0EsVUFBTSxNQUFNLE1BQUssT0FBTCxDQUFhLE1BQWIsRUFBWjtBQUNBLFlBQUssTUFBTCxDQUFZLEdBQVo7QUFDQSxZQUFLLFFBQUwsQ0FBYyxJQUFkO0FBQ0QsS0FaRDtBQWFBO0FBQ0EsU0FBSyxPQUFMLENBQWEsSUFBYixDQUFrQixLQUFLLE1BQXZCO0FBQ0Q7O0FBRUQ7QUFDQSxPQUFLLFFBQUwsR0FBZ0IsWUFBVztBQUN6QixRQUFJLEtBQUssTUFBTCxDQUFZLE9BQVosS0FBd0IsS0FBNUIsRUFBbUMsT0FBTyxLQUFQO0FBQ25DLFNBQUssTUFBTCxDQUFZLElBQVosR0FBbUIsS0FBSyxNQUFMLENBQVksSUFBWixJQUFxQiw4QkFBeEM7QUFDQSxTQUFLLFlBQUwsQ0FBa0IsZUFBbEI7QUFDQSxTQUFLLFFBQUwsQ0FBYztBQUNaLGNBQVEsS0FBSyxnQkFERDtBQUVaLGVBQVMsS0FGRztBQUdaLFlBQU07QUFITSxLQUFkLEVBSUcsZUFKSDtBQUtELEdBVEQ7O0FBV0E7QUFDQSxPQUFLLGdCQUFMLEdBQXdCLFlBQXFCO0FBQUEsUUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzNDLFFBQUksS0FBSyxPQUFMLENBQWEsU0FBYixHQUF5QixNQUF6QixHQUFrQyxDQUF0QyxFQUF5QztBQUN2QyxXQUFLLEtBQUwsR0FBYSxJQUFJLFlBQUosQ0FBaUIsT0FBakIsQ0FBYjtBQUNBLFVBQUksU0FBSixDQUFjLEtBQUssS0FBbkI7QUFDQSxVQUFJLENBQUMsWUFBWSxXQUFiLElBQTRCLEtBQUssT0FBTCxDQUFhLGdCQUFiLEVBQWhDLEVBQWlFO0FBQy9ELFlBQUksZUFBSixDQUFvQjtBQUNsQixnQkFBTSxTQURZO0FBRWxCLG1CQUFTLG9DQUZTO0FBR2xCLG9CQUFVO0FBSFEsU0FBcEI7QUFLQSxvQkFBWSxXQUFaLEdBQTBCLElBQTFCO0FBQ0Q7QUFDRixLQVhELE1BV087QUFDTCxVQUFJLGVBQUosQ0FBb0I7QUFDbEIsY0FBTSxPQURZO0FBRWxCLGlCQUFTO0FBRlMsT0FBcEI7QUFJRDtBQUNELFdBQU8sS0FBSyxLQUFaO0FBQ0QsR0FuQkQ7O0FBcUJBLE9BQUssZ0JBQUwsR0FBd0IsWUFBb0I7QUFBQSxRQUFYLE9BQVcsdUVBQUgsRUFBRzs7QUFDMUMsU0FBSyxLQUFMLElBQWMsSUFBSSxVQUFKLEVBQWQ7QUFDQSxTQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0QsR0FIRDs7QUFLQSxPQUFLLE1BQUwsR0FBYyxZQUFXO0FBQ3ZCLFNBQUssS0FBTCxHQUFhLElBQWI7QUFDQSxTQUFLLE1BQUwsQ0FBWSxPQUFaLElBQXVCLEtBQUssV0FBTCxFQUF2QjtBQUNBLFNBQUssT0FBTCxDQUFhLEtBQWI7QUFDRCxHQUpEO0FBS0QsQ0EvRkQ7O0FBaUdBLFFBQVEsTUFBUixFQUFnQixVQUFoQjs7QUFFQSxJQUFJLE1BQUo7Ozs7OztBQzFHQSxJQUFNLHdCQUF3QjtBQUM1QixVQUFRO0FBRG9CLENBQTlCOztBQUlBLElBQU0sb0JBQW9CLFNBQXBCLGlCQUFvQixDQUFTLElBQVQsRUFBZSxVQUFmLEVBQTJCLEtBQTNCLEVBQWtDLFFBQWxDLEVBQTRDO0FBQ3BFLE9BQUssSUFBTCxHQUFZLElBQVo7QUFDQSxPQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQSxPQUFLLFVBQUwsR0FBa0IsVUFBbEI7QUFDQSxPQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0QsQ0FMRDs7QUFPTyxJQUFNLDREQUEwQixTQUExQix1QkFBMEIsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDMUQsS0FBRyxXQUFILENBQWUsT0FBZixDQUF1QixJQUF2QixDQUE0QixJQUE1QixFQUFrQztBQUNoQyxxQkFBaUIsd0JBQXdCLGdCQURUO0FBRWhDLG1CQUFlLHdCQUF3QixjQUZQO0FBR2hDLHFCQUFpQix3QkFBd0I7QUFIVCxHQUFsQztBQUtBLE9BQUssS0FBTCxHQUFhLFFBQVEsS0FBckI7QUFDQSxPQUFLLGNBQUwsR0FBc0IsRUFBdEI7QUFDRCxDQVJNOztBQVVQLEdBQUcsUUFBSCxDQUFZLHVCQUFaLEVBQXFDLEdBQUcsV0FBSCxDQUFlLE9BQXBEOztBQUVBLHdCQUF3QixnQkFBeEIsR0FBMkMsVUFBUyxLQUFULEVBQWdCO0FBQ3pELE9BQUssY0FBTCxHQUFzQixLQUFLLGVBQUwsQ0FBcUIsS0FBckIsQ0FBdEI7QUFDQSxTQUFPLEtBQUssY0FBWjtBQUNELENBSEQ7O0FBS0Esd0JBQXdCLGNBQXhCLEdBQXlDLFVBQVMsS0FBVCxFQUFnQjtBQUN2RCxNQUFJLEtBQUssY0FBTCxJQUF1QixLQUFLLGNBQUwsQ0FBb0IsTUFBL0MsRUFBc0Q7QUFDcEQsU0FBSyxhQUFMLENBQ0UsSUFBSSxpQkFBSixDQUNFLHNCQUFzQixNQUR4QixFQUVFLE1BQU0sVUFGUixFQUdFLEtBQUssS0FIUCxFQUlFLEtBQUssY0FKUCxDQURGO0FBT0Q7QUFDRCxTQUFPLElBQVA7QUFDRCxDQVhEOztBQWFBLHdCQUF3QixTQUF4QixDQUFrQyxlQUFsQyxHQUFvRCxZQUEwQjtBQUFBOztBQUFBLGlGQUFKLEVBQUk7QUFBQSxNQUFoQixLQUFnQixRQUFoQixLQUFnQjtBQUFBLE1BQVQsR0FBUyxRQUFULEdBQVM7O0FBQzVFLFNBQU8sSUFBSSxrQkFBSixDQUF1QixLQUF2QixFQUE4QjtBQUNuQyxpQkFBYTtBQUFBLGFBQVMsVUFBVSxNQUFLLEtBQXhCO0FBQUEsS0FEc0I7QUFFbkMsa0JBQWUsWUFBWSxTQUFTLEdBQXRCLEdBQTZCLEVBQTdCLEdBQWtDO0FBRmIsR0FBOUIsQ0FBUDtBQUlELENBTEQ7O0FBT0Esd0JBQXdCLGdCQUF4QixHQUEyQyxVQUFTLEtBQVQsRUFBZ0I7QUFDekQsTUFBTSxPQUFPLE1BQU0sR0FBTixDQUFVLGdCQUFWLEVBQWI7QUFDQSxNQUFNLHVCQUF1QixLQUFLLGVBQUwsQ0FBcUIsS0FBckIsQ0FBN0I7QUFDQSxPQUFLLEtBQUwsQ0FBVyxNQUFYLEdBQW9CLHVCQUF3QixTQUF4QixHQUFtQyxFQUF2RDtBQUNELENBSkQ7O0FBTUEsd0JBQXdCLFNBQXhCLENBQWtDLGVBQWxDLEdBQW9ELFlBQVU7QUFDNUQsU0FBTyxLQUFQO0FBQ0QsQ0FGRDs7QUFJQSx3QkFBd0IsU0FBeEIsQ0FBa0MsTUFBbEMsR0FBMkMsVUFBUyxHQUFULEVBQWE7QUFDdEQsTUFBSSxDQUFDLEdBQUwsRUFBVTtBQUNSLFFBQU0sT0FBTyxLQUFLLE1BQUwsR0FBYyxnQkFBZCxFQUFiO0FBQ0EsU0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixFQUFwQjtBQUNEO0FBQ0QsS0FBRyxXQUFILENBQWUsT0FBZixDQUF1QixTQUF2QixDQUFpQyxNQUFqQyxDQUF3QyxJQUF4QyxDQUE2QyxJQUE3QyxFQUFtRCxHQUFuRDtBQUNELENBTkQ7Ozt5QkMxRDBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sbUJBQW1CLFFBQVEsa0NBQVIsQ0FBekI7O0FBRUEsU0FBUyxxQkFBVCxHQUEyQztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN6QztBQUNBLFVBQVEsRUFBUixHQUFhLGVBQWI7QUFDQSxVQUFRLEtBQVIsR0FBZ0IsUUFBUSxLQUFSLElBQWlCLDhCQUFqQztBQUNBLFVBQVEsSUFBUixHQUFlLGVBQWY7QUFDQSxVQUFRLFNBQVIsR0FBb0IsUUFBUSxTQUFSLElBQXFCLElBQXpDO0FBQ0EsVUFBUSxhQUFSLEdBQXdCLFFBQVEsYUFBUixLQUEwQixTQUExQixHQUFzQyxJQUF0QyxHQUE2QyxRQUFRLGFBQTdFO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEscUJBQVIsRUFBK0IsZ0JBQS9COztBQUVBLE9BQU8sT0FBUCxHQUFpQixxQkFBakI7Ozs7Ozs7QUNmQTs7Ozs7Ozs7Ozs7O0lBQ08sTyxHQUFXLE9BQU8sUSxDQUFsQixPO21CQUN3QyxPQUFPLEk7SUFBL0MsZ0IsZ0JBQUEsZ0I7SUFBa0Isa0IsZ0JBQUEsa0I7SUFDbEIsaUIsR0FBcUIsT0FBTyxJQUFQLENBQVksSSxDQUFqQyxpQjt5QkFDc0IsT0FBTyxJQUFQLENBQVksSztJQUFsQyxJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFBUyxHLHNCQUFBLEc7SUFDZCxRLEdBQWEsT0FBTyxJQUFQLENBQVksUSxDQUF6QixROzRCQUlKLE9BQU8sSUFBUCxDQUFZLFE7SUFGZCxnQyx5QkFBQSxnQztJQUNBLHNCLHlCQUFBLHNCO0lBRUssYyxHQUFrQixPQUFPLElBQVAsQ0FBWSxRLENBQTlCLGM7SUFDQSxhLEdBQWlCLE9BQU8sSUFBUCxDQUFZLE0sQ0FBN0IsYTtJQUNBLGdCLEdBQW9CLE9BQU8sSUFBUCxDQUFZLE8sQ0FBaEMsZ0I7SUFDQSwyQixHQUErQixPQUFPLElBQVAsQ0FBWSxPLENBQTNDLDJCO0lBQ0Esc0IsR0FBMEIsT0FBTyxJQUFQLENBQVksRyxDQUF0QyxzQjt5QkFDc0IsT0FBTyxJQUFQLENBQVksSztJQUFsQyxLLHNCQUFBLEs7SUFBTyxXLHNCQUFBLFc7SUFDUCxPLEdBQVcsT0FBTyxJQUFQLENBQVksS0FBWixDQUFrQixRLENBQTdCLE87SUFDQSxHLEdBQU8sT0FBTyxHLENBQWQsRztJQUNPLGlCLEdBQW9CLE9BQU8sSUFBUCxDQUFZLE1BQVosQ0FBbUIsTyxDQUE5QyxNOztBQUNQLElBQU0sSUFBSSxPQUFPLElBQVAsQ0FBWSxJQUFaLENBQWlCLE9BQTNCO3VCQUN5RCxPQUFPLEVBQVAsQ0FBVSxLO0lBQTVELHNCLG9CQUFBLHNCO0lBQXdCLHNCLG9CQUFBLHNCOztBQUMvQixJQUFNLG1CQUFtQixRQUFRLCtCQUFSLENBQXpCO0FBQ0EsSUFBTSx5QkFBeUIsUUFBUSxxQ0FBUixDQUEvQjtBQUNBLElBQU0sZ0NBQWdDLG9CQUF0QztBQUNBLElBQU0sZ0JBQWdCO0FBQ3BCLFdBQVM7QUFEVyxDQUF0Qjs7QUFJQSxTQUFTLGNBQVQsR0FBMEI7QUFBQTs7QUFDeEIsT0FBSyxJQUFMO0FBQ0E7QUFDQSxPQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDQTtBQUNBLE9BQUssV0FBTCxHQUFtQixFQUFuQjtBQUNBLE9BQUssVUFBTDtBQUNBLE9BQUssWUFBTDtBQUNBO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0E7QUFDQSxPQUFLLFVBQUwsR0FBa0IsRUFBbEI7QUFDQTtBQUNBLE9BQUssT0FBTCxHQUFlO0FBQ2IsV0FBTztBQUNMLHFCQUFlO0FBQ2IsZ0JBQVEsRUFESztBQUViLGVBQU87QUFGTTtBQURWO0FBRE0sR0FBZjtBQVFBOzs7O0FBSUEsT0FBSyx3QkFBTCxHQUFnQyxFQUFoQzs7QUFFQSxPQUFLLFVBQUwsR0FBa0I7QUFDaEIsVUFBTSxTQURVLEVBQ0M7QUFDakIsV0FBTyxLQUZTO0FBR2hCLGNBQVUsU0FITSxFQUdLO0FBQ3JCLFFBQUk7QUFDRixZQUFNLFNBREosRUFDZTtBQUNqQixhQUFPLFNBRkwsQ0FFZTtBQUZmO0FBSlksR0FBbEI7O0FBVUE7QUFDQTtBQUNBLE9BQUssNkJBQUwsR0FBcUM7QUFDbkMsZUFBVyxFQUR3QjtBQUVuQywyQkFBdUI7QUFGWSxHQUFyQzs7QUFLQTtBQUNBLE9BQUssS0FBTCxHQUFhO0FBQ1gsVUFBTSxLQURLLEVBQ0U7QUFDYixlQUFXLEVBRkE7QUFHWCxxQkFBaUIsSUFITjtBQUlYLHlCQUFxQixJQUpWO0FBS1gsYUFBUyxJQUxFO0FBTVgsZUFBVztBQU5BLEdBQWI7O0FBU0E7O0FBRUEsT0FBSywwQ0FBTCxHQUFrRDtBQUNoRDtBQURnRCxHQUFsRDs7QUFJQSxPQUFLLGdCQUFMLEdBQXdCLEtBQXhCO0FBQ0E7QUFDQSxPQUFLLFdBQUwsR0FBbUIsSUFBSSxVQUFKLENBQWUsS0FBZixDQUFuQjtBQUNBO0FBQ0EsT0FBSyw0QkFBTCxHQUFvQyxlQUFNO0FBQ3hDLFFBQUksSUFBSSxNQUFKLENBQVcsU0FBWCxNQUEwQixJQUFJLE1BQUosQ0FBVyxVQUFYLEVBQTlCLEVBQXNEO0FBQ3BELFVBQUksa0JBQWtCLE1BQUssS0FBTCxDQUFXLGVBQWpDO0FBQ0EseUJBQW1CLGdCQUFnQixhQUFoQixFQUFuQixJQUFzRCxnQkFBZ0IsY0FBaEIsRUFBdEQ7QUFDRDtBQUNGLEdBTEQ7O0FBT0EsT0FBSyxXQUFMLENBQWlCLEVBQWpCLENBQW9CLDZCQUFwQixFQUFtRCxLQUFLLDRCQUF4RDtBQUNBO0FBQ0EsT0FBSyxlQUFMLEdBQXVCLEVBQXZCO0FBQ0EsT0FBSyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsT0FBSyxJQUFMLEdBQVksWUFBb0I7QUFBQTs7QUFBQSxRQUFYLE1BQVcsdUVBQUosRUFBSTs7QUFDOUIsU0FBSyxVQUFMLEdBQWtCLE9BQU8sU0FBekI7QUFDQSxTQUFLLFlBQUwsR0FBb0IsT0FBTyxZQUEzQjtBQUNBLFNBQUssWUFBTCxHQUFvQixJQUFJLFdBQUosQ0FBZ0I7QUFDbEMsVUFBSSxTQUQ4QjtBQUVsQyxpQkFBVztBQUZ1QixLQUFoQixDQUFwQjtBQUlBO0FBQ0EsMkJBQXVCLGNBQXZCLENBQXNDLEtBQUssWUFBM0M7QUFDQSxTQUFLLE1BQUwsR0FBYyxNQUFkO0FBQ0EsU0FBSyxlQUFMLEdBQXVCLEVBQXZCO0FBQ0EsU0FBSyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0EsU0FBSyxLQUFMLENBQVcsU0FBWCxHQUF1QixFQUF2QjtBQUNBLFFBQUksU0FBUyxLQUFLLDZCQUFMLEVBQWI7QUFDQSxRQUFNLHlCQUF5QixFQUEvQjtBQWQ4QjtBQUFBO0FBQUE7O0FBQUE7QUFlOUIsMkJBQW9CLE1BQXBCLDhIQUE0QjtBQUFBLFlBQWpCLEtBQWlCOztBQUMxQjtBQUNBLCtCQUF1QixJQUF2QixDQUE0QixNQUFNLGtCQUFOLENBQXlCO0FBQ25ELHFCQUFXLEtBQUssVUFEbUM7QUFFbkQsd0JBQWMsS0FBSztBQUZnQyxTQUF6QixDQUE1QjtBQUlEO0FBckI2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXNCOUIsWUFBUSxVQUFSLENBQW1CLHNCQUFuQixFQUNHLElBREgsQ0FDUSwwQkFBbUI7QUFDdkIscUJBQWUsT0FBZixDQUF1QixtQkFBVztBQUFBLFlBQ3pCLE1BRHlCLEdBQ1IsT0FEUSxDQUN6QixNQUR5QjtBQUFBLFlBQ2pCLEtBRGlCLEdBQ1IsT0FEUSxDQUNqQixLQURpQjs7QUFFaEMsWUFBSSxXQUFXLFdBQWYsRUFBNEI7QUFDMUIsY0FBTSxnQkFBZ0IsS0FBdEI7QUFDQSxjQUFNLFVBQVUsY0FBYyxLQUFkLEVBQWhCO0FBQ0EsaUJBQUssZUFBTCxDQUFxQixPQUFyQixJQUFnQyxhQUFoQztBQUNBLGlCQUFLLHdCQUFMLENBQThCLGFBQTlCO0FBQ0EsaUJBQUssU0FBTCxDQUFlLE9BQWYsSUFBMEIsSUFBMUI7QUFDRCxTQU5ELE1BTU8sT0FBSyxnQkFBTCxHQUF3QixJQUF4QjtBQUNSLE9BVEQ7QUFVRixhQUFLLE1BQUw7QUFDRCxLQWJEO0FBY0QsR0FwQ0Q7QUFxQ0EsT0FBSyxNQUFMLEdBQWMsWUFBVztBQUN2QixTQUFLLDRDQUFMO0FBQ0E7QUFDQSxTQUFLLGNBQUw7QUFDQTtBQUNBLFNBQUssWUFBTCxDQUFrQixTQUFsQixDQUE0QixLQUFLLFNBQUwsRUFBNUI7QUFDQTtBQUNBLFNBQUssZUFBTDtBQUNBO0FBQ0EsU0FBSywwQkFBTDtBQUNBO0FBQ0EsU0FBSyxNQUFMLENBQVk7QUFDVixXQUFLLElBQUksYUFBSixDQUFRO0FBQ1gsaUJBQVE7QUFERyxPQUFSO0FBREssS0FBWjtBQUtBLFNBQUssMkJBQUw7QUFDQSxTQUFLLElBQUwsQ0FBVSxPQUFWO0FBQ0QsR0FsQkQ7QUFtQkQ7O0FBRUQsUUFBUSxjQUFSLEVBQXdCLGFBQXhCOztBQUVBLElBQU0sUUFBUSxlQUFlLFNBQTdCOztBQUVBOztBQUVBLE1BQU0sV0FBTixHQUFvQixZQUFVO0FBQzVCLFNBQU8sZ0JBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0scUJBQU4sR0FBOEIsVUFBUyxPQUFULEVBQWtCO0FBQzlDLFNBQU8sS0FBSyxlQUFMLENBQXFCLE9BQXJCLEtBQWlDLEVBQXhDO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsU0FBTyxLQUFLLGVBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0saUJBQU4sR0FBMEIsWUFBeUM7QUFBQSxpRkFBSixFQUFJO0FBQUEsTUFBL0IsT0FBK0IsUUFBL0IsT0FBK0I7QUFBQSw2QkFBdEIsVUFBc0I7QUFBQSxNQUF0QixVQUFzQixtQ0FBVixFQUFVOztBQUNqRSxNQUFJLENBQUMsS0FBSyxlQUFMLENBQXFCLE9BQXJCLENBQUwsRUFDRSxLQUFLLGVBQUwsQ0FBcUIsT0FBckIsSUFBZ0MsRUFBaEM7QUFDRixPQUFLLElBQUksSUFBRSxDQUFYLEVBQWMsSUFBSSxXQUFXLE1BQTdCLEVBQXFDLEdBQXJDLEVBQTBDO0FBQ3hDLFFBQU0sWUFBWSxXQUFXLENBQVgsQ0FBbEI7QUFDQSxTQUFLLGVBQUwsQ0FBcUIsT0FBckIsRUFBOEIsSUFBOUIsQ0FBbUMsU0FBbkM7QUFDRDtBQUNGLENBUEQ7O0FBU0EsTUFBTSxVQUFOLEdBQW1CLFlBQXlCO0FBQUEsa0ZBQUosRUFBSTtBQUFBLE1BQWYsT0FBZSxTQUFmLE9BQWU7O0FBQzFDLE1BQU0sVUFBVSxLQUFLLGNBQUwsQ0FBb0IsT0FBcEIsQ0FBaEI7QUFDQSxTQUFPLFFBQVEsVUFBUixFQUFQO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLFVBQU4sR0FBbUIsWUFBeUI7QUFBQSxrRkFBSixFQUFJO0FBQUEsTUFBZixPQUFlLFNBQWYsT0FBZTs7QUFDMUMsTUFBTSxVQUFVLEtBQUssY0FBTCxDQUFvQixPQUFwQixDQUFoQjtBQUNBLE1BQU0sT0FBTyxRQUFRLGFBQVIsRUFBYjtBQUNBLFNBQU8sS0FBSyxVQUFMLEVBQVA7QUFDRCxDQUpEOztBQU1BLE1BQU0sU0FBTixHQUFrQixVQUFTLEtBQVQsRUFBZ0IsR0FBaEIsRUFBcUI7QUFDckMsTUFBSSxDQUFDLEtBQUssWUFBTCxDQUFrQixLQUFsQixDQUFMLEVBQStCLEtBQUssWUFBTCxDQUFrQixLQUFsQixJQUEyQixFQUEzQjtBQUMvQixNQUFJLENBQUMsS0FBSyxZQUFMLENBQWtCLEtBQWxCLEVBQXlCLElBQXpCLENBQThCO0FBQUEsV0FBYSxjQUFjLEdBQTNCO0FBQUEsR0FBOUIsQ0FBTCxFQUFvRSxLQUFLLFlBQUwsQ0FBa0IsS0FBbEIsRUFBeUIsSUFBekIsQ0FBOEIsR0FBOUI7QUFDcEUsU0FBTyxHQUFQO0FBQ0QsQ0FKRDs7QUFNQSxNQUFNLFdBQU4sR0FBb0IsVUFBUyxLQUFULEVBQWdCLEdBQWhCLEVBQXFCO0FBQ3ZDLE9BQUssWUFBTCxDQUFrQixLQUFsQixJQUEyQixLQUFLLFlBQUwsQ0FBa0IsS0FBbEIsRUFBeUIsTUFBekIsQ0FBZ0M7QUFBQSxXQUFhLGNBQWMsR0FBM0I7QUFBQSxHQUFoQyxDQUEzQjtBQUNELENBRkQ7O0FBSUE7O0FBRUEsTUFBTSw0Q0FBTixHQUFxRCxZQUFVO0FBQzdELE9BQUssU0FBTCxHQUFpQixPQUFqQixDQUF5Qix3QkFBZTtBQUN0QyxpQkFBYSxnQkFBYixHQUFnQyxPQUFoQyxDQUF3QywyQkFBeEMsRUFBcUUsWUFBTTtBQUN6RSxVQUFJLGVBQUosQ0FBb0I7QUFDbEIsY0FBTSxTQURZO0FBRWxCLGtCQUFVLGFBQWEsT0FBYixHQUF1QixXQUF2QixFQUZRO0FBR2xCLGlCQUFTO0FBSFMsT0FBcEI7QUFLRCxLQU5EO0FBT0QsR0FSRDtBQVNELENBVkQ7O0FBWUE7OztBQUdBLE1BQU0sMkJBQU4sR0FBb0MsWUFBVTtBQUFBOztBQUM1QyxNQUFNLHNCQUFzQixJQUFJLFVBQUosQ0FBZSxjQUFmLENBQTVCO0FBQ0EsT0FBSyxVQUFMLENBQWdCLElBQWhCLENBQXFCO0FBQ25CLFlBQVEsYUFEVztBQUVuQixTQUFLLG9CQUFvQixPQUFwQixDQUE0QixhQUE1QixFQUEyQyxpQkFBc0I7QUFBQSxVQUFwQixLQUFvQixTQUFwQixLQUFvQjtBQUFBLFVBQWIsT0FBYSxTQUFiLE9BQWE7O0FBQ3BFLGFBQUssc0JBQUwsQ0FBNEI7QUFDMUIsb0JBRDBCO0FBRTFCO0FBRjBCLE9BQTVCO0FBSUQsS0FMSTtBQUZjLEdBQXJCO0FBU0QsQ0FYRDs7QUFhQSxNQUFNLDZCQUFOLEdBQXNDLFlBQVU7QUFDOUMsTUFBTSxzQkFBc0IsSUFBSSxVQUFKLENBQWUsY0FBZixDQUE1QjtBQUNBLE9BQUssVUFBTCxDQUFnQixPQUFoQixDQUF3QjtBQUFBLFFBQUUsTUFBRixTQUFFLE1BQUY7QUFBQSxRQUFVLEdBQVYsU0FBVSxHQUFWO0FBQUEsV0FBbUIsb0JBQW9CLEVBQXBCLENBQXVCLE1BQXZCLEVBQStCLEdBQS9CLENBQW5CO0FBQUEsR0FBeEI7QUFDRCxDQUhEOztBQUtBOzs7O0FBSUEsTUFBTSxzQkFBTixHQUErQixZQUE2QjtBQUFBOztBQUFBLGtGQUFILEVBQUc7QUFBQSxNQUFuQixLQUFtQixTQUFuQixLQUFtQjtBQUFBLE1BQVosT0FBWSxTQUFaLE9BQVk7O0FBQzFEO0FBQ0EsTUFBTSxVQUFVLE1BQU0sRUFBdEI7QUFDQTtBQUNBLE1BQU0sWUFBWSxRQUFRLFVBQVIsQ0FBbUIsT0FBbkIsQ0FBbEI7QUFDQSxPQUFLLFlBQUwsR0FBb0IsT0FBcEIsQ0FBNEI7QUFBQSxXQUFXLFFBQVEsT0FBUixDQUFnQixRQUFRLEtBQVIsT0FBb0IsT0FBcEMsQ0FBWDtBQUFBLEdBQTVCO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLGdCQUFqQjtBQUNBLE1BQU0sVUFBVSxLQUFLLGNBQUwsQ0FBb0IsT0FBcEIsQ0FBaEI7QUFDQTs7QUFSMEQsOEJBUzFDLFFBQVEscUJBQVIsRUFUMEM7QUFBQSxNQVNuRCxLQVRtRCx5QkFTbkQsS0FUbUQ7QUFVMUQ7OztBQUNBLE1BQUksUUFBUSxRQUFaLEVBQXNCO0FBQ25CLFdBQU8sS0FBUCxLQUFpQixXQUFsQixJQUFrQyxLQUFLLFdBQUwsQ0FBaUIsTUFBakIsR0FBMEIsSUFBMUIsQ0FBK0IsU0FBL0IsRUFBMEMsWUFBTTtBQUNoRixVQUFNLFdBQVcsT0FBSyxXQUFMLENBQWlCLFdBQWpCLEVBQWpCO0FBQ0EsVUFBTSxNQUFNLE9BQUssV0FBTCxDQUFpQixNQUFqQixFQUFaO0FBQ0E7QUFDQSxVQUFNLGVBQWUsU0FBUyx1QkFBdUIsSUFBSSxPQUFKLEdBQWMsYUFBZCxFQUF2QixFQUFzRCxRQUF0RCxDQUFULENBQXJCO0FBQ0E7QUFDQTtBQUNBLFVBQUksZUFBZSxLQUFuQixFQUEwQjtBQUN4QixZQUFNLGFBQWEsdUJBQXVCLEtBQXZCLEVBQThCLFFBQTlCLENBQW5CO0FBQ0EsWUFBSSxPQUFKLEdBQWMsYUFBZCxDQUE0QixVQUE1QjtBQUNEO0FBQ0YsS0FYaUMsQ0FBbEM7QUFZRDtBQUNEO0FBQ0EsVUFBUSxLQUFSLENBQWM7QUFDWixZQUFRO0FBQ04sWUFBTSxTQURBLENBQ1U7QUFEVjtBQURJLEdBQWQsRUFLRyxJQUxILENBS1EsaUJBQW1CO0FBQUEsK0JBQWpCLFFBQWlCO0FBQUEsUUFBakIsUUFBaUIsa0NBQVIsRUFBUTs7QUFDdkI7QUFDQTs7OztBQUlBLFFBQU0sVUFBVSxRQUFRLFFBQVIsR0FBbUIsZUFBbkIsR0FBcUMsU0FBckMsR0FBaUQsV0FBakQsR0FBK0QsSUFBL0QsQ0FBb0U7QUFBQSxhQUFXLFFBQVEsS0FBUixNQUFtQixTQUE5QjtBQUFBLEtBQXBFLENBQWhCO0FBQ0EsUUFBSSxPQUFKLEVBQVk7QUFDVixjQUFRLFdBQVIsTUFBeUIsT0FBSyxXQUFMLENBQWlCLGNBQWpCLENBQWdDLFFBQVEsV0FBUixFQUFoQyxDQUF6QjtBQUNBLGNBQVEsV0FBUixDQUFvQixJQUFwQjtBQUNBLFVBQU0sVUFBVSxRQUFRLFVBQVIsRUFBaEI7QUFDQSxhQUFLLGtCQUFMLENBQXdCLE9BQXhCO0FBQ0EsVUFBTSxXQUFXLFFBQVEscURBQVIsQ0FBakI7QUFDQSxVQUFNLFVBQVU7QUFDZCxnQkFBUTtBQUNOLGlCQUFPLFFBQVEsUUFBUixFQUREO0FBRU4sb0JBQVUsQ0FBQyxPQUFEO0FBRkosU0FETTtBQUtkLGlCQUFTO0FBQ1A7QUFETztBQUxLLE9BQWhCO0FBU0EsVUFBTSxzQkFBc0IsSUFBSSxRQUFKLENBQWE7QUFDdkMsaUJBQVM7QUFEOEIsT0FBYixDQUE1QjtBQUdBLDBCQUFvQixLQUFwQixDQUEwQixPQUExQixFQUNHLElBREgsQ0FDUTtBQUFBLGVBQU0sUUFBUSxJQUFSLEdBQ1QsSUFEUyxDQUNKO0FBQUEsaUJBQU0sT0FBSyxVQUFMLEVBQU47QUFBQSxTQURJLENBQU47QUFBQSxPQURSLEVBR0csSUFISCxDQUdRO0FBQUEsZUFBSyxRQUFRLFFBQVIsRUFBTDtBQUFBLE9BSFI7QUFJRDtBQUNGLEdBbkNILEVBb0NHLElBcENILENBb0NRO0FBQUEsV0FBTyxRQUFRLEdBQVIsQ0FBWSxHQUFaLENBQVA7QUFBQSxHQXBDUjtBQXFDRCxDQS9ERDs7QUFpRUE7OztBQUdBLE1BQU0sMEJBQU4sR0FBbUMsWUFBb0I7QUFBQSxNQUFYLElBQVcsdUVBQU4sSUFBTTs7QUFDckQsT0FBSyxXQUFMLENBQWlCLHVCQUFqQixDQUF5QyxJQUF6QztBQUNELENBRkQ7O0FBSUE7Ozs7QUFJQSxNQUFNLGtCQUFOLEdBQTJCLFVBQVMsT0FBVCxFQUFpQjtBQUMxQyxPQUFLLEtBQUwsQ0FBVyxlQUFYLEdBQTZCLE9BQTdCO0FBQ0QsQ0FGRDs7QUFJQTs7O0FBR0EsTUFBTSxrQkFBTixHQUEyQixZQUFVO0FBQ25DLFNBQU8sS0FBSyxLQUFMLENBQVcsZUFBbEI7QUFDRCxDQUZEOztBQUlBOzs7O0FBSUE7QUFDQSxNQUFNLGFBQU4sR0FBc0IsVUFBUyxPQUFULEVBQTZCO0FBQUEsTUFBWCxPQUFXLHVFQUFILEVBQUc7QUFBQSxNQUMxQyxRQUQwQyxHQUNsQixPQURrQixDQUMxQyxRQUQwQztBQUFBLE1BQ2hDLFVBRGdDLEdBQ2xCLE9BRGtCLENBQ2hDLFVBRGdDOztBQUVqRCxNQUFNLFVBQVUsSUFBSSxPQUFKLEVBQWhCO0FBQ0EsY0FBWSxRQUFRLFdBQVIsQ0FBb0IsSUFBSSxHQUFHLElBQUgsQ0FBUSxTQUFTLElBQWpCLENBQUosQ0FBMkIsU0FBUyxXQUFwQyxDQUFwQixDQUFaO0FBQ0EsVUFBUSxhQUFSLENBQXNCLFVBQXRCO0FBQ0EsVUFBUSxjQUFSO0FBQ0EsTUFBTSxVQUFVLEtBQUssY0FBTCxDQUFvQixPQUFwQixDQUFoQjtBQUNBLE1BQU0sZUFBZSxRQUFRLFFBQVIsR0FBbUIsZUFBbkIsRUFBckI7QUFDQSxNQUFNLFVBQVUsUUFBUSxVQUFSLEVBQWhCO0FBQ0EsZUFBYSxTQUFiLEdBQXlCLFVBQXpCLENBQW9DLE9BQXBDO0FBQ0EsVUFBUSxPQUFSLENBQWdCLE9BQWhCLEVBQXlCLE9BQXpCLEVBQWtDLEtBQWxDO0FBQ0EsU0FBTyxPQUFQO0FBQ0QsQ0FaRDs7QUFjQSxNQUFNLGdCQUFOLEdBQXlCLFlBQVc7QUFDbEMsU0FBTyxLQUFLLGdCQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGFBQU4sR0FBc0IsWUFBVztBQUMvQixTQUFPLEtBQUssV0FBWjtBQUNELENBRkQ7O0FBSUEsTUFBTSxpQkFBTixHQUEwQixZQUFXO0FBQ25DLE9BQUssSUFBTSxFQUFYLElBQWlCLGFBQWpCLEVBQWdDO0FBQzlCLEtBQUMsS0FBSyxjQUFMLENBQW9CLGNBQWMsRUFBZCxDQUFwQixDQUFELElBQTJDLG1CQUFtQixjQUFuQixDQUFrQyxjQUFjLEVBQWQsQ0FBbEMsQ0FBM0M7QUFDRDtBQUNGLENBSkQ7O0FBTUEsTUFBTSwrQkFBTixHQUF3QyxVQUFTLElBQVQsRUFBZTtBQUNyRCxNQUFNLFVBQVUsbUJBQW1CLGNBQW5CLENBQWtDLGNBQWMsT0FBaEQsQ0FBaEI7QUFDQSxNQUFNLGVBQWUsU0FBZixZQUFlLFFBQWlDO0FBQUEsUUFBL0IsT0FBK0IsU0FBL0IsT0FBK0I7QUFBQSxRQUF0QixPQUFzQixTQUF0QixPQUFzQjtBQUFBLFFBQWIsUUFBYSxTQUFiLFFBQWE7O0FBQ3BELFlBQVEsT0FBUixFQUFpQixHQUFqQixnQ0FBMkIsU0FBUyxPQUFULEVBQWtCLEdBQTdDLHNCQUFxRCxRQUFRLE9BQVIsRUFBaUIsR0FBdEU7QUFDQSxZQUFRLE9BQVIsRUFBaUIsTUFBakIsZ0NBQThCLFNBQVMsT0FBVCxFQUFrQixNQUFoRCxzQkFBMkQsUUFBUSxPQUFSLEVBQWlCLE1BQTVFO0FBQ0EsYUFBUyxPQUFULEVBQWtCLE1BQWxCLENBQXlCLE9BQXpCLENBQWlDLHNCQUFjO0FBQUEsVUFDdEMsRUFEc0MsR0FDaEMsVUFEZ0MsQ0FDdEMsRUFEc0M7O0FBRTdDLFVBQU0sT0FBTyxRQUFRLE9BQVIsRUFBaUIsTUFBakIsQ0FBd0IsSUFBeEIsQ0FBNkI7QUFBQSxlQUFjLFdBQVcsRUFBWCxLQUFrQixFQUFoQztBQUFBLE9BQTdCLENBQWI7QUFDQSxPQUFDLElBQUQsSUFBUyxRQUFRLE9BQVIsRUFBaUIsTUFBakIsQ0FBd0IsT0FBeEIsQ0FBZ0MsVUFBaEMsQ0FBVDtBQUNELEtBSkQ7QUFLQSxRQUFNLFVBQVUsU0FBUyxPQUFULEVBQWtCLE9BQWxCLElBQTRCLEVBQTVDO0FBQ0EsWUFBUSxPQUFSLENBQWdCLHNCQUFjO0FBQUEsVUFDckIsU0FEcUIsR0FDUixVQURRLENBQ3JCLFNBRHFCOztBQUU1QixVQUFNLE9BQU8sUUFBUSxPQUFSLEVBQWlCLE9BQWpCLENBQXlCLElBQXpCLENBQThCO0FBQUEsZUFBYyxXQUFXLFNBQVgsS0FBeUIsU0FBdkM7QUFBQSxPQUE5QixDQUFiO0FBQ0EsT0FBQyxJQUFELElBQVMsUUFBUSxPQUFSLEVBQWlCLE1BQWpCLENBQXdCLE9BQXhCLENBQWdDLFVBQWhDLENBQVQ7QUFDRCxLQUpEO0FBS0QsR0FkRDtBQWVBLE9BQUssSUFBTSxPQUFYLElBQXNCLE9BQXRCLEVBQStCO0FBQzdCO0FBQ0EsUUFBTSxVQUFVLEtBQUssT0FBTCxJQUFnQixJQUFoQixHQUNkLEtBQUssT0FBTyxJQUFQLENBQVksSUFBWixFQUFrQixDQUFsQixDQUFMLEVBQTJCLFNBQTNCLENBQXFDLE9BQXJDLElBQ0UsS0FBSyxPQUFPLElBQVAsQ0FBWSxJQUFaLEVBQWtCLENBQWxCLENBQUwsRUFBMkIsU0FEN0IsR0FDeUMsSUFGM0M7QUFHQSxRQUFJLE9BQUosRUFDRSxhQUFhO0FBQ1gsc0JBRFc7QUFFWCxzQkFGVztBQUdYLGdCQUFVO0FBSEMsS0FBYixFQURGLEtBTUs7QUFDSDtBQUNBLFVBQU0saUJBQWlCLE9BQU8sSUFBUCxDQUFZLElBQVosRUFBa0IsQ0FBbEIsQ0FBdkI7QUFDQSxVQUFNLGVBQWUsT0FBTyxJQUFQLENBQVksUUFBUSxPQUFSLEVBQWlCLFNBQTdCLENBQXJCO0FBQ0EsVUFBSSxhQUFhLE1BQWpCLEVBQXlCO0FBQ3ZCLFlBQUksYUFBYSxPQUFiLENBQXFCLGNBQXJCLE1BQXlDLENBQUMsQ0FBOUMsRUFBaUQ7QUFDL0MsdUJBQWE7QUFDWCxxQkFBUyxjQURFO0FBRVgscUJBQVMsSUFGRTtBQUdYLHNCQUFVLFFBQVEsT0FBUixFQUFpQjtBQUhoQixXQUFiO0FBS0Esa0JBQVEsT0FBUixFQUFpQixTQUFqQixDQUEyQixjQUEzQixJQUE2QyxLQUFLLGNBQUwsQ0FBN0M7QUFDQSxpQkFBTyxPQUFQO0FBQ0Q7QUFDRixPQVZELE1BVU8sS0FBSyxPQUFMLElBQWdCLFFBQVEsT0FBUixDQUFoQjtBQUNSO0FBQ0Y7QUFDRCxTQUFPLElBQVA7QUFDRCxDQTlDRDs7QUFnREEsTUFBTSxlQUFOLEdBQXdCLFlBQXdCO0FBQUEsa0ZBQUosRUFBSTtBQUFBLE1BQWQsRUFBYyxTQUFkLEVBQWM7QUFBQSxNQUFWLElBQVUsU0FBVixJQUFVOztBQUM5QyxNQUFJLE9BQU8sY0FBYyxPQUF6QixFQUFrQyxPQUFPLEtBQUssK0JBQUwsQ0FBcUMsSUFBckMsQ0FBUDtBQUNsQyxTQUFPLG1CQUFtQixjQUFuQixDQUFrQyxFQUFsQyxFQUFzQyxJQUF0QyxDQUFQO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLGNBQU4sR0FBdUIsVUFBUyxFQUFULEVBQWEsSUFBYixFQUFrQjtBQUN2QyxxQkFBbUIsY0FBbkIsQ0FBa0MsRUFBbEMsRUFBc0MsSUFBdEM7QUFDRCxDQUZEOztBQUlBLE1BQU0sY0FBTixHQUF1QixVQUFTLEVBQVQsRUFBWTtBQUNqQyxTQUFPLG1CQUFtQixjQUFuQixDQUFrQyxFQUFsQyxDQUFQO0FBQ0QsQ0FGRDs7QUFJQTs7Ozs7QUFLQSxNQUFNLG1CQUFOLEdBQTRCLFlBQXdDO0FBQUE7O0FBQUEsbUZBQUosRUFBSTtBQUFBLDRCQUE5QixLQUE4QjtBQUFBLE1BQTlCLEtBQThCLGdDQUF4QixJQUF3QjtBQUFBLDZCQUFsQixNQUFrQjtBQUFBLE1BQWxCLE1BQWtCLGlDQUFYLEtBQVc7O0FBQ2xFLFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFxQjtBQUN0QyxRQUFNLFVBQVUsbUJBQW1CLGNBQW5CLENBQWtDLGNBQWMsT0FBaEQsQ0FBaEI7QUFDQTtBQUNBLFFBQUksT0FBSixFQUFhO0FBQ1gsVUFBTSxXQUFXLEVBQWpCO0FBQ0EsVUFBTSxXQUFXLEVBQWpCO0FBQ0E7QUFDQSxpQkFBVyxZQUFJO0FBQ2IsYUFBSyxJQUFNLE9BQVgsSUFBc0IsT0FBdEIsRUFBK0I7QUFDN0IsbUJBQVMsSUFBVCxDQUFjLE9BQWQ7QUFDQSxjQUFNLFVBQVUsT0FBSyxjQUFMLENBQW9CLE9BQXBCLENBQWhCO0FBQ0EsY0FBTSxjQUFjLFFBQVEsT0FBUixDQUFwQjtBQUNBLG1CQUFTLElBQVQsQ0FBYyxPQUFLLE1BQUwsQ0FBWTtBQUN4Qiw0QkFEd0I7QUFFeEIsb0NBRndCO0FBR3hCO0FBSHdCLFdBQVosQ0FBZDtBQUtEO0FBQ0QsVUFBRSxJQUFGLENBQU8sS0FBUCxDQUFhLE1BQWIsRUFBbUIsUUFBbkIsRUFDRyxJQURILENBQ1E7QUFBQSxpQkFBSyxTQUFMO0FBQUEsU0FEUixFQUVHLElBRkgsQ0FFUTtBQUFBLGlCQUFPLE9BQU8sS0FBUCxDQUFQO0FBQUEsU0FGUixFQUdHLE1BSEgsQ0FHVSxZQUFLO0FBQ1gsb0JBQVUsU0FBUyxPQUFULENBQWlCLG1CQUFXO0FBQ3BDLG1CQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsTUFBM0I7QUFDRCxXQUZTLENBQVY7QUFHQTtBQUNBLGlCQUFLLGNBQUwsQ0FBb0IsY0FBYyxPQUFsQztBQUNELFNBVEg7QUFVRCxPQXJCRCxFQXFCRyxJQXJCSDtBQXVCRDtBQUNGLEdBL0JNLENBQVA7QUFnQ0QsQ0FqQ0Q7O0FBbUNBOzs7QUFHQSxNQUFNLDBCQUFOLEdBQW1DLFlBQVc7QUFBQTs7QUFDNUM7QUFDQTtBQUNBLE1BQUksaUJBQWlCLE1BQXJCLEVBQTZCLEtBQUssbUJBQUwsQ0FBeUI7QUFDcEQsWUFBUTtBQUQ0QyxHQUF6QjtBQUc3QixNQUFNLGFBQWMsbUJBQW1CLE9BQW5CLENBQTJCLFNBQTNCLEVBQXNDLFlBQUksQ0FBRSxDQUE1QyxDQUFwQjtBQUNBLE1BQU0sWUFBWSxtQkFBbUIsT0FBbkIsQ0FBMkIsUUFBM0IsRUFBcUMsWUFBSztBQUMxRCxXQUFLLG1CQUFMLENBQXlCO0FBQ3ZCLGFBQU07QUFEaUIsS0FBekIsRUFFRyxJQUZILENBRVEsWUFBSSxDQUNYLENBSEQsRUFHRyxLQUhILENBR1M7QUFBQSxhQUFRLElBQUksTUFBSixDQUFXLEtBQVgsQ0FBaUIsS0FBakIsQ0FBUjtBQUFBLEtBSFQ7QUFJRCxHQUxpQixDQUFsQjs7QUFPQSxPQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CO0FBQ2xCLFdBQVEsa0JBRFU7QUFFbEIsWUFBUSxTQUZVO0FBR2xCLFNBQUs7QUFIYSxHQUFwQjs7QUFNQSxPQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CO0FBQ2xCLFdBQVEsa0JBRFU7QUFFbEIsWUFBUSxRQUZVO0FBR2xCLFNBQUs7QUFIYSxHQUFwQjtBQU1ELENBMUJEOztBQTRCQSxNQUFNLDRCQUFOLEdBQXFDLFlBQVc7QUFDOUMsT0FBSyx1QkFBTCxDQUE2QixDQUFDLFFBQUQsRUFBVyxTQUFYLENBQTdCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLHVCQUFOLEdBQWdDLFlBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ25ELE9BQUssU0FBTCxDQUFlLE9BQWYsQ0FBdUIsc0JBQWM7QUFBQSxRQUM1QixLQUQ0QixHQUNOLFVBRE0sQ0FDNUIsS0FENEI7QUFBQSxRQUNyQixNQURxQixHQUNOLFVBRE0sQ0FDckIsTUFEcUI7QUFBQSxRQUNiLEdBRGEsR0FDTixVQURNLENBQ2IsR0FEYTs7QUFFbkMsVUFBTSxFQUFOLENBQVMsTUFBVCxFQUFpQixHQUFqQjtBQUNELEdBSEQ7QUFJRCxDQUxEOztBQU9BLE1BQU0sU0FBTixHQUFrQixVQUFTLEtBQVQsRUFBNEI7QUFBQTs7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDNUMsU0FBTyxJQUFJLE9BQUosQ0FBWSxtQkFBVztBQUM1QixXQUFLLFlBQUwsQ0FBa0IsS0FBbEIsS0FBNEIsT0FBSyxZQUFMLENBQWtCLEtBQWxCLEVBQXlCLE9BQXpCLENBQWlDLGVBQU87QUFDbEUsVUFBTSxXQUFXLElBQUksT0FBSixDQUFqQjtBQUNBLGtCQUFZLFNBQVMsSUFBckIsSUFBNkIsT0FBSyxXQUFMLENBQWlCLEtBQWpCLEVBQXdCLEdBQXhCLENBQTdCO0FBQ0QsS0FIMkIsQ0FBNUI7QUFJQTtBQUNELEdBTk0sQ0FBUDtBQU9ELENBUkQ7O0FBVUEsTUFBTSxlQUFOLEdBQXdCLFlBQVc7QUFDakMsT0FBSyxXQUFMLENBQWlCLGdCQUFqQixDQUFrQyxPQUFsQztBQUNELENBRkQ7O0FBSUEsTUFBTSxjQUFOLEdBQXVCLFlBQVc7O0FBRWhDLE1BQU0sZUFBZSxDQUNuQixTQURtQixFQUVuQixTQUZtQixFQUduQixTQUhtQixFQUluQixTQUptQixFQUtuQixTQUxtQixFQU1uQixTQU5tQixFQU9uQixTQVBtQixFQVFuQixTQVJtQixFQVNuQixTQVRtQixFQVVuQixTQVZtQixFQVduQixTQVhtQixFQVluQixTQVptQixFQWFuQixTQWJtQixFQWNuQixTQWRtQixFQWVuQixTQWZtQixFQWdCbkIsU0FoQm1CLEVBaUJuQixTQWpCbUIsRUFrQm5CLFNBbEJtQixFQW1CbkIsU0FuQm1CLEVBb0JuQixTQXBCbUIsRUFxQm5CLFNBckJtQixFQXNCbkIsU0F0Qm1CLEVBdUJuQixTQXZCbUIsRUF3Qm5CLFNBeEJtQixFQXlCbkIsU0F6Qm1CLEVBMEJuQixTQTFCbUIsRUEyQm5CLFNBM0JtQixFQTRCbkIsU0E1Qm1CLEVBNkJuQixTQTdCbUIsRUE4Qm5CLFNBOUJtQixFQStCbkIsU0EvQm1CLEVBZ0NuQixTQWhDbUIsRUFpQ25CLFNBakNtQixFQWtDbkIsU0FsQ21CLEVBbUNuQixTQW5DbUIsRUFvQ25CLFNBcENtQixFQXFDbkIsU0FyQ21CLEVBc0NuQixTQXRDbUIsRUF1Q25CLFNBdkNtQixFQXdDbkIsU0F4Q21CLENBQXJCOztBQUZnQztBQUFBO0FBQUE7O0FBQUE7QUE2Q2hDLDBCQUFvQixLQUFLLFNBQUwsRUFBcEIsbUlBQXNDO0FBQUEsVUFBM0IsS0FBMkI7O0FBQ3BDLE9BQUMsTUFBTSxRQUFOLEVBQUQsR0FBb0IsTUFBTSxRQUFOLENBQWUsYUFBYSxNQUFiLENBQW9CLENBQXBCLEVBQXNCLENBQXRCLEVBQXlCLENBQXpCLENBQWYsQ0FBcEIsR0FBaUUsSUFBakU7QUFDRDtBQS9DK0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWdEakMsQ0FoREQ7O0FBa0RBLE1BQU0sK0JBQU4sR0FBd0MsVUFBUyxLQUFULEVBQWdCO0FBQUE7O0FBQ3RELE1BQUksWUFBWSxNQUFNLFdBQU4sRUFBaEI7QUFDQSxNQUFNLDRCQUE0QixVQUFVLE1BQVYsQ0FBaUI7QUFBQSxXQUFZLE9BQUssWUFBTCxDQUFrQixRQUFsQixDQUFaO0FBQUEsR0FBakIsQ0FBbEM7QUFDQSxTQUFPLHlCQUFQO0FBQ0QsQ0FKRDs7QUFNQTs7O0FBR0EsTUFBTSxJQUFOLEdBQWEsWUFBVTtBQUNyQixNQUFNLFVBQVUsS0FBSyxLQUFMLENBQVcsZUFBWCxDQUEyQixVQUEzQixFQUFoQjtBQUNBLE1BQU0sVUFBVSxRQUFRLEtBQVIsRUFBaEI7QUFDQSxNQUFNLGVBQWUsUUFBUSxtQkFBUixHQUE4QixLQUFuRDtBQUNBLE9BQUssOEJBQUwsQ0FBb0M7QUFDbEMsb0JBRGtDO0FBRWxDLDhCQUZrQztBQUdsQyxZQUFRO0FBSDBCLEdBQXBDO0FBS0EsTUFBTSxZQUFZLFFBQVEsSUFBUixFQUFsQjs7QUFFQSxPQUFLLGlDQUFMLENBQXVDO0FBQ3JDLDBCQUFzQixTQURlO0FBRXJDLFlBQVE7QUFGNkIsR0FBdkM7O0FBS0EsT0FBSyxhQUFMLENBQW1CLFNBQW5CO0FBQ0QsQ0FqQkQ7O0FBbUJBO0FBQ0EsTUFBTSxhQUFOLEdBQXNCLFVBQVMsU0FBVCxFQUFvQjtBQUFBOztBQUN4QyxTQUFPLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLE9BQTFCLENBQWtDLGtCQUF3QjtBQUFBO0FBQUEsUUFBdEIsU0FBc0I7QUFBQSxRQUFYLEtBQVc7O0FBQ3hELFFBQU0sVUFBVSxPQUFLLGNBQUwsQ0FBb0IsU0FBcEIsQ0FBaEI7QUFDQSxRQUFNLFVBQVUsUUFBUSxVQUFSLEVBQWhCO0FBQ0EsWUFBUSxJQUFSLENBQWEsS0FBYjtBQUNELEdBSkQ7QUFLRCxDQU5EOztBQVFBO0FBQ0EsTUFBTSxpQkFBTixHQUEwQixVQUFTLGFBQVQsRUFBd0I7QUFBQTs7QUFDaEQsU0FBTyxPQUFQLENBQWUsYUFBZixFQUE4QixPQUE5QixDQUFzQyxrQkFBd0I7QUFBQTtBQUFBLFFBQXRCLFNBQXNCO0FBQUEsUUFBWCxLQUFXOztBQUM1RCxRQUFNLFVBQVUsUUFBSyxjQUFMLENBQW9CLFNBQXBCLENBQWhCO0FBQ0EsUUFBTSxVQUFVLFFBQVEsVUFBUixFQUFoQjtBQUNBLFlBQVEsUUFBUixDQUFpQixLQUFqQjtBQUNELEdBSkQ7QUFLRCxDQU5EOztBQVFBOzs7QUFHQSxNQUFNLElBQU4sR0FBYSxZQUFVO0FBQ3JCLE1BQU0sVUFBVSxLQUFLLEtBQUwsQ0FBVyxlQUFYLENBQTJCLFVBQTNCLEVBQWhCO0FBQ0EsTUFBTSxVQUFVLFFBQVEsS0FBUixFQUFoQjtBQUNBLE1BQU0sZUFBZSxRQUFRLG1CQUFSLEdBQThCLEtBQW5EO0FBQ0EsT0FBSyw4QkFBTCxDQUFvQztBQUNsQyxvQkFEa0M7QUFFbEMsOEJBRmtDO0FBR2xDLFlBQVE7QUFIMEIsR0FBcEM7QUFLQSxNQUFNLFlBQVksUUFBUSxJQUFSLEVBQWxCOztBQUVBLE9BQUssaUNBQUwsQ0FBdUM7QUFDckMsMEJBQXNCLFNBRGU7QUFFckMsWUFBUTtBQUY2QixHQUF2Qzs7QUFLQSxPQUFLLGFBQUwsQ0FBbUIsU0FBbkI7QUFDRCxDQWpCRDs7QUFtQkE7QUFDQSxNQUFNLGFBQU4sR0FBc0IsVUFBUyxTQUFULEVBQW9CO0FBQUE7O0FBQ3hDLFNBQU8sT0FBUCxDQUFlLFNBQWYsRUFBMEIsT0FBMUIsQ0FBa0Msa0JBQXdCO0FBQUE7QUFBQSxRQUF0QixTQUFzQjtBQUFBLFFBQVgsS0FBVzs7QUFDeEQsUUFBTSxVQUFVLFFBQUssY0FBTCxDQUFvQixTQUFwQixDQUFoQjtBQUNBLFFBQU0sVUFBVSxRQUFRLFVBQVIsRUFBaEI7QUFDQSxZQUFRLElBQVIsQ0FBYSxLQUFiO0FBQ0QsR0FKRDtBQUtELENBTkQ7O0FBUUEsTUFBTSxlQUFOLEdBQXdCLFVBQVMsRUFBVCxFQUFhO0FBQ25DLFNBQU8sS0FBSyxlQUFMLENBQXFCLEVBQXJCLEVBQXlCLGVBQXpCLEVBQVA7QUFDRCxDQUZEOztBQUlBOzs7OztBQUtBLE1BQU0sZUFBTixHQUF3QixZQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQzNDLDBCQUFvQixLQUFLLFNBQUwsRUFBcEIsbUlBQXNDO0FBQUEsVUFBM0IsS0FBMkI7O0FBQ3BDLFVBQU0sVUFBVSxpQkFBaUIsS0FBakIsQ0FBdUIsS0FBdkIsRUFBOEIsT0FBOUIsQ0FBaEI7QUFDQSxXQUFLLFVBQUwsQ0FBZ0IsT0FBaEI7QUFDRDtBQUowQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSzVDLENBTEQ7O0FBT0EsTUFBTSxVQUFOLEdBQW1CLFVBQVMsT0FBVCxFQUFrQjtBQUNuQyxPQUFLLFVBQUwsQ0FBZ0IsSUFBaEIsQ0FBcUIsT0FBckI7QUFDQTtBQUNBLE9BQUssU0FBTCxDQUFlLFFBQVEsS0FBUixFQUFmLElBQWtDLFFBQVEsVUFBUixFQUFsQztBQUNBLE9BQUssS0FBTCxDQUFXLFNBQVgsQ0FBcUIsSUFBckIsQ0FBMEIsUUFBUSxLQUFsQztBQUNELENBTEQ7O0FBT0E7QUFDQSxNQUFNLG1CQUFOLEdBQTRCLFVBQVMsSUFBVCxFQUFjO0FBQ3hDLE9BQUssS0FBTCxDQUFXLElBQVgsR0FBa0IsSUFBbEI7QUFDQSxPQUFLLDZCQUFMLEdBQXFDLE9BQXJDLENBQTZDO0FBQUEsV0FBUyxNQUFNLFlBQU4sQ0FBbUIsSUFBbkIsQ0FBVDtBQUFBLEdBQTdDO0FBQ0QsQ0FIRDs7QUFLQTs7Ozs7QUFLQSxNQUFNLFFBQU4sR0FBaUIsWUFBNkI7QUFBQSxtRkFBSixFQUFJO0FBQUEsTUFBbkIsSUFBbUIsVUFBbkIsSUFBbUI7QUFBQSxNQUFiLEVBQWEsVUFBYixFQUFhO0FBQUEsTUFBVCxHQUFTLFVBQVQsR0FBUzs7QUFDNUMsTUFBSSxDQUFDLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBTCxFQUF5QixLQUFLLE9BQUwsQ0FBYSxJQUFiLElBQXFCLEVBQXJCO0FBQ3pCLE1BQUksQ0FBQyxLQUFLLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEVBQW5CLENBQUwsRUFBNkIsS0FBSyxPQUFMLENBQWEsSUFBYixFQUFtQixFQUFuQixJQUF5QixFQUF6QjtBQUM3QixPQUFLLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEVBQW5CLEVBQXVCLElBQXZCLENBQTRCLEdBQTVCO0FBQ0QsQ0FKRDs7QUFNQTs7Ozs7QUFLQSxNQUFNLFNBQU4sR0FBa0IsWUFBaUM7QUFBQTs7QUFBQSxtRkFBSixFQUFJO0FBQUEsNEJBQXZCLEtBQXVCO0FBQUEsTUFBdkIsS0FBdUIsZ0NBQWpCLEVBQWlCO0FBQUEsTUFBYixFQUFhLFVBQWIsRUFBYTtBQUFBLE1BQVQsR0FBUyxVQUFULEdBQVM7O0FBQ2pELFFBQU0sT0FBTixDQUFjO0FBQUEsV0FBUSxRQUFLLFFBQUwsQ0FBYztBQUNsQyxnQkFEa0M7QUFFbEMsWUFGa0M7QUFHbEM7QUFIa0MsS0FBZCxDQUFSO0FBQUEsR0FBZDtBQUtELENBTkQ7O0FBUUEsTUFBTSxlQUFOLEdBQXdCLFlBQTBCO0FBQUEsbUZBQUosRUFBSTtBQUFBLE1BQWhCLElBQWdCLFVBQWhCLElBQWdCO0FBQUEsTUFBVixFQUFVLFVBQVYsRUFBVTs7QUFDaEQsT0FBSyxPQUFMLENBQWEsSUFBYixLQUFzQixLQUFLLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEVBQW5CLENBQXRCLElBQWdELEtBQUssT0FBTCxDQUFhLElBQWIsRUFBbUIsRUFBbkIsRUFBdUIsT0FBdkIsQ0FBK0I7QUFBQSxXQUFPLEtBQVA7QUFBQSxHQUEvQixDQUFoRDtBQUNELENBRkQ7O0FBSUE7Ozs7Ozs7QUFPQSxNQUFNLGFBQU4sR0FBc0IsWUFBNkQ7QUFBQSxtRkFBSCxFQUFHO0FBQUEsMkJBQW5ELElBQW1EO0FBQUEsTUFBbkQsSUFBbUQsK0JBQTVDLFNBQTRDO0FBQUEseUJBQWpDLEVBQWlDO0FBQUEsTUFBakMsRUFBaUMsNkJBQTlCLEVBQThCO0FBQUEsNEJBQTFCLEtBQTBCO0FBQUEsTUFBMUIsS0FBMEIsZ0NBQXBCLEtBQW9CO0FBQUEsTUFBYixRQUFhLFVBQWIsUUFBYTs7QUFDakYsT0FBSyxVQUFMLENBQWdCLElBQWhCLEdBQXVCLElBQXZCO0FBQ0EsT0FBSyxVQUFMLENBQWdCLEtBQWhCLEdBQXdCLEtBQXhCO0FBQ0EsT0FBSyxVQUFMLENBQWdCLFFBQWhCLEdBQTJCLFFBQTNCO0FBQ0EsT0FBSyxVQUFMLENBQWdCLEVBQWhCLGdCQUNLLEtBQUssVUFBTCxDQUFnQixFQURyQixFQUVLLEVBRkw7QUFJRCxDQVJEOztBQVVBO0FBQ0EsTUFBTSxhQUFOLEdBQXNCLFlBQVU7QUFDOUIsU0FBTyxLQUFLLFVBQVo7QUFDRCxDQUZEOztBQUlBOzs7QUFHQSxNQUFNLFlBQU4sR0FBcUIsWUFBVTtBQUM3QixPQUFLLFVBQUwsR0FBa0I7QUFDaEIsVUFBTSxTQURVLEVBQ0M7QUFDakIsV0FBTyxLQUZTO0FBR2hCLGNBQVUsSUFITSxFQUdBO0FBQ2hCLFFBQUk7QUFDRixZQUFNLElBREosRUFDVTtBQUNaLGFBQU8sSUFGTCxDQUVXO0FBRlg7QUFKWSxHQUFsQjtBQVNBLE9BQUssMEJBQUwsQ0FBZ0MsS0FBaEM7QUFDRCxDQVhEOztBQWFBLE1BQU0sd0JBQU4sR0FBaUMsVUFBUyxLQUFULEVBQWdCO0FBQUE7O0FBQy9DLE1BQU0sU0FBUyxNQUFNLGdCQUFOLEVBQWY7O0FBRCtDLDZCQUV0QyxDQUZzQztBQUc3QyxRQUFNLFFBQVEsT0FBTyxDQUFQLENBQWQ7QUFDQSxRQUFJLE1BQU0sS0FBVixFQUFpQjtBQUNmLFVBQUksTUFBTSxLQUFOLENBQVksSUFBWixLQUFxQixxQkFBckIsSUFBOEMsQ0FBQyxNQUFNLEtBQU4sQ0FBWSxPQUFaLENBQW9CLGlCQUF2RSxFQUEwRjtBQUN4RixZQUFNLFVBQVUsTUFBTSxLQUFOLENBQVksT0FBNUI7QUFEd0YsWUFFbkYsR0FGbUYsR0FFNUIsT0FGNEIsQ0FFbkYsR0FGbUY7QUFBQSxZQUU5RSxNQUY4RSxHQUU1QixPQUY0QixDQUU5RSxNQUY4RTtBQUFBLFlBRXRFLEtBRnNFLEdBRTVCLE9BRjRCLENBRXRFLEtBRnNFO0FBQUEsWUFFL0QsWUFGK0QsR0FFNUIsT0FGNEIsQ0FFL0QsWUFGK0Q7QUFBQSxZQUVqRCxRQUZpRCxHQUU1QixPQUY0QixDQUVqRCxRQUZpRDtBQUFBLFlBRXZDLE9BRnVDLEdBRTVCLE9BRjRCLENBRXZDLE9BRnVDOztBQUd4RixZQUFNLE9BQU8sT0FBYjtBQUNBLFlBQUksQ0FBQyxZQUFMLEVBQW1CO0FBQ2pCLGtCQUFLLFNBQUwsQ0FBZTtBQUNiLG1CQUFPLENBQUMsZUFBRCxFQUFrQix1QkFBbEIsQ0FETTtBQUViLGdCQUFJLE1BQU0sS0FBTixFQUZTO0FBR2IsZUFIYSxpQkFHUDtBQUNKO0FBQ0Esc0JBQVEsS0FBUixHQUFnQixTQUFoQjtBQUNBLG9CQUFNLEtBQU4sQ0FBWSxPQUFaLENBQW9CLE1BQXBCLEdBQTZCLEVBQTdCO0FBQ0Esa0JBQU0sZ0JBQWdCLDRCQUE0QixZQUE1QixDQUF5QyxRQUF6QyxDQUF0QjtBQUNBLGtCQUFJLGFBQUosRUFBbUI7QUFDakIsb0JBQUksYUFBSixFQUFtQjtBQUNqQixnQ0FBYyxZQUFkLENBQTJCO0FBQ3pCLDhCQUFVO0FBRGUsbUJBQTNCLEVBRUcsSUFGSCxDQUVRLG9CQUFZO0FBQ2xCLHdCQUFJLFlBQVksU0FBUyxRQUF6QixFQUFtQztBQUNqQywwQkFBTSxXQUFXLFNBQVMsUUFBMUI7QUFDQSwyQkFBSyxTQUFMLENBQWUsY0FBZixFQUErQjtBQUM3QixvQ0FENkI7QUFFN0I7QUFGNkIsdUJBQS9CO0FBSUEsMkJBQUssSUFBSSxLQUFJLENBQWIsRUFBZ0IsS0FBSSxTQUFTLE1BQTdCLEVBQXFDLElBQXJDLEVBQTBDO0FBQ3hDLDhCQUFNLEtBQU4sQ0FBWSxPQUFaLENBQW9CLE1BQXBCLENBQTJCLElBQTNCLENBQWdDO0FBQzlCLCtCQUFLLFNBQVMsRUFBVCxFQUFZLFVBQVosQ0FBdUIsR0FBdkIsQ0FEeUI7QUFFOUIsaUNBQU8sU0FBUyxFQUFULEVBQVksVUFBWixDQUF1QixLQUF2QjtBQUZ1Qix5QkFBaEM7QUFJRDtBQUNELDhCQUFRLEtBQVIsR0FBZ0IsT0FBaEI7QUFDRDtBQUNGLG1CQWpCRCxFQWlCRyxJQWpCSCxDQWlCUSxpQkFBUztBQUNmLDRCQUFRLEtBQVIsR0FBZ0IsT0FBaEI7QUFDRCxtQkFuQkQ7QUFvQkQsaUJBckJELE1BcUJPO0FBQ0wsMEJBQVEsS0FBUixHQUFnQixPQUFoQjtBQUNEO0FBQ0YsZUF6QkQsTUF5Qk87QUFDTCxxQkFBSyxTQUFMLENBQWUsY0FBZixFQUErQjtBQUM3Qiw4QkFENkI7QUFFN0IsNEJBQVU7QUFGbUIsaUJBQS9CO0FBSUEsd0JBQVEsS0FBUixHQUFnQixPQUFoQjtBQUNEO0FBQ0Y7QUF4Q1ksV0FBZjtBQTBDRDtBQUNGO0FBQ0Y7QUF0RDRDOztBQUUvQyxPQUFLLElBQUksSUFBRSxDQUFYLEVBQWMsSUFBSSxPQUFPLE1BQXpCLEVBQWlDLEdBQWpDLEVBQXNDO0FBQUEsVUFBN0IsQ0FBNkI7QUFxRHJDO0FBQ0YsQ0F4REQ7O0FBMERBLE1BQU0sMEJBQU4sR0FBbUMsWUFBVztBQUFBOztBQUM1QyxPQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsQ0FBd0IsbUJBQVc7QUFDakMsUUFBTSxRQUFRLFFBQVEsUUFBUixFQUFkO0FBQ0EsWUFBUSxTQUFSLENBQWtCLE1BQU0sUUFBTixFQUFsQjtBQUNBLFlBQVEsS0FBUixDQUFjLE9BQWQsQ0FBc0IsWUFBdEIsR0FBcUMsUUFBSyw4QkFBTCxDQUFvQyxLQUFwQyxDQUFyQztBQUNBLFFBQUksTUFBTSxRQUFOLE1BQW9CLFFBQVEsZUFBUixFQUF4QixFQUFvRDtBQUNsRCxVQUFNLGlCQUFpQixNQUFNLFlBQU4sR0FBcUIsWUFBckIsRUFBdkI7QUFDQSxXQUFLLElBQU0sWUFBWCxJQUEyQixjQUEzQixFQUEyQztBQUN6QyxZQUFNLFdBQVcsZUFBZSxZQUFmLENBQWpCO0FBQ0EsZ0JBQVEsV0FBUixDQUFvQixRQUFwQjtBQUNEO0FBQ0Y7QUFDRixHQVhEO0FBWUQsQ0FiRDs7QUFlQTs7Ozs7O0FBTUEsTUFBTSxlQUFOLEdBQXdCLFVBQVMsT0FBVCxFQUFrQixTQUFsQixFQUE2QjtBQUNuRCxTQUFPLEtBQUssWUFBTCxDQUFrQixPQUFsQixFQUEyQixlQUEzQixDQUEyQyxTQUEzQyxDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLDhCQUFOLEdBQXVDLFVBQVMsS0FBVCxFQUFnQjtBQUFBOztBQUNyRCxNQUFJLDhDQUFxQixNQUFNLFdBQU4sRUFBckIsc0JBQTZDLE1BQU0sVUFBTixFQUE3QyxFQUFKO0FBQ0EsU0FBTyxlQUFlLE1BQWYsQ0FBc0IsVUFBQyxTQUFELEVBQWU7QUFDMUMsV0FBTyxDQUFDLENBQUMsUUFBSyxZQUFMLENBQWtCLFNBQWxCLENBQVQ7QUFDRCxHQUZNLENBQVA7QUFHRCxDQUxEOztBQU9BLE1BQU0sdUJBQU4sR0FBZ0MsVUFBUyxLQUFULEVBQWdCO0FBQzlDLE1BQUksZUFBZSxLQUFLLDhCQUFMLENBQW9DLEtBQXBDLENBQW5CO0FBQ0EsU0FBTyxDQUFDLENBQUMsYUFBYSxNQUF0QjtBQUNELENBSEQ7O0FBS0EsTUFBTSx5QkFBTixHQUFrQyxVQUFTLE9BQVQsRUFBa0I7QUFBQTs7QUFDbEQsTUFBSSx5QkFBSjtBQUNBLE1BQUksUUFBUSxRQUFSLEVBQUosRUFBd0IsS0FBSywyQkFBTCxDQUFpQyxRQUFRLEtBQVIsRUFBakM7QUFDeEIsVUFBUSxlQUFSLEdBQTBCLE9BQTFCLENBQWtDLHFCQUFhO0FBQzdDLHVCQUFtQixRQUFLLGNBQUwsQ0FBb0IsU0FBcEIsQ0FBbkI7QUFDQSxxQkFBaUIsVUFBakIsQ0FBNEIsS0FBNUI7QUFDRCxHQUhEO0FBSUQsQ0FQRDs7QUFTQSxNQUFNLDZCQUFOLEdBQXNDLFlBQVc7QUFDL0MsTUFBSSxTQUFTLDRCQUE0QixTQUE1QixDQUFzQztBQUNqRCxjQUFVO0FBRHVDLEdBQXRDLENBQWI7QUFHQSxTQUFPLE1BQVA7QUFDRCxDQUxEOztBQU9BLE1BQU0sU0FBTixHQUFrQixZQUFXO0FBQzNCLFNBQU8sT0FBTyxNQUFQLENBQWMsS0FBSyxlQUFuQixDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGtCQUFOLEdBQTJCLFlBQVc7QUFDcEMsU0FBTyxlQUFlLFVBQWYsRUFBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSxzQkFBTixHQUErQixZQUFXO0FBQ3hDLE1BQU0sa0JBQWtCLGVBQWUsVUFBZixFQUF4QjtBQUNBLFNBQU87QUFDTCxhQUFTLGdCQUFnQixVQUFoQixFQURKO0FBRUwsWUFBUSxnQkFBZ0IsU0FBaEIsRUFGSDtBQUdMLGFBQVMsZ0JBQWdCLFVBQWhCLEVBSEo7QUFJTCxhQUFTLGdCQUFnQixpQkFBaEIsRUFKSjtBQUtMLFdBQU8sZ0JBQWdCLFFBQWhCO0FBTEYsR0FBUDtBQU9ELENBVEQ7O0FBV0EsTUFBTSwrQkFBTixHQUF3QyxZQUEwQztBQUFBLG1GQUFKLEVBQUk7QUFBQSxNQUFoQyxPQUFnQyxVQUFoQyxPQUFnQztBQUFBLE1BQXZCLFFBQXVCLFVBQXZCLFFBQXVCO0FBQUEsTUFBYixPQUFhLFVBQWIsT0FBYTs7QUFDaEYsTUFBTSxRQUFRLEtBQUssY0FBTCxDQUFvQixPQUFwQixFQUE2QixRQUE3QixFQUFkO0FBQ0EsTUFBTSxZQUFZLEtBQUsscUJBQUwsQ0FBMkIsRUFBQyxnQkFBRCxFQUFVLGtCQUFWLEVBQW9CLGdCQUFwQixFQUEzQixDQUFsQjtBQUNBLFNBQU8sVUFBVSxHQUFWLENBQWMsb0JBQVk7QUFDL0IsV0FBTztBQUNMLGNBQVEsTUFBTSxtQkFBTixDQUEwQixRQUExQixFQUFvQztBQUMxQyxrQkFBVTtBQURnQyxPQUFwQyxDQURIO0FBSUwsVUFBSSxTQUFTLEtBQVQ7QUFKQyxLQUFQO0FBTUQsR0FQTSxDQUFQO0FBUUQsQ0FYRDs7QUFhQSxNQUFNLG1CQUFOLEdBQTRCLFlBQWdDO0FBQUEsbUZBQUgsRUFBRztBQUFBLE1BQXRCLE9BQXNCLFVBQXRCLE9BQXNCO0FBQUEsTUFBYixRQUFhLFVBQWIsUUFBYTs7QUFDMUQsU0FBTyxTQUFTLFFBQVQsT0FBd0IsT0FBeEIsR0FBa0MsU0FBUyxTQUFULEVBQWxDLEdBQXlELFNBQVMsUUFBVCxFQUFoRTtBQUNELENBRkQ7O0FBSUEsTUFBTSxxQkFBTixHQUE4QixZQUFxRDtBQUFBLG1GQUFKLEVBQUk7QUFBQSxNQUEzQyxPQUEyQyxVQUEzQyxPQUEyQztBQUFBLE1BQWxDLFFBQWtDLFVBQWxDLFFBQWtDO0FBQUEsTUFBeEIsT0FBd0IsVUFBeEIsT0FBd0I7QUFBQSxNQUFmLFNBQWUsVUFBZixTQUFlOztBQUFBLDhCQUMvQyxLQUFLLDhCQUFMLENBQW9DO0FBQ3BFLG9CQURvRTtBQUVwRTtBQUZvRSxHQUFwQyxDQUQrQztBQUFBLE1BQzFFLFFBRDBFLHlCQUMxRSxRQUQwRTtBQUFBLE1BQ2hFLGFBRGdFLHlCQUNoRSxhQURnRTs7QUFLakYsTUFBTSxlQUFlLFFBQVEsR0FBUixDQUFZLGFBQVosQ0FBckI7QUFDQSxNQUFNLFdBQVcsS0FBSyxxQkFBTCxDQUEyQixPQUEzQixDQUFqQjtBQUNBLFNBQU8sU0FBUyxNQUFULENBQWdCO0FBQUEsV0FBVyxRQUFRLEdBQVIsQ0FBWSxRQUFaLEtBQXlCLFlBQXBDO0FBQUEsR0FBaEIsQ0FBUDtBQUNELENBUkQ7O0FBVUEsTUFBTSxpQkFBTixHQUEwQixVQUFTLElBQVQsRUFBYztBQUN0QyxxQkFBbUIsaUJBQW5CLENBQXFDO0FBQ25DO0FBRG1DLEdBQXJDO0FBR0QsQ0FKRDs7QUFNQSxNQUFNLFVBQU4sR0FBbUIsWUFBVztBQUM1QixTQUFPLEtBQUssS0FBTCxHQUFhLENBQUMsQ0FBQyxLQUFLLDZCQUFMLEdBQXFDLE1BQTNEO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFlBQU4sR0FBcUIsVUFBUyxPQUFULEVBQWtCO0FBQ3JDLFNBQU8sS0FBSyxlQUFMLENBQXFCLE9BQXJCLENBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sa0JBQU4sR0FBMkIsWUFBdUI7QUFBQSxtRkFBSixFQUFJO0FBQUEsTUFBYixLQUFhLFVBQWIsS0FBYTs7QUFDaEQsT0FBSyxrQkFBTCxDQUF3QixLQUF4QjtBQUNELENBRkQ7O0FBSUEsTUFBTSxpQkFBTixHQUEwQixZQUFzQjtBQUM5Qzs7QUFEOEMsbUZBQUosRUFBSTtBQUFBLE1BQVosS0FBWSxVQUFaLEtBQVk7QUFFL0MsQ0FGRDs7QUFJQSxNQUFNLGNBQU4sR0FBdUIsVUFBUyxTQUFULEVBQW9CO0FBQ3pDLFNBQU8sS0FBSyxVQUFMLENBQWdCLElBQWhCLENBQXFCO0FBQUEsV0FBVyxRQUFRLEtBQVIsT0FBb0IsU0FBL0I7QUFBQSxHQUFyQixDQUFQO0FBQ0QsQ0FGRDs7QUFJQTs7OztBQUlBLE1BQU0sZ0NBQU4sR0FBeUMsWUFBaUU7QUFBQTs7QUFBQSxNQUF4RCxXQUF3RCx1RUFBNUMsRUFBQyx1QkFBdUIsSUFBeEIsRUFBOEIsV0FBVSxFQUF4QyxFQUE0Qzs7QUFDeEcsT0FBSyw2QkFBTCxnQkFDSyxLQUFLLDZCQURWLEVBRUssV0FGTDs7QUFEd0csTUFNakcsU0FOaUcsR0FNN0QsV0FONkQsQ0FNakcsU0FOaUc7QUFBQSxNQU10RixxQkFOc0YsR0FNN0QsV0FONkQsQ0FNdEYscUJBTnNGOztBQU94RyxNQUFNLGFBQWEsT0FBTyxJQUFQLENBQVksU0FBWixDQUFuQjtBQUNBLEdBQUMscUJBQUQsSUFBMEIsS0FBSyxLQUFMLENBQVcsU0FBWCxDQUFxQixPQUFyQixDQUE2QjtBQUFBLFdBQVcsUUFBUSxJQUFSLEdBQWdCLFdBQVcsT0FBWCxDQUFtQixRQUFRLEVBQTNCLE1BQW1DLENBQUMsQ0FBL0Q7QUFBQSxHQUE3QixDQUExQjtBQUNBLGFBQVcsT0FBWCxDQUFtQixxQkFBYTtBQUM5QixRQUFNLFVBQVUsUUFBSyxjQUFMLENBQW9CLFNBQXBCLENBQWhCO0FBQ0EsWUFBUSxxQkFBUixDQUE4QixVQUFVLFNBQVYsQ0FBOUI7QUFDRCxHQUhEO0FBSUQsQ0FiRDs7QUFlQTs7OztBQUlBLE1BQU0sZ0NBQU4sR0FBeUMsWUFBVTtBQUNqRCxTQUFPLEtBQUssNkJBQVo7QUFDRCxDQUZEOztBQUlBOzs7O0FBSUEsTUFBTSxtQ0FBTixHQUE0QyxVQUFTLFNBQVQsRUFBbUI7QUFDN0QsU0FBTyxLQUFLLDZCQUFMLENBQW1DLFNBQW5DLENBQTZDLFNBQTdDLENBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sWUFBTixHQUFxQixZQUFXO0FBQzlCLFNBQU8sS0FBSyxVQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsU0FBTyxLQUFLLGVBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sYUFBTixHQUFzQixZQUFVO0FBQzlCLFNBQU8sU0FBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSxJQUFOLEdBQWEsWUFBVztBQUFBOztBQUN0QixTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBcUI7QUFDdEMsUUFBTSxpQkFBaUIsRUFBdkI7QUFDQSxZQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsQ0FBd0IsbUJBQVc7QUFDakM7QUFDQSxVQUFJLFFBQVEsVUFBUixHQUFxQixVQUFyQixHQUFrQyxLQUFsQyxDQUF3QyxNQUE1QyxFQUFvRDtBQUNsRDtBQUNBLHVCQUFlLElBQWYsQ0FBb0IsUUFBSyxNQUFMLENBQVksT0FBWixFQUFxQixJQUFyQixDQUFwQjtBQUNEO0FBQ0YsS0FORDtBQU9BLE1BQUUsSUFBRixDQUFPLEtBQVAsQ0FBYSxPQUFiLEVBQW1CLGNBQW5CLEVBQ0csTUFESCxDQUNVLFlBQU07QUFDWixjQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsQ0FBd0I7QUFBQSxlQUFXLFFBQVEsSUFBUixFQUFYO0FBQUEsT0FBeEI7QUFDQSxjQUFLLFVBQUw7QUFDQTtBQUNBLGNBQUssV0FBTCxDQUFpQixVQUFqQjtBQUNBO0FBQ0gsS0FQRDtBQVFELEdBakJNLENBQVA7QUFrQkQsQ0FuQkQ7O0FBcUJBO0FBQ0EsTUFBTSxLQUFOLEdBQWMsWUFBVztBQUN2Qix5QkFBdUIsaUJBQXZCLENBQXlDLEtBQUssWUFBOUM7QUFDQSxtQkFBaUIsS0FBakI7QUFDQTtBQUNBLE9BQUssV0FBTCxDQUFpQixHQUFqQixDQUFxQiw2QkFBckIsRUFBb0QsS0FBSyw0QkFBekQ7QUFDQSxPQUFLLDZCQUFMO0FBQ0QsQ0FORDs7QUFRQSxNQUFNLFVBQU4sR0FBbUIsWUFBVztBQUM1QixPQUFLLEtBQUwsQ0FBVyxlQUFYLEdBQTZCLElBQTdCO0FBQ0EsT0FBSyxLQUFMLENBQVcsbUJBQVgsR0FBa0MsSUFBbEM7QUFDQSxPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXNCLElBQXRCO0FBQ0QsQ0FKRDs7QUFNQTs7Ozs7OztBQU9BLE1BQU0scUJBQU4sR0FBOEIsWUFBOEM7QUFBQTs7QUFBQSxtRkFBSixFQUFJO0FBQUEsTUFBcEMsT0FBb0MsVUFBcEMsT0FBb0M7QUFBQSxnQ0FBM0IsU0FBMkI7QUFBQSxNQUEzQixTQUEyQixvQ0FBakIsRUFBaUI7QUFBQSxNQUFiLE9BQWEsVUFBYixPQUFhOztBQUMxRSxNQUFJLHFCQUFxQixFQUF6QjtBQUNBLE1BQUksMEJBQUo7QUFDQSxZQUFVLE9BQVYsQ0FBa0Isb0JBQVk7QUFDNUIsUUFBTSxrQkFBa0IsUUFBSyxtQkFBTCxDQUF5QixFQUFDLGdCQUFELEVBQVUsa0JBQVYsRUFBekIsQ0FBeEI7QUFDQSxRQUFJLFFBQUssWUFBTCxDQUFrQixlQUFsQixDQUFKLEVBQXdDO0FBQ3RDLDBCQUFvQjtBQUNsQixrQkFBVSxTQUFTLFFBQVQsRUFEUTtBQUVsQixtQkFBVyxRQUFLLCtCQUFMLENBQXFDO0FBQzlDLG1CQUFTLGVBRHFDO0FBRTlDLDRCQUY4QztBQUc5QztBQUg4QyxTQUFyQztBQUZPLE9BQXBCO0FBUUEsd0JBQWtCLFFBQWxCLEdBQTZCO0FBQzNCLGVBQU07QUFEcUIsT0FBN0I7QUFHQSx5QkFBbUIsSUFBbkIsQ0FBd0IsaUJBQXhCO0FBQ0Q7QUFDRixHQWhCRDtBQWlCQSxTQUFPLGtCQUFQO0FBQ0QsQ0FyQkQ7O0FBdUJBLE1BQU0seUJBQU4sR0FBa0Msa0JBQWtDO0FBQUE7O0FBQUEsTUFBeEIsT0FBd0IsVUFBeEIsT0FBd0I7QUFBQSxnQ0FBZixTQUFlO0FBQUEsTUFBZixTQUFlLG9DQUFMLEVBQUs7O0FBQ2xFLFNBQU8sVUFBVSxNQUFWLENBQWlCLG9CQUFZO0FBQ2xDLFFBQU0sYUFBYSxRQUFLLGNBQUwsQ0FBb0I7QUFDckMsc0JBRHFDO0FBRXJDO0FBRnFDLEtBQXBCLENBQW5CO0FBSUEsV0FBTyxRQUFLLGNBQUwsQ0FBb0IsVUFBcEIsQ0FBUDtBQUNELEdBTk0sQ0FBUDtBQU9ELENBUkQ7O0FBVUEsTUFBTSxxQkFBTixHQUE4QixVQUFTLE9BQVQsRUFBaUI7QUFBQTs7QUFDN0MsTUFBTSxRQUFRLEtBQUssWUFBTCxDQUFrQixPQUFsQixDQUFkO0FBQ0EsTUFBTSxZQUFZLEtBQUsseUJBQUwsQ0FBK0I7QUFDL0MsZUFBVyxNQUFNLFlBQU4sS0FBdUIsTUFBTSxZQUFOLEdBQXFCLFFBQXJCLEVBQXZCLEdBQXlELEVBRHJCO0FBRS9DO0FBRitDLEdBQS9CLENBQWxCO0FBSUEsWUFDRyxNQURILENBQ1U7QUFBQSxXQUFZLFNBQVMsU0FBVCxPQUF5QixPQUFyQztBQUFBLEdBRFYsRUFFRyxPQUZILENBRVcsb0JBQVk7QUFDbkIsUUFBTSxhQUFhLFFBQUssY0FBTCxDQUFvQjtBQUNyQyxzQkFEcUM7QUFFckM7QUFGcUMsS0FBcEIsQ0FBbkI7QUFJQSxZQUFLLGNBQUwsQ0FBb0IsVUFBcEIsRUFBZ0MsU0FBaEMsTUFBK0MsUUFBSyxjQUFMLENBQW9CLFVBQXBCLEVBQWdDLElBQWhDLEVBQS9DO0FBQ0QsR0FSSDtBQVNELENBZkQ7O0FBaUJBLE1BQU0sbUJBQU4sR0FBNEIsVUFBUyxPQUFULEVBQWtCO0FBQUE7O0FBQzVDLE1BQU0sUUFBUSxLQUFLLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBZDtBQUNBLE1BQU0sWUFBWSxLQUFLLHlCQUFMLENBQStCO0FBQy9DLGVBQVcsTUFBTSxZQUFOLEtBQXVCLE1BQU0sWUFBTixHQUFxQixRQUFyQixFQUF2QixHQUF5RCxFQURyQjtBQUUvQztBQUYrQyxHQUEvQixDQUFsQjtBQUlBLFlBQ0csTUFESCxDQUNVO0FBQUEsV0FBWSxTQUFTLFNBQVQsT0FBeUIsT0FBckM7QUFBQSxHQURWLEVBRUcsT0FGSCxDQUVXLG9CQUFZO0FBQ25CLFFBQU0sYUFBYSxRQUFLLGNBQUwsQ0FBb0I7QUFDckMsc0JBRHFDO0FBRXJDO0FBRnFDLEtBQXBCLENBQW5CO0FBSUE7QUFDQSxRQUFJLENBQUMsUUFBSyxjQUFMLENBQW9CLFVBQXBCLEVBQWdDLFNBQWhDLEVBQUwsRUFBa0Q7QUFDaEQsY0FBSyxTQUFMLENBQWUsVUFBZixFQUEyQixJQUEzQjtBQUNEO0FBQ0YsR0FYSDtBQVlELENBbEJEOztBQW9CQSxNQUFNLGVBQU4sR0FBd0IsVUFBUyxPQUFULEVBQWtCO0FBQUE7O0FBQ3hDLE1BQUksWUFBWSxLQUFoQjtBQUNBLE1BQUksZ0JBQUo7QUFDQSxNQUFJLHVCQUF1QixLQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsVUFBM0IsRUFBM0I7QUFDQSx1QkFBcUIsT0FBckIsQ0FBNkIsY0FBTTtBQUNqQyxjQUFVLFFBQUssY0FBTCxDQUFvQixFQUFwQixDQUFWO0FBQ0EsUUFBSSxXQUFXLFFBQVEsU0FBUixFQUFmLEVBQW9DO0FBQ2xDLGtCQUFZLElBQVo7QUFDQSxhQUFPLEtBQVA7QUFDRDtBQUNGLEdBTkQ7QUFPQSxTQUFPLFNBQVA7QUFDRCxDQVpEOztBQWNBLE1BQU0sOEJBQU4sR0FBdUMsWUFBbUM7QUFBQSxtRkFBSixFQUFJO0FBQUEsTUFBekIsT0FBeUIsVUFBekIsT0FBeUI7QUFBQSxNQUFoQixRQUFnQixVQUFoQixRQUFnQjs7QUFDeEUsTUFBTSxVQUFVLFNBQVMsUUFBVCxHQUFvQixTQUFTLFFBQVQsRUFBcEIsR0FBMEMsU0FBUyxLQUFuRTtBQUNBLE1BQU0sVUFBVSxZQUFZLE9BQTVCO0FBQ0EsTUFBTSxlQUFlLFNBQVMsY0FBVCxHQUEwQixTQUFTLGNBQVQsRUFBMUIsR0FBc0QsU0FBUyxXQUFwRjtBQUNBLE1BQU0sY0FBYyxTQUFTLGFBQVQsR0FBeUIsU0FBUyxhQUFULEVBQXpCLEdBQW9ELFNBQVMsVUFBakY7QUFDQSxNQUFNLFdBQVcsVUFBVSxZQUFWLEdBQXlCLFdBQTFDO0FBQ0EsTUFBTSxnQkFBZ0IsVUFBVSxXQUFWLEdBQXdCLFlBQTlDO0FBQ0EsU0FBTztBQUNMLHNCQURLO0FBRUw7QUFGSyxHQUFQO0FBSUQsQ0FYRDs7QUFhQSxNQUFNLHdCQUFOLEdBQWlDLFlBQXVDO0FBQUEsTUFBOUIsVUFBOEIsdUVBQW5CLEtBQW1CO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7QUFBQSxNQUMvRCxPQUQrRCxHQUNoQixPQURnQixDQUMvRCxPQUQrRDtBQUFBLE1BQ3RELFFBRHNELEdBQ2hCLE9BRGdCLENBQ3RELFFBRHNEO0FBQUEsTUFDNUMsS0FENEMsR0FDaEIsT0FEZ0IsQ0FDNUMsS0FENEM7QUFBQSxNQUNyQyxPQURxQyxHQUNoQixPQURnQixDQUNyQyxPQURxQztBQUFBLE1BQzVCLFFBRDRCLEdBQ2hCLE9BRGdCLENBQzVCLFFBRDRCOztBQUV0RSxNQUFJLGVBQUo7QUFDQSxVQUFRLFVBQVI7QUFDRTtBQUNBLFNBQUssS0FBTDtBQUNBO0FBQ0EsU0FBSyxNQUFMO0FBQ0UsZUFBUztBQUNQLGNBQU0sS0FBSyxXQUFMLENBQWlCLFVBQWpCO0FBREMsT0FBVDtBQUdBO0FBQ0YsU0FBSyxPQUFMO0FBQWM7QUFDWixlQUFTO0FBQ1AsZUFBTztBQUNMLHNCQURLO0FBRUwsZ0JBQU07QUFGRDtBQURBLE9BQVQ7QUFNQTtBQUNGLFNBQUssS0FBTDtBQUNFO0FBQ0EsVUFBSSxhQUFhLEtBQWpCLEVBQ0UsU0FBUztBQUNQLGFBQUs7QUFDSCxlQUFLLFFBQVEsS0FBUixFQURGO0FBRUgsaUJBQU87QUFDTCxnQkFBSTtBQURDLFdBRko7QUFLSCxnQkFBTSxTQUxIO0FBTUgsb0JBQVUsU0FBUyxLQU5oQjtBQU9ILHFCQUFXLENBUFIsQ0FPVTtBQVBWO0FBREUsT0FBVDtBQVdGO0FBL0JKO0FBaUNBLFNBQU87QUFDTCxvQkFBZ0IsSUFEWCxFQUNpQjtBQUN0QixhQUFTLElBRko7QUFHTDtBQUhLLEdBQVA7QUFLRCxDQXpDRDs7QUEyQ0EsTUFBTSxxQkFBTixHQUE4QixVQUFTLE9BQVQsRUFBa0I7QUFDOUMsU0FBTyxLQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsbUJBQTNCLEVBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0scUNBQU4sR0FBOEMsWUFBd0Q7QUFBQTs7QUFBQSxtRkFBSCxFQUFHO0FBQUEsTUFBOUMsT0FBOEMsVUFBOUMsT0FBOEM7QUFBQSxNQUFyQyxRQUFxQyxVQUFyQyxRQUFxQztBQUFBLE1BQTNCLE9BQTJCLFVBQTNCLE9BQTJCO0FBQUEsK0JBQWxCLFFBQWtCO0FBQUEsTUFBbEIsUUFBa0IsbUNBQVQsSUFBUzs7QUFDcEcsU0FBTyxJQUFJLE9BQUosQ0FBWSxtQkFBVztBQUM1QixRQUFNLFdBQVcsUUFBSyxxQkFBTCxDQUEyQixPQUEzQixDQUFqQjs7QUFENEIsaUNBRU0sUUFBSyw4QkFBTCxDQUFvQztBQUNwRSxzQkFEb0U7QUFFcEU7QUFGb0UsS0FBcEMsQ0FGTjtBQUFBLFFBRXJCLFFBRnFCLDBCQUVyQixRQUZxQjtBQUFBLFFBRVgsYUFGVywwQkFFWCxhQUZXOztBQU01QixRQUFNLGVBQWUsUUFBUSxHQUFSLENBQVksYUFBWixDQUFyQjtBQUNBLFFBQU0sT0FBTyxhQUFhLElBQWIsR0FBb0IsU0FBUyxJQUFULENBQWMseUJBQWlCO0FBQzlELFVBQU0scUJBQXFCLGNBQWMsR0FBZCxDQUFrQixRQUFsQixDQUEzQjtBQUNBLGFBQU8sc0JBQXNCLFlBQTdCO0FBQ0QsS0FIZ0MsQ0FBcEIsR0FHVCxLQUhKO0FBSUEsWUFBUSxJQUFSO0FBQ0QsR0FaTSxDQUFQO0FBYUQsQ0FkRDs7QUFnQkEsTUFBTSxjQUFOLEdBQXVCLFlBQWlDO0FBQUEsbUZBQUosRUFBSTtBQUFBLE1BQXZCLE9BQXVCLFVBQXZCLE9BQXVCO0FBQUEsTUFBZCxRQUFjLFVBQWQsUUFBYzs7QUFDdEQsTUFBTSxXQUFXLFNBQVMsU0FBVCxHQUFxQixTQUFTLFNBQVQsRUFBckIsR0FBNEMsU0FBUyxNQUF0RTtBQUNBLE1BQU0sVUFBVSxTQUFTLFFBQVQsR0FBb0IsU0FBUyxRQUFULEVBQXBCLEdBQTBDLFNBQVMsS0FBbkU7QUFDQSxTQUFPLGFBQWEsT0FBYixHQUF1QixPQUF2QixHQUFnQyxRQUF2QztBQUNELENBSkQ7O0FBTUEsTUFBTSwyQkFBTixHQUFvQyxVQUFTLE9BQVQsRUFBMkI7QUFBQTs7QUFBQSxNQUFULElBQVMsdUVBQUosRUFBSTs7QUFDN0QsTUFBTSxXQUFXLEVBQWpCO0FBQ0EsTUFBTSxRQUFRLEtBQUssWUFBTCxDQUFrQixPQUFsQixDQUFkO0FBQ0EsTUFBTSxZQUFZLEtBQUssU0FBTCxHQUFpQixLQUFLLFNBQXRCLEdBQWtDLE1BQU0sV0FBTixHQUFvQixNQUFwQixJQUE4QixNQUFNLFlBQU4sRUFBOUIsR0FBcUQsS0FBSyx5QkFBTCxDQUErQjtBQUN0SSxlQUFXLE1BQU0sWUFBTixHQUFxQixRQUFyQixHQUFnQyxNQUFoQyxDQUF1QztBQUFBLGFBQVksU0FBUyxTQUFULE9BQXlCLE9BQXJDO0FBQUEsS0FBdkMsQ0FEMkg7QUFFdEk7QUFGc0ksR0FBL0IsQ0FBckQsR0FHL0MsRUFITDtBQUlBLE1BQU0sU0FBUyxpQkFBaUIsTUFBaEM7QUFDQSxZQUFVLE9BQVYsQ0FBa0Isb0JBQVk7QUFDNUIsUUFBSSxTQUFTLFVBQWIsRUFBeUIsU0FBUyxVQUFULENBQW9CLElBQXBCLEVBQXpCLEtBQ0ssU0FBUyxPQUFULEdBQW1CLElBQW5CO0FBQ0wsUUFBTSxLQUFLLFFBQUssY0FBTCxDQUFvQjtBQUM3QixzQkFENkI7QUFFN0I7QUFGNkIsS0FBcEIsQ0FBWDtBQUlBLFFBQU0sVUFBVSxJQUFJLE9BQUosQ0FBWSxtQkFBVztBQUNyQyxVQUFNLGFBQWEsS0FBSyxVQUFMLElBQW1CLEtBQXRDO0FBQ0EsV0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsV0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNBLFVBQU0sVUFBVSxRQUFLLHdCQUFMLENBQThCLFVBQTlCLEVBQTBDLElBQTFDLENBQWhCO0FBQ0EsVUFBTSxVQUFVLFFBQUssU0FBTCxDQUFlLEVBQWYsQ0FBaEI7QUFDQSxVQUFNLFVBQVUsUUFBSyxjQUFMLENBQW9CLEVBQXBCLENBQWhCO0FBQ0EsVUFBSSxVQUFVLE9BQWQsRUFBdUI7QUFDckIsZ0JBQVEsWUFBUjtBQUNBLFlBQUksQ0FBQyxRQUFRLFNBQVIsRUFBTCxFQUNFLFFBQVEsS0FBUixDQUFjLE9BQWQsRUFDRyxNQURILENBQ1UsVUFBQyxPQUFELEVBQWE7QUFDbkIsa0JBQVEsTUFBUixDQUFlLFlBQUk7QUFDakIsb0JBQVEsV0FBUjtBQUNBLG9CQUFRLEVBQVI7QUFDRCxXQUhEO0FBSUQsU0FOSCxFQURGLEtBUUs7QUFDSCxrQkFBSyxxQ0FBTCxDQUEyQztBQUN6QyxxQkFBUyxFQURnQztBQUV6Qyw4QkFGeUM7QUFHekMscUJBQVMsS0FBSyxPQUgyQjtBQUl6QyxzQkFBVSxLQUFLO0FBSjBCLFdBQTNDLEVBS0csSUFMSCxDQUtRLGdCQUFPO0FBQ2IsZ0JBQUksSUFBSixFQUFVO0FBQ1Isc0JBQVEsRUFBUjtBQUNBLHNCQUFRLFdBQVI7QUFDRCxhQUhELE1BR087QUFDTCxzQkFBUSxXQUFSLENBQW9CLE9BQXBCLEVBQTZCLE1BQTdCLENBQW9DLG1CQUFXO0FBQzdDLHdCQUFRLE1BQVIsQ0FBZSxZQUFJO0FBQ2pCLDBCQUFRLFdBQVI7QUFDQSwwQkFBUSxFQUFSO0FBQ0QsaUJBSEQ7QUFJRCxlQUxEO0FBTUQ7QUFDRixXQWpCRDtBQWtCRDtBQUNGLE9BOUJELE1BOEJPO0FBQ0wsZ0JBQUsscUNBQUwsQ0FBMkM7QUFDekMsbUJBQVMsRUFEZ0M7QUFFekMsNEJBRnlDO0FBR3pDLG1CQUFTLEtBQUssT0FIMkI7QUFJekMsb0JBQVUsS0FBSztBQUowQixTQUEzQyxFQUtHLElBTEgsQ0FLUTtBQUFBLGlCQUFJLFFBQVEsRUFBUixDQUFKO0FBQUEsU0FMUjtBQU1EO0FBQ0YsS0E3Q2UsQ0FBaEI7QUE4Q0EsYUFBUyxJQUFULENBQWMsT0FBZDtBQUNELEdBdEREO0FBdURBO0FBQ0EsVUFBUSxHQUFSLENBQVksUUFBWixFQUFzQixPQUF0QixDQUE4QjtBQUFBLFdBQUssVUFBVSxPQUFWLENBQWtCLG9CQUFZO0FBQy9ELFVBQUksU0FBUyxVQUFiLEVBQXlCLFNBQVMsVUFBVCxDQUFvQixLQUFwQixFQUF6QixLQUNLLFNBQVMsT0FBVCxHQUFtQixLQUFuQjtBQUNOLEtBSGtDLENBQUw7QUFBQSxHQUE5QjtBQUlBLFNBQU8sUUFBUSxHQUFSLENBQVksUUFBWixDQUFQO0FBQ0QsQ0FyRUQ7O0FBdUVBLE1BQU0sb0JBQU4sR0FBNkIsVUFBUyxPQUFULEVBQWtCO0FBQUE7O0FBQzdDLFNBQU8sSUFBSSxPQUFKLENBQVksbUJBQVc7QUFDNUIsUUFBTSxVQUFVLFFBQUssY0FBTCxDQUFvQixPQUFwQixDQUFoQjtBQUNBLFFBQU0sV0FBVyxRQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsV0FBM0IsRUFBakI7QUFDQSxRQUFJLFFBQVEsT0FBUixNQUFxQixRQUFRLGVBQVIsRUFBekIsRUFBb0Q7QUFDbEQsY0FBSyxNQUFMLENBQVksT0FBWixFQUNHLElBREgsQ0FDUSxZQUFNO0FBQ1YsZ0JBQVEsTUFBUixHQUNHLElBREgsQ0FDUSxZQUFNO0FBQ1Ysa0JBQVEsZUFBUixHQUEwQixPQUExQixDQUFrQyxVQUFDLE9BQUQsRUFBYTtBQUM3QyxxQkFBUyxPQUFULENBQWlCLE9BQWpCLE1BQThCLENBQUMsQ0FBL0IsSUFBb0MsUUFBSyxjQUFMLENBQW9CLE9BQXBCLEVBQTZCLE1BQTdCLEVBQXBDO0FBQ0QsV0FGRDtBQUdELFNBTEg7QUFNRCxPQVJILEVBU0csTUFUSCxDQVNVO0FBQUEsZUFBTSxRQUFRLE9BQVIsQ0FBTjtBQUFBLE9BVFY7QUFVRCxLQVhELE1BWUUsUUFBUSxPQUFSO0FBQ0gsR0FoQk0sQ0FBUDtBQWlCRCxDQWxCRDs7QUFvQkEsTUFBTSxvQkFBTixHQUE2QixVQUFTLFdBQVQsRUFBc0I7QUFDakQsV0FBUywrQkFBVCxDQUF5QyxHQUF6QyxFQUE4QyxNQUE5QyxFQUFzRCxHQUF0RCxFQUEyRDtBQUN6RCxRQUFNLFlBQVksRUFBbEI7QUFDQSxtQkFBYSxFQUFFLDZCQUFGLENBQWIsSUFBbUQsSUFBSSxNQUF2RDtBQUNBLG1CQUFhLEVBQUUsZ0NBQUYsQ0FBYixVQUEwRCxPQUFPLEdBQVAsQ0FBVyxVQUFDLElBQUQ7QUFBQSxhQUFTLEtBQUssRUFBZDtBQUFBLEtBQVgsRUFBNkIsSUFBN0IsQ0FBa0MsR0FBbEMsQ0FBMUQ7QUFDQSxtQkFBYSxFQUFFLGdDQUFGLENBQWIsVUFBMEQsSUFBSSxJQUFKLENBQVMsR0FBVCxDQUExRDtBQUNBLFFBQUksZUFBYSxFQUFFLGdDQUFGLENBQWIsVUFBSjtBQUNBLG9CQUFZLEVBQUUsb0NBQUYsQ0FBWjtBQUNBLG9CQUFZLEVBQUUsOENBQUYsQ0FBWjtBQUNBO0FBQ0EsV0FBTyxPQUFQLENBQWUsU0FBZixFQUEwQixPQUExQixDQUFrQyxrQkFBbUI7QUFBQTtBQUFBLFVBQWpCLE1BQWlCO0FBQUEsVUFBVCxHQUFTOztBQUNuRCxzQkFBYyxNQUFkLFdBQTBCLEdBQTFCO0FBQ0QsS0FGRDtBQUdBO0FBQ0EsV0FBTyxHQUFQO0FBQ0Q7O0FBRUQsTUFBSSxVQUFVLEVBQWQ7QUFDQSxhQUFXLGdDQUFnQyxZQUFZLEdBQTVDLEVBQWlELFlBQVksTUFBN0QsRUFBcUUsWUFBWSxNQUFqRixDQUFYO0FBQ0EsTUFBSSxDQUFDLEVBQUUsT0FBRixDQUFVLFlBQVksU0FBdEIsQ0FBTCxFQUF1QztBQUNyQyxlQUFXLHFGQUFYO0FBQ0EsZUFBVyx1Q0FBc0MsRUFBRSxtQkFBRixDQUF0QyxHQUE4RCxhQUF6RTtBQUNBLFdBQU8sT0FBUCxDQUFlLFlBQVksU0FBM0IsRUFBc0MsT0FBdEMsQ0FBOEMsa0JBQThCO0FBQUE7QUFBQSxVQUEzQixZQUEyQjtBQUFBLFVBQWIsT0FBYTs7QUFDMUUsaUJBQVksMENBQTBDLFlBQTFDLEdBQXlELGVBQXJFO0FBQ0EsaUJBQVcsZ0NBQWdDLFFBQVEsR0FBeEMsRUFBNkMsUUFBUSxNQUFyRCxFQUE2RCxRQUFRLE1BQXJFLENBQVg7QUFDRCxLQUhEO0FBSUQ7QUFDRCxTQUFPLE9BQVA7QUFDRCxDQTVCRDs7QUE4QkEsTUFBTSxxQkFBTixHQUE4QixrQkFBcUQ7QUFBQTs7QUFBQSxNQUEzQyxLQUEyQyxVQUEzQyxLQUEyQztBQUFBLE1BQXBDLFdBQW9DLFVBQXBDLFdBQW9DO0FBQUEsTUFBdkIsS0FBdUIsVUFBdkIsS0FBdUI7QUFBQSxNQUFoQixhQUFnQixVQUFoQixhQUFnQjs7QUFDakY7QUFDQSxNQUFNLFdBQVc7QUFDZixhQUFTO0FBQ1AsZUFBUyxnQ0FERjtBQUVQLGlCQUFXO0FBRkosS0FETTtBQUtmLFdBQU87QUFMUSxHQUFqQjs7QUFRQSxTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBb0I7QUFDckMsUUFBTSxXQUFXLElBQUksc0JBQUosQ0FBMkI7QUFDMUMsWUFBTTtBQURvQyxLQUEzQixDQUFqQjtBQUdBLGFBQVMsS0FBVCxDQUFlO0FBQ2IsY0FBUTtBQUNOLG9CQURNO0FBRU4saUJBQVMsUUFBSyxvQkFBTCxDQUEwQixXQUExQixDQUZIO0FBR047QUFITTtBQURLLEtBQWYsRUFPRyxJQVBILENBT1EsWUFBTTtBQUNWLFVBQU0sU0FBUyxJQUFJLE1BQUosQ0FBVyxNQUFYLENBQWtCO0FBQy9CLGtGQUF3RSxJQUFJLFlBQUosQ0FBaUIsU0FBakIsQ0FBeEUsYUFBMkcsRUFBRSx5QkFBRixDQUEzRyxVQUQrQjtBQUUvQixxQkFBYTtBQUZrQixPQUFsQixDQUFmO0FBSUEsY0FBUSxRQUFSO0FBQ0Esb0JBQWMsTUFBZCxDQUFxQjtBQUFBLGVBQUksT0FBTyxLQUFQLENBQWEsTUFBYixDQUFKO0FBQUEsT0FBckIsRUFOVSxDQU1xQztBQUNoRCxLQWRILEVBZUcsSUFmSCxDQWVRO0FBQUEsYUFBUyxPQUFPLEtBQVAsQ0FBVDtBQUFBLEtBZlIsRUFnQkcsTUFoQkgsQ0FnQlU7QUFBQSxhQUFLLFNBQVMsSUFBVCxFQUFMO0FBQUEsS0FoQlY7QUFpQkQsR0FyQk0sQ0FBUDtBQXNCRCxDQWhDRDs7QUFrQ0E7OztBQUdBLE1BQU0sVUFBTiwyREFBbUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdCQUNULEtBQUssVUFBTCxDQUFnQixJQURQO0FBQUEsMENBRVYsVUFGVTtBQUFBOztBQUFBO0FBQUEsMkNBR04sS0FBSyxNQUFMLENBQVk7QUFDakIsbUJBQU8sS0FEVSxDQUNKO0FBREksV0FBWixDQUhNOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQW5COztBQVNBLE1BQU0sK0JBQU4sR0FBd0Msa0JBQTRCO0FBQUE7O0FBQUEsTUFBbEIsT0FBa0IsVUFBbEIsT0FBa0I7QUFBQSwyQkFBVCxJQUFTO0FBQUEsTUFBVCxJQUFTLCtCQUFKLEVBQUk7O0FBQ2xFLE1BQUksS0FBSywwQ0FBTCxDQUFnRCxPQUFoRCxNQUE2RCxTQUFqRSxFQUNFLEtBQUssMENBQUwsQ0FBZ0QsT0FBaEQsSUFBMkQsSUFBSSxHQUFKLEVBQTNEO0FBQ0YsT0FBSyxPQUFMLENBQWE7QUFBQSxXQUFPLFFBQUssMENBQUwsQ0FBZ0QsT0FBaEQsRUFBeUQsR0FBekQsQ0FBNkQsR0FBN0QsQ0FBUDtBQUFBLEdBQWI7QUFDRCxDQUpEOztBQU1BOzs7QUFHQSxNQUFNLG1CQUFOLDJEQUE0QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxpQkFDcEIsS0FBSyxtQkFBTCxFQURvQjs7QUFBQTtBQUUxQixlQUFLLFlBQUwsR0FBb0IsT0FBcEIsQ0FBNEI7QUFBQSxtQkFBVyxRQUFRLFlBQVIsRUFBWDtBQUFBLFdBQTVCOztBQUYwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUE1Qjs7QUFLQTs7Ozs7QUFLQSxNQUFNLG1CQUFOLDJEQUE0QjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDcEIsd0JBRG9CLEdBQ0gsT0FBTyxJQUFQLENBQVksS0FBSywwQ0FBakIsQ0FERzs7QUFBQSxlQUV0QixlQUFlLE1BRk87QUFBQTtBQUFBO0FBQUE7O0FBR2xCLGdCQUhrQixHQUdUO0FBQ2Isb0JBQVEsRUFESztBQUViLGtCQUFNLEVBRk87QUFHYix1QkFBVztBQUhFLFdBSFM7O0FBUXhCLHlCQUFlLE9BQWYsQ0FBdUIsbUJBQVc7QUFDaEMsZ0JBQU0sb0NBQVcsUUFBSywwQ0FBTCxDQUFnRCxPQUFoRCxDQUFYLEVBQU47QUFDQSxnQkFBSSxLQUFLLE1BQVQsRUFBaUI7QUFDZixrQkFBTSxRQUFRLDRCQUE0QixZQUE1QixDQUF5QyxPQUF6QyxDQUFkO0FBQ0EscUJBQU8sTUFBUCxDQUFjLElBQWQsQ0FBbUIsS0FBbkI7QUFDQSxxQkFBTyxJQUFQLENBQVksSUFBWixDQUFpQixJQUFqQjtBQUNEO0FBQ0YsV0FQRDtBQVFNLGlCQWhCa0IsR0FnQlIsT0FBTyxNQUFQLENBQWMsTUFBZCxHQUF1QixrQkFBa0IsT0FBbEIsQ0FBMEIsbUJBQTFCLEVBQStDO0FBQ3BGLDBCQURvRjtBQUVwRixxQkFBUztBQUNQLHFCQUFPLGlDQURBO0FBRVAsb0JBQU07QUFDSix5QkFBUztBQURMO0FBRkM7QUFGMkUsV0FBL0MsQ0FBdkIsR0FRWCxRQUFRLE9BQVIsRUF4Qm1CO0FBQUE7QUFBQTtBQUFBLGlCQTBCaEIsT0ExQmdCOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUE2QjFCLGVBQUssMENBQUwsR0FBa0QsRUFBbEQ7O0FBN0IwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUE1Qjs7QUFnQ0E7Ozs7Ozs7Ozs7O0FBV0EsTUFBTSxNQUFOLEdBQWUsWUFBNkQ7QUFBQTs7QUFBQSxtRkFBSixFQUFJO0FBQUEsTUFBbkQsT0FBbUQsVUFBbkQsT0FBbUQ7QUFBQSxNQUExQyxXQUEwQyxVQUExQyxXQUEwQztBQUFBLDRCQUE3QixLQUE2QjtBQUFBLE1BQTdCLEtBQTZCLGdDQUF2QixJQUF1QjtBQUFBLDRCQUFqQixLQUFpQjtBQUFBLE1BQWpCLEtBQWlCLGdDQUFYLEtBQVc7O0FBQzFFLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQU0sZ0JBQWdCLEVBQUUsT0FBRixFQUF0QjtBQUYwRSxvQkFHdkIsS0FBSyxVQUhrQjtBQUFBLG1DQUdsRSxFQUhrRTtBQUFBLE1BR2xFLEVBSGtFLGtDQUcvRCxFQUgrRDtBQUFBLHlDQUczRCxRQUgyRDtBQUFBLE1BRzNELFFBSDJELHdDQUdsRCxFQUFDLFNBQVEsRUFBVCxFQUFhLE9BQU0sRUFBbkIsRUFIa0Q7O0FBSTFFLFlBQVUsV0FBVyxLQUFLLEtBQUwsQ0FBVyxlQUFoQztBQUNBLE1BQUksVUFBVSxRQUFRLFVBQVIsRUFBZDtBQUNBLE1BQUksUUFBUSxRQUFRLFFBQVIsRUFBWjtBQUNBLE1BQU0sWUFBWSxNQUFNLE9BQU4sRUFBbEI7QUFDQSxNQUFNLFFBQVEsV0FBZDtBQUNBLGdCQUFjLGVBQWUsUUFBUSxjQUFSLEVBQTdCO0FBVDBFLHFCQVVkLFdBVmM7QUFBQSxzQ0FVbkUsR0FWbUU7QUFBQSxNQVVuRSxHQVZtRSxvQ0FVL0QsRUFWK0Q7QUFBQSx5Q0FVM0QsTUFWMkQ7QUFBQSxNQVVwRCxNQVZvRCx1Q0FVN0MsRUFWNkM7QUFBQSx5Q0FVekMsTUFWeUM7QUFBQSxNQVV6QyxNQVZ5Qyx1Q0FVbEMsRUFWa0M7QUFBQSwyQ0FVOUIsU0FWOEI7QUFBQSxNQVU5QixTQVY4Qix5Q0FVcEIsRUFWb0I7O0FBVzFFLE1BQUksNkJBQUksR0FBSixzQkFBWSxNQUFaLHNCQUF1QixNQUF2QixzQkFBa0MsT0FBTyxJQUFQLENBQVksU0FBWixDQUFsQyxHQUEwRCxNQUExRCxLQUFxRSxDQUF6RSxFQUE0RTtBQUMxRSxRQUFJLGVBQUosQ0FBb0I7QUFDbEIsWUFBTSxNQURZO0FBRWxCLGVBQVMsaUJBRlM7QUFHbEIsaUJBQVcsSUFITztBQUlsQixnQkFBVTtBQUpRLEtBQXBCO0FBTUEsTUFBRSxPQUFGLENBQVUsT0FBVjtBQUNBLFdBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRDtBQUNELE1BQU0sVUFBVSxRQUFRLEtBQUsscUJBQUwsQ0FBMkI7QUFDakQsZ0JBRGlEO0FBRWpELDRCQUZpRDtBQUdqRCxnQkFIaUQ7QUFJakQsZ0NBSmlELENBSW5DO0FBSm1DLEdBQTNCLENBQVIsR0FLWCxRQUFRLE9BQVIsQ0FBZ0IsUUFBaEIsQ0FMTDtBQU1BLFVBQ0csSUFESCxDQUNRLG9CQUFZO0FBQ2xCLFFBQUksaUJBQWlCLE1BQXJCLEVBQTZCO0FBQzNCLGNBQVEsTUFBUixDQUFlLEVBQUMsT0FBTyxTQUFTLFdBQWpCLEVBQWYsRUFDRyxJQURILENBQ1EsVUFBQyxXQUFELEVBQWMsUUFBZCxFQUEyQjtBQUMvQixZQUFJLGlCQUFpQixNQUFyQixFQUE2QjtBQUMzQixjQUFJLFNBQVMsTUFBYixFQUFxQjtBQUFBLG9DQUNnRCxTQUFTLE9BRHpEO0FBQUEsMERBQ1osU0FEWTtBQUFBLGdCQUNaLFNBRFkseUNBQ0YsSUFERTtBQUFBLDBEQUNJLE9BREo7QUFBQSxnQkFDSSxPQURKLHlDQUNZLGdDQURaOztBQUVuQixnQkFBSSxZQUFZLFNBQVMsT0FBekIsRUFBa0MsSUFBSSxlQUFKLENBQW9CO0FBQ3BELG9CQUFNLFNBRDhDO0FBRXBELDhCQUZvRDtBQUdwRCx3QkFBVSxJQUgwQztBQUlwRDtBQUpvRCxhQUFwQjtBQU1sQywwQkFBYyxNQUFNLFVBQU4sQ0FBaUIsTUFBL0IsSUFBeUMsUUFBSyxXQUFMLENBQWlCLFVBQWpCLENBQTRCLEVBQUMsT0FBTyxJQUFSLEVBQTVCLENBQXpDO0FBQ0EsZUFBRyxJQUFILElBQVcsR0FBRyxJQUFILFlBQW1CLFFBQTlCLElBQTBDLEdBQUcsSUFBSCxDQUFRLE9BQVIsQ0FBMUM7QUFDQSxvQkFBSywrQkFBTCxDQUFxQztBQUNuQyx1QkFBUyxRQUFRLEtBQVIsRUFEMEI7QUFFbkMsaURBQVUsU0FBUyxRQUFULENBQWtCLEdBQWxCLENBQXNCLEdBQXRCLENBQTBCO0FBQUEsb0JBQUUsRUFBRixVQUFFLEVBQUY7QUFBQSx1QkFBVSxFQUFWO0FBQUEsZUFBMUIsQ0FBVixzQkFBc0QsWUFBWSxNQUFaLENBQW1CLEdBQW5CLENBQXVCO0FBQUEsdUJBQVUsT0FBTyxFQUFqQjtBQUFBLGVBQXZCLENBQXREO0FBRm1DLGFBQXJDO0FBSUQsV0FkRCxNQWNPO0FBQ0wsZ0JBQU0sU0FBUyxJQUFJLGlCQUFKLENBQXNCO0FBQ25DLHFCQUFPLFNBQVM7QUFEbUIsYUFBdEIsQ0FBZjtBQUdBLGdCQUFNLGVBQWUsT0FBTyxLQUFQLENBQWE7QUFDaEMsb0JBQU07QUFEMEIsYUFBYixDQUFyQjs7QUFKSyxrQ0FPOEIsU0FBUyxLQVB2QztBQUFBLHdEQU9FLFNBUEY7QUFBQSxnQkFPRSxVQVBGLHlDQU9ZLEtBUFo7QUFBQSxnQkFPbUIsUUFQbkIsbUJBT21CLE9BUG5COztBQVFMLGdCQUFJLGVBQUosQ0FBb0I7QUFDbEIsb0JBQU0sT0FEWTtBQUVsQix1QkFBUyxZQUFXLFlBRkY7QUFHbEIsMkJBQWEsQ0FBQyxRQUhJO0FBSWxCO0FBSmtCLGFBQXBCO0FBTUEsZUFBRyxLQUFILElBQVksR0FBRyxLQUFILFlBQW9CLFFBQWhDLElBQTRDLEdBQUcsS0FBSCxDQUFTLE9BQVQsRUFBa0IsWUFBVyxZQUE3QixDQUE1QztBQUNEO0FBQ0QsWUFBRSxPQUFGLENBQVUsT0FBVjtBQUNEO0FBQ0YsT0FuQ0gsRUFvQ0csSUFwQ0gsQ0FvQ1EsWUFBYztBQUFBLFlBQWIsS0FBYSx1RUFBUCxFQUFPOztBQUNsQixZQUFNLFNBQVMsSUFBSSxpQkFBSixDQUFzQjtBQUNuQyxpQkFBTyxNQUFNLE1BQU4sR0FBZSxNQUFNLE1BQXJCLEdBQThCO0FBREYsU0FBdEIsQ0FBZjtBQUdBLFlBQU0sZUFBZSxPQUFPLEtBQVAsQ0FBYTtBQUNoQyxnQkFBTTtBQUQwQixTQUFiLENBQXJCO0FBSmtCLCtCQU9tQixTQUFTLEtBUDVCO0FBQUEscURBT1gsU0FQVztBQUFBLFlBT1gsU0FQVyx5Q0FPQyxLQVBEO0FBQUEsWUFPUSxPQVBSLG9CQU9RLE9BUFI7O0FBUWxCLFlBQUksZUFBSixDQUFvQjtBQUNsQixnQkFBTSxPQURZO0FBRWxCLG1CQUFTLFdBQVcsWUFGRjtBQUdsQix1QkFBYSxDQUFDLE9BSEk7QUFJbEI7QUFKa0IsU0FBcEI7QUFNQSxVQUFFLE1BQUYsQ0FBUyxPQUFUO0FBQ0EsV0FBRyxLQUFILElBQVksR0FBRyxLQUFILFlBQW9CLFFBQWhDLElBQTRDLEdBQUcsS0FBSCxDQUFTLE9BQVQsRUFBa0IsV0FBVyxZQUE3QixDQUE1QztBQUNELE9BcERIO0FBcURBO0FBQ0QsS0F2REQsTUF1RE8sUUFBSyxlQUFMLENBQXFCO0FBQ3BCLGdDQUNHLFFBQVEsS0FBUixFQURILEVBQ3FCLFdBRHJCLENBRG9CO0FBSXBCLFVBQUksY0FBYztBQUpFLEtBQXJCLEVBS0UsSUFMRixDQUtPLFlBQUs7QUFDWCxVQUFJLGVBQUosQ0FBb0I7QUFDbEIsY0FBTSxTQURZO0FBRWxCLGlCQUFTLHNDQUZTO0FBR2xCLG1CQUFXO0FBSE8sT0FBcEI7QUFLQSxjQUFRLFlBQVI7QUFDQSxRQUFFLE9BQUYsQ0FBVSxPQUFWO0FBQ0QsS0FiQSxFQWFFLEtBYkYsQ0FhUSxpQkFBTztBQUNkLFVBQUksZUFBSixDQUFvQjtBQUNsQixjQUFNLE9BRFk7QUFFbEIsaUJBQVMsS0FGUztBQUdsQixxQkFBYTtBQUhLLE9BQXBCO0FBS0EsUUFBRSxNQUFGLENBQVMsT0FBVDtBQUNELEtBcEJBO0FBcUJOLEdBOUVILEVBK0VHLEtBL0VILENBK0VTLFlBQU07QUFDWCxNQUFFLE1BQUYsQ0FBUyxPQUFUO0FBQ0gsR0FqRkQ7QUFrRkEsU0FBTyxhQUFQO0FBQ0QsQ0E5R0Q7O0FBZ0hBOzs7O0FBSUEsTUFBTSxnQ0FBTixHQUF5QyxZQUFVO0FBQ2pELE9BQUssd0JBQUwsR0FBZ0MsRUFBaEM7QUFDRCxDQUZEOztBQUlBLE1BQU0sNEJBQU4sR0FBcUMsVUFBUyxPQUFULEVBQWlCO0FBQ3BELE9BQUssd0JBQUwsQ0FBOEIsT0FBOUIsSUFBeUMsRUFBekM7QUFDRCxDQUZEOztBQUlBLE1BQU0sdUNBQU4sR0FBZ0Qsa0JBQTZCO0FBQUE7O0FBQUEsTUFBbkIsT0FBbUIsVUFBbkIsT0FBbUI7QUFBQSxNQUFWLE9BQVUsVUFBVixPQUFVOztBQUMzRSxNQUFJLEtBQUssd0JBQUwsQ0FBOEIsT0FBOUIsQ0FBSixFQUE0QztBQUMxQyxXQUFPLElBQVAsQ0FBWSxRQUFRLGFBQVIsRUFBWixFQUFxQyxPQUFyQyxDQUE2QyxvQkFBVztBQUN0RCxVQUFJLE9BQU8sUUFBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1QyxRQUF2QyxDQUFQLEtBQTRELFdBQWhFLEVBQ0UsUUFBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1QyxRQUF2QyxFQUFpRCxNQUFqRCxDQUF3RCxRQUFRLEdBQVIsQ0FBWSxRQUFaLENBQXhEO0FBQ0gsS0FIRDtBQUlEO0FBQ0YsQ0FQRDs7QUFTQSxNQUFNLCtDQUFOLEdBQXdELGtCQUE4QztBQUFBOztBQUFBLE1BQXBDLE9BQW9DLFVBQXBDLE9BQW9DO0FBQUEsTUFBM0IsZUFBMkIsVUFBM0IsZUFBMkI7QUFBQSxNQUFWLE9BQVUsVUFBVixPQUFVOztBQUNwRyxNQUFJLE9BQU8sS0FBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyw2QkFBdEQsS0FBd0YsV0FBNUYsRUFDRSxLQUFLLHdCQUFMLENBQThCLGVBQTlCLEVBQStDLDZCQUEvQyxHQUErRSxFQUEvRTtBQUNGLFNBQU8sSUFBUCxDQUFZLFFBQVEsYUFBUixFQUFaLEVBQXFDLE9BQXJDLENBQTZDLG9CQUFXO0FBQ3RELFFBQUksT0FBTyxRQUFLLHdCQUFMLENBQThCLGVBQTlCLEVBQStDLDZCQUEvQyxDQUE2RSxPQUE3RSxDQUFQLEtBQWlHLFdBQXJHLEVBQ0UsUUFBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyw2QkFBL0MsQ0FBNkUsT0FBN0UsSUFBd0YsRUFBeEY7QUFDRixRQUFJLE9BQU8sUUFBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1QyxRQUF2QyxDQUFQLEtBQTRELFdBQWhFLEVBQTZFO0FBQzNFLGNBQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQS9DLENBQTZFLE9BQTdFLEVBQXNGLFFBQXRGLElBQWtHLElBQUksR0FBSixDQUFRLFFBQUssd0JBQUwsQ0FBOEIsT0FBOUIsRUFBdUMsUUFBdkMsQ0FBUixDQUFsRztBQUNBLGNBQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQS9DLENBQTZFLE9BQTdFLEVBQXNGLFFBQXRGLEVBQWdHLE1BQWhHLENBQXVHLFFBQVEsR0FBUixDQUFZLFFBQVosQ0FBdkc7QUFDRDtBQUNGLEdBUEQ7QUFRRCxDQVhEOztBQWFBLE1BQU0seUJBQU47QUFBQSx1RUFBa0Msa0JBQWUsT0FBZjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDMUIscUNBRDBCLEdBQ0UsRUFERjtBQUUxQixpQkFGMEIsR0FFbEIsNEJBQTRCLFlBQTVCLENBQXlDLE9BQXpDLENBRmtCOztBQUdoQyxrQkFBTSxnQkFBTixHQUF5QixPQUF6QixDQUFpQyxpQkFBUztBQUN4QyxrQkFBSSxNQUFNLFFBQU4sQ0FBZSxNQUFuQixFQUEyQjtBQUN6QixvQkFBSSxPQUFPLFFBQUsseUJBQUwsQ0FBK0IsRUFBQyxnQkFBRCxFQUFVLFlBQVYsRUFBL0IsQ0FBUCxLQUE0RCxXQUFoRSxFQUE2RTtBQUMzRSxzQkFBTSxVQUFVLE1BQU0sYUFBTixDQUFvQixFQUFDLFFBQVEsTUFBTSxJQUFmLEVBQXBCLENBQWhCO0FBQ0EsMEJBQVEsSUFBUixDQUFhLFlBQWU7QUFBQSx3QkFBZCxNQUFjLHVFQUFQLEVBQU87O0FBQzFCLHdCQUFJLE9BQU8sUUFBSyx3QkFBTCxDQUE4QixPQUE5QixDQUFQLEtBQWtELFdBQXRELEVBQ0UsUUFBSyx3QkFBTCxDQUE4QixPQUE5QixJQUF5QyxFQUF6QztBQUNGLDRCQUFLLHdCQUFMLENBQThCLE9BQTlCLEVBQXVDLE1BQU0sSUFBN0MsSUFBcUQsSUFBSSxHQUFKLENBQVEsTUFBUixDQUFyRDtBQUNELG1CQUpEO0FBS0EsNENBQTBCLElBQTFCLENBQStCLE9BQS9CO0FBQ0Q7QUFDRjtBQUNGLGFBWkQ7QUFIZ0M7QUFBQSxtQkFnQjFCLFFBQVEsVUFBUixDQUFtQix5QkFBbkIsQ0FoQjBCOztBQUFBO0FBQUEsOENBaUJ6QixLQUFLLHdCQUFMLENBQThCLE9BQTlCLENBakJ5Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFsQzs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFvQkE7Ozs7QUFJQSxNQUFNLHdDQUFOLEdBQWlELFVBQVMsT0FBVCxFQUFrQjtBQUFBOztBQUNqRSxNQUFJLE9BQU8sS0FBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1Qyw2QkFBOUMsS0FBZ0YsV0FBcEYsRUFBaUc7QUFDL0YsV0FBTyxJQUFQLENBQVksS0FBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1Qyw2QkFBbkQsRUFBa0YsT0FBbEYsQ0FBMEYsMkJBQWtCO0FBQzFHLGFBQU8sT0FBUCxDQUFlLFFBQUssd0JBQUwsQ0FBOEIsT0FBOUIsRUFBdUMsNkJBQXZDLENBQXFFLGVBQXJFLENBQWYsRUFBc0csT0FBdEcsQ0FBOEcsa0JBQStCO0FBQUE7QUFBQSxZQUE3QixTQUE2QjtBQUFBLFlBQWxCLFlBQWtCOztBQUMzSSxnQkFBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyxTQUEvQyxJQUE0RCxZQUE1RDtBQUNELE9BRkQ7QUFHRCxLQUpEO0FBS0EsU0FBSyx5Q0FBTCxDQUErQyxPQUEvQztBQUNEO0FBQ0YsQ0FURDs7QUFXQSxNQUFNLHlDQUFOLEdBQWtELFVBQVMsT0FBVCxFQUFrQjtBQUNsRSxTQUFPLEtBQUssd0JBQUwsQ0FBOEIsT0FBOUIsRUFBdUMsNkJBQTlDO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLHlCQUFOLEdBQWtDLGtCQUEwQjtBQUFBLE1BQWhCLE9BQWdCLFVBQWhCLE9BQWdCO0FBQUEsTUFBUCxLQUFPLFVBQVAsS0FBTzs7QUFDMUQsU0FBTyxLQUFLLHdCQUFMLENBQThCLE9BQTlCLEtBQTBDLEtBQUssd0JBQUwsQ0FBOEIsT0FBOUIsRUFBdUMsTUFBTSxJQUE3QyxDQUFqRDtBQUNELENBRkQ7O0FBSUEsTUFBTSw4QkFBTixHQUF1QyxrQkFBNEM7QUFBQSxNQUFsQyxPQUFrQyxVQUFsQyxPQUFrQztBQUFBLE1BQXpCLGVBQXlCLFVBQXpCLGVBQXlCO0FBQUEsTUFBUixLQUFRLFVBQVIsS0FBUTs7QUFDakYsTUFBSSxPQUFPLEtBQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQXRELEtBQXdGLFdBQTVGLEVBQXlHO0FBQ3ZHLFFBQUksT0FBTyxLQUFLLHdCQUFMLENBQThCLGVBQTlCLEVBQStDLDZCQUEvQyxDQUE2RSxPQUE3RSxDQUFQLEtBQWlHLFdBQXJHLEVBQ0UsSUFBSSxPQUFPLEtBQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQS9DLENBQTZFLE9BQTdFLEVBQXNGLE1BQU0sSUFBNUYsQ0FBUCxLQUE2RyxXQUFqSCxFQUNFLE9BQU8sS0FBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyw2QkFBL0MsQ0FBNkUsT0FBN0UsRUFBc0YsTUFBTSxJQUE1RixDQUFQO0FBQ0w7QUFDRCxTQUFPLEtBQUsseUJBQUwsQ0FBK0I7QUFDcEMsb0JBRG9DO0FBRXBDO0FBRm9DLEdBQS9CLENBQVA7QUFJRCxDQVZEOztBQVlBLE1BQU0sNEJBQU4sR0FBcUMsa0JBQThDO0FBQUEsTUFBcEMsT0FBb0MsVUFBcEMsT0FBb0M7QUFBQSxNQUEzQixLQUEyQixVQUEzQixLQUEyQjtBQUFBLE1BQXBCLFFBQW9CLFVBQXBCLFFBQW9CO0FBQUEsTUFBVixRQUFVLFVBQVYsUUFBVTs7QUFDakYsT0FBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1QyxNQUFNLElBQTdDLEVBQW1ELE1BQW5ELENBQTBELFFBQTFEO0FBQ0EsT0FBSyx3QkFBTCxDQUE4QixPQUE5QixFQUF1QyxNQUFNLElBQTdDLEVBQW1ELEdBQW5ELENBQXVELFFBQXZEO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLG9DQUFOLEdBQTZDLGtCQUErRDtBQUFBLE1BQXJELE9BQXFELFVBQXJELE9BQXFEO0FBQUEsTUFBNUMsZUFBNEMsVUFBNUMsZUFBNEM7QUFBQSxNQUEzQixLQUEyQixVQUEzQixLQUEyQjtBQUFBLE1BQXBCLFFBQW9CLFVBQXBCLFFBQW9CO0FBQUEsTUFBVixRQUFVLFVBQVYsUUFBVTs7QUFDMUcsTUFBSSxPQUFPLEtBQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQXRELEtBQXdGLFdBQTVGLEVBQ0UsS0FBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyw2QkFBL0MsR0FBK0UsRUFBL0U7QUFDRixNQUFJLE9BQU8sS0FBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyw2QkFBL0MsQ0FBNkUsT0FBN0UsQ0FBUCxLQUFpRyxXQUFyRyxFQUNFLEtBQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQS9DLENBQTZFLE9BQTdFLElBQXdGLEVBQXhGO0FBQ0YsT0FBSyx3QkFBTCxDQUE4QixlQUE5QixFQUErQyw2QkFBL0MsQ0FBNkUsT0FBN0UsRUFBc0YsTUFBTSxJQUE1RixJQUFvRyxJQUFJLEdBQUosQ0FBUSxLQUFLLHdCQUFMLENBQThCLE9BQTlCLEVBQXVDLE1BQU0sSUFBN0MsQ0FBUixDQUFwRztBQUNBLE9BQUssd0JBQUwsQ0FBOEIsZUFBOUIsRUFBK0MsNkJBQS9DLENBQTZFLE9BQTdFLEVBQXNGLE1BQU0sSUFBNUYsRUFBa0csTUFBbEcsQ0FBeUcsUUFBekc7QUFDQSxPQUFLLHdCQUFMLENBQThCLGVBQTlCLEVBQStDLDZCQUEvQyxDQUE2RSxPQUE3RSxFQUFzRixNQUFNLElBQTVGLEVBQWtHLEdBQWxHLENBQXNHLFFBQXRHO0FBQ0QsQ0FSRDs7QUFVQSxNQUFNLHdCQUFOLEdBQWlDLGtCQUFrQztBQUFBLE1BQXhCLE9BQXdCLFVBQXhCLE9BQXdCO0FBQUEsTUFBZixLQUFlLFVBQWYsS0FBZTtBQUFBLE1BQVIsS0FBUSxVQUFSLEtBQVE7O0FBQ2pFLE9BQUssd0JBQUwsQ0FBOEIsT0FBOUIsRUFBdUMsTUFBTSxJQUE3QyxFQUFtRCxHQUFuRCxDQUF1RCxLQUF2RDtBQUNELENBRkQ7O0FBSUEsTUFBTSwyQkFBTixHQUFvQyxrQkFBa0M7QUFBQSxNQUF4QixPQUF3QixVQUF4QixPQUF3QjtBQUFBLE1BQWYsS0FBZSxVQUFmLEtBQWU7QUFBQSxNQUFSLEtBQVEsVUFBUixLQUFROztBQUNwRSxPQUFLLHdCQUFMLENBQThCLE9BQTlCLEVBQXVDLE1BQU0sSUFBN0MsRUFBbUQsTUFBbkQsQ0FBMEQsS0FBMUQ7QUFDRCxDQUZEOztBQUlBLE1BQU0sOEJBQU4sR0FBdUMsa0JBQTZDO0FBQUE7O0FBQUEsTUFBbkMsT0FBbUMsVUFBbkMsT0FBbUM7QUFBQSxtQ0FBMUIsWUFBMEI7QUFBQSxNQUExQixZQUEwQix1Q0FBYixFQUFhO0FBQUEsTUFBVCxNQUFTLFVBQVQsTUFBUzs7QUFDbEYsTUFBSSxPQUFPLEtBQUssd0JBQUwsQ0FBOEIsT0FBOUIsQ0FBUCxLQUFrRCxXQUF0RCxFQUFtRTtBQUNqRSxpQkFBYSxPQUFiLENBQXFCLGdCQUFRO0FBQzNCLGFBQU8sSUFBUCxDQUFZLFFBQUssd0JBQUwsQ0FBOEIsT0FBOUIsQ0FBWixFQUFvRCxPQUFwRCxDQUE0RCxnQkFBTztBQUNqRSxZQUFJLE1BQU0sT0FBTixDQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2Qjs7O0FBRHVCLHFDQUk4QixJQUo5QjtBQUFBLGNBSVAsVUFKTyxZQUlmLE9BSmU7QUFBQSxjQUllLFVBSmYsWUFJTyxPQUpQOztBQUt2QixjQUFJLFdBQVcsR0FBWCxDQUFlLElBQWYsS0FBd0IsV0FBVyxHQUFYLENBQWUsSUFBZixDQUE1QixFQUFrRDtBQUNoRCxnQkFBTSxXQUFXLFdBQVcsTUFBWCxHQUFvQixXQUFXLEdBQVgsQ0FBZSxJQUFmLENBQXBCLEdBQTRDLFdBQVcsR0FBWCxDQUFlLElBQWYsQ0FBN0Q7QUFDQSxnQkFBTSxXQUFXLFdBQVcsTUFBWCxHQUFvQixXQUFXLEdBQVgsQ0FBZSxJQUFmLENBQXBCLEdBQTRDLFdBQVcsR0FBWCxDQUFlLElBQWYsQ0FBN0Q7QUFDQSxvQkFBSyw0QkFBTCxDQUFrQztBQUNoQyw4QkFEZ0M7QUFFaEMscUJBQU87QUFDTDtBQURLLGVBRnlCO0FBS2hDLGdDQUxnQztBQU1oQztBQU5nQyxhQUFsQztBQVFEO0FBQ0YsU0FqQkQsTUFpQk87QUFBQSxjQUNFLE9BREYsR0FDYSxJQURiLENBQ0UsT0FERjtBQUVMOzs7OztBQUlBLGNBQU0sZUFBZSxRQUFRLFFBQVIsRUFBckI7QUFDQTs7O0FBR0EsbUJBQVEsaUJBQWlCLEtBQWpCLEdBQXlCLFFBQXpCLEdBQW9DLEtBQTVDLDZCQUEwRTtBQUN4RSw0QkFEd0U7QUFFeEUsbUJBQU87QUFDTDtBQURLLGFBRmlFO0FBS3hFLG1CQUFPLFFBQVEsR0FBUixDQUFZLElBQVo7QUFMaUUsV0FBMUU7QUFPRDtBQUNGLE9BcENEO0FBcUNELEtBdENEO0FBdUNEO0FBQ0YsQ0ExQ0Q7O0FBNENBLE1BQU0saUNBQU4sR0FBMEMsa0JBQXdDO0FBQUE7O0FBQUEsTUFBOUIsb0JBQThCLFVBQTlCLG9CQUE4QjtBQUFBLE1BQVIsTUFBUSxVQUFSLE1BQVE7O0FBQ2hGLFNBQU8sT0FBUCxDQUFlLG9CQUFmLEVBQXFDLE9BQXJDLENBQTZDLGtCQUFvRTtBQUFBO0FBQUEsUUFBbEUsT0FBa0U7QUFBQTtBQUFBLFFBQXBELFlBQW9ELFdBQXhELEdBQXdEO0FBQUEsUUFBekIsb0JBQXlCLFdBQXRDLFlBQXNDOztBQUMvRyxZQUFLLDhCQUFMLENBQW9DO0FBQ2xDLHNCQURrQztBQUVsQyxnQ0FGa0M7QUFHbEM7QUFIa0MsS0FBcEM7QUFLQSxZQUFLLGlDQUFMLENBQXVDO0FBQ3JDLGdEQURxQztBQUVyQztBQUZxQyxLQUF2QztBQUlELEdBVkQ7QUFXRCxDQVpEOztBQWNBOzs7QUFHQSxNQUFNLG1CQUFOLEdBQTRCLFVBQVMsT0FBVCxFQUFpQjtBQUMzQyxTQUFPLDRCQUE0QixZQUE1QixDQUF5QyxPQUF6QyxDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLDBCQUFOO0FBQUEsdUVBQW1DO0FBQUEsUUFBZ0IsT0FBaEIsVUFBZ0IsT0FBaEI7QUFBQSxRQUF5QixHQUF6QixVQUF5QixHQUF6QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDN0IsbUJBRDZCO0FBRTNCLGlCQUYyQixHQUVuQixLQUFLLG1CQUFMLENBQXlCLE9BQXpCLENBRm1CO0FBQUE7QUFBQTtBQUFBLG1CQUlSLElBQUksR0FBSixDQUFRO0FBQzdCLG1CQUFLLE1BQU0sTUFBTixDQUFhLE1BQWIsQ0FEd0I7QUFFN0Isc0JBQVE7QUFDTixzQkFBTTtBQURBO0FBRnFCLGFBQVIsQ0FKUTs7QUFBQTtBQUl6QixvQkFKeUI7QUFVekIsb0JBVnlCLEdBVWQsaUNBQWlDLFFBQWpDLENBVmM7O0FBVy9CLGdCQUFJLFNBQVMsTUFBYixFQUFxQixVQUFVLFNBQVMsQ0FBVCxDQUFWO0FBWFU7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSw4Q0FhMUIsT0FiMEI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBbkM7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBZ0JBLE1BQU0sdUNBQU4sR0FBZ0QsVUFBUyxLQUFULEVBQXFDO0FBQUEsTUFBckIsT0FBcUIsdUVBQWIsRUFBQyxTQUFRLEVBQVQsRUFBYTtBQUFBLHlCQUMvRCxPQUQrRCxDQUM3RSxPQUQ2RTtBQUFBLE1BQzdFLE9BRDZFLG9DQUNyRSxFQURxRTs7QUFFcEYsTUFBTSxlQUFlLE1BQU0sZUFBTixFQUFyQjtBQUNBLFNBQU8sNEJBQTRCLFNBQTVCLEdBQXdDLE1BQXhDLENBQStDLGlCQUFTO0FBQzdELFdBQVEsTUFBTSxVQUFOLE1BQ0gsTUFBTSxlQURILElBQ3NCLE1BQU0sZUFBTixFQUR0QixJQUVILFFBQVEsT0FBUixDQUFnQixNQUFNLEtBQU4sRUFBaEIsTUFBbUMsQ0FBQyxDQUZsQyxLQUdELE1BQU0sZUFBTixPQUE0QixZQUE1QixJQUNBLHVCQUF1QixNQUFNLGVBQU4sRUFBdkIsRUFBZ0QsWUFBaEQsS0FBa0UsU0FBUyxlQUFULENBQXlCLFlBQXpCLENBSmpFLENBQVA7QUFNRCxHQVBNLENBQVA7QUFRQSxDQVhEOztBQWFBOzs7Ozs7QUFNQSxNQUFNLHdDQUFOLEdBQWlELFVBQVMsS0FBVCxFQUFlO0FBQzlELE1BQU0sZUFBZSxNQUFNLGVBQU4sRUFBckI7QUFDQSxTQUFPLEtBQUssV0FBTCxDQUFpQixpQkFBakIsR0FBcUMsTUFBckMsQ0FBNEMseUJBQWlCO0FBQ2xFLFFBQU0sV0FBVyxjQUFjLFNBQWQsR0FBMEIsV0FBMUIsRUFBakI7QUFDQSxRQUFJLFlBQVksU0FBUyxNQUF6QixFQUFpQztBQUMvQixhQUFPLFNBQVMsQ0FBVCxFQUFZLFdBQVosS0FDSixpQkFBaUIsU0FBUyxDQUFULEVBQVksV0FBWixHQUEwQixPQUExQixFQUFsQixJQUVBLHVCQUF1QixZQUF2QixFQUFxQyxTQUFTLENBQVQsRUFBWSxXQUFaLEdBQTBCLE9BQTFCLEVBQXJDLENBSEssR0FHdUUsS0FIOUU7QUFJRCxLQUxELE1BS08sT0FBTyxLQUFQO0FBQ1IsR0FSTSxDQUFQO0FBU0QsQ0FYRDs7QUFhQSxlQUFlLG1CQUFmLEdBQXFDLENBQUMsUUFBRCxDQUFyQzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsSUFBSSxjQUFKLEVBQWpCOzs7Ozs7O0lDMXRETyxHLEdBQU8sT0FBTyxHLENBQWQsRzs7QUFDUCxJQUFNLElBQUksT0FBTyxJQUFQLENBQVksSUFBWixDQUFpQixPQUEzQjtJQUNPLEssR0FBUyxPQUFPLElBQVAsQ0FBWSxLLENBQXJCLEs7SUFDQSxjLEdBQWtCLE9BQU8sSUFBUCxDQUFZLFEsQ0FBOUIsYzs7QUFFUDs7QUFDQSxJQUFNLGdCQUFnQjtBQUNwQixXQUFTLENBQUMsZ0JBQUQsRUFBbUIsZUFBbkIsQ0FEVztBQUVwQixXQUFVLEVBRlU7QUFHcEIsV0FBUyxDQUFDLGFBQUQsQ0FIVztBQUlwQixnQkFBYyxDQUFDLFlBQUQsQ0FKTTtBQUtwQixhQUFXLENBQUMsYUFBRCxFQUFnQixZQUFoQjtBQUxTLENBQXRCOztBQVFBLElBQU0sa0JBQWtCLFNBQWxCLGVBQWtCLENBQVMsT0FBVCxFQUFnQztBQUFBOztBQUFBLE1BQWQsT0FBYyx1RUFBSixFQUFJOztBQUN0RDtBQUNBLE9BQUssY0FBTCxHQUFzQixPQUF0QjtBQUNBLE9BQUssZUFBTCxHQUF1QixLQUFLLGtCQUFMLEVBQXZCO0FBQ0EsT0FBSyxZQUFMLEdBQW9CLEtBQUssZUFBTCxDQUFxQixRQUFyQixFQUFwQjtBQUNBOzs7OztBQUxzRCxNQVUvQyxRQVYrQyxHQVV4QixPQVZ3QixDQVUvQyxRQVYrQztBQUFBLE1BVXJDLFNBVnFDLEdBVXhCLE9BVndCLENBVXJDLFNBVnFDOztBQVd0RCxPQUFLLFFBQUwsR0FBZ0IsUUFBaEI7QUFDQTtBQUNBLE9BQUssU0FBTCxHQUFpQixTQUFqQjtBQUNBO0FBQ0EsT0FBSyxlQUFMO0FBQ0EsT0FBSyx3QkFBTCxHQUFnQyxLQUFoQztBQUNBO0FBQ0EsT0FBSyxnQkFBTCxHQUF3QixLQUFLLFFBQUwsQ0FBYyxLQUFkLEtBQXdCLEtBQUssY0FBN0IsR0FBOEMsS0FBSyxRQUFMLENBQWMsTUFBNUQsR0FBcUUsS0FBSyxRQUFMLENBQWMsS0FBM0c7QUFDQTtBQUNBLE1BQU0sZ0JBQWdCLEtBQUssUUFBTCxFQUF0QjtBQUNBLE9BQUssVUFBTCxHQUFrQixjQUFjLE9BQWQsRUFBbEI7QUFDQTtBQUNBLE1BQU0sb0JBQW9CLEtBQUssVUFBTCxLQUFvQixNQUFNLFVBQU4sQ0FBaUIsTUFBckMsR0FBOEMsY0FBYyxlQUFkLEVBQTlDLEdBQWdGLE1BQU0sVUFBTixDQUFpQixLQUEzSDtBQUNBOztBQXhCc0QsOEJBeUJiLEtBQUssaUJBQUwsR0FBeUIsOEJBQXpCLENBQXdEO0FBQy9GLGFBQVMsS0FBSyxjQURpRjtBQUUvRixjQUFVLEtBQUs7QUFGZ0YsR0FBeEQsQ0F6QmE7QUFBQSxNQXlCcEMsbUJBekJvQyx5QkF5QjlDLFFBekI4QztBQTZCdEQ7OztBQUNBLE9BQUssc0JBQUwsR0FBOEIsS0FBSyxZQUFMLENBQWtCLHNCQUFsQixDQUF5QyxtQkFBekMsQ0FBOUI7QUFDQSxPQUFLLHdCQUFMLEdBQWdDLEtBQUssNkJBQUwsRUFBaEM7QUFDQTtBQUNBO0FBQ0EsT0FBSyx1Q0FBTCxHQUErQyxLQUFLLHNCQUFMLEdBQzNDLEtBQUssc0JBQUwsR0FBOEIsT0FBOUIsQ0FBc0MsR0FBdEMsQ0FBMEMsbUJBQTFDLENBRDJDLEdBRTNDLEtBQUssc0JBQUwsR0FBOEIsT0FBOUIsQ0FBc0MsS0FBdEMsRUFGSjtBQUdBO0FBQ0EsT0FBSyxjQUFMLEdBQXNCLEVBQXRCO0FBQ0EsT0FBSyxrQkFBTCxHQUEwQixJQUExQjtBQUNBO0FBQ0EsT0FBSyxZQUFMLEdBQW1CO0FBQ2pCLFlBQVEsS0FBSyxZQUFMLENBQWtCLHNCQUFsQixFQURTO0FBRWpCLGNBQVUsS0FBSyxZQUFMLENBQWtCLHNCQUFsQjtBQUZPLEdBQW5CO0FBSUE7QUFDQSxNQUFJLHNCQUFzQixNQUFNLFVBQU4sQ0FBaUIsS0FBM0MsRUFBa0Q7QUFDL0MsU0FBSyxZQUFMLENBQWtCLFFBQWxCLENBQTJCLElBQTNCLENBQWdDO0FBQUEsYUFBYyxlQUFlLGdCQUE3QjtBQUFBLEtBQWhDLE1BQW1GLFNBQXBGLElBQWtHLEtBQUssY0FBTCxDQUFvQixJQUFwQixDQUF5QjtBQUN6SCxhQUFPO0FBQ0wsY0FBTSxvQkFERDtBQUVMLFlBQUksZUFGQztBQUdMLGNBQU07QUFIRDtBQURrSCxLQUF6QixDQUFsRztBQU9DLFNBQUssWUFBTCxDQUFrQixRQUFsQixDQUEyQixJQUEzQixDQUFnQztBQUFBLGFBQWMsZUFBZSxxQkFBN0I7QUFBQSxLQUFoQyxNQUF3RixTQUF6RixJQUF1RyxLQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBeUI7QUFDOUgsYUFBTztBQUNMLGNBQU0sb0JBREQ7QUFFTCxZQUFJLGdCQUZDO0FBR0wsY0FBTTtBQUhEO0FBRHVILEtBQXpCLENBQXZHO0FBT0QsR0FmRCxNQWVPO0FBQ0wsUUFBTSxtQkFBbUIsS0FBSyxpQkFBTCxHQUF5QixjQUF6QixDQUF3QyxLQUFLLGdCQUE3QyxFQUErRCxRQUEvRCxFQUF6QjtBQUNBLHFCQUFpQixPQUFqQixDQUF5QixnQkFBUTtBQUMvQixVQUFJLEVBQUUsTUFBRixDQUFTLGNBQWMsaUJBQWQsQ0FBVCxFQUEyQyxjQUFjLE9BQXpELEVBQWtFLE9BQWxFLENBQTBFLEtBQUssS0FBTCxFQUExRSxNQUE0RixDQUFDLENBQWpHLEVBQ0UsTUFBSyxjQUFMLENBQW9CLElBQXBCLENBQXlCLEVBQUUsU0FBRixDQUFZLElBQVosQ0FBekI7QUFDSCxLQUhEO0FBSUQ7QUFDRCxPQUFLLG1CQUFMO0FBQ0QsQ0FyRUQ7O0FBdUVBLElBQU0sUUFBUSxnQkFBZ0IsU0FBOUI7O0FBRUEsTUFBTSxzQkFBTixHQUErQixZQUFVO0FBQ3ZDLFNBQU8sS0FBSyxZQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLG1CQUFOLEdBQTRCLFlBQVc7QUFBQTs7QUFDckMsTUFBTSxrRkFDSCxNQUFNLFVBQU4sQ0FBaUIsTUFEZCxFQUN1QjtBQUN6QixVQUFNLFFBQVEsbUNBQVIsQ0FEbUI7QUFFekIsU0FBSyxRQUFRLGlDQUFSLENBRm9CO0FBR3pCLG1CQUFlLFFBQVEsMERBQVI7QUFIVSxHQUR2Qix1Q0FNSCxNQUFNLFVBQU4sQ0FBaUIsS0FOZCxFQU1zQjtBQUN4QixVQUFNLFFBQVEsZ0NBQVIsQ0FEa0I7QUFFeEIsU0FBSyxRQUFRLHNDQUFSO0FBRm1CLEdBTnRCLHNCQUFOO0FBV0EsT0FBSyxrQkFBTCxHQUEwQixrQkFBa0IsS0FBSyxVQUF2QixDQUExQjtBQUNELENBYkQ7O0FBZUEsTUFBTSx1QkFBTixHQUFnQyxZQUFXO0FBQ3pDLFNBQU8sSUFBSSxLQUFLLGtCQUFMLENBQXdCLElBQTVCLEVBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sc0JBQU4sR0FBK0IsWUFBVztBQUN4QyxTQUFPLElBQUksS0FBSyxrQkFBTCxDQUF3QixHQUE1QixFQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLHNCQUFOLEdBQStCLFlBQW9CO0FBQUEsTUFBWCxPQUFXLHVFQUFILEVBQUc7O0FBQ2pELFNBQU8sSUFBSSxLQUFLLGtCQUFMLENBQXdCLGFBQTVCLENBQTBDLE9BQTFDLENBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sZ0JBQU4sR0FBeUIsWUFBVztBQUNsQyxTQUFPLEtBQUssY0FBWjtBQUNELENBRkQ7O0FBSUEsTUFBTSx3QkFBTixHQUFpQyxVQUFTLFFBQVQsRUFBbUI7QUFDbEQsTUFBTSxnQkFBZ0IsS0FBSyxRQUFMLEdBQWdCLGVBQWhCLEdBQWtDLFFBQWxDLEVBQXRCO0FBQ0EsTUFBTSxlQUFlLEtBQUssUUFBTCxHQUFnQixlQUFoQixFQUFyQjtBQUNBLE1BQUksY0FBSjtBQUNBLE1BQUksaUJBQWlCLFlBQWpCLElBQWlDLGlCQUFpQixpQkFBdEQsRUFBeUU7QUFDdkUsWUFBUSxJQUFJLEdBQUcsS0FBSCxDQUFTLEtBQWIsQ0FBbUI7QUFDekIsY0FBUSxJQUFJLEdBQUcsS0FBSCxDQUFTLE1BQWIsQ0FBb0I7QUFDMUIsZUFBTyxnQkFEbUI7QUFFMUIsZUFBTztBQUZtQixPQUFwQjtBQURpQixLQUFuQixDQUFSO0FBTUQsR0FQRCxNQU9PLElBQUksaUJBQWlCLE9BQWpCLElBQTRCLGlCQUFpQixZQUFqRCxFQUErRDtBQUNwRSxZQUFRLElBQUksR0FBRyxLQUFILENBQVMsS0FBYixDQUFtQjtBQUN6QixhQUFPLElBQUksR0FBRyxLQUFILENBQVMsTUFBYixDQUFvQjtBQUN6QixnQkFBUSxDQURpQjtBQUV6QixjQUFNLElBQUksR0FBRyxLQUFILENBQVMsSUFBYixDQUFrQjtBQUN0QixpQkFBTztBQURlLFNBQWxCO0FBRm1CLE9BQXBCO0FBRGtCLEtBQW5CLENBQVI7QUFRRCxHQVRNLE1BU0EsSUFBSSxpQkFBaUIsY0FBakIsSUFBbUMsaUJBQWlCLFNBQXhELEVBQW1FO0FBQ3hFLFlBQVEsSUFBSSxHQUFHLEtBQUgsQ0FBUyxLQUFiLENBQW1CO0FBQ3pCLGNBQVEsSUFBSSxHQUFHLEtBQUgsQ0FBUyxNQUFiLENBQW9CO0FBQzFCLGVBQU8sZ0JBRG1CO0FBRTFCLGVBQU87QUFGbUIsT0FBcEIsQ0FEaUI7QUFLekIsWUFBTSxJQUFJLEdBQUcsS0FBSCxDQUFTLElBQWIsQ0FBa0I7QUFDdEIsZUFBTztBQURlLE9BQWxCO0FBTG1CLEtBQW5CLENBQVI7QUFTRDtBQUNELFdBQVMsUUFBVCxDQUFrQixLQUFsQjtBQUNBLFNBQU8sYUFBUDtBQUNELENBakNEOztBQW1DQSxNQUFNLFNBQU4sR0FBa0IsVUFBUyxZQUFULEVBQXVCLEtBQXZCLEVBQThCO0FBQUE7O0FBQzlDLE1BQUksYUFBYSxLQUFiLENBQW1CLEVBQW5CLEtBQTBCLGFBQTlCLEVBQTZDLElBQUksV0FBSixDQUFnQixJQUFoQjtBQUM3QyxTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBcUI7QUFDdEMsUUFBTSxjQUFlLE9BQUssVUFBTCxLQUFvQixNQUFNLFVBQU4sQ0FBaUIsTUFBdEMsSUFBaUQsT0FBSyxlQUFMLENBQXFCLFlBQXJCLEVBQW1DLEtBQW5DLENBQWpELElBQ2pCLE9BQUssVUFBTCxLQUFvQixNQUFNLFVBQU4sQ0FBaUIsS0FBdEMsSUFBZ0QsT0FBSyxjQUFMLENBQW9CLFlBQXBCLEVBQWtDLEtBQWxDLENBRGxEO0FBRUEsZ0JBQ0csSUFESCxDQUNRLFlBQU07QUFDVixhQUFLLHlCQUFMO0FBQ0E7QUFDRCxLQUpILEVBS0csSUFMSCxDQUtRO0FBQUEsYUFBTyxPQUFPLEdBQVAsQ0FBUDtBQUFBLEtBTFIsRUFNRyxNQU5ILENBTVU7QUFBQSxhQUFJLElBQUksV0FBSixDQUFnQixLQUFoQixDQUFKO0FBQUEsS0FOVjtBQU9ELEdBVk0sQ0FBUDtBQVdELENBYkQ7O0FBZUE7OztBQUdBLE1BQU0sd0NBQU4sR0FBaUQsWUFBVztBQUMxRCxNQUFNLGtCQUFrQixlQUFlLFVBQWYsTUFBK0IsQ0FBQyxLQUFLLGtCQUFMLEVBQUQsQ0FBdkQ7QUFDQSxrQkFBZ0IsT0FBaEIsQ0FBd0I7QUFBQSxXQUFZLFNBQVMsVUFBVCxHQUFzQixPQUF0QixDQUE4QixTQUE5QixDQUF3QyxJQUF4QyxFQUE4QztBQUNoRixhQUFPO0FBRHlFLEtBQTlDLENBQVo7QUFBQSxHQUF4QjtBQUdELENBTEQ7O0FBT0EsTUFBTSxjQUFOLEdBQXVCLFVBQVMsWUFBVCxFQUF1QixLQUF2QixFQUE4QjtBQUFBOztBQUNuRCxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxNQUFNLFdBQVcsS0FBSyxTQUFMLENBQWUsS0FBZixDQUFqQjtBQUNBLE1BQU0sZUFBZSxLQUFLLFFBQUwsR0FBZ0IsZ0JBQWhCLEVBQXJCO0FBQ0EsTUFBTSxrQkFBa0IsYUFBYSxjQUFiLENBQTRCLFNBQVMsRUFBckMsQ0FBeEI7QUFDQSxNQUFNLFVBQVUsS0FBSyxzQkFBTCxDQUE0QjtBQUMxQyxjQUFVLENBQUMsZUFBRDtBQURnQyxHQUE1QixDQUFoQjtBQUdBO0FBQ0EsTUFBSSxhQUFhLEtBQWIsQ0FBbUIsRUFBbkIsS0FBMEIsZUFBOUIsRUFBK0M7QUFDN0MsUUFBSSxNQUFKLENBQVcsT0FBWCxDQUFtQixFQUFFLGlDQUFGLENBQW5CLEVBQXlELGtCQUFVO0FBQ2pFLFVBQUksTUFBSixFQUFZO0FBQ1YsZUFBSyxzQkFBTCxHQUE4QixPQUE5QixDQUFzQyxVQUF0QyxDQUFpRCxPQUFLLGdCQUF0RCxFQUF3RSxlQUF4RTtBQUNBLGVBQUssU0FBTCxDQUFlLE1BQWYsQ0FBc0IsS0FBdEIsRUFBNkIsQ0FBN0I7QUFDQSxlQUFLLGlCQUFMLEdBQXlCLCtDQUF6QixDQUF5RTtBQUN2RSxtQkFBUyxPQUFLLGdCQUR5RDtBQUV2RSwyQkFBaUIsT0FBSyxjQUZpRDtBQUd2RSxtQkFBUztBQUg4RCxTQUF6RTtBQUtBLHFCQUFhLGFBQWIsQ0FBMkIsZUFBM0I7QUFDQSxlQUFLLHdDQUFMO0FBQ0EsVUFBRSxPQUFGLENBQVUsTUFBVjtBQUNELE9BWEQsTUFXTyxFQUFFLE1BQUYsQ0FBUyxNQUFUO0FBQ1IsS0FiRDtBQWNEO0FBQ0QsTUFBSSxhQUFhLEtBQWIsQ0FBbUIsRUFBbkIsS0FBMEIsZ0JBQTlCLEVBQWdEO0FBQzlDLFFBQU0sMkJBQTJCLFFBQVEsdUNBQVIsQ0FBakM7QUFDQSxRQUFNLFdBQVcsSUFBSSx3QkFBSixFQUFqQjtBQUNBLGFBQVMsS0FBVCxDQUFlLE9BQWYsRUFDRyxJQURILENBQ1EsWUFBTTtBQUNWLFVBQU0sU0FBUyxPQUFLLHVCQUFMLENBQTZCLGVBQTdCLENBQWY7QUFDQSxhQUFPLE9BQVAsQ0FBZSxrQkFBVTtBQUN2QixpQkFBUyxNQUFULENBQWdCLE9BQWhCLENBQXdCLGlCQUFTO0FBQy9CLGNBQUksTUFBTSxJQUFOLEtBQWUsT0FBTyxJQUExQixFQUFnQyxNQUFNLEtBQU4sR0FBYyxPQUFPLEtBQXJCO0FBQ2pDLFNBRkQ7QUFHRCxPQUpEO0FBS0EsUUFBRSxPQUFGLENBQVUsSUFBVjtBQUNELEtBVEgsRUFVRyxJQVZILENBVVE7QUFBQSxhQUFPLEVBQUUsTUFBRixDQUFTLEtBQVQsQ0FBUDtBQUFBLEtBVlIsRUFXRyxNQVhILENBV1UsWUFBTTtBQUNaLGVBQVMsSUFBVDtBQUNELEtBYkg7QUFjRDtBQUNELFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQTVDRDs7QUE4Q0EsTUFBTSxlQUFOLEdBQXdCLFVBQVMsWUFBVCxFQUF1QixLQUF2QixFQUE4QjtBQUFBOztBQUNwRCxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxNQUFNLFdBQVcsS0FBSyxTQUFMLENBQWUsS0FBZixDQUFqQjtBQUNBLE1BQU0sa0JBQWtCLEtBQUssbUJBQUwsQ0FBeUIsU0FBUyxFQUFsQyxDQUF4QjtBQUNBLE1BQU0sWUFBWTtBQUNoQixrQ0FBOEIsUUFBUSwyQ0FBUixDQURkO0FBRWhCLHlCQUFzQixRQUFRLGtDQUFSLENBRk47QUFHaEIsMkJBQXdCLFFBQVEsb0NBQVIsQ0FIUjtBQUloQixtQ0FBZ0MsUUFBUSw0Q0FBUjtBQUpoQixHQUFsQjtBQU1BLE1BQUksUUFBSixDQUFhLEtBQWI7QUFDQSxNQUFNLFVBQVUsS0FBSyxzQkFBTCxDQUE0QjtBQUMxQyxjQUFVLENBQUMsZUFBRDtBQURnQyxHQUE1QixDQUFoQjtBQUdBLE1BQU0sZ0JBQWdCLE9BQU8sTUFBUCxDQUFjLFNBQWQsRUFBeUIsSUFBekIsQ0FBOEIseUJBQWlCO0FBQ25FLFdBQU8sYUFBYSxXQUFiLGNBQXNDLGFBQTdDO0FBQ0QsR0FGcUIsQ0FBdEI7QUFHQSxNQUFNLFdBQVcsSUFBSSxhQUFKLEVBQWpCO0FBQ0EsTUFBTSxnQkFBZ0IsS0FBSyx3QkFBTCxDQUE4QixlQUE5QixDQUF0QjtBQUNBLE1BQU0sVUFBUyxDQUFDLG9CQUFvQixVQUFVLHFCQUE5QixJQUF1RCxvQkFBb0IsVUFBVSw2QkFBdEYsS0FBeUgsU0FBUyxpQkFBVCxDQUEyQixPQUEzQixDQUF6SCxJQUNWLFNBQVMsS0FBVCxDQUFlLE9BQWYsQ0FETDtBQUVBLFdBQVMsWUFBVCxDQUFzQjtBQUFBLFdBQU0sZ0JBQWdCLFFBQWhCLENBQXlCLE9BQUssbUJBQTlCLENBQU47QUFBQSxHQUF0QjtBQUNBLFVBQVEsSUFBUixDQUFhLG1CQUFXO0FBQ3BCLFFBQUksYUFBYSxLQUFiLE9BQXlCLGVBQTdCLEVBQThDO0FBQzVDLHNCQUFnQixRQUFoQixDQUF5QixPQUFLLG1CQUE5QjtBQUNBLGFBQUssc0JBQUwsR0FBOEIsT0FBOUIsQ0FBc0MsVUFBdEMsQ0FBaUQsT0FBSyxnQkFBdEQsRUFBd0UsZUFBeEU7QUFDQSxhQUFLLFNBQUwsQ0FBZSxNQUFmLENBQXNCLEtBQXRCLEVBQTZCLENBQTdCO0FBQ0EsYUFBSyx3Q0FBTDtBQUNEO0FBQ0QsUUFBSSxhQUFhLEtBQWIsT0FBeUIsZ0JBQTdCLEVBQStDO0FBQzdDLFVBQU0sU0FBUyxPQUFLLHVCQUFMLENBQTZCLGVBQTdCLENBQWY7QUFDQSxhQUFPLE9BQVAsQ0FBZTtBQUFBLGVBQVUsU0FBUyxNQUFULENBQWdCLE9BQWhCLENBQXdCLGlCQUFTO0FBQ3hELGNBQUksTUFBTSxJQUFOLEtBQWUsT0FBTyxJQUExQixFQUFnQyxNQUFNLEtBQU4sR0FBYyxPQUFPLEtBQXJCO0FBQTJCLFNBRHBDLENBQVY7QUFBQSxPQUFmO0FBR0Q7QUFDRCxNQUFFLE9BQUYsQ0FBVSxPQUFWO0FBQ0QsR0FkSCxFQWVHLElBZkgsQ0FlUTtBQUFBLFdBQU8sRUFBRSxNQUFGLENBQVMsR0FBVCxDQUFQO0FBQUEsR0FmUixFQWdCRyxNQWhCSCxDQWdCVSxZQUFNO0FBQ1osYUFBUyxJQUFUO0FBQ0EsUUFBSSxXQUFKLENBQWdCLEtBQWhCO0FBQ0EsYUFBUyxjQUFUO0FBQ0EsUUFBSSxRQUFKLENBQWEsSUFBYjtBQUNBLG9CQUFnQixRQUFoQixDQUF5QixhQUF6QjtBQUNELEdBdEJIO0FBdUJBLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQTlDRDs7QUFnREEsTUFBTSxRQUFOLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxLQUFLLGlCQUFMLEdBQXlCLFlBQXpCLENBQXNDLEtBQUssZ0JBQTNDLENBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sZUFBTixHQUF3QixZQUFXO0FBQ2pDLFNBQU8sS0FBSyxpQkFBTCxHQUF5QixlQUF6QixDQUF5QyxLQUFLLGdCQUE5QyxDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsT0FBSyxlQUFMLEdBQXVCLEtBQUssZUFBTCxJQUF3QixRQUFRLGtCQUFSLENBQS9DO0FBQ0EsU0FBTyxLQUFLLGVBQVo7QUFDRCxDQUhEOztBQUtBOzs7O0FBSUEsTUFBTSwrQkFBTixHQUF3QyxVQUFTLEtBQVQsRUFBZ0I7QUFBQTs7QUFDdEQsTUFBTSxVQUFVLEtBQUssaUJBQUwsR0FBeUIsY0FBekIsQ0FBd0MsS0FBSyxnQkFBN0MsRUFBK0QsVUFBL0QsRUFBaEI7QUFDQTs7QUFGc0QsK0JBR3BCLEtBQUssaUJBQUwsR0FBeUIsOEJBQXpCLENBQXdEO0FBQ3hGLGFBQVMsS0FBSyxnQkFEMEU7QUFFeEYsY0FBVSxLQUFLO0FBRnlFLEdBQXhELENBSG9CO0FBQUEsTUFHL0MsUUFIK0MsMEJBRy9DLFFBSCtDO0FBQUEsTUFHckMsYUFIcUMsMEJBR3JDLGFBSHFDO0FBT3REOzs7QUFDQSxNQUFJLEtBQUssc0JBQUwsSUFBK0IsTUFBTSxJQUFOLEtBQWUsYUFBbEQsRUFBaUU7QUFDL0Q7QUFDQSxTQUFLLHVDQUFMLEdBQStDLE1BQU0sS0FBckQ7QUFDQTtBQUNBLFNBQUssU0FBTCxDQUFlLE9BQWYsQ0FBdUIsb0JBQVk7QUFDakMsVUFBTSxTQUFTLFNBQVMsTUFBeEI7QUFDQTtBQUNBLFVBQU0sUUFBUSxPQUFPLElBQVAsQ0FBWTtBQUFBLGVBQVMsTUFBTSxJQUFOLEtBQWUsUUFBeEI7QUFBQSxPQUFaLENBQWQ7QUFDQSxVQUFJLEtBQUosRUFBVyxNQUFNLEtBQU4sR0FBYyxPQUFLLHVDQUFuQjtBQUNYLGlCQUFXLE9BQUssbUJBQUwsQ0FBeUIsU0FBUyxFQUFsQyxDQUFYO0FBQ0EsVUFBTSxtQkFBbUIsU0FBUyxLQUFULEVBQXpCO0FBQ0EsZUFBUyxHQUFULENBQWEsUUFBYixFQUF1QixNQUFNLEtBQTdCO0FBQ0EsVUFBSSxDQUFDLFNBQVMsS0FBVCxFQUFMLEVBQXVCLFFBQVEsVUFBUixDQUFtQixPQUFLLGdCQUF4QixFQUEwQyxRQUExQyxFQUFvRCxnQkFBcEQ7QUFDeEIsS0FURDtBQVVEO0FBQ0YsQ0F2QkQ7O0FBeUJBLE1BQU0sdUJBQU4sR0FBZ0MsVUFBUyxRQUFULEVBQW1CO0FBQ2pELE1BQU0sUUFBUSxLQUFLLFFBQUwsRUFBZDtBQUNBLFNBQU8sTUFBTSxtQkFBTixDQUEwQixRQUExQixFQUFvQztBQUN6QyxjQUFVO0FBRCtCLEdBQXBDLENBQVA7QUFHRCxDQUxEOztBQU9BLE1BQU0sa0JBQU4sR0FBMkIsVUFBUyxRQUFULEVBQW1CO0FBQzVDLFNBQU87QUFDTCxZQUFRLEtBQUssdUJBQUwsQ0FBNkIsUUFBN0IsQ0FESDtBQUVMLFFBQUksU0FBUyxLQUFUO0FBRkMsR0FBUDtBQUlELENBTEQ7O0FBT0EsTUFBTSx5QkFBTixHQUFrQyxVQUFTLElBQVQsRUFBMkI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDM0Q7QUFDQSxVQUFRLEtBQUssZUFBTCxDQUFxQixpQkFBckIsR0FBeUMsV0FBekMsR0FBdUQsS0FBdkQsQ0FBNkQsSUFBN0QsRUFBbUUsT0FBbkUsQ0FBUjtBQUNELENBSEQ7O0FBS0EsTUFBTSw4QkFBTixHQUF1QyxVQUFTLElBQVQsRUFBZTtBQUNwRCxNQUFNLGNBQWMsS0FBSyxlQUFMLENBQXFCLEtBQUssY0FBMUIsQ0FBcEI7QUFDQSxNQUFNLG1CQUFtQixZQUFZLFFBQVosRUFBekI7QUFDQSxNQUFJLDhCQUFKO0FBQ0EsVUFBUSxJQUFSO0FBQ0UsU0FBSyxPQUFMO0FBQ0UsOEJBQXdCLGlCQUFpQixRQUFqQixNQUErQixpQkFBaUIsUUFBakIsR0FBNEIsT0FBNUIsRUFBdkQ7QUFDQTtBQUNGLFNBQUssTUFBTDtBQUNFLDhCQUF3QixpQkFBaUIsU0FBakIsTUFBZ0MsaUJBQWlCLE9BQWpCLEVBQXhEO0FBQ0E7QUFDRixTQUFLLFNBQUw7QUFDRSw4QkFBd0IsaUJBQWlCLE9BQWpCLE1BQThCLGlCQUFpQixTQUFqQixFQUF0RDtBQUNBO0FBVEo7QUFXQSxTQUFPLHlCQUF5QixzQkFBc0IsUUFBdEIsRUFBekIsSUFBNkQsU0FBcEU7QUFDRCxDQWhCRDs7QUFrQkE7Ozs7QUFJQSxNQUFNLHlCQUFOLEdBQWtDLGdCQUEyQjtBQUFBLE1BQWpCLEtBQWlCLFFBQWpCLEtBQWlCO0FBQUEsTUFBVixRQUFVLFFBQVYsUUFBVTs7QUFDM0QsTUFBSSxpQkFBSjtBQUNBLE1BQUksV0FBVyxLQUFmO0FBQ0EsTUFBSSxZQUFZLE1BQU0sVUFBTixFQUFoQixFQUFxQztBQUNuQyxlQUFXLElBQVg7QUFDQSxlQUFXLEtBQUssc0JBQUwsQ0FBNEI7QUFDckMsaUJBQVcsS0FEMEI7QUFFckMsd0JBRnFDO0FBR3JDO0FBSHFDLEtBQTVCLENBQVg7QUFLRDtBQUNELE9BQUssc0JBQUwsQ0FBNEI7QUFDMUIsc0JBRDBCO0FBRTFCO0FBRjBCLEdBQTVCO0FBSUQsQ0FmRDs7QUFpQkE7OztBQUdBLE1BQU0sV0FBTixHQUFvQixZQUFXO0FBQzdCLE1BQU0sV0FBVyxLQUFLLFVBQUwsS0FBb0IsTUFBTSxVQUFOLENBQWlCLE1BQXREO0FBQ0EsTUFBTSxXQUFXLEtBQUssc0JBQUwsRUFBakI7QUFDQSxPQUFLLHNCQUFMLENBQTRCO0FBQzFCLHNCQUQwQjtBQUUxQjtBQUYwQixHQUE1QjtBQUlELENBUEQ7O0FBU0E7OztBQUdBLE1BQU0sc0JBQU4sR0FBK0IsWUFBdUM7QUFBQTs7QUFBQSxrRkFBSCxFQUFHO0FBQUEsTUFBN0IsUUFBNkIsU0FBN0IsUUFBNkI7QUFBQSw2QkFBbkIsUUFBbUI7QUFBQSxNQUFuQixRQUFtQixrQ0FBVixLQUFVOztBQUNwRSxNQUFJLFFBQUosRUFBYztBQUNaLFFBQUksUUFBSixDQUFhLEtBQWI7QUFDQSxRQUFJLFdBQUosQ0FBZ0IsSUFBaEI7QUFDRDtBQUNELE1BQU0sVUFBVSxLQUFLLHNCQUFMLEVBQWhCO0FBQ0EsTUFBTSxVQUFVLFFBQVEsT0FBUixDQUFnQixPQUFoQzs7QUFOb0UsK0JBT2xDLEtBQUssaUJBQUwsR0FBeUIsOEJBQXpCLENBQXdEO0FBQ3hGLGFBQVMsS0FBSyxnQkFEMEU7QUFFeEYsY0FBVSxLQUFLO0FBRnlFLEdBQXhELENBUGtDO0FBQUEsTUFPN0QsUUFQNkQsMEJBTzdELFFBUDZEO0FBQUEsTUFPbkQsYUFQbUQsMEJBT25ELGFBUG1EOztBQUFBLE1BWTVELGFBWjRELEdBWTFDLE9BWjBDLENBWTVELGFBWjREOztBQWFwRSxNQUFNLFVBQVcsU0FBUyxLQUFULENBQWUsT0FBZixDQUFqQjtBQUNBLGNBQVksU0FBUyxZQUFULEVBQVo7QUFDQSxVQUNHLElBREgsQ0FDUSxtQkFBVztBQUFBLGdDQUN5QixRQUFRLGdCQURqQztBQUFBLFFBQ1IsV0FEUSx5QkFDUixXQURRO0FBQUEsUUFDSyxnQkFETCx5QkFDSyxnQkFETDs7QUFFZixRQUFNLHdCQUF3QixTQUF4QixxQkFBd0IsUUFBUTtBQUNwQyxrQkFBWSxPQUFaLENBQW9CLFVBQUMsVUFBRCxFQUFhLEtBQWIsRUFBc0I7QUFDeEMsWUFBTSxrQkFBa0IsaUJBQWlCLEtBQWpCLENBQXhCO0FBQ0EsbUJBQVcsR0FBWCxDQUFlLFFBQWYsRUFBeUIsS0FBekI7QUFDQSxZQUFJLGNBQWMsS0FBZCxFQUFKLEVBQTJCLGdCQUFnQixHQUFoQixDQUFvQixRQUFwQixFQUE4QixLQUE5QjtBQUMzQixlQUFLLFFBQUwsR0FBZ0IsZ0JBQWhCLEdBQW1DLGFBQW5DLENBQWlELFVBQWpEO0FBQ0EsZ0JBQVEsVUFBUixDQUFtQixPQUFLLGdCQUF4QixFQUEwQyxVQUExQyxFQUFzRCxlQUF0RDtBQUNELE9BTkQ7QUFPRCxLQVJEO0FBU0EsMEJBQXNCLE9BQUssdUNBQTNCO0FBQ0EsUUFBSSxjQUFjLEtBQWQsTUFBeUIsT0FBSyxzQkFBbEMsRUFBMEQ7QUFDeEQsVUFBTSwyQkFBMkIsY0FBYyxFQUFkLENBQWlCLGdCQUFqQixFQUFtQyxlQUFPO0FBQ3pFLFlBQUksY0FBYyxLQUFkLEVBQUosRUFBMkI7QUFDekIsY0FBSSxJQUFJLEdBQUosS0FBWSxhQUFoQixFQUErQjtBQUM3QixnQkFBTSxRQUFRLElBQUksTUFBSixDQUFXLEdBQVgsQ0FBZSxhQUFmLENBQWQ7QUFDQSxrQ0FBc0IsS0FBdEIsRUFBNkIsSUFBN0I7QUFDRDtBQUNGLFNBTEQsTUFLTyxHQUFHLFVBQUgsQ0FBYyxPQUFkLENBQXNCLHdCQUF0QjtBQUNSLE9BUGdDLENBQWpDO0FBUUQ7QUFDRCxnQkFBWSxPQUFaLENBQW9CLHNCQUFhO0FBQy9CLFVBQU0sY0FBYyxPQUFLLGtCQUFMLENBQXdCLFVBQXhCLENBQXBCO0FBQ0EsYUFBSyxTQUFMLENBQWUsSUFBZixDQUFvQixXQUFwQjtBQUNELEtBSEQ7QUFJQSxXQUFLLHlCQUFMO0FBQ0QsR0E1QkgsRUE2QkcsSUE3QkgsQ0E2QlEsVUFBQyxNQUFELEVBQVk7QUFDaEIsUUFBSSxVQUFVLE9BQU8sZ0JBQXJCLEVBQXVDO0FBQ3JDOzs7QUFEcUMsa0NBSU8sTUFKUCxDQUk5QixnQkFKOEIsQ0FJWixXQUpZO0FBQUEsVUFJWixXQUpZLHlDQUlBLEVBSkE7O0FBS3JDLGtCQUFZLE9BQVosQ0FBb0Isc0JBQWE7QUFDL0IsWUFBTSxjQUFjLE9BQUssa0JBQUwsQ0FBd0IsVUFBeEIsQ0FBcEI7QUFDQSxlQUFLLFNBQUwsQ0FBZSxJQUFmLENBQW9CLFdBQXBCO0FBQ0QsT0FIRDtBQUlEO0FBQ0QsWUFBUSxtQkFBUixDQUE0QixDQUFDLE9BQUssZ0JBQU4sQ0FBNUI7QUFDRCxHQXpDSCxFQTBDRyxNQTFDSCxDQTBDVSxZQUFJO0FBQ1YsYUFBUyxJQUFUO0FBQ0EsUUFBSSxRQUFKLEVBQWM7QUFDWixlQUFTLGNBQVQ7QUFDQSxVQUFJLFdBQUosQ0FBZ0IsS0FBaEI7QUFDQSxVQUFJLFFBQUosQ0FBYSxJQUFiO0FBQ0Q7QUFDRixHQWpESDtBQWtERCxDQWpFRDs7QUFtRUE7OztBQUdBLE1BQU0sWUFBTixHQUFxQixZQUFXO0FBQUE7O0FBQzlCLE1BQU0sV0FBVyxLQUFLLFVBQUwsS0FBb0IsTUFBTSxVQUFOLENBQWlCLE1BQXREO0FBQ0EsTUFBSSxRQUFKLEVBQWM7QUFDWixRQUFJLFFBQUosQ0FBYSxLQUFiO0FBQ0EsUUFBSSxXQUFKLENBQWdCLElBQWhCO0FBQ0Q7QUFDRCxNQUFNLFdBQVcsS0FBSyx1QkFBTCxFQUFqQjtBQUNBLE1BQU0sVUFBVSxLQUFLLHNCQUFMLEVBQWhCO0FBQ0EsTUFBTSxVQUFVLFFBQVEsT0FBUixDQUFnQixPQUFoQzs7QUFSOEIsK0JBU1gsS0FBSyxpQkFBTCxHQUF5Qiw4QkFBekIsQ0FBd0Q7QUFDekUsYUFBUyxLQUFLLGdCQUQyRDtBQUV6RSxjQUFVLEtBQUs7QUFGMEQsR0FBeEQsQ0FUVztBQUFBLE1BU3ZCLFFBVHVCLDBCQVN2QixRQVR1QjtBQWE5Qjs7O0FBQ0EsVUFBUSxPQUFSLENBQWdCLE9BQWhCLEdBQTBCO0FBQ3hCLFdBQU8sS0FBSyx1Q0FEWTtBQUV4QixXQUFPO0FBRmlCLEdBQTFCO0FBSUEsTUFBSSxRQUFKLEVBQWMsUUFBUSxPQUFSLENBQWdCLEtBQWhCLEdBQXdCLEtBQUssZ0JBQUwsRUFBeEI7QUFDZCxNQUFNLFVBQVUsS0FBSyxzQkFBTCxHQUE4QixPQUE5QztBQUNBLE1BQU0sb0JBQW9CO0FBQ3hCLGVBQVcsQ0FBQyxLQUFLLFFBQU4sQ0FEYTtBQUV4QixvQkFGd0I7QUFHeEIsY0FBVSxLQUhjO0FBSXhCLGdCQUFZLFdBQVcsTUFBWCxHQUFvQjtBQUpSLEdBQTFCO0FBTUEsTUFBTSxzQkFBc0IsU0FBdEIsbUJBQXNCO0FBQUEsV0FBTSxPQUFLLGlCQUFMLEdBQXlCLDJCQUF6QixDQUFxRCxPQUFLLGNBQTFELEVBQTBFLGlCQUExRSxDQUFOO0FBQUEsR0FBNUI7QUFDQSxNQUFJLHlCQUFKO0FBQ0EsTUFBSSxRQUFKLEVBQWM7QUFDWixRQUFNLGFBQWEsS0FBSyxpQkFBTCxHQUF5QixhQUF6QixFQUFuQjtBQUNBLFlBQVEsT0FBUixDQUFnQixTQUFoQiwyREFBNEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMxQix5QkFBVyxjQUFYO0FBRDBCO0FBQUEscUJBRXBCLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFZO0FBQzVCLDJCQUFXLFlBQUk7QUFDYjtBQUNELGlCQUZEO0FBR0QsZUFKSyxDQUZvQjs7QUFBQTtBQUFBO0FBQUEscUJBT3BCLHFCQVBvQjs7QUFBQTtBQVExQix5QkFBVyxjQUFYO0FBQ0Esa0JBQUksZUFBSixDQUFvQjtBQUNsQixzQkFBTSxNQURZO0FBRWxCLHNCQUFNLE9BRlk7QUFHbEIseUJBQVMsRUFBRSw0QkFBRixDQUhTO0FBSWxCLDBCQUFVO0FBSlEsZUFBcEI7O0FBVDBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQTVCO0FBZ0JBLHVCQUFtQixJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBWTtBQUN6QyxlQUFTLFlBQVQ7QUFDQSxVQUFNLFVBQVUsU0FBUyxLQUFULENBQWUsT0FBZixDQUFoQjtBQUNBLGNBQVE7QUFDTix3QkFETTtBQUVOLHFCQUFhO0FBRlAsT0FBUjtBQUlELEtBUGtCLENBQW5CO0FBUUQsR0ExQkQsTUEwQk8sbUJBQW1CLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFhO0FBQ2pELDBCQUNHLElBREgsQ0FDUSxZQUFJO0FBQ1IsY0FBUSxFQUFSO0FBQ0QsS0FISDtBQUlELEdBTHlCLENBQW5COztBQU9QLG1CQUFpQixJQUFqQixDQUFzQixZQUFvQztBQUFBLG9GQUFOLEVBQU07QUFBQSxRQUFsQyxPQUFrQyxTQUFsQyxPQUFrQztBQUFBLGtDQUF6QixXQUF5QjtBQUFBLFFBQXpCLFdBQXlCLHFDQUFiLEtBQWE7O0FBQ3hELFFBQUksU0FBUyxLQUFiO0FBQ0EsY0FBVSxXQUFXLFNBQVMsS0FBVCxDQUFlLE9BQWYsQ0FBckI7QUFDQSxZQUFRLElBQVIsQ0FBYSxtQkFBVztBQUN0QixVQUFJLFFBQVEsUUFBUixDQUFpQixNQUFyQixFQUE2QjtBQUMzQixnQkFBUSxRQUFSLENBQWlCLE9BQWpCLENBQXlCLG9CQUFZO0FBQ25DLGNBQU0sd0JBQXdCLE9BQUssU0FBTCxDQUFlLElBQWYsQ0FBb0I7QUFBQSxtQkFBTyxJQUFJLEVBQUosS0FBVyxTQUFTLEtBQVQsRUFBbEI7QUFBQSxXQUFwQixDQUE5QjtBQUNBLGNBQUksQ0FBQyxxQkFBTCxFQUE0QjtBQUMxQixxQkFBUyxVQUFVLElBQW5CO0FBQ0EsZ0JBQU0sbUJBQW1CLFNBQVMsS0FBVCxFQUF6QjtBQUNBLHFCQUFTLEdBQVQsQ0FBYSxRQUFiLEVBQXVCLE9BQUssdUNBQTVCO0FBQ0EsbUJBQUssc0JBQUwsR0FBOEIsT0FBOUIsQ0FBc0MsVUFBdEMsQ0FBaUQsT0FBSyxnQkFBdEQsRUFBeUUsUUFBekUsRUFBbUYsZ0JBQW5GO0FBQ0EsbUJBQUssU0FBTCxDQUFlLElBQWYsQ0FBb0IsT0FBSyxrQkFBTCxDQUF3QixRQUF4QixDQUFwQjtBQUNBLG1CQUFLLHlCQUFMO0FBQ0QsV0FQRCxNQU9PLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBbUIsRUFBRSxnQ0FBRixDQUFuQjtBQUNSLFNBVkQ7QUFXRDtBQUNGLEtBZEQsRUFjRyxJQWRILENBY1EsZUFBTztBQUNiLGNBQVEsbUJBQVIsQ0FBNEIsQ0FBQyxPQUFLLGdCQUFOLENBQTVCO0FBQ0QsS0FoQkQsRUFnQkcsTUFoQkgsQ0FnQlUsWUFBSztBQUNiLFVBQUksV0FBSixFQUFpQjtBQUNmLFlBQUksZ0JBQUo7QUFDQSxZQUFJLFdBQUosQ0FBZ0IsS0FBaEI7QUFDQSxpQkFBUyxjQUFUO0FBQ0Q7QUFDRCxnQkFBVSxPQUFLLHdDQUFMLEVBQVY7QUFDQSxlQUFTLElBQVQ7QUFDRCxLQXhCRDtBQXlCRCxHQTVCRDtBQTZCRCxDQTFGRDs7QUE0RkE7Ozs7O0FBS0EsTUFBTSw2QkFBTixHQUFzQyxZQUFXO0FBQy9DO0FBRCtDLCtCQUU1QixLQUFLLGlCQUFMLEdBQXlCLDhCQUF6QixDQUF3RDtBQUN6RSxhQUFTLEtBQUssZ0JBRDJEO0FBRXpFLGNBQVUsS0FBSztBQUYwRCxHQUF4RCxDQUY0QjtBQUFBLE1BRXhDLFFBRndDLDBCQUV4QyxRQUZ3Qzs7QUFNL0MsU0FBTyxLQUFLLGlCQUFMLEdBQXlCLGVBQXpCLENBQXlDLEtBQUssZ0JBQTlDLEVBQWdFLFFBQWhFLENBQVA7QUFDRCxDQVBEOztBQVNBLE1BQU0sVUFBTixHQUFtQixZQUFXO0FBQzVCLFNBQU8sS0FBSyx3QkFBWjtBQUNELENBRkQ7O0FBSUEsTUFBTSxtQkFBTixHQUE0QixVQUFTLFNBQVQsRUFBb0I7QUFDOUMsTUFBTSxRQUFRLEtBQUssUUFBTCxFQUFkO0FBQ0EsU0FBTyxNQUFNLGdCQUFOLEdBQXlCLGNBQXpCLENBQXdDLFNBQXhDLENBQVA7QUFDRCxDQUhEOztBQUtBLE1BQU0sY0FBTixHQUF1QixVQUFTLEtBQVQsRUFBNkI7QUFBQTs7QUFBQSxNQUFiLE1BQWEsdUVBQU4sSUFBTTs7QUFDbEQsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWOztBQURrRCwrQkFFL0IsS0FBSyxpQkFBTCxHQUF5Qiw4QkFBekIsQ0FBd0Q7QUFDekUsYUFBUyxLQUFLLGdCQUQyRDtBQUV6RSxjQUFVLEtBQUs7QUFGMEQsR0FBeEQsQ0FGK0I7QUFBQSxNQUUzQyxRQUYyQywwQkFFM0MsUUFGMkM7O0FBTWxELE1BQU0sU0FBUyxTQUFULE1BQVMsR0FBSztBQUNsQixRQUFNLFdBQVcsT0FBSyxTQUFMLENBQWUsS0FBZixDQUFqQjtBQUNBLFFBQU0sVUFBVSxPQUFLLFFBQUwsR0FBZ0IsZ0JBQWhCLEdBQW1DLGNBQW5DLENBQWtELFNBQVMsRUFBM0QsQ0FBaEI7QUFDQSxRQUFNLG1CQUFtQixRQUFRLEtBQVIsRUFBekI7QUFDQSxZQUFRLEdBQVIsQ0FBWSxRQUFaLEVBQXNCLElBQXRCO0FBQ0EsV0FBSyxzQkFBTCxHQUE4QixPQUE5QixDQUFzQyxVQUF0QyxDQUFpRCxPQUFLLGdCQUF0RCxFQUF3RSxPQUF4RSxFQUFpRixnQkFBakY7QUFDQSxXQUFLLFNBQUwsQ0FBZSxNQUFmLENBQXNCLEtBQXRCLEVBQTZCLENBQTdCO0FBQ0EsV0FBSyx3Q0FBTDtBQUNBLE1BQUUsT0FBRixDQUFVLElBQVY7QUFDRCxHQVREO0FBVUEsTUFBSSxNQUFKLEVBQVk7QUFDVixRQUFJLE1BQUosQ0FBVyxPQUFYLENBQW1CLEVBQUUsa0NBQUYsQ0FBbkIsRUFBMEQsa0JBQVU7QUFDbEUsVUFBSSxNQUFKLEVBQVksU0FBWixLQUNLLEVBQUUsTUFBRixDQUFTLEtBQVQ7QUFDTixLQUhEO0FBSUQsR0FMRCxNQUtPOztBQUVQLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXhCRDs7QUEwQkEsTUFBTSxrQkFBTixHQUEyQixZQUFXO0FBQ3BDLFNBQU8sS0FBSyxpQkFBTCxHQUF5QixrQkFBekIsRUFBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSxzQkFBTixHQUErQixZQUFXO0FBQ3hDLFNBQU8sS0FBSyxpQkFBTCxHQUF5QixzQkFBekIsRUFBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSxzQkFBTixHQUErQixZQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUFBLCtCQUMvQixLQUFLLGlCQUFMLEdBQXlCLDhCQUF6QixDQUF3RDtBQUN6RSxhQUFTLEtBQUssZ0JBRDJEO0FBRXpFLGNBQVUsS0FBSztBQUYwRCxHQUF4RCxDQUQrQjtBQUFBLE1BQzNDLFFBRDJDLDBCQUMzQyxRQUQyQzs7QUFLbEQsTUFBTSxtQkFBbUI7QUFDdkIsbUJBQWUsS0FBSyxzQkFBTCxHQUE4QixPQUR0QjtBQUV2QixhQUFTO0FBQ1AsZUFBUyxLQUFLLHNCQUFMLEdBQThCLE9BRGhDO0FBRVAscUJBQWUsQ0FBQyxRQUFELENBRlI7QUFHUCxtQkFBYSxLQUFLLHVDQUhYLEVBR29EO0FBQzNELG1CQUFhLFFBSk4sQ0FJZTtBQUpmLEtBRmM7QUFRdkIsWUFBUTtBQUNOLGdCQUFVLFFBQVEsUUFBUixJQUFvQixFQUR4QjtBQUVOLGFBQU8sS0FBSyxRQUFMO0FBRkQ7QUFSZSxHQUF6QjtBQWFBLFNBQU8sZ0JBQVA7QUFDRCxDQW5CRDs7QUFxQkEsTUFBTSxnQkFBTixHQUF5QixZQUFXO0FBQ2xDLE1BQUksY0FBSjtBQUNBLE1BQU0sZUFBZSxLQUFLLFFBQUwsR0FBZ0IsZUFBaEIsRUFBckI7QUFDQSxVQUFRLFlBQVI7QUFDRSxTQUFLLFdBQVcsWUFBaEI7QUFDRSxjQUFRLElBQUksR0FBRyxLQUFILENBQVMsS0FBYixDQUFtQjtBQUN6QixlQUFPLElBQUksR0FBRyxLQUFILENBQVMsTUFBYixDQUFvQjtBQUN6QixrQkFBUSxDQURpQjtBQUV6QixnQkFBTSxJQUFJLEdBQUcsS0FBSCxDQUFTLElBQWIsQ0FBa0I7QUFDdEIsbUJBQU8sS0FBSyw4QkFBTCxDQUFvQyxPQUFwQztBQURlLFdBQWxCLENBRm1CO0FBS3pCLGtCQUFRLElBQUksR0FBRyxLQUFILENBQVMsTUFBYixDQUFvQjtBQUMxQixtQkFBTyxDQURtQjtBQUUxQixtQkFBUTtBQUZrQixXQUFwQjtBQUxpQixTQUFwQjtBQURrQixPQUFuQixDQUFSO0FBWUE7QUFDRixTQUFLLFVBQVUsV0FBZjtBQUNFLGNBQVEsSUFBSSxHQUFHLEtBQUgsQ0FBUyxLQUFiLENBQW1CO0FBQ3pCLGNBQU0sSUFBSSxHQUFHLEtBQUgsQ0FBUyxJQUFiLENBQWtCO0FBQ3RCLGlCQUFPLEtBQUssOEJBQUwsQ0FBb0MsTUFBcEM7QUFEZSxTQUFsQixDQURtQjtBQUl6QixnQkFBUSxJQUFJLEdBQUcsS0FBSCxDQUFTLE1BQWIsQ0FBb0I7QUFDMUIsaUJBQU8sQ0FEbUI7QUFFMUIsaUJBQU87QUFGbUIsU0FBcEI7QUFKaUIsT0FBbkIsQ0FBUjtBQVNBO0FBQ0YsU0FBSyxhQUFhLGNBQWxCO0FBQ0UsY0FBUyxJQUFJLEdBQUcsS0FBSCxDQUFTLEtBQWIsQ0FBbUI7QUFDMUIsZ0JBQVEsSUFBSSxHQUFHLEtBQUgsQ0FBUyxNQUFiLENBQW9CO0FBQzFCLGlCQUFPLFFBRG1CO0FBRTFCLGlCQUFPO0FBRm1CLFNBQXBCLENBRGtCO0FBSzFCLGNBQU0sSUFBSSxHQUFHLEtBQUgsQ0FBUyxJQUFiLENBQWtCO0FBQ3RCLGlCQUFPLEtBQUssOEJBQUwsQ0FBb0MsU0FBcEMsQ0FEZTtBQUV0QixtQkFBUztBQUZhLFNBQWxCO0FBTG9CLE9BQW5CLENBQVQ7QUEzQko7QUFzQ0EsU0FBTyxLQUFQO0FBQ0QsQ0ExQ0Q7O0FBNENBLE1BQU0sY0FBTixHQUF1QixVQUFTLFFBQVQsRUFBbUI7QUFDeEMsTUFBTSxhQUFhLEVBQW5CO0FBQ0EsV0FBUyxNQUFULENBQWdCLE9BQWhCLENBQXdCLGlCQUFTO0FBQy9CLFFBQU0sUUFBUSxNQUFNLEtBQXBCO0FBQ0EsZUFBVyxJQUFYLENBQWdCLEVBQUMsT0FBTyxNQUFNLEtBQWQsRUFBcUIsWUFBckIsRUFBaEI7QUFDRCxHQUhEO0FBSUEsU0FBTyxVQUFQO0FBQ0QsQ0FQRDs7QUFTQSxPQUFPLE9BQVAsR0FBaUIsZUFBakI7Ozs7O3lCQzVxQndCLE9BQU8sSUFBUCxDQUFZLEs7SUFBN0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ04sUyxHQUFhLE9BQU8sSSxDQUFwQixTO0lBQ0EsRyxHQUFPLE9BQU8sRyxDQUFkLEc7O0FBQ1AsSUFBTSxJQUFJLE9BQU8sSUFBUCxDQUFZLElBQVosQ0FBaUIsT0FBM0I7O0FBRUEsSUFBTSxlQUFlLFNBQWYsWUFBZSxHQUF1QjtBQUFBLE1BQWQsT0FBYyx1RUFBSixFQUFJOztBQUMxQyxPQUFLLFNBQUwsR0FBaUIsUUFBUSxRQUFSLElBQW9CLEVBQXJDLENBRDBDLENBQ0Q7QUFDekMsT0FBSyxRQUFMLEdBQWdCLFFBQVEsT0FBeEI7QUFDQSxPQUFLLFFBQUwsR0FBZ0IsUUFBUSxPQUF4QjtBQUNBLE9BQUssT0FBTCxHQUFlLFFBQVEsTUFBdkI7QUFDQSxPQUFLLFlBQUwsR0FBb0IsUUFBUSxXQUE1QjtBQUNBLE9BQUssV0FBTCxHQUFtQixRQUFRLFVBQTNCO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsT0FBSyxzQkFBTCxHQUE4QixFQUE5QjtBQUNBLE9BQUssV0FBTCxHQUFtQixRQUFRLFVBQVIsSUFBc0IsS0FBekM7QUFUMEMsTUFVbEMsWUFWa0MsR0FVbUMsT0FWbkMsQ0FVbEMsWUFWa0M7QUFBQSx5QkFVbUMsT0FWbkMsQ0FVcEIsT0FWb0I7QUFBQSxNQVVwQixPQVZvQixvQ0FVWixFQVZZO0FBQUEsdUJBVW1DLE9BVm5DLENBVVIsS0FWUTtBQUFBLE1BVVIsS0FWUSxrQ0FVRixlQVZFO0FBQUEsTUFVb0IsVUFWcEIsR0FVbUMsT0FWbkMsQ0FVZSxJQVZmOztBQVcxQyxPQUFLLEtBQUwsR0FBYTtBQUNYLG9CQURXO0FBRVgsY0FBVSxFQUZDO0FBR1gsZ0JBSFc7QUFJWCwwQkFKVztBQUtYO0FBTFcsR0FBYjs7QUFRQSxPQUFLLElBQUwsR0FBWSxZQUFXO0FBQUE7O0FBQ3JCO0FBQ0EsU0FBSyxTQUFMLEdBQWlCLENBQUMsS0FBSyxXQUFOLEdBQW9CLEtBQUssU0FBekIsR0FBcUMsS0FBSyxTQUFMLENBQWUsTUFBZixDQUFzQjtBQUFBLGFBQzFFLFFBQVEsR0FBUixDQUFZLE1BQUssV0FBakIsTUFBa0MsTUFBSyxZQURtQztBQUFBLEtBQXRCLENBQXREO0FBR0E7QUFDQSxRQUFJLEtBQUssU0FBTCxDQUFlLE1BQW5CLEVBQTJCO0FBQ3pCLFVBQU0sY0FBYyxLQUFLLFNBQUwsQ0FBZSxDQUFmLENBQXBCO0FBQ0EsVUFBTSxhQUFhLE9BQU8sSUFBUCxDQUFZLFlBQVksYUFBWixFQUFaLENBQW5CO0FBQ0EsV0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLE1BQW5CLENBQTBCO0FBQUEsZUFBVSxXQUFXLE9BQVgsQ0FBbUIsT0FBTyxJQUExQixNQUFvQyxDQUFDLENBQS9DO0FBQUEsT0FBMUIsQ0FBckI7QUFDQSxVQUFNLFdBQVUsS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixHQUFuQixDQUF1QjtBQUFBLGVBQVUsT0FBTyxJQUFqQjtBQUFBLE9BQXZCLENBQWhCO0FBQ0EsV0FBSyxLQUFMLENBQVcsUUFBWCxHQUFzQixLQUFLLFNBQUwsQ0FBZSxHQUFmLENBQW1CLG1CQUFXO0FBQ2xELFlBQU0sYUFBYSxRQUFRLGFBQVIsRUFBbkI7QUFDQSxZQUFNLG9CQUFvQixFQUExQjtBQUNBLGlCQUFRLE9BQVIsQ0FBZ0Isa0JBQVU7QUFDeEIsNEJBQWtCLE1BQWxCLElBQTRCLFdBQVcsTUFBWCxDQUE1QjtBQUNELFNBRkQ7QUFHQSwwQkFBa0IsbUJBQWxCLEdBQXdDLFFBQVEsTUFBUixFQUF4QztBQUNBLGVBQU8saUJBQVA7QUFDRCxPQVJxQixDQUF0QjtBQVNEO0FBQ0YsR0FyQkQ7QUFzQkEsT0FBSyxJQUFMO0FBQ0EsT0FBSyxJQUFMO0FBQ0QsQ0EzQ0Q7O0FBNkNBLFFBQVEsWUFBUixFQUFzQixTQUF0Qjs7QUFFQSxJQUFNLFFBQVEsYUFBYSxTQUEzQjs7QUFFQSxNQUFNLFlBQU4sR0FBcUIsVUFBUyxJQUFULEVBQWU7QUFDbEMsTUFBSSxVQUFVLEtBQWQ7QUFDQSxPQUFLLElBQUksSUFBRSxDQUFYLEVBQWMsSUFBSSxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLE1BQXJDLEVBQTZDLEdBQTdDLEVBQWtEO0FBQ2hELFFBQU0sU0FBUyxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLENBQW5CLENBQWY7QUFDQSxRQUFJLE9BQU8sSUFBUCxLQUFnQixJQUFoQixJQUF3QixPQUFPLEtBQVAsQ0FBYSxJQUFiLEtBQXNCLE9BQWxELEVBQTREO0FBQzFELGdCQUFVLElBQVY7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxTQUFPLE9BQVA7QUFDRCxDQVZEOztBQVlBLE1BQU0sSUFBTixHQUFhLFlBQVc7QUFDdEIsT0FBSyxRQUFMLENBQWMsT0FBZDtBQUNELENBRkQ7O0FBSUEsTUFBTSxNQUFOLEdBQWUsWUFBVztBQUN4QixPQUFLLFFBQUwsQ0FBYyxNQUFkO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGFBQU4sR0FBc0IsVUFBUyxHQUFULEVBQWM7QUFBQTs7QUFDbEMsTUFBTSxpQkFBaUIsUUFBUSxrQkFBUixDQUF2QjtBQUNBLE1BQU0sUUFBUSxLQUFLLE9BQUwsQ0FBYSxLQUEzQjtBQUNBLE1BQU0sVUFBVSxNQUFNLEtBQU4sRUFBaEI7QUFDQSxNQUFNLGlCQUFpQixNQUFNLFdBQU4sRUFBdkI7QUFDQSxNQUFNLG9CQUFvQixlQUFlLE1BQWYsSUFBMEIsZUFBZSx5QkFBZixDQUF5QztBQUMzRixvQkFEMkY7QUFFM0YsZUFBVyxNQUFNLFlBQU4sR0FBcUIsUUFBckI7QUFGZ0YsR0FBekMsRUFHakQsTUFIaUQsR0FHeEMsQ0FIWjtBQUlBLFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjtBQUNyQyxRQUFJLE1BQUosQ0FBVyxPQUFYLFVBQTBCLEVBQUUsaUNBQUYsQ0FBMUIsc0VBQ3FELG9CQUFtQixFQUFFLDJDQUFGLENBQW5CLEdBQW9FLEVBRHpILGNBQ3FJLFVBQUMsTUFBRCxFQUFZO0FBQy9JLFVBQUksTUFBSixFQUFZO0FBQ1YsWUFBSSxjQUFKO0FBQ0EsWUFBTSxVQUFVLE9BQUssU0FBTCxDQUFlLElBQWYsQ0FBb0IsVUFBQyxPQUFELEVBQVUsVUFBVixFQUF5QjtBQUMzRCxjQUFJLFFBQVEsTUFBUixPQUFxQixHQUF6QixFQUE4QjtBQUM1QixvQkFBUSxVQUFSO0FBQ0EsbUJBQU8sSUFBUDtBQUNEO0FBQ0YsU0FMZSxDQUFoQjtBQU1BLFlBQU0sVUFBVSxPQUFLLFFBQUwsQ0FBYyxPQUE5QjtBQUNBLFlBQU0sV0FBVSxPQUFLLE9BQUwsQ0FBYSxLQUFiLENBQW1CLEtBQW5CLEVBQWhCO0FBQ0EsZUFBSyxPQUFMLENBQWEsS0FBYixDQUFtQixnQkFBbkIsR0FBc0MsYUFBdEMsQ0FBb0QsT0FBcEQ7QUFDQSxnQkFBUSxVQUFSLENBQW1CLFFBQW5CLEVBQTRCLE9BQTVCO0FBQ0EsZUFBSyxLQUFMLENBQVcsUUFBWCxDQUFvQixNQUFwQixDQUEyQixLQUEzQixFQUFrQyxDQUFsQztBQUNBO0FBQ0QsT0FkRCxNQWNPO0FBQ1IsS0FqQkQ7QUFrQkQsR0FuQk0sQ0FBUDtBQW9CRCxDQTdCRDs7QUErQkEsTUFBTSxXQUFOLEdBQW9CLFVBQVMsR0FBVCxFQUFhO0FBQUE7O0FBQy9CLFNBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjtBQUNyQyxRQUFNLFVBQVUsT0FBSyxTQUFMLENBQWUsSUFBZixDQUFvQjtBQUFBLGFBQVcsUUFBUSxNQUFSLE9BQXFCLEdBQWhDO0FBQUEsS0FBcEIsRUFBeUQsUUFBekQsRUFBaEI7QUFDQSxRQUFNLHlCQUF5QixRQUFRLHNDQUFSLENBQS9CO0FBQ0EsV0FBSyxTQUFMLEdBQWlCLElBQUksc0JBQUosRUFBakI7QUFDQSxRQUFNLFNBQVMsT0FBSyxPQUFwQjtBQUNBLFdBQU8sUUFBUCxDQUFnQixJQUFoQixDQUFxQixPQUFyQjtBQUNBLFFBQU0sVUFBVTtBQUNkLGVBQVMsT0FBSyxRQURBO0FBRWQ7QUFGYyxLQUFoQjtBQUlBLFdBQUssU0FBTCxDQUFlLEtBQWYsQ0FBcUIsT0FBckIsRUFDRyxJQURILENBQ1EsbUJBQVc7QUFDZixVQUFNLFVBQVUsUUFBUSxRQUFSLENBQWlCLFFBQVEsUUFBUixDQUFpQixNQUFqQixHQUF5QixDQUExQyxDQUFoQjtBQUNBLFVBQU0sYUFBYSxFQUFuQjtBQUNBLGFBQU8sT0FBUCxDQUFlLE9BQUssS0FBTCxDQUFXLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBZixFQUF1QyxPQUF2QyxDQUErQyxnQkFBa0I7QUFBQTtBQUFBLFlBQWhCLEdBQWdCO0FBQUEsWUFBWCxLQUFXOztBQUMvRCxtQkFBVyxHQUFYLElBQWtCLFFBQVEsR0FBUixDQUFZLEdBQVosQ0FBbEI7QUFDRCxPQUZEO0FBR0EsaUJBQVcsbUJBQVgsR0FBaUMsUUFBUSxNQUFSLEVBQWpDO0FBQ0EsYUFBSyxLQUFMLENBQVcsUUFBWCxDQUFvQixJQUFwQixDQUF5QixVQUF6QjtBQUNBLGNBQVEsVUFBUjtBQUNELEtBVkgsRUFXRyxJQVhILENBV1E7QUFBQSxhQUFPLE9BQU8sR0FBUCxDQUFQO0FBQUEsS0FYUjtBQVlELEdBdEJNLENBQVA7QUF1QkQsQ0F4QkQ7O0FBMEJBLE1BQU0sV0FBTixHQUFvQixVQUFTLEdBQVQsRUFBYztBQUFBOztBQUNoQyxNQUFJLGNBQUo7QUFDQSxNQUFNLFVBQVUsS0FBSyxTQUFMLENBQWUsSUFBZixDQUFvQixVQUFDLE9BQUQsRUFBVSxZQUFWLEVBQTJCO0FBQzdELFFBQUksUUFBUSxNQUFSLE9BQXFCLEdBQXpCLEVBQThCO0FBQzVCLGNBQVEsWUFBUjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FMZSxDQUFoQjtBQU1BLE1BQU0sMkJBQTJCLFFBQVEsdUNBQVIsQ0FBakM7QUFDQSxPQUFLLFNBQUwsR0FBaUIsSUFBSSx3QkFBSixFQUFqQjtBQUNBLE1BQU0sU0FBUyxLQUFLLE9BQXBCO0FBQ0EsU0FBTyxRQUFQLENBQWdCLElBQWhCLENBQXFCLE9BQXJCO0FBQ0EsTUFBTSxVQUFVO0FBQ2QsYUFBUyxLQUFLLFFBREE7QUFFZDtBQUZjLEdBQWhCO0FBSUEsT0FBSyxTQUFMLENBQWUsS0FBZixDQUFxQixPQUFyQixFQUNHLElBREgsQ0FDUSxtQkFBVztBQUNmLFFBQU0sVUFBVSxRQUFRLFFBQVIsQ0FBaUIsUUFBUSxRQUFSLENBQWlCLE1BQWpCLEdBQXlCLENBQTFDLENBQWhCO0FBQ0EsV0FBTyxPQUFQLENBQWUsT0FBSyxLQUFMLENBQVcsUUFBWCxDQUFvQixLQUFwQixDQUFmLEVBQTJDLE9BQTNDLENBQW1ELGlCQUFrQjtBQUFBO0FBQUEsVUFBaEIsR0FBZ0I7QUFBQSxVQUFYLEtBQVc7O0FBQ25FLGFBQUssS0FBTCxDQUFXLFFBQVgsQ0FBb0IsS0FBcEIsRUFBMkIsR0FBM0IsSUFBa0MsUUFBUSxHQUFSLENBQVksR0FBWixDQUFsQztBQUNELEtBRkQ7QUFHRCxHQU5ILEVBT0csSUFQSCxDQU9RLGVBQU8sQ0FBRSxDQVBqQixFQVFHLE1BUkgsQ0FRVTtBQUFBLFdBQU8sT0FBSyxTQUFMLENBQWUsSUFBZixFQUFQO0FBQUEsR0FSVjtBQVNELENBekJEOztBQTJCQSxNQUFNLFlBQU4sR0FBcUIsWUFBMEI7QUFBQTs7QUFBQSxNQUFqQixhQUFpQix1RUFBSCxFQUFHOztBQUM3QyxNQUFNLFdBQVcsY0FBYyxHQUFkLENBQWtCO0FBQUEsV0FBUyxPQUFLLFNBQUwsQ0FBZSxLQUFmLENBQVQ7QUFBQSxHQUFsQixDQUFqQjtBQUNBLE9BQUssUUFBTCxDQUFjLE9BQWQsQ0FBc0I7QUFDcEI7QUFEb0IsR0FBdEI7QUFHRCxDQUxEOztBQU9BLE1BQU0sV0FBTixHQUFvQixVQUFTLEtBQVQsRUFBZ0I7QUFDbEMsTUFBTSxVQUFVLEtBQUssU0FBTCxDQUFlLEtBQWYsQ0FBaEI7QUFDQSxPQUFLLFFBQUwsQ0FBYyxPQUFkLENBQXNCO0FBQ2xCLGNBQVUsQ0FBQyxPQUFEO0FBRFEsR0FBdEI7QUFHRCxDQUxEOztBQU9BLE9BQU8sT0FBUCxHQUFpQixZQUFqQjs7O3lCQzVLbUMsT0FBTyxJQUFQLENBQVksSztJQUF4QyxJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFBUyxTLHNCQUFBLFM7SUFDZCxHLEdBQVEsT0FBTyxHLENBQWYsRztJQUNBLFMsR0FBYyxPQUFPLEksQ0FBckIsUzs7O0FBRVIsU0FBUyxJQUFULEdBQTRCO0FBQUE7O0FBQUEsTUFBZCxPQUFjLHVFQUFKLEVBQUk7O0FBQzFCLE9BQUssSUFBTDtBQUNBLE9BQUssY0FBTCxHQUFzQixRQUFRLDRCQUFSLENBQXRCO0FBRjBCLE1BR25CLElBSG1CLEdBR3NFLE9BSHRFLENBR25CLElBSG1CO0FBQUEsTUFHYixHQUhhLEdBR3NFLE9BSHRFLENBR2IsR0FIYTtBQUFBLE1BR1IsRUFIUSxHQUdzRSxPQUh0RSxDQUdSLEVBSFE7QUFBQSxNQUdKLElBSEksR0FHc0UsT0FIdEUsQ0FHSixJQUhJO0FBQUEsTUFHRSxPQUhGLEdBR3NFLE9BSHRFLENBR0UsT0FIRjtBQUFBLE1BR1csS0FIWCxHQUdzRSxPQUh0RSxDQUdXLEtBSFg7QUFBQSxzQkFHc0UsT0FIdEUsQ0FHa0IsSUFIbEI7QUFBQSxNQUdrQixJQUhsQixpQ0FHdUIsS0FIdkI7QUFBQSxzQkFHc0UsT0FIdEUsQ0FHOEIsSUFIOUI7QUFBQSxNQUc4QixJQUg5QixpQ0FHbUMsRUFIbkM7QUFBQSx5QkFHc0UsT0FIdEUsQ0FHdUMsT0FIdkM7QUFBQSxNQUd1QyxPQUh2QyxvQ0FHK0MsSUFIL0M7QUFBQSw0QkFHc0UsT0FIdEUsQ0FHcUQsVUFIckQ7QUFBQSxNQUdxRCxVQUhyRCx1Q0FHZ0UsRUFIaEU7O0FBSTFCLE9BQUssUUFBTCxHQUFnQixJQUFoQjtBQUNBLE9BQUssUUFBTCxHQUFnQixPQUFoQjtBQUNBLE9BQUssTUFBTCxHQUFjLEtBQWQ7QUFDQSxPQUFLLEdBQUwsR0FBVyxJQUFJLFFBQVEsRUFBWixDQUFlO0FBQ3hCO0FBRHdCLEdBQWYsQ0FBWDtBQUdBLE9BQUssS0FBTCxHQUFhLElBQWI7QUFDQSxPQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0EsT0FBSyxVQUFMLEdBQWtCLFVBQWxCO0FBQ0EsT0FBSyxvQkFBTCxHQUE0QixFQUE1QjtBQUNBLE9BQUssS0FBTCxHQUFhO0FBQ1gsVUFEVztBQUVYLGNBRlc7QUFHWCxhQUFTLEtBSEU7QUFJWCxhQUFTLG1CQUFtQixRQUFuQixHQUErQjtBQUFBLGFBQUssUUFBUSxLQUFSLENBQUw7QUFBQSxLQUFELEVBQTlCLEdBQXVELE9BSnJEO0FBS1gsWUFBUSxLQUxHO0FBTVgsY0FOVztBQU9YLGFBQVMsSUFQRTtBQVFYLFNBQUssT0FBTyxDQVJEO0FBU1gsY0FBVSxLQUFLLEdBQUwsQ0FBUyxXQUFUO0FBVEMsR0FBYjtBQVdEOztBQUVELFFBQVEsSUFBUixFQUFjLFNBQWQ7O0FBRUEsSUFBTSxRQUFRLEtBQUssU0FBbkI7O0FBRUEsTUFBTSxVQUFOLEdBQW1CLFlBQW9CO0FBQUEsTUFBWCxPQUFXLHVFQUFILEVBQUc7QUFBQSxNQUM5QixRQUQ4QixHQUNzQyxPQUR0QyxDQUM5QixRQUQ4QjtBQUFBLHlCQUNzQyxPQUR0QyxDQUNwQixPQURvQjtBQUFBLE1BQ3BCLE9BRG9CLG9DQUNaLEtBRFk7QUFBQSwwQkFDc0MsT0FEdEMsQ0FDTCxPQURLO0FBQUEsTUFDTCxPQURLLHFDQUNHLElBREg7QUFBQSw4QkFDc0MsT0FEdEMsQ0FDUyxvQkFEVDtBQUFBLE1BQ1Msb0JBRFQseUNBQ2dDLEVBRGhDOztBQUVyQyxPQUFLLEtBQUwsQ0FBVyxRQUFYLEdBQXNCLFlBQVksS0FBSyxLQUFMLENBQVcsUUFBN0M7QUFDQSxPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLE9BQXJCO0FBQ0EsT0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixPQUFyQjtBQUNBLE9BQUssb0JBQUwsR0FBNEIsb0JBQTVCO0FBQ0QsQ0FORDs7QUFRQTs7O0FBR0EsTUFBTSxRQUFOLEdBQWlCLFlBQVU7QUFDekIsU0FBTyxLQUFLLE1BQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sT0FBTixHQUFnQixZQUFVO0FBQ3hCLFNBQU8sS0FBSyxJQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFVBQU4sR0FBbUIsWUFBVztBQUM1QixTQUFPLEtBQUssUUFBTCxDQUFjLE1BQWQsQ0FBcUIsUUFBckIsQ0FBOEIsQ0FBOUIsQ0FBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSxxQkFBTixHQUE4QixZQUErQjtBQUFBLE1BQXRCLE9BQXNCLHVFQUFkLEVBQUMsVUFBUyxFQUFWLEVBQWM7QUFBQSwwQkFDckMsT0FEcUMsQ0FDcEQsUUFEb0Q7QUFBQSxNQUNwRCxRQURvRCxxQ0FDM0MsRUFEMkM7O0FBRTNELFNBQU87QUFDTCxZQUFTO0FBQ1AsYUFBTyxLQUFLLE1BREw7QUFFUDtBQUZPLEtBREo7QUFLTCxhQUFVO0FBQ1IsZUFBUyxLQUFLO0FBRE47QUFMTCxHQUFQO0FBU0QsQ0FYRDs7QUFhQTs7OztBQUlBLE1BQU0sS0FBTixHQUFjLFlBQThCO0FBQUE7O0FBQUEsTUFBckIsV0FBcUIsdUVBQVAsS0FBTzs7QUFDMUMsTUFBTSxVQUFVLEtBQUsscUJBQUwsRUFBaEI7QUFDQSxPQUFLLFFBQUwsR0FBZ0IsT0FBaEI7QUFDQSxNQUFNLFVBQVUsU0FBVixPQUFVLFVBQVc7QUFDekIsV0FBSyxHQUFMLENBQVMsSUFBVCxDQUFjLGdCQUFkLEVBQWdDLGlCQUFTO0FBQ3ZDO0FBQ0EsY0FBUSxNQUFNLE1BQU4sQ0FBYTtBQUFBLGVBQVEsQ0FBQyxPQUFLLG9CQUFMLENBQTBCLFFBQTFCLENBQW1DLEtBQUssSUFBeEMsQ0FBVDtBQUFBLE9BQWIsQ0FBUjtBQUNBLFlBQU0sTUFBTixJQUFnQixPQUFLLElBQUwsQ0FBVSxnQkFBVixFQUE0QixLQUE1QixDQUFoQjtBQUNELEtBSkQ7QUFLQSxXQUFLLEdBQUwsQ0FBUyxJQUFULENBQWMsUUFBZCxFQUF3QjtBQUFBLGFBQVMsT0FBSyxJQUFMLENBQVUsUUFBVixFQUFvQixLQUFwQixDQUFUO0FBQUEsS0FBeEI7QUFDQSxXQUFLLEdBQUwsQ0FBUyxJQUFULENBQWMsVUFBZCxFQUEwQjtBQUFBLGFBQVMsT0FBSyxJQUFMLENBQVUsVUFBVixFQUFzQixLQUF0QixDQUFUO0FBQUEsS0FBMUI7QUFDQTtBQUNBLFlBQVEsTUFBUixDQUFlLFFBQWYsR0FBMEIsRUFBMUI7QUFDQSxtQkFBZSxJQUFJLFdBQUosRUFBZjtBQUNBLFdBQUssR0FBTCxDQUFTLEtBQVQsQ0FBZSxPQUFmLEVBQ0csSUFESCxDQUNRLFlBQU07QUFDVixhQUFLLFFBQUwsQ0FBYyxJQUFkLEdBQ0csSUFESCxDQUNRO0FBQUEsZUFBTSxPQUFLLGNBQUwsQ0FBb0IsVUFBcEIsRUFBTjtBQUFBLE9BRFIsRUFEVSxDQUV1QztBQUNsRCxLQUpILEVBS0csSUFMSCxDQUtRLFlBQU07QUFDVixxQkFBZSxJQUFJLFdBQUosRUFBZjtBQUNBLGFBQUssUUFBTCxDQUFjLFFBQWQsR0FDRyxJQURILENBQ1EsWUFBTSxDQUFFLENBRGhCO0FBRUQsS0FUSCxFQVVHLE1BVkgsQ0FVVSxZQUFNO0FBQ1osVUFBSSxDQUFDLE9BQUssS0FBTixJQUFlLE9BQUssTUFBTCxDQUFZLE9BQVosT0FBMEIsT0FBN0MsRUFBc0QsUUFBUSxPQUFSLEVBQXRELEtBQ0ssT0FBSyxJQUFMO0FBQ04sS0FiSDtBQWNELEdBekJEO0FBMEJBLE1BQUksS0FBSyxHQUFULEVBQWM7QUFDWixTQUFLLEtBQUwsQ0FBVyxNQUFYLEdBQW9CLElBQXBCO0FBQ0EsZUFBVyxZQUFJO0FBQUU7QUFDZixjQUFRLE9BQVI7QUFDRCxLQUZEO0FBR0Q7QUFDRixDQW5DRDs7QUFxQ0EsTUFBTSxJQUFOLEdBQWEsWUFBc0I7QUFBQTs7QUFBQSxNQUFiLEtBQWEsdUVBQVAsS0FBTzs7QUFDakMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBQ0EsTUFBSSxLQUFLLEdBQVQsRUFBYztBQUNaLFNBQUssR0FBTCxDQUFTLElBQVQsQ0FBYyxLQUFkLEVBQ0csSUFESCxDQUNRLFlBQU0sQ0FBRSxDQURoQixFQUVHLElBRkgsQ0FFUTtBQUFBLGFBQU0sT0FBSyxRQUFMLENBQWMsUUFBZCxFQUFOO0FBQUEsS0FGUixFQUdHLE1BSEgsQ0FHVSxZQUFNO0FBQ1osYUFBSyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsYUFBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixLQUFwQjtBQUNBLGFBQUssSUFBTCxDQUFVLE1BQVYsRUFBa0I7QUFDaEIsaUJBQVMsT0FBSztBQURFLE9BQWxCO0FBR0EsUUFBRSxPQUFGO0FBQ0QsS0FWSDtBQVdELEdBWkQsTUFZTztBQUNMLFNBQUssSUFBTCxDQUFVLE1BQVYsRUFBa0I7QUFDaEIsZUFBUyxLQUFLO0FBREUsS0FBbEI7QUFHQSxNQUFFLE9BQUY7QUFDRDtBQUNELFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXJCRDs7QUF1QkEsTUFBTSxRQUFOLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxLQUFLLEtBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sUUFBTixHQUFpQixVQUFTLEtBQVQsRUFBZ0I7QUFDL0IsT0FBSyxLQUFMLEdBQWEsS0FBYjtBQUNELENBRkQ7O0FBSUEsTUFBTSxLQUFOLEdBQWMsWUFBVztBQUN2QixTQUFPLEtBQUssS0FBTCxDQUFXLEVBQWxCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLEtBQU4sR0FBYyxVQUFTLEVBQVQsRUFBYTtBQUN6QixPQUFLLEtBQUwsQ0FBVyxFQUFYLEdBQWdCLEVBQWhCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLE9BQU4sR0FBZ0IsWUFBVztBQUN6QixTQUFPLEtBQUssS0FBTCxDQUFXLElBQWxCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFNBQU4sR0FBa0IsWUFBcUI7QUFBQSxNQUFaLElBQVksdUVBQVAsS0FBTzs7QUFDckMsT0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixJQUFwQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxRQUFOLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxNQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxPQUFOLEdBQWdCLFlBQVc7QUFDekIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxJQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxPQUFOLEdBQWdCLFVBQVMsSUFBVCxFQUFlO0FBQzdCLE9BQUssS0FBTCxDQUFXLElBQVgsR0FBa0IsSUFBbEI7QUFDRCxDQUZEOztBQUlBLE1BQU0sVUFBTixHQUFtQixZQUFxQjtBQUFBLE1BQVosSUFBWSx1RUFBUCxLQUFPOztBQUN0QyxPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLElBQXJCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFNBQU4sR0FBa0IsWUFBVztBQUMzQixTQUFPLEtBQUssS0FBTCxDQUFXLE9BQWxCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFVBQU4sR0FBbUIsWUFBbUI7QUFBQSxNQUFWLElBQVUsdUVBQUwsSUFBSzs7QUFDcEMsT0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixJQUFyQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxTQUFOLEdBQWtCLFlBQVU7QUFDMUIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxPQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxXQUFOLEdBQW9CLFlBQVc7QUFDN0IsU0FBTyxLQUFLLEdBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sVUFBTixHQUFtQixZQUFXO0FBQzVCLFNBQU8sS0FBSyxRQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFVBQU4sR0FBbUIsVUFBUyxPQUFULEVBQWtCO0FBQ25DLE9BQUssUUFBTCxHQUFnQixPQUFoQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxLQUFOLEdBQWMsWUFBVztBQUN2QixPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLEtBQXJCO0FBQ0EsT0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixLQUFwQjtBQUNELENBSEQ7O0FBS0EsTUFBTSxVQUFOLEdBQW1CLFlBQVc7QUFDNUIsTUFBTSxXQUFXLEtBQUssV0FBTCxFQUFqQjtBQUNBLFNBQU8sU0FBUyxjQUFULE1BQTZCLFNBQVMsY0FBVCxFQUE3QixHQUF5RCxLQUFLLEtBQUwsQ0FBVyxRQUFwRSxHQUErRSxJQUF0RjtBQUNELENBSEQ7O0FBS0EsTUFBTSxVQUFOLEdBQW1CLFVBQVMsT0FBVCxFQUFrQjtBQUNuQyxPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLE9BQXJCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFlBQU4sR0FBcUIsWUFBVztBQUM5QixPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLElBQXJCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFlBQU4sR0FBcUIsWUFBVTtBQUM3QixPQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLElBQXJCO0FBQ0EsT0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixLQUFyQjtBQUNBLE9BQUssS0FBTCxDQUFXLFFBQVgsR0FBdUIsS0FBSyxHQUFMLENBQVMsV0FBVCxFQUF2QjtBQUNBLE9BQUssb0JBQUwsR0FBNEIsRUFBNUIsQ0FKNkIsQ0FJRztBQUNqQyxDQUxEOztBQU9BLE9BQU8sT0FBUCxHQUFpQixJQUFqQjs7Ozs7Ozs7O21CQ2hPd0MsT0FBTyxJO0lBQXZDLGdCLGdCQUFBLGdCO0lBQWtCLFMsZ0JBQUEsUzt5QkFDbUIsT0FBTyxJQUFQLENBQVksSztJQUFsRCxJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFBUyxRLHNCQUFBLFE7SUFBVSxTLHNCQUFBLFM7SUFDeEIsRyxHQUFRLE9BQU8sRyxDQUFmLEc7SUFDUSxDLEdBQU0sT0FBTyxJQUFQLENBQVksSSxDQUExQixPO0lBQ0EsSyxHQUFVLE9BQU8sSUFBUCxDQUFZLEssQ0FBdEIsSztJQUNBLE8sR0FBWSxPQUFPLElBQVAsQ0FBWSxPLENBQXhCLE87SUFDQSxzQixHQUEyQixPQUFPLEVBQVAsQ0FBVSxLLENBQXJDLHNCOzs7QUFFUixTQUFTLE9BQVQsR0FBNkI7QUFBQTs7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDM0IsT0FBSyxJQUFMO0FBQ0EsT0FBSyxjQUFMLEdBQXNCLFFBQVEsNEJBQVIsQ0FBdEI7QUFDQSxPQUFLLFdBQUwsR0FBbUIsSUFBSSxVQUFKLENBQWUsS0FBZixDQUFuQjtBQUNBLE9BQUssTUFBTCxHQUFjLEtBQWQ7QUFDQSxPQUFLLFlBQUwsR0FBb0IsUUFBUSxXQUFSLElBQXVCLEVBQTNDO0FBQ0EsT0FBSyxNQUFMLEdBQWMsUUFBUSxLQUF0QjtBQUNBLE9BQUssWUFBTCxHQUFvQixLQUFLLG1CQUFMLENBQXlCLEtBQUssTUFBTCxDQUFZLGdCQUFaLEVBQXpCLENBQXBCO0FBQ0EsT0FBSyxZQUFMLElBQXFCLEtBQUssOEJBQUwsRUFBckI7QUFDQSxPQUFLLFVBQUwsR0FBa0IsUUFBUSxJQUFSLElBQWdCLE1BQU0sVUFBTixDQUFpQixNQUFuRDtBQUNBLE9BQUssYUFBTCxHQUFxQixJQUFyQjtBQUNBLE9BQUssTUFBTCxHQUFjLFFBQVEsS0FBdEI7QUFDQSxPQUFLLGFBQUw7QUFDQSxPQUFLLGNBQUw7QUFDQSxPQUFLLGtCQUFMLEdBQTBCLEVBQTFCO0FBQ0EsTUFBTSxhQUFhLEVBQW5CO0FBQ0EsT0FBSyxNQUFMLENBQVksT0FBWixDQUFvQjtBQUFBLFdBQVEsV0FBVyxJQUFYLENBQWdCLEtBQUssUUFBTCxFQUFoQixDQUFSO0FBQUEsR0FBcEI7QUFDQSxPQUFLLFdBQUwsR0FBbUI7QUFDakIsWUFBUSxJQURTO0FBRWpCLFVBQU0sSUFGVztBQUdqQixXQUFPO0FBSFUsR0FBbkIsQ0FqQjJCLENBcUJ4QjtBQUNILE9BQUssUUFBTCxHQUFnQixJQUFJLE9BQUosQ0FBWTtBQUMxQixRQUFJLFFBQVEsRUFEYztBQUUxQixZQUFRLEtBQUssTUFBTCxDQUFZLFNBQVo7QUFGa0IsR0FBWixDQUFoQjs7QUFLQTtBQUNBLE9BQUssWUFBTCxJQUFxQixLQUFLLFFBQUwsQ0FBYyxPQUFkLENBQXNCLHFCQUF0QixFQUE2QyxZQUFJO0FBQ3BFLFVBQUssa0JBQUw7QUFDRCxHQUZvQixDQUFyQjs7QUFJQSxPQUFLLGtCQUFMLEdBQTBCLEVBQTFCO0FBQ0EsTUFBTSxlQUFlLEtBQUssUUFBTCxDQUFjLFVBQWQsR0FBMkIsS0FBaEQ7QUFDQSxNQUFNLGVBQWUsS0FBSyxRQUFMLENBQWMsS0FBbkM7O0FBRUEsT0FBSyxLQUFMLEdBQWE7QUFDWCxRQUFJLFFBQVEsRUFERDtBQUVYLG1CQUFlLEtBRkosRUFFVztBQUN0QixVQUFNLElBSEssRUFHQztBQUNaLFdBQU8sUUFBUSxLQUFSLElBQWlCLE1BSmI7QUFLWCxXQUFPLFFBQVEsS0FBUixJQUFpQixZQUxiO0FBTVgsaUJBQWEsS0FORjtBQU9YLGFBQVMsS0FQRTtBQVFYLGFBQVMsS0FSRTtBQVNYLG1CQUFlLElBVEo7QUFVWCxzQkFBa0IsSUFWUDtBQVdYLGFBQVMsSUFYRTtBQVlYLGtCQUFjO0FBQ1osWUFBTTtBQURNLEtBWkg7QUFlWCxpQkFBYSxFQWZGO0FBZ0JYLFdBQU8sVUFoQkk7QUFpQlgsY0FBVSxLQWpCQztBQWtCWCxnQkFBWSxJQWxCRDtBQW1CWCxhQUFTO0FBQ1AsZUFBUyxZQURGO0FBRVAsZUFBUyxZQUZGO0FBR1AsVUFBSSxLQUhHO0FBSVAsb0JBQWMsRUFKUDtBQUtQLGlCQUFXLEVBTEo7QUFNUCxjQUFRLEtBTkQ7QUFPUCxlQUFTO0FBUEYsS0FuQkU7QUE0QlgsZ0JBQVksS0FBSyxNQUFMLENBQVk7QUE1QmIsR0FBYjs7QUErQkE7Ozs7QUFJQSxPQUFLLGFBQUwsR0FBcUI7QUFDbkIsV0FBTyxLQUFLLEtBQUwsQ0FBVyxLQURDO0FBRW5CLDhDQUFpQixLQUFLLEtBQUwsQ0FBVyxXQUE1QjtBQUZtQixHQUFyQjs7QUFLQSxPQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CO0FBQUEsV0FBUSxLQUFLLFVBQUwsQ0FBZ0IsTUFBSyxRQUFyQixDQUFSO0FBQUEsR0FBcEI7O0FBRUEsT0FBSyxRQUFMLENBQWMsT0FBZCxDQUFzQixNQUF0QixFQUE4QixZQUFNO0FBQ2xDLFFBQUksTUFBSyxTQUFMLEVBQUosRUFBc0I7QUFDcEIsdUJBQWlCLE1BQWpCLElBQTJCLE1BQUssY0FBTCxDQUFvQixtQkFBcEIsQ0FBd0MsTUFBSyxLQUFMLENBQVcsRUFBbkQsQ0FBM0I7QUFDQSxZQUFLLGtCQUFMLENBQXdCLGNBQXhCLElBQTBDLE1BQUssMkJBQUwsRUFBMUM7QUFDRDtBQUNGLEdBTEQ7O0FBT0EsT0FBSyxRQUFMLENBQWMsT0FBZCxDQUFzQixPQUF0QixFQUErQixtQkFBVztBQUN4QyxRQUFJLFFBQVEsY0FBWixFQUE0QjtBQUMxQixZQUFLLGlCQUFMLEdBQXlCO0FBQ3ZCLGVBQU8sSUFEZ0I7QUFFdkIsYUFBSztBQUZrQixPQUF6QjtBQUlBLFlBQUssa0JBQUwsR0FBMEIsT0FBMUI7QUFDQSxZQUFLLHlCQUFMLENBQStCLE1BQUssa0JBQXBDO0FBQ0EsVUFBSSxRQUFRLElBQVIsS0FBaUIsTUFBTSxVQUFOLENBQWlCLE1BQWxDLElBQTRDLElBQUksZ0JBQUosRUFBaEQsRUFDRSxJQUFJLElBQUosQ0FBUyxjQUFULEVBQXlCO0FBQUEsZUFBSyxXQUFXO0FBQUEsaUJBQUssTUFBSyxXQUFMLENBQWlCLE1BQWpCLEdBQTBCLGFBQTFCLENBQXdDLE1BQUssaUJBQUwsQ0FBdUIsS0FBL0QsQ0FBTDtBQUFBLFNBQVgsQ0FBTDtBQUFBLE9BQXpCO0FBQ0g7QUFDRixHQVhEO0FBWUQ7O0FBRUQsUUFBUSxPQUFSLEVBQWlCLFNBQWpCOztBQUVBLElBQU0sUUFBUSxRQUFRLFNBQXRCOztBQUVBLE1BQU0sUUFBTixHQUFpQixZQUFXO0FBQzFCLFNBQU8sS0FBSyxLQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLE9BQU4sR0FBZ0IsWUFBbUI7QUFBQSxNQUFWLElBQVUsdUVBQUwsSUFBSzs7QUFDakMsT0FBSyxLQUFMLENBQVcsSUFBWCxHQUFrQixJQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxRQUFOLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxLQUFLLE1BQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sU0FBTixHQUFrQixVQUFTLElBQVQsRUFBZTtBQUMvQixPQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLE1BQW5CLEdBQTRCLElBQTVCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFFBQU4sR0FBaUIsWUFBVztBQUMxQixTQUFPLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsTUFBMUI7QUFDRCxDQUZEOztBQUlBLE1BQU0sWUFBTixHQUFxQixVQUFTLFNBQVQsRUFBb0I7QUFBQTs7QUFDdkMsWUFBVSxPQUFWLENBQWtCO0FBQUEsV0FBWSxPQUFLLFdBQUwsQ0FBaUIsUUFBakIsQ0FBWjtBQUFBLEdBQWxCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLE1BQU4sR0FBZSxZQUFXO0FBQ3hCLFNBQU8sS0FBSyxRQUFMLENBQWMsTUFBZCxFQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFdBQU4sR0FBb0IsVUFBUyxRQUFULEVBQW1CO0FBQ3JDLE9BQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsU0FBbkIsQ0FBNkIsSUFBN0IsQ0FBa0MsUUFBbEM7QUFDRCxDQUZEOztBQUlBLE1BQU0sZUFBTixHQUF3QixZQUFXO0FBQ2pDLFNBQU8sS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixZQUExQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxlQUFOLEdBQXdCLFlBQVc7QUFDakMsU0FBTyxDQUFDLENBQUMsS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixZQUFuQixDQUFnQyxNQUF6QztBQUNELENBRkQ7O0FBSUEsTUFBTSxlQUFOLEdBQXdCLFVBQVMsWUFBVCxFQUF1QjtBQUFBOztBQUM3QyxlQUFhLE9BQWIsQ0FBcUI7QUFBQSxXQUFjLE9BQUssYUFBTCxDQUFtQixVQUFuQixDQUFkO0FBQUEsR0FBckI7QUFDRCxDQUZEOztBQUlBLE1BQU0sYUFBTixHQUFzQixVQUFTLFVBQVQsRUFBcUI7QUFDekMsT0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixZQUFuQixDQUFnQyxJQUFoQyxDQUFxQyxVQUFyQztBQUNELENBRkQ7O0FBSUEsTUFBTSw4QkFBTixHQUF1QyxZQUEyQjtBQUFBOztBQUFBLGlGQUFKLEVBQUk7QUFBQSx3QkFBakIsS0FBaUI7QUFBQSxNQUFqQixLQUFpQiw4QkFBWCxLQUFXOztBQUNoRSxNQUFNLGFBQWEsT0FBTyxNQUFQLENBQWMsS0FBSyxZQUFuQixFQUFpQyxHQUFqQyxDQUFxQztBQUFBLFdBQVMsTUFBTSxJQUFmO0FBQUEsR0FBckMsQ0FBbkI7QUFDQSxPQUFLLE1BQUwsQ0FBWSxhQUFaLENBQTBCO0FBQ3hCLFVBQU0sUUFEa0I7QUFFeEIsWUFBUSxXQUFXLElBQVg7QUFGZ0IsR0FBMUIsRUFHRyxJQUhILENBR1Msb0JBQVk7QUFDbkIsUUFBTSxPQUFPLFNBQVMsSUFBdEI7QUFDQSxXQUFPLE9BQVAsQ0FBZSxJQUFmLEVBQXFCLE9BQXJCLENBQTZCLGlCQUF5QjtBQUFBO0FBQUEsVUFBdkIsU0FBdUI7QUFBQSxVQUFaLE1BQVk7O0FBQ3BELGVBQVMsT0FBSyxZQUFMLENBQWtCLFNBQWxCLEVBQTZCLEtBQTdCLENBQW1DLE9BQW5DLENBQTJDLE1BQTNDLENBQWtELE1BQWxELENBQXlELENBQXpELENBQVQ7QUFDQSxhQUFPLE9BQVAsQ0FBZTtBQUFBLGVBQVMsT0FBSyxZQUFMLENBQWtCLFNBQWxCLEVBQTZCLEtBQTdCLENBQW1DLE9BQW5DLENBQTJDLE1BQTNDLENBQWtELElBQWxELENBQXVELEtBQXZELENBQVQ7QUFBQSxPQUFmO0FBQ0QsS0FIRDtBQUlELEdBVEQsRUFTRyxJQVRILENBU1EsUUFBUSxHQVRoQjtBQVVELENBWkQ7O0FBY0EsTUFBTSxtQkFBTixHQUE0QixVQUFTLE1BQVQsRUFBaUI7QUFDM0MsTUFBTSxlQUFlLEVBQXJCO0FBQ0EsTUFBSSxPQUFPLEtBQVg7QUFDQSxTQUFPLE9BQVAsQ0FBZSxpQkFBUztBQUN0QixRQUFJLE1BQU0sS0FBTixJQUFlLE1BQU0sS0FBTixDQUFZLElBQVosS0FBcUIsUUFBeEMsRUFBa0Q7QUFDaEQsbUJBQWEsTUFBTSxJQUFuQixJQUEyQixLQUEzQjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FMRDtBQU1BLFNBQU8sUUFBUSxZQUFSLElBQXdCLElBQS9CO0FBQ0QsQ0FWRDs7QUFZQSxNQUFNLGtCQUFOLEdBQTJCLFlBQVU7QUFDbkMsT0FBSyw4QkFBTCxDQUFvQztBQUNsQyxXQUFPO0FBRDJCLEdBQXBDO0FBR0QsQ0FKRDs7QUFNQTs7O0FBR0EsTUFBTSxhQUFOLEdBQXNCLFlBQVU7QUFDOUIsU0FBTyxLQUFLLFVBQUwsS0FBcUIsTUFBTSxVQUFOLENBQWlCLE1BQTdDO0FBQ0QsQ0FGRDs7QUFJQTs7OztBQUlBLE1BQU0sa0JBQU4sR0FBMkIsWUFBcUI7QUFBQSxrRkFBSCxFQUFHO0FBQUEsTUFBWCxNQUFXLFNBQVgsTUFBVzs7QUFDOUMsTUFBSSxNQUFKLEVBQVk7QUFDVjtBQUNBLFFBQUksT0FBTyxVQUFYLEVBQXVCLE9BQU8sZ0JBQVAsR0FBMEIsT0FBTyxnQkFBUCxJQUEyQixLQUFLLE1BQUwsQ0FBWSxnQkFBWixHQUErQixDQUEvQixFQUFrQyxJQUF2RjtBQUN2QixTQUFLLGtCQUFMLEdBQTBCO0FBQ3hCLG9CQUR3QjtBQUV4QixlQUFTLElBRmU7QUFHeEIsc0JBQWdCO0FBSFEsS0FBMUI7QUFLQTtBQUNBLFdBQU8sVUFBUCxJQUFxQixLQUFLLDJCQUFMLENBQWlDLE1BQWpDLENBQXJCO0FBQ0QsR0FWRCxNQVdLO0FBQ0gsUUFBTSxhQUFhLEtBQUssVUFBTCxLQUFvQixNQUFNLFVBQU4sQ0FBaUIsS0FBckMsR0FBNkMsS0FBN0MsR0FBb0QsTUFBdkU7QUFDQSxTQUFLLGtCQUFMLEdBQTBCLEtBQUssY0FBTCxDQUFvQix3QkFBcEIsQ0FBNkMsVUFBN0MsRUFBeUQ7QUFDakYsZUFBUyxLQUFLLEtBQUw7QUFEd0UsS0FBekQsQ0FBMUI7QUFHRDtBQUNGLENBbEJEOztBQW9CQSxNQUFNLHFCQUFOLEdBQThCLFlBQXdCO0FBQUE7O0FBQUEsTUFBZixXQUFlLHVFQUFILEVBQUc7O0FBQ3BELFNBQU8sSUFBUCxDQUFZLFdBQVosRUFBeUIsT0FBekIsQ0FBaUM7QUFBQSxXQUFjLE9BQUssV0FBTCxDQUFpQixVQUFqQixJQUErQixZQUFZLFVBQVosQ0FBN0M7QUFBQSxHQUFqQztBQUNELENBRkQ7O0FBS0EsTUFBTSx5QkFBTiwyREFBa0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBQzFCLEtBQUssY0FBTCxDQUFvQix5QkFBcEIsQ0FBOEMsS0FBSyxLQUFMLEVBQTlDLENBRDBCOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQWxDOztBQUlBLE1BQU0sNEJBQU4sR0FBcUMsWUFBVTtBQUM3QyxPQUFLLGNBQUwsQ0FBb0IsNEJBQXBCLENBQWlELEtBQUssS0FBTCxFQUFqRDtBQUNELENBRkQ7O0FBSUE7QUFDQSxNQUFNLEtBQU4sR0FBYyxZQUFxQjtBQUFBOztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJO0FBQUEsTUFDNUIsTUFENEIsR0FDcUUsT0FEckUsQ0FDNUIsTUFENEI7QUFBQSw4QkFDcUUsT0FEckUsQ0FDcEIsYUFEb0I7QUFBQSxNQUNwQixhQURvQix5Q0FDTixJQURNO0FBQUEsOEJBQ3FFLE9BRHJFLENBQ0EsZ0JBREE7QUFBQSxNQUNBLGdCQURBLHlDQUNpQixJQURqQjtBQUFBLDJCQUNxRSxPQURyRSxDQUN1QixTQUR2QjtBQUFBLE1BQ3VCLFNBRHZCLHNDQUNpQyxJQURqQztBQUFBLE1BQ3VDLEtBRHZDLEdBQ3FFLE9BRHJFLENBQ3VDLEtBRHZDO0FBQUEsOEJBQ3FFLE9BRHJFLENBQzhDLGFBRDlDO0FBQUEsTUFDOEMsYUFEOUMseUNBQzRELEtBRDVEOztBQUVqQyxPQUFLLEtBQUwsQ0FBVyxhQUFYLEdBQTJCLGFBQTNCO0FBQ0EsV0FBUyxLQUFLLHVCQUFMLENBQTZCLEtBQTdCLENBQVQ7QUFDQSxPQUFLLEtBQUwsQ0FBVyxhQUFYLEdBQTJCLGFBQTNCO0FBQ0EsT0FBSyxLQUFMLENBQVcsZ0JBQVgsR0FBOEIsZ0JBQTlCO0FBQ0EsTUFBTSxZQUFZLGVBQWxCO0FBQ0EsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBQ0EsTUFBTSxLQUFLLEtBQUssS0FBTCxFQUFYO0FBQ0EsTUFBTSx3QkFBd0IsS0FBSyxjQUFMLENBQW9CLG1DQUFwQixDQUF3RCxLQUFLLEtBQUwsRUFBeEQsQ0FBOUI7QUFDQSxXQUFTLHlCQUF5QixzQkFBc0IsTUFBL0MsSUFBeUQsS0FBSyxXQUFMLENBQWlCLE1BQTFFLElBQW9GLE1BQTdGO0FBQ0E7QUFDQSxPQUFLLGtCQUFMLENBQXdCO0FBQ3RCO0FBRHNCLEdBQXhCOztBQUlBLE1BQU0saUNBQWlDLFNBQWpDLDhCQUFpQyxVQUFXO0FBQ2hELFdBQUssSUFBTCxDQUFVLFNBQVY7QUFDQSxXQUFLLHlCQUFMLEdBQWlDLElBQWpDLENBQXNDLFlBQUk7QUFDeEMsYUFBSyxjQUFMLENBQW9CLGVBQXBCLENBQW9DO0FBQ2xDLGNBQU0sU0FENEI7QUFFbEM7QUFGa0MsT0FBcEM7QUFJQSxjQUNHLElBREgsQ0FDUSxvQkFBWTtBQUNoQixlQUFLLFdBQUw7QUFDQSxlQUFLLFVBQUwsQ0FBZ0IsSUFBaEI7QUFDQSxlQUFLLGNBQUwsQ0FBb0IsZUFBcEIsQ0FBb0M7QUFDbEMsZ0JBQU0sc0JBRDRCO0FBRWxDLGdCQUZrQztBQUdsQyxtQkFBUztBQUNQO0FBRE87QUFIeUIsU0FBcEM7O0FBUUEsVUFBRSxPQUFGLENBQVU7QUFDUjtBQURRLFNBQVY7QUFHRCxPQWZILEVBZ0JHLElBaEJILENBZ0JRLGlCQUFTO0FBQ2IsWUFBSSxNQUFKLENBQVcsS0FBWCxDQUFpQixNQUFNLE9BQXZCO0FBQ0EsZUFBSyxjQUFMLENBQW9CLGVBQXBCLENBQW9DO0FBQ2xDLGdCQUFNLGVBRDRCO0FBRWxDLGdCQUZrQztBQUdsQztBQUhrQyxTQUFwQztBQUtBLGVBQUssSUFBTDtBQUNBLGVBQUssV0FBTDtBQUNBLFVBQUUsTUFBRixDQUFTLEtBQVQ7QUFDRCxPQTFCSDtBQTJCRCxLQWhDRDtBQWtDRCxHQXBDRDtBQXFDQSxNQUFJLEtBQUssUUFBVCxFQUFtQjtBQUNqQixRQUFJLENBQUMsS0FBSyxRQUFMLENBQWMsU0FBZCxFQUFMLEVBQWdDO0FBQzlCO0FBQ0EsVUFBSSxpQkFBaUIsUUFBakIsSUFBNkIsS0FBSyxXQUFMLENBQWlCLFdBQWpCLEVBQTdCLElBQStELEtBQUssVUFBTCxLQUFvQixNQUFNLFVBQU4sQ0FBaUIsTUFBeEcsRUFBZ0g7QUFDOUcsYUFBSyxVQUFMLENBQWdCLElBQWhCO0FBQ0EsWUFBSSxVQUFKLENBQWUsS0FBZixFQUFzQixTQUF0QixDQUFnQyxXQUFoQyxFQUE2QyxZQUFLO0FBQ2hELHFCQUFXLFlBQUk7QUFDYixtQkFBSyxNQUFMLEdBQWMsSUFBZDtBQUNBLG1CQUFLLFlBQUw7QUFDQSxtQkFBSyxrQkFBTCxDQUF3QjtBQUN0QjtBQURzQixhQUF4QjtBQUdBLG1CQUFLLFFBQUwsQ0FBYyxLQUFkLENBQW9CLE9BQUssa0JBQXpCLEVBQ0csSUFESCxDQUNRLDhCQURSLEVBQ3dDLElBRHhDLENBQzZDO0FBQUEscUJBQUksT0FBSyxVQUFMLENBQWdCLEtBQWhCLENBQUo7QUFBQSxhQUQ3QztBQUVELFdBUkQsRUFRRyxHQVJIO0FBU0QsU0FWRDtBQVdELE9BYkQsTUFhTztBQUNMLGFBQUssTUFBTCxHQUFjLElBQWQ7QUFDQSxhQUFLLFlBQUw7QUFDQSxhQUFLLFFBQUwsQ0FBYyxLQUFkLENBQW9CLEtBQUssa0JBQXpCLEVBQTZDLElBQTdDLENBQWtELDhCQUFsRDtBQUNEO0FBQ0YsS0FwQkQsTUFvQk87QUFDTCxVQUFJLENBQUMsS0FBSyxNQUFWLEVBQWtCO0FBQ2hCLGFBQUssWUFBTDtBQUNBLGFBQUssUUFBTCxDQUFjLFdBQWQsQ0FBMEIsS0FBSyxrQkFBL0IsRUFBbUQsSUFBbkQsQ0FBd0QsOEJBQXhEO0FBQ0EsYUFBSyxNQUFMLEdBQWMsSUFBZDtBQUNEO0FBQ0QsV0FBSyxVQUFMLENBQWdCLElBQWhCO0FBQ0Q7QUFDRjtBQUNELFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXBGRDs7QUFzRkEsTUFBTSxZQUFOLEdBQXFCLFlBQVc7QUFDOUIsT0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixJQUFyQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxXQUFOLEdBQW9CLFlBQVc7QUFDN0IsT0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixLQUFyQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxpQkFBTixHQUEwQixZQUFXO0FBQ25DLFNBQU8sS0FBSyxrQkFBWjtBQUNELENBRkQ7O0FBSUEsTUFBTSxJQUFOLEdBQWEsWUFBVztBQUFBOztBQUN0QixNQUFNLFlBQWEsY0FBbkI7QUFDQSxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxPQUFLLG1CQUFMLElBQTRCLEtBQUssbUJBQUwsRUFBNUI7QUFDQSxNQUFJLEtBQUssUUFBTCxJQUFpQixLQUFLLFFBQUwsQ0FBYyxTQUFkLEVBQXJCLEVBQWdEO0FBQzlDLFFBQU0sK0JBQStCLEtBQUssY0FBTCxDQUFvQixlQUFwQixDQUFvQyxLQUFLLEtBQUwsQ0FBVyxFQUEvQyxDQUFyQztBQUNBLFFBQUksaUJBQWlCLE1BQWpCLElBQTJCLENBQUMsNEJBQWhDLEVBQThEO0FBQzVELFdBQUssUUFBTCxDQUFjLElBQWQsR0FDRyxJQURILENBQ1EsWUFBTTtBQUNWLGVBQUssTUFBTCxHQUFjLEtBQWQ7QUFDQSxlQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLEVBQW5CLEdBQXdCLEtBQXhCO0FBQ0EsZUFBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixLQUFyQjtBQUNBLGVBQUssV0FBTDtBQUNBLGVBQUssa0JBQUwsR0FBMEIsRUFBMUI7QUFDQSxlQUFLLGNBQUw7QUFDQSxlQUFLLFdBQUwsQ0FBaUIsS0FBakI7QUFDQSxlQUFLLG9CQUFMO0FBQ0EsZUFBSyxXQUFMLENBQWlCLEtBQWpCO0FBQ0EsZUFBSyxJQUFMLENBQVUsU0FBVjtBQUNBLGVBQUssNEJBQUw7QUFDQSxVQUFFLE9BQUYsQ0FBVSxJQUFWO0FBQ0QsT0FkSCxFQWVHLElBZkgsQ0FlUTtBQUFBLGVBQU8sRUFBRSxNQUFGLENBQVMsR0FBVCxDQUFQO0FBQUEsT0FmUixFQWdCRyxNQWhCSCxDQWdCVTtBQUFBLGVBQUssT0FBSyxXQUFMLENBQWlCLEtBQWpCLENBQUw7QUFBQSxPQWhCVjtBQWlCRCxLQWxCRCxNQWtCTztBQUNMLFdBQUssY0FBTDtBQUNBO0FBQ0EsV0FBSyxNQUFMLENBQVksZUFBWixHQUE4QixTQUE5QixHQUEwQyxLQUExQztBQUNBLFdBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsRUFBbkIsR0FBd0IsS0FBeEI7QUFDQSxXQUFLLFdBQUwsQ0FBaUIsS0FBakI7QUFDQSxXQUFLLG9CQUFMO0FBQ0EsV0FBSywyQkFBTDtBQUNBLFdBQUssY0FBTCxDQUFvQixtQkFBcEIsQ0FBd0MsS0FBSyxLQUFMLENBQVcsRUFBbkQ7QUFDQSxXQUFLLFdBQUwsQ0FBaUIsS0FBakI7QUFDQSxXQUFLLDRCQUFMO0FBQ0Q7QUFDRixHQWhDRCxNQWdDTztBQUNMLFNBQUssV0FBTCxDQUFpQixLQUFqQjtBQUNBLE1BQUUsT0FBRixDQUFVLElBQVY7QUFDRDtBQUNELFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXpDRDs7QUEyQ0EsTUFBTSxJQUFOLEdBQWEsWUFBWTtBQUN2QixPQUFLLFFBQUwsQ0FBYyxNQUFkO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLDJCQUFOLEdBQW9DLFlBQVc7QUFDN0MsVUFBTyxLQUFLLFVBQVo7QUFDRSxTQUFLLE1BQU0sVUFBTixDQUFpQixNQUF0QjtBQUNFLFdBQUssV0FBTCxDQUFpQixNQUFqQixHQUEwQixFQUExQixDQUE2QixLQUFLLGlCQUFMLENBQXVCLEtBQXBELEVBQTJELEtBQUssaUJBQUwsQ0FBdUIsR0FBbEY7QUFDQTtBQUNGO0FBQ0U7QUFMSjtBQU9ELENBUkQ7O0FBVUEsTUFBTSx5QkFBTixHQUFrQyxZQUFxQjtBQUFBOztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNyRCxVQUFPLEtBQUssVUFBWjtBQUNFLFNBQUssTUFBTSxVQUFOLENBQWlCLE1BQXRCO0FBQ0U7QUFDQSxVQUFJLFFBQVEsTUFBUixDQUFlLElBQW5CLEVBQXlCO0FBQ3ZCLFlBQU0sTUFBTSxTQUFOLEdBQU0sR0FBTTtBQUNoQixjQUFNLFVBQVUsT0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixPQUFuQztBQUNBLGlCQUFLLE1BQUwsQ0FBWSxlQUFaLEdBQThCLFVBQTlCLENBQXlDLE9BQXpDO0FBQ0E7QUFDQSxjQUFJLGlCQUFpQixNQUFqQixJQUEyQixPQUEzQixJQUFzQyxJQUFJLGdCQUFKLE9BQTJCLENBQXJFLEVBQXdFO0FBQ3RFLGdCQUFNLE9BQU8sT0FBSyxXQUFMLENBQWlCLFVBQWpCLEVBQWI7QUFDQSxvQkFBUSxNQUFSLENBQWUsSUFBZixHQUFzQixJQUF0QjtBQUNBLG1CQUFLLEtBQUwsQ0FBVyxPQUFYLEdBQXFCLElBQXJCO0FBQ0EsbUJBQUssUUFBTCxDQUFjLFdBQWQsQ0FBMEIsT0FBMUIsRUFBbUMsSUFBbkMsQ0FBd0MsbUJBQVU7QUFDaEQsc0JBQVEsSUFBUixDQUFhLFlBQU07QUFDakIsdUJBQUssS0FBTCxDQUFXLE9BQVgsR0FBcUIsS0FBckI7QUFDRCxlQUZEO0FBR0QsYUFKRDtBQUtEO0FBQ0YsU0FkRDtBQWVBLGFBQUssaUJBQUwsQ0FBdUIsS0FBdkIsR0FBK0IsU0FBL0I7QUFDQSxhQUFLLGlCQUFMLENBQXVCLEdBQXZCLEdBQTZCLFNBQVMsR0FBVCxFQUFjLEdBQWQsQ0FBN0I7QUFDQSxZQUFNLE1BQU0sS0FBSyxXQUFMLENBQWlCLE1BQWpCLEVBQVo7QUFDQSxZQUFJLEVBQUosQ0FBTyxTQUFQLEVBQWtCLEtBQUssaUJBQUwsQ0FBdUIsR0FBekM7QUFDRDtBQUNEO0FBQ0Y7QUFDRTtBQTFCSjtBQTRCRCxDQTdCRDs7QUErQkEsTUFBTSwyQkFBTixHQUFvQyxVQUFTLE1BQVQsRUFBZ0I7QUFDbEQsT0FBSyx1QkFBTCxHQUErQixNQUEvQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxxQkFBTixHQUE4QixZQUFXO0FBQ3ZDLFNBQU8sS0FBSyxZQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLG9CQUFOLEdBQTZCLFVBQVMsSUFBVCxFQUFlO0FBQzFDLFNBQU8sS0FBSyxxQkFBTCxHQUE2QixJQUE3QixDQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLE9BQU4sR0FBZ0IsWUFBVztBQUN6QixTQUFPLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsT0FBMUI7QUFDRCxDQUZEOztBQUlBLE1BQU0sUUFBTixHQUFpQixZQUFXO0FBQUE7O0FBQzFCLE1BQUksS0FBSyxZQUFMLENBQWtCLEtBQXRCLEVBQTZCO0FBQzNCLFFBQU0sUUFBUSxLQUFLLFlBQUwsQ0FBa0IsS0FBaEM7QUFDQSxRQUFNLFVBQVUsTUFBRyxFQUFFLDZDQUFGLENBQUgsR0FBc0QsS0FBdEQsRUFBOEQsV0FBOUQsRUFBaEI7QUFDQSxTQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLE9BQW5CLEdBQTZCLHVCQUF1QixLQUFLLFdBQUwsQ0FBaUIsTUFBakIsR0FBMEIsT0FBMUIsR0FBb0MsYUFBcEMsRUFBdkIsS0FBK0UsS0FBNUc7QUFDQSxRQUFJLFFBQUosQ0FBYSxDQUFDLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsT0FBakMsRUFBMEMsT0FBMUM7QUFDQSxRQUFNLE1BQU0sU0FBTixHQUFNLENBQUMsS0FBRCxFQUFXO0FBQ3JCLGFBQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsT0FBbkIsR0FBNkIsdUJBQXVCLE1BQU0sTUFBTixDQUFhLGFBQWIsRUFBdkIsS0FBd0QsS0FBckY7QUFDQSxVQUFJLFFBQUosQ0FBYSxDQUFDLE9BQUssS0FBTCxDQUFXLE9BQVgsQ0FBbUIsT0FBakMsRUFBMEMsT0FBMUM7QUFDRCxLQUhEO0FBSUEsU0FBSyxXQUFMLENBQWlCLE1BQWpCLEdBQTBCLE9BQTFCLEdBQW9DLEVBQXBDLENBQXVDLG1CQUF2QyxFQUE0RCxHQUE1RDtBQUNBLFNBQUssbUJBQUwsR0FBMkIsWUFBTTtBQUMvQixVQUFJLFFBQUosQ0FBYSxLQUFiO0FBQ0EsYUFBSyxXQUFMLENBQWlCLE1BQWpCLEdBQTBCLE9BQTFCLEdBQW9DLEVBQXBDLENBQXVDLG1CQUF2QyxFQUE0RCxHQUE1RDtBQUNELEtBSEQ7QUFJRDtBQUNGLENBaEJEOztBQWtCQSxNQUFNLGVBQU4sR0FBd0IsWUFBVztBQUNqQyxPQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLE9BQW5CLEdBQTZCLElBQTdCO0FBQ0EsT0FBSyxtQkFBTCxJQUE0QixLQUFLLG1CQUFMLEVBQTVCO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLFVBQU4sR0FBbUIsVUFBUyxPQUFULEVBQWtCO0FBQ25DLE9BQUssS0FBTCxDQUFXLE9BQVgsR0FBcUIsT0FBckI7QUFDRCxDQUZEOztBQUlBLE1BQU0sVUFBTixHQUFtQixZQUFXO0FBQzVCLFNBQU8sS0FBSyxLQUFMLENBQVcsT0FBbEI7QUFDRCxDQUZEOztBQUlBLE1BQU0sWUFBTixHQUFxQixZQUFXO0FBQzlCLE9BQUssVUFBTCxDQUFnQixJQUFoQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxvQkFBTixHQUE2QixZQUFXO0FBQ3RDLE9BQUssZ0JBQUw7QUFDQSxPQUFLLFlBQUw7QUFDRCxDQUhEOztBQUtBLE1BQU0sS0FBTixHQUFjLFlBQVc7QUFDdkIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxFQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxLQUFOLEdBQWMsVUFBUyxFQUFULEVBQWE7QUFDekIsT0FBSyxLQUFMLENBQVcsRUFBWCxHQUFnQixFQUFoQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxRQUFOLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxLQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxRQUFOLEdBQWlCLFVBQVMsS0FBVCxFQUFlO0FBQzlCLE9BQUssS0FBTCxDQUFXLFdBQVgsR0FBeUIsSUFBekI7QUFDQSxPQUFLLEtBQUwsQ0FBVyxLQUFYLEdBQW1CLEtBQW5CO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLFFBQU4sR0FBaUIsWUFBVztBQUMxQixTQUFPLEtBQUssS0FBTCxDQUFXLEtBQWxCO0FBQ0QsQ0FGRDs7QUFJQTs7OztBQUlBLE1BQU0sVUFBTixHQUFtQixZQUFvQjtBQUFBLE1BQVgsSUFBVyx1RUFBTixJQUFNOztBQUNyQyxPQUFLLFNBQUwsQ0FBZSxJQUFmO0FBQ0EsT0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixFQUFuQixHQUF3QixJQUF4QjtBQUNBLE9BQUssV0FBTCxDQUFpQixJQUFqQjtBQUNELENBSkQ7O0FBTUEsTUFBTSxTQUFOLEdBQWtCLFlBQVc7QUFDM0IsU0FBTyxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLEVBQTFCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFNBQU4sR0FBa0IsWUFBVztBQUMzQixTQUFPLEtBQUssS0FBTCxDQUFXLE9BQWxCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFNBQU4sR0FBa0IsWUFBcUI7QUFBQSxNQUFaLElBQVksdUVBQVAsS0FBTzs7QUFDckMsT0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixJQUFyQjtBQUNBLFNBQU8sS0FBSyxLQUFMLENBQVcsT0FBbEI7QUFDRCxDQUhEOztBQUtBLE1BQU0sU0FBTixHQUFrQixZQUFXO0FBQzNCLFNBQU8sS0FBSyxLQUFMLENBQVcsT0FBbEI7QUFDRCxDQUZEOztBQUlBLE1BQU0sT0FBTixHQUFnQixZQUFXO0FBQ3pCLFNBQU8sS0FBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixPQUFuQixDQUEyQixNQUFsQztBQUNELENBRkQ7O0FBSUEsTUFBTSxVQUFOLEdBQW1CLFlBQVc7QUFDNUIsU0FBTyxLQUFLLEtBQUwsQ0FBVyxRQUFsQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxXQUFOLEdBQW9CLFlBQXFCO0FBQUEsTUFBWixJQUFZLHVFQUFQLEtBQU87O0FBQ3ZDLE9BQUssS0FBTCxDQUFXLFFBQVgsR0FBc0IsSUFBdEI7QUFDQSxPQUFLLEtBQUwsQ0FBVyxRQUFYLEdBQXNCLEtBQUssUUFBTCxFQUF0QixHQUF3QyxLQUFLLGVBQUwsRUFBeEM7QUFDRCxDQUhEOztBQUtBLE1BQU0sUUFBTixHQUFpQixZQUFXO0FBQzFCLFNBQU8sS0FBSyxNQUFaO0FBQ0QsQ0FGRDs7QUFJQTs7Ozs7O0FBTUEsTUFBTSxXQUFOLEdBQW9CLFVBQVMsTUFBVCxFQUFpQjtBQUNuQyxTQUFPLEtBQUssTUFBTCxDQUFZLElBQVosQ0FBaUI7QUFBQSxXQUFRLFdBQVcsS0FBSyxLQUFMLEVBQW5CO0FBQUEsR0FBakIsQ0FBUDtBQUNELENBRkQ7O0FBSUE7Ozs7QUFJQSxNQUFNLGFBQU4sR0FBc0IsVUFBUyxNQUFULEVBQWdCO0FBQ3BDLE1BQU0sT0FBTyxLQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCO0FBQUEsV0FBUSxLQUFLLEtBQUwsT0FBaUIsTUFBekI7QUFBQSxHQUFqQixDQUFiO0FBQ0EsT0FBSyxVQUFMLENBQWdCLElBQWhCO0FBQ0QsQ0FIRDs7QUFLQTs7Ozs7QUFLQSxNQUFNLGlCQUFOLEdBQTBCLFlBQTREO0FBQUEsa0ZBQUgsRUFBRztBQUFBLDBCQUFsRCxLQUFrRDtBQUFBLE1BQWxELEtBQWtELCtCQUE1QyxFQUE0QztBQUFBLDRCQUF4QyxPQUF3QztBQUFBLE1BQXhDLE9BQXdDLGlDQUFoQyxFQUFDLHFCQUFxQixJQUF0QixFQUFnQzs7QUFBQSw4QkFDaEQsT0FEZ0QsQ0FDN0UsbUJBRDZFO0FBQUEsTUFDN0UsbUJBRDZFLHlDQUN6RCxLQUR5RDs7QUFFcEYsTUFBTSwyQkFBMkIsQ0FBQyxZQUFELEVBQWUsZ0JBQWYsRUFBaUMsYUFBakMsRUFBZ0QsWUFBaEQsQ0FBakM7QUFDQSxNQUFNLFlBQVksS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixnQkFBUTtBQUMzQyxXQUFPLHNCQUNMLEtBQUssT0FBTCxHQUFlLElBQWYsQ0FBb0I7QUFBQSxhQUFRLFNBQVEsYUFBaEI7QUFBQSxLQUFwQixDQURLLEdBRUwseUJBQXlCLE9BQXpCLENBQWlDLEtBQUssS0FBTCxFQUFqQyxNQUFtRCxDQUFDLENBRnREO0FBR0QsR0FKaUIsRUFJZixHQUplLENBSVgsZ0JBQVE7QUFDWCxRQUFNLEtBQUssS0FBSyxLQUFMLEVBQVg7QUFDQSxXQUFPO0FBQ0wsWUFESztBQUVMLGVBQVMsTUFBTSxFQUFOO0FBRkosS0FBUDtBQUlILEdBVmlCLENBQWxCOztBQVlBLE9BQUssdUJBQUwsQ0FBNkI7QUFDM0IsYUFBUztBQURrQixHQUE3Qjs7QUFJQSxPQUFLLFdBQUwsQ0FBaUIsSUFBakI7QUFDRCxDQXBCRDs7QUFzQkE7OztBQUdBLE1BQU0sb0JBQU4sR0FBNkIsaUJBQTBFO0FBQUEsMEJBQWhFLEtBQWdFO0FBQUEsTUFBaEUsS0FBZ0UsK0JBQTFELEVBQTBEO0FBQUEsaUNBQXRELFlBQXNEO0FBQUEsTUFBdEQsWUFBc0Qsc0NBQXpDLEVBQXlDO0FBQUEsNEJBQXJDLE9BQXFDO0FBQUEsTUFBckMsT0FBcUMsaUNBQTdCLEVBQUMscUJBQXFCLElBQXRCLEVBQTZCO0FBQUEsK0JBQ2pFLE9BRGlFLENBQzlGLG1CQUQ4RjtBQUFBLE1BQzlGLG1CQUQ4RiwwQ0FDMUUsS0FEMEU7O0FBRXJHLE1BQU0sOEJBQThCLENBQUMsZ0JBQUQsRUFBbUIsYUFBbkIsRUFBa0MsWUFBbEMsQ0FBcEM7QUFDQSxNQUFNLGVBQWUsS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixnQkFBUTtBQUM5QztBQUNBLFFBQUksYUFBYSxPQUFiLENBQXFCLEtBQUssS0FBTCxFQUFyQixNQUF1QyxDQUFDLENBQTVDLEVBQStDLE9BQU8sS0FBUDtBQUMvQyxXQUFPLHNCQUNMLEtBQUssT0FBTCxHQUFlLElBQWYsQ0FBb0I7QUFBQSxhQUFRLFNBQVEsZ0JBQVIsSUFBNEIsU0FBUSxxQkFBNUM7QUFBQSxLQUFwQixDQURLLEdBRUwsNEJBQTRCLE9BQTVCLENBQW9DLEtBQUssS0FBTCxFQUFwQyxNQUFzRCxDQUFDLENBRnpEO0FBR0QsR0FOb0IsRUFNbEIsR0FOa0IsQ0FNZCxnQkFBUTtBQUNiLFFBQU0sS0FBSyxLQUFLLEtBQUwsRUFBWDtBQUNBLFdBQU87QUFDTCxZQURLO0FBRUwsZUFBUyxNQUFNLEVBQU47QUFGSixLQUFQO0FBSUQsR0Fab0IsQ0FBckI7O0FBY0EsT0FBSyx1QkFBTCxDQUE2QjtBQUMzQixhQUFTO0FBRGtCLEdBQTdCO0FBR0EsT0FBSyxXQUFMLENBQWlCLElBQWpCO0FBQ0QsQ0FyQkQ7O0FBdUJBOzs7O0FBSUEsTUFBTSxvQkFBTixHQUE2QixZQUFvQjtBQUMvQzs7QUFEK0MsTUFBWCxPQUFXLHVFQUFILEVBQUc7QUFFaEQsQ0FGRDs7QUFJQTs7Ozs7QUFLQSxNQUFNLHVCQUFOLEdBQWdDLFVBQVMsS0FBVCxFQUFlO0FBQUE7O0FBQzdDLE1BQUksS0FBSixFQUFVO0FBQ1IsU0FBSyxLQUFMLENBQVcsYUFBWCxHQUEyQixJQUEzQjtBQUNBO0FBRlEseUJBR21ELEtBSG5ELENBR0QsT0FIQztBQUFBLFFBR08sV0FIUCxrQ0FHbUIsRUFIbkI7QUFBQSwwQkFHbUQsS0FIbkQsQ0FHdUIsUUFIdkI7QUFBQSxRQUdnQyxZQUhoQyxtQ0FHNkMsRUFIN0M7O0FBSVIsUUFBTSxVQUFVLFlBQVksTUFBWixHQUFxQixFQUFyQixHQUEwQixLQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCO0FBQUEsYUFBUSxLQUFLLEtBQUwsRUFBUjtBQUFBLEtBQWhCLENBQTFDO0FBQ0EsZ0JBQVksT0FBWixDQUFvQixpQkFBc0I7QUFBQSxVQUFwQixFQUFvQixTQUFwQixFQUFvQjtBQUFBLGdDQUFoQixPQUFnQjtBQUFBLFVBQWhCLE9BQWdCLGlDQUFSLEVBQVE7O0FBQ3hDO0FBQ0EsVUFBTSxPQUFNLFFBQUssV0FBTCxDQUFpQixFQUFqQixDQUFaO0FBQ0EsVUFBSSxJQUFKLEVBQVU7QUFBQSw4QkFDZSxPQURmLENBQ0QsTUFEQztBQUFBLFlBQ0QsTUFEQyxtQ0FDTSxLQUROOztBQUVSLGFBQUssVUFBTCxDQUFnQixPQUFoQjtBQUNBLGFBQUssU0FBTCxNQUFvQixRQUFRLElBQVIsQ0FBYSxFQUFiLENBQXBCO0FBQ0Esa0JBQVUsUUFBSyxhQUFMLENBQW1CLElBQW5CLENBQVY7QUFDQSxZQUFJLFFBQUssYUFBTCxLQUF1QixTQUEzQixFQUFzQyxRQUFLLGFBQUwsR0FBcUIsRUFBckI7QUFDdEMsZ0JBQUssYUFBTCxDQUFtQixJQUFuQixDQUF3QixJQUF4QjtBQUNEO0FBQ0YsS0FYRDtBQVlBO0FBQ0EsaUJBQWEsT0FBYixDQUFxQixpQkFBa0I7QUFBQSxVQUFoQixFQUFnQixTQUFoQixFQUFnQjtBQUFBLFVBQVosT0FBWSxTQUFaLE9BQVk7O0FBQ3JDLFVBQU0sT0FBTyxRQUFLLFdBQUwsQ0FBaUIsRUFBakIsQ0FBYjtBQUNBLFVBQUksSUFBSixFQUFTO0FBQ1AsWUFBSSxRQUFLLGNBQUwsS0FBd0IsU0FBNUIsRUFBdUMsUUFBSyxjQUFMLEdBQXNCLEVBQXRCO0FBQ3ZDLGdCQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBeUIsRUFBekI7QUFDQTtBQUNBLGdCQUFRLElBQVIsQ0FBYSxFQUFiO0FBQ0Q7QUFDRixLQVJEO0FBU0E7QUFDQSxTQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CO0FBQUEsYUFBUSxDQUFDLFFBQVEsUUFBUixDQUFpQixLQUFLLEtBQUwsRUFBakIsQ0FBRCxJQUFtQyxLQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsQ0FBM0M7QUFBQSxLQUFwQjtBQUNBLFNBQUssS0FBTCxDQUFXLGFBQVgsR0FBMkIsS0FBM0I7QUFDRDtBQUNGLENBaENEOztBQWtDQTtBQUNBLE1BQU0sV0FBTixHQUFvQixZQUFxQjtBQUFBLE1BQVosSUFBWSx1RUFBUCxLQUFPOztBQUN2QyxNQUFNLFFBQVEsS0FBSyxhQUFMLElBQXNCLEtBQUssTUFBekM7QUFDQSxNQUFNLGdCQUFnQixLQUFLLGNBQUwsSUFBdUIsRUFBN0M7QUFDQSxRQUFNLE9BQU4sQ0FBYyxnQkFBUTtBQUFBLGdDQUNrQixJQURsQixDQUNaLFVBRFksQ0FDQSxPQURBO0FBQUEsUUFDQSxPQURBLHlDQUNRLElBRFI7O0FBRXBCLFFBQU0sYUFBYSxRQUFRLGNBQWMsTUFBdEIsR0FBK0IsY0FBYyxPQUFkLENBQXNCLEtBQUssS0FBTCxFQUF0QixNQUF3QyxDQUFDLENBQXhFLEdBQTRFLFVBQVUsT0FBVixNQUF1QixTQUF2QixHQUFtQyxPQUFuQyxHQUE2QyxRQUFRO0FBQ2xKLGdCQURrSjtBQUVsSjtBQUZrSixLQUFSLENBQTVJO0FBSUEsU0FBSyxVQUFMLENBQWdCLFVBQWhCO0FBQ0EsS0FBQyxJQUFELElBQVMsS0FBSyxTQUFMLENBQWUsSUFBZixDQUFUO0FBQ0QsR0FSRDtBQVNELENBWkQ7O0FBY0EsTUFBTSxhQUFOLEdBQXNCLFVBQVMsSUFBVCxFQUFlO0FBQUE7O0FBQ25DLE9BQUssY0FBTCxDQUFvQixJQUFwQixFQUNHLElBREgsQ0FDUSxZQUFNO0FBQ1YsWUFBSyxnQkFBTDtBQUNBLFlBQUssS0FBTCxDQUFXLFVBQVgsR0FBd0IsSUFBeEI7QUFDQSxTQUFLLElBQUwsQ0FBVSxnQkFBVixFQUE0QjtBQUFBLGFBQVMsTUFBTSxPQUFOLENBQWM7QUFBQSxlQUFRLFFBQUssS0FBTCxDQUFXLFdBQVgsQ0FBdUIsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBUjtBQUFBLE9BQWQsQ0FBVDtBQUFBLEtBQTVCO0FBQ0EsUUFBTSw2QkFBNkIsU0FBN0IsMEJBQTZCLENBQUMsV0FBRCxFQUFjLE1BQWQsRUFBeUI7QUFDMUQsY0FBSyxLQUFMLENBQVcsV0FBWCxDQUF1QixPQUF2QixDQUErQixzQkFBYztBQUMzQyxZQUFJLFlBQVksT0FBWixDQUFvQixXQUFXLElBQS9CLE1BQXlDLENBQUMsQ0FBOUMsRUFBaUQsV0FBVyxPQUFYLENBQW1CLE1BQW5CLEdBQTRCLE1BQTVCO0FBQ2xELE9BRkQ7QUFHRCxLQUpEOztBQU1BLFNBQUssRUFBTCxDQUFRLFFBQVIsRUFBa0I7QUFBQSxVQUFDLFdBQUQsdUVBQWEsRUFBYjtBQUFBLGFBQW9CLDJCQUEyQixXQUEzQixFQUF3QyxJQUF4QyxDQUFwQjtBQUFBLEtBQWxCO0FBQ0EsU0FBSyxFQUFMLENBQVEsVUFBUixFQUFvQjtBQUFBLFVBQUMsV0FBRCx1RUFBYSxFQUFiO0FBQUEsYUFBb0IsMkJBQTJCLFdBQTNCLEVBQXdDLEtBQXhDLENBQXBCO0FBQUEsS0FBcEI7O0FBRUEsUUFBTSxjQUFjLFFBQUssV0FBTCxDQUFpQixXQUFqQixFQUFwQjtBQUNBLFNBQUssS0FBTCxDQUFXLFdBQVg7QUFDQSxRQUFNLFVBQVUsUUFBSyxjQUFMLEVBQWhCO0FBQ0EsWUFBSyxjQUFMLENBQW9CLE9BQXBCO0FBQ0QsR0FsQkg7QUFtQkQsQ0FwQkQ7O0FBc0JBLE1BQU0sZ0JBQU4sR0FBeUIsWUFBVztBQUNsQyxPQUFLLEtBQUwsQ0FBVyxXQUFYLENBQXVCLE1BQXZCLENBQThCLENBQTlCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGFBQU4sR0FBc0IsWUFBVztBQUMvQixTQUFPLEtBQUssS0FBTCxDQUFXLFVBQWxCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsTUFBTSxhQUFhLEtBQUssYUFBTCxFQUFuQjtBQUNBLE9BQUssY0FBTDtBQUNBLE9BQUssYUFBTCxDQUFtQixVQUFuQjtBQUNELENBSkQ7O0FBTUEsTUFBTSxjQUFOLEdBQXVCLFVBQVMsSUFBVCxFQUFlO0FBQUE7O0FBQ3BDLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQU0sYUFBYSxLQUFLLGFBQUwsRUFBbkI7QUFDQSxNQUFJLGNBQWMsZUFBZSxJQUFqQyxFQUF1QztBQUNyQyxlQUFXLGtCQUFYO0FBQ0EsZUFBVyxJQUFYLENBQWdCLElBQWhCLEVBQ0csSUFESCxDQUNRLFlBQU07QUFDVixjQUFLLGdCQUFMO0FBQ0EsY0FBSyxnQkFBTDtBQUNBLGNBQUssS0FBTCxDQUFXLFVBQVgsR0FBd0IsSUFBeEI7QUFDQSxpQkFBVyxFQUFFLE9BQWI7QUFDRCxLQU5IO0FBT0QsR0FURCxNQVNPO0FBQ0wsV0FBTyxLQUFLLGtCQUFMLEVBQVAsR0FBa0MsSUFBbEM7QUFDQSxNQUFFLE9BQUY7QUFDRDtBQUNELFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQWpCRDs7QUFtQkEsTUFBTSxnQkFBTixHQUF5QixZQUFXO0FBQ2xDLE9BQUssS0FBTCxDQUFXLFlBQVgsQ0FBd0IsSUFBeEIsR0FBK0IsSUFBL0I7QUFDRCxDQUZEOztBQUlBLE1BQU0sY0FBTixHQUF1QixZQUFXO0FBQ2hDLE1BQU0sT0FBTyxLQUFLLGFBQUwsRUFBYjtBQUNBLFNBQU8sS0FBSyxVQUFMLEVBQVA7QUFDRCxDQUhEOztBQUtBLE1BQU0sY0FBTixHQUF1QixZQUFzQjtBQUFBLE1BQWIsUUFBYSx1RUFBSixFQUFJOztBQUMzQyxPQUFLLEtBQUwsQ0FBVyxZQUFYLENBQXdCLElBQXhCLEdBQStCLFlBQVksU0FBUyxJQUFyQixJQUE2QixJQUE1RDtBQUNELENBRkQ7O0FBSUEsTUFBTSxVQUFOLEdBQW1CLFlBQVc7QUFDNUIsU0FBTyxLQUFLLFFBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sU0FBTixHQUFrQixZQUFXO0FBQzNCLFNBQU8sS0FBSyxPQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFNBQU4sR0FBa0IsVUFBUyxNQUFULEVBQWlCO0FBQ2pDLE9BQUssT0FBTCxHQUFlLE1BQWY7QUFDRCxDQUZEOztBQUlBLE1BQU0sV0FBTixHQUFvQixZQUFXO0FBQzdCLFNBQU8sS0FBSyxNQUFMLENBQVksV0FBWixFQUFQO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFVBQU4sR0FBbUIsWUFBVztBQUM1QixTQUFPLEtBQUssTUFBTCxDQUFZLFVBQVosRUFBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSxZQUFOLEdBQXFCLFlBQVc7QUFDOUIsU0FBTyxLQUFLLE1BQUwsQ0FBWSxZQUFaLEVBQVA7QUFDRCxDQUZEOztBQUlBOzs7QUFHQSxNQUFNLFlBQU4sR0FBcUIsWUFBVTtBQUM3QixPQUFLLEtBQUwsQ0FBVyxLQUFYLEdBQW1CLEtBQUssYUFBTCxDQUFtQixLQUF0QztBQUNBLE9BQUssS0FBTCxDQUFXLGFBQVgsR0FBMkIsSUFBM0I7QUFDQSxPQUFLLEtBQUwsQ0FBVyxnQkFBWCxHQUE4QixJQUE5QjtBQUNBLE9BQUssV0FBTCxHQUFtQjtBQUNqQixZQUFRLElBRFM7QUFFakIsVUFBTSxJQUZXO0FBR2pCLFdBQU87QUFIVSxHQUFuQjs7QUFNQSxNQUFJLEtBQUssYUFBVCxFQUF1QjtBQUNyQixTQUFLLGFBQUwsR0FBcUIsU0FBckI7QUFDQSxTQUFLLFdBQUw7QUFDQSxTQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CO0FBQUEsYUFBUSxLQUFLLFlBQUwsRUFBUjtBQUFBLEtBQXBCO0FBQ0Q7QUFDRCxPQUFLLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxPQUFLLE9BQUwsQ0FBYSxJQUFiO0FBQ0QsQ0FqQkQ7O0FBbUJBLE9BQU8sT0FBUCxHQUFpQixPQUFqQjs7O0lDdnhCUSxLLEdBQVUsT0FBTyxJQUFQLENBQVksSyxDQUF0QixLOztBQUNSLElBQU0sbUJBQW1CLFFBQVEsZ0JBQVIsQ0FBekI7QUFDQSxJQUFNLFVBQVUsUUFBUSxXQUFSLENBQWhCOztBQUVBLFNBQVMsc0JBQVQsR0FBa0M7QUFDaEMsT0FBSyxLQUFMLEdBQWEsVUFBUyxLQUFULEVBQTRCO0FBQUEsUUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3ZDO0FBQ0EsUUFBTSxjQUFjLE1BQU0sb0JBQU4sRUFBcEI7QUFDQTtBQUNBLFFBQU0sZUFBZSxNQUFNLHNCQUFOLEVBQXJCO0FBQ0EsUUFBTSxPQUFPLE1BQU0sT0FBTixFQUFiO0FBQ0EsUUFBTSxLQUFLLE1BQU0sS0FBTixFQUFYO0FBQ0EsUUFBTSxRQUFRLE1BQU0sUUFBTixFQUFkO0FBQ0EsUUFBSSxRQUFRLEVBQVo7QUFDQSxZQUFRLElBQVI7QUFDRSxXQUFLLE1BQU0sVUFBTixDQUFpQixNQUF0QjtBQUNFLFlBQU0sZUFBZSxNQUFNLGVBQU4sRUFBckI7QUFDQSxnQkFBUSxpQkFBaUIsS0FBakIsQ0FBdUI7QUFDN0Isc0JBRDZCO0FBRTdCLHdCQUFjLFlBRmU7QUFHN0Isb0JBSDZCO0FBSTdCO0FBSjZCLFNBQXZCLENBQVI7QUFNQTtBQUNGLFdBQUssTUFBTSxVQUFOLENBQWlCLEtBQXRCO0FBQ0UsZ0JBQVEsaUJBQWlCLEtBQWpCLENBQXVCO0FBQzdCLHNCQUQ2QjtBQUU3QixvQkFGNkI7QUFHN0I7QUFINkIsU0FBdkIsQ0FBUjtBQUtBO0FBQ0Y7QUFDRTtBQWxCSjtBQW9CQSxXQUFPLElBQUksT0FBSixDQUFZO0FBQ2pCLFlBRGlCO0FBRWpCLGtCQUZpQjtBQUdqQixnQkFIaUI7QUFJakIsa0JBSmlCO0FBS2pCLGtCQUxpQjtBQU1qQixnQkFBVSx1QkFOTztBQU9qQixtQkFBVyxNQUFNLE9BQU4sRUFQTTtBQVFqQjtBQVJpQixLQUFaLENBQVA7QUFVRCxHQXZDRDtBQXdDRDs7QUFFRCxPQUFPLE9BQVAsR0FBaUIsSUFBSSxzQkFBSixFQUFqQjs7Ozs7SUMvQ1EsSyxHQUFVLE9BQU8sSUFBUCxDQUFZLEssQ0FBdEIsSztJQUNBLFEsR0FBYSxPQUFPLElBQVAsQ0FBWSxRLENBQXpCLFE7SUFDQSxHLEdBQVEsT0FBTyxHLENBQWYsRztJQUVOLHNCLEdBQ0UsT0FBTyxJQUFQLENBQVksUSxDQURkLHNCOztBQUVGLElBQU0sT0FBTyxRQUFRLFFBQVIsQ0FBYjtBQUNBLElBQU0scUJBQXFCLFFBQVEsaUNBQVIsQ0FBM0I7QUFDQSxJQUFNLCtCQUErQixRQUFRLDJDQUFSLENBQXJDO0FBQ0EsSUFBTSxzQkFBc0IsUUFBUSxrQ0FBUixDQUE1QjtBQUNBLElBQU0sd0JBQXdCLFFBQVEsb0NBQVIsQ0FBOUI7QUFDQSxJQUFNLGdDQUFnQyxRQUFRLDRDQUFSLENBQXRDO0FBQ0EsSUFBTSw0QkFBNEIsUUFBUSxnQ0FBUixDQUFsQztBQUNBLElBQU0seUJBQXlCLFFBQVEsc0NBQVIsQ0FBL0I7QUFDQSxJQUFNLHNCQUFzQixRQUFRLG1DQUFSLENBQTVCO0FBQ0EsSUFBTSx1QkFBdUIsUUFBUSxtQ0FBUixDQUE3QjtBQUNBLElBQU0sd0JBQXdCLFFBQVEsb0NBQVIsQ0FBOUI7QUFDQSxJQUFNLG1DQUFtQyxRQUFRLCtDQUFSLENBQXpDO0FBQ0EsSUFBTSx3Q0FBd0MsUUFBUSxvREFBUixDQUE5QztBQUNBLElBQU0scUNBQXFDLFFBQVEsaURBQVIsQ0FBM0M7QUFDQSxJQUFNLHVDQUF1QyxRQUFRLG9EQUFSLENBQTdDO0FBQ0EsSUFBTSxxQ0FBcUMsUUFBUSxpREFBUixDQUEzQzs7QUFFQSxTQUFTLGtCQUFULEdBQThCO0FBQzVCOzs7Ozs7QUFNQSxPQUFLLFdBQUwsR0FBbUIsZ0JBQXNEO0FBQUEsUUFBNUMsSUFBNEMsUUFBNUMsSUFBNEM7QUFBQSxRQUF0QyxlQUFzQyxRQUF0QyxlQUFzQztBQUFBLFFBQXJCLEtBQXFCLFFBQXJCLEtBQXFCO0FBQUEsUUFBZCxZQUFjLFFBQWQsWUFBYzs7QUFDdkUsUUFBSSxRQUFRLEVBQVo7QUFDQSxRQUFNLGFBQWEsSUFBSSxVQUFKLENBQWUsS0FBZixDQUFuQjtBQUNBLFlBQVEsSUFBUjtBQUNFLFdBQUssT0FBTDtBQUNFLGlCQUNFO0FBQ0Usa0JBQVE7QUFDTixnQkFBSSxZQURFO0FBRU4sa0JBQU0sMkJBRkE7QUFHTixrQkFBTSxjQUhBO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sZ0JBQUksa0JBTkU7QUFPTixrQkFBTSxDQUFDLGFBQUQ7QUFQQTtBQURWLFNBREYsRUFZRTtBQUNFLGtCQUFPO0FBQ0wsZ0JBQUksZ0JBREM7QUFFTCxrQkFBTSw4QkFGRDtBQUdMLGtCQUFNLG9CQUhEO0FBSUwsd0JBSks7QUFLTCxpQkFBSyxDQUxBO0FBTUwsZ0JBQUksNkJBTkM7QUFPTCxrQkFBTSxDQUFDLHFCQUFEO0FBUEQ7QUFEVCxTQVpGLEVBdUJFO0FBQ0Usa0JBQVE7QUFDTixnQkFBSSxlQURFO0FBRU4sa0JBQU0sOEJBRkE7QUFHTixrQkFBTSxpQkFIQTtBQUlOLHdCQUpNO0FBS04saUJBQUssQ0FMQztBQU1OLGdCQUFJLHFCQU5FO0FBT04sa0JBQU0sQ0FBQyxnQkFBRDtBQVBBO0FBRFYsU0F2QkYsRUFrQ0U7QUFDRSxrQkFBUTtBQUNOLGdCQUFJLHFCQURFO0FBRU4sa0JBQU0scUNBRkE7QUFHTixrQkFBTSx5QkFIQTtBQUlOLHdCQUpNO0FBS04saUJBQUssQ0FMQztBQU1OLGtCQUFNLElBTkE7QUFPTixnQkFBSSxrQ0FQRTtBQVFOLGtCQUFNLENBQUMscUJBQUQ7QUFSQTtBQURWLFNBbENGLEVBOENFO0FBQ0Usa0JBQVE7QUFDTixnQkFBSSxhQURFO0FBRU4sa0JBQU0sNEJBRkE7QUFHTixrQkFBTSxlQUhBO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sZ0JBQUksbUJBTkU7QUFPTixrQkFBTSxDQUFDLGdCQUFEO0FBUEE7QUFEVixTQTlDRixFQXlERTtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksNEJBREU7QUFFTixrQkFBTSw0Q0FGQTtBQUdOLGtCQUFNLGtDQUhBO0FBSU4sd0JBSk07QUFLTixrQkFBTSxJQUxBO0FBTU4sd0JBQVk7QUFDVix1QkFBVSxZQUFVO0FBQ2xCLG9CQUFNLFVBQVUsTUFBTSxLQUFOLEVBQWhCO0FBQ0Esb0JBQU0sZUFBZSxNQUFNLGVBQU4sRUFBckI7QUFDQSxvQkFBTSx1QkFBdUIsV0FBVyxjQUFYLENBQTBCLGNBQTFCLENBQXlDLFNBQXpDLEVBQTdCO0FBQ0Esb0JBQU0sT0FBTztBQUNYLHdCQUFNLEtBREs7QUFFWCx3QkFBTTtBQUZLLGlCQUFiO0FBSUEsb0JBQU0sNkJBQTZCLFNBQTdCLDBCQUE2QixHQUFNO0FBQUEsc0JBQ2hDLElBRGdDLEdBQ2xCLElBRGtCLENBQ2hDLElBRGdDO0FBQUEsc0JBQzFCLElBRDBCLEdBQ2xCLElBRGtCLENBQzFCLElBRDBCOztBQUV2QyxzQkFBTSxpQkFBa0IscUJBQXFCLFdBQXJCLEdBQW1DLE1BQW5DLENBQTBDLG1CQUFXO0FBQzNFLHdCQUFNLHNCQUFzQixRQUFRLFdBQVIsTUFBeUIsUUFBUSxXQUFSLEdBQXNCLE9BQXRCLEVBQXJEO0FBQ0Esd0JBQUssUUFBUSxTQUFSLEtBQXNCLE9BQXZCLElBQW1DLHVCQUF1QixZQUF2QixFQUFxQyxtQkFBckMsQ0FBdkMsRUFBbUc7QUFDakcsNkJBQVEsaUJBQWlCLG1CQUFsQixJQUEwQyxTQUFTLGVBQVQsQ0FBeUIsWUFBekIsQ0FBMUMsSUFBb0YsQ0FBQyxTQUFTLGVBQVQsQ0FBeUIsbUJBQXpCLENBQTVGO0FBQ0Q7QUFDRCwyQkFBTyxLQUFQO0FBQWlDLG1CQUxYLENBQXhCO0FBTUEsc0JBQU0sVUFBVSxRQUFRLGVBQWUsTUFBZixHQUF3QixDQUFoRDtBQUNBLHVCQUFLLFVBQUwsQ0FBZ0IsT0FBaEI7QUFDQSx5QkFBTyxPQUFQO0FBQ0QsaUJBWEQ7QUFZQSx1QkFBTyxpQkFBbUI7QUFBQSxzQkFBakIsSUFBaUIsU0FBakIsSUFBaUI7QUFBQSx5Q0FBWCxJQUFXO0FBQUEsc0JBQVgsSUFBVyw4QkFBTixFQUFNOztBQUN4Qix1QkFBSyxJQUFMLEdBQVksSUFBWjtBQUNBLHVCQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0EsdUNBQXFCLE9BQU8sSUFBUCxHQUFjLElBQW5DLEVBQXlDLFlBQXpDLEVBQXVELDBCQUF2RDtBQUNBLHVDQUFxQixPQUFPLElBQVAsR0FBYyxJQUFuQyxFQUF5QyxlQUF6QyxFQUEwRCwwQkFBMUQ7QUFDQSx5QkFBTyw0QkFBUDtBQUNELGlCQU5EO0FBT0QsZUEzQlM7QUFEQSxhQU5OO0FBb0NOLGlCQUFLLENBcENDO0FBcUNOLGdCQUFJLGtDQXJDRTtBQXNDTixrQkFBTSxDQUFDLGFBQUQ7QUF0Q0E7QUFEVixTQXpERixFQW1HRTtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksY0FERTtBQUVOLGtCQUFNLG9CQUZBO0FBR04sa0JBQU0sZUFIQTtBQUlOLHdCQUpNO0FBS04sa0JBQU0sSUFMQTtBQU1OLGlCQUFLLENBTkM7QUFPTixnQkFBSSxtQkFQRTtBQVFOLGtCQUFNLENBQUMsYUFBRDtBQVJBO0FBRFYsU0FuR0YsNEJBK0dNLGtCQUFrQixDQUNwQjtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksU0FERTtBQUVOLGtCQUFNLHVCQUZBO0FBR04sa0JBQU0sYUFIQTtBQUlOLHdCQUpNO0FBS04sa0JBQU0sSUFMQTtBQU1OLGlCQUFLLENBTkM7QUFPTixnQkFBSSxnQ0FQRTtBQVFOLGtCQUFNLENBQUMsYUFBRCxFQUFnQixnQkFBaEI7QUFSQTtBQURWLFNBRG9CLENBQWxCLEdBYUEsRUE1SE4sc0JBNkhNLGtCQUFrQixDQUNwQjtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksWUFERTtBQUVOLGtCQUFNLDBCQUZBO0FBR04sa0JBQU0sZ0JBSEE7QUFJTix3QkFKTTtBQUtOLGlCQUFLLENBTEM7QUFNTixnQkFBSSxxQ0FORTtBQU9OLGtCQUFNLENBQUMsZ0JBQUQ7QUFQQTtBQURWLFNBRG9CLENBQWxCLEdBWUEsRUF6SU47QUEySUE7QUFDRixXQUFLLE1BQUw7QUFDQSxXQUFLLFNBQUw7QUFDRSxpQkFDRTtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksWUFERTtBQUVOLGtCQUFNLDJCQUZBO0FBR04sMEJBQVksSUFBWixTQUhNO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sZ0JBQUksa0JBTkU7QUFPTixrQkFBTSxDQUFDLGFBQUQ7QUFQQTtBQURWLFNBREYsRUFZRTtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksZ0JBREU7QUFFTixrQkFBTSw4QkFGQTtBQUdOLGtCQUFNLG9CQUhBO0FBSU4sbUJBQU8sS0FKRDtBQUtOLGlCQUFLLENBTEM7QUFNTixnQkFBSSw2QkFORTtBQU9OLGtCQUFNLENBQUMscUJBQUQ7QUFQQTtBQURWLFNBWkYsRUF1QkU7QUFDRSxrQkFBUTtBQUNOLGdCQUFJLFlBREU7QUFFTixrQkFBTSw2QkFGQTtBQUdOLGtCQUFNLGdCQUhBO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sZ0JBQUksNEJBTkU7QUFPTixrQkFBTSxDQUFDLGdCQUFEO0FBUEE7QUFEVixTQXZCRixFQWtDRTtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksZUFERTtBQUVOLGtCQUFNLDhCQUZBO0FBR04sNkJBQWUsSUFBZixTQUhNO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sZ0JBQUkscUJBTkU7QUFPTixrQkFBTSxDQUFDLGdCQUFEO0FBUEE7QUFEVixTQWxDRixFQTZDRTtBQUNFLGtCQUFRO0FBQ04sZ0JBQUkscUJBREU7QUFFTixrQkFBTSxxQ0FGQTtBQUdOLGtCQUFNLHlCQUhBO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sa0JBQU0sSUFOQTtBQU9OLGdCQUFJLGtDQVBFO0FBUU4sa0JBQU0sQ0FBQyxxQkFBRDtBQVJBO0FBRFYsU0E3Q0YsRUF5REU7QUFDRSxrQkFBTztBQUNMLGdCQUFJLGFBREM7QUFFTCxrQkFBTSw0QkFGRDtBQUdMLDJCQUFhLElBQWIsU0FISztBQUlMLHdCQUpLO0FBS0wsaUJBQUssQ0FMQTtBQU1MLGdCQUFJLG1CQU5DO0FBT0wsa0JBQU0sQ0FBQyxnQkFBRDtBQVBEO0FBRFQsU0F6REYsRUFvRUU7QUFDRSxrQkFBUTtBQUNOLGdCQUFJLDRCQURFO0FBRU4sa0JBQU0sNENBRkE7QUFHTixrQkFBTSxrQ0FIQTtBQUlOLHdCQUpNO0FBS04sa0JBQU0sSUFMQTtBQU1OLHdCQUFZO0FBQ1YsdUJBQVUsWUFBVTtBQUNsQixvQkFBTSxVQUFVLE1BQU0sS0FBTixFQUFoQjtBQUNBLG9CQUFNLGVBQWUsTUFBTSxlQUFOLEVBQXJCO0FBQ0Esb0JBQU0sdUJBQXVCLFdBQVcsY0FBWCxDQUEwQixjQUExQixDQUF5QyxTQUF6QyxFQUE3QjtBQUNBLG9CQUFNLE9BQU87QUFDWCx3QkFBTSxLQURLO0FBRVgsd0JBQU07QUFGSyxpQkFBYjtBQUlBLG9CQUFNLDZCQUE2QixTQUE3QiwwQkFBNkIsR0FBTTtBQUFBLHNCQUNoQyxJQURnQyxHQUNsQixJQURrQixDQUNoQyxJQURnQztBQUFBLHNCQUMxQixJQUQwQixHQUNsQixJQURrQixDQUMxQixJQUQwQjs7QUFFdkMsc0JBQU0saUJBQWtCLHFCQUFxQixXQUFyQixHQUFtQyxNQUFuQyxDQUEwQyxtQkFBVztBQUMzRSx3QkFBTSxzQkFBc0IsUUFBUSxXQUFSLE1BQXlCLFFBQVEsV0FBUixHQUFzQixPQUF0QixFQUFyRDtBQUNBLHdCQUFLLFFBQVEsU0FBUixLQUFzQixPQUF2QixJQUFtQyx1QkFBdUIsWUFBdkIsRUFBcUMsbUJBQXJDLENBQXZDLEVBQW1HO0FBQ2pHLDZCQUFRLGlCQUFpQixtQkFBbEIsSUFBMEMsU0FBUyxlQUFULENBQXlCLFlBQXpCLENBQTFDLElBQW9GLENBQUMsU0FBUyxlQUFULENBQXlCLG1CQUF6QixDQUE1RjtBQUNEO0FBQ0QsMkJBQU8sS0FBUDtBQUNELG1CQU51QixDQUF4QjtBQU9BLHNCQUFNLFVBQVUsUUFBUSxlQUFlLE1BQWYsR0FBd0IsQ0FBaEQ7QUFDQSx1QkFBSyxVQUFMLENBQWdCLE9BQWhCO0FBQ0EseUJBQU8sT0FBUDtBQUNELGlCQVpEO0FBYUEsdUJBQU8saUJBQW1CO0FBQUEsc0JBQWpCLElBQWlCLFNBQWpCLElBQWlCO0FBQUEseUNBQVgsSUFBVztBQUFBLHNCQUFYLElBQVcsOEJBQU4sRUFBTTs7QUFDeEIsdUJBQUssSUFBTCxHQUFZLElBQVo7QUFDQSx1QkFBSyxJQUFMLEdBQVksSUFBWjtBQUNBLHVDQUFxQixPQUFPLElBQVAsR0FBYyxJQUFuQyxFQUF5QyxZQUF6QyxFQUF1RCwwQkFBdkQ7QUFDQSx1Q0FBcUIsT0FBTyxJQUFQLEdBQWMsSUFBbkMsRUFBeUMsZUFBekMsRUFBMEQsMEJBQTFEO0FBQ0EseUJBQU8sNEJBQVA7QUFDRCxpQkFORDtBQU9ELGVBNUJTO0FBREEsYUFOTjtBQXFDTixpQkFBSyxDQXJDQztBQXNDTixnQkFBSSxrQ0F0Q0U7QUF1Q04sa0JBQU0sQ0FBQyxhQUFEO0FBdkNBO0FBRFYsU0FwRUYsRUErR0U7QUFDRSxrQkFBUTtBQUNOLGdCQUFJLGNBREU7QUFFTixrQkFBTSxvQkFGQTtBQUdOLDJCQUFhLElBQWIsU0FITTtBQUlOLHdCQUpNO0FBS04saUJBQUssQ0FMQztBQU1OLGtCQUFNLElBTkE7QUFPTixnQkFBSSxtQkFQRTtBQVFOLGtCQUFNLENBQUMsYUFBRDtBQVJBO0FBRFYsU0EvR0YsNEJBMkhNLGtCQUFrQixDQUNwQjtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksU0FERTtBQUVOLGtCQUFNLHVCQUZBO0FBR04sa0JBQU0sYUFIQTtBQUlOLHdCQUpNO0FBS04saUJBQUssQ0FMQztBQU1OLGtCQUFNLElBTkE7QUFPTixnQkFBSSxnQ0FQRTtBQVFOLGtCQUFNLENBQUMsYUFBRCxFQUFnQixnQkFBaEI7QUFSQTtBQURWLFNBRG9CLENBQWxCLEdBYUEsRUF4SU4sc0JBeUlNLGtCQUFrQixDQUNwQjtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksWUFERTtBQUVOLGtCQUFNLDBCQUZBO0FBR04sa0JBQU0sZ0JBSEE7QUFJTix3QkFKTTtBQUtOLGlCQUFLLENBTEM7QUFNTixnQkFBSSxxQ0FORTtBQU9OLGtCQUFNLENBQUMsZ0JBQUQ7QUFQQTtBQURWLFNBRG9CLENBQWxCLEdBWUEsRUFySk4sSUFzSkU7QUFDRSxrQkFBUTtBQUNOLGdCQUFJLGNBREU7QUFFTixrQkFBTSxxQkFGQTtBQUdOLGtCQUFNLG1CQUhBO0FBSU4sd0JBSk07QUFLTixpQkFBSyxDQUxDO0FBTU4sa0JBQU0sSUFOQTtBQU9OLGdCQUFJLG9CQVBFO0FBUU4sa0JBQU8sQ0FBQyxnQkFBRDtBQVJEO0FBRFYsU0F0SkYsRUFrS0U7QUFDRSxrQkFBTztBQUNMLGdCQUFJLGVBREM7QUFFTCxrQkFBTSxxQkFGRDtBQUdMLGtCQUFNLG1CQUhEO0FBSUwsd0JBSks7QUFLTCxpQkFBSyxDQUxBO0FBTUwsa0JBQU0sSUFORDtBQU9MLGdCQUFJLHFCQVBDO0FBUUwsa0JBQU0sQ0FBQyxnQkFBRDtBQVJEO0FBRFQsU0FsS0YsRUE4S0U7QUFDRSxrQkFBTztBQUNMLGdCQUFJLDhCQURDO0FBRUwsa0JBQU0sNENBRkQ7QUFHTCxrQkFBTSw0QkFIRDtBQUlMLHdCQUpLO0FBS0wsaUJBQUssQ0FMQTtBQU1MLGtCQUFNLElBTkQ7QUFPTCxxQkFBUyx1QkFBUztBQUNoQixrQkFBTSxvQkFBb0IsS0FBSyxRQUFMLEdBQWdCLGVBQWhCLEVBQTFCO0FBQ0Esa0JBQU0seUNBQXlDLFNBQXpDLHNDQUF5QyxRQUFTO0FBQ3RELG9CQUFJLG1CQUFtQixJQUF2QjtBQUNBLG9CQUFNLE9BQU8sTUFBTSxPQUFOLEVBQWI7QUFDQTtBQUNBLG9CQUFJLFNBQVMsUUFBYixFQUF1QjtBQUNyQixzQkFBTSxXQUFXLE1BQU0sU0FBTixHQUFrQixXQUFsQixFQUFqQjtBQUNBLHNCQUFJLFNBQVMsTUFBYixFQUFxQjtBQUNuQix3QkFBTSxVQUFVLFNBQVMsQ0FBVCxDQUFoQjtBQUNBLHdCQUFNLGVBQWUsUUFBUSxXQUFSLEdBQXNCLE9BQXRCLEVBQXJCO0FBQ0EsdUNBQW1CLHVCQUF1QixZQUF2QixFQUFxQyxpQkFBckMsQ0FBbkI7QUFDRDtBQUNGO0FBQ0QsdUJBQU8sZ0JBQVA7QUFDRCxlQWJEO0FBY0EseUJBQVcsUUFBWCxDQUFvQixtQkFBcEIsRUFBMEM7QUFBQSx1QkFBUyxDQUFDLEtBQUssU0FBTCxFQUFELElBQXFCLEtBQUssVUFBTCxDQUFnQix1Q0FBdUMsS0FBdkMsQ0FBaEIsQ0FBOUI7QUFBQSxlQUExQztBQUNBLHlCQUFXLE9BQVgsQ0FBbUIscUJBQW5CLEVBQTBDLGlCQUFTO0FBQ2pELG9CQUFNLE9BQU8sTUFBTSxPQUFOLEVBQWI7QUFDQSxvQkFBSSxLQUFLLFNBQUwsTUFBb0IsU0FBUyxRQUFqQyxFQUEyQztBQUN6QyxzQkFBTSxXQUFXLE1BQU0sU0FBTixHQUFrQixXQUFsQixFQUFqQjtBQUNBLHNCQUFJLFNBQVMsTUFBYixFQUFxQjtBQUNuQix3QkFBTSxVQUFVLFNBQVMsQ0FBVCxDQUFoQjtBQUNBLHdCQUFNLGVBQWUsUUFBUSxXQUFSLEdBQXNCLE9BQXRCLEVBQXJCO0FBQ0Esd0JBQUksdUJBQXVCLFlBQXZCLEVBQXFDLGlCQUFyQyxDQUFKLEVBQTREO0FBQzFELDBCQUFNLFVBQVUsV0FBVyxpQkFBWCxHQUErQixJQUEvQixDQUFvQztBQUFBLCtCQUFpQix1Q0FBdUMsYUFBdkMsQ0FBakI7QUFBQSx1QkFBcEMsTUFBZ0gsU0FBaEk7QUFDQSwyQkFBSyxVQUFMLENBQWdCLE9BQWhCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsZUFiRDtBQWNBLHFCQUFPLEtBQVA7QUFDRCxhQXZDSTtBQXdDTCxnQkFBSSxvQ0F4Q0M7QUF5Q0wsa0JBQU0sQ0FBQyxhQUFEO0FBekNEO0FBRFQsU0E5S0Y7QUE0TkE7QUFDRixXQUFLLE9BQUw7QUFDRSxnQkFBUyxDQUNQO0FBQ0Usa0JBQVE7QUFDTixnQkFBSSxZQURFO0FBRU4sa0JBQU0sMkJBRkE7QUFHTixrQkFBTSxpQkFIQTtBQUlOLHdCQUpNO0FBS04sZ0JBQUksc0JBTEU7QUFNTixrQkFBTSxDQUFDLGFBQUQ7QUFOQTtBQURWLFNBRE8sRUFXUDtBQUNFLGtCQUFRO0FBQ04sZ0JBQUksV0FERTtBQUVOLGtCQUFNLDhCQUZBO0FBR04sa0JBQU0sb0JBSEE7QUFJTix3QkFKTTtBQUtOLGdCQUFJLHlCQUxFO0FBTU4sa0JBQU0sQ0FBQyxnQkFBRCxFQUFtQixxQkFBbkI7QUFOQTtBQURWLFNBWE8sQ0FBVDtBQXNCQTtBQXBZSjtBQXNZQSxXQUFPLGVBQWUsTUFBTSxNQUFOLENBQWE7QUFBQSxhQUFRLEtBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsTUFBakIsQ0FBd0I7QUFBQSxlQUFRLGFBQWEsUUFBYixDQUFzQixJQUF0QixDQUFSO0FBQUEsT0FBeEIsRUFBNkQsTUFBN0QsR0FBc0UsQ0FBOUU7QUFBQSxLQUFiLEVBQThGLEdBQTlGLENBQWtHLGdCQUFRO0FBQzlIO0FBQ0EsV0FBSyxNQUFMLENBQVksR0FBWixHQUFrQixDQUFsQjtBQUNBLGFBQU8sSUFBSSxJQUFKLENBQVMsS0FBSyxNQUFkLENBQVA7QUFDRCxLQUpxQixDQUFmLEdBSUgsTUFBTSxHQUFOLENBQVU7QUFBQSxhQUFRLElBQUksSUFBSixDQUFTLEtBQUssTUFBZCxDQUFSO0FBQUEsS0FBVixDQUpKO0FBS0QsR0E5WUQ7QUErWUEsT0FBSyxLQUFMLEdBQWEsWUFBcUI7QUFBQSxRQUFaLE9BQVksdUVBQUosRUFBSTtBQUFBLHdCQUM0QixPQUQ1QixDQUN6QixJQUR5QjtBQUFBLFFBQ3pCLElBRHlCLGlDQUNwQixNQUFNLFVBQU4sQ0FBaUIsTUFERztBQUFBLFFBQ0ssS0FETCxHQUM0QixPQUQ1QixDQUNLLEtBREw7QUFBQSxRQUNZLFlBRFosR0FDNEIsT0FENUIsQ0FDWSxZQURaOztBQUVoQyxRQUFJLFFBQVEsRUFBWjtBQUNBLFlBQVEsSUFBUjtBQUNFLFdBQUssTUFBTSxVQUFOLENBQWlCLE1BQXRCO0FBQ0UsWUFBTSxlQUFlLFFBQVEsWUFBN0I7QUFDQTtBQUNBLFlBQU0sa0JBQWtCLFNBQVMsZUFBVCxDQUF5QixZQUF6QixDQUF4QjtBQUNBO0FBQ0EsWUFBSSxTQUFTLG1CQUFULENBQTZCLFlBQTdCLENBQUosRUFBZ0Q7QUFDOUMsa0JBQVEsS0FBSyxXQUFMLENBQWlCO0FBQ3ZCLHdCQUR1QjtBQUV2QixzQ0FGdUI7QUFHdkIsa0JBQU0sT0FIaUI7QUFJdkI7QUFKdUIsV0FBakIsQ0FBUjtBQU1EO0FBQ0Q7QUFSQSxhQVNLLElBQUksU0FBUyxrQkFBVCxDQUE0QixZQUE1QixDQUFKLEVBQStDO0FBQ2xELG9CQUFRLEtBQUssV0FBTCxDQUFpQjtBQUN2QiwwQkFEdUI7QUFFdkIsb0JBQU0sTUFGaUI7QUFHdkIsd0NBSHVCO0FBSXZCO0FBSnVCLGFBQWpCLENBQVI7QUFNRDtBQUNEO0FBUkssZUFTQSxJQUFJLFNBQVMscUJBQVQsQ0FBK0IsWUFBL0IsQ0FBSixFQUFpRDtBQUNsRCxzQkFBUSxRQUFRLEtBQUssV0FBTCxDQUFpQjtBQUMvQiw0QkFEK0I7QUFFL0Isc0JBQU0sU0FGeUI7QUFHL0IsMENBSCtCO0FBSS9CO0FBSitCLGVBQWpCLENBQWhCO0FBTUg7QUFDRDtBQUNGLFdBQUssTUFBTSxVQUFOLENBQWlCLEtBQXRCO0FBQ0UsZ0JBQVEsS0FBSyxXQUFMLENBQWlCO0FBQ3ZCLHNCQUR1QjtBQUV2QixnQkFBTSxPQUZpQjtBQUd2QjtBQUh1QixTQUFqQixDQUFSO0FBS0E7QUFDRjtBQUNFLGdCQUFRLEVBQVI7QUFDQTtBQTFDSjtBQTRDQSxXQUFPLEtBQVA7QUFDRCxHQWhERDtBQWlERDs7QUFFRCxPQUFPLE9BQVAsR0FBaUIsSUFBSSxrQkFBSixFQUFqQjs7O3lCQ2hlMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2QsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0scUJBQXFCLFFBQVEsNEJBQVIsQ0FBM0I7QUFDQSxJQUFNLGVBQWUsUUFBUSxzQkFBUixDQUFyQjs7QUFFQSxTQUFTLG9DQUFULEdBQTBEO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3hELFVBQVEsSUFBUixHQUFnQixVQUFoQjtBQUNBLFVBQVEsSUFBUixHQUFlLHlCQUFmO0FBQ0EsVUFBUSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsTUFBTSxzQkFBc0IsSUFBSSxrQkFBSixDQUF1QixPQUF2QixFQUFnQyxLQUFoQyxDQUE1QjtBQUNBLE1BQU0sZUFBZSxJQUFJLFlBQUosQ0FBaUIsT0FBakIsQ0FBckI7QUFDQSxVQUFRLEtBQVIsR0FBZ0IsQ0FBQyxtQkFBRCxFQUFzQixZQUF0QixDQUFoQjtBQUNBLE9BQUssbUJBQUw7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxvQ0FBUixFQUE4QyxlQUE5Qzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsb0NBQWpCOzs7eUJDbEIwQixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDZCxJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxpQkFBaUIsUUFBUSx3QkFBUixDQUF2QjtBQUNBLElBQU0sZUFBZSxRQUFRLHNCQUFSLENBQXJCOztBQUVBLFNBQVMsaUJBQVQsR0FBdUM7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDckMsTUFBTSxpQkFBaUIsSUFBSSxjQUFKLENBQW1CLE9BQW5CLENBQXZCO0FBQ0EsTUFBTSxlQUFlLElBQUksWUFBSixDQUFpQixPQUFqQixDQUFyQjtBQUNBLFVBQVEsS0FBUixHQUFnQixDQUFDLGNBQUQsRUFBaUIsWUFBakIsQ0FBaEI7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0EsT0FBSyxlQUFMLENBQXFCO0FBQ25CLFVBQU0sY0FEYTtBQUVuQixXQUFPLENBQUMsTUFBRCxFQUFTLFNBQVQ7QUFGWSxHQUFyQjtBQUlEOztBQUVELFFBQVEsaUJBQVIsRUFBMkIsZUFBM0I7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGlCQUFqQjs7O3lCQ2xCMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2QsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0sa0JBQWtCLFFBQVEseUJBQVIsQ0FBeEI7QUFDQSxJQUFNLG9CQUFvQixRQUFRLDJCQUFSLENBQTFCO0FBQ0EsSUFBTSxpQkFBaUIsUUFBUSx3QkFBUixDQUF2QjtBQUNBLElBQU0sK0JBQStCLFFBQVEsc0NBQVIsQ0FBckM7O0FBRUEsU0FBUywrQkFBVCxHQUFxRDtBQUFBOztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNuRCxVQUFRLElBQVIsR0FBZSxRQUFmO0FBQ0EsVUFBUSxXQUFSLEdBQXNCLHVCQUF0QjtBQUNBLFVBQVEsSUFBUixHQUFlLG1DQUFmO0FBQ0EsTUFBTSxzQkFBc0IsSUFBSSxlQUFKLEVBQTVCO0FBQ0Esc0JBQW9CLE9BQXBCLEdBQThCLFFBQTlCLENBQXVDO0FBQ3JDLFlBQVE7QUFDTixtQkFBYSwrQkFEUDtBQUVOLGlCQUFXLFVBRkw7QUFHTixZQUFNO0FBSEE7QUFENkIsR0FBdkM7QUFPQSxVQUFRLEdBQVIsR0FBYyxLQUFkO0FBQ0EsTUFBTSxpQkFBaUIsSUFBSSxjQUFKLENBQW1CLE9BQW5CLENBQXZCO0FBQ0EsaUJBQWUsT0FBZixHQUF5QixRQUF6QixDQUFrQztBQUNoQyxnQkFBWTtBQUNWLG1CQUFhLGtDQURIO0FBRVYsaUJBQVcsVUFGRDtBQUdWLFlBQU07QUFISTtBQURvQixHQUFsQztBQU9BLGlCQUFlLEVBQWYsQ0FBa0IsS0FBbEIsRUFBeUIsZ0JBQXVCO0FBQUEsUUFBckIsTUFBcUIsUUFBckIsTUFBcUI7QUFBQSxRQUFiLE9BQWEsUUFBYixPQUFhOztBQUM5QyxRQUFNLFFBQVEsT0FBTyxLQUFyQjtBQUNBLFFBQU0sV0FBVztBQUNmLFlBQU0sTUFEUztBQUVmLGVBQVM7QUFDUCxpQkFBUyxNQUFNLEtBQU4sRUFERjtBQUVQLGdCQUFRLE1BQU0sZUFBTixHQUF3QixTQUF4QixFQUZEO0FBR1AsZ0JBQVE7QUFIRDtBQUZNLEtBQWpCO0FBUUEsVUFBSyxJQUFMLENBQVUsZ0JBQVYsRUFBNEIsQ0FBQyxRQUFELENBQTVCO0FBQ0QsR0FYRDtBQVlBLGlCQUFlLEVBQWYsQ0FBa0IsS0FBbEIsRUFBeUIsWUFBTTtBQUM3QixVQUFLLElBQUwsQ0FBVSxRQUFWLEVBQW9CLENBQUMsTUFBRCxDQUFwQjtBQUNELEdBRkQ7QUFHQSxpQkFBZSxFQUFmLENBQWtCLE1BQWxCLEVBQTBCLFlBQU07QUFDOUIsVUFBSyxJQUFMLENBQVUsVUFBVixFQUFzQixDQUFDLE1BQUQsQ0FBdEI7QUFDRCxHQUZEO0FBR0EsTUFBTSwwQkFBMEIsSUFBSSw0QkFBSixDQUFpQyxPQUFqQyxDQUFoQztBQUNBLFVBQVEsS0FBUixHQUFnQixDQUFDLG1CQUFELEVBQXNCLElBQUksaUJBQUosRUFBdEIsRUFBK0MsY0FBL0MsRUFBK0QsdUJBQS9ELENBQWhCO0FBQ0EsT0FBSyxtQkFBTDtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLCtCQUFSLEVBQXlDLGVBQXpDOztBQUVBLE9BQU8sT0FBUCxHQUFpQiwrQkFBakI7Ozt5QkN0RDBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sa0JBQWtCLFFBQVEsbUJBQVIsQ0FBeEI7QUFDQSxJQUFNLHNCQUFzQixRQUFRLDZCQUFSLENBQTVCO0FBQ0EsSUFBTSxlQUFlLFFBQVEsc0JBQVIsQ0FBckI7O0FBRUEsU0FBUyxzQkFBVCxHQUE0QztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUMxQyxVQUFRLEtBQVIsR0FBZ0IsQ0FBQyxJQUFJLG1CQUFKLEVBQUQsRUFBNEIsSUFBSSxZQUFKLEVBQTVCLENBQWhCO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsc0JBQVIsRUFBZ0MsZUFBaEM7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLHNCQUFqQjs7O3lCQ1owQixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDZCxJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxjQUFjLFFBQVEscUJBQVIsQ0FBcEI7O0FBRUEsU0FBUyxvQkFBVCxHQUEwQztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN4QyxVQUFRLEtBQVIsR0FBZ0IsQ0FBQyxJQUFJLFdBQUosQ0FBZ0IsT0FBaEIsQ0FBRCxDQUFoQjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLG9CQUFSLEVBQThCLGVBQTlCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixvQkFBakI7Ozt5QkNYMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2QsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0saUNBQWlDLFFBQVEsd0NBQVIsQ0FBdkM7QUFDQSxJQUFNLGVBQWUsUUFBUSxzQkFBUixDQUFyQjs7QUFFQSxTQUFTLGlDQUFULEdBQXVEO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3JELFVBQVEsSUFBUixHQUFlLHlCQUFmO0FBQ0EsVUFBUSxLQUFSLEdBQWdCLENBQ2QsSUFBSSw4QkFBSixDQUFtQyxPQUFuQyxDQURjLEVBRWQsSUFBSSxZQUFKLENBQWlCLE9BQWpCLENBRmMsQ0FBaEI7QUFJQSxPQUFLLG1CQUFMO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsaUNBQVIsRUFBMkMsZUFBM0M7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGlDQUFqQjs7O3lCQ2pCd0IsT0FBTyxJQUFQLENBQVksSztJQUE3QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2IsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0scUJBQXFCLFFBQVEsNEJBQVIsQ0FBM0I7QUFDQSxJQUFNLGdCQUFnQixRQUFRLHVCQUFSLENBQXRCO0FBQ0EsSUFBTSxtQkFBbUIsUUFBUSx5QkFBUixDQUF6QjtBQUNBLElBQU0sbUJBQW1CLE9BQU8sSUFBUCxDQUFZLGdCQUFyQzs7QUFFQSxTQUFTLG1CQUFULEdBQXlDO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3ZDLE1BQU0sZUFBZSxRQUFRLEtBQVIsQ0FBYyxlQUFkLEdBQWdDLE9BQWhDLENBQXdDLE9BQXhDLE1BQXFELENBQUMsQ0FBM0U7QUFDQSxVQUFRLElBQVIsR0FBZSxpQkFBaUIsUUFBakIsR0FBNEIsUUFBNUIsR0FBd0MsVUFBdkQ7QUFDQSxVQUFRLElBQVIsR0FBZSx5QkFBZjtBQUNBLFVBQVEsS0FBUixHQUFnQixFQUFoQjtBQUNBLE1BQU0sc0JBQXNCLElBQUksa0JBQUosQ0FBdUIsT0FBdkIsRUFBZ0MsSUFBaEMsQ0FBNUI7QUFDQSxzQkFBb0IsT0FBcEIsR0FBOEIsUUFBOUIsQ0FBdUM7QUFDckMsWUFBUTtBQUNOLG1CQUFhLFFBQVEsSUFBUixLQUFpQixVQUFqQixHQUErQix5Q0FBL0IsR0FBMkUsb0NBRGxGO0FBRU4saUJBQVcsVUFGTDtBQUdOLFlBQU07QUFIQTtBQUQ2QixHQUF2QztBQU9BLFVBQVEsS0FBUixDQUFjLElBQWQsQ0FBbUIsbUJBQW5CO0FBQ0EsTUFBSSxDQUFDLFlBQUwsRUFBbUI7QUFDakIsUUFBTSxnQkFBZ0IsSUFBSSxhQUFKLENBQWtCLE9BQWxCLEVBQTJCLElBQTNCLENBQXRCO0FBQ0Esa0JBQWMsT0FBZCxHQUF3QixRQUF4QixDQUFpQztBQUMvQixZQUFNO0FBQ0oscUJBQWEsMENBRFQ7QUFFSixtQkFBVyxVQUZQO0FBR0osY0FBTTtBQUhGO0FBRHlCLEtBQWpDO0FBT0EsWUFBUSxLQUFSLENBQWMsSUFBZCxDQUFtQixhQUFuQjtBQUNEO0FBQ0QsTUFBTSxvQkFBb0IsSUFBSSxnQkFBSixDQUFxQixPQUFyQixFQUE4QixJQUE5QixDQUExQjtBQUNBLG9CQUFrQixPQUFsQixHQUE0QixRQUE1QixDQUFxQztBQUNuQyxRQUFJO0FBQ0YsbUJBQWEsc0NBRFg7QUFFRixpQkFBVyxVQUZUO0FBR0YsWUFBTTtBQUhKO0FBRCtCLEdBQXJDO0FBT0EsVUFBUSxLQUFSLENBQWMsSUFBZCxDQUFtQixpQkFBbkI7QUFDQSxPQUFLLG1CQUFMO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsbUJBQVIsRUFBNkIsZUFBN0I7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLG1CQUFqQjs7O3lCQy9DMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2QsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsMkJBQVIsQ0FBMUI7QUFDQSxJQUFNLGtCQUFrQixRQUFRLHlCQUFSLENBQXhCO0FBQ0EsSUFBTSxvQkFBb0IsUUFBUSwyQkFBUixDQUExQjtBQUNBLElBQU0sY0FBYyxRQUFRLHFCQUFSLENBQXBCOztBQUVBLFNBQVMsb0JBQVQsR0FBMEM7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDeEMsVUFBUSxLQUFSLEdBQWdCLENBQ2QsSUFBSSxlQUFKLEVBRGMsRUFFZCxJQUFJLGlCQUFKLEVBRmMsRUFHZCxJQUFJLGlCQUFKLEVBSGMsRUFJZCxJQUFJLFdBQUosQ0FBZ0IsRUFBQyxNQUFNLFFBQVAsRUFBaEIsQ0FKYyxDQUFoQjtBQU1BLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLG9CQUFSLEVBQThCLGVBQTlCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixvQkFBakI7Ozt5QkNuQjBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sa0JBQWtCLFFBQVEsbUJBQVIsQ0FBeEI7QUFDQSxJQUFNLG9DQUFvQyxRQUFRLDJDQUFSLENBQTFDO0FBQ0EsSUFBTSxrQkFBa0IsUUFBUSx5QkFBUixDQUF4QjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsMkJBQVIsQ0FBMUI7O0FBRUEsU0FBUyxrQ0FBVCxHQUF3RDtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN0RCxVQUFRLFdBQVIsR0FBc0IsMEJBQXRCO0FBQ0EsVUFBUSxLQUFSLEdBQWdCLENBQ2QsSUFBSSxlQUFKLEVBRGMsRUFFZCxJQUFJLGlCQUFKLEVBRmMsRUFHZCxJQUFJLGlDQUFKLENBQXNDLE9BQXRDLENBSGMsQ0FBaEI7QUFLQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxrQ0FBUixFQUE0QyxlQUE1Qzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsa0NBQWpCOzs7eUJDbEIwQixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDZCxJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxrQkFBa0IsUUFBUSx5QkFBUixDQUF4QjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsMkJBQVIsQ0FBMUI7QUFDQSxJQUFNLGVBQWUsUUFBUSxzQkFBUixDQUFyQjs7QUFFQSxTQUFTLDZCQUFULEdBQW1EO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ2pELFVBQVEsV0FBUixHQUFzQiw4QkFBdEI7QUFDQSxVQUFRLEtBQVIsR0FBZ0IsQ0FDZCxJQUFJLGVBQUosRUFEYyxFQUVkLElBQUksaUJBQUosRUFGYyxFQUdkLElBQUksWUFBSixFQUhjLENBQWhCO0FBS0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsNkJBQVIsRUFBdUMsZUFBdkM7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLDZCQUFqQjs7O3lCQ2xCd0IsT0FBTyxJQUFQLENBQVksSztJQUE3QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixRLEdBQVksT0FBTyxJQUFQLENBQVksUSxDQUF4QixRO0lBQ0EsSyxHQUFTLE9BQU8sSUFBUCxDQUFZLEssQ0FBckIsSztJQUNBLG1CLEdBQXVCLE9BQU8sSUFBUCxDQUFZLFFBQVosQ0FBcUIsUSxDQUE1QyxtQjs7O0FBRVAsU0FBUyxlQUFULEdBQXFDO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ25DLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDQSxPQUFLLFdBQUwsR0FBbUIsUUFBUSxXQUFSLEdBQXNCLEVBQUMsTUFBSyxRQUFRLFdBQWQsRUFBdEIsR0FBbUQsSUFBdEU7QUFDQSxPQUFLLFlBQUwsR0FBb0IsRUFBcEI7QUFDRDs7QUFFRCxRQUFRLGVBQVIsRUFBeUIsUUFBekI7O0FBRUEsSUFBTSxRQUFRLGdCQUFnQixTQUE5Qjs7QUFFQSxNQUFNLGVBQU4sR0FBd0IsZ0JBQTBCO0FBQUE7O0FBQUEsTUFBaEIsSUFBZ0IsUUFBaEIsSUFBZ0I7QUFBQSx3QkFBVixLQUFVO0FBQUEsTUFBVixLQUFVLDhCQUFKLEVBQUk7O0FBQ2hELE1BQU0sZUFBZTtBQUNuQixVQUFNO0FBQ0osWUFBTSxNQURGO0FBRUosZUFBUztBQUNQLG9CQUFZLEtBREw7QUFFUCxpQkFBUyxLQUZGO0FBR1AsZ0JBQVEsSUFIRDtBQUlQLFdBSk8sc0JBSUs7QUFBQSxjQUFQLEtBQU8sU0FBUCxLQUFPOztBQUNWLGVBQUssTUFBTCxHQUFjLElBQWQ7QUFDQSxlQUFLLE9BQUwsR0FBZSxLQUFLLE9BQUwsSUFBZ0IsTUFBTSxLQUFOLEVBQS9CO0FBQ0EsZUFBSyxNQUFMLEdBQWMsS0FBSyxNQUFMLElBQWUsTUFBTSxlQUFOLEdBQXdCLFNBQXhCLEVBQTdCO0FBQ0QsU0FSTTtBQVNQLFlBVE8sa0JBU0Q7QUFDSixlQUFLLE1BQUwsR0FBYyxLQUFkO0FBQ0Q7QUFYTTtBQUZMLEtBRGE7QUFpQm5CLGFBQVU7QUFDUixZQUFNLFNBREU7QUFFUixlQUFTO0FBQ1AsaUJBQVMsS0FERjtBQUVQLFdBRk8saUJBRUY7QUFBQTs7QUFDSCxxQkFBVyxZQUFJO0FBQ2Isa0JBQUssUUFBTCxDQUFjLE1BQUssT0FBbkI7QUFDRCxXQUZEO0FBR0QsU0FOTTtBQU9QLFlBUE8sa0JBT0Q7QUFDSixlQUFLLE9BQUwsR0FBZSx3QkFBZjtBQUNELFNBVE07QUFVUCxnQkFWTyxvQkFVRSxJQVZGLEVBVU87QUFDWixlQUFLLE9BQUwsR0FBZSxJQUFmO0FBQ0EsZUFBSyxPQUFMLEdBQWUsT0FBTyx1QkFBUCxHQUFpQywwQkFBaEQ7QUFDRCxTQWJNO0FBY1AsdUJBZE8sNkJBY1U7QUFDZixlQUFLLFFBQUwsQ0FBYyxLQUFkO0FBQ0Q7QUFoQk07QUFGRDtBQWpCUyxHQUFyQjtBQXVDQSxPQUFLLEVBQUwsQ0FBUSxLQUFSLEVBQWUsaUJBQXVCO0FBQUEsUUFBckIsTUFBcUIsU0FBckIsTUFBcUI7QUFBQSxRQUFiLE9BQWEsU0FBYixPQUFhOztBQUNwQyxRQUFNLFFBQVEsT0FBTyxLQUFyQjtBQUNBLFFBQUksT0FBSyxZQUFMLENBQWtCLE1BQWxCLElBQTRCLENBQWhDLEVBQW1DO0FBQ2pDLFlBQU0sT0FBTixDQUFjLGdCQUFPO0FBQ25CLFlBQUksU0FBUyxTQUFiLEVBQXdCO0FBQ3RCLGNBQUksTUFBTSxPQUFOLE9BQW9CLE1BQU0sVUFBTixDQUFpQixNQUFyQyxJQUErQyxDQUFDLG9CQUFvQixNQUFNLGVBQU4sRUFBcEIsQ0FBcEQsRUFDRSxPQUFLLFlBQUwsQ0FBa0IsSUFBbEIsQ0FBdUIsYUFBYSxJQUFiLENBQXZCO0FBQ0gsU0FIRCxNQUdPLE9BQUssWUFBTCxDQUFrQixJQUFsQixDQUF1QixhQUFhLElBQWIsQ0FBdkI7QUFDUixPQUxEO0FBTUQ7QUFDRCxXQUFLLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBMEI7QUFBQSxhQUFhLFdBQVcsT0FBWCxDQUFtQixHQUFuQixDQUF1QixFQUFDLFlBQUQsRUFBdkIsQ0FBYjtBQUFBLEtBQTFCO0FBQ0EsV0FBSyxJQUFMLENBQVUsZ0JBQVYsRUFBNEIsT0FBSyxZQUFqQztBQUNELEdBWkQ7QUFhQSxPQUFLLEVBQUwsQ0FBUSxNQUFSLEVBQWdCLFlBQU07QUFDcEIsV0FBSyxZQUFMLENBQWtCLE9BQWxCLENBQTBCO0FBQUEsYUFBYSxXQUFXLE9BQVgsQ0FBbUIsSUFBbkIsRUFBYjtBQUFBLEtBQTFCO0FBQ0QsR0FGRDtBQUdELENBeEREOztBQTBEQSxNQUFNLGNBQU4sR0FBdUIsVUFBUyxPQUFULEVBQWtCO0FBQ3ZDLE9BQUssV0FBTCxHQUFtQjtBQUNqQixVQUFNO0FBRFcsR0FBbkI7QUFHRCxDQUpEOztBQU1BLE1BQU0sY0FBTixHQUF1QixZQUFVO0FBQy9CLFNBQU8sS0FBSyxXQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLFdBQU4sR0FBb0IsWUFBVztBQUM3QixTQUFPLEtBQUssU0FBTCxHQUFpQixRQUF4QjtBQUNELENBRkQ7O0FBSUEsTUFBTSxpQkFBTixHQUEwQixVQUFTLE9BQVQsRUFBa0I7QUFDMUMsTUFBSSxRQUFRLEtBQUssUUFBTCxFQUFaO0FBQ0EsT0FBSyxRQUFMLENBQWMsQ0FBQyxNQUFNLEdBQU4sRUFBRCxDQUFkO0FBQ0EsU0FBTyxLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQVA7QUFDRCxDQUpEOztBQU1BLE1BQU0saUJBQU4sR0FBMEIsWUFBVztBQUNuQyxNQUFNLFdBQVcsS0FBSyxXQUFMLEVBQWpCO0FBQ0EsTUFBTSxTQUFTLEtBQUssV0FBTCxHQUFtQixNQUFsQztBQUNBLFNBQU8sU0FBUyxTQUFRLENBQWpCLENBQVA7QUFDRCxDQUpEOztBQU1BLE1BQU0sUUFBTixHQUFpQixZQUFXO0FBQzFCLFNBQU8sS0FBSyxVQUFMLEdBQWtCLFNBQWxCLEdBQThCLFFBQTlCLEVBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sVUFBTixHQUFtQixZQUFXO0FBQzVCLFNBQU8sS0FBSyxVQUFMLEdBQWtCLE9BQXpCO0FBQ0QsQ0FGRDs7QUFJQTtBQUNBLE1BQU0sZUFBTixHQUF3QixVQUFTLEdBQVQsRUFBYztBQUNwQyxNQUFJLElBQUksT0FBSixLQUFnQixFQUFwQixFQUF3QjtBQUN0QixRQUFJLElBQUosQ0FBUyxRQUFULENBQWtCLE1BQWxCO0FBQ0EsUUFBSSxJQUFKLENBQVMsUUFBVDtBQUNEO0FBQ0YsQ0FMRDs7QUFPQSxNQUFNLGNBQU4sR0FBdUIsWUFBVztBQUNoQyxJQUFFLFFBQUYsRUFBWSxNQUFaLENBQW1CLE9BQW5CLEVBQTRCLEtBQUssZUFBakM7QUFDRCxDQUZEOztBQUlBLE1BQU0sWUFBTixHQUFxQixZQUEwQjtBQUFBLE1BQWpCLFFBQWlCLHVFQUFSLFlBQUksQ0FBRSxDQUFFOztBQUM3QyxJQUFFLFFBQUYsRUFBWSxFQUFaLENBQWUsT0FBZixFQUF3QjtBQUN0QixjQUFVLElBRFk7QUFFdEI7QUFGc0IsR0FBeEIsRUFHRyxLQUFLLGVBSFI7QUFJRCxDQUxEOztBQU9BLE1BQU0sbUJBQU4sR0FBNEIsVUFBUyxRQUFULEVBQWtCO0FBQUE7O0FBQzVDLE9BQUssRUFBTCxDQUFRLE9BQVIsRUFBaUI7QUFBQSxXQUFNLE9BQUssWUFBTCxDQUFrQixRQUFsQixDQUFOO0FBQUEsR0FBakI7QUFDQSxPQUFLLEVBQUwsQ0FBUSxNQUFSLEVBQWdCO0FBQUEsV0FBTSxPQUFLLGNBQUwsRUFBTjtBQUFBLEdBQWhCO0FBQ0QsQ0FIRDtBQUlBOztBQUVBLE9BQU8sT0FBUCxHQUFpQixlQUFqQjs7O3lCQ3BJMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixnQixHQUFxQixPQUFPLEksQ0FBNUIsZ0I7O0FBQ1IsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0scUJBQXFCLFFBQVEsNEJBQVIsQ0FBM0I7QUFDQSxJQUFNLGVBQWUsUUFBUSxzQkFBUixDQUFyQjs7QUFFQSxTQUFTLGtDQUFULEdBQXdEO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3RELFVBQVEsV0FBUixHQUFzQixxQ0FBdEI7QUFDQSxNQUFNLGFBQWEsSUFBSSxrQkFBSixDQUF1QjtBQUN4QyxVQUFNO0FBRGtDLEdBQXZCLENBQW5CO0FBR0EsYUFBVyxPQUFYLEdBQXFCLFFBQXJCLENBQThCO0FBQzVCLFlBQVE7QUFDTixtQkFBYSxpQkFBaUIsUUFBakIsR0FBNEIscURBQTVCLEdBQW9GLDZEQUQzRjtBQUVOLGtCQUFZO0FBQ1Ysa0JBQVUsSUFEQTtBQUVWLG1CQUFVO0FBQUEsbUNBQUUsUUFBRjtBQUFBLGNBQUUsUUFBRixpQ0FBVyxFQUFYO0FBQUEsaUJBQW1CLFNBQVMsTUFBVCxHQUFrQixDQUFyQztBQUFBLFNBRkE7QUFHVixjQUFNLGdCQUFJLENBQUU7QUFIRixPQUZOO0FBT04saUJBQVcsVUFQTDtBQVFOLGVBQVMsQ0FSSDtBQVNOLFlBQU07QUFUQTtBQURvQixHQUE5QjtBQWFBLFVBQVEsS0FBUixHQUFnQixDQUFDLFVBQUQsRUFBYSxJQUFJLFlBQUosQ0FBaUI7QUFDNUMsV0FBTztBQURxQyxHQUFqQixDQUFiLENBQWhCO0FBR0EsT0FBSyxtQkFBTDtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLGtDQUFSLEVBQTRDLGVBQTVDOztBQUVBLE9BQU8sT0FBUCxHQUFpQixrQ0FBakI7Ozt5QkNqQ3dCLE9BQU8sSUFBUCxDQUFZLEs7SUFBN0IsTyxzQkFBQSxPO0lBQVMsSSxzQkFBQSxJOztBQUNoQixJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxlQUFlLFFBQVEsc0JBQVIsQ0FBckI7O0FBRUEsU0FBUyw2QkFBVCxHQUFtRDtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNqRCxVQUFRLFdBQVIsR0FBc0IsOEJBQXRCO0FBQ0EsTUFBTSxPQUFPLElBQUksWUFBSixFQUFiO0FBQ0EsVUFBUSxLQUFSLEdBQWdCLENBQUMsSUFBRCxDQUFoQjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLDZCQUFSLEVBQXVDLGVBQXZDOztBQUVBLE9BQU8sT0FBUCxHQUFpQiw2QkFBakI7Ozt5QkNid0IsT0FBTyxJQUFQLENBQVksSztJQUE3QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2IsSUFBTSxrQkFBa0IsUUFBUSxtQkFBUixDQUF4QjtBQUNBLElBQU0sZUFBZSxRQUFRLHNCQUFSLENBQXJCOztBQUVBLFNBQVMsdUJBQVQsR0FBNkM7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDM0MsVUFBUSxLQUFSLEdBQWdCLENBQUMsSUFBSSxZQUFKLEVBQUQsQ0FBaEI7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSx1QkFBUixFQUFpQyxlQUFqQzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsdUJBQWpCOzs7eUJDWDBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sa0JBQWtCLFFBQVEsbUJBQVIsQ0FBeEI7QUFDQSxJQUFNLGdCQUFnQixRQUFRLHVCQUFSLENBQXRCOztBQUVBLFNBQVMseUJBQVQsR0FBK0M7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDN0MsVUFBUSxLQUFSLEdBQWdCLENBQUMsSUFBSSxhQUFKLEVBQUQsQ0FBaEI7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSx5QkFBUixFQUFtQyxlQUFuQzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIseUJBQWpCOzs7eUJDWHdCLE9BQU8sSUFBUCxDQUFZLEs7SUFBN0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNiLElBQU0sa0JBQWtCLFFBQVEsbUJBQVIsQ0FBeEI7QUFDQSxJQUFNLG1CQUFtQixRQUFRLDBCQUFSLENBQXpCOztBQUVBLFNBQVMsbUJBQVQsR0FBeUM7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDdkMsVUFBUSxLQUFSLEdBQWdCLENBQUMsSUFBSSxnQkFBSixFQUFELENBQWhCO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsbUJBQVIsRUFBNkIsZUFBN0I7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLG1CQUFqQjs7O3lCQ1gwQixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNOLGdCLEdBQXFCLE9BQU8sSSxDQUE1QixnQjs7QUFDUixJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxxQkFBcUIsUUFBUSw0QkFBUixDQUEzQjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsMkJBQVIsQ0FBMUI7QUFDQSxTQUFTLHFCQUFULEdBQTJDO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3pDLFVBQVEsSUFBUixHQUFlLE1BQWY7QUFDQSxVQUFRLElBQVIsR0FBZSwwQkFBZjtBQUNBLE1BQU0sc0JBQXNCLElBQUksa0JBQUosQ0FBdUIsT0FBdkIsRUFBZ0MsSUFBaEMsQ0FBNUI7QUFDQSxzQkFBb0IsT0FBcEIsR0FBOEIsUUFBOUIsQ0FBdUM7QUFDckMsWUFBUTtBQUNOLG1CQUFhLGlCQUFpQixRQUFqQixHQUE0QixzQ0FBNUIsR0FBcUUsb0NBRDVFO0FBRU4saUJBQVcsVUFGTDtBQUdOLFlBQU07QUFIQTtBQUQ2QixHQUF2QztBQU9BLE1BQU0sb0JBQW9CLElBQUksaUJBQUosQ0FBc0IsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBMUI7QUFDQSxvQkFBa0IsT0FBbEIsR0FBNEIsUUFBNUIsQ0FBcUM7QUFDbkMsWUFBUTtBQUNOLG1CQUFhLDhCQURQO0FBRU4saUJBQVcsVUFGTDtBQUdOLFlBQU07QUFIQTtBQUQyQixHQUFyQztBQU9BLFVBQVEsS0FBUixHQUFnQixDQUFDLG1CQUFELEVBQXNCLGlCQUF0QixDQUFoQjtBQUNBLE9BQUssbUJBQUw7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxxQkFBUixFQUErQixlQUEvQjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIscUJBQWpCOzs7eUJDL0J3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxrQkFBa0IsUUFBUSx5QkFBUixDQUF4QjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsMkJBQVIsQ0FBMUI7QUFDQSxJQUFNLDJCQUEyQixRQUFRLGtDQUFSLENBQWpDOztBQUVBLFNBQVMsMkJBQVQsR0FBaUQ7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDL0MsVUFBUSxXQUFSLEdBQXNCLDZCQUF0QjtBQUNBLE1BQU0sV0FBVyxJQUFJLGVBQUosQ0FBb0IsT0FBcEIsQ0FBakI7QUFDQSxNQUFNLG1CQUFtQixJQUFJLHdCQUFKLEVBQXpCO0FBQ0EsVUFBUSxLQUFSLEdBQWdCLENBQ2QsUUFEYyxFQUVkLElBQUksaUJBQUosRUFGYyxFQUdoQixnQkFIZ0IsQ0FBaEI7QUFJQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0EsT0FBSyxlQUFMLENBQXFCO0FBQ25CLFVBQU0sZ0JBRGE7QUFFbkIsV0FBTSxDQUFDLE1BQUQsRUFBUyxTQUFUO0FBRmEsR0FBckI7QUFJRDs7QUFFRCxRQUFRLDJCQUFSLEVBQXFDLGVBQXJDOztBQUVBLE9BQU8sT0FBUCxHQUFpQiwyQkFBakI7Ozt5QkN2QjBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sa0JBQWtCLFFBQVEsbUJBQVIsQ0FBeEI7QUFDQSxJQUFNLGtCQUFrQixRQUFRLHlCQUFSLENBQXhCO0FBQ0EsSUFBTSxvQkFBb0IsUUFBUSwyQkFBUixDQUExQjtBQUNBLElBQU0sa0JBQWtCLFFBQVEseUJBQVIsQ0FBeEI7O0FBRUEsU0FBUyxrQkFBVCxHQUF3QztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN0QyxVQUFRLFdBQVIsR0FBc0IsNEJBQXRCO0FBQ0EsVUFBUSxLQUFSLEdBQWdCLENBQ2QsSUFBSSxlQUFKLEVBRGMsRUFFZCxJQUFJLGlCQUFKLEVBRmMsRUFHZCxJQUFJLGVBQUosRUFIYyxDQUFoQjtBQUtBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLGtCQUFSLEVBQTRCLGVBQTVCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixrQkFBakI7Ozt5QkNsQjBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sa0JBQWtCLFFBQVEsbUJBQVIsQ0FBeEI7QUFDQSxJQUFNLCtCQUErQixRQUFRLHNDQUFSLENBQXJDO0FBQ0EsSUFBTSx3Q0FBd0MsUUFBUSwrQ0FBUixDQUE5QztBQUNBLElBQU0sZUFBZSxRQUFRLHNCQUFSLENBQXJCOztBQUVBLFNBQVMsMENBQVQsR0FBZ0U7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDOUQsVUFBUSxJQUFSLEdBQWUseUJBQWY7QUFDQSxVQUFRLEtBQVIsR0FBZ0IsQ0FDZCxJQUFJLDRCQUFKLENBQWlDLE9BQWpDLENBRGMsRUFFZCxJQUFJLHFDQUFKLENBQTBDLE9BQTFDLENBRmMsRUFHZCxJQUFJLFlBQUosQ0FBaUIsT0FBakIsQ0FIYyxDQUFoQjtBQUtBLE9BQUssbUJBQUw7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSwwQ0FBUixFQUFvRCxlQUFwRDs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsMENBQWpCOzs7eUJDbkIwQixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDZCxJQUFNLGtCQUFrQixRQUFRLG1CQUFSLENBQXhCO0FBQ0EsSUFBTSxxQkFBcUIsUUFBUSw0QkFBUixDQUEzQjtBQUNBLElBQU0sbUJBQW1CLFFBQVEsMEJBQVIsQ0FBekI7QUFDQSxJQUFNLG1CQUFtQixPQUFPLElBQVAsQ0FBWSxnQkFBckM7O0FBRUEsU0FBUyxvQkFBVCxHQUEwQztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN4QyxVQUFRLElBQVIsR0FBZSxpQkFBaUIsUUFBakIsR0FBNEIsUUFBNUIsR0FBd0MsVUFBdkQ7QUFDQSxVQUFRLElBQVIsR0FBZSwwQkFBZjtBQUNBLE1BQU0sc0JBQXNCLElBQUksa0JBQUosQ0FBdUIsT0FBdkIsRUFBZ0MsSUFBaEMsQ0FBNUI7QUFDQSxzQkFBb0IsT0FBcEIsR0FBOEIsUUFBOUIsQ0FBdUM7QUFDckMsWUFBUTtBQUNOLG1CQUFhLFFBQVEsSUFBUixLQUFpQixVQUFqQixHQUErQix5Q0FBL0IsR0FBMkUsb0NBRGxGO0FBRU4saUJBQVcsVUFGTDtBQUdOLFlBQU07QUFIQTtBQUQ2QixHQUF2QztBQU9BLE1BQU0sbUJBQW1CLElBQUksZ0JBQUosQ0FBcUIsT0FBckIsRUFBOEIsSUFBOUIsQ0FBekI7QUFDQSxtQkFBaUIsT0FBakIsR0FBMkIsUUFBM0IsQ0FBb0M7QUFDbEMsZUFBVztBQUNULG1CQUFhLHdDQURKO0FBRVQsaUJBQVcsVUFGRjtBQUdULFlBQU07QUFIRztBQUR1QixHQUFwQztBQU9BLFVBQVEsS0FBUixHQUFnQixDQUFDLG1CQUFELEVBQXNCLGdCQUF0QixDQUFoQjtBQUNBLE9BQUssbUJBQUw7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxvQkFBUixFQUE4QixlQUE5Qjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsb0JBQWpCOzs7eUJDaEN5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSxpQkFBaUIsUUFBUSx3QkFBUixDQUF2Qjs7QUFFQSxJQUFNLGlCQUFpQixTQUFqQixjQUFpQixHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUMxQyxVQUFRLElBQVIsR0FBZSxJQUFJLGNBQUosQ0FBbUIsT0FBbkIsQ0FBZjtBQUNBLFVBQVEsSUFBUixHQUFlLHFDQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSkQ7O0FBTUEsUUFBUSxjQUFSLEVBQXdCLFdBQXhCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixjQUFqQjs7O3lCQ1p5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSw4QkFBOEIsUUFBUSxzQ0FBUixDQUFwQzs7QUFFQSxJQUFNLDhCQUE4QixTQUE5QiwyQkFBOEIsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDdkQsVUFBUSxJQUFSLEdBQWUsSUFBSSwyQkFBSixDQUFnQyxPQUFoQyxDQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSEQ7O0FBS0EsUUFBUSwyQkFBUixFQUFxQyxXQUFyQzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsMkJBQWpCOzs7eUJDWHlCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ0wsSSxHQUFVLE9BQU8sSUFBUCxDQUFZLFEsQ0FBdEIsSTs7QUFDUixJQUFNLHNCQUFzQixRQUFRLDZCQUFSLENBQTVCOztBQUVBO0FBQ0EsSUFBSSxzQkFBc0IsU0FBdEIsbUJBQXNCLEdBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzdDLFVBQVEsSUFBUixHQUFlLElBQUksbUJBQUosRUFBZjtBQUNBLFVBQVEsSUFBUixHQUFlLHdCQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSkQ7O0FBTUEsUUFBUSxtQkFBUixFQUE2QixJQUE3Qjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsbUJBQWpCOzs7eUJDYnlCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ0wsSSxHQUFVLE9BQU8sSUFBUCxDQUFZLFEsQ0FBdEIsSTs7QUFDUixJQUFNLG9CQUFvQixRQUFRLDJCQUFSLENBQTFCOztBQUVBO0FBQ0EsSUFBTSxvQkFBb0IsU0FBcEIsaUJBQW9CLEdBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzdDLFVBQVEsSUFBUixHQUFlLElBQUksaUJBQUosQ0FBc0IsT0FBdEIsQ0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUhEOztBQUtBLFFBQVEsaUJBQVIsRUFBMkIsSUFBM0I7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGlCQUFqQjs7O3lCQ1p5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSxjQUFjLFFBQVEscUJBQVIsQ0FBcEI7O0FBRUEsSUFBTSxjQUFjLFNBQWQsV0FBYyxHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN2QyxVQUFRLElBQVIsR0FBZSxJQUFJLFdBQUosQ0FBZ0IsT0FBaEIsQ0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUhEOztBQUtBLFFBQVEsV0FBUixFQUFxQixXQUFyQjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsV0FBakI7Ozt5QkNYd0IsT0FBTyxJQUFQLENBQVksSztJQUE3QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2IsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sT0FBTyxRQUFRLHdDQUFSLENBQWI7O0FBRUEsSUFBTSxpQ0FBaUMsU0FBakMsOEJBQWlDLEdBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzFELFVBQVEsSUFBUixHQUFlLElBQUksSUFBSixDQUFTLE9BQVQsQ0FBZjtBQUNBLFVBQVEsSUFBUixHQUFlLHFDQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSkQ7O0FBTUEsUUFBUSw4QkFBUixFQUF3QyxXQUF4Qzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsOEJBQWpCOzs7eUJDWndCLE9BQU8sSUFBUCxDQUFZLEs7SUFBN0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNiLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7QUFDQSxJQUFNLE9BQU8sUUFBUSwrQ0FBUixDQUFiOztBQUVBLElBQU0sd0NBQXdDLFNBQXhDLHFDQUF3QyxHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNqRSxVQUFRLElBQVIsR0FBZSxJQUFJLElBQUosQ0FBUyxPQUFULENBQWY7QUFDQSxVQUFRLElBQVIsR0FBZSxxQ0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUpEOztBQU1BLFFBQVEscUNBQVIsRUFBK0MsV0FBL0M7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLHFDQUFqQjs7O3lCQ1p5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSxvQkFBb0IsUUFBUSwyQkFBUixDQUExQjs7QUFFQSxJQUFNLG9CQUFvQixTQUFwQixpQkFBb0IsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDN0MsVUFBUSxJQUFSLEdBQWUsSUFBSSxpQkFBSixFQUFmO0FBQ0EsVUFBUSxJQUFSLEdBQWUsd0NBQWY7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0QsQ0FKRDs7QUFNQSxRQUFRLGlCQUFSLEVBQTJCLFdBQTNCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixpQkFBakI7Ozt5QkNaeUIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2IsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sb0NBQW9DLFFBQVEsMkNBQVIsQ0FBMUM7O0FBRUEsSUFBTSxtQ0FBbUMsU0FBbkMsZ0NBQW1DLEdBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzVELFVBQVEsSUFBUixHQUFlLElBQUksaUNBQUosQ0FBc0MsT0FBdEMsQ0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUhEOztBQUtBLFFBQVEsZ0NBQVIsRUFBMEMsV0FBMUM7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGdDQUFqQjs7O3lCQ1h5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNMLEksR0FBVSxPQUFPLElBQVAsQ0FBWSxRLENBQXRCLEk7OztBQUVSLElBQU0sY0FBYyxTQUFkLFdBQWMsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDdkMsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBRkQ7O0FBSUEsUUFBUSxXQUFSLEVBQXFCLElBQXJCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixXQUFqQjs7O3lCQ1R3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSxnQkFBZ0IsUUFBUSx1QkFBUixDQUF0Qjs7QUFFQSxJQUFNLGdCQUFnQixTQUFoQixhQUFnQixHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN6QyxVQUFRLElBQVIsR0FBZSxJQUFJLGFBQUosQ0FBa0IsT0FBbEIsQ0FBZjtBQUNBLFVBQVEsSUFBUixHQUFlLDJCQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSkQ7O0FBTUEsUUFBUSxhQUFSLEVBQXVCLFdBQXZCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixhQUFqQjs7O3lCQ1p3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSxtQkFBbUIsUUFBUSwwQkFBUixDQUF6Qjs7QUFFQSxJQUFNLG1CQUFtQixTQUFuQixnQkFBbUIsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDNUMsVUFBUSxJQUFSLEdBQWUsSUFBSSxnQkFBSixFQUFmO0FBQ0EsVUFBUSxJQUFSLEdBQWUsK0NBQWY7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0QsQ0FKRDs7QUFNQSxRQUFRLGdCQUFSLEVBQTBCLFdBQTFCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixnQkFBakI7Ozt5QkNaMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2QsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sb0JBQW9CLFFBQVEsMkJBQVIsQ0FBMUI7O0FBRUEsSUFBTSxtQkFBbUIsU0FBbkIsZ0JBQW1CLEdBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzVDLFVBQVEsSUFBUixHQUFlLElBQUksaUJBQUosRUFBZjtBQUNBLFVBQVEsSUFBUixHQUFlLDBCQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSkQ7O0FBTUEsUUFBUSxnQkFBUixFQUEwQixXQUExQjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsZ0JBQWpCOzs7eUJDWnlCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNiLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7QUFDQSxJQUFNLDJCQUEyQixRQUFRLGtDQUFSLENBQWpDOztBQUVBLElBQU0sMkJBQTJCLFNBQTNCLHdCQUEyQixHQUErQjtBQUFBLE1BQXRCLE9BQXNCLHVFQUFkLEVBQUMsTUFBTSxJQUFQLEVBQWM7O0FBQzlELE1BQU0sT0FBTyxJQUFJLHdCQUFKLENBQTZCLE9BQTdCLENBQWI7QUFDQSxVQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsVUFBUSxJQUFSLEdBQWUsd0NBQWY7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0QsQ0FMRDs7QUFPQSxRQUFRLHdCQUFSLEVBQWtDLFdBQWxDOztBQUVBLE9BQU8sT0FBUCxHQUFpQix3QkFBakI7Ozt5QkNieUIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2IsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sa0JBQWtCLFFBQVEsMEJBQVIsQ0FBeEI7O0FBRUEsSUFBTSxrQkFBa0IsU0FBbEIsZUFBa0IsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDM0MsVUFBUSxJQUFSLEdBQWUsSUFBSSxlQUFKLENBQW9CLE9BQXBCLENBQWY7QUFDQSxVQUFRLElBQVIsR0FBZSx5QkFBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUpEOztBQU1BLFFBQVEsZUFBUixFQUF5QixXQUF6Qjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsZUFBakI7Ozt5QkNaeUIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2IsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sa0JBQWtCLFFBQVEsMEJBQVIsQ0FBeEI7O0FBRUEsSUFBTSxtQkFBbUIsU0FBbkIsZ0JBQW1CLEdBQTRCO0FBQUEsTUFBbkIsT0FBbUIsdUVBQVgsRUFBVztBQUFBLE1BQVAsS0FBTzs7QUFDbkQsTUFBTSxPQUFPLElBQUksZUFBSixDQUFvQixPQUFwQixDQUFiO0FBQ0EsVUFBUSxJQUFSLEdBQWUsSUFBZjtBQUNBLFVBQVEsSUFBUixHQUFlLDJDQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBTEQ7O0FBT0EsUUFBUSxnQkFBUixFQUEwQixXQUExQjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsZ0JBQWpCOzs7eUJDYnlCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ0wsSSxHQUFVLE9BQU8sSUFBUCxDQUFZLFEsQ0FBdEIsSTs7QUFDUixJQUFNLGVBQWUsUUFBUSxzQkFBUixDQUFyQjs7QUFFQTtBQUNBLElBQU0sZUFBZSxTQUFmLFlBQWUsR0FBcUI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDeEMsVUFBUSxJQUFSLEdBQWUsSUFBSSxZQUFKLENBQWlCLE9BQWpCLENBQWY7QUFDQSxVQUFRLElBQVIsR0FBZSw4Q0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUpEOztBQU1BLFFBQVEsWUFBUixFQUFzQixJQUF0Qjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsWUFBakI7Ozt5QkNieUIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTCxJLEdBQVUsT0FBTyxJQUFQLENBQVksUSxDQUF0QixJOztBQUNSLElBQU0sZ0JBQWdCLFFBQVEsdUJBQVIsQ0FBdEI7O0FBRUE7QUFDQSxJQUFNLGdCQUFnQixTQUFoQixhQUFnQixHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN6QyxVQUFRLElBQVIsR0FBZSxJQUFJLGFBQUosRUFBZjtBQUNBLFVBQVEsSUFBUixHQUFlLCtCQUFmO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNELENBSkQ7O0FBTUEsUUFBUSxhQUFSLEVBQXVCLElBQXZCOztBQUVBLE9BQU8sT0FBUCxHQUFpQixhQUFqQjs7O3lCQ2J5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNMLEksR0FBVSxPQUFPLElBQVAsQ0FBWSxRLENBQXRCLEk7O0FBQ1IsSUFBTSxrQkFBa0IsUUFBUSx5QkFBUixDQUF4Qjs7QUFFQSxJQUFNLGtCQUFrQixTQUFsQixlQUFrQixHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUMzQyxNQUFNLE9BQU8sSUFBSSxlQUFKLENBQW9CLE9BQXBCLENBQWI7QUFDQSxVQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsVUFBUSxJQUFSLEdBQWUsaUNBQWY7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0QsQ0FMRDs7QUFPQSxRQUFRLGVBQVIsRUFBeUIsSUFBekI7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGVBQWpCOzs7eUJDYnlCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ0wsSSxHQUFVLE9BQU8sSUFBUCxDQUFZLFEsQ0FBdEIsSTs7QUFDUixJQUFNLCtCQUErQixRQUFRLHNDQUFSLENBQXJDOztBQUVBLElBQU0sK0JBQStCLFNBQS9CLDRCQUErQixHQUFxQjtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUN4RCxVQUFRLElBQVIsR0FBZSxJQUFJLDRCQUFKLENBQWlDLE9BQWpDLENBQWY7QUFDQSxVQUFRLElBQVIsR0FBZSxpQ0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUpEOztBQU1BLFFBQVEsNEJBQVIsRUFBc0MsSUFBdEM7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLDRCQUFqQjs7O3lCQ1p5QixPQUFPLElBQVAsQ0FBWSxLO0lBQTlCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLElBQUksT0FBTyxJQUFQLENBQVksSUFBWixDQUFpQixPQUEzQjtBQUNBLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7QUFDQSxJQUFNLHFCQUFxQixRQUFRLDRCQUFSLENBQTNCOztBQUVBLElBQU0scUJBQXFCLFNBQXJCLGtCQUFxQixHQUE0QjtBQUFBOztBQUFBLE1BQW5CLE9BQW1CLHVFQUFYLEVBQVc7QUFBQSxNQUFQLEtBQU87O0FBQ3JELFVBQVEsSUFBUixHQUFlLElBQUksa0JBQUosQ0FBdUIsT0FBdkIsQ0FBZjtBQUNBLFVBQVEsSUFBUixHQUFlLFFBQVEsSUFBUixJQUFnQixvQ0FBL0I7QUFDQSxXQUFTLEtBQUssRUFBTCxDQUFRLEtBQVIsRUFBZSxZQUFNO0FBQzFCLFVBQUssSUFBTCxDQUFVLFdBQVYsRUFBdUIsRUFBRSxvQ0FBRixDQUF2QjtBQUNELEdBRk0sQ0FBVDtBQUdBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQVBEOztBQVNBLFFBQVEsa0JBQVIsRUFBNEIsV0FBNUI7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGtCQUFqQjs7O3lCQ2hCMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87O0FBQ2QsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sbUJBQW1CLFFBQVEsMEJBQVIsQ0FBekI7O0FBRUEsSUFBTSxtQkFBbUIsU0FBbkIsZ0JBQW1CLEdBQXFCO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQzVDLE1BQU0sT0FBTyxJQUFJLGdCQUFKLENBQXFCLE9BQXJCLENBQWI7QUFDQSxVQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsVUFBUSxJQUFSLEdBQWUsRUFBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRCxDQUxEOztBQU9BLFFBQVEsZ0JBQVIsRUFBMEIsV0FBMUI7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGdCQUFqQjs7O3lCQ2IyQixPQUFPLElBQVAsQ0FBWSxLO0lBQS9CLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDZCxJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLFNBQVMsbUJBQVQsR0FBeUM7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDdkMsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsbUJBQVIsRUFBNkIsV0FBN0I7O0FBRUEsSUFBTSxRQUFRLG9CQUFvQixTQUFsQzs7QUFFQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBQ0EsTUFBTSxVQUFVLFFBQVEsT0FBeEI7QUFDQSxNQUFNLGdCQUFnQixPQUFPLEtBQTdCO0FBQ0EsTUFBTSxVQUFVLGNBQWMsS0FBZCxFQUFoQjtBQUNBLE1BQU0sZUFBZSxjQUFjLGVBQWQsRUFBckI7QUFDQSxNQUFNLFVBQVUsT0FBTyxRQUFQLENBQWdCLE1BQWhCLEdBQXlCLE9BQU8sUUFBUCxDQUFnQixPQUFPLFFBQVAsQ0FBZ0IsTUFBaEIsR0FBd0IsQ0FBeEMsQ0FBekIsR0FBc0UsY0FBYyxnQkFBZCxFQUF0RjtBQUNBLFVBQVEsY0FBUjtBQUNBLGVBQWEsZ0JBQWIsR0FBZ0MsVUFBaEMsQ0FBMkMsT0FBM0M7QUFDQSxVQUFRLE9BQVIsQ0FBZ0IsT0FBaEIsRUFBeUIsT0FBekI7QUFDQSxTQUFPLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FBcUIsT0FBckI7QUFDQSxPQUFLLHlCQUFMLENBQStCLElBQS9CO0FBQ0EsSUFBRSxPQUFGLENBQVUsTUFBVixFQUFrQixPQUFsQjtBQUNBLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQWREOztBQWdCQSxNQUFNLElBQU4sR0FBYSxZQUFXLENBQUUsQ0FBMUI7O0FBR0EsT0FBTyxPQUFQLEdBQWlCLG1CQUFqQjs7O3lCQzlCeUIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixLLEdBQVMsT0FBTyxJQUFQLENBQVksSyxDQUFyQixLO0lBQ0EsUSxHQUFZLE9BQU8sSUFBUCxDQUFZLFEsQ0FBeEIsUTtJQUNBLE8sR0FBVyxPQUFPLElBQVAsQ0FBWSxLQUFaLENBQWtCLFEsQ0FBN0IsTzs0QkFDc0MsT0FBTyxFQUFQLENBQVUsWUFBVixDQUF1QixPO0lBQTdELGUseUJBQUEsZTtJQUFpQixpQix5QkFBQSxpQjs7QUFDeEIsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjs7QUFFQSxTQUFTLGNBQVQsR0FBb0M7QUFBQTs7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDbEMsT0FBSyxJQUFMLEdBQVksUUFBUSxHQUFSLEtBQWdCLFNBQWhCLEdBQTRCLElBQTVCLEdBQW1DLFFBQVEsR0FBdkQ7QUFDQSxPQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsT0FBSyxlQUFMO0FBQ0EsT0FBSyxtQkFBTDtBQUNBLE9BQUssY0FBTDtBQUNBLE9BQUssS0FBTCxHQUFhLFFBQVEsSUFBUixLQUFpQixLQUFqQixHQUF5QixLQUF6QixHQUFpQyxJQUE5QztBQUNBLE9BQUssZ0JBQUwsR0FBd0IsUUFBUSxlQUFSLElBQTRCO0FBQUEsV0FBSSxJQUFKO0FBQUEsR0FBcEQ7QUFDQSxPQUFLLFVBQUwsR0FBa0IsUUFBUSxTQUFSLElBQXNCO0FBQUEsV0FBSSxJQUFKO0FBQUEsR0FBeEM7QUFDQTs7Ozs7OztBQU9BLE9BQUssc0JBQUwsR0FBK0I7QUFBQSxXQUFTLE1BQU0sT0FBTixLQUFrQixFQUFsQixJQUF3QixNQUFLLGVBQUwsRUFBakM7QUFBQSxHQUEvQjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLGNBQVIsRUFBd0IsV0FBeEI7O0FBRUEsSUFBTSxRQUFRLGVBQWUsU0FBN0I7O0FBRUEsTUFBTSxHQUFOLEdBQVksVUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCO0FBQUE7O0FBQ3BDLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQU0sZ0JBQWdCLE9BQU8sS0FBN0I7QUFDQSxNQUFNLGVBQWUsY0FBYyxlQUFkLEVBQXJCO0FBQ0EsTUFBTSxVQUFVLFFBQVEsT0FBeEI7QUFDQSxNQUFNLFVBQVUsY0FBYyxLQUFkLEVBQWhCO0FBQ0EsVUFBUSxjQUFjLE9BQWQsRUFBUjtBQUNFLFNBQUssTUFBTSxVQUFOLENBQWlCLE1BQXRCO0FBQ0UsVUFBTSx1QkFBdUIsY0FBYyxzQkFBZCxFQUE3QjtBQUNBLFdBQUssWUFBTCxHQUFvQixTQUFTLGFBQVQsQ0FBdUIsb0JBQXZCLENBQXBCO0FBQ0EsVUFBTSxTQUFTLGFBQWEsU0FBYixFQUFmO0FBQ0EsVUFBTSxhQUFhLGNBQWMsZ0JBQWQsRUFBbkI7QUFDQSxVQUFNLGtCQUFrQixJQUFJLEdBQUcsTUFBSCxDQUFVLE1BQWQsRUFBeEI7QUFDQSxXQUFLLGVBQUwsR0FBdUIsSUFBSSxHQUFHLFdBQUgsQ0FBZSxJQUFuQixDQUF3QjtBQUM3QyxjQUFNLEtBQUssWUFEa0M7QUFFN0MsZ0JBQVEsZUFGcUM7QUFHN0MsbUJBQVcsS0FBSyxVQUg2QjtBQUk3QywyQkFBbUIsR0FBRyxNQUFILENBQVUsU0FBVixDQUFvQixLQUpNO0FBSzdDLHlCQUFpQixLQUFLO0FBTHVCLE9BQXhCLENBQXZCO0FBT0EsV0FBSyxjQUFMLENBQW9CLEtBQUssZUFBekI7QUFDQSxXQUFLLGVBQUwsQ0FBcUIsU0FBckIsQ0FBK0IsSUFBL0I7O0FBRUEsV0FBSyxlQUFMLENBQXFCLEVBQXJCLENBQXdCLFdBQXhCLEVBQXFDLGdCQUFlO0FBQUEsWUFBYixPQUFhLFFBQWIsT0FBYTs7QUFDbEQsZUFBSyxjQUFMLEdBQXNCLE9BQXRCO0FBQ0EsaUJBQVMsZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBcUMsT0FBSyxzQkFBMUM7QUFDRCxPQUhEO0FBSUEsV0FBSyxlQUFMLENBQXFCLEVBQXJCLENBQXdCLFNBQXhCLEVBQW1DLGFBQUs7QUFDdEMsWUFBSSxnQkFBSjtBQUNBLFlBQUksT0FBSyxJQUFULEVBQWU7QUFDYixxQkFBVyxPQUFYLENBQW1CLHFCQUFhO0FBQzlCLGNBQUUsT0FBRixDQUFVLEdBQVYsQ0FBYyxVQUFVLElBQXhCLEVBQThCLElBQTlCO0FBQ0QsV0FGRDtBQUdBLG9CQUFVLElBQUksT0FBSixDQUFZO0FBQ3BCLHFCQUFTLEVBQUU7QUFEUyxXQUFaLENBQVY7QUFHQSxrQkFBUSxjQUFSO0FBQ0EsaUJBQU8sVUFBUCxDQUFrQixPQUFsQjtBQUNBLGtCQUFRLE9BQVIsQ0FBZ0IsT0FBaEIsRUFBeUIsT0FBekIsRUFBa0MsS0FBbEM7QUFDRCxTQVZELE1BVU8sVUFBVSxFQUFFLE9BQVo7QUFDUDtBQUNBLGtCQUFVLFNBQVMsNEJBQVQsQ0FBc0M7QUFDOUMsMEJBRDhDO0FBRTlDLHdCQUFjO0FBRmdDLFNBQXRDLENBQVY7QUFJQSxlQUFLLCtCQUFMLENBQXFDO0FBQ25DLHdCQURtQztBQUVuQywwQkFGbUM7QUFHbkM7QUFIbUMsU0FBckMsRUFJRyxPQUpILENBSVcsWUFBSTtBQUNiLGlCQUFPLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FBcUIsT0FBckI7QUFDQSxpQkFBSyx5QkFBTCxDQUErQixJQUEvQjtBQUNBLGlCQUFLLFNBQUwsQ0FBZSxZQUFmLEVBQTZCLE9BQTdCLEVBSGEsQ0FHMEI7QUFDdkMsWUFBRSxPQUFGLENBQVUsTUFBVjtBQUNELFNBVEQ7QUFVRCxPQTVCRDtBQTZCQTtBQWxESjtBQW9EQSxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0EzREQ7O0FBNkRBOzs7O0FBSUEsTUFBTSxxQkFBTixHQUE4QixZQUFVO0FBQ3RDLE1BQU0sZ0JBQWdCLEtBQUssYUFBTCxHQUFxQixhQUFyQixFQUF0QjtBQUNBLE1BQU0saUJBQWlCO0FBQ3JCLGdCQUFZLGFBRFM7QUFFckIsZUFBVyxhQUZVO0FBR3JCLGFBQVMsS0FBSztBQUhPLEdBQXZCO0FBS0EsTUFBSSxTQUFTLGtCQUFULENBQTRCLEtBQUssWUFBakMsQ0FBSixFQUNFLEtBQUssa0JBQUwsR0FBMEIsSUFBSSxpQkFBSixDQUFzQixjQUF0QixDQUExQixDQURGLEtBRUssSUFBSSxTQUFTLHFCQUFULENBQStCLEtBQUssWUFBcEMsQ0FBSixFQUNILEtBQUssa0JBQUwsR0FBMEIsSUFBSSxlQUFKLENBQW9CLGNBQXBCLENBQTFCO0FBQ0YsTUFBSSxLQUFLLGtCQUFULEVBQTRCO0FBQzFCLFNBQUssa0JBQUwsQ0FBd0IsU0FBeEIsQ0FBa0MsSUFBbEM7QUFDQSxTQUFLLGNBQUwsQ0FBb0IsS0FBSyxrQkFBekI7QUFDRDtBQUNGLENBZkQ7O0FBaUJBOzs7QUFHQSxNQUFNLHdCQUFOLEdBQWlDLFlBQVU7QUFDekMsTUFBSSxLQUFLLGtCQUFULEVBQTZCO0FBQzNCLFNBQUssa0JBQUwsQ0FBd0IsS0FBeEI7QUFDQSxTQUFLLGlCQUFMLENBQXVCLEtBQUssa0JBQTVCO0FBQ0EsU0FBSyxrQkFBTCxHQUEwQixJQUExQjtBQUNEO0FBQ0YsQ0FORDs7QUFRQSxNQUFNLElBQU4sR0FBYSxZQUFXO0FBQ3RCLE9BQUssaUJBQUwsQ0FBdUIsS0FBSyxlQUE1QjtBQUNBLE9BQUssd0JBQUw7QUFDQSxPQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxPQUFLLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxXQUFTLG1CQUFULENBQTZCLFNBQTdCLEVBQXdDLEtBQUssc0JBQTdDO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FQRDs7QUFTQSxNQUFNLGVBQU4sR0FBd0IsWUFBVztBQUNqQyxNQUFJLEtBQUssZUFBVCxFQUEwQjtBQUN4QixRQUFJO0FBQ0YsV0FBSyxlQUFMLENBQXFCLGVBQXJCO0FBQ0QsS0FGRCxDQUdBLE9BQU8sR0FBUCxFQUFZO0FBQ1YsY0FBUSxHQUFSLENBQVksR0FBWjtBQUNEO0FBQ0Y7QUFDRixDQVREOztBQVdBLE9BQU8sT0FBUCxHQUFpQixjQUFqQjs7Ozs7eUJDaEoyQixPQUFPLElBQVAsQ0FBWSxLO0lBQS9CLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDZCxJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLFNBQVMsMkJBQVQsR0FBaUQ7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDL0MsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsMkJBQVIsRUFBcUMsV0FBckM7O0FBRUEsSUFBTSxRQUFRLDRCQUE0QixTQUExQzs7QUFFQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBRG9DLE1BRTVCLEtBRjRCLEdBRVIsTUFGUSxDQUU1QixLQUY0QjtBQUFBLE1BRXJCLFFBRnFCLEdBRVIsTUFGUSxDQUVyQixRQUZxQjs7QUFHcEMsTUFBTSxVQUFVLE1BQU0sS0FBTixFQUFoQjtBQUNBLE1BQU0sVUFBVSxRQUFRLE9BQXhCO0FBQ0EsTUFBTSxVQUFVLFNBQVMsQ0FBVCxDQUFoQjtBQUNBLE1BQU0sa0JBQWtCLFFBQVEsV0FBUixFQUF4QjtBQUNBLE1BQU0sa0JBQWtCLFFBQVEsS0FBUixFQUF4QjtBQUNBLGtCQUFnQixjQUFoQiw4QkFBbUMsZ0JBQWdCLGNBQWhCLEVBQW5DLHNCQUF3RSxTQUFTLENBQVQsRUFBWSxXQUFaLEdBQTBCLGNBQTFCLEVBQXhFO0FBQ0E7OztBQUdBLE9BQUssK0JBQUwsQ0FBcUM7QUFDbkMsa0JBRG1DO0FBRW5DLG9CQUZtQztBQUduQztBQUhtQyxHQUFyQyxFQUlHLE9BSkgsQ0FJVyxZQUFJO0FBQ2IsWUFBUSxVQUFSLENBQW1CLE9BQW5CLEVBQTRCLE9BQTVCLEVBQXFDLGVBQXJDO0FBQ0EsV0FBTyxRQUFQLEdBQWtCLENBQUMsT0FBRCxDQUFsQjtBQUNBLE1BQUUsT0FBRixDQUFVLE1BQVY7QUFDRCxHQVJEO0FBU0E7Ozs7QUFJQSxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0ExQkQ7O0FBNEJBLE1BQU0sSUFBTixHQUFhLFlBQVcsQ0FDdkIsQ0FERDs7QUFJQSxPQUFPLE9BQVAsR0FBaUIsMkJBQWpCOzs7eUJDM0MyQixPQUFPLElBQVAsQ0FBWSxLO0lBQS9CLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNOLEcsR0FBUSxPQUFPLEcsQ0FBZixHOztBQUNSLElBQU0sSUFBSSxPQUFPLElBQVAsQ0FBWSxJQUFaLENBQWlCLE9BQTNCO0FBQ0EsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sK0JBQStCLFFBQVEscURBQVIsQ0FBckM7O0FBRUEsU0FBUyw4QkFBVCxHQUFvRDtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNsRCxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSw4QkFBUixFQUF3QyxXQUF4Qzs7QUFFQSxJQUFNLFFBQVEsK0JBQStCLFNBQTdDOztBQUVBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQjtBQUNwQyxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxNQUFNLGdCQUFnQixPQUFPLEtBQTdCO0FBQ0EsTUFBTSxXQUFXLE9BQU8sUUFBeEI7QUFDQSxNQUFNLGFBQWEsRUFBbkI7QUFDQSxnQkFBYyxnQkFBZCxHQUFpQyxPQUFqQyxDQUF5QyxnQkFBbUI7QUFBQSxRQUFqQixJQUFpQixRQUFqQixJQUFpQjtBQUFBLFFBQVgsS0FBVyxRQUFYLEtBQVc7O0FBQzFELGVBQVcsSUFBWCxJQUFtQixLQUFuQjtBQUNELEdBRkQ7QUFHQSxNQUFJLFNBQVMsTUFBVCxLQUFvQixDQUF4QixFQUEyQixFQUFFLE9BQUYsQ0FBVSxNQUFWLEVBQTNCLEtBQ0s7QUFDSCxRQUFNLFVBQVUsRUFBaEI7QUFDQSxRQUFNLGNBQWMsNkJBQTZCO0FBQy9DLHdCQUQrQztBQUUvQyxzQkFGK0M7QUFHL0M7QUFIK0MsS0FBN0IsQ0FBcEI7QUFLQSxRQUFNLFVBQVUsWUFBWSxNQUFaLEdBQXFCLEdBQXJDO0FBQ0EsUUFBTSxTQUFTLElBQUksZUFBSixDQUFvQjtBQUNqQyxhQUFPLEVBQUUsdURBQUYsQ0FEMEI7QUFFakMsaUJBQVcsWUFGc0I7QUFHakMsbUJBQWEsS0FIb0I7QUFJakMsc0JBSmlDO0FBS2pDLGVBQVM7QUFDUCxnQkFBUTtBQUNOLGlCQUFPLFFBREQ7QUFFTixxQkFBVyxZQUZMO0FBR04sa0JBSE0sc0JBR0k7QUFDUixjQUFFLE1BQUY7QUFDRDtBQUxLLFNBREQ7QUFRUCxZQUFJO0FBQ0YsaUJBQU8sSUFETDtBQUVGLHFCQUFXLGFBRlQ7QUFHRixvQkFBVSxvQkFBTTtBQUNkLG1CQUFPLFFBQVAsR0FBa0IsT0FBbEI7QUFDQSxjQUFFLE9BQUYsQ0FBVSxNQUFWO0FBQ0Q7QUFOQztBQVJHO0FBTHdCLEtBQXBCLENBQWY7QUF1QkEsV0FBTyxJQUFQLENBQVksb0JBQVosRUFBa0MsSUFBbEMsQ0FBdUMsVUFBdkMsRUFBbUQsSUFBbkQ7QUFDQSxnQkFBWSxNQUFaLENBQW1CLFNBQW5CLEVBQThCO0FBQUEsYUFBVyxPQUFPLElBQVAsQ0FBWSxvQkFBWixFQUFrQyxJQUFsQyxDQUF1QyxVQUF2QyxFQUFtRCxZQUFZLElBQS9ELENBQVg7QUFBQSxLQUE5QjtBQUNEO0FBQ0QsU0FBTyxFQUFFLE9BQUYsRUFBUDtBQUNELENBNUNEOztBQThDQSxNQUFNLElBQU4sR0FBYSxZQUFXO0FBQ3RCLFNBQU8sSUFBUDtBQUNELENBRkQ7O0FBSUEsT0FBTyxPQUFQLEdBQWlCLDhCQUFqQjs7O3lCQ2hFeUIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTCxHLEdBQVEsT0FBTyxHLENBQWYsRzt3QkFDYSxPQUFPLElBQVAsQ0FBWSxJO0lBQTFCLEMscUJBQUEsQztJQUFHLE8scUJBQUEsTzs7QUFDVixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLElBQU0sVUFBVTtBQUNkLFVBQVE7QUFDTixTQUFLLGFBQVMsTUFBVCxFQUFpQjtBQUNwQixVQUFJLElBQUksRUFBRSxRQUFGLEVBQVI7QUFDQSxVQUFNLGlCQUFpQixRQUFRLGtDQUFSLENBQXZCO0FBQ0EsVUFBTSxRQUFRLE9BQU8sS0FBckI7QUFDQSxVQUFNLGVBQWUsTUFBTSxlQUFOLEVBQXJCO0FBQ0EsVUFBTSxVQUFVLE9BQU8sUUFBUCxDQUFnQixDQUFoQixDQUFoQjtBQUNBLFVBQU0sVUFBVSxNQUFNLEtBQU4sRUFBaEI7QUFDQSxVQUFNLGlCQUFpQixNQUFNLFdBQU4sRUFBdkI7QUFDQSxVQUFNLG9CQUFvQixlQUFlLE1BQWYsSUFBMEIsZUFBZSx5QkFBZixDQUF5QztBQUMzRix3QkFEMkY7QUFFM0YsbUJBQVcsTUFBTSxZQUFOLEdBQXFCLFFBQXJCO0FBRmdGLE9BQXpDLEVBR2pELE1BSGlELEdBR3hDLENBSFo7O0FBS0EsVUFBSSxNQUFKLENBQVcsT0FBWCxVQUEwQixRQUFRLGlDQUFSLENBQTFCLHNFQUNtRCxvQkFBbUIsUUFBUSwyQ0FBUixDQUFuQixHQUEwRSxFQUQ3SCxjQUN5SSxrQkFBVTtBQUNqSixZQUFJLE1BQUosRUFBWTtBQUNWLHVCQUFhLFNBQWIsR0FBeUIsYUFBekIsQ0FBdUMsT0FBdkM7QUFDQSx5QkFBZSx1Q0FBZixDQUF1RDtBQUNyRCw0QkFEcUQ7QUFFckQ7QUFGcUQsV0FBdkQ7QUFJQSxZQUFFLE9BQUYsQ0FBVSxNQUFWO0FBQ0QsU0FQRCxNQU9TLEVBQUUsTUFBRixDQUFTLE1BQVQ7QUFFVixPQVhEO0FBWUEsYUFBTyxFQUFFLE9BQUYsRUFBUDtBQUNEO0FBM0JLLEdBRE07QUE4QmQsVUFBUTtBQUNOLE9BRE0sZUFDRixNQURFLEVBQ007QUFDVixVQUFJLElBQUksRUFBRSxRQUFGLEVBQVI7QUFDQSxVQUFJLFFBQVEsT0FBTyxLQUFuQjtBQUNBLFVBQU0sVUFBVTtBQUNkLGNBQU07QUFDSixpQkFBTyxFQUFFLE1BQUYsQ0FESDtBQUVKLHFCQUFXLGFBRlA7QUFHSixvQkFBVSxvQkFBWTtBQUNwQixjQUFFLE9BQUYsQ0FBVSxNQUFWO0FBQ0Q7QUFMRyxTQURRO0FBUWQsZ0JBQVE7QUFDTixpQkFBTyxRQUFRLEVBQUUsWUFBRixDQUFSLEdBQTBCLEVBQUUsT0FBRixDQUQzQjtBQUVOLHFCQUFXLFlBRkw7QUFHTixvQkFBVSxvQkFBWTtBQUNwQixjQUFFLE1BQUY7QUFDRDtBQUxLO0FBUk0sT0FBaEI7QUFnQkEsVUFBSSxLQUFKLEVBQVc7QUFDVCxnQkFBUSxVQUFSLEdBQXFCO0FBQ25CLGlCQUFRLEVBQUUsT0FBRixDQURXO0FBRW5CLHFCQUFXLGFBRlE7QUFHbkIsb0JBQVUsb0JBQVk7QUFDcEIsbUJBQU8sS0FBUCxDQUFhLE1BQWI7QUFDRDtBQUxrQixTQUFyQjtBQU9EO0FBQ0Q7QUFDQSxVQUFNLFNBQVMsSUFBSSxNQUFKLENBQVcsTUFBWCxDQUFrQjtBQUMvQixpQkFBUyxPQUFPLE9BRGU7QUFFL0IsZUFBTyxRQUFRLGlDQUFSLElBQTZDLEdBQTdDLEdBQWtELE9BQU8sS0FBUCxDQUFhLE9BQWIsRUFBbEQsR0FBMkUsR0FGbkQ7QUFHL0I7QUFIK0IsT0FBbEIsQ0FBZjtBQUtBLGFBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRDtBQXBDSztBQTlCTSxDQUFoQjs7QUFzRUEsU0FBUyxXQUFULEdBQW1DO0FBQUEsTUFBZCxPQUFjLHVFQUFKLEVBQUk7O0FBQ2pDLE1BQU0sT0FBTyxRQUFRLElBQVIsSUFBZ0IsU0FBN0I7QUFDQSxPQUFLLE9BQUwsR0FBZSxRQUFRLElBQVIsQ0FBZjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLFdBQVIsRUFBcUIsV0FBckI7O0FBRUEsSUFBTSxRQUFRLFlBQVksU0FBMUI7O0FBRUEsTUFBTSxHQUFOLEdBQVksVUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCO0FBQ3BDLE1BQU0sVUFBVSxLQUFLLE9BQUwsQ0FBYSxHQUFiLENBQWlCLE1BQWpCLEVBQXlCLE9BQXpCLENBQWhCO0FBQ0EsU0FBTyxRQUFQLElBQW1CLEtBQUssZ0NBQUwsQ0FBc0M7QUFDdkQ7QUFEdUQsR0FBdEMsQ0FBbkI7QUFHQSxTQUFPLE9BQVA7QUFDRCxDQU5EOztBQVFBLE1BQU0sSUFBTixHQUFhLFlBQVc7QUFDdEIsU0FBTyxJQUFQO0FBQ0QsQ0FGRDs7QUFNQSxPQUFPLE9BQVAsR0FBaUIsV0FBakI7Ozs7O0lDbkdPLE8sR0FBVyxPQUFPLFEsQ0FBbEIsTzt5QkFDb0IsT0FBTyxJQUFQLENBQVksSztJQUEvQixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixHLEdBQVEsT0FBTyxHLENBQWYsRzs7QUFDUixJQUFNLElBQUksT0FBTyxJQUFQLENBQVksSUFBWixDQUFpQixPQUEzQjtJQUNRLE8sR0FBWSxPQUFPLElBQVAsQ0FBWSxLQUFaLENBQWtCLFEsQ0FBOUIsTzs7QUFDUixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBTSw2Q0FBNkMsUUFBUSwrREFBUixDQUFuRDs7QUFFQSxTQUFTLDhCQUFULEdBQW9EO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ2xELE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLDhCQUFSLEVBQXdDLFdBQXhDOztBQUVBLElBQU0sUUFBUSwrQkFBK0IsU0FBN0M7O0FBRUEsTUFBTSxHQUFOLEdBQVksVUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCO0FBQUE7O0FBQ3BDLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQU0sZ0JBQWdCLE9BQU8sS0FBN0I7QUFDQSxNQUFNLGVBQWUsY0FBYyxlQUFkLEVBQXJCO0FBQ0EsTUFBTSxVQUFVLGNBQWMsS0FBZCxFQUFoQjtBQUNBLE1BQU0sYUFBYSxjQUFjLGdCQUFkLEdBQWlDLE1BQWpDLENBQXdDO0FBQUEsV0FBYSxDQUFDLFVBQVUsRUFBeEI7QUFBQSxHQUF4QyxDQUFuQjtBQUNBLE1BQU0sVUFBVSxRQUFRLE9BQXhCO0FBQ0EsTUFBTSxlQUFlLGNBQWMsZUFBZCxFQUFyQjtBQUNBLE1BQU0sU0FBUyxhQUFhLFNBQWIsRUFBZjtBQUNBLE1BQU0sV0FBVyxLQUFLLGdDQUFMLENBQXNDO0FBQ3JELG9CQURxRDtBQUVyRDtBQUZxRCxHQUF0QyxDQUFqQjtBQUlBLE1BQU0sbUJBQW1CLEVBQXpCO0FBQ0EsTUFBTSxjQUFjLDJDQUEyQztBQUM3RCxzQkFENkQ7QUFFN0Q7QUFGNkQsR0FBM0MsQ0FBcEI7QUFJQSxNQUFNLFVBQVUsWUFBWSxNQUFaLEdBQXFCLEdBQXJDO0FBQ0EsTUFBTSxTQUFTLElBQUksZUFBSixDQUFvQjtBQUNqQyxXQUFPLEVBQUUscURBQUYsQ0FEMEI7QUFFakMsZUFBVyxZQUZzQjtBQUdqQyxpQkFBYSxLQUhvQjtBQUlqQyxvQkFKaUM7QUFLakMsYUFBUztBQUNQLGNBQVE7QUFDTixlQUFPLFFBREQ7QUFFTixtQkFBVyxZQUZMO0FBR04sZ0JBSE0sc0JBR0k7QUFDUixZQUFFLE1BQUY7QUFDRDtBQUxLLE9BREQ7QUFRUCxVQUFJO0FBQ0YsZUFBTyxJQURMO0FBRUYsbUJBQVcsYUFGVDtBQUdGO0FBQUEsNkVBQVU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0YsNEJBREUsR0FDUyxFQURUO0FBRUosdURBRkksR0FFa0MsS0FGbEM7QUFHRixvQ0FIRSxHQUdpQixFQUhqQjs7QUFJUixxQ0FBaUIsT0FBakIsQ0FBeUIsMkJBQW1CO0FBQzFDOzs7QUFHQSwwQkFBSSxNQUFLLGlCQUFMLEdBQXlCLG1CQUF6QixDQUE2QyxnQkFBZ0IsU0FBN0QsQ0FBSixFQUE2RTtBQUMzRSx5Q0FBaUIsSUFBakIsQ0FBc0IsTUFBSyxpQkFBTCxHQUF5QiwwQkFBekIsQ0FBb0Q7QUFDeEUsbUNBQVMsZ0JBQWdCLFNBRCtDO0FBRXhFLCtCQUFLLGdCQUFnQixHQUFoQixDQUFvQixPQUFwQjtBQUZtRSx5QkFBcEQsQ0FBdEI7QUFJRCx1QkFMRCxNQUtPO0FBQ0wseUNBQWlCLElBQWpCLENBQXNCO0FBQ3BCLHNDQUFZLGdCQUFnQixhQUFoQjtBQURRLHlCQUF0QjtBQUdEO0FBQ0YscUJBZEQ7QUFKUTtBQUFBLDJCQW1Cc0IsUUFBUSxVQUFSLENBQW1CLGdCQUFuQixDQW5CdEI7O0FBQUE7QUFtQkYsbUNBbkJFOztBQW9CUixvQ0FBZ0IsT0FBaEIsQ0FBd0IsaUJBQStCLEtBQS9CLEVBQXlDO0FBQUEsMEJBQXZDLE1BQXVDLFNBQXZDLE1BQXVDO0FBQUEsMEJBQXpCLFlBQXlCLFNBQS9CLEtBQStCOztBQUMvRCwwQkFBSSxXQUFXLFdBQWYsRUFBNEI7QUFDMUIsNEJBQU0sa0JBQWtCLGlCQUFpQixLQUFqQixDQUF4QjtBQUNBLG1DQUFXLE9BQVgsQ0FBbUIsaUJBQXdDO0FBQUEsOEJBQXRDLElBQXNDLFNBQXRDLElBQXNDO0FBQUEsNERBQWhDLFFBQWdDLENBQXJCLFFBQXFCO0FBQUEsOEJBQXJCLFFBQXFCLHlDQUFaLEtBQVk7O0FBQ3pELDhCQUFNLFFBQVEsYUFBYSxVQUFiLENBQXdCLElBQXhCLEtBQWlDLElBQS9DO0FBQ0EsZ0VBQXNDLHVDQUF3QyxVQUFVLElBQVYsSUFBa0IsUUFBaEc7QUFDQSwwQ0FBZ0IsR0FBaEIsQ0FBb0IsSUFBcEIsRUFBMEIsS0FBMUI7QUFDRCx5QkFKRDtBQUtBLDRCQUFNLFVBQVUsSUFBSSxPQUFKLENBQVk7QUFDMUIsbUNBQVMsZUFEaUI7QUFFMUIsc0NBQVksV0FBVyxHQUFYLENBQWU7QUFBQSxtQ0FBYSxVQUFVLElBQXZCO0FBQUEsMkJBQWY7QUFGYyx5QkFBWixDQUFoQjtBQUlBLGdDQUFRLGNBQVI7QUFDQSwrQkFBTyxVQUFQLENBQWtCLE9BQWxCO0FBQ0EsaUNBQVMsSUFBVCxDQUFjLE9BQWQ7QUFDQSxnQ0FBUSxPQUFSLENBQWdCLE9BQWhCLEVBQXlCLE9BQXpCLEVBQWtDLEtBQWxDO0FBQ0Q7QUFDRixxQkFqQkQ7QUFrQkEsd0JBQUksU0FBUyxNQUFULElBQW1CLFNBQVMsTUFBVCxLQUFvQixDQUEzQyxFQUE4QyxPQUFPLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FBcUIsU0FBUyxDQUFULENBQXJCLEVBQTlDLEtBQ0s7QUFDSCw2REFBdUMsSUFBSSxlQUFKLENBQW9CO0FBQ3pELDhCQUFNLFNBRG1EO0FBRXpELGlDQUFTLDJFQUZnRDtBQUd6RCxtQ0FBVyxJQUg4QztBQUl6RCxrQ0FBVTtBQUorQyx1QkFBcEIsQ0FBdkM7QUFNQSw2QkFBTyxRQUFQLENBQWdCLElBQWhCLENBQXFCLFFBQXJCO0FBQ0Q7QUFDRCw2QkFBUyxPQUFULENBQWlCO0FBQUEsNkJBQVcsTUFBSyxTQUFMLENBQWUsWUFBZixFQUE2QixPQUE3QixDQUFYO0FBQUEscUJBQWpCO0FBQ0Esc0JBQUUsT0FBRixDQUFVLE1BQVY7O0FBakRRO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBQVY7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFIRTtBQVJHO0FBTHdCLEdBQXBCLENBQWY7QUFzRUEsU0FBTyxJQUFQLENBQVksb0JBQVosRUFBa0MsSUFBbEMsQ0FBdUMsVUFBdkMsRUFBbUQsSUFBbkQ7QUFDQSxjQUFZLE1BQVosQ0FBbUIsa0JBQW5CLEVBQXVDO0FBQUEsV0FBWSxPQUFPLElBQVAsQ0FBWSxvQkFBWixFQUFrQyxJQUFsQyxDQUF1QyxVQUF2QyxFQUFtRCxTQUFTLE1BQVQsS0FBb0IsQ0FBdkUsQ0FBWjtBQUFBLEdBQXZDO0FBQ0EsU0FBTyxFQUFFLE9BQUYsRUFBUDtBQUNELENBNUZEOztBQThGQSxNQUFNLElBQU4sR0FBYSxZQUFXO0FBQ3RCLFNBQU8sSUFBUDtBQUNELENBRkQ7O0FBS0EsT0FBTyxPQUFQLEdBQWlCLDhCQUFqQjs7Ozs7SUNuSE8sTyxHQUFXLE9BQU8sUSxDQUFsQixPO3lCQUNvQixPQUFPLElBQVAsQ0FBWSxLO0lBQS9CLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNOLEcsR0FBUSxPQUFPLEcsQ0FBZixHOztBQUNSLElBQU0sSUFBSSxPQUFPLElBQVAsQ0FBWSxJQUFaLENBQWlCLE9BQTNCO0lBQ1EsTyxHQUFZLE9BQU8sSUFBUCxDQUFZLEtBQVosQ0FBa0IsUSxDQUE5QixPOztBQUNSLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7QUFDQSxJQUFNLG1EQUFtRCxRQUFRLHFFQUFSLENBQXpEOztBQUVBLFNBQVMscUNBQVQsR0FBMkQ7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTtBQUFBLE1BQ2xELFNBRGtELEdBQ2pCLE9BRGlCLENBQ2xELFNBRGtEO0FBQUEsTUFDdkMsUUFEdUMsR0FDakIsT0FEaUIsQ0FDdkMsUUFEdUM7QUFBQSxNQUM3QixRQUQ2QixHQUNqQixPQURpQixDQUM3QixRQUQ2Qjs7QUFFekQsT0FBSyxTQUFMLEdBQWlCLFNBQWpCO0FBQ0EsT0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsT0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEscUNBQVIsRUFBK0MsV0FBL0M7O0FBRUEsSUFBTSxRQUFRLHNDQUFzQyxTQUFwRDs7QUFHQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFBQTs7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBRG9DLE1BRTdCLFFBRjZCLEdBRUksTUFGSixDQUU3QixRQUY2QjtBQUFBLE1BRWIsYUFGYSxHQUVJLE1BRkosQ0FFbkIsS0FGbUI7O0FBR3BDLE1BQU0sVUFBVSxjQUFjLEtBQWQsRUFBaEI7QUFDQSxNQUFNLGFBQWEsY0FBYyxnQkFBZCxHQUFpQyxNQUFqQyxDQUF3QztBQUFBLFdBQWEsQ0FBQyxVQUFVLEVBQXhCO0FBQUEsR0FBeEMsQ0FBbkI7QUFDQSxNQUFNLFVBQVUsUUFBUSxPQUF4QjtBQUNBLE1BQU0sZUFBZSxjQUFjLGVBQWQsRUFBckI7QUFDQSxNQUFNLFNBQVMsYUFBYSxTQUFiLEVBQWY7QUFDQSxNQUFNLG1CQUFtQixFQUF6QjtBQUNBLE1BQU0sY0FBYyxpREFBaUQ7QUFDbkUsY0FBVSxLQUFLLFFBRG9EO0FBRW5FLFdBQU8sS0FBSyxTQUZ1RDtBQUduRSxzQkFIbUU7QUFJbkU7QUFKbUUsR0FBakQsQ0FBcEI7QUFNQSxNQUFNLFVBQVUsWUFBWSxNQUFaLEdBQXFCLEdBQXJDO0FBQ0EsTUFBTSxTQUFTLElBQUksZUFBSixDQUFvQjtBQUNqQyxXQUFPLEVBQUUsdURBQUYsQ0FEMEI7QUFFakMsZUFBVyxZQUZzQjtBQUdqQyxpQkFBYSxLQUhvQjtBQUlqQyxvQkFKaUM7QUFLakMsYUFBUztBQUNQLGNBQVE7QUFDTixlQUFPLFFBREQ7QUFFTixtQkFBVyxZQUZMO0FBR04sZ0JBSE0sc0JBR0k7QUFDUixZQUFFLE1BQUY7QUFDRDtBQUxLLE9BREQ7QUFRUCxVQUFJO0FBQ0YsZUFBTyxJQURMO0FBRUYsbUJBQVcsYUFGVDtBQUdGO0FBQUEsNkVBQVU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0YsNEJBREUsR0FDUyxFQURUO0FBRUosdURBRkksR0FFa0MsS0FGbEM7O0FBQUEseUJBR0osaUJBQWlCLE1BSGI7QUFBQTtBQUFBO0FBQUE7O0FBSUEsbUNBSkEsR0FJa0IsaUJBQWlCLENBQWpCLENBSmxCOztBQUtBLGdFQUxBLEdBSytDLFNBQS9DLDRDQUErQyxhQUFjO0FBQ2pFLGlDQUFXLE9BQVgsQ0FBbUIsaUJBQXdDO0FBQUEsNEJBQXRDLElBQXNDLFNBQXRDLElBQXNDO0FBQUEsMERBQWhDLFFBQWdDLENBQXJCLFFBQXFCO0FBQUEsNEJBQXJCLFFBQXFCLHlDQUFaLEtBQVk7O0FBQ3pELDRCQUFNLFFBQVEsV0FBVyxJQUFYLEtBQW9CLElBQWxDO0FBQ0EsOERBQXNDLHVDQUF3QyxVQUFVLElBQVYsSUFBa0IsUUFBaEc7QUFDQSx3Q0FBZ0IsR0FBaEIsQ0FBb0IsSUFBcEIsRUFBMEIsS0FBMUI7QUFDRCx1QkFKRDtBQUtBLDBCQUFNLFVBQVUsSUFBSSxPQUFKLENBQVk7QUFDMUIsaUNBQVMsZUFEaUI7QUFFMUIsb0NBQVksV0FBVyxHQUFYLENBQWU7QUFBQSxpQ0FBYSxVQUFVLElBQXZCO0FBQUEseUJBQWY7QUFGYyx1QkFBWixDQUFoQjtBQUlBLDhCQUFRLGNBQVI7QUFDQSw2QkFBTyxVQUFQLENBQWtCLE9BQWxCO0FBQ0EsK0JBQVMsSUFBVCxDQUFjLE9BQWQ7QUFDQSw4QkFBUSxPQUFSLENBQWdCLE9BQWhCLEVBQXlCLE9BQXpCLEVBQWtDLEtBQWxDO0FBQ0QscUJBbkJLO0FBb0JOOzs7QUFwQk0seUJBcUJGLE1BQUssUUFyQkg7QUFBQTtBQUFBO0FBQUE7O0FBQUEseUJBc0JBLE1BQUssUUF0Qkw7QUFBQTtBQUFBO0FBQUE7O0FBdUJGLGlFQUE2QyxnQkFBZ0IsYUFBaEIsRUFBN0M7QUF2QkU7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQSwyQkEwQmtDLE1BQUssaUJBQUwsR0FBeUIsMEJBQXpCLENBQW9EO0FBQ3BGLCtCQUFTLE1BQUssU0FBTCxDQUFlLEtBQWYsRUFEMkU7QUFFcEYsMkJBQUssZ0JBQWdCLEdBQWhCLENBQW9CLE9BQXBCO0FBRitFLHFCQUFwRCxDQTFCbEM7O0FBQUE7QUEwQk0sdUNBMUJOOztBQThCQSx3QkFBSSxtQkFBSixFQUNFLDZDQUE2QyxvQkFBb0IsVUFBakU7QUEvQkY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBc0NSLHdCQUFJLFNBQVMsTUFBVCxJQUFtQixTQUFTLE1BQVQsS0FBb0IsQ0FBM0MsRUFBOEMsT0FBTyxRQUFQLENBQWdCLElBQWhCLENBQXFCLFNBQVMsQ0FBVCxDQUFyQixFQUE5QyxLQUNLO0FBQ0gsNkRBQXVDLElBQUksZUFBSixDQUFvQjtBQUN6RCw4QkFBTSxTQURtRDtBQUV6RCxpQ0FBUywyRUFGZ0Q7QUFHekQsbUNBQVcsSUFIOEM7QUFJekQsa0NBQVU7QUFKK0MsdUJBQXBCLENBQXZDO0FBTUEsNkJBQU8sUUFBUCxDQUFnQixJQUFoQixDQUFxQixRQUFyQjtBQUNEO0FBQ0QsNkJBQVMsT0FBVCxDQUFpQjtBQUFBLDZCQUFXLE1BQUssU0FBTCxDQUFlLFlBQWYsRUFBNkIsT0FBN0IsQ0FBWDtBQUFBLHFCQUFqQjtBQUNBLHNCQUFFLE9BQUYsQ0FBVSxNQUFWOztBQWpEUTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUFWOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBSEU7QUFSRztBQUx3QixHQUFwQixDQUFmO0FBc0VBLFNBQU8sSUFBUCxDQUFZLG9CQUFaLEVBQWtDLElBQWxDLENBQXVDLFVBQXZDLEVBQW1ELElBQW5EO0FBQ0EsY0FBWSxNQUFaLENBQW1CLGtCQUFuQixFQUF1QztBQUFBLFdBQVksT0FBTyxJQUFQLENBQVksb0JBQVosRUFBa0MsSUFBbEMsQ0FBdUMsVUFBdkMsRUFBbUQsU0FBUyxNQUFULEtBQW9CLENBQXZFLENBQVo7QUFBQSxHQUF2QztBQUNBLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXpGRDs7QUEyRkEsTUFBTSxJQUFOLEdBQWEsWUFBVztBQUN0QixTQUFPLElBQVA7QUFDRCxDQUZEOztBQUlBLE9BQU8sT0FBUCxHQUFpQixxQ0FBakI7Ozt5QkNwSDJCLE9BQU8sSUFBUCxDQUFZLEs7SUFBL0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUEsU0FBUyxpQkFBVCxDQUEyQixPQUEzQixFQUFvQztBQUNsQyxPQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxPQUFLLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsaUJBQVIsRUFBMkIsV0FBM0I7O0FBRUEsSUFBTSxRQUFRLGtCQUFrQixTQUFoQzs7QUFHQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBQ0EsTUFBTSxlQUFlLE9BQU8sS0FBNUI7QUFDQSxNQUFNLFVBQVUsYUFBYSxLQUFiLEVBQWhCO0FBQ0EsTUFBTSxVQUFVLFFBQVEsT0FBeEI7QUFDQSxNQUFNLFVBQVUsT0FBTyxRQUFQLENBQWdCLENBQWhCLENBQWhCO0FBQ0EsTUFBTSxpQkFBaUIsUUFBUSxrQ0FBUixDQUF2QjtBQUNBLE1BQU0sa0JBQWtCLFFBQVEsbUNBQVIsQ0FBeEI7QUFDQSxNQUFNLFlBQVksZUFBZSx5QkFBZixDQUF5QztBQUN6RCxvQkFEeUQ7QUFFekQsZUFBVyxhQUFhLFlBQWIsS0FBOEIsYUFBYSxZQUFiLEdBQTRCLFFBQTVCLEVBQTlCLEdBQXVFO0FBRnpCLEdBQXpDLEVBR2YsTUFIZSxDQUdSLG9CQUFZO0FBQ3BCLFFBQU0sYUFBYSxlQUFlLGNBQWYsQ0FBOEI7QUFDL0Msc0JBRCtDO0FBRS9DO0FBRitDLEtBQTlCLENBQW5CO0FBSUEsUUFBTSxnQkFBZ0IsZUFBZSxZQUFmLENBQTRCLFVBQTVCLENBQXRCOztBQUxvQixnQ0FNRCxlQUFlLDhCQUFmLENBQThDO0FBQy9ELGVBQVMsVUFEc0Q7QUFFL0Q7QUFGK0QsS0FBOUMsQ0FOQztBQUFBLFFBTWIsUUFOYSx5QkFNYixRQU5hOztBQVVwQixRQUFNLFFBQVEsY0FBYyxnQkFBZCxHQUFpQyxJQUFqQyxDQUFzQyxVQUFDLEtBQUQsRUFBVztBQUM3RCxhQUFPLE1BQU0sSUFBTixLQUFlLFFBQXRCO0FBQ0QsS0FGYSxDQUFkO0FBR0EsV0FBTyxDQUFDLE1BQU0sUUFBTixDQUFlLFFBQXZCO0FBQ0QsR0FqQmlCLENBQWxCO0FBa0JBLE1BQU0sVUFBVSxVQUFVLE1BQVYsR0FBbUIsZUFBZSwyQkFBZixDQUEyQyxPQUEzQyxFQUFvRDtBQUNyRixvQkFEcUY7QUFFckY7QUFGcUYsR0FBcEQsQ0FBbkIsR0FHWCxRQUFRLE9BQVIsRUFITDtBQUlBLFVBQVEsSUFBUixDQUFhLFlBQU07QUFDakIsUUFBTSxxQkFBcUIsZUFBZSxxQkFBZixDQUFxQztBQUM5RCxzQkFEOEQ7QUFFOUQsMEJBRjhEO0FBRzlEO0FBSDhELEtBQXJDLENBQTNCO0FBS0EsV0FBTyxRQUFQLEdBQWtCLENBQUMsT0FBRCxDQUFsQjtBQUNBLHVCQUFtQixPQUFuQixDQUEyQixVQUFDLGlCQUFELEVBQXVCO0FBQUEsVUFDekMsUUFEeUMsR0FDbEIsaUJBRGtCLENBQ3pDLFFBRHlDO0FBQUEsVUFDL0IsU0FEK0IsR0FDbEIsaUJBRGtCLENBQy9CLFNBRCtCOztBQUVoRCxVQUFNLGtCQUFrQixJQUFJLGVBQUosQ0FBb0IsT0FBcEIsRUFBNkI7QUFDbkQsMEJBRG1EO0FBRW5EO0FBRm1ELE9BQTdCLENBQXhCO0FBSUEsVUFBTSxrQkFBa0IsVUFBVSxNQUFsQztBQUNBLFdBQUssSUFBSSxRQUFRLENBQWpCLEVBQW9CLFFBQVEsZUFBNUIsRUFBOEMsT0FBOUMsRUFBdUQ7QUFDckQsd0JBQWdCLGNBQWhCLENBQStCLENBQS9CLEVBQWtDLEtBQWxDO0FBQ0Q7QUFDRixLQVZEO0FBV0EsWUFBUSxVQUFSLENBQW1CLE9BQW5CLEVBQTRCLE9BQTVCO0FBQ0EsTUFBRSxPQUFGLENBQVUsTUFBVjtBQUNELEdBcEJEOztBQXNCQSxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0FyREQ7O0FBdURBLE1BQU0sSUFBTixHQUFhLFlBQVc7QUFDdEIsU0FBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO0FBQ3RDLFlBQVEsSUFBUjtBQUNELEdBRk0sQ0FBUDtBQUdELENBSkQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLGlCQUFqQjs7O3lCQzVFMkIsT0FBTyxJQUFQLENBQVksSztJQUEvQixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87NEJBQytELE9BQU8sSUFBUCxDQUFZLFE7SUFBakYsK0IseUJBQUEsK0I7SUFBaUMsK0IseUJBQUEsK0I7O0FBQ3pDLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUEsU0FBUyw4QkFBVCxHQUFvRDtBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNsRCxPQUFLLHNCQUFMLEdBQThCLElBQTlCO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsOEJBQVIsRUFBd0MsV0FBeEM7O0FBRUEsSUFBTSxRQUFRLCtCQUErQixTQUE3Qzs7QUFFQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBQ0EsTUFBTSxlQUFlLE9BQU8sS0FBNUI7QUFDQSxNQUFNLGVBQWUsT0FBTyxLQUFQLENBQWEsZUFBYixFQUFyQjtBQUNBLE1BQU0sVUFBVSxhQUFhLEtBQWIsRUFBaEI7QUFDQSxNQUFNLFVBQVUsUUFBUSxPQUF4QjtBQUxvQyxNQU03QixRQU42QixHQU1MLE1BTkssQ0FNN0IsUUFONkI7QUFBQSxNQU1uQixVQU5tQixHQU1MLE1BTkssQ0FNbkIsVUFObUI7O0FBT3BDLE1BQU0sVUFBVSxTQUFTLENBQVQsQ0FBaEI7QUFDQSxNQUFNLGtCQUFrQixRQUFRLEtBQVIsRUFBeEI7QUFDQSxNQUFNLFdBQVcsUUFBUSxXQUFSLEVBQWpCO0FBQ0EsTUFBTSxhQUFhLGdDQUFnQyxRQUFoQyxDQUFuQjtBQUNBLE1BQU0sU0FBUyxJQUFJLEdBQUcsTUFBSCxDQUFVLE1BQWQsQ0FBcUI7QUFDbEMsY0FBVSxXQUFXLEdBQVgsQ0FBZTtBQUFBLGFBQVksSUFBSSxHQUFHLE9BQVAsQ0FBZSxRQUFmLENBQVo7QUFBQSxLQUFmO0FBRHdCLEdBQXJCLENBQWY7QUFHQSxNQUFNLE1BQU0sS0FBSyxNQUFMLEVBQVo7QUFDQSxNQUFNLFFBQVEsSUFBSSxzQkFBSixDQUEyQixVQUEzQixDQUFkO0FBQ0EsTUFBSSxZQUFZLElBQUksR0FBRyxLQUFILENBQVMsTUFBYixDQUFvQjtBQUNsQyxrQkFEa0M7QUFFbEMsV0FBTyxhQUFhLFFBQWI7QUFGMkIsR0FBcEIsQ0FBaEI7QUFJQSxNQUFJLFFBQUosQ0FBYSxTQUFiO0FBQ0EsTUFBSSxJQUFKLENBQVMsWUFBVCxFQUF1QixZQUFVO0FBQUE7O0FBQy9CLFFBQUksUUFBUSxLQUFaO0FBQ0EsU0FBSyxxQkFBTCxDQUEyQixLQUEzQixFQUFrQyxvQkFBWTtBQUM1QyxVQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsZUFBTyxhQUFQLENBQXFCLFFBQXJCO0FBQ0EsWUFBSSxPQUFPLFdBQVAsR0FBcUIsTUFBekIsRUFBaUM7QUFDL0IsY0FBTSxjQUFjLGdDQUFnQyxPQUFPLFdBQVAsR0FBcUIsR0FBckIsQ0FBeUI7QUFBQSxtQkFBVyxRQUFRLFdBQVIsRUFBWDtBQUFBLFdBQXpCLENBQWhDLENBQXBCO0FBQ0Esa0JBQVEsV0FBUixDQUFvQixXQUFwQjtBQUNBOzs7QUFHQSxnQkFBSywrQkFBTCxDQUFxQztBQUNuQywwQkFEbUM7QUFFbkMsNEJBRm1DO0FBR25DO0FBSG1DLFdBQXJDLEVBSUcsT0FKSCxDQUlXLFlBQUk7QUFDYixvQkFBUSxVQUFSLENBQW1CLE9BQW5CLEVBQTRCLE9BQTVCLEVBQXFDLGVBQXJDO0FBQ0EsY0FBRSxPQUFGLENBQVUsTUFBVjtBQUNELFdBUEQ7QUFRQTs7O0FBR0MsU0FqQkgsTUFpQlM7QUFDTCx1QkFBYSxTQUFiLEdBQXlCLGFBQXpCLENBQXVDLE9BQXZDO0FBQ0Esa0JBQVEsVUFBUixDQUFtQixPQUFuQixFQUE0QixPQUE1QjtBQUNBLFlBQUUsT0FBRixDQUFVLE1BQVY7QUFDRDtBQUNELGdCQUFRLElBQVI7QUFDRDtBQUNGLEtBM0JILEVBNEJFO0FBQ0UsaUJBREYsdUJBQ2MsS0FEZCxFQUNvQjtBQUNoQixlQUFPLFVBQVUsU0FBakI7QUFDRCxPQUhIOztBQUlFLG9CQUFjO0FBSmhCLEtBNUJGO0FBbUNBLFNBQUssV0FBTCxDQUFpQixTQUFqQjtBQUNBLGdCQUFZLElBQVo7QUFDRCxHQXZDRDtBQXdDQSxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0E5REQ7O0FBZ0VBLE1BQU0sSUFBTixHQUFhLFlBQVcsQ0FBRSxDQUExQjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsOEJBQWpCOzs7Ozt5QkMvRTBCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ04sUSxHQUFhLE9BQU8sSUFBUCxDQUFZLFEsQ0FBekIsUTs0QkFNSixPQUFPLElBQVAsQ0FBWSxRO0lBSmQsMEIseUJBQUEsMEI7SUFDQSxzQix5QkFBQSxzQjtJQUNBLG1CLHlCQUFBLG1CO0lBQ0EsbUIseUJBQUEsbUI7SUFFTSxLLEdBQVUsT0FBTyxJQUFQLENBQVksSyxDQUF0QixLO0lBQ0EsRyxHQUFRLE9BQU8sRyxDQUFmLEc7SUFDQSxJLEdBQVMsT0FBTyxJQUFQLENBQVksUSxDQUFyQixJO0lBQ0EsYyxHQUFtQixPQUFPLElBQVAsQ0FBWSxRLENBQS9CLGM7SUFDQSxZLEdBQWlCLE9BQU8sSUFBUCxDQUFZLEssQ0FBN0IsWTs7QUFFUjs7Ozs7QUFJQSxJQUFNLDJDQUEyQyxDQUMvQyxPQUQrQyxFQUUvQyxZQUYrQyxFQUcvQyxTQUgrQyxFQUkvQyxJQUorQyxFQUsvQyxJQUwrQyxFQU0vQyxXQU4rQyxDQUFqRDs7QUFTQSxTQUFTLFdBQVQsR0FBbUM7QUFBQSxNQUFkLE9BQWMsdUVBQUosRUFBSTs7QUFDakMsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNBLE9BQUssZUFBTDtBQUNBLE9BQUssV0FBTCxHQUFtQixJQUFJLFVBQUosQ0FBZSxLQUFmLENBQW5CO0FBQ0EsT0FBSyxjQUFMLEdBQXNCLFVBQVMsV0FBVCxFQUFzQjtBQUMxQyxTQUFLLFdBQUwsQ0FBaUIsY0FBakIsQ0FBZ0MsV0FBaEM7QUFDRCxHQUZEO0FBR0EsT0FBSyxpQkFBTCxHQUF5QixVQUFTLFdBQVQsRUFBc0I7QUFBQTs7QUFDN0M7QUFDQSxlQUFXO0FBQUEsYUFBTSxNQUFLLFdBQUwsQ0FBaUIsaUJBQWpCLENBQW1DLFdBQW5DLENBQU47QUFBQSxLQUFYO0FBQ0QsR0FIRDtBQUlEOztBQUVELFFBQVEsV0FBUixFQUFxQixJQUFyQjs7QUFFQSxJQUFNLFFBQVEsWUFBWSxTQUExQjs7QUFFQTtBQUNBLE1BQU0sY0FBTixHQUF1QixZQUFVO0FBQy9CLFNBQU8sSUFBUDtBQUNELENBRkQ7O0FBSUEsTUFBTSx5QkFBTixHQUFrQyxZQUFVO0FBQzFDLE9BQUssV0FBTCxDQUFpQixNQUFqQixHQUEwQixFQUExQixDQUE2QixhQUE3QixFQUE0QyxLQUFLLGtCQUFqRDtBQUNELENBRkQ7O0FBSUEsTUFBTSwyQkFBTixHQUFvQyxZQUFVO0FBQzVDLE9BQUssV0FBTCxDQUFpQixNQUFqQixHQUEwQixFQUExQixDQUE2QixhQUE3QixFQUE0QyxLQUFLLGtCQUFqRDtBQUNELENBRkQ7O0FBSUEsTUFBTSxrQkFBTixHQUEyQixVQUFTLEdBQVQsRUFBYztBQUN2QyxNQUFNLE1BQU0sS0FBSyxxQkFBTCxDQUEyQixJQUFJLEtBQS9CLEVBQXNDO0FBQUEsV0FBTSxJQUFOO0FBQUEsR0FBdEMsQ0FBWjtBQUNBLE1BQUksR0FBSixFQUFTLEtBQUssZ0JBQUwsR0FBd0IsS0FBeEIsQ0FBOEIsTUFBOUIsR0FBdUMsU0FBdkMsQ0FBVCxLQUNLLEtBQUssZ0JBQUwsR0FBd0IsS0FBeEIsQ0FBOEIsTUFBOUIsR0FBdUMsRUFBdkM7QUFDTixDQUpEOztBQU1BLE1BQU0sUUFBTixHQUFpQixZQUFrQjtBQUFBLE1BQVQsS0FBUyx1RUFBSCxFQUFHOztBQUNqQyxPQUFLLE1BQUwsR0FBYyxLQUFkO0FBQ0EsT0FBSyxtQkFBTCxDQUF5QixLQUF6QjtBQUNELENBSEQ7O0FBS0EsTUFBTSxRQUFOLEdBQWlCLFlBQVU7QUFDekIsU0FBTyxLQUFLLE1BQVo7QUFDRCxDQUZEOztBQUlBLE1BQU0sYUFBTixHQUFzQixZQUFVO0FBQzlCLFNBQU8sS0FBSyxXQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLE1BQU4sR0FBZSxZQUFXO0FBQ3hCLFNBQU8sS0FBSyxXQUFMLENBQWlCLE1BQWpCLEVBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sbUJBQU4sR0FBNEIsZ0JBQWdDO0FBQUEsTUFBdEIsT0FBc0IsUUFBdEIsT0FBc0I7QUFBQSxNQUFiLFdBQWEsUUFBYixXQUFhOztBQUMxRCxNQUFNLGtCQUFrQixRQUFRLFdBQVIsRUFBeEI7QUFDQSxNQUFNLGVBQWUsZ0JBQWdCLE9BQWhCLEVBQXJCO0FBQ0EsVUFBUSxZQUFSO0FBQ0UsU0FBSyxpQkFBTDtBQUNFLGFBQU8sQ0FBQyxDQUFDLEVBQUUsT0FBRixDQUFVLGdCQUFnQixjQUFoQixFQUFWLEVBQTRDLElBQTVDLENBQWtEO0FBQUEsZUFBZ0Isb0JBQW9CLFdBQXBCLEVBQWlDLGFBQWpDLENBQWhCO0FBQUEsT0FBbEQsQ0FBVDtBQUNBO0FBQ0YsU0FBSyxZQUFMO0FBQ0UsYUFBTyxDQUFDLENBQUMsZ0JBQWdCLGNBQWhCLEdBQWlDLElBQWpDLENBQXNDO0FBQUEsZUFBaUIsb0JBQW9CLFdBQXBCLEVBQWlDLGFBQWpDLENBQWpCO0FBQUEsT0FBdEMsQ0FBVDtBQUNBO0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBTyxDQUFDLENBQUMsRUFBRSxPQUFGLENBQVUsZ0JBQWdCLGNBQWhCLEVBQVYsRUFBNEMsSUFBNUMsQ0FBaUQ7QUFBQSxlQUFpQixvQkFBb0IsV0FBcEIsRUFBaUMsYUFBakMsQ0FBakI7QUFBQSxPQUFqRCxDQUFUO0FBQ0E7QUFDRixTQUFLLGNBQUw7QUFDRSxhQUFPLENBQUMsQ0FBQyxnQkFBZ0IsV0FBaEIsR0FBOEIsSUFBOUIsQ0FBbUMsbUJBQVU7QUFDcEQsZUFBTyxDQUFDLENBQUMsRUFBRSxPQUFGLENBQVUsUUFBUSxjQUFSLEVBQVYsRUFBb0MsSUFBcEMsQ0FBeUM7QUFBQSxpQkFBaUIsb0JBQW9CLFdBQXBCLEVBQWlDLGFBQWpDLENBQWpCO0FBQUEsU0FBekMsQ0FBVDtBQUNELE9BRlEsQ0FBVDtBQUdBO0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBTyxvQkFBb0IsV0FBcEIsRUFBaUMsZ0JBQWdCLGNBQWhCLEVBQWpDLENBQVA7QUFDQTtBQUNGLFNBQUssWUFBTDtBQUNFLGFBQU8sQ0FBQyxDQUFDLGdCQUFnQixjQUFoQixHQUFpQyxJQUFqQyxDQUFzQztBQUFBLGVBQWlCLG9CQUFvQixXQUFwQixFQUFpQyxhQUFqQyxDQUFqQjtBQUFBLE9BQXRDLENBQVQ7QUFDQTtBQXBCSjtBQXNCQSxTQUFPLEtBQVA7QUFDRCxDQTFCRDs7QUE0QkEsTUFBTSx3QkFBTixHQUFpQyxZQUFzQjtBQUFBLE1BQWIsUUFBYSx1RUFBSixFQUFJOztBQUNyRCxNQUFJLFNBQVMsTUFBYixFQUFxQjtBQUFBLDRCQUNvQixLQUFLLGdCQUFMLENBQXNCLFNBQVMsQ0FBVCxDQUF0QixDQURwQjtBQUFBLFFBQ1osYUFEWSxxQkFDWixhQURZO0FBQUEsUUFDRyxhQURILHFCQUNHLGFBREg7O0FBRW5CLGFBQVMsT0FBVCxDQUFpQjtBQUFBLGFBQVcsUUFBUSxRQUFSLENBQWlCLGFBQWpCLENBQVg7QUFBQSxLQUFqQjtBQUNBLFdBQU8sYUFBUDtBQUNEO0FBQ0YsQ0FORDs7QUFRQSxNQUFNLGdDQUFOLEdBQXlDLFlBQXNCO0FBQUE7O0FBQUEsa0ZBQUgsRUFBRztBQUFBLE1BQVosT0FBWSxTQUFaLE9BQVk7O0FBQzdEOzs7QUFENkQsbUJBSW5DLEtBQUssU0FBTCxFQUptQztBQUFBLE1BSXRELEtBSnNELGNBSXRELEtBSnNEO0FBQUEsTUFJL0MsUUFKK0MsY0FJL0MsUUFKK0M7QUFLN0Q7Ozs7Ozs7QUFLQSxNQUFNLDRCQUE0QixTQUE1Qix5QkFBNEIsR0FBTTtBQUN0QyxRQUFNLGdCQUFnQixPQUFLLHdCQUFMLENBQThCLFFBQTlCLENBQXRCO0FBQ0EsWUFBUSxNQUFSLENBQWUsWUFBTTtBQUNuQixlQUFTLE9BQVQsQ0FBa0I7QUFBQSxlQUFXLFFBQVEsUUFBUixDQUFpQixhQUFqQixDQUFYO0FBQUEsT0FBbEI7QUFDRCxLQUZEO0FBR0QsR0FMRDtBQU1BLE1BQUksTUFBTSxPQUFOLE9BQW9CLE1BQU0sVUFBTixDQUFpQixNQUF6QyxFQUFnRDtBQUM5QyxtQkFBZSxTQUFmLE9BQStCLENBQS9CLEdBQW1DLFdBQVcsWUFBTTtBQUNsRDtBQUNELEtBRmtDLENBQW5DLEdBRUssMkJBRkw7QUFHRDtBQUNGLENBckJEOztBQXVCQSxNQUFNLGdCQUFOLEdBQXlCLFVBQVMsT0FBVCxFQUFpQjtBQUN4QyxNQUFNLGVBQWUsUUFBUSxXQUFSLEdBQXNCLE9BQXRCLEVBQXJCO0FBQ0EsTUFBTSxnQkFBZ0IsUUFBUSxRQUFSLEVBQXRCO0FBQ0EsTUFBTSxnQkFBZ0Isb0JBQW9CO0FBQ3hDO0FBRHdDLEdBQXBCLENBQXRCO0FBR0EsU0FBTztBQUNMLGdDQURLO0FBRUw7QUFGSyxHQUFQO0FBSUQsQ0FWRDs7QUFZQSxNQUFNLGNBQU4sR0FBdUIsWUFBb0I7QUFBQSxNQUFYLElBQVcsdUVBQU4sSUFBTTs7QUFDekMsR0FBQyxLQUFLLGVBQU4sSUFBeUIsSUFBSSxjQUFKLENBQW1CLElBQW5CLENBQXpCO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNLGlCQUFOLEdBQTBCLFlBQVc7QUFDbkMsT0FBSyxlQUFMLEdBQXVCLEtBQUssZUFBTCxJQUF3QixRQUFRLGtDQUFSLENBQS9DO0FBQ0EsU0FBTyxLQUFLLGVBQVo7QUFDRCxDQUhEOztBQUtBLE1BQU0sU0FBTixHQUFrQixVQUFTLEtBQVQsRUFBNEI7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDNUMsU0FBTyxLQUFLLGlCQUFMLEdBQXlCLFNBQXpCLENBQW1DLEtBQW5DLEVBQTBDLE9BQTFDLENBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU0sa0JBQU4sR0FBMkIsWUFBOEI7QUFBQSxrRkFBSixFQUFJO0FBQUEsTUFBcEIsS0FBb0IsU0FBcEIsS0FBb0I7QUFBQSxNQUFiLE9BQWEsU0FBYixPQUFhOztBQUN2RCxNQUFNLGNBQWMsTUFBTSxxQkFBTixDQUE0QixFQUE1QixDQUFwQjtBQUNBLGNBQVksT0FBWixDQUFvQjtBQUFBLFdBQVMsUUFBUSxHQUFSLENBQVksS0FBWixFQUFtQixJQUFuQixDQUFUO0FBQUEsR0FBcEI7QUFDRCxDQUhEOztBQUtBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQixDQUFFLENBQXhDOztBQUVBLE1BQU0sSUFBTixHQUFhLFlBQVcsQ0FBRSxDQUExQjs7QUFFQTs7O0FBR0EsTUFBTSxVQUFOLEdBQW1CLFVBQVMsS0FBVCxFQUFnQixPQUFoQixFQUF3QjtBQUFBOztBQUN6QyxVQUFRLE9BQVIsQ0FBZ0IsSUFBaEIsR0FDRyxJQURILENBQ1E7QUFBQSxXQUFNLE9BQUssaUJBQUwsR0FBeUIsVUFBekIsRUFBTjtBQUFBLEdBRFI7QUFFRCxDQUhEOztBQUtBOzs7OztBQUtBLE1BQU0sWUFBTixHQUFxQixVQUFTLEtBQVQsRUFBZ0IsT0FBaEIsRUFBd0I7QUFDM0MsVUFBUSxPQUFSLENBQWdCLFFBQWhCO0FBQ0QsQ0FGRDs7QUFJQTs7OztBQUlBLE1BQU0sc0JBQU4sR0FBK0IsWUFBVTtBQUN2QyxTQUFPLGVBQWUsUUFBZixHQUEwQixTQUExQixHQUFzQyxLQUF0QyxDQUE0QyxLQUE1QyxFQUFQO0FBQ0QsQ0FGRDs7QUFJQTs7OztBQUlBLE1BQU0sYUFBTiwyREFBc0I7QUFBQTs7QUFBQSxrRkFBeUQsRUFBekQ7QUFBQSxNQUFnQixNQUFoQixTQUFnQixNQUFoQjtBQUFBLE1BQXdCLE9BQXhCLFNBQXdCLE9BQXhCO0FBQUEsTUFBaUMsT0FBakMsU0FBaUMsT0FBakM7QUFBQSw0QkFBMEMsT0FBMUM7QUFBQSxNQUEwQyxPQUExQyxpQ0FBa0QsS0FBbEQ7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDaEIsd0JBRGdCLEdBQ0MsS0FERDtBQUVkLHlCQUZjLEdBRUksS0FBSyxzQkFBTCxFQUZKO0FBR2IsZUFIYSxHQUdNLE1BSE4sQ0FHYixLQUhhLEVBR04sUUFITSxHQUdNLE1BSE4sQ0FHTixRQUhNO0FBSWQsaUJBSmMsR0FJSixNQUFNLEtBQU4sRUFKSTtBQUtkLHlDQUxjLEdBS29CLEVBTHBCO0FBTUMsaUJBTkQsR0FNcUMsT0FOckMsQ0FNYixhQU5hLDBCQU1xQyxPQU5yQyxDQU1VLGlCQU5WLEVBTVUsaUJBTlYseUNBTTRCLEtBTjVCO0FBT2QsZ0JBUGMsR0FPTCxNQUFNLG1CQUFOLENBQTBCLE9BQTFCLEVBQW1DO0FBQ2hELDRCQURnRDtBQUVoRDtBQUZnRCxXQUFuQyxDQVBLO0FBV3BCOzs7O0FBR0EsaUJBQU8sT0FBUCxDQUFlLGlCQUFTO0FBQ3RCLGdCQUFJLE1BQU0sUUFBTixDQUFlLE1BQW5CLEVBQTJCO0FBQ3pCLCtCQUFpQixJQUFqQjtBQUNBLGtCQUFNLHdCQUF3QixRQUFRLEdBQVIsQ0FBWSxNQUFNLElBQWxCLENBQTlCLENBRnlCLENBRThCO0FBQ3ZELDhDQUFnQyxJQUFoQyxDQUFxQztBQUNuQyw0REFEbUM7QUFFbkM7QUFGbUMsZUFBckM7QUFJRDtBQUNGLFdBVEQ7QUFVQSwwQ0FBZ0MsT0FBaEMsQ0FBd0MsaUJBQW9DO0FBQUEsZ0JBQWxDLHFCQUFrQyxTQUFsQyxxQkFBa0M7QUFBQSxnQkFBWCxLQUFXLFNBQVgsS0FBVzs7QUFDMUU7OztBQUdBLGdCQUFJLCtCQUFKO0FBQ0EsZ0JBQUksT0FBSixFQUFhO0FBQ1gsdUNBQXlCLE9BQUssaUJBQUwsR0FBeUIsOEJBQXpCLENBQXdEO0FBQy9FLGdDQUQrRTtBQUUvRSxnREFGK0U7QUFHL0U7QUFIK0UsZUFBeEQsQ0FBekI7QUFLRCxhQU5ELE1BTU87QUFDTCx1Q0FBeUIsT0FBSyxpQkFBTCxHQUF5Qix5QkFBekIsQ0FBbUQ7QUFDMUUsZ0NBRDBFO0FBRTFFO0FBRjBFLGVBQW5ELENBQXpCO0FBSUQ7QUFDRCxtQ0FBdUIsT0FBdkIsQ0FBK0I7QUFBQSxxQkFBUyxNQUFNLFFBQU4sQ0FBZSxjQUFmLENBQThCLEdBQTlCLENBQWtDLEtBQWxDLENBQVQ7QUFBQSxhQUEvQjs7QUFFQTs7O0FBR0EscUJBQVMsT0FBVCxDQUFpQixtQkFBVztBQUMxQixrQkFBTSxRQUFRLFFBQVEsR0FBUixDQUFZLE1BQU0sSUFBbEIsQ0FBZDtBQUNBLGtCQUFJLFVBQVUsSUFBVixJQUFrQixPQUFPLEtBQVAsS0FBaUIsV0FBdkMsRUFBb0QsTUFBTSxRQUFOLENBQWUsY0FBZixDQUE4QixHQUE5QixDQUFrQyxLQUFsQztBQUNyRCxhQUhEO0FBSUE7QUFDQSxrQkFBTSxRQUFOLENBQWUsY0FBZixDQUE4QixNQUE5QixDQUFxQyxxQkFBckM7QUFDRCxXQTVCRDs7QUE4QkEsY0FBSSxjQUFKLEVBQW9CO0FBQ1osMkJBRFksR0FDTSxTQUFsQixlQUFrQixHQUFNO0FBQzNCLDhDQUFnQyxPQUFoQyxDQUF3QyxpQkFBb0M7QUFBQSxvQkFBbEMscUJBQWtDLFNBQWxDLHFCQUFrQztBQUFBLG9CQUFYLEtBQVcsU0FBWCxLQUFXOztBQUMzRSxvQkFBSSwwQkFBMEIsTUFBTSxLQUFwQyxFQUEyQztBQUN6QyxzQkFBSSxPQUFKLEVBQ0UsT0FBSyxpQkFBTCxHQUF5QixvQ0FBekIsQ0FBOEQ7QUFDNUQsb0NBRDREO0FBRTVELG9EQUY0RDtBQUc1RCxnQ0FINEQ7QUFJNUQsOEJBQVUscUJBSmtEO0FBSzVELHdEQUFvQyxNQUFNO0FBTGtCLG1CQUE5RCxFQURGLEtBU0UsT0FBSyxpQkFBTCxHQUF5Qiw0QkFBekIsQ0FBc0Q7QUFDcEQsb0NBRG9EO0FBRXBELGdDQUZvRDtBQUdwRCw4QkFBVSxxQkFIMEM7QUFJcEQsOEJBQVUsTUFBTTtBQUpvQyxtQkFBdEQ7QUFNSDtBQUNGLGVBbEJBO0FBbUJBLGtCQUFJLENBQUMsT0FBTCxFQUFjLE9BQUssaUJBQUwsR0FBeUIsd0NBQXpCLENBQWtFLE9BQWxFO0FBQ2QscUJBQU87QUFDTixzQkFBTTtBQURBLGVBQVA7QUFHRixhQXpCaUI7O0FBMkJsQixpQkFBSyxpQkFBTCxHQUF5QixTQUF6QixtQkFBbUQsT0FBbkQsRUFBOEQsZUFBOUQ7QUFDQSxpQkFBSyxpQkFBTCxHQUF5QixTQUF6QixnQkFBZ0QsT0FBaEQsRUFBMkQsWUFBTTtBQUMvRCxxQkFBSyxpQkFBTCxHQUF5QixXQUF6QixtQkFBcUQsT0FBckQsRUFBZ0UsZUFBaEU7QUFDQSxxQkFBSyxpQkFBTCxHQUF5Qix5Q0FBekIsQ0FBbUUsT0FBbkU7QUFDQSxxQkFBTztBQUNMLHNCQUFNO0FBREQsZUFBUDtBQUdELGFBTkQ7QUFPRDtBQXpGbUIsMkNBMEZiLE1BMUZhOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQXRCOztBQTZGQTs7O0FBR0EsTUFBTSwrQkFBTiwyREFBd0M7QUFBQTs7QUFBQSxrRkFBMkMsRUFBM0M7QUFBQSxNQUFnQixNQUFoQixTQUFnQixNQUFoQjtBQUFBLE1BQXdCLE9BQXhCLFNBQXdCLE9BQXhCO0FBQUEsTUFBa0MsT0FBbEMsU0FBa0MsT0FBbEM7O0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDaEMsa0NBRGdDLEdBQ0wsRUFESyxFQUNEOztBQUM3QixlQUY4QixHQUVwQixNQUZvQixDQUU5QixLQUY4QjtBQUdqQixpQkFIaUIsR0FHbUIsT0FIbkIsQ0FHL0IsYUFIK0IsMkJBR21CLE9BSG5CLENBR1IsaUJBSFEsRUFHUixpQkFIUSwwQ0FHVSxLQUhWO0FBSWhDLGdCQUpnQyxHQUl2QixNQUFNLG1CQUFOLENBQTBCLE9BQTFCLEVBQW1DO0FBQ2hELDRCQURnRDtBQUVoRDtBQUZnRCxXQUFuQyxDQUp1Qjs7QUFRdEMsaUJBQU8sT0FBUCxDQUFlLGlCQUFTO0FBQUEsZ0JBQ2Ysa0JBRGUsR0FDTyxNQUFNLEtBQU4sQ0FBWSxPQURuQixDQUNmLGtCQURlOztBQUV0QixnQkFBSSxrQkFBSixFQUF1QjtBQUNyQixrQkFBSSxXQUFXLEtBQWY7QUFEcUIsa0JBRWQsVUFGYyxHQUV5QixrQkFGekIsQ0FFZCxVQUZjO0FBQUEsMENBRXlCLGtCQUZ6QixDQUVGLGVBRkU7QUFBQSxrQkFFRixlQUZFLHlDQUVnQixLQUZoQjtBQUdyQjs7OztBQUdBLGtCQUFJLG1CQUFtQixRQUFRLEtBQVIsRUFBdkIsRUFBd0MsV0FBVyx5Q0FBeUMsSUFBekMsQ0FBOEM7QUFBQSx1QkFBZSxXQUFXLE9BQVgsQ0FBbUIsV0FBbkIsTUFBb0MsQ0FBQyxDQUFwRDtBQUFBLGVBQTlDLENBQVg7QUFDeEMsa0JBQUksUUFBSixFQUFhO0FBQ1gsb0JBQU0sZUFBZSxPQUFPLEtBQVAsQ0FBYSxLQUFiLEVBQXJCO0FBQ0Esb0JBQU0sYUFBYSxPQUFLLGlCQUFMLEVBQW5CO0FBQ0Esb0JBQU0sMEJBQTBCLElBQUksT0FBSjtBQUFBLHVGQUFZLGtCQUFPLE9BQVAsRUFBZ0IsTUFBaEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQ0FFbEMsYUFBYSxnQ0FBYixDQUE4QztBQUNsRCwwQ0FEa0Q7QUFFbEQsOENBRmtEO0FBR2xELHdEQUhrRDtBQUlsRDtBQUprRCw2QkFBOUMsQ0FGa0M7O0FBQUE7QUFReEMsb0NBQVEsR0FBUixDQUFZLE1BQU0sSUFBbEIsRUFBd0IsTUFBTSxLQUE5QjtBQUNBLG9DQUFRLE9BQVI7QUFUd0M7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBV3hDOztBQVh3QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFBWjs7QUFBQTtBQUFBO0FBQUE7QUFBQSxvQkFBaEM7QUFjQSx5Q0FBeUIsSUFBekIsQ0FBOEIsdUJBQTlCO0FBQ0Q7QUFDRjtBQUNGLFdBN0JEO0FBUnNDO0FBQUEsaUJBc0NoQyxRQUFRLFVBQVIsQ0FBbUIsd0JBQW5CLENBdENnQzs7QUFBQTtBQUFBLDRDQXVDL0IsT0F2QytCOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQXhDOztBQTBDQTs7OztBQUlBLE1BQU0seUJBQU4sR0FBa0MsWUFBaUM7QUFBQSxNQUF4QixpQkFBd0IsdUVBQU4sS0FBTTs7QUFDakUsTUFBTSxVQUFVLEtBQUssVUFBTCxFQUFoQjtBQUNBLFVBQVEsaUJBQVIsR0FBNEIsaUJBQTVCO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLGlCQUFOLEdBQTBCLFlBQVU7QUFDbEMsTUFBSSxlQUFlLFNBQWYsS0FBNkIsQ0FBakMsRUFBb0M7QUFBQSxnQ0FDSSxlQUFlLFNBQWYsR0FBMkIsU0FBM0IsRUFESjtBQUFBLFFBQzNCLFFBRDJCLHlCQUMzQixRQUQyQjtBQUFBLFFBQ2pCLEtBRGlCLHlCQUNqQixLQURpQjtBQUFBLHVEQUNWLE1BRFU7QUFBQSxRQUNWLE1BRFUsMENBQ0gsRUFERztBQUVsQzs7O0FBQ0EsUUFBTSxVQUFVLFNBQVMsU0FBUyxNQUFULEdBQWlCLENBQTFCLEVBQTZCLEtBQTdCLEVBQWhCO0FBQ0EsV0FBTyxPQUFQLENBQWUsa0JBQW1CO0FBQUEsVUFBakIsSUFBaUIsVUFBakIsSUFBaUI7QUFBQSxVQUFYLEtBQVcsVUFBWCxLQUFXOztBQUNoQyxjQUFRLEdBQVIsQ0FBWSxJQUFaLEVBQWtCLEtBQWxCO0FBQ0QsS0FGRDtBQUdBLFdBQU87QUFDTCxzQkFESztBQUVMLG9CQUFjLE1BQU0sS0FBTjtBQUZULEtBQVA7QUFJRDtBQUNGLENBYkQ7O0FBZUEsTUFBTSxnQ0FBTixHQUF5QyxrQkFBaUM7QUFBQSxNQUF2QixPQUF1QixVQUF2QixPQUF1QjtBQUFBLE1BQWQsWUFBYyxVQUFkLFlBQWM7O0FBQ3hFLE1BQU0sdUJBQXVCLEtBQUssV0FBTCxDQUFpQixjQUFqQixDQUFnQyxjQUFoQyxDQUErQyxTQUEvQyxFQUE3QjtBQUNBLFNBQU8sS0FBSyw0Q0FBTCxDQUFrRDtBQUN2RCxjQUFVLHFCQUFxQixXQUFyQixHQUFtQyxNQUFuQyxDQUEwQztBQUFBLGFBQVcsUUFBUSxTQUFSLEtBQXNCLE9BQWpDO0FBQUEsS0FBMUMsQ0FENkM7QUFFdkQ7QUFGdUQsR0FBbEQsQ0FBUDtBQUlELENBTkQ7O0FBUUEsTUFBTSw0Q0FBTixHQUFxRCxrQkFBcUM7QUFBQSwrQkFBM0IsUUFBMkI7QUFBQSxNQUEzQixRQUEyQixtQ0FBbEIsRUFBa0I7QUFBQSxNQUFkLFlBQWMsVUFBZCxZQUFjOztBQUN4RixNQUFNLGtCQUFrQixFQUF4QjtBQUNBLFdBQVMsT0FBVCxDQUFpQixtQkFBVztBQUMxQixRQUFNLHNCQUFzQixRQUFRLFdBQVIsTUFBeUIsUUFBUSxXQUFSLEdBQXNCLE9BQXRCLEVBQXJEO0FBQ0EsUUFBSSxpQkFBaUIsbUJBQXJCLEVBQTBDLGdCQUFnQixJQUFoQixDQUFxQixPQUFyQixFQUExQyxLQUNLLElBQUksdUJBQXVCLG1CQUF2QixFQUE0QyxZQUE1QyxNQUNOLFNBQVMsZUFBVCxDQUF5QixZQUF6QixLQUEwQyxDQUFDLFNBQVMsZUFBVCxDQUF5QixtQkFBekIsQ0FEckMsQ0FBSixFQUN5RjtBQUM1RixVQUFNLGVBQWUsUUFBUSxLQUFSLEVBQXJCO0FBQ0EsbUJBQWEsU0FBYixHQUF5QixRQUFRLFNBQWpDO0FBQ0EsbUJBQWEsV0FBYixDQUF5QiwyQkFBMkIsUUFBUSxXQUFSLEVBQTNCLEVBQWtELFlBQWxELENBQXpCO0FBQ0Esc0JBQWdCLElBQWhCLENBQXFCLFlBQXJCO0FBQ0Q7QUFDRixHQVZEO0FBV0EsU0FBTyxlQUFQO0FBQ0QsQ0FkRDs7QUFnQkEsT0FBTyxPQUFQLEdBQWlCLFdBQWpCOzs7eUJDcFl3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLFNBQVMsYUFBVCxHQUFtQztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNqQyxPQUFLLGdCQUFMO0FBQ0EsT0FBSyxlQUFMO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsYUFBUixFQUF1QixXQUF2Qjs7QUFFQSxJQUFNLFFBQVEsY0FBYyxTQUE1Qjs7QUFFQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUI7QUFBQTs7QUFDM0IsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBRDJCLE1BRXBCLFFBRm9CLEdBRVIsTUFGUSxDQUVwQixRQUZvQjs7QUFHM0IsTUFBSSxDQUFDLFNBQVMsTUFBZCxFQUFzQjtBQUN0QixPQUFLLGVBQUwsR0FBdUIsSUFBSSxHQUFHLFdBQUgsQ0FBZSxJQUFuQixDQUF3QjtBQUM3QyxjQUFVLElBQUksR0FBRyxVQUFQLENBQWtCLFFBQWxCLENBRG1DO0FBRTdDLFVBQU07QUFGdUMsR0FBeEIsQ0FBdkI7QUFJQSxPQUFLLGVBQUwsR0FBdUIsSUFBSSxHQUFHLFdBQUgsQ0FBZSxJQUFuQixDQUF3QjtBQUM3QyxVQUFNLE9BRHVDO0FBRTdDLGVBQVcsd0JBQU87QUFDaEIsVUFBTSxjQUFjLElBQUksVUFBeEI7QUFDQSxhQUFPLENBQUMsQ0FBQyxTQUFTLElBQVQsQ0FBYztBQUFBLGVBQVcsTUFBSyxtQkFBTCxDQUF5QixFQUFDLGdCQUFELEVBQVUsd0JBQVYsRUFBekIsQ0FBWDtBQUFBLE9BQWQsQ0FBVDtBQUNEO0FBTDRDLEdBQXhCLENBQXZCO0FBT0EsT0FBSyxlQUFMLENBQXFCLEVBQXJCLENBQXdCLFNBQXhCLEVBQW1DLFVBQUMsR0FBRCxFQUFRO0FBQ3pDLFdBQU8sV0FBUCxHQUFxQixJQUFJLE9BQUosQ0FBWSxXQUFaLEdBQTBCLGNBQTFCLEVBQXJCO0FBQ0EsVUFBSyxzQkFBTCxDQUE0QixNQUE1QjtBQUNBLE1BQUUsT0FBRixDQUFVLE1BQVY7QUFDRCxHQUpEOztBQU1BLE9BQUssY0FBTCxDQUFvQixLQUFLLGVBQXpCO0FBQ0EsT0FBSyxjQUFMLENBQW9CLEtBQUssZUFBekI7O0FBRUEsU0FBTyxFQUFFLE9BQUYsRUFBUDtBQUNELENBekJEOztBQTJCQSxNQUFNLElBQU4sR0FBYSxZQUFXO0FBQ3RCLE9BQUssaUJBQUwsQ0FBdUIsS0FBSyxlQUE1QjtBQUNBLE9BQUssaUJBQUwsQ0FBdUIsS0FBSyxlQUE1QjtBQUNBLE9BQUssZUFBTCxHQUF1QixJQUF2QjtBQUNBLE9BQUssZUFBTCxHQUF1QixJQUF2QjtBQUNELENBTEQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLGFBQWpCOzs7eUJDL0N3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCO0lBQ08sRyxHQUFPLE9BQU8sRyxDQUFkLEc7SUFDQSxzQixHQUEwQixPQUFPLEVBQVAsQ0FBVSxZLENBQXBDLHNCOzs7QUFHUCxTQUFTLGdCQUFULEdBQXNDO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ3BDLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLGdCQUFSLEVBQTBCLFdBQTFCOztBQUVBLElBQU0sUUFBUSxpQkFBaUIsU0FBL0I7O0FBRUEsTUFBTSxHQUFOLEdBQVksVUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCO0FBQUE7O0FBQ3BDLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQUksUUFBSixDQUFhLEtBQWI7QUFDQSxNQUFNLGVBQWUsT0FBTyxLQUFQLENBQWEsZUFBYixFQUFyQjtBQUNBLE9BQUssbUJBQUwsR0FBMkIsYUFBYSxRQUFiLEVBQTNCO0FBQ0EsTUFBTSxZQUFZLFFBQVEsU0FBMUI7QUFDQSxNQUFNLFVBQVUsYUFBYSxPQUFPLFNBQVAsS0FBcUIsVUFBbEMsR0FBK0MsV0FBL0MsR0FBNkQsUUFBUSxPQUFSLEVBQTdFO0FBTm9DLHlCQU9iLFFBQVEsT0FQSztBQUFBLE1BTzdCLEtBUDZCLG9CQU83QixLQVA2QjtBQUFBLE1BT3RCLEtBUHNCLG9CQU90QixLQVBzQjs7QUFRcEMsTUFBTSxRQUFRLFFBQVEsS0FBdEI7QUFDQSxPQUFLLFNBQUwsR0FBaUIsYUFBYSxTQUFiLEdBQXlCLFdBQXpCLEVBQWpCO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLFFBQVEsS0FBSyxTQUFMLENBQWUsTUFBZixDQUFzQixtQkFBVztBQUN4RCxXQUFRLFFBQVEsR0FBUixDQUFZLEtBQVosS0FBc0IsS0FBOUI7QUFDRCxHQUZ3QixDQUFSLEdBRVosS0FBSyxTQUZWO0FBR0EsV0FBUyxLQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLG1CQUFVO0FBQ3hDLFlBQVEsUUFBUixDQUFpQixLQUFqQjtBQUNELEdBRlEsQ0FBVDtBQUdBLFVBQVEsSUFBUixDQUFhLFlBQUs7QUFDaEIsVUFBSyxzQkFBTCxHQUE4QixJQUFJLHNCQUFKLENBQTJCO0FBQ3ZELGNBQVEsQ0FBQyxZQUFELENBRCtDO0FBRXZELGdCQUFVLE1BQUs7QUFGd0MsS0FBM0IsQ0FBOUI7QUFJQSxVQUFLLGNBQUwsQ0FBb0IsTUFBSyxzQkFBekI7QUFDQSxVQUFLLHNCQUFMLENBQTRCLEVBQTVCLENBQStCLFFBQS9CLEVBQXlDLFVBQUMsQ0FBRCxFQUFPO0FBQzlDLFVBQU0sV0FBVyxFQUFFLE9BQW5CO0FBQ0EsYUFBTyxRQUFQLENBQWdCLElBQWhCLENBQXFCLFFBQXJCO0FBQ0EsVUFBSSxRQUFKLENBQWEsSUFBYjtBQUNBLFFBQUUsT0FBRixDQUFVLE1BQVY7QUFDRCxLQUxEO0FBTUQsR0FaRCxFQVlHLEtBWkgsQ0FZUyxlQUFNO0FBQ2IsWUFBUSxHQUFSLENBQVksR0FBWjtBQUNBLE1BQUUsTUFBRjtBQUNELEdBZkQ7QUFnQkEsU0FBTyxFQUFFLE9BQUYsRUFBUDtBQUNELENBakNEOztBQW1DQTtBQUNBLE1BQU0sSUFBTixHQUFhLFlBQVc7QUFBQTs7QUFDdEIsTUFBSSxRQUFKLENBQWEsSUFBYjtBQUNBLE9BQUssaUJBQUwsQ0FBdUIsS0FBSyxzQkFBNUI7QUFDQSxPQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLG1CQUFXO0FBQ2hDLFlBQVEsUUFBUixDQUFpQixPQUFLLG1CQUF0QjtBQUNELEdBRkQ7QUFHQSxPQUFLLHNCQUFMLEdBQThCLElBQTlCO0FBQ0EsT0FBSyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsT0FBSyxtQkFBTCxHQUEyQixJQUEzQjtBQUNBLFNBQU8sSUFBUDtBQUNELENBVkQ7O0FBYUEsT0FBTyxPQUFQLEdBQWlCLGdCQUFqQjs7O3lCQy9EMEIsT0FBTyxJQUFQLENBQVksSztJQUE5QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixRLEdBQWEsT0FBTyxJQUFQLENBQVksUSxDQUF6QixROztBQUNSLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7SUFDUSxHLEdBQVEsT0FBTyxHLENBQWYsRzs7QUFDUixJQUFNLG9CQUFvQixRQUFRLHFEQUFSLENBQTFCOztBQUVBLFNBQVMsaUJBQVQsR0FBc0M7QUFBQSxNQUFYLE9BQVcsdUVBQUgsRUFBRzs7QUFDcEMsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsaUJBQVIsRUFBMkIsV0FBM0I7O0FBRUEsSUFBTSxRQUFRLGtCQUFrQixTQUFoQzs7QUFFQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBRG9DLE1BRTVCLEtBRjRCLEdBRVIsTUFGUSxDQUU1QixLQUY0QjtBQUFBLE1BRXJCLFFBRnFCLEdBRVIsTUFGUSxDQUVyQixRQUZxQjs7QUFHcEMsTUFBTSxlQUFlLE1BQU0sZUFBTixFQUFyQjtBQUNBLE1BQU0sU0FBUyxhQUFhLFNBQWIsRUFBZjtBQUNBLE1BQU0sVUFBVSxNQUFNLEtBQU4sRUFBaEI7QUFDQSxNQUFNLFVBQVUsUUFBUSxPQUF4QjtBQUNBLE1BQUksU0FBUyxNQUFULEdBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCLFFBQUksZUFBSixDQUFvQjtBQUNsQixZQUFNLFNBRFk7QUFFbEIsZUFBUyxvQ0FGUztBQUdsQixpQkFBVztBQUhPLEtBQXBCO0FBS0EsTUFBRSxNQUFGO0FBQ0QsR0FQRCxNQU9PO0FBQ0wsUUFBTSxhQUFhLEtBQUssYUFBTCxFQUFuQjtBQUNBLFFBQUksY0FBSjtBQUNBLFFBQU0sVUFBVSxrQkFBa0I7QUFDaEMsd0JBRGdDO0FBRWhDLGNBQVE7QUFDTixlQUFNLGVBQUMsR0FBRCxFQUFTO0FBQ2Isa0JBQVEsR0FBUjtBQUNBLGNBQU0sVUFBVSxTQUFTLEtBQVQsQ0FBaEI7QUFDQSxxQkFBVyxpQkFBWCxDQUE2QixRQUFRLFdBQVIsRUFBN0IsRUFBb0Q7QUFDbEQsa0JBQU0sS0FENEM7QUFFbEQsbUJBQU87QUFGMkMsV0FBcEQ7QUFJRDtBQVJLO0FBRndCLEtBQWxCLENBQWhCO0FBYUEsUUFBSSxlQUFKLENBQW9CO0FBQ2xCLGFBQU8sc0JBRFc7QUFFbEIsaUJBQVcsWUFGTztBQUdsQixtQkFBYSxLQUhLO0FBSWxCLHNCQUprQjtBQUtsQixlQUFTO0FBQ1AsZ0JBQVE7QUFDTixpQkFBTyxRQUREO0FBRU4scUJBQVcsYUFGTDtBQUdOLG9CQUFVLG9CQUFVO0FBQ2xCLGNBQUUsTUFBRjtBQUNEO0FBTEssU0FERDtBQVFQLFlBQUk7QUFDRixpQkFBTyxJQURMO0FBRUYscUJBQVcsYUFGVDtBQUdGLGtCQUhFLHNCQUdTO0FBQ1QsZ0JBQUksVUFBVSxTQUFkLEVBQXlCO0FBQ3ZCLGtCQUFNLFVBQVUsU0FBUyxLQUFULENBQWhCO0FBQ0Esa0JBQU0sa0JBQWtCLFFBQVEsS0FBUixFQUF4QjtBQUNBLGtCQUFNLGFBQWEsU0FBUztBQUMxQixrQ0FEMEI7QUFFMUI7QUFGMEIsZUFBVCxDQUFuQjtBQUlBLGtCQUFJLFVBQUosRUFBZ0I7QUFDZCx3QkFBUSxVQUFSLENBQW1CLE9BQW5CLEVBQTRCLFVBQTVCLEVBQXdDLGVBQXhDO0FBQ0EseUJBQVMsTUFBVCxDQUFnQixLQUFoQixFQUF1QixDQUF2QjtBQUNBLHlCQUFTLE9BQVQsQ0FBaUIseUJBQWlCO0FBQ2hDLDBCQUFRLFVBQVIsQ0FBbUIsT0FBbkIsRUFBNEIsYUFBNUI7QUFDQSx5QkFBTyxhQUFQLENBQXFCLGFBQXJCO0FBQ0QsaUJBSEQ7QUFJQSx1QkFBTyxRQUFQLEdBQWtCLENBQUMsT0FBRCxDQUFsQjtBQUNBLGtCQUFFLE9BQUYsQ0FBVSxNQUFWO0FBQ0QsZUFURCxNQVNPO0FBQ0wsb0JBQUksZUFBSixDQUFvQjtBQUNsQix3QkFBTSxTQURZO0FBRWxCLDJCQUFTLHFCQUZTO0FBR2xCLDZCQUFXO0FBSE8saUJBQXBCO0FBS0Esa0JBQUUsTUFBRjtBQUNEO0FBQ0YsYUF4QkQsTUF3Qk87QUFDTCxrQkFBSSxlQUFKLENBQW9CO0FBQ2xCLHNCQUFNLFNBRFk7QUFFbEIseUJBQVMscUJBRlM7QUFHbEIsMkJBQVc7QUFITyxlQUFwQjtBQUtBLGdCQUFFLE1BQUY7QUFDRDtBQUNGO0FBcENDO0FBUkc7QUFMUyxLQUFwQjtBQXFERDtBQUNELFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXJGRDtBQXNGQSxNQUFNLElBQU4sR0FBYSxZQUFVO0FBQ3JCLE9BQUssaUJBQUwsQ0FBdUIsS0FBSyxnQkFBNUI7QUFDRCxDQUZEOztBQUtBLE9BQU8sT0FBUCxHQUFpQixpQkFBakI7Ozs7O3lCQ3pHd0IsT0FBTyxJQUFQLENBQVksSztJQUE3QixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87dUJBQ3dDLE9BQU8sRUFBUCxDQUFVLEs7SUFBeEQsb0Isb0JBQUEsb0I7SUFBc0Isb0Isb0JBQUEsb0I7O0FBQzdCLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUEsU0FBUyx3QkFBVCxHQUE2QztBQUFBLE1BQVgsT0FBVyx1RUFBSCxFQUFHOztBQUMzQyxPQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxPQUFLLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxPQUFLLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxPQUFLLE9BQUw7QUFDQSxPQUFLLGdCQUFMLEdBQXdCLFFBQVEsZUFBaEM7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSx3QkFBUixFQUFrQyxXQUFsQzs7QUFFQSxJQUFNLFFBQVEseUJBQXlCLFNBQXZDOztBQUVBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQjtBQUFBOztBQUNwQyxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxNQUFNLGdCQUFnQixPQUFPLEtBQTdCO0FBQ0EsTUFBTSxlQUFlLGNBQWMsZUFBZCxFQUFyQjtBQUNBLE1BQU0sVUFBVSxRQUFRLE9BQXhCO0FBQ0EsTUFBTSxVQUFVLGNBQWMsS0FBZCxFQUFoQjtBQUNBLE1BQUksbUJBQUo7QUFBQSxNQUFnQix3QkFBaEI7QUFDQSxNQUFNLFVBQVUsS0FBSyxRQUFMLEdBQWdCLE9BQU8sUUFBUCxDQUFnQixDQUFoQixDQUFoQztBQUNBLE9BQUssZUFBTDtBQUNBLE9BQUssY0FBTCxHQUFzQixhQUFhLFFBQWIsRUFBdEI7QUFDQSxNQUFNLFFBQVEsU0FBUixLQUFRLEdBQVc7QUFDdkIsUUFBTSxRQUFRLElBQUksR0FBRyxLQUFILENBQVMsTUFBYixDQUFvQjtBQUNoQyxjQUFRLENBRHdCO0FBRWhDLFlBQU0sSUFGMEI7QUFHaEMsY0FBUSxJQUFJLEdBQUcsS0FBSCxDQUFTLE1BQWIsQ0FBb0IsRUFBQyxPQUFPLFFBQVIsRUFBa0IsT0FBTyxDQUF6QixFQUFwQjtBQUh3QixLQUFwQixDQUFkO0FBS0EsV0FBTyxDQUNMLElBQUksR0FBRyxLQUFILENBQVMsS0FBYixDQUFtQjtBQUNqQixrQkFEaUI7QUFFakIsY0FGaUIsb0JBRVIsT0FGUSxFQUVDO0FBQ2hCLFlBQU0sY0FBYyxRQUFRLFdBQVIsR0FBc0IsY0FBdEIsR0FBdUMsQ0FBdkMsQ0FBcEI7QUFDQSxlQUFPLElBQUksR0FBRyxJQUFILENBQVEsVUFBWixDQUF1QixXQUF2QixDQUFQO0FBQ0Q7QUFMZ0IsS0FBbkIsQ0FESyxFQVFMLElBQUksR0FBRyxLQUFILENBQVMsS0FBYixDQUFtQjtBQUNqQixjQUFRLElBQUksR0FBRyxLQUFILENBQVMsTUFBYixDQUFvQjtBQUMxQixlQUFPLFFBRG1CO0FBRTFCLGVBQU87QUFGbUIsT0FBcEI7QUFEUyxLQUFuQixDQVJLLENBQVA7QUFlRCxHQXJCRDtBQXNCQSxVQUFRLFFBQVIsQ0FBaUIsS0FBakI7QUFDQSxNQUFNLFdBQVcsSUFBSSxHQUFHLFVBQVAsQ0FBa0IsT0FBTyxRQUF6QixDQUFqQjtBQUNBLE9BQUssa0JBQUwsR0FBMEIsSUFBSSxHQUFHLFdBQUgsQ0FBZSxNQUFuQixDQUEwQjtBQUNsRCxzQkFEa0Q7QUFFbEQscUJBQWlCLEtBQUs7QUFGNEIsR0FBMUIsQ0FBMUI7QUFJQSxPQUFLLGtCQUFMLENBQXdCLEVBQXhCLENBQTJCLGFBQTNCLEVBQTBDLGVBQU87QUFDL0MsUUFBTSxVQUFVLElBQUksUUFBSixDQUFhLFFBQWIsR0FBd0IsQ0FBeEIsQ0FBaEI7QUFDQSxzQkFBa0IsUUFBUSxLQUFSLEVBQWxCO0FBQ0QsR0FIRDtBQUlBLE9BQUssY0FBTCxDQUFvQixLQUFLLGtCQUF6QjtBQUNBLE9BQUssa0JBQUwsQ0FBd0IsRUFBeEIsQ0FBMkIsV0FBM0IsRUFBd0MsZUFBTztBQUM3QyxRQUFNLFVBQVUsSUFBSSxRQUFKLENBQWEsUUFBYixHQUF3QixDQUF4QixDQUFoQjtBQUNBLFFBQUksUUFBUSxXQUFSLEdBQXNCLFNBQXRCLE9BQXNDLGdCQUFnQixXQUFoQixHQUE4QixTQUE5QixFQUExQyxFQUFxRjtBQUNuRjs7O0FBR0EsWUFBSywrQkFBTCxDQUFxQztBQUNuQyxzQkFEbUM7QUFFbkMsd0JBRm1DO0FBR25DO0FBSG1DLE9BQXJDLEVBSUcsT0FKSCxDQUlXLFlBQUk7QUFDYixxQkFBYSxRQUFRLEtBQVIsRUFBYjtBQUNBLGdCQUFRLFVBQVIsQ0FBbUIsT0FBbkIsRUFBNEIsVUFBNUIsRUFBd0MsZUFBeEM7QUFDQSxlQUFPLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FBcUIsVUFBckI7QUFDQSxVQUFFLE9BQUYsQ0FBVSxNQUFWO0FBQ0QsT0FURDtBQVVBOzs7O0FBSUQ7QUFDRixHQXJCRDtBQXNCQSxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0FsRUQ7O0FBb0VBLE1BQU0scUJBQU4sR0FBOEIsWUFBVTtBQUFBOztBQUN0QyxNQUFNLE1BQU0sS0FBSyxNQUFMLEVBQVo7QUFDQSxPQUFLLGtCQUFMLENBQXdCLEVBQXhCLENBQTJCLGFBQTNCLEVBQTBDLGVBQU87QUFDL0MsUUFBTSxVQUFVLElBQUksUUFBSixDQUFhLFFBQWIsR0FBd0IsQ0FBeEIsQ0FBaEI7QUFDQSxXQUFLLE9BQUwsR0FBZSxxQkFBcUI7QUFDbEMsY0FEa0M7QUFFbEM7QUFGa0MsS0FBckIsQ0FBZjtBQUlELEdBTkQ7QUFPRCxDQVREOztBQVdBLE1BQU0sd0JBQU4sR0FBaUMsWUFBVTtBQUN6QyxNQUFNLE1BQU0sS0FBSyxNQUFMLEVBQVo7QUFDQSxPQUFLLE9BQUwsSUFBZ0I7QUFDZDtBQURjLEtBRVgsS0FBSyxPQUZNLEVBQWhCO0FBSUEsT0FBSyxPQUFMLEdBQWUsSUFBZjtBQUNELENBUEQ7O0FBVUEsTUFBTSxJQUFOLEdBQWEsWUFBVTtBQUNyQixPQUFLLFFBQUwsQ0FBYyxRQUFkLENBQXVCLEtBQUssY0FBNUI7QUFDQSxPQUFLLGlCQUFMLENBQXVCLEtBQUssa0JBQTVCO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FKRDs7QUFPQSxPQUFPLE9BQVAsR0FBaUIsd0JBQWpCOzs7Ozt5QkNqSHdCLE9BQU8sSUFBUCxDQUFZLEs7SUFBN0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNiLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUEsU0FBUyxnQkFBVCxHQUFxQztBQUFBLE1BQVgsT0FBVyx1RUFBSCxFQUFHOztBQUNuQyxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxnQkFBUixFQUEwQixXQUExQjs7QUFFQSxJQUFNLFFBQVEsaUJBQWlCLFNBQS9COztBQUVBLE1BQU0sVUFBTixHQUFtQixZQUFrQztBQUFBLGlGQUFILEVBQUc7QUFBQSxNQUF4QixDQUF3QixRQUF4QixDQUF3QjtBQUFBLE1BQXJCLENBQXFCLFFBQXJCLENBQXFCO0FBQUEsTUFBbEIsV0FBa0IsUUFBbEIsV0FBa0I7O0FBQ25ELE1BQU0saUJBQWlCLFNBQWpCLGNBQWlCLENBQUMsV0FBRCxFQUFnQjtBQUNyQyxRQUFJLE1BQU0sT0FBTixDQUFjLFlBQVksQ0FBWixDQUFkLENBQUosRUFBa0M7QUFDaEMsYUFBTyxlQUFlLFlBQVksQ0FBWixDQUFmLENBQVA7QUFDRCxLQUZELE1BRU8sT0FBTztBQUNaLFNBQUcsWUFBWSxDQUFaLENBRFM7QUFFWixTQUFHLFlBQVksQ0FBWjtBQUZTLEtBQVA7QUFJUixHQVBEO0FBUUEsTUFBTSxLQUFLLGVBQWUsV0FBZixDQUFYO0FBQ0EsU0FBTztBQUNMLE9BQUcsSUFBSSxHQUFHLENBREw7QUFFTCxPQUFHLElBQUksR0FBRztBQUZMLEdBQVA7QUFJRCxDQWREOztBQWdCQSxNQUFNLEdBQU4sR0FBWSxVQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEI7QUFBQTs7QUFDcEMsTUFBTSxJQUFJLEVBQUUsUUFBRixFQUFWO0FBRG9DLE1BRTVCLEtBRjRCLEdBRUssTUFGTCxDQUU1QixLQUY0QjtBQUFBLE1BRXJCLFFBRnFCLEdBRUssTUFGTCxDQUVyQixRQUZxQjtBQUFBLE1BRVgsV0FGVyxHQUVLLE1BRkwsQ0FFWCxXQUZXOztBQUdwQyxNQUFNLFNBQVMsTUFBTSxlQUFOLEdBQXdCLFNBQXhCLEVBQWY7QUFDQSxNQUFNLFVBQVUsTUFBTSxLQUFOLEVBQWhCO0FBQ0EsTUFBTSxVQUFVLFFBQVEsT0FBeEI7QUFDQSxPQUFLLGVBQUwsR0FBdUIsSUFBSSxHQUFHLFdBQUgsQ0FBZSxJQUFuQixDQUF3QjtBQUM3QyxrQkFENkM7QUFFN0MsVUFBTTtBQUZ1QyxHQUF4QixDQUF2Qjs7QUFLQSxPQUFLLGdCQUFMLEdBQXdCLElBQUksR0FBRyxXQUFILENBQWUsSUFBbkIsQ0FBd0I7QUFDOUMsVUFBTSxPQUR3QztBQUU5QyxjQUFVLElBQUksR0FBRyxVQUFQO0FBRm9DLEdBQXhCLENBQXhCOztBQUtBLE9BQUssZ0JBQUwsQ0FBc0IsRUFBdEIsQ0FBeUIsU0FBekIsRUFBb0MsZUFBTztBQUFBLGdDQUMxQixJQUFJLE9BQUosQ0FBWSxXQUFaLEdBQTBCLGNBQTFCLEVBRDBCO0FBQUE7QUFBQSxRQUNsQyxDQURrQztBQUFBLFFBQy9CLENBRCtCOztBQUV6QyxRQUFNLFVBQVUsY0FBYyxNQUFLLFVBQUwsQ0FBZ0I7QUFDNUMsVUFENEMsRUFDekMsSUFEeUMsRUFDdEM7QUFEc0MsS0FBaEIsQ0FBZCxHQUVYLElBRkw7QUFHQSxRQUFNLGlCQUFpQixTQUFTLE1BQWhDO0FBQ0EsUUFBTSw0QkFBNEIsRUFBbEM7QUFDQSxTQUFLLElBQUksSUFBRyxDQUFaLEVBQWUsSUFBSSxjQUFuQixFQUFtQyxHQUFuQyxFQUF3QztBQUN0QyxVQUFNLFVBQVUsU0FBUyxDQUFULEVBQVksUUFBWixFQUFoQjtBQUNBLFVBQUksT0FBSixFQUFhLFFBQVEsV0FBUixHQUFzQixTQUF0QixDQUFnQyxRQUFRLENBQXhDLEVBQTJDLFFBQVEsQ0FBbkQsRUFBYixLQUNLO0FBQ0gsWUFBTSxlQUFjLFFBQVEsV0FBUixHQUFzQixjQUF0QixFQUFwQjtBQUNBLFlBQU0sV0FBVSxNQUFLLFVBQUwsQ0FBZ0I7QUFDOUIsY0FEOEIsRUFDM0IsSUFEMkIsRUFDeEI7QUFEd0IsU0FBaEIsQ0FBaEI7QUFHQSxnQkFBUSxXQUFSLEdBQXNCLFNBQXRCLENBQWdDLFNBQVEsQ0FBeEMsRUFBMkMsU0FBUSxDQUFuRDtBQUNEO0FBQ0QsWUFBSyxrQkFBTCxDQUF3QjtBQUN0Qix3QkFEc0I7QUFFdEI7QUFGc0IsT0FBeEI7QUFJQTs7O0FBR0EsVUFBTSxVQUFVLE1BQUssK0JBQUwsQ0FBcUM7QUFDbkQsc0JBRG1EO0FBRW5ELHdCQUZtRDtBQUduRDtBQUhtRCxPQUFyQyxDQUFoQjs7QUFNQSxnQ0FBMEIsSUFBMUIsQ0FBK0IsT0FBL0I7QUFDRDs7QUFFRCxZQUFRLFVBQVIsQ0FBbUIseUJBQW5CLEVBQ0csSUFESCxDQUNRLG9CQUFZO0FBQ2hCLGVBQVMsT0FBVCxDQUFpQixpQkFBNkI7QUFBQSxZQUEzQixNQUEyQixTQUEzQixNQUEyQjtBQUFBLFlBQWIsT0FBYSxTQUFuQixLQUFtQjs7QUFDNUMsZUFBTyxVQUFQLENBQWtCLE9BQWxCO0FBQ0EsZ0JBQVEsT0FBUixDQUFnQixPQUFoQixFQUF5QixPQUF6QjtBQUNBLGVBQU8sUUFBUCxDQUFnQixJQUFoQixDQUFxQixPQUFyQjtBQUNELE9BSkQ7QUFLRCxLQVBILEVBUUcsT0FSSCxDQVFXLFlBQU07QUFDYjs7O0FBR0EsWUFBSyxNQUFMLENBQVksRUFBWixDQUFlLElBQWYsR0FBc0IsSUFBdEI7QUFDQSxRQUFFLE9BQUYsQ0FBVSxNQUFWO0FBQ0QsS0FkSDtBQWVELEdBaEREOztBQWtEQSxPQUFLLGNBQUwsQ0FBb0IsS0FBSyxnQkFBekI7QUFDQSxPQUFLLGNBQUwsQ0FBb0IsS0FBSyxlQUF6QjtBQUNBLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXJFRDtBQXNFQSxNQUFNLElBQU4sR0FBYSxZQUFXO0FBQ3RCLE9BQUssaUJBQUwsQ0FBdUIsS0FBSyxnQkFBNUI7QUFDQSxPQUFLLGlCQUFMLENBQXVCLEtBQUssZUFBNUI7QUFDQSxPQUFLLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsT0FBSyxlQUFMLEdBQXVCLElBQXZCO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FORDs7QUFRQSxPQUFPLE9BQVAsR0FBaUIsZ0JBQWpCOzs7eUJDekd3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTzs7QUFDYixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLFNBQVMsZUFBVCxDQUF5QixPQUF6QixFQUFpQztBQUMvQixPQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxPQUFLLE9BQUwsQ0FGK0IsQ0FFakI7QUFDZCxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxlQUFSLEVBQXlCLFdBQXpCOztBQUVBLElBQU0sUUFBUSxnQkFBZ0IsU0FBOUI7O0FBRUEsTUFBTSxHQUFOLEdBQVksVUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCO0FBQUE7O0FBQ3BDLE9BQUssT0FBTCxHQUFlLEVBQUUsUUFBRixFQUFmO0FBQ0EsTUFBTSxnQkFBZ0IsT0FBTyxLQUE3QjtBQUNBLE1BQU0sVUFBVSxRQUFRLE9BQXhCO0FBQ0EsTUFBTSxVQUFVLGNBQWMsS0FBZCxFQUFoQjtBQUNBLE1BQU0sV0FBVyxJQUFJLEdBQUcsVUFBUCxDQUFrQixPQUFPLFFBQXpCLENBQWpCO0FBQ0EsTUFBSSxrQkFBa0IsSUFBdEI7QUFDQSxPQUFLLFNBQUwsR0FBaUIsSUFBakIsQ0FQb0MsQ0FPYjtBQUN2QixNQUFJLG1CQUFtQixLQUF2QixDQVJvQyxDQVFOOztBQUU5QixPQUFLLGdDQUFMLENBQXNDO0FBQ3BDLGFBQVMsS0FBSztBQURzQixHQUF0Qzs7QUFJQSxPQUFLLHFCQUFMLEdBQTZCLElBQUksR0FBRyxXQUFILENBQWUsU0FBbkIsQ0FBNkI7QUFDeEQsc0JBRHdEO0FBRXhELGtCQUFlLFlBQVksU0FBUyxHQUF0QixHQUE2QixFQUE3QixHQUFrQztBQUZRLEdBQTdCLENBQTdCO0FBSUEsT0FBSyxjQUFMLENBQW9CLEtBQUsscUJBQXpCOztBQUVBLE9BQUsscUJBQUwsQ0FBMkIsRUFBM0IsQ0FBOEIsZ0JBQTlCLEVBQWdELGVBQU87QUFDckQsUUFBTSxVQUFVLElBQUksUUFBSixDQUFhLFFBQWIsR0FBd0IsQ0FBeEIsQ0FBaEI7QUFDQSxVQUFLLFNBQUwsR0FBaUIsUUFBUSxJQUFSLENBQWEsUUFBYixFQUF1QjtBQUFBLGFBQU0sbUJBQW1CLElBQXpCO0FBQUEsS0FBdkIsQ0FBakI7QUFDQSxzQkFBa0IsUUFBUSxLQUFSLEVBQWxCO0FBQ0QsR0FKRDs7QUFNQSxPQUFLLHFCQUFMLENBQTJCLEVBQTNCLENBQThCLGNBQTlCLEVBQThDLGVBQU87QUFDbkQsT0FBRyxVQUFILENBQWMsT0FBZCxDQUFzQixNQUFLLFNBQTNCO0FBQ0EsUUFBTSxVQUFVLElBQUksUUFBSixDQUFhLFFBQWIsR0FBd0IsQ0FBeEIsQ0FBaEI7QUFDQSxRQUFJLGdCQUFKLEVBQXNCO0FBQ3BCOzs7QUFHQSxZQUFLLCtCQUFMLENBQXFDO0FBQ25DLHNCQURtQztBQUVuQyx3QkFGbUM7QUFHbkM7QUFIbUMsT0FBckMsRUFJRyxPQUpILENBSVcsWUFBTTtBQUNmLFlBQU0sYUFBYSxRQUFRLEtBQVIsRUFBbkI7QUFDQSxnQkFBUSxVQUFSLENBQW1CLE9BQW5CLEVBQTRCLFVBQTVCLEVBQXdDLGVBQXhDO0FBQ0EsY0FBSyxPQUFMLENBQWEsT0FBYixDQUFxQixNQUFyQjtBQUNELE9BUkQ7QUFTRCxLQWJELE1BYU8sTUFBSyxPQUFMLENBQWEsT0FBYixDQUFxQixNQUFyQjtBQUNSLEdBakJEOztBQW1CQSxTQUFPLEtBQUssT0FBTCxDQUFhLE9BQWIsRUFBUDtBQUNELENBOUNEOztBQWdEQSxNQUFNLElBQU4sR0FBYSxZQUFXO0FBQ3RCLE9BQUssT0FBTCxDQUFhLE9BQWI7QUFDQSxPQUFLLGlCQUFMLENBQXVCLEtBQUsscUJBQTVCO0FBQ0EsT0FBSyxxQkFBTCxHQUE2QixJQUE3QjtBQUNBLE9BQUssU0FBTCxHQUFpQixJQUFqQjtBQUNELENBTEQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLGVBQWpCOzs7QUNwRUE7Ozs7Ozs7O3lCQUN3QixPQUFPLElBQVAsQ0FBWSxLO0lBQTdCLEksc0JBQUEsSTtJQUFNLE8sc0JBQUEsTztJQUNOLEcsR0FBTyxPQUFPLEcsQ0FBZCxHO0lBQ0EsYyxHQUFrQixPQUFPLElBQVAsQ0FBWSxRLENBQTlCLGM7O0FBQ1AsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjtBQUNBLElBQU0sdUJBQXVCLFFBQVEsMkJBQVIsQ0FBN0I7O0FBRUEsU0FBUyxZQUFULEdBQWtDO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ2hDLE9BQUssZUFBTCxHQUF1QixRQUFRLGNBQVIsS0FBMkIsU0FBM0IsR0FBdUMsSUFBdkMsR0FBOEMsUUFBUSxlQUE3RTtBQUNBLE9BQUssYUFBTCxHQUFxQixPQUFyQjtBQUNBLE9BQUssT0FBTDtBQUNBLE9BQUssZUFBTCxHQUF1QixLQUF2QjtBQUNBLE9BQUssU0FBTDtBQUNBLE9BQUssY0FBTDtBQUNBLE9BQUssYUFBTDtBQUNBLE9BQUssVUFBTDtBQUNBLE9BQUssaUJBQUw7QUFDQSxPQUFLLE9BQUw7QUFDQSxPQUFLLFFBQUw7QUFDQSxPQUFLLG9CQUFMO0FBQ0EsT0FBSyxPQUFMO0FBQ0EsT0FBSyxNQUFMLEdBQWMsUUFBUSxLQUFSLElBQWlCLEtBQS9CLENBZGdDLENBY007QUFDdEMsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsWUFBUixFQUFzQixXQUF0Qjs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsWUFBakI7O0FBRUEsSUFBTSxRQUFRLGFBQWEsU0FBM0I7O0FBRUEsTUFBTSxRQUFOO0FBQUEscUVBQWlCLGlCQUFlLE1BQWYsRUFBdUIsT0FBdkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2YsaUJBQUssUUFBTCxHQUFnQixRQUFRLE9BQXhCO0FBQ0EsaUJBQUssY0FBTCxHQUFzQixPQUFPLEtBQTdCO0FBQ0EsaUJBQUssYUFBTCxHQUFxQixLQUFLLGNBQUwsQ0FBb0IsZUFBcEIsRUFBckI7QUFDQSxpQkFBSyxVQUFMLEdBQWtCLEtBQUssY0FBTCxDQUFvQixPQUFwQixFQUFsQjtBQUNBLGlCQUFLLFNBQUwsR0FBaUIsS0FBSyxNQUFMLEdBQWMsT0FBTyxRQUFyQixHQUFnQyxDQUFDLE9BQU8sUUFBUCxDQUFnQixPQUFPLFFBQVAsQ0FBZ0IsTUFBaEIsR0FBeUIsQ0FBekMsQ0FBRCxDQUFqRDtBQUNBLGlCQUFLLGlCQUFMLEdBQXlCLEtBQUssU0FBTCxDQUFlLEdBQWYsQ0FBbUI7QUFBQSxxQkFBVyxRQUFRLEtBQVIsRUFBWDtBQUFBLGFBQW5CLENBQXpCO0FBQ00sbUJBUFMsR0FPQyxLQUFLLFNBQUwsQ0FBZSxDQUFmLENBUEQ7QUFRZjs7OztBQUdBLGdCQUFJLEtBQUssZUFBVCxFQUEwQjtBQUNqQix5QkFEaUIsR0FDVyxPQURYLENBQ2pCLFdBRGlCLEVBQ0osV0FESSxHQUNXLE9BRFgsQ0FDSixXQURJOztBQUV4QixrQkFBSSxPQUFPLFdBQVAsS0FBdUIsV0FBM0IsRUFBeUM7QUFDdkMsd0JBQVEsR0FBUixDQUFZLFdBQVosRUFBeUIsV0FBekI7QUFDQSxxQkFBSyxpQkFBTCxDQUF1QixDQUF2QixFQUEwQixHQUExQixDQUE4QixXQUE5QixFQUEyQyxXQUEzQztBQUNEO0FBQ0Y7QUFqQmM7QUFBQSxtQkFrQk0sS0FBSyxhQUFMLENBQW1CO0FBQ3RDLDRCQURzQztBQUV0Qyw4QkFGc0M7QUFHdEMsOEJBSHNDO0FBSXRDLHVCQUFTLEtBQUs7QUFKd0IsYUFBbkIsQ0FsQk47O0FBQUE7QUFrQmYsaUJBQUssT0FsQlU7O0FBd0JmO0FBQ0EsaUJBQUssT0FBTCxHQUFlLEtBQUssTUFBTCxHQUFjLEtBQUssT0FBTCxDQUFhLEdBQWIsQ0FBaUIsaUJBQVM7QUFDckQsa0JBQU0sU0FBUyxLQUFLLEtBQUwsQ0FBVyxLQUFLLFNBQUwsQ0FBZSxLQUFmLENBQVgsQ0FBZjtBQUNBLHFCQUFPLEtBQVAsR0FBZSxJQUFmO0FBQ0EscUJBQU8sU0FBUCxHQUFtQixJQUFuQjtBQUNBLHFCQUFPLFFBQVAsQ0FBZ0IsUUFBaEIsR0FBMkIsS0FBM0I7QUFDQSxxQkFBTyxNQUFQO0FBQ0QsYUFONEIsRUFNMUIsTUFOMEIsQ0FNbkI7QUFBQSxxQkFBUyxDQUFDLE1BQU0sRUFBaEI7QUFBQSxhQU5tQixDQUFkLEdBTWlCLEtBQUssT0FOckM7QUFPQSxnQkFBSSxLQUFLLGNBQUwsQ0FBb0IsZ0JBQXBCLEVBQUosRUFBNEM7QUFDcEMsaUNBRG9DLEdBQ2QsS0FBSyxjQUFMLENBQW9CLHNCQUFwQixFQURjOztBQUUxQyxtQkFBSyxvQkFBTCxHQUE0QixvQkFBb0IsTUFBcEIsR0FBNkIsbUJBQTdCLEdBQW1ELElBQS9FO0FBQ0Q7O0FBbkNjLDZDQXFDUixJQUFJLGtCQUFKLENBQXVCLE1BQXZCLENBckNROztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQWpCOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXdDQSxNQUFNLFVBQU4sR0FBbUIsVUFBUyxPQUFULEVBQWtCLE1BQWxCLEVBQTBCO0FBQzNDLFNBQU8sWUFBVztBQUNoQixRQUFJLENBQUMsS0FBSyxlQUFWLEVBQTBCO0FBQ3hCLFVBQUksUUFBSixDQUFhLEtBQWI7QUFDQTtBQUNBLFdBQUssU0FBTCxDQUFlLFlBQWYsRUFBNkIsT0FBTyxRQUFwQztBQUNEO0FBQ0QsWUFBUSxNQUFSLENBQWUsTUFBZjtBQUNELEdBUEQ7QUFRRCxDQVREOztBQVdBOzs7OztBQUtBLE1BQU0sT0FBTixHQUFnQixVQUFTLE1BQVQsRUFBZ0I7QUFBQTs7QUFDOUIsU0FBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO0FBQUEsc0JBQ3BCLE1BQUssVUFBTCxFQURvQjtBQUFBLFFBQy9CLE9BRCtCLGVBQy9CLE9BRCtCOztBQUV0QyxRQUFNLFNBQVMsTUFBSyxTQUFMLEVBQWY7QUFDQSxhQUFTLE1BQUssTUFBTCxHQUFjLE9BQU8sTUFBUCxDQUFjO0FBQUEsYUFBUyxNQUFNLEtBQU4sS0FBZ0IsSUFBekI7QUFBQSxLQUFkLENBQWQsR0FBNkQsTUFBdEU7QUFDQSxRQUFJLE9BQU8sTUFBWCxFQUFtQjtBQUNqQixVQUFNLGNBQWMsRUFBcEI7QUFDQSxZQUFLLFNBQUwsQ0FBZSxPQUFmLENBQXVCLG1CQUFVO0FBQy9CLGNBQUssY0FBTCxDQUFvQixtQkFBcEIsQ0FBd0MsT0FBeEMsRUFBaUQsTUFBakQ7QUFDQSxvQkFBWSxJQUFaLENBQWlCLFFBQVEsS0FBUixFQUFqQjtBQUNELE9BSEQ7QUFJQSxVQUFJLE1BQUssZUFBVCxFQUEwQjtBQUN4QixlQUFPLGdCQUFQLEdBQTBCO0FBQ3hCLGtDQUR3QjtBQUV4Qiw0QkFBa0IsTUFBSztBQUZDLFNBQTFCO0FBSUQ7QUFDRCxZQUFLLFNBQUwsQ0FBZSxVQUFmLEVBQTJCO0FBQ3pCLGdDQUR5QjtBQUV6QiwwQkFBa0IsTUFBSztBQUZFLE9BQTNCLEVBR0csSUFISCxDQUdRLFlBQUs7QUFDWCxvQkFBWSxPQUFaLENBQW9CLFVBQUMsVUFBRCxFQUFhLEtBQWIsRUFBc0I7QUFDeEMsa0JBQVEsVUFBUixDQUFtQixNQUFLLE9BQXhCLEVBQWlDLFVBQWpDLEVBQTZDLE1BQUssaUJBQUwsQ0FBdUIsS0FBdkIsQ0FBN0M7QUFDRCxTQUZEO0FBR0EsY0FBSyxTQUFMLENBQWUsY0FBZixFQUErQixXQUEvQixFQUpXLENBSWtDO0FBQzdDLGNBQUssU0FBTCxtQkFBK0IsTUFBSyxPQUFwQyxFQUErQyxXQUEvQyxFQUxXLENBS2tEO0FBQzdELGdCQUFRLElBQVI7QUFDQSxnQkFBUTtBQUNOLG1CQUFTLE1BQUs7QUFEUixTQUFSO0FBR0QsT0FiRDtBQWNEO0FBQ0YsR0EvQk0sQ0FBUDtBQWdDRCxDQWpDRDs7QUFtQ0EsTUFBTSxhQUFOLEdBQXNCLGlCQUE0QztBQUFBOztBQUFBLE1BQWxDLE1BQWtDLFNBQWxDLE1BQWtDO0FBQUEsTUFBMUIsT0FBMEIsU0FBMUIsT0FBMEI7QUFBQSxNQUFqQixPQUFpQixTQUFqQixPQUFpQjtBQUFBLE1BQVIsTUFBUSxTQUFSLE1BQVE7O0FBQ2hFLFdBQVMsS0FBSyxNQUFMLEdBQWMsT0FBTyxNQUFQLENBQWM7QUFBQSxXQUFTLE1BQU0sS0FBTixLQUFnQixJQUF6QjtBQUFBLEdBQWQsQ0FBZCxHQUE2RCxNQUF0RTtBQUNBLE1BQUksT0FBTyxNQUFYLEVBQW1CO0FBQ2pCLFFBQU0sY0FBYyxFQUFwQjtBQUNBLFNBQUssU0FBTCxDQUFlLE9BQWYsQ0FBdUIsbUJBQVU7QUFDL0IsYUFBSyxjQUFMLENBQW9CLG1CQUFwQixDQUF3QyxPQUF4QyxFQUFpRCxNQUFqRDtBQUNBLGtCQUFZLElBQVosQ0FBaUIsUUFBUSxLQUFSLEVBQWpCO0FBQ0QsS0FIRDtBQUlBLFFBQUksS0FBSyxlQUFULEVBQTBCO0FBQ3hCLGFBQU8sZ0JBQVAsR0FBMEI7QUFDeEIsZ0NBRHdCO0FBRXhCLDBCQUFrQixLQUFLO0FBRkMsT0FBMUI7QUFJRDtBQUNELFNBQUssU0FBTCxDQUFlLFVBQWYsRUFBMkI7QUFDekIsOEJBRHlCO0FBRXpCLHdCQUFrQixLQUFLO0FBRkUsS0FBM0IsRUFHRyxJQUhILENBR1EsWUFBSztBQUNYLGtCQUFZLE9BQVosQ0FBb0IsVUFBQyxVQUFELEVBQWEsS0FBYixFQUFxQjtBQUN2QyxnQkFBUSxVQUFSLENBQW1CLE9BQUssT0FBeEIsRUFBaUMsVUFBakMsRUFBNkMsT0FBSyxpQkFBTCxDQUF1QixLQUF2QixDQUE3QztBQUNELE9BRkQ7QUFHQSxVQUFJLFFBQUosQ0FBYSxLQUFiO0FBQ0EsYUFBSyxTQUFMLENBQWUsY0FBZixFQUErQixXQUEvQixFQUxXLENBS2tDO0FBQzdDLGFBQUssU0FBTCxtQkFBK0IsT0FBSyxPQUFwQyxFQUErQyxXQUEvQyxFQU5XLENBTWtEO0FBQzdEO0FBQ0EsYUFBSyxlQUFMLElBQXdCLGVBQWUsVUFBZixHQUE0QixPQUE1QixDQUFvQztBQUFBLGVBQVksU0FBUyxVQUFULEdBQXNCLE9BQXRCLENBQThCLFNBQTlCLENBQXdDLElBQXhDLEVBQThDO0FBQ3BILGlCQUFPO0FBRDZHLFNBQTlDLENBQVo7QUFBQSxPQUFwQyxDQUF4QjtBQUdBLGNBQVEsT0FBUixDQUFnQixNQUFoQjtBQUNELEtBZkQ7QUFnQkQsR0E1QkQsTUE0Qk87QUFDTCxRQUFJLFFBQUosQ0FBYSxLQUFiO0FBQ0EsWUFBUSxPQUFSLENBQWdCLE1BQWhCO0FBQ0Q7QUFDRixDQWxDRDs7QUFvQ0EsTUFBTSxRQUFOLEdBQWlCLFVBQVMsT0FBVCxFQUFrQixPQUFsQixFQUEyQixNQUEzQixFQUFtQztBQUNsRCxTQUFPLFVBQVMsTUFBVCxFQUFpQjtBQUN0QixRQUFNLFVBQVUsUUFBUSxPQUF4QjtBQUNBLFNBQUssYUFBTCxDQUFtQjtBQUNqQixvQkFEaUI7QUFFakIsc0JBRmlCO0FBR2pCLHNCQUhpQjtBQUlqQjtBQUppQixLQUFuQjtBQU1ELEdBUkQ7QUFTRCxDQVZEOztBQVlBOzs7OztBQUtBLE1BQU0sU0FBTiwyREFBa0I7QUFBQSxNQUFlLE9BQWYsdUVBQXlCLEVBQXpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNoQixlQUFLLGlCQUFMLEdBQXlCLGdCQUF6QjtBQUNRLGdCQUZRLEdBRXFCLE9BRnJCLENBRVIsTUFGUSxFQUVBLE9BRkEsR0FFcUIsT0FGckIsQ0FFQSxPQUZBLEVBRVMsT0FGVCxHQUVxQixPQUZyQixDQUVTLE9BRlQ7QUFHUixpQkFIUSxHQUdJLE9BSEosQ0FHUixPQUhRO0FBSVYsdUJBSlUsR0FJTSxRQUFRLGFBQVIsSUFBeUIsb0JBSi9CO0FBQUE7QUFBQSxpQkFLRyxLQUFLLFFBQUwsQ0FBYyxNQUFkLEVBQXNCLE9BQXRCLENBTEg7O0FBQUE7QUFLVixjQUxVO0FBTVYsaUJBTlUsR0FNQSxLQUFLLGlCQUFMLENBQXVCLENBQXZCLENBTkE7QUFPVixlQVBVLEdBT0YsS0FBSyxpQkFBTCxDQUF1QixNQUF2QixHQUFnQyxDQUFoQyxHQUFvQyxLQUFwQyxHQUE0QyxRQUFRLEtBQVIsRUFQMUM7O0FBU2hCOzs7O0FBR0EseUJBQWUsVUFBZixHQUE0QixRQUE1QixDQUFxQztBQUNuQyxpQkFBSyxRQUQ4QjtBQUVuQyxtQkFBTyxLQUFLO0FBRnVCLFdBQXJDOztBQUtNLHFCQWpCVSxHQWlCSSxLQUFLO0FBQ3ZCLHdDQUR1QjtBQUV2QixtQkFBTyxvQ0FGZ0I7QUFHdkIsa0JBQU0sS0FBSyxVQUhZO0FBSXZCLG1CQUFPO0FBQ0wscUJBQU8sS0FBSztBQURQLGFBSmdCO0FBT3ZCLGdCQUFJLEtBQUssZUFBTCxDQUFxQixLQUFLLFVBQTFCLENBUG1CO0FBUXZCLG9CQUFRLEtBQUssVUFSVTtBQVN2QixtQkFBTyxLQUFLLGNBVFc7QUFVdkIsd0JBVnVCLEVBVWhCO0FBQ1AsNEJBWHVCO0FBWXZCLHdCQUFZLEtBQUssaUJBQUwsRUFaVztBQWF2QixvQkFBUSxLQUFLLE9BYlU7QUFjdkIsNEJBQWdCLENBQUMsS0FBSyxNQUFOLElBQWdCLEtBQUssZUFBckIsSUFBd0M7QUFDdEQsOEJBRHNEO0FBRXREO0FBRnNELGFBZGpDO0FBa0J2QiwyQkFBZSxLQUFLLG9CQWxCRztBQW1CdkIsbUJBQU8sSUFuQmdCO0FBb0J2QixrQkFBTSxLQUFLLGVBcEJZO0FBcUJ2Qix3QkFBWSxDQUFDLEtBQUssZUFyQks7QUFzQnZCLDZCQUFnQixpQkF0Qk87QUF1QnZCLHFCQUFRLENBQUM7QUFDUCxrQkFBSSxNQURHO0FBRVAscUJBQU8sS0FBSyxlQUFMLEdBQXVCLDRDQUF2QixHQUFzRSxtQ0FGdEU7QUFHUCxvQkFBTSxNQUhDO0FBSVAscUJBQU8sYUFKQTtBQUtQLG1CQUFLLEtBQUssUUFBTCxDQUFjLE9BQWQsRUFBdUIsT0FBdkIsRUFBZ0MsTUFBaEMsRUFBd0MsSUFBeEMsQ0FBNkMsSUFBN0M7QUFMRSxhQUFELEVBTUw7QUFDRCxrQkFBSSxRQURIO0FBRUQscUJBQU8scUNBRk47QUFHRCxvQkFBTSxRQUhMO0FBSUQscUJBQU8sWUFKTjtBQUtEO0FBQ0EsNEJBQWM7QUFDWix3QkFBUTtBQUNOLHlCQUFRO0FBQ04sd0JBQUksT0FERTtBQUVOLDJCQUFPLE9BRkQ7QUFHTiwwQkFBTSxRQUhBO0FBSU4sMkJBQU87QUFKRDtBQURGO0FBREksZUFOYjtBQWdCRCxtQkFBSyxLQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsRUFBeUIsTUFBekIsRUFBaUMsSUFBakMsQ0FBc0MsSUFBdEM7QUFoQkosYUFOSztBQXZCZSxXQUFMLENBakJKOztBQWlFaEIsZUFBSyxTQUFMLENBQWUsVUFBZixFQUNFO0FBQ0UscUJBQVEsS0FBSyxPQURmO0FBRUUsNEJBRkY7QUFHRSxxQkFBUyxLQUFLLGdCQUhoQjtBQUlFO0FBSkYsV0FERjtBQU9NLHlCQXhFVSxHQXdFUSxlQUFlLFVBQWYsRUF4RVI7QUF5RWhCOztBQUNBLDZCQUFtQixnQkFBZ0IsaUJBQWhCLENBQWtDLFdBQWxDLENBQW5COztBQTFFZ0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBbEI7O0FBNkVBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQjtBQUNwQyxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxPQUFLLE9BQUwsR0FBZSxDQUFmO0FBQ0EsT0FBSyxlQUFMLEdBQXVCLGVBQWUsU0FBZixLQUE2QixDQUFwRDtBQUhvQyxNQUk1QixLQUo0QixHQUlSLE1BSlEsQ0FJNUIsS0FKNEI7QUFBQSxNQUlyQixRQUpxQixHQUlSLE1BSlEsQ0FJckIsUUFKcUI7O0FBS3BDLE9BQUssT0FBTCxHQUFlLE1BQU0sS0FBTixFQUFmO0FBQ0EsTUFBSSxpQkFBSixDQUFzQixLQUF0QjtBQUNBLE9BQUssaUJBQUwsR0FBeUIsMEJBQXpCLENBQW9ELElBQXBEOztBQUVBLE9BQUssZ0NBQUwsQ0FBc0M7QUFDcEMsYUFBUztBQUQyQixHQUF0Qzs7QUFJQSxNQUFJLENBQUMsS0FBSyxNQUFOLElBQWdCLE1BQU0sT0FBTixDQUFjLFNBQVMsU0FBUyxNQUFULEdBQWlCLENBQTFCLENBQWQsQ0FBcEIsRUFBaUU7QUFDL0QsTUFBRSxPQUFGO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsU0FBSyxTQUFMLENBQWU7QUFDYixvQkFEYTtBQUViLHNCQUZhO0FBR2IsZUFBUztBQUhJLEtBQWY7QUFLQSxTQUFLLGNBQUwsQ0FBb0IsSUFBcEI7QUFDRDs7QUFFRCxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0F6QkQ7O0FBMkJBLE1BQU0sZUFBTixHQUF3QixVQUFTLFNBQVQsRUFBb0I7QUFDMUMsU0FBTyxLQUFLLGFBQUwsR0FBcUIsU0FBNUI7QUFDRCxDQUZEOztBQUlBLE1BQU0sSUFBTixHQUFhLFlBQVc7QUFDdEIsT0FBSyxjQUFMLENBQW9CLEtBQXBCO0FBQ0EsTUFBSSxDQUFDLEtBQUssZUFBVixFQUEyQjtBQUN6QixTQUFLLGlCQUFMLEdBQXlCLDBCQUF6QixDQUFvRCxLQUFwRDtBQUNBO0FBQ0EsbUJBQWUsVUFBZixHQUE0QixVQUE1QixHQUF5QyxPQUF6QyxDQUFpRCxTQUFqRCxDQUEyRCxLQUEzRCxFQUFrRTtBQUNoRSxhQUFPO0FBRHlELEtBQWxFO0FBR0Q7QUFDRCxNQUFJLFNBQUosQ0FBYztBQUNaLFNBQUssS0FBSztBQURFLEdBQWQ7QUFHQSxPQUFLLGlCQUFMLEdBQXlCLGtCQUF6QjtBQUNBLE9BQUssU0FBTCxDQUFlLFdBQWY7QUFDQSxPQUFLLFNBQUwsZ0JBQTRCLEtBQUssT0FBakMsRUFkc0IsQ0FjdUI7QUFDN0MsT0FBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLE9BQUssT0FBTCxHQUFlLElBQWY7QUFDRCxDQWpCRDs7O3lCQzNSd0IsT0FBTyxJQUFQLENBQVksSztJQUE3QixPLHNCQUFBLE87SUFBUyxJLHNCQUFBLEk7SUFDVCxHLEdBQU8sT0FBTyxHLENBQWQsRztJQUNBLGMsR0FBa0IsT0FBTyxJQUFQLENBQVksUSxDQUE5QixjOztBQUNQLElBQU0saUJBQWlCLFFBQVEsdUNBQVIsQ0FBdkI7QUFDQSxJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLFNBQVMsYUFBVCxHQUFtQztBQUFBLE1BQVosT0FBWSx1RUFBSixFQUFJOztBQUNqQyxPQUFLLGFBQUwsR0FBcUIsT0FBckI7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxhQUFSLEVBQXVCLFdBQXZCOztBQUVBLElBQU0sUUFBUSxjQUFjLFNBQTVCOztBQUVBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQjtBQUFBOztBQUNwQyxPQUFLLGlCQUFMLEdBQXlCLGdCQUF6QjtBQUNBLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQU0sZ0JBQWdCLE9BQU8sS0FBN0I7QUFDQSxNQUFNLFlBQVksY0FBYyxPQUFkLEVBQWxCO0FBQ0EsTUFBTSxVQUFVLGNBQWMsZ0JBQWQsRUFBaEI7QUFDQSxPQUFLLGVBQUwsR0FBdUIsZUFBZSxTQUFmLEtBQTZCLENBQXBEO0FBQ0EsTUFBTSxhQUFhLEtBQUssZUFBTCxJQUF3QixRQUFRLGFBQWhDLEdBQWdELFFBQVEsYUFBUixDQUFzQixDQUF0QixDQUFoRCxHQUE0RSxJQUEvRjtBQUNBLE1BQU0sVUFBVSxLQUFLLGVBQUwsSUFBd0IsUUFBUSxPQUFoRDtBQUNBLE1BQU0sZUFBZSxjQUFjLHNCQUFkLEVBQXJCO0FBQ0EsTUFBTSxlQUFlLGNBQWMsZUFBZCxFQUFyQjtBQUNBLE1BQUksV0FBVyxhQUFhLG1CQUFiLEVBQWY7QUFDQSxNQUFJLFdBQVcsU0FBUyxNQUF4QixFQUFnQztBQUFBLFFBQ3ZCLEtBRHVCLEdBQ2QsT0FEYyxDQUN2QixLQUR1Qjs7QUFFOUIsZUFBVyxTQUFTLE1BQVQsQ0FBZ0IsbUJBQVc7QUFDcEMsVUFBTSxlQUFlLFFBQVEsR0FBUixDQUFZLFVBQVosQ0FBckI7QUFDQSxhQUFPLGdCQUFnQixLQUF2QjtBQUNELEtBSFUsQ0FBWDtBQUlEO0FBQ0QsTUFBTSxVQUFVLElBQUksY0FBSixDQUFtQjtBQUNqQyxnQkFBVSxTQUR1QjtBQUVqQyxzQkFGaUM7QUFHakMsYUFBUyxDQUh3QjtBQUlqQyxVQUFNLEtBQUssZUFKc0I7QUFLakMsb0JBTGlDO0FBTWpDLG9CQU5pQztBQU9qQyxrQkFQaUM7QUFRakMsOEJBUmlDO0FBU2pDLGlCQUFhLFFBQVEsV0FUWTtBQVVqQztBQVZpQyxHQUFuQixDQUFoQjtBQVlBLE1BQUksY0FBSixDQUFtQixJQUFuQjtBQUNBLE1BQUksZUFBSixDQUFvQjtBQUNsQixVQUFNLFNBRFk7QUFFbEIsYUFBUyw2Q0FGUztBQUdsQixlQUFXLEtBSE87QUFJbEIsY0FBVTtBQUpRLEdBQXBCOztBQU9BLGFBQVcsWUFBSTtBQUNiLFlBQVEsSUFBUixDQUFhLE9BQWIsRUFBc0I7QUFBQSxhQUFLLFdBQVcsWUFBSztBQUN6QyxZQUFJLGNBQUosQ0FBbUIsS0FBbkI7QUFDQSxZQUFJLGdCQUFKO0FBQ0QsT0FIMEIsQ0FBTDtBQUFBLEtBQXRCO0FBSUEsUUFBSSxXQUFKLENBQWdCO0FBQ2Qsc0JBRGM7QUFFZDtBQUNBLFlBQU0sTUFBSyxlQUhHO0FBSWQsa0JBQVksS0FKRTtBQUtkLGdCQUFVO0FBTEksS0FBaEI7QUFPRCxHQVpELEVBWUcsR0FaSDtBQWFBLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXJERDs7QUF1REEsTUFBTSxlQUFOLEdBQXdCLFVBQVMsU0FBVCxFQUFvQjtBQUMxQyxjQUFVLEtBQUssYUFBZixHQUErQixTQUEvQjtBQUNELENBRkQ7O0FBSUEsTUFBTSxJQUFOLEdBQWEsWUFBVztBQUN0QixPQUFLLGNBQUwsQ0FBb0IsS0FBcEI7QUFDQSxPQUFLLGVBQUwsR0FBdUIsSUFBSSxVQUFKLEVBQXZCLEdBQTBDLElBQUksWUFBSixFQUExQztBQUNBLE9BQUssaUJBQUwsR0FBeUIsa0JBQXpCO0FBQ0QsQ0FKRDs7QUFNQSxPQUFPLE9BQVAsR0FBaUIsYUFBakI7OztBQ2hGQTs7eUJBQzJCLE9BQU8sSUFBUCxDQUFZLEs7SUFBL0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOztBQUNkLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUEsU0FBUyxlQUFULEdBQXFDO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7O0FBQ25DLE9BQUssUUFBTCxHQUFnQjtBQUNkLGVBQVcsUUFBUSxTQUFSLElBQXFCLEtBRGxCO0FBRWQsV0FBTyxRQUFRLEtBQVIsSUFBaUI7QUFGVixHQUFoQjtBQUlBLE9BQUssc0JBQUwsR0FBOEIsSUFBOUI7QUFDQSxPQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsT0FBSyxNQUFMLEdBQWMsUUFBUSxLQUFSLElBQWlCLEVBQS9CO0FBQ0EsT0FBSyxJQUFMLEVBQVcsT0FBWDtBQUNEOztBQUVELFFBQVEsZUFBUixFQUF5QixXQUF6Qjs7QUFFQSxJQUFNLFFBQVEsZ0JBQWdCLFNBQTlCOztBQUVBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQjtBQUFBOztBQUNwQyxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFDQSxNQUFNLGVBQWUsT0FBTyxLQUFQLENBQWEsZUFBYixFQUFyQjs7QUFFQSxPQUFLLHNCQUFMLEdBQThCLElBQUksZ0RBQUosQ0FBNEI7QUFDeEQsV0FBTztBQURpRCxHQUE1QixDQUE5Qjs7QUFJQSxPQUFLLGNBQUwsQ0FBb0IsS0FBSyxzQkFBekI7QUFDQSxPQUFLLHNCQUFMLENBQTRCLEVBQTVCLENBQStCLFFBQS9CLEVBQXlDLGVBQU87QUFBQSxRQUN2QyxRQUR1QyxHQUNmLEdBRGUsQ0FDdkMsUUFEdUM7QUFBQSxRQUM3QixVQUQ2QixHQUNmLEdBRGUsQ0FDN0IsVUFENkI7O0FBRTlDLFFBQUksT0FBTyxRQUFQLENBQWdCLE1BQWhCLEtBQTJCLENBQS9CLEVBQWtDO0FBQ2hDLGFBQU8sUUFBUCxHQUFrQixRQUFsQjtBQUNBLGFBQU8sVUFBUCxHQUFvQixVQUFwQjtBQUNEO0FBQ0QsVUFBSyxnQ0FBTCxDQUFzQztBQUNwQyxlQUFTO0FBRDJCLEtBQXRDOztBQUlBLFVBQUssTUFBTCxJQUFlLE1BQUssc0JBQUwsQ0FBNEIsUUFBNUIsQ0FBZjtBQUNBLE1BQUUsT0FBRixDQUFVLE1BQVY7QUFDRCxHQVpEOztBQWNBLFNBQU8sRUFBRSxPQUFGLEVBQVA7QUFDRCxDQXhCRDs7QUEwQkEsTUFBTSxJQUFOLEdBQWEsWUFBVztBQUN0QixPQUFLLGlCQUFMLENBQXVCLEtBQUssc0JBQTVCO0FBQ0EsT0FBSyxzQkFBTCxHQUE4QixJQUE5QjtBQUNBLFNBQU8sSUFBUDtBQUNELENBSkQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLGVBQWpCOzs7QUNwREE7Ozs7SUFDUSwwQixHQUE4QixPQUFPLEVBQVAsQ0FBVSxZLENBQXhDLDBCO0lBQ0QsaUIsR0FBcUIsT0FBTyxJQUFQLENBQVksSSxDQUFqQyxpQjtJQUNBLGdCLEdBQW9CLE9BQU8sSUFBUCxDQUFZLE8sQ0FBaEMsZ0I7eUJBQ29CLE9BQU8sSUFBUCxDQUFZLEs7SUFBL0IsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPO0lBQ04sRyxHQUFRLE9BQU8sRyxDQUFmLEc7O0FBQ1IsSUFBTSxjQUFjLFFBQVEsZUFBUixDQUFwQjs7QUFFQSxTQUFTLDRCQUFULEdBQWtEO0FBQUEsTUFBWixPQUFZLHVFQUFKLEVBQUk7QUFBQSxNQUN6QyxTQUR5QyxHQUNSLE9BRFEsQ0FDekMsU0FEeUM7QUFBQSxNQUM5QixRQUQ4QixHQUNSLE9BRFEsQ0FDOUIsUUFEOEI7QUFBQSxNQUNwQixRQURvQixHQUNSLE9BRFEsQ0FDcEIsUUFEb0I7O0FBRWhELE9BQUssU0FBTCxHQUFpQixTQUFqQjtBQUNBLE9BQUssUUFBTCxHQUFnQixRQUFoQjtBQUNBLE9BQUssUUFBTCxHQUFnQixRQUFoQjtBQUNBLE9BQUssZUFBTCxHQUF1QixJQUF2QjtBQUNBLE9BQUssSUFBTCxFQUFXLE9BQVg7QUFDRDs7QUFFRCxRQUFRLDRCQUFSLEVBQXNDLFdBQXRDOztBQUVBLElBQU0sUUFBUSw2QkFBNkIsU0FBM0M7O0FBRUEsTUFBTSxHQUFOLEdBQVksVUFBUyxNQUFULEVBQWlCLE9BQWpCLEVBQTBCO0FBQ3BDLE1BQU0sSUFBSSxFQUFFLFFBQUYsRUFBVjtBQUNBLE1BQUksS0FBSyxTQUFULEVBQW9CO0FBQ2xCLFNBQUssb0JBQUwsQ0FBMEI7QUFDeEIsb0JBRHdCO0FBRXhCLGVBQVM7QUFGZSxLQUExQjtBQUlELEdBTEQsTUFLTztBQUNMO0FBQ0Q7QUFDRCxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0FYRDs7QUFhQSxNQUFNLG9CQUFOLDJEQUE2QjtBQUFBOztBQUFBLGtGQUFpQyxFQUFqQztBQUFBLE1BQWdCLE1BQWhCLFNBQWdCLE1BQWhCO0FBQUEsTUFBd0IsT0FBeEIsU0FBd0IsT0FBeEI7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN2QixrQkFEdUIsR0FDWixFQURZO0FBRXJCLHNCQUZxQixHQUVOLE9BQU8sS0FBUCxDQUFhLGVBQWIsRUFGTTtBQUdyQiw0QkFIcUIsR0FHQSxJQUFJLE9BQUo7QUFBQSxnRkFBWSxrQkFBTyxPQUFQLEVBQWdCLE1BQWhCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNyQywwQkFBSSxNQUFLLFFBQVQsRUFBbUI7QUFDakI7QUFDQSw0QkFBSSxNQUFLLFFBQVQsRUFBbUI7QUFDakIsZ0NBQUssZUFBTCxHQUF1QixJQUFJLGdEQUFKLENBQTRCO0FBQ2pELG1DQUFPLE1BQUs7QUFEcUMsMkJBQTVCLENBQXZCO0FBR0EsZ0NBQUssY0FBTCxDQUFvQixNQUFLLGVBQXpCO0FBQ0EsZ0NBQUssZUFBTCxDQUFxQixFQUFyQixDQUF3QixRQUF4QixFQUFrQyxlQUFPO0FBQUEsZ0NBQ3ZCLFNBRHVCLEdBQ1YsR0FEVSxDQUNoQyxRQURnQzs7QUFFdkMsdUNBQVcsTUFBSyw0Q0FBTCxDQUFrRDtBQUMzRCx3Q0FBVSxTQURpRDtBQUUzRDtBQUYyRCw2QkFBbEQsQ0FBWDtBQUlBO0FBQ0QsMkJBUEQ7QUFRRCx5QkFiRCxNQWFPO0FBQUk7QUFDVCxnQ0FBSyxlQUFMLEdBQXVCLElBQUksMEJBQUosRUFBdkI7QUFDQSxnQ0FBSyxjQUFMLENBQW9CLE1BQUssZUFBekI7QUFDTSxpQ0FIRCxHQUdXLGlCQUFpQixpQkFBakIsRUFIWDs7QUFJTCxnQ0FBSyxlQUFMLENBQXFCLElBQXJCLENBQTBCLFFBQTFCO0FBQUEsZ0dBQW9DLGlCQUFNLEdBQU47QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM1QixpREFENEIsR0FDZCxJQUFJLFVBRFU7QUFBQTtBQUFBO0FBQUEsNkNBR1Isa0JBQWtCLE9BQWxCLENBQTBCLG1CQUExQixFQUErQztBQUNyRSxnREFBUTtBQUNOLGtFQURNO0FBRU4saUVBQXVCLFFBQVEsc0JBQVIsRUFGakI7QUFHTixvREFBVSxDQUFDLE1BQUssU0FBTCxDQUFlLEtBQWYsRUFBRCxDQUhKO0FBSU4sdURBQWE7QUFKUCx5Q0FENkQ7QUFPckUsaURBQVM7QUFQNEQsdUNBQS9DLENBSFE7O0FBQUE7QUFBQTtBQUFBLHlEQUd6QixJQUh5QjtBQUd6QiwwQ0FIeUIsOEJBR3BCLEVBSG9COztBQVloQywwQ0FBSSxLQUFLLE1BQVQsRUFBaUI7QUFDZixtREFBVyxNQUFLLDRDQUFMLENBQWtEO0FBQzNELG9EQUFVLEtBQUssQ0FBTCxFQUFRLFFBRHlDO0FBRTNEO0FBRjJELHlDQUFsRCxDQUFYO0FBSUQ7QUFqQitCO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQW1CaEMsOENBQVEsTUFBUjs7QUFuQmdDO0FBQUE7O0FBcUJoQztBQXJCZ0M7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsNkJBQXBDOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBd0JEO0FBQ0YsdUJBNUNELE1BNENPO0FBQ0w7QUFDRDs7QUEvQ29DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBQVo7O0FBQUE7QUFBQTtBQUFBO0FBQUEsY0FIQTtBQUFBO0FBQUEsaUJBb0RyQixrQkFwRHFCOztBQUFBO0FBcUQzQixjQUFJLFNBQVMsTUFBYixFQUFxQjtBQUNuQixtQkFBTyxRQUFQLEdBQWtCLFFBQWxCO0FBQ0Esb0JBQVEsT0FBUixDQUFnQixNQUFoQjtBQUNELFdBSEQsTUFHTztBQUNMLGdCQUFJLGVBQUosQ0FBb0I7QUFDbEIsb0JBQU0sU0FEWTtBQUVsQix1QkFBUyw4Q0FGUztBQUdsQix3QkFBVSxLQUhRO0FBSWxCLHlCQUFXO0FBSk8sYUFBcEI7QUFNQSxvQkFBUSxNQUFSO0FBQ0Q7O0FBaEUwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUE3Qjs7QUFtRUEsTUFBTSxJQUFOLEdBQWEsWUFBVztBQUN0QixPQUFLLGlCQUFMLENBQXVCLEtBQUssZUFBNUI7QUFDQSxPQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxTQUFPLElBQVA7QUFDRCxDQUpEOztBQU1BLE9BQU8sT0FBUCxHQUFpQiw0QkFBakI7OztJQzNHUSxnQixHQUFxQixPQUFPLEksQ0FBNUIsZ0I7eUJBQ2tCLE9BQU8sSUFBUCxDQUFZLEs7SUFBOUIsSSxzQkFBQSxJO0lBQU0sTyxzQkFBQSxPOzRCQUlWLE9BQU8sSUFBUCxDQUFZLFE7SUFGZCxzQix5QkFBQSxzQjtJQUNBLDBCLHlCQUFBLDBCO0lBRU0sTyxHQUFZLE9BQU8sSUFBUCxDQUFZLEtBQVosQ0FBa0IsUSxDQUE5QixPO0lBQ0Esc0IsR0FBMkIsT0FBTyxFQUFQLENBQVUsWSxDQUFyQyxzQjs7QUFDUixJQUFNLGNBQWMsUUFBUSxlQUFSLENBQXBCOztBQUVBLFNBQVMsa0JBQVQsR0FBd0M7QUFBQSxNQUFaLE9BQVksdUVBQUosRUFBSTs7QUFDdEMsT0FBSyxLQUFMLEdBQWEsUUFBUSxJQUFSLElBQWdCLE1BQTdCLENBRHNDLENBQ0Q7QUFDckMsT0FBSyxtQkFBTCxHQUEyQixFQUEzQjtBQUNBLE9BQUssc0JBQUwsR0FBOEIsRUFBOUI7QUFDQSxPQUFLLGNBQUw7QUFDQSxPQUFLLFlBQUw7QUFDQSxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxrQkFBUixFQUE0QixXQUE1Qjs7QUFFQSxJQUFNLFFBQVEsbUJBQW1CLFNBQWpDOztBQUVBLE1BQU0sMEJBQU4sR0FBbUMsWUFBd0Q7QUFBQTs7QUFBQSxpRkFBSCxFQUFHO0FBQUEsTUFBOUMsS0FBOEMsUUFBOUMsS0FBOEM7QUFBQSxNQUF2QyxNQUF1QyxRQUF2QyxNQUF1QztBQUFBLE1BQS9CLE9BQStCLFFBQS9CLE9BQStCO0FBQUEsNkJBQXRCLFVBQXNCO0FBQUEsTUFBdEIsVUFBc0IsbUNBQVgsS0FBVzs7QUFDekYsTUFBTSxvQkFBb0IsSUFBSSxzQkFBSixDQUEyQjtBQUNuRCxZQUFRLENBQUMsTUFBTSxlQUFOLEVBQUQ7QUFEMkMsR0FBM0IsQ0FBMUI7QUFHQSxvQkFBa0IsRUFBbEIsQ0FBcUIsUUFBckIsRUFBK0IsYUFBSztBQUNsQyxRQUFNLFVBQVUsRUFBRSxPQUFsQjtBQUNBLFFBQUksT0FBSixFQUFhO0FBQ1gsVUFBTSxXQUFXLENBQUMsT0FBRCxDQUFqQjtBQUNBLGFBQU8sUUFBUCxHQUFrQixRQUFsQjtBQUNBLFVBQUksQ0FBQyxVQUFMLEVBQWlCO0FBQ2YsY0FBSyxjQUFMLEdBQXNCLE1BQUssd0JBQUwsQ0FBOEIsUUFBOUIsQ0FBdEI7QUFDQSxjQUFLLE1BQUwsSUFBZSxNQUFLLHNCQUFMLENBQTRCLFFBQTVCLENBQWY7QUFDQSxnQkFBUSxPQUFSLENBQWdCLE1BQWhCO0FBQ0QsT0FKRCxNQUlPLE1BQUssaUNBQUwsQ0FBdUMsQ0FBQyxPQUFELENBQXZDLEVBQWtELE1BQWxEO0FBQ1I7QUFDRixHQVhEO0FBWUEsT0FBSyxtQkFBTCxDQUF5QixJQUF6QixDQUE4QixpQkFBOUI7QUFDQSxPQUFLLGNBQUwsQ0FBb0IsaUJBQXBCO0FBQ0QsQ0FsQkQ7O0FBb0JBOzs7Ozs7O0FBT0EsTUFBTSw0QkFBTixHQUFxQyxZQUF3RDtBQUFBLGtGQUFILEVBQUc7QUFBQSxNQUE5QyxLQUE4QyxTQUE5QyxLQUE4QztBQUFBLE1BQXZDLE1BQXVDLFNBQXZDLE1BQXVDO0FBQUEsTUFBL0IsT0FBK0IsU0FBL0IsT0FBK0I7QUFBQSwrQkFBdEIsVUFBc0I7QUFBQSxNQUF0QixVQUFzQixvQ0FBWCxLQUFXOztBQUMzRixNQUFNLG9CQUFvQixNQUFNLGVBQU4sRUFBMUI7QUFDQSxNQUFNLFVBQVUsTUFBTSxLQUFOLEVBQWhCO0FBQ0EsTUFBTSxTQUFTLE1BQU0sZUFBTixHQUF3QixTQUF4QixFQUFmOztBQUgyRixvQkFJekUsS0FBSyxVQUFMLEVBSnlFO0FBQUEsTUFJcEYsT0FKb0YsZUFJcEYsT0FKb0Y7QUFLM0Y7OztBQUNBLE1BQU0sU0FBUyxLQUFLLGFBQUwsR0FBcUIsaUJBQXJCLEdBQXlDLE1BQXpDLENBQWdELHdCQUFnQjtBQUM3RSxRQUFJLG1CQUFtQixJQUF2QjtBQUNBLFFBQU0sT0FBTyxhQUFhLE9BQWIsRUFBYjtBQUNBLFFBQUksU0FBUyxRQUFiLEVBQXVCO0FBQ3JCLFVBQU0sV0FBVyxhQUFhLFNBQWIsR0FBeUIsV0FBekIsRUFBakI7QUFDQSxVQUFJLFNBQVMsTUFBYixFQUFxQjtBQUNuQixZQUFNLFVBQVUsU0FBUyxDQUFULENBQWhCO0FBQ0EsWUFBTSxlQUFlLFFBQVEsV0FBUixHQUFzQixPQUF0QixFQUFyQjtBQUNBLDJCQUFtQix1QkFBdUIsWUFBdkIsRUFBcUMsaUJBQXJDLENBQW5CO0FBQ0Q7QUFDRjtBQUNELFdBQU8sZ0JBQVA7QUFDRCxHQVpjLENBQWY7QUFhQSxNQUFNLG9CQUFvQixJQUFJLHNCQUFKLENBQTJCO0FBQ25EO0FBRG1ELEdBQTNCLENBQTFCO0FBR0Esb0JBQWtCLEVBQWxCLENBQXFCLFFBQXJCLEVBQStCLGVBQU87QUFDcEMsUUFBSSxJQUFJLE9BQVIsRUFBaUI7QUFDZixVQUFNLGFBQWEsTUFBTSxnQkFBTixFQUFuQjtBQUNBLFVBQU0sV0FBVyxJQUFJLE9BQUosQ0FBWSxXQUFaLEVBQWpCO0FBQ0MsZUFBUyxPQUFULE9BQXVCLGlCQUF4QixJQUE4QyxJQUFJLE9BQUosQ0FBWSxXQUFaLENBQXdCLDJCQUEyQixRQUEzQixFQUFxQyxpQkFBckMsQ0FBeEIsQ0FBOUM7QUFDQSxVQUFNLFVBQVUsSUFBSSxPQUFKLENBQVk7QUFDMUIsaUJBQVMsSUFBSSxPQURhO0FBRTFCLG9CQUFZLFdBQVcsTUFBWCxDQUFrQixxQkFBYTtBQUN6QztBQUNBLGNBQUksVUFBVSxLQUFWLENBQWdCLElBQWhCLEtBQXlCLE9BQTdCLEVBQXNDLElBQUksT0FBSixDQUFZLEdBQVosQ0FBZ0IsVUFBVSxJQUExQixFQUFnQyxJQUFoQztBQUN0QyxpQkFBTyxDQUFDLFVBQVUsRUFBbEI7QUFDRCxTQUpXLEVBSVQsR0FKUyxDQUlMO0FBQUEsaUJBQVksU0FBUyxJQUFyQjtBQUFBLFNBSks7QUFGYyxPQUFaLENBQWhCOztBQVNBLGNBQVEsY0FBUjtBQUNBLGFBQU8sVUFBUCxDQUFrQixPQUFsQjtBQUNBLGNBQVEsT0FBUixDQUFnQixPQUFoQixFQUF5QixPQUF6QixFQUFrQyxLQUFsQztBQUNBLFVBQU0sV0FBVyxDQUFDLE9BQUQsQ0FBakI7QUFDQSxhQUFPLFFBQVAsR0FBa0IsUUFBbEI7QUFDQSxjQUFRLE9BQVIsQ0FBZ0IsTUFBaEI7QUFDRCxLQW5CRCxNQW1CTyxRQUFRLE1BQVI7QUFDUixHQXJCRDtBQXNCQSxPQUFLLG1CQUFMLENBQXlCLElBQXpCLENBQThCLGlCQUE5QjtBQUNBLE9BQUssY0FBTCxDQUFvQixpQkFBcEI7QUFDRCxDQTlDRDs7QUFnREEsTUFBTSxpQ0FBTixHQUEwQyxZQUE2QjtBQUFBOztBQUFBLE1BQXBCLFFBQW9CLHVFQUFYLEVBQVc7QUFBQSxNQUFQLE1BQU87O0FBQ3JFLFdBQVMsT0FBVCxDQUFpQixtQkFBVTtBQUN6QixRQUFNLFdBQVcsT0FBSyxzQkFBTCxDQUE0QixPQUE1QixDQUFvQyxPQUFwQyxDQUFqQjtBQUNBLFFBQUksV0FBVyxDQUFmLEVBQWtCO0FBQ2hCLGFBQUssY0FBTCxHQUFzQixPQUFLLHdCQUFMLENBQThCLENBQUMsT0FBRCxDQUE5QixDQUF0QjtBQUNBLGFBQUssc0JBQUwsQ0FBNEIsSUFBNUIsQ0FBaUMsT0FBakM7QUFDRCxLQUhELE1BR087QUFDTCxhQUFLLHNCQUFMLENBQTRCLE1BQTVCLENBQW1DLFFBQW5DLEVBQTZDLENBQTdDO0FBQ0EsY0FBUSxRQUFSLENBQWlCLE9BQUssY0FBdEI7QUFDRDtBQUNELFdBQU8sUUFBUCxHQUFrQixPQUFLLHNCQUF2QjtBQUNELEdBVkQ7QUFXQSxPQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLFVBQW5CLENBQThCLFFBQTlCLEdBQXlDLEtBQUssTUFBTCxDQUFZLE1BQVosQ0FBbUIsVUFBbkIsQ0FBOEIsU0FBOUIsR0FBMEMsS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixVQUFuQixDQUE4QixTQUE5QixDQUF3QyxFQUFDLFVBQVMsS0FBSyxzQkFBZixFQUF4QyxDQUExQyxHQUE0SCxLQUFLLHNCQUFMLENBQTRCLE1BQTVCLEtBQXVDLENBQTVNO0FBQ0EsTUFBSSxLQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLE9BQW5CLEtBQStCLFNBQW5DLEVBQThDLEtBQUssTUFBTCxDQUFZLE1BQVosQ0FBbUIsT0FBbkIsR0FBNkIsS0FBSyxzQkFBTCxDQUE0QixNQUF6RDtBQUMvQyxDQWREOztBQWdCQTs7Ozs7OztBQU9BLE1BQU0sNEJBQU4sR0FBcUMsWUFBdUQ7QUFBQTs7QUFBQSxrRkFBSCxFQUFHO0FBQUEsTUFBN0MsS0FBNkMsU0FBN0MsS0FBNkM7QUFBQSxNQUF0QyxNQUFzQyxTQUF0QyxNQUFzQztBQUFBLE1BQTlCLE9BQThCLFNBQTlCLE9BQThCO0FBQUEsK0JBQXJCLFVBQXFCO0FBQUEsTUFBckIsVUFBcUIsb0NBQVYsS0FBVTs7QUFDMUYsTUFBSSxrQ0FBSjtBQUNBLE1BQUksaUJBQWlCLFFBQXJCLEVBQStCO0FBQzdCLFFBQU0sbUJBQW1CLEdBQUcsV0FBSCxDQUFlLElBQWYsQ0FBb0IsU0FBcEIsRUFBekI7QUFDQSxRQUFNLFNBQVMsSUFBSSxHQUFHLE1BQUgsQ0FBVSxNQUFkLENBQXFCLEVBQXJCLENBQWY7QUFDQSxTQUFLLFlBQUwsR0FBb0IsSUFBSSxHQUFHLEtBQUgsQ0FBUyxNQUFiLENBQW9CO0FBQ3RDO0FBRHNDLEtBQXBCLENBQXBCOztBQUlBLFNBQUssTUFBTCxHQUFjLFFBQWQsQ0FBdUIsS0FBSyxZQUE1QjtBQUNBLGdDQUE0QixJQUFJLEdBQUcsV0FBSCxDQUFlLElBQW5CLENBQXdCO0FBQ2xELFlBQU0sUUFENEM7QUFFbEQsb0JBRmtEO0FBR2xEO0FBSGtELEtBQXhCLENBQTVCOztBQU1BLDhCQUEwQixFQUExQixDQUE2QixTQUE3QixFQUF3QyxlQUFPO0FBQzdDLFVBQU0sVUFBVSxJQUFJLE9BQXBCO0FBQ0EsVUFBTSxhQUFhLFFBQVEsV0FBUixHQUFzQixTQUF0QixFQUFuQjtBQUNBLFVBQU0sY0FBYyxNQUFNLGVBQU4sR0FBd0IsU0FBeEIsRUFBcEI7QUFDQSxVQUFNLFdBQVcsWUFBWSxtQkFBWixDQUFnQyxVQUFoQyxDQUFqQjtBQUNBLFVBQUksQ0FBQyxVQUFMLEVBQWdCO0FBQ2QsWUFBSSxDQUFDLFNBQVMsTUFBZCxFQUFzQixRQUFRLE1BQVIsR0FBdEIsS0FDSztBQUNILGlCQUFPLFFBQVAsR0FBa0IsUUFBbEI7QUFDQSxpQkFBSyxjQUFMLEdBQXNCLE9BQUssd0JBQUwsQ0FBOEIsUUFBOUIsQ0FBdEI7QUFDQSxpQkFBSyxNQUFMLElBQWUsT0FBSyxzQkFBTCxDQUE0QixRQUE1QixDQUFmO0FBQ0EscUJBQVcsWUFBSTtBQUNiLG9CQUFRLE9BQVIsQ0FBZ0IsTUFBaEI7QUFDRCxXQUZELEVBRUcsR0FGSDtBQUdEO0FBQ0YsT0FWRCxNQVVPLE9BQUssaUNBQUwsQ0FBdUMsUUFBdkMsRUFBaUQsTUFBakQ7QUFDUixLQWhCRDtBQWlCRCxHQS9CRCxNQStCUTtBQUNOLGdDQUE0QixJQUFJLEdBQUcsV0FBSCxDQUFlLE9BQW5CLENBQTJCO0FBQ3JELGlCQUFXLEdBQUcsTUFBSCxDQUFVLFNBQVYsQ0FBb0I7QUFEc0IsS0FBM0IsQ0FBNUI7QUFHQSw4QkFBMEIsRUFBMUIsQ0FBNkIsUUFBN0IsRUFBdUMsZUFBTztBQUM1QyxVQUFNLFdBQVcsRUFBakI7QUFDQSxVQUFNLFNBQVMsMEJBQTBCLFdBQTFCLEdBQXdDLFNBQXhDLEVBQWY7QUFDQSxVQUFNLGNBQWMsTUFBTSxlQUFOLEdBQXdCLFNBQXhCLEVBQXBCO0FBQ0Esa0JBQVksZ0NBQVosQ0FBNkMsTUFBN0MsRUFBcUQsbUJBQVc7QUFDOUQsaUJBQVMsSUFBVCxDQUFjLE9BQWQ7QUFDRCxPQUZEO0FBR0EsVUFBSSxDQUFDLFVBQUwsRUFBZ0I7QUFDZCxZQUFJLENBQUMsU0FBUyxNQUFkLEVBQXNCLFFBQVEsTUFBUixHQUF0QixLQUNLO0FBQ0gsaUJBQU8sUUFBUCxHQUFrQixRQUFsQjtBQUNBLGlCQUFLLGNBQUwsR0FBc0IsT0FBSyx3QkFBTCxDQUE4QixRQUE5QixDQUF0QjtBQUNBLGlCQUFLLE1BQUwsSUFBZSxPQUFLLHNCQUFMLENBQTRCLFFBQTVCLENBQWY7QUFDQSxrQkFBUSxPQUFSLENBQWdCLE1BQWhCO0FBQ0Q7QUFDRixPQVJELE1BUU8sT0FBSyxpQ0FBTCxDQUF1QyxRQUF2QyxFQUFpRCxNQUFqRDtBQUNSLEtBaEJEO0FBaUJEO0FBQ0QsT0FBSyxtQkFBTCxDQUF5QixJQUF6QixDQUE4Qix5QkFBOUI7QUFDQSxPQUFLLGNBQUwsQ0FBb0IseUJBQXBCO0FBQ0QsQ0F6REQ7O0FBMkRBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQixPQUExQixFQUFtQztBQUFBOztBQUM3QyxNQUFNLFFBQVEsT0FBTyxLQUFyQjtBQUNBLE1BQU0sVUFBVSxFQUFFLFFBQUYsRUFBaEI7QUFDQSxVQUFPLEtBQUssS0FBWjtBQUNFLFNBQUssUUFBTDtBQUNFLFdBQUssMEJBQUwsQ0FBZ0MsRUFBQyxZQUFELEVBQVEsY0FBUixFQUFnQixnQkFBaEIsRUFBaEM7QUFDQTtBQUNGLFNBQUssVUFBTDtBQUNFLFVBQU0sYUFBYSxDQUFDLENBQUMsS0FBSyxNQUFMLENBQVksTUFBWixDQUFtQixVQUF4QztBQUNBLFVBQUksVUFBSixFQUFnQixLQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLFVBQW5CLENBQThCLElBQTlCLEdBQXFDLFlBQUs7QUFBQyxnQkFBUSxPQUFSLENBQWdCLE1BQWhCO0FBQXdCLE9BQW5FO0FBQ2hCLFdBQUssMEJBQUwsQ0FBZ0MsRUFBQyxZQUFELEVBQVEsY0FBUixFQUFnQixnQkFBaEIsRUFBeUIsc0JBQXpCLEVBQWhDO0FBQ0EsV0FBSyw0QkFBTCxDQUFrQyxFQUFDLFlBQUQsRUFBUSxjQUFSLEVBQWdCLGdCQUFoQixFQUF5QixzQkFBekIsRUFBbEM7QUFDQTtBQUNGLFNBQUssTUFBTDtBQUNFLFdBQUssNEJBQUwsQ0FBa0MsRUFBQyxZQUFELEVBQVEsY0FBUixFQUFnQixnQkFBaEIsRUFBbEM7QUFDQTtBQUNGLFNBQUssVUFBTDtBQUNFLFdBQUssNEJBQUwsQ0FBa0MsRUFBQyxZQUFELEVBQVEsY0FBUixFQUFnQixnQkFBaEIsRUFBbEM7QUFDQTtBQWZKO0FBaUJBLFVBQVEsS0FBUixDQUFjLE9BQWQsQ0FBc0IsWUFBSTtBQUN6QixXQUFPLFFBQVAsQ0FBZ0IsT0FBaEIsQ0FBeUI7QUFBQSxhQUFXLFFBQVEsUUFBUixDQUFpQixPQUFLLGNBQXRCLENBQVg7QUFBQSxLQUF6QjtBQUNBLEdBRkQ7QUFHQSxTQUFPLFFBQVEsT0FBUixFQUFQO0FBQ0QsQ0F4QkQ7O0FBMEJBLE1BQU0sSUFBTixHQUFhLFlBQVc7QUFBQTs7QUFDdEIsT0FBSyxtQkFBTCxDQUF5QixPQUF6QixDQUFpQztBQUFBLFdBQWUsT0FBSyxpQkFBTCxDQUF1QixXQUF2QixDQUFmO0FBQUEsR0FBakM7QUFDQSxPQUFLLFlBQUwsSUFBcUIsS0FBSyxNQUFMLEdBQWMsV0FBZCxDQUEwQixLQUFLLFlBQS9CLENBQXJCO0FBQ0EsT0FBSyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsT0FBSyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsT0FBSyxtQkFBTCxHQUEyQixFQUEzQjtBQUNBLE9BQUssc0JBQUwsR0FBOEIsRUFBOUI7QUFDRCxDQVBEOztBQVNBLE9BQU8sT0FBUCxHQUFpQixrQkFBakI7Ozs7O3lCQ3ZOMkIsT0FBTyxJQUFQLENBQVksSztJQUEvQixJLHNCQUFBLEk7SUFBTSxPLHNCQUFBLE87SUFDTixhLEdBQWtCLE9BQU8sSUFBUCxDQUFZLFEsQ0FBOUIsYTtJQUNBLE8sR0FBWSxPQUFPLElBQVAsQ0FBWSxLQUFaLENBQWtCLFEsQ0FBOUIsTztJQUNBLEcsR0FBUSxPQUFPLEcsQ0FBZixHOztBQUNSLElBQU0sY0FBYyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUEsU0FBUyxnQkFBVCxHQUFxQztBQUFBLE1BQVgsT0FBVyx1RUFBSCxFQUFHOztBQUNuQyxPQUFLLElBQUwsRUFBVyxPQUFYO0FBQ0Q7O0FBRUQsUUFBUSxnQkFBUixFQUEwQixXQUExQjs7QUFFQSxJQUFNLFFBQVEsaUJBQWlCLFNBQS9COztBQUVBLE1BQU0sR0FBTixHQUFZLFVBQVMsTUFBVCxFQUFpQixPQUFqQixFQUEwQjtBQUFBOztBQUNwQyxNQUFNLElBQUksRUFBRSxRQUFGLEVBQVY7QUFEb0MsTUFFNUIsS0FGNEIsR0FFUixNQUZRLENBRTVCLEtBRjRCO0FBQUEsTUFFckIsUUFGcUIsR0FFUixNQUZRLENBRXJCLFFBRnFCOztBQUdwQyxNQUFNLFNBQVMsTUFBTSxlQUFOLEdBQXdCLFNBQXhCLEVBQWY7QUFDQSxNQUFNLFVBQVUsUUFBUSxPQUF4QjtBQUNBLE9BQUssZUFBTCxHQUF1QixJQUFJLEdBQUcsV0FBSCxDQUFlLElBQW5CLENBQXdCO0FBQzdDLGtCQUQ2QztBQUU3QyxVQUFNO0FBRnVDLEdBQXhCLENBQXZCOztBQUtBLE9BQUssZ0JBQUwsR0FBd0IsSUFBSSxHQUFHLFdBQUgsQ0FBZSxJQUFuQixDQUF3QjtBQUM5QyxVQUFNLFlBRHdDO0FBRTlDLGNBQVUsSUFBSSxHQUFHLFVBQVAsRUFGb0M7QUFHOUMsdUJBQW1CLEdBQUcsTUFBSCxDQUFVLFNBQVYsQ0FBb0I7QUFITyxHQUF4QixDQUF4Qjs7QUFNQSxPQUFLLGdCQUFMLENBQXNCLEVBQXRCLENBQXlCLFNBQXpCO0FBQUEsdUVBQW9DLGlCQUFNLEdBQU47QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUM1QiwwQkFENEIsR0FDYixJQUFJLE9BRFM7QUFFOUIsd0JBRjhCLEdBRWpCLEtBRmlCO0FBRzVCLGdDQUg0QixHQUdQLGNBQWM7QUFDdkMsMENBRHVDO0FBRXZDO0FBRnVDLGVBQWQsQ0FITztBQU81QixzQ0FQNEIsR0FPRCxtQkFBbUIsTUFQbEI7QUFBQSwwRUFRekIsQ0FSeUI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGdEQVNOLG1CQUFtQixDQUFuQixDQVRNLEVBU3pCLEdBVHlCLHlCQVN6QixHQVR5QixFQVNwQixVQVRvQix5QkFTcEIsVUFUb0I7O0FBQUEsOEJBVTVCLFdBQVcsTUFBWCxHQUFvQixDQVZRO0FBQUE7QUFBQTtBQUFBOztBQVc5QixxQ0FBYSxJQUFiO0FBQ00sK0JBWndCLEdBWWQsU0FBUyxJQUFULENBQWM7QUFBQSxpQ0FBVyxRQUFRLE1BQVIsT0FBcUIsR0FBaEM7QUFBQSx5QkFBZCxDQVpjO0FBQUE7QUFBQSwrQkFheEIsTUFBSyxtQkFBTCxDQUF5QjtBQUM3QiwwQ0FENkI7QUFFN0IsOENBQW9CLFVBRlM7QUFHN0Isd0NBSDZCO0FBSTdCO0FBSjZCLHlCQUF6QixDQWJ3Qjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVF6QixlQVJ5QixHQVF2QixDQVJ1Qjs7QUFBQTtBQUFBLG9CQVFwQixJQUFJLHdCQVJnQjtBQUFBO0FBQUE7QUFBQTs7QUFBQSxtREFRekIsQ0FSeUI7O0FBQUE7QUFRVSxpQkFSVjtBQUFBO0FBQUE7O0FBQUE7O0FBc0JsQyxrQkFBSSxVQUFKLEVBQWdCO0FBQ2Qsb0JBQUksZUFBSixDQUFvQjtBQUNsQix3QkFBTSxTQURZO0FBRWxCLDJCQUFTLG1DQUZTO0FBR2xCLDZCQUFXO0FBSE8saUJBQXBCOztBQU1BLGtCQUFFLE9BQUYsQ0FBVSxNQUFWO0FBRUQsZUFURCxNQVNPO0FBQ0wsb0JBQUksZUFBSixDQUFvQjtBQUNsQix3QkFBTSxTQURZO0FBRWxCLDJCQUFTLDRDQUZTO0FBR2xCLDZCQUFXO0FBSE8saUJBQXBCO0FBS0Esa0JBQUUsTUFBRjtBQUNEOztBQXRDaUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBcEM7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUF3Q0EsT0FBSyxjQUFMLENBQW9CLEtBQUssZ0JBQXpCO0FBQ0EsT0FBSyxjQUFMLENBQW9CLEtBQUssZUFBekI7QUFDQSxTQUFPLEVBQUUsT0FBRixFQUFQO0FBQ0QsQ0EzREQ7O0FBNkRBLE1BQU0sbUJBQU4sMkRBQTRCO0FBQUEsa0ZBQWlFLEVBQWpFO0FBQUEsTUFBZ0IsT0FBaEIsU0FBZ0IsT0FBaEI7QUFBQSxNQUF5QixNQUF6QixTQUF5QixNQUF6QjtBQUFBLE1BQWlDLE9BQWpDLFNBQWlDLE9BQWpDO0FBQUEsb0NBQTBDLGtCQUExQztBQUFBLE1BQTBDLGtCQUExQyx5Q0FBNkQsRUFBN0Q7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNwQixxQkFEb0IsR0FDTixFQURNO0FBRW5CLGVBRm1CLEdBRVYsTUFGVSxDQUVuQixLQUZtQjtBQUdwQixnQkFIb0IsR0FHWCxNQUFNLGVBQU4sR0FBd0IsU0FBeEIsRUFIVztBQUlwQixpQkFKb0IsR0FJVixNQUFNLEtBQU4sRUFKVTtBQUtwQixvQkFMb0IsR0FLUCxRQUFRLEtBQVIsRUFMTzs7QUFNMUIsaUJBQU8sUUFBUCxHQUFrQixtQkFBbUIsTUFBbkIsR0FBNEIsRUFBNUIsR0FBaUMsT0FBTyxRQUExRDtBQUNNLGtDQVBvQixHQU9PLG1CQUFtQixNQVAxQjtBQVFqQixlQVJpQixHQVFYLENBUlc7O0FBQUE7QUFBQSxnQkFRUixRQUFRLHdCQVJBO0FBQUE7QUFBQTtBQUFBOztBQVNsQiwwQkFUa0IsR0FTQyxtQkFBbUIsS0FBbkIsQ0FURDs7QUFBQSxnQkFVcEIsVUFBVSxDQVZVO0FBQUE7QUFBQTtBQUFBOztBQVd0Qjs7O0FBR0Esa0JBQVEsV0FBUixDQUFvQixnQkFBcEI7QUFkc0I7QUFBQTtBQUFBLGlCQWdCZCxLQUFLLCtCQUFMLENBQXFDO0FBQ3pDLDBCQUR5QztBQUV6Qyw0QkFGeUM7QUFHekM7QUFIeUMsV0FBckMsQ0FoQmM7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUF1QnRCLGtCQUFRLFVBQVIsQ0FBbUIsT0FBbkIsRUFBNEIsT0FBNUIsRUFBcUMsVUFBckM7O0FBdkJzQjtBQUFBOztBQUFBO0FBMEJoQixvQkExQmdCLEdBMEJILFdBQVcsUUFBWCxFQTFCRzs7QUEyQnRCLHFCQUFXLFdBQVgsQ0FBdUIsZ0JBQXZCOztBQUVBLGVBQUssa0JBQUwsQ0FBd0I7QUFDdEIsd0JBRHNCO0FBRXRCLHFCQUFTO0FBRmEsV0FBeEI7O0FBS0Esb0JBQVUsSUFBSSxPQUFKLENBQVk7QUFDcEIscUJBQVM7QUFEVyxXQUFaLENBQVY7O0FBSUEsa0JBQVEsY0FBUjtBQUNBLGlCQUFPLFVBQVAsQ0FBa0IsT0FBbEI7QUFDQTs7O0FBeENzQjtBQUFBO0FBQUEsaUJBNENkLEtBQUssK0JBQUwsQ0FBcUM7QUFDekMsMEJBRHlDO0FBRXpDLDRCQUZ5QztBQUd6QztBQUh5QyxXQUFyQyxDQTVDYzs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQW1EdEIsc0JBQVksSUFBWixDQUFpQixRQUFRLE9BQVIsQ0FBZ0IsT0FBaEIsRUFBeUIsT0FBekIsQ0FBakI7O0FBbkRzQjtBQXFEeEIsaUJBQU8sUUFBUCxDQUFnQixJQUFoQixDQUFxQixPQUFyQjs7QUFyRHdCO0FBUTBCLGlCQVIxQjtBQUFBO0FBQUE7O0FBQUE7QUFBQSw0Q0F3RG5CLFdBeERtQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUE1Qjs7QUEyREEsTUFBTSxJQUFOLEdBQWEsWUFBVTtBQUNyQixPQUFLLGlCQUFMLENBQXVCLEtBQUssZ0JBQTVCO0FBQ0EsT0FBSyxpQkFBTCxDQUF1QixLQUFLLGVBQTVCO0FBQ0EsT0FBSyxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLE9BQUssZUFBTCxHQUF1QixJQUF2QjtBQUNELENBTEQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLGdCQUFqQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgbmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzL2Jyb3dzZXIuanMnKS5uZXh0VGljaztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpbW1lZGlhdGVJZHMgPSB7fTtcbnZhciBuZXh0SW1tZWRpYXRlSWQgPSAwO1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkgeyB0aW1lb3V0LmNsb3NlKCk7IH07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gVGhhdCdzIG5vdCBob3cgbm9kZS5qcyBpbXBsZW1lbnRzIGl0IGJ1dCB0aGUgZXhwb3NlZCBhcGkgaXMgdGhlIHNhbWUuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNldEltbWVkaWF0ZSA6IGZ1bmN0aW9uKGZuKSB7XG4gIHZhciBpZCA9IG5leHRJbW1lZGlhdGVJZCsrO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZmFsc2UgOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgaW1tZWRpYXRlSWRzW2lkXSA9IHRydWU7XG5cbiAgbmV4dFRpY2soZnVuY3Rpb24gb25OZXh0VGljaygpIHtcbiAgICBpZiAoaW1tZWRpYXRlSWRzW2lkXSkge1xuICAgICAgLy8gZm4uY2FsbCgpIGlzIGZhc3RlciBzbyB3ZSBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZVxuICAgICAgLy8gQHNlZSBodHRwOi8vanNwZXJmLmNvbS9jYWxsLWFwcGx5LXNlZ3VcbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm4uY2FsbChudWxsKTtcbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgaWRzIGZyb20gbGVha2luZ1xuICAgICAgZXhwb3J0cy5jbGVhckltbWVkaWF0ZShpZCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaWQ7XG59O1xuXG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gdHlwZW9mIGNsZWFySW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIgPyBjbGVhckltbWVkaWF0ZSA6IGZ1bmN0aW9uKGlkKSB7XG4gIGRlbGV0ZSBpbW1lZGlhdGVJZHNbaWRdO1xufTsiLCJ2YXIgVnVlIC8vIGxhdGUgYmluZFxudmFyIHZlcnNpb25cbnZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93Ll9fVlVFX0hPVF9NQVBfXyA9IG1hcFxufVxudmFyIGluc3RhbGxlZCA9IGZhbHNlXG52YXIgaXNCcm93c2VyaWZ5ID0gZmFsc2VcbnZhciBpbml0SG9va05hbWUgPSAnYmVmb3JlQ3JlYXRlJ1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbiAodnVlLCBicm93c2VyaWZ5KSB7XG4gIGlmIChpbnN0YWxsZWQpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbGVkID0gdHJ1ZVxuXG4gIFZ1ZSA9IHZ1ZS5fX2VzTW9kdWxlID8gdnVlLmRlZmF1bHQgOiB2dWVcbiAgdmVyc2lvbiA9IFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJykubWFwKE51bWJlcilcbiAgaXNCcm93c2VyaWZ5ID0gYnJvd3NlcmlmeVxuXG4gIC8vIGNvbXBhdCB3aXRoIDwgMi4wLjAtYWxwaGEuN1xuICBpZiAoVnVlLmNvbmZpZy5fbGlmZWN5Y2xlSG9va3MuaW5kZXhPZignaW5pdCcpID4gLTEpIHtcbiAgICBpbml0SG9va05hbWUgPSAnaW5pdCdcbiAgfVxuXG4gIGV4cG9ydHMuY29tcGF0aWJsZSA9IHZlcnNpb25bMF0gPj0gMlxuICBpZiAoIWV4cG9ydHMuY29tcGF0aWJsZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbSE1SXSBZb3UgYXJlIHVzaW5nIGEgdmVyc2lvbiBvZiB2dWUtaG90LXJlbG9hZC1hcGkgdGhhdCBpcyAnICtcbiAgICAgICAgJ29ubHkgY29tcGF0aWJsZSB3aXRoIFZ1ZS5qcyBjb3JlIF4yLjAuMC4nXG4gICAgKVxuICAgIHJldHVyblxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVjb3JkIGZvciBhIGhvdCBtb2R1bGUsIHdoaWNoIGtlZXBzIHRyYWNrIG9mIGl0cyBjb25zdHJ1Y3RvclxuICogYW5kIGluc3RhbmNlc1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5leHBvcnRzLmNyZWF0ZVJlY29yZCA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xuICBpZihtYXBbaWRdKSB7IHJldHVybiB9XG5cbiAgdmFyIEN0b3IgPSBudWxsXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIEN0b3IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9uc1xuICB9XG4gIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKVxuICBtYXBbaWRdID0ge1xuICAgIEN0b3I6IEN0b3IsXG4gICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICBpbnN0YW5jZXM6IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBtb2R1bGUgaXMgcmVjb3JkZWRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAqL1xuXG5leHBvcnRzLmlzUmVjb3JkZWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBbaWRdICE9PSAndW5kZWZpbmVkJ1xufVxuXG4vKipcbiAqIE1ha2UgYSBDb21wb25lbnQgb3B0aW9ucyBvYmplY3QgaG90LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBtYWtlT3B0aW9uc0hvdChpZCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiAoaCwgY3R4KSB7XG4gICAgICB2YXIgaW5zdGFuY2VzID0gbWFwW2lkXS5pbnN0YW5jZXNcbiAgICAgIGlmIChjdHggJiYgaW5zdGFuY2VzLmluZGV4T2YoY3R4LnBhcmVudCkgPCAwKSB7XG4gICAgICAgIGluc3RhbmNlcy5wdXNoKGN0eC5wYXJlbnQpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVuZGVyKGgsIGN0eClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5qZWN0SG9vayhvcHRpb25zLCBpbml0SG9va05hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgICAgIGlmICghcmVjb3JkLkN0b3IpIHtcbiAgICAgICAgcmVjb3JkLkN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yXG4gICAgICB9XG4gICAgICByZWNvcmQuaW5zdGFuY2VzLnB1c2godGhpcylcbiAgICB9KVxuICAgIGluamVjdEhvb2sob3B0aW9ucywgJ2JlZm9yZURlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBtYXBbaWRdLmluc3RhbmNlc1xuICAgICAgaW5zdGFuY2VzLnNwbGljZShpbnN0YW5jZXMuaW5kZXhPZih0aGlzKSwgMSlcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogSW5qZWN0IGEgaG9vayB0byBhIGhvdCByZWxvYWRhYmxlIGNvbXBvbmVudCBzbyB0aGF0XG4gKiB3ZSBjYW4ga2VlcCB0cmFjayBvZiBpdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhvb2tcbiAqL1xuXG5mdW5jdGlvbiBpbmplY3RIb29rKG9wdGlvbnMsIG5hbWUsIGhvb2spIHtcbiAgdmFyIGV4aXN0aW5nID0gb3B0aW9uc1tuYW1lXVxuICBvcHRpb25zW25hbWVdID0gZXhpc3RpbmdcbiAgICA/IEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpID8gZXhpc3RpbmcuY29uY2F0KGhvb2spIDogW2V4aXN0aW5nLCBob29rXVxuICAgIDogW2hvb2tdXG59XG5cbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKGlkLCBhcmcpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJ1xuICAgICAgKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zIChvbGRPcHRpb25zLCBuZXdPcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvbGRPcHRpb25zKSB7XG4gICAgaWYgKCEoa2V5IGluIG5ld09wdGlvbnMpKSB7XG4gICAgICBkZWxldGUgb2xkT3B0aW9uc1trZXldXG4gICAgfVxuICB9XG4gIGZvciAodmFyIGtleSQxIGluIG5ld09wdGlvbnMpIHtcbiAgICBvbGRPcHRpb25zW2tleSQxXSA9IG5ld09wdGlvbnNba2V5JDFdXG4gIH1cbn1cblxuZXhwb3J0cy5yZXJlbmRlciA9IHRyeVdyYXAoZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmQgPSBtYXBbaWRdXG4gIGlmICghb3B0aW9ucykge1xuICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICB9KVxuICAgIHJldHVyblxuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnNcbiAgfVxuICBpZiAocmVjb3JkLkN0b3IpIHtcbiAgICByZWNvcmQuQ3Rvci5vcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgcmVjb3JkLkN0b3Iub3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZuc1xuICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJG9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIGluc3RhbmNlLiRvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgICAvLyByZXNldCBzdGF0aWMgdHJlZXNcbiAgICAgIC8vIHByZSAyLjUsIGFsbCBzdGF0aWMgdHJlZXMgYXJlIGNhY2hlZCB0b2dldGhlciBvbiB0aGUgaW5zdGFuY2VcbiAgICAgIGlmIChpbnN0YW5jZS5fc3RhdGljVHJlZXMpIHtcbiAgICAgICAgaW5zdGFuY2UuX3N0YXRpY1RyZWVzID0gW11cbiAgICAgIH1cbiAgICAgIC8vIDIuNS4wXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQuQ3Rvci5vcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgcmVjb3JkLkN0b3Iub3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuICAgICAgLy8gMi41LjNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGluc3RhbmNlLiRvcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgaW5zdGFuY2UuJG9wdGlvbnMuY2FjaGVkID0gW11cbiAgICAgIH1cblxuICAgICAgLy8gcG9zdCAyLjUuNDogdi1vbmNlIHRyZWVzIGFyZSBjYWNoZWQgb24gaW5zdGFuY2UuX3N0YXRpY1RyZWVzLlxuICAgICAgLy8gUHVyZSBzdGF0aWMgdHJlZXMgYXJlIGNhY2hlZCBvbiB0aGUgc3RhdGljUmVuZGVyRm5zIGFycmF5XG4gICAgICAvLyAoYm90aCBhbHJlYWR5IHJlc2V0IGFib3ZlKVxuXG4gICAgICAvLyAyLjY6IHRlbXBvcmFyaWx5IG1hcmsgcmVuZGVyZWQgc2NvcGVkIHNsb3RzIGFzIHVuc3RhYmxlIHNvIHRoYXRcbiAgICAgIC8vIGNoaWxkIGNvbXBvbmVudHMgY2FuIGJlIGZvcmNlZCB0byB1cGRhdGVcbiAgICAgIHZhciByZXN0b3JlID0gcGF0Y2hTY29wZWRTbG90cyhpbnN0YW5jZSlcbiAgICAgIGluc3RhbmNlLiRmb3JjZVVwZGF0ZSgpXG4gICAgICBpbnN0YW5jZS4kbmV4dFRpY2socmVzdG9yZSlcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIC8vIGZ1bmN0aW9uYWwgb3Igbm8gaW5zdGFuY2UgY3JlYXRlZCB5ZXRcbiAgICByZWNvcmQub3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgIHJlY29yZC5vcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG5cbiAgICAvLyBoYW5kbGUgZnVuY3Rpb25hbCBjb21wb25lbnQgcmUtcmVuZGVyXG4gICAgaWYgKHJlY29yZC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIHJlcmVuZGVyIHdpdGggZnVsbCBvcHRpb25zXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMikge1xuICAgICAgICB1cGRhdGVPcHRpb25zKHJlY29yZC5vcHRpb25zLCBvcHRpb25zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGVtcGxhdGUtb25seSByZXJlbmRlci5cbiAgICAgICAgLy8gbmVlZCB0byBpbmplY3QgdGhlIHN0eWxlIGluamVjdGlvbiBjb2RlIGZvciBDU1MgbW9kdWxlc1xuICAgICAgICAvLyB0byB3b3JrIHByb3Blcmx5LlxuICAgICAgICB2YXIgaW5qZWN0U3R5bGVzID0gcmVjb3JkLm9wdGlvbnMuX2luamVjdFN0eWxlc1xuICAgICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICAgICAgcmVjb3JkLm9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gKGgsIGN0eCkge1xuICAgICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoY3R4KVxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihoLCBjdHgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWNvcmQub3B0aW9ucy5fQ3RvciA9IG51bGxcbiAgICAgIC8vIDIuNS4zXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQub3B0aW9ucy5jYWNoZWQpKSB7XG4gICAgICAgIHJlY29yZC5vcHRpb25zLmNhY2hlZCA9IFtdXG4gICAgICB9XG4gICAgICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnRzLnJlbG9hZCA9IHRyeVdyYXAoZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmQgPSBtYXBbaWRdXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucy5vcHRpb25zXG4gICAgfVxuICAgIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKVxuICAgIGlmIChyZWNvcmQuQ3Rvcikge1xuICAgICAgaWYgKHZlcnNpb25bMV0gPCAyKSB7XG4gICAgICAgIC8vIHByZXNlcnZlIHByZSAyLjIgYmVoYXZpb3IgZm9yIGdsb2JhbCBtaXhpbiBoYW5kbGluZ1xuICAgICAgICByZWNvcmQuQ3Rvci5leHRlbmRPcHRpb25zID0gb3B0aW9uc1xuICAgICAgfVxuICAgICAgdmFyIG5ld0N0b3IgPSByZWNvcmQuQ3Rvci5zdXBlci5leHRlbmQob3B0aW9ucylcbiAgICAgIC8vIHByZXZlbnQgcmVjb3JkLm9wdGlvbnMuX0N0b3IgZnJvbSBiZWluZyBvdmVyd3JpdHRlbiBhY2NpZGVudGFsbHlcbiAgICAgIG5ld0N0b3Iub3B0aW9ucy5fQ3RvciA9IHJlY29yZC5vcHRpb25zLl9DdG9yXG4gICAgICByZWNvcmQuQ3Rvci5vcHRpb25zID0gbmV3Q3Rvci5vcHRpb25zXG4gICAgICByZWNvcmQuQ3Rvci5jaWQgPSBuZXdDdG9yLmNpZFxuICAgICAgcmVjb3JkLkN0b3IucHJvdG90eXBlID0gbmV3Q3Rvci5wcm90b3R5cGVcbiAgICAgIGlmIChuZXdDdG9yLnJlbGVhc2UpIHtcbiAgICAgICAgLy8gdGVtcG9yYXJ5IGdsb2JhbCBtaXhpbiBzdHJhdGVneSB1c2VkIGluIDwgMi4wLjAtYWxwaGEuNlxuICAgICAgICBuZXdDdG9yLnJlbGVhc2UoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHJlY29yZC5vcHRpb25zLCBvcHRpb25zKVxuICAgIH1cbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuJHZub2RlICYmIGluc3RhbmNlLiR2bm9kZS5jb250ZXh0KSB7XG4gICAgICBpbnN0YW5jZS4kdm5vZGUuY29udGV4dC4kZm9yY2VVcGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLidcbiAgICAgIClcbiAgICB9XG4gIH0pXG59KVxuXG4vLyAyLjYgb3B0aW1pemVzIHRlbXBsYXRlLWNvbXBpbGVkIHNjb3BlZCBzbG90cyBhbmQgc2tpcHMgdXBkYXRlcyBpZiBjaGlsZFxuLy8gb25seSB1c2VzIHNjb3BlZCBzbG90cy4gV2UgbmVlZCB0byBwYXRjaCB0aGUgc2NvcGVkIHNsb3RzIHJlc29sdmluZyBoZWxwZXJcbi8vIHRvIHRlbXBvcmFyaWx5IG1hcmsgYWxsIHNjb3BlZCBzbG90cyBhcyB1bnN0YWJsZSBpbiBvcmRlciB0byBmb3JjZSBjaGlsZFxuLy8gdXBkYXRlcy5cbmZ1bmN0aW9uIHBhdGNoU2NvcGVkU2xvdHMgKGluc3RhbmNlKSB7XG4gIGlmICghaW5zdGFuY2UuX3UpIHsgcmV0dXJuIH1cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9ibG9iL2Rldi9zcmMvY29yZS9pbnN0YW5jZS9yZW5kZXItaGVscGVycy9yZXNvbHZlLXNjb3BlZC1zbG90cy5qc1xuICB2YXIgb3JpZ2luYWwgPSBpbnN0YW5jZS5fdVxuICBpbnN0YW5jZS5fdSA9IGZ1bmN0aW9uIChzbG90cykge1xuICAgIHRyeSB7XG4gICAgICAvLyAyLjYuNCB+IDIuNi42XG4gICAgICByZXR1cm4gb3JpZ2luYWwoc2xvdHMsIHRydWUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gMi41IC8gPj0gMi42LjdcbiAgICAgIHJldHVybiBvcmlnaW5hbChzbG90cywgbnVsbCwgdHJ1ZSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnN0YW5jZS5fdSA9IG9yaWdpbmFsXG4gIH1cbn1cbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTJcbiAqIChjKSAyMDE0LTIwMjAgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbntcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAoIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xue1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxue1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbntcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLm5hdGl2ZU9uKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAoaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm4udG9TdHJpbmcoKTtcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAoc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMic7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnXG4gICAgPyAnZmFsc2UnXG4gICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogJ3RydWUnXG59O1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNzYXJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAoZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAobW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbm1vZHVsZS5leHBvcnRzID0gVnVlO1xuIiwiaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3Z1ZS5ydW50aW1lLmNvbW1vbi5wcm9kLmpzJylcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi92dWUucnVudGltZS5jb21tb24uZGV2LmpzJylcbn1cbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTJcbiAqIChjKSAyMDE0LTIwMjAgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gZSh0KXtyZXR1cm4gbnVsbD09dH1mdW5jdGlvbiBuKHQpe3JldHVybiBudWxsIT10fWZ1bmN0aW9uIHIodCl7cmV0dXJuITA9PT10fWZ1bmN0aW9uIG8odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fFwibnVtYmVyXCI9PXR5cGVvZiB0fHxcInN5bWJvbFwiPT10eXBlb2YgdHx8XCJib29sZWFuXCI9PXR5cGVvZiB0fWZ1bmN0aW9uIGkodCl7cmV0dXJuIG51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdH12YXIgYT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIHModCl7cmV0dXJuXCJbb2JqZWN0IE9iamVjdF1cIj09PWEuY2FsbCh0KX1mdW5jdGlvbiBjKHQpe3ZhciBlPXBhcnNlRmxvYXQoU3RyaW5nKHQpKTtyZXR1cm4gZT49MCYmTWF0aC5mbG9vcihlKT09PWUmJmlzRmluaXRlKHQpfWZ1bmN0aW9uIHUodCl7cmV0dXJuIG4odCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGhlbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5jYXRjaH1mdW5jdGlvbiBsKHQpe3JldHVybiBudWxsPT10P1wiXCI6QXJyYXkuaXNBcnJheSh0KXx8cyh0KSYmdC50b1N0cmluZz09PWE/SlNPTi5zdHJpbmdpZnkodCxudWxsLDIpOlN0cmluZyh0KX1mdW5jdGlvbiBmKHQpe3ZhciBlPXBhcnNlRmxvYXQodCk7cmV0dXJuIGlzTmFOKGUpP3Q6ZX1mdW5jdGlvbiBwKHQsZSl7Zm9yKHZhciBuPU9iamVjdC5jcmVhdGUobnVsbCkscj10LnNwbGl0KFwiLFwiKSxvPTA7bzxyLmxlbmd0aDtvKyspbltyW29dXT0hMDtyZXR1cm4gZT9mdW5jdGlvbih0KXtyZXR1cm4gblt0LnRvTG93ZXJDYXNlKCldfTpmdW5jdGlvbih0KXtyZXR1cm4gblt0XX19dmFyIGQ9cChcImtleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzXCIpO2Z1bmN0aW9uIHYodCxlKXtpZih0Lmxlbmd0aCl7dmFyIG49dC5pbmRleE9mKGUpO2lmKG4+LTEpcmV0dXJuIHQuc3BsaWNlKG4sMSl9fXZhciBoPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gbSh0LGUpe3JldHVybiBoLmNhbGwodCxlKX1mdW5jdGlvbiB5KHQpe3ZhciBlPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBlW25dfHwoZVtuXT10KG4pKX19dmFyIGc9Ly0oXFx3KS9nLF89eShmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKGcsZnVuY3Rpb24odCxlKXtyZXR1cm4gZT9lLnRvVXBwZXJDYXNlKCk6XCJcIn0pfSksYj15KGZ1bmN0aW9uKHQpe3JldHVybiB0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSl9KSxDPS9cXEIoW0EtWl0pL2csJD15KGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UoQyxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpfSk7dmFyIHc9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5iaW5kKGUpfTpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4obil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gcj9yPjE/dC5hcHBseShlLGFyZ3VtZW50cyk6dC5jYWxsKGUsbik6dC5jYWxsKGUpfXJldHVybiBuLl9sZW5ndGg9dC5sZW5ndGgsbn07ZnVuY3Rpb24gQSh0LGUpe2U9ZXx8MDtmb3IodmFyIG49dC5sZW5ndGgtZSxyPW5ldyBBcnJheShuKTtuLS07KXJbbl09dFtuK2VdO3JldHVybiByfWZ1bmN0aW9uIHgodCxlKXtmb3IodmFyIG4gaW4gZSl0W25dPWVbbl07cmV0dXJuIHR9ZnVuY3Rpb24gTyh0KXtmb3IodmFyIGU9e30sbj0wO248dC5sZW5ndGg7bisrKXRbbl0mJngoZSx0W25dKTtyZXR1cm4gZX1mdW5jdGlvbiBrKHQsZSxuKXt9dmFyIFM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiExfSxFPWZ1bmN0aW9uKHQpe3JldHVybiB0fTtmdW5jdGlvbiBqKHQsZSl7aWYodD09PWUpcmV0dXJuITA7dmFyIG49aSh0KSxyPWkoZSk7aWYoIW58fCFyKXJldHVybiFuJiYhciYmU3RyaW5nKHQpPT09U3RyaW5nKGUpO3RyeXt2YXIgbz1BcnJheS5pc0FycmF5KHQpLGE9QXJyYXkuaXNBcnJheShlKTtpZihvJiZhKXJldHVybiB0Lmxlbmd0aD09PWUubGVuZ3RoJiZ0LmV2ZXJ5KGZ1bmN0aW9uKHQsbil7cmV0dXJuIGoodCxlW25dKX0pO2lmKHQgaW5zdGFuY2VvZiBEYXRlJiZlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gdC5nZXRUaW1lKCk9PT1lLmdldFRpbWUoKTtpZihvfHxhKXJldHVybiExO3ZhciBzPU9iamVjdC5rZXlzKHQpLGM9T2JqZWN0LmtleXMoZSk7cmV0dXJuIHMubGVuZ3RoPT09Yy5sZW5ndGgmJnMuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIGoodFtuXSxlW25dKX0pfWNhdGNoKHQpe3JldHVybiExfX1mdW5jdGlvbiBUKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYoaih0W25dLGUpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIEkodCl7dmFyIGU9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7ZXx8KGU9ITAsdC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfX12YXIgRD1cImRhdGEtc2VydmVyLXJlbmRlcmVkXCIsTj1bXCJjb21wb25lbnRcIixcImRpcmVjdGl2ZVwiLFwiZmlsdGVyXCJdLFA9W1wiYmVmb3JlQ3JlYXRlXCIsXCJjcmVhdGVkXCIsXCJiZWZvcmVNb3VudFwiLFwibW91bnRlZFwiLFwiYmVmb3JlVXBkYXRlXCIsXCJ1cGRhdGVkXCIsXCJiZWZvcmVEZXN0cm95XCIsXCJkZXN0cm95ZWRcIixcImFjdGl2YXRlZFwiLFwiZGVhY3RpdmF0ZWRcIixcImVycm9yQ2FwdHVyZWRcIixcInNlcnZlclByZWZldGNoXCJdLEw9e29wdGlvbk1lcmdlU3RyYXRlZ2llczpPYmplY3QuY3JlYXRlKG51bGwpLHNpbGVudDohMSxwcm9kdWN0aW9uVGlwOiExLGRldnRvb2xzOiExLHBlcmZvcm1hbmNlOiExLGVycm9ySGFuZGxlcjpudWxsLHdhcm5IYW5kbGVyOm51bGwsaWdub3JlZEVsZW1lbnRzOltdLGtleUNvZGVzOk9iamVjdC5jcmVhdGUobnVsbCksaXNSZXNlcnZlZFRhZzpTLGlzUmVzZXJ2ZWRBdHRyOlMsaXNVbmtub3duRWxlbWVudDpTLGdldFRhZ05hbWVzcGFjZTprLHBhcnNlUGxhdGZvcm1UYWdOYW1lOkUsbXVzdFVzZVByb3A6Uyxhc3luYzohMCxfbGlmZWN5Y2xlSG9va3M6UH07ZnVuY3Rpb24gTSh0LGUsbixyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ISFyLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBGPW5ldyBSZWdFeHAoXCJbXlwiKy9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELy5zb3VyY2UrXCIuJF9cXFxcZF1cIik7dmFyIFIsVT1cIl9fcHJvdG9fX1wiaW57fSxIPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3csQj1cInVuZGVmaW5lZFwiIT10eXBlb2YgV1hFbnZpcm9ubWVudCYmISFXWEVudmlyb25tZW50LnBsYXRmb3JtLFY9QiYmV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLHo9SCYmd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxXPXomJi9tc2llfHRyaWRlbnQvLnRlc3QoeikscT16JiZ6LmluZGV4T2YoXCJtc2llIDkuMFwiKT4wLEs9eiYmei5pbmRleE9mKFwiZWRnZS9cIik+MCxYPSh6JiZ6LmluZGV4T2YoXCJhbmRyb2lkXCIpLHomJi9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdCh6KXx8XCJpb3NcIj09PVYpLEc9KHomJi9jaHJvbWVcXC9cXGQrLy50ZXN0KHopLHomJi9waGFudG9tanMvLnRlc3QoeikseiYmei5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pKSxaPXt9LndhdGNoLEo9ITE7aWYoSCl0cnl7dmFyIFE9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFEsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0o9ITB9fSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0LXBhc3NpdmVcIixudWxsLFEpfWNhdGNoKHQpe312YXIgWT1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1SJiYoUj0hSCYmIUImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJihnbG9iYWwucHJvY2VzcyYmXCJzZXJ2ZXJcIj09PWdsb2JhbC5wcm9jZXNzLmVudi5WVUVfRU5WKSksUn0sdHQ9SCYmd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187ZnVuY3Rpb24gZXQodCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmL25hdGl2ZSBjb2RlLy50ZXN0KHQudG9TdHJpbmcoKSl9dmFyIG50LHJ0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmV0KFN5bWJvbCkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZldChSZWZsZWN0Lm93bktleXMpO250PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTZXQmJmV0KFNldCk/U2V0OmZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuc2V0PU9iamVjdC5jcmVhdGUobnVsbCl9cmV0dXJuIHQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4hMD09PXRoaXMuc2V0W3RdfSx0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7dGhpcy5zZXRbdF09ITB9LHQucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKX0sdH0oKTt2YXIgb3Q9ayxpdD0wLGF0PWZ1bmN0aW9uKCl7dGhpcy5pZD1pdCsrLHRoaXMuc3Vicz1bXX07YXQucHJvdG90eXBlLmFkZFN1Yj1mdW5jdGlvbih0KXt0aGlzLnN1YnMucHVzaCh0KX0sYXQucHJvdG90eXBlLnJlbW92ZVN1Yj1mdW5jdGlvbih0KXt2KHRoaXMuc3Vicyx0KX0sYXQucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbigpe2F0LnRhcmdldCYmYXQudGFyZ2V0LmFkZERlcCh0aGlzKX0sYXQucHJvdG90eXBlLm5vdGlmeT1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLnN1YnMuc2xpY2UoKSxlPTAsbj10Lmxlbmd0aDtlPG47ZSsrKXRbZV0udXBkYXRlKCl9LGF0LnRhcmdldD1udWxsO3ZhciBzdD1bXTtmdW5jdGlvbiBjdCh0KXtzdC5wdXNoKHQpLGF0LnRhcmdldD10fWZ1bmN0aW9uIHV0KCl7c3QucG9wKCksYXQudGFyZ2V0PXN0W3N0Lmxlbmd0aC0xXX12YXIgbHQ9ZnVuY3Rpb24odCxlLG4scixvLGksYSxzKXt0aGlzLnRhZz10LHRoaXMuZGF0YT1lLHRoaXMuY2hpbGRyZW49bix0aGlzLnRleHQ9cix0aGlzLmVsbT1vLHRoaXMubnM9dm9pZCAwLHRoaXMuY29udGV4dD1pLHRoaXMuZm5Db250ZXh0PXZvaWQgMCx0aGlzLmZuT3B0aW9ucz12b2lkIDAsdGhpcy5mblNjb3BlSWQ9dm9pZCAwLHRoaXMua2V5PWUmJmUua2V5LHRoaXMuY29tcG9uZW50T3B0aW9ucz1hLHRoaXMuY29tcG9uZW50SW5zdGFuY2U9dm9pZCAwLHRoaXMucGFyZW50PXZvaWQgMCx0aGlzLnJhdz0hMSx0aGlzLmlzU3RhdGljPSExLHRoaXMuaXNSb290SW5zZXJ0PSEwLHRoaXMuaXNDb21tZW50PSExLHRoaXMuaXNDbG9uZWQ9ITEsdGhpcy5pc09uY2U9ITEsdGhpcy5hc3luY0ZhY3Rvcnk9cyx0aGlzLmFzeW5jTWV0YT12b2lkIDAsdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXI9ITF9LGZ0PXtjaGlsZDp7Y29uZmlndXJhYmxlOiEwfX07ZnQuY2hpbGQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2V9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGx0LnByb3RvdHlwZSxmdCk7dmFyIHB0PWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PVwiXCIpO3ZhciBlPW5ldyBsdDtyZXR1cm4gZS50ZXh0PXQsZS5pc0NvbW1lbnQ9ITAsZX07ZnVuY3Rpb24gZHQodCl7cmV0dXJuIG5ldyBsdCh2b2lkIDAsdm9pZCAwLHZvaWQgMCxTdHJpbmcodCkpfWZ1bmN0aW9uIHZ0KHQpe3ZhciBlPW5ldyBsdCh0LnRhZyx0LmRhdGEsdC5jaGlsZHJlbiYmdC5jaGlsZHJlbi5zbGljZSgpLHQudGV4dCx0LmVsbSx0LmNvbnRleHQsdC5jb21wb25lbnRPcHRpb25zLHQuYXN5bmNGYWN0b3J5KTtyZXR1cm4gZS5ucz10Lm5zLGUuaXNTdGF0aWM9dC5pc1N0YXRpYyxlLmtleT10LmtleSxlLmlzQ29tbWVudD10LmlzQ29tbWVudCxlLmZuQ29udGV4dD10LmZuQ29udGV4dCxlLmZuT3B0aW9ucz10LmZuT3B0aW9ucyxlLmZuU2NvcGVJZD10LmZuU2NvcGVJZCxlLmFzeW5jTWV0YT10LmFzeW5jTWV0YSxlLmlzQ2xvbmVkPSEwLGV9dmFyIGh0PUFycmF5LnByb3RvdHlwZSxtdD1PYmplY3QuY3JlYXRlKGh0KTtbXCJwdXNoXCIsXCJwb3BcIixcInNoaWZ0XCIsXCJ1bnNoaWZ0XCIsXCJzcGxpY2VcIixcInNvcnRcIixcInJldmVyc2VcIl0uZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1odFt0XTtNKG10LHQsZnVuY3Rpb24oKXtmb3IodmFyIG49W10scj1hcmd1bWVudHMubGVuZ3RoO3ItLTspbltyXT1hcmd1bWVudHNbcl07dmFyIG8saT1lLmFwcGx5KHRoaXMsbiksYT10aGlzLl9fb2JfXztzd2l0Y2godCl7Y2FzZVwicHVzaFwiOmNhc2VcInVuc2hpZnRcIjpvPW47YnJlYWs7Y2FzZVwic3BsaWNlXCI6bz1uLnNsaWNlKDIpfXJldHVybiBvJiZhLm9ic2VydmVBcnJheShvKSxhLmRlcC5ub3RpZnkoKSxpfSl9KTt2YXIgeXQ9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobXQpLGd0PSEwO2Z1bmN0aW9uIF90KHQpe2d0PXR9dmFyIGJ0PWZ1bmN0aW9uKHQpe3ZhciBlO3RoaXMudmFsdWU9dCx0aGlzLmRlcD1uZXcgYXQsdGhpcy52bUNvdW50PTAsTSh0LFwiX19vYl9fXCIsdGhpcyksQXJyYXkuaXNBcnJheSh0KT8oVT8oZT1tdCx0Ll9fcHJvdG9fXz1lKTpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPTAsbz1uLmxlbmd0aDtyPG87cisrKXt2YXIgaT1uW3JdO00odCxpLGVbaV0pfX0odCxtdCx5dCksdGhpcy5vYnNlcnZlQXJyYXkodCkpOnRoaXMud2Fsayh0KX07ZnVuY3Rpb24gQ3QodCxlKXt2YXIgbjtpZihpKHQpJiYhKHQgaW5zdGFuY2VvZiBsdCkpcmV0dXJuIG0odCxcIl9fb2JfX1wiKSYmdC5fX29iX18gaW5zdGFuY2VvZiBidD9uPXQuX19vYl9fOmd0JiYhWSgpJiYoQXJyYXkuaXNBcnJheSh0KXx8cyh0KSkmJk9iamVjdC5pc0V4dGVuc2libGUodCkmJiF0Ll9pc1Z1ZSYmKG49bmV3IGJ0KHQpKSxlJiZuJiZuLnZtQ291bnQrKyxufWZ1bmN0aW9uICR0KHQsZSxuLHIsbyl7dmFyIGk9bmV3IGF0LGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGUpO2lmKCFhfHwhMSE9PWEuY29uZmlndXJhYmxlKXt2YXIgcz1hJiZhLmdldCxjPWEmJmEuc2V0O3MmJiFjfHwyIT09YXJndW1lbnRzLmxlbmd0aHx8KG49dFtlXSk7dmFyIHU9IW8mJkN0KG4pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3ZhciBlPXM/cy5jYWxsKHQpOm47cmV0dXJuIGF0LnRhcmdldCYmKGkuZGVwZW5kKCksdSYmKHUuZGVwLmRlcGVuZCgpLEFycmF5LmlzQXJyYXkoZSkmJmZ1bmN0aW9uIHQoZSl7Zm9yKHZhciBuPXZvaWQgMCxyPTAsbz1lLmxlbmd0aDtyPG87cisrKShuPWVbcl0pJiZuLl9fb2JfXyYmbi5fX29iX18uZGVwLmRlcGVuZCgpLEFycmF5LmlzQXJyYXkobikmJnQobil9KGUpKSksZX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciByPXM/cy5jYWxsKHQpOm47ZT09PXJ8fGUhPWUmJnIhPXJ8fHMmJiFjfHwoYz9jLmNhbGwodCxlKTpuPWUsdT0hbyYmQ3QoZSksaS5ub3RpZnkoKSl9fSl9fWZ1bmN0aW9uIHd0KHQsZSxuKXtpZihBcnJheS5pc0FycmF5KHQpJiZjKGUpKXJldHVybiB0Lmxlbmd0aD1NYXRoLm1heCh0Lmxlbmd0aCxlKSx0LnNwbGljZShlLDEsbiksbjtpZihlIGluIHQmJiEoZSBpbiBPYmplY3QucHJvdG90eXBlKSlyZXR1cm4gdFtlXT1uLG47dmFyIHI9dC5fX29iX187cmV0dXJuIHQuX2lzVnVlfHxyJiZyLnZtQ291bnQ/bjpyPygkdChyLnZhbHVlLGUsbiksci5kZXAubm90aWZ5KCksbik6KHRbZV09bixuKX1mdW5jdGlvbiBBdCh0LGUpe2lmKEFycmF5LmlzQXJyYXkodCkmJmMoZSkpdC5zcGxpY2UoZSwxKTtlbHNle3ZhciBuPXQuX19vYl9fO3QuX2lzVnVlfHxuJiZuLnZtQ291bnR8fG0odCxlKSYmKGRlbGV0ZSB0W2VdLG4mJm4uZGVwLm5vdGlmeSgpKX19YnQucHJvdG90eXBlLndhbGs9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPU9iamVjdC5rZXlzKHQpLG49MDtuPGUubGVuZ3RoO24rKykkdCh0LGVbbl0pfSxidC5wcm90b3R5cGUub2JzZXJ2ZUFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5sZW5ndGg7ZTxuO2UrKylDdCh0W2VdKX07dmFyIHh0PUwub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO2Z1bmN0aW9uIE90KHQsZSl7aWYoIWUpcmV0dXJuIHQ7Zm9yKHZhciBuLHIsbyxpPXJ0P1JlZmxlY3Qub3duS2V5cyhlKTpPYmplY3Qua2V5cyhlKSxhPTA7YTxpLmxlbmd0aDthKyspXCJfX29iX19cIiE9PShuPWlbYV0pJiYocj10W25dLG89ZVtuXSxtKHQsbik/ciE9PW8mJnMocikmJnMobykmJk90KHIsbyk6d3QodCxuLG8pKTtyZXR1cm4gdH1mdW5jdGlvbiBrdCh0LGUsbil7cmV0dXJuIG4/ZnVuY3Rpb24oKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2UuY2FsbChuLG4pOmUsbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QuY2FsbChuLG4pOnQ7cmV0dXJuIHI/T3QocixvKTpvfTplP3Q/ZnVuY3Rpb24oKXtyZXR1cm4gT3QoXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmNhbGwodGhpcyx0aGlzKTplLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5jYWxsKHRoaXMsdGhpcyk6dCl9OmU6dH1mdW5jdGlvbiBTdCh0LGUpe3ZhciBuPWU/dD90LmNvbmNhdChlKTpBcnJheS5pc0FycmF5KGUpP2U6W2VdOnQ7cmV0dXJuIG4/ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rKyktMT09PWUuaW5kZXhPZih0W25dKSYmZS5wdXNoKHRbbl0pO3JldHVybiBlfShuKTpufWZ1bmN0aW9uIEV0KHQsZSxuLHIpe3ZhciBvPU9iamVjdC5jcmVhdGUodHx8bnVsbCk7cmV0dXJuIGU/eChvLGUpOm99eHQuZGF0YT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIG4/a3QodCxlLG4pOmUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/dDprdCh0LGUpfSxQLmZvckVhY2goZnVuY3Rpb24odCl7eHRbdF09U3R9KSxOLmZvckVhY2goZnVuY3Rpb24odCl7eHRbdCtcInNcIl09RXR9KSx4dC53YXRjaD1mdW5jdGlvbih0LGUsbixyKXtpZih0PT09WiYmKHQ9dm9pZCAwKSxlPT09WiYmKGU9dm9pZCAwKSwhZSlyZXR1cm4gT2JqZWN0LmNyZWF0ZSh0fHxudWxsKTtpZighdClyZXR1cm4gZTt2YXIgbz17fTtmb3IodmFyIGkgaW4geChvLHQpLGUpe3ZhciBhPW9baV0scz1lW2ldO2EmJiFBcnJheS5pc0FycmF5KGEpJiYoYT1bYV0pLG9baV09YT9hLmNvbmNhdChzKTpBcnJheS5pc0FycmF5KHMpP3M6W3NdfXJldHVybiBvfSx4dC5wcm9wcz14dC5tZXRob2RzPXh0LmluamVjdD14dC5jb21wdXRlZD1mdW5jdGlvbih0LGUsbixyKXtpZighdClyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiB4KG8sdCksZSYmeChvLGUpLG99LHh0LnByb3ZpZGU9a3Q7dmFyIGp0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWU/dDplfTtmdW5jdGlvbiBUdCh0LGUsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKGU9ZS5vcHRpb25zKSxmdW5jdGlvbih0LGUpe3ZhciBuPXQucHJvcHM7aWYobil7dmFyIHIsbyxpPXt9O2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHI9bi5sZW5ndGg7ci0tOylcInN0cmluZ1wiPT10eXBlb2Yobz1uW3JdKSYmKGlbXyhvKV09e3R5cGU6bnVsbH0pO2Vsc2UgaWYocyhuKSlmb3IodmFyIGEgaW4gbilvPW5bYV0saVtfKGEpXT1zKG8pP286e3R5cGU6b307dC5wcm9wcz1pfX0oZSksZnVuY3Rpb24odCxlKXt2YXIgbj10LmluamVjdDtpZihuKXt2YXIgcj10LmluamVjdD17fTtpZihBcnJheS5pc0FycmF5KG4pKWZvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKXJbbltvXV09e2Zyb206bltvXX07ZWxzZSBpZihzKG4pKWZvcih2YXIgaSBpbiBuKXt2YXIgYT1uW2ldO3JbaV09cyhhKT94KHtmcm9tOml9LGEpOntmcm9tOmF9fX19KGUpLGZ1bmN0aW9uKHQpe3ZhciBlPXQuZGlyZWN0aXZlcztpZihlKWZvcih2YXIgbiBpbiBlKXt2YXIgcj1lW25dO1wiZnVuY3Rpb25cIj09dHlwZW9mIHImJihlW25dPXtiaW5kOnIsdXBkYXRlOnJ9KX19KGUpLCFlLl9iYXNlJiYoZS5leHRlbmRzJiYodD1UdCh0LGUuZXh0ZW5kcyxuKSksZS5taXhpbnMpKWZvcih2YXIgcj0wLG89ZS5taXhpbnMubGVuZ3RoO3I8bztyKyspdD1UdCh0LGUubWl4aW5zW3JdLG4pO3ZhciBpLGE9e307Zm9yKGkgaW4gdCljKGkpO2ZvcihpIGluIGUpbSh0LGkpfHxjKGkpO2Z1bmN0aW9uIGMocil7dmFyIG89eHRbcl18fGp0O2Fbcl09byh0W3JdLGVbcl0sbixyKX1yZXR1cm4gYX1mdW5jdGlvbiBJdCh0LGUsbixyKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygbil7dmFyIG89dFtlXTtpZihtKG8sbikpcmV0dXJuIG9bbl07dmFyIGk9XyhuKTtpZihtKG8saSkpcmV0dXJuIG9baV07dmFyIGE9YihpKTtyZXR1cm4gbShvLGEpP29bYV06b1tuXXx8b1tpXXx8b1thXX19ZnVuY3Rpb24gRHQodCxlLG4scil7dmFyIG89ZVt0XSxpPSFtKG4sdCksYT1uW3RdLHM9THQoQm9vbGVhbixvLnR5cGUpO2lmKHM+LTEpaWYoaSYmIW0obyxcImRlZmF1bHRcIikpYT0hMTtlbHNlIGlmKFwiXCI9PT1hfHxhPT09JCh0KSl7dmFyIGM9THQoU3RyaW5nLG8udHlwZSk7KGM8MHx8czxjKSYmKGE9ITApfWlmKHZvaWQgMD09PWEpe2E9ZnVuY3Rpb24odCxlLG4pe2lmKCFtKGUsXCJkZWZhdWx0XCIpKXJldHVybjt2YXIgcj1lLmRlZmF1bHQ7aWYodCYmdC4kb3B0aW9ucy5wcm9wc0RhdGEmJnZvaWQgMD09PXQuJG9wdGlvbnMucHJvcHNEYXRhW25dJiZ2b2lkIDAhPT10Ll9wcm9wc1tuXSlyZXR1cm4gdC5fcHJvcHNbbl07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJGdW5jdGlvblwiIT09TnQoZS50eXBlKT9yLmNhbGwodCk6cn0ocixvLHQpO3ZhciB1PWd0O190KCEwKSxDdChhKSxfdCh1KX1yZXR1cm4gYX1mdW5jdGlvbiBOdCh0KXt2YXIgZT10JiZ0LnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7cmV0dXJuIGU/ZVsxXTpcIlwifWZ1bmN0aW9uIFB0KHQsZSl7cmV0dXJuIE50KHQpPT09TnQoZSl9ZnVuY3Rpb24gTHQodCxlKXtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gUHQoZSx0KT8wOi0xO2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihQdChlW25dLHQpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIE10KHQsZSxuKXtjdCgpO3RyeXtpZihlKWZvcih2YXIgcj1lO3I9ci4kcGFyZW50Oyl7dmFyIG89ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO2lmKG8pZm9yKHZhciBpPTA7aTxvLmxlbmd0aDtpKyspdHJ5e2lmKCExPT09b1tpXS5jYWxsKHIsdCxlLG4pKXJldHVybn1jYXRjaCh0KXtSdCh0LHIsXCJlcnJvckNhcHR1cmVkIGhvb2tcIil9fVJ0KHQsZSxuKX1maW5hbGx5e3V0KCl9fWZ1bmN0aW9uIEZ0KHQsZSxuLHIsbyl7dmFyIGk7dHJ5eyhpPW4/dC5hcHBseShlLG4pOnQuY2FsbChlKSkmJiFpLl9pc1Z1ZSYmdShpKSYmIWkuX2hhbmRsZWQmJihpLmNhdGNoKGZ1bmN0aW9uKHQpe3JldHVybiBNdCh0LHIsbytcIiAoUHJvbWlzZS9hc3luYylcIil9KSxpLl9oYW5kbGVkPSEwKX1jYXRjaCh0KXtNdCh0LHIsbyl9cmV0dXJuIGl9ZnVuY3Rpb24gUnQodCxlLG4pe2lmKEwuZXJyb3JIYW5kbGVyKXRyeXtyZXR1cm4gTC5lcnJvckhhbmRsZXIuY2FsbChudWxsLHQsZSxuKX1jYXRjaChlKXtlIT09dCYmVXQoZSxudWxsLFwiY29uZmlnLmVycm9ySGFuZGxlclwiKX1VdCh0LGUsbil9ZnVuY3Rpb24gVXQodCxlLG4pe2lmKCFIJiYhQnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGUpdGhyb3cgdDtjb25zb2xlLmVycm9yKHQpfXZhciBIdCxCdD0hMSxWdD1bXSx6dD0hMTtmdW5jdGlvbiBXdCgpe3p0PSExO3ZhciB0PVZ0LnNsaWNlKDApO1Z0Lmxlbmd0aD0wO2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV0oKX1pZihcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZXQoUHJvbWlzZSkpe3ZhciBxdD1Qcm9taXNlLnJlc29sdmUoKTtIdD1mdW5jdGlvbigpe3F0LnRoZW4oV3QpLFgmJnNldFRpbWVvdXQoayl9LEJ0PSEwfWVsc2UgaWYoV3x8XCJ1bmRlZmluZWRcIj09dHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXJ8fCFldChNdXRhdGlvbk9ic2VydmVyKSYmXCJbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl1cIiE9PU11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSlIdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZldChzZXRJbW1lZGlhdGUpP2Z1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKFd0KX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KFd0LDApfTtlbHNle3ZhciBLdD0xLFh0PW5ldyBNdXRhdGlvbk9ic2VydmVyKFd0KSxHdD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoS3QpKTtYdC5vYnNlcnZlKEd0LHtjaGFyYWN0ZXJEYXRhOiEwfSksSHQ9ZnVuY3Rpb24oKXtLdD0oS3QrMSklMixHdC5kYXRhPVN0cmluZyhLdCl9LEJ0PSEwfWZ1bmN0aW9uIFp0KHQsZSl7dmFyIG47aWYoVnQucHVzaChmdW5jdGlvbigpe2lmKHQpdHJ5e3QuY2FsbChlKX1jYXRjaCh0KXtNdCh0LGUsXCJuZXh0VGlja1wiKX1lbHNlIG4mJm4oZSl9KSx6dHx8KHp0PSEwLEh0KCkpLCF0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCl7bj10fSl9dmFyIEp0PW5ldyBudDtmdW5jdGlvbiBRdCh0KXshZnVuY3Rpb24gdChlLG4pe3ZhciByLG87dmFyIGE9QXJyYXkuaXNBcnJheShlKTtpZighYSYmIWkoZSl8fE9iamVjdC5pc0Zyb3plbihlKXx8ZSBpbnN0YW5jZW9mIGx0KXJldHVybjtpZihlLl9fb2JfXyl7dmFyIHM9ZS5fX29iX18uZGVwLmlkO2lmKG4uaGFzKHMpKXJldHVybjtuLmFkZChzKX1pZihhKWZvcihyPWUubGVuZ3RoO3ItLTspdChlW3JdLG4pO2Vsc2UgZm9yKG89T2JqZWN0LmtleXMoZSkscj1vLmxlbmd0aDtyLS07KXQoZVtvW3JdXSxuKX0odCxKdCksSnQuY2xlYXIoKX12YXIgWXQ9eShmdW5jdGlvbih0KXt2YXIgZT1cIiZcIj09PXQuY2hhckF0KDApLG49XCJ+XCI9PT0odD1lP3Quc2xpY2UoMSk6dCkuY2hhckF0KDApLHI9XCIhXCI9PT0odD1uP3Quc2xpY2UoMSk6dCkuY2hhckF0KDApO3JldHVybntuYW1lOnQ9cj90LnNsaWNlKDEpOnQsb25jZTpuLGNhcHR1cmU6cixwYXNzaXZlOmV9fSk7ZnVuY3Rpb24gdGUodCxlKXtmdW5jdGlvbiBuKCl7dmFyIHQ9YXJndW1lbnRzLHI9bi5mbnM7aWYoIUFycmF5LmlzQXJyYXkocikpcmV0dXJuIEZ0KHIsbnVsbCxhcmd1bWVudHMsZSxcInYtb24gaGFuZGxlclwiKTtmb3IodmFyIG89ci5zbGljZSgpLGk9MDtpPG8ubGVuZ3RoO2krKylGdChvW2ldLG51bGwsdCxlLFwidi1vbiBoYW5kbGVyXCIpfXJldHVybiBuLmZucz10LG59ZnVuY3Rpb24gZWUodCxuLG8saSxhLHMpe3ZhciBjLHUsbCxmO2ZvcihjIGluIHQpdT10W2NdLGw9bltjXSxmPVl0KGMpLGUodSl8fChlKGwpPyhlKHUuZm5zKSYmKHU9dFtjXT10ZSh1LHMpKSxyKGYub25jZSkmJih1PXRbY109YShmLm5hbWUsdSxmLmNhcHR1cmUpKSxvKGYubmFtZSx1LGYuY2FwdHVyZSxmLnBhc3NpdmUsZi5wYXJhbXMpKTp1IT09bCYmKGwuZm5zPXUsdFtjXT1sKSk7Zm9yKGMgaW4gbillKHRbY10pJiZpKChmPVl0KGMpKS5uYW1lLG5bY10sZi5jYXB0dXJlKX1mdW5jdGlvbiBuZSh0LG8saSl7dmFyIGE7dCBpbnN0YW5jZW9mIGx0JiYodD10LmRhdGEuaG9va3x8KHQuZGF0YS5ob29rPXt9KSk7dmFyIHM9dFtvXTtmdW5jdGlvbiBjKCl7aS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdihhLmZucyxjKX1lKHMpP2E9dGUoW2NdKTpuKHMuZm5zKSYmcihzLm1lcmdlZCk/KGE9cykuZm5zLnB1c2goYyk6YT10ZShbcyxjXSksYS5tZXJnZWQ9ITAsdFtvXT1hfWZ1bmN0aW9uIHJlKHQsZSxyLG8saSl7aWYobihlKSl7aWYobShlLHIpKXJldHVybiB0W3JdPWVbcl0saXx8ZGVsZXRlIGVbcl0sITA7aWYobShlLG8pKXJldHVybiB0W3JdPWVbb10saXx8ZGVsZXRlIGVbb10sITB9cmV0dXJuITF9ZnVuY3Rpb24gb2UodCl7cmV0dXJuIG8odCk/W2R0KHQpXTpBcnJheS5pc0FycmF5KHQpP2Z1bmN0aW9uIHQoaSxhKXt2YXIgcz1bXTt2YXIgYyx1LGwsZjtmb3IoYz0wO2M8aS5sZW5ndGg7YysrKWUodT1pW2NdKXx8XCJib29sZWFuXCI9PXR5cGVvZiB1fHwobD1zLmxlbmd0aC0xLGY9c1tsXSxBcnJheS5pc0FycmF5KHUpP3UubGVuZ3RoPjAmJihpZSgodT10KHUsKGF8fFwiXCIpK1wiX1wiK2MpKVswXSkmJmllKGYpJiYoc1tsXT1kdChmLnRleHQrdVswXS50ZXh0KSx1LnNoaWZ0KCkpLHMucHVzaC5hcHBseShzLHUpKTpvKHUpP2llKGYpP3NbbF09ZHQoZi50ZXh0K3UpOlwiXCIhPT11JiZzLnB1c2goZHQodSkpOmllKHUpJiZpZShmKT9zW2xdPWR0KGYudGV4dCt1LnRleHQpOihyKGkuX2lzVkxpc3QpJiZuKHUudGFnKSYmZSh1LmtleSkmJm4oYSkmJih1LmtleT1cIl9fdmxpc3RcIithK1wiX1wiK2MrXCJfX1wiKSxzLnB1c2godSkpKTtyZXR1cm4gc30odCk6dm9pZCAwfWZ1bmN0aW9uIGllKHQpe3JldHVybiBuKHQpJiZuKHQudGV4dCkmJiExPT09dC5pc0NvbW1lbnR9ZnVuY3Rpb24gYWUodCxlKXtpZih0KXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXJ0P1JlZmxlY3Qub3duS2V5cyh0KTpPYmplY3Qua2V5cyh0KSxvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBpPXJbb107aWYoXCJfX29iX19cIiE9PWkpe2Zvcih2YXIgYT10W2ldLmZyb20scz1lO3M7KXtpZihzLl9wcm92aWRlZCYmbShzLl9wcm92aWRlZCxhKSl7bltpXT1zLl9wcm92aWRlZFthXTticmVha31zPXMuJHBhcmVudH1pZighcyYmXCJkZWZhdWx0XCJpbiB0W2ldKXt2YXIgYz10W2ldLmRlZmF1bHQ7bltpXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2MuY2FsbChlKTpjfX19cmV0dXJuIG59fWZ1bmN0aW9uIHNlKHQsZSl7aWYoIXR8fCF0Lmxlbmd0aClyZXR1cm57fTtmb3IodmFyIG49e30scj0wLG89dC5sZW5ndGg7cjxvO3IrKyl7dmFyIGk9dFtyXSxhPWkuZGF0YTtpZihhJiZhLmF0dHJzJiZhLmF0dHJzLnNsb3QmJmRlbGV0ZSBhLmF0dHJzLnNsb3QsaS5jb250ZXh0IT09ZSYmaS5mbkNvbnRleHQhPT1lfHwhYXx8bnVsbD09YS5zbG90KShuLmRlZmF1bHR8fChuLmRlZmF1bHQ9W10pKS5wdXNoKGkpO2Vsc2V7dmFyIHM9YS5zbG90LGM9bltzXXx8KG5bc109W10pO1widGVtcGxhdGVcIj09PWkudGFnP2MucHVzaC5hcHBseShjLGkuY2hpbGRyZW58fFtdKTpjLnB1c2goaSl9fWZvcih2YXIgdSBpbiBuKW5bdV0uZXZlcnkoY2UpJiZkZWxldGUgblt1XTtyZXR1cm4gbn1mdW5jdGlvbiBjZSh0KXtyZXR1cm4gdC5pc0NvbW1lbnQmJiF0LmFzeW5jRmFjdG9yeXx8XCIgXCI9PT10LnRleHR9ZnVuY3Rpb24gdWUoZSxuLHIpe3ZhciBvLGk9T2JqZWN0LmtleXMobikubGVuZ3RoPjAsYT1lPyEhZS4kc3RhYmxlOiFpLHM9ZSYmZS4ka2V5O2lmKGUpe2lmKGUuX25vcm1hbGl6ZWQpcmV0dXJuIGUuX25vcm1hbGl6ZWQ7aWYoYSYmciYmciE9PXQmJnM9PT1yLiRrZXkmJiFpJiYhci4kaGFzTm9ybWFsKXJldHVybiByO2Zvcih2YXIgYyBpbiBvPXt9LGUpZVtjXSYmXCIkXCIhPT1jWzBdJiYob1tjXT1sZShuLGMsZVtjXSkpfWVsc2Ugbz17fTtmb3IodmFyIHUgaW4gbil1IGluIG98fChvW3VdPWZlKG4sdSkpO3JldHVybiBlJiZPYmplY3QuaXNFeHRlbnNpYmxlKGUpJiYoZS5fbm9ybWFsaXplZD1vKSxNKG8sXCIkc3RhYmxlXCIsYSksTShvLFwiJGtleVwiLHMpLE0obyxcIiRoYXNOb3JtYWxcIixpKSxvfWZ1bmN0aW9uIGxlKHQsZSxuKXt2YXIgcj1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg/bi5hcHBseShudWxsLGFyZ3VtZW50cyk6bih7fSk7cmV0dXJuKHQ9dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJiFBcnJheS5pc0FycmF5KHQpP1t0XTpvZSh0KSkmJigwPT09dC5sZW5ndGh8fDE9PT10Lmxlbmd0aCYmdFswXS5pc0NvbW1lbnQpP3ZvaWQgMDp0fTtyZXR1cm4gbi5wcm94eSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7Z2V0OnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxyfWZ1bmN0aW9uIGZlKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRbZV19fWZ1bmN0aW9uIHBlKHQsZSl7dmFyIHIsbyxhLHMsYztpZihBcnJheS5pc0FycmF5KHQpfHxcInN0cmluZ1wiPT10eXBlb2YgdClmb3Iocj1uZXcgQXJyYXkodC5sZW5ndGgpLG89MCxhPXQubGVuZ3RoO288YTtvKyspcltvXT1lKHRbb10sbyk7ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgdClmb3Iocj1uZXcgQXJyYXkodCksbz0wO288dDtvKyspcltvXT1lKG8rMSxvKTtlbHNlIGlmKGkodCkpaWYocnQmJnRbU3ltYm9sLml0ZXJhdG9yXSl7cj1bXTtmb3IodmFyIHU9dFtTeW1ib2wuaXRlcmF0b3JdKCksbD11Lm5leHQoKTshbC5kb25lOylyLnB1c2goZShsLnZhbHVlLHIubGVuZ3RoKSksbD11Lm5leHQoKX1lbHNlIGZvcihzPU9iamVjdC5rZXlzKHQpLHI9bmV3IEFycmF5KHMubGVuZ3RoKSxvPTAsYT1zLmxlbmd0aDtvPGE7bysrKWM9c1tvXSxyW29dPWUodFtjXSxjLG8pO3JldHVybiBuKHIpfHwocj1bXSksci5faXNWTGlzdD0hMCxyfWZ1bmN0aW9uIGRlKHQsZSxuLHIpe3ZhciBvLGk9dGhpcy4kc2NvcGVkU2xvdHNbdF07aT8obj1ufHx7fSxyJiYobj14KHgoe30sciksbikpLG89aShuKXx8ZSk6bz10aGlzLiRzbG90c1t0XXx8ZTt2YXIgYT1uJiZuLnNsb3Q7cmV0dXJuIGE/dGhpcy4kY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIse3Nsb3Q6YX0sbyk6b31mdW5jdGlvbiB2ZSh0KXtyZXR1cm4gSXQodGhpcy4kb3B0aW9ucyxcImZpbHRlcnNcIix0KXx8RX1mdW5jdGlvbiBoZSh0LGUpe3JldHVybiBBcnJheS5pc0FycmF5KHQpPy0xPT09dC5pbmRleE9mKGUpOnQhPT1lfWZ1bmN0aW9uIG1lKHQsZSxuLHIsbyl7dmFyIGk9TC5rZXlDb2Rlc1tlXXx8bjtyZXR1cm4gbyYmciYmIUwua2V5Q29kZXNbZV0/aGUobyxyKTppP2hlKGksdCk6cj8kKHIpIT09ZTp2b2lkIDB9ZnVuY3Rpb24geWUodCxlLG4scixvKXtpZihuKWlmKGkobikpe3ZhciBhO0FycmF5LmlzQXJyYXkobikmJihuPU8obikpO3ZhciBzPWZ1bmN0aW9uKGkpe2lmKFwiY2xhc3NcIj09PWl8fFwic3R5bGVcIj09PWl8fGQoaSkpYT10O2Vsc2V7dmFyIHM9dC5hdHRycyYmdC5hdHRycy50eXBlO2E9cnx8TC5tdXN0VXNlUHJvcChlLHMsaSk/dC5kb21Qcm9wc3x8KHQuZG9tUHJvcHM9e30pOnQuYXR0cnN8fCh0LmF0dHJzPXt9KX12YXIgYz1fKGkpLHU9JChpKTtjIGluIGF8fHUgaW4gYXx8KGFbaV09bltpXSxvJiYoKHQub258fCh0Lm9uPXt9KSlbXCJ1cGRhdGU6XCIraV09ZnVuY3Rpb24odCl7bltpXT10fSkpfTtmb3IodmFyIGMgaW4gbilzKGMpfWVsc2U7cmV0dXJuIHR9ZnVuY3Rpb24gZ2UodCxlKXt2YXIgbj10aGlzLl9zdGF0aWNUcmVlc3x8KHRoaXMuX3N0YXRpY1RyZWVzPVtdKSxyPW5bdF07cmV0dXJuIHImJiFlP3I6KGJlKHI9blt0XT10aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1t0XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5LG51bGwsdGhpcyksXCJfX3N0YXRpY19fXCIrdCwhMSkscil9ZnVuY3Rpb24gX2UodCxlLG4pe3JldHVybiBiZSh0LFwiX19vbmNlX19cIitlKyhuP1wiX1wiK246XCJcIiksITApLHR9ZnVuY3Rpb24gYmUodCxlLG4pe2lmKEFycmF5LmlzQXJyYXkodCkpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmXCJzdHJpbmdcIiE9dHlwZW9mIHRbcl0mJkNlKHRbcl0sZStcIl9cIityLG4pO2Vsc2UgQ2UodCxlLG4pfWZ1bmN0aW9uIENlKHQsZSxuKXt0LmlzU3RhdGljPSEwLHQua2V5PWUsdC5pc09uY2U9bn1mdW5jdGlvbiAkZSh0LGUpe2lmKGUpaWYocyhlKSl7dmFyIG49dC5vbj10Lm9uP3goe30sdC5vbik6e307Zm9yKHZhciByIGluIGUpe3ZhciBvPW5bcl0saT1lW3JdO25bcl09bz9bXS5jb25jYXQobyxpKTppfX1lbHNlO3JldHVybiB0fWZ1bmN0aW9uIHdlKHQsZSxuLHIpe2U9ZXx8eyRzdGFibGU6IW59O2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaT10W29dO0FycmF5LmlzQXJyYXkoaSk/d2UoaSxlLG4pOmkmJihpLnByb3h5JiYoaS5mbi5wcm94eT0hMCksZVtpLmtleV09aS5mbil9cmV0dXJuIHImJihlLiRrZXk9ciksZX1mdW5jdGlvbiBBZSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bis9Mil7dmFyIHI9ZVtuXTtcInN0cmluZ1wiPT10eXBlb2YgciYmciYmKHRbZVtuXV09ZVtuKzFdKX1yZXR1cm4gdH1mdW5jdGlvbiB4ZSh0LGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P2UrdDp0fWZ1bmN0aW9uIE9lKHQpe3QuX289X2UsdC5fbj1mLHQuX3M9bCx0Ll9sPXBlLHQuX3Q9ZGUsdC5fcT1qLHQuX2k9VCx0Ll9tPWdlLHQuX2Y9dmUsdC5faz1tZSx0Ll9iPXllLHQuX3Y9ZHQsdC5fZT1wdCx0Ll91PXdlLHQuX2c9JGUsdC5fZD1BZSx0Ll9wPXhlfWZ1bmN0aW9uIGtlKGUsbixvLGksYSl7dmFyIHMsYz10aGlzLHU9YS5vcHRpb25zO20oaSxcIl91aWRcIik/KHM9T2JqZWN0LmNyZWF0ZShpKSkuX29yaWdpbmFsPWk6KHM9aSxpPWkuX29yaWdpbmFsKTt2YXIgbD1yKHUuX2NvbXBpbGVkKSxmPSFsO3RoaXMuZGF0YT1lLHRoaXMucHJvcHM9bix0aGlzLmNoaWxkcmVuPW8sdGhpcy5wYXJlbnQ9aSx0aGlzLmxpc3RlbmVycz1lLm9ufHx0LHRoaXMuaW5qZWN0aW9ucz1hZSh1LmluamVjdCxpKSx0aGlzLnNsb3RzPWZ1bmN0aW9uKCl7cmV0dXJuIGMuJHNsb3RzfHx1ZShlLnNjb3BlZFNsb3RzLGMuJHNsb3RzPXNlKG8saSkpLGMuJHNsb3RzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNjb3BlZFNsb3RzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHVlKGUuc2NvcGVkU2xvdHMsdGhpcy5zbG90cygpKX19KSxsJiYodGhpcy4kb3B0aW9ucz11LHRoaXMuJHNsb3RzPXRoaXMuc2xvdHMoKSx0aGlzLiRzY29wZWRTbG90cz11ZShlLnNjb3BlZFNsb3RzLHRoaXMuJHNsb3RzKSksdS5fc2NvcGVJZD90aGlzLl9jPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPUxlKHMsdCxlLG4scixmKTtyZXR1cm4gbyYmIUFycmF5LmlzQXJyYXkobykmJihvLmZuU2NvcGVJZD11Ll9zY29wZUlkLG8uZm5Db250ZXh0PWkpLG99OnRoaXMuX2M9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIExlKHMsdCxlLG4scixmKX19ZnVuY3Rpb24gU2UodCxlLG4scixvKXt2YXIgaT12dCh0KTtyZXR1cm4gaS5mbkNvbnRleHQ9bixpLmZuT3B0aW9ucz1yLGUuc2xvdCYmKChpLmRhdGF8fChpLmRhdGE9e30pKS5zbG90PWUuc2xvdCksaX1mdW5jdGlvbiBFZSh0LGUpe2Zvcih2YXIgbiBpbiBlKXRbXyhuKV09ZVtuXX1PZShrZS5wcm90b3R5cGUpO3ZhciBqZT17aW5pdDpmdW5jdGlvbih0LGUpe2lmKHQuY29tcG9uZW50SW5zdGFuY2UmJiF0LmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCYmdC5kYXRhLmtlZXBBbGl2ZSl7dmFyIHI9dDtqZS5wcmVwYXRjaChyLHIpfWVsc2V7KHQuY29tcG9uZW50SW5zdGFuY2U9ZnVuY3Rpb24odCxlKXt2YXIgcj17X2lzQ29tcG9uZW50OiEwLF9wYXJlbnRWbm9kZTp0LHBhcmVudDplfSxvPXQuZGF0YS5pbmxpbmVUZW1wbGF0ZTtuKG8pJiYoci5yZW5kZXI9by5yZW5kZXIsci5zdGF0aWNSZW5kZXJGbnM9by5zdGF0aWNSZW5kZXJGbnMpO3JldHVybiBuZXcgdC5jb21wb25lbnRPcHRpb25zLkN0b3Iocil9KHQscWUpKS4kbW91bnQoZT90LmVsbTp2b2lkIDAsZSl9fSxwcmVwYXRjaDpmdW5jdGlvbihlLG4pe3ZhciByPW4uY29tcG9uZW50T3B0aW9uczshZnVuY3Rpb24oZSxuLHIsbyxpKXt2YXIgYT1vLmRhdGEuc2NvcGVkU2xvdHMscz1lLiRzY29wZWRTbG90cyxjPSEhKGEmJiFhLiRzdGFibGV8fHMhPT10JiYhcy4kc3RhYmxlfHxhJiZlLiRzY29wZWRTbG90cy4ka2V5IT09YS4ka2V5KSx1PSEhKGl8fGUuJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVufHxjKTtlLiRvcHRpb25zLl9wYXJlbnRWbm9kZT1vLGUuJHZub2RlPW8sZS5fdm5vZGUmJihlLl92bm9kZS5wYXJlbnQ9byk7aWYoZS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW49aSxlLiRhdHRycz1vLmRhdGEuYXR0cnN8fHQsZS4kbGlzdGVuZXJzPXJ8fHQsbiYmZS4kb3B0aW9ucy5wcm9wcyl7X3QoITEpO2Zvcih2YXIgbD1lLl9wcm9wcyxmPWUuJG9wdGlvbnMuX3Byb3BLZXlzfHxbXSxwPTA7cDxmLmxlbmd0aDtwKyspe3ZhciBkPWZbcF0sdj1lLiRvcHRpb25zLnByb3BzO2xbZF09RHQoZCx2LG4sZSl9X3QoITApLGUuJG9wdGlvbnMucHJvcHNEYXRhPW59cj1yfHx0O3ZhciBoPWUuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztlLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM9cixXZShlLHIsaCksdSYmKGUuJHNsb3RzPXNlKGksby5jb250ZXh0KSxlLiRmb3JjZVVwZGF0ZSgpKX0obi5jb21wb25lbnRJbnN0YW5jZT1lLmNvbXBvbmVudEluc3RhbmNlLHIucHJvcHNEYXRhLHIubGlzdGVuZXJzLG4sci5jaGlsZHJlbil9LGluc2VydDpmdW5jdGlvbih0KXt2YXIgZSxuPXQuY29udGV4dCxyPXQuY29tcG9uZW50SW5zdGFuY2U7ci5faXNNb3VudGVkfHwoci5faXNNb3VudGVkPSEwLFplKHIsXCJtb3VudGVkXCIpKSx0LmRhdGEua2VlcEFsaXZlJiYobi5faXNNb3VudGVkPygoZT1yKS5faW5hY3RpdmU9ITEsUWUucHVzaChlKSk6R2UociwhMCkpfSxkZXN0cm95OmZ1bmN0aW9uKHQpe3ZhciBlPXQuY29tcG9uZW50SW5zdGFuY2U7ZS5faXNEZXN0cm95ZWR8fCh0LmRhdGEua2VlcEFsaXZlP2Z1bmN0aW9uIHQoZSxuKXtpZihuJiYoZS5fZGlyZWN0SW5hY3RpdmU9ITAsWGUoZSkpKXJldHVybjtpZighZS5faW5hY3RpdmUpe2UuX2luYWN0aXZlPSEwO2Zvcih2YXIgcj0wO3I8ZS4kY2hpbGRyZW4ubGVuZ3RoO3IrKyl0KGUuJGNoaWxkcmVuW3JdKTtaZShlLFwiZGVhY3RpdmF0ZWRcIil9fShlLCEwKTplLiRkZXN0cm95KCkpfX0sVGU9T2JqZWN0LmtleXMoamUpO2Z1bmN0aW9uIEllKG8sYSxzLGMsbCl7aWYoIWUobykpe3ZhciBmPXMuJG9wdGlvbnMuX2Jhc2U7aWYoaShvKSYmKG89Zi5leHRlbmQobykpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG8pe3ZhciBwO2lmKGUoby5jaWQpJiZ2b2lkIDA9PT0obz1mdW5jdGlvbih0LG8pe2lmKHIodC5lcnJvcikmJm4odC5lcnJvckNvbXApKXJldHVybiB0LmVycm9yQ29tcDtpZihuKHQucmVzb2x2ZWQpKXJldHVybiB0LnJlc29sdmVkO3ZhciBhPUZlO2EmJm4odC5vd25lcnMpJiYtMT09PXQub3duZXJzLmluZGV4T2YoYSkmJnQub3duZXJzLnB1c2goYSk7aWYocih0LmxvYWRpbmcpJiZuKHQubG9hZGluZ0NvbXApKXJldHVybiB0LmxvYWRpbmdDb21wO2lmKGEmJiFuKHQub3duZXJzKSl7dmFyIHM9dC5vd25lcnM9W2FdLGM9ITAsbD1udWxsLGY9bnVsbDthLiRvbihcImhvb2s6ZGVzdHJveWVkXCIsZnVuY3Rpb24oKXtyZXR1cm4gdihzLGEpfSk7dmFyIHA9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj1zLmxlbmd0aDtlPG47ZSsrKXNbZV0uJGZvcmNlVXBkYXRlKCk7dCYmKHMubGVuZ3RoPTAsbnVsbCE9PWwmJihjbGVhclRpbWVvdXQobCksbD1udWxsKSxudWxsIT09ZiYmKGNsZWFyVGltZW91dChmKSxmPW51bGwpKX0sZD1JKGZ1bmN0aW9uKGUpe3QucmVzb2x2ZWQ9UmUoZSxvKSxjP3MubGVuZ3RoPTA6cCghMCl9KSxoPUkoZnVuY3Rpb24oZSl7bih0LmVycm9yQ29tcCkmJih0LmVycm9yPSEwLHAoITApKX0pLG09dChkLGgpO3JldHVybiBpKG0pJiYodShtKT9lKHQucmVzb2x2ZWQpJiZtLnRoZW4oZCxoKTp1KG0uY29tcG9uZW50KSYmKG0uY29tcG9uZW50LnRoZW4oZCxoKSxuKG0uZXJyb3IpJiYodC5lcnJvckNvbXA9UmUobS5lcnJvcixvKSksbihtLmxvYWRpbmcpJiYodC5sb2FkaW5nQ29tcD1SZShtLmxvYWRpbmcsbyksMD09PW0uZGVsYXk/dC5sb2FkaW5nPSEwOmw9c2V0VGltZW91dChmdW5jdGlvbigpe2w9bnVsbCxlKHQucmVzb2x2ZWQpJiZlKHQuZXJyb3IpJiYodC5sb2FkaW5nPSEwLHAoITEpKX0sbS5kZWxheXx8MjAwKSksbihtLnRpbWVvdXQpJiYoZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zj1udWxsLGUodC5yZXNvbHZlZCkmJmgobnVsbCl9LG0udGltZW91dCkpKSksYz0hMSx0LmxvYWRpbmc/dC5sb2FkaW5nQ29tcDp0LnJlc29sdmVkfX0ocD1vLGYpKSlyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt2YXIgaT1wdCgpO3JldHVybiBpLmFzeW5jRmFjdG9yeT10LGkuYXN5bmNNZXRhPXtkYXRhOmUsY29udGV4dDpuLGNoaWxkcmVuOnIsdGFnOm99LGl9KHAsYSxzLGMsbCk7YT1hfHx7fSxfbihvKSxuKGEubW9kZWwpJiZmdW5jdGlvbih0LGUpe3ZhciByPXQubW9kZWwmJnQubW9kZWwucHJvcHx8XCJ2YWx1ZVwiLG89dC5tb2RlbCYmdC5tb2RlbC5ldmVudHx8XCJpbnB1dFwiOyhlLmF0dHJzfHwoZS5hdHRycz17fSkpW3JdPWUubW9kZWwudmFsdWU7dmFyIGk9ZS5vbnx8KGUub249e30pLGE9aVtvXSxzPWUubW9kZWwuY2FsbGJhY2s7bihhKT8oQXJyYXkuaXNBcnJheShhKT8tMT09PWEuaW5kZXhPZihzKTphIT09cykmJihpW29dPVtzXS5jb25jYXQoYSkpOmlbb109c30oby5vcHRpb25zLGEpO3ZhciBkPWZ1bmN0aW9uKHQscixvKXt2YXIgaT1yLm9wdGlvbnMucHJvcHM7aWYoIWUoaSkpe3ZhciBhPXt9LHM9dC5hdHRycyxjPXQucHJvcHM7aWYobihzKXx8bihjKSlmb3IodmFyIHUgaW4gaSl7dmFyIGw9JCh1KTtyZShhLGMsdSxsLCEwKXx8cmUoYSxzLHUsbCwhMSl9cmV0dXJuIGF9fShhLG8pO2lmKHIoby5vcHRpb25zLmZ1bmN0aW9uYWwpKXJldHVybiBmdW5jdGlvbihlLHIsbyxpLGEpe3ZhciBzPWUub3B0aW9ucyxjPXt9LHU9cy5wcm9wcztpZihuKHUpKWZvcih2YXIgbCBpbiB1KWNbbF09RHQobCx1LHJ8fHQpO2Vsc2UgbihvLmF0dHJzKSYmRWUoYyxvLmF0dHJzKSxuKG8ucHJvcHMpJiZFZShjLG8ucHJvcHMpO3ZhciBmPW5ldyBrZShvLGMsYSxpLGUpLHA9cy5yZW5kZXIuY2FsbChudWxsLGYuX2MsZik7aWYocCBpbnN0YW5jZW9mIGx0KXJldHVybiBTZShwLG8sZi5wYXJlbnQscyk7aWYoQXJyYXkuaXNBcnJheShwKSl7Zm9yKHZhciBkPW9lKHApfHxbXSx2PW5ldyBBcnJheShkLmxlbmd0aCksaD0wO2g8ZC5sZW5ndGg7aCsrKXZbaF09U2UoZFtoXSxvLGYucGFyZW50LHMpO3JldHVybiB2fX0obyxkLGEscyxjKTt2YXIgaD1hLm9uO2lmKGEub249YS5uYXRpdmVPbixyKG8ub3B0aW9ucy5hYnN0cmFjdCkpe3ZhciBtPWEuc2xvdDthPXt9LG0mJihhLnNsb3Q9bSl9IWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmhvb2t8fCh0Lmhvb2s9e30pLG49MDtuPFRlLmxlbmd0aDtuKyspe3ZhciByPVRlW25dLG89ZVtyXSxpPWplW3JdO289PT1pfHxvJiZvLl9tZXJnZWR8fChlW3JdPW8/RGUoaSxvKTppKX19KGEpO3ZhciB5PW8ub3B0aW9ucy5uYW1lfHxsO3JldHVybiBuZXcgbHQoXCJ2dWUtY29tcG9uZW50LVwiK28uY2lkKyh5P1wiLVwiK3k6XCJcIiksYSx2b2lkIDAsdm9pZCAwLHZvaWQgMCxzLHtDdG9yOm8scHJvcHNEYXRhOmQsbGlzdGVuZXJzOmgsdGFnOmwsY2hpbGRyZW46Y30scCl9fX1mdW5jdGlvbiBEZSh0LGUpe3ZhciBuPWZ1bmN0aW9uKG4scil7dChuLHIpLGUobixyKX07cmV0dXJuIG4uX21lcmdlZD0hMCxufXZhciBOZT0xLFBlPTI7ZnVuY3Rpb24gTGUodCxhLHMsYyx1LGwpe3JldHVybihBcnJheS5pc0FycmF5KHMpfHxvKHMpKSYmKHU9YyxjPXMscz12b2lkIDApLHIobCkmJih1PVBlKSxmdW5jdGlvbih0LG8sYSxzLGMpe2lmKG4oYSkmJm4oYS5fX29iX18pKXJldHVybiBwdCgpO24oYSkmJm4oYS5pcykmJihvPWEuaXMpO2lmKCFvKXJldHVybiBwdCgpO0FycmF5LmlzQXJyYXkocykmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHNbMF0mJigoYT1hfHx7fSkuc2NvcGVkU2xvdHM9e2RlZmF1bHQ6c1swXX0scy5sZW5ndGg9MCk7Yz09PVBlP3M9b2Uocyk6Yz09PU5lJiYocz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZihBcnJheS5pc0FycmF5KHRbZV0pKXJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLHQpO3JldHVybiB0fShzKSk7dmFyIHUsbDtpZihcInN0cmluZ1wiPT10eXBlb2Ygbyl7dmFyIGY7bD10LiR2bm9kZSYmdC4kdm5vZGUubnN8fEwuZ2V0VGFnTmFtZXNwYWNlKG8pLHU9TC5pc1Jlc2VydmVkVGFnKG8pP25ldyBsdChMLnBhcnNlUGxhdGZvcm1UYWdOYW1lKG8pLGEscyx2b2lkIDAsdm9pZCAwLHQpOmEmJmEucHJlfHwhbihmPUl0KHQuJG9wdGlvbnMsXCJjb21wb25lbnRzXCIsbykpP25ldyBsdChvLGEscyx2b2lkIDAsdm9pZCAwLHQpOkllKGYsYSx0LHMsbyl9ZWxzZSB1PUllKG8sYSx0LHMpO3JldHVybiBBcnJheS5pc0FycmF5KHUpP3U6bih1KT8obihsKSYmZnVuY3Rpb24gdChvLGksYSl7by5ucz1pO1wiZm9yZWlnbk9iamVjdFwiPT09by50YWcmJihpPXZvaWQgMCxhPSEwKTtpZihuKG8uY2hpbGRyZW4pKWZvcih2YXIgcz0wLGM9by5jaGlsZHJlbi5sZW5ndGg7czxjO3MrKyl7dmFyIHU9by5jaGlsZHJlbltzXTtuKHUudGFnKSYmKGUodS5ucyl8fHIoYSkmJlwic3ZnXCIhPT11LnRhZykmJnQodSxpLGEpfX0odSxsKSxuKGEpJiZmdW5jdGlvbih0KXtpKHQuc3R5bGUpJiZRdCh0LnN0eWxlKTtpKHQuY2xhc3MpJiZRdCh0LmNsYXNzKX0oYSksdSk6cHQoKX0odCxhLHMsYyx1KX12YXIgTWUsRmU9bnVsbDtmdW5jdGlvbiBSZSh0LGUpe3JldHVybih0Ll9fZXNNb2R1bGV8fHJ0JiZcIk1vZHVsZVwiPT09dFtTeW1ib2wudG9TdHJpbmdUYWddKSYmKHQ9dC5kZWZhdWx0KSxpKHQpP2UuZXh0ZW5kKHQpOnR9ZnVuY3Rpb24gVWUodCl7cmV0dXJuIHQuaXNDb21tZW50JiZ0LmFzeW5jRmFjdG9yeX1mdW5jdGlvbiBIZSh0KXtpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgcj10W2VdO2lmKG4ocikmJihuKHIuY29tcG9uZW50T3B0aW9ucyl8fFVlKHIpKSlyZXR1cm4gcn19ZnVuY3Rpb24gQmUodCxlKXtNZS4kb24odCxlKX1mdW5jdGlvbiBWZSh0LGUpe01lLiRvZmYodCxlKX1mdW5jdGlvbiB6ZSh0LGUpe3ZhciBuPU1lO3JldHVybiBmdW5jdGlvbiByKCl7bnVsbCE9PWUuYXBwbHkobnVsbCxhcmd1bWVudHMpJiZuLiRvZmYodCxyKX19ZnVuY3Rpb24gV2UodCxlLG4pe01lPXQsZWUoZSxufHx7fSxCZSxWZSx6ZSx0KSxNZT12b2lkIDB9dmFyIHFlPW51bGw7ZnVuY3Rpb24gS2UodCl7dmFyIGU9cWU7cmV0dXJuIHFlPXQsZnVuY3Rpb24oKXtxZT1lfX1mdW5jdGlvbiBYZSh0KXtmb3IoO3QmJih0PXQuJHBhcmVudCk7KWlmKHQuX2luYWN0aXZlKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIEdlKHQsZSl7aWYoZSl7aWYodC5fZGlyZWN0SW5hY3RpdmU9ITEsWGUodCkpcmV0dXJufWVsc2UgaWYodC5fZGlyZWN0SW5hY3RpdmUpcmV0dXJuO2lmKHQuX2luYWN0aXZlfHxudWxsPT09dC5faW5hY3RpdmUpe3QuX2luYWN0aXZlPSExO2Zvcih2YXIgbj0wO248dC4kY2hpbGRyZW4ubGVuZ3RoO24rKylHZSh0LiRjaGlsZHJlbltuXSk7WmUodCxcImFjdGl2YXRlZFwiKX19ZnVuY3Rpb24gWmUodCxlKXtjdCgpO3ZhciBuPXQuJG9wdGlvbnNbZV0scj1lK1wiIGhvb2tcIjtpZihuKWZvcih2YXIgbz0wLGk9bi5sZW5ndGg7bzxpO28rKylGdChuW29dLHQsbnVsbCx0LHIpO3QuX2hhc0hvb2tFdmVudCYmdC4kZW1pdChcImhvb2s6XCIrZSksdXQoKX12YXIgSmU9W10sUWU9W10sWWU9e30sdG49ITEsZW49ITEsbm49MDt2YXIgcm49MCxvbj1EYXRlLm5vdztpZihIJiYhVyl7dmFyIGFuPXdpbmRvdy5wZXJmb3JtYW5jZTthbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYW4ubm93JiZvbigpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikudGltZVN0YW1wJiYob249ZnVuY3Rpb24oKXtyZXR1cm4gYW4ubm93KCl9KX1mdW5jdGlvbiBzbigpe3ZhciB0LGU7Zm9yKHJuPW9uKCksZW49ITAsSmUuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0LmlkLWUuaWR9KSxubj0wO25uPEplLmxlbmd0aDtubisrKSh0PUplW25uXSkuYmVmb3JlJiZ0LmJlZm9yZSgpLGU9dC5pZCxZZVtlXT1udWxsLHQucnVuKCk7dmFyIG49UWUuc2xpY2UoKSxyPUplLnNsaWNlKCk7bm49SmUubGVuZ3RoPVFlLmxlbmd0aD0wLFllPXt9LHRuPWVuPSExLGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV0uX2luYWN0aXZlPSEwLEdlKHRbZV0sITApfShuKSxmdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aDtmb3IoO2UtLTspe3ZhciBuPXRbZV0scj1uLnZtO3IuX3dhdGNoZXI9PT1uJiZyLl9pc01vdW50ZWQmJiFyLl9pc0Rlc3Ryb3llZCYmWmUocixcInVwZGF0ZWRcIil9fShyKSx0dCYmTC5kZXZ0b29scyYmdHQuZW1pdChcImZsdXNoXCIpfXZhciBjbj0wLHVuPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52bT10LG8mJih0Ll93YXRjaGVyPXRoaXMpLHQuX3dhdGNoZXJzLnB1c2godGhpcykscj8odGhpcy5kZWVwPSEhci5kZWVwLHRoaXMudXNlcj0hIXIudXNlcix0aGlzLmxhenk9ISFyLmxhenksdGhpcy5zeW5jPSEhci5zeW5jLHRoaXMuYmVmb3JlPXIuYmVmb3JlKTp0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ITEsdGhpcy5jYj1uLHRoaXMuaWQ9Kytjbix0aGlzLmFjdGl2ZT0hMCx0aGlzLmRpcnR5PXRoaXMubGF6eSx0aGlzLmRlcHM9W10sdGhpcy5uZXdEZXBzPVtdLHRoaXMuZGVwSWRzPW5ldyBudCx0aGlzLm5ld0RlcElkcz1uZXcgbnQsdGhpcy5leHByZXNzaW9uPVwiXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgZT90aGlzLmdldHRlcj1lOih0aGlzLmdldHRlcj1mdW5jdGlvbih0KXtpZighRi50ZXN0KHQpKXt2YXIgZT10LnNwbGl0KFwiLlwiKTtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe2lmKCF0KXJldHVybjt0PXRbZVtuXV19cmV0dXJuIHR9fX0oZSksdGhpcy5nZXR0ZXJ8fCh0aGlzLmdldHRlcj1rKSksdGhpcy52YWx1ZT10aGlzLmxhenk/dm9pZCAwOnRoaXMuZ2V0KCl9O3VuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt2YXIgdDtjdCh0aGlzKTt2YXIgZT10aGlzLnZtO3RyeXt0PXRoaXMuZ2V0dGVyLmNhbGwoZSxlKX1jYXRjaCh0KXtpZighdGhpcy51c2VyKXRocm93IHQ7TXQodCxlLCdnZXR0ZXIgZm9yIHdhdGNoZXIgXCInK3RoaXMuZXhwcmVzc2lvbisnXCInKX1maW5hbGx5e3RoaXMuZGVlcCYmUXQodCksdXQoKSx0aGlzLmNsZWFudXBEZXBzKCl9cmV0dXJuIHR9LHVuLnByb3RvdHlwZS5hZGREZXA9ZnVuY3Rpb24odCl7dmFyIGU9dC5pZDt0aGlzLm5ld0RlcElkcy5oYXMoZSl8fCh0aGlzLm5ld0RlcElkcy5hZGQoZSksdGhpcy5uZXdEZXBzLnB1c2godCksdGhpcy5kZXBJZHMuaGFzKGUpfHx0LmFkZFN1Yih0aGlzKSl9LHVuLnByb3RvdHlwZS5jbGVhbnVwRGVwcz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmRlcHMubGVuZ3RoO3QtLTspe3ZhciBlPXRoaXMuZGVwc1t0XTt0aGlzLm5ld0RlcElkcy5oYXMoZS5pZCl8fGUucmVtb3ZlU3ViKHRoaXMpfXZhciBuPXRoaXMuZGVwSWRzO3RoaXMuZGVwSWRzPXRoaXMubmV3RGVwSWRzLHRoaXMubmV3RGVwSWRzPW4sdGhpcy5uZXdEZXBJZHMuY2xlYXIoKSxuPXRoaXMuZGVwcyx0aGlzLmRlcHM9dGhpcy5uZXdEZXBzLHRoaXMubmV3RGVwcz1uLHRoaXMubmV3RGVwcy5sZW5ndGg9MH0sdW4ucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMubGF6eT90aGlzLmRpcnR5PSEwOnRoaXMuc3luYz90aGlzLnJ1bigpOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaWQ7aWYobnVsbD09WWVbZV0pe2lmKFllW2VdPSEwLGVuKXtmb3IodmFyIG49SmUubGVuZ3RoLTE7bj5ubiYmSmVbbl0uaWQ+dC5pZDspbi0tO0plLnNwbGljZShuKzEsMCx0KX1lbHNlIEplLnB1c2godCk7dG58fCh0bj0hMCxadChzbikpfX0odGhpcyl9LHVuLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dmFyIHQ9dGhpcy5nZXQoKTtpZih0IT09dGhpcy52YWx1ZXx8aSh0KXx8dGhpcy5kZWVwKXt2YXIgZT10aGlzLnZhbHVlO2lmKHRoaXMudmFsdWU9dCx0aGlzLnVzZXIpdHJ5e3RoaXMuY2IuY2FsbCh0aGlzLnZtLHQsZSl9Y2F0Y2godCl7TXQodCx0aGlzLnZtLCdjYWxsYmFjayBmb3Igd2F0Y2hlciBcIicrdGhpcy5leHByZXNzaW9uKydcIicpfWVsc2UgdGhpcy5jYi5jYWxsKHRoaXMudm0sdCxlKX19fSx1bi5wcm90b3R5cGUuZXZhbHVhdGU9ZnVuY3Rpb24oKXt0aGlzLnZhbHVlPXRoaXMuZ2V0KCksdGhpcy5kaXJ0eT0hMX0sdW4ucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmRlcHMubGVuZ3RoO3QtLTspdGhpcy5kZXBzW3RdLmRlcGVuZCgpfSx1bi5wcm90b3R5cGUudGVhcmRvd249ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZHx8dih0aGlzLnZtLl93YXRjaGVycyx0aGlzKTtmb3IodmFyIHQ9dGhpcy5kZXBzLmxlbmd0aDt0LS07KXRoaXMuZGVwc1t0XS5yZW1vdmVTdWIodGhpcyk7dGhpcy5hY3RpdmU9ITF9fTt2YXIgbG49e2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDprLHNldDprfTtmdW5jdGlvbiBmbih0LGUsbil7bG4uZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbZV1bbl19LGxuLnNldD1mdW5jdGlvbih0KXt0aGlzW2VdW25dPXR9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4sbG4pfWZ1bmN0aW9uIHBuKHQpe3QuX3dhdGNoZXJzPVtdO3ZhciBlPXQuJG9wdGlvbnM7ZS5wcm9wcyYmZnVuY3Rpb24odCxlKXt2YXIgbj10LiRvcHRpb25zLnByb3BzRGF0YXx8e30scj10Ll9wcm9wcz17fSxvPXQuJG9wdGlvbnMuX3Byb3BLZXlzPVtdO3QuJHBhcmVudCYmX3QoITEpO3ZhciBpPWZ1bmN0aW9uKGkpe28ucHVzaChpKTt2YXIgYT1EdChpLGUsbix0KTskdChyLGksYSksaSBpbiB0fHxmbih0LFwiX3Byb3BzXCIsaSl9O2Zvcih2YXIgYSBpbiBlKWkoYSk7X3QoITApfSh0LGUucHJvcHMpLGUubWV0aG9kcyYmZnVuY3Rpb24odCxlKXt0LiRvcHRpb25zLnByb3BzO2Zvcih2YXIgbiBpbiBlKXRbbl09XCJmdW5jdGlvblwiIT10eXBlb2YgZVtuXT9rOncoZVtuXSx0KX0odCxlLm1ldGhvZHMpLGUuZGF0YT9mdW5jdGlvbih0KXt2YXIgZT10LiRvcHRpb25zLmRhdGE7cyhlPXQuX2RhdGE9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9mdW5jdGlvbih0LGUpe2N0KCk7dHJ5e3JldHVybiB0LmNhbGwoZSxlKX1jYXRjaCh0KXtyZXR1cm4gTXQodCxlLFwiZGF0YSgpXCIpLHt9fWZpbmFsbHl7dXQoKX19KGUsdCk6ZXx8e30pfHwoZT17fSk7dmFyIG49T2JqZWN0LmtleXMoZSkscj10LiRvcHRpb25zLnByb3BzLG89KHQuJG9wdGlvbnMubWV0aG9kcyxuLmxlbmd0aCk7Zm9yKDtvLS07KXt2YXIgaT1uW29dO3ImJm0ocixpKXx8KGE9dm9pZCAwLDM2IT09KGE9KGkrXCJcIikuY2hhckNvZGVBdCgwKSkmJjk1IT09YSYmZm4odCxcIl9kYXRhXCIsaSkpfXZhciBhO0N0KGUsITApfSh0KTpDdCh0Ll9kYXRhPXt9LCEwKSxlLmNvbXB1dGVkJiZmdW5jdGlvbih0LGUpe3ZhciBuPXQuX2NvbXB1dGVkV2F0Y2hlcnM9T2JqZWN0LmNyZWF0ZShudWxsKSxyPVkoKTtmb3IodmFyIG8gaW4gZSl7dmFyIGk9ZVtvXSxhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aTppLmdldDtyfHwobltvXT1uZXcgdW4odCxhfHxrLGssZG4pKSxvIGluIHR8fHZuKHQsbyxpKX19KHQsZS5jb21wdXRlZCksZS53YXRjaCYmZS53YXRjaCE9PVomJmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpe3ZhciByPWVbbl07aWYoQXJyYXkuaXNBcnJheShyKSlmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKyl5bih0LG4scltvXSk7ZWxzZSB5bih0LG4scil9fSh0LGUud2F0Y2gpfXZhciBkbj17bGF6eTohMH07ZnVuY3Rpb24gdm4odCxlLG4pe3ZhciByPSFZKCk7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj8obG4uZ2V0PXI/aG4oZSk6bW4obiksbG4uc2V0PWspOihsbi5nZXQ9bi5nZXQ/ciYmITEhPT1uLmNhY2hlP2huKGUpOm1uKG4uZ2V0KTprLGxuLnNldD1uLnNldHx8ayksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxsbil9ZnVuY3Rpb24gaG4odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fY29tcHV0ZWRXYXRjaGVycyYmdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1t0XTtpZihlKXJldHVybiBlLmRpcnR5JiZlLmV2YWx1YXRlKCksYXQudGFyZ2V0JiZlLmRlcGVuZCgpLGUudmFsdWV9fWZ1bmN0aW9uIG1uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmNhbGwodGhpcyx0aGlzKX19ZnVuY3Rpb24geW4odCxlLG4scil7cmV0dXJuIHMobikmJihyPW4sbj1uLmhhbmRsZXIpLFwic3RyaW5nXCI9PXR5cGVvZiBuJiYobj10W25dKSx0LiR3YXRjaChlLG4scil9dmFyIGduPTA7ZnVuY3Rpb24gX24odCl7dmFyIGU9dC5vcHRpb25zO2lmKHQuc3VwZXIpe3ZhciBuPV9uKHQuc3VwZXIpO2lmKG4hPT10LnN1cGVyT3B0aW9ucyl7dC5zdXBlck9wdGlvbnM9bjt2YXIgcj1mdW5jdGlvbih0KXt2YXIgZSxuPXQub3B0aW9ucyxyPXQuc2VhbGVkT3B0aW9ucztmb3IodmFyIG8gaW4gbiluW29dIT09cltvXSYmKGV8fChlPXt9KSxlW29dPW5bb10pO3JldHVybiBlfSh0KTtyJiZ4KHQuZXh0ZW5kT3B0aW9ucyxyKSwoZT10Lm9wdGlvbnM9VHQobix0LmV4dGVuZE9wdGlvbnMpKS5uYW1lJiYoZS5jb21wb25lbnRzW2UubmFtZV09dCl9fXJldHVybiBlfWZ1bmN0aW9uIGJuKHQpe3RoaXMuX2luaXQodCl9ZnVuY3Rpb24gQ24odCl7dC5jaWQ9MDt2YXIgZT0xO3QuZXh0ZW5kPWZ1bmN0aW9uKHQpe3Q9dHx8e307dmFyIG49dGhpcyxyPW4uY2lkLG89dC5fQ3Rvcnx8KHQuX0N0b3I9e30pO2lmKG9bcl0pcmV0dXJuIG9bcl07dmFyIGk9dC5uYW1lfHxuLm9wdGlvbnMubmFtZSxhPWZ1bmN0aW9uKHQpe3RoaXMuX2luaXQodCl9O3JldHVybihhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSkuY29uc3RydWN0b3I9YSxhLmNpZD1lKyssYS5vcHRpb25zPVR0KG4ub3B0aW9ucyx0KSxhLnN1cGVyPW4sYS5vcHRpb25zLnByb3BzJiZmdW5jdGlvbih0KXt2YXIgZT10Lm9wdGlvbnMucHJvcHM7Zm9yKHZhciBuIGluIGUpZm4odC5wcm90b3R5cGUsXCJfcHJvcHNcIixuKX0oYSksYS5vcHRpb25zLmNvbXB1dGVkJiZmdW5jdGlvbih0KXt2YXIgZT10Lm9wdGlvbnMuY29tcHV0ZWQ7Zm9yKHZhciBuIGluIGUpdm4odC5wcm90b3R5cGUsbixlW25dKX0oYSksYS5leHRlbmQ9bi5leHRlbmQsYS5taXhpbj1uLm1peGluLGEudXNlPW4udXNlLE4uZm9yRWFjaChmdW5jdGlvbih0KXthW3RdPW5bdF19KSxpJiYoYS5vcHRpb25zLmNvbXBvbmVudHNbaV09YSksYS5zdXBlck9wdGlvbnM9bi5vcHRpb25zLGEuZXh0ZW5kT3B0aW9ucz10LGEuc2VhbGVkT3B0aW9ucz14KHt9LGEub3B0aW9ucyksb1tyXT1hLGF9fWZ1bmN0aW9uICRuKHQpe3JldHVybiB0JiYodC5DdG9yLm9wdGlvbnMubmFtZXx8dC50YWcpfWZ1bmN0aW9uIHduKHQsZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dC5pbmRleE9mKGUpPi0xOlwic3RyaW5nXCI9PXR5cGVvZiB0P3Quc3BsaXQoXCIsXCIpLmluZGV4T2YoZSk+LTE6KG49dCxcIltvYmplY3QgUmVnRXhwXVwiPT09YS5jYWxsKG4pJiZ0LnRlc3QoZSkpO3ZhciBufWZ1bmN0aW9uIEFuKHQsZSl7dmFyIG49dC5jYWNoZSxyPXQua2V5cyxvPXQuX3Zub2RlO2Zvcih2YXIgaSBpbiBuKXt2YXIgYT1uW2ldO2lmKGEpe3ZhciBzPSRuKGEuY29tcG9uZW50T3B0aW9ucyk7cyYmIWUocykmJnhuKG4saSxyLG8pfX19ZnVuY3Rpb24geG4odCxlLG4scil7dmFyIG89dFtlXTshb3x8ciYmby50YWc9PT1yLnRhZ3x8by5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpLHRbZV09bnVsbCx2KG4sZSl9IWZ1bmN0aW9uKGUpe2UucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7bi5fdWlkPWduKyssbi5faXNWdWU9ITAsZSYmZS5faXNDb21wb25lbnQ/ZnVuY3Rpb24odCxlKXt2YXIgbj10LiRvcHRpb25zPU9iamVjdC5jcmVhdGUodC5jb25zdHJ1Y3Rvci5vcHRpb25zKSxyPWUuX3BhcmVudFZub2RlO24ucGFyZW50PWUucGFyZW50LG4uX3BhcmVudFZub2RlPXI7dmFyIG89ci5jb21wb25lbnRPcHRpb25zO24ucHJvcHNEYXRhPW8ucHJvcHNEYXRhLG4uX3BhcmVudExpc3RlbmVycz1vLmxpc3RlbmVycyxuLl9yZW5kZXJDaGlsZHJlbj1vLmNoaWxkcmVuLG4uX2NvbXBvbmVudFRhZz1vLnRhZyxlLnJlbmRlciYmKG4ucmVuZGVyPWUucmVuZGVyLG4uc3RhdGljUmVuZGVyRm5zPWUuc3RhdGljUmVuZGVyRm5zKX0obixlKTpuLiRvcHRpb25zPVR0KF9uKG4uY29uc3RydWN0b3IpLGV8fHt9LG4pLG4uX3JlbmRlclByb3h5PW4sbi5fc2VsZj1uLGZ1bmN0aW9uKHQpe3ZhciBlPXQuJG9wdGlvbnMsbj1lLnBhcmVudDtpZihuJiYhZS5hYnN0cmFjdCl7Zm9yKDtuLiRvcHRpb25zLmFic3RyYWN0JiZuLiRwYXJlbnQ7KW49bi4kcGFyZW50O24uJGNoaWxkcmVuLnB1c2godCl9dC4kcGFyZW50PW4sdC4kcm9vdD1uP24uJHJvb3Q6dCx0LiRjaGlsZHJlbj1bXSx0LiRyZWZzPXt9LHQuX3dhdGNoZXI9bnVsbCx0Ll9pbmFjdGl2ZT1udWxsLHQuX2RpcmVjdEluYWN0aXZlPSExLHQuX2lzTW91bnRlZD0hMSx0Ll9pc0Rlc3Ryb3llZD0hMSx0Ll9pc0JlaW5nRGVzdHJveWVkPSExfShuKSxmdW5jdGlvbih0KXt0Ll9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0Ll9oYXNIb29rRXZlbnQ9ITE7dmFyIGU9dC4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO2UmJldlKHQsZSl9KG4pLGZ1bmN0aW9uKGUpe2UuX3Zub2RlPW51bGwsZS5fc3RhdGljVHJlZXM9bnVsbDt2YXIgbj1lLiRvcHRpb25zLHI9ZS4kdm5vZGU9bi5fcGFyZW50Vm5vZGUsbz1yJiZyLmNvbnRleHQ7ZS4kc2xvdHM9c2Uobi5fcmVuZGVyQ2hpbGRyZW4sbyksZS4kc2NvcGVkU2xvdHM9dCxlLl9jPWZ1bmN0aW9uKHQsbixyLG8pe3JldHVybiBMZShlLHQsbixyLG8sITEpfSxlLiRjcmVhdGVFbGVtZW50PWZ1bmN0aW9uKHQsbixyLG8pe3JldHVybiBMZShlLHQsbixyLG8sITApfTt2YXIgaT1yJiZyLmRhdGE7JHQoZSxcIiRhdHRyc1wiLGkmJmkuYXR0cnN8fHQsbnVsbCwhMCksJHQoZSxcIiRsaXN0ZW5lcnNcIixuLl9wYXJlbnRMaXN0ZW5lcnN8fHQsbnVsbCwhMCl9KG4pLFplKG4sXCJiZWZvcmVDcmVhdGVcIiksZnVuY3Rpb24odCl7dmFyIGU9YWUodC4kb3B0aW9ucy5pbmplY3QsdCk7ZSYmKF90KCExKSxPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4peyR0KHQsbixlW25dKX0pLF90KCEwKSl9KG4pLHBuKG4pLGZ1bmN0aW9uKHQpe3ZhciBlPXQuJG9wdGlvbnMucHJvdmlkZTtlJiYodC5fcHJvdmlkZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmNhbGwodCk6ZSl9KG4pLFplKG4sXCJjcmVhdGVkXCIpLG4uJG9wdGlvbnMuZWwmJm4uJG1vdW50KG4uJG9wdGlvbnMuZWwpfX0oYm4pLGZ1bmN0aW9uKHQpe3ZhciBlPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX19LG49e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9wc319O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIiRkYXRhXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiJHByb3BzXCIsbiksdC5wcm90b3R5cGUuJHNldD13dCx0LnByb3RvdHlwZS4kZGVsZXRlPUF0LHQucHJvdG90eXBlLiR3YXRjaD1mdW5jdGlvbih0LGUsbil7aWYocyhlKSlyZXR1cm4geW4odGhpcyx0LGUsbik7KG49bnx8e30pLnVzZXI9ITA7dmFyIHI9bmV3IHVuKHRoaXMsdCxlLG4pO2lmKG4uaW1tZWRpYXRlKXRyeXtlLmNhbGwodGhpcyxyLnZhbHVlKX1jYXRjaCh0KXtNdCh0LHRoaXMsJ2NhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcIicrci5leHByZXNzaW9uKydcIicpfXJldHVybiBmdW5jdGlvbigpe3IudGVhcmRvd24oKX19fShibiksZnVuY3Rpb24odCl7dmFyIGU9L15ob29rOi87dC5wcm90b3R5cGUuJG9uPWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpcztpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgbz0wLGk9dC5sZW5ndGg7bzxpO28rKylyLiRvbih0W29dLG4pO2Vsc2Uoci5fZXZlbnRzW3RdfHwoci5fZXZlbnRzW3RdPVtdKSkucHVzaChuKSxlLnRlc3QodCkmJihyLl9oYXNIb29rRXZlbnQ9ITApO3JldHVybiByfSx0LnByb3RvdHlwZS4kb25jZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7ZnVuY3Rpb24gcigpe24uJG9mZih0LHIpLGUuYXBwbHkobixhcmd1bWVudHMpfXJldHVybiByLmZuPWUsbi4kb24odCxyKSxufSx0LnByb3RvdHlwZS4kb2ZmPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbi5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksbjtpZihBcnJheS5pc0FycmF5KHQpKXtmb3IodmFyIHI9MCxvPXQubGVuZ3RoO3I8bztyKyspbi4kb2ZmKHRbcl0sZSk7cmV0dXJuIG59dmFyIGksYT1uLl9ldmVudHNbdF07aWYoIWEpcmV0dXJuIG47aWYoIWUpcmV0dXJuIG4uX2V2ZW50c1t0XT1udWxsLG47Zm9yKHZhciBzPWEubGVuZ3RoO3MtLTspaWYoKGk9YVtzXSk9PT1lfHxpLmZuPT09ZSl7YS5zcGxpY2UocywxKTticmVha31yZXR1cm4gbn0sdC5wcm90b3R5cGUuJGVtaXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZXZlbnRzW3RdO2lmKGUpe2U9ZS5sZW5ndGg+MT9BKGUpOmU7Zm9yKHZhciBuPUEoYXJndW1lbnRzLDEpLHI9J2V2ZW50IGhhbmRsZXIgZm9yIFwiJyt0KydcIicsbz0wLGk9ZS5sZW5ndGg7bzxpO28rKylGdChlW29dLHRoaXMsbix0aGlzLHIpfXJldHVybiB0aGlzfX0oYm4pLGZ1bmN0aW9uKHQpe3QucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9bi4kZWwsbz1uLl92bm9kZSxpPUtlKG4pO24uX3Zub2RlPXQsbi4kZWw9bz9uLl9fcGF0Y2hfXyhvLHQpOm4uX19wYXRjaF9fKG4uJGVsLHQsZSwhMSksaSgpLHImJihyLl9fdnVlX189bnVsbCksbi4kZWwmJihuLiRlbC5fX3Z1ZV9fPW4pLG4uJHZub2RlJiZuLiRwYXJlbnQmJm4uJHZub2RlPT09bi4kcGFyZW50Ll92bm9kZSYmKG4uJHBhcmVudC4kZWw9bi4kZWwpfSx0LnByb3RvdHlwZS4kZm9yY2VVcGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl93YXRjaGVyJiZ0aGlzLl93YXRjaGVyLnVwZGF0ZSgpfSx0LnByb3RvdHlwZS4kZGVzdHJveT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoIXQuX2lzQmVpbmdEZXN0cm95ZWQpe1plKHQsXCJiZWZvcmVEZXN0cm95XCIpLHQuX2lzQmVpbmdEZXN0cm95ZWQ9ITA7dmFyIGU9dC4kcGFyZW50OyFlfHxlLl9pc0JlaW5nRGVzdHJveWVkfHx0LiRvcHRpb25zLmFic3RyYWN0fHx2KGUuJGNoaWxkcmVuLHQpLHQuX3dhdGNoZXImJnQuX3dhdGNoZXIudGVhcmRvd24oKTtmb3IodmFyIG49dC5fd2F0Y2hlcnMubGVuZ3RoO24tLTspdC5fd2F0Y2hlcnNbbl0udGVhcmRvd24oKTt0Ll9kYXRhLl9fb2JfXyYmdC5fZGF0YS5fX29iX18udm1Db3VudC0tLHQuX2lzRGVzdHJveWVkPSEwLHQuX19wYXRjaF9fKHQuX3Zub2RlLG51bGwpLFplKHQsXCJkZXN0cm95ZWRcIiksdC4kb2ZmKCksdC4kZWwmJih0LiRlbC5fX3Z1ZV9fPW51bGwpLHQuJHZub2RlJiYodC4kdm5vZGUucGFyZW50PW51bGwpfX19KGJuKSxmdW5jdGlvbih0KXtPZSh0LnByb3RvdHlwZSksdC5wcm90b3R5cGUuJG5leHRUaWNrPWZ1bmN0aW9uKHQpe3JldHVybiBadCh0LHRoaXMpfSx0LnByb3RvdHlwZS5fcmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLG49ZS4kb3B0aW9ucyxyPW4ucmVuZGVyLG89bi5fcGFyZW50Vm5vZGU7byYmKGUuJHNjb3BlZFNsb3RzPXVlKG8uZGF0YS5zY29wZWRTbG90cyxlLiRzbG90cyxlLiRzY29wZWRTbG90cykpLGUuJHZub2RlPW87dHJ5e0ZlPWUsdD1yLmNhbGwoZS5fcmVuZGVyUHJveHksZS4kY3JlYXRlRWxlbWVudCl9Y2F0Y2gobil7TXQobixlLFwicmVuZGVyXCIpLHQ9ZS5fdm5vZGV9ZmluYWxseXtGZT1udWxsfXJldHVybiBBcnJheS5pc0FycmF5KHQpJiYxPT09dC5sZW5ndGgmJih0PXRbMF0pLHQgaW5zdGFuY2VvZiBsdHx8KHQ9cHQoKSksdC5wYXJlbnQ9byx0fX0oYm4pO3ZhciBPbj1bU3RyaW5nLFJlZ0V4cCxBcnJheV0sa249e0tlZXBBbGl2ZTp7bmFtZTpcImtlZXAtYWxpdmVcIixhYnN0cmFjdDohMCxwcm9wczp7aW5jbHVkZTpPbixleGNsdWRlOk9uLG1heDpbU3RyaW5nLE51bWJlcl19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5rZXlzPVtdfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5jYWNoZSl4bih0aGlzLmNhY2hlLHQsdGhpcy5rZXlzKX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kd2F0Y2goXCJpbmNsdWRlXCIsZnVuY3Rpb24oZSl7QW4odCxmdW5jdGlvbih0KXtyZXR1cm4gd24oZSx0KX0pfSksdGhpcy4kd2F0Y2goXCJleGNsdWRlXCIsZnVuY3Rpb24oZSl7QW4odCxmdW5jdGlvbih0KXtyZXR1cm4hd24oZSx0KX0pfSl9LHJlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHNsb3RzLmRlZmF1bHQsZT1IZSh0KSxuPWUmJmUuY29tcG9uZW50T3B0aW9ucztpZihuKXt2YXIgcj0kbihuKSxvPXRoaXMuaW5jbHVkZSxpPXRoaXMuZXhjbHVkZTtpZihvJiYoIXJ8fCF3bihvLHIpKXx8aSYmciYmd24oaSxyKSlyZXR1cm4gZTt2YXIgYT10aGlzLmNhY2hlLHM9dGhpcy5rZXlzLGM9bnVsbD09ZS5rZXk/bi5DdG9yLmNpZCsobi50YWc/XCI6OlwiK24udGFnOlwiXCIpOmUua2V5O2FbY10/KGUuY29tcG9uZW50SW5zdGFuY2U9YVtjXS5jb21wb25lbnRJbnN0YW5jZSx2KHMsYykscy5wdXNoKGMpKTooYVtjXT1lLHMucHVzaChjKSx0aGlzLm1heCYmcy5sZW5ndGg+cGFyc2VJbnQodGhpcy5tYXgpJiZ4bihhLHNbMF0scyx0aGlzLl92bm9kZSkpLGUuZGF0YS5rZWVwQWxpdmU9ITB9cmV0dXJuIGV8fHQmJnRbMF19fX07IWZ1bmN0aW9uKHQpe3ZhciBlPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTH19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiY29uZmlnXCIsZSksdC51dGlsPXt3YXJuOm90LGV4dGVuZDp4LG1lcmdlT3B0aW9uczpUdCxkZWZpbmVSZWFjdGl2ZTokdH0sdC5zZXQ9d3QsdC5kZWxldGU9QXQsdC5uZXh0VGljaz1adCx0Lm9ic2VydmFibGU9ZnVuY3Rpb24odCl7cmV0dXJuIEN0KHQpLHR9LHQub3B0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLE4uZm9yRWFjaChmdW5jdGlvbihlKXt0Lm9wdGlvbnNbZStcInNcIl09T2JqZWN0LmNyZWF0ZShudWxsKX0pLHQub3B0aW9ucy5fYmFzZT10LHgodC5vcHRpb25zLmNvbXBvbmVudHMsa24pLGZ1bmN0aW9uKHQpe3QudXNlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2luc3RhbGxlZFBsdWdpbnN8fCh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zPVtdKTtpZihlLmluZGV4T2YodCk+LTEpcmV0dXJuIHRoaXM7dmFyIG49QShhcmd1bWVudHMsMSk7cmV0dXJuIG4udW5zaGlmdCh0aGlzKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lmluc3RhbGw/dC5pbnN0YWxsLmFwcGx5KHQsbik6XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdC5hcHBseShudWxsLG4pLGUucHVzaCh0KSx0aGlzfX0odCksZnVuY3Rpb24odCl7dC5taXhpbj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5vcHRpb25zPVR0KHRoaXMub3B0aW9ucyx0KSx0aGlzfX0odCksQ24odCksZnVuY3Rpb24odCl7Ti5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ZnVuY3Rpb24odCxuKXtyZXR1cm4gbj8oXCJjb21wb25lbnRcIj09PWUmJnMobikmJihuLm5hbWU9bi5uYW1lfHx0LG49dGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChuKSksXCJkaXJlY3RpdmVcIj09PWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPXtiaW5kOm4sdXBkYXRlOm59KSx0aGlzLm9wdGlvbnNbZStcInNcIl1bdF09bixuKTp0aGlzLm9wdGlvbnNbZStcInNcIl1bdF19fSl9KHQpfShibiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGJuLnByb3RvdHlwZSxcIiRpc1NlcnZlclwiLHtnZXQ6WX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShibi5wcm90b3R5cGUsXCIkc3NyQ29udGV4dFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGJuLFwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcIix7dmFsdWU6a2V9KSxibi52ZXJzaW9uPVwiMi42LjEyXCI7dmFyIFNuPXAoXCJzdHlsZSxjbGFzc1wiKSxFbj1wKFwiaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzc1wiKSxqbj1wKFwiY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrXCIpLFRuPXAoXCJldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5XCIpLEluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1uKGUpfHxcImZhbHNlXCI9PT1lP1wiZmFsc2VcIjpcImNvbnRlbnRlZGl0YWJsZVwiPT09dCYmVG4oZSk/ZTpcInRydWVcIn0sRG49cChcImFsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLGVuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSxyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLHRydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGVcIiksTm49XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsUG49ZnVuY3Rpb24odCl7cmV0dXJuXCI6XCI9PT10LmNoYXJBdCg1KSYmXCJ4bGlua1wiPT09dC5zbGljZSgwLDUpfSxMbj1mdW5jdGlvbih0KXtyZXR1cm4gUG4odCk/dC5zbGljZSg2LHQubGVuZ3RoKTpcIlwifSxNbj1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dHx8ITE9PT10fTtmdW5jdGlvbiBGbih0KXtmb3IodmFyIGU9dC5kYXRhLHI9dCxvPXQ7bihvLmNvbXBvbmVudEluc3RhbmNlKTspKG89by5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpJiZvLmRhdGEmJihlPVJuKG8uZGF0YSxlKSk7Zm9yKDtuKHI9ci5wYXJlbnQpOylyJiZyLmRhdGEmJihlPVJuKGUsci5kYXRhKSk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYobih0KXx8bihlKSlyZXR1cm4gVW4odCxIbihlKSk7cmV0dXJuXCJcIn0oZS5zdGF0aWNDbGFzcyxlLmNsYXNzKX1mdW5jdGlvbiBSbih0LGUpe3JldHVybntzdGF0aWNDbGFzczpVbih0LnN0YXRpY0NsYXNzLGUuc3RhdGljQ2xhc3MpLGNsYXNzOm4odC5jbGFzcyk/W3QuY2xhc3MsZS5jbGFzc106ZS5jbGFzc319ZnVuY3Rpb24gVW4odCxlKXtyZXR1cm4gdD9lP3QrXCIgXCIrZTp0OmV8fFwiXCJ9ZnVuY3Rpb24gSG4odCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/ZnVuY3Rpb24odCl7Zm9yKHZhciBlLHI9XCJcIixvPTAsaT10Lmxlbmd0aDtvPGk7bysrKW4oZT1Ibih0W29dKSkmJlwiXCIhPT1lJiYociYmKHIrPVwiIFwiKSxyKz1lKTtyZXR1cm4gcn0odCk6aSh0KT9mdW5jdGlvbih0KXt2YXIgZT1cIlwiO2Zvcih2YXIgbiBpbiB0KXRbbl0mJihlJiYoZSs9XCIgXCIpLGUrPW4pO3JldHVybiBlfSh0KTpcInN0cmluZ1wiPT10eXBlb2YgdD90OlwiXCJ9dmFyIEJuPXtzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLG1hdGg6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCJ9LFZuPXAoXCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiKSx6bj1wKFwic3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLGZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXdcIiwhMCksV249ZnVuY3Rpb24odCl7cmV0dXJuIFZuKHQpfHx6bih0KX07dmFyIHFuPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIEtuPXAoXCJ0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybFwiKTt2YXIgWG49T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpmdW5jdGlvbih0LGUpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7cmV0dXJuXCJzZWxlY3RcIiE9PXQ/bjooZS5kYXRhJiZlLmRhdGEuYXR0cnMmJnZvaWQgMCE9PWUuZGF0YS5hdHRycy5tdWx0aXBsZSYmbi5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLFwibXVsdGlwbGVcIiksbil9LGNyZWF0ZUVsZW1lbnROUzpmdW5jdGlvbih0LGUpe3JldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQm5bdF0sZSl9LGNyZWF0ZVRleHROb2RlOmZ1bmN0aW9uKHQpe3JldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KX0sY3JlYXRlQ29tbWVudDpmdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0KX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKHQsZSxuKXt0Lmluc2VydEJlZm9yZShlLG4pfSxyZW1vdmVDaGlsZDpmdW5jdGlvbih0LGUpe3QucmVtb3ZlQ2hpbGQoZSl9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKHQsZSl7dC5hcHBlbmRDaGlsZChlKX0scGFyZW50Tm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5wYXJlbnROb2RlfSxuZXh0U2libGluZzpmdW5jdGlvbih0KXtyZXR1cm4gdC5uZXh0U2libGluZ30sdGFnTmFtZTpmdW5jdGlvbih0KXtyZXR1cm4gdC50YWdOYW1lfSxzZXRUZXh0Q29udGVudDpmdW5jdGlvbih0LGUpe3QudGV4dENvbnRlbnQ9ZX0sc2V0U3R5bGVTY29wZTpmdW5jdGlvbih0LGUpe3Quc2V0QXR0cmlidXRlKGUsXCJcIil9fSksR249e2NyZWF0ZTpmdW5jdGlvbih0LGUpe1puKGUpfSx1cGRhdGU6ZnVuY3Rpb24odCxlKXt0LmRhdGEucmVmIT09ZS5kYXRhLnJlZiYmKFpuKHQsITApLFpuKGUpKX0sZGVzdHJveTpmdW5jdGlvbih0KXtabih0LCEwKX19O2Z1bmN0aW9uIFpuKHQsZSl7dmFyIHI9dC5kYXRhLnJlZjtpZihuKHIpKXt2YXIgbz10LmNvbnRleHQsaT10LmNvbXBvbmVudEluc3RhbmNlfHx0LmVsbSxhPW8uJHJlZnM7ZT9BcnJheS5pc0FycmF5KGFbcl0pP3YoYVtyXSxpKTphW3JdPT09aSYmKGFbcl09dm9pZCAwKTp0LmRhdGEucmVmSW5Gb3I/QXJyYXkuaXNBcnJheShhW3JdKT9hW3JdLmluZGV4T2YoaSk8MCYmYVtyXS5wdXNoKGkpOmFbcl09W2ldOmFbcl09aX19dmFyIEpuPW5ldyBsdChcIlwiLHt9LFtdKSxRbj1bXCJjcmVhdGVcIixcImFjdGl2YXRlXCIsXCJ1cGRhdGVcIixcInJlbW92ZVwiLFwiZGVzdHJveVwiXTtmdW5jdGlvbiBZbih0LG8pe3JldHVybiB0LmtleT09PW8ua2V5JiYodC50YWc9PT1vLnRhZyYmdC5pc0NvbW1lbnQ9PT1vLmlzQ29tbWVudCYmbih0LmRhdGEpPT09bihvLmRhdGEpJiZmdW5jdGlvbih0LGUpe2lmKFwiaW5wdXRcIiE9PXQudGFnKXJldHVybiEwO3ZhciByLG89bihyPXQuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlLGk9bihyPWUuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlO3JldHVybiBvPT09aXx8S24obykmJktuKGkpfSh0LG8pfHxyKHQuaXNBc3luY1BsYWNlaG9sZGVyKSYmdC5hc3luY0ZhY3Rvcnk9PT1vLmFzeW5jRmFjdG9yeSYmZShvLmFzeW5jRmFjdG9yeS5lcnJvcikpfWZ1bmN0aW9uIHRyKHQsZSxyKXt2YXIgbyxpLGE9e307Zm9yKG89ZTtvPD1yOysrbyluKGk9dFtvXS5rZXkpJiYoYVtpXT1vKTtyZXR1cm4gYX12YXIgZXI9e2NyZWF0ZTpucix1cGRhdGU6bnIsZGVzdHJveTpmdW5jdGlvbih0KXtucih0LEpuKX19O2Z1bmN0aW9uIG5yKHQsZSl7KHQuZGF0YS5kaXJlY3RpdmVzfHxlLmRhdGEuZGlyZWN0aXZlcykmJmZ1bmN0aW9uKHQsZSl7dmFyIG4scixvLGk9dD09PUpuLGE9ZT09PUpuLHM9b3IodC5kYXRhLmRpcmVjdGl2ZXMsdC5jb250ZXh0KSxjPW9yKGUuZGF0YS5kaXJlY3RpdmVzLGUuY29udGV4dCksdT1bXSxsPVtdO2ZvcihuIGluIGMpcj1zW25dLG89Y1tuXSxyPyhvLm9sZFZhbHVlPXIudmFsdWUsby5vbGRBcmc9ci5hcmcsYXIobyxcInVwZGF0ZVwiLGUsdCksby5kZWYmJm8uZGVmLmNvbXBvbmVudFVwZGF0ZWQmJmwucHVzaChvKSk6KGFyKG8sXCJiaW5kXCIsZSx0KSxvLmRlZiYmby5kZWYuaW5zZXJ0ZWQmJnUucHVzaChvKSk7aWYodS5sZW5ndGgpe3ZhciBmPWZ1bmN0aW9uKCl7Zm9yKHZhciBuPTA7bjx1Lmxlbmd0aDtuKyspYXIodVtuXSxcImluc2VydGVkXCIsZSx0KX07aT9uZShlLFwiaW5zZXJ0XCIsZik6ZigpfWwubGVuZ3RoJiZuZShlLFwicG9zdHBhdGNoXCIsZnVuY3Rpb24oKXtmb3IodmFyIG49MDtuPGwubGVuZ3RoO24rKylhcihsW25dLFwiY29tcG9uZW50VXBkYXRlZFwiLGUsdCl9KTtpZighaSlmb3IobiBpbiBzKWNbbl18fGFyKHNbbl0sXCJ1bmJpbmRcIix0LHQsYSl9KHQsZSl9dmFyIHJyPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gb3IodCxlKXt2YXIgbixyLG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZighdClyZXR1cm4gbztmb3Iobj0wO248dC5sZW5ndGg7bisrKShyPXRbbl0pLm1vZGlmaWVyc3x8KHIubW9kaWZpZXJzPXJyKSxvW2lyKHIpXT1yLHIuZGVmPUl0KGUuJG9wdGlvbnMsXCJkaXJlY3RpdmVzXCIsci5uYW1lKTtyZXR1cm4gb31mdW5jdGlvbiBpcih0KXtyZXR1cm4gdC5yYXdOYW1lfHx0Lm5hbWUrXCIuXCIrT2JqZWN0LmtleXModC5tb2RpZmllcnN8fHt9KS5qb2luKFwiLlwiKX1mdW5jdGlvbiBhcih0LGUsbixyLG8pe3ZhciBpPXQuZGVmJiZ0LmRlZltlXTtpZihpKXRyeXtpKG4uZWxtLHQsbixyLG8pfWNhdGNoKHIpe010KHIsbi5jb250ZXh0LFwiZGlyZWN0aXZlIFwiK3QubmFtZStcIiBcIitlK1wiIGhvb2tcIil9fXZhciBzcj1bR24sZXJdO2Z1bmN0aW9uIGNyKHQscil7dmFyIG89ci5jb21wb25lbnRPcHRpb25zO2lmKCEobihvKSYmITE9PT1vLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnN8fGUodC5kYXRhLmF0dHJzKSYmZShyLmRhdGEuYXR0cnMpKSl7dmFyIGksYSxzPXIuZWxtLGM9dC5kYXRhLmF0dHJzfHx7fSx1PXIuZGF0YS5hdHRyc3x8e307Zm9yKGkgaW4gbih1Ll9fb2JfXykmJih1PXIuZGF0YS5hdHRycz14KHt9LHUpKSx1KWE9dVtpXSxjW2ldIT09YSYmdXIocyxpLGEpO2ZvcihpIGluKFd8fEspJiZ1LnZhbHVlIT09Yy52YWx1ZSYmdXIocyxcInZhbHVlXCIsdS52YWx1ZSksYyllKHVbaV0pJiYoUG4oaSk/cy5yZW1vdmVBdHRyaWJ1dGVOUyhObixMbihpKSk6am4oaSl8fHMucmVtb3ZlQXR0cmlidXRlKGkpKX19ZnVuY3Rpb24gdXIodCxlLG4pe3QudGFnTmFtZS5pbmRleE9mKFwiLVwiKT4tMT9scih0LGUsbik6RG4oZSk/TW4obik/dC5yZW1vdmVBdHRyaWJ1dGUoZSk6KG49XCJhbGxvd2Z1bGxzY3JlZW5cIj09PWUmJlwiRU1CRURcIj09PXQudGFnTmFtZT9cInRydWVcIjplLHQuc2V0QXR0cmlidXRlKGUsbikpOmpuKGUpP3Quc2V0QXR0cmlidXRlKGUsSW4oZSxuKSk6UG4oZSk/TW4obik/dC5yZW1vdmVBdHRyaWJ1dGVOUyhObixMbihlKSk6dC5zZXRBdHRyaWJ1dGVOUyhObixlLG4pOmxyKHQsZSxuKX1mdW5jdGlvbiBscih0LGUsbil7aWYoTW4obikpdC5yZW1vdmVBdHRyaWJ1dGUoZSk7ZWxzZXtpZihXJiYhcSYmXCJURVhUQVJFQVwiPT09dC50YWdOYW1lJiZcInBsYWNlaG9sZGVyXCI9PT1lJiZcIlwiIT09biYmIXQuX19pZXBoKXt2YXIgcj1mdW5jdGlvbihlKXtlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIscil9O3QuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsciksdC5fX2llcGg9ITB9dC5zZXRBdHRyaWJ1dGUoZSxuKX19dmFyIGZyPXtjcmVhdGU6Y3IsdXBkYXRlOmNyfTtmdW5jdGlvbiBwcih0LHIpe3ZhciBvPXIuZWxtLGk9ci5kYXRhLGE9dC5kYXRhO2lmKCEoZShpLnN0YXRpY0NsYXNzKSYmZShpLmNsYXNzKSYmKGUoYSl8fGUoYS5zdGF0aWNDbGFzcykmJmUoYS5jbGFzcykpKSl7dmFyIHM9Rm4ociksYz1vLl90cmFuc2l0aW9uQ2xhc3NlcztuKGMpJiYocz1VbihzLEhuKGMpKSkscyE9PW8uX3ByZXZDbGFzcyYmKG8uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKSxvLl9wcmV2Q2xhc3M9cyl9fXZhciBkcix2cj17Y3JlYXRlOnByLHVwZGF0ZTpwcn0saHI9XCJfX3JcIixtcj1cIl9fY1wiO2Z1bmN0aW9uIHlyKHQsZSxuKXt2YXIgcj1kcjtyZXR1cm4gZnVuY3Rpb24gbygpe251bGwhPT1lLmFwcGx5KG51bGwsYXJndW1lbnRzKSYmYnIodCxvLG4scil9fXZhciBncj1CdCYmIShHJiZOdW1iZXIoR1sxXSk8PTUzKTtmdW5jdGlvbiBfcih0LGUsbixyKXtpZihncil7dmFyIG89cm4saT1lO2U9aS5fd3JhcHBlcj1mdW5jdGlvbih0KXtpZih0LnRhcmdldD09PXQuY3VycmVudFRhcmdldHx8dC50aW1lU3RhbXA+PW98fHQudGltZVN0YW1wPD0wfHx0LnRhcmdldC5vd25lckRvY3VtZW50IT09ZG9jdW1lbnQpcmV0dXJuIGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1kci5hZGRFdmVudExpc3RlbmVyKHQsZSxKP3tjYXB0dXJlOm4scGFzc2l2ZTpyfTpuKX1mdW5jdGlvbiBicih0LGUsbixyKXsocnx8ZHIpLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxlLl93cmFwcGVyfHxlLG4pfWZ1bmN0aW9uIENyKHQscil7aWYoIWUodC5kYXRhLm9uKXx8IWUoci5kYXRhLm9uKSl7dmFyIG89ci5kYXRhLm9ufHx7fSxpPXQuZGF0YS5vbnx8e307ZHI9ci5lbG0sZnVuY3Rpb24odCl7aWYobih0W2hyXSkpe3ZhciBlPVc/XCJjaGFuZ2VcIjpcImlucHV0XCI7dFtlXT1bXS5jb25jYXQodFtocl0sdFtlXXx8W10pLGRlbGV0ZSB0W2hyXX1uKHRbbXJdKSYmKHQuY2hhbmdlPVtdLmNvbmNhdCh0W21yXSx0LmNoYW5nZXx8W10pLGRlbGV0ZSB0W21yXSl9KG8pLGVlKG8saSxfcixicix5cixyLmNvbnRleHQpLGRyPXZvaWQgMH19dmFyICRyLHdyPXtjcmVhdGU6Q3IsdXBkYXRlOkNyfTtmdW5jdGlvbiBBcih0LHIpe2lmKCFlKHQuZGF0YS5kb21Qcm9wcyl8fCFlKHIuZGF0YS5kb21Qcm9wcykpe3ZhciBvLGksYT1yLmVsbSxzPXQuZGF0YS5kb21Qcm9wc3x8e30sYz1yLmRhdGEuZG9tUHJvcHN8fHt9O2ZvcihvIGluIG4oYy5fX29iX18pJiYoYz1yLmRhdGEuZG9tUHJvcHM9eCh7fSxjKSkscylvIGluIGN8fChhW29dPVwiXCIpO2ZvcihvIGluIGMpe2lmKGk9Y1tvXSxcInRleHRDb250ZW50XCI9PT1vfHxcImlubmVySFRNTFwiPT09byl7aWYoci5jaGlsZHJlbiYmKHIuY2hpbGRyZW4ubGVuZ3RoPTApLGk9PT1zW29dKWNvbnRpbnVlOzE9PT1hLmNoaWxkTm9kZXMubGVuZ3RoJiZhLnJlbW92ZUNoaWxkKGEuY2hpbGROb2Rlc1swXSl9aWYoXCJ2YWx1ZVwiPT09byYmXCJQUk9HUkVTU1wiIT09YS50YWdOYW1lKXthLl92YWx1ZT1pO3ZhciB1PWUoaSk/XCJcIjpTdHJpbmcoaSk7eHIoYSx1KSYmKGEudmFsdWU9dSl9ZWxzZSBpZihcImlubmVySFRNTFwiPT09byYmem4oYS50YWdOYW1lKSYmZShhLmlubmVySFRNTCkpeygkcj0kcnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPVwiPHN2Zz5cIitpK1wiPC9zdmc+XCI7Zm9yKHZhciBsPSRyLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtsLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQobC5maXJzdENoaWxkKX1lbHNlIGlmKGkhPT1zW29dKXRyeXthW29dPWl9Y2F0Y2godCl7fX19fWZ1bmN0aW9uIHhyKHQsZSl7cmV0dXJuIXQuY29tcG9zaW5nJiYoXCJPUFRJT05cIj09PXQudGFnTmFtZXx8ZnVuY3Rpb24odCxlKXt2YXIgbj0hMDt0cnl7bj1kb2N1bWVudC5hY3RpdmVFbGVtZW50IT09dH1jYXRjaCh0KXt9cmV0dXJuIG4mJnQudmFsdWUhPT1lfSh0LGUpfHxmdW5jdGlvbih0LGUpe3ZhciByPXQudmFsdWUsbz10Ll92TW9kaWZpZXJzO2lmKG4obykpe2lmKG8ubnVtYmVyKXJldHVybiBmKHIpIT09ZihlKTtpZihvLnRyaW0pcmV0dXJuIHIudHJpbSgpIT09ZS50cmltKCl9cmV0dXJuIHIhPT1lfSh0LGUpKX12YXIgT3I9e2NyZWF0ZTpBcix1cGRhdGU6QXJ9LGtyPXkoZnVuY3Rpb24odCl7dmFyIGU9e30sbj0vOiguKykvO3JldHVybiB0LnNwbGl0KC87KD8hW14oXSpcXCkpL2cpLmZvckVhY2goZnVuY3Rpb24odCl7aWYodCl7dmFyIHI9dC5zcGxpdChuKTtyLmxlbmd0aD4xJiYoZVtyWzBdLnRyaW0oKV09clsxXS50cmltKCkpfX0pLGV9KTtmdW5jdGlvbiBTcih0KXt2YXIgZT1Fcih0LnN0eWxlKTtyZXR1cm4gdC5zdGF0aWNTdHlsZT94KHQuc3RhdGljU3R5bGUsZSk6ZX1mdW5jdGlvbiBFcih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT9PKHQpOlwic3RyaW5nXCI9PXR5cGVvZiB0P2tyKHQpOnR9dmFyIGpyLFRyPS9eLS0vLElyPS9cXHMqIWltcG9ydGFudCQvLERyPWZ1bmN0aW9uKHQsZSxuKXtpZihUci50ZXN0KGUpKXQuc3R5bGUuc2V0UHJvcGVydHkoZSxuKTtlbHNlIGlmKElyLnRlc3QobikpdC5zdHlsZS5zZXRQcm9wZXJ0eSgkKGUpLG4ucmVwbGFjZShJcixcIlwiKSxcImltcG9ydGFudFwiKTtlbHNle3ZhciByPVByKGUpO2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHZhciBvPTAsaT1uLmxlbmd0aDtvPGk7bysrKXQuc3R5bGVbcl09bltvXTtlbHNlIHQuc3R5bGVbcl09bn19LE5yPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSxQcj15KGZ1bmN0aW9uKHQpe2lmKGpyPWpyfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiZmlsdGVyXCIhPT0odD1fKHQpKSYmdCBpbiBqcilyZXR1cm4gdDtmb3IodmFyIGU9dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpLG49MDtuPE5yLmxlbmd0aDtuKyspe3ZhciByPU5yW25dK2U7aWYociBpbiBqcilyZXR1cm4gcn19KTtmdW5jdGlvbiBMcih0LHIpe3ZhciBvPXIuZGF0YSxpPXQuZGF0YTtpZighKGUoby5zdGF0aWNTdHlsZSkmJmUoby5zdHlsZSkmJmUoaS5zdGF0aWNTdHlsZSkmJmUoaS5zdHlsZSkpKXt2YXIgYSxzLGM9ci5lbG0sdT1pLnN0YXRpY1N0eWxlLGw9aS5ub3JtYWxpemVkU3R5bGV8fGkuc3R5bGV8fHt9LGY9dXx8bCxwPUVyKHIuZGF0YS5zdHlsZSl8fHt9O3IuZGF0YS5ub3JtYWxpemVkU3R5bGU9bihwLl9fb2JfXyk/eCh7fSxwKTpwO3ZhciBkPWZ1bmN0aW9uKHQsZSl7dmFyIG4scj17fTtpZihlKWZvcih2YXIgbz10O28uY29tcG9uZW50SW5zdGFuY2U7KShvPW8uY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKSYmby5kYXRhJiYobj1TcihvLmRhdGEpKSYmeChyLG4pOyhuPVNyKHQuZGF0YSkpJiZ4KHIsbik7Zm9yKHZhciBpPXQ7aT1pLnBhcmVudDspaS5kYXRhJiYobj1TcihpLmRhdGEpKSYmeChyLG4pO3JldHVybiByfShyLCEwKTtmb3IocyBpbiBmKWUoZFtzXSkmJkRyKGMscyxcIlwiKTtmb3IocyBpbiBkKShhPWRbc10pIT09ZltzXSYmRHIoYyxzLG51bGw9PWE/XCJcIjphKX19dmFyIE1yPXtjcmVhdGU6THIsdXBkYXRlOkxyfSxGcj0vXFxzKy87ZnVuY3Rpb24gUnIodCxlKXtpZihlJiYoZT1lLnRyaW0oKSkpaWYodC5jbGFzc0xpc3QpZS5pbmRleE9mKFwiIFwiKT4tMT9lLnNwbGl0KEZyKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmNsYXNzTGlzdC5hZGQoZSl9KTp0LmNsYXNzTGlzdC5hZGQoZSk7ZWxzZXt2YXIgbj1cIiBcIisodC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCI7bi5pbmRleE9mKFwiIFwiK2UrXCIgXCIpPDAmJnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwobitlKS50cmltKCkpfX1mdW5jdGlvbiBVcih0LGUpe2lmKGUmJihlPWUudHJpbSgpKSlpZih0LmNsYXNzTGlzdCllLmluZGV4T2YoXCIgXCIpPi0xP2Uuc3BsaXQoRnIpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xhc3NMaXN0LnJlbW92ZShlKX0pOnQuY2xhc3NMaXN0LnJlbW92ZShlKSx0LmNsYXNzTGlzdC5sZW5ndGh8fHQucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik7ZWxzZXtmb3IodmFyIG49XCIgXCIrKHQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpK1wiIFwiLHI9XCIgXCIrZStcIiBcIjtuLmluZGV4T2Yocik+PTA7KW49bi5yZXBsYWNlKHIsXCIgXCIpOyhuPW4udHJpbSgpKT90LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsbik6dC5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKX19ZnVuY3Rpb24gSHIodCl7aWYodCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIHQpe3ZhciBlPXt9O3JldHVybiExIT09dC5jc3MmJngoZSxCcih0Lm5hbWV8fFwidlwiKSkseChlLHQpLGV9cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/QnIodCk6dm9pZCAwfX12YXIgQnI9eShmdW5jdGlvbih0KXtyZXR1cm57ZW50ZXJDbGFzczp0K1wiLWVudGVyXCIsZW50ZXJUb0NsYXNzOnQrXCItZW50ZXItdG9cIixlbnRlckFjdGl2ZUNsYXNzOnQrXCItZW50ZXItYWN0aXZlXCIsbGVhdmVDbGFzczp0K1wiLWxlYXZlXCIsbGVhdmVUb0NsYXNzOnQrXCItbGVhdmUtdG9cIixsZWF2ZUFjdGl2ZUNsYXNzOnQrXCItbGVhdmUtYWN0aXZlXCJ9fSksVnI9SCYmIXEsenI9XCJ0cmFuc2l0aW9uXCIsV3I9XCJhbmltYXRpb25cIixxcj1cInRyYW5zaXRpb25cIixLcj1cInRyYW5zaXRpb25lbmRcIixYcj1cImFuaW1hdGlvblwiLEdyPVwiYW5pbWF0aW9uZW5kXCI7VnImJih2b2lkIDA9PT13aW5kb3cub250cmFuc2l0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kJiYocXI9XCJXZWJraXRUcmFuc2l0aW9uXCIsS3I9XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIpLHZvaWQgMD09PXdpbmRvdy5vbmFuaW1hdGlvbmVuZCYmdm9pZCAwIT09d2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kJiYoWHI9XCJXZWJraXRBbmltYXRpb25cIixHcj1cIndlYmtpdEFuaW1hdGlvbkVuZFwiKSk7dmFyIFpyPUg/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTpzZXRUaW1lb3V0OmZ1bmN0aW9uKHQpe3JldHVybiB0KCl9O2Z1bmN0aW9uIEpyKHQpe1pyKGZ1bmN0aW9uKCl7WnIodCl9KX1mdW5jdGlvbiBRcih0LGUpe3ZhciBuPXQuX3RyYW5zaXRpb25DbGFzc2VzfHwodC5fdHJhbnNpdGlvbkNsYXNzZXM9W10pO24uaW5kZXhPZihlKTwwJiYobi5wdXNoKGUpLFJyKHQsZSkpfWZ1bmN0aW9uIFlyKHQsZSl7dC5fdHJhbnNpdGlvbkNsYXNzZXMmJnYodC5fdHJhbnNpdGlvbkNsYXNzZXMsZSksVXIodCxlKX1mdW5jdGlvbiB0byh0LGUsbil7dmFyIHI9bm8odCxlKSxvPXIudHlwZSxpPXIudGltZW91dCxhPXIucHJvcENvdW50O2lmKCFvKXJldHVybiBuKCk7dmFyIHM9bz09PXpyP0tyOkdyLGM9MCx1PWZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKHMsbCksbigpfSxsPWZ1bmN0aW9uKGUpe2UudGFyZ2V0PT09dCYmKytjPj1hJiZ1KCl9O3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjPGEmJnUoKX0saSsxKSx0LmFkZEV2ZW50TGlzdGVuZXIocyxsKX12YXIgZW89L1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztmdW5jdGlvbiBubyh0LGUpe3ZhciBuLHI9d2luZG93LmdldENvbXB1dGVkU3R5bGUodCksbz0ocltxcitcIkRlbGF5XCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLGk9KHJbcXIrXCJEdXJhdGlvblwiXXx8XCJcIikuc3BsaXQoXCIsIFwiKSxhPXJvKG8saSkscz0ocltYcitcIkRlbGF5XCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLGM9KHJbWHIrXCJEdXJhdGlvblwiXXx8XCJcIikuc3BsaXQoXCIsIFwiKSx1PXJvKHMsYyksbD0wLGY9MDtyZXR1cm4gZT09PXpyP2E+MCYmKG49enIsbD1hLGY9aS5sZW5ndGgpOmU9PT1Xcj91PjAmJihuPVdyLGw9dSxmPWMubGVuZ3RoKTpmPShuPShsPU1hdGgubWF4KGEsdSkpPjA/YT51P3pyOldyOm51bGwpP249PT16cj9pLmxlbmd0aDpjLmxlbmd0aDowLHt0eXBlOm4sdGltZW91dDpsLHByb3BDb3VudDpmLGhhc1RyYW5zZm9ybTpuPT09enImJmVvLnRlc3QocltxcitcIlByb3BlcnR5XCJdKX19ZnVuY3Rpb24gcm8odCxlKXtmb3IoO3QubGVuZ3RoPGUubGVuZ3RoOyl0PXQuY29uY2F0KHQpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLGUubWFwKGZ1bmN0aW9uKGUsbil7cmV0dXJuIG9vKGUpK29vKHRbbl0pfSkpfWZ1bmN0aW9uIG9vKHQpe3JldHVybiAxZTMqTnVtYmVyKHQuc2xpY2UoMCwtMSkucmVwbGFjZShcIixcIixcIi5cIikpfWZ1bmN0aW9uIGlvKHQscil7dmFyIG89dC5lbG07bihvLl9sZWF2ZUNiKSYmKG8uX2xlYXZlQ2IuY2FuY2VsbGVkPSEwLG8uX2xlYXZlQ2IoKSk7dmFyIGE9SHIodC5kYXRhLnRyYW5zaXRpb24pO2lmKCFlKGEpJiYhbihvLl9lbnRlckNiKSYmMT09PW8ubm9kZVR5cGUpe2Zvcih2YXIgcz1hLmNzcyxjPWEudHlwZSx1PWEuZW50ZXJDbGFzcyxsPWEuZW50ZXJUb0NsYXNzLHA9YS5lbnRlckFjdGl2ZUNsYXNzLGQ9YS5hcHBlYXJDbGFzcyx2PWEuYXBwZWFyVG9DbGFzcyxoPWEuYXBwZWFyQWN0aXZlQ2xhc3MsbT1hLmJlZm9yZUVudGVyLHk9YS5lbnRlcixnPWEuYWZ0ZXJFbnRlcixfPWEuZW50ZXJDYW5jZWxsZWQsYj1hLmJlZm9yZUFwcGVhcixDPWEuYXBwZWFyLCQ9YS5hZnRlckFwcGVhcix3PWEuYXBwZWFyQ2FuY2VsbGVkLEE9YS5kdXJhdGlvbix4PXFlLE89cWUuJHZub2RlO08mJk8ucGFyZW50Oyl4PU8uY29udGV4dCxPPU8ucGFyZW50O3ZhciBrPSF4Ll9pc01vdW50ZWR8fCF0LmlzUm9vdEluc2VydDtpZigha3x8Q3x8XCJcIj09PUMpe3ZhciBTPWsmJmQ/ZDp1LEU9ayYmaD9oOnAsaj1rJiZ2P3Y6bCxUPWsmJmJ8fG0sRD1rJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBDP0M6eSxOPWsmJiR8fGcsUD1rJiZ3fHxfLEw9ZihpKEEpP0EuZW50ZXI6QSksTT0hMSE9PXMmJiFxLEY9Y28oRCksUj1vLl9lbnRlckNiPUkoZnVuY3Rpb24oKXtNJiYoWXIobyxqKSxZcihvLEUpKSxSLmNhbmNlbGxlZD8oTSYmWXIobyxTKSxQJiZQKG8pKTpOJiZOKG8pLG8uX2VudGVyQ2I9bnVsbH0pO3QuZGF0YS5zaG93fHxuZSh0LFwiaW5zZXJ0XCIsZnVuY3Rpb24oKXt2YXIgZT1vLnBhcmVudE5vZGUsbj1lJiZlLl9wZW5kaW5nJiZlLl9wZW5kaW5nW3Qua2V5XTtuJiZuLnRhZz09PXQudGFnJiZuLmVsbS5fbGVhdmVDYiYmbi5lbG0uX2xlYXZlQ2IoKSxEJiZEKG8sUil9KSxUJiZUKG8pLE0mJihRcihvLFMpLFFyKG8sRSksSnIoZnVuY3Rpb24oKXtZcihvLFMpLFIuY2FuY2VsbGVkfHwoUXIobyxqKSxGfHwoc28oTCk/c2V0VGltZW91dChSLEwpOnRvKG8sYyxSKSkpfSkpLHQuZGF0YS5zaG93JiYociYmcigpLEQmJkQobyxSKSksTXx8Rnx8UigpfX19ZnVuY3Rpb24gYW8odCxyKXt2YXIgbz10LmVsbTtuKG8uX2VudGVyQ2IpJiYoby5fZW50ZXJDYi5jYW5jZWxsZWQ9ITAsby5fZW50ZXJDYigpKTt2YXIgYT1Icih0LmRhdGEudHJhbnNpdGlvbik7aWYoZShhKXx8MSE9PW8ubm9kZVR5cGUpcmV0dXJuIHIoKTtpZighbihvLl9sZWF2ZUNiKSl7dmFyIHM9YS5jc3MsYz1hLnR5cGUsdT1hLmxlYXZlQ2xhc3MsbD1hLmxlYXZlVG9DbGFzcyxwPWEubGVhdmVBY3RpdmVDbGFzcyxkPWEuYmVmb3JlTGVhdmUsdj1hLmxlYXZlLGg9YS5hZnRlckxlYXZlLG09YS5sZWF2ZUNhbmNlbGxlZCx5PWEuZGVsYXlMZWF2ZSxnPWEuZHVyYXRpb24sXz0hMSE9PXMmJiFxLGI9Y28odiksQz1mKGkoZyk/Zy5sZWF2ZTpnKSwkPW8uX2xlYXZlQ2I9SShmdW5jdGlvbigpe28ucGFyZW50Tm9kZSYmby5wYXJlbnROb2RlLl9wZW5kaW5nJiYoby5wYXJlbnROb2RlLl9wZW5kaW5nW3Qua2V5XT1udWxsKSxfJiYoWXIobyxsKSxZcihvLHApKSwkLmNhbmNlbGxlZD8oXyYmWXIobyx1KSxtJiZtKG8pKToocigpLGgmJmgobykpLG8uX2xlYXZlQ2I9bnVsbH0pO3k/eSh3KTp3KCl9ZnVuY3Rpb24gdygpeyQuY2FuY2VsbGVkfHwoIXQuZGF0YS5zaG93JiZvLnBhcmVudE5vZGUmJigoby5wYXJlbnROb2RlLl9wZW5kaW5nfHwoby5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbdC5rZXldPXQpLGQmJmQobyksXyYmKFFyKG8sdSksUXIobyxwKSxKcihmdW5jdGlvbigpe1lyKG8sdSksJC5jYW5jZWxsZWR8fChRcihvLGwpLGJ8fChzbyhDKT9zZXRUaW1lb3V0KCQsQyk6dG8obyxjLCQpKSl9KSksdiYmdihvLCQpLF98fGJ8fCQoKSl9fWZ1bmN0aW9uIHNvKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0JiYhaXNOYU4odCl9ZnVuY3Rpb24gY28odCl7aWYoZSh0KSlyZXR1cm4hMTt2YXIgcj10LmZucztyZXR1cm4gbihyKT9jbyhBcnJheS5pc0FycmF5KHIpP3JbMF06cik6KHQuX2xlbmd0aHx8dC5sZW5ndGgpPjF9ZnVuY3Rpb24gdW8odCxlKXshMCE9PWUuZGF0YS5zaG93JiZpbyhlKX12YXIgbG89ZnVuY3Rpb24odCl7dmFyIGksYSxzPXt9LGM9dC5tb2R1bGVzLHU9dC5ub2RlT3BzO2ZvcihpPTA7aTxRbi5sZW5ndGg7KytpKWZvcihzW1FuW2ldXT1bXSxhPTA7YTxjLmxlbmd0aDsrK2EpbihjW2FdW1FuW2ldXSkmJnNbUW5baV1dLnB1c2goY1thXVtRbltpXV0pO2Z1bmN0aW9uIGwodCl7dmFyIGU9dS5wYXJlbnROb2RlKHQpO24oZSkmJnUucmVtb3ZlQ2hpbGQoZSx0KX1mdW5jdGlvbiBmKHQsZSxvLGksYSxjLGwpe2lmKG4odC5lbG0pJiZuKGMpJiYodD1jW2xdPXZ0KHQpKSx0LmlzUm9vdEluc2VydD0hYSwhZnVuY3Rpb24odCxlLG8saSl7dmFyIGE9dC5kYXRhO2lmKG4oYSkpe3ZhciBjPW4odC5jb21wb25lbnRJbnN0YW5jZSkmJmEua2VlcEFsaXZlO2lmKG4oYT1hLmhvb2spJiZuKGE9YS5pbml0KSYmYSh0LCExKSxuKHQuY29tcG9uZW50SW5zdGFuY2UpKXJldHVybiBkKHQsZSksdihvLHQuZWxtLGkpLHIoYykmJmZ1bmN0aW9uKHQsZSxyLG8pe2Zvcih2YXIgaSxhPXQ7YS5jb21wb25lbnRJbnN0YW5jZTspaWYoYT1hLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSxuKGk9YS5kYXRhKSYmbihpPWkudHJhbnNpdGlvbikpe2ZvcihpPTA7aTxzLmFjdGl2YXRlLmxlbmd0aDsrK2kpcy5hY3RpdmF0ZVtpXShKbixhKTtlLnB1c2goYSk7YnJlYWt9dihyLHQuZWxtLG8pfSh0LGUsbyxpKSwhMH19KHQsZSxvLGkpKXt2YXIgZj10LmRhdGEscD10LmNoaWxkcmVuLG09dC50YWc7bihtKT8odC5lbG09dC5ucz91LmNyZWF0ZUVsZW1lbnROUyh0Lm5zLG0pOnUuY3JlYXRlRWxlbWVudChtLHQpLGcodCksaCh0LHAsZSksbihmKSYmeSh0LGUpLHYobyx0LmVsbSxpKSk6cih0LmlzQ29tbWVudCk/KHQuZWxtPXUuY3JlYXRlQ29tbWVudCh0LnRleHQpLHYobyx0LmVsbSxpKSk6KHQuZWxtPXUuY3JlYXRlVGV4dE5vZGUodC50ZXh0KSx2KG8sdC5lbG0saSkpfX1mdW5jdGlvbiBkKHQsZSl7bih0LmRhdGEucGVuZGluZ0luc2VydCkmJihlLnB1c2guYXBwbHkoZSx0LmRhdGEucGVuZGluZ0luc2VydCksdC5kYXRhLnBlbmRpbmdJbnNlcnQ9bnVsbCksdC5lbG09dC5jb21wb25lbnRJbnN0YW5jZS4kZWwsbSh0KT8oeSh0LGUpLGcodCkpOihabih0KSxlLnB1c2godCkpfWZ1bmN0aW9uIHYodCxlLHIpe24odCkmJihuKHIpP3UucGFyZW50Tm9kZShyKT09PXQmJnUuaW5zZXJ0QmVmb3JlKHQsZSxyKTp1LmFwcGVuZENoaWxkKHQsZSkpfWZ1bmN0aW9uIGgodCxlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDsrK3IpZihlW3JdLG4sdC5lbG0sbnVsbCwhMCxlLHIpO2Vsc2Ugbyh0LnRleHQpJiZ1LmFwcGVuZENoaWxkKHQuZWxtLHUuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHQudGV4dCkpKX1mdW5jdGlvbiBtKHQpe2Zvcig7dC5jb21wb25lbnRJbnN0YW5jZTspdD10LmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtyZXR1cm4gbih0LnRhZyl9ZnVuY3Rpb24geSh0LGUpe2Zvcih2YXIgcj0wO3I8cy5jcmVhdGUubGVuZ3RoOysrcilzLmNyZWF0ZVtyXShKbix0KTtuKGk9dC5kYXRhLmhvb2spJiYobihpLmNyZWF0ZSkmJmkuY3JlYXRlKEpuLHQpLG4oaS5pbnNlcnQpJiZlLnB1c2godCkpfWZ1bmN0aW9uIGcodCl7dmFyIGU7aWYobihlPXQuZm5TY29wZUlkKSl1LnNldFN0eWxlU2NvcGUodC5lbG0sZSk7ZWxzZSBmb3IodmFyIHI9dDtyOyluKGU9ci5jb250ZXh0KSYmbihlPWUuJG9wdGlvbnMuX3Njb3BlSWQpJiZ1LnNldFN0eWxlU2NvcGUodC5lbG0sZSkscj1yLnBhcmVudDtuKGU9cWUpJiZlIT09dC5jb250ZXh0JiZlIT09dC5mbkNvbnRleHQmJm4oZT1lLiRvcHRpb25zLl9zY29wZUlkKSYmdS5zZXRTdHlsZVNjb3BlKHQuZWxtLGUpfWZ1bmN0aW9uIF8odCxlLG4scixvLGkpe2Zvcig7cjw9bzsrK3IpZihuW3JdLGksdCxlLCExLG4scil9ZnVuY3Rpb24gYih0KXt2YXIgZSxyLG89dC5kYXRhO2lmKG4obykpZm9yKG4oZT1vLmhvb2spJiZuKGU9ZS5kZXN0cm95KSYmZSh0KSxlPTA7ZTxzLmRlc3Ryb3kubGVuZ3RoOysrZSlzLmRlc3Ryb3lbZV0odCk7aWYobihlPXQuY2hpbGRyZW4pKWZvcihyPTA7cjx0LmNoaWxkcmVuLmxlbmd0aDsrK3IpYih0LmNoaWxkcmVuW3JdKX1mdW5jdGlvbiBDKHQsZSxyKXtmb3IoO2U8PXI7KytlKXt2YXIgbz10W2VdO24obykmJihuKG8udGFnKT8oJChvKSxiKG8pKTpsKG8uZWxtKSl9fWZ1bmN0aW9uICQodCxlKXtpZihuKGUpfHxuKHQuZGF0YSkpe3ZhciByLG89cy5yZW1vdmUubGVuZ3RoKzE7Zm9yKG4oZSk/ZS5saXN0ZW5lcnMrPW86ZT1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oKXswPT0tLW4ubGlzdGVuZXJzJiZsKHQpfXJldHVybiBuLmxpc3RlbmVycz1lLG59KHQuZWxtLG8pLG4ocj10LmNvbXBvbmVudEluc3RhbmNlKSYmbihyPXIuX3Zub2RlKSYmbihyLmRhdGEpJiYkKHIsZSkscj0wO3I8cy5yZW1vdmUubGVuZ3RoOysrcilzLnJlbW92ZVtyXSh0LGUpO24ocj10LmRhdGEuaG9vaykmJm4ocj1yLnJlbW92ZSk/cih0LGUpOmUoKX1lbHNlIGwodC5lbG0pfWZ1bmN0aW9uIHcodCxlLHIsbyl7Zm9yKHZhciBpPXI7aTxvO2krKyl7dmFyIGE9ZVtpXTtpZihuKGEpJiZZbih0LGEpKXJldHVybiBpfX1mdW5jdGlvbiBBKHQsbyxpLGEsYyxsKXtpZih0IT09byl7bihvLmVsbSkmJm4oYSkmJihvPWFbY109dnQobykpO3ZhciBwPW8uZWxtPXQuZWxtO2lmKHIodC5pc0FzeW5jUGxhY2Vob2xkZXIpKW4oby5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpP2sodC5lbG0sbyxpKTpvLmlzQXN5bmNQbGFjZWhvbGRlcj0hMDtlbHNlIGlmKHIoby5pc1N0YXRpYykmJnIodC5pc1N0YXRpYykmJm8ua2V5PT09dC5rZXkmJihyKG8uaXNDbG9uZWQpfHxyKG8uaXNPbmNlKSkpby5jb21wb25lbnRJbnN0YW5jZT10LmNvbXBvbmVudEluc3RhbmNlO2Vsc2V7dmFyIGQsdj1vLmRhdGE7bih2KSYmbihkPXYuaG9vaykmJm4oZD1kLnByZXBhdGNoKSYmZCh0LG8pO3ZhciBoPXQuY2hpbGRyZW4seT1vLmNoaWxkcmVuO2lmKG4odikmJm0obykpe2ZvcihkPTA7ZDxzLnVwZGF0ZS5sZW5ndGg7KytkKXMudXBkYXRlW2RdKHQsbyk7bihkPXYuaG9vaykmJm4oZD1kLnVwZGF0ZSkmJmQodCxvKX1lKG8udGV4dCk/bihoKSYmbih5KT9oIT09eSYmZnVuY3Rpb24odCxyLG8saSxhKXtmb3IodmFyIHMsYyxsLHA9MCxkPTAsdj1yLmxlbmd0aC0xLGg9clswXSxtPXJbdl0seT1vLmxlbmd0aC0xLGc9b1swXSxiPW9beV0sJD0hYTtwPD12JiZkPD15OyllKGgpP2g9clsrK3BdOmUobSk/bT1yWy0tdl06WW4oaCxnKT8oQShoLGcsaSxvLGQpLGg9clsrK3BdLGc9b1srK2RdKTpZbihtLGIpPyhBKG0sYixpLG8seSksbT1yWy0tdl0sYj1vWy0teV0pOlluKGgsYik/KEEoaCxiLGksbyx5KSwkJiZ1Lmluc2VydEJlZm9yZSh0LGguZWxtLHUubmV4dFNpYmxpbmcobS5lbG0pKSxoPXJbKytwXSxiPW9bLS15XSk6WW4obSxnKT8oQShtLGcsaSxvLGQpLCQmJnUuaW5zZXJ0QmVmb3JlKHQsbS5lbG0saC5lbG0pLG09clstLXZdLGc9b1srK2RdKTooZShzKSYmKHM9dHIocixwLHYpKSxlKGM9bihnLmtleSk/c1tnLmtleV06dyhnLHIscCx2KSk/ZihnLGksdCxoLmVsbSwhMSxvLGQpOlluKGw9cltjXSxnKT8oQShsLGcsaSxvLGQpLHJbY109dm9pZCAwLCQmJnUuaW5zZXJ0QmVmb3JlKHQsbC5lbG0saC5lbG0pKTpmKGcsaSx0LGguZWxtLCExLG8sZCksZz1vWysrZF0pO3A+dj9fKHQsZShvW3krMV0pP251bGw6b1t5KzFdLmVsbSxvLGQseSxpKTpkPnkmJkMocixwLHYpfShwLGgseSxpLGwpOm4oeSk/KG4odC50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChwLFwiXCIpLF8ocCxudWxsLHksMCx5Lmxlbmd0aC0xLGkpKTpuKGgpP0MoaCwwLGgubGVuZ3RoLTEpOm4odC50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChwLFwiXCIpOnQudGV4dCE9PW8udGV4dCYmdS5zZXRUZXh0Q29udGVudChwLG8udGV4dCksbih2KSYmbihkPXYuaG9vaykmJm4oZD1kLnBvc3RwYXRjaCkmJmQodCxvKX19fWZ1bmN0aW9uIHgodCxlLG8pe2lmKHIobykmJm4odC5wYXJlbnQpKXQucGFyZW50LmRhdGEucGVuZGluZ0luc2VydD1lO2Vsc2UgZm9yKHZhciBpPTA7aTxlLmxlbmd0aDsrK2kpZVtpXS5kYXRhLmhvb2suaW5zZXJ0KGVbaV0pfXZhciBPPXAoXCJhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXlcIik7ZnVuY3Rpb24gayh0LGUsbyxpKXt2YXIgYSxzPWUudGFnLGM9ZS5kYXRhLHU9ZS5jaGlsZHJlbjtpZihpPWl8fGMmJmMucHJlLGUuZWxtPXQscihlLmlzQ29tbWVudCkmJm4oZS5hc3luY0ZhY3RvcnkpKXJldHVybiBlLmlzQXN5bmNQbGFjZWhvbGRlcj0hMCwhMDtpZihuKGMpJiYobihhPWMuaG9vaykmJm4oYT1hLmluaXQpJiZhKGUsITApLG4oYT1lLmNvbXBvbmVudEluc3RhbmNlKSkpcmV0dXJuIGQoZSxvKSwhMDtpZihuKHMpKXtpZihuKHUpKWlmKHQuaGFzQ2hpbGROb2RlcygpKWlmKG4oYT1jKSYmbihhPWEuZG9tUHJvcHMpJiZuKGE9YS5pbm5lckhUTUwpKXtpZihhIT09dC5pbm5lckhUTUwpcmV0dXJuITF9ZWxzZXtmb3IodmFyIGw9ITAsZj10LmZpcnN0Q2hpbGQscD0wO3A8dS5sZW5ndGg7cCsrKXtpZighZnx8IWsoZix1W3BdLG8saSkpe2w9ITE7YnJlYWt9Zj1mLm5leHRTaWJsaW5nfWlmKCFsfHxmKXJldHVybiExfWVsc2UgaChlLHUsbyk7aWYobihjKSl7dmFyIHY9ITE7Zm9yKHZhciBtIGluIGMpaWYoIU8obSkpe3Y9ITAseShlLG8pO2JyZWFrfSF2JiZjLmNsYXNzJiZRdChjLmNsYXNzKX19ZWxzZSB0LmRhdGEhPT1lLnRleHQmJih0LmRhdGE9ZS50ZXh0KTtyZXR1cm4hMH1yZXR1cm4gZnVuY3Rpb24odCxvLGksYSl7aWYoIWUobykpe3ZhciBjLGw9ITEscD1bXTtpZihlKHQpKWw9ITAsZihvLHApO2Vsc2V7dmFyIGQ9bih0Lm5vZGVUeXBlKTtpZighZCYmWW4odCxvKSlBKHQsbyxwLG51bGwsbnVsbCxhKTtlbHNle2lmKGQpe2lmKDE9PT10Lm5vZGVUeXBlJiZ0Lmhhc0F0dHJpYnV0ZShEKSYmKHQucmVtb3ZlQXR0cmlidXRlKEQpLGk9ITApLHIoaSkmJmsodCxvLHApKXJldHVybiB4KG8scCwhMCksdDtjPXQsdD1uZXcgbHQodS50YWdOYW1lKGMpLnRvTG93ZXJDYXNlKCkse30sW10sdm9pZCAwLGMpfXZhciB2PXQuZWxtLGg9dS5wYXJlbnROb2RlKHYpO2lmKGYobyxwLHYuX2xlYXZlQ2I/bnVsbDpoLHUubmV4dFNpYmxpbmcodikpLG4oby5wYXJlbnQpKWZvcih2YXIgeT1vLnBhcmVudCxnPW0obyk7eTspe2Zvcih2YXIgXz0wO188cy5kZXN0cm95Lmxlbmd0aDsrK18pcy5kZXN0cm95W19dKHkpO2lmKHkuZWxtPW8uZWxtLGcpe2Zvcih2YXIgJD0wOyQ8cy5jcmVhdGUubGVuZ3RoOysrJClzLmNyZWF0ZVskXShKbix5KTt2YXIgdz15LmRhdGEuaG9vay5pbnNlcnQ7aWYody5tZXJnZWQpZm9yKHZhciBPPTE7Tzx3LmZucy5sZW5ndGg7TysrKXcuZm5zW09dKCl9ZWxzZSBabih5KTt5PXkucGFyZW50fW4oaCk/QyhbdF0sMCwwKTpuKHQudGFnKSYmYih0KX19cmV0dXJuIHgobyxwLGwpLG8uZWxtfW4odCkmJmIodCl9fSh7bm9kZU9wczpYbixtb2R1bGVzOltmcix2cix3cixPcixNcixIP3tjcmVhdGU6dW8sYWN0aXZhdGU6dW8scmVtb3ZlOmZ1bmN0aW9uKHQsZSl7ITAhPT10LmRhdGEuc2hvdz9hbyh0LGUpOmUoKX19Ont9XS5jb25jYXQoc3IpfSk7cSYmZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLGZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDt0JiZ0LnZtb2RlbCYmX28odCxcImlucHV0XCIpfSk7dmFyIGZvPXtpbnNlcnRlZDpmdW5jdGlvbih0LGUsbixyKXtcInNlbGVjdFwiPT09bi50YWc/KHIuZWxtJiYhci5lbG0uX3ZPcHRpb25zP25lKG4sXCJwb3N0cGF0Y2hcIixmdW5jdGlvbigpe2ZvLmNvbXBvbmVudFVwZGF0ZWQodCxlLG4pfSk6cG8odCxlLG4uY29udGV4dCksdC5fdk9wdGlvbnM9W10ubWFwLmNhbGwodC5vcHRpb25zLG1vKSk6KFwidGV4dGFyZWFcIj09PW4udGFnfHxLbih0LnR5cGUpKSYmKHQuX3ZNb2RpZmllcnM9ZS5tb2RpZmllcnMsZS5tb2RpZmllcnMubGF6eXx8KHQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBvc2l0aW9uc3RhcnRcIix5byksdC5hZGRFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25lbmRcIixnbyksdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZ28pLHEmJih0LnZtb2RlbD0hMCkpKX0sY29tcG9uZW50VXBkYXRlZDpmdW5jdGlvbih0LGUsbil7aWYoXCJzZWxlY3RcIj09PW4udGFnKXtwbyh0LGUsbi5jb250ZXh0KTt2YXIgcj10Ll92T3B0aW9ucyxvPXQuX3ZPcHRpb25zPVtdLm1hcC5jYWxsKHQub3B0aW9ucyxtbyk7aWYoby5zb21lKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIWoodCxyW2VdKX0pKSh0Lm11bHRpcGxlP2UudmFsdWUuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gaG8odCxvKX0pOmUudmFsdWUhPT1lLm9sZFZhbHVlJiZobyhlLnZhbHVlLG8pKSYmX28odCxcImNoYW5nZVwiKX19fTtmdW5jdGlvbiBwbyh0LGUsbil7dm8odCxlLG4pLChXfHxLKSYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZvKHQsZSxuKX0sMCl9ZnVuY3Rpb24gdm8odCxlLG4pe3ZhciByPWUudmFsdWUsbz10Lm11bHRpcGxlO2lmKCFvfHxBcnJheS5pc0FycmF5KHIpKXtmb3IodmFyIGksYSxzPTAsYz10Lm9wdGlvbnMubGVuZ3RoO3M8YztzKyspaWYoYT10Lm9wdGlvbnNbc10sbylpPVQocixtbyhhKSk+LTEsYS5zZWxlY3RlZCE9PWkmJihhLnNlbGVjdGVkPWkpO2Vsc2UgaWYoaihtbyhhKSxyKSlyZXR1cm4gdm9pZCh0LnNlbGVjdGVkSW5kZXghPT1zJiYodC5zZWxlY3RlZEluZGV4PXMpKTtvfHwodC5zZWxlY3RlZEluZGV4PS0xKX19ZnVuY3Rpb24gaG8odCxlKXtyZXR1cm4gZS5ldmVyeShmdW5jdGlvbihlKXtyZXR1cm4haihlLHQpfSl9ZnVuY3Rpb24gbW8odCl7cmV0dXJuXCJfdmFsdWVcImluIHQ/dC5fdmFsdWU6dC52YWx1ZX1mdW5jdGlvbiB5byh0KXt0LnRhcmdldC5jb21wb3Npbmc9ITB9ZnVuY3Rpb24gZ28odCl7dC50YXJnZXQuY29tcG9zaW5nJiYodC50YXJnZXQuY29tcG9zaW5nPSExLF9vKHQudGFyZ2V0LFwiaW5wdXRcIikpfWZ1bmN0aW9uIF9vKHQsZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpO24uaW5pdEV2ZW50KGUsITAsITApLHQuZGlzcGF0Y2hFdmVudChuKX1mdW5jdGlvbiBibyh0KXtyZXR1cm4hdC5jb21wb25lbnRJbnN0YW5jZXx8dC5kYXRhJiZ0LmRhdGEudHJhbnNpdGlvbj90OmJvKHQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKX12YXIgQ289e21vZGVsOmZvLHNob3c6e2JpbmQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPWUudmFsdWUsbz0obj1ibyhuKSkuZGF0YSYmbi5kYXRhLnRyYW5zaXRpb24saT10Ll9fdk9yaWdpbmFsRGlzcGxheT1cIm5vbmVcIj09PXQuc3R5bGUuZGlzcGxheT9cIlwiOnQuc3R5bGUuZGlzcGxheTtyJiZvPyhuLmRhdGEuc2hvdz0hMCxpbyhuLGZ1bmN0aW9uKCl7dC5zdHlsZS5kaXNwbGF5PWl9KSk6dC5zdHlsZS5kaXNwbGF5PXI/aTpcIm5vbmVcIn0sdXBkYXRlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1lLnZhbHVlOyFyIT0hZS5vbGRWYWx1ZSYmKChuPWJvKG4pKS5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbj8obi5kYXRhLnNob3c9ITAscj9pbyhuLGZ1bmN0aW9uKCl7dC5zdHlsZS5kaXNwbGF5PXQuX192T3JpZ2luYWxEaXNwbGF5fSk6YW8obixmdW5jdGlvbigpe3Quc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0pKTp0LnN0eWxlLmRpc3BsYXk9cj90Ll9fdk9yaWdpbmFsRGlzcGxheTpcIm5vbmVcIil9LHVuYmluZDpmdW5jdGlvbih0LGUsbixyLG8pe298fCh0LnN0eWxlLmRpc3BsYXk9dC5fX3ZPcmlnaW5hbERpc3BsYXkpfX19LCRvPXtuYW1lOlN0cmluZyxhcHBlYXI6Qm9vbGVhbixjc3M6Qm9vbGVhbixtb2RlOlN0cmluZyx0eXBlOlN0cmluZyxlbnRlckNsYXNzOlN0cmluZyxsZWF2ZUNsYXNzOlN0cmluZyxlbnRlclRvQ2xhc3M6U3RyaW5nLGxlYXZlVG9DbGFzczpTdHJpbmcsZW50ZXJBY3RpdmVDbGFzczpTdHJpbmcsbGVhdmVBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyQ2xhc3M6U3RyaW5nLGFwcGVhckFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJUb0NsYXNzOlN0cmluZyxkdXJhdGlvbjpbTnVtYmVyLFN0cmluZyxPYmplY3RdfTtmdW5jdGlvbiB3byh0KXt2YXIgZT10JiZ0LmNvbXBvbmVudE9wdGlvbnM7cmV0dXJuIGUmJmUuQ3Rvci5vcHRpb25zLmFic3RyYWN0P3dvKEhlKGUuY2hpbGRyZW4pKTp0fWZ1bmN0aW9uIEFvKHQpe3ZhciBlPXt9LG49dC4kb3B0aW9ucztmb3IodmFyIHIgaW4gbi5wcm9wc0RhdGEpZVtyXT10W3JdO3ZhciBvPW4uX3BhcmVudExpc3RlbmVycztmb3IodmFyIGkgaW4gbyllW18oaSldPW9baV07cmV0dXJuIGV9ZnVuY3Rpb24geG8odCxlKXtpZigvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KGUudGFnKSlyZXR1cm4gdChcImtlZXAtYWxpdmVcIix7cHJvcHM6ZS5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YX0pfXZhciBPbz1mdW5jdGlvbih0KXtyZXR1cm4gdC50YWd8fFVlKHQpfSxrbz1mdW5jdGlvbih0KXtyZXR1cm5cInNob3dcIj09PXQubmFtZX0sU289e25hbWU6XCJ0cmFuc2l0aW9uXCIscHJvcHM6JG8sYWJzdHJhY3Q6ITAscmVuZGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLiRzbG90cy5kZWZhdWx0O2lmKG4mJihuPW4uZmlsdGVyKE9vKSkubGVuZ3RoKXt2YXIgcj10aGlzLm1vZGUsaT1uWzBdO2lmKGZ1bmN0aW9uKHQpe2Zvcig7dD10LnBhcmVudDspaWYodC5kYXRhLnRyYW5zaXRpb24pcmV0dXJuITB9KHRoaXMuJHZub2RlKSlyZXR1cm4gaTt2YXIgYT13byhpKTtpZighYSlyZXR1cm4gaTtpZih0aGlzLl9sZWF2aW5nKXJldHVybiB4byh0LGkpO3ZhciBzPVwiX190cmFuc2l0aW9uLVwiK3RoaXMuX3VpZCtcIi1cIjthLmtleT1udWxsPT1hLmtleT9hLmlzQ29tbWVudD9zK1wiY29tbWVudFwiOnMrYS50YWc6byhhLmtleSk/MD09PVN0cmluZyhhLmtleSkuaW5kZXhPZihzKT9hLmtleTpzK2Eua2V5OmEua2V5O3ZhciBjPShhLmRhdGF8fChhLmRhdGE9e30pKS50cmFuc2l0aW9uPUFvKHRoaXMpLHU9dGhpcy5fdm5vZGUsbD13byh1KTtpZihhLmRhdGEuZGlyZWN0aXZlcyYmYS5kYXRhLmRpcmVjdGl2ZXMuc29tZShrbykmJihhLmRhdGEuc2hvdz0hMCksbCYmbC5kYXRhJiYhZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5rZXk9PT10LmtleSYmZS50YWc9PT10LnRhZ30oYSxsKSYmIVVlKGwpJiYoIWwuY29tcG9uZW50SW5zdGFuY2V8fCFsLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpKXt2YXIgZj1sLmRhdGEudHJhbnNpdGlvbj14KHt9LGMpO2lmKFwib3V0LWluXCI9PT1yKXJldHVybiB0aGlzLl9sZWF2aW5nPSEwLG5lKGYsXCJhZnRlckxlYXZlXCIsZnVuY3Rpb24oKXtlLl9sZWF2aW5nPSExLGUuJGZvcmNlVXBkYXRlKCl9KSx4byh0LGkpO2lmKFwiaW4tb3V0XCI9PT1yKXtpZihVZShhKSlyZXR1cm4gdTt2YXIgcCxkPWZ1bmN0aW9uKCl7cCgpfTtuZShjLFwiYWZ0ZXJFbnRlclwiLGQpLG5lKGMsXCJlbnRlckNhbmNlbGxlZFwiLGQpLG5lKGYsXCJkZWxheUxlYXZlXCIsZnVuY3Rpb24odCl7cD10fSl9fXJldHVybiBpfX19LEVvPXgoe3RhZzpTdHJpbmcsbW92ZUNsYXNzOlN0cmluZ30sJG8pO2Z1bmN0aW9uIGpvKHQpe3QuZWxtLl9tb3ZlQ2ImJnQuZWxtLl9tb3ZlQ2IoKSx0LmVsbS5fZW50ZXJDYiYmdC5lbG0uX2VudGVyQ2IoKX1mdW5jdGlvbiBUbyh0KXt0LmRhdGEubmV3UG9zPXQuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfWZ1bmN0aW9uIElvKHQpe3ZhciBlPXQuZGF0YS5wb3Msbj10LmRhdGEubmV3UG9zLHI9ZS5sZWZ0LW4ubGVmdCxvPWUudG9wLW4udG9wO2lmKHJ8fG8pe3QuZGF0YS5tb3ZlZD0hMDt2YXIgaT10LmVsbS5zdHlsZTtpLnRyYW5zZm9ybT1pLldlYmtpdFRyYW5zZm9ybT1cInRyYW5zbGF0ZShcIityK1wicHgsXCIrbytcInB4KVwiLGkudHJhbnNpdGlvbkR1cmF0aW9uPVwiMHNcIn19ZGVsZXRlIEVvLm1vZGU7dmFyIERvPXtUcmFuc2l0aW9uOlNvLFRyYW5zaXRpb25Hcm91cDp7cHJvcHM6RW8sYmVmb3JlTW91bnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5fdXBkYXRlO3RoaXMuX3VwZGF0ZT1mdW5jdGlvbihuLHIpe3ZhciBvPUtlKHQpO3QuX19wYXRjaF9fKHQuX3Zub2RlLHQua2VwdCwhMSwhMCksdC5fdm5vZGU9dC5rZXB0LG8oKSxlLmNhbGwodCxuLHIpfX0scmVuZGVyOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRhZ3x8dGhpcy4kdm5vZGUuZGF0YS50YWd8fFwic3BhblwiLG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXRoaXMucHJldkNoaWxkcmVuPXRoaXMuY2hpbGRyZW4sbz10aGlzLiRzbG90cy5kZWZhdWx0fHxbXSxpPXRoaXMuY2hpbGRyZW49W10sYT1Bbyh0aGlzKSxzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBjPW9bc107Yy50YWcmJm51bGwhPWMua2V5JiYwIT09U3RyaW5nKGMua2V5KS5pbmRleE9mKFwiX192bGlzdFwiKSYmKGkucHVzaChjKSxuW2Mua2V5XT1jLChjLmRhdGF8fChjLmRhdGE9e30pKS50cmFuc2l0aW9uPWEpfWlmKHIpe2Zvcih2YXIgdT1bXSxsPVtdLGY9MDtmPHIubGVuZ3RoO2YrKyl7dmFyIHA9cltmXTtwLmRhdGEudHJhbnNpdGlvbj1hLHAuZGF0YS5wb3M9cC5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbltwLmtleV0/dS5wdXNoKHApOmwucHVzaChwKX10aGlzLmtlcHQ9dChlLG51bGwsdSksdGhpcy5yZW1vdmVkPWx9cmV0dXJuIHQoZSxudWxsLGkpfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wcmV2Q2hpbGRyZW4sZT10aGlzLm1vdmVDbGFzc3x8KHRoaXMubmFtZXx8XCJ2XCIpK1wiLW1vdmVcIjt0Lmxlbmd0aCYmdGhpcy5oYXNNb3ZlKHRbMF0uZWxtLGUpJiYodC5mb3JFYWNoKGpvKSx0LmZvckVhY2goVG8pLHQuZm9yRWFjaChJbyksdGhpcy5fcmVmbG93PWRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0LHQuZm9yRWFjaChmdW5jdGlvbih0KXtpZih0LmRhdGEubW92ZWQpe3ZhciBuPXQuZWxtLHI9bi5zdHlsZTtRcihuLGUpLHIudHJhbnNmb3JtPXIuV2Via2l0VHJhbnNmb3JtPXIudHJhbnNpdGlvbkR1cmF0aW9uPVwiXCIsbi5hZGRFdmVudExpc3RlbmVyKEtyLG4uX21vdmVDYj1mdW5jdGlvbiB0KHIpe3ImJnIudGFyZ2V0IT09bnx8ciYmIS90cmFuc2Zvcm0kLy50ZXN0KHIucHJvcGVydHlOYW1lKXx8KG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihLcix0KSxuLl9tb3ZlQ2I9bnVsbCxZcihuLGUpKX0pfX0pKX0sbWV0aG9kczp7aGFzTW92ZTpmdW5jdGlvbih0LGUpe2lmKCFWcilyZXR1cm4hMTtpZih0aGlzLl9oYXNNb3ZlKXJldHVybiB0aGlzLl9oYXNNb3ZlO3ZhciBuPXQuY2xvbmVOb2RlKCk7dC5fdHJhbnNpdGlvbkNsYXNzZXMmJnQuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24odCl7VXIobix0KX0pLFJyKG4sZSksbi5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuJGVsLmFwcGVuZENoaWxkKG4pO3ZhciByPW5vKG4pO3JldHVybiB0aGlzLiRlbC5yZW1vdmVDaGlsZChuKSx0aGlzLl9oYXNNb3ZlPXIuaGFzVHJhbnNmb3JtfX19fTtibi5jb25maWcubXVzdFVzZVByb3A9ZnVuY3Rpb24odCxlLG4pe3JldHVyblwidmFsdWVcIj09PW4mJkVuKHQpJiZcImJ1dHRvblwiIT09ZXx8XCJzZWxlY3RlZFwiPT09biYmXCJvcHRpb25cIj09PXR8fFwiY2hlY2tlZFwiPT09biYmXCJpbnB1dFwiPT09dHx8XCJtdXRlZFwiPT09biYmXCJ2aWRlb1wiPT09dH0sYm4uY29uZmlnLmlzUmVzZXJ2ZWRUYWc9V24sYm4uY29uZmlnLmlzUmVzZXJ2ZWRBdHRyPVNuLGJuLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHpuKHQpP1wic3ZnXCI6XCJtYXRoXCI9PT10P1wibWF0aFwiOnZvaWQgMH0sYm4uY29uZmlnLmlzVW5rbm93bkVsZW1lbnQ9ZnVuY3Rpb24odCl7aWYoIUgpcmV0dXJuITA7aWYoV24odCkpcmV0dXJuITE7aWYodD10LnRvTG93ZXJDYXNlKCksbnVsbCE9cW5bdF0pcmV0dXJuIHFuW3RdO3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7cmV0dXJuIHQuaW5kZXhPZihcIi1cIik+LTE/cW5bdF09ZS5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnR8fGUuY29uc3RydWN0b3I9PT13aW5kb3cuSFRNTEVsZW1lbnQ6cW5bdF09L0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlLnRvU3RyaW5nKCkpfSx4KGJuLm9wdGlvbnMuZGlyZWN0aXZlcyxDbykseChibi5vcHRpb25zLmNvbXBvbmVudHMsRG8pLGJuLnByb3RvdHlwZS5fX3BhdGNoX189SD9sbzprLGJuLnByb3RvdHlwZS4kbW91bnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZhciByO3JldHVybiB0LiRlbD1lLHQuJG9wdGlvbnMucmVuZGVyfHwodC4kb3B0aW9ucy5yZW5kZXI9cHQpLFplKHQsXCJiZWZvcmVNb3VudFwiKSxyPWZ1bmN0aW9uKCl7dC5fdXBkYXRlKHQuX3JlbmRlcigpLG4pfSxuZXcgdW4odCxyLGsse2JlZm9yZTpmdW5jdGlvbigpe3QuX2lzTW91bnRlZCYmIXQuX2lzRGVzdHJveWVkJiZaZSh0LFwiYmVmb3JlVXBkYXRlXCIpfX0sITApLG49ITEsbnVsbD09dC4kdm5vZGUmJih0Ll9pc01vdW50ZWQ9ITAsWmUodCxcIm1vdW50ZWRcIikpLHR9KHRoaXMsdD10JiZIP2Z1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpO3JldHVybiBlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpfXJldHVybiB0fSh0KTp2b2lkIDAsZSl9LEgmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtMLmRldnRvb2xzJiZ0dCYmdHQuZW1pdChcImluaXRcIixibil9LDApLG1vZHVsZS5leHBvcnRzPWJuOyIsInZhciBpbnNlcnRlZCA9IGV4cG9ydHMuY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiBub29wICgpIHt9XG5cbmV4cG9ydHMuaW5zZXJ0ID0gZnVuY3Rpb24gKGNzcykge1xuICBpZiAoaW5zZXJ0ZWRbY3NzXSkgcmV0dXJuIG5vb3BcbiAgaW5zZXJ0ZWRbY3NzXSA9IHRydWVcblxuICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgZWxlbS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKVxuXG4gIGlmICgndGV4dENvbnRlbnQnIGluIGVsZW0pIHtcbiAgICBlbGVtLnRleHRDb250ZW50ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgZWxlbS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgfVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoZWxlbSlcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLnJlbW92ZUNoaWxkKGVsZW0pXG4gICAgaW5zZXJ0ZWRbY3NzXSA9IGZhbHNlXG4gIH1cbn1cbiIsImNvbnN0IEFQSSA9IGZ1bmN0aW9uKHtzZXJ2aWNlLCBwbHVnaW59ID0ge30pIHtcbiAgdGhpcy5hZGRGb3JtQ29tcG9uZW50cyA9IGZ1bmN0aW9uKHtsYXllcklkLCBjb21wb25lbnRzPVtdfT0ge30pIHtcbiAgICBzZXJ2aWNlLmFkZEZvcm1Db21wb25lbnRzKHtcbiAgICAgIGxheWVySWQsXG4gICAgICBjb21wb25lbnRzXG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5nZXRFZGl0YWJsZUxheWVyc0lkID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc2VydmljZS5nZXRFZGl0YWJsZUxheWVycygpKTtcbiAgfTtcblxuICB0aGlzLmdldFNlc3Npb24gPSBmdW5jdGlvbihvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gc2VydmljZS5nZXRTZXNzaW9uKG9wdGlvbnMpXG4gIH07XG5cbiAgdGhpcy5nZXRGZWF0dXJlID0gZnVuY3Rpb24ob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0RmVhdHVyZShvcHRpb25zKVxuICB9O1xuXG4gIC8qKlxuICAgKiBNZXRob3MgdG8gc3Vic2NyaXZlIGVkaXRpbmcgZXZlbnRcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqIEBwYXJhbSBmbmNcbiAgICogQHJldHVybnMge1Byb21pc2U8UHVzaFN1YnNjcmlwdGlvbj59XG4gICAqL1xuICB0aGlzLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbmMpIHtcbiAgICByZXR1cm4gc2VydmljZS5zdWJzY3JpYmUoZXZlbnQsIGZuYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byB1bnN1YnNjcml2ZSBlZGl0aW5nIGV2ZW50XG4gICAqIEBwYXJhbSBldmVudFxuICAgKiBAcGFyYW0gZm5jXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFB1c2hTdWJzY3JpcHRpb24+fVxuICAgKi9cbiAgdGhpcy51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbmMpIHtcbiAgICByZXR1cm4gc2VydmljZS51bnN1YnNjcmliZShldmVudCwgZm5jKTtcbiAgfTtcblxuICAvKipcbiAgICogU2hvdyBlZGl0aW5nIHBhbmVsXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICB0aGlzLnNob3dQYW5lbCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pe1xuICAgIGNvbnN0IHt0b29sYm94ZXN9ID0gb3B0aW9ucztcbiAgICB0b29sYm94ZXMgJiYgQXJyYXkuaXNBcnJheSh0b29sYm94ZXMpICYmIHNlcnZpY2UuZ2V0VG9vbEJveGVzKCkuZm9yRWFjaCh0b29sYm94ID0+IHRvb2xib3guc2V0U2hvdyh0b29sYm94ZXMuaW5kZXhPZih0b29sYm94LmdldElkKCkpICE9PSAtMSkpO1xuICAgIHNlcnZpY2UuZ2V0UGx1Z2luKCkuc2hvd0VkaXRpbmdQYW5lbChvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogTWV0aG9kIHRvIGhpZGUgRWRpdGluZyBQYW5lbFxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgdGhpcy5oaWRlUGFuZWwgPSBmdW5jdGlvbihvcHRpb25zPXt9KXtcbiAgICBzZXJ2aWNlLmdldFBsdWdpbigpLmhpZGVFZGl0aW5nUGFuZWwob3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybiBUb29sYnggYnkgaWQgaWYgZXhpc3RcbiAgICogQHBhcmFtIHRvb2xib3hJZFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHRoaXMuZ2V0VG9vbEJveEJ5SWQgPSBmdW5jdGlvbih0b29sYm94SWQpe1xuICAgIHJldHVybiBzZXJ2aWNlLmdldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBzdGFydCBlZGl0aW5nIGFwaVxuICAgKiBAcGFyYW0gbGF5ZXJJZFxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx1bmtub3duPn1cbiAgICovXG4gIHRoaXMuc3RhcnRFZGl0aW5nID0gZnVuY3Rpb24obGF5ZXJJZCwgb3B0aW9ucz17fSwgZGF0YT1mYWxzZSl7XG4gICAgY29uc3Qge3Rvb2xzLCBmZWF0dXJlLCBzZWxlY3RlZD10cnVlLCB0aXRsZSwgZGlzYWJsZW1hcGNvbnRyb2xzPWZhbHNlfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+e1xuICAgICAgLy8gZ2V0IHRvb2xib3ggcmVsYXRlZCB0byBsYXllciBpZFxuICAgICAgY29uc3QgdG9vbGJveCA9IHNlcnZpY2UuZ2V0VG9vbEJveEJ5SWQobGF5ZXJJZCk7XG4gICAgICAvL3NldHNlbGVjdGVkXG4gICAgICBpZiAodG9vbGJveCkge1xuICAgICAgICB0b29sYm94LnNldFNlbGVjdGVkKHNlbGVjdGVkKTtcbiAgICAgICAgLy8gc2V0IHNlbGV0Y3RlZCB0b29sYm94XG4gICAgICAgIHNlbGVjdGVkICYmIHNlcnZpY2Uuc2V0U2VsZWN0ZWRUb29sYm94KHRvb2xib3gpO1xuICAgICAgICB0aXRsZSAmJiB0b29sYm94LnNldFRpdGxlKHRpdGxlKTtcbiAgICAgICAgLy8gc3RhcnQgZWRpdGluZyB0b29sYm94IChvcHRpb25zIGNvbnRhaW4gYWxzbyBmaWx0ZXIgdHlwZSlcbiAgICAgICAgdG9vbGJveC5zdGFydChvcHRpb25zKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgIC8vZGlzYWJsZW1hcGNvbnRyb2xzIGluIGNvbmZsaWN0XG4gICAgICAgICAgZGlzYWJsZW1hcGNvbnRyb2xzICYmIHNlcnZpY2UuZGlzYWJsZU1hcENvbnRyb2xzQ29uZmxpY3QodHJ1ZSk7XG4gICAgICAgICAgLy9vcHRzIGNvbnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgc3RhcnQgZWRpdGluZyBoYXMgZmVhdHVyZXMgbG9hZGVkXG4gICAgICAgICAgZGF0YSA/IHJlc29sdmUoe1xuICAgICAgICAgICAgdG9vbGJveCxcbiAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICB9KSA6IHJlc29sdmUodG9vbGJveCk7XG4gICAgICAgIH0pLmZhaWwoZXJyPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgcmVqZWN0KCk7XG4gICAgfSlcbiAgfTtcbiAgXG4gIC8qXG4gICogU2F2ZSBtb2RlIGVkaXRpbmcgOiBcbiAgKiBkZWZhdWx0OiBlYWNoIGNoYW5nZSBpcyBzYXZlIHRlbXBvcmFyeS4gUHJlc3MgZmxvcHB5IG9yIHN0b29wIGVkaXRpbmcgdG9vbGJveCB0byBzYXZlIGRhdGEgcGVybWFuZW50bHkgb24gZGF0YWJhc2VcbiAgKiBhdXRvc2F2ZTogZWFjaCBjaGFuZ2Ugd2UgYWhlIHRvIGNvbW1pdFxuICAqICovXG4gIHRoaXMuc2V0U2F2ZUNvbmZpZyA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pe1xuICAgIHNlcnZpY2Uuc2V0U2F2ZUNvbmZpZyhvcHRpb25zKTtcbiAgfTtcblxuICB0aGlzLmFkZE5ld0ZlYXR1cmUgPSBmdW5jdGlvbihsYXllcklkLCBvcHRpb25zPXt9KSB7XG4gICAgcmV0dXJuIHNlcnZpY2UuYWRkTmV3RmVhdHVyZShsYXllcklkLCBvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogTWV0aG9kIHRvIFN0b3AgZWRpdGluZyBvbiBsYXllcklkXG4gICAqIEBwYXJhbSBsYXllcklkXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fVxuICAgKi9cbiAgdGhpcy5zdG9wRWRpdGluZyA9IGZ1bmN0aW9uKGxheWVySWQsIG9wdGlvbnM9e30pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgIGNvbnN0IHRvb2xib3ggPSBzZXJ2aWNlLmdldFRvb2xCb3hCeUlkKGxheWVySWQpO1xuICAgICAgdG9vbGJveC5zdG9wKG9wdGlvbnMpLnRoZW4ocmVzb2x2ZSkuZmFpbChyZWplY3QpXG4gICAgfSlcbiAgfTtcblxuICB0aGlzLmNvbW1pdENoYW5nZXMgPSBmdW5jdGlvbihvcHRpb25zPXt9KXtcbiAgICByZXR1cm4gc2VydmljZS5jb21taXQob3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICAgdXNlZCB0byByZXNldCBkZWZhdWx0IHRvb2xib3ggc3RhdGUgbW9kaWZpZWQgYnkgb3RoZXIgcGx1Z2luXG4gICAqXG4gICovXG4gIHRoaXMucmVzZXREZWZhdWx0ID0gZnVuY3Rpb24oe3BsdWdpbj10cnVlLCB0b29sYm94ZXM9dHJ1ZX09e30pe1xuICAgIHRvb2xib3hlcyAmJiBzZXJ2aWNlLmdldFRvb2xCb3hlcygpLmZvckVhY2godG9vbGJveCA9PiB7XG4gICAgICB0b29sYm94LnJlc2V0RGVmYXVsdChvcHRpb25zKTtcbiAgICB9KTtcbiAgICBwbHVnaW4gJiYgc2VydmljZS5yZXNldERlZmF1bHQoKTtcbiAgfTtcblxuICAvKipcbiAgICogTWV0aG9kIHRvIHNldHVwIHBlcm1hbmVudHkgY29udHJhaW50cyBvbiBlZGl0aW5nIGFzIGZpbHRlciB0byBnZXQgZmVhdHVyZXMsIGZpbHRlciBsYXllcnMgdG8gZWRpdCBldGMuLi5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIHRoaXMuc2V0QXBwbGljYXRpb25FZGl0aW5nQ29uc3RyYWludHMgPSBmdW5jdGlvbihjb25zdHJhaW50cz17fSl7XG4gICAgc2VydmljZS5zZXRBcHBsaWNhdGlvbkVkaXRpbmdDb25zdHJhaW50cyhjb25zdHJhaW50cyk7XG4gIH07XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICB0aGlzLmdldE1hcFNlcnZpY2UgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBzZXJ2aWNlLmdldE1hcFNlcnZpY2UoKVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBUEk7XG4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBpZD1cImVkaXRpbmctbGF5ZXJzLWNob29zZS1mZWF0dXJlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZWRpdGluZy1jaG9vc2UtZmVhdHVyZS1yYWRpby1pbnB1dFwiIHYtZm9yPVwiKGZlYXR1cmUsIGluZGV4KSBpbiAkb3B0aW9ucy5mZWF0dXJlc1wiPlxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImNob29zZS1hbmQtem9vbS10by1mZWF0dXJlXCI+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxpbnB1dCBAY2xpY2suc3RvcD1cInNlbGVjdEZlYXR1cmUoZmVhdHVyZSlcIiA6aWQ9XCJgY2hvb3NlX2ZlYXR1cmVfJHtpbmRleH1gXCIgbmFtZT1cInJhZGlvXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJtYWdpYy1yYWRpb1wiPlxuICAgICAgICAgICAgPGxhYmVsIDpmb3I9XCJgY2hvb3NlX2ZlYXR1cmVfJHtpbmRleH1gXCIgc3R5bGU9XCJjb2xvcjogdHJhbnNwYXJlbnRcIj57eyBmZWF0dXJlLmdldElkKCkgfX08L2xhYmVsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgQGNsaWNrLnN0b3A9XCJ6b29tVG9GZWF0dXJlKGZlYXR1cmUpXCIgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsnbWFya2VyJ11cIiBjbGFzcz1cInNraW4tY29sb3JcIiBzdHlsZT1cInBhZGRpbmctbGVmdDogM3B4OyBmb250LXNpemU6IDEuM2VtOyBjdXJzb3I6IHBvaW50ZXI7IG1hcmdpbi10b3A6IDEwcHg7XCI+PC9kaXY+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPHNlY3Rpb24gc3R5bGU9XCJvdmVyZmxvdy14OiBhdXRvOyBkaXNwbGF5OiBmbGV4XCI+XG4gICAgICAgICAgPGRpdiB2LWZvcj1cIih7YXR0cmlidXRlLCB2YWx1ZX0pIGluIGdldEF0dHJpYnV0ZXNGZWF0dXJlKGZlYXR1cmUpXCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47ICBwYWRkaW5nOiA1cHg7XCI+XG4gICAgICAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtd2VpZ2h0OiBib2xkOyBtYXJnaW4tYm90dG9tOiAxMHB4O1wiPnt7JG9wdGlvbnMuYXR0cmlidXRlc1thdHRyaWJ1dGVdfX08L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBzdHlsZT1cImFsaWduLXNlbGY6IHN0YXJ0OyB3aGl0ZS1zcGFjZTogbm93cmFwO1wiPnt7dmFsdWV9fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBjb25zdCB7RzNXX0ZJRH0gPSBnM3dzZGsuY29uc3RhbnQ7XG4gIGNvbnN0IHtHVUl9ID0gZzN3c2RrLmd1aTtcbiAgY29uc3Qge2dldEFscGhhbnVtZXJpY1Byb3BlcnRpZXNGcm9tRmVhdHVyZX0gPSBnM3dzZGsuY29yZS5nZW91dGlscztcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ2Nob29zZWZlYXR1cmUnLFxuICAgIGRhdGEoKXtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZlYXR1cmU6IHRoaXMuJG9wdGlvbnMuZmVhdHVyZVxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgc2VsZWN0RmVhdHVyZShmZWF0dXJlKXtcbiAgICAgICAgdGhpcy5mZWF0dXJlLnNwbGljZSgwKTtcbiAgICAgICAgdGhpcy5mZWF0dXJlLnB1c2goZmVhdHVyZSk7XG4gICAgICB9LFxuICAgICAgZ2V0QXR0cmlidXRlc0ZlYXR1cmUoZmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gZ2V0QWxwaGFudW1lcmljUHJvcGVydGllc0Zyb21GZWF0dXJlKGZlYXR1cmUuZ2V0UHJvcGVydGllcygpKS5tYXAoYXR0cmlidXRlID0+ICh7XG4gICAgICAgICAgYXR0cmlidXRlLFxuICAgICAgICAgIHZhbHVlOiBmZWF0dXJlLmdldChhdHRyaWJ1dGUpXG4gICAgICAgIH0pKS5maWx0ZXIoYXR0cmlidXRlT2JqZWN0ID0+IGF0dHJpYnV0ZU9iamVjdC5hdHRyaWJ1dGUgIT09IEczV19GSUQpXG4gICAgICB9LFxuICAgICAgem9vbVRvRmVhdHVyZShmZWF0dXJlKSB7XG4gICAgICAgIGNvbnN0IG1hcFNlcnZpY2UgPSAgR1VJLmdldFNlcnZpY2UoJ21hcCcpO1xuICAgICAgICBtYXBTZXJ2aWNlLnNlU2VsZWN0aW9uTGF5ZXJWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgbWFwU2VydmljZS56b29tVG9GZWF0dXJlcyhbZmVhdHVyZV0gLCB7XG4gICAgICAgICAgaGlnaGxpZ2h0OiB0cnVlLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXG4gICAgICAgIH0pLnRoZW4oKCk9PiBtYXBTZXJ2aWNlLnNlU2VsZWN0aW9uTGF5ZXJWaXNpYmxlKHRydWUpKVxuICAgICAgfVxuICAgIH0sXG4gICAgbW91bnRlZCgpe1xuICAgICAgR1VJLmNsb3NlQ29udGVudCgpO1xuICAgIH1cbiAgfTtcbjwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZD5cbiAgLmNob29zZS1hbmQtem9vbS10by1mZWF0dXJle1xuICAgZGlzcGxheTogZmxleDtcbiAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cblxuICAjZWRpdGluZy1sYXllcnMtY2hvb3NlLWZlYXR1cmUgLmVkaXRpbmctY2hvb3NlLWZlYXR1cmUtcmFkaW8taW5wdXR7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVlO1xuICB9XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJlZGl0aW5nLWxheWVycy1mZWF0dXJlc1wiPlxuICAgICAgICA8ZGl2IHYtZm9yPVwiKGxheWVySWQpIGluIE9iamVjdC5rZXlzKCRvcHRpb25zLmxheWVycylcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tpbi1jb2xvclwiIHN0eWxlPVwiZm9udC13ZWlnaHQ6IGJvbGQ7IGZvbnQtc2l6ZTogMS4yZW07XCI+e3sgZ2V0TGF5ZXJUaXRsZShsYXllcklkKSB9fTwvZGl2PlxuICAgICAgICAgIDxkaXZpZGVyPjwvZGl2aWRlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29weS1mZWF0dXJlcy1mb3ItbGF5ZXItY29udGVudFwiIHN0eWxlPVwib3ZlcmZsb3cteDogYXV0b1wiPlxuICAgICAgICAgICAgPGRpdiB2LWZvcj1cIihmZWF0dXJlLCBpbmRleCkgaW4gJG9wdGlvbnMubGF5ZXJzW2xheWVySWRdLmZlYXR1cmVzXCIgc3R5bGU9XCJwYWRkaW5nOiA1cHg7IHBvc2l0aW9uOiByZWxhdGl2ZTsgZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGJhc2VsaW5lOyBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZWVlZTtcIj5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNlZWVlZWVcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IEBjbGljay5zdG9wPVwiem9vbVRvRmVhdHVyZShmZWF0dXJlKVwiIDpjbGFzcz1cImczd3RlbXBsYXRlLmZvbnRbJ21hcmtlciddXCIgY2xhc3M9XCJza2luLWNvbG9yXCIgc3R5bGU9XCJwYWRkaW5nOiAwIDVweCAxNXB4IDVweDsgZm9udC1zaXplOiAxLjFlbTsgIGN1cnNvcjogcG9pbnRlcjsgbWFyZ2luLXJpZ2h0OiA1cHg7XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiB2LXQtdG9vbHRpcDpyaWdodC5jcmVhdGU9XCIncGx1Z2lucy5lZGl0aW5nLnN0ZXBzLmhlbHAuc2VsZWN0X2VsZW1lbnRzJ1wiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0IEBjbGljay5zdG9wPVwic2VsZWN0RmVhdHVyZShmZWF0dXJlKVwiIDppZD1cImAke2xheWVySWR9XyR7aW5kZXh9X3NlbGVjdF9mZWF0dXJlX2Zyb21fbGF5ZXJgXCIgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJtYWdpYy1jaGVja2JveFwiPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIDpmb3I9XCJgJHtsYXllcklkfV8ke2luZGV4fV9zZWxlY3RfZmVhdHVyZV9mcm9tX2xheWVyYFwiIHN0eWxlPVwiY29sb3I6ICNGRkZGRkZcIj4ge3sgZmVhdHVyZS5nZXRJZCgpIH19IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IHYtZm9yPVwiKHthdHRyaWJ1dGUsIHZhbHVlfSkgaW4gZ2V0QXR0cmlidXRlc0ZlYXR1cmUoZmVhdHVyZSwgbGF5ZXJJZClcIiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IHBhZGRpbmc6IDEwcHg7XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDsgbWFyZ2luLWJvdHRvbTogMTBweDtcIj57e2F0dHJpYnV0ZX19PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiYWxpZ24tc2VsZjogc3RhcnRcIj57e3ZhbHVlfX08L3NwYW4+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgY29uc3Qge0czV19GSUR9ID0gZzN3c2RrLmNvbnN0YW50O1xuICBjb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbiAgY29uc3Qge2dldEFscGhhbnVtZXJpY1Byb3BlcnRpZXNGcm9tRmVhdHVyZX0gPSBnM3dzZGsuY29yZS5nZW91dGlscztcbiAgY29uc3Qge01hcExheWVyc1N0b3JlUmVnaXN0cnl9ID0gZzN3c2RrLmNvcmUubWFwO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQ29weWZlYXR1cmVzZnJvbW90aGVybGF5ZXJzJyxcbiAgICBkYXRhKCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RlZEZlYXR1cmVzOiB0aGlzLiRvcHRpb25zLnNlbGVjdGVkRmVhdHVyZXNcbiAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGdldEF0dHJpYnV0ZXNGZWF0dXJlKGZlYXR1cmUsIGxheWVySWQpe1xuICAgICAgICBjb25zdCB7ZXh0ZXJuYWwsIGZpZWxkc30gPSB0aGlzLiRvcHRpb25zLmxheWVyc1tsYXllcklkXTtcbiAgICAgICAgcmV0dXJuIGdldEFscGhhbnVtZXJpY1Byb3BlcnRpZXNGcm9tRmVhdHVyZShmZWF0dXJlLmdldFByb3BlcnRpZXMoKSkuZmlsdGVyKHByb3BlcnR5ID0+IHByb3BlcnR5ICE9PSBHM1dfRklEKS5tYXAoYXR0cmlidXRlID0+ICh7XG4gICAgICAgICAgYXR0cmlidXRlOiAhZXh0ZXJuYWwgPyBmaWVsZHMuZmluZChmaWVsZCA9PiBmaWVsZC5uYW1lID09PSBhdHRyaWJ1dGUpLmxhYmVsIDogYXR0cmlidXRlLFxuICAgICAgICAgIHZhbHVlOiBmZWF0dXJlLmdldChhdHRyaWJ1dGUpXG4gICAgICAgIH0pKVxuICAgICAgfSxcbiAgICAgIHNlbGVjdEZlYXR1cmUoZmVhdHVyZSl7XG4gICAgICAgIGNvbnN0IGZpbmQgPSB0aGlzLnNlbGVjdGVkRmVhdHVyZXMuZmluZChzZWxlY3RlZEZlYXR1cmUgPT4gc2VsZWN0ZWRGZWF0dXJlID09PSBmZWF0dXJlKTtcbiAgICAgICAgaWYgKGZpbmQpIHRoaXMuc2VsZWN0ZWRGZWF0dXJlcyA9IHRoaXMuc2VsZWN0ZWRGZWF0dXJlcy5maWx0ZXIoc2VsZWN0ZWRGZWF0dXJlID0+IHNlbGVjdGVkRmVhdHVyZSAhPT0gZmVhdHVyZSk7XG4gICAgICAgIGVsc2UgdGhpcy5zZWxlY3RlZEZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICB9LFxuICAgICAgZ2V0TGF5ZXJUaXRsZShsYXllcklkKXtcbiAgICAgICAgaWYgKE1hcExheWVyc1N0b3JlUmVnaXN0cnkuZ2V0TGF5ZXJCeUlkKGxheWVySWQpKSByZXR1cm4gTWFwTGF5ZXJzU3RvcmVSZWdpc3RyeS5nZXRMYXllckJ5SWQobGF5ZXJJZCkuZ2V0VGl0bGUoKTtcbiAgICAgICAgZWxzZSByZXR1cm4gR1VJLmdldFNlcnZpY2UoJ21hcCcpLmdldExheWVyQnlJZChsYXllcklkKS5nZXQoJ25hbWUnKTtcbiAgICAgIH0sXG4gICAgICB6b29tVG9GZWF0dXJlKGZlYXR1cmUpIHtcbiAgICAgICAgY29uc3QgbWFwU2VydmljZSA9ICBHVUkuZ2V0U2VydmljZSgnbWFwJyk7XG4gICAgICAgIG1hcFNlcnZpY2Uuc2VTZWxlY3Rpb25MYXllclZpc2libGUoZmFsc2UpO1xuICAgICAgICBtYXBTZXJ2aWNlLnpvb21Ub0ZlYXR1cmVzKFtmZWF0dXJlXSAsIHtcbiAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsXG4gICAgICAgICAgZHVyYXRpb246IDEwMDBcbiAgICAgICAgfSkudGhlbigoKSA9PiBtYXBTZXJ2aWNlLnNlU2VsZWN0aW9uTGF5ZXJWaXNpYmxlKHRydWUpKVxuICAgICAgfVxuICAgIH0sXG4gICAgbW91bnRlZCgpe1xuICAgICAgR1VJLmNsb3NlQ29udGVudCgpO1xuICAgIH1cbiAgfTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZWRpdGluZy1sYXllcnMtZmVhdHVyZXNcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29weS1mZWF0dXJlcy1mb3ItbGF5ZXItY29udGVudFwiIHN0eWxlPVwib3ZlcmZsb3cteDogYXV0b1wiPlxuICAgICAgPGRpdiB2LWZvcj1cIihmZWF0dXJlLCBpbmRleCkgaW4gZmVhdHVyZXNcIiBzdHlsZT1cInBhZGRpbmc6IDVweDsgcG9zaXRpb246IHJlbGF0aXZlOyBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogYmFzZWxpbmU7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVlO1wiPlxuICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2VlZWVlZVwiPlxuICAgICAgICAgIDxkaXYgQGNsaWNrLnN0b3A9XCJ6b29tVG9GZWF0dXJlKGZlYXR1cmUpXCIgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsnbWFya2VyJ11cIiBjbGFzcz1cInNraW4tY29sb3JcIiBzdHlsZT1cInBhZGRpbmc6IDAgNXB4IDE1cHggNXB4OyBmb250LXNpemU6IDEuMWVtOyAgY3Vyc29yOiBwb2ludGVyOyBtYXJnaW4tcmlnaHQ6IDVweDtcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IHYtdC10b29sdGlwOnJpZ2h0LmNyZWF0ZT1cIidwbHVnaW5zLmVkaXRpbmcuc3RlcHMuaGVscC5zZWxlY3RfZWxlbWVudHMnXCI+XG4gICAgICAgICAgICA8aW5wdXQgOmlkPVwiYCR7bGF5ZXJJZH1fJHtpbmRleH1fc2VsZWN0X2ZlYXR1cmVfZnJvbV9sYXllcmBcIiA6dmFsdWU9XCJmZWF0dXJlXCIgbmFtZT1cInJhZGlvXCIgdHlwZT1cInJhZGlvXCIgdi1tb2RlbD1cInNlbGVjdGZlYXR1cmVcIiBjbGFzcz1cIm1hZ2ljLXJhZGlvXCI+XG4gICAgICAgICAgICA8bGFiZWwgOmZvcj1cImAke2xheWVySWR9XyR7aW5kZXh9X3NlbGVjdF9mZWF0dXJlX2Zyb21fbGF5ZXJgXCIgc3R5bGU9XCJjb2xvcjogI0ZGRkZGRlwiPnt7aW5kZXh9fTwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHYtZm9yPVwiKHthdHRyaWJ1dGUsIHZhbHVlfSkgaW4gZ2V0QXR0cmlidXRlc0ZlYXR1cmUoZmVhdHVyZSlcIiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IHBhZGRpbmc6IDEwcHg7XCI+XG4gICAgICAgICAgPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDsgbWFyZ2luLWJvdHRvbTogMTBweDtcIj57e2F0dHJpYnV0ZX19PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHN0eWxlPVwiYWxpZ24tc2VsZjogc3RhcnRcIj57e3ZhbHVlfX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgY29uc3Qge0czV19GSUR9ID0gZzN3c2RrLmNvbnN0YW50O1xuICBjb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbiAgY29uc3Qge2dldEFscGhhbnVtZXJpY1Byb3BlcnRpZXNGcm9tRmVhdHVyZX0gPSBnM3dzZGsuY29yZS5nZW91dGlscztcbiAgY29uc3Qge01hcExheWVyc1N0b3JlUmVnaXN0cnl9ID0gZzN3c2RrLmNvcmUubWFwO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQ29weWZlYXR1cmVzZnJvbW90aGVybGF5ZXJzJyxcbiAgICBkYXRhKCl7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmZWF0dXJlczogdGhpcy4kb3B0aW9ucy5mZWF0dXJlcyxcbiAgICAgICAgc2VsZWN0ZmVhdHVyZTogbnVsbCxcbiAgICAgICAgc2VsZWN0ZWRGZWF0dXJlczogdGhpcy4kb3B0aW9ucy5zZWxlY3RlZEZlYXR1cmVzXG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBnZXRBdHRyaWJ1dGVzRmVhdHVyZShmZWF0dXJlKXtcbiAgICAgICAgY29uc3Qge2ZpZWxkc30gPSB0aGlzLiRvcHRpb25zO1xuICAgICAgICByZXR1cm4gZ2V0QWxwaGFudW1lcmljUHJvcGVydGllc0Zyb21GZWF0dXJlKGZlYXR1cmUuZ2V0UHJvcGVydGllcygpKS5maWx0ZXIocHJvcGVydHkgPT4gcHJvcGVydHkgIT09IEczV19GSUQpLm1hcChhdHRyaWJ1dGUgPT4gKHtcbiAgICAgICAgICBhdHRyaWJ1dGU6IGZpZWxkcyA/IGZpZWxkcy5maW5kKGZpZWxkID0+IGZpZWxkLm5hbWUgPT09IGF0dHJpYnV0ZSkubGFiZWwgOiBhdHRyaWJ1dGUsXG4gICAgICAgICAgdmFsdWU6IGZlYXR1cmUuZ2V0KGF0dHJpYnV0ZSlcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIGdldExheWVyVGl0bGUobGF5ZXJJZCl7XG4gICAgICAgIHJldHVybiBNYXBMYXllcnNTdG9yZVJlZ2lzdHJ5LmdldExheWVyQnlJZChsYXllcklkKS5nZXRUaXRsZSgpXG4gICAgICB9LFxuICAgICAgem9vbVRvRmVhdHVyZShmZWF0dXJlKSB7XG4gICAgICAgIGNvbnN0IG1hcFNlcnZpY2UgPSAgR1VJLmdldFNlcnZpY2UoJ21hcCcpO1xuICAgICAgICBtYXBTZXJ2aWNlLnNlU2VsZWN0aW9uTGF5ZXJWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgbWFwU2VydmljZS56b29tVG9GZWF0dXJlcyhbZmVhdHVyZV0gLCB7XG4gICAgICAgICAgaGlnaGxpZ2h0OiB0cnVlLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXG4gICAgICAgIH0pLnRoZW4oKCkgPT4gbWFwU2VydmljZS5zZVNlbGVjdGlvbkxheWVyVmlzaWJsZSh0cnVlKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICBzZWxlY3RmZWF0dXJlKGZlYXR1cmUpe1xuICAgICAgICB0aGlzLnNlbGVjdGVkRmVhdHVyZXMuc3BsaWNlKDAsMSxmZWF0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG48L3NjcmlwdD5cbiIsIjwhLS0gT1JJR0lOQUwgU09VUkNFOiAtLT5cbjwhLS0gdnVlL2VkaXRpbmcuaHRtbEB2My40IC0tPlxuPCEtLSB2dWUvZWRpdGluZy5qc0B2My40IC0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJnM3ctZWRpdGluZy1wYW5lbFwiPlxuICAgIDxiYXItbG9hZGVyIDpsb2FkaW5nPVwic2F2aW5nXCI+PC9iYXItbG9hZGVyPlxuICAgIDxkaXYgdi1pZj1cIiFhcHBTdGF0ZS5vbmxpbmVcIiBpZD1cIm9ubGluZW9mZmxpbmVtZXNzYWdlXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiA1cHg7IHBhZGRpbmc6IDVweDsgYm9yZGVyLXJhZGl1czogM3B4OyBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7IGNvbG9yOndoaXRlOyBmb250LXdlaWdodDogYm9sZFwiPlxuICAgICAgPGRpdiB2LXQtcGx1Z2luPVwiJ2VkaXRpbmcubWVzc2FnZXMub2ZmbGluZSdcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHYtaWY9XCJzaG93Y29tbWl0YmFyXCIgdi1kaXNhYmxlZD1cInNhdmluZ1wiIHN0eWxlPVwiZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsgbWFyZ2luLWJvdHRvbTogNXB4XCI+XG4gICAgICA8ZGl2IHN0eWxlPVwibWFyZ2luLXJpZ2h0OiBhdXRvO1wiIGNsYXNzPVwiZWRpdGluZy1idXR0b25cIiBAY2xpY2s9XCJjYW5Db21taXQgPyBjb21taXQoKTogbnVsbFwiIDpjbGFzcz1cInsnZW5hYmxlZCcgOiBjYW5Db21taXQgfVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImVkaXRpbmctaWNvblwiIDpjbGFzcz1cImczd3RlbXBsYXRlLmZvbnRbJ3NhdmUnXVwiPjwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImVkaXRpbmctYnV0dG9uIFwiIEBjbGljaz1cImNhblVuZG8gPyB1bmRvKCk6IG51bGxcIiA6Y2xhc3M9XCJ7J2VuYWJsZWQnIDogY2FuVW5kbyB9XCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZWRpdGluZy1pY29uXCIgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsnYXJyb3ctbGVmdCddXCI+PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZWRpdGluZy1idXR0b24gXCIgQGNsaWNrPVwiY2FuUmVkbyA/IHJlZG8oKTogbnVsbFwiIDpjbGFzcz1cInsnZW5hYmxlZCcgOiBjYW5SZWRvIH1cIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJlZGl0aW5nLWljb25cIiA6Y2xhc3M9XCJnM3d0ZW1wbGF0ZS5mb250WydhcnJvdy1yaWdodCddXCI+PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWVsc2Ugc3R5bGU9XCJoZWlnaHQ6IDEwcHg7XCI+PC9kaXY+XG4gICAgPHNlbGVjdGxheWVycyB2LWlmPVwic3RhdGUudG9vbGJveGVzLmxlbmd0aCA+IDFcIj48L3NlbGVjdGxheWVycz5cbiAgICA8ZGl2IGlkPVwidG9vbGJveGVzXCI+XG4gICAgICA8dG9vbGJveCA6c3RhdGU9XCJ0b29sYm94XCIgOnJlc291cmNlc3VybD1cInJlc291cmNlc3VybFwiXG4gICAgICAgIEBzZXRzZWxlY3RlZHRvb2xib3g9XCJzZXRTZWxlY3RlZFRvb2xib3hcIlxuICAgICAgICBAc3RhcnR0b29sYm94PVwic3RhcnRUb29sQm94XCJcbiAgICAgICAgQHN0b3B0b29sYm94PVwic3RvcFRvb2xCb3hcIlxuICAgICAgICBAc2F2ZXRvb2xib3g9XCJzYXZlVG9vbEJveFwiXG4gICAgICAgIEBzZXRhY3RpdmV0b29sPVwic3RhcnRBY3RpdmVUb29sXCJcbiAgICAgICAgQHN0b3BhY3RpdmV0b29sPVwic3RvcEFjdGl2ZVRvb2xcIlxuICAgICAgICB2LWZvcj1cInRvb2xib3ggaW4gc3RhdGUudG9vbGJveGVzXCIgOmtleT1cInRvb2xib3guaWRcIj5cbiAgICAgIDwvdG9vbGJveD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgVG9vbGJveENvbXBvbmVudCBmcm9tICcuL1Rvb2xib3gudnVlJztcbiAgaW1wb3J0IFNlbGVjdEVkaXRpbmdMYXllcnNDb21wb25lbnQgZnJvbSBcIi4vU2VsZWN0RWRpdGluZ0xheWVycy52dWVcIjtcbiAgY29uc3QgeyBHVUkgfSA9IGczd3Nkay5ndWk7XG4gIGNvbnN0IHsgdFBsdWdpbjp0IH0gPSBnM3dzZGsuY29yZS5pMThuO1xuICBjb25zdCB7IEFwcGxpY2F0aW9uU3RhdGUgfSA9IGczd3Nkay5jb3JlO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgIG5hbWU6ICdFZGl0aW5nJyxcbiAgICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2F2aW5nOiBmYWxzZSAvLyBhdHRyaWJ1dGUgdXNlZnVsIHRvIHNob3cgbG9hZGluZyBiYXIgd2hlbiBjb21taXQgYWZ0ZXIgY2xpY2sgb24gc2F2ZSBkaXNrIGljb25cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgdG9vbGJveDogVG9vbGJveENvbXBvbmVudCxcbiAgICAgICAgc2VsZWN0bGF5ZXJzOiBTZWxlY3RFZGl0aW5nTGF5ZXJzQ29tcG9uZW50XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvbnM6IHsnYWRkcmVtb3ZldHJhbnNpdGlvbic6ICdzaG93aGlkZSd9LFxuICAgICAgbWV0aG9kczoge1xuICAgICAgICB1bmRvKCkge1xuICAgICAgICAgIHRoaXMuJG9wdGlvbnMuc2VydmljZS51bmRvKClcbiAgICAgICAgfSxcbiAgICAgICAgcmVkbygpIHtcbiAgICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UucmVkbygpO1xuICAgICAgICB9LFxuICAgICAgICBjb21taXQodG9vbGJveElkKSB7XG4gICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLiRvcHRpb25zLnNlcnZpY2UuZ2V0VG9vbEJveEJ5SWQodG9vbGJveElkKTtcbiAgICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UuY29tbWl0KHtcbiAgICAgICAgICAgIHRvb2xib3gsXG4gICAgICAgICAgICBtb2RhbDogZmFsc2VcbiAgICAgICAgICB9KS5hbHdheXMoKCkgPT4gdGhpcy5zYXZpbmcgPSBmYWxzZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNhdmVBbGwoKSB7fSxcbiAgICAgICAgc3RhcnRUb29sQm94KHRvb2xib3hJZCkge1xuICAgICAgICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLl9nZXRUb29sQm94QnlJZCh0b29sYm94SWQpO1xuICAgICAgICAgIEFwcGxpY2F0aW9uU3RhdGUub25saW5lICYmIHRvb2xib3guY2FuRWRpdCgpICYmIHRvb2xib3guc3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcFRvb2xCb3godG9vbGJveElkKSB7XG4gICAgICAgICAgY29uc3QgdG9vbGJveCA9IHRoaXMuX2dldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgICAgICAgaWYgKHRvb2xib3guc3RhdGUuZWRpdGluZy5oaXN0b3J5LmNvbW1pdCkgdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmNvbW1pdCgpLmFsd2F5cygoKSA9PiB0b29sYm94LnN0b3AoKSk7XG4gICAgICAgICAgZWxzZSB0b29sYm94LnN0b3AoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZVRvb2xCb3godG9vbGJveElkKSB7XG4gICAgICAgICAgY29uc3QgdG9vbGJveCA9IHRoaXMuX2dldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgICAgICAgdG9vbGJveC5zYXZlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRBY3RpdmVUb29sT2ZUb29sYm9veFNlbGVjdGVkKHRvb2xJZCwgdG9vbGJveElkKSB7XG4gICAgICAgICAgY29uc3QgdG9vbGJveCA9IHRoaXMuX2dldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgICAgICAgdGhpcy5zdGF0ZS50b29sYm94aWRhY3RpdmV0b29sID0gdG9vbGJveElkO1xuICAgICAgICAgIGNvbnN0IHRvb2wgPSB0b29sYm94LmdldFRvb2xCeUlkKHRvb2xJZCk7XG4gICAgICAgICAgdG9vbGJveC5zZXRBY3RpdmVUb29sKHRvb2wpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBtZXRob2QgdG8gc3RhcnQgdG9vbCBvZiB0b29sYm94XG4gICAgICAgIHN0YXJ0QWN0aXZlVG9vbCh0b29sSWQsIHRvb2xib3hJZCkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnRvb2xib3hpZGFjdGl2ZXRvb2wgJiYgdG9vbGJveElkICE9PSB0aGlzLnN0YXRlLnRvb2xib3hpZGFjdGl2ZXRvb2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpcnR5VG9vbEJveCA9IHRoaXMuc3RhdGUudG9vbGJveGlkYWN0aXZldG9vbDtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRGlydHlUb29sQm94ZXMoZGlydHlUb29sQm94KVxuICAgICAgICAgICAgICAudGhlbih0b29sYm94ID0+IHtcbiAgICAgICAgICAgICAgICB0b29sYm94ICYmIHRvb2xib3guc3RvcEFjdGl2ZVRvb2woKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBY3RpdmVUb29sT2ZUb29sYm9veFNlbGVjdGVkKHRvb2xJZCwgdG9vbGJveElkKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2UgdGhpcy5fc2V0QWN0aXZlVG9vbE9mVG9vbGJvb3hTZWxlY3RlZCh0b29sSWQsIHRvb2xib3hJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BBY3RpdmVUb29sKHRvb2xib3hJZCkge1xuICAgICAgICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLl9nZXRUb29sQm94QnlJZCh0b29sYm94SWQpO1xuICAgICAgICAgIHRvb2xib3guc3RvcEFjdGl2ZVRvb2woKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0U2VsZWN0ZWRUb29sYm94KHRvb2xib3hJZCkge1xuICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLiRvcHRpb25zLnNlcnZpY2U7XG4gICAgICAgICAgY29uc3QgdG9vbGJveCA9IHRoaXMuX2dldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgICAgICAgY29uc3QgdG9vbGJveGVzID0gc2VydmljZS5nZXRUb29sQm94ZXMoKTtcbiAgICAgICAgICBjb25zdCB0b29sYm94U2VsZWN0ZWQgPSB0b29sYm94ZXMuZmluZCh0b29sYm94ID0+IHRvb2xib3guaXNTZWxlY3RlZCgpKTtcbiAgICAgICAgICB0b29sYm94U2VsZWN0ZWQgJiYgdG9vbGJveFNlbGVjdGVkLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgICB0b29sYm94LnNldFNlbGVjdGVkKHRydWUpO1xuICAgICAgICAgIHRoaXMuc3RhdGUudG9vbGJveHNlbGVjdGVkID0gdG9vbGJveDtcbiAgICAgICAgICBpZiAodG9vbGJveC5nZXREZXBlbmRlbmNpZXMoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubWVzc2FnZSA9IFwiPGRpdj5cXG5cIiArXG4gICAgICAgICAgICAgIHQoXCJlZGl0aW5nLm1lc3NhZ2VzLmNoYW5nZV90b29sYm94X3JlbGF0aW9uXCIpICsgXCJcXG5cIiArXG4gICAgICAgICAgICAgIFwiPC9kaXY+XCJcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5tZXNzYWdlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9jaGVja0RpcnR5VG9vbEJveGVzKHRvb2xib3hJZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLnNlcnZpY2UuY29tbWl0RGlydHlUb29sQm94ZXModG9vbGJveElkKTtcbiAgICAgICAgfSxcbiAgICAgICAgX2dldFRvb2xCb3hCeUlkKHRvb2xib3hJZCkge1xuICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLiRvcHRpb25zLnNlcnZpY2U7XG4gICAgICAgICAgY29uc3QgdG9vbGJveCA9IHNlcnZpY2UuZ2V0VG9vbEJveEJ5SWQodG9vbGJveElkKTtcbiAgICAgICAgICByZXR1cm4gdG9vbGJveDtcbiAgICAgICAgfSxcbiAgICAgICAgX2VuYWJsZUVkaXRpbmdCdXR0b25zKGJvb2wpIHtcbiAgICAgICAgICB0aGlzLmVkaXRpbmdCdXR0b25zRW5hYmxlZCA9ICFib29sO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgbWVzc2FnZSgpIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gXCJcIjtcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuQ29tbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmdldFNhdmVDb25maWcoKS5tb2RlID09PSAnZGVmYXVsdCcgJiYgdGhpcy5zdGF0ZS50b29sYm94c2VsZWN0ZWQgJiYgdGhpcy5zdGF0ZS50b29sYm94c2VsZWN0ZWQuc3RhdGUuZWRpdGluZy5oaXN0b3J5LmNvbW1pdCAmJiB0aGlzLmVkaXRpbmdCdXR0b25zRW5hYmxlZDtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuVW5kbygpIHtcbiAgICAgICAgICBjb25zdCB0b29sYm94ID0gdGhpcy5zdGF0ZS50b29sYm94c2VsZWN0ZWQ7XG4gICAgICAgICAgY29uc3QgY2FuVW5kbyA9IHRvb2xib3ggJiYgIHRvb2xib3guc3RhdGUuZWRpdGluZy5oaXN0b3J5LnVuZG8gJiYgdGhpcy5lZGl0aW5nQnV0dG9uc0VuYWJsZWQ7XG4gICAgICAgICAgdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmZpcmVFdmVudCgnY2FuVW5kbycsIGNhblVuZG8pO1xuICAgICAgICAgIHJldHVybiBjYW5VbmRvO1xuICAgICAgICB9LFxuICAgICAgICBjYW5SZWRvKCkge1xuICAgICAgICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLnN0YXRlLnRvb2xib3hzZWxlY3RlZDtcbiAgICAgICAgICBjb25zdCBjYW5SZWRvID0gdG9vbGJveCAmJiB0b29sYm94LnN0YXRlLmVkaXRpbmcuaGlzdG9yeS5yZWRvICYmIHRoaXMuZWRpdGluZ0J1dHRvbnNFbmFibGVkO1xuICAgICAgICAgIHRoaXMuJG9wdGlvbnMuc2VydmljZS5maXJlRXZlbnQoJ2NhblJlZG8nLCBjYW5SZWRvKTtcbiAgICAgICAgICByZXR1cm4gY2FuUmVkb1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2F0Y2g6e1xuICAgICAgICBjYW5Db21taXQoYm9vbCkge1xuICAgICAgICAgIHRoaXMuJG9wdGlvbnMuc2VydmljZS5yZWdpc3RlckxlYXZlUGFnZShib29sKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZWQoKSB7XG4gICAgICAgIHRoaXMuYXBwU3RhdGUgPSBBcHBsaWNhdGlvblN0YXRlO1xuICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UucmVnaXN0ZXJPbkxpbmVPZmZMaW5lRXZlbnQoKTtcbiAgICAgICAgR1VJLmNsb3NlQ29udGVudCgpO1xuICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2Uuc2V0T3BlbkVkaXRpbmdQYW5lbCh0cnVlKTtcbiAgICAgICAgR1VJLm9uKCdvcGVuY29udGVudCcsIHRoaXMuX2VuYWJsZUVkaXRpbmdCdXR0b25zKTtcbiAgICAgICAgR1VJLm9uKCdjbG9zZWZvcm0nLCB0aGlzLl9lbmFibGVFZGl0aW5nQnV0dG9ucyk7XG4gICAgICAgIEdVSS5vbignY2xvc2Vjb250ZW50JywgdGhpcy5fZW5hYmxlRWRpdGluZ0J1dHRvbnMpO1xuICAgICAgICAvL0dVSS5nZXRTZXJ2aWNlKCdtYXAnKS5zZVNlbGVjdGlvbkxheWVyVmlzaWJsZShmYWxzZSk7XG4gICAgICB9LFxuICAgICAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLnNldE9wZW5FZGl0aW5nUGFuZWwoZmFsc2UpO1xuICAgICAgICBHVUkub2ZmKCdvcGVuY29udGVudCcsIHRoaXMuX2VuYWJsZUVkaXRpbmdCdXR0b25zKTtcbiAgICAgICAgR1VJLm9mZignY2xvc2Vmb3JtJywgdGhpcy5fZW5hYmxlRWRpdGluZ0J1dHRvbnMpO1xuICAgICAgICBHVUkub2ZmKCdjbG9zZWNvbnRlbnQnLCB0aGlzLl9lbmFibGVFZGl0aW5nQnV0dG9ucyk7XG4gICAgICAgIHRoaXMuJG9wdGlvbnMuc2VydmljZS51bnJlZ2lzdGVyT25MaW5lT2ZmTGluZUV2ZW50KCk7XG4gICAgICAgIC8vR1VJLmdldFNlcnZpY2UoJ21hcCcpLnNlU2VsZWN0aW9uTGF5ZXJWaXNpYmxlKHRydWUpO1xuICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UuZmlyZUV2ZW50KCdjbG9zZWVkaXRpbmdwYW5lbCcpO1xuICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2Uub25DbG9zZUVkaXRpbmdQYW5lbCgpO1xuICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UuY2xlYXJBbGxMYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9O1xuPC9zY3JpcHQ+XG4iLCI8IS0tIE9SSUdJTkFMIFNPVVJDRTogLS0+XG48IS0tIGZvcm0vY29tcG9uZW50cy9yZWxhdGlvbi92dWUvcmVsYXRpb24uaHRtbEB2My40IC0tPlxuPCEtLSBmb3JtL2NvbXBvbmVudHMvcmVsYXRpb24vdnVlL3JlbGF0aW9uLmpzQHYzLjQgLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IHN0eWxlPVwibWFyZ2luLWJvdHRvbTogNXB4O1wiIHYtaWY9XCJhY3RpdmVcIj5cbiAgICAgIDxkaXYgcmVmPVwicmVsYXRpb25faGVhZGVyX3RpdGxlXCIgY2xhc3M9XCJib3gtaGVhZGVyIHdpdGgtYm9yZGVyIHNraW4tY29sb3JcIiBzdHlsZT1cIndpZHRoOjEwMCU7IGRpc3BsYXk6IGZsZXg7IGZvbnQtd2VpZ2h0OiBib2xkOyBmb250LXNpemU6IDEuM2VtOyBhbGlnbi1pdGVtczogY2VudGVyOyBtYXJnaW4tYnV0dG9uOjNweDsgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsgXCI+XG4gICAgICAgIDxzcGFuIHYtdD1cIidwbHVnaW5zLmVkaXRpbmcuZWRpdF9yZWxhdGlvbidcIj48L3NwYW4+XG4gICAgICAgIDxzcGFuIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDJweDtcIj46IHt7cmVsYXRpb24ubmFtZS50b1VwcGVyQ2FzZSgpfX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgcmVmPVwicmVsYXRpb25faGVhZGVyX3Rvb2xzXCIgY2xhc3M9XCJib3gtaGVhZGVyIHdpdGgtYm9yZGVyXCIgc3R5bGU9XCJ3aWR0aDoxMDAlOyBkaXNwbGF5OiBmbGV4OyBtYXJnaW4tYnV0dG9uOjNweDsgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsgXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJzZWFyY2gtYm94XCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IGF1dG87XCI+XG4gICAgICAgICAgPGlucHV0IHYtaWY9XCJyZWxhdGlvbnNMZW5ndGhcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJmaWx0ZXJSZWxhdGlvblwiIDpwbGFjZWhvbGRlcj1cInBsYWNlaG9sZGVyc2VhcmNoXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZzN3LWljb24gYWRkLWxpbmtcIiBhbGlnbj1cImNlbnRlclwiXG4gICAgICAgICAgICB2LWlmPVwiY2FwYWJpbGl0aWVzLnJlbGF0aW9uLmZpbmQoY2FwYWJpbGl0eSA9PiBjYXBhYmlsaXR5ID09PSAnY2hhbmdlX2F0dHJfZmVhdHVyZScpICE9PSB1bmRlZmluZWRcIlxuICAgICAgICAgICAgdi10LXRvb2x0aXA6Ym90dG9tLmNyZWF0ZT1cInRvb2x0aXBzLmxpbmtfcmVsYXRpb25cIiBAY2xpY2s9XCJlbmFibGVBZGRMaW5rQnV0dG9ucyA/IGxpbmtSZWxhdGlvbigpIDogbnVsbFwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJbeydkaXNhYmxlZCc6ICFlbmFibGVBZGRMaW5rQnV0dG9uc30sIGczd3RlbXBsYXRlLmZvbnRbJ2xpbmsnXV1cIj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gdi1pZj1cImNhcGFiaWxpdGllcy5yZWxhdGlvbi5maW5kKGNhcGFiaWxpdHkgPT4gY2FwYWJpbGl0eSA9PT0gJ2FkZF9mZWF0dXJlJykgIT09IHVuZGVmaW5lZFwiXG4gICAgICAgICAgICB2LXQtdG9vbHRpcDpib3R0b20uY3JlYXRlPVwidG9vbHRpcHMubGlua19yZWxhdGlvblwiXG4gICAgICAgICAgICBAY2xpY2s9XCJlbmFibGVBZGRMaW5rQnV0dG9ucyA/IGFkZFJlbGF0aW9uQW5kTGluaygpIDogbnVsbFwiXG4gICAgICAgICAgICBjbGFzcz1cImczdy1pY29uIGFkZC1saW5rIHB1bGwtcmlnaHRcIlxuICAgICAgICAgICAgOmNsYXNzPVwiW3snZGlzYWJsZWQnIDogIWVuYWJsZUFkZExpbmtCdXR0b25zfSwgZzN3dGVtcGxhdGUuZm9udFsncGx1cyddXVwiPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzZWN0aW9uIHJlZj1cInJlbGF0aW9uX3ZlY3Rvcl90b29sc1wiIHYtaWY9XCJzaG93QWRkVmVjdG9yUmVsYXRpb25Ub29sc1wiIHN0eWxlPVwiZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246Y29sdW1uOyBib3JkZXI6MnB4IHNvbGlkICNlZWVlZWU7IGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7IHBhZGRpbmc6IDEwcHg7XCI+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gc2tpbi1idXR0b25cIiBzdHlsZT1cIndpZHRoOiAxMDAlXCIgQGNsaWNrLnN0b3A9XCJhZGRWZWN0b3JSZWxhdGlvblwiPlxuICAgICAgICAgIDxpIDpjbGFzcz1cImczd3RlbXBsYXRlLmZvbnRbJ3BlbmNpbCddXCI+PC9pPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGRpdmlkZXI+PC9kaXZpZGVyPlxuICAgICAgICA8ZGl2IGlkPVwiZzN3LXNlbGVjdC1lZGl0YWJsZS1sYXllcnMtY29udGVudFwiIHN0eWxlPVwiZmxleC1ncm93OiAxOyBkaXNwbGF5OmZsZXg7XCIgY2xhc3M9XCJza2luLWNvbG9yXCI+XG4gICAgICAgICAgPHNlbGVjdCBpZD1cImczdy1zZWxlY3QtZWRpdGFibGUtbGF5ZXJzLXRvLWNvcHlcIiB2LXNlbGVjdDI9XCInY29weWxheWVyaWQnXCI+XG4gICAgICAgICAgICA8b3B0aW9uIHYtZm9yPVwiY29weUZlYXR1cmVMYXllciBpbiBjb3B5RmVhdHVyZUxheWVyc1wiIDp2YWx1ZT1cImNvcHlGZWF0dXJlTGF5ZXIuaWRcIiA6a2V5PVwiY29weUZlYXR1cmVMYXllci5pZFwiPnt7Y29weUZlYXR1cmVMYXllci5uYW1lfX08L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIHNraW4tYnV0dG9uXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMnB4O1wiIEBjbGljay5zdG9wPVwiY29weUZlYXR1cmVGcm9tT3RoZXJMYXllclwiPlxuICAgICAgICAgICAgPGkgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsnY2xpcGJvYXJkJ11cIj48L2k+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8ZGl2IHJlZj1cInJlbGF0aW9uX2JvZHlcIiBjbGFzcz1cImJveC1ib2R5XCIgc3R5bGU9XCJwYWRkaW5nOjA7XCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwicmVsYXRpb25zTGVuZ3RoXCI+XG4gICAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgZzN3Zm9ybS1yZWxhdGlvbi10YWJsZSB0YWJsZS1zdHJpcGVkXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGggdi10PVwiJ3Rvb2xzJ1wiPjwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgICAgICAgICAgPHRoIHYtZm9yPVwiYXR0cmlidXRlIGluIHJlbGF0aW9uQXR0cmlidXRlc1N1YnNldChyZWxhdGlvbnNbMF0pXCI+e3thdHRyaWJ1dGUubGFiZWx9fTwvdGg+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICA8dHIgdi1mb3I9XCIocmVsYXRpb24sIGluZGV4KSBpbiByZWxhdGlvbnNcIiBjbGFzcz1cImZlYXR1cmVib3gtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNraW4tdG9vbHRpcC1yaWdodCBlZGl0YnRuIGVuYWJsZWRcIiBAY2xpY2s9XCJzdGFydFRvb2wocmVsYXRpb250b29sLCBpbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPVwicmVsYXRpb250b29sIGluIGdldFJlbGF0aW9uVG9vbHMoKVwiIDprZXk9XCJyZWxhdGlvbnRvb2wuc3RhdGUubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD1cInJpZ2h0XCIgdi10LXRvb2x0aXA6cGx1Z2luPVwicmVsYXRpb250b29sLnN0YXRlLm5hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8aW1nIGhlaWdodD1cIjIwcHhcIiB3aWR0aD1cIjIwcHhcIiA6c3JjPVwiYCR7cmVzb3VyY2VzdXJsfWltYWdlcy8ke3JlbGF0aW9udG9vbC5zdGF0ZS5pY29ufWBcIi8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJhY3Rpb24tY2VsbFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiIWZpZWxkcmVxdWlyZWQgJiYgY2FwYWJpbGl0aWVzLnJlbGF0aW9uLmZpbmQoY2FwYWJpbGl0eSA9PiBjYXBhYmlsaXR5ID09PSAnY2hhbmdlX2F0dHJfZmVhdHVyZScpICE9PSB1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImczdy1taW5pLXJlbGF0aW9uLWljb24gZzN3LWljb25cIiA6Y2xhc3M9XCJnM3d0ZW1wbGF0ZS5mb250Wyd1bmxpbmsnXVwiIEBjbGljaz1cInVubGlua1JlbGF0aW9uKGluZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgIHYtdC10b29sdGlwOnJpZ2h0LmNyZWF0ZT1cInRvb2x0aXBzLnVubGlua19yZWxhdGlvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgdi1zaG93PVwiIXNob3dBbGxGaWVkcyhpbmRleClcIiB2LWZvcj1cImF0dHJpYnV0ZSBpbiByZWxhdGlvbkF0dHJpYnV0ZXNTdWJzZXQocmVsYXRpb24pXCI+XG4gICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImlzTWVkaWEoYXR0cmlidXRlLnZhbHVlKSAmJiBnZXRWYWx1ZShhdHRyaWJ1dGUudmFsdWUpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcmV2aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJnZXRWYWx1ZShhdHRyaWJ1dGUudmFsdWUpXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJldmlld3R5cGVcIiA6Y2xhc3M9XCJnZXRNZWRpYVR5cGUoYXR0cmlidXRlLnZhbHVlLm1pbWVfdHlwZSkudHlwZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLTJ4XCIgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFtnZXRNZWRpYVR5cGUoYXR0cmlidXRlLnZhbHVlLm1pbWVfdHlwZSkudHlwZV1cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpbGVuYW1lXCI+e3sgZ2V0RmlsZU5hbWUoYXR0cmlidXRlLnZhbHVlKSB9fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICA8YSB2LWVsc2UtaWY9XCJpc0xpbmsoYXR0cmlidXRlKVwiIDpocmVmPVwiZ2V0VmFsdWUoYXR0cmlidXRlLnZhbHVlKVwiIHRhcmdldD1cIl9ibGFua1wiPnt7IGdldFZhbHVlKGF0dHJpYnV0ZS52YWx1ZSkgfX08L2E+XG4gICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2U+e3sgZ2V0VmFsdWUoYXR0cmlidXRlLnZhbHVlKSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBjb25zdCB0ID0gZzN3c2RrLmNvcmUuaTE4bi50UGx1Z2luO1xuICBjb25zdCB7dG9SYXdUeXBlfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuICBjb25zdCBSZWxhdGlvblNlcnZpY2UgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9yZWxhdGlvbnNlcnZpY2UnKTtcbiAgY29uc3Qge0xheWVyfSA9IGczd3Nkay5jb3JlLmxheWVyO1xuICBjb25zdCB7ZmllbGRzTWl4aW4sIHJlc2l6ZU1peGluLCBtZWRpYU1peGlufSA9IGczd3Nkay5ndWkudnVlLk1peGlucztcblxuICBsZXQgcmVsYXRpb25zVGFibGU7XG5cbiAgICBleHBvcnQgZGVmYXVsdCB7XG4gICAgICBtaXhpbnM6IFttZWRpYU1peGluLCBmaWVsZHNNaXhpbiwgcmVzaXplTWl4aW5dLFxuICAgICAgbmFtZTogJ2czdy1yZWxhdGlvbicsXG4gICAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3dBZGRWZWN0b3JSZWxhdGlvblRvb2xzOiBmYWxzZSxcbiAgICAgICAgICBjb3B5bGF5ZXJpZDogbnVsbCwvL3VzZWQgZm9yIHZlY3RvciByZWxhdGlvbiBsYXllclxuICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgc2hvd2FsbGZpZWxkc2luZGV4OiBudWxsLFxuICAgICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICBhZGRfcmVsYXRpb246IFwicGx1Z2lucy5lZGl0aW5nLmZvcm0ucmVsYXRpb25zLnRvb2x0aXBzLmFkZF9yZWxhdGlvblwiLFxuICAgICAgICAgICAgbGlua19yZWxhdGlvbjogXCJwbHVnaW5zLmVkaXRpbmcuZm9ybS5yZWxhdGlvbnMudG9vbHRpcHMubGlua19yZWxhdGlvblwiLFxuICAgICAgICAgICAgb3Blbl9yZWxhdGlvbl90b29sOiBcInBsdWdpbnMuZWRpdGluZy5mb3JtLnJlbGF0aW9ucy50b29sdGlwcy5vcGVuX3JlbGF0aW9uX3Rvb2xzXCIsXG4gICAgICAgICAgICB1bmxpbmtfcmVsYXRpb246IFwicGx1Z2lucy5lZGl0aW5nLmZvcm0ucmVsYXRpb25zLnRvb2x0aXBzLnVubGlua19yZWxhdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICBwbGFjZWhvbGRlcnNlYXJjaDogYCR7dCgnZWRpdGluZy5zZWFyY2gnKX0gLi4uYFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWV0aG9kczoge1xuICAgICAgICByZXNpemUoKXtcbiAgICAgICAgICBpZiAodGhpcy5hY3RpdmUgJiYgdGhpcy4kZWwuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKXtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1Cb2R5SGVpZ2h0ID0gJChcIi5nM3dmb3JtX2JvZHlcIikuaGVpZ2h0KCk7XG4gICAgICAgICAgICBjb25zdCBmb3JtRm9vdGVySGVpZ2h0ID0gJCgnLmczd2Zvcm1fZm9vdGVyJykuaGVpZ2h0KCk7XG4gICAgICAgICAgICBjb25zdCByZWxhdGlvbkhlYWRlclRpdGxlID0gJCh0aGlzLiRyZWZzLnJlbGF0aW9uX2hlYWRlcl90aXRsZSkub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9uSGVhZGVyVG9vbHMgPSAkKHRoaXMuJHJlZnMucmVsYXRpb25faGVhZGVyX3Rvb2xzKS5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgY29uc3QgZGF0YVRhYmxlc19zY3JvbGxIZWFkX0hlaWdodCA9ICQodGhpcy4kZWwpLmZpbmQoJy5kYXRhVGFibGVzX3Njcm9sbEhlYWQnKS5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgY29uc3QgZGF0YVRhYmxlc19wYWdpbmF0ZV9IZWlnaHQgPSAkKHRoaXMuJGVsKS5maW5kKCcuZGF0YVRhYmxlc19wYWdpbmF0ZS5wYWdpbmdfc2ltcGxlX251bWJlcnMnKS5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgY29uc3QgZWRpdGluZ1NhdmVBbGxGb3JtSGVpZ2h0ID0gJCgnLmVkaXRpbmctc2F2ZS1hbGwtZm9ybScpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICBsZXQgZGF0YVRhYmxlc19zY3JvbGxCb2R5X0hlaWdodCA9IGZvcm1Cb2R5SGVpZ2h0IC0gZm9ybUZvb3RlckhlaWdodCAtIHJlbGF0aW9uSGVhZGVyVGl0bGUgLSByZWxhdGlvbkhlYWRlclRvb2xzIC0gZGF0YVRhYmxlc19zY3JvbGxIZWFkX0hlaWdodCAtIGRhdGFUYWJsZXNfcGFnaW5hdGVfSGVpZ2h0IC0gZWRpdGluZ1NhdmVBbGxGb3JtSGVpZ2h0O1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWZWN0b3JSZWxhdGlvbiAmJiB0aGlzLnNob3dBZGRWZWN0b3JSZWxhdGlvblRvb2xzKSB7XG4gICAgICAgICAgICAgIGRhdGFUYWJsZXNfc2Nyb2xsQm9keV9IZWlnaHQgPSBkYXRhVGFibGVzX3Njcm9sbEJvZHlfSGVpZ2h0IC0gJCh0aGlzLiRyZWZzLnJlbGF0aW9uX3ZlY3Rvcl90b29scykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQodGhpcy4kcmVmcy5yZWxhdGlvbl9ib2R5KS5maW5kKCdkaXYuZGF0YVRhYmxlc19zY3JvbGxCb2R5JykuaGVpZ2h0KGRhdGFUYWJsZXNfc2Nyb2xsQm9keV9IZWlnaHQpO1xuICAgICAgICAgICAgcmVsYXRpb25zVGFibGUgJiYgcmVsYXRpb25zVGFibGUuY29sdW1ucy5hZGp1c3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVubGlua1JlbGF0aW9uKGluZGV4KSB7XG4gICAgICAgICAgdGhpcy5fc2VydmljZS51bmxpbmtSZWxhdGlvbihpbmRleClcbiAgICAgICAgfSxcbiAgICAgICAgY29weUZlYXR1cmVGcm9tT3RoZXJMYXllcigpe1xuICAgICAgICAgIGNvbnN0IEVkaXRpbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZXMvZWRpdGluZ3NlcnZpY2UnKTtcbiAgICAgICAgICBjb25zdCBjb3B5TGF5ZXIgPSB0aGlzLmNvcHlGZWF0dXJlTGF5ZXJzLmZpbmQobGF5ZXJPYmogPT4gbGF5ZXJPYmouaWQgPT09IHRoaXMuY29weWxheWVyaWQpO1xuICAgICAgICAgIGlmIChjb3B5TGF5ZXIuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gRWRpdGluZ1NlcnZpY2UuZ2V0TWFwU2VydmljZSgpLmdldExheWVyQnlJZCh0aGlzLmNvcHlsYXllcmlkKTtcbiAgICAgICAgICAgIHRoaXMuX3NlcnZpY2UuYWRkUmVsYXRpb25Gcm9tT3RoZXJMYXllcih7XG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICBleHRlcm5hbDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gRWRpdGluZ1NlcnZpY2UuZ2V0UHJvamVjdExheWVyQnlJZCh0aGlzLmNvcHlsYXllcmlkKTtcbiAgICAgICAgICAgIHRoaXMuX3NlcnZpY2UuYWRkUmVsYXRpb25Gcm9tT3RoZXJMYXllcih7XG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICBleHRlcm5hbDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWRkVmVjdG9yUmVsYXRpb24oKXtcbiAgICAgICAgICB0aGlzLl9zZXJ2aWNlLmFkZFJlbGF0aW9uKCk7XG4gICAgICAgICAgdGhpcy5zaG93QWRkVmVjdG9yUmVsYXRpb25Ub29scyA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBhZGRSZWxhdGlvbkFuZExpbmsoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNWZWN0b3JSZWxhdGlvbiAmJiB0aGlzLmNvcHlGZWF0dXJlTGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zaG93QWRkVmVjdG9yUmVsYXRpb25Ub29scyA9ICEgdGhpcy5zaG93QWRkVmVjdG9yUmVsYXRpb25Ub29scztcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuJG5leHRUaWNrKCk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICAgIH0gZWxzZSB0aGlzLl9zZXJ2aWNlLmFkZFJlbGF0aW9uKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0VG9vbChyZWxhdGlvbnRvb2wsIGluZGV4KSB7XG4gICAgICAgICAgdGhpcy5fc2VydmljZS5zdGFydFRvb2wocmVsYXRpb250b29sLCBpbmRleClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHt9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSlcbiAgICAgICAgfSxcbiAgICAgICAgbGlua1JlbGF0aW9uKCkge1xuICAgICAgICAgIHRoaXMuX3NlcnZpY2UubGlua1JlbGF0aW9uKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUV4dGVybmFsS2V5VmFsdWVSZWxhdGlvbnMoaW5wdXQpIHtcbiAgICAgICAgICB0aGlzLl9zZXJ2aWNlLnVwZGF0ZUV4dGVybmFsS2V5VmFsdWVSZWxhdGlvbnMoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBpc1JlcXVpcmVkKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlLmlzUmVxdWlyZWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpb25BdHRyaWJ1dGVzU3Vic2V0KHJlbGF0aW9uKSB7XG4gICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLnJlbGF0aW9uc0ZpZWxkcyhyZWxhdGlvbik7XG4gICAgICAgICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGQudmFsdWUpKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7bGFiZWwsIHZhbHVlfSA9IGZpZWxkO1xuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGlvbnNBdHRyaWJ1dGVzU3Vic2V0TGVuZ3RoKHJlbGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRpb25BdHRyaWJ1dGVzU3Vic2V0KHJlbGF0aW9uKS5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aW9uc0ZpZWxkcyhyZWxhdGlvbikge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlLnJlbGF0aW9uRmllbGRzKHJlbGF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd0FsbFJlbGF0aW9uRmllbGRzKGluZGV4KSB7XG4gICAgICAgICAgdGhpcy5zaG93YWxsZmllbGRzaW5kZXggPSB0aGlzLnNob3dhbGxmaWVsZHNpbmRleCA9PSBpbmRleCA/IG51bGwgOiBpbmRleDtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd0FsbEZpZWRzKGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd2FsbGZpZWxkc2luZGV4ID09IGluZGV4O1xuICAgICAgICB9LFxuICAgICAgICBnZXRSZWxhdGlvblRvb2xzKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlLmdldFJlbGF0aW9uVG9vbHMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNMaW5rKGZpZWxkKXtcbiAgICAgICAgICByZXR1cm4gWydwaG90bycsICdsaW5rJ10uaW5kZXhPZih0aGlzLmdldEZpZWxkVHlwZShmaWVsZCkpICE9PSAtMTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgJiYgdG9SYXdUeXBlKHZhbHVlKSA9PT0gJ09iamVjdCcpIHZhbHVlID0gdmFsdWUudmFsdWU7XG4gICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHZhbHVlLmluZGV4T2YoJ19uZXdfJykgPT09IDApIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRGaWxlTmFtZSh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHZhbHVlKS5zcGxpdCgnLycpLnBvcCgpO1xuICAgICAgICB9LFxuICAgICAgICBfc2V0RGF0YVRhYmxlU2VhcmNoKCkge1xuICAgICAgICAgICQoJyNmaWx0ZXJSZWxhdGlvbicpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVsYXRpb25zVGFibGUuc2VhcmNoKCQodGhpcykudmFsKCkpLmRyYXcoKSA7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIF9jcmVhdGVEYXRhVGFibGUoKSB7XG4gICAgICAgICAgcmVsYXRpb25zVGFibGUgPSAkKCcuZzN3Zm9ybS1yZWxhdGlvbi10YWJsZScpLkRhdGFUYWJsZSh7XG4gICAgICAgICAgICBcInNjcm9sbFhcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwib3JkZXJcIjogWyAyLCAnYXNjJyBdLFxuICAgICAgICAgICAgXCJkZXN0cm95XCI6IHRydWUsXG4gICAgICAgICAgICBcInNjcm9sbFJlc2l6ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzY3JvbGxDb2xsYXBzZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJwYWdlTGVuZ3RoXCI6IDEwLFxuICAgICAgICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICAgICAgICB7IG9yZGVyYWJsZTogZmFsc2UsIHRhcmdldHM6IFswLCAxXSB9XVxuICAgICAgICAgIH0pO1xuICAgICAgICAgICQoXCIuZGF0YVRhYmxlc19maWx0ZXIsIC5kYXRhVGFibGVzX2xlbmd0aFwiKS5oaWRlKCk7XG4gICAgICAgICAgdGhpcy5fc2V0RGF0YVRhYmxlU2VhcmNoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3lUYWJsZSgpe1xuICAgICAgICAgIGlmIChyZWxhdGlvbnNUYWJsZSkge1xuICAgICAgICAgICAgcmVsYXRpb25zVGFibGUgPSByZWxhdGlvbnNUYWJsZS5kZXN0cm95KCk7XG4gICAgICAgICAgICByZWxhdGlvbnNUYWJsZSA9IG51bGw7XG4gICAgICAgICAgICAkKCcjZmlsdGVyUmVsYXRpb24nKS5vZmYoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgcmVsYXRpb25zTGVuZ3RoKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlbGF0aW9ucy5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGZpZWxkcmVxdWlyZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NlcnZpY2UuaXNSZXF1aXJlZCgpO1xuICAgICAgICB9LFxuICAgICAgICBlbmFibGVBZGRMaW5rQnV0dG9ucygpIHtcbiAgICAgICAgICByZXR1cm4gIXRoaXMucmVsYXRpb25zLmxlbmd0aCB8fCAodGhpcy5yZWxhdGlvbnMubGVuZ3RoICYmIHRoaXMucmVsYXRpb24udHlwZSAhPT0gJ09ORScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2F0Y2g6e1xuICAgICAgICByZWxhdGlvbnModXBkYXRlZHJlbGF0aW9ucyl7XG4gICAgICAgICAgdXBkYXRlZHJlbGF0aW9ucy5sZW5ndGggPT09IDAgJiYgdGhpcy5kZXN0cm95VGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJlZm9yZUNyZWF0ZSgpe1xuICAgICAgICB0aGlzLmRlbGF5VHlwZSA9ICdkZWJvdW5jZSc7XG4gICAgICB9LFxuICAgICAgY3JlYXRlZCgpIHtcbiAgICAgICAgY29uc3QgRWRpdGluZ1NlcnZpY2UgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9lZGl0aW5nc2VydmljZScpO1xuICAgICAgICBjb25zdCByZWxhdGlvbkxheWVyID0gRWRpdGluZ1NlcnZpY2UuZ2V0TGF5ZXJCeUlkKHRoaXMucmVsYXRpb24uY2hpbGQpO1xuICAgICAgICB0aGlzLmlzVmVjdG9yUmVsYXRpb24gPSByZWxhdGlvbkxheWVyLmdldFR5cGUoKSA9PT0gTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1I7XG4gICAgICAgIC8vIEluIGNhc2Ugb2YgdmVjdG9yIHJlbGF0aW9uXG4gICAgICAgIGlmICh0aGlzLmlzVmVjdG9yUmVsYXRpb24pIHtcbiAgICAgICAgICAvLyBnZXQgYWxsIHByb2plY3QgbGF5ZXIgdGhhdCBoYXMgc2FtZSBnZW9tZXRyeVxuICAgICAgICAgIHRoaXMuY29weUZlYXR1cmVMYXllcnMgPSBFZGl0aW5nU2VydmljZS5nZXRQcm9qZWN0TGF5ZXJzV2l0aFNhbWVHZW9tZXRyeU9mTGF5ZXIocmVsYXRpb25MYXllciwge2V4Y2x1ZGU6W3RoaXMucmVsYXRpb24uZmF0aGVyXX0pLm1hcChsYXllciA9PiAoe1xuICAgICAgICAgICAgaWQ6IGxheWVyLmdldElkKCksXG4gICAgICAgICAgICBuYW1lOiBsYXllci5nZXROYW1lKCksXG4gICAgICAgICAgICBleHRlcm5hbDogZmFsc2VcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc3QgZXh0ZXJuYWxMYXllcldpdGhTYW1lR2VvbWV0cnlUeXBlID0gRWRpdGluZ1NlcnZpY2UuZ2V0RXh0ZXJuYWxMYXllcnNXaXRoU2FtZUdlb21ldHJ5T2ZMYXllcihyZWxhdGlvbkxheWVyKTtcbiAgICAgICAgICBleHRlcm5hbExheWVyV2l0aFNhbWVHZW9tZXRyeVR5cGUuZm9yRWFjaChleHRlcm5hbExheWVyID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29weUZlYXR1cmVMYXllcnMucHVzaCh7XG4gICAgICAgICAgICAgIGlkOiBleHRlcm5hbExheWVyLmdldCgnaWQnKSxcbiAgICAgICAgICAgICAgbmFtZTogZXh0ZXJuYWxMYXllci5nZXQoJ25hbWUnKSxcbiAgICAgICAgICAgICAgZXh0ZXJuYWw6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHRoaXMuY29weUZlYXR1cmVMYXllcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBzb3J0IGJ5IG5hbWVcbiAgICAgICAgICAgIHRoaXMuY29weUZlYXR1cmVMYXllcnMuc29ydCgoe25hbWU6bmFtZTF9LCB7bmFtZTpuYW1lMn0pID0+IHtcbiAgICAgICAgICAgICAgbmFtZTEgPSBuYW1lMS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICBuYW1lMiA9IG5hbWUyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIGlmIChuYW1lMSA8IG5hbWUyKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgIGlmIChuYW1lMSA+IG5hbWUyKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGluIGNhc2Ugb2YgZmluIGF0IGxlYXN0IG9uZSBsYXllciwgc2V0IGN1cnJlbnQgbGF5ZXIgaWRcbiAgICAgICAgICAgIHRoaXMuY29weWxheWVyaWQgPSB0aGlzLmNvcHlGZWF0dXJlTGF5ZXJzWzBdLmlkO1xuICAgICAgICAgIH0gZWxzZSB0aGlzLmNvcHlsYXllcmlkID0gbnVsbDtcblxuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9hZEV2ZW50dWFsbHlSZWxhdGlvblZhbHVlc0ZvcklucHV0cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zZXJ2aWNlID0gbmV3IFJlbGF0aW9uU2VydmljZSh0aGlzLmxheWVySWQsIHtcbiAgICAgICAgICByZWxhdGlvbjogdGhpcy5yZWxhdGlvbiwgLy8gbWFpbiByZWxhdGlvbiBiZXR3ZWVuIGxheWVySWQgKGN1cnJlbnQgaW4gZWRpdGluZylcbiAgICAgICAgICByZWxhdGlvbnM6IHRoaXMucmVsYXRpb25zIC8vIHJlbGF0aW9uIHJlbGF0ZWQgdG8gY3VycmVudCBmZWF0dXJlIG9mIGN1cnJlbnQgbGF5ZXIgaW4gZWRpdGluZ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYXBhYmlsaXRpZXMgPSB0aGlzLl9zZXJ2aWNlLmdldEVkaXRpbmdDYXBhYmlsaXRpZXMoKTtcbiAgICAgICAgdGhpcy5mb3JtZXZlbnRidXMuJG9uKCdjaGFuZ2VpbnB1dCcsIHRoaXMudXBkYXRlRXh0ZXJuYWxLZXlWYWx1ZVJlbGF0aW9ucyk7XG4gICAgICB9LFxuICAgICAgYXN5bmMgYWN0aXZhdGVkKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2hvd0FkZFZlY3RvclJlbGF0aW9uVG9vbHMgPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLmxvYWRFdmVudHVhbGx5UmVsYXRpb25WYWx1ZXNGb3JJbnB1dHMpIHtcbiAgICAgICAgICBjb25zdCBFZGl0aW5nU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2VkaXRpbmdzZXJ2aWNlJyk7XG4gICAgICAgICAgRWRpdGluZ1NlcnZpY2UucnVuRXZlbnRIYW5kbGVyKHtcbiAgICAgICAgICAgIHR5cGU6ICdzaG93LXJlbGF0aW9uLWVkaXRpbmcnLFxuICAgICAgICAgICAgaWQ6IEVkaXRpbmdTZXJ2aWNlLl9nZXRSZWxhdGlvbklkKHtcbiAgICAgICAgICAgICAgbGF5ZXJJZDogdGhpcy5sYXllcklkLFxuICAgICAgICAgICAgICByZWxhdGlvbjogdGhpcy5yZWxhdGlvblxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjb21wb25lbnQ6IHRoaXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmxvYWRFdmVudHVhbGx5UmVsYXRpb25WYWx1ZXNGb3JJbnB1dHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuJG5leHRUaWNrKCk7XG4gICAgICAgICFyZWxhdGlvbnNUYWJsZSAmJiB0aGlzLnJlbGF0aW9uc0xlbmd0aCAmJiB0aGlzLl9jcmVhdGVEYXRhVGFibGUoKTtcbiAgICAgICAgdGhpcy5yZXNpemUoKTtcblxuICAgICAgfSxcbiAgICAgIGRlYWN0aXZhdGVkKCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lUYWJsZSgpO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubG9hZEV2ZW50dWFsbHlSZWxhdGlvblZhbHVlc0ZvcklucHV0cyA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8c2VjdGlvbiBjbGFzcz1cImVkaXRpbmctc2F2ZS1hbGwtZm9ybVwiPlxuICAgIDxiYXItbG9hZGVyIDpsb2FkaW5nPVwibG9hZGluZ1wiPjwvYmFyLWxvYWRlcj5cbiAgICA8ZGl2IGNsYXNzPVwiZWRpdGluZy1idXR0b25cIiAgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOyBkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kOyB3aWR0aDogMTAwJTtcIj5cbiAgICAgIDxzcGFuIHYtZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIEBjbGljay5zdG9wLnByZXZlbnQ9XCJzYXZlXCI+XG4gICAgICAgIDxpIGNsYXNzPVwic2tpbi1jb2xvclwiIDpjbGFzcz1cImczd3RlbXBsYXRlLmZvbnRbJ3NhdmUnXVwiIHN0eWxlPVwiZm9udC1zaXplOiAxLjhlbTsgcGFkZGluZzogNXB4OyBib3JkZXItcmFkaXVzOiA1cHg7IGN1cnNvcjogcG9pbnRlcjsgYm94LXNoYWRvdzogIDAgM3B4IDVweCByZ2JhKDAsMCwwLDAuNSk7IG1hcmdpbjogNXB4O1wiID48L2k+XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvc2VjdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGNvbnN0IHtXb3JrZmxvd3NTdGFja30gPSBnM3dzZGsuY29yZS53b3JrZmxvdztcbiAgY29uc3Qge0Zvcm1TZXJ2aWNlfSA9IGczd3Nkay5ndWkudnVlLnNlcnZpY2VzO1xuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgdXBkYXRlOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB9LFxuICAgICAgdmFsaWQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhblxuICAgICAgfVxuICAgIH0sXG4gICAgbmFtZTogJ1NhdmVhbGwnLFxuICAgIGRhdGEoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICBkaXNhYmxlZCgpe1xuICAgICAgICByZXR1cm4gIXRoaXMuZW5hYmxlZCAmJiAoIXRoaXMudmFsaWQgfHwgIXRoaXMudXBkYXRlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIHNhdmUoKXtcbiAgICAgICAgY29uc3QgRWRpdGluZ1NlcnZpY2UgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9lZGl0aW5nc2VydmljZScpO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCBzYXZlUHJvbWlzZXMgPSBbLi4uV29ya2Zsb3dzU3RhY2suX3dvcmtmbG93c11cbiAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgLm1hcCh3b3JrZmxvdyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2Zsb3cuZ2V0TGFzdFN0ZXAoKVxuICAgICAgICAgICAgICAuZ2V0VGFzaygpXG4gICAgICAgICAgICAgIC5zYXZlQWxsKHdvcmtmbG93LmdldENvbnRleHQoKS5zZXJ2aWNlLnN0YXRlLmZpZWxkcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIFByb21pc2UuYWxsU2V0dGxlZChzYXZlUHJvbWlzZXMpXG4gICAgICAgICAgLnRoZW4oKCk9PiB7XG4gICAgICAgICAgICBFZGl0aW5nU2VydmljZS5jb21taXQoe1xuICAgICAgICAgICAgICBtb2RhbDogZmFsc2VcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBXb3JrZmxvd3NTdGFjay5fd29ya2Zsb3dzLmZvckVhY2god29ya2Zsb3cgPT4gd29ya2Zsb3cuZ2V0Q29udGV4dCgpLnNlcnZpY2Uuc2V0VXBkYXRlKGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgZm9yY2U6IGZhbHNlXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pLmZhaWwoKCk9Pnt9KVxuICAgICAgICAgICAgICAuYWx3YXlzKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIGlmIChXb3JrZmxvd3NTdGFjay5nZXRMZW5ndGgoKSA+IDEpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gV29ya2Zsb3dzU3RhY2suX3dvcmtmbG93c1xuICAgICAgICAgIC5zbGljZSgwLCBXb3JrZmxvd3NTdGFjay5nZXRMZW5ndGgoKSAtIDEpXG4gICAgICAgICAgLnJlZHVjZSgoYWNjdW11bGF0b3IsIHdvcmtmbG93KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7dmFsaWQ9dHJ1ZSwgdXBkYXRlPWZhbHNlfSA9ICh3b3JrZmxvdy5nZXRDb250ZXh0KCkuc2VydmljZSBpbnN0YW5jZW9mIEZvcm1TZXJ2aWNlKSA/IHdvcmtmbG93LmdldENvbnRleHQoKS5zZXJ2aWNlLmdldFN0YXRlKCkgOiB7fTtcbiAgICAgICAgICAgIHJldHVybiB2YWxpZCAmJiB1cGRhdGUgJiYgYWNjdW11bGF0b3I7XG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJnM3ctc2VsZWN0LWVkaXRhYmxlLWxheWVycy1jb250ZW50XCIgY2xhc3M9XCJza2luLWNvbG9yXCI+XG4gICAgPGxhYmVsIGZvcj1cImczdy1zZWxlY3QtZWRpdGFibGUtbGF5ZXJzLXRvLXNob3dcIiB2LXQ9XCInTGF5ZXJzJ1wiPjwvbGFiZWw+XG4gICAgPHNlbGVjdCBpZD1cImczdy1zZWxlY3QtZWRpdGFibGUtbGF5ZXJzLXRvLXNob3dcIiBtdWx0aXBsZT1cIm11bHRpcGxlXCIgY2xlYXI9XCJ0cnVlXCIgdi1zZWxlY3QyPVwiJ3NlbGVjdGVkbGF5ZXJzJ1wiPlxuICAgICAgPG9wdGlvbiB2LWZvcj1cImVkaXRpbmdsYXllciBpbiBlZGl0aW5nbGF5ZXJzXCIgOnZhbHVlPVwiZWRpdGluZ2xheWVyLmlkXCIgOmtleT1cImVkaXRpbmdsYXllci5pZFwiPnt7ZWRpdGluZ2xheWVyLm5hbWV9fTwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGNvbnN0IEVkaXRpbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZXMvZWRpdGluZ3NlcnZpY2UnKTtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ1NlbGVjdGVkaXRpbmdsYXllcnMnLFxuICAgIGRhdGEoKXtcbiAgICAgIGNvbnN0IGVkaXRpbmdsYXllcnMgPSBPYmplY3QuZW50cmllcyhFZGl0aW5nU2VydmljZS5nZXRFZGl0YWJsZUxheWVycygpKS5tYXAoKFtsYXllcklkLCBsYXllcl0pID0+ICh7XG4gICAgICAgIGlkOiBsYXllcklkLFxuICAgICAgICBuYW1lOiBsYXllci5nZXROYW1lKCksXG4gICAgICAgIHRpdGxlOiBsYXllci5nZXRUaXRsZSgpXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RlZGxheWVyczogW10sXG4gICAgICAgIGVkaXRpbmdsYXllcnNcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICBzZWxlY3RlZGxheWVycyhsYXllcnMpe1xuICAgICAgICBpZiAobGF5ZXJzLmxlbmd0aCA+IDApIHRoaXMuZWRpdGluZ2xheWVycy5mb3JFYWNoKCh7aWR9KT0+IHtcbiAgICAgICAgICBjb25zdCBib29sID0gbGF5ZXJzLmluZGV4T2YoaWQpICE9PSAtMTsgLy8gY2hlY2sgaWYgZWRpdGluZyBsYXllciBpcyBzZWxlY3RlZFxuICAgICAgICAgIGNvbnN0IHRvb2xib3ggPSAgRWRpdGluZ1NlcnZpY2UuZ2V0VG9vbEJveEJ5SWQoaWQpOyAvLyBzaG93IG9yIG5vdCB0b29sYm94IG9mIGxheWVyIGJhc2VkIG9uIGJvb2wgdmFsdWVcbiAgICAgICAgICB0b29sYm94LnNldFNob3coYm9vbCk7XG4gICAgICAgICAgaWYgKCFib29sKSAge1xuICAgICAgICAgICAgaWYgKHRvb2xib3guc3RhdGUuZWRpdGluZy5oaXN0b3J5LmNvbW1pdClcbiAgICAgICAgICAgICAgRWRpdGluZ1NlcnZpY2UuY29tbWl0KHt0b29sYm94fSkuYWx3YXlzKCgpID0+IHRvb2xib3guc3RvcCgpKTtcbiAgICAgICAgICAgIGVsc2UgdG9vbGJveC5zdG9wKCk7XG4gICAgICAgICAgfSAvLyBpbiBjYXNlIG9mIGJvb2wgPT09IGZhbHNlIChub3Qgc2VsZWN0ZWQpIG5lZWQgdG8gc3RvcCBlZGl0aW5nIG9uIGxheWVyXG4gICAgICAgIH0pOyBlbHNlIHRoaXMuZWRpdGluZ2xheWVycy5mb3JFYWNoKCh7aWR9KSA9PiBFZGl0aW5nU2VydmljZS5nZXRUb29sQm94QnlJZChpZCkuc2V0U2hvdyh0cnVlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICNnM3ctc2VsZWN0LWVkaXRhYmxlLWxheWVycy1jb250ZW50IHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG4gICNnM3ctc2VsZWN0LWVkaXRhYmxlLWxheWVycy1jb250ZW50IGxhYmVsIHtcbiAgICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50O1xuICB9XG4gICNnM3ctc2VsZWN0LWVkaXRhYmxlLWxheWVycy10by1zaG93IHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbjwvc3R5bGU+XG4iLCI8IS0tIE9SSUdJTkFMIFNPVVJDRTogLS0+XG48IS0tIHRhYmxlL3RhYmxlLmh0bWxAdjMuNCAtLT5cbjwhLS0gdGFibGUuanNAdjMuNCAtLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwiZWRpdGluZ190YWJsZVwiIGNsYXNzPVwiZzN3LWVkaXRpbmctdGFibGVcIj5cbiAgICA8ZGl2IHJlZj1cImVkaXRpbmdfdGFibGVfaGVhZGVyXCIgY2xhc3M9XCJlZGl0aW5nX3RhYmxlX2hlYWRlclwiPlxuICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgYWxpZ24taXRlbXM6IGJhc2VsaW5lXCI+XG4gICAgICAgIDxoMyBjbGFzcz1cImVkaXRpbmdfdGFibGVfdGl0bGVcIj57eyBzdGF0ZS50aXRsZSB9fTwvaDM+XG4gICAgICAgIDxoLXJlc2l6ZSBAaF9zaXplX2NoYW5nZT1cImNoYW5nZVNpemVcIj48L2gtcmVzaXplPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZWRpdGluZ190YWJsZV9yZWxhdGlvbl9tZXNzYWdnZVwiICB2LWlmPVwic3RhdGUuaXNyZWxhdGlvblwiIHN0eWxlPVwiZm9udC13ZWlnaHQ6IGJvbGRcIiB2LXQtcGx1Z2luPVwiJ2VkaXRpbmcucmVsYXRpb24udGFibGUuaW5mbydcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDx0YWJsZSB2LWlmPVwic2hvd1wiIGNsYXNzPVwiZGlzcGxheVwiIHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICAgICAgPHRoZWFkPlxuICAgICAgPHRyPlxuICAgICAgICA8dGggdi1pZj1cIiFzdGF0ZS5pc3JlbGF0aW9uXCIgc3R5bGU9XCJtYXgtd2lkdGg6IDYwcHhcIj48L3RoPlxuICAgICAgICA8dGggdi1pZj1cInN0YXRlLmlzcmVsYXRpb25cIj48L3RoPlxuICAgICAgICA8dGggdi1mb3I9XCJoZWFkZXIgaW4gc3RhdGUuaGVhZGVyc1wiPnt7IGhlYWRlci5sYWJlbCB9fTwvdGg+XG4gICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgIDx0ciB2LWZvcj1cIihmZWF0dXJlLCBpbmRleCkgaW4gc3RhdGUuZmVhdHVyZXNcIiA6a2V5PVwiZmVhdHVyZS5fX2dpczN3X2ZlYXR1cmVfdWlkXCIgOmlkPVwiZmVhdHVyZS5fX2dpczN3X2ZlYXR1cmVfdWlkXCI+XG4gICAgICAgIDx0ZCB2LWlmPVwiIXN0YXRlLmlzcmVsYXRpb25cIj5cbiAgICAgICAgICA8ZGl2IGlkPVwidGFibGUtZWRpdGluZy10b29sc1wiIHN0eWxlPVwiZGlzcGxheTpmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XCI+XG4gICAgICAgICAgICA8aSB2LWlmPVwic2hvd1Rvb2woJ2NoYW5nZV9hdHRyX2ZlYXR1cmUnKVwiIDpjbGFzcz1cImczd3RlbXBsYXRlLmZvbnRbJ3BlbmNpbCddXCIgY2xhc3M9XCJnM3ctaWNvbiBza2luLXRvb2x0aXAtcmlnaHRcIiAgZGF0YS1wbGFjZW1lbnQ9XCJyaWdodFwiICBzdHlsZT1cImNvbG9yOiMzMGNjZTc7XCIgdi10LXRpdGxlOnBsdWdpbj1cIidlZGl0aW5nLnRhYmxlLmVkaXQnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgQGNsaWNrLnN0b3A9XCJlZGl0RmVhdHVyZShmZWF0dXJlLl9fZ2lzM3dfZmVhdHVyZV91aWQpXCI+PC9pPlxuICAgICAgICAgICAgPGkgdi1pZj1cInNob3dUb29sKCdhZGRfZmVhdHVyZScpXCIgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsnY29weS1wYXN0ZSddXCIgY2xhc3M9XCJnM3ctaWNvbiBza2luLXRvb2x0aXAtcmlnaHRcIiAgZGF0YS1wbGFjZW1lbnQ9XCJyaWdodFwiICBzdHlsZT1cImNvbG9yOiNkOThiMTQ7IHBhZGRpbmc6IDVweCA3cHggNXB4IDdweDtcIiB2LXQtdGl0bGU6cGx1Z2luPVwiJ2VkaXRpbmcudGFibGUuY29weSdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBAY2xpY2suc3RvcD1cImNvcHlGZWF0dXJlKGZlYXR1cmUuX19naXMzd19mZWF0dXJlX3VpZClcIj48L2k+XG4gICAgICAgICAgICA8aSB2LWlmPVwic2hvd1Rvb2woJ2RlbGV0ZV9mZWF0dXJlJylcIiA6Y2xhc3M9XCJnM3d0ZW1wbGF0ZS5mb250Wyd0cmFzaC1vJ11cIiBjbGFzcz1cImczdy1pY29uIHNraW4tdG9vbHRpcC1yaWdodFwiICBkYXRhLXBsYWNlbWVudD1cInJpZ2h0XCIgIHN0eWxlPVwiY29sb3I6cmVkO1wiIHYtdC10aXRsZTpwbHVnaW49XCInZWRpdGluZy50YWJsZS5kZWxldGUnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgQGNsaWNrLnN0b3A9XCJkZWxldGVGZWF0dXJlKGZlYXR1cmUuX19naXMzd19mZWF0dXJlX3VpZClcIj48L2k+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZCB2LWlmPVwic3RhdGUuaXNyZWxhdGlvblwiPlxuICAgICAgICAgIDxpbnB1dCA6aWQ9XCJgcmVsYXRpb25fXyR7aW5kZXh9YFwiIEBjaGFuZ2U9XCJsaW5rRmVhdHVyZShpbmRleCwgJGV2ZW50KVwiIGNsYXNzPVwibWFnaWMtY2hlY2tib3hcIiB0eXBlPVwiY2hlY2tib3hcIj5cbiAgICAgICAgICA8bGFiZWwgOmZvcj1cImByZWxhdGlvbl9fJHtpbmRleH1gXCI+PC9sYWJlbD5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIHYtaWYgPVwic2hvd1ZhbHVlKGtleSlcIiB2LWZvcj1cIih2YWx1ZSwga2V5KSBpbiBmZWF0dXJlXCIgOmtleT1cImtleVwiPlxuICAgICAgICAgIDxnM3ctbWVkaWEgdi1pZj1cIiBnZXRWYWx1ZSh2YWx1ZSkgJiYgaXNNZWRpYUZpZWxkKGtleSlcIiA6c3RhdGU9XCJ2YWx1ZVwiPjwvZzN3LW1lZGlhPlxuICAgICAgICAgIDxwIHYtZWxzZT57eyBnZXRWYWx1ZSh2YWx1ZSkgfX08L3A+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICAgIDxkaXYgaWQ9XCJidXR0b25zXCIgcmVmPVwidGFibGVfZWRpdGluZ19mb290ZXJfYnV0dG9uc1wiIGNsYXNzPVwidGFibGVfZWRpdGluZ19mb290ZXJfYnV0dG9uc1wiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyBib3R0b206IDEwcHg7IHdpZHRoOiAxMDAlOyBkaXNwbGF5OmZsZXg7IGp1c3RpZnktY29udGVudDogY2VudGVyO1wiPlxuICAgICAgPGJ1dHRvbiB2LXQtcGx1Z2luPVwic3RhdGUuaXNyZWxhdGlvbiA/ICdlZGl0aW5nLmZvcm0uYnV0dG9ucy5zYXZlX2FuZF9iYWNrJyA6ICdlZGl0aW5nLmZvcm0uYnV0dG9ucy5zYXZlJ1wiIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDEwcHhcIiBAY2xpY2s9XCJzYXZlXCI+PC9idXR0b24+XG4gICAgICA8YnV0dG9uIHYtdC1wbHVnaW49XCInZWRpdGluZy5mb3JtLmJ1dHRvbnMuY2FuY2VsJ1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIiBAY2xpY2s9XCJjYW5jZWxcIj48L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBjb25zdCB7YmFzZSwgaW5oZXJpdH0gPSBnM3dzZGsuY29yZS51dGlscztcbiAgY29uc3Qge3Jlc2l6ZU1peGlufSA9IGczd3Nkay5ndWkudnVlLk1peGlucztcbiAgY29uc3QgTWVkaWFfRmllbGQgPSBnM3dzZGsuZ3VpLnZ1ZS5GaWVsZHMubWVkaWFfZmllbGQ7XG4gIGNvbnN0IFRhYmxlU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL3RhYmxlc2VydmljZScpO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnVGFibGUnLFxuICAgIG1peGluczogW3Jlc2l6ZU1peGluXSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAnZzN3LW1lZGlhJzogTWVkaWFfRmllbGRcbiAgICB9LFxuICAgIGRhdGEoKSB7XG4gICAgICB0aGlzLmRhdGFUYWJsZSA9IG51bGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgYXN5bmMgY2hhbmdlU2l6ZSgpe1xuICAgICAgICBhd2FpdCB0aGlzLiRuZXh0VGljaygpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVzaXplKCkpXG4gICAgICB9LFxuICAgICAgc2hvd1Rvb2wodHlwZSl7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmNhcGFiaWxpdGllcy5maW5kKGNhcGFiaWxpdHkgPT4gY2FwYWJpbGl0eSA9PT0gdHlwZSkgIT09IHVuZGVmaW5lZDtcbiAgICAgIH0sXG4gICAgICBhc3luYyByZXNpemUoKXtcbiAgICAgICAgaWYgKHRoaXMuJGVsLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJyl7XG4gICAgICAgICAgYXdhaXQgdGhpcy4kbmV4dFRpY2soKTtcbiAgICAgICAgICBjb25zdCB0YWJsZUhlaWdodCA9ICQoXCIuY29udGVudFwiKS5oZWlnaHQoKTtcbiAgICAgICAgICBjb25zdCBjbG9zZVBhbmVsQmxvY2tIZWlnaHQgPSAkKCcuY2xvc2UtcGFuZWwtYmxvY2snKS5vdXRlckhlaWdodCgpO1xuICAgICAgICAgIGNvbnN0IHRhYmxlSGVhZGVySGVpZ2h0ID0gJCgnI2VkaXRpbmdfdGFibGUgIGRpdi5kYXRhVGFibGVzX3Njcm9sbEhlYWRJbm5lcicpLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgY29uc3QgT3RoZXJFbGVtZW50SGVpZ2h0ID0gICQoJy5lZGl0aW5nX3RhYmxlX3RpdGxlJykub3V0ZXJIZWlnaHQoKSArXG4gICAgICAgICAgICAkKCcuZWRpdGluZ190YWJsZV9oZWFkZXInKS5vdXRlckhlaWdodCgpICtcbiAgICAgICAgICAgICQoJy5lZGl0aW5nX3RhYmxlX3JlbGF0aW9uX21lc3NhZ2dlJykub3V0ZXJIZWlnaHQoKSArXG4gICAgICAgICAgICAkKCcuZGF0YVRhYmxlc19sZW5ndGgnKS5vdXRlckhlaWdodCgpICtcbiAgICAgICAgICAgICQoJy5kYXRhVGFibGVzX3BhZ2luYXRlLnBhZ2luZ19zaW1wbGVfbnVtYmVycycpLm91dGVySGVpZ2h0KCkgK1xuICAgICAgICAgICAgJCgnLmRhdGFUYWJsZXNfaW5mbycpLm91dGVySGVpZ2h0KCkgK1xuICAgICAgICAgICAgJCgnLmRhdGFUYWJsZXNfZmlsdGVyJykub3V0ZXJIZWlnaHQoKSArXG4gICAgICAgICAgICAkKCcudGFibGVfZWRpdGluZ19mb290ZXJfYnV0dG9ucycpLm91dGVySGVpZ2h0KCkgK1xuICAgICAgICAgICAgJCgnI2VkaXRpbmdfdGFibGUgLmRhdGFUYWJsZXNfcGFnaW5hdGUucGFnaW5nX3NpbXBsZV9udW1iZXJzJykub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgICAkKCcjZWRpdGluZ190YWJsZSAgZGl2LmRhdGFUYWJsZXNfc2Nyb2xsQm9keScpLmhlaWdodCh0YWJsZUhlaWdodCAtIGNsb3NlUGFuZWxCbG9ja0hlaWdodCAtIHRhYmxlSGVhZGVySGVpZ2h0IC0gT3RoZXJFbGVtZW50SGVpZ2h0KTtcbiAgICAgICAgICB0aGlzLmRhdGFUYWJsZSAmJiB0aGlzLmRhdGFUYWJsZS5jb2x1bW5zLmFkanVzdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2hvd1ZhbHVlKGtleSkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnN0YXRlLmhlYWRlcnMuZmluZChoZWFkZXIgPT4gaGVhZGVyLm5hbWUgPT09IGtleSk7XG4gICAgICB9LFxuICAgICAgaXNNZWRpYUZpZWxkKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuc2VydmljZS5pc01lZGlhRmllbGQobmFtZSlcbiAgICAgIH0sXG4gICAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UuY2FuY2VsKCk7XG4gICAgICB9LFxuICAgICAgc2F2ZSgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5pc3JlbGF0aW9uID8gdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmxpbmtGZWF0dXJlcyh0aGlzLl9saW5rRmVhdHVyZXMpIDp0aGlzLiRvcHRpb25zLnNlcnZpY2Uuc2F2ZSgpO1xuICAgICAgfSxcbiAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmNhbmNlbCgpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIGRlbGV0ZUZlYXR1cmUodWlkKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSAkKGAjZWRpdGluZ190YWJsZSB0YWJsZSB0ciMke3VpZH1gKTtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmRlbGV0ZUZlYXR1cmUodWlkKS50aGVuKGFzeW5jICgpPT57XG4gICAgICAgICAgdGhpcy5kYXRhVGFibGUucm93KGVsZW1lbnQpLnJlbW92ZSgpLmRyYXcoKTtcbiAgICAgICAgICBhd2FpdCB0aGlzLiRuZXh0VGljaygpO1xuICAgICAgICB9KS5jYXRjaCgoKT0+e30pO1xuICAgICAgfSxcbiAgICAgIGNvcHlGZWF0dXJlKHVpZCl7XG4gICAgICAgIHRoaXMuJG9wdGlvbnMuc2VydmljZS5jb3B5RmVhdHVyZSh1aWQpLnRoZW4oYXN5bmMgZmVhdHVyZSA9PntcbiAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmRhdGFUYWJsZS5kZXN0cm95KCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy4kbmV4dFRpY2soKTtcbiAgICAgICAgICB0aGlzLnNob3cgPSB0cnVlO1xuICAgICAgICAgIGF3YWl0IHRoaXMuJG5leHRUaWNrKCk7XG4gICAgICAgICAgdGhpcy5zZXREYXRhVGFibGUoKTtcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBlZGl0RmVhdHVyZSh1aWQpIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy5zZXJ2aWNlLmVkaXRGZWF0dXJlKHVpZCk7XG4gICAgICB9LFxuICAgICAgbGlua0ZlYXR1cmUoaW5kZXgsIGV2dCkge1xuICAgICAgICBpZiAoZXZ0LnRhcmdldC5jaGVja2VkKSB0aGlzLl9saW5rRmVhdHVyZXMucHVzaChpbmRleCk7XG4gICAgICAgIGVsc2UgdGhpcy5fbGlua0ZlYXR1cmVzID0gdGhpcy5fbGlua0ZlYXR1cmVzLmZpbHRlcihhZGRpbmRleCA9PiBhZGRpbmRleCAhPT0gaW5kZXgpO1xuICAgICAgfSxcbiAgICAgIF9zZXRMYXlvdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRvcHRpb25zLnNlcnZpY2UuX3NldExheW91dCgpO1xuICAgICAgfSxcbiAgICAgIGdldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB2YWx1ZSA9IHZhbHVlLnZhbHVlO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZignX25ld18nKSA9PT0gMCkgdmFsdWUgPSBudWxsO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0RGF0YVRhYmxlKCl7XG4gICAgICAgIHRoaXMuZGF0YVRhYmxlID0gJCgnI2VkaXRpbmdfdGFibGUgdGFibGUnKS5EYXRhVGFibGUoe1xuICAgICAgICAgIFwicGFnZUxlbmd0aFwiOiAxMCxcbiAgICAgICAgICBcInNjcm9sbFhcIjogdHJ1ZSxcbiAgICAgICAgICBcInNjcm9sbENvbGxhcHNlXCI6IHRydWUsXG4gICAgICAgICAgXCJzY3JvbGxSZXNpemVcIjogdHJ1ZSxcbiAgICAgICAgICBcIm9yZGVyXCI6IFsxLCAnYXNjJyBdLFxuICAgICAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgICAgIHsgb3JkZXJhYmxlOiBmYWxzZSwgdGFyZ2V0czogMCB9XG4gICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAnc3RhdGUuZmVhdHVyZXMnKGZlYXR1cmVzKXt9XG4gICAgfSxcbiAgICBiZWZvcmVDcmVhdGUoKSB7XG4gICAgICB0aGlzLmRlbGF5VHlwZSA9ICdkZWJvdW5jZSc7XG4gICAgfSxcbiAgICBhc3luYyBtb3VudGVkKCkge1xuICAgICAgYXdhaXQgdGhpcy4kbmV4dFRpY2soKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzcmVsYXRpb24pIHRoaXMuX2xpbmtGZWF0dXJlcyA9IFtdO1xuICAgICAgdGhpcy5zZXREYXRhVGFibGUoKTtcbiAgICAgICQoJyN0YWJsZS1lZGl0aW5nLXRvb2xzIGknKS50b29sdGlwKCk7XG4gICAgICB0aGlzLiRvcHRpb25zLnNlcnZpY2UuZW1pdCgncmVhZHknKTtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfSxcbiAgICBiZWZvcmVEZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmtGZWF0dXJlcykgdGhpcy5fbGlua0ZlYXR1cmVzID0gbnVsbDtcbiAgICAgIHRoaXMuZGF0YVRhYmxlLmRlc3Ryb3koKTtcbiAgICB9XG4gIH07XG48L3NjcmlwdD5cbiIsIjwhLS0gT1JJR0lOQUwgU09VUkNFOiAtLT5cbjwhLS0gdnVlL2NvbXBvbmVudHMvdG9vbHMuaHRtbEB2My40IC0tPlxuPCEtLSB2dWUvY29tcG9uZW50cy90b29scy5qc0B2My40IC0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgQGNsaWNrLnByZXZlbnQuc3RvcCA9XCJzdGF0ZS5lbmFibGVkICYmIHRvZ2dsZXRvb2woKVwiIHYtaWY9XCJzdGF0ZS52aXNpYmxlXCIgY2xhc3M9XCJlZGl0YnRuXCIgOmNsYXNzPVwieydlbmFibGVkJyA6IHN0YXRlLmVuYWJsZWQsICd0b2dnbGVkJyA6IHN0YXRlLmFjdGl2ZX1cIj5cbiAgICA8aW1nIGhlaWdodD1cIjI1cHhcIiB3aWR0aD1cIjI1cHhcIiA6c3JjPVwicmVzb3VyY2VzdXJsICsgJ2ltYWdlcy8nKyBzdGF0ZS5pY29uXCIgdi10LXRpdGxlOnBsdWdpbj1cImAke3N0YXRlLm5hbWV9YFwiLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgIG5hbWU6ICdUb29sJyxcbiAgICAgIHByb3BzOiBbJ3N0YXRlJyAsJ3Jlc291cmNlc3VybCddLFxuICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7fVxuICAgICAgfSxcbiAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdG9nZ2xldG9vbCgpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmUpIHRoaXMuJGVtaXQoJ3N0b3BhY3RpdmV0b29sJyk7XG4gICAgICAgICAgZWxzZSB0aGlzLiRlbWl0KCdzZXRhY3RpdmV0b29sJywgdGhpcy5zdGF0ZS5pZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuPC9zY3JpcHQ+XG4iLCI8IS0tIE9SSUdJTkFMIFNPVVJDRTogLS0+XG48IS0tIHZ1ZS9jb21wb25lbnRzL3Rvb2xib3guaHRtbEB2My40IC0tPlxuPCEtLSB2dWUvY29tcG9uZW50cy90b29sYm94LmpzQHYzLjQgLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInRvb2xib3hcIiB2LXNob3c9XCJzdGF0ZS5zaG93XCI+XG4gICAgPGRpdiA6Y2xhc3M9XCJ7J2Rpc2FibGVkZGl2JyA6ICFpc0xheWVyUmVhZHkgfHwgIWNhbkVkaXQgfVwiIDppZD1cIidpZF90b29sYm94XycrIHN0YXRlLmlkXCI+XG4gICAgICA8ZGl2IEBjbGljaz1cInNlbGVjdFwiIGNsYXNzPVwicGFuZWxcIiBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDhweDtcIiA6Y2xhc3M9XCJ7J21vYmlsZSc6IGlzTW9iaWxlKCksICd0b29sYm94c2VsZWN0ZWQnOiBzdGF0ZS5zZWxlY3RlZCB9XCI+XG4gICAgICAgIDxkaXYgdi1zaG93PVwiIWlzTGF5ZXJSZWFkeVwiIGNsYXNzPVwiYmFyLWxvYWRlclwiPjwvZGl2PlxuICAgICAgICA8ZGl2IHYtaWY9XCJzdGF0ZS50b29sYm94aGVhZGVyXCIgY2xhc3M9XCJwYW5lbC1oZWFkaW5nIGNvbnRhaW5lclwiIHN0eWxlPVwid2lkdGg6MTAwJTtcIiA6c3R5bGU9XCJ7IGJhY2tncm91bmQ6IHN0YXRlLmNvbG9yfVwiPlxuICAgICAgICAgIDxkaXYgdi1pZj1cImZhdGhlclwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjVweDsgY3Vyc29yOnBvaW50ZXI7XCIgY2xhc3M9XCJwdWxsLWxlZnQgZW5hYmxlZCBkcm9wZG93blwiPlxuICAgICAgICAgICAgPHNwYW4gOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsncmVsYXRpb24nXVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1jb250ZW50IHNraW4tYmFja2dyb3VuZC1jb2xvclwiIHN0eWxlPVwicGFkZGluZzogNXB4OyBib3JkZXItcmFkaXVzOiAzcHg7XCI+XG4gICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJkZXBlbmRlbmN5IGluIHN0YXRlLmVkaXRpbmcuZGVwZW5kZW5jaWVzXCIgc3R5bGU9XCJmb250LXdlaWdodDogYm9sZFwiID57eyBkZXBlbmRlbmN5IH19PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFuZWwtdGl0bGVcIiA6Y2xhc3M9XCJbZmF0aGVyID8gJ2NvbC1tZC02JyA6ICdjb2wtbWQtOCddXCIgdi10LXBsdWdpbjpwcmU9XCInZWRpdGluZy50b29sYm94LnRpdGxlJ1wiPnt7IHN0YXRlLnRpdGxlIH19PC9kaXY+XG4gICAgICAgICAgPGRpdiB2LWRpc2FibGVkPVwiIXN0YXRlLnN0YXJ0c3RvcGVkaXRpbmdcIiBkYXRhLXBsYWNlbWVudD1cImxlZnRcIiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiByZWY9XCJlZGl0aW5nYnV0dG9uXCJcbiAgICAgICAgICAgICAgIEBjbGljay5zdG9wPVwidG9nZ2xlRWRpdGluZ1wiXG4gICAgICAgICAgICAgICBjbGFzcz1cInN0YXJ0LWVkaXRpbmcgZWRpdGJ0biBza2luLXRvb2x0aXAtbGVmdFwiXG4gICAgICAgICAgICAgICA6Y2xhc3M9XCJ7J3B1bGwtcmlnaHQnOiAhaXNNb2JpbGUoKSwgJ2VuYWJsZWQnIDogaXNMYXllclJlYWR5LCAgJ2czdy1pY29uLXRvZ2dsZWQnIDogc3RhdGUuZWRpdGluZy5vbn1cIiB2LXQtdGl0bGU6cGx1Z2luPVwiZWRpdF9sYXllcl90b29sdGlwXCI+XG4gICAgICAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMS4xZW07IHBhZGRpbmc6IDVweDsgIWltcG9ydGFudDtcIiAgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsncGVuY2lsJ11cIj48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YmFyLWxvYWRlciA6bG9hZGluZz1cInN0YXRlLmxvYWRpbmcgfHwgc3RhdGUuY2hhbmdpbmd0b29sc1wiPjwvYmFyLWxvYWRlcj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInBhbmVsLWJvZHlcIiB2LXNob3c9XCIhc3RhdGUuY2hhbmdpbmd0b29sc1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29scy1jb250ZW50IHJvdzFcIiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtd3JhcDogd3JhcDtcIj5cbiAgICAgICAgICAgIDx0b29sIDpzdGF0ZT1cInRvb2xzdGF0ZVwiIDpyZXNvdXJjZXN1cmw9XCJyZXNvdXJjZXN1cmxcIiBAc3RvcGFjdGl2ZXRvb2w9XCJzdG9wQWN0aXZlVG9vbFwiIEBzZXRhY3RpdmV0b29sPVwic2V0QWN0aXZlVG9vbFwiXG4gICAgICAgICAgICAgICAgICB2LWZvcj1cInRvb2xzdGF0ZSBpbiAgdG9vbHNyb3cxXCIgOmtleT1cInRvb2xzdGF0ZS5pZFwiPlxuICAgICAgICAgICAgPC90b29sPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29scy1jb250ZW50IHJvdzJcIiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtd3JhcDogd3JhcDtcIj5cbiAgICAgICAgICAgIDx0b29sIDpzdGF0ZT1cInRvb2xzdGF0ZVwiIDpyZXNvdXJjZXN1cmw9XCJyZXNvdXJjZXN1cmxcIiBAc3RvcGFjdGl2ZXRvb2w9XCJzdG9wQWN0aXZlVG9vbFwiIEBzZXRhY3RpdmV0b29sPVwic2V0QWN0aXZlVG9vbFwiXG4gICAgICAgICAgICAgIHYtZm9yPVwidG9vbHN0YXRlIGluIHRvb2xzcm93MlwiIDprZXk9XCJ0b29sc3RhdGUuaWRcIj5cbiAgICAgICAgICAgIDwvdG9vbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHMtY29udGVudCByb3czXCIgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBmbGV4LXdyYXA6IHdyYXA7XCI+XG4gICAgICAgICAgICA8dG9vbCA6c3RhdGU9XCJ0b29sc3RhdGVcIiA6cmVzb3VyY2VzdXJsPVwicmVzb3VyY2VzdXJsXCIgQHN0b3BhY3RpdmV0b29sPVwic3RvcEFjdGl2ZVRvb2xcIiBAc2V0YWN0aXZldG9vbD1cInNldEFjdGl2ZVRvb2xcIlxuICAgICAgICAgICAgICB2LWZvcj1cInRvb2xzdGF0ZSBpbiB0b29sc3JvdzNcIiA6a2V5PVwidG9vbHN0YXRlLmlkXCI+XG4gICAgICAgICAgICA8L3Rvb2w+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VcIiBzdHlsZT1cIm1hcmdpbi10b3A6IDVweDtcIiA6aWQ9XCInaWRfdG9vbGJveF9tZXNzYWdlc18nKyBzdGF0ZS5pZFwiPlxuICAgICAgICAgICAgPGRpdiB2LWh0bWw9XCJzdGF0ZS5tZXNzYWdlXCI+PC9kaXY+XG4gICAgICAgICAgICA8dHJhbnNpdGlvbiBuYW1lPVwiZmFkZVwiPlxuICAgICAgICAgICAgICA8dG9vbHNvZnRvb2wgdi1pZj1cInNob3d0b29sc29mdG9vbFwiIDp0b29scz1cInN0YXRlLnRvb2xzb2Z0b29sXCI+PC90b29sc29mdG9vbD5cbiAgICAgICAgICAgIDwvdHJhbnNpdGlvbj5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImN1cnJlbnR0b29sbmFtZVwiIGNsYXNzPVwidG9vbGJveF9oZWxwX21lc3NhZ2VcIiB2LXQtcGx1Z2luPVwiY3VycmVudHRvb2xuYW1lXCI+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IFRvb2xDb21wb25lbnQgZnJvbSAnLi9Ub29sLnZ1ZSc7XG4gIGltcG9ydCBUb29sc09mVG9vbENvbXBvbmVudCBmcm9tICcuL1Rvb2xzT2ZUb29sLnZ1ZSc7XG4gIGNvbnN0IEFwcGxpY2F0aW9uU3RhdGUgPSBnM3dzZGsuY29yZS5BcHBsaWNhdGlvblN0YXRlO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgIG5hbWU6ICdUb29sYm94JyxcbiAgICAgIHByb3BzOiBbJ3N0YXRlJywgJ3Jlc291cmNlc3VybCddLFxuICAgICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICAgIGN1cnJlbnR0b29sbmFtZTogbnVsbFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAndG9vbCc6IFRvb2xDb21wb25lbnQsXG4gICAgICAgICd0b29sc29mdG9vbCc6IFRvb2xzT2ZUb29sQ29tcG9uZW50XG4gICAgICB9LFxuICAgICAgbWV0aG9kczoge1xuICAgICAgICBzZWxlY3QoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmlzTGF5ZXJSZWFkeSkgcmV0dXJuO1xuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5zZWxlY3RlZCkgdGhpcy4kZW1pdCgnc2V0c2VsZWN0ZWR0b29sYm94JywgdGhpcy5zdGF0ZS5pZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvZ2dsZUVkaXRpbmcoKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3QoKTtcbiAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUubGF5ZXJzdGF0ZS5lZGl0aW5nLnJlYWR5IHx8IHRoaXMuc3RhdGUubG9hZGluZykgcmV0dXJuO1xuICAgICAgICAgIHRoaXMuc3RhdGUuZWRpdGluZy5vbiA/IHRoaXMuJGVtaXQoJ3N0b3B0b29sYm94JywgdGhpcy5zdGF0ZS5pZCk6IHRoaXMuJGVtaXQoJ3N0YXJ0dG9vbGJveCcsIHRoaXMuc3RhdGUuaWQpO1xuICAgICAgICB9LFxuICAgICAgICBzYXZlRWRpdHMoKSB7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnc2F2ZXRvb2xib3gnLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcEFjdGl2ZVRvb2woKSB7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnc3RvcGFjdGl2ZXRvb2wnLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0QWN0aXZlVG9vbCh0b29sSWQpIHtcbiAgICAgICAgICB0aGlzLiRlbWl0KCdzZXRhY3RpdmV0b29sJywgdG9vbElkLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHRvb2xzcm93MSgpe1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnRvb2xzLmZpbHRlcih0b29sID0+IHRvb2wucm93ID09PSAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHNyb3cyKCl7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudG9vbHMuZmlsdGVyKHRvb2wgPT4gdG9vbC5yb3cgPT09IDIpO1xuICAgICAgICB9LFxuICAgICAgICB0b29sc3JvdzMoKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS50b29scy5maWx0ZXIodG9vbCA9PiB0b29sLnJvdyA9PT0gMyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbkVkaXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZWRpdGluZy5jYW5FZGl0O1xuICAgICAgICB9LFxuICAgICAgICBmYXRoZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZWRpdGluZy5mYXRoZXIgJiYgISF0aGlzLnN0YXRlLmVkaXRpbmcuZGVwZW5kZW5jaWVzLmxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd3Rvb2xzb2Z0b29sKCkge1xuICAgICAgICAgIHJldHVybiAhIXRoaXMuc3RhdGUudG9vbHNvZnRvb2wubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBpc0xheWVyUmVhZHkoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubGF5ZXJzdGF0ZS5lZGl0aW5nLnJlYWR5O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlZCgpIHtcbiAgICAgICAgdGhpcy5lZGl0X2xheWVyX3Rvb2x0aXAgPSAnZWRpdGluZy50b29sdGlwLmVkaXRfbGF5ZXInO1xuICAgICAgICB0aGlzLiRlbWl0KCdjYW5FZGl0Jywge1xuICAgICAgICAgIGlkOiB0aGlzLnN0YXRlLmlkXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIG1vdW50ZWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuJG5leHRUaWNrKCk7XG4gICAgICAgICQodGhpcy4kcmVmcy5lZGl0aW5nYnV0dG9uKS50b29sdGlwKCk7XG4gICAgICAgIC8vIGlzIHVzZWZ1bHQgdG8gd2FpdCBhIGxpdHRsZSBiaXQgaXMgc29tZSBwbHVnaW4gb3IgZWRpdGluZyBoYXMgdG8gY2hlbmdlIHNvbWUgdGhpbmcgdG8gdGhlIHRvb2xib3hcbiAgICAgICAgLy8gZXguIHRvb2xzIHZpc2liaWxpdHkgZXRjYy4gZGlmZmVyZW50IGZyb20gZGVmYXVsdCBiZWhhdmlvdXJcbiAgICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgYXN5bmMnc3RhdGUuYWN0aXZldG9vbCcoYWN0aXZldG9vbCl7XG4gICAgICAgICAgYXdhaXQgdGhpcy4kbmV4dFRpY2soKTtcbiAgICAgICAgICB0aGlzLmN1cnJlbnR0b29sbmFtZSA9IGFjdGl2ZXRvb2wgJiYgYWN0aXZldG9vbC5nZXROYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICB9XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAudG9vbGJveCB7XG4gICAgcGFkZGluZy1ib3R0b206IDVweDtcbiAgfVxuPC9zdHlsZT5cbiIsIjwhLS0gT1JJR0lOQUwgU09VUkNFOiAtLT5cbjwhLS0gdnVlL2NvbXBvbmVudHMvdG9vbHNvZnRvb2wuaHRtbEB2My40IC0tPlxuPCEtLSB2dWUvY29tcG9uZW50cy90b29sc29mdG9vbC5qc0B2My40IC0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJ0b29sc29mdG9vbGNvbnRhaW5lclwiIHN0eWxlPVwiZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW46IDVweDtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1wiPlxuICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInRvb2wgaW4gdG9vbHNcIj5cbiAgICAgIDxjb21wb25lbnQgOmlzPVwidG9vbC50eXBlXCIgOm9wdGlvbnM9XCJ0b29sLm9wdGlvbnNcIj48L2NvbXBvbmVudD5cbiAgICAgIDxkaXZpZGVyPjwvZGl2aWRlcj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBTbmFwQ29tcG9uZW50IGZyb20gJy4vVG9vbHNPZlRvb2xTbmFwLnZ1ZSc7XG4gIGltcG9ydCBNZWFzdXJlQ29tcG9uZW50IGZyb20gJy4vVG9vbHNPZlRvb2xNZWFzdXJlLnZ1ZSc7XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdUb29sc29mdG9vbCcsXG4gICAgcHJvcHM6IFsndG9vbHMnXSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICBzbmFwOiBTbmFwQ29tcG9uZW50LFxuICAgICAgbWVhc3VyZTogTWVhc3VyZUNvbXBvbmVudFxuICAgIH0sXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG4gIH07XG48L3NjcmlwdD5cbiIsIjwhLS0gT1JJR0lOQUwgU09VUkNFOiAtLT5cbjwhLS0gdnVlL2NvbXBvbmVudHMvdG9vbHNvZnRvb2wvbWVhc3VyZS5odG1sQHYzLjQgLS0+XG48IS0tIHZ1ZS9jb21wb25lbnRzL3Rvb2xzb2Z0b29sL21lYXN1cmUuanNAdjMuNCAtLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleFwiPlxuICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cIm1hZ2ljLWNoZWNrYm94IHNuYXBfdG9vbHNfb2ZfdG9vbHNcIiBpZD1cImczd19lZGl0aW5nX3Nob3dfbWVhc3VyZV90b29sXCIgdi1tb2RlbD1cImNoZWNrZWRcIj5cbiAgICA8bGFiZWwgZm9yPVwiZzN3X2VkaXRpbmdfc2hvd19tZWFzdXJlX3Rvb2xcIiB2LXQtdG9vbHRpcDpyaWdodC5jcmVhdGU9XCIncGx1Z2lucy5lZGl0aW5nLnRvb2xzb2Z0b29sLm1lYXN1cmUnXCI+XG4gICAgICA8c3BhbiBzdHlsZT1cImZvbnQtd2VpZ2h0OiBib2xkXCIgOmNsYXNzPVwiZzN3dGVtcGxhdGUuZm9udFsnbWVhc3VyZSddXCIgPjwvc3Bhbj5cbiAgICA8L2xhYmVsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgbmFtZTogXCJtZWFzdXJlXCIsXG4gICAgICBwcm9wczogWydvcHRpb25zJ10sXG4gICAgICBkYXRhKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hlY2tlZDogdGhpcy5vcHRpb25zLmNoZWNrZWQsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3YXRjaDoge1xuICAgICAgICAnY2hlY2tlZCcoYm9vbCl7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLm9uQ2hhbmdlKGJvb2wpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uQmVmb3JlRGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICBsYWJlbCBzcGFuIHtcbiAgICBjb2xvcjogIzIyMmQzMiAhaW1wb3J0YW50O1xuICB9XG48L3N0eWxlPlxuIiwiPCEtLSBPUklHSU5BTCBTT1VSQ0U6IC0tPlxuPCEtLSB2dWUvY29tcG9uZW50cy90b29sc29mdG9vbC9zbmFwLmh0bWxAdjMuNCAtLT5cbjwhLS0gdnVlL2NvbXBvbmVudHMvdG9vbHNvZnRvb2wvc25hcC5qc0B2My40IC0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBmbGV4O3dpZHRoOiAxMDAlOyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW5cIj5cbiAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJtYWdpYy1jaGVja2JveCBzbmFwX3Rvb2xzX29mX3Rvb2xzXCIgOmlkPVwiaWRcIiB2LW1vZGVsPVwiY2hlY2tlZFwiPlxuICAgIDxsYWJlbCA6Zm9yPVwiaWRcIiB2LXQtdG9vbHRpcDpyaWdodC5jcmVhdGU9XCIncGx1Z2lucy5lZGl0aW5nLnRvb2xzb2Z0b29sLnNuYXAnXCI+XG4gICAgICA8c3BhbiA6Y2xhc3M9XCJnM3d0ZW1wbGF0ZS5mb250WydtYWduZXRlJ11cIiA+PC9zcGFuPlxuICAgIDwvbGFiZWw+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJzaG93U25hcEFsbFwiID5cbiAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cIm1hZ2ljLWNoZWNrYm94IHNuYXBfdG9vbHNfb2ZfdG9vbHNcIiA6aWQ9XCJpZEFsbFwiIHYtbW9kZWw9XCJjaGVja2VkQWxsXCI+XG4gICAgICA8bGFiZWwgOmZvcj1cImlkQWxsXCIgdi10LXRvb2x0aXA6bGVmdC5jcmVhdGU9XCIncGx1Z2lucy5lZGl0aW5nLnRvb2xzb2Z0b29sLnNuYXBhbGwnXCI+XG4gICAgICAgIDxzcGFuIDpjbGFzcz1cImczd3RlbXBsYXRlLmZvbnRbJ21hZ25ldGUnXVwiID48L3NwYW4+XG4gICAgICAgIDxzcGFuIHN0eWxlPVwiZm9udC13ZWlnaHQ6IGJvbGRcIiA6Y2xhc3M9XCJnM3d0ZW1wbGF0ZS5mb250WydsYXllcnMnXVwiID48L3NwYW4+XG4gICAgICA8L2xhYmVsPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgY29uc3QgeyBHVUkgfSA9IGczd3Nkay5ndWk7XG4gIGNvbnN0IHsgTGF5ZXIgfSA9IGczd3Nkay5jb3JlLmxheWVyO1xuICBsZXQgc25hcEludGVyYWN0aW9uO1xuICBjb25zdCBtYXBTZXJ2aWNlID0gR1VJLmdldFNlcnZpY2UoJ21hcCcpO1xuICBjb25zdCBlZGl0aW5nU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2VkaXRpbmdzZXJ2aWNlJyk7XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcInNuYXBcIixcbiAgICBwcm9wczogWydvcHRpb25zJ10sXG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBgc25hcF8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgaWRBbGw6IGBzbmFwXyR7RGF0ZS5ub3coKX1fYWxsYCxcbiAgICAgICAgY2hlY2tlZDogZmFsc2UsXG4gICAgICAgIGNoZWNrZWRBbGw6IGZhbHNlLFxuICAgICAgICBzaG93U25hcEFsbDogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICBhZGQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5jaGVja2VkIHx8IHRoaXMuY2hlY2tlZEFsbCkgJiYgdGhpcy5vcHRpb25zLmFjdGl2ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGFkZEZlYXR1cmVzKGZlYXR1cmVzKXtcbiAgICAgICAgdGhpcy5mZWF0dXJlcy5leHRlbmQoZmVhdHVyZXMpXG4gICAgICB9LFxuICAgICAgYWRkRmVhdHVyZShmZWF0dXJlKXtcbiAgICAgICAgdGhpcy5hZGRGZWF0dXJlcyhbZmVhdHVyZV0pO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZUZlYXR1cmVzKGZlYXR1cmVzKXtcbiAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmZWF0dXJlID0+IHRoaXMuZmVhdHVyZXMucmVtb3ZlKGZlYXR1cmUpKTtcbiAgICAgIH0sXG4gICAgICBzZXRTaG93U25hcEFsbCgpe1xuICAgICAgICB0aGlzLnNob3dTbmFwQWxsID0gdGhpcy52ZWN0b3JUb29sYm94ZXNFZGl0aW5nU3RhdGUuZmluZChlZGl0aW5nID0+IGVkaXRpbmcub24pICYmIHRydWUgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuY2hlY2tlZEFsbCA9IHRoaXMuc2hvd1NuYXBBbGwgPyB0aGlzLmNoZWNrZWRBbGwgOiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBhY3RpdmVTbmFwSW50ZXJhY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHNuYXAgPSB0aGlzLmFkZDtcbiAgICAgICAgc25hcEludGVyYWN0aW9uICYmICBtYXBTZXJ2aWNlLnJlbW92ZUludGVyYWN0aW9uKHNuYXBJbnRlcmFjdGlvbik7XG4gICAgICAgIHNuYXBJbnRlcmFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgc25hcEludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNuYXAoe1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLmNoZWNrZWQgJiYgIXRoaXMuY2hlY2tlZEFsbCAmJiB0aGlzLm9wdGlvbnMuc291cmNlLFxuICAgICAgICAgICAgZmVhdHVyZXM6IHRoaXMuY2hlY2tlZEFsbCAmJiB0aGlzLmZlYXR1cmVzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbWFwU2VydmljZS5hZGRJbnRlcmFjdGlvbihzbmFwSW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZW5hYmxlU25hcEludGVyYWN0aW9uKGJvb2wpe1xuICAgICAgICBpZiAoYm9vbCl0aGlzLmFjdGl2ZVNuYXBJbnRlcmFjdGlvbigpO1xuICAgICAgICBlbHNlIHNuYXBJbnRlcmFjdGlvbiAmJiBtYXBTZXJ2aWNlLnJlbW92ZUludGVyYWN0aW9uKHNuYXBJbnRlcmFjdGlvbik7XG4gICAgICB9LFxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgIGNoZWNrZWQoYm9vbCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMuY2hlY2tlZCA9IGJvb2w7XG4gICAgICAgIHRoaXMuYWN0aXZlU25hcEludGVyYWN0aW9uKClcbiAgICAgIH0sXG4gICAgICBjaGVja2VkQWxsKGJvb2wpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNoZWNrZWRBbGwgPSBib29sO1xuICAgICAgICB0aGlzLmFjdGl2ZVNuYXBJbnRlcmFjdGlvbigpXG4gICAgICB9LFxuICAgICAgJ29wdGlvbnMuYWN0aXZlJyhib29sKXtcbiAgICAgICAgdGhpcy5lbmFibGVTbmFwSW50ZXJhY3Rpb24oYm9vbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVkKCkge1xuICAgICAgdGhpcy5mZWF0dXJlcyA9IG5ldyBvbC5Db2xsZWN0aW9uKCk7XG4gICAgICB0aGlzLnNvdXJjZXNBbmRFdmVudHNLZXlzID0gW107XG4gICAgICAvLyBlZGl0aW5nIHRvb2xib3hlcyBkZXBlbmRlbmNpZXNcbiAgICAgIHRoaXMudmVjdG9yVG9vbGJveGVzRWRpdGluZ1N0YXRlID0gW107XG4gICAgICAvLyB1bndhdGNoZWQgZnVuY3Rpb25cbiAgICAgIHRoaXMudW53YXRjaGVzID0gW107XG4gICAgICBlZGl0aW5nU2VydmljZS5nZXRMYXllcnMoKS5mb3JFYWNoKGxheWVyID0+IHtcbiAgICAgICAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmdldElkKCk7XG4gICAgICAgIGlmIChsYXllci5nZXRUeXBlKCkgPT09IExheWVyLkxheWVyVHlwZXMuVkVDVE9SKSB7XG4gICAgICAgICAgY29uc3QgdG9vbGJveCA9IGVkaXRpbmdTZXJ2aWNlLmdldFRvb2xCb3hCeUlkKGxheWVySWQpO1xuICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHRvb2xib3guZ2V0TGF5ZXIoKS5nZXRFZGl0aW5nU291cmNlKCk7XG4gICAgICAgICAgdGhpcy5mZWF0dXJlcy5leHRlbmQoc291cmNlLnJlYWRGZWF0dXJlcygpKTtcbiAgICAgICAgICBjb25zdCBhZGRGZWF0dXJlc0tleSA9IHNvdXJjZS5vbmJlZm9yZSgnYWRkRmVhdHVyZXMnLCB0aGlzLmFkZEZlYXR1cmVzKTtcbiAgICAgICAgICBjb25zdCBhZGRGZWF0dXJlS2V5ID0gc291cmNlLm9uYmVmb3JlKCdhZGRGZWF0dXJlJywgdGhpcy5hZGRGZWF0dXJlcyk7XG4gICAgICAgICAgY29uc3QgY2xlYXJLZXkgPSBzb3VyY2Uub25iZWZvcmUoJ2NsZWFyJywgKCkgPT57XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHNvdXJjZS5yZWFkRmVhdHVyZXMoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRmVhdHVyZXMoZmVhdHVyZXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IG9sS2V5ID0gc291cmNlLmdldEZlYXR1cmVzQ29sbGVjdGlvbigpLm9uKCdhZGQnLCBldnQgPT4gdGhpcy5hZGRGZWF0dXJlKGV2dC5lbGVtZW50KSk7XG4gICAgICAgICAgdGhpcy5zb3VyY2VzQW5kRXZlbnRzS2V5cy5wdXNoKHtcbiAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIHNldHRlcnNBbmRLZXlzOiB7XG4gICAgICAgICAgICAgICdhZGRGZWF0dXJlcyc6IGFkZEZlYXR1cmVzS2V5LFxuICAgICAgICAgICAgICAnYWRkRmVhdHVyZSc6IGFkZEZlYXR1cmVLZXksXG4gICAgICAgICAgICAgICdjbGVhcic6IGNsZWFyS2V5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2xLZXlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBoYW5kbGUgc25hcCBhbGxcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxheWVySWQgIT09IGxheWVySWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRpbmcgPSB0b29sYm94LmdldFN0YXRlKCkuZWRpdGluZztcbiAgICAgICAgICAgIGNvbnN0IHVud2F0Y2ggPSB0aGlzLiR3YXRjaCgoKT0+IGVkaXRpbmcub24sIHRoaXMuc2V0U2hvd1NuYXBBbGwpO1xuICAgICAgICAgICAgdGhpcy51bndhdGNoZXMucHVzaCh1bndhdGNoKTtcbiAgICAgICAgICAgIHRoaXMudmVjdG9yVG9vbGJveGVzRWRpdGluZ1N0YXRlLnB1c2goZWRpdGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0U2hvd1NuYXBBbGwoKTtcbiAgICB9LFxuICAgIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgICB0aGlzLnNvdXJjZXNBbmRFdmVudHNLZXlzLmZvckVhY2goc291cmNlQW5kS2V5ID0+e1xuICAgICAgICBjb25zdCB7c291cmNlLCBzZXR0ZXJzQW5kS2V5cywgb2xLZXl9ID0gc291cmNlQW5kS2V5O1xuICAgICAgICBPYmplY3Qua2V5cyhzZXR0ZXJzQW5kS2V5cykuZm9yRWFjaChldmVudE5hbWUgPT57XG4gICAgICAgICAgY29uc3Qga2V5ID0gc2V0dGVyc0FuZEtleXNbZXZlbnROYW1lXTtcbiAgICAgICAgICBzb3VyY2UudW4oZXZlbnROYW1lLCBrZXkpXG4gICAgICAgIH0pO1xuICAgICAgICBvbC5PYnNlcnZhYmxlLnVuQnlLZXkob2xLZXkpXG4gICAgICB9KTtcbiAgICAgIHRoaXMudW53YXRjaGVzLmZvckVhY2godW53YXRjaCA9PiB1bndhdGNoKCkpO1xuICAgICAgc25hcEludGVyYWN0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMudW53YXRjaGVzID0gbnVsbDtcbiAgICAgIHRoaXMudmVjdG9yVG9vbGJveGVzRWRpdGluZ1N0YXRlID0gbnVsbDtcbiAgICAgIHRoaXMuc291cmNlc0FuZEV2ZW50c0tleXMgPSBudWxsO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIGxhYmVsIHNwYW4ge1xuICAgIGNvbG9yOiAjMjIyZDMyICFpbXBvcnRhbnQ7XG4gIH1cbjwvc3R5bGU+XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGVycm9yczoge1xuICAgIG5vX2xheWVyczogXCJFcyB0cml0dCBlaW4gRmVobGVyIGF1Zi4gRXMgaXN0IG5pY2h0IG3DtmdsaWNoLCBMYXllciB6dSBiZWFyYmVpdGVuXCIsXG4gICAgc29tZV9sYXllcnM6IFwiRXMgdHJpdHQgZWluIEZlaGxlciBhdWY6IEVzIGlzdCBuaWNodCBtw7ZnbGljaCwgZWluaWdlIExheWVyIHp1IGJlYXJiZWl0ZW5cIlxuICB9LFxuICBzZWFyY2g6IFwiU3VjaGVcIixcbiAgZWRpdGluZ19jaGFuZ2VzOiBcIsOEbmRlcnVuZ2VuIGJlYXJiZWl0ZW5cIixcbiAgZWRpdGluZ19kYXRhOiBcIkxheWVyIGJlYXJiZWl0ZW5cIixcbiAgZWRpdGluZ19hdHRyaWJ1dGVzOiBcIkF0dHJpYnV0ZSBiZWFyYmVpdGVuXCIsXG4gIHJlbGF0aW9uczogXCJSZWxhdGlvbmVuXCIsXG4gIGVkaXRfcmVsYXRpb246IFwiUmVsYXRpb24gYmVhcmJlaXRlblwiLFxuICBiYWNrX3RvX3JlbGF0aW9uczogXCJadXLDvGNrIHp1IFJlbGF0aW9uZW5cIixcbiAgbm9fcmVsYXRpb25zX2ZvdW5kOiBcIktlaW5lIFJlbGF0aW9uZW4gZ2VmdW5kZW5cIixcbiAgcmVsYXRpb25fZGF0YTogXCJSZWxhdGlvbnNkYXRlblwiLFxuICByZWxhdGlvbl9hbHJlYWR5X2FkZGVkOiBcIlJlbGF0aW9uIGJlcmVpdHMgaGluenVnZWbDvGd0XCIsXG4gIGxpc3Rfb2ZfcmVsYXRpb25zX2ZlYXR1cmU6IFwiTGlzdGUgZGVyIFJlbGF0aW9ucy1GZWF0dXJlcyBcIixcbiAgdG9vbHRpcDoge1xuICAgIGVkaXRfbGF5ZXI6IFwiTGF5ZXIgYmVhcmJlaXRlblwiXG4gIH0sXG4gIHRvb2xib3g6IHtcbiAgICB0aXRsZTogJ2JlYXJiZWl0ZW4nXG4gIH0sXG4gIHRhYmxlOiB7XG4gICAgZWRpdDogXCJGZWF0dXJlIGJlYXJiZWl0ZW5cIixcbiAgICBjb3B5OiBcIktvcGllIGVyc3RlbGxlblwiLFxuICAgIGRlbGV0ZTogXCJGZWF0dXJlIGzDtnNjaGVuXCJcbiAgfSxcbiAgdG9vbHM6IHtcbiAgICBjb3B5OiBcIkZlYXR1cmVzIGtvcGllcmVuXCIsXG4gICAgcGFzdGVmZWF0dXJlc2Zyb21vdGhlcmxheWVyczogXCJQYXN0ZSBmZWF0dXJlcyBmcm9tIG90aGVyIGxheWVyXCIsXG4gICAgYWRkcGFydDogXCJUZWlsIHp1IE11bHRpcGFydCBoaW56dWbDvGdlblwiLFxuICAgIGRlbGV0ZXBhcnQ6IFwiVGVpbCBhdXMgTXVsdGlwYXJ0IGzDtnNjaGVuXCIsXG4gICAgbWVyZ2U6IFwiRmVhdHVyZSBhdWZsw7ZzZW5cIixcbiAgICBzcGxpdDogXCJGZWF0dXJlIHRyZW5uZW5cIixcbiAgICBhZGRfZmVhdHVyZTogXCJGZWF0dXJlIGhpbnp1ZsO8Z2VuXCIsXG4gICAgZGVsZXRlX2ZlYXR1cmU6IFwiRmVhdHVyZSBsw7ZzY2hlblwiLFxuICAgIG1vdmVfZmVhdHVyZTogXCJGZWF0dXJlIHZlcnNjaGllYmVuXCIsXG4gICAgdXBkYXRlX3ZlcnRleDogXCJGZWF0dXJlIHZlcnRleCBha3R1YWxpc2llcmVuXCIsXG4gICAgdXBkYXRlX2ZlYXR1cmU6IFwiRmVhdHVyZS1BdHRyaWJ1dCBha3R1YWxpc2llcmVuXCIsXG4gICAgdXBkYXRlX211bHRpX2ZlYXR1cmVzOiBcIkF0dHJpYnV0ZSBhdXNnZXfDpGhsdGVyIEZlYXR1cmVzIGFrdHVhbGlzaWVyZW5cIixcbiAgICBjb3B5ZmVhdHVyZWZyb21leHRlcm5hbGxheWVyOiBcIkNyZWF0ZSBGZWF0dXJlIGZyb20gZXhpc3RpbmcgZmVhdHVyZVwiXG4gIH0sXG4gIHRvb2xzb2Z0b29sOiB7XG4gICAgbWVhc3VyZTogXCJNZXNzdW5nIGFuemVpZ2VuXCIsXG4gICAgc25hcDogXCJTbmFwIExheWVyXCIsXG4gICAgc25hcGFsbDogXCJTbmFwIGF1ZiBhbGxlIExheWVyXCJcbiAgfSxcbiAgc3RlcHM6IHtcbiAgICBoZWxwOiB7XG4gICAgICBzZWxlY3RfZWxlbWVudHM6IFwiRmVhdHVyZXMgYXVzd8OkaGxlblwiLFxuICAgICAgc2VsZWN0X2VsZW1lbnQ6IFwiRmVhdHVyZSBhdXN3w6RobGVuXCIsXG4gICAgICBjb3B5OiBcIk5ldWUgS29waWUgZGVyIGF1c2dld8OkaGx0ZW4gRmVhdHVyZXMgZXJzdGVsbGVuXCIsXG4gICAgICBtZXJnZTogXCJGZWF0dXJlcyBhdWZsw7ZzZW5cIixcbiAgICAgIHNwbGl0OiBcIkZlYXR1cmUgdHJlbm5lblwiLFxuICAgICAgbmV3OiBcIk5ldWVzIEZlYXR1cmUgZXJzdGVsbGVuXCIsXG4gICAgICBlZGl0X3RhYmxlOiBcIkZlYXR1cmVzIGRlciBUYWJlbGxlIGJlYXJiZWl0ZW5cIixcbiAgICAgIGRyYXdfbmV3X2ZlYXR1cmU6IFwiRmVhdHVyZSBhdWYgS2FydGUgemVpY2huZW5cIixcbiAgICAgIGFjdGlvbl9jb25maXJtOiBcIkFrdGlvbiBiZXN0w6R0aWdlblwiLFxuICAgICAgZG91YmxlX2NsaWNrX2RlbGV0ZTogXCJadSBsw7ZzY2hlbmRlcyBGZWF0dXJlIGF1ZiBkZXIgS2FydGUgYXVzd8OkaGxlblwiLFxuICAgICAgZWRpdF9mZWF0dXJlX3ZlcnRleDogXCLDhG5kZXJuIG9kZXIgSGluenVmw7xnZW4gZWluZXMgRWNrcHVua3RlcyBhdWYgZGVtIGF1c2dld8OkaGx0ZW4gRmVhdHVyZVwiLFxuICAgICAgbW92ZTogXCJBdXNnZXfDpGhsdGVzIEZlYXR1cmUgdmVyc2NoaWViZW5cIixcbiAgICAgIHNlbGVjdF9mZWF0dXJlX3RvX3JlbGF0aW9uOiBcIkZlYXR1cmUgYXVzd8OkaGxlbiwgd2VsY2hlcyBkaWUgUmVsYXRpb24gdmVya27DvHBmdFwiLFxuICAgICAgc2hvd19lZGl0X2ZlYXR1cmVfZm9ybTogIFwiRmVhdHVyZS1Gb3JtdWxhciB6dW0gQmVhcmJlaXRlbiB2b24gQXR0cmlidXRlbiBhbnplaWdlblwiLFxuICAgICAgcGlja19mZWF0dXJlOiBcIlp1IMOkbmRlcm5kZXMgRmVhdHVyZSBhdWYgZGVyIEthcnRlIGF1c3fDpGhsZW5cIixcbiAgICAgIGluc2VydF9hdHRyaWJ1dGVzX2ZlYXR1cmU6IFwiQXR0cmlidXRlIGRlcyBGZWF0dXJlcyBlaW5mw7xnZW5cIlxuICAgIH1cbiAgfSxcbiAgd29ya2Zsb3c6IHtcbiAgICBzdGVwczoge1xuICAgICAgc2VsZWN0OiAnWnVtIEF1c3fDpGhsZW4gYXVmIGVpbiBGZWF0dXJlIGtsaWNrZW4nLFxuICAgICAgZHJhd19wYXJ0OiBcIk5ldWVzIFRlaWwgemVpY2huZW5cIixcbiAgICAgIG1lcmdlOiAnRmVhdHVyZSB6dW0gQXVmbMO2c2VuIGF1c3fDpGhsZW4nLFxuICAgICAgc2VsZWN0U0hJRlQ6ICdGZWF0dXJlcyBhdXN3w6RobGVuIGluZGVtIGVpbiBSZWNodGVjayBtaXQgU0hJRlQgZ2V6ZWljaG5ldCB3aXJkJyxcbiAgICAgIHNlbGVjdERyYXdCb3g6IFwiRmVhdHVyZXMgYXVzd8OkaGxlbiwgaW5kZW0gbWFuIGVpbiBSZWNodGVjayBtaXQgendlaSBnZWdlbsO8YmVybGllZ2VuZGVuIEVja3B1bmt0ZW4gemVpY2huZXRcIixcbiAgICAgIHNlbGVjdERyYXdCb3hBdExlYXN0MkZlYXR1cmU6IFwiTWluZGVzdGVucyBGZWF0dXJlcyBhdXN3w6RobGVuLCBpbmRlbSBtYW4gZWluIFJlY2h0ZWNrIG1pdCB6d2VpIGdlZ2Vuw7xiZXJsaWVnZW5kZW4gRWNrcHVua3RlbiB6ZWljaG5ldFwiLFxuICAgICAgc2VsZWN0UG9pbnQ6IFwiWnVtIEF1c3fDpGhsZW4gYXVmIGVpbiBGZWF0dXJlIGtsaWNrZW5cIixcbiAgICAgIHNlbGVjdFBvaW50U0hJRlQ6ICdGZWF0dXJlcyBhdXN3w6RobGVuLCBpbmRlbSBlaW4gUmVjaHRlY2sgbWl0IFNISUZUIGdlemVpY2huZXQgd2lyZCAoTXVsdGlmZWF0dXJlcykgb2RlciBhdWYgZWluIEZlYXR1cmUga2xpY2tlbicsXG4gICAgICBzZWxlY3RNdWx0aVBvaW50U0hJRlQ6ICdGZWF0dXJlcyBhdXN3w6RobGVuLCBpbmRlbSBtYW4gZWluIFJlY2h0ZWNrIHplaWNobmV0IHVuZCBTSElGVCBkcsO8Y2t0IG9kZXIgYXVmIGVpbiBGZWF0dXJlIGtsaWNrdCcsXG4gICAgICBzZWxlY3RNdWx0aVBvaW50U0hJRlRBdExlYXN0MkZlYXR1cmU6ICdNaW5kZXN0ZW5zIDIgRmVhdHVyZXMgYXVzd8OkaGxlbiB1bmQgbWl0IFNISUZUIGVpbiBSZWNodGVjayB6ZWljaG5lbiBvZGVyIGF1ZiBlaW4gRmVhdHVyZSBrbGlja2VuJyxcbiAgICAgIGNvcHlDVFJMOiAnS29waWVyZW4gYXVzZ2V3w6RobHRlciBGZWF0dXJlcyBtaXQgQ1RSTCtDJyxcbiAgICAgIHNlbGVjdFN0YXJ0VmVydGV4OiAnU3RhcnQtRWNrcHVua3QgZGVyIGF1c2dld8OkaGx0ZW4gRmVhdHVyZXMgYXVzd8OkaGxlbicsXG4gICAgICBzZWxlY3RUb1Bhc3RlOiAnRGVuIFB1bmt0IGF1c3fDpGhsZW4sIGFuIGRlbSBkaWUgYXVzZ2V3w6RobHRlbiBGZWF0dXJlcyBlaW5nZWbDvGd0IHdlcmRlbiBzb2xsZW4nLFxuICAgICAgZHJhd19zcGxpdF9saW5lOiBcIkVpbmUgTGluaWUgemVpY2huZW4sIHVtIGRhcyBhdXNnZXfDpGhsdGUgRmVhdHVyZSB6dSB0ZWlsZW5cIlxuICAgIH1cbiAgfSxcbiAgbWVzc2FnZXM6IHtcbiAgICBmZWF0dXJlc2xvY2tieW90aGVydXNlcjogXCJFaW5pZ2UgR2VvbWV0cmllbi9EYXRlbnPDpHR6ZSBrw7ZubmVuIG5pY2h0IGJlYXJiZWl0ZXQgd2VyZGVuLCBkYSBzaWUgdm9uIGFuZGVyZW4gQmVudXR6ZXJuIGJlYXJiZWl0ZXQgd2VyZGVuXCIsXG4gICAgc3BsaXR0ZWQ6IFwiR2V0cmVubnRcIixcbiAgICBub3NwbGl0dGVkZmVhdHVyZTogXCJGZWF0dXJlIG5pY2h0IGdldHJlbm50XCIsXG4gICAgcHJlc3NfZXNjOiBcIk1pdCBFU0MgenVyw7xja1wiLFxuICAgIG9ubGluZTogXCJXaWVkZXIgT05MSU5FLiBKZXR6dCBrYW5uIG1hbiBkaWUgw4RuZGVydW5nZW4gaW4gZGVyIERhdGVuYmFuayBzcGVpY2hlcm5cIixcbiAgICBvZmZsaW5lOiBcIk9GRkxJTkUuIEFsbGUgw4RuZGVydW5nZW4gd2VyZGVuIGxva2FsIGdlc3BlaWNoZXJ0XCIsXG4gICAgZGVsZXRlX2ZlYXR1cmU6IFwiU29sbCBkYXMgYXVzZ2V3w6RobHRlIEZlYXR1cmUgZ2Vsw7ZzY2h0IHdlcmRlbj9cIixcbiAgICBkZWxldGVfZmVhdHVyZV9yZWxhdGlvbnM6IFwiV2VubiBlaW4gRmVhdHVyZSBWZXJrbsO8cGZ1bmdlbiBiZWluaGFsdGV0LCB3ZXJkZW4gZGllc2UgUmVsYXRpb25lbiB2ZXJ3YWlzdC4gV2lyIHNjaGxhZ2VuIHZvciwgZGllc2UgUmVsYXRpb25lbiB6dSBiZWhhbmRlbG4sIGJldm9yIGRhcyBGZWF0dXJlIGdlbMO2c2NodCB3aXJkXCIsXG4gICAgdW5saW5rX3JlbGF0aW9uOiBcIlNvbGwgZGllIFZlcmtuw7xwZnVuZyBhdWZnZWhvYmVuIHdlcmRlbj9cIixcbiAgICBjb21taXRfZmVhdHVyZTogXCLDhG5kZXJ1bmdlbiBzcGVpY2hlcm4/XCIsXG4gICAgY2hhbmdlX3Rvb2xib3hfcmVsYXRpb246IFwiTGF5ZXIgaGF0IFJlbGF0aW9uKGVuKS4gQmV2b3IgbWFuIHp1ciBCZWFyYmVpdHVuZyB3ZWNoc2VsdCwgbXVzcyBtYW4gZGllIMOEbmRlcnVuZ2VuIHNwZWljaGVybi5cIixcbiAgICBzYXZlZDogXCJEYXRlbiBlcmZvbGdyZWljaCBnZXNwZWljaGVydFwiLFxuICAgIHNhdmVkX2xvY2FsOlwiRGF0ZW4gZXJmb2xncmVpY2ggbG9rYWwgZ2VzcGVpY2hlcnRcIixcbiAgICBsb2FkaW5nX2RhdGE6IFwiRGF0ZW4gbGFkZW5cIixcbiAgICBzYXZpbmc6IFwiRGF0ZW4gd2VyZGVuIGdlc3BlaWNoZXJ0LiBCaXR0ZSB3YXJ0ZW4gLi4uXCIsXG4gICAgY29uc3RyYWludHM6IHtcbiAgICAgIGVuYWJsZV9lZGl0aW5nOiBcIkJpdHRlIHpvb21lbiBTaWUgaGluZWluLCB1bSBkaWUgRWRpdGllci1Ub29scyB6dSBha3RpdmllcmVuIFxcbkFrdGl2aWVydW5nc3NrYWxhIGJlaSAxOlwiXG4gICAgfSxcbiAgICBwZGY6IFwiRG9rdW1lbnRlbnZvcnNjaGF1IG5pY2h0IHZlcmbDvGdiYXIuIEJpdHRlIGhpZXIga2xpY2tlbiBcIixcbiAgICBjb21taXQ6IHtcbiAgICAgIGhlYWRlcjogXCJEaWUgZm9sZ2VuZGUgTGlzdGUgemVpZ3QgYWxsZSB6dSDDvGJlcm5laG1lbmRlbiDDhG5kZXJ1bmdlbi5cIixcbiAgICAgIGhlYWRlcl9hZGQ6IFwiPGI+SGluenVmZ2Vmw7xndDwvYj4gRGllIEFuemFobCBkZXIgaGluenVnZWbDvGd0ZW4gRmVhdHVyZXMgYW56ZWlnZW5cIixcbiAgICAgIGhlYWRlcl91cGRhdGVfZGVsZXRlOiBcIjxiPkJlYXJiZWl0ZXQ8L2I+IHVuZCA8Yj5HZWzDtnNjaHQ8L2I+IERpZSBMaXN0ZSBkZXIgRmVhdHVyZS1JRCBhbnplaWdlblwiLFxuICAgICAgYWRkOiBcIkhpbnp1Z2Vmw7xndChuLiBGZWF0dXJlcylcIixcbiAgICAgIGRlbGV0ZTogXCJHZWzDtnNjaHQoaWQpXCIsXG4gICAgICB1cGRhdGU6IFwiQmVhcmJlaXRldChpZClcIlxuICAgIH0sXG4gICAgbG9hZGluZ190YWJsZV9kYXRhOiBcIkRhdGVudGFiZWxsZSB3aXJkIGVyc3RlbGx0LiBCaXR0ZSB3YXJ0ZW4gLi4uXCIsXG4gICAgY29weV9hbmRfcGFzdGVfZnJvbV9vdGhlcl9sYXllcl9tYW5kYXRvcnlfZmllbGRzOiBcIlZvciBkZW0gU3BlaWNoZXJuIG3DvHNzZW4gYWxsZSBQZmxpY2h0ZmVsZGVyIGRlcyBlaW5nZWdlYmVuZW4gZmVhdHVyZXMgYXVzZ2Vmw7xsbHQgd2VyZGVuXCIsXG4gICAgbm9fZmVhdHVyZV9zZWxlY3RlZDogXCJLZWluZSBmZWF0dXJlIGF1c2dld8OkaGx0XCJcbiAgfSxcbiAgcmVsYXRpb246IHtcbiAgICB0YWJsZToge1xuICAgICAgaW5mbzogYFxuICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgV8OkaGxlbiBTaWUgUmVsYXRpb25lbiBhdXMsIHVtIHNpZSBtaXQgZGVtIGFrdHVlbGxlbiBGZWF0dXJlIHp1IHZlcmtuw7xwZmVuLlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYFxuICAgIH1cbiAgfSxcbiAgZm9ybToge1xuICAgIHJlbGF0aW9uczoge1xuICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgYmFja190b19mYXRoZXI6XCJadXLDvGNrIHp1ciBCZWFyYmVpdHVuZyBkZXMgVmF0ZXJzXCIsXG4gICAgICAgIGFkZF9yZWxhdGlvbjogXCJOZXVlIFJlbGF0aW9uIGVyc3RlbGxlbiB1bmQgdmVya27DvHBmZW5cIixcbiAgICAgICAgbGlua19yZWxhdGlvbjogXCJFaW5lIFJlbGF0aW9uIHp1IGRpZXNlbSBGZWF0dXJlIGhlcnN0ZWxsZW5cIixcbiAgICAgICAgb3Blbl9yZWxhdGlvbl90b29sczogXCJSZWxhdGlvbnN0b29scyBhbnplaWdlblwiLFxuICAgICAgICB1bmxpbmtfcmVsYXRpb246IFwiUmVsYXRpb24gdHJlbm5lblwiXG4gICAgICB9XG4gICAgfSxcbiAgICBidXR0b25zOiB7XG4gICAgICBzYXZlOiBcIlNwZWljaGVybiB1bmQgc2NobGllw59lblwiLFxuICAgICAgc2F2ZV9hbmRfYmFjazogXCJTcGVpY2hlcm4gdW5kIHp1csO8Y2tcIixcbiAgICAgIGNhbmNlbDogXCLDhG5kZXJ1bmdlbiBpZ25vcmllcmVuXCJcbiAgICB9XG4gIH0sXG4gIG1vZGFsOiB7XG4gICAgdG9vbHM6IHtcbiAgICAgIGNvcHlmZWF0dXJlZnJvbW90aGVybGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGZlYXR1cmUvc1wiXG4gICAgICB9LFxuICAgICAgY29weWZlYXR1cmVmcm9tcHJvamVjdGxheWVyOiB7XG4gICAgICAgIHRpdGxlOiBcIlNlbGVjdCBvbmUgZmVhdHVyZVwiXG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBlcnJvcnM6IHtcbiAgICBub19sYXllcnM6IFwiQW4gZXJyb3Igb2NjdXJzLiBJdCdzIG5vIHBvc3NpYmxlIHRvIGVkaXQgbGF5ZXJzXCIsXG4gICAgc29tZV9sYXllcnM6IFwiQW4gZXJyb3Igb2NjdXJzOiBJdCdzIG5vIHBvc3NpYmxlIHRvIGVkaXQgc29tZSBsYXllcnNcIlxuICB9LFxuICBzZWFyY2g6IFwiU2VhcmNoXCIsXG4gIGVkaXRpbmdfY2hhbmdlczogXCJFZGl0aW5nIENoYW5nZXNcIixcbiAgZWRpdGluZ19kYXRhOiBcIkVkaXRpbmcgTGF5ZXJzXCIsXG4gIGVkaXRpbmdfYXR0cmlidXRlczogXCJFZGl0aW5nIGF0dHJpYnV0ZXNcIixcbiAgcmVsYXRpb25zOiBcIlJlbGF0aW9uc1wiLFxuICBlZGl0X3JlbGF0aW9uOiBcIkVkaXQgcmVsYXRpb25cIixcbiAgYmFja190b19yZWxhdGlvbnM6IFwiQmFjayB0byBSZWxhdGlvbnNcIixcbiAgbm9fcmVsYXRpb25zX2ZvdW5kOiBcIk5vIHJlbGF0aW9ucyBmb3VuZFwiLFxuICByZWxhdGlvbl9kYXRhOiBcIlJlbGF0aW9uIGRhdGFcIixcbiAgcmVsYXRpb25fYWxyZWFkeV9hZGRlZDogXCJSZWxhdGlvbiBhbHJlYWR5IGFkZGVkXCIsXG4gIGxpc3Rfb2ZfcmVsYXRpb25zX2ZlYXR1cmU6IFwiTGlzdCBvZiByZWxhdGlvbnMgZmVhdHVyZSBcIixcbiAgdG9vbHRpcDoge1xuICAgIGVkaXRfbGF5ZXI6IFwiRWRpdCBMYXllclwiXG4gIH0sXG4gIHRvb2xib3g6IHtcbiAgICB0aXRsZTogJ0VkaXQnXG4gIH0sXG4gIHRhYmxlOiB7XG4gICAgZWRpdDogXCJFZGl0IGZlYXR1cmVcIixcbiAgICBjb3B5OiBcIkNyZWF0ZSBhIGNvcHlcIixcbiAgICBkZWxldGU6IFwiRGVsZXRlIGZlYXR1cmVcIlxuICB9LFxuICB0b29sczoge1xuICAgIGNvcHk6IFwiQ29weSBmZWF0dXJlc1wiLFxuICAgIHBhc3RlZmVhdHVyZXNmcm9tb3RoZXJsYXllcnM6IFwiUGFzdGUgZmVhdHVyZXMgZnJvbSBvdGhlciBsYXllclwiLFxuICAgIGFkZHBhcnQ6IFwiQWRkIHBhcnQgdG8gbXVsdGlwYXJ0XCIsXG4gICAgZGVsZXRlcGFydDogXCJEZWxldGUgcGFydCBmcm9tIG11bHRpcGFydFwiLFxuICAgIG1lcmdlOiBcIkRpc3NvbHZlIGZlYXR1cmVzXCIsXG4gICAgc3BsaXQ6IFwiU3BsaXQgRmVhdHVyZVwiLFxuICAgIGFkZF9mZWF0dXJlOiBcIkFkZCBmZWF0dXJlXCIsXG4gICAgZGVsZXRlX2ZlYXR1cmU6IFwiRGVsZXRlIGZlYXR1cmVcIixcbiAgICBtb3ZlX2ZlYXR1cmU6IFwiTW92ZSBmZWF0dXJlXCIsXG4gICAgdXBkYXRlX3ZlcnRleDogXCJVcGRhdGUgZmVhdHVyZSB2ZXJ0ZXhcIixcbiAgICB1cGRhdGVfZmVhdHVyZTogXCJVcGRhdGUgZmVhdHVyZSBhdHRyaWJ1dGVcIixcbiAgICB1cGRhdGVfbXVsdGlfZmVhdHVyZXM6IFwiVXBkYXRlIGF0dHJpYnV0ZXMgb2Ygc2VsZWN0ZWQgZmVhdHVyZXNcIixcbiAgICBjb3B5ZmVhdHVyZWZyb21leHRlcm5hbGxheWVyOiBcIkNyZWF0ZSBGZWF0dXJlIGZyb20gZXhpc3RpbmcgZmVhdHVyZVwiXG4gIH0sXG4gIHRvb2xzb2Z0b29sOiB7XG4gICAgbWVhc3VyZTogXCJTaG93IG1lYXN1cmVcIixcbiAgICBzbmFwOiBcIlNuYXAgbGF5ZXJcIixcbiAgICBzbmFwYWxsOiBcIlNuYXAgdG8gYWxsIGxheWVyc1wiXG4gIH0sXG4gIHN0ZXBzOiB7XG4gICAgaGVscDoge1xuICAgICAgc2VsZWN0X2VsZW1lbnRzOiBcIlNlbGVjdCBmZWF0dXJlc1wiLFxuICAgICAgc2VsZWN0X2VsZW1lbnQ6IFwiU2VsZWN0IGZlYXR1cmVcIixcbiAgICAgIGNvcHk6IFwiQ3JlYXRlIG5ldyBjb3B5IG9mIHNlbGVjdGVkIGZlYXR1cmVzXCIsXG4gICAgICBtZXJnZTogXCJEaXNzb2x2ZSBmZWF0dXJlc1wiLFxuICAgICAgc3BsaXQ6IFwiU3BsaXQgRmVhdHVyZVwiLFxuICAgICAgbmV3OiBcIkNyZWF0ZSBuZXcgZmVhdHVyZVwiLFxuICAgICAgZWRpdF90YWJsZTogXCJFZGl0IHRhYmxlIGZlYXR1cmVzXCIsXG4gICAgICBkcmF3X25ld19mZWF0dXJlOiBcIkRyYXcgZmVhdHVyZSBvbiBtYXBcIixcbiAgICAgIGFjdGlvbl9jb25maXJtOiBcIkNvbmZpcm0gYWN0aW9uXCIsXG4gICAgICBkb3VibGVfY2xpY2tfZGVsZXRlOiBcIlNlbGVjdCBmZWF0dXJlIG9uIG1hcCB0byBkZWxldGVcIixcbiAgICAgIGVkaXRfZmVhdHVyZV92ZXJ0ZXg6IFwiTW9kaWZ5IG9yIGFkZCBhIHZlcnRleCBvbiBzZWxlY3RlZCBmZWF0dXJlXCIsXG4gICAgICBtb3ZlOiBcIk1vdmUgc2VsZWN0ZWQgZmVhdHVyZVwiLFxuICAgICAgc2VsZWN0X2ZlYXR1cmVfdG9fcmVsYXRpb246IFwiU2VsZWN0IGZlYXR1cmUgdGhhdCB5b3UgYmluZCByZWxhdGlvblwiLFxuICAgICAgc2hvd19lZGl0X2ZlYXR1cmVfZm9ybTogIFwiU2hvdyBmZWF0dXJlIGZvcm0gdG8gZWRpdCBhdHRyaWJ1dGVzXCIsXG4gICAgICBwaWNrX2ZlYXR1cmU6IFwiU2VsZWN0IGZlYXR1cmUgb24gbWFwIHRvIG1vZGlmeVwiLFxuICAgICAgaW5zZXJ0X2F0dHJpYnV0ZXNfZmVhdHVyZTogXCJJbnNlcnQgYXR0cmlidXRlcyBvZiB0aGUgZmVhdHVyZVwiXG4gICAgfVxuICB9LFxuICB3b3JrZmxvdzoge1xuICAgIHN0ZXBzOiB7XG4gICAgICBzZWxlY3Q6ICdDbGljayBvbiBmZWF0dXJlIHRvIHNlbGVjdCcsXG4gICAgICBkcmF3X3BhcnQ6IFwiRHJhdyBuZXcgcGFydFwiLFxuICAgICAgbWVyZ2U6ICdTZWxlY3QgZmVhdHVyZXdoZXJlIGRpc3NvbHZlJyxcbiAgICAgIHNlbGVjdFNISUZUOiAnU2VsZWN0IGZlYXR1cmVzIGRyYXdpbmcgYSByZWN0YW5nbGUgcHJlc3NpbmcgU0hJRlQnLFxuICAgICAgc2VsZWN0RHJhd0JveDogXCJTZWxlY3QgZmVhdHVyZXMgZHJhd2luZyBhIHJlY3RhbmdsZSBieSB0d28gcG9pbnQgb2Ygb3Bwb3NpdGUgY29ybmVyc1wiLFxuICAgICAgc2VsZWN0RHJhd0JveEF0TGVhc3QyRmVhdHVyZTogXCJTZWxlY3QgYXQgbGVhc3QgZmVhdHVyZXMgZHJhd2luZyBhIHJlY3RhbmdsZSBieSB0d28gcG9pbnQgb2Ygb3Bwb3NpdGUgY29ybmVyc1wiLFxuICAgICAgc2VsZWN0UG9pbnQ6IFwiQ2xpY2sgb24gZmVhdHVyZSB0byBzZWxlY3RcIixcbiAgICAgIHNlbGVjdFBvaW50U0hJRlQ6ICdTZWxlY3QgZmVhdHVyZXMgZHJhd2luZyBhIHJlY3RhbmdsZSBwcmVzc2luZyBTSElGVCAobXVsdGlmZWF0dXJlcykgb3IgY2xpY2sgb24gb25lIGZlYXR1cmUnLFxuICAgICAgc2VsZWN0TXVsdGlQb2ludFNISUZUOiAnU2VsZWN0IGZlYXR1cmVzIGRyYXdpbmcgYSByZWN0YW5nbGUgcHJlc3NpbmcgU0hJRlQgb3IgY2xpY2sgb24gZmVhdHVyZScsXG4gICAgICBzZWxlY3RNdWx0aVBvaW50U0hJRlRBdExlYXN0MkZlYXR1cmU6ICdTZWxlY3QgYXQgbGVhc3QgMiBmZWF0dXJlcyBkcmF3aW5nIGEgcmVjdGFuZ2xlIHByZXNzaW5nIFNISUZUIG9yIGNsaWNrIG9uIGZlYXR1cmUnLFxuICAgICAgY29weUNUUkw6ICdDb3B5IHNlbGVjdGVkIGZlYXR1cmVzIHVzaW5nIENUUkwrQycsXG4gICAgICBzZWxlY3RTdGFydFZlcnRleDogJ1NlbGVjdCBzdGFydGluZyB2ZXJ0ZXggb2Ygc2VsZWN0ZWQgZmVhdHVyZXMnLFxuICAgICAgc2VsZWN0VG9QYXN0ZTogJ1NlbGVjdCB0aGUgcG9pbnQgd2hlcmUgcGFzdGUgdGhlIGZlYXR1cmVzIHNlbGVjdGVkJyxcbiAgICAgIGRyYXdfc3BsaXRfbGluZTogXCJEcmF3IGEgbGluZSB0byBzcGxpdCBzZWxlY3RlZCBmZWF0dXJlXCJcbiAgICB9XG4gIH0sXG4gIG1lc3NhZ2VzOiB7XG4gICAgZmVhdHVyZXNsb2NrYnlvdGhlcnVzZXI6IFwiU29tZSBnZW9tZXRyaWVzL3JlY29yZHMgYXJlIG5vdCBlZGl0YWJsZSBiZWNhdXNlIGluIGVkaXRpbmcgYnkgb3RoZXIgdXNlclwiLFxuICAgIHNwbGl0dGVkOiBcIlNwbGl0dGVkXCIsXG4gICAgbm9zcGxpdHRlZGZlYXR1cmU6IFwiRmVhdHVyZSBub3Qgc3BpdHRlZFwiLFxuICAgIHByZXNzX2VzYzogXCJQcmVzcyBFU0MgdG8gYmFja1wiLFxuICAgIG9ubGluZTogXCJCYWNrIE9OTElORS4gTm93IHlvdSBjYW4gc2F2ZSB5b3VyIGNoYW5nZXMgb24gZGF0YWJhc2VcIixcbiAgICBvZmZsaW5lOiBcIllvdSBhcmUgT0ZGTElORS4gQWxsIGNoYW5nZXMgYXJlIHNhdmVkIGxvY2FsbHlcIixcbiAgICBkZWxldGVfZmVhdHVyZTogXCJEbyB5b3Ugd2FudCBkZWxldGUgc2VsZWN0ZWQgZmVhdHVyZSA/XCIsXG4gICAgZGVsZXRlX2ZlYXR1cmVfcmVsYXRpb25zOiBcIklmIGZlYXR1cmUgaGFzIGJpbmRpbmdzIHJlbGF0aW9ucywgdGhlc2UgcmVsYXRpb25zIGJlY29tZSBvcnBoYW5zLiBXZSBzdWdnZXN0IHRvIGhhbmRsZSB0aGVzZSByZWxhdGlvbnMgYmVmb3JlIGRldGVsZSB0aGlzIGZlYXR1cmVcIixcbiAgICB1bmxpbmtfcmVsYXRpb246IFwiRG8geW91IHdhbnQgdW5saW5rIHJlbGF0aW9uP1wiLFxuICAgIGNvbW1pdF9mZWF0dXJlOiBcIkRvIHlvdSB3YW50IHRvIHNhdmUgdGhlIGNoYW5nZXNcIixcbiAgICBjaGFuZ2VfdG9vbGJveF9yZWxhdGlvbjogXCJMYXllciBoYXMgcmVsYXRpb24vcmVsYXRpb25zLiBCZWZvcmUgc3dpdGNoIGVkaXRpbmcgeW91IG5lZWQgdG8gc2F2ZSBjaGFuZ2VzIGRvbmUuXCIsXG4gICAgc2F2ZWQ6IFwiRGF0YSBzYXZlZCBzdWNjZXNzZnVsbHlcIixcbiAgICBzYXZlZF9sb2NhbDpcIkRhdGEgc2F2ZWQgbG9jYWxseSBzdWNjZXNzZnVsbHlcIixcbiAgICBsb2FkaW5nX2RhdGE6IFwiTG9hZGluZyBkYXRhXCIsXG4gICAgc2F2aW5nOiBcIlNhdmluZyBkYXRhLiBQbGVhc2Ugd2FpdCAuLi5cIixcbiAgICBjb25zdHJhaW50czoge1xuICAgICAgZW5hYmxlX2VkaXRpbmc6IFwiUGxlYXNlIFpvb20gSW4gdG8gZW5hYmxlIGVkaXRpbmcgdG9vbHMgXFxuQWN0aXZhdGlvbiBzY2FsZSBhdCAxOlwiXG4gICAgfSxcbiAgICBwZGY6IFwiRG9jdW1lbnQgcHJldmlldyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgY2xpY2sgaGVyZSBcIixcbiAgICBjb21taXQ6IHtcbiAgICAgIGhlYWRlcjogXCJUaGUgZm9sbG93aW5nIGxpc3Qgc2hvdyBhbGwgY2hhbmdlcyB0byBjb21taXQuXCIsXG4gICAgICBoZWFkZXJfYWRkOiBcIjxiPkFkZGVkPC9iPiBzaG93IHRoZSBudW1iZXIgb2YgZmVhdHVyZXMgYWRkZWRcIixcbiAgICAgIGhlYWRlcl91cGRhdGVfZGVsZXRlOiBcIjxiPk1vZGlmaWVkPC9iPiBhbmQgPGI+RGVsZXRlZDwvYj4gc2hvdyB0aGUgbGlzdCBvZiBmZWF0dXJlcyBpZFwiLFxuICAgICAgYWRkOiBcIkFkZGVkKG4uIGZlYXR1cmVzKVwiLFxuICAgICAgZGVsZXRlOiBcIkRlbGV0ZWQoaWQpXCIsXG4gICAgICB1cGRhdGU6IFwiTW9kaWZpZWQoaWQpXCJcbiAgICB9LFxuICAgIGxvYWRpbmdfdGFibGVfZGF0YTogXCJCdWlsZGluZyBEYXRhIFRhYmxlLiBQbGVhc2Ugd2FpdCAuLi5cIixcbiAgICBjb3B5X2FuZF9wYXN0ZV9mcm9tX290aGVyX2xheWVyX21hbmRhdG9yeV9maWVsZHM6IFwiSXQgaXMgbmVjZXNzYXJ5IHRvIGZpbGwgaW4gYW55IG1hbmRhdG9yeSBmaWVsZHMgb24gdGhlIGZlYXR1cmVzIHBhc3RlZCBiZWZvcmUgc2F2aW5nXCIsXG4gICAgbm9fZmVhdHVyZV9zZWxlY3RlZDogXCJObyBmZWF0dXJlIHNlbGVjdGVkXCJcbiAgfSxcbiAgcmVsYXRpb246IHtcbiAgICB0YWJsZToge1xuICAgICAgaW5mbzogYFxuICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgU2VsZWN0IHJlbGF0aW9ucyB0byBsaW5rIGl0IHRvIGN1cnJlbnQgZWRpdGluZyBmZWF0dXJlLlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYFxuICAgIH1cbiAgfSxcbiAgZm9ybToge1xuICAgIHJlbGF0aW9uczoge1xuICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgYmFja190b19mYXRoZXI6XCJCYWNrIHRvIGVkaXQgZmF0aGVyXCIsXG4gICAgICAgIGFkZF9yZWxhdGlvbjogXCJDcmVhdGUgYW5kIGxpbmsgbmV3IHJlbGF0aW9uXCIsXG4gICAgICAgIGxpbmtfcmVsYXRpb246IFwiSm9pbiBhIHJlbGF0aW9uIHRvIHRoaXMgZmVhdHVyZVwiLFxuICAgICAgICBvcGVuX3JlbGF0aW9uX3Rvb2xzOiBcIlNob3cgcmVsYXRpb24gdG9vbHNcIixcbiAgICAgICAgdW5saW5rX3JlbGF0aW9uOiBcIlVubGluayByZWxhdGlvblwiXG4gICAgICB9XG4gICAgfSxcbiAgICBidXR0b25zOiB7XG4gICAgICBzYXZlOiBcIlNhdmUgYW5kIEV4aXRcIixcbiAgICAgIHNhdmVfYW5kX2JhY2s6IFwiU2F2ZSBhbmQgQmFja1wiLFxuICAgICAgY2FuY2VsOiBcIklnbm9yZSBDaGFuZ2VzXCJcbiAgICB9XG4gIH0sXG4gIG1vZGFsOiB7XG4gICAgdG9vbHM6IHtcbiAgICAgIGNvcHlmZWF0dXJlZnJvbW90aGVybGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGZlYXR1cmUvc1wiXG4gICAgICB9LFxuICAgICAgY29weWZlYXR1cmVmcm9tcHJvamVjdGxheWVyOiB7XG4gICAgICAgIHRpdGxlOiBcIlNlbGVjdCBhIGZlYXR1cmVcIlxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZXJyb3JzOiB7XG4gICAgbm9fbGF5ZXJzOiBcIlRhcGFodHVpIHZpcmhlLiBUYXNvamEgZWkgb2xlIG1haGRvbGxpc3RhIG11b2thdGEuXCIsXG4gICAgc29tZV9sYXllcnM6IFwiVGFwYWh0dWkgdmlyaGUuIEpvdGtpbiB0YXNvdCBlaXbDpHQgb2xlIG11b2thdHRhdmlzc2EuXCJcbiAgfSxcbiAgc2VhcmNoOiBcIkhha3VcIixcbiAgZWRpdGluZ19jaGFuZ2VzOiBcIkVkaXRpbmcgQ2hhbmdlc1wiLFxuICBlZGl0aW5nX2RhdGE6IFwiTXVva2F0YWFuIHRhc29qYVwiLFxuICBlZGl0aW5nX2F0dHJpYnV0ZXM6IFwiTXVva2F0YWFuIGF0dHJpYnV1dHRlamFcIixcbiAgcmVsYXRpb25zOiBcIlJlbGFhdGlvdFwiLFxuICBlZGl0X3JlbGF0aW9uOiBcIk11b2trYWEgcmVsYWF0aW90YVwiLFxuICBiYWNrX3RvX3JlbGF0aW9uczogXCJUYWthaXNpbiByZWxhYXRpb2loaW5cIixcbiAgbm9fcmVsYXRpb25zX2ZvdW5kOiBcIlJlbGFhdGlvaXRhIGVpIGzDtnl0eW55dFwiLFxuICByZWxhdGlvbl9kYXRhOiBcIlJlbGFhdGlvbiB0aWVkb3RcIixcbiAgcmVsYXRpb25fYWxyZWFkeV9hZGRlZDogXCJSZWxhYXRpbyBvbiBqbyBsaXPDpHR0eVwiLFxuICBsaXN0X29mX3JlbGF0aW9uc19mZWF0dXJlOiBcIkxpc3RhIHJlbGFhdGlvbiBvbWluYWlzdXVrc2lzdGFcIixcbiAgdG9vbHRpcDoge1xuICAgIGVkaXRfbGF5ZXI6IFwiTXVva2thYSB0YXNvYVwiXG4gIH0sXG4gIHRvb2xib3g6IHtcbiAgICB0aXRsZTogJ011b2trYWEnXG4gIH0sXG4gIHRhYmxlOiB7XG4gICAgZWRpdDogXCJNdW9ra2FhIG9taW5haXN1dXR0YVwiLFxuICAgIGNvcHk6IFwiTHVvIGtvcGlvXCIsXG4gICAgZGVsZXRlOiBcIlBvaXN0YSBvbWluYWlzdXVzXCJcbiAgfSxcbiAgdG9vbHM6IHtcbiAgICBjb3B5OiBcIktvcGlvIG9taW5haXN1dWtzaWFcIixcbiAgICBwYXN0ZWZlYXR1cmVzZnJvbW90aGVybGF5ZXJzOiBcIlBhc3RlIGZlYXR1cmVzIGZyb20gb3RoZXIgbGF5ZXJcIixcbiAgICBhZGRwYXJ0OiBcIkxpc8Okw6Qgb3NhXCIsXG4gICAgZGVsZXRlcGFydDogXCJQb2lzdGEgb3NhXCIsXG4gICAgbWVyZ2U6IFwiWWhkaXN0w6Qgb21pbmFpc3V1ZGV0XCIsXG4gICAgc3BsaXQ6IFwiTGVpa2thYSBvbWluYWlzdXVzXCIsXG4gICAgYWRkX2ZlYXR1cmU6IFwiTGlzw6TDpCBvbWluYWlzdXVzXCIsXG4gICAgZGVsZXRlX2ZlYXR1cmU6IFwiUG9pc3RhIG9taW5haXN1dXNcIixcbiAgICBtb3ZlX2ZlYXR1cmU6IFwiU2lpcnLDpCBvbWluYWlzdXV0dGFcIixcbiAgICB1cGRhdGVfdmVydGV4OiBcIlDDpGl2aXTDpCBwaXN0ZWVuIG9taW5haXN1dXR0YVwiLFxuICAgIHVwZGF0ZV9mZWF0dXJlOiBcIlDDpGl2aXTDpCBvbWluYWlzdXVzXCIsXG4gICAgY29weWZlYXR1cmVmcm9tZXh0ZXJuYWxsYXllcjogXCJDcmVhdGUgRmVhdHVyZSBmcm9tIGV4aXN0aW5nIGZlYXR1cmVcIlxuICB9LFxuICB0b29sc29mdG9vbDoge1xuICAgIG1lYXN1cmU6IFwiU2hvdyBtZWFzdXJlXCIsXG4gICAgc25hcDogXCJTbmFwIGxheWVyXCIsXG4gICAgc25hcGFsbDogXCJTbmFwIHRvIGFsbCBsYXllcnNcIlxuICB9LFxuICBzdGVwczoge1xuICAgIGhlbHA6IHtcbiAgICAgIHNlbGVjdF9lbGVtZW50czogXCJWYWxpdHNlIG9taW5haXN1dWRldFwiLFxuICAgICAgc2VsZWN0X2VsZW1lbnQ6IFwiVmFsaXRzZSBvbWluYWlzdXVzXCIsXG4gICAgICBjb3B5OiBcIkx1byBrb3BpbyB2YWxpdHVpc3RhIG9taW5haXN1dWtzaXN0YVwiLFxuICAgICAgbWVyZ2U6IFwiWWhkaXN0w6Qgb21pbmFpc3V1ZGV0XCIsXG4gICAgICBzcGxpdDogXCJMZWlra2FhIG9taW5haXN1dXNcIixcbiAgICAgIG5ldzogXCJMdW8gdXVzaSBvbWluYWlzdXVzXCIsXG4gICAgICBlZGl0X3RhYmxlOiBcIk11dXRhIHRhdWx1biBvbWluYWlzdXVrc2lhXCIsXG4gICAgICBkcmF3X25ld19mZWF0dXJlOiBcIlBpaXJyw6Qgb21pbmFpc3V1cyBrYXJ0YWxsZVwiLFxuICAgICAgYWN0aW9uX2NvbmZpcm06IFwiSHl2w6Rrc3kgdG9pbWludG9cIixcbiAgICAgIGRvdWJsZV9jbGlja19kZWxldGU6IFwiVmFsaXRzZSBwb2lzdGV0dGF2YSBvbWluYWlzdXVzIGthcnRhbHRhXCIsXG4gICAgICBlZGl0X2ZlYXR1cmVfdmVydGV4OiBcIk11dXRhIHBpc3RldHTDpCB0YWkgbGlzw6TDpCBwaXN0ZSB2YWxpdHR1dW4gb21pbmFpc3V1dGVlblwiLFxuICAgICAgbW92ZTogXCJTaWlycsOkIHZhbGl0dHUgb21pbmFpc3V1c1wiLFxuICAgICAgc2VsZWN0X2ZlYXR1cmVfdG9fcmVsYXRpb246IFwiVmFsaXRzZSByZWxhYXRpb1wiLFxuICAgICAgc2hvd19lZGl0X2ZlYXR1cmVfZm9ybTogIFwiTsOkeXTDpCBvbWluYWlzdXVzbG9tYWtlIG11b2thdGFrc2VzaSBhdHRyaWJ1dXR0ZWphXCIsXG4gICAgICBwaWNrX2ZlYXR1cmU6IFwiVmFsaXRzZSBtdW9rYXR0YXZhIG9taW5haXN1dXMga2FydGFsdGFcIixcbiAgICAgIGluc2VydF9hdHRyaWJ1dGVzX2ZlYXR1cmU6IFwiTGlzw6TDpCBvbWluYWlzdXVkZW4gYXR0cmlidXV0aXRcIlxuICAgIH1cbiAgfSxcbiAgd29ya2Zsb3c6IHtcbiAgICBzdGVwczoge1xuICAgICAgc2VsZWN0OiAnVmFsaXRzZSBvbWluYWlzdXVzJyxcbiAgICAgIGRyYXdfcGFydDogXCJQaWlycsOkIHV1c2kgb3NhXCIsXG4gICAgICBtZXJnZTogJ1ZhbGl0c2Ugb21pbmFpc3V1cyB5aGRpc3TDpMOka3Nlc2knLFxuICAgICAgc2VsZWN0U0hJRlQ6ICdQYWluYSBTSElGVCwgam9zIGhhbHVhdCB2YWxpdGEga29odGVpdGEgc3VvcmFrdWxtaW92YWxpbm5hbGxhLicsICAvL1Rlcm8gMTAuMTIuMjAyMFxuICAgICAgc2VsZWN0RHJhd0JveDogXCJQaWlycsOkIHN1b3Jha3VsbWlvLCBqb25rYSBzacOkbHTDpCBrb2h0ZWV0IHZhbGl0YWFuIFwiLCAvL1Rlcm8gMTAuMTIuMjAyMFxuICAgICAgc2VsZWN0RHJhd0JveEF0TGVhc3QyRmVhdHVyZTogXCJQaWlycsOkIHN1b3Jha3VsbWlvLCBqb25rYSBzacOkbHTDpCBrb2h0ZWV0IHbDpGhpbnTDpMOkbiAyIHZhbGl0YWFuIFwiLFxuICAgICAgc2VsZWN0UG9pbnQ6IFwiVmFsaXRzZSBvbWluYWlzdXVzXCIsXG4gICAgICBzZWxlY3RQb2ludFNISUZUOiAnUGFpbmEgU0hJRlQsIGpvcyBoYWx1YXQgdmFsaXRhIG9taW5haXN1dWtzaWEgc3VvcmFrdWxtaW92YWxpbm5hbGxhLCB0YWkgdmFsaXRzZSB5a3NpdHTDpGluZW4gb21pbmFpc3V1cy4nLFxuICAgICAgc2VsZWN0TXVsdGlQb2ludFNISUZUOiAnUGFpbmEgU0hJRlQsIGpvcyBoYWx1YXQgdmFsaXRhIG9taW5haXN1dWtzaWEgc3VvcmFrdWxtaW92YWxpbm5hbGxhLCB0YWkgdmFsaXRzZSB5a3NpdHTDpGluZW4gb21pbmFpc3V1cy4nLFxuICAgICAgc2VsZWN0TXVsdGlQb2ludFNISUZUQXRMZWFzdDJGZWF0dXJlOiAnUGFpbmEgU0hJRlQsIGpvcyBoYWx1YXQgdmFsaXRhIHbDpGhpbnTDpMOkbiAyIG9taW5haXN1dWtzaWEgc3VvcmFrdWxtaW92YWxpbm5hbGxhLCB0YWkgdmFsaXRzZSB5a3NpdHTDpGluZW4gb21pbmFpc3V1cy4nLFxuICAgICAgY29weUNUUkw6ICdDVFJMK0MsIHZvaXQga29waW9pZGEgdmFsaXR1dCBvbWluYWlzdXVkZXQuJywgIC8vVGVybyAxMC4xMi4yMDIwXG4gICAgICBzZWxlY3RTdGFydFZlcnRleDogJ09zb2l0YSB2YWxpdHR1amVuIG9taW5haXN1dWtzaWVuIGFsa3VwaXN0ZS4nLFxuICAgICAgc2VsZWN0VG9QYXN0ZTogJ1ZhbGl0c2Uga29odGEsIGpvaG9uIGxpaXTDpHQgdmFsaXR1dCBvbWluYWlzdXVkZXQuJyxcbiAgICAgIGRyYXdfc3BsaXRfbGluZTogXCJQaWlycsOkIHZpaXZhLCBqb25rYSBtdWthYW4gdmFsaXR0dSBvbWluYWlzdXVzIGphZXRhYW4uXCJcbiAgICB9XG4gIH0sXG4gIG1lc3NhZ2VzOiB7XG4gICAgZmVhdHVyZXNsb2NrYnlvdGhlcnVzZXI6IFwiU29tZSBmZWF0dXJlcyBhcmUgbG9ja2VkIGJ5IGFub3RoZXIgdXNlclwiLFxuICAgIHNwbGl0dGVkOiBcIkphZXR0dVwiLFxuICAgIG5vc3BsaXR0ZWRmZWF0dXJlOiBcIk9taW5haXN1dXR0YSBlaSBqYWV0dHVcIixcbiAgICBwcmVzc19lc2M6IFwiUGFpbmEgRVNDIHBhbGF0YWtzZXNpXCIsXG4gICAgb25saW5lOiBcIllodGV5cyBtdW9kb3N0ZXR0dS4gTXV1dG9rc2V0IHZvaWRhYW4gdGFsbGVudGFhIHRpZXRva2FudGFhbi5cIixcbiAgICBvZmZsaW5lOiBcIk9sZXQgb2ZmbGluZS10aWxhc3NhLiBNdXV0b2tzZXQgdGFsbGVubmV0YWFuIHBhaWthbGxpc2VzdGlcIixcbiAgICBkZWxldGVfZmVhdHVyZTogXCJIYWx1YXRrbyBwb2lzdGFhIHZhbGl0dW4gb21pbmFpc3V1ZGVuP1wiLFxuICAgIGRlbGV0ZV9mZWF0dXJlX3JlbGF0aW9uczogXCJNaWvDpGxpIG9taW5haXN1dWRlbGxhIG9uIHNpdG92aWEgcmVsYWF0aW9pdGEsIG7DpGlzdMOkIHJlbGFhdGlvc3RhIHR1bGVlIG9ycG9qYS4gU3Vvc2l0dGVsZW1tZSBrw6RzaXR0ZWxlbcOkw6RuIG7DpG3DpCByZWxhYXRpb3QgZW5uZW4gcG9pc3RhbWlzdGFcIixcbiAgICB1bmxpbmtfcmVsYXRpb246IFwiSGFsdWF0a28gcG9pc3RhYSByZWxhYXRpb24/XCIsXG4gICAgY29tbWl0X2ZlYXR1cmU6IFwiVGFsbGVubmV0YWFua28gbXV1dG9rc2V0P1wiLFxuICAgIGNoYW5nZV90b29sYm94X3JlbGF0aW9uOiBcIlRhc29sbGEgb24gcmVsYWF0aW8vcmVsYWF0aW90YS4gRW5uZW4gbXVva2thdWtzZW4gYWxvaXR0YW1pc3RhIHR1bGVlIG11dXRva3NldCB0YWxsZW50dGFhLlwiLFxuICAgIHNhdmVkOiBcIlRpZWRvdCB0YWxsZW5uZXR0dSBvbm5pc3R1bmVlc3RpXCIsXG4gICAgc2F2ZWRfbG9jYWw6XCJUaWVkb3Qgb24gdGFsbGVubmV0dHUgb25uaXN0dW5lZXN0aSBwYWlrYWxsaXNlc3RpLlwiLFxuICAgIGxvYWRpbmdfZGF0YTogXCJMYWRhdGFhbiB0aWV0b2phXCIsXG4gICAgc2F2aW5nOiBcIlRhbGxlbnRhYW4gdGlldG9qYS4gT2RvdGEuLi5cIixcbiAgICBjb25zdHJhaW50czoge1xuICAgICAgZW5hYmxlX2VkaXRpbmc6IFwiTMOkaGVubsOkIG90dGFha3Nlc2kgbXVva2thdXN0ecO2a2FsdXQga8OkeXR0w7bDtm4gXFxuQWt0aXZvaW50aSBtaXR0YWthYXZhIDE6XCJcbiAgICB9LFxuICAgIHBkZjogXCJEb2t1bWVudGluIGVzaWthdHNlbHUgZWkgb2xlIHNhYXRhdmlsbGEuIFBhaW5hIHTDpHN0w6QgXCIsXG4gICAgY29tbWl0OiB7XG4gICAgICBoZWFkZXI6IFwiU2V1cmFhdmEgbHVldHRlbG8gbsOkeXR0w6TDpCBrYWlra2kgbXV1dG9rc2V0LlwiLFxuICAgICAgaGVhZGVyX2FkZDogXCI8Yj5MaXPDpHR0eTwvYj4gbsOkeXTDpCBsaXPDpHR0eWplbiBvbWluYWlzdXVrc2llbiBsdWt1bcOkw6Ryw6RcIixcbiAgICAgIGhlYWRlcl91cGRhdGVfZGVsZXRlOiBcIjxiPk11b2thdHR1PC9iPiBqYSA8Yj5Qb2lzdGV0dHU8L2I+IE7DpHl0w6QgbGlzdMOkIG9taW5haXN1dWtzaWVuIGlkOnN0w6RcIixcbiAgICAgIGFkZDogXCJMaXPDpHR0eShuLiBvbWluYWlzdXV0dGEpXCIsXG4gICAgICBkZWxldGU6IFwiUG9pc3RldHR1KGlkKVwiLFxuICAgICAgdXBkYXRlOiBcIk11b2thdHR1KGlkKVwiXG4gICAgfSxcbiAgICBsb2FkaW5nX3RhYmxlX2RhdGE6IFwiQnVpbGRpbmcgRGF0YSBUYWJsZS4gUGxlYXNlIHdhaXQgLi4uXCIsXG4gICAgY29weV9hbmRfcGFzdGVfZnJvbV9vdGhlcl9sYXllcl9tYW5kYXRvcnlfZmllbGRzOiBcIkl0IGlzIG5lY2Vzc2FyeSB0byBmaWxsIGluIGFueSBtYW5kYXRvcnkgZmllbGRzIG9uIHRoZSBmZWF0dXJlcyBwYXN0ZWQgYmVmb3JlIHNhdmluZ1wiLFxuICAgIG5vX2ZlYXR1cmVfc2VsZWN0ZWQ6IFwiTm8gZmVhdHVyZSBzZWxlY3RlZFwiXG4gIH0sXG4gIHJlbGF0aW9uOiB7XG4gICAgdGFibGU6IHtcbiAgICAgIGluZm86IGBcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG5cdFx0XHRcdFx0VmFsaXRzZSByZWxhYXRpb3RhIGxpbmtpdHTDpMOka3Nlc2kgbmUgbXVva2F0dGF2YWFuIG9taW5haXN1dXRlZW4uXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBgXG4gICAgfVxuICB9LFxuICBmb3JtOiB7XG4gICAgcmVsYXRpb25zOiB7XG4gICAgICB0b29sdGlwczoge1xuICAgICAgICBiYWNrX3RvX2ZhdGhlcjpcIkJhY2sgdG8gZWRpdCBmYXRoZXJcIixcbiAgICAgICAgYWRkX3JlbGF0aW9uOiBcIkx1byBqYSBsaW5raXTDpCB1dXNpIHJlbGFhdGlvXCIsXG4gICAgICAgIGxpbmtfcmVsYXRpb246IFwiTGlpdMOkIHJlbGFhdGlvIHTDpGjDpG4gb21pbmFpc3V1dGVlblwiLFxuICAgICAgICBvcGVuX3JlbGF0aW9uX3Rvb2xzOiBcIk7DpHl0w6QgcmVsYWF0aW90ecO2a2FsdXRcIixcbiAgICAgICAgdW5saW5rX3JlbGF0aW9uOiBcIlBvaXN0YSByZWxhYXRpb1wiXG4gICAgICB9XG4gICAgfSxcbiAgICBidXR0b25zOiB7XG4gICAgICBzYXZlOiBcIlRhbGxlbm5hIGphIHBvaXN0dVwiLFxuICAgICAgc2F2ZV9hbmRfYmFjazogXCJUYWxsZW5uYSBqYSBwYWxhYVwiLFxuICAgICAgY2FuY2VsOiBcIlBlcnV1dGFcIlxuICAgIH1cbiAgfSxcbiAgbW9kYWw6IHtcbiAgICB0b29sczoge1xuICAgICAgY29weWZlYXR1cmVmcm9tb3RoZXJsYXllcjoge1xuICAgICAgICB0aXRsZTogXCJTZWxlY3QgZmVhdHVyZS9zXCJcbiAgICAgIH0sXG4gICAgICBjb3B5ZmVhdHVyZWZyb21wcm9qZWN0bGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGEgZmVhdHVyZVwiXG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBlcnJvcnM6IHtcbiAgICBub19sYXllcnM6IFwiVW5lIGVycmV1ciBzJ2VzdCBwcm9kdWl0ZSBsb3JzIGR1IGNoYXJnZW1lbnQgZGVzIGxheWVycyBkYW5zIGwnw6lkaXRpb24uXCIsXG4gICAgc29tZV9sYXllcnM6IFwiVW5lIGVycmV1ciBzJ2VzdCBwcm9kdWl0ZSBsb3JzIGR1IGNoYXJnZW1lbnQgZGUgY2VydGFpbmVzIGxheWVycyBkYW5zIGwnw6lkaXRpb24uXCJcbiAgfSxcbiAgc2VhcmNoOiBcIlJlY2hlcmNoZVwiLFxuICBlZGl0aW5nX2NoYW5nZXM6IFwiRWRpdGluZyBDaGFuZ2VzXCIsXG4gIGVkaXRpbmdfZGF0YTogXCJNb2RpZmllciBsZXMgZG9ubmVzXCIsXG4gIGVkaXRpbmdfYXR0cmlidXRlczogXCJNb2RpZmllciBsZXMgYXR0cmlidXRzXCIsXG4gIHJlbGF0aW9uczogXCJSZWxhdGlvbnNcIixcbiAgZWRpdF9yZWxhdGlvbjogXCJNb2RpZmllciBsYSByZWxhdGlvblwiLFxuICBiYWNrX3RvX3JlbGF0aW9uczogXCJSZXRvdXIgYXV4IHJlbGF0aW9uc1wiLFxuICBub19yZWxhdGlvbnNfZm91bmQ6IFwiSWwgbid5IGEgcGFzIGRlIHJlbGF0aW9uc1wiLFxuICByZWxhdGlvbl9kYXRhOiBcIkRvbm7DqWVzIHN1ciBsZXMgcmVsYXRpb25zXCIsXG4gIHJlbGF0aW9uX2FscmVhZHlfYWRkZWQgOiBcIlJlbGF0aW9uIGTDqWrDoCBwcsOpc2VudGVcIixcbiAgbGlzdF9vZl9yZWxhdGlvbnNfZmVhdHVyZTogXCJMaXN0ZXIgbGVzIHJlbGF0aW9ucyBkZSBsYSBmb25jdGlvbm5hbGl0w6lcIixcbiAgdG9vbHRpcDp7XG4gICAgZWRpdF9sYXllcjogXCJNb2RpZmllciBsZSBsYXllclwiXG4gIH0sXG4gIHRvb2xib3g6IHtcbiAgICB0aXRsZTogJ01vZGlmaWVyJ1xuICB9LFxuICB0b29sczoge1xuICAgIGNvcHk6IFwiQ29waWVyIGxlcyBmb25jdGlvbm5hbGl0w6lzXCIsXG4gICAgcGFzdGVmZWF0dXJlc2Zyb21vdGhlcmxheWVyczogXCJQYXN0ZSBmZWF0dXJlcyBmcm9tIG90aGVyIGxheWVyXCIsXG4gICAgYWRkcGFydDogXCJBam91dGVyIHVuZSBwacOoY2Ugw6AgbGEgZ8Opb23DqXRyaWVcIixcbiAgICBkZWxldGVwYXJ0OiBcIlN1cHByaW1lciBsYSBwYXJ0aWUgZGUgbGEgZ8Opb23DqXRyaWVcIixcbiAgICBtZXJnZTogXCJEaXNzb3VkcmUgbGVzIGZvbmN0aW9ubmFsaXTDqXNcIixcbiAgICBzcGxpdDogXCJDb3VwZXIgbGEgZm9uY3Rpb25uYWxpdMOpXCIsXG4gICAgYWRkX2ZlYXR1cmU6IFwiQWpvdXRlciB1bmUgZm9uY3Rpb25uYWxpdMOpXCIsXG4gICAgZGVsZXRlX2ZlYXR1cmU6IFwiU3VwcHJpbWVyIGxhIGZvbmN0aW9ubmFsaXTDqVwiLFxuICAgIG1vdmVfZmVhdHVyZTogXCJEw6lwbGFjZXogbGEgZm9uY3Rpb25uYWxpdMOpXCIsXG4gICAgdXBkYXRlX3ZlcnRleDogXCJNZXR0cmUgw6Agam91ciBsZXMgc29tbWV0cyBkZXMgZm9uY3Rpb25uYWxpdMOpc1wiLFxuICAgIHVwZGF0ZV9mZWF0dXJlOiBcIk1vZGlmaWVyIGxlcyBhdHRyaWJ1dHMgZGVzIGZvbmN0aW9ubmFsaXTDqXNcIixcbiAgICB1cGRhdGVfbXVsdGlfZmVhdHVyZXM6IFwiTW9kaWZpZXIgbGVzIGF0dHJpYnV0cyBkZXMgZm9uY3Rpb25uYWxpdMOpcyBzw6lsZWN0aW9ubsOpZXNcIixcbiAgICBjb3B5ZmVhdHVyZWZyb21leHRlcm5hbGxheWVyOiBcIkNyZWF0ZSBGZWF0dXJlIGZyb20gZXhpc3RpbmcgZmVhdHVyZVwiXG4gIH0sXG4gIHRvb2xzb2Z0b29sOiB7XG4gICAgbWVhc3VyZTogXCJTaG93IG1lYXN1cmVcIixcbiAgICBzbmFwOiBcIlNuYXAgbGF5ZXJcIixcbiAgICBzbmFwYWxsOiBcIlNuYXAgdG8gYWxsIGxheWVyc1wiXG4gIH0sXG4gIHRhYmxlOiB7XG4gICAgZWRpdDogXCJNb2RpZmllciBmb25jdGlvbm5hbGl0w6lzXCIsXG4gICAgY29weTogXCJDcsOpZXIgdW5lIGNvcGllXCIsXG4gICAgZGVsZXRlOiBcIlN1cHByaW1lciBsYSBmb25jdGlvbm5hbGl0w6lcIlxuICB9LFxuICBzdGVwczoge1xuICAgIGhlbHA6IHtcbiAgICAgIHNlbGVjdF9lbGVtZW50czogXCJTw6lsZWN0aW9ubmVyIGxlcyBmb25jdGlvbm5hbGl0w6lzXCIsXG4gICAgICBzZWxlY3RfZWxlbWVudDogXCJTw6lsZWN0aW9ubmVyIHVuZSBmb25jdGlvbm5hbGl0w6lcIixcbiAgICAgIGNvcHk6IFwiQ3LDqWVyIHVuZSBjb3BpZSBkZXMgZm9uY3Rpb25uYWxpdMOpcyBzw6lsZWN0aW9ubsOpZXNcIixcbiAgICAgIG1lcmdlOiBcIkRpc3NvdWRyZSBsZXMgZm9uY3Rpb25uYWxpdMOpc1wiLFxuICAgICAgc3BsaXQ6IFwiQ291cGVyIGxhIGZvbmN0aW9ubmFsaXTDqVwiLFxuICAgICAgbmV3OiBcIkNyw6llciB1bmUgbm91dmVsbGUgZm9uY3Rpb25uYWxpdMOpXCIsXG4gICAgICBlZGl0X3RhYmxlOiBcIk1vZGlmaWVyIGxlcyBmb25jdGlvbm5hbGl0w6lzIGRlIGxhIHRhYmxlXCIsXG4gICAgICBkcmF3X25ld19mZWF0dXJlOiBcIkRlc3NpbmVyIHVuZSBmb25jdGlvbm5hbGl0w6kgc3VyIGxhIGNhcnRlXCIsXG4gICAgICBhY3Rpb25fY29uZmlybTogXCJDb25maXJtZXIgbCdhY3Rpb25cIixcbiAgICAgIGRvdWJsZV9jbGlja19kZWxldGU6IFwiU8OpbGVjdGlvbm5lciBsYSBmb25jdGlvbm5hbGl0w6kgc3VyIGxhIGNhcnRlIMOgIHN1cHByaW1lclwiLFxuICAgICAgZWRpdF9mZWF0dXJlX3ZlcnRleDogXCJNb2RpZmllciBvdSBham91dGVyIHVuIHNvbW1ldCDDoCBsYSBmb25jdGlvbm5hbGl0w6kgc8OpbGVjdGlvbm7DqWVcIixcbiAgICAgIG1vdmU6IFwiRMOpcGxhY2VyIGxhIGZvbmN0aW9ubmFsaXTDqSBzw6lsZWN0aW9ubsOpZVwiLFxuICAgICAgc2VsZWN0X2ZlYXR1cmVfdG9fcmVsYXRpb246IFwiU8OpbGVjdGlvbm5lciBsYSBmb25jdGlvbm5hbGl0w6kgcXVlIHZvdXMgc291aGFpdGV6IG1ldHRyZSBlbiByZWxhdGlvblwiLFxuICAgICAgc2hvd19lZGl0X2ZlYXR1cmVfZm9ybTogIFwiQWZmaWNoZXIgbGUgZm9ybXVsYWlyZSBkZSBsYSBmb25jdGlvbm5hbGl0w6kgcGVybWV0dGFudCBkZSBtb2RpZmllciBsZXMgYXR0cmlidXRzXCIsXG4gICAgICBwaWNrX2ZlYXR1cmU6IFwiU8OpbGVjdGlvbm5lciBsJ8OpbMOpbWVudCBkZSBsYSBjYXJ0ZSDDoCBtb2RpZmllclwiLFxuICAgICAgaW5zZXJ0X2F0dHJpYnV0ZXNfZmVhdHVyZTogXCJJbnPDqXJlciBsZXMgYXR0cmlidXRzIGRlIGxhIGZvbmN0aW9ubmFsaXTDqVwiXG4gICAgfVxuICB9LFxuICB3b3JrZmxvdzoge1xuICAgIHN0ZXBzOiB7XG4gICAgICBzZWxlY3Q6ICdDbGlxdWVyIHN1ciBsYSBmb25jdGlvbm5hbGl0w6kgw6Agc8OpbGVjdGlvbm5lcicsXG4gICAgICBkcmF3X3BhcnQ6IFwiRGVzc2luZXIgbGEgbm91dmVsbGUgcGFydGllXCIsXG4gICAgICBtZXJnZTogJ1PDqWxlY3Rpb25uZXIgbGEgZm9uY3Rpb24gw6AgaW50cm9kdWlyZSBlbiBmb25kdScsXG4gICAgICBzZWxlY3RQb2ludDogXCJDbGlxdWVyIHN1ciBsYSBmb25jdGlvbm5hbGl0w6kgcG91ciBsYSBzw6lsZWN0aW9ubmVyXCIsXG4gICAgICBzZWxlY3RTSElGVDogJ1PDqWxlY3Rpb25uZXIgZGVzIGZvbmN0aW9ubmFsaXTDqXMgZW4gbWFpbnRlbmFudCBsYSB0b3VjaGUgU0hJRlQgZW5mb25jw6llJyxcbiAgICAgIHNlbGVjdERyYXdCb3g6IFwiU8OpbGVjdGlvbm5lciBsZXMgZm9uY3Rpb25uYWxpdMOpcyBlbiBkZXNzaW5hbnQgdW4gcmVjdGFuZ2xlIHBhciBsYSBjcsOpYXRpb24gZGVzIGRldXggcG9pbnRzIGRlIGxhIGRpYWdvbmFsZVwiLFxuICAgICAgc2VsZWN0RHJhd0JveEF0TGVhc3QyRmVhdHVyZTogXCJTw6lsZWN0aW9ubmVyIGF1IG1vaW5zIDIgZm9uY3Rpb25uYWxpdMOpcyBlbiBkZXNzaW5hbnQgdW4gcmVjdGFuZ2xlIHBhciBsYSBjcsOpYXRpb24gZGVzIGRldXggcG9pbnRzIGRlIGxhIGRpYWdvbmFsZVwiLFxuICAgICAgc2VsZWN0UG9pbnRTSElGVDogJ1PDqWxlY3Rpb25uZXIgZGVzIGNhcmFjdMOpcmlzdGlxdWVzIGVuIG1haW50ZW5hbnQgbGEgdG91Y2hlIFNISUZUIGVuZm9uY8OpZSAobXVsdGktc8OpbGVjdGlvbikgb3UgZW4gY2xpcXVhbnQgc3VyIHVuZSBzZXVsZSBjYXJhY3TDqXJpc3RpcXVlJyxcbiAgICAgIHNlbGVjdE11bHRpUG9pbnRTSElGVDogJ1PDqWxlY3Rpb25uZXIgZGVzIGZvbmN0aW9ubmFsaXTDqXMgZW4gbWFpbnRlbmFudCBsYSB0b3VjaGUgU0hJRlQgYXBwdXnDqWUgb3UgZW4gY2xpcXVhbnQgc3VyIGxhIGZvbmN0aW9ubmFsaXTDqSBpbmRpdmlkdWVsbGUnLFxuICAgICAgc2VsZWN0TXVsdGlQb2ludFNISUZUQXRMZWFzdDJGZWF0dXJlOiAnU8OpbGVjdGlvbm5lciBhdSBtb2lucyAyIGZvbmN0aW9ubmFsaXTDqXMgZW4gbWFpbnRlbmFudCBsYSB0b3VjaGUgU0hJRlQgYXBwdXnDqWUgb3UgZW4gY2xpcXVhbnQgc3VyIGxhIGZvbmN0aW9ubmFsaXTDqSBpbmRpdmlkdWVsbGUnLFxuICAgICAgY29weUNUUkw6ICdDb3BpZXIgbGVzIGZvbmN0aW9ubmFsaXTDqXMgc8OpbGVjdGlvbm7DqWVzIGF2ZWMgQ1RSTCtDJyxcbiAgICAgIHNlbGVjdFN0YXJ0VmVydGV4OiAnU8OpbGVjdGlvbm5lciBsZSBzb21tZXQgZGUgZMOpcGFydCBkZXMgZm9uY3Rpb25uYWxpdMOpcyBjaG9pc2llcycsXG4gICAgICBzZWxlY3RUb1Bhc3RlOiAnU8OpbGVjdGlvbm5lciBsZSBwb2ludCBvw7kgbGVzIGZvbmN0aW9ubmFsaXTDqXMgc8OpbGVjdGlvbm7DqWVzIHNlcm9udCBjb2xsw6llcycsXG4gICAgICBkcmF3X3NwbGl0X2xpbmU6IFwiVHJhY2V6IHVuZSBsaWduZSBwb3VyIGNvdXBlciBsYSBmb25jdGlvbm5hbGl0w6kgc8OpbGVjdGlvbm7DqWVcIlxuICAgIH1cbiAgfSxcbiAgbWVzc2FnZXM6IHtcbiAgICBmZWF0dXJlc2xvY2tieW90aGVydXNlcjogXCJDZXJ0YWluZXMgZ8Opb23DqXRyaWVzL2VucmVnaXN0cmVtZW50cyBuZSBzb250IHBhcyBtb2RpZmlhYmxlcyBjYXIgaWxzIG9udCDDqXTDqSBtb2RpZmnDqXMgcGFyIHVuIGF1dHJlIHV0aWxpc2F0ZXVyXCIsXG4gICAgc3BsaXR0ZWQ6IFwiRm9uY3Rpb25uYWxpdMOpKHMpIGRpdmlzw6koZXMpXCIsXG4gICAgbm9zcGxpdHRlZGZlYXR1cmU6IFwiTGEgKGxlcykgZm9uY3Rpb25uYWxpdMOpKHMpIG7igJlhIChuJ29udCkgcGFzIMOpdMOpIGRpdmlzw6koZXMpXCIsXG4gICAgcHJlc3NfZXNjOiBcIkFwcHV5ZXogc3VyIEVTQyBwb3VyIHJldmVuaXJcIixcbiAgICBvbmxpbmU6IFwiVm91cyDDqnRlcyDDoCBub3V2ZWF1IEVOIExJR05FLiBWb3VzIHBvdXZleiBlbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9ucyBkZSBmYcOnb24gcGVybWFuZW50ZVwiLFxuICAgIG9mZmxpbmU6IFwiVm91cyDDqnRlcyBIT1JTIExJR05FLiBUb3V0ZXMgbGVzIG1vZGlmaWNhdGlvbnMgc2Vyb250IGVucmVnaXN0csOpZXMgdGVtcG9yYWlyZW1lbnQgZW4gbG9jYWxcIixcbiAgICBkZWxldGVfZmVhdHVyZTogXCJWb3VsZXotdm91cyBzdXBwcmltZXIgbGEgZm9uY3Rpb25uYWxpdMOpIHPDqWxlY3Rpb25uw6llID9cIixcbiAgICBkZWxldGVfZmVhdHVyZV9yZWxhdGlvbnM6IFwiTGEgc3VwcHJlc3Npb24gZCd1bmUgZm9uY3Rpb25uYWxpdMOpIGF2ZWMgZGVzIHJlbGF0aW9ucyBhc3NvY2nDqWVzIGxhaXNzZXJhIGNlcyByZWxhdGlvbnMgb3JwaGVsaW5lcy4gSWwgZXN0IHJlY29tbWFuZMOpIGRlIGfDqXJlciBjZXMgcmVsYXRpb25zIGF2YW50IGRlIHN1cHByaW1lciBsYSBmb25jdGlvbm5hbGl0w6lcIixcbiAgICB1bmxpbmtfcmVsYXRpb246IFwiVm91bGV6LXZvdXMgZMOpdGFjaGVyIGxhIHJlbGF0aW9uID9cIixcbiAgICBjb21taXRfZmVhdHVyZTogXCJWb3VsZXotdm91cyBlbnJlZ2lzdHJlciBkw6lmaW5pdGl2ZW1lbnQgbGVzIGNoYW5nZW1lbnRzwqA/XCIsXG4gICAgY2hhbmdlX3Rvb2xib3hfcmVsYXRpb246IFwiTGF5ZXIgZW4gcmVsYXRpb24uIElsIGVzdCBvYmxpZ2F0b2lyZSBkJ2VucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zIGVuIGNvdXJzIGF2YW50IGRlIHBhc3NlciDDoCBkJ2F1dHJlcyBtb2RpZmljYXRpb25zLlwiLFxuICAgIHNhdmVkOiBcIkxlcyBkb25uw6llcyBvbnQgw6l0w6kgZW5yZWdpc3Ryw6llcyBjb3JyZWN0ZW1lbnRcIixcbiAgICBzYXZlZF9sb2NhbDogXCJMZXMgZG9ubsOpZXMgb250IMOpdMOpIGNvcnJlY3RlbWVudCBzYXV2ZWdhcmTDqWVzIGxvY2FsZW1lbnRcIixcbiAgICBsb2FkaW5nX2RhdGE6IFwiQ2hhcmdlbWVudCBkZXMgZG9ubsOpZXNcIixcbiAgICBzYXZpbmc6IFwiU2F1dmVnYXJkZSBkZXMgZG9ubsOpZXMuIFZldWlsbGV6IHBhdGllbnRlciAuLi5cIixcbiAgICBjb25zdHJhaW50czoge1xuICAgICAgZW5hYmxlX2VkaXRpbmc6IFwiQXVnbWVudGVyIGxlIG5pdmVhdSBkZSB6b29tIHBvdXIgcGVybWV0dHJlIGwnw6lkaXRpb24gXFxuRWNoZWxsZSBkZSBkw6ljbGVuY2hlbWVudCAxIDpcIlxuICAgIH0sXG4gICAgY29tbWl0OiB7XG4gICAgICBoZWFkZXI6IFwiTGEgbGlzdGUgY2ktZGVzc291cyBtb250cmUgdG91dGVzIGxlcyBtb2RpZmljYXRpb25zIHF1aSBzZXJvbnQgZW5yZWdpc3Ryw6llcy5cIixcbiAgICAgIGhlYWRlcl9hZGQ6IFwiPGI+QWpvdXRzPC9iPiBpbmRpcXVlIGxlIG5vbWJyZSBkZSBmb25jdGlvbm5hbGl0w6lzIGFqb3V0w6llc1wiLFxuICAgICAgaGVhZGVyX3VwZGF0ZV9kZWxldGU6IFwiPGI+TW9kaWZpw6k8L2I+IGUgPGI+U3VwcHJpbcOpPC9iPiBsaXN0ZSBsZXMgaWRzXCIsXG4gICAgICBhZGQ6IFwiQWpvdXTDqSAobi4gZm9uY3Rpb25uYWxpdMOpcylcIixcbiAgICAgIGRlbGV0ZTogXCJTdXBwcmltw6koaWQpXCIsXG4gICAgICB1cGRhdGU6IFwiTW9kaWZpw6koaWQpXCJcbiAgICB9LFxuICAgIGxvYWRpbmdfdGFibGVfZGF0YTogXCJCdWlsZGluZyBEYXRhIFRhYmxlLiBQbGVhc2Ugd2FpdCAuLi5cIixcbiAgICBjb3B5X2FuZF9wYXN0ZV9mcm9tX290aGVyX2xheWVyX21hbmRhdG9yeV9maWVsZHM6IFwiQXZhbnQgZCdlbnJlZ2lzdHJlciwgaWwgZXN0IG7DqWNlc3NhaXJlIGRlIHJlbXBsaXIgdG91cyBsZXMgY2hhbXBzIG9ibGlnYXRvaXJlcyBkdSBmZWF0dXJlcyBzYWlzaVwiLFxuICAgIG5vX2ZlYXR1cmVfc2VsZWN0ZWQ6IFwiQXVjdW5lIGZlYXR1cmUgc8OpbGVjdGlvbm7DqWVcIlxuICB9LFxuICByZWxhdGlvbjoge1xuICAgIHRhYmxlOiB7XG4gICAgICBpbmZvOiBgPGRpdj5Tw6lsZWN0aW9ubmVyIGxlcyByZWxhdGlvbnMgcG91ciBsZXMgYXNzb2NpZXIgw6AgbCfDqWzDqW1lbnQgZW4gY291cnMgZCfDqWRpdGlvbi48L2Rpdj5gXG4gICAgfVxuICB9LFxuICBmb3JtOiB7XG4gICAgcmVsYXRpb25zOiB7XG4gICAgICB0b29sdGlwczoge1xuICAgICAgICBiYWNrX3RvX2ZhdGhlcjpcIkJhY2sgdG8gZWRpdCBmYXRoZXJcIixcbiAgICAgICAgYWRkX3JlbGF0aW9uOiBcIkNyw6llciBldCBham91dGVyIHVuZSBub3V2ZWxsZSByZWxhdGlvblwiLFxuICAgICAgICBsaW5rX3JlbGF0aW9uOiBcIkFzc29jaWVyIHVuZSByZWxhdGlvbiBleGlzdGFudGUgw6AgY2V0dGUgZm9uY3Rpb25uYWxpdMOpXCIsXG4gICAgICAgIG9wZW5fcmVsYXRpb25fdG9vbHM6IFwiT3V0aWxzIGRlIHJlbGF0aW9uIG91dmVydGVcIixcbiAgICAgICAgdW5saW5rX3JlbGF0aW9uOiBcIkFubnVsZXIgbGEgcmVsYXRpb25cIlxuICAgICAgfVxuICAgIH0sXG4gICAgYnV0dG9uczoge1xuICAgICAgc2F2ZTogXCJTYXV2ZWdhcmRlciBldCBxdWl0dGVyXCIsXG4gICAgICBzYXZlX2FuZF9iYWNrOiBcIlNhdXZlZ2FyZGVyIGV0IHJldG91cm5lciBhdSBwYXJlbnRcIixcbiAgICAgIGNhbmNlbDogXCJJZ25vcmVyIG1vZGlmaWNhdGlvbnNcIlxuICAgIH1cbiAgfSxcbiAgbW9kYWw6IHtcbiAgICB0b29sczoge1xuICAgICAgY29weWZlYXR1cmVmcm9tb3RoZXJsYXllcjoge1xuICAgICAgICB0aXRsZTogXCJTZWxlY3QgZmVhdHVyZS9zXCJcbiAgICAgIH0sXG4gICAgICBjb3B5ZmVhdHVyZWZyb21wcm9qZWN0bGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGEgZmVhdHVyZVwiXG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IGl0IGZyb20gJy4vaXQnO1xuaW1wb3J0IGVuIGZyb20gJy4vZW4nO1xuaW1wb3J0IGZpIGZyb20gJy4vZmknO1xuaW1wb3J0IHNlIGZyb20gJy4vc2UnO1xuaW1wb3J0IGZyIGZyb20gJy4vZnInO1xuaW1wb3J0IGRlIGZyb20gJy4vZGUnO1xuaW1wb3J0IHJvIGZyb20gJy4vcm8nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGl0LFxuICBlbixcbiAgZmksXG4gIHNlLFxuICBmcixcbiAgZGUsXG4gIHJvXG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBlcnJvcnM6IHtcbiAgICBub19sYXllcnM6IFwiU2kgw6ggdmVyaWZpY2F0byB1biBlcnJvcmUgbmVsIGNhcmljYW1lbnRvIGRlaSBsYXllcnMgaW4gZWRpdGluZy5cIixcbiAgICBzb21lX2xheWVyczogXCJTaSDDqCB2ZXJpZmljYXRvIHVuIGVycm9yZSBuZWwgY2FyaWNhbWVudG8gZGkgYWxjdW5pIGxheWVycyBpbiBlZGl0aW5nXCJcbiAgfSxcbiAgc2VhcmNoOiBcIkNlcmNhXCIsXG4gIGVkaXRpbmdfY2hhbmdlczogXCJNb2RpZmljaGUgRWRpdGluZ1wiLFxuICBlZGl0aW5nX2RhdGE6IFwiRWRpdGEgRGF0aVwiLFxuICBlZGl0aW5nX2F0dHJpYnV0ZXM6IFwiRWRpdGEgYXR0cmlidXRpXCIsXG4gIHJlbGF0aW9uczogXCJSZWxhemlvbmlcIixcbiAgZWRpdF9yZWxhdGlvbjogXCJFZGl0YSByZWxhemlvbmVcIixcbiAgYmFja190b19yZWxhdGlvbnM6IFwiUml0b3JuYSBhbGxlIFJlbGF6aW9uaVwiLFxuICBub19yZWxhdGlvbnNfZm91bmQ6IFwiTm9uIGNpIHNvbm8gcmVsYXppb25pXCIsXG4gIHJlbGF0aW9uX2RhdGE6IFwiRGF0aSByZWxhdGl2aSBhbGxhIHJlbGF6aW9uZVwiLFxuICByZWxhdGlvbl9hbHJlYWR5X2FkZGVkIDogXCJSZWxhemlvbmUgZ2nDoCBwcmVzZW50ZVwiLFxuICBsaXN0X29mX3JlbGF0aW9uc19mZWF0dXJlOiBcIkVsZW5jbyBSZWxhemlvbmkgZGVsbGEgZmVhdHVyZSBcIixcbiAgdG9vbHRpcDp7XG4gICAgZWRpdF9sYXllcjogXCJNb2RpZmljYSBMYXllclwiXG4gIH0sXG4gIHRvb2xib3g6IHtcbiAgICB0aXRsZTogJ0VkaXRhJ1xuICB9LFxuICB0b29sczoge1xuICAgIGNvcHk6IFwiQ29waWEgZmVhdHVyZXNcIixcbiAgICBwYXN0ZWZlYXR1cmVzZnJvbW90aGVybGF5ZXJzOiBcIkNvcGlhIGZlYXR1cmVzIGRhIGFsdHJvIGxheWVyXCIsXG4gICAgYWRkcGFydDogXCJBZ2dpdW5naSBwYXJ0ZSBhbGxhIGdlb21ldHJpYVwiLFxuICAgIGRlbGV0ZXBhcnQ6IFwiQ2FuY2VsbGEgcGFydGUgZGFsbGEgZ2VvbWV0cmlhXCIsXG4gICAgbWVyZ2U6IFwiRGlzc29sdmkgZmVhdHVyZXNcIixcbiAgICBzcGxpdDogXCJUYWdsaWEgRmVhdHVyZVwiLFxuICAgIGFkZF9mZWF0dXJlOiBcIkFnZ2l1bmdpIGZlYXR1cmVcIixcbiAgICBkZWxldGVfZmVhdHVyZTogXCJFbGltaW5hIGZlYXR1cmVcIixcbiAgICBtb3ZlX2ZlYXR1cmU6IFwiTXVvdmkgZmVhdHVyZVwiLFxuICAgIHVwZGF0ZV92ZXJ0ZXg6IFwiQWdnaW9ybmEgdmVydGljaSBmZWF0dXJlXCIsXG4gICAgdXBkYXRlX2ZlYXR1cmU6IFwiTW9kaWZpY2EgYXR0cmlidXRpIGZlYXR1cmVcIixcbiAgICB1cGRhdGVfbXVsdGlfZmVhdHVyZXM6IFwiTW9kaWZpY2EgZ2xpIGF0dHJpYnV0aSBkZWxsZSBmZWF0dXJlcyBzZWxlemlvbmF0ZVwiLFxuICAgIGNvcHlmZWF0dXJlZnJvbWV4dGVybmFsbGF5ZXI6IFwiQ3JlYSBmZWF0dXJlIGRhbCBsYXllciBlc2lzdGVudGVcIlxuICB9LFxuICB0b29sc29mdG9vbDoge1xuICAgIG1lYXN1cmU6IFwiVmlzdWFsaXp6YSBtaXN1cmFcIixcbiAgICBzbmFwOiBcIlNuYXAgc3VsIGxheWVyXCIsXG4gICAgc25hcGFsbDogXCJTbmFwIHN1IHR1dHRpIGkgbGF5ZXJcIlxuICB9LFxuICB0YWJsZToge1xuICAgIGVkaXQ6IFwiRWRpdGEgZmVhdHVyZVwiLFxuICAgIGNvcHk6IFwiQ3JlYSB1bmEgY29waWFcIixcbiAgICBkZWxldGU6IFwiQ2FuY2VsbGEgZmVhdHVyZVwiXG4gIH0sXG4gIHN0ZXBzOiB7XG4gICAgaGVscDoge1xuICAgICAgc2VsZWN0X2VsZW1lbnRzOiBcIlNlbGV6aW9uYSBsZSBmZWF0dXJlc1wiLFxuICAgICAgc2VsZWN0X2VsZW1lbnQ6IFwiU2VsZXppb25hIGxhIGZlYXR1cmVcIixcbiAgICAgIGNvcHk6IFwiQ3JlYSB1bmEgY29waWEgZGVsbGUgZmVhdHVyZSBzZWxlemlvbmF0ZVwiLFxuICAgICAgbWVyZ2U6IFwiRGlzc29sdmkgZmVhdHVyZXNcIixcbiAgICAgIHNwbGl0OiBcIlRhZ2xpYSBGZWF0dXJlXCIsXG4gICAgICBuZXc6IFwiQ3JlbyB1bmEgbnVvdmEgZmVhdHVyZVwiLFxuICAgICAgZWRpdF90YWJsZTogXCJFZGl0YSBsZSBmZWF0dXJlcyBkZWxsYSB0YWJlbGxhXCIsXG4gICAgICBkcmF3X25ld19mZWF0dXJlOiBcIkRpc2VnbmEgc3VsbGEgbWFwcGEgbGEgZmVhdHVyZVwiLFxuICAgICAgYWN0aW9uX2NvbmZpcm06IFwiQ29uZmVybWEgYXppb25lXCIsXG4gICAgICBkb3VibGVfY2xpY2tfZGVsZXRlOiBcIlNlbGV6aW9uYSBsYSBmZWF0dXJlIHN1bGxhIG1hcHBhIGRhIGNhbmNlbGxhcmVcIixcbiAgICAgIGVkaXRfZmVhdHVyZV92ZXJ0ZXg6IFwiTW9kaWZpY2EgbyBhZ2dpdW5naSB1biB2ZXJ0aWNlIGFsbGEgZmVhdHVyZSBzZWxlemlvbmF0YVwiLFxuICAgICAgbW92ZTogXCJNdW92aSBsYSBmZWF0dXJlIHNlbGV6aW9uYXRhXCIsXG4gICAgICBzZWxlY3RfZmVhdHVyZV90b19yZWxhdGlvbjogXCJTZWxlemlvbmEgbGEgZmVhdHVyZSBjaGUgdnVvaSBtZXR0ZXJlIGluIHJlbGF6aW9uZVwiLFxuICAgICAgc2hvd19lZGl0X2ZlYXR1cmVfZm9ybTogIFwiTW9zdHJhIGlsIGZvcm0gZGVsbGEgZmVhdHVyZSBwZXIgcG90ZXIgZWRpdGFyZSBnbGkgYXR0cmlidXRpXCIsXG4gICAgICBwaWNrX2ZlYXR1cmU6IFwiU2VsZXppb25hIGxhIGZlYXR1cmUgc3VsbGEgbWFwcGEgZGEgbW9kaWZpY2FyZVwiLFxuICAgICAgaW5zZXJ0X2F0dHJpYnV0ZXNfZmVhdHVyZTogXCJJbnNlcmlzY2kgZ2xpIGF0dHJpYnV0aSBkZWxsYSBmZWF0dXJlXCJcbiAgICB9XG4gIH0sXG4gIHdvcmtmbG93OiB7XG4gICAgc3RlcHM6IHtcbiAgICAgIHNlbGVjdDogJ0NsaWNjYSBzdWxsYSBmZWF0dXJlIGRhIHNlbGV6aW9uYXJlJyxcbiAgICAgIGRyYXdfcGFydDogXCJEaXNlZ25hIGxhIG51b3ZhIHBhcnRlXCIsXG4gICAgICBtZXJnZTogJ1NlbGV6aW9uYSBsYSBmZWF0dXJlIHN1IGN1aSBkaXNzb2x2ZXJlJyxcbiAgICAgIHNlbGVjdFBvaW50OiBcIkNsaWNjYSBzdWxsYSBmZWF0dXJlIHBlciBzZWxlemlvbmFybGFcIixcbiAgICAgIHNlbGVjdFNISUZUOiAnU2VsZXppb25hIGxlIGZlYXR1cmVzIHRlbmVkbyBwcmVtdXRvIGlsIHRhc3RvIFNISUZUJyxcbiAgICAgIHNlbGVjdERyYXdCb3g6IFwiU2VsZXppb25hIGxlIGZlYXR1cmVzIGRpc2VnbmFuZG8gdW4gcmV0dGFuZ29sbyBtZWRpYW50ZSBsYSBjcmVhemlvbmUgZGVpIGR1ZSBwdW50aSBkZWxsYSBkaWFnb25hbGVcIixcbiAgICAgIHNlbGVjdERyYXdCb3hBdExlYXN0MkZlYXR1cmU6IFwiU2VsZXppb25hIGFsbWVubyAyIGZlYXR1cmVzIGRpc2VnbmFuZG8gdW4gcmV0dGFuZ29sbyBtZWRpYW50ZSBsYSBjcmVhemlvbmUgZGVpIGR1ZSBwdW50aSBkZWxsYSBkaWFnb25hbGVcIixcbiAgICAgIHNlbGVjdFBvaW50U0hJRlQ6ICdTZWxlemlvbmEgbGUgZmVhdHVyZXMgdGVuZWRvIHByZW11dG8gaWwgdGFzdG8gU0hJRlQgKG11bHRpc2VsZXppb25lKSBvcHB1cmUgY2xpY2NhbmRvIHN1bGxhIHNpbmdvbGEgZmVhdHVyZScsXG4gICAgICBzZWxlY3RNdWx0aVBvaW50U0hJRlQ6ICdTZWxlemlvbmEgbGUgZmVhdHVyZXMgdGVuZWRvIHByZW11dG8gaWwgdGFzdG8gU0hJRlQgb3BwdXJlIGNsaWNjYW5kbyBzdWxsYSBzaW5nb2xhIGZlYXR1cmUnLFxuICAgICAgc2VsZWN0TXVsdGlQb2ludFNISUZUQXRMZWFzdDJGZWF0dXJlOiAnU2VsZXppb25hIGFsbWVubyAyIGZlYXR1cmVzIHRlbmVkbyBwcmVtdXRvIGlsIHRhc3RvIFNISUZUIG9wcHVyZSBjbGljY2FuZG8gc3VsbGEgc2luZ29sYSBmZWF0dXJlJyxcbiAgICAgIGNvcHlDVFJMOiAnQ29waWEgbGUgZmVhdHVyZXMgc2VsZXppb25hdGUgY29uIENUUkwrQycsXG4gICAgICBzZWxlY3RTdGFydFZlcnRleDogJ1NlbGV6aW9uYSBpbCB2ZXJ0aWNlIGRpIHBhcnRlbnphIGRlbGxlIGZlYXR1cmUgc2VsZXppb25hdGUnLFxuICAgICAgc2VsZWN0VG9QYXN0ZTogJ1NlbGV6aW9uYSBpbCBwdW50byBkb3ZlIHZlcnJhbm5vIGluY29sbGF0ZSBsZSBmZWF0dXJlcyBzZWxlemlvbmF0ZScsXG4gICAgICBkcmF3X3NwbGl0X2xpbmU6IFwiRGlzZWduYSB1bmEgbGluZWEgcGVyIHRhZ2xpYXJlIGxhIGZlYXR1cmUgc2VsZXppb25hdGFcIlxuICAgIH1cbiAgfSxcbiAgbWVzc2FnZXM6IHtcbiAgICBmZWF0dXJlc2xvY2tieW90aGVydXNlcjogXCJDaSBzb25vIGFsY3VuZSBnZW9tZXRyaWUvcmVjb3JkcyBub24gZWRpdGFiaWxpIHBlcmNow6ggaW4gbW9kaWZpY2EgZGEgYWx0cmkgdXRlbnRpXCIsXG4gICAgc3BsaXR0ZWQ6IFwiRmVhdHVyZShzKSBzcGxpdHRhdGEoZSlcIixcbiAgICBub3NwbGl0dGVkZmVhdHVyZTogXCJMYShlKSBmZWF0dXJlKHMpIG5vbiDDqCBzdGF0YSBzcGxpdHRhdGFcIixcbiAgICBwcmVzc19lc2M6IFwiUHJlbWkgRVNDIHBlciB0b3JuYXJlIGluZGlldHJvXCIsXG4gICAgb25saW5lOiBcIk9yYSBzZWkgZGkgbnVvdm8gT05MSU5FLiBQdW9pIHNsYXZhcmUgbGUgbW9kaWZpY2hlIGluIG1vZG8gcGVybWFuZW50ZVwiLFxuICAgIG9mZmxpbmU6IFwiU2VpIE9GRkxJTkUuIFR1dHRlIGxlIG1vZGlmaWNoZSBzYXJhbm5vIHNhbHZhdGUgdGVtcG9yYW5lYW1lbnRlIGluIGxvY2FsZVwiLFxuICAgIGRlbGV0ZV9mZWF0dXJlOiBcIlZ1b2kgZWxpbWluYXJlIGwnZWxlbWVudG8gc2VsZXppb25hdG8/XCIsXG4gICAgZGVsZXRlX2ZlYXR1cmVfcmVsYXRpb25zOiBcIkNhbmNlbGxhbmRvIHVuYSBmZWF0dXJlIGNvbiByZWxhemlvbmkgYXNzb2NpYXRlLCB0YWxlIHJlbGF6aW9uaSByaW1hcnJhbm5vIG9yZmFuZS4gU2kgY29uc2lnbGlhIGRpIGdlc3RpcmUgdGFsaSByZWxhemlvbmkgcHJpbWEgZGkgY2FuY2VsbGFyZSBsYSBmZWF0dXJlXCIsXG4gICAgdW5saW5rX3JlbGF0aW9uOiBcIlZ1b2kgc3RhY2NhcmUgbGEgcmVsYXppb25lP1wiLFxuICAgIGNvbW1pdF9mZWF0dXJlOiBcIlZ1b2kgc2FsdmFyZSBkZWZpbml0aXZhbWVudGUgbGUgbW9kaWZpY2hlXCIsXG4gICAgY2hhbmdlX3Rvb2xib3hfcmVsYXRpb246IFwiTGF5ZXIgaW4gcmVsYXppb25lLiBQcmltYSBkaSBwYXNzYXJlIGFkIGFsdHJpIGVkaXRpbmcgw6ggb2JibGlnYXRvcmlvIHNhbHZhcmUgbGUgbW9kaWZpY2hlIGNvcnJlbnRpLlwiLFxuICAgIHNhdmVkOiBcIkkgZGF0aSBzb25vIHN0YXRpIHNhbHZhdGkgY29ycmV0dGFtZW50ZVwiLFxuICAgIHNhdmVkX2xvY2FsOiBcIkkgZGF0aSBzb25vIHN0YXRpIHNhbHZhdGkgY29ycmV0dGFtZW50ZSBpbiBsb2NhbGVcIixcbiAgICBsb2FkaW5nX2RhdGE6IFwiQ2FyaWNhbWVudG8gZGF0aVwiLFxuICAgIHNhdmluZzogXCJTYWx2YXRhZ2dpbyBkYXRpIGluIGNvcnNvLiBBdHRlbmRlcmUgLi4uXCIsXG4gICAgY29uc3RyYWludHM6IHtcbiAgICAgIGVuYWJsZV9lZGl0aW5nOiBcIkF1bWVudGFyZSBpbCBsaXZlbGxvIGRpIHpvb20gcGVyIGFiaWxpdGFyZSBsJ2VkaXRpbmcgXFxuU2NhbGEgZGkgYXR0aXZhemlvbmUgMTpcIlxuICAgIH0sXG4gICAgY29tbWl0OiB7XG4gICAgICBoZWFkZXI6IFwiTGEgbGlzdGEgc290dG8gcmlwb3J0YSB0dXR0ZSBsZSBtb2RpZmljaGUgY2hlIHZlcnJhbm5vIHNhbHZhdGUuXCIsXG4gICAgICBoZWFkZXJfYWRkOiBcIjxiPkFnZ2l1bnRlPC9iPiByaXBvcnRhIGlsIG51bWVybyBkZWxsZSBmZWF0dXJlcyBhZ2dpdW50ZVwiLFxuICAgICAgaGVhZGVyX3VwZGF0ZV9kZWxldGU6IFwiPGI+TW9kaWZpY2F0ZTwvYj4gZSA8Yj5DYW5jZWxsYXRlPC9iPiByaXBvcnRhIGxhIGxpc3RhIGRlZ2xpIGlkXCIsXG4gICAgICBhZGQ6IFwiQWdnaXVudGUgKG4uIGZlYXR1cmVzKVwiLFxuICAgICAgZGVsZXRlOiBcIkNhbmNlbGxhdGUoaWQpXCIsXG4gICAgICB1cGRhdGU6IFwiTW9kaWZpY2F0ZShpZClcIlxuICAgIH0sXG4gICAgbG9hZGluZ190YWJsZV9kYXRhOiBcIkNvc3RydXppb25lIHRhYmVsbGEgZGF0aSBpbiBjb3Jzby4gQXR0ZW5kZXJlIC4uLlwiLFxuICAgIGNvcHlfYW5kX3Bhc3RlX2Zyb21fb3RoZXJfbGF5ZXJfbWFuZGF0b3J5X2ZpZWxkczogXCJOZWNlc3NhcmlvIGNvbXBpbGFyZSBldmVudHVhbGkgY2FtcGkgb2JibGlnYXRvcmkgc3VsbGUgZmVhdHVyZXMgaW5jb2xsYXRlIHByaW1hIGRlbCBzYWx2YXRhZ2dpb1wiLFxuICAgIG5vX2ZlYXR1cmVfc2VsZWN0ZWQ6IFwiTmVzc3VuYSBmZWF0dXJlIHNlbGV6aW9uYXRhXCJcbiAgfSxcbiAgcmVsYXRpb246IHtcbiAgICB0YWJsZToge1xuICAgICAgaW5mbzogYDxkaXY+U2VsZXppb25hIGxlIHJlbGF6aW9uaSBwZXIgYXNzb2NpYXJsZSBhbGxhIGZlYXR1cmUgaW4gZWRpdGluZy48L2Rpdj5gXG4gICAgfVxuICB9LFxuICBmb3JtOiB7XG4gICAgcmVsYXRpb25zOiB7XG4gICAgICB0b29sdGlwczoge1xuICAgICAgICBiYWNrX3RvX2ZhdGhlcjpcIlRvcm5hIGFkIGVkaXRhcmUgaWwgcGFkcmVcIixcbiAgICAgICAgYWRkX3JlbGF0aW9uOiBcIkNyZWEgZWQgYWdnaXVuZ2kgbnVvdmEgcmVsYXppb25lXCIsXG4gICAgICAgIGxpbmtfcmVsYXRpb246IFwiQXNzb2NpYSB1bmEgcmVsYXppb25lIGVzaXN0ZW50ZSBhIHF1ZXN0YSBmZWF0dXJlXCIsXG4gICAgICAgIG9wZW5fcmVsYXRpb25fdG9vbHM6IFwiQXByaSBzdHJ1bWVudGkgcmVsYXRpb25lXCIsXG4gICAgICAgIHVubGlua19yZWxhdGlvbjogXCJBbm51bGxhIHJlbGF6aW9uZVwiXG4gICAgICB9XG4gICAgfSxcbiAgICBidXR0b25zOiB7XG4gICAgICBzYXZlOiBcIlNhbHZhIGVkIEVzY2lcIixcbiAgICAgIHNhdmVfYW5kX2JhY2s6IFwiU2FsdmEgZSB0b3JuYSBhbCBwYWRyZVwiLFxuICAgICAgY2FuY2VsOiBcIklnbm9yYSBNb2RpZmljaGVcIlxuICAgIH1cbiAgfSxcbiAgbW9kYWw6IHtcbiAgICB0b29sczoge1xuICAgICAgY29weWZlYXR1cmVmcm9tb3RoZXJsYXllcjoge1xuICAgICAgICB0aXRsZTogXCJTZWxlemlvbmEgZmVhdHVyZS9zXCJcbiAgICAgIH0sXG4gICAgICBjb3B5ZmVhdHVyZWZyb21wcm9qZWN0bGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZXppb25hIHVuYSBmZWF0dXJlXCJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCAge1xuICBlcnJvcnM6IHtcbiAgICBub19sYXllcnM6IFwiQXZlbSBvIGVyb2FyZS4gU3RyYXR1cmlsZSBudSBzdW50IGVkaXRhYmlsZVwiLFxuICAgIHNvbWVfbGF5ZXJzOiBcIkF2ZW0gbyBlcm9hcmU6IEFudW1pdGUgc3RyYXR1cmkgbnUgc2UgcG90IGVkaXRhXCJcbiAgfSxcbiAgc2VhcmNoOiBcIkNhdXTEg1wiLFxuICBlZGl0aW5nX2NoYW5nZXM6IFwiTW9kaWZpY2FyZSBzY2hpbWLEg3JpXCIsXG4gIGVkaXRpbmdfZGF0YTogXCJNb2RpZmljYXJlIHN0cmF0dXJpXCIsXG4gIGVkaXRpbmdfYXR0cmlidXRlczogXCJNb2RpZmljYXJlIGF0cmlidXRlXCIsXG4gIHJlbGF0aW9uczogXCJSZWxhyJtpaVwiLFxuICBlZGl0X3JlbGF0aW9uOiBcIk1vZGlmaWPEgyByZWxhyJtpYVwiLFxuICBiYWNrX3RvX3JlbGF0aW9uczogXCLDjm5hcG9pIGxhIFJlbGHIm2lpXCIsXG4gIG5vX3JlbGF0aW9uc19mb3VuZDogXCJOdSBhbSBnxINzaXQgcmVsYcibaWlcIixcbiAgcmVsYXRpb25fZGF0YTogXCJEYXRlIHJlbGHIm2lpXCIsXG4gIHJlbGF0aW9uX2FscmVhZHlfYWRkZWQ6IFwiUmVsYcibaWUgYWTEg3VnYXTEgyBkZWphXCIsXG4gIGxpc3Rfb2ZfcmVsYXRpb25zX2ZlYXR1cmU6IFwiTGlzdGEgcmVsYcibaWkgZW50aXRhdGVhIFwiLFxuICB0b29sdGlwOiB7XG4gICAgZWRpdF9sYXllcjogXCJNb2RpZmljxIMgc3RyYXRcIlxuICB9LFxuICB0b29sYm94OiB7XG4gICAgdGl0bGU6ICdNb2RpZmljxIMnXG4gIH0sXG4gIHRhYmxlOiB7XG4gICAgZWRpdDogXCJNb2RpZmljxIMgZW50aXRhdGVcIixcbiAgICBjb3B5OiBcIkNyZWVhesSDIG8gY29waWVcIixcbiAgICBkZWxldGU6IFwiRWxpbWluxIMgZW50aXRhdGVhXCJcbiAgfSxcbiAgdG9vbHM6IHtcbiAgICBjb3B5OiBcIkNvcGlhesSDIGVudGl0xIPIm2lsZVwiLFxuICAgIHBhc3RlZmVhdHVyZXNmcm9tb3RoZXJsYXllcnM6IFwiUGFzdGUgZmVhdHVyZXMgZnJvbSBvdGhlciBsYXllclwiLFxuICAgIGFkZHBhcnQ6IFwiQWRhdWfEgyBvIHBhcnRlIGxhIG11bHRpcGFydGVcIixcbiAgICBkZWxldGVwYXJ0OiBcIkVsaW1pbsSDIHBhcnRlYSBkaW4gbXVsdGlwYXJ0ZVwiLFxuICAgIG1lcmdlOiBcIkRpem9sdmFyZSBlbnRpdMSDyJtpXCIsXG4gICAgc3BsaXQ6IFwiRGl2aXphcmUgRW50aXRhdGVcIixcbiAgICBhZGRfZmVhdHVyZTogXCJBZGF1Z8SDIGVudGl0YXRlXCIsXG4gICAgZGVsZXRlX2ZlYXR1cmU6IFwiRWxpbWluYXJlIGVudGl0YXRlXCIsXG4gICAgbW92ZV9mZWF0dXJlOiBcIk11dMSDIGVudGl0YXRlXCIsXG4gICAgdXBkYXRlX3ZlcnRleDogXCJBY3R1YWxpemVhesSDIHZlcnRlY8iZaWkgZW50aXTEg8ibaWlcIixcbiAgICB1cGRhdGVfZmVhdHVyZTogXCJBY3R1YWxpemVhesSDIGF0cmlidXR1bCBlbnRpdMSDyJtpaVwiLFxuICAgIHVwZGF0ZV9tdWx0aV9mZWF0dXJlczogXCJBY3R1YWxpemVhesSDIGF0cmlidXRlbGUgZW50aXTEg8ibaWxvciBzZWxlY3RhdGVcIixcbiAgICBjb3B5ZmVhdHVyZWZyb21leHRlcm5hbGxheWVyOiBcIkNyZWF0ZSBGZWF0dXJlIGZyb20gZXhpc3RpbmcgZmVhdHVyZVwiXG4gIH0sXG4gIHRvb2xzb2Z0b29sOiB7XG4gICAgbWVhc3VyZTogXCJBcmF0xIMgbcSDc3VyxIN0b3JpbGVcIixcbiAgICBzbmFwOiBcIkFjcm/ImWFyZSBzdHJhdFwiLFxuICAgIHNuYXBhbGw6IFwiQWNyb8iZYXJlIHBlIHRvYXRlIHN0cmF0dXJpbGVcIlxuICB9LFxuICBzdGVwczoge1xuICAgIGhlbHA6IHtcbiAgICAgIHNlbGVjdF9lbGVtZW50czogXCJTZWxlY3RlYXrEgyBlbnRpdMSDyJtpXCIsXG4gICAgICBzZWxlY3RfZWxlbWVudDogXCJTZWxlY3RlYXrEgyBlbnRpdGF0ZVwiLFxuICAgICAgY29weTogXCJDcmVlYXrEgyBvIG5vdcSDIGNvcGllIGEgZW50aXTEg8ibaWxvciBzZWxlY3RhdGVcIixcbiAgICAgIG1lcmdlOiBcIkRpem9sdsSDIGVudGl0xIPIm2lsZVwiLFxuICAgICAgc3BsaXQ6IFwiRGl2aXphcmUgRW50aXRhdGVcIixcbiAgICAgIG5ldzogXCJDcmVlYXrEgyBvIGVudGl0YXRlXCIsXG4gICAgICBlZGl0X3RhYmxlOiBcIk1vZGlmaWPEgyBlbnRpdMSDyJtpbGUgdGFiZWxhcmVcIixcbiAgICAgIGRyYXdfbmV3X2ZlYXR1cmU6IFwiRGVzZW5lYXrEgyBlbnRpdGF0ZSBwZSBoYXJ0xINcIixcbiAgICAgIGFjdGlvbl9jb25maXJtOiBcIkNvbmZpcm3EgyBhY8ibaXVuZWFcIixcbiAgICAgIGRvdWJsZV9jbGlja19kZWxldGU6IFwiU2VsZWN0ZWF6xIMgZW50aXRhdGVhIGRlIGVsaW1pbmF0IGRpbiBoYXJ0xINcIixcbiAgICAgIGVkaXRfZmVhdHVyZV92ZXJ0ZXg6IFwiTW9kaWZpY8SDIHNhdSBhZGF1Z8SDIHVuIHZlcnRleCBsYSBlbnRpdGF0ZWEgc2VsZWN0YXTEg1wiLFxuICAgICAgbW92ZTogXCJNdXTEgyBlbnRpdGF0ZWEgc2VsZWN0YXTEg1wiLFxuICAgICAgc2VsZWN0X2ZlYXR1cmVfdG9fcmVsYXRpb246IFwiU2VsZWN0ZWF6xIMgZW50aXRhdGUgcGVudHJ1IHJlbGHIm2lvbmFyZVwiLFxuICAgICAgc2hvd19lZGl0X2ZlYXR1cmVfZm9ybTogIFwiQXJhdMSDIGZvcm11bGFydWwgZW50aXTEg8ibaWkgcGVudHJ1IG1vZGlmaWPEg3JpXCIsXG4gICAgICBwaWNrX2ZlYXR1cmU6IFwiU2VsZWN0ZWF6xIMgZW50aXTEg8ibaWxlIGRlIG1vZGlmaWNhdCBkaW4gaGFydMSDXCIsXG4gICAgICBpbnNlcnRfYXR0cmlidXRlc19mZWF0dXJlOiBcIkluc2VyZWF6xIMgYXRyaWJ1dGVsZSBlbnRpdMSDyJtpaVwiXG4gICAgfVxuICB9LFxuICB3b3JrZmxvdzoge1xuICAgIHN0ZXBzOiB7XG4gICAgICBzZWxlY3Q6ICdDbGljayBwZSBlbnRpdGF0ZSBwZW50cnUgYSBvIHNlbGVjdGEnLFxuICAgICAgZHJhd19wYXJ0OiBcIkRlc2VuZWF6xIMgbyBwYXJ0ZSBub3XEg1wiLFxuICAgICAgbWVyZ2U6ICdTZWxlY3RlYXrEgyBwYXJ0ZWEgZGUgZGl6b2x2YXQnLFxuICAgICAgc2VsZWN0U0hJRlQ6ICdTZWxlY3RlYXrEgyBlbnRpdMSDyJtpIHByaW4gZGVzZW4gdHJpdW5naGkgYXDEg3PDom5kIFNISUZUJyxcbiAgICAgIHNlbGVjdERyYXdCb3g6IFwiU2VsZWN0ZWF6xIMgZW50aXTEg8ibaSBkZXNlbsOibmQgdW4gZHJlcHR1bmdoaSBwcmluIGRvdcSDIHB1bmN0ZSBvcHVzZVwiLFxuICAgICAgc2VsZWN0RHJhd0JveEF0TGVhc3QyRmVhdHVyZTogXCJTZWxlY3RlYXrEgyBjZWwgcHXIm2luIDIgZW50aXTEg8ibaSBwcmluIGRlc2VudWwgdW51aSBkcmVwdHVuZ2hpXCIsXG4gICAgICBzZWxlY3RQb2ludDogXCJDbGljayBwZSBlbnRpdGF0ZSBwZW50cnUgc2VsZWN0YXJlXCIsXG4gICAgICBzZWxlY3RQb2ludFNISUZUOiAnU2VsZWN0ZWF6xIMgZW50aXTEg8ibaSBwcmluIGRlc2VuIGRyZXB0dW5naGkgYXDEg3PDom5kIFNISUZUIChtdWx0aWVudGl0xIPIm2kpIHNhdSBwcmluIGNsaWNrIHBlIGVudGl0YXRlJyxcbiAgICAgIHNlbGVjdE11bHRpUG9pbnRTSElGVDogJ1NlbGVjdGVhesSDIGVudGl0xIPIm2kgcHJpbiBkZXNlbiBkcmVwdHVuZ2hpIGFwxINzw6JuZCBTSElGVCBzYXUgcHJpbiBjbGljayBwZSBlbnRpdGF0ZScsXG4gICAgICBzZWxlY3RNdWx0aVBvaW50U0hJRlRBdExlYXN0MkZlYXR1cmU6ICdTZWxlY3RlYXrEgyBjZWwgcHXIm2luIDIgZW50aXTEg8ibaSBwcmluIGRlc2VuIGRyZXB0dW5naGkgYXDEg3PDom5kIFNISUZUIHNhdSBwcmluIGNsaWNrIHBlIGVudGl0YXRlJyxcbiAgICAgIGNvcHlDVFJMOiAnQ29waWF6xIMgZW50aXTEg8ibaWxlIHNlbGVjdGF0ZSBmb2xvc2ludCBDVFJMK0MnLFxuICAgICAgc2VsZWN0U3RhcnRWZXJ0ZXg6ICdTZWxlY3RlYXrEgyB2ZXJ0ZXh1bCBkZSBzdGFydCBhIGVudGl0xIPIm2lsb3Igc2VsZWN0YXRlJyxcbiAgICAgIHNlbGVjdFRvUGFzdGU6ICdTZWxlY3RlYXrEgyBwdW5jdHVsIHVuZGUgc8SDIGxpcGltIGVudGl0xIPIm2lsZSBzZWxlY3RhdGUnLFxuICAgICAgZHJhd19zcGxpdF9saW5lOiBcIkRlc2VuZWF6xIMgbyBsaW5pZSBwZW50cnUgYSBkaXZpemEgZW50aXRhdGVhIHNlbGVjdGF0xINcIlxuICAgIH1cbiAgfSxcbiAgbWVzc2FnZXM6IHtcbiAgICBmZWF0dXJlc2xvY2tieW90aGVydXNlcjogXCJVbmVsZSBnZW9tZXRyaWkvw65ucmVnaXN0csSDcmkgbnUgc3VudCBlZGl0YWJpbGUgZGVvYXJlY2Ugc3VudCBlZGl0YXRlIGRlIGPEg3RyZSBhbHQgdXRpbGl6YXRvclwiLFxuICAgIHNwbGl0dGVkOiBcIkRpdml6YXRcIixcbiAgICBub3NwbGl0dGVkZmVhdHVyZTogXCJFbnRpdGF0ZSBuZWRpdml6YXTEg1wiLFxuICAgIHByZXNzX2VzYzogXCJFU0MgcGVudHJ1IMOubmFwb2lcIixcbiAgICBvbmxpbmU6IFwiw45uYXBvaSBPTkxJTkUuIEFjdW0gc2UgcG90IHNhbHZhIHNjaGltYsSDcmlsZVwiLFxuICAgIG9mZmxpbmU6IFwiT0ZGTElORS4gU2NoaW1ixINyaWxlIHN1bnQgc2FsdmF0ZSBsb2NhbFwiLFxuICAgIGRlbGV0ZV9mZWF0dXJlOiBcIsiYdGVyZyBlbnRpdGF0ZWEgc2VsZWN0YXTEgz9cIixcbiAgICBkZWxldGVfZmVhdHVyZV9yZWxhdGlvbnM6IFwiRGFjxIMgZW50aXRhdGVhIGFyZSByZWxhyJtpaSBjYXJlIHRyaW1pdCBsYSBlYSwgYWNlbGUgcmVsYcibaWkgZGV2aW4gb3JmYW5lLiBTdWdlcsSDbSBzxIMgdsSDIG9jdXBhyJtpIGRlIGFjZWxlIGVsZW1lbnRlIMOubmFpbnRlIHPEgyBlbGltaW5hyJtpIGFjZWFzdMSDIGVudGl0YXRlLlwiLFxuICAgIHVubGlua19yZWxhdGlvbjogXCJEb3JlyJl0aSBzxIMgZWxpbWluYcibaSBsZWfEg3R1cmEgY3UgcmVsYcibaWE/XCIsXG4gICAgY29tbWl0X2ZlYXR1cmU6IFwiU2FsdsSDbT9cIixcbiAgICBjaGFuZ2VfdG9vbGJveF9yZWxhdGlvbjogXCJTdHJhdHVsIGVzdGUgcmVsYcibaW9uYXQuIMOObmFpbnRlIGRlIGEgdHJlY2UgbGEgYWx0ZSBtb2RpZmljxINyaSB0cmVidWllc2Mgc2FsdmF0ZSBtb2RpZmljxINyaWxlLlwiLFxuICAgIHNhdmVkOiBcIkRhdGVsZSBzdW50IHNhbHZhdGVcIixcbiAgICBzYXZlZF9sb2NhbDpcIkRhdGVsZSBzLWF1IHNhbHZhdCBsb2NhbFwiLFxuICAgIGxvYWRpbmdfZGF0YTogXCJEYXRlbGUgc2Ugw65uY2FyY8SDLlwiLFxuICAgIHNhdmluZzogXCJTYWx2xINtIGRhdGVsZS4gQciZdGVwdGHIm2kgLi4uXCIsXG4gICAgY29uc3RyYWludHM6IHtcbiAgICAgIGVuYWJsZV9lZGl0aW5nOiBcIlBlbnRydSBhIGFjdGl2YSBNb2RpZmljYXJlIGZhY2XIm2kgem9vbSBsYSBcXG5TY2FyYSBkZSBhY3RpdmFyZSAxOlwiXG4gICAgfSxcbiAgICBwZGY6IFwiUHJldml6dWFsaXphcmVhIGRvY3VtZW50dWx1aSBudSBlc3RlIGRpc3BvbmliaWzEgy4gQ2xpY2sgYWljaSBcIixcbiAgICBjb21taXQ6IHtcbiAgICAgIGhlYWRlcjogXCJMaXN0YSBjdSB0b2F0ZSBtb2RpZmljxINyaWxlLlwiLFxuICAgICAgaGVhZGVyX2FkZDogXCI8Yj5BZMSDdWdhdGU8L2I+IGFyYXTEgyBuci4gZGUgZW50aXTEg8ibaSBhZMSDdWdhdGVcIixcbiAgICAgIGhlYWRlcl91cGRhdGVfZGVsZXRlOiBcIjxiPk1vZGlmaWNhdGU8L2I+IMiZaSA8Yj7ImHRlcnNlPC9iPiBhcmF0xIMgbGlzdGEgZGUgaWQtdXJpIGRlIGVudGl0xIPIm2lcIixcbiAgICAgIGFkZDogXCJBZMSDdWdhdGUobi4gZW50aXTEg8ibaSlcIixcbiAgICAgIGRlbGV0ZTogXCJFbGltaW5hdGUoaWQpXCIsXG4gICAgICB1cGRhdGU6IFwiTW9kaWZpY2F0ZShpZClcIlxuICAgIH0sXG4gICAgbG9hZGluZ190YWJsZV9kYXRhOiBcIsOObmPEg3JjxINtIHRhYmVsdWwgZGUgZGF0ZSAuLi5cIixcbiAgICBjb3B5X2FuZF9wYXN0ZV9mcm9tX290aGVyX2xheWVyX21hbmRhdG9yeV9maWVsZHM6IFwiw45uYWludGUgZGUgYSBzYWx2YSwgZXN0ZSBuZWNlc2FyIHPEgyBjb21wbGV0YcibaSB0b2F0ZSBjw6JtcHVyaWxlIG9ibGlnYXRvcmlpIGFsZSBlbnRpdMSDyJtpIGludHJvZHVzZVwiLFxuICAgIG5vX2ZlYXR1cmVfc2VsZWN0ZWQ6IFwiTmljaW8gZmVhdHVyZSBzZWxlY3RhdMSDXCJcbiAgfSxcbiAgcmVsYXRpb246IHtcbiAgICB0YWJsZToge1xuICAgICAgaW5mbzogYFxuICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWF6xIMgcmVsYcibaWlsZSBwZW50cnUgYSBmYWNlIGxlZ8SDdHVyYSBjdSBlbnRpdGF0ZWEgY3VyZW50xIMuXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgYFxuICAgIH1cbiAgfSxcbiAgZm9ybToge1xuICAgIHJlbGF0aW9uczoge1xuICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgYmFja190b19mYXRoZXI6XCLDjm5hcG9pIGxhIG1vZGlmaWPEg3JpbGUgZW50aXTEg8ibaWkgcMSDcmludGVcIixcbiAgICAgICAgYWRkX3JlbGF0aW9uOiBcIkNyZWVhesSDIMiZaSBmxIMgbGVnxIN0dXJhIHVuZWkgcmVsYcibaWkgbm9pXCIsXG4gICAgICAgIGxpbmtfcmVsYXRpb246IFwiTGVhZ8SDIG8gcmVsYcibaWUgZGUgZW50aXRhdGVcIixcbiAgICAgICAgb3Blbl9yZWxhdGlvbl90b29sczogXCJBcmF0xIMgaW5zdHJ1bWVudGVsZSBwZW50cnUgcmVsYcibaWlcIixcbiAgICAgICAgdW5saW5rX3JlbGF0aW9uOiBcIkVsaW1pbsSDIGxlZ8SDdHVyYSBsYSByZWxhyJtpZVwiXG4gICAgICB9XG4gICAgfSxcbiAgICBidXR0b25zOiB7XG4gICAgICBzYXZlOiBcIlNhbHZlYXrEgyDImWkgaWXImWlcIixcbiAgICAgIHNhdmVfYW5kX2JhY2s6IFwiU2FsdmVhesSDIMiZaSBkxIMgw65uYXBvaVwiLFxuICAgICAgY2FuY2VsOiBcIklnbm9yYcibaSBtb2RpZmljxINyaWxlXCJcbiAgICB9XG4gIH0sXG4gIG1vZGFsOiB7XG4gICAgdG9vbHM6IHtcbiAgICAgIGNvcHlmZWF0dXJlZnJvbW90aGVybGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGZlYXR1cmUvc1wiXG4gICAgICB9LFxuICAgICAgY29weWZlYXR1cmVmcm9tcHJvamVjdGxheWVyOiB7XG4gICAgICAgIHRpdGxlOiBcIlNlbGVjdCBhIGZlYXR1cmVcIlxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZXJyb3JzOiB7XG4gICAgbm9fbGF5ZXJzOiBcIkV0dCBmZWwgdXBwc3RvZC4gTml2w6Vlcm5hIGthbiBpbnRlIHJlZGlnZXJhcy5cIixcbiAgICBzb21lX2xheWVyczogXCJFdHQgZmVsIHVwcHN0b2QuIFZpc3NhIG5pdsOlZXIga2FuIGludGUgcmVkaWdlcmFzLlwiXG4gIH0sXG4gIHNlYXJjaDogXCJTw7ZrbmluZ1wiLFxuICBlZGl0aW5nX2NoYW5nZXM6IFwiRWRpdGluZyBDaGFuZ2VzXCIsXG4gIGVkaXRpbmdfZGF0YTogXCJOaXbDpWVybmEgcmVkaWdlcmFzXCIsXG4gIGVkaXRpbmdfYXR0cmlidXRlczogXCJBdHRyaWJ1dGVuIHJlZGlnZXJhc1wiLFxuICByZWxhdGlvbnM6IFwiUmVsYXRpb25lclwiLFxuICBlZGl0X3JlbGF0aW9uOiBcIlJlZGlnZXJhIHJlbGF0aW9uZW5cIixcbiAgYmFja190b19yZWxhdGlvbnM6IFwiVGlsbGJha2EgdGlsbCByZWxhdGlvbmVybmFcIixcbiAgbm9fcmVsYXRpb25zX2ZvdW5kOiBcIkluZ2EgcmVsYXRpb25lciBoaXR0YWRlc1wiLFxuICByZWxhdGlvbl9kYXRhOiBcIlJlbGF0aW9uc3VwcGdpZnRlclwiLFxuICByZWxhdGlvbl9hbHJlYWR5X2FkZGVkOiBcIlJlbGF0aW9uZW4gaGFyIHJlZGFuIGxhZ3RzIHRpbGxcIixcbiAgbGlzdF9vZl9yZWxhdGlvbnNfZmVhdHVyZTogXCJMaXN0YSBww6UgcmVsYXRpb25lbnMgZWdlbnNrYXBlclwiLFxuICB0b29sdGlwOiB7XG4gICAgZWRpdF9sYXllcjogXCJSZWRpZ2VyYSBuaXbDpW5cIlxuICB9LFxuICB0b29sYm94OiB7XG4gICAgdGl0bGU6ICdSZWRpZ2VyYSdcbiAgfSxcbiAgdGFibGU6IHtcbiAgICBlZGl0OiBcIlJlZGlnZXJhIGVnZW5za2FwXCIsXG4gICAgY29weTogXCJTa2FwYSBlbiBrb3BpYVwiLFxuICAgIGRlbGV0ZTogXCJUYSBib3J0IGVnZW5za2FwXCJcbiAgfSxcbiAgdG9vbHM6IHtcbiAgICBjb3B5OiBcIktvcGllcmEgZWdlbnNrYXBlclwiLFxuICAgIHBhc3RlZmVhdHVyZXNmcm9tb3RoZXJsYXllcnM6IFwiUGFzdGUgZmVhdHVyZXMgZnJvbSBvdGhlciBsYXllclwiLFxuICAgIGFkZHBhcnQ6IFwiTMOkZ2cgdGlsbCBkZWxcIixcbiAgICBkZWxldGVwYXJ0OiBcIlRhIGJvcnQgZGVsXCIsXG4gICAgbWVyZ2U6IFwiU2zDpSBzYW1tYW4gZWdlbnNrYXBlclwiLFxuICAgIHNwbGl0OiBcIkRlbGEgdXBwIGVnZW5za2FwXCIsXG4gICAgYWRkX2ZlYXR1cmU6IFwiTMOkZ2cgdGlsbCBlZ2Vuc2thcFwiLFxuICAgIGRlbGV0ZV9mZWF0dXJlOiBcIlRhIGJvcnQgZWdlbnNrYXBcIixcbiAgICBtb3ZlX2ZlYXR1cmU6IFwiRmx5dHRhIGVnZW5za2FwXCIsXG4gICAgdXBkYXRlX3ZlcnRleDogXCJVcHBkYXRlcmEgcHVua3RlbnMgZWdlbnNrYXBcIixcbiAgICB1cGRhdGVfZmVhdHVyZTogXCJVcHBkYXRlcmEgZWdlbnNrYXBcIixcbiAgICBjb3B5ZmVhdHVyZWZyb21leHRlcm5hbGxheWVyOiBcIkNyZWF0ZSBGZWF0dXJlIGZyb20gZXhpc3RpbmcgZmVhdHVyZVwiXG4gIH0sXG4gIHRvb2xzb2Z0b29sOiB7XG4gICAgbWVhc3VyZTogXCJTaG93IG1lYXN1cmVcIixcbiAgICBzbmFwOiBcIlNuYXAgbGF5ZXJcIixcbiAgICBzbmFwYWxsOiBcIlNuYXAgdG8gYWxsIGxheWVyc1wiXG4gIH0sXG4gIHN0ZXBzOiB7XG4gICAgaGVscDoge1xuICAgICAgc2VsZWN0X2VsZW1lbnRzOiBcIlbDpGxqIGVnZW5za2FwZXJcIixcbiAgICAgIHNlbGVjdF9lbGVtZW50OiBcIlbDpGxqIGVnZW5za2FwYWxpdHNlIG9taW5haXN1dXNcIixcbiAgICAgIGNvcHk6IFwiU2thcGEga29waWEgYXYgdmFsZGEgZWdlbnNrYXBlclwiLFxuICAgICAgbWVyZ2U6IFwiU2zDpSBzYW1tYW4gZWdlbnNrYXBlclwiLFxuICAgICAgc3BsaXQ6IFwiRGVsYSB1cHAgZWdlbnNrYXBcIixcbiAgICAgIG5ldzogXCJTa2FwYSBueSBlZ2Vuc2thcFwiLFxuICAgICAgZWRpdF90YWJsZTogXCLDhG5kcmEgZWdlbnNrYXBlciBpIHRhYmVsbGVuXCIsXG4gICAgICBkcmF3X25ld19mZWF0dXJlOiBcIlBpaXJyw6Qgb21pbmFpc3V1cyBrYXJ0YWxsZVwiLFxuICAgICAgYWN0aW9uX2NvbmZpcm06IFwiR29ka8Okbm4gZnVua3Rpb25lblwiLFxuICAgICAgZG91YmxlX2NsaWNrX2RlbGV0ZTogXCJWw6RsaiBmdW5rdGlvbmVuIHNvbSBkdSB2aWxsIHRhIGJvcnQgcMOlIGthcnRhblwiLFxuICAgICAgZWRpdF9mZWF0dXJlX3ZlcnRleDogXCLDhG5kcmEgcHVua3RlbiBlbGxlciBsw6RnZyB0aWxsIHB1bmt0ZW4gdGlsbCBkZW4gdmFsZGEgZWdlbnNrYXBlblwiLFxuICAgICAgbW92ZTogXCJGbHl0dGEgZGVuIHZhbGRhIGVnZW5za2FwZW5cIixcbiAgICAgIHNlbGVjdF9mZWF0dXJlX3RvX3JlbGF0aW9uOiBcIlbDpGxqIHJlbGF0aW9uXCIsXG4gICAgICBzaG93X2VkaXRfZmVhdHVyZV9mb3JtOiAgXCJWaXNhIGVnZW5za2Fwc2Zvcm11bMOkcmV0IGbDtnIgcmVkaWdlcmluZyBhdiBhdHRyaWJ1dFwiLFxuICAgICAgcGlja19mZWF0dXJlOiBcIlbDpGxqIGZ1bmt0aW9uIHDDpSBrYXJ0YW4gZsO2ciBhdHQgw6RuZHJhc1wiLFxuICAgICAgaW5zZXJ0X2F0dHJpYnV0ZXNfZmVhdHVyZTogXCJMw6RnZyB0aWxsIGVnZW5za2FwZW5zIGF0dHJpYnV0XCJcbiAgICB9XG4gIH0sXG4gIHdvcmtmbG93OiB7XG4gICAgc3RlcHM6IHtcbiAgICAgIHNlbGVjdDogJ1bDpGxqIGVnZW5za2FwJyxcbiAgICAgIGRyYXdfcGFydDogXCJSaXRhIG55IGRlbFwiLFxuICAgICAgbWVyZ2U6ICdWw6RsaiBlZ2Vuc2thcCBhdHQgc2zDpSBzYW1tYW4nLFxuICAgICAgc2VsZWN0U0hJRlQ6ICdUcnljayBTSElGVCwgb20gZHUgdmlsbCB2w6RsamEgb2JqZWt0IG1lZCBoasOkbHAgYXYgcmVrdGFuZ2VsLicsICAvL1Rlcm8gMTAuMTIuMjAyMFxuICAgICAgc2VsZWN0RHJhd0JveDogXCJSaXRhIHVwcCBkZW4gcmVrdGFuZ2VsIGlub20gdmlsa2VuIG9iamVrdGVuIHbDpGxqcyBcIiwgLy9UZXJvIDEwLjEyLjIwMjBcbiAgICAgIHNlbGVjdERyYXdCb3hBdExlYXN0MkZlYXR1cmU6IFwiUml0YSByZWt0YW5nZWxuIGlub20gdmlsa2VuIG1pbnN0IHR2w6Ugb2JqZWt0IMOkciBtYXJrZXJhZGUgXCIsXG4gICAgICBzZWxlY3RQb2ludDogXCJWw6RsaiBlZ2Vuc2thcFwiLFxuICAgICAgc2VsZWN0UG9pbnRTSElGVDogJ1RyeWNrIFNISUZULCBvbSBkdSB2aWxsIHbDpGxqYSBvYmpla3QgbWVkIGhqw6RscCBhdiByZWt0YW5nZWwsIGVsbGVyIHbDpGxqIGVuIGVuc2tpbGQgZWdlbnNrYXAuJyxcbiAgICAgIHNlbGVjdE11bHRpUG9pbnRTSElGVDogJ1RyeWNrIFNISUZULCBvbSBkdSB2aWxsIHbDpGxqYSBvYmpla3QgbWVkIGhqw6RscCBhdiByZWt0YW5nZWwsIGVsbGVyIHbDpGxqIGVuIGVuc2tpbGQgZWdlbnNrYXAuJyxcbiAgICAgIHNlbGVjdE11bHRpUG9pbnRTSElGVEF0TGVhc3QyRmVhdHVyZTogJ1RyeWNrIHDDpSBTS0lGVCBmw7ZyIGF0dCB2w6RsamEgbWluc3QgdHbDpSBvYmpla3QgbWVkIGVuIHJla3RhbmdlbCBlbGxlciB2w6RsaiBlbiBlbmRhIGVnZW5za2FwLiAnLFxuICAgICAgY29weUNUUkw6ICdDVFJMK0MsIGR1IGthbiBrb3BpZXJhIHZhbGRhIGVnZW5za2FwZXIuJywgIC8vVGVybyAxMC4xMi4yMDIwXG4gICAgICBzZWxlY3RTdGFydFZlcnRleDogJ1Zpc2Egc3RhcnRwdW5rdGVuIGbDtnIgdmFsZGEgZWdlbnNrYXBlci4nLFxuICAgICAgc2VsZWN0VG9QYXN0ZTogJ1bDpGxqIHB1bmt0IHRpbGwgdmlsa2VuIGRlIHZhbGRhIGVnZW5za2FwZXJuYSBza2EgZm9nYXMuJyxcbiAgICAgIGRyYXdfc3BsaXRfbGluZTogXCJSaXRhIGVuIGxpbmplIGVubGlndCB2aWxrZW4gZGVuIHZhbGRhIGVnZW5za2FwZW4gc2thIHVwcGRlbGFzLlwiXG4gICAgfVxuICB9LFxuICBtZXNzYWdlczoge1xuICAgIGZlYXR1cmVzbG9ja2J5b3RoZXJ1c2VyOiBcIkpvdGt1dCBnZW9tZXRyaWF0L3RpZXR1ZWV0IGVpdsOkdCBvbGUgbXVva2F0dGF2aXNzYSwga29za2EgbXV1dCBrw6R5dHTDpGrDpHQgbXVva2thYXZhdCBuaWl0w6RcIixcbiAgICBzcGxpdHRlZDogXCJVcHBkZWxhZFwiLFxuICAgIG5vc3BsaXR0ZWRmZWF0dXJlOiBcIkVnZW5za2FwZW4gaGFyIGludGUgZGVsYXRzIHVwcFwiLFxuICAgIHByZXNzX2VzYzogXCJUcnljayBFU0MgZsO2ciBhdHQgZ8OlIHRpbGxiYWthXCIsXG4gICAgb25saW5lOiBcIkbDtnJiaW5kZWxzZW4gaGFyIHVwcHLDpHR0YXRzLiDDhG5kcmluZ2FyIGthbiBzcGFyYXMgaSBkYXRhYmFzZW4uXCIsXG4gICAgb2ZmbGluZTogXCJEdSDDpHIgaSBvZmZsaW5lLWzDpGdlLiDDhG5kcmluZ2FybmEgc3BhcmFzIGxva2FsdFwiLFxuICAgIGRlbGV0ZV9mZWF0dXJlOiBcIlZpbGwgZHUgdGEgYm9ydCBkZW4gdmFsZGEgZWdlbnNrYXBlbj9cIixcbiAgICBkZWxldGVfZmVhdHVyZV9yZWxhdGlvbnM6IFwiT20gZWdlbnNrYXBlbiBzYWtuYXIgYmluZGFuZGUgcmVsYXRpb25lciBibGlyIGRlc3NhIHJlbGF0aW9uZXIgZsO2csOkbGRyYWzDtnNhLiBWaSByZWtvbW1lbmRlcmFyIGF0dCBkdSBiZWhhbmRsYXIgZGVzc2EgcmVsYXRpb25lciBpbm5hbiBkdSBsw6RtbmFyIHByb2dyYW1tZXRcIixcbiAgICB1bmxpbmtfcmVsYXRpb246IFwiVmlsbCBkdSB0YSBib3J0IHJlbGF0aW9uZW4/XCIsXG4gICAgY29tbWl0X2ZlYXR1cmU6IFwiU2thIMOkbmRyaW5nYXJuYSBzcGFyYXM/XCIsXG4gICAgY2hhbmdlX3Rvb2xib3hfcmVsYXRpb246IFwiTml2w6VuIGhhciBlbiByZWxhdGlvbi9yZWxhdGlvbmVyLiBTcGFyYSDDpG5kcmluZ2FybmEgaW5uYW4gZHUgYsO2cmphciByZWRpZ2VyYS5cIixcbiAgICBzYXZlZDogXCJVcHBnaWZ0ZXJuYSBzcGFyYWRlc1wiLFxuICAgIHNhdmVkX2xvY2FsOlwiVXBwZ2lmdGVybmEgc3BhcmFkZXMgbG9rYWx0LlwiLFxuICAgIGxvYWRpbmdfZGF0YTogXCJVcHBnaWZ0ZXJuYSBsYWRkYXNcIixcbiAgICBzYXZpbmc6IFwiVXBwZ2lmdGVybmEgc3BhcmFzLiBWw6RudGEuLi5cIixcbiAgICBjb25zdHJhaW50czoge1xuICAgICAgZW5hYmxlX2VkaXRpbmc6IFwiWm9vbWEgaW4gZsO2ciBhdHQgYsO2cmphIGFudsOkbmRhIHJlZGlnZXJpbmdzdmVya3R5ZyBcXG5Ba3RpdmVyaW5nIHNrYWxhIDE6XCJcbiAgICB9LFxuICAgIHBkZjogXCJGw7ZyaGFuZHNncmFuc2tuaW5nIGF2IGRva3VtZW50IMOkciBpbnRlIHRpbGxnw6RuZ2xpZy4gVHJ5Y2sgaMOkclwiLFxuICAgIGNvbW1pdDoge1xuICAgICAgaGVhZGVyOiBcIkbDtmxqYW5kZSBsaXN0YSB2aXNhciBhbGxhIMOkbmRyaW5nYXIuXCIsXG4gICAgICBoZWFkZXJfYWRkOiBcIjxiPlRpbGxhZ2RhPC9iPiB2aXNhciBhbnRhbGV0IGVnZW5za2FwZXIgc29tIGxhZ3RzIHRpbGxcIixcbiAgICAgIGhlYWRlcl91cGRhdGVfZGVsZXRlOiBcIjxiPlJlZGlnZXJhZDwvYj4gb2NoIDxiPkJvcnR0YWdlbjwvYj4gVmlzYSBlbiBsaXN0YSBww6UgZWdlbnNrYXBlcm5hcyBpZFwiLFxuICAgICAgYWRkOiBcIihuLiBlZ2Vuc2thcGVyKSBoYXIgbGFndHMgdGlsbFwiLFxuICAgICAgZGVsZXRlOiBcIkJvcnR0YWdlbiAoaWQpXCIsXG4gICAgICB1cGRhdGU6IFwiUmVkaWdlcmFkKGlkKVwiXG4gICAgfSxcbiAgICBsb2FkaW5nX3RhYmxlX2RhdGE6IFwiQnVpbGRpbmcgRGF0YSBUYWJsZS4gUGxlYXNlIHdhaXQgLi4uXCIsXG4gICAgY29weV9hbmRfcGFzdGVfZnJvbV9vdGhlcl9sYXllcl9tYW5kYXRvcnlfZmllbGRzOiBcIkl0IGlzIG5lY2Vzc2FyeSB0byBmaWxsIGluIGFueSBtYW5kYXRvcnkgZmllbGRzIG9uIHRoZSBmZWF0dXJlcyBwYXN0ZWQgYmVmb3JlIHNhdmluZ1wiLFxuICAgIG5vX2ZlYXR1cmVfc2VsZWN0ZWQ6IFwiTm8gZmVhdHVyZSBzZWxlY3RlZFwiXG4gIH0sXG4gIHJlbGF0aW9uOiB7XG4gICAgdGFibGU6IHtcbiAgICAgIGluZm86IGBcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG5cdFx0XHRcdFx0VsOkbGogcmVsYXRpb24gZsO2ciBsw6Rua25pbmcgdGlsbCBlZ2Vuc2thcCBzb20gc2thIHJlZGlnZXJhcy5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGBcbiAgICB9XG4gIH0sXG4gIGZvcm06IHtcbiAgICByZWxhdGlvbnM6IHtcbiAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgIGJhY2tfdG9fZmF0aGVyOlwiQmFjayB0byBlZGl0IGZhdGhlclwiLFxuICAgICAgICBhZGRfcmVsYXRpb246IFwiU2thcGEgb2NoIGzDpG5rYSBueSByZWxhdGlvblwiLFxuICAgICAgICBsaW5rX3JlbGF0aW9uOiBcIkZvZ2EgcmVsYXRpb25lbiB0aWxsIGRlbm5hIGVnZW5za2FwXCIsXG4gICAgICAgIG9wZW5fcmVsYXRpb25fdG9vbHM6IFwiVmlzYSByZWxhdGlvbnN2ZXJrdHlnXCIsXG4gICAgICAgIHVubGlua19yZWxhdGlvbjogXCJUYSBib3J0IHJlbGF0aW9uXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGJ1dHRvbnM6IHtcbiAgICAgIHNhdmU6IFwiU3BhcmEgb2NoIGF2c2x1dGFcIixcbiAgICAgIHNhdmVfYW5kX2JhY2s6IFwiU3BhcmEgb2NoIGfDpSB0aWxsYmFrYVwiLFxuICAgICAgY2FuY2VsOiBcIklnbm9yZXJhIMOkbmRyaW5nYXJcIlxuICAgIH1cbiAgfSxcbiAgbW9kYWw6IHtcbiAgICB0b29sczoge1xuICAgICAgY29weWZlYXR1cmVmcm9tb3RoZXJsYXllcjoge1xuICAgICAgICB0aXRsZTogXCJTZWxlY3QgZmVhdHVyZS9zXCJcbiAgICAgIH0sXG4gICAgICBjb3B5ZmVhdHVyZWZyb21wcm9qZWN0bGF5ZXI6IHtcbiAgICAgICAgdGl0bGU6IFwiU2VsZWN0IGEgZmVhdHVyZVwiXG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IGkxOG4gZnJvbSAnLi9pMThuJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgaTE4blxufVxuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7R1VJfSA9IGczd3Nkay5ndWk7XG5jb25zdCB7Rm9ybUNvbXBvbmVudH0gPSBnM3dzZGsuZ3VpLnZ1ZTtcbmNvbnN0IEVkaXRpbmdGb3JtU2VydmljZSA9IHJlcXVpcmUoJy4vZWRpdGluZ2Zvcm1zZXJ2aWNlJyk7XG5cbmZ1bmN0aW9uIEVkaXRpbmdGb3JtQ29tcG9uZW50KG9wdGlvbnM9e30pIHtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbiAgY29uc3QgRWRpdGluZ1NlcnZpY2UgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9lZGl0aW5nc2VydmljZScpO1xuICBjb25zdCByZWxhdGlvbnNPcHRpb25zID0gb3B0aW9ucy5jb250ZXh0X2lucHV0cyB8fCBudWxsO1xuICBjb25zdCB7bGF5ZXJ9ID0gb3B0aW9ucztcbiAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmdldElkKCk7XG4gIGlmIChyZWxhdGlvbnNPcHRpb25zKSB7XG4gICAgY29uc3QgZmVhdHVyZSA9IHJlbGF0aW9uc09wdGlvbnMuaW5wdXRzLmZlYXR1cmVzW3JlbGF0aW9uc09wdGlvbnMuaW5wdXRzLmZlYXR1cmVzLmxlbmd0aC0xXTtcbiAgICBjb25zdCBwcm9taXNlID0gIGZlYXR1cmUuaXNOZXcoKSA/IFByb21pc2UucmVzb2x2ZSgpIDogRWRpdGluZ1NlcnZpY2UuZ2V0TGF5ZXJzRGVwZW5kZW5jeUZlYXR1cmVzKGxheWVySWQsIHtcbiAgICAgIGZlYXR1cmUsXG4gICAgICBmaWx0ZXJUeXBlOiAnZmlkJ1xuICAgIH0pO1xuICAgIHByb21pc2UudGhlbigoKT0+IHtcbiAgICAgIHJlbGF0aW9uc09wdGlvbnMuZm9ybUV2ZW50QnVzID0gdGhpcy5nZXRTZXJ2aWNlKCkuZ2V0RXZlbnRCdXMoKTtcbiAgICAgIGNvbnN0IHNlcnZpY2UgPSBuZXcgRWRpdGluZ0Zvcm1TZXJ2aWNlKHJlbGF0aW9uc09wdGlvbnMpO1xuICAgICAgY29uc3QgUmVsYXRpb25Db21wb25lbnRzID0gc2VydmljZS5idWlsZFJlbGF0aW9uQ29tcG9uZW50cygpO1xuICAgICAgY29uc3QgY3VzdG9tRm9ybUNvbXBvbmVudHMgPSBFZGl0aW5nU2VydmljZS5nZXRGb3JtQ29tcG9uZW50c0J5SWQobGF5ZXJJZCk7XG4gICAgICAvL2NoZWNrIGlmIGFkZCBjb21wb25lbnRzIHRvIGFkZFxuICAgICAgY3VzdG9tRm9ybUNvbXBvbmVudHMubGVuZ3RoICYmIHRoaXMuYWRkRm9ybUNvbXBvbmVudHMoY3VzdG9tRm9ybUNvbXBvbmVudHMpO1xuICAgICAgLy8gYWRkIHJlbGF0aW9uIGNvbXBvbmVudFxuICAgICAgUmVsYXRpb25Db21wb25lbnRzLmxlbmd0aCAmJiB0aGlzLmFkZEZvcm1Db21wb25lbnRzKFJlbGF0aW9uQ29tcG9uZW50cyk7XG4gICAgICB0aGlzLmdldFNlcnZpY2UoKS5oYW5kbGVSZWxhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uKHtyZWxhdGlvbiwgbGF5ZXJJZCwgZmVhdHVyZX0pe1xuICAgICAgICBHVUkuc2V0TG9hZGluZ0NvbnRlbnQodHJ1ZSk7XG4gICAgICAgIGNvbnN0IHtuYW1lOiByZWxhdGlvbklkfSA9IHJlbGF0aW9uO1xuICAgICAgICBhd2FpdCBFZGl0aW5nU2VydmljZS5zZXRMYXllclVuaXF1ZUZpZWxkVmFsdWVzKGxheWVyLmdldFJlbGF0aW9uQnlJZChyZWxhdGlvbklkKS5nZXRDaGlsZCgpKTtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50Q29tcG9uZW50QnlJZChyZWxhdGlvbklkKTtcbiAgICAgICAgR1VJLnNldExvYWRpbmdDb250ZW50KGZhbHNlKTtcbiAgICAgIH07XG4gICAgfSlcbiAgfVxufVxuXG5pbmhlcml0KEVkaXRpbmdGb3JtQ29tcG9uZW50LCBGb3JtQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0aW5nRm9ybUNvbXBvbmVudDtcbiIsImNvbnN0IHtHVUl9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IFJlbGF0aW9uQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9Gb3JtUmVsYXRpb24udnVlJyk7XG5jb25zdCBFZGl0aW5nRm9ybVNlcnZpY2UgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIGNvbnN0IEVkaXRpbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZXMvZWRpdGluZ3NlcnZpY2UnKTtcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICByZWxhdGlvbnM6IFtdXG4gIH07XG4gIGNvbnN0IHtsYXllciwgZmVhdHVyZXN9ID0gb3B0aW9ucy5pbnB1dHMgfHwge307XG4gIC8vIGdldCBiYWNrIHRvIEZhdGhlciBmdW5jdGlvblxuICB0aGlzLl9mb3JtRXZlbnRCdXMgPSBvcHRpb25zLmZvcm1FdmVudEJ1cyB8fCBudWxsO1xuICBjb25zdCBsYXllcklkID0gbGF5ZXIuZ2V0SWQoKTtcbiAgLy8gZ2V0IGZlYXR1cmVcbiAgY29uc3QgZmVhdHVyZSA9IGZlYXR1cmVzW2ZlYXR1cmVzLmxlbmd0aCAtIDFdO1xuICAvLyBnZXQgb25seSByZWxhdGlvbiB3aXRoIHR5cGUgbm90IE9ORSBhbmQgbGF5ZXIgaXMgdGhlIGZhdGhlclxuICBsZXQgcmVsYXRpb25zID0gbGF5ZXIuZ2V0UmVsYXRpb25zKCkuZ2V0QXJyYXkoKS5maWx0ZXIocmVsYXRpb24gPT4gcmVsYXRpb24uZ2V0VHlwZSgpICE9PSAnT05FJyAmJiByZWxhdGlvbi5nZXRGYXRoZXIoKSA9PT0gbGF5ZXJJZCk7XG4gIC8qKlxuICAgKiBnZXQgcmVsYXRpb24gbGF5ZXJzIHRoYXQgc2V0IGluIGVkaXRpbmcgb24gZzN3LWFkbWluXG4gICAqL1xuICByZWxhdGlvbnMgPSBFZGl0aW5nU2VydmljZS5nZXRSZWxhdGlvbnNJbkVkaXRpbmcoe2xheWVySWQsIHJlbGF0aW9ucyAsIGZlYXR1cmV9KTtcbiAgdGhpcy5oYXNSZWxhdGlvbnMgPSAoKSA9PiAhIXJlbGF0aW9ucy5sZW5ndGg7XG4gIHRoaXMuYnVpbGRSZWxhdGlvbkNvbXBvbmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCByZWxhdGlvbkNvbXBvbmVudHMgPSBbXTtcbiAgICByZWxhdGlvbnMuZm9yRWFjaChyZWxhdGlvbiA9PiB7XG4gICAgICBjb25zdCByZWxhdGlvbkNvbXBvbmVudCA9IFZ1ZS5leHRlbmQoe1xuICAgICAgICBtaXhpbnM6IFtSZWxhdGlvbkNvbXBvbmVudF0sXG4gICAgICAgIG5hbWU6IGByZWxhdGlvbl8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgIGdldFNlcnZpY2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVsYXRpb25zU2VydmljZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxheWVySWQsXG4gICAgICAgICAgICByZWxhdGlvbjogcmVsYXRpb24ucmVsYXRpb24sXG4gICAgICAgICAgICByZWxhdGlvbnM6IHJlbGF0aW9uLnJlbGF0aW9ucyxcbiAgICAgICAgICAgIHJlc291cmNlc3VybDogR1VJLmdldFJlc291cmNlc1VybCgpLFxuICAgICAgICAgICAgZm9ybWV2ZW50YnVzOiBzZWxmLl9mb3JtRXZlbnRCdXNcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHJlbGF0aW9uQ29tcG9uZW50cy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwicGx1Z2lucy5lZGl0aW5nLmVkaXRfcmVsYXRpb25cIixcbiAgICAgICAgbmFtZTogcmVsYXRpb24ucmVsYXRpb24ubmFtZSxcbiAgICAgICAgaWQ6IHJlbGF0aW9uLnJlbGF0aW9uLmlkLFxuICAgICAgICBoZWFkZXI6IGZhbHNlLCAvLyBub3Qgc2hvdyB0byBoZWFkZXIgZm9ybVxuICAgICAgICBjb21wb25lbnQ6IHJlbGF0aW9uQ29tcG9uZW50XG4gICAgICB9KVxuICAgIH0pO1xuICAgIHJldHVybiByZWxhdGlvbkNvbXBvbmVudHM7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICBFZGl0aW5nRm9ybVNlcnZpY2U7XG4iLCJpbXBvcnQgQ2hvb3NlRmVhdHVyZVRvRWRpdFZ1ZUNvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL0Nob29zZUZlYXR1cmVUb0VkaXQudnVlJztcblxuZnVuY3Rpb24gQ2hvb3NlRmVhdHVyZVRvRWRpdENvbXBvbmVudCh7ZmVhdHVyZXM9W10sIGZlYXR1cmU9bnVsbCwgYXR0cmlidXRlcz1bXX09e30pe1xuICBjb25zdCBDb21wb25lbnQgPSBWdWUuZXh0ZW5kKENob29zZUZlYXR1cmVUb0VkaXRWdWVDb21wb25lbnQpO1xuICByZXR1cm4gbmV3IENvbXBvbmVudCh7XG4gICAgZmVhdHVyZXMsXG4gICAgZmVhdHVyZSxcbiAgICBhdHRyaWJ1dGVzXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hvb3NlRmVhdHVyZVRvRWRpdENvbXBvbmVudDtcbiIsIi8qIE9SSUdJTkFMIFNPVVJDRTpcbiogdnVlL2VkaXRpbmcuanNAdjMuNFxuKi9cblxuaW1wb3J0IEVkaXRpbmdWdWVDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9FZGl0aW5nLnZ1ZSc7XG5jb25zdCB7YmFzZSwgaW5oZXJpdCwgbWVyZ2V9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHsgQ29tcG9uZW50IH0gPSBnM3dzZGsuZ3VpLnZ1ZTtcbmNvbnN0IEVkaXRpbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZXMvZWRpdGluZ3NlcnZpY2UnKTtcblxuZnVuY3Rpb24gUGFuZWxDb21wb25lbnQob3B0aW9ucz17fSkge1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLnZ1ZUNvbXBvbmVudCA9IEVkaXRpbmdWdWVDb21wb25lbnQ7XG4gIGNvbnN0IHsgbmFtZT0nRWRpdGluZyBkYXRhJ30gPSBvcHRpb25zO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICBtZXJnZSh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5fcmVzb3VyY2VzVXJsID0gb3B0aW9ucy5yZXNvdXJjZXNVcmwgfHwgR1VJLmdldFJlc291cmNlc1VybCgpO1xuICB0aGlzLl9zZXJ2aWNlID0gb3B0aW9ucy5zZXJ2aWNlIHx8IEVkaXRpbmdTZXJ2aWNlO1xuICBjb25zdCBJbnRlcm5hbENvbXBvbmVudCA9IFZ1ZS5leHRlbmQodGhpcy52dWVDb21wb25lbnQpO1xuICB0aGlzLmludGVybmFsQ29tcG9uZW50ID0gbmV3IEludGVybmFsQ29tcG9uZW50KHtcbiAgICBzZXJ2aWNlOiB0aGlzLl9zZXJ2aWNlLFxuICAgIGRhdGE6ICgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlOiB0aGlzLl9zZXJ2aWNlLnN0YXRlLFxuICAgICAgICByZXNvdXJjZXN1cmw6IHRoaXMuX3Jlc291cmNlc1VybCxcbiAgICAgICAgc2hvd2NvbW1pdGJhcjogb3B0aW9ucy5zaG93Y29tbWl0YmFyLFxuICAgICAgICBlZGl0aW5nQnV0dG9uc0VuYWJsZWQ6IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMubW91bnQgPSBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICByZXR1cm4gYmFzZSh0aGlzLCAnbW91bnQnLCBwYXJlbnQsIHRydWUpXG4gIH07XG5cbiAgdGhpcy51bm1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgICB0aGlzLl9zZXJ2aWNlLnN0b3AoKVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICB0aGlzLnVubW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBiYXNlKHRoaXMsICd1bm1vdW50JylcbiAgICAgICAgICAgIC50aGVuKCgpID0+IGQucmVzb2x2ZSgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZC5wcm9taXNlKCk7XG4gIH07XG59XG5cbmluaGVyaXQoUGFuZWxDb21wb25lbnQsIENvbXBvbmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFuZWxDb21wb25lbnQ7XG5cblxuIiwiaW1wb3J0IENvcHlGZWF0dXJlRnJvbU90aGVyTGF5ZXJzQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJzLnZ1ZSc7XG5jb25zdCB7Q2F0YWxvZ0xheWVyc1N0b3Jlc1JlZ2lzdHJ5fSA9IGczd3Nkay5jb3JlLmNhdGFsb2c7XG5cbmZ1bmN0aW9uIFNlbGVjdEZlYXR1cmVzRnJvbU90aGVyTGF5ZXJzQ29tcG9uZW50KHtmZWF0dXJlcz1bXSwgc2VsZWN0ZWRGZWF0dXJlcz1bXX09e30pe1xuICBjb25zdCBsYXllcnMgPSB7fTtcbiAgZmVhdHVyZXMuZm9yRWFjaChmZWF0dXJlID0+IHtcbiAgICBjb25zdCBsYXllcklkID0gZmVhdHVyZS5fX2xheWVySWQ7XG4gICAgaWYgKGxheWVyc1tsYXllcklkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBleHRlcm5hbCA9ICFDYXRhbG9nTGF5ZXJzU3RvcmVzUmVnaXN0cnkuZ2V0TGF5ZXJCeUlkKGxheWVySWQpO1xuICAgICAgbGF5ZXJzW2xheWVySWRdID0ge1xuICAgICAgICBleHRlcm5hbCxcbiAgICAgICAgZmllbGRzOiAhZXh0ZXJuYWwgJiYgQ2F0YWxvZ0xheWVyc1N0b3Jlc1JlZ2lzdHJ5LmdldExheWVyQnlJZChsYXllcklkKS5nZXRGaWVsZHMoKSxcbiAgICAgICAgZmVhdHVyZXM6W11cbiAgICAgIH07XG4gICAgfVxuICAgIGxheWVyc1tsYXllcklkXS5mZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICB9KTtcbiAgY29uc3QgQ29tcG9uZW50ID0gVnVlLmV4dGVuZChDb3B5RmVhdHVyZUZyb21PdGhlckxheWVyc0NvbXBvbmVudCk7XG4gIHJldHVybiBuZXcgQ29tcG9uZW50KHtcbiAgICBsYXllcnMsXG4gICAgc2VsZWN0ZWRGZWF0dXJlc1xuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEZlYXR1cmVzRnJvbU90aGVyTGF5ZXJzQ29tcG9uZW50OyIsImltcG9ydCBDb3B5RmVhdHVyZUZyb21PdGhlckxheWVyc0NvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL0NvcHlGZWF0dXJlc0Zyb21PdGhlclByb2plY3RMYXllci52dWUnO1xuY29uc3Qge0NhdGFsb2dMYXllcnNTdG9yZXNSZWdpc3RyeX0gPSBnM3dzZGsuY29yZS5jYXRhbG9nO1xuXG5mdW5jdGlvbiBTZWxlY3RGZWF0dXJlc0Zyb21PdGhlckxheWVyc0NvbXBvbmVudCh7bGF5ZXIsIGV4dGVybmFsLCBmZWF0dXJlcz1bXSwgc2VsZWN0ZWRGZWF0dXJlcz1bXX09e30pe1xuICBjb25zdCBDb21wb25lbnQgPSBWdWUuZXh0ZW5kKENvcHlGZWF0dXJlRnJvbU90aGVyTGF5ZXJzQ29tcG9uZW50KTtcbiAgcmV0dXJuIG5ldyBDb21wb25lbnQoe1xuICAgIGZlYXR1cmVzLFxuICAgIGZpZWxkczogIWV4dGVybmFsID8gQ2F0YWxvZ0xheWVyc1N0b3Jlc1JlZ2lzdHJ5LmdldExheWVyQnlJZChsYXllci5nZXRJZCgpKS5nZXRGaWVsZHMoKSA6IG51bGwsXG4gICAgc2VsZWN0ZWRGZWF0dXJlc1xuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEZlYXR1cmVzRnJvbU90aGVyTGF5ZXJzQ29tcG9uZW50O1xuIiwiLyogT1JJR0lOQUwgU09VUkNFOlxuKiB2dWUvY29tcG9uZW50cy9zZWxlY3RmZWF0dXJlcy9zZWxlY3RmZWF0dXJlcy5qc0B2My40XG4qL1xuXG5jb25zdCB7IHRvUmF3VHlwZSB9ID0gIGczd3Nkay5jb3JlLnV0aWxzO1xuXG5mdW5jdGlvbiBTZWxlY3RGZWF0dXJlc0RvbSh7ZmVhdHVyZXMsIGV2ZW50c309e30pe1xuICBjb25zdCBDb21wb25lbnQgPSBWdWUuZXh0ZW5kKHtcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0ZWQ6IG51bGxcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcihoKSB7XG4gICAgICBjb25zdCBjb2x1bW5zID0gT2JqZWN0LmtleXMoZmVhdHVyZXNbMF0uZ2V0QWxwaGFudW1lcmljUHJvcGVydGllcygpKTtcbiAgICAgIGNvbnN0IGhlYWRlciA9IGNvbHVtbnMubWFwKHByb3BlcnR5ID0+IGgoJ3RoJywgcHJvcGVydHkpKTtcbiAgICAgIGNvbnN0IHRoZWFkID0gaCgndGhlYWQnLCBbaCgndHInLCBoZWFkZXIpXSk7XG4gICAgICBjb25zdCByb3dzID0gZmVhdHVyZXMubWFwKChmZWF0dXJlLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjb2x1bW5zLm1hcChjb2x1bW4gPT4ge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGZlYXR1cmUuZ2V0KGNvbHVtbik7XG4gICAgICAgICAgdmFsdWUgPSB0b1Jhd1R5cGUodmFsdWUpID09PSAnT2JqZWN0JyA/IHZhbHVlLnZhbHVlIDogdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGgoJ3RkJywgdmFsdWUpXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaCgndHInLCB7XG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBpbmRleDtcbiAgICAgICAgICAgICAgZXZlbnRzLmNsaWNrKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgICAnc2tpbi1iYWNrZ3JvdW5kLWNvbG9yIGxpZ2h0ZW4nOiB0aGlzLnNlbGVjdGVkID09PSBpbmRleFxuICAgICAgICAgIH1cbiAgICAgICAgfSwgdmFsdWVzKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdGJvZHkgPSBoKCd0Ym9keScsIHJvd3MpO1xuICAgICAgY29uc3QgdGFibGUgPSBoKCd0YWJsZScsIHtcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAndGFibGUgdGFibGUtcmVzcG9uc2l2ZSB0YWJsZS1zdHJpcGVkJzogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LCBbdGhlYWQsIHRib2R5XSk7XG4gICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgJ292ZXJmbG93JzogJ2F1dG8nXG4gICAgICAgIH0sXG4gICAgICB9LCBbdGFibGVdKVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXcgQ29tcG9uZW50KCkuJG1vdW50KCkuJGVsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEZlYXR1cmVzRG9tO1xuIiwiLyogT1JJR0lOQUwgU09VUkNFOlxuKiB0YWJsZS90YWJsZS5qc0B2My40XG4qL1xuXG5pbXBvcnQgVGFibGVWdWVPYmplY3QgZnJvbSAnLi4vY29tcG9uZW50cy9UYWJsZS52dWUnO1xuY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBDb21wb25lbnQgPSBnM3dzZGsuZ3VpLnZ1ZS5Db21wb25lbnQ7XG5jb25zdCBUYWJsZVNlcnZpY2UgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy90YWJsZXNlcnZpY2UnKTtcblxuY29uc3QgSW50ZXJuYWxDb21wb25lbnQgPSBWdWUuZXh0ZW5kKFRhYmxlVnVlT2JqZWN0KTtcblxuY29uc3QgVGFibGVDb21wb25lbnQgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIGJhc2UodGhpcyk7XG4gIGNvbnN0IHNlcnZpY2UgPSBvcHRpb25zLnNlcnZpY2UgfHwgbmV3IFRhYmxlU2VydmljZSh7XG4gICAuLi5vcHRpb25zXG4gIH0pO1xuICB0aGlzLnNldFNlcnZpY2Uoc2VydmljZSk7XG4gIGNvbnN0IGludGVybmFsQ29tcG9uZW50ID0gbmV3IEludGVybmFsQ29tcG9uZW50KHtcbiAgICBzZXJ2aWNlXG4gIH0pO1xuICB0aGlzLnNldEludGVybmFsQ29tcG9uZW50KGludGVybmFsQ29tcG9uZW50KTtcbiAgaW50ZXJuYWxDb21wb25lbnQuc3RhdGUgPSBzZXJ2aWNlLnN0YXRlO1xuICBzZXJ2aWNlLm9uY2UoJ3JlYWR5JywgKCk9PiB0aGlzLmVtaXQoJ3JlYWR5JykpO1xuICB0aGlzLnVubW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICBzZXJ2aWNlLmNhbmNlbCgpO1xuICAgIHJldHVybiBiYXNlKHRoaXMsICd1bm1vdW50Jyk7XG4gIH07XG59O1xuXG5pbmhlcml0KFRhYmxlQ29tcG9uZW50LCBDb21wb25lbnQpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVGFibGVDb21wb25lbnQ7XG5cblxuIiwiaW1wb3J0IHBsdWdpbkNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5jb25zdCB7YmFzZSwgaW5oZXJpdH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHtQbHVnaW46QmFzZVBsdWdpbn0gPSBnM3dzZGsuY29yZS5wbHVnaW47XG5jb25zdCBHVUkgPSBnM3dzZGsuZ3VpLkdVSTtcbmNvbnN0IFNlcnZpY2UgPSByZXF1aXJlKCcuL3NlcnZpY2VzL2VkaXRpbmdzZXJ2aWNlJyk7XG5jb25zdCBFZGl0aW5nUGFuZWwgPSByZXF1aXJlKCcuL3BhbmVsJyk7XG5cbmNvbnN0IFBsdWdpbiA9IGZ1bmN0aW9uKCkge1xuICBiYXNlKHRoaXMsIHtcbiAgICBuYW1lOiAnZWRpdGluZycsXG4gICAgaTE4bjogcGx1Z2luQ29uZmlnLmkxOG4sXG4gICAgc2VydmljZTogU2VydmljZSxcbiAgICBmb250Q2xhc3NlczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnbWVhc3VyZScsXG4gICAgICAgIGNsYXNzTmFtZTogXCJmYXMgZmEtcnVsZXItY29tYmluZWRcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ21hZ25ldGUnLFxuICAgICAgICBjbGFzc05hbWU6IFwiZmFzIGZhLW1hZ25ldFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnY2xpcGJvYXJkJyxcbiAgICAgICAgY2xhc3NOYW1lOiBcImZhcyBmYS1jbGlwYm9hcmRcIlxuICAgICAgfVxuICAgIF1cbiAgfSk7XG4gIGNvbnN0IHBsdWdpbkdyb3VwVG9vbCA9IHtcbiAgICBwb3NpdGlvbjogMCxcbiAgICB0aXRsZTogJ0VESVRJTkcnXG4gIH07XG4gIGNvbnN0IHNob3dfZXJyb3JzID0ge1xuICAgIHNvbWVfbGF5ZXJzOiBmYWxzZVxuICB9O1xuICB0aGlzLnBhbmVsOyAvLyBlZGl0aW5nIHBhbmVsIHJlZmVyZW5jZVxuXG4gIC8vIGNoZWNrIGlmIGV4aXN0IGFueSBsYXllciB0byBlZGl0XG4gIGlmICh0aGlzLnNlcnZpY2UubG9hZFBsdWdpbigpKSB7XG4gICAgdGhpcy5zZXRIb29rTG9hZGluZyh7XG4gICAgICBsb2FkaW5nOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5zZXJ2aWNlLm9uY2UoJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgLy9wbHVnaW4gcmVnaXN0cnlcbiAgICAgIGlmICh0aGlzLnJlZ2lzdGVyUGx1Z2luKHRoaXMuY29uZmlnLmdpZCkpIHtcbiAgICAgICAgaWYgKCFHVUkuaXNyZWFkeSkgR1VJLm9uKCdyZWFkeScsIHRoaXMuc2V0dXBHdWkuYmluZCh0aGlzKSk7XG4gICAgICAgIGVsc2UgdGhpcy5zZXR1cEd1aSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRIb29rTG9hZGluZyh7XG4gICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGFwaSA9IHRoaXMuc2VydmljZS5nZXRBcGkoKTtcbiAgICAgIHRoaXMuc2V0QXBpKGFwaSk7XG4gICAgICB0aGlzLnNldFJlYWR5KHRydWUpO1xuICAgIH0pO1xuICAgIC8vaW5pemlhbGl6ZSBzZXJ2aWNlXG4gICAgdGhpcy5zZXJ2aWNlLmluaXQodGhpcy5jb25maWcpO1xuICB9XG5cbiAgLy9zZXR1cCBwbHVnaW4gaW50ZXJmYWNlXG4gIHRoaXMuc2V0dXBHdWkgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jb25maWcudmlzaWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLmNvbmZpZy5uYW1lID0gdGhpcy5jb25maWcubmFtZSB8fCAgXCJwbHVnaW5zLmVkaXRpbmcuZWRpdGluZ19kYXRhXCI7XG4gICAgdGhpcy5hZGRUb29sR3JvdXAocGx1Z2luR3JvdXBUb29sKTtcbiAgICB0aGlzLmFkZFRvb2xzKHtcbiAgICAgIGFjdGlvbjogdGhpcy5zaG93RWRpdGluZ1BhbmVsLFxuICAgICAgb2ZmbGluZTogZmFsc2UsXG4gICAgICBpY29uOiAncGVuY2lsJ1xuICAgIH0sIHBsdWdpbkdyb3VwVG9vbClcbiAgfTtcblxuICAvL21ldGhvZCB0byBzaG93IGVkaXRpbmcgcGFuZWxcbiAgdGhpcy5zaG93RWRpdGluZ1BhbmVsID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICAgIGlmICh0aGlzLnNlcnZpY2UuZ2V0TGF5ZXJzKCkubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5wYW5lbCA9IG5ldyBFZGl0aW5nUGFuZWwob3B0aW9ucyk7XG4gICAgICBHVUkuc2hvd1BhbmVsKHRoaXMucGFuZWwpO1xuICAgICAgaWYgKCFzaG93X2Vycm9ycy5zb21lX2xheWVycyAmJiB0aGlzLnNlcnZpY2UuZ2V0TGF5ZXJzSW5FcnJvcigpKSB7XG4gICAgICAgIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICBtZXNzYWdlOiAncGx1Z2lucy5lZGl0aW5nLmVycm9ycy5zb21lX2xheWVycycsXG4gICAgICAgICAgY2xvc2FibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHNob3dfZXJyb3JzLnNvbWVfbGF5ZXJzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgR1VJLnNob3dVc2VyTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdhbGVydCcsXG4gICAgICAgIG1lc3NhZ2U6ICdwbHVnaW5zLmVkaXRpbmcuZXJyb3JzLm5vX2xheWVycydcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhbmVsO1xuICB9O1xuXG4gIHRoaXMuaGlkZUVkaXRpbmdQYW5lbCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pe1xuICAgIHRoaXMucGFuZWwgJiYgR1VJLmNsb3NlUGFuZWwoKTtcbiAgICB0aGlzLnBhbmVsID0gbnVsbDtcbiAgfTtcblxuICB0aGlzLnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucGFuZWwgPSBudWxsO1xuICAgIHRoaXMuY29uZmlnLnZpc2libGUgJiYgdGhpcy5yZW1vdmVUb29scygpO1xuICAgIHRoaXMuc2VydmljZS5jbGVhcigpXG4gIH1cbn07XG5cbmluaGVyaXQoUGx1Z2luLCBCYXNlUGx1Z2luKTtcblxubmV3IFBsdWdpbjtcblxuIiwiY29uc3QgUGlja0ZlYXR1cmVzRXZlbnRUeXBlID0ge1xuICBQSUNLRUQ6ICdwaWNrZWQnXG59O1xuXG5jb25zdCBQaWNrRmVhdHVyZXNFdmVudCA9IGZ1bmN0aW9uKHR5cGUsIGNvb3JkaW5hdGUsIGxheWVyLCBmZWF0dXJlcykge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gIHRoaXMuY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGU7XG4gIHRoaXMubGF5ZXIgPSBsYXllcjtcbn07XG5cbmV4cG9ydCBjb25zdCBQaWNrRmVhdHVyZXNJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgb2wuaW50ZXJhY3Rpb24uUG9pbnRlci5jYWxsKHRoaXMsIHtcbiAgICBoYW5kbGVEb3duRXZlbnQ6IFBpY2tGZWF0dXJlc0ludGVyYWN0aW9uLmhhbmRsZURvd25FdmVudF8sXG4gICAgaGFuZGxlVXBFdmVudDogUGlja0ZlYXR1cmVzSW50ZXJhY3Rpb24uaGFuZGxlVXBFdmVudF8sXG4gICAgaGFuZGxlTW92ZUV2ZW50OiBQaWNrRmVhdHVyZXNJbnRlcmFjdGlvbi5oYW5kbGVNb3ZlRXZlbnRfXG4gIH0pO1xuICB0aGlzLmxheWVyID0gb3B0aW9ucy5sYXllcjtcbiAgdGhpcy5waWNrZWRGZWF0dXJlcyA9IFtdO1xufTtcblxub2wuaW5oZXJpdHMoUGlja0ZlYXR1cmVzSW50ZXJhY3Rpb24sIG9sLmludGVyYWN0aW9uLlBvaW50ZXIpO1xuXG5QaWNrRmVhdHVyZXNJbnRlcmFjdGlvbi5oYW5kbGVEb3duRXZlbnRfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdGhpcy5waWNrZWRGZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXNBdFBpeGVsKGV2ZW50KTtcbiAgcmV0dXJuIHRoaXMucGlja2VkRmVhdHVyZXM7XG59O1xuXG5QaWNrRmVhdHVyZXNJbnRlcmFjdGlvbi5oYW5kbGVVcEV2ZW50XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmICh0aGlzLnBpY2tlZEZlYXR1cmVzICYmIHRoaXMucGlja2VkRmVhdHVyZXMubGVuZ3RoKXtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgUGlja0ZlYXR1cmVzRXZlbnQoXG4gICAgICAgIFBpY2tGZWF0dXJlc0V2ZW50VHlwZS5QSUNLRUQsXG4gICAgICAgIGV2ZW50LmNvb3JkaW5hdGUsXG4gICAgICAgIHRoaXMubGF5ZXIsXG4gICAgICAgIHRoaXMucGlja2VkRmVhdHVyZXMpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblBpY2tGZWF0dXJlc0ludGVyYWN0aW9uLnByb3RvdHlwZS5mZWF0dXJlc0F0UGl4ZWwgPSBmdW5jdGlvbih7cGl4ZWwsIG1hcH09e30pIHtcbiAgcmV0dXJuIG1hcC5nZXRGZWF0dXJlc0F0UGl4ZWwocGl4ZWwsIHtcbiAgICBsYXllckZpbHRlcjogbGF5ZXIgPT4gbGF5ZXIgPT09IHRoaXMubGF5ZXIsXG4gICAgaGl0VG9sZXJhbmNlOiAoaXNNb2JpbGUgJiYgaXNNb2JpbGUuYW55KSA/IDEwIDogMFxuICB9KTtcbn07XG5cblBpY2tGZWF0dXJlc0ludGVyYWN0aW9uLmhhbmRsZU1vdmVFdmVudF8gPSBmdW5jdGlvbihldmVudCkge1xuICBjb25zdCBlbGVtID0gZXZlbnQubWFwLmdldFRhcmdldEVsZW1lbnQoKTtcbiAgY29uc3QgaW50ZXJzZWN0aW5nRmVhdHVyZXMgPSB0aGlzLmZlYXR1cmVzQXRQaXhlbChldmVudCk7XG4gIGVsZW0uc3R5bGUuY3Vyc29yID0gaW50ZXJzZWN0aW5nRmVhdHVyZXMgPyAgJ3BvaW50ZXInOiAnJztcbn07XG5cblBpY2tGZWF0dXJlc0ludGVyYWN0aW9uLnByb3RvdHlwZS5zaG91bGRTdG9wRXZlbnQgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG5QaWNrRmVhdHVyZXNJbnRlcmFjdGlvbi5wcm90b3R5cGUuc2V0TWFwID0gZnVuY3Rpb24obWFwKXtcbiAgaWYgKCFtYXApIHtcbiAgICBjb25zdCBlbGVtID0gdGhpcy5nZXRNYXAoKS5nZXRUYXJnZXRFbGVtZW50KCk7XG4gICAgZWxlbS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgfVxuICBvbC5pbnRlcmFjdGlvbi5Qb2ludGVyLnByb3RvdHlwZS5zZXRNYXAuY2FsbCh0aGlzLCBtYXApO1xufTtcblxuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdDb21wb25lbnQgPSByZXF1aXJlKCcuL2czdy1lZGl0aW5nLWNvbXBvbmVudHMvZWRpdGluZycpO1xuXG5mdW5jdGlvbiBFZGl0aW5nUGFuZWxDb21wb25lbnQob3B0aW9ucz17fSkge1xuICAvLyBlZGl0b3J0b29sc2JhcnNcbiAgb3B0aW9ucy5pZCA9IFwiZWRpdGluZy1wYW5lbFwiO1xuICBvcHRpb25zLnRpdGxlID0gb3B0aW9ucy50aXRsZSB8fCBcInBsdWdpbnMuZWRpdGluZy5lZGl0aW5nX2RhdGFcIjtcbiAgb3B0aW9ucy5uYW1lID0gXCJFZGl0aW5nIExheWVyXCI7XG4gIG9wdGlvbnMudG9vbGJveGVzID0gb3B0aW9ucy50b29sYm94ZXMgfHwgbnVsbDtcbiAgb3B0aW9ucy5zaG93Y29tbWl0YmFyID0gb3B0aW9ucy5zaG93Y29tbWl0YmFyID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5zaG93Y29tbWl0YmFyO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59XG5cbmluaGVyaXQoRWRpdGluZ1BhbmVsQ29tcG9uZW50LCBFZGl0aW5nQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0aW5nUGFuZWxDb21wb25lbnQ7XG5cblxuIiwiaW1wb3J0IEFQSSBmcm9tICcuLi9hcGknXG5jb25zdCB7RzNXX0ZJRH0gPSBnM3dzZGsuY29uc3RhbnQ7XG5jb25zdCB7QXBwbGljYXRpb25TdGF0ZSwgQXBwbGljYXRpb25TZXJ2aWNlfSA9IGczd3Nkay5jb3JlO1xuY29uc3Qge0RhdGFSb3V0ZXJTZXJ2aWNlfSA9IGczd3Nkay5jb3JlLmRhdGE7XG5jb25zdCB7YmFzZSwgaW5oZXJpdCwgWEhSfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBHZW9tZXRyeSB9ID0gZzN3c2RrLmNvcmUuZ2VvbWV0cnk7XG5jb25zdCB7XG4gIGdldEZlYXR1cmVzRnJvbVJlc3BvbnNlVmVjdG9yQXBpLFxuICBpc1NhbWVCYXNlR2VvbWV0cnlUeXBlLFxufSA9IGczd3Nkay5jb3JlLmdlb3V0aWxzO1xuY29uc3Qge1dvcmtmbG93c1N0YWNrfSA9IGczd3Nkay5jb3JlLndvcmtmbG93O1xuY29uc3Qge1BsdWdpblNlcnZpY2V9ID0gZzN3c2RrLmNvcmUucGx1Z2luO1xuY29uc3Qge1Nlc3Npb25zUmVnaXN0cnl9ID0gZzN3c2RrLmNvcmUuZWRpdGluZztcbmNvbnN0IHtDYXRhbG9nTGF5ZXJzU3RvcmVzUmVnaXN0cnl9ID0gZzN3c2RrLmNvcmUuY2F0YWxvZztcbmNvbnN0IHtNYXBMYXllcnNTdG9yZVJlZ2lzdHJ5fSA9IGczd3Nkay5jb3JlLm1hcDtcbmNvbnN0IHtMYXllciwgTGF5ZXJzU3RvcmV9ID0gZzN3c2RrLmNvcmUubGF5ZXI7XG5jb25zdCB7RmVhdHVyZX0gPSBnM3dzZGsuY29yZS5sYXllci5mZWF0dXJlcztcbmNvbnN0IHtHVUl9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHtTZXJ2ZXI6c2VydmVyRXJyb3JQYXJzZXJ9PSBnM3dzZGsuY29yZS5lcnJvcnMucGFyc2VycztcbmNvbnN0IHQgPSBnM3dzZGsuY29yZS5pMThuLnRQbHVnaW47XG5jb25zdCB7Z2V0U2NhbGVGcm9tUmVzb2x1dGlvbiwgZ2V0UmVzb2x1dGlvbkZyb21TY2FsZX0gPSBnM3dzZGsub2wudXRpbHM7XG5jb25zdCBUb29sQm94ZXNGYWN0b3J5ID0gcmVxdWlyZSgnLi4vdG9vbGJveGVzL3Rvb2xib3hlc2ZhY3RvcnknKTtcbmNvbnN0IENvbW1pdEZlYXR1cmVzV29ya2Zsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvY29tbWl0ZmVhdHVyZXN3b3JrZmxvdycpO1xuY29uc3QgTUFQQ09OVFJPTF9UT0dHTEVEX0VWRU5UX05BTUUgPSAnbWFwY29udHJvbDp0b2dnbGVkJztcbmNvbnN0IE9GRkxJTkVfSVRFTVMgPSB7XG4gIENIQU5HRVM6ICdFRElUSU5HX0NIQU5HRVMnXG59O1xuXG5mdW5jdGlvbiBFZGl0aW5nU2VydmljZSgpIHtcbiAgYmFzZSh0aGlzKTtcbiAgLy8gY29udGFpbnMgYWxsYSBzZXNzaW9uc1xuICB0aGlzLl9zZXNzaW9ucyA9IHt9O1xuICAvLyBjb25zdHJhaW50c1xuICB0aGlzLmNvbnN0cmFpbnRzID0ge307XG4gIHRoaXMuX3ZlY3RvclVybDtcbiAgdGhpcy5fcHJvamVjdFR5cGU7XG4gIC8vIGNvbnRhaW4gYXJyYXkgb2Ygb2JqZWN0IHNldHRlcihhcyBrZXkpLCBrZXkgdG8gdW5ieSAoYXMgdmFsdWUpXG4gIHRoaXMuX3VuQnlLZXlzID0gW107XG4gIC8vIHN0b3JlIHNldHRlciBrZXlzIGV2ZW50IGxpc3Rlcm5lclxuICB0aGlzLnNldHRlcktleXMgPSBbXTtcbiAgLy8gZXZlbnRzXG4gIHRoaXMuX2V2ZW50cyA9IHtcbiAgICBsYXllcjoge1xuICAgICAgc3RhcnRfZWRpdGluZzoge1xuICAgICAgICBiZWZvcmU6IHt9LFxuICAgICAgICBhZnRlcjoge31cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBTdG9yZSB1bmlxdWUgZmllbGRzIHZhbHVlIGZvciBlYWNoIGxheWVyXG4gICAqIEB0eXBlIHt7bW9kZTogc3RyaW5nLCBtZXNzYWdlczogdW5kZWZpbmVkLCBtb2RhbDogYm9vbGVhbiwgY2I6IHtlcnJvcjogdW5kZWZpbmVkLCBkb25lOiB1bmRlZmluZWR9fX1cbiAgICovXG4gIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzID0ge307XG5cbiAgdGhpcy5zYXZlQ29uZmlnID0ge1xuICAgIG1vZGU6IFwiZGVmYXVsdFwiLCAvLyBkZWZhdWx0LCBhdXRvc2F2ZVxuICAgIG1vZGFsOiBmYWxzZSxcbiAgICBtZXNzYWdlczogdW5kZWZpbmVkLCAvLyBvYmplY3QgdG8gc2V0IGN1c3RvbSBtZXNzYWdlXG4gICAgY2I6IHtcbiAgICAgIGRvbmU6IHVuZGVmaW5lZCwgLy8gZnVuY3Rpb24gYWZ0ZXIgY29tbWl0IGNoYW5nZSBkb25lXG4gICAgICBlcnJvcjogdW5kZWZpbmVkIC8vIGZ1bmN0aW9uIGFmdGVyIGNvbW1pdCBjaGVuZ2VzIGVycm9yXG4gICAgfVxuICB9O1xuXG4gIC8vYXBwbGljYXRpb24gZWRpdGluZyBjb250cmFpbnRzXG4gIC8vVXNlZnVsdCBpZiBzb21lIHBsZ2luIG9yIGNhc2Ugd2UgbmVlZCB0byBzZXR1cCBhIGVkaXRpbmcgY29udHJhaW5zIHN1Y2ggYXMgbGF5ZXIsIGZpbHRlciB0byBnZXQgZmVhdHVyZXNcbiAgdGhpcy5hcHBsaWNhdGlvbkVkaXRpbmdDb25zdHJhaW50cyA9IHtcbiAgICB0b29sYm94ZXM6IHt9LFxuICAgIHNob3dUb29sYm94ZXNFeGNsdWRlZDogdHJ1ZVxuICB9O1xuXG4gIC8vIHN0YXRlIG9mIGVkaXRpbmdcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBvcGVuOiBmYWxzZSwgLy8gY2hlY2sgaWYgcGFuZWwgaXMgb3BlbiBvciBub3RcbiAgICB0b29sYm94ZXM6IFtdLFxuICAgIHRvb2xib3hzZWxlY3RlZDogbnVsbCxcbiAgICB0b29sYm94aWRhY3RpdmV0b29sOiBudWxsLFxuICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgcmVsYXRpb25zOiBbXSxcbiAgfTtcblxuICAvKipcbiAgICovXG4gIHRoaXMubG9hZExheWVyc0ZlYXR1cmVzVG9SZXN1bHRXaGVuQ2xvc2VFZGl0aW5nID0ge1xuICAgIC8vIEtFWSBMQVlFUklELCBWQUxVRVMgQVJSQVkgT0YgRkVBVFVSRSBGSUQgQ0hBTkdFUyBPUiBBRERFRFxuICB9O1xuXG4gIHRoaXMuX2xheWVyc19pbl9lcnJvciA9IGZhbHNlO1xuICAvL21hcHNlcnZpY2VcbiAgdGhpcy5fbWFwU2VydmljZSA9IEdVSS5nZXRTZXJ2aWNlKCdtYXAnKTtcbiAgLy9zZXQgbWFwY29udHJvbCB0b2dnbGUgZXZlbnRcbiAgdGhpcy5tYXBDb250cm9sVG9nZ2xlRXZlbnRIYW5kbGVyID0gZXZ0ID0+e1xuICAgIGlmIChldnQudGFyZ2V0LmlzVG9nZ2xlZCgpICYmIGV2dC50YXJnZXQuaXNDbGlja01hcCgpKXtcbiAgICAgIGxldCB0b29sYm94c2VsZWN0ZWQgPSB0aGlzLnN0YXRlLnRvb2xib3hzZWxlY3RlZDtcbiAgICAgIHRvb2xib3hzZWxlY3RlZCAmJiB0b29sYm94c2VsZWN0ZWQuZ2V0QWN0aXZlVG9vbCgpICYmIHRvb2xib3hzZWxlY3RlZC5zdG9wQWN0aXZlVG9vbCgpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9tYXBTZXJ2aWNlLm9uKE1BUENPTlRST0xfVE9HR0xFRF9FVkVOVF9OQU1FLCB0aGlzLm1hcENvbnRyb2xUb2dnbGVFdmVudEhhbmRsZXIpO1xuICAvL3BsdWdpbiBjb21wb25lbnRzXG4gIHRoaXMuX2Zvcm1Db21wb25lbnRzID0ge307XG4gIHRoaXMuX3N1YnNjcmliZXJzID0ge307XG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZz17fSkge1xuICAgIHRoaXMuX3ZlY3RvclVybCA9IGNvbmZpZy52ZWN0b3J1cmw7XG4gICAgdGhpcy5fcHJvamVjdFR5cGUgPSBjb25maWcucHJvamVjdF90eXBlO1xuICAgIHRoaXMuX2xheWVyc3N0b3JlID0gbmV3IExheWVyc1N0b3JlKHtcbiAgICAgIGlkOiAnZWRpdGluZycsXG4gICAgICBxdWVyeWFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgLy9hZGQgZWRpdGluZyBsYXllciBzdG9yZSB0byBtYXBzdG9yZXJlZ2lzdHJ5XG4gICAgTWFwTGF5ZXJzU3RvcmVSZWdpc3RyeS5hZGRMYXllcnNTdG9yZSh0aGlzLl9sYXllcnNzdG9yZSk7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5fZWRpdGFibGVMYXllcnMgPSB7fTtcbiAgICB0aGlzLl90b29sYm94ZXMgPSBbXTtcbiAgICB0aGlzLnN0YXRlLnRvb2xib3hlcyA9IFtdO1xuICAgIGxldCBsYXllcnMgPSB0aGlzLl9nZXRFZGl0YWJsZUxheWVyc0Zyb21DYXRhbG9nKCk7XG4gICAgY29uc3QgRWRpdGFibGVMYXllcnNQcm9taXNlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgbGF5ZXJzKSB7XG4gICAgICAvLyBnZXRMYXllckZvckVkaXRpbmcgcmV0dXJuIGEgcHJvbWlzZSB3aXRoIGxheWVyIHVzZWZ1bHQgZm9yIGVkaXRpbmdcbiAgICAgIEVkaXRhYmxlTGF5ZXJzUHJvbWlzZXMucHVzaChsYXllci5nZXRMYXllckZvckVkaXRpbmcoe1xuICAgICAgICB2ZWN0b3J1cmw6IHRoaXMuX3ZlY3RvclVybCxcbiAgICAgICAgcHJvamVjdF90eXBlOiB0aGlzLl9wcm9qZWN0VHlwZVxuICAgICAgfSkpXG4gICAgfVxuICAgIFByb21pc2UuYWxsU2V0dGxlZChFZGl0YWJsZUxheWVyc1Byb21pc2VzKVxuICAgICAgLnRoZW4oZWRpdGFibGVMYXllcnMgID0+IHtcbiAgICAgICAgZWRpdGFibGVMYXllcnMuZm9yRWFjaChwcm9taXNlID0+IHtcbiAgICAgICAgICBjb25zdCB7c3RhdHVzLCB2YWx1ZX0gPSBwcm9taXNlO1xuICAgICAgICAgIGlmIChzdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRhYmxlTGF5ZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGxheWVySWQgPSBlZGl0YWJsZUxheWVyLmdldElkKCk7XG4gICAgICAgICAgICB0aGlzLl9lZGl0YWJsZUxheWVyc1tsYXllcklkXSA9IGVkaXRhYmxlTGF5ZXI7XG4gICAgICAgICAgICB0aGlzLl9hdHRhY2hMYXllcldpZGdldHNFdmVudChlZGl0YWJsZUxheWVyKTtcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25zW2xheWVySWRdID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgdGhpcy5fbGF5ZXJzX2luX2Vycm9yID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB0aGlzLl9yZWFkeSgpO1xuICAgIH0pXG4gIH07XG4gIHRoaXMuX3JlYWR5ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWdpc3RlckZlYXR1cmVzTG9ja0J5T3RoZXJVc2VyU2V0dGVySGFuZGxlcigpO1xuICAgIC8vIHNldCB0b29sYm94IGNvbG9yc1xuICAgIHRoaXMuc2V0TGF5ZXJzQ29sb3IoKTtcbiAgICAvLyBhZnRlciBhZGQgbGF5ZXJzIHRvIGxheWVyc3RvcmVcbiAgICB0aGlzLl9sYXllcnNzdG9yZS5hZGRMYXllcnModGhpcy5nZXRMYXllcnMoKSk7XG4gICAgLy8gY3JlYXRlIHRvb2xib3hlc1xuICAgIHRoaXMuX2J1aWxkVG9vbEJveGVzKCk7XG4gICAgLy8gY3JlYXRlIGEgZGVwZW5kZW5jaWVzIHRyZWVcbiAgICB0aGlzLl9jcmVhdGVUb29sQm94RGVwZW5kZW5jaWVzKCk7XG4gICAgLy9zZXRBcGlcbiAgICB0aGlzLnNldEFwaSh7XG4gICAgICBhcGk6IG5ldyBBUEkoe1xuICAgICAgICBzZXJ2aWNlOnRoaXNcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgdGhpcy5yZWdpc3RlclJlc3VsdEVkaXRpbmdBY3Rpb24oKTtcbiAgICB0aGlzLmVtaXQoJ3JlYWR5Jyk7XG4gIH1cbn1cblxuaW5oZXJpdChFZGl0aW5nU2VydmljZSwgUGx1Z2luU2VydmljZSk7XG5cbmNvbnN0IHByb3RvID0gRWRpdGluZ1NlcnZpY2UucHJvdG90eXBlO1xuXG4vL2FwaSBtZXRob2RzXG5cbnByb3RvLmdldEFwcFN0YXRlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIEFwcGxpY2F0aW9uU3RhdGU7XG59O1xuXG5wcm90by5nZXRGb3JtQ29tcG9uZW50c0J5SWQgPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIHJldHVybiB0aGlzLl9mb3JtQ29tcG9uZW50c1tsYXllcklkXSB8fCBbXTtcbn07XG5cbnByb3RvLmdldEZvcm1Db21wb25lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9mb3JtQ29tcG9uZW50cztcbn07XG5cbnByb3RvLmFkZEZvcm1Db21wb25lbnRzID0gZnVuY3Rpb24oe2xheWVySWQsIGNvbXBvbmVudHM9IFtdfSA9IHt9KSB7XG4gIGlmICghdGhpcy5fZm9ybUNvbXBvbmVudHNbbGF5ZXJJZF0pXG4gICAgdGhpcy5fZm9ybUNvbXBvbmVudHNbbGF5ZXJJZF0gPSBbXTtcbiAgZm9yIChsZXQgaT0wOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaV07XG4gICAgdGhpcy5fZm9ybUNvbXBvbmVudHNbbGF5ZXJJZF0ucHVzaChjb21wb25lbnQpXG4gIH1cbn07XG5cbnByb3RvLmdldFNlc3Npb24gPSBmdW5jdGlvbih7bGF5ZXJJZH0gPSB7fSkge1xuICBjb25zdCB0b29sYm94ID0gdGhpcy5nZXRUb29sQm94QnlJZChsYXllcklkKTtcbiAgcmV0dXJuIHRvb2xib3guZ2V0U2Vzc2lvbigpO1xufTtcblxucHJvdG8uZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uKHtsYXllcklkfSA9IHt9KSB7XG4gIGNvbnN0IHRvb2xib3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKGxheWVySWQpO1xuICBjb25zdCB0b29sID0gdG9vbGJveC5nZXRBY3RpdmVUb29sKCk7XG4gIHJldHVybiB0b29sLmdldEZlYXR1cmUoKTtcbn07XG5cbnByb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbmMpIHtcbiAgaWYgKCF0aGlzLl9zdWJzY3JpYmVyc1tldmVudF0pIHRoaXMuX3N1YnNjcmliZXJzW2V2ZW50XSA9IFtdO1xuICBpZiAoIXRoaXMuX3N1YnNjcmliZXJzW2V2ZW50XS5maW5kKHN1YnNjcmliZSA9PiBzdWJzY3JpYmUgPT09IGZuYykpIHRoaXMuX3N1YnNjcmliZXJzW2V2ZW50XS5wdXNoKGZuYyk7XG4gIHJldHVybiBmbmM7XG59O1xuXG5wcm90by51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbmMpIHtcbiAgdGhpcy5fc3Vic2NyaWJlcnNbZXZlbnRdID0gdGhpcy5fc3Vic2NyaWJlcnNbZXZlbnRdLmZpbHRlcihzdWJzY3JpYmUgPT4gc3Vic2NyaWJlICE9PSBmbmMpO1xufTtcblxuLy8gRU5EIEFQSVxuXG5wcm90by5yZWdpc3RlckZlYXR1cmVzTG9ja0J5T3RoZXJVc2VyU2V0dGVySGFuZGxlciA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuZ2V0TGF5ZXJzKCkuZm9yRWFjaChlZGl0aW5nTGF5ZXIgPT57XG4gICAgZWRpdGluZ0xheWVyLmdldEZlYXR1cmVzU3RvcmUoKS5vbmFmdGVyKCdmZWF0dXJlc0xvY2tlZEJ5T3RoZXJVc2VyJywgKCkgPT4ge1xuICAgICAgR1VJLnNob3dVc2VyTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgc3VidGl0bGU6IGVkaXRpbmdMYXllci5nZXROYW1lKCkudG9VcHBlckNhc2UoKSxcbiAgICAgICAgbWVzc2FnZTogJ3BsdWdpbnMuZWRpdGluZy5tZXNzYWdlcy5mZWF0dXJlc2xvY2tieW90aGVydXNlcidcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgcmVzdWx0IGVkaXRpbmcgYWN0aW9uXG4gKi9cbnByb3RvLnJlZ2lzdGVyUmVzdWx0RWRpdGluZ0FjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHF1ZXJ5UmVzdWx0c1NlcnZpY2UgPSBHVUkuZ2V0U2VydmljZSgncXVlcnlyZXN1bHRzJyk7XG4gIHRoaXMuc2V0dGVyS2V5cy5wdXNoKHtcbiAgICBzZXR0ZXI6ICdlZGl0RmVhdHVyZScsXG4gICAga2V5OiBxdWVyeVJlc3VsdHNTZXJ2aWNlLm9uYWZ0ZXIoJ2VkaXRGZWF0dXJlJywgKHtsYXllciwgZmVhdHVyZX0pID0+IHtcbiAgICAgIHRoaXMuZWRpdFJlc3VsdExheWVyRmVhdHVyZSh7XG4gICAgICAgIGxheWVyLFxuICAgICAgICBmZWF0dXJlXG4gICAgICB9KVxuICAgIH0pXG4gIH0pO1xufTtcblxucHJvdG8udW5yZWdpc3RlclJlc3VsdEVkaXRpbmdBY3Rpb24gPSBmdW5jdGlvbigpe1xuICBjb25zdCBxdWVyeVJlc3VsdHNTZXJ2aWNlID0gR1VJLmdldFNlcnZpY2UoJ3F1ZXJ5cmVzdWx0cycpO1xuICB0aGlzLnNldHRlcktleXMuZm9yRWFjaCgoe3NldHRlciwga2V5fSkgPT4gcXVlcnlSZXN1bHRzU2VydmljZS51bihzZXR0ZXIsIGtleSkpO1xufTtcblxuLyoqXG4gKiBmdW5jdGlvbiB0byBzdGFydCB0byBlZGl0IGZlYXR1cmUgc2VsZWN0ZWQgZnJvbSByZXN1bHRzO1xuICpcbiAqL1xucHJvdG8uZWRpdFJlc3VsdExheWVyRmVhdHVyZSA9IGZ1bmN0aW9uKHtsYXllciwgZmVhdHVyZX09e30pe1xuICAvLyBnZXQgTGF5ZXIgSWRcbiAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmlkO1xuICAvLyBnZXQgRmVhdHVyZSBpZFxuICBjb25zdCBmZWF0dXJlSWQgPSBmZWF0dXJlLmF0dHJpYnV0ZXNbRzNXX0ZJRF07XG4gIHRoaXMuZ2V0VG9vbEJveGVzKCkuZm9yRWFjaCh0b29sYm94ID0+IHRvb2xib3guc2V0U2hvdyh0b29sYm94LmdldElkKCkgPT09IGxheWVySWQpKTtcbiAgdGhpcy5nZXRQbHVnaW4oKS5zaG93RWRpdGluZ1BhbmVsKCk7XG4gIGNvbnN0IHRvb2xCb3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKGxheWVySWQpO1xuICAvL2dldCBzY2FsZSBjb25zdHJhaW50IGZyb20gc2V0dGluZyBsYXllclxuICBjb25zdCB7c2NhbGV9ID0gdG9vbEJveC5nZXRFZGl0aW5nQ29uc3RyYWludHMoKTtcbiAgLy8gaWYgZmVhdHVyZSBoYXMgZ2VvbWV0cnlcbiAgaWYgKGZlYXR1cmUuZ2VvbWV0cnkpIHtcbiAgICAodHlwZW9mIHNjYWxlICE9PSBcInVuZGVmaW5lZFwiKSAmJiB0aGlzLl9tYXBTZXJ2aWNlLmdldE1hcCgpLm9uY2UoJ21vdmVlbmQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYXBVbml0cyA9IHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwVW5pdHMoKTtcbiAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwKCk7XG4gICAgICAvL2NoZWNrIGN1cnJlbnQgc2NhbGUgYWZ0ZXIgem9vbSB0byBmZWF0dXJlXG4gICAgICBjb25zdCBjdXJyZW50U2NhbGUgPSBwYXJzZUludChnZXRTY2FsZUZyb21SZXNvbHV0aW9uKG1hcC5nZXRWaWV3KCkuZ2V0UmVzb2x1dGlvbigpLCBtYXBVbml0cykpO1xuICAgICAgLy8gaWYgY3VycmVudFNjYWxlIGlzIG1vcmUgdGhhdCBzY2FsZSBjb25zdHJhaW50IHNldCBieSBsYXllciBlZGl0aW5nXG4gICAgICAvLyBuZWVkIHRvIGdvIHRvIHNjYWxlIHNldHRpbmcgYnkgbGF5ZXIgZWRpdGluZyBjb25zdHJhaW50XG4gICAgICBpZiAoY3VycmVudFNjYWxlID4gc2NhbGUpIHtcbiAgICAgICAgY29uc3QgcmVzb2x1dGlvbiA9IGdldFJlc29sdXRpb25Gcm9tU2NhbGUoc2NhbGUsIG1hcFVuaXRzKTtcbiAgICAgICAgbWFwLmdldFZpZXcoKS5zZXRSZXNvbHV0aW9uKHJlc29sdXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8vIHN0YXJ0IHRvb2xib3hcbiAgdG9vbEJveC5zdGFydCh7XG4gICAgZmlsdGVyOiB7XG4gICAgICBmaWRzOiBmZWF0dXJlSWQgLy8gZmlsdGVyIGJ5IGZpZCAoZmVhdHVyZSBpZClcbiAgICB9XG4gIH0pXG4gICAgLnRoZW4oKHtmZWF0dXJlcz1bXX0pID0+IHtcbiAgICAgIC8vY29uc3QgZmVhdHVyZSA9IGZlYXR1cmVzLmZpbmQoZmVhdHVyZSA9PiBmZWF0dXJlLmdldElkKCkgPT0gZmVhdHVyZUlkKTtcbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIE5lZWQgdG8gZ2V0IGZlYXR1cmUgZnJvbSBFZGl0aW5nIGxheWVyIHNvdXJjZSBiZWNhdXNlIGl0IGhhcyBhIHN0eWxlIGxheWVyXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGZlYXR1cmUgPSB0b29sQm94LmdldExheWVyKCkuZ2V0RWRpdGluZ0xheWVyKCkuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKS5maW5kKGZlYXR1cmUgPT4gZmVhdHVyZS5nZXRJZCgpID09IGZlYXR1cmVJZCk7XG4gICAgICBpZiAoZmVhdHVyZSl7XG4gICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSAmJiB0aGlzLl9tYXBTZXJ2aWNlLnpvb21Ub0dlb21ldHJ5KGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSk7XG4gICAgICAgIHRvb2xCb3guc2V0U2VsZWN0ZWQodHJ1ZSk7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSB0b29sQm94LmdldFNlc3Npb24oKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZFRvb2xib3godG9vbEJveCk7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2VkaXRub3BpY2ttYXBmZWF0dXJlYXR0cmlidXRlc3dvcmtmbG93Jyk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgaW5wdXRzOiB7XG4gICAgICAgICAgICBsYXllcjogdG9vbEJveC5nZXRMYXllcigpLFxuICAgICAgICAgICAgZmVhdHVyZXM6IFtmZWF0dXJlXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZWRpdEZlYXR1cmVXb3JrRmxvdyA9IG5ldyB3b3JrZmxvdyh7XG4gICAgICAgICAgcnVuT25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgZWRpdEZlYXR1cmVXb3JrRmxvdy5zdGFydChvcHRpb25zKVxuICAgICAgICAgIC50aGVuKCgpID0+IHNlc3Npb24uc2F2ZSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLnNhdmVDaGFuZ2UoKSkpXG4gICAgICAgICAgLmZhaWwoKCk9PiBzZXNzaW9uLnJvbGxiYWNrKCkpXG4gICAgICB9XG4gICAgfSlcbiAgICAuZmFpbChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcbn07XG5cbi8qKlxuICpcbiAqL1xucHJvdG8uZGlzYWJsZU1hcENvbnRyb2xzQ29uZmxpY3QgPSBmdW5jdGlvbihib29sPXRydWUpIHtcbiAgdGhpcy5fbWFwU2VydmljZS5kaXNhYmxlQ2xpY2tNYXBDb250cm9scyhib29sKTtcbn07XG5cbi8qKlxuICogVXNlZCBvbiBjb21taXQgaWYgbm8gdG9vbGJveCBpcyBwYXNzZWQgYXMgcGFyYW1ldGVyXG4gKiBAcGFyYW0gdG9vbGJveFxuICovXG5wcm90by5zZXRTZWxlY3RlZFRvb2xib3ggPSBmdW5jdGlvbih0b29sYm94KXtcbiAgdGhpcy5zdGF0ZS50b29sYm94c2VsZWN0ZWQgPSB0b29sYm94O1xufTtcblxuLyoqXG4gKiBcbiAqL1xucHJvdG8uZ2V0VG9vbGJveFNlbGVjdGVkID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuc3RhdGUudG9vbGJveHNlbGVjdGVkO1xufTtcblxuLyoqXG4gKiBcbiAqL1xuXG4vLyBjcmVhdGUgYSBuZXcgZmVhdHVyZVxucHJvdG8uYWRkTmV3RmVhdHVyZSA9IGZ1bmN0aW9uKGxheWVySWQsIG9wdGlvbnM9e30pe1xuICBjb25zdCB7Z2VvbWV0cnksIHByb3BlcnRpZXN9ID0gb3B0aW9ucztcbiAgY29uc3QgZmVhdHVyZSA9IG5ldyBGZWF0dXJlKCk7XG4gIGdlb21ldHJ5ICYmIGZlYXR1cmUuc2V0R2VvbWV0cnkobmV3IG9sLmdlb21bZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKTtcbiAgZmVhdHVyZS5zZXRQcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICBmZWF0dXJlLnNldFRlbXBvcmFyeUlkKCk7XG4gIGNvbnN0IHRvb2xib3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKGxheWVySWQpO1xuICBjb25zdCBlZGl0aW5nTGF5ZXIgPSB0b29sYm94LmdldExheWVyKCkuZ2V0RWRpdGluZ0xheWVyKCk7XG4gIGNvbnN0IHNlc3Npb24gPSB0b29sYm94LmdldFNlc3Npb24oKTtcbiAgZWRpdGluZ0xheWVyLmdldFNvdXJjZSgpLmFkZEZlYXR1cmUoZmVhdHVyZSk7XG4gIHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlLCBmYWxzZSk7XG4gIHJldHVybiBmZWF0dXJlO1xufTtcblxucHJvdG8uZ2V0TGF5ZXJzSW5FcnJvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbGF5ZXJzX2luX2Vycm9yO1xufTtcblxucHJvdG8uZ2V0TWFwU2VydmljZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbWFwU2VydmljZTtcbn07XG5cbnByb3RvLl9pbml0T2ZmTGluZUl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gIGZvciAoY29uc3QgaWQgaW4gT0ZGTElORV9JVEVNUykge1xuICAgICF0aGlzLmdldE9mZmxpbmVJdGVtKE9GRkxJTkVfSVRFTVNbaWRdKSAmJiBBcHBsaWNhdGlvblNlcnZpY2Uuc2V0T2ZmbGluZUl0ZW0oT0ZGTElORV9JVEVNU1tpZF0pO1xuICB9XG59O1xuXG5wcm90by5faGFuZGxlT2ZmbGluZUNoYW5nZXNCZWZvcmVTYXZlID0gZnVuY3Rpb24oZGF0YSkge1xuICBjb25zdCBjaGFuZ2VzID0gQXBwbGljYXRpb25TZXJ2aWNlLmdldE9mZmxpbmVJdGVtKE9GRkxJTkVfSVRFTVMuQ0hBTkdFUyk7XG4gIGNvbnN0IGFwcGx5Q2hhbmdlcyA9ICh7bGF5ZXJJZCwgY3VycmVudCwgcHJldmlvdXN9KT0+IHtcbiAgICBjdXJyZW50W2xheWVySWRdLmFkZCA9IFsuLi5wcmV2aW91c1tsYXllcklkXS5hZGQsIC4uLmN1cnJlbnRbbGF5ZXJJZF0uYWRkXTtcbiAgICBjdXJyZW50W2xheWVySWRdLmRlbGV0ZSA9IFsuLi5wcmV2aW91c1tsYXllcklkXS5kZWxldGUsIC4uLmN1cnJlbnRbbGF5ZXJJZF0uZGVsZXRlXTtcbiAgICBwcmV2aW91c1tsYXllcklkXS51cGRhdGUuZm9yRWFjaCh1cGRhdGVJdGVtID0+IHtcbiAgICAgIGNvbnN0IHtpZH0gPSB1cGRhdGVJdGVtO1xuICAgICAgY29uc3QgZmluZCA9IGN1cnJlbnRbbGF5ZXJJZF0udXBkYXRlLmZpbmQodXBkYXRlSXRlbSA9PiB1cGRhdGVJdGVtLmlkID09PSBpZCk7XG4gICAgICAhZmluZCAmJiBjdXJyZW50W2xheWVySWRdLnVwZGF0ZS51bnNoaWZ0KHVwZGF0ZUl0ZW0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGxvY2tpZHMgPSBwcmV2aW91c1tsYXllcklkXS5sb2NraWRzfHwgW107XG4gICAgbG9ja2lkcy5mb3JFYWNoKGxvY2tpZEl0ZW0gPT4ge1xuICAgICAgY29uc3Qge2ZlYXR1cmVpZH0gPSBsb2NraWRJdGVtO1xuICAgICAgY29uc3QgZmluZCA9IGN1cnJlbnRbbGF5ZXJJZF0ubG9ja2lkcy5maW5kKGxvY2tpZEl0ZW0gPT4gbG9ja2lkSXRlbS5mZWF0dXJlaWQgPT09IGZlYXR1cmVpZCk7XG4gICAgICAhZmluZCAmJiBjdXJyZW50W2xheWVySWRdLnVwZGF0ZS51bnNoaWZ0KGxvY2tpZEl0ZW0pO1xuICAgIH0pXG4gIH07XG4gIGZvciAoY29uc3QgbGF5ZXJJZCBpbiBjaGFuZ2VzKSB7XG4gICAgLy8gY2hlY2sgaWYgcHJldmlvdXMgY2hhbmdlcyBhcmUgbWFkZSBpbiB0aGUgc2FtZSBsYXllciBvciBpbiByZWxhdGlvbmxheWVyIG9mIGN1cnJlbnRcbiAgICBjb25zdCBjdXJyZW50ID0gZGF0YVtsYXllcklkXSA/IGRhdGEgOlxuICAgICAgZGF0YVtPYmplY3Qua2V5cyhkYXRhKVswXV0ucmVsYXRpb25zW2xheWVySWRdID9cbiAgICAgICAgZGF0YVtPYmplY3Qua2V5cyhkYXRhKVswXV0ucmVsYXRpb25zIDogbnVsbDtcbiAgICBpZiAoY3VycmVudClcbiAgICAgIGFwcGx5Q2hhbmdlcyh7XG4gICAgICAgIGxheWVySWQsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHByZXZpb3VzOiBjaGFuZ2VzXG4gICAgICB9KTtcbiAgICBlbHNlIHtcbiAgICAgIC8vIGNoZWNrIGlmIGluIHRoZSBsYXN0IGNoYW5nZXNcbiAgICAgIGNvbnN0IGN1cnJlbnRMYXllcklkID0gT2JqZWN0LmtleXMoZGF0YSlbMF07XG4gICAgICBjb25zdCByZWxhdGlvbnNJZHMgPSBPYmplY3Qua2V5cyhjaGFuZ2VzW2xheWVySWRdLnJlbGF0aW9ucyk7XG4gICAgICBpZiAocmVsYXRpb25zSWRzLmxlbmd0aCkge1xuICAgICAgICBpZiAocmVsYXRpb25zSWRzLmluZGV4T2YoY3VycmVudExheWVySWQpICE9PSAtMSkge1xuICAgICAgICAgIGFwcGx5Q2hhbmdlcyh7XG4gICAgICAgICAgICBsYXllcklkOiBjdXJyZW50TGF5ZXJJZCxcbiAgICAgICAgICAgIGN1cnJlbnQ6IGRhdGEsXG4gICAgICAgICAgICBwcmV2aW91czogY2hhbmdlc1tsYXllcklkXS5yZWxhdGlvbnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGFuZ2VzW2xheWVySWRdLnJlbGF0aW9uc1tjdXJyZW50TGF5ZXJJZF0gPSBkYXRhW2N1cnJlbnRMYXllcklkXTtcbiAgICAgICAgICBkYXRhID0gY2hhbmdlcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGRhdGFbbGF5ZXJJZF0gPSBjaGFuZ2VzW2xheWVySWRdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YTtcbn07XG5cbnByb3RvLnNhdmVPZmZsaW5lSXRlbSA9IGZ1bmN0aW9uKHtpZCwgZGF0YX09e30pIHtcbiAgaWYgKGlkID09PSBPRkZMSU5FX0lURU1TLkNIQU5HRVMpIGRhdGEgPSB0aGlzLl9oYW5kbGVPZmZsaW5lQ2hhbmdlc0JlZm9yZVNhdmUoZGF0YSk7XG4gIHJldHVybiBBcHBsaWNhdGlvblNlcnZpY2Uuc2V0T2ZmbGluZUl0ZW0oaWQsIGRhdGEpO1xufTtcblxucHJvdG8uc2V0T2ZmbGluZUl0ZW0gPSBmdW5jdGlvbihpZCwgZGF0YSl7XG4gIEFwcGxpY2F0aW9uU2VydmljZS5zZXRPZmZsaW5lSXRlbShpZCwgZGF0YSk7XG59O1xuXG5wcm90by5nZXRPZmZsaW5lSXRlbSA9IGZ1bmN0aW9uKGlkKXtcbiAgcmV0dXJuIEFwcGxpY2F0aW9uU2VydmljZS5nZXRPZmZsaW5lSXRlbShpZCk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFscmVhZCBoYXZlIG9mZiBsaW5lcyBjaGFuZ2VzXG4gKiBAcGFyYW0gbW9kYWxcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fVxuICovXG5wcm90by5jaGVja09mZmxpbmVDaGFuZ2VzID0gZnVuY3Rpb24oe21vZGFsPXRydWUsIHVubG9jaz1mYWxzZX09e30pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBjaGFuZ2VzID0gQXBwbGljYXRpb25TZXJ2aWNlLmdldE9mZmxpbmVJdGVtKE9GRkxJTkVfSVRFTVMuQ0hBTkdFUyk7XG4gICAgLy8gaWYgZmluZCBjaGFuZ2VzIG9mZmxpbmUgcHJldmlvdXNseVxuICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgY29uc3QgbGF5ZXJJZHMgPSBbXTtcbiAgICAgIC8vRk9SQ0UgVE8gV0FJVCBPVEhFUldJU0UgU1RJTEwgT0ZGIExJTkVcbiAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgZm9yIChjb25zdCBsYXllcklkIGluIGNoYW5nZXMpIHtcbiAgICAgICAgICBsYXllcklkcy5wdXNoKGxheWVySWQpO1xuICAgICAgICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKGxheWVySWQpO1xuICAgICAgICAgIGNvbnN0IGNvbW1pdEl0ZW1zID0gY2hhbmdlc1tsYXllcklkXTtcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuY29tbWl0KHtcbiAgICAgICAgICAgIHRvb2xib3gsXG4gICAgICAgICAgICBjb21taXRJdGVtcyxcbiAgICAgICAgICAgIG1vZGFsXG4gICAgICAgICAgfSkpXG4gICAgICAgIH1cbiAgICAgICAgJC53aGVuLmFwcGx5KHRoaXMsIHByb21pc2VzKVxuICAgICAgICAgIC50aGVuKCgpID0+cmVzb2x2ZSgpKVxuICAgICAgICAgIC5mYWlsKGVycm9yPT5yZWplY3QoZXJyb3IpKVxuICAgICAgICAgIC5hbHdheXMoKCkgPT57XG4gICAgICAgICAgICB1bmxvY2sgJiYgbGF5ZXJJZHMuZm9yRWFjaChsYXllcklkID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5nZXRMYXllckJ5SWQobGF5ZXJJZCkudW5sb2NrKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gYWx3YXlzIHJlc2V0IGl0ZW1zIHRvIG51bGxcbiAgICAgICAgICAgIHRoaXMuc2V0T2ZmbGluZUl0ZW0oT0ZGTElORV9JVEVNUy5DSEFOR0VTKTtcbiAgICAgICAgICB9KVxuICAgICAgfSwgMTAwMClcblxuICAgIH1cbiAgfSlcbn07XG5cbi8qKlxuICogY2FsbGVkIGJ5IEVkaXRuZyBQYW5lbCBvbiBjcmVhdGlvbiB0aW1lXG4gKi9cbnByb3RvLnJlZ2lzdGVyT25MaW5lT2ZmTGluZUV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGluIGNhc2Ugb2Ygc3RhcnRpbmcgcGFuZWwgZWRpdGluZyBjaGVjayBpZiB0aGVyZSBhcmFlIHNvbWUgY2hlbmdpbmcgcGVuZGluZ1xuICAvLyBpZiB0cnVlIGkgaGF2ZSB0byBjb21taXQgY2hhbmhlcyBvbiBzZXJ2ZXIgYW5kIHVsb2NrIGFsbCBsYXllcnMgZmVhdHVyZXMgdGVtcG9yYXJ5IGxvY2tlZFxuICBpZiAoQXBwbGljYXRpb25TdGF0ZS5vbmxpbmUpIHRoaXMuY2hlY2tPZmZsaW5lQ2hhbmdlcyh7XG4gICAgdW5sb2NrOiB0cnVlXG4gIH0pO1xuICBjb25zdCBvZmZsaW5lS2V5ID0gIEFwcGxpY2F0aW9uU2VydmljZS5vbmFmdGVyKCdvZmZsaW5lJywgKCk9Pnt9KTtcbiAgY29uc3Qgb25saW5lS2V5ID0gQXBwbGljYXRpb25TZXJ2aWNlLm9uYWZ0ZXIoJ29ubGluZScsICgpID0+e1xuICAgIHRoaXMuY2hlY2tPZmZsaW5lQ2hhbmdlcyh7XG4gICAgICBtb2RhbDpmYWxzZVxuICAgIH0pLnRoZW4oKCk9PntcbiAgICB9KS5jYXRjaChlcnJvciA9PkdVSS5ub3RpZnkuZXJyb3IoZXJyb3IpKVxuICB9KTtcblxuICB0aGlzLl91bkJ5S2V5cy5wdXNoKHtcbiAgICBvd25lciA6IEFwcGxpY2F0aW9uU2VydmljZSxcbiAgICBzZXR0ZXI6ICdvZmZsaW5lJyxcbiAgICBrZXk6IG9mZmxpbmVLZXlcbiAgfSk7XG5cbiAgdGhpcy5fdW5CeUtleXMucHVzaCh7XG4gICAgb3duZXIgOiBBcHBsaWNhdGlvblNlcnZpY2UsXG4gICAgc2V0dGVyOiAnb25saW5lJyxcbiAgICBrZXk6IG9ubGluZUtleVxuICB9KTtcblxufTtcblxucHJvdG8udW5yZWdpc3Rlck9uTGluZU9mZkxpbmVFdmVudCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnVucmVnaXN0ZXJTZXR0ZXJzRXZlbnRzKFsnb25saW5lJywgJ29mZmxpbmUnXSlcbn07XG5cbnByb3RvLnVucmVnaXN0ZXJTZXR0ZXJzRXZlbnRzID0gZnVuY3Rpb24oc2V0dGVycz1bXSkge1xuICB0aGlzLl91bkJ5S2V5cy5mb3JFYWNoKHJlZ2lzdGVyZWQgPT4ge1xuICAgIGNvbnN0IHtvd25lciwgc2V0dGVyLCBrZXl9ID0gcmVnaXN0ZXJlZDtcbiAgICBvd25lci51bihzZXR0ZXIsIGtleSk7XG4gIH0pXG59O1xuXG5wcm90by5maXJlRXZlbnQgPSBmdW5jdGlvbihldmVudCwgb3B0aW9ucz17fSkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnNbZXZlbnRdICYmIHRoaXMuX3N1YnNjcmliZXJzW2V2ZW50XS5mb3JFYWNoKGZuYyA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGZuYyhvcHRpb25zKTtcbiAgICAgIHJlc3BvbnNlICYmIHJlc3BvbnNlLm9uY2UgJiYgdGhpcy51bnN1YnNjcmliZShldmVudCwgZm5jKTtcbiAgICB9KTtcbiAgICByZXNvbHZlKCk7XG4gIH0pO1xufTtcblxucHJvdG8uYWN0aXZlUXVlcnlJbmZvID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX21hcFNlcnZpY2UuYWN0aXZlTWFwQ29udHJvbCgncXVlcnknKTtcbn07XG5cbnByb3RvLnNldExheWVyc0NvbG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgY29uc3QgTEFZRVJTX0NPTE9SID0gW1xuICAgIFwiI0M0M0MzOVwiLFxuICAgICcjZDk1ZjAyJyxcbiAgICBcIiM5MTUyMkRcIixcbiAgICBcIiM3Rjk4MDFcIixcbiAgICBcIiMwQjI2MzdcIixcbiAgICBcIiM4RDVBOTlcIixcbiAgICBcIiM4NUI2NkZcIixcbiAgICBcIiM4RDIzMDdcIixcbiAgICBcIiMyQjgzQkFcIixcbiAgICBcIiM3RDhCOEZcIixcbiAgICBcIiNFODcxOERcIixcbiAgICBcIiMxRTQzNENcIixcbiAgICBcIiM5QjRGMDdcIixcbiAgICAnIzFiOWU3NycsXG4gICAgXCIjRkY5RTE3XCIsXG4gICAgJyM3NTcwYjMnLFxuICAgIFwiIzIwNEIyNFwiLFxuICAgIFwiIzk3OTVBM1wiLFxuICAgIFwiI0M5NEY0NFwiLFxuICAgIFwiIzdCOUYzNVwiLFxuICAgIFwiIzM3MzI3NlwiLFxuICAgIFwiIzg4MkQ2MVwiLFxuICAgIFwiI0FBOTAzOVwiLFxuICAgIFwiI0YzOEYzQVwiLFxuICAgIFwiIzcxMjMzM1wiLFxuICAgIFwiIzNCM0E3M1wiLFxuICAgIFwiIzlFNTE2NVwiLFxuICAgIFwiI0E1MUUyMlwiLFxuICAgIFwiIzI2MTMyNlwiLFxuICAgIFwiI2U0NTcyZVwiLFxuICAgIFwiIzI5MzM1Y1wiLFxuICAgIFwiI2YzYTcxMlwiLFxuICAgIFwiIzY2OWJiY1wiLFxuICAgIFwiI2ViNjg0MVwiLFxuICAgIFwiIzRmMzcyZFwiLFxuICAgIFwiI2NjMmEzNlwiLFxuICAgIFwiIzAwYTBiMFwiLFxuICAgIFwiIzAwYjE1OVwiLFxuICAgIFwiI2YzNzczNVwiLFxuICAgIFwiI2ZmYzQyNVwiLFxuICBdO1xuXG4gIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5nZXRMYXllcnMoKSkge1xuICAgICFsYXllci5nZXRDb2xvcigpID8gbGF5ZXIuc2V0Q29sb3IoTEFZRVJTX0NPTE9SLnNwbGljZSgwLDEpWzBdKTogbnVsbDtcbiAgfVxufTtcblxucHJvdG8uX2xheWVyQ2hpbGRyZW5SZWxhdGlvbkluRWRpdGluZyA9IGZ1bmN0aW9uKGxheWVyKSB7XG4gIGxldCByZWxhdGlvbnMgPSBsYXllci5nZXRDaGlsZHJlbigpO1xuICBjb25zdCBjaGlsZHJlbnJlYWx0aW9uaW5lZGl0aW5nID0gcmVsYXRpb25zLmZpbHRlcihyZWxhdGlvbiA9PiB0aGlzLmdldExheWVyQnlJZChyZWxhdGlvbikpO1xuICByZXR1cm4gY2hpbGRyZW5yZWFsdGlvbmluZWRpdGluZztcbn07XG5cbi8qKlxuICogVW5kbyBtZXRob2RcbiAqL1xucHJvdG8udW5kbyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlc3Npb24gPSB0aGlzLnN0YXRlLnRvb2xib3hzZWxlY3RlZC5nZXRTZXNzaW9uKCk7XG4gIGNvbnN0IGxheWVySWQgPSBzZXNzaW9uLmdldElkKCk7XG4gIGNvbnN0IHNlc3Npb25JdGVtcyA9IHNlc3Npb24uZ2V0TGFzdEhpc3RvcnlTdGF0ZSgpLml0ZW1zO1xuICB0aGlzLnVuZG9SZWRvTGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7XG4gICAgbGF5ZXJJZCxcbiAgICBzZXNzaW9uSXRlbXMsXG4gICAgYWN0aW9uOiAndW5kbydcbiAgfSk7XG4gIGNvbnN0IHVuZG9JdGVtcyA9IHNlc3Npb24udW5kbygpO1xuXG4gIHRoaXMudW5kb1JlZG9SZWxhdGlvblVuaXF1ZUZpZWxkVmFsdWVzKHtcbiAgICByZWxhdGlvblNlc3Npb25JdGVtczogdW5kb0l0ZW1zLFxuICAgIGFjdGlvbjogJ3VuZG8nXG4gIH0pO1xuXG4gIHRoaXMudW5kb1JlbGF0aW9ucyh1bmRvSXRlbXMpO1xufTtcblxuLy8gdW5kbyByZWxhdGlvbnNcbnByb3RvLnVuZG9SZWxhdGlvbnMgPSBmdW5jdGlvbih1bmRvSXRlbXMpIHtcbiAgT2JqZWN0LmVudHJpZXModW5kb0l0ZW1zKS5mb3JFYWNoKChbdG9vbGJveElkLCBpdGVtc10pID0+IHtcbiAgICBjb25zdCB0b29sYm94ID0gdGhpcy5nZXRUb29sQm94QnlJZCh0b29sYm94SWQpO1xuICAgIGNvbnN0IHNlc3Npb24gPSB0b29sYm94LmdldFNlc3Npb24oKTtcbiAgICBzZXNzaW9uLnVuZG8oaXRlbXMpO1xuICB9KVxufTtcblxuLy8gdW5kbyByZWxhdGlvbnNcbnByb3RvLnJvbGxiYWNrUmVsYXRpb25zID0gZnVuY3Rpb24ocm9sbGJhY2tJdGVtcykge1xuICBPYmplY3QuZW50cmllcyhyb2xsYmFja0l0ZW1zKS5mb3JFYWNoKChbdG9vbGJveElkLCBpdGVtc10pID0+IHtcbiAgICBjb25zdCB0b29sYm94ID0gdGhpcy5nZXRUb29sQm94QnlJZCh0b29sYm94SWQpO1xuICAgIGNvbnN0IHNlc3Npb24gPSB0b29sYm94LmdldFNlc3Npb24oKTtcbiAgICBzZXNzaW9uLnJvbGxiYWNrKGl0ZW1zKTtcbiAgfSlcbn07XG5cbi8qKlxuICogIG1ldGhvZFxuICovXG5wcm90by5yZWRvID0gZnVuY3Rpb24oKXtcbiAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc3RhdGUudG9vbGJveHNlbGVjdGVkLmdldFNlc3Npb24oKTtcbiAgY29uc3QgbGF5ZXJJZCA9IHNlc3Npb24uZ2V0SWQoKTtcbiAgY29uc3Qgc2Vzc2lvbkl0ZW1zID0gc2Vzc2lvbi5nZXRMYXN0SGlzdG9yeVN0YXRlKCkuaXRlbXM7XG4gIHRoaXMudW5kb1JlZG9MYXllclVuaXF1ZUZpZWxkVmFsdWVzKHtcbiAgICBsYXllcklkLFxuICAgIHNlc3Npb25JdGVtcyxcbiAgICBhY3Rpb246ICdyZWRvJ1xuICB9KTtcbiAgY29uc3QgcmVkb0l0ZW1zID0gc2Vzc2lvbi5yZWRvKCk7XG5cbiAgdGhpcy51bmRvUmVkb1JlbGF0aW9uVW5pcXVlRmllbGRWYWx1ZXMoe1xuICAgIHJlbGF0aW9uU2Vzc2lvbkl0ZW1zOiByZWRvSXRlbXMsXG4gICAgYWN0aW9uOiAncmVkbydcbiAgfSk7XG5cbiAgdGhpcy5yZWRvUmVsYXRpb25zKHJlZG9JdGVtcyk7XG59O1xuXG4vLyByZWRvIHJlbGF0aW9uc1xucHJvdG8ucmVkb1JlbGF0aW9ucyA9IGZ1bmN0aW9uKHJlZG9JdGVtcykge1xuICBPYmplY3QuZW50cmllcyhyZWRvSXRlbXMpLmZvckVhY2goKFt0b29sYm94SWQsIGl0ZW1zXSkgPT4ge1xuICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IHRvb2xib3guZ2V0U2Vzc2lvbigpO1xuICAgIHNlc3Npb24ucmVkbyhpdGVtcyk7XG4gIH0pXG59O1xuXG5wcm90by5nZXRFZGl0aW5nTGF5ZXIgPSBmdW5jdGlvbihpZCkge1xuICByZXR1cm4gdGhpcy5fZWRpdGFibGVMYXllcnNbaWRdLmdldEVkaXRpbmdMYXllcigpO1xufTtcblxuLyoqXG4gKiBvcHRpb25zIGNvbnRhaW4gZXZlbnR1YWxseSBlZGl0aW5nIHR5cGUgKGNyZWF0ZS91cGRhdGUvZGVsZXRlKVxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9idWlsZFRvb2xCb3hlcyA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgZm9yIChjb25zdCBsYXllciBvZiB0aGlzLmdldExheWVycygpKSB7XG4gICAgY29uc3QgdG9vbGJveCA9IFRvb2xCb3hlc0ZhY3RvcnkuYnVpbGQobGF5ZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMuYWRkVG9vbEJveCh0b29sYm94KTtcbiAgfVxufTtcblxucHJvdG8uYWRkVG9vbEJveCA9IGZ1bmN0aW9uKHRvb2xib3gpIHtcbiAgdGhpcy5fdG9vbGJveGVzLnB1c2godG9vbGJveCk7XG4gIC8vIGFkZCBzZXNzaW9uXG4gIHRoaXMuX3Nlc3Npb25zW3Rvb2xib3guZ2V0SWQoKV0gPSB0b29sYm94LmdldFNlc3Npb24oKTtcbiAgdGhpcy5zdGF0ZS50b29sYm94ZXMucHVzaCh0b29sYm94LnN0YXRlKTtcbn07XG5cbi8vKiogTWV0aG9kIHRvIHNldCBzdGF0ZSBpbiBlZGl0aW5nIFxucHJvdG8uc2V0T3BlbkVkaXRpbmdQYW5lbCA9IGZ1bmN0aW9uKGJvb2wpe1xuICB0aGlzLnN0YXRlLm9wZW4gPSBib29sO1xuICB0aGlzLl9nZXRFZGl0YWJsZUxheWVyc0Zyb21DYXRhbG9nKCkuZm9yRWFjaChsYXllciA9PiBsYXllci5zZXRJbkVkaXRpbmcoYm9vbCkpO1xufTtcblxuLypcbiogQWRkIGV2ZW50XG4qIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gRXZlbnQgVHlwZVxuKiBAcGFyYW1cbiogKi9cbnByb3RvLmFkZEV2ZW50ID0gZnVuY3Rpb24oe3R5cGUsIGlkLCBmbmN9PXt9KSB7XG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKSB0aGlzLl9ldmVudHNbdHlwZV0gPSB7fTtcbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV1baWRdKSB0aGlzLl9ldmVudHNbdHlwZV1baWRdID0gW107XG4gIHRoaXMuX2V2ZW50c1t0eXBlXVtpZF0ucHVzaChmbmMpO1xufTtcblxuLypcbiogQWRkIGV2ZW50XG4qIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gRXZlbnQgVHlwZVxuKiBAcGFyYW1cbiogKi9cbnByb3RvLmFkZEV2ZW50cyA9IGZ1bmN0aW9uKHt0eXBlcz1bXSwgaWQsIGZuY309e30pIHtcbiAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHRoaXMuYWRkRXZlbnQoe1xuICAgIHR5cGUsXG4gICAgaWQsIFxuICAgIGZuY1xuICB9KSk7XG59O1xuXG5wcm90by5ydW5FdmVudEhhbmRsZXIgPSBmdW5jdGlvbih7dHlwZSwgaWR9ID0ge30pIHtcbiAgdGhpcy5fZXZlbnRzW3R5cGVdICYmIHRoaXMuX2V2ZW50c1t0eXBlXVtpZF0gJiYgdGhpcy5fZXZlbnRzW3R5cGVdW2lkXS5mb3JFYWNoKGZuYyA9PiBmbmMoKSk7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gbW9kZSAtICBkZWZhdWx0IG9yIGF1dG9zYXZlXG4gKiBAcGFyYW0gY2Igb2JqZWN0IGNvbnRhaW4gZG9uZS9lcnJvciB0d28gZnVuY3Rpb25zXG4gKiBAcGFyYW0gbW9kYWwgLSBCb29sZWFuIHRydWUgb3IgZmFsc2UgdG8gc2hvdyB0byBhc2tcbiAqIEBwYXJhbSBtZXNzYWdlcyAtIG9iamVjdCBzdWNjZXNzIG9yIGVycm9yXG4gKi9cbnByb3RvLnNldFNhdmVDb25maWcgPSBmdW5jdGlvbih7bW9kZSA9ICdkZWZhdWx0JywgY2I9e30sIG1vZGFsPWZhbHNlLCBtZXNzYWdlc309e30pe1xuICB0aGlzLnNhdmVDb25maWcubW9kZSA9IG1vZGU7XG4gIHRoaXMuc2F2ZUNvbmZpZy5tb2RhbCA9IG1vZGFsO1xuICB0aGlzLnNhdmVDb25maWcubWVzc2FnZXMgPSBtZXNzYWdlcztcbiAgdGhpcy5zYXZlQ29uZmlnLmNiID0ge1xuICAgIC4uLnRoaXMuc2F2ZUNvbmZpZy5jYixcbiAgICAuLi5jYlxuICB9XG59O1xuXG4vL3JldHVybiBzYXZlIG1vZGVcbnByb3RvLmdldFNhdmVDb25maWcgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5zYXZlQ29uZmlnO1xufTtcblxuLyoqXG4gKiBSZXNldCBkZWZhdWx0IHZhbHVlc1xuICovXG5wcm90by5yZXNldERlZmF1bHQgPSBmdW5jdGlvbigpe1xuICB0aGlzLnNhdmVDb25maWcgPSB7XG4gICAgbW9kZTogXCJkZWZhdWx0XCIsIC8vIGRlZmF1bHQsIGF1dG9zYXZlXG4gICAgbW9kYWw6IGZhbHNlLFxuICAgIG1lc3NhZ2VzOiBudWxsLCAvLyBvYmplY3QgdG8gc2V0IGN1c3RvbSBtZXNzYWdlXG4gICAgY2I6IHtcbiAgICAgIGRvbmU6IG51bGwsIC8vIGZ1bmN0aW9uIENhbGxlZCBhZnRlciBzYXZlXG4gICAgICBlcnJvcjogbnVsbCwgLy8gZnVuY3Rpb24gY2FsbGVkIGFmZnRlIGNvbW1pdCBlcnJvclxuICAgIH1cbiAgfTtcbiAgdGhpcy5kaXNhYmxlTWFwQ29udHJvbHNDb25mbGljdChmYWxzZSk7XG59O1xuXG5wcm90by5fYXR0YWNoTGF5ZXJXaWRnZXRzRXZlbnQgPSBmdW5jdGlvbihsYXllcikge1xuICBjb25zdCBmaWVsZHMgPSBsYXllci5nZXRFZGl0aW5nRmllbGRzKCk7XG4gIGZvciAobGV0IGk9MDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ldO1xuICAgIGlmIChmaWVsZC5pbnB1dCkge1xuICAgICAgaWYgKGZpZWxkLmlucHV0LnR5cGUgPT09ICdzZWxlY3RfYXV0b2NvbXBsZXRlJyAmJiAhZmllbGQuaW5wdXQub3B0aW9ucy5maWx0ZXJfZXhwcmVzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gZmllbGQuaW5wdXQub3B0aW9ucztcbiAgICAgICAgbGV0IHtrZXksIHZhbHVlcywgdmFsdWUsIHVzZWNvbXBsZXRlciwgbGF5ZXJfaWQsIGxvYWRpbmd9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICghdXNlY29tcGxldGVyKSB7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudHMoe1xuICAgICAgICAgICAgdHlwZXM6IFsnc3RhcnQtZWRpdGluZycsICdzaG93LXJlbGF0aW9uLWVkaXRpbmcnXSxcbiAgICAgICAgICAgIGlkOiBsYXllci5nZXRJZCgpLFxuICAgICAgICAgICAgZm5jKCkge1xuICAgICAgICAgICAgICAvLyByZW1vdmUgYWxsIHZhbHVlc1xuICAgICAgICAgICAgICBsb2FkaW5nLnN0YXRlID0gJ2xvYWRpbmcnO1xuICAgICAgICAgICAgICBmaWVsZC5pbnB1dC5vcHRpb25zLnZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICBjb25zdCByZWxhdGlvbkxheWVyID0gQ2F0YWxvZ0xheWVyc1N0b3Jlc1JlZ2lzdHJ5LmdldExheWVyQnlJZChsYXllcl9pZCk7XG4gICAgICAgICAgICAgIGlmIChyZWxhdGlvbkxheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aW9uTGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgIHJlbGF0aW9uTGF5ZXIuZ2V0RGF0YVRhYmxlKHtcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJpbmc6IGtleVxuICAgICAgICAgICAgICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5mZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gcmVzcG9uc2UuZmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgICAgICAgc2VsZi5maXJlRXZlbnQoJ2F1dG9jb21wbGV0ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXNcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5pbnB1dC5vcHRpb25zLnZhbHVlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBmZWF0dXJlc1tpXS5wcm9wZXJ0aWVzW2tleV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmZWF0dXJlc1tpXS5wcm9wZXJ0aWVzW3ZhbHVlXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgbG9hZGluZy5zdGF0ZSA9ICdyZWFkeSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pLmZhaWwoZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0YXRlID0gJ2Vycm9yJ1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxvYWRpbmcuc3RhdGUgPSAnZXJyb3InXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuZmlyZUV2ZW50KCdhdXRvY29tcGxldGUnLCB7XG4gICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxvYWRpbmcuc3RhdGUgPSAncmVhZHknO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxucHJvdG8uX2NyZWF0ZVRvb2xCb3hEZXBlbmRlbmNpZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fdG9vbGJveGVzLmZvckVhY2godG9vbGJveCA9PiB7XG4gICAgY29uc3QgbGF5ZXIgPSB0b29sYm94LmdldExheWVyKCk7XG4gICAgdG9vbGJveC5zZXRGYXRoZXIobGF5ZXIuaXNGYXRoZXIoKSk7XG4gICAgdG9vbGJveC5zdGF0ZS5lZGl0aW5nLmRlcGVuZGVuY2llcyA9IHRoaXMuX2dldFRvb2xCb3hFZGl0aW5nRGVwZW5kZW5jaWVzKGxheWVyKTtcbiAgICBpZiAobGF5ZXIuaXNGYXRoZXIoKSAmJiB0b29sYm94Lmhhc0RlcGVuZGVuY2llcygpICkge1xuICAgICAgY29uc3QgbGF5ZXJSZWxhdGlvbnMgPSBsYXllci5nZXRSZWxhdGlvbnMoKS5nZXRSZWxhdGlvbnMoKTtcbiAgICAgIGZvciAoY29uc3QgcmVsYXRpb25OYW1lIGluIGxheWVyUmVsYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aW9uID0gbGF5ZXJSZWxhdGlvbnNbcmVsYXRpb25OYW1lXTtcbiAgICAgICAgdG9vbGJveC5hZGRSZWxhdGlvbihyZWxhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9KVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBmaWVsZCBvZiBsYXllciBpcyByZXF1aXJlZFxuICogQHBhcmFtIGxheWVySWRcbiAqIEBwYXJhbSBmaWVsZE5hbWVcbiAqIEByZXR1cm5zIHsqfVxuICovXG5wcm90by5pc0ZpZWxkUmVxdWlyZWQgPSBmdW5jdGlvbihsYXllcklkLCBmaWVsZE5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpLmlzRmllbGRSZXF1aXJlZChmaWVsZE5hbWUpO1xufTtcblxucHJvdG8uX2dldFRvb2xCb3hFZGl0aW5nRGVwZW5kZW5jaWVzID0gZnVuY3Rpb24obGF5ZXIpIHtcbiAgbGV0IHJlbGF0aW9uTGF5ZXJzID0gWy4uLmxheWVyLmdldENoaWxkcmVuKCksIC4uLmxheWVyLmdldEZhdGhlcnMoKV07XG4gIHJldHVybiByZWxhdGlvbkxheWVycy5maWx0ZXIoKGxheWVyTmFtZSkgPT4ge1xuICAgIHJldHVybiAhIXRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVyTmFtZSk7XG4gIH0pO1xufTtcblxucHJvdG8uX2hhc0VkaXRpbmdEZXBlbmRlbmNpZXMgPSBmdW5jdGlvbihsYXllcikge1xuICBsZXQgdG9vbGJveGVzSWRzID0gdGhpcy5fZ2V0VG9vbEJveEVkaXRpbmdEZXBlbmRlbmNpZXMobGF5ZXIpO1xuICByZXR1cm4gISF0b29sYm94ZXNJZHMubGVuZ3RoO1xufTtcblxucHJvdG8uaGFuZGxlVG9vbGJveERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uKHRvb2xib3gpIHtcbiAgbGV0IGRlcGVuZGVjeVRvb2xCb3g7XG4gIGlmICh0b29sYm94LmlzRmF0aGVyKCkpIHRoaXMuZ2V0TGF5ZXJzRGVwZW5kZW5jeUZlYXR1cmVzKHRvb2xib3guZ2V0SWQoKSk7XG4gIHRvb2xib3guZ2V0RGVwZW5kZW5jaWVzKCkuZm9yRWFjaCh0b29sYm94SWQgPT4ge1xuICAgIGRlcGVuZGVjeVRvb2xCb3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgZGVwZW5kZWN5VG9vbEJveC5zZXRFZGl0aW5nKGZhbHNlKTtcbiAgfSlcbn07XG5cbnByb3RvLl9nZXRFZGl0YWJsZUxheWVyc0Zyb21DYXRhbG9nID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsYXllcnMgPSBDYXRhbG9nTGF5ZXJzU3RvcmVzUmVnaXN0cnkuZ2V0TGF5ZXJzKHtcbiAgICBFRElUQUJMRTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIGxheWVycztcbn07XG5cbnByb3RvLmdldExheWVycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9lZGl0YWJsZUxheWVycyk7XG59O1xuXG5wcm90by5nZXRDdXJyZW50V29ya2Zsb3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFdvcmtmbG93c1N0YWNrLmdldEN1cnJlbnQoKTtcbn07XG5cbnByb3RvLmdldEN1cnJlbnRXb3JrZmxvd0RhdGEgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgY3VycmVudFdvcmtGbG93ID0gV29ya2Zsb3dzU3RhY2suZ2V0Q3VycmVudCgpO1xuICByZXR1cm4ge1xuICAgIHNlc3Npb246IGN1cnJlbnRXb3JrRmxvdy5nZXRTZXNzaW9uKCksXG4gICAgaW5wdXRzOiBjdXJyZW50V29ya0Zsb3cuZ2V0SW5wdXRzKCksXG4gICAgY29udGV4dDogY3VycmVudFdvcmtGbG93LmdldENvbnRleHQoKSxcbiAgICBmZWF0dXJlOiBjdXJyZW50V29ya0Zsb3cuZ2V0Q3VycmVudEZlYXR1cmUoKSxcbiAgICBsYXllcjogY3VycmVudFdvcmtGbG93LmdldExheWVyKClcbiAgfTtcbn07XG5cbnByb3RvLmdldFJlbGF0aW9uc0F0dHJpYnV0ZXNCeUZlYXR1cmUgPSBmdW5jdGlvbih7bGF5ZXJJZCwgcmVsYXRpb24sIGZlYXR1cmV9PXt9KSB7XG4gIGNvbnN0IGxheWVyID0gdGhpcy5nZXRUb29sQm94QnlJZChsYXllcklkKS5nZXRMYXllcigpO1xuICBjb25zdCByZWxhdGlvbnMgPSB0aGlzLmdldFJlbGF0aW9uc0J5RmVhdHVyZSh7bGF5ZXJJZCwgcmVsYXRpb24sIGZlYXR1cmV9KTtcbiAgcmV0dXJuIHJlbGF0aW9ucy5tYXAocmVsYXRpb24gPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBmaWVsZHM6IGxheWVyLmdldEZpZWxkc1dpdGhWYWx1ZXMocmVsYXRpb24sIHtcbiAgICAgICAgcmVsYXRpb246IHRydWVcbiAgICAgIH0pLFxuICAgICAgaWQ6IHJlbGF0aW9uLmdldElkKClcbiAgICB9O1xuICB9KTtcbn07XG5cbnByb3RvLl9nZXRSZWxhdGlvbkxheWVySWQgPSBmdW5jdGlvbih7bGF5ZXJJZCwgcmVsYXRpb259PXt9KXtcbiAgcmV0dXJuIHJlbGF0aW9uLmdldENoaWxkKCkgPT09IGxheWVySWQgPyByZWxhdGlvbi5nZXRGYXRoZXIoKSA6IHJlbGF0aW9uLmdldENoaWxkKCk7XG59O1xuXG5wcm90by5nZXRSZWxhdGlvbnNCeUZlYXR1cmUgPSBmdW5jdGlvbih7bGF5ZXJJZCwgcmVsYXRpb24sIGZlYXR1cmUsIGxheWVyVHlwZX09e30pIHtcbiAgY29uc3Qge293bkZpZWxkLCByZWxhdGlvbkZpZWxkfSA9IHRoaXMuX2dldFJlbGF0aW9uRmllbGRzRnJvbVJlbGF0aW9uKHtcbiAgICBsYXllcklkLFxuICAgIHJlbGF0aW9uXG4gIH0pO1xuICBjb25zdCBmZWF0dXJlVmFsdWUgPSBmZWF0dXJlLmdldChyZWxhdGlvbkZpZWxkKTtcbiAgY29uc3QgZmVhdHVyZXMgPSB0aGlzLl9nZXRGZWF0dXJlc0J5TGF5ZXJJZChsYXllcklkKTtcbiAgcmV0dXJuIGZlYXR1cmVzLmZpbHRlcihmZWF0dXJlID0+IGZlYXR1cmUuZ2V0KG93bkZpZWxkKSA9PSBmZWF0dXJlVmFsdWUpO1xufTtcblxucHJvdG8ucmVnaXN0ZXJMZWF2ZVBhZ2UgPSBmdW5jdGlvbihib29sKXtcbiAgQXBwbGljYXRpb25TZXJ2aWNlLnJlZ2lzdGVyTGVhdmVQYWdlKHtcbiAgICBib29sXG4gIH0pO1xufTtcblxucHJvdG8ubG9hZFBsdWdpbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbG9hZCA9ICEhdGhpcy5fZ2V0RWRpdGFibGVMYXllcnNGcm9tQ2F0YWxvZygpLmxlbmd0aDtcbn07XG5cbnByb3RvLmdldExheWVyQnlJZCA9IGZ1bmN0aW9uKGxheWVySWQpIHtcbiAgcmV0dXJuIHRoaXMuX2VkaXRhYmxlTGF5ZXJzW2xheWVySWRdO1xufTtcblxucHJvdG8uYmVmb3JlRWRpdGluZ1N0YXJ0ID0gZnVuY3Rpb24oe2xheWVyfSA9IHt9KSB7XG4gIHRoaXMuX2NoZWNrTGF5ZXJXaWRnZXRzKGxheWVyKTtcbn07XG5cbnByb3RvLmFmdGVyRWRpdGluZ1N0YXJ0ID0gZnVuY3Rpb24oe2xheWVyfT0ge30pIHtcbiAgLy9UT0RPXG59O1xuXG5wcm90by5nZXRUb29sQm94QnlJZCA9IGZ1bmN0aW9uKHRvb2xib3hJZCkge1xuICByZXR1cm4gdGhpcy5fdG9vbGJveGVzLmZpbmQodG9vbGJveCA9PiB0b29sYm94LmdldElkKCkgPT09IHRvb2xib3hJZCk7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB0byBhcHBseSBmaWx0ZXIgZWRpdGluZyBjb250c3JhaW50IHRvIHRvb2xib3ggZWRpdGluZyBcbiAqIEBwYXJhbSBjb25zdGluc3RcbiAqL1xucHJvdG8uc2V0QXBwbGljYXRpb25FZGl0aW5nQ29uc3RyYWludHMgPSBmdW5jdGlvbihjb25zdHJhaW50cz17c2hvd1Rvb2xib3hlc0V4Y2x1ZGVkOiB0cnVlLCB0b29sYm94ZXM6e319KXtcbiAgdGhpcy5hcHBsaWNhdGlvbkVkaXRpbmdDb25zdHJhaW50cyA9IHtcbiAgICAuLi50aGlzLmFwcGxpY2F0aW9uRWRpdGluZ0NvbnN0cmFpbnRzLFxuICAgIC4uLmNvbnN0cmFpbnRzXG4gIH07XG4gIFxuICBjb25zdCB7dG9vbGJveGVzLCBzaG93VG9vbGJveGVzRXhjbHVkZWR9ID0gY29uc3RyYWludHM7XG4gIGNvbnN0IHRvb2xib3hJZHMgPSBPYmplY3Qua2V5cyh0b29sYm94ZXMpO1xuICAhc2hvd1Rvb2xib3hlc0V4Y2x1ZGVkICYmIHRoaXMuc3RhdGUudG9vbGJveGVzLmZvckVhY2godG9vbGJveCA9PiB0b29sYm94LnNob3cgPSAgdG9vbGJveElkcy5pbmRleE9mKHRvb2xib3guaWQpICE9PSAtMSk7XG4gIHRvb2xib3hJZHMuZm9yRWFjaCh0b29sYm94SWQgPT4ge1xuICAgIGNvbnN0IHRvb2xib3ggPSB0aGlzLmdldFRvb2xCb3hCeUlkKHRvb2xib3hJZCk7XG4gICAgdG9vbGJveC5zZXRFZGl0aW5nQ29uc3RyYWludHModG9vbGJveGVzW3Rvb2xib3hJZF0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2V0IGFwcGxpY2F0aW9uIGVkaXRpbmcgY29udHJhaW50cyBpZiBhcHBsaWVkXG4gKi9cblxucHJvdG8uZ2V0QXBwbGljYXRpb25FZGl0aW5nQ29uc3RyYWludHMgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbkVkaXRpbmdDb25zdHJhaW50cztcbn07XG5cbi8qKlxuICpcbiAqL1xuXG5wcm90by5nZXRBcHBsaWNhdGlvbkVkaXRpbmdDb25zdHJhaW50QnlJZCA9IGZ1bmN0aW9uKHRvb2xib3hJZCl7XG4gIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uRWRpdGluZ0NvbnN0cmFpbnRzLnRvb2xib3hlc1t0b29sYm94SWRdO1xufTtcblxucHJvdG8uZ2V0VG9vbEJveGVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl90b29sYm94ZXM7XG59O1xuXG5wcm90by5nZXRFZGl0YWJsZUxheWVycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZWRpdGFibGVMYXllcnM7XG59O1xuXG5wcm90by5fY2FuY2VsT3JTYXZlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHJlc29sdmUoKTtcbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBjb21taXRwcm9taXNlcyA9IFtdO1xuICAgIHRoaXMuX3Rvb2xib3hlcy5mb3JFYWNoKHRvb2xib3ggPT4ge1xuICAgICAgLy8gY2hlY2sgaWYgdGVtcCBjaGFuZ2VzIGFyZSB3YWl0aW5nIHRvIHNhdmUgb24gc2VydmVyXG4gICAgICBpZiAodG9vbGJveC5nZXRTZXNzaW9uKCkuZ2V0SGlzdG9yeSgpLnN0YXRlLmNvbW1pdCkge1xuICAgICAgICAvLyBhc2sgdG8gY29tbWl0IGJlZm9yZSBleGl0XG4gICAgICAgIGNvbW1pdHByb21pc2VzLnB1c2godGhpcy5jb21taXQodG9vbGJveCwgdHJ1ZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgICQud2hlbi5hcHBseSh0aGlzLCBjb21taXRwcm9taXNlcylcbiAgICAgIC5hbHdheXMoKCkgPT4ge1xuICAgICAgICB0aGlzLl90b29sYm94ZXMuZm9yRWFjaCh0b29sYm94ID0+IHRvb2xib3guc3RvcCgpKTtcbiAgICAgICAgdGhpcy5jbGVhclN0YXRlKCk7XG4gICAgICAgIC8vdGhpcy5hY3RpdmVRdWVyeUluZm8oKTtcbiAgICAgICAgdGhpcy5fbWFwU2VydmljZS5yZWZyZXNoTWFwKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vLyByZW1vdmUgRWRpdGluZyBMYXllcnNTdG9yZVxucHJvdG8uY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgTWFwTGF5ZXJzU3RvcmVSZWdpc3RyeS5yZW1vdmVMYXllcnNTdG9yZSh0aGlzLl9sYXllcnNzdG9yZSk7XG4gIFNlc3Npb25zUmVnaXN0cnkuY2xlYXIoKTtcbiAgLy90dXJuIG9mZiBldmVudHNcbiAgdGhpcy5fbWFwU2VydmljZS5vZmYoTUFQQ09OVFJPTF9UT0dHTEVEX0VWRU5UX05BTUUsIHRoaXMubWFwQ29udHJvbFRvZ2dsZUV2ZW50SGFuZGxlcik7XG4gIHRoaXMudW5yZWdpc3RlclJlc3VsdEVkaXRpbmdBY3Rpb24oKTtcbn07XG5cbnByb3RvLmNsZWFyU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZS50b29sYm94c2VsZWN0ZWQgPSBudWxsO1xuICB0aGlzLnN0YXRlLnRvb2xib3hpZGFjdGl2ZXRvb2wgPSAgbnVsbDtcbiAgdGhpcy5zdGF0ZS5tZXNzYWdlID0gIG51bGw7XG59O1xuXG4vKipcbiAqIEdldCBSZWxhdGlvbiBpbiBlZGl0aW5nXG4gKiBAcGFyYW0gbGF5ZXJJZFxuICogQHBhcmFtIHJlbGF0aW9uc1xuICogQHBhcmFtIGZlYXR1cmVcbiAqIEByZXR1cm5zIHtbXX1cbiAqL1xucHJvdG8uZ2V0UmVsYXRpb25zSW5FZGl0aW5nID0gZnVuY3Rpb24oe2xheWVySWQsIHJlbGF0aW9ucz1bXSwgZmVhdHVyZX09e30pIHtcbiAgbGV0IHJlbGF0aW9uc2luZWRpdGluZyA9IFtdO1xuICBsZXQgcmVsYXRpb25pbmVkaXRpbmc7XG4gIHJlbGF0aW9ucy5mb3JFYWNoKHJlbGF0aW9uID0+IHtcbiAgICBjb25zdCByZWxhdGlvbkxheWVySWQgPSB0aGlzLl9nZXRSZWxhdGlvbkxheWVySWQoe2xheWVySWQsIHJlbGF0aW9ufSk7XG4gICAgaWYgKHRoaXMuZ2V0TGF5ZXJCeUlkKHJlbGF0aW9uTGF5ZXJJZCkpIHtcbiAgICAgIHJlbGF0aW9uaW5lZGl0aW5nID0ge1xuICAgICAgICByZWxhdGlvbjogcmVsYXRpb24uZ2V0U3RhdGUoKSxcbiAgICAgICAgcmVsYXRpb25zOiB0aGlzLmdldFJlbGF0aW9uc0F0dHJpYnV0ZXNCeUZlYXR1cmUoe1xuICAgICAgICAgIGxheWVySWQ6IHJlbGF0aW9uTGF5ZXJJZCxcbiAgICAgICAgICByZWxhdGlvbixcbiAgICAgICAgICBmZWF0dXJlXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgICAgcmVsYXRpb25pbmVkaXRpbmcudmFsaWRhdGUgPSB7XG4gICAgICAgIHZhbGlkOnRydWVcbiAgICAgIH07XG4gICAgICByZWxhdGlvbnNpbmVkaXRpbmcucHVzaChyZWxhdGlvbmluZWRpdGluZyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlbGF0aW9uc2luZWRpdGluZztcbn07XG5cbnByb3RvLl9maWx0ZXJSZWxhdGlvbnNJbkVkaXRpbmcgPSBmdW5jdGlvbih7bGF5ZXJJZCwgcmVsYXRpb25zPVtdfSkge1xuICByZXR1cm4gcmVsYXRpb25zLmZpbHRlcihyZWxhdGlvbiA9PiB7XG4gICAgY29uc3QgcmVsYXRpb25JZCA9IHRoaXMuX2dldFJlbGF0aW9uSWQoe1xuICAgICAgbGF5ZXJJZCxcbiAgICAgIHJlbGF0aW9uXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VG9vbEJveEJ5SWQocmVsYXRpb25JZClcbiAgfSlcbn07XG5cbnByb3RvLnN0b3BUb29sYm94ZXNDaGlsZHJlbiA9IGZ1bmN0aW9uKGxheWVySWQpe1xuICBjb25zdCBsYXllciA9IHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpO1xuICBjb25zdCByZWxhdGlvbnMgPSB0aGlzLl9maWx0ZXJSZWxhdGlvbnNJbkVkaXRpbmcoe1xuICAgIHJlbGF0aW9uczogbGF5ZXIuZ2V0UmVsYXRpb25zKCkgPyBsYXllci5nZXRSZWxhdGlvbnMoKS5nZXRBcnJheSgpIDogW10sXG4gICAgbGF5ZXJJZFxuICB9KTtcbiAgcmVsYXRpb25zXG4gICAgLmZpbHRlcihyZWxhdGlvbiA9PiByZWxhdGlvbi5nZXRGYXRoZXIoKSA9PT0gbGF5ZXJJZClcbiAgICAuZm9yRWFjaChyZWxhdGlvbiA9PiB7XG4gICAgICBjb25zdCByZWxhdGlvbklkID0gdGhpcy5fZ2V0UmVsYXRpb25JZCh7XG4gICAgICAgIGxheWVySWQsXG4gICAgICAgIHJlbGF0aW9uXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZ2V0VG9vbEJveEJ5SWQocmVsYXRpb25JZCkuaW5FZGl0aW5nKCkgJiYgdGhpcy5nZXRUb29sQm94QnlJZChyZWxhdGlvbklkKS5zdG9wKCk7XG4gICAgfSlcbn07XG5cbnByb3RvLnN0b3BTZXNzaW9uQ2hpbGRyZW4gPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllckJ5SWQobGF5ZXJJZCk7XG4gIGNvbnN0IHJlbGF0aW9ucyA9IHRoaXMuX2ZpbHRlclJlbGF0aW9uc0luRWRpdGluZyh7XG4gICAgcmVsYXRpb25zOiBsYXllci5nZXRSZWxhdGlvbnMoKSA/IGxheWVyLmdldFJlbGF0aW9ucygpLmdldEFycmF5KCkgOiBbXSxcbiAgICBsYXllcklkXG4gIH0pO1xuICByZWxhdGlvbnNcbiAgICAuZmlsdGVyKHJlbGF0aW9uID0+IHJlbGF0aW9uLmdldEZhdGhlcigpID09PSBsYXllcklkKVxuICAgIC5mb3JFYWNoKHJlbGF0aW9uID0+IHtcbiAgICAgIGNvbnN0IHJlbGF0aW9uSWQgPSB0aGlzLl9nZXRSZWxhdGlvbklkKHtcbiAgICAgICAgbGF5ZXJJZCxcbiAgICAgICAgcmVsYXRpb25cbiAgICAgIH0pO1xuICAgICAgLy8gSW4gY2FzZSBvZiBubyBlZGl0aW5nIGlzIHN0YXJ0ZWQgKGNsaWNrIG9uIHBlbmNpbCBvZiByZWxhdGlvbiBsYXllcikgbmVlZCB0byBzdG9wICh1bmxvY2spIGZlYXR1cmVzXG4gICAgICBpZiAoIXRoaXMuZ2V0VG9vbEJveEJ5SWQocmVsYXRpb25JZCkuaW5FZGl0aW5nKCkpIHtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbnNbcmVsYXRpb25JZF0uc3RvcCgpO1xuICAgICAgfVxuICAgIH0pXG59O1xuXG5wcm90by5mYXRoZXJJbkVkaXRpbmcgPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIGxldCBpbkVkaXRpbmcgPSBmYWxzZTtcbiAgbGV0IHRvb2xib3g7XG4gIGxldCByZWxhdGlvbkxheWVyRmF0aGVycyA9IHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpLmdldEZhdGhlcnMoKTtcbiAgcmVsYXRpb25MYXllckZhdGhlcnMuZm9yRWFjaChpZCA9PiB7XG4gICAgdG9vbGJveCA9IHRoaXMuZ2V0VG9vbEJveEJ5SWQoaWQpO1xuICAgIGlmICh0b29sYm94ICYmIHRvb2xib3guaW5FZGl0aW5nKCkpIHtcbiAgICAgIGluRWRpdGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGluRWRpdGluZztcbn07XG5cbnByb3RvLl9nZXRSZWxhdGlvbkZpZWxkc0Zyb21SZWxhdGlvbiA9IGZ1bmN0aW9uKHtsYXllcklkLCByZWxhdGlvbn0gPSB7fSkge1xuICBjb25zdCBjaGlsZElkID0gcmVsYXRpb24uZ2V0Q2hpbGQgPyByZWxhdGlvbi5nZXRDaGlsZCgpIDogcmVsYXRpb24uY2hpbGQ7XG4gIGNvbnN0IGlzQ2hpbGQgPSBjaGlsZElkICE9PSBsYXllcklkO1xuICBjb25zdCBfZmF0aGVyRmllbGQgPSByZWxhdGlvbi5nZXRGYXRoZXJGaWVsZCA/IHJlbGF0aW9uLmdldEZhdGhlckZpZWxkKCkgOiByZWxhdGlvbi5mYXRoZXJGaWVsZDtcbiAgY29uc3QgX2NoaWxkRmllbGQgPSByZWxhdGlvbi5nZXRDaGlsZEZpZWxkID8gcmVsYXRpb24uZ2V0Q2hpbGRGaWVsZCgpIDogcmVsYXRpb24uY2hpbGRGaWVsZDtcbiAgY29uc3Qgb3duRmllbGQgPSBpc0NoaWxkID8gX2ZhdGhlckZpZWxkIDogX2NoaWxkRmllbGQ7XG4gIGNvbnN0IHJlbGF0aW9uRmllbGQgPSBpc0NoaWxkID8gX2NoaWxkRmllbGQgOiBfZmF0aGVyRmllbGQ7XG4gIHJldHVybiB7XG4gICAgb3duRmllbGQsXG4gICAgcmVsYXRpb25GaWVsZFxuICB9XG59O1xuXG5wcm90by5jcmVhdGVFZGl0aW5nRGF0YU9wdGlvbnMgPSBmdW5jdGlvbihmaWx0ZXJUeXBlPSdhbGwnLCBvcHRpb25zPXt9KSB7XG4gIGNvbnN0IHtmZWF0dXJlLCByZWxhdGlvbiwgZmllbGQsIGxheWVySWQsIG9wZXJhdG9yfSA9IG9wdGlvbnM7XG4gIGxldCBmaWx0ZXI7XG4gIHN3aXRjaCAoZmlsdGVyVHlwZSkge1xuICAgIC8vY2FzZSBhbGwgbGVhdmUgZmlsdGVyIHVuZGVmaW5lZFxuICAgIGNhc2UgJ2FsbCc6XG4gICAgYnJlYWs7XG4gICAgY2FzZSAnYmJveCc6XG4gICAgICBmaWx0ZXIgPSB7XG4gICAgICAgIGJib3g6IHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwQkJPWCgpXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmllbGQnOiAvLyBjYXNlIG9mIGZpZWxkXG4gICAgICBmaWx0ZXIgPSB7XG4gICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgZmllbGQsXG4gICAgICAgICAgdHlwZTogJ2VkaXRpbmcnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmaWQnOlxuICAgICAgLy8gY2FzZSB0byBnZXQgcmVsYXRpb25zIG9mIGN1cnJlbnQgZmVhdHVyZVxuICAgICAgaWYgKG9wZXJhdG9yICE9PSAnbm90JylcbiAgICAgICAgZmlsdGVyID0ge1xuICAgICAgICAgIGZpZDoge1xuICAgICAgICAgICAgZmlkOiBmZWF0dXJlLmdldElkKCksXG4gICAgICAgICAgICBsYXllcjoge1xuICAgICAgICAgICAgICBpZDogbGF5ZXJJZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6ICdlZGl0aW5nJyxcbiAgICAgICAgICAgIHJlbGF0aW9uOiByZWxhdGlvbi5zdGF0ZSxcbiAgICAgICAgICAgIGZvcm1hdHRlcjogMCAvL2FkZCBmb3JtYXR0ZXIgMCB0byBnZXQgc3RvcmVkIHZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZWdpc3RlckV2ZW50czogdHJ1ZSwgLy8gdXNlZnVsdCB0byBnZXQgcmVnaXN0ZXIgdmVudCBvbiB0b29sYm94IGV4YW1wbGUgbWFwbW92ZWVuZFxuICAgIGVkaXRpbmc6IHRydWUsXG4gICAgZmlsdGVyXG4gIH1cbn07XG5cbnByb3RvLl9nZXRGZWF0dXJlc0J5TGF5ZXJJZCA9IGZ1bmN0aW9uKGxheWVySWQpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpLnJlYWRFZGl0aW5nRmVhdHVyZXMoKTtcbn07XG5cbnByb3RvLmdldExheWVyc0RlcGVuZGVuY3lGZWF0dXJlc0Zyb21Tb3VyY2UgPSBmdW5jdGlvbih7bGF5ZXJJZCwgcmVsYXRpb24sIGZlYXR1cmUsIG9wZXJhdG9yPSdlcSd9PXt9KXtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5fZ2V0RmVhdHVyZXNCeUxheWVySWQobGF5ZXJJZCk7XG4gICAgY29uc3Qge293bkZpZWxkLCByZWxhdGlvbkZpZWxkfSA9IHRoaXMuX2dldFJlbGF0aW9uRmllbGRzRnJvbVJlbGF0aW9uKHtcbiAgICAgIGxheWVySWQsXG4gICAgICByZWxhdGlvblxuICAgIH0pO1xuICAgIGNvbnN0IGZlYXR1cmVWYWx1ZSA9IGZlYXR1cmUuZ2V0KHJlbGF0aW9uRmllbGQpO1xuICAgIGNvbnN0IGZpbmQgPSBvcGVyYXRvciA9PT0gJ2VxJyA/IGZlYXR1cmVzLmZpbmQoZmVhdHVyZVNvdXJjZSA9PiB7XG4gICAgICBjb25zdCBmZWF0dXJlU291cmNlVmFsdWUgPSBmZWF0dXJlU291cmNlLmdldChvd25GaWVsZCkgO1xuICAgICAgcmV0dXJuIGZlYXR1cmVTb3VyY2VWYWx1ZSA9PSBmZWF0dXJlVmFsdWU7XG4gICAgfSk6IGZhbHNlO1xuICAgIHJlc29sdmUoZmluZCk7XG4gIH0pXG59O1xuXG5wcm90by5fZ2V0UmVsYXRpb25JZCA9IGZ1bmN0aW9uKHtsYXllcklkLCByZWxhdGlvbn09e30pIHtcbiAgY29uc3QgZmF0aGVySWQgPSByZWxhdGlvbi5nZXRGYXRoZXIgPyByZWxhdGlvbi5nZXRGYXRoZXIoKSA6IHJlbGF0aW9uLmZhdGhlcjtcbiAgY29uc3QgY2hpbGRJZCA9IHJlbGF0aW9uLmdldENoaWxkID8gcmVsYXRpb24uZ2V0Q2hpbGQoKSA6IHJlbGF0aW9uLmNoaWxkO1xuICByZXR1cm4gZmF0aGVySWQgPT09IGxheWVySWQgPyBjaGlsZElkOiBmYXRoZXJJZDtcbn07XG5cbnByb3RvLmdldExheWVyc0RlcGVuZGVuY3lGZWF0dXJlcyA9IGZ1bmN0aW9uKGxheWVySWQsIG9wdHM9e30pIHtcbiAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldExheWVyQnlJZChsYXllcklkKTtcbiAgY29uc3QgcmVsYXRpb25zID0gb3B0cy5yZWxhdGlvbnMgPyBvcHRzLnJlbGF0aW9ucyA6IGxheWVyLmdldENoaWxkcmVuKCkubGVuZ3RoICYmIGxheWVyLmdldFJlbGF0aW9ucygpID8gdGhpcy5fZmlsdGVyUmVsYXRpb25zSW5FZGl0aW5nKHtcbiAgICByZWxhdGlvbnM6IGxheWVyLmdldFJlbGF0aW9ucygpLmdldEFycmF5KCkuZmlsdGVyKHJlbGF0aW9uID0+IHJlbGF0aW9uLmdldEZhdGhlcigpID09PSBsYXllcklkKSxcbiAgICBsYXllcklkXG4gIH0pIDogW107XG4gIGNvbnN0IG9ubGluZSA9IEFwcGxpY2F0aW9uU3RhdGUub25saW5lO1xuICByZWxhdGlvbnMuZm9yRWFjaChyZWxhdGlvbiA9PiB7XG4gICAgaWYgKHJlbGF0aW9uLnNldExvYWRpbmcpIHJlbGF0aW9uLnNldExvYWRpbmcodHJ1ZSk7XG4gICAgZWxzZSByZWxhdGlvbi5sb2FkaW5nID0gdHJ1ZTtcbiAgICBjb25zdCBpZCA9IHRoaXMuX2dldFJlbGF0aW9uSWQoe1xuICAgICAgbGF5ZXJJZCxcbiAgICAgIHJlbGF0aW9uXG4gICAgfSk7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgZmlsdGVyVHlwZSA9IG9wdHMuZmlsdGVyVHlwZSB8fCAnZmlkJztcbiAgICAgIG9wdHMucmVsYXRpb24gPSByZWxhdGlvbjtcbiAgICAgIG9wdHMubGF5ZXJJZCA9IGxheWVySWQ7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jcmVhdGVFZGl0aW5nRGF0YU9wdGlvbnMoZmlsdGVyVHlwZSwgb3B0cyk7XG4gICAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5fc2Vzc2lvbnNbaWRdO1xuICAgICAgY29uc3QgdG9vbGJveCA9IHRoaXMuZ2V0VG9vbEJveEJ5SWQoaWQpO1xuICAgICAgaWYgKG9ubGluZSAmJiBzZXNzaW9uKSB7XG4gICAgICAgIHRvb2xib3guc3RhcnRMb2FkaW5nKCk7XG4gICAgICAgIGlmICghc2Vzc2lvbi5pc1N0YXJ0ZWQoKSlcbiAgICAgICAgICBzZXNzaW9uLnN0YXJ0KG9wdGlvbnMpXG4gICAgICAgICAgICAuYWx3YXlzKChwcm9taXNlKSA9PiB7XG4gICAgICAgICAgICAgIHByb21pc2UuYWx3YXlzKCgpPT57XG4gICAgICAgICAgICAgICAgdG9vbGJveC5zdG9wTG9hZGluZygpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoaWQpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuZ2V0TGF5ZXJzRGVwZW5kZW5jeUZlYXR1cmVzRnJvbVNvdXJjZSh7XG4gICAgICAgICAgICBsYXllcklkOiBpZCxcbiAgICAgICAgICAgIHJlbGF0aW9uLFxuICAgICAgICAgICAgZmVhdHVyZTogb3B0cy5mZWF0dXJlLFxuICAgICAgICAgICAgb3BlcmF0b3I6IG9wdHMub3BlcmF0b3JcbiAgICAgICAgICB9KS50aGVuKGZpbmQgPT57XG4gICAgICAgICAgICBpZiAoZmluZCkge1xuICAgICAgICAgICAgICByZXNvbHZlKGlkKTtcbiAgICAgICAgICAgICAgdG9vbGJveC5zdG9wTG9hZGluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2Vzc2lvbi5nZXRGZWF0dXJlcyhvcHRpb25zKS5hbHdheXMocHJvbWlzZSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5hbHdheXMoKCk9PntcbiAgICAgICAgICAgICAgICAgIHRvb2xib3guc3RvcExvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdldExheWVyc0RlcGVuZGVuY3lGZWF0dXJlc0Zyb21Tb3VyY2Uoe1xuICAgICAgICAgIGxheWVySWQ6IGlkLFxuICAgICAgICAgIHJlbGF0aW9uLFxuICAgICAgICAgIGZlYXR1cmU6IG9wdHMuZmVhdHVyZSxcbiAgICAgICAgICBvcGVyYXRvcjogb3B0cy5vcGVyYXRvclxuICAgICAgICB9KS50aGVuKCgpPT5yZXNvbHZlKGlkKSlcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuICB9KTtcbiAgLy8gYXQgdGhlIGVuZCBzZSBsb2FkaW5nIGZhbHNlXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS5maW5hbGx5KCgpPT4gcmVsYXRpb25zLmZvckVhY2gocmVsYXRpb24gPT4ge1xuICAgIGlmIChyZWxhdGlvbi5zZXRMb2FkaW5nKSByZWxhdGlvbi5zZXRMb2FkaW5nKGZhbHNlKTtcbiAgICBlbHNlIHJlbGF0aW9uLmxvYWRpbmcgPSBmYWxzZTtcbiAgfSkpO1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxucHJvdG8uY29tbWl0RGlydHlUb29sQm94ZXMgPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBjb25zdCB0b29sYm94ID0gdGhpcy5nZXRUb29sQm94QnlJZChsYXllcklkKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuZ2V0TGF5ZXJCeUlkKGxheWVySWQpLmdldENoaWxkcmVuKCk7XG4gICAgaWYgKHRvb2xib3guaXNEaXJ0eSgpICYmIHRvb2xib3guaGFzRGVwZW5kZW5jaWVzKCkpIHtcbiAgICAgIHRoaXMuY29tbWl0KHRvb2xib3gpXG4gICAgICAgIC5mYWlsKCgpID0+IHtcbiAgICAgICAgICB0b29sYm94LnJldmVydCgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIHRvb2xib3guZ2V0RGVwZW5kZW5jaWVzKCkuZm9yRWFjaCgobGF5ZXJJZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmluZGV4T2YobGF5ZXJJZCkgIT09IC0xICYmIHRoaXMuZ2V0VG9vbEJveEJ5SWQobGF5ZXJJZCkucmV2ZXJ0KCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAuYWx3YXlzKCgpID0+IHJlc29sdmUodG9vbGJveCkpXG4gICAgfSBlbHNlXG4gICAgICByZXNvbHZlKHRvb2xib3gpO1xuICB9KTtcbn07XG5cbnByb3RvLl9jcmVhdGVDb21taXRNZXNzYWdlID0gZnVuY3Rpb24oY29tbWl0SXRlbXMpIHtcbiAgZnVuY3Rpb24gY3JlYXRlX2NoYW5nZXNfbGlzdF9kb21fZWxlbWVudChhZGQsIHVwZGF0ZSwgZGVsKSB7XG4gICAgY29uc3QgY2hhbmdlSWRzID0ge307XG4gICAgY2hhbmdlSWRzW2Ake3QoJ2VkaXRpbmcubWVzc2FnZXMuY29tbWl0LmFkZCcpfWBdID0gYWRkLmxlbmd0aDtcbiAgICBjaGFuZ2VJZHNbYCR7dCgnZWRpdGluZy5tZXNzYWdlcy5jb21taXQudXBkYXRlJyl9YF0gPSBgWyR7dXBkYXRlLm1hcCgoaXRlbSk9PiBpdGVtLmlkKS5qb2luKCcsJyl9XWA7XG4gICAgY2hhbmdlSWRzW2Ake3QoJ2VkaXRpbmcubWVzc2FnZXMuY29tbWl0LmRlbGV0ZScpfWBdID0gYFske2RlbC5qb2luKCcsJyl9XWA7XG4gICAgbGV0IGRvbSA9IGA8aDQ+JHt0KCdlZGl0aW5nLm1lc3NhZ2VzLmNvbW1pdC5oZWFkZXInKX08L2g0PmA7XG4gICAgZG9tKz1gPGg1PiR7dCgnZWRpdGluZy5tZXNzYWdlcy5jb21taXQuaGVhZGVyX2FkZCcpfTwvaDU+YDtcbiAgICBkb20rPWA8aDU+JHt0KCdlZGl0aW5nLm1lc3NhZ2VzLmNvbW1pdC5oZWFkZXJfdXBkYXRlX2RlbGV0ZScpfTwvaDU+YDtcbiAgICBkb20rPSBgPHVsIHN0eWxlPSdib3JkZXItYm90dG9tLWNvbG9yOiAjZjRmNGY0Oyc+YDtcbiAgICBPYmplY3QuZW50cmllcyhjaGFuZ2VJZHMpLmZvckVhY2goKFthY3Rpb24sIGlkc10pID0+IHtcbiAgICAgIGRvbSArPSBgPGxpPiR7YWN0aW9ufSA6ICR7aWRzfSA8L2xpPmA7XG4gICAgfSk7XG4gICAgZG9tICs9IGA8L3VsPmA7XG4gICAgcmV0dXJuIGRvbTtcbiAgfVxuXG4gIGxldCBtZXNzYWdlID0gXCJcIjtcbiAgbWVzc2FnZSArPSBjcmVhdGVfY2hhbmdlc19saXN0X2RvbV9lbGVtZW50KGNvbW1pdEl0ZW1zLmFkZCwgY29tbWl0SXRlbXMudXBkYXRlLCBjb21taXRJdGVtcy5kZWxldGUpO1xuICBpZiAoIV8uaXNFbXB0eShjb21taXRJdGVtcy5yZWxhdGlvbnMpKSB7XG4gICAgbWVzc2FnZSArPSBcIjxkaXYgc3R5bGU9J2hlaWdodDoxcHg7IGJhY2tncm91bmQ6I2Y0ZjRmNDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZjRmNGY0Oyc+PC9kaXY+XCI7XG4gICAgbWVzc2FnZSArPSBcIjxkaXYgc3R5bGU9J21hcmdpbi1sZWZ0OiA0MCUnPjxoND5cIisgdCgnZWRpdGluZy5yZWxhdGlvbnMnKSArXCI8L2g0PjwvZGl2PlwiO1xuICAgIE9iamVjdC5lbnRyaWVzKGNvbW1pdEl0ZW1zLnJlbGF0aW9ucykuZm9yRWFjaCgoWyByZWxhdGlvbk5hbWUsIGNvbW1pdHNdKSA9PiB7XG4gICAgICBtZXNzYWdlICs9ICBcIjxkaXY+PHNwYW4gc3R5bGU9J2ZvbnQtd2VpZ2h0OiBib2xkJz5cIiArIHJlbGF0aW9uTmFtZSArIFwiPC9zcGFuPjwvZGl2PlwiO1xuICAgICAgbWVzc2FnZSArPSBjcmVhdGVfY2hhbmdlc19saXN0X2RvbV9lbGVtZW50KGNvbW1pdHMuYWRkLCBjb21taXRzLnVwZGF0ZSwgY29tbWl0cy5kZWxldGUpO1xuICAgIH0pXG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuXG5wcm90by5zaG93Q29tbWl0TW9kYWxXaW5kb3cgPSBmdW5jdGlvbih7bGF5ZXIsIGNvbW1pdEl0ZW1zLCBjbG9zZSwgY29tbWl0UHJvbWlzZX0pIHtcbiAgLy8gbWVzc2FnZXMgc2V0IHRvIGNvbW1pdFxuICBjb25zdCBtZXNzYWdlcyA9IHtcbiAgICBzdWNjZXNzOiB7XG4gICAgICBtZXNzYWdlOiBcInBsdWdpbnMuZWRpdGluZy5tZXNzYWdlcy5zYXZlZFwiLFxuICAgICAgYXV0b2Nsb3NlOiB0cnVlXG4gICAgfSxcbiAgICBlcnJvcjoge31cbiAgfTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT57XG4gICAgY29uc3Qgd29ya2Zsb3cgPSBuZXcgQ29tbWl0RmVhdHVyZXNXb3JrZmxvdyh7XG4gICAgICB0eXBlOiAnY29tbWl0J1xuICAgIH0pO1xuICAgIHdvcmtmbG93LnN0YXJ0KHtcbiAgICAgIGlucHV0czoge1xuICAgICAgICBsYXllcixcbiAgICAgICAgbWVzc2FnZTogdGhpcy5fY3JlYXRlQ29tbWl0TWVzc2FnZShjb21taXRJdGVtcyksXG4gICAgICAgIGNsb3NlXG4gICAgICB9XG4gICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3QgZGlhbG9nID0gR1VJLmRpYWxvZy5kaWFsb2coe1xuICAgICAgICAgIG1lc3NhZ2U6IGA8aDQgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPjxpIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA1cHg7XCIgY2xhc3M9JHtHVUkuZ2V0Rm9udENsYXNzKCdzcGlubmVyJyl9PjwvaT4ke3QoJ2VkaXRpbmcubWVzc2FnZXMuc2F2aW5nJyl9PC9oND5gLFxuICAgICAgICAgIGNsb3NlQnV0dG9uOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7XG4gICAgICAgIGNvbW1pdFByb21pc2UuYWx3YXlzKCgpPT5kaWFsb2cubW9kYWwoJ2hpZGUnKSkgLy8gaGlkZSBzYXZpbmcgZGlhbG9nXG4gICAgICB9KVxuICAgICAgLmZhaWwoZXJyb3IgPT4gcmVqZWN0KGVycm9yKSlcbiAgICAgIC5hbHdheXMoKCk9PiB3b3JrZmxvdy5zdG9wKCkpXG4gIH0pXG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uY2FsbGVkIHZlcnkgc2luZ2xlIGNoYW5nZSBzYXZlZCB0ZW1wb3JhcnlcbiAqL1xucHJvdG8uc2F2ZUNoYW5nZSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBzd2l0Y2ggKHRoaXMuc2F2ZUNvbmZpZy5tb2RlKSB7XG4gICAgY2FzZSAnYXV0b3NhdmUnOlxuICAgICAgcmV0dXJuIHRoaXMuY29tbWl0KHtcbiAgICAgICAgbW9kYWw6IGZhbHNlIC8vIHNldCB0byBub3Qgc2hvdyBtb2RhbCBhc2sgd2luZG93XG4gICAgICB9KTtcbiAgfVxufTtcblxucHJvdG8uYWRkTGF5ZXJzRmVhdHVyZXNUb1Nob3dPblJlc3VsdCA9IGZ1bmN0aW9uKHtsYXllcklkLCBmaWRzPVtdfSl7XG4gIGlmICh0aGlzLmxvYWRMYXllcnNGZWF0dXJlc1RvUmVzdWx0V2hlbkNsb3NlRWRpdGluZ1tsYXllcklkXSA9PT0gdW5kZWZpbmVkKVxuICAgIHRoaXMubG9hZExheWVyc0ZlYXR1cmVzVG9SZXN1bHRXaGVuQ2xvc2VFZGl0aW5nW2xheWVySWRdID0gbmV3IFNldCgpO1xuICBmaWRzLmZvckVhY2goZmlkID0+IHRoaXMubG9hZExheWVyc0ZlYXR1cmVzVG9SZXN1bHRXaGVuQ2xvc2VFZGl0aW5nW2xheWVySWRdLmFkZChmaWQpKVxufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gY2xvc2UgZWRpdGluZ3BhbmVsIHBhbmVsXG4gKi9cbnByb3RvLm9uQ2xvc2VFZGl0aW5nUGFuZWwgPSBhc3luYyBmdW5jdGlvbigpe1xuICBhd2FpdCB0aGlzLnNob3dDaGFuZ2VzVG9SZXN1bHQoKTtcbiAgdGhpcy5nZXRUb29sQm94ZXMoKS5mb3JFYWNoKHRvb2xib3ggPT4gdG9vbGJveC5yZXNldERlZmF1bHQoKSk7XG59O1xuXG4vKipcbiAqXG4gKiBNZXRob2QgdG8gc2hvdyBmZWF0dXJlIHRoYXQgYXJlIHVwZGF0ZWQgb3IgY3JlYXRlZCB3aXRoIGVkaXRpbmcgb24gcmVzdWx0IGNvbnRlbnRcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5wcm90by5zaG93Q2hhbmdlc1RvUmVzdWx0ID0gYXN5bmMgZnVuY3Rpb24oKXtcbiAgY29uc3QgbGF5ZXJJZENoYW5nZXMgPSBPYmplY3Qua2V5cyh0aGlzLmxvYWRMYXllcnNGZWF0dXJlc1RvUmVzdWx0V2hlbkNsb3NlRWRpdGluZyk7XG4gIGlmIChsYXllcklkQ2hhbmdlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBpbnB1dHMgPSB7XG4gICAgICBsYXllcnM6IFtdLFxuICAgICAgZmlkczogW10sXG4gICAgICBmb3JtYXR0ZXI6IDFcbiAgICB9O1xuICAgIGxheWVySWRDaGFuZ2VzLmZvckVhY2gobGF5ZXJJZCA9PiB7XG4gICAgICBjb25zdCBmaWRzID0gWy4uLnRoaXMubG9hZExheWVyc0ZlYXR1cmVzVG9SZXN1bHRXaGVuQ2xvc2VFZGl0aW5nW2xheWVySWRdXTtcbiAgICAgIGlmIChmaWRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBsYXllciA9IENhdGFsb2dMYXllcnNTdG9yZXNSZWdpc3RyeS5nZXRMYXllckJ5SWQobGF5ZXJJZCk7XG4gICAgICAgIGlucHV0cy5sYXllcnMucHVzaChsYXllcik7XG4gICAgICAgIGlucHV0cy5maWRzLnB1c2goZmlkcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgcHJvbWlzZSA9IGlucHV0cy5sYXllcnMubGVuZ3RoID8gRGF0YVJvdXRlclNlcnZpY2UuZ2V0RGF0YSgnc2VhcmNoOmxheWVyc2ZpZHMnLCB7XG4gICAgICBpbnB1dHMsXG4gICAgICBvdXRwdXRzOiB7XG4gICAgICAgIHRpdGxlOiAncGx1Z2lucy5lZGl0aW5nLmVkaXRpbmdfY2hhbmdlcycsXG4gICAgICAgIHNob3c6IHtcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJvbWlzZTtcbiAgICB9IGNhdGNoKGVycikge31cbiAgfVxuICB0aGlzLmxvYWRMYXllcnNGZWF0dXJlc1RvUmVzdWx0V2hlbkNsb3NlRWRpdGluZyA9IHt9O1xufTtcblxuLyoqXG4gKiBNZXR5aG9kIHRvIGNvbW1pdCBhbmQgc2F2ZSBjaGFuZ2VzIG9uIHNlcnZlciBwZXJzaXN0ZW50bHlcbiAqXG4gKiBAcGFyYW0gdG9vbGJveFxuICogQHBhcmFtIGNvbW1pdEl0ZW1zXG4gKiBAcGFyYW0gbWVzc2FnZXNcbiAqIEBwYXJhbSBkb25lXG4gKiBAcGFyYW0gbW9kYWxcbiAqIEBwYXJhbSBjbG9zZVxuICogQHJldHVybnMgeyp9XG4gKi9cbnByb3RvLmNvbW1pdCA9IGZ1bmN0aW9uKHt0b29sYm94LCBjb21taXRJdGVtcywgbW9kYWw9dHJ1ZSwgY2xvc2U9ZmFsc2V9PXt9KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IGNvbW1pdFByb21pc2UgPSBkLnByb21pc2UoKTtcbiAgY29uc3QgeyBjYj17fSwgbWVzc2FnZXM9e3N1Y2Nlc3M6e30sIGVycm9yOnt9fSB9ID0gdGhpcy5zYXZlQ29uZmlnO1xuICB0b29sYm94ID0gdG9vbGJveCB8fCB0aGlzLnN0YXRlLnRvb2xib3hzZWxlY3RlZDtcbiAgbGV0IHNlc3Npb24gPSB0b29sYm94LmdldFNlc3Npb24oKTtcbiAgbGV0IGxheWVyID0gdG9vbGJveC5nZXRMYXllcigpO1xuICBjb25zdCBsYXllclR5cGUgPSBsYXllci5nZXRUeXBlKCk7XG4gIGNvbnN0IGl0ZW1zID0gY29tbWl0SXRlbXM7XG4gIGNvbW1pdEl0ZW1zID0gY29tbWl0SXRlbXMgfHwgc2Vzc2lvbi5nZXRDb21taXRJdGVtcygpO1xuICBjb25zdCB7YWRkPVtdLCBkZWxldGU6Y2FuY2VsPVtdLCB1cGRhdGU9W10sIHJlbGF0aW9ucz17fX0gPSBjb21taXRJdGVtcztcbiAgaWYgKFsuLi5hZGQsIC4uLmNhbmNlbCwgLi4udXBkYXRlLCAuLi5PYmplY3Qua2V5cyhyZWxhdGlvbnMpXS5sZW5ndGggPT09IDApIHtcbiAgICBHVUkuc2hvd1VzZXJNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICdpbmZvJyxcbiAgICAgIG1lc3NhZ2U6ICdOb3RoaW5nIHRvIHNhdmUnLFxuICAgICAgYXV0b2Nsb3NlOiB0cnVlLFxuICAgICAgY2xvc2FibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgZC5yZXNvbHZlKHRvb2xib3gpO1xuICAgIHJldHVybiBkLnByb21pc2UoKTtcbiAgfVxuICBjb25zdCBwcm9taXNlID0gbW9kYWwgPyB0aGlzLnNob3dDb21taXRNb2RhbFdpbmRvdyh7XG4gICAgbGF5ZXIsXG4gICAgY29tbWl0SXRlbXMsXG4gICAgY2xvc2UsXG4gICAgY29tbWl0UHJvbWlzZSAvLyBhZGQgYSBjb21taXQgcHJvbWlzZVxuICB9KSA6IFByb21pc2UucmVzb2x2ZShtZXNzYWdlcyk7XG4gIHByb21pc2VcbiAgICAudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgaWYgKEFwcGxpY2F0aW9uU3RhdGUub25saW5lKSB7XG4gICAgICBzZXNzaW9uLmNvbW1pdCh7aXRlbXM6IGl0ZW1zIHx8IGNvbW1pdEl0ZW1zfSlcbiAgICAgICAgLnRoZW4oKGNvbW1pdEl0ZW1zLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChBcHBsaWNhdGlvblN0YXRlLm9ubGluZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICAgICAgICBjb25zdCB7YXV0b2Nsb3NlPXRydWUsIG1lc3NhZ2U9XCJwbHVnaW5zLmVkaXRpbmcubWVzc2FnZXMuc2F2ZWRcIn0gPSBtZXNzYWdlcy5zdWNjZXNzO1xuICAgICAgICAgICAgICBpZiAobWVzc2FnZXMgJiYgbWVzc2FnZXMuc3VjY2VzcykgR1VJLnNob3dVc2VyTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMDAsXG4gICAgICAgICAgICAgICAgYXV0b2Nsb3NlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBsYXllclR5cGUgPT09IExheWVyLkxheWVyVHlwZXMuVkVDVE9SICYmIHRoaXMuX21hcFNlcnZpY2UucmVmcmVzaE1hcCh7Zm9yY2U6IHRydWV9KTtcbiAgICAgICAgICAgICAgY2IuZG9uZSAmJiBjYi5kb25lIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgY2IuZG9uZSh0b29sYm94KTtcbiAgICAgICAgICAgICAgdGhpcy5hZGRMYXllcnNGZWF0dXJlc1RvU2hvd09uUmVzdWx0KHtcbiAgICAgICAgICAgICAgICBsYXllcklkOiB0b29sYm94LmdldElkKCksXG4gICAgICAgICAgICAgICAgZmlkczogWy4uLnJlc3BvbnNlLnJlc3BvbnNlLm5ldy5tYXAoKHtpZH0pID0+IGlkKSwgLi4uY29tbWl0SXRlbXMudXBkYXRlLm1hcCh1cGRhdGUgPT4gdXBkYXRlLmlkKV1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgc2VydmVyRXJyb3JQYXJzZXIoe1xuICAgICAgICAgICAgICAgIGVycm9yOiByZXNwb25zZS5lcnJvcnNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHBhcnNlci5wYXJzZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1N0cmluZydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IHthdXRvY2xvc2U9ZmFsc2UsIG1lc3NhZ2V9ID0gbWVzc2FnZXMuZXJyb3I7XG4gICAgICAgICAgICAgIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhbGVydCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSB8fCBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdGV4dE1lc3NhZ2U6ICFtZXNzYWdlLFxuICAgICAgICAgICAgICAgIGF1dG9jbG9zZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY2IuZXJyb3IgJiYgY2IuZXJyb3IgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBjYi5lcnJvcih0b29sYm94LCBtZXNzYWdlIHx8IGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLnJlc29sdmUodG9vbGJveCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuZmFpbCgoZXJyb3I9e30pID0+IHtcbiAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgc2VydmVyRXJyb3JQYXJzZXIoe1xuICAgICAgICAgICAgZXJyb3I6IGVycm9yLmVycm9ycyA/IGVycm9yLmVycm9ycyA6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gcGFyc2VyLnBhcnNlKHtcbiAgICAgICAgICAgIHR5cGU6ICdTdHJpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3Qge2F1dG9jbG9zZSA9IGZhbHNlLCBtZXNzYWdlfSA9IG1lc3NhZ2VzLmVycm9yO1xuICAgICAgICAgIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ2FsZXJ0JyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgdGV4dE1lc3NhZ2U6ICFtZXNzYWdlLFxuICAgICAgICAgICAgYXV0b2Nsb3NlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZC5yZWplY3QodG9vbGJveCk7XG4gICAgICAgICAgY2IuZXJyb3IgJiYgY2IuZXJyb3IgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBjYi5lcnJvcih0b29sYm94LCBtZXNzYWdlIHx8IGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgICAgLy9jYXNlIG9mZmxpbmVcbiAgICB9IGVsc2UgdGhpcy5zYXZlT2ZmbGluZUl0ZW0oe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBbc2Vzc2lvbi5nZXRJZCgpXTogY29tbWl0SXRlbXNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpZDogT0ZGTElORV9JVEVNUy5DSEFOR0VTXG4gICAgICAgICAgfSkudGhlbigoKSA9PntcbiAgICAgICAgICAgIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwicGx1Z2lucy5lZGl0aW5nLm1lc3NhZ2VzLnNhdmVkX2xvY2FsXCIsXG4gICAgICAgICAgICAgIGF1dG9jbG9zZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXNzaW9uLmNsZWFySGlzdG9yeSgpO1xuICAgICAgICAgICAgZC5yZXNvbHZlKHRvb2xib3gpO1xuICAgICAgICAgIH0pLmNhdGNoKGVycm9yPT57XG4gICAgICAgICAgICBHVUkuc2hvd1VzZXJNZXNzYWdlKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FsZXJ0JyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgICAgICAgICAgIHRleHRNZXNzYWdlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkLnJlamVjdCh0b29sYm94KTtcbiAgICAgICAgICB9KVxuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGQucmVqZWN0KHRvb2xib3gpXG4gIH0pO1xuICByZXR1cm4gY29tbWl0UHJvbWlzZTtcbn07XG5cbi8qKlxuICogVW5pcXVlIGZpZWxkIGxheWVyIHZhbHVlcyBoYW5kbGVyXG4gKi9cblxucHJvdG8uY2xlYXJBbGxMYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXMgPSBmdW5jdGlvbigpe1xuICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlcyA9IHt9O1xufTtcblxucHJvdG8uY2xlYXJMYXllclVuaXF1ZUZpZWxkc1ZhbHVlcyA9IGZ1bmN0aW9uKGxheWVySWQpe1xuICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXSA9IHt9O1xufTtcblxucHJvdG8ucmVtb3ZlTGF5ZXJVbmlxdWVGaWVsZFZhbHVlc0Zyb21GZWF0dXJlID0gZnVuY3Rpb24oe2xheWVySWQsIGZlYXR1cmV9KSB7XG4gIGlmICh0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXSkge1xuICAgIE9iamVjdC5rZXlzKGZlYXR1cmUuZ2V0UHJvcGVydGllcygpKS5mb3JFYWNoKHByb3BlcnR5ID0+e1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXVtwcm9wZXJ0eV0gIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW3Byb3BlcnR5XS5kZWxldGUoZmVhdHVyZS5nZXQocHJvcGVydHkpKTtcbiAgICB9KVxuICB9XG59O1xuXG5wcm90by5yZW1vdmVSZWxhdGlvbkxheWVyVW5pcXVlRmllbGRWYWx1ZXNGcm9tRmVhdHVyZSA9IGZ1bmN0aW9uKHtsYXllcklkLCByZWxhdGlvbkxheWVySWQsIGZlYXR1cmV9KSB7XG4gIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9ucyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tyZWxhdGlvbkxheWVySWRdLl9fdW5pcXVlRmllbGRzVmFsdWVzUmVsYXRpb25zID0ge307XG4gIE9iamVjdC5rZXlzKGZlYXR1cmUuZ2V0UHJvcGVydGllcygpKS5mb3JFYWNoKHByb3BlcnR5ID0+e1xuICAgIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9uc1tsYXllcklkXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW3JlbGF0aW9uTGF5ZXJJZF0uX191bmlxdWVGaWVsZHNWYWx1ZXNSZWxhdGlvbnNbbGF5ZXJJZF0gPSB7fTtcbiAgICBpZiAodHlwZW9mIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW3Byb3BlcnR5XSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9uc1tsYXllcklkXVtwcm9wZXJ0eV0gPSBuZXcgU2V0KHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW3Byb3BlcnR5XSk7XG4gICAgICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tyZWxhdGlvbkxheWVySWRdLl9fdW5pcXVlRmllbGRzVmFsdWVzUmVsYXRpb25zW2xheWVySWRdW3Byb3BlcnR5XS5kZWxldGUoZmVhdHVyZS5nZXQocHJvcGVydHkpKTtcbiAgICB9XG4gIH0pO1xufTtcblxucHJvdG8uc2V0TGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyA9IGFzeW5jIGZ1bmN0aW9uKGxheWVySWQpIHtcbiAgY29uc3QgdW5pcXVlRmllbGRWYWx1ZXNQcm9taXNlcyA9IFtdO1xuICBjb25zdCBsYXllciA9IENhdGFsb2dMYXllcnNTdG9yZXNSZWdpc3RyeS5nZXRMYXllckJ5SWQobGF5ZXJJZCk7XG4gIGxheWVyLmdldEVkaXRpbmdGaWVsZHMoKS5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICBpZiAoZmllbGQudmFsaWRhdGUudW5pcXVlKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuZ2V0TGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7bGF5ZXJJZCwgZmllbGR9KSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbGF5ZXIuZ2V0RmlsdGVyRGF0YSh7dW5pcXVlOiBmaWVsZC5uYW1lfSk7XG4gICAgICAgIHByb21pc2UudGhlbigodmFsdWVzPVtdKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdID0ge307XG4gICAgICAgICAgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbbGF5ZXJJZF1bZmllbGQubmFtZV0gPSBuZXcgU2V0KHZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB1bmlxdWVGaWVsZFZhbHVlc1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKHVuaXF1ZUZpZWxkVmFsdWVzUHJvbWlzZXMpO1xuICByZXR1cm4gdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbbGF5ZXJJZF07XG59O1xuXG4vKipcbiAqIHNhdmUgdGFtcGVyYXJ5IHJlbGF0aW9uIGZlYXR1cmUgY2hhbmdlcyBvbiBmYXRoZXIgKHJvb3QpIGxheWVyIGZlYXR1cmVcbiAqIEBwYXJhbSBsYXllcklkXG4gKi9cbnByb3RvLnNhdmVUZW1wb3JhcnlSZWxhdGlvbnNVbmlxdWVGaWVsZHNWYWx1ZXMgPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbbGF5ZXJJZF0uX191bmlxdWVGaWVsZHNWYWx1ZXNSZWxhdGlvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9ucykuZm9yRWFjaChyZWxhdGlvbkxheWVySWQgPT57XG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9uc1tyZWxhdGlvbkxheWVySWRdKS5mb3JFYWNoKChbZmllbGROYW1lLCB1bmlxdWVWYWx1ZXNdKSA9PiB7XG4gICAgICAgIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW3JlbGF0aW9uTGF5ZXJJZF1bZmllbGROYW1lXSA9IHVuaXF1ZVZhbHVlcztcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgdGhpcy5jbGVhclRlbXBvcmFyeVJlbGF0aW9uc1VuaXF1ZUZpZWxkc1ZhbHVlcyhsYXllcklkKTtcbiAgfVxufTtcblxucHJvdG8uY2xlYXJUZW1wb3JhcnlSZWxhdGlvbnNVbmlxdWVGaWVsZHNWYWx1ZXMgPSBmdW5jdGlvbihsYXllcklkKSB7XG4gIGRlbGV0ZSB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9ucztcbn07XG5cbnByb3RvLmdldExheWVyVW5pcXVlRmllbGRWYWx1ZXMgPSBmdW5jdGlvbih7bGF5ZXJJZCwgZmllbGR9KXtcbiAgcmV0dXJuIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdICYmIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW2ZpZWxkLm5hbWVdO1xufTtcblxucHJvdG8uZ2V0Q2hpbGRMYXllclVuaXF1ZUZpZWxkVmFsdWVzID0gZnVuY3Rpb24oe2xheWVySWQsIHJlbGF0aW9uTGF5ZXJJZCwgZmllbGR9KSB7XG4gIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9ucyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9uc1tsYXllcklkXSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9uc1tsYXllcklkXVtmaWVsZC5uYW1lXSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW3JlbGF0aW9uTGF5ZXJJZF0uX191bmlxdWVGaWVsZHNWYWx1ZXNSZWxhdGlvbnNbbGF5ZXJJZF1bZmllbGQubmFtZV1cbiAgfSBcbiAgcmV0dXJuIHRoaXMuZ2V0TGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7XG4gICAgbGF5ZXJJZCxcbiAgICBmaWVsZFxuICB9KVxufTtcblxucHJvdG8uY2hhbmdlTGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyA9IGZ1bmN0aW9uKHtsYXllcklkLCBmaWVsZCwgb2xkVmFsdWUsIG5ld1ZhbHVlfSl7XG4gIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW2ZpZWxkLm5hbWVdLmRlbGV0ZShvbGRWYWx1ZSk7XG4gIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW2ZpZWxkLm5hbWVdLmFkZChuZXdWYWx1ZSk7XG59O1xuXG5wcm90by5jaGFuZ2VSZWxhdGlvbkxheWVyVW5pcXVlRmllbGRWYWx1ZXMgPSBmdW5jdGlvbih7bGF5ZXJJZCwgcmVsYXRpb25MYXllcklkLCBmaWVsZCwgb2xkVmFsdWUsIG5ld1ZhbHVlfSl7XG4gIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9ucyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tyZWxhdGlvbkxheWVySWRdLl9fdW5pcXVlRmllbGRzVmFsdWVzUmVsYXRpb25zID0ge307XG4gIGlmICh0eXBlb2YgdGhpcy5sYXllcnNVbmlxdWVGaWVsZHNWYWx1ZXNbcmVsYXRpb25MYXllcklkXS5fX3VuaXF1ZUZpZWxkc1ZhbHVlc1JlbGF0aW9uc1tsYXllcklkXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tyZWxhdGlvbkxheWVySWRdLl9fdW5pcXVlRmllbGRzVmFsdWVzUmVsYXRpb25zW2xheWVySWRdID0ge307XG4gIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW3JlbGF0aW9uTGF5ZXJJZF0uX191bmlxdWVGaWVsZHNWYWx1ZXNSZWxhdGlvbnNbbGF5ZXJJZF1bZmllbGQubmFtZV0gPSBuZXcgU2V0KHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW2ZpZWxkLm5hbWVdKVxuICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tyZWxhdGlvbkxheWVySWRdLl9fdW5pcXVlRmllbGRzVmFsdWVzUmVsYXRpb25zW2xheWVySWRdW2ZpZWxkLm5hbWVdLmRlbGV0ZShvbGRWYWx1ZSk7XG4gIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW3JlbGF0aW9uTGF5ZXJJZF0uX191bmlxdWVGaWVsZHNWYWx1ZXNSZWxhdGlvbnNbbGF5ZXJJZF1bZmllbGQubmFtZV0uYWRkKG5ld1ZhbHVlKTtcbn07XG5cbnByb3RvLmFkZExheWVyVW5pcXVlRmllbGRWYWx1ZSA9IGZ1bmN0aW9uKHtsYXllcklkLCBmaWVsZCwgdmFsdWV9KSB7XG4gIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdW2ZpZWxkLm5hbWVdLmFkZCh2YWx1ZSk7XG59O1xuXG5wcm90by5kZWxldGVMYXllclVuaXF1ZUZpZWxkVmFsdWUgPSBmdW5jdGlvbih7bGF5ZXJJZCwgZmllbGQsIHZhbHVlfSkge1xuICB0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXVtmaWVsZC5uYW1lXS5kZWxldGUodmFsdWUpO1xufTtcblxucHJvdG8udW5kb1JlZG9MYXllclVuaXF1ZUZpZWxkVmFsdWVzID0gZnVuY3Rpb24oe2xheWVySWQsIHNlc3Npb25JdGVtcz1bXSwgYWN0aW9ufSkge1xuICBpZiAodHlwZW9mIHRoaXMubGF5ZXJzVW5pcXVlRmllbGRzVmFsdWVzW2xheWVySWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgc2Vzc2lvbkl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmxheWVyc1VuaXF1ZUZpZWxkc1ZhbHVlc1tsYXllcklkXSkuZm9yRWFjaChuYW1lID0+e1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIGNhc2Ugb2YgdXBkYXRlIGZlYXR1cmUgdGhhdCBjb250YWluIG5ldyBhbmQgb2wgdmFsdWVzIG9mIGZlYXR1cmVcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdCBbe2ZlYXR1cmU6b2xkZmVhdHVyZX0sIHtmZWF0dXJlOm5ld2ZlYXR1cmV9XSA9IGl0ZW07XG4gICAgICAgICAgaWYgKG5ld2ZlYXR1cmUuZ2V0KG5hbWUpICE9IG9sZGZlYXR1cmUuZ2V0KG5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGFjdGlvbiA9PT0gJ3VuZG8nID8gbmV3ZmVhdHVyZS5nZXQobmFtZSkgOiAgb2xkZmVhdHVyZS5nZXQobmFtZSk7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGFjdGlvbiA9PT0gJ3VuZG8nID8gb2xkZmVhdHVyZS5nZXQobmFtZSkgOiAgbmV3ZmVhdHVyZS5nZXQobmFtZSk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZUxheWVyVW5pcXVlRmllbGRWYWx1ZXMoe1xuICAgICAgICAgICAgICBsYXllcklkLFxuICAgICAgICAgICAgICBmaWVsZDoge1xuICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7ZmVhdHVyZX0gPSBpdGVtO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIHR3byBwb3NzaWJsZSBzdGF0ZSAnYWRkJyBvciAnZGVsZXRlJ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3QgZmVhdHVyZVN0YXRlID0gZmVhdHVyZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIGluIGNhc2Ugb2Ygc3RhdGUgYWRkIG9yIGRlbGV0ZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXNbYCR7ZmVhdHVyZVN0YXRlID09PSAnYWRkJyA/ICdkZWxldGUnIDogJ2FkZCd9TGF5ZXJVbmlxdWVGaWVsZFZhbHVlYF0oe1xuICAgICAgICAgICAgbGF5ZXJJZCxcbiAgICAgICAgICAgIGZpZWxkOiB7XG4gICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZTogZmVhdHVyZS5nZXQobmFtZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSlcbiAgfVxufTtcblxucHJvdG8udW5kb1JlZG9SZWxhdGlvblVuaXF1ZUZpZWxkVmFsdWVzID0gZnVuY3Rpb24oe3JlbGF0aW9uU2Vzc2lvbkl0ZW1zLCBhY3Rpb259KXtcbiAgT2JqZWN0LmVudHJpZXMocmVsYXRpb25TZXNzaW9uSXRlbXMpLmZvckVhY2goKFtsYXllcklkLCB7b3duOnNlc3Npb25JdGVtcywgZGVwZW5kZW5jaWVzOnJlbGF0aW9uU2Vzc2lvbkl0ZW1zfV0pPT57XG4gICAgdGhpcy51bmRvUmVkb0xheWVyVW5pcXVlRmllbGRWYWx1ZXMoe1xuICAgICAgbGF5ZXJJZCxcbiAgICAgIHNlc3Npb25JdGVtcyxcbiAgICAgIGFjdGlvblxuICAgIH0pO1xuICAgIHRoaXMudW5kb1JlZG9SZWxhdGlvblVuaXF1ZUZpZWxkVmFsdWVzKHtcbiAgICAgIHJlbGF0aW9uU2Vzc2lvbkl0ZW1zLFxuICAgICAgYWN0aW9uXG4gICAgfSlcbiAgfSlcbn07XG5cbi8qXG4qIGVuZCB1bmlxdWUgZmllbGRzXG4qICovXG5wcm90by5nZXRQcm9qZWN0TGF5ZXJCeUlkID0gZnVuY3Rpb24obGF5ZXJJZCl7XG4gIHJldHVybiBDYXRhbG9nTGF5ZXJzU3RvcmVzUmVnaXN0cnkuZ2V0TGF5ZXJCeUlkKGxheWVySWQpO1xufTtcblxucHJvdG8uZ2V0UHJvamVjdExheWVyRmVhdHVyZUJ5SWQgPSBhc3luYyBmdW5jdGlvbih7bGF5ZXJJZCwgZmlkfSkge1xuICBsZXQgZmVhdHVyZTtcbiAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldFByb2plY3RMYXllckJ5SWQobGF5ZXJJZCk7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBYSFIuZ2V0KHtcbiAgICAgIHVybDogbGF5ZXIuZ2V0VXJsKCdkYXRhJyksXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgZmlkczogZmlkXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZmVhdHVyZXMgPSBnZXRGZWF0dXJlc0Zyb21SZXNwb25zZVZlY3RvckFwaShyZXNwb25zZSk7XG4gICAgaWYgKGZlYXR1cmVzLmxlbmd0aCkgZmVhdHVyZSA9IGZlYXR1cmVzWzBdO1xuICB9IGNhdGNoKGVycikge31cbiAgcmV0dXJuIGZlYXR1cmU7XG59O1xuXG5wcm90by5nZXRQcm9qZWN0TGF5ZXJzV2l0aFNhbWVHZW9tZXRyeU9mTGF5ZXIgPSBmdW5jdGlvbihsYXllciwgb3B0aW9ucz17ZXhjbHVkZTpbXX0pe1xuIGNvbnN0IHtleGNsdWRlPVtdfSA9IG9wdGlvbnM7XG4gY29uc3QgZ2VvbWV0cnlUeXBlID0gbGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCk7XG4gcmV0dXJuIENhdGFsb2dMYXllcnNTdG9yZXNSZWdpc3RyeS5nZXRMYXllcnMoKS5maWx0ZXIobGF5ZXIgPT4ge1xuICAgcmV0dXJuIChsYXllci5pc0dlb0xheWVyKClcbiAgICAgJiYgbGF5ZXIuZ2V0R2VvbWV0cnlUeXBlICYmIGxheWVyLmdldEdlb21ldHJ5VHlwZSgpXG4gICAgICYmIGV4Y2x1ZGUuaW5kZXhPZihsYXllci5nZXRJZCgpKSA9PT0gLTFcbiAgICkgJiYgKGxheWVyLmdldEdlb21ldHJ5VHlwZSgpID09PSBnZW9tZXRyeVR5cGVcbiAgICAgfHwgKGlzU2FtZUJhc2VHZW9tZXRyeVR5cGUobGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCksIGdlb21ldHJ5VHlwZSkgJiYgIEdlb21ldHJ5LmlzTXVsdGlHZW9tZXRyeShnZW9tZXRyeVR5cGUpKVxuICAgKVxuIH0pO1xufTtcblxuLyoqXG4gKiAgcmV0dXJuIChnZW9tZXRyeVR5cGUgPT09IGZlYXR1cmVHZW9tZXRyeVR5cGUpXG4gKiAgfHwgR2VvbWV0cnkuaXNNdWx0aUdlb21ldHJ5KGdlb21ldHJ5VHlwZSlcbiAqICB8fCAhR2VvbWV0cnkuaXNNdWx0aUdlb21ldHJ5KGZlYXR1cmVHZW9tZXRyeVR5cGUpO1xuICovXG5cbnByb3RvLmdldEV4dGVybmFsTGF5ZXJzV2l0aFNhbWVHZW9tZXRyeU9mTGF5ZXIgPSBmdW5jdGlvbihsYXllcil7XG4gIGNvbnN0IGdlb21ldHJ5VHlwZSA9IGxheWVyLmdldEdlb21ldHJ5VHlwZSgpO1xuICByZXR1cm4gdGhpcy5fbWFwU2VydmljZS5nZXRFeHRlcm5hbExheWVycygpLmZpbHRlcihleHRlcm5hbExheWVyID0+IHtcbiAgICBjb25zdCBmZWF0dXJlcyA9IGV4dGVybmFsTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICBpZiAoZmVhdHVyZXMgJiYgZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmVhdHVyZXNbMF0uZ2V0R2VvbWV0cnkoKSA/XG4gICAgICAgIChnZW9tZXRyeVR5cGUgPT09IGZlYXR1cmVzWzBdLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpKVxuICAgICAgICB8fFxuICAgICAgICBpc1NhbWVCYXNlR2VvbWV0cnlUeXBlKGdlb21ldHJ5VHlwZSwgZmVhdHVyZXNbMF0uZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCkpIDogZmFsc2U7XG4gICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgfSk7XG59O1xuXG5FZGl0aW5nU2VydmljZS5FRElUSU5HX0ZJRUxEU19UWVBFID0gWyd1bmlxdWUnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgRWRpdGluZ1NlcnZpY2U7XG4iLCJjb25zdCB7R1VJfSA9IGczd3Nkay5ndWk7XG5jb25zdCB0ID0gZzN3c2RrLmNvcmUuaTE4bi50UGx1Z2luO1xuY29uc3Qge0xheWVyfSA9IGczd3Nkay5jb3JlLmxheWVyO1xuY29uc3Qge1dvcmtmbG93c1N0YWNrfSA9IGczd3Nkay5jb3JlLndvcmtmbG93O1xuXG4vLyB3aGF0IHdlIGNhbiBkbyB3aXRoIGVhY2ggdHlwZSBvZiByZWxhdGlvbiBlbGVtZW50XG5jb25zdCBSRUxBVElPTlRPT0xTID0ge1xuICBkZWZhdWx0OiBbJ2VkaXRhdHRyaWJ1dGVzJywgJ2RlbGV0ZWZlYXR1cmUnXSxcbiAgJ3RhYmxlJyA6IFtdLFxuICAnUG9pbnQnOiBbJ21vdmVmZWF0dXJlJ10sXG4gICdMaW5lU3RyaW5nJzogWydtb3ZldmVydGV4J10sXG4gICdQb2x5Z29uJzogWydtb3ZlZmVhdHVyZScsICdtb3ZldmVydGV4J11cbn07XG5cbmNvbnN0IFJlbGF0aW9uU2VydmljZSA9IGZ1bmN0aW9uKGxheWVySWQsIG9wdGlvbnMgPSB7fSkge1xuICAvLyBsYXllcklkIGlzIGlkIG9mIHRoZSBwYXJlbnQgb2YgcmVsYXRpb25cbiAgdGhpcy5fcGFyZW50TGF5ZXJJZCA9IGxheWVySWQ7XG4gIHRoaXMuX3BhcmVudFdvcmtGbG93ID0gdGhpcy5nZXRDdXJyZW50V29ya2Zsb3coKTtcbiAgdGhpcy5fcGFyZW50TGF5ZXIgPSB0aGlzLl9wYXJlbnRXb3JrRmxvdy5nZXRMYXllcigpO1xuICAvKipcbiAgICogcmVsYXRpb246IGNvbnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgcmVsYXRpb24gZnJvbSBwYXJlbnQgbGF5ZXIgYW5kIGN1cnJlbnQgcmVsYXRpb24gbGF5ZXIgKGV4LiBjaGlsZCwgZmllbGRzLCByZWxhdGlvbmlkLCBldGMuLi4uKVxuICAgKiByZWxhdGlvbnM6IEFycmF5IG9mIHJlbGF0aW9ucyBvYmplY3QgaWQgYW5kIGZpZWxkcyBsaW5rZWQgdG8gY3VycmVudCBwYXJlbnQgZmVhdHVyZSB0aGF0IGlzIGluIGVkaXRpbmdcbiAgICpcbiAgICovXG4gIGNvbnN0IHtyZWxhdGlvbiwgcmVsYXRpb25zfSA9IG9wdGlvbnM7XG4gIHRoaXMucmVsYXRpb24gPSByZWxhdGlvbjtcbiAgLy8gcmVsYXRpb24gZmVhdHVyZSBsaW5rIHRvIGN1cnJlbnQgcGFyZW50IGZlYXR1cmVcbiAgdGhpcy5yZWxhdGlvbnMgPSByZWxhdGlvbnM7XG4gIC8vZWRpdGluZyBzZXJ2aWNlIChtYWluIHNlcnZpY2Ugb2YgcGx1Z2luKVxuICB0aGlzLl9lZGl0aW5nU2VydmljZTtcbiAgdGhpcy5faXNFeHRlcm5hbEZpZWxkUmVxdWlyZWQgPSBmYWxzZTtcbiAgLy8gdGhpcy5fcmVsYXRpb25MYXllcklkIGlzIGxheWVyIGlkIG9mIHJlbGF0aW9uIGxheWVyXG4gIHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCA9IHRoaXMucmVsYXRpb24uY2hpbGQgPT09IHRoaXMuX3BhcmVudExheWVySWQgPyB0aGlzLnJlbGF0aW9uLmZhdGhlciA6IHRoaXMucmVsYXRpb24uY2hpbGQ7XG4gIC8vIGxheWVyIGluIHJlbGF0aW9uXG4gIGNvbnN0IHJlbGF0aW9uTGF5ZXIgPSB0aGlzLmdldExheWVyKCk7XG4gIHRoaXMuX2xheWVyVHlwZSA9IHJlbGF0aW9uTGF5ZXIuZ2V0VHlwZSgpO1xuICAvL2dldCB0eXBlIG9mIHJlbGF0aW9uXG4gIGNvbnN0IHJlbGF0aW9uTGF5ZXJUeXBlID0gdGhpcy5fbGF5ZXJUeXBlID09PSBMYXllci5MYXllclR5cGVzLlZFQ1RPUiA/IHJlbGF0aW9uTGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCkgOiBMYXllci5MYXllclR5cGVzLlRBQkxFO1xuICAvL1xuICBjb25zdCB7IG93bkZpZWxkOiBmYXRoZXJSZWxhdGlvbkZpZWxkfSA9IHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5fZ2V0UmVsYXRpb25GaWVsZHNGcm9tUmVsYXRpb24oe1xuICAgIGxheWVySWQ6IHRoaXMuX3BhcmVudExheWVySWQsXG4gICAgcmVsYXRpb246IHRoaXMucmVsYXRpb25cbiAgfSk7XG4gIC8vIGNoZWNrIGlmIGZhdGhlciBpcyBlZGl0YWJsZSBmaWVsZC4gSXQgaXMgdXNlZnVsIHRvIGZpbGwgcmVsYXRpb24gZmlsZWQgb2YgcmVsYXRpb24gZmVhdHVyZVxuICB0aGlzLl9pc0ZhdGhlckZpZWxkRWRpdGFibGUgPSB0aGlzLl9wYXJlbnRMYXllci5pc0VkaXRpbmdGaWVsZEVkaXRhYmxlKGZhdGhlclJlbGF0aW9uRmllbGQpO1xuICB0aGlzLl9pc0V4dGVybmFsRmllbGRSZXF1aXJlZCA9IHRoaXMuX2NoZWNrSWZFeHRlcm5hbEZpZWxkUmVxdWlyZWQoKTtcbiAgLy8gY2hlY2sgaWYgcGFyZW50IGZpZWxkIGlzIGVkaXRhYmxlLiBJZiBub3QgZ2V0IHRoZSBpZCBvZiBwYXJlbnQgZmVhdHVyZSBzbyB0aGUgc2VydmVyIGNhbiBnZW5yYXRhdGUgdGhlIHJpZ2h0IHZhbHVlXG4gIC8vIHRvIGZpbGwgdGhlIGZpZWxkIG9mIHJlbGF0aW9uIGxheWVyIGZlYXR1cmUgd2hlbiBjb21taXRcbiAgdGhpcy5fY3VycmVudFBhcmVudEZlYXR1cmVSZWxhdGlvbkZpZWxkVmFsdWUgPSB0aGlzLl9pc0ZhdGhlckZpZWxkRWRpdGFibGUgP1xuICAgICAgdGhpcy5nZXRDdXJyZW50V29ya2Zsb3dEYXRhKCkuZmVhdHVyZS5nZXQoZmF0aGVyUmVsYXRpb25GaWVsZCkgOlxuICAgICAgdGhpcy5nZXRDdXJyZW50V29ya2Zsb3dEYXRhKCkuZmVhdHVyZS5nZXRJZCgpO1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdGhpcy5fcmVsYXRpb25Ub29scyA9IFtdO1xuICB0aGlzLl9hZGRfbGlua193b3JrZmxvdyA9IG51bGw7XG4gIC8vZ2V0IGVkaXRpbmcgY29udHN0cmFpbnQgdHlwZVxuICB0aGlzLmNhcGFiaWxpdGllcz0ge1xuICAgIHBhcmVudDogdGhpcy5fcGFyZW50TGF5ZXIuZ2V0RWRpdGluZ0NhcGFiaWxpdGllcygpLFxuICAgIHJlbGF0aW9uOiB0aGlzLl9wYXJlbnRMYXllci5nZXRFZGl0aW5nQ2FwYWJpbGl0aWVzKClcbiAgfTtcbiAgLy9jaGVjayBpZiByZWxhdGlvbkxheWVyIGlzIGEgVEFCTEUgTGF5ZXIgYW5kIHdpdGggY2FwYWJpbGl0aWVzIHZhbHVlIGNoZWNrIGFkZCB0b29sc1xuICBpZiAocmVsYXRpb25MYXllclR5cGUgPT09IExheWVyLkxheWVyVHlwZXMuVEFCTEUpIHtcbiAgICAodGhpcy5jYXBhYmlsaXRpZXMucmVsYXRpb24uZmluZChjYXBhYmlsaXR5ID0+IGNhcGFiaWxpdHkgPT09ICdkZWxldGVfZmVhdHVyZScpICE9PSB1bmRlZmluZWQpICYmIHRoaXMuX3JlbGF0aW9uVG9vbHMucHVzaCh7XG4gICAgICBzdGF0ZToge1xuICAgICAgICBpY29uOiAnZGVsZXRlVGFibGVSb3cucG5nJyxcbiAgICAgICAgaWQ6ICdkZWxldGVmZWF0dXJlJyxcbiAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLmRlbGV0ZV9mZWF0dXJlXCJcbiAgICAgIH1cbiAgICB9KTtcbiAgICAodGhpcy5jYXBhYmlsaXRpZXMucmVsYXRpb24uZmluZChjYXBhYmlsaXR5ID0+IGNhcGFiaWxpdHkgPT09ICdjaGFuZ2VfYXR0cl9mZWF0dXJlJykgIT09IHVuZGVmaW5lZCkgJiYgdGhpcy5fcmVsYXRpb25Ub29scy5wdXNoKHtcbiAgICAgIHN0YXRlOiB7XG4gICAgICAgIGljb246ICdlZGl0QXR0cmlidXRlcy5wbmcnLFxuICAgICAgICBpZDogJ2VkaXRhdHRyaWJ1dGVzJyxcbiAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLnVwZGF0ZV9mZWF0dXJlXCJcbiAgICAgIH1cbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFsbHJlbGF0aW9udG9vbHMgPSB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuZ2V0VG9vbEJveEJ5SWQodGhpcy5fcmVsYXRpb25MYXllcklkKS5nZXRUb29scygpO1xuICAgIGFsbHJlbGF0aW9udG9vbHMuZm9yRWFjaCh0b29sID0+IHtcbiAgICAgIGlmIChfLmNvbmNhdChSRUxBVElPTlRPT0xTW3JlbGF0aW9uTGF5ZXJUeXBlXSwgUkVMQVRJT05UT09MUy5kZWZhdWx0KS5pbmRleE9mKHRvb2wuZ2V0SWQoKSkgIT09IC0xKVxuICAgICAgICB0aGlzLl9yZWxhdGlvblRvb2xzLnB1c2goXy5jbG9uZURlZXAodG9vbCkpO1xuICAgIH0pO1xuICB9XG4gIHRoaXMuX3NldEFkZExpbmtXb3JrZmxvdygpO1xufTtcblxuY29uc3QgcHJvdG8gPSBSZWxhdGlvblNlcnZpY2UucHJvdG90eXBlO1xuXG5wcm90by5nZXRFZGl0aW5nQ2FwYWJpbGl0aWVzID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzO1xufTtcblxucHJvdG8uX3NldEFkZExpbmtXb3JrZmxvdyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBhZGRfbGlua193b3JrZmxvdyA9IHtcbiAgICBbTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1JdOiB7XG4gICAgICBsaW5rOiByZXF1aXJlKCcuLi93b3JrZmxvd3MvbGlua3JlbGF0aW9ud29ya2Zsb3cnKSxcbiAgICAgIGFkZDogcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2FkZGZlYXR1cmV3b3JrZmxvdycpLFxuICAgICAgc2VsZWN0YW5kY29weTogcmVxdWlyZSgnLi4vd29ya2Zsb3dzL3NlbGVjdGFuZGNvcHlmZWF0dXJlc2Zyb21vdGhlcmxheWVyd29ya2Zsb3cnKVxuICAgIH0sXG4gICAgW0xheWVyLkxheWVyVHlwZXMuVEFCTEVdOiB7XG4gICAgICBsaW5rOiByZXF1aXJlKCcuLi93b3JrZmxvd3MvZWRpdHRhYmxld29ya2Zsb3cnKSxcbiAgICAgIGFkZDogcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2FkZHRhYmxlZmVhdHVyZXdvcmtmbG93JylcbiAgICB9XG4gIH07XG4gIHRoaXMuX2FkZF9saW5rX3dvcmtmbG93ID0gYWRkX2xpbmtfd29ya2Zsb3dbdGhpcy5fbGF5ZXJUeXBlXTtcbn07XG5cbnByb3RvLl9nZXRMaW5rRmVhdHVyZVdvcmtmbG93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgdGhpcy5fYWRkX2xpbmtfd29ya2Zsb3cubGluaygpO1xufTtcblxucHJvdG8uX2dldEFkZEZlYXR1cmVXb3JrZmxvdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IHRoaXMuX2FkZF9saW5rX3dvcmtmbG93LmFkZCgpO1xufTtcblxucHJvdG8uX2dldFNlbGVjdENvcHlXb3JrZmxvdyA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pe1xuICByZXR1cm4gbmV3IHRoaXMuX2FkZF9saW5rX3dvcmtmbG93LnNlbGVjdGFuZGNvcHkob3B0aW9ucylcbn07XG5cbnByb3RvLmdldFJlbGF0aW9uVG9vbHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3JlbGF0aW9uVG9vbHNcbn07XG5cbnByb3RvLl9oaWdobGlnaHRSZWxhdGlvblNlbGVjdCA9IGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gIGNvbnN0IG9yaWdpbmFsU3R5bGUgPSB0aGlzLmdldExheWVyKCkuZ2V0RWRpdGluZ0xheWVyKCkuZ2V0U3R5bGUoKTtcbiAgY29uc3QgZ2VvbWV0cnlUeXBlID0gdGhpcy5nZXRMYXllcigpLmdldEdlb21ldHJ5VHlwZSgpO1xuICBsZXQgc3R5bGU7XG4gIGlmIChnZW9tZXRyeVR5cGUgPT09ICdMaW5lU3RyaW5nJyB8fCBnZW9tZXRyeVR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnKSB7XG4gICAgc3R5bGUgPSBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgY29sb3I6ICdyZ2IoMjU1LDI1NSwwKScsXG4gICAgICAgIHdpZHRoOiA0XG4gICAgICB9KVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKGdlb21ldHJ5VHlwZSA9PT0gJ1BvaW50JyB8fCBnZW9tZXRyeVR5cGUgPT09ICdNdWx0aVBvaW50Jykge1xuICAgIHN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgICAgcmFkaXVzOiA4LFxuICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgY29sb3I6ICdyZ2IoMjU1LDI1NSwwKSdcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoZ2VvbWV0cnlUeXBlID09PSAnTXVsdGlQb2x5Z29uJyB8fCBnZW9tZXRyeVR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgIHN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgIGNvbG9yOiAncmdiKDI1NSwyNTUsMCknLFxuICAgICAgICB3aWR0aDogNFxuICAgICAgfSksXG4gICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMCwgMC41KSdcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbiAgcmVsYXRpb24uc2V0U3R5bGUoc3R5bGUpO1xuICByZXR1cm4gb3JpZ2luYWxTdHlsZTtcbn07XG5cbnByb3RvLnN0YXJ0VG9vbCA9IGZ1bmN0aW9uKHJlbGF0aW9udG9vbCwgaW5kZXgpIHtcbiAgaWYgKHJlbGF0aW9udG9vbC5zdGF0ZS5pZCA9PT0gJ21vdmVmZWF0dXJlJykgR1VJLmhpZGVDb250ZW50KHRydWUpO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHRvb2xQcm9taXNlID0gKHRoaXMuX2xheWVyVHlwZSA9PT0gTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1IpICYmIHRoaXMuc3RhcnRWZWN0b3JUb29sKHJlbGF0aW9udG9vbCwgaW5kZXgpIHx8XG4gICAgICAodGhpcy5fbGF5ZXJUeXBlID09PSBMYXllci5MYXllclR5cGVzLlRBQkxFKSAmJiB0aGlzLnN0YXJ0VGFibGVUb29sKHJlbGF0aW9udG9vbCwgaW5kZXgpO1xuICAgIHRvb2xQcm9taXNlXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdEV2ZW50VG9QYXJlbnRXb3JrRmxvdygpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KVxuICAgICAgLmZhaWwoZXJyID0+IHJlamVjdChlcnIpKVxuICAgICAgLmFsd2F5cygoKT0+R1VJLmhpZGVDb250ZW50KGZhbHNlKSk7XG4gIH0pXG59O1xuXG4vKipcbiAqIGZvcmNlIHBhcmVudCB3b3JrZmxvdyBmb3JtIHNlcnZpY2UgdG8gYmUgdXBkYXRlXG4gKi9cbnByb3RvLmZvcmNlUGFyZW50c0Zyb21TZXJ2aWNlV29ya2Zsb3dUb1VwZGF0ZWQgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgd29ya2Zsb3dQYXJlbnRzID0gV29ya2Zsb3dzU3RhY2suZ2V0UGFyZW50cygpIHx8IFt0aGlzLmdldEN1cnJlbnRXb3JrZmxvdygpXTtcbiAgd29ya2Zsb3dQYXJlbnRzLmZvckVhY2god29ya2Zsb3cgPT4gd29ya2Zsb3cuZ2V0Q29udGV4dCgpLnNlcnZpY2Uuc2V0VXBkYXRlKHRydWUsIHtcbiAgICBmb3JjZTogdHJ1ZVxuICB9KSk7XG59O1xuXG5wcm90by5zdGFydFRhYmxlVG9vbCA9IGZ1bmN0aW9uKHJlbGF0aW9udG9vbCwgaW5kZXgpIHtcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3QgcmVsYXRpb24gPSB0aGlzLnJlbGF0aW9uc1tpbmRleF07XG4gIGNvbnN0IGZlYXR1cmVzdG9yZSA9IHRoaXMuZ2V0TGF5ZXIoKS5nZXRFZGl0aW5nU291cmNlKCk7XG4gIGNvbnN0IHJlbGF0aW9uZmVhdHVyZSA9IGZlYXR1cmVzdG9yZS5nZXRGZWF0dXJlQnlJZChyZWxhdGlvbi5pZCk7XG4gIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9jcmVhdGVXb3JrZmxvd09wdGlvbnMoe1xuICAgIGZlYXR1cmVzOiBbcmVsYXRpb25mZWF0dXJlXVxuICB9KTtcbiAgLy8gZGVsZXRlIGZlYXR1cmVcbiAgaWYgKHJlbGF0aW9udG9vbC5zdGF0ZS5pZCA9PT0gJ2RlbGV0ZWZlYXR1cmUnKSB7XG4gICAgR1VJLmRpYWxvZy5jb25maXJtKHQoXCJlZGl0aW5nLm1lc3NhZ2VzLmRlbGV0ZV9mZWF0dXJlXCIpLCByZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmdldEN1cnJlbnRXb3JrZmxvd0RhdGEoKS5zZXNzaW9uLnB1c2hEZWxldGUodGhpcy5fcmVsYXRpb25MYXllcklkLCByZWxhdGlvbmZlYXR1cmUpO1xuICAgICAgICB0aGlzLnJlbGF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkucmVtb3ZlUmVsYXRpb25MYXllclVuaXF1ZUZpZWxkVmFsdWVzRnJvbUZlYXR1cmUoe1xuICAgICAgICAgIGxheWVySWQ6IHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCxcbiAgICAgICAgICByZWxhdGlvbkxheWVySWQ6IHRoaXMuX3BhcmVudExheWVySWQsXG4gICAgICAgICAgZmVhdHVyZTogcmVsYXRpb25mZWF0dXJlXG4gICAgICAgIH0pO1xuICAgICAgICBmZWF0dXJlc3RvcmUucmVtb3ZlRmVhdHVyZShyZWxhdGlvbmZlYXR1cmUpO1xuICAgICAgICB0aGlzLmZvcmNlUGFyZW50c0Zyb21TZXJ2aWNlV29ya2Zsb3dUb1VwZGF0ZWQoKTtcbiAgICAgICAgZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9IGVsc2UgZC5yZWplY3QocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuICBpZiAocmVsYXRpb250b29sLnN0YXRlLmlkID09PSAnZWRpdGF0dHJpYnV0ZXMnKSB7XG4gICAgY29uc3QgRWRpdFRhYmxlRmVhdHVyZVdvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2VkaXR0YWJsZWZlYXR1cmV3b3JrZmxvdycpO1xuICAgIGNvbnN0IHdvcmtmbG93ID0gbmV3IEVkaXRUYWJsZUZlYXR1cmVXb3JrZmxvdygpO1xuICAgIHdvcmtmbG93LnN0YXJ0KG9wdGlvbnMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuX2dldFJlbGF0aW9uRmllbGRzVmFsdWUocmVsYXRpb25mZWF0dXJlKTtcbiAgICAgICAgZmllbGRzLmZvckVhY2goX2ZpZWxkID0+IHtcbiAgICAgICAgICByZWxhdGlvbi5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICBpZiAoZmllbGQubmFtZSA9PT0gX2ZpZWxkLm5hbWUpIGZpZWxkLnZhbHVlID0gX2ZpZWxkLnZhbHVlO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBkLnJlc29sdmUodHJ1ZSk7XG4gICAgICB9KVxuICAgICAgLmZhaWwoZXJyID0+IGQucmVqZWN0KGZhbHNlKSlcbiAgICAgIC5hbHdheXMoKCkgPT4ge1xuICAgICAgICB3b3JrZmxvdy5zdG9wKClcbiAgICAgIH0pXG4gIH1cbiAgcmV0dXJuIGQucHJvbWlzZSgpXG59O1xuXG5wcm90by5zdGFydFZlY3RvclRvb2wgPSBmdW5jdGlvbihyZWxhdGlvbnRvb2wsIGluZGV4KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IHJlbGF0aW9uID0gdGhpcy5yZWxhdGlvbnNbaW5kZXhdO1xuICBjb25zdCByZWxhdGlvbmZlYXR1cmUgPSB0aGlzLl9nZXRSZWxhdGlvbkZlYXR1cmUocmVsYXRpb24uaWQpO1xuICBjb25zdCB3b3JrZmxvd3MgPSB7XG4gICAgTW9kaWZ5R2VvbWV0cnlWZXJ0ZXhXb3JrZmxvdzogcmVxdWlyZSgnLi4vd29ya2Zsb3dzL21vZGlmeWdlb21ldHJ5dmVydGV4d29ya2Zsb3cnKSxcbiAgICBNb3ZlRmVhdHVyZVdvcmtmbG93IDogcmVxdWlyZSgnLi4vd29ya2Zsb3dzL21vdmVmZWF0dXJld29ya2Zsb3cnKSxcbiAgICBEZWxldGVGZWF0dXJlV29ya2Zsb3cgOiByZXF1aXJlKCcuLi93b3JrZmxvd3MvZGVsZXRlZmVhdHVyZXdvcmtmbG93JyksXG4gICAgRWRpdEZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3cgOiByZXF1aXJlKCcuLi93b3JrZmxvd3MvZWRpdGZlYXR1cmVhdHRyaWJ1dGVzd29ya2Zsb3cnKVxuICB9O1xuICBHVUkuc2V0TW9kYWwoZmFsc2UpO1xuICBjb25zdCBvcHRpb25zID0gdGhpcy5fY3JlYXRlV29ya2Zsb3dPcHRpb25zKHtcbiAgICBmZWF0dXJlczogW3JlbGF0aW9uZmVhdHVyZV1cbiAgfSk7XG4gIGNvbnN0IENsYXNzV29ya2Zsb3cgPSBPYmplY3QudmFsdWVzKHdvcmtmbG93cykuZmluZChjbGFzc3dvcmtmbG93ID0+IHtcbiAgICByZXR1cm4gcmVsYXRpb250b29sLmdldE9wZXJhdG9yKCkgaW5zdGFuY2VvZiBjbGFzc3dvcmtmbG93XG4gIH0pO1xuICBjb25zdCB3b3JrZmxvdyA9IG5ldyBDbGFzc1dvcmtmbG93KCk7XG4gIGNvbnN0IG9yaWdpbmFsU3R5bGUgPSB0aGlzLl9oaWdobGlnaHRSZWxhdGlvblNlbGVjdChyZWxhdGlvbmZlYXR1cmUpO1xuICBjb25zdCBwcm9taXNlID0od29ya2Zsb3cgaW5zdGFuY2VvZiB3b3JrZmxvd3MuRGVsZXRlRmVhdHVyZVdvcmtmbG93IHx8IHdvcmtmbG93IGluc3RhbmNlb2Ygd29ya2Zsb3dzLkVkaXRGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93ICkgJiYgd29ya2Zsb3cuc3RhcnRGcm9tTGFzdFN0ZXAob3B0aW9ucylcbiAgICB8fCB3b3JrZmxvdy5zdGFydChvcHRpb25zKTtcbiAgd29ya2Zsb3cuYmluZEVzY0tleVVwKCgpID0+IHJlbGF0aW9uZmVhdHVyZS5zZXRTdHlsZSh0aGlzLl9vcmlnaW5hbExheWVyU3R5bGUpKTtcbiAgcHJvbWlzZS50aGVuKG91dHB1dHMgPT4ge1xuICAgICAgaWYgKHJlbGF0aW9udG9vbC5nZXRJZCgpID09PSAnZGVsZXRlZmVhdHVyZScpIHtcbiAgICAgICAgcmVsYXRpb25mZWF0dXJlLnNldFN0eWxlKHRoaXMuX29yaWdpbmFsTGF5ZXJTdHlsZSk7XG4gICAgICAgIHRoaXMuZ2V0Q3VycmVudFdvcmtmbG93RGF0YSgpLnNlc3Npb24ucHVzaERlbGV0ZSh0aGlzLl9yZWxhdGlvbkxheWVySWQsIHJlbGF0aW9uZmVhdHVyZSk7XG4gICAgICAgIHRoaXMucmVsYXRpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuZm9yY2VQYXJlbnRzRnJvbVNlcnZpY2VXb3JrZmxvd1RvVXBkYXRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKHJlbGF0aW9udG9vbC5nZXRJZCgpID09PSAnZWRpdGF0dHJpYnV0ZXMnKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuX2dldFJlbGF0aW9uRmllbGRzVmFsdWUocmVsYXRpb25mZWF0dXJlKTtcbiAgICAgICAgZmllbGRzLmZvckVhY2goX2ZpZWxkID0+IHJlbGF0aW9uLmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICBpZiAoZmllbGQubmFtZSA9PT0gX2ZpZWxkLm5hbWUpIGZpZWxkLnZhbHVlID0gX2ZpZWxkLnZhbHVlfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGQucmVzb2x2ZShvdXRwdXRzKVxuICAgIH0pXG4gICAgLmZhaWwoZXJyID0+IGQucmVqZWN0KGVycikpXG4gICAgLmFsd2F5cygoKSA9PiB7XG4gICAgICB3b3JrZmxvdy5zdG9wKCk7XG4gICAgICBHVUkuaGlkZUNvbnRlbnQoZmFsc2UpO1xuICAgICAgd29ya2Zsb3cudW5iaW5kRXNjS2V5VXAoKTtcbiAgICAgIEdVSS5zZXRNb2RhbCh0cnVlKTtcbiAgICAgIHJlbGF0aW9uZmVhdHVyZS5zZXRTdHlsZShvcmlnaW5hbFN0eWxlKTtcbiAgICB9KTtcbiAgcmV0dXJuIGQucHJvbWlzZSgpXG59O1xuXG5wcm90by5nZXRMYXllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldExheWVyQnlJZCh0aGlzLl9yZWxhdGlvbkxheWVySWQpO1xufTtcblxucHJvdG8uZ2V0RWRpdGluZ0xheWVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuZ2V0RWRpdGluZ0xheWVyKHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCk7XG59O1xuXG5wcm90by5nZXRFZGl0aW5nU2VydmljZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9lZGl0aW5nU2VydmljZSA9IHRoaXMuX2VkaXRpbmdTZXJ2aWNlIHx8IHJlcXVpcmUoJy4vZWRpdGluZ3NlcnZpY2UnKTtcbiAgcmV0dXJuIHRoaXMuX2VkaXRpbmdTZXJ2aWNlO1xufTtcblxuLyoqXG4gKiBmdW5jdGlvbiB0aGF0IGNoYW5nZSB0aGUgcmVsYXRpb24gZmllbGQgdmFsdWUgd2hlbiBhbmQgaWYgcGFyZW50IGNoYW5nZSB0aGUgdmFsdWUgb2YgcmVsYXRpb24gZmllbGQgXG4gKiBAcGFyYW0gaW5wdXRcbiAqL1xucHJvdG8udXBkYXRlRXh0ZXJuYWxLZXlWYWx1ZVJlbGF0aW9ucyA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gIGNvbnN0IHNlc3Npb24gPSB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuZ2V0VG9vbEJveEJ5SWQodGhpcy5fcmVsYXRpb25MYXllcklkKS5nZXRTZXNzaW9uKCk7XG4gIC8vb3duRmlsZWQgaXMgdGhlIGZpZWxkIG9mIHJlbGF0aW9uIGZlYXR1cmUgbGluayB0byBwYXJlbnQgZmVhdHVyZSBsYXllclxuICBjb25zdCB7b3duRmllbGQsIHJlbGF0aW9uRmllbGR9ID0gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLl9nZXRSZWxhdGlvbkZpZWxkc0Zyb21SZWxhdGlvbih7XG4gICAgbGF5ZXJJZDogdGhpcy5fcmVsYXRpb25MYXllcklkLFxuICAgIHJlbGF0aW9uOiB0aGlzLnJlbGF0aW9uXG4gIH0pO1xuICAvLyBjaGVjayBpZiBwYXJlbnQgZm9ybSBpbnB1dCB0aGF0IGlzIGNoYW5naW5nIGlzIHRoZSBmaWVsZCBpbiByZWxhdGlvbiBvZiB0aGUgY3VycmVudCBmZWF0dXJlIHJlbGF0aW9uIExheWVyXG4gIGlmICh0aGlzLl9pc0ZhdGhlckZpZWxkRWRpdGFibGUgJiYgaW5wdXQubmFtZSA9PT0gcmVsYXRpb25GaWVsZCkge1xuICAgIC8vIGNobmFnZSBjdXJyZW50UGFyZW50RmllYXR1cmUgcmVsYXRpb24gdmFsdWVcbiAgICB0aGlzLl9jdXJyZW50UGFyZW50RmVhdHVyZVJlbGF0aW9uRmllbGRWYWx1ZSA9IGlucHV0LnZhbHVlO1xuICAgIC8vIGxvb3AgYWxsIGZlYXR1cmVzIHJlbGF0aW9uc1xuICAgIHRoaXMucmVsYXRpb25zLmZvckVhY2gocmVsYXRpb24gPT4ge1xuICAgICAgY29uc3QgZmllbGRzID0gcmVsYXRpb24uZmllbGRzO1xuICAgICAgLy8gZmllbGQgcmVsYXRpb24gZmllbGQgb2YgY3VycmVudCByZWxhdGlvbiBmZWF0dXJlXG4gICAgICBjb25zdCBmaWVsZCA9IGZpZWxkcy5maW5kKGZpZWxkID0+IGZpZWxkLm5hbWUgPT09IG93bkZpZWxkKTtcbiAgICAgIGlmIChmaWVsZCkgZmllbGQudmFsdWUgPSB0aGlzLl9jdXJyZW50UGFyZW50RmVhdHVyZVJlbGF0aW9uRmllbGRWYWx1ZTtcbiAgICAgIHJlbGF0aW9uID0gdGhpcy5fZ2V0UmVsYXRpb25GZWF0dXJlKHJlbGF0aW9uLmlkKTtcbiAgICAgIGNvbnN0IG9yaWdpbmFsUmVsYXRpb24gPSByZWxhdGlvbi5jbG9uZSgpO1xuICAgICAgcmVsYXRpb24uc2V0KG93bkZpZWxkLCBpbnB1dC52YWx1ZSk7XG4gICAgICBpZiAoIXJlbGF0aW9uLmlzTmV3KCkpIHNlc3Npb24ucHVzaFVwZGF0ZSh0aGlzLl9yZWxhdGlvbkxheWVySWQsIHJlbGF0aW9uLCBvcmlnaW5hbFJlbGF0aW9uKTtcbiAgICB9KVxuICB9XG59O1xuXG5wcm90by5fZ2V0UmVsYXRpb25GaWVsZHNWYWx1ZSA9IGZ1bmN0aW9uKHJlbGF0aW9uKSB7XG4gIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcigpO1xuICByZXR1cm4gbGF5ZXIuZ2V0RmllbGRzV2l0aFZhbHVlcyhyZWxhdGlvbiwge1xuICAgIHJlbGF0aW9uOiB0cnVlXG4gIH0pO1xufTtcblxucHJvdG8uX2NyZWF0ZVJlbGF0aW9uT2JqID0gZnVuY3Rpb24ocmVsYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICBmaWVsZHM6IHRoaXMuX2dldFJlbGF0aW9uRmllbGRzVmFsdWUocmVsYXRpb24pLFxuICAgIGlkOiByZWxhdGlvbi5nZXRJZCgpXG4gIH1cbn07XG5cbnByb3RvLmVtaXRFdmVudFRvUGFyZW50V29ya0Zsb3cgPSBmdW5jdGlvbih0eXBlLCBvcHRpb25zPXt9KSB7XG4gIC8vdHlwZT1zZXQtbWFpbi1jb21wb25lbnQgZXZlbnQgbmFtZSB0byBzZXQgdGFibGUgcGFyZW50IHZpc2libGVcbiAgdHlwZSAmJiB0aGlzLl9wYXJlbnRXb3JrRmxvdy5nZXRDb250ZXh0U2VydmljZSgpLmdldEV2ZW50QnVzKCkuJGVtaXQodHlwZSwgb3B0aW9ucylcbn07XG5cbnByb3RvLl9nZXRSZWxhdGlvbkFzRmF0aGVyU3R5bGVDb2xvciA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgY29uc3QgZmF0aGVyTGF5ZXIgPSB0aGlzLmdldEVkaXRpbmdMYXllcih0aGlzLl9wYXJlbnRMYXllcklkKTtcbiAgY29uc3QgZmF0aGVyTGF5ZXJTdHlsZSA9IGZhdGhlckxheWVyLmdldFN0eWxlKCk7XG4gIGxldCBmYXRoZXJMYXllclN0eWxlQ29sb3I7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgIGZhdGhlckxheWVyU3R5bGVDb2xvciA9IGZhdGhlckxheWVyU3R5bGUuZ2V0SW1hZ2UoKSAmJiBmYXRoZXJMYXllclN0eWxlLmdldEltYWdlKCkuZ2V0RmlsbCgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTGluZSc6XG4gICAgICBmYXRoZXJMYXllclN0eWxlQ29sb3IgPSBmYXRoZXJMYXllclN0eWxlLmdldFN0cm9rZSgpIHx8IGZhdGhlckxheWVyU3R5bGUuZ2V0RmlsbCgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUG9seWdvbic6XG4gICAgICBmYXRoZXJMYXllclN0eWxlQ29sb3IgPSBmYXRoZXJMYXllclN0eWxlLmdldEZpbGwoKSB8fCBmYXRoZXJMYXllclN0eWxlLmdldFN0cm9rZSgpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGZhdGhlckxheWVyU3R5bGVDb2xvciAmJiBmYXRoZXJMYXllclN0eWxlQ29sb3IuZ2V0Q29sb3IoKSB8fCAnIzAwMDAwMCc7XG59O1xuXG4vKipcbiAqIEFkZCBSZWxhdGlvbiBmcm9tIHByb2plY3QgbGF5ZXJcbiAqIEBwYXJhbSBsYXllclxuICovXG5wcm90by5hZGRSZWxhdGlvbkZyb21PdGhlckxheWVyID0gZnVuY3Rpb24oe2xheWVyLCBleHRlcm5hbH0pe1xuICBsZXQgd29ya2Zsb3c7XG4gIGxldCBpc1ZlY3RvciA9IGZhbHNlO1xuICBpZiAoZXh0ZXJuYWwgfHwgbGF5ZXIuaXNHZW9MYXllcigpICkge1xuICAgIGlzVmVjdG9yID0gdHJ1ZTtcbiAgICB3b3JrZmxvdyA9IHRoaXMuX2dldFNlbGVjdENvcHlXb3JrZmxvdyh7XG4gICAgICBjb3B5TGF5ZXI6IGxheWVyLFxuICAgICAgaXNWZWN0b3IsXG4gICAgICBleHRlcm5hbFxuICAgIH0pO1xuICB9XG4gIHRoaXMucnVuQWRkUmVsYXRpb25Xb3JrZmxvdyh7XG4gICAgd29ya2Zsb3csXG4gICAgaXNWZWN0b3JcbiAgfSlcbn07XG5cbi8qKlxuICogYWRkIHJlbGF0aW9uIG1ldGhvZFxuICovXG5wcm90by5hZGRSZWxhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBpc1ZlY3RvciA9IHRoaXMuX2xheWVyVHlwZSA9PT0gTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1I7XG4gIGNvbnN0IHdvcmtmbG93ID0gdGhpcy5fZ2V0QWRkRmVhdHVyZVdvcmtmbG93KCk7XG4gIHRoaXMucnVuQWRkUmVsYXRpb25Xb3JrZmxvdyh7XG4gICAgd29ya2Zsb3csXG4gICAgaXNWZWN0b3JcbiAgfSlcbn07XG5cbi8qKlxuICogQ29tbW9uIG1ldGhvZCB0byBhZGQgYSByZWxhdGlvblxuICovXG5wcm90by5ydW5BZGRSZWxhdGlvbldvcmtmbG93ID0gZnVuY3Rpb24oe3dvcmtmbG93LCBpc1ZlY3Rvcj1mYWxzZX09e30pe1xuICBpZiAoaXNWZWN0b3IpIHtcbiAgICBHVUkuc2V0TW9kYWwoZmFsc2UpO1xuICAgIEdVSS5oaWRlQ29udGVudCh0cnVlKTtcbiAgfVxuICBjb25zdCBvcHRpb25zID0gdGhpcy5fY3JlYXRlV29ya2Zsb3dPcHRpb25zKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zLmNvbnRleHQuc2Vzc2lvbjtcbiAgY29uc3Qge293bkZpZWxkLCByZWxhdGlvbkZpZWxkfSA9IHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5fZ2V0UmVsYXRpb25GaWVsZHNGcm9tUmVsYXRpb24oe1xuICAgIGxheWVySWQ6IHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCxcbiAgICByZWxhdGlvbjogdGhpcy5yZWxhdGlvblxuICB9KTtcblxuICBjb25zdCB7IHBhcmVudEZlYXR1cmUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHByb21pc2UgPSAgd29ya2Zsb3cuc3RhcnQob3B0aW9ucyk7XG4gIGlzVmVjdG9yICYmIHdvcmtmbG93LmJpbmRFc2NLZXlVcCgpO1xuICBwcm9taXNlXG4gICAgLnRoZW4ob3V0cHV0cyA9PiB7XG4gICAgICBjb25zdCB7bmV3RmVhdHVyZXMsIG9yaWdpbmFsRmVhdHVyZXN9ID0gb3V0cHV0cy5yZWxhdGlvbkZlYXR1cmVzO1xuICAgICAgY29uc3Qgc2V0UmVsYXRpb25GaWVsZFZhbHVlID0gdmFsdWUgPT57XG4gICAgICAgIG5ld0ZlYXR1cmVzLmZvckVhY2goKG5ld0ZlYXR1cmUsIGluZGV4KSA9PntcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbEZlYXR1cmUgPSBvcmlnaW5hbEZlYXR1cmVzW2luZGV4XTtcbiAgICAgICAgICBuZXdGZWF0dXJlLnNldChvd25GaWVsZCwgdmFsdWUpO1xuICAgICAgICAgIGlmIChwYXJlbnRGZWF0dXJlLmlzTmV3KCkpIG9yaWdpbmFsRmVhdHVyZS5zZXQob3duRmllbGQsIHZhbHVlKTtcbiAgICAgICAgICB0aGlzLmdldExheWVyKCkuZ2V0RWRpdGluZ1NvdXJjZSgpLnVwZGF0ZUZlYXR1cmUobmV3RmVhdHVyZSk7XG4gICAgICAgICAgc2Vzc2lvbi5wdXNoVXBkYXRlKHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCwgbmV3RmVhdHVyZSwgb3JpZ2luYWxGZWF0dXJlKTtcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgICBzZXRSZWxhdGlvbkZpZWxkVmFsdWUodGhpcy5fY3VycmVudFBhcmVudEZlYXR1cmVSZWxhdGlvbkZpZWxkVmFsdWUpO1xuICAgICAgaWYgKHBhcmVudEZlYXR1cmUuaXNOZXcoKSAmJiB0aGlzLl9pc0ZhdGhlckZpZWxkRWRpdGFibGUpIHtcbiAgICAgICAgY29uc3Qga2V5UmVsYXRpb25GZWF0dXJlQ2hhbmdlID0gcGFyZW50RmVhdHVyZS5vbigncHJvcGVydHljaGFuZ2UnLCBldnQgPT4ge1xuICAgICAgICAgIGlmIChwYXJlbnRGZWF0dXJlLmlzTmV3KCkpIHtcbiAgICAgICAgICAgIGlmIChldnQua2V5ID09PSByZWxhdGlvbkZpZWxkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXZ0LnRhcmdldC5nZXQocmVsYXRpb25GaWVsZCk7XG4gICAgICAgICAgICAgIHNldFJlbGF0aW9uRmllbGRWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIG9sLk9ic2VydmFibGUudW5CeUtleShrZXlSZWxhdGlvbkZlYXR1cmVDaGFuZ2UpO1xuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgbmV3RmVhdHVyZXMuZm9yRWFjaChuZXdGZWF0dXJlID0+e1xuICAgICAgICBjb25zdCBuZXdSZWxhdGlvbiA9IHRoaXMuX2NyZWF0ZVJlbGF0aW9uT2JqKG5ld0ZlYXR1cmUpO1xuICAgICAgICB0aGlzLnJlbGF0aW9ucy5wdXNoKG5ld1JlbGF0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0RXZlbnRUb1BhcmVudFdvcmtGbG93KCk7XG4gICAgfSlcbiAgICAuZmFpbCgoaW5wdXRzKSA9PiB7XG4gICAgICBpZiAoaW5wdXRzICYmIGlucHV0cy5yZWxhdGlvbkZlYXR1cmVzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBuZWVkZWQgaW4gY2FzZSBvZiBzYXZlIGFsbCBwcmVzc2VkIG9uIG9wZW5mb3JtdGFza1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qge3JlbGF0aW9uRmVhdHVyZXM6e25ld0ZlYXR1cmVzPVtdfX0gPSBpbnB1dHM7XG4gICAgICAgIG5ld0ZlYXR1cmVzLmZvckVhY2gobmV3RmVhdHVyZSA9PntcbiAgICAgICAgICBjb25zdCBuZXdSZWxhdGlvbiA9IHRoaXMuX2NyZWF0ZVJlbGF0aW9uT2JqKG5ld0ZlYXR1cmUpO1xuICAgICAgICAgIHRoaXMucmVsYXRpb25zLnB1c2gobmV3UmVsYXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNlc3Npb24ucm9sbGJhY2tEZXBlbmRlY2llcyhbdGhpcy5fcmVsYXRpb25MYXllcklkXSlcbiAgICB9KVxuICAgIC5hbHdheXMoKCk9PntcbiAgICAgIHdvcmtmbG93LnN0b3AoKTtcbiAgICAgIGlmIChpc1ZlY3Rvcikge1xuICAgICAgICB3b3JrZmxvdy51bmJpbmRFc2NLZXlVcCgpO1xuICAgICAgICBHVUkuaGlkZUNvbnRlbnQoZmFsc2UpO1xuICAgICAgICBHVUkuc2V0TW9kYWwodHJ1ZSk7XG4gICAgICB9XG4gICAgfSlcbn07XG5cbi8qKlxuICogTGluayByZWxhdGlvbiAoYmluZCkgdG8gcGFyZW50IGZlYXR1cmUgbGF5ZXJcbiAqL1xucHJvdG8ubGlua1JlbGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGlzVmVjdG9yID0gdGhpcy5fbGF5ZXJUeXBlID09PSBMYXllci5MYXllclR5cGVzLlZFQ1RPUjtcbiAgaWYgKGlzVmVjdG9yKSB7XG4gICAgR1VJLnNldE1vZGFsKGZhbHNlKTtcbiAgICBHVUkuaGlkZUNvbnRlbnQodHJ1ZSk7XG4gIH1cbiAgY29uc3Qgd29ya2Zsb3cgPSB0aGlzLl9nZXRMaW5rRmVhdHVyZVdvcmtmbG93KCk7XG4gIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9jcmVhdGVXb3JrZmxvd09wdGlvbnMoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnMuY29udGV4dC5zZXNzaW9uO1xuICBjb25zdCB7b3duRmllbGR9ID0gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLl9nZXRSZWxhdGlvbkZpZWxkc0Zyb21SZWxhdGlvbih7XG4gICAgbGF5ZXJJZDogdGhpcy5fcmVsYXRpb25MYXllcklkLFxuICAgIHJlbGF0aW9uOiB0aGlzLnJlbGF0aW9uXG4gIH0pO1xuICAvL2FkZCBvcHRpb25zIHRvIGV4Y2x1ZGUgZmVhdHVyZXNcbiAgb3B0aW9ucy5jb250ZXh0LmV4Y2x1ZGUgPSB7XG4gICAgdmFsdWU6IHRoaXMuX2N1cnJlbnRQYXJlbnRGZWF0dXJlUmVsYXRpb25GaWVsZFZhbHVlLFxuICAgIGZpZWxkOiBvd25GaWVsZFxuICB9O1xuICBpZiAoaXNWZWN0b3IpIG9wdGlvbnMuY29udGV4dC5zdHlsZSA9IHRoaXMuZ2V0VW5saW5rZWRTdHlsZSgpO1xuICBjb25zdCBmZWF0dXJlID0gdGhpcy5nZXRDdXJyZW50V29ya2Zsb3dEYXRhKCkuZmVhdHVyZTtcbiAgY29uc3QgZGVwZW5kZW5jeU9wdGlvbnMgPSB7XG4gICAgcmVsYXRpb25zOiBbdGhpcy5yZWxhdGlvbl0sXG4gICAgZmVhdHVyZSxcbiAgICBvcGVyYXRvcjogJ25vdCcsXG4gICAgZmlsdGVyVHlwZTogaXNWZWN0b3IgPyAnYmJveCcgOiAnZmlkJ1xuICB9O1xuICBjb25zdCBnZXRSZWxhdGlvbkZlYXR1cmVzID0gKCkgPT4gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldExheWVyc0RlcGVuZGVuY3lGZWF0dXJlcyh0aGlzLl9wYXJlbnRMYXllcklkLCBkZXBlbmRlbmN5T3B0aW9ucyk7XG4gIGxldCBwcmVXb3JrZmxvd1N0YXJ0O1xuICBpZiAoaXNWZWN0b3IpIHtcbiAgICBjb25zdCBtYXBTZXJ2aWNlID0gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldE1hcFNlcnZpY2UoKTtcbiAgICBvcHRpb25zLmNvbnRleHQuYmVmb3JlUnVuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgbWFwU2VydmljZS5zaG93TWFwU3Bpbm5lcigpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+e1xuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBhd2FpdCBnZXRSZWxhdGlvbkZlYXR1cmVzKCk7XG4gICAgICBtYXBTZXJ2aWNlLmhpZGVNYXBTcGlubmVyKCk7XG4gICAgICBHVUkuc2hvd1VzZXJNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2luZm8nLFxuICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICBtZXNzYWdlOiB0KCdlZGl0aW5nLm1lc3NhZ2VzLnByZXNzX2VzYycpLFxuICAgICAgICBjbG9zYWJsZTogZmFsc2VcbiAgICAgIH0pXG4gICAgfTtcbiAgICBwcmVXb3JrZmxvd1N0YXJ0ID0gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xuICAgICAgd29ya2Zsb3cuYmluZEVzY0tleVVwKCk7XG4gICAgICBjb25zdCBwcm9taXNlID0gd29ya2Zsb3cuc3RhcnQob3B0aW9ucyk7XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgcHJvbWlzZSxcbiAgICAgICAgc2hvd0NvbnRlbnQ6IHRydWVcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0gZWxzZSBwcmVXb3JrZmxvd1N0YXJ0ID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBnZXRSZWxhdGlvbkZlYXR1cmVzKClcbiAgICAgIC50aGVuKCgpPT57XG4gICAgICAgIHJlc29sdmUoe30pXG4gICAgICB9KVxuICB9KTtcblxuICBwcmVXb3JrZmxvd1N0YXJ0LnRoZW4oKHtwcm9taXNlLCBzaG93Q29udGVudD1mYWxzZX09e30pPT4ge1xuICAgIGxldCBsaW5rZWQgPSBmYWxzZTtcbiAgICBwcm9taXNlID0gcHJvbWlzZSB8fCB3b3JrZmxvdy5zdGFydChvcHRpb25zKTtcbiAgICBwcm9taXNlLnRoZW4ob3V0cHV0cyA9PiB7XG4gICAgICBpZiAob3V0cHV0cy5mZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgb3V0cHV0cy5mZWF0dXJlcy5mb3JFYWNoKHJlbGF0aW9uID0+IHtcbiAgICAgICAgICBjb25zdCByZWxhdGlvbkFscmVhZHlMaW5rZWQgPSB0aGlzLnJlbGF0aW9ucy5maW5kKHJlbCA9PiByZWwuaWQgPT09IHJlbGF0aW9uLmdldElkKCkpO1xuICAgICAgICAgIGlmICghcmVsYXRpb25BbHJlYWR5TGlua2VkKSB7XG4gICAgICAgICAgICBsaW5rZWQgPSBsaW5rZWQgfHwgdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUmVsYXRpb24gPSByZWxhdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgcmVsYXRpb24uc2V0KG93bkZpZWxkLCB0aGlzLl9jdXJyZW50UGFyZW50RmVhdHVyZVJlbGF0aW9uRmllbGRWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmdldEN1cnJlbnRXb3JrZmxvd0RhdGEoKS5zZXNzaW9uLnB1c2hVcGRhdGUodGhpcy5fcmVsYXRpb25MYXllcklkICwgcmVsYXRpb24sIG9yaWdpbmFsUmVsYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5yZWxhdGlvbnMucHVzaCh0aGlzLl9jcmVhdGVSZWxhdGlvbk9iaihyZWxhdGlvbikpO1xuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnRUb1BhcmVudFdvcmtGbG93KCk7XG4gICAgICAgICAgfSBlbHNlIEdVSS5ub3RpZnkud2FybmluZyh0KFwiZWRpdGluZy5yZWxhdGlvbl9hbHJlYWR5X2FkZGVkXCIpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkuZmFpbChlcnIgPT4ge1xuICAgICAgc2Vzc2lvbi5yb2xsYmFja0RlcGVuZGVjaWVzKFt0aGlzLl9yZWxhdGlvbkxheWVySWRdKTtcbiAgICB9KS5hbHdheXMoKCkgPT57XG4gICAgICBpZiAoc2hvd0NvbnRlbnQpIHtcbiAgICAgICAgR1VJLmNsb3NlVXNlck1lc3NhZ2UoKTtcbiAgICAgICAgR1VJLmhpZGVDb250ZW50KGZhbHNlKTtcbiAgICAgICAgd29ya2Zsb3cudW5iaW5kRXNjS2V5VXAoKTtcbiAgICAgIH1cbiAgICAgIGxpbmtlZCAmJiB0aGlzLmZvcmNlUGFyZW50c0Zyb21TZXJ2aWNlV29ya2Zsb3dUb1VwZGF0ZWQoKTtcbiAgICAgIHdvcmtmbG93LnN0b3AoKTtcbiAgICB9KTtcbiAgfSlcbn07XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHsqfVxuICogQHByaXZhdGVcbiAqL1xucHJvdG8uX2NoZWNrSWZFeHRlcm5hbEZpZWxkUmVxdWlyZWQgPSBmdW5jdGlvbigpIHtcbiAgLy8gb3duIEZpZWxkIGlzIHJlbGF0aW9uIEZpZWxkIG9mIFJlbGF0aW9uIExheWVyXG4gIGNvbnN0IHtvd25GaWVsZH0gPSB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuX2dldFJlbGF0aW9uRmllbGRzRnJvbVJlbGF0aW9uKHtcbiAgICBsYXllcklkOiB0aGlzLl9yZWxhdGlvbkxheWVySWQsXG4gICAgcmVsYXRpb246IHRoaXMucmVsYXRpb25cbiAgfSk7XG4gIHJldHVybiB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuaXNGaWVsZFJlcXVpcmVkKHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCwgb3duRmllbGQpO1xufTtcblxucHJvdG8uaXNSZXF1aXJlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5faXNFeHRlcm5hbEZpZWxkUmVxdWlyZWQ7XG59O1xuXG5wcm90by5fZ2V0UmVsYXRpb25GZWF0dXJlID0gZnVuY3Rpb24oZmVhdHVyZUlkKSB7XG4gIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcigpO1xuICByZXR1cm4gbGF5ZXIuZ2V0RWRpdGluZ1NvdXJjZSgpLmdldEZlYXR1cmVCeUlkKGZlYXR1cmVJZCk7XG59O1xuXG5wcm90by51bmxpbmtSZWxhdGlvbiA9IGZ1bmN0aW9uKGluZGV4LCBkaWFsb2c9dHJ1ZSkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCB7b3duRmllbGR9ID0gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLl9nZXRSZWxhdGlvbkZpZWxkc0Zyb21SZWxhdGlvbih7XG4gICAgbGF5ZXJJZDogdGhpcy5fcmVsYXRpb25MYXllcklkLFxuICAgIHJlbGF0aW9uOiB0aGlzLnJlbGF0aW9uXG4gIH0pO1xuICBjb25zdCB1bmxpbmsgPSAoKSA9PntcbiAgICBjb25zdCByZWxhdGlvbiA9IHRoaXMucmVsYXRpb25zW2luZGV4XTtcbiAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5nZXRMYXllcigpLmdldEVkaXRpbmdTb3VyY2UoKS5nZXRGZWF0dXJlQnlJZChyZWxhdGlvbi5pZCk7XG4gICAgY29uc3Qgb3JpZ2luYWxSZWxhdGlvbiA9IGZlYXR1cmUuY2xvbmUoKTtcbiAgICBmZWF0dXJlLnNldChvd25GaWVsZCwgbnVsbCk7XG4gICAgdGhpcy5nZXRDdXJyZW50V29ya2Zsb3dEYXRhKCkuc2Vzc2lvbi5wdXNoVXBkYXRlKHRoaXMuX3JlbGF0aW9uTGF5ZXJJZCwgZmVhdHVyZSwgb3JpZ2luYWxSZWxhdGlvbik7XG4gICAgdGhpcy5yZWxhdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLmZvcmNlUGFyZW50c0Zyb21TZXJ2aWNlV29ya2Zsb3dUb1VwZGF0ZWQoKTtcbiAgICBkLnJlc29sdmUodHJ1ZSk7XG4gIH07XG4gIGlmIChkaWFsb2cpIHtcbiAgICBHVUkuZGlhbG9nLmNvbmZpcm0odChcImVkaXRpbmcubWVzc2FnZXMudW5saW5rX3JlbGF0aW9uXCIpLCByZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkgdW5saW5rKCkgO1xuICAgICAgZWxzZSBkLnJlamVjdChmYWxzZSk7XG4gICAgfSlcbiAgfSBlbHNlIHVubGluaygpO1xuXG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLmdldEN1cnJlbnRXb3JrZmxvdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldEN1cnJlbnRXb3JrZmxvdygpO1xufTtcblxucHJvdG8uZ2V0Q3VycmVudFdvcmtmbG93RGF0YSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldEN1cnJlbnRXb3JrZmxvd0RhdGEoKTtcbn07XG5cbnByb3RvLl9jcmVhdGVXb3JrZmxvd09wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIGNvbnN0IHtvd25GaWVsZH0gPSB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuX2dldFJlbGF0aW9uRmllbGRzRnJvbVJlbGF0aW9uKHtcbiAgICBsYXllcklkOiB0aGlzLl9yZWxhdGlvbkxheWVySWQsXG4gICAgcmVsYXRpb246IHRoaXMucmVsYXRpb25cbiAgfSk7XG4gIGNvbnN0IHdvcmtmbG93X29wdGlvbnMgPSB7XG4gICAgcGFyZW50RmVhdHVyZTogdGhpcy5nZXRDdXJyZW50V29ya2Zsb3dEYXRhKCkuZmVhdHVyZSxcbiAgICBjb250ZXh0OiB7XG4gICAgICBzZXNzaW9uOiB0aGlzLmdldEN1cnJlbnRXb3JrZmxvd0RhdGEoKS5zZXNzaW9uLFxuICAgICAgZXhjbHVkZUZpZWxkczogW293bkZpZWxkXSxcbiAgICAgIGZhdGhlclZhbHVlOiB0aGlzLl9jdXJyZW50UGFyZW50RmVhdHVyZVJlbGF0aW9uRmllbGRWYWx1ZSwgLy8gZmllbGQgb2YgZmF0aGVyIHJlbGF0aW9uIGxheWVyXG4gICAgICBmYXRoZXJGaWVsZDogb3duRmllbGQgLy8gdmFsdWUgb2YgZmF0aGVyIHJlbGF0aW9uRmllbGRcbiAgICB9LFxuICAgIGlucHV0czoge1xuICAgICAgZmVhdHVyZXM6IG9wdGlvbnMuZmVhdHVyZXMgfHwgW10sXG4gICAgICBsYXllcjogdGhpcy5nZXRMYXllcigpXG4gICAgfVxuICB9O1xuICByZXR1cm4gd29ya2Zsb3dfb3B0aW9ucztcbn07XG5cbnByb3RvLmdldFVubGlua2VkU3R5bGUgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHN0eWxlO1xuICBjb25zdCBnZW9tZXRyeVR5cGUgPSB0aGlzLmdldExheWVyKCkuZ2V0R2VvbWV0cnlUeXBlKCk7XG4gIHN3aXRjaCAoZ2VvbWV0cnlUeXBlKSB7XG4gICAgY2FzZSAnUG9pbnQnIHx8ICdNdWx0aVBvaW50JzpcbiAgICAgIHN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgaW1hZ2U6IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xuICAgICAgICAgIHJhZGl1czogOCxcbiAgICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7XG4gICAgICAgICAgICBjb2xvcjogdGhpcy5fZ2V0UmVsYXRpb25Bc0ZhdGhlclN0eWxlQ29sb3IoJ1BvaW50JylcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgICAgd2lkdGg6IDUsXG4gICAgICAgICAgICBjb2xvcjogICd5ZWxsb3cnXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTGluZScgfHwgJ011bHRpTGluZSc6XG4gICAgICBzdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICBjb2xvcjogdGhpcy5fZ2V0UmVsYXRpb25Bc0ZhdGhlclN0eWxlQ29sb3IoJ0xpbmUnKVxuICAgICAgICB9KSxcbiAgICAgICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgICAgICB3aWR0aDogNSxcbiAgICAgICAgICBjb2xvcjogJ3llbGxvdydcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUG9seWdvbicgfHwgJ011bHRpUG9seWdvbic6XG4gICAgICBzdHlsZSA9ICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgICAgIGNvbG9yOiAneWVsbG93JyAsXG4gICAgICAgICAgd2lkdGg6IDVcbiAgICAgICAgfSksXG4gICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHtcbiAgICAgICAgICBjb2xvcjogdGhpcy5fZ2V0UmVsYXRpb25Bc0ZhdGhlclN0eWxlQ29sb3IoJ1BvbHlnb24nKSxcbiAgICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufTtcblxucHJvdG8ucmVsYXRpb25GaWVsZHMgPSBmdW5jdGlvbihyZWxhdGlvbikge1xuICBjb25zdCBhdHRyaWJ1dGVzID0gW107XG4gIHJlbGF0aW9uLmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLnZhbHVlO1xuICAgIGF0dHJpYnV0ZXMucHVzaCh7bGFiZWw6IGZpZWxkLmxhYmVsLCB2YWx1ZX0pXG4gIH0pO1xuICByZXR1cm4gYXR0cmlidXRlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWxhdGlvblNlcnZpY2U7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHtHM1dPYmplY3R9ID0gZzN3c2RrLmNvcmU7XG5jb25zdCB7R1VJfSA9IGczd3Nkay5ndWk7XG5jb25zdCB0ID0gZzN3c2RrLmNvcmUuaTE4bi50UGx1Z2luO1xuXG5jb25zdCBUYWJsZVNlcnZpY2UgPSBmdW5jdGlvbihvcHRpb25zID0ge30pIHtcbiAgdGhpcy5fZmVhdHVyZXMgPSBvcHRpb25zLmZlYXR1cmVzIHx8IFtdOyAvLyBvcmlnaW5hbCBmZWF0dXJlc1xuICB0aGlzLl9wcm9taXNlID0gb3B0aW9ucy5wcm9taXNlO1xuICB0aGlzLl9jb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0O1xuICB0aGlzLl9pbnB1dHMgPSBvcHRpb25zLmlucHV0cztcbiAgdGhpcy5fZmF0aGVyVmFsdWUgPSBvcHRpb25zLmZhdGhlclZhbHVlO1xuICB0aGlzLl9mb3JlaWduS2V5ID0gb3B0aW9ucy5mb3JlaWduS2V5O1xuICB0aGlzLl93b3JrZmxvdyA9IG51bGw7XG4gIHRoaXMuX2RlbGV0ZUZlYXR1cmVzSW5kZXhlcyA9IFtdO1xuICB0aGlzLl9pc3JlbGF0aW9uID0gb3B0aW9ucy5pc3JlbGF0aW9uIHx8IGZhbHNlO1xuICBjb25zdCB7IGNhcGFiaWxpdGllcywgaGVhZGVycz1bXSwgdGl0bGU9J0xpbmsgcmVsYXRpb24nLCBwdXNoOmlzcmVsYXRpb24gfSA9IG9wdGlvbnM7XG4gIHRoaXMuc3RhdGUgPSB7XG4gICAgaGVhZGVycyxcbiAgICBmZWF0dXJlczogW10sXG4gICAgdGl0bGUgLFxuICAgIGlzcmVsYXRpb24sXG4gICAgY2FwYWJpbGl0aWVzXG4gIH07XG5cbiAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgLy9maWx0ZXIgdGhlIG9yaWdpbmFsIGZlYXR1cmUgYmFzZWQgb24gaWYgaXMgYSByZWxhdGlvblxuICAgIHRoaXMuX2ZlYXR1cmVzID0gIXRoaXMuX2lzcmVsYXRpb24gPyB0aGlzLl9mZWF0dXJlcyA6IHRoaXMuX2ZlYXR1cmVzLmZpbHRlcihmZWF0dXJlID0+XG4gICAgICBmZWF0dXJlLmdldCh0aGlzLl9mb3JlaWduS2V5KSAhPT0gdGhpcy5fZmF0aGVyVmFsdWVcbiAgICApO1xuICAgIC8vIHNldCB2YWx1ZXNcbiAgICBpZiAodGhpcy5fZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBiYXNlRmVhdHVyZSA9IHRoaXMuX2ZlYXR1cmVzWzBdO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IE9iamVjdC5rZXlzKGJhc2VGZWF0dXJlLmdldFByb3BlcnRpZXMoKSk7XG4gICAgICB0aGlzLnN0YXRlLmhlYWRlcnMgPSB0aGlzLnN0YXRlLmhlYWRlcnMuZmlsdGVyKGhlYWRlciA9PiBwcm9wZXJ0aWVzLmluZGV4T2YoaGVhZGVyLm5hbWUpICE9PSAtMSk7XG4gICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5zdGF0ZS5oZWFkZXJzLm1hcChoZWFkZXIgPT4gaGVhZGVyLm5hbWUpO1xuICAgICAgdGhpcy5zdGF0ZS5mZWF0dXJlcyA9IHRoaXMuX2ZlYXR1cmVzLm1hcChmZWF0dXJlID0+IHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGZlYXR1cmUuZ2V0UHJvcGVydGllcygpO1xuICAgICAgICBjb25zdCBvcmRlcmVkUHJvcGVydGllcyA9IHt9O1xuICAgICAgICBoZWFkZXJzLmZvckVhY2goaGVhZGVyID0+IHtcbiAgICAgICAgICBvcmRlcmVkUHJvcGVydGllc1toZWFkZXJdID0gcHJvcGVydGllc1toZWFkZXJdXG4gICAgICAgIH0pO1xuICAgICAgICBvcmRlcmVkUHJvcGVydGllcy5fX2dpczN3X2ZlYXR1cmVfdWlkID0gZmVhdHVyZS5nZXRVaWQoKTtcbiAgICAgICAgcmV0dXJuIG9yZGVyZWRQcm9wZXJ0aWVzO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICB0aGlzLmluaXQoKTtcbiAgYmFzZSh0aGlzKTtcbn07XG5cbmluaGVyaXQoVGFibGVTZXJ2aWNlLCBHM1dPYmplY3QpO1xuXG5jb25zdCBwcm90byA9IFRhYmxlU2VydmljZS5wcm90b3R5cGU7XG5cbnByb3RvLmlzTWVkaWFGaWVsZCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbGV0IGlzTWVkaWEgPSBmYWxzZTtcbiAgZm9yIChsZXQgaT0wOyBpIDwgdGhpcy5zdGF0ZS5oZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaGVhZGVyID0gdGhpcy5zdGF0ZS5oZWFkZXJzW2ldO1xuICAgIGlmIChoZWFkZXIubmFtZSA9PT0gbmFtZSAmJiBoZWFkZXIuaW5wdXQudHlwZSA9PT0gJ21lZGlhJyApIHtcbiAgICAgIGlzTWVkaWEgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpc01lZGlhO1xufTtcblxucHJvdG8uc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9wcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbnByb3RvLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9wcm9taXNlLnJlamVjdCgpO1xufTtcblxucHJvdG8uZGVsZXRlRmVhdHVyZSA9IGZ1bmN0aW9uKHVpZCkge1xuICBjb25zdCBFZGl0aW5nU2VydmljZSA9IHJlcXVpcmUoJy4vZWRpdGluZ3NlcnZpY2UnKTtcbiAgY29uc3QgbGF5ZXIgPSB0aGlzLl9pbnB1dHMubGF5ZXI7XG4gIGNvbnN0IGxheWVySWQgPSBsYXllci5nZXRJZCgpO1xuICBjb25zdCBjaGlsZFJlbGF0aW9ucyA9IGxheWVyLmdldENoaWxkcmVuKCk7XG4gIGNvbnN0IHJlbGF0aW9uaW5lZGl0aW5nID0gY2hpbGRSZWxhdGlvbnMubGVuZ3RoICYmICBFZGl0aW5nU2VydmljZS5fZmlsdGVyUmVsYXRpb25zSW5FZGl0aW5nKHtcbiAgICBsYXllcklkLFxuICAgIHJlbGF0aW9uczogbGF5ZXIuZ2V0UmVsYXRpb25zKCkuZ2V0QXJyYXkoKVxuICB9KS5sZW5ndGggPiAwO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT57XG4gICAgR1VJLmRpYWxvZy5jb25maXJtKGA8aDQ+JHt0KCdlZGl0aW5nLm1lc3NhZ2VzLmRlbGV0ZV9mZWF0dXJlJyl9PC9oND5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJmb250LXNpemU6MS4yZW07XCI+JHsgcmVsYXRpb25pbmVkaXRpbmcgP3QoJ2VkaXRpbmcubWVzc2FnZXMuZGVsZXRlX2ZlYXR1cmVfcmVsYXRpb25zJykgOiAnJ308L2Rpdj5gLCAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgY29uc3QgZmVhdHVyZSA9IHRoaXMuX2ZlYXR1cmVzLmZpbmQoKGZlYXR1cmUsIGZlYXR1cmVJZHgpID0+IHtcbiAgICAgICAgICBpZiAoZmVhdHVyZS5nZXRVaWQoKSA9PT0gdWlkKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZlYXR1cmVJZHg7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5fY29udGV4dC5zZXNzaW9uO1xuICAgICAgICBjb25zdCBsYXllcklkID0gdGhpcy5faW5wdXRzLmxheWVyLmdldElkKCk7XG4gICAgICAgIHRoaXMuX2lucHV0cy5sYXllci5nZXRFZGl0aW5nU291cmNlKCkucmVtb3ZlRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgc2Vzc2lvbi5wdXNoRGVsZXRlKGxheWVySWQsIGZlYXR1cmUpO1xuICAgICAgICB0aGlzLnN0YXRlLmZlYXR1cmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfSBlbHNlIHJlamVjdCgpXG4gICAgfSk7XG4gIH0pXG59O1xuXG5wcm90by5jb3B5RmVhdHVyZSA9IGZ1bmN0aW9uKHVpZCl7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PntcbiAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5fZmVhdHVyZXMuZmluZChmZWF0dXJlID0+IGZlYXR1cmUuZ2V0VWlkKCkgPT09IHVpZCkuY2xvbmVOZXcoKTtcbiAgICBjb25zdCBhZGRUYWJsZUZlYXR1cmVXb3JmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2FkZHRhYmxlZmVhdHVyZXdvcmtmbG93Jyk7XG4gICAgdGhpcy5fd29ya2Zsb3cgPSBuZXcgYWRkVGFibGVGZWF0dXJlV29yZmxvdygpO1xuICAgIGNvbnN0IGlucHV0cyA9IHRoaXMuX2lucHV0cztcbiAgICBpbnB1dHMuZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgY29udGV4dDogdGhpcy5fY29udGV4dCxcbiAgICAgIGlucHV0c1xuICAgIH07XG4gICAgdGhpcy5fd29ya2Zsb3cuc3RhcnQob3B0aW9ucylcbiAgICAgIC50aGVuKG91dHB1dHMgPT4ge1xuICAgICAgICBjb25zdCBmZWF0dXJlID0gb3V0cHV0cy5mZWF0dXJlc1tvdXRwdXRzLmZlYXR1cmVzLmxlbmd0aCAtMV07XG4gICAgICAgIGNvbnN0IG5ld0ZlYXR1cmUgPSB7fTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5zdGF0ZS5mZWF0dXJlc1swXSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgbmV3RmVhdHVyZVtrZXldID0gZmVhdHVyZS5nZXQoa2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld0ZlYXR1cmUuX19naXMzd19mZWF0dXJlX3VpZCA9IGZlYXR1cmUuZ2V0VWlkKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuZmVhdHVyZXMucHVzaChuZXdGZWF0dXJlKTtcbiAgICAgICAgcmVzb2x2ZShuZXdGZWF0dXJlKVxuICAgICAgfSlcbiAgICAgIC5mYWlsKGVyciA9PiByZWplY3QoZXJyKSk7XG4gIH0pXG59O1xuXG5wcm90by5lZGl0RmVhdHVyZSA9IGZ1bmN0aW9uKHVpZCkge1xuICBsZXQgaW5kZXg7XG4gIGNvbnN0IGZlYXR1cmUgPSB0aGlzLl9mZWF0dXJlcy5maW5kKChmZWF0dXJlLCBmZWF0dXJlSW5kZXgpID0+IHtcbiAgICBpZiAoZmVhdHVyZS5nZXRVaWQoKSA9PT0gdWlkKSB7XG4gICAgICBpbmRleCA9IGZlYXR1cmVJbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IEVkaXRUYWJsZUZlYXR1cmVXb3JrZmxvdyA9IHJlcXVpcmUoJy4uL3dvcmtmbG93cy9lZGl0dGFibGVmZWF0dXJld29ya2Zsb3cnKTtcbiAgdGhpcy5fd29ya2Zsb3cgPSBuZXcgRWRpdFRhYmxlRmVhdHVyZVdvcmtmbG93KCk7XG4gIGNvbnN0IGlucHV0cyA9IHRoaXMuX2lucHV0cztcbiAgaW5wdXRzLmZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgY29udGV4dDogdGhpcy5fY29udGV4dCxcbiAgICBpbnB1dHNcbiAgfTtcbiAgdGhpcy5fd29ya2Zsb3cuc3RhcnQob3B0aW9ucylcbiAgICAudGhlbihvdXRwdXRzID0+IHtcbiAgICAgIGNvbnN0IGZlYXR1cmUgPSBvdXRwdXRzLmZlYXR1cmVzW291dHB1dHMuZmVhdHVyZXMubGVuZ3RoIC0xXTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuc3RhdGUuZmVhdHVyZXNbaW5kZXhdKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5mZWF0dXJlc1tpbmRleF1ba2V5XSA9IGZlYXR1cmUuZ2V0KGtleSk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIC5mYWlsKGVyciA9PiB7fSlcbiAgICAuYWx3YXlzKCgpID0+ICB0aGlzLl93b3JrZmxvdy5zdG9wKCkpXG59O1xuXG5wcm90by5saW5rRmVhdHVyZXMgPSBmdW5jdGlvbihmZWF0dXJlc0luZGV4PVtdKXtcbiAgY29uc3QgZmVhdHVyZXMgPSBmZWF0dXJlc0luZGV4Lm1hcChpbmRleCA9PiB0aGlzLl9mZWF0dXJlc1tpbmRleF0pO1xuICB0aGlzLl9wcm9taXNlLnJlc29sdmUoe1xuICAgIGZlYXR1cmVzXG4gIH0pXG59O1xuXG5wcm90by5saW5rRmVhdHVyZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIGNvbnN0IGZlYXR1cmUgPSB0aGlzLl9mZWF0dXJlc1tpbmRleF07XG4gIHRoaXMuX3Byb21pc2UucmVzb2x2ZSh7XG4gICAgICBmZWF0dXJlczogW2ZlYXR1cmVdXG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlU2VydmljZTtcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0LCB0b1Jhd1R5cGV9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHsgRzNXT2JqZWN0IH0gPSBnM3dzZGsuY29yZTtcblxuZnVuY3Rpb24gVG9vbChvcHRpb25zID0ge30pIHtcbiAgYmFzZSh0aGlzKTtcbiAgdGhpcy5lZGl0aW5nU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2VkaXRpbmdzZXJ2aWNlJyk7XG4gIGNvbnN0IHtuYW1lLCByb3csIGlkLCBpY29uLCBzZXNzaW9uLCBsYXllciwgb25jZT1mYWxzZSwgdHlwZT1bXSwgdmlzaWJsZT10cnVlLCBjb25kaXRpb25zPXt9fSA9IG9wdGlvbnM7XG4gIHRoaXMuX29wdGlvbnMgPSBudWxsO1xuICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgdGhpcy5fbGF5ZXIgPSBsYXllcjtcbiAgdGhpcy5fb3AgPSBuZXcgb3B0aW9ucy5vcCh7XG4gICAgbGF5ZXJcbiAgfSk7XG4gIHRoaXMuX29uY2UgPSBvbmNlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmNvbmRpdGlvbnMgPSBjb25kaXRpb25zO1xuICB0aGlzLmRpc2FibGVkdG9vbHNvZnRvb2xzID0gW107XG4gIHRoaXMuc3RhdGUgPSB7XG4gICAgaWQsXG4gICAgbmFtZSxcbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICB2aXNpYmxlOiB2aXNpYmxlIGluc3RhbmNlb2YgRnVuY3Rpb24gPyAoKCk9PiB2aXNpYmxlKHRoaXMpKSgpIDogdmlzaWJsZSxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGljb24sXG4gICAgbWVzc2FnZTogbnVsbCxcbiAgICByb3c6IHJvdyB8fCAxLFxuICAgIG1lc3NhZ2VzOiB0aGlzLl9vcC5nZXRNZXNzYWdlcygpXG4gIH07XG59XG5cbmluaGVyaXQoVG9vbCwgRzNXT2JqZWN0KTtcblxuY29uc3QgcHJvdG8gPSBUb29sLnByb3RvdHlwZTtcblxucHJvdG8uc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pe1xuICBjb25zdCB7bWVzc2FnZXMsIGVuYWJsZWQ9ZmFsc2UsIHZpc2libGU9dHJ1ZSwgZGlzYWJsZWR0b29sc29mdG9vbHMgPSBbXX0gPSBvcHRpb25zO1xuICB0aGlzLnN0YXRlLm1lc3NhZ2VzID0gbWVzc2FnZXMgfHwgdGhpcy5zdGF0ZS5tZXNzYWdlcztcbiAgdGhpcy5zdGF0ZS52aXNpYmxlID0gdmlzaWJsZTtcbiAgdGhpcy5zdGF0ZS5lbmFibGVkID0gZW5hYmxlZDtcbiAgdGhpcy5kaXNhYmxlZHRvb2xzb2Z0b29scyA9IGRpc2FibGVkdG9vbHNvZnRvb2xzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gbGF5ZXIgb3duZXIgb2YgdG9vbFxuICovXG5wcm90by5nZXRMYXllciA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLl9sYXllcjtcbn07XG5cbnByb3RvLmdldFR5cGUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy50eXBlO1xufTtcblxucHJvdG8uZ2V0RmVhdHVyZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fb3B0aW9ucy5pbnB1dHMuZmVhdHVyZXNbMF07XG59O1xuXG5wcm90by5jcmVhdGVPcGVyYXRvck9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zPXtmZWF0dXJlczpbXX0pe1xuICBjb25zdCB7ZmVhdHVyZXM9W119ID0gb3B0aW9ucztcbiAgcmV0dXJuIHtcbiAgICBpbnB1dHMgOiB7XG4gICAgICBsYXllcjogdGhpcy5fbGF5ZXIsXG4gICAgICBmZWF0dXJlc1xuICAgIH0sXG4gICAgY29udGV4dCA6IHtcbiAgICAgIHNlc3Npb246IHRoaXMuX3Nlc3Npb25cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIFxuICogQHBhcmFtIGhpZGVTaWRlYmFyXG4gKi9cbnByb3RvLnN0YXJ0ID0gZnVuY3Rpb24oaGlkZVNpZGViYXIgPSBmYWxzZSkge1xuICBjb25zdCBvcHRpb25zID0gdGhpcy5jcmVhdGVPcGVyYXRvck9wdGlvbnMoKTtcbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIGNvbnN0IHN0YXJ0T3AgPSBvcHRpb25zID0+IHtcbiAgICB0aGlzLl9vcC5vbmNlKCdzZXR0b29sc29mdG9vbCcsIHRvb2xzID0+IHtcbiAgICAgIC8vIGZpbHRlciBldmVudHVhbGx5IGRpc2FibGUgdG9vbHMgb2YgdG9vbHNcbiAgICAgIHRvb2xzID0gdG9vbHMuZmlsdGVyKHRvb2wgPT4gIXRoaXMuZGlzYWJsZWR0b29sc29mdG9vbHMuaW5jbHVkZXModG9vbC50eXBlKSk7XG4gICAgICB0b29scy5sZW5ndGggJiYgdGhpcy5lbWl0KCdzZXR0b29sc29mdG9vbCcsIHRvb2xzKVxuICAgIH0pO1xuICAgIHRoaXMuX29wLm9uY2UoJ2FjdGl2ZScsIGluZGV4ID0+IHRoaXMuZW1pdCgnYWN0aXZlJywgaW5kZXgpKTtcbiAgICB0aGlzLl9vcC5vbmNlKCdkZWFjdGl2ZScsIGluZGV4ID0+IHRoaXMuZW1pdCgnZGVhY3RpdmUnLCBpbmRleCkpO1xuICAgIC8vcmVzZXQgZmVhdHVyZXNcbiAgICBvcHRpb25zLmlucHV0cy5mZWF0dXJlcyA9IFtdO1xuICAgIGhpZGVTaWRlYmFyICYmIEdVSS5oaWRlU2lkZWJhcigpO1xuICAgIHRoaXMuX29wLnN0YXJ0KG9wdGlvbnMpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX3Nlc3Npb24uc2F2ZSgpXG4gICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5lZGl0aW5nU2VydmljZS5zYXZlQ2hhbmdlKCkpOyAvLyBhZnRlciBzYXZlIHRlbXAgY2hhbmdlIGNoZWNrIGlmIGVkaXRpbmcgc2VydmljZSBoYXMgYSBhdXRvc2F2ZVxuICAgICAgfSlcbiAgICAgIC5mYWlsKCgpID0+IHtcbiAgICAgICAgaGlkZVNpZGViYXIgJiYgR1VJLnNob3dTaWRlYmFyKCk7XG4gICAgICAgIHRoaXMuX3Nlc3Npb24ucm9sbGJhY2soKVxuICAgICAgICAgIC50aGVuKCgpID0+IHt9KVxuICAgICAgfSlcbiAgICAgIC5hbHdheXMoKCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuX29uY2UgJiYgdGhpcy5fbGF5ZXIuZ2V0VHlwZSgpICE9PSAndGFibGUnKSBzdGFydE9wKG9wdGlvbnMpO1xuICAgICAgICBlbHNlIHRoaXMuc3RvcCgpO1xuICAgICAgfSlcbiAgfTtcbiAgaWYgKHRoaXMuX29wKSB7XG4gICAgdGhpcy5zdGF0ZS5hY3RpdmUgPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCk9PnsgLy8gdXNlZCB0byBwcmV2ZW50IHJlbmRlcmluZCBjaGFuZ2Ugc3RhdGVcbiAgICAgIHN0YXJ0T3Aob3B0aW9ucyk7XG4gICAgfSlcbiAgfVxufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKGZvcmNlPWZhbHNlKSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGlmICh0aGlzLl9vcCkge1xuICAgIHRoaXMuX29wLnN0b3AoZm9yY2UpXG4gICAgICAudGhlbigoKSA9PiB7fSlcbiAgICAgIC5mYWlsKCgpID0+IHRoaXMuX3Nlc3Npb24ucm9sbGJhY2soKSlcbiAgICAgIC5hbHdheXMoKCkgPT4ge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0KCdzdG9wJywge1xuICAgICAgICAgIHNlc3Npb246IHRoaXMuX3Nlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGQucmVzb2x2ZSgpO1xuICAgICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVtaXQoJ3N0b3AnLCB7XG4gICAgICBzZXNzaW9uOiB0aGlzLl9zZXNzaW9uXG4gICAgfSk7XG4gICAgZC5yZXNvbHZlKCk7XG4gIH1cbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcblxucHJvdG8uZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGU7XG59O1xuXG5wcm90by5zZXRTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLmdldElkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmlkO1xufTtcblxucHJvdG8uc2V0SWQgPSBmdW5jdGlvbihpZCkge1xuICB0aGlzLnN0YXRlLmlkID0gaWQ7XG59O1xuXG5wcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLm5hbWU7XG59O1xuXG5wcm90by5zZXRBY3RpdmUgPSBmdW5jdGlvbihib29sPWZhbHNlKSB7XG4gIHRoaXMuc3RhdGUuYWN0aXZlID0gYm9vbDtcbn07XG5cbnByb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmFjdGl2ZTtcbn07XG5cbnByb3RvLmdldEljb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuaWNvbjtcbn07XG5cbnByb3RvLnNldEljb24gPSBmdW5jdGlvbihpY29uKSB7XG4gIHRoaXMuc3RhdGUuaWNvbiA9IGljb247XG59O1xuXG5wcm90by5zZXRFbmFibGVkID0gZnVuY3Rpb24oYm9vbD1mYWxzZSkge1xuICB0aGlzLnN0YXRlLmVuYWJsZWQgPSBib29sXG59O1xuXG5wcm90by5pc0VuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuZW5hYmxlZDtcbn07XG5cbnByb3RvLnNldFZpc2libGUgPSBmdW5jdGlvbihib29sPXRydWUpe1xuICB0aGlzLnN0YXRlLnZpc2libGUgPSBib29sO1xufTtcblxucHJvdG8uaXNWaXNpYmxlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuc3RhdGUudmlzaWJsZTtcbn07XG5cbnByb3RvLmdldE9wZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9vcDtcbn07XG5cbnByb3RvLmdldFNlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Nlc3Npb247XG59O1xuXG5wcm90by5zZXRTZXNzaW9uID0gZnVuY3Rpb24oc2Vzc2lvbikge1xuICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbn07XG5cbnByb3RvLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RhdGUuZW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLnN0YXRlLmFjdGl2ZSA9IGZhbHNlO1xufTtcblxucHJvdG8uZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBvcGVyYXRvciA9IHRoaXMuZ2V0T3BlcmF0b3IoKTtcbiAgcmV0dXJuIG9wZXJhdG9yLmdldEhlbHBNZXNzYWdlKCkgfHwgb3BlcmF0b3IuZ2V0UnVubmluZ1N0ZXAoKSA/IHRoaXMuc3RhdGUubWVzc2FnZXMgOiBudWxsO1xufTtcblxucHJvdG8uc2V0TWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgdGhpcy5zdGF0ZS5tZXNzYWdlID0gbWVzc2FnZTtcbn07XG5cbnByb3RvLmNsZWFyTWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN0YXRlLm1lc3NhZ2UgPSBudWxsO1xufTtcblxucHJvdG8ucmVzZXREZWZhdWx0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5zdGF0ZS52aXNpYmxlID0gdHJ1ZTtcbiAgdGhpcy5zdGF0ZS5lbmFibGVkID0gZmFsc2U7XG4gIHRoaXMuc3RhdGUubWVzc2FnZXMgPSAgdGhpcy5fb3AuZ2V0TWVzc2FnZXMoKTtcbiAgdGhpcy5kaXNhYmxlZHRvb2xzb2Z0b29scyA9IFtdOyAvL3Jlc2V0IGRpc2FibGVkIHRvb2xzIGV2ZW50dWFsbHkgc2V0IGJ5IG90aGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2w7XG4iLCJjb25zdCB7IEFwcGxpY2F0aW9uU3RhdGUsIEczV09iamVjdCB9ID0gZzN3c2RrLmNvcmU7XG5jb25zdCB7YmFzZSwgaW5oZXJpdCwgZGVib3VuY2UsIHRvUmF3VHlwZX0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHsgR1VJIH0gPSBnM3dzZGsuZ3VpO1xuY29uc3QgeyB0UGx1Z2luOnQgfSA9IGczd3Nkay5jb3JlLmkxOG47XG5jb25zdCB7IExheWVyIH0gPSBnM3dzZGsuY29yZS5sYXllcjtcbmNvbnN0IHsgU2Vzc2lvbiB9ID0gZzN3c2RrLmNvcmUuZWRpdGluZztcbmNvbnN0IHsgZ2V0U2NhbGVGcm9tUmVzb2x1dGlvbiB9ID0gZzN3c2RrLm9sLnV0aWxzO1xuXG5mdW5jdGlvbiBUb29sQm94KG9wdGlvbnM9e30pIHtcbiAgYmFzZSh0aGlzKTtcbiAgdGhpcy5lZGl0aW5nU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2VkaXRpbmdzZXJ2aWNlJyk7XG4gIHRoaXMuX21hcFNlcnZpY2UgPSBHVUkuZ2V0U2VydmljZSgnbWFwJyk7XG4gIHRoaXMuX3N0YXJ0ID0gZmFsc2U7XG4gIHRoaXMuX2NvbnN0cmFpbnRzID0gb3B0aW9ucy5jb25zdHJhaW50cyB8fCB7fTtcbiAgdGhpcy5fbGF5ZXIgPSBvcHRpb25zLmxheWVyO1xuICB0aGlzLnVuaXF1ZUZpZWxkcyA9IHRoaXMuZ2V0VW5pcXVlRmllbGRzVHlwZSh0aGlzLl9sYXllci5nZXRFZGl0aW5nRmllbGRzKCkpO1xuICB0aGlzLnVuaXF1ZUZpZWxkcyAmJiB0aGlzLmdldEZpZWxkVW5pcXVlVmFsdWVzRnJvbVNlcnZlcigpO1xuICB0aGlzLl9sYXllclR5cGUgPSBvcHRpb25zLnR5cGUgfHwgTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1I7XG4gIHRoaXMuX2xvYWRlZEV4dGVudCA9IG51bGw7XG4gIHRoaXMuX3Rvb2xzID0gb3B0aW9ucy50b29scztcbiAgdGhpcy5fZW5hYmxlZHRvb2xzO1xuICB0aGlzLl9kaXNhYmxlZHRvb2xzO1xuICB0aGlzLl9nZXRGZWF0dXJlc09wdGlvbiA9IHt9O1xuICBjb25zdCB0b29sc3N0YXRlID0gW107XG4gIHRoaXMuX3Rvb2xzLmZvckVhY2godG9vbCA9PiB0b29sc3N0YXRlLnB1c2godG9vbC5nZXRTdGF0ZSgpKSk7XG4gIHRoaXMuY29uc3RyYWludHMgPSB7XG4gICAgZmlsdGVyOiBudWxsLFxuICAgIHNob3c6IG51bGwsXG4gICAgdG9vbHM6IFtdXG4gIH07IC8vIGlzIHVzZWQgdG8gY29uc3RyYWludCBsb2FkaW5nIGZlYXR1cmVzIHRvIGEgZmlsdGVyIHNldFxuICB0aGlzLl9zZXNzaW9uID0gbmV3IFNlc3Npb24oe1xuICAgIGlkOiBvcHRpb25zLmlkLFxuICAgIGVkaXRvcjogdGhpcy5fbGF5ZXIuZ2V0RWRpdG9yKClcbiAgfSk7XG5cbiAgLy8gZ2V0IGluZm9ybWVkIHdoZW4gc2F2ZSBvbiBzZXJ2ZXJcbiAgdGhpcy51bmlxdWVGaWVsZHMgJiYgdGhpcy5fc2Vzc2lvbi5vbmFmdGVyKCdzYXZlQ2hhbmdlc09uU2VydmVyJywgKCk9PntcbiAgICB0aGlzLl9yZXNldFVuaXF1ZVZhbHVlcygpO1xuICB9KTtcblxuICB0aGlzLl9nZXRGZWF0dXJlc09wdGlvbiA9IHt9O1xuICBjb25zdCBoaXN0b3J5c3RhdGUgPSB0aGlzLl9zZXNzaW9uLmdldEhpc3RvcnkoKS5zdGF0ZTtcbiAgY29uc3Qgc2Vzc2lvbnN0YXRlID0gdGhpcy5fc2Vzc2lvbi5zdGF0ZTtcbiBcbiAgdGhpcy5zdGF0ZSA9IHtcbiAgICBpZDogb3B0aW9ucy5pZCxcbiAgICBjaGFuZ2luZ3Rvb2xzOiBmYWxzZSwgLy8gdXNlZCB0byBzaG93IG9yIG5vdCB0b29scyBkdXJpbmcgY2hhbmdlIHBoYXNlXG4gICAgc2hvdzogdHJ1ZSwgLy8gdXNlZCB0byBzaG93IG9yIG5vdCB0aGUgdG9vbGJveCBpZiB3ZSBuZWUgdG8gZmlsdGVyZWRcbiAgICBjb2xvcjogb3B0aW9ucy5jb2xvciB8fCAnYmx1ZScsXG4gICAgdGl0bGU6IG9wdGlvbnMudGl0bGUgfHwgXCJFZGl0IExheWVyXCIsXG4gICAgY3VzdG9tVGl0bGU6IGZhbHNlLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIHRvb2xib3hoZWFkZXI6IHRydWUsXG4gICAgc3RhcnRzdG9wZWRpdGluZzogdHJ1ZSxcbiAgICBtZXNzYWdlOiBudWxsLFxuICAgIHRvb2xtZXNzYWdlczoge1xuICAgICAgaGVscDogbnVsbFxuICAgIH0sXG4gICAgdG9vbHNvZnRvb2w6IFtdLFxuICAgIHRvb2xzOiB0b29sc3N0YXRlLFxuICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICBhY3RpdmV0b29sOiBudWxsLFxuICAgIGVkaXRpbmc6IHtcbiAgICAgIHNlc3Npb246IHNlc3Npb25zdGF0ZSxcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnlzdGF0ZSxcbiAgICAgIG9uOiBmYWxzZSxcbiAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICByZWxhdGlvbnM6IFtdLFxuICAgICAgZmF0aGVyOiBmYWxzZSxcbiAgICAgIGNhbkVkaXQ6IHRydWVcbiAgICB9LFxuICAgIGxheWVyc3RhdGU6IHRoaXMuX2xheWVyLnN0YXRlXG4gIH07XG5cbiAgLyoqXG4gICAqICBzYXZlIG9yaWdpbmFsIHZhbHVlIG9mIHN0YXRlIGluIGNhc2Ugb2YgY3VzdG9tIGNoYW5nZXNcbiAgICogXG4gICAqL1xuICB0aGlzLm9yaWdpbmFsU3RhdGUgPSB7XG4gICAgdGl0bGU6IHRoaXMuc3RhdGUudGl0bGUsXG4gICAgdG9vbHNvZnRvb2w6IFsuLi50aGlzLnN0YXRlLnRvb2xzb2Z0b29sXVxuICB9O1xuICBcbiAgdGhpcy5fdG9vbHMuZm9yRWFjaCh0b29sID0+IHRvb2wuc2V0U2Vzc2lvbih0aGlzLl9zZXNzaW9uKSk7XG5cbiAgdGhpcy5fc2Vzc2lvbi5vbmFmdGVyKCdzdG9wJywgKCkgPT4ge1xuICAgIGlmICh0aGlzLmluRWRpdGluZygpKSB7XG4gICAgICBBcHBsaWNhdGlvblN0YXRlLm9ubGluZSAmJiB0aGlzLmVkaXRpbmdTZXJ2aWNlLnN0b3BTZXNzaW9uQ2hpbGRyZW4odGhpcy5zdGF0ZS5pZCk7XG4gICAgICB0aGlzLl9nZXRGZWF0dXJlc09wdGlvbi5yZWdpc3RlckV2ZW50cyAmJiB0aGlzLl91bnJlZ2lzdGVyR2V0RmVhdHVyZXNFdmVudCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5fc2Vzc2lvbi5vbmFmdGVyKCdzdGFydCcsIG9wdGlvbnMgPT4ge1xuICAgIGlmIChvcHRpb25zLnJlZ2lzdGVyRXZlbnRzKSB7XG4gICAgICB0aGlzLl9nZXRGZWF0dXJlc0V2ZW50ID0ge1xuICAgICAgICBldmVudDogbnVsbCxcbiAgICAgICAgZm5jOiBudWxsXG4gICAgICB9O1xuICAgICAgdGhpcy5fZ2V0RmVhdHVyZXNPcHRpb24gPSBvcHRpb25zO1xuICAgICAgdGhpcy5fcmVnaXN0ZXJHZXRGZWF0dXJlc0V2ZW50KHRoaXMuX2dldEZlYXR1cmVzT3B0aW9uKTtcbiAgICAgIGlmIChvcHRpb25zLnR5cGUgPT09IExheWVyLkxheWVyVHlwZXMuVkVDVE9SICYmIEdVSS5nZXRDb250ZW50TGVuZ3RoKCkpXG4gICAgICAgIEdVSS5vbmNlKCdjbG9zZWNvbnRlbnQnLCAoKT0+IHNldFRpbWVvdXQoKCk9PiB0aGlzLl9tYXBTZXJ2aWNlLmdldE1hcCgpLmRpc3BhdGNoRXZlbnQodGhpcy5fZ2V0RmVhdHVyZXNFdmVudC5ldmVudCkpKTtcbiAgICB9XG4gIH0pO1xufVxuXG5pbmhlcml0KFRvb2xCb3gsIEczV09iamVjdCk7XG5cbmNvbnN0IHByb3RvID0gVG9vbEJveC5wcm90b3R5cGU7XG5cbnByb3RvLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlO1xufTtcblxucHJvdG8uc2V0U2hvdyA9IGZ1bmN0aW9uKGJvb2w9dHJ1ZSl7XG4gIHRoaXMuc3RhdGUuc2hvdyA9IGJvb2w7XG59O1xuXG5wcm90by5nZXRMYXllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbGF5ZXI7XG59O1xuXG5wcm90by5zZXRGYXRoZXIgPSBmdW5jdGlvbihib29sKSB7XG4gIHRoaXMuc3RhdGUuZWRpdGluZy5mYXRoZXIgPSBib29sO1xufTtcblxucHJvdG8uaXNGYXRoZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuZWRpdGluZy5mYXRoZXI7XG59O1xuXG5wcm90by5hZGRSZWxhdGlvbnMgPSBmdW5jdGlvbihyZWxhdGlvbnMpIHtcbiAgcmVsYXRpb25zLmZvckVhY2gocmVsYXRpb24gPT4gdGhpcy5hZGRSZWxhdGlvbihyZWxhdGlvbikpO1xufTtcblxucHJvdG8ucmV2ZXJ0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9zZXNzaW9uLnJldmVydCgpO1xufTtcblxucHJvdG8uYWRkUmVsYXRpb24gPSBmdW5jdGlvbihyZWxhdGlvbikge1xuICB0aGlzLnN0YXRlLmVkaXRpbmcucmVsYXRpb25zLnB1c2gocmVsYXRpb24pO1xufTtcblxucHJvdG8uZ2V0RGVwZW5kZW5jaWVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmVkaXRpbmcuZGVwZW5kZW5jaWVzO1xufTtcblxucHJvdG8uaGFzRGVwZW5kZW5jaWVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIXRoaXMuc3RhdGUuZWRpdGluZy5kZXBlbmRlbmNpZXMubGVuZ3RoO1xufTtcblxucHJvdG8uYWRkRGVwZW5kZW5jaWVzID0gZnVuY3Rpb24oZGVwZW5kZW5jaWVzKSB7XG4gIGRlcGVuZGVuY2llcy5mb3JFYWNoKGRlcGVuZGVuY3kgPT4gdGhpcy5hZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpKTtcbn07XG5cbnByb3RvLmFkZERlcGVuZGVuY3kgPSBmdW5jdGlvbihkZXBlbmRlbmN5KSB7XG4gIHRoaXMuc3RhdGUuZWRpdGluZy5kZXBlbmRlbmNpZXMucHVzaChkZXBlbmRlbmN5KTtcbn07XG5cbnByb3RvLmdldEZpZWxkVW5pcXVlVmFsdWVzRnJvbVNlcnZlciA9IGZ1bmN0aW9uKHtyZXNldD1mYWxzZX09e30pIHtcbiAgY29uc3QgZmllbGRzTmFtZSA9IE9iamVjdC52YWx1ZXModGhpcy51bmlxdWVGaWVsZHMpLm1hcChmaWVsZCA9PiBmaWVsZC5uYW1lKTtcbiAgdGhpcy5fbGF5ZXIuZ2V0V2lkZ2V0RGF0YSh7XG4gICAgdHlwZTogJ3VuaXF1ZScsXG4gICAgZmllbGRzOiBmaWVsZHNOYW1lLmpvaW4oKVxuICB9KS50aGVuKCByZXNwb25zZSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgT2JqZWN0LmVudHJpZXMoZGF0YSkuZm9yRWFjaCgoW2ZpZWxkTmFtZSwgdmFsdWVzXSkgPT4ge1xuICAgICAgcmVzZXQgJiYgdGhpcy51bmlxdWVGaWVsZHNbZmllbGROYW1lXS5pbnB1dC5vcHRpb25zLnZhbHVlcy5zcGxpY2UoMCk7XG4gICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB0aGlzLnVuaXF1ZUZpZWxkc1tmaWVsZE5hbWVdLmlucHV0Lm9wdGlvbnMudmFsdWVzLnB1c2godmFsdWUpKTtcbiAgICB9KVxuICB9KS5mYWlsKGNvbnNvbGUubG9nKVxufTtcblxucHJvdG8uZ2V0VW5pcXVlRmllbGRzVHlwZSA9IGZ1bmN0aW9uKGZpZWxkcykge1xuICBjb25zdCB1bmlxdWVGaWVsZHMgPSB7fTtcbiAgbGV0IGZpbmQgPSBmYWxzZTtcbiAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgIGlmIChmaWVsZC5pbnB1dCAmJiBmaWVsZC5pbnB1dC50eXBlID09PSAndW5pcXVlJykge1xuICAgICAgdW5pcXVlRmllbGRzW2ZpZWxkLm5hbWVdID0gZmllbGQ7XG4gICAgICBmaW5kID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZmluZCAmJiB1bmlxdWVGaWVsZHMgfHwgbnVsbDtcbn07XG5cbnByb3RvLl9yZXNldFVuaXF1ZVZhbHVlcyA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuZ2V0RmllbGRVbmlxdWVWYWx1ZXNGcm9tU2VydmVyKHtcbiAgICByZXNldDogdHJ1ZVxuICB9KVxufTtcblxuLypcbmNoZWNrIGlmIHZlY3RvckxheWVyXG4gKi9cbnByb3RvLmlzVmVjdG9yTGF5ZXIgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5fbGF5ZXJUeXBlID09PSAgTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1I7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB0byBjcmVhdGUgZ2V0RmVhdHVyZXMgb3B0aW9uc1xuICogQHBhcmFtIGZpbHRlclxuICovXG5wcm90by5zZXRGZWF0dXJlc09wdGlvbnMgPSBmdW5jdGlvbih7ZmlsdGVyfT17fSl7XG4gIGlmIChmaWx0ZXIpIHtcbiAgICAvLyBpbiBjYXNlIG9mIG5vIGZlYXR1cmVzIGZpbHRlciByZXF1ZXN0IGNoZWNrIGlmIG5vIGZlYXR1cmVzX2ZpbGVkIGlzIHByZXNlbnQgb3RoZXJ3aXNlIGkgZ2V0IGZpcnN0IGZpZWxkXG4gICAgaWYgKGZpbHRlci5ub2ZlYXR1cmVzKSBmaWx0ZXIubm9mZWF0dXJlc19maWVsZCA9IGZpbHRlci5ub2ZlYXR1cmVzX2ZpZWxkIHx8IHRoaXMuX2xheWVyLmdldEVkaXRpbmdGaWVsZHMoKVswXS5uYW1lO1xuICAgIHRoaXMuX2dldEZlYXR1cmVzT3B0aW9uID0ge1xuICAgICAgZmlsdGVyLFxuICAgICAgZWRpdGluZzogdHJ1ZSxcbiAgICAgIHJlZ2lzdGVyRXZlbnRzOiBmYWxzZVxuICAgIH07XG4gICAgLy8gaW4gY2FzZSBvZiBjb25zdGFyaW50IGF0dHJpYnV0ZSBzZXQgdGhlIGZpbHRlciBhcyBjb25zdHJhaW50XG4gICAgZmlsdGVyLmNvbnN0cmFpbnQgJiYgdGhpcy5zZXRDb25zdHJhaW50RmVhdHVyZXNGaWx0ZXIoZmlsdGVyKTtcbiAgfVxuICBlbHNlIHtcbiAgICBjb25zdCBmaWx0ZXJUeXBlID0gdGhpcy5fbGF5ZXJUeXBlID09PSBMYXllci5MYXllclR5cGVzLlRBQkxFID8gJ2FsbCc6ICdiYm94JztcbiAgICB0aGlzLl9nZXRGZWF0dXJlc09wdGlvbiA9IHRoaXMuZWRpdGluZ1NlcnZpY2UuY3JlYXRlRWRpdGluZ0RhdGFPcHRpb25zKGZpbHRlclR5cGUsIHtcbiAgICAgIGxheWVySWQ6IHRoaXMuZ2V0SWQoKVxuICAgIH0pO1xuICB9XG59O1xuXG5wcm90by5zZXRFZGl0aW5nQ29uc3RyYWludHMgPSBmdW5jdGlvbihjb25zdHJhaW50cz17fSl7XG4gIE9iamVjdC5rZXlzKGNvbnN0cmFpbnRzKS5mb3JFYWNoKGNvbnN0cmFpbnQgPT4gdGhpcy5jb25zdHJhaW50c1tjb25zdHJhaW50XSA9IGNvbnN0cmFpbnRzW2NvbnN0cmFpbnRdKTtcbn07XG5cblxucHJvdG8uc2V0TGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBhd2FpdCB0aGlzLmVkaXRpbmdTZXJ2aWNlLnNldExheWVyVW5pcXVlRmllbGRWYWx1ZXModGhpcy5nZXRJZCgpKTtcbn07XG5cbnByb3RvLmNsZWFyTGF5ZXJVbmlxdWVGaWVsZHNWYWx1ZXMgPSBmdW5jdGlvbigpe1xuICB0aGlzLmVkaXRpbmdTZXJ2aWNlLmNsZWFyTGF5ZXJVbmlxdWVGaWVsZHNWYWx1ZXModGhpcy5nZXRJZCgpKVxufTtcblxuLy9hZGRlZCBvcHRpb24gb2JqZWN0IHRvIHN0YXJ0IG1ldGhvZCB0byBoYXZlIGEgY29udHJvbCBieSBvdGhlciBwbHVnaW4gaG93XG5wcm90by5zdGFydCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgbGV0IHtmaWx0ZXIsIHRvb2xib3hoZWFkZXI9dHJ1ZSwgc3RhcnRzdG9wZWRpdGluZz10cnVlLCBzaG93dG9vbHM9dHJ1ZSwgdG9vbHMsIGNoYW5naW5ndG9vbHM9ZmFsc2V9ID0gb3B0aW9ucztcbiAgdGhpcy5zdGF0ZS5jaGFuZ2luZ3Rvb2xzID0gY2hhbmdpbmd0b29scztcbiAgdG9vbHMgJiYgdGhpcy5zZXRFbmFibGVzRGlzYWJsZXNUb29scyh0b29scyk7XG4gIHRoaXMuc3RhdGUudG9vbGJveGhlYWRlciA9IHRvb2xib3hoZWFkZXI7XG4gIHRoaXMuc3RhdGUuc3RhcnRzdG9wZWRpdGluZyA9IHN0YXJ0c3RvcGVkaXRpbmc7XG4gIGNvbnN0IEV2ZW50TmFtZSA9ICdzdGFydC1lZGl0aW5nJztcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3QgaWQgPSB0aGlzLmdldElkKCk7XG4gIGNvbnN0IGFwcGxpY2F0aW9uQ29uc3RyYWludCA9IHRoaXMuZWRpdGluZ1NlcnZpY2UuZ2V0QXBwbGljYXRpb25FZGl0aW5nQ29uc3RyYWludEJ5SWQodGhpcy5nZXRJZCgpKTtcbiAgZmlsdGVyID0gYXBwbGljYXRpb25Db25zdHJhaW50ICYmIGFwcGxpY2F0aW9uQ29uc3RyYWludC5maWx0ZXIgfHwgdGhpcy5jb25zdHJhaW50cy5maWx0ZXIgfHwgZmlsdGVyO1xuICAvLyBzZXQgZmlsdGVyT3B0aW9uc1xuICB0aGlzLnNldEZlYXR1cmVzT3B0aW9ucyh7XG4gICAgZmlsdGVyXG4gIH0pO1xuICBcbiAgY29uc3QgaGFuZGxlckFmdGVyU2Vzc2lvbkdldEZlYXR1cmVzID0gcHJvbWlzZSA9PiB7XG4gICAgdGhpcy5lbWl0KEV2ZW50TmFtZSk7XG4gICAgdGhpcy5zZXRMYXllclVuaXF1ZUZpZWxkVmFsdWVzKCkudGhlbigoKT0+e1xuICAgICAgdGhpcy5lZGl0aW5nU2VydmljZS5ydW5FdmVudEhhbmRsZXIoe1xuICAgICAgICB0eXBlOiBFdmVudE5hbWUsXG4gICAgICAgIGlkXG4gICAgICB9KTtcbiAgICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oZmVhdHVyZXMgPT4ge1xuICAgICAgICAgIHRoaXMuc3RvcExvYWRpbmcoKTtcbiAgICAgICAgICB0aGlzLnNldEVkaXRpbmcodHJ1ZSk7XG4gICAgICAgICAgdGhpcy5lZGl0aW5nU2VydmljZS5ydW5FdmVudEhhbmRsZXIoe1xuICAgICAgICAgICAgdHlwZTogJ2dldC1mZWF0dXJlcy1lZGl0aW5nJyxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICBmZWF0dXJlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZC5yZXNvbHZlKHtcbiAgICAgICAgICAgIGZlYXR1cmVzXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZXJyb3IgPT4ge1xuICAgICAgICAgIEdVSS5ub3RpZnkuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgdGhpcy5lZGl0aW5nU2VydmljZS5ydW5FdmVudEhhbmRsZXIoe1xuICAgICAgICAgICAgdHlwZTogJ2Vycm9yLWVkaXRpbmcnLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgIHRoaXMuc3RvcExvYWRpbmcoKTtcbiAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgfSk7XG5cbiAgfTtcbiAgaWYgKHRoaXMuX3Nlc3Npb24pIHtcbiAgICBpZiAoIXRoaXMuX3Nlc3Npb24uaXNTdGFydGVkKCkpIHtcbiAgICAgIC8vYWRkZWQgY2FzZSBvZiBtb2JpbGVcbiAgICAgIGlmIChBcHBsaWNhdGlvblN0YXRlLmlzbW9iaWxlICYmIHRoaXMuX21hcFNlcnZpY2UuaXNNYXBIaWRkZW4oKSAmJiB0aGlzLl9sYXllclR5cGUgPT09IExheWVyLkxheWVyVHlwZXMuVkVDVE9SKSB7XG4gICAgICAgIHRoaXMuc2V0RWRpdGluZyh0cnVlKTtcbiAgICAgICAgR1VJLmdldFNlcnZpY2UoJ21hcCcpLm9uY2VhZnRlcignc2V0SGlkZGVuJywgKCkgPT57XG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGFydExvYWRpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0RmVhdHVyZXNPcHRpb25zKHtcbiAgICAgICAgICAgICAgZmlsdGVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb24uc3RhcnQodGhpcy5fZ2V0RmVhdHVyZXNPcHRpb24pXG4gICAgICAgICAgICAgIC50aGVuKGhhbmRsZXJBZnRlclNlc3Npb25HZXRGZWF0dXJlcykuZmFpbCgoKT0+dGhpcy5zZXRFZGl0aW5nKGZhbHNlKSk7XG4gICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydExvYWRpbmcoKTtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbi5zdGFydCh0aGlzLl9nZXRGZWF0dXJlc09wdGlvbikudGhlbihoYW5kbGVyQWZ0ZXJTZXNzaW9uR2V0RmVhdHVyZXMpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5fc3RhcnQpIHtcbiAgICAgICAgdGhpcy5zdGFydExvYWRpbmcoKTtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbi5nZXRGZWF0dXJlcyh0aGlzLl9nZXRGZWF0dXJlc09wdGlvbikudGhlbihoYW5kbGVyQWZ0ZXJTZXNzaW9uR2V0RmVhdHVyZXMpO1xuICAgICAgICB0aGlzLl9zdGFydCA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnNldEVkaXRpbmcodHJ1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLnN0YXJ0TG9hZGluZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN0YXRlLmxvYWRpbmcgPSB0cnVlO1xufTtcblxucHJvdG8uc3RvcExvYWRpbmcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG59O1xuXG5wcm90by5nZXRGZWF0dXJlc09wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZ2V0RmVhdHVyZXNPcHRpb247XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IEV2ZW50TmFtZSAgPSAnc3RvcC1lZGl0aW5nJztcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgdGhpcy5kaXNhYmxlQ2FuRWRpdEV2ZW50ICYmIHRoaXMuZGlzYWJsZUNhbkVkaXRFdmVudCgpO1xuICBpZiAodGhpcy5fc2Vzc2lvbiAmJiB0aGlzLl9zZXNzaW9uLmlzU3RhcnRlZCgpKSB7XG4gICAgY29uc3QgaXNfdGhlcmVfYV9mYXRoZXJfaW5fZWRpdGluZyA9IHRoaXMuZWRpdGluZ1NlcnZpY2UuZmF0aGVySW5FZGl0aW5nKHRoaXMuc3RhdGUuaWQpO1xuICAgIGlmIChBcHBsaWNhdGlvblN0YXRlLm9ubGluZSAmJiAhaXNfdGhlcmVfYV9mYXRoZXJfaW5fZWRpdGluZykge1xuICAgICAgdGhpcy5fc2Vzc2lvbi5zdG9wKClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5lZGl0aW5nLm9uID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdG9wTG9hZGluZygpO1xuICAgICAgICAgIHRoaXMuX2dldEZlYXR1cmVzT3B0aW9uID0ge307XG4gICAgICAgICAgdGhpcy5zdG9wQWN0aXZlVG9vbCgpO1xuICAgICAgICAgIHRoaXMuZW5hYmxlVG9vbHMoZmFsc2UpO1xuICAgICAgICAgIHRoaXMuY2xlYXJUb29sYm94TWVzc2FnZXMoKTtcbiAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgICB0aGlzLmVtaXQoRXZlbnROYW1lKTtcbiAgICAgICAgICB0aGlzLmNsZWFyTGF5ZXJVbmlxdWVGaWVsZHNWYWx1ZXMoKTtcbiAgICAgICAgICBkLnJlc29sdmUodHJ1ZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZXJyID0+IGQucmVqZWN0KGVycikpXG4gICAgICAgIC5hbHdheXMoKCk9PiB0aGlzLnNldFNlbGVjdGVkKGZhbHNlKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdG9wQWN0aXZlVG9vbCgpO1xuICAgICAgLy8gbmVlZCB0byBiZSBzdXJlIHRvIGNsZWFyXG4gICAgICB0aGlzLl9sYXllci5nZXRFZGl0aW5nTGF5ZXIoKS5nZXRTb3VyY2UoKS5jbGVhcigpO1xuICAgICAgdGhpcy5zdGF0ZS5lZGl0aW5nLm9uID0gZmFsc2U7XG4gICAgICB0aGlzLmVuYWJsZVRvb2xzKGZhbHNlKTtcbiAgICAgIHRoaXMuY2xlYXJUb29sYm94TWVzc2FnZXMoKTtcbiAgICAgIHRoaXMuX3VucmVnaXN0ZXJHZXRGZWF0dXJlc0V2ZW50KCk7XG4gICAgICB0aGlzLmVkaXRpbmdTZXJ2aWNlLnN0b3BTZXNzaW9uQ2hpbGRyZW4odGhpcy5zdGF0ZS5pZCk7XG4gICAgICB0aGlzLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgIHRoaXMuY2xlYXJMYXllclVuaXF1ZUZpZWxkc1ZhbHVlcygpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICBkLnJlc29sdmUodHJ1ZSlcbiAgfVxuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG5wcm90by5zYXZlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9zZXNzaW9uLmNvbW1pdCgpO1xufTtcblxucHJvdG8uX3VucmVnaXN0ZXJHZXRGZWF0dXJlc0V2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIHN3aXRjaCh0aGlzLl9sYXllclR5cGUpIHtcbiAgICBjYXNlIExheWVyLkxheWVyVHlwZXMuVkVDVE9SOlxuICAgICAgdGhpcy5fbWFwU2VydmljZS5nZXRNYXAoKS51bih0aGlzLl9nZXRGZWF0dXJlc0V2ZW50LmV2ZW50LCB0aGlzLl9nZXRGZWF0dXJlc0V2ZW50LmZuYyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuO1xuICB9XG59O1xuXG5wcm90by5fcmVnaXN0ZXJHZXRGZWF0dXJlc0V2ZW50ID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBzd2l0Y2godGhpcy5fbGF5ZXJUeXBlKSB7XG4gICAgY2FzZSBMYXllci5MYXllclR5cGVzLlZFQ1RPUjpcbiAgICAgIC8vIG9ubHkgaW4gY2FzZSBmaWx0ZXIgYmJveFxuICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyLmJib3gpIHtcbiAgICAgICAgY29uc3QgZm5jID0gKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNhbkVkaXQgPSB0aGlzLnN0YXRlLmVkaXRpbmcuY2FuRWRpdDtcbiAgICAgICAgICB0aGlzLl9sYXllci5nZXRFZGl0aW5nTGF5ZXIoKS5zZXRWaXNpYmxlKGNhbkVkaXQpO1xuICAgICAgICAgIC8vYWRkZWQgQXBwbGljYXRpb25TdGF0ZS5vbmxpbmVcbiAgICAgICAgICBpZiAoQXBwbGljYXRpb25TdGF0ZS5vbmxpbmUgJiYgY2FuRWRpdCAmJiBHVUkuZ2V0Q29udGVudExlbmd0aCgpID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5fbWFwU2VydmljZS5nZXRNYXBCQk9YKCk7XG4gICAgICAgICAgICBvcHRpb25zLmZpbHRlci5iYm94ID0gYmJveDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uLmdldEZlYXR1cmVzKG9wdGlvbnMpLnRoZW4ocHJvbWlzZT0+IHtcbiAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZ2V0RmVhdHVyZXNFdmVudC5ldmVudCA9ICdtb3ZlZW5kJztcbiAgICAgICAgdGhpcy5fZ2V0RmVhdHVyZXNFdmVudC5mbmMgPSBkZWJvdW5jZShmbmMsIDMwMCk7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwKCk7XG4gICAgICAgIG1hcC5vbignbW92ZWVuZCcsIHRoaXMuX2dldEZlYXR1cmVzRXZlbnQuZm5jKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm47XG4gIH1cbn07XG5cbnByb3RvLnNldENvbnN0cmFpbnRGZWF0dXJlc0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcil7XG4gIHRoaXMuY29uc3RyYWludEZlYXR1cmVGaWx0ZXIgPSBmaWx0ZXI7XG59O1xuXG5wcm90by5nZXRFZGl0aW5nQ29uc3RyYWludHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2NvbnN0cmFpbnRzO1xufTtcblxucHJvdG8uZ2V0RWRpdGluZ0NvbnN0cmFpbnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHJldHVybiB0aGlzLmdldEVkaXRpbmdDb25zdHJhaW50cygpW3R5cGVdO1xufTtcblxucHJvdG8uY2FuRWRpdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5lZGl0aW5nLmNhbkVkaXQ7XG59O1xuXG5wcm90by5fY2FuRWRpdCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fY29uc3RyYWludHMuc2NhbGUpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NvbnN0cmFpbnRzLnNjYWxlO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0KCdlZGl0aW5nLm1lc3NhZ2VzLmNvbnN0cmFpbnRzLmVuYWJsZV9lZGl0aW5nJyl9JHtzY2FsZX1gLnRvVXBwZXJDYXNlKCk7XG4gICAgdGhpcy5zdGF0ZS5lZGl0aW5nLmNhbkVkaXQgPSBnZXRTY2FsZUZyb21SZXNvbHV0aW9uKHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwKCkuZ2V0VmlldygpLmdldFJlc29sdXRpb24oKSkgPD0gc2NhbGU7XG4gICAgR1VJLnNldE1vZGFsKCF0aGlzLnN0YXRlLmVkaXRpbmcuY2FuRWRpdCwgbWVzc2FnZSk7XG4gICAgY29uc3QgZm5jID0gKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLnN0YXRlLmVkaXRpbmcuY2FuRWRpdCA9IGdldFNjYWxlRnJvbVJlc29sdXRpb24oZXZlbnQudGFyZ2V0LmdldFJlc29sdXRpb24oKSkgPD0gc2NhbGU7XG4gICAgICBHVUkuc2V0TW9kYWwoIXRoaXMuc3RhdGUuZWRpdGluZy5jYW5FZGl0LCBtZXNzYWdlKTtcbiAgICB9O1xuICAgIHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwKCkuZ2V0VmlldygpLm9uKCdjaGFuZ2U6cmVzb2x1dGlvbicsIGZuYyk7XG4gICAgdGhpcy5kaXNhYmxlQ2FuRWRpdEV2ZW50ID0gKCkgPT4ge1xuICAgICAgR1VJLnNldE1vZGFsKGZhbHNlKTtcbiAgICAgIHRoaXMuX21hcFNlcnZpY2UuZ2V0TWFwKCkuZ2V0VmlldygpLnVuKCdjaGFuZ2U6cmVzb2x1dGlvbicsIGZuYyk7XG4gICAgfVxuICB9XG59O1xuXG5wcm90by5fZGlzYWJsZUNhbkVkaXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZS5lZGl0aW5nLmNhbkVkaXQgPSB0cnVlO1xuICB0aGlzLmRpc2FibGVDYW5FZGl0RXZlbnQgJiYgdGhpcy5kaXNhYmxlQ2FuRWRpdEV2ZW50KClcbn07XG5cbnByb3RvLnNldE1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gIHRoaXMuc3RhdGUubWVzc2FnZSA9IG1lc3NhZ2U7XG59O1xuXG5wcm90by5nZXRNZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLm1lc3NhZ2U7XG59O1xuXG5wcm90by5jbGVhck1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXRNZXNzYWdlKG51bGwpO1xufTtcblxucHJvdG8uY2xlYXJUb29sYm94TWVzc2FnZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jbGVhclRvb2xNZXNzYWdlKCk7XG4gIHRoaXMuY2xlYXJNZXNzYWdlKCk7XG59O1xuXG5wcm90by5nZXRJZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5pZDtcbn07XG5cbnByb3RvLnNldElkID0gZnVuY3Rpb24oaWQpIHtcbiAgdGhpcy5zdGF0ZS5pZCA9IGlkO1xufTtcblxucHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUudGl0bGU7XG59O1xuXG5wcm90by5zZXRUaXRsZSA9IGZ1bmN0aW9uKHRpdGxlKXtcbiAgdGhpcy5zdGF0ZS5jdXN0b21UaXRsZSA9IHRydWU7XG4gIHRoaXMuc3RhdGUudGl0bGUgPSB0aXRsZTtcbn07XG5cbnByb3RvLmdldENvbG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmNvbG9yO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGVuYWJsZSB0b29sYm94XG4gKiBAcGFyYW0gYm9vbFxuICovXG5wcm90by5zZXRFZGl0aW5nID0gZnVuY3Rpb24oYm9vbD10cnVlKSB7XG4gIHRoaXMuc2V0RW5hYmxlKGJvb2wpO1xuICB0aGlzLnN0YXRlLmVkaXRpbmcub24gPSBib29sO1xuICB0aGlzLmVuYWJsZVRvb2xzKGJvb2wpO1xufTtcblxucHJvdG8uaW5FZGl0aW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmVkaXRpbmcub247XG59O1xuXG5wcm90by5pc0VuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuZW5hYmxlZDtcbn07XG5cbnByb3RvLnNldEVuYWJsZSA9IGZ1bmN0aW9uKGJvb2w9ZmFsc2UpIHtcbiAgdGhpcy5zdGF0ZS5lbmFibGVkID0gYm9vbDtcbiAgcmV0dXJuIHRoaXMuc3RhdGUuZW5hYmxlZDtcbn07XG5cbnByb3RvLmlzTG9hZGluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5sb2FkaW5nO1xufTtcblxucHJvdG8uaXNEaXJ0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5lZGl0aW5nLmhpc3RvcnkuY29tbWl0O1xufTtcblxucHJvdG8uaXNTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZDtcbn07XG5cbnByb3RvLnNldFNlbGVjdGVkID0gZnVuY3Rpb24oYm9vbD1mYWxzZSkge1xuICB0aGlzLnN0YXRlLnNlbGVjdGVkID0gYm9vbDtcbiAgdGhpcy5zdGF0ZS5zZWxlY3RlZCA/IHRoaXMuX2NhbkVkaXQoKSA6IHRoaXMuX2Rpc2FibGVDYW5FZGl0KCk7XG59O1xuXG5wcm90by5nZXRUb29scyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fdG9vbHM7XG59O1xuXG4vKipcbiAqXG4gKiBSZXR1cm4gdG9vbCBieSBpZFxuICogQHBhcmFtIHRvb2xJZFxuICogQHJldHVybnMgeyp8bnVtYmVyfGJpZ2ludHxUfFR9XG4gKi9cbnByb3RvLmdldFRvb2xCeUlkID0gZnVuY3Rpb24odG9vbElkKSB7XG4gIHJldHVybiB0aGlzLl90b29scy5maW5kKHRvb2wgPT4gdG9vbElkID09PSB0b29sLmdldElkKCkpO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHRvb2xcbiAqL1xucHJvdG8uc2V0RW5hYmxlVG9vbCA9IGZ1bmN0aW9uKHRvb2xJZCl7XG4gIGNvbnN0IHRvb2wgPSB0aGlzLl90b29scy5maW5kKHRvb2wgPT4gdG9vbC5nZXRJZCgpID09PSB0b29sSWQpO1xuICB0b29sLnNldEVuYWJsZWQodHJ1ZSlcbn07XG5cbi8qKlxuICogbWV0aG9kIHRvIHNldCB0b29scyBiYXNlcyBvbiBhZGRcbiAqIGVkaXRpbmdfY29uc3RyYWludHMgOiB0cnVlIC8vIGZvbGxvdyB0aGUgdG9vbHMgcmVsYXRlZCB0b2kgZWRpdGluZyBjb250dHJhaW50cyBjb25maWd1cmF0aW9uXG4gKi9cblxucHJvdG8uc2V0QWRkRW5hYmxlVG9vbHMgPSBmdW5jdGlvbih7dG9vbHM9e30sIG9wdGlvbnM9e2VkaXRpbmdfY29uc3RyYWludHM6IHRydWV9fT17fSl7XG4gIGNvbnN0IHtlZGl0aW5nX2NvbnN0cmFpbnRzPWZhbHNlfSA9IG9wdGlvbnM7XG4gIGNvbnN0IEFERE9ORUZFQVRVUkVPTkxZVE9PTFNJRCA9IFsnYWRkZmVhdHVyZScsICdlZGl0YXR0cmlidXRlcycsICdtb3ZlZmVhdHVyZScsICdtb3ZldmVydGV4J107XG4gIGNvbnN0IGFkZF90b29scyA9IHRoaXMuX3Rvb2xzLmZpbHRlcih0b29sID0+IHtcbiAgICByZXR1cm4gZWRpdGluZ19jb25zdHJhaW50cyA/XG4gICAgICB0b29sLmdldFR5cGUoKS5maW5kKHR5cGUgPT4gdHlwZSA9PT0nYWRkX2ZlYXR1cmUnKSA6XG4gICAgICBBRERPTkVGRUFUVVJFT05MWVRPT0xTSUQuaW5kZXhPZih0b29sLmdldElkKCkpICE9PSAtMTtcbiAgfSkubWFwKHRvb2wgPT4ge1xuICAgICAgY29uc3QgaWQgPSB0b29sLmdldElkKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAgb3B0aW9uczogdG9vbHNbaWRdXG4gICAgICB9XG4gIH0pO1xuXG4gIHRoaXMuc2V0RW5hYmxlc0Rpc2FibGVzVG9vbHMoe1xuICAgIGVuYWJsZWQ6IGFkZF90b29sc1xuICB9KTtcblxuICB0aGlzLmVuYWJsZVRvb2xzKHRydWUpO1xufTtcblxuLyoqXG4gKiBtZXRob2QgdG8gc2V0IHRvb2xzIGJhc2VzIG9uIHVwZGF0ZVxuICovXG5wcm90by5zZXRVcGRhdGVFbmFibGVUb29scyA9IGZ1bmN0aW9uKHt0b29scz17fSwgZXhjbHVkZXRvb2xzPVtdLCBvcHRpb25zPXtlZGl0aW5nX2NvbnN0cmFpbnRzOiB0cnVlfX0pe1xuICBjb25zdCB7ZWRpdGluZ19jb25zdHJhaW50cz1mYWxzZX0gPSBvcHRpb25zO1xuICBjb25zdCBVUERBVEVPTkVGRUFUVVJFT05MWVRPT0xTSUQgPSBbJ2VkaXRhdHRyaWJ1dGVzJywgJ21vdmVmZWF0dXJlJywgJ21vdmV2ZXJ0ZXgnXTtcbiAgY29uc3QgdXBkYXRlX3Rvb2xzID0gdGhpcy5fdG9vbHMuZmlsdGVyKHRvb2wgPT4ge1xuICAgIC8vIGV4Y2x1ZGVcbiAgICBpZiAoZXhjbHVkZXRvb2xzLmluZGV4T2YodG9vbC5nZXRJZCgpKSAhPT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZWRpdGluZ19jb25zdHJhaW50cyA/XG4gICAgICB0b29sLmdldFR5cGUoKS5maW5kKHR5cGUgPT4gdHlwZSA9PT0nY2hhbmdlX2ZlYXR1cmUnIHx8IHR5cGUgPT09J2NoYW5nZV9hdHRyX2ZlYXR1cmUnKSA6XG4gICAgICBVUERBVEVPTkVGRUFUVVJFT05MWVRPT0xTSUQuaW5kZXhPZih0b29sLmdldElkKCkpICE9PSAtMTtcbiAgfSkubWFwKHRvb2wgPT4ge1xuICAgIGNvbnN0IGlkID0gdG9vbC5nZXRJZCgpO1xuICAgIHJldHVybiB7XG4gICAgICBpZCxcbiAgICAgIG9wdGlvbnM6IHRvb2xzW2lkXVxuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5zZXRFbmFibGVzRGlzYWJsZXNUb29scyh7XG4gICAgZW5hYmxlZDogdXBkYXRlX3Rvb2xzXG4gIH0pO1xuICB0aGlzLmVuYWJsZVRvb2xzKHRydWUpO1xufTtcblxuLyoqXG4gKiBtZXRob2QgdG8gc2V0IHRvb2xzIGJhc2VzIG9uIGRlbGV0ZVxuICovXG5cbnByb3RvLnNldERlbGV0ZUVuYWJsZVRvb2xzID0gZnVuY3Rpb24ob3B0aW9ucz17fSl7XG4gIC8vVE9ET1xufTtcblxuLyoqXG4gKiBNZXRob2QgdG8gc2V0IGVuYWJsZSB0b29sc1xuICpcbiAqIEBwYXJhbSB0b29sc1xuICovXG5wcm90by5zZXRFbmFibGVzRGlzYWJsZXNUb29scyA9IGZ1bmN0aW9uKHRvb2xzKXtcbiAgaWYgKHRvb2xzKXtcbiAgICB0aGlzLnN0YXRlLmNoYW5naW5ndG9vbHMgPSB0cnVlO1xuICAgIC8vIENoZWNrIGlmIHRvb2xzIGlzIGFuIGFycmF5XG4gICAgY29uc3Qge2VuYWJsZWQ6ZW5hYmxlVG9vbHM9W10sIGRpc2FibGVkOmRpc2FibGVUb29scz1bXX0gPSB0b29scztcbiAgICBjb25zdCB0b29sc0lkID0gZW5hYmxlVG9vbHMubGVuZ3RoID8gW10gOiB0aGlzLl90b29scy5tYXAodG9vbCA9PiB0b29sLmdldElkKCkpO1xuICAgIGVuYWJsZVRvb2xzLmZvckVhY2goKHtpZCwgb3B0aW9ucz17fX0pID0+IHtcbiAgICAgIC8vY2hlY2sgaWYgaWQgb2YgdG9vbCBwYXNzZWQgYXMgYXJndW1lbnQgaXMgcmlnaHRcbiAgICAgIGNvbnN0IHRvb2wgPXRoaXMuZ2V0VG9vbEJ5SWQoaWQpO1xuICAgICAgaWYgKHRvb2wpIHtcbiAgICAgICAgY29uc3Qge2FjdGl2ZT1mYWxzZX0gPSBvcHRpb25zO1xuICAgICAgICB0b29sLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRvb2wuaXNWaXNpYmxlKCkgJiYgdG9vbHNJZC5wdXNoKGlkKTtcbiAgICAgICAgYWN0aXZlICYmIHRoaXMuc2V0QWN0aXZlVG9vbCh0b29sKTtcbiAgICAgICAgaWYgKHRoaXMuX2VuYWJsZWR0b29scyA9PT0gdW5kZWZpbmVkKSB0aGlzLl9lbmFibGVkdG9vbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fZW5hYmxlZHRvb2xzLnB1c2godG9vbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy9kaXNhYmxlZCBhbmQgdmlzaWJsZVxuICAgIGRpc2FibGVUb29scy5mb3JFYWNoKCh7aWQsIG9wdGlvbnN9KSA9PntcbiAgICAgIGNvbnN0IHRvb2wgPSB0aGlzLmdldFRvb2xCeUlkKGlkKTtcbiAgICAgIGlmICh0b29sKXtcbiAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkdG9vbHMgPT09IHVuZGVmaW5lZCkgdGhpcy5fZGlzYWJsZWR0b29scyA9IFtdO1xuICAgICAgICB0aGlzLl9kaXNhYmxlZHRvb2xzLnB1c2goaWQpO1xuICAgICAgICAvL2FkZCBpdCB0b2kgdmlzaWJsZSB0b29sc1xuICAgICAgICB0b29sc0lkLnB1c2goaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vc2V0IG5vdCB2aXNpYmxlIGFsbCByZW1haW5cbiAgICB0aGlzLl90b29scy5mb3JFYWNoKHRvb2wgPT4gIXRvb2xzSWQuaW5jbHVkZXModG9vbC5nZXRJZCgpKSAmJiB0b29sLnNldFZpc2libGUoZmFsc2UpKTtcbiAgICB0aGlzLnN0YXRlLmNoYW5naW5ndG9vbHMgPSBmYWxzZTtcbiAgfVxufTtcblxuLy8gZW5hYmxlIGFsbCB0b29sc1xucHJvdG8uZW5hYmxlVG9vbHMgPSBmdW5jdGlvbihib29sPWZhbHNlKSB7XG4gIGNvbnN0IHRvb2xzID0gdGhpcy5fZW5hYmxlZHRvb2xzIHx8IHRoaXMuX3Rvb2xzO1xuICBjb25zdCBkaXNhYmxlZHRvb2xzID0gdGhpcy5fZGlzYWJsZWR0b29scyB8fCBbXTtcbiAgdG9vbHMuZm9yRWFjaCh0b29sID0+IHtcbiAgICBjb25zdCB7IGNvbmRpdGlvbnM6e2VuYWJsZWQ9Ym9vbH0gfSA9IHRvb2w7XG4gICAgY29uc3QgZW5hYmxlVG9vbCA9IGJvb2wgJiYgZGlzYWJsZWR0b29scy5sZW5ndGggPyBkaXNhYmxlZHRvb2xzLmluZGV4T2YodG9vbC5nZXRJZCgpKSA9PT0gLTEgOiB0b1Jhd1R5cGUoZW5hYmxlZCkgPT09ICdCb29sZWFuJyA/IGVuYWJsZWQgOiBlbmFibGVkKHtcbiAgICAgIGJvb2wsXG4gICAgICB0b29sXG4gICAgfSk7XG4gICAgdG9vbC5zZXRFbmFibGVkKGVuYWJsZVRvb2wpO1xuICAgICFib29sICYmIHRvb2wuc2V0QWN0aXZlKGJvb2wpO1xuICB9KVxufTtcblxucHJvdG8uc2V0QWN0aXZlVG9vbCA9IGZ1bmN0aW9uKHRvb2wpIHtcbiAgdGhpcy5zdG9wQWN0aXZlVG9vbCh0b29sKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuY2xlYXJUb29sc09mVG9vbCgpO1xuICAgICAgdGhpcy5zdGF0ZS5hY3RpdmV0b29sID0gdG9vbDtcbiAgICAgIHRvb2wub25jZSgnc2V0dG9vbHNvZnRvb2wnLCB0b29scyA9PiB0b29scy5mb3JFYWNoKHRvb2wgPT4gdGhpcy5zdGF0ZS50b29sc29mdG9vbC5wdXNoKHRvb2wpKSk7XG4gICAgICBjb25zdCBfYWN0aXZlZGVhY3RpdmV0b29sb2Z0b29scyA9IChhY3RpdmV0b29scywgYWN0aXZlKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUudG9vbHNvZnRvb2wuZm9yRWFjaCh0b29sb2Z0b29sID0+IHtcbiAgICAgICAgICBpZiAoYWN0aXZldG9vbHMuaW5kZXhPZih0b29sb2Z0b29sLnR5cGUpICE9PSAtMSkgdG9vbG9mdG9vbC5vcHRpb25zLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB0b29sLm9uKCdhY3RpdmUnLCAoYWN0aXZldG9vbHM9W10pID0+IF9hY3RpdmVkZWFjdGl2ZXRvb2xvZnRvb2xzKGFjdGl2ZXRvb2xzLCB0cnVlKSk7XG4gICAgICB0b29sLm9uKCdkZWFjdGl2ZScsIChhY3RpdmV0b29scz1bXSkgPT4gX2FjdGl2ZWRlYWN0aXZldG9vbG9mdG9vbHMoYWN0aXZldG9vbHMsIGZhbHNlKSk7XG5cbiAgICAgIGNvbnN0IGhpZGVTaWRlYmFyID0gdGhpcy5fbWFwU2VydmljZS5pc01hcEhpZGRlbigpO1xuICAgICAgdG9vbC5zdGFydChoaWRlU2lkZWJhcik7XG4gICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5nZXRUb29sTWVzc2FnZSgpO1xuICAgICAgdGhpcy5zZXRUb29sTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbn07XG5cbnByb3RvLmNsZWFyVG9vbHNPZlRvb2wgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZS50b29sc29mdG9vbC5zcGxpY2UoMCk7XG59O1xuXG5wcm90by5nZXRBY3RpdmVUb29sID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0YXRlLmFjdGl2ZXRvb2w7XG59O1xuXG5wcm90by5yZXN0YXJ0QWN0aXZlVG9vbCA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBhY3RpdmVUb29sID0gdGhpcy5nZXRBY3RpdmVUb29sKCk7XG4gIHRoaXMuc3RvcEFjdGl2ZVRvb2woKTtcbiAgdGhpcy5zZXRBY3RpdmVUb29sKGFjdGl2ZVRvb2wpO1xufTtcblxucHJvdG8uc3RvcEFjdGl2ZVRvb2wgPSBmdW5jdGlvbih0b29sKSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IGFjdGl2ZVRvb2wgPSB0aGlzLmdldEFjdGl2ZVRvb2woKTtcbiAgaWYgKGFjdGl2ZVRvb2wgJiYgYWN0aXZlVG9vbCAhPT0gdG9vbCkge1xuICAgIGFjdGl2ZVRvb2wucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgYWN0aXZlVG9vbC5zdG9wKHRydWUpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xlYXJUb29sc09mVG9vbCgpO1xuICAgICAgICB0aGlzLmNsZWFyVG9vbE1lc3NhZ2UoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmV0b29sID0gbnVsbDtcbiAgICAgICAgc2V0VGltZW91dChkLnJlc29sdmUpO1xuICAgICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0b29sID8gdG9vbC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTogbnVsbDtcbiAgICBkLnJlc29sdmUoKVxuICB9XG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLmNsZWFyVG9vbE1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZS50b29sbWVzc2FnZXMuaGVscCA9IG51bGw7XG59O1xuXG5wcm90by5nZXRUb29sTWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCB0b29sID0gdGhpcy5nZXRBY3RpdmVUb29sKCk7XG4gIHJldHVybiB0b29sLmdldE1lc3NhZ2UoKTtcbn07XG5cbnByb3RvLnNldFRvb2xNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZXM9e30pIHtcbiAgdGhpcy5zdGF0ZS50b29sbWVzc2FnZXMuaGVscCA9IG1lc3NhZ2VzICYmIG1lc3NhZ2VzLmhlbHAgfHwgbnVsbDtcbn07XG5cbnByb3RvLmdldFNlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Nlc3Npb247XG59O1xuXG5wcm90by5nZXRFZGl0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2VkaXRvcjtcbn07XG5cbnByb3RvLnNldEVkaXRvciA9IGZ1bmN0aW9uKGVkaXRvcikge1xuICB0aGlzLl9lZGl0b3IgPSBlZGl0b3I7XG59O1xuXG5wcm90by5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbGF5ZXIuaGFzQ2hpbGRyZW4oKTtcbn07XG5cbnByb3RvLmhhc0ZhdGhlcnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2xheWVyLmhhc0ZhdGhlcnMoKTtcbn07XG5cbnByb3RvLmhhc1JlbGF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbGF5ZXIuaGFzUmVsYXRpb25zKCk7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB0byByZXNldCBkZWZhdWx0IHZhbHVlc1xuICovXG5wcm90by5yZXNldERlZmF1bHQgPSBmdW5jdGlvbigpe1xuICB0aGlzLnN0YXRlLnRpdGxlID0gdGhpcy5vcmlnaW5hbFN0YXRlLnRpdGxlO1xuICB0aGlzLnN0YXRlLnRvb2xib3hoZWFkZXIgPSB0cnVlO1xuICB0aGlzLnN0YXRlLnN0YXJ0c3RvcGVkaXRpbmcgPSB0cnVlO1xuICB0aGlzLmNvbnN0cmFpbnRzID0ge1xuICAgIGZpbHRlcjogbnVsbCxcbiAgICBzaG93OiBudWxsLFxuICAgIHRvb2xzOiBbXVxuICB9O1xuXG4gIGlmICh0aGlzLl9lbmFibGVkdG9vbHMpe1xuICAgIHRoaXMuX2VuYWJsZWR0b29scyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuYWJsZVRvb2xzKCk7XG4gICAgdGhpcy5fdG9vbHMuZm9yRWFjaCh0b29sID0+IHRvb2wucmVzZXREZWZhdWx0KCkpO1xuICB9XG4gIHRoaXMuX2Rpc2FibGVkdG9vbHMgPSBudWxsO1xuICB0aGlzLnNldFNob3codHJ1ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2xCb3g7XG4iLCJjb25zdCB7IExheWVyIH0gPSBnM3dzZGsuY29yZS5sYXllcjtcbmNvbnN0IEVkaXRUb29sc0ZhY3RvcnkgPSByZXF1aXJlKCcuL3Rvb2xzZmFjdG9yeScpO1xuY29uc3QgVG9vbEJveCA9IHJlcXVpcmUoJy4vdG9vbGJveCcpO1xuXG5mdW5jdGlvbiBFZGl0b3JUb29sQm94ZXNGYWN0b3J5KCkge1xuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24obGF5ZXIsIG9wdGlvbnM9e30pIHtcbiAgICAvL2dldCBlZGl0aW5nIGNvbnRzcmFpbnRzXG4gICAgY29uc3QgY29uc3RyYWludHMgPSBsYXllci5nZXRFZGl0aW5nQ29uc3RyYWlucygpO1xuICAgIC8vIGdldCBlZGl0aW5nIGNhcGFiaWxpdGllcyAoY3JlYXRlLCB1cGRhdGVfYXR0cmlidXRlcywgdXBkYXRlX2dlb21ldHJ5LCBkZWxldGUpXG4gICAgY29uc3QgY2FwYWJpbGl0aWVzID0gbGF5ZXIuZ2V0RWRpdGluZ0NhcGFiaWxpdGllcygpO1xuICAgIGNvbnN0IHR5cGUgPSBsYXllci5nZXRUeXBlKCk7XG4gICAgY29uc3QgaWQgPSBsYXllci5nZXRJZCgpO1xuICAgIGNvbnN0IGNvbG9yID0gbGF5ZXIuZ2V0Q29sb3IoKTtcbiAgICBsZXQgdG9vbHMgPSBbXTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1I6XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5VHlwZSA9IGxheWVyLmdldEdlb21ldHJ5VHlwZSgpO1xuICAgICAgICB0b29scyA9IEVkaXRUb29sc0ZhY3RvcnkuYnVpbGQoe1xuICAgICAgICAgIGxheWVyLFxuICAgICAgICAgIGdlb21ldHJ5VHlwZTogZ2VvbWV0cnlUeXBlLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgY2FwYWJpbGl0aWVzXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTGF5ZXIuTGF5ZXJUeXBlcy5UQUJMRTpcbiAgICAgICAgdG9vbHMgPSBFZGl0VG9vbHNGYWN0b3J5LmJ1aWxkKHtcbiAgICAgICAgICBsYXllcixcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhcGFiaWxpdGllc1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUb29sQm94KHtcbiAgICAgIGlkLFxuICAgICAgY29sb3IsXG4gICAgICB0eXBlLFxuICAgICAgbGF5ZXIsXG4gICAgICB0b29scyxcbiAgICAgIGxuZ1RpdGxlOiAnZWRpdGluZy50b29sYm94LnRpdGxlJyxcbiAgICAgIHRpdGxlOiBgICR7bGF5ZXIuZ2V0TmFtZSgpfWAsXG4gICAgICBjb25zdHJhaW50c1xuICAgIH0pXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEVkaXRvclRvb2xCb3hlc0ZhY3Rvcnk7XG4iLCJjb25zdCB7IExheWVyIH0gPSBnM3dzZGsuY29yZS5sYXllcjtcbmNvbnN0IHsgR2VvbWV0cnkgfSA9IGczd3Nkay5jb3JlLmdlb21ldHJ5O1xuY29uc3QgeyBHVUkgfSA9IGczd3Nkay5ndWk7XG5jb25zdCB7XG4gIGlzU2FtZUJhc2VHZW9tZXRyeVR5cGUsXG59ID0gZzN3c2RrLmNvcmUuZ2VvdXRpbHM7XG5jb25zdCBUb29sID0gcmVxdWlyZSgnLi90b29sJyk7XG5jb25zdCBBZGRGZWF0dXJlV29ya2Zsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvYWRkZmVhdHVyZXdvcmtmbG93Jyk7XG5jb25zdCBNb2RpZnlHZW9tZXRyeVZlcnRleFdvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL21vZGlmeWdlb21ldHJ5dmVydGV4d29ya2Zsb3cnKTtcbmNvbnN0IE1vdmVGZWF0dXJlV29ya2Zsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvbW92ZWZlYXR1cmV3b3JrZmxvdycpO1xuY29uc3QgRGVsZXRlRmVhdHVyZVdvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2RlbGV0ZWZlYXR1cmV3b3JrZmxvdycpO1xuY29uc3QgRWRpdEZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvZWRpdGZlYXR1cmVhdHRyaWJ1dGVzd29ya2Zsb3cnKTtcbmNvbnN0IEVkaXRUYWJsZUZlYXR1cmVzV29ya2Zsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvZWRpdHRhYmxld29ya2Zsb3cnKTtcbmNvbnN0IEFkZFRhYmxlRmVhdHVyZVdvcmZsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvYWRkdGFibGVmZWF0dXJld29ya2Zsb3cnKTtcbmNvbnN0IENvcHlGZWF0dXJlc1dvcmZsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvY29weWZlYXR1cmVzd29ya2Zsb3cnKTtcbmNvbnN0IFNwbGl0RmVhdHVyZVdvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL3NwbGl0ZmVhdHVyZXdvcmtmbG93Jyk7XG5jb25zdCBNZXJnZUZlYXR1cmVzV29ya2Zsb3cgPSByZXF1aXJlKCcuLi93b3JrZmxvd3MvbWVyZ2VmZWF0dXJlc3dvcmtmbG93Jyk7XG5jb25zdCBBZGRQYXJ0VG9NdWx0aWdlb21ldHJpZXNXb3JrZmxvdyA9IHJlcXVpcmUoJy4uL3dvcmtmbG93cy9hZGRwYXJ0dG9tdWx0aWdlb21ldHJpZXN3b3JrZmxvdycpO1xuY29uc3QgRGVsZXRlUGFydEZyb21NdWx0aWdlb21ldHJpZXNXb3JrZmxvdyA9IHJlcXVpcmUoJy4uL3dvcmtmbG93cy9kZWxldGVwYXJ0ZnJvbW11bHRpZ2VvbWV0cmllc3dvcmtmbG93Jyk7XG5jb25zdCBFZGl0TXVsdGlGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2VkaXRtdWx0aWZlYXR1cmVhdHRyaWJ1dGVzd29ya2Zsb3cnKTtcbmNvbnN0IEFkZEZlYXR1cmVGcm9tTWFwVmVjdG9yTGF5ZXJzV29yZmxvdyA9IHJlcXVpcmUoJy4uL3dvcmtmbG93cy9hZGRmZWF0dXJlZnJvbW1hcHZlY3RvcmxheWVyc3dvcmtmbG93Jyk7XG5jb25zdCBDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllcldvcmtmbG93ID0gcmVxdWlyZSgnLi4vd29ya2Zsb3dzL2NvcHlmZWF0dXJlc2Zyb21vdGhlcmxheWVyd29ya2Zsb3cnKTtcblxuZnVuY3Rpb24gRWRpdG9yVG9vbHNGYWN0b3J5KCkge1xuICAvKipcbiAgICogTWV0aG9kIHRvIGNyZWF0ZSB0b29scyBiYXNlIG9uIHR5cGUgKHBvaW50LCBMaW5lLCBlLi50KSBlZGl0aW5nIHR5cGUgKGNyZWF0ZS91cGRhdGUvZGV0ZWxlKVxuICAgKiBAcGFyYW0gdHlwZSBQb2ludCwgTGluZSwgUG9seWdvbiwgVGFibGVcbiAgICogQHBhcmFtIGxheWVyXG4gICAqIEBwYXJhbSBjYXBhYmlsaXRpZXMgKGNyZWF0ZS91cGRhdGUsIGRlbGV0ZSkgb3IgdW5kZWZpbmVkIG1lYW5pbmcgYWxsIHBvc3NpYmxlIHRvb2xzIGJhc2Ugb24gdHlwZVxuICAgKi9cbiAgdGhpcy5jcmVhdGVUb29scyA9IGZ1bmN0aW9uKHt0eXBlLCBpc011bHRpR2VvbWV0cnksIGxheWVyLCBjYXBhYmlsaXRpZXN9KXtcbiAgICBsZXQgdG9vbHMgPSBbXTtcbiAgICBjb25zdCBtYXBTZXJ2aWNlID0gR1VJLmdldFNlcnZpY2UoJ21hcCcpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnUG9pbnQnOlxuICAgICAgICB0b29scyA9IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaWQ6ICdhZGRmZWF0dXJlJyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLmFkZF9mZWF0dXJlXCIsXG4gICAgICAgICAgICAgIGljb246IFwiYWRkUG9pbnQucG5nXCIsXG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICByb3c6IDEsXG4gICAgICAgICAgICAgIG9wOiBBZGRGZWF0dXJlV29ya2Zsb3csXG4gICAgICAgICAgICAgIHR5cGU6IFsnYWRkX2ZlYXR1cmUnXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzp7XG4gICAgICAgICAgICAgIGlkOiAnZWRpdGF0dHJpYnV0ZXMnLFxuICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMudXBkYXRlX2ZlYXR1cmVcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJlZGl0QXR0cmlidXRlcy5wbmdcIixcbiAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgIHJvdzogMSxcbiAgICAgICAgICAgICAgb3A6IEVkaXRGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2NoYW5nZV9hdHRyX2ZlYXR1cmUnXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgIGlkOiAnZGVsZXRlZmVhdHVyZScsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5kZWxldGVfZmVhdHVyZVwiLFxuICAgICAgICAgICAgICBpY29uOiBcImRlbGV0ZVBvaW50LnBuZ1wiLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAxLFxuICAgICAgICAgICAgICBvcDogRGVsZXRlRmVhdHVyZVdvcmtmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2RlbGV0ZV9mZWF0dXJlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICBpZDogJ2VkaXRtdWx0aWF0dHJpYnV0ZXMnLFxuICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMudXBkYXRlX211bHRpX2ZlYXR1cmVzXCIsXG4gICAgICAgICAgICAgIGljb246IFwibXVsdGlFZGl0QXR0cmlidXRlcy5wbmdcIixcbiAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgIHJvdzogMixcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgICAgICAgb3A6IEVkaXRNdWx0aUZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3csXG4gICAgICAgICAgICAgIHR5cGU6IFsnY2hhbmdlX2F0dHJfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaWQ6ICdtb3ZlZmVhdHVyZScsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5tb3ZlX2ZlYXR1cmVcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJtb3ZlUG9pbnQucG5nXCIsXG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICByb3c6IDIsXG4gICAgICAgICAgICAgIG9wOiBNb3ZlRmVhdHVyZVdvcmtmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2NoYW5nZV9mZWF0dXJlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICBpZDogJ2NvcHlmZWF0dXJlc2Zyb21vdGhlcmxheWVyJyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLnBhc3RlZmVhdHVyZXNmcm9tb3RoZXJsYXllcnNcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJwYXN0ZUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJzLnBuZ1wiLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgICAgICAgY29uZGl0aW9uczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmdldElkKCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBsYXllci5nZXRHZW9tZXRyeVR5cGUoKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbkxheWVyU291cmNlID0gbWFwU2VydmljZS5kZWZhdWx0c0xheWVycy5zZWxlY3Rpb25MYXllci5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJvb2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0b29sOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBjb25zdCBjaGVja1NlbGVjdGVkRmVhdHVyZUxheWVycyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge2Jvb2wsIHRvb2x9ID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZXNGaWx0ZXIgPSAgc2VsZWN0aW9uTGF5ZXJTb3VyY2UuZ2V0RmVhdHVyZXMoKS5maWx0ZXIoZmVhdHVyZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZUdlb21ldHJ5VHlwZSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSAmJiBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmVhdHVyZS5fX2xheWVySWQgIT09IGxheWVySWQpICYmIGlzU2FtZUJhc2VHZW9tZXRyeVR5cGUoZ2VvbWV0cnlUeXBlLCBmZWF0dXJlR2VvbWV0cnlUeXBlKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZ2VvbWV0cnlUeXBlID09PSBmZWF0dXJlR2VvbWV0cnlUeXBlKSB8fCBHZW9tZXRyeS5pc011bHRpR2VvbWV0cnkoZ2VvbWV0cnlUeXBlKSB8fCAhR2VvbWV0cnkuaXNNdWx0aUdlb21ldHJ5KGZlYXR1cmVHZW9tZXRyeVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmFibGVkID0gYm9vbCAmJiBmZWF0dXJlc0ZpbHRlci5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICB0b29sLnNldEVuYWJsZWQoZW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmFibGVkO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoe2Jvb2wsIHRvb2w9e319KT0+e1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnRvb2wgPSB0b29sO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmJvb2wgPSBib29sO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25MYXllclNvdXJjZVtib29sID8gJ29uJyA6ICd1biddKCdhZGRmZWF0dXJlJywgY2hlY2tTZWxlY3RlZEZlYXR1cmVMYXllcnMpO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25MYXllclNvdXJjZVtib29sID8gJ29uJyA6ICd1biddKCdyZW1vdmVmZWF0dXJlJywgY2hlY2tTZWxlY3RlZEZlYXR1cmVMYXllcnMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tTZWxlY3RlZEZlYXR1cmVMYXllcnMoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KCkpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJvdzogMixcbiAgICAgICAgICAgICAgb3A6IENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyV29ya2Zsb3csXG4gICAgICAgICAgICAgIHR5cGU6IFsnYWRkX2ZlYXR1cmUnXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgIGlkOiAnY29weWZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLmNvcHlcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJjb3B5UG9pbnQucG5nXCIsXG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgICByb3c6IDIsXG4gICAgICAgICAgICAgIG9wOiBDb3B5RmVhdHVyZXNXb3JmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2FkZF9mZWF0dXJlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIC4uLihpc011bHRpR2VvbWV0cnkgPyBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGlkOiAnYWRkUGFydCcsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLmFkZHBhcnRcIixcbiAgICAgICAgICAgICAgICBpY29uOiBcImFkZFBhcnQucG5nXCIsXG4gICAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByb3c6IDMsXG4gICAgICAgICAgICAgICAgb3A6IEFkZFBhcnRUb011bHRpZ2VvbWV0cmllc1dvcmtmbG93LFxuICAgICAgICAgICAgICAgIHR5cGU6IFsnYWRkX2ZlYXR1cmUnLCAnY2hhbmdlX2ZlYXR1cmUnXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSA6IFtdKSxcbiAgICAgICAgICAuLi4oaXNNdWx0aUdlb21ldHJ5ID8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBpZDogJ2RlbGV0ZVBhcnQnLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5kZWxldGVwYXJ0XCIsXG4gICAgICAgICAgICAgICAgaWNvbjogXCJkZWxldGVQYXJ0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICAgIHJvdzogMyxcbiAgICAgICAgICAgICAgICBvcDogRGVsZXRlUGFydEZyb21NdWx0aWdlb21ldHJpZXNXb3JrZmxvdyxcbiAgICAgICAgICAgICAgICB0eXBlOiBbJ2NoYW5nZV9mZWF0dXJlJ10sXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdIDogW10pXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnTGluZSc6XG4gICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgdG9vbHMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgIGlkOiAnYWRkZmVhdHVyZScsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5hZGRfZmVhdHVyZVwiLFxuICAgICAgICAgICAgICBpY29uOiBgYWRkJHt0eXBlfS5wbmdgLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAxLFxuICAgICAgICAgICAgICBvcDogQWRkRmVhdHVyZVdvcmtmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2FkZF9mZWF0dXJlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICBpZDogJ2VkaXRhdHRyaWJ1dGVzJyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLnVwZGF0ZV9mZWF0dXJlXCIsXG4gICAgICAgICAgICAgIGljb246IFwiZWRpdEF0dHJpYnV0ZXMucG5nXCIsXG4gICAgICAgICAgICAgIGxheWVyOiBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAxLFxuICAgICAgICAgICAgICBvcDogRWRpdEZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3csXG4gICAgICAgICAgICAgIHR5cGU6IFsnY2hhbmdlX2F0dHJfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaWQ6ICdtb3ZldmVydGV4JyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLnVwZGF0ZV92ZXJ0ZXhcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJtb3ZlVmVydGV4LnBuZ1wiLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAxLFxuICAgICAgICAgICAgICBvcDogTW9kaWZ5R2VvbWV0cnlWZXJ0ZXhXb3JrZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogWydjaGFuZ2VfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaWQ6ICdkZWxldGVmZWF0dXJlJyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLmRlbGV0ZV9mZWF0dXJlXCIsXG4gICAgICAgICAgICAgIGljb246IGBkZWxldGUke3R5cGV9LnBuZ2AsXG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICByb3c6IDEsXG4gICAgICAgICAgICAgIG9wOiBEZWxldGVGZWF0dXJlV29ya2Zsb3csXG4gICAgICAgICAgICAgIHR5cGU6IFsnZGVsZXRlX2ZlYXR1cmUnXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgIGlkOiAnZWRpdG11bHRpYXR0cmlidXRlcycsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy51cGRhdGVfbXVsdGlfZmVhdHVyZXNcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJtdWx0aUVkaXRBdHRyaWJ1dGVzLnBuZ1wiLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAyLFxuICAgICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgICBvcDogRWRpdE11bHRpRmVhdHVyZUF0dHJpYnV0ZXNXb3JrZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogWydjaGFuZ2VfYXR0cl9mZWF0dXJlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzp7XG4gICAgICAgICAgICAgIGlkOiAnbW92ZWZlYXR1cmUnLFxuICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMubW92ZV9mZWF0dXJlXCIsXG4gICAgICAgICAgICAgIGljb246IGBtb3ZlJHt0eXBlfS5wbmdgLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAyLFxuICAgICAgICAgICAgICBvcDogTW92ZUZlYXR1cmVXb3JrZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogWydjaGFuZ2VfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaWQ6ICdjb3B5ZmVhdHVyZXNmcm9tb3RoZXJsYXllcicsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5wYXN0ZWZlYXR1cmVzZnJvbW90aGVybGF5ZXJzXCIsXG4gICAgICAgICAgICAgIGljb246IFwicGFzdGVGZWF0dXJlc0Zyb21PdGhlckxheWVycy5wbmdcIixcbiAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgICAgICAgIGNvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVySWQgPSBsYXllci5nZXRJZCgpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgZ2VvbWV0cnlUeXBlID0gbGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25MYXllclNvdXJjZSA9IG1hcFNlcnZpY2UuZGVmYXVsdHNMYXllcnMuc2VsZWN0aW9uTGF5ZXIuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBib29sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tTZWxlY3RlZEZlYXR1cmVMYXllcnMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtib29sLCB0b29sfSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzRmlsdGVyID0gIHNlbGVjdGlvbkxheWVyU291cmNlLmdldEZlYXR1cmVzKCkuZmlsdGVyKGZlYXR1cmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVHZW9tZXRyeVR5cGUgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkgJiYgZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoKGZlYXR1cmUuX19sYXllcklkICE9PSBsYXllcklkKSAmJiBpc1NhbWVCYXNlR2VvbWV0cnlUeXBlKGdlb21ldHJ5VHlwZSwgZmVhdHVyZUdlb21ldHJ5VHlwZSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGdlb21ldHJ5VHlwZSA9PT0gZmVhdHVyZUdlb21ldHJ5VHlwZSkgfHwgR2VvbWV0cnkuaXNNdWx0aUdlb21ldHJ5KGdlb21ldHJ5VHlwZSkgfHwgIUdlb21ldHJ5LmlzTXVsdGlHZW9tZXRyeShmZWF0dXJlR2VvbWV0cnlUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5hYmxlZCA9IGJvb2wgJiYgZmVhdHVyZXNGaWx0ZXIubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgdG9vbC5zZXRFbmFibGVkKGVuYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKHtib29sLCB0b29sPXt9fSk9PntcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50b29sID0gdG9vbDtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5ib29sID0gYm9vbDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTGF5ZXJTb3VyY2VbYm9vbCA/ICdvbicgOiAndW4nXSgnYWRkZmVhdHVyZScsIGNoZWNrU2VsZWN0ZWRGZWF0dXJlTGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTGF5ZXJTb3VyY2VbYm9vbCA/ICdvbicgOiAndW4nXSgncmVtb3ZlZmVhdHVyZScsIGNoZWNrU2VsZWN0ZWRGZWF0dXJlTGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrU2VsZWN0ZWRGZWF0dXJlTGF5ZXJzKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSgpKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByb3c6IDIsXG4gICAgICAgICAgICAgIG9wOiBDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllcldvcmtmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2FkZF9mZWF0dXJlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICBpZDogJ2NvcHlmZWF0dXJlcycsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5jb3B5XCIsXG4gICAgICAgICAgICAgIGljb246IGBjb3B5JHt0eXBlfS5wbmdgLFxuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgcm93OiAyLFxuICAgICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgICBvcDogQ29weUZlYXR1cmVzV29yZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogWydhZGRfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAuLi4oaXNNdWx0aUdlb21ldHJ5ID8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICBpZDogJ2FkZFBhcnQnLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5hZGRwYXJ0XCIsXG4gICAgICAgICAgICAgICAgaWNvbjogXCJhZGRQYXJ0LnBuZ1wiLFxuICAgICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICAgIHJvdzogMyxcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wOiBBZGRQYXJ0VG9NdWx0aWdlb21ldHJpZXNXb3JrZmxvdyxcbiAgICAgICAgICAgICAgICB0eXBlOiBbJ2FkZF9mZWF0dXJlJywgJ2NoYW5nZV9mZWF0dXJlJ11cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0gOiBbXSksXG4gICAgICAgICAgLi4uKGlzTXVsdGlHZW9tZXRyeSA/IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgaWQ6ICdkZWxldGVQYXJ0JyxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMuZGVsZXRlcGFydFwiLFxuICAgICAgICAgICAgICAgIGljb246IFwiZGVsZXRlUGFydC5wbmdcIixcbiAgICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgICByb3c6IDMsXG4gICAgICAgICAgICAgICAgb3A6IERlbGV0ZVBhcnRGcm9tTXVsdGlnZW9tZXRyaWVzV29ya2Zsb3csXG4gICAgICAgICAgICAgICAgdHlwZTogWydjaGFuZ2VfZmVhdHVyZSddXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdIDogW10pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICBpZDogJ3NwbGl0ZmVhdHVyZScsXG4gICAgICAgICAgICAgIG5hbWU6IFwiZWRpdGluZy50b29scy5zcGxpdFwiLFxuICAgICAgICAgICAgICBpY29uOiBcInNwbGl0RmVhdHVyZXMucG5nXCIsXG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICByb3c6IDMsXG4gICAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgICAgICAgIG9wOiBTcGxpdEZlYXR1cmVXb3JrZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogIFsnY2hhbmdlX2ZlYXR1cmUnXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uZmlnOntcbiAgICAgICAgICAgICAgaWQ6ICdtZXJnZWZlYXR1cmVzJyxcbiAgICAgICAgICAgICAgbmFtZTogXCJlZGl0aW5nLnRvb2xzLm1lcmdlXCIsXG4gICAgICAgICAgICAgIGljb246IFwibWVyZ2VGZWF0dXJlcy5wbmdcIixcbiAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgIHJvdzogMyxcbiAgICAgICAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgICAgICAgb3A6IE1lcmdlRmVhdHVyZXNXb3JrZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogWydjaGFuZ2VfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6e1xuICAgICAgICAgICAgICBpZDogJ2NvcHlmZWF0dXJlZnJvbWV4dGVybmFsbGF5ZXInLFxuICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMuY29weWZlYXR1cmVmcm9tZXh0ZXJuYWxsYXllclwiLFxuICAgICAgICAgICAgICBpY29uOiBcImNvcHlQb2x5Z29uRnJvbUZlYXR1cmUucG5nXCIsXG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICByb3c6IDMsXG4gICAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgICAgICAgIHZpc2libGU6IHRvb2wgID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllckdlb21ldHJ5VHlwZSA9IHRvb2wuZ2V0TGF5ZXIoKS5nZXRHZW9tZXRyeVR5cGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja0lmTGF5ZXJIYXNUaGVTYW1lQmFzZUdlb21ldHJ5VHlwZSA9IGxheWVyID0+IHtcbiAgICAgICAgICAgICAgICAgIGxldCBzYW1lQmFzZUdlb21ldHJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBsYXllci5nZXRUeXBlKCk7XG4gICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0b29sIGlzIHZpc2libGUgYW5kIHRoZSBsYXllciBpcyBhIFZlY3RvclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdWRUNUT1InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gbGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSBmZWF0dXJlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIHNhbWVCYXNlR2VvbWV0cnkgPSBpc1NhbWVCYXNlR2VvbWV0cnlUeXBlKGdlb21ldHJ5VHlwZSwgbGF5ZXJHZW9tZXRyeVR5cGUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBzYW1lQmFzZUdlb21ldHJ5O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWFwU2VydmljZS5vbmJlZm9yZSgnbG9hZEV4dGVybmFsTGF5ZXInLCAgbGF5ZXIgPT4gIXRvb2wuaXNWaXNpYmxlKCkgJiYgdG9vbC5zZXRWaXNpYmxlKGNoZWNrSWZMYXllckhhc1RoZVNhbWVCYXNlR2VvbWV0cnlUeXBlKGxheWVyKSkpO1xuICAgICAgICAgICAgICAgIG1hcFNlcnZpY2Uub25hZnRlcigndW5sb2FkRXh0ZXJuYWxMYXllcicsIGxheWVyID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBsYXllci5nZXRUeXBlKCk7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbC5pc1Zpc2libGUoKSAmJiB0eXBlID09PSAnVkVDVE9SJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IGxheWVyLmdldFNvdXJjZSgpLmdldEZlYXR1cmVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VvbWV0cnlUeXBlID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldFR5cGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTYW1lQmFzZUdlb21ldHJ5VHlwZShnZW9tZXRyeVR5cGUsIGxheWVyR2VvbWV0cnlUeXBlKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gbWFwU2VydmljZS5nZXRFeHRlcm5hbExheWVycygpLmZpbmQoZXh0ZXJuYWxMYXllciA9PiBjaGVja0lmTGF5ZXJIYXNUaGVTYW1lQmFzZUdlb21ldHJ5VHlwZShleHRlcm5hbExheWVyKSkgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2wuc2V0VmlzaWJsZSh2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb3A6IEFkZEZlYXR1cmVGcm9tTWFwVmVjdG9yTGF5ZXJzV29yZmxvdyxcbiAgICAgICAgICAgICAgdHlwZTogWydhZGRfZmVhdHVyZSddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1RhYmxlJzpcbiAgICAgICAgdG9vbHMgPSAgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICBpZDogJ2FkZGZlYXR1cmUnLFxuICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMuYWRkX2ZlYXR1cmVcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJhZGRUYWJsZVJvdy5wbmdcIixcbiAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgIG9wOiBBZGRUYWJsZUZlYXR1cmVXb3JmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2FkZF9mZWF0dXJlJ10sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgaWQ6ICdlZGl0dGFibGUnLFxuICAgICAgICAgICAgICBuYW1lOiBcImVkaXRpbmcudG9vbHMudXBkYXRlX2ZlYXR1cmVcIixcbiAgICAgICAgICAgICAgaWNvbjogXCJlZGl0QXR0cmlidXRlcy5wbmdcIixcbiAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgIG9wOiBFZGl0VGFibGVGZWF0dXJlc1dvcmtmbG93LFxuICAgICAgICAgICAgICB0eXBlOiBbJ2RlbGV0ZV9mZWF0dXJlJywgJ2NoYW5nZV9hdHRyX2ZlYXR1cmUnXSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gY2FwYWJpbGl0aWVzID8gdG9vbHMuZmlsdGVyKHRvb2wgPT4gdG9vbC5jb25maWcudHlwZS5maWx0ZXIodHlwZSA9PiBjYXBhYmlsaXRpZXMuaW5jbHVkZXModHlwZSkpLmxlbmd0aCA+IDApLm1hcCh0b29sID0+IHtcbiAgICAgIC8vIGluIGNhc2Ugb2YgY2FwYWJpbGl0aWVzIGFsbCB0b29scyBvbiBsaW5lXG4gICAgICB0b29sLmNvbmZpZy5yb3cgPSAxO1xuICAgICAgcmV0dXJuIG5ldyBUb29sKHRvb2wuY29uZmlnKVxuICAgIH0pOiB0b29scy5tYXAodG9vbCA9PiBuZXcgVG9vbCh0b29sLmNvbmZpZykpO1xuICB9O1xuICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICAgIGNvbnN0IHt0eXBlPUxheWVyLkxheWVyVHlwZXMuVkVDVE9SLCBsYXllciwgY2FwYWJpbGl0aWVzfSA9IG9wdGlvbnM7XG4gICAgbGV0IHRvb2xzID0gW107XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIExheWVyLkxheWVyVHlwZXMuVkVDVE9SOlxuICAgICAgICBjb25zdCBnZW9tZXRyeVR5cGUgPSBvcHRpb25zLmdlb21ldHJ5VHlwZTtcbiAgICAgICAgLy8gY2hlY2sgaWYgbXVsdGlnZW9tZXRyeVxuICAgICAgICBjb25zdCBpc011bHRpR2VvbWV0cnkgPSBHZW9tZXRyeS5pc011bHRpR2VvbWV0cnkoZ2VvbWV0cnlUeXBlKTtcbiAgICAgICAgLy8gaW4gY2FzZSBvZiBQb2ludCBHZW9tZXRyeVxuICAgICAgICBpZiAoR2VvbWV0cnkuaXNQb2ludEdlb21ldHJ5VHlwZShnZW9tZXRyeVR5cGUpKSB7XG4gICAgICAgICAgdG9vbHMgPSB0aGlzLmNyZWF0ZVRvb2xzKHtcbiAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgdHlwZTogJ1BvaW50JyxcbiAgICAgICAgICAgIGlzTXVsdGlHZW9tZXRyeVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgLy8gaW4gY2FzZSBvZiBMaW5lIGdlb21ldHJ5XG4gICAgICAgIGVsc2UgaWYgKEdlb21ldHJ5LmlzTGluZUdlb21ldHJ5VHlwZShnZW9tZXRyeVR5cGUpKSB7XG4gICAgICAgICAgdG9vbHMgPSB0aGlzLmNyZWF0ZVRvb2xzKHtcbiAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgdHlwZTogJ0xpbmUnLFxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgaXNNdWx0aUdlb21ldHJ5XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiBjYXNlIG9mIFBvbHlnb24gR2VvbWV0cnlcbiAgICAgICAgZWxzZSBpZiAoR2VvbWV0cnkuaXNQb2x5Z29uR2VvbWV0cnlUeXBlKGdlb21ldHJ5VHlwZSkpe1xuICAgICAgICAgICAgdG9vbHMgPSB0b29scyA9IHRoaXMuY3JlYXRlVG9vbHMoe1xuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgdHlwZTogJ1BvbHlnb24nLFxuICAgICAgICAgICAgICBjYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICAgIGlzTXVsdGlHZW9tZXRyeVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTGF5ZXIuTGF5ZXJUeXBlcy5UQUJMRTpcbiAgICAgICAgdG9vbHMgPSB0aGlzLmNyZWF0ZVRvb2xzKHtcbiAgICAgICAgICBsYXllcixcbiAgICAgICAgICB0eXBlOiAnVGFibGUnLFxuICAgICAgICAgIGNhcGFiaWxpdGllc1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0b29scyA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRvb2xzXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEVkaXRvclRvb2xzRmFjdG9yeTtcbiIsImNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgU2VsZWN0RWxlbWVudHNTdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9zZWxlY3RlbGVtZW50c3N0ZXAnKTtcbmNvbnN0IE9wZW5Gb3JtU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvb3BlbmZvcm1zdGVwJyk7XG5cbmZ1bmN0aW9uIEFkZEZlYXR1cmVGcm9tTWFwVmVjdG9yTGF5ZXJzV29yZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudHlwZSA9ICAnZXh0ZXJuYWwnO1xuICBvcHRpb25zLmhlbHAgPSAnZWRpdGluZy5zdGVwcy5oZWxwLmNvcHknO1xuICBvcHRpb25zLnN0ZXBzID0gW107XG4gIGNvbnN0IHNlbGVjdGVsZW1lbnRzc3RlcHMgPSBuZXcgU2VsZWN0RWxlbWVudHNTdGVwKG9wdGlvbnMsIGZhbHNlKTtcbiAgY29uc3Qgb3BlbmZvcm1zdGVwID0gbmV3IE9wZW5Gb3JtU3RlcChvcHRpb25zKTtcbiAgb3B0aW9ucy5zdGVwcyA9IFtzZWxlY3RlbGVtZW50c3N0ZXBzLCBvcGVuZm9ybXN0ZXBdO1xuICB0aGlzLnJlZ2lzdGVyRXNjS2V5RXZlbnQoKTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChBZGRGZWF0dXJlRnJvbU1hcFZlY3RvckxheWVyc1dvcmZsb3csIEVkaXRpbmdXb3JrZmxvdyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWRkRmVhdHVyZUZyb21NYXBWZWN0b3JMYXllcnNXb3JmbG93O1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdXb3JrZmxvdyA9IHJlcXVpcmUoJy4vZWRpdGluZ3dvcmtmbG93Jyk7XG5jb25zdCBBZGRGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvYWRkZmVhdHVyZXN0ZXAnKTtcbmNvbnN0IE9wZW5Gb3JtU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvb3BlbmZvcm1zdGVwJyk7XG5cbmZ1bmN0aW9uIEFkZEZlYXR1cmVXb3JmbG93KG9wdGlvbnM9e30pIHtcbiAgY29uc3QgYWRkZmVhdHVyZXN0ZXAgPSBuZXcgQWRkRmVhdHVyZVN0ZXAob3B0aW9ucyk7XG4gIGNvbnN0IG9wZW5mb3Jtc3RlcCA9IG5ldyBPcGVuRm9ybVN0ZXAob3B0aW9ucyk7XG4gIG9wdGlvbnMuc3RlcHMgPSBbYWRkZmVhdHVyZXN0ZXAsIG9wZW5mb3Jtc3RlcF07XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuYWRkVG9vbHNPZlRvb2xzKHtcbiAgICBzdGVwOiBhZGRmZWF0dXJlc3RlcCxcbiAgICB0b29sczogWydzbmFwJywgJ21lYXN1cmUnXVxuICB9KVxufVxuXG5pbmhlcml0KEFkZEZlYXR1cmVXb3JmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkZEZlYXR1cmVXb3JmbG93O1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdXb3JrZmxvdyA9IHJlcXVpcmUoJy4vZWRpdGluZ3dvcmtmbG93Jyk7XG5jb25zdCBQaWNrRmVhdHVyZVN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL3BpY2tmZWF0dXJlc3RlcCcpO1xuY29uc3QgQ2hvb3NlRmVhdHVyZVN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL2Nob29zZWZlYXR1cmVzdGVwJyk7XG5jb25zdCBBZGRGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvYWRkZmVhdHVyZXN0ZXAnKTtcbmNvbnN0IEFkZFBhcnRUb011bHRpZ2VvbWV0cmllc1N0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL2FkZHBhcnR0b211bHRpZ2VvbWV0cmllc3N0ZXAnKTtcblxuZnVuY3Rpb24gQWRkUGFydFRvTXVsdGlnZW9tZXRyaWVzV29yZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudHlwZSA9ICdzaW5nbGUnO1xuICBvcHRpb25zLmhlbHBNZXNzYWdlID0gJ2VkaXRpbmcudG9vbHMuYWRkcGFydCc7XG4gIG9wdGlvbnMuaGVscCA9ICdlZGl0aW5nLnN0ZXBzLmhlbHAuc2VsZWN0X2VsZW1lbnQnO1xuICBjb25zdCBzZWxlY3RlbGVtZW50c3N0ZXBzID0gbmV3IFBpY2tGZWF0dXJlU3RlcCgpO1xuICBzZWxlY3RlbGVtZW50c3N0ZXBzLmdldFRhc2soKS5zZXRTdGVwcyh7XG4gICAgc2VsZWN0OiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ2VkaXRpbmcud29ya2Zsb3cuc3RlcHMuc2VsZWN0JyxcbiAgICAgIGRpcmVjdGl2ZTogJ3QtcGx1Z2luJyxcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgb3B0aW9ucy5hZGQgPSBmYWxzZTtcbiAgY29uc3QgYWRkZmVhdHVyZXN0ZXAgPSBuZXcgQWRkRmVhdHVyZVN0ZXAob3B0aW9ucyk7XG4gIGFkZGZlYXR1cmVzdGVwLmdldFRhc2soKS5zZXRTdGVwcyh7XG4gICAgYWRkZmVhdHVyZToge1xuICAgICAgZGVzY3JpcHRpb246ICdlZGl0aW5nLndvcmtmbG93LnN0ZXBzLmRyYXdfcGFydCcsXG4gICAgICBkaXJlY3RpdmU6ICd0LXBsdWdpbicsXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGFkZGZlYXR1cmVzdGVwLm9uKCdydW4nLCAoe2lucHV0cywgY29udGV4dH0pID0+IHtcbiAgICBjb25zdCBsYXllciA9IGlucHV0cy5sYXllcjtcbiAgICBjb25zdCBzbmFwVG9vbCA9IHtcbiAgICAgIHR5cGU6ICdzbmFwJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgbGF5ZXJJZDogbGF5ZXIuZ2V0SWQoKSxcbiAgICAgICAgc291cmNlOiBsYXllci5nZXRFZGl0aW5nTGF5ZXIoKS5nZXRTb3VyY2UoKSxcbiAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmVtaXQoJ3NldHRvb2xzb2Z0b29sJywgW3NuYXBUb29sXSk7XG4gIH0pO1xuICBhZGRmZWF0dXJlc3RlcC5vbigncnVuJywgKCkgPT4ge1xuICAgIHRoaXMuZW1pdCgnYWN0aXZlJywgWydzbmFwJ10pO1xuICB9KTtcbiAgYWRkZmVhdHVyZXN0ZXAub24oJ3N0b3AnLCAoKSA9PiB7XG4gICAgdGhpcy5lbWl0KCdkZWFjdGl2ZScsIFsnc25hcCddKTtcbiAgfSk7XG4gIGNvbnN0IGFkZHBhcnR0b2dlb21ldHJpZXNzdGVwID0gbmV3IEFkZFBhcnRUb011bHRpZ2VvbWV0cmllc1N0ZXAob3B0aW9ucyk7XG4gIG9wdGlvbnMuc3RlcHMgPSBbc2VsZWN0ZWxlbWVudHNzdGVwcywgbmV3IENob29zZUZlYXR1cmVTdGVwKCksIGFkZGZlYXR1cmVzdGVwLCBhZGRwYXJ0dG9nZW9tZXRyaWVzc3RlcF07XG4gIHRoaXMucmVnaXN0ZXJFc2NLZXlFdmVudCgpO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KEFkZFBhcnRUb011bHRpZ2VvbWV0cmllc1dvcmZsb3csIEVkaXRpbmdXb3JrZmxvdyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWRkUGFydFRvTXVsdGlnZW9tZXRyaWVzV29yZmxvdztcbiIsImNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgQWRkVGFibGVGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvYWRkdGFibGVmZWF0dXJlc3RlcCcpO1xuY29uc3QgT3BlbkZvcm1TdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9vcGVuZm9ybXN0ZXAnKTtcblxuZnVuY3Rpb24gQWRkVGFibGVGZWF0dXJlV29yZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMuc3RlcHMgPSBbbmV3IEFkZFRhYmxlRmVhdHVyZVN0ZXAoKSwgbmV3IE9wZW5Gb3JtU3RlcCgpXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChBZGRUYWJsZUZlYXR1cmVXb3JmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkZFRhYmxlRmVhdHVyZVdvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IENvbmZpcm1TdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9jb25maXJtc3RlcCcpO1xuXG5mdW5jdGlvbiBDb21taXRGZWF0dXJlV29yZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMuc3RlcHMgPSBbbmV3IENvbmZpcm1TdGVwKG9wdGlvbnMpXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChDb21taXRGZWF0dXJlV29yZmxvdywgRWRpdGluZ1dvcmtmbG93KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21taXRGZWF0dXJlV29yZmxvdzsiLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvY29weWZlYXR1cmVzZnJvbW90aGVybGF5ZXJzdGVwJyk7XG5jb25zdCBPcGVuRm9ybVN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL29wZW5mb3Jtc3RlcCcpO1xuXG5mdW5jdGlvbiBDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllcldvcmZsb3cob3B0aW9ucz17fSkge1xuICBvcHRpb25zLmhlbHAgPSAnZWRpdGluZy5zdGVwcy5oZWxwLmNvcHknO1xuICBvcHRpb25zLnN0ZXBzID0gW1xuICAgIG5ldyBDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllclN0ZXAob3B0aW9ucyksXG4gICAgbmV3IE9wZW5Gb3JtU3RlcChvcHRpb25zKVxuICBdO1xuICB0aGlzLnJlZ2lzdGVyRXNjS2V5RXZlbnQoKTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllcldvcmZsb3csIEVkaXRpbmdXb3JrZmxvdyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJXb3JmbG93O1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgU2VsZWN0RWxlbWVudHNTdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9zZWxlY3RlbGVtZW50c3N0ZXAnKTtcbmNvbnN0IEdldFZlcnRleFN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL2dldHZlcnRleHN0ZXAnKTtcbmNvbnN0IE1vdmVFbGVtZW50c1N0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL21vdmVsZW1lbnRzc3RlcCcpO1xuY29uc3QgQXBwbGljYXRpb25TdGF0ZSA9IGczd3Nkay5jb3JlLkFwcGxpY2F0aW9uU3RhdGU7XG5cbmZ1bmN0aW9uIENvcHlGZWF0dXJlc1dvcmZsb3cob3B0aW9ucz17fSkge1xuICBjb25zdCBpc1BvaW50TGF5ZXIgPSBvcHRpb25zLmxheWVyLmdldEdlb21ldHJ5VHlwZSgpLmluZGV4T2YoJ1BvaW50JykgIT09IC0xO1xuICBvcHRpb25zLnR5cGUgPSBBcHBsaWNhdGlvblN0YXRlLmlzbW9iaWxlID8gJ3NpbmdsZScgOiAgJ211bHRpcGxlJztcbiAgb3B0aW9ucy5oZWxwID0gJ2VkaXRpbmcuc3RlcHMuaGVscC5jb3B5JztcbiAgb3B0aW9ucy5zdGVwcyA9IFtdO1xuICBjb25zdCBzZWxlY3RlbGVtZW50c3N0ZXBzID0gbmV3IFNlbGVjdEVsZW1lbnRzU3RlcChvcHRpb25zLCB0cnVlKTtcbiAgc2VsZWN0ZWxlbWVudHNzdGVwcy5nZXRUYXNrKCkuc2V0U3RlcHMoe1xuICAgIHNlbGVjdDoge1xuICAgICAgZGVzY3JpcHRpb246IG9wdGlvbnMudHlwZSA9PT0gJ211bHRpcGxlJyAgPyAnZWRpdGluZy53b3JrZmxvdy5zdGVwcy5zZWxlY3RQb2ludFNISUZUJyA6ICdlZGl0aW5nLndvcmtmbG93LnN0ZXBzLnNlbGVjdFBvaW50JyxcbiAgICAgIGRpcmVjdGl2ZTogJ3QtcGx1Z2luJyxcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgb3B0aW9ucy5zdGVwcy5wdXNoKHNlbGVjdGVsZW1lbnRzc3RlcHMpO1xuICBpZiAoIWlzUG9pbnRMYXllcikge1xuICAgIGNvbnN0IGdldHZlcnRleHN0ZXAgPSBuZXcgR2V0VmVydGV4U3RlcChvcHRpb25zLCB0cnVlKTtcbiAgICBnZXR2ZXJ0ZXhzdGVwLmdldFRhc2soKS5zZXRTdGVwcyh7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnZWRpdGluZy53b3JrZmxvdy5zdGVwcy5zZWxlY3RTdGFydFZlcnRleCcsXG4gICAgICAgIGRpcmVjdGl2ZTogJ3QtcGx1Z2luJyxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvcHRpb25zLnN0ZXBzLnB1c2goZ2V0dmVydGV4c3RlcCk7XG4gIH1cbiAgY29uc3QgbW92ZWVsZW1lbnRzc3RlcHMgPSBuZXcgTW92ZUVsZW1lbnRzU3RlcChvcHRpb25zLCB0cnVlKTtcbiAgbW92ZWVsZW1lbnRzc3RlcHMuZ2V0VGFzaygpLnNldFN0ZXBzKHtcbiAgICB0bzoge1xuICAgICAgZGVzY3JpcHRpb246ICdlZGl0aW5nLndvcmtmbG93LnN0ZXBzLnNlbGVjdFRvUGFzdGUnLFxuICAgICAgZGlyZWN0aXZlOiAndC1wbHVnaW4nLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBvcHRpb25zLnN0ZXBzLnB1c2gobW92ZWVsZW1lbnRzc3RlcHMpO1xuICB0aGlzLnJlZ2lzdGVyRXNjS2V5RXZlbnQoKTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChDb3B5RmVhdHVyZXNXb3JmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvcHlGZWF0dXJlc1dvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IERlbGV0ZUZlYXR1cmVTdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9kZWxldGVmZWF0dXJlc3RlcCcpO1xuY29uc3QgUGlja0ZlYXR1cmVTdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9waWNrZmVhdHVyZXN0ZXAnKTtcbmNvbnN0IENob29zZUZlYXR1cmVTdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9jaG9vc2VmZWF0dXJlc3RlcCcpO1xuY29uc3QgQ29uZmlybVN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL2NvbmZpcm1zdGVwJyk7XG5cbmZ1bmN0aW9uIERlbGV0ZUZlYXR1cmVXb3JmbG93KG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy5zdGVwcyA9IFtcbiAgICBuZXcgUGlja0ZlYXR1cmVTdGVwKCksXG4gICAgbmV3IENob29zZUZlYXR1cmVTdGVwKCksXG4gICAgbmV3IERlbGV0ZUZlYXR1cmVTdGVwKCksXG4gICAgbmV3IENvbmZpcm1TdGVwKHt0eXBlOiAnZGVsZXRlJ30pXG4gIF07XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoRGVsZXRlRmVhdHVyZVdvcmZsb3csIEVkaXRpbmdXb3JrZmxvdyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlRmVhdHVyZVdvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IERlbGV0ZVBhcnRGcm9tTXVsdGlnZW9tZXRyaWVzU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvZGVsZXRlcGFydGZyb21tdWx0aWdlb21ldHJpZXNzdGVwJyk7XG5jb25zdCBQaWNrRmVhdHVyZVN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL3BpY2tmZWF0dXJlc3RlcCcpO1xuY29uc3QgQ2hvb3NlRmVhdHVyZVN0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL2Nob29zZWZlYXR1cmVzdGVwJyk7XG5cbmZ1bmN0aW9uIERlbGV0ZVBhcnRUb011bHRpZ2VvbWV0cmllc1dvcmZsb3cob3B0aW9ucz17fSkge1xuICBvcHRpb25zLmhlbHBNZXNzYWdlID0gJ2VkaXRpbmcudG9vbHMuZGVsZXRlcGFydCc7XG4gIG9wdGlvbnMuc3RlcHMgPSBbXG4gICAgbmV3IFBpY2tGZWF0dXJlU3RlcCgpLFxuICAgIG5ldyBDaG9vc2VGZWF0dXJlU3RlcCgpLFxuICAgIG5ldyBEZWxldGVQYXJ0RnJvbU11bHRpZ2VvbWV0cmllc1N0ZXAob3B0aW9ucylcbiAgXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChEZWxldGVQYXJ0VG9NdWx0aWdlb21ldHJpZXNXb3JmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlbGV0ZVBhcnRUb011bHRpZ2VvbWV0cmllc1dvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IFBpY2tGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvcGlja2ZlYXR1cmVzdGVwJyk7XG5jb25zdCBDaG9vc2VGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvY2hvb3NlZmVhdHVyZXN0ZXAnKTtcbmNvbnN0IE9wZW5Gb3JtU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvb3BlbmZvcm1zdGVwJyk7XG5cbmZ1bmN0aW9uIEVkaXRGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93KG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy5oZWxwTWVzc2FnZSA9ICdlZGl0aW5nLnRvb2xzLnVwZGF0ZV9mZWF0dXJlJztcbiAgb3B0aW9ucy5zdGVwcyA9IFtcbiAgICBuZXcgUGlja0ZlYXR1cmVTdGVwKCksXG4gICAgbmV3IENob29zZUZlYXR1cmVTdGVwKCksXG4gICAgbmV3IE9wZW5Gb3JtU3RlcCgpXG4gIF07XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoRWRpdEZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3csIEVkaXRpbmdXb3JrZmxvdyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdEZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3c7IiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7V29ya2Zsb3d9ID0gZzN3c2RrLmNvcmUud29ya2Zsb3c7XG5jb25zdCB7TGF5ZXJ9ID0gZzN3c2RrLmNvcmUubGF5ZXI7XG5jb25zdCB7aXNQb2ludEdlb21ldHJ5VHlwZX0gPSBnM3dzZGsuY29yZS5nZW9tZXRyeS5HZW9tZXRyeTtcblxuZnVuY3Rpb24gRWRpdGluZ1dvcmtmbG93KG9wdGlvbnM9e30pIHtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5oZWxwTWVzc2FnZSA9IG9wdGlvbnMuaGVscE1lc3NhZ2UgPyB7aGVscDpvcHRpb25zLmhlbHBNZXNzYWdlfSA6IG51bGw7XG4gIHRoaXMuX3Rvb2xzb2Z0b29sID0gW107XG59XG5cbmluaGVyaXQoRWRpdGluZ1dvcmtmbG93LCBXb3JrZmxvdyk7XG5cbmNvbnN0IHByb3RvID0gRWRpdGluZ1dvcmtmbG93LnByb3RvdHlwZTtcblxucHJvdG8uYWRkVG9vbHNPZlRvb2xzID0gZnVuY3Rpb24oe3N0ZXAsIHRvb2xzPVtdfSl7XG4gIGNvbnN0IHRvb2xzT2ZUb29scyA9IHtcbiAgICBzbmFwOiB7XG4gICAgICB0eXBlOiAnc25hcCcsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNoZWNrZWRBbGw6IGZhbHNlLFxuICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICBydW4oe2xheWVyfSl7XG4gICAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMubGF5ZXJJZCA9IHRoaXMubGF5ZXJJZCB8fCBsYXllci5nZXRJZCgpO1xuICAgICAgICAgIHRoaXMuc291cmNlID0gdGhpcy5zb3VyY2UgfHwgbGF5ZXIuZ2V0RWRpdGluZ0xheWVyKCkuZ2V0U291cmNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3AoKXtcbiAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtZWFzdXJlOiAge1xuICAgICAgdHlwZTogJ21lYXN1cmUnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgcnVuKCl7XG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmNoZWNrZWQpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHN0b3AoKXtcbiAgICAgICAgICBzdGVwLmdldFRhc2soKS5yZW1vdmVNZWFzdXJlSW50ZXJhY3Rpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFuZ2UoYm9vbCl7XG4gICAgICAgICAgdGhpcy5jaGVja2VkID0gYm9vbDtcbiAgICAgICAgICBzdGVwLmdldFRhc2soKVtib29sID8gJ2FkZE1lYXN1cmVJbnRlcmFjdGlvbic6ICAncmVtb3ZlTWVhc3VyZUludGVyYWN0aW9uJ10oKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVEZXN0cm95KCl7XG4gICAgICAgICAgdGhpcy5vbkNoYW5nZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHN0ZXAub24oJ3J1bicsICh7aW5wdXRzLCBjb250ZXh0fSkgPT4ge1xuICAgIGNvbnN0IGxheWVyID0gaW5wdXRzLmxheWVyO1xuICAgIGlmICh0aGlzLl90b29sc29mdG9vbC5sZW5ndGggPT0gMCkge1xuICAgICAgdG9vbHMuZm9yRWFjaCh0b29sID0+e1xuICAgICAgICBpZiAodG9vbCA9PT0gJ21lYXN1cmUnKSB7XG4gICAgICAgICAgaWYgKGxheWVyLmdldFR5cGUoKSA9PT0gTGF5ZXIuTGF5ZXJUeXBlcy5WRUNUT1IgJiYgIWlzUG9pbnRHZW9tZXRyeVR5cGUobGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCkpKVxuICAgICAgICAgICAgdGhpcy5fdG9vbHNvZnRvb2wucHVzaCh0b29sc09mVG9vbHNbdG9vbF0pO1xuICAgICAgICB9IGVsc2UgdGhpcy5fdG9vbHNvZnRvb2wucHVzaCh0b29sc09mVG9vbHNbdG9vbF0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3Rvb2xzb2Z0b29sLmZvckVhY2godG9vbG9mdG9vbD0+IHRvb2xvZnRvb2wub3B0aW9ucy5ydW4oe2xheWVyfSkpO1xuICAgIHRoaXMuZW1pdCgnc2V0dG9vbHNvZnRvb2wnLCB0aGlzLl90b29sc29mdG9vbCk7XG4gIH0pO1xuICBzdGVwLm9uKCdzdG9wJywgKCkgPT4ge1xuICAgIHRoaXMuX3Rvb2xzb2Z0b29sLmZvckVhY2godG9vbG9mdG9vbD0+IHRvb2xvZnRvb2wub3B0aW9ucy5zdG9wKCkpO1xuICB9KTtcbn07XG5cbnByb3RvLnNldEhlbHBNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICB0aGlzLmhlbHBNZXNzYWdlID0ge1xuICAgIGhlbHA6IG1lc3NhZ2VcbiAgfTtcbn07XG5cbnByb3RvLmdldEhlbHBNZXNzYWdlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRoaXMuaGVscE1lc3NhZ2U7XG59O1xuXG5wcm90by5nZXRGZWF0dXJlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRJbnB1dHMoKS5mZWF0dXJlcztcbn07XG5cbnByb3RvLnN0YXJ0RnJvbUxhc3RTdGVwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBsZXQgc3RlcHMgPSB0aGlzLmdldFN0ZXBzKCk7XG4gIHRoaXMuc2V0U3RlcHMoW3N0ZXBzLnBvcCgpXSk7XG4gIHJldHVybiB0aGlzLnN0YXJ0KG9wdGlvbnMpO1xufTtcblxucHJvdG8uZ2V0Q3VycmVudEZlYXR1cmUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZmVhdHVyZXMgPSB0aGlzLmdldEZlYXR1cmVzKCk7XG4gIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ2V0RmVhdHVyZXMoKS5sZW5ndGg7XG4gIHJldHVybiBmZWF0dXJlc1tsZW5ndGggLTFdO1xufTtcblxucHJvdG8uZ2V0TGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0U2Vzc2lvbigpLmdldEVkaXRvcigpLmdldExheWVyKClcbn07XG5cbnByb3RvLmdldFNlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0Q29udGV4dCgpLnNlc3Npb247XG59O1xuXG4vL2JpbmQgaW50ZXJydXB0IGV2ZW50XG5wcm90by5lc2NLZXlVcEhhbmRsZXIgPSBmdW5jdGlvbihldnQpIHtcbiAgaWYgKGV2dC5rZXlDb2RlID09PSAyNykge1xuICAgIGV2dC5kYXRhLndvcmtmbG93LnJlamVjdCgpO1xuICAgIGV2dC5kYXRhLmNhbGxiYWNrKCk7XG4gIH1cbn07XG5cbnByb3RvLnVuYmluZEVzY0tleVVwID0gZnVuY3Rpb24oKSB7XG4gICQoZG9jdW1lbnQpLnVuYmluZCgna2V5dXAnLCB0aGlzLmVzY0tleVVwSGFuZGxlcik7XG59O1xuXG5wcm90by5iaW5kRXNjS2V5VXAgPSBmdW5jdGlvbihjYWxsYmFjaz0oKT0+e30pIHtcbiAgJChkb2N1bWVudCkub24oJ2tleXVwJywge1xuICAgIHdvcmtmbG93OiB0aGlzLFxuICAgIGNhbGxiYWNrXG4gIH0sIHRoaXMuZXNjS2V5VXBIYW5kbGVyKTtcbn07XG5cbnByb3RvLnJlZ2lzdGVyRXNjS2V5RXZlbnQgPSBmdW5jdGlvbihjYWxsYmFjayl7XG4gIHRoaXMub24oJ3N0YXJ0JywgKCkgPT4gdGhpcy5iaW5kRXNjS2V5VXAoY2FsbGJhY2spKTtcbiAgdGhpcy5vbignc3RvcCcsICgpID0+IHRoaXMudW5iaW5kRXNjS2V5VXAoKSk7XG59O1xuLy8vLy9cblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0aW5nV29ya2Zsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBBcHBsaWNhdGlvblN0YXRlIH0gPSBnM3dzZGsuY29yZTtcbmNvbnN0IEVkaXRpbmdXb3JrZmxvdyA9IHJlcXVpcmUoJy4vZWRpdGluZ3dvcmtmbG93Jyk7XG5jb25zdCBTZWxlY3RFbGVtZW50c1N0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL3NlbGVjdGVsZW1lbnRzc3RlcCcpO1xuY29uc3QgT3BlbkZvcm1TdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9vcGVuZm9ybXN0ZXAnKTtcblxuZnVuY3Rpb24gRWRpdE11bHRpRmVhdHVyZUF0dHJpYnV0ZXNXb3JrZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMuaGVscE1lc3NhZ2UgPSAnZWRpdGluZy50b29scy51cGRhdGVfbXVsdGlfZmVhdHVyZXMnO1xuICBjb25zdCBzZWxlY3RzdGVwID0gbmV3IFNlbGVjdEVsZW1lbnRzU3RlcCh7XG4gICAgdHlwZTogJ211bHRpcGxlJ1xuICB9KTtcbiAgc2VsZWN0c3RlcC5nZXRUYXNrKCkuc2V0U3RlcHMoe1xuICAgIHNlbGVjdDoge1xuICAgICAgZGVzY3JpcHRpb246IEFwcGxpY2F0aW9uU3RhdGUuaXNtb2JpbGUgPyAnZWRpdGluZy53b3JrZmxvdy5zdGVwcy5zZWxlY3REcmF3Qm94QXRMZWFzdDJGZWF0dXJlJyA6ICdlZGl0aW5nLndvcmtmbG93LnN0ZXBzLnNlbGVjdE11bHRpUG9pbnRTSElGVEF0TGVhc3QyRmVhdHVyZScsXG4gICAgICBidXR0b25uZXh0OiB7XG4gICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICBjb25kaXRpb246KHtmZWF0dXJlcz1bXX0pID0+IGZlYXR1cmVzLmxlbmd0aCA8IDIsXG4gICAgICAgIGRvbmU6ICgpPT57fVxuICAgICAgfSxcbiAgICAgIGRpcmVjdGl2ZTogJ3QtcGx1Z2luJyxcbiAgICAgIGR5bmFtaWM6IDAsXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIG9wdGlvbnMuc3RlcHMgPSBbc2VsZWN0c3RlcCwgbmV3IE9wZW5Gb3JtU3RlcCh7XG4gICAgbXVsdGk6IHRydWVcbiAgfSldO1xuICB0aGlzLnJlZ2lzdGVyRXNjS2V5RXZlbnQoKTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChFZGl0TXVsdGlGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRNdWx0aUZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3c7IiwiY29uc3Qge2luaGVyaXQsIGJhc2V9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgT3BlbkZvcm1TdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9vcGVuZm9ybXN0ZXAnKTtcblxuZnVuY3Rpb24gRWRpdEZlYXR1cmVBdHRyaWJ1dGVzV29ya2Zsb3cob3B0aW9ucz17fSkge1xuICBvcHRpb25zLmhlbHBNZXNzYWdlID0gJ2VkaXRpbmcudG9vbHMudXBkYXRlX2ZlYXR1cmUnO1xuICBjb25zdCBzdGVwID0gbmV3IE9wZW5Gb3JtU3RlcCgpO1xuICBvcHRpb25zLnN0ZXBzID0gW3N0ZXBdO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KEVkaXRGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRGZWF0dXJlQXR0cmlidXRlc1dvcmtmbG93OyIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IE9wZW5Gb3JtU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvb3BlbmZvcm1zdGVwJyk7XG5cbmZ1bmN0aW9uIEVkaXRUYWJsZUZlYXR1cmVXb3JmbG93KG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy5zdGVwcyA9IFtuZXcgT3BlbkZvcm1TdGVwKCldO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KEVkaXRUYWJsZUZlYXR1cmVXb3JmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRUYWJsZUZlYXR1cmVXb3JmbG93OyIsImNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgT3BlblRhYmxlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvb3BlbnRhYmxlc3RlcCcpO1xuXG5mdW5jdGlvbiBFZGl0VGFibGVGZWF0dXJlc1dvcmtmbG93KG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy5zdGVwcyA9IFtuZXcgT3BlblRhYmxlU3RlcCgpXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChFZGl0VGFibGVGZWF0dXJlc1dvcmtmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRUYWJsZUZlYXR1cmVzV29ya2Zsb3c7IiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgTGlua1JlbGF0aW9uU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvbGlua3JlbGF0aW9uc3RlcCcpO1xuXG5mdW5jdGlvbiBMaW5rUmVsYXRpb25Xb3JmbG93KG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy5zdGVwcyA9IFtuZXcgTGlua1JlbGF0aW9uU3RlcCgpXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChMaW5rUmVsYXRpb25Xb3JmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtSZWxhdGlvbldvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBBcHBsaWNhdGlvblN0YXRlIH0gPSBnM3dzZGsuY29yZTtcbmNvbnN0IEVkaXRpbmdXb3JrZmxvdyA9IHJlcXVpcmUoJy4vZWRpdGluZ3dvcmtmbG93Jyk7XG5jb25zdCBTZWxlY3RFbGVtZW50c1N0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL3NlbGVjdGVsZW1lbnRzc3RlcCcpO1xuY29uc3QgTWVyZ2VGZWF0dXJlc1N0ZXAgPSByZXF1aXJlKCcuL3N0ZXBzL21lcmdlZmVhdHVyZXNzdGVwJyk7XG5mdW5jdGlvbiBNZXJnZUZlYXR1cmVzV29ya2Zsb3cob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnR5cGUgPSAnYmJveCc7XG4gIG9wdGlvbnMuaGVscCA9ICdlZGl0aW5nLnN0ZXBzLmhlbHAubWVyZ2UnO1xuICBjb25zdCBzZWxlY3RlbGVtZW50c3N0ZXBzID0gbmV3IFNlbGVjdEVsZW1lbnRzU3RlcChvcHRpb25zLCB0cnVlKTtcbiAgc2VsZWN0ZWxlbWVudHNzdGVwcy5nZXRUYXNrKCkuc2V0U3RlcHMoe1xuICAgIHNlbGVjdDoge1xuICAgICAgZGVzY3JpcHRpb246IEFwcGxpY2F0aW9uU3RhdGUuaXNtb2JpbGUgPyAnZWRpdGluZy53b3JrZmxvdy5zdGVwcy5zZWxlY3REcmF3Qm94JyA6ICdlZGl0aW5nLndvcmtmbG93LnN0ZXBzLnNlbGVjdFNISUZUJyxcbiAgICAgIGRpcmVjdGl2ZTogJ3QtcGx1Z2luJyxcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWVyZ2VmZWF0dXJlc3N0ZXAgPSBuZXcgTWVyZ2VGZWF0dXJlc1N0ZXAob3B0aW9ucywgdHJ1ZSk7XG4gIG1lcmdlZmVhdHVyZXNzdGVwLmdldFRhc2soKS5zZXRTdGVwcyh7XG4gICAgY2hvb3NlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ2VkaXRpbmcud29ya2Zsb3cuc3RlcHMubWVyZ2UnLFxuICAgICAgZGlyZWN0aXZlOiAndC1wbHVnaW4nLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBvcHRpb25zLnN0ZXBzID0gW3NlbGVjdGVsZW1lbnRzc3RlcHMsIG1lcmdlZmVhdHVyZXNzdGVwXTtcbiAgdGhpcy5yZWdpc3RlckVzY0tleUV2ZW50KCk7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoTWVyZ2VGZWF0dXJlc1dvcmtmbG93LCBFZGl0aW5nV29ya2Zsb3cpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lcmdlRmVhdHVyZXNXb3JrZmxvdztcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IFBpY2tGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvcGlja2ZlYXR1cmVzdGVwJyk7XG5jb25zdCBDaG9vc2VGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvY2hvb3NlZmVhdHVyZXN0ZXAnKTtcbmNvbnN0IE1vZGlmeUdlb21ldHJ5VmVydGV4U3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvbW9kaWZ5Z2VvbWV0cnl2ZXJ0ZXhzdGVwJyk7XG5cbmZ1bmN0aW9uIE1vZGlmeUdlb21ldHJ5VmVydGV4V29yZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMuaGVscE1lc3NhZ2UgPSAnZWRpdGluZy50b29scy51cGRhdGVfdmVydGV4JztcbiAgY29uc3QgcGlja3N0ZXAgPSBuZXcgUGlja0ZlYXR1cmVTdGVwKG9wdGlvbnMpO1xuICBjb25zdCBtb2RpZnl2ZXJ0ZXhzdGVwID0gbmV3IE1vZGlmeUdlb21ldHJ5VmVydGV4U3RlcCgpO1xuICBvcHRpb25zLnN0ZXBzID0gW1xuICAgIHBpY2tzdGVwLFxuICAgIG5ldyBDaG9vc2VGZWF0dXJlU3RlcCgpLFxuICBtb2RpZnl2ZXJ0ZXhzdGVwXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5hZGRUb29sc09mVG9vbHMoe1xuICAgIHN0ZXA6IG1vZGlmeXZlcnRleHN0ZXAsXG4gICAgdG9vbHM6WydzbmFwJywgJ21lYXN1cmUnXVxuICB9KVxufVxuXG5pbmhlcml0KE1vZGlmeUdlb21ldHJ5VmVydGV4V29yZmxvdywgRWRpdGluZ1dvcmtmbG93KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RpZnlHZW9tZXRyeVZlcnRleFdvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IFBpY2tGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvcGlja2ZlYXR1cmVzdGVwJyk7XG5jb25zdCBDaG9vc2VGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvY2hvb3NlZmVhdHVyZXN0ZXAnKTtcbmNvbnN0IE1vdmVGZWF0dXJlU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvbW92ZWZlYXR1cmVzdGVwJyk7XG5cbmZ1bmN0aW9uIE1vdmVGZWF0dXJlV29yZmxvdyhvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMuaGVscE1lc3NhZ2UgPSAnZWRpdGluZy50b29scy5tb3ZlX2ZlYXR1cmUnO1xuICBvcHRpb25zLnN0ZXBzID0gW1xuICAgIG5ldyBQaWNrRmVhdHVyZVN0ZXAoKSxcbiAgICBuZXcgQ2hvb3NlRmVhdHVyZVN0ZXAoKSxcbiAgICBuZXcgTW92ZUZlYXR1cmVTdGVwKClcbiAgXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChNb3ZlRmVhdHVyZVdvcmZsb3csIEVkaXRpbmdXb3JrZmxvdyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTW92ZUZlYXR1cmVXb3JmbG93OyIsImNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nV29ya2Zsb3cgPSByZXF1aXJlKCcuL2VkaXRpbmd3b3JrZmxvdycpO1xuY29uc3QgUGlja1Byb2plY3RMYXllckZlYXR1cmVzU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvcGlja3Byb2plY3RsYXllcmZlYXR1cmVzc3RlcCcpO1xuY29uc3QgQ29weUZlYXR1cmVzRnJvbU90aGVyUHJvamVjdExheWVyU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvY29weWZlYXR1cmVzZnJvbW90aGVycHJvamVjdGxheWVyc3RlcCcpO1xuY29uc3QgT3BlbkZvcm1TdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9vcGVuZm9ybXN0ZXAnKTtcblxuZnVuY3Rpb24gU2VsZWN0QW5kQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJXb3JmbG93KG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy5oZWxwID0gJ2VkaXRpbmcuc3RlcHMuaGVscC5jb3B5JztcbiAgb3B0aW9ucy5zdGVwcyA9IFtcbiAgICBuZXcgUGlja1Byb2plY3RMYXllckZlYXR1cmVzU3RlcChvcHRpb25zKSxcbiAgICBuZXcgQ29weUZlYXR1cmVzRnJvbU90aGVyUHJvamVjdExheWVyU3RlcChvcHRpb25zKSxcbiAgICBuZXcgT3BlbkZvcm1TdGVwKG9wdGlvbnMpXG4gIF07XG4gIHRoaXMucmVnaXN0ZXJFc2NLZXlFdmVudCgpO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KFNlbGVjdEFuZENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyV29yZmxvdywgRWRpdGluZ1dvcmtmbG93KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RBbmRDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllcldvcmZsb3c7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1dvcmtmbG93ID0gcmVxdWlyZSgnLi9lZGl0aW5nd29ya2Zsb3cnKTtcbmNvbnN0IFNlbGVjdEVsZW1lbnRzU3RlcCA9IHJlcXVpcmUoJy4vc3RlcHMvc2VsZWN0ZWxlbWVudHNzdGVwJyk7XG5jb25zdCBTcGxpdEZlYXR1cmVTdGVwID0gcmVxdWlyZSgnLi9zdGVwcy9zcGxpdGZlYXR1cmVzdGVwJyk7XG5jb25zdCBBcHBsaWNhdGlvblN0YXRlID0gZzN3c2RrLmNvcmUuQXBwbGljYXRpb25TdGF0ZTtcblxuZnVuY3Rpb24gU3BsaXRGZWF0dXJlc1dvcmZsb3cob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnR5cGUgPSBBcHBsaWNhdGlvblN0YXRlLmlzbW9iaWxlID8gJ3NpbmdsZScgOiAgJ211bHRpcGxlJztcbiAgb3B0aW9ucy5oZWxwID0gJ2VkaXRpbmcuc3RlcHMuaGVscC5zcGxpdCc7XG4gIGNvbnN0IHNlbGVjdGVsZW1lbnRzc3RlcHMgPSBuZXcgU2VsZWN0RWxlbWVudHNTdGVwKG9wdGlvbnMsIHRydWUpO1xuICBzZWxlY3RlbGVtZW50c3N0ZXBzLmdldFRhc2soKS5zZXRTdGVwcyh7XG4gICAgc2VsZWN0OiB7XG4gICAgICBkZXNjcmlwdGlvbjogb3B0aW9ucy50eXBlID09PSAnbXVsdGlwbGUnICA/ICdlZGl0aW5nLndvcmtmbG93LnN0ZXBzLnNlbGVjdFBvaW50U0hJRlQnIDogJ2VkaXRpbmcud29ya2Zsb3cuc3RlcHMuc2VsZWN0UG9pbnQnLFxuICAgICAgZGlyZWN0aXZlOiAndC1wbHVnaW4nLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzcGxpdGZlYXR1cmVzdGVwID0gbmV3IFNwbGl0RmVhdHVyZVN0ZXAob3B0aW9ucywgdHJ1ZSk7XG4gIHNwbGl0ZmVhdHVyZXN0ZXAuZ2V0VGFzaygpLnNldFN0ZXBzKHtcbiAgICBkcmF3X2xpbmU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiAnZWRpdGluZy53b3JrZmxvdy5zdGVwcy5kcmF3X3NwbGl0X2xpbmUnLFxuICAgICAgZGlyZWN0aXZlOiAndC1wbHVnaW4nLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBvcHRpb25zLnN0ZXBzID0gW3NlbGVjdGVsZW1lbnRzc3RlcHMsIHNwbGl0ZmVhdHVyZXN0ZXBdO1xuICB0aGlzLnJlZ2lzdGVyRXNjS2V5RXZlbnQoKTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChTcGxpdEZlYXR1cmVzV29yZmxvdywgRWRpdGluZ1dvcmtmbG93KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcGxpdEZlYXR1cmVzV29yZmxvdztcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSAgPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdTdGVwID0gcmVxdWlyZSgnLi9lZGl0aW5nc3RlcCcpO1xuY29uc3QgQWRkRmVhdHVyZVRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL2FkZGZlYXR1cmV0YXNrJyk7XG5cbmNvbnN0IEFkZEZlYXR1cmVTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgQWRkRmVhdHVyZVRhc2sob3B0aW9ucyk7XG4gIG9wdGlvbnMuaGVscCA9IFwiZWRpdGluZy5zdGVwcy5oZWxwLmRyYXdfbmV3X2ZlYXR1cmVcIjtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKVxufTtcblxuaW5oZXJpdChBZGRGZWF0dXJlU3RlcCwgRWRpdGluZ1N0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkZEZlYXR1cmVTdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBBZGRQYXJ0VG9NdWxpZ2VvbWV0cmllc1Rhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL2FkZHBhcnR0b211bHRpZ2VvbWV0cmllc3Rhc2snKTtcblxuY29uc3QgQWRkUGFydFRvTXVsaWdlb21ldHJpZXNTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgQWRkUGFydFRvTXVsaWdlb21ldHJpZXNUYXNrKG9wdGlvbnMpO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59O1xuXG5pbmhlcml0KEFkZFBhcnRUb011bGlnZW9tZXRyaWVzU3RlcCwgRWRpdGluZ1N0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkZFBhcnRUb011bGlnZW9tZXRyaWVzU3RlcDtcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSAgPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHsgU3RlcCB9ICA9IGczd3Nkay5jb3JlLndvcmtmbG93O1xuY29uc3QgQWRkRmVhdHVyZVRhYmxlVGFzayA9IHJlcXVpcmUoJy4vdGFza3MvYWRkZmVhdHVyZXRhYmxldGFzaycpO1xuXG4vL2NyZWF0byB1bm8gc3RlcCBwZXIgYXByaW9yZSBpbCBmb3JtXG52YXIgQWRkVGFibGVGZWF0dXJlU3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy50YXNrID0gbmV3IEFkZEZlYXR1cmVUYWJsZVRhc2soKTtcbiAgb3B0aW9ucy5oZWxwID0gXCJlZGl0aW5nLnN0ZXBzLmhlbHAubmV3XCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoQWRkVGFibGVGZWF0dXJlU3RlcCwgU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWRkVGFibGVGZWF0dXJlU3RlcDtcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSAgPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHsgU3RlcCB9ICA9IGczd3Nkay5jb3JlLndvcmtmbG93O1xuY29uc3QgQ2hvb3NlRmVhdHVyZVRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL2Nob29zZWZlYXR1cmV0YXNrJyk7XG5cbi8vY3JlYXRvIHVubyBzdGVwIHBlciBhcHJpb3JlIGlsIGZvcm1cbmNvbnN0IENob29zZUZlYXR1cmVTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgQ2hvb3NlRmVhdHVyZVRhc2sob3B0aW9ucyk7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoQ2hvb3NlRmVhdHVyZVN0ZXAsIFN0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENob29zZUZlYXR1cmVTdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBDb25maXJtVGFzayA9IHJlcXVpcmUoJy4vdGFza3MvY29uZmlybXRhc2snKTtcblxuY29uc3QgQ29uZmlybVN0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudGFzayA9IG5ldyBDb25maXJtVGFzayhvcHRpb25zKTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKVxufTtcblxuaW5oZXJpdChDb25maXJtU3RlcCwgRWRpdGluZ1N0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpcm1TdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nU3RlcCA9IHJlcXVpcmUoJy4vZWRpdGluZ3N0ZXAnKTtcbmNvbnN0IFRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL2NvcHlmZWF0dXJlc2Zyb21vdGhlcmxheWVydGFzaycpO1xuXG5jb25zdCBDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllclN0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudGFzayA9IG5ldyBUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLmhlbHAgPSBcImVkaXRpbmcuc3RlcHMuaGVscC5kcmF3X25ld19mZWF0dXJlXCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJTdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nU3RlcCA9IHJlcXVpcmUoJy4vZWRpdGluZ3N0ZXAnKTtcbmNvbnN0IFRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL2NvcHlmZWF0dXJlc2Zyb21vdGhlcnByb2plY3RsYXllcnRhc2snKTtcblxuY29uc3QgQ29weUZlYXR1cmVzRnJvbU90aGVyUHJvamVjdExheWVyU3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy50YXNrID0gbmV3IFRhc2sob3B0aW9ucyk7XG4gIG9wdGlvbnMuaGVscCA9IFwiZWRpdGluZy5zdGVwcy5oZWxwLmRyYXdfbmV3X2ZlYXR1cmVcIjtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKVxufTtcblxuaW5oZXJpdChDb3B5RmVhdHVyZXNGcm9tT3RoZXJQcm9qZWN0TGF5ZXJTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29weUZlYXR1cmVzRnJvbU90aGVyUHJvamVjdExheWVyU3RlcDtcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSAgPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdTdGVwID0gcmVxdWlyZSgnLi9lZGl0aW5nc3RlcCcpO1xuY29uc3QgRGVsZXRlRmVhdHVyZVRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL2RlbGV0ZWZlYXR1cmV0YXNrJyk7XG5cbmNvbnN0IERlbGV0ZUZlYXR1cmVTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgRGVsZXRlRmVhdHVyZVRhc2soKTtcbiAgb3B0aW9ucy5oZWxwID0gXCJlZGl0aW5nLnN0ZXBzLmhlbHAuZG91YmxlX2NsaWNrX2RlbGV0ZVwiO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59O1xuXG5pbmhlcml0KERlbGV0ZUZlYXR1cmVTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlRmVhdHVyZVN0ZXA7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nU3RlcCA9IHJlcXVpcmUoJy4vZWRpdGluZ3N0ZXAnKTtcbmNvbnN0IERlbGV0ZVBhcnRGcm9tTXVsdGlnZW9tZXRyaWVzVGFzayA9IHJlcXVpcmUoJy4vdGFza3MvZGVsZXRlcGFydGZyb21tdWx0aWdlb21ldHJpZXN0YXNrJyk7XG5cbmNvbnN0IERlbGV0ZVBhcnRGcm9tTXVsaWdlb21ldHJpZXNTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgRGVsZXRlUGFydEZyb21NdWx0aWdlb21ldHJpZXNUYXNrKG9wdGlvbnMpO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59O1xuXG5pbmhlcml0KERlbGV0ZVBhcnRGcm9tTXVsaWdlb21ldHJpZXNTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlUGFydEZyb21NdWxpZ2VvbWV0cmllc1N0ZXA7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IFN0ZXAgfSAgPSBnM3dzZGsuY29yZS53b3JrZmxvdztcblxuY29uc3QgRWRpdGluZ1N0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59O1xuXG5pbmhlcml0KEVkaXRpbmdTdGVwLCBTdGVwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0aW5nU3RlcDtcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBHZXRWZXJ0ZXhUYXNrID0gcmVxdWlyZSgnLi90YXNrcy9nZXR2ZXJ0ZXh0YXNrJyk7XG5cbmNvbnN0IEdldFZlcnRleFN0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudGFzayA9IG5ldyBHZXRWZXJ0ZXhUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLmhlbHAgPSBcImVkaXRpbmcuc3RlcHMuaGVscC5zZWxlY3RcIjtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKVxufTtcblxuaW5oZXJpdChHZXRWZXJ0ZXhTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gR2V0VmVydGV4U3RlcDtcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBMaW5rUmVsYXRpb25UYXNrID0gcmVxdWlyZSgnLi90YXNrcy9saW5rcmVsYXRpb250YXNrJyk7XG5cbmNvbnN0IExpbmtSZWxhdGlvblN0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudGFzayA9IG5ldyBMaW5rUmVsYXRpb25UYXNrKCk7XG4gIG9wdGlvbnMuaGVscCA9IFwiZWRpdGluZy5zdGVwcy5oZWxwLnNlbGVjdF9mZWF0dXJlX3RvX3JlbGF0aW9uXCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoTGlua1JlbGF0aW9uU3RlcCwgRWRpdGluZ1N0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtSZWxhdGlvblN0ZXA7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBNZXJnZUZlYXR1cmVzVGFzayA9IHJlcXVpcmUoJy4vdGFza3MvbWVyZ2VmZWF0dXJlc3Rhc2snKTtcblxuY29uc3QgTWVyZ2VGZWF0dXJlU3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy50YXNrID0gbmV3IE1lcmdlRmVhdHVyZXNUYXNrKCk7XG4gIG9wdGlvbnMuaGVscCA9IFwiZWRpdGluZy5zdGVwcy5oZWxwLm1lcmdlXCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoTWVyZ2VGZWF0dXJlU3RlcCwgRWRpdGluZ1N0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lcmdlRmVhdHVyZVN0ZXA7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nU3RlcCA9IHJlcXVpcmUoJy4vZWRpdGluZ3N0ZXAnKTtcbmNvbnN0IE1vZGlmeUdlb21ldHJ5VmVydGV4VGFzayA9IHJlcXVpcmUoJy4vdGFza3MvbW9kaWZ5Z2VvbWV0cnl2ZXJ0ZXh0YXNrJyk7XG5cbmNvbnN0IE1vZGlmeUdlb21ldHJ5VmVydGV4U3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e3NuYXA6IHRydWV9KSB7XG4gIGNvbnN0IHRhc2sgPSBuZXcgTW9kaWZ5R2VvbWV0cnlWZXJ0ZXhUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLnRhc2sgPSB0YXNrO1xuICBvcHRpb25zLmhlbHAgPSBcImVkaXRpbmcuc3RlcHMuaGVscC5lZGl0X2ZlYXR1cmVfdmVydGV4XCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoTW9kaWZ5R2VvbWV0cnlWZXJ0ZXhTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kaWZ5R2VvbWV0cnlWZXJ0ZXhTdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBNb3ZlRmVhdHVyZVRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL21vdmVmZWF0dXJldHRhc2snKTtcblxuY29uc3QgTW92ZUZlYXR1cmVTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgTW92ZUZlYXR1cmVUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLmhlbHAgPSBcImVkaXRpbmcuc3RlcHMuaGVscC5tb3ZlXCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoTW92ZUZlYXR1cmVTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTW92ZUZlYXR1cmVTdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBNb3ZlRWxlbWVudFRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL21vdmVlbGVtZW50c3Rhc2snKTtcblxuY29uc3QgTW92ZUVsZW1lbnRzU3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30sIGNoYWluKSB7XG4gIGNvbnN0IHRhc2sgPSBuZXcgTW92ZUVsZW1lbnRUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLnRhc2sgPSB0YXNrO1xuICBvcHRpb25zLmhlbHAgPSBcImVkaXRpbmcuc3RlcHMuaGVscC5zZWxlY3RfdmVydGV4X3RvX3Bhc3RlXCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoTW92ZUVsZW1lbnRzU3RlcCwgRWRpdGluZ1N0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdmVFbGVtZW50c1N0ZXA7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IFN0ZXAgfSAgPSBnM3dzZGsuY29yZS53b3JrZmxvdztcbmNvbnN0IE9wZW5Gb3JtVGFzayA9IHJlcXVpcmUoJy4vdGFza3Mvb3BlbmZvcm10YXNrJyk7XG5cbi8vY3JlYXRvIHVubyBzdGVwIHBlciBhcHJpb3JlIGlsIGZvcm1cbmNvbnN0IE9wZW5Gb3JtU3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy50YXNrID0gbmV3IE9wZW5Gb3JtVGFzayhvcHRpb25zKTtcbiAgb3B0aW9ucy5oZWxwID0gXCJlZGl0aW5nLnN0ZXBzLmhlbHAuaW5zZXJ0X2F0dHJpYnV0ZXNfZmVhdHVyZVwiO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59O1xuXG5pbmhlcml0KE9wZW5Gb3JtU3RlcCwgU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gT3BlbkZvcm1TdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBTdGVwIH0gID0gZzN3c2RrLmNvcmUud29ya2Zsb3c7XG5jb25zdCBPcGVuVGFibGVUYXNrID0gcmVxdWlyZSgnLi90YXNrcy9vcGVudGFibGV0YXNrJyk7XG5cbi8vY3JlYXRvIHVubyBzdGVwIHBlciBhcHJpb3JlIGlsIGZvcm1cbmNvbnN0IE9wZW5UYWJsZVN0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIG9wdGlvbnMudGFzayA9IG5ldyBPcGVuVGFibGVUYXNrKCk7XG4gIG9wdGlvbnMuaGVscCA9IFwiZWRpdGluZy5zdGVwcy5oZWxwLmVkaXRfdGFibGVcIjtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKVxufTtcblxuaW5oZXJpdChPcGVuVGFibGVTdGVwLCBTdGVwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcGVuVGFibGVTdGVwO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBTdGVwIH0gID0gZzN3c2RrLmNvcmUud29ya2Zsb3c7XG5jb25zdCBQaWNrRmVhdHVyZVRhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL3BpY2tmZWF0dXJldGFzaycpO1xuXG5jb25zdCBQaWNrRmVhdHVyZVN0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9KSB7XG4gIGNvbnN0IHRhc2sgPSBuZXcgUGlja0ZlYXR1cmVUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLnRhc2sgPSB0YXNrIDtcbiAgb3B0aW9ucy5oZWxwID0gXCJlZGl0aW5nLnN0ZXBzLmhlbHAucGlja19mZWF0dXJlXCI7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoUGlja0ZlYXR1cmVTdGVwLCBTdGVwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrRmVhdHVyZVN0ZXA7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IFN0ZXAgfSAgPSBnM3dzZGsuY29yZS53b3JrZmxvdztcbmNvbnN0IFBpY2tQcm9qZWN0TGF5ZXJGZWF0dXJlc1Rhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL3BpY2twcm9qZWN0bGF5ZXJmZWF0dXJlc3Rhc2snKTtcblxuY29uc3QgUGlja1Byb2plY3RMYXllckZlYXR1cmVzU3RlcCA9IGZ1bmN0aW9uKG9wdGlvbnM9e30pIHtcbiAgb3B0aW9ucy50YXNrID0gbmV3IFBpY2tQcm9qZWN0TGF5ZXJGZWF0dXJlc1Rhc2sob3B0aW9ucyk7XG4gIG9wdGlvbnMuaGVscCA9IFwiZWRpdGluZy5zdGVwcy5oZWxwLnBpY2tfZmVhdHVyZVwiO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59O1xuXG5pbmhlcml0KFBpY2tQcm9qZWN0TGF5ZXJGZWF0dXJlc1N0ZXAsIFN0ZXApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBpY2tQcm9qZWN0TGF5ZXJGZWF0dXJlc1N0ZXA7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB0ID0gZzN3c2RrLmNvcmUuaTE4bi50UGx1Z2luO1xuY29uc3QgRWRpdGluZ1N0ZXAgPSByZXF1aXJlKCcuL2VkaXRpbmdzdGVwJyk7XG5jb25zdCBTZWxlY3RFbGVtZW50c1Rhc2sgPSByZXF1aXJlKCcuL3Rhc2tzL3NlbGVjdGVsZW1lbnRzdGFzaycpO1xuXG5jb25zdCBTZWxlY3RFbGVtZW50c1N0ZXAgPSBmdW5jdGlvbihvcHRpb25zPXt9LCBjaGFpbikge1xuICBvcHRpb25zLnRhc2sgPSBuZXcgU2VsZWN0RWxlbWVudHNUYXNrKG9wdGlvbnMpO1xuICBvcHRpb25zLmhlbHAgPSBvcHRpb25zLmhlbHAgfHwgXCJlZGl0aW5nLnN0ZXBzLmhlbHAuc2VsZWN0X2VsZW1lbnRzXCI7XG4gIGNoYWluICYmIHRoaXMub24oJ3J1bicsICgpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgnbmV4dC1zdGVwJywgdChcImVkaXRpbmcuc3RlcHMuaGVscC5zZWxlY3RfZWxlbWVudHNcIikpXG4gICAgfSk7XG4gIGJhc2UodGhpcywgb3B0aW9ucylcbn07XG5cbmluaGVyaXQoU2VsZWN0RWxlbWVudHNTdGVwLCBFZGl0aW5nU3RlcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RWxlbWVudHNTdGVwO1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdTdGVwID0gcmVxdWlyZSgnLi9lZGl0aW5nc3RlcCcpO1xuY29uc3QgU3BsaXRGZWF0dXJlVGFzayA9IHJlcXVpcmUoJy4vdGFza3Mvc3BsaXRmZWF0dXJldGFzaycpO1xuXG5jb25zdCBNb3ZlRWxlbWVudHNTdGVwID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBjb25zdCB0YXNrID0gbmV3IFNwbGl0RmVhdHVyZVRhc2sob3B0aW9ucyk7XG4gIG9wdGlvbnMudGFzayA9IHRhc2s7XG4gIG9wdGlvbnMuaGVscCA9ICcnO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpXG59O1xuXG5pbmhlcml0KE1vdmVFbGVtZW50c1N0ZXAsIEVkaXRpbmdTdGVwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3ZlRWxlbWVudHNTdGVwO1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nVGFzayA9IHJlcXVpcmUoJy4vZWRpdGluZ3Rhc2snKTtcblxuZnVuY3Rpb24gQWRkRmVhdHVyZVRhYmxlVGFzayhvcHRpb25zPXt9KSB7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoQWRkRmVhdHVyZVRhYmxlVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IEFkZEZlYXR1cmVUYWJsZVRhc2sucHJvdG90eXBlO1xuXG5wcm90by5ydW4gPSBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQpIHtcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IGNvbnRleHQuc2Vzc2lvbjtcbiAgY29uc3Qgb3JpZ2luYWxMYXllciA9IGlucHV0cy5sYXllcjtcbiAgY29uc3QgbGF5ZXJJZCA9IG9yaWdpbmFsTGF5ZXIuZ2V0SWQoKTtcbiAgY29uc3QgZWRpdGluZ0xheWVyID0gb3JpZ2luYWxMYXllci5nZXRFZGl0aW5nTGF5ZXIoKTtcbiAgY29uc3QgZmVhdHVyZSA9IGlucHV0cy5mZWF0dXJlcy5sZW5ndGggPyBpbnB1dHMuZmVhdHVyZXNbaW5wdXRzLmZlYXR1cmVzLmxlbmd0aCAtMV0gOiBvcmlnaW5hbExheWVyLmNyZWF0ZU5ld0ZlYXR1cmUoKTtcbiAgZmVhdHVyZS5zZXRUZW1wb3JhcnlJZCgpO1xuICBlZGl0aW5nTGF5ZXIuZ2V0RWRpdGluZ1NvdXJjZSgpLmFkZEZlYXR1cmUoZmVhdHVyZSk7XG4gIHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlKTtcbiAgaW5wdXRzLmZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gIHRoaXMuc2V0Q29udGV4dEdldERlZmF1bHRWYWx1ZSh0cnVlKTtcbiAgZC5yZXNvbHZlKGlucHV0cywgY29udGV4dCk7XG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHt9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQWRkRmVhdHVyZVRhYmxlVGFzaztcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSA9ICBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHtMYXllcn0gPSBnM3dzZGsuY29yZS5sYXllcjtcbmNvbnN0IHtHZW9tZXRyeX0gPSBnM3dzZGsuY29yZS5nZW9tZXRyeTtcbmNvbnN0IHtGZWF0dXJlfSA9IGczd3Nkay5jb3JlLmxheWVyLmZlYXR1cmVzO1xuY29uc3Qge0FyZWFJbnRlcmFjdGlvbiwgTGVuZ3RoSW50ZXJhY3Rpb259ID0gZzN3c2RrLm9sLmludGVyYWN0aW9ucy5tZWFzdXJlO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmZ1bmN0aW9uIEFkZEZlYXR1cmVUYXNrKG9wdGlvbnM9e30pIHtcbiAgdGhpcy5fYWRkID0gb3B0aW9ucy5hZGQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRpb25zLmFkZDtcbiAgdGhpcy5fYnVzeSA9IGZhbHNlO1xuICB0aGlzLmRyYXdJbnRlcmFjdGlvbjtcbiAgdGhpcy5tZWFzZXVyZUludGVyYWN0aW9uO1xuICB0aGlzLmRyYXdpbmdGZWF0dXJlO1xuICB0aGlzLl9zbmFwID0gb3B0aW9ucy5zbmFwID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgdGhpcy5fZmluaXNoQ29uZGl0aW9uID0gb3B0aW9ucy5maW5pc2hDb25kaXRpb24gfHwgKCgpPT50cnVlKTtcbiAgdGhpcy5fY29uZGl0aW9uID0gb3B0aW9ucy5jb25kaXRpb24gfHwgKCgpPT50cnVlKSA7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW58dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICogY2FsbGJhY2sgb2YgcHJlc3NpbmcgZXNjIHRvIHJlbW92ZSBsYXN0IHBvaW50IGRyYXdlZFxuICAgKi9cbiAgdGhpcy5fZGVsS2V5UmVtb3ZlTGFzdFBvaW50ICA9IGV2ZW50ID0+IGV2ZW50LmtleUNvZGUgPT09IDQ2ICYmIHRoaXMucmVtb3ZlTGFzdFBvaW50KCk7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoQWRkRmVhdHVyZVRhc2ssIEVkaXRpbmdUYXNrKTtcblxuY29uc3QgcHJvdG8gPSBBZGRGZWF0dXJlVGFzay5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCBvcmlnaW5hbExheWVyID0gaW5wdXRzLmxheWVyO1xuICBjb25zdCBlZGl0aW5nTGF5ZXIgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdMYXllcigpO1xuICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICBjb25zdCBsYXllcklkID0gb3JpZ2luYWxMYXllci5nZXRJZCgpO1xuICBzd2l0Y2ggKG9yaWdpbmFsTGF5ZXIuZ2V0VHlwZSgpKSB7XG4gICAgY2FzZSBMYXllci5MYXllclR5cGVzLlZFQ1RPUjpcbiAgICAgIGNvbnN0IG9yaWdpbmFsR2VvbWV0cnlUeXBlID0gb3JpZ2luYWxMYXllci5nZXRFZGl0aW5nR2VvbWV0cnlUeXBlKCk7XG4gICAgICB0aGlzLmdlb21ldHJ5VHlwZSA9IEdlb21ldHJ5LmdldE9MR2VvbWV0cnkob3JpZ2luYWxHZW9tZXRyeVR5cGUpO1xuICAgICAgY29uc3Qgc291cmNlID0gZWRpdGluZ0xheWVyLmdldFNvdXJjZSgpO1xuICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG9yaWdpbmFsTGF5ZXIuZ2V0RWRpdGluZ0ZpZWxkcygpO1xuICAgICAgY29uc3QgdGVtcG9yYXJ5U291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcbiAgICAgIHRoaXMuZHJhd0ludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYXcoe1xuICAgICAgICB0eXBlOiB0aGlzLmdlb21ldHJ5VHlwZSxcbiAgICAgICAgc291cmNlOiB0ZW1wb3JhcnlTb3VyY2UsXG4gICAgICAgIGNvbmRpdGlvbjogdGhpcy5fY29uZGl0aW9uLFxuICAgICAgICBmcmVlaGFuZENvbmRpdGlvbjogb2wuZXZlbnRzLmNvbmRpdGlvbi5uZXZlcixcbiAgICAgICAgZmluaXNoQ29uZGl0aW9uOiB0aGlzLl9maW5pc2hDb25kaXRpb25cbiAgICAgIH0pO1xuICAgICAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLmRyYXdJbnRlcmFjdGlvbik7XG4gICAgICB0aGlzLmRyYXdJbnRlcmFjdGlvbi5zZXRBY3RpdmUodHJ1ZSk7XG5cbiAgICAgIHRoaXMuZHJhd0ludGVyYWN0aW9uLm9uKCdkcmF3c3RhcnQnLCAoe2ZlYXR1cmV9KSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd2luZ0ZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fZGVsS2V5UmVtb3ZlTGFzdFBvaW50KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kcmF3SW50ZXJhY3Rpb24ub24oJ2RyYXdlbmQnLCBlID0+IHtcbiAgICAgICAgbGV0IGZlYXR1cmU7XG4gICAgICAgIGlmICh0aGlzLl9hZGQpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzLmZvckVhY2goYXR0cmlidXRlID0+IHtcbiAgICAgICAgICAgIGUuZmVhdHVyZS5zZXQoYXR0cmlidXRlLm5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgICAgICBmZWF0dXJlOiBlLmZlYXR1cmUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZmVhdHVyZS5zZXRUZW1wb3JhcnlJZCgpO1xuICAgICAgICAgIHNvdXJjZS5hZGRGZWF0dXJlKGZlYXR1cmUpO1xuICAgICAgICAgIHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBmZWF0dXJlID0gZS5mZWF0dXJlO1xuICAgICAgICAvLyBzZXQgWiB2YWx1ZXMgYmFzZWQgb24gbGF5ZXIgR2VvbWV0cnlcbiAgICAgICAgZmVhdHVyZSA9IEdlb21ldHJ5LmFkZFpWYWx1ZVRvT0xGZWF0dXJlR2VvbWV0cnkoe1xuICAgICAgICAgIGZlYXR1cmUsXG4gICAgICAgICAgZ2VvbWV0cnlUeXBlOiBvcmlnaW5hbEdlb21ldHJ5VHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ldmFsdWF0ZUdlb21ldHJ5RXhwcmVzc2lvbkZpZWxkKHtcbiAgICAgICAgICBpbnB1dHMsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBmZWF0dXJlXG4gICAgICAgIH0pLmZpbmFsbHkoKCk9PntcbiAgICAgICAgICBpbnB1dHMuZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgICAgICB0aGlzLnNldENvbnRleHRHZXREZWZhdWx0VmFsdWUodHJ1ZSk7XG4gICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2FkZGZlYXR1cmUnLCBmZWF0dXJlKTsgLy8gZW1pdCBldmVudCB0byBnZXQgZnJvbSBzdWJzY3JpYmVyc1xuICAgICAgICAgIGQucmVzb2x2ZShpbnB1dHMpO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB0byBhZGQgTWVhc3VyZVxuICogQHBhcmFtIGdlb21ldHJ5VHlwZVxuICovXG5wcm90by5hZGRNZWFzdXJlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbigpe1xuICBjb25zdCBtYXBQcm9qZWN0aW9uID0gdGhpcy5nZXRNYXBTZXJ2aWNlKCkuZ2V0UHJvamVjdGlvbigpO1xuICBjb25zdCBtZWFzdXJlT3B0aW9ucyA9IHtcbiAgICBwcm9qZWN0aW9uOiBtYXBQcm9qZWN0aW9uLFxuICAgIGRyYXdDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBmZWF0dXJlOiB0aGlzLmRyYXdpbmdGZWF0dXJlXG4gIH07XG4gIGlmIChHZW9tZXRyeS5pc0xpbmVHZW9tZXRyeVR5cGUodGhpcy5nZW9tZXRyeVR5cGUpKVxuICAgIHRoaXMubWVhc3VyZUludGVyYWN0aW9uID0gbmV3IExlbmd0aEludGVyYWN0aW9uKG1lYXN1cmVPcHRpb25zKTtcbiAgZWxzZSBpZiAoR2VvbWV0cnkuaXNQb2x5Z29uR2VvbWV0cnlUeXBlKHRoaXMuZ2VvbWV0cnlUeXBlKSlcbiAgICB0aGlzLm1lYXN1cmVJbnRlcmFjdGlvbiA9IG5ldyBBcmVhSW50ZXJhY3Rpb24obWVhc3VyZU9wdGlvbnMpO1xuICBpZiAodGhpcy5tZWFzdXJlSW50ZXJhY3Rpb24pe1xuICAgIHRoaXMubWVhc3VyZUludGVyYWN0aW9uLnNldEFjdGl2ZSh0cnVlKTtcbiAgICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMubWVhc3VyZUludGVyYWN0aW9uKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgTWVhc3VyZSBJbnRlcmFjdGlvblxuICovXG5wcm90by5yZW1vdmVNZWFzdXJlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbigpe1xuICBpZiAodGhpcy5tZWFzdXJlSW50ZXJhY3Rpb24pIHtcbiAgICB0aGlzLm1lYXN1cmVJbnRlcmFjdGlvbi5jbGVhcigpO1xuICAgIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5tZWFzdXJlSW50ZXJhY3Rpb24pO1xuICAgIHRoaXMubWVhc3VyZUludGVyYWN0aW9uID0gbnVsbDtcbiAgfVxufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuZHJhd0ludGVyYWN0aW9uKTtcbiAgdGhpcy5yZW1vdmVNZWFzdXJlSW50ZXJhY3Rpb24oKTtcbiAgdGhpcy5kcmF3SW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLmRyYXdpbmdGZWF0dXJlID0gbnVsbDtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2RlbEtleVJlbW92ZUxhc3RQb2ludCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8ucmVtb3ZlTGFzdFBvaW50ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmRyYXdJbnRlcmFjdGlvbikge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmRyYXdJbnRlcmFjdGlvbi5yZW1vdmVMYXN0UG9pbnQoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZGRGZWF0dXJlVGFzaztcbiIsImNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmZ1bmN0aW9uIEFkZFBhcnRUb011bGlnZW9tZXRyaWVzVGFzayhvcHRpb25zPXt9KSB7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoQWRkUGFydFRvTXVsaWdlb21ldHJpZXNUYXNrLCBFZGl0aW5nVGFzayk7XG5cbmNvbnN0IHByb3RvID0gQWRkUGFydFRvTXVsaWdlb21ldHJpZXNUYXNrLnByb3RvdHlwZTtcblxucHJvdG8ucnVuID0gZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IHsgbGF5ZXIsIGZlYXR1cmVzIH0gPSBpbnB1dHM7XG4gIGNvbnN0IGxheWVySWQgPSBsYXllci5nZXRJZCgpO1xuICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbMF07XG4gIGNvbnN0IGZlYXR1cmVHZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgY29uc3Qgb3JpZ2luYWxGZWF0dXJlID0gZmVhdHVyZS5jbG9uZSgpO1xuICBmZWF0dXJlR2VvbWV0cnkuc2V0Q29vcmRpbmF0ZXMoWy4uLmZlYXR1cmVHZW9tZXRyeS5nZXRDb29yZGluYXRlcygpLCAuLi5mZWF0dXJlc1sxXS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCldKTtcbiAgLyoqXG4gICAqIGV2YWx1YXRlZCBnZW9tZXRyeSBleHByZXNzaW9uXG4gICAqL1xuICB0aGlzLmV2YWx1YXRlR2VvbWV0cnlFeHByZXNzaW9uRmllbGQoe1xuICAgIGlucHV0cyxcbiAgICBjb250ZXh0LFxuICAgIGZlYXR1cmVcbiAgfSkuZmluYWxseSgoKT0+e1xuICAgIHNlc3Npb24ucHVzaFVwZGF0ZShsYXllcklkLCBmZWF0dXJlLCBvcmlnaW5hbEZlYXR1cmUpO1xuICAgIGlucHV0cy5mZWF0dXJlcyA9IFtmZWF0dXJlXTtcbiAgICBkLnJlc29sdmUoaW5wdXRzKTtcbiAgfSk7XG4gIC8qKlxuICAgKiBlbmQgb2YgZXZhbHVhdGVkXG4gICAqL1xuXG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBZGRQYXJ0VG9NdWxpZ2VvbWV0cmllc1Rhc2s7XG4iLCJjb25zdCB7IGJhc2UsIGluaGVyaXQgfSA9ICBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHsgR1VJIH0gPSBnM3dzZGsuZ3VpO1xuY29uc3QgdCA9IGczd3Nkay5jb3JlLmkxOG4udFBsdWdpbjtcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuY29uc3QgQ2hvb3NlRmVhdHVyZVRvRWRpdENvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL2czdy1lZGl0aW5nLWNvbXBvbmVudHMvY2hvb3NlZmVhdHVyZXRvZWRpdCcpO1xuXG5mdW5jdGlvbiBDb3B5RmVhdHVyZXNGcm9tT3RoZXJMYXllclRhc2sob3B0aW9ucz17fSkge1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyVGFzay5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCBvcmlnaW5hbExheWVyID0gaW5wdXRzLmxheWVyO1xuICBjb25zdCBmZWF0dXJlcyA9IGlucHV0cy5mZWF0dXJlcztcbiAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdGaWVsZHMoKS5mb3JFYWNoKCh7bmFtZSwgbGFiZWx9KSA9PiB7XG4gICAgYXR0cmlidXRlc1tuYW1lXSA9IGxhYmVsXG4gIH0pO1xuICBpZiAoZmVhdHVyZXMubGVuZ3RoID09PSAxKSBkLnJlc29sdmUoaW5wdXRzKTtcbiAgZWxzZSB7XG4gICAgY29uc3QgZmVhdHVyZSA9IFtdO1xuICAgIGNvbnN0IHZ1ZUluc3RhbmNlID0gQ2hvb3NlRmVhdHVyZVRvRWRpdENvbXBvbmVudCh7XG4gICAgICBmZWF0dXJlcyxcbiAgICAgIGZlYXR1cmUsXG4gICAgICBhdHRyaWJ1dGVzXG4gICAgfSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IHZ1ZUluc3RhbmNlLiRtb3VudCgpLiRlbDtcbiAgICBjb25zdCBkaWFsb2cgPSBHVUkuc2hvd01vZGFsRGlhbG9nKHtcbiAgICAgIHRpdGxlOiB0KCdlZGl0aW5nLm1vZGFsLnRvb2xzLmNvcHlmZWF0dXJlZnJvbXByb2plY3RsYXllci50aXRsZScpLFxuICAgICAgY2xhc3NOYW1lOiAnbW9kYWwtbGVmdCcsXG4gICAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgICBtZXNzYWdlLFxuICAgICAgYnV0dG9uczoge1xuICAgICAgICBjYW5jZWw6IHtcbiAgICAgICAgICBsYWJlbDogJ0NhbmNlbCcsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnYnRuLWRhbmdlcicsXG4gICAgICAgICAgY2FsbGJhY2soKXtcbiAgICAgICAgICAgIGQucmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvazoge1xuICAgICAgICAgIGxhYmVsOiAnT2snLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi1zdWNjZXNzJyxcbiAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgaW5wdXRzLmZlYXR1cmVzID0gZmVhdHVyZTtcbiAgICAgICAgICAgIGQucmVzb2x2ZShpbnB1dHMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgZGlhbG9nLmZpbmQoJ2J1dHRvbi5idG4tc3VjY2VzcycpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgdnVlSW5zdGFuY2UuJHdhdGNoKCdmZWF0dXJlJywgZmVhdHVyZSA9PiBkaWFsb2cuZmluZCgnYnV0dG9uLmJ0bi1zdWNjZXNzJykucHJvcCgnZGlzYWJsZWQnLCBmZWF0dXJlID09PSBudWxsKSk7XG4gIH1cbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJUYXNrO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBHVUkgfSA9IGczd3Nkay5ndWk7XG5jb25zdCB7dCwgdFBsdWdpbn0gPSBnM3dzZGsuY29yZS5pMThuO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmNvbnN0IERpYWxvZ3MgPSB7XG4gIGRlbGV0ZToge1xuICAgIGZuYzogZnVuY3Rpb24oaW5wdXRzKSB7XG4gICAgICBsZXQgZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgIGNvbnN0IEVkaXRpbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi4vLi4vLi4vc2VydmljZXMvZWRpdGluZ3NlcnZpY2UnKTtcbiAgICAgIGNvbnN0IGxheWVyID0gaW5wdXRzLmxheWVyO1xuICAgICAgY29uc3QgZWRpdGluZ0xheWVyID0gbGF5ZXIuZ2V0RWRpdGluZ0xheWVyKCk7XG4gICAgICBjb25zdCBmZWF0dXJlID0gaW5wdXRzLmZlYXR1cmVzWzBdO1xuICAgICAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmdldElkKCk7XG4gICAgICBjb25zdCBjaGlsZFJlbGF0aW9ucyA9IGxheWVyLmdldENoaWxkcmVuKCk7XG4gICAgICBjb25zdCByZWxhdGlvbmluZWRpdGluZyA9IGNoaWxkUmVsYXRpb25zLmxlbmd0aCAmJiAgRWRpdGluZ1NlcnZpY2UuX2ZpbHRlclJlbGF0aW9uc0luRWRpdGluZyh7XG4gICAgICAgIGxheWVySWQsXG4gICAgICAgIHJlbGF0aW9uczogbGF5ZXIuZ2V0UmVsYXRpb25zKCkuZ2V0QXJyYXkoKVxuICAgICAgfSkubGVuZ3RoID4gMDtcblxuICAgICAgR1VJLmRpYWxvZy5jb25maXJtKGA8aDQ+JHt0UGx1Z2luKCdlZGl0aW5nLm1lc3NhZ2VzLmRlbGV0ZV9mZWF0dXJlJyl9PC9oND5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJmb250LXNpemU6MS4yZW07XCI+JHsgcmVsYXRpb25pbmVkaXRpbmcgP3RQbHVnaW4oJ2VkaXRpbmcubWVzc2FnZXMuZGVsZXRlX2ZlYXR1cmVfcmVsYXRpb25zJykgOiAnJ308L2Rpdj5gLCByZXN1bHQgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgZWRpdGluZ0xheWVyLmdldFNvdXJjZSgpLnJlbW92ZUZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgRWRpdGluZ1NlcnZpY2UucmVtb3ZlTGF5ZXJVbmlxdWVGaWVsZFZhbHVlc0Zyb21GZWF0dXJlKHtcbiAgICAgICAgICAgIGxheWVySWQsXG4gICAgICAgICAgICBmZWF0dXJlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZC5yZXNvbHZlKGlucHV0cylcbiAgICAgICAgfSAgZWxzZSAgZC5yZWplY3QoaW5wdXRzKTtcblxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZC5wcm9taXNlKCk7XG4gICAgfVxuICB9LFxuICBjb21taXQ6IHtcbiAgICBmbmMoaW5wdXRzKSB7XG4gICAgICBsZXQgZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgIGxldCBjbG9zZSA9IGlucHV0cy5jbG9zZTtcbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSB7XG4gICAgICAgIFNBVkU6IHtcbiAgICAgICAgICBsYWJlbDogdChcInNhdmVcIiksXG4gICAgICAgICAgY2xhc3NOYW1lOiBcImJ0bi1zdWNjZXNzXCIsXG4gICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGQucmVzb2x2ZShpbnB1dHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgQ0FOQ0VMOiB7XG4gICAgICAgICAgbGFiZWw6IGNsb3NlID8gdChcImV4aXRub3NhdmVcIikgOiB0KFwiYW5udWxcIiksXG4gICAgICAgICAgY2xhc3NOYW1lOiBcImJ0bi1kYW5nZXJcIixcbiAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZC5yZWplY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAoY2xvc2UpIHtcbiAgICAgICAgYnV0dG9ucy5DTE9TRU1PREFMID0ge1xuICAgICAgICAgIGxhYmVsOiAgdChcImFubnVsXCIpLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJidG4tcHJpbWFyeVwiLFxuICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkaWFsb2cubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIE5PVyBJIEhBVkUgVE8gSU1QTEVNRU5UIFdIQVQgSEFQUEVORCBJRCBOTyBBQ1RJT04gSEFQUEVORFxuICAgICAgY29uc3QgZGlhbG9nID0gR1VJLmRpYWxvZy5kaWFsb2coe1xuICAgICAgICBtZXNzYWdlOiBpbnB1dHMubWVzc2FnZSxcbiAgICAgICAgdGl0bGU6IHRQbHVnaW4oXCJlZGl0aW5nLm1lc3NhZ2VzLmNvbW1pdF9mZWF0dXJlXCIpICsgXCIgXCIgK2lucHV0cy5sYXllci5nZXROYW1lKCkgKyBcIj9cIixcbiAgICAgICAgYnV0dG9uc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZC5wcm9taXNlKClcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIENvbmZpcm1UYXNrKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlIHx8IFwiZGVmYXVsdFwiO1xuICB0aGlzLl9kaWFsb2cgPSBEaWFsb2dzW3R5cGVdO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KENvbmZpcm1UYXNrLCBFZGl0aW5nVGFzayk7XG5cbmNvbnN0IHByb3RvID0gQ29uZmlybVRhc2sucHJvdG90eXBlO1xuXG5wcm90by5ydW4gPSBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQpIHtcbiAgY29uc3QgcHJvbWlzZSA9IHRoaXMuX2RpYWxvZy5mbmMoaW5wdXRzLCBjb250ZXh0KTtcbiAgaW5wdXRzLmZlYXR1cmVzICYmIHRoaXMuc2V0QW5kVW5zZXRTZWxlY3RlZEZlYXR1cmVzU3R5bGUoe1xuICAgIHByb21pc2VcbiAgfSk7XG4gIHJldHVybiBwcm9taXNlO1xufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpcm1UYXNrO1xuIiwiY29uc3Qge0czV19GSUR9ID0gZzN3c2RrLmNvbnN0YW50O1xuY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSAgZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHQgPSBnM3dzZGsuY29yZS5pMThuLnRQbHVnaW47XG5jb25zdCB7IEZlYXR1cmUgfSA9IGczd3Nkay5jb3JlLmxheWVyLmZlYXR1cmVzO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5jb25zdCBTZWxlY3RDb3B5RmVhdHVyZXNGb3JtT3RoZXJMYXllcnNDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9nM3ctZWRpdGluZy1jb21wb25lbnRzL3NlbGVjdGNvcHlvdGhlcmxheWVyc2ZlYXR1cmVzJyk7XG5cbmZ1bmN0aW9uIENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyVGFzayhvcHRpb25zPXt9KSB7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJUYXNrLCBFZGl0aW5nVGFzayk7XG5cbmNvbnN0IHByb3RvID0gQ29weUZlYXR1cmVzRnJvbU90aGVyTGF5ZXJUYXNrLnByb3RvdHlwZTtcblxucHJvdG8ucnVuID0gZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IG9yaWdpbmFsTGF5ZXIgPSBpbnB1dHMubGF5ZXI7XG4gIGNvbnN0IGdlb21ldHJ5VHlwZSA9IG9yaWdpbmFsTGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCk7XG4gIGNvbnN0IGxheWVySWQgPSBvcmlnaW5hbExheWVyLmdldElkKCk7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdGaWVsZHMoKS5maWx0ZXIoYXR0cmlidXRlID0+ICFhdHRyaWJ1dGUucGspO1xuICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICBjb25zdCBlZGl0aW5nTGF5ZXIgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdMYXllcigpO1xuICBjb25zdCBzb3VyY2UgPSBlZGl0aW5nTGF5ZXIuZ2V0U291cmNlKCk7XG4gIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5nZXRGZWF0dXJlc0Zyb21TZWxlY3Rpb25GZWF0dXJlcyh7XG4gICAgbGF5ZXJJZCxcbiAgICBnZW9tZXRyeVR5cGVcbiAgfSk7XG4gIGNvbnN0IHNlbGVjdGVkRmVhdHVyZXMgPSBbXTtcbiAgY29uc3QgdnVlSW5zdGFuY2UgPSBTZWxlY3RDb3B5RmVhdHVyZXNGb3JtT3RoZXJMYXllcnNDb21wb25lbnQoe1xuICAgIGZlYXR1cmVzLFxuICAgIHNlbGVjdGVkRmVhdHVyZXNcbiAgfSk7XG4gIGNvbnN0IG1lc3NhZ2UgPSB2dWVJbnN0YW5jZS4kbW91bnQoKS4kZWw7XG4gIGNvbnN0IGRpYWxvZyA9IEdVSS5zaG93TW9kYWxEaWFsb2coe1xuICAgIHRpdGxlOiB0KCdlZGl0aW5nLm1vZGFsLnRvb2xzLmNvcHlmZWF0dXJlZnJvbW90aGVybGF5ZXIudGl0bGUnKSxcbiAgICBjbGFzc05hbWU6ICdtb2RhbC1sZWZ0JyxcbiAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgbWVzc2FnZSxcbiAgICBidXR0b25zOiB7XG4gICAgICBjYW5jZWw6IHtcbiAgICAgICAgbGFiZWw6ICdDYW5jZWwnLFxuICAgICAgICBjbGFzc05hbWU6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgY2FsbGJhY2soKXtcbiAgICAgICAgICBkLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2s6IHtcbiAgICAgICAgbGFiZWw6ICdPaycsXG4gICAgICAgIGNsYXNzTmFtZTogJ2J0bi1zdWNjZXNzJyxcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IFtdO1xuICAgICAgICAgIGxldCBpc1RoZXJlRW1wdHlGaWVsZFJlcXVpcmVkTm90RGVmaW5lZCA9IGZhbHNlO1xuICAgICAgICAgIGNvbnN0IHByb21pc2VzRmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICBzZWxlY3RlZEZlYXR1cmVzLmZvckVhY2goc2VsZWN0ZWRGZWF0dXJlID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogY2hlY2sgaWYgbGF5ZXIgYmVsb25nIHRvIHByb2plY3Qgb3Igbm90XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuZ2V0UHJvamVjdExheWVyQnlJZChzZWxlY3RlZEZlYXR1cmUuX19sYXllcklkKSkge1xuICAgICAgICAgICAgICBwcm9taXNlc0ZlYXR1cmVzLnB1c2godGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldFByb2plY3RMYXllckZlYXR1cmVCeUlkKHtcbiAgICAgICAgICAgICAgICBsYXllcklkOiBzZWxlY3RlZEZlYXR1cmUuX19sYXllcklkLFxuICAgICAgICAgICAgICAgIGZpZDogc2VsZWN0ZWRGZWF0dXJlLmdldChHM1dfRklEKVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm9taXNlc0ZlYXR1cmVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHNlbGVjdGVkRmVhdHVyZS5nZXRQcm9wZXJ0aWVzKClcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBmZWF0dXJlUHJvbWlzZXMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXNGZWF0dXJlcyk7XG4gICAgICAgICAgZmVhdHVyZVByb21pc2VzLmZvckVhY2goKHtzdGF0dXMsIHZhbHVlOmxheWVyRmVhdHVyZX0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSBcImZ1bGZpbGxlZFwiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRmVhdHVyZSA9IHNlbGVjdGVkRmVhdHVyZXNbaW5kZXhdO1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmZvckVhY2goKHtuYW1lLCB2YWxpZGF0ZToge3JlcXVpcmVkPWZhbHNlfX0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGxheWVyRmVhdHVyZS5wcm9wZXJ0aWVzW25hbWVdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgaXNUaGVyZUVtcHR5RmllbGRSZXF1aXJlZE5vdERlZmluZWQgPSBpc1RoZXJlRW1wdHlGaWVsZFJlcXVpcmVkTm90RGVmaW5lZCB8fCAodmFsdWUgPT09IG51bGwgJiYgcmVxdWlyZWQpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkRmVhdHVyZS5zZXQobmFtZSwgdmFsdWUgKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgZmVhdHVyZTogc2VsZWN0ZWRGZWF0dXJlLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IGF0dHJpYnV0ZXMubWFwKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUubmFtZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuc2V0VGVtcG9yYXJ5SWQoKTtcbiAgICAgICAgICAgICAgc291cmNlLmFkZEZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICAgIHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCAmJiBmZWF0dXJlcy5sZW5ndGggPT09IDEpIGlucHV0cy5mZWF0dXJlcy5wdXNoKGZlYXR1cmVzWzBdKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlzVGhlcmVFbXB0eUZpZWxkUmVxdWlyZWROb3REZWZpbmVkICYmIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdwbHVnaW5zLmVkaXRpbmcubWVzc2FnZXMuY29weV9hbmRfcGFzdGVfZnJvbV9vdGhlcl9sYXllcl9tYW5kYXRvcnlfZmllbGRzJyxcbiAgICAgICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbnB1dHMuZmVhdHVyZXMucHVzaChmZWF0dXJlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PiB0aGlzLmZpcmVFdmVudCgnYWRkZmVhdHVyZScsIGZlYXR1cmUpKTtcbiAgICAgICAgICBkLnJlc29sdmUoaW5wdXRzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgZGlhbG9nLmZpbmQoJ2J1dHRvbi5idG4tc3VjY2VzcycpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gIHZ1ZUluc3RhbmNlLiR3YXRjaCgnc2VsZWN0ZWRGZWF0dXJlcycsIGZlYXR1cmVzID0+IGRpYWxvZy5maW5kKCdidXR0b24uYnRuLXN1Y2Nlc3MnKS5wcm9wKCdkaXNhYmxlZCcsIGZlYXR1cmVzLmxlbmd0aCA9PT0gMCkpO1xuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IENvcHlGZWF0dXJlc0Zyb21PdGhlckxheWVyVGFzaztcbiIsImNvbnN0IHtHM1dfRklEfSA9IGczd3Nkay5jb25zdGFudDtcbmNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ID0gIGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBHVUkgfSA9IGczd3Nkay5ndWk7XG5jb25zdCB0ID0gZzN3c2RrLmNvcmUuaTE4bi50UGx1Z2luO1xuY29uc3QgeyBGZWF0dXJlIH0gPSBnM3dzZGsuY29yZS5sYXllci5mZWF0dXJlcztcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuY29uc3QgU2VsZWN0Q29weUZlYXR1cmVzRm9ybU90aGVyUHJvamVjdExheWVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vLi4vZzN3LWVkaXRpbmctY29tcG9uZW50cy9zZWxlY3Rjb3B5b3RoZXJwcm9qZWN0bGF5ZXJmZWF0dXJlcycpO1xuXG5mdW5jdGlvbiBDb3B5RmVhdHVyZXNGcm9tT3RoZXJQcm9qZWN0TGF5ZXJUYXNrKG9wdGlvbnM9e30pIHtcbiAgY29uc3Qge2NvcHlMYXllciwgZXh0ZXJuYWwsIGlzVmVjdG9yfSA9IG9wdGlvbnM7XG4gIHRoaXMuY29weUxheWVyID0gY29weUxheWVyO1xuICB0aGlzLmV4dGVybmFsID0gZXh0ZXJuYWw7XG4gIHRoaXMuaXNWZWN0b3IgPSBpc1ZlY3RvcjtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChDb3B5RmVhdHVyZXNGcm9tT3RoZXJQcm9qZWN0TGF5ZXJUYXNrLCBFZGl0aW5nVGFzayk7XG5cbmNvbnN0IHByb3RvID0gQ29weUZlYXR1cmVzRnJvbU90aGVyUHJvamVjdExheWVyVGFzay5wcm90b3R5cGU7XG5cblxucHJvdG8ucnVuID0gZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IHtmZWF0dXJlcywgbGF5ZXI6b3JpZ2luYWxMYXllcn0gPSBpbnB1dHM7XG4gIGNvbnN0IGxheWVySWQgPSBvcmlnaW5hbExheWVyLmdldElkKCk7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdGaWVsZHMoKS5maWx0ZXIoYXR0cmlidXRlID0+ICFhdHRyaWJ1dGUucGspO1xuICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICBjb25zdCBlZGl0aW5nTGF5ZXIgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdMYXllcigpO1xuICBjb25zdCBzb3VyY2UgPSBlZGl0aW5nTGF5ZXIuZ2V0U291cmNlKCk7XG4gIGNvbnN0IHNlbGVjdGVkRmVhdHVyZXMgPSBbXTtcbiAgY29uc3QgdnVlSW5zdGFuY2UgPSBTZWxlY3RDb3B5RmVhdHVyZXNGb3JtT3RoZXJQcm9qZWN0TGF5ZXJDb21wb25lbnQoe1xuICAgIGV4dGVybmFsOiB0aGlzLmV4dGVybmFsLFxuICAgIGxheWVyOiB0aGlzLmNvcHlMYXllcixcbiAgICBmZWF0dXJlcyxcbiAgICBzZWxlY3RlZEZlYXR1cmVzXG4gIH0pO1xuICBjb25zdCBtZXNzYWdlID0gdnVlSW5zdGFuY2UuJG1vdW50KCkuJGVsO1xuICBjb25zdCBkaWFsb2cgPSBHVUkuc2hvd01vZGFsRGlhbG9nKHtcbiAgICB0aXRsZTogdCgnZWRpdGluZy5tb2RhbC50b29scy5jb3B5ZmVhdHVyZWZyb21wcm9qZWN0bGF5ZXIudGl0bGUnKSxcbiAgICBjbGFzc05hbWU6ICdtb2RhbC1sZWZ0JyxcbiAgICBjbG9zZUJ1dHRvbjogZmFsc2UsXG4gICAgbWVzc2FnZSxcbiAgICBidXR0b25zOiB7XG4gICAgICBjYW5jZWw6IHtcbiAgICAgICAgbGFiZWw6ICdDYW5jZWwnLFxuICAgICAgICBjbGFzc05hbWU6ICdidG4tZGFuZ2VyJyxcbiAgICAgICAgY2FsbGJhY2soKXtcbiAgICAgICAgICBkLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2s6IHtcbiAgICAgICAgbGFiZWw6ICdPaycsXG4gICAgICAgIGNsYXNzTmFtZTogJ2J0bi1zdWNjZXNzJyxcbiAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IFtdO1xuICAgICAgICAgIGxldCBpc1RoZXJlRW1wdHlGaWVsZFJlcXVpcmVkTm90RGVmaW5lZCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChzZWxlY3RlZEZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlID0gc2VsZWN0ZWRGZWF0dXJlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUZlYXR1cmVXaXRoUHJvcGVydGllc09mU2VsZWN0ZWRGZWF0dXJlID0gcHJvcGVydGllcyA9PiB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXMuZm9yRWFjaCgoe25hbWUsIHZhbGlkYXRlOiB7cmVxdWlyZWQ9ZmFsc2V9fSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydGllc1tuYW1lXSB8fCBudWxsO1xuICAgICAgICAgICAgICAgIGlzVGhlcmVFbXB0eUZpZWxkUmVxdWlyZWROb3REZWZpbmVkID0gaXNUaGVyZUVtcHR5RmllbGRSZXF1aXJlZE5vdERlZmluZWQgfHwgKHZhbHVlID09PSBudWxsICYmIHJlcXVpcmVkKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZlYXR1cmUuc2V0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSBuZXcgRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgZmVhdHVyZTogc2VsZWN0ZWRGZWF0dXJlLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IGF0dHJpYnV0ZXMubWFwKGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUubmFtZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGZlYXR1cmUuc2V0VGVtcG9yYXJ5SWQoKTtcbiAgICAgICAgICAgICAgc291cmNlLmFkZEZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICAgIHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlLCBmYWxzZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gY2FzZSB2ZWN0b3IgbGF5ZXJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmVjdG9yKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmV4dGVybmFsKVxuICAgICAgICAgICAgICAgIGNyZWF0ZUZlYXR1cmVXaXRoUHJvcGVydGllc09mU2VsZWN0ZWRGZWF0dXJlKHNlbGVjdGVkRmVhdHVyZS5nZXRQcm9wZXJ0aWVzKCkpO1xuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJQcm9qZWN0RmVhdHVyZSA9IGF3YWl0IHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5nZXRQcm9qZWN0TGF5ZXJGZWF0dXJlQnlJZCh7XG4gICAgICAgICAgICAgICAgICAgIGxheWVySWQ6IHRoaXMuY29weUxheWVyLmdldElkKCksXG4gICAgICAgICAgICAgICAgICAgIGZpZDogc2VsZWN0ZWRGZWF0dXJlLmdldChHM1dfRklEKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJQcm9qZWN0RmVhdHVyZSlcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmVhdHVyZVdpdGhQcm9wZXJ0aWVzT2ZTZWxlY3RlZEZlYXR1cmUobGF5ZXJQcm9qZWN0RmVhdHVyZS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGVycil7fVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL1RPRE8gY2FzZSBhbHBoYW51bWVyaWMgbGF5ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCAmJiBmZWF0dXJlcy5sZW5ndGggPT09IDEpIGlucHV0cy5mZWF0dXJlcy5wdXNoKGZlYXR1cmVzWzBdKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlzVGhlcmVFbXB0eUZpZWxkUmVxdWlyZWROb3REZWZpbmVkICYmIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdwbHVnaW5zLmVkaXRpbmcubWVzc2FnZXMuY29weV9hbmRfcGFzdGVfZnJvbV9vdGhlcl9sYXllcl9tYW5kYXRvcnlfZmllbGRzJyxcbiAgICAgICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbnB1dHMuZmVhdHVyZXMucHVzaChmZWF0dXJlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PiB0aGlzLmZpcmVFdmVudCgnYWRkZmVhdHVyZScsIGZlYXR1cmUpKTtcbiAgICAgICAgICBkLnJlc29sdmUoaW5wdXRzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgZGlhbG9nLmZpbmQoJ2J1dHRvbi5idG4tc3VjY2VzcycpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gIHZ1ZUluc3RhbmNlLiR3YXRjaCgnc2VsZWN0ZWRGZWF0dXJlcycsIGZlYXR1cmVzID0+IGRpYWxvZy5maW5kKCdidXR0b24uYnRuLXN1Y2Nlc3MnKS5wcm9wKCdkaXNhYmxlZCcsIGZlYXR1cmVzLmxlbmd0aCA9PT0gMCkpO1xuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb3B5RmVhdHVyZXNGcm9tT3RoZXJQcm9qZWN0TGF5ZXJUYXNrO1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nVGFzayA9IHJlcXVpcmUoJy4vZWRpdGluZ3Rhc2snKTtcblxuZnVuY3Rpb24gRGVsZXRlRmVhdHVyZVRhc2sob3B0aW9ucykge1xuICB0aGlzLmRyYXdJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9uID0gbnVsbDtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChEZWxldGVGZWF0dXJlVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IERlbGV0ZUZlYXR1cmVUYXNrLnByb3RvdHlwZTtcblxuXG5wcm90by5ydW4gPSBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQpIHtcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3Qgb3JpZ2luYUxheWVyID0gaW5wdXRzLmxheWVyO1xuICBjb25zdCBsYXllcklkID0gb3JpZ2luYUxheWVyLmdldElkKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBjb250ZXh0LnNlc3Npb247XG4gIGNvbnN0IGZlYXR1cmUgPSBpbnB1dHMuZmVhdHVyZXNbMF07XG4gIGNvbnN0IEVkaXRpbmdTZXJ2aWNlID0gcmVxdWlyZSgnLi4vLi4vLi4vc2VydmljZXMvZWRpdGluZ3NlcnZpY2UnKTtcbiAgY29uc3QgUmVsYXRpb25TZXJ2aWNlID0gcmVxdWlyZSgnLi4vLi4vLi4vc2VydmljZXMvcmVsYXRpb25zZXJ2aWNlJyk7XG4gIGNvbnN0IHJlbGF0aW9ucyA9IEVkaXRpbmdTZXJ2aWNlLl9maWx0ZXJSZWxhdGlvbnNJbkVkaXRpbmcoe1xuICAgIGxheWVySWQsXG4gICAgcmVsYXRpb25zOiBvcmlnaW5hTGF5ZXIuZ2V0UmVsYXRpb25zKCkgPyBvcmlnaW5hTGF5ZXIuZ2V0UmVsYXRpb25zKCkuZ2V0QXJyYXkoKSA6IFtdXG4gIH0pLmZpbHRlcihyZWxhdGlvbiA9PiB7XG4gICAgY29uc3QgcmVsYXRpb25JZCA9IEVkaXRpbmdTZXJ2aWNlLl9nZXRSZWxhdGlvbklkKHtcbiAgICAgIGxheWVySWQsXG4gICAgICByZWxhdGlvblxuICAgIH0pO1xuICAgIGNvbnN0IHJlbGF0aW9uTGF5ZXIgPSBFZGl0aW5nU2VydmljZS5nZXRMYXllckJ5SWQocmVsYXRpb25JZCk7XG4gICAgY29uc3Qge293bkZpZWxkfSA9IEVkaXRpbmdTZXJ2aWNlLl9nZXRSZWxhdGlvbkZpZWxkc0Zyb21SZWxhdGlvbih7XG4gICAgICBsYXllcklkOiByZWxhdGlvbklkLFxuICAgICAgcmVsYXRpb25cbiAgICB9KTtcbiAgICBjb25zdCBmaWVsZCA9IHJlbGF0aW9uTGF5ZXIuZ2V0RWRpdGluZ0ZpZWxkcygpLmZpbmQoKGZpZWxkKSA9PiB7XG4gICAgICByZXR1cm4gZmllbGQubmFtZSA9PT0gb3duRmllbGQ7XG4gICAgfSk7XG4gICAgcmV0dXJuICFmaWVsZC52YWxpZGF0ZS5yZXF1aXJlZDtcbiAgfSk7XG4gIGNvbnN0IHByb21pc2UgPSByZWxhdGlvbnMubGVuZ3RoID8gRWRpdGluZ1NlcnZpY2UuZ2V0TGF5ZXJzRGVwZW5kZW5jeUZlYXR1cmVzKGxheWVySWQsIHtcbiAgICBmZWF0dXJlLFxuICAgIHJlbGF0aW9uc1xuICB9KSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgIGNvbnN0IHJlbGF0aW9uc0luRWRpdGluZyA9IEVkaXRpbmdTZXJ2aWNlLmdldFJlbGF0aW9uc0luRWRpdGluZyh7XG4gICAgICBsYXllcklkLFxuICAgICAgcmVsYXRpb25zLFxuICAgICAgZmVhdHVyZSxcbiAgICB9KTtcbiAgICBpbnB1dHMuZmVhdHVyZXMgPSBbZmVhdHVyZV07XG4gICAgcmVsYXRpb25zSW5FZGl0aW5nLmZvckVhY2goKHJlbGF0aW9uSW5FZGl0aW5nKSA9PiB7XG4gICAgICBjb25zdCB7cmVsYXRpb24sIHJlbGF0aW9uc30gPSByZWxhdGlvbkluRWRpdGluZztcbiAgICAgIGNvbnN0IHJlbGF0aW9uU2VydmljZSA9IG5ldyBSZWxhdGlvblNlcnZpY2UobGF5ZXJJZCwge1xuICAgICAgICByZWxhdGlvbixcbiAgICAgICAgcmVsYXRpb25zXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJlbGF0aW9uc0xlbmd0aCA9IHJlbGF0aW9ucy5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVsYXRpb25zTGVuZ3RoIDsgaW5kZXgrKykge1xuICAgICAgICByZWxhdGlvblNlcnZpY2UudW5saW5rUmVsYXRpb24oMCwgZmFsc2UpXG4gICAgICB9XG4gICAgfSk7XG4gICAgc2Vzc2lvbi5wdXNoRGVsZXRlKGxheWVySWQsIGZlYXR1cmUpO1xuICAgIGQucmVzb2x2ZShpbnB1dHMpO1xuICB9KTtcblxuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVzb2x2ZSh0cnVlKTtcbiAgfSlcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEZWxldGVGZWF0dXJlVGFzaztcbiIsImNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgeyBtdWx0aUdlb21ldHJ5VG9TaW5nbGVHZW9tZXRyaWVzLCBzaW5nbGVHZW9tZXRyaWVzVG9NdWx0aUdlb21ldHJ5IH0gPSBnM3dzZGsuY29yZS5nZW91dGlscztcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuXG5mdW5jdGlvbiBEZWxldGVQYXJ0VG9NdWxpZ2VvbWV0cmllc1Rhc2sob3B0aW9ucz17fSkge1xuICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24gPSBudWxsO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KERlbGV0ZVBhcnRUb011bGlnZW9tZXRyaWVzVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IERlbGV0ZVBhcnRUb011bGlnZW9tZXRyaWVzVGFzay5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCBvcmlnaW5hTGF5ZXIgPSBpbnB1dHMubGF5ZXI7XG4gIGNvbnN0IGVkaXRpbmdMYXllciA9IGlucHV0cy5sYXllci5nZXRFZGl0aW5nTGF5ZXIoKTtcbiAgY29uc3QgbGF5ZXJJZCA9IG9yaWdpbmFMYXllci5nZXRJZCgpO1xuICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICBjb25zdCB7ZmVhdHVyZXMsIGNvb3JkaW5hdGV9ID0gaW5wdXRzO1xuICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbMF07XG4gIGNvbnN0IG9yaWdpbmFsRmVhdHVyZSA9IGZlYXR1cmUuY2xvbmUoKTtcbiAgY29uc3QgZ2VvbWV0cnkgPSBmZWF0dXJlLmdldEdlb21ldHJ5KCk7XG4gIGNvbnN0IGdlb21ldHJpZXMgPSBtdWx0aUdlb21ldHJ5VG9TaW5nbGVHZW9tZXRyaWVzKGdlb21ldHJ5KTtcbiAgY29uc3Qgc291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgIGZlYXR1cmVzOiBnZW9tZXRyaWVzLm1hcChnZW9tZXRyeSA9PiBuZXcgb2wuRmVhdHVyZShnZW9tZXRyeSkpXG4gIH0pO1xuICBjb25zdCBtYXAgPSB0aGlzLmdldE1hcCgpO1xuICBjb25zdCBwaXhlbCA9IG1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKGNvb3JkaW5hdGUpO1xuICBsZXQgdGVtcExheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgc291cmNlLFxuICAgIHN0eWxlOiBlZGl0aW5nTGF5ZXIuZ2V0U3R5bGUoKVxuICB9KTtcbiAgbWFwLmFkZExheWVyKHRlbXBMYXllcik7XG4gIG1hcC5vbmNlKCdwb3N0cmVuZGVyJywgZnVuY3Rpb24oKXtcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICB0aGlzLmZvckVhY2hGZWF0dXJlQXRQaXhlbChwaXhlbCwgX2ZlYXR1cmUgPT4ge1xuICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICBzb3VyY2UucmVtb3ZlRmVhdHVyZShfZmVhdHVyZSk7XG4gICAgICAgIGlmIChzb3VyY2UuZ2V0RmVhdHVyZXMoKS5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBuZXdHZW9tZXRyeSA9IHNpbmdsZUdlb21ldHJpZXNUb011bHRpR2VvbWV0cnkoc291cmNlLmdldEZlYXR1cmVzKCkubWFwKGZlYXR1cmUgPT4gZmVhdHVyZS5nZXRHZW9tZXRyeSgpKSk7XG4gICAgICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShuZXdHZW9tZXRyeSk7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogZXZhbHVhdGVkIGdlb21ldHJ5IGV4cHJlc3Npb25cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLmV2YWx1YXRlR2VvbWV0cnlFeHByZXNzaW9uRmllbGQoe1xuICAgICAgICAgICAgaW5wdXRzLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGZlYXR1cmVcbiAgICAgICAgICB9KS5maW5hbGx5KCgpPT57XG4gICAgICAgICAgICBzZXNzaW9uLnB1c2hVcGRhdGUobGF5ZXJJZCwgZmVhdHVyZSwgb3JpZ2luYWxGZWF0dXJlKTtcbiAgICAgICAgICAgIGQucmVzb2x2ZShpbnB1dHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIGVuZCBvZiBldmFsdWF0ZWRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWRpdGluZ0xheWVyLmdldFNvdXJjZSgpLnJlbW92ZUZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICBzZXNzaW9uLnB1c2hEZWxldGUobGF5ZXJJZCwgZmVhdHVyZSk7XG4gICAgICAgICAgICBkLnJlc29sdmUoaW5wdXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsYXllckZpbHRlcihsYXllcil7XG4gICAgICAgICAgcmV0dXJuIGxheWVyID09PSB0ZW1wTGF5ZXJcbiAgICAgICAgfSxcbiAgICAgICAgaGl0VG9sZXJhbmNlOiAxXG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLnJlbW92ZUxheWVyKHRlbXBMYXllcik7XG4gICAgdGVtcExheWVyID0gbnVsbDtcbiAgfSk7XG4gIHJldHVybiBkLnByb21pc2UoKVxufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge307XG5cbm1vZHVsZS5leHBvcnRzID0gRGVsZXRlUGFydFRvTXVsaWdlb21ldHJpZXNUYXNrO1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHsgR2VvbWV0cnkgfSA9IGczd3Nkay5jb3JlLmdlb21ldHJ5O1xuY29uc3Qge1xuICBjb252ZXJ0U2luZ2xlTXVsdGlHZW9tZXRyeSxcbiAgaXNTYW1lQmFzZUdlb21ldHJ5VHlwZSxcbiAgY3JlYXRlU2VsZWN0ZWRTdHlsZSxcbiAgYXJlQ29vcmRpbmF0ZXNFcXVhbFxufSA9IGczd3Nkay5jb3JlLmdlb3V0aWxzO1xuY29uc3QgeyBMYXllciB9ID0gZzN3c2RrLmNvcmUubGF5ZXI7XG5jb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHsgVGFzayB9ID0gZzN3c2RrLmNvcmUud29ya2Zsb3c7XG5jb25zdCB7IFdvcmtmbG93c1N0YWNrIH0gPSBnM3dzZGsuY29yZS53b3JrZmxvdztcbmNvbnN0IHsgaW5wdXRTZXJ2aWNlIH0gPSBnM3dzZGsuY29yZS5pbnB1dDtcblxuLyoqXG4gKiBMaXN0IG9mIHBsYWNlaG9sZGVyIGluIGRlZmF1bHRfZXhwcmVzc2lvbiBleHByZXNzaW9uIHRvIGNhbGwgc2VydmVyIGZvciBnZXR0aW5nIHZhbHVlIG9mIGlucHV0XG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKi9cbmNvbnN0IEdFT01FVFJZX0RFRkFVTFRfRVhQUkVTU0lPTl9QTEFDRUhPTERFUlMgPSBbXG4gIFwiJGFyZWFcIixcbiAgXCIkcGVyaW1ldGVyXCIsXG4gIFwiJGxlbmd0aFwiLFxuICBcIiR4XCIsXG4gIFwiJHlcIixcbiAgXCIkZ2VvbWV0cnlcIlxuXTtcblxuZnVuY3Rpb24gRWRpdGluZ1Rhc2sob3B0aW9ucyA9IHt9KSB7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX2VkaXRpbmdTZXJ2aXZlO1xuICB0aGlzLl9tYXBTZXJ2aWNlID0gR1VJLmdldFNlcnZpY2UoJ21hcCcpO1xuICB0aGlzLmFkZEludGVyYWN0aW9uID0gZnVuY3Rpb24oaW50ZXJhY3Rpb24pIHtcbiAgICB0aGlzLl9tYXBTZXJ2aWNlLmFkZEludGVyYWN0aW9uKGludGVyYWN0aW9uKTtcbiAgfTtcbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKGludGVyYWN0aW9uKSB7XG4gICAgLy9uZWVkZWQgdG8gYXZvaWQgYSBpc3N1ZSBvbiBPcGVubGF5ZXJzXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9tYXBTZXJ2aWNlLnJlbW92ZUludGVyYWN0aW9uKGludGVyYWN0aW9uKSlcbiAgfTtcbn1cblxuaW5oZXJpdChFZGl0aW5nVGFzaywgVGFzayk7XG5cbmNvbnN0IHByb3RvID0gRWRpdGluZ1Rhc2sucHJvdG90eXBlO1xuXG4vL2dldCBlZGl0aW5nIHR5cGUgZnJvbSBlZGl0aW5nIGNvbmZpZ1xucHJvdG8uZ2V0RWRpdGluZ1R5cGUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gbnVsbDtcbn07XG5cbnByb3RvLnJlZ2lzdGVyUG9pbnRlck1vdmVDdXJzb3IgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9tYXBTZXJ2aWNlLmdldE1hcCgpLm9uKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5fcG9pbnRlck1vdmVDdXJzb3IpXG59O1xuXG5wcm90by51bnJlZ2lzdGVyUG9pbnRlck1vdmVDdXJzb3IgPSBmdW5jdGlvbigpe1xuICB0aGlzLl9tYXBTZXJ2aWNlLmdldE1hcCgpLnVuKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5fcG9pbnRlck1vdmVDdXJzb3IpXG59O1xuXG5wcm90by5fcG9pbnRlck1vdmVDdXJzb3IgPSBmdW5jdGlvbihldnQpIHtcbiAgY29uc3QgaGl0ID0gdGhpcy5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwoZXZ0LnBpeGVsLCAoKSA9PiB0cnVlKTtcbiAgaWYgKGhpdCkgdGhpcy5nZXRUYXJnZXRFbGVtZW50KCkuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICBlbHNlIHRoaXMuZ2V0VGFyZ2V0RWxlbWVudCgpLnN0eWxlLmN1cnNvciA9ICcnO1xufTtcblxucHJvdG8uc2V0U3RlcHMgPSBmdW5jdGlvbihzdGVwcz17fSl7XG4gIHRoaXMuX3N0ZXBzID0gc3RlcHM7XG4gIHRoaXMuc2V0VXNlck1lc3NhZ2VTdGVwcyhzdGVwcyk7XG59O1xuXG5wcm90by5nZXRTdGVwcyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLl9zdGVwcztcbn07XG5cbnByb3RvLmdldE1hcFNlcnZpY2UgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5fbWFwU2VydmljZTtcbn07XG5cbnByb3RvLmdldE1hcCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbWFwU2VydmljZS5nZXRNYXAoKTtcbn07XG5cbnByb3RvLmFyZUNvb3JkaW5hdGVzRXF1YWwgPSBmdW5jdGlvbih7ZmVhdHVyZSwgY29vcmRpbmF0ZXN9KXtcbiAgY29uc3QgZmVhdHVyZUdlb21ldHJ5ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xuICBjb25zdCBnZW9tZXRyeVR5cGUgPSBmZWF0dXJlR2VvbWV0cnkuZ2V0VHlwZSgpO1xuICBzd2l0Y2ggKGdlb21ldHJ5VHlwZSl7XG4gICAgY2FzZSAnTXVsdGlMaW5lU3RyaW5nJzpcbiAgICAgIHJldHVybiAhIV8uZmxhdE1hcChmZWF0dXJlR2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKSkuZmluZCggZl9jb29yZGluYXRlcz0+IGFyZUNvb3JkaW5hdGVzRXF1YWwoY29vcmRpbmF0ZXMsIGZfY29vcmRpbmF0ZXMpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgcmV0dXJuICEhZmVhdHVyZUdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkuZmluZChmX2Nvb3JkaW5hdGVzID0+IGFyZUNvb3JkaW5hdGVzRXF1YWwoY29vcmRpbmF0ZXMsIGZfY29vcmRpbmF0ZXMpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgcmV0dXJuICEhXy5mbGF0TWFwKGZlYXR1cmVHZW9tZXRyeS5nZXRDb29yZGluYXRlcygpKS5maW5kKGZfY29vcmRpbmF0ZXMgPT4gYXJlQ29vcmRpbmF0ZXNFcXVhbChjb29yZGluYXRlcywgZl9jb29yZGluYXRlcykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgIHJldHVybiAhIWZlYXR1cmVHZW9tZXRyeS5nZXRQb2x5Z29ucygpLmZpbmQocG9seWdvbiA9PntcbiAgICAgICAgcmV0dXJuICEhXy5mbGF0TWFwKHBvbHlnb24uZ2V0Q29vcmRpbmF0ZXMoKSkuZmluZChmX2Nvb3JkaW5hdGVzID0+IGFyZUNvb3JkaW5hdGVzRXF1YWwoY29vcmRpbmF0ZXMsIGZfY29vcmRpbmF0ZXMpKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUG9pbnQnOlxuICAgICAgcmV0dXJuIGFyZUNvb3JkaW5hdGVzRXF1YWwoY29vcmRpbmF0ZXMsIGZlYXR1cmVHZW9tZXRyeS5nZXRDb29yZGluYXRlcygpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ011bHRpUG9pbnQnOlxuICAgICAgcmV0dXJuICEhZmVhdHVyZUdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCkuZmluZChmX2Nvb3JkaW5hdGVzID0+IGFyZUNvb3JkaW5hdGVzRXF1YWwoY29vcmRpbmF0ZXMsIGZfY29vcmRpbmF0ZXMpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxucHJvdG8uc2V0RmVhdHVyZXNTZWxlY3RlZFN0eWxlID0gZnVuY3Rpb24oZmVhdHVyZXM9W10pIHtcbiAgaWYgKGZlYXR1cmVzLmxlbmd0aCkge1xuICAgIGNvbnN0IHtvcmlnaW5hbFN0eWxlLCBzZWxlY3RlZFN0eWxlfSA9IHRoaXMuZ2V0U2VsZWN0ZWRTdHlsZShmZWF0dXJlc1swXSk7XG4gICAgZmVhdHVyZXMuZm9yRWFjaChmZWF0dXJlID0+IGZlYXR1cmUuc2V0U3R5bGUoc2VsZWN0ZWRTdHlsZSkpO1xuICAgIHJldHVybiBvcmlnaW5hbFN0eWxlO1xuICB9XG59O1xuXG5wcm90by5zZXRBbmRVbnNldFNlbGVjdGVkRmVhdHVyZXNTdHlsZSA9IGZ1bmN0aW9uKHtwcm9taXNlfT17fSl7XG4gIC8qXG4gIFRlbXBvcmFyeSBuZWVkZWQgdG8gZml4IGlzc3VlIG9uIHBlbmRpbmcgcHJvbWlzZVxuICAgKi9cbiAgY29uc3Qge2xheWVyLCBmZWF0dXJlc30gPSB0aGlzLmdldElucHV0cygpO1xuICAvKlxuICBUbyBpbXByb3ZlOiBub3RpY2UgdGhhdCBpZiBjb21pbmcgZnJvbSByZWxhdGlvbiAoIFdvcmtmbG93c1N0YWNrLmdldExlbmd0aCgpID4gMSApXG4gIG5vIG5lZWQgc2V0VGltZW91dCBiZWNhdXNlIHdlIGFscmVhZHkgaGFzIHNlbGVjdGVkIHN0eWxlIHNvIG9yaWdpbmFsIGlzIHRoZSBzYW1lIHNlbGVjdGVkLlxuICBJbiBjYXNlIG9mIGN1cnJlbnQgbGF5ZXIgbmVlZCB0byB3YWl0LiBUTyBET1xuICAgKi9cbiAgY29uc3Qgc2VsZWN0T3JpZ2luYWxTdHlsZUhhbmRsZSA9ICgpID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbFN0eWxlID0gdGhpcy5zZXRGZWF0dXJlc1NlbGVjdGVkU3R5bGUoZmVhdHVyZXMpO1xuICAgIHByb21pc2UuYWx3YXlzKCgpID0+IHtcbiAgICAgIGZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUgPT4gZmVhdHVyZS5zZXRTdHlsZShvcmlnaW5hbFN0eWxlKSkpXG4gICAgfSk7XG4gIH07XG4gIGlmIChsYXllci5nZXRUeXBlKCkgPT09IExheWVyLkxheWVyVHlwZXMuVkVDVE9SKXtcbiAgICBXb3JrZmxvd3NTdGFjay5nZXRMZW5ndGgoKSA9PT0gMSA/IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2VsZWN0T3JpZ2luYWxTdHlsZUhhbmRsZSgpO1xuICAgIH0pIDogc2VsZWN0T3JpZ2luYWxTdHlsZUhhbmRsZSgpO1xuICB9XG59O1xuXG5wcm90by5nZXRTZWxlY3RlZFN0eWxlID0gZnVuY3Rpb24oZmVhdHVyZSl7XG4gIGNvbnN0IGdlb21ldHJ5VHlwZSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCk7XG4gIGNvbnN0IG9yaWdpbmFsU3R5bGUgPSBmZWF0dXJlLmdldFN0eWxlKCk7XG4gIGNvbnN0IHNlbGVjdGVkU3R5bGUgPSBjcmVhdGVTZWxlY3RlZFN0eWxlKHtcbiAgICBnZW9tZXRyeVR5cGVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgb3JpZ2luYWxTdHlsZSxcbiAgICBzZWxlY3RlZFN0eWxlXG4gIH1cbn07XG5cbnByb3RvLmRpc2FibGVTaWRlYmFyID0gZnVuY3Rpb24oYm9vbD10cnVlKSB7XG4gICF0aGlzLl9pc0NvbnRlbnRDaGlsZCAmJiBHVUkuZGlzYWJsZVNpZGVCYXIoYm9vbCk7XG59O1xuXG5wcm90by5nZXRFZGl0aW5nU2VydmljZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9lZGl0aW5nU2Vydml2ZSA9IHRoaXMuX2VkaXRpbmdTZXJ2aXZlIHx8IHJlcXVpcmUoJy4uLy4uLy4uL3NlcnZpY2VzL2VkaXRpbmdzZXJ2aWNlJyk7XG4gIHJldHVybiB0aGlzLl9lZGl0aW5nU2Vydml2ZTtcbn07XG5cbnByb3RvLmZpcmVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBvcHRpb25zPXt9KSB7XG4gIHJldHVybiB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuZmlyZUV2ZW50KGV2ZW50LCBvcHRpb25zKTtcbn07XG5cbnByb3RvLnNldE51bGxNZWRpYUZpZWxkcyA9IGZ1bmN0aW9uKHtsYXllciwgZmVhdHVyZX09e30pIHtcbiAgY29uc3QgbWVkaWFGaWVsZHMgPSBsYXllci5nZXRFZGl0aW5nTWVkaWFGaWVsZHMoe30pO1xuICBtZWRpYUZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IGZlYXR1cmUuc2V0KGZpZWxkLCBudWxsKSlcbn07XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge307XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgaGFuZGxlIHNpbmdsZSB0YXNrIFxuICovXG5wcm90by5zYXZlU2luZ2xlID0gZnVuY3Rpb24oaW5wdXQsIGNvbnRleHQpe1xuICBjb250ZXh0LnNlc3Npb24uc2F2ZSgpXG4gICAgLnRoZW4oKCkgPT4gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLnNhdmVDaGFuZ2UoKSk7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIGNhbmNlbCBzaW5nbGVcbiAqIEBwYXJhbSBpbnB1dFxuICogQHBhcmFtIGNvbnRleHRcbiAqL1xucHJvdG8uY2FuY2VsU2luZ2xlID0gZnVuY3Rpb24oaW5wdXQsIGNvbnRleHQpe1xuICBjb250ZXh0LnNlc3Npb24ucm9sbGJhY2soKTtcbn07XG5cbi8qKlxuICogbWV0aG9kIHRoYXQgcmV0dXJuIGluIGNhc2Ugb2YgcmVsYXRpb24gY2hpbGQgIHdvcmtmbG93IHRoZSBsYXllcklkIHJvb3RcbiAqIEByZXR1cm5zIHsqfVxuICovXG5wcm90by5nZXRSb290V29ya2Zsb3dMYXllcklkID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIFdvcmtmbG93c1N0YWNrLmdldEZpcnN0KCkuZ2V0SW5wdXRzKCkubGF5ZXIuZ2V0SWQoKVxufTtcblxuLyoqXG4gKiBnZXQgZm9ybSBmaWVsZHNcbiAqL1xuXG5wcm90by5nZXRGb3JtRmllbGRzID0gYXN5bmMgZnVuY3Rpb24oe2lucHV0cywgY29udGV4dCwgZmVhdHVyZSwgaXNDaGlsZD1mYWxzZX09e30pe1xuICBsZXQgaGFzVW5pcXVlVmFsdWUgPSBmYWxzZTtcbiAgY29uc3QgcmVsYXRpb25MYXllcklkID0gdGhpcy5nZXRSb290V29ya2Zsb3dMYXllcklkKCk7XG4gIGNvbnN0IHtsYXllciwgZmVhdHVyZXN9ID0gaW5wdXRzO1xuICBjb25zdCBsYXllcklkID0gbGF5ZXIuZ2V0SWQoKTtcbiAgY29uc3QgdW5pcXVlX3ZhbHVlc19mZWF0dXJlX2ZpZWxkX09iaiA9IFtdO1xuICBjb25zdCB7ZXhjbHVkZUZpZWxkczpleGNsdWRlLCBnZXRfZGVmYXVsdF92YWx1ZT1mYWxzZX0gPSBjb250ZXh0O1xuICBjb25zdCBmaWVsZHMgPSBsYXllci5nZXRGaWVsZHNXaXRoVmFsdWVzKGZlYXR1cmUsIHtcbiAgICBleGNsdWRlLFxuICAgIGdldF9kZWZhdWx0X3ZhbHVlXG4gIH0pO1xuICAvKipcbiAgICogY2hlY2sgZm9yIHVuaXF1ZSB2YWxpZGF0ZVxuICAgKi9cbiAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgIGlmIChmaWVsZC52YWxpZGF0ZS51bmlxdWUpIHtcbiAgICAgIGhhc1VuaXF1ZVZhbHVlID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGN1cnJlbnRfZmVhdHVyZV92YWx1ZSA9IGZlYXR1cmUuZ2V0KGZpZWxkLm5hbWUpOyAvLyBjdXJyZW50IGVkaXRpbmcgZmVhdHVyZSBmaWVsZCB2YWx1ZVxuICAgICAgdW5pcXVlX3ZhbHVlc19mZWF0dXJlX2ZpZWxkX09iai5wdXNoKHtcbiAgICAgICAgY3VycmVudF9mZWF0dXJlX3ZhbHVlLFxuICAgICAgICBmaWVsZFxuICAgICAgfSlcbiAgICB9XG4gIH0pO1xuICB1bmlxdWVfdmFsdWVzX2ZlYXR1cmVfZmllbGRfT2JqLmZvckVhY2goKHtjdXJyZW50X2ZlYXR1cmVfdmFsdWUsIGZpZWxkfSkgPT4ge1xuICAgIC8qKlxuICAgICAqIGN1cnJlbnQgZWRpdGluZyBmZWF0dXJlIGFkZCB0b1xuICAgICAqL1xuICAgIGxldCBsYXllclVuaXF1ZUZpZWxkVmFsdWVzO1xuICAgIGlmIChpc0NoaWxkKSB7XG4gICAgICBsYXllclVuaXF1ZUZpZWxkVmFsdWVzID0gdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmdldENoaWxkTGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7XG4gICAgICAgIGxheWVySWQsXG4gICAgICAgIHJlbGF0aW9uTGF5ZXJJZCxcbiAgICAgICAgZmllbGRcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGxheWVyVW5pcXVlRmllbGRWYWx1ZXMgPSB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuZ2V0TGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7XG4gICAgICAgIGxheWVySWQsXG4gICAgICAgIGZpZWxkXG4gICAgICB9KVxuICAgIH1cbiAgICBsYXllclVuaXF1ZUZpZWxkVmFsdWVzLmZvckVhY2godmFsdWUgPT4gZmllbGQudmFsaWRhdGUuZXhjbHVkZV92YWx1ZXMuYWRkKHZhbHVlKSk7XG5cbiAgICAvKipcbiAgICAgKiBhZGQgZXZlbnR1YWxseSBjdXJyZW50IGZlYXR1cmUgZmllbGQgdW5pcXVlIHZhbHVlIHRoYXQgYXJlIGNoYW5nZWQgZHVyaW5nIGVkaXRpbmdcbiAgICAgKi9cbiAgICBmZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBmZWF0dXJlLmdldChmaWVsZC5uYW1lKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIGZpZWxkLnZhbGlkYXRlLmV4Y2x1ZGVfdmFsdWVzLmFkZCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgLy9yZW1vdmUgY3VycmVudCB2YWx1ZSBmcm9tIGV4Y2x1ZGVfdmFsdWVzXG4gICAgZmllbGQudmFsaWRhdGUuZXhjbHVkZV92YWx1ZXMuZGVsZXRlKGN1cnJlbnRfZmVhdHVyZV92YWx1ZSk7XG4gIH0pO1xuXG4gIGlmIChoYXNVbmlxdWVWYWx1ZSkge1xuICAgIGNvbnN0IHNhdmVkZmVhdHVyZUZuYyA9ICgpID0+IHtcbiAgICAgICB1bmlxdWVfdmFsdWVzX2ZlYXR1cmVfZmllbGRfT2JqLmZvckVhY2goKHtjdXJyZW50X2ZlYXR1cmVfdmFsdWUsIGZpZWxkfSkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudF9mZWF0dXJlX3ZhbHVlICE9PSBmaWVsZC52YWx1ZSkge1xuICAgICAgICAgIGlmIChpc0NoaWxkKVxuICAgICAgICAgICAgdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmNoYW5nZVJlbGF0aW9uTGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7XG4gICAgICAgICAgICAgIGxheWVySWQsXG4gICAgICAgICAgICAgIHJlbGF0aW9uTGF5ZXJJZCxcbiAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgIG9sZFZhbHVlOiBjdXJyZW50X2ZlYXR1cmVfdmFsdWUsXG4gICAgICAgICAgICAgIG5ld1ZhbHVlY29udmVydFNpbmdsZU11bHRpR2VvbWV0cnk6IGZpZWxkLnZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuY2hhbmdlTGF5ZXJVbmlxdWVGaWVsZFZhbHVlcyh7XG4gICAgICAgICAgICAgIGxheWVySWQsXG4gICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICBvbGRWYWx1ZTogY3VycmVudF9mZWF0dXJlX3ZhbHVlLFxuICAgICAgICAgICAgICBuZXdWYWx1ZTogZmllbGQudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICBpZiAoIWlzQ2hpbGQpIHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5zYXZlVGVtcG9yYXJ5UmVsYXRpb25zVW5pcXVlRmllbGRzVmFsdWVzKGxheWVySWQpO1xuICAgICAgIHJldHVybiB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLnN1YnNjcmliZShgc2F2ZWRmZWF0dXJlXyR7bGF5ZXJJZH1gLCBzYXZlZGZlYXR1cmVGbmMpO1xuICAgIHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5zdWJzY3JpYmUoYGNsb3NlZm9ybV8ke2xheWVySWR9YCwgKCkgPT4ge1xuICAgICAgdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLnVuc3Vic2NyaWJlKGBzYXZlZGZlYXR1cmVfJHtsYXllcklkfWAsIHNhdmVkZmVhdHVyZUZuYyk7XG4gICAgICB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkuY2xlYXJUZW1wb3JhcnlSZWxhdGlvbnNVbmlxdWVGaWVsZHNWYWx1ZXMobGF5ZXJJZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbmNlOiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICByZXR1cm4gZmllbGRzO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZWQgRXhwcmVzc2lvbiBjaGVja2luZyBpbnBcbiAqL1xucHJvdG8uZXZhbHVhdGVHZW9tZXRyeUV4cHJlc3Npb25GaWVsZCA9IGFzeW5jIGZ1bmN0aW9uKHtpbnB1dHMsIGNvbnRleHQsICBmZWF0dXJlfT17fSl7XG4gIGNvbnN0IGV4cHJlc3Npb25fZXZhbF9wcm9taXNlcyA9IFtdOyAvLyBwcm9taXNlcyBmcm9tIGV4cHJlc3Npb24gZXZhbHVhdGlvblxuICBjb25zdCB7IGxheWVyIH0gPSBpbnB1dHM7XG4gIGNvbnN0IHtleGNsdWRlRmllbGRzOmV4Y2x1ZGUsIGdldF9kZWZhdWx0X3ZhbHVlPWZhbHNlfSA9IGNvbnRleHQ7XG4gIGNvbnN0IGZpZWxkcyA9IGxheWVyLmdldEZpZWxkc1dpdGhWYWx1ZXMoZmVhdHVyZSwge1xuICAgIGV4Y2x1ZGUsXG4gICAgZ2V0X2RlZmF1bHRfdmFsdWVcbiAgfSk7XG4gIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICBjb25zdCB7ZGVmYXVsdF9leHByZXNzaW9ufSA9IGZpZWxkLmlucHV0Lm9wdGlvbnM7XG4gICAgaWYgKGRlZmF1bHRfZXhwcmVzc2lvbil7XG4gICAgICBsZXQgZXZhbHVhdGUgPSBmYWxzZTtcbiAgICAgIGNvbnN0IHtleHByZXNzaW9uLCBhcHBseV9vbl91cGRhdGUgPSBmYWxzZX0gPSBkZWZhdWx0X2V4cHJlc3Npb247XG4gICAgICAvKlxuICAgICAgY2hlY2sgaWYgYWx3YXlzIHVwZGF0ZSBhcHBseV9vbl91cGRhdGUgPSB0cnVlIG9yIG9ubHkgaXMgaXMgYSBuZXcgZmVhdHVyZVxuICAgICAgICovXG4gICAgICBpZiAoYXBwbHlfb25fdXBkYXRlIHx8IGZlYXR1cmUuaXNOZXcoKSkgZXZhbHVhdGUgPSBHRU9NRVRSWV9ERUZBVUxUX0VYUFJFU1NJT05fUExBQ0VIT0xERVJTLmZpbmQocGxhY2Vob2xkZXIgPT4gZXhwcmVzc2lvbi5pbmRleE9mKHBsYWNlaG9sZGVyKSAhPT0gLTEpO1xuICAgICAgaWYgKGV2YWx1YXRlKXtcbiAgICAgICAgY29uc3QgcWdzX2xheWVyX2lkID0gaW5wdXRzLmxheWVyLmdldElkKCk7XG4gICAgICAgIGNvbnN0IHBhcmVudERhdGEgPSB0aGlzLmdldFBhcmVudEZvcm1EYXRhKCk7XG4gICAgICAgIGNvbnN0IGV4cHJlc3Npb25fZXZhbF9wcm9taXNlID0gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBpbnB1dFNlcnZpY2UuaGFuZGxlRGVmYXVsdEV4cHJlc3Npb25Gb3JtSW5wdXQoe1xuICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgZmVhdHVyZSxcbiAgICAgICAgICAgICAgcWdzX2xheWVyX2lkLFxuICAgICAgICAgICAgICBwYXJlbnREYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZlYXR1cmUuc2V0KGZpZWxkLm5hbWUsIGZpZWxkLnZhbHVlKTtcbiAgICAgICAgICAgIHJlc29sdmUoZmVhdHVyZSlcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBleHByZXNzaW9uX2V2YWxfcHJvbWlzZXMucHVzaChleHByZXNzaW9uX2V2YWxfcHJvbWlzZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKGV4cHJlc3Npb25fZXZhbF9wcm9taXNlcyk7XG4gIHJldHVybiBmZWF0dXJlO1xufTtcblxuLyoqXG4gKiBzZXRcbiAqIEBwYXJhbSBnZXRfZGVmYXVsdF92YWx1ZSB0byBjb250ZXh0IG9mIHRhc2tcbiAqL1xucHJvdG8uc2V0Q29udGV4dEdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uKGdldF9kZWZhdWx0X3ZhbHVlPWZhbHNlKXtcbiAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCgpO1xuICBjb250ZXh0LmdldF9kZWZhdWx0X3ZhbHVlID0gZ2V0X2RlZmF1bHRfdmFsdWU7XG59O1xuXG5wcm90by5nZXRQYXJlbnRGb3JtRGF0YSA9IGZ1bmN0aW9uKCl7XG4gIGlmIChXb3JrZmxvd3NTdGFjay5nZXRMZW5ndGgoKSA+IDEpIHtcbiAgICBjb25zdCB7ZmVhdHVyZXMsIGxheWVyLCBmaWVsZHM9W10gfSA9IFdvcmtmbG93c1N0YWNrLmdldFBhcmVudCgpLmdldElucHV0cygpO1xuICAgIC8vIGluIGNhc2Ugb2YgZmllbGRzICh0ZW1wb3Jhcnkgc2V0IGJ5IGZvcm0pIHNldCB0ZW1wb3JhcnkgdmFsdWUgdG8gZmVhdHVyZSAoY2xvbmVkKSBwYXJlbnRcbiAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbZmVhdHVyZXMubGVuZ3RoIC0xXS5jbG9uZSgpO1xuICAgIGZpZWxkcy5mb3JFYWNoKCh7bmFtZSwgdmFsdWV9KSA9PiB7XG4gICAgICBmZWF0dXJlLnNldChuYW1lLCB2YWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZmVhdHVyZSxcbiAgICAgIHFnc19sYXllcl9pZDogbGF5ZXIuZ2V0SWQoKVxuICAgIH1cbiAgfVxufTtcblxucHJvdG8uZ2V0RmVhdHVyZXNGcm9tU2VsZWN0aW9uRmVhdHVyZXMgPSBmdW5jdGlvbih7bGF5ZXJJZCwgZ2VvbWV0cnlUeXBlfSl7XG4gIGNvbnN0IHNlbGVjdGlvbkxheWVyU291cmNlID0gdGhpcy5fbWFwU2VydmljZS5kZWZhdWx0c0xheWVycy5zZWxlY3Rpb25MYXllci5nZXRTb3VyY2UoKTtcbiAgcmV0dXJuIHRoaXMuY29udmVydEZlYXR1cmVzR2VvbWV0cnlUb0dlb21ldHJ5VHlwZU9mTGF5ZXIoe1xuICAgIGZlYXR1cmVzOiBzZWxlY3Rpb25MYXllclNvdXJjZS5nZXRGZWF0dXJlcygpLmZpbHRlcihmZWF0dXJlID0+IGZlYXR1cmUuX19sYXllcklkICE9PSBsYXllcklkKSxcbiAgICBnZW9tZXRyeVR5cGVcbiAgfSlcbn07XG5cbnByb3RvLmNvbnZlcnRGZWF0dXJlc0dlb21ldHJ5VG9HZW9tZXRyeVR5cGVPZkxheWVyID0gZnVuY3Rpb24oe2ZlYXR1cmVzPVtdLCBnZW9tZXRyeVR5cGV9KXtcbiAgY29uc3QgY29udmVydEZlYXR1cmVzID0gW107XG4gIGZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PiB7XG4gICAgY29uc3QgZmVhdHVyZUdlb21ldHJ5VHlwZSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKSAmJiBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0VHlwZSgpO1xuICAgIGlmIChnZW9tZXRyeVR5cGUgPT09IGZlYXR1cmVHZW9tZXRyeVR5cGUpIGNvbnZlcnRGZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgIGVsc2UgaWYgKGlzU2FtZUJhc2VHZW9tZXRyeVR5cGUoZmVhdHVyZUdlb21ldHJ5VHlwZSwgZ2VvbWV0cnlUeXBlKSAmJlxuICAgICAgKEdlb21ldHJ5LmlzTXVsdGlHZW9tZXRyeShnZW9tZXRyeVR5cGUpIHx8ICFHZW9tZXRyeS5pc011bHRpR2VvbWV0cnkoZmVhdHVyZUdlb21ldHJ5VHlwZSkpKSB7XG4gICAgICBjb25zdCBjbG9uZUZlYXR1cmUgPSBmZWF0dXJlLmNsb25lKCk7XG4gICAgICBjbG9uZUZlYXR1cmUuX19sYXllcklkID0gZmVhdHVyZS5fX2xheWVySWQ7XG4gICAgICBjbG9uZUZlYXR1cmUuc2V0R2VvbWV0cnkoY29udmVydFNpbmdsZU11bHRpR2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLCBnZW9tZXRyeVR5cGUpKTtcbiAgICAgIGNvbnZlcnRGZWF0dXJlcy5wdXNoKGNsb25lRmVhdHVyZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNvbnZlcnRGZWF0dXJlcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdGluZ1Rhc2s7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuXG5mdW5jdGlvbiBHZXRWZXJ0ZXhUYXNrKG9wdGlvbnM9e30pIHtcbiAgdGhpcy5fZHJhd0ludGVyYWN0aW9uO1xuICB0aGlzLl9zbmFwSXRlcmFjdGlvbjtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChHZXRWZXJ0ZXhUYXNrLCBFZGl0aW5nVGFzayk7XG5cbmNvbnN0IHByb3RvID0gR2V0VmVydGV4VGFzay5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cykge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCB7ZmVhdHVyZXN9ID0gaW5wdXRzO1xuICBpZiAoIWZlYXR1cmVzLmxlbmd0aCkgcmV0dXJuO1xuICB0aGlzLl9zbmFwSXRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5TbmFwKHtcbiAgICBmZWF0dXJlczogbmV3IG9sLkNvbGxlY3Rpb24oZmVhdHVyZXMpLFxuICAgIGVkZ2U6IGZhbHNlXG4gIH0pO1xuICB0aGlzLl9kcmF3SXRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5EcmF3KHtcbiAgICB0eXBlOiAnUG9pbnQnLFxuICAgIGNvbmRpdGlvbjogZXZ0ID0+IHtcbiAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZXZ0LmNvb3JkaW5hdGU7XG4gICAgICByZXR1cm4gISFmZWF0dXJlcy5maW5kKGZlYXR1cmUgPT4gdGhpcy5hcmVDb29yZGluYXRlc0VxdWFsKHtmZWF0dXJlLCBjb29yZGluYXRlc30pKTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLl9kcmF3SXRlcmFjdGlvbi5vbignZHJhd2VuZCcsIChldnQpPT4ge1xuICAgIGlucHV0cy5jb29yZGluYXRlcyA9IGV2dC5mZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICB0aGlzLnNldFVzZXJNZXNzYWdlU3RlcERvbmUoJ2Zyb20nKTtcbiAgICBkLnJlc29sdmUoaW5wdXRzKTtcbiAgfSk7XG5cbiAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLl9kcmF3SXRlcmFjdGlvbik7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fc25hcEl0ZXJhY3Rpb24pO1xuXG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5cbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLl9kcmF3SXRlcmFjdGlvbik7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fc25hcEl0ZXJhY3Rpb24pO1xuICB0aGlzLl9zbmFwSXRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX2RyYXdJdGVyYWN0aW9uID0gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2V0VmVydGV4VGFzaztcbiIsImNvbnN0IHtiYXNlLCBpbmhlcml0fSA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5jb25zdCB7R1VJfSA9IGczd3Nkay5ndWk7XG5jb25zdCB7UGlja0ZlYXR1cmVJbnRlcmFjdGlvbn0gPSBnM3dzZGsub2wuaW50ZXJhY3Rpb25zO1xuXG5cbmZ1bmN0aW9uIExpbmtSZWxhdGlvblRhc2sob3B0aW9ucz17fSkge1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KExpbmtSZWxhdGlvblRhc2ssIEVkaXRpbmdUYXNrKTtcblxuY29uc3QgcHJvdG8gPSBMaW5rUmVsYXRpb25UYXNrLnByb3RvdHlwZTtcblxucHJvdG8ucnVuID0gZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIEdVSS5zZXRNb2RhbChmYWxzZSk7XG4gIGNvbnN0IGVkaXRpbmdMYXllciA9IGlucHV0cy5sYXllci5nZXRFZGl0aW5nTGF5ZXIoKTtcbiAgdGhpcy5fb3JpZ2luYWxMYXllclN0eWxlID0gZWRpdGluZ0xheWVyLmdldFN0eWxlKCk7XG4gIGNvbnN0IGJlZm9yZVJ1biA9IGNvbnRleHQuYmVmb3JlUnVuO1xuICBjb25zdCBwcm9taXNlID0gYmVmb3JlUnVuICYmIHR5cGVvZiBiZWZvcmVSdW4gPT09ICdmdW5jdGlvbicgPyBiZWZvcmVSdW4oKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICBjb25zdCB7ZmllbGQsIHZhbHVlfSA9IGNvbnRleHQuZXhjbHVkZTtcbiAgY29uc3Qgc3R5bGUgPSBjb250ZXh0LnN0eWxlO1xuICB0aGlzLl9mZWF0dXJlcyA9IGVkaXRpbmdMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICB0aGlzLl9mZWF0dXJlcyA9IGZpZWxkID8gdGhpcy5fZmVhdHVyZXMuZmlsdGVyKGZlYXR1cmUgPT4ge1xuICAgIHJldHVybiAgZmVhdHVyZS5nZXQoZmllbGQpICE9IHZhbHVlO1xuICB9KSA6IHRoaXMuX2ZlYXR1cmVzO1xuICBzdHlsZSAmJiB0aGlzLl9mZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT57XG4gICAgZmVhdHVyZS5zZXRTdHlsZShzdHlsZSlcbiAgfSk7XG4gIHByb21pc2UudGhlbigoKT0+IHtcbiAgICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24gPSBuZXcgUGlja0ZlYXR1cmVJbnRlcmFjdGlvbih7XG4gICAgICBsYXllcnM6IFtlZGl0aW5nTGF5ZXJdLFxuICAgICAgZmVhdHVyZXM6IHRoaXMuX2ZlYXR1cmVzXG4gICAgfSk7XG4gICAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24pO1xuICAgIHRoaXMucGlja0ZlYXR1cmVJbnRlcmFjdGlvbi5vbigncGlja2VkJywgKGUpID0+IHtcbiAgICAgIGNvbnN0IHJlbGF0aW9uID0gZS5mZWF0dXJlO1xuICAgICAgaW5wdXRzLmZlYXR1cmVzLnB1c2gocmVsYXRpb24pO1xuICAgICAgR1VJLnNldE1vZGFsKHRydWUpO1xuICAgICAgZC5yZXNvbHZlKGlucHV0cyk7XG4gICAgfSk7XG4gIH0pLmNhdGNoKGVyciA9PntcbiAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgZC5yZWplY3QoKTtcbiAgfSk7XG4gIHJldHVybiBkLnByb21pc2UoKVxufTtcblxuLy8gbWV0b2RvIGVzZWd1aXRvIGFsbGEgZGlzYXR0aXZhemlvbmUgZGVsIHRvb2xcbnByb3RvLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgR1VJLnNldE1vZGFsKHRydWUpO1xuICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMucGlja0ZlYXR1cmVJbnRlcmFjdGlvbik7XG4gIHRoaXMuX2ZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PiB7XG4gICAgZmVhdHVyZS5zZXRTdHlsZSh0aGlzLl9vcmlnaW5hbExheWVyU3R5bGUpO1xuICB9KTtcbiAgdGhpcy5waWNrRmVhdHVyZUludGVyYWN0aW9uID0gbnVsbDtcbiAgdGhpcy5fZmVhdHVyZXMgPSBudWxsO1xuICB0aGlzLl9vcmlnaW5hbExheWVyU3R5bGUgPSBudWxsO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rUmVsYXRpb25UYXNrO1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHsgZGlzc29sdmUgfSA9IGczd3Nkay5jb3JlLmdlb3V0aWxzO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5jb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IFNlbGVjdEZlYXR1cmVzRG9tID0gcmVxdWlyZSgnLi4vLi4vLi4vZzN3LWVkaXRpbmctY29tcG9uZW50cy9zZWxlY3RtZXJnZWZlYXR1cmVzJyk7XG5cbmZ1bmN0aW9uIE1lcmdlRmVhdHVyZXNUYXNrKG9wdGlvbnM9e30pe1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KE1lcmdlRmVhdHVyZXNUYXNrLCBFZGl0aW5nVGFzayk7XG5cbmNvbnN0IHByb3RvID0gTWVyZ2VGZWF0dXJlc1Rhc2sucHJvdG90eXBlO1xuXG5wcm90by5ydW4gPSBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQpIHtcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3QgeyBsYXllciwgZmVhdHVyZXMgfSA9IGlucHV0cztcbiAgY29uc3QgZWRpdGluZ0xheWVyID0gbGF5ZXIuZ2V0RWRpdGluZ0xheWVyKCk7XG4gIGNvbnN0IHNvdXJjZSA9IGVkaXRpbmdMYXllci5nZXRTb3VyY2UoKTtcbiAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmdldElkKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBjb250ZXh0LnNlc3Npb247XG4gIGlmIChmZWF0dXJlcy5sZW5ndGggPCAyKSB7XG4gICAgR1VJLnNob3dVc2VyTWVzc2FnZSh7XG4gICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICBtZXNzYWdlOiAnU2VsZXppb25hIGNvbWUgbWluaW1vIGR1ZSBmZWF0dXJlcycsXG4gICAgICBhdXRvY2xvc2U6IHRydWVcbiAgICB9KTtcbiAgICBkLnJlamVjdCgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1hcFNlcnZpY2UgPSB0aGlzLmdldE1hcFNlcnZpY2UoKTtcbiAgICBsZXQgaW5kZXg7XG4gICAgY29uc3QgbWVzc2FnZSA9IFNlbGVjdEZlYXR1cmVzRG9tKHtcbiAgICAgIGZlYXR1cmVzLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIGNsaWNrOihpZHgpID0+IHtcbiAgICAgICAgICBpbmRleCA9IGlkeDtcbiAgICAgICAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbaW5kZXhdO1xuICAgICAgICAgIG1hcFNlcnZpY2UuaGlnaGxpZ2h0R2VvbWV0cnkoZmVhdHVyZS5nZXRHZW9tZXRyeSgpLCB7XG4gICAgICAgICAgICB6b29tOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbG9yOiAncmVkJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSk7XG4gICAgR1VJLnNob3dNb2RhbERpYWxvZyh7XG4gICAgICB0aXRsZTogJ3NlbGV6aW9uYSBsYSBmZWF0dXJlJyxcbiAgICAgIGNsYXNzTmFtZTogJ21vZGFsLWxlZnQnLFxuICAgICAgY2xvc2VCdXR0b246IGZhbHNlLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgY2FuY2VsOiB7XG4gICAgICAgICAgbGFiZWw6ICdDYW5jZWwnLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi1kZWZhdWx0JyxcbiAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGQucmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvazoge1xuICAgICAgICAgIGxhYmVsOiAnT2snLFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi1wcmltYXJ5JyxcbiAgICAgICAgICBjYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSBmZWF0dXJlc1tpbmRleF07XG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRmVhdHVyZSA9IGZlYXR1cmUuY2xvbmUoKTtcbiAgICAgICAgICAgICAgY29uc3QgbmV3RmVhdHVyZSA9IGRpc3NvbHZlKHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChuZXdGZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5wdXNoVXBkYXRlKGxheWVySWQsIG5ld0ZlYXR1cmUsIG9yaWdpbmFsRmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGRlbGV0ZUZlYXR1cmUgPT4ge1xuICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5wdXNoRGVsZXRlKGxheWVySWQsIGRlbGV0ZUZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgc291cmNlLnJlbW92ZUZlYXR1cmUoZGVsZXRlRmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5wdXRzLmZlYXR1cmVzID0gW2ZlYXR1cmVdO1xuICAgICAgICAgICAgICAgIGQucmVzb2x2ZShpbnB1dHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ05vIGZlYXR1cmUgZGlzb2x2ZWQnLFxuICAgICAgICAgICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZC5yZWplY3QoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBHVUkuc2hvd1VzZXJNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ05vIGZlYXR1cmUgc2VsZWN0ZWQnLFxuICAgICAgICAgICAgICAgIGF1dG9jbG9zZTogdHJ1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZC5yZWplY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJldHVybiBkLnByb21pc2UoKTtcbn07XG5wcm90by5zdG9wID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLl9waWNrSW50ZXJhY3Rpb24pO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lcmdlRmVhdHVyZXNUYXNrO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7Y3JlYXRlTWVhc3VyZVRvb2x0aXAsIHJlbW92ZU1lYXN1cmVUb29sdGlwfSA9IGczd3Nkay5vbC51dGlscztcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuXG5mdW5jdGlvbiBNb2RpZnlHZW9tZXRyeVZlcnRleFRhc2sob3B0aW9ucz17fSl7XG4gIHRoaXMuZHJhd0ludGVyYWN0aW9uID0gbnVsbDtcbiAgdGhpcy5fb3JpZ2luYWxTdHlsZSA9IG51bGw7XG4gIHRoaXMuX2ZlYXR1cmUgPSBudWxsO1xuICB0aGlzLnRvb2x0aXA7XG4gIHRoaXMuX2RlbGV0ZUNvbmRpdGlvbiA9IG9wdGlvbnMuZGVsZXRlQ29uZGl0aW9uO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KE1vZGlmeUdlb21ldHJ5VmVydGV4VGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IE1vZGlmeUdlb21ldHJ5VmVydGV4VGFzay5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCBvcmlnaW5hbExheWVyID0gaW5wdXRzLmxheWVyO1xuICBjb25zdCBlZGl0aW5nTGF5ZXIgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdMYXllcigpIDtcbiAgY29uc3Qgc2Vzc2lvbiA9IGNvbnRleHQuc2Vzc2lvbjtcbiAgY29uc3QgbGF5ZXJJZCA9IG9yaWdpbmFsTGF5ZXIuZ2V0SWQoKTtcbiAgbGV0IG5ld0ZlYXR1cmUsIG9yaWdpbmFsRmVhdHVyZTtcbiAgY29uc3QgZmVhdHVyZSA9IHRoaXMuX2ZlYXR1cmUgPSBpbnB1dHMuZmVhdHVyZXNbMF07XG4gIHRoaXMuZGVsZXRlVmVydGV4S2V5O1xuICB0aGlzLl9vcmlnaW5hbFN0eWxlID0gZWRpdGluZ0xheWVyLmdldFN0eWxlKCk7XG4gIGNvbnN0IHN0eWxlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcbiAgICAgIHJhZGl1czogNSxcbiAgICAgIGZpbGw6IG51bGwsXG4gICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe2NvbG9yOiAnb3JhbmdlJywgd2lkdGg6IDJ9KVxuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICBuZXcgb2wuc3R5bGUuU3R5bGUoe1xuICAgICAgICBpbWFnZSxcbiAgICAgICAgZ2VvbWV0cnkoZmVhdHVyZSkge1xuICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKClbMF07XG4gICAgICAgICAgcmV0dXJuIG5ldyBvbC5nZW9tLk11bHRpUG9pbnQoY29vcmRpbmF0ZXMpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSh7XG4gICAgICAgICAgY29sb3I6ICd5ZWxsb3cnLFxuICAgICAgICAgIHdpZHRoOiA0XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIF07XG4gIH07XG4gIGZlYXR1cmUuc2V0U3R5bGUoc3R5bGUpO1xuICBjb25zdCBmZWF0dXJlcyA9IG5ldyBvbC5Db2xsZWN0aW9uKGlucHV0cy5mZWF0dXJlcyk7XG4gIHRoaXMuX21vZGlmeUludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLk1vZGlmeSh7XG4gICAgZmVhdHVyZXMsXG4gICAgZGVsZXRlQ29uZGl0aW9uOiB0aGlzLl9kZWxldGVDb25kaXRpb25cbiAgfSk7XG4gIHRoaXMuX21vZGlmeUludGVyYWN0aW9uLm9uKCdtb2RpZnlzdGFydCcsIGV2dCA9PiB7XG4gICAgY29uc3QgZmVhdHVyZSA9IGV2dC5mZWF0dXJlcy5nZXRBcnJheSgpWzBdO1xuICAgIG9yaWdpbmFsRmVhdHVyZSA9IGZlYXR1cmUuY2xvbmUoKTtcbiAgfSk7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fbW9kaWZ5SW50ZXJhY3Rpb24pO1xuICB0aGlzLl9tb2RpZnlJbnRlcmFjdGlvbi5vbignbW9kaWZ5ZW5kJywgZXZ0ID0+IHtcbiAgICBjb25zdCBmZWF0dXJlID0gZXZ0LmZlYXR1cmVzLmdldEFycmF5KClbMF07XG4gICAgaWYgKGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKSAhPT0gb3JpZ2luYWxGZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCkpIHtcbiAgICAgIC8qXG4gICAgICAqIGV2YWx1YXRlIGV4cHJlc3Npb24gZ2VvbWV0cnkgY2hlY2tcbiAgICAgICAqL1xuICAgICAgdGhpcy5ldmFsdWF0ZUdlb21ldHJ5RXhwcmVzc2lvbkZpZWxkKHtcbiAgICAgICAgaW5wdXRzLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBmZWF0dXJlXG4gICAgICB9KS5maW5hbGx5KCgpPT57XG4gICAgICAgIG5ld0ZlYXR1cmUgPSBmZWF0dXJlLmNsb25lKCk7XG4gICAgICAgIHNlc3Npb24ucHVzaFVwZGF0ZShsYXllcklkLCBuZXdGZWF0dXJlLCBvcmlnaW5hbEZlYXR1cmUpO1xuICAgICAgICBpbnB1dHMuZmVhdHVyZXMucHVzaChuZXdGZWF0dXJlKTtcbiAgICAgICAgZC5yZXNvbHZlKGlucHV0cyk7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIGVuZCBvZiBldmFsdWF0ZVxuICAgICAgICovXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcblxucHJvdG8uYWRkTWVhc3VyZUludGVyYWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgY29uc3QgbWFwID0gdGhpcy5nZXRNYXAoKTtcbiAgdGhpcy5fbW9kaWZ5SW50ZXJhY3Rpb24ub24oJ21vZGlmeXN0YXJ0JywgZXZ0ID0+IHtcbiAgICBjb25zdCBmZWF0dXJlID0gZXZ0LmZlYXR1cmVzLmdldEFycmF5KClbMF07XG4gICAgdGhpcy50b29sdGlwID0gY3JlYXRlTWVhc3VyZVRvb2x0aXAoe1xuICAgICAgbWFwLFxuICAgICAgZmVhdHVyZVxuICAgIH0pO1xuICB9KTtcbn07XG5cbnByb3RvLnJlbW92ZU1lYXN1cmVJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IG1hcCA9IHRoaXMuZ2V0TWFwKCk7XG4gIHRoaXMudG9vbHRpcCAmJiByZW1vdmVNZWFzdXJlVG9vbHRpcCh7XG4gICAgbWFwLFxuICAgIC4uLnRoaXMudG9vbHRpcFxuICB9KTtcbiAgdGhpcy50b29sdGlwID0gbnVsbDtcbn07XG5cblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuX2ZlYXR1cmUuc2V0U3R5bGUodGhpcy5fb3JpZ2luYWxTdHlsZSk7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fbW9kaWZ5SW50ZXJhY3Rpb24pO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RpZnlHZW9tZXRyeVZlcnRleFRhc2s7XG4iLCJjb25zdCB7YmFzZSwgaW5oZXJpdH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuXG5mdW5jdGlvbiBNb3ZlRWxlbWVudHNUYXNrKG9wdGlvbnM9e30pe1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KE1vdmVFbGVtZW50c1Rhc2ssIEVkaXRpbmdUYXNrKTtcblxuY29uc3QgcHJvdG8gPSBNb3ZlRWxlbWVudHNUYXNrLnByb3RvdHlwZTtcblxucHJvdG8uZ2V0RGVsdGFYWSA9IGZ1bmN0aW9uKHt4LCB5LCBjb29yZGluYXRlc30gPSB7fSl7XG4gIGNvbnN0IGdldENvb3JkaW5hdGVzID0gKGNvb3JkaW5hdGVzKT0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb29yZGluYXRlc1swXSkpe1xuICAgICAgcmV0dXJuIGdldENvb3JkaW5hdGVzKGNvb3JkaW5hdGVzWzBdKVxuICAgIH0gZWxzZSByZXR1cm4ge1xuICAgICAgeDogY29vcmRpbmF0ZXNbMF0sXG4gICAgICB5OiBjb29yZGluYXRlc1sxXVxuICAgIH07XG4gIH07XG4gIGNvbnN0IHh5ID0gZ2V0Q29vcmRpbmF0ZXMoY29vcmRpbmF0ZXMpO1xuICByZXR1cm4ge1xuICAgIHg6IHggLSB4eS54LFxuICAgIHk6IHkgLSB4eS55XG4gIH1cbn07XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICBjb25zdCB7IGxheWVyLCBmZWF0dXJlcywgY29vcmRpbmF0ZXMgfSA9IGlucHV0cztcbiAgY29uc3Qgc291cmNlID0gbGF5ZXIuZ2V0RWRpdGluZ0xheWVyKCkuZ2V0U291cmNlKCk7XG4gIGNvbnN0IGxheWVySWQgPSBsYXllci5nZXRJZCgpO1xuICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICB0aGlzLl9zbmFwSXRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5TbmFwKHtcbiAgICBzb3VyY2UsXG4gICAgZWRnZTogZmFsc2VcbiAgfSk7XG5cbiAgdGhpcy5fZHJhd0ludGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLkRyYXcoe1xuICAgIHR5cGU6ICdQb2ludCcsXG4gICAgZmVhdHVyZXM6IG5ldyBvbC5Db2xsZWN0aW9uKCksXG4gIH0pO1xuXG4gIHRoaXMuX2RyYXdJbnRlcmFjdGlvbi5vbignZHJhd2VuZCcsIGV2dCA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gZXZ0LmZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRDb29yZGluYXRlcygpO1xuICAgIGNvbnN0IGRlbHRhWFkgPSBjb29yZGluYXRlcyA/IHRoaXMuZ2V0RGVsdGFYWSh7XG4gICAgICB4LCB5LCBjb29yZGluYXRlc1xuICAgIH0pIDogbnVsbDtcbiAgICBjb25zdCBmZWF0dXJlc0xlbmd0aCA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICBjb25zdCBwcm9taXNlc0RlZmF1bHRFdmFsdWF0aW9uID0gW107XG4gICAgZm9yIChsZXQgaSA9MDsgaSA8IGZlYXR1cmVzTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZlYXR1cmUgPSBmZWF0dXJlc1tpXS5jbG9uZU5ldygpO1xuICAgICAgaWYgKGRlbHRhWFkpIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS50cmFuc2xhdGUoZGVsdGFYWS54LCBkZWx0YVhZLnkpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgIGNvbnN0IGRlbHRhWFkgPSB0aGlzLmdldERlbHRhWFkoe1xuICAgICAgICAgIHgsIHksIGNvb3JkaW5hdGVzXG4gICAgICAgIH0pO1xuICAgICAgICBmZWF0dXJlLmdldEdlb21ldHJ5KCkudHJhbnNsYXRlKGRlbHRhWFkueCwgZGVsdGFYWS55KVxuICAgICAgfVxuICAgICAgdGhpcy5zZXROdWxsTWVkaWFGaWVsZHMoe1xuICAgICAgICBmZWF0dXJlLFxuICAgICAgICBsYXllclxuICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIGV2YWx1YXRlZCBnZW9tZXRyeSBleHByZXNzaW9uXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmV2YWx1YXRlR2VvbWV0cnlFeHByZXNzaW9uRmllbGQoe1xuICAgICAgICBpbnB1dHMsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGZlYXR1cmVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBwcm9taXNlc0RlZmF1bHRFdmFsdWF0aW9uLnB1c2gocHJvbWlzZSlcbiAgICB9XG5cbiAgICBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXNEZWZhdWx0RXZhbHVhdGlvbilcbiAgICAgIC50aGVuKHByb21pc2VzID0+IHtcbiAgICAgICAgcHJvbWlzZXMuZm9yRWFjaCgoe3N0YXR1cywgdmFsdWU6ZmVhdHVyZX0pID0+IHtcbiAgICAgICAgICBzb3VyY2UuYWRkRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICBzZXNzaW9uLnB1c2hBZGQobGF5ZXJJZCwgZmVhdHVyZSk7XG4gICAgICAgICAgaW5wdXRzLmZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9zdGVwcy50by5kb25lID0gdHJ1ZTtcbiAgICAgICAgZC5yZXNvbHZlKGlucHV0cyk7XG4gICAgICB9KVxuICB9KTtcblxuICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMuX2RyYXdJbnRlcmFjdGlvbik7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fc25hcEl0ZXJhY3Rpb24pO1xuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuX2RyYXdJbnRlcmFjdGlvbik7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fc25hcEl0ZXJhY3Rpb24pO1xuICB0aGlzLl9kcmF3SW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLl9zbmFwSXRlcmFjdGlvbiA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3ZlRWxlbWVudHNUYXNrO1xuIiwiY29uc3Qge2Jhc2UsIGluaGVyaXR9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCBFZGl0aW5nVGFzayA9IHJlcXVpcmUoJy4vZWRpdGluZ3Rhc2snKTtcblxuZnVuY3Rpb24gTW92ZUZlYXR1cmVUYXNrKG9wdGlvbnMpe1xuICB0aGlzLmRyYXdJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMucHJvbWlzZTsgLy8gbmVlZCB0byBiZSBzZXQgaGVyZSBpbiBjYXNlIG9mIHBpY2tlZCBmZWF0dXJlc1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KE1vdmVGZWF0dXJlVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IE1vdmVGZWF0dXJlVGFzay5wcm90b3R5cGU7XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICB0aGlzLnByb21pc2UgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IG9yaWdpbmFsTGF5ZXIgPSBpbnB1dHMubGF5ZXI7XG4gIGNvbnN0IHNlc3Npb24gPSBjb250ZXh0LnNlc3Npb247XG4gIGNvbnN0IGxheWVySWQgPSBvcmlnaW5hbExheWVyLmdldElkKCk7XG4gIGNvbnN0IGZlYXR1cmVzID0gbmV3IG9sLkNvbGxlY3Rpb24oaW5wdXRzLmZlYXR1cmVzKTtcbiAgbGV0IG9yaWdpbmFsRmVhdHVyZSA9IG51bGw7XG4gIHRoaXMuY2hhbmdlS2V5ID0gbnVsbDsgLy9cbiAgbGV0IGlzR2VvbWV0cnlDaGFuZ2UgPSBmYWxzZTsgLy8gY2hhbmdlZCBpZiBnZW9tZXRyeSBpcyBjaGFuZ2VkXG5cbiAgdGhpcy5zZXRBbmRVbnNldFNlbGVjdGVkRmVhdHVyZXNTdHlsZSh7XG4gICAgcHJvbWlzZTogdGhpcy5wcm9taXNlLFxuICB9KTtcblxuICB0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5UcmFuc2xhdGUoe1xuICAgIGZlYXR1cmVzLFxuICAgIGhpdFRvbGVyYW5jZTogKGlzTW9iaWxlICYmIGlzTW9iaWxlLmFueSkgPyAxMCA6IDBcbiAgfSk7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fdHJhbnNsYXRlSW50ZXJhY3Rpb24pO1xuXG4gIHRoaXMuX3RyYW5zbGF0ZUludGVyYWN0aW9uLm9uKCd0cmFuc2xhdGVzdGFydCcsIGV2dCA9PiB7XG4gICAgY29uc3QgZmVhdHVyZSA9IGV2dC5mZWF0dXJlcy5nZXRBcnJheSgpWzBdO1xuICAgIHRoaXMuY2hhbmdlS2V5ID0gZmVhdHVyZS5vbmNlKCdjaGFuZ2UnLCAoKSA9PiBpc0dlb21ldHJ5Q2hhbmdlID0gdHJ1ZSk7XG4gICAgb3JpZ2luYWxGZWF0dXJlID0gZmVhdHVyZS5jbG9uZSgpO1xuICB9KTtcblxuICB0aGlzLl90cmFuc2xhdGVJbnRlcmFjdGlvbi5vbigndHJhbnNsYXRlZW5kJywgZXZ0ID0+IHtcbiAgICBvbC5PYnNlcnZhYmxlLnVuQnlLZXkodGhpcy5jaGFuZ2VLZXkpO1xuICAgIGNvbnN0IGZlYXR1cmUgPSBldnQuZmVhdHVyZXMuZ2V0QXJyYXkoKVswXTtcbiAgICBpZiAoaXNHZW9tZXRyeUNoYW5nZSkge1xuICAgICAgLyoqXG4gICAgICAgKiBldmFsdWF0ZWQgZ2VvbWV0cnkgZXhwcmVzc2lvblxuICAgICAgICovXG4gICAgICB0aGlzLmV2YWx1YXRlR2VvbWV0cnlFeHByZXNzaW9uRmllbGQoe1xuICAgICAgICBpbnB1dHMsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGZlYXR1cmVcbiAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdGZWF0dXJlID0gZmVhdHVyZS5jbG9uZSgpO1xuICAgICAgICBzZXNzaW9uLnB1c2hVcGRhdGUobGF5ZXJJZCwgbmV3RmVhdHVyZSwgb3JpZ2luYWxGZWF0dXJlKTtcbiAgICAgICAgdGhpcy5wcm9taXNlLnJlc29sdmUoaW5wdXRzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB0aGlzLnByb21pc2UucmVzb2x2ZShpbnB1dHMpO1xuICB9KTtcblxuICByZXR1cm4gdGhpcy5wcm9taXNlLnByb21pc2UoKVxufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb21pc2UucmVzb2x2ZSgpO1xuICB0aGlzLnJlbW92ZUludGVyYWN0aW9uKHRoaXMuX3RyYW5zbGF0ZUludGVyYWN0aW9uKTtcbiAgdGhpcy5fdHJhbnNsYXRlSW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLmNoYW5nZUtleSA9IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdmVGZWF0dXJlVGFzaztcbiIsImltcG9ydCBTYXZlQWxsIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1NhdmVBbGwudnVlXCI7XG5jb25zdCB7YmFzZSwgaW5oZXJpdH0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHtHVUl9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHtXb3JrZmxvd3NTdGFja30gPSBnM3dzZGsuY29yZS53b3JrZmxvdztcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuY29uc3QgRWRpdGluZ0Zvcm1Db21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi8uLi9mb3JtL2VkaXRpbmdmb3JtJyk7XG5cbmZ1bmN0aW9uIE9wZW5Gb3JtVGFzayhvcHRpb25zPXt9KSB7XG4gIHRoaXMuX2VkaXRfcmVsYXRpb25zID0gb3B0aW9ucy5lZGl0X3JlbGF0aW9ucyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMuX2VkaXRfcmVsYXRpb25zO1xuICB0aGlzLl9mb3JtSWRQcmVmaXggPSAnZm9ybV8nO1xuICB0aGlzLmxheWVySWQ7XG4gIHRoaXMuX2lzQ29udGVudENoaWxkID0gZmFsc2U7XG4gIHRoaXMuX2ZlYXR1cmVzO1xuICB0aGlzLl9vcmlnaW5hbExheWVyO1xuICB0aGlzLl9lZGl0aW5nTGF5ZXI7XG4gIHRoaXMuX2xheWVyTmFtZTtcbiAgdGhpcy5fb3JpZ2luYWxGZWF0dXJlcztcbiAgdGhpcy5fZmllbGRzO1xuICB0aGlzLl9zZXNzaW9uO1xuICB0aGlzLl9lZGl0b3JGb3JtU3RydWN0dXJlO1xuICB0aGlzLnByb21pc2U7XG4gIHRoaXMuX211bHRpID0gb3B0aW9ucy5tdWx0aSB8fCBmYWxzZTsgLy8gc2V0IGlmIGNhbiBoYW5kbGUgbXVsdGkgZWRpdCBmZWF0dXJlc1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KE9wZW5Gb3JtVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wZW5Gb3JtVGFzaztcblxuY29uc3QgcHJvdG8gPSBPcGVuRm9ybVRhc2sucHJvdG90eXBlO1xuXG5wcm90by5fZ2V0Rm9ybSA9IGFzeW5jIGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICB0aGlzLl9zZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICB0aGlzLl9vcmlnaW5hbExheWVyID0gaW5wdXRzLmxheWVyO1xuICB0aGlzLl9lZGl0aW5nTGF5ZXIgPSB0aGlzLl9vcmlnaW5hbExheWVyLmdldEVkaXRpbmdMYXllcigpO1xuICB0aGlzLl9sYXllck5hbWUgPSB0aGlzLl9vcmlnaW5hbExheWVyLmdldE5hbWUoKTtcbiAgdGhpcy5fZmVhdHVyZXMgPSB0aGlzLl9tdWx0aSA/IGlucHV0cy5mZWF0dXJlcyA6IFtpbnB1dHMuZmVhdHVyZXNbaW5wdXRzLmZlYXR1cmVzLmxlbmd0aCAtIDFdXTtcbiAgdGhpcy5fb3JpZ2luYWxGZWF0dXJlcyA9IHRoaXMuX2ZlYXR1cmVzLm1hcChmZWF0dXJlID0+IGZlYXR1cmUuY2xvbmUoKSk7XG4gIGNvbnN0IGZlYXR1cmUgPSB0aGlzLl9mZWF0dXJlc1swXTtcbiAgLyoqXG4gICAqIEluIGNhc2Ugb2YgY3JlYXRlIGEgY2hpbGQgcmVsYXRpb24gZmVhdHVyZSBzZXQgYSBmYXRoZXIgcmVsYXRpb24gZmllbGQgdmFsdWVcbiAgICovXG4gIGlmICh0aGlzLl9pc0NvbnRlbnRDaGlsZCkge1xuICAgIGNvbnN0IHtmYXRoZXJWYWx1ZSwgZmF0aGVyRmllbGR9ID0gY29udGV4dDtcbiAgICBpZiAodHlwZW9mIGZhdGhlckZpZWxkICE9PSBcInVuZGVmaW5lZFwiKSAge1xuICAgICAgZmVhdHVyZS5zZXQoZmF0aGVyRmllbGQsIGZhdGhlclZhbHVlKTtcbiAgICAgIHRoaXMuX29yaWdpbmFsRmVhdHVyZXNbMF0uc2V0KGZhdGhlckZpZWxkLCBmYXRoZXJWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHRoaXMuX2ZpZWxkcyA9IGF3YWl0IHRoaXMuZ2V0Rm9ybUZpZWxkcyh7XG4gICAgaW5wdXRzLFxuICAgIGNvbnRleHQsXG4gICAgZmVhdHVyZSxcbiAgICBpc0NoaWxkOiB0aGlzLl9pc0NvbnRlbnRDaGlsZFxuICB9KTtcbiAgLy8gaW4gY2FzZSBvZiBtdWx0aSBlZGl0aW5nIHNldCBhbGwgZmllbGQgdG8gbnVsbCAvL1xuICB0aGlzLl9maWVsZHMgPSB0aGlzLl9tdWx0aSA/IHRoaXMuX2ZpZWxkcy5tYXAoZmllbGQgPT4ge1xuICAgIGNvbnN0IF9maWVsZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZmllbGQpKTtcbiAgICBfZmllbGQudmFsdWUgPSBudWxsO1xuICAgIF9maWVsZC5mb3JjZU51bGwgPSB0cnVlO1xuICAgIF9maWVsZC52YWxpZGF0ZS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBfZmllbGQ7XG4gIH0pLmZpbHRlcihmaWVsZCA9PiAhZmllbGQucGspIDogdGhpcy5fZmllbGRzO1xuICBpZiAodGhpcy5fb3JpZ2luYWxMYXllci5oYXNGb3JtU3RydWN0dXJlKCkpIHtcbiAgICBjb25zdCBlZGl0b3JGb3JtU3RydWN0dXJlID0gdGhpcy5fb3JpZ2luYWxMYXllci5nZXRFZGl0b3JGb3JtU3RydWN0dXJlKCk7XG4gICAgdGhpcy5fZWRpdG9yRm9ybVN0cnVjdHVyZSA9IGVkaXRvckZvcm1TdHJ1Y3R1cmUubGVuZ3RoID8gZWRpdG9yRm9ybVN0cnVjdHVyZSA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gR1VJLnNob3dDb250ZW50RmFjdG9yeSgnZm9ybScpO1xufTtcblxucHJvdG8uX2NhbmNlbEZuYyA9IGZ1bmN0aW9uKHByb21pc2UsIGlucHV0cykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLl9pc0NvbnRlbnRDaGlsZCl7XG4gICAgICBHVUkuc2V0TW9kYWwoZmFsc2UpO1xuICAgICAgLy8gZmlyZSBldmVudCBjYW5jZWwgZm9ybSB0byBlbWl0IHRvIHN1YnNjcml2ZXJzXG4gICAgICB0aGlzLmZpcmVFdmVudCgnY2FuY2VsZm9ybScsIGlucHV0cy5mZWF0dXJlcyk7XG4gICAgfVxuICAgIHByb21pc2UucmVqZWN0KGlucHV0cyk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBmaWVsZHNzZXRBbmRVbnNldFNlbGVjdGVkRmVhdHVyZXNTdHlsZVxuICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59XG4gKi9cbnByb3RvLnNhdmVBbGwgPSBmdW5jdGlvbihmaWVsZHMpe1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHtzZXNzaW9ufSA9IHRoaXMuZ2V0Q29udGV4dCgpO1xuICAgIGNvbnN0IGlucHV0cyA9IHRoaXMuZ2V0SW5wdXRzKCk7XG4gICAgZmllbGRzID0gdGhpcy5fbXVsdGkgPyBmaWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLnZhbHVlICE9PSBudWxsKSA6IGZpZWxkcztcbiAgICBpZiAoZmllbGRzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbmV3RmVhdHVyZXMgPSBbXTtcbiAgICAgIHRoaXMuX2ZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PntcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxMYXllci5zZXRGaWVsZHNXaXRoVmFsdWVzKGZlYXR1cmUsIGZpZWxkcyk7XG4gICAgICAgIG5ld0ZlYXR1cmVzLnB1c2goZmVhdHVyZS5jbG9uZSgpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuX2lzQ29udGVudENoaWxkKSB7XG4gICAgICAgIGlucHV0cy5yZWxhdGlvbkZlYXR1cmVzID0ge1xuICAgICAgICAgIG5ld0ZlYXR1cmVzLFxuICAgICAgICAgIG9yaWdpbmFsRmVhdHVyZXM6IHRoaXMuX29yaWdpbmFsRmVhdHVyZXNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdzYXZlZm9ybScsIHtcbiAgICAgICAgbmV3RmVhdHVyZXMsXG4gICAgICAgIG9yaWdpbmFsRmVhdHVyZXM6IHRoaXMuX29yaWdpbmFsRmVhdHVyZXNcbiAgICAgIH0pLnRoZW4oKCk9PiB7XG4gICAgICAgIG5ld0ZlYXR1cmVzLmZvckVhY2goKG5ld0ZlYXR1cmUsIGluZGV4KT0+IHtcbiAgICAgICAgICBzZXNzaW9uLnB1c2hVcGRhdGUodGhpcy5sYXllcklkLCBuZXdGZWF0dXJlLCB0aGlzLl9vcmlnaW5hbEZlYXR1cmVzW2luZGV4XSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpcmVFdmVudCgnc2F2ZWRmZWF0dXJlJywgbmV3RmVhdHVyZXMpOyAvLyBjYWxsZWQgYWZ0ZXIgc2F2ZWRcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoYHNhdmVkZmVhdHVyZV8ke3RoaXMubGF5ZXJJZH1gLCBuZXdGZWF0dXJlcyk7IC8vIGNhbGxlZCBhZnRlciBzYXZlZCB1c2luZyBsYXllcklkXG4gICAgICAgIHNlc3Npb24uc2F2ZSgpO1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBwcm9taXNlOiB0aGlzLnByb21pc2VcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgIH1cbiAgfSlcbn07XG5cbnByb3RvLl9zYXZlRmVhdHVyZXMgPSBmdW5jdGlvbih7ZmllbGRzLCBwcm9taXNlLCBzZXNzaW9uLCBpbnB1dHN9KXtcbiAgZmllbGRzID0gdGhpcy5fbXVsdGkgPyBmaWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLnZhbHVlICE9PSBudWxsKSA6IGZpZWxkcztcbiAgaWYgKGZpZWxkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuZXdGZWF0dXJlcyA9IFtdO1xuICAgIHRoaXMuX2ZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PntcbiAgICAgIHRoaXMuX29yaWdpbmFsTGF5ZXIuc2V0RmllbGRzV2l0aFZhbHVlcyhmZWF0dXJlLCBmaWVsZHMpO1xuICAgICAgbmV3RmVhdHVyZXMucHVzaChmZWF0dXJlLmNsb25lKCkpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLl9pc0NvbnRlbnRDaGlsZCkge1xuICAgICAgaW5wdXRzLnJlbGF0aW9uRmVhdHVyZXMgPSB7XG4gICAgICAgIG5ld0ZlYXR1cmVzLFxuICAgICAgICBvcmlnaW5hbEZlYXR1cmVzOiB0aGlzLl9vcmlnaW5hbEZlYXR1cmVzXG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmZpcmVFdmVudCgnc2F2ZWZvcm0nLCB7XG4gICAgICBuZXdGZWF0dXJlcyxcbiAgICAgIG9yaWdpbmFsRmVhdHVyZXM6IHRoaXMuX29yaWdpbmFsRmVhdHVyZXNcbiAgICB9KS50aGVuKCgpPT4ge1xuICAgICAgbmV3RmVhdHVyZXMuZm9yRWFjaCgobmV3RmVhdHVyZSwgaW5kZXgpPT57XG4gICAgICAgIHNlc3Npb24ucHVzaFVwZGF0ZSh0aGlzLmxheWVySWQsIG5ld0ZlYXR1cmUsIHRoaXMuX29yaWdpbmFsRmVhdHVyZXNbaW5kZXhdKTtcbiAgICAgIH0pO1xuICAgICAgR1VJLnNldE1vZGFsKGZhbHNlKTtcbiAgICAgIHRoaXMuZmlyZUV2ZW50KCdzYXZlZGZlYXR1cmUnLCBuZXdGZWF0dXJlcyk7IC8vIGNhbGxlZCBhZnRlciBzYXZlZFxuICAgICAgdGhpcy5maXJlRXZlbnQoYHNhdmVkZmVhdHVyZV8ke3RoaXMubGF5ZXJJZH1gLCBuZXdGZWF0dXJlcyk7IC8vIGNhbGxlZCBhZnRlciBzYXZlZCB1c2luZyBsYXllcklkXG4gICAgICAvLyBJbiBjYXNlIG9mIHNhdmUgb2YgY2hpbGQgaXQgbWVhbiB0aGF0IGNoaWxkIGlzIHVwZGF0ZWQgc28gYWxzbyBwYXJlbnRcbiAgICAgIHRoaXMuX2lzQ29udGVudENoaWxkICYmIFdvcmtmbG93c1N0YWNrLmdldFBhcmVudHMoKS5mb3JFYWNoKHdvcmtmbG93ID0+IHdvcmtmbG93LmdldENvbnRleHQoKS5zZXJ2aWNlLnNldFVwZGF0ZSh0cnVlLCB7XG4gICAgICAgIGZvcmNlOiB0cnVlXG4gICAgICB9KSk7XG4gICAgICBwcm9taXNlLnJlc29sdmUoaW5wdXRzKTtcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIEdVSS5zZXRNb2RhbChmYWxzZSk7XG4gICAgcHJvbWlzZS5yZXNvbHZlKGlucHV0cyk7XG4gIH1cbn07XG5cbnByb3RvLl9zYXZlRm5jID0gZnVuY3Rpb24ocHJvbWlzZSwgY29udGV4dCwgaW5wdXRzKSB7XG4gIHJldHVybiBmdW5jdGlvbihmaWVsZHMpIHtcbiAgICBjb25zdCBzZXNzaW9uID0gY29udGV4dC5zZXNzaW9uO1xuICAgIHRoaXMuX3NhdmVGZWF0dXJlcyh7XG4gICAgICBmaWVsZHMsXG4gICAgICBwcm9taXNlLFxuICAgICAgc2Vzc2lvbixcbiAgICAgIGlucHV0c1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIEJ1aWxkIGZvcm1cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAqL1xucHJvdG8uc3RhcnRGb3JtID0gYXN5bmMgZnVuY3Rpb24ob3B0aW9ucyA9IHt9KSB7XG4gIHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5zZXRDdXJyZW50TGF5b3V0KCk7XG4gIGNvbnN0IHsgaW5wdXRzLCBjb250ZXh0LCBwcm9taXNlIH0gPSBvcHRpb25zO1xuICBjb25zdCB7IHNlc3Npb24gfSA9IGNvbnRleHQ7XG4gIGNvbnN0IGZvcm1Db21wb25lbnQgPSBvcHRpb25zLmZvcm1Db21wb25lbnQgfHwgRWRpdGluZ0Zvcm1Db21wb25lbnQ7XG4gIGNvbnN0IEZvcm0gPSBhd2FpdCB0aGlzLl9nZXRGb3JtKGlucHV0cywgY29udGV4dCk7XG4gIGNvbnN0IGZlYXR1cmUgPSB0aGlzLl9vcmlnaW5hbEZlYXR1cmVzWzBdO1xuICBjb25zdCBpc25ldyA9IHRoaXMuX29yaWdpbmFsRmVhdHVyZXMubGVuZ3RoID4gMSA/IGZhbHNlIDogZmVhdHVyZS5pc05ldygpO1xuXG4gIC8qKlxuICAgKiBzZXQgZmllbGRzLiBVc2VmdWwgZ2V0UGFyZW50Rm9ybURhdGFcbiAgICovXG4gIFdvcmtmbG93c1N0YWNrLmdldEN1cnJlbnQoKS5zZXRJbnB1dCh7XG4gICAga2V5OiAnZmllbGRzJyxcbiAgICB2YWx1ZTogdGhpcy5fZmllbGRzXG4gIH0pO1xuXG4gIGNvbnN0IGZvcm1TZXJ2aWNlID0gRm9ybSh7XG4gICAgZm9ybUNvbXBvbmVudCxcbiAgICB0aXRsZTogXCJwbHVnaW5zLmVkaXRpbmcuZWRpdGluZ19hdHRyaWJ1dGVzXCIsXG4gICAgbmFtZTogdGhpcy5fbGF5ZXJOYW1lLFxuICAgIGNydW1iOiB7XG4gICAgICB0aXRsZTogdGhpcy5fbGF5ZXJOYW1lXG4gICAgfSxcbiAgICBpZDogdGhpcy5fZ2VuZXJhdGVGb3JtSWQodGhpcy5fbGF5ZXJOYW1lKSxcbiAgICBkYXRhaWQ6IHRoaXMuX2xheWVyTmFtZSxcbiAgICBsYXllcjogdGhpcy5fb3JpZ2luYWxMYXllcixcbiAgICBpc25ldywgLy8gc3BlY2lmeSBpZiBpcyBhIG5ldyBmZWF0dXJlXG4gICAgZmVhdHVyZSxcbiAgICBwYXJlbnREYXRhOiB0aGlzLmdldFBhcmVudEZvcm1EYXRhKCksXG4gICAgZmllbGRzOiB0aGlzLl9maWVsZHMsXG4gICAgY29udGV4dF9pbnB1dHM6ICF0aGlzLl9tdWx0aSAmJiB0aGlzLl9lZGl0X3JlbGF0aW9ucyAmJiB7XG4gICAgICBjb250ZXh0LFxuICAgICAgaW5wdXRzXG4gICAgfSxcbiAgICBmb3JtU3RydWN0dXJlOiB0aGlzLl9lZGl0b3JGb3JtU3RydWN0dXJlLFxuICAgIG1vZGFsOiB0cnVlLFxuICAgIHB1c2g6IHRoaXMuX2lzQ29udGVudENoaWxkLFxuICAgIHNob3dnb2JhY2s6ICF0aGlzLl9pc0NvbnRlbnRDaGlsZCxcbiAgICBoZWFkZXJDb21wb25lbnQ6U2F2ZUFsbCxcbiAgICBidXR0b25zOlt7XG4gICAgICBpZDogJ3NhdmUnLFxuICAgICAgdGl0bGU6IHRoaXMuX2lzQ29udGVudENoaWxkID8gXCJwbHVnaW5zLmVkaXRpbmcuZm9ybS5idXR0b25zLnNhdmVfYW5kX2JhY2tcIiA6IFwicGx1Z2lucy5lZGl0aW5nLmZvcm0uYnV0dG9ucy5zYXZlXCIsXG4gICAgICB0eXBlOiBcInNhdmVcIixcbiAgICAgIGNsYXNzOiBcImJ0bi1zdWNjZXNzXCIsXG4gICAgICBjYms6IHRoaXMuX3NhdmVGbmMocHJvbWlzZSwgY29udGV4dCwgaW5wdXRzKS5iaW5kKHRoaXMpXG4gICAgfSwge1xuICAgICAgaWQ6ICdjYW5jZWwnLFxuICAgICAgdGl0bGU6IFwicGx1Z2lucy5lZGl0aW5nLmZvcm0uYnV0dG9ucy5jYW5jZWxcIixcbiAgICAgIHR5cGU6IFwiY2FuY2VsXCIsXG4gICAgICBjbGFzczogXCJidG4tZGFuZ2VyXCIsXG4gICAgICAvLy8gYnV0dG9ucyBpbiBjYXNlIG9mIGNoYW5nZVxuICAgICAgZXZlbnRCdXR0b25zOiB7XG4gICAgICAgIHVwZGF0ZToge1xuICAgICAgICAgIGZhbHNlIDoge1xuICAgICAgICAgICAgaWQ6ICdjbG9zZScsXG4gICAgICAgICAgICB0aXRsZTogXCJjbG9zZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJjYW5jZWxcIixcbiAgICAgICAgICAgIGNsYXNzOiBcImJ0bi1kYW5nZXJcIixcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYms6IHRoaXMuX2NhbmNlbEZuYyhwcm9taXNlLCBpbnB1dHMpLmJpbmQodGhpcylcbiAgICB9XVxuICB9KTtcbiAgdGhpcy5maXJlRXZlbnQoJ29wZW5mb3JtJyxcbiAgICB7XG4gICAgICBsYXllcklkOnRoaXMubGF5ZXJJZCxcbiAgICAgIHNlc3Npb24sXG4gICAgICBmZWF0dXJlOiB0aGlzLl9vcmlnaW5hbEZlYXR1cmUsXG4gICAgICBmb3JtU2VydmljZVxuICAgIH0pO1xuICBjb25zdCBjdXJyZW50V29ya2Zsb3cgPSBXb3JrZmxvd3NTdGFjay5nZXRDdXJyZW50KCk7XG4gIC8vIGluIGNhc2Ugb2YgY2FsbGVkIHNpbmdsZSB0YXNrIG5vIHdvcmtmbG93IGlzIHNldFxuICBjdXJyZW50V29ya2Zsb3cgJiYgY3VycmVudFdvcmtmbG93LnNldENvbnRleHRTZXJ2aWNlKGZvcm1TZXJ2aWNlKTtcbn07XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCkge1xuICBjb25zdCBkID0gJC5EZWZlcnJlZCgpO1xuICB0aGlzLnByb21pc2UgPSBkO1xuICB0aGlzLl9pc0NvbnRlbnRDaGlsZCA9IFdvcmtmbG93c1N0YWNrLmdldExlbmd0aCgpID4gMTtcbiAgY29uc3QgeyBsYXllciwgZmVhdHVyZXMgfSA9IGlucHV0cztcbiAgdGhpcy5sYXllcklkID0gbGF5ZXIuZ2V0SWQoKTtcbiAgR1VJLnNldExvYWRpbmdDb250ZW50KGZhbHNlKTtcbiAgdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmRpc2FibGVNYXBDb250cm9sc0NvbmZsaWN0KHRydWUpO1xuXG4gIHRoaXMuc2V0QW5kVW5zZXRTZWxlY3RlZEZlYXR1cmVzU3R5bGUoe1xuICAgIHByb21pc2U6IGRcbiAgfSk7XG5cbiAgaWYgKCF0aGlzLl9tdWx0aSAmJiBBcnJheS5pc0FycmF5KGZlYXR1cmVzW2ZlYXR1cmVzLmxlbmd0aCAtMV0pKSB7XG4gICAgZC5yZXNvbHZlKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEZvcm0oe1xuICAgICAgaW5wdXRzLFxuICAgICAgY29udGV4dCxcbiAgICAgIHByb21pc2U6IGRcbiAgICB9KTtcbiAgICB0aGlzLmRpc2FibGVTaWRlYmFyKHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIGQucHJvbWlzZSgpO1xufTtcblxucHJvdG8uX2dlbmVyYXRlRm9ybUlkID0gZnVuY3Rpb24obGF5ZXJOYW1lKSB7XG4gIHJldHVybiB0aGlzLl9mb3JtSWRQcmVmaXggKyBsYXllck5hbWU7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGlzYWJsZVNpZGViYXIoZmFsc2UpO1xuICBpZiAoIXRoaXMuX2lzQ29udGVudENoaWxkKSB7XG4gICAgdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLmRpc2FibGVNYXBDb250cm9sc0NvbmZsaWN0KGZhbHNlKTtcbiAgICAvLyBhdCB0aGUgZW5kIGlmIGlzIHRoZSBwYXJlbnQgZm9ybSBzZXQgaXQgdG8gZmFsc2UgdXBkYXRlLCBhbmQgZm9yY2UgdXBkYXRlXG4gICAgV29ya2Zsb3dzU3RhY2suZ2V0Q3VycmVudCgpLmdldENvbnRleHQoKS5zZXJ2aWNlLnNldFVwZGF0ZShmYWxzZSwge1xuICAgICAgZm9yY2U6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgR1VJLmNsb3NlRm9ybSh7XG4gICAgcG9wOiB0aGlzLl9pc0NvbnRlbnRDaGlsZFxuICB9KTtcbiAgdGhpcy5nZXRFZGl0aW5nU2VydmljZSgpLnJlc2V0Q3VycmVudExheW91dCgpO1xuICB0aGlzLmZpcmVFdmVudCgnY2xvc2Vmb3JtJyk7XG4gIHRoaXMuZmlyZUV2ZW50KGBjbG9zZWZvcm1fJHt0aGlzLmxheWVySWR9YCk7IC8vIG5lZWQgdG8gY2hlY2sgbGF5ZXJJZFxuICB0aGlzLmxheWVySWQgPSBudWxsO1xuICB0aGlzLnByb21pc2UgPSBudWxsO1xufTsiLCJjb25zdCB7aW5oZXJpdCwgYmFzZX0gPSBnM3dzZGsuY29yZS51dGlscztcbmNvbnN0IHtHVUl9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IHtXb3JrZmxvd3NTdGFja30gPSBnM3dzZGsuY29yZS53b3JrZmxvdztcbmNvbnN0IFRhYmxlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vLi4vZzN3LWVkaXRpbmctY29tcG9uZW50cy90YWJsZScpO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmZ1bmN0aW9uIE9wZW5UYWJsZVRhc2sob3B0aW9ucz17fSkge1xuICB0aGlzLl9mb3JtSWRQcmVmaXggPSAnZm9ybV8nO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KE9wZW5UYWJsZVRhc2ssIEVkaXRpbmdUYXNrKTtcblxuY29uc3QgcHJvdG8gPSBPcGVuVGFibGVUYXNrLnByb3RvdHlwZTtcblxucHJvdG8ucnVuID0gZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0KSB7XG4gIHRoaXMuZ2V0RWRpdGluZ1NlcnZpY2UoKS5zZXRDdXJyZW50TGF5b3V0KCk7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGNvbnN0IG9yaWdpbmFsTGF5ZXIgPSBpbnB1dHMubGF5ZXI7XG4gIGNvbnN0IGxheWVyTmFtZSA9IG9yaWdpbmFsTGF5ZXIuZ2V0TmFtZSgpO1xuICBjb25zdCBoZWFkZXJzID0gb3JpZ2luYWxMYXllci5nZXRFZGl0aW5nRmllbGRzKCk7XG4gIHRoaXMuX2lzQ29udGVudENoaWxkID0gV29ya2Zsb3dzU3RhY2suZ2V0TGVuZ3RoKCkgPiAxO1xuICBjb25zdCBmb3JlaWduS2V5ID0gdGhpcy5faXNDb250ZW50Q2hpbGQgJiYgY29udGV4dC5leGNsdWRlRmllbGRzID8gY29udGV4dC5leGNsdWRlRmllbGRzWzBdIDogIG51bGw7XG4gIGNvbnN0IGV4Y2x1ZGUgPSB0aGlzLl9pc0NvbnRlbnRDaGlsZCAmJiBjb250ZXh0LmV4Y2x1ZGU7XG4gIGNvbnN0IGNhcGFiaWxpdGllcyA9IG9yaWdpbmFsTGF5ZXIuZ2V0RWRpdGluZ0NhcGFiaWxpdGllcygpO1xuICBjb25zdCBlZGl0aW5nTGF5ZXIgPSBvcmlnaW5hbExheWVyLmdldEVkaXRpbmdMYXllcigpO1xuICBsZXQgZmVhdHVyZXMgPSBlZGl0aW5nTGF5ZXIucmVhZEVkaXRpbmdGZWF0dXJlcygpO1xuICBpZiAoZXhjbHVkZSAmJiBmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICBjb25zdCB7dmFsdWV9ID0gZXhjbHVkZTtcbiAgICBmZWF0dXJlcyA9IGZlYXR1cmVzLmZpbHRlcihmZWF0dXJlID0+IHtcbiAgICAgIGNvbnN0IGZlYXR1cmVWYWx1ZSA9IGZlYXR1cmUuZ2V0KGZvcmVpZ25LZXkpO1xuICAgICAgcmV0dXJuIGZlYXR1cmVWYWx1ZSAhPSB2YWx1ZTtcbiAgICB9KVxuICB9XG4gIGNvbnN0IGNvbnRlbnQgPSBuZXcgVGFibGVDb21wb25lbnQoe1xuICAgIHRpdGxlOiBgJHtsYXllck5hbWV9YCxcbiAgICBmZWF0dXJlcyxcbiAgICBwcm9taXNlOiBkLFxuICAgIHB1c2g6IHRoaXMuX2lzQ29udGVudENoaWxkLFxuICAgIGhlYWRlcnMsXG4gICAgY29udGV4dCxcbiAgICBpbnB1dHMsXG4gICAgY2FwYWJpbGl0aWVzLFxuICAgIGZhdGhlclZhbHVlOiBjb250ZXh0LmZhdGhlclZhbHVlLFxuICAgIGZvcmVpZ25LZXlcbiAgfSk7XG4gIEdVSS5kaXNhYmxlU2lkZUJhcih0cnVlKTtcbiAgR1VJLnNob3dVc2VyTWVzc2FnZSh7XG4gICAgdHlwZTogJ2xvYWRpbmcnLFxuICAgIG1lc3NhZ2U6ICdwbHVnaW5zLmVkaXRpbmcubWVzc2FnZXMubG9hZGluZ190YWJsZV9kYXRhJyxcbiAgICBhdXRvY2xvc2U6IGZhbHNlLFxuICAgIGNsb3NhYmxlOiBmYWxzZVxuICB9KTtcblxuICBzZXRUaW1lb3V0KCgpPT57XG4gICAgY29udGVudC5vbmNlKCdyZWFkeScsICgpPT4gc2V0VGltZW91dCgoKT0+IHtcbiAgICAgIEdVSS5kaXNhYmxlU2lkZUJhcihmYWxzZSk7XG4gICAgICBHVUkuY2xvc2VVc2VyTWVzc2FnZSgpO1xuICAgIH0pKTtcbiAgICBHVUkuc2hvd0NvbnRlbnQoe1xuICAgICAgY29udGVudCxcbiAgICAgIC8vcGVyYzogMTAwLFxuICAgICAgcHVzaDogdGhpcy5faXNDb250ZW50Q2hpbGQsXG4gICAgICBzaG93Z29iYWNrOiBmYWxzZSxcbiAgICAgIGNsb3NhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9LCAzMDApO1xuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG5wcm90by5fZ2VuZXJhdGVGb3JtSWQgPSBmdW5jdGlvbihsYXllck5hbWUpIHtcbiAgcmV0dXJuIGAke3RoaXMuX2Zvcm1JZFByZWZpeH0ke2xheWVyTmFtZX1gO1xufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRpc2FibGVTaWRlYmFyKGZhbHNlKTtcbiAgdGhpcy5faXNDb250ZW50Q2hpbGQgPyBHVUkucG9wQ29udGVudCgpIDogR1VJLmNsb3NlQ29udGVudCgpO1xuICB0aGlzLmdldEVkaXRpbmdTZXJ2aWNlKCkucmVzZXRDdXJyZW50TGF5b3V0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wZW5UYWJsZVRhc2s7XG5cbiIsImltcG9ydCB7IFBpY2tGZWF0dXJlc0ludGVyYWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJhY3Rpb25zL3BpY2tmZWF0dXJlc2ludGVyYWN0aW9uJztcbmNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ICA9IGczd3Nkay5jb3JlLnV0aWxzO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmZ1bmN0aW9uIFBpY2tGZWF0dXJlVGFzayhvcHRpb25zPXt9KSB7XG4gIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgaGlnaGxpZ2h0OiBvcHRpb25zLmhpZ2hsaWdodCB8fCBmYWxzZSxcbiAgICBtdWx0aTogb3B0aW9ucy5tdWx0aSB8fCBmYWxzZVxuICB9O1xuICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24gPSBudWxsO1xuICB0aGlzLl9idXN5ID0gZmFsc2U7XG4gIHRoaXMuX3Rvb2xzID0gb3B0aW9ucy50b29scyB8fCBbXTtcbiAgYmFzZSh0aGlzLCBvcHRpb25zKTtcbn1cblxuaW5oZXJpdChQaWNrRmVhdHVyZVRhc2ssIEVkaXRpbmdUYXNrKTtcblxuY29uc3QgcHJvdG8gPSBQaWNrRmVhdHVyZVRhc2sucHJvdG90eXBlO1xuXG5wcm90by5ydW4gPSBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQpIHtcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3QgZWRpdGluZ0xheWVyID0gaW5wdXRzLmxheWVyLmdldEVkaXRpbmdMYXllcigpO1xuXG4gIHRoaXMucGlja0ZlYXR1cmVJbnRlcmFjdGlvbiA9IG5ldyBQaWNrRmVhdHVyZXNJbnRlcmFjdGlvbih7XG4gICAgbGF5ZXI6IGVkaXRpbmdMYXllcixcbiAgfSk7XG5cbiAgdGhpcy5hZGRJbnRlcmFjdGlvbih0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24pO1xuICB0aGlzLnBpY2tGZWF0dXJlSW50ZXJhY3Rpb24ub24oJ3BpY2tlZCcsIGV2dCA9PiB7XG4gICAgY29uc3Qge2ZlYXR1cmVzLCBjb29yZGluYXRlfSA9IGV2dDtcbiAgICBpZiAoaW5wdXRzLmZlYXR1cmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaW5wdXRzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICBpbnB1dHMuY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGU7XG4gICAgfVxuICAgIHRoaXMuc2V0QW5kVW5zZXRTZWxlY3RlZEZlYXR1cmVzU3R5bGUoe1xuICAgICAgcHJvbWlzZTogZFxuICAgIH0pO1xuXG4gICAgdGhpcy5fc3RlcHMgJiYgdGhpcy5zZXRVc2VyTWVzc2FnZVN0ZXBEb25lKCdzZWxlY3QnKTtcbiAgICBkLnJlc29sdmUoaW5wdXRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGQucHJvbWlzZSgpXG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5waWNrRmVhdHVyZUludGVyYWN0aW9uKTtcbiAgdGhpcy5waWNrRmVhdHVyZUludGVyYWN0aW9uID0gbnVsbDtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGlja0ZlYXR1cmVUYXNrO1xuIiwiaW1wb3J0IHtQaWNrRmVhdHVyZXNJbnRlcmFjdGlvbn0gZnJvbSBcIi4uLy4uLy4uL2ludGVyYWN0aW9ucy9waWNrZmVhdHVyZXNpbnRlcmFjdGlvblwiO1xuY29uc3QgeyBQaWNrQ29vcmRpbmF0ZXNJbnRlcmFjdGlvbn0gPSBnM3dzZGsub2wuaW50ZXJhY3Rpb25zO1xuY29uc3Qge0RhdGFSb3V0ZXJTZXJ2aWNlfSA9IGczd3Nkay5jb3JlLmRhdGE7XG5jb25zdCB7UHJvamVjdHNSZWdpc3RyeX0gPSBnM3dzZGsuY29yZS5wcm9qZWN0O1xuY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IEdVSSB9ID0gZzN3c2RrLmd1aTtcbmNvbnN0IEVkaXRpbmdUYXNrID0gcmVxdWlyZSgnLi9lZGl0aW5ndGFzaycpO1xuXG5mdW5jdGlvbiBQaWNrUHJvamVjdExheWVyRmVhdHVyZXNUYXNrKG9wdGlvbnM9e30pIHtcbiAgY29uc3Qge2NvcHlMYXllciwgZXh0ZXJuYWwsIGlzVmVjdG9yfSA9IG9wdGlvbnM7XG4gIHRoaXMuY29weUxheWVyID0gY29weUxheWVyO1xuICB0aGlzLmV4dGVybmFsID0gZXh0ZXJuYWw7XG4gIHRoaXMuaXNWZWN0b3IgPSBpc1ZlY3RvcjtcbiAgdGhpcy5waWNrSW50ZXJhY3Rpb24gPSBudWxsO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KFBpY2tQcm9qZWN0TGF5ZXJGZWF0dXJlc1Rhc2ssIEVkaXRpbmdUYXNrKTtcblxuY29uc3QgcHJvdG8gPSBQaWNrUHJvamVjdExheWVyRmVhdHVyZXNUYXNrLnByb3RvdHlwZTtcblxucHJvdG8ucnVuID0gZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGQgPSAkLkRlZmVycmVkKCk7XG4gIGlmICh0aGlzLmNvcHlMYXllcikge1xuICAgIHRoaXMuZ2V0RmVhdHVyZXNGcm9tTGF5ZXIoe1xuICAgICAgaW5wdXRzLFxuICAgICAgcHJvbWlzZTogZFxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgLy9UTyBETyAgQ3JlYXRlIGEgY29tcG9uZW50IHRoYXQgYXNrIHdoaWNoIHByb2plY3QgbGF5ZXIgd291bGQgbGlrZSB0byBxdWVyeVxuICB9XG4gIHJldHVybiBkLnByb21pc2UoKVxufTtcblxucHJvdG8uZ2V0RmVhdHVyZXNGcm9tTGF5ZXIgPSBhc3luYyBmdW5jdGlvbih7aW5wdXRzLCBwcm9taXNlfT17fSl7XG4gIGxldCBmZWF0dXJlcyA9IFtdO1xuICBjb25zdCBnZW9tZXRyeVR5cGUgPSBpbnB1dHMubGF5ZXIuZ2V0R2VvbWV0cnlUeXBlKCk7XG4gIGNvbnN0IGludGVyYWN0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAodGhpcy5pc1ZlY3Rvcikge1xuICAgICAgLy9JbiBjYXNlIG9mIGV4dGVybmFsIGxheWVyXG4gICAgICBpZiAodGhpcy5leHRlcm5hbCkge1xuICAgICAgICB0aGlzLnBpY2tJbnRlcmFjdGlvbiA9IG5ldyBQaWNrRmVhdHVyZXNJbnRlcmFjdGlvbih7XG4gICAgICAgICAgbGF5ZXI6IHRoaXMuY29weUxheWVyXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMucGlja0ludGVyYWN0aW9uKTtcbiAgICAgICAgdGhpcy5waWNrSW50ZXJhY3Rpb24ub24oJ3BpY2tlZCcsIGV2dCA9PiB7XG4gICAgICAgICAgY29uc3Qge2ZlYXR1cmVzOl9mZWF0dXJlc30gPSBldnQ7XG4gICAgICAgICAgZmVhdHVyZXMgPSB0aGlzLmNvbnZlcnRGZWF0dXJlc0dlb21ldHJ5VG9HZW9tZXRyeVR5cGVPZkxheWVyKHtcbiAgICAgICAgICAgIGZlYXR1cmVzOiBfZmVhdHVyZXMsXG4gICAgICAgICAgICBnZW9tZXRyeVR5cGVcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7ICAgLy9JbiBjYXNlIG9mIFRPQy9QUk9KRUNUIGxheWVyXG4gICAgICAgIHRoaXMucGlja0ludGVyYWN0aW9uID0gbmV3IFBpY2tDb29yZGluYXRlc0ludGVyYWN0aW9uKCk7XG4gICAgICAgIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5waWNrSW50ZXJhY3Rpb24pO1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gUHJvamVjdHNSZWdpc3RyeS5nZXRDdXJyZW50UHJvamVjdCgpO1xuICAgICAgICB0aGlzLnBpY2tJbnRlcmFjdGlvbi5vbmNlKCdwaWNrZWQnLCBhc3luYyBldnQgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZXZ0LmNvb3JkaW5hdGU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhPVtdfSA9IGF3YWl0IERhdGFSb3V0ZXJTZXJ2aWNlLmdldERhdGEoJ3F1ZXJ5OmNvb3JkaW5hdGVzJywge1xuICAgICAgICAgICAgICBpbnB1dHM6IHtcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyxcbiAgICAgICAgICAgICAgICBxdWVyeV9wb2ludF90b2xlcmFuY2U6IHByb2plY3QuZ2V0UXVlcnlQb2ludFRvbGVyYW5jZSgpLFxuICAgICAgICAgICAgICAgIGxheWVySWRzOiBbdGhpcy5jb3B5TGF5ZXIuZ2V0SWQoKV0sXG4gICAgICAgICAgICAgICAgbXVsdGlsYXllcnM6IGZhbHNlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG91dHB1dHM6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZlYXR1cmVzID0gdGhpcy5jb252ZXJ0RmVhdHVyZXNHZW9tZXRyeVRvR2VvbWV0cnlUeXBlT2ZMYXllcih7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXM6IGRhdGFbMF0uZmVhdHVyZXMsXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnlUeXBlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy9UTyBETyBOTyBWRUNUT1IgTEFZRVJcbiAgICB9XG4gIH0pO1xuICBhd2FpdCBpbnRlcmFjdGlvblByb21pc2U7XG4gIGlmIChmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICBpbnB1dHMuZmVhdHVyZXMgPSBmZWF0dXJlcztcbiAgICBwcm9taXNlLnJlc29sdmUoaW5wdXRzKTtcbiAgfSBlbHNlIHtcbiAgICBHVUkuc2hvd1VzZXJNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgIG1lc3NhZ2U6ICdwbHVnaW5zLmVkaXRpbmcubWVzc2FnZXMubm9fZmVhdHVyZV9zZWxlY3RlZCcsXG4gICAgICBjbG9zYWJsZTogZmFsc2UsXG4gICAgICBhdXRvY2xvc2U6IHRydWVcbiAgICB9KTtcbiAgICBwcm9taXNlLnJlamVjdCgpO1xuICB9XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5waWNrSW50ZXJhY3Rpb24pO1xuICB0aGlzLnBpY2tJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaWNrUHJvamVjdExheWVyRmVhdHVyZXNUYXNrO1xuIiwiY29uc3QgeyBBcHBsaWNhdGlvblN0YXRlIH0gPSBnM3dzZGsuY29yZTtcbmNvbnN0IHsgYmFzZSwgaW5oZXJpdCB9ID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7XG4gIGlzU2FtZUJhc2VHZW9tZXRyeVR5cGUsXG4gIGNvbnZlcnRTaW5nbGVNdWx0aUdlb21ldHJ5XG59ID0gZzN3c2RrLmNvcmUuZ2VvdXRpbHM7XG5jb25zdCB7IEZlYXR1cmUgfSA9IGczd3Nkay5jb3JlLmxheWVyLmZlYXR1cmVzO1xuY29uc3QgeyBQaWNrRmVhdHVyZUludGVyYWN0aW9uIH0gPSBnM3dzZGsub2wuaW50ZXJhY3Rpb25zO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmZ1bmN0aW9uIFNlbGVjdEVsZW1lbnRzVGFzayhvcHRpb25zPXt9KSB7XG4gIHRoaXMuX3R5cGUgPSBvcHRpb25zLnR5cGUgfHwgJ2Jib3gnOyAvLyAnc2luZ2xlJyAnYmJveCcgJ211bHRpcGxlJ1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbnMgPSBbXTtcbiAgdGhpcy5tdWx0aXBsZXNlbGVjdGZlYXR1cmVzID0gW107XG4gIHRoaXMuX29yaWdpbmFsU3R5bGU7XG4gIHRoaXMuX3ZlY3RvckxheWVyO1xuICBiYXNlKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5pbmhlcml0KFNlbGVjdEVsZW1lbnRzVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IFNlbGVjdEVsZW1lbnRzVGFzay5wcm90b3R5cGU7XG5cbnByb3RvLmFkZFNpbmdsZVNlbGVjdEludGVyYWN0aW9uID0gZnVuY3Rpb24oe2xheWVyLCBpbnB1dHMsIHByb21pc2UsIGJ1dHRvbm5leHQ9ZmFsc2V9PSB7fSl7XG4gIGNvbnN0IHNpbmdsZUludGVyYWN0aW9uID0gbmV3IFBpY2tGZWF0dXJlSW50ZXJhY3Rpb24oe1xuICAgIGxheWVyczogW2xheWVyLmdldEVkaXRpbmdMYXllcigpXVxuICB9KTtcbiAgc2luZ2xlSW50ZXJhY3Rpb24ub24oJ3BpY2tlZCcsIGUgPT4ge1xuICAgIGNvbnN0IGZlYXR1cmUgPSBlLmZlYXR1cmU7XG4gICAgaWYgKGZlYXR1cmUpIHtcbiAgICAgIGNvbnN0IGZlYXR1cmVzID0gW2ZlYXR1cmVdO1xuICAgICAgaW5wdXRzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICBpZiAoIWJ1dHRvbm5leHQpIHtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxTdHlsZSA9IHRoaXMuc2V0RmVhdHVyZXNTZWxlY3RlZFN0eWxlKGZlYXR1cmVzKTtcbiAgICAgICAgdGhpcy5fc3RlcHMgJiYgdGhpcy5zZXRVc2VyTWVzc2FnZVN0ZXBEb25lKCdzZWxlY3QnKTtcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGlucHV0cyk7XG4gICAgICB9IGVsc2UgdGhpcy5hZGRSZW1vdmVUb011bHRpcGxlU2VsZWN0RmVhdHVyZXMoW2ZlYXR1cmVdLCBpbnB1dHMpO1xuICAgIH1cbiAgfSk7XG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9ucy5wdXNoKHNpbmdsZUludGVyYWN0aW9uKTtcbiAgdGhpcy5hZGRJbnRlcmFjdGlvbihzaW5nbGVJbnRlcmFjdGlvbik7XG59O1xuXG4vKipcbiAqIFBpY2sgdG8gYWRkIGZlYXR1cmUgZnJvbSBleHRlcm5hbCBsYXllciBhZGRlZCB0byBtYXBcbiAqIEBwYXJhbSBsYXllclxuICogQHBhcmFtIGlucHV0c1xuICogQHBhcmFtIHByb21pc2VcbiAqIEBwYXJhbSBidXR0b25uZXh0XG4gKi9cbnByb3RvLmFkZEV4dGVybmFsU2VsZWN0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbih7bGF5ZXIsIGlucHV0cywgcHJvbWlzZSwgYnV0dG9ubmV4dD1mYWxzZX09IHt9KXtcbiAgY29uc3QgbGF5ZXJHZW9tZXRyeVR5cGUgPSBsYXllci5nZXRHZW9tZXRyeVR5cGUoKTtcbiAgY29uc3QgbGF5ZXJJZCA9IGxheWVyLmdldElkKCk7XG4gIGNvbnN0IHNvdXJjZSA9IGxheWVyLmdldEVkaXRpbmdMYXllcigpLmdldFNvdXJjZSgpO1xuICBjb25zdCB7c2Vzc2lvbn0gPSB0aGlzLmdldENvbnRleHQoKTtcbiAgLy8gZmlsdGVyIGV4dGVybmFsIGxheWVyIG9ubHkgdmVjdG9yIC0gRXhjbHVkZSBXTVNcbiAgY29uc3QgbGF5ZXJzID0gdGhpcy5nZXRNYXBTZXJ2aWNlKCkuZ2V0RXh0ZXJuYWxMYXllcnMoKS5maWx0ZXIoZXh0ZXJuYUxheWVyID0+IHtcbiAgICBsZXQgc2FtZUJhc2VHZW9tZXRyeSA9IHRydWU7XG4gICAgY29uc3QgdHlwZSA9IGV4dGVybmFMYXllci5nZXRUeXBlKCk7XG4gICAgaWYgKHR5cGUgPT09ICdWRUNUT1InKSB7XG4gICAgICBjb25zdCBmZWF0dXJlcyA9IGV4dGVybmFMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpO1xuICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbMF07XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5VHlwZSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRUeXBlKCk7XG4gICAgICAgIHNhbWVCYXNlR2VvbWV0cnkgPSBpc1NhbWVCYXNlR2VvbWV0cnlUeXBlKGdlb21ldHJ5VHlwZSwgbGF5ZXJHZW9tZXRyeVR5cGUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzYW1lQmFzZUdlb21ldHJ5O1xuICB9KTtcbiAgY29uc3Qgc2luZ2xlSW50ZXJhY3Rpb24gPSBuZXcgUGlja0ZlYXR1cmVJbnRlcmFjdGlvbih7XG4gICAgbGF5ZXJzXG4gIH0pO1xuICBzaW5nbGVJbnRlcmFjdGlvbi5vbigncGlja2VkJywgZXZ0ID0+IHtcbiAgICBpZiAoZXZ0LmZlYXR1cmUpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBsYXllci5nZXRFZGl0aW5nRmllbGRzKCk7XG4gICAgICBjb25zdCBnZW9tZXRyeSA9IGV2dC5mZWF0dXJlLmdldEdlb21ldHJ5KCk7XG4gICAgICAoZ2VvbWV0cnkuZ2V0VHlwZSgpICE9PSBsYXllckdlb21ldHJ5VHlwZSkgJiYgZXZ0LmZlYXR1cmUuc2V0R2VvbWV0cnkoY29udmVydFNpbmdsZU11bHRpR2VvbWV0cnkoZ2VvbWV0cnksIGxheWVyR2VvbWV0cnlUeXBlKSk7XG4gICAgICBjb25zdCBmZWF0dXJlID0gbmV3IEZlYXR1cmUoe1xuICAgICAgICBmZWF0dXJlOiBldnQuZmVhdHVyZSxcbiAgICAgICAgcHJvcGVydGllczogYXR0cmlidXRlcy5maWx0ZXIoYXR0cmlidXRlID0+IHtcbiAgICAgICAgICAvL3NldCBtZWRpYSBhdHRyaWJ1dGUgdG8gbnVsbFxuICAgICAgICAgIGlmIChhdHRyaWJ1dGUuaW5wdXQudHlwZSA9PT0gJ21lZGlhJykgZXZ0LmZlYXR1cmUuc2V0KGF0dHJpYnV0ZS5uYW1lLCBudWxsKTtcbiAgICAgICAgICByZXR1cm4gIWF0dHJpYnV0ZS5wa1xuICAgICAgICB9KS5tYXAocHJvcGVydHkgPT4gcHJvcGVydHkubmFtZSlcbiAgICAgIH0pO1xuXG4gICAgICBmZWF0dXJlLnNldFRlbXBvcmFyeUlkKCk7XG4gICAgICBzb3VyY2UuYWRkRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgIHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlLCBmYWxzZSk7XG4gICAgICBjb25zdCBmZWF0dXJlcyA9IFtmZWF0dXJlXTtcbiAgICAgIGlucHV0cy5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgICAgcHJvbWlzZS5yZXNvbHZlKGlucHV0cyk7XG4gICAgfSBlbHNlIHByb21pc2UucmVqZWN0KCk7XG4gIH0pO1xuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbnMucHVzaChzaW5nbGVJbnRlcmFjdGlvbik7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24oc2luZ2xlSW50ZXJhY3Rpb24pO1xufTtcblxucHJvdG8uYWRkUmVtb3ZlVG9NdWx0aXBsZVNlbGVjdEZlYXR1cmVzID0gZnVuY3Rpb24oZmVhdHVyZXM9W10sIGlucHV0cyl7XG4gIGZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PntcbiAgICBjb25zdCBzZWxJbmRleCA9IHRoaXMubXVsdGlwbGVzZWxlY3RmZWF0dXJlcy5pbmRleE9mKGZlYXR1cmUpO1xuICAgIGlmIChzZWxJbmRleCA8IDApIHtcbiAgICAgIHRoaXMuX29yaWdpbmFsU3R5bGUgPSB0aGlzLnNldEZlYXR1cmVzU2VsZWN0ZWRTdHlsZShbZmVhdHVyZV0pO1xuICAgICAgdGhpcy5tdWx0aXBsZXNlbGVjdGZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubXVsdGlwbGVzZWxlY3RmZWF0dXJlcy5zcGxpY2Uoc2VsSW5kZXgsIDEpO1xuICAgICAgZmVhdHVyZS5zZXRTdHlsZSh0aGlzLl9vcmlnaW5hbFN0eWxlKTtcbiAgICB9XG4gICAgaW5wdXRzLmZlYXR1cmVzID0gdGhpcy5tdWx0aXBsZXNlbGVjdGZlYXR1cmVzO1xuICB9KTtcbiAgdGhpcy5fc3RlcHMuc2VsZWN0LmJ1dHRvbm5leHQuZGlzYWJsZWQgPSB0aGlzLl9zdGVwcy5zZWxlY3QuYnV0dG9ubmV4dC5jb25kaXRpb24gPyB0aGlzLl9zdGVwcy5zZWxlY3QuYnV0dG9ubmV4dC5jb25kaXRpb24oe2ZlYXR1cmVzOnRoaXMubXVsdGlwbGVzZWxlY3RmZWF0dXJlc30pIDogdGhpcy5tdWx0aXBsZXNlbGVjdGZlYXR1cmVzLmxlbmd0aCA9PT0gMDtcbiAgaWYgKHRoaXMuX3N0ZXBzLnNlbGVjdC5keW5hbWljICE9PSB1bmRlZmluZWQpIHRoaXMuX3N0ZXBzLnNlbGVjdC5keW5hbWljID0gdGhpcy5tdWx0aXBsZXNlbGVjdGZlYXR1cmVzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogTXVsdGlwbGUgaW50ZXJhY3Rpb24gZm9yIHNlbGVjdCBmZWF0dXJlc1xuICogQHBhcmFtIGxheWVyXG4gKiBAcGFyYW0gaW5wdXRzXG4gKiBAcGFyYW0gcHJvbWlzZVxuICogQHBhcmFtIGJ1dHRvbm5leHRcbiAqL1xucHJvdG8uYWRkTXVsdGlwbGVTZWxlY3RJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uKHtsYXllciwgaW5wdXRzLCBwcm9taXNlLCBidXR0b25uZXh0PWZhbHNlfT17fSl7XG4gIGxldCBzZWxlY3RJbnRlcmFjdGlvbk11bHRpcGxlO1xuICBpZiAoQXBwbGljYXRpb25TdGF0ZS5pc21vYmlsZSkge1xuICAgIGNvbnN0IGdlb21ldHJ5RnVuY3Rpb24gPSBvbC5pbnRlcmFjdGlvbi5EcmF3LmNyZWF0ZUJveCgpO1xuICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBvbC5zb3VyY2UuVmVjdG9yKHt9KTtcbiAgICB0aGlzLl92ZWN0b3JMYXllciA9IG5ldyBvbC5sYXllci5WZWN0b3Ioe1xuICAgICAgc291cmNlXG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy5nZXRNYXAoKS5hZGRMYXllcih0aGlzLl92ZWN0b3JMYXllcik7XG4gICAgc2VsZWN0SW50ZXJhY3Rpb25NdWx0aXBsZSA9IG5ldyBvbC5pbnRlcmFjdGlvbi5EcmF3KHtcbiAgICAgIHR5cGU6ICdDaXJjbGUnLFxuICAgICAgc291cmNlLFxuICAgICAgZ2VvbWV0cnlGdW5jdGlvblxuICAgIH0pO1xuXG4gICAgc2VsZWN0SW50ZXJhY3Rpb25NdWx0aXBsZS5vbignZHJhd2VuZCcsIGV2dCA9PiB7XG4gICAgICBjb25zdCBmZWF0dXJlID0gZXZ0LmZlYXR1cmU7XG4gICAgICBjb25zdCBiYm94RXh0ZW50ID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldEV4dGVudCgpO1xuICAgICAgY29uc3QgbGF5ZXJTb3VyY2UgPSBsYXllci5nZXRFZGl0aW5nTGF5ZXIoKS5nZXRTb3VyY2UoKTtcbiAgICAgIGNvbnN0IGZlYXR1cmVzID0gbGF5ZXJTb3VyY2UuZ2V0RmVhdHVyZXNJbkV4dGVudChiYm94RXh0ZW50KTtcbiAgICAgIGlmICghYnV0dG9ubmV4dCl7XG4gICAgICAgIGlmICghZmVhdHVyZXMubGVuZ3RoKSBwcm9taXNlLnJlamVjdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpbnB1dHMuZmVhdHVyZXMgPSBmZWF0dXJlcztcbiAgICAgICAgICB0aGlzLl9vcmlnaW5hbFN0eWxlID0gdGhpcy5zZXRGZWF0dXJlc1NlbGVjdGVkU3R5bGUoZmVhdHVyZXMpO1xuICAgICAgICAgIHRoaXMuX3N0ZXBzICYmIHRoaXMuc2V0VXNlck1lc3NhZ2VTdGVwRG9uZSgnc2VsZWN0Jyk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGlucHV0cyk7XG4gICAgICAgICAgfSwgNTAwKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgdGhpcy5hZGRSZW1vdmVUb011bHRpcGxlU2VsZWN0RmVhdHVyZXMoZmVhdHVyZXMsIGlucHV0cyk7XG4gICAgfSk7XG4gIH0gIGVsc2Uge1xuICAgIHNlbGVjdEludGVyYWN0aW9uTXVsdGlwbGUgPSBuZXcgb2wuaW50ZXJhY3Rpb24uRHJhZ0JveCh7XG4gICAgICBjb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24uc2hpZnRLZXlPbmx5XG4gICAgfSk7XG4gICAgc2VsZWN0SW50ZXJhY3Rpb25NdWx0aXBsZS5vbignYm94ZW5kJywgZXZ0ID0+IHtcbiAgICAgIGNvbnN0IGZlYXR1cmVzID0gW107XG4gICAgICBjb25zdCBleHRlbnQgPSBzZWxlY3RJbnRlcmFjdGlvbk11bHRpcGxlLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCk7XG4gICAgICBjb25zdCBsYXllclNvdXJjZSA9IGxheWVyLmdldEVkaXRpbmdMYXllcigpLmdldFNvdXJjZSgpO1xuICAgICAgbGF5ZXJTb3VyY2UuZm9yRWFjaEZlYXR1cmVJbnRlcnNlY3RpbmdFeHRlbnQoZXh0ZW50LCBmZWF0dXJlID0+IHtcbiAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKVxuICAgICAgfSk7XG4gICAgICBpZiAoIWJ1dHRvbm5leHQpe1xuICAgICAgICBpZiAoIWZlYXR1cmVzLmxlbmd0aCkgcHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaW5wdXRzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICAgICAgdGhpcy5fb3JpZ2luYWxTdHlsZSA9IHRoaXMuc2V0RmVhdHVyZXNTZWxlY3RlZFN0eWxlKGZlYXR1cmVzKTtcbiAgICAgICAgICB0aGlzLl9zdGVwcyAmJiB0aGlzLnNldFVzZXJNZXNzYWdlU3RlcERvbmUoJ3NlbGVjdCcpO1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShpbnB1dHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgdGhpcy5hZGRSZW1vdmVUb011bHRpcGxlU2VsZWN0RmVhdHVyZXMoZmVhdHVyZXMsIGlucHV0cylcbiAgICB9KTtcbiAgfVxuICB0aGlzLl9zZWxlY3RJbnRlcmFjdGlvbnMucHVzaChzZWxlY3RJbnRlcmFjdGlvbk11bHRpcGxlKTtcbiAgdGhpcy5hZGRJbnRlcmFjdGlvbihzZWxlY3RJbnRlcmFjdGlvbk11bHRpcGxlKTtcbn07XG5cbnByb3RvLnJ1biA9IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCwgcXVlcXVlcykge1xuICBjb25zdCBsYXllciA9IGlucHV0cy5sYXllcjtcbiAgY29uc3QgcHJvbWlzZSA9ICQuRGVmZXJyZWQoKTtcbiAgc3dpdGNoKHRoaXMuX3R5cGUpIHtcbiAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgdGhpcy5hZGRTaW5nbGVTZWxlY3RJbnRlcmFjdGlvbih7bGF5ZXIsIGlucHV0cywgcHJvbWlzZX0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbXVsdGlwbGUnOlxuICAgICAgY29uc3QgYnV0dG9ubmV4dCA9ICEhdGhpcy5fc3RlcHMuc2VsZWN0LmJ1dHRvbm5leHQ7XG4gICAgICBpZiAoYnV0dG9ubmV4dCkgdGhpcy5fc3RlcHMuc2VsZWN0LmJ1dHRvbm5leHQuZG9uZSA9ICgpID0+e3Byb21pc2UucmVzb2x2ZShpbnB1dHMpfTtcbiAgICAgIHRoaXMuYWRkU2luZ2xlU2VsZWN0SW50ZXJhY3Rpb24oe2xheWVyLCBpbnB1dHMsIHByb21pc2UsIGJ1dHRvbm5leHR9KTtcbiAgICAgIHRoaXMuYWRkTXVsdGlwbGVTZWxlY3RJbnRlcmFjdGlvbih7bGF5ZXIsIGlucHV0cywgcHJvbWlzZSwgYnV0dG9ubmV4dH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmJveCc6XG4gICAgICB0aGlzLmFkZE11bHRpcGxlU2VsZWN0SW50ZXJhY3Rpb24oe2xheWVyLCBpbnB1dHMsIHByb21pc2V9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2V4dGVybmFsJzpcbiAgICAgIHRoaXMuYWRkRXh0ZXJuYWxTZWxlY3RJbnRlcmFjdGlvbih7bGF5ZXIsIGlucHV0cywgcHJvbWlzZX0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcXVlcXVlcy5taWNyby5hZGRUYXNrKCgpPT57XG4gICBpbnB1dHMuZmVhdHVyZXMuZm9yRWFjaCgoZmVhdHVyZSA9PiBmZWF0dXJlLnNldFN0eWxlKHRoaXMuX29yaWdpbmFsU3R5bGUpKSk7XG4gIH0pO1xuICByZXR1cm4gcHJvbWlzZS5wcm9taXNlKCk7XG59O1xuXG5wcm90by5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9ucy5mb3JFYWNoKGludGVyYWN0aW9uID0+IHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24oaW50ZXJhY3Rpb24pKTtcbiAgdGhpcy5fdmVjdG9yTGF5ZXIgJiYgdGhpcy5nZXRNYXAoKS5yZW1vdmVMYXllcih0aGlzLl92ZWN0b3JMYXllcik7XG4gIHRoaXMuX3ZlY3RvckxheWVyID0gbnVsbDtcbiAgdGhpcy5fb3JpZ2luYWxTdHlsZSA9IG51bGw7XG4gIHRoaXMuX3NlbGVjdEludGVyYWN0aW9ucyA9IFtdO1xuICB0aGlzLm11bHRpcGxlc2VsZWN0ZmVhdHVyZXMgPSBbXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RWxlbWVudHNUYXNrO1xuIiwiY29uc3QgeyBiYXNlLCBpbmhlcml0IH0gID0gZzN3c2RrLmNvcmUudXRpbHM7XG5jb25zdCB7IHNwbGl0RmVhdHVyZXMgfSA9IGczd3Nkay5jb3JlLmdlb3V0aWxzO1xuY29uc3QgeyBGZWF0dXJlIH0gPSBnM3dzZGsuY29yZS5sYXllci5mZWF0dXJlcztcbmNvbnN0IHsgR1VJIH0gPSBnM3dzZGsuZ3VpO1xuY29uc3QgRWRpdGluZ1Rhc2sgPSByZXF1aXJlKCcuL2VkaXRpbmd0YXNrJyk7XG5cbmZ1bmN0aW9uIFNwbGl0RmVhdHVyZVRhc2sob3B0aW9ucz17fSl7XG4gIGJhc2UodGhpcywgb3B0aW9ucyk7XG59XG5cbmluaGVyaXQoU3BsaXRGZWF0dXJlVGFzaywgRWRpdGluZ1Rhc2spO1xuXG5jb25zdCBwcm90byA9IFNwbGl0RmVhdHVyZVRhc2sucHJvdG90eXBlO1xuXG5wcm90by5ydW4gPSBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQpIHtcbiAgY29uc3QgZCA9ICQuRGVmZXJyZWQoKTtcbiAgY29uc3QgeyBsYXllciwgZmVhdHVyZXMgfSA9IGlucHV0cztcbiAgY29uc3Qgc291cmNlID0gbGF5ZXIuZ2V0RWRpdGluZ0xheWVyKCkuZ2V0U291cmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBjb250ZXh0LnNlc3Npb247XG4gIHRoaXMuX3NuYXBJdGVyYWN0aW9uID0gbmV3IG9sLmludGVyYWN0aW9uLlNuYXAoe1xuICAgIHNvdXJjZSxcbiAgICBlZGdlOiB0cnVlXG4gIH0pO1xuXG4gIHRoaXMuX2RyYXdJbnRlcmFjdGlvbiA9IG5ldyBvbC5pbnRlcmFjdGlvbi5EcmF3KHtcbiAgICB0eXBlOiAnTGluZVN0cmluZycsXG4gICAgZmVhdHVyZXM6IG5ldyBvbC5Db2xsZWN0aW9uKCksXG4gICAgZnJlZWhhbmRDb25kaXRpb246IG9sLmV2ZW50cy5jb25kaXRpb24ubmV2ZXJcbiAgfSk7XG5cbiAgdGhpcy5fZHJhd0ludGVyYWN0aW9uLm9uKCdkcmF3ZW5kJywgYXN5bmMgZXZ0ID0+IHtcbiAgICBjb25zdCBzcGxpdGZlYXR1cmUgPSBldnQuZmVhdHVyZTtcbiAgICBsZXQgaXNTcGxpdHRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHNwbGl0dGVkR2VvbWV0cmllcyA9IHNwbGl0RmVhdHVyZXMoe1xuICAgICAgc3BsaXRmZWF0dXJlLFxuICAgICAgZmVhdHVyZXNcbiAgICB9KTtcbiAgICBjb25zdCBzcGxpdHRlZEdlb21ldHJpZXNMZW5ndGggPSBzcGxpdHRlZEdlb21ldHJpZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGk9MDsgaSA8IHNwbGl0dGVkR2VvbWV0cmllc0xlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB7dWlkLCBnZW9tZXRyaWVzfSA9IHNwbGl0dGVkR2VvbWV0cmllc1tpXTtcbiAgICAgIGlmIChnZW9tZXRyaWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaXNTcGxpdHRlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSBmZWF0dXJlcy5maW5kKGZlYXR1cmUgPT4gZmVhdHVyZS5nZXRVaWQoKSA9PT0gdWlkKTtcbiAgICAgICAgYXdhaXQgdGhpcy5faGFuZGxlU3BsaXRGZWF0dXJlKHtcbiAgICAgICAgICBmZWF0dXJlLFxuICAgICAgICAgIHNwbGl0dGVkR2VvbWV0cmllczogZ2VvbWV0cmllcyxcbiAgICAgICAgICBpbnB1dHMsXG4gICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNTcGxpdHRlZCkge1xuICAgICAgR1VJLnNob3dVc2VyTWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgbWVzc2FnZTogJ3BsdWdpbnMuZWRpdGluZy5tZXNzYWdlcy5zcGxpdHRlZCcsXG4gICAgICAgIGF1dG9jbG9zZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGQucmVzb2x2ZShpbnB1dHMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIEdVSS5zaG93VXNlck1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnd2FybmluZycsXG4gICAgICAgIG1lc3NhZ2U6ICdwbHVnaW5zLmVkaXRpbmcubWVzc2FnZXMubm9zcGxpdHRlZGZlYXR1cmUnLFxuICAgICAgICBhdXRvY2xvc2U6IHRydWVcbiAgICAgIH0pO1xuICAgICAgZC5yZWplY3QoKTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLmFkZEludGVyYWN0aW9uKHRoaXMuX2RyYXdJbnRlcmFjdGlvbik7XG4gIHRoaXMuYWRkSW50ZXJhY3Rpb24odGhpcy5fc25hcEl0ZXJhY3Rpb24pO1xuICByZXR1cm4gZC5wcm9taXNlKCk7XG59O1xuXG5wcm90by5faGFuZGxlU3BsaXRGZWF0dXJlID0gYXN5bmMgZnVuY3Rpb24oe2ZlYXR1cmUsIGlucHV0cywgc2Vzc2lvbiwgc3BsaXR0ZWRHZW9tZXRyaWVzPVtdfT17fSl7XG4gIGNvbnN0IG5ld0ZlYXR1cmVzID0gW107XG4gIGNvbnN0IHtsYXllcn0gPSBpbnB1dHM7XG4gIGNvbnN0IHNvdXJjZSA9IGxheWVyLmdldEVkaXRpbmdMYXllcigpLmdldFNvdXJjZSgpO1xuICBjb25zdCBsYXllcklkID0gbGF5ZXIuZ2V0SWQoKTtcbiAgY29uc3Qgb3JpRmVhdHVyZSA9IGZlYXR1cmUuY2xvbmUoKTtcbiAgaW5wdXRzLmZlYXR1cmVzID0gc3BsaXR0ZWRHZW9tZXRyaWVzLmxlbmd0aCA/IFtdIDogaW5wdXRzLmZlYXR1cmVzO1xuICBjb25zdCBzcGxpdHRlZEdlb21ldHJpZXNMZW5ndGggPSBzcGxpdHRlZEdlb21ldHJpZXMubGVuZ3RoO1xuICBmb3IgKGxldCBpbmRleD0wOyBpbmRleCA8IHNwbGl0dGVkR2VvbWV0cmllc0xlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IHNwbGl0dGVkR2VvbWV0cnkgPSBzcGxpdHRlZEdlb21ldHJpZXNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgLyoqXG4gICAgICAgKiBjaGVjayBnZW9tZXRyeSBldmFsdWF0ZWQgZXhwcmVzc2lvblxuICAgICAgICovXG4gICAgICBmZWF0dXJlLnNldEdlb21ldHJ5KHNwbGl0dGVkR2VvbWV0cnkpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5ldmFsdWF0ZUdlb21ldHJ5RXhwcmVzc2lvbkZpZWxkKHtcbiAgICAgICAgICBpbnB1dHMsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBmZWF0dXJlXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaChlcnIpe31cblxuICAgICAgc2Vzc2lvbi5wdXNoVXBkYXRlKGxheWVySWQsIGZlYXR1cmUsIG9yaUZlYXR1cmUpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld0ZlYXR1cmUgPSBvcmlGZWF0dXJlLmNsb25lTmV3KCk7XG4gICAgICBuZXdGZWF0dXJlLnNldEdlb21ldHJ5KHNwbGl0dGVkR2VvbWV0cnkpO1xuXG4gICAgICB0aGlzLnNldE51bGxNZWRpYUZpZWxkcyh7XG4gICAgICAgIGxheWVyLFxuICAgICAgICBmZWF0dXJlOiBuZXdGZWF0dXJlXG4gICAgICB9KTtcblxuICAgICAgZmVhdHVyZSA9IG5ldyBGZWF0dXJlKHtcbiAgICAgICAgZmVhdHVyZTogbmV3RmVhdHVyZVxuICAgICAgfSk7XG5cbiAgICAgIGZlYXR1cmUuc2V0VGVtcG9yYXJ5SWQoKTtcbiAgICAgIHNvdXJjZS5hZGRGZWF0dXJlKGZlYXR1cmUpO1xuICAgICAgLyoqXG4gICAgICAgKiAqIGV2YWx1YXRlIGdlb21ldHJ5IGV4cHJlc3Npb25cbiAgICAgICovXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLmV2YWx1YXRlR2VvbWV0cnlFeHByZXNzaW9uRmllbGQoe1xuICAgICAgICAgIGlucHV0cyxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGZlYXR1cmVcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoKGVycil7fVxuXG4gICAgICBuZXdGZWF0dXJlcy5wdXNoKHNlc3Npb24ucHVzaEFkZChsYXllcklkLCBmZWF0dXJlKSk7XG4gICAgfVxuICAgIGlucHV0cy5mZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICB9XG5cbiAgcmV0dXJuIG5ld0ZlYXR1cmVzO1xufTtcblxucHJvdG8uc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMucmVtb3ZlSW50ZXJhY3Rpb24odGhpcy5fZHJhd0ludGVyYWN0aW9uKTtcbiAgdGhpcy5yZW1vdmVJbnRlcmFjdGlvbih0aGlzLl9zbmFwSXRlcmFjdGlvbik7XG4gIHRoaXMuX2RyYXdJbnRlcmFjdGlvbiA9IG51bGw7XG4gIHRoaXMuX3NuYXBJdGVyYWN0aW9uID0gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3BsaXRGZWF0dXJlVGFzaztcbiJdfQ==
